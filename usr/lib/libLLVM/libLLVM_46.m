uint64_t llvm::InstrProfCorrelator::get@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::object::ObjectFile *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  void **v13;
  void (**v14)(void **);
  unsigned int v15;
  void **v16;
  void (**v17)(void **);
  int v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void (**v22)(void **);
  void **v23;
  void (**v24)(void **);
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t result;
  void *v30[2];
  char v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  _QWORD v35[4];
  void *__p[2];
  char v37;
  uint64_t v38[4];
  __int16 v39;
  uint64_t *v40;
  char v41;
  llvm::object::ObjectFile *v42;
  char v43;
  char *v44;
  char *(*v45)(char *);
  void **v46;
  char *v47;
  char *(*v48)(char *);
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a1;
  v5 = v4[2] - v4[1];
  v35[0] = v4[1];
  v35[1] = v5;
  v35[2] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v35[3] = v6;
  llvm::object::createBinary((uint64_t)v35);
  v7 = v42;
  if ((v43 & 1) != 0)
  {
    v42 = 0;
    if (v7)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v7;
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (!v42 || (*((_DWORD *)v42 + 2) - 24) < 0xFFFFFFF1)
  {
LABEL_53:
    v28 = operator new();
    v30[0] = "not an object file";
    v33 = 259;
    *(_QWORD *)v28 = off_1E8192D50;
    *(_DWORD *)(v28 + 8) = 12;
    llvm::Twine::str((llvm::Twine *)v30, (_QWORD *)(v28 + 16));
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v28;
    goto LABEL_54;
  }
  v8 = *a1;
  *a1 = 0;
  v34 = v8;
  llvm::InstrProfCorrelator::Context::get(v7, &v34, (uint64_t)&v40);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if ((v41 & 1) != 0)
  {
    v9 = v40;
    v40 = 0;
    if (v9)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v9;
      sub_1C5A8E380(&v40);
      goto LABEL_54;
    }
  }
  llvm::object::ObjectFile::makeTriple(v7, (llvm::Triple *)v30);
  v10 = sub_1C5E4EA90(v32);
  if (v10 == 32)
  {
    v11 = v40;
    v40 = 0;
    v15 = *((_DWORD *)v7 + 2) & 0xFFFFFFFC;
    if (v15 != 16 && v15 != 12)
      goto LABEL_24;
    v37 = 0;
    LOBYTE(__p[0]) = 0;
    v47 = (char *)&unk_1E8169658;
    v48 = llvm::WithColor::defaultErrorHandler;
    v49 = (void **)&v47;
    v44 = (char *)&unk_1E8169658;
    v45 = llvm::WithColor::defaultWarningHandler;
    v46 = (void **)&v44;
    llvm::DWARFContext::create(v7, 0, 0, (uint64_t)__p, &v47, &v44, v38);
    v16 = v46;
    if (v46 == (void **)&v44)
    {
      v17 = (void (**)(void **))(v44 + 32);
      v16 = (void **)&v44;
    }
    else
    {
      if (!v46)
        goto LABEL_36;
      v17 = (void (**)(void **))((char *)*v46 + 40);
    }
    (*v17)(v16);
LABEL_36:
    v23 = v49;
    if (v49 == (void **)&v47)
    {
      v24 = (void (**)(void **))(v47 + 32);
      v23 = (void **)&v47;
    }
    else
    {
      if (!v49)
      {
LABEL_46:
        if (v37 < 0)
          operator delete(__p[0]);
        v25 = operator new();
        v18 = 0;
        *(_QWORD *)v25 = off_1E8192E28;
        *(_QWORD *)(v25 + 8) = v11;
        v26 = v38[0];
        v27 = 0uLL;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)(v25 + 48) = 0u;
        *(_DWORD *)(v25 + 64) = 0;
        goto LABEL_49;
      }
      v24 = (void (**)(void **))((char *)*v49 + 40);
    }
    (*v24)(v23);
    goto LABEL_46;
  }
  if (v10 != 64)
  {
    v18 = 1;
    goto LABEL_50;
  }
  v11 = v40;
  v40 = 0;
  v12 = *((_DWORD *)v7 + 2) & 0xFFFFFFFC;
  if (v12 == 16 || v12 == 12)
  {
    v37 = 0;
    LOBYTE(__p[0]) = 0;
    v47 = (char *)&unk_1E8169658;
    v48 = llvm::WithColor::defaultErrorHandler;
    v49 = (void **)&v47;
    v44 = (char *)&unk_1E8169658;
    v45 = llvm::WithColor::defaultWarningHandler;
    v46 = (void **)&v44;
    llvm::DWARFContext::create(v7, 0, 0, (uint64_t)__p, &v47, &v44, v38);
    v13 = v46;
    if (v46 == (void **)&v44)
    {
      v14 = (void (**)(void **))(v44 + 32);
      v13 = (void **)&v44;
    }
    else
    {
      if (!v46)
        goto LABEL_31;
      v14 = (void (**)(void **))((char *)*v46 + 40);
    }
    (*v14)(v13);
LABEL_31:
    v21 = v49;
    if (v49 == (void **)&v47)
    {
      v22 = (void (**)(void **))(v47 + 32);
      v21 = (void **)&v47;
    }
    else
    {
      if (!v49)
      {
LABEL_41:
        if (v37 < 0)
          operator delete(__p[0]);
        v25 = operator new();
        v18 = 0;
        *(_DWORD *)(v25 + 64) = 1;
        *(_QWORD *)v25 = off_1E8192DA0;
        *(_QWORD *)(v25 + 8) = v11;
        v26 = v38[0];
        v27 = 0uLL;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)(v25 + 48) = 0u;
LABEL_49:
        *(_OWORD *)(v25 + 72) = v27;
        *(_OWORD *)(v25 + 88) = v27;
        *(_OWORD *)(v25 + 100) = v27;
        *(_QWORD *)(v25 + 120) = v26;
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = v25;
        goto LABEL_50;
      }
      v22 = (void (**)(void **))((char *)*v49 + 40);
    }
    (*v22)(v21);
    goto LABEL_41;
  }
LABEL_24:
  v19 = operator new();
  v38[0] = (uint64_t)"unsupported debug info format (only DWARF is supported)";
  v39 = 259;
  *(_QWORD *)v19 = off_1E8192D50;
  *(_DWORD *)(v19 + 8) = 12;
  llvm::Twine::str((llvm::Twine *)v38, (_QWORD *)(v19 + 16));
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v19;
  if (v11)
  {
    v20 = *v11;
    *v11 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    MEMORY[0x1CAA32FC0](v11, 0x1020C4059E634C0);
  }
  v18 = 0;
LABEL_50:
  if (v31 < 0)
    operator delete(v30[0]);
  sub_1C5A8E380(&v40);
  if (v18)
    goto LABEL_53;
LABEL_54:
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::InstrProfCorrelator::getDataSize(llvm::InstrProfCorrelator *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 16);
  if (this && !v1)
  {
    v2 = 40;
    return (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) / v2;
  }
  v3 = 0;
  if (this && v1 == 1)
  {
    v2 = 48;
    return (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) / v2;
  }
  return v3;
}

double llvm::InstrProfCorrelatorImpl<unsigned int>::InstrProfCorrelatorImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *a2 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = &off_1E8192E58;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  return result;
}

double llvm::InstrProfCorrelatorImpl<unsigned long long>::InstrProfCorrelatorImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *a2 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)a1 = &off_1E8192DD0;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  return result;
}

BOOL llvm::InstrProfCorrelatorImpl<unsigned int>::classof(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 0;
}

BOOL llvm::InstrProfCorrelatorImpl<unsigned long long>::classof(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 1;
}

uint64_t **sub_1C5A8E380(uint64_t **a1)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *a1;
  *a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  }
  else if (v3)
  {
    v4 = *v3;
    *v3 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    MEMORY[0x1CAA32FC0](v3, 0x1020C4059E634C0);
  }
  return a1;
}

void sub_1C5A8E3FC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  const char *v9;
  __int16 v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 80) || (v4 = *(_QWORD *)(a1 + 40), v5 = *(_QWORD *)(a1 + 48), v4 == v5))
  {
    v6 = operator new();
    v9 = "could not find any profile metadata in debug info";
    v10 = 259;
    *(_QWORD *)v6 = off_1E8192D50;
    *(_DWORD *)(v6 + 8) = 12;
    llvm::Twine::str((llvm::Twine *)&v9, (_QWORD *)(v6 + 16));
    *a2 = v6;
  }
  else
  {
    llvm::collectPGOFuncNameStrings((std::string *)(a1 + 16), v4, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3), a2);
    sub_1C61A86E8((_QWORD *)(a1 + 96));
    v7 = *(_QWORD *)(a1 + 40);
    for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 48) = v7;
  }
}

uint64_t sub_1C5A8E500(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E8192DA0;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E8192DD0;
  MEMORY[0x1CAA32FB4](a1[12], 8);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return sub_1C5A8E6EC((uint64_t)a1);
}

void sub_1C5A8E56C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E8192DA0;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E8192DD0;
  MEMORY[0x1CAA32FB4](a1[12], 8);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  sub_1C5A8E6EC((uint64_t)a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A8E5EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::DWARFUnit **v4;
  llvm::DWARFUnit **v5;
  llvm::DWARFUnit *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::DWARFUnit **v12;
  llvm::DWARFUnit **v13;
  llvm::DWARFUnit *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[15];
  llvm::DWARFContext::parseNormalUnits(v2);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3)
  {
    v4 = *(llvm::DWARFUnit ***)(v2 + 16);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v4, 0);
      v7 = *((_QWORD *)v6 + 36);
      v8 = *((_QWORD *)v6 + 37);
      if (v7 != v8)
      {
        v9 = v7;
        do
        {
          sub_1C5A8E78C(a1, *v4, v7);
          v9 += 24;
          v7 += 24;
        }
        while (v9 != v8);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = a1[15];
  llvm::DWARFContext::parseDWOUnits(v10, 0);
  v11 = *(unsigned int *)(v10 + 248);
  if ((_DWORD)v11)
  {
    v12 = *(llvm::DWARFUnit ***)(v10 + 240);
    v13 = &v12[v11];
    do
    {
      v14 = *v12;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v12, 0);
      v15 = *((_QWORD *)v14 + 36);
      v16 = *((_QWORD *)v14 + 37);
      if (v15 != v16)
      {
        v17 = v15;
        do
        {
          sub_1C5A8E78C(a1, *v12, v15);
          v17 += 24;
          v15 += 24;
        }
        while (v17 != v16);
      }
      ++v12;
    }
    while (v12 != v13);
  }
}

uint64_t sub_1C5A8E6EC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E8192E00;
  v5 = (void **)(a1 + 40);
  sub_1C4765410(&v5);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1CAA32FC0](v2, 0x1020C4059E634C0);
  }
  return a1;
}

void sub_1C5A8E78C(_QWORD *a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *ShortName;
  char *v9;
  llvm::DWARFUnit *v10;
  llvm::DWARFUnit *v11;
  llvm::DWARFUnit *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  llvm::DWARFUnit *v18;
  llvm::DWARFUnit *v19;
  uint64_t v20;
  unsigned int v21;
  llvm::DWARFUnit *LastChild;
  uint64_t v23;
  uint64_t v24;
  llvm::DWARFUnit *FirstChild;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  llvm::DWARFUnit *v34;
  size_t v36;
  llvm::DWARFUnit *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  char v50;
  char v51;
  llvm::DWARFUnit *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  llvm::DWARFUnit *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 *p_dst;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  int64x2_t v92;
  _BOOL4 v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t AsUnsignedConstant;
  char *v99;
  llvm::DWARFUnit *v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  int v104;
  char v105;
  unint64_t v106;
  unsigned __int8 v107;
  unsigned int v108;
  llvm::DWARFUnit *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char v113;
  char v114;
  __int128 __dst;
  int64_t v116;
  char v117;
  __int128 __s;
  char v119;
  char v120;
  char v121;
  __int16 v122;
  llvm::DWARFUnit *v123;
  llvm::DWARFUnit *v124;
  char v125;
  _BYTE v126[24];
  unint64_t v127;
  char *v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v109 = a2;
  v110 = a3;
  if (!a2)
    return;
  if (!a3)
    return;
  v3 = *(_DWORD *)(a3 + 8);
  if (v3 == -1)
    return;
  v4 = *((_QWORD *)a2 + 36);
  if (!v4)
    return;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return;
  if (*(_WORD *)(v5 + 4) != 52)
    return;
  v6 = *(_QWORD *)(v4 + 24 * v3 + 16);
  if (!v6)
    return;
  if (*(_WORD *)(v6 + 4) != 46)
    return;
  if (!*(_BYTE *)(v5 + 7))
    return;
  ShortName = llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v109);
  if (!ShortName)
    return;
  v9 = ShortName;
  if (strlen(ShortName) < 8 || *(_QWORD *)v9 != 0x5F63666F72705F5FLL)
    return;
  llvm::DWARFDie::getLocations(&v109, (llvm::dwarf *)2, (uint64_t)&v123);
  if ((v125 & 1) != 0)
  {
    v52 = v123;
    v123 = 0;
    *(_QWORD *)&__dst = v52;
    sub_1C4D62BD4((char **)&__dst, (char **)v126);
    if ((_QWORD)__dst)
      (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
    goto LABEL_127;
  }
  v10 = v123;
  v11 = v124;
  if (v123 == v124)
  {
LABEL_127:
    v104 = 0;
    v102 = 0;
    v107 = 0;
    goto LABEL_32;
  }
  v12 = v109;
  v13 = *((_BYTE *)v109 + 34);
  while (1)
  {
    v14 = *((_QWORD *)v10 + 4);
    v15 = *((_QWORD *)v10 + 5);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[15] + 520) + 40))(*(_QWORD *)(a1[15] + 520));
    *(_QWORD *)&__s = v14;
    *((_QWORD *)&__s + 1) = v15;
    v119 = v16;
    v120 = v13;
    v121 = v13;
    v122 = 0;
    sub_1C54ADD60((uint64_t)v126, &__s, 0);
    sub_1C54ADD60((uint64_t)&__dst, &__s, *((unint64_t *)&__s + 1));
    if (*(_OWORD *)v126 != __dst)
      break;
LABEL_28:
    v10 = (llvm::DWARFUnit *)((char *)v10 + 64);
    if (v10 == v11)
      goto LABEL_127;
  }
  while (v126[16] == 161)
  {
    llvm::DWARFUnit::getAddrOffsetSectionItem((uint64_t)v12, (int)v128, (uint64_t)&v112);
    if (v114)
    {
      v54 = (unint64_t)v112;
      goto LABEL_31;
    }
LABEL_23:
    sub_1C54AD0C8((unint64_t *)v126);
    if (*(_QWORD *)v126 == (_QWORD)__dst && *(_QWORD *)&v126[8] == *((_QWORD *)&__dst + 1))
      goto LABEL_28;
  }
  if (v126[16] != 3)
    goto LABEL_23;
  v54 = (unint64_t)v128;
LABEL_31:
  v107 = v54;
  v102 = v54 & 0xFFFFFFFFFFFFFF00;
  v104 = 1;
LABEL_32:
  if ((v125 & 1) != 0)
  {
    v18 = v123;
    v123 = 0;
    if (v18)
      (*(void (**)(llvm::DWARFUnit *))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    *(_QWORD *)v126 = &v123;
    sub_1C548DA28((void ***)v126);
  }
  v19 = v109;
  if (v109)
  {
    v20 = v110;
    if (v110)
    {
      v21 = *(_DWORD *)(v110 + 8);
      if (v21 == -1)
      {
        v19 = 0;
        goto LABEL_37;
      }
      v20 = *((_QWORD *)v109 + 36) + 24 * v21;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
LABEL_37:
    v20 = 0;
  }
  v123 = v19;
  v124 = (llvm::DWARFUnit *)v20;
  llvm::DWARFDie::find(&v123, 17, v126);
  if (v129)
  {
    llvm::DWARFFormValue::getAsSectionedAddress(v126, (uint64_t)&__dst);
    v53 = __dst;
    if (!(_BYTE)v116)
      v53 = 0;
    v95 = v53;
    v96 = v116;
  }
  else
  {
    v95 = 0;
    v96 = 0;
  }
  LastChild = v109;
  if (v109)
  {
    v23 = v110;
    if (!v110)
    {
      v24 = 0;
      FirstChild = 0;
      LastChild = 0;
      goto LABEL_49;
    }
    FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild((uint64_t)v109, v110);
    v24 = v55;
    LastChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getLastChild((uint64_t)LastChild, v23);
    v26 = v56;
  }
  else
  {
    v24 = 0;
    FirstChild = 0;
LABEL_49:
    v26 = 0;
  }
  v123 = FirstChild;
  v124 = (llvm::DWARFUnit *)v24;
  if (v24 != v26 || FirstChild != LastChild)
  {
    v27 = 0;
    AsUnsignedConstant = 0;
    v99 = 0;
    v105 = 0;
    v103 = 0;
    v97 = 0;
    v37 = LastChild;
    v38 = v26;
    while (1)
    {
      v39 = *(_QWORD *)(v24 + 16);
      if (!v39 || *(_WORD *)(v39 + 4) != 24576)
      {
        if (!FirstChild)
          goto LABEL_73;
        goto LABEL_70;
      }
      v100 = FirstChild;
      v101 = v24;
      llvm::DWARFDie::find(&v123, 3, v126);
      llvm::DWARFDie::find(&v123, 28, &__dst);
      if (v129)
      {
        if (v117)
          break;
      }
LABEL_122:
      FirstChild = v100;
      v24 = v101;
      v37 = LastChild;
      v38 = v26;
      if (!v100)
        goto LABEL_73;
LABEL_70:
      v40 = *(_DWORD *)(v24 + 12);
      if (v40)
      {
        v24 = *((_QWORD *)FirstChild + 36) + 24 * v40;
        goto LABEL_74;
      }
      FirstChild = 0;
LABEL_73:
      v24 = 0;
LABEL_74:
      v123 = FirstChild;
      v124 = (llvm::DWARFUnit *)v24;
      if (v24 == v38 && FirstChild == v37)
        goto LABEL_53;
    }
    llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)v126, (uint64_t)&__s);
    v41 = (char *)__s;
    if ((BYTE8(__s) & 1) != 0)
    {
      *(_QWORD *)&__s = 0;
      if (v41)
      {
        v111 = v41;
        goto LABEL_100;
      }
    }
    else if ((_QWORD)__s)
    {
      v42 = strlen((const char *)__s);
LABEL_85:
      if (llvm::InstrProfCorrelator::FunctionNameAttributeName[0])
        v43 = strlen(llvm::InstrProfCorrelator::FunctionNameAttributeName[0]);
      else
        v43 = 0;
      if (v43 >= v42)
        v44 = v42;
      else
        v44 = v43;
      if (v44 && memcmp(v41, llvm::InstrProfCorrelator::FunctionNameAttributeName[0], v44) || v42 != v43)
      {
        if (llvm::InstrProfCorrelator::CFGHashAttributeName[0])
          v45 = strlen(llvm::InstrProfCorrelator::CFGHashAttributeName[0]);
        else
          v45 = 0;
        if (v45 >= v42)
          v46 = v42;
        else
          v46 = v45;
        if ((!v46 || !memcmp(v41, llvm::InstrProfCorrelator::CFGHashAttributeName[0], v46)) && v42 == v45)
        {
          AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&__dst);
          v105 = v50;
        }
        else
        {
          if (llvm::InstrProfCorrelator::NumCountersAttributeName)
            v47 = strlen(llvm::InstrProfCorrelator::NumCountersAttributeName);
          else
            v47 = 0;
          if (v47 >= v42)
            v48 = v42;
          else
            v48 = v47;
          if ((!v48 || !memcmp(v41, llvm::InstrProfCorrelator::NumCountersAttributeName, v48)) && v42 == v47)
          {
            v97 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&__dst);
            v103 = v51;
          }
        }
        goto LABEL_119;
      }
      llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)&__dst, (uint64_t)&v112);
      if ((v113 & 1) == 0)
      {
        v27 = 1;
        v99 = v112;
LABEL_119:
        if ((BYTE8(__s) & 1) != 0)
        {
          v49 = __s;
          *(_QWORD *)&__s = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        }
        goto LABEL_122;
      }
      if (!v112)
        goto LABEL_119;
      v111 = v112;
LABEL_100:
      sub_1C4D62BD4(&v111, &v112);
      if (v111)
        (*(void (**)(char *))(*(_QWORD *)v111 + 8))(v111);
      goto LABEL_119;
    }
    v42 = 0;
    goto LABEL_85;
  }
  v97 = 0;
  AsUnsignedConstant = 0;
  v103 = 0;
  v105 = 0;
  v99 = 0;
  v27 = 0;
LABEL_53:
  if (v105)
    v28 = v27 == 0;
  else
    v28 = 1;
  v29 = v104;
  if (v28)
    v29 = 0;
  if (v29 != 1 || !v103)
    return;
  v30 = v107 | v102;
  v31 = a1[1];
  v33 = *(_QWORD *)(v31 + 8);
  v32 = *(_QWORD *)(v31 + 16);
  v34 = (llvm::DWARFUnit *)(v30 - v33);
  if (v30 < v33 || v30 >= v32)
    return;
  v36 = v99 ? strlen(v99) : 0;
  v123 = v34;
  sub_1C61A7854((uint64_t)(a1 + 12), (uint64_t *)&v123, (uint64_t)v126);
  if (!v126[16])
    return;
  if (v96)
    v57 = v95;
  else
    v57 = 0;
  *(_OWORD *)v126 = xmmword_1C85F4BB0;
  *(_QWORD *)&v126[16] = 0;
  llvm::MD5::update((int *)v126, (int *)v99, v36);
  llvm::MD5::final((int *)v126, (int *)&__dst);
  v58 = __dst;
  v59 = bswap64(__dst);
  if (*(_BYTE *)(a1[1] + 24))
    v58 = v59;
  v106 = v58;
  v60 = bswap64(AsUnsignedConstant);
  if (*(_BYTE *)(a1[1] + 24))
    v61 = v60;
  else
    v61 = AsUnsignedConstant;
  v62 = bswap64((unint64_t)v123);
  if (*(_BYTE *)(a1[1] + 24))
    v63 = (llvm::DWARFUnit *)v62;
  else
    v63 = v123;
  v64 = bswap64(v57);
  if (*(_BYTE *)(a1[1] + 24))
    v65 = v64;
  else
    v65 = v57;
  v66 = bswap32(v97);
  if (!*(_BYTE *)(a1[1] + 24))
    v66 = v97;
  v108 = v66;
  v68 = (char *)a1[10];
  v67 = a1[11];
  if ((unint64_t)v68 < v67)
  {
    *(_QWORD *)v68 = v106;
    *((_QWORD *)v68 + 1) = v61;
    *((_QWORD *)v68 + 2) = v63;
    *((_QWORD *)v68 + 3) = v65;
    *((_QWORD *)v68 + 4) = 0;
    v69 = v68 + 48;
    *((_QWORD *)v68 + 5) = v66;
    goto LABEL_167;
  }
  v70 = (char *)a1[9];
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v70) >> 4) + 1;
  if (v71 > 0x555555555555555)
    goto LABEL_197;
  v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v70) >> 4);
  if (2 * v72 > v71)
    v71 = 2 * v72;
  if (v72 >= 0x2AAAAAAAAAAAAAALL)
    v73 = 0x555555555555555;
  else
    v73 = v71;
  if (!v73)
  {
    v74 = 0;
    goto LABEL_162;
  }
  if (v73 > 0x555555555555555)
    goto LABEL_198;
  v74 = (char *)operator new(48 * v73);
LABEL_162:
  v75 = &v74[16 * ((v68 - v70) >> 4)];
  *(_QWORD *)v75 = v106;
  *((_QWORD *)v75 + 1) = v61;
  *((_QWORD *)v75 + 2) = v63;
  *((_QWORD *)v75 + 3) = v65;
  v76 = &v74[48 * v73];
  *((_QWORD *)v75 + 4) = 0;
  *((_QWORD *)v75 + 5) = v108;
  v69 = v75 + 48;
  if (v68 != v70)
  {
    do
    {
      v77 = *((_OWORD *)v68 - 3);
      v78 = *((_OWORD *)v68 - 1);
      *((_OWORD *)v75 - 2) = *((_OWORD *)v68 - 2);
      *((_OWORD *)v75 - 1) = v78;
      *((_OWORD *)v75 - 3) = v77;
      v75 -= 48;
      v68 -= 48;
    }
    while (v68 != v70);
    v68 = (char *)a1[9];
  }
  a1[9] = v75;
  a1[10] = v69;
  a1[11] = v76;
  if (v68)
    operator delete(v68);
LABEL_167:
  a1[10] = v69;
  if (!v99)
  {
    __dst = 0uLL;
    v116 = 0;
    goto LABEL_178;
  }
  if (v36 >= 0x7FFFFFFFFFFFFFF8)
LABEL_197:
    abort();
  if (v36 >= 0x17)
  {
    v80 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v80 = v36 | 7;
    v81 = v80 + 1;
    p_dst = (__int128 *)operator new(v80 + 1);
    *((_QWORD *)&__dst + 1) = v36;
    v116 = v81 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_176;
  }
  HIBYTE(v116) = v36;
  p_dst = &__dst;
  if (v36)
LABEL_176:
    memmove(p_dst, v99, v36);
  *((_BYTE *)p_dst + v36) = 0;
LABEL_178:
  v82 = a1[7];
  v83 = a1[6];
  if (v83 < v82)
  {
    *(_OWORD *)v83 = __dst;
    *(_QWORD *)(v83 + 16) = v116;
    a1[6] = v83 + 24;
    return;
  }
  v84 = a1[5];
  v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v84) >> 3);
  v86 = v85 + 1;
  if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_197;
  if (0x5555555555555556 * ((uint64_t)(v82 - v84) >> 3) > v86)
    v86 = 0x5555555555555556 * ((uint64_t)(v82 - v84) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v84) >> 3) >= 0x555555555555555)
    v87 = 0xAAAAAAAAAAAAAAALL;
  else
    v87 = v86;
  v128 = (char *)(a1 + 7);
  if (v87)
  {
    if (v87 <= 0xAAAAAAAAAAAAAAALL)
    {
      v88 = (char *)operator new(24 * v87);
      goto LABEL_190;
    }
LABEL_198:
    sub_1C4764EE4();
  }
  v88 = 0;
LABEL_190:
  v89 = &v88[8 * ((uint64_t)(v83 - v84) >> 3)];
  *(_OWORD *)v89 = __dst;
  *((_QWORD *)v89 + 2) = v116;
  v116 = 0;
  __dst = 0uLL;
  if (v83 == v84)
  {
    v93 = 0;
    v92 = vdupq_n_s64(v83);
    v90 = &v88[24 * v85];
  }
  else
  {
    v90 = &v88[8 * ((uint64_t)(v83 - v84) >> 3)];
    do
    {
      v91 = *(_OWORD *)(v83 - 24);
      *((_QWORD *)v90 - 1) = *(_QWORD *)(v83 - 8);
      *(_OWORD *)(v90 - 24) = v91;
      v90 -= 24;
      *(_QWORD *)(v83 - 16) = 0;
      *(_QWORD *)(v83 - 8) = 0;
      *(_QWORD *)(v83 - 24) = 0;
      v83 -= 24;
    }
    while (v83 != v84);
    v92 = *(int64x2_t *)(a1 + 5);
    v82 = a1[7];
    v93 = v116 < 0;
  }
  v94 = v89 + 24;
  a1[5] = v90;
  a1[6] = v89 + 24;
  *(int64x2_t *)&v126[8] = v92;
  a1[7] = &v88[24 * v87];
  v127 = v82;
  *(_QWORD *)v126 = v92.i64[0];
  sub_1C4D868F0((uint64_t)v126);
  a1[6] = v94;
  if (v93)
    operator delete((void *)__dst);
}

void sub_1C5A8F184(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const char *v9;
  __int16 v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 80) || (v4 = *(_QWORD *)(a1 + 40), v5 = *(_QWORD *)(a1 + 48), v4 == v5))
  {
    v8 = operator new();
    v9 = "could not find any profile metadata in debug info";
    v10 = 259;
    *(_QWORD *)v8 = off_1E8192D50;
    *(_DWORD *)(v8 + 8) = 12;
    llvm::Twine::str((llvm::Twine *)&v9, (_QWORD *)(v8 + 16));
    *a2 = v8;
  }
  else
  {
    llvm::collectPGOFuncNameStrings((std::string *)(a1 + 16), v4, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3), a2);
    sub_1C4A0CC74((_QWORD *)(a1 + 96));
    v6 = *(_QWORD *)(a1 + 40);
    for (i = *(_QWORD *)(a1 + 48); i != v6; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    *(_QWORD *)(a1 + 48) = v6;
  }
}

uint64_t sub_1C5A8F288(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E8192E28;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E8192E58;
  MEMORY[0x1CAA32FB4](a1[12], 4);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return sub_1C5A8E6EC((uint64_t)a1);
}

void sub_1C5A8F2F4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E8192E28;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E8192E58;
  MEMORY[0x1CAA32FB4](a1[12], 4);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  sub_1C5A8E6EC((uint64_t)a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A8F374(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::DWARFUnit **v4;
  llvm::DWARFUnit **v5;
  llvm::DWARFUnit *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::DWARFUnit **v12;
  llvm::DWARFUnit **v13;
  llvm::DWARFUnit *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 120);
  llvm::DWARFContext::parseNormalUnits(v2);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3)
  {
    v4 = *(llvm::DWARFUnit ***)(v2 + 16);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v4, 0);
      v7 = *((_QWORD *)v6 + 36);
      v8 = *((_QWORD *)v6 + 37);
      if (v7 != v8)
      {
        v9 = v7;
        do
        {
          sub_1C5A8F47C(a1, *v4, v7);
          v9 += 24;
          v7 += 24;
        }
        while (v9 != v8);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v10 = *(_QWORD *)(a1 + 120);
  llvm::DWARFContext::parseDWOUnits(v10, 0);
  v11 = *(unsigned int *)(v10 + 248);
  if ((_DWORD)v11)
  {
    v12 = *(llvm::DWARFUnit ***)(v10 + 240);
    v13 = &v12[v11];
    do
    {
      v14 = *v12;
      llvm::DWARFUnit::extractDIEsIfNeeded(*v12, 0);
      v15 = *((_QWORD *)v14 + 36);
      v16 = *((_QWORD *)v14 + 37);
      if (v15 != v16)
      {
        v17 = v15;
        do
        {
          sub_1C5A8F47C(a1, *v12, v15);
          v17 += 24;
          v15 += 24;
        }
        while (v17 != v16);
      }
      ++v12;
    }
    while (v12 != v13);
  }
}

void sub_1C5A8F47C(uint64_t a1, llvm::DWARFUnit *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *ShortName;
  char *v9;
  llvm::DWARFUnit *v10;
  llvm::DWARFUnit *v11;
  llvm::DWARFUnit *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  llvm::DWARFUnit *v18;
  llvm::DWARFUnit *v19;
  uint64_t v20;
  unsigned int v21;
  llvm::DWARFUnit *v22;
  uint64_t LastChild;
  uint64_t v24;
  llvm::DWARFUnit *FirstChild;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  llvm::DWARFUnit *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  _DWORD *v62;
  _DWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  char *v74;
  char *v75;
  _BYTE *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  llvm::DWARFUnit *v81;
  unsigned int v82;
  unint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 *p_dst;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  int64x2_t v101;
  _BOOL4 v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  llvm::DWARFUnit *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t AsUnsignedConstant;
  unint64_t v112;
  char v113;
  int v114;
  char v115;
  unsigned int v116;
  char *__s;
  unsigned __int8 v118;
  size_t v119;
  llvm::DWARFUnit *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  char v125;
  __int128 __dst;
  int64_t v127;
  char v128;
  __int128 v129;
  char v130;
  char v131;
  char v132;
  __int16 v133;
  llvm::DWARFUnit *v134;
  llvm::DWARFUnit *v135;
  char v136;
  _BYTE v137[24];
  unint64_t v138;
  char *v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v120 = a2;
  v121 = a3;
  if (!a2)
    return;
  if (!a3)
    return;
  v3 = *(_DWORD *)(a3 + 8);
  if (v3 == -1)
    return;
  v4 = *((_QWORD *)a2 + 36);
  if (!v4)
    return;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return;
  if (*(_WORD *)(v5 + 4) != 52)
    return;
  v6 = *(_QWORD *)(v4 + 24 * v3 + 16);
  if (!v6)
    return;
  if (*(_WORD *)(v6 + 4) != 46)
    return;
  if (!*(_BYTE *)(v5 + 7))
    return;
  ShortName = llvm::DWARFDie::getShortName((llvm::DWARFDie *)&v120);
  if (!ShortName)
    return;
  v9 = ShortName;
  if (strlen(ShortName) < 8 || *(_QWORD *)v9 != 0x5F63666F72705F5FLL)
    return;
  llvm::DWARFDie::getLocations(&v120, (llvm::dwarf *)2, (uint64_t)&v134);
  if ((v136 & 1) != 0)
  {
    v81 = v134;
    v134 = 0;
    *(_QWORD *)&__dst = v81;
    sub_1C4D62BD4((char **)&__dst, (char **)v137);
    if ((_QWORD)__dst)
      (*(void (**)(_QWORD))(*(_QWORD *)__dst + 8))(__dst);
    goto LABEL_171;
  }
  v10 = v134;
  v11 = v135;
  if (v134 == v135)
  {
LABEL_171:
    v114 = 0;
    v112 = 0;
    v118 = 0;
    goto LABEL_32;
  }
  v12 = v120;
  v13 = *((_BYTE *)v120 + 34);
  while (1)
  {
    v14 = *((_QWORD *)v10 + 4);
    v15 = *((_QWORD *)v10 + 5);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 520) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 520));
    *(_QWORD *)&v129 = v14;
    *((_QWORD *)&v129 + 1) = v15;
    v130 = v16;
    v131 = v13;
    v132 = v13;
    v133 = 0;
    sub_1C54ADD60((uint64_t)v137, &v129, 0);
    sub_1C54ADD60((uint64_t)&__dst, &v129, *((unint64_t *)&v129 + 1));
    if (*(_OWORD *)v137 != __dst)
      break;
LABEL_28:
    v10 = (llvm::DWARFUnit *)((char *)v10 + 64);
    if (v10 == v11)
      goto LABEL_171;
  }
  while (v137[16] == 161)
  {
    llvm::DWARFUnit::getAddrOffsetSectionItem((uint64_t)v12, (int)v139, (uint64_t)&v123);
    if (v125)
    {
      v83 = (unint64_t)v123;
      goto LABEL_31;
    }
LABEL_23:
    sub_1C54AD0C8((unint64_t *)v137);
    if (*(_QWORD *)v137 == (_QWORD)__dst && *(_QWORD *)&v137[8] == *((_QWORD *)&__dst + 1))
      goto LABEL_28;
  }
  if (v137[16] != 3)
    goto LABEL_23;
  v83 = (unint64_t)v139;
LABEL_31:
  v118 = v83;
  v112 = v83 & 0xFFFFFFFFFFFFFF00;
  v114 = 1;
LABEL_32:
  if ((v136 & 1) != 0)
  {
    v18 = v134;
    v134 = 0;
    if (v18)
      (*(void (**)(llvm::DWARFUnit *))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    *(_QWORD *)v137 = &v134;
    sub_1C548DA28((void ***)v137);
  }
  v19 = v120;
  if (v120)
  {
    v20 = v121;
    if (!v121)
    {
      v19 = 0;
      goto LABEL_42;
    }
    v21 = *(_DWORD *)(v121 + 8);
    if (v21 == -1)
    {
      v19 = 0;
      goto LABEL_41;
    }
    v20 = *((_QWORD *)v120 + 36) + 24 * v21;
  }
  else
  {
LABEL_41:
    v20 = 0;
  }
LABEL_42:
  v134 = v19;
  v135 = (llvm::DWARFUnit *)v20;
  llvm::DWARFDie::find(&v134, 17, v137);
  if (v140)
  {
    llvm::DWARFFormValue::getAsSectionedAddress(v137, (uint64_t)&__dst);
    v82 = __dst;
    v109 = v127;
    if (!(_BYTE)v127)
      v82 = 0;
    v108 = v82;
  }
  else
  {
    v108 = 0;
    v109 = 0;
  }
  v22 = v120;
  if (v120)
  {
    LastChild = v121;
    if (!v121)
    {
      v24 = 0;
      FirstChild = 0;
      goto LABEL_48;
    }
    FirstChild = (llvm::DWARFUnit *)llvm::DWARFUnit::getFirstChild((uint64_t)v120, v121);
    v24 = v104;
    LastChild = llvm::DWARFUnit::getLastChild((uint64_t)v22, LastChild);
    v26 = v105;
  }
  else
  {
    v24 = 0;
    FirstChild = 0;
    LastChild = 0;
LABEL_48:
    v26 = 0;
  }
  v134 = FirstChild;
  v135 = (llvm::DWARFUnit *)v24;
  if (v24 != v26 || FirstChild != (llvm::DWARFUnit *)LastChild)
  {
    v27 = 0;
    v115 = 0;
    __s = 0;
    v110 = 0;
    AsUnsignedConstant = 0;
    v113 = 0;
    v35 = (llvm::DWARFUnit *)LastChild;
    v36 = v26;
    while (1)
    {
      v37 = *(_QWORD *)(v24 + 16);
      if (!v37 || *(_WORD *)(v37 + 4) != 24576)
      {
        if (!FirstChild)
          goto LABEL_72;
        goto LABEL_69;
      }
      v106 = FirstChild;
      v107 = v24;
      llvm::DWARFDie::find(&v134, 3, v137);
      llvm::DWARFDie::find(&v134, 28, &__dst);
      if (v140)
      {
        if (v128)
          break;
      }
LABEL_121:
      FirstChild = v106;
      v24 = v107;
      v35 = (llvm::DWARFUnit *)LastChild;
      v36 = v26;
      if (!v106)
        goto LABEL_72;
LABEL_69:
      v38 = *(_DWORD *)(v24 + 12);
      if (v38)
      {
        v24 = *((_QWORD *)FirstChild + 36) + 24 * v38;
        goto LABEL_73;
      }
      FirstChild = 0;
LABEL_72:
      v24 = 0;
LABEL_73:
      v134 = FirstChild;
      v135 = (llvm::DWARFUnit *)v24;
      if (v24 == v36 && FirstChild == v35)
        goto LABEL_52;
    }
    llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)v137, (uint64_t)&v129);
    v39 = (char *)v129;
    if ((BYTE8(v129) & 1) != 0)
    {
      *(_QWORD *)&v129 = 0;
      if (v39)
      {
        v122 = v39;
        goto LABEL_99;
      }
    }
    else if ((_QWORD)v129)
    {
      v40 = strlen((const char *)v129);
LABEL_84:
      if (llvm::InstrProfCorrelator::FunctionNameAttributeName[0])
        v41 = strlen(llvm::InstrProfCorrelator::FunctionNameAttributeName[0]);
      else
        v41 = 0;
      if (v41 >= v40)
        v42 = v40;
      else
        v42 = v41;
      if (v42 && memcmp(v39, llvm::InstrProfCorrelator::FunctionNameAttributeName[0], v42) || v40 != v41)
      {
        if (llvm::InstrProfCorrelator::CFGHashAttributeName[0])
          v43 = strlen(llvm::InstrProfCorrelator::CFGHashAttributeName[0]);
        else
          v43 = 0;
        if (v43 >= v40)
          v44 = v40;
        else
          v44 = v43;
        if ((!v44 || !memcmp(v39, llvm::InstrProfCorrelator::CFGHashAttributeName[0], v44)) && v40 == v43)
        {
          AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&__dst);
          v115 = v48;
        }
        else
        {
          if (llvm::InstrProfCorrelator::NumCountersAttributeName)
            v45 = strlen(llvm::InstrProfCorrelator::NumCountersAttributeName);
          else
            v45 = 0;
          if (v45 >= v40)
            v46 = v40;
          else
            v46 = v45;
          if ((!v46 || !memcmp(v39, llvm::InstrProfCorrelator::NumCountersAttributeName, v46)) && v40 == v45)
          {
            v110 = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)&__dst);
            v113 = v49;
          }
        }
        goto LABEL_118;
      }
      llvm::DWARFFormValue::getAsCString((llvm::DWARFFormValue *)&__dst, (uint64_t)&v123);
      if ((v124 & 1) == 0)
      {
        v27 = 1;
        __s = v123;
LABEL_118:
        if ((BYTE8(v129) & 1) != 0)
        {
          v47 = v129;
          *(_QWORD *)&v129 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
        goto LABEL_121;
      }
      if (!v123)
        goto LABEL_118;
      v122 = v123;
LABEL_99:
      sub_1C4D62BD4(&v122, &v123);
      if (v122)
        (*(void (**)(char *))(*(_QWORD *)v122 + 8))(v122);
      goto LABEL_118;
    }
    v40 = 0;
    goto LABEL_84;
  }
  v110 = 0;
  AsUnsignedConstant = 0;
  v113 = 0;
  v115 = 0;
  __s = 0;
  v27 = 0;
LABEL_52:
  if (v115)
    v28 = v27 == 0;
  else
    v28 = 1;
  v29 = v114;
  if (v28)
    v29 = 0;
  if (v29 != 1 || !v113)
    return;
  v30 = v118 | v112;
  v31 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(v31 + 8);
  v32 = *(_QWORD *)(v31 + 16);
  if (v30 < v33 || v30 >= v32)
    return;
  if (__s)
    v119 = strlen(__s);
  else
    v119 = 0;
  v50 = v30 - v33;
  if (v109)
    v51 = v108;
  else
    v51 = 0;
  LODWORD(v134) = v50;
  v52 = *(_QWORD *)(a1 + 96);
  v53 = *(_DWORD *)(a1 + 112);
  if (!v53)
  {
    v62 = 0;
    goto LABEL_144;
  }
  v54 = v53 - 1;
  v55 = v54 & (37 * v50);
  v56 = (_DWORD *)(v52 + 4 * v55);
  v57 = *v56;
  if (*v56 == v50)
    return;
  v58 = 0;
  v59 = 1;
  while (v57 != -1)
  {
    if (v58)
      v60 = 0;
    else
      v60 = v57 == -2;
    if (v60)
      v58 = v56;
    v61 = v55 + v59++;
    v55 = v61 & v54;
    v56 = (_DWORD *)(v52 + 4 * v55);
    v57 = *v56;
    if (*v56 == v50)
      return;
  }
  if (v58)
    v62 = v58;
  else
    v62 = v56;
LABEL_144:
  v63 = sub_1C4A0C948(a1 + 96, (uint64_t)&v134, &v134, v62);
  *v63 = (_DWORD)v134;
  *(_OWORD *)v137 = xmmword_1C85F4BB0;
  *(_QWORD *)&v137[16] = 0;
  llvm::MD5::update((int *)v137, (int *)__s, v119);
  llvm::MD5::final((int *)v137, (int *)&__dst);
  v64 = bswap64(__dst);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24))
    v65 = v64;
  else
    v65 = __dst;
  v66 = bswap64(AsUnsignedConstant);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24))
    v67 = v66;
  else
    v67 = AsUnsignedConstant;
  v68 = bswap32(v134);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24))
    v69 = v68;
  else
    v69 = v134;
  v70 = bswap32(v51);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24))
    v71 = v70;
  else
    v71 = v51;
  v72 = bswap32(v110);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24))
    v72 = v110;
  v116 = v72;
  v74 = *(char **)(a1 + 80);
  v73 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v74 < v73)
  {
    *(_QWORD *)v74 = v65;
    *((_QWORD *)v74 + 1) = v67;
    *((_DWORD *)v74 + 4) = v69;
    *((_DWORD *)v74 + 5) = v71;
    *((_DWORD *)v74 + 6) = 0;
    *((_DWORD *)v74 + 7) = v72;
    v75 = v74 + 40;
    *((_DWORD *)v74 + 8) = 0;
    goto LABEL_181;
  }
  v76 = *(_BYTE **)(a1 + 72);
  v77 = 0xCCCCCCCCCCCCCCCDLL * ((v74 - v76) >> 3) + 1;
  if (v77 > 0x666666666666666)
    goto LABEL_212;
  v78 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - (_QWORD)v76) >> 3);
  if (2 * v78 > v77)
    v77 = 2 * v78;
  if (v78 >= 0x333333333333333)
    v79 = 0x666666666666666;
  else
    v79 = v77;
  if (!v79)
  {
    v80 = 0;
    goto LABEL_176;
  }
  if (v79 > 0x666666666666666)
    goto LABEL_213;
  v80 = (char *)operator new(40 * v79);
LABEL_176:
  v84 = &v80[8 * ((v74 - v76) >> 3)];
  *(_QWORD *)v84 = v65;
  *((_QWORD *)v84 + 1) = v67;
  *((_DWORD *)v84 + 4) = v69;
  *((_DWORD *)v84 + 5) = v71;
  v85 = &v80[40 * v79];
  *((_DWORD *)v84 + 6) = 0;
  *(_QWORD *)(v84 + 28) = v116;
  v75 = v84 + 40;
  if (v74 != v76)
  {
    do
    {
      v86 = *(_OWORD *)(v74 - 40);
      v87 = *(_OWORD *)(v74 - 24);
      *((_QWORD *)v84 - 1) = *((_QWORD *)v74 - 1);
      *(_OWORD *)(v84 - 24) = v87;
      *(_OWORD *)(v84 - 40) = v86;
      v84 -= 40;
      v74 -= 40;
    }
    while (v74 != v76);
    v74 = *(char **)(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = v84;
  *(_QWORD *)(a1 + 80) = v75;
  *(_QWORD *)(a1 + 88) = v85;
  if (v74)
    operator delete(v74);
LABEL_181:
  *(_QWORD *)(a1 + 80) = v75;
  if (!__s)
  {
    __dst = 0uLL;
    v127 = 0;
    goto LABEL_192;
  }
  if (v119 >= 0x7FFFFFFFFFFFFFF8)
LABEL_212:
    abort();
  if (v119 >= 0x17)
  {
    v89 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17)
      v89 = v119 | 7;
    v90 = v89 + 1;
    p_dst = (__int128 *)operator new(v89 + 1);
    *((_QWORD *)&__dst + 1) = v119;
    v127 = v90 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_190;
  }
  HIBYTE(v127) = v119;
  p_dst = &__dst;
  if (v119)
LABEL_190:
    memmove(p_dst, __s, v119);
  *((_BYTE *)p_dst + v119) = 0;
LABEL_192:
  v91 = *(_QWORD *)(a1 + 56);
  v92 = *(_QWORD *)(a1 + 48);
  if (v92 < v91)
  {
    *(_OWORD *)v92 = __dst;
    *(_QWORD *)(v92 + 16) = v127;
    *(_QWORD *)(a1 + 48) = v92 + 24;
    return;
  }
  v93 = *(_QWORD *)(a1 + 40);
  v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - v93) >> 3);
  v95 = v94 + 1;
  if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_212;
  if (0x5555555555555556 * ((uint64_t)(v91 - v93) >> 3) > v95)
    v95 = 0x5555555555555556 * ((uint64_t)(v91 - v93) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - v93) >> 3) >= 0x555555555555555)
    v96 = 0xAAAAAAAAAAAAAAALL;
  else
    v96 = v95;
  v139 = (char *)(a1 + 56);
  if (!v96)
  {
    v97 = 0;
    goto LABEL_204;
  }
  if (v96 > 0xAAAAAAAAAAAAAAALL)
LABEL_213:
    sub_1C4764EE4();
  v97 = (char *)operator new(24 * v96);
LABEL_204:
  v98 = &v97[8 * ((uint64_t)(v92 - v93) >> 3)];
  *(_OWORD *)v98 = __dst;
  *((_QWORD *)v98 + 2) = v127;
  v127 = 0;
  __dst = 0uLL;
  if (v92 == v93)
  {
    v102 = 0;
    v101 = vdupq_n_s64(v92);
    v99 = &v97[24 * v94];
  }
  else
  {
    v99 = &v97[8 * ((uint64_t)(v92 - v93) >> 3)];
    do
    {
      v100 = *(_OWORD *)(v92 - 24);
      *((_QWORD *)v99 - 1) = *(_QWORD *)(v92 - 8);
      *(_OWORD *)(v99 - 24) = v100;
      v99 -= 24;
      *(_QWORD *)(v92 - 16) = 0;
      *(_QWORD *)(v92 - 8) = 0;
      *(_QWORD *)(v92 - 24) = 0;
      v92 -= 24;
    }
    while (v92 != v93);
    v101 = *(int64x2_t *)(a1 + 40);
    v91 = *(_QWORD *)(a1 + 56);
    v102 = v127 < 0;
  }
  v103 = v98 + 24;
  *(_QWORD *)(a1 + 40) = v99;
  *(_QWORD *)(a1 + 48) = v98 + 24;
  *(int64x2_t *)&v137[8] = v101;
  *(_QWORD *)(a1 + 56) = &v97[24 * v96];
  v138 = v91;
  *(_QWORD *)v137 = v101.i64[0];
  sub_1C4D868F0((uint64_t)v137);
  *(_QWORD *)(a1 + 48) = v103;
  if (v102)
    operator delete((void *)__dst);
}

void llvm::InstrProfReader::create(llvm::Twine *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const llvm::MemoryBuffer *v6;
  const llvm::MemoryBuffer *v7;
  const llvm::MemoryBuffer *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sub_1C5A8FFC0(a1, a2, (uint64_t)&v8);
  v6 = v8;
  if ((v9 & 1) != 0 && v8)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v6;
  }
  else
  {
    v7 = v8;
    llvm::InstrProfReader::create(&v7, a3, a4);
    if (v7)
      (*(void (**)(void))(*(_QWORD *)v7 + 8))();
  }
}

void sub_1C5A8FFC0(llvm::Twine *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const void *p_p;
  int v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(a1, &__p);
  if ((v17 & 0x80u) == 0)
    v6 = v17 & 0x7F;
  else
    v6 = v16;
  if (v6 == 1
    && ((v17 & 0x80u) == 0 ? (v7 = v17) : (v7 = v16),
        (v17 & 0x80u) == 0 ? (p_p = &__p) : (p_p = __p),
        (v9 = memcmp(p_p, "-", v7 != 0), v7 == 1) ? (v10 = v9 == 0) : (v10 = 0),
        v10))
  {
    llvm::MemoryBuffer::getSTDIN((uint64_t)v18);
  }
  else
  {
    llvm::vfs::FileSystem::getBufferForFile(a2, (uint64_t)a1, -1, 1, 0, 0, (uint64_t)v18);
  }
  if ((char)v17 < 0)
    operator delete(__p);
  if ((v19 & 1) != 0)
  {
    v11 = (_QWORD *)v18[0];
    if (LODWORD(v18[0]))
    {
      v12 = v18[1];
      v13 = (_QWORD *)operator new();
      *v13 = &off_1E81A0D28;
      v13[1] = v11;
      v13[2] = v12;
      *(_BYTE *)(a3 + 8) |= 1u;
      v11 = v13;
      goto LABEL_23;
    }
  }
  else
  {
    std::system_category();
    v11 = (_QWORD *)v18[0];
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  v18[0] = 0;
LABEL_23:
  *(_QWORD *)a3 = v11;
  if ((v19 & 1) == 0)
  {
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void llvm::InstrProfReader::create(const llvm::MemoryBuffer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  const llvm::MemoryBuffer *v12;
  uint64_t (**v13)();
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v18;
  const llvm::MemoryBuffer *v19;
  BOOL v20;
  const llvm::MemoryBuffer *v21;
  const llvm::MemoryBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  v4 = (unsigned __int8 *)*((_QWORD *)*a1 + 1);
  v5 = *((_QWORD *)*a1 + 2) - (_QWORD)v4;
  if (!v5)
  {
    v14 = operator new();
    v11 = v14;
    v26 = 257;
    *(_QWORD *)v14 = off_1E8192D50;
    v15 = 21;
LABEL_13:
    *(_DWORD *)(v14 + 8) = v15;
    llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v14 + 16));
    v16 = *(_BYTE *)(a3 + 8) | 1;
LABEL_14:
    *(_BYTE *)(a3 + 8) = v16;
    *(_QWORD *)a3 = v11;
    return;
  }
  if (v5 < 8)
  {
LABEL_3:
    if (v5 >= 8)
      v5 = 8;
    while (1)
    {
      v7 = *v4;
      v8 = v7 - 32;
      v9 = v7 - 9;
      if (v8 >= 0x5F && v9 >= 5)
        break;
      ++v4;
      if (!--v5)
      {
        v11 = operator new();
        v12 = *a1;
        *a1 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_QWORD *)v11 = &off_1E8192F78;
        *(_QWORD *)(v11 + 48) = v12;
        llvm::line_iterator::line_iterator((llvm::line_iterator *)(v11 + 56), v12, 1, 35);
        *(_DWORD *)(v11 + 120) = 0;
        v13 = *(uint64_t (***)())v11;
        goto LABEL_31;
      }
    }
    v14 = operator new();
    v11 = v14;
    v26 = 257;
    *(_QWORD *)v14 = off_1E8192D50;
    v15 = 2;
    goto LABEL_13;
  }
  v18 = *(_QWORD *)v4;
  if (*(_QWORD *)v4 > (int64_t)0x8172666F72706CFELL)
  {
    if (v18 == 0x8172666F72706CFFLL)
      goto LABEL_19;
    if (v18 != 0xFF6C70726F665281)
    {
      if (v18 != 0xFF6C70726F667281)
        goto LABEL_3;
LABEL_19:
      v11 = operator new();
      v19 = *a1;
      *a1 = 0;
      *(_DWORD *)(v11 + 8) = 0;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      v13 = (uint64_t (**)())&unk_1E8192F00;
      *(_QWORD *)v11 = &unk_1E8192F00;
      *(_QWORD *)(v11 + 48) = v19;
      if (a2)
      {
        v20 = *(_DWORD *)(a2 + 64) == 1;
        goto LABEL_26;
      }
      goto LABEL_29;
    }
LABEL_24:
    v11 = operator new();
    v22 = *a1;
    *a1 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    v13 = (uint64_t (**)())&unk_1E8192E88;
    *(_QWORD *)v11 = &unk_1E8192E88;
    *(_QWORD *)(v11 + 48) = v22;
    if (a2)
    {
      v20 = *(_DWORD *)(a2 + 64) == 0;
LABEL_26:
      if (v20)
        v23 = a2;
      else
        v23 = 0;
      goto LABEL_30;
    }
LABEL_29:
    v23 = 0;
LABEL_30:
    *(_QWORD *)(v11 + 56) = v23;
    goto LABEL_31;
  }
  if (v18 == 0x8152666F72706CFFLL)
    goto LABEL_24;
  if (v18 != 0x8169666F72706CFFLL)
    goto LABEL_3;
  v11 = operator new();
  v21 = *a1;
  *a1 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  v13 = &off_1E8192FF0;
  *(_QWORD *)v11 = &off_1E8192FF0;
  *(_QWORD *)(v11 + 48) = v21;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = v11 + 112;
  *(_QWORD *)(v11 + 104) = 0x1400000000;
  *(_QWORD *)(v11 + 272) = 0;
  *(_QWORD *)(v11 + 280) = 0;
  *(_DWORD *)(v11 + 288) = 0;
LABEL_31:
  ((void (*)(_QWORD *__return_ptr, uint64_t))v13[2])(v25, v11);
  v24 = v25[0];
  if (!v25[0])
  {
    v16 = *(_BYTE *)(a3 + 8) & 0xFE;
    goto LABEL_14;
  }
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v24;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

BOOL llvm::IndexedInstrProfReader::hasFormat(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(a1 + 16) - (_QWORD)v1 >= 8uLL && *v1 == 0x8169666F72706CFFLL;
}

BOOL llvm::RawInstrProfReader<unsigned long long>::hasFormat(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) - (_QWORD)v1 < 8uLL)
    return 0;
  v3 = *v1;
  return v3 == 0xFF6C70726F667281 || v3 == 0x8172666F72706CFFLL;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::RawInstrProfReader(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)result = &unk_1E8192F00;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 48) = v3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 64) == 1)
      v4 = a3;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(result + 56) = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)result = &unk_1E8192F00;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 48) = v3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 64) == 1)
      v4 = a3;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(result + 56) = v4;
  return result;
}

BOOL llvm::RawInstrProfReader<unsigned int>::hasFormat(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) - (_QWORD)v1 < 8uLL)
    return 0;
  v3 = *v1;
  return v3 == 0xFF6C70726F665281 || v3 == 0x8152666F72706CFFLL;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::RawInstrProfReader(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)result = &unk_1E8192E88;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 48) = v3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 64))
      v4 = 0;
    else
      v4 = a3;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(result + 56) = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)result = &unk_1E8192E88;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 48) = v3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 64))
      v4 = 0;
    else
      v4 = a3;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(result + 56) = v4;
  return result;
}

BOOL llvm::TextInstrProfReader::hasFormat(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  _BOOL8 result;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16) - (_QWORD)v1;
  if (v2 >= 8)
    v2 = 8;
  if (!v2)
    return 1;
  v3 = v2 - 1;
  do
  {
    v4 = *v1++;
    v5 = v4 - 9;
    result = (v4 - 32) < 0x5F || v5 < 5;
  }
  while (result && v3-- != 0);
  return result;
}

void llvm::IndexedInstrProfReader::create(llvm::Twine *a1@<X0>, uint64_t a2@<X1>, llvm::Twine *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int16 v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C5A8FFC0(a1, a2, (uint64_t)&v18);
  if ((v19 & 1) != 0 && (v7 = v18, v18 = 0, v7))
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::Twine::str(a3, __p);
    v8 = v15 & 0x7F;
    if (v15 < 0)
      v8 = (uint64_t)__p[1];
    if (v8
      && (v13 = 260, v12 = __p, sub_1C5A8FFC0((llvm::Twine *)&v12, a2, (uint64_t)&v16), v8 = v16, (v17 & 1) != 0)
      && v16)
    {
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v8;
    }
    else
    {
      v9 = v18;
      v18 = 0;
      v10 = v8;
      v11 = v9;
      llvm::IndexedInstrProfReader::create(&v11, &v10, a4);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    if (v15 < 0)
      operator delete(__p[0]);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void llvm::IndexedInstrProfReader::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12[4];
  __int16 v13;

  v4 = *(_QWORD **)(*a1 + 8);
  if (*(_QWORD *)(*a1 + 16) - (_QWORD)v4 >= 8uLL && *v4 == 0x8169666F72706CFFLL)
  {
    v7 = operator new();
    v8 = *a1;
    *a1 = 0;
    v9 = *a2;
    *a2 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_QWORD *)v7 = &off_1E8192FF0;
    *(_QWORD *)(v7 + 48) = v8;
    *(_QWORD *)(v7 + 56) = v9;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_QWORD *)(v7 + 96) = v7 + 112;
    *(_QWORD *)(v7 + 104) = 0x1400000000;
    *(_QWORD *)(v7 + 272) = 0;
    *(_QWORD *)(v7 + 280) = 0;
    *(_DWORD *)(v7 + 288) = 0;
    llvm::IndexedInstrProfReader::readHeader((llvm::IndexedInstrProfReader *)v7, v12);
    v10 = v12[0];
    if (v12[0])
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v10;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      return;
    }
    v11 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  else
  {
    v7 = operator new();
    v13 = 257;
    *(_QWORD *)v7 = off_1E8192D50;
    *(_DWORD *)(v7 + 8) = 3;
    llvm::Twine::str((llvm::Twine *)v12, (_QWORD *)(v7 + 16));
    v11 = *(_BYTE *)(a3 + 8) | 1;
  }
  *(_BYTE *)(a3 + 8) = v11;
  *(_QWORD *)a3 = v7;
}

void llvm::TextInstrProfReader::readHeader(llvm::TextInstrProfReader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  std::string __p;
  unsigned __int8 *v12[2];
  std::string *p_p;
  __int16 v14;

  v4 = operator new();
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 44) = 8;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 113) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v4;
  if (v5)
  {
    v10 = sub_1C624BA64(v5);
    MEMORY[0x1CAA32FC0](v10, 0x10F0C40767211C4);
  }
  for (i = *((_QWORD *)this + 14); i; i = *((_QWORD *)this + 14))
  {
    v7 = (_BYTE *)*((_QWORD *)this + 13);
    if (*v7 != 58)
      break;
    v12[0] = v7 + 1;
    v12[1] = (unsigned __int8 *)(i - 1);
    if (i > 11)
    {
      if (i == 12)
      {
        if (llvm::StringRef::compare_insensitive(v12, "entry_first", 0xBuLL))
          goto LABEL_22;
        v8 = *((_DWORD *)this + 30) | 4;
      }
      else
      {
        if (i != 16 || llvm::StringRef::compare_insensitive(v12, "not_entry_first", 0xFuLL))
        {
LABEL_22:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((_DWORD *)this + 2) = 4;
          std::string::operator=((std::string *)((char *)this + 16), &__p);
          v9 = operator new();
          v14 = 260;
          p_p = &__p;
          *(_QWORD *)v9 = off_1E8192D50;
          *(_DWORD *)(v9 + 8) = 4;
          llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v9 + 16));
          *a2 = v9;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
        v8 = *((_DWORD *)this + 30) & 0x7B;
      }
    }
    else if (i == 3)
    {
      if (llvm::StringRef::compare_insensitive(v12, "ir", 2uLL))
      {
        if (llvm::StringRef::compare_insensitive(v12, "fe", 2uLL))
          goto LABEL_22;
        v8 = *((_DWORD *)this + 30) | 1;
      }
      else
      {
        v8 = *((_DWORD *)this + 30) | 2;
      }
    }
    else
    {
      if (i != 5 || llvm::StringRef::compare_insensitive(v12, "csir", 4uLL))
        goto LABEL_22;
      v8 = *((_DWORD *)this + 30) | 0xA;
    }
    *((_DWORD *)this + 30) = v8;
    llvm::line_iterator::advance((uint64_t)this + 56);
  }
  sub_1C5A90BD4((uint64_t)this, a2);
}

void sub_1C5A90BD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string __str;

  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a1 + 8) = 0;
  std::string::operator=((std::string *)(a1 + 16), &__str);
  *a2 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::TextInstrProfReader::readValueProfileData(llvm::TextInstrProfReader *this@<X0>, llvm::InstrProfRecord *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  llvm::line_iterator *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  int v18;
  std::string *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  unint64_t *v47;
  unint64_t *v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  size_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::string *v82;
  llvm::InstrProfRecord *v83;
  uint64_t *v84;
  int v85;
  uint64_t *v86;
  llvm::line_iterator *v87;
  unsigned int v88;
  BOOL v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  std::string __str;
  __int128 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 88))
  {
    v5 = *((_QWORD *)this + 14);
    if (v5)
    {
      v7 = 0;
      v8 = (llvm::TextInstrProfReader *)((char *)this + 56);
      v9 = (uint64_t *)((char *)this + 104);
      v10 = (unsigned __int8 *)*((_QWORD *)this + 13);
      while (1)
      {
        v11 = *v10;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 97) >= 0x1A)
          {
            if ((v11 - 65) > 0x19)
              break;
            v12 = -55;
          }
          else
          {
            v12 = -87;
          }
        }
        else
        {
          v12 = -48;
        }
        v13 = v12 + v11;
        if (v13 > 9)
          break;
        v14 = 10 * v7 + v13;
        if (v7 > v14 / 0xA)
          break;
        ++v10;
        v7 = v14;
        if (!--v5)
        {
          if (v14 >= 0x100000000)
            v15 = 0x100000000;
          else
            v15 = v14;
          if (HIDWORD(v14))
            break;
          if ((v15 - 3) > 0xFFFFFFFD)
          {
            llvm::line_iterator::advance((uint64_t)this + 56);
            v18 = 0;
            v19 = (std::string *)((char *)this + 16);
            v20 = 0;
            while (1)
            {
              if (!*((_BYTE *)this + 88))
                goto LABEL_171;
              v21 = *((_QWORD *)this + 14);
              if (!v21)
                goto LABEL_165;
              v22 = 0;
              v23 = (unsigned __int8 *)*v9;
              do
              {
                v24 = *v23;
                if ((v24 - 48) >= 0xA)
                {
                  if ((v24 - 97) >= 0x1A)
                  {
                    v20 = 0;
                    if ((v24 - 65) > 0x19)
                      goto LABEL_165;
                    v25 = -55;
                  }
                  else
                  {
                    v25 = -87;
                    v20 = 0;
                  }
                }
                else
                {
                  v25 = -48;
                }
                v26 = v25 + v24;
                if (v26 > 9)
                  goto LABEL_165;
                v27 = 10 * v22 + v26;
                if (v22 > v27 / 0xA)
                  goto LABEL_165;
                ++v23;
                v22 = v27;
                --v21;
              }
              while (v21);
              v28 = v27 >= 0x100000000 ? 0 : v27;
              if (HIDWORD(v27))
                goto LABEL_165;
              v92 = v28;
              llvm::line_iterator::advance((uint64_t)v8);
              if (v92 >= 2)
              {
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = 21;
                strcpy((char *)&__str, "value kind is invalid");
LABEL_166:
                v16 = 9;
                goto LABEL_167;
              }
              if (!*((_BYTE *)this + 88))
                goto LABEL_171;
              v29 = *((_QWORD *)this + 14);
              if (!v29)
                goto LABEL_165;
              v30 = 0;
              v31 = (unsigned __int8 *)*v9;
              do
              {
                v32 = *v31;
                if ((v32 - 48) >= 0xA)
                {
                  if ((v32 - 97) >= 0x1A)
                  {
                    v20 = 0;
                    if ((v32 - 65) > 0x19)
                      goto LABEL_165;
                    v33 = -55;
                  }
                  else
                  {
                    v33 = -87;
                    v20 = 0;
                  }
                }
                else
                {
                  v33 = -48;
                }
                v34 = v33 + v32;
                if (v34 > 9)
                  goto LABEL_165;
                v35 = 10 * v30 + v34;
                if (v30 > v35 / 0xA)
                  goto LABEL_165;
                ++v31;
                v30 = v35;
                --v29;
              }
              while (v29);
              v36 = v35 >= 0x100000000 ? 0 : v35;
              if (HIDWORD(v35))
                goto LABEL_165;
              v91 = v36;
              llvm::line_iterator::advance((uint64_t)v8);
              if (v91)
                break;
LABEL_58:
              if (++v18 == (_DWORD)v15)
              {
                sub_1C5A90BD4((uint64_t)this, a3);
                return;
              }
            }
            v37 = (unint64_t *)sub_1C5A8A1DC((uint64_t)a2, v18);
            sub_1C6308254(v37, v91);
            v85 = 0;
            v83 = a2;
            v84 = a3;
            v86 = v9;
            v87 = v8;
            v81 = v15;
            v82 = v19;
            while (2)
            {
              if (*((_BYTE *)this + 88))
              {
                v38 = *((_QWORD *)this + 14);
                if (v38)
                {
                  v39 = 0;
                  v40 = (unsigned __int8 *)*v9;
                  do
                  {
                    v41 = *v40;
                    if ((v41 - 48) >= 0xA)
                    {
                      if ((v41 - 97) >= 0x1A)
                      {
                        v20 = 0;
                        if ((v41 - 65) > 0x19)
                          goto LABEL_165;
                        v42 = -55;
                      }
                      else
                      {
                        v42 = -87;
                        v20 = 0;
                      }
                    }
                    else
                    {
                      v42 = -48;
                    }
                    v43 = v42 + v41;
                    if (v43 > 9)
                      goto LABEL_165;
                    v44 = 10 * v39 + v43;
                    if (v39 > v44 / 0xA)
                      goto LABEL_165;
                    ++v40;
                    v39 = v44;
                    --v38;
                  }
                  while (v38);
                  if (v44 < 0x100000000)
                    v20 = v44;
                  if (HIDWORD(v44))
                    goto LABEL_165;
                  llvm::line_iterator::advance((uint64_t)v8);
                  v88 = v20;
                  if (v20)
                  {
                    v45 = 0;
                    v46 = 0;
                    v47 = 0;
                    v48 = 0;
                    v49 = 1;
LABEL_79:
                    v89 = v49;
                    if (!*((_BYTE *)this + 88))
                    {
                      v78 = v9;
                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
                      __str.__r_.__value_.__s.__data_[0] = 0;
                      *((_DWORD *)this + 2) = 8;
                      v19 = v82;
                      std::string::operator=(v82, &__str);
                      v79 = operator new();
                      v96 = 260;
                      *(_QWORD *)&v94 = &__str;
                      *(_QWORD *)v79 = off_1E8192D50;
                      *(_DWORD *)(v79 + 8) = 8;
                      llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v79 + 16));
                      a3 = v84;
                      *v84 = v79;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      a2 = v83;
                      v9 = v78;
                      goto LABEL_159;
                    }
                    v90 = (unint64_t)v46;
                    LOBYTE(v94) = 58;
                    v50 = llvm::StringRef::rfind(v9, &v94, 1uLL);
                    if (v50 == -1)
                    {
                      v56 = 0;
                      v55 = 0;
                      v52 = (unsigned __int8 *)*((_QWORD *)this + 13);
                      v53 = *((_QWORD *)this + 14);
                    }
                    else
                    {
                      v52 = (unsigned __int8 *)*((_QWORD *)this + 13);
                      v51 = *((_QWORD *)this + 14);
                      if (v51 >= v50)
                        v53 = v50;
                      else
                        v53 = *((_QWORD *)this + 14);
                      if (v51 >= v50 + 1)
                        v54 = v50 + 1;
                      else
                        v54 = *((_QWORD *)this + 14);
                      v55 = &v52[v54];
                      v56 = v51 - v54;
                    }
                    if (v92)
                    {
                      if (v53)
                      {
                        v57 = 0;
                        while (1)
                        {
                          v58 = *v52;
                          if ((v58 - 48) >= 0xA)
                          {
                            if ((v58 - 97) >= 0x1A)
                            {
                              if ((v58 - 65) > 0x19)
                                break;
                              v59 = -55;
                            }
                            else
                            {
                              v59 = -87;
                            }
                          }
                          else
                          {
                            v59 = -48;
                          }
                          v60 = v59 + v58;
                          if (v60 > 9)
                            break;
                          v61 = 10 * v57 + v60;
                          if (v57 > v61 / 0xA)
                            break;
                          ++v52;
                          v57 = 10 * v57 + v60;
                          if (!--v53)
                            goto LABEL_112;
                        }
                      }
                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
                      __str.__r_.__value_.__s.__data_[0] = 0;
                      *((_DWORD *)this + 2) = 9;
                      v19 = v82;
                      std::string::operator=(v82, &__str);
                      v77 = operator new();
                      v96 = 260;
                      *(_QWORD *)&v94 = &__str;
                      *(_QWORD *)v77 = off_1E8192D50;
                      *(_DWORD *)(v77 + 8) = 9;
                      llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v77 + 16));
                      a3 = v84;
                      *v84 = v77;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      a2 = v83;
                      v9 = v86;
                      v8 = v87;
                      goto LABEL_159;
                    }
                    if (v53 == 21)
                    {
                      v62 = *(_QWORD *)v52 == 0x7265747845202A2ALL && *((_QWORD *)v52 + 1) == 0x626D7953206C616ELL;
                      if (v62 && *(_QWORD *)(v52 + 13) == 0x2A2A206C6F626D79)
                      {
                        v61 = 0;
LABEL_112:
                        if (v56)
                          goto LABEL_113;
                        goto LABEL_147;
                      }
                    }
                    sub_1C6307600(*((_QWORD *)this + 5), v52, v53, v84);
                    if (!*v84)
                    {
                      v94 = xmmword_1C85F4BB0;
                      v95 = 0;
                      llvm::MD5::update((int *)&v94, (int *)v52, v53);
                      llvm::MD5::final((int *)&v94, (int *)&__str);
                      v61 = __str.__r_.__value_.__r.__words[0];
                      if (!v56)
                        goto LABEL_147;
LABEL_113:
                      v64 = 0;
                      while (1)
                      {
                        v65 = *v55;
                        if ((v65 - 48) >= 0xA)
                        {
                          if ((v65 - 97) >= 0x1A)
                          {
                            if ((v65 - 65) > 0x19)
                              break;
                            v66 = -55;
                          }
                          else
                          {
                            v66 = -87;
                          }
                        }
                        else
                        {
                          v66 = -48;
                        }
                        v67 = v66 + v65;
                        if (v67 > 9)
                          break;
                        v68 = 10 * v64 + v67;
                        if (v64 > v68 / 0xA)
                          break;
                        ++v55;
                        v64 = 10 * v64 + v67;
                        if (!--v56)
                        {
                          v46 = (char *)v90;
                          if ((unint64_t)v47 >= v90)
                          {
                            v70 = ((char *)v47 - (char *)v48) >> 4;
                            v71 = v70 + 1;
                            v8 = v87;
                            if ((unint64_t)(v70 + 1) >> 60)
                              abort();
                            if ((uint64_t)(v90 - (_QWORD)v48) >> 3 > v71)
                              v71 = (uint64_t)(v90 - (_QWORD)v48) >> 3;
                            if (v90 - (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
                              v72 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v72 = v71;
                            if (v72)
                            {
                              if (v72 >> 60)
                                sub_1C4764EE4();
                              v73 = (char *)operator new(16 * v72);
                            }
                            else
                            {
                              v73 = 0;
                            }
                            v74 = (unint64_t *)&v73[16 * v70];
                            *v74 = v61;
                            v74[1] = v68;
                            if (v47 == v48)
                            {
                              v48 = (unint64_t *)&v73[16 * v70];
                            }
                            else
                            {
                              v75 = &v73[16 * v70];
                              do
                              {
                                *((_OWORD *)v75 - 1) = *((_OWORD *)v47 - 1);
                                v75 -= 16;
                                v47 -= 2;
                              }
                              while (v47 != v48);
                              v47 = v48;
                              v48 = (unint64_t *)v75;
                            }
                            v46 = &v73[16 * v72];
                            v69 = v74 + 2;
                            if (v47)
                              operator delete(v47);
                          }
                          else
                          {
                            *v47 = v61;
                            v47[1] = v68;
                            v69 = v47 + 2;
                            v8 = v87;
                          }
                          llvm::line_iterator::advance((uint64_t)v8);
                          ++v45;
                          v47 = v69;
                          v49 = v45 < v88;
                          v9 = v86;
                          if (v45 != v88)
                            goto LABEL_79;
                          goto LABEL_151;
                        }
                      }
LABEL_147:
                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
                      __str.__r_.__value_.__s.__data_[0] = 0;
                      *((_DWORD *)this + 2) = 9;
                      v19 = v82;
                      std::string::operator=(v82, &__str);
                      v76 = operator new();
                      v96 = 260;
                      *(_QWORD *)&v94 = &__str;
                      *(_QWORD *)v76 = off_1E8192D50;
                      *(_DWORD *)(v76 + 8) = 9;
                      llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v76 + 16));
                      a3 = v84;
                      *v84 = v76;
                      v8 = v87;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      a2 = v83;
                      v9 = v86;
LABEL_159:
                      if (v48)
                        operator delete(v48);
                      if (v89)
                        return;
                      ++v85;
                      v15 = v81;
                      v20 = 0;
                      if (v85 != v91)
                        continue;
                      goto LABEL_58;
                    }
                    a2 = v83;
                    a3 = v84;
                    v9 = v86;
                    v8 = v87;
                  }
                  else
                  {
                    v48 = 0;
LABEL_151:
                    a2 = v83;
                    llvm::InstrProfRecord::addValueData((uint64_t)v83, v92, v85, (__int128 *)v48, v88, 0);
                    v89 = 0;
                    a3 = v84;
                  }
                  v19 = v82;
                  goto LABEL_159;
                }
LABEL_165:
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
                __str.__r_.__value_.__s.__data_[0] = 0;
                goto LABEL_166;
              }
              break;
            }
LABEL_171:
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
            __str.__r_.__value_.__s.__data_[0] = 0;
            v16 = 8;
LABEL_167:
            *((_DWORD *)this + 2) = v16;
            v17 = v19;
          }
          else
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C85F4380;
            strcpy(__str.__r_.__value_.__l.__data_, "number of value kinds is invalid");
            v16 = 9;
            *((_DWORD *)this + 2) = 9;
            v17 = (std::string *)((char *)this + 16);
          }
          std::string::operator=(v17, &__str);
          v80 = operator new();
          v96 = 260;
          *(_QWORD *)&v94 = &__str;
          *(_QWORD *)v80 = off_1E8192D50;
          *(_DWORD *)(v80 + 8) = v16;
          llvm::Twine::str((llvm::Twine *)&v94, (_QWORD *)(v80 + 16));
          *a3 = v80;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return;
        }
      }
    }
  }
  sub_1C5A90BD4((uint64_t)this, a3);
}

void llvm::TextInstrProfReader::readNextRecord(uint64_t a1@<X0>, llvm::InstrProfRecord *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  void *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string::size_type size;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  void **v51;
  unint64_t v52;
  std::string __str;
  std::string v54;
  __int16 v55;

  if (*(_BYTE *)(a1 + 88))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 112);
      if (v6)
      {
        v7 = *(unsigned __int8 **)(a1 + 104);
        if (*v7 != 35)
          break;
      }
      llvm::line_iterator::advance(a1 + 56);
      if (!*(_BYTE *)(a1 + 88))
        goto LABEL_5;
    }
    llvm::line_iterator::advance(a1 + 56);
    *((_QWORD *)a2 + 4) = v7;
    *((_QWORD *)a2 + 5) = v6;
    sub_1C6307600(*(_QWORD *)(a1 + 40), v7, v6, (uint64_t *)&v54);
    if (v54.__r_.__value_.__r.__words[0])
    {
LABEL_77:
      sub_1C63084C0(a1, &v54, a3);
      if (v54.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)v54.__r_.__value_.__l.__data_ + 8))(v54.__r_.__value_.__r.__words[0]);
      return;
    }
    if (*(_BYTE *)(a1 + 88))
    {
      v11 = *(_QWORD *)(a1 + 104);
      v12 = *(_QWORD *)(a1 + 112);
      llvm::line_iterator::advance(a1 + 56);
      v54.__r_.__value_.__r.__words[0] = v11;
      v54.__r_.__value_.__l.__size_ = v12;
      v13 = sub_1C5E3D4C0((uint64_t)&v54);
      size = v54.__r_.__value_.__l.__size_;
      if (v54.__r_.__value_.__l.__size_)
      {
        v15 = 0;
        v16 = (unsigned __int8 *)v54.__r_.__value_.__r.__words[0];
        while (1)
        {
          v17 = *v16;
          if ((v17 - 48) >= 0xA)
          {
            if ((v17 - 97) >= 0x1A)
            {
              if ((v17 - 65) > 0x19)
                break;
              v18 = -55;
            }
            else
            {
              v18 = -87;
            }
          }
          else
          {
            v18 = -48;
          }
          v19 = v18 + v17;
          if (v19 >= v13)
            break;
          v20 = v15 * v13 + v19;
          if (v20 / v13 < v15)
            break;
          ++v16;
          v15 = v20;
          if (!--size)
          {
            *((_QWORD *)a2 + 6) = v20;
            if (!*(_BYTE *)(a1 + 88))
              goto LABEL_37;
            v21 = *(unsigned __int8 **)(a1 + 104);
            v22 = *(_QWORD *)(a1 + 112);
            llvm::line_iterator::advance(a1 + 56);
            if (v22)
            {
              v23 = 0;
              while (1)
              {
                v24 = *v21;
                if ((v24 - 48) >= 0xA)
                {
                  if ((v24 - 97) >= 0x1A)
                  {
                    if ((v24 - 65) > 0x19)
                      break;
                    v25 = -55;
                  }
                  else
                  {
                    v25 = -87;
                  }
                }
                else
                {
                  v25 = -48;
                }
                v26 = v25 + v24;
                if (v26 > 9)
                  break;
                v27 = 10 * v23 + v26;
                if (v23 > v27 / 0xA)
                  break;
                ++v21;
                v23 = 10 * v23 + v26;
                if (!--v22)
                {
                  if (!v27)
                  {
                    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
                    strcpy(v54.__r_.__value_.__l.__data_, "number of counters is zero");
                    goto LABEL_83;
                  }
                  *((_QWORD *)a2 + 1) = *(_QWORD *)a2;
                  v28 = (void **)*((_QWORD *)a2 + 3);
                  *((_QWORD *)a2 + 3) = 0;
                  if (v28)
                  {
                    v51 = sub_1C62AFDC4(v28);
                    MEMORY[0x1CAA32FC0](v51, 0x20C40A759441BLL);
                  }
                  sub_1C4DB1D18((uint64_t)a2, v27);
                  v29 = 0;
                  v52 = v27;
LABEL_42:
                  if (!*(_BYTE *)(a1 + 88))
                  {
                    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 0;
                    v54.__r_.__value_.__s.__data_[0] = 0;
                    v48 = a3;
                    v49 = a1;
                    v50 = 8;
                    goto LABEL_84;
                  }
                  v30 = *(unsigned __int8 **)(a1 + 104);
                  v31 = *(_QWORD *)(a1 + 112);
                  llvm::line_iterator::advance(a1 + 56);
                  if (v31)
                  {
                    v32 = 0;
                    while (1)
                    {
                      v33 = *v30;
                      if ((v33 - 48) >= 0xA)
                      {
                        if ((v33 - 97) >= 0x1A)
                        {
                          if ((v33 - 65) > 0x19)
                            break;
                          v34 = -55;
                        }
                        else
                        {
                          v34 = -87;
                        }
                      }
                      else
                      {
                        v34 = -48;
                      }
                      v35 = v34 + v33;
                      if (v35 > 9)
                        break;
                      v36 = 10 * v32 + v35;
                      if (v32 > v36 / 0xA)
                        break;
                      ++v30;
                      v32 = 10 * v32 + v35;
                      if (!--v31)
                      {
                        v38 = (unint64_t *)*((_QWORD *)a2 + 1);
                        v37 = *((_QWORD *)a2 + 2);
                        if ((unint64_t)v38 >= v37)
                        {
                          v40 = *(unint64_t **)a2;
                          v41 = ((uint64_t)v38 - *(_QWORD *)a2) >> 3;
                          v42 = v41 + 1;
                          if ((unint64_t)(v41 + 1) >> 61)
                            abort();
                          v43 = v37 - (_QWORD)v40;
                          if (v43 >> 2 > v42)
                            v42 = v43 >> 2;
                          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                            v44 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v44 = v42;
                          if (v44)
                          {
                            if (v44 >> 61)
                              sub_1C4764EE4();
                            v45 = (char *)operator new(8 * v44);
                          }
                          else
                          {
                            v45 = 0;
                          }
                          v46 = (unint64_t *)&v45[8 * v41];
                          *v46 = v36;
                          v39 = v46 + 1;
                          while (v38 != v40)
                          {
                            v47 = *--v38;
                            *--v46 = v47;
                          }
                          *(_QWORD *)a2 = v46;
                          *((_QWORD *)a2 + 1) = v39;
                          *((_QWORD *)a2 + 2) = &v45[8 * v44];
                          if (v40)
                            operator delete(v40);
                          v27 = v52;
                        }
                        else
                        {
                          *v38 = v36;
                          v39 = v38 + 1;
                        }
                        *((_QWORD *)a2 + 1) = v39;
                        if (++v29 != v27)
                          goto LABEL_42;
                        llvm::TextInstrProfReader::readValueProfileData((llvm::TextInstrProfReader *)a1, a2, (uint64_t *)&v54);
                        if (v54.__r_.__value_.__r.__words[0])
                          goto LABEL_77;
                        sub_1C5A90BD4(a1, a3);
                        return;
                      }
                    }
                  }
                  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 16;
                  strcpy((char *)&__str, "count is invalid");
                  goto LABEL_80;
                }
              }
            }
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_1C86516D0;
            strcpy(v54.__r_.__value_.__l.__data_, "number of counters is not a valid integer");
LABEL_83:
            v48 = a3;
            v49 = a1;
            v50 = 9;
LABEL_84:
            sub_1C6308424(v48, v49, v50, &v54);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            {
              v10 = (void *)v54.__r_.__value_.__r.__words[0];
              goto LABEL_8;
            }
            return;
          }
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C85F43A0;
      strcpy(__str.__r_.__value_.__l.__data_, "function hash is not a valid integer");
LABEL_80:
      v8 = 9;
    }
    else
    {
LABEL_37:
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;
      v8 = 8;
    }
  }
  else
  {
LABEL_5:
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    v8 = 1;
  }
  *(_DWORD *)(a1 + 8) = v8;
  std::string::operator=((std::string *)(a1 + 16), &__str);
  v9 = operator new();
  v55 = 260;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  *(_QWORD *)v9 = off_1E8192D50;
  *(_DWORD *)(v9 + 8) = v8;
  llvm::Twine::str((llvm::Twine *)&v54, (_QWORD *)(v9 + 16));
  *a3 = v9;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_8:
    operator delete(v10);
  }
}

void llvm::RawInstrProfReader<unsigned int>::readHeader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int8x16_t *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  std::string __p;
  std::string *p_p;
  __int16 v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(int8x16_t **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16) - (_QWORD)v4;
  if (v5 >= 8
    && ((v6 = v4->i64[0], v4->i64[0] != 0x8152666F72706CFFLL) ? (v7 = v6 == 0xFF6C70726F665281) : (v7 = 1), v7))
  {
    if (v5 > 0x57)
    {
      *(_BYTE *)(a1 + 64) = v6 != 0xFF6C70726F665281;
      llvm::RawInstrProfReader<unsigned int>::readHeader(v4, a2, a1);
      return;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 4;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 3;
  }
  *(_DWORD *)(a1 + 8) = v8;
  std::string::operator=((std::string *)(a1 + 16), &__p);
  v9 = operator new();
  v12 = 260;
  p_p = &__p;
  *(_QWORD *)v9 = off_1E8192D50;
  *(_DWORD *)(v9 + 8) = v8;
  llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v9 + 16));
  *a2 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void llvm::RawInstrProfReader<unsigned int>::readHeader(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  int32x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int8 *v40;
  __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string __p;
  std::string *p_p;
  __int16 v48;

  v5 = a2->u64[1];
  v6 = bswap64(v5);
  if (*(_BYTE *)(a1 + 64))
    v5 = v6;
  *(_QWORD *)(a1 + 72) = v5;
  if ((v5 & 0xFFFFFFFFFFFFFFLL) != 8)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 5;
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) && !*(_QWORD *)(a1 + 56))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 10;
    goto LABEL_45;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) == 0 && *(_QWORD *)(a1 + 56))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 11;
    goto LABEL_45;
  }
  v9 = a2[1].u64[0];
  v10 = *(unsigned __int8 *)(a1 + 64);
  v11 = bswap64(v9);
  if (*(_BYTE *)(a1 + 64))
    v9 = v11;
  *(_QWORD *)(a1 + 160) = v9;
  if ((v9 & 7) != 0)
    goto LABEL_44;
  v12 = v10 == 0;
  v13 = vdup_n_s32(v10 == 0);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(a1 + 80) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v14, 0x3FuLL)), a2[4], vrev64q_s8(a2[4]));
  v15 = bswap64(a2[1].u64[1]);
  if (v10)
    v16 = v15;
  else
    v16 = a2[1].u64[1];
  v17 = bswap64(a2[2].u64[0]);
  if (v12)
    v18 = a2[2].u64[0];
  else
    v18 = v17;
  v19 = bswap64(a2[2].u64[1]);
  if (v12)
    v20 = a2[2].u64[1];
  else
    v20 = v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v22 = 3;
  if (v21)
    v22 = 0;
  v23 = v20 << v22;
  v24 = bswap64(a2[3].u64[0]);
  if (!*(_BYTE *)(a1 + 64))
    v24 = a2[3].u64[0];
  v25 = bswap64(a2[3].u64[1]);
  if (*(_BYTE *)(a1 + 64))
    v26 = v25;
  else
    v26 = a2[3].u64[1];
  v27 = a2[5].u64[0];
  v28 = bswap64(v27);
  if (*(_BYTE *)(a1 + 64))
    LODWORD(v27) = v28;
  *(_DWORD *)(a1 + 152) = v27;
  v29 = *(_QWORD *)(a1 + 160);
  v30 = v29 + 88;
  v31 = v18 + 40 * v16 + v29 + 88;
  v32 = v24 + v23 + v31;
  v33 = &a2->i8[(-(int)v26 & 7) + v26 + v32];
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if ((unint64_t)v33 > v34)
    goto LABEL_44;
  v35 = *(_QWORD *)(a1 + 56);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 72);
    v37 = *(_QWORD *)(v35 + 80) - v36;
    if (!v37)
      v36 = 0;
    *(_QWORD *)(a1 + 96) = v36;
    *(_QWORD *)(a1 + 104) = v36 + v37;
    v38 = (_QWORD *)(v35 + 16);
    if (*(char *)(v35 + 39) < 0)
      v38 = (_QWORD *)*v38;
    *(_QWORD *)(a1 + 128) = v38;
    v39 = *(char *)(v35 + 39) < 0 ? *(_QWORD *)(v35 + 24) : *(unsigned __int8 *)(v35 + 39);
    v40 = (char *)v38 + v39;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = (char *)a2 + v30;
    *(_QWORD *)(a1 + 104) = (char *)a2 + 40 * v16 + v30;
    *(_QWORD *)(a1 + 128) = (char *)a2 + v32;
    v40 = &a2->i8[v32 + v26];
  }
  *(_QWORD *)(a1 + 168) = (char *)a2 + 88;
  v41 = &a2->i8[v31];
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = &v41[v23];
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)(a1 + 144) = v33;
  if ((unint64_t)&a2[5].u64[1] + v29 > v34)
  {
LABEL_44:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 4;
LABEL_45:
    *(_DWORD *)(a1 + 8) = v8;
    std::string::operator=((std::string *)(a1 + 16), &__p);
    v42 = operator new();
    v48 = 260;
    p_p = &__p;
    *(_QWORD *)v42 = off_1E8192D50;
    *(_DWORD *)(v42 + 8) = v8;
    llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v42 + 16));
    *a3 = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v43 = operator new();
  *(_OWORD *)(v43 + 64) = 0u;
  *(_OWORD *)(v43 + 80) = 0u;
  *(_OWORD *)(v43 + 96) = 0u;
  *(_OWORD *)(v43 + 112) = 0u;
  *(_QWORD *)(v43 + 128) = 0;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  *(_DWORD *)(v43 + 44) = 8;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  *(_OWORD *)(v43 + 104) = 0u;
  *(_OWORD *)(v43 + 113) = 0u;
  *(_OWORD *)(v43 + 56) = 0u;
  llvm::RawInstrProfReader<unsigned int>::createSymtab((_QWORD *)v43, a3, a1);
  if (*a3)
  {
    sub_1C624BA64((_QWORD *)v43);
    JUMPOUT(0x1CAA32FC0);
  }
  v44 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v43;
  if (v44)
  {
    v45 = sub_1C624BA64(v44);
    MEMORY[0x1CAA32FC0](v45, 0x10F0C40767211C4);
  }
  sub_1C5A90BD4(a1, a3);
}

void llvm::RawInstrProfReader<unsigned int>::readNextRecord(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v6 = *(unint64_t **)(a1 + 96);
  if (v6 == *(unint64_t **)(a1 + 104))
  {
    llvm::RawInstrProfReader<unsigned int>::readNextHeader(*(int8x16_t **)(a1 + 144), (uint64_t *)&v22, a1);
    if (v22)
      goto LABEL_27;
    v6 = *(unint64_t **)(a1 + 96);
  }
  v7 = *v6;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = bswap64(v7);
  if (*(_BYTE *)(a1 + 64))
    v10 = v9;
  else
    v10 = v7;
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v11 = *(_QWORD **)(v8 + 56);
  v12 = *(_QWORD **)(v8 + 64);
  if (v12 != v11)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v11);
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[3 * (v13 >> 1)];
      v17 = *v15;
      v16 = v15 + 3;
      v13 += ~(v13 >> 1);
      if (v17 < v10)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  if (v11 == v12 || *v11 != v10)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v19 = v11[1];
    v18 = v11[2];
  }
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v18;
  sub_1C5A90BD4(a1, &v22);
  if (!v22)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v21 = bswap64(v20);
    if (*(_BYTE *)(a1 + 64))
      v20 = v21;
    *(_QWORD *)(a2 + 48) = v20;
    sub_1C5A90BD4(a1, &v22);
    if (!v22)
    {
      llvm::RawInstrProfReader<unsigned int>::readRawCounts((char **)a2, (uint64_t *)&v22, a1);
      if (!v22)
      {
        llvm::RawInstrProfReader<unsigned int>::readValueProfilingData((llvm::InstrProfRecord *)a2, (llvm::ValueProfData **)&v22, a1);
        if (!v22)
        {
          if (!*(_QWORD *)(a1 + 56))
            *(_QWORD *)(a1 + 80) -= 40;
          *(_QWORD *)(a1 + 96) += 40;
          *(_QWORD *)(a1 + 144) += *(unsigned int *)(a1 + 156);
          sub_1C5A90BD4(a1, a3);
          return;
        }
      }
    }
  }
LABEL_27:
  sub_1C63084C0(a1, &v22, a3);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
}

BOOL llvm::RawInstrProfReader<unsigned int>::atEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104);
}

void llvm::RawInstrProfReader<unsigned int>::readNextHeader(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  __int16 v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if ((int8x16_t *)v4 == a2)
  {
LABEL_5:
    v6 = operator new();
    v7 = v6;
    v12 = 257;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 1;
LABEL_11:
    *(_DWORD *)(v6 + 8) = v8;
    llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v6 + 16));
    *a3 = v7;
    return;
  }
  v5 = (char)a2;
  while (!a2->i8[0])
  {
    a2 = (int8x16_t *)((char *)a2 + 1);
    ++v5;
    if (a2 == (int8x16_t *)v4)
      goto LABEL_5;
  }
  if ((unint64_t)&a2[5].u64[1] > v4)
  {
    v6 = operator new();
    v7 = v6;
    v9 = "not enough space for another header";
LABEL_10:
    v11 = v9;
    v12 = 259;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 9;
    goto LABEL_11;
  }
  if ((v5 & 7) != 0)
  {
    v6 = operator new();
    v7 = v6;
    v9 = "insufficient padding";
    goto LABEL_10;
  }
  v10 = 0x8152666F72706CFFLL;
  if (!*(_BYTE *)(a1 + 64))
    v10 = 0xFF6C70726F665281;
  if (a2->i64[0] != v10)
  {
    v6 = operator new();
    v7 = v6;
    v12 = 257;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 3;
    goto LABEL_11;
  }
  llvm::RawInstrProfReader<unsigned int>::readHeader(a2, a3, a1);
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getNextHeaderPos(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

void llvm::RawInstrProfReader<unsigned int>::readName(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = bswap64(**(_QWORD **)(a1 + 96));
  if (*(_BYTE *)(a1 + 64))
    v8 = v7;
  else
    v8 = **(_QWORD **)(a1 + 96);
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v9 = *(_QWORD **)(v6 + 56);
  v10 = *(_QWORD **)(v6 + 64);
  if (v10 != v9)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[3 * (v11 >> 1)];
      v15 = *v13;
      v14 = v13 + 3;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 == v10 || *v9 != v8)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v17 = v9[1];
    v16 = v9[2];
  }
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v16;
  sub_1C5A90BD4(a1, a3);
}

void llvm::RawInstrProfReader<unsigned int>::readFuncHash(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3@<X1>)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v4 = bswap64(v3);
  if (*(_BYTE *)(a1 + 64))
    v3 = v4;
  *(_QWORD *)(a3 + 48) = v3;
  sub_1C5A90BD4(a1, a2);
}

void llvm::RawInstrProfReader<unsigned int>::readRawCounts(uint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::string v46;
  __int16 v47;
  std::string v48;
  _QWORD v49[2];
  const char *v50;
  __int16 v51;
  std::string __str;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[4];
  __int16 v56;

  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_DWORD *)(v5 + 28);
  v7 = bswap32(v6);
  if (*(_BYTE *)(a1 + 64))
    v8 = v7;
  else
    v8 = v6;
  if (!(_DWORD)v8)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
    strcpy(__str.__r_.__value_.__l.__data_, "number of counters is zero");
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &__str);
    v18 = operator new();
    v56 = 260;
    v55[0] = &__str;
    *(_QWORD *)v18 = off_1E8192D50;
    *(_DWORD *)(v18 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v18 + 16));
    *a3 = v18;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v19 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  LODWORD(v5) = *(_DWORD *)(v5 + 16);
  v9 = bswap32(v5);
  if (*(_BYTE *)(a1 + 64))
    v5 = v9;
  else
    v5 = v5;
  v10 = v5 - *(_QWORD *)(a1 + 80);
  v54 = v10;
  if (v10 < 0)
  {
    v49[0] = "counter offset ";
    v50 = (const char *)&v54;
    v51 = 2819;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)" is negative";
    v53 = 770;
    llvm::Twine::str((llvm::Twine *)&__str, &v46);
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &v46);
    v20 = operator new();
    v56 = 260;
    v55[0] = &v46;
    *(_QWORD *)v20 = off_1E8192D50;
    *(_DWORD *)(v20 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v20 + 16));
    *a3 = v20;
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v19 = (void *)v46.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  v12 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  if (v10 >= v11 - v12)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"counter offset ";
    v46.__r_.__value_.__r.__words[2] = (std::string::size_type)&v54;
    v47 = 2819;
    v49[0] = &v46;
    v50 = " is greater than the maximum counter offset ";
    v51 = 770;
    v45 = ~v12 + v11;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v17 = 2818;
    goto LABEL_19;
  }
  v14 = v11 - v12 - v10;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v16 = 8;
  if (v15)
    v16 = 1;
  v45 = v14 / v16;
  if (v14 / v16 < (unint64_t)v8)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"number of counters ";
    v46.__r_.__value_.__r.__words[2] = v8;
    v47 = 2051;
    v49[0] = &v46;
    v50 = " is greater than the maximum number of counters ";
    v51 = 770;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v17 = 3074;
LABEL_19:
    v53 = v17;
    llvm::Twine::str((llvm::Twine *)&__str, &v48);
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &v48);
    v21 = operator new();
    v56 = 260;
    v55[0] = &v48;
    *(_QWORD *)v21 = off_1E8192D50;
    *(_DWORD *)(v21 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v21 + 16));
    *a3 = v21;
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v19 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v19);
    return;
  }
  v44 = a3;
  a2[1] = *a2;
  sub_1C4DB1D18((uint64_t)a2, v8);
  v22 = 0;
  do
  {
    v23 = *(_QWORD *)(a1 + 112) + v10;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
      v24 = 0;
    else
      v24 = 3;
    v25 = (v22 << v24);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    {
      v26 = *(_BYTE *)(v23 + v25) == 0;
      v28 = (unint64_t *)a2[1];
      v27 = (unint64_t)a2[2];
      if ((unint64_t)v28 < v27)
        goto LABEL_41;
      v29 = (unint64_t *)*a2;
      v30 = ((char *)v28 - *a2) >> 3;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        goto LABEL_64;
      v32 = v27 - (_QWORD)v29;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          goto LABEL_65;
        v34 = (char *)operator new(8 * v33);
      }
      else
      {
        v34 = 0;
      }
      v41 = &v34[8 * v30];
      *(_QWORD *)v41 = v26;
      v37 = v41 + 8;
      while (v28 != v29)
      {
        v42 = *--v28;
        *((_QWORD *)v41 - 1) = v42;
        v41 -= 8;
      }
    }
    else
    {
      v35 = bswap64(*(_QWORD *)(v23 + v25));
      if (*(_BYTE *)(a1 + 64))
        v26 = v35;
      else
        v26 = *(_QWORD *)(v23 + v25);
      v28 = (unint64_t *)a2[1];
      v36 = (unint64_t)a2[2];
      if ((unint64_t)v28 < v36)
      {
LABEL_41:
        *v28 = v26;
        v37 = (char *)(v28 + 1);
        goto LABEL_61;
      }
      v29 = (unint64_t *)*a2;
      v38 = ((char *)v28 - *a2) >> 3;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
LABEL_64:
        abort();
      v40 = v36 - (_QWORD)v29;
      if (v40 >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v39;
      if (v33)
      {
        if (v33 >> 61)
LABEL_65:
          sub_1C4764EE4();
        v34 = (char *)operator new(8 * v33);
      }
      else
      {
        v34 = 0;
      }
      v41 = &v34[8 * v38];
      *(_QWORD *)v41 = v26;
      v37 = v41 + 8;
      while (v28 != v29)
      {
        v43 = *--v28;
        *((_QWORD *)v41 - 1) = v43;
        v41 -= 8;
      }
    }
    *a2 = v41;
    a2[1] = v37;
    a2[2] = &v34[8 * v33];
    if (v29)
      operator delete(v29);
LABEL_61:
    a2[1] = v37;
    ++v22;
  }
  while (v22 != (_DWORD)v8);
  sub_1C5A90BD4(a1, v44);
}

void llvm::RawInstrProfReader<unsigned int>::readValueProfilingData(uint64_t a1@<X0>, llvm::InstrProfRecord *a2@<X1>, llvm::ValueProfData **a3@<X8>)
{
  void **v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  void **v11;
  char v12;
  llvm::ValueProfData *v13;
  llvm::ValueProfData *v14;
  llvm::ValueProfData *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (void **)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v6)
  {
    v11 = sub_1C62AFDC4(v6);
    MEMORY[0x1CAA32FC0](v11, 0x20C40A759441BLL);
  }
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 156) = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    if (*(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * v7 + 32))
      ++v8;
    v7 = 1;
    v9 = 0;
  }
  while ((v10 & 1) != 0);
  if (!v8)
  {
    sub_1C5A90BD4(a1, a3);
    return;
  }
  llvm::ValueProfData::getValueProfData(*(unsigned int **)(a1 + 144), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_BYTE *)(a1 + 64) == 0, (uint64_t)&v15);
  v12 = v16;
  if ((v16 & 1) != 0)
  {
    v13 = v15;
    *a3 = v15;
    if (v13)
      return;
    v14 = 0;
  }
  else
  {
    *a3 = 0;
    v14 = v15;
  }
  llvm::ValueProfData::deserializeTo(v14, a2, *(llvm::InstrProfSymtab **)(a1 + 40));
  *(_DWORD *)(a1 + 156) = *(_DWORD *)v14;
  sub_1C5A90BD4(a1, a3);
  if ((v12 & 1) != 0)
    (*(void (**)(llvm::ValueProfData *))(*(_QWORD *)v14 + 8))(v14);
  else
    operator delete(v14);
}

uint64_t llvm::RawInstrProfReader<unsigned int>::advanceData(uint64_t result)
{
  if (!*(_QWORD *)(result + 56))
    *(_QWORD *)(result + 80) -= 40;
  *(_QWORD *)(result + 96) += 40;
  *(_QWORD *)(result + 144) += *(unsigned int *)(result + 156);
  return result;
}

void llvm::RawInstrProfReader<unsigned int>::printBinaryIds(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, uint64_t *a3@<X8>)
{
  void *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned __int8 *v11;
  unint64_t i;
  unsigned int v13;
  _BYTE *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  _QWORD v20[4];
  __int16 v21;

  if (*(_QWORD *)(a2 + 160))
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "Binary IDs: \n", 13);
      *((_QWORD *)this + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(this, "Binary IDs: \n", 0xDuLL);
    }
    v6 = *(unint64_t **)(a2 + 168);
    v7 = (unint64_t *)((char *)v6 + *(_QWORD *)(a2 + 160));
    while (1)
    {
      if (v6 >= v7)
      {
        sub_1C5A90BD4(a2, a3);
        return;
      }
      if ((unint64_t)((char *)v7 - (char *)v6) <= 7)
      {
        v16 = operator new();
        v17 = v16;
        v15 = "not enough data to read binary id length";
        goto LABEL_24;
      }
      v8 = bswap64(*v6);
      if (*(_BYTE *)(a2 + 64))
        v9 = v8;
      else
        v9 = *v6;
      if ((char *)v7 - (char *)v6 < v9 + 8)
      {
        v16 = operator new();
        v17 = v16;
        v15 = "not enough data to read binary id data";
        goto LABEL_24;
      }
      v10 = v6 + 1;
      if ((unint64_t)(v6 + 1) > *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16))
        break;
      v11 = (unsigned __int8 *)(v6 + 1);
      for (i = v9; i; --i)
      {
        v20[0] = &unk_1E8145938;
        v13 = *v11++;
        v20[1] = "%02x";
        v20[2] = v13;
        llvm::raw_ostream::operator<<(this, (uint64_t)v20);
      }
      v14 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v14)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v14 = 10;
        ++*((_QWORD *)this + 4);
      }
      v6 = (unint64_t *)((char *)v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8));
      if ((unint64_t)v6 > *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16))
      {
        v16 = operator new();
        v17 = v16;
        v18 = 257;
        goto LABEL_25;
      }
    }
    v16 = operator new();
    v17 = v16;
    v15 = "binary id that is read is bigger than buffer size";
LABEL_24:
    v20[0] = v15;
    v18 = 259;
LABEL_25:
    v21 = v18;
    *(_QWORD *)v16 = off_1E8192D50;
    *(_DWORD *)(v16 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v16 + 16));
    *a3 = v17;
  }
  else
  {
    sub_1C5A90BD4(a2, a3);
  }
}

uint64_t llvm::RawInstrProfReader<unsigned int>::isIRLevelProfile(uint64_t a1)
{
  return *(_BYTE *)(a1 + 79) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::hasCSIRLevelProfile(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 1) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::instrEntryBBEnabled(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 2) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::useDebugInfoCorrelate(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 3) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::hasSingleByteCoverage(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 4) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::functionEntryOnly(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 5) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getProfileKind(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 72) >> 54) & 8 | (*(_QWORD *)(a1 + 72) >> 55) & 2 | HIBYTE(*(_QWORD *)(a1 + 72)) & 0x74;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getSymtab(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void llvm::RawInstrProfReader<unsigned int>::createSymtab(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *i;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;

  llvm::readPGOFuncNameStrings(*(char **)(a1 + 128), *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128), (uint64_t)a2, (uint64_t *)&v24);
  if (v24)
  {
    sub_1C63084C0(a1, &v24, a3);
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  else
  {
    v23 = a3;
    v7 = *(uint64_t **)(a1 + 96);
    for (i = *(uint64_t **)(a1 + 104); v7 != i; v7 += 5)
    {
      v8 = *((_DWORD *)v7 + 5);
      v9 = bswap32(v8);
      if (*(_BYTE *)(a1 + 64))
        v10 = v9;
      else
        v10 = v8;
      if ((_DWORD)v10)
      {
        v11 = *v7;
        v13 = (char *)a2[14];
        v12 = a2[15];
        if ((unint64_t)v13 >= v12)
        {
          v15 = (char *)a2[13];
          v16 = (v13 - v15) >> 4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 3 > v17)
            v17 = v18 >> 3;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 60)
              sub_1C4764EE4();
            v20 = (char *)operator new(16 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_QWORD *)v21 = v10;
          *((_QWORD *)v21 + 1) = v11;
          v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
              v22 -= 16;
              v13 -= 16;
            }
            while (v13 != v15);
            v13 = (char *)a2[13];
          }
          v14 = v21 + 16;
          a2[13] = v22;
          a2[14] = v21 + 16;
          a2[15] = &v20[16 * v19];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v13 = v10;
          *((_QWORD *)v13 + 1) = v11;
          v14 = v13 + 16;
        }
        a2[14] = v14;
        i = *(uint64_t **)(a1 + 104);
      }
    }
    sub_1C5A90BD4(a1, v23);
  }
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getCounterTypeSize(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    return 1;
  else
    return 8;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getNumPaddingBytes(uint64_t a1, int a2)
{
  return -a2 & 7;
}

BOOL llvm::RawInstrProfReader<unsigned int>::getDataEndianness(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t llvm::RawInstrProfReader<unsigned int>::getName(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = bswap64(a2);
  if (*(_BYTE *)(a1 + 64))
    v4 = v3;
  else
    v4 = a2;
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v5 = *(_QWORD **)(v2 + 56);
  v6 = *(_QWORD **)(v2 + 64);
  if (v6 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[3 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (v11 < v4)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v5 == v6 || *v5 != v4)
    return 0;
  else
    return v5[1];
}

void llvm::RawInstrProfReader<unsigned long long>::readHeader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int8x16_t *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  std::string __p;
  std::string *p_p;
  __int16 v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(int8x16_t **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16) - (_QWORD)v4;
  if (v5 >= 8
    && ((v6 = v4->i64[0], v4->i64[0] != 0x8172666F72706CFFLL) ? (v7 = v6 == 0xFF6C70726F667281) : (v7 = 1), v7))
  {
    if (v5 > 0x57)
    {
      *(_BYTE *)(a1 + 64) = v6 != 0xFF6C70726F667281;
      llvm::RawInstrProfReader<unsigned long long>::readHeader(v4, a2, a1);
      return;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 4;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 3;
  }
  *(_DWORD *)(a1 + 8) = v8;
  std::string::operator=((std::string *)(a1 + 16), &__p);
  v9 = operator new();
  v12 = 260;
  p_p = &__p;
  *(_QWORD *)v9 = off_1E8192D50;
  *(_DWORD *)(v9 + 8) = v8;
  llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v9 + 16));
  *a2 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void llvm::RawInstrProfReader<unsigned long long>::readHeader(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  int32x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int8 *v40;
  __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string __p;
  std::string *p_p;
  __int16 v48;

  v5 = a2->u64[1];
  v6 = bswap64(v5);
  if (*(_BYTE *)(a1 + 64))
    v5 = v6;
  *(_QWORD *)(a1 + 72) = v5;
  if ((v5 & 0xFFFFFFFFFFFFFFLL) != 8)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 5;
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) && !*(_QWORD *)(a1 + 56))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 10;
    goto LABEL_45;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) == 0 && *(_QWORD *)(a1 + 56))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 11;
    goto LABEL_45;
  }
  v9 = a2[1].u64[0];
  v10 = *(unsigned __int8 *)(a1 + 64);
  v11 = bswap64(v9);
  if (*(_BYTE *)(a1 + 64))
    v9 = v11;
  *(_QWORD *)(a1 + 160) = v9;
  if ((v9 & 7) != 0)
    goto LABEL_44;
  v12 = v10 == 0;
  v13 = vdup_n_s32(v10 == 0);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(a1 + 80) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v14, 0x3FuLL)), a2[4], vrev64q_s8(a2[4]));
  v15 = bswap64(a2[1].u64[1]);
  if (v10)
    v16 = v15;
  else
    v16 = a2[1].u64[1];
  v17 = bswap64(a2[2].u64[0]);
  if (v12)
    v18 = a2[2].u64[0];
  else
    v18 = v17;
  v19 = bswap64(a2[2].u64[1]);
  if (v12)
    v20 = a2[2].u64[1];
  else
    v20 = v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v22 = 3;
  if (v21)
    v22 = 0;
  v23 = v20 << v22;
  v24 = bswap64(a2[3].u64[0]);
  if (!*(_BYTE *)(a1 + 64))
    v24 = a2[3].u64[0];
  v25 = bswap64(a2[3].u64[1]);
  if (*(_BYTE *)(a1 + 64))
    v26 = v25;
  else
    v26 = a2[3].u64[1];
  v27 = a2[5].u64[0];
  v28 = bswap64(v27);
  if (*(_BYTE *)(a1 + 64))
    LODWORD(v27) = v28;
  *(_DWORD *)(a1 + 152) = v27;
  v29 = *(_QWORD *)(a1 + 160);
  v30 = v29 + 88;
  v31 = v18 + 48 * v16 + v29 + 88;
  v32 = v24 + v23 + v31;
  v33 = &a2->i8[(-(int)v26 & 7) + v26 + v32];
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if ((unint64_t)v33 > v34)
    goto LABEL_44;
  v35 = *(_QWORD *)(a1 + 56);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 72);
    v37 = *(_QWORD *)(v35 + 80) - v36;
    if (!v37)
      v36 = 0;
    *(_QWORD *)(a1 + 96) = v36;
    *(_QWORD *)(a1 + 104) = v36 + v37;
    v38 = (_QWORD *)(v35 + 16);
    if (*(char *)(v35 + 39) < 0)
      v38 = (_QWORD *)*v38;
    *(_QWORD *)(a1 + 128) = v38;
    v39 = *(char *)(v35 + 39) < 0 ? *(_QWORD *)(v35 + 24) : *(unsigned __int8 *)(v35 + 39);
    v40 = (char *)v38 + v39;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = (char *)a2 + v30;
    *(_QWORD *)(a1 + 104) = (char *)&a2[3 * v16] + v30;
    *(_QWORD *)(a1 + 128) = (char *)a2 + v32;
    v40 = &a2->i8[v32 + v26];
  }
  *(_QWORD *)(a1 + 168) = (char *)a2 + 88;
  v41 = &a2->i8[v31];
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = &v41[v23];
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)(a1 + 144) = v33;
  if ((unint64_t)&a2[5].u64[1] + v29 > v34)
  {
LABEL_44:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v8 = 4;
LABEL_45:
    *(_DWORD *)(a1 + 8) = v8;
    std::string::operator=((std::string *)(a1 + 16), &__p);
    v42 = operator new();
    v48 = 260;
    p_p = &__p;
    *(_QWORD *)v42 = off_1E8192D50;
    *(_DWORD *)(v42 + 8) = v8;
    llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v42 + 16));
    *a3 = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v43 = operator new();
  *(_OWORD *)(v43 + 64) = 0u;
  *(_OWORD *)(v43 + 80) = 0u;
  *(_OWORD *)(v43 + 96) = 0u;
  *(_OWORD *)(v43 + 112) = 0u;
  *(_QWORD *)(v43 + 128) = 0;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  *(_DWORD *)(v43 + 44) = 8;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  *(_OWORD *)(v43 + 104) = 0u;
  *(_OWORD *)(v43 + 113) = 0u;
  *(_OWORD *)(v43 + 56) = 0u;
  llvm::RawInstrProfReader<unsigned long long>::createSymtab((_QWORD *)v43, a3, a1);
  if (*a3)
  {
    sub_1C624BA64((_QWORD *)v43);
    JUMPOUT(0x1CAA32FC0);
  }
  v44 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v43;
  if (v44)
  {
    v45 = sub_1C624BA64(v44);
    MEMORY[0x1CAA32FC0](v45, 0x10F0C40767211C4);
  }
  sub_1C5A90BD4(a1, a3);
}

void llvm::RawInstrProfReader<unsigned long long>::readNextRecord(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v6 = *(unint64_t **)(a1 + 96);
  if (v6 == *(unint64_t **)(a1 + 104))
  {
    llvm::RawInstrProfReader<unsigned long long>::readNextHeader(*(int8x16_t **)(a1 + 144), (uint64_t *)&v22, a1);
    if (v22)
      goto LABEL_27;
    v6 = *(unint64_t **)(a1 + 96);
  }
  v7 = *v6;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = bswap64(v7);
  if (*(_BYTE *)(a1 + 64))
    v10 = v9;
  else
    v10 = v7;
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v11 = *(_QWORD **)(v8 + 56);
  v12 = *(_QWORD **)(v8 + 64);
  if (v12 != v11)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v11);
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[3 * (v13 >> 1)];
      v17 = *v15;
      v16 = v15 + 3;
      v13 += ~(v13 >> 1);
      if (v17 < v10)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  if (v11 == v12 || *v11 != v10)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v19 = v11[1];
    v18 = v11[2];
  }
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v18;
  sub_1C5A90BD4(a1, &v22);
  if (!v22)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v21 = bswap64(v20);
    if (*(_BYTE *)(a1 + 64))
      v20 = v21;
    *(_QWORD *)(a2 + 48) = v20;
    sub_1C5A90BD4(a1, &v22);
    if (!v22)
    {
      llvm::RawInstrProfReader<unsigned long long>::readRawCounts((char **)a2, (uint64_t *)&v22, a1);
      if (!v22)
      {
        llvm::RawInstrProfReader<unsigned long long>::readValueProfilingData((llvm::InstrProfRecord *)a2, (llvm::ValueProfData **)&v22, a1);
        if (!v22)
        {
          if (!*(_QWORD *)(a1 + 56))
            *(_QWORD *)(a1 + 80) -= 48;
          *(_QWORD *)(a1 + 96) += 48;
          *(_QWORD *)(a1 + 144) += *(unsigned int *)(a1 + 156);
          sub_1C5A90BD4(a1, a3);
          return;
        }
      }
    }
  }
LABEL_27:
  sub_1C63084C0(a1, &v22, a3);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
}

BOOL llvm::RawInstrProfReader<unsigned long long>::atEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104);
}

void llvm::RawInstrProfReader<unsigned long long>::readNextHeader(uint64_t a1@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  __int16 v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if ((int8x16_t *)v4 == a2)
  {
LABEL_5:
    v6 = operator new();
    v7 = v6;
    v12 = 257;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 1;
LABEL_11:
    *(_DWORD *)(v6 + 8) = v8;
    llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v6 + 16));
    *a3 = v7;
    return;
  }
  v5 = (char)a2;
  while (!a2->i8[0])
  {
    a2 = (int8x16_t *)((char *)a2 + 1);
    ++v5;
    if (a2 == (int8x16_t *)v4)
      goto LABEL_5;
  }
  if ((unint64_t)&a2[5].u64[1] > v4)
  {
    v6 = operator new();
    v7 = v6;
    v9 = "not enough space for another header";
LABEL_10:
    v11 = v9;
    v12 = 259;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 9;
    goto LABEL_11;
  }
  if ((v5 & 7) != 0)
  {
    v6 = operator new();
    v7 = v6;
    v9 = "insufficient padding";
    goto LABEL_10;
  }
  v10 = 0x8172666F72706CFFLL;
  if (!*(_BYTE *)(a1 + 64))
    v10 = 0xFF6C70726F667281;
  if (a2->i64[0] != v10)
  {
    v6 = operator new();
    v7 = v6;
    v12 = 257;
    *(_QWORD *)v6 = off_1E8192D50;
    v8 = 3;
    goto LABEL_11;
  }
  llvm::RawInstrProfReader<unsigned long long>::readHeader(a2, a3, a1);
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getNextHeaderPos(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

void llvm::RawInstrProfReader<unsigned long long>::readName(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = bswap64(**(_QWORD **)(a1 + 96));
  if (*(_BYTE *)(a1 + 64))
    v8 = v7;
  else
    v8 = **(_QWORD **)(a1 + 96);
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v9 = *(_QWORD **)(v6 + 56);
  v10 = *(_QWORD **)(v6 + 64);
  if (v10 != v9)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[3 * (v11 >> 1)];
      v15 = *v13;
      v14 = v13 + 3;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 == v10 || *v9 != v8)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v17 = v9[1];
    v16 = v9[2];
  }
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v16;
  sub_1C5A90BD4(a1, a3);
}

void llvm::RawInstrProfReader<unsigned long long>::readFuncHash(uint64_t a1@<X0>, _QWORD *a2@<X8>, uint64_t a3@<X1>)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v4 = bswap64(v3);
  if (*(_BYTE *)(a1 + 64))
    v3 = v4;
  *(_QWORD *)(a3 + 48) = v3;
  sub_1C5A90BD4(a1, a2);
}

void llvm::RawInstrProfReader<unsigned long long>::readRawCounts(uint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  std::string v47;
  __int16 v48;
  std::string v49;
  _QWORD v50[2];
  const char *v51;
  __int16 v52;
  std::string __str;
  __int16 v54;
  uint64_t v55;
  _QWORD v56[4];
  __int16 v57;

  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_DWORD *)(v5 + 40);
  v7 = bswap32(v6);
  if (*(_BYTE *)(a1 + 64))
    v8 = v7;
  else
    v8 = v6;
  if (!(_DWORD)v8)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
    strcpy(__str.__r_.__value_.__l.__data_, "number of counters is zero");
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &__str);
    v19 = operator new();
    v57 = 260;
    v56[0] = &__str;
    *(_QWORD *)v19 = off_1E8192D50;
    *(_DWORD *)(v19 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v56, (_QWORD *)(v19 + 16));
    *a3 = v19;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v20 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(v5 + 16);
  v10 = bswap64(v9);
  if (*(_BYTE *)(a1 + 64))
    v9 = v10;
  v11 = v9 - *(_QWORD *)(a1 + 80);
  v55 = v11;
  if (v11 < 0)
  {
    v50[0] = "counter offset ";
    v51 = (const char *)&v55;
    v52 = 2819;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)" is negative";
    v54 = 770;
    llvm::Twine::str((llvm::Twine *)&__str, &v47);
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &v47);
    v21 = operator new();
    v57 = 260;
    v56[0] = &v47;
    *(_QWORD *)v21 = off_1E8192D50;
    *(_DWORD *)(v21 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v56, (_QWORD *)(v21 + 16));
    *a3 = v21;
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v20 = (void *)v47.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  if (v11 >= v12 - v13)
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"counter offset ";
    v47.__r_.__value_.__r.__words[2] = (std::string::size_type)&v55;
    v48 = 2819;
    v50[0] = &v47;
    v51 = " is greater than the maximum counter offset ";
    v52 = 770;
    v46 = ~v13 + v12;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v46;
    v18 = 2818;
    goto LABEL_18;
  }
  v15 = v12 - v13 - v11;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v17 = 8;
  if (v16)
    v17 = 1;
  v46 = v15 / v17;
  if (v15 / v17 < (unint64_t)v8)
  {
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"number of counters ";
    v47.__r_.__value_.__r.__words[2] = v8;
    v48 = 2051;
    v50[0] = &v47;
    v51 = " is greater than the maximum number of counters ";
    v52 = 770;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v46;
    v18 = 3074;
LABEL_18:
    v54 = v18;
    llvm::Twine::str((llvm::Twine *)&__str, &v49);
    *(_DWORD *)(a1 + 8) = 9;
    std::string::operator=((std::string *)(a1 + 16), &v49);
    v22 = operator new();
    v57 = 260;
    v56[0] = &v49;
    *(_QWORD *)v22 = off_1E8192D50;
    *(_DWORD *)(v22 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v56, (_QWORD *)(v22 + 16));
    *a3 = v22;
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v20 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_20:
    operator delete(v20);
    return;
  }
  v45 = a3;
  a2[1] = *a2;
  sub_1C4DB1D18((uint64_t)a2, v8);
  v23 = 0;
  do
  {
    v24 = *(_QWORD *)(a1 + 112) + v11;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
      v25 = 0;
    else
      v25 = 3;
    v26 = (v23 << v25);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    {
      v27 = *(_BYTE *)(v24 + v26) == 0;
      v29 = (unint64_t *)a2[1];
      v28 = (unint64_t)a2[2];
      if ((unint64_t)v29 < v28)
        goto LABEL_40;
      v30 = (unint64_t *)*a2;
      v31 = ((char *)v29 - *a2) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_63;
      v33 = v28 - (_QWORD)v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          goto LABEL_64;
        v35 = (char *)operator new(8 * v34);
      }
      else
      {
        v35 = 0;
      }
      v42 = &v35[8 * v31];
      *(_QWORD *)v42 = v27;
      v38 = v42 + 8;
      while (v29 != v30)
      {
        v43 = *--v29;
        *((_QWORD *)v42 - 1) = v43;
        v42 -= 8;
      }
    }
    else
    {
      v36 = bswap64(*(_QWORD *)(v24 + v26));
      if (*(_BYTE *)(a1 + 64))
        v27 = v36;
      else
        v27 = *(_QWORD *)(v24 + v26);
      v29 = (unint64_t *)a2[1];
      v37 = (unint64_t)a2[2];
      if ((unint64_t)v29 < v37)
      {
LABEL_40:
        *v29 = v27;
        v38 = (char *)(v29 + 1);
        goto LABEL_60;
      }
      v30 = (unint64_t *)*a2;
      v39 = ((char *)v29 - *a2) >> 3;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 61)
LABEL_63:
        abort();
      v41 = v37 - (_QWORD)v30;
      if (v41 >> 2 > v40)
        v40 = v41 >> 2;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v40;
      if (v34)
      {
        if (v34 >> 61)
LABEL_64:
          sub_1C4764EE4();
        v35 = (char *)operator new(8 * v34);
      }
      else
      {
        v35 = 0;
      }
      v42 = &v35[8 * v39];
      *(_QWORD *)v42 = v27;
      v38 = v42 + 8;
      while (v29 != v30)
      {
        v44 = *--v29;
        *((_QWORD *)v42 - 1) = v44;
        v42 -= 8;
      }
    }
    *a2 = v42;
    a2[1] = v38;
    a2[2] = &v35[8 * v34];
    if (v30)
      operator delete(v30);
LABEL_60:
    a2[1] = v38;
    ++v23;
  }
  while (v23 != (_DWORD)v8);
  sub_1C5A90BD4(a1, v45);
}

void llvm::RawInstrProfReader<unsigned long long>::readValueProfilingData(uint64_t a1@<X0>, llvm::InstrProfRecord *a2@<X1>, llvm::ValueProfData **a3@<X8>)
{
  void **v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  void **v11;
  char v12;
  llvm::ValueProfData *v13;
  llvm::ValueProfData *v14;
  llvm::ValueProfData *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (void **)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v6)
  {
    v11 = sub_1C62AFDC4(v6);
    MEMORY[0x1CAA32FC0](v11, 0x20C40A759441BLL);
  }
  v7 = 0;
  v8 = 0;
  *(_DWORD *)(a1 + 156) = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    if (*(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * v7 + 44))
      ++v8;
    v7 = 1;
    v9 = 0;
  }
  while ((v10 & 1) != 0);
  if (!v8)
  {
    sub_1C5A90BD4(a1, a3);
    return;
  }
  llvm::ValueProfData::getValueProfData(*(unsigned int **)(a1 + 144), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_BYTE *)(a1 + 64) == 0, (uint64_t)&v15);
  v12 = v16;
  if ((v16 & 1) != 0)
  {
    v13 = v15;
    *a3 = v15;
    if (v13)
      return;
    v14 = 0;
  }
  else
  {
    *a3 = 0;
    v14 = v15;
  }
  llvm::ValueProfData::deserializeTo(v14, a2, *(llvm::InstrProfSymtab **)(a1 + 40));
  *(_DWORD *)(a1 + 156) = *(_DWORD *)v14;
  sub_1C5A90BD4(a1, a3);
  if ((v12 & 1) != 0)
    (*(void (**)(llvm::ValueProfData *))(*(_QWORD *)v14 + 8))(v14);
  else
    operator delete(v14);
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::advanceData(uint64_t result)
{
  if (!*(_QWORD *)(result + 56))
    *(_QWORD *)(result + 80) -= 48;
  *(_QWORD *)(result + 96) += 48;
  *(_QWORD *)(result + 144) += *(unsigned int *)(result + 156);
  return result;
}

void llvm::RawInstrProfReader<unsigned long long>::printBinaryIds(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, uint64_t *a3@<X8>)
{
  void *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned __int8 *v11;
  unint64_t i;
  unsigned int v13;
  _BYTE *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  _QWORD v20[4];
  __int16 v21;

  if (*(_QWORD *)(a2 + 160))
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xCuLL)
    {
      qmemcpy(v5, "Binary IDs: \n", 13);
      *((_QWORD *)this + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(this, "Binary IDs: \n", 0xDuLL);
    }
    v6 = *(unint64_t **)(a2 + 168);
    v7 = (unint64_t *)((char *)v6 + *(_QWORD *)(a2 + 160));
    while (1)
    {
      if (v6 >= v7)
      {
        sub_1C5A90BD4(a2, a3);
        return;
      }
      if ((unint64_t)((char *)v7 - (char *)v6) <= 7)
      {
        v16 = operator new();
        v17 = v16;
        v15 = "not enough data to read binary id length";
        goto LABEL_24;
      }
      v8 = bswap64(*v6);
      if (*(_BYTE *)(a2 + 64))
        v9 = v8;
      else
        v9 = *v6;
      if ((char *)v7 - (char *)v6 < v9 + 8)
      {
        v16 = operator new();
        v17 = v16;
        v15 = "not enough data to read binary id data";
        goto LABEL_24;
      }
      v10 = v6 + 1;
      if ((unint64_t)(v6 + 1) > *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16))
        break;
      v11 = (unsigned __int8 *)(v6 + 1);
      for (i = v9; i; --i)
      {
        v20[0] = &unk_1E8145938;
        v13 = *v11++;
        v20[1] = "%02x";
        v20[2] = v13;
        llvm::raw_ostream::operator<<(this, (uint64_t)v20);
      }
      v14 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v14)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v14 = 10;
        ++*((_QWORD *)this + 4);
      }
      v6 = (unint64_t *)((char *)v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8));
      if ((unint64_t)v6 > *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16))
      {
        v16 = operator new();
        v17 = v16;
        v18 = 257;
        goto LABEL_25;
      }
    }
    v16 = operator new();
    v17 = v16;
    v15 = "binary id that is read is bigger than buffer size";
LABEL_24:
    v20[0] = v15;
    v18 = 259;
LABEL_25:
    v21 = v18;
    *(_QWORD *)v16 = off_1E8192D50;
    *(_DWORD *)(v16 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v16 + 16));
    *a3 = v17;
  }
  else
  {
    sub_1C5A90BD4(a2, a3);
  }
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::isIRLevelProfile(uint64_t a1)
{
  return *(_BYTE *)(a1 + 79) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::hasCSIRLevelProfile(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 1) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::instrEntryBBEnabled(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 2) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::useDebugInfoCorrelate(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 3) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::hasSingleByteCoverage(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 4) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::functionEntryOnly(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 79) >> 5) & 1;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getProfileKind(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 72) >> 54) & 8 | (*(_QWORD *)(a1 + 72) >> 55) & 2 | HIBYTE(*(_QWORD *)(a1 + 72)) & 0x74;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getSymtab(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void llvm::RawInstrProfReader<unsigned long long>::createSymtab(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t *i;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;

  llvm::readPGOFuncNameStrings(*(char **)(a1 + 128), *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128), (uint64_t)a2, (uint64_t *)&v23);
  if (v23)
  {
    sub_1C63084C0(a1, &v23, a3);
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  }
  else
  {
    v22 = a3;
    v7 = *(unint64_t **)(a1 + 96);
    for (i = *(unint64_t **)(a1 + 104); v7 != i; v7 += 6)
    {
      v8 = bswap64(v7[3]);
      if (*(_BYTE *)(a1 + 64))
        v9 = v8;
      else
        v9 = v7[3];
      if (v9)
      {
        v10 = *v7;
        v12 = (unint64_t *)a2[14];
        v11 = a2[15];
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)a2[13];
          v15 = ((char *)v12 - v14) >> 4;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60)
            abort();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 3 > v16)
            v16 = v17 >> 3;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            if (v18 >> 60)
              sub_1C4764EE4();
            v19 = (char *)operator new(16 * v18);
          }
          else
          {
            v19 = 0;
          }
          v20 = (unint64_t *)&v19[16 * v15];
          *v20 = v9;
          v20[1] = v10;
          v21 = v20;
          if (v12 != (unint64_t *)v14)
          {
            do
            {
              *((_OWORD *)v21 - 1) = *((_OWORD *)v12 - 1);
              v21 -= 2;
              v12 -= 2;
            }
            while (v12 != (unint64_t *)v14);
            v12 = (unint64_t *)a2[13];
          }
          v13 = v20 + 2;
          a2[13] = v21;
          a2[14] = v20 + 2;
          a2[15] = &v19[16 * v18];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v12 = v9;
          v12[1] = v10;
          v13 = v12 + 2;
        }
        a2[14] = v13;
        i = *(unint64_t **)(a1 + 104);
      }
    }
    sub_1C5A90BD4(a1, v22);
  }
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getCounterTypeSize(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    return 1;
  else
    return 8;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getNumPaddingBytes(uint64_t a1, int a2)
{
  return -a2 & 7;
}

BOOL llvm::RawInstrProfReader<unsigned long long>::getDataEndianness(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t llvm::RawInstrProfReader<unsigned long long>::getName(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = bswap64(a2);
  if (*(_BYTE *)(a1 + 64))
    v4 = v3;
  else
    v4 = a2;
  sub_1C546CB40(*(uint64_t **)(a1 + 40));
  v5 = *(_QWORD **)(v2 + 56);
  v6 = *(_QWORD **)(v2 + 64);
  if (v6 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[3 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 3;
      v7 += ~(v7 >> 1);
      if (v11 < v4)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v5 == v6 || *v5 != v4)
    return 0;
  else
    return v5[1];
}

uint64_t llvm::InstrProfLookupTrait::ComputeHash(uint64_t a1, int *a2, size_t a3)
{
  int v4[4];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = xmmword_1C85F4BB0;
  v6 = 0;
  llvm::MD5::update((int *)&v5, a2, a3);
  llvm::MD5::final((int *)&v5, v4);
  return *(_QWORD *)v4;
}

uint64_t llvm::InstrProfLookupTrait::ReadData(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  void *__p;
  char *v40;
  char *v41;
  unsigned __int8 *v42;

  v42 = a4;
  if ((a5 & 7) != 0)
    return 0;
  v7 = a4;
  v10 = a1;
  v11 = a1[1];
  v12 = *v10;
  while (v11 != v12)
    v11 = sub_1C62AFE18(v11 - 56);
  v10[1] = v12;
  __p = 0;
  v40 = 0;
  v41 = 0;
  if (a5 >= 1)
  {
    v13 = (unint64_t)&v7[a5];
    v33 = ((unint64_t)a5 >> 3) - 1;
    v34 = a2;
    v35 = a3;
    v36 = v10;
    v37 = &v7[a5];
    do
    {
      v14 = v7 + 8;
      if ((unint64_t)(v7 + 8) >= v13)
        goto LABEL_39;
      v15 = *(_QWORD *)v7;
      v42 = v7 + 8;
      if (*((_DWORD *)v10 + 7) == 1)
      {
        v16 = v33;
      }
      else
      {
        if ((unint64_t)(v7 + 16) > v13)
          goto LABEL_39;
        v16 = *(_QWORD *)v14;
        v42 = v7 + 16;
        v14 = v7 + 16;
      }
      if ((unint64_t)&v14[8 * v16] > v13)
      {
LABEL_39:
        v5 = 0;
        goto LABEL_41;
      }
      v38 = v15;
      v40 = (char *)__p;
      sub_1C4DB1D18((uint64_t)&__p, v16);
      if (v16)
      {
        v17 = 0;
        v18 = v40;
        do
        {
          v20 = *(_QWORD *)v14;
          v14 += 8;
          v19 = v20;
          if (v18 >= v41)
          {
            v22 = (char *)__p;
            v23 = (v18 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              abort();
            v25 = v41 - (_BYTE *)__p;
            if ((v41 - (_BYTE *)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              if (v26 >> 61)
                sub_1C4764EE4();
              v27 = (char *)operator new(8 * v26);
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(_QWORD *)v28 = v19;
            v21 = v28 + 8;
            while (v18 != v22)
            {
              v29 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *((_QWORD *)v28 - 1) = v29;
              v28 -= 8;
            }
            __p = v28;
            v40 = v21;
            v41 = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v18 = v19;
            v21 = v18 + 8;
          }
          v40 = v21;
          ++v17;
          v18 = v21;
        }
        while (v17 != v16);
      }
      v42 = v14;
      v10 = v36;
      sub_1C6308658(v36, v34, v35, v38, (uint64_t)&__p);
      if (*((_DWORD *)v36 + 7) > 2u)
      {
        if (!llvm::InstrProfLookupTrait::readValueProfilingData((llvm::InstrProfLookupTrait *)v36, (unsigned int **)&v42, v37))
        {
          v32 = *v36;
          for (i = v36[1]; i != v32; i = sub_1C62AFE18(i - 56))
            ;
          v5 = 0;
          v36[1] = v32;
          goto LABEL_41;
        }
        v14 = v42;
      }
      v7 = v14;
      v13 = (unint64_t)v37;
    }
    while (v14 < v37);
  }
  v5 = *v10;
LABEL_41:
  if (__p)
  {
    v40 = (char *)__p;
    operator delete(__p);
  }
  return v5;
}

char *llvm::IndexedInstrProfReader::readSummary(uint64_t a1, int a2, char *a3, int a4)
{
  char *v4;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  _DWORD *v15;
  _OWORD *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v45;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = a3;
  if (a2 < 4)
  {
    v34 = operator new(0x40uLL);
    *v34 = xmmword_1C86680E4;
    v34[1] = unk_1C86680F4;
    v34[2] = xmmword_1C8668104;
    v34[3] = unk_1C8668114;
    v49 = v50;
    v50[0] = 0;
    v50[1] = 0;
    v50[2] = v34;
    v50[3] = v34 + 4;
    v50[4] = v34 + 4;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    llvm::InstrProfSummaryBuilder::getSummary((llvm::InstrProfSummaryBuilder *)&v49, &v48);
    v37 = *(_QWORD *)(a1 + 80);
    v36 = (uint64_t *)(a1 + 80);
    v35 = v37;
    v38 = v48;
    v48 = 0;
    *v36 = v38;
    if (v37)
    {
      sub_1C4E5DDC4((uint64_t)v36, v35);
      v39 = v48;
      v48 = 0;
      if (v39)
        sub_1C4E5DDC4((uint64_t)&v48, v39);
    }
    sub_1C6308954((uint64_t)&v49);
  }
  else
  {
    v6 = (24 * *((_DWORD *)a3 + 2) + 8 * *(_DWORD *)a3 + 16);
    v7 = operator new(v6);
    bzero(v7, v6);
    if ((_DWORD)v6)
    {
      v8 = v6 >> 3;
      if (v6 >> 3 <= 1)
        v8 = 1;
      memcpy(v7, v4, 8 * v8);
    }
    v45 = v6;
    v9 = v7[1];
    v47 = v4;
    if (v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = &v7[3 * v10 + 2 + *v7];
        v18 = *v15;
        v16 = v15 + 2;
        v17 = v18;
        if (v14 >= v12)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3) + 1;
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v12 - v13) >> 3) > v19)
            v19 = 0x5555555555555556 * ((v12 - v13) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v20 = 3 * v19;
          v21 = (char *)operator new(24 * v19);
          v22 = &v21[8 * ((v14 - v13) >> 3)];
          *(_DWORD *)v22 = v17;
          *(_OWORD *)(v22 + 8) = *v16;
          if (v14 == v13)
          {
            v24 = &v21[8 * ((v14 - v13) >> 3)];
          }
          else
          {
            v23 = &v21[8 * ((v14 - v13) >> 3)];
            do
            {
              v24 = v23 - 24;
              v25 = *(_OWORD *)(v14 - 24);
              *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
              *(_OWORD *)(v23 - 24) = v25;
              v14 -= 24;
              v23 -= 24;
            }
            while (v14 != v13);
          }
          v12 = &v21[8 * v20];
          v14 = v22 + 24;
          if (v13)
          {
            operator delete(v13);
            v9 = v7[1];
          }
          v13 = v24;
        }
        else
        {
          *(_DWORD *)v14 = v17;
          *(_OWORD *)(v14 + 8) = *v16;
          v14 += 24;
        }
        v10 = ++v11;
      }
      while (v9 > v11);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    if (a4)
      v26 = 88;
    else
      v26 = 80;
    if (a4)
      v27 = a1 + 88;
    else
      v27 = a1 + 80;
    v28 = v7[6];
    v40 = v27;
    v41 = v7[7];
    v30 = v7[4];
    v29 = v7[5];
    v42 = v7[3];
    v43 = v7[2];
    v31 = operator new();
    *(_DWORD *)v31 = a4;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 8) = 0;
    sub_1C4D6CDA0((_QWORD *)(v31 + 8), v13, v14, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3));
    *(_QWORD *)(v31 + 32) = v41;
    *(_QWORD *)(v31 + 40) = v29;
    *(_QWORD *)(v31 + 48) = v28;
    *(_QWORD *)(v31 + 56) = v30;
    *(_DWORD *)(v31 + 64) = v42;
    *(_DWORD *)(v31 + 68) = v43;
    *(_BYTE *)(v31 + 72) = 0;
    *(_QWORD *)(v31 + 80) = 0;
    v32 = *(_QWORD *)(a1 + v26);
    *(_QWORD *)(a1 + v26) = v31;
    if (v32)
      sub_1C4E5DDC4(v40, v32);
    v4 = &v47[v45];
    if (v13)
      operator delete(v13);
    operator delete(v7);
  }
  return v4;
}

void llvm::IndexedInstrProfReader::readHeader(llvm::IndexedInstrProfReader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  llvm::IndexedInstrProf::Header *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *Summary;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::string::size_type v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  std::string *p_str;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[23];
  uint64_t v49;
  std::string __str;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 6);
  v5 = *(llvm::IndexedInstrProf::Header **)(v4 + 8);
  if ((uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v5) <= 23)
  {
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    v6 = 8;
    goto LABEL_3;
  }
  llvm::IndexedInstrProf::Header::readFromBuffer(v5, (uint64_t)&v52);
  if ((v57 & 1) != 0)
  {
    v11 = v52;
    v52 = 0;
    *a2 = v11;
    return;
  }
  v8 = v53;
  v9 = 40;
  if ((v53 & 0xFFFFFFFFFFFFFFLL) == 8)
    v9 = 48;
  Summary = llvm::IndexedInstrProfReader::readSummary((uint64_t)this, v53, (char *)v5 + v9, 0);
  if ((v8 & 0x200000000000000) != 0)
    Summary = llvm::IndexedInstrProfReader::readSummary((uint64_t)this, v8, Summary, 1);
  if (v54)
  {
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    v6 = 6;
LABEL_3:
    *((_DWORD *)this + 2) = v6;
    std::string::operator=((std::string *)((char *)this + 16), &__str);
    v7 = operator new();
    LOWORD(v45) = 260;
    p_str = &__str;
    *(_QWORD *)v7 = off_1E8192D50;
    *(_DWORD *)(v7 + 8) = v6;
    llvm::Twine::str((llvm::Twine *)&p_str, (_QWORD *)(v7 + 16));
    *a2 = v7;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  v12 = (uint64_t *)((char *)v5 + v55);
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E81930E0;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = v8;
  p_str = 0;
  v42 = 0;
  v43 = 0;
  LODWORD(v44) = 0;
  HIDWORD(v44) = v8;
  v45 = 1;
  v14 = v12 + 2;
  v16 = *v12;
  v15 = v12[1];
  v17 = operator new();
  *(_QWORD *)v17 = v16;
  *(_QWORD *)(v17 + 8) = v15;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v5;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  v18 = v44;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = v18;
  *(_DWORD *)(v17 + 64) = v45;
  *(_QWORD *)(v17 + 72) = Summary;
  v19 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v17;
  if (v19)
  {
    __str.__r_.__value_.__r.__words[0] = v19 + 32;
    sub_1C5A9725C((void ***)&__str);
    MEMORY[0x1CAA32FC0](v19, 0x1070C4099022D8ELL);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_str;
  sub_1C5A9725C((void ***)&__str);
  v20 = *(_QWORD *)(v13 + 8);
  v21 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v20 + 72);
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = v21;
  *(_QWORD *)(v13 + 40) = v20 + 32;
  if ((v8 & 0xFFFFFFFFFFFFF8) != 0 && (v8 & 0x4000000000000000) != 0)
  {
    v22 = *(_QWORD *)((char *)v5 + v56);
    v23 = *(_QWORD *)((char *)v5 + v56 + 8);
    v24 = *(_QWORD *)((char *)v5 + v56 + 16);
    v40 = (unint64_t *)((char *)v5 + v56 + 24);
    llvm::memprof::readMemProfSchema(&v40, (uint64_t)&__str);
    if ((v51 & 1) != 0)
    {
      *a2 = __str.__r_.__value_.__r.__words[0];
LABEL_20:
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return;
    }
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)this + 96, (uint64_t)&__str);
    v25 = (uint64_t *)((char *)v5 + v22);
    v26 = v40;
    p_str = (std::string *)&v43;
    v42 = 0x1400000000;
    if (*((_DWORD *)this + 26))
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&p_str, (uint64_t)this + 96);
    v46 = v48;
    v47 = 0x100000000;
    v48[21] = &v49;
    v48[22] = 0x100000000;
    v27 = sub_1C63086B4(v25, (uint64_t)v26, (uint64_t)v5, (uint64_t)&p_str);
    v28 = *((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = v27;
    if (v28)
    {
      sub_1C63089A0(v28 + 32);
      MEMORY[0x1CAA32FC0](v28, 0x10D0C40A40D4147);
    }
    sub_1C63089A0((uint64_t)&p_str);
    v29 = *(_QWORD *)((char *)v5 + v24);
    v30 = *(_QWORD *)((char *)v5 + v24 + 8);
    v31 = (_QWORD *)operator new();
    *v31 = v29;
    v31[1] = v30;
    v31[2] = (char *)v5 + v24 + 16;
    v31[3] = v5;
    v31[5] = (char *)v5 + v23;
    v32 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = v31;
    if (v32)
      MEMORY[0x1CAA32FC0](v32, 0x1050C40D4AB5518);
    v33 = __str.__r_.__value_.__r.__words[0];
    if ((v51 & 1) != 0)
    {
      __str.__r_.__value_.__r.__words[0] = 0;
      if (v33)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
    }
    else if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[2])
    {
      free(__str.__r_.__value_.__l.__data_);
    }
  }
  if (*((_QWORD *)this + 7))
  {
    v37 = operator new();
    v38 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    *(_QWORD *)v37 = &off_1E8193168;
    *(_QWORD *)(v37 + 8) = v38;
    llvm::ItaniumManglingCanonicalizer::ItaniumManglingCanonicalizer((llvm::ItaniumManglingCanonicalizer *)(v37 + 16));
    *(_QWORD *)(v37 + 24) = 0;
    *(_QWORD *)(v37 + 32) = 0;
    *(_DWORD *)(v37 + 40) = 0;
    *(_QWORD *)(v37 + 48) = v13;
    v39 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v37;
    if (v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v37 = *((_QWORD *)this + 9);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    if (*a2)
      goto LABEL_20;
  }
  else
  {
    v34 = (_QWORD *)operator new();
    *v34 = &off_1E8193198;
    v34[1] = v13;
    v35 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v36 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v13;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  sub_1C5A90BD4((uint64_t)this, a2);
}

uint64_t llvm::IndexedInstrProfReader::getSymtab(llvm::IndexedInstrProfReader *this)
{
  uint64_t v1;
  _QWORD *v3;
  int v5;
  _QWORD *v6;
  std::string __p;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
  {
    v1 = operator new();
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_QWORD *)(v1 + 128) = 0;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_DWORD *)(v1 + 44) = 8;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 113) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    (*(void (**)(_QWORD **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 112))(&v10, *((_QWORD *)this + 8), v1);
    if (v10)
    {
      v8 = v10;
      v10 = 0;
      v5 = sub_1C624ABD8(&v8);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_1C6308424((uint64_t *)&v9, (uint64_t)this, v5, &__p);
      v11 = v9;
      sub_1C4D62BD4(&v11, &v12);
      if (v11)
        (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v1;
    if (v3)
    {
      v6 = sub_1C624BA64(v3);
      MEMORY[0x1CAA32FC0](v6, 0x10F0C40767211C4);
      return *((_QWORD *)this + 5);
    }
  }
  return v1;
}

uint64_t llvm::IndexedInstrProfReader::getInstrProfRecord@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  std::string __str;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *p_str;
  __int16 v16;

  v13 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 72) + 24))(&v12);
  v6 = v12;
  if (v12)
  {
    v12 = 0;
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else if (v14)
  {
    v7 = v13;
    v8 = 56 * v14;
    while (*(_QWORD *)(v7 + 48) != a2)
    {
      v7 += 56;
      v8 -= 56;
      if (!v8)
        goto LABEL_7;
    }
    *(_BYTE *)(a3 + 32) &= ~1u;
    sub_1C6308FA4((_QWORD *)a3, v7);
  }
  else
  {
LABEL_7:
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)(a1 + 8) = 15;
    std::string::operator=((std::string *)(a1 + 16), &__str);
    v9 = operator new();
    v16 = 260;
    p_str = &__str;
    *(_QWORD *)v9 = off_1E8192D50;
    *(_DWORD *)(v9 + 8) = 15;
    llvm::Twine::str((llvm::Twine *)&p_str, (_QWORD *)(v9 + 16));
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v9;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

void llvm::IndexedInstrProfReader::getMemProfRecord(llvm::IndexedInstrProfReader *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[3];
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t *v30;
  __int16 v31;
  void *v32;
  unsigned int v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v27 = a2;
  v4 = (_QWORD *)*((_QWORD *)this + 34);
  if (!v4)
  {
    v13 = operator new();
    v14 = v13;
    v28 = "no memprof data available in profile";
    v31 = 259;
    *(_QWORD *)v13 = off_1E8192D50;
    v15 = 14;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v4[2] + 8 * ((*v4 - 1) & a2));
  if (!v5 || (v6 = (_WORD *)(v4[3] + v5), v7 = (unsigned __int16)*v6, !*v6))
  {
LABEL_8:
    v28 = "memprof record not found for hash ";
    v30 = &v27;
    v31 = 3075;
    v13 = operator new();
    v14 = v13;
    *(_QWORD *)v13 = off_1E8192D50;
    v15 = 15;
LABEL_10:
    *(_DWORD *)(v13 + 8) = v15;
    llvm::Twine::str((llvm::Twine *)&v28, (_QWORD *)(v13 + 16));
    *(_BYTE *)(a3 + 264) |= 1u;
    *(_QWORD *)a3 = v14;
    return;
  }
  v8 = (uint64_t *)(v6 + 1);
  while (1)
  {
    v10 = *v8;
    v9 = v8[1];
    v11 = v8[2];
    v12 = v8 + 3;
    if (v10 == a2 && *v12 == a2)
      break;
    v8 = (_QWORD *)((char *)v12 + v11 + v9);
    if (!--v7)
      goto LABEL_8;
  }
  v26 = 0;
  v25 = 0;
  v24[0] = this;
  v24[1] = &v26;
  v24[2] = &v25;
  llvm::memprof::IndexedMemProfRecord::deserialize((uint64_t)(v4 + 4), (_QWORD *)((char *)v12 + v9), (uint64_t)&v28);
  v16 = (uint64_t)(v4 + 26);
  sub_1C5A97D14((uint64_t)(v4 + 26), (uint64_t)&v28);
  sub_1C5A98068((uint64_t)(v4 + 49), (uint64_t)&v32);
  v17 = (char *)v32;
  if (v33)
  {
    v18 = (unint64_t)v33 << 6;
    do
    {
      v19 = *(char **)&v17[v18 - 64];
      if (&v17[v18 - 48] != v19)
        free(v19);
      v18 -= 64;
    }
    while (v18);
    v17 = (char *)v32;
  }
  if (v17 != (char *)v34)
    free(v17);
  sub_1C63089E8(&v28);
  sub_1C5A9602C(&v28, v16, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))sub_1C5A98314, (uint64_t)v24);
  if (v25)
  {
    v22[0] = "memprof frame not found for frame id ";
    v22[2] = &v26;
    v23 = 3075;
    v20 = operator new();
    *(_QWORD *)v20 = off_1E8192D50;
    *(_DWORD *)(v20 + 8) = 15;
    llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v20 + 16));
    *(_BYTE *)(a3 + 264) |= 1u;
    *(_QWORD *)a3 = v20;
  }
  else
  {
    *(_BYTE *)(a3 + 264) &= ~1u;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x100000000;
    if (v29)
      sub_1C5A983B8(a3, (uint64_t)&v28);
    *(_QWORD *)(a3 + 184) = a3 + 200;
    v21 = a3 + 184;
    *(_QWORD *)(v21 + 8) = 0x100000000;
    if (v33)
      sub_1C5A986E8(v21, (uint64_t)&v32);
  }
  sub_1C61BE804((char **)&v32);
  sub_1C63089E8(&v28);
}

char *llvm::IndexedInstrProfReader::getFunctionCounts@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char **a3@<X4>, uint64_t *a4@<X8>)
{
  char *result;
  _QWORD *v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::IndexedInstrProfReader::getInstrProfRecord(a1, a2, (uint64_t)&v9);
  if ((v11 & 1) != 0 && (v8 = v9, v9 = 0, v8))
  {
    sub_1C63084C0(a1, &v8, a4);
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  else
  {
    if (&v9 != a3)
      sub_1C4DE4490(a3, v9, v10, (v10 - v9) >> 3);
    sub_1C5A90BD4(a1, a4);
  }
  if ((v11 & 1) == 0)
    return (char *)sub_1C62AFE18((uint64_t)&v9);
  result = v9;
  v9 = 0;
  if (result)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::InstrProfReader::accumulateCounts(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  _OWORD v8[4];
  uint64_t v9;
  _OWORD v10[3];
  char v11;

  v9 = a1;
  memset(v10, 0, sizeof(v10));
  sub_1C5A96EA0(&v9);
  memset(v8, 0, sizeof(v8));
  if (v9)
  {
    v6 = 0;
    do
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)
        || a3 == (v11 & 0x10) >> 4)
      {
        llvm::InstrProfRecord::accumulateCounts((uint64_t)v10, (uint64_t)a2);
        ++v6;
      }
      sub_1C5A96EA0(&v9);
    }
    while (v9);
  }
  else
  {
    v6 = 0;
  }
  sub_1C62AFE18((uint64_t)v8 + 8);
  result = sub_1C62AFE18((uint64_t)v10);
  *a2 = v6;
  return result;
}

uint64_t sub_1C5A95C7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E8192F78;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1C5A96F64((uint64_t)a1);
}

void sub_1C5A95CC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E8192F78;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C5A96F64((uint64_t)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A95D18(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 120) >> 1) & 1;
}

uint64_t sub_1C5A95D24(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 120) >> 3) & 1;
}

uint64_t sub_1C5A95D30(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 120) >> 2) & 1;
}

uint64_t sub_1C5A95D3C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 120) >> 4) & 1;
}

uint64_t sub_1C5A95D48(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 120) >> 5) & 1;
}

uint64_t sub_1C5A95D54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1C5A95D5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1C5A95D64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E8192E88;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1C5A96F64((uint64_t)a1);
}

void sub_1C5A95DAC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E8192E88;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C5A96F64((uint64_t)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A95E08(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E8192F00;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1C5A96F64((uint64_t)a1);
}

void sub_1C5A95E50(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E8192F00;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C5A96F64((uint64_t)a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD **sub_1C5A95EAC@<X0>(_QWORD **result@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  _QWORD *v4;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD **v11;
  char *v12;
  char *v13;
  char *v14;

  v4 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      v6 = (char **)v4[1];
      v7 = (char **)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v13 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::InstrProfError::ID))
          {
            v10 = *a2;
            *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
            std::string::operator=((std::string *)(v10 + 16), (const std::string *)(v9 + 16));
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
            v9 = 0;
          }
          v12 = v9;
          sub_1C6174794(&v13, &v12, &v14);
          v8 = v14;
          *a3 = v14;
          v14 = 0;
          if (v12)
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          if (v13)
            (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
          ++v6;
        }
        while (v6 != v7);
      }
      return (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      v11 = (_QWORD **)v4;
      sub_1C63088CC(a3, &v11, a2);
      result = v11;
      if (v11)
        return (_QWORD **)((uint64_t (*)(_QWORD **))(*v11)[1])(v11);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

_QWORD *sub_1C5A9602C(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  _QWORD v21[3];
  void (*v22)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v22 = a3;
  v23 = a4;
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  a1[23] = a1 + 25;
  v6 = (uint64_t)(a1 + 23);
  a1[24] = 0x100000000;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 168 * v7;
    do
    {
      sub_1C5A961B4((uint64_t)a1, v8, (uint64_t)&v22);
      v8 += 168;
      v9 -= 168;
    }
    while (v9);
  }
  v10 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(a2 + 184);
    v12 = v11 + (v10 << 6);
    do
    {
      v13 = *(uint64_t **)v11;
      v14 = *(unsigned int *)(v11 + 8);
      v24 = v26;
      v25 = 0x200000000;
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        do
        {
          v16 = *v13++;
          v22(v21, v23, v16);
          v17 = sub_1C5A967AC((uint64_t)&v24, (unint64_t)v21, 1);
          v18 = v25;
          v19 = (char *)v24 + 24 * v25;
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *((_QWORD *)v19 + 1) = *(_QWORD *)(v17 + 8);
          v19[16] = *(_BYTE *)(v17 + 16);
          LODWORD(v25) = v18 + 1;
          v15 -= 8;
        }
        while (v15);
      }
      sub_1C5A9621C(v6, (unint64_t)&v24);
      if (v24 != v26)
        free(v24);
      v11 += 64;
    }
    while (v11 != v12);
  }
  return a1;
}

uint64_t sub_1C5A961B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C5A962C0(a1, a2, a3);
  sub_1C5A96698(*(_QWORD *)a1 + 168 * v4, a2, *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))a3, *(_QWORD *)(a3 + 8));
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 168 * v5 - 168;
}

_QWORD *sub_1C5A9621C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + (v4 << 6);
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C5A96814(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C5A96814(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = (_QWORD *)(v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  *result = result + 2;
  result[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C5A96928((uint64_t)result, (uint64_t *)a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5A962C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  unsigned int v8;
  unint64_t v10;

  v10 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 168, &v10);
  sub_1C5A96698((uint64_t)v6 + 168 * *(unsigned int *)(a1 + 8), a2, *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))a3, *(_QWORD *)(a3 + 8));
  sub_1C5A96368(a1, (uint64_t)v6);
  v7 = v10;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  return (uint64_t)v6 + 168 * v8 - 168;
}

void sub_1C5A96368(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 168 * v2;
    do
    {
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 0x200000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C5A96440(a2, v5);
      v7 = *(_OWORD *)(v5 + 64);
      v8 = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(a2 + 96) = v8;
      *(_OWORD *)(a2 + 64) = v7;
      v9 = *(_OWORD *)(v5 + 112);
      v10 = *(_OWORD *)(v5 + 128);
      v11 = *(_OWORD *)(v5 + 144);
      *(_QWORD *)(a2 + 160) = *(_QWORD *)(v5 + 160);
      *(_OWORD *)(a2 + 128) = v10;
      *(_OWORD *)(a2 + 144) = v11;
      *(_OWORD *)(a2 + 112) = v9;
      v5 += 168;
      a2 += 168;
      v6 -= 168;
    }
    while (v6);
    v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)a1;
      v14 = 168 * v12;
      do
      {
        v15 = *(void **)(v13 + v14 - 168);
        if ((void *)(v13 + v14 - 152) != v15)
          free(v15);
        v14 -= 168;
      }
      while (v14);
    }
  }
}

uint64_t sub_1C5A96440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        if ((_DWORD)v5)
        {
          v9 = *(_QWORD *)a1;
          v10 = v4 + 24 * v5;
          do
          {
            *(_QWORD *)v9 = *(_QWORD *)v4;
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v4 + 8);
            *(_BYTE *)(v9 + 16) = *(_BYTE *)(v4 + 16);
            v4 += 24;
            v9 += 24;
          }
          while (v4 != v10);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v5)
        {
          v8 = *(_QWORD *)a1;
          if ((_DWORD)v6)
          {
            v11 = 0;
            do
            {
              v12 = v8 + v11;
              v13 = v4 + v11;
              *(_QWORD *)v12 = *(_QWORD *)(v4 + v11);
              *(_QWORD *)(v12 + 8) = *(_QWORD *)(v4 + v11 + 8);
              *(_BYTE *)(v12 + 16) = *(_BYTE *)(v4 + v11 + 16);
              v11 += 24;
            }
            while (v13 + 24 != v4 + 24 * v6);
          }
          else
          {
            v6 = 0;
          }
          v7 = v5;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          sub_1C5A965F8(a1, v5);
          v6 = 0;
          v4 = *(_QWORD *)a2;
          v7 = *(unsigned int *)(a2 + 8);
          v8 = *(_QWORD *)a1;
        }
        if (v6 != v7)
        {
          v14 = 3 * v6;
          v15 = v4 + 24 * v7;
          v16 = v8 + 8 * v14;
          v17 = v4 + 8 * v14;
          do
          {
            *(_QWORD *)v16 = *(_QWORD *)v17;
            *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
            *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
            v17 += 24;
            v16 += 24;
          }
          while (v17 != v15);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1C5A965AC(a1, a2);
    }
  }
  return a1;
}

double sub_1C5A965AC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  double result;

  v5 = (void *)(a1 + 16);
  v4 = *(void **)a1;
  if (v4 != v5)
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void sub_1C5A965F8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  int v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  unint64_t v10;

  v10 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v10);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[24 * v5];
    v7 = v3;
    v8 = *(char **)a1;
    do
    {
      *v7 = *(_QWORD *)v8;
      v7[1] = *((_QWORD *)v8 + 1);
      *((_BYTE *)v7 + 16) = v8[16];
      v8 += 24;
      v7 += 3;
    }
    while (v8 != v6);
  }
  v9 = v10;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v9;
}

uint64_t sub_1C5A96698(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v22[3];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_DWORD *)(a1 + 64) = 0;
  v6 = a1 + 64;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v10 = *(uint64_t **)a2;
    v11 = 8 * v7;
    do
    {
      v12 = *v10++;
      a3(v22, a4, v12);
      v13 = sub_1C5A967AC(a1, (unint64_t)v22, 1);
      v14 = *(_DWORD *)(a1 + 8);
      v15 = *(_QWORD *)a1 + 24 * v14;
      *(_QWORD *)v15 = *(_QWORD *)v13;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v13 + 16);
      *(_DWORD *)(a1 + 8) = v14 + 1;
      v11 -= 8;
    }
    while (v11);
  }
  v16 = *(_OWORD *)(a2 + 64);
  v17 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 32) = v17;
  *(_OWORD *)v6 = v16;
  v18 = *(_OWORD *)(a2 + 112);
  v19 = *(_OWORD *)(a2 + 128);
  v20 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(v6 + 64) = v19;
  *(_OWORD *)(v6 + 80) = v20;
  *(_OWORD *)(v6 + 48) = v18;
  return a1;
}

unint64_t sub_1C5A967AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C5A965F8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C5A965F8(a1, v5);
    }
  }
  return a2;
}

void sub_1C5A96814(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C5A96880(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C5A96880(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = v2 << 6;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x200000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C5A96440((uint64_t)a2, v5);
      v5 += 64;
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = v7 << 6;
      do
      {
        v10 = *(void **)(v8 + v9 - 64);
        if ((void *)(v8 + v9 - 48) != v10)
          free(v10);
        v9 -= 64;
      }
      while (v9);
    }
  }
}

uint64_t sub_1C5A96928(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *a2;
        v10 = *a2 + 24 * v4;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v9;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
          *(_BYTE *)(v11 + 16) = *(_BYTE *)(v9 + 16);
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        v6 = *a2;
        v8 = *(_QWORD *)a1;
        if ((_DWORD)v5)
        {
          v12 = 0;
          do
          {
            v13 = v8 + v12;
            v14 = v6 + v12;
            *(_QWORD *)v13 = *(_QWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 8) = *(_QWORD *)(v6 + v12 + 8);
            *(_BYTE *)(v13 + 16) = *(_BYTE *)(v6 + v12 + 16);
            v12 += 24;
          }
          while (v14 + 24 != v6 + 24 * v5);
        }
        else
        {
          v5 = 0;
        }
        v7 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C5A965F8(a1, v4);
        v5 = 0;
        v6 = *a2;
        v7 = *((unsigned int *)a2 + 2);
        v8 = *(_QWORD *)a1;
      }
      if (v5 != v7)
      {
        v15 = 3 * v5;
        v16 = v6 + 24 * v7;
        v17 = v8 + 8 * v15;
        v18 = v6 + 8 * v15;
        do
        {
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
          *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
          v18 += 24;
          v17 += 24;
        }
        while (v18 != v16);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_QWORD *sub_1C5A96A78(_QWORD *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1C5A96AEC(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1C5A96AEC(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
  return a1;
}

_QWORD *sub_1C5A96AEC(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = sub_1C6308B88(result, a2);
      a2 += 24;
      result = v8 + 3;
    }
    v6[1] = result;
  }
  return result;
}

_QWORD *sub_1C5A96B6C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = a2;
  v7 = result;
  v8 = (_QWORD *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a4)
  {
    sub_1C6308C10((void **)result);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_32;
    v17 = 0x5555555555555556 * ((uint64_t)(v7[2] - *v7) >> 3);
    if (v17 <= a4)
      v17 = a4;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[2] - *v7) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v17;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_32:
      abort();
    v19 = 3 * v18;
    result = operator new(24 * v18);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v19];
    while (v6 != a3)
    {
      v20 = sub_1C6308B88(result, v6);
      v6 += 24;
      result = v20 + 3;
    }
    v7[1] = result;
  }
  else
  {
    v9 = (_QWORD *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * (v9 - v8) >= a4)
    {
      if (a2 == a3)
      {
        v16 = (_QWORD *)*result;
      }
      else
      {
        v15 = a2;
        v16 = (_QWORD *)*result;
        do
        {
          if ((_QWORD *)v6 != v8)
            sub_1C5A96D70(v8, *(_QWORD *)(v6 + 8), v15);
          v6 += 24;
          v8 += 3;
          v16 += 3;
          v15 += 24;
        }
        while (v6 != a3);
      }
      return sub_1C58C9B90(v7, v16);
    }
    else
    {
      v10 = a2 + 8 * (v9 - v8);
      if (v9 != v8)
      {
        v11 = 8 * (v9 - v8);
        v12 = a2;
        do
        {
          if ((_QWORD *)v6 != v8)
            result = sub_1C5A96D70(v8, *(_QWORD *)(v6 + 8), v12);
          v6 += 24;
          v8 += 3;
          v12 += 24;
          v11 -= 24;
        }
        while (v11);
        v8 = (_QWORD *)v7[1];
      }
      v13 = v8;
      if (v10 != a3)
      {
        v13 = v8;
        result = v8;
        do
        {
          v14 = sub_1C6308B88(result, v10);
          v10 += 24;
          result = v14 + 3;
          v13 += 3;
        }
        while (v10 != a3);
      }
      v7[1] = v13;
    }
  }
  return result;
}

_OWORD *sub_1C5A96D70(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *result;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;

  v4 = a2;
  result = (_OWORD *)a1[1];
  if (a2 != a3 && result != (_OWORD *)a1)
  {
    do
    {
      result[1] = *(_OWORD *)(v4 + 16);
      v4 = *(_QWORD *)(v4 + 8);
      result = (_OWORD *)*((_QWORD *)result + 1);
    }
    while (v4 != a3 && result != (_OWORD *)a1);
  }
  if (result == (_OWORD *)a1)
  {
    if (v4 != a3)
    {
      result = operator new(0x20uLL);
      v11 = result;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      result[1] = *(_OWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 8);
      v13 = 1;
      if (v12 != a3)
      {
        v14 = result;
        do
        {
          result = operator new(0x20uLL);
          *(_QWORD *)result = v14;
          *((_QWORD *)result + 1) = 0;
          result[1] = *(_OWORD *)(v12 + 16);
          *((_QWORD *)v14 + 1) = result;
          ++v13;
          v12 = *(_QWORD *)(v12 + 8);
          v14 = result;
        }
        while (v12 != a3);
      }
      v15 = *a1;
      *(_QWORD *)(v15 + 8) = v11;
      *v11 = v15;
      *a1 = result;
      *((_QWORD *)result + 1) = a1;
      a1[2] += v13;
    }
  }
  else
  {
    v8 = *a1;
    v9 = *(_QWORD *)result;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    do
    {
      v10 = (_OWORD *)*((_QWORD *)result + 1);
      --a1[2];
      operator delete(result);
      result = v10;
    }
    while (v10 != (_OWORD *)a1);
  }
  return result;
}

_QWORD *sub_1C5A96EA0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  __n128 v4[4];
  _QWORD *v5;
  _QWORD *v6;

  v2 = (uint64_t)(a1 + 1);
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(&v6, *a1, a1 + 1);
  if (v6)
  {
    v5 = v6;
    v6 = 0;
    sub_1C624ABD8(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    memset(v4, 0, sizeof(v4));
    *a1 = 0;
    sub_1C58C9490(v2, (__n128 *)&v4[0].n128_i8[8]);
    *(__n128 *)(a1 + 5) = *(__n128 *)((char *)&v4[2] + 8);
    a1[7] = v4[3].n128_u64[1];
    sub_1C62AFE18((uint64_t)&v4[0].n128_i64[1]);
    result = v6;
    if (v6)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t sub_1C5A96F64(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v4;

  *(_QWORD *)a1 = off_1E8193068;
  v2 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    v4 = sub_1C624BA64(v2);
    MEMORY[0x1CAA32FC0](v4, 0x10F0C40767211C4);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C5A96FC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E8192FF0;
  v2 = a1[35];
  a1[35] = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x1050C40D4AB5518);
  v3 = a1[34];
  a1[34] = 0;
  if (v3)
  {
    sub_1C63089A0(v3 + 32);
    MEMORY[0x1CAA32FC0](v3, 0x10D0C40A40D4147);
  }
  v4 = (_QWORD *)a1[12];
  if (v4 != a1 + 14)
    free(v4);
  v5 = a1[11];
  a1[11] = 0;
  if (v5)
    sub_1C4E5DDC4((uint64_t)(a1 + 11), v5);
  v6 = a1[10];
  a1[10] = 0;
  if (v6)
    sub_1C4E5DDC4((uint64_t)(a1 + 10), v6);
  v7 = a1[9];
  a1[9] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[8];
  a1[8] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[7];
  a1[7] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[6];
  a1[6] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return sub_1C5A96F64((uint64_t)a1);
}

uint64_t sub_1C5A970E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t i;
  char *v20;
  void *__p;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v6;
  v26 = a1 + 2;
  if (v8 > 0x492492492492492)
    sub_1C4764EE4();
  v13 = 56 * v8;
  v14 = (char *)operator new(56 * v8);
  v15 = &v14[56 * v5];
  __p = v14;
  v23 = v15;
  v16 = *((_QWORD *)a5 + 2);
  v17 = *a5;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  *(_OWORD *)v15 = v17;
  *((_QWORD *)v15 + 2) = v16;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = a3;
  *((_QWORD *)v15 + 6) = a4;
  v24 = (uint64_t)(v15 + 56);
  v25 = &v14[v13];
  sub_1C6308C48(a1, &__p);
  v18 = a1[1];
  v20 = v23;
  for (i = v24; (char *)i != v20; i = sub_1C62AFE18(i - 56))
    ;
  if (__p)
    operator delete(__p);
  return v18;
}

void sub_1C5A97238(_QWORD *a1)
{
  sub_1C5A972CC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A9725C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C62AFE18(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C5A972CC(_QWORD *a1)
{
  uint64_t v2;
  void **v4;

  v2 = a1[1];
  *a1 = &off_1E81930E0;
  a1[1] = 0;
  if (v2)
  {
    v4 = (void **)(v2 + 32);
    sub_1C5A9725C(&v4);
    MEMORY[0x1CAA32FC0](v2, 0x1070C4099022D8ELL);
  }
  return a1;
}

int *sub_1C5A97330(_QWORD *a1, _QWORD *a2, int *__src, size_t __n)
{
  int *result;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19[4];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = xmmword_1C85F4BB0;
  v21 = 0;
  llvm::MD5::update((int *)&v20, __src, __n);
  result = llvm::MD5::final((int *)&v20, v19);
  v9 = *(_QWORD *)v19;
  v10 = *(_QWORD *)(a2[2] + 8 * ((*a2 - 1) & *(_QWORD *)v19));
  if (v10 && (v11 = (_WORD *)(a2[3] + v10), v12 = (unsigned __int16)*v11, *v11))
  {
    v13 = a2 + 4;
    v14 = v11 + 1;
    while (1)
    {
      v15 = v14[1];
      v16 = v14[2];
      v17 = v14 + 3;
      if (*v14 == v9 && v15 == __n)
      {
        if (!__n)
          break;
        result = (int *)memcmp(v14 + 3, __src, __n);
        if (!(_DWORD)result)
          break;
      }
      v14 = (_QWORD *)((char *)v17 + v16 + v15);
      if (!--v12)
        goto LABEL_12;
    }
    *a1 = v17;
    a1[1] = __n;
    a1[2] = (char *)v17 + __n;
    a1[3] = v16;
    a1[4] = v13;
  }
  else
  {
LABEL_12:
    a1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void sub_1C5A9746C(uint64_t *a1, uint64_t *a2, unsigned __int16 **a3)
{
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;

  v5 = a3[2];
  v6 = a3[6];
  v7 = (char *)v6 - (char *)v5;
  if (v6 == v5)
  {
LABEL_8:
    sub_1C546CB40(a2);
    *a1 = 0;
  }
  else
  {
    v9 = *a3;
    v8 = a3[1];
    while (1)
    {
      sub_1C6307600((uint64_t)a2, (unsigned __int8 *)&v9[(v8 == 0) + 12], *(_QWORD *)&v9[(v8 == 0) + 4], a1);
      if (*a1)
        break;
      if (!v8)
      {
        v10 = *v9++;
        v8 = (unsigned __int16 *)v10;
      }
      v9 = (unsigned __int16 *)((char *)v9 + *((_QWORD *)v9 + 2) + *((_QWORD *)v9 + 1) + 24);
      v8 = (unsigned __int16 *)((char *)v8 - 1);
      if (__CFADD__(v7++, 1))
        goto LABEL_8;
    }
  }
}

uint64_t sub_1C5A97508(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v14 = *(_QWORD *)a2;
        v15 = *(_QWORD *)a2 + 168 * v4;
        v16 = *(_QWORD *)a1;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v16, v14);
          v18 = *(_OWORD *)(v14 + 80);
          v17 = *(_OWORD *)(v14 + 96);
          *(_OWORD *)(v16 + 64) = *(_OWORD *)(v14 + 64);
          *(_OWORD *)(v16 + 80) = v18;
          *(_OWORD *)(v16 + 96) = v17;
          v20 = *(_OWORD *)(v14 + 128);
          v19 = *(_OWORD *)(v14 + 144);
          v21 = *(_OWORD *)(v14 + 112);
          *(_QWORD *)(v16 + 160) = *(_QWORD *)(v14 + 160);
          *(_OWORD *)(v16 + 128) = v20;
          *(_OWORD *)(v16 + 144) = v19;
          *(_OWORD *)(v16 + 112) = v21;
          v16 += 168;
          v14 += 168;
        }
        while (v14 != v15);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v22 = *(_QWORD *)a1;
      }
      else
      {
        v22 = *(_QWORD *)a1;
        v16 = *(_QWORD *)a1;
      }
      v23 = v22 + 168 * v5;
      while (v23 != v16)
      {
        v25 = *(void **)(v23 - 168);
        v23 -= 168;
        v24 = v25;
        if ((void *)(v23 + 16) != v25)
          free(v24);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v26 = *(_QWORD *)a1;
        v27 = 168 * v5;
        do
        {
          v28 = *(void **)(v26 + v27 - 168);
          if ((void *)(v26 + v27 - 152) != v28)
            free(v28);
          v27 -= 168;
        }
        while (v27);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C630908C(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a2 + 168 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v8, v6);
        v10 = *(_OWORD *)(v6 + 80);
        v9 = *(_OWORD *)(v6 + 96);
        *(_OWORD *)(v8 + 64) = *(_OWORD *)(v6 + 64);
        *(_OWORD *)(v8 + 80) = v10;
        *(_OWORD *)(v8 + 96) = v9;
        v12 = *(_OWORD *)(v6 + 128);
        v11 = *(_OWORD *)(v6 + 144);
        v13 = *(_OWORD *)(v6 + 112);
        *(_QWORD *)(v8 + 160) = *(_QWORD *)(v6 + 160);
        *(_OWORD *)(v8 + 128) = v12;
        *(_OWORD *)(v8 + 144) = v11;
        *(_OWORD *)(v8 + 112) = v13;
        v6 += 168;
        v8 += 168;
      }
      while (v6 != v7);
LABEL_24:
      v29 = *(unsigned int *)(a2 + 8);
      if (v5 != v29)
      {
        v31 = *(_QWORD *)a2;
        v32 = *(_QWORD *)a1;
        v33 = 168 * v5;
        v34 = 168 * v29;
        do
        {
          v35 = v32 + v33;
          v36 = v31 + v33;
          *(_QWORD *)v35 = v32 + v33 + 16;
          *(_QWORD *)(v35 + 8) = 0x600000000;
          if (*(_DWORD *)(v31 + v33 + 8))
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v32 + v33, v31 + v33);
          v31 += 168;
          v37 = *(_OWORD *)(v36 + 64);
          v38 = *(_OWORD *)(v36 + 96);
          *(_OWORD *)(v35 + 80) = *(_OWORD *)(v36 + 80);
          *(_OWORD *)(v35 + 96) = v38;
          *(_OWORD *)(v35 + 64) = v37;
          v39 = *(_OWORD *)(v36 + 112);
          v40 = *(_OWORD *)(v36 + 128);
          v41 = *(_OWORD *)(v36 + 144);
          *(_QWORD *)(v35 + 160) = *(_QWORD *)(v36 + 160);
          *(_OWORD *)(v35 + 128) = v40;
          *(_OWORD *)(v35 + 144) = v41;
          *(_OWORD *)(v35 + 112) = v39;
          v32 += 168;
          v34 -= 168;
        }
        while (v33 != v34);
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

uint64_t sub_1C5A9773C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *(_QWORD *)a2;
        v11 = *(_QWORD *)a1;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v11 + v9, v10 + v9);
          v9 += 64;
        }
        while (v4 << 6 != v9);
        v5 = *(unsigned int *)(a1 + 8);
        v12 = *(_QWORD *)a1;
        v13 = v11 + v9;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1;
      }
      v14 = v12 + (v5 << 6);
      while (v14 != v13)
      {
        v16 = *(void **)(v14 - 64);
        v14 -= 64;
        v15 = v16;
        if ((void *)(v14 + 16) != v16)
          free(v15);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD *)a1;
        v18 = v5 << 6;
        do
        {
          v19 = *(void **)(v17 + v18 - 64);
          if ((void *)(v17 + v18 - 48) != v19)
            free(v19);
          v18 -= 64;
        }
        while (v18);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C63091D8(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = v5 << 6;
      do
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v7, v6);
        v6 += 64;
        v7 += 64;
        v8 -= 64;
      }
      while (v8);
LABEL_24:
      v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)a1;
        v24 = v5 << 6;
        v25 = v20 << 6;
        do
        {
          v26 = (_QWORD *)(v23 + v24);
          *v26 = v23 + v24 + 16;
          v26[1] = 0x600000000;
          if (*(_DWORD *)(v22 + v24 + 8))
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v26, v22 + v24);
          v23 += 64;
          v25 -= 64;
          v22 += 64;
        }
        while (v24 != v25);
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

void sub_1C5A978E0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char **v23;
  char **v24;
  char *v25;
  char *v26;
  int v27;
  BOOL v28;
  char *v29;
  BOOL v30;
  int v31;
  BOOL v32;
  char *v33;
  int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  void *v40;
  __int128 v41;
  _QWORD v42[34];

  v6 = a3;
  v7 = (char *)a2;
  v42[32] = *MEMORY[0x1E0C80C00];
  v10 = (char *)sub_1C5A97C0C(a2, a3);
  v12 = v11;
  v13 = sub_1C5DF9694(*(_QWORD *)(a1 + 16), v10, v11, 0);
  if (!v13)
    goto LABEL_8;
  v14 = *(_DWORD *)(a1 + 40);
  if (!v14)
    goto LABEL_8;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = v14 - 1;
  v17 = v16 & (37 * v13);
  v18 = (uint64_t *)(v15 + 24 * v17);
  v19 = *v18;
  if (v13 != *v18)
  {
    v34 = 1;
    while (v19 != -1)
    {
      v35 = v17 + v34++;
      v17 = v35 & v16;
      v18 = (uint64_t *)(v15 + 24 * v17);
      v19 = *v18;
      if (v13 == *v18)
        goto LABEL_4;
    }
    goto LABEL_8;
  }
LABEL_4:
  v20 = v18[2];
  if (!v20)
  {
LABEL_8:
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v7, v6, a4);
    return;
  }
  v21 = (char *)v18[1];
  if (v10 == v7 && &v10[v12] == &v7[v6])
  {
    v7 = (char *)v18[1];
    v6 = v18[2];
    goto LABEL_8;
  }
  v40 = v42;
  v41 = xmmword_1C64638F0;
  sub_1C6309518(v7, v6, v10, v12, v21, v20, (uint64_t *)&v40);
  (*(void (**)(char **__return_ptr, _QWORD, void *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(&v36, *(_QWORD *)(a1 + 48), v40, v41, a4);
  v22 = v36;
  if (v36)
  {
    v36 = 0;
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v22 + 48))(v22, &llvm::ErrorList::ID))
    {
      *a5 = 0;
      v24 = (char **)*((_QWORD *)v22 + 1);
      v23 = (char **)*((_QWORD *)v22 + 2);
      if (v24 == v23)
      {
        v25 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          v38 = v25;
          v26 = *v24;
          *v24 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v26 + 48))(v26, &llvm::InstrProfError::ID))
          {
            v27 = *((_DWORD *)v26 + 2);
            v28 = v27 == 13;
            if (v27 == 13)
              v29 = 0;
            else
              v29 = v26;
            v37 = v29;
            if (v28)
              (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
          }
          else
          {
            v37 = v26;
          }
          sub_1C6174794(&v38, &v37, &v39);
          v25 = v39;
          *a5 = v39;
          v39 = 0;
          if (v37)
            (*(void (**)(char *))(*(_QWORD *)v37 + 8))(v37);
          if (v38)
            (*(void (**)(char *))(*(_QWORD *)v38 + 8))(v38);
          ++v24;
        }
        while (v24 != v23);
      }
      (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      v22 = v25;
    }
    else if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v22 + 48))(v22, &llvm::InstrProfError::ID))
    {
      v31 = *((_DWORD *)v22 + 2);
      v32 = v31 == 13;
      if (v31 == 13)
        v33 = 0;
      else
        v33 = v22;
      *a5 = v33;
      if (v32)
      {
        (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
        v22 = 0;
      }
    }
    else
    {
      *a5 = v22;
    }
    v30 = v22 != 0;
    if (v36)
      (*(void (**)(char *))(*(_QWORD *)v36 + 8))(v36);
  }
  else
  {
    *a5 = 0;
    v30 = 1;
  }
  if (v40 != v42)
    free(v40);
  if (!v30)
    goto LABEL_8;
}

_WORD *sub_1C5A97C0C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  _WORD *result;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v15 = a1;
  v16 = a2;
  v3 = a1;
  v4 = a1;
  v5 = a2;
  while (1)
  {
    v6 = v5;
    v7 = v4;
    v17 = 58;
    v8 = llvm::StringRef::find(&v15, &v17, 1uLL, 0);
    v9 = v6 >= v8 ? v8 : v6;
    v10 = v6 >= v8 + 1 ? v8 + 1 : v6;
    v11 = v7 + v10;
    v5 = v6 - v10;
    v12 = v8 == -1;
    if (v8 == -1)
    {
      v5 = 0;
      v13 = v6;
    }
    else
    {
      v13 = v9;
    }
    result = (_WORD *)(v8 == -1 ? v3 : v7);
    v4 = v12 ? 0 : v11;
    v15 = v4;
    v16 = v5;
    if (v13 >= 2 && *result == 23135)
      break;
    v3 = v4;
    if (!v5)
      return (_WORD *)a1;
  }
  return result;
}

void sub_1C5A97CF0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A97D04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C5A97D14(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C5A97FDC((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v14 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v15 = &v4[168 * v5];
        do
        {
          sub_1C614D378((uint64_t)v14, (uint64_t)v4);
          v17 = *((_OWORD *)v4 + 5);
          v16 = *((_OWORD *)v4 + 6);
          *((_OWORD *)v14 + 4) = *((_OWORD *)v4 + 4);
          *((_OWORD *)v14 + 5) = v17;
          *((_OWORD *)v14 + 6) = v16;
          v19 = *((_OWORD *)v4 + 8);
          v18 = *((_OWORD *)v4 + 9);
          v20 = *((_OWORD *)v4 + 7);
          *((_QWORD *)v14 + 20) = *((_QWORD *)v4 + 20);
          *((_OWORD *)v14 + 8) = v19;
          *((_OWORD *)v14 + 9) = v18;
          *((_OWORD *)v14 + 7) = v20;
          v14 += 168;
          v4 += 168;
        }
        while (v4 != v15);
        v21 = v14;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v14 = *(char **)a1;
      }
      else
      {
        v21 = *(char **)a1;
      }
      v22 = &v14[168 * v6];
      while (v22 != v21)
      {
        v24 = (char *)*((_QWORD *)v22 - 21);
        v22 -= 168;
        v23 = v24;
        if (v22 + 16 != v24)
          free(v23);
      }
      *(_DWORD *)(a1 + 8) = v5;
      v25 = *(_DWORD *)(a2 + 8);
      if (v25)
      {
        v26 = *(char **)a2;
        v27 = 168 * v25;
        do
        {
          v28 = *(char **)&v26[v27 - 168];
          if (&v26[v27 - 152] != v28)
            free(v28);
          v27 -= 168;
        }
        while (v27);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v29 = *(char **)a1;
        v30 = 168 * v6;
        do
        {
          v31 = *(char **)&v29[v30 - 168];
          if (&v29[v30 - 152] != v31)
            free(v31);
          v30 -= 168;
        }
        while (v30);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C630908C(a1, v5);
    }
    else if ((_DWORD)v6)
    {
      v7 = &v4[168 * v6];
      v8 = *(char **)a1;
      do
      {
        sub_1C614D378((uint64_t)v8, (uint64_t)v4);
        v10 = *((_OWORD *)v4 + 5);
        v9 = *((_OWORD *)v4 + 6);
        *((_OWORD *)v8 + 4) = *((_OWORD *)v4 + 4);
        *((_OWORD *)v8 + 5) = v10;
        *((_OWORD *)v8 + 6) = v9;
        v12 = *((_OWORD *)v4 + 8);
        v11 = *((_OWORD *)v4 + 9);
        v13 = *((_OWORD *)v4 + 7);
        *((_QWORD *)v8 + 20) = *((_QWORD *)v4 + 20);
        *((_OWORD *)v8 + 8) = v12;
        *((_OWORD *)v8 + 9) = v11;
        *((_OWORD *)v8 + 7) = v13;
        v4 += 168;
        v8 += 168;
      }
      while (v4 != v7);
      goto LABEL_32;
    }
    v6 = 0;
LABEL_32:
    v32 = *(char **)a2;
    v33 = *(unsigned int *)(a2 + 8);
    if (v6 != v33)
    {
      v34 = *(char **)a1;
      v35 = 168 * v6;
      v36 = 168 * v33;
      do
      {
        v37 = &v34[v35];
        v38 = &v32[v35];
        *(_QWORD *)v37 = &v34[v35 + 16];
        *((_QWORD *)v37 + 1) = 0x600000000;
        if (*(_DWORD *)&v32[v35 + 8])
          sub_1C614D378((uint64_t)&v34[v35], (uint64_t)&v32[v35]);
        v32 += 168;
        v39 = *((_OWORD *)v38 + 4);
        v40 = *((_OWORD *)v38 + 6);
        *((_OWORD *)v37 + 5) = *((_OWORD *)v38 + 5);
        *((_OWORD *)v37 + 6) = v40;
        *((_OWORD *)v37 + 4) = v39;
        v41 = *((_OWORD *)v38 + 7);
        v42 = *((_OWORD *)v38 + 8);
        v43 = *((_OWORD *)v38 + 9);
        *((_QWORD *)v37 + 20) = *((_QWORD *)v38 + 20);
        *((_OWORD *)v37 + 8) = v42;
        *((_OWORD *)v37 + 9) = v43;
        *((_OWORD *)v37 + 7) = v41;
        v34 += 168;
        v36 -= 168;
      }
      while (v35 != v36);
      v32 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v44 = *(_DWORD *)(a2 + 8);
    if (v44)
    {
      v45 = 168 * v44;
      do
      {
        v46 = *(char **)&v32[v45 - 168];
        if (&v32[v45 - 152] != v46)
          free(v46);
        v45 -= 168;
      }
      while (v45);
    }
LABEL_43:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double sub_1C5A97FDC(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = 168 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 168];
      if (&v4[v6 - 152] != v7)
        free(v7);
      v6 -= 168;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1C5A98068(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C5A9828C((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v9 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v10 = 0;
        do
        {
          sub_1C614D378((uint64_t)&v9[v10], (uint64_t)&v4[v10]);
          v10 += 64;
        }
        while (v5 << 6 != v10);
        v6 = *(unsigned int *)(a1 + 8);
        v11 = &v9[v10];
        v9 = *(char **)a1;
      }
      else
      {
        v11 = *(char **)a1;
      }
      v12 = &v9[64 * v6];
      while (v12 != v11)
      {
        v14 = (char *)*((_QWORD *)v12 - 8);
        v12 -= 64;
        v13 = v14;
        if (v12 + 16 != v14)
          free(v13);
      }
      *(_DWORD *)(a1 + 8) = v5;
      v15 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v15)
      {
        v16 = *(char **)a2;
        v17 = v15 << 6;
        do
        {
          v18 = *(char **)&v16[v17 - 64];
          if (&v16[v17 - 48] != v18)
            free(v18);
          v17 -= 64;
        }
        while (v17);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v19 = *(char **)a1;
        v20 = v6 << 6;
        do
        {
          v21 = *(char **)&v19[v20 - 64];
          if (&v19[v20 - 48] != v21)
            free(v21);
          v20 -= 64;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C63091D8(a1, v5);
    }
    else if ((_DWORD)v6)
    {
      v7 = *(char **)a1;
      v8 = v6 << 6;
      do
      {
        sub_1C614D378((uint64_t)v7, (uint64_t)v4);
        v4 += 64;
        v7 += 64;
        v8 -= 64;
      }
      while (v8);
      goto LABEL_32;
    }
    v6 = 0;
LABEL_32:
    v22 = *(char **)a2;
    v23 = *(unsigned int *)(a2 + 8);
    if (v6 != v23)
    {
      v24 = *(char **)a1;
      v25 = v6 << 6;
      v26 = v23 << 6;
      do
      {
        v27 = &v24[v25];
        *(_QWORD *)v27 = &v24[v25 + 16];
        *((_QWORD *)v27 + 1) = 0x600000000;
        if (*(_DWORD *)&v22[v25 + 8])
          sub_1C614D378((uint64_t)v27, (uint64_t)&v22[v25]);
        v24 += 64;
        v26 -= 64;
        v22 += 64;
      }
      while (v25 != v26);
      v22 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v28 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v28)
    {
      v29 = v28 << 6;
      do
      {
        v30 = *(char **)&v22[v29 - 64];
        if (&v22[v29 - 48] != v30)
          free(v30);
        v29 -= 64;
      }
      while (v29);
    }
LABEL_43:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double sub_1C5A9828C(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v5 << 6;
    do
    {
      v7 = *(char **)&v4[v6 - 64];
      if (&v4[v6 - 48] != v7)
        free(v7);
      v6 -= 64;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

double sub_1C5A98314@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  double *v13;
  uint64_t v14;
  char v15;
  double result;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 280);
  v4 = *(_QWORD *)(v3[2] + 8 * ((*v3 - 1) & a2));
  if (v4 && (v5 = (_WORD *)(v3[3] + v4), v6 = (unsigned __int16)*v5, *v5))
  {
    v7 = (uint64_t *)(v5 + 1);
    while (1)
    {
      v9 = *v7;
      v8 = v7[1];
      v10 = v7[2];
      v11 = v7 + 3;
      if (v9 == a2 && *v11 == a2)
        break;
      v7 = (_QWORD *)((char *)v11 + v10 + v8);
      if (!--v6)
        goto LABEL_7;
    }
    v13 = (double *)((char *)v11 + v8);
    v14 = *(_QWORD *)((char *)v11 + v8);
    v15 = (_BYTE)v13[2] & 1;
    *(_QWORD *)a3 = v14;
    result = v13[1];
    *(double *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = v15;
  }
  else
  {
LABEL_7:
    v12 = *(_BYTE **)(a1 + 16);
    **(_QWORD **)(a1 + 8) = a2;
    *v12 = 1;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_1C5A983B8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  char *v46;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C5A97FDC((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v10 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v11 = &v4[168 * v5];
        do
        {
          sub_1C5A96440((uint64_t)v10, (uint64_t)v4);
          v13 = *((_OWORD *)v4 + 5);
          v12 = *((_OWORD *)v4 + 6);
          *((_OWORD *)v10 + 4) = *((_OWORD *)v4 + 4);
          *((_OWORD *)v10 + 5) = v13;
          *((_OWORD *)v10 + 6) = v12;
          v15 = *((_OWORD *)v4 + 8);
          v14 = *((_OWORD *)v4 + 9);
          v16 = *((_OWORD *)v4 + 7);
          *((_QWORD *)v10 + 20) = *((_QWORD *)v4 + 20);
          *((_OWORD *)v10 + 8) = v15;
          *((_OWORD *)v10 + 9) = v14;
          *((_OWORD *)v10 + 7) = v16;
          v10 += 168;
          v4 += 168;
        }
        while (v4 != v11);
        v17 = v10;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v10 = *(char **)a1;
      }
      else
      {
        v17 = *(char **)a1;
      }
      v40 = &v10[168 * v6];
      while (v40 != v17)
      {
        v42 = (char *)*((_QWORD *)v40 - 21);
        v40 -= 168;
        v41 = v42;
        if (v40 + 16 != v42)
          free(v41);
      }
      *(_DWORD *)(a1 + 8) = v5;
      v43 = *(_DWORD *)(a2 + 8);
      if (v43)
      {
        v44 = *(char **)a2;
        v45 = 168 * v43;
        do
        {
          v46 = *(char **)&v44[v45 - 168];
          if (&v44[v45 - 152] != v46)
            free(v46);
          v45 -= 168;
        }
        while (v45);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v18 = &v4[168 * v6];
        v19 = *(char **)a1;
        do
        {
          sub_1C5A96440((uint64_t)v19, (uint64_t)v4);
          v21 = *((_OWORD *)v4 + 5);
          v20 = *((_OWORD *)v4 + 6);
          *((_OWORD *)v19 + 4) = *((_OWORD *)v4 + 4);
          *((_OWORD *)v19 + 5) = v21;
          *((_OWORD *)v19 + 6) = v20;
          v23 = *((_OWORD *)v4 + 8);
          v22 = *((_OWORD *)v4 + 9);
          v24 = *((_OWORD *)v4 + 7);
          *((_QWORD *)v19 + 20) = *((_QWORD *)v4 + 20);
          *((_OWORD *)v19 + 8) = v23;
          *((_OWORD *)v19 + 9) = v22;
          *((_OWORD *)v19 + 7) = v24;
          v4 += 168;
          v19 += 168;
        }
        while (v4 != v18);
        goto LABEL_21;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = 168 * v6;
        do
        {
          v9 = *(char **)&v7[v8 - 168];
          if (&v7[v8 - 152] != v9)
            free(v9);
          v8 -= 168;
        }
        while (v8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C5A9867C(a1, v5);
    }
    v6 = 0;
LABEL_21:
    v25 = *(char **)a2;
    v26 = *(unsigned int *)(a2 + 8);
    if (v6 != v26)
    {
      v27 = *(char **)a1;
      v28 = 168 * v6;
      v29 = 168 * v26;
      do
      {
        v30 = &v27[v28];
        v31 = &v25[v28];
        *(_QWORD *)v30 = &v27[v28 + 16];
        *((_QWORD *)v30 + 1) = 0x200000000;
        if (*(_DWORD *)&v25[v28 + 8])
          sub_1C5A96440((uint64_t)&v27[v28], (uint64_t)&v25[v28]);
        v25 += 168;
        v32 = *((_OWORD *)v31 + 4);
        v33 = *((_OWORD *)v31 + 6);
        *((_OWORD *)v30 + 5) = *((_OWORD *)v31 + 5);
        *((_OWORD *)v30 + 6) = v33;
        *((_OWORD *)v30 + 4) = v32;
        v34 = *((_OWORD *)v31 + 7);
        v35 = *((_OWORD *)v31 + 8);
        v36 = *((_OWORD *)v31 + 9);
        *((_QWORD *)v30 + 20) = *((_QWORD *)v31 + 20);
        *((_OWORD *)v30 + 8) = v35;
        *((_OWORD *)v30 + 9) = v36;
        *((_OWORD *)v30 + 7) = v34;
        v27 += 168;
        v29 -= 168;
      }
      while (v28 != v29);
      v25 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v37 = *(_DWORD *)(a2 + 8);
    if (v37)
    {
      v38 = 168 * v37;
      do
      {
        v39 = *(char **)&v25[v38 - 168];
        if (&v25[v38 - 152] != v39)
          free(v39);
        v38 -= 168;
      }
      while (v38);
    }
LABEL_43:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_1C5A9867C(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 168, &v5);
  sub_1C5A96368(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C5A986E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C5A9828C((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v10 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v11 = 0;
        do
        {
          sub_1C5A96440((uint64_t)&v10[v11], (uint64_t)&v4[v11]);
          v11 += 64;
        }
        while (v5 << 6 != v11);
        v6 = *(unsigned int *)(a1 + 8);
        v12 = &v10[v11];
        v10 = *(char **)a1;
      }
      else
      {
        v12 = *(char **)a1;
      }
      v24 = &v10[64 * v6];
      while (v24 != v12)
      {
        v26 = (char *)*((_QWORD *)v24 - 8);
        v24 -= 64;
        v25 = v26;
        if (v24 + 16 != v26)
          free(v25);
      }
      *(_DWORD *)(a1 + 8) = v5;
      v27 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v27)
      {
        v28 = *(char **)a2;
        v29 = v27 << 6;
        do
        {
          v30 = *(char **)&v28[v29 - 64];
          if (&v28[v29 - 48] != v30)
            free(v30);
          v29 -= 64;
        }
        while (v29);
      }
      goto LABEL_43;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v13 = *(char **)a1;
        v14 = v6 << 6;
        do
        {
          sub_1C5A96440((uint64_t)v13, (uint64_t)v4);
          v4 += 64;
          v13 += 64;
          v14 -= 64;
        }
        while (v14);
        goto LABEL_21;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = v6 << 6;
        do
        {
          v9 = *(char **)&v7[v8 - 64];
          if (&v7[v8 - 48] != v9)
            free(v9);
          v8 -= 64;
        }
        while (v8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C5A96814(a1, v5);
    }
    v6 = 0;
LABEL_21:
    v15 = *(char **)a2;
    v16 = *(unsigned int *)(a2 + 8);
    if (v6 != v16)
    {
      v17 = *(char **)a1;
      v18 = v6 << 6;
      v19 = v16 << 6;
      do
      {
        v20 = &v17[v18];
        *(_QWORD *)v20 = &v17[v18 + 16];
        *((_QWORD *)v20 + 1) = 0x200000000;
        if (*(_DWORD *)&v15[v18 + 8])
          sub_1C5A96440((uint64_t)v20, (uint64_t)&v15[v18]);
        v17 += 64;
        v19 -= 64;
        v15 += 64;
      }
      while (v18 != v19);
      v15 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v21 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v21)
    {
      v22 = v21 << 6;
      do
      {
        v23 = *(char **)&v15[v22 - 64];
        if (&v15[v22 - 48] != v23)
          free(v23);
        v22 -= 64;
      }
      while (v22);
    }
LABEL_43:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

llvm::InstrProfWriter *llvm::InstrProfWriter::InstrProfWriter(llvm::InstrProfWriter *this, char a2)
{
  _QWORD *v3;

  *(_BYTE *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0xB000000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  *(_DWORD *)v3 = 1;
  *((_QWORD *)this + 18) = v3;
  return this;
}

{
  _QWORD *v3;

  *(_BYTE *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0xB000000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  *(_DWORD *)v3 = 1;
  *((_QWORD *)this + 18) = v3;
  return this;
}

void llvm::InstrProfWriter::~InstrProfWriter(llvm::InstrProfWriter *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v2 = *((_QWORD *)this + 18);
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x1020C40F89CB87BLL);
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 11), 8);
  v13 = (void **)((char *)this + 64);
  sub_1C5A9C550(&v13);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 5), 8);
  if (*((_DWORD *)this + 5))
  {
    v4 = *((unsigned int *)this + 4);
    if ((_DWORD)v4)
    {
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v5);
        if (v6 != -8 && v6 != 0)
          break;
LABEL_24:
        if (++v5 == v4)
          goto LABEL_25;
      }
      v8 = *(_DWORD *)(v6 + 8);
      if ((v8 & 1) != 0)
      {
        v10 = v6 + 16;
        v9 = 4;
      }
      else
      {
        v9 = *(unsigned int *)(v6 + 24);
        if (!(_DWORD)v9)
        {
LABEL_21:
          if ((v8 & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 + 16), 8);
          MEMORY[0x1CAA32FB4](v6, 8);
          goto LABEL_24;
        }
        v10 = *(_QWORD *)(v6 + 16);
      }
      v11 = 40 * v9;
      v12 = v10 + 8;
      do
      {
        if (*(_QWORD *)(v12 - 8) <= 0xFFFFFFFFFFFFFFFDLL)
          v12 = sub_1C62AFE18(v12);
        v12 += 40;
        v11 -= 40;
      }
      while (v11);
      v8 = *(_DWORD *)(v6 + 8);
      goto LABEL_21;
    }
  }
LABEL_25:
  free(*((void **)this + 1));
}

uint64_t llvm::InstrProfWriter::setValueProfDataEndianness(uint64_t result, int a2)
{
  **(_DWORD **)(result + 144) = a2;
  return result;
}

_BYTE *llvm::InstrProfWriter::setOutputSparse(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::InstrProfWriter::addRecord(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return llvm::InstrProfWriter::addRecord(a1, *(unsigned __int8 **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), (__n128 *)a2, a3, a4, a5);
}

_QWORD *llvm::InstrProfWriter::addRecord(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, __n128 *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *result;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  unint64_t j;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _OWORD v28[2];
  _QWORD *v29;
  _QWORD v30[4];
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD v33[2];

  v33[0] = a7;
  v33[1] = a8;
  v11 = *sub_1C5A9C7A0((llvm::StringMapImpl *)(a1 + 8), a2, a3) + 8;
  v29 = (_QWORD *)a4;
  memset(v30, 0, sizeof(v30));
  memset(v28, 0, sizeof(v28));
  sub_1C5A9C9B4((uint64_t)&v31, v11, (uint64_t *)&v29, (uint64_t)v30);
  v12 = v31;
  v13 = v32;
  sub_1C62AFE18((uint64_t)v30);
  sub_1C62AFE18((uint64_t)v28);
  v29 = v33;
  if (v13)
  {
    result = (_QWORD *)sub_1C58C9490(v12 + 8, a5);
    if (a6 >= 2)
      result = (_QWORD *)llvm::InstrProfRecord::scale((unint64_t **)(v12 + 8), a6, 1uLL, (uint64_t (*)(uint64_t, uint64_t))sub_1C5A9CE7C, (uint64_t)&v29);
  }
  else
  {
    result = llvm::InstrProfRecord::merge((uint64_t *)(v12 + 8), a5, a6, (uint64_t (*)(uint64_t, uint64_t))sub_1C5A9CE7C, (uint64_t)&v29);
  }
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = *(_QWORD *)(v12 + 32);
    if (v17)
    {
      v18 = (v16 & 1) != 0 ? 8 : 32;
      v19 = (v16 & 1) != 0 ? 0 : 24;
      v20 = *(_QWORD *)(v17 + v19);
      for (i = *(_QWORD *)(v17 + v18); v20 != i; v20 += 24)
      {
        result = sub_1C5A9C5DC(*(uint64_t **)(v20 + 8), (uint64_t *)v20, *(_QWORD *)(v20 + 16));
        v22 = *(_QWORD *)(v20 + 16);
        if (v22 >= 0x100)
        {
          if (v22 >= 0x1FE)
          {
            result = *(_QWORD **)(v20 + 8);
            for (j = 256; j > 1; --j)
              result = (_QWORD *)result[1];
          }
          else
          {
            v23 = v22 - 255;
            result = (_QWORD *)v20;
            do
            {
              result = (_QWORD *)*result;
              --v23;
            }
            while (v23);
          }
          if (result != (_QWORD *)v20)
          {
            v25 = *(_QWORD *)v20;
            v26 = (_QWORD *)*result;
            v26[1] = *(_QWORD *)(*(_QWORD *)v20 + 8);
            **(_QWORD **)(v25 + 8) = v26;
            do
            {
              v27 = (_QWORD *)result[1];
              --*(_QWORD *)(v20 + 16);
              operator delete(result);
              result = v27;
            }
            while (v27 != (_QWORD *)v20);
          }
        }
      }
    }
    v15 = 0;
  }
  while ((v16 & 1) != 0);
  return result;
}

void llvm::InstrProfWriter::overlapRecord(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  int v21;
  size_t v22;
  size_t v23;
  char *v24;
  uint64_t v27;
  uint64_t v29;
  _OWORD v31[2];
  uint64_t v32;
  _QWORD v33[4];
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36[4];

  *(_OWORD *)v36 = *(_OWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 48);
  v29 = a4 + 32;
  llvm::InstrProfRecord::accumulateCounts(a2, a4 + 32);
  v6 = a1[4];
  if (!(_DWORD)v6)
    goto LABEL_17;
  v7 = 0;
  if (v36[1])
  {
    v8 = v36[1];
    v9 = (unsigned __int8 *)v36[0];
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *((_QWORD *)a1 + 1);
  v12 = 1;
  v13 = v7;
  while (1)
  {
    v14 = v13 & (v6 - 1);
    v15 = *(_QWORD **)(v11 + 8 * v14);
    if (v15 != (_QWORD *)-8)
    {
      if (!v15)
        goto LABEL_17;
      if (*(_DWORD *)(v11 + 8 * v6 + 8 + 4 * v14) == v7
        && v36[1] == *v15
        && (!v36[1] || !memcmp((const void *)v36[0], (char *)v15 + a1[7], v36[1])))
      {
        break;
      }
    }
    v13 = v12 + v14;
    ++v12;
  }
  if ((_DWORD)v14 == -1 || (int)v14 == v6)
  {
LABEL_17:
    llvm::OverlapStats::addOneUnique(a3, v29);
  }
  else if (*(double *)(a4 + 40) >= 1.0)
  {
    v16 = *sub_1C5A9C7A0((llvm::StringMapImpl *)(a1 + 2), (unsigned __int8 *)v36[0], v36[1]) + 8;
    v32 = v27;
    memset(v33, 0, sizeof(v33));
    memset(v31, 0, sizeof(v31));
    sub_1C5A9C9B4((uint64_t)&v34, v16, &v32, (uint64_t)v33);
    v17 = v34;
    v18 = v35;
    sub_1C62AFE18((uint64_t)v33);
    sub_1C62AFE18((uint64_t)v31);
    if (v18)
    {
      llvm::OverlapStats::addOneMismatch(a3, v29);
    }
    else
    {
      v19 = *(_QWORD *)a5;
      v20 = *(_BYTE *)(a5 + 31);
      v21 = v20;
      v22 = v20 & 0x7F;
      if (v21 >= 0)
        v23 = v22;
      else
        v23 = *(_QWORD *)(a5 + 16);
      if (v23)
      {
        if (v21 >= 0)
          v24 = (char *)(a5 + 8);
        else
          v24 = *(char **)(a5 + 8);
        if (llvm::StringRef::find(v36, v24, v23, 0) != -1)
          v19 = 0;
      }
      llvm::InstrProfRecord::overlap((_QWORD *)(v17 + 8), (uint64_t *)a2, a3, a4, v19);
    }
  }
  else
  {
    ++*(_QWORD *)(a3 + 64);
  }
}

void llvm::InstrProfWriter::addMemProfRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30[23];
  void *v31;
  unsigned int v32;
  _QWORD v33[10];

  v33[8] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 40);
  v29 = a2;
  sub_1C6309018(v30, a3);
  v5 = sub_1C5A991C8(v4, (uint64_t)&v29);
  v7 = v6;
  v8 = (char *)v31;
  if (v32)
  {
    v9 = (unint64_t)v32 << 6;
    do
    {
      v10 = *(char **)&v8[v9 - 64];
      if (&v8[v9 - 48] != v10)
        free(v10);
      v9 -= 64;
    }
    while (v9);
    v8 = (char *)v31;
  }
  if (v8 != (char *)v33)
    free(v8);
  sub_1C63089E8(v30);
  if (!v7)
  {
    v11 = *(_QWORD *)a3;
    v12 = *(unsigned int *)(a3 + 8);
    v13 = *(unsigned int *)(v5 + 16);
    if (v13 + v12 > (unint64_t)*(unsigned int *)(v5 + 20))
    {
      sub_1C630908C(v5 + 8, v13 + v12);
      LODWORD(v13) = *(_DWORD *)(v5 + 16);
    }
    if ((_DWORD)v12)
    {
      v14 = 0;
      v15 = *(_QWORD *)(v5 + 8) + 168 * v13;
      do
      {
        v16 = v15 + v14;
        v17 = v11 + v14;
        *(_QWORD *)v16 = v15 + v14 + 16;
        *(_QWORD *)(v16 + 8) = 0x600000000;
        if (*(_DWORD *)(v11 + v14 + 8))
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v15 + v14, v11 + v14);
        v14 += 168;
        v18 = *(_OWORD *)(v17 + 64);
        v19 = *(_OWORD *)(v17 + 96);
        *(_OWORD *)(v16 + 80) = *(_OWORD *)(v17 + 80);
        *(_OWORD *)(v16 + 96) = v19;
        *(_OWORD *)(v16 + 64) = v18;
        v20 = *(_OWORD *)(v17 + 112);
        v21 = *(_OWORD *)(v17 + 128);
        v22 = *(_OWORD *)(v17 + 144);
        *(_QWORD *)(v16 + 160) = *(_QWORD *)(v17 + 160);
        *(_OWORD *)(v16 + 128) = v21;
        *(_OWORD *)(v16 + 144) = v22;
        *(_OWORD *)(v16 + 112) = v20;
      }
      while (168 * v12 != v14);
      LODWORD(v13) = *(_DWORD *)(v5 + 16);
    }
    *(_DWORD *)(v5 + 16) = v13 + v12;
    v23 = *(_QWORD *)(a3 + 184);
    v24 = *(unsigned int *)(a3 + 192);
    v25 = *(unsigned int *)(v5 + 200);
    if (v25 + v24 > (unint64_t)*(unsigned int *)(v5 + 204))
    {
      sub_1C63091D8(v5 + 192, v25 + v24);
      v25 = *(unsigned int *)(v5 + 200);
      if ((_DWORD)v24)
      {
LABEL_20:
        v26 = 0;
        v27 = *(_QWORD *)(v5 + 192) + (v25 << 6);
        do
        {
          v28 = (_QWORD *)(v27 + v26);
          *v28 = v27 + v26 + 16;
          v28[1] = 0x600000000;
          if (*(_DWORD *)(v23 + v26 + 8))
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v28, v23 + v26);
          v26 += 64;
        }
        while (v24 << 6 != v26);
        LODWORD(v25) = *(_DWORD *)(v5 + 200);
      }
    }
    else if ((_DWORD)v24)
    {
      goto LABEL_20;
    }
    *(_DWORD *)(v5 + 200) = v25 + v24;
  }
}

uint64_t sub_1C5A991C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int64x2_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;

  v11 = *(_QWORD *)a2;
  v12 = 0;
  sub_1C52A0B94((uint64_t)a1, &v11, &v12, (uint64_t)&v9);
  v4 = v9;
  v5 = (int64x2_t *)(a1 + 3);
  if (!v10)
    return v5->i64[0] + 272 * *(unsigned int *)(v9 + 8);
  v6 = (_QWORD *)a1[4];
  if ((unint64_t)v6 >= a1[5])
  {
    v7 = sub_1C5A9CF14(v5, a2);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v6[1] = v6 + 3;
    v6[2] = 0x100000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C5A97D14((uint64_t)(v6 + 1), a2 + 8);
    v6[24] = v6 + 26;
    v6[25] = 0x100000000;
    if (*(_DWORD *)(a2 + 200))
      sub_1C5A98068((uint64_t)(v6 + 24), a2 + 192);
    v7 = v6 + 34;
  }
  a1[4] = v7;
  *(_DWORD *)(v4 + 8) = -252645135 * (((unint64_t)v7 - a1[3]) >> 4) - 1;
  return (uint64_t)(v7 - 34);
}

uint64_t llvm::InstrProfWriter::addMemProfFrame(_QWORD *a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _QWORD *), uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  __int16 v36;
  uint64_t v37;
  int v38;

  v10 = *a3;
  v12 = *((_DWORD *)a3 + 2);
  v11 = *((_DWORD *)a3 + 3);
  v13 = *((_BYTE *)a3 + 16);
  v37 = a2;
  v38 = 0;
  sub_1C52A0B94((uint64_t)(a1 + 11), &v37, &v38, (uint64_t)v34);
  v14 = v34[0];
  if (v35)
  {
    v16 = (uint64_t *)a1[15];
    v15 = a1[16];
    if ((unint64_t)v16 >= v15)
    {
      v24 = (uint64_t *)a1[14];
      v25 = ((char *)v16 - (char *)v24) >> 5;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 59)
        abort();
      v33 = v34[0];
      v27 = v15 - (_QWORD)v24;
      if (v27 >> 4 > v26)
        v26 = v27 >> 4;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28 >> 59)
        sub_1C4764EE4();
      v29 = (char *)operator new(32 * v28);
      v30 = &v29[32 * v25];
      *(_QWORD *)v30 = a2;
      *((_QWORD *)v30 + 1) = v10;
      *((_DWORD *)v30 + 4) = v12;
      *((_DWORD *)v30 + 5) = v11;
      v30[24] = v13;
      v17 = v30 + 32;
      if (v16 != v24)
      {
        v31 = 0;
        do
        {
          v32 = &v30[v31 * 8];
          *((_OWORD *)v32 - 2) = *(_OWORD *)&v16[v31 - 4];
          *((_QWORD *)v32 - 2) = v16[v31 - 2];
          *(v32 - 8) = v16[v31 - 1];
          v31 -= 4;
        }
        while (&v16[v31] != v24);
        v30 += v31 * 8;
      }
      a1[14] = v30;
      a1[15] = v17;
      a1[16] = &v29[32 * v28];
      if (v24)
        operator delete(v24);
      v14 = v33;
    }
    else
    {
      *v16 = a2;
      v16[1] = v10;
      *((_DWORD *)v16 + 4) = v12;
      *((_DWORD *)v16 + 5) = v11;
      v17 = (char *)(v16 + 4);
      *((_BYTE *)v16 + 24) = v13;
    }
    a1[15] = v17;
    *(_DWORD *)(v14 + 8) = ((unint64_t)&v17[-a1[14]] >> 5) - 1;
    return 1;
  }
  v18 = a1[14];
  v19 = *(unsigned int *)(v34[0] + 8);
  v20 = v18 + 32 * v19;
  if (*a3 == *(_QWORD *)(v20 + 8) && *((_DWORD *)a3 + 2) == *(_DWORD *)(v20 + 16))
  {
    v21 = v18 + 32 * v19;
    if (*((_DWORD *)a3 + 3) == *(_DWORD *)(v21 + 20) && *((unsigned __int8 *)a3 + 16) == *(unsigned __int8 *)(v21 + 24))
      return 1;
  }
  v22 = operator new();
  v34[0] = "frame to id mapping mismatch";
  v36 = 259;
  *(_QWORD *)v22 = off_1E8192D50;
  *(_DWORD *)(v22 + 8) = 9;
  llvm::Twine::str((llvm::Twine *)v34, (_QWORD *)(v22 + 16));
  v34[0] = v22;
  a4(a5, v34);
  if (v34[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v34[0] + 8))(v34[0]);
  return 0;
}

void llvm::InstrProfWriter::mergeRecordsFromWriter(int64x2_t *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unsigned int v20;
  unint64_t *v21;
  __n128 *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int64x2_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v58;
  int64x2_t v59;
  uint64_t v60;
  int64x2_t *v61;

  v7 = *(unsigned int *)(a2 + 16);
  v8 = *(uint64_t **)(a2 + 8);
  if ((_DWORD)v7)
  {
    while (!*v8 || *v8 == -8)
      ++v8;
  }
  v10 = *(_QWORD *)(a2 + 8) + 8 * v7;
  if (v8 != (uint64_t *)v10)
  {
    v11 = *v8;
    do
    {
      v12 = *(_DWORD *)(v11 + 8);
      if (v12 > 1)
      {
        if ((v12 & 1) != 0)
        {
          v15 = (unint64_t *)(v11 + 16);
          v17 = (unint64_t *)(v11 + 176);
        }
        else
        {
          v15 = *(unint64_t **)(v11 + 16);
          v16 = *(_DWORD *)(v11 + 24);
          if (!v16)
          {
            v20 = 0;
            v18 = *(unint64_t **)(v11 + 16);
            v19 = v18;
            goto LABEL_26;
          }
          v17 = &v15[5 * v16];
        }
        v18 = v15;
        while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v18 += 5;
          if (v18 == v17)
          {
            v18 = v17;
            break;
          }
        }
        v15 = v17;
        if ((*(_DWORD *)(v11 + 8) & 1) != 0)
        {
LABEL_25:
          v19 = (unint64_t *)(v11 + 16);
          v20 = 4;
          goto LABEL_26;
        }
      }
      else
      {
        if (v12)
        {
          v13 = v11 + 16;
          v14 = 4;
        }
        else
        {
          v13 = *(_QWORD *)(v11 + 16);
          v14 = *(_DWORD *)(v11 + 24);
        }
        v18 = (unint64_t *)(v13 + 40 * v14);
        v15 = v18;
        if (v12)
          goto LABEL_25;
      }
      v19 = *(unint64_t **)(v11 + 16);
      v20 = *(_DWORD *)(v11 + 24);
LABEL_26:
      v21 = &v19[5 * v20];
      while (v18 != v21)
      {
        v22 = (__n128 *)(v18 + 1);
        v24 = *v18;
        v23 = v18 + 5;
        llvm::InstrProfWriter::addRecord((uint64_t)a1, (unsigned __int8 *)(v11 + 176), *(_QWORD *)v11, v24, v22, 1uLL, (uint64_t)a3, a4);
        while (v23 != v15)
        {
          v25 = *v23;
          v23 += 5;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v18 = v23 - 5;
            goto LABEL_32;
          }
        }
        v18 = v15;
LABEL_32:
        ;
      }
      do
      {
        v26 = v8[1];
        ++v8;
        v11 = v26;
        if (v26)
          v27 = v11 == -8;
        else
          v27 = 1;
      }
      while (v27);
    }
    while (v8 != (uint64_t *)v10);
  }
  v28 = *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112);
  sub_1C5A9D170(&a1[5].i64[1], v28 >> 5);
  v29 = (_BYTE *)a1[7].i64[0];
  if (v28 >> 5 > (unint64_t)((a1[8].i64[0] - (uint64_t)v29) >> 5))
  {
    if (v28 < 0)
      goto LABEL_68;
    v30 = (_BYTE *)a1[7].i64[1];
    v31 = (char *)operator new(v28);
    v32 = &v31[v30 - v29];
    v33 = v32;
    if (v30 != v29)
    {
      v34 = 0;
      do
      {
        v35 = &v32[v34];
        *((_OWORD *)v35 - 2) = *(_OWORD *)&v30[v34 - 32];
        *((_QWORD *)v35 - 2) = *(_QWORD *)&v30[v34 - 16];
        *(v35 - 8) = v30[v34 - 8];
        v34 -= 32;
      }
      while (&v30[v34] != v29);
      v33 = &v32[v34];
    }
    a1[7].i64[0] = (uint64_t)v33;
    a1[7].i64[1] = (uint64_t)v32;
    a1[8].i64[0] = (uint64_t)&v31[32 * (v28 >> 5)];
    if (v29)
      operator delete(v29);
  }
  v37 = *(uint64_t **)(a2 + 112);
  v36 = *(uint64_t **)(a2 + 120);
  while (v37 != v36)
  {
    v39 = *v37;
    v38 = v37 + 1;
    if ((llvm::InstrProfWriter::addMemProfFrame(a1, v39, v38, a3, a4) & 1) == 0)
      return;
    v37 = v38 + 3;
  }
  v40 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64);
  v41 = 0xF0F0F0F0F0F0F0F1 * (v40 >> 4);
  sub_1C5A9D170(&a1[2].i64[1], -252645135 * (v40 >> 4));
  v42 = a1[5].i64[0];
  v43 = a1[4].u64[0];
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v42 - v43) >> 4) < v41)
  {
    if (v41 < 0xF0F0F0F0F0F0F1)
    {
      v44 = a1[4].i64[1];
      v61 = a1 + 5;
      v45 = (char *)operator new(v40);
      v46 = &v45[16 * (v40 >> 4)];
      v47 = &v45[v44 - v43];
      if (v44 == v43)
      {
        v53 = vdupq_n_s64(v43);
        v54 = &v45[v44 - v43];
      }
      else
      {
        v48 = 0;
        do
        {
          v49 = &v47[v48];
          v50 = v44 + v48;
          *(_QWORD *)&v47[v48 - 272] = *(_QWORD *)(v44 + v48 - 272);
          v51 = &v47[v48 - 264];
          *(_QWORD *)v51 = &v47[v48 - 248];
          *(_QWORD *)&v47[v48 - 256] = 0x100000000;
          if (*(_DWORD *)(v44 + v48 - 256))
            sub_1C5A97D14((uint64_t)v51, v50 - 264);
          *((_QWORD *)v49 - 10) = v49 - 64;
          v52 = (uint64_t)(v49 - 80);
          *(_QWORD *)(v52 + 8) = 0x100000000;
          if (*(_DWORD *)(v50 - 72))
            sub_1C5A98068(v52, v44 + v48 - 80);
          v48 -= 272;
        }
        while (v44 + v48 != v43);
        v53 = a1[4];
        v42 = a1[5].i64[0];
        v54 = &v47[v48];
      }
      a1[4].i64[0] = (uint64_t)v54;
      a1[4].i64[1] = (uint64_t)v47;
      v59 = v53;
      a1[5].i64[0] = (uint64_t)v46;
      v60 = v42;
      v58 = v53.i64[0];
      sub_1C5A9D10C((uint64_t)&v58);
      goto LABEL_64;
    }
LABEL_68:
    abort();
  }
LABEL_64:
  v55 = *(uint64_t **)(a2 + 64);
  v56 = *(uint64_t **)(a2 + 72);
  while (v55 != v56)
  {
    llvm::InstrProfWriter::addMemProfRecord((uint64_t)a1, *v55, (uint64_t)(v55 + 1));
    v55 += 34;
  }
}

uint64_t llvm::InstrProfWriter::shouldEncodeData(_BYTE *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t *v8;
  unsigned int v9;
  BOOL v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t *v13;
  _QWORD *i;
  unint64_t *v15;
  unint64_t v16;

  if (!*a1)
    return 1;
  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 > 1u)
  {
    if ((v2 & 1) != 0)
    {
      v4 = (unint64_t *)(a2 + 8);
      v8 = (unint64_t *)(a2 + 168);
    }
    else
    {
      v4 = *(unint64_t **)(a2 + 8);
      v9 = *(_DWORD *)(a2 + 16);
      if (!v9)
      {
        v2 = 0;
        v5 = 0;
        v7 = *(unint64_t **)(a2 + 8);
        v8 = v7;
        goto LABEL_16;
      }
      v8 = &v4[5 * v9];
    }
    v2 = *(_DWORD *)a2 & 1;
    while (*v4 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v4 += 5;
      if (v4 == v8)
      {
        v4 = v8;
        break;
      }
    }
    v7 = v4;
    v4 = *(unint64_t **)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    goto LABEL_16;
  }
  v3 = a2 + 8;
  v4 = *(unint64_t **)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    v6 = 4;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (unint64_t *)(v3 + 40 * v6);
  v8 = v7;
LABEL_16:
  v10 = v2 == 0;
  if (v2)
    v11 = (unint64_t *)(a2 + 8);
  else
    v11 = v4;
  if (v10)
    v12 = v5;
  else
    v12 = 4;
  v13 = &v11[5 * v12];
LABEL_23:
  while (v7 != v13)
  {
    for (i = (_QWORD *)v7[1]; i != (_QWORD *)v7[2]; ++i)
    {
      if (*i)
        return 1;
    }
    v15 = v7 + 5;
    while (v15 != v8)
    {
      v16 = *v15;
      v15 += 5;
      if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v7 = v15 - 5;
        goto LABEL_23;
      }
    }
    v7 = v8;
  }
  return 0;
}

uint64_t llvm::InstrProfWriter::writeImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  llvm::raw_ostream *v28;
  unint64_t v29;
  _QWORD *v30;
  llvm::raw_ostream *v31;
  _QWORD *v32;
  llvm::raw_ostream *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  llvm::raw_ostream *v37;
  int v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  llvm::raw_ostream *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  llvm::raw_ostream *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int *v58;
  void *v59;
  unsigned int v60;
  int *v61;
  unsigned int v62;
  unint64_t *v63;
  unsigned int v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t *v67;
  unsigned int v68;
  char *v69;
  uint64_t v70;
  uint64_t (*v71)(llvm *, const void *);
  uint64_t (*v72)(llvm *, const void *);
  char v73;
  unsigned int v74;
  char v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  int *v79;
  int v80;
  int *v81;
  unsigned int v82;
  unint64_t *v83;
  unsigned int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unsigned int v88;
  unint64_t *v89;
  uint64_t ***v90;
  void **v91;
  void **v92;
  void *v93;
  unsigned int *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  llvm::raw_ostream *v108;
  llvm::raw_ostream *v109;
  llvm::raw_ostream *v110;
  uint64_t v111;
  llvm::raw_ostream *v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  llvm::raw_ostream *v117;
  unint64_t v118;
  uint64_t *v119;
  void *v120;
  uint64_t *v121;
  uint64_t *i;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  size_t v128;
  unint64_t v129;
  unint64_t v130;
  llvm::raw_ostream *v131;
  unint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  char *v136;
  uint64_t j;
  unsigned int v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  uint64_t *v159;
  uint64_t *k;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  char *v165;
  size_t v166;
  unint64_t v167;
  unint64_t v168;
  llvm::raw_ostream *v169;
  unint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  char *v174;
  uint64_t m;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char **v190;
  char **v191;
  _QWORD *v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  char **v196;
  char **v197;
  _OWORD *v198;
  uint64_t v199;
  _OWORD *v200;
  void *v201;
  uint64_t v202;
  uint64_t *n;
  uint64_t v204;
  uint64_t v205;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t *v212;
  unsigned int v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t *v216;
  unsigned int v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t v234;
  size_t v235;
  uint64_t v236;
  int *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD v248[2];
  __int128 v249;
  __int128 v250;
  _QWORD *v251;
  _QWORD v252[5];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  _QWORD *v257;
  _QWORD v258[5];
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  char v263[8];
  unint64_t *v264;
  int v265;
  uint64_t v266;
  uint64_t *v267;
  int v268;
  uint64_t v269;
  unint64_t *v270;
  int v271;
  char v272[16];
  _QWORD v273[4];
  _QWORD v274[6];
  _QWORD v275[2];
  void *v276;
  char v277[16];
  _QWORD v278[2];
  char *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD v284[2];
  void *v285;
  void *v286[2];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  __int128 v297;
  _QWORD v298[4];
  _QWORD v299[6];
  _QWORD v300[2];
  char *v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v298[0] = 0;
  v298[1] = 0;
  v298[2] = v299;
  v298[3] = 0x400000000;
  v299[4] = v300;
  v299[5] = 0;
  v300[0] = 0;
  v300[1] = 0;
  v297 = xmmword_1C8668040;
  v5 = (char *)malloc_type_calloc(0x40uLL, 0x18uLL, 0x6D9A4F0CuLL);
  if (!v5)
    goto LABEL_245;
  v301 = v5;
  v6 = operator new(0x40uLL);
  v6[2] = xmmword_1C8668104;
  v6[3] = unk_1C8668114;
  *v6 = xmmword_1C86680E4;
  v6[1] = unk_1C86680F4;
  v257 = v258;
  v258[0] = 0;
  v258[1] = 0;
  v258[2] = v6;
  v258[3] = v6 + 4;
  v258[4] = v6 + 4;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v7 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(v7 + 8) = &v257;
  v8 = operator new(0x40uLL);
  *v8 = xmmword_1C86680E4;
  v8[1] = unk_1C86680F4;
  v8[2] = xmmword_1C8668104;
  v8[3] = unk_1C8668114;
  v251 = v252;
  v252[0] = 0;
  v252[1] = 0;
  v252[2] = v8;
  v252[3] = v8 + 4;
  v252[4] = v8 + 4;
  v253 = 0u;
  v254 = 0u;
  v255 = 0u;
  v256 = 0u;
  *(_QWORD *)(v7 + 16) = &v251;
  v9 = *(unsigned int *)(a1 + 16);
  v233 = a1;
  v231 = a2;
  v10 = *(_QWORD **)(a1 + 8);
  if ((_DWORD)v9)
  {
    while (!*v10 || *v10 == -8)
      ++v10;
  }
  v11 = *(_QWORD *)(a1 + 8) + 8 * v9;
  if (v10 != (_QWORD *)v11)
  {
    v12 = (_QWORD *)*v10;
    do
    {
      v13 = v12 + 1;
      if (llvm::InstrProfWriter::shouldEncodeData((_BYTE *)a1, (uint64_t)(v12 + 1)))
      {
        v16 = *v12;
        v14 = (int *)(v12 + 22);
        v15 = v16;
        v17 = v297;
        ++*((_QWORD *)&v297 + 1);
        if (3 * (uint64_t)v297 <= (unint64_t)(4 * *((_QWORD *)&v297 + 1)))
        {
          sub_1C5A9D1BC((uint64_t *)&v297, 2 * v297);
          v17 = v297;
        }
        v18 = v301;
        v19 = (_QWORD *)sub_1C484358C((uint64_t)v298, 40, 3);
        *v19 = v14;
        v19[1] = v15;
        v19[2] = v13;
        v19[3] = 0;
        *(_OWORD *)v286 = xmmword_1C85F4BB0;
        *(_QWORD *)&v287 = 0;
        llvm::MD5::update((int *)v286, v14, v15);
        llvm::MD5::final((int *)v286, (int *)v277);
        v20 = *(_QWORD *)v277;
        v19[4] = *(_QWORD *)v277;
        v21 = &v18[24 * (v20 & (v17 - 1))];
        v19[3] = *((_QWORD *)v21 + 2);
        ++*((_DWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = v19;
      }
      do
      {
        v22 = (_QWORD *)v10[1];
        ++v10;
        v12 = v22;
        if (v22)
          v23 = v12 + 1 == 0;
        else
          v23 = 1;
      }
      while (v23);
    }
    while (v10 != (_QWORD *)v11);
  }
  v24 = 0;
  v25 = *(_DWORD *)(a1 + 136);
  v26 = 8;
  if ((v25 & 2) != 0)
    v26 = 0x100000000000008;
  v248[0] = 0x8169666F72706CFFLL;
  v248[1] = v26 & 0xFDFFFFFFFFFFFFFFLL | ((((unint64_t)(v25 & 8) >> 3) & 1) << 57) | ((unint64_t)(v25 & 0x74) << 56);
  v249 = 0u;
  v250 = 0u;
  do
  {
    v27 = (void *)v248[v24];
    v28 = *(llvm::raw_ostream **)(v231 + 16);
    v29 = bswap64((unint64_t)v27);
    if ((*(_DWORD *)(v231 + 24) - 1) >= 2)
      v27 = (void *)v29;
    v286[0] = v27;
    llvm::raw_ostream::write(v28, (const char *)v286, 8uLL);
    ++v24;
  }
  while (v24 != 4);
  v30 = *(_QWORD **)(v231 + 8);
  v229 = (*(uint64_t (**)(_QWORD *))(*v30 + 80))(v30) + v30[4];
  v230 = v30[2];
  v31 = *(llvm::raw_ostream **)(v231 + 16);
  v286[0] = 0;
  llvm::raw_ostream::write(v31, (const char *)v286, 8uLL);
  v32 = *(_QWORD **)(v231 + 8);
  v227 = (*(uint64_t (**)(_QWORD *))(*v32 + 80))(v32) + v32[4];
  v228 = v32[2];
  v33 = *(llvm::raw_ostream **)(v231 + 16);
  v286[0] = 0;
  llvm::raw_ostream::write(v33, (const char *)v286, 8uLL);
  v34 = *(_QWORD **)(v231 + 8);
  v35 = v231;
  v225 = (*(uint64_t (**)(_QWORD *))(*v34 + 80))(v34) + v34[4];
  v226 = v34[2];
  v36 = 56;
  do
  {
    v37 = *(llvm::raw_ostream **)(v231 + 16);
    v286[0] = 0;
    llvm::raw_ostream::write(v37, (const char *)v286, 8uLL);
    --v36;
  }
  while (v36);
  if ((*(_BYTE *)(a1 + 136) & 8) != 0)
  {
    v41 = *(_QWORD **)(v231 + 8);
    v42 = (*(uint64_t (**)(_QWORD *))(*v41 + 80))(v41);
    v43 = v41[2];
    v35 = v231;
    v44 = v42 + v41[4];
    v45 = 56;
    do
    {
      v46 = *(llvm::raw_ostream **)(v231 + 16);
      v286[0] = 0;
      llvm::raw_ostream::write(v46, (const char *)v286, 8uLL);
      --v45;
    }
    while (v45);
    v39 = v44 - v43;
    v38 = 56;
    a1 = v233;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  if (*((_QWORD *)&v297 + 1) >= 3uLL)
  {
    v48 = (4 * *((_QWORD *)&v297 + 1) / 6uLL) | (4 * *((_QWORD *)&v297 + 1) / 3uLL) | (((4
                                                                                           * *((_QWORD *)&v297 + 1)
                                                                                           / 6uLL) | (4 * *((_QWORD *)&v297 + 1) / 3uLL)) >> 2);
    v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
    v47 = (((v49 | (v49 >> 16)) >> 32) | v49 | (v49 >> 16)) + 1;
  }
  else
  {
    v47 = 1;
  }
  v50 = *(llvm::raw_ostream **)(v35 + 8);
  v51 = *(int **)(a1 + 144);
  v224 = v38;
  v223 = v39;
  if (v47 != (_QWORD)v297)
  {
    sub_1C5A9D1BC((uint64_t *)&v297, v47);
    v47 = v297;
  }
  if (v47)
  {
    v52 = 0;
    v237 = v51;
    while (1)
    {
      v234 = v52;
      v53 = &v301[24 * v52];
      v55 = *((_QWORD *)v53 + 2);
      v54 = (uint64_t *)(v53 + 16);
      if (v55)
      {
        v56 = &v301[24 * v52];
        *(_QWORD *)v56 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v50 + 80))(v50)
                       + *((_QWORD *)v50 + 4)
                       - *((_QWORD *)v50 + 2);
        LOWORD(v286[0]) = *((_DWORD *)v56 + 2);
        llvm::raw_ostream::write(v50, (const char *)v286, 2uLL);
        v57 = *v54;
        if (v57)
          break;
      }
LABEL_105:
      v52 = v234 + 1;
      if (v234 + 1 >= (unint64_t)v297)
        goto LABEL_106;
    }
    while (1)
    {
      v236 = v57;
      v286[0] = *(void **)(v57 + 32);
      llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
      v58 = *(int **)(v57 + 16);
      v286[0] = *(void **)(v57 + 8);
      v59 = v286[0];
      llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
      v60 = *v58;
      v235 = (size_t)v59;
      if (*v58 <= 1)
        break;
      if ((v60 & 1) != 0)
      {
        v63 = (unint64_t *)(v58 + 2);
        v65 = (unint64_t *)(v58 + 42);
LABEL_49:
        v66 = v63;
        while (*v66 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v66 += 5;
          if (v66 == v65)
          {
            v66 = v65;
            break;
          }
        }
        v63 = v65;
        if ((*v58 & 1) == 0)
        {
LABEL_54:
          v67 = (unint64_t *)*((_QWORD *)v58 + 1);
          v68 = v58[4];
          goto LABEL_58;
        }
LABEL_57:
        v67 = (unint64_t *)(v58 + 2);
        v68 = 4;
        goto LABEL_58;
      }
      v63 = (unint64_t *)*((_QWORD *)v58 + 1);
      v64 = v58[4];
      if (v64)
      {
        v65 = &v63[5 * v64];
        goto LABEL_49;
      }
      v68 = 0;
      v66 = (unint64_t *)*((_QWORD *)v58 + 1);
      v67 = v66;
LABEL_58:
      v238 = &v67[5 * v68];
      if (v66 == v238)
      {
        v69 = 0;
      }
      else
      {
        v69 = 0;
        do
        {
          v242 = v69;
          v70 = 0;
          v240 = v66[1];
          v239 = v66[2];
          v71 = (uint64_t (*)(llvm *, const void *))off_1EF8EE318[0];
          v72 = (uint64_t (*)(llvm *, const void *))off_1EF8EE320;
          v73 = 1;
          v74 = 8;
          do
          {
            v75 = v73;
            v76 = v71((llvm *)(v66 + 1), (const void *)v70);
            if (v76)
              v74 += ((v76 + 15) & 0xFFFFFFF8) + 16 * v72((llvm *)(v66 + 1), (const void *)v70);
            v73 = 0;
            v70 = 1;
          }
          while ((v75 & 1) != 0);
          v69 = &v242[v239 - v240 + 16 + v74];
          v77 = v66 + 5;
          v51 = v237;
          while (v77 != v63)
          {
            v78 = *v77;
            v77 += 5;
            if (v78 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v66 = v77 - 5;
              goto LABEL_69;
            }
          }
          v66 = v63;
LABEL_69:
          ;
        }
        while (v66 != v238);
      }
      v286[0] = v69;
      llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
      llvm::raw_ostream::write(v50, *(const char **)v236, v235);
      v79 = *(int **)(v236 + 16);
      v80 = *v79;
      if (*v79 <= 1)
      {
        if (v80)
        {
          v81 = v79 + 2;
          v82 = 4;
        }
        else
        {
          v81 = (int *)*((_QWORD *)v79 + 1);
          v82 = v79[4];
        }
        v86 = (unint64_t *)&v81[10 * v82];
        v83 = v86;
        if (!v80)
          goto LABEL_84;
LABEL_87:
        v87 = (unint64_t *)(v79 + 2);
        v88 = 4;
        goto LABEL_88;
      }
      if ((v80 & 1) != 0)
      {
        v83 = (unint64_t *)(v79 + 2);
        v85 = (unint64_t *)(v79 + 42);
        goto LABEL_79;
      }
      v83 = (unint64_t *)*((_QWORD *)v79 + 1);
      v84 = v79[4];
      if (v84)
      {
        v85 = &v83[5 * v84];
LABEL_79:
        v86 = v83;
        while (*v86 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v86 += 5;
          if (v86 == v85)
          {
            v86 = v85;
            break;
          }
        }
        v83 = v85;
        if ((*v79 & 1) == 0)
        {
LABEL_84:
          v87 = (unint64_t *)*((_QWORD *)v79 + 1);
          v88 = v79[4];
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      v88 = 0;
      v86 = v83;
      v87 = v83;
LABEL_88:
      v89 = &v87[5 * v88];
LABEL_89:
      while (v86 != v89)
      {
        if ((*v86 & 0x1000000000000000) != 0)
          v90 = (uint64_t ***)(v51 + 4);
        else
          v90 = (uint64_t ***)(v51 + 2);
        llvm::InstrProfSummaryBuilder::addRecord(*v90, (uint64_t)(v86 + 1));
        v286[0] = (void *)*v86;
        llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
        v286[0] = (void *)((uint64_t)(v86[2] - v86[1]) >> 3);
        llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
        v91 = (void **)v86[1];
        v92 = (void **)v86[2];
        while (v91 != v92)
        {
          v93 = *v91++;
          v286[0] = v93;
          llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
        }
        qword_1EF8EE308 = (uint64_t)(v86 + 1);
        v94 = llvm::serializeValueProfDataFrom(&qword_1EF8EE308, 0);
        v95 = *v94;
        llvm::ValueProfData::swapBytesFromHost(v94, *v51);
        llvm::raw_ostream::write(v50, (const char *)v94, v95);
        operator delete(v94);
        v96 = v86 + 5;
        while (v96 != v83)
        {
          v97 = *v96;
          v96 += 5;
          if (v97 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v86 = v96 - 5;
            goto LABEL_89;
          }
        }
        v86 = v83;
      }
      v57 = *(_QWORD *)(v236 + 24);
      if (!v57)
        goto LABEL_105;
    }
    if (v60)
    {
      v61 = v58 + 2;
      v62 = 4;
    }
    else
    {
      v61 = (int *)*((_QWORD *)v58 + 1);
      v62 = v58[4];
    }
    v66 = (unint64_t *)&v61[10 * v62];
    v63 = v66;
    if (!v60)
      goto LABEL_54;
    goto LABEL_57;
  }
LABEL_106:
  v98 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v50 + 80))(v50);
  v99 = *((_QWORD *)v50 + 4);
  v100 = *((_QWORD *)v50 + 2);
  v101 = v99 - v100 + v98;
  v102 = (v101 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v102 != v101)
  {
    v103 = v98 + v99 - v100 - v102;
    do
    {
      LOBYTE(v286[0]) = 0;
      llvm::raw_ostream::write(v50, (const char *)v286, 1uLL);
      v104 = __CFADD__(v103++, 1);
    }
    while (!v104);
  }
  v286[0] = (void *)v297;
  llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
  v286[0] = *((void **)&v297 + 1);
  llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
  if ((_QWORD)v297)
  {
    v105 = 0;
    v106 = 0;
    do
    {
      v286[0] = *(void **)&v301[v105];
      llvm::raw_ostream::write(v50, (const char *)v286, 8uLL);
      ++v106;
      v105 += 24;
    }
    while (v106 < (unint64_t)v297);
  }
  v246 = 0;
  v247 = v102;
  if ((*(_BYTE *)(v233 + 136) & 0x40) != 0)
  {
    v107 = *(_QWORD **)(v231 + 8);
    v246 = (*(uint64_t (**)(_QWORD *))(*v107 + 80))(v107) + v107[4] - v107[2];
    v108 = *(llvm::raw_ostream **)(v231 + 16);
    v286[0] = 0;
    llvm::raw_ostream::write(v108, (const char *)v286, 8uLL);
    v109 = *(llvm::raw_ostream **)(v231 + 16);
    v286[0] = 0;
    llvm::raw_ostream::write(v109, (const char *)v286, 8uLL);
    v110 = *(llvm::raw_ostream **)(v231 + 16);
    v286[0] = 0;
    llvm::raw_ostream::write(v110, (const char *)v286, 8uLL);
    v286[0] = &v287;
    v287 = xmmword_1C6A5FC00;
    v288 = xmmword_1C8668050;
    v289 = xmmword_1C8668060;
    v290 = xmmword_1C8668070;
    v291 = xmmword_1C8668080;
    v292 = xmmword_1C8668090;
    v293 = xmmword_1C850F310;
    v294 = xmmword_1C85F6840;
    v295 = xmmword_1C86680A0;
    v111 = 19;
    v296 = 19;
    v286[1] = (void *)0x1400000013;
    v112 = *(llvm::raw_ostream **)(v231 + 16);
    if ((*(_DWORD *)(v231 + 24) - 1) >= 2)
      v111 = 0x1300000000000000;
    *(_QWORD *)v277 = v111;
    llvm::raw_ostream::write(v112, v277, 8uLL);
    if (LODWORD(v286[1]))
    {
      v113 = (unint64_t *)v286[0];
      v114 = 8 * LODWORD(v286[1]);
      do
      {
        v116 = *v113++;
        v115 = v116;
        v117 = *(llvm::raw_ostream **)(v231 + 16);
        v118 = bswap64(v116);
        if ((*(_DWORD *)(v231 + 24) - 1) >= 2)
          v115 = v118;
        *(_QWORD *)v277 = v115;
        llvm::raw_ostream::write(v117, v277, 8uLL);
        v114 -= 8;
      }
      while (v114);
    }
    v119 = (uint64_t *)operator new();
    *v119 = (uint64_t)v286;
    v278[1] = 0;
    v278[0] = 0;
    v279 = (char *)&v281;
    v280 = 0x400000000;
    v282 = v284;
    v283 = 0;
    v284[1] = 0;
    v284[0] = 0;
    *(_OWORD *)v277 = xmmword_1C8668040;
    v120 = malloc_type_calloc(0x40uLL, 0x18uLL, 0x6D9A4F0CuLL);
    if (v120)
    {
      v285 = v120;
      v121 = *(uint64_t **)(v233 + 64);
      for (i = *(uint64_t **)(v233 + 72); v121 != i; v121 += 34)
      {
        v123 = *v121;
        v124 = *(_QWORD *)v277;
        ++*(_QWORD *)&v277[8];
        if (3 * *(_QWORD *)v277 <= (unint64_t)(4 * *(_QWORD *)&v277[8]))
        {
          sub_1C5A9D294((uint64_t *)v277, 2 * *(_QWORD *)v277);
          v124 = *(_QWORD *)v277;
        }
        v125 = (char *)v285;
        v126 = (_QWORD *)sub_1C484358C((uint64_t)v278, 288, 3);
        *v126 = v123;
        sub_1C6309018(v126 + 1, (uint64_t)(v121 + 1));
        v126[35] = v123;
        v127 = &v125[24 * ((v124 - 1) & v123)];
        v126[34] = *((_QWORD *)v127 + 2);
        ++*((_DWORD *)v127 + 2);
        *((_QWORD *)v127 + 2) = v126;
      }
      if (*(_QWORD *)&v277[8] >= 3uLL)
      {
        v129 = (4 * *(_QWORD *)&v277[8] / 6uLL) | (4 * *(_QWORD *)&v277[8] / 3uLL) | (((4
                                                                                          * *(_QWORD *)&v277[8]
                                                                                          / 6uLL) | (4 * *(_QWORD *)&v277[8] / 3uLL)) >> 2);
        v130 = v129 | (v129 >> 4) | ((v129 | (v129 >> 4)) >> 8);
        v128 = (((v130 | (v130 >> 16)) >> 32) | v130 | (v130 >> 16)) + 1;
      }
      else
      {
        v128 = 1;
      }
      v131 = *(llvm::raw_ostream **)(v231 + 8);
      if (v128 != *(_QWORD *)v277)
      {
        sub_1C5A9D294((uint64_t *)v277, v128);
        v128 = *(_QWORD *)v277;
      }
      if (v128)
      {
        v132 = 0;
        do
        {
          v133 = (char *)v285 + 24 * v132;
          v135 = *((_QWORD *)v133 + 2);
          v134 = (uint64_t *)(v133 + 16);
          if (v135)
          {
            v136 = (char *)v285 + 24 * v132;
            *(_QWORD *)v136 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v131 + 80))(v131)
                            + *((_QWORD *)v131 + 4)
                            - *((_QWORD *)v131 + 2);
            *(_WORD *)v272 = *((_DWORD *)v136 + 2);
            llvm::raw_ostream::write(v131, v272, 2uLL);
            for (j = *v134; j; j = *(_QWORD *)(j + 272))
            {
              *(_QWORD *)v272 = *(_QWORD *)(j + 280);
              llvm::raw_ostream::write(v131, v272, 8uLL);
              *(_QWORD *)v272 = 8;
              llvm::raw_ostream::write(v131, v272, 8uLL);
              v138 = *(_DWORD *)(j + 16);
              if (v138)
              {
                v139 = 168 * v138;
                v140 = (unsigned int *)(*(_QWORD *)(j + 8) + 8);
                v141 = 8;
                do
                {
                  v142 = *v140;
                  v140 += 42;
                  v141 += 8 * v142 + 108;
                  v139 -= 168;
                }
                while (v139);
                v143 = v141 + 8;
              }
              else
              {
                v143 = 16;
              }
              v144 = *(unsigned int *)(j + 200);
              if ((_DWORD)v144)
              {
                v145 = v144 << 6;
                v146 = (unsigned int *)(*(_QWORD *)(j + 192) + 8);
                do
                {
                  v147 = *v146;
                  v146 += 16;
                  v143 += 8 * v147 + 8;
                  v145 -= 64;
                }
                while (v145);
              }
              *(_QWORD *)v272 = v143;
              llvm::raw_ostream::write(v131, v272, 8uLL);
              *(_QWORD *)v272 = *(_QWORD *)j;
              llvm::raw_ostream::write(v131, v272, 8uLL);
              llvm::memprof::IndexedMemProfRecord::serialize((uint64_t *)(j + 8), *v119, v131);
            }
          }
          ++v132;
        }
        while (v132 < *(_QWORD *)v277);
      }
      v148 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v131 + 80))(v131);
      v149 = *((_QWORD *)v131 + 4);
      v150 = *((_QWORD *)v131 + 2);
      v151 = v149 - v150 + v148;
      v152 = (v151 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v152 != v151)
      {
        v153 = v148 + v149 - v150 - v152;
        do
        {
          v272[0] = 0;
          llvm::raw_ostream::write(v131, v272, 1uLL);
          v104 = __CFADD__(v153++, 1);
        }
        while (!v104);
      }
      *(_QWORD *)v272 = *(_QWORD *)v277;
      llvm::raw_ostream::write(v131, v272, 8uLL);
      *(_QWORD *)v272 = *(_QWORD *)&v277[8];
      llvm::raw_ostream::write(v131, v272, 8uLL);
      if (*(_QWORD *)v277)
      {
        v154 = 0;
        v155 = 0;
        do
        {
          *(_QWORD *)v272 = *(_QWORD *)((char *)v285 + v154);
          llvm::raw_ostream::write(v131, v272, 8uLL);
          ++v155;
          v154 += 24;
        }
        while (v155 < *(_QWORD *)v277);
      }
      v245 = v152;
      v156 = *(_QWORD **)(v231 + 8);
      v244 = (*(uint64_t (**)(_QWORD *))(*v156 + 80))(v156) + v156[4] - v156[2];
      v157 = operator new();
      v273[1] = 0;
      v273[0] = 0;
      v273[2] = v274;
      v273[3] = 0x400000000;
      v274[4] = v275;
      v274[5] = 0;
      v275[1] = 0;
      v275[0] = 0;
      *(_OWORD *)v272 = xmmword_1C8668040;
      v158 = malloc_type_calloc(0x40uLL, 0x18uLL, 0x6D9A4F0CuLL);
      if (v158)
      {
        v276 = v158;
        v159 = *(uint64_t **)(v233 + 112);
        for (k = *(uint64_t **)(v233 + 120); v159 != k; v159 += 4)
        {
          v161 = *v159;
          v162 = *(_QWORD *)v272;
          ++*(_QWORD *)&v272[8];
          if (3 * *(_QWORD *)v272 <= (unint64_t)(4 * *(_QWORD *)&v272[8]))
          {
            sub_1C5A9D36C((uint64_t *)v272, 2 * *(_QWORD *)v272);
            v162 = *(_QWORD *)v272;
          }
          v163 = (char *)v276;
          v164 = sub_1C484358C((uint64_t)v273, 48, 3);
          *(_QWORD *)v164 = v161;
          *(_QWORD *)(v164 + 8) = v159[1];
          *(_QWORD *)(v164 + 16) = v159[2];
          *(_BYTE *)(v164 + 24) = *((_BYTE *)v159 + 24);
          *(_QWORD *)(v164 + 40) = v161;
          v165 = &v163[24 * ((v162 - 1) & v161)];
          *(_QWORD *)(v164 + 32) = *((_QWORD *)v165 + 2);
          ++*((_DWORD *)v165 + 2);
          *((_QWORD *)v165 + 2) = v164;
        }
        if (*(_QWORD *)&v272[8] >= 3uLL)
        {
          v167 = (4 * *(_QWORD *)&v272[8] / 6uLL) | (4 * *(_QWORD *)&v272[8] / 3uLL) | (((4
                                                                                            * *(_QWORD *)&v272[8]
                                                                                            / 6uLL) | (4 * *(_QWORD *)&v272[8] / 3uLL)) >> 2);
          v168 = v167 | (v167 >> 4) | ((v167 | (v167 >> 4)) >> 8);
          v166 = (((v168 | (v168 >> 16)) >> 32) | v168 | (v168 >> 16)) + 1;
        }
        else
        {
          v166 = 1;
        }
        v241 = v157;
        v169 = *(llvm::raw_ostream **)(v231 + 8);
        if (v166 != *(_QWORD *)v272)
        {
          sub_1C5A9D36C((uint64_t *)v272, v166);
          v166 = *(_QWORD *)v272;
        }
        if (v166)
        {
          v170 = 0;
          do
          {
            v171 = (char *)v276 + 24 * v170;
            v173 = *((_QWORD *)v171 + 2);
            v172 = (uint64_t *)(v171 + 16);
            if (v173)
            {
              v174 = (char *)v276 + 24 * v170;
              *(_QWORD *)v174 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v169 + 80))(v169)
                              + *((_QWORD *)v169 + 4)
                              - *((_QWORD *)v169 + 2);
              *(_WORD *)v263 = *((_DWORD *)v174 + 2);
              llvm::raw_ostream::write(v169, v263, 2uLL);
              for (m = *v172; m; m = *(_QWORD *)(m + 32))
              {
                *(_QWORD *)v263 = *(_QWORD *)(m + 40);
                llvm::raw_ostream::write(v169, v263, 8uLL);
                *(_QWORD *)v263 = 8;
                llvm::raw_ostream::write(v169, v263, 8uLL);
                *(_QWORD *)v263 = 17;
                llvm::raw_ostream::write(v169, v263, 8uLL);
                *(_QWORD *)v263 = *(_QWORD *)m;
                llvm::raw_ostream::write(v169, v263, 8uLL);
                *(_QWORD *)v263 = *(_QWORD *)(m + 8);
                llvm::raw_ostream::write(v169, v263, 8uLL);
                *(_DWORD *)v263 = *(_DWORD *)(m + 16);
                llvm::raw_ostream::write(v169, v263, 4uLL);
                *(_DWORD *)v263 = *(_DWORD *)(m + 20);
                llvm::raw_ostream::write(v169, v263, 4uLL);
                v263[0] = *(_BYTE *)(m + 24);
                llvm::raw_ostream::write(v169, v263, 1uLL);
              }
            }
            ++v170;
          }
          while (v170 < *(_QWORD *)v272);
        }
        v176 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v169 + 80))(v169);
        v177 = *((_QWORD *)v169 + 4);
        v178 = *((_QWORD *)v169 + 2);
        v179 = v177 - v178 + v176;
        v180 = (v179 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v180 != v179)
        {
          v181 = v176 + v177 - v178 - v180;
          do
          {
            v263[0] = 0;
            llvm::raw_ostream::write(v169, v263, 1uLL);
            v104 = __CFADD__(v181++, 1);
          }
          while (!v104);
        }
        *(_QWORD *)v263 = *(_QWORD *)v272;
        llvm::raw_ostream::write(v169, v263, 8uLL);
        *(_QWORD *)v263 = *(_QWORD *)&v272[8];
        llvm::raw_ostream::write(v169, v263, 8uLL);
        if (*(_QWORD *)v272)
        {
          v182 = 0;
          v183 = 0;
          do
          {
            *(_QWORD *)v263 = *(_QWORD *)((char *)v276 + v182);
            llvm::raw_ostream::write(v169, v263, 8uLL);
            ++v183;
            v182 += 24;
          }
          while (v183 < *(_QWORD *)v272);
        }
        v243 = v180;
        *(_QWORD *)v263 = v246;
        v264 = &v245;
        v265 = 1;
        v266 = v246 + 8;
        v267 = &v244;
        v268 = 1;
        v269 = v246 + 16;
        v270 = &v243;
        v271 = 1;
        sub_1C5A9B170((std::string *)v231, (uint64_t)v263, 3);
        free(v276);
        sub_1C4926A50((uint64_t)v273);
        sub_1C4926AE8((uint64_t)v273);
        MEMORY[0x1CAA32FC0](v241, 0xC400A2AC0F1);
        free(v285);
        if ((_DWORD)v280)
        {
          v184 = v279;
          v185 = &v279[8 * v280];
          do
          {
            v186 = *(_QWORD *)v184;
            if (*(_QWORD *)v184 == *(_QWORD *)&v279[8 * v280 - 8])
            {
              v188 = v278[0];
            }
            else
            {
              v187 = ((unint64_t)(v184 - v279) >> 10) & 0x1FFFFFF;
              if (v187 >= 0x1E)
                LOBYTE(v187) = 30;
              v188 = v186 + (4096 << v187);
            }
            v189 = (v186 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v189 + 288 <= v188)
            {
              v190 = (char **)(v189 + 192);
              do
              {
                sub_1C61BE804(v190);
                sub_1C63089E8(v190 - 23);
                v191 = v190 + 48;
                v190 += 36;
              }
              while ((unint64_t)v191 <= v188);
            }
            v184 += 8;
          }
          while (v184 != v185);
        }
        if ((_DWORD)v283)
        {
          v192 = v282;
          v193 = &v282[2 * v283];
          do
          {
            v194 = (*v192 + 7) & 0xFFFFFFFFFFFFFFF8;
            v195 = *v192 + v192[1];
            if (v194 + 288 <= v195)
            {
              v196 = (char **)(v194 + 192);
              do
              {
                sub_1C61BE804(v196);
                sub_1C63089E8(v196 - 23);
                v197 = v196 + 48;
                v196 += 36;
              }
              while ((unint64_t)v197 <= v195);
            }
            v192 += 2;
          }
          while (v192 != v193);
        }
        sub_1C4926A50((uint64_t)v278);
        sub_1C4926AE8((uint64_t)v278);
        MEMORY[0x1CAA32FC0](v119, 0x20C4093837F09);
        if (v286[0] != &v287)
          free(v286[0]);
        goto LABEL_194;
      }
    }
LABEL_245:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_194:
  v198 = operator new(0x1C0uLL);
  *v198 = 0u;
  v198[1] = 0u;
  v198[2] = 0u;
  v198[3] = 0u;
  v198[4] = 0u;
  v198[5] = 0u;
  v198[6] = 0u;
  v198[7] = 0u;
  v198[8] = 0u;
  v198[9] = 0u;
  v198[10] = 0u;
  v198[11] = 0u;
  v198[12] = 0u;
  v198[13] = 0u;
  v198[14] = 0u;
  v198[15] = 0u;
  v198[16] = 0u;
  v198[17] = 0u;
  v198[18] = 0u;
  v198[19] = 0u;
  v198[20] = 0u;
  v198[21] = 0u;
  v198[22] = 0u;
  v198[23] = 0u;
  v198[24] = 0u;
  v198[25] = 0u;
  v198[26] = 0u;
  v198[27] = 0u;
  llvm::InstrProfSummaryBuilder::getSummary((llvm::InstrProfSummaryBuilder *)&v257, (uint64_t *)v277);
  sub_1C5A9B2F0((uint64_t)v198, *(_QWORD **)v277);
  v199 = *(_QWORD *)(v233 + 144);
  *(_QWORD *)(v199 + 8) = 0;
  if ((*(_BYTE *)(v233 + 136) & 8) != 0)
  {
    v200 = operator new(0x1C0uLL);
    *v200 = 0u;
    v200[1] = 0u;
    v200[2] = 0u;
    v200[3] = 0u;
    v200[4] = 0u;
    v200[5] = 0u;
    v200[6] = 0u;
    v200[7] = 0u;
    v200[8] = 0u;
    v200[9] = 0u;
    v200[10] = 0u;
    v200[11] = 0u;
    v200[12] = 0u;
    v200[13] = 0u;
    v200[14] = 0u;
    v200[15] = 0u;
    v200[16] = 0u;
    v200[17] = 0u;
    v200[18] = 0u;
    v200[19] = 0u;
    v200[20] = 0u;
    v200[21] = 0u;
    v200[22] = 0u;
    v200[23] = 0u;
    v200[24] = 0u;
    v200[25] = 0u;
    v200[26] = 0u;
    v200[27] = 0u;
    llvm::InstrProfSummaryBuilder::getSummary((llvm::InstrProfSummaryBuilder *)&v251, (uint64_t *)v286);
    v201 = v286[0];
    sub_1C5A9B2F0((uint64_t)v200, (_QWORD *)v286[0]);
    v286[0] = 0;
    sub_1C4E5DDC4((uint64_t)v286, (uint64_t)v201);
    v199 = *(_QWORD *)(v233 + 144);
  }
  else
  {
    v200 = 0;
  }
  *(_QWORD *)(v199 + 16) = 0;
  v286[0] = (void *)(v229 - v230);
  v286[1] = &v247;
  LODWORD(v287) = 1;
  *((_QWORD *)&v287 + 1) = v227 - v228;
  *(_QWORD *)&v288 = &v246;
  DWORD2(v288) = 1;
  *(_QWORD *)&v289 = v225 - v226;
  *((_QWORD *)&v289 + 1) = v198;
  LODWORD(v290) = 56;
  *((_QWORD *)&v290 + 1) = v223;
  *(_QWORD *)&v291 = v200;
  DWORD2(v291) = v224;
  sub_1C5A9B170((std::string *)v231, (uint64_t)v286, 4);
  v202 = *(unsigned int *)(v233 + 16);
  if ((_DWORD)v202)
  {
    for (n = *(uint64_t **)(v233 + 8); !*n || *n == -8; ++n)
      ;
  }
  else
  {
    n = *(uint64_t **)(v233 + 8);
  }
  v204 = *(_QWORD *)(v233 + 8) + 8 * v202;
  if (n != (uint64_t *)v204)
  {
    v208 = *n;
    while (1)
    {
      v209 = *(_DWORD *)(v208 + 8);
      if (v209 <= 1)
        break;
      if ((v209 & 1) != 0)
      {
        v212 = (unint64_t *)(v208 + 16);
        v214 = (unint64_t *)(v208 + 176);
LABEL_221:
        v215 = v212;
        while (*v215 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v215 += 5;
          if (v215 == v214)
          {
            v215 = v214;
            break;
          }
        }
        v212 = v214;
        if ((*(_DWORD *)(v208 + 8) & 1) == 0)
        {
LABEL_226:
          v216 = *(unint64_t **)(v208 + 16);
          v217 = *(_DWORD *)(v208 + 24);
          goto LABEL_230;
        }
LABEL_229:
        v216 = (unint64_t *)(v208 + 16);
        v217 = 4;
        goto LABEL_230;
      }
      v212 = *(unint64_t **)(v208 + 16);
      v213 = *(_DWORD *)(v208 + 24);
      if (v213)
      {
        v214 = &v212[5 * v213];
        goto LABEL_221;
      }
      v217 = 0;
      v215 = v212;
      v216 = v212;
LABEL_230:
      v218 = &v216[5 * v217];
LABEL_231:
      while (v215 != v218)
      {
        llvm::InstrProfWriter::validateRecord((const llvm::InstrProfRecord *)(v215 + 1), a3);
        if (*a3)
          goto LABEL_201;
        v219 = v215 + 5;
        while (v219 != v212)
        {
          v220 = *v219;
          v219 += 5;
          if (v220 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v215 = v219 - 5;
            goto LABEL_231;
          }
        }
        v215 = v212;
      }
      do
      {
        v221 = n[1];
        ++n;
        v208 = v221;
        if (v221)
          v222 = v208 == -8;
        else
          v222 = 1;
      }
      while (v222);
      if (n == (uint64_t *)v204)
        goto LABEL_200;
    }
    if (v209)
    {
      v210 = v208 + 16;
      v211 = 4;
    }
    else
    {
      v210 = *(_QWORD *)(v208 + 16);
      v211 = *(_DWORD *)(v208 + 24);
    }
    v215 = (unint64_t *)(v210 + 40 * v211);
    v212 = v215;
    if (!v209)
      goto LABEL_226;
    goto LABEL_229;
  }
LABEL_200:
  *a3 = 0;
LABEL_201:
  if (v200)
    operator delete(v200);
  v205 = *(_QWORD *)v277;
  *(_QWORD *)v277 = 0;
  if (v205)
    sub_1C4E5DDC4((uint64_t)v277, v205);
  operator delete(v198);
  sub_1C6308954((uint64_t)&v251);
  sub_1C6308954((uint64_t)&v257);
  free(v301);
  sub_1C4926A50((uint64_t)v298);
  return sub_1C4926AE8((uint64_t)v298);
}

std::string *sub_1C5A9B170(std::string *result, uint64_t a2, int a3)
{
  llvm::raw_fd_ostream *size;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::string::value_type __s[8];

  size = (llvm::raw_fd_ostream *)result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__s.__data_[0])
  {
    v6 = result;
    v7 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)size + 80))(result->__r_.__value_.__l.__size_);
    v8 = 0;
    v25 = *((_QWORD *)size + 2);
    v9 = v7 + *((_QWORD *)size + 4);
    do
    {
      v10 = a2 + 24 * v8;
      llvm::raw_fd_ostream::seek(size, *(_QWORD *)v10);
      v12 = *(_DWORD *)(v10 + 16);
      v11 = (int *)(v10 + 16);
      if (v12 >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + 24 * v8 + 8) + 8 * v13);
          v15 = (llvm::raw_ostream *)v6->__r_.__value_.__r.__words[2];
          v16 = bswap64(v14);
          if ((LODWORD(v6[1].__r_.__value_.__l.__data_) - 1) >= 2)
            v14 = v16;
          *(_QWORD *)__s = v14;
          llvm::raw_ostream::write(v15, __s, 8uLL);
          ++v13;
        }
        while (v13 < *v11);
      }
      ++v8;
    }
    while (v8 != a3);
    return (std::string *)llvm::raw_fd_ostream::seek(size, v9 - v25);
  }
  else
  {
    v17 = 0;
    v18 = (std::string *)*((_QWORD *)size + 8);
    do
    {
      v20 = a2 + 24 * v17;
      v22 = *(_DWORD *)(v20 + 16);
      v21 = (int *)(v20 + 16);
      if (v22 >= 1)
      {
        v23 = 0;
        v24 = (_QWORD *)(a2 + 24 * v17);
        do
        {
          *(_QWORD *)__s = 0;
          *(_QWORD *)__s = *(_QWORD *)(v24[1] + 8 * v23);
          result = std::string::replace(v18, *v24 + 8 * v23++, 8uLL, __s, 8uLL);
        }
        while (v23 < *v21);
      }
      ++v17;
    }
    while (v17 != a3);
  }
  return result;
}

double sub_1C5A9B2F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  unsigned int v12;
  __int128 v13;

  *(_QWORD *)(a1 + 32) = a2[7];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[4];
  v3 = a2[1];
  v2 = a2[2];
  v4 = a2[8];
  v5.i64[0] = v4;
  v5.i64[1] = HIDWORD(v4);
  v6 = vextq_s8(v5, v5, 8uLL);
  *(int8x16_t *)(a1 + 16) = v6;
  v8 = v2 - v3;
  v7 = v8 == 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  *(_QWORD *)a1 = 6;
  *(_QWORD *)(a1 + 8) = v9;
  if (!v7)
  {
    v10 = (_OWORD *)(a1 + 72);
    v11 = (__int128 *)(v3 + 8);
    v12 = 1;
    do
    {
      *((_QWORD *)v10 - 1) = *((unsigned int *)v11 - 2);
      v13 = *v11;
      v11 = (__int128 *)((char *)v11 + 24);
      v6.i64[0] = v13;
      *v10 = v13;
      v10 = (_OWORD *)((char *)v10 + 24);
    }
    while (v9 > v12++);
  }
  return *(double *)v6.i64;
}

void llvm::InstrProfWriter::validateRecord(const llvm::InstrProfRecord *a1@<X1>, uint64_t *a2@<X8>)
{
  char i;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[32];
  __int16 v26;

  for (i = 1; ; i = 0)
  {
    v6 = i;
    v7 = *((_QWORD *)a1 + 3);
    if (v7)
    {
      if ((v6 & 1) != 0)
        v8 = 0;
      else
        v8 = 24;
      v9 = *(_QWORD *)(v7 + v8);
      v10 = 32;
      if ((v6 & 1) != 0)
        v10 = 8;
      v11 = -1431655765 * ((unint64_t)(*(_QWORD *)(v7 + v10) - v9) >> 3);
      if ((_DWORD)v11)
        break;
    }
LABEL_29:
    if ((v6 & 1) == 0)
    {
      *a2 = 0;
      return;
    }
  }
  v12 = 0;
  while (1)
  {
    v13 = (v6 & 1) != 0 ? 0 : 24;
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + v13) + 24 * v12 + 16);
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + v13) + 24 * v12 + 16))
      break;
LABEL_28:
    if (++v12 == v11)
      goto LABEL_29;
  }
  v15 = 16 * *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + v13) + 24 * v12 + 16);
  v16 = (void *)operator new[]();
  bzero(v16, v15);
  v17 = *((_QWORD *)a1 + 3);
  if (v17)
  {
    if ((v6 & 1) != 0)
      v18 = 0;
    else
      v18 = 24;
    v17 = *(_QWORD *)(v17 + v18);
  }
  v19 = v17 + 24 * v12;
  v20 = *(_QWORD *)(v19 + 8);
  if (v20 != v19)
  {
    v21 = 0;
    do
    {
      *((_OWORD *)v16 + v21++) = *(_OWORD *)(v20 + 16);
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20 != v19);
  }
  v22 = 0;
  v23 = v16;
  while ((v6 & 1) != 0)
  {
LABEL_26:
    v23 += 2;
    if (!--v14)
    {
      MEMORY[0x1CAA32F9C](v16, 0x1000C80451B5BE8);
      goto LABEL_28;
    }
  }
  if (((*v23 == 0) & v22) == 0)
  {
    v22 |= *v23 == 0;
    goto LABEL_26;
  }
  v24 = operator new();
  v26 = 257;
  *(_QWORD *)v24 = off_1E8192D50;
  *(_DWORD *)(v24 + 8) = 14;
  llvm::Twine::str((llvm::Twine *)v25, (_QWORD *)(v24 + 16));
  *a2 = v24;
  MEMORY[0x1CAA32F9C](v16, 0x1000C80451B5BE8);
}

uint64_t llvm::InstrProfWriter::write@<X0>(llvm::InstrProfWriter *this@<X0>, llvm::raw_fd_ostream *a2@<X1>, uint64_t *a3@<X8>)
{
  char v4[8];
  llvm::raw_fd_ostream *v5;
  llvm::raw_fd_ostream *v6;
  int v7;

  v4[0] = 1;
  v5 = a2;
  v6 = a2;
  v7 = 1;
  return llvm::InstrProfWriter::writeImpl((uint64_t)this, (uint64_t)v4, a3);
}

void llvm::InstrProfWriter::writeBuffer(llvm::InstrProfWriter *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void **v4;
  size_t v5;
  uint64_t v6[4];
  __int16 v7;
  _BYTE v8[8];
  void (***v9)(llvm::raw_ostream *__hidden);
  void (***v10)(llvm::raw_ostream *__hidden);
  int v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = (void **)&v21;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v8[0] = 0;
  v9 = &v12;
  v10 = &v12;
  v11 = 1;
  llvm::InstrProfWriter::writeImpl((uint64_t)this, (uint64_t)v8, v6);
  if (v6[0])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6[0] + 8))(v6[0]);
    v3 = 0;
  }
  else
  {
    if (v23 >= 0)
      v4 = (void **)&v21;
    else
      v4 = v21;
    if (v23 >= 0)
      v5 = HIBYTE(v23) & 0x7F;
    else
      v5 = v22;
    v7 = 257;
    sub_1C5E1F4D0(v4, v5, (uint64_t)v6, (uint64_t)&v24);
    if ((v25 & 1) != 0)
      v3 = 0;
    else
      v3 = v24;
  }
  *a2 = v3;
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
}

llvm::raw_ostream *llvm::InstrProfWriter::writeRecordInText(const void *a1, size_t a2, unint64_t a3, unint64_t **a4, uint64_t *a5, llvm::raw_ostream *a6)
{
  _BYTE *v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  _OWORD *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *result;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  _BYTE *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  llvm::raw_ostream *v48;
  _WORD *v49;
  const char *v50;
  size_t v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  uint64_t i;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  size_t v62;
  void *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  size_t v78;
  const char *v79;
  _BYTE *v80;
  llvm::raw_ostream *v81;
  const char *v82;
  size_t v83;
  void *v84;
  llvm::raw_ostream *v85;
  _BYTE *v86;
  _BYTE *v87;
  unint64_t v88;
  unint64_t **v89;
  unint64_t v90;

  v12 = (_BYTE *)*((_QWORD *)a6 + 4);
  if (a2 <= *((_QWORD *)a6 + 3) - (_QWORD)v12)
  {
    if (a2)
    {
      memcpy(v12, a1, a2);
      v12 = (_BYTE *)(*((_QWORD *)a6 + 4) + a2);
      *((_QWORD *)a6 + 4) = v12;
    }
    v13 = a6;
  }
  else
  {
    v13 = llvm::raw_ostream::write(a6, (const char *)a1, a2);
    v12 = (_BYTE *)*((_QWORD *)v13 + 4);
  }
  if (*((_BYTE **)v13 + 3) == v12)
  {
    llvm::raw_ostream::write(v13, "\n", 1uLL);
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)v13 + 4);
  }
  v14 = (void *)*((_QWORD *)a6 + 4);
  if (*((_QWORD *)a6 + 3) - (_QWORD)v14 > 0xCuLL)
  {
    qmemcpy(v14, "# Func Hash:\n", 13);
    *((_QWORD *)a6 + 4) += 13;
    v15 = a6;
  }
  else
  {
    v15 = llvm::raw_ostream::write(a6, "# Func Hash:\n", 0xDuLL);
  }
  sub_1C5E21910(v15, a3, 0, 0, 0);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, "\n", 1uLL);
  }
  else
  {
    *v16 = 10;
    ++*((_QWORD *)v15 + 4);
  }
  v17 = (_OWORD *)*((_QWORD *)a6 + 4);
  if (*((_QWORD *)a6 + 3) - (_QWORD)v17 > 0xFuLL)
  {
    *v17 = *(_OWORD *)"# Num Counters:\n";
    *((_QWORD *)a6 + 4) += 16;
    v18 = a6;
  }
  else
  {
    v18 = llvm::raw_ostream::write(a6, "# Num Counters:\n", 0x10uLL);
  }
  result = sub_1C5E21910(v18, a4[1] - *a4, 0, 0, 0);
  v20 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v20)
  {
    result = llvm::raw_ostream::write(v18, "\n", 1uLL);
  }
  else
  {
    *v20 = 10;
    ++*((_QWORD *)v18 + 4);
  }
  v21 = *((_QWORD *)a6 + 4);
  if ((unint64_t)(*((_QWORD *)a6 + 3) - v21) > 0x11)
  {
    *(_WORD *)(v21 + 16) = 2618;
    *(_OWORD *)v21 = *(_OWORD *)"# Counter Values:\n";
    *((_QWORD *)a6 + 4) += 18;
  }
  else
  {
    result = llvm::raw_ostream::write(a6, "# Counter Values:\n", 0x12uLL);
  }
  v22 = *a4;
  v23 = a4[1];
  if (*a4 != v23)
  {
    do
    {
      result = sub_1C5E21910(a6, *v22, 0, 0, 0);
      v24 = (_BYTE *)*((_QWORD *)a6 + 4);
      if (*((_BYTE **)a6 + 3) == v24)
      {
        result = llvm::raw_ostream::write(a6, "\n", 1uLL);
      }
      else
      {
        *v24 = 10;
        ++*((_QWORD *)a6 + 4);
      }
      ++v22;
    }
    while (v22 != v23);
  }
  v25 = a4[3];
  if (!v25)
  {
    v30 = *((_QWORD *)a6 + 4);
LABEL_36:
    v38 = *((_QWORD *)a6 + 3);
    goto LABEL_128;
  }
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[3];
  v29 = v25[4];
  v30 = *((_QWORD *)a6 + 4);
  if (v27 == v26 && v29 == v28)
    goto LABEL_36;
  if ((unint64_t)(*((_QWORD *)a6 + 3) - v30) > 0x12)
  {
    *(_DWORD *)(v30 + 15) = 171602788;
    *(_OWORD *)v30 = *(_OWORD *)"# Num Value Kinds:\n";
    *((_QWORD *)a6 + 4) += 19;
    v32 = a6;
  }
  else
  {
    v32 = llvm::raw_ostream::write(a6, "# Num Value Kinds:\n", 0x13uLL);
  }
  v33 = a4[3];
  if (v33)
  {
    v34 = *v33;
    v35 = v33[1];
    v36 = v33[4] != v33[3];
    if (v35 == v34)
      v37 = v36;
    else
      v37 = v36 + 1;
  }
  else
  {
    v37 = 0;
  }
  result = sub_1C5E21910(v32, v37, 0, 0, 0);
  v39 = (_BYTE *)*((_QWORD *)v32 + 4);
  if (*((_BYTE **)v32 + 3) == v39)
  {
    result = llvm::raw_ostream::write(v32, "\n", 1uLL);
  }
  else
  {
    *v39 = 10;
    ++*((_QWORD *)v32 + 4);
  }
  v40 = 0;
  v41 = 1;
  v89 = a4;
  do
  {
    v42 = v41;
    v43 = a4[3];
    if (v43)
    {
      if ((v42 & 1) != 0)
        v44 = 0;
      else
        v44 = 3;
      v45 = v43[v44];
      v46 = 4;
      if ((v42 & 1) != 0)
        v46 = 1;
      v90 = -1431655765 * ((v43[v46] - v45) >> 3);
      if ((_DWORD)v90)
      {
        v47 = (void *)*((_QWORD *)a6 + 4);
        if (*((_QWORD *)a6 + 3) - (_QWORD)v47 > 0xDuLL)
        {
          qmemcpy(v47, "# ValueKind = ", 14);
          v49 = (_WORD *)(*((_QWORD *)a6 + 4) + 14);
          *((_QWORD *)a6 + 4) = v49;
          v48 = a6;
        }
        else
        {
          v48 = llvm::raw_ostream::write(a6, "# ValueKind = ", 0xEuLL);
          v49 = (_WORD *)*((_QWORD *)v48 + 4);
        }
        v88 = v40;
        v50 = off_1E81931B8[v40];
        v51 = strlen(v50);
        v52 = v51;
        if (v51 <= *((_QWORD *)v48 + 3) - (_QWORD)v49)
        {
          if (v51)
          {
            memcpy(v49, v50, v51);
            v49 = (_WORD *)(*((_QWORD *)v48 + 4) + v52);
            *((_QWORD *)v48 + 4) = v49;
          }
        }
        else
        {
          v48 = llvm::raw_ostream::write(v48, v50, v51);
          v49 = (_WORD *)*((_QWORD *)v48 + 4);
        }
        if (*((_QWORD *)v48 + 3) - (_QWORD)v49 > 1uLL)
        {
          *v49 = 2618;
          *((_QWORD *)v48 + 4) += 2;
        }
        else
        {
          v48 = llvm::raw_ostream::write(v48, ":\n", 2uLL);
        }
        sub_1C5E21910(v48, v88, 0, 0, 0);
        v53 = (_BYTE *)*((_QWORD *)v48 + 4);
        if (*((_BYTE **)v48 + 3) == v53)
        {
          llvm::raw_ostream::write(v48, "\n", 1uLL);
        }
        else
        {
          *v53 = 10;
          ++*((_QWORD *)v48 + 4);
        }
        v54 = *((_QWORD *)a6 + 4);
        if ((unint64_t)(*((_QWORD *)a6 + 3) - v54) > 0x10)
        {
          *(_BYTE *)(v54 + 16) = 10;
          *(_OWORD *)v54 = *(_OWORD *)"# NumValueSites:\n";
          *((_QWORD *)a6 + 4) += 17;
          v55 = a6;
        }
        else
        {
          v55 = llvm::raw_ostream::write(a6, "# NumValueSites:\n", 0x11uLL);
        }
        sub_1C5E21910(v55, v90, 0, 0, 0);
        v56 = (_BYTE *)*((_QWORD *)v55 + 4);
        if (*((_BYTE **)v55 + 3) == v56)
        {
          llvm::raw_ostream::write(v55, "\n", 1uLL);
        }
        else
        {
          *v56 = 10;
          ++*((_QWORD *)v55 + 4);
        }
        for (i = 0; i != v90; ++i)
        {
          if ((v42 & 1) != 0)
            v58 = 0;
          else
            v58 = 3;
          v59 = *(unsigned int *)(a4[3][v58] + 24 * i + 16);
          result = sub_1C5E21910(a6, v59, 0, 0, 0);
          v60 = (_BYTE *)*((_QWORD *)a6 + 4);
          if (*((_BYTE **)a6 + 3) == v60)
          {
            result = llvm::raw_ostream::write(a6, "\n", 1uLL);
          }
          else
          {
            *v60 = 10;
            ++*((_QWORD *)a6 + 4);
          }
          if ((v42 & 1) != 0)
            v61 = 0;
          else
            v61 = 3;
          if (*(_QWORD *)(a4[3][v61] + 24 * i + 16))
          {
            v62 = 16 * *(_QWORD *)(a4[3][v61] + 24 * i + 16);
            v63 = (void *)operator new[]();
            bzero(v63, v62);
            v64 = a4[3];
            if (v64)
            {
              if ((v42 & 1) != 0)
                v65 = 0;
              else
                v65 = 3;
              v64 = (unint64_t *)v64[v65];
            }
            v66 = &v64[3 * i];
            v67 = v66[1];
            if ((unint64_t *)v67 != v66)
            {
              v68 = 0;
              do
              {
                *((_OWORD *)v63 + v68++) = *(_OWORD *)(v67 + 16);
                v67 = *(_QWORD *)(v67 + 8);
              }
              while ((unint64_t *)v67 != v66);
            }
            if (v59)
              goto LABEL_82;
LABEL_115:
            result = (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](v63, 0x1000C80451B5BE8);
          }
          else if (v59)
          {
            v63 = 0;
LABEL_82:
            v69 = 0;
            while (2)
            {
              v70 = *((_QWORD *)v63 + 2 * v69);
              if ((v42 & 1) != 0)
              {
                sub_1C546CB40(a5);
                v71 = (_QWORD *)a5[7];
                v72 = (_QWORD *)a5[8];
                if (v72 != v71)
                {
                  v73 = 0xAAAAAAAAAAAAAAABLL * (v72 - v71);
                  do
                  {
                    v74 = v73 >> 1;
                    v75 = &v71[3 * (v73 >> 1)];
                    v77 = *v75;
                    v76 = v75 + 3;
                    v73 += ~(v73 >> 1);
                    if (v77 < v70)
                      v71 = v76;
                    else
                      v73 = v74;
                  }
                  while (v73);
                }
                if (v71 == v72 || *v71 != v70)
                {
                  v78 = 0;
                  v79 = 0;
                }
                else
                {
                  v79 = (const char *)v71[1];
                  v78 = v71[2];
                }
                if (v78)
                  v82 = v79;
                else
                  v82 = "** External Symbol **";
                if (v78)
                  v83 = v78;
                else
                  v83 = 21;
                v84 = (void *)*((_QWORD *)a6 + 4);
                if (v83 <= *((_QWORD *)a6 + 3) - (_QWORD)v84)
                {
                  memcpy(v84, v82, v83);
                  v86 = (_BYTE *)(*((_QWORD *)a6 + 4) + v83);
                  *((_QWORD *)a6 + 4) = v86;
                  v85 = a6;
                }
                else
                {
                  v85 = llvm::raw_ostream::write(a6, v82, v83);
                  v86 = (_BYTE *)*((_QWORD *)v85 + 4);
                }
                if (*((_BYTE **)v85 + 3) == v86)
                {
                  v81 = v85;
LABEL_107:
                  v85 = llvm::raw_ostream::write(v81, ":", 1uLL);
                }
                else
                {
                  *v86 = 58;
                  ++*((_QWORD *)v85 + 4);
                }
              }
              else
              {
                sub_1C5E21910(a6, *((_QWORD *)v63 + 2 * v69), 0, 0, 0);
                v80 = (_BYTE *)*((_QWORD *)a6 + 4);
                if (*((_BYTE **)a6 + 3) == v80)
                {
                  v81 = a6;
                  goto LABEL_107;
                }
                *v80 = 58;
                ++*((_QWORD *)a6 + 4);
                v85 = a6;
              }
              sub_1C5E21910(v85, *((_QWORD *)v63 + 2 * v69 + 1), 0, 0, 0);
              v87 = (_BYTE *)*((_QWORD *)v85 + 4);
              if (*((_BYTE **)v85 + 3) == v87)
              {
                llvm::raw_ostream::write(v85, "\n", 1uLL);
              }
              else
              {
                *v87 = 10;
                ++*((_QWORD *)v85 + 4);
              }
              if (++v69 == v59)
              {
                a4 = v89;
                goto LABEL_115;
              }
              continue;
            }
          }
        }
      }
    }
    v41 = 0;
    v40 = 1;
  }
  while ((v42 & 1) != 0);
  v38 = *((_QWORD *)a6 + 3);
  v30 = *((_QWORD *)a6 + 4);
LABEL_128:
  if (v38 == v30)
    return llvm::raw_ostream::write(a6, "\n", 1uLL);
  *(_BYTE *)v30 = 10;
  ++*((_QWORD *)a6 + 4);
  return result;
}

_QWORD *llvm::InstrProfWriter::writeText@<X0>(llvm::InstrProfWriter *this@<X0>, llvm::raw_fd_ostream *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  void *v7;
  const char *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  const llvm::InstrProfRecord *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v50;
  int64_t v51;
  _QWORD v52[3];
  _QWORD v53[4];
  _BYTE v54[44];
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[25];
  void *v60;
  uint64_t v61;
  _QWORD v62[31];

  v62[28] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 34);
  if ((v6 & 8) != 0)
  {
    v11 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 0x27uLL)
    {
      v8 = "# CSIR level Instrumentation Flag\n:csir\n";
      v9 = a2;
      v10 = 40;
      goto LABEL_7;
    }
    qmemcpy(v11, "# CSIR level Instrumentation Flag\n:csir\n", 40);
    v50 = *((_QWORD *)a2 + 4) + 40;
LABEL_81:
    *((_QWORD *)a2 + 4) = v50;
    goto LABEL_8;
  }
  if ((v6 & 2) != 0)
  {
    v7 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 <= 0x23uLL)
    {
      v8 = "# IR level Instrumentation Flag\n:ir\n";
      v9 = a2;
      v10 = 36;
LABEL_7:
      llvm::raw_ostream::write(v9, v8, v10);
      goto LABEL_8;
    }
    qmemcpy(v7, "# IR level Instrumentation Flag\n:ir\n", 36);
    v50 = *((_QWORD *)a2 + 4) + 36;
    goto LABEL_81;
  }
LABEL_8:
  if ((*((_BYTE *)this + 136) & 4) != 0)
  {
    v12 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 0x39uLL)
    {
      qmemcpy(v12, "# Always instrument the function entry block\n:entry_first\n", 58);
      *((_QWORD *)a2 + 4) += 58;
    }
    else
    {
      llvm::raw_ostream::write(a2, "# Always instrument the function entry block\n:entry_first\n", 0x3AuLL);
    }
  }
  memset(v54, 0, sizeof(v54));
  v55 = 8;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  memset(v59, 0, sizeof(v59));
  v60 = v62;
  v61 = 0x400000000;
  v13 = *((unsigned int *)this + 4);
  if ((_DWORD)v13)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 1); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)*((_QWORD *)this + 1);
  }
  v15 = *((_QWORD *)this + 1) + 8 * v13;
  v16 = (char *)v62;
  v17 = v62;
  if (i == (uint64_t *)v15)
  {
LABEL_61:
    v41 = 0;
    goto LABEL_63;
  }
  v18 = *i;
  do
  {
    if (!llvm::InstrProfWriter::shouldEncodeData(this, v18 + 8))
      goto LABEL_16;
    sub_1C6307600((uint64_t)v54, (unsigned __int8 *)(v18 + 176), *(_QWORD *)v18, a3);
    if (*a3)
      goto LABEL_71;
    v21 = *(_DWORD *)(v18 + 8);
    if (v21 <= 1)
    {
      if (v21)
      {
        v22 = v18 + 16;
        v23 = 4;
      }
      else
      {
        v22 = *(_QWORD *)(v18 + 16);
        v23 = *(_DWORD *)(v18 + 24);
      }
      v27 = (unint64_t *)(v22 + 40 * v23);
      v24 = v27;
      if (!v21)
        goto LABEL_35;
LABEL_38:
      v28 = (unint64_t *)(v18 + 16);
      v29 = 4;
      goto LABEL_39;
    }
    if ((v21 & 1) != 0)
    {
      v24 = (unint64_t *)(v18 + 16);
      v26 = (unint64_t *)(v18 + 176);
      goto LABEL_30;
    }
    v24 = *(unint64_t **)(v18 + 16);
    v25 = *(_DWORD *)(v18 + 24);
    if (v25)
    {
      v26 = &v24[5 * v25];
LABEL_30:
      v27 = v24;
      while (*v27 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v27 += 5;
        if (v27 == v26)
        {
          v27 = v26;
          break;
        }
      }
      v24 = v26;
      if ((*(_DWORD *)(v18 + 8) & 1) == 0)
      {
LABEL_35:
        v28 = *(unint64_t **)(v18 + 16);
        v29 = *(_DWORD *)(v18 + 24);
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    v29 = 0;
    v27 = *(unint64_t **)(v18 + 16);
    v28 = v27;
LABEL_39:
    v30 = &v28[5 * v29];
LABEL_40:
    while (v27 != v30)
    {
      v31 = *(_QWORD *)v18;
      v52[0] = v18 + 176;
      v52[1] = v31;
      v52[2] = *v27;
      sub_1C6308FA4(v53, (uint64_t)(v27 + 1));
      v32 = (char *)v60;
      if (v61 >= HIDWORD(v61))
      {
        v39 = v61 + 1;
        if (v60 <= v52 && (char *)v60 + 56 * v61 > (char *)v52)
        {
          v51 = (char *)v52 - (_BYTE *)v60;
          sub_1C5A9D444((uint64_t)&v60, v39);
          v32 = (char *)v60;
          v33 = (char *)v60 + v51;
        }
        else
        {
          sub_1C5A9D444((uint64_t)&v60, v39);
          v33 = (char *)v52;
          v32 = (char *)v60;
        }
      }
      else
      {
        v33 = (char *)v52;
      }
      v34 = &v32[56 * v61];
      *(_OWORD *)v34 = *(_OWORD *)v33;
      v35 = *((_QWORD *)v33 + 2);
      *((_OWORD *)v34 + 2) = 0u;
      *((_QWORD *)v34 + 2) = v35;
      *((_QWORD *)v34 + 3) = 0;
      *(_OWORD *)(v34 + 24) = *(_OWORD *)(v33 + 24);
      *((_QWORD *)v34 + 5) = *((_QWORD *)v33 + 5);
      *(_OWORD *)(v33 + 24) = 0u;
      v36 = *((_QWORD *)v33 + 6);
      *(_OWORD *)(v33 + 40) = 0u;
      *((_QWORD *)v34 + 6) = v36;
      LODWORD(v61) = v61 + 1;
      sub_1C62AFE18((uint64_t)v53);
      v37 = v27 + 5;
      while (v37 != v24)
      {
        v38 = *v37;
        v37 += 5;
        if (v38 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v27 = v37 - 5;
          goto LABEL_40;
        }
      }
      v27 = v24;
    }
    do
    {
LABEL_16:
      v19 = i[1];
      ++i;
      v18 = v19;
      if (v19)
        v20 = v18 == -8;
      else
        v20 = 1;
    }
    while (v20);
  }
  while (i != (uint64_t *)v15);
  v17 = v60;
  v16 = (char *)v60 + 56 * v61;
  if (!(_DWORD)v61)
    goto LABEL_61;
  v41 = 126 - 2 * __clz(v61);
LABEL_63:
  sub_1C5A9D52C((uint64_t)v17, (unint64_t)v16, v41, 1);
  if (!(_DWORD)v61)
    goto LABEL_70;
  v42 = (char *)v60;
  v43 = (char *)v60 + 56 * v61;
  do
  {
    llvm::InstrProfWriter::writeRecordInText(*(const void **)v42, *((_QWORD *)v42 + 1), *((_QWORD *)v42 + 2), (unint64_t **)v42 + 3, (uint64_t *)v54, a2);
    v42 += 56;
  }
  while (v42 != v43);
  if ((_DWORD)v61)
  {
    v44 = (const llvm::InstrProfRecord *)((char *)v60 + 24);
    v45 = 56 * v61;
    while (1)
    {
      llvm::InstrProfWriter::validateRecord(v44, a3);
      if (*a3)
        break;
      v44 = (const llvm::InstrProfRecord *)((char *)v44 + 56);
      v45 -= 56;
      if (!v45)
        goto LABEL_70;
    }
  }
  else
  {
LABEL_70:
    *a3 = 0;
  }
LABEL_71:
  v46 = v60;
  if ((_DWORD)v61)
  {
    v47 = (char *)v60 - 32;
    v48 = 56 * v61;
    do
    {
      sub_1C62AFE18((uint64_t)&v47[v48]);
      v48 -= 56;
    }
    while (v48);
    v46 = v60;
  }
  if (v46 != v62)
    free(v46);
  return sub_1C624BA64(v54);
}

void sub_1C5A9C550(void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;
  char **v7;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 34;
        v7 = v4 - 33;
        sub_1C61BE804(v4 - 10);
        sub_1C63089E8(v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C5A9C5DC(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_QWORD *)(*a2 + 24) > (unint64_t)result[3])
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)sub_1C5A9C5DC(result, v10, a3 >> 1);
      result = (uint64_t *)sub_1C5A9C5DC(v10, a2, a3 - v8);
      v12 = v11[3];
      if (result[3] <= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (i[3] <= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = v14[3];
          if (i[3] <= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (j[3] <= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

_QWORD *sub_1C5A9C7A0(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *j;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  uint64_t i;
  _QWORD *v26;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v26 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v26)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v26[16] = 2;
    *(_QWORD *)a1 = v26;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  j = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return j;
  }
  v21 = operator new(__n + 177, (std::align_val_t)8uLL);
  v22 = v21;
  v23 = (char *)(v21 + 22);
  if (__n)
    memcpy(v21 + 22, a2, __n);
  v23[__n] = 0;
  *v22 = __n;
  v22[1] = 1;
  for (i = 2; i != 22; i += 5)
    v22[i] = -1;
  *j = v22;
  ++*((_DWORD *)a1 + 3);
  for (j = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*j || *j == -8;
  return j;
}

uint64_t sub_1C5A9C9B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = 0;
  result = sub_1C5A9CB1C(a2, *a3, &v20);
  v9 = v20;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v11 = a2 + 8;
      v12 = 4;
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_DWORD *)(a2 + 16);
    }
    v15 = 0;
    v16 = v11 + 40 * v12;
    goto LABEL_17;
  }
  v13 = v10 >> 1;
  if ((v10 & 1) != 0)
    v14 = 4;
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_19;
  }
  if (v14 + ~v13 - *(_DWORD *)(a2 + 4) <= v14 >> 3)
  {
LABEL_19:
    sub_1C5A9CBCC(a2, v14);
    v20 = 0;
    result = sub_1C5A9CB1C(a2, *a3, &v20);
    v9 = v20;
  }
  *(_DWORD *)a2 += 2;
  if (*(_QWORD *)v9 != -1)
    --*(_DWORD *)(a2 + 4);
  *(_QWORD *)v9 = *a3;
  *(_QWORD *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(a4 + 16);
  v17 = *(_QWORD *)(a4 + 24);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = v17;
  v18 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v19 = 4;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
    v19 = *(_DWORD *)(a2 + 16);
  }
  v16 = v18 + 40 * v19;
  v15 = 1;
LABEL_17:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

uint64_t sub_1C5A9CB1C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 40 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5A9CBCC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v17[160];
  uint64_t v18;

  v2 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5A9CD90(a1, v7, v7 + 40 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v17;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      *(_QWORD *)v10 = v12;
      *((_QWORD *)v10 + 1) = 0;
      *((_OWORD *)v10 + 1) = 0u;
      v14 = *(_OWORD *)(v11 + 16);
      v13 = v11 + 16;
      *(_OWORD *)(v10 + 8) = v14;
      *((_QWORD *)v10 + 3) = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *((_QWORD *)v10 + 4) = v15;
      v10 += 40;
      sub_1C62AFE18(v13);
    }
    v9 += 40;
  }
  while (v9 != 160);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(40 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C5A9CD90(a1, (uint64_t)v17, (uint64_t)v10);
}

uint64_t sub_1C5A9CD90(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 168);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v13 = 0;
      sub_1C5A9CB1C((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      v11[1] = 0;
      *((_OWORD *)v11 + 1) = 0u;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 8);
      v11[3] = *(_QWORD *)(a2 + 24);
      v12 = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      v11[4] = v12;
      *v5 += 2;
      result = sub_1C62AFE18(a2 + 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_1C5A9CE7C(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD *);
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;

  v3 = *a1;
  v4 = operator new();
  v9 = 257;
  *(_QWORD *)v4 = off_1E8192D50;
  *(_DWORD *)(v4 + 8) = a2;
  llvm::Twine::str((llvm::Twine *)v8, (_QWORD *)(v4 + 16));
  v6 = *(void (**)(uint64_t, _QWORD *))v3;
  v5 = *(_QWORD *)(v3 + 8);
  v8[0] = v4;
  v6(v5, v8);
  result = v8[0];
  if (v8[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8[0] + 8))(v8[0]);
  return result;
}

_QWORD *sub_1C5A9CF14(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  char *v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v2 = 0xF0F0F0F0F0F0F0F1 * ((a1->i64[1] - a1->i64[0]) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x78787878787878)
    v6 = 0xF0F0F0F0F0F0F0;
  else
    v6 = v3;
  v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xF0F0F0F0F0F0F0)
      sub_1C4764EE4();
    v7 = (char *)operator new(272 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[272 * v2];
  v23 = v7;
  v24.i64[0] = (uint64_t)v8;
  v9 = &v7[272 * v6];
  v25 = v9;
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_QWORD *)v8 + 1) = v8 + 24;
  *((_QWORD *)v8 + 2) = 0x100000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C5A97D14((uint64_t)(v8 + 8), a2 + 8);
  v10 = &v7[272 * v2];
  *((_QWORD *)v10 + 24) = v10 + 208;
  v11 = (uint64_t)(v10 + 192);
  *(_QWORD *)(v11 + 8) = 0x100000000;
  if (*(_DWORD *)(a2 + 200))
    sub_1C5A98068(v11, a2 + 192);
  v12 = v8 + 272;
  v24.i64[1] = (uint64_t)(v8 + 272);
  v14 = a1->i64[0];
  v13 = a1->u64[1];
  if (v13 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v13);
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15];
      v17 = v13 + v15;
      *(_QWORD *)&v8[v15 - 272] = *(_QWORD *)(v13 + v15 - 272);
      v18 = &v8[v15 - 264];
      *(_QWORD *)v18 = &v8[v15 - 248];
      *(_QWORD *)&v8[v15 - 256] = 0x100000000;
      if (*(_DWORD *)(v13 + v15 - 256))
        sub_1C5A97D14((uint64_t)v18, v17 - 264);
      *((_QWORD *)v16 - 10) = v16 - 64;
      v19 = (uint64_t)(v16 - 80);
      *(_QWORD *)(v19 + 8) = 0x100000000;
      if (*(_DWORD *)(v17 - 72))
        sub_1C5A98068(v19, v13 + v15 - 80);
      v15 -= 272;
    }
    while (v13 + v15 != v14);
    v20 = *a1;
    v8 += v15;
    v12 = (_QWORD *)v24.i64[1];
    v9 = v25;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v12;
  v24 = v20;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  v25 = v21;
  v23 = (char *)v20.i64[0];
  sub_1C5A9D10C((uint64_t)&v23);
  return v12;
}

uint64_t sub_1C5A9D10C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  char **v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    v4 = (char **)(i - 264);
    sub_1C61BE804((char **)(i - 80));
    sub_1C63089E8(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C5A9D170(_QWORD *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4)
      return sub_1C51912D4((uint64_t)result, v4 + 1);
  }
  return result;
}

void sub_1C5A9D1BC(uint64_t *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v4 = malloc_type_calloc(count, 0x18uLL, 0x6D9A4F0CuLL);
  if (!v4 && (count || (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v5 = *a1;
  v6 = (_QWORD *)a1[14];
  if (*a1)
  {
    v7 = 0;
    do
    {
      v8 = v6[3 * v7 + 2];
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 24);
          v10 = (size_t)v4 + 24 * (*(_QWORD *)(v8 + 32) & (count - 1));
          *(_QWORD *)(v8 + 24) = *(_QWORD *)(v10 + 16);
          ++*(_DWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 16) = v8;
          v8 = v9;
        }
        while (v9);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  free(v6);
  *a1 = count;
  a1[14] = (uint64_t)v4;
}

void sub_1C5A9D294(uint64_t *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v4 = malloc_type_calloc(count, 0x18uLL, 0x6D9A4F0CuLL);
  if (!v4 && (count || (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v5 = *a1;
  v6 = (_QWORD *)a1[14];
  if (*a1)
  {
    v7 = 0;
    do
    {
      v8 = v6[3 * v7 + 2];
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 272);
          v10 = (size_t)v4 + 24 * (*(_QWORD *)(v8 + 280) & (count - 1));
          *(_QWORD *)(v8 + 272) = *(_QWORD *)(v10 + 16);
          ++*(_DWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 16) = v8;
          v8 = v9;
        }
        while (v9);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  free(v6);
  *a1 = count;
  a1[14] = (uint64_t)v4;
}

void sub_1C5A9D36C(uint64_t *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v4 = malloc_type_calloc(count, 0x18uLL, 0x6D9A4F0CuLL);
  if (!v4 && (count || (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v5 = *a1;
  v6 = (_QWORD *)a1[14];
  if (*a1)
  {
    v7 = 0;
    do
    {
      v8 = v6[3 * v7 + 2];
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 32);
          v10 = (size_t)v4 + 24 * (*(_QWORD *)(v8 + 40) & (count - 1));
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v10 + 16);
          ++*(_DWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 16) = v8;
          v8 = v9;
        }
        while (v9);
      }
      ++v7;
    }
    while (v7 != v5);
  }
  free(v6);
  *a1 = count;
  a1[14] = (uint64_t)v4;
}

void sub_1C5A9D444(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  int v5;
  char *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v14);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = v3;
    do
    {
      *v7 = *(_OWORD *)v4;
      v8 = *((_QWORD *)v4 + 2);
      v7[2] = 0uLL;
      *((_QWORD *)v7 + 2) = v8;
      *((_QWORD *)v7 + 3) = 0;
      *(_OWORD *)((char *)v7 + 24) = *(_OWORD *)(v4 + 24);
      *((_QWORD *)v7 + 5) = *((_QWORD *)v4 + 5);
      *(_OWORD *)(v4 + 24) = 0uLL;
      v9 = *((_QWORD *)v4 + 6);
      *(_OWORD *)(v4 + 40) = 0uLL;
      *((_QWORD *)v7 + 6) = v9;
      v4 += 56;
      v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v4 != v6);
    v4 = *(char **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = v4 - 32;
      v12 = 56 * v10;
      do
      {
        sub_1C62AFE18((uint64_t)&v11[v12]);
        v12 -= 56;
      }
      while (v12);
      v4 = *(char **)a1;
    }
  }
  v13 = v14;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t sub_1C5A9D52C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD *v35;
  BOOL v36;
  BOOL v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _OWORD *v52;
  int64_t v53;
  __n128 *v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 *v88;
  _OWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v107;
  _OWORD *v108;
  __n128 *v109;
  uint64_t v110;
  int64_t v111;
  __n128 *v112;
  _BYTE v113[24];
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[24];
  __n128 v118;
  unint64_t v119;
  unint64_t v120;

  v6 = result;
LABEL_2:
  v108 = (_OWORD *)(a2 - 56);
  v110 = a2;
  v104 = a2 - 168;
  v105 = a2 - 112;
  v103 = (_QWORD *)(a2 - 40);
  v7 = v6;
  while (2)
  {
    v6 = v7;
    v8 = a2 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C5A9EA18((uint64_t)v108, v103, v7, (_QWORD *)(v7 + 16));
        if ((_DWORD)result)
        {
          *(_OWORD *)v117 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *v108;
          *v108 = *(_OWORD *)v117;
          v83 = *(_OWORD *)(v7 + 24);
          *(_QWORD *)v117 = *(_QWORD *)(v7 + 16);
          v84 = *(_QWORD *)v117;
          v85 = *(_QWORD *)(v7 + 48);
          v118.n128_u64[0] = *(_QWORD *)(v7 + 40);
          *(_OWORD *)&v117[8] = v83;
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 48) = 0;
          v118.n128_u64[1] = v85;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 40);
          sub_1C58C9490(v7 + 24, (__n128 *)(a2 - 32));
          *(_QWORD *)(a2 - 40) = v84;
          sub_1C58C9490(a2 - 32, (__n128 *)&v117[8]);
          return sub_1C62AFE18((uint64_t)&v117[8]);
        }
        return result;
      case 3:
        return sub_1C5A9E4D4(v7, v7 + 56, (uint64_t)v108);
      case 4:
        return sub_1C5A9EAE0(v7, v7 + 56, v7 + 112, (uint64_t)v108);
      case 5:
        return sub_1C5A9E270(v7, v7 + 56, v7 + 112, v7 + 168, (uint64_t)v108);
      default:
        if (v8 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v86 = v7 + 56;
              if (v7 + 56 != a2)
              {
                v87 = 0;
                v88 = (__n128 *)v7;
                do
                {
                  v89 = (_OWORD *)v86;
                  result = sub_1C5A9EA18(v86, &v88[4].n128_u64[1], (uint64_t)v88, (__n128 *)v88[1].n128_u64);
                  if ((_DWORD)result)
                  {
                    *(_OWORD *)v117 = *v89;
                    *(_QWORD *)&v117[16] = v88[4].n128_u64[1];
                    v118 = v88[5];
                    v88[5].n128_u64[0] = 0;
                    v88[5].n128_u64[1] = 0;
                    v90 = v88[6].n128_u64[0];
                    v91 = v88[6].n128_u64[1];
                    v88[6].n128_u64[0] = 0;
                    v88[6].n128_u64[1] = 0;
                    v92 = v87;
                    v119 = v90;
                    v120 = v91;
                    while (1)
                    {
                      v93 = v7 + v92;
                      *(_OWORD *)(v93 + 56) = *(_OWORD *)(v7 + v92);
                      *(_QWORD *)(v93 + 72) = *(_QWORD *)(v7 + v92 + 16);
                      v94 = (__n128 *)(v7 + v92 + 24);
                      sub_1C58C9490(v7 + v92 + 80, v94);
                      if (!v92)
                        break;
                      v92 -= 56;
                      if (!sub_1C5A9EA18((uint64_t)v117, &v117[16], v93 - 56, (_QWORD *)(v93 - 40)))
                      {
                        v95 = v7 + v92 + 56;
                        goto LABEL_105;
                      }
                    }
                    v95 = v7;
LABEL_105:
                    *(_OWORD *)v95 = *(_OWORD *)v117;
                    *(_QWORD *)(v95 + 16) = *(_QWORD *)&v117[16];
                    sub_1C58C9490((uint64_t)v94, &v118);
                    result = sub_1C62AFE18((uint64_t)&v118);
                    a2 = v110;
                  }
                  v86 = (uint64_t)v89 + 56;
                  v87 += 56;
                  v88 = (__n128 *)v89;
                }
                while ((_OWORD *)((char *)v89 + 56) != (_OWORD *)a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v96 = v7 + 56;
            if (v7 + 56 != a2)
            {
              v97 = v7 - 56;
              do
              {
                v98 = (_OWORD *)v96;
                result = sub_1C5A9EA18(v96, (_QWORD *)(v6 + 72), v6, (_QWORD *)(v6 + 16));
                if ((_DWORD)result)
                {
                  *(_OWORD *)v117 = *v98;
                  *(_QWORD *)&v117[16] = *(_QWORD *)(v6 + 72);
                  v118 = *(__n128 *)(v6 + 80);
                  *(_QWORD *)(v6 + 80) = 0;
                  *(_QWORD *)(v6 + 88) = 0;
                  v99 = *(_QWORD *)(v6 + 96);
                  v100 = *(_QWORD *)(v6 + 104);
                  *(_QWORD *)(v6 + 96) = 0;
                  *(_QWORD *)(v6 + 104) = 0;
                  v101 = v97;
                  v119 = v99;
                  v120 = v100;
                  do
                  {
                    *(_OWORD *)(v101 + 112) = *(_OWORD *)(v101 + 56);
                    *(_QWORD *)(v101 + 128) = *(_QWORD *)(v101 + 72);
                    sub_1C58C9490(v101 + 136, (__n128 *)(v101 + 80));
                    v102 = sub_1C5A9EA18((uint64_t)v117, &v117[16], v101, (_QWORD *)(v101 + 16));
                    v101 -= 56;
                  }
                  while (v102);
                  *(_OWORD *)(v101 + 112) = *(_OWORD *)v117;
                  *(_QWORD *)(v101 + 128) = *(_QWORD *)&v117[16];
                  sub_1C58C9490(v101 + 136, &v118);
                  result = sub_1C62AFE18((uint64_t)&v118);
                }
                v96 = (uint64_t)v98 + 56;
                v97 += 56;
                v6 = (uint64_t)v98;
              }
              while ((_OWORD *)((char *)v98 + 56) != (_OWORD *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v53 = (unint64_t)(v9 - 2) >> 1;
            v54 = &v118;
            v55 = v53;
            do
            {
              v56 = v55;
              if (v53 >= v55)
              {
                v111 = v55;
                v57 = (2 * v55) | 1;
                v58 = v7 + 56 * v57;
                v59 = 2 * v55 + 2;
                if (v59 < v9
                  && sub_1C5A9EA18(v7 + 56 * v57, (_QWORD *)(v7 + 56 * v57 + 16), v58 + 56, (_QWORD *)(v58 + 72)))
                {
                  v58 += 56;
                  v57 = v59;
                }
                v56 = v111;
                v60 = v7 + 56 * v111;
                if (!sub_1C5A9EA18(v58, (_QWORD *)(v58 + 16), v60, (_QWORD *)(v60 + 16)))
                {
                  v109 = v54;
                  *(_OWORD *)v117 = *(_OWORD *)v60;
                  *(_QWORD *)&v117[16] = *(_QWORD *)(v60 + 16);
                  v61 = v7 + 56 * v111;
                  v118 = *(__n128 *)(v61 + 24);
                  v119 = *(_QWORD *)(v61 + 40);
                  *(_OWORD *)(v61 + 24) = 0u;
                  v62 = *(_QWORD *)(v61 + 48);
                  *(_OWORD *)(v61 + 40) = 0u;
                  v120 = v62;
                  do
                  {
                    v63 = v58;
                    *(_OWORD *)v60 = *(_OWORD *)v58;
                    *(_QWORD *)(v60 + 16) = *(_QWORD *)(v58 + 16);
                    v64 = v58 + 24;
                    sub_1C58C9490(v60 + 24, (__n128 *)(v58 + 24));
                    if (v53 < v57)
                      break;
                    v65 = (2 * v57) | 1;
                    v58 = v7 + 56 * v65;
                    v66 = 2 * v57 + 2;
                    if (v66 < v9
                      && sub_1C5A9EA18(v7 + 56 * v65, (_QWORD *)(v7 + 56 * v65 + 16), v58 + 56, (_QWORD *)(v58 + 72)))
                    {
                      v58 += 56;
                      v65 = v66;
                    }
                    v60 = v63;
                    v57 = v65;
                  }
                  while (!sub_1C5A9EA18(v58, (_QWORD *)(v58 + 16), (uint64_t)v117, &v117[16]));
                  *(_OWORD *)v63 = *(_OWORD *)v117;
                  *(_QWORD *)(v63 + 16) = *(_QWORD *)&v117[16];
                  v54 = v109;
                  sub_1C58C9490(v64, v109);
                  sub_1C62AFE18((uint64_t)v109);
                  v56 = v111;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v107 = (_QWORD *)(v7 + 24);
            v67 = (__n128 *)v110;
            do
            {
              v68 = 0;
              v69 = *(_OWORD *)v6;
              v70 = *(_QWORD *)(v6 + 16);
              v114 = 0uLL;
              v115 = 0;
              v114 = *(__n128 *)(v6 + 24);
              v112 = v67;
              *(_QWORD *)&v113[16] = v70;
              v71 = *(_QWORD *)(v6 + 48);
              v115 = *(_QWORD *)(v6 + 40);
              v107[1] = 0;
              v107[2] = 0;
              *v107 = 0;
              *(_QWORD *)(v6 + 48) = 0;
              v116 = v71;
              v72 = v6;
              *(_OWORD *)v113 = v69;
              do
              {
                v73 = v72 + 56 * (v68 + 1);
                v74 = (2 * v68) | 1;
                v75 = 2 * v68 + 2;
                if (v75 < v9
                  && sub_1C5A9EA18(v73, (_QWORD *)(v72 + 56 * (v68 + 1) + 16), v73 + 56, (_QWORD *)(v73 + 72)))
                {
                  v73 += 56;
                  v74 = v75;
                }
                *(_OWORD *)v72 = *(_OWORD *)v73;
                *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
                sub_1C58C9490(v72 + 24, (__n128 *)(v73 + 24));
                v72 = v73;
                v68 = v74;
              }
              while (v74 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              v67 = (__n128 *)((char *)v112 - 56);
              if ((__int8 *)v73 == &v112[-4].n128_i8[8])
              {
                *(_OWORD *)v73 = *(_OWORD *)v113;
                *(_QWORD *)(v73 + 16) = *(_QWORD *)&v113[16];
                sub_1C58C9490(v73 + 24, &v114);
              }
              else
              {
                *(__n128 *)v73 = *v67;
                *(_QWORD *)(v73 + 16) = v112[-3].n128_u64[1];
                sub_1C58C9490(v73 + 24, v112 - 2);
                *v67 = *(__n128 *)v113;
                v112[-3].n128_u64[1] = *(_QWORD *)&v113[16];
                sub_1C58C9490((uint64_t)&v112[-2], &v114);
                v76 = v73 - v6 + 56;
                if (v76 >= 57)
                {
                  v77 = (v76 / 0x38uLL - 2) >> 1;
                  v78 = v6 + 56 * v77;
                  if (sub_1C5A9EA18(v78, (_QWORD *)(v78 + 16), v73, (_QWORD *)(v73 + 16)))
                  {
                    *(_OWORD *)v117 = *(_OWORD *)v73;
                    *(_QWORD *)&v117[16] = *(_QWORD *)(v73 + 16);
                    v119 = 0;
                    v118 = 0uLL;
                    v118 = *(__n128 *)(v73 + 24);
                    v119 = *(_QWORD *)(v73 + 40);
                    *(_QWORD *)(v73 + 24) = 0;
                    *(_QWORD *)(v73 + 32) = 0;
                    *(_QWORD *)(v73 + 40) = 0;
                    v79 = *(_QWORD *)(v73 + 48);
                    *(_QWORD *)(v73 + 48) = 0;
                    v120 = v79;
                    do
                    {
                      v80 = v78;
                      *(_OWORD *)v73 = *(_OWORD *)v78;
                      *(_QWORD *)(v73 + 16) = *(_QWORD *)(v78 + 16);
                      v81 = v78 + 24;
                      sub_1C58C9490(v73 + 24, (__n128 *)(v78 + 24));
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = v6 + 56 * v77;
                      v73 = v80;
                    }
                    while (sub_1C5A9EA18(v78, (_QWORD *)(v78 + 16), (uint64_t)v117, &v117[16]));
                    *(_OWORD *)v80 = *(_OWORD *)v117;
                    *(_QWORD *)(v80 + 16) = *(_QWORD *)&v117[16];
                    sub_1C58C9490(v81, &v118);
                    sub_1C62AFE18((uint64_t)&v118);
                  }
                }
              }
              result = sub_1C62AFE18((uint64_t)&v114);
            }
            while (v9-- > 2);
          }
          return result;
        }
        v10 = (_OWORD *)(v7 + 56 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x1C01)
        {
          sub_1C5A9E4D4(v6 + 56 * ((unint64_t)v9 >> 1), v6, (uint64_t)v108);
        }
        else
        {
          sub_1C5A9E4D4(v6, v6 + 56 * ((unint64_t)v9 >> 1), (uint64_t)v108);
          v11 = 56 * ((unint64_t)v9 >> 1);
          v12 = a3;
          v13 = v6 + v11;
          sub_1C5A9E4D4(v6 + 56, v6 + v11 - 56, v105);
          sub_1C5A9E4D4(v6 + 112, v6 + 56 + v11, v104);
          sub_1C5A9E4D4(v6 + v11 - 56, (uint64_t)v10, v6 + 56 + v11);
          *(_OWORD *)v117 = *(_OWORD *)v6;
          *(_OWORD *)v6 = *v10;
          *v10 = *(_OWORD *)v117;
          v14 = *(_OWORD *)(v6 + 24);
          v15 = *(_QWORD *)(v6 + 16);
          v16 = *(_QWORD *)(v6 + 48);
          v118.n128_u64[0] = *(_QWORD *)(v6 + 40);
          *(_QWORD *)v117 = v15;
          *(_OWORD *)&v117[8] = v14;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
          *(_QWORD *)(v6 + 40) = 0;
          *(_QWORD *)(v6 + 48) = 0;
          v118.n128_u64[1] = v16;
          *(_QWORD *)(v6 + 16) = *(_QWORD *)(v13 + 16);
          v17 = v13 + 24;
          sub_1C58C9490(v6 + 24, (__n128 *)(v13 + 24));
          *(_QWORD *)(v13 + 16) = v15;
          a3 = v12;
          sub_1C58C9490(v17, (__n128 *)&v117[8]);
          sub_1C62AFE18((uint64_t)&v117[8]);
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_1C5A9EA18(v6 - 56, (_QWORD *)(v6 - 40), v6, (_QWORD *)(v6 + 16)))
        {
          *(_OWORD *)v117 = *(_OWORD *)v6;
          *(_QWORD *)&v117[16] = *(_QWORD *)(v6 + 16);
          v118 = 0uLL;
          v119 = 0;
          v38 = *(__n128 *)(v6 + 24);
          v39 = *(_QWORD *)(v6 + 48);
          v119 = *(_QWORD *)(v6 + 40);
          v118 = v38;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
          *(_QWORD *)(v6 + 40) = 0;
          *(_QWORD *)(v6 + 48) = 0;
          v120 = v39;
          if (sub_1C5A9EA18((uint64_t)v117, &v117[16], (uint64_t)v108, v103))
          {
            v40 = v6;
            do
            {
              v7 = v40 + 56;
              v41 = sub_1C5A9EA18((uint64_t)v117, &v117[16], v40 + 56, (_QWORD *)(v40 + 72));
              v40 = v7;
            }
            while (!v41);
          }
          else
          {
            v42 = (_QWORD *)(v6 + 72);
            do
            {
              v7 = (unint64_t)(v42 - 2);
              if ((unint64_t)(v42 - 2) >= a2)
                break;
              v43 = sub_1C5A9EA18((uint64_t)v117, &v117[16], (uint64_t)(v42 - 2), v42);
              v42 += 7;
            }
            while (!v43);
          }
          v44 = a2;
          if (v7 < a2)
          {
            v45 = a2;
            do
            {
              v44 = v45 - 56;
              v46 = sub_1C5A9EA18((uint64_t)v117, &v117[16], v45 - 56, (_QWORD *)(v45 - 40));
              v45 = v44;
            }
            while (v46);
          }
          while (v7 < v44)
          {
            *(_OWORD *)v113 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v44;
            *(_OWORD *)v44 = *(_OWORD *)v113;
            v47 = *(_OWORD *)(v7 + 24);
            v48 = *(_QWORD *)(v7 + 16);
            v49 = *(_QWORD *)(v7 + 48);
            v114.n128_u64[0] = *(_QWORD *)(v7 + 40);
            *(_OWORD *)&v113[8] = v47;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 48) = 0;
            v114.n128_u64[1] = v49;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v44 + 16);
            sub_1C58C9490(v7 + 24, (__n128 *)(v44 + 24));
            *(_QWORD *)(v44 + 16) = v48;
            sub_1C58C9490(v44 + 24, (__n128 *)&v113[8]);
            sub_1C62AFE18((uint64_t)&v113[8]);
            do
            {
              v50 = (_QWORD *)(v7 + 72);
              v7 += 56;
            }
            while (!sub_1C5A9EA18((uint64_t)v117, &v117[16], v7, v50));
            do
            {
              v51 = (_QWORD *)(v44 - 40);
              v44 -= 56;
            }
            while (sub_1C5A9EA18((uint64_t)v117, &v117[16], v44, v51));
          }
          v52 = (_OWORD *)(v7 - 56);
          if (v7 - 56 != v6)
          {
            *(_OWORD *)v6 = *v52;
            *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 - 40);
            sub_1C58C9490(v6 + 24, (__n128 *)(v7 - 32));
          }
          *v52 = *(_OWORD *)v117;
          *(_QWORD *)(v7 - 40) = *(_QWORD *)&v117[16];
          sub_1C58C9490(v7 - 32, &v118);
          result = sub_1C62AFE18((uint64_t)&v118);
          a4 = 0;
          continue;
        }
        v18 = 0;
        v19 = *(_OWORD *)v6;
        v20 = *(_QWORD *)(v6 + 16);
        v118 = 0uLL;
        v119 = 0;
        v118 = *(__n128 *)(v6 + 24);
        *(_QWORD *)&v117[16] = v20;
        v21 = *(_QWORD *)(v6 + 48);
        v119 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 48) = 0;
        v120 = v21;
        *(_OWORD *)v117 = v19;
        do
        {
          v22 = sub_1C5A9EA18(v6 + v18 + 56, (_QWORD *)(v6 + v18 + 72), (uint64_t)v117, &v117[16]);
          v18 += 56;
        }
        while (v22);
        v23 = v6 + v18;
        v24 = v110;
        if (v18 == 56)
        {
          v25 = v110;
          while (v23 < v25)
          {
            v26 = v25 - 56;
            v27 = sub_1C5A9EA18(v25 - 56, (_QWORD *)(v25 - 40), (uint64_t)v117, &v117[16]);
            v25 = v26;
            if (v27)
              goto LABEL_21;
          }
          v26 = v25;
        }
        else
        {
          do
          {
            v26 = v24 - 56;
            v28 = sub_1C5A9EA18(v24 - 56, (_QWORD *)(v24 - 40), (uint64_t)v117, &v117[16]);
            v24 = v26;
          }
          while (!v28);
        }
LABEL_21:
        v7 = v6 + v18;
        if (v23 < v26)
        {
          v29 = v26;
          do
          {
            *(_OWORD *)v113 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v29;
            *(_OWORD *)v29 = *(_OWORD *)v113;
            v30 = *(_OWORD *)(v7 + 24);
            v31 = *(_QWORD *)(v7 + 16);
            v32 = *(_QWORD *)(v7 + 48);
            v114.n128_u64[0] = *(_QWORD *)(v7 + 40);
            *(_OWORD *)&v113[8] = v30;
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 48) = 0;
            v114.n128_u64[1] = v32;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v29 + 16);
            sub_1C58C9490(v7 + 24, (__n128 *)(v29 + 24));
            *(_QWORD *)(v29 + 16) = v31;
            sub_1C58C9490(v29 + 24, (__n128 *)&v113[8]);
            sub_1C62AFE18((uint64_t)&v113[8]);
            do
            {
              v33 = (_QWORD *)(v7 + 72);
              v7 += 56;
            }
            while (sub_1C5A9EA18(v7, v33, (uint64_t)v117, &v117[16]));
            do
            {
              v34 = (_QWORD *)(v29 - 40);
              v29 -= 56;
            }
            while (!sub_1C5A9EA18(v29, v34, (uint64_t)v117, &v117[16]));
          }
          while (v7 < v29);
        }
        v35 = (_OWORD *)(v7 - 56);
        if (v7 - 56 != v6)
        {
          *(_OWORD *)v6 = *v35;
          *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 - 40);
          sub_1C58C9490(v6 + 24, (__n128 *)(v7 - 32));
        }
        *v35 = *(_OWORD *)v117;
        *(_QWORD *)(v7 - 40) = *(_QWORD *)&v117[16];
        sub_1C58C9490(v7 - 32, &v118);
        sub_1C62AFE18((uint64_t)&v118);
        v36 = v23 >= v26;
        a2 = v110;
        if (!v36)
        {
LABEL_33:
          result = sub_1C5A9D52C(v6, v7 - 56, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = sub_1C5A9E794(v6, v7 - 56);
        result = sub_1C5A9E794(v7, v110);
        if (!(_DWORD)result)
        {
          if (v37)
            continue;
          goto LABEL_33;
        }
        a2 = v7 - 56;
        if (!v37)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C5A9E270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;

  sub_1C5A9EAE0(a1, a2, a3, a4);
  result = sub_1C5A9EA18(a5, (_QWORD *)(a5 + 16), a4, (_QWORD *)(a4 + 16));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 16);
    v29 = *(__n128 *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    v13 = *(_QWORD *)(a4 + 40);
    v14 = *(_QWORD *)(a4 + 48);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v30 = v13;
    v31 = v14;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    sub_1C58C9490(a4 + 24, (__n128 *)(a5 + 24));
    *(_QWORD *)(a5 + 16) = v12;
    sub_1C58C9490(a5 + 24, &v29);
    sub_1C62AFE18((uint64_t)&v29);
    result = sub_1C5A9EA18(a4, (_QWORD *)(a4 + 16), a3, (_QWORD *)(a3 + 16));
    if ((_DWORD)result)
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 16);
      v29 = *(__n128 *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      v17 = *(_QWORD *)(a3 + 40);
      v18 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v30 = v17;
      v31 = v18;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      sub_1C58C9490(a3 + 24, (__n128 *)(a4 + 24));
      *(_QWORD *)(a4 + 16) = v16;
      sub_1C58C9490(a4 + 24, &v29);
      sub_1C62AFE18((uint64_t)&v29);
      result = sub_1C5A9EA18(a3, (_QWORD *)(a3 + 16), a2, (_QWORD *)(a2 + 16));
      if ((_DWORD)result)
      {
        v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v19;
        v20 = *(_QWORD *)(a2 + 16);
        v29 = *(__n128 *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v21 = *(_QWORD *)(a2 + 40);
        v22 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        v30 = v21;
        v31 = v22;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        sub_1C58C9490(a2 + 24, (__n128 *)(a3 + 24));
        *(_QWORD *)(a3 + 16) = v20;
        sub_1C58C9490(a3 + 24, &v29);
        sub_1C62AFE18((uint64_t)&v29);
        result = sub_1C5A9EA18(a2, (_QWORD *)(a2 + 16), a1, (_QWORD *)(a1 + 16));
        if ((_DWORD)result)
        {
          v23 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v23;
          v25 = *(__n128 *)(a1 + 24);
          v24 = (_QWORD *)(a1 + 24);
          v26 = *(v24 - 1);
          v29 = v25;
          *v24 = 0;
          v24[1] = 0;
          v27 = v24[2];
          v28 = v24[3];
          v24[2] = 0;
          v24[3] = 0;
          v30 = v27;
          v31 = v28;
          *(v24 - 1) = *(_QWORD *)(a2 + 16);
          sub_1C58C9490((uint64_t)v24, (__n128 *)(a2 + 24));
          *(_QWORD *)(a2 + 16) = v26;
          sub_1C58C9490(a2 + 24, &v29);
          return sub_1C62AFE18((uint64_t)&v29);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5A9E4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t result;
  int v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)(a2 + 16);
  v7 = (_QWORD *)(a1 + 16);
  v8 = sub_1C5A9EA18(a2, (_QWORD *)(a2 + 16), a1, (_QWORD *)(a1 + 16));
  result = sub_1C5A9EA18(a3, (_QWORD *)(a3 + 16), a2, v6);
  v10 = result;
  if (v8)
  {
    v11 = (_QWORD *)(a1 + 24);
    if (v10)
    {
      v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      v13 = *(_QWORD *)(a1 + 16);
      v35 = *(__n128 *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *v11 = 0;
      *(_QWORD *)(a1 + 48) = 0;
      v36 = v14;
      v37 = v15;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
      sub_1C58C9490((uint64_t)v11, (__n128 *)(a3 + 24));
      *(_QWORD *)(a3 + 16) = v13;
      sub_1C58C9490(a3 + 24, &v35);
      return sub_1C62AFE18((uint64_t)&v35);
    }
    v27 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v27;
    v28 = *(_QWORD *)(a1 + 16);
    v35 = *(__n128 *)(a1 + 24);
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *v11 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v36 = v29;
    v37 = v30;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    sub_1C58C9490((uint64_t)v11, (__n128 *)(a2 + 24));
    *(_QWORD *)(a2 + 16) = v28;
    sub_1C58C9490(a2 + 24, &v35);
    sub_1C62AFE18((uint64_t)&v35);
    result = sub_1C5A9EA18(a3, (_QWORD *)(a3 + 16), a2, v6);
    if ((_DWORD)result)
    {
      v31 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v31;
      v32 = *(_QWORD *)(a2 + 16);
      v35 = *(__n128 *)(a2 + 24);
      v33 = *(_QWORD *)(a2 + 40);
      v34 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v36 = v33;
      v37 = v34;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      sub_1C58C9490(a2 + 24, (__n128 *)(a3 + 24));
      *(_QWORD *)(a3 + 16) = v32;
      v26 = a3 + 24;
      goto LABEL_11;
    }
  }
  else if ((_DWORD)result)
  {
    v16 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v16;
    v17 = *(_QWORD *)(a2 + 16);
    v35 = *(__n128 *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v18 = *(_QWORD *)(a2 + 40);
    v19 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v36 = v18;
    v37 = v19;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    sub_1C58C9490(a2 + 24, (__n128 *)(a3 + 24));
    *(_QWORD *)(a3 + 16) = v17;
    sub_1C58C9490(a3 + 24, &v35);
    sub_1C62AFE18((uint64_t)&v35);
    result = sub_1C5A9EA18(a2, v6, a1, v7);
    if ((_DWORD)result)
    {
      v20 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v20;
      v22 = *(__n128 *)(a1 + 24);
      v21 = (_QWORD *)(a1 + 24);
      v23 = *(v21 - 1);
      v35 = v22;
      *v21 = 0;
      v21[1] = 0;
      v24 = v21[2];
      v25 = v21[3];
      v21[2] = 0;
      v21[3] = 0;
      v36 = v24;
      v37 = v25;
      *(v21 - 1) = *(_QWORD *)(a2 + 16);
      sub_1C58C9490((uint64_t)v21, (__n128 *)(a2 + 24));
      *(_QWORD *)(a2 + 16) = v23;
      v26 = a2 + 24;
LABEL_11:
      sub_1C58C9490(v26, &v35);
      return sub_1C62AFE18((uint64_t)&v35);
    }
  }
  return result;
}

BOOL sub_1C5A9E794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  _BYTE v22[24];
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 56);
      if (sub_1C5A9EA18(a2 - 56, (_QWORD *)(a2 - 40), a1, (_QWORD *)(a1 + 16)))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
        v9 = *(_OWORD *)(a1 + 24);
        v8 = (_QWORD *)(a1 + 24);
        *(_QWORD *)v22 = *(v8 - 1);
        v10 = *(_QWORD *)v22;
        *(_OWORD *)&v22[8] = v9;
        *v8 = 0;
        v8[1] = 0;
        v11 = v8[2];
        v12 = v8[3];
        v8[2] = 0;
        v8[3] = 0;
        v23.n128_u64[0] = v11;
        v23.n128_u64[1] = v12;
        *(v8 - 1) = *(_QWORD *)(a2 - 40);
        sub_1C58C9490((uint64_t)v8, (__n128 *)(a2 - 32));
        *(_QWORD *)(a2 - 40) = v10;
        sub_1C58C9490(a2 - 32, (__n128 *)&v22[8]);
        sub_1C62AFE18((uint64_t)&v22[8]);
      }
      return 1;
    case 3:
      sub_1C5A9E4D4(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      sub_1C5A9EAE0(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      sub_1C5A9E270(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      v13 = a1 + 112;
      sub_1C5A9E4D4(a1, a1 + 56, a1 + 112);
      v14 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  do
  {
    if (sub_1C5A9EA18(v14, (_QWORD *)(v14 + 16), v13, (_QWORD *)(v13 + 16)))
    {
      *(_OWORD *)v22 = *(_OWORD *)v14;
      *(_QWORD *)&v22[16] = *(_QWORD *)(v14 + 16);
      v23 = *(__n128 *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      v17 = *(_QWORD *)(v14 + 48);
      v24 = *(_QWORD *)(v14 + 40);
      v25 = v17;
      v18 = v15;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      while (1)
      {
        v19 = a1 + v18;
        *(_OWORD *)(v19 + 168) = *(_OWORD *)(a1 + v18 + 112);
        *(_QWORD *)(v19 + 184) = *(_QWORD *)(a1 + v18 + 128);
        v20 = (__n128 *)(a1 + v18 + 136);
        sub_1C58C9490(a1 + v18 + 192, v20);
        if (v18 == -112)
          break;
        v18 -= 56;
        if (!sub_1C5A9EA18((uint64_t)v22, &v22[16], v19 + 56, (_QWORD *)(v19 + 72)))
        {
          v21 = a1 + v18 + 168;
          goto LABEL_14;
        }
      }
      v21 = a1;
LABEL_14:
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)&v22[16];
      sub_1C58C9490((uint64_t)v20, &v23);
      ++v16;
      sub_1C62AFE18((uint64_t)&v23);
      if (v16 == 8)
        return v14 + 56 == a2;
    }
    v13 = v14;
    v15 += 56;
    v14 += 56;
  }
  while (v14 != a2);
  return 1;
}

BOOL sub_1C5A9EA18(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  const void *v10;
  int v11;
  int v13;
  BOOL v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a3 + 8);
  if (v7 >= v6)
    v8 = *(_QWORD *)(a1 + 8);
  else
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    v9 = *(const void **)a3;
    v10 = *(const void **)a1;
    v11 = memcmp(*(const void **)a1, *(const void **)a3, v8);
    if (v11 < 0)
      return 1;
    if (!v11 && v6 < v7)
      return 1;
    v13 = memcmp(v9, v10, v8);
    if (v13 < 0)
      return 0;
    v14 = v13 || v7 == v6;
    if (!v14 && v7 < v6)
      return 0;
  }
  else
  {
    if (v6 < v7)
      return 1;
    if (v7 < v6)
      return 0;
  }
  return *a2 < *a4;
}

uint64_t sub_1C5A9EAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  sub_1C5A9E4D4(a1, a2, a3);
  result = sub_1C5A9EA18(a4, (_QWORD *)(a4 + 16), a3, (_QWORD *)(a3 + 16));
  if ((_DWORD)result)
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 16);
    v23 = *(__n128 *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    v11 = *(_QWORD *)(a3 + 40);
    v12 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v24 = v11;
    v25 = v12;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    sub_1C58C9490(a3 + 24, (__n128 *)(a4 + 24));
    *(_QWORD *)(a4 + 16) = v10;
    sub_1C58C9490(a4 + 24, &v23);
    sub_1C62AFE18((uint64_t)&v23);
    result = sub_1C5A9EA18(a3, (_QWORD *)(a3 + 16), a2, (_QWORD *)(a2 + 16));
    if ((_DWORD)result)
    {
      v13 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 16);
      v23 = *(__n128 *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v15 = *(_QWORD *)(a2 + 40);
      v16 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v24 = v15;
      v25 = v16;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      sub_1C58C9490(a2 + 24, (__n128 *)(a3 + 24));
      *(_QWORD *)(a3 + 16) = v14;
      sub_1C58C9490(a3 + 24, &v23);
      sub_1C62AFE18((uint64_t)&v23);
      result = sub_1C5A9EA18(a2, (_QWORD *)(a2 + 16), a1, (_QWORD *)(a1 + 16));
      if ((_DWORD)result)
      {
        v17 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v17;
        v19 = *(__n128 *)(a1 + 24);
        v18 = (_QWORD *)(a1 + 24);
        v20 = *(v18 - 1);
        v23 = v19;
        *v18 = 0;
        v18[1] = 0;
        v21 = v18[2];
        v22 = v18[3];
        v18[2] = 0;
        v18[3] = 0;
        v24 = v21;
        v25 = v22;
        *(v18 - 1) = *(_QWORD *)(a2 + 16);
        sub_1C58C9490((uint64_t)v18, (__n128 *)(a2 + 24));
        *(_QWORD *)(a2 + 16) = v20;
        sub_1C58C9490(a2 + 24, &v23);
        return sub_1C62AFE18((uint64_t)&v23);
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::memprof::IndexedMemProfRecord::serialize(uint64_t *a1, uint64_t a2, llvm::raw_ostream *this)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21[8];

  *(_QWORD *)v21 = *((unsigned int *)a1 + 2);
  llvm::raw_ostream::write(this, v21, 8uLL);
  v6 = *((_DWORD *)a1 + 2);
  if (v6)
  {
    v7 = *a1;
    v8 = *a1 + 168 * v6;
    do
    {
      *(_QWORD *)v21 = *(unsigned int *)(v7 + 8);
      llvm::raw_ostream::write(this, v21, 8uLL);
      v9 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(uint64_t **)v7;
        v11 = 8 * v9;
        do
        {
          v12 = *v10++;
          *(_QWORD *)v21 = v12;
          llvm::raw_ostream::write(this, v21, 8uLL);
          v11 -= 8;
        }
        while (v11);
      }
      sub_1C5A9EE10(v7 + 64, a2);
      v7 += 168;
    }
    while (v7 != v8);
  }
  *(_QWORD *)v21 = *((unsigned int *)a1 + 48);
  result = llvm::raw_ostream::write(this, v21, 8uLL);
  v14 = *((unsigned int *)a1 + 48);
  if ((_DWORD)v14)
  {
    v15 = a1[23];
    v16 = v15 + (v14 << 6);
    do
    {
      *(_QWORD *)v21 = *(unsigned int *)(v15 + 8);
      result = llvm::raw_ostream::write(this, v21, 8uLL);
      v17 = *(unsigned int *)(v15 + 8);
      if ((_DWORD)v17)
      {
        v18 = *(uint64_t **)v15;
        v19 = 8 * v17;
        do
        {
          v20 = *v18++;
          *(_QWORD *)v21 = v20;
          result = llvm::raw_ostream::write(this, v21, 8uLL);
          v19 -= 8;
        }
        while (v19);
      }
      v15 += 64;
    }
    while (v15 != v16);
  }
  return result;
}

void sub_1C5A9EE10(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
    __asm { BR              X9 }
}

void llvm::memprof::IndexedMemProfRecord::deserialize(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _DWORD v35[14];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x100000000;
  *(_QWORD *)(a3 + 184) = a3 + 200;
  v31 = a3 + 184;
  *(_QWORD *)(a3 + 192) = 0x100000000;
  v4 = a2 + 1;
  v32 = *a2;
  if (*a2)
  {
    v6 = 0;
    do
    {
      v33 = v35;
      v34 = 0x600000000;
      v35[12] = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v7 = v4 + 1;
      v8 = *v4;
      if (*v4)
      {
        v9 = 0;
        do
        {
          v10 = *v7;
          if (v9 >= HIDWORD(v34))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v9 + 1, 8);
            v9 = v34;
          }
          *((_QWORD *)v33 + v9) = v10;
          v9 = v34 + 1;
          LODWORD(v34) = v34 + 1;
          ++v7;
          --v8;
        }
        while (v8);
        v4 = v7 - 1;
      }
      if (*(_DWORD *)(a1 + 8))
        __asm { BR              X11 }
      v11 = *(unsigned int *)(a3 + 8);
      v12 = *(_QWORD *)a3;
      if (v11 >= *(_DWORD *)(a3 + 12))
      {
        v22 = v11 + 1;
        v23 = v12 + 168 * v11 > (unint64_t)&v33;
        if (v12 <= (unint64_t)&v33 && v23)
        {
          v24 = (char *)&v33 - v12;
          sub_1C630908C(a3, v22);
          v12 = *(_QWORD *)a3;
          v13 = (void **)&v24[*(_QWORD *)a3];
        }
        else
        {
          sub_1C630908C(a3, v22);
          v12 = *(_QWORD *)a3;
          v13 = &v33;
        }
      }
      else
      {
        v13 = &v33;
      }
      v14 = *(_DWORD *)(a3 + 8);
      v15 = (_QWORD *)(v12 + 168 * v14);
      *v15 = v15 + 2;
      v15[1] = 0x600000000;
      if (*((_DWORD *)v13 + 2))
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v15, (uint64_t)v13);
      v16 = v12 + 168 * v14;
      v17 = *((_OWORD *)v13 + 4);
      v18 = *((_OWORD *)v13 + 6);
      *(_OWORD *)(v16 + 80) = *((_OWORD *)v13 + 5);
      *(_OWORD *)(v16 + 96) = v18;
      *(_OWORD *)(v16 + 64) = v17;
      v19 = *((_OWORD *)v13 + 7);
      v20 = *((_OWORD *)v13 + 8);
      v21 = *((_OWORD *)v13 + 9);
      *(_QWORD *)(v16 + 160) = v13[20];
      *(_OWORD *)(v16 + 128) = v20;
      *(_OWORD *)(v16 + 144) = v21;
      *(_OWORD *)(v16 + 112) = v19;
      ++*(_DWORD *)(a3 + 8);
      if (v33 != v35)
        free(v33);
      v4 = (uint64_t *)((char *)v4 + 108);
      ++v6;
    }
    while (v6 != v32);
  }
  v25 = *v4;
  if (*v4)
  {
    v26 = 0;
    v27 = (unint64_t *)(v4 + 1);
    while (1)
    {
      v28 = *v27;
      v33 = v35;
      v34 = 0x600000000;
      if (v28 >= 7)
        break;
      ++v27;
      if (v28)
      {
        v29 = 0;
        do
        {
LABEL_29:
          v30 = *v27;
          if (v29 >= HIDWORD(v34))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v29 + 1, 8);
            v29 = v34;
          }
          *((_QWORD *)v33 + v29) = v30;
          v29 = v34 + 1;
          LODWORD(v34) = v34 + 1;
          ++v27;
          --v28;
        }
        while (v28);
      }
      sub_1C5A9F388(v31, (unint64_t)&v33);
      if (v33 != v35)
        free(v33);
      if (++v26 == v25)
        return;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v28, 8);
    ++v27;
    v29 = v34;
    goto LABEL_29;
  }
}

_QWORD *sub_1C5A9F388(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + (v4 << 6);
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C63091D8(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C63091D8(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = (_QWORD *)(v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  *result = result + 2;
  result[1] = 0x600000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)result, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::memprof::IndexedMemProfRecord::getGUID(int *a1, unint64_t a2)
{
  unint64_t v4;
  size_t v5;
  uint64_t v7[2];
  int v8[4];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7[0] = (uint64_t)a1;
  v7[1] = a2;
  v4 = llvm::StringRef::find(v7, ".llvm.", 6uLL, 0);
  v9 = xmmword_1C85F4BB0;
  if (a2 >= v4)
    v5 = v4;
  else
    v5 = a2;
  v10 = 0;
  llvm::MD5::update((int *)&v9, a1, v5);
  llvm::MD5::final((int *)&v9, v8);
  return *(_QWORD *)v8;
}

void llvm::memprof::readMemProfSchema(unint64_t **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;
  _WORD v16[80];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = **this;
  if (v5 < 0x15)
  {
    v14 = v16;
    v15 = 0x1400000000;
    v8 = v4 + 1;
    if (v5)
    {
      v9 = 0;
      do
      {
        v10 = *v8;
        if (*v8 > 0x13)
        {
          v11 = operator new();
          v12 = "memprof schema invalid";
          v13 = 259;
          *(_QWORD *)v11 = off_1E8192D50;
          *(_DWORD *)(v11 + 8) = 9;
          llvm::Twine::str((llvm::Twine *)&v12, (_QWORD *)(v11 + 16));
          *(_BYTE *)(a2 + 176) |= 1u;
          *(_QWORD *)a2 = v11;
          goto LABEL_14;
        }
        if (v9 >= HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v9 + 1, 8);
          v9 = v15;
        }
        *((_QWORD *)v14 + v9) = v10;
        v9 = v15 + 1;
        LODWORD(v15) = v15 + 1;
        ++v8;
        --v5;
      }
      while (v5);
      *this = v8;
      *(_BYTE *)(a2 + 176) &= ~1u;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 0x1400000000;
      if (v9)
        sub_1C614D378(a2, (uint64_t)&v14);
    }
    else
    {
      *this = v8;
      *(_BYTE *)(a2 + 176) &= ~1u;
      *(_QWORD *)a2 = a2 + 16;
      *(_QWORD *)(a2 + 8) = 0x1400000000;
    }
LABEL_14:
    if (v14 != v16)
      free(v14);
  }
  else
  {
    v6 = operator new();
    v14 = "memprof schema invalid";
    v16[8] = 259;
    *(_QWORD *)v6 = off_1E8192D50;
    *(_DWORD *)(v6 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)&v14, (_QWORD *)(v6 + 16));
    *(_BYTE *)(a2 + 176) |= 1u;
    *(_QWORD *)a2 = v6;
  }
}

uint64_t **llvm::InstrProfSummaryBuilder::addRecord(uint64_t **result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;

  v3 = (uint64_t)result;
  v4 = **(_QWORD **)a2;
  ++*((_DWORD *)result + 25);
  if (v4 != -1)
  {
    result = sub_1C6309644((uint64_t)result, v4);
    if (*(_QWORD *)(v3 + 88) < v4)
      *(_QWORD *)(v3 + 88) = v4;
  }
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if ((unint64_t)v5 >= 9)
  {
    v6 = v5 >> 3;
    if (v6 <= 2)
      v7 = 2;
    else
      v7 = v6;
    for (i = 1; i != v7; ++i)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a2 + 8 * i);
      if (v9 != -1)
      {
        result = sub_1C6309644(v3, *(_QWORD *)(*(_QWORD *)a2 + 8 * i));
        if (*(_QWORD *)(v3 + 104) < v9)
          *(_QWORD *)(v3 + 104) = v9;
      }
    }
  }
  return result;
}

uint64_t **llvm::SampleProfileSummaryBuilder::addRecord(uint64_t **this, const llvm::sampleprof::FunctionSamples *a2, char a3)
{
  llvm::SampleProfileSummaryBuilder *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = (llvm::SampleProfileSummaryBuilder *)this;
  if ((a3 & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 52) & 4) != 0)
      return this;
  }
  else
  {
    ++*((_DWORD *)this + 25);
    v5 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v5 > this[11])
      this[11] = v5;
  }
  v6 = (char *)*((_QWORD *)a2 + 9);
  v7 = (char *)a2 + 80;
  if (v6 != (char *)a2 + 80)
  {
    do
    {
      this = sub_1C6309644((uint64_t)v4, *((_QWORD *)v6 + 5));
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  v11 = (char *)*((_QWORD *)a2 + 12);
  v12 = (char *)a2 + 104;
  if (v11 != v12)
  {
    do
    {
      v13 = (char *)*((_QWORD *)v11 + 5);
      if (v13 != v11 + 48)
      {
        do
        {
          this = (uint64_t **)llvm::SampleProfileSummaryBuilder::addRecord(v4, (const llvm::sampleprof::FunctionSamples *)(v13 + 56), 1);
          v14 = (char *)*((_QWORD *)v13 + 1);
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = *(char **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (char *)*((_QWORD *)v13 + 2);
              v10 = *(_QWORD *)v15 == (_QWORD)v13;
              v13 = v15;
            }
            while (!v10);
          }
          v13 = v15;
        }
        while (v15 != v11 + 48);
      }
      v16 = (char *)*((_QWORD *)v11 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char *)*((_QWORD *)v11 + 2);
          v10 = *(_QWORD *)v17 == (_QWORD)v11;
          v11 = v17;
        }
        while (!v10);
      }
      v11 = v17;
    }
    while (v17 != v12);
  }
  return this;
}

void llvm::ProfileSummaryBuilder::computeDetailedSummary(llvm::ProfileSummaryBuilder *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  unsigned int *v29;
  unint64_t v30;
  int v31;
  const void *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;

  if (*((_QWORD *)this + 3) != *((_QWORD *)this + 4))
  {
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v2 = (unsigned int *)*((_QWORD *)this + 3);
    v3 = (unsigned int *)*((_QWORD *)this + 4);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = (char *)this + 8;
      v8 = *(char **)this;
      v29 = (unsigned int *)*((_QWORD *)this + 4);
      do
      {
        v9 = *v2;
        v10 = *((_QWORD *)this + 9);
        v37 = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v36, v10, 0);
        v35 = 128;
        v31 = v9;
        llvm::APInt::initSlowCase((llvm::APInt *)&v34, v9, 0);
        v33 = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v32, 1000000, 0);
        llvm::APInt::operator*((uint64_t)&v36, &v34, (uint64_t)&v38);
        if (v37 >= 0x41 && v36)
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        v36 = v38;
        v37 = v39;
        llvm::APInt::sdiv((llvm::APInt *)&v36, &v32, (llvm::APInt *)&v38);
        if (v37 >= 0x41 && v36)
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        v11 = v38;
        v36 = v38;
        v37 = v39;
        if (v39 < 0x41)
          v11 = (unint64_t *)&v36;
        v12 = *v11;
        v13 = v5 >= v12 || v8 == v7;
        if (!v13)
        {
          v14 = v8;
          do
          {
            v15 = (char *)*((_QWORD *)v14 + 1);
            v16 = v14;
            if (v15)
            {
              do
              {
                v8 = v15;
                v15 = *(char **)v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v8 = (char *)*((_QWORD *)v16 + 2);
                v13 = *(_QWORD *)v8 == (_QWORD)v16;
                v16 = v8;
              }
              while (!v13);
            }
            v6 = *((_QWORD *)v14 + 4);
            v17 = *((unsigned int *)v14 + 10);
            v5 += v6 * v17;
            v4 += v17;
            if (v5 >= v12)
              break;
            v14 = v8;
          }
          while (v8 != v7);
        }
        v18 = v4;
        v20 = (_QWORD *)*((_QWORD *)this + 7);
        v19 = *((_QWORD *)this + 8);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (_QWORD *)*((_QWORD *)this + 6);
          v23 = 0xAAAAAAAAAAAAAAABLL * (v20 - v22) + 1;
          if (v23 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v22) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          v30 = v23;
          if (v23)
          {
            if (v23 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v25 = (char *)operator new(24 * v23);
            v18 = v4;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[8 * (v20 - v22)];
          *(_DWORD *)v26 = v31;
          *((_QWORD *)v26 + 1) = v6;
          *((_QWORD *)v26 + 2) = v18;
          v27 = v26;
          if (v20 != v22)
          {
            do
            {
              v28 = *(_OWORD *)(v20 - 3);
              *((_QWORD *)v27 - 1) = *(v20 - 1);
              *(_OWORD *)(v27 - 24) = v28;
              v27 -= 24;
              v20 -= 3;
            }
            while (v20 != v22);
            v20 = (_QWORD *)*((_QWORD *)this + 6);
          }
          v21 = v26 + 24;
          *((_QWORD *)this + 6) = v27;
          *((_QWORD *)this + 7) = v26 + 24;
          *((_QWORD *)this + 8) = &v25[24 * v30];
          v3 = v29;
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_DWORD *)v20 = v31;
          v21 = v20 + 3;
          v20[1] = v6;
          v20[2] = v4;
        }
        *((_QWORD *)this + 7) = v21;
        if (v33 >= 0x41 && v32)
          MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        if (v35 >= 0x41 && v34)
          MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
        if (v37 >= 0x41)
        {
          if (v36)
            MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        }
        ++v2;
      }
      while (v2 != v3);
    }
  }
}

_QWORD *sub_1C5A9FCC0(uint64_t *a1, int *a2, _BYTE **a3, uint64_t *a4, uint64_t *a5, int *a6, uint64_t *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;

  v17 = operator new();
  v18 = *a2;
  v19 = *a4;
  v20 = *a5;
  v21 = *a6;
  v22 = *a7;
  LODWORD(a8) = *a8;
  LODWORD(a2) = *a9;
  *(_DWORD *)v17 = v18;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 8) = 0;
  result = sub_1C4D6CDA0((_QWORD *)(v17 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v20;
  *(_QWORD *)(v17 + 48) = v21;
  *(_QWORD *)(v17 + 56) = v22;
  *(_DWORD *)(v17 + 64) = (_DWORD)a8;
  *(_DWORD *)(v17 + 68) = (_DWORD)a2;
  *(_BYTE *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *a1 = v17;
  return result;
}

void llvm::SampleProfileSummaryBuilder::computeSummaryForProfiles(uint64_t **this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void **v3;
  BOOL v6;
  uint64_t *v7;
  char *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  int v22;
  __int128 *v23;

  v3 = (void **)a2;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v22 = 1065353216;
  if (byte_1ED835500
    || (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat ? (v6 = word_1ED835488 == 0) : (v6 = 0), v6))
  {
    v7 = *(uint64_t **)(a2 + 16);
    if (v7)
    {
      do
      {
        v16 = *(_OWORD *)(v7 + 9);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        v23 = &v16;
        v3 = __p;
        v8 = sub_1C57611EC((uint64_t)__p, (uint64_t)&v16, (uint64_t)&std::piecewise_construct, &v23);
        sub_1C5753498((uint64_t)(v8 + 56), (uint64_t)(v7 + 7), 1uLL);
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v3 = __p;
    }
  }
  for (i = v3[2]; i; i = (_QWORD *)*i)
    llvm::SampleProfileSummaryBuilder::addRecord(this, (const llvm::sampleprof::FunctionSamples *)(i + 7), 0);
  llvm::ProfileSummaryBuilder::computeDetailedSummary((llvm::ProfileSummaryBuilder *)this);
  v10 = operator new();
  v11 = this[9];
  v12 = this[10];
  v13 = this[11];
  *(_DWORD *)v10 = 2;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v14 = this[12];
  sub_1C4D6CDA0((_QWORD *)(v10 + 8), this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (this[7] - this[6]));
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v12;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v13;
  *(_QWORD *)(v10 + 64) = v14;
  *(_BYTE *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *a3 = v10;
  sub_1C630A054((uint64_t)__p, (_QWORD **)v21);
  v15 = __p[0];
  __p[0] = 0;
  if (v15)
    operator delete(v15);
}

_QWORD *sub_1C5A9FF38@<X0>(_DWORD *a1@<X0>, _BYTE **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, _DWORD *a7@<X6>, _DWORD *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;

  v18 = operator new();
  v19 = *a3;
  v20 = *a4;
  v21 = *a5;
  v22 = *a6;
  LODWORD(a7) = *a7;
  LODWORD(a8) = *a8;
  *(_DWORD *)v18 = *a1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 8) = 0;
  result = sub_1C4D6CDA0((_QWORD *)(v18 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v20;
  *(_QWORD *)(v18 + 48) = v21;
  *(_QWORD *)(v18 + 56) = v22;
  *(_DWORD *)(v18 + 64) = (_DWORD)a7;
  *(_DWORD *)(v18 + 68) = (_DWORD)a8;
  *(_BYTE *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  *a9 = v18;
  return result;
}

uint64_t **sub_1C5AA000C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 <= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 <= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    v9[4] = **a4;
    *((_DWORD *)v9 + 10) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_1C5AA00F0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C5AA00F0(a1, *(_QWORD *)a2);
    sub_1C5AA00F0(a1, *((_QWORD *)a2 + 1));
    sub_1C63097D8(a2 + 152, *((_QWORD *)a2 + 20));
    sub_1C6309824((uint64_t)(a2 + 128), *((_QWORD **)a2 + 17));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1C5AA0158()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;
  int v5;

  v5 = 1;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Merge context profiles before calculating thresholds.";
  v4.n128_u64[1] = 53;
  sub_1C630986C(&v5, (char **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &UseContextLessSummary, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 990000;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"A count is hot if it exceeds the minimum count to reach this percentile of total counts.";
  v4.n128_u64[1] = 88;
  sub_1C63099B4(&v5, &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &ProfileSummaryCutoffHot, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 999999;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"A count is cold if it is below the minimum count to reach this percentile of total counts.";
  v4.n128_u64[1] = 90;
  sub_1C6309AF4(&v5, &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &ProfileSummaryCutoffCold, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 15000;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"The code working set size is considered huge if the number of blocks required to re"
                                     "ach the -profile-summary-cutoff-hot percentile exceeds this count.";
  v4.n128_u64[1] = 149;
  sub_1C6309C34(&v5, &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &ProfileSummaryHugeWorkingSetSizeThreshold, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 12500;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"The code working set size is considered large if the number of blocks required to r"
                                     "each the -profile-summary-cutoff-hot percentile exceeds this count.";
  v4.n128_u64[1] = 150;
  sub_1C6309D78(&v5, &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &ProfileSummaryLargeWorkingSetSizeThreshold, &dword_1C475E000);
  LODWORD(v3) = 2;
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"A fixed hot count that overrides the count derived from profile-summary-cutoff-hot";
  v4.n128_u64[1] = 82;
  sub_1C6309EBC(&v3, &v5, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &ProfileSummaryHotCount, &dword_1C475E000);
  LODWORD(v3) = 2;
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"A fixed cold count that overrides the count derived from profile-summary-cutoff-cold";
  v4.n128_u64[1] = 84;
  sub_1C6309F88(&v3, &v5, (__int128 *)&v4);
  return __cxa_atexit((void (*)(void *))sub_1C56031FC, &ProfileSummaryColdCount, &dword_1C475E000);
}

llvm::raw_ostream *llvm::sampleprof::operator<<(llvm::raw_ostream *a1, llvm::sampleprof::LineLocation *this)
{
  llvm::sampleprof::LineLocation::print(this, a1);
  return a1;
}

uint64_t llvm::sampleprof::SampleRecord::merge(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v6 = sub_1C5AA0480(a1, *(_QWORD *)a2, a3);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v8)
  {
    for (i = *(uint64_t **)(a2 + 8); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a2 + 8);
  }
  v11 = (uint64_t *)(v7 + 8 * v8);
  if (i != v11)
  {
    v12 = *i;
    do
    {
      v13 = sub_1C5AA0504((uint64_t)a1, (unsigned __int8 *)(v12 + 16), *(_QWORD *)v12, *(_QWORD *)(v12 + 8), a3);
      do
      {
        v14 = i[1];
        ++i;
        v12 = v14;
        if (v14)
          v15 = v12 == -8;
        else
          v15 = 1;
      }
      while (v15);
      if (v13)
        v16 = (_DWORD)v6 == 0;
      else
        v16 = 0;
      if (v16)
        v6 = v13;
      else
        v6 = v6;
    }
    while (i != v11);
  }
  return v6;
}

uint64_t sub_1C5AA0480(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  BOOL v13;

  v3 = *a1;
  v4 = __clz(a3) + __clz(a2);
  if (v4 < 0x40)
  {
    if (v4 != 63
      || (v12 = (a2 >> 1) * a3, (v12 & 0x8000000000000000) != 0)
      || (v5 = 2 * v12, (a2 & 1) != 0) && (v5 + a3 >= v5 ? (v13 = v5 + a3 >= a3) : (v13 = 0), v5 += a3, !v13))
    {
      *a1 = -1;
      return 10;
    }
  }
  else
  {
    v5 = a3 * a2;
  }
  v6 = v5 + v3;
  v8 = v5 + v3 >= v3 && v6 >= v5;
  v9 = !v8;
  if (v8)
    v10 = v6;
  else
    v10 = -1;
  *a1 = v10;
  if (v9)
    return 10;
  else
    return 0;
}

uint64_t sub_1C5AA0504(uint64_t a1, unsigned __int8 *a2, size_t a3, unint64_t a4, unint64_t a5)
{
  size_t **v7;
  size_t *v8;
  size_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v18;
  BOOL v19;

  v7 = sub_1C6241FF4(a1 + 8, a2, a3);
  v8 = *v7;
  v9 = (*v7)[1];
  v10 = __clz(a5) + __clz(a4);
  if (v10 < 0x40)
  {
    if (v10 != 63
      || (v18 = (a4 >> 1) * a5, (v18 & 0x8000000000000000) != 0)
      || (v11 = 2 * v18, (a4 & 1) != 0) && (v11 + a5 >= v11 ? (v19 = v11 + a5 >= a5) : (v19 = 0), v11 += a5, !v19))
    {
      v8[1] = -1;
      return 10;
    }
  }
  else
  {
    v11 = a5 * a4;
  }
  v12 = v11 + v9;
  v14 = v11 + v9 >= v9 && v12 >= v11;
  v15 = !v14;
  if (v14)
    v16 = v12;
  else
    v16 = -1;
  v8[1] = v16;
  if (v15)
    return 10;
  else
    return 0;
}

void llvm::sampleprof::SampleRecord::print(llvm::sampleprof::SampleRecord *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  _QWORD **v14;
  _QWORD *v15[2];

  sub_1C5E21910(a2, *(_QWORD *)this, 0, 0, 0);
  if (*((_DWORD *)this + 5))
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 7uLL)
    {
      *v5 = 0x3A736C6C6163202CLL;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", calls:", 8uLL);
    }
    sub_1C62A3FC4((uint64_t *)this + 1, &v14);
    v6 = v14;
    if (v14 != v15)
    {
      do
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v7)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
          v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
        else
        {
          *v7 = 32;
          v8 = (_BYTE *)(*((_QWORD *)a2 + 4) + 1);
          *((_QWORD *)a2 + 4) = v8;
        }
        v9 = (const void *)v6[4];
        v10 = v6[5];
        if (v10 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
        {
          if (v10)
          {
            memcpy(v8, v9, v6[5]);
            v8 = (_BYTE *)(*((_QWORD *)a2 + 4) + v10);
            *((_QWORD *)a2 + 4) = v8;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, (const char *)v9, v6[5]);
          v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        }
        if (*((_BYTE **)a2 + 3) == v8)
        {
          llvm::raw_ostream::write(a2, ":", 1uLL);
        }
        else
        {
          *v8 = 58;
          ++*((_QWORD *)a2 + 4);
        }
        sub_1C5E21910(a2, v6[6], 0, 0, 0);
        v11 = (_QWORD *)v6[1];
        if (v11)
        {
          do
          {
            v12 = (_QWORD **)v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD **)v6[2];
            v13 = *v12 == v6;
            v6 = v12;
          }
          while (!v13);
        }
        v6 = v12;
      }
      while (v12 != v15);
    }
    sub_1C47655E8((uint64_t)&v14, v15[0]);
  }
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v4 = 10;
    ++*((_QWORD *)a2 + 4);
  }
}

llvm::raw_ostream *llvm::sampleprof::operator<<(llvm::raw_ostream *a1, llvm::sampleprof::SampleRecord *this)
{
  llvm::sampleprof::SampleRecord::print(this, a1);
  return a1;
}

void llvm::sampleprof::FunctionSamples::print(llvm::sampleprof::FunctionSamples *this, llvm::raw_ostream *a2, unsigned int a3)
{
  void *v6;
  _BYTE *v7;
  _WORD *v8;
  _WORD *v9;
  void *v10;
  void *v11;
  llvm::sampleprof::LineLocation **v12;
  uint64_t v13;
  _WORD *v14;
  llvm::sampleprof::LineLocation *v15;
  _WORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  llvm::sampleprof::LineLocation **v20;
  llvm::sampleprof::LineLocation **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  const void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _WORD *v31;
  void *v32;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  _QWORD v36[22];

  v36[20] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 1))
  {
    v6 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 0xCuLL)
    {
      qmemcpy(v6, "CFG checksum ", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "CFG checksum ", 0xDuLL);
    }
    sub_1C5E21910(a2, *((_QWORD *)this + 1), 0, 0, 0);
    v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v7)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v7 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  sub_1C5E21910(a2, *((_QWORD *)this + 7), 0, 0, 0);
  v8 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8236;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", ", 2uLL);
  }
  sub_1C5E21910(a2, *((_QWORD *)this + 8), 0, 0, 0);
  v9 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", ", 2uLL);
  }
  sub_1C5E21910(a2, *((_QWORD *)this + 11), 0, 0, 0);
  v10 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0xEuLL)
  {
    qmemcpy(v10, " sampled lines\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, " sampled lines\n", 0xFuLL);
  }
  llvm::raw_ostream::indent(a2, a3);
  if (*((_QWORD *)this + 11))
  {
    v11 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 0x2AuLL)
    {
      qmemcpy(v11, "Samples collected in the function's body {\n", 43);
      *((_QWORD *)a2 + 4) += 43;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Samples collected in the function's body {\n", 0x2BuLL);
    }
    sub_1C5AA3558((uint64_t)&v34, (_QWORD *)this + 9);
    if (v35)
    {
      v12 = (llvm::sampleprof::LineLocation **)v34;
      v13 = 8 * v35;
      do
      {
        llvm::raw_ostream::indent(a2, a3 + 2);
        llvm::sampleprof::LineLocation::print(*v12, a2);
        v14 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v14 > 1uLL)
        {
          *v14 = 8250;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ": ", 2uLL);
        }
        v15 = *v12++;
        llvm::sampleprof::SampleRecord::print((llvm::sampleprof::LineLocation *)((char *)v15 + 8), a2);
        v13 -= 8;
      }
      while (v13);
    }
    llvm::raw_ostream::indent(a2, a3);
    v16 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 2685;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "}\n", 2uLL);
    }
    if (v34 != v36)
      free(v34);
  }
  else
  {
    v17 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 0x2BuLL)
    {
      qmemcpy(v17, "No samples collected in the function's body\n", 44);
      *((_QWORD *)a2 + 4) += 44;
    }
    else
    {
      llvm::raw_ostream::write(a2, "No samples collected in the function's body\n", 0x2CuLL);
    }
  }
  llvm::raw_ostream::indent(a2, a3);
  if (*((_QWORD *)this + 14))
  {
    v18 = (_QWORD *)((char *)this + 96);
    v19 = (void *)*((_QWORD *)a2 + 4);
    v33 = a3;
    if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 0x28uLL)
    {
      qmemcpy(v19, "Samples collected in inlined callsites {\n", 41);
      *((_QWORD *)a2 + 4) += 41;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Samples collected in inlined callsites {\n", 0x29uLL);
    }
    sub_1C5AA403C((uint64_t)&v34, v18);
    if (v35)
    {
      v20 = (llvm::sampleprof::LineLocation **)v34;
      v21 = (llvm::sampleprof::LineLocation **)((char *)v34 + 8 * v35);
      do
      {
        v22 = (_QWORD *)*((_QWORD *)*v20 + 1);
        v23 = (uint64_t)*v20 + 16;
        if (v22 != (_QWORD *)v23)
        {
          do
          {
            llvm::raw_ostream::indent(a2, v33 + 2);
            llvm::sampleprof::LineLocation::print(*v20, a2);
            v24 = *((_QWORD *)a2 + 4);
            if ((unint64_t)(*((_QWORD *)a2 + 3) - v24) > 0x11)
            {
              *(_WORD *)(v24 + 16) = 8250;
              *(_OWORD *)v24 = *(_OWORD *)": inlined callee: ";
              v25 = (_WORD *)(*((_QWORD *)a2 + 4) + 18);
              *((_QWORD *)a2 + 4) = v25;
            }
            else
            {
              llvm::raw_ostream::write(a2, ": inlined callee: ", 0x12uLL);
              v25 = (_WORD *)*((_QWORD *)a2 + 4);
            }
            v26 = (const void *)v22[9];
            v27 = v22[10];
            if (v27 <= *((_QWORD *)a2 + 3) - (_QWORD)v25)
            {
              if (v27)
              {
                memcpy(v25, v26, v22[10]);
                v25 = (_WORD *)(*((_QWORD *)a2 + 4) + v27);
                *((_QWORD *)a2 + 4) = v25;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, (const char *)v26, v22[10]);
              v25 = (_WORD *)*((_QWORD *)a2 + 4);
            }
            if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 1uLL)
            {
              *v25 = 8250;
              *((_QWORD *)a2 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(a2, ": ", 2uLL);
            }
            llvm::sampleprof::FunctionSamples::print((llvm::sampleprof::FunctionSamples *)(v22 + 7), a2, v33 + 4);
            v28 = (_QWORD *)v22[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v22[2];
                v30 = *v29 == (_QWORD)v22;
                v22 = v29;
              }
              while (!v30);
            }
            v22 = v29;
          }
          while (v29 != (_QWORD *)v23);
        }
        ++v20;
      }
      while (v20 != v21);
    }
    llvm::raw_ostream::indent(a2, v33);
    v31 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v31 > 1uLL)
    {
      *v31 = 2685;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "}\n", 2uLL);
    }
    if (v34 != v36)
      free(v34);
  }
  else
  {
    v32 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v32 > 0x25uLL)
    {
      qmemcpy(v32, "No inlined callsites in this function\n", 38);
      *((_QWORD *)a2 + 4) += 38;
    }
    else
    {
      llvm::raw_ostream::write(a2, "No inlined callsites in this function\n", 0x26uLL);
    }
  }
}

llvm::raw_ostream *llvm::sampleprof::operator<<(llvm::raw_ostream *a1, llvm::sampleprof::FunctionSamples *this)
{
  llvm::sampleprof::FunctionSamples::print(this, a1, 0);
  return a1;
}

void llvm::sampleprof::sortFuncProfiles(uint64_t a1, __n128 **a2, __n128 a3)
{
  uint64_t *v4;
  __n128 *v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __n128 *v18;
  __n128 v19;
  uint64_t v20;
  const std::nothrow_t *v21;
  unint64_t v22;
  void *v23;
  BOOL v24;
  void *v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v5 = a2[1];
    do
    {
      v6 = (unint64_t)(v4 + 7);
      v26 = *(__n128 *)(v4 + 9);
      v27 = *(_OWORD *)(v4 + 11);
      v28 = v4[13];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v11 = *a2;
        v12 = 0xAAAAAAAAAAAAAAABLL * (v5 - *a2);
        v13 = v12 + 1;
        if (v12 + 1 > 0x555555555555555)
          abort();
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v11) >> 4);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x2AAAAAAAAAAAAAALL)
          v15 = 0x555555555555555;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 > 0x555555555555555)
            sub_1C4764EE4();
          v16 = (char *)operator new(48 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[48 * v12];
        a3 = v26;
        *(__n128 *)v17 = v26;
        *((_OWORD *)v17 + 1) = v27;
        *((_QWORD *)v17 + 4) = v28;
        *((_QWORD *)v17 + 5) = v6;
        v18 = (__n128 *)v17;
        if (v5 != v11)
        {
          do
          {
            a3 = v5[-3];
            v19 = v5[-1];
            v18[-2] = v5[-2];
            v18[-1] = v19;
            v18[-3] = a3;
            v18 -= 3;
            v5 -= 3;
          }
          while (v5 != v11);
          v5 = *a2;
        }
        v10 = (uint64_t)(v17 + 48);
        *a2 = v18;
        a2[1] = (__n128 *)(v17 + 48);
        a2[2] = (__n128 *)&v16[48 * v15];
        if (v5)
          operator delete(v5);
      }
      else
      {
        a3 = *(__n128 *)(v4 + 9);
        v8 = *(__n128 *)(v4 + 11);
        v9 = v4[13];
        *v5 = a3;
        v5[1] = v8;
        v5[2].n128_u64[0] = v9;
        v5[2].n128_u64[1] = v6;
        v10 = (uint64_t)&v5[3];
      }
      a2[1] = (__n128 *)v10;
      v4 = (uint64_t *)*v4;
      v5 = (__n128 *)v10;
    }
    while (v4);
  }
  else
  {
    v10 = (uint64_t)a2[1];
  }
  v20 = (uint64_t)*a2;
  if (v10 - v20 < 1)
  {
LABEL_27:
    sub_1C5AA4494(v20, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v20) >> 4), 0, 0, a3);
  }
  else
  {
    v21 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v20) >> 4);
    while (1)
    {
      v23 = operator new(48 * v22, v21);
      if (v23)
        break;
      v24 = v22 > 1;
      v22 >>= 1;
      if (!v24)
        goto LABEL_27;
    }
    v25 = v23;
    sub_1C5AA4494(v20, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v20) >> 4), (uint64_t)v23, v22, a3);
    operator delete(v25);
  }
}

unint64_t llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(uint64_t a1, int a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v2 = *(unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v3 = *v2;
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    v4 = 0;
    if (v3 == 19)
      v5 = (unsigned __int16)(*((_DWORD *)v2 + 6) >> 3);
    else
      v5 = 0;
  }
  else
  {
    if (a2)
    {
      if (v3 == 19)
      {
        v4 = *((unsigned int *)v2 + 6);
        v6 = *(_DWORD *)(a1 + 4);
        goto LABEL_20;
      }
      v4 = 0;
    }
    else
    {
      if (v3 == 19)
        LODWORD(v4) = *((_DWORD *)v2 + 6);
      else
        LODWORD(v4) = 0;
      v7 = (v4 >> 1) & 0x1F;
      if ((v4 & 0x40) != 0)
        v7 = (v4 >> 2) & 0xFE0 | (v4 >> 1) & 0x1F;
      if ((v4 & 1) != 0)
        v7 = 0;
      if (byte_1ED830650)
        v4 = v4;
      else
        v4 = v7;
    }
    v6 = *(_DWORD *)(a1 + 4);
    while ((v3 & 0xFE) == 0x12)
    {
LABEL_20:
      v2 = *(unsigned __int8 **)&v2[-8 * *((unsigned int *)v2 + 2) + 8];
      LOBYTE(v3) = *v2;
    }
    v5 = (unsigned __int16)(v6 - *((_DWORD *)v2 + 6));
  }
  return v5 | (unint64_t)(v4 << 32);
}

unint64_t llvm::sampleprof::FunctionSamples::getCallSiteHash(void *__src, size_t __len, unsigned int *a3)
{
  void *p_p;
  size_t v7;
  uint64_t *v8;
  char v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *__p;
  size_t v20;
  unint64_t v21;
  char v22;

  if (!__src)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    __p = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    p_p = operator new(v10 + 1);
    v20 = __len;
    v21 = v11 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v21) = __len;
    p_p = &__p;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_p, __src, __len);
LABEL_11:
  *((_BYTE *)p_p + __len) = 0;
  v9 = HIBYTE(v21);
  v8 = (uint64_t *)__p;
  v7 = v20;
LABEL_12:
  v12 = v9 < 0;
  if (v9 >= 0)
    v13 = (uint64_t *)&__p;
  else
    v13 = v8;
  v14 = v9 & 0x7F;
  if (v12)
    v15 = v7;
  else
    v15 = v14;
  v16 = sub_1C4D8463C((uint64_t)&v22, v13, v15);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  v17 = a3[1] | ((unint64_t)*a3 << 32);
  return v17 + v16 + 32 * v17;
}

_QWORD *llvm::sampleprof::FunctionSamples::findFunctionSamplesAt(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  size_t v8;
  int *v9;
  unint64_t size;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::string v26;
  char *v27;
  unint64_t v28;
  unint64_t __val;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = (int *)sub_1C51D4FD4(a3, a4, (uint64_t)"selected", 8);
  size = v8;
  memset(&v26, 0, sizeof(v26));
  if (v8)
    v11 = llvm::sampleprof::FunctionSamples::UseMD5 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v30 = xmmword_1C85F4BB0;
    v31 = 0;
    llvm::MD5::update((int *)&v30, v9, v8);
    llvm::MD5::final((int *)&v30, (int *)&__val);
    std::to_string(&v26, __val);
    v9 = (int *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = v26.__r_.__value_.__l.__size_;
    }
    else
    {
      v9 = (int *)&v26;
      size = *((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x7F;
    }
  }
  v27 = (char *)v9;
  v28 = size;
  v12 = sub_1C62A2264(a1 + 96, *a2, a2[1]);
  if ((uint64_t *)(a1 + 104) == v12)
    goto LABEL_9;
  v15 = v12;
  v16 = v12 + 5;
  v17 = sub_1C630A800((uint64_t)(v12 + 5), (uint64_t)&v27);
  v18 = (_QWORD *)v17;
  if (v15 + 6 == (uint64_t *)v17)
  {
    if (a5
      && (llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(a5, v27, v28, (uint64_t)&v30),
          (_BYTE)v31)
      && (v25 = sub_1C630A800((uint64_t)v16, (uint64_t)&v30), v18 != (_QWORD *)v25))
    {
      v13 = (_QWORD *)(v25 + 56);
    }
    else
    {
      if (v28 || (v19 = (_QWORD *)*v16, (_QWORD *)*v16 == v18))
      {
LABEL_9:
        v13 = 0;
        goto LABEL_10;
      }
      v13 = 0;
      v20 = 0;
      do
      {
        v21 = v19[14];
        v22 = v21 >= v20;
        if (v21 > v20)
          v20 = v19[14];
        if (v22)
          v13 = v19 + 7;
        v23 = (_QWORD *)v19[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v19[2];
            v11 = *v24 == (_QWORD)v19;
            v19 = v24;
          }
          while (!v11);
        }
        v19 = v24;
      }
      while (v24 != v18);
    }
  }
  else
  {
    v13 = (_QWORD *)(v17 + 56);
  }
LABEL_10:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v13;
}

uint64_t llvm::sampleprof::FunctionSamples::findAllNames(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **i;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  _BYTE v28[31];

  v27 = *(_OWORD *)(a1 + 16);
  result = sub_1C630A55C(a2, &v27, (uint64_t)v28);
  v5 = *(_QWORD **)(a1 + 72);
  if (v5 != (_QWORD *)(a1 + 80))
  {
    do
    {
      v6 = *((unsigned int *)v5 + 14);
      if ((_DWORD)v6)
      {
        for (i = (uint64_t **)v5[6]; ; ++i)
        {
          v8 = !*i || *i + 1 == 0;
          if (!v8)
            break;
        }
      }
      else
      {
        i = (uint64_t **)v5[6];
      }
      v9 = v5[6] + 8 * v6;
      if (i != (uint64_t **)v9)
      {
        v10 = *i;
        do
        {
          v11 = *v10;
          *(_QWORD *)&v27 = v10 + 2;
          *((_QWORD *)&v27 + 1) = v11;
          result = sub_1C630A55C(a2, &v27, (uint64_t)v28);
          do
          {
            v12 = i[1];
            ++i;
            v10 = v12;
            if (v12)
              v13 = v10 + 1 == 0;
            else
              v13 = 1;
          }
          while (v13);
        }
        while (i != (uint64_t **)v9);
      }
      v14 = (_QWORD *)v5[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v5[2];
          v8 = *v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v8);
      }
      v5 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 80));
  }
  v16 = *(_QWORD **)(a1 + 96);
  v17 = (_QWORD *)(a1 + 104);
  if (v16 != v17)
  {
    do
    {
      v18 = (_QWORD *)v16[5];
      if (v18 != v16 + 6)
      {
        do
        {
          v19 = (_QWORD *)v18[4];
          v20 = *((_BYTE *)v18 + 55);
          v21 = v20;
          if (v20 >= 0)
            v19 = v18 + 4;
          v22 = v20 & 0x7F;
          if (v21 < 0)
            v22 = v18[5];
          *(_QWORD *)&v27 = v19;
          *((_QWORD *)&v27 + 1) = v22;
          sub_1C630A55C(a2, &v27, (uint64_t)v28);
          result = llvm::sampleprof::FunctionSamples::findAllNames(v18 + 7, a2);
          v23 = (_QWORD *)v18[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v18[2];
              v8 = *v24 == (_QWORD)v18;
              v18 = v24;
            }
            while (!v8);
          }
          v18 = v24;
        }
        while (v24 != v16 + 6);
      }
      v25 = (_QWORD *)v16[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v16[2];
          v8 = *v26 == (_QWORD)v16;
          v16 = v26;
        }
        while (!v8);
      }
      v16 = v26;
    }
    while (v26 != v17);
  }
  return result;
}

void llvm::sampleprof::SampleContextTrimmer::trimAndMergeColdContextProfiles(llvm::sampleprof::SampleContextTrimmer *this, unint64_t a2, int a3, int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  uint64_t *v8;
  char *v9;
  _QWORD **v10;
  char *v11;
  char *v12;
  int v13;
  _OWORD *v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  llvm::sampleprof::SampleContextTrimmer *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  unint64_t v42;
  char **v43;
  char *v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  _QWORD **v68;
  _QWORD *v69;
  unint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  char *v77;
  _QWORD *v78;
  _QWORD **v79;
  char *v80;
  uint64_t v81;
  float v82;
  float v83;
  _BOOL8 v84;
  unint64_t v85;
  unint64_t v86;
  size_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v99;
  _QWORD *v102;
  __int128 v103;
  __int128 v104;
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  float v110;

  if ((a3 & 1) != 0)
  {
    if (!a2)
      return;
  }
  else if (!a2 || (a4 & 1) == 0)
  {
    return;
  }
  v8 = *(uint64_t **)(*(_QWORD *)this + 16);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
    v108 = 0u;
    v109 = 0u;
    v110 = 1.0;
    goto LABEL_142;
  }
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v13 = a6 & ~a4;
  do
  {
    if (v8[14] < a2 && (!v13 || v8[5] == 1))
    {
      v14 = v8 + 2;
      v15 = v8 + 7;
      if (v9 >= v11)
      {
        v6 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 4);
        v18 = v6 + 1;
        if ((unint64_t)(v6 + 1) > 0x555555555555555)
          abort();
        if (0x5555555555555556 * ((v11 - v12) >> 4) > v18)
          v18 = 0x5555555555555556 * ((v11 - v12) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v18 = 0x555555555555555;
        if (v18 > 0x555555555555555)
          sub_1C4764EE4();
        v19 = 3 * v18;
        v20 = (char *)operator new(48 * v18);
        v21 = &v20[16 * ((v9 - v12) >> 4)];
        v22 = v8[6];
        v23 = *((_OWORD *)v8 + 2);
        *(_OWORD *)v21 = *v14;
        *((_OWORD *)v21 + 1) = v23;
        *((_QWORD *)v21 + 4) = v22;
        *((_QWORD *)v21 + 5) = v15;
        if (v9 == v12)
        {
          v25 = &v20[16 * ((v9 - v12) >> 4)];
        }
        else
        {
          v24 = &v20[16 * ((v9 - v12) >> 4)];
          do
          {
            v25 = v24 - 48;
            v26 = *((_OWORD *)v9 - 3);
            v27 = *((_OWORD *)v9 - 1);
            *((_OWORD *)v24 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v24 - 1) = v27;
            *((_OWORD *)v24 - 3) = v26;
            v9 -= 48;
            v24 -= 48;
          }
          while (v9 != v12);
        }
        v11 = &v20[16 * v19];
        v9 = v21 + 48;
        if (v12)
          operator delete(v12);
        v12 = v25;
      }
      else
      {
        v16 = *((_OWORD *)v8 + 2);
        v17 = v8[6];
        *(_OWORD *)v9 = *v14;
        *((_OWORD *)v9 + 1) = v16;
        *((_QWORD *)v9 + 4) = v17;
        *((_QWORD *)v9 + 5) = v15;
        v9 += 48;
      }
    }
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  v108 = 0u;
  v109 = 0u;
  v110 = 1.0;
  if (v12 == v9)
  {
    v10 = 0;
    goto LABEL_142;
  }
  v28 = (uint64_t)v12;
  v29 = this;
  v30 = a4;
  do
  {
    if (!v30)
      goto LABEL_81;
    v99 = v28;
    v31 = *(_QWORD *)(v28 + 40);
    v33 = *(_QWORD *)(v31 + 32);
    v32 = *(_QWORD *)(v31 + 40);
    if (v32 >= a5)
      v34 = a5;
    else
      v34 = v32;
    if (v32 <= a5)
      v35 = v33;
    else
      v35 = v33 + 24 * (v32 - a5);
    v104 = 0u;
    v106 = 0;
    v107 = 0;
    *((_QWORD *)&v103 + 1) = &v104;
    v105 = &v106;
    v36 = (char *)operator new(0xB0uLL);
    *((_DWORD *)v36 + 13) = 0;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 4) = v35;
    *((_QWORD *)v36 + 5) = v34;
    *((_OWORD *)v36 + 1) = *(_OWORD *)(v35 + 24 * v34 - 24);
    *((_DWORD *)v36 + 12) = 1;
    *(_OWORD *)(v36 + 104) = 0u;
    *(_OWORD *)(v36 + 88) = 0u;
    *(_OWORD *)(v36 + 72) = 0u;
    *(_OWORD *)(v36 + 56) = 0u;
    *((_QWORD *)v36 + 17) = 0;
    *((_QWORD *)v36 + 15) = 0;
    *((_QWORD *)v36 + 16) = v36 + 136;
    *((_QWORD *)v36 + 21) = 0;
    *((_QWORD *)v36 + 20) = 0;
    *((_QWORD *)v36 + 18) = 0;
    *((_QWORD *)v36 + 19) = v36 + 160;
    *((_QWORD *)v36 + 1) = sub_1C62A350C((uint64_t)(v36 + 16));
    v37 = sub_1C62A350C((uint64_t)(v36 + 16));
    *((_QWORD *)v36 + 1) = v37;
    v38 = *((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v39 = v37;
      v40 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v108 + 8));
      v40.i16[0] = vaddlv_u8(v40);
      v41 = v40.u32[0];
      if (v40.u32[0] > 1uLL)
      {
        v42 = v37;
        if (*((_QWORD *)&v108 + 1) <= v37)
          v42 = v37 % *((_QWORD *)&v108 + 1);
      }
      else
      {
        v42 = (*((_QWORD *)&v108 + 1) - 1) & v37;
      }
      v43 = *(char ***)(v108 + 8 * v42);
      if (v43)
      {
        v44 = *v43;
        if (*v43)
        {
          v6 = *((_QWORD *)&v108 + 1) - 1;
          do
          {
            v56 = *((_QWORD *)v44 + 1);
            if (v56 == v39)
            {
              if (sub_1C62A37D8((uint64_t)(v44 + 16), (uint64_t)(v36 + 16)))
              {
                sub_1C5AA51D4(1, (_QWORD **)v36);
                v36 = v44;
                v28 = v99;
                v29 = this;
                v30 = a4;
                goto LABEL_80;
              }
            }
            else
            {
              if (v41 > 1)
              {
                if (v56 >= v38)
                  v56 %= v38;
              }
              else
              {
                v56 &= v6;
              }
              if (v56 != v42)
                break;
            }
            v44 = *(char **)v44;
          }
          while (v44);
        }
      }
    }
    v45 = (float)(unint64_t)(*((_QWORD *)&v109 + 1) + 1);
    if (!v38 || (float)(v110 * (float)v38) < v45)
    {
      v46 = (v38 & (v38 - 1)) != 0;
      if (v38 < 3)
        v46 = 1;
      v47 = v46 | (2 * v38);
      v48 = vcvtps_u32_f32(v45 / v110);
      if (v47 <= v48)
        v49 = v48;
      else
        v49 = v47;
      sub_1C542C2D4((uint64_t)&v108, v49);
    }
    v50 = *((_QWORD *)&v108 + 1);
    v51 = *((_QWORD *)v36 + 1);
    v52 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v108 + 8));
    v52.i16[0] = vaddlv_u8(v52);
    v28 = v99;
    v29 = this;
    if (v52.u32[0] > 1uLL)
    {
      if (v51 >= *((_QWORD *)&v108 + 1))
        v51 %= *((_QWORD *)&v108 + 1);
    }
    else
    {
      v51 &= *((_QWORD *)&v108 + 1) - 1;
    }
    v53 = v108;
    v54 = *(_QWORD **)(v108 + 8 * v51);
    v30 = a4;
    if (v54)
    {
      *(_QWORD *)v36 = *v54;
    }
    else
    {
      *(_QWORD *)v36 = v109;
      *(_QWORD *)&v109 = v36;
      *(_QWORD *)(v53 + 8 * v51) = &v109;
      if (!*(_QWORD *)v36)
        goto LABEL_79;
      v55 = *(_QWORD *)(*(_QWORD *)v36 + 8);
      if (v52.u32[0] > 1uLL)
      {
        if (v55 >= v50)
          v55 %= v50;
      }
      else
      {
        v55 &= v50 - 1;
      }
      v54 = (_QWORD *)(v108 + 8 * v55);
    }
    *v54 = v36;
LABEL_79:
    ++*((_QWORD *)&v109 + 1);
LABEL_80:
    sub_1C63097D8((uint64_t)&v105, v106);
    sub_1C6309824((uint64_t)&v103 + 8, (_QWORD *)v104);
    sub_1C5753498((uint64_t)(v36 + 56), *(_QWORD *)(v28 + 40), 1uLL);
LABEL_81:
    v57 = *(_QWORD **)v29;
    v58 = sub_1C62A3414(*(_QWORD **)v29, v28);
    if (v58)
      sub_1C5AA5218(v57, v58);
    v28 += 48;
  }
  while ((char *)v28 != v9);
  v59 = (_QWORD *)v109;
  if (!(_QWORD)v109)
  {
    v10 = 0;
    goto LABEL_141;
  }
  v60 = a3;
  while (2)
  {
    v61 = (uint64_t)(v59 + 2);
    if (!v60 || v59[14] >= a2 || sub_1C62A3414(*(_QWORD **)v29, (uint64_t)(v59 + 2)))
    {
      v102 = v59;
      v62 = *(_QWORD *)v29;
      v104 = 0u;
      v106 = 0;
      v107 = 0;
      *((_QWORD *)&v103 + 1) = &v104;
      v105 = &v106;
      v63 = sub_1C62A350C((uint64_t)(v59 + 2));
      v64 = v63;
      v65 = *(_QWORD *)(v62 + 8);
      if (v65)
      {
        v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
        v66.i16[0] = vaddlv_u8(v66);
        v67 = v66.u32[0];
        if (v66.u32[0] > 1uLL)
        {
          v6 = v63;
          if (v63 >= v65)
            v6 = v63 % v65;
        }
        else
        {
          v6 = (v65 - 1) & v63;
        }
        v68 = *(_QWORD ***)(*(_QWORD *)v62 + 8 * v6);
        if (v68)
        {
          v69 = *v68;
          if (*v68)
          {
            while (1)
            {
              v70 = v69[1];
              if (v70 == v64)
              {
                if (sub_1C62A37D8((uint64_t)(v69 + 2), v61))
                {
                  v71 = 1;
                  v60 = a3;
                  v59 = v102;
                  goto LABEL_136;
                }
              }
              else
              {
                if (v67 > 1)
                {
                  if (v70 >= v65)
                    v70 %= v65;
                }
                else
                {
                  v70 &= v65 - 1;
                }
                if (v70 != v6)
                {
LABEL_107:
                  v60 = a3;
                  break;
                }
              }
              v69 = (_QWORD *)*v69;
              if (!v69)
                goto LABEL_107;
            }
          }
        }
      }
      v72 = (char *)operator new(0xB0uLL);
      v69 = v72;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = v64;
      v73 = *(_QWORD *)(v61 + 32);
      v74 = *(_OWORD *)(v61 + 16);
      *((_OWORD *)v72 + 1) = *(_OWORD *)v61;
      *((_OWORD *)v72 + 2) = v74;
      *(_OWORD *)(v72 + 56) = 0u;
      *(_OWORD *)(v72 + 104) = 0u;
      *((_QWORD *)v72 + 6) = v73;
      *(_OWORD *)(v72 + 88) = 0u;
      *(_OWORD *)(v72 + 72) = 0u;
      v75 = *((_QWORD *)&v103 + 1);
      *((_QWORD *)v72 + 15) = 0;
      *((_QWORD *)v72 + 16) = v75;
      v76 = v104;
      *((_QWORD *)v72 + 17) = v104;
      v77 = v72 + 136;
      *((_QWORD *)v72 + 18) = *((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        *(_QWORD *)(v76 + 16) = v77;
        *((_QWORD *)&v103 + 1) = &v104;
        v104 = 0uLL;
      }
      else
      {
        *((_QWORD *)v72 + 16) = v77;
      }
      v79 = v105;
      v78 = v106;
      *((_QWORD *)v72 + 20) = v106;
      v80 = v72 + 160;
      *((_QWORD *)v72 + 19) = v79;
      v81 = v107;
      *((_QWORD *)v72 + 21) = v107;
      if (v81)
      {
        v78[2] = v80;
        v105 = &v106;
        v106 = 0;
        v107 = 0;
      }
      else
      {
        *((_QWORD *)v72 + 19) = v80;
      }
      v82 = (float)(unint64_t)(*(_QWORD *)(v62 + 24) + 1);
      v83 = *(float *)(v62 + 32);
      if (!v65 || (float)(v83 * (float)v65) < v82)
      {
        v84 = (v65 & (v65 - 1)) != 0;
        if (v65 < 3)
          v84 = 1;
        v85 = v84 | (2 * v65);
        v86 = vcvtps_u32_f32(v82 / v83);
        if (v85 <= v86)
          v87 = v86;
        else
          v87 = v85;
        sub_1C542C2D4(v62, v87);
        v65 = *(_QWORD *)(v62 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v64 >= v65)
            v6 = v64 % v65;
          else
            v6 = v64;
        }
        else
        {
          v6 = (v65 - 1) & v64;
        }
      }
      v88 = *(_QWORD *)v62;
      v89 = *(_QWORD **)(*(_QWORD *)v62 + 8 * v6);
      if (v89)
      {
        *v69 = *v89;
        v59 = v102;
        goto LABEL_134;
      }
      *v69 = *(_QWORD *)(v62 + 16);
      *(_QWORD *)(v62 + 16) = v69;
      *(_QWORD *)(v88 + 8 * v6) = v62 + 16;
      v59 = v102;
      if (*v69)
      {
        v90 = *(_QWORD *)(*v69 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v90 >= v65)
            v90 %= v65;
        }
        else
        {
          v90 &= v65 - 1;
        }
        v89 = (_QWORD *)(*(_QWORD *)v62 + 8 * v90);
LABEL_134:
        *v89 = v69;
      }
      v71 = 0;
      ++*(_QWORD *)(v62 + 24);
LABEL_136:
      sub_1C63097D8((uint64_t)&v105, v106);
      sub_1C6309824((uint64_t)&v103 + 8, (_QWORD *)v104);
      v29 = this;
      if ((v71 & 1) == 0)
      {
        v91 = v69[4];
        v92 = v69[5];
        v93 = v91 + 24 * v92;
        v95 = *(_QWORD *)(v93 - 24);
        v94 = *(_QWORD *)(v93 - 16);
        v69[9] = v95;
        v69[10] = v94;
        v69[11] = v91;
        v69[12] = v92;
        v69[13] = 1;
      }
      sub_1C5753498((uint64_t)(v69 + 7), (uint64_t)(v59 + 7), 1uLL);
    }
    v59 = (_QWORD *)*v59;
    if (v59)
      continue;
    break;
  }
  v10 = (_QWORD **)v109;
LABEL_141:
  v9 = v12;
LABEL_142:
  sub_1C630A054((uint64_t)&v108, v10);
  v96 = (void *)v108;
  *(_QWORD *)&v108 = 0;
  if (v96)
    operator delete(v96);
  if (v9)
    operator delete(v9);
}

void llvm::sampleprof::SampleContextTrimmer::canonicalizeContextProfiles(llvm::sampleprof::SampleContextTrimmer *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD **v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  void *v69;
  __int128 *v70;
  unint64_t v71;
  void *__p[2];
  __int128 v74;
  float v75;

  *(_OWORD *)__p = 0u;
  v74 = 0u;
  v75 = 1.0;
  v3 = *(uint64_t **)(*(_QWORD *)this + 16);
  if (v3)
  {
    v5 = 0;
    v4 = 0;
    v6 = 0;
    while (sub_1C62A37D8((uint64_t)(v3 + 2), (uint64_t)(v3 + 9)))
    {
LABEL_63:
      v3 = (uint64_t *)*v3;
      if (!v3)
      {
        if (v5 != v4)
        {
          v40 = (uint64_t)v5;
          do
          {
            v41 = *(_QWORD **)this;
            v42 = sub_1C62A3414(*(_QWORD **)this, v40);
            if (v42)
              sub_1C5AA5218(v41, v42);
            v40 += 40;
          }
          while ((char *)v40 != v4);
          v4 = v5;
        }
        goto LABEL_70;
      }
    }
    v70 = (__int128 *)(v3 + 2);
    v71 = (unint64_t)v6;
    v7 = sub_1C62A350C((uint64_t)(v3 + 9));
    v8 = v7;
    v2 = (unint64_t)__p[1];
    if (__p[1])
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        v1 = v7;
        if ((void *)v7 >= __p[1])
          v1 = v7 % (unint64_t)__p[1];
      }
      else
      {
        v1 = ((unint64_t)__p[1] - 1) & v7;
      }
      v11 = (_QWORD *)*((_QWORD *)__p[0] + v1);
      if (v11)
      {
        v12 = (_QWORD *)*v11;
        if (*v11)
        {
          do
          {
            v24 = v12[1];
            if (v24 == v8)
            {
              if (sub_1C62A37D8((uint64_t)(v12 + 2), (uint64_t)(v3 + 9)))
                goto LABEL_44;
            }
            else
            {
              if (v10 > 1)
              {
                if (v24 >= v2)
                  v24 %= v2;
              }
              else
              {
                v24 &= v2 - 1;
              }
              if (v24 != v1)
                break;
            }
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
      }
    }
    v13 = (char *)operator new(0xB0uLL);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = v8;
    v14 = v3[13];
    v15 = *(_OWORD *)(v3 + 11);
    *((_OWORD *)v13 + 1) = *(_OWORD *)(v3 + 9);
    *((_OWORD *)v13 + 2) = v15;
    *((_QWORD *)v13 + 6) = v14;
    v17 = *(_OWORD *)(v3 + 11);
    v16 = *(_OWORD *)(v3 + 13);
    v18 = *(_OWORD *)(v3 + 9);
    *((_QWORD *)v13 + 15) = v3[15];
    *(_OWORD *)(v13 + 72) = v18;
    *(_OWORD *)(v13 + 104) = v16;
    *(_OWORD *)(v13 + 88) = v17;
    *(_OWORD *)(v13 + 56) = *(_OWORD *)(v3 + 7);
    sub_1C5AA5340((uint64_t)(v13 + 128), v3 + 16);
    sub_1C5AA55E8((uint64_t)(v13 + 152), v3 + 19);
    v19 = (float)(unint64_t)(*((_QWORD *)&v74 + 1) + 1);
    if (!v2 || (float)(v75 * (float)v2) < v19)
    {
      v20 = (v2 & (v2 - 1)) != 0;
      if (v2 < 3)
        v20 = 1;
      v21 = v20 | (2 * v2);
      v22 = vcvtps_u32_f32(v19 / v75);
      if (v21 <= v22)
        v23 = v22;
      else
        v23 = v21;
      sub_1C542C2D4((uint64_t)__p, v23);
      v2 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if ((void *)v8 >= __p[1])
          v1 = v8 % (unint64_t)__p[1];
        else
          v1 = v8;
      }
      else
      {
        v1 = ((unint64_t)__p[1] - 1) & v8;
      }
    }
    v25 = __p[0];
    v26 = (_QWORD *)*((_QWORD *)__p[0] + v1);
    if (v26)
    {
      *(_QWORD *)v13 = *v26;
    }
    else
    {
      *(_QWORD *)v13 = v74;
      *(_QWORD *)&v74 = v13;
      v25[v1] = &v74;
      if (!*(_QWORD *)v13)
        goto LABEL_43;
      v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if ((v2 & (v2 - 1)) != 0)
      {
        if (v27 >= v2)
          v27 %= v2;
      }
      else
      {
        v27 &= v2 - 1;
      }
      v26 = (char *)__p[0] + 8 * v27;
    }
    *v26 = v13;
LABEL_43:
    ++*((_QWORD *)&v74 + 1);
LABEL_44:
    v6 = (char *)v71;
    if ((unint64_t)v4 >= v71)
    {
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) + 1;
      v1 = (unint64_t)(v3 + 2);
      if (v30 > 0x666666666666666)
        abort();
      if (0x999999999999999ALL * ((uint64_t)(v71 - (_QWORD)v5) >> 3) > v30)
        v30 = 0x999999999999999ALL * ((uint64_t)(v71 - (_QWORD)v5) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (_QWORD)v5) >> 3) >= 0x333333333333333)
        v31 = 0x666666666666666;
      else
        v31 = v30;
      if (v31)
      {
        if (v31 > 0x666666666666666)
          sub_1C4764EE4();
        v32 = (char *)operator new(40 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * ((v4 - v5) >> 3)];
      v34 = *v70;
      v35 = *((_OWORD *)v3 + 2);
      *((_QWORD *)v33 + 4) = v3[6];
      *(_OWORD *)v33 = v34;
      *((_OWORD *)v33 + 1) = v35;
      if (v4 == v5)
      {
        v36 = &v32[8 * ((v4 - v5) >> 3)];
      }
      else
      {
        v37 = &v32[8 * ((v4 - v5) >> 3)];
        do
        {
          v38 = *(_OWORD *)(v4 - 40);
          v39 = *(_OWORD *)(v4 - 24);
          v36 = v37 - 40;
          *((_QWORD *)v37 - 1) = *((_QWORD *)v4 - 1);
          *(_OWORD *)(v37 - 24) = v39;
          *(_OWORD *)(v37 - 40) = v38;
          v4 -= 40;
          v37 -= 40;
        }
        while (v4 != v5);
      }
      v6 = &v32[40 * v31];
      v4 = v33 + 40;
      if (v5)
        operator delete(v5);
      v5 = v36;
    }
    else
    {
      v28 = *v70;
      v29 = *((_OWORD *)v3 + 2);
      *((_QWORD *)v4 + 4) = v3[6];
      *(_OWORD *)v4 = v28;
      *((_OWORD *)v4 + 1) = v29;
      v4 += 40;
    }
    goto LABEL_63;
  }
  v4 = 0;
LABEL_70:
  v43 = (uint64_t *)v74;
  if (!(_QWORD)v74)
  {
    v44 = 0;
    goto LABEL_113;
  }
  do
  {
    v45 = *(_QWORD *)this;
    v46 = sub_1C62A350C((uint64_t)(v43 + 2));
    v47 = v46;
    v48 = *(_QWORD *)(v45 + 8);
    if (v48)
    {
      v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
      v49.i16[0] = vaddlv_u8(v49);
      v50 = v49.u32[0];
      if (v49.u32[0] > 1uLL)
      {
        v2 = v46;
        if (v46 >= v48)
          v2 = v46 % v48;
      }
      else
      {
        v2 = (v48 - 1) & v46;
      }
      v51 = *(_QWORD **)(*(_QWORD *)v45 + 8 * v2);
      if (v51)
      {
        v52 = (_QWORD *)*v51;
        if (*v51)
        {
          do
          {
            v65 = v52[1];
            if (v65 == v47)
            {
              if (sub_1C62A37D8((uint64_t)(v52 + 2), (uint64_t)(v43 + 2)))
                goto LABEL_111;
            }
            else
            {
              if (v50 > 1)
              {
                if (v65 >= v48)
                  v65 %= v48;
              }
              else
              {
                v65 &= v48 - 1;
              }
              if (v65 != v2)
                break;
            }
            v52 = (_QWORD *)*v52;
          }
          while (v52);
        }
      }
    }
    v53 = (char *)operator new(0xB0uLL);
    *(_QWORD *)v53 = 0;
    *((_QWORD *)v53 + 1) = v47;
    v54 = v43[6];
    v55 = *((_OWORD *)v43 + 2);
    *((_OWORD *)v53 + 1) = *((_OWORD *)v43 + 1);
    *((_OWORD *)v53 + 2) = v55;
    *((_QWORD *)v53 + 6) = v54;
    v57 = *(_OWORD *)(v43 + 11);
    v56 = *(_OWORD *)(v43 + 13);
    v58 = *(_OWORD *)(v43 + 9);
    *((_QWORD *)v53 + 15) = v43[15];
    *(_OWORD *)(v53 + 72) = v58;
    *(_OWORD *)(v53 + 104) = v56;
    *(_OWORD *)(v53 + 88) = v57;
    *(_OWORD *)(v53 + 56) = *(_OWORD *)(v43 + 7);
    sub_1C5AA5340((uint64_t)(v53 + 128), v43 + 16);
    sub_1C5AA55E8((uint64_t)(v53 + 152), v43 + 19);
    v59 = (float)(unint64_t)(*(_QWORD *)(v45 + 24) + 1);
    v60 = *(float *)(v45 + 32);
    if (!v48 || (float)(v60 * (float)v48) < v59)
    {
      v61 = (v48 & (v48 - 1)) != 0;
      if (v48 < 3)
        v61 = 1;
      v62 = v61 | (2 * v48);
      v63 = vcvtps_u32_f32(v59 / v60);
      if (v62 <= v63)
        v64 = v63;
      else
        v64 = v62;
      sub_1C542C2D4(v45, v64);
      v48 = *(_QWORD *)(v45 + 8);
      if ((v48 & (v48 - 1)) != 0)
      {
        if (v47 >= v48)
          v2 = v47 % v48;
        else
          v2 = v47;
      }
      else
      {
        v2 = (v48 - 1) & v47;
      }
    }
    v66 = *(_QWORD *)v45;
    v67 = *(_QWORD **)(*(_QWORD *)v45 + 8 * v2);
    if (v67)
    {
      *(_QWORD *)v53 = *v67;
LABEL_109:
      *v67 = v53;
      goto LABEL_110;
    }
    *(_QWORD *)v53 = *(_QWORD *)(v45 + 16);
    *(_QWORD *)(v45 + 16) = v53;
    *(_QWORD *)(v66 + 8 * v2) = v45 + 16;
    if (*(_QWORD *)v53)
    {
      v68 = *(_QWORD *)(*(_QWORD *)v53 + 8);
      if ((v48 & (v48 - 1)) != 0)
      {
        if (v68 >= v48)
          v68 %= v48;
      }
      else
      {
        v68 &= v48 - 1;
      }
      v67 = (_QWORD *)(*(_QWORD *)v45 + 8 * v68);
      goto LABEL_109;
    }
LABEL_110:
    ++*(_QWORD *)(v45 + 24);
LABEL_111:
    v43 = (uint64_t *)*v43;
  }
  while (v43);
  v44 = (_QWORD **)v74;
LABEL_113:
  sub_1C630A054((uint64_t)__p, v44);
  v69 = __p[0];
  __p[0] = 0;
  if (v69)
    operator delete(v69);
  if (v4)
    operator delete(v4);
}

uint64_t llvm::sampleprof::ProfileSymbolList::write(llvm::sampleprof::ProfileSymbolList *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  const void *v19;
  size_t v20;
  void *v21;
  std::string::size_type v22;
  void **v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void **p_p;
  std::string::size_type v29;
  std::string::size_type v30;
  char v31;
  std::string::size_type size;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  size_t v36;
  size_t v37;
  void *__p;
  size_t v41;
  unint64_t v42;
  std::string v43;

  if (!*((_DWORD *)this + 4))
    goto LABEL_14;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (unint64_t *)*((_QWORD *)this + 1);
    while (*v5 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v5 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_14;
    }
  }
  else
  {
    v5 = (unint64_t *)*((_QWORD *)this + 1);
  }
  v6 = *((_QWORD *)this + 1) + 16 * v3;
  if ((unint64_t *)v6 == v5)
  {
LABEL_14:
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v7 = 0;
    v8 = v5;
LABEL_10:
    v9 = v8 + 2;
    while (v9 != (unint64_t *)v6)
    {
      v10 = *v9;
      v9 += 2;
      if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = v9 - 2;
        ++v7;
        goto LABEL_10;
      }
    }
    if (v7 >= 0xFFFFFFFFFFFFFFFLL)
LABEL_62:
      abort();
    v11 = (__int128 *)operator new(16 * (v7 + 1));
    v13 = v11;
LABEL_17:
    *v13 = *(_OWORD *)v5;
    v14 = v5 + 2;
    while (v14 != (unint64_t *)v6)
    {
      v15 = *v14;
      v14 += 2;
      if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        ++v13;
        v5 = v14 - 2;
        goto LABEL_17;
      }
    }
    v12 = v13 + 1;
  }
  v16 = 126 - 2 * __clz(v12 - v11);
  if (v12 == v11)
    v17 = 0;
  else
    v17 = v16;
  sub_1C4E4F728(v11, v12, (uint64_t)&v43, v17, 1);
  memset(&v43, 0, sizeof(v43));
  if (v12 != v11)
  {
    v18 = v11;
    while (1)
    {
      v19 = *(const void **)v18;
      if (*(_QWORD *)v18)
        break;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      __p = 0;
      v41 = 0;
      v42 = 0;
LABEL_38:
      v27 = v24;
      if (v24 >= 0)
        p_p = &__p;
      else
        p_p = v23;
      v29 = v24 & 0x7F;
      if (v27 >= 0)
        v30 = v29;
      else
        v30 = v22;
      std::string::append(&v43, (const std::string::value_type *)p_p, v30);
      if (SHIBYTE(v42) < 0)
        operator delete(__p);
      std::string::append(&v43, 1uLL, 0);
      if (++v18 == v12)
      {
        v31 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        size = v43.__r_.__value_.__l.__size_;
        v33 = v43.__r_.__value_.__r.__words[0];
        goto LABEL_49;
      }
    }
    v20 = *((_QWORD *)v18 + 1);
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_62;
    if (v20 >= 0x17)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      v21 = operator new(v25 + 1);
      v41 = v20;
      v42 = v26 | 0x8000000000000000;
      __p = v21;
    }
    else
    {
      HIBYTE(v42) = *((_QWORD *)v18 + 1);
      v21 = &__p;
      if (!v20)
        goto LABEL_37;
    }
    memmove(v21, v19, v20);
LABEL_37:
    *((_BYTE *)v21 + v20) = 0;
    v24 = HIBYTE(v42);
    v23 = (void **)__p;
    v22 = v41;
    goto LABEL_38;
  }
  size = 0;
  v33 = 0;
  v31 = 0;
LABEL_49:
  v34 = v31;
  if (v31 >= 0)
    v35 = &v43;
  else
    v35 = (std::string *)v33;
  v36 = v31 & 0x7F;
  if (v34 >= 0)
    v37 = v36;
  else
    v37 = size;
  llvm::raw_ostream::write(a2, (const char *)v35, v37);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v11)
    operator delete(v11);
  return 0;
}

void llvm::sampleprof::ProfileSymbolList::dump(llvm::sampleprof::ProfileSymbolList *this, llvm::raw_ostream *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  const void *v21;
  unint64_t v22;
  _BYTE *v23;
  char v24;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x2AuLL)
  {
    qmemcpy(v4, "======== Dump profile symbol list ========\n", 43);
    *((_QWORD *)a2 + 4) += 43;
  }
  else
  {
    llvm::raw_ostream::write(a2, "======== Dump profile symbol list ========\n", 0x2BuLL);
  }
  if (!*((_DWORD *)this + 4))
    goto LABEL_16;
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (unint64_t *)*((_QWORD *)this + 1);
    while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v7 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_16;
    }
  }
  else
  {
    v7 = (unint64_t *)*((_QWORD *)this + 1);
  }
  v8 = *((_QWORD *)this + 1) + 16 * v5;
  if ((unint64_t *)v8 == v7)
  {
LABEL_16:
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v9 = 0;
    v10 = v7;
LABEL_12:
    v11 = v10 + 2;
    while (v11 != (unint64_t *)v8)
    {
      v12 = *v11;
      v11 += 2;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = v11 - 2;
        ++v9;
        goto LABEL_12;
      }
    }
    if (v9 >= 0xFFFFFFFFFFFFFFFLL)
      abort();
    v13 = (__int128 *)operator new(16 * (v9 + 1));
    v15 = v13;
LABEL_19:
    *v15 = *(_OWORD *)v7;
    v16 = v7 + 2;
    while (v16 != (unint64_t *)v8)
    {
      v17 = *v16;
      v16 += 2;
      if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        ++v15;
        v7 = v16 - 2;
        goto LABEL_19;
      }
    }
    v14 = v15 + 1;
  }
  v18 = 126 - 2 * __clz(v14 - v13);
  if (v14 == v13)
    v19 = 0;
  else
    v19 = v18;
  sub_1C4E4F728(v13, v14, (uint64_t)&v24, v19, 1);
  if (v14 != v13)
  {
    v20 = v13;
    do
    {
      v21 = *(const void **)v20;
      v22 = *((_QWORD *)v20 + 1);
      v23 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (v22 <= *((_QWORD *)a2 + 3) - (_QWORD)v23)
      {
        if (v22)
        {
          memcpy(v23, v21, *((_QWORD *)v20 + 1));
          v23 = (_BYTE *)(*((_QWORD *)a2 + 4) + v22);
          *((_QWORD *)a2 + 4) = v23;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v21, *((_QWORD *)v20 + 1));
        v23 = (_BYTE *)*((_QWORD *)a2 + 4);
      }
      if (*((_BYTE **)a2 + 3) == v23)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v23 = 10;
        ++*((_QWORD *)a2 + 4);
      }
      ++v20;
    }
    while (v20 != v14);
  }
  if (v13)
    operator delete(v13);
}

uint64_t **llvm::sampleprof::CSProfileConverter::FrameNode::getOrCreateChildFrame(uint64_t **a1, unsigned int *a2, void *__src, size_t __len)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  uint64_t *v25;

  v8 = (uint64_t *)llvm::sampleprof::FunctionSamples::getCallSiteHash(__src, __len, a2);
  v25 = v8;
  v9 = a1[1];
  if (!v9)
    goto LABEL_12;
  v10 = a1 + 1;
  do
  {
    v11 = v9[4];
    v12 = v11 >= (unint64_t)v8;
    if (v11 >= (unint64_t)v8)
      v13 = (uint64_t **)v9;
    else
      v13 = (uint64_t **)(v9 + 1);
    if (v12)
      v10 = (uint64_t **)v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 1 || v8 < v10[4])
  {
LABEL_12:
    v14 = *(_QWORD *)a2;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)&v23 = __src;
    *((_QWORD *)&v23 + 1) = __len;
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = v14;
    v15 = sub_1C5AA5990(a1, (unint64_t)v8, &v25);
    v16 = (uint64_t *)(v15 + 6);
    sub_1C58D7EF8(v15[6]);
    v17 = v21;
    v15[5] = (uint64_t *)&v21;
    v15[6] = v17;
    v18 = v22;
    v15[7] = v22;
    if (v18)
    {
      v17[2] = (uint64_t)v16;
      v21 = 0;
      v22 = 0;
      v17 = 0;
    }
    else
    {
      v15[5] = v16;
    }
    v19 = v24;
    *((_OWORD *)v15 + 4) = v23;
    *((_OWORD *)v15 + 5) = v19;
    sub_1C58D7EF8(v17);
    v10 = sub_1C5AA5990(a1, (unint64_t)v8, &v25);
  }
  return v10 + 5;
}

uint64_t llvm::sampleprof::CSProfileConverter::CSProfileConverter(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **ContextPath;
  _QWORD *v5;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = *(_QWORD **)(a2 + 16);
  if (v3)
  {
    do
    {
      ContextPath = llvm::sampleprof::CSProfileConverter::getOrCreateContextPath(a1, (uint64_t)(v3 + 9));
      v5 = (_QWORD *)*v3;
      ContextPath[5] = v3 + 7;
      v3 = v5;
    }
    while (v5);
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t **ContextPath;
  _QWORD *v5;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = *(_QWORD **)(a2 + 16);
  if (v3)
  {
    do
    {
      ContextPath = llvm::sampleprof::CSProfileConverter::getOrCreateContextPath(a1, (uint64_t)(v3 + 9));
      v5 = (_QWORD *)*v3;
      ContextPath[5] = v3 + 7;
      v3 = v5;
    }
    while (v5);
  }
  return a1;
}

uint64_t **llvm::sampleprof::CSProfileConverter::getOrCreateContextPath(uint64_t a1, uint64_t a2)
{
  uint64_t **result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t **)(a1 + 8);
  v6 = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 + 24 * v3;
    do
    {
      result = llvm::sampleprof::CSProfileConverter::FrameNode::getOrCreateChildFrame(result, (unsigned int *)&v6, *(void **)v4, *(_QWORD *)(v4 + 8));
      v6 = *(_QWORD *)(v4 + 16);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

void llvm::sampleprof::CSProfileConverter::convertProfiles(uint64_t *a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  const void *v15;
  size_t v16;
  __int128 *p_dst;
  size_t v18;
  size_t v19;
  unint64_t v20;
  _QWORD **v21;
  char **v22;
  char **v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  const void *v33;
  size_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 __dst;
  unint64_t v46;
  size_t __len[2];
  __int128 v48;
  uint64_t v49;
  __int128 *v50;

  v2 = (unsigned int *)*a2;
  v3 = (unsigned int *)(a2 + 1);
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = a2[5];
    v6 = v5 + 96;
    while (1)
    {
      llvm::sampleprof::CSProfileConverter::convertProfiles(a1, v2 + 10);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        break;
LABEL_4:
      v8 = (unsigned int *)*((_QWORD *)v2 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(unsigned int **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (unsigned int *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
      if (v9 == v3)
        return;
    }
    v11 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)__len = *(_OWORD *)(v7 + 16);
    v48 = v11;
    v49 = *(_QWORD *)(v7 + 48);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)__len;
    *(_DWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    if (!v5)
    {
      v12 = *a1;
      *(_QWORD *)&__dst = v7 + 16;
      v13 = sub_1C57611EC(v12, v7 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
      sub_1C5753498((uint64_t)(v13 + 56), v7, 1uLL);
LABEL_44:
      if ((v49 & 0x200000000) != 0)
        llvm::sampleprof::FunctionSamples::ProfileIsCSNested = 1;
      v41 = (_QWORD *)*a1;
      v42 = sub_1C62A3414((_QWORD *)*a1, (uint64_t)__len);
      if (v42)
        sub_1C5AA5218(v41, v42);
      goto LABEL_4;
    }
    v44 = v6;
    *(_QWORD *)&__dst = v2 + 22;
    v14 = sub_1C62A19D0(v6, v2 + 22, (uint64_t)&std::piecewise_construct, (uint64_t **)&__dst);
    v15 = (const void *)__len[0];
    if (!__len[0])
    {
      __dst = 0uLL;
      v46 = 0;
      goto LABEL_24;
    }
    v16 = __len[1];
    if (__len[1] > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_49;
    if (__len[1] >= 0x17)
    {
      v18 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[1] | 7) != 0x17)
        v18 = __len[1] | 7;
      v43 = v5;
      v19 = v18 + 1;
      p_dst = (__int128 *)operator new(v18 + 1);
      v20 = v19 | 0x8000000000000000;
      v5 = v43;
      *((_QWORD *)&__dst + 1) = v16;
      v46 = v20;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v46) = __len[1];
      p_dst = &__dst;
      if (!__len[1])
        goto LABEL_23;
    }
    memmove(p_dst, v15, v16);
LABEL_23:
    *((_BYTE *)p_dst + v16) = 0;
LABEL_24:
    v21 = (_QWORD **)(v14 + 5);
    v22 = (char **)sub_1C4768D58((uint64_t)(v14 + 5), &v50, (const void **)&__dst);
    if (!*v22)
    {
      v23 = v22;
      v24 = (char *)operator new(0xB0uLL);
      *((_QWORD *)v24 + 6) = v46;
      *((_OWORD *)v24 + 2) = __dst;
      v46 = 0;
      __dst = 0uLL;
      v25 = *(_QWORD *)(v7 + 64);
      v26 = *(_OWORD *)(v7 + 48);
      v27 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)(v24 + 88) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(v24 + 72) = v27;
      *(_OWORD *)(v24 + 104) = v26;
      *((_QWORD *)v24 + 15) = v25;
      *(_OWORD *)(v24 + 56) = *(_OWORD *)v7;
      sub_1C5AA5340((uint64_t)(v24 + 128), (_QWORD *)(v7 + 72));
      sub_1C5AA55E8((uint64_t)(v24 + 152), (_QWORD *)(v7 + 96));
      v28 = v50;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v28;
      *v23 = v24;
      v29 = (_QWORD *)**v21;
      if (v29)
      {
        *v21 = v29;
        v24 = *v23;
      }
      sub_1C4768E74((uint64_t *)v14[6], (uint64_t *)v24);
      ++v14[7];
    }
    if (SHIBYTE(v46) < 0)
      operator delete((void *)__dst);
    sub_1C5753CE8(v5, *(_QWORD *)(v7 + 56), 1uLL);
    v6 = v44;
    if (!byte_1ED835A50)
      goto LABEL_44;
    v30 = *a1;
    *(_QWORD *)&__dst = v7 + 16;
    v31 = sub_1C57611EC(v30, v7 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
    sub_1C5753498((uint64_t)(v31 + 56), v7, 1uLL);
    *(_QWORD *)&__dst = v2 + 22;
    v32 = sub_1C62A19D0(v44, v2 + 22, (uint64_t)&std::piecewise_construct, (uint64_t **)&__dst);
    v33 = *(const void **)(v7 + 16);
    if (!v33)
    {
      __dst = 0uLL;
      v46 = 0;
      goto LABEL_42;
    }
    v34 = *(_QWORD *)(v7 + 24);
    if (v34 > 0x7FFFFFFFFFFFFFF7)
LABEL_49:
      abort();
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v5;
      v38 = v36 + 1;
      v35 = (__int128 *)operator new(v36 + 1);
      v39 = v38 | 0x8000000000000000;
      v5 = v37;
      v6 = v44;
      *((_QWORD *)&__dst + 1) = v34;
      v46 = v39;
      *(_QWORD *)&__dst = v35;
    }
    else
    {
      HIBYTE(v46) = *(_QWORD *)(v7 + 24);
      v35 = &__dst;
      if (!v34)
        goto LABEL_41;
    }
    memmove(v35, v33, v34);
LABEL_41:
    *((_BYTE *)v35 + v34) = 0;
LABEL_42:
    v50 = &__dst;
    v40 = sub_1C630A88C((uint64_t)(v32 + 5), (const void **)&__dst, (uint64_t)&std::piecewise_construct, &v50);
    *((_DWORD *)v40 + 27) |= 4u;
    if (SHIBYTE(v46) < 0)
      operator delete((void *)__dst);
    goto LABEL_44;
  }
}

void llvm::sampleprof::CSProfileConverter::convertProfiles(llvm::sampleprof::CSProfileConverter *this)
{
  llvm::sampleprof::CSProfileConverter::convertProfiles((uint64_t *)this, (_QWORD *)this + 1);
}

unint64_t sub_1C5AA3100(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  int v10;
  const void *v11;
  int i;
  unsigned int v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a2;
    result = sub_1C5E3DF4C(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
    v9 = 0;
    v10 = v6 - 1;
    v11 = *(const void **)a3;
    for (i = 1; ; i = v21 + 1)
    {
      v21 = i;
      v13 = result & v10;
      v14 = v7 + 16 * (result & v10);
      v15 = *(const void **)v14;
      if (*(_QWORD *)v14 == -1)
      {
        if (v11 == (const void *)-1)
          goto LABEL_11;
      }
      else if (v15 == (const void *)-2)
      {
        if (v11 == (const void *)-2)
          goto LABEL_11;
      }
      else
      {
        v16 = *(_QWORD *)(a3 + 8);
        if (v16 == *(_QWORD *)(v14 + 8))
        {
          if (!v16 || (result = memcmp(v11, *(const void **)v14, v16), !(_DWORD)result))
          {
LABEL_11:
            v17 = 0;
            goto LABEL_12;
          }
        }
      }
      if (v15 == (const void *)-1)
        break;
      if (v9)
        v20 = 0;
      else
        v20 = v15 == (const void *)-2;
      if (v20)
        v9 = v7 + 16 * v13;
      result = v21 + v13;
    }
    if (v9)
      v19 = v9;
    else
      v19 = v7 + 16 * v13;
  }
  else
  {
    v19 = 0;
  }
  result = sub_1C4FAA5F8(a2, a3, a3, v19);
  v14 = result;
  *(_OWORD *)result = *(_OWORD *)a3;
  v17 = 1;
LABEL_12:
  v18 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

_QWORD *sub_1C5AA3244()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81931F8;
  return result;
}

uint64_t sub_1C5AA3278(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5AA3290(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5AA32B4()
{
  return "llvm.sampleprof";
}

void sub_1C5AA32C0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_1C5AA32EC()
{
  char *v0;

  v0[23] = 7;
  strcpy(v0, "Success");
}

uint64_t sub_1C5AA3558(uint64_t a1, _QWORD *a2)
{
  unsigned int **v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unsigned int **v10;
  const std::nothrow_t *v11;
  unint64_t v12;
  unsigned int **v13;
  BOOL v14;
  unsigned int **v16;
  char v17;

  v3 = (unsigned int **)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1400000000;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v6 = 0;
    v10 = (unsigned int **)(a1 + 16);
LABEL_17:
    sub_1C5AA36D0(v10, v3, (uint64_t)&v17, v6, 0, 0);
    return a1;
  }
  LODWORD(v6) = 0;
  do
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (uint64_t)v3, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v5 + 4;
    v6 = (*(_DWORD *)(a1 + 8) + 1);
    *(_DWORD *)(a1 + 8) = v6;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  v10 = *(unsigned int ***)a1;
  v3 = (unsigned int **)(*(_QWORD *)a1 + 8 * v6);
  if (v6 < 0x81)
    goto LABEL_17;
  v11 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v12 = v6;
  while (1)
  {
    v13 = (unsigned int **)operator new(8 * v12, v11);
    if (v13)
      break;
    v14 = v12 > 1;
    v12 >>= 1;
    if (!v14)
      goto LABEL_17;
  }
  v16 = v13;
  sub_1C5AA36D0(v10, v3, (uint64_t)&v17, v6, v13, v12);
  operator delete(v16);
  return a1;
}

unsigned int **sub_1C5AA36D0(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, unsigned int **a5, uint64_t a6)
{
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v15;
  unsigned int **v16;
  unint64_t v17;

  if (a4 >= 2)
  {
    v7 = result;
    if (a4 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *result;
      v10 = **result;
      if (*v8 < v10 || *v8 == v10 && v8[1] < v9[1])
      {
        *result = v8;
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v15 = a4 >> 1;
      v16 = &result[a4 >> 1];
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C5AA3930(result, v16, a3, v17, (uint64_t)a5);
        sub_1C5AA3930(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[v15]);
        return sub_1C5AA3A78(a5, &a5[v15], &a5[v15], &a5[a4], v7);
      }
      else
      {
        sub_1C5AA36D0(result, v16, a3, v17, a5, a6);
        sub_1C5AA36D0(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return sub_1C5AA3B0C(v7, &v7[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return sub_1C5AA3868(result, a2);
    }
  }
  return result;
}

unsigned int **sub_1C5AA3868(unsigned int **result, unsigned int **a2)
{
  unsigned int **v2;
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int *v12;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v7 = *v5;
        v6 = v5[1];
        v8 = *v6;
        v9 = **v5;
        if (*v6 < v9 || v8 == v9 && v6[1] < v7[1])
        {
          v5[1] = v7;
          v10 = result;
          if (v5 != result)
          {
            v11 = v3;
            while (1)
            {
              v12 = *(unsigned int **)((char *)result + v11 - 8);
              if (v8 >= *v12)
              {
                if (v8 != *v12)
                {
                  v10 = (unsigned int **)((char *)result + v11);
                  goto LABEL_17;
                }
                if (v6[1] >= v12[1])
                  break;
              }
              --v5;
              *(unsigned int **)((char *)result + v11) = v12;
              v11 -= 8;
              if (!v11)
              {
                v10 = result;
                goto LABEL_17;
              }
            }
            v10 = v5;
          }
LABEL_17:
          *v10 = v6;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

unsigned int **sub_1C5AA3930(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      v11 = **result;
      if (*v9 < v11 || *v9 == v11 && v9[1] < v10[1])
      {
        *(_QWORD *)a5 = v9;
        v12 = *result;
      }
      else
      {
        *(_QWORD *)a5 = v10;
        v12 = *(a2 - 1);
      }
      *(_QWORD *)(a5 + 8) = v12;
    }
    else if (a4 == 1)
    {
      *(_QWORD *)a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_1C5AA36D0(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_1C5AA36D0(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5 + 8 * (a4 >> 1), a4 - (a4 >> 1));
      return sub_1C5AA3A78(v8, &v8[a4 >> 1], &v8[a4 >> 1], a2, (unsigned int **)a5);
    }
    else
    {
      return sub_1C5AA3E04(result, a2, (unsigned int **)a5);
    }
  }
  return result;
}

unsigned int **sub_1C5AA3A78(unsigned int **result, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;

  while (1)
  {
    if (result == a2)
    {
      while (a3 != a4)
      {
        v9 = *a3++;
        *a5++ = v9;
      }
      return result;
    }
    if (a3 == a4)
      break;
    v5 = *a3;
    v6 = *result;
    v7 = **a3;
    v8 = **result;
    if (v7 < v8 || v7 == v8 && v5[1] < v6[1])
    {
      *a5 = v5;
      ++a3;
    }
    else
    {
      *a5 = v6;
      ++result;
    }
    ++a5;
  }
  if (result != a2)
  {
    v10 = 0;
    do
    {
      a5[v10] = result[v10];
      ++v10;
    }
    while (&result[v10] != a2);
  }
  return result;
}

unsigned int **sub_1C5AA3B0C(unsigned int **result, unsigned int **a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int **v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int **v35;
  unsigned int *v36;

  if (a6)
  {
    v9 = a6;
    v12 = result;
    do
    {
      if (a5 <= a8 || v9 <= a8)
        return sub_1C5AA3EE4(v12, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v13 = *a2;
      v14 = **a2;
      while (1)
      {
        v15 = *v12;
        v16 = **v12;
        if (v14 < v16 || v14 == v16 && v13[1] < v15[1])
          break;
        ++v12;
        if (!--a5)
          return result;
      }
      if (a5 >= v9)
      {
        if (a5 == 1)
        {
          *v12 = v13;
          *a2 = v15;
          return result;
        }
        if (a5 >= 0)
          v27 = a5;
        else
          v27 = a5 + 1;
        v26 = v27 >> 1;
        v19 = &v12[v27 >> 1];
        v18 = 0;
        if (a3 == a2)
        {
          v33 = a3;
LABEL_44:
          v35 = v19;
          goto LABEL_47;
        }
        v28 = a3 - a2;
        v29 = **v19;
        do
        {
          v30 = v28 >> 1;
          v31 = v18 + (v28 >> 1);
          v32 = a2[v31];
          if (*v32 < v29 || *v32 == v29 && v32[1] < (*v19)[1])
          {
            v18 = v31 + 1;
            v30 = v28 + ~v30;
          }
          v28 = v30;
        }
        while (v30);
      }
      else
      {
        if (v9 >= 0)
          v17 = v9;
        else
          v17 = v9 + 1;
        v18 = v17 >> 1;
        v19 = a2;
        if (v12 != a2)
        {
          v20 = a2 - v12;
          v21 = a2[v18];
          v22 = *v21;
          v19 = v12;
          do
          {
            v23 = v20 >> 1;
            v24 = &v19[v20 >> 1];
            v25 = **v24;
            if (v22 >= v25 && (v22 != v25 || v21[1] >= (*v24)[1]))
            {
              v19 = v24 + 1;
              v23 = v20 + ~v23;
            }
            v20 = v23;
          }
          while (v23);
        }
        v26 = v19 - v12;
      }
      v33 = &a2[v18];
      v9 -= v18;
      if (v19 != a2)
      {
        if (v18)
        {
          if (v19 + 1 == a2)
          {
            v36 = *v19;
            memmove(v19, a2, 8 * v18);
            v35 = &v19[v18];
            *v35 = v36;
          }
          else if (v18 == 1)
          {
            v34 = *(v33 - 1);
            v35 = v19 + 1;
            if (v33 - 1 != v19)
              memmove(v19 + 1, v19, (char *)(v33 - 1) - (char *)v19);
            *v19 = v34;
            v18 = 1;
          }
          else
          {
            v35 = (unsigned int **)sub_1C4E85DF0(v19, a2, &a2[v18]);
          }
          goto LABEL_47;
        }
        goto LABEL_44;
      }
      v19 = a2;
      v35 = &a2[v18];
LABEL_47:
      a5 -= v26;
      if (v18 + v26 >= a5 + v9)
      {
        result = (unsigned int **)sub_1C5AA3B0C(v35, v33, a3, a4, a5, v9, a7, a8);
        v33 = v19;
        v9 = v18;
        a5 = v26;
        a3 = v35;
      }
      else
      {
        result = (unsigned int **)sub_1C5AA3B0C(v12, v19, v35, a4, v26, v18, a7, a8);
        v12 = v35;
      }
      a2 = v33;
    }
    while (v9);
  }
  return result;
}

unsigned int **sub_1C5AA3E04(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  if (result != a2)
  {
    v3 = *result++;
    *a3 = v3;
    if (result != a2)
    {
      v4 = 0;
      v5 = a3;
      v6 = a3;
      do
      {
        v8 = *v6++;
        v7 = v8;
        v9 = *result;
        v10 = **result;
        v11 = *v8;
        if (v10 < *v8 || v10 == v11 && v9[1] < v7[1])
        {
          v5[1] = v7;
          v12 = a3;
          if (v5 != a3)
          {
            v13 = v4;
            while (1)
            {
              v14 = *(unsigned int **)((char *)a3 + v13 - 8);
              v15 = **result;
              if (v15 >= *v14)
              {
                if (v15 != *v14)
                {
                  v12 = (unsigned int **)((char *)a3 + v13);
                  goto LABEL_17;
                }
                if ((*result)[1] >= v14[1])
                  break;
              }
              --v5;
              *(unsigned int **)((char *)a3 + v13) = v14;
              v13 -= 8;
              if (!v13)
              {
                v12 = a3;
                goto LABEL_17;
              }
            }
            v12 = v5;
          }
LABEL_17:
          *v12 = *result;
        }
        else
        {
          *v6 = v9;
        }
        ++result;
        v4 += 8;
        v5 = v6;
      }
      while (result != a2);
    }
  }
  return result;
}

unsigned int **sub_1C5AA3EE4(unsigned int **result, unsigned int **a2, unsigned int **a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v13 = 0;
      do
      {
        *(_QWORD *)&__src[v13] = result[v13 / 8];
        v13 += 8;
      }
      while (&result[v13 / 8] != a2);
      if (v13)
      {
        v14 = __src;
        while (a2 != a3)
        {
          v15 = *a2;
          v16 = *(unsigned int **)v14;
          v17 = **a2;
          v18 = **(_DWORD **)v14;
          if (v17 < v18 || v17 == v18 && v15[1] < v16[1])
          {
            *result = v15;
            ++a2;
          }
          else
          {
            *result = v16;
            v14 += 8;
          }
          ++result;
          if (&__src[v13] == v14)
            return result;
        }
        return (unsigned int **)memmove(result, v14, __src - v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)&__src[v7 * 8] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 8)
    {
      v8 = &__src[v7 * 8];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = a2 - 1;
        v11 = *(a2 - 1);
        v12 = (unsigned int *)*((_QWORD *)v8 - 1);
        if (*v12 >= *v11 && (*v12 != *v11 || v12[1] >= v11[1]))
        {
          v11 = (unsigned int *)*((_QWORD *)v8 - 1);
          v10 = a2;
          v8 -= 8;
        }
        *v9-- = v11;
        a2 = v10;
        if (v8 == __src)
          return result;
      }
      if (v8 != __src)
      {
        v19 = 0;
        do
        {
          v9[v19] = *(unsigned int **)&v8[v19 * 8 - 8];
          --v19;
        }
        while (&v8[v19 * 8] != __src);
      }
    }
  }
  return result;
}

uint64_t sub_1C5AA403C(uint64_t a1, _QWORD *a2)
{
  unsigned int **v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unsigned int **v10;
  const std::nothrow_t *v11;
  unint64_t v12;
  unsigned int **v13;
  BOOL v14;
  unsigned int **v16;
  char v17;

  v3 = (unsigned int **)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x1400000000;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v6 = 0;
    v10 = (unsigned int **)(a1 + 16);
LABEL_17:
    sub_1C5AA41B4(v10, v3, (uint64_t)&v17, v6, 0, 0);
    return a1;
  }
  LODWORD(v6) = 0;
  do
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (uint64_t)v3, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v5 + 4;
    v6 = (*(_DWORD *)(a1 + 8) + 1);
    *(_DWORD *)(a1 + 8) = v6;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  v10 = *(unsigned int ***)a1;
  v3 = (unsigned int **)(*(_QWORD *)a1 + 8 * v6);
  if (v6 < 0x81)
    goto LABEL_17;
  v11 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v12 = v6;
  while (1)
  {
    v13 = (unsigned int **)operator new(8 * v12, v11);
    if (v13)
      break;
    v14 = v12 > 1;
    v12 >>= 1;
    if (!v14)
      goto LABEL_17;
  }
  v16 = v13;
  sub_1C5AA41B4(v10, v3, (uint64_t)&v17, v6, v13, v12);
  operator delete(v16);
  return a1;
}

unsigned int **sub_1C5AA41B4(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, unsigned int **a5, uint64_t a6)
{
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v15;
  unsigned int **v16;
  unint64_t v17;

  if (a4 >= 2)
  {
    v7 = result;
    if (a4 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *result;
      v10 = **result;
      if (*v8 < v10 || *v8 == v10 && v8[1] < v9[1])
      {
        *result = v8;
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v15 = a4 >> 1;
      v16 = &result[a4 >> 1];
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C5AA434C(result, v16, a3, v17, (uint64_t)a5);
        sub_1C5AA434C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), (uint64_t)&a5[v15]);
        return sub_1C5AA3A78(a5, &a5[v15], &a5[v15], &a5[a4], v7);
      }
      else
      {
        sub_1C5AA41B4(result, v16, a3, v17, a5, a6);
        sub_1C5AA41B4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return sub_1C5AA3B0C(v7, &v7[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return sub_1C5AA3868(result, a2);
    }
  }
  return result;
}

unsigned int **sub_1C5AA434C(unsigned int **result, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      v11 = **result;
      if (*v9 < v11 || *v9 == v11 && v9[1] < v10[1])
      {
        *(_QWORD *)a5 = v9;
        v12 = *result;
      }
      else
      {
        *(_QWORD *)a5 = v10;
        v12 = *(a2 - 1);
      }
      *(_QWORD *)(a5 + 8) = v12;
    }
    else if (a4 == 1)
    {
      *(_QWORD *)a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_1C5AA41B4(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_1C5AA41B4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5 + 8 * (a4 >> 1), a4 - (a4 >> 1));
      return sub_1C5AA3A78(v8, &v8[a4 >> 1], &v8[a4 >> 1], a2, (unsigned int **)a5);
    }
    else
    {
      return sub_1C5AA3E04(result, a2, (unsigned int **)a5);
    }
  }
  return result;
}

double sub_1C5AA4494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __n128 v56;
  __int128 v57;
  __int128 v58;

  if (a3 < 2)
    return a6.n128_f64[0];
  v7 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      v13 = a4;
      v14 = a3 >> 1;
      v15 = a1 + 48 * (a3 >> 1);
      v16 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        sub_1C5AA4494(a1, v15, v16, a4, a5);
        sub_1C5AA4494(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v13, a5);
        a6.n128_u64[0] = sub_1C5AA4B64(v7, v7 + 48 * (a3 >> 1), a2, a3 >> 1, a3 - (a3 >> 1), v13, a5).n128_u64[0];
        return a6.n128_f64[0];
      }
      v39 = sub_1C5AA4828(a1, v15, v16, a4, a6);
      v40 = v13 + 48 * v14;
      a6.n128_u64[0] = sub_1C5AA4828(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v40, v39).n128_u64[0];
      v41 = v13 + 48 * a3;
      v42 = v40;
      while (1)
      {
        if (v42 == v41)
        {
          if (v13 != v40)
          {
            v51 = 0;
            do
            {
              v52 = v13 + v51;
              v53 = v7 + v51;
              a6 = *(__n128 *)(v13 + v51);
              v54 = *(_OWORD *)(v13 + v51 + 16);
              *(_QWORD *)(v53 + 32) = *(_QWORD *)(v13 + v51 + 32);
              *(__n128 *)v53 = a6;
              *(_OWORD *)(v53 + 16) = v54;
              *(_QWORD *)(v53 + 40) = *(_QWORD *)(v13 + v51 + 40);
              v51 += 48;
            }
            while (v52 + 48 != v40);
          }
          return a6.n128_f64[0];
        }
        v43 = *(_QWORD *)(*(_QWORD *)(v42 + 40) + 56);
        v44 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56);
        if (v43 == v44)
        {
          if (sub_1C5754088(v42, v13))
            goto LABEL_37;
        }
        else if (v43 > v44)
        {
LABEL_37:
          a6 = *(__n128 *)v42;
          v46 = *(_OWORD *)(v42 + 16);
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(v42 + 32);
          *(__n128 *)v7 = a6;
          *(_OWORD *)(v7 + 16) = v46;
          *(_QWORD *)(v7 + 40) = *(_QWORD *)(v42 + 40);
          v42 += 48;
          goto LABEL_38;
        }
        a6 = *(__n128 *)v13;
        v45 = *(_OWORD *)(v13 + 16);
        *(_QWORD *)(v7 + 32) = *(_QWORD *)(v13 + 32);
        *(__n128 *)v7 = a6;
        *(_OWORD *)(v7 + 16) = v45;
        *(_QWORD *)(v7 + 40) = *(_QWORD *)(v13 + 40);
        v13 += 48;
LABEL_38:
        v7 += 48;
        if (v13 == v40)
        {
          if (v42 != v41)
          {
            v47 = 0;
            do
            {
              v48 = v42 + v47;
              v49 = v7 + v47;
              a6 = *(__n128 *)(v42 + v47);
              v50 = *(_OWORD *)(v42 + v47 + 16);
              *(_QWORD *)(v49 + 32) = *(_QWORD *)(v42 + v47 + 32);
              *(__n128 *)v49 = a6;
              *(_OWORD *)(v49 + 16) = v50;
              *(_QWORD *)(v49 + 40) = *(_QWORD *)(v42 + v47 + 40);
              v47 += 48;
            }
            while (v48 + 48 != v41);
          }
          return a6.n128_f64[0];
        }
      }
    }
    if (a1 == a2)
      return a6.n128_f64[0];
    v22 = a1 + 48;
    if (a1 + 48 == a2)
      return a6.n128_f64[0];
    v23 = 0;
    v24 = a1;
LABEL_15:
    v25 = v24;
    v24 = v22;
    v26 = *(_QWORD *)(*(_QWORD *)(v25 + 88) + 56);
    v27 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 56);
    if (v26 == v27)
    {
      if (!sub_1C5754088(v24, v25))
        goto LABEL_28;
    }
    else if (v26 <= v27)
    {
      goto LABEL_28;
    }
    v28 = *(__n128 *)v24;
    v29 = *(_OWORD *)(v24 + 32);
    v57 = *(_OWORD *)(v24 + 16);
    v58 = v29;
    v56 = v28;
    v30 = *(__n128 *)v25;
    v31 = *(_OWORD *)(v25 + 16);
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
    *(__n128 *)v24 = v30;
    *(_OWORD *)(v24 + 16) = v31;
    *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
    if (v25 == v7)
    {
LABEL_26:
      v25 = v7;
      goto LABEL_27;
    }
    v32 = v23;
    while (1)
    {
      v33 = v7 + v32;
      v34 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 56);
      v35 = *(_QWORD *)(v7 + v32 - 8);
      v36 = *(_QWORD *)(v35 + 56);
      if (v34 == v36)
      {
        if (!sub_1C5754088((uint64_t)&v56, v7 + v32 - 48))
        {
          v25 = v7 + v32;
LABEL_27:
          a6 = v56;
          v38 = v57;
          *(_QWORD *)(v25 + 32) = v58;
          *(__n128 *)v25 = a6;
          *(_OWORD *)(v25 + 16) = v38;
          *(_QWORD *)(v25 + 40) = *((_QWORD *)&v58 + 1);
LABEL_28:
          v22 = v24 + 48;
          v23 += 48;
          if (v24 + 48 == a2)
            return a6.n128_f64[0];
          goto LABEL_15;
        }
        v35 = *(_QWORD *)(v33 - 8);
      }
      else if (v34 <= v36)
      {
        goto LABEL_27;
      }
      v25 -= 48;
      v37 = *(_OWORD *)(v7 + v32 - 32);
      *(_OWORD *)v33 = *(_OWORD *)(v7 + v32 - 48);
      *(_OWORD *)(v33 + 16) = v37;
      *(_QWORD *)(v33 + 32) = *(_QWORD *)(v7 + v32 - 16);
      *(_QWORD *)(v7 + v32 + 40) = v35;
      v32 -= 48;
      if (!v32)
        goto LABEL_26;
    }
  }
  v8 = (_OWORD *)(a2 - 48);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 56);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  if (v9 == v10)
  {
    if (!sub_1C5754088(a2 - 48, a1))
      return a6.n128_f64[0];
  }
  else if (v9 <= v10)
  {
    return a6.n128_f64[0];
  }
  a6 = *(__n128 *)v7;
  v17 = *(_OWORD *)(v7 + 16);
  v18 = *(_QWORD *)(v7 + 32);
  v19 = *(_QWORD *)(a2 - 16);
  v20 = *(_OWORD *)(a2 - 32);
  *(_OWORD *)v7 = *v8;
  *(_OWORD *)(v7 + 16) = v20;
  *(_QWORD *)(v7 + 32) = v19;
  *(_QWORD *)(a2 - 16) = v18;
  *v8 = a6;
  *(_OWORD *)(a2 - 32) = v17;
  v21 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(a2 - 8);
  *(_QWORD *)(a2 - 8) = v21;
  return a6.n128_f64[0];
}

__n128 sub_1C5AA4828(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;

  if (!a3)
    return result;
  v5 = a4;
  v8 = a1;
  if (a3 == 2)
  {
    v10 = (__n128 *)(a2 - 48);
    v11 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 56);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    if (v11 == v12)
    {
      if (!sub_1C5754088(a2 - 48, a1))
      {
LABEL_7:
        v13 = *(__n128 *)v8;
        v14 = *(_OWORD *)(v8 + 32);
        *(_OWORD *)(v5 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v5 + 32) = v14;
        *(__n128 *)v5 = v13;
        result = *v10;
        v15 = *(_OWORD *)(a2 - 32);
        v16 = *(_OWORD *)(a2 - 16);
LABEL_31:
        *(_OWORD *)(v5 + 64) = v15;
        *(_OWORD *)(v5 + 80) = v16;
        *(__n128 *)(v5 + 48) = result;
        return result;
      }
    }
    else if (v11 <= v12)
    {
      goto LABEL_7;
    }
    v35 = *v10;
    v36 = *(_OWORD *)(a2 - 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 - 32);
    *(_OWORD *)(v5 + 32) = v36;
    *(__n128 *)v5 = v35;
    result = *(__n128 *)v8;
    v15 = *(_OWORD *)(v8 + 16);
    v16 = *(_OWORD *)(v8 + 32);
    goto LABEL_31;
  }
  if (a3 == 1)
  {
    result = *(__n128 *)a1;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a4 + 32) = v9;
    *(__n128 *)a4 = result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v37 = a1 + 48 * (a3 >> 1);
    sub_1C5AA4494(a1, v37, a3 >> 1, a4, a3 >> 1);
    sub_1C5AA4494(v8 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v5 + 48 * (a3 >> 1), a3 - (a3 >> 1));
    v38 = v8 + 48 * (a3 >> 1);
    while (1)
    {
      if (v38 == a2)
      {
        if (v8 != v37)
        {
          v46 = 0;
          do
          {
            v47 = v5 + v46;
            result = *(__n128 *)(v8 + v46);
            v48 = *(_OWORD *)(v8 + v46 + 32);
            *(_OWORD *)(v47 + 16) = *(_OWORD *)(v8 + v46 + 16);
            *(_OWORD *)(v47 + 32) = v48;
            *(__n128 *)v47 = result;
            v46 += 48;
          }
          while (v8 + v46 != v37);
        }
        return result;
      }
      v39 = *(_QWORD *)(*(_QWORD *)(v38 + 40) + 56);
      v40 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56);
      if (v39 == v40)
      {
        if (sub_1C5754088(v38, v8))
          goto LABEL_39;
      }
      else if (v39 > v40)
      {
LABEL_39:
        result = *(__n128 *)v38;
        v42 = *(_OWORD *)(v38 + 32);
        *(_OWORD *)(v5 + 16) = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v5 + 32) = v42;
        *(__n128 *)v5 = result;
        v38 += 48;
        goto LABEL_40;
      }
      result = *(__n128 *)v8;
      v41 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v5 + 32) = v41;
      *(__n128 *)v5 = result;
      v8 += 48;
LABEL_40:
      v5 += 48;
      if (v8 == v37)
      {
        if (v38 != a2)
        {
          v43 = 0;
          do
          {
            v44 = v5 + v43;
            result = *(__n128 *)(v38 + v43);
            v45 = *(_OWORD *)(v38 + v43 + 32);
            *(_OWORD *)(v44 + 16) = *(_OWORD *)(v38 + v43 + 16);
            *(_OWORD *)(v44 + 32) = v45;
            *(__n128 *)v44 = result;
            v43 += 48;
          }
          while (v38 + v43 != a2);
        }
        return result;
      }
    }
  }
  if (a1 == a2)
    return result;
  result = *(__n128 *)a1;
  v17 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v17;
  *(__n128 *)a4 = result;
  v18 = a1 + 48;
  if (a1 + 48 == a2)
    return result;
  v19 = 0;
  v20 = a4;
  do
  {
    v21 = v18;
    v22 = (__n128 *)(v20 + 48);
    v23 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 56);
    v24 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 56);
    if (v23 == v24)
    {
      if (!sub_1C5754088(v21, v20))
        goto LABEL_14;
    }
    else if (v23 <= v24)
    {
LABEL_14:
      result = *(__n128 *)v21;
      v25 = *(_OWORD *)(v21 + 32);
      *(_OWORD *)(v20 + 64) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 80) = v25;
      *v22 = result;
      goto LABEL_27;
    }
    v26 = *(_OWORD *)(v20 + 16);
    *v22 = *(__n128 *)v20;
    *(_OWORD *)(v20 + 64) = v26;
    *(_OWORD *)(v20 + 80) = *(_OWORD *)(v20 + 32);
    v27 = v5;
    if (v20 == v5)
      goto LABEL_26;
    v28 = v19;
    while (1)
    {
      v29 = v5 + v28;
      v30 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 56);
      v31 = *(_QWORD *)(v5 + v28 - 8);
      v32 = *(_QWORD *)(v31 + 56);
      if (v30 != v32)
      {
        if (v30 <= v32)
        {
          v27 = v20;
          goto LABEL_26;
        }
        goto LABEL_23;
      }
      if (!sub_1C5754088(v21, v5 + v28 - 48))
        break;
      v31 = *(_QWORD *)(v29 - 8);
LABEL_23:
      v20 -= 48;
      v33 = *(_OWORD *)(v5 + v28 - 32);
      *(_OWORD *)v29 = *(_OWORD *)(v5 + v28 - 48);
      *(_OWORD *)(v29 + 16) = v33;
      *(_QWORD *)(v29 + 32) = *(_QWORD *)(v5 + v28 - 16);
      *(_QWORD *)(v5 + v28 + 40) = v31;
      v28 -= 48;
      if (!v28)
      {
        v27 = v5;
        goto LABEL_26;
      }
    }
    v27 = v5 + v28;
LABEL_26:
    result = *(__n128 *)v21;
    v34 = *(_OWORD *)(v21 + 16);
    *(_QWORD *)(v27 + 32) = *(_QWORD *)(v21 + 32);
    *(__n128 *)v27 = result;
    *(_OWORD *)(v27 + 16) = v34;
    *(_QWORD *)(v27 + 40) = *(_QWORD *)(v8 + 88);
LABEL_27:
    v18 = v21 + 48;
    v19 += 48;
    v20 = (uint64_t)v22;
    v8 = v21;
  }
  while (v21 + 48 != a2);
  return result;
}

__n128 sub_1C5AA4B64(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __n128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  if (!a5)
    return result;
  v9 = a5;
  do
  {
    if (a4 <= a7 || v9 <= a7)
    {
      if (a4 > v9)
      {
        if (a2 == a3)
          return result;
        v50 = 0;
        do
        {
          v51 = a6 + v50;
          result = *(__n128 *)(a2 + v50);
          v52 = *(_OWORD *)(a2 + v50 + 32);
          *(_OWORD *)(v51 + 16) = *(_OWORD *)(a2 + v50 + 16);
          *(_OWORD *)(v51 + 32) = v52;
          *(__n128 *)v51 = result;
          v50 += 48;
        }
        while (a2 + v50 != a3);
        if (!v50)
          return result;
        v53 = a6 + v50;
        while (1)
        {
          if (a2 == a1)
          {
            if (v53 != a6)
            {
              v74 = 0;
              do
              {
                v75 = a3 + v74;
                result = *(__n128 *)(v53 + v74 - 48);
                v76 = *(_OWORD *)(v53 + v74 - 32);
                *(_QWORD *)(v75 - 16) = *(_QWORD *)(v53 + v74 - 16);
                *(__n128 *)(v75 - 48) = result;
                *(_OWORD *)(v75 - 32) = v76;
                *(_QWORD *)(v75 - 8) = *(_QWORD *)(v53 + v74 - 8);
                v74 -= 48;
              }
              while (v53 + v74 != a6);
            }
            return result;
          }
          v54 = (_QWORD *)(a2 - 8);
          v55 = a2 - 48;
          v56 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 56);
          v57 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 56);
          if (v56 == v57)
            break;
          v59 = a2 - 48;
          if (v56 <= v57)
            goto LABEL_77;
LABEL_78:
          result = *(__n128 *)v55;
          v60 = *(_OWORD *)(v55 + 16);
          *(_QWORD *)(a3 - 16) = *(_QWORD *)(v55 + 32);
          *(__n128 *)(a3 - 48) = result;
          *(_OWORD *)(a3 - 32) = v60;
          *(_QWORD *)(a3 - 8) = *v54;
          a3 -= 48;
          a2 = v59;
          if (v53 == a6)
            return result;
        }
        v58 = sub_1C5754088(v53 - 48, a2 - 48);
        v59 = a2 - 48;
        if (v58)
          goto LABEL_78;
LABEL_77:
        v55 = v53 - 48;
        v54 = (_QWORD *)(v53 - 8);
        v59 = a2;
        v53 -= 48;
        goto LABEL_78;
      }
      if (a1 == a2)
        return result;
      v61 = 0;
      do
      {
        v62 = a6 + v61;
        result = *(__n128 *)(a1 + v61);
        v63 = *(_OWORD *)(a1 + v61 + 32);
        *(_OWORD *)(v62 + 16) = *(_OWORD *)(a1 + v61 + 16);
        *(_OWORD *)(v62 + 32) = v63;
        *(__n128 *)v62 = result;
        v61 += 48;
      }
      while (a1 + v61 != a2);
      if (!v61)
        return result;
      v64 = a6 + v61;
      v65 = a6 + v61 - 48;
      while (1)
      {
        if (a2 == a3)
        {
          if (v64 != a6)
          {
            v77 = 0;
            do
            {
              v78 = a1 + v77;
              v79 = a6 + v77;
              result = *(__n128 *)(a6 + v77);
              v80 = *(_OWORD *)(a6 + v77 + 16);
              *(_QWORD *)(v78 + 32) = *(_QWORD *)(a6 + v77 + 32);
              *(__n128 *)v78 = result;
              *(_OWORD *)(v78 + 16) = v80;
              *(_QWORD *)(v78 + 40) = *(_QWORD *)(a6 + v77 + 40);
              v77 += 48;
            }
            while (v65 != v79);
          }
          return result;
        }
        v66 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
        v67 = *(_QWORD *)(*(_QWORD *)(a6 + 40) + 56);
        if (v66 == v67)
        {
          if (sub_1C5754088(a2, a6))
            goto LABEL_90;
        }
        else if (v66 > v67)
        {
LABEL_90:
          result = *(__n128 *)a2;
          v69 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(__n128 *)a1 = result;
          *(_OWORD *)(a1 + 16) = v69;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          a2 += 48;
          goto LABEL_91;
        }
        result = *(__n128 *)a6;
        v68 = *(_OWORD *)(a6 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a6 + 32);
        *(__n128 *)a1 = result;
        *(_OWORD *)(a1 + 16) = v68;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a6 + 40);
        a6 += 48;
LABEL_91:
        a1 += 48;
        if (v64 == a6)
          return result;
      }
    }
    if (!a4)
      return result;
    v14 = 0;
    v15 = -a4;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + v14 + 40) + 56);
      if (v16 != v17)
        break;
      if (sub_1C5754088(a2, a1 + v14))
        goto LABEL_14;
LABEL_11:
      v14 += 48;
      if (__CFADD__(v15++, 1))
        return result;
    }
    if (v16 <= v17)
      goto LABEL_11;
LABEL_14:
    v20 = -v15;
    v84 = a6;
    v85 = v9;
    v86 = a3;
    if (-v15 < v9)
    {
      if (v9 >= 0)
        v21 = v9;
      else
        v21 = v9 + 1;
      a3 = a2 + 48 * (v21 >> 1);
      v83 = v21 >> 1;
      if (a1 + v14 == a2)
      {
        v29 = a2;
        v22 = a2;
      }
      else
      {
        v22 = a1 + v14;
        v82 = a7;
        v23 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - v14) >> 4);
        v24 = a2 + 48 * (v21 >> 1) + 40;
        do
        {
          v25 = v22 + 48 * (v23 >> 1);
          v26 = *(_QWORD *)(*(_QWORD *)v24 + 56);
          v27 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 56);
          if (v26 == v27)
            v28 = sub_1C5754088(a3, v22 + 48 * (v23 >> 1));
          else
            v28 = v26 > v27;
          if (v28)
          {
            v23 >>= 1;
          }
          else
          {
            v22 = v25 + 48;
            v23 += ~(v23 >> 1);
          }
        }
        while (v23);
        v29 = v22;
        a7 = v82;
      }
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v29 - a1 - v14) >> 4);
      goto LABEL_45;
    }
    if (v15 == -1)
    {
      v70 = a1 + v14;
      v93 = *(_QWORD *)(a1 + v14 + 32);
      v88 = *(__n128 *)(a1 + v14);
      v91 = *(_OWORD *)(a1 + v14 + 16);
      v71 = *(__n128 *)a2;
      v72 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v70 + 32) = *(_QWORD *)(a2 + 32);
      *(__n128 *)v70 = v71;
      *(_OWORD *)(v70 + 16) = v72;
      result = v88;
      *(_QWORD *)(a2 + 32) = v93;
      *(__n128 *)a2 = v88;
      *(_OWORD *)(a2 + 16) = v91;
      v73 = *(_QWORD *)(a1 + v14 + 40);
      *(_QWORD *)(v70 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = v73;
      return result;
    }
    if (v15 > 0)
      v20 = 1 - v15;
    v81 = v20 >> 1;
    v22 = a1 + 48 * (v20 >> 1) + v14;
    if (a3 != a2)
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
      a3 = a2;
      do
      {
        v31 = a3 + 48 * (v30 >> 1);
        v32 = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 56);
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 48 * v81 + v14 + 40) + 56);
        if (v32 == v33)
          v34 = sub_1C5754088(a3 + 48 * (v30 >> 1), v22);
        else
          v34 = v32 > v33;
        if (v34)
          v30 += ~(v30 >> 1);
        else
          v30 >>= 1;
        if (v34)
          a3 = v31 + 48;
      }
      while (v30);
    }
    v83 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
    v35 = v81;
    v29 = a1 + 48 * v81 + v14;
LABEL_45:
    v36 = a3;
    if (v22 != a2)
    {
      v36 = v29;
      if (a2 != a3)
      {
        v37 = v35;
        v36 = v29 + 48;
        v38 = v29 + 48;
        v39 = a2;
        while (1)
        {
          v40 = *(_OWORD *)(v38 - 48);
          v89 = *(_OWORD *)(v38 - 32);
          v41 = *(_QWORD *)(v38 - 16);
          v43 = *(_OWORD *)v39;
          v42 = *(_OWORD *)(v39 + 16);
          *(_QWORD *)(v38 - 16) = *(_QWORD *)(v39 + 32);
          *(_OWORD *)(v38 - 48) = v43;
          *(_OWORD *)(v38 - 32) = v42;
          *(_QWORD *)(v39 + 32) = v41;
          *(_OWORD *)v39 = v40;
          *(_OWORD *)(v39 + 16) = v89;
          v44 = *(_QWORD *)(v38 - 8);
          *(_QWORD *)(v38 - 8) = *(_QWORD *)(v39 + 40);
          *(_QWORD *)(v39 + 40) = v44;
          v39 += 48;
          if (v39 == a3)
            break;
          if (v38 == a2)
            a2 = v39;
          v38 += 48;
          v36 += 48;
        }
        if (v38 != a2)
        {
          v45 = a2;
          do
          {
            while (1)
            {
              v92 = *(_QWORD *)(v38 + 32);
              v87 = *(_OWORD *)v38;
              v90 = *(_OWORD *)(v38 + 16);
              v46 = *(_OWORD *)v45;
              v47 = *(_OWORD *)(v45 + 16);
              *(_QWORD *)(v38 + 32) = *(_QWORD *)(v45 + 32);
              *(_OWORD *)v38 = v46;
              *(_OWORD *)(v38 + 16) = v47;
              *(_QWORD *)(v45 + 32) = v92;
              *(_OWORD *)v45 = v87;
              *(_OWORD *)(v45 + 16) = v90;
              v48 = *(_QWORD *)(v38 + 40);
              *(_QWORD *)(v38 + 40) = *(_QWORD *)(v45 + 40);
              *(_QWORD *)(v45 + 40) = v48;
              v38 += 48;
              v45 += 48;
              if (v45 == a3)
                break;
              if (v38 == a2)
                a2 = v45;
            }
            v45 = a2;
          }
          while (v38 != a2);
        }
        v35 = v37;
      }
    }
    a4 = -(uint64_t)(v35 + v15);
    v49 = v85 - v83;
    if ((uint64_t)(v35 + v83) >= (uint64_t)(v85 - (v35 + v83) - v15))
    {
      a4 = v35;
      sub_1C5AA4B64(v36, a3, v86, -(uint64_t)(v35 + v15), v85 - v83, v84, a7);
      a3 = v22;
      a6 = v84;
      v49 = v83;
      v86 = v36;
      a1 += v14;
    }
    else
    {
      a6 = v84;
      sub_1C5AA4B64(a1 + v14, v29, v36, v35, v83, v84, a7);
      a1 = v36;
    }
    v9 = v49;
    a2 = a3;
    a3 = v86;
  }
  while (v49);
  return result;
}

void sub_1C5AA51D4(char a1, _QWORD **__p)
{
  if (a1)
  {
    sub_1C63097D8((uint64_t)(__p + 19), __p[20]);
    sub_1C6309824((uint64_t)(__p + 16), __p[17]);
  }
  operator delete(__p);
}

void sub_1C5AA5218(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = (_QWORD *)*a2;
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v3)
    goto LABEL_19;
  v9 = v3[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = (_QWORD *)*a2;
    goto LABEL_20;
  }
LABEL_21:
  v10 = v3[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v10) = v7;
    v3 = (_QWORD *)*a2;
  }
LABEL_27:
  *v7 = v3;
  *a2 = 0;
  --a1[3];
  sub_1C5AA51D4(1, (_QWORD **)a2);
}

uint64_t sub_1C5AA5340(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (unsigned int *)(a2 + 1);
  v5 = (unsigned int *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C5AA53D4((uint64_t **)a1, v3, v5 + 8, (uint64_t)(v5 + 8));
      v6 = (unsigned int *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (unsigned int *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_OWORD *sub_1C5AA53D4(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_1C5AA548C(a1, a2, &v14, &v13, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    sub_1C62A29BC((llvm::StringMapImpl *)(v7 + 3), (uint64_t *)(a4 + 16));
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1C5AA548C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_5;
  v5 = *a5;
  v6 = *((_DWORD *)a2 + 8);
  if (*a5 < v6)
    goto LABEL_5;
  if (v5 != v6)
  {
    if (v6 >= v5)
      goto LABEL_25;
LABEL_20:
    v15 = a2[1];
    if (v15)
    {
      v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        v13 = *a4 == v17;
        v17 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 == a1 + 1 || (v18 = *((_DWORD *)a4 + 8), v5 < v18) || v5 == v18 && a5[1] < *((_DWORD *)a4 + 9))
    {
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_1C5753DF0((uint64_t)a1, a3, a5);
  }
  v7 = a5[1];
  v8 = *((_DWORD *)a2 + 9);
  if (v7 < v8)
  {
LABEL_5:
    v9 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
      {
        *a3 = v11;
        return v11 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v12 = a2;
      do
      {
        v11 = (uint64_t *)v12[2];
        v13 = *v11 == (_QWORD)v12;
        v12 = v11;
      }
      while (v13);
    }
    v14 = *((_DWORD *)v11 + 8);
    if (v14 < *a5 || v14 == *a5 && *((_DWORD *)v11 + 9) < a5[1])
      goto LABEL_16;
    return sub_1C5753DF0((uint64_t)a1, a3, a5);
  }
  if (v8 < v7)
    goto LABEL_20;
LABEL_25:
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t sub_1C5AA55E8(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (unsigned int *)(a2 + 1);
  v5 = (unsigned int *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C5AA567C((uint64_t **)a1, v3, v5 + 8, (_QWORD *)v5 + 4);
      v6 = (unsigned int *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (unsigned int *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t *sub_1C5AA567C(uint64_t **a1, uint64_t *a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = sub_1C5AA548C(a1, a2, &v13, &v12, a3);
  result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_1C5AA5724((uint64_t)a1, a4, (uint64_t)&v11);
    v8 = v13;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v8;
    *v6 = (uint64_t)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = (uint64_t *)*v6;
    }
    sub_1C4768E74(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

_QWORD *sub_1C5AA5724@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  const void **v8;
  const void **v9;
  uint64_t *v10;
  uint64_t **v11;
  const void **v12;
  const void **v13;
  BOOL v14;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  v9 = (const void **)a2[1];
  v8 = (const void **)(a2 + 2);
  result[4] = v7;
  result[7] = 0;
  result[6] = 0;
  v10 = result + 6;
  result[5] = result + 6;
  v11 = (uint64_t **)(result + 5);
  if (v9 != v8)
  {
    do
    {
      result = sub_1C5AA57E0(v11, v10, v9 + 4, (__int128 *)v9 + 2);
      v12 = (const void **)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const void **)v9[2];
          v14 = *v13 == v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != v8);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

char *sub_1C5AA57E0(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_1C5711498(a1, a2, &v14, &v13, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0xB0uLL);
    sub_1C5AA5890(v7 + 32, a4);
    v9 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v8 = (uint64_t)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *sub_1C5AA5890(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(__int128 *)((char *)a2 + 24);
  v5 = *(__int128 *)((char *)a2 + 40);
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 72);
  *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(__dst + 72) = v7;
  *(_OWORD *)(__dst + 56) = v6;
  *(_OWORD *)(__dst + 40) = v5;
  sub_1C5AA5340((uint64_t)(__dst + 96), (_QWORD *)a2 + 12);
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 15) = __dst + 128;
  *((_QWORD *)__dst + 17) = 0;
  v8 = (_QWORD *)*((_QWORD *)a2 + 15);
  v9 = a2 + 8;
  if (v8 != v9)
  {
    do
    {
      sub_1C5AA567C(__dst + 120, __dst + 128, v8 + 4, v8 + 4);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  return __dst;
}

uint64_t **sub_1C5AA5990(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x60uLL);
    v10 = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C5AA5A6C()
{
  int v1;
  int v2;
  __n128 v3;
  int v4;
  int *v5;

  v4 = 1;
  v1 = 1;
  v2 = -1;
  v5 = &v2;
  v3.n128_u64[0] = (unint64_t)"Cutoff value about how many symbols in profile symbol list will be used. This is ve"
                                     "ry useful for performance debugging";
  v3.n128_u64[1] = 118;
  sub_1C630A5E0(&v4, &v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &qword_1ED81B280, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v5 = &v2;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"When generating nested context-sensitive profiles, always generate extra base profi"
                                     "le for function with all its context profiles merged into it.";
  v3.n128_u64[1] = 144;
  sub_1C630A728((char **)&v5, &v4, (__int128 *)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &GenerateMergedBaseProfiles, &dword_1C475E000);
}

void llvm::sampleprof::SampleProfileReader::dumpFunctionProfile(uint64_t a1, __int128 *a2, llvm::raw_ostream *this)
{
  uint64_t v6;
  void **v7;
  size_t v8;
  _WORD *v9;
  char *v10;
  void *__p[2];
  char v12;
  __int128 *v13;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 8250;
    *(_QWORD *)v6 = *(_QWORD *)"Function: ";
    *((_QWORD *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "Function: ", 0xAuLL);
  }
  sub_1C5AA5C64(a2, (uint64_t)__p);
  if (v12 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v12 >= 0)
    v8 = v12 & 0x7F;
  else
    v8 = (size_t)__p[1];
  llvm::raw_ostream::write(this, (const char *)v7, v8);
  v9 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8250;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ": ", 2uLL);
  }
  v13 = a2;
  v10 = sub_1C57611EC(a1 + 8, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v13);
  llvm::sampleprof::FunctionSamples::print((llvm::sampleprof::FunctionSamples *)(v10 + 56), this, 0);
  if (v12 < 0)
    operator delete(__p[0]);
}

_QWORD *sub_1C5AA5C64@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  if (*((_DWORD *)result + 8))
    return (_QWORD *)sub_1C5AAC640(result[2], result[3], 0);
  v3 = (const void *)*result;
  if (!*result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  v4 = result[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_13;
  }
  result = memmove(v2, v3, v4);
LABEL_13:
  *((_BYTE *)v2 + v4) = 0;
  return result;
}

void llvm::sampleprof::SampleProfileReader::dump(llvm::sampleprof::SampleProfileReader *this, llvm::raw_ostream *a2, __n128 a3)
{
  __n128 *v5;
  __n128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9[2];
  unint64_t v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  llvm::sampleprof::sortFuncProfiles((uint64_t)this + 8, &v11, a3);
  v5 = v11;
  v6 = v12;
  if (v11 != v12)
  {
    do
    {
      v7 = (__int128)*v5;
      v8 = (__int128)v5[1];
      v10 = v5[2].n128_u64[0];
      v9[0] = v7;
      v9[1] = v8;
      llvm::sampleprof::SampleProfileReader::dumpFunctionProfile((uint64_t)this, v9, a2);
      v5 += 3;
    }
    while (v5 != v6);
    v5 = v11;
  }
  if (v5)
  {
    v12 = v5;
    operator delete(v5);
  }
}

uint64_t llvm::sampleprof::SampleProfileReaderText::readImpl(const llvm::MemoryBuffer **this)
{
  const llvm::MemoryBuffer **v1;
  char v2;
  int v3;
  int v4;
  unsigned int v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  size_t v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  char *v64;
  size_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  size_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  size_t v82;
  _BYTE *v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  int v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  size_t v109;
  char *v110;
  unint64_t v111;
  _BYTE *v112;
  size_t v113;
  BOOL v114;
  size_t v115;
  size_t v116;
  size_t v117;
  size_t v118;
  char *v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  int v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  _BYTE *v129;
  int v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  unsigned int v140;
  unint64_t *v141;
  unint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  __int128 *p_dst;
  uint64_t v147;
  unint64_t *v148;
  unsigned int v149;
  unsigned __int8 *v150;
  size_t v151;
  unint64_t v152;
  char *v153;
  unsigned int v154;
  BOOL v155;
  unint64_t *v156;
  unint64_t v157;
  char *v158;
  unsigned int v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _OWORD *v164;
  unsigned int v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v177;
  const llvm::MemoryBuffer *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  const llvm::MemoryBuffer **v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  unsigned int v195;
  __int128 __dst;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 *v201;
  __int128 v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _BYTE v211[32];
  char v212;
  int v213;
  __int128 v214;
  __int128 *v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD v218[13];

  v1 = this;
  v218[10] = *MEMORY[0x1E0C80C00];
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v211, this[7], 1, 35);
  v216 = v218;
  v217 = 0xA00000000;
  v2 = byte_1ED81B3C8;
  *((_BYTE *)v1 + 128) = byte_1ED81B3C8;
  llvm::sampleprof::FunctionSamples::ProfileIsFS = v2;
  if (v212)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v185 = (uint64_t *)(v1 + 19);
    v191 = v1;
    v192 = (uint64_t)(v1 + 1);
    while (1)
    {
      v6 = v214;
      if (*((_QWORD *)&v214 + 1))
      {
        v7 = 0;
        while (*(_BYTE *)(v214 + v7) == 32)
        {
          if (*((_QWORD *)&v214 + 1) == ++v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v7 = -1;
      }
      if (*(_BYTE *)(v214 + v7) != 35)
      {
        if (*(_BYTE *)v214 == 32)
        {
          v188 = v4;
          v189 = v3;
          v190 = v5;
          v8 = 0;
          v193 = 0;
          v194 = 0;
          LODWORD(v9) = -1;
          v195 = 0;
          do
          {
            v10 = v8;
            v9 = (v9 + 1);
            v11 = *(unsigned __int8 *)(v214 + v9);
            ++v8;
          }
          while (v11 == 32);
          if (!(_DWORD)v9)
            goto LABEL_338;
          if (v11 == 33)
          {
            if (*((_QWORD *)&v214 + 1) >= v9)
              v12 = v9;
            else
              v12 = *((_QWORD *)&v214 + 1);
            v13 = v214 + v12;
            v14 = *((_QWORD *)&v214 + 1) - v12;
            if (v14 >= 0xD)
            {
              if (*(_QWORD *)v13 != 0x6365684347464321 || *(_QWORD *)(v13 + 5) != 0x3A6D75736B636568)
                goto LABEL_83;
              *(_QWORD *)&__dst = v13 + 13;
              *((_QWORD *)&__dst + 1) = v14 - 13;
              v135 = (unsigned __int8 *)sub_1C534E9D8((uint64_t *)&__dst, " \t\n\v\f\r", 6);
              if (v136)
              {
                v137 = 0;
                while (1)
                {
                  v138 = *v135;
                  if ((v138 - 48) >= 0xA)
                  {
                    if ((v138 - 97) >= 0x1A)
                    {
                      if ((v138 - 65) > 0x19)
                        goto LABEL_338;
                      v139 = -55;
                    }
                    else
                    {
                      v139 = -87;
                    }
                  }
                  else
                  {
                    v139 = -48;
                  }
                  v140 = v139 + v138;
                  if (v140 > 9)
                    break;
                  v62 = 10 * v137 + v140;
                  if (v137 > v62 / 0xA)
                    break;
                  v61 = 0;
                  v63 = 0;
                  LODWORD(v51) = 0;
                  v64 = 0;
                  v65 = 0;
                  v66 = 0;
                  ++v135;
                  LODWORD(v67) = 2;
                  v137 = v62;
                  --v136;
                  v1 = v191;
                  if (!v136)
                    goto LABEL_249;
                }
              }
            }
            else
            {
              if (v14 != 12)
                goto LABEL_338;
LABEL_83:
              if (*(_QWORD *)v13 == 0x7562697274744121 && *(_DWORD *)(v13 + 8) == 980641140)
              {
                *(_QWORD *)&__dst = v13 + 12;
                *((_QWORD *)&__dst + 1) = v14 - 12;
                v54 = (unsigned __int8 *)sub_1C534E9D8((uint64_t *)&__dst, " \t\n\v\f\r", 6);
                if (v55)
                {
                  v56 = 0;
                  while (1)
                  {
                    v57 = *v54;
                    if ((v57 - 48) >= 0xA)
                    {
                      if ((v57 - 97) >= 0x1A)
                      {
                        if ((v57 - 65) > 0x19)
                          goto LABEL_338;
                        v58 = -55;
                      }
                      else
                      {
                        v58 = -87;
                      }
                    }
                    else
                    {
                      v58 = -48;
                    }
                    v59 = v58 + v57;
                    if (v59 > 9)
                      break;
                    v60 = 10 * v56 + v59;
                    if (v56 > v60 / 0xA)
                      break;
                    ++v54;
                    v56 = 10 * v56 + v59;
                    if (!--v55)
                    {
                      if (v60 >= 0x100000000)
                        v61 = 0;
                      else
                        v61 = v60;
                      if (!HIDWORD(v60))
                      {
                        v62 = 0;
                        v63 = 0;
                        LODWORD(v51) = 0;
                        v64 = 0;
                        v65 = 0;
                        v66 = 0;
                        LODWORD(v67) = 2;
                        v1 = v191;
                        goto LABEL_249;
                      }
                      goto LABEL_338;
                    }
                  }
                }
              }
            }
            goto LABEL_338;
          }
          if (*((_QWORD *)&v214 + 1) && (v21 = memchr((void *)v214, 58, *((size_t *)&v214 + 1))) != 0)
            v22 = (uint64_t)v21 - v6;
          else
            v22 = -1;
          if (*((_QWORD *)&v6 + 1) >= v9)
            v36 = v9;
          else
            v36 = *((_QWORD *)&v6 + 1);
          if (*((_QWORD *)&v6 + 1) - v36 >= v22 - v9)
            v37 = v22 - v9;
          else
            v37 = *((_QWORD *)&v6 + 1) - v36;
          if (!v37)
            goto LABEL_338;
          v38 = (unsigned __int8 *)(v6 + v36);
          v39 = memchr((void *)(v6 + v36), 46, v37);
          if (!v39 || (v40 = v39 - v38, v39 - v38 == -1))
          {
            v68 = 0;
            v69 = *((_QWORD *)&v6 + 1) - v10;
            if (*((_QWORD *)&v6 + 1) < (unint64_t)v10)
              v69 = 0;
            if (v69 >= v22 - (unint64_t)v10)
              v69 = v22 - v10;
            v70 = -(uint64_t)v69;
            do
            {
              v71 = *v38;
              if ((v71 - 48) >= 0xA)
              {
                if ((v71 - 97) >= 0x1A)
                {
                  if ((v71 - 65) > 0x19)
                    goto LABEL_338;
                  v72 = -55;
                }
                else
                {
                  v72 = -87;
                }
              }
              else
              {
                v72 = -48;
              }
              v73 = v72 + v71;
              if (v73 > 9)
                goto LABEL_338;
              v51 = 10 * v68 + v73;
              if (v68 > v51 / 0xA)
                goto LABEL_338;
              ++v38;
              v68 = 10 * v68 + v73;
              v114 = __CFADD__(v70++, 1);
            }
            while (!v114);
            if (v51 >= 0x10000)
              goto LABEL_338;
            LODWORD(v186) = 0;
          }
          else
          {
            if (v37 >= v40)
              v41 = v39 - v38;
            else
              v41 = v37;
            if (!v41)
              goto LABEL_338;
            v42 = 0;
            v43 = v10;
            if (*((_QWORD *)&v6 + 1) < (unint64_t)v10)
              v43 = *((_QWORD *)&v6 + 1);
            v44 = *((_QWORD *)&v6 + 1) - v43;
            v45 = (unint64_t)&v39[-v6 - v43];
            if (v44 < v45)
              v45 = v44;
            if (v45 >= v22 - (unint64_t)v10)
              v45 = v22 - v10;
            v46 = -(uint64_t)v45;
            v47 = v38;
            do
            {
              v48 = *v47;
              if ((v48 - 48) >= 0xA)
              {
                if ((v48 - 97) >= 0x1A)
                {
                  if ((v48 - 65) > 0x19)
                    goto LABEL_338;
                  v49 = -55;
                }
                else
                {
                  v49 = -87;
                }
              }
              else
              {
                v49 = -48;
              }
              v50 = v49 + v48;
              if (v50 > 9)
                goto LABEL_338;
              v51 = 10 * v42 + v50;
              if (v42 > v51 / 0xA)
                goto LABEL_338;
              ++v47;
              v42 = 10 * v42 + v50;
              v114 = __CFADD__(v46++, 1);
            }
            while (!v114);
            if (HIDWORD(v51))
              goto LABEL_338;
            v74 = v37 >= v40 + 1 ? v40 + 1 : v37;
            v75 = v37 - v74;
            if (v37 == v74)
              goto LABEL_338;
            v76 = 0;
            v77 = &v38[v74];
            do
            {
              v78 = *v77;
              if ((v78 - 48) >= 0xA)
              {
                if ((v78 - 97) >= 0x1A)
                {
                  if ((v78 - 65) > 0x19)
                    goto LABEL_338;
                  v79 = -55;
                }
                else
                {
                  v79 = -87;
                }
              }
              else
              {
                v79 = -48;
              }
              v80 = v79 + v78;
              if (v80 > 9)
                goto LABEL_338;
              v186 = 10 * v76 + v80;
              if (v76 > v186 / 0xA)
                goto LABEL_338;
              ++v77;
              v76 = 10 * v76 + v80;
              --v75;
            }
            while (v75);
            if (HIDWORD(v186))
              goto LABEL_338;
          }
          if (*((_QWORD *)&v6 + 1) >= (unint64_t)(v22 + 2))
            v81 = v22 + 2;
          else
            v81 = *((_QWORD *)&v6 + 1);
          v64 = (char *)(v6 + v81);
          v82 = *((_QWORD *)&v6 + 1) - v81;
          if (*(unsigned __int8 *)(v6 + v81) - 48 < 0xA)
          {
            if (v82)
            {
              v83 = memchr((void *)(v6 + v81), 32, *((_QWORD *)&v6 + 1) - v81);
              if (!v83 || (v84 = v83 - v64, v83 - v64 == -1))
              {
                v101 = 0;
                v102 = v81 - *((_QWORD *)&v6 + 1);
                v103 = (unsigned __int8 *)(v6 + v81);
                while (1)
                {
                  v104 = *v103;
                  if ((v104 - 48) >= 0xA)
                  {
                    if ((v104 - 97) >= 0x1A)
                    {
                      if ((v104 - 65) > 0x19)
                        goto LABEL_338;
                      v105 = -55;
                    }
                    else
                    {
                      v105 = -87;
                    }
                  }
                  else
                  {
                    v105 = -48;
                  }
                  v106 = v105 + v104;
                  if (v106 > 9)
                    break;
                  v66 = 10 * v101 + v106;
                  if (v101 > v66 / 0xA)
                    break;
                  ++v103;
                  v101 = 10 * v101 + v106;
                  v114 = __CFADD__(v102++, 1);
                  if (v114)
                  {
                    v84 = -1;
LABEL_198:
                    if (v84 == -1)
                    {
LABEL_246:
                      v64 = 0;
                      v65 = 0;
                      LODWORD(v67) = 1;
                      goto LABEL_247;
                    }
                    if (v82 >= v84)
                      v107 = v84;
                    else
                      v107 = v82;
                    if (v82 <= v84)
                    {
LABEL_206:
                      v108 = -1;
                    }
                    else
                    {
                      v108 = 0;
                      v109 = v82 - v107;
                      v110 = &v64[v107];
                      while (v110[v108] == 32)
                      {
                        if (v109 == ++v108)
                          goto LABEL_206;
                      }
                    }
                    v111 = v108 + v84;
                    if (v82 < v111)
                      v111 = v82;
                    v82 -= v111;
                    if (v82)
                    {
                      v64 += v111;
                      v112 = memchr(v64, 58, v82);
                      v113 = v112 - v64;
                      v114 = v112 && (unint64_t)(v112 - v64 + 1) >= 2;
                      if (v114)
                      {
                        do
                        {
                          v115 = v113 + 1;
                          if (v82 >= v113 + 1)
                            v116 = v113 + 1;
                          else
                            v116 = v82;
                          v117 = v82 - v116;
                          if (v82 >= v113)
                            v118 = v113;
                          else
                            v118 = v82;
                          v119 = &v64[v116];
                          *(_QWORD *)&__dst = v64;
                          *((_QWORD *)&__dst + 1) = v118;
                          if (v82 <= v115 || (v120 = memchr(&v64[v116], 32, v82 - v116)) == 0 || v120 - v119 == -1)
                            v84 = v82;
                          else
                            v84 = v120 - v119 + v115;
                          v121 = v84 + ~v113;
                          if (v117 < v121)
                            v121 = v117;
                          if (v121)
                          {
                            v122 = 0;
                            v123 = -(uint64_t)v121;
                            v124 = v119;
                            while (1)
                            {
                              v125 = *v124;
                              if ((v125 - 48) >= 0xA)
                              {
                                if ((v125 - 97) >= 0x1A)
                                {
                                  if ((v125 - 65) > 0x19)
                                    break;
                                  v126 = -55;
                                }
                                else
                                {
                                  v126 = -87;
                                }
                              }
                              else
                              {
                                v126 = -48;
                              }
                              v127 = v126 + v125;
                              if (v127 > 9)
                                break;
                              v128 = 10 * v122 + v127;
                              if (v122 > v128 / 0xA)
                                break;
                              ++v124;
                              v122 = 10 * v122 + v127;
                              v114 = __CFADD__(v123++, 1);
                              if (v114)
                              {
                                sub_1C630D4EC((uint64_t *)&v193, (const void **)&__dst)[2] = v128;
                                if (v84 != v82)
                                  goto LABEL_198;
                                goto LABEL_246;
                              }
                            }
                          }
                          if (v82 <= v115)
                            break;
                          v129 = memchr(v119, 58, v117);
                          if (!v129)
                            break;
                          v113 = v129 - v119 + v115;
                        }
                        while (v129 - v119 != -1);
                      }
                    }
                    goto LABEL_338;
                  }
                }
              }
              else
              {
                if (v82 >= v84)
                  v85 = v83 - v64;
                else
                  v85 = *((_QWORD *)&v6 + 1) - v81;
                if (v85)
                {
                  v86 = 0;
                  v87 = -v85;
                  v88 = (unsigned __int8 *)(v6 + v81);
                  while (1)
                  {
                    v89 = *v88;
                    if ((v89 - 48) >= 0xA)
                    {
                      if ((v89 - 97) >= 0x1A)
                      {
                        if ((v89 - 65) > 0x19)
                          goto LABEL_338;
                        v90 = -55;
                      }
                      else
                      {
                        v90 = -87;
                      }
                    }
                    else
                    {
                      v90 = -48;
                    }
                    v91 = v90 + v89;
                    if (v91 > 9)
                      break;
                    v66 = 10 * v86 + v91;
                    if (v86 > v66 / 0xA)
                      break;
                    ++v88;
                    v86 = 10 * v86 + v91;
                    v114 = __CFADD__(v87++, 1);
                    if (v114)
                      goto LABEL_198;
                  }
                }
              }
            }
            goto LABEL_338;
          }
          v92 = (unsigned __int8 *)(v6 + *((_QWORD *)&v6 + 1) - 1);
          v93 = *((_QWORD *)&v6 + 1) - v81;
          while (v93)
          {
            --v93;
            v94 = *v92--;
            if (v94 == 58)
              goto LABEL_168;
          }
          v93 = -1;
LABEL_168:
          if (v82 >= v93 + 1)
            v95 = v93 + 1;
          else
            v95 = *((_QWORD *)&v6 + 1) - v81;
          v67 = v82 - v95;
          if (v82 == v95)
          {
LABEL_338:
            v177 = v213;
            LOWORD(v208) = 1283;
            *(_QWORD *)&v206 = "Expected 'NUM[.NUM]: NUM[ mangled_name:NUM]*', found ";
            v207 = v214;
            v179 = (uint64_t)v191[6];
            v178 = v191[7];
          }
          else
          {
            v96 = 0;
            v97 = &v64[v95];
            do
            {
              v98 = *v97;
              if ((v98 - 48) >= 0xA)
              {
                if ((v98 - 97) >= 0x1A)
                {
                  if ((v98 - 65) > 0x19)
                    goto LABEL_338;
                  v99 = -55;
                }
                else
                {
                  v99 = -87;
                }
              }
              else
              {
                v99 = -48;
              }
              v100 = v99 + v98;
              if (v100 > 9)
                goto LABEL_338;
              v66 = 10 * v96 + v100;
              if (v96 > v66 / 0xA)
                goto LABEL_338;
              ++v97;
              v96 = 10 * v96 + v100;
              --v67;
            }
            while (v67);
            if (v82 >= v93)
              v65 = v93;
            else
              v65 = *((_QWORD *)&v6 + 1) - v81;
LABEL_247:
            v1 = v191;
            v63 = v186;
            if (v188 != (_DWORD)v9)
            {
              v62 = 0;
              v61 = 0;
LABEL_249:
              if (*((_BYTE *)v1 + 128))
              {
                v130 = *((_DWORD *)v1 + 36);
                if (v130 == 31)
                  v131 = -1;
                else
                  v131 = ~(-1 << (v130 + 1));
              }
              else
              {
                v131 = -1;
              }
              v132 = v217;
              if (v217 > v9)
              {
                LODWORD(v217) = v9;
                v132 = v9;
              }
              if ((_DWORD)v67 != 2)
              {
                v133 = v131 & v63;
                if ((_DWORD)v67)
                {
                  v5 = v190;
                  v141 = &v193[3 * v195];
                  if ((_DWORD)v194)
                  {
                    if (v195)
                    {
                      v168 = 24 * v195;
                      v142 = v193;
                      while (*v142 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        v142 += 3;
                        v168 -= 24;
                        if (!v168)
                          goto LABEL_283;
                      }
                    }
                    else
                    {
                      v142 = v193;
                    }
                  }
                  else
                  {
LABEL_283:
                    v142 = &v193[3 * v195];
                  }
                  v147 = v216[v132 - 1];
                  v148 = &v193[3 * v195];
                  v184 = v147;
                  if (v142 != v148)
                  {
                    v187 = v147 + 72;
                    do
                    {
                      v149 = v5;
                      v150 = (unsigned __int8 *)*v142;
                      v151 = v142[1];
                      v152 = v142[2];
                      *(_QWORD *)&v206 = __PAIR64__(v133, v51);
                      *(_QWORD *)&__dst = &v206;
                      v153 = sub_1C630CE7C(v187, (unsigned int *)&v206, (_QWORD **)&__dst);
                      v154 = sub_1C5AA0504((uint64_t)(v153 + 40), v150, v151, v152, 1uLL);
                      if (v154)
                        v155 = v149 == 0;
                      else
                        v155 = 0;
                      if (v155)
                        v5 = v154;
                      else
                        v5 = v149;
                      v156 = v142 + 3;
                      while (v156 != v141)
                      {
                        v157 = *v156;
                        v156 += 3;
                        if (v157 <= 0xFFFFFFFFFFFFFFFDLL)
                        {
                          v142 = v156 - 3;
                          goto LABEL_303;
                        }
                      }
                      v142 = v141;
LABEL_303:
                      ;
                    }
                    while (v142 != v148);
                  }
                  *(_QWORD *)&v206 = __PAIR64__(v133, v51);
                  *(_QWORD *)&__dst = &v206;
                  v158 = sub_1C630CE7C(v184 + 72, (unsigned int *)&v206, (_QWORD **)&__dst);
                  v159 = sub_1C5AA0480((uint64_t *)v158 + 5, v66, 1uLL);
                  if (v159)
                    v160 = v5 == 0;
                  else
                    v160 = 0;
                  if (v160)
                    v5 = v159;
                  v1 = v191;
                  v3 = v189;
                  v4 = v188;
                  goto LABEL_267;
                }
                v143 = v216[v132 - 1];
                LODWORD(v215) = v51;
                HIDWORD(v215) = v131 & v63;
                *(_QWORD *)&__dst = &v215;
                v144 = sub_1C62A19D0(v143 + 96, (unsigned int *)&v215, (uint64_t)&std::piecewise_construct, (uint64_t **)&__dst);
                v5 = v190;
                if (v65 >= 0x7FFFFFFFFFFFFFF8)
                  abort();
                v145 = v144;
                if (v65 >= 0x17)
                {
                  v161 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v65 | 7) != 0x17)
                    v161 = v65 | 7;
                  v162 = v161 + 1;
                  p_dst = (__int128 *)operator new(v161 + 1);
                  v163 = v162 | 0x8000000000000000;
                  v5 = v190;
                  *((_QWORD *)&__dst + 1) = v65;
                  *(_QWORD *)&v197 = v163;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  BYTE7(v197) = v65;
                  p_dst = &__dst;
                  if (!v65)
                  {
LABEL_314:
                    *((_BYTE *)p_dst + v65) = 0;
                    *(_QWORD *)&v206 = &__dst;
                    v164 = sub_1C630A88C((uint64_t)(v145 + 5), (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v206);
                    if (SBYTE7(v197) < 0)
                      operator delete((void *)__dst);
                    *((_QWORD *)v164 + 9) = v64;
                    *((_QWORD *)v164 + 10) = v65;
                    *((_QWORD *)v164 + 11) = 0;
                    *((_QWORD *)v164 + 12) = 0;
                    *((_DWORD *)v164 + 26) = 0;
                    v165 = sub_1C5753CE8((uint64_t)v164 + 56, v66, 1uLL);
                    if (v165)
                      v166 = v5 == 0;
                    else
                      v166 = 0;
                    if (v166)
                      v5 = v165;
                    v167 = v217;
                    if (v217 >= (unint64_t)HIDWORD(v217))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v217 + 1, 8);
                      v167 = v217;
                    }
                    v1 = v191;
                    v3 = v189;
                    v4 = 0;
                    v216[v167] = (char *)v164 + 56;
                    LODWORD(v217) = v217 + 1;
LABEL_267:
                    MEMORY[0x1CAA32FB4](v193, 8);
                    goto LABEL_268;
                  }
                }
                memmove(p_dst, v64, v65);
                goto LABEL_314;
              }
              v134 = v216[v132 - 1];
              if (v62)
              {
                *(_QWORD *)(v134 + 8) = v62;
                v3 = v189;
                if ((_DWORD)v9 == 1)
                  v3 = v189 + 1;
              }
              else
              {
                v3 = v189;
              }
              *(_DWORD *)(v134 + 52) = v61;
              if ((v61 & 2) != 0)
                *((_BYTE *)v1 + 122) = 1;
              v4 = v9;
              v5 = v190;
              goto LABEL_267;
            }
            v177 = v213;
            LOWORD(v208) = 1283;
            *(_QWORD *)&v206 = "Found non-metadata after metadata: ";
            v207 = v214;
            v179 = (uint64_t)v191[6];
            v178 = v191[7];
          }
          v180 = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v178 + 16))(v178);
          DWORD2(__dst) = 8;
          BYTE12(__dst) = 0;
          *(_QWORD *)&__dst = &unk_1E814E700;
          *(_QWORD *)&v197 = v180;
          *((_QWORD *)&v197 + 1) = v181;
          LODWORD(v198) = v177;
          *((_QWORD *)&v198 + 1) = &v206;
          llvm::LLVMContext::diagnose(v179, (const llvm::DiagnosticInfo *)&__dst);
          if (!atomic_load(qword_1EF8F7270))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
          MEMORY[0x1CAA32FB4](v193, 8);
          v171 = 5;
          goto LABEL_342;
        }
        v209 = 0;
        v210 = 0;
        v193 = 0;
        v194 = 0;
        __dst = v214;
        if (!sub_1C5AA6FA0(&__dst, &v193, &v210, &v209))
        {
          v172 = v213;
          LOWORD(v208) = 1283;
          *(_QWORD *)&v206 = "Expected 'mangled_name:NUM:NUM', found ";
          v207 = v6;
          v173 = (uint64_t)v1[6];
          v174 = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v1[7] + 16))(v1[7]);
          DWORD2(__dst) = 8;
          BYTE12(__dst) = 0;
          *(_QWORD *)&__dst = &unk_1E814E700;
          *(_QWORD *)&v197 = v174;
          *((_QWORD *)&v197 + 1) = v175;
          LODWORD(v198) = v172;
          *((_QWORD *)&v198 + 1) = &v206;
          llvm::LLVMContext::diagnose(v173, (const llvm::DiagnosticInfo *)&__dst);
          if (!atomic_load(qword_1EF8F7270))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
          v171 = 5;
          goto LABEL_342;
        }
        sub_1C630CDA4((uint64_t)&v206, v193, v194, v185);
        if ((_DWORD)v208)
          ++*((_DWORD *)v1 + 31);
        v200 = 0;
        v202 = 0u;
        v198 = 0u;
        v199 = 0u;
        __dst = 0u;
        v197 = 0u;
        v204 = 0;
        v205 = 0;
        v201 = &v202;
        v203 = &v204;
        v215 = &v206;
        v15 = sub_1C57611EC(v192, (uint64_t)&v206, (uint64_t)&std::piecewise_construct, &v215);
        v16 = __dst;
        *(_OWORD *)(v15 + 72) = v197;
        v17 = v199;
        *(_OWORD *)(v15 + 88) = v198;
        *(_OWORD *)(v15 + 104) = v17;
        *((_QWORD *)v15 + 15) = v200;
        *(_OWORD *)(v15 + 56) = v16;
        v18 = v15 + 136;
        sub_1C6309824((uint64_t)(v15 + 128), *((_QWORD **)v15 + 17));
        v19 = v202;
        *((_QWORD *)v15 + 16) = v201;
        *((_QWORD *)v15 + 17) = v19;
        v20 = *((_QWORD *)&v202 + 1);
        *((_QWORD *)v15 + 18) = *((_QWORD *)&v202 + 1);
        if (v20)
        {
          *(_QWORD *)(v19 + 16) = v18;
          v201 = &v202;
          v202 = 0uLL;
        }
        else
        {
          *((_QWORD *)v15 + 16) = v18;
        }
        v24 = (_QWORD *)*((_QWORD *)v15 + 20);
        v23 = v15 + 160;
        sub_1C63097D8((uint64_t)(v23 - 1), v24);
        v25 = v204;
        *(v23 - 1) = v203;
        *v23 = v25;
        v26 = v205;
        v23[1] = v205;
        if (v26)
        {
          v25[2] = v23;
          v25 = 0;
          v203 = &v204;
          v204 = 0;
          v205 = 0;
        }
        else
        {
          *(v23 - 1) = v23;
        }
        sub_1C63097D8((uint64_t)&v203, v25);
        sub_1C6309824((uint64_t)&v201, (_QWORD *)v202);
        *(_QWORD *)&__dst = &v206;
        v27 = sub_1C57611EC(v192, (uint64_t)&v206, (uint64_t)&std::piecewise_construct, (__int128 **)&__dst);
        v28 = (uint64_t)(v27 + 56);
        v29 = v207;
        *(_OWORD *)(v27 + 72) = v206;
        *(_OWORD *)(v27 + 88) = v29;
        *((_QWORD *)v27 + 13) = v208;
        v30 = sub_1C5753CE8((uint64_t)(v27 + 56), v210, 1uLL);
        if (v30)
          v31 = v5 == 0;
        else
          v31 = 0;
        if (v31)
          v32 = v30;
        else
          v32 = v5;
        v33 = sub_1C5753D6C(v28, v209, 1uLL);
        if (v32)
          v34 = 1;
        else
          v34 = v33 == 0;
        if (v34)
          v5 = v32;
        else
          v5 = v33;
        LODWORD(v217) = 0;
        if (HIDWORD(v217))
        {
          v35 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, 1uLL, 8);
          v35 = v217;
        }
        v4 = 0;
        v216[v35] = v28;
        LODWORD(v217) = v217 + 1;
      }
LABEL_268:
      llvm::line_iterator::advance((uint64_t)v211);
      if (!v212)
        goto LABEL_330;
    }
  }
  v5 = 0;
  v3 = 0;
LABEL_330:
  v169 = *((_DWORD *)v1 + 31) != 0;
  *((_BYTE *)v1 + 121) = v169;
  *((_BYTE *)v1 + 120) = v3 != 0;
  llvm::sampleprof::FunctionSamples::ProfileIsProbeBased = v3 != 0;
  llvm::sampleprof::FunctionSamples::ProfileIsCSFlat = v169;
  llvm::sampleprof::FunctionSamples::ProfileIsCSNested = *((_BYTE *)v1 + 122);
  if (!v5)
    llvm::sampleprof::SampleProfileReader::computeSummary((llvm::sampleprof::SampleProfileReader *)v1);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v171 = v5;
LABEL_342:
  if (v216 != v218)
    free(v216);
  return v171;
}

uint64_t sub_1C5AA6FA0(_QWORD *a1, _QWORD *a2, unint64_t *a3, unint64_t *a4)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;

  v4 = (_BYTE *)*a1;
  if (*(_BYTE *)*a1 != 32)
  {
    v6 = a1[1];
    v7 = v6 - 1;
    v8 = v6;
    while (1)
    {
      v9 = v8;
      v10 = v7;
      if (!v8)
        break;
      --v8;
      --v7;
      if (v4[v9 - 1] == 58)
        goto LABEL_8;
    }
    v8 = -1;
LABEL_8:
    if (v6 >= v8 - 1)
      v11 = v8 - 1;
    else
      v11 = a1[1];
    while (1)
    {
      v12 = v11;
      if (!v11)
        break;
      --v11;
      if (v4[v12 - 1] == 58)
        goto LABEL_15;
    }
    v11 = -1;
LABEL_15:
    if (v6 >= v11)
      v6 = v11;
    *a2 = v4;
    a2[1] = v6;
    v13 = a1[1];
    if (v13 >= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = a1[1];
    v15 = v13 - v14;
    if (v13 - v14 >= v8 + ~v11)
      v15 = v8 + ~v11;
    if (v15)
    {
      v16 = 0;
      v17 = (_BYTE *)*a1;
      v18 = v10 - v12;
      v19 = (unsigned __int8 *)(*a1 + v14);
      v20 = v13 >= v12;
      v21 = v13 - v12;
      if (!v20)
        v21 = 0;
      if (v18 < v21)
        v21 = v18;
      v22 = -(uint64_t)v21;
      while (1)
      {
        v23 = *v19;
        if ((v23 - 48) >= 0xA)
        {
          if ((v23 - 97) >= 0x1A)
          {
            if ((v23 - 65) > 0x19)
              return 0;
            v24 = -55;
          }
          else
          {
            v24 = -87;
          }
        }
        else
        {
          v24 = -48;
        }
        v25 = v24 + v23;
        if (v25 > 9)
          break;
        v26 = 10 * v16 + v25;
        if (v16 > v26 / 0xA)
          break;
        ++v19;
        v16 = v26;
        v20 = __CFADD__(v22++, 1);
        if (v20)
        {
          *a3 = v26;
          if (v13 >= v8 + 1)
            v27 = v8 + 1;
          else
            v27 = v13;
          if (v13 != v27)
          {
            v28 = 0;
            v29 = &v17[v27];
            if (v13 < v9)
              v9 = v13;
            v30 = v9 - v13;
            while (1)
            {
              v31 = *v29;
              if ((v31 - 48) >= 0xA)
              {
                if ((v31 - 97) >= 0x1A)
                {
                  if ((v31 - 65) > 0x19)
                    return 0;
                  v32 = -55;
                }
                else
                {
                  v32 = -87;
                }
              }
              else
              {
                v32 = -48;
              }
              v33 = v32 + v31;
              if (v33 > 9)
                break;
              v34 = 10 * v28 + v33;
              if (v28 > v34 / 0xA)
                break;
              ++v29;
              v28 = v34;
              v20 = __CFADD__(v30++, 1);
              if (v20)
              {
                *a4 = v34;
                return 1;
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::sampleprof::SampleProfileReader::computeSummary(llvm::sampleprof::SampleProfileReader *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = operator new(0x40uLL);
  *v2 = xmmword_1C86680E4;
  v2[1] = unk_1C86680F4;
  v2[2] = xmmword_1C8668104;
  v2[3] = unk_1C8668114;
  v10 = v11;
  v11[0] = 0;
  v11[1] = 0;
  v11[2] = v2;
  v11[3] = v2 + 4;
  v11[4] = v2 + 4;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  llvm::SampleProfileSummaryBuilder::computeSummaryForProfiles(&v10, (uint64_t)this + 8, &v9);
  v5 = *((_QWORD *)this + 13);
  v4 = (uint64_t *)((char *)this + 104);
  v3 = v5;
  v6 = v9;
  v9 = 0;
  *v4 = v6;
  if (v5)
  {
    sub_1C4E5DDC4((uint64_t)v4, v3);
    v7 = v9;
    v9 = 0;
    if (v7)
      sub_1C4E5DDC4((uint64_t)&v9, v7);
  }
  return sub_1C6308954((uint64_t)&v10);
}

uint64_t llvm::sampleprof::SampleProfileReaderBinary::readString@<X0>(llvm::sampleprof::SampleProfileReaderBinary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  std::string __p;
  std::string *p_p;
  __int16 v13;
  std::error_code v14;
  void *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::string **p_p_p;

  std::system_category();
  v4 = *((_QWORD *)this + 19);
  if (v4)
    result = strlen(*((const char **)this + 19));
  else
    result = 0;
  if ((unint64_t)(v4 + result + 1) <= *((_QWORD *)this + 20))
  {
    *((_QWORD *)this + 19) = result + v4 + 1;
    v10 = *(_BYTE *)(a2 + 16) & 0xFE;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    *(_QWORD *)&v14.__val_ = 4;
    v14.__cat_ = (const std::error_category *)qword_1EF8F7270[0];
    std::error_code::message(&__p, &v14);
    v13 = 260;
    p_p = &__p;
    v7 = *((_QWORD *)this + 6);
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
    v16 = 8;
    v17 = 0;
    v15 = &unk_1E814E700;
    v18 = v8;
    v19 = v9;
    v20 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v7, (const llvm::DiagnosticInfo *)&v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = *(_QWORD *)&v14.__val_;
    result = (uint64_t)v14.__cat_;
    v10 = *(_BYTE *)(a2 + 16) | 1;
  }
  *(_BYTE *)(a2 + 16) = v10;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

__n128 llvm::sampleprof::SampleProfileReaderExtBinaryBase::readStringFromTable@<Q0>(char ***this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  std::string *v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  std::string *v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  std::string v34;
  _QWORD v35[5];
  unint64_t __val[2];
  char v37;
  _QWORD v38[2];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 376))
  {
    llvm::sampleprof::SampleProfileReaderBinary::readStringFromTable((llvm::sampleprof::SampleProfileReaderBinary *)this, a2);
    return result;
  }
  sub_1C630AA90((uint64_t)v38, (uint64_t)this, this + 21);
  if ((v39 & 1) != 0)
  {
    v5 = v38[0];
    if (LODWORD(v38[0]))
    {
      v6 = v38[1];
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v6;
      return result;
    }
  }
  else
  {
    std::system_category();
    LODWORD(v5) = v38[0];
  }
  v7 = (__n128 *)&this[21][2 * v5];
  if (!v7->n128_u64[1])
  {
    v8 = this[19];
    this[19] = &this[48][v5];
    sub_1C5AA76AC((uint64_t)__val, (uint64_t)this);
    if ((v37 & 1) != 0)
    {
      v9 = __val[0];
      if (LODWORD(__val[0]))
      {
        v10 = __val[1];
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = v10;
        return result;
      }
    }
    else
    {
      std::system_category();
      v9 = __val[0];
    }
    v11 = this[49];
    std::to_string(&v34, v9);
    v12 = (unint64_t)v11[1];
    v13 = (unint64_t)v11[2];
    if (v12 >= v13)
    {
      v15 = *v11;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)*v11) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v15) >> 3) > v17)
        v17 = 0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3) >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v35[4] = v11 + 2;
      if (v18)
      {
        if (v18 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v19 = (char *)operator new(24 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (std::string *)&v19[24 * v16];
      *v20 = v34;
      memset(&v34, 0, sizeof(v34));
      if ((char *)v12 == v15)
      {
        v23 = v12;
        v21 = &v19[24 * v16];
      }
      else
      {
        v21 = &v19[24 * v16];
        do
        {
          v22 = *(_OWORD *)(v12 - 24);
          *((_QWORD *)v21 - 1) = *(_QWORD *)(v12 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(_QWORD *)(v12 - 16) = 0;
          *(_QWORD *)(v12 - 8) = 0;
          *(_QWORD *)(v12 - 24) = 0;
          v12 -= 24;
        }
        while ((char *)v12 != v15);
        v23 = (unint64_t)*v11;
        v12 = (unint64_t)v11[1];
        v13 = (unint64_t)v11[2];
      }
      v24 = v20 + 1;
      *v11 = v21;
      v35[0] = v23;
      v35[1] = v23;
      v11[1] = (char *)&v20[1];
      v35[2] = v12;
      v11[2] = &v19[24 * v18];
      v35[3] = v13;
      sub_1C4D868F0((uint64_t)v35);
      v25 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
      v11[1] = (char *)v24;
      if (v25 < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
    else
    {
      v14 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)&v34.__r_.__value_.__l + 2);
      *(_OWORD *)v12 = v14;
      v11[1] = (char *)(v12 + 24);
    }
    v26 = this[49][1];
    v29 = *((_QWORD *)v26 - 3);
    v27 = (unint64_t)(v26 - 24);
    v28 = v29;
    v30 = *(_BYTE *)(v27 + 23);
    v31 = v30;
    if (v30 >= 0)
      v28 = v27;
    v32 = *(_QWORD *)(v27 + 8);
    v33 = v30 & 0x7F;
    if (v31 >= 0)
      v32 = v33;
    v7->n128_u64[0] = v28;
    v7->n128_u64[1] = v32;
    this[19] = v8;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  result = *v7;
  *(__n128 *)a2 = *v7;
  return result;
}

void sub_1C5AA76AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  std::string *p_p;
  __int16 v13;
  std::error_code v14;
  void *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::string **p_p_p;

  std::system_category();
  v4 = *(uint64_t **)(a2 + 152);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) <= *(_QWORD *)(a2 + 160))
  {
    v10 = *v4;
    *(_QWORD *)(a2 + 152) = v5;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v10;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    *(_QWORD *)&v14.__val_ = 4;
    v14.__cat_ = (const std::error_category *)qword_1EF8F7270[0];
    std::error_code::message(&__p, &v14);
    v13 = 260;
    p_p = &__p;
    v7 = *(_QWORD *)(a2 + 48);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 16))(*(_QWORD *)(a2 + 56));
    v16 = 8;
    v17 = 0;
    v15 = &unk_1E814E700;
    v18 = v8;
    v19 = v9;
    v20 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v7, (const llvm::DiagnosticInfo *)&v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(std::error_code *)a1 = v14;
  }
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readProfile(llvm::sampleprof::SampleProfileReaderBinary *this, llvm::sampleprof::FunctionSamples *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t Profile;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int i;
  unsigned __int8 *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  uint64_t *v24;
  size_t v25;
  uint64_t *v26;
  const void *v27;
  uint64_t *p_dst;
  size_t v29;
  size_t v30;
  _OWORD *v31;
  int v34;
  unsigned int v35[2];
  unsigned int *v36;
  uint64_t **v37;
  char v38;
  unsigned int **__dst;
  size_t v40;
  unint64_t v41;
  size_t __len[2];
  char v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7D28((uint64_t)&v52, (uint64_t)this);
  if ((v53 & 1) != 0)
  {
    v4 = v52;
    v5 = v52;
    if ((_DWORD)v52)
    {
      v6 = HIDWORD(v52);
      return v5 | (v6 << 32);
    }
  }
  else
  {
    std::system_category();
    v4 = v52;
  }
  sub_1C5753CE8((uint64_t)a2, v4, 1uLL);
  sub_1C5AA7EAC((uint64_t)&v50, (uint64_t)this);
  if ((v51 & 1) != 0)
  {
    v7 = v50;
    if ((_DWORD)v50)
    {
      v6 = HIDWORD(v50);
      LODWORD(Profile) = v50;
      goto LABEL_73;
    }
  }
  else
  {
    std::system_category();
    v7 = v50;
  }
  if (v7)
  {
    v9 = 0;
    do
    {
      sub_1C5AA7D28((uint64_t)&v48, (uint64_t)this);
      if ((v49 & 1) != 0)
      {
        v10 = v48;
        v6 = HIDWORD(v48);
        if ((_DWORD)v48)
        {
          LODWORD(Profile) = v48;
          goto LABEL_73;
        }
      }
      else
      {
        std::system_category();
        v6 = 0;
        v10 = v48;
      }
      if ((v10 & 0xFFFF0000) != 0)
      {
        std::system_category();
        LODWORD(Profile) = 0;
        goto LABEL_73;
      }
      sub_1C5AA7D28((uint64_t)&v46, (uint64_t)this);
      if ((v47 & 1) != 0)
      {
        LODWORD(Profile) = v46;
        if ((_DWORD)v46)
        {
          v6 = HIDWORD(v46);
          goto LABEL_73;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1C5AA7D28((uint64_t)&v44, (uint64_t)this);
      if ((v45 & 1) != 0)
      {
        LODWORD(Profile) = v44;
        if ((_DWORD)v44)
        {
          v6 = HIDWORD(v44);
          goto LABEL_73;
        }
      }
      else
      {
        std::system_category();
      }
      sub_1C5AA7EAC((uint64_t)__len, (uint64_t)this);
      if ((v43 & 1) != 0)
      {
        Profile = __len[0];
        if (LODWORD(__len[0]))
          goto LABEL_72;
      }
      else
      {
        std::system_category();
      }
      v34 = v9;
      if (*((_BYTE *)this + 128))
      {
        v11 = *((_DWORD *)this + 36);
        if (v11 == 31)
          v12 = -1;
        else
          v12 = ~(-1 << (v11 + 1));
      }
      else
      {
        v12 = -1;
      }
      v13 = v12 & v46;
      for (i = __len[0]; i; --i)
      {
        (*(void (**)(unsigned int ***__return_ptr, llvm::sampleprof::SampleProfileReaderBinary *))(*(_QWORD *)this + 104))(&__dst, this);
        if ((v41 & 1) != 0)
        {
          Profile = (unint64_t)__dst;
          if ((_DWORD)__dst)
            goto LABEL_72;
        }
        else
        {
          std::system_category();
        }
        sub_1C5AA7D28((uint64_t)&v37, (uint64_t)this);
        if ((v38 & 1) != 0)
        {
          Profile = (unint64_t)v37;
          if ((_DWORD)v37)
            goto LABEL_72;
        }
        else
        {
          std::system_category();
          Profile = (unint64_t)v37;
        }
        v15 = (unsigned __int8 *)__dst;
        v16 = v40;
        v35[0] = v10;
        v35[1] = v13;
        v36 = v35;
        v17 = sub_1C630CE7C((uint64_t)a2 + 72, v35, (_QWORD **)&v36);
        sub_1C5AA0504((uint64_t)(v17 + 40), v15, v16, Profile, 1uLL);
      }
      v18 = v44;
      v37 = (uint64_t **)__PAIR64__(v13, v10);
      __dst = (unsigned int **)&v37;
      v19 = sub_1C630CE7C((uint64_t)a2 + 72, (unsigned int *)&v37, &__dst);
      sub_1C5AA0480((uint64_t *)v19 + 5, v18, 1uLL);
      v9 = v34 + 1;
    }
    while (v34 + 1 != v7);
  }
  sub_1C5AA7EAC((uint64_t)&v48, (uint64_t)this);
  if ((v49 & 1) != 0)
  {
    Profile = v48;
    if ((_DWORD)v48)
    {
LABEL_72:
      v6 = HIDWORD(Profile);
      goto LABEL_73;
    }
  }
  else
  {
    std::system_category();
    LODWORD(Profile) = v48;
  }
  if ((_DWORD)Profile)
  {
    v20 = 0;
    v21 = (char *)a2 + 96;
    while (1)
    {
      sub_1C5AA7D28((uint64_t)&v46, (uint64_t)this);
      if ((v47 & 1) != 0)
      {
        Profile = v46;
        if ((_DWORD)v46)
          goto LABEL_72;
      }
      else
      {
        std::system_category();
      }
      sub_1C5AA7D28((uint64_t)&v44, (uint64_t)this);
      if ((v45 & 1) != 0)
      {
        Profile = v44;
        if ((_DWORD)v44)
          goto LABEL_72;
      }
      else
      {
        std::system_category();
      }
      (*(void (**)(size_t *__return_ptr, llvm::sampleprof::SampleProfileReaderBinary *))(*(_QWORD *)this
                                                                                                  + 104))(__len, this);
      if ((v43 & 1) != 0)
      {
        Profile = __len[0];
        if (LODWORD(__len[0]))
          goto LABEL_72;
      }
      else
      {
        std::system_category();
      }
      if (*((_BYTE *)this + 128))
      {
        v23 = *((_DWORD *)this + 36);
        if (v23 == 31)
          v22 = -1;
        else
          v22 = ~(-1 << (v23 + 1));
      }
      else
      {
        v22 = -1;
      }
      LODWORD(v36) = v46;
      HIDWORD(v36) = v22 & v44;
      __dst = &v36;
      v24 = sub_1C62A19D0((uint64_t)v21, (unsigned int *)&v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&__dst);
      v25 = __len[1];
      if (__len[1] >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v26 = v24;
      v27 = (const void *)__len[0];
      if (__len[1] >= 0x17)
        break;
      HIBYTE(v41) = __len[1];
      p_dst = (uint64_t *)&__dst;
      if (__len[1])
        goto LABEL_65;
LABEL_66:
      *((_BYTE *)p_dst + v25) = 0;
      v37 = (uint64_t **)&__dst;
      v31 = sub_1C630A88C((uint64_t)(v26 + 5), (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v37);
      if (SHIBYTE(v41) < 0)
        operator delete(__dst);
      *(_OWORD *)((char *)v31 + 72) = *(_OWORD *)__len;
      *((_QWORD *)v31 + 11) = 0;
      *((_QWORD *)v31 + 12) = 0;
      *((_DWORD *)v31 + 26) = 0;
      Profile = llvm::sampleprof::SampleProfileReaderBinary::readProfile(this, (llvm::sampleprof::FunctionSamples *)((char *)v31 + 56));
      if ((_DWORD)Profile)
        goto LABEL_72;
      if (++v20 >= v48)
        goto LABEL_75;
    }
    v29 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[1] | 7) != 0x17)
      v29 = __len[1] | 7;
    v30 = v29 + 1;
    p_dst = (uint64_t *)operator new(v29 + 1);
    v40 = v25;
    v41 = v30 | 0x8000000000000000;
    __dst = (unsigned int **)p_dst;
LABEL_65:
    memmove(p_dst, v27, v25);
    goto LABEL_66;
  }
LABEL_75:
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v6 = 0;
  LODWORD(Profile) = 0;
LABEL_73:
  v5 = Profile;
  return v5 | (v6 << 32);
}

void sub_1C5AA7D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  std::string *p_p;
  __int16 v19;
  std::error_code v20;
  void *v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::string **p_p_p;

  std::system_category();
  v4 = 0;
  v5 = 0;
  v6 = *(char **)(a2 + 152);
  v7 = v6;
  while (v7)
  {
    v8 = *v7;
    v9 = *v7 & 0x7F;
    if (v5 >= 0x40 && (*v7 & 0x7F) != 0)
      break;
    if ((unint64_t)(v9 << v5) >> v5 != v9)
      break;
    v4 += v9 << v5;
    v5 += 7;
    ++v7;
    if ((v8 & 0x80) == 0)
      goto LABEL_9;
  }
  v4 = 0;
LABEL_9:
  v10 = ((_DWORD)v7 - (_DWORD)v6);
  v11 = &v6[v10];
  v12 = *(_QWORD *)(a2 + 160);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  if ((unint64_t)v11 <= v12)
  {
    *(_QWORD *)(a2 + 152) += v10;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v4;
  }
  else
  {
    *(_QWORD *)&v20.__val_ = 4;
    v20.__cat_ = (const std::error_category *)qword_1EF8F7270[0];
    std::error_code::message(&__p, &v20);
    v19 = 260;
    p_p = &__p;
    v14 = *(_QWORD *)(a2 + 48);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 16))(*(_QWORD *)(a2 + 56));
    v22 = 8;
    v23 = 0;
    v21 = &unk_1E814E700;
    v24 = v15;
    v25 = v16;
    v26 = 0;
    p_p_p = &p_p;
    llvm::LLVMContext::diagnose(v14, (const llvm::DiagnosticInfo *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(std::error_code *)a1 = v20;
  }
}

void sub_1C5AA7EAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  const std::error_category *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  std::string *p_p;
  __int16 v22;
  std::error_code v23;
  void *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  std::string **p_p_p;

  std::system_category();
  v4 = 0;
  v5 = 0;
  v6 = *(char **)(a2 + 152);
  v7 = v6;
  do
  {
    if (!v7 || (v8 = *v7, v9 = *v7 & 0x7F, v5 >= 0x40) && (*v7 & 0x7F) != 0 || (unint64_t)(v9 << v5) >> v5 != v9)
    {
      LODWORD(v4) = 0;
      goto LABEL_12;
    }
    v4 += v9 << v5;
    v5 += 7;
    ++v7;
  }
  while (v8 < 0);
  if (HIDWORD(v4))
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v11 = (const std::error_category *)qword_1EF8F7270[0];
    v12 = 5;
    goto LABEL_16;
  }
LABEL_12:
  v13 = ((_DWORD)v7 - (_DWORD)v6);
  v14 = &v6[v13];
  v15 = *(_QWORD *)(a2 + 160);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v11 = (const std::error_category *)qword_1EF8F7270[0];
  if ((unint64_t)v14 <= v15)
  {
    *(_QWORD *)(a2 + 152) += v13;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_DWORD *)a1 = v4;
    return;
  }
  v12 = 4;
LABEL_16:
  *(_QWORD *)&v23.__val_ = v12;
  v23.__cat_ = v11;
  std::error_code::message(&__p, &v23);
  v22 = 260;
  p_p = &__p;
  v17 = *(_QWORD *)(a2 + 48);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 16))(*(_QWORD *)(a2 + 56));
  v25 = 8;
  v26 = 0;
  v24 = &unk_1E814E700;
  v27 = v18;
  v28 = v19;
  v29 = 0;
  p_p_p = &p_p;
  llvm::LLVMContext::diagnose(v17, (const llvm::DiagnosticInfo *)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 16) |= 1u;
  *(std::error_code *)a1 = v23;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readSummary(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v6;
  unint64_t SummaryEntry;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *__p;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7D28((uint64_t)&v38, (uint64_t)this);
  if ((v39 & 1) != 0)
  {
    v2 = v38;
    v3 = v38;
    if ((_DWORD)v38)
      goto LABEL_19;
  }
  else
  {
    std::system_category();
  }
  sub_1C5AA7D28((uint64_t)&v36, (uint64_t)this);
  if ((v37 & 1) != 0)
  {
    v2 = v36;
    v3 = v36;
    if ((_DWORD)v36)
      goto LABEL_19;
  }
  else
  {
    std::system_category();
  }
  sub_1C5AA7D28((uint64_t)&v34, (uint64_t)this);
  if ((v35 & 1) != 0)
  {
    v2 = v34;
    v3 = v34;
    if ((_DWORD)v34)
      goto LABEL_19;
  }
  else
  {
    std::system_category();
  }
  sub_1C5AA7D28((uint64_t)&v32, (uint64_t)this);
  if ((v33 & 1) != 0)
  {
    v2 = v32;
    v3 = v32;
    if ((_DWORD)v32)
      goto LABEL_19;
  }
  else
  {
    std::system_category();
  }
  sub_1C5AA7D28((uint64_t)&v30, (uint64_t)this);
  if ((v31 & 1) != 0)
  {
    v2 = v30;
    v3 = v30;
    if ((_DWORD)v30)
      goto LABEL_19;
  }
  else
  {
    std::system_category();
  }
  sub_1C5AA7D28((uint64_t)&v28, (uint64_t)this);
  if ((v29 & 1) != 0)
  {
    v2 = v28;
    v3 = v28;
    if (!(_DWORD)v28)
      goto LABEL_21;
LABEL_19:
    v4 = v2 & 0xFFFFFFFF00000000;
    return v4 | v3;
  }
  std::system_category();
  v2 = v28;
LABEL_21:
  __p = 0;
  v26 = 0;
  v27 = 0;
  if (v2)
  {
    v6 = 1;
    do
    {
      SummaryEntry = llvm::sampleprof::SampleProfileReaderBinary::readSummaryEntry((uint64_t)this, (uint64_t)&__p);
      v9 = v8;
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
      v3 = SummaryEntry;
      if (qword_1EF8F7270[0] != v9 || SummaryEntry != 0)
      {
        v4 = SummaryEntry & 0xFFFFFFFF00000000;
        goto LABEL_38;
      }
    }
    while (v28 > v6++);
    v14 = __p;
    v13 = v26;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = operator new();
  v16 = v38;
  v17 = v36;
  v18 = v34;
  v19 = v32;
  v20 = v30;
  *(_DWORD *)v15 = 2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  sub_1C4D6CDA0((_QWORD *)(v15 + 8), v14, v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3));
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v17;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v18;
  *(_DWORD *)(v15 + 64) = v19;
  *(_DWORD *)(v15 + 68) = v20;
  *(_BYTE *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  v23 = *((_QWORD *)this + 13);
  v22 = (uint64_t *)((char *)this + 104);
  v21 = v23;
  *v22 = v15;
  if (v23)
    sub_1C4E5DDC4((uint64_t)v22, v21);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v3 = 0;
  v4 = 0;
LABEL_38:
  if (__p)
    operator delete(__p);
  return v4 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readNameTableSec(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, int a2)
{
  if (a2)
    return llvm::sampleprof::SampleProfileReaderExtBinaryBase::readMD5NameTable(this);
  else
    return llvm::sampleprof::SampleProfileReaderBinary::readNameTable(this);
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readCSNameTableSec(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16[2];
  char v17;
  void *v18[2];
  _BYTE v19[24];
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7EAC((uint64_t)&v20, (uint64_t)this);
  if ((v21 & 1) != 0)
  {
    v2 = v20;
    if ((_DWORD)v20)
    {
      v3 = v20 & 0xFFFFFFFF00000000;
      return v2 | v3;
    }
  }
  else
  {
    std::system_category();
    v2 = v20;
  }
  v5 = (uint64_t *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  sub_1C630BC98(v5, v2);
  if (!v2)
  {
LABEL_28:
    v10 = (void *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v5;
    if (v10)
    {
      v18[0] = v10;
      sub_1C5AAD3E4((void ***)v18);
      MEMORY[0x1CAA32FC0](v10, 0x20C40960023A9);
    }
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v3 = 0;
    v2 = 0;
    return v2 | v3;
  }
  v6 = 0;
  while (1)
  {
    v18[0] = v19;
    v18[1] = (void *)0x100000000;
    sub_1C630BD54(v5, (uint64_t)v18);
    if (v18[0] != v19)
      free(v18[0]);
    sub_1C5AA7EAC((uint64_t)v18, (uint64_t)this);
    if ((v19[0] & 1) != 0)
      break;
    std::system_category();
    v7 = (int)v18[0];
LABEL_13:
    while (v7)
    {
      (*(void (**)(uint64_t *__return_ptr, llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 104))(v16, this);
      if ((v17 & 1) != 0)
      {
        v8 = v16[0];
        if (LODWORD(v16[0]))
          goto LABEL_33;
      }
      else
      {
        std::system_category();
      }
      sub_1C5AA7D28((uint64_t)&v14, (uint64_t)this);
      if ((v15 & 1) != 0)
      {
        v9 = v14;
        if ((_DWORD)v14)
        {
          v8 = v14;
          v2 = v14;
          goto LABEL_34;
        }
        v8 = v14;
      }
      else
      {
        std::system_category();
        v8 = 0;
        v9 = v14;
      }
      if ((v9 & 0xFFFF0000) != 0)
      {
        std::system_category();
        v2 = 0;
        goto LABEL_34;
      }
      sub_1C5AA7D28((uint64_t)&v12, (uint64_t)this);
      if ((v13 & 1) != 0)
      {
        v8 = v12;
        if ((_DWORD)v12)
        {
LABEL_33:
          v2 = v8;
          goto LABEL_34;
        }
      }
      else
      {
        std::system_category();
        LODWORD(v8) = v12;
      }
      sub_1C630BDB8(v5[1] - 40, v16[0], v16[1], v9 | ((unint64_t)v8 << 32));
      --v7;
    }
    if (++v6 == v2)
      goto LABEL_28;
  }
  v7 = (int)v18[0];
  if (!LODWORD(v18[0]))
    goto LABEL_13;
  v8 = (uint64_t)v18[0];
  v2 = v18[0];
LABEL_34:
  v3 = v8 & 0xFFFFFFFF00000000;
  return v2 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncProfiles(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  const unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  int *v25;
  size_t v26;
  std::string *v27;
  std::string::size_type size;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  int *v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  int v44;
  size_t v45;
  std::string::size_type v46;
  std::string *p_dst;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int i;
  int v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t FuncProfile;
  uint64_t v70;
  std::string::size_type v71;
  uint64_t v72;
  std::string::size_type v73;
  void *v74;
  size_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int j;
  int v82;
  uint64_t v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  int v88;
  uint64_t v89;
  int v90;
  std::string v91;
  uint64_t v92[2];
  std::string __dst;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 32))(this) & 1) != 0)
  {
    v86 = *((_QWORD *)this + 19);
    if (*((_QWORD *)this + 14))
    {
      v3 = *((_QWORD *)this + 44);
      v4 = *((unsigned int *)this + 92);
      v5 = (unint64_t *)(v3 + 16 * v4);
      if (*((_DWORD *)this + 90))
      {
        if ((_DWORD)v4)
        {
          v6 = 16 * v4;
          v7 = (unint64_t *)*((_QWORD *)this + 44);
          while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v7 += 2;
            v6 -= 16;
            if (!v6)
              goto LABEL_8;
          }
        }
        else
        {
          v7 = (unint64_t *)*((_QWORD *)this + 44);
        }
      }
      else
      {
LABEL_8:
        v7 = (unint64_t *)(v3 + 16 * v4);
      }
      v11 = (unint64_t *)(v3 + 16 * v4);
LABEL_14:
      while (v7 != v11)
      {
        sub_1C5DF9694(**(_QWORD **)(*((_QWORD *)this + 14) + 8), (char *)*v7, v7[1], 1);
        v12 = v7 + 2;
        while (v12 != v5)
        {
          v13 = *v12;
          v12 += 2;
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v7 = v12 - 2;
            goto LABEL_14;
          }
        }
        v7 = v5;
      }
    }
    if (*((_BYTE *)this + 121))
    {
      memset(&v91, 0, 20);
      if ((*(unsigned int (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 72))(this))
      {
        v14 = *((_QWORD *)this + 44);
        v15 = *((unsigned int *)this + 92);
        v16 = (unint64_t *)(v14 + 16 * v15);
        if (*((_DWORD *)this + 90))
        {
          if ((_DWORD)v15)
          {
            v17 = 16 * v15;
            v18 = (unint64_t *)*((_QWORD *)this + 44);
            while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v18 += 2;
              v17 -= 16;
              if (!v17)
                goto LABEL_27;
            }
          }
          else
          {
            v18 = (unint64_t *)*((_QWORD *)this + 44);
          }
        }
        else
        {
LABEL_27:
          v18 = (unint64_t *)(v14 + 16 * v15);
        }
        v33 = (unint64_t *)(v14 + 16 * v15);
        while (v18 != v33)
        {
          v34 = (int *)*v18;
          v35 = v18[1];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
          __dst.__r_.__value_.__r.__words[2] = 0;
          llvm::MD5::update((int *)&__dst, v34, v35);
          llvm::MD5::final((int *)&__dst, (int *)v92);
          sub_1C61A7854((uint64_t)&v91, v92, (uint64_t)&__dst);
          v36 = v18 + 2;
          while (v36 != v16)
          {
            v37 = *v36;
            v36 += 2;
            if (v37 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v18 = v36 - 2;
              goto LABEL_63;
            }
          }
          v18 = v16;
LABEL_63:
          ;
        }
      }
      v38 = (uint64_t *)*((_QWORD *)this + 43);
      v39 = *v38;
      v40 = v38[1];
      if (*v38 != v40)
      {
        v41 = 0;
        v89 = v38[1];
        while (1)
        {
          v42 = *(_QWORD **)v39;
          v43 = *(_QWORD *)(v39 + 8);
          v44 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 72))(this);
          if (v44)
            break;
LABEL_81:
          if (((*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 72))(this) & 1) != 0)
            goto LABEL_82;
          v56 = *((_DWORD *)this + 92);
          if (v56)
          {
            v57 = *((_QWORD *)this + 44);
            v58 = sub_1C5E3DF4C(v42, (uint64_t)v42 + v43);
            v59 = v56 - 1;
            for (i = 1; ; i = v88 + 1)
            {
              v88 = i;
              v61 = v58 & v59;
              v62 = v57 + 16 * (v58 & v59);
              v63 = *(const void **)v62;
              if (*(_QWORD *)v62 == -1)
              {
                if (v42 == (_QWORD *)-1)
                  goto LABEL_96;
              }
              else if (v63 == (const void *)-2)
              {
                if (v42 == (_QWORD *)-2)
                  goto LABEL_96;
              }
              else if (v43 == *(_QWORD *)(v62 + 8) && (!v43 || !memcmp(v42, v63, v43)))
              {
LABEL_96:
                v40 = v89;
                if ((v44 & 1) != 0)
                {
LABEL_97:
                  v55 = 1;
                  goto LABEL_98;
                }
LABEL_102:
                v64 = v39;
                if (v41)
                {
                  v64 = v39;
                  if (sub_1C5AA923C(*(_QWORD *)(v41 + 16), *(_QWORD *)(v41 + 24), *(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24)))
                  {
                    goto LABEL_104;
                  }
                }
                goto LABEL_113;
              }
              if (v63 == (const void *)-1)
                break;
              v58 = v88 + v61;
            }
          }
          v65 = *((_QWORD *)this + 14);
          v40 = v89;
          if (!v65)
          {
LABEL_82:
            if (v44)
            {
              v55 = 0;
              goto LABEL_98;
            }
            goto LABEL_104;
          }
          v66 = sub_1C5DF9694(**(_QWORD **)(v65 + 8), (char *)v42, v43, 0);
          v55 = v66 != 0;
          if ((v44 & 1) != 0)
          {
LABEL_98:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if (v55)
                goto LABEL_102;
            }
            else if (v55)
            {
              goto LABEL_102;
            }
          }
          else if (v66)
          {
            goto LABEL_102;
          }
LABEL_104:
          if (v41 == v39)
          {
            v64 = v41;
            goto LABEL_113;
          }
          if (v41)
          {
            v64 = v41;
            if (sub_1C5AA923C(*(_QWORD *)(v41 + 16), *(_QWORD *)(v41 + 24), *(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24)))
            {
LABEL_113:
              FuncProfile = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v86 + *(_QWORD *)(v39 + 40)));
              v10 = FuncProfile;
              v41 = v64;
              if ((_DWORD)FuncProfile)
              {
                v1 = HIDWORD(FuncProfile);
                MEMORY[0x1CAA32FB4](v91.__r_.__value_.__r.__words[0], 8);
                return v10 | (v1 << 32);
              }
            }
          }
          v39 += 48;
          if (v39 == v40)
            goto LABEL_115;
        }
        v45 = strlen((const char *)v42);
        if (v45 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v46 = v45;
        if (v45 >= 0x17)
        {
          v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v48 = v45 | 7;
          v49 = v48 + 1;
          p_dst = (std::string *)operator new(v48 + 1);
          __dst.__r_.__value_.__l.__size_ = v46;
          __dst.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v45;
          p_dst = &__dst;
          if (!v45)
          {
LABEL_75:
            p_dst->__r_.__value_.__s.__data_[v46] = 0;
            v50 = std::stoull(&__dst, 0, 10);
            if (LODWORD(v91.__r_.__value_.__r.__words[2]))
            {
              v51 = (LODWORD(v91.__r_.__value_.__r.__words[2]) - 1) & (37 * v50);
              v52 = *(_QWORD *)(v91.__r_.__value_.__r.__words[0] + 8 * v51);
              if (v50 == v52)
                goto LABEL_97;
              v53 = 1;
              while (v52 != -1)
              {
                v54 = v51 + v53++;
                v51 = v54 & (LODWORD(v91.__r_.__value_.__r.__words[2]) - 1);
                v52 = *(_QWORD *)(v91.__r_.__value_.__r.__words[0] + 8 * v51);
                v55 = 1;
                if (v50 == v52)
                  goto LABEL_98;
              }
            }
            goto LABEL_81;
          }
        }
        memmove(p_dst, v42, v46);
        goto LABEL_75;
      }
LABEL_115:
      MEMORY[0x1CAA32FB4](v91.__r_.__value_.__r.__words[0], 8);
    }
    else if ((*(unsigned int (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 72))(this))
    {
      v19 = *((_QWORD *)this + 44);
      v20 = *((unsigned int *)this + 92);
      v21 = (unint64_t *)(v19 + 16 * v20);
      if (*((_DWORD *)this + 90))
      {
        if ((_DWORD)v20)
        {
          v22 = 16 * v20;
          v23 = (unint64_t *)*((_QWORD *)this + 44);
          while (*v23 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v23 += 2;
            v22 -= 16;
            if (!v22)
              goto LABEL_34;
          }
        }
        else
        {
          v23 = (unint64_t *)*((_QWORD *)this + 44);
        }
      }
      else
      {
LABEL_34:
        v23 = (unint64_t *)(v19 + 16 * v20);
      }
      v24 = (unint64_t *)(v19 + 16 * v20);
      if (v23 != v24)
      {
        v87 = &unk_1C85F4000;
        do
        {
          v25 = (int *)*v23;
          v26 = v23[1];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
          __dst.__r_.__value_.__r.__words[2] = 0;
          llvm::MD5::update((int *)&__dst, v25, v26);
          llvm::MD5::final((int *)&__dst, (int *)&v91);
          std::to_string(&v91, v91.__r_.__value_.__r.__words[0]);
          v27 = (std::string *)v91.__r_.__value_.__r.__words[0];
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v91;
          size = *((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x7F;
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v91.__r_.__value_.__l.__size_;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = size;
          v94 = 0;
          v95 = 0;
          v92[0] = 0;
          v29 = 11;
          if (sub_1C630D808(*((_QWORD *)this + 40), *((_DWORD *)this + 84), (uint64_t)&__dst, v92)
            && v92[0] != *((_QWORD *)this + 40) + 48 * *((unsigned int *)this + 84))
          {
            v32 = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v86 + *(_QWORD *)(v92[0] + 40)));
            v1 = HIDWORD(v32);
            LODWORD(v87) = v32;
            v29 = v32 != 0;
          }
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v91.__r_.__value_.__l.__data_);
          if (v29 != 11 && v29)
          {
            v10 = v87;
            return v10 | (v1 << 32);
          }
          v30 = v23 + 2;
          while (v30 != v21)
          {
            v31 = *v30;
            v30 += 2;
            if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v23 = v30 - 2;
              goto LABEL_54;
            }
          }
          v23 = v21;
LABEL_54:
          ;
        }
        while (v23 != v24);
      }
    }
    else
    {
      v70 = sub_1C630B7FC((uint64_t)this + 320);
      __dst.__r_.__value_.__l.__size_ = v71;
      v72 = *((_QWORD *)this + 40) + 48 * *((unsigned int *)this + 84);
      if (v72 != v70)
      {
        v73 = v70;
        do
        {
          v74 = *(void **)v73;
          v75 = *(_QWORD *)(v73 + 8);
          v76 = *(_QWORD *)(v73 + 40);
          v77 = *((_DWORD *)this + 92);
          if (v77)
          {
            v78 = *((_QWORD *)this + 44);
            v79 = sub_1C5E3DF4C(*(_QWORD **)v73, (uint64_t)v74 + v75);
            v80 = v77 - 1;
            for (j = 1; ; j = v90 + 1)
            {
              v90 = j;
              v82 = v79 & v80;
              v83 = v78 + 16 * (v79 & v80);
              v84 = *(const void **)v83;
              if (*(_QWORD *)v83 == -1)
              {
                if (v74 == (void *)-1)
                  goto LABEL_139;
              }
              else if (v84 == (const void *)-2)
              {
                if (v74 == (void *)-2)
                  goto LABEL_139;
              }
              else if (v75 == *(_QWORD *)(v83 + 8) && (!v75 || !memcmp(v74, v84, v75)))
              {
                goto LABEL_139;
              }
              if (v84 == (const void *)-1)
                break;
              v79 = v90 + v82;
            }
          }
          v85 = *((_QWORD *)this + 14);
          if (v85 && sub_1C5DF9694(**(_QWORD **)(v85 + 8), (char *)v74, v75, 0))
          {
LABEL_139:
            v9 = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(v86 + v76));
            if ((_DWORD)v9)
              goto LABEL_11;
          }
          __dst.__r_.__value_.__r.__words[0] = v73 + 48;
          sub_1C630DA6C((uint64_t *)&__dst);
          v73 = __dst.__r_.__value_.__r.__words[0];
        }
        while (__dst.__r_.__value_.__r.__words[0] != v72);
      }
    }
    *((_QWORD *)this + 19) = *((_QWORD *)this + 20);
  }
  else
  {
    while (1)
    {
      v8 = (const unsigned __int8 *)*((_QWORD *)this + 19);
      if ((unint64_t)v8 >= *((_QWORD *)this + 20))
        break;
      v9 = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, v8);
      if ((_DWORD)v9)
      {
LABEL_11:
        v1 = HIDWORD(v9);
        v10 = v9;
        return v10 | (v1 << 32);
      }
    }
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v10 = 0;
  v1 = 0;
  return v10 | (v1 << 32);
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncOffsetTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  unint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 320);
  sub_1C630B758((uint64_t)this + 320);
  sub_1C5AA7D28((uint64_t)&v43, (uint64_t)this);
  if ((v44 & 1) != 0)
  {
    v3 = v43;
    if ((_DWORD)v43)
    {
LABEL_3:
      v4 = v3 & 0xFFFFFFFF00000000;
      return v3 | v4;
    }
    v6 = v43;
  }
  else
  {
    std::system_category();
    v6 = v43;
  }
  sub_1C630B7B0(v2, v6);
  if (*((_BYTE *)this + 409))
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    v8 = *((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = v7;
    if (v8)
      sub_1C4FE303C(v8);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)v7[2] >> 4) < v6)
    {
      if (v6 > 0x555555555555555)
LABEL_49:
        abort();
      v9 = v7[1];
      v10 = (char *)operator new(48 * v6);
      v11 = &v10[48 * (v9 / 48)];
      v12 = v11;
      if (v9)
      {
        v13 = &v10[48 * (v9 / 48)];
        do
        {
          v12 = v13 - 48;
          v14 = *(_OWORD *)(v9 - 48);
          v15 = *(_OWORD *)(v9 - 16);
          *((_OWORD *)v13 - 2) = *(_OWORD *)(v9 - 32);
          *((_OWORD *)v13 - 1) = v15;
          *((_OWORD *)v13 - 3) = v14;
          v9 -= 48;
          v13 -= 48;
        }
        while (v9);
      }
      *v7 = v12;
      v7[1] = v11;
      v7[2] = &v10[48 * v6];
    }
  }
  if (v6)
  {
    LODWORD(v16) = 0;
    do
    {
      (*(void (**)(__int128 *__return_ptr, llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 112))(&v39, this);
      if ((v42 & 1) != 0)
      {
        v3 = v39;
        if ((_DWORD)v39)
          goto LABEL_3;
      }
      else
      {
        std::system_category();
      }
      sub_1C5AA7D28((uint64_t)&v37, (uint64_t)this);
      if ((v38 & 1) != 0)
      {
        v3 = v37;
        if ((_DWORD)v37)
          goto LABEL_3;
      }
      else
      {
        std::system_category();
        v3 = v37;
      }
      *(_QWORD *)(sub_1C630D930((uint64_t)v2, (uint64_t)&v39) + 40) = v3;
      if (*((_BYTE *)this + 409))
      {
        v17 = *((_QWORD *)this + 43);
        v19 = *(_OWORD **)(v17 + 8);
        v18 = *(_QWORD *)(v17 + 16);
        if ((unint64_t)v19 >= v18)
        {
          v23 = *(_OWORD **)v17;
          v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(_QWORD *)v17) >> 4);
          v25 = v24 + 1;
          if (v24 + 1 > 0x555555555555555)
            goto LABEL_49;
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v23) >> 4);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x2AAAAAAAAAAAAAALL)
            v27 = 0x555555555555555;
          else
            v27 = v25;
          if (v27 > 0x555555555555555)
            sub_1C4764EE4();
          v28 = 3 * v27;
          v29 = (char *)operator new(48 * v27);
          v30 = &v29[48 * v24];
          v31 = v40;
          *(_OWORD *)v30 = v39;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = v41;
          *((_QWORD *)v30 + 5) = v3;
          if (v19 == v23)
          {
            v33 = &v29[48 * v24];
          }
          else
          {
            v32 = &v29[48 * v24];
            do
            {
              v33 = v32 - 48;
              v34 = *(v19 - 3);
              v35 = *(v19 - 1);
              *((_OWORD *)v32 - 2) = *(v19 - 2);
              *((_OWORD *)v32 - 1) = v35;
              *((_OWORD *)v32 - 3) = v34;
              v19 -= 3;
              v32 -= 48;
            }
            while (v19 != v23);
          }
          v22 = v30 + 48;
          *(_QWORD *)v17 = v33;
          *(_QWORD *)(v17 + 8) = v30 + 48;
          *(_QWORD *)(v17 + 16) = &v29[16 * v28];
          if (v23)
            operator delete(v23);
        }
        else
        {
          v20 = v40;
          v21 = v41;
          *v19 = v39;
          v19[1] = v20;
          *((_QWORD *)v19 + 4) = v21;
          *((_QWORD *)v19 + 5) = v3;
          v22 = (char *)(v19 + 3);
        }
        *(_QWORD *)(v17 + 8) = v22;
      }
      v16 = (v16 + 1);
    }
    while (v6 > v16);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v4 = 0;
  LODWORD(v3) = 0;
  return v3 | v4;
}

BOOL llvm::sampleprof::SampleProfileReaderExtBinaryBase::collectFuncsFromModule(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  llvm::Value *v7;
  uint64_t v8;
  __int128 v10;
  _BYTE v11[31];

  v1 = *((_QWORD *)this + 17);
  if (v1)
  {
    v3 = (char *)this + 352;
    sub_1C5934C08((_DWORD *)this + 88);
    v4 = *((_QWORD *)this + 17);
    v5 = v4 + 24;
    for (i = *(_QWORD *)(v4 + 32); i != v5; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v7 = (llvm::Value *)(i - 56);
      else
        v7 = 0;
      *(_QWORD *)&v10 = sub_1C6200B8C(v7);
      *((_QWORD *)&v10 + 1) = v8;
      sub_1C630A55C((unint64_t)v3, &v10, (uint64_t)v11);
    }
  }
  return v1 != 0;
}

BOOL sub_1C5AA923C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _BOOL8 result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 < a2)
    return 0;
  v7 = a1;
  v8 = a2 - 1;
  v9 = a1 + 24 * (a2 - 1);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = a3 + 24 * (a2 - 1);
  if (v10 != *(_QWORD *)(v11 + 8) || v10 && memcmp(*(const void **)v9, *(const void **)v11, v10))
    return 0;
  if (!v8)
    return 1;
  v12 = 24 * a2 - 48;
  do
  {
    result = sub_1C62A3890(v7, a3);
    if (!result)
      break;
    v7 += 24;
    a3 += 24;
    v13 = v12;
    v12 -= 24;
  }
  while (v13);
  return result;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readImpl(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v15;
  unsigned __int8 *v16;

  v1 = (_QWORD *)*((_QWORD *)this + 36);
  v2 = (_QWORD *)*((_QWORD *)this + 37);
  if (v1 == v2)
  {
LABEL_18:
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v12 = 0;
    LODWORD(v10) = 0;
    return v10 | v12;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  while (1)
  {
    v5 = v1[3];
    if (v5)
    {
      v6 = v1[1];
      if (!*((_BYTE *)this + 408) || (v1[1] & 2) == 0)
        break;
    }
LABEL_14:
    v1 += 5;
    if (v1 == v2)
      goto LABEL_18;
  }
  v8 = v1[2];
  v9 = (unsigned __int8 *)(v4 + v8);
  if ((v6 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v10 = llvm::sampleprof::SampleProfileReaderExtBinaryBase::decompressSection(this, (const unsigned __int8 *)(v4 + v8), v5, (const unsigned __int8 **)&v16, (unint64_t *)&v15);
    if ((_DWORD)v10)
    {
LABEL_22:
      v12 = v10 & 0xFFFFFFFF00000000;
      return v10 | v12;
    }
    v5 = v15;
    v9 = v16;
  }
  v10 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderExtBinaryBase *, unsigned __int8 *, uint64_t, _QWORD *))(*(_QWORD *)this + 128))(this, v9, v5, v1);
  if ((_DWORD)v10)
    goto LABEL_22;
  if (*((unsigned __int8 **)this + 19) == &v9[v5])
  {
    if ((v6 & 1) != 0)
    {
      *((_QWORD *)this + 19) = v4 + v1[2];
      *((_QWORD *)this + 20) = v4 + *(_QWORD *)(*((_QWORD *)this + 7) + 16) - *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    }
    goto LABEL_14;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v12 = 0;
  LODWORD(v10) = 5;
  return v10 | v12;
}

unint64_t llvm::sampleprof::SampleProfileReaderCompactBinary::readImpl(llvm::sampleprof::SampleProfileReaderCompactBinary *this)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  int *v18;
  size_t v19;
  std::string *v20;
  unint64_t size;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t FuncProfile;
  uint64_t v47;
  unint64_t v49;
  uint64_t v51;
  unint64_t __val[2];
  std::string v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderCompactBinary *))(*(_QWORD *)this + 32))(this);
  v3 = byte_1ED81B3C8;
  *((_BYTE *)this + 128) = byte_1ED81B3C8;
  llvm::sampleprof::FunctionSamples::ProfileIsFS = v3;
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 30);
    v5 = *((unsigned int *)this + 64);
    v6 = (unint64_t *)(v4 + 16 * v5);
    if (*((_DWORD *)this + 62))
    {
      if ((_DWORD)v5)
      {
        v7 = 16 * v5;
        v8 = (unint64_t *)*((_QWORD *)this + 30);
        while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v8 += 2;
          v7 -= 16;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
        v8 = (unint64_t *)*((_QWORD *)this + 30);
      }
    }
    else
    {
LABEL_7:
      v8 = (unint64_t *)(v4 + 16 * v5);
    }
    v14 = (unint64_t *)(v4 + 16 * v5);
    if (v8 != v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = (int *)*v8;
        v19 = v8[1];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
        v53.__r_.__value_.__r.__words[2] = 0;
        llvm::MD5::update((int *)&v53, v18, v19);
        llvm::MD5::final((int *)&v53, (int *)__val);
        std::to_string(&v53, __val[0]);
        v20 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v53;
        size = *((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x7F;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v53.__r_.__value_.__l.__size_;
        __val[0] = (unint64_t)v20;
        __val[1] = size;
        v51 = 0;
        if (sub_1C630D550((uint64_t *)this + 27, (const void **)__val, &v51))
        {
          v22 = v51;
          if (v51 != *((_QWORD *)this + 27) + 24 * *((unsigned int *)this + 58))
          {
            if (v17 >= v15)
            {
              v23 = (v17 - v16) >> 3;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61)
                goto LABEL_91;
              if ((v15 - v16) >> 2 > v24)
                v24 = (v15 - v16) >> 2;
              if ((unint64_t)(v15 - v16) >= 0x7FFFFFFFFFFFFFF8)
                v25 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
              {
                if (v25 >> 61)
                  goto LABEL_92;
                v26 = (char *)operator new(8 * v25);
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[8 * v23];
              *(_QWORD *)v27 = *(_QWORD *)(v22 + 16);
              v28 = v27 + 8;
              while (v17 != v16)
              {
                v29 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v27 - 1) = v29;
                v27 -= 8;
              }
              v15 = &v26[8 * v25];
              if (v16)
                operator delete(v16);
              v17 = v28;
              v16 = v27;
            }
            else
            {
              *(_QWORD *)v17 = *(_QWORD *)(v51 + 16);
              v17 += 8;
            }
          }
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        v30 = v8 + 2;
        while (v30 != v6)
        {
          v31 = *v30;
          v30 += 2;
          if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v8 = v30 - 2;
            goto LABEL_48;
          }
        }
        v8 = v6;
LABEL_48:
        ;
      }
      while (v8 != v14);
      goto LABEL_77;
    }
LABEL_82:
    v16 = 0;
    goto LABEL_84;
  }
  v9 = *((_QWORD *)this + 27);
  v10 = *((unsigned int *)this + 58);
  v11 = (unint64_t *)(v9 + 24 * v10);
  if (*((_DWORD *)this + 56))
  {
    if ((_DWORD)v10)
    {
      v12 = 24 * v10;
      v13 = (unint64_t *)*((_QWORD *)this + 27);
      while (*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v13 += 3;
        v12 -= 24;
        if (!v12)
          goto LABEL_13;
      }
    }
    else
    {
      v13 = (unint64_t *)*((_QWORD *)this + 27);
    }
  }
  else
  {
LABEL_13:
    v13 = (unint64_t *)(v9 + 24 * v10);
  }
  v32 = (unint64_t *)(v9 + 24 * v10);
  if (v13 == v32)
    goto LABEL_82;
  v33 = 0;
  v16 = 0;
  v17 = 0;
  do
  {
    v34 = v13[2];
    if (v17 >= v33)
    {
      v35 = (v17 - v16) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
LABEL_91:
        abort();
      if ((v33 - v16) >> 2 > v36)
        v36 = (v33 - v16) >> 2;
      if ((unint64_t)(v33 - v16) >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        if (v37 >> 61)
LABEL_92:
          sub_1C4764EE4();
        v38 = (char *)operator new(8 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v35];
      *(_QWORD *)v39 = v34;
      v40 = v39 + 8;
      while (v17 != v16)
      {
        v41 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v39 - 1) = v41;
        v39 -= 8;
      }
      v33 = &v38[8 * v37];
      if (v16)
        operator delete(v16);
      v16 = v39;
      v17 = v40;
    }
    else
    {
      *(_QWORD *)v17 = v34;
      v17 += 8;
    }
    v42 = v13 + 3;
    while (v42 != v11)
    {
      v43 = *v42;
      v42 += 3;
      if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = v42 - 3;
        goto LABEL_76;
      }
    }
    v13 = v11;
LABEL_76:
    ;
  }
  while (v13 != v32);
LABEL_77:
  if (v16 == v17)
  {
    v16 = v17;
LABEL_84:
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v47 = 0;
    v49 = 0;
    if (!v16)
      return v49 | v47;
LABEL_87:
    operator delete(v16);
    return v49 | v47;
  }
  v44 = *((_QWORD *)this + 19);
  v45 = v16;
  while (1)
  {
    FuncProfile = llvm::sampleprof::SampleProfileReaderBinary::readFuncProfile(this, (const unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + *(_QWORD *)v45));
    v47 = FuncProfile;
    if ((_DWORD)FuncProfile)
      break;
    *((_QWORD *)this + 19) = v44;
    v45 += 8;
    if (v45 == v17)
      goto LABEL_84;
  }
  v49 = FuncProfile & 0xFFFFFFFF00000000;
  if (v16)
    goto LABEL_87;
  return v49 | v47;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readMD5NameTable(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  void **v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  std::string *v21;
  void **v22;
  void **v23;
  char *v24;
  __int128 v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  std::string v50;
  void **v51[5];
  unint64_t __val;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7D28((uint64_t)&v54, (uint64_t)this);
  if ((v55 & 1) != 0)
  {
    v2 = v54;
    if ((_DWORD)v54)
    {
LABEL_4:
      v3 = v2 & 0xFFFFFFFF00000000;
      return v2 | v3;
    }
  }
  else
  {
    std::system_category();
  }
  v4 = (unint64_t *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v5 = (void **)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v4;
  if (v5)
  {
    v51[0] = v5;
    sub_1C4765410(v51);
    MEMORY[0x1CAA32FC0](v5, 0x20C40960023A9);
    v4 = (unint64_t *)*((_QWORD *)this + 49);
  }
  v6 = v54;
  sub_1C5962544(v4, v54);
  v7 = (_QWORD *)((char *)this + 168);
  if (*((_BYTE *)this + 376))
  {
    v8 = *((_QWORD *)this + 21);
    v9 = (*((_QWORD *)this + 22) - v8) >> 4;
    if (v9 >= v6 + v9)
    {
      if (v9 > v6 + v9)
        *((_QWORD *)this + 22) = v8 + 16 * (v6 + v9);
    }
    else
    {
      sub_1C5AAD184((char **)this + 21, v6);
    }
    v47 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 48) = v47;
    *((_QWORD *)this + 19) = v47 + 8 * v6;
  }
  else
  {
    sub_1C501881C((uint64_t)this + 168, v6);
    if (v6)
    {
      LODWORD(v10) = 0;
      do
      {
        sub_1C5AA7D28((uint64_t)&__val, (uint64_t)this);
        if ((v53 & 1) != 0)
        {
          v2 = __val;
          if ((_DWORD)__val)
            goto LABEL_4;
        }
        else
        {
          std::system_category();
          v2 = __val;
        }
        v11 = *((_QWORD *)this + 49);
        std::to_string(&v50, v2);
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v11 + 16);
        if (v12 >= v13)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)v11) >> 3);
          v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_68;
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)v11) >> 3);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v17;
          v51[4] = (void **)(v11 + 16);
          if (v19)
          {
            if (v19 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_69;
            v20 = (char *)operator new(24 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = (std::string *)&v20[24 * v16];
          *v21 = v50;
          memset(&v50, 0, sizeof(v50));
          v23 = *(void ***)v11;
          v22 = *(void ***)(v11 + 8);
          if (v22 == *(void ***)v11)
          {
            v26 = *(void ***)(v11 + 8);
            v24 = &v20[24 * v16];
          }
          else
          {
            v24 = &v20[24 * v16];
            do
            {
              v25 = *(_OWORD *)(v22 - 3);
              *((_QWORD *)v24 - 1) = *(v22 - 1);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              *(v22 - 2) = 0;
              *(v22 - 1) = 0;
              *(v22 - 3) = 0;
              v22 -= 3;
            }
            while (v22 != v23);
            v26 = *(void ***)v11;
            v22 = *(void ***)(v11 + 8);
          }
          v15 = v21 + 1;
          *(_QWORD *)v11 = v24;
          v51[0] = v26;
          v51[1] = v26;
          *(_QWORD *)(v11 + 8) = v21 + 1;
          v51[2] = v22;
          v27 = *(void ***)(v11 + 16);
          *(_QWORD *)(v11 + 16) = &v20[24 * v19];
          v51[3] = v27;
          sub_1C4D868F0((uint64_t)v51);
        }
        else
        {
          v14 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
          *(_QWORD *)(v12 + 16) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
          *(_OWORD *)v12 = v14;
          memset(&v50, 0, sizeof(v50));
          v15 = (std::string *)(v12 + 24);
        }
        *(_QWORD *)(v11 + 8) = v15;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        v28 = *(_QWORD *)(*((_QWORD *)this + 49) + 8);
        v31 = *(_QWORD *)(v28 - 24);
        v29 = v28 - 24;
        v30 = v31;
        v32 = *(_BYTE *)(v29 + 23);
        if (v32 >= 0)
          v33 = v29;
        else
          v33 = v30;
        v34 = *(_QWORD *)(v29 + 8);
        if (v32 >= 0)
          v35 = v32 & 0x7F;
        else
          v35 = v34;
        v37 = (_QWORD *)*((_QWORD *)this + 22);
        v36 = *((_QWORD *)this + 23);
        if ((unint64_t)v37 >= v36)
        {
          v39 = (_QWORD *)*v7;
          v40 = ((uint64_t)v37 - *v7) >> 4;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 60)
LABEL_68:
            abort();
          v42 = v36 - (_QWORD)v39;
          if (v42 >> 3 > v41)
            v41 = v42 >> 3;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
            v43 = 0xFFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 60)
LABEL_69:
              sub_1C4764EE4();
            v44 = (char *)operator new(16 * v43);
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[16 * v40];
          *(_QWORD *)v45 = v33;
          *((_QWORD *)v45 + 1) = v35;
          v46 = v45;
          if (v37 != v39)
          {
            do
            {
              *((_OWORD *)v46 - 1) = *((_OWORD *)v37 - 1);
              v46 -= 16;
              v37 -= 2;
            }
            while (v37 != v39);
            v37 = (_QWORD *)*v7;
          }
          v38 = v45 + 16;
          *((_QWORD *)this + 21) = v46;
          *((_QWORD *)this + 22) = v45 + 16;
          *((_QWORD *)this + 23) = &v44[16 * v43];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v37 = v33;
          v37[1] = v35;
          v38 = v37 + 2;
        }
        *((_QWORD *)this + 22) = v38;
        v10 = (v10 + 1);
      }
      while (v54 > v10);
    }
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v3 = 0;
  LODWORD(v2) = 0;
  return v2 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncMetadata(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, _BOOL4 a2, llvm::sampleprof::FunctionSamples *a3)
{
  uint64_t FuncMetadata;
  unint64_t v8;
  int v10;
  char *v11;
  void *v12;
  llvm::sampleprof::FunctionSamples *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t *__dst[2];
  unint64_t v25;
  unsigned int v26[2];
  uint64_t **v27;
  void *__src;
  size_t __len;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 19) >= *((_QWORD *)this + 20))
    goto LABEL_19;
  if (*((_BYTE *)this + 120))
  {
    sub_1C5AA7D28((uint64_t)&__src, (uint64_t)this);
    if ((v30 & 1) != 0)
    {
      FuncMetadata = (uint64_t)__src;
    }
    else
    {
      std::system_category();
      FuncMetadata = 0;
    }
    if (!a3 || (_DWORD)FuncMetadata)
    {
      if ((_DWORD)FuncMetadata)
        goto LABEL_25;
    }
    else
    {
      *((_QWORD *)a3 + 1) = __src;
    }
  }
  if (a2)
  {
    sub_1C5AA7EAC((uint64_t)&__src, (uint64_t)this);
    if ((v30 & 1) != 0)
    {
      FuncMetadata = (uint64_t)__src;
    }
    else
    {
      std::system_category();
      FuncMetadata = 0;
    }
    if (!a3 || (_DWORD)FuncMetadata)
    {
      if ((_DWORD)FuncMetadata)
        goto LABEL_25;
    }
    else
    {
      *((_DWORD *)a3 + 13) = (_DWORD)__src;
    }
  }
  if (!*((_BYTE *)this + 121))
  {
    sub_1C5AA7EAC((uint64_t)&v36, (uint64_t)this);
    if ((v37 & 1) == 0)
    {
      std::system_category();
      LODWORD(FuncMetadata) = v36;
LABEL_27:
      if (!(_DWORD)FuncMetadata)
        goto LABEL_19;
      v10 = 0;
      v11 = (char *)a3 + 96;
      v12 = &std::piecewise_construct;
      while (1)
      {
        sub_1C5AA7D28((uint64_t)&v34, (uint64_t)this);
        if ((v35 & 1) != 0)
        {
          FuncMetadata = v34;
          if ((_DWORD)v34)
            goto LABEL_25;
        }
        else
        {
          std::system_category();
        }
        sub_1C5AA7D28((uint64_t)&v32, (uint64_t)this);
        if ((v33 & 1) != 0)
        {
          FuncMetadata = v32;
          if ((_DWORD)v32)
            goto LABEL_25;
        }
        else
        {
          std::system_category();
        }
        (*(void (**)(void **__return_ptr, llvm::sampleprof::SampleProfileReaderExtBinaryBase *))(*(_QWORD *)this + 112))(&__src, this);
        if ((v31 & 1) != 0)
        {
          FuncMetadata = (uint64_t)__src;
          if ((_DWORD)__src)
            goto LABEL_25;
        }
        else
        {
          std::system_category();
        }
        if (a3)
          break;
        v13 = 0;
LABEL_40:
        FuncMetadata = llvm::sampleprof::SampleProfileReaderExtBinaryBase::readFuncMetadata(this, a2, v13);
        if ((_DWORD)FuncMetadata)
          goto LABEL_25;
        if (++v10 >= v36)
          goto LABEL_19;
      }
      v26[0] = v34;
      v26[1] = v32;
      __dst[0] = (uint64_t *)v26;
      v14 = sub_1C62A19D0((uint64_t)v11, v26, (uint64_t)v12, __dst);
      v15 = (uint64_t *)__len;
      if (__len >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v16 = v14;
      v23 = v11;
      v17 = (uint64_t)v12;
      v18 = __src;
      if (__len >= 0x17)
      {
        v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v20 = __len | 7;
        v21 = v20 + 1;
        v19 = (uint64_t *)operator new(v20 + 1);
        __dst[1] = v15;
        v25 = v21 | 0x8000000000000000;
        __dst[0] = v19;
      }
      else
      {
        HIBYTE(v25) = __len;
        v19 = (uint64_t *)__dst;
        if (!__len)
          goto LABEL_51;
      }
      memmove(v19, v18, (size_t)v15);
LABEL_51:
      *((_BYTE *)v15 + (_QWORD)v19) = 0;
      v27 = __dst;
      v12 = (void *)v17;
      v22 = sub_1C630A88C((uint64_t)(v16 + 5), (const void **)__dst, v17, (_OWORD **)&v27);
      if (SHIBYTE(v25) < 0)
        operator delete(__dst[0]);
      v13 = (llvm::sampleprof::FunctionSamples *)((char *)v22 + 56);
      v11 = v23;
      goto LABEL_40;
    }
    FuncMetadata = v36;
    if (!(_DWORD)v36)
      goto LABEL_27;
LABEL_25:
    v8 = FuncMetadata & 0xFFFFFFFF00000000;
    return v8 | FuncMetadata;
  }
LABEL_19:
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  LODWORD(FuncMetadata) = 0;
  v8 = 0;
  return v8 | FuncMetadata;
}

unint64_t llvm::sampleprof::SampleProfileReaderCompactBinary::readNameTable(llvm::sampleprof::SampleProfileReaderCompactBinary *this)
{
  unint64_t v2;
  int64x2_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  char *v14;
  __int128 v15;
  int64x2_t v16;
  std::string *v17;
  int v18;
  unint64_t v20;
  std::string v22;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  char *v26;
  unint64_t __val;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7D28((uint64_t)&v29, (uint64_t)this);
  if ((v30 & 1) != 0)
  {
    v2 = v29;
    if ((_DWORD)v29)
    {
LABEL_32:
      v20 = v2 & 0xFFFFFFFF00000000;
      return v2 | v20;
    }
  }
  else
  {
    std::system_category();
    v2 = v29;
  }
  v3 = (int64x2_t *)((char *)this + 192);
  sub_1C5962544((unint64_t *)this + 24, v2);
  if (v2)
  {
    LODWORD(v4) = 0;
    do
    {
      sub_1C5AA7D28((uint64_t)&__val, (uint64_t)this);
      if ((v28 & 1) != 0)
      {
        v2 = __val;
        if ((_DWORD)__val)
          goto LABEL_32;
      }
      else
      {
        std::system_category();
        v2 = __val;
      }
      std::to_string(&v22, v2);
      v5 = *((_QWORD *)this + 25);
      v6 = *((_QWORD *)this + 26);
      if (v5 >= v6)
      {
        v8 = v3->i64[0];
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v3->i64[0]) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v6 - v8) >> 3) > v10)
          v10 = 0x5555555555555556 * ((uint64_t)(v6 - v8) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        v26 = (char *)this + 208;
        if (v11)
        {
          if (v11 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v12 = (char *)operator new(24 * v11);
        }
        else
        {
          v12 = 0;
        }
        v13 = (std::string *)&v12[24 * v9];
        *v13 = v22;
        memset(&v22, 0, sizeof(v22));
        if (v5 == v8)
        {
          v16 = vdupq_n_s64(v5);
          v14 = &v12[24 * v9];
        }
        else
        {
          v14 = &v12[24 * v9];
          do
          {
            v15 = *(_OWORD *)(v5 - 24);
            *((_QWORD *)v14 - 1) = *(_QWORD *)(v5 - 8);
            *(_OWORD *)(v14 - 24) = v15;
            v14 -= 24;
            *(_QWORD *)(v5 - 16) = 0;
            *(_QWORD *)(v5 - 8) = 0;
            *(_QWORD *)(v5 - 24) = 0;
            v5 -= 24;
          }
          while (v5 != v8);
          v16 = *v3;
          v6 = *((_QWORD *)this + 26);
        }
        v17 = v13 + 1;
        *((_QWORD *)this + 24) = v14;
        *((_QWORD *)this + 25) = v13 + 1;
        v24 = v16;
        *((_QWORD *)this + 26) = &v12[24 * v11];
        v25 = v6;
        v23 = v16.i64[0];
        sub_1C4D868F0((uint64_t)&v23);
        v18 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
        *((_QWORD *)this + 25) = v17;
        if (v18 < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      else
      {
        v7 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        *(_QWORD *)(v5 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
        *(_OWORD *)v5 = v7;
        *((_QWORD *)this + 25) = v5 + 24;
      }
      v4 = (v4 + 1);
    }
    while (v29 > v4);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v20 = 0;
  LODWORD(v2) = 0;
  return v2 | v20;
}

unint64_t llvm::sampleprof::SampleProfileReaderBinary::readMagicIdent(llvm::sampleprof::SampleProfileReaderBinary *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  sub_1C5AA7D28((uint64_t)&v11, (uint64_t)this);
  if ((v12 & 1) != 0)
  {
    v2 = v11;
    v3 = v11;
    if ((_DWORD)v11)
    {
      v4 = v11 & 0xFFFFFFFF00000000;
      return v4 | v3;
    }
  }
  else
  {
    std::system_category();
    v2 = v11;
  }
  v5 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileReaderBinary *, uint64_t))(*(_QWORD *)this + 120))(this, v2);
  v3 = v5;
  if ((_DWORD)v5)
  {
    v4 = v5 & 0xFFFFFFFF00000000;
  }
  else
  {
    sub_1C5AA7D28((uint64_t)&v9, (uint64_t)this);
    if ((v10 & 1) != 0)
    {
      v6 = v9;
      v3 = v9;
      if ((_DWORD)v9)
      {
        v4 = v9 & 0xFFFFFFFF00000000;
        return v4 | v3;
      }
    }
    else
    {
      std::system_category();
      v6 = v9;
    }
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v4 = 0;
    v3 = 2 * (v6 != 103);
  }
  return v4 | v3;
}

uint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::getSectionSize(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 296);
  if (v2 == v3)
    return 0;
  result = 0;
  do
  {
    if (*(_DWORD *)v2 == a2)
      v5 = *(_QWORD *)(v2 + 24);
    else
      v5 = 0;
    result += v5;
    v2 += 40;
  }
  while (v2 != v3);
  return result;
}

unint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::getFileSize(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 36);
  v2 = *((_QWORD *)this + 37);
  if (v1 == v2)
    return 0;
  result = 0;
  do
  {
    v4 = *(_QWORD *)(v1 + 24);
    if (v4 + *(_QWORD *)(v1 + 16) > result)
      result = v4 + *(_QWORD *)(v1 + 16);
    v1 += 40;
  }
  while (v1 != v2);
  return result;
}

uint64_t llvm::sampleprof::SampleProfileReaderExtBinaryBase::dumpSectionInfo(llvm::sampleprof::SampleProfileReaderExtBinaryBase *this, llvm::raw_ostream *a2)
{
  llvm::sampleprof::SampleProfileReaderExtBinaryBase *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  void *v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const std::string::value_type *v14;
  uint64_t v15;
  const std::string::value_type *v16;
  uint64_t v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type size;
  char *v22;
  std::string *v23;
  size_t v24;
  _BYTE *v25;
  unint64_t v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  std::string v39;
  void *__p[4];

  v3 = this;
  v5 = *((_QWORD *)this + 36);
  v4 = *((_QWORD *)this + 37);
  if (v5 != v4)
  {
    v6 = 0;
    while (1)
    {
      switch(*(_DWORD *)v5)
      {
        case 0:
          HIBYTE(__p[2]) = 14;
          v7 = "InvalidSection";
          goto LABEL_15;
        case 1:
          HIBYTE(__p[2]) = 21;
          strcpy((char *)__p, "ProfileSummarySection");
          v8 = __p;
          v9 = 21;
          break;
        case 2:
          HIBYTE(__p[2]) = 16;
          v10 = "NameTableSection";
          goto LABEL_12;
        case 3:
          v8 = operator new(0x20uLL);
          __p[0] = v8;
          *(_OWORD *)&__p[1] = xmmword_1C640C690;
          strcpy((char *)v8, "ProfileSymbolListSection");
          v9 = 24;
          break;
        case 4:
          strcpy((char *)__p, "FuncOffsetTableSection");
          HIBYTE(__p[2]) = 22;
          v8 = __p;
          v9 = 22;
          break;
        case 5:
          HIBYTE(__p[2]) = 16;
          v10 = "FunctionMetadata";
LABEL_12:
          *(_OWORD *)__p = *(_OWORD *)v10;
          LOBYTE(__p[2]) = 0;
          v8 = __p;
          v9 = 16;
          break;
        case 6:
          HIBYTE(__p[2]) = 18;
          strcpy((char *)__p, "CSNameTableSection");
          v8 = __p;
          v9 = 18;
          break;
        default:
          if (*(_DWORD *)v5 == 32)
          {
            HIBYTE(__p[2]) = 17;
            strcpy((char *)__p, "LBRProfileSection");
            v8 = __p;
            v9 = 17;
          }
          else
          {
            HIBYTE(__p[2]) = 14;
            v7 = "UnknownSection";
LABEL_15:
            __p[0] = *(void **)v7;
            *(void **)((char *)__p + 6) = *(void **)(v7 + 6);
            BYTE6(__p[1]) = 0;
            v8 = __p;
            v9 = 14;
          }
          break;
      }
      llvm::raw_ostream::write(a2, (const char *)v8, v9);
      v11 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 0xA)
      {
        *(_DWORD *)(v11 + 7) = 540701797;
        *(_QWORD *)v11 = *(_QWORD *)" - Offset: ";
        *((_QWORD *)a2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a2, " - Offset: ", 0xBuLL);
      }
      sub_1C5E21910(a2, *(_QWORD *)(v5 + 16), 0, 0, 0);
      v12 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 7uLL)
      {
        *v12 = 0x203A657A6953202CLL;
        *((_QWORD *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", Size: ", 8uLL);
      }
      sub_1C5E21910(a2, *(_QWORD *)(v5 + 24), 0, 0, 0);
      v13 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 8)
      {
        *(_BYTE *)(v13 + 8) = 32;
        *(_QWORD *)v13 = *(_QWORD *)", Flags: ";
        *((_QWORD *)a2 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", Flags: ", 9uLL);
      }
      memset(&v39, 0, sizeof(v39));
      if ((*(_QWORD *)(v5 + 8) & 1) != 0)
        v14 = "{compressed,";
      else
        v14 = "{";
      std::string::append(&v39, v14);
      if ((*(_BYTE *)(v5 + 8) & 2) != 0)
        std::string::append(&v39, "flat,");
      switch(*(_DWORD *)v5)
      {
        case 1:
          v15 = *(_QWORD *)(v5 + 8);
          if ((v15 & 0x100000000) != 0)
          {
            std::string::append(&v39, "partial,");
            v15 = *(_QWORD *)(v5 + 8);
            if ((v15 & 0x200000000) == 0)
            {
LABEL_30:
              if ((v15 & 0x1000000000) == 0)
                goto LABEL_32;
LABEL_31:
              std::string::append(&v39, "context-nested,");
              v15 = *(_QWORD *)(v5 + 8);
              goto LABEL_32;
            }
          }
          else if ((v15 & 0x200000000) == 0)
          {
            goto LABEL_30;
          }
          std::string::append(&v39, "context,");
          v15 = *(_QWORD *)(v5 + 8);
          if ((v15 & 0x1000000000) != 0)
            goto LABEL_31;
LABEL_32:
          v16 = "fs-discriminator,";
          if ((v15 & 0x400000000) != 0)
            goto LABEL_44;
LABEL_45:
          v20 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v39;
          size = *((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x7F;
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v39.__r_.__value_.__l.__size_;
          v22 = (char *)v20 + size;
          if (*(v22 - 1) == 44)
            *(v22 - 1) = 125;
          else
            std::string::append(&v39, "}");
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v39;
          else
            v23 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = *((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x7F;
          else
            v24 = v39.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write(a2, (const char *)v23, v24);
          v25 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v25)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v25 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v6 += *(_QWORD *)(v5 + 24);
          v5 += 40;
          if (v5 == v4)
          {
            v3 = this;
            v5 = *((_QWORD *)this + 36);
            goto LABEL_74;
          }
          break;
        case 2:
          v17 = *(_QWORD *)(v5 + 8);
          v18 = "fixlenmd5,";
          if ((v17 & 0x200000000) != 0 || (v18 = "md5,", (v17 & 0x100000000) != 0))
            std::string::append(&v39, v18);
          v16 = "uniq,";
          if ((*(_BYTE *)(v5 + 12) & 4) != 0)
            goto LABEL_44;
          goto LABEL_45;
        case 4:
          v16 = "ordered,";
          if ((*(_BYTE *)(v5 + 12) & 1) != 0)
            goto LABEL_44;
          goto LABEL_45;
        case 5:
          v19 = *(_QWORD *)(v5 + 8);
          if ((v19 & 0x100000000) != 0)
          {
            std::string::append(&v39, "probe,");
            v19 = *(_QWORD *)(v5 + 8);
          }
          v16 = "attr,";
          if ((v19 & 0x200000000) != 0)
LABEL_44:
            std::string::append(&v39, v16);
          goto LABEL_45;
        default:
          goto LABEL_45;
      }
    }
  }
  v6 = 0;
LABEL_74:
  v26 = *(_QWORD *)(v5 + 16);
  v27 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v27 > 0xCuLL)
  {
    qmemcpy(v27, "Header Size: ", 13);
    *((_QWORD *)a2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Header Size: ", 0xDuLL);
  }
  sub_1C5E21910(a2, v26, 0, 0, 0);
  v28 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v28)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    v29 = (void *)*((_QWORD *)a2 + 4);
  }
  else
  {
    *v28 = 10;
    v29 = (void *)(*((_QWORD *)a2 + 4) + 1);
    *((_QWORD *)a2 + 4) = v29;
  }
  if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 0x14uLL)
  {
    qmemcpy(v29, "Total Sections Size: ", 21);
    *((_QWORD *)a2 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Total Sections Size: ", 0x15uLL);
  }
  sub_1C5E21910(a2, v6, 0, 0, 0);
  v30 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v30)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    v31 = *((_QWORD *)a2 + 4);
  }
  else
  {
    *v30 = 10;
    v31 = *((_QWORD *)a2 + 4) + 1;
    *((_QWORD *)a2 + 4) = v31;
  }
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v31) > 0xA)
  {
    *(_DWORD *)(v31 + 7) = 540697978;
    *(_QWORD *)v31 = *(_QWORD *)"File Size: ";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, "File Size: ", 0xBuLL);
  }
  v32 = *((_QWORD *)v3 + 36);
  v33 = *((_QWORD *)v3 + 37);
  if (v32 == v33)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(v32 + 24);
      if (v35 + *(_QWORD *)(v32 + 16) > v34)
        v34 = v35 + *(_QWORD *)(v32 + 16);
      v32 += 40;
    }
    while (v32 != v33);
  }
  sub_1C5E21910(a2, v34, 0, 0, 0);
  v36 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v36)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v36 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  return 1;
}

BOOL llvm::sampleprof::SampleProfileReaderCompactBinary::collectFuncsFromModule(llvm::sampleprof::SampleProfileReaderCompactBinary *this)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  llvm::Value *v7;
  uint64_t v8;
  __int128 v10;
  _BYTE v11[31];

  v1 = *((_QWORD *)this + 17);
  if (v1)
  {
    v3 = (char *)this + 240;
    sub_1C5934C08((_DWORD *)this + 60);
    v4 = *((_QWORD *)this + 17);
    v5 = v4 + 24;
    for (i = *(_QWORD *)(v4 + 32); i != v5; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v7 = (llvm::Value *)(i - 56);
      else
        v7 = 0;
      *(_QWORD *)&v10 = sub_1C6200B8C(v7);
      *((_QWORD *)&v10 + 1) = v8;
      sub_1C630A55C((unint64_t)v3, &v10, (uint64_t)v11);
    }
  }
  return v1 != 0;
}

BOOL llvm::sampleprof::SampleProfileReaderRawBinary::hasFormat(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  char *i;
  char v4;
  uint64_t v5;

  v1 = 0;
  v2 = 0;
  for (i = *(char **)(a1 + 8); i; ++i)
  {
    v4 = *i;
    v5 = *i & 0x7F;
    if (v2 >= 0x40 && (*i & 0x7F) != 0)
      break;
    if ((unint64_t)(v5 << v2) >> v2 != v5)
      break;
    v1 += v5 << v2;
    v2 += 7;
    if ((v4 & 0x80) == 0)
      return v1 == 0x5350524F463432FFLL;
  }
  v1 = 0;
  return v1 == 0x5350524F463432FFLL;
}

BOOL llvm::sampleprof::SampleProfileReaderExtBinary::hasFormat(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  char *i;
  char v4;
  uint64_t v5;

  v1 = 0;
  v2 = 0;
  for (i = *(char **)(a1 + 8); i; ++i)
  {
    v4 = *i;
    v5 = *i & 0x7F;
    if (v2 >= 0x40 && (*i & 0x7F) != 0)
      break;
    if ((unint64_t)(v5 << v2) >> v2 != v5)
      break;
    v1 += v5 << v2;
    v2 += 7;
    if ((v4 & 0x80) == 0)
      return v1 == 0x5350524F46343204;
  }
  v1 = 0;
  return v1 == 0x5350524F46343204;
}

BOOL llvm::sampleprof::SampleProfileReaderCompactBinary::hasFormat(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  char *i;
  char v4;
  uint64_t v5;

  v1 = 0;
  v2 = 0;
  for (i = *(char **)(a1 + 8); i; ++i)
  {
    v4 = *i;
    v5 = *i & 0x7F;
    if (v2 >= 0x40 && (*i & 0x7F) != 0)
      break;
    if ((unint64_t)(v5 << v2) >> v2 != v5)
      break;
    v1 += v5 << v2;
    v2 += 7;
    if ((v4 & 0x80) == 0)
      return v1 == 0x5350524F46343202;
  }
  v1 = 0;
  return v1 == 0x5350524F46343202;
}

void llvm::sampleprof::SampleProfileReaderGCC::readString(llvm::sampleprof::SampleProfileReaderGCC *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  char v4;
  unint64_t v6;
  __int128 v7;

  v7 = 0uLL;
  v3 = sub_1C5A836AC((uint64_t)this + 152, (unint64_t *)&v7);
  v4 = *(_BYTE *)(a2 + 16);
  if (v3)
  {
    *(_BYTE *)(a2 + 16) = v4 & 0xFE;
    *(_OWORD *)a2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 16) = v4 | 1;
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v6 = qword_1EF8F7270[0];
    *(_QWORD *)a2 = 4;
    *(_QWORD *)(a2 + 8) = v6;
  }
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readNameTable(int64x2_t *this)
{
  unint64_t SectionTag;
  uint64_t v3;
  unint64_t v4;
  unsigned int i;
  size_t v7;
  void *v8;
  __int128 *p_dst;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  char v23;
  char *v24;
  __int128 __dst;
  unint64_t v28;
  void *__src;
  size_t __len;
  unsigned int v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  int64x2_t *v35;

  SectionTag = llvm::sampleprof::SampleProfileReaderGCC::readSectionTag((llvm::sampleprof::SampleProfileReaderGCC *)this, -1442840576);
  v3 = SectionTag;
  if (!(_DWORD)SectionTag)
  {
    v31 = 0;
    if (sub_1C6307494(&this[9].i64[1], &v31))
    {
      if (v31)
      {
        for (i = 0; i < v31; ++i)
        {
          __src = 0;
          __len = 0;
          if (!sub_1C5A836AC((uint64_t)&this[9].i64[1], (unint64_t *)&__src))
            goto LABEL_39;
          v7 = __len;
          if (__len >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_43;
          v8 = __src;
          if (__len >= 0x17)
          {
            v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v10 = __len | 7;
            v11 = v10 + 1;
            p_dst = (__int128 *)operator new(v10 + 1);
            *((_QWORD *)&__dst + 1) = v7;
            v28 = v11 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v28) = __len;
            p_dst = &__dst;
            if (!__len)
              goto LABEL_16;
          }
          memmove(p_dst, v8, v7);
LABEL_16:
          *((_BYTE *)p_dst + v7) = 0;
          v12 = this[13].u64[1];
          v13 = this[14].u64[0];
          if (v12 >= v13)
          {
            v14 = this[13].i64[0];
            v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
            v16 = v15 + 1;
            if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_43:
              abort();
            if (0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3) > v16)
              v16 = 0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3) >= 0x555555555555555)
              v17 = 0xAAAAAAAAAAAAAAALL;
            else
              v17 = v16;
            v35 = this + 14;
            if (v17)
            {
              if (v17 > 0xAAAAAAAAAAAAAAALL)
                sub_1C4764EE4();
              v18 = (char *)operator new(24 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
            *(_OWORD *)v19 = __dst;
            *((_QWORD *)v19 + 2) = v28;
            v28 = 0;
            __dst = 0uLL;
            if (v12 == v14)
            {
              v23 = 0;
              v22 = vdupq_n_s64(v12);
              v20 = &v18[24 * v15];
            }
            else
            {
              v20 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
              do
              {
                v21 = *(_OWORD *)(v12 - 24);
                *((_QWORD *)v20 - 1) = *(_QWORD *)(v12 - 8);
                *(_OWORD *)(v20 - 24) = v21;
                v20 -= 24;
                *(_QWORD *)(v12 - 16) = 0;
                *(_QWORD *)(v12 - 8) = 0;
                *(_QWORD *)(v12 - 24) = 0;
                v12 -= 24;
              }
              while (v12 != v14);
              v22 = this[13];
              v13 = this[14].u64[0];
              v23 = HIBYTE(v28);
            }
            v24 = v19 + 24;
            this[13].i64[0] = (uint64_t)v20;
            this[13].i64[1] = (uint64_t)(v19 + 24);
            v33 = v22;
            this[14].i64[0] = (uint64_t)&v18[24 * v17];
            v34 = v13;
            v32 = v22.i64[0];
            sub_1C4D868F0((uint64_t)&v32);
            this[13].i64[1] = (uint64_t)v24;
            if (v23 < 0)
              operator delete((void *)__dst);
          }
          else
          {
            *(_OWORD *)v12 = __dst;
            *(_QWORD *)(v12 + 16) = v28;
            this[13].i64[1] = v12 + 24;
          }
        }
      }
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
      v3 = 0;
    }
    else
    {
LABEL_39:
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
      v3 = 4;
    }
    v4 = 0;
    return v4 | v3;
  }
  v4 = SectionTag & 0xFFFFFFFF00000000;
  return v4 | v3;
}

unint64_t llvm::sampleprof::SampleProfileReaderGCC::readOneFunctionProfile(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned int a4)
{
  unint64_t v9;
  size_t v10;
  uint64_t v12;
  char v13;
  void *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unint64_t *v18;
  int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char v25;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  void **p_dst;
  void *__dst;
  uint64_t v62;
  unint64_t v63;
  _QWORD v64[11];

  v64[9] = *MEMORY[0x1E0C80C00];
  v57 = 0;
  if (!*((_DWORD *)a2 + 2) && !sub_1C630756C((_QWORD *)(a1 + 152), &v57)
    || (v56 = 0, !sub_1C6307494((_QWORD *)(a1 + 152), &v56))
    || ((v12 = *(_QWORD *)(a1 + 208) + 24 * v56, v13 = *(_BYTE *)(v12 + 23), v13 >= 0)
      ? (v14 = (void *)(*(_QWORD *)(a1 + 208) + 24 * v56))
      : (v14 = *(void **)v12),
        v13 >= 0 ? (v10 = v13 & 0x7F) : (v10 = *(_QWORD *)(v12 + 8)),
        (v55 = 0, !sub_1C6307494((_QWORD *)(a1 + 152), &v55)) || (v54 = 0, !sub_1C6307494((_QWORD *)(a1 + 152), &v54))))
  {
LABEL_4:
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v9 = 0;
LABEL_7:
    LODWORD(v10) = 4;
    return v9 & 0xFFFFFFFF00000000 | v10;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    __dst = v14;
    v62 = v10;
    v64[0] = 0;
    v64[1] = 0;
    v63 = 0;
    p_dst = &__dst;
    v15 = sub_1C57611EC(a1 + 8, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&p_dst);
    v16 = v15 + 56;
    sub_1C5753D6C((uint64_t)(v15 + 56), v57, 1uLL);
    if (*((_QWORD *)v15 + 14))
      a3 = 0;
    else
      a3 = a3;
    goto LABEL_21;
  }
  v36 = **a2;
  v58 = HIWORD(a4);
  v59 = (unsigned __int16)a4;
  __dst = &v58;
  v37 = sub_1C62A19D0(v36 + 96, &v58, (uint64_t)&std::piecewise_construct, (uint64_t **)&__dst);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v38 = (uint64_t)(v37 + 5);
  if (v10 >= 0x17)
  {
    v40 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v40 = v10 | 7;
    v41 = v40 + 1;
    v39 = operator new(v40 + 1);
    v62 = v10;
    v63 = v41 | 0x8000000000000000;
    __dst = v39;
    goto LABEL_80;
  }
  HIBYTE(v63) = v10;
  v39 = &__dst;
  if (v10)
LABEL_80:
    memmove(v39, v14, v10);
  *((_BYTE *)v39 + v10) = 0;
  p_dst = &__dst;
  v16 = (char *)sub_1C630A88C(v38, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_dst) + 56;
  if (SHIBYTE(v63) < 0)
    operator delete(__dst);
LABEL_21:
  *((_QWORD *)v16 + 2) = v14;
  *((_QWORD *)v16 + 3) = v10;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *((_DWORD *)v16 + 12) = 0;
  if (v55)
  {
    v17 = 0;
    v18 = &v63;
    v46 = (uint64_t)(v16 + 72);
    while (1)
    {
      v53 = 0;
      if (!sub_1C6307494((_QWORD *)(a1 + 152), &v53))
        break;
      v52 = 0;
      if (!sub_1C6307494((_QWORD *)(a1 + 152), &v52))
        break;
      v51 = 0;
      if (!sub_1C630756C((_QWORD *)(a1 + 152), &v51))
        break;
      v44 = (unsigned __int16)v53;
      v45 = HIWORD(v53);
      __dst = v18;
      v63 = (unint64_t)v16;
      v62 = 0xA00000001;
      sub_1C618FC28((unsigned int *)&__dst, (uint64_t)v64, *a2, &(*a2)[*((unsigned int *)a2 + 2)]);
      v47 = v18;
      if ((_DWORD)a3)
      {
        if ((_DWORD)v62)
        {
          v28 = (uint64_t *)__dst;
          v29 = 8 * v62;
          do
          {
            v30 = *v28++;
            sub_1C5753CE8(v30, v51, 1uLL);
            v29 -= 8;
          }
          while (v29);
        }
        v31 = v51;
        v58 = v45;
        v59 = v44;
        p_dst = (void **)&v58;
        v32 = sub_1C630CE7C(v46, &v58, &p_dst);
        sub_1C5AA0480((uint64_t *)v32 + 5, v31, 1uLL);
      }
      if (v52)
      {
        v19 = 0;
        while (1)
        {
          v50 = 0;
          if (!sub_1C6307494((_QWORD *)(a1 + 152), &v50))
            break;
          if (v50 != 7)
          {
            LODWORD(v10) = 5;
            goto LABEL_43;
          }
          v49 = 0;
          if (!sub_1C630756C((_QWORD *)(a1 + 152), &v49))
            goto LABEL_46;
          v20 = *(_QWORD *)(a1 + 208) + 24 * v49;
          v21 = *(_BYTE *)(v20 + 23);
          v22 = *(_QWORD *)(v20 + 8);
          if (v21 < 0)
            v20 = *(_QWORD *)v20;
          v43 = (unsigned __int8 *)v20;
          v23 = v21 >= 0 ? v21 & 0x7F : v22;
          v48 = 0;
          if (!sub_1C630756C((_QWORD *)(a1 + 152), &v48))
          {
LABEL_46:
            if (!atomic_load(qword_1EF8F7270))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
            LODWORD(v10) = 4;
            goto LABEL_49;
          }
          if ((_DWORD)a3)
          {
            v42 = v48;
            v58 = v45;
            v59 = v44;
            p_dst = (void **)&v58;
            v24 = sub_1C630CE7C(v46, &v58, &p_dst);
            sub_1C5AA0504((uint64_t)(v24 + 40), v43, v23, v42, 1uLL);
          }
          if (++v19 >= v52)
            goto LABEL_41;
        }
        LODWORD(v10) = 4;
LABEL_43:
        if (!atomic_load(qword_1EF8F7270))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
LABEL_49:
        v25 = 1;
      }
      else
      {
LABEL_41:
        v25 = 0;
      }
      if (__dst != v47)
        free(__dst);
      if ((v25 & 1) != 0)
      {
        v9 = 0;
        return v9 & 0xFFFFFFFF00000000 | v10;
      }
      ++v17;
      v18 = v47;
      if (v17 >= v55)
        goto LABEL_63;
    }
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v9 = 0;
    goto LABEL_7;
  }
LABEL_63:
  if (v54)
  {
    v34 = 0;
    do
    {
      LODWORD(p_dst) = 0;
      if (!sub_1C6307494((_QWORD *)(a1 + 152), &p_dst))
        goto LABEL_4;
      __dst = &v63;
      v63 = (unint64_t)v16;
      v62 = 0xA00000001;
      sub_1C618FC28((unsigned int *)&__dst, (uint64_t)v64, *a2, &(*a2)[*((unsigned int *)a2 + 2)]);
      v10 = llvm::sampleprof::SampleProfileReaderGCC::readOneFunctionProfile(a1, &__dst, a3, p_dst);
      if (__dst != &v63)
        free(__dst);
      if ((_DWORD)v10)
      {
        v9 = v10 & 0xFFFFFFFF00000000;
        return v9 & 0xFFFFFFFF00000000 | v10;
      }
    }
    while (++v34 < v54);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  LODWORD(v10) = 0;
  v9 = 0;
  return v9 & 0xFFFFFFFF00000000 | v10;
}

uint64_t llvm::sampleprof::SampleProfileReaderItaniumRemapper::applyRemapping(llvm::sampleprof::SampleProfileReaderItaniumRemapper *this, llvm::LLVMContext *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  char *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  __int16 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char **v25;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 5) + 56) + 16))(*(_QWORD *)(*((_QWORD *)this + 5) + 56));
    v17 = "Profile data remapping cannot be applied to profile data in compact format (original mangled names are not available).";
    v19 = 259;
    LODWORD(v21) = 8;
    BYTE4(v21) = 1;
    v20 = (char *)&unk_1E814E700;
    v22 = v5;
    v23 = v6;
    v24 = 0;
    v25 = &v17;
    return llvm::LLVMContext::diagnose((uint64_t)a2, (const llvm::DiagnosticInfo *)&v20);
  }
  else
  {
    for (i = *(_QWORD **)(*((_QWORD *)this + 5) + 24); i; i = (_QWORD *)*i)
    {
      v20 = 0;
      v21 = 0;
      LODWORD(v22) = 0;
      llvm::sampleprof::FunctionSamples::findAllNames((uint64_t)(i + 7), (unint64_t)&v20);
      v8 = v20;
      v9 = (unint64_t *)&v20[16 * v22];
      if ((_DWORD)v21)
      {
        if ((_DWORD)v22)
        {
          v10 = 16 * v22;
          v11 = (unint64_t *)v20;
          while (*v11 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v11 += 2;
            v10 -= 16;
            if (!v10)
              goto LABEL_9;
          }
        }
        else
        {
          v11 = (unint64_t *)v20;
        }
      }
      else
      {
LABEL_9:
        v11 = (unint64_t *)&v20[16 * v22];
      }
      v12 = &v20[16 * v22];
      if (v11 != (unint64_t *)v12)
      {
        do
        {
          v13 = sub_1C5DF9694(**((_QWORD **)this + 1), (char *)*v11, v11[1], 1);
          if (v13)
          {
            v17 = (const char *)v13;
            v18 = *(_OWORD *)v11;
            sub_1C6309484((uint64_t)this + 16, &v17, &v18, (uint64_t)&v16);
          }
          v14 = v11 + 2;
          while (v14 != v9)
          {
            v15 = *v14;
            v14 += 2;
            if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v11 = v14 - 2;
              goto LABEL_19;
            }
          }
          v11 = v9;
LABEL_19:
          ;
        }
        while (v11 != (unint64_t *)v12);
        v8 = v20;
      }
      result = MEMORY[0x1CAA32FB4](v8, 8);
    }
    *((_BYTE *)this + 48) = 1;
  }
  return result;
}

uint64_t llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  result = sub_1C5DF9694(**(_QWORD **)(a1 + 8), a2, a3, 0);
  if (result)
  {
    v7 = *(_DWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = v7 - 1;
      v10 = v9 & (37 * result);
      v11 = (uint64_t *)(v8 + 24 * v10);
      v12 = *v11;
      if (result == *v11)
      {
LABEL_4:
        v13 = v11[1];
        v14 = v11[2];
      }
      else
      {
        v15 = 1;
        while (v12 != -1)
        {
          v16 = v10 + v15++;
          v10 = v16 & v9;
          v11 = (uint64_t *)(v8 + 24 * v10);
          v12 = *v11;
          if (result == *v11)
            goto LABEL_4;
        }
        v13 = 0;
        v14 = 0;
      }
      *(_QWORD *)a4 = v13;
      *(_QWORD *)(a4 + 8) = v14;
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  return result;
}

void llvm::sampleprof::SampleProfileReader::create(uint64_t a1@<X0>, const llvm::MemoryBuffer *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::sampleprof::SampleProfileReaderGCC *v11;
  llvm::sampleprof::SampleProfileReaderGCC *v12;
  void *__p[2];
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  llvm::sampleprof::SampleProfileReaderGCC *v17[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 260;
  v15[0] = a1;
  sub_1C5AABB94((llvm::Twine *)v15, a3, (uint64_t)v17);
  if ((v18 & 1) != 0)
  {
    v11 = v17[0];
    if (LODWORD(v17[0]))
    {
      v12 = v17[1];
      *(_BYTE *)(a6 + 16) |= 1u;
      *(_QWORD *)a6 = v11;
      *(_QWORD *)(a6 + 8) = v12;
      goto LABEL_10;
    }
  }
  else
  {
    std::system_category();
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v14 = *(_QWORD *)(a5 + 16);
  }
  llvm::sampleprof::SampleProfileReader::create(v17, a2, a3, a4, (uint64_t)__p, a6);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
LABEL_10:
  if ((v18 & 1) == 0)
  {
    if (v17[0])
      (*(void (**)(llvm::sampleprof::SampleProfileReaderGCC *))(*(_QWORD *)v17[0] + 8))(v17[0]);
  }
}

void sub_1C5AABB94(llvm::Twine *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const void *p_p;
  int v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(a1, &__p);
  if ((v19 & 0x80u) == 0)
    v6 = v19 & 0x7F;
  else
    v6 = v18;
  if (v6 == 1
    && ((v19 & 0x80u) == 0 ? (v7 = v19) : (v7 = v18),
        (v19 & 0x80u) == 0 ? (p_p = &__p) : (p_p = __p),
        (v9 = memcmp(p_p, "-", v7 != 0), v7 == 1) ? (v10 = v9 == 0) : (v10 = 0),
        v10))
  {
    llvm::MemoryBuffer::getSTDIN((uint64_t)v20);
  }
  else
  {
    llvm::vfs::FileSystem::getBufferForFile(a2, (uint64_t)a1, -1, 1, 0, 0, (uint64_t)v20);
  }
  if ((char)v19 < 0)
    operator delete(__p);
  if ((v21 & 1) != 0)
  {
    v11 = (_QWORD *)v20[0];
    if (LODWORD(v20[0]))
    {
      v12 = v20[1];
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
      *(_QWORD *)(a3 + 8) = v12;
      goto LABEL_27;
    }
  }
  else
  {
    std::system_category();
    v11 = (_QWORD *)v20[0];
  }
  v20[0] = 0;
  v13 = *(_BYTE *)(a3 + 16);
  if ((v11[2] - v11[1]) >> 32)
  {
    *(_BYTE *)(a3 + 16) = v13 | 1;
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v15 = qword_1EF8F7270[0];
    *(_QWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = v15;
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    *(_BYTE *)(a3 + 16) = v13 & 0xFE;
    *(_QWORD *)a3 = v11;
  }
LABEL_27:
  if ((v21 & 1) == 0)
  {
    v16 = v20[0];
    v20[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void llvm::sampleprof::SampleProfileReader::create(llvm::sampleprof::SampleProfileReaderGCC **a1@<X0>, const llvm::MemoryBuffer *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  unsigned int v13;
  llvm::sampleprof::SampleProfileReaderText *v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  std::string::size_type v20;
  uint64_t (**v21)();
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::MemoryBuffer *v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::sampleprof::SampleProfileReaderGCC *v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  char v45;
  BOOL v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  void **v51;
  __int16 v52;
  std::string v53;
  uint64_t v54;
  int v55;
  void ***v56;
  void *v57[2];
  std::string::size_type v58;
  std::error_code v59;
  void *__p[2];
  uint64_t v61;
  llvm::sampleprof::SampleProfileReaderGCC *v62;
  uint64_t v63;
  uint64_t v64;
  std::error_code v65;
  char v66;
  uint64_t v67;

  v12 = 0;
  v13 = 0;
  v67 = *MEMORY[0x1E0C80C00];
  v14 = *a1;
  v15 = (char *)*((_QWORD *)*a1 + 1);
  v16 = v15;
  do
  {
    if (!v16)
      goto LABEL_11;
    v17 = *v16;
    v18 = *v16 & 0x7F;
    if (v13 >= 0x40 && (*v16 & 0x7F) != 0)
      goto LABEL_11;
    if ((unint64_t)(v18 << v13) >> v13 != v18)
      goto LABEL_11;
    v12 += v18 << v13;
    v13 += 7;
    ++v16;
  }
  while (v17 < 0);
  if (v12 == 0x5350524F463432FFLL)
  {
    v19 = (_QWORD *)operator new();
    v20 = (std::string::size_type)*a1;
    *a1 = 0;
    v53.__r_.__value_.__r.__words[0] = v20;
    sub_1C630CF38((uint64_t)v19, (uint64_t *)&v53, (uint64_t)a2, 255);
    if (v53.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v53.__r_.__value_.__l.__data_ + 8))(v53.__r_.__value_.__r.__words[0]);
    v21 = &off_1E8193340;
LABEL_21:
    *v19 = v21;
    goto LABEL_34;
  }
LABEL_11:
  v22 = 0;
  v23 = 0;
  v24 = (char *)*((_QWORD *)*a1 + 1);
  do
  {
    if (!v24)
      goto LABEL_22;
    v25 = *v24;
    v26 = *v24 & 0x7F;
    if (v23 >= 0x40 && (*v24 & 0x7F) != 0)
      goto LABEL_22;
    if ((unint64_t)(v26 << v23) >> v23 != v26)
      goto LABEL_22;
    v22 += v26 << v23;
    v23 += 7;
    ++v24;
  }
  while (v25 < 0);
  if (v22 == 0x5350524F46343204)
  {
    v19 = (_QWORD *)operator new();
    v27 = (std::string::size_type)*a1;
    *a1 = 0;
    v53.__r_.__value_.__r.__words[0] = v27;
    sub_1C630CFF0((uint64_t)v19, (uint64_t *)&v53, (uint64_t)a2);
    if (v53.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v53.__r_.__value_.__l.__data_ + 8))(v53.__r_.__value_.__r.__words[0]);
    v21 = &off_1E8193470;
    goto LABEL_21;
  }
LABEL_22:
  v28 = 0;
  v29 = 0;
  do
  {
    if (!v15)
      goto LABEL_31;
    v30 = *v15;
    v31 = *v15 & 0x7F;
    if (v29 >= 0x40 && (*v15 & 0x7F) != 0)
      goto LABEL_31;
    if ((unint64_t)(v31 << v29) >> v29 != v31)
      goto LABEL_31;
    v28 += v31 << v29;
    v29 += 7;
    ++v15;
  }
  while (v30 < 0);
  if (v28 == 0x5350524F46343202)
  {
    v19 = (_QWORD *)operator new();
    v32 = (uint64_t)*a1;
    *a1 = 0;
    v64 = v32;
    sub_1C630D0A4((uint64_t)v19, &v64, (uint64_t)a2);
    v33 = v64;
    if (!v64)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_31:
  if (llvm::sampleprof::SampleProfileReaderGCC::hasFormat(*a1, a2))
  {
    v19 = (_QWORD *)operator new();
    v35 = (uint64_t)*a1;
    *a1 = 0;
    v63 = v35;
    sub_1C630D118((uint64_t)v19, &v63, (uint64_t)a2);
    v33 = v63;
    if (!v63)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (!llvm::sampleprof::SampleProfileReaderText::hasFormat(v14, v34))
  {
    *(_BYTE *)(a6 + 16) |= 1u;
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v37 = qword_1EF8F7270[0];
    *(_QWORD *)a6 = 6;
    *(_QWORD *)(a6 + 8) = v37;
    return;
  }
  v19 = (_QWORD *)operator new();
  v41 = *a1;
  *a1 = 0;
  v62 = v41;
  sub_1C630D1D0((uint64_t)v19, (uint64_t *)&v62, (uint64_t)a2);
  v33 = (uint64_t)v62;
  if (v62)
LABEL_33:
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_34:
  if (*(char *)(a5 + 23) < 0)
  {
    v38 = *(_QWORD *)(a5 + 8);
    if (v38)
    {
      sub_1C47EBC30(__p, *(void **)a5, v38);
      goto LABEL_49;
    }
  }
  else if (*(_BYTE *)(a5 + 23))
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v61 = *(_QWORD *)(a5 + 16);
LABEL_49:
    llvm::sampleprof::SampleProfileReaderItaniumRemapper::create((uint64_t)__p, a3, (uint64_t)v19, (uint64_t)a2, (uint64_t)&v65);
    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
    if ((v66 & 1) != 0)
    {
      v42 = *(_QWORD *)&v65.__val_;
      v59 = v65;
      if (v65.__val_)
      {
        std::error_code::message(&v53, &v59);
        v43 = std::string::insert(&v53, 0, "Could not create remapper: ");
        v44 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)v57 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v58 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        v45 = *(_BYTE *)(a5 + 23);
        v46 = v45 < 0;
        v47 = *(void **)a5;
        if (v45 >= 0)
          v47 = (void *)a5;
        v48 = v45 & 0x7F;
        if (v46)
          v48 = *(_QWORD *)(a5 + 8);
        v52 = 260;
        v51 = v57;
        LODWORD(v53.__r_.__value_.__r.__words[1]) = 8;
        v53.__r_.__value_.__s.__data_[12] = 0;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E700;
        v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v47;
        v54 = v48;
        v55 = 0;
        v56 = &v51;
        llvm::LLVMContext::diagnose((uint64_t)a2, (const llvm::DiagnosticInfo *)&v53);
        *(_BYTE *)(a6 + 16) |= 1u;
        *(std::error_code *)a6 = v59;
        if (SHIBYTE(v58) < 0)
          operator delete(v57[0]);
        goto LABEL_44;
      }
    }
    else
    {
      std::system_category();
      v42 = *(_QWORD *)&v65.__val_;
    }
    v49 = (uint64_t *)v19[14];
    v19[14] = v42;
    if (v49)
    {
      v50 = sub_1C630D480(v49);
      MEMORY[0x1CAA32FC0](v50, 0x1020C409CDB6E5ELL);
    }
  }
  v39 = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
  if ((_DWORD)v39)
  {
    *(_BYTE *)(a6 + 16) |= 1u;
    *(_QWORD *)a6 = v39;
    *(_QWORD *)(a6 + 8) = v40;
LABEL_44:
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    return;
  }
  *((_DWORD *)v19 + 36) = 6 * a4 + 7;
  *(_BYTE *)(a6 + 16) &= ~1u;
  *(_QWORD *)a6 = v19;
}

uint64_t llvm::sampleprof::SampleProfileReaderItaniumRemapper::create@<X0>(llvm::MemoryBuffer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::ItaniumManglingCanonicalizer *v8;
  llvm::ItaniumManglingCanonicalizer *v9;
  char *v10;
  uint64_t result;
  llvm::MemoryBuffer *v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  _QWORD v20[2];
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;

  v8 = (llvm::ItaniumManglingCanonicalizer *)operator new();
  *(_QWORD *)v8 = 0;
  v9 = llvm::ItaniumManglingCanonicalizer::ItaniumManglingCanonicalizer(v8);
  llvm::SymbolRemappingReader::read(v9, *a1, &v21);
  v10 = v21;
  if (!v21)
  {
    result = operator new();
    v12 = *a1;
    *a1 = 0;
    *(_QWORD *)result = v12;
    *(_QWORD *)(result + 8) = v8;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = a2;
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = result;
    return result;
  }
  v20[1] = a1;
  v21 = 0;
  v20[0] = a3;
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v10 + 48))(v10, &llvm::ErrorList::ID))
  {
    v13 = (uint64_t *)*((_QWORD *)v10 + 1);
    v14 = (uint64_t *)*((_QWORD *)v10 + 2);
    if (v13 == v14)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v25 = v15;
        v16 = *v13;
        *v13 = 0;
        v23 = v16;
        sub_1C5AAD698(&v24, &v23, (uint64_t)v20);
        sub_1C6174794(&v25, &v24, &v26);
        v15 = v26;
        v26 = 0;
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
        v17 = v23;
        v23 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (v25)
          (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
        ++v13;
      }
      while (v13 != v14);
    }
    v22 = v15;
  }
  else
  {
    v26 = v10;
    sub_1C5AAD698(&v22, &v26, (uint64_t)v20);
    v10 = v26;
    if (!v26)
      goto LABEL_18;
  }
  (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
LABEL_18:
  *(_BYTE *)(a4 + 16) |= 1u;
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v19 = qword_1EF8F7270[0];
  *(_QWORD *)a4 = 5;
  *(_QWORD *)(a4 + 8) = v19;
  if (v21)
    (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
  llvm::ItaniumManglingCanonicalizer::~ItaniumManglingCanonicalizer(v8);
  return MEMORY[0x1CAA32FC0]();
}

_QWORD *sub_1C5AAC4E0(_QWORD *a1, int *a2, size_t size)
{
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::string v11;
  unint64_t __val[2];
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(&v11, 0, sizeof(v11));
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (size && (v6 & 1) != 0)
  {
    v14 = xmmword_1C85F4BB0;
    v15 = 0;
    llvm::MD5::update((int *)&v14, a2, size);
    llvm::MD5::final((int *)&v14, (int *)__val);
    std::to_string(&v11, __val[0]);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = (int *)&v11;
    else
      a2 = (int *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v11.__r_.__value_.__l.__size_;
  }
  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = size;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v7 = sub_1C62A3414(a1 + 1, (uint64_t)&v14);
  if (v7
    || (v9 = a1[14]) != 0
    && (llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(v9, (char *)a2, size, (uint64_t)__val),
        v13)
    && (v14 = *(_OWORD *)__val, v16 = 0, v17 = 0, v15 = 0, (v7 = sub_1C62A3414(a1 + 1, (uint64_t)&v14)) != 0))
  {
    v8 = v7 + 7;
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v8;
}

uint64_t sub_1C5AAC640(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  void *p_p;
  uint64_t v11;
  void *__p;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  sub_1C4D82D08((uint64_t)v17);
  if (a2)
  {
    v6 = 0;
    v7 = 1;
    while (1)
    {
      std::stringbuf::str();
      v8 = (v16 & 0x80u) == 0 ? v16 : v15;
      if ((char)v16 < 0)
        break;
      if (v8)
        goto LABEL_8;
LABEL_9:
      if (a2 - 1 == v6)
        v9 = a3;
      else
        v9 = 1;
      sub_1C5AAC7D0(a1 + 24 * v6, v9);
      if ((v16 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v16 & 0x80u) == 0)
        v11 = v16 & 0x7F;
      else
        v11 = v15;
      sub_1C4D7C62C(v17, (uint64_t)p_p, v11);
      if ((char)v16 < 0)
        operator delete(__p);
      v6 = v7;
      if (a2 <= v7++)
        goto LABEL_24;
    }
    operator delete(__p);
    if (!v8)
      goto LABEL_9;
LABEL_8:
    sub_1C4D7C62C(v17, (uint64_t)" @ ", 3);
    goto LABEL_9;
  }
LABEL_24:
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA32F18](&v19);
}

uint64_t sub_1C5AAC7D0(uint64_t a1, int a2)
{
  const void *v4;
  size_t v5;
  void *p_p;
  uint64_t v7;
  void **v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  size_t v18;
  unint64_t v19;
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  sub_1C4D82D08((uint64_t)v20);
  v4 = *(const void **)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    __p = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_p = operator new(v10 + 1);
    v18 = v5;
    v19 = v11 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v19) = *(_QWORD *)(a1 + 8);
    p_p = &__p;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_p, v4, v5);
LABEL_11:
  *((_BYTE *)p_p + v5) = 0;
  v9 = HIBYTE(v19);
  v8 = (void **)__p;
  v7 = v18;
LABEL_12:
  v12 = v9 < 0;
  if (v9 >= 0)
    v13 = &__p;
  else
    v13 = v8;
  v14 = v9 & 0x7F;
  if (v12)
    v15 = v7;
  else
    v15 = v14;
  sub_1C4D7C62C(v20, (uint64_t)v13, v15);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p);
    if (!a2)
      goto LABEL_24;
  }
  else if (!a2)
  {
    goto LABEL_24;
  }
  sub_1C4D7C62C(v20, (uint64_t)":", 1);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 20))
  {
    sub_1C4D7C62C(v20, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_24:
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA32F18](&v22);
}

uint64_t sub_1C5AAC99C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[2];
  uint64_t v45[2];
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  if (a2)
    v3 = result + 1;
  else
    v3 = result;
  if (a2 - (unint64_t)(a2 != 0) >= a2 - 2)
    v4 = a2 - 2;
  else
    v4 = a2 - (a2 != 0);
  v40 = v3;
  v41 = v4;
  if (v4)
  {
    v6 = v44;
    do
    {
      v7 = v4;
      v8 = v3;
      v9 = llvm::StringRef::find(&v40, " @ ", 3uLL, 0);
      if (v4 >= v9)
        v10 = v9;
      else
        v10 = v4;
      v11 = v9 + 3;
      if (v4 < v9 + 3)
        v11 = v4;
      v12 = v3 + v11;
      v13 = v4 - v11;
      if (v9 == -1)
        v4 = 0;
      else
        v4 = v13;
      if (v9 == -1)
        v3 = 0;
      else
        v3 = v12;
      v40 = v3;
      v41 = v4;
      if (v9 == -1)
        v14 = v7;
      else
        v14 = v10;
      v45[0] = v8;
      v45[1] = v14;
      LOBYTE(v47) = 58;
      v15 = llvm::StringRef::find(v45, (char *)&v47, 1uLL, 0);
      if (v15 == -1)
        goto LABEL_57;
      v16 = v14 >= v15 ? v15 : v14;
      v17 = v14 >= v15 + 1 ? v15 + 1 : v14;
      v18 = v14 - v17;
      v42 = v8;
      v43 = v16;
      v19 = v8 + v17;
      v44[0] = v8 + v17;
      v44[1] = v14 - v17;
      v20 = v14 > v15 + 1;
      v14 = v16;
      if (v20)
      {
        LOBYTE(v47) = 46;
        v21 = v6;
        v22 = llvm::StringRef::find(v6, (char *)&v47, 1uLL, 0);
        if (v18 >= v22)
          v24 = v22;
        else
          v24 = v18;
        if (v18 >= v22 + 1)
          v25 = v22 + 1;
        else
          v25 = v18;
        v26 = (unsigned __int8 *)(v19 + v25);
        v27 = v18 - v25;
        if (v22 == -1)
          v28 = 0;
        else
          v28 = v27;
        if (v22 == -1)
          v29 = 0;
        else
          v29 = v26;
        v46 = 0;
        v47 = v19;
        if (v22 == -1)
          v24 = v18;
        v48 = v24;
        llvm::consumeSignedInteger((llvm *)&v47, (llvm::StringRef *)0xA, &v46, v23);
        if (v48)
          v31 = 1;
        else
          v31 = v30;
        if (v46 == (int)v46)
          v32 = v46;
        else
          v32 = 0;
        if (v31)
          v33 = 0;
        else
          v33 = v32;
        if (v28)
        {
          v35 = 0;
          while (1)
          {
            v36 = *v29;
            if ((v36 - 48) >= 0xA)
            {
              if ((v36 - 97) >= 0x1A)
              {
                if ((v36 - 65) > 0x19)
                  break;
                v37 = -55;
              }
              else
              {
                v37 = -87;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v37 + v36;
            if (v38 > 9)
              break;
            v39 = 10 * v35 + v38;
            if (v35 > v39 / 0xA)
              break;
            ++v29;
            v35 = v39;
            if (!--v28)
            {
              if (HIDWORD(v39))
                v34 = 0;
              else
                v34 = v39;
              goto LABEL_72;
            }
          }
        }
        v34 = 0;
LABEL_72:
        v6 = v21;
      }
      else
      {
LABEL_57:
        v34 = 0;
        v33 = 0;
      }
      result = sub_1C630BDB8(a3, v8, v14, v33 | (v34 << 32));
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1C5AACC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[3];

  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v5 = sub_1C4DC1E54(a1, (unint64_t)v9);
  v6 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(_QWORD *)a1 + 24 * v6 - 24;
}

uint64_t sub_1C5AACC84(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)a1 = off_1E8193610;
  v2 = *(uint64_t **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v2)
  {
    v3 = sub_1C630D480(v2);
    MEMORY[0x1CAA32FC0](v3, 0x1020C409CDB6E5ELL);
  }
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v4)
    sub_1C4E5DDC4(a1 + 104, v4);
  sub_1C542C508(a1 + 64);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1C630A054(a1 + 8, *(_QWORD ***)(a1 + 24));
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t sub_1C5AACD24(_QWORD *a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v9;

  *a1 = off_1E81933D0;
  v2 = (void **)a1[50];
  a1[50] = 0;
  if (v2)
  {
    v9 = v2;
    sub_1C5AAD3E4(&v9);
    MEMORY[0x1CAA32FC0](v2, 0x20C40960023A9);
  }
  v3 = (void **)a1[49];
  a1[49] = 0;
  if (v3)
  {
    v9 = v3;
    sub_1C4765410(&v9);
    MEMORY[0x1CAA32FC0](v3, 0x20C40960023A9);
  }
  MEMORY[0x1CAA32FB4](a1[44], 8);
  v4 = a1[43];
  a1[43] = 0;
  if (v4)
    sub_1C4FE303C(v4);
  sub_1C630D32C((uint64_t)(a1 + 40));
  MEMORY[0x1CAA32FB4](a1[40], 8);
  v5 = a1[39];
  a1[39] = 0;
  if (v5)
  {
    v6 = sub_1C62A2428(v5);
    MEMORY[0x1CAA32FC0](v6, 0x10B0C408C61162ELL);
  }
  v7 = (void *)a1[36];
  if (v7)
  {
    a1[37] = v7;
    operator delete(v7);
  }
  sub_1C4926AE8((uint64_t)(a1 + 24));
  return sub_1C630D2F0(a1);
}

_OWORD *sub_1C5AACE28(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5AACEF0(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F6FF0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5AACEF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F6FF0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_1C630D550((uint64_t *)v5, (const void **)a2, &v10);
      v9 = v10;
      *v10 = *(_OWORD *)a2;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C5AACFA8(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  result = sub_1C630D32C(a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a1;
      v7 = 48 * v5;
      do
      {
        *(_QWORD *)(v6 + 32) = 0;
        *(_OWORD *)v6 = 0uLL;
        *(_OWORD *)(v6 + 16) = 0uLL;
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  else
  {
    result = MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v9;
      result = (uint64_t)operator new(48 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 48 * v10;
        do
        {
          *(_QWORD *)(result + 32) = 0;
          *(_OWORD *)result = 0uLL;
          *(_OWORD *)(result + 16) = 0uLL;
          result += 48;
          v11 -= 48;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
  return result;
}

_QWORD *sub_1C5AAD0BC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C630D710(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    do
    {
      result[4] = 0;
      *(_OWORD *)result = 0uLL;
      *((_OWORD *)result + 1) = 0uLL;
      result += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

void sub_1C5AAD184(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v7 >> 4)];
    v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    v14 = &v12[16 * a2];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C5AAD2A4(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v3;
  v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_1C4764EE4();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v2];
  __p = v7;
  v16 = v8;
  v18 = &v7[40 * v6];
  *(_QWORD *)v8 = v8 + 16;
  *((_QWORD *)v8 + 1) = 0x100000000;
  if (*(_DWORD *)(a2 + 8))
    v8 = (char *)sub_1C6180E84((uint64_t)v8, a2);
  v17 = v8 + 40;
  sub_1C630DAF8(a1, &__p);
  v9 = a1[1];
  v10 = v16;
  v11 = v17;
  while (v11 != v10)
  {
    v13 = (char *)*((_QWORD *)v11 - 5);
    v11 -= 40;
    v12 = v13;
    if (v11 + 16 != v13)
      free(v12);
  }
  if (__p)
    operator delete(__p);
  return v9;
}

void sub_1C5AAD3E4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 - 5);
        v4 -= 40;
        v6 = v7;
        if (v4 + 16 != v7)
          free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C5AAD45C(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      v13 = *(_OWORD *)(v2 - 40);
      v14 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2)
    operator delete(v2);
  return v12;
}

char *sub_1C5AAD57C(char **a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v12 = 3 * v7;
  v13 = (char *)operator new(24 * v7);
  v14 = &v13[24 * v6];
  *(_DWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  *((_QWORD *)v14 + 2) = a4;
  v15 = v14 + 24;
  if (v5 == v4)
  {
    v16 = &v13[24 * v6];
  }
  else
  {
    do
    {
      v16 = v14 - 24;
      v17 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v17;
      v5 -= 24;
      v14 -= 24;
    }
    while (v5 != v4);
  }
  *a1 = v16;
  a1[1] = v15;
  a1[2] = &v13[8 * v12];
  if (v4)
    operator delete(v4);
  return v15;
}

uint64_t sub_1C5AAD698(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  void *v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::SymbolRemappingParseError::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)a3;
    v9 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a3 + 8) + 16))(**(_QWORD **)(a3 + 8));
    v11 = *(_QWORD *)(v7 + 32);
    v12 = *(_BYTE *)(v7 + 63);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = v7 + 40;
    else
      v14 = *(_QWORD *)(v7 + 40);
    v15 = v12 & 0x7F;
    if (v13)
      v15 = *(_QWORD *)(v7 + 48);
    v17 = 261;
    v16[0] = v14;
    v16[1] = v15;
    v19 = 8;
    v20 = 0;
    v18 = &unk_1E814E700;
    v21 = v9;
    v22 = v10;
    v23 = v11;
    v24 = v16;
    llvm::LLVMContext::diagnose(v8, (const llvm::DiagnosticInfo *)&v18);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v7 = 0;
  }
  *a1 = v7;
  return result;
}

uint64_t sub_1C5AAD788()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Profile uses flow sensitive discriminators";
  v1.n128_u64[1] = 42;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81B348, "profile-isfs", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81B348, &dword_1C475E000);
}

uint64_t sub_1C5AAD808(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = 672;
  do
  {
    v3 = *(void **)(a1 + v2 - 336);
    if ((void *)(a1 + v2 - 320) != v3)
      free(v3);
    v2 -= 336;
  }
  while (v2);
  return a1;
}

unint64_t llvm::sampleprof::SampleProfileWriter::writeFuncProfiles(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  void *__p;
  _QWORD *v12;
  uint64_t v13;

  __p = 0;
  v12 = 0;
  v13 = 0;
  llvm::sampleprof::sortFuncProfiles(a2, (__n128 **)&__p, a3);
  v4 = __p;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, v4[5]);
    v7 = v6;
    if ((_DWORD)v6)
    {
      v9 = v6 & 0xFFFFFFFF00000000;
      goto LABEL_9;
    }
    v4 += 6;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v9 = 0;
  v7 = 0;
LABEL_9:
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return v7 | v9;
}

unint64_t llvm::sampleprof::SampleProfileWriter::write(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if ((_DWORD)v4 || (v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2), (_DWORD)v4))
  {
    v5 = v4 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v5 = 0;
    LODWORD(v4) = 0;
  }
  return v4 | v5;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::markSectionStart(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)a1[1];
  v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 80))(v5);
  v7 = v5[4];
  v8 = v5[2];
  if ((*(_BYTE *)(a1[11] + 40 * a3 + 8) & 1) != 0)
  {
    v9 = a1[54];
    a1[54] = a1[1];
    a1[1] = v9;
  }
  return v6 + v7 - v8;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::compressAndOutput(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 13;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::addNewSection(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v5 = *(_QWORD *)(a1[11] + 40 * a3 + 8);
  if ((v5 & 1) != 0)
  {
    v14 = a1[54];
    a1[54] = a1[1];
    a1[1] = v14;
    v15 = atomic_load(qword_1EF8F7270);
    v16 = 13;
    result = 13;
    if (v15)
      return result;
    goto LABEL_5;
  }
  v8 = a4 - a1[55];
  v9 = (_QWORD *)a1[1];
  v10 = (*(uint64_t (**)(_QWORD *))(*v9 + 80))(v9) + v9[4] - (v9[2] + a4);
  v12 = (char *)a1[58];
  v11 = a1[59];
  if ((unint64_t)v12 >= v11)
  {
    v18 = (char *)a1[57];
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v18) >> 3) + 1;
    if (v19 > 0x666666666666666)
      abort();
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v18) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x333333333333333)
      v21 = 0x666666666666666;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x666666666666666)
        sub_1C4764EE4();
      v22 = (char *)operator new(40 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * ((v12 - v18) >> 3)];
    *(_DWORD *)v23 = a2;
    *((_QWORD *)v23 + 1) = v5;
    *((_QWORD *)v23 + 2) = v8;
    *((_QWORD *)v23 + 3) = v10;
    *((_DWORD *)v23 + 8) = a3;
    v13 = v23 + 40;
    if (v12 != v18)
    {
      do
      {
        v24 = *(_OWORD *)(v12 - 40);
        v25 = *(_OWORD *)(v12 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v12 - 1);
        *(_OWORD *)(v23 - 24) = v25;
        *(_OWORD *)(v23 - 40) = v24;
        v23 -= 40;
        v12 -= 40;
      }
      while (v12 != v18);
      v12 = (char *)a1[57];
    }
    a1[57] = v23;
    a1[58] = v13;
    a1[59] = &v22[40 * v21];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v12 = a2;
    *((_QWORD *)v12 + 1) = v5;
    *((_QWORD *)v12 + 2) = v8;
    *((_QWORD *)v12 + 3) = v10;
    v13 = v12 + 40;
    *((_DWORD *)v12 + 8) = a3;
  }
  v16 = 0;
  result = 0;
  a1[58] = v13;
  if (!atomic_load(qword_1EF8F7270))
  {
LABEL_5:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    return v16;
  }
  return result;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::write(llvm::sampleprof::SampleProfileWriterExtBinaryBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v13;

  v4 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *))(*(_QWORD *)a1 + 72))(a1);
  v5 = v4;
  if ((_DWORD)v4)
  {
    v6 = v4 & 0xFFFFFFFF00000000;
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    v7 = operator new();
    *(_DWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)v7 = &unk_1E81A7208;
    *(_QWORD *)(v7 + 64) = __p;
    *(_DWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v8 = *((_QWORD *)a1 + 54);
    *((_QWORD *)a1 + 54) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
    if ((_DWORD)v9 || (v9 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeSecHdrTable(a1), (_DWORD)v9))
    {
      v6 = v9 & 0xFFFFFFFF00000000;
    }
    else
    {
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
      v6 = 0;
      LODWORD(v9) = 0;
    }
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    v5 = v9;
  }
  return v6 | v5;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeSecHdrTable(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  llvm::raw_fd_ostream *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  off_t v6;
  llvm::raw_ostream *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  unsigned int v14;
  int v15;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  off_t v22;
  uint64_t v24;
  uint64_t v27;
  void *v28[2];
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_fd_ostream *)*((_QWORD *)this + 1);
  v3 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)v2 + 80))(v2);
  v4 = *((_QWORD *)v2 + 4);
  v5 = *((_QWORD *)v2 + 2);
  if (llvm::raw_fd_ostream::seek(v2, *((_QWORD *)this + 56)) == -1)
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    return 11;
  }
  else
  {
    v6 = v3 + v4 - v5;
    v7 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 58) - *((_QWORD *)this + 57)) >> 3);
    v28[0] = v29;
    v28[1] = (void *)0x1000000000;
    sub_1C4893E04((char *)v28, v8, -1);
    v9 = *((_QWORD *)this + 57);
    v10 = *((_QWORD *)this + 58) - v9;
    if (v10)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
      v12 = v28[0];
      v13 = (int *)(v9 + 32);
      v14 = 1;
      do
      {
        v15 = *v13;
        v13 += 10;
        v12[v15] = v14 - 1;
      }
      while (v11 > v14++);
    }
    if (*((_DWORD *)this + 24))
    {
      v17 = 0;
      do
      {
        v18 = (_QWORD *)(*((_QWORD *)this + 57) + 40 * *((unsigned int *)v28[0] + v17));
        v19 = v18[1];
        v20 = v18[2];
        v21 = v18[3];
        v27 = *(unsigned int *)v18;
        llvm::raw_ostream::write(v7, (const char *)&v27, 8uLL);
        v27 = v19;
        llvm::raw_ostream::write(v7, (const char *)&v27, 8uLL);
        v27 = v20;
        llvm::raw_ostream::write(v7, (const char *)&v27, 8uLL);
        v27 = v21;
        llvm::raw_ostream::write(v7, (const char *)&v27, 8uLL);
        ++v17;
      }
      while (v17 < *((unsigned int *)this + 24));
    }
    v22 = llvm::raw_fd_ostream::seek(v2, v6);
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    if (v22 == -1)
      v24 = 11;
    else
      v24 = 0;
    if (v28[0] != v29)
      free(v28[0]);
  }
  return v24;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeContextIdx(_QWORD *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 32))
    return llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeCSNameIdx((uint64_t)a1, a2);
  else
    return llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(a1, *(const void **)a2, *(const void **)(a2 + 8));
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeCSNameIdx(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  char v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v14;

  v14 = 0;
  if (sub_1C5AB341C(*(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 552), a2, &v14))
    v3 = v14 == *(_QWORD *)(a1 + 536) + 48 * *(unsigned int *)(a1 + 552);
  else
    v3 = 1;
  if (v3 || (v4 = *(_QWORD *)(a1 + 560), v5 = *(_DWORD *)(v14 + 40), *(_QWORD *)(a1 + 568) == v4 + 48 * v5))
  {
    v11 = 8;
  }
  else
  {
    v6 = *(unsigned int *)(v4 + 48 * v5 + 40);
    v7 = *(llvm::raw_ostream **)(a1 + 8);
    do
    {
      v8 = v6 & 0x7F | ((v6 > 0x7F) << 7);
      v9 = (char *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
      {
        v7 = llvm::raw_ostream::write(v7, v8);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = v6 > 0x7F;
      v6 >>= 7;
    }
    while (v10);
    v11 = 0;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return v11;
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(_QWORD *a1, const void *a2, const void *a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  const void *v16[2];
  uint64_t v17;

  v16[0] = a2;
  v16[1] = a3;
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v17 = 0;
  if (sub_1C62B24D8((uint64_t *)v4, v16, &v17))
    v5 = v17 == *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 16);
  else
    v5 = 1;
  if (v5 || (v6 = *(_DWORD *)(v17 + 16), v7 = *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32) == v7 + 24 * v6))
  {
    v13 = 8;
  }
  else
  {
    v8 = *(unsigned int *)(v7 + 24 * v6 + 16);
    v9 = (llvm::raw_ostream *)a1[1];
    do
    {
      v10 = v8 & 0x7F | ((v8 > 0x7F) << 7);
      v11 = (char *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      {
        v9 = llvm::raw_ostream::write(v9, v10);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v11 + 1;
        *v11 = v10;
      }
      v12 = v8 > 0x7F;
      v8 >>= 7;
    }
    while (v12);
    v13 = 0;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return v13;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeSample(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this, const llvm::sampleprof::FunctionSamples *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  unsigned int v17;
  uint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  char v31;
  char *v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;
  int v40;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
  v6 = v4[4];
  v7 = v4[2];
  v8 = *((_QWORD *)this + 53);
  v9 = *((_OWORD *)a2 + 2);
  v38[0] = *((_OWORD *)a2 + 1);
  v38[1] = v9;
  v39 = *((_QWORD *)a2 + 6);
  v40 = 0;
  sub_1C5AB3544((uint64_t)&v36, (uint64_t)this + 480, (uint64_t)v38, &v40);
  v10 = v36;
  if (v37)
  {
    v11 = (_OWORD *)((char *)a2 + 16);
    v12 = (_OWORD *)*((_QWORD *)this + 64);
    v13 = *((_QWORD *)this + 65);
    if ((unint64_t)v12 >= v13)
    {
      v35 = v7;
      v19 = (_OWORD *)*((_QWORD *)this + 63);
      v20 = 0xAAAAAAAAAAAAAAABLL * (v12 - v19) + 1;
      if (v20 > 0x555555555555555)
        abort();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v19) >> 4);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 > 0x555555555555555)
          sub_1C4764EE4();
        v23 = (char *)operator new(48 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[16 * (v12 - v19)];
      v25 = &v23[48 * v22];
      v26 = *((_OWORD *)a2 + 2);
      *(_OWORD *)v24 = *v11;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = *((_QWORD *)a2 + 6);
      *((_QWORD *)v24 + 5) = 0;
      v16 = v24 + 48;
      if (v12 == v19)
      {
        v7 = v35;
      }
      else
      {
        v7 = v35;
        do
        {
          v27 = *(v12 - 3);
          v28 = *(v12 - 1);
          *((_OWORD *)v24 - 2) = *(v12 - 2);
          *((_OWORD *)v24 - 1) = v28;
          *((_OWORD *)v24 - 3) = v27;
          v24 -= 48;
          v12 -= 3;
        }
        while (v12 != v19);
        v12 = (_OWORD *)*((_QWORD *)this + 63);
      }
      *((_QWORD *)this + 63) = v24;
      *((_QWORD *)this + 64) = v16;
      *((_QWORD *)this + 65) = v25;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v14 = *((_OWORD *)a2 + 2);
      v15 = *((_QWORD *)a2 + 6);
      *v12 = *v11;
      v12[1] = v14;
      *((_QWORD *)v12 + 4) = v15;
      *((_QWORD *)v12 + 5) = 0;
      v16 = v12 + 3;
    }
    *((_QWORD *)this + 64) = v16;
    v18 = *((_QWORD *)this + 63);
    v17 = -1431655765 * (((unint64_t)v16 - v18) >> 4) - 1;
    *(_DWORD *)(v10 + 40) = v17;
  }
  else
  {
    v17 = *(_DWORD *)(v36 + 40);
    v18 = *((_QWORD *)this + 63);
  }
  *(_QWORD *)(v18 + 48 * v17 + 40) = v5 + v6 - (v8 + v7);
  v29 = *((_QWORD *)a2 + 8);
  v30 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  do
  {
    v31 = v29 & 0x7F | ((v29 > 0x7F) << 7);
    v32 = (char *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v32 >= *((_QWORD *)v30 + 3))
    {
      v30 = llvm::raw_ostream::write(v30, v31);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v32 + 1;
      *v32 = v31;
    }
    v33 = v29 > 0x7F;
    v29 >>= 7;
  }
  while (v33);
  return llvm::sampleprof::SampleProfileWriterBinary::writeBody(this, a2);
}

unint64_t llvm::sampleprof::SampleProfileWriterBinary::writeBody(llvm::sampleprof::SampleProfileWriterBinary *this, const llvm::sampleprof::FunctionSamples *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;
  char *v14;
  const llvm::sampleprof::FunctionSamples *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char *v19;
  char v20;
  char *v21;
  unint64_t v22;
  char v23;
  char *v24;
  unint64_t v25;
  char v26;
  char *v27;
  _QWORD **v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  _QWORD *v33;
  _QWORD **v34;
  BOOL v35;
  const llvm::sampleprof::FunctionSamples *v36;
  const llvm::sampleprof::FunctionSamples *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  char *v51;
  char v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD **v59;
  _QWORD *v60[2];

  v4 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v5 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterBinary *, char *))(*(_QWORD *)this + 112))(this, (char *)a2 + 16);
  if ((_DWORD)v5)
  {
LABEL_2:
    v6 = v5 & 0xFFFFFFFF00000000;
    return v6 | v5;
  }
  v8 = *((_QWORD *)a2 + 7);
  do
  {
    v9 = v8 & 0x7F | ((v8 > 0x7F) << 7);
    v10 = (char *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, v9);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v10 + 1;
      *v10 = v9;
    }
    v11 = v8 > 0x7F;
    v8 >>= 7;
  }
  while (v11);
  v12 = *((_QWORD *)a2 + 11);
  do
  {
    v13 = v12 & 0x7F | ((v12 > 0x7F) << 7);
    v14 = (char *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, v13);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v14 + 1;
      *v14 = v13;
    }
    v11 = v12 > 0x7F;
    v12 >>= 7;
  }
  while (v11);
  v15 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)a2 + 9);
  if (v15 == (const llvm::sampleprof::FunctionSamples *)((char *)a2 + 80))
  {
LABEL_52:
    v38 = (char *)*((_QWORD *)a2 + 12);
    v39 = (char *)a2 + 104;
    if (v38 == (char *)a2 + 104)
    {
      v40 = 0;
    }
    else
    {
      v40 = 0;
      do
      {
        v41 = (char *)*((_QWORD *)v38 + 1);
        v42 = v38;
        if (v41)
        {
          do
          {
            v43 = v41;
            v41 = *(char **)v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v43 = (char *)*((_QWORD *)v42 + 2);
            v35 = *(_QWORD *)v43 == (_QWORD)v42;
            v42 = v43;
          }
          while (!v35);
        }
        v40 += *((_QWORD *)v38 + 7);
        v38 = v43;
      }
      while (v43 != v39);
    }
    do
    {
      v44 = v40 & 0x7F | ((v40 > 0x7F) << 7);
      v45 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v45 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4, v44);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v45 + 1;
        *v45 = v44;
      }
      v11 = v40 > 0x7F;
      v40 >>= 7;
    }
    while (v11);
    v46 = (char *)*((_QWORD *)a2 + 12);
    if (v46 != v39)
    {
      while (1)
      {
        v47 = (char *)*((_QWORD *)v46 + 5);
        if (v47 != v46 + 48)
          break;
LABEL_85:
        v56 = (char *)*((_QWORD *)v46 + 1);
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = *(char **)v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (char *)*((_QWORD *)v46 + 2);
            v35 = *(_QWORD *)v57 == (_QWORD)v46;
            v46 = v57;
          }
          while (!v35);
        }
        v46 = v57;
        if (v57 == v39)
          goto LABEL_91;
      }
      while (1)
      {
        v49 = *((unsigned int *)v46 + 8);
        v48 = *((unsigned int *)v46 + 9);
        do
        {
          v50 = v49 & 0x7F | ((v49 > 0x7F) << 7);
          v51 = (char *)*((_QWORD *)v4 + 4);
          if ((unint64_t)v51 >= *((_QWORD *)v4 + 3))
          {
            llvm::raw_ostream::write(v4, v50);
          }
          else
          {
            *((_QWORD *)v4 + 4) = v51 + 1;
            *v51 = v50;
          }
          v11 = v49 > 0x7F;
          v49 >>= 7;
        }
        while (v11);
        do
        {
          v52 = v48 & 0x7F | ((v48 > 0x7F) << 7);
          v53 = (char *)*((_QWORD *)v4 + 4);
          if ((unint64_t)v53 >= *((_QWORD *)v4 + 3))
          {
            llvm::raw_ostream::write(v4, v52);
          }
          else
          {
            *((_QWORD *)v4 + 4) = v53 + 1;
            *v53 = v52;
          }
          v11 = v48 > 0x7F;
          v48 >>= 7;
        }
        while (v11);
        v5 = llvm::sampleprof::SampleProfileWriterBinary::writeBody(this, (const llvm::sampleprof::FunctionSamples *)(v47 + 56));
        if ((_DWORD)v5)
          goto LABEL_2;
        v54 = (char *)*((_QWORD *)v47 + 1);
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = *(char **)v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (char *)*((_QWORD *)v47 + 2);
            v35 = *(_QWORD *)v55 == (_QWORD)v47;
            v47 = v55;
          }
          while (!v35);
        }
        v47 = v55;
        if (v55 == v46 + 48)
          goto LABEL_85;
      }
    }
LABEL_91:
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    LODWORD(v5) = 0;
    v6 = 0;
  }
  else
  {
    while (1)
    {
      v17 = *((unsigned int *)v15 + 8);
      v16 = *((unsigned int *)v15 + 9);
      do
      {
        v18 = v17 & 0x7F | ((v17 > 0x7F) << 7);
        v19 = (char *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, v18);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v19 + 1;
          *v19 = v18;
        }
        v11 = v17 > 0x7F;
        v17 >>= 7;
      }
      while (v11);
      do
      {
        v20 = v16 & 0x7F | ((v16 > 0x7F) << 7);
        v21 = (char *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v21 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, v20);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v21 + 1;
          *v21 = v20;
        }
        v11 = v16 > 0x7F;
        v16 >>= 7;
      }
      while (v11);
      v22 = *((_QWORD *)v15 + 5);
      do
      {
        v23 = v22 & 0x7F | ((v22 > 0x7F) << 7);
        v24 = (char *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v24 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, v23);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v24 + 1;
          *v24 = v23;
        }
        v11 = v22 > 0x7F;
        v22 >>= 7;
      }
      while (v11);
      v25 = *((unsigned int *)v15 + 15);
      do
      {
        v26 = v25 & 0x7F | ((v25 > 0x7F) << 7);
        v27 = (char *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v27 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, v26);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v27 + 1;
          *v27 = v26;
        }
        v11 = v25 > 0x7F;
        v25 >>= 7;
      }
      while (v11);
      sub_1C62A3FC4((uint64_t *)v15 + 6, &v59);
      v28 = v59;
      if (v59 != v60)
        break;
LABEL_46:
      sub_1C47655E8((uint64_t)&v59, v60[0]);
      v36 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)v15 + 1);
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = *(const llvm::sampleprof::FunctionSamples **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)v15 + 2);
          v35 = *(_QWORD *)v37 == (_QWORD)v15;
          v15 = v37;
        }
        while (!v35);
      }
      v15 = v37;
      if (v37 == (const llvm::sampleprof::FunctionSamples *)((char *)a2 + 80))
        goto LABEL_52;
    }
    while (1)
    {
      v29 = (unint64_t)v28[6];
      v30 = llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(this, v28[4], v28[5]);
      LODWORD(v5) = v30;
      if ((_DWORD)v30)
        break;
      do
      {
        v31 = v29 & 0x7F | ((v29 > 0x7F) << 7);
        v32 = (char *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, v31);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v32 + 1;
          *v32 = v31;
        }
        v11 = v29 > 0x7F;
        v29 >>= 7;
      }
      while (v11);
      v33 = v28[1];
      if (v33)
      {
        do
        {
          v34 = (_QWORD **)v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD **)v28[2];
          v35 = *v34 == v28;
          v28 = v34;
        }
        while (!v35);
      }
      v28 = v34;
      if (v34 == v60)
        goto LABEL_46;
    }
    v6 = v30 & 0xFFFFFFFF00000000;
    sub_1C47655E8((uint64_t)&v59, v60[0]);
  }
  return v6 | v5;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncOffsetTable(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  llvm::raw_ostream *v2;
  unint64_t v3;
  char v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *j;
  uint64_t **v10;
  uint64_t **v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 64) - *((_QWORD *)this + 63)) >> 4);
  do
  {
    v4 = v3 & 0x7F | ((v3 > 0x7F) << 7);
    v5 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, v4);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v5 + 1;
      *v5 = v4;
    }
    v6 = v3 > 0x7F;
    v3 >>= 7;
  }
  while (v6);
  if (!llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
  {
    v33 = *((_QWORD *)this + 63);
    for (i = *((_QWORD *)this + 64); v33 != i; v33 += 48)
    {
      v35 = *(_QWORD *)(v33 + 40);
      v36 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *, uint64_t))(*(_QWORD *)this + 112))(this, v33);
      v24 = v36;
      if ((_DWORD)v36)
      {
        v49 = v36 & 0xFFFFFFFF00000000;
        return v49 | v24;
      }
      do
      {
        v37 = v35 & 0x7F | ((v35 > 0x7F) << 7);
        v38 = (char *)*((_QWORD *)v2 + 4);
        if ((unint64_t)v38 >= *((_QWORD *)v2 + 3))
        {
          llvm::raw_ostream::write(v2, v37);
        }
        else
        {
          *((_QWORD *)v2 + 4) = v38 + 1;
          *v38 = v37;
        }
        v6 = v35 > 0x7F;
        v35 >>= 7;
      }
      while (v6);
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    }
    goto LABEL_62;
  }
  v7 = *((_QWORD *)this + 63);
  v8 = *((_QWORD *)this + 64);
  v57 = 0;
  v58 = 0;
  v56 = &v57;
  if (v7 == v8)
  {
LABEL_47:
    v30 = *((unsigned int *)this + 24);
    if ((_DWORD)v30)
    {
      v31 = 40 * v30;
      v32 = (_QWORD *)(*((_QWORD *)this + 11) + 8);
      do
      {
        if (*((_DWORD *)v32 - 2) == 4)
          *v32 |= 0x100000000uLL;
        v32 += 5;
        v31 -= 40;
      }
      while (v31);
    }
    sub_1C49F3440(v57);
LABEL_62:
    v40 = *((_DWORD *)this + 122);
    if (v40 || *((_DWORD *)this + 123))
    {
      v41 = (_QWORD *)((char *)this + 480);
      v42 = *((unsigned int *)this + 124);
      if (v42 <= 4 * v40 || v42 < 0x41)
      {
        if ((_DWORD)v42)
        {
          v46 = *v41;
          v47 = 48 * v42;
          do
          {
            *(_QWORD *)(v46 + 32) = 0;
            *(_OWORD *)v46 = 0uLL;
            *(_OWORD *)(v46 + 16) = 0uLL;
            v46 += 48;
            v47 -= 48;
          }
          while (v47);
        }
        *((_QWORD *)this + 61) = 0;
      }
      else
      {
        sub_1C630D32C((uint64_t)this + 480);
        if (v40)
        {
          v43 = 1 << (33 - __clz(v40 - 1));
          if (v43 <= 64)
            v40 = 64;
          else
            v40 = v43;
        }
        if (v40 == *((_DWORD *)this + 124))
        {
          *((_QWORD *)this + 61) = 0;
          if (v40)
          {
            v44 = *((_QWORD *)this + 60);
            v45 = 48 * v40;
            do
            {
              *(_QWORD *)(v44 + 32) = 0;
              *(_OWORD *)v44 = 0uLL;
              *(_OWORD *)(v44 + 16) = 0uLL;
              v44 += 48;
              v45 -= 48;
            }
            while (v45);
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](*v41, 8);
          if (v40)
          {
            v51 = (4 * v40 / 3 + 1) | ((unint64_t)(4 * v40 / 3 + 1) >> 1);
            v52 = v51 | (v51 >> 2) | ((v51 | (v51 >> 2)) >> 4);
            LODWORD(v52) = (((v52 | (v52 >> 8)) >> 16) | v52 | (v52 >> 8)) + 1;
            *((_DWORD *)this + 124) = v52;
            v53 = operator new(48 * v52, (std::align_val_t)8uLL);
            *((_QWORD *)this + 60) = v53;
            *((_QWORD *)this + 61) = 0;
            v54 = *((unsigned int *)this + 124);
            if ((_DWORD)v54)
            {
              v55 = 48 * v54;
              do
              {
                v53[4] = 0;
                *(_OWORD *)v53 = 0uLL;
                *((_OWORD *)v53 + 1) = 0uLL;
                v53 += 6;
                v55 -= 48;
              }
              while (v55);
            }
          }
          else
          {
            *v41 = 0;
            *((_QWORD *)this + 61) = 0;
            *((_DWORD *)this + 124) = 0;
          }
        }
      }
    }
    *((_QWORD *)this + 64) = *((_QWORD *)this + 63);
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v24 = 0;
    v49 = 0;
    return v49 | v24;
  }
  for (j = 0; ; j = v57)
  {
    if (v56 == &v57)
    {
      v11 = &v57;
    }
    else
    {
      v10 = &v57;
      if (j)
      {
        do
        {
          v11 = (uint64_t **)j;
          j = (uint64_t *)j[1];
        }
        while (j);
      }
      else
      {
        do
        {
          v11 = (uint64_t **)v10[2];
          v12 = *v11 == (uint64_t *)v10;
          v10 = v11;
        }
        while (v12);
      }
      v13 = sub_1C5754088((uint64_t)(v11 + 4), v7);
      j = v57;
      if (!v13)
      {
        v14 = &v57;
        v15 = &v57;
        if (v57)
        {
          v15 = &v57;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)j;
              v16 = (uint64_t)(j + 4);
              if (!sub_1C5754088(v7, (uint64_t)(j + 4)))
                break;
              j = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_27;
            }
            if (!sub_1C5754088(v16, v7))
              break;
            v15 = v14 + 1;
            j = v14[1];
            if (!j)
              goto LABEL_27;
          }
LABEL_26:
          if (*v15)
            goto LABEL_31;
          goto LABEL_27;
        }
        goto LABEL_27;
      }
    }
    v14 = &v57;
    v15 = &v57;
    if (j)
    {
      v15 = v11 + 1;
      v14 = v11;
      goto LABEL_26;
    }
LABEL_27:
    v17 = operator new(0x50uLL);
    v18 = *(_QWORD *)(v7 + 32);
    v19 = *(_OWORD *)(v7 + 16);
    v17[2] = *(_OWORD *)v7;
    v17[3] = v19;
    *((_QWORD *)v17 + 8) = v18;
    *((_QWORD *)v17 + 9) = *(_QWORD *)(v7 + 40);
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v14;
    *v15 = (uint64_t *)v17;
    if (*v56)
    {
      v56 = (uint64_t **)*v56;
      v20 = *v15;
    }
    else
    {
      v20 = (uint64_t *)v17;
    }
    sub_1C4768E74(v57, v20);
    ++v58;
LABEL_31:
    v7 += 48;
    if (v7 == v8)
      break;
  }
  v21 = (uint64_t *)v56;
  if (v56 == &v57)
    goto LABEL_47;
  while (1)
  {
    v22 = v21[9];
    v23 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *, uint64_t *))(*(_QWORD *)this + 112))(this, v21 + 4);
    v24 = v23;
    if ((_DWORD)v23)
      break;
    do
    {
      v25 = v22 & 0x7F | ((v22 > 0x7F) << 7);
      v26 = (char *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, v25);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v26 + 1;
        *v26 = v25;
      }
      v6 = v22 > 0x7F;
      v22 >>= 7;
    }
    while (v6);
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v28 = (uint64_t *)v21[1];
    if (v28)
    {
      do
      {
        v29 = (uint64_t **)v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (uint64_t **)v21[2];
        v12 = *v29 == v21;
        v21 = (uint64_t *)v29;
      }
      while (!v12);
    }
    v21 = (uint64_t *)v29;
    if (v29 == &v57)
      goto LABEL_47;
  }
  v49 = v23 & 0xFFFFFFFF00000000;
  sub_1C49F3440(v57);
  return v49 | v24;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncMetadata(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this, const llvm::sampleprof::FunctionSamples *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char *v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;

  v4 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v5 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *, char *))(*(_QWORD *)this + 112))(this, (char *)a2 + 16);
  if ((_DWORD)v5)
  {
LABEL_2:
    v6 = v5 & 0xFFFFFFFF00000000;
    return v6 | v5;
  }
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    v7 = *((_QWORD *)a2 + 1);
    do
    {
      v8 = v7 & 0x7F | ((v7 > 0x7F) << 7);
      v9 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4, v8);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v9 + 1;
        *v9 = v8;
      }
      v10 = v7 > 0x7F;
      v7 >>= 7;
    }
    while (v10);
  }
  if (!(llvm::sampleprof::FunctionSamples::ProfileIsCSFlat | llvm::sampleprof::FunctionSamples::ProfileIsCSNested))
    goto LABEL_60;
  v11 = *((unsigned int *)a2 + 13);
  do
  {
    v12 = v11 & 0x7F | ((v11 > 0x7F) << 7);
    v13 = (char *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, v12);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v13 + 1;
      *v13 = v12;
    }
    v10 = v11 > 0x7F;
    v11 >>= 7;
  }
  while (v10);
  if (!llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
  {
LABEL_60:
    v14 = (char *)*((_QWORD *)a2 + 12);
    v15 = (char *)a2 + 104;
    if (v14 == (char *)a2 + 104)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = (char *)*((_QWORD *)v14 + 1);
        v18 = v14;
        if (v17)
        {
          do
          {
            v19 = v17;
            v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v19 = (char *)*((_QWORD *)v18 + 2);
            v20 = *(_QWORD *)v19 == (_QWORD)v18;
            v18 = v19;
          }
          while (!v20);
        }
        v16 += *((_QWORD *)v14 + 7);
        v14 = v19;
      }
      while (v19 != v15);
    }
    do
    {
      v21 = v16 & 0x7F | ((v16 > 0x7F) << 7);
      v22 = (char *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v22 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4, v21);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v22 + 1;
        *v22 = v21;
      }
      v10 = v16 > 0x7F;
      v16 >>= 7;
    }
    while (v10);
    v23 = (char *)*((_QWORD *)a2 + 12);
    if (v23 != v15)
    {
      while (1)
      {
        v24 = (char *)*((_QWORD *)v23 + 5);
        if (v24 != v23 + 48)
          break;
LABEL_48:
        v33 = (char *)*((_QWORD *)v23 + 1);
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = *(char **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (char *)*((_QWORD *)v23 + 2);
            v20 = *(_QWORD *)v34 == (_QWORD)v23;
            v23 = v34;
          }
          while (!v20);
        }
        v23 = v34;
        if (v34 == v15)
          goto LABEL_54;
      }
      while (1)
      {
        v26 = *((unsigned int *)v23 + 8);
        v25 = *((unsigned int *)v23 + 9);
        do
        {
          v27 = v26 & 0x7F | ((v26 > 0x7F) << 7);
          v28 = (char *)*((_QWORD *)v4 + 4);
          if ((unint64_t)v28 >= *((_QWORD *)v4 + 3))
          {
            llvm::raw_ostream::write(v4, v27);
          }
          else
          {
            *((_QWORD *)v4 + 4) = v28 + 1;
            *v28 = v27;
          }
          v10 = v26 > 0x7F;
          v26 >>= 7;
        }
        while (v10);
        do
        {
          v29 = v25 & 0x7F | ((v25 > 0x7F) << 7);
          v30 = (char *)*((_QWORD *)v4 + 4);
          if ((unint64_t)v30 >= *((_QWORD *)v4 + 3))
          {
            llvm::raw_ostream::write(v4, v29);
          }
          else
          {
            *((_QWORD *)v4 + 4) = v30 + 1;
            *v30 = v29;
          }
          v10 = v25 > 0x7F;
          v25 >>= 7;
        }
        while (v10);
        v5 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncMetadata(this, (const llvm::sampleprof::FunctionSamples *)(v24 + 56));
        if ((_DWORD)v5)
          goto LABEL_2;
        v31 = (char *)*((_QWORD *)v24 + 1);
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = *(char **)v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (char *)*((_QWORD *)v24 + 2);
            v20 = *(_QWORD *)v32 == (_QWORD)v24;
            v24 = v32;
          }
          while (!v20);
        }
        v24 = v32;
        if (v32 == v23 + 48)
          goto LABEL_48;
      }
    }
  }
LABEL_54:
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  LODWORD(v5) = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncMetadata(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this, uint64_t a2)
{
  BOOL v2;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
    v2 = 0;
  else
    v2 = llvm::sampleprof::FunctionSamples::ProfileIsCSFlat == 0;
  if (!v2 || llvm::sampleprof::FunctionSamples::ProfileIsCSNested != 0)
  {
    v5 = (_QWORD *)(a2 + 16);
    while (1)
    {
      v5 = (_QWORD *)*v5;
      if (!v5)
        break;
      v6 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncMetadata(this, (const llvm::sampleprof::FunctionSamples *)(v5 + 7));
      v7 = v6;
      if ((_DWORD)v6)
      {
        v8 = v6 & 0xFFFFFFFF00000000;
        return v7 | v8;
      }
    }
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v8 = 0;
  v7 = 0;
  return v7 | v8;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeNameTable(llvm::raw_ostream **this)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  __int128 *v5;
  int v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  char *v12;
  BOOL v13;
  __int128 *v14;
  int *v15;
  size_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v21;
  _QWORD *v22[2];
  uint64_t v23;
  char v24[16];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 528))
    return llvm::sampleprof::SampleProfileWriterBinary::writeNameTable((llvm::sampleprof::SampleProfileWriterBinary *)this);
  v2 = this[1];
  v22[0] = 0;
  v22[1] = 0;
  v21 = (__int128 *)v22;
  v3 = this[7];
  v4 = this[8];
  if (v3 != v4)
  {
    do
    {
      sub_1C62B22C4((uint64_t)&v21, (uint64_t)v3, v3);
      v3 = (llvm::raw_ostream *)((char *)v3 + 24);
    }
    while (v3 != v4);
    v5 = v21;
    if (v21 != (__int128 *)v22)
    {
      v6 = 0;
      do
      {
        *(_DWORD *)sub_1C5AB2FB8(this + 4, v5 + 2) = v6;
        v7 = (__int128 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(__int128 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (__int128 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        ++v6;
        v5 = v8;
      }
      while (v8 != (__int128 *)v22);
    }
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * ((this[8] - this[7]) >> 3);
  do
  {
    v11 = v10 & 0x7F | ((v10 > 0x7F) << 7);
    v12 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, v11);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v12 + 1;
      *v12 = v11;
    }
    v13 = v10 > 0x7F;
    v10 >>= 7;
  }
  while (v13);
  v14 = v21;
  if (v21 != (__int128 *)v22)
  {
    do
    {
      v15 = (int *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 5);
      *(_OWORD *)v24 = xmmword_1C85F4BB0;
      v25 = 0;
      llvm::MD5::update((int *)v24, v15, v16);
      llvm::MD5::final((int *)v24, (int *)&v23);
      *(_QWORD *)v24 = v23;
      llvm::raw_ostream::write(v2, v24, 8uLL);
      v17 = (__int128 *)*((_QWORD *)v14 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(__int128 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (__int128 *)*((_QWORD *)v14 + 2);
          v9 = *(_QWORD *)v18 == (_QWORD)v14;
          v14 = v18;
        }
        while (!v9);
      }
      v14 = v18;
    }
    while (v18 != (__int128 *)v22);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  sub_1C47655E8((uint64_t)&v21, v22[0]);
  return 0;
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::writeNameTable(llvm::sampleprof::SampleProfileWriterBinary *this)
{
  llvm::raw_ostream *v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 *v5;
  int v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  char *v12;
  BOOL v13;
  __int128 *v14;
  const void *v15;
  unint64_t v16;
  _BYTE *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v22;
  _QWORD *v23[2];

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v23[0] = 0;
  v23[1] = 0;
  v22 = (__int128 *)v23;
  v3 = (_OWORD *)*((_QWORD *)this + 7);
  v4 = (_OWORD *)*((_QWORD *)this + 8);
  if (v3 != v4)
  {
    do
    {
      sub_1C62B22C4((uint64_t)&v22, (uint64_t)v3, v3);
      v3 = (_OWORD *)((char *)v3 + 24);
    }
    while (v3 != v4);
    v5 = v22;
    if (v22 != (__int128 *)v23)
    {
      v6 = 0;
      do
      {
        *(_DWORD *)sub_1C5AB2FB8((_QWORD *)this + 4, v5 + 2) = v6;
        v7 = (__int128 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(__int128 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (__int128 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        ++v6;
        v5 = v8;
      }
      while (v8 != (__int128 *)v23);
    }
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  do
  {
    v11 = v10 & 0x7F | ((v10 > 0x7F) << 7);
    v12 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, v11);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v12 + 1;
      *v12 = v11;
    }
    v13 = v10 > 0x7F;
    v10 >>= 7;
  }
  while (v13);
  v14 = v22;
  if (v22 != (__int128 *)v23)
  {
    do
    {
      v15 = (const void *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 5);
      v17 = (_BYTE *)*((_QWORD *)v2 + 4);
      if (v16 <= *((_QWORD *)v2 + 3) - (_QWORD)v17)
      {
        if (v16)
        {
          memcpy(v17, v15, *((_QWORD *)v14 + 5));
          v17 = (_BYTE *)(*((_QWORD *)v2 + 4) + v16);
          *((_QWORD *)v2 + 4) = v17;
        }
      }
      else
      {
        llvm::raw_ostream::write(v2, (const char *)v15, *((_QWORD *)v14 + 5));
        v17 = (_BYTE *)*((_QWORD *)v2 + 4);
      }
      if ((unint64_t)v17 >= *((_QWORD *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, 0);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v17 + 1;
        *v17 = 0;
      }
      v18 = (__int128 *)*((_QWORD *)v14 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(__int128 **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (__int128 *)*((_QWORD *)v14 + 2);
          v9 = *(_QWORD *)v19 == (_QWORD)v14;
          v14 = v19;
        }
        while (!v9);
      }
      v14 = v19;
    }
    while (v19 != (__int128 *)v23);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  sub_1C47655E8((uint64_t)&v22, v23[0]);
  return 0;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeNameTableSection(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 120))(a1, i + 9);
    llvm::sampleprof::SampleProfileWriterBinary::addNames((llvm::sampleprof::SampleProfileWriterBinary *)a1, (const llvm::sampleprof::FunctionSamples *)(i + 7));
  }
  v4 = *(uint64_t **)(a1 + 56);
  v5 = *(uint64_t **)(a1 + 64);
  if (v4 != v5)
  {
    while (llvm::StringRef::find(v4, ".__uniq.", 8uLL, 0) == -1)
    {
      v4 += 3;
      if (v4 == v5)
        goto LABEL_12;
    }
    v6 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v6)
    {
      v7 = 40 * v6;
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      do
      {
        if (*((_DWORD *)v8 - 2) == 2)
          *v8 |= 0x400000000uLL;
        v8 += 5;
        v7 -= 40;
      }
      while (v7);
    }
  }
LABEL_12:
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if ((_DWORD)v9)
  {
    v10 = v9 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    LODWORD(v9) = 0;
    v10 = 0;
  }
  return v10 | v9;
}

llvm::sampleprof::SampleProfileWriterBinary *llvm::sampleprof::SampleProfileWriterBinary::addNames(llvm::sampleprof::SampleProfileWriterBinary *this, const llvm::sampleprof::FunctionSamples *a2)
{
  llvm::sampleprof::SampleProfileWriterBinary *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t **i;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  BOOL v14;
  char *v15;
  char *v16;
  const llvm::sampleprof::FunctionSamples *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const llvm::sampleprof::FunctionSamples *v24;
  const llvm::sampleprof::FunctionSamples *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;

  v3 = this;
  v4 = (char *)*((_QWORD *)a2 + 9);
  v5 = (char *)a2 + 80;
  if (v4 != (char *)a2 + 80)
  {
    do
    {
      v6 = *((unsigned int *)v4 + 14);
      if ((_DWORD)v6)
      {
        for (i = (uint64_t **)*((_QWORD *)v4 + 6); ; ++i)
        {
          v8 = !*i || *i + 1 == 0;
          if (!v8)
            break;
        }
      }
      else
      {
        i = (uint64_t **)*((_QWORD *)v4 + 6);
      }
      v9 = *((_QWORD *)v4 + 6) + 8 * v6;
      if (i != (uint64_t **)v9)
      {
        v10 = *i;
        do
        {
          v11 = *v10;
          v12 = (_QWORD *)(*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterBinary *))(*(_QWORD *)v3 + 88))(v3);
          v26 = v10 + 2;
          v27 = v11;
          v28 = 0;
          this = (llvm::sampleprof::SampleProfileWriterBinary *)sub_1C630DBC4(v12, (uint64_t)&v26);
          do
          {
            v13 = i[1];
            ++i;
            v10 = v13;
            if (v13)
              v14 = v10 + 1 == 0;
            else
              v14 = 1;
          }
          while (v14);
        }
        while (i != (uint64_t **)v9);
      }
      v15 = (char *)*((_QWORD *)v4 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v16 == (_QWORD)v4;
          v4 = v16;
        }
        while (!v8);
      }
      v4 = v16;
    }
    while (v16 != v5);
  }
  v17 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)a2 + 12);
  if (v17 != (const llvm::sampleprof::FunctionSamples *)((char *)a2 + 104))
  {
    do
    {
      v18 = (_QWORD *)*((_QWORD *)v17 + 5);
      if (v18 != (_QWORD *)((char *)v17 + 48))
      {
        do
        {
          v19 = (_QWORD *)v18[9];
          v20 = v18[10];
          v21 = (_QWORD *)(*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterBinary *))(*(_QWORD *)v3 + 88))(v3);
          v26 = v19;
          v27 = v20;
          v28 = 0;
          sub_1C630DBC4(v21, (uint64_t)&v26);
          this = (llvm::sampleprof::SampleProfileWriterBinary *)llvm::sampleprof::SampleProfileWriterBinary::addNames(v3, (const llvm::sampleprof::FunctionSamples *)(v18 + 7));
          v22 = (_QWORD *)v18[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v18[2];
              v8 = *v23 == (_QWORD)v18;
              v18 = v23;
            }
            while (!v8);
          }
          v18 = v23;
        }
        while (v23 != (_QWORD *)((char *)v17 + 48));
      }
      v24 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)v17 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(const llvm::sampleprof::FunctionSamples **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (const llvm::sampleprof::FunctionSamples *)*((_QWORD *)v17 + 2);
          v8 = *(_QWORD *)v25 == (_QWORD)v17;
          v17 = v25;
        }
        while (!v8);
      }
      v17 = v25;
    }
    while (v25 != (const llvm::sampleprof::FunctionSamples *)((char *)a2 + 104));
  }
  return this;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeCSNameTableSection(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t *v37;
  uint64_t **v38;
  BOOL v39;
  llvm::raw_ostream *v40;
  unint64_t v41;
  char v42;
  char *v43;
  BOOL v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char *v56;
  unint64_t v57;
  char v58;
  char *v59;
  uint64_t *v60;
  uint64_t **v61;
  unint64_t v63;
  uint64_t **v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD v70[2];
  uint64_t *v71;
  int v72;

  v66 = 0;
  v67 = 0;
  v65 = &v66;
  v2 = *((_QWORD *)this + 70);
  v3 = *((_QWORD *)this + 71);
  if (v2 != v3)
  {
    v4 = (char *)this + 536;
    do
    {
      v5 = v66;
      v6 = &v66;
      v7 = &v66;
      if (!v66)
        goto LABEL_12;
      v6 = &v66;
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t **)v5;
          v8 = (uint64_t)(v5 + 4);
          if (!sub_1C5754088(v2, (uint64_t)(v5 + 4)))
            break;
          v5 = *v7;
          v6 = v7;
          if (!*v7)
            goto LABEL_12;
        }
        if (!sub_1C5754088(v8, v2))
          break;
        v6 = v7 + 1;
        v5 = v7[1];
        if (!v5)
          goto LABEL_12;
      }
      if (!*v6)
      {
LABEL_12:
        v9 = operator new(0x48uLL);
        v10 = *(_QWORD *)(v2 + 32);
        v11 = *(_OWORD *)(v2 + 16);
        v9[2] = *(_OWORD *)v2;
        v9[3] = v11;
        *((_QWORD *)v9 + 8) = v10;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v7;
        *v6 = (uint64_t *)v9;
        if (*v65)
        {
          v65 = (uint64_t **)*v65;
          v12 = *v6;
        }
        else
        {
          v12 = (uint64_t *)v9;
        }
        sub_1C4768E74(v66, v12);
        ++v67;
      }
      v2 += 48;
    }
    while (v2 != v3);
    v13 = v65;
    if (v65 != &v66)
    {
      v14 = 0;
      do
      {
        v15 = *((_OWORD *)v13 + 3);
        v70[0] = *((_OWORD *)v13 + 2);
        v70[1] = v15;
        v71 = v13[8];
        v72 = 0;
        sub_1C5AB3544((uint64_t)&v68, (uint64_t)v4, (uint64_t)v70, &v72);
        v16 = v68;
        if (v69)
        {
          v17 = (__int128 *)(v13 + 4);
          v18 = (_OWORD *)*((_QWORD *)this + 71);
          v19 = *((_QWORD *)this + 72);
          if ((unint64_t)v18 >= v19)
          {
            v25 = (_OWORD *)*((_QWORD *)this + 70);
            v26 = 0xAAAAAAAAAAAAAAABLL * (v18 - v25) + 1;
            if (v26 > 0x555555555555555)
              abort();
            v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v25) >> 4);
            if (2 * v27 > v26)
              v26 = 2 * v27;
            if (v27 >= 0x2AAAAAAAAAAAAAALL)
              v28 = 0x555555555555555;
            else
              v28 = v26;
            if (v28)
            {
              if (v28 > 0x555555555555555)
                sub_1C4764EE4();
              v29 = (char *)operator new(48 * v28);
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[16 * (v18 - v25)];
            v31 = *v17;
            v32 = *((_OWORD *)v13 + 3);
            *((_QWORD *)v30 + 4) = v13[8];
            *(_OWORD *)v30 = v31;
            *((_OWORD *)v30 + 1) = v32;
            *((_DWORD *)v30 + 10) = 0;
            v33 = v30;
            if (v18 != v25)
            {
              do
              {
                v34 = *(v18 - 3);
                v35 = *(v18 - 1);
                *((_OWORD *)v33 - 2) = *(v18 - 2);
                *((_OWORD *)v33 - 1) = v35;
                *((_OWORD *)v33 - 3) = v34;
                v33 -= 48;
                v18 -= 3;
              }
              while (v18 != v25);
              v18 = (_OWORD *)*((_QWORD *)this + 70);
            }
            v36 = &v29[48 * v28];
            *((_QWORD *)this + 70) = v33;
            v22 = v30 + 48;
            *((_QWORD *)this + 71) = v30 + 48;
            *((_QWORD *)this + 72) = v36;
            v4 = (char *)this + 536;
            if (v18)
              operator delete(v18);
          }
          else
          {
            v20 = *v17;
            v21 = *((_OWORD *)v13 + 3);
            *((_QWORD *)v18 + 4) = v13[8];
            *v18 = v20;
            v18[1] = v21;
            *((_DWORD *)v18 + 10) = 0;
            v22 = v18 + 3;
          }
          *((_QWORD *)this + 71) = v22;
          v24 = *((_QWORD *)this + 70);
          v23 = -1 - 1431655765 * (((unint64_t)v22 - v24) >> 4);
          *(_DWORD *)(v16 + 40) = v23;
        }
        else
        {
          v23 = *(_DWORD *)(v68 + 40);
          v24 = *((_QWORD *)this + 70);
        }
        *(_DWORD *)(v24 + 48 * v23 + 40) = v14;
        v37 = v13[1];
        if (v37)
        {
          do
          {
            v38 = (uint64_t **)v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (uint64_t **)v13[2];
            v39 = *v38 == (uint64_t *)v13;
            v13 = v38;
          }
          while (!v39);
        }
        ++v14;
        v13 = v38;
      }
      while (v38 != &v66);
    }
  }
  v40 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v41 = v67;
  do
  {
    v42 = v41 & 0x7F | ((v41 > 0x7F) << 7);
    v43 = (char *)*((_QWORD *)v40 + 4);
    if ((unint64_t)v43 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, v42);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v43 + 1;
      *v43 = v42;
    }
    v44 = v41 > 0x7F;
    v41 >>= 7;
  }
  while (v44);
  v45 = (uint64_t *)v65;
  if (v65 == &v66)
  {
LABEL_76:
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v53 = 0;
    v63 = 0;
  }
  else
  {
    while (1)
    {
      v47 = v45[6];
      v46 = v45[7];
      v48 = v46;
      do
      {
        v49 = v48 & 0x7F | ((v48 > 0x7F) << 7);
        v50 = (char *)*((_QWORD *)v40 + 4);
        if ((unint64_t)v50 >= *((_QWORD *)v40 + 3))
        {
          llvm::raw_ostream::write(v40, v49);
        }
        else
        {
          *((_QWORD *)v40 + 4) = v50 + 1;
          *v50 = v49;
        }
        v44 = v48 > 0x7F;
        v48 >>= 7;
      }
      while (v44);
      if (v46)
        break;
LABEL_70:
      v60 = (uint64_t *)v45[1];
      if (v60)
      {
        do
        {
          v61 = (uint64_t **)v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (uint64_t **)v45[2];
          v39 = *v61 == v45;
          v45 = (uint64_t *)v61;
        }
        while (!v39);
      }
      v45 = (uint64_t *)v61;
      if (v61 == &v66)
        goto LABEL_76;
    }
    v51 = v47 + 24 * v46;
    while (1)
    {
      v52 = llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(this, *(const void **)v47, *(const void **)(v47 + 8));
      v53 = v52;
      if ((_DWORD)v52)
        break;
      v54 = *(unsigned int *)(v47 + 16);
      do
      {
        v55 = v54 & 0x7F | ((v54 > 0x7F) << 7);
        v56 = (char *)*((_QWORD *)v40 + 4);
        if ((unint64_t)v56 >= *((_QWORD *)v40 + 3))
        {
          llvm::raw_ostream::write(v40, v55);
        }
        else
        {
          *((_QWORD *)v40 + 4) = v56 + 1;
          *v56 = v55;
        }
        v44 = v54 > 0x7F;
        v54 >>= 7;
      }
      while (v44);
      v57 = *(unsigned int *)(v47 + 20);
      do
      {
        v58 = v57 & 0x7F | ((v57 > 0x7F) << 7);
        v59 = (char *)*((_QWORD *)v40 + 4);
        if ((unint64_t)v59 >= *((_QWORD *)v40 + 3))
        {
          llvm::raw_ostream::write(v40, v58);
        }
        else
        {
          *((_QWORD *)v40 + 4) = v59 + 1;
          *v59 = v58;
        }
        v44 = v57 > 0x7F;
        v57 >>= 7;
      }
      while (v44);
      v47 += 24;
      if (v47 == v51)
        goto LABEL_70;
    }
    v63 = v52 & 0xFFFFFFFF00000000;
  }
  sub_1C49F3440(v66);
  return v63 | v53;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeProfileSymbolListSection(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  llvm::sampleprof::ProfileSymbolList *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (llvm::sampleprof::ProfileSymbolList *)*((_QWORD *)this + 73);
  if (v2
    && *((_DWORD *)v2 + 4)
    && (v3 = llvm::sampleprof::ProfileSymbolList::write(v2, *((llvm::raw_ostream **)this + 1)), (_DWORD)v3))
  {
    v4 = v3 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v4 = 0;
    LODWORD(v3) = 0;
  }
  return v3 | v4;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeOneSection(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;

  if ((_DWORD)a2 == 3)
  {
    v8 = *(_BYTE **)(a1 + 584);
    if (!v8)
      goto LABEL_52;
    if (!*v8)
      goto LABEL_52;
    v9 = *(unsigned int *)(a1 + 96);
    if (!(_DWORD)v9)
      goto LABEL_52;
    v10 = 40 * v9;
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      if (*((_DWORD *)v11 - 2) == 3)
        *v11 |= 1uLL;
      v11 += 5;
      v10 -= 40;
    }
    while (v10);
  }
  if ((_DWORD)a2 != 5 || !llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
    goto LABEL_16;
  v12 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v12)
  {
    v13 = 40 * v12;
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      if (*((_DWORD *)v14 - 2) == 5)
        *v14 |= 0x100000000uLL;
      v14 += 5;
      v13 -= 40;
    }
    while (v13);
LABEL_16:
    v15 = llvm::sampleprof::FunctionSamples::ProfileIsCSFlat;
    if ((_DWORD)a2 != 5)
    {
LABEL_28:
      v20 = (_DWORD)a2 != 1;
      if ((_DWORD)a2 == 1 && v15)
      {
        v21 = *(unsigned int *)(a1 + 96);
        if ((_DWORD)v21)
        {
          v22 = 40 * v21;
          v23 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          do
          {
            if (*((_DWORD *)v23 - 2) == 1)
              *v23 |= 0x200000000uLL;
            v23 += 5;
            v22 -= 40;
          }
          while (v22);
        }
        v20 = 0;
      }
      if (!v20)
      {
        if (llvm::sampleprof::FunctionSamples::ProfileIsCSNested)
        {
          v24 = *(unsigned int *)(a1 + 96);
          if ((_DWORD)v24)
          {
            v25 = 40 * v24;
            v26 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
            do
            {
              if (*((_DWORD *)v26 - 2) == 1)
                *v26 |= 0x1000000000uLL;
              v26 += 5;
              v25 -= 40;
            }
            while (v25);
          }
        }
      }
      if (llvm::sampleprof::FunctionSamples::ProfileIsFS)
        v27 = v20;
      else
        v27 = 1;
      if ((v27 & 1) == 0)
      {
        v28 = *(unsigned int *)(a1 + 96);
        if ((_DWORD)v28)
        {
          v29 = 40 * v28;
          v30 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          do
          {
            if (*((_DWORD *)v30 - 2) == 1)
              *v30 |= 0x400000000uLL;
            v30 += 5;
            v29 -= 40;
          }
          while (v29);
        }
      }
      goto LABEL_52;
    }
    goto LABEL_19;
  }
  v15 = llvm::sampleprof::FunctionSamples::ProfileIsCSFlat;
LABEL_19:
  if (v15)
    v16 = 0;
  else
    v16 = llvm::sampleprof::FunctionSamples::ProfileIsCSNested == 0;
  if (!v16)
  {
    v17 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v17)
    {
      v18 = 40 * v17;
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      do
      {
        if (*((_DWORD *)v19 - 2) == 5)
          *v19 |= 0x200000000uLL;
        v19 += 5;
        v18 -= 40;
      }
      while (v18);
      goto LABEL_28;
    }
  }
LABEL_52:
  v31 = *(_QWORD **)(a1 + 8);
  v32 = (*(uint64_t (**)(_QWORD *))(*v31 + 80))(v31);
  v33 = v31[4];
  v34 = v31[2];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 88) + 40 * a3 + 8) & 1) != 0)
  {
    v35 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v35;
  }
  switch((int)a2)
  {
    case 1:
      llvm::sampleprof::SampleProfileWriter::computeSummary(a1, a4);
      v36 = llvm::sampleprof::SampleProfileWriterBinary::writeSummary((llvm::sampleprof::SampleProfileWriterBinary *)a1);
      if ((_DWORD)v36)
        goto LABEL_72;
      goto LABEL_71;
    case 2:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeNameTableSection(a1, a4);
      if (!(_DWORD)v36)
        goto LABEL_71;
      goto LABEL_72;
    case 3:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeProfileSymbolListSection((llvm::sampleprof::SampleProfileWriterExtBinaryBase *)a1);
      if (!(_DWORD)v36)
        goto LABEL_71;
      goto LABEL_72;
    case 4:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncOffsetTable((llvm::sampleprof::SampleProfileWriterExtBinaryBase *)a1);
      if (!(_DWORD)v36)
        goto LABEL_71;
      goto LABEL_72;
    case 5:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeFuncMetadata((llvm::sampleprof::SampleProfileWriterExtBinaryBase *)a1, a4);
      if (!(_DWORD)v36)
        goto LABEL_71;
      goto LABEL_72;
    case 6:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeCSNameTableSection((llvm::sampleprof::SampleProfileWriterExtBinaryBase *)a1);
      if (!(_DWORD)v36)
        goto LABEL_71;
      goto LABEL_72;
    default:
      if ((_DWORD)a2 != 32)
      {
        v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
        if (!(_DWORD)v36)
          goto LABEL_71;
LABEL_72:
        v38 = v36 & 0xFFFFFFFF00000000;
        return v36 | v38;
      }
      v37 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)(a1 + 424) = (*(uint64_t (**)(_QWORD *))(*v37 + 80))(v37) + v37[4] - v37[2];
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a4);
      if ((_DWORD)v36)
        goto LABEL_72;
LABEL_71:
      v36 = llvm::sampleprof::SampleProfileWriterExtBinaryBase::addNewSection((_QWORD *)a1, a2, a3, v32 + v33 - v34);
      if ((_DWORD)v36)
        goto LABEL_72;
      if (!atomic_load(qword_1EF8F7270))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
      v38 = 0;
      LODWORD(v36) = 0;
      return v36 | v38;
  }
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::setToCompressSection(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned int *)(result + 96);
  if ((_DWORD)v2)
  {
    v3 = 40 * v2;
    v4 = (_QWORD *)(*(_QWORD *)(result + 88) + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) == a2)
        *v4 |= 1uLL;
      v4 += 5;
      v3 -= 40;
    }
    while (v3);
  }
  return result;
}

uint64_t llvm::sampleprof::SampleProfileWriter::computeSummary(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v4 = operator new(0x40uLL);
  *v4 = xmmword_1C86680E4;
  v4[1] = unk_1C86680F4;
  v4[2] = xmmword_1C8668104;
  v4[3] = unk_1C8668114;
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  v13[2] = v4;
  v13[3] = v4 + 4;
  v13[4] = v4 + 4;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  llvm::SampleProfileSummaryBuilder::computeSummaryForProfiles(&v12, a2, &v11);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = (uint64_t *)(a1 + 16);
  v5 = v7;
  v8 = v11;
  v11 = 0;
  *v6 = v8;
  if (v7)
  {
    sub_1C4E5DDC4((uint64_t)v6, v5);
    v9 = v11;
    v11 = 0;
    if (v9)
      sub_1C4E5DDC4((uint64_t)&v11, v9);
  }
  return sub_1C6308954((uint64_t)&v12);
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::writeSummary(llvm::sampleprof::SampleProfileWriterBinary *this)
{
  llvm::raw_ostream *v2;
  unint64_t v3;
  char v4;
  char *v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  char *v9;
  unint64_t v10;
  char v11;
  char *v12;
  unint64_t v13;
  char v14;
  char *v15;
  unint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char *v29;
  char v30;
  char *v31;
  char v32;
  char *v33;

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  do
  {
    v4 = v3 & 0x7F | ((v3 > 0x7F) << 7);
    v5 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v4);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v5 + 1;
      *v5 = v4;
    }
    v6 = v3 > 0x7F;
    v3 >>= 7;
  }
  while (v6);
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
  do
  {
    v8 = v7 & 0x7F | ((v7 > 0x7F) << 7);
    v9 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v8);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v9 + 1;
      *v9 = v8;
    }
    v6 = v7 > 0x7F;
    v7 >>= 7;
  }
  while (v6);
  v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  do
  {
    v11 = v10 & 0x7F | ((v10 > 0x7F) << 7);
    v12 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v11);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v12 + 1;
      *v12 = v11;
    }
    v6 = v10 > 0x7F;
    v10 >>= 7;
  }
  while (v6);
  v13 = *(unsigned int *)(*((_QWORD *)this + 2) + 64);
  do
  {
    v14 = v13 & 0x7F | ((v13 > 0x7F) << 7);
    v15 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v14);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v15 + 1;
      *v15 = v14;
    }
    v6 = v13 > 0x7F;
    v13 >>= 7;
  }
  while (v6);
  v16 = *(unsigned int *)(*((_QWORD *)this + 2) + 68);
  do
  {
    v17 = v16 & 0x7F | ((v16 > 0x7F) << 7);
    v18 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v17);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v18 + 1;
      *v18 = v17;
    }
    v6 = v16 > 0x7F;
    v16 >>= 7;
  }
  while (v6);
  v19 = *((_QWORD *)this + 2);
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 3);
  do
  {
    v21 = v20 & 0x7F | ((v20 > 0x7F) << 7);
    v22 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v21);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v22 + 1;
      *v22 = v21;
    }
    v6 = v20 > 0x7F;
    v20 >>= 7;
  }
  while (v6);
  v23 = *(unsigned int **)(v19 + 8);
  v24 = *(unsigned int **)(v19 + 16);
  while (v23 != v24)
  {
    v25 = *v23;
    v27 = *((_QWORD *)v23 + 1);
    v26 = *((_QWORD *)v23 + 2);
    do
    {
      v28 = v25 & 0x7F | ((v25 > 0x7F) << 7);
      v29 = (char *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v29 >= *((_QWORD *)v2 + 3))
      {
        v2 = llvm::raw_ostream::write(v2, v28);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v29 + 1;
        *v29 = v28;
      }
      v6 = v25 > 0x7F;
      v25 >>= 7;
    }
    while (v6);
    do
    {
      v30 = v27 & 0x7F | ((v27 > 0x7F) << 7);
      v31 = (char *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v31 >= *((_QWORD *)v2 + 3))
      {
        v2 = llvm::raw_ostream::write(v2, v30);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v31 + 1;
        *v31 = v30;
      }
      v6 = v27 > 0x7F;
      v27 >>= 7;
    }
    while (v6);
    do
    {
      v32 = v26 & 0x7F | ((v26 > 0x7F) << 7);
      v33 = (char *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)v2 + 3))
      {
        v2 = llvm::raw_ostream::write(v2, v32);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v33 + 1;
        *v33 = v32;
      }
      v6 = v26 > 0x7F;
      v26 >>= 7;
    }
    while (v6);
    v23 += 6;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 0;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinary::writeDefaultLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 152))(a1, 1, 0, a2);
  if ((_DWORD)v4
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 2, 1, a2),
        (_DWORD)v4)
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 6, 2, a2),
        (_DWORD)v4)
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 32, 4, a2),
        (_DWORD)v4)
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 3, 5, a2),
        (_DWORD)v4)
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 4, 3, a2),
        (_DWORD)v4)
    || (v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 5, 6, a2),
        (_DWORD)v4))
  {
    v5 = v4 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v5 = 0;
    LODWORD(v4) = 0;
  }
  return v4 | v5;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinary::writeCtxSplitLayout(_QWORD *a1, uint64_t a2)
{
  uint64_t *i;
  __int128 *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  void *v18;
  void *__p[2];
  __int128 v21;
  int v22;
  void *v23[2];
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34[3];
  _QWORD *v35[3];

  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v25 = 1065353216;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v22 = 1065353216;
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v5 = (__int128 *)(i + 2);
    v6 = (__int128 *)(i + 7);
    v7 = i + 16;
    v8 = *((_OWORD *)i + 2);
    if (i[21])
    {
      v26 = *v5;
      v27 = v8;
      v28 = i[6];
      v12 = *(_OWORD *)(i + 9);
      v13 = *(_OWORD *)(i + 13);
      v31 = *(_OWORD *)(i + 11);
      v32 = v13;
      v33 = i[15];
      v30 = v12;
      v29 = *v6;
      sub_1C5AA5340((uint64_t)v34, v7);
      sub_1C5AA55E8((uint64_t)v35, i + 19);
      v11 = v23;
    }
    else
    {
      v26 = *v5;
      v27 = v8;
      v28 = i[6];
      v9 = *(_OWORD *)(i + 9);
      v10 = *(_OWORD *)(i + 13);
      v31 = *(_OWORD *)(i + 11);
      v32 = v10;
      v33 = i[15];
      v30 = v9;
      v29 = *v6;
      sub_1C5AA5340((uint64_t)v34, v7);
      sub_1C5AA55E8((uint64_t)v35, i + 19);
      v11 = __p;
    }
    sub_1C5AB2D00((uint64_t)v11, (uint64_t)&v26, (uint64_t)&v26);
    sub_1C63097D8((uint64_t)v35, v35[1]);
    sub_1C6309824((uint64_t)v34, v34[1]);
  }
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 152))(a1, 1, 0, a2);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 152))(a1, 2, 1, a2);
  if ((_DWORD)v14)
    goto LABEL_17;
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(*a1 + 152))(a1, 32, 3, v23);
  if ((_DWORD)v14
    || (v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(*a1 + 152))(a1, 4, 2, v23),
        (_DWORD)v14)
    || (*(_QWORD *)(a1[11] + 208) |= 2uLL,
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(*a1 + 152))(a1, 32, 5, __p),
        (_DWORD)v14)
    || (*(_QWORD *)(a1[11] + 168) |= 2uLL,
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **))(*a1 + 152))(a1, 4, 4, __p),
        (_DWORD)v14)
    || (v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 152))(a1, 3, 6, a2),
        (_DWORD)v14)
    || (v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 152))(a1, 5, 7, a2),
        (_DWORD)v14))
  {
LABEL_17:
    v16 = v14 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v16 = 0;
    LODWORD(v14) = 0;
  }
  sub_1C630A054((uint64_t)__p, (_QWORD **)v21);
  v17 = __p[0];
  __p[0] = 0;
  if (v17)
    operator delete(v17);
  sub_1C630A054((uint64_t)v23, (_QWORD **)v24);
  v18 = v23[0];
  v23[0] = 0;
  if (v18)
    operator delete(v18);
  return v14 | v16;
}

unint64_t llvm::sampleprof::SampleProfileWriterExtBinary::writeSections(uint64_t a1, uint64_t a2)
{
  std::system_category();
  if (*(_DWORD *)(a1 + 80))
    return llvm::sampleprof::SampleProfileWriterExtBinary::writeCtxSplitLayout((_QWORD *)a1, a2);
  else
    return llvm::sampleprof::SampleProfileWriterExtBinary::writeDefaultLayout(a1, a2);
}

unint64_t llvm::sampleprof::SampleProfileWriterCompactBinary::write(llvm::sampleprof::SampleProfileWriterCompactBinary *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = llvm::sampleprof::SampleProfileWriter::write((uint64_t)a1, a2);
  if ((_DWORD)v3 || (v3 = llvm::sampleprof::SampleProfileWriterCompactBinary::writeFuncOffsetTable(a1), (_DWORD)v3))
  {
    v4 = v3 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v4 = 0;
    LODWORD(v3) = 0;
  }
  return v3 | v4;
}

unint64_t llvm::sampleprof::SampleProfileWriterCompactBinary::writeFuncOffsetTable(llvm::sampleprof::SampleProfileWriterCompactBinary *this)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  off_t v6;
  llvm::raw_ostream *v7;
  unint64_t v8;
  char v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  unint64_t v20;
  char v23[8];

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v3 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v2 + 80))(v2);
  v4 = *((_QWORD *)v2 + 4);
  v5 = *((_QWORD *)v2 + 2);
  if (llvm::raw_fd_ostream::seek(v2, *((_QWORD *)this + 16)) == -1
    || (v6 = v4 - v5 + v3,
        v7 = (llvm::raw_ostream *)*((_QWORD *)this + 1),
        *(_QWORD *)v23 = v6,
        llvm::raw_ostream::write(v7, v23, 8uLL),
        llvm::raw_fd_ostream::seek(v2, v6) == -1))
  {
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v20 = 0;
    v16 = 11;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
    do
    {
      v9 = v8 & 0x7F | ((v8 > 0x7F) << 7);
      v10 = (char *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, v9);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v10 + 1;
        *v10 = v9;
      }
      v11 = v8 > 0x7F;
      v8 >>= 7;
    }
    while (v11);
    v12 = *((_QWORD *)this + 13);
    v13 = *((_QWORD *)this + 14);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 16);
      v15 = llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(this, *(const void **)v12, *(const void **)(v12 + 8));
      v16 = v15;
      if ((_DWORD)v15)
      {
        v20 = v15 & 0xFFFFFFFF00000000;
        return v20 | v16;
      }
      do
      {
        v17 = v14 & 0x7F | ((v14 > 0x7F) << 7);
        v18 = (char *)*((_QWORD *)v2 + 4);
        if ((unint64_t)v18 >= *((_QWORD *)v2 + 3))
        {
          llvm::raw_ostream::write(v2, v17);
        }
        else
        {
          *((_QWORD *)v2 + 4) = v18 + 1;
          *v18 = v17;
        }
        v11 = v14 > 0x7F;
        v14 >>= 7;
      }
      while (v11);
      v12 += 24;
    }
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v16 = 0;
    v20 = 0;
  }
  return v20 | v16;
}

unint64_t llvm::sampleprof::SampleProfileWriterText::writeSample(llvm::sampleprof::SampleProfileWriterText *this, const llvm::sampleprof::FunctionSamples *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  const char *p_p;
  size_t v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  const void *v11;
  unint64_t v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unsigned int **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  _QWORD *v28;
  _BYTE *v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  const void *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD **v36;
  BOOL v37;
  const llvm::sampleprof::FunctionSamples *v38;
  unsigned int v39;
  unsigned int **v40;
  unsigned int **v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _WORD *v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  void *v59;
  _BYTE *v60;
  unint64_t v62;
  unsigned int **v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  void *__p;
  size_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  if (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
  {
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v5)
    {
      v6 = llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 1), "[", 1uLL);
    }
    else
    {
      *v5 = 91;
      ++*((_QWORD *)v4 + 4);
      v6 = v4;
    }
    sub_1C5AA5C64((_QWORD *)a2 + 2, (uint64_t)&__p);
    if (v70 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    if (v70 >= 0)
      v8 = HIBYTE(v70) & 0x7F;
    else
      v8 = v69;
    v9 = llvm::raw_ostream::write(v6, p_p, v8);
    v10 = (_WORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 14941;
      *((_QWORD *)v9 + 4) += 2;
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, "]:", 2uLL);
    }
    sub_1C5E21910(v9, *((_QWORD *)a2 + 7), 0, 0, 0);
    if (SHIBYTE(v70) < 0)
      operator delete(__p);
  }
  else
  {
    v11 = (const void *)*((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 3);
    v13 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (v12 <= *((_QWORD *)v4 + 3) - (_QWORD)v13)
    {
      if (v12)
      {
        memcpy(*((void **)v4 + 4), v11, *((_QWORD *)a2 + 3));
        v13 = (_BYTE *)(*((_QWORD *)v4 + 4) + v12);
        *((_QWORD *)v4 + 4) = v13;
      }
      v14 = v4;
    }
    else
    {
      v14 = llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 1), (const char *)v11, *((_QWORD *)a2 + 3));
      v13 = (_BYTE *)*((_QWORD *)v14 + 4);
    }
    if (*((_BYTE **)v14 + 3) == v13)
    {
      v14 = llvm::raw_ostream::write(v14, ":", 1uLL);
    }
    else
    {
      *v13 = 58;
      ++*((_QWORD *)v14 + 4);
    }
    sub_1C5E21910(v14, *((_QWORD *)a2 + 7), 0, 0, 0);
  }
  if (!*((_DWORD *)this + 7))
  {
    v15 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v15)
    {
      v16 = llvm::raw_ostream::write(v4, ":", 1uLL);
    }
    else
    {
      *v15 = 58;
      ++*((_QWORD *)v4 + 4);
      v16 = v4;
    }
    sub_1C5E21910(v16, *((_QWORD *)a2 + 8), 0, 0, 0);
  }
  v17 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v17)
  {
    llvm::raw_ostream::write(v4, "\n", 1uLL);
  }
  else
  {
    *v17 = 10;
    ++*((_QWORD *)v4 + 4);
  }
  sub_1C5AA3558((uint64_t)&__p, (_QWORD *)a2 + 9);
  if ((_DWORD)v69)
  {
    v18 = (unsigned int **)__p;
    v64 = (unsigned int **)((char *)__p + 8 * v69);
    do
    {
      v19 = (uint64_t)*v18;
      v21 = **v18;
      v20 = (*v18)[1];
      v22 = llvm::raw_ostream::indent(v4, *((_DWORD *)this + 7) + 1);
      sub_1C5E21910(v22, v21, 0, 0, 0);
      v24 = (_BYTE *)*((_QWORD *)v4 + 3);
      v23 = (_BYTE *)*((_QWORD *)v4 + 4);
      if ((_DWORD)v20)
      {
        if (v24 == v23)
        {
          v26 = llvm::raw_ostream::write(v4, ".", 1uLL);
        }
        else
        {
          *v23 = 46;
          ++*((_QWORD *)v4 + 4);
          v26 = v4;
        }
        sub_1C5E21910(v26, v20, 0, 0, 0);
        v27 = (_WORD *)*((_QWORD *)v26 + 4);
        if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 1uLL)
        {
          *v27 = 8250;
          *((_QWORD *)v26 + 4) += 2;
          goto LABEL_38;
        }
        v25 = v26;
      }
      else
      {
        if ((unint64_t)(v24 - v23) > 1)
        {
          *(_WORD *)v23 = 8250;
          *((_QWORD *)v4 + 4) += 2;
          goto LABEL_38;
        }
        v25 = v4;
      }
      llvm::raw_ostream::write(v25, ": ", 2uLL);
LABEL_38:
      sub_1C5E21910(v4, *(_QWORD *)(v19 + 8), 0, 0, 0);
      sub_1C62A3FC4((uint64_t *)(v19 + 16), &v65);
      v28 = v65;
      if (v65 != &v66)
      {
        do
        {
          v30 = (_BYTE *)*((_QWORD *)v4 + 4);
          if (*((_BYTE **)v4 + 3) == v30)
          {
            v31 = llvm::raw_ostream::write(v4, " ", 1uLL);
            v32 = (_BYTE *)*((_QWORD *)v31 + 4);
          }
          else
          {
            *v30 = 32;
            v32 = (_BYTE *)(*((_QWORD *)v4 + 4) + 1);
            *((_QWORD *)v4 + 4) = v32;
            v31 = v4;
          }
          v33 = (const void *)v28[4];
          v34 = v28[5];
          if (v34 <= *((_QWORD *)v31 + 3) - (_QWORD)v32)
          {
            if (v34)
            {
              memcpy(v32, v33, v28[5]);
              v32 = (_BYTE *)(*((_QWORD *)v31 + 4) + v34);
              *((_QWORD *)v31 + 4) = v32;
            }
          }
          else
          {
            v31 = llvm::raw_ostream::write(v31, (const char *)v33, v28[5]);
            v32 = (_BYTE *)*((_QWORD *)v31 + 4);
          }
          if (*((_BYTE **)v31 + 3) == v32)
          {
            v31 = llvm::raw_ostream::write(v31, ":", 1uLL);
          }
          else
          {
            *v32 = 58;
            ++*((_QWORD *)v31 + 4);
          }
          sub_1C5E21910(v31, v28[6], 0, 0, 0);
          v35 = (_QWORD *)v28[1];
          if (v35)
          {
            do
            {
              v36 = (_QWORD **)v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v36 = (_QWORD **)v28[2];
              v37 = *v36 == v28;
              v28 = v36;
            }
            while (!v37);
          }
          v28 = v36;
        }
        while (v36 != &v66);
      }
      sub_1C47655E8((uint64_t)&v65, v66);
      v29 = (_BYTE *)*((_QWORD *)v4 + 4);
      if (*((_BYTE **)v4 + 3) == v29)
      {
        llvm::raw_ostream::write(v4, "\n", 1uLL);
      }
      else
      {
        *v29 = 10;
        ++*((_QWORD *)v4 + 4);
      }
      ++v18;
    }
    while (v18 != v64);
  }
  v38 = a2;
  sub_1C5AA403C((uint64_t)&v65, (_QWORD *)a2 + 12);
  v39 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 7) = v39;
  if ((_DWORD)v66)
  {
    v40 = (unsigned int **)v65;
    v41 = (unsigned int **)((char *)v65 + 8 * v66);
    do
    {
      v42 = (_QWORD *)*((_QWORD *)*v40 + 1);
      v43 = (uint64_t)(*v40 + 4);
      if (v42 != (_QWORD *)v43)
      {
        do
        {
          v45 = **v40;
          v44 = (*v40)[1];
          v46 = llvm::raw_ostream::indent(v4, *((_DWORD *)this + 7));
          sub_1C5E21910(v46, v45, 0, 0, 0);
          v48 = (_BYTE *)*((_QWORD *)v4 + 3);
          v47 = (_BYTE *)*((_QWORD *)v4 + 4);
          if ((_DWORD)v44)
          {
            if (v48 == v47)
            {
              v49 = llvm::raw_ostream::write(v4, ".", 1uLL);
            }
            else
            {
              *v47 = 46;
              ++*((_QWORD *)v4 + 4);
              v49 = v4;
            }
            sub_1C5E21910(v49, v44, 0, 0, 0);
            v50 = (_WORD *)*((_QWORD *)v49 + 4);
            if (*((_QWORD *)v49 + 3) - (_QWORD)v50 <= 1uLL)
            {
              v51 = v49;
LABEL_74:
              llvm::raw_ostream::write(v51, ": ", 2uLL);
              goto LABEL_75;
            }
            *v50 = 8250;
            *((_QWORD *)v49 + 4) += 2;
          }
          else
          {
            if ((unint64_t)(v48 - v47) <= 1)
            {
              v51 = v4;
              goto LABEL_74;
            }
            *(_WORD *)v47 = 8250;
            *((_QWORD *)v4 + 4) += 2;
          }
LABEL_75:
          v52 = (*(uint64_t (**)(llvm::sampleprof::SampleProfileWriterText *, _QWORD *))(*(_QWORD *)this + 16))(this, v42 + 7);
          v53 = v52;
          if ((_DWORD)v52)
          {
            v62 = v52 & 0xFFFFFFFF00000000;
            goto LABEL_102;
          }
          v54 = (_QWORD *)v42[1];
          if (v54)
          {
            do
            {
              v55 = v54;
              v54 = (_QWORD *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              v55 = (_QWORD *)v42[2];
              v37 = *v55 == (_QWORD)v42;
              v42 = v55;
            }
            while (!v37);
          }
          v42 = v55;
        }
        while (v55 != (_QWORD *)v43);
      }
      ++v40;
    }
    while (v40 != v41);
    v39 = *((_DWORD *)this + 7);
    v38 = a2;
  }
  *((_DWORD *)this + 7) = v39 - 1;
  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    llvm::raw_ostream::indent(v4, v39);
    v56 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v56 > 0xDuLL)
    {
      qmemcpy(v56, "!CFGChecksum: ", 14);
      *((_QWORD *)v4 + 4) += 14;
      v57 = v4;
    }
    else
    {
      v57 = llvm::raw_ostream::write(v4, "!CFGChecksum: ", 0xEuLL);
    }
    sub_1C5E21910(v57, *((_QWORD *)v38 + 1), 0, 0, 0);
    v58 = (_BYTE *)*((_QWORD *)v57 + 4);
    if (*((_BYTE **)v57 + 3) == v58)
    {
      llvm::raw_ostream::write(v57, "\n", 1uLL);
    }
    else
    {
      *v58 = 10;
      ++*((_QWORD *)v57 + 4);
    }
  }
  if (*((_DWORD *)v38 + 13))
  {
    llvm::raw_ostream::indent(v4, *((_DWORD *)this + 7) + 1);
    v59 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v59 > 0xCuLL)
    {
      qmemcpy(v59, "!Attributes: ", 13);
      *((_QWORD *)v4 + 4) += 13;
    }
    else
    {
      v4 = llvm::raw_ostream::write(v4, "!Attributes: ", 0xDuLL);
    }
    sub_1C5E21910(v4, *((unsigned int *)v38 + 13), 0, 0, 0);
    v60 = (_BYTE *)*((_QWORD *)v4 + 4);
    if (*((_BYTE **)v4 + 3) == v60)
    {
      llvm::raw_ostream::write(v4, "\n", 1uLL);
    }
    else
    {
      *v60 = 10;
      ++*((_QWORD *)v4 + 4);
    }
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  v53 = 0;
  v62 = 0;
LABEL_102:
  if (v65 != &v67)
    free(v65);
  if (__p != &v70)
    free(__p);
  return v62 | v53;
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::writeContextIdx(_QWORD *a1, const void **a2)
{
  return llvm::sampleprof::SampleProfileWriterBinary::writeNameIdx(a1, *a2, a2[1]);
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::addName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD v7[2];
  int v8;

  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v7[0] = a2;
  v7[1] = a3;
  v8 = 0;
  return sub_1C630DBC4(v5, (uint64_t)v7);
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::addContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[2];
  int v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6[0] = v2;
  v6[1] = v3;
  v7 = 0;
  return sub_1C630DBC4(v4, (uint64_t)v6);
}

void llvm::sampleprof::SampleProfileWriterExtBinaryBase::addContext(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  if (*((_DWORD *)a2 + 8))
  {
    v4 = *((_QWORD *)a2 + 3);
    if (v4)
    {
      v5 = (uint64_t *)*((_QWORD *)a2 + 2);
      v6 = &v5[3 * v4];
      do
      {
        v7 = *v5;
        v8 = v5[1];
        v5 += 3;
        v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
        *(_QWORD *)&v30 = v7;
        *((_QWORD *)&v30 + 1) = v8;
        LODWORD(v31) = 0;
        sub_1C630DBC4(v9, (uint64_t)&v30);
      }
      while (v5 != v6);
    }
    v25 = *a2;
    v26 = a2[1];
    v27 = *((_QWORD *)a2 + 4);
    v30 = *a2;
    v31 = v26;
    v32 = *((_QWORD *)a2 + 4);
    v33 = 0;
    sub_1C5AB3544((uint64_t)&v28, (uint64_t)(a1 + 67), (uint64_t)&v30, &v33);
    if (v29)
    {
      v10 = v28;
      v11 = (_OWORD *)a1[71];
      v12 = a1[72];
      if ((unint64_t)v11 >= v12)
      {
        v14 = (_OWORD *)a1[70];
        v15 = 0xAAAAAAAAAAAAAAABLL * (v11 - v14) + 1;
        if (v15 > 0x555555555555555)
          abort();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 4);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x2AAAAAAAAAAAAAALL)
          v17 = 0x555555555555555;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 > 0x555555555555555)
            sub_1C4764EE4();
          v18 = (char *)operator new(48 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[16 * (v11 - v14)];
        *(_OWORD *)v19 = v25;
        *((_OWORD *)v19 + 1) = v26;
        *((_QWORD *)v19 + 4) = v27;
        *((_DWORD *)v19 + 10) = 0;
        v13 = v19 + 48;
        if (v11 != v14)
        {
          do
          {
            v20 = *(v11 - 3);
            v21 = *(v11 - 1);
            *((_OWORD *)v19 - 2) = *(v11 - 2);
            *((_OWORD *)v19 - 1) = v21;
            *((_OWORD *)v19 - 3) = v20;
            v19 -= 48;
            v11 -= 3;
          }
          while (v11 != v14);
          v11 = (_OWORD *)a1[70];
        }
        a1[70] = v19;
        a1[71] = v13;
        a1[72] = &v18[48 * v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v25;
        v11[1] = v26;
        *((_QWORD *)v11 + 4) = v27;
        *((_DWORD *)v11 + 10) = 0;
        v13 = v11 + 3;
      }
      a1[71] = v13;
      *(_DWORD *)(v10 + 40) = -1431655765 * (((unint64_t)v13 - a1[70]) >> 4) - 1;
    }
  }
  else
  {
    v23 = *(_QWORD *)a2;
    v22 = *((_QWORD *)a2 + 1);
    v24 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
    *(_QWORD *)&v30 = v23;
    *((_QWORD *)&v30 + 1) = v22;
    LODWORD(v31) = 0;
    sub_1C630DBC4(v24, (uint64_t)&v30);
  }
}

uint64_t llvm::sampleprof::SampleProfileWriterCompactBinary::writeNameTable(llvm::sampleprof::SampleProfileWriterCompactBinary *this)
{
  llvm::raw_ostream *v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 *v5;
  int v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  char *v12;
  BOOL v13;
  __int128 *v14;
  int *v15;
  size_t v16;
  unint64_t v17;
  char v18;
  char *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v24;
  _QWORD *v25[2];
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  v25[0] = 0;
  v25[1] = 0;
  v24 = (__int128 *)v25;
  v3 = (_OWORD *)*((_QWORD *)this + 7);
  v4 = (_OWORD *)*((_QWORD *)this + 8);
  if (v3 != v4)
  {
    do
    {
      sub_1C62B22C4((uint64_t)&v24, (uint64_t)v3, v3);
      v3 = (_OWORD *)((char *)v3 + 24);
    }
    while (v3 != v4);
    v5 = v24;
    if (v24 != (__int128 *)v25)
    {
      v6 = 0;
      do
      {
        *(_DWORD *)sub_1C5AB2FB8((_QWORD *)this + 4, v5 + 2) = v6;
        v7 = (__int128 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(__int128 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (__int128 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        ++v6;
        v5 = v8;
      }
      while (v8 != (__int128 *)v25);
    }
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  do
  {
    v11 = v10 & 0x7F | ((v10 > 0x7F) << 7);
    v12 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, v11);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v12 + 1;
      *v12 = v11;
    }
    v13 = v10 > 0x7F;
    v10 >>= 7;
  }
  while (v13);
  v14 = v24;
  if (v24 != (__int128 *)v25)
  {
    do
    {
      v15 = (int *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 5);
      v27 = xmmword_1C85F4BB0;
      v28 = 0;
      llvm::MD5::update((int *)&v27, v15, v16);
      llvm::MD5::final((int *)&v27, (int *)&v26);
      v17 = v26;
      do
      {
        v18 = v17 & 0x7F | ((v17 > 0x7F) << 7);
        v19 = (char *)*((_QWORD *)v2 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)v2 + 3))
        {
          llvm::raw_ostream::write(v2, v18);
        }
        else
        {
          *((_QWORD *)v2 + 4) = v19 + 1;
          *v19 = v18;
        }
        v13 = v17 > 0x7F;
        v17 >>= 7;
      }
      while (v13);
      v20 = (__int128 *)*((_QWORD *)v14 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(__int128 **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (__int128 *)*((_QWORD *)v14 + 2);
          v9 = *(_QWORD *)v21 == (_QWORD)v14;
          v14 = v21;
        }
        while (!v9);
      }
      v14 = v21;
    }
    while (v21 != (__int128 *)v25);
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  sub_1C47655E8((uint64_t)&v24, v25[0]);
  return 0;
}

uint64_t llvm::sampleprof::SampleProfileWriterBinary::writeMagicIdent(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream *v2;
  unint64_t v3;
  char v4;
  char *v5;
  BOOL v6;
  _BYTE *v7;

  v2 = *(llvm::raw_ostream **)(a1 + 8);
  v3 = a2 | 0x5350524F46343200;
  do
  {
    v4 = v3 & 0x7F | ((v3 > 0x7F) << 7);
    v5 = (char *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v2 + 3))
    {
      v2 = llvm::raw_ostream::write(v2, v4);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v5 + 1;
      *v5 = v4;
    }
    v6 = v3 > 0x7F;
    v3 >>= 7;
  }
  while (v6);
  v7 = (_BYTE *)*((_QWORD *)v2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v2 + 3))
  {
    llvm::raw_ostream::write(v2, 103);
  }
  else
  {
    *((_QWORD *)v2 + 4) = v7 + 1;
    *v7 = 103;
  }
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 0;
}

unint64_t llvm::sampleprof::SampleProfileWriterBinary::writeHeader(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *i;

  (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)a1 + 96))(a1, a1[6]);
  llvm::sampleprof::SampleProfileWriter::computeSummary((uint64_t)a1, a2);
  v4 = llvm::sampleprof::SampleProfileWriterBinary::writeSummary((llvm::sampleprof::SampleProfileWriterBinary *)a1);
  if ((_DWORD)v4)
  {
    v5 = v4 & 0xFFFFFFFF00000000;
  }
  else
  {
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    {
      (*(void (**)(unsigned int *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, i + 2);
      llvm::sampleprof::SampleProfileWriterBinary::addNames((llvm::sampleprof::SampleProfileWriterBinary *)a1, (const llvm::sampleprof::FunctionSamples *)(i + 7));
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 104))(a1);
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    v5 = 0;
    LODWORD(v4) = 0;
  }
  return v4 | v5;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::setToCompressAllSections(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(this + 96);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (_QWORD *)(*(_QWORD *)(this + 88) + 8);
    do
    {
      *v3 |= 1uLL;
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return this;
}

llvm::raw_ostream *llvm::sampleprof::SampleProfileWriterExtBinaryBase::allocSecHdrTable(llvm::sampleprof::SampleProfileWriterExtBinaryBase *this)
{
  llvm::raw_ostream *v2;
  _QWORD *v3;
  llvm::raw_ostream *result;
  unsigned int v5;
  char v6[8];

  v2 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  *(_QWORD *)v6 = *((unsigned int *)this + 24);
  llvm::raw_ostream::write(v2, v6, 8uLL);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD *))(*v3 + 80))(v3);
  *((_QWORD *)this + 56) = (char *)result + v3[4] - v3[2];
  if (*((_DWORD *)this + 24))
  {
    v5 = 0;
    do
    {
      *(_QWORD *)v6 = -1;
      llvm::raw_ostream::write(v2, v6, 8uLL);
      *(_QWORD *)v6 = -1;
      llvm::raw_ostream::write(v2, v6, 8uLL);
      *(_QWORD *)v6 = -1;
      llvm::raw_ostream::write(v2, v6, 8uLL);
      *(_QWORD *)v6 = -1;
      result = llvm::raw_ostream::write(v2, v6, 8uLL);
      ++v5;
    }
    while (*((_DWORD *)this + 24) > v5);
  }
  return result;
}

uint64_t llvm::sampleprof::SampleProfileWriterExtBinaryBase::writeHeader(llvm::sampleprof::SampleProfileWriterExtBinaryBase *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 55) = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2) + v2[4] - v2[2];
  (*(void (**)(llvm::sampleprof::SampleProfileWriterExtBinaryBase *, _QWORD))(*(_QWORD *)a1 + 96))(a1, *((unsigned int *)a1 + 6));
  llvm::sampleprof::SampleProfileWriterExtBinaryBase::allocSecHdrTable(a1);
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 0;
}

unint64_t llvm::sampleprof::SampleProfileWriterCompactBinary::writeHeader(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char v9[8];

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = llvm::sampleprof::SampleProfileWriterBinary::writeHeader((unsigned int *)a1, a2);
  if ((_DWORD)v4)
  {
    v5 = v4 & 0xFFFFFFFF00000000;
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)(a1 + 128) = (*(uint64_t (**)(_QWORD *))(*v6 + 80))(v6) + v6[4] - v6[2];
    *(_QWORD *)v9 = -2;
    llvm::raw_ostream::write(v3, v9, 8uLL);
    if (!atomic_load(qword_1EF8F7270))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
    LODWORD(v4) = 0;
    v5 = 0;
  }
  return v5 | v4;
}

unint64_t llvm::sampleprof::SampleProfileWriterBinary::writeSample(llvm::sampleprof::SampleProfileWriterBinary *this, const llvm::sampleprof::FunctionSamples *a2)
{
  unint64_t v4;
  llvm::raw_ostream *v5;
  char v6;
  char *v7;
  BOOL v8;

  v4 = *((_QWORD *)a2 + 8);
  v5 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  do
  {
    v6 = v4 & 0x7F | ((v4 > 0x7F) << 7);
    v7 = (char *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v5 + 3))
    {
      v5 = llvm::raw_ostream::write(v5, v6);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v7 + 1;
      *v7 = v6;
    }
    v8 = v4 > 0x7F;
    v4 >>= 7;
  }
  while (v8);
  return llvm::sampleprof::SampleProfileWriterBinary::writeBody(this, a2);
}

unint64_t llvm::sampleprof::SampleProfileWriterCompactBinary::writeSample(llvm::sampleprof::SampleProfileWriterCompactBinary *this, const llvm::sampleprof::FunctionSamples *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  llvm::raw_ostream *v25;
  char v26;
  char *v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  const void *v33[2];
  int v34;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
  v6 = v4[4];
  v7 = v4[2];
  v9 = (const void *)*((_QWORD *)a2 + 2);
  v8 = (const void *)*((_QWORD *)a2 + 3);
  v33[0] = v9;
  v33[1] = v8;
  v34 = 0;
  sub_1C62B2444((uint64_t)this + 80, v33, &v34, (uint64_t)&v31);
  v10 = v31;
  if (v32)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 14);
    v11 = *((_QWORD *)this + 15);
    if ((unint64_t)v12 >= v11)
    {
      v30 = v7;
      v16 = (_QWORD *)*((_QWORD *)this + 13);
      v17 = 0xAAAAAAAAAAAAAAABLL * (v12 - v16) + 1;
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v16) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * (v12 - v16)];
      v22 = &v20[24 * v19];
      *(_QWORD *)v21 = v9;
      *((_QWORD *)v21 + 1) = v8;
      *((_QWORD *)v21 + 2) = 0;
      v13 = v21 + 24;
      if (v12 == v16)
      {
        v7 = v30;
      }
      else
      {
        v7 = v30;
        do
        {
          v23 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v21 - 1) = *(v12 - 1);
          *(_OWORD *)(v21 - 24) = v23;
          v21 -= 24;
          v12 -= 3;
        }
        while (v12 != v16);
        v12 = (_QWORD *)*((_QWORD *)this + 13);
      }
      *((_QWORD *)this + 13) = v21;
      *((_QWORD *)this + 14) = v13;
      *((_QWORD *)this + 15) = v22;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = v9;
      v12[1] = v8;
      v13 = v12 + 3;
      v12[2] = 0;
    }
    *((_QWORD *)this + 14) = v13;
    v15 = *((_QWORD *)this + 13);
    v14 = -1431655765 * (((unint64_t)v13 - v15) >> 3) - 1;
    *(_DWORD *)(v10 + 16) = v14;
  }
  else
  {
    v14 = *(_DWORD *)(v31 + 16);
    v15 = *((_QWORD *)this + 13);
  }
  *(_QWORD *)(v15 + 24 * v14 + 16) = v5 + v6 - v7;
  v24 = *((_QWORD *)a2 + 8);
  v25 = (llvm::raw_ostream *)*((_QWORD *)this + 1);
  do
  {
    v26 = v24 & 0x7F | ((v24 > 0x7F) << 7);
    v27 = (char *)*((_QWORD *)v25 + 4);
    if ((unint64_t)v27 >= *((_QWORD *)v25 + 3))
    {
      v25 = llvm::raw_ostream::write(v25, v26);
    }
    else
    {
      *((_QWORD *)v25 + 4) = v27 + 1;
      *v27 = v26;
    }
    v28 = v24 > 0x7F;
    v24 >>= 7;
  }
  while (v28);
  return llvm::sampleprof::SampleProfileWriterBinary::writeBody(this, a2);
}

uint64_t llvm::sampleprof::SampleProfileWriter::create@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;

  LODWORD(v14) = 0;
  *((_QWORD *)&v14 + 1) = std::system_category();
  if (a3 == 2 || a3 == 255 || a3 == 4)
  {
    v8 = operator new();
    v9 = a1;
    v10 = a2;
    v11 = 0;
  }
  else
  {
    v8 = operator new();
    v9 = a1;
    v10 = a2;
    v11 = 3;
  }
  result = llvm::raw_fd_ostream::raw_fd_ostream(v8, v9, v10, (uint64_t)&v14, v11);
  v13 = result;
  if ((_DWORD)v14)
  {
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_OWORD *)a4 = v14;
  }
  else
  {
    llvm::sampleprof::SampleProfileWriter::create(&v13, a3, a4);
    result = v13;
    if (!v13)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

void llvm::sampleprof::SampleProfileWriter::create(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;

  std::system_category();
  if (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat | llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    v6 = 7;
    switch(a2)
    {
      case 1:
LABEL_5:
        v7 = operator new();
        v9 = *a1;
        *a1 = 0;
        *(_QWORD *)(v7 + 8) = v9;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = &off_1E81936E8;
        *(_QWORD *)(v7 + 24) = 0;
        goto LABEL_15;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_17;
      case 4:
LABEL_12:
        v7 = operator new();
        v13 = *a1;
        *a1 = 0;
        *(_QWORD *)(v7 + 8) = v13;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)v7 = off_1E81937E0;
        *(_QWORD *)(v7 + 88) = v7 + 104;
        *(_DWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 96) = 0x800000000;
        if ((_DWORD)qword_1ED81B410)
          sub_1C5AB323C(v7 + 88, (uint64_t)&qword_1ED81B408);
        *(_QWORD *)(v7 + 424) = 0;
        *(_QWORD *)(v7 + 432) = 0;
        *(_OWORD *)(v7 + 456) = 0u;
        *(_OWORD *)(v7 + 472) = 0u;
        *(_OWORD *)(v7 + 484) = 0u;
        *(_QWORD *)(v7 + 504) = 0;
        *(_OWORD *)(v7 + 512) = 0u;
        *(_BYTE *)(v7 + 528) = 0;
        *(_DWORD *)(v7 + 552) = 0;
        *(_OWORD *)(v7 + 536) = 0u;
        *(_OWORD *)(v7 + 560) = 0u;
        *(_OWORD *)(v7 + 576) = 0u;
        *(_QWORD *)v7 = &off_1E8193890;
        goto LABEL_15;
      default:
        if (a2 == 255)
        {
LABEL_9:
          *(_BYTE *)(a3 + 16) |= 1u;
          if (!atomic_load(qword_1EF8F7270))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
          v12 = qword_1EF8F7270[0];
          *(_QWORD *)a3 = 7;
          *(_QWORD *)(a3 + 8) = v12;
        }
        else
        {
LABEL_16:
          v6 = 6;
LABEL_17:
          if (!atomic_load(qword_1EF8F7270))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
          v15 = qword_1EF8F7270[0];
          *(_BYTE *)(a3 + 16) |= 1u;
          *(_QWORD *)a3 = v6;
          *(_QWORD *)(a3 + 8) = v15;
        }
        break;
    }
  }
  else
  {
    v6 = 7;
    switch(a2)
    {
      case 1:
        goto LABEL_5;
      case 2:
        v7 = operator new();
        v8 = *a1;
        *a1 = 0;
        *(_QWORD *)(v7 + 8) = v8;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)v7 = &off_1E8193940;
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 88) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_DWORD *)(v7 + 96) = 0;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 120) = 0;
        *(_QWORD *)(v7 + 104) = 0;
        break;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_12;
      default:
        if (a2 != 255)
          goto LABEL_16;
        v7 = operator new();
        v10 = *a1;
        *a1 = 0;
        *(_QWORD *)(v7 + 8) = v10;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)v7 = &off_1E81939D0;
        break;
    }
LABEL_15:
    *(_DWORD *)(v7 + 24) = a2;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
  }
}

_QWORD *sub_1C5AB2860(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E8193680;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1C4E5DDC4((uint64_t)v2, v3);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1C5AB28B4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E8193680;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1C4E5DDC4((uint64_t)v2, v3);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AB2918()
{
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 0;
}

_QWORD *sub_1C5AB2960(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C5AB29C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AB2A40(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C5AB2A50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 584) = a2;
  return result;
}

uint64_t sub_1C5AB2A58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *(_BYTE *)(result + 528) = 1;
  v1 = *(unsigned int *)(result + 96);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(result + 88);
    v3 = 40 * v1;
    v4 = (_QWORD *)(v2 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) == 2)
        *v4 |= 0x100000000uLL;
      v4 += 5;
      v3 -= 40;
    }
    while (v3);
    v5 = 40 * v1;
    v6 = (_QWORD *)(v2 + 8);
    do
    {
      if (*((_DWORD *)v6 - 2) == 2)
        *v6 |= 0x200000000uLL;
      v6 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C5AB2AD0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 96);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (_QWORD *)(*(_QWORD *)(result + 88) + 8);
    do
    {
      if (*((_DWORD *)v3 - 2) == 1)
        *v3 |= 0x100000000uLL;
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C5AB2B10(_DWORD *a1, unsigned int a2)
{
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  a1[20] = a2;
  return sub_1C5AB323C((uint64_t)(a1 + 22), (uint64_t)&qword_1ED81B408[42 * a2]);
}

void sub_1C5AB2B58(_QWORD *a1)
{
  sub_1C5AB3318(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AB2B7C()
{
  if (!atomic_load(qword_1EF8F7270))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7270, (void *(*)(void))sub_1C5AA3244, (void (*)(void *))sub_1C5AA3278);
  return 0;
}

_QWORD *sub_1C5AB2BC8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E8193940;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[10], 8);
  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1C5AB2C5C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E8193940;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[10], 8);
  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5AB2D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;

  v7 = sub_1C62A350C(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_1C62A37D8((uint64_t)(v13 + 2), a2))
              return;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = (char *)operator new(0xB0uLL);
  v16 = v15;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v17;
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v15 + 88) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a3 + 88);
  v18 = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a3 + 40);
  v19 = (_QWORD *)(a3 + 120);
  v20 = *(_QWORD *)(a3 + 120);
  v21 = *(_QWORD *)(a3 + 112);
  *((_QWORD *)v15 + 15) = v18;
  *((_QWORD *)v15 + 16) = v21;
  *((_QWORD *)v15 + 17) = v20;
  v22 = v15 + 136;
  v23 = *(_QWORD *)(a3 + 128);
  *((_QWORD *)v15 + 18) = v23;
  if (v23)
  {
    *(_QWORD *)(v20 + 16) = v22;
    *(_QWORD *)(a3 + 112) = v19;
    *v19 = 0;
    *(_QWORD *)(a3 + 128) = 0;
  }
  else
  {
    *((_QWORD *)v15 + 16) = v22;
  }
  v24 = (_QWORD *)(a3 + 144);
  v25 = *(_QWORD *)(a3 + 144);
  v26 = *(_QWORD *)(a3 + 136);
  *((_QWORD *)v15 + 20) = v25;
  v27 = v15 + 160;
  *((_QWORD *)v15 + 19) = v26;
  v28 = *(_QWORD *)(a3 + 152);
  *((_QWORD *)v15 + 21) = v28;
  if (v28)
  {
    *(_QWORD *)(v25 + 16) = v27;
    *(_QWORD *)(a3 + 136) = v24;
    *v24 = 0;
    *(_QWORD *)(a3 + 152) = 0;
  }
  else
  {
    *((_QWORD *)v15 + 19) = v27;
  }
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v9 || (float)(v30 * (float)v9) < v29)
  {
    v31 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v32 = v31 | (2 * v9);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      v34 = v33;
    else
      v34 = v32;
    sub_1C542C2D4(a1, v34);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD *)a1;
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v36)
  {
    *(_QWORD *)v16 = *v36;
LABEL_46:
    *v36 = v16;
    goto LABEL_47;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v35 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v16)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_46;
  }
LABEL_47:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_1C5AB2FB8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21[4];

  v20 = *a2;
  v21[0] = 0;
  sub_1C62B2444((uint64_t)a1, (const void **)&v20, v21, (uint64_t)&v18);
  v4 = v18;
  if (v19)
  {
    v6 = (char *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v10 = (char *)a1[3];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3) + 1;
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v14 = (char *)operator new(24 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * ((v6 - v10) >> 3)];
      *(_OWORD *)v15 = *a2;
      *((_DWORD *)v15 + 4) = 0;
      v7 = v15 + 24;
      if (v6 != v10)
      {
        do
        {
          v16 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v15 - 24) = v16;
          v15 -= 24;
          v6 -= 24;
        }
        while (v6 != v10);
        v6 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = v7;
      a1[5] = &v14[24 * v13];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_OWORD *)v6 = *a2;
      *((_DWORD *)v6 + 4) = 0;
      v7 = v6 + 24;
    }
    a1[4] = v7;
    v9 = a1[3];
    v8 = -1431655765 * (((unint64_t)v7 - v9) >> 3) - 1;
    *(_DWORD *)(v4 + 16) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v18 + 16);
    v9 = a1[3];
  }
  return v9 + 24 * v8 + 16;
}

_QWORD *sub_1C5AB315C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C5AB31C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AB323C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 40 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 40 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 40);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 40 * v5), (const void *)(*(_QWORD *)a2 + 40 * v5), *(_QWORD *)a2 + 40 * v6 - (*(_QWORD *)a2 + 40 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_QWORD *sub_1C5AB3318(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = off_1E81937E0;
  v2 = (uint64_t)(a1 + 67);
  v3 = (void *)a1[70];
  if (v3)
  {
    a1[71] = v3;
    operator delete(v3);
  }
  sub_1C630D32C(v2);
  MEMORY[0x1CAA32FB4](a1[67], 8);
  v4 = (void *)a1[63];
  if (v4)
  {
    a1[64] = v4;
    operator delete(v4);
  }
  sub_1C630D32C((uint64_t)(a1 + 60));
  MEMORY[0x1CAA32FB4](a1[60], 8);
  v5 = (void *)a1[57];
  if (v5)
  {
    a1[58] = v5;
    operator delete(v5);
  }
  v6 = a1[54];
  a1[54] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)a1[11];
  if (v7 != a1 + 13)
    free(v7);
  *a1 = &off_1E8193750;
  sub_1C6176BF8(a1 + 4);
  *a1 = off_1E8193680;
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v8);
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t sub_1C5AB341C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];
  _OWORD v15[2];
  uint64_t v16;

  if (a2)
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v5 = 1;
    v14[0] = "@";
    v14[1] = 1;
    memset(&v14[2], 0, 24);
    v9 = a2 - 1;
    v10 = (a2 - 1) & sub_1C62A350C(a3);
    v11 = a1 + 48 * v10;
    if (!sub_1C62A37D8(a3, v11))
    {
      v12 = 0;
      v13 = 1;
      while (!sub_1C62A37D8(v11, (uint64_t)v15))
      {
        if (sub_1C62A37D8(v11, (uint64_t)v14) && v12 == 0)
          v12 = v11;
        v10 = (v10 + v13) & v9;
        v11 = a1 + 48 * v10;
        v5 = 1;
        ++v13;
        if (sub_1C62A37D8(a3, v11))
          goto LABEL_5;
      }
      v5 = 0;
      if (v12)
        v11 = v12;
    }
LABEL_5:
    *a4 = v11;
  }
  else
  {
    v5 = 0;
    *a4 = 0;
  }
  return v5;
}

uint64_t sub_1C5AB3544(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  *(_QWORD *)&v16[0] = 0;
  result = sub_1C5AB341C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, (uint64_t *)v16);
  v9 = *(_QWORD *)&v16[0];
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_3;
  }
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_10;
  }
  if (v13 + ~v12 - *(_DWORD *)(a2 + 12) <= v13 >> 3)
  {
LABEL_10:
    sub_1C5AB3670(a2, v13);
    *(_QWORD *)&v16[0] = 0;
    sub_1C5AB341C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, (uint64_t *)v16);
    v9 = *(_QWORD *)&v16[0];
  }
  ++*(_DWORD *)(a2 + 8);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  result = sub_1C62A37D8(v9, (uint64_t)v16);
  if ((result & 1) == 0)
    --*(_DWORD *)(a2 + 12);
  v14 = *(_OWORD *)a3;
  v15 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)v9 = v14;
  *(_OWORD *)(v9 + 16) = v15;
  *(_DWORD *)(v9 + 40) = *a4;
  v10 = 1;
LABEL_3:
  v11 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C5AB3670(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        result[4] = 0;
        *(_OWORD *)result = 0uLL;
        *((_OWORD *)result + 1) = 0uLL;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    v19[0] = "@";
    v19[1] = 1;
    memset(&v19[2], 0, 24);
    if ((_DWORD)v3)
    {
      v12 = 48 * v3;
      v13 = v4;
      do
      {
        if (!sub_1C62A37D8(v13, (uint64_t)v20) && !sub_1C62A37D8(v13, (uint64_t)v19))
        {
          v22 = 0;
          sub_1C5AB341C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v22);
          v14 = v22;
          v15 = *(_OWORD *)v13;
          v16 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(v22 + 32) = *(_QWORD *)(v13 + 32);
          *(_OWORD *)v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
          *(_DWORD *)(v14 + 40) = *(_DWORD *)(v13 + 40);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 48 * v17;
    do
    {
      result[4] = 0;
      *(_OWORD *)result = 0uLL;
      *((_OWORD *)result + 1) = 0uLL;
      result += 6;
      v18 -= 48;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C5AB3800()
{
  memcpy(&unk_1ED81B418, &unk_1C8668178, 0x118uLL);
  qword_1ED81B408[0] = (uint64_t)&unk_1ED81B418;
  qword_1ED81B410 = 0x800000007;
  memcpy(&unk_1ED81B568, &unk_1C8668290, 0x140uLL);
  qword_1ED81B558 = (uint64_t)&unk_1ED81B568;
  qword_1ED81B560 = 0x800000008;
  return __cxa_atexit((void (*)(void *))sub_1C5AAD808, qword_1ED81B408, &dword_1C475E000);
}

char *llvm::memprof::RawMemProfReader::create@<X0>(const char ***a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void **v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const std::error_category *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD v36[4];
  void **v37;
  _QWORD v38[2];
  char v39;
  __int128 v40;
  char v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  llvm::MemoryBuffer::getFileOrSTDIN(a1, 0, 1, (uint64_t)v38);
  v8 = v39;
  if ((v39 & 1) != 0)
  {
    v9 = (_QWORD *)v38[0];
    if (LODWORD(v38[0]))
    {
      v10 = v38[1];
      v11 = (_QWORD *)operator new();
      *v11 = &off_1E81A0D28;
      v11[1] = v9;
      v11[2] = v10;
      v36[3] = v11;
      __asm { BR              X10 }
    }
  }
  else
  {
    std::system_category();
    v9 = (_QWORD *)v38[0];
  }
  v38[0] = 0;
  v13 = (char *)v9[1];
  v12 = (char *)v9[2];
  v14 = v12 - v13;
  if ((unint64_t)(v12 - v13) < 8 || *(_QWORD *)v13 != 0xFF6D70726F667281)
  {
    v15 = operator new();
    v16 = v15;
    v42 = 257;
    *(_QWORD *)v15 = off_1E8192D50;
    v17 = 3;
    goto LABEL_11;
  }
  if (v12 == v13)
  {
    v15 = operator new();
    v16 = v15;
    v42 = 257;
    *(_QWORD *)v15 = off_1E8192D50;
    v17 = 21;
    goto LABEL_11;
  }
  if (v14 < 0x30)
  {
    v15 = operator new();
    v16 = v15;
    v42 = 257;
    *(_QWORD *)v15 = off_1E8192D50;
    v17 = 8;
    goto LABEL_11;
  }
  if (v13 >= v12)
    goto LABEL_41;
  v19 = 0;
  do
  {
    if (*((_QWORD *)v13 + 1) != 1)
    {
      v15 = operator new();
      v16 = v15;
      v42 = 257;
      *(_QWORD *)v15 = off_1E8192D50;
      v17 = 5;
LABEL_11:
      *(_DWORD *)(v15 + 8) = v17;
      llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v15 + 16));
      v36[1] = v16;
      __asm { BR              X10 }
    }
    v20 = *((_QWORD *)v13 + 2);
    v19 += v20;
    v13 += v20;
  }
  while (v13 < v12);
  if (v14 != v19)
  {
LABEL_41:
    v15 = operator new();
    v16 = v15;
    v42 = 257;
    *(_QWORD *)v15 = off_1E8192D50;
    v17 = 9;
    goto LABEL_11;
  }
  if (a3)
  {
    llvm::object::createBinary(a2, a3, (uint64_t)&v40);
    if ((v41 & 1) != 0)
    {
      v33 = (char *)v40;
      sub_1C5AB3EF8(&v34, &v33, (uint64_t)a2, a3);
      *(_BYTE *)(a4 + 8) |= 1u;
      result = v33;
      *(_QWORD *)a4 = v34;
      v34 = 0;
      if (!result)
        goto LABEL_13;
    }
    else
    {
      v21 = operator new();
      *(_QWORD *)v21 = v9;
      v22 = v40;
      v40 = 0u;
      *(_OWORD *)(v21 + 8) = v22;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = v21 + 48;
      *(_QWORD *)(v21 + 40) = 0x1000000000;
      *(_OWORD *)(v21 + 944) = 0u;
      *(_DWORD *)(v21 + 960) = 0;
      *(_OWORD *)(v21 + 968) = 0u;
      *(_OWORD *)(v21 + 984) = 0u;
      *(_OWORD *)(v21 + 996) = 0u;
      *(_DWORD *)(v21 + 1032) = 0;
      *(_OWORD *)(v21 + 1016) = 0u;
      *(_DWORD *)(v21 + 1056) = 0;
      *(_OWORD *)(v21 + 1040) = 0u;
      *(_DWORD *)(v21 + 1080) = 0;
      *(_OWORD *)(v21 + 1064) = 0u;
      *(_OWORD *)(v21 + 1104) = 0u;
      *(_OWORD *)(v21 + 1088) = 0u;
      llvm::memprof::RawMemProfReader::initialize((llvm::memprof::RawMemProfReader *)v21, (uint64_t *)&v37);
      v23 = v37;
      if (v37)
      {
        *(_BYTE *)(a4 + 8) |= 1u;
        *(_QWORD *)a4 = v23;
        v37 = (void **)(v21 + 1088);
        sub_1C5A9C550(&v37);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 1064), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 1040), 8);
        sub_1C5AB8D70((uint64_t *)(v21 + 1016));
        sub_1C5AB8D70((uint64_t *)(v21 + 992));
        v24 = *(void **)(v21 + 968);
        if (v24)
        {
          *(_QWORD *)(v21 + 976) = v24;
          operator delete(v24);
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v21 + 944), 8);
        v25 = *(void **)(v21 + 32);
        if (v25 != (void *)(v21 + 48))
          free(v25);
        v26 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        v27 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v21 + 16) = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = *(_QWORD *)(v21 + 8);
        *(_QWORD *)(v21 + 8) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        MEMORY[0x1CAA32FC0](v21, 0x10A0C401E28D1E3);
      }
      else
      {
        *(_BYTE *)(a4 + 8) &= ~1u;
        *(_QWORD *)a4 = v21;
      }
      v9 = 0;
      result = (char *)*((_QWORD *)&v40 + 1);
      if (!*((_QWORD *)&v40 + 1))
      {
LABEL_13:
        if (v9)
          goto LABEL_14;
        goto LABEL_15;
      }
    }
    result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    goto LABEL_13;
  }
  v30 = std::generic_category();
  v31 = operator new();
  *(_QWORD *)v31 = &off_1E81A0D28;
  *(_QWORD *)(v31 + 8) = 22;
  *(_QWORD *)(v31 + 16) = v30;
  v35 = (char *)v31;
  sub_1C5AB3EF8(v36, &v35, (uint64_t)"Path to profiled binary is empty!", 33);
  *(_BYTE *)(a4 + 8) |= 1u;
  v32 = v35;
  *(_QWORD *)a4 = v36[0];
  v36[0] = 0;
  if (v32)
    (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
LABEL_14:
  result = (char *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  v8 = v39;
LABEL_15:
  if ((v8 & 1) == 0)
  {
    result = (char *)v38[0];
    if (v38[0])
      return (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v38[0] + 8))(v38[0]);
  }
  return result;
}

char *sub_1C5AB3EF8(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void **v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[4];
  __int16 v14;
  char *v15;
  void *__p[2];
  char v17;
  void **v18;
  uint64_t v19[2];

  if (!atomic_load(qword_1ED836B58))
  {
    v10 = a4;
    v11 = a3;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    a4 = v10;
    a3 = v11;
  }
  v7 = qword_1ED836B58[0];
  v14 = 261;
  v13[0] = a3;
  v13[1] = a4;
  llvm::Twine::str((llvm::Twine *)v13, __p);
  if (v17 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v19[0] = 3;
  v19[1] = v7;
  v18 = v8;
  sub_1C5DF1730((_BYTE **)&v18, v19, &v15);
  if (v17 < 0)
    operator delete(__p[0]);
  v12 = *a2;
  *a2 = 0;
  sub_1C624E8DC(&v15, &v12, a1);
  if (v12)
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  result = v15;
  if (v15)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

void llvm::memprof::RawMemProfReader::initialize(llvm::memprof::RawMemProfReader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  const char *v12;
  void (**v13)(void);
  llvm::Triple *ArchName;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  void (**v20)(void);
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  void *__p;
  char v28;
  char *v29;
  void *v30[2];
  char v31;
  int v32;
  __int16 v33;
  char *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  const char *v39;
  char v40;
  llvm::Triple *v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v4 + 32);
  v5 = *(_QWORD *)(v4 + 40);
  if (v4)
    v7 = (*(_DWORD *)(v4 + 8) & 0xFFFFFFFC) == 12;
  else
    v7 = 0;
  if (!v7)
  {
    v30[0] = "Not an ELF file: ";
    v33 = 259;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v9 = qword_1ED836B58[0];
    v10 = operator new();
    *(_QWORD *)v10 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v30, (_QWORD *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = v9;
    *(_BYTE *)(v10 + 48) = 1;
    v34 = (char *)v10;
    sub_1C5AB3EF8(a2, &v34, v6, v5);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
    return;
  }
  llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v4, (llvm::Triple *)v30);
  if ((v32 - 41) < 2)
  {
    v11 = (_DWORD *)*((_QWORD *)this + 1);
    v28 = 0;
    LOBYTE(__p) = 0;
    v37[0] = &unk_1E8169658;
    v37[1] = llvm::WithColor::defaultErrorHandler;
    v38 = v37;
    v35[0] = &unk_1E8169658;
    v35[1] = llvm::WithColor::defaultWarningHandler;
    v36 = v35;
    llvm::DWARFContext::create(v11, 0, 0, (uint64_t)&__p, v37, v35, (uint64_t *)&v39);
    v12 = v39;
    v39 = 0;
    if (v36 == v35)
    {
      v13 = (void (**)(void))(v35[0] + 32);
    }
    else
    {
      if (!v36)
        goto LABEL_19;
      v13 = (void (**)(void))(*v36 + 40);
    }
    (*v13)();
LABEL_19:
    if (v38 == v37)
    {
      v20 = (void (**)(void))(v37[0] + 32);
    }
    else
    {
      if (!v38)
        goto LABEL_24;
      v20 = (void (**)(void))(*v38 + 40);
    }
    (*v20)();
LABEL_24:
    if (v28 < 0)
      operator delete(__p);
    v26 = v12;
    sub_1C61183AC(v11, (uint64_t *)&v26, 0, (uint64_t)&v39);
    v21 = (uint64_t)v26;
    v26 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if ((v40 & 1) != 0)
    {
      v24 = (char *)v39;
      v39 = 0;
      v25 = v24;
      sub_1C5AB3EF8(a2, &v25, v6, v5);
      if (v25)
        (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
    }
    else
    {
      v22 = v39;
      v39 = 0;
      v23 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v22;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      llvm::memprof::RawMemProfReader::readRawProfile(this, a2);
      if (!*a2)
      {
        llvm::memprof::RawMemProfReader::symbolizeAndFilterStackFrames(this, a2);
        if (!*a2)
          llvm::memprof::RawMemProfReader::mapRawProfileToRecords(this, a2);
      }
    }
    v19 = v39;
    v39 = 0;
    if (!v19)
      goto LABEL_38;
    goto LABEL_37;
  }
  ArchName = llvm::Triple::getArchName((llvm::Triple *)v30);
  v39 = "Unsupported target: ";
  v41 = ArchName;
  v42 = v15;
  v43 = 1283;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v17 = qword_1ED836B58[0];
  v18 = operator new();
  *(_QWORD *)v18 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v39, (_QWORD *)(v18 + 8));
  *(_QWORD *)(v18 + 32) = 3;
  *(_QWORD *)(v18 + 40) = v17;
  *(_BYTE *)(v18 + 48) = 1;
  v29 = (char *)v18;
  sub_1C5AB3EF8(a2, &v29, v6, v5);
  v19 = v29;
  if (!v29)
    goto LABEL_38;
LABEL_37:
  (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
LABEL_38:
  if (v31 < 0)
    operator delete(v30[0]);
}

BOOL llvm::memprof::RawMemProfReader::hasFormat(const char **a1, const char **a2)
{
  _BOOL8 v2;
  _QWORD *v3;
  const char **v5[4];
  __int16 v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 261;
  v5[0] = a1;
  v5[1] = a2;
  llvm::MemoryBuffer::getFileOrSTDIN(v5, 0, 1, (uint64_t)&v7);
  v2 = 0;
  if ((v8 & 1) == 0)
  {
    v3 = (_QWORD *)v7[1];
    v2 = v7[2] - (_QWORD)v3 >= 8uLL && *v3 == 0xFF6D70726F667281;
    (*(void (**)(void))(*v7 + 8))();
  }
  return v2;
}

BOOL llvm::memprof::RawMemProfReader::hasFormat(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(a1 + 16) - (_QWORD)v1 >= 8uLL && *v1 == 0xFF6D70726F667281;
}

char **llvm::memprof::RawMemProfReader::printYAML(llvm::memprof::RawMemProfReader *this, llvm::raw_ostream *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _OWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  _WORD *v22;
  _BYTE *v23;
  _QWORD *v24;
  llvm::raw_ostream *v25;
  _OWORD *v26;
  _WORD *v27;
  _BYTE *v28;
  _QWORD *v29;
  llvm::raw_ostream *v30;
  void *v31;
  _WORD *v32;
  _BYTE *v33;
  _QWORD *v34;
  llvm::raw_ostream *v35;
  void *v36;
  _WORD *v37;
  _BYTE *v38;
  _QWORD *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  _WORD *v42;
  _BYTE *v43;
  _QWORD *v44;
  llvm::raw_ostream *v45;
  _DWORD *v46;
  _WORD *v47;
  _BYTE *v48;
  _QWORD *v49;
  llvm::raw_ostream *v50;
  _DWORD *v51;
  _WORD *v52;
  _BYTE *v53;
  _QWORD *v54;
  llvm::raw_ostream *v55;
  void *v56;
  _WORD *v57;
  _BYTE *v58;
  _QWORD *v59;
  llvm::raw_ostream *v60;
  _OWORD *v61;
  _WORD *v62;
  _BYTE *v63;
  _QWORD *v64;
  llvm::raw_ostream *v65;
  void *v66;
  _WORD *v67;
  _BYTE *v68;
  _QWORD *v69;
  llvm::raw_ostream *v70;
  uint64_t v71;
  _WORD *v72;
  _BYTE *v73;
  _QWORD *v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  _WORD *v77;
  _BYTE *v78;
  _QWORD *v79;
  llvm::raw_ostream *v80;
  uint64_t v81;
  _WORD *v82;
  _BYTE *v83;
  _QWORD *v84;
  llvm::raw_ostream *v85;
  uint64_t v86;
  _WORD *v87;
  _BYTE *v88;
  _QWORD *v89;
  llvm::raw_ostream *v90;
  void *v91;
  _WORD *v92;
  _BYTE *v93;
  _QWORD *v94;
  llvm::raw_ostream *v95;
  uint64_t v96;
  _WORD *v97;
  _BYTE *v98;
  _QWORD *v99;
  llvm::raw_ostream *v100;
  void *v101;
  _WORD *v102;
  _BYTE *v103;
  _QWORD *v104;
  llvm::raw_ostream *v105;
  uint64_t v106;
  _WORD *v107;
  _BYTE *v108;
  _QWORD *v109;
  llvm::raw_ostream *v110;
  uint64_t v111;
  _WORD *v112;
  _BYTE *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v122[2];
  _OWORD v123[10];
  uint64_t v124;
  char *v125[11];
  llvm::memprof::RawMemProfReader *v126;
  unint64_t v127;
  char *v128[23];
  __int128 v129;
  _BYTE v130[64];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0xFuLL)
  {
    *v4 = *(_OWORD *)"MemprofProfile:\n";
    *((_QWORD *)a2 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(a2, "MemprofProfile:\n", 0x10uLL);
  }
  llvm::memprof::RawMemProfReader::printSummaries(this, a2);
  v5 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 171602788;
    *(_QWORD *)v5 = *(_QWORD *)"  Records:\n";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  Records:\n", 0xBuLL);
  }
  *((_QWORD *)this + 139) = *((_QWORD *)this + 136);
  v127 = 0;
  memset(&v128[1], 0, 176);
  v129 = 0u;
  memset(v130, 0, sizeof(v130));
  v126 = this;
  v128[0] = (char *)&v128[2];
  HIDWORD(v128[1]) = 1;
  *(_QWORD *)&v129 = v130;
  HIDWORD(v129) = 1;
  sub_1C5AB8858((uint64_t)&v126);
  memset(&v125[1], 0, 72);
  v124 = 0;
  v122[1] = (char *)0x100000000;
  memset(v123, 0, sizeof(v123));
  v122[0] = (char *)v123;
  v125[0] = (char *)&v125[2];
  HIDWORD(v125[1]) = 1;
  while (v126)
  {
    v6 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 3uLL)
    {
      *v6 = 170729504;
      v7 = *((_QWORD *)a2 + 4) + 4;
      *((_QWORD *)a2 + 4) = v7;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  -\n", 4uLL);
      v7 = *((_QWORD *)a2 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) > 0x11)
    {
      *(_WORD *)(v7 + 16) = 8250;
      *(_OWORD *)v7 = *(_OWORD *)"    FunctionGUID: ";
      *((_QWORD *)a2 + 4) += 18;
      v8 = a2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(a2, "    FunctionGUID: ", 0x12uLL);
    }
    sub_1C5E21910(v8, v127, 0, 0, 0);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\n", 1uLL);
    }
    else
    {
      *v9 = 10;
      ++*((_QWORD *)v8 + 4);
    }
    if (LODWORD(v128[1]))
    {
      v10 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0xFuLL)
      {
        *v10 = *(_OWORD *)"    AllocSites:\n";
        *((_QWORD *)a2 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    AllocSites:\n", 0x10uLL);
      }
      if (LODWORD(v128[1]))
      {
        v11 = v128[0];
        v12 = &v128[0][168 * LODWORD(v128[1])];
        do
        {
          v13 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 5)
          {
            *(_WORD *)(v13 + 4) = 2605;
            *(_DWORD *)v13 = 538976288;
            v14 = *((_QWORD *)a2 + 4) + 6;
            *((_QWORD *)a2 + 4) = v14;
          }
          else
          {
            llvm::raw_ostream::write(a2, "    -\n", 6uLL);
            v14 = *((_QWORD *)a2 + 4);
          }
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 0x10)
          {
            *(_BYTE *)(v14 + 16) = 10;
            *(_OWORD *)v14 = *(_OWORD *)"      Callstack:\n";
            *((_QWORD *)a2 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(a2, "      Callstack:\n", 0x11uLL);
          }
          v15 = *((unsigned int *)v11 + 2);
          if ((_DWORD)v15)
          {
            v16 = *(_QWORD *)v11;
            v17 = 24 * v15;
            do
            {
              sub_1C5AB896C(v16, a2);
              v16 += 24;
              v17 -= 24;
            }
            while (v17);
          }
          v18 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) > 0x13)
          {
            *(_DWORD *)(v18 + 16) = 171600739;
            *(_OWORD *)v18 = *(_OWORD *)"      MemInfoBlock:\n";
            v19 = (_QWORD *)(*((_QWORD *)a2 + 4) + 20);
            *((_QWORD *)a2 + 4) = v19;
          }
          else
          {
            llvm::raw_ostream::write(a2, "      MemInfoBlock:\n", 0x14uLL);
            v19 = (_QWORD *)*((_QWORD *)a2 + 4);
          }
          if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 7uLL)
          {
            *v19 = 0x2020202020202020;
            v21 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v21;
            v20 = a2;
          }
          else
          {
            v20 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v21 = *((_QWORD *)v20 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 9)
          {
            *(_WORD *)(v21 + 8) = 29806;
            *(_QWORD *)v21 = *(_QWORD *)"AllocCount";
            v22 = (_WORD *)(*((_QWORD *)v20 + 4) + 10);
            *((_QWORD *)v20 + 4) = v22;
          }
          else
          {
            v20 = llvm::raw_ostream::write(v20, "AllocCount", 0xAuLL);
            v22 = (_WORD *)*((_QWORD *)v20 + 4);
          }
          if (*((_QWORD *)v20 + 3) - (_QWORD)v22 > 1uLL)
          {
            *v22 = 8250;
            *((_QWORD *)v20 + 4) += 2;
          }
          else
          {
            v20 = llvm::raw_ostream::write(v20, ": ", 2uLL);
          }
          sub_1C5E21910(v20, *((unsigned int *)v11 + 16), 0, 0, 0);
          v23 = (_BYTE *)*((_QWORD *)v20 + 4);
          if (*((_BYTE **)v20 + 3) == v23)
          {
            llvm::raw_ostream::write(v20, "\n", 1uLL);
          }
          else
          {
            *v23 = 10;
            ++*((_QWORD *)v20 + 4);
          }
          v24 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 7uLL)
          {
            *v24 = 0x2020202020202020;
            v26 = (_OWORD *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v26;
            v25 = a2;
          }
          else
          {
            v25 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v26 = (_OWORD *)*((_QWORD *)v25 + 4);
          }
          if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0xFuLL)
          {
            *v26 = *(_OWORD *)"TotalAccessCount";
            v27 = (_WORD *)(*((_QWORD *)v25 + 4) + 16);
            *((_QWORD *)v25 + 4) = v27;
          }
          else
          {
            v25 = llvm::raw_ostream::write(v25, "TotalAccessCount", 0x10uLL);
            v27 = (_WORD *)*((_QWORD *)v25 + 4);
          }
          if (*((_QWORD *)v25 + 3) - (_QWORD)v27 > 1uLL)
          {
            *v27 = 8250;
            *((_QWORD *)v25 + 4) += 2;
          }
          else
          {
            v25 = llvm::raw_ostream::write(v25, ": ", 2uLL);
          }
          sub_1C5E21910(v25, *((_QWORD *)v11 + 9), 0, 0, 0);
          v28 = (_BYTE *)*((_QWORD *)v25 + 4);
          if (*((_BYTE **)v25 + 3) == v28)
          {
            llvm::raw_ostream::write(v25, "\n", 1uLL);
          }
          else
          {
            *v28 = 10;
            ++*((_QWORD *)v25 + 4);
          }
          v29 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 7uLL)
          {
            *v29 = 0x2020202020202020;
            v31 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v31;
            v30 = a2;
          }
          else
          {
            v30 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v31 = (void *)*((_QWORD *)v30 + 4);
          }
          if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 0xDuLL)
          {
            qmemcpy(v31, "MinAccessCount", 14);
            v32 = (_WORD *)(*((_QWORD *)v30 + 4) + 14);
            *((_QWORD *)v30 + 4) = v32;
          }
          else
          {
            v30 = llvm::raw_ostream::write(v30, "MinAccessCount", 0xEuLL);
            v32 = (_WORD *)*((_QWORD *)v30 + 4);
          }
          if (*((_QWORD *)v30 + 3) - (_QWORD)v32 > 1uLL)
          {
            *v32 = 8250;
            *((_QWORD *)v30 + 4) += 2;
          }
          else
          {
            v30 = llvm::raw_ostream::write(v30, ": ", 2uLL);
          }
          sub_1C5E21910(v30, *((_QWORD *)v11 + 10), 0, 0, 0);
          v33 = (_BYTE *)*((_QWORD *)v30 + 4);
          if (*((_BYTE **)v30 + 3) == v33)
          {
            llvm::raw_ostream::write(v30, "\n", 1uLL);
          }
          else
          {
            *v33 = 10;
            ++*((_QWORD *)v30 + 4);
          }
          v34 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v34 > 7uLL)
          {
            *v34 = 0x2020202020202020;
            v36 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v36;
            v35 = a2;
          }
          else
          {
            v35 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v36 = (void *)*((_QWORD *)v35 + 4);
          }
          if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0xDuLL)
          {
            qmemcpy(v36, "MaxAccessCount", 14);
            v37 = (_WORD *)(*((_QWORD *)v35 + 4) + 14);
            *((_QWORD *)v35 + 4) = v37;
          }
          else
          {
            v35 = llvm::raw_ostream::write(v35, "MaxAccessCount", 0xEuLL);
            v37 = (_WORD *)*((_QWORD *)v35 + 4);
          }
          if (*((_QWORD *)v35 + 3) - (_QWORD)v37 > 1uLL)
          {
            *v37 = 8250;
            *((_QWORD *)v35 + 4) += 2;
          }
          else
          {
            v35 = llvm::raw_ostream::write(v35, ": ", 2uLL);
          }
          sub_1C5E21910(v35, *((_QWORD *)v11 + 11), 0, 0, 0);
          v38 = (_BYTE *)*((_QWORD *)v35 + 4);
          if (*((_BYTE **)v35 + 3) == v38)
          {
            llvm::raw_ostream::write(v35, "\n", 1uLL);
          }
          else
          {
            *v38 = 10;
            ++*((_QWORD *)v35 + 4);
          }
          v39 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 7uLL)
          {
            *v39 = 0x2020202020202020;
            v41 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v41;
            v40 = a2;
          }
          else
          {
            v40 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v41 = *((_QWORD *)v40 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
          {
            *(_BYTE *)(v41 + 8) = 101;
            *(_QWORD *)v41 = *(_QWORD *)"TotalSize";
            v42 = (_WORD *)(*((_QWORD *)v40 + 4) + 9);
            *((_QWORD *)v40 + 4) = v42;
          }
          else
          {
            v40 = llvm::raw_ostream::write(v40, "TotalSize", 9uLL);
            v42 = (_WORD *)*((_QWORD *)v40 + 4);
          }
          if (*((_QWORD *)v40 + 3) - (_QWORD)v42 > 1uLL)
          {
            *v42 = 8250;
            *((_QWORD *)v40 + 4) += 2;
          }
          else
          {
            v40 = llvm::raw_ostream::write(v40, ": ", 2uLL);
          }
          sub_1C5E21910(v40, *((_QWORD *)v11 + 12), 0, 0, 0);
          v43 = (_BYTE *)*((_QWORD *)v40 + 4);
          if (*((_BYTE **)v40 + 3) == v43)
          {
            llvm::raw_ostream::write(v40, "\n", 1uLL);
          }
          else
          {
            *v43 = 10;
            ++*((_QWORD *)v40 + 4);
          }
          v44 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v44 > 7uLL)
          {
            *v44 = 0x2020202020202020;
            v46 = (_DWORD *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v46;
            v45 = a2;
          }
          else
          {
            v45 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v46 = (_DWORD *)*((_QWORD *)v45 + 4);
          }
          if (*((_QWORD *)v45 + 3) - (_QWORD)v46 > 6uLL)
          {
            *(_DWORD *)((char *)v46 + 3) = 1702521171;
            *v46 = 1399744845;
            v47 = (_WORD *)(*((_QWORD *)v45 + 4) + 7);
            *((_QWORD *)v45 + 4) = v47;
          }
          else
          {
            v45 = llvm::raw_ostream::write(v45, "MinSize", 7uLL);
            v47 = (_WORD *)*((_QWORD *)v45 + 4);
          }
          if (*((_QWORD *)v45 + 3) - (_QWORD)v47 > 1uLL)
          {
            *v47 = 8250;
            *((_QWORD *)v45 + 4) += 2;
          }
          else
          {
            v45 = llvm::raw_ostream::write(v45, ": ", 2uLL);
          }
          sub_1C5E21910(v45, *((unsigned int *)v11 + 26), 0, 0, 0);
          v48 = (_BYTE *)*((_QWORD *)v45 + 4);
          if (*((_BYTE **)v45 + 3) == v48)
          {
            llvm::raw_ostream::write(v45, "\n", 1uLL);
          }
          else
          {
            *v48 = 10;
            ++*((_QWORD *)v45 + 4);
          }
          v49 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v49 > 7uLL)
          {
            *v49 = 0x2020202020202020;
            v51 = (_DWORD *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v51;
            v50 = a2;
          }
          else
          {
            v50 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v51 = (_DWORD *)*((_QWORD *)v50 + 4);
          }
          if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 6uLL)
          {
            *(_DWORD *)((char *)v51 + 3) = 1702521171;
            *v51 = 1400398157;
            v52 = (_WORD *)(*((_QWORD *)v50 + 4) + 7);
            *((_QWORD *)v50 + 4) = v52;
          }
          else
          {
            v50 = llvm::raw_ostream::write(v50, "MaxSize", 7uLL);
            v52 = (_WORD *)*((_QWORD *)v50 + 4);
          }
          if (*((_QWORD *)v50 + 3) - (_QWORD)v52 > 1uLL)
          {
            *v52 = 8250;
            *((_QWORD *)v50 + 4) += 2;
          }
          else
          {
            v50 = llvm::raw_ostream::write(v50, ": ", 2uLL);
          }
          sub_1C5E21910(v50, *((unsigned int *)v11 + 27), 0, 0, 0);
          v53 = (_BYTE *)*((_QWORD *)v50 + 4);
          if (*((_BYTE **)v50 + 3) == v53)
          {
            llvm::raw_ostream::write(v50, "\n", 1uLL);
          }
          else
          {
            *v53 = 10;
            ++*((_QWORD *)v50 + 4);
          }
          v54 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v54 > 7uLL)
          {
            *v54 = 0x2020202020202020;
            v56 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v56;
            v55 = a2;
          }
          else
          {
            v55 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v56 = (void *)*((_QWORD *)v55 + 4);
          }
          if (*((_QWORD *)v55 + 3) - (_QWORD)v56 > 0xDuLL)
          {
            qmemcpy(v56, "AllocTimestamp", 14);
            v57 = (_WORD *)(*((_QWORD *)v55 + 4) + 14);
            *((_QWORD *)v55 + 4) = v57;
          }
          else
          {
            v55 = llvm::raw_ostream::write(v55, "AllocTimestamp", 0xEuLL);
            v57 = (_WORD *)*((_QWORD *)v55 + 4);
          }
          if (*((_QWORD *)v55 + 3) - (_QWORD)v57 > 1uLL)
          {
            *v57 = 8250;
            *((_QWORD *)v55 + 4) += 2;
          }
          else
          {
            v55 = llvm::raw_ostream::write(v55, ": ", 2uLL);
          }
          sub_1C5E21910(v55, *((unsigned int *)v11 + 28), 0, 0, 0);
          v58 = (_BYTE *)*((_QWORD *)v55 + 4);
          if (*((_BYTE **)v55 + 3) == v58)
          {
            llvm::raw_ostream::write(v55, "\n", 1uLL);
          }
          else
          {
            *v58 = 10;
            ++*((_QWORD *)v55 + 4);
          }
          v59 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v59 > 7uLL)
          {
            *v59 = 0x2020202020202020;
            v61 = (_OWORD *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v61;
            v60 = a2;
          }
          else
          {
            v60 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v61 = (_OWORD *)*((_QWORD *)v60 + 4);
          }
          if (*((_QWORD *)v60 + 3) - (_QWORD)v61 > 0xFuLL)
          {
            *v61 = *(_OWORD *)"DeallocTimestamp";
            v62 = (_WORD *)(*((_QWORD *)v60 + 4) + 16);
            *((_QWORD *)v60 + 4) = v62;
          }
          else
          {
            v60 = llvm::raw_ostream::write(v60, "DeallocTimestamp", 0x10uLL);
            v62 = (_WORD *)*((_QWORD *)v60 + 4);
          }
          if (*((_QWORD *)v60 + 3) - (_QWORD)v62 > 1uLL)
          {
            *v62 = 8250;
            *((_QWORD *)v60 + 4) += 2;
          }
          else
          {
            v60 = llvm::raw_ostream::write(v60, ": ", 2uLL);
          }
          sub_1C5E21910(v60, *((unsigned int *)v11 + 29), 0, 0, 0);
          v63 = (_BYTE *)*((_QWORD *)v60 + 4);
          if (*((_BYTE **)v60 + 3) == v63)
          {
            llvm::raw_ostream::write(v60, "\n", 1uLL);
          }
          else
          {
            *v63 = 10;
            ++*((_QWORD *)v60 + 4);
          }
          v64 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v64 > 7uLL)
          {
            *v64 = 0x2020202020202020;
            v66 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v66;
            v65 = a2;
          }
          else
          {
            v65 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v66 = (void *)*((_QWORD *)v65 + 4);
          }
          if (*((_QWORD *)v65 + 3) - (_QWORD)v66 > 0xCuLL)
          {
            qmemcpy(v66, "TotalLifetime", 13);
            v67 = (_WORD *)(*((_QWORD *)v65 + 4) + 13);
            *((_QWORD *)v65 + 4) = v67;
          }
          else
          {
            v65 = llvm::raw_ostream::write(v65, "TotalLifetime", 0xDuLL);
            v67 = (_WORD *)*((_QWORD *)v65 + 4);
          }
          if (*((_QWORD *)v65 + 3) - (_QWORD)v67 > 1uLL)
          {
            *v67 = 8250;
            *((_QWORD *)v65 + 4) += 2;
          }
          else
          {
            v65 = llvm::raw_ostream::write(v65, ": ", 2uLL);
          }
          sub_1C5E21910(v65, *((_QWORD *)v11 + 15), 0, 0, 0);
          v68 = (_BYTE *)*((_QWORD *)v65 + 4);
          if (*((_BYTE **)v65 + 3) == v68)
          {
            llvm::raw_ostream::write(v65, "\n", 1uLL);
          }
          else
          {
            *v68 = 10;
            ++*((_QWORD *)v65 + 4);
          }
          v69 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v69 > 7uLL)
          {
            *v69 = 0x2020202020202020;
            v71 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v71;
            v70 = a2;
          }
          else
          {
            v70 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v71 = *((_QWORD *)v70 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v70 + 3) - v71) > 0xA)
          {
            *(_DWORD *)(v71 + 7) = 1701669236;
            *(_QWORD *)v71 = *(_QWORD *)"MinLifetime";
            v72 = (_WORD *)(*((_QWORD *)v70 + 4) + 11);
            *((_QWORD *)v70 + 4) = v72;
          }
          else
          {
            v70 = llvm::raw_ostream::write(v70, "MinLifetime", 0xBuLL);
            v72 = (_WORD *)*((_QWORD *)v70 + 4);
          }
          if (*((_QWORD *)v70 + 3) - (_QWORD)v72 > 1uLL)
          {
            *v72 = 8250;
            *((_QWORD *)v70 + 4) += 2;
          }
          else
          {
            v70 = llvm::raw_ostream::write(v70, ": ", 2uLL);
          }
          sub_1C5E21910(v70, *((unsigned int *)v11 + 32), 0, 0, 0);
          v73 = (_BYTE *)*((_QWORD *)v70 + 4);
          if (*((_BYTE **)v70 + 3) == v73)
          {
            llvm::raw_ostream::write(v70, "\n", 1uLL);
          }
          else
          {
            *v73 = 10;
            ++*((_QWORD *)v70 + 4);
          }
          v74 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v74 > 7uLL)
          {
            *v74 = 0x2020202020202020;
            v76 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v76;
            v75 = a2;
          }
          else
          {
            v75 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v76 = *((_QWORD *)v75 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v75 + 3) - v76) > 0xA)
          {
            *(_DWORD *)(v76 + 7) = 1701669236;
            *(_QWORD *)v76 = *(_QWORD *)"MaxLifetime";
            v77 = (_WORD *)(*((_QWORD *)v75 + 4) + 11);
            *((_QWORD *)v75 + 4) = v77;
          }
          else
          {
            v75 = llvm::raw_ostream::write(v75, "MaxLifetime", 0xBuLL);
            v77 = (_WORD *)*((_QWORD *)v75 + 4);
          }
          if (*((_QWORD *)v75 + 3) - (_QWORD)v77 > 1uLL)
          {
            *v77 = 8250;
            *((_QWORD *)v75 + 4) += 2;
          }
          else
          {
            v75 = llvm::raw_ostream::write(v75, ": ", 2uLL);
          }
          sub_1C5E21910(v75, *((unsigned int *)v11 + 33), 0, 0, 0);
          v78 = (_BYTE *)*((_QWORD *)v75 + 4);
          if (*((_BYTE **)v75 + 3) == v78)
          {
            llvm::raw_ostream::write(v75, "\n", 1uLL);
          }
          else
          {
            *v78 = 10;
            ++*((_QWORD *)v75 + 4);
          }
          v79 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v79 > 7uLL)
          {
            *v79 = 0x2020202020202020;
            v81 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v81;
            v80 = a2;
          }
          else
          {
            v80 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v81 = *((_QWORD *)v80 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v80 + 3) - v81) > 9)
          {
            *(_WORD *)(v81 + 8) = 25673;
            *(_QWORD *)v81 = *(_QWORD *)"AllocCpuId";
            v82 = (_WORD *)(*((_QWORD *)v80 + 4) + 10);
            *((_QWORD *)v80 + 4) = v82;
          }
          else
          {
            v80 = llvm::raw_ostream::write(v80, "AllocCpuId", 0xAuLL);
            v82 = (_WORD *)*((_QWORD *)v80 + 4);
          }
          if (*((_QWORD *)v80 + 3) - (_QWORD)v82 > 1uLL)
          {
            *v82 = 8250;
            *((_QWORD *)v80 + 4) += 2;
          }
          else
          {
            v80 = llvm::raw_ostream::write(v80, ": ", 2uLL);
          }
          sub_1C5E21910(v80, *((unsigned int *)v11 + 34), 0, 0, 0);
          v83 = (_BYTE *)*((_QWORD *)v80 + 4);
          if (*((_BYTE **)v80 + 3) == v83)
          {
            llvm::raw_ostream::write(v80, "\n", 1uLL);
          }
          else
          {
            *v83 = 10;
            ++*((_QWORD *)v80 + 4);
          }
          v84 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v84 > 7uLL)
          {
            *v84 = 0x2020202020202020;
            v86 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v86;
            v85 = a2;
          }
          else
          {
            v85 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v86 = *((_QWORD *)v85 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v85 + 3) - v86) > 0xB)
          {
            *(_DWORD *)(v86 + 8) = 1682535792;
            *(_QWORD *)v86 = *(_QWORD *)"DeallocCpuId";
            v87 = (_WORD *)(*((_QWORD *)v85 + 4) + 12);
            *((_QWORD *)v85 + 4) = v87;
          }
          else
          {
            v85 = llvm::raw_ostream::write(v85, "DeallocCpuId", 0xCuLL);
            v87 = (_WORD *)*((_QWORD *)v85 + 4);
          }
          if (*((_QWORD *)v85 + 3) - (_QWORD)v87 > 1uLL)
          {
            *v87 = 8250;
            *((_QWORD *)v85 + 4) += 2;
          }
          else
          {
            v85 = llvm::raw_ostream::write(v85, ": ", 2uLL);
          }
          sub_1C5E21910(v85, *((unsigned int *)v11 + 35), 0, 0, 0);
          v88 = (_BYTE *)*((_QWORD *)v85 + 4);
          if (*((_BYTE **)v85 + 3) == v88)
          {
            llvm::raw_ostream::write(v85, "\n", 1uLL);
          }
          else
          {
            *v88 = 10;
            ++*((_QWORD *)v85 + 4);
          }
          v89 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v89 > 7uLL)
          {
            *v89 = 0x2020202020202020;
            v91 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v91;
            v90 = a2;
          }
          else
          {
            v90 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v91 = (void *)*((_QWORD *)v90 + 4);
          }
          if (*((_QWORD *)v90 + 3) - (_QWORD)v91 > 0xDuLL)
          {
            qmemcpy(v91, "NumMigratedCpu", 14);
            v92 = (_WORD *)(*((_QWORD *)v90 + 4) + 14);
            *((_QWORD *)v90 + 4) = v92;
          }
          else
          {
            v90 = llvm::raw_ostream::write(v90, "NumMigratedCpu", 0xEuLL);
            v92 = (_WORD *)*((_QWORD *)v90 + 4);
          }
          if (*((_QWORD *)v90 + 3) - (_QWORD)v92 > 1uLL)
          {
            *v92 = 8250;
            *((_QWORD *)v90 + 4) += 2;
          }
          else
          {
            v90 = llvm::raw_ostream::write(v90, ": ", 2uLL);
          }
          sub_1C5E21910(v90, *((unsigned int *)v11 + 36), 0, 0, 0);
          v93 = (_BYTE *)*((_QWORD *)v90 + 4);
          if (*((_BYTE **)v90 + 3) == v93)
          {
            llvm::raw_ostream::write(v90, "\n", 1uLL);
          }
          else
          {
            *v93 = 10;
            ++*((_QWORD *)v90 + 4);
          }
          v94 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v94 > 7uLL)
          {
            *v94 = 0x2020202020202020;
            v96 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v96;
            v95 = a2;
          }
          else
          {
            v95 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v96 = *((_QWORD *)v95 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v95 + 3) - v96) > 0x12)
          {
            *(_DWORD *)(v96 + 15) = 1936744812;
            *(_OWORD *)v96 = *(_OWORD *)"NumLifetimeOverlaps";
            v97 = (_WORD *)(*((_QWORD *)v95 + 4) + 19);
            *((_QWORD *)v95 + 4) = v97;
          }
          else
          {
            v95 = llvm::raw_ostream::write(v95, "NumLifetimeOverlaps", 0x13uLL);
            v97 = (_WORD *)*((_QWORD *)v95 + 4);
          }
          if (*((_QWORD *)v95 + 3) - (_QWORD)v97 > 1uLL)
          {
            *v97 = 8250;
            *((_QWORD *)v95 + 4) += 2;
          }
          else
          {
            v95 = llvm::raw_ostream::write(v95, ": ", 2uLL);
          }
          sub_1C5E21910(v95, *((unsigned int *)v11 + 37), 0, 0, 0);
          v98 = (_BYTE *)*((_QWORD *)v95 + 4);
          if (*((_BYTE **)v95 + 3) == v98)
          {
            llvm::raw_ostream::write(v95, "\n", 1uLL);
          }
          else
          {
            *v98 = 10;
            ++*((_QWORD *)v95 + 4);
          }
          v99 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v99 > 7uLL)
          {
            *v99 = 0x2020202020202020;
            v101 = (void *)(*((_QWORD *)a2 + 4) + 8);
            *((_QWORD *)a2 + 4) = v101;
            v100 = a2;
          }
          else
          {
            v100 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v101 = (void *)*((_QWORD *)v100 + 4);
          }
          if (*((_QWORD *)v100 + 3) - (_QWORD)v101 > 0xEuLL)
          {
            qmemcpy(v101, "NumSameAllocCpu", 15);
            v102 = (_WORD *)(*((_QWORD *)v100 + 4) + 15);
            *((_QWORD *)v100 + 4) = v102;
          }
          else
          {
            v100 = llvm::raw_ostream::write(v100, "NumSameAllocCpu", 0xFuLL);
            v102 = (_WORD *)*((_QWORD *)v100 + 4);
          }
          if (*((_QWORD *)v100 + 3) - (_QWORD)v102 > 1uLL)
          {
            *v102 = 8250;
            *((_QWORD *)v100 + 4) += 2;
          }
          else
          {
            v100 = llvm::raw_ostream::write(v100, ": ", 2uLL);
          }
          sub_1C5E21910(v100, *((unsigned int *)v11 + 38), 0, 0, 0);
          v103 = (_BYTE *)*((_QWORD *)v100 + 4);
          if (*((_BYTE **)v100 + 3) == v103)
          {
            llvm::raw_ostream::write(v100, "\n", 1uLL);
          }
          else
          {
            *v103 = 10;
            ++*((_QWORD *)v100 + 4);
          }
          v104 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v104 > 7uLL)
          {
            *v104 = 0x2020202020202020;
            v106 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v106;
            v105 = a2;
          }
          else
          {
            v105 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v106 = *((_QWORD *)v105 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v105 + 3) - v106) > 0x10)
          {
            *(_BYTE *)(v106 + 16) = 117;
            *(_OWORD *)v106 = *(_OWORD *)"NumSameDeallocCpu";
            v107 = (_WORD *)(*((_QWORD *)v105 + 4) + 17);
            *((_QWORD *)v105 + 4) = v107;
          }
          else
          {
            v105 = llvm::raw_ostream::write(v105, "NumSameDeallocCpu", 0x11uLL);
            v107 = (_WORD *)*((_QWORD *)v105 + 4);
          }
          if (*((_QWORD *)v105 + 3) - (_QWORD)v107 > 1uLL)
          {
            *v107 = 8250;
            *((_QWORD *)v105 + 4) += 2;
          }
          else
          {
            v105 = llvm::raw_ostream::write(v105, ": ", 2uLL);
          }
          sub_1C5E21910(v105, *((unsigned int *)v11 + 39), 0, 0, 0);
          v108 = (_BYTE *)*((_QWORD *)v105 + 4);
          if (*((_BYTE **)v105 + 3) == v108)
          {
            llvm::raw_ostream::write(v105, "\n", 1uLL);
          }
          else
          {
            *v108 = 10;
            ++*((_QWORD *)v105 + 4);
          }
          v109 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v109 > 7uLL)
          {
            *v109 = 0x2020202020202020;
            v111 = *((_QWORD *)a2 + 4) + 8;
            *((_QWORD *)a2 + 4) = v111;
            v110 = a2;
          }
          else
          {
            v110 = llvm::raw_ostream::write(a2, "        ", 8uLL);
            v111 = *((_QWORD *)v110 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v110 + 3) - v111) > 9)
          {
            *(_WORD *)(v111 + 8) = 25673;
            *(_QWORD *)v111 = *(_QWORD *)"DataTypeId";
            v112 = (_WORD *)(*((_QWORD *)v110 + 4) + 10);
            *((_QWORD *)v110 + 4) = v112;
          }
          else
          {
            v110 = llvm::raw_ostream::write(v110, "DataTypeId", 0xAuLL);
            v112 = (_WORD *)*((_QWORD *)v110 + 4);
          }
          if (*((_QWORD *)v110 + 3) - (_QWORD)v112 > 1uLL)
          {
            *v112 = 8250;
            *((_QWORD *)v110 + 4) += 2;
          }
          else
          {
            v110 = llvm::raw_ostream::write(v110, ": ", 2uLL);
          }
          sub_1C5E21910(v110, *((_QWORD *)v11 + 20), 0, 0, 0);
          v113 = (_BYTE *)*((_QWORD *)v110 + 4);
          if (*((_BYTE **)v110 + 3) == v113)
          {
            llvm::raw_ostream::write(v110, "\n", 1uLL);
          }
          else
          {
            *v113 = 10;
            ++*((_QWORD *)v110 + 4);
          }
          v11 += 168;
        }
        while (v11 != v12);
      }
    }
    if (DWORD2(v129))
    {
      v114 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v114 > 0xEuLL)
      {
        qmemcpy(v114, "    CallSites:\n", 15);
        *((_QWORD *)a2 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    CallSites:\n", 0xFuLL);
      }
      if (DWORD2(v129))
      {
        v115 = v129;
        v116 = v129 + ((unint64_t)DWORD2(v129) << 6);
        do
        {
          v117 = *(unsigned int *)(v115 + 8);
          if ((_DWORD)v117)
          {
            v118 = *(_QWORD *)v115;
            v119 = 24 * v117;
            do
            {
              v120 = *((_QWORD *)a2 + 4);
              if ((unint64_t)(*((_QWORD *)a2 + 3) - v120) > 5)
              {
                *(_WORD *)(v120 + 4) = 2605;
                *(_DWORD *)v120 = 538976288;
                *((_QWORD *)a2 + 4) += 6;
              }
              else
              {
                llvm::raw_ostream::write(a2, "    -\n", 6uLL);
              }
              sub_1C5AB896C(v118, a2);
              v118 += 24;
              v119 -= 24;
            }
            while (v119);
          }
          v115 += 64;
        }
        while (v115 != v116);
      }
    }
    sub_1C5AB8858((uint64_t)&v126);
  }
  sub_1C61BE804(v125);
  sub_1C63089E8(v122);
  sub_1C61BE804((char **)&v129);
  return sub_1C63089E8(v128);
}

llvm::raw_ostream *llvm::memprof::RawMemProfReader::printSummaries(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  _QWORD *v2;
  llvm::raw_ostream *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  _OWORD *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  void *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;

  v2 = *(_QWORD **)(*(_QWORD *)this + 8);
  if ((unint64_t)v2 < *(_QWORD *)(*(_QWORD *)this + 16))
  {
    v4 = this;
    do
    {
      v6 = v2[1];
      v5 = v2[2];
      v7 = *(_QWORD *)((char *)v2 + v2[3]);
      v8 = *(_QWORD *)((char *)v2 + v2[4]);
      v9 = *(_QWORD *)((char *)v2 + v2[5]);
      v10 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 3uLL)
      {
        *v10 = 170729504;
        v11 = *((_QWORD *)a2 + 4) + 4;
        *((_QWORD *)a2 + 4) = v11;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  -\n", 4uLL);
        v11 = *((_QWORD *)a2 + 4);
      }
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 9)
      {
        *(_WORD *)(v11 + 8) = 2618;
        *(_QWORD *)v11 = *(_QWORD *)"  Header:\n";
        v12 = (void *)(*((_QWORD *)a2 + 4) + 10);
        *((_QWORD *)a2 + 4) = v12;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  Header:\n", 0xAuLL);
        v12 = (void *)*((_QWORD *)a2 + 4);
      }
      if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 0xCuLL)
      {
        qmemcpy(v12, "    Version: ", 13);
        *((_QWORD *)a2 + 4) += 13;
        v13 = a2;
      }
      else
      {
        v13 = llvm::raw_ostream::write(a2, "    Version: ", 0xDuLL);
      }
      sub_1C5E21910(v13, v6, 0, 0, 0);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if (*((_BYTE **)v13 + 3) == v14)
      {
        llvm::raw_ostream::write(v13, "\n", 1uLL);
      }
      else
      {
        *v14 = 10;
        ++*((_QWORD *)v13 + 4);
      }
      v15 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) > 0x13)
      {
        *(_DWORD *)(v15 + 16) = 540701541;
        *(_OWORD *)v15 = *(_OWORD *)"    TotalSizeBytes: ";
        *((_QWORD *)a2 + 4) += 20;
        v16 = a2;
      }
      else
      {
        v16 = llvm::raw_ostream::write(a2, "    TotalSizeBytes: ", 0x14uLL);
      }
      sub_1C5E21910(v16, v5, 0, 0, 0);
      v17 = (_BYTE *)*((_QWORD *)v16 + 4);
      if (*((_BYTE **)v16 + 3) == v17)
      {
        llvm::raw_ostream::write(v16, "\n", 1uLL);
      }
      else
      {
        *v17 = 10;
        ++*((_QWORD *)v16 + 4);
      }
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) > 0x10)
      {
        *(_BYTE *)(v18 + 16) = 32;
        *(_OWORD *)v18 = *(_OWORD *)"    NumSegments: ";
        *((_QWORD *)a2 + 4) += 17;
        v19 = a2;
      }
      else
      {
        v19 = llvm::raw_ostream::write(a2, "    NumSegments: ", 0x11uLL);
      }
      sub_1C5E21910(v19, v7, 0, 0, 0);
      v20 = (_BYTE *)*((_QWORD *)v19 + 4);
      if (*((_BYTE **)v19 + 3) == v20)
      {
        llvm::raw_ostream::write(v19, "\n", 1uLL);
      }
      else
      {
        *v20 = 10;
        ++*((_QWORD *)v19 + 4);
      }
      v21 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v21 > 0xFuLL)
      {
        *v21 = *(_OWORD *)"    NumMibInfo: ";
        *((_QWORD *)a2 + 4) += 16;
        v22 = a2;
      }
      else
      {
        v22 = llvm::raw_ostream::write(a2, "    NumMibInfo: ", 0x10uLL);
      }
      sub_1C5E21910(v22, v8, 0, 0, 0);
      v23 = (_BYTE *)*((_QWORD *)v22 + 4);
      if (*((_BYTE **)v22 + 3) == v23)
      {
        llvm::raw_ostream::write(v22, "\n", 1uLL);
      }
      else
      {
        *v23 = 10;
        ++*((_QWORD *)v22 + 4);
      }
      v24 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 0x14uLL)
      {
        qmemcpy(v24, "    NumStackOffsets: ", 21);
        *((_QWORD *)a2 + 4) += 21;
        v25 = a2;
      }
      else
      {
        v25 = llvm::raw_ostream::write(a2, "    NumStackOffsets: ", 0x15uLL);
      }
      this = sub_1C5E21910(v25, v9, 0, 0, 0);
      v26 = (_BYTE *)*((_QWORD *)v25 + 4);
      if (*((_BYTE **)v25 + 3) == v26)
      {
        this = llvm::raw_ostream::write(v25, "\n", 1uLL);
      }
      else
      {
        *v26 = 10;
        ++*((_QWORD *)v25 + 4);
      }
      v2 = (_QWORD *)((char *)v2 + v2[2]);
    }
    while ((unint64_t)v2 < *(_QWORD *)(*(_QWORD *)v4 + 16));
  }
  return this;
}

void llvm::memprof::RawMemProfReader::readRawProfile(llvm::memprof::RawMemProfReader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  char *v29;
  _QWORD *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  BOOL v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  int32x2_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t i;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  _OWORD v121[6];
  int v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[16];
  __int16 v126;
  char *v127;
  uint64_t v128;
  _QWORD v129[9];

  v129[7] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)((char *)this + 32);
  v4 = *(_QWORD **)(*(_QWORD *)this + 8);
  v5 = (_QWORD *)((char *)this + 944);
  v112 = (uint64_t *)((char *)this + 992);
  v110 = (char *)this + 32;
  do
  {
    if ((unint64_t)v4 >= *(_QWORD *)(*(_QWORD *)this + 16))
    {
      *a2 = 0;
      return;
    }
    v6 = v4[3];
    v8 = (unint64_t)v4 + v6 + 8;
    v7 = *(_QWORD *)((char *)v4 + v6);
    v127 = (char *)v129;
    v128 = 0x100000000;
    v9 = 0;
    if (v7)
    {
      v10 = (uint64_t)v4 + v6 + 8;
      do
      {
        v11 = v127;
        v12 = (char *)v8;
        if (v9 >= HIDWORD(v128))
        {
          v14 = v9 + 1;
          v15 = &v127[56 * v9];
          if ((unint64_t)v127 <= v8 && (unint64_t)v15 > v8)
          {
            v17 = v10 - (_QWORD)v127;
            sub_1C5AB8CC8((uint64_t)&v127, v14);
            v11 = v127;
            v12 = &v127[v17];
          }
          else
          {
            sub_1C5AB8CC8((uint64_t)&v127, v14);
            v11 = v127;
            v12 = (char *)v8;
          }
        }
        v13 = &v11[56 * v128];
        *(_OWORD *)(v13 + 40) = 0u;
        *(_OWORD *)(v13 + 24) = 0u;
        *(_OWORD *)v13 = *(_OWORD *)v12;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v12 + 2);
        v9 = v128 + 1;
        LODWORD(v128) = v128 + 1;
        v8 += 56;
        v10 += 56;
        --v7;
      }
      while (v7);
    }
    v18 = *((_DWORD *)this + 10);
    if (v18)
    {
      if (v18 == v9)
      {
        v19 = 0;
        v20 = v9;
        v21 = *v3;
        v22 = *v3 + 56 * v9;
        v23 = v127;
        while (1)
        {
          v24 = &v127[v19];
          v25 = v21 + v19;
          if (*(_QWORD *)(v21 + v19) != *(_QWORD *)&v127[v19]
            || *(_QWORD *)(v25 + 8) != *((_QWORD *)v24 + 1)
            || *(_QWORD *)(v25 + 16) != *((_QWORD *)v24 + 2))
          {
            break;
          }
          v19 += 56;
          if (v25 + 56 == v22)
            goto LABEL_24;
        }
      }
      v26 = operator new();
      v123 = "memprof raw profile has different segment information";
      v126 = 259;
      *(_QWORD *)v26 = off_1E8192D50;
      *(_DWORD *)(v26 + 8) = 9;
      llvm::Twine::str((llvm::Twine *)&v123, (_QWORD *)(v26 + 16));
      *a2 = v26;
      v27 = 1;
      goto LABEL_119;
    }
    v23 = v127;
    v20 = v9;
LABEL_24:
    *((_DWORD *)this + 10) = 0;
    if (v20 > *((unsigned int *)this + 11))
    {
      sub_1C5AB8CC8((uint64_t)v3, v20);
      v28 = *((_DWORD *)this + 10);
      goto LABEL_28;
    }
    if (v20)
    {
      v28 = 0;
LABEL_28:
      v29 = &v23[56 * v20];
      v30 = (_QWORD *)(*v3 + 56 * v28 + 25);
      do
      {
        *((_BYTE *)v30 - 1) = 0;
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        *(_QWORD *)((char *)v30 + 23) = 0;
        *(_OWORD *)((char *)v30 - 25) = *(_OWORD *)v23;
        *(_QWORD *)((char *)v30 - 9) = *((_QWORD *)v23 + 2);
        v30 += 7;
        v23 += 56;
      }
      while (v23 != v29);
      v31 = *((_DWORD *)this + 10);
      goto LABEL_31;
    }
    v31 = 0;
LABEL_31:
    *((_DWORD *)this + 10) = v31 + v20;
    v32 = (_QWORD *)((char *)v4 + v4[4]);
    v33 = *v32;
    v123 = v125;
    v124 = 0x100000000;
    if (!v33)
      goto LABEL_64;
    v34 = 0;
    v35 = v32 + 1;
    do
    {
      v36 = *v35;
      v37 = *(_OWORD *)(v35 + 7);
      v38 = *(_OWORD *)(v35 + 9);
      v39 = *(_OWORD *)(v35 + 11);
      v122 = *((_DWORD *)v35 + 26);
      v40 = *(_OWORD *)(v35 + 3);
      v41 = *(_OWORD *)(v35 + 5);
      v121[0] = *(_OWORD *)(v35 + 1);
      v121[1] = v40;
      v121[4] = v38;
      v121[5] = v39;
      v121[2] = v41;
      v121[3] = v37;
      v113 = v36;
      v118 = v38;
      v119 = v39;
      v120 = v122;
      v114 = v121[0];
      v115 = v40;
      v116 = v41;
      v117 = v37;
      v42 = (char *)v123;
      if (v34 >= HIDWORD(v124))
      {
        v50 = v34 + 1;
        v51 = (char *)v123 + 112 * v34 > (char *)&v113;
        if (v123 <= &v113 && v51)
        {
          v52 = (char *)&v113 - (_BYTE *)v123;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v50, 112);
          v42 = (char *)v123;
          v43 = (uint64_t *)((char *)v123 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v50, 112);
          v43 = &v113;
          v42 = (char *)v123;
        }
      }
      else
      {
        v43 = &v113;
      }
      v44 = &v42[112 * v124];
      v45 = *(_OWORD *)v43;
      v46 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v44 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v44 + 2) = v46;
      *(_OWORD *)v44 = v45;
      v47 = *((_OWORD *)v43 + 3);
      v48 = *((_OWORD *)v43 + 4);
      v49 = *((_OWORD *)v43 + 6);
      *((_OWORD *)v44 + 5) = *((_OWORD *)v43 + 5);
      *((_OWORD *)v44 + 6) = v49;
      *((_OWORD *)v44 + 3) = v47;
      *((_OWORD *)v44 + 4) = v48;
      v34 = v124 + 1;
      LODWORD(v124) = v124 + 1;
      v35 = (_QWORD *)((char *)v35 + 108);
      --v33;
    }
    while (v33);
    v53 = (char *)v123;
    if (!v34)
      goto LABEL_62;
    v54 = (char *)v123 + 112 * v34;
    do
    {
      v55 = *((_QWORD *)this + 118);
      v56 = *((unsigned int *)this + 240);
      if ((_DWORD)v56)
      {
        LODWORD(v57) = (37 * *(_QWORD *)v53) & (v56 - 1);
        v58 = (uint64_t *)(v55 + 16 * v57);
        v59 = *v58;
        if (*v58 == *(_QWORD *)v53)
          goto LABEL_50;
        v60 = 1;
        while (v59 != -1)
        {
          v61 = v57 + v60++;
          v57 = v61 & (v56 - 1);
          v59 = *(_QWORD *)(v55 + 16 * v57);
          if (v59 == *(_QWORD *)v53)
          {
            v58 = (uint64_t *)(v55 + 16 * v57);
            goto LABEL_50;
          }
        }
      }
      v58 = (uint64_t *)(v55 + 16 * v56);
LABEL_50:
      if ((uint64_t *)(v55 + 16 * v56) == v58)
      {
        v71 = sub_1C5AB846C(v5, (uint64_t *)v53);
        v72 = *(_OWORD *)(v53 + 40);
        v73 = *(_OWORD *)(v53 + 24);
        *(_OWORD *)v71 = *(_OWORD *)(v53 + 8);
        *(_OWORD *)(v71 + 16) = v73;
        *(_OWORD *)(v71 + 32) = v72;
        v74 = *(_OWORD *)(v53 + 72);
        v75 = *(_OWORD *)(v53 + 88);
        v76 = *(_OWORD *)(v53 + 56);
        *(_DWORD *)(v71 + 96) = *((_DWORD *)v53 + 26);
        *(_OWORD *)(v71 + 64) = v74;
        *(_OWORD *)(v71 + 80) = v75;
        *(_OWORD *)(v71 + 48) = v76;
      }
      else
      {
        v62 = sub_1C5AB846C(v5, (uint64_t *)v53);
        *(_DWORD *)v62 += *((_DWORD *)v53 + 2);
        *(_QWORD *)(v62 + 4) += *(_QWORD *)(v53 + 12);
        *(int8x16_t *)(v62 + 12) = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(v62 + 12), *(uint64x2_t *)(v53 + 20)), *(int8x16_t *)(v53 + 20), *(int8x16_t *)(v62 + 12));
        *(_QWORD *)(v62 + 28) += *(_QWORD *)(v53 + 36);
        *(uint32x2_t *)(v62 + 36) = vmin_u32(*(uint32x2_t *)(v53 + 44), *(uint32x2_t *)(v62 + 36));
        *(_QWORD *)(v62 + 52) += *(_QWORD *)(v53 + 60);
        v63 = *((_DWORD *)v53 + 17);
        v64 = *(_DWORD *)(v62 + 64);
        if (v63 >= *(_DWORD *)(v62 + 60))
          v63 = *(_DWORD *)(v62 + 60);
        *(_DWORD *)(v62 + 60) = v63;
        v65 = *((_DWORD *)v53 + 18);
        if (v65 <= v64)
          v65 = v64;
        *(_DWORD *)(v62 + 64) = v65;
        v66 = *(_DWORD *)(v62 + 48);
        v67 = *(_DWORD *)(v62 + 80);
        v68 = *(_QWORD *)(v53 + 52);
        *(_QWORD *)(v62 + 44) = v68;
        if (v68 >= v66)
          v69 = v67;
        else
          v69 = v67 + 1;
        *(_DWORD *)(v62 + 80) = v69;
        v70 = *(int32x2_t *)(v53 + 76);
        *(int32x2_t *)(v62 + 84) = vsub_s32(*(int32x2_t *)(v62 + 84), vceq_s32(*(int32x2_t *)(v62 + 68), v70));
        *(int32x2_t *)(v62 + 68) = v70;
      }
      v53 += 112;
    }
    while (v53 != v54);
    v53 = (char *)v123;
LABEL_62:
    if (v53 != v125)
      free(v53);
LABEL_64:
    v77 = (_QWORD *)((char *)v4 + v4[5]);
    v78 = *v77;
    v113 = 0;
    *(_QWORD *)&v114 = 0;
    DWORD2(v114) = 0;
    if (v78)
    {
      v79 = 0;
      v80 = v77 + 1;
      do
      {
        *(_QWORD *)&v121[0] = 0;
        v81 = *v80;
        v82 = v80[1];
        v80 += 2;
        *(_QWORD *)&v121[0] = v81;
        v123 = v125;
        v124 = 0x600000000;
        if (v82)
        {
          v84 = 0;
          do
          {
            v86 = *v80++;
            v85 = v86;
            if (v84 >= HIDWORD(v124))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, (uint64_t)v125, v84 + 1, 8);
              v84 = v124;
            }
            *((_QWORD *)v123 + v84) = v85;
            v84 = v124 + 1;
            LODWORD(v124) = v124 + 1;
            --v82;
          }
          while (v82);
        }
        sub_1C5AB8DE4((uint64_t)&v113, (uint64_t *)v121);
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v83 + 8, (uint64_t)&v123);
        if (v123 != v125)
          free(v123);
        ++v79;
      }
      while (v79 != v78);
    }
    if (*((_DWORD *)this + 250))
    {
      v87 = (unint64_t *)(v113 + 72 * DWORD2(v114));
      if ((_DWORD)v114)
      {
        if (DWORD2(v114))
        {
          v88 = 72 * DWORD2(v114);
          v89 = v113;
          while (*(_QWORD *)v89 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v89 += 72;
            v88 -= 72;
            if (!v88)
              goto LABEL_82;
          }
        }
        else
        {
          v89 = v113;
        }
      }
      else
      {
LABEL_82:
        v89 = v113 + 72 * DWORD2(v114);
      }
      v103 = v113 + 72 * DWORD2(v114);
LABEL_102:
      while (v89 != v103)
      {
        v123 = 0;
        if (sub_1C5AB8ECC(*((_QWORD *)this + 124), *((_DWORD *)this + 252), *(_QWORD *)v89, &v123))
          v104 = v123 == (void *)(*((_QWORD *)this + 124) + 72 * *((unsigned int *)this + 252));
        else
          v104 = 1;
        if (v104)
        {
          sub_1C5AB8DE4((uint64_t)v112, (uint64_t *)v89);
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v108 + 8, v89 + 8);
        }
        else
        {
          v105 = *(unsigned int *)(v89 + 16);
          if ((_DWORD)v105 != *((_DWORD *)v123 + 4)
            || memcmp(*(const void **)(v89 + 8), *((const void **)v123 + 1), 8 * v105))
          {
            v109 = operator new();
            v123 = "memprof raw profile got different call stack for same id";
            v126 = 259;
            *(_QWORD *)v109 = off_1E8192D50;
            *(_DWORD *)(v109 + 8) = 9;
            llvm::Twine::str((llvm::Twine *)&v123, (_QWORD *)(v109 + 16));
            *a2 = v109;
            v27 = 1;
            goto LABEL_118;
          }
        }
        v106 = (unint64_t *)(v89 + 72);
        while (v106 != v87)
        {
          v107 = *v106;
          v106 += 9;
          if (v107 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v89 = (uint64_t)(v106 - 9);
            goto LABEL_102;
          }
        }
        v89 = (uint64_t)v87;
      }
    }
    else if (&v113 != v112)
    {
      v90 = *((unsigned int *)this + 252);
      v91 = *((_QWORD *)this + 124);
      if ((_DWORD)v90)
      {
        v92 = 72 * v90;
        v93 = (_QWORD *)(v91 + 24);
        do
        {
          if (*(v93 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v94 = (_QWORD *)*(v93 - 2);
            if (v93 != v94)
              free(v94);
          }
          v93 += 9;
          v92 -= 72;
        }
        while (v92);
        v91 = *v112;
      }
      MEMORY[0x1CAA32FB4](v91, 8);
      v95 = DWORD2(v114);
      *((_DWORD *)this + 252) = DWORD2(v114);
      if ((_DWORD)v95)
      {
        *((_QWORD *)this + 124) = operator new(72 * v95, (std::align_val_t)8uLL);
        *((_QWORD *)this + 125) = v114;
        v96 = *((unsigned int *)this + 252);
        if ((_DWORD)v96)
        {
          v97 = 0;
          for (i = 0; i < v96; ++i)
          {
            v99 = *v112;
            v100 = v113;
            v101 = *(_QWORD *)(v113 + v97);
            *(_QWORD *)(*v112 + v97) = v101;
            if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              *(_QWORD *)(v99 + v97 + 8) = v99 + v97 + 24;
              v102 = v100 + v97;
              *(_QWORD *)(v99 + v97 + 16) = 0x600000000;
              if (*(_DWORD *)(v102 + 16))
              {
                llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v99 + v97 + 8, v102 + 8);
                v96 = *((unsigned int *)this + 252);
              }
            }
            v97 += 72;
          }
        }
      }
      else
      {
        *v112 = 0;
        v112[1] = 0;
      }
    }
    v27 = 0;
    v4 = (_QWORD *)((char *)v4 + v4[2]);
LABEL_118:
    sub_1C5AB8D70(&v113);
    v3 = (uint64_t *)v110;
LABEL_119:
    if (v127 != (char *)v129)
      free(v127);
  }
  while (!v27);
}

void llvm::memprof::RawMemProfReader::symbolizeAndFilterStackFrames(llvm::memprof::RawMemProfReader *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  void **v29;
  _QWORD *v30;
  int v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  _BYTE *v38;
  void **v39;
  __int128 v40;
  _BYTE *v41;
  void **v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  size_t v51;
  char v52;
  BOOL v53;
  void *v54;
  size_t v55;
  size_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  char *v67;
  int *v68;
  char v69;
  int v70;
  int *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t GUID;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  int v87;
  BOOL v88;
  int v89;
  unint64_t *v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  int v110;
  char *v111;
  uint64_t v112;
  void **v113;
  char *v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *i;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  int v139;
  void **v140;
  void **v141;
  _QWORD *v142;
  char *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t *v171;
  unint64_t *v172;
  char *v173;
  unint64_t *v174;
  char *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[2];
  unsigned int v180;
  uint64_t v181[2];
  _QWORD v182[2];
  unsigned __int8 v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[544];
  void *v187;
  uint64_t v188;
  _WORD v189[272];
  char v190;
  void **v191;
  uint64_t v192;
  _QWORD v193[8];

  v193[6] = *MEMORY[0x1E0C80C00];
  v191 = (void **)v193;
  v192 = 0x600000000;
  v179[0] = 0;
  v179[1] = 0;
  v180 = 0;
  v3 = *((_DWORD *)this + 250);
  v4 = (unint64_t *)*((_QWORD *)this + 124);
  v5 = *((unsigned int *)this + 252);
  v6 = &v4[9 * v5];
  if (v3)
  {
    if ((_DWORD)v5)
    {
      v7 = 72 * v5;
      v8 = v4;
      while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v8 += 9;
        v7 -= 72;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = v4;
    }
  }
  else
  {
LABEL_6:
    v8 = &v4[9 * v5];
  }
  v172 = &v4[9 * v5];
  if (v8 == v172)
    goto LABEL_247;
  v177 = (uint64_t)this + 1016;
  v9 = (char *)v189;
  v10 = v186;
  v169 = (uint64_t *)((char *)this + 1040);
  v171 = &v4[9 * v5];
  v173 = (char *)v189;
  v175 = v186;
  do
  {
    v11 = (uint64_t *)v8[1];
    v12 = *((unsigned int *)v8 + 4);
    if (!(_DWORD)v12)
    {
      v122 = (uint64_t *)v8[1];
      goto LABEL_186;
    }
    v13 = &v11[v12];
    v174 = v8;
    v176 = v13;
    do
    {
      v178 = 0;
      v14 = *v11;
      v178 = *v11;
      v15 = *((_DWORD *)this + 258);
      if (v15)
      {
        v16 = *((_QWORD *)this + 127);
        v17 = v15 - 1;
        v18 = v17 & (37 * v14);
        v19 = *(_QWORD *)(v16 + 72 * v18);
        if (v14 == v19)
          goto LABEL_170;
        v20 = 1;
        while (v19 != -1)
        {
          v21 = v18 + v20++;
          v18 = v21 & v17;
          v19 = *(_QWORD *)(v16 + 72 * v18);
          if (v14 == v19)
            goto LABEL_170;
        }
      }
      if (v180)
      {
        LODWORD(v22) = (v180 - 1) & (37 * v14);
        v23 = (uint64_t *)(v179[0] + 8 * v22);
        v24 = *v23;
        if (*v23 == v14)
          goto LABEL_25;
        v25 = 1;
        while (v24 != -1)
        {
          v26 = v22 + v25++;
          v22 = v26 & (v180 - 1);
          v24 = *(_QWORD *)(v179[0] + 8 * v22);
          if (v24 == v14)
          {
            v23 = (uint64_t *)(v179[0] + 8 * v22);
            goto LABEL_25;
          }
        }
      }
      v23 = (uint64_t *)(v179[0] + 8 * v180);
LABEL_25:
      if ((uint64_t *)(v179[0] + 8 * v180) != v23)
        goto LABEL_170;
      (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 24))(&v184);
      v190 &= ~1u;
      v187 = v9;
      v188 = 0x400000000;
      if ((_DWORD)v185)
      {
        sub_1C5AB9378((uint64_t)&v187, (uint64_t)&v184);
        v27 = (char *)v184;
        if (!(_DWORD)v185)
          goto LABEL_37;
        v28 = 136 * v185;
        do
        {
          v29 = (void **)&v27[v28];
          if (v27[v28 - 65] < 0)
            operator delete(*(v29 - 11));
          if (*((char *)v29 - 89) < 0)
            operator delete(*(void **)&v27[v28 - 112]);
          if (v27[v28 - 113] < 0)
            operator delete(*(v29 - 17));
          v28 -= 136;
        }
        while (v28);
      }
      v27 = (char *)v184;
LABEL_37:
      if (v27 != v10)
        free(v27);
      if ((v190 & 1) != 0)
      {
        *a2 = v187;
        goto LABEL_251;
      }
      v184 = v10;
      v185 = 0x400000000;
      v30 = v10;
      v31 = v188;
      if (!(_DWORD)v188)
        goto LABEL_58;
      if (v188 <= 4)
      {
        v32 = (char *)v187;
        v33 = (char *)v187 + 136 * v188;
        v30 = v10;
LABEL_45:
        v34 = 0;
        do
        {
          v35 = (char *)&v30[v34 / 8];
          v36 = &v32[v34];
          if (v32[v34 + 23] < 0)
          {
            sub_1C47EBC30(v35, *(void **)v36, *((_QWORD *)v36 + 1));
          }
          else
          {
            v37 = *(_OWORD *)v36;
            *((_QWORD *)v35 + 2) = *((_QWORD *)v36 + 2);
            *(_OWORD *)v35 = v37;
          }
          v38 = &v30[v34 / 8 + 3];
          v39 = (void **)&v32[v34 + 24];
          if (v32[v34 + 47] < 0)
          {
            sub_1C47EBC30(v38, *v39, *(_QWORD *)&v32[v34 + 32]);
          }
          else
          {
            v40 = *(_OWORD *)v39;
            v30[v34 / 8 + 5] = *(_QWORD *)&v32[v34 + 40];
            *(_OWORD *)v38 = v40;
          }
          v41 = &v30[v34 / 8 + 6];
          v42 = (void **)&v32[v34 + 48];
          if (v32[v34 + 71] < 0)
          {
            sub_1C47EBC30(v41, *v42, *(_QWORD *)&v32[v34 + 56]);
          }
          else
          {
            v43 = *(_OWORD *)v42;
            v30[v34 / 8 + 8] = *(_QWORD *)&v32[v34 + 64];
            *(_OWORD *)v41 = v43;
          }
          v44 = (char *)&v30[v34 / 8];
          v45 = *(_OWORD *)&v32[v34 + 72];
          v46 = *(_OWORD *)&v32[v34 + 88];
          v47 = *(_OWORD *)&v32[v34 + 104];
          *(_OWORD *)(v44 + 116) = *(_OWORD *)&v32[v34 + 116];
          *(_OWORD *)(v44 + 104) = v47;
          *(_OWORD *)(v44 + 88) = v46;
          *(_OWORD *)(v44 + 72) = v45;
          v34 += 136;
        }
        while (&v32[v34] != v33);
        v30 = v184;
        goto LABEL_57;
      }
      sub_1C548D43C((uint64_t)&v184, v188);
      v30 = v184;
      if ((_DWORD)v188)
      {
        v32 = (char *)v187;
        v33 = (char *)v187 + 136 * v188;
        goto LABEL_45;
      }
LABEL_57:
      LODWORD(v185) = v31;
LABEL_58:
      v48 = *((unsigned __int8 *)v30 + 47);
      if ((v48 & 0x80u) == 0)
        v49 = v48 & 0x7F;
      else
        v49 = v30[4];
      if (v49 == 9)
      {
        v50 = v30 + 3;
        if ((v48 & 0x80) != 0)
        {
          v50 = (_QWORD *)*v50;
          v48 = v30[4];
        }
        v51 = v48 >= 9 ? 9 : v48;
        if (!memcmp(v50, "<invalid>", v51) && v48 == 9)
          goto LABEL_172;
      }
      v52 = *((_BYTE *)v30 + 23);
      v53 = v52 < 0;
      if (v52 >= 0)
        v54 = v30;
      else
        v54 = (void *)*v30;
      v55 = v52 & 0x7F;
      if (v53)
        v56 = v30[1];
      else
        v56 = v55;
      llvm::sys::path::convert_to_slash(v54, v56, 0, (uint64_t)v182);
      v57 = (char)v183;
      v59 = (void *)v182[0];
      v58 = v182[1];
      v60 = v182;
      if ((v183 & 0x80u) == 0)
        v58 = v183;
      else
        v60 = (_QWORD *)v182[0];
      v181[0] = (uint64_t)v60;
      v181[1] = v58;
      v61 = llvm::StringRef::find(v181, "memprof/memprof_", 0x10uLL, 0);
      if (v57 < 0)
        operator delete(v59);
      if (v61 != -1)
      {
LABEL_172:
        sub_1C61A7854((uint64_t)v179, &v178, (uint64_t)v182);
        goto LABEL_141;
      }
      v62 = v185;
      if (!(_DWORD)v185)
      {
        v111 = (char *)v184;
        v10 = v175;
        goto LABEL_152;
      }
      v63 = 0;
      v64 = v185 - 1;
      do
      {
        v65 = (char *)v184 + 136 * v63;
        v68 = (int *)*((_QWORD *)v65 + 3);
        v67 = v65 + 24;
        v66 = v68;
        v69 = v67[23];
        v70 = v69;
        if (v69 >= 0)
          v71 = (int *)v67;
        else
          v71 = v66;
        v72 = v69 & 0x7F;
        if (v70 >= 0)
          v73 = v72;
        else
          v73 = *((_QWORD *)v67 + 1);
        GUID = llvm::memprof::IndexedMemProfRecord::getGUID(v71, v73);
        v75 = *((unsigned int *)v67 + 19);
        v76 = (*((_DWORD *)v67 + 18) - *((_DWORD *)v67 + 20));
        v77 = (((GUID - 0x61C8864680B583EBLL) << 6)
             - 0x61C8864680B583EBLL
             + ((unint64_t)(GUID - 0x61C8864680B583EBLL) >> 2)
             + v76) ^ (GUID - 0x61C8864680B583EBLL);
        v78 = (v75 - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
        if (v63 == v64)
          v79 = 0x9E3779B97F4A7C15;
        else
          v79 = 0x9E3779B97F4A7C16;
        v80 = (v79 + (v78 << 6) + (v78 >> 2)) ^ v78;
        v81 = *((_DWORD *)this + 264);
        if (v81)
        {
          v82 = *((_QWORD *)this + 130);
          v83 = (37 * (_DWORD)v80) & (v81 - 1);
          v84 = (unint64_t *)(v82 + 32 * v83);
          v85 = *v84;
          if (v80 == *v84)
            goto LABEL_110;
          v86 = 0;
          v87 = 1;
          while (v85 != -1)
          {
            if (v86)
              v88 = 0;
            else
              v88 = v85 == -2;
            if (v88)
              v86 = v84;
            v89 = v83 + v87++;
            v83 = v89 & (v81 - 1);
            v84 = (unint64_t *)(v82 + 32 * v83);
            v85 = *v84;
            if (v80 == *v84)
              goto LABEL_110;
          }
          if (v86)
            v90 = v86;
          else
            v90 = v84;
        }
        else
        {
          v90 = 0;
        }
        v91 = *((_DWORD *)this + 262);
        if (4 * v91 + 4 >= 3 * v81)
        {
          sub_1C5AB9860(v169, 2 * v81);
          v96 = *((_QWORD *)this + 130);
          v97 = *((_DWORD *)this + 264) - 1;
          v98 = v97 & (37 * v80);
          v90 = (unint64_t *)(v96 + 32 * v98);
          v99 = *v90;
          if (v80 == *v90)
            goto LABEL_128;
          v100 = 0;
          v101 = 1;
          while (v99 != -1)
          {
            if (v100)
              v102 = 0;
            else
              v102 = v99 == -2;
            if (v102)
              v100 = v90;
            v103 = v98 + v101++;
            v98 = v103 & v97;
            v90 = (unint64_t *)(v96 + 32 * v98);
            v99 = *v90;
            if (v80 == *v90)
              goto LABEL_128;
          }
LABEL_138:
          if (v100)
            v90 = v100;
          goto LABEL_106;
        }
        if (v81 + ~v91 - *((_DWORD *)this + 263) <= v81 >> 3)
        {
          sub_1C5AB9860(v169, v81);
          v104 = *((_QWORD *)this + 130);
          v105 = *((_DWORD *)this + 264) - 1;
          v106 = v105 & (37 * v80);
          v90 = (unint64_t *)(v104 + 32 * v106);
          v107 = *v90;
          if (v80 == *v90)
          {
LABEL_128:
            v92 = v80;
            goto LABEL_107;
          }
          v100 = 0;
          v108 = 1;
          while (v107 != -1)
          {
            if (v100)
              v109 = 0;
            else
              v109 = v107 == -2;
            if (v109)
              v100 = v90;
            v110 = v106 + v108++;
            v106 = v110 & v105;
            v90 = (unint64_t *)(v104 + 32 * v106);
            v107 = *v90;
            if (v80 == *v90)
              goto LABEL_128;
          }
          goto LABEL_138;
        }
LABEL_106:
        v92 = *v90;
LABEL_107:
        ++*((_DWORD *)this + 262);
        if (v92 != -1)
          --*((_DWORD *)this + 263);
        *v90 = v80;
        v90[1] = GUID;
        *((_DWORD *)v90 + 4) = v76;
        *((_DWORD *)v90 + 5) = v75;
        *((_BYTE *)v90 + 24) = v63 != v64;
LABEL_110:
        sub_1C5AB8DE4(v177, &v178);
        v94 = v93;
        v95 = *(unsigned int *)(v93 + 16);
        if (v95 >= *(unsigned int *)(v93 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v93 + 8, v93 + 24, v95 + 1, 8);
          v95 = *(unsigned int *)(v94 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v95) = v80;
        ++*(_DWORD *)(v94 + 16);
        ++v63;
      }
      while (v63 != v62);
      v9 = v173;
      v8 = v174;
LABEL_141:
      v111 = (char *)v184;
      v10 = v175;
      if ((_DWORD)v185)
      {
        v112 = 136 * v185;
        do
        {
          v113 = (void **)&v111[v112];
          if (v111[v112 - 65] < 0)
            operator delete(*(v113 - 11));
          if (*((char *)v113 - 89) < 0)
            operator delete(*(void **)&v111[v112 - 112]);
          if (v111[v112 - 113] < 0)
            operator delete(*(v113 - 17));
          v112 -= 136;
        }
        while (v112);
        v111 = (char *)v184;
      }
LABEL_152:
      if (v111 != v10)
        free(v111);
      v114 = (char *)v187;
      if ((v190 & 1) != 0)
      {
        v187 = 0;
        if (v114)
          (*(void (**)(char *))(*(_QWORD *)v114 + 8))(v114);
      }
      else
      {
        if ((_DWORD)v188)
        {
          v115 = 136 * v188;
          do
          {
            v116 = (void **)&v114[v115];
            if (v114[v115 - 65] < 0)
              operator delete(*(v116 - 11));
            if (*((char *)v116 - 89) < 0)
              operator delete(*(void **)&v114[v115 - 112]);
            if (v114[v115 - 113] < 0)
              operator delete(*(v116 - 17));
            v115 -= 136;
          }
          while (v115);
          v114 = (char *)v187;
        }
        if (v114 != v9)
          free(v114);
      }
      v13 = v176;
LABEL_170:
      ++v11;
    }
    while (v11 != v13);
    v11 = (uint64_t *)v8[1];
    v117 = *((unsigned int *)v8 + 4);
    if (!(_DWORD)v117)
    {
      v122 = (uint64_t *)v8[1];
      v6 = v171;
      goto LABEL_186;
    }
    v118 = &v11[v117];
    v119 = v179[0];
    v120 = v179[0] + 8 * v180;
    v121 = v180 - 1;
    v122 = (uint64_t *)v8[1];
    v6 = v171;
    while (2)
    {
      if (v180)
      {
        LODWORD(v123) = v121 & (37 * *v122);
        v124 = (uint64_t *)(v179[0] + 8 * v123);
        v125 = *v124;
        if (*v124 != *v122)
        {
          v126 = 1;
          do
          {
            if (v125 == -1)
              goto LABEL_178;
            v127 = v123 + v126++;
            v123 = v127 & v121;
            v125 = *(_QWORD *)(v179[0] + 8 * v123);
          }
          while (v125 != *v122);
          v124 = (uint64_t *)(v179[0] + 8 * v123);
        }
        if ((uint64_t *)v120 != v124)
        {
          for (i = v122 + 1; ; ++i)
          {
            if (i == v118)
              goto LABEL_186;
            v134 = *i;
            LODWORD(v135) = (37 * *i) & v121;
            v136 = (uint64_t *)(v119 + 8 * v135);
            v137 = *v136;
            if (*v136 == *i)
            {
LABEL_200:
              if ((uint64_t *)v120 != v136)
                continue;
            }
            else
            {
              v138 = 1;
              while (v137 != -1)
              {
                v139 = v135 + v138++;
                v135 = v139 & v121;
                v137 = *(_QWORD *)(v119 + 8 * v135);
                if (v137 == v134)
                {
                  v136 = (uint64_t *)(v119 + 8 * v135);
                  goto LABEL_200;
                }
              }
            }
            *v122++ = v134;
          }
        }
      }
LABEL_178:
      if (++v122 != v118)
        continue;
      break;
    }
    v122 = v118;
LABEL_186:
    v128 = (unint64_t)((char *)v122 - (char *)v11) >> 3;
    *((_DWORD *)v8 + 4) = v128;
    if (!(_DWORD)v128)
    {
      v129 = (void *)*v8;
      v130 = v192;
      if (v192 >= (unint64_t)HIDWORD(v192))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v191, (uint64_t)v193, v192 + 1, 8);
        v6 = v171;
        v130 = v192;
      }
      v191[v130] = v129;
      LODWORD(v192) = v192 + 1;
    }
    v131 = v8 + 9;
    while (v131 != v6)
    {
      v132 = *v131;
      v131 += 9;
      if (v132 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = v131 - 9;
        goto LABEL_195;
      }
    }
    v8 = v6;
LABEL_195:
    ;
  }
  while (v8 != v172);
  if ((_DWORD)v192)
  {
    v140 = v191;
    v141 = &v191[v192];
    do
    {
      v184 = *v140;
      v187 = 0;
      if (sub_1C5AB8ECC(*((_QWORD *)this + 124), *((_DWORD *)this + 252), (uint64_t)v184, &v187))
      {
        v142 = v187;
        v143 = (char *)*((_QWORD *)v187 + 1);
        if (v143 != (char *)v187 + 24)
          free(v143);
        *v142 = -2;
        *((int32x2_t *)this + 125) = vadd_s32(*(int32x2_t *)((char *)this + 1000), (int32x2_t)0x1FFFFFFFFLL);
      }
      v144 = sub_1C5309DE0((uint64_t *)this + 118, &v184);
      v145 = *((_QWORD *)this + 118);
      v146 = *((unsigned int *)this + 240);
      if ((uint64_t *)(v145 + 16 * v146) != v144)
      {
        v147 = (_QWORD *)(*((_QWORD *)this + 121) + 112 * *((unsigned int *)v144 + 2));
        v148 = (_QWORD *)*((_QWORD *)this + 122);
        if (v147 != v148)
        {
          if ((_DWORD)v146)
          {
            v149 = v146 - 1;
            LODWORD(v146) = (37 * *v147) & (v146 - 1);
            v150 = (uint64_t *)(v145 + 16 * v146);
            v151 = *v150;
            if (*v150 == *v147)
            {
LABEL_218:
              *v150 = -2;
              *((int32x2_t *)this + 119) = vadd_s32(*(int32x2_t *)((char *)this + 952), (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v166 = 1;
              while (v151 != -1)
              {
                v167 = v146 + v166++;
                v146 = v167 & v149;
                v151 = *(_QWORD *)(v145 + 16 * v146);
                if (v151 == *v147)
                {
                  v150 = (uint64_t *)(v145 + 16 * v146);
                  goto LABEL_218;
                }
              }
            }
          }
          v152 = v147 + 14;
          if (v147 + 14 == v148)
          {
            *((_QWORD *)this + 122) = v147;
          }
          else
          {
            v153 = 0;
            do
            {
              v154 = &v152[v153];
              *(v154 - 14) = v152[v153];
              *(_OWORD *)(v154 - 7) = *(_OWORD *)&v152[v153 + 7];
              *(_OWORD *)(v154 - 5) = *(_OWORD *)&v152[v153 + 9];
              *(_OWORD *)(v154 - 3) = *(_OWORD *)&v152[v153 + 11];
              *((_DWORD *)v154 - 2) = v152[v153 + 13];
              *(_OWORD *)(v154 - 13) = *(_OWORD *)&v152[v153 + 1];
              *(_OWORD *)(v154 - 11) = *(_OWORD *)&v152[v153 + 3];
              v155 = *(_OWORD *)&v152[v153 + 5];
              v153 += 14;
              *(_OWORD *)(v154 - 9) = v155;
            }
            while (v154 + 14 != v148);
            *((_QWORD *)this + 122) = &v147[v153];
            if (v153 * 8)
            {
              v156 = *((_QWORD *)this + 118);
              v157 = *((unsigned int *)this + 240);
              v158 = (unint64_t *)(v156 + 16 * v157);
              if (*((_DWORD *)this + 238))
              {
                if (*((_DWORD *)this + 240))
                {
                  v159 = 16 * v157;
                  v160 = (unint64_t *)*((_QWORD *)this + 118);
                  while (*v160 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    v160 += 2;
                    v159 -= 16;
                    if (!v159)
                      goto LABEL_228;
                  }
                }
                else
                {
                  v160 = (unint64_t *)*((_QWORD *)this + 118);
                }
              }
              else
              {
LABEL_228:
                v160 = (unint64_t *)(v156 + 16 * v157);
              }
              v161 = (unint64_t *)(v156 + 16 * v157);
              if (v160 != v161)
              {
                v162 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v147 - *((_QWORD *)this + 121)) >> 4);
                do
                {
                  v163 = *((unsigned int *)v160 + 2);
                  if (v162 < v163)
                    *((_DWORD *)v160 + 2) = v163 - 1;
                  v164 = v160 + 2;
                  while (v164 != v158)
                  {
                    v165 = *v164;
                    v164 += 2;
                    if (v165 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v160 = v164 - 2;
                      goto LABEL_240;
                    }
                  }
                  v160 = v158;
LABEL_240:
                  ;
                }
                while (v160 != v161);
              }
            }
          }
        }
      }
      ++v140;
    }
    while (v140 != v141);
  }
LABEL_247:
  if (*((_DWORD *)this + 250))
  {
    v168 = 0;
  }
  else
  {
    v168 = operator new();
    v187 = "no entries in callstack map after symbolization";
    v189[8] = 259;
    *(_QWORD *)v168 = off_1E8192D50;
    *(_DWORD *)(v168 + 8) = 9;
    llvm::Twine::str((llvm::Twine *)&v187, (_QWORD *)(v168 + 16));
  }
  *a2 = v168;
LABEL_251:
  MEMORY[0x1CAA32FB4](v179[0], 8);
  if (v191 != v193)
    free(v191);
}

uint64_t llvm::memprof::RawMemProfReader::mapRawProfileToRecords@<X0>(llvm::memprof::RawMemProfReader *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  int v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  int v59;
  void *v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  _QWORD *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unsigned int v94;
  _QWORD *v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  const char *v120;
  char *v121;
  uint64_t v122;
  _WORD v123[84];
  void *v124;
  uint64_t v125;
  _BYTE v126[64];
  _QWORD *v127;
  uint64_t v128;
  _QWORD v129[8];

  v129[6] = *MEMORY[0x1E0C80C00];
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 121);
  v4 = &unk_1C640F000;
  v89 = (_QWORD *)*((_QWORD *)this + 122);
  if (v3 != v89)
  {
    v90 = (char *)this + 1016;
    v95 = (_QWORD *)((char *)this + 1064);
    while (1)
    {
      v5 = *v3;
      v97 = *v3;
      v6 = *((_QWORD *)this + 124);
      v7 = *((_DWORD *)this + 252);
      if (!v7)
        goto LABEL_9;
      v8 = (v7 - 1) & (37 * v5);
      v9 = (uint64_t *)(v6 + 72 * v8);
      v10 = *v9;
      if (v5 != *v9)
        break;
LABEL_10:
      if (v9 == (uint64_t *)(v6 + 72 * v7))
      {
        v120 = "memprof callstack record does not contain id: ";
        v122 = (uint64_t)&v97;
        v123[4] = 3075;
        v66 = operator new();
        *(_QWORD *)v66 = off_1E8192D50;
        *(_DWORD *)(v66 + 8) = 9;
        llvm::Twine::str((llvm::Twine *)&v120, (_QWORD *)(v66 + 16));
        *a2 = v66;
        v67 = v100;
        v61 = (uint64_t)v98;
        if (v100)
          goto LABEL_127;
        return MEMORY[0x1CAA32FB4](v61, 8);
      }
      v93 = v3;
      v127 = v129;
      v128 = 0x600000000;
      v13 = *((unsigned int *)v9 + 4);
      if (v13 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v13, 8);
        v13 = *((unsigned int *)v9 + 4);
      }
      if (v13)
      {
        v14 = 0;
        v91 = v13;
        v92 = v9[1];
        while (1)
        {
          v101 = *(char **)(v92 + 8 * v14);
          sub_1C5AB8DE4((uint64_t)v90, (uint64_t *)&v101);
          v16 = (_BYTE **)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 16);
          if ((_DWORD)v17)
            break;
          v17 = 0;
LABEL_17:
          sub_1C4DFE610((unsigned int *)&v127, *v16, &(*v16)[8 * v17]);
          if (++v14 == v91)
            goto LABEL_59;
        }
        v18 = v15;
        v19 = 0;
        while (2)
        {
          if (!(v19 | v14))
            goto LABEL_52;
          v20 = sub_1C5AB8C64(*((_QWORD *)this + 130), *((_DWORD *)this + 264), *(_QWORD *)&(*v16)[8 * v19])[1];
          v120 = 0;
          v21 = v100;
          v22 = sub_1C5AB90E0((uint64_t)v98, v100, v20, &v120);
          v23 = (unint64_t)v120;
          if (v22)
          {
            v24 = *((_QWORD *)v120 + 1);
            goto LABEL_28;
          }
          if (4 * (int)v99 + 4 >= 3 * v21)
          {
            v39 = 2 * v21;
          }
          else
          {
            if (v21 + ~(_DWORD)v99 - HIDWORD(v99) > v21 >> 3)
            {
LABEL_25:
              LODWORD(v99) = v99 + 1;
              if (*(_QWORD *)v23 != -1)
                --HIDWORD(v99);
              v24 = 0;
              *(_QWORD *)v23 = v20;
              *(_OWORD *)(v23 + 8) = 0u;
              *(_OWORD *)(v23 + 24) = 0u;
              *(_OWORD *)(v23 + 40) = 0u;
LABEL_28:
              v120 = 0;
              if ((sub_1C4EBC5C8(v24, *(_DWORD *)(v23 + 24), (uint64_t)v16, &v120) & 1) == 0)
              {
                v25 = *(_DWORD *)(v23 + 24);
                v26 = *(_DWORD *)(v23 + 16);
                if (4 * v26 + 4 >= 3 * v25)
                {
                  v25 *= 2;
                }
                else if (v25 + ~v26 - *(_DWORD *)(v23 + 20) > v25 >> 3)
                {
                  goto LABEL_31;
                }
                sub_1C4EBC65C(v23 + 8, v25);
                v120 = 0;
                sub_1C4EBC5C8(*(_QWORD *)(v23 + 8), *(_DWORD *)(v23 + 24), (uint64_t)v16, &v120);
LABEL_31:
                v27 = (char *)v120;
                ++*(_DWORD *)(v23 + 16);
                if (*(_QWORD *)v27 != -4096)
                  --*(_DWORD *)(v23 + 20);
                *(_QWORD *)v27 = v16;
                v29 = *(_QWORD **)(v23 + 40);
                v28 = *(_QWORD *)(v23 + 48);
                if ((unint64_t)v29 >= v28)
                {
                  v31 = *(_QWORD **)(v23 + 32);
                  v32 = v29 - v31;
                  v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 61)
                    abort();
                  v34 = v28 - (_QWORD)v31;
                  if (v34 >> 2 > v33)
                    v33 = v34 >> 2;
                  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                    v35 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v35 = v33;
                  if (v35)
                  {
                    if (v35 >> 61)
                      sub_1C4764EE4();
                    v36 = (char *)operator new(8 * v35);
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v37 = &v36[8 * v32];
                  *(_QWORD *)v37 = v16;
                  v30 = v37 + 8;
                  if (v29 != v31)
                  {
                    do
                    {
                      v38 = *--v29;
                      *((_QWORD *)v37 - 1) = v38;
                      v37 -= 8;
                    }
                    while (v29 != v31);
                    v29 = *(_QWORD **)(v23 + 32);
                  }
                  *(_QWORD *)(v23 + 32) = v37;
                  *(_QWORD *)(v23 + 40) = v30;
                  *(_QWORD *)(v23 + 48) = &v36[8 * v35];
                  if (v29)
                    operator delete(v29);
                }
                else
                {
                  *v29 = v16;
                  v30 = v29 + 1;
                }
                *(_QWORD *)(v23 + 40) = v30;
              }
              v17 = *(unsigned int *)(v18 + 16);
LABEL_52:
              if (++v19 >= v17)
                goto LABEL_17;
              continue;
            }
            v39 = v21;
          }
          break;
        }
        sub_1C5AB9178((uint64_t)&v98, v39);
        v120 = 0;
        sub_1C5AB90E0((uint64_t)v98, v100, v20, &v120);
        v23 = (unint64_t)v120;
        goto LABEL_25;
      }
LABEL_59:
      v40 = 0;
      v41 = (uint64_t)(v93 + 1);
      do
      {
        v42 = sub_1C5AB8C64(*((_QWORD *)this + 130), *((_DWORD *)this + 264), v127[v40]);
        v119 = 0;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v112 = 0u;
        v113 = 0;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v103 = 0u;
        v101 = (char *)&v103;
        v102 = 0x100000000;
        v114 = (char *)&v115 + 8;
        DWORD1(v115) = 1;
        v120 = (const char *)v42[1];
        v121 = (char *)v123;
        v122 = 0x100000000;
        v124 = v126;
        v125 = 0x100000000;
        v43 = sub_1C5A991C8(v95, (uint64_t)&v120);
        v44 = (char *)v124;
        if ((_DWORD)v125)
        {
          v45 = (unint64_t)v125 << 6;
          do
          {
            v46 = *(char **)&v44[v45 - 64];
            if (&v44[v45 - 48] != v46)
              free(v46);
            v45 -= 64;
          }
          while (v45);
          v44 = (char *)v124;
        }
        if (v44 != v126)
          free(v44);
        sub_1C63089E8(&v121);
        v47 = (char *)v114;
        if ((_DWORD)v115)
        {
          v48 = (unint64_t)v115 << 6;
          do
          {
            v49 = *(char **)&v47[v48 - 64];
            if (&v47[v48 - 48] != v49)
              free(v49);
            v48 -= 64;
          }
          while (v48);
          v47 = (char *)v114;
        }
        if (v47 != (char *)&v115 + 8)
          free(v47);
        sub_1C63089E8(&v101);
        v50 = *(_DWORD *)(v43 + 16);
        if (v50 >= *(_DWORD *)(v43 + 20))
        {
          v120 = 0;
          v55 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v43 + 8, 0, 168, (unint64_t *)&v120);
          v56 = &v55[168 * *(unsigned int *)(v43 + 16)];
          v57 = v127;
          v58 = &v127[v128];
          *(_QWORD *)v56 = v56 + 16;
          *((_QWORD *)v56 + 1) = 0x600000000;
          sub_1C4DFE610((unsigned int *)v56, v57, v58);
          sub_1C5AB9318((uint64_t)(v56 + 64), v41);
          sub_1C63090F8(v43 + 8, (uint64_t)v55);
          v59 = (int)v120;
          v60 = *(void **)(v43 + 8);
          if (v60 != (void *)(v43 + 24))
            free(v60);
          *(_QWORD *)(v43 + 8) = v55;
          v54 = *(_DWORD *)(v43 + 16) + 1;
          *(_DWORD *)(v43 + 20) = v59;
        }
        else
        {
          v51 = *(_QWORD *)(v43 + 8) + 168 * v50;
          v52 = v127;
          v53 = &v127[v128];
          *(_QWORD *)v51 = v51 + 16;
          *(_QWORD *)(v51 + 8) = 0x600000000;
          sub_1C4DFE610((unsigned int *)v51, v52, v53);
          sub_1C5AB9318(v51 + 64, v41);
          v54 = *(_DWORD *)(v43 + 16) + 1;
        }
        *(_DWORD *)(v43 + 16) = v54;
        ++v40;
      }
      while (*((_BYTE *)v42 + 24));
      if (v127 != v129)
        free(v127);
      v3 = v93 + 14;
      if (v93 + 14 == v89)
      {
        v61 = (uint64_t)v98;
        v62 = v100;
        if (!(_DWORD)v99)
        {
          v4 = (_QWORD *)&unk_1C640F000;
          goto LABEL_96;
        }
        v63 = &v98[7 * v100];
        if (v100)
        {
          v64 = 0;
          while (v98[v64] >= 0xFFFFFFFFFFFFFFFELL)
          {
            v64 += 7;
            if (7 * v100 == v64)
            {
              v65 = &v98[7 * v100];
              goto LABEL_99;
            }
          }
          v65 = &v98[v64];
        }
        else
        {
          v65 = v98;
        }
LABEL_99:
        v4 = &unk_1C640F000;
        goto LABEL_100;
      }
    }
    v11 = 1;
    while (v10 != -1)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = (uint64_t *)(v6 + 72 * v8);
      v10 = *v9;
      if (v5 == *v9)
        goto LABEL_10;
    }
LABEL_9:
    v9 = (uint64_t *)(v6 + 72 * v7);
    goto LABEL_10;
  }
  v62 = 0;
  v61 = 0;
LABEL_96:
  v65 = (unint64_t *)(v61 + 56 * v62);
  v63 = v65;
LABEL_100:
  v94 = v62;
  v96 = (unint64_t *)(v61 + 56 * v62);
  if (v65 != v96)
  {
    v68 = (char *)&v115 + 8;
    v69 = v4[231];
    do
    {
      v70 = (const char *)*v65;
      v119 = 0;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v112 = 0u;
      v113 = 0;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      v101 = (char *)&v103;
      v102 = v69;
      v114 = v68;
      DWORD1(v115) = 1;
      v120 = v70;
      v121 = (char *)v123;
      v122 = v69;
      v124 = v126;
      v125 = v69;
      v71 = sub_1C5A991C8((_QWORD *)this + 133, (uint64_t)&v120);
      v72 = (char *)v124;
      if ((_DWORD)v125)
      {
        v73 = (unint64_t)v125 << 6;
        do
        {
          v74 = *(char **)&v72[v73 - 64];
          if (&v72[v73 - 48] != v74)
            free(v74);
          v73 -= 64;
        }
        while (v73);
        v72 = (char *)v124;
      }
      if (v72 != v126)
        free(v72);
      sub_1C63089E8(&v121);
      v75 = (char *)v114;
      if ((_DWORD)v115)
      {
        v76 = (unint64_t)v115 << 6;
        do
        {
          v77 = *(char **)&v75[v76 - 64];
          if (&v75[v76 - 48] != v77)
            free(v77);
          v76 -= 64;
        }
        while (v76);
        v75 = (char *)v114;
      }
      v78 = v68;
      if (v75 != v68)
        free(v75);
      sub_1C63089E8(&v101);
      v80 = (unint64_t *)v65[4];
      v79 = (unint64_t *)v65[5];
      while (v80 != v79)
      {
        v81 = *v80++;
        sub_1C5A9F388(v71 + 192, v81);
      }
      v82 = v65 + 7;
      v68 = v78;
      while (v82 != v63)
      {
        v83 = *v82;
        v82 += 7;
        if (v83 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v65 = v82 - 7;
          goto LABEL_125;
        }
      }
      v65 = v63;
LABEL_125:
      ;
    }
    while (v65 != v96);
  }
  *a2 = 0;
  v67 = v94;
  if (v94)
  {
LABEL_127:
    v84 = 56 * v67;
    v85 = (_QWORD *)(v61 + 40);
    do
    {
      if (*(v85 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v86 = (void *)*(v85 - 1);
        if (v86)
        {
          *v85 = v86;
          operator delete(v86);
        }
        MEMORY[0x1CAA32FB4](*(v85 - 4), 8);
      }
      v85 += 7;
      v84 -= 56;
    }
    while (v84);
  }
  return MEMORY[0x1CAA32FB4](v61, 8);
}

uint64_t llvm::memprof::RawMemProfReader::getModuleOffset(llvm::memprof::RawMemProfReader *this, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C5AB846C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;

  v25 = *a2;
  v26 = 0;
  sub_1C52A0B94((uint64_t)a1, &v25, &v26, (uint64_t)&v23);
  v4 = v23;
  if (v24)
  {
    v5 = *a2;
    v7 = (uint64_t *)a1[4];
    v6 = a1[5];
    if ((unint64_t)v7 >= v6)
    {
      v11 = (uint64_t *)a1[3];
      v12 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)v11) >> 4) + 1;
      if (v12 > 0x249249249249249)
        abort();
      v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (_QWORD)v11) >> 4);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x124924924924924)
        v14 = 0x249249249249249;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0x249249249249249)
          sub_1C4764EE4();
        v15 = (char *)operator new(112 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[16 * (((char *)v7 - (char *)v11) >> 4)];
      *(_QWORD *)v16 = v5;
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      v8 = v16 + 112;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *((_DWORD *)v16 + 26) = 0;
      if (v7 != v11)
      {
        do
        {
          v17 = *((_OWORD *)v7 - 7);
          v18 = *((_OWORD *)v7 - 5);
          *((_OWORD *)v16 - 6) = *((_OWORD *)v7 - 6);
          *((_OWORD *)v16 - 5) = v18;
          *((_OWORD *)v16 - 7) = v17;
          v19 = *((_OWORD *)v7 - 4);
          v20 = *((_OWORD *)v7 - 3);
          v21 = *((_OWORD *)v7 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v7 - 2);
          *((_OWORD *)v16 - 1) = v21;
          *((_OWORD *)v16 - 4) = v19;
          *((_OWORD *)v16 - 3) = v20;
          v16 -= 112;
          v7 -= 14;
        }
        while (v7 != v11);
        v7 = (uint64_t *)a1[3];
      }
      a1[3] = v16;
      a1[4] = v8;
      a1[5] = &v15[112 * v14];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v5;
      v8 = v7 + 14;
      *(_OWORD *)(v7 + 1) = 0u;
      *(_OWORD *)(v7 + 3) = 0u;
      *(_OWORD *)(v7 + 5) = 0u;
      *(_OWORD *)(v7 + 7) = 0u;
      *(_OWORD *)(v7 + 9) = 0u;
      *(_OWORD *)(v7 + 11) = 0u;
      *((_DWORD *)v7 + 26) = 0;
    }
    a1[4] = v8;
    v10 = a1[3];
    v9 = -1227133513 * (((unint64_t)v8 - v10) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v9;
  }
  else
  {
    v9 = *(_DWORD *)(v23 + 8);
    v10 = a1[3];
  }
  return v10 + 112 * v9 + 8;
}

void llvm::memprof::RawMemProfReader::readNextRecord(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17[2];
  uint64_t v18;
  __int16 v19;
  char *v20[2];
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)a1[137];
  if ((uint64_t *)a1[136] == v4)
  {
    v8 = operator new();
    v9 = v8;
    v19 = 257;
    *(_QWORD *)v8 = off_1E8192D50;
    v10 = 21;
LABEL_10:
    *(_DWORD *)(v8 + 8) = v10;
    llvm::Twine::str((llvm::Twine *)&v16, (_QWORD *)(v8 + 16));
    *a3 = v9;
    return;
  }
  v6 = (uint64_t *)a1[139];
  if (v6 == v4)
  {
    v8 = operator new();
    v9 = v8;
    v19 = 257;
    *(_QWORD *)v8 = off_1E8192D50;
    v10 = 1;
    goto LABEL_10;
  }
  v11 = a1;
  sub_1C5A9602C(&v12, (uint64_t)(v6 + 1), (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))sub_1C5AB99E8, (uint64_t)&v11);
  v16 = *v6;
  v17[0] = (char *)&v18;
  v17[1] = (char *)0x100000000;
  if (v13)
    sub_1C5A983B8((uint64_t)v17, (uint64_t)&v12);
  v20[0] = (char *)v21;
  v20[1] = (char *)0x100000000;
  if (v15)
    sub_1C5A986E8((uint64_t)v20, (uint64_t)&v14);
  *a2 = v16;
  sub_1C5A983B8((uint64_t)(a2 + 1), (uint64_t)v17);
  sub_1C5A986E8((uint64_t)(a2 + 24), (uint64_t)v20);
  sub_1C61BE804(v20);
  sub_1C63089E8(v17);
  sub_1C61BE804(&v14);
  sub_1C63089E8(&v12);
  a1[139] += 272;
  *a3 = 0;
}

void sub_1C5AB8858(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  char *v5[2];
  _OWORD v6[10];
  uint64_t v7;
  char *v8[11];

  v8[10] = *(char **)MEMORY[0x1E0C80C00];
  llvm::memprof::RawMemProfReader::readNextRecord(*(_QWORD **)a1, (_QWORD *)(a1 + 8), (uint64_t *)&v3);
  if (v3)
  {
    v2 = v3;
    sub_1C624ABD8(&v2);
    if (v2)
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    memset(&v8[1], 0, 72);
    v7 = 0;
    v5[1] = (char *)0x100000000;
    memset(v6, 0, sizeof(v6));
    v4 = 0u;
    v5[0] = (char *)v6;
    v8[0] = (char *)&v8[2];
    HIDWORD(v8[1]) = 1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1C5A983B8(a1 + 16, (uint64_t)v5);
    sub_1C5A986E8(a1 + 200, (uint64_t)v8);
    sub_1C61BE804(v8);
    sub_1C63089E8(v5);
  }
}

llvm::raw_ostream *sub_1C5AB896C(uint64_t a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  _OWORD *v9;
  _BYTE *v10;
  _OWORD *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  v2 = this;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 7uLL)
  {
    *v4 = 0xA2D202020202020;
    v5 = *((_QWORD *)this + 4) + 8;
    *((_QWORD *)this + 4) = v5;
  }
  else
  {
    v2 = llvm::raw_ostream::write(this, "      -\n", 8uLL);
    v5 = *((_QWORD *)v2 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 8250;
    *(_OWORD *)v5 = *(_OWORD *)"        Function: ";
    *((_QWORD *)v2 + 4) += 18;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "        Function: ", 0x12uLL);
  }
  sub_1C5E21910(v2, *(_QWORD *)a1, 0, 0, 0);
  v6 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v6)
  {
    v2 = llvm::raw_ostream::write(v2, "\n", 1uLL);
    v7 = *((_QWORD *)v2 + 4);
  }
  else
  {
    *v6 = 10;
    v7 = *((_QWORD *)v2 + 4) + 1;
    *((_QWORD *)v2 + 4) = v7;
  }
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v7) > 0x13)
  {
    *(_DWORD *)(v7 + 16) = 540701797;
    *(_OWORD *)v7 = *(_OWORD *)"        LineOffset: ";
    *((_QWORD *)v2 + 4) += 20;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "        LineOffset: ", 0x14uLL);
  }
  sub_1C5E21910(v2, *(unsigned int *)(a1 + 8), 0, 0, 0);
  v8 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v8)
  {
    v2 = llvm::raw_ostream::write(v2, "\n", 1uLL);
    v9 = (_OWORD *)*((_QWORD *)v2 + 4);
  }
  else
  {
    *v8 = 10;
    v9 = (_OWORD *)(*((_QWORD *)v2 + 4) + 1);
    *((_QWORD *)v2 + 4) = v9;
  }
  if (*((_QWORD *)v2 + 3) - (_QWORD)v9 > 0xFuLL)
  {
    *v9 = *(_OWORD *)"        Column: ";
    *((_QWORD *)v2 + 4) += 16;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "        Column: ", 0x10uLL);
  }
  sub_1C5E21910(v2, *(unsigned int *)(a1 + 12), 0, 0, 0);
  v10 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v10)
  {
    v2 = llvm::raw_ostream::write(v2, "\n", 1uLL);
    v11 = (_OWORD *)*((_QWORD *)v2 + 4);
  }
  else
  {
    *v10 = 10;
    v11 = (_OWORD *)(*((_QWORD *)v2 + 4) + 1);
    *((_QWORD *)v2 + 4) = v11;
  }
  if (*((_QWORD *)v2 + 3) - (_QWORD)v11 > 0xFuLL)
  {
    *v11 = *(_OWORD *)"        Inline: ";
    *((_QWORD *)v2 + 4) += 16;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "        Inline: ", 0x10uLL);
  }
  result = sub_1C5E21910(v2, *(unsigned __int8 *)(a1 + 16), 0, 0, 0);
  v13 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v13)
    return llvm::raw_ostream::write(v2, "\n", 1uLL);
  *v13 = 10;
  ++*((_QWORD *)v2 + 4);
  return result;
}

uint64_t *sub_1C5AB8C64(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2)
  {
    v3 = a2 - 1;
    v4 = (uint64_t *)(a1 + 32 * ((37 * (_DWORD)a3) & (a2 - 1)));
    v5 = *v4;
    if (*v4 == a3)
      return v4;
    v6 = 1;
    LODWORD(v7) = (37 * a3) & v3;
    while (v5 != -1)
    {
      v8 = v7 + v6++;
      v7 = v8 & v3;
      v5 = *(_QWORD *)(a1 + 32 * v7);
      if (v5 == a3)
        return (uint64_t *)(a1 + 32 * v7);
    }
  }
  v7 = a2;
  return (uint64_t *)(a1 + 32 * v7);
}

void sub_1C5AB8CC8(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  int v5;
  char *v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;

  v9 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v9);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = v3 + 25;
    do
    {
      *((_BYTE *)v7 - 1) = 0;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      *(_QWORD *)((char *)v7 + 23) = 0;
      *(_OWORD *)((char *)v7 - 25) = *(_OWORD *)v4;
      *(_QWORD *)((char *)v7 - 9) = *((_QWORD *)v4 + 2);
      v7 += 7;
      v4 += 56;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v8 = v9;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t *sub_1C5AB8D70(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 72 * v2;
    v5 = (_QWORD *)(v3 + 24);
    do
    {
      if (*(v5 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = (_QWORD *)*(v5 - 2);
        if (v5 != v6)
          free(v6);
      }
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

double sub_1C5AB8DE4(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C5AB8ECC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C5AB8F64(a1, v8);
    v9 = 0;
    sub_1C5AB8ECC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(_QWORD *)&result = 0x600000000;
  v6[2] = 0x600000000;
  return result;
}

uint64_t sub_1C5AB8ECC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 72 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 72 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5AB8F64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -1;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 72 * v3;
      v13 = (_QWORD *)(v4 + 24);
      do
      {
        v14 = *(v13 - 3);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = 0;
          sub_1C5AB8ECC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = *(v13 - 3);
          v15[2] = 0x600000000;
          v15[1] = v15 + 3;
          v16 = (uint64_t)(v15 + 1);
          if (*((_DWORD *)v13 - 2))
            sub_1C614D378(v16, (uint64_t)(v13 - 2));
          ++*(_DWORD *)(a1 + 8);
          v17 = (_QWORD *)*(v13 - 2);
          if (v13 != v17)
            free(v17);
        }
        v13 += 9;
        v12 -= 72;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 72 * v18;
    do
    {
      *result = -1;
      result += 9;
      v19 -= 72;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1C5AB90E0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5AB9178(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -1;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 56 * v3;
      v13 = v4 + 24;
      do
      {
        v14 = *(_QWORD *)(v13 - 24);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v19 = 0;
          sub_1C5AB90E0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = *(_QWORD *)(v13 - 24);
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = v16;
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v13 - 16) = 0;
          *(_DWORD *)(v15 + 16) = *(_DWORD *)(v13 - 8);
          *(_DWORD *)(v13 - 8) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *(_DWORD *)v13;
          *(_DWORD *)v13 = v16;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          *(_QWORD *)(v15 + 48) = 0;
          *(_OWORD *)(v15 + 32) = *(_OWORD *)(v13 + 8);
          *(_QWORD *)(v15 + 48) = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v13 - 16), 8);
        }
        v13 += 56;
        v12 -= 56;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 56 * v17;
    do
    {
      *result = -1;
      result += 7;
      v18 -= 56;
    }
    while (v18);
  }
  return result;
}

__n128 sub_1C5AB9318(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 60);
  result = *(__n128 *)(a2 + 76);
  *(__n128 *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 92);
  return result;
}

uint64_t sub_1C5AB9378(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;
  __int128 v24;
  void **v25;
  __int128 v26;
  void **v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *i;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C5AB97A8((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v10 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v11 = &v4[136 * v5];
        do
        {
          if (v10[23] < 0)
            operator delete(*(void **)v10);
          v12 = *(_OWORD *)v4;
          *((_QWORD *)v10 + 2) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v10 = v12;
          v4[23] = 0;
          *v4 = 0;
          v13 = (void **)(v10 + 24);
          if (v10[47] < 0)
            operator delete(*v13);
          v14 = *(_OWORD *)(v4 + 24);
          *((_QWORD *)v10 + 5) = *((_QWORD *)v4 + 5);
          *(_OWORD *)v13 = v14;
          v4[47] = 0;
          v4[24] = 0;
          v15 = (void **)(v10 + 48);
          if (v10[71] < 0)
            operator delete(*v15);
          v16 = *((_OWORD *)v4 + 3);
          *((_QWORD *)v10 + 8) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v15 = v16;
          v4[71] = 0;
          v4[48] = 0;
          v17 = *(_OWORD *)(v4 + 72);
          v18 = *(_OWORD *)(v4 + 88);
          v19 = *(_OWORD *)(v4 + 104);
          *(_OWORD *)(v10 + 116) = *(_OWORD *)(v4 + 116);
          *(_OWORD *)(v10 + 104) = v19;
          *(_OWORD *)(v10 + 88) = v18;
          *(_OWORD *)(v10 + 72) = v17;
          v10 += 136;
          v4 += 136;
        }
        while (v4 != v11);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v20 = *(char **)a1;
      }
      else
      {
        v20 = *(char **)a1;
      }
      for (i = &v20[136 * v6]; i != v10; i -= 136)
      {
        if (*(i - 65) < 0)
          operator delete(*((void **)i - 11));
        if (*(i - 89) < 0)
          operator delete(*((void **)i - 14));
        if (*(i - 113) < 0)
          operator delete(*((void **)i - 17));
      }
      *(_DWORD *)(a1 + 8) = v5;
      v47 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v47)
      {
        v48 = *(char **)a2;
        v49 = 136 * v47;
        do
        {
          v50 = &v48[v49];
          if (v48[v49 - 65] < 0)
            operator delete(*((void **)v50 - 11));
          if (*(v50 - 89) < 0)
            operator delete(*(void **)&v48[v49 - 112]);
          if (v48[v49 - 113] < 0)
            operator delete(*((void **)v50 - 17));
          v49 -= 136;
        }
        while (v49);
      }
      goto LABEL_70;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v21 = &v4[136 * v6];
        v22 = (char *)(*(_QWORD *)a1 + 47);
        do
        {
          v23 = (void **)(v22 - 47);
          if (*(v22 - 24) < 0)
            operator delete(*v23);
          v24 = *(_OWORD *)v4;
          *(_QWORD *)(v22 - 31) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v23 = v24;
          v4[23] = 0;
          *v4 = 0;
          v25 = (void **)(v22 - 23);
          if (*v22 < 0)
            operator delete(*v25);
          v26 = *(_OWORD *)(v4 + 24);
          *(_QWORD *)(v22 - 7) = *((_QWORD *)v4 + 5);
          *(_OWORD *)v25 = v26;
          v4[47] = 0;
          v4[24] = 0;
          v27 = (void **)(v22 + 1);
          if (v22[24] < 0)
            operator delete(*v27);
          v28 = *((_OWORD *)v4 + 3);
          *(_QWORD *)(v22 + 17) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v27 = v28;
          v4[71] = 0;
          v4[48] = 0;
          v29 = *(_OWORD *)(v4 + 72);
          v30 = *(_OWORD *)(v4 + 88);
          v31 = *(_OWORD *)(v4 + 104);
          *(_OWORD *)(v22 + 69) = *(_OWORD *)(v4 + 116);
          *(_OWORD *)(v22 + 57) = v31;
          *(_OWORD *)(v22 + 41) = v30;
          *(_OWORD *)(v22 + 25) = v29;
          v22 += 136;
          v4 += 136;
        }
        while (v4 != v21);
        goto LABEL_37;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = 136 * v6;
        do
        {
          v9 = &v7[v8];
          if (v7[v8 - 65] < 0)
            operator delete(*((void **)v9 - 11));
          if (*(v9 - 89) < 0)
            operator delete(*(void **)&v7[v8 - 112]);
          if (v7[v8 - 113] < 0)
            operator delete(*((void **)v9 - 17));
          v8 -= 136;
        }
        while (v8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C548D43C(a1, v5);
    }
    v6 = 0;
LABEL_37:
    v32 = *(char **)a2;
    v33 = *(unsigned int *)(a2 + 8);
    if (v6 != v33)
    {
      v34 = &v32[136 * v33];
      v35 = *(_QWORD *)a1 + 136 * v6;
      v36 = &v32[136 * v6];
      do
      {
        v37 = *(_OWORD *)v36;
        *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
        *(_OWORD *)v35 = v37;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = 0;
        *(_QWORD *)v36 = 0;
        v38 = *(_OWORD *)(v36 + 24);
        *(_QWORD *)(v35 + 40) = *((_QWORD *)v36 + 5);
        *(_OWORD *)(v35 + 24) = v38;
        *((_QWORD *)v36 + 4) = 0;
        *((_QWORD *)v36 + 5) = 0;
        *((_QWORD *)v36 + 3) = 0;
        v39 = *((_OWORD *)v36 + 3);
        *(_QWORD *)(v35 + 64) = *((_QWORD *)v36 + 8);
        *(_OWORD *)(v35 + 48) = v39;
        *((_QWORD *)v36 + 7) = 0;
        *((_QWORD *)v36 + 8) = 0;
        *((_QWORD *)v36 + 6) = 0;
        v40 = *(_OWORD *)(v36 + 72);
        v41 = *(_OWORD *)(v36 + 88);
        v42 = *(_OWORD *)(v36 + 104);
        *(_OWORD *)(v35 + 116) = *(_OWORD *)(v36 + 116);
        *(_OWORD *)(v35 + 104) = v42;
        *(_OWORD *)(v35 + 88) = v41;
        *(_OWORD *)(v35 + 72) = v40;
        v36 += 136;
        v35 += 136;
      }
      while (v36 != v34);
      v32 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v43 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v43)
    {
      v44 = 136 * v43;
      do
      {
        v45 = &v32[v44];
        if (v32[v44 - 65] < 0)
          operator delete(*((void **)v45 - 11));
        if (*(v45 - 89) < 0)
          operator delete(*(void **)&v32[v44 - 112]);
        if (v32[v44 - 113] < 0)
          operator delete(*((void **)v45 - 17));
        v44 -= 136;
      }
      while (v44);
    }
LABEL_70:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double sub_1C5AB97A8(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 136 * v5;
    do
    {
      v7 = (void **)&v4[v6];
      if (v4[v6 - 65] < 0)
        operator delete(*(v7 - 11));
      if (*((char *)v7 - 89) < 0)
        operator delete(*(void **)&v4[v6 - 112]);
      if (v4[v6 - 113] < 0)
        operator delete(*(v7 - 17));
      v6 -= 136;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_QWORD *sub_1C5AB9860(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (37 * (_DWORD)v16) & v14;
          v18 = &result[4 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[4 * v17];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_12;
            }
            if (v20)
              v18 = v20;
          }
LABEL_12:
          *v18 = v16;
          v18[1] = v15[1];
          v18[2] = v15[2];
          *((_BYTE *)v18 + 24) = *((_BYTE *)v15 + 24);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 4;
      }
      while (v15 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 32 * v24;
    do
    {
      *result = -1;
      result += 4;
      v25 -= 32;
    }
    while (v25);
  }
  return result;
}

double sub_1C5AB99E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  double result;

  v4 = sub_1C5AB8C64(*(_QWORD *)(*(_QWORD *)a1 + 1040), *(_DWORD *)(*(_QWORD *)a1 + 1056), a2);
  *(_QWORD *)a3 = v4[1];
  result = *((double *)v4 + 2);
  *(double *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 16) = *((_BYTE *)v4 + 24);
  return result;
}

uint64_t llvm::remarks::BitstreamMetaParserHelper::BitstreamMetaParserHelper(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 96) = 0;
  return result;
}

double llvm::remarks::BitstreamRemarkParserHelper::BitstreamRemarkParserHelper(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 144) = 0x800000000;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 144) = 0x800000000;
  return result;
}

void llvm::remarks::BitstreamMetaParserHelper::parse(llvm::remarks::BitstreamMetaParserHelper *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const std::error_category *v5;
  void **v6;
  uint64_t v7;
  _OWORD *v8;
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  const std::error_category *v18;
  void **v19;
  void **v20;
  void **v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const std::error_category *v27;
  const char *v28;
  void **v29;
  uint64_t v30;
  const std::error_category *v31;
  const std::error_category *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(llvm::format_object_base *__hidden);
  const char *v41;
  const char *v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  void *__p;
  uint64_t v50;
  _QWORD v51[2];
  void (**v52)(llvm::raw_ostream *__hidden);
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  void **p_p;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  sub_1C4FF7B90(*(_QWORD *)this, 0, (uint64_t)&v45);
  if ((v46 & 1) != 0)
    goto LABEL_63;
  if (v45 != 0x800000002)
  {
    v5 = std::generic_category();
    __p = 0;
    v50 = 0;
    v51[0] = 0;
    v53 = 0;
    v57 = 0;
    v58 = 0;
    v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v59 = 0;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813E940;
    v41 = "Error while parsing %s: expecting [ENTER_SUBBLOCK, %s, ...].";
    v42 = "META_BLOCK";
    v43 = "META_BLOCK";
    goto LABEL_6;
  }
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v4, 0, 8, &v52);
  if (v52)
  {
    (*((void (**)(_QWORD))*v52 + 1))(v52);
    v5 = std::generic_category();
    __p = 0;
    v50 = 0;
    v51[0] = 0;
    v53 = 0;
    v57 = 0;
    v58 = 0;
    v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v59 = 0;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    v40 = &off_1E8132A78;
    v41 = "Error while entering %s.";
    v42 = "META_BLOCK";
LABEL_6:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v52, (uint64_t)&v40);
    v6 = p_p;
    v7 = operator new();
    v44 = 260;
    v40 = (uint64_t (**)(llvm::format_object_base *__hidden))v6;
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 92;
    *(_QWORD *)(v7 + 40) = v5;
    *(_BYTE *)(v7 + 48) = 1;
    *a2 = v7;
LABEL_7:
    v52 = off_1E81A6E70;
    if (v59 == 1 && v54)
      MEMORY[0x1CAA32F9C](v54, 0x1000C8077774924);
    if (SHIBYTE(v51[0]) < 0)
      operator delete(__p);
    goto LABEL_64;
  }
  v8 = (_OWORD *)((char *)this + 64);
  while (2)
  {
    if (!*(_DWORD *)(v4 + 32) && *(_QWORD *)(v4 + 8) <= *(_QWORD *)(v4 + 16))
    {
      v27 = std::generic_category();
      __p = 0;
      v50 = 0;
      v51[0] = 0;
      v53 = 0;
      v57 = 0;
      v58 = 0;
      v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = &__p;
      v59 = 0;
      v56 = 0;
      v28 = "Error while parsing %s: unterminated block.";
LABEL_69:
      v54 = 0;
      v55 = 0;
      v40 = &off_1E8132A78;
      v41 = v28;
      v42 = "META_BLOCK";
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v52, (uint64_t)&v40);
      v29 = p_p;
      v30 = operator new();
      v44 = 260;
      v40 = (uint64_t (**)(llvm::format_object_base *__hidden))v29;
      *(_QWORD *)v30 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v30 + 8));
      *(_QWORD *)(v30 + 32) = 92;
      *(_QWORD *)(v30 + 40) = v27;
      *(_BYTE *)(v30 + 48) = 1;
      *a2 = v30;
      goto LABEL_7;
    }
    sub_1C4FF7B90(v4, 0, (uint64_t)&v52);
    sub_1C630DC94(&v45, &v52);
    if ((v53 & 1) != 0)
    {
      v9 = v52;
      v52 = 0;
      if (v9)
        (*((void (**)(_QWORD))*v9 + 1))(v9);
    }
    if ((v46 & 1) != 0)
    {
LABEL_63:
      v25 = v45;
      v45 = 0;
      *a2 = v25;
      break;
    }
    switch((int)v45)
    {
      case 0:
      case 2:
        v27 = std::generic_category();
        __p = 0;
        v50 = 0;
        v51[0] = 0;
        v53 = 0;
        v57 = 0;
        v58 = 0;
        v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
        p_p = &__p;
        v59 = 0;
        v56 = 0;
        v28 = "Error while parsing %s: expecting records.";
        goto LABEL_69;
      case 1:
        *a2 = 0;
        break;
      case 3:
        v10 = *(_QWORD *)this;
        __p = v51;
        v50 = 0x200000000;
        v36 = 0uLL;
        llvm::BitstreamCursor::readRecord(v10, SHIDWORD(v45), (uint64_t)&__p, (unsigned __int8 **)&v36, (uint64_t)&v47);
        if ((v48 & 1) != 0)
        {
          v15 = v47;
          v47 = 0;
          *a2 = v15;
        }
        else
        {
          v11 = v47;
          switch((int)v47)
          {
            case 1:
              if ((_DWORD)v50 == 2)
              {
                v12 = __p;
                v13 = *(_QWORD *)__p;
                if (!*((_BYTE *)this + 24))
                  *((_BYTE *)this + 24) = 1;
                *((_QWORD *)this + 2) = v13;
                v14 = *((unsigned __int8 *)this + 33);
                *((_BYTE *)this + 32) = v12[1];
                if (!v14)
                  *((_BYTE *)this + 33) = 1;
                goto LABEL_49;
              }
              v35 = v8;
              v32 = std::generic_category();
              v37 = 0;
              v38 = 0;
              v53 = 0;
              v57 = 0;
              v58 = 0;
              v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              p_p = &v37;
              v59 = 0;
              v55 = 0;
              v56 = 0;
              v54 = 0;
              v39 = 0;
              v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813E940;
              v41 = "Error while parsing %s: malformed record entry (%s).";
              v42 = "BLOCK_META";
              v43 = "RECORD_META_CONTAINER_INFO";
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v52, (uint64_t)&v40);
              v20 = p_p;
              v15 = operator new();
              v44 = 260;
              v40 = (uint64_t (**)(llvm::format_object_base *__hidden))v20;
              *(_QWORD *)v15 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v15 + 8));
              *(_QWORD *)(v15 + 32) = 92;
              *(_QWORD *)(v15 + 40) = v32;
              *(_BYTE *)(v15 + 48) = 1;
              *a2 = v15;
              v52 = off_1E81A6E70;
              if (v59 == 1 && v54)
                MEMORY[0x1CAA32F9C](v54, 0x1000C8077774924);
              v8 = v35;
              if (SHIBYTE(v39) < 0)
                operator delete(v37);
              break;
            case 2:
              if ((_DWORD)v50 != 1)
              {
                v33 = v8;
                v31 = std::generic_category();
                v37 = 0;
                v38 = 0;
                v39 = 0;
                v53 = 0;
                v57 = 0;
                v58 = 0;
                v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v37;
                v59 = 0;
                v55 = 0;
                v56 = 0;
                v54 = 0;
                v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813E940;
                v41 = "Error while parsing %s: malformed record entry (%s).";
                v42 = "BLOCK_META";
                v17 = "RECORD_META_REMARK_VERSION";
                goto LABEL_41;
              }
              v16 = *((unsigned __int8 *)this + 96);
              *((_QWORD *)this + 11) = *(_QWORD *)__p;
              if (!v16)
                *((_BYTE *)this + 96) = 1;
              goto LABEL_49;
            case 3:
              if ((_DWORD)v50)
              {
                v33 = v8;
                v31 = std::generic_category();
                v37 = 0;
                v38 = 0;
                v39 = 0;
                v53 = 0;
                v57 = 0;
                v58 = 0;
                v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v37;
                v59 = 0;
                v55 = 0;
                v56 = 0;
                v54 = 0;
                v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813E940;
                v41 = "Error while parsing %s: malformed record entry (%s).";
                v42 = "BLOCK_META";
                v17 = "RECORD_META_STRTAB";
                goto LABEL_41;
              }
              v22 = *((unsigned __int8 *)this + 56);
              *(_OWORD *)((char *)this + 40) = v36;
              if (!v22)
                *((_BYTE *)this + 56) = 1;
              goto LABEL_49;
            case 4:
              if ((_DWORD)v50)
              {
                v33 = v8;
                v31 = std::generic_category();
                v37 = 0;
                v38 = 0;
                v39 = 0;
                v53 = 0;
                v57 = 0;
                v58 = 0;
                v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v37;
                v59 = 0;
                v55 = 0;
                v56 = 0;
                v54 = 0;
                v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813E940;
                v41 = "Error while parsing %s: malformed record entry (%s).";
                v42 = "BLOCK_META";
                v17 = "RECORD_META_EXTERNAL_FILE";
LABEL_41:
                v43 = v17;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v52, (uint64_t)&v40);
                v21 = p_p;
                v15 = operator new();
                v44 = 260;
                v40 = (uint64_t (**)(llvm::format_object_base *__hidden))v21;
                *(_QWORD *)v15 = off_1E81A0C88;
                llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v15 + 8));
                *(_QWORD *)(v15 + 32) = 92;
                *(_QWORD *)(v15 + 40) = v31;
                *(_BYTE *)(v15 + 48) = 1;
                *a2 = v15;
                v52 = off_1E81A6E70;
                if (v59 == 1 && v54)
                  MEMORY[0x1CAA32F9C](v54, 0x1000C8077774924);
                if (SHIBYTE(v39) < 0)
                  operator delete(v37);
                v8 = v33;
              }
              else
              {
                v23 = *((unsigned __int8 *)this + 80);
                *v8 = v36;
                if (!v23)
                  *((_BYTE *)this + 80) = 1;
LABEL_49:
                v15 = 0;
                *a2 = 0;
              }
              break;
            default:
              v34 = v8;
              v18 = std::generic_category();
              v37 = 0;
              v38 = 0;
              v53 = 0;
              v57 = 0;
              v58 = 0;
              v52 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              p_p = &v37;
              v59 = 0;
              v55 = 0;
              v56 = 0;
              v54 = 0;
              v39 = 0;
              v40 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E816A2D0;
              v41 = "Error while parsing %s: unknown record entry (%lu).";
              v42 = "BLOCK_META";
              LODWORD(v43) = v11;
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v52, (uint64_t)&v40);
              v19 = p_p;
              v15 = operator new();
              v44 = 260;
              v40 = (uint64_t (**)(llvm::format_object_base *__hidden))v19;
              *(_QWORD *)v15 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v40, (_QWORD *)(v15 + 8));
              *(_QWORD *)(v15 + 32) = 92;
              *(_QWORD *)(v15 + 40) = v18;
              *(_BYTE *)(v15 + 48) = 1;
              *a2 = v15;
              v52 = off_1E81A6E70;
              if (v59 == 1 && v54)
                MEMORY[0x1CAA32F9C](v54, 0x1000C8077774924);
              v8 = v34;
              if (SHIBYTE(v39) < 0)
                operator delete(v37);
              break;
          }
        }
        if ((v48 & 1) != 0)
        {
          v24 = v47;
          v47 = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
        if (__p != v51)
          free(__p);
        if (!v15)
          continue;
        break;
      default:
        continue;
    }
    break;
  }
LABEL_64:
  if ((v46 & 1) != 0)
  {
    v26 = v45;
    v45 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
}

void llvm::remarks::BitstreamRemarkParserHelper::parse(llvm::remarks::BitstreamRemarkParserHelper *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const std::error_category *v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v10;
  int v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const std::error_category *v35;
  void **v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  const char *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const std::error_category *v46;
  const char *v47;
  void **v48;
  uint64_t v49;
  const std::error_category *v50;
  unsigned int *v51;
  unsigned __int8 *v52[2];
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *__p;
  const char *v57;
  const char *v58;
  const char *v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  void *v65;
  const char *v66;
  _QWORD v67[2];
  __int16 v68;
  void (**v69)(llvm::raw_ostream *__hidden);
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  void **p_p;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  sub_1C4FF7B90(*(_QWORD *)this, 0, (uint64_t)&v61);
  if ((v62 & 1) != 0)
    goto LABEL_85;
  if (v61 != 0x900000002)
  {
    v5 = std::generic_category();
    __p = 0;
    v57 = 0;
    v58 = 0;
    v70 = 0;
    v74 = 0;
    v75 = 0;
    v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v76 = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    v65 = &unk_1E813E940;
    v66 = "Error while parsing %s: expecting [ENTER_SUBBLOCK, %s, ...].";
    v67[0] = "REMARK_BLOCK";
    v67[1] = "REMARK_BLOCK";
    goto LABEL_6;
  }
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v4, 0, 9, &v69);
  if (v69)
  {
    (*((void (**)(_QWORD))*v69 + 1))(v69);
    v5 = std::generic_category();
    __p = 0;
    v57 = 0;
    v58 = 0;
    v70 = 0;
    v74 = 0;
    v75 = 0;
    v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v76 = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    v65 = &off_1E8132A78;
    v66 = "Error while entering %s.";
    v67[0] = "REMARK_BLOCK";
LABEL_6:
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v69, (uint64_t)&v65);
    v6 = p_p;
    v7 = operator new();
    v68 = 260;
    v65 = v6;
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v65, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 92;
    *(_QWORD *)(v7 + 40) = v5;
    *(_BYTE *)(v7 + 48) = 1;
    *a2 = v7;
LABEL_7:
    v69 = off_1E81A6E70;
    if (v76 == 1 && v71)
      MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    goto LABEL_86;
  }
  v8 = (unsigned int *)((char *)this + 136);
  while (2)
  {
    if (!*(_DWORD *)(v4 + 32) && *(_QWORD *)(v4 + 8) <= *(_QWORD *)(v4 + 16))
    {
      v46 = std::generic_category();
      __p = 0;
      v57 = 0;
      v58 = 0;
      v70 = 0;
      v74 = 0;
      v75 = 0;
      v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = &__p;
      v76 = 0;
      v73 = 0;
      v47 = "Error while parsing %s: unterminated block.";
LABEL_91:
      v71 = 0;
      v72 = 0;
      v65 = &off_1E8132A78;
      v66 = v47;
      v67[0] = "REMARK_BLOCK";
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v69, (uint64_t)&v65);
      v48 = p_p;
      v49 = operator new();
      v68 = 260;
      v65 = v48;
      *(_QWORD *)v49 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v65, (_QWORD *)(v49 + 8));
      *(_QWORD *)(v49 + 32) = 92;
      *(_QWORD *)(v49 + 40) = v46;
      *(_BYTE *)(v49 + 48) = 1;
      *a2 = v49;
      goto LABEL_7;
    }
    sub_1C4FF7B90(v4, 0, (uint64_t)&v69);
    sub_1C630DC94(&v61, &v69);
    if ((v70 & 1) != 0)
    {
      v9 = v69;
      v69 = 0;
      if (v9)
        (*((void (**)(_QWORD))*v9 + 1))(v9);
    }
    if ((v62 & 1) != 0)
    {
LABEL_85:
      v44 = v61;
      v61 = 0;
      *a2 = v44;
      break;
    }
    switch((int)v61)
    {
      case 0:
      case 2:
        v46 = std::generic_category();
        __p = 0;
        v57 = 0;
        v58 = 0;
        v70 = 0;
        v74 = 0;
        v75 = 0;
        v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
        p_p = &__p;
        v76 = 0;
        v73 = 0;
        v47 = "Error while parsing %s: expecting records.";
        goto LABEL_91;
      case 1:
        *a2 = 0;
        break;
      case 3:
        v10 = *(_QWORD *)this;
        v65 = v67;
        v66 = (const char *)0x500000000;
        v52[0] = 0;
        v52[1] = 0;
        llvm::BitstreamCursor::readRecord(v10, SHIDWORD(v61), (uint64_t)&v65, v52, (uint64_t)&v63);
        if ((v64 & 1) != 0)
        {
          v17 = v63;
          v63 = 0;
          *a2 = v17;
        }
        else
        {
          v11 = v63;
          switch((int)v63)
          {
            case 5:
              if ((_DWORD)v66 != 4)
              {
                v51 = v8;
                v50 = std::generic_category();
                v53 = 0;
                v54 = 0;
                v70 = 0;
                v74 = 0;
                v75 = 0;
                v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v53;
                v76 = 0;
                v72 = 0;
                v73 = 0;
                v71 = 0;
                v55 = 0;
                __p = &unk_1E813E940;
                v57 = "Error while parsing %s: malformed record entry (%s).";
                v58 = "BLOCK_REMARK";
                v41 = "RECORD_REMARK_HEADER";
                goto LABEL_70;
              }
              v12 = v65;
              v13 = *(_BYTE *)v65;
              if (!*((_BYTE *)this + 9))
                *((_BYTE *)this + 9) = 1;
              *((_BYTE *)this + 8) = v13;
              v14 = v12[1];
              if (!*((_BYTE *)this + 24))
                *((_BYTE *)this + 24) = 1;
              *((_QWORD *)this + 2) = v14;
              v15 = v12[2];
              if (!*((_BYTE *)this + 40))
                *((_BYTE *)this + 40) = 1;
              *((_QWORD *)this + 4) = v15;
              v16 = *((unsigned __int8 *)this + 56);
              *((_QWORD *)this + 6) = v12[3];
              if (!v16)
                *((_BYTE *)this + 56) = 1;
              goto LABEL_64;
            case 6:
              if ((_DWORD)v66 != 3)
              {
                v51 = v8;
                v50 = std::generic_category();
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v70 = 0;
                v74 = 0;
                v75 = 0;
                v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v53;
                v76 = 0;
                v72 = 0;
                v73 = 0;
                v71 = 0;
                __p = &unk_1E813E940;
                v57 = "Error while parsing %s: malformed record entry (%s).";
                v58 = "BLOCK_REMARK";
                v41 = "RECORD_REMARK_DEBUG_LOC";
                goto LABEL_70;
              }
              v37 = v65;
              v38 = *(_QWORD *)v65;
              if (!*((_BYTE *)this + 72))
                *((_BYTE *)this + 72) = 1;
              *((_QWORD *)this + 8) = v38;
              v39 = v37[2];
              if (!*((_BYTE *)this + 84))
                *((_BYTE *)this + 84) = 1;
              *((_DWORD *)this + 20) = v39;
              v40 = *((unsigned __int8 *)this + 92);
              *((_DWORD *)this + 22) = *((_QWORD *)v37 + 2);
              if (!v40)
                *((_BYTE *)this + 92) = 1;
              goto LABEL_64;
            case 7:
              if ((_DWORD)v66 != 1)
              {
                v51 = v8;
                v50 = std::generic_category();
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v70 = 0;
                v74 = 0;
                v75 = 0;
                v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v53;
                v76 = 0;
                v72 = 0;
                v73 = 0;
                v71 = 0;
                __p = &unk_1E813E940;
                v57 = "Error while parsing %s: malformed record entry (%s).";
                v58 = "BLOCK_REMARK";
                v41 = "RECORD_REMARK_HOTNESS";
                goto LABEL_70;
              }
              v18 = *((unsigned __int8 *)this + 104);
              *((_QWORD *)this + 12) = *(_QWORD *)v65;
              if (!v18)
                *((_BYTE *)this + 104) = 1;
              goto LABEL_64;
            case 8:
              if ((_DWORD)v66 != 5)
              {
                v51 = v8;
                v50 = std::generic_category();
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v70 = 0;
                v74 = 0;
                v75 = 0;
                v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v53;
                v76 = 0;
                v72 = 0;
                v73 = 0;
                v71 = 0;
                __p = &unk_1E813E940;
                v57 = "Error while parsing %s: malformed record entry (%s).";
                v58 = "BLOCK_REMARK";
                v41 = "RECORD_REMARK_ARG_WITH_DEBUGLOC";
                goto LABEL_70;
              }
              sub_1C5ABD338(v8);
              v19 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
              v20 = *(_QWORD *)v65;
              if (!*(_BYTE *)(v19 - 56))
                *(_BYTE *)(v19 - 56) = 1;
              *(_QWORD *)(v19 - 64) = v20;
              v21 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
              v22 = *((_QWORD *)v65 + 1);
              if (!*(_BYTE *)(v21 - 40))
                *(_BYTE *)(v21 - 40) = 1;
              *(_QWORD *)(v21 - 48) = v22;
              v23 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
              v24 = *((_QWORD *)v65 + 2);
              if (!*(_BYTE *)(v23 - 24))
                *(_BYTE *)(v23 - 24) = 1;
              *(_QWORD *)(v23 - 32) = v24;
              v25 = *((_DWORD *)v65 + 6);
              v26 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
              if (!*(_BYTE *)(v26 - 12))
                *(_BYTE *)(v26 - 12) = 1;
              *(_DWORD *)(v26 - 16) = v25;
              v27 = *((_DWORD *)v65 + 8);
              v28 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
              if (!*(_BYTE *)(v28 - 4))
                *(_BYTE *)(v28 - 4) = 1;
              *(_DWORD *)(v28 - 8) = v27;
              goto LABEL_51;
            case 9:
              if ((_DWORD)v66 == 2)
              {
                sub_1C5ABD338(v8);
                v29 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
                v30 = *(_QWORD *)v65;
                if (!*(_BYTE *)(v29 - 56))
                  *(_BYTE *)(v29 - 56) = 1;
                *(_QWORD *)(v29 - 64) = v30;
                v31 = *((_QWORD *)this + 17) + ((unint64_t)*((unsigned int *)this + 36) << 6);
                v32 = *((_QWORD *)v65 + 1);
                if (!*(_BYTE *)(v31 - 40))
                  *(_BYTE *)(v31 - 40) = 1;
                *(_QWORD *)(v31 - 48) = v32;
LABEL_51:
                v33 = *((unsigned int *)this + 36);
                v34 = *((unsigned __int8 *)this + 128);
                *((_QWORD *)this + 14) = *((_QWORD *)this + 17);
                *((_QWORD *)this + 15) = v33;
                if (!v34)
                  *((_BYTE *)this + 128) = 1;
LABEL_64:
                v17 = 0;
                *a2 = 0;
              }
              else
              {
                v51 = v8;
                v50 = std::generic_category();
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v70 = 0;
                v74 = 0;
                v75 = 0;
                v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                p_p = &v53;
                v76 = 0;
                v72 = 0;
                v73 = 0;
                v71 = 0;
                __p = &unk_1E813E940;
                v57 = "Error while parsing %s: malformed record entry (%s).";
                v58 = "BLOCK_REMARK";
                v41 = "RECORD_REMARK_ARG_WITHOUT_DEBUGLOC";
LABEL_70:
                v59 = v41;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v69, (uint64_t)&__p);
                v42 = p_p;
                v17 = operator new();
                v60 = 260;
                __p = v42;
                *(_QWORD *)v17 = off_1E81A0C88;
                llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v17 + 8));
                *(_QWORD *)(v17 + 32) = 92;
                *(_QWORD *)(v17 + 40) = v50;
                *(_BYTE *)(v17 + 48) = 1;
                *a2 = v17;
                v69 = off_1E81A6E70;
                if (v76 == 1 && v71)
                  MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
                if (SHIBYTE(v55) < 0)
                  operator delete(v53);
LABEL_73:
                v8 = v51;
              }
              break;
            default:
              v51 = v8;
              v35 = std::generic_category();
              v53 = 0;
              v54 = 0;
              v70 = 0;
              v74 = 0;
              v75 = 0;
              v69 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
              p_p = &v53;
              v76 = 0;
              v72 = 0;
              v73 = 0;
              v71 = 0;
              v55 = 0;
              __p = &unk_1E816A2D0;
              v57 = "Error while parsing %s: unknown record entry (%lu).";
              v58 = "BLOCK_REMARK";
              LODWORD(v59) = v11;
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v69, (uint64_t)&__p);
              v36 = p_p;
              v17 = operator new();
              v60 = 260;
              __p = v36;
              *(_QWORD *)v17 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&__p, (_QWORD *)(v17 + 8));
              *(_QWORD *)(v17 + 32) = 92;
              *(_QWORD *)(v17 + 40) = v35;
              *(_BYTE *)(v17 + 48) = 1;
              *a2 = v17;
              v69 = off_1E81A6E70;
              if (v76 == 1 && v71)
                MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
              if (SHIBYTE(v55) < 0)
                operator delete(v53);
              goto LABEL_73;
          }
        }
        if ((v64 & 1) != 0)
        {
          v43 = v63;
          v63 = 0;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        }
        if (v65 != v67)
          free(v65);
        if (!v17)
          continue;
        break;
      default:
        continue;
    }
    break;
  }
LABEL_86:
  if ((v62 & 1) != 0)
  {
    v45 = v61;
    v61 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
}

double llvm::remarks::BitstreamParserHelper::BitstreamParserHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x200000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x200000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  return result;
}

void llvm::remarks::BitstreamParserHelper::parseMagic(llvm::remarks::BitstreamParserHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    sub_1C4FF7E04((uint64_t)this, 8u, (uint64_t)&v7);
    if ((v8 & 1) != 0)
      break;
    *((_BYTE *)&v6 + v4++) = v7;
    if (v4 == 4)
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      *(_DWORD *)a2 = v6;
      return;
    }
  }
  v5 = v7;
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v5;
}

void llvm::remarks::BitstreamParserHelper::parseBlockInfoBlock(void **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const std::error_category *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  const std::error_category *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  const std::error_category *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  const std::error_category *v30;
  char *v31;
  char *v32;
  void **v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  _BYTE *v40[2];
  uint64_t v41;
  const std::error_category *v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  sub_1C4FF7B90((uint64_t)this, 0, (uint64_t)&v45);
  if ((v46 & 1) != 0)
  {
    v5 = v45;
    v45 = 0;
    *a2 = v5;
  }
  else if ((_DWORD)v45 == 2 && HIDWORD(v45) == 0)
  {
    llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)this, 0, (uint64_t)&v41);
    if ((v44 & 1) != 0)
    {
      v22 = v41;
      v41 = 0;
      *a2 = v22;
    }
    else if (v43)
    {
      v7 = (char *)(this + 43);
      if (this + 43 != (void **)&v41)
      {
        v8 = v41;
        v9 = v42;
        v10 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v42 - v41) >> 4);
        v11 = (char *)this[43];
        if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)this[45] - v11) >> 4) >= v10)
        {
          v23 = (char *)this[44];
          if (0xCCCCCCCCCCCCCCCDLL * ((v23 - v11) >> 4) >= v10)
          {
            if ((const std::error_category *)v41 != v42)
            {
              v35 = 0;
              do
              {
                *(_DWORD *)&v11[v35] = *(_DWORD *)(v8 + v35);
                if ((char *)v8 == v11)
                {
                  std::string::operator=((std::string *)&v11[v35 + 32], (const std::string *)&v11[v35 + 32]);
                }
                else
                {
                  sub_1C4FF8630((uint64_t *)&v11[v35 + 8], *(uint64_t **)(v8 + v35 + 8), *(uint64_t **)(v8 + v35 + 16), (uint64_t)(*(_QWORD *)(v8 + v35 + 16) - *(_QWORD *)(v8 + v35 + 8)) >> 4);
                  std::string::operator=((std::string *)&v11[v35 + 32], (const std::string *)(v8 + v35 + 32));
                  sub_1C5ABD0E8((uint64_t)&v11[v35 + 56], *(_DWORD **)(v8 + v35 + 56), *(_DWORD **)(v8 + v35 + 64), (uint64_t)(*(_QWORD *)(v8 + v35 + 64) - *(_QWORD *)(v8 + v35 + 56)) >> 5);
                }
                v35 += 80;
              }
              while ((const std::error_category *)(v8 + v35) != v9);
              v23 = (char *)this[44];
              v11 += v35;
            }
            if (v23 != v11)
            {
              v36 = v23 - 72;
              do
              {
                v40[0] = v36 + 48;
                sub_1C4FF890C((void ***)v40);
                if (v36[47] < 0)
                  operator delete(*((void **)v36 + 3));
                if (*(_QWORD *)v36)
                {
                  sub_1C4FF80DC((uint64_t *)v36);
                  operator delete(*(void **)v36);
                }
                v37 = v36 - 8;
                v36 -= 80;
              }
              while (v37 != v11);
            }
            this[44] = v11;
          }
          else
          {
            v24 = (const std::error_category *)(v41 + 16 * ((v23 - v11) >> 4));
            if (v23 != v11)
            {
              v25 = 0;
              v26 = 16 * ((v23 - v11) >> 4);
              do
              {
                *(_DWORD *)&v11[v25] = *(_DWORD *)(v8 + v25);
                if ((char *)v8 == v11)
                {
                  std::string::operator=((std::string *)&v11[v25 + 32], (const std::string *)&v11[v25 + 32]);
                }
                else
                {
                  sub_1C4FF8630((uint64_t *)&v11[v25 + 8], *(uint64_t **)(v8 + v25 + 8), *(uint64_t **)(v8 + v25 + 16), (uint64_t)(*(_QWORD *)(v8 + v25 + 16) - *(_QWORD *)(v8 + v25 + 8)) >> 4);
                  std::string::operator=((std::string *)&v11[v25 + 32], (const std::string *)(v8 + v25 + 32));
                  sub_1C5ABD0E8((uint64_t)&v11[v25 + 56], *(_DWORD **)(v8 + v25 + 56), *(_DWORD **)(v8 + v25 + 64), (uint64_t)(*(_QWORD *)(v8 + v25 + 64) - *(_QWORD *)(v8 + v25 + 56)) >> 5);
                }
                v25 += 80;
              }
              while (v26 != v25);
              v11 = (char *)this[44];
              v7 = (char *)(this + 43);
            }
            v27 = v11;
            if (v24 != v9)
            {
              v28 = v7;
              v29 = 0;
              do
              {
                v30 = &v24[v29];
                v31 = &v11[v29 * 8];
                *(_DWORD *)v31 = v24[v29].__vftable;
                *((_QWORD *)v31 + 2) = 0;
                *((_QWORD *)v31 + 3) = 0;
                *(_QWORD *)&v11[v29 * 8 + 8] = 0;
                sub_1C4FF83E8(&v11[v29 * 8 + 8], &v24[v29 + 1].~error_category, &v24[v29 + 2].~error_category, ((char *)v24[v29 + 2].__vftable - (char *)v24[v29 + 1].__vftable) >> 4);
                v32 = &v11[v29 * 8 + 32];
                v33 = (void **)&v24[v29 + 4].__vftable;
                if (SHIBYTE(v24[v29 + 6].__vftable) < 0)
                {
                  sub_1C47EBC30(v32, *v33, (unint64_t)v30[5].__vftable);
                }
                else
                {
                  v34 = *(_OWORD *)v33;
                  *((std::error_category *)v31 + 6) = v30[6];
                  *(_OWORD *)v32 = v34;
                }
                *(_QWORD *)&v11[v29 * 8 + 56] = 0;
                *(_QWORD *)&v11[v29 * 8 + 64] = 0;
                *(_QWORD *)&v11[v29 * 8 + 72] = 0;
                sub_1C5ABD02C(&v11[v29 * 8 + 56], (uint64_t)v30[7].__vftable, (uint64_t)v30[8].__vftable, ((char *)v30[8].__vftable - (char *)v30[7].__vftable) >> 5);
                v29 += 10;
              }
              while (&v30[10] != v9);
              v27 = &v11[v29 * 8];
              v7 = v28;
            }
            this[44] = v27;
          }
        }
        else
        {
          sub_1C4FF8834(this + 43);
          if (v10 > 0x333333333333333)
            goto LABEL_70;
          v12 = 0x999999999999999ALL * (((_BYTE *)this[45] - (_BYTE *)this[43]) >> 4);
          if (v12 <= v10)
            v12 = v10;
          v13 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)this[45] - (_BYTE *)this[43]) >> 4) >= 0x199999999999999
              ? 0x333333333333333
              : v12;
          if (v13 > 0x333333333333333)
LABEL_70:
            abort();
          v14 = 5 * v13;
          v15 = (char *)operator new(80 * v13);
          this[43] = v15;
          this[44] = v15;
          this[45] = &v15[16 * v14];
          if ((const std::error_category *)v8 != v9)
          {
            v16 = v8 + 32;
            v17 = v15 + 32;
            do
            {
              v19 = (const std::error_category *)(v16 - 32);
              v18 = *(_DWORD *)(v16 - 32);
              *((_QWORD *)v17 - 3) = 0;
              v20 = v17 - 24;
              *((_DWORD *)v17 - 8) = v18;
              *((_QWORD *)v20 + 1) = 0;
              *((_QWORD *)v20 + 2) = 0;
              sub_1C4FF83E8((_QWORD *)v17 - 3, *(_QWORD **)(v16 - 24), *(_QWORD **)(v16 - 16), (uint64_t)(*(_QWORD *)(v16 - 16) - *(_QWORD *)(v16 - 24)) >> 4);
              if (*(char *)(v16 + 23) < 0)
              {
                sub_1C47EBC30(v17, *(void **)v16, *(_QWORD *)(v16 + 8));
              }
              else
              {
                v21 = *(_OWORD *)v16;
                *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
                *(_OWORD *)v17 = v21;
              }
              *((_QWORD *)v17 + 3) = 0;
              *((_QWORD *)v17 + 4) = 0;
              *((_QWORD *)v17 + 5) = 0;
              sub_1C5ABD02C(v17 + 24, *(_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 5);
              v16 += 80;
              v17 += 80;
            }
            while (&v19[10] != v9);
            v15 = v17 - 32;
          }
          this[44] = v15;
        }
      }
      this[42] = v7;
      *a2 = 0;
    }
    else
    {
      v40[0] = (_BYTE *)92;
      v40[1] = std::generic_category();
      v39 = "Error while parsing BLOCKINFO_BLOCK.";
      sub_1C5DF1730((_BYTE **)&v39, (uint64_t *)v40, a2);
    }
    if ((v44 & 1) != 0)
    {
      v38 = v41;
      v41 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    else if (v43)
    {
      v40[0] = &v41;
      sub_1C4FF8984((void ***)v40);
    }
  }
  else
  {
    v41 = 92;
    v42 = std::generic_category();
    v40[0] = "Error while parsing BLOCKINFO_BLOCK: expecting [ENTER_SUBBLOCK, BLOCKINFO_BLOCK, ...].";
    sub_1C5DF1730(v40, &v41, a2);
  }
  if ((v46 & 1) != 0)
  {
    v6 = v45;
    v45 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::remarks::BitstreamParserHelper::isMetaBlock(llvm::remarks::BitstreamParserHelper *this@<X0>, uint64_t a2@<X8>)
{
  sub_1C5ABB6E0(a2, (uint64_t)this);
}

void sub_1C5ABB6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  const std::error_category *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  const std::error_category *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 32);
  sub_1C4FF7B90(a2, 0, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v8 = v13;
    v13 = 0;
    goto LABEL_6;
  }
  if (!(_DWORD)v13)
  {
    v9 = std::generic_category();
    v15 = 92;
    v16 = v9;
    v12 = "Unexpected error while parsing bitstream.";
    sub_1C5DF1730((_BYTE **)&v12, &v15, &v11);
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v11;
    v11 = 0;
    goto LABEL_12;
  }
  v6 = 8 * v4 - v5;
  v7 = (_DWORD)v13 == 2 && HIDWORD(v13) == 8;
  *(_QWORD *)(a2 + 16) = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(a2 + 32) = 0;
  if ((v6 & 0x3F) != 0)
  {
    sub_1C4FF7E04(a2, v6 & 0x3F, (uint64_t)&v15);
    if ((v16 & 1) != 0)
    {
      v8 = v15;
      if (v15)
      {
LABEL_6:
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v8;
        goto LABEL_12;
      }
    }
  }
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_BYTE *)a1 = v7;
LABEL_12:
  if ((v14 & 1) != 0)
  {
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void llvm::remarks::BitstreamParserHelper::isRemarkBlock(llvm::remarks::BitstreamParserHelper *this@<X0>, uint64_t a2@<X8>)
{
  sub_1C5ABB6E0(a2, (uint64_t)this);
}

void llvm::remarks::createBitstreamParserFromMeta(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[5];
  void *__p[3];
  char *v32[2];
  _BYTE v33[288];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = 0x200000000;
  memset(__p, 0, sizeof(__p));
  v32[0] = v33;
  v32[1] = (char *)0x800000000;
  memset(&v33[256], 0, 32);
  llvm::remarks::BitstreamParserHelper::parseMagic((llvm::remarks::BitstreamParserHelper *)v30, (uint64_t)&v28);
  if ((v29 & 1) != 0)
  {
    v10 = v28;
    v28 = 0;
  }
  else
  {
    sub_1C5ABBB64((uint64_t *)&v26, &v28, 4);
    v10 = v26;
    if (!(_QWORD)v26)
    {
      v11 = *((unsigned __int8 *)a3 + 40);
      v12 = operator new();
      v13 = v12;
      v14 = (_QWORD *)(v12 + 56);
      if (v11)
      {
        *(_QWORD *)(v12 + 40) = a1;
        v15 = *((_QWORD *)a3 + 4);
        *(_OWORD *)(v12 + 376) = 0u;
        *(_OWORD *)(v12 + 392) = 0u;
        v16 = *a3;
        v17 = a3[1];
        *((_QWORD *)a3 + 3) = 0;
        *((_QWORD *)a3 + 4) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_DWORD *)(v12 + 8) = 3;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)v12 = &off_1E8193AD8;
        *(_QWORD *)(v12 + 48) = a2;
        *v14 = 0;
        *(_QWORD *)(v12 + 64) = 0;
        *(_DWORD *)(v12 + 72) = 0;
        *(_QWORD *)(v12 + 88) = 0;
        *(_QWORD *)(v12 + 96) = 0;
        *(_QWORD *)(v12 + 80) = 0;
        *(_OWORD *)(v12 + 408) = v16;
        *(_OWORD *)(v12 + 424) = v17;
        v18 = 1;
        *(_QWORD *)(v12 + 440) = v15;
      }
      else
      {
        v18 = 0;
        *(_DWORD *)(v12 + 8) = 3;
        *(_QWORD *)v12 = &off_1E8193AD8;
        *(_QWORD *)(v12 + 40) = a1;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 48) = a2;
        *v14 = 0;
        *(_QWORD *)(v12 + 64) = 0;
        *(_DWORD *)(v12 + 72) = 0;
        *(_QWORD *)(v12 + 88) = 0;
        *(_QWORD *)(v12 + 96) = 0;
        *(_QWORD *)(v12 + 80) = 0;
        *(_BYTE *)(v12 + 408) = 0;
        *(_OWORD *)(v12 + 376) = 0u;
        *(_OWORD *)(v12 + 392) = 0u;
      }
      *(_DWORD *)(v12 + 76) = 2;
      *(_QWORD *)(v12 + 104) = v12 + 120;
      *(_QWORD *)(v12 + 112) = 0x800000000;
      *(_BYTE *)(v12 + 448) = v18;
      *(_QWORD *)(v12 + 464) = 0;
      *(_QWORD *)(v12 + 472) = 0;
      *(_QWORD *)(v12 + 456) = 0;
      *(_DWORD *)(v12 + 480) = 2;
      *(_BYTE *)(v12 + 484) = 0;
      if (!*(_BYTE *)(a4 + 16))
      {
LABEL_26:
        *(_BYTE *)(a5 + 8) &= ~1u;
        *(_QWORD *)a5 = v13;
        goto LABEL_7;
      }
      v20 = *(_QWORD *)(a4 + 8);
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v21 = *(const void **)a4;
      if (v20 >= 0x17)
      {
        v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v23 = v20 | 7;
        v24 = v23 + 1;
        v22 = (__int128 *)operator new(v23 + 1);
        *((_QWORD *)&v26 + 1) = v20;
        v27 = v24 | 0x8000000000000000;
        *(_QWORD *)&v26 = v22;
      }
      else
      {
        HIBYTE(v27) = v20;
        v22 = &v26;
        if (!v20)
          goto LABEL_23;
      }
      memmove(v22, v21, v20);
LABEL_23:
      *((_BYTE *)v22 + v20) = 0;
      v25 = (void **)(v13 + 16);
      if (*(char *)(v13 + 39) < 0)
        operator delete(*v25);
      *(_OWORD *)v25 = v26;
      *(_QWORD *)(v13 + 32) = v27;
      goto LABEL_26;
    }
  }
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v10;
LABEL_7:
  if ((v29 & 1) != 0)
  {
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  *(_QWORD *)&v26 = &v33[264];
  sub_1C4FF8984((void ***)&v26);
  sub_1C4FF8A28(v32);
  if (__p[0])
  {
    sub_1C4FF80DC((uint64_t *)__p);
    operator delete(__p[0]);
  }
}

void sub_1C5ABBB64(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  const std::error_category *v5;
  void **v6;
  uint64_t v7;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  if (a3 == 4 && *a2 == 1263684946)
  {
    *a1 = 0;
  }
  else
  {
    v5 = std::generic_category();
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    v9 = 0;
    v13 = 0;
    v14 = 0;
    v8 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v16 = __p;
    v15 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v19[0] = &unk_1E813E940;
    v19[1] = "Unknown magic number: expecting %s, got %.4s.";
    v19[2] = "RMRK";
    v19[3] = a2;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, (uint64_t)v19);
    v6 = v16;
    v7 = operator new();
    v20 = 260;
    v19[0] = v6;
    *(_QWORD *)v7 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 22;
    *(_QWORD *)(v7 + 40) = v5;
    *(_BYTE *)(v7 + 48) = 1;
    *a1 = v7;
    v8 = off_1E81A6E70;
    if (v15 == 1 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
}

void llvm::remarks::BitstreamRemarkParser::next(llvm::remarks::BitstreamRemarkParser *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*((_DWORD *)this + 18) || *((_QWORD *)this + 6) > *((_QWORD *)this + 7))
  {
    if (*((_BYTE *)this + 484))
    {
LABEL_4:
      llvm::remarks::BitstreamRemarkParser::parseRemark(this, a2);
      return;
    }
    llvm::remarks::BitstreamRemarkParser::parseMeta(this, &v6);
    v4 = v6;
    if (!v6)
    {
      *((_BYTE *)this + 484) = 1;
      goto LABEL_4;
    }
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    v5 = (_QWORD *)operator new();
    *v5 = &unk_1E8193A88;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v5;
  }
}

void llvm::remarks::BitstreamRemarkParser::parseMeta(llvm::remarks::BitstreamRemarkParser *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  int v5;
  const std::error_category *v6;
  _QWORD v7[2];
  char v8;
  char v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  const char *v17;
  uint64_t v18[2];

  v4 = (char *)this + 40;
  sub_1C5ABBFB4(a2, (llvm::remarks::BitstreamRemarkParser *)((char *)this + 40));
  if (!*a2)
  {
    v7[0] = v4;
    v7[1] = (char *)this + 384;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    LOBYTE(v15) = 0;
    v16 = 0;
    llvm::remarks::BitstreamMetaParserHelper::parse((llvm::remarks::BitstreamMetaParserHelper *)v7, a2);
    if (!*a2)
    {
      llvm::remarks::BitstreamRemarkParser::processCommonMeta(this, (llvm::remarks::BitstreamMetaParserHelper *)v7, a2);
      if (!*a2)
      {
        v5 = *((_DWORD *)this + 120);
        if (v5)
        {
          if (v5 == 1)
          {
            if (v16)
            {
              *((_QWORD *)this + 59) = v15;
              *a2 = 0;
            }
            else
            {
              v6 = std::generic_category();
              v18[0] = 92;
              v18[1] = (uint64_t)v6;
              v17 = "Error while parsing BLOCK_META: missing remark version.";
              sub_1C5DF1730((_BYTE **)&v17, v18, a2);
            }
          }
          else
          {
            llvm::remarks::BitstreamRemarkParser::processStandaloneMeta(this, (llvm::remarks::BitstreamMetaParserHelper *)v7, a2);
          }
        }
        else
        {
          llvm::remarks::BitstreamRemarkParser::processSeparateRemarksMetaMeta(this, (llvm::remarks::BitstreamMetaParserHelper *)v7, a2);
        }
      }
    }
  }
}

void llvm::remarks::BitstreamRemarkParser::parseRemark(llvm::remarks::BitstreamRemarkParser *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[65];

  v26[64] = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 40;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = v26;
  v25 = 0x800000000;
  llvm::remarks::BitstreamRemarkParserHelper::parse((llvm::remarks::BitstreamRemarkParserHelper *)&v6, &v5);
  v4 = v5;
  if (v5)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    llvm::remarks::BitstreamRemarkParser::processRemark(this, (llvm::remarks::BitstreamRemarkParserHelper *)&v6, a2);
  }
  if (v24 != v26)
    free(v24);
}

void sub_1C5ABBFB4(uint64_t *a1, llvm::remarks::BitstreamParserHelper *this)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7[2];
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::remarks::BitstreamParserHelper::parseMagic(this, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v4 = v10;
    v10 = 0;
    goto LABEL_8;
  }
  sub_1C5ABBB64(a1, &v10, 4);
  if (!*a1)
  {
    llvm::remarks::BitstreamParserHelper::parseBlockInfoBlock((void **)this, a1);
    if (!*a1)
    {
      sub_1C5ABB6E0((uint64_t)&v8, (uint64_t)this);
      if ((v9 & 1) == 0)
      {
        if ((_BYTE)v8)
        {
          *a1 = 0;
        }
        else
        {
          v7[0] = 92;
          v7[1] = (uint64_t)std::generic_category();
          v6 = "Expecting META_BLOCK after the BLOCKINFO_BLOCK.";
          sub_1C5DF1730((_BYTE **)&v6, v7, a1);
        }
        goto LABEL_9;
      }
      v4 = v8;
LABEL_8:
      *a1 = v4;
    }
  }
LABEL_9:
  if ((v11 & 1) != 0)
  {
    v5 = v10;
    v10 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void llvm::remarks::BitstreamRemarkParser::processCommonMeta(llvm::remarks::BitstreamRemarkParser *this@<X0>, llvm::remarks::BitstreamMetaParserHelper *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  const std::error_category *v8;

  if (*((_BYTE *)a2 + 24))
  {
    *((_QWORD *)this + 58) = *((_QWORD *)a2 + 2);
    if (*((unsigned __int16 *)a2 + 16) >= 0x100u)
    {
      v5 = *((_WORD *)a2 + 16);
      if (v5 < 3)
      {
        *((_DWORD *)this + 120) = v5;
        *a3 = 0;
        return;
      }
      v7 = 92;
      v8 = std::generic_category();
      v4 = "Error while parsing BLOCK_META: invalid container type.";
    }
    else
    {
      v7 = 92;
      v8 = std::generic_category();
      v4 = "Error while parsing BLOCK_META: missing container type.";
    }
  }
  else
  {
    v7 = 92;
    v8 = std::generic_category();
    v4 = "Error while parsing BLOCK_META: missing container version.";
  }
  v6 = v4;
  sub_1C5DF1730((_BYTE **)&v6, &v7, a3);
}

void llvm::remarks::BitstreamRemarkParser::processStandaloneMeta(llvm::remarks::BitstreamRemarkParser *this@<X0>, llvm::remarks::BitstreamMetaParserHelper *a2@<X1>, _QWORD *a3@<X8>)
{
  const std::error_category *v6;
  __int128 v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10[2];

  v7 = *(_OWORD *)((char *)a2 + 40);
  v8 = *((_QWORD *)a2 + 7);
  sub_1C5ABC804(a3, (uint64_t)this, (uint64_t)&v7);
  if (!*a3)
  {
    if (*((_BYTE *)a2 + 96))
    {
      *((_QWORD *)this + 59) = *((_QWORD *)a2 + 11);
      *a3 = 0;
    }
    else
    {
      v6 = std::generic_category();
      v10[0] = 92;
      v10[1] = (uint64_t)v6;
      v9 = "Error while parsing BLOCK_META: missing remark version.";
      sub_1C5DF1730((_BYTE **)&v9, v10, a3);
    }
  }
}

void llvm::remarks::BitstreamRemarkParser::processSeparateRemarksFileMeta(llvm::remarks::BitstreamRemarkParser *this@<X0>, llvm::remarks::BitstreamMetaParserHelper *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v4;
  uint64_t v5[2];

  if (*((_BYTE *)a2 + 96))
  {
    *((_QWORD *)this + 59) = *((_QWORD *)a2 + 11);
    *a3 = 0;
  }
  else
  {
    v5[0] = 92;
    v5[1] = (uint64_t)std::generic_category();
    v4 = "Error while parsing BLOCK_META: missing remark version.";
    sub_1C5DF1730((_BYTE **)&v4, v5, a3);
  }
}

void llvm::remarks::BitstreamRemarkParser::processSeparateRemarksMetaMeta(llvm::remarks::BitstreamRemarkParser *this@<X0>, llvm::remarks::BitstreamMetaParserHelper *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = *(_OWORD *)((char *)a2 + 40);
  v9 = *((_QWORD *)a2 + 7);
  sub_1C5ABC804(a3, (uint64_t)this, (uint64_t)&v8);
  if (!*a3)
  {
    v6 = *((_OWORD *)a2 + 4);
    v7 = *((_QWORD *)a2 + 10);
    llvm::remarks::BitstreamRemarkParser::processExternalFilePath((uint64_t)this, (uint64_t)&v6, a3);
  }
}

void llvm::remarks::BitstreamRemarkParser::processExternalFilePath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v6;
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::error_code v13;
  llvm *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _BYTE *v18;
  _QWORD *v19;
  const std::error_category *v20;
  const char *v21;
  const std::error_category *v22;
  _BYTE *v23;
  void **v24;
  uint64_t v25;
  const std::error_category *v26;
  void *__p[2];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  const std::error_category *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  void **v38;
  _BYTE *v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  char *v47[2];
  char v48;
  uint64_t v49;
  char v50;
  _QWORD v51[4];
  llvm *v52[2];
  char v53;
  _BYTE v54[24];
  _QWORD v55[11];

  v55[10] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_QWORD *)&v41 = 92;
    *((_QWORD *)&v41 + 1) = std::generic_category();
    *(_QWORD *)v54 = "Error while parsing BLOCK_META: missing external file path.";
    sub_1C5DF1730((_BYTE **)v54, (uint64_t *)&v41, a3);
    return;
  }
  v6 = *(_BYTE *)(a1 + 39);
  if (v6 >= 0)
    v7 = (const void *)(a1 + 16);
  else
    v7 = *(const void **)(a1 + 16);
  if (v6 >= 0)
    v8 = v6 & 0x7F;
  else
    v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v54 = v55;
  *(_OWORD *)&v54[8] = xmmword_1C8667FC0;
  if (v8 >= 0x51)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v54, v55, v8, 1);
    v11 = *(_QWORD **)v54;
    v9 = *(_QWORD *)&v54[8];
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v55;
    if (!v8)
      goto LABEL_11;
  }
  memcpy((char *)v11 + v9, v7, v8);
  v10 = *(_QWORD *)&v54[8];
LABEL_11:
  *(_QWORD *)&v54[8] = v10 + v8;
  LOWORD(v44) = 261;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v41 = *(_QWORD *)a2;
  *((_QWORD *)&v41 + 1) = v12;
  LOWORD(v34) = 257;
  v40 = 257;
  v29 = 257;
  llvm::sys::path::append(v54, 0, (_QWORD **)&v41, (_QWORD **)&v30, (_QWORD **)v39, (void ***)__p);
  LOWORD(v44) = 261;
  v41 = *(_OWORD *)v54;
  sub_1C5E1F6CC((unsigned __int8 *)&v41, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v52);
  if ((v53 & 1) != 0)
  {
    v14 = v52[0];
    if (LODWORD(v52[0]))
    {
      *(llvm **)&v13.__val_ = v52[1];
      LOWORD(v44) = 261;
      v41 = *(_OWORD *)v54;
      sub_1C61D45C4(v52[0], v13, (llvm::Twine *)&v41, a3);
      goto LABEL_28;
    }
  }
  else
  {
    std::system_category();
    v14 = v52[0];
  }
  v52[0] = 0;
  v15 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v14 = *(llvm **)(a1 + 456);
  }
  v16 = *((_QWORD *)v14 + 2) - *((_QWORD *)v14 + 1);
  if (v16)
  {
    *(_QWORD *)&v41 = *((_QWORD *)v14 + 1);
    *((_QWORD *)&v41 + 1) = v16;
    v42 = 0;
    v43 = 0;
    v47[1] = (char *)0x800000000;
    memset(v51, 0, sizeof(v51));
    v17 = v41;
    *(_OWORD *)(a1 + 56) = 0u;
    v44 = 0x200000000;
    v45 = 0uLL;
    v46 = 0;
    v47[0] = &v48;
    *(_QWORD *)(a1 + 72) = 0x200000000;
    *(_OWORD *)(a1 + 40) = v17;
    sub_1C5ABCFD4((uint64_t *)(a1 + 80), &v45);
    sub_1C4FF8150(a1 + 104, (uint64_t)v47);
    *(_QWORD *)(a1 + 376) = v51[0];
    sub_1C4FF8834((void **)(a1 + 384));
    *(_OWORD *)(a1 + 384) = *(_OWORD *)&v51[1];
    *(_QWORD *)(a1 + 400) = v51[3];
    memset(&v51[1], 0, 24);
    v30 = (uint64_t)&v51[1];
    sub_1C4FF8984((void ***)&v30);
    sub_1C4FF8A28(v47);
    if (v45.n128_u64[0])
    {
      sub_1C4FF80DC((uint64_t *)&v45);
      operator delete((void *)v45.n128_u64[0]);
    }
    sub_1C5ABBFB4(a3, (llvm::remarks::BitstreamParserHelper *)(a1 + 40));
    if (*a3)
      goto LABEL_28;
    *(_QWORD *)&v41 = a1 + 40;
    *((_QWORD *)&v41 + 1) = a1 + 384;
    LOBYTE(v42) = 0;
    LOBYTE(v43) = 0;
    LOWORD(v44) = 0;
    v45.n128_u8[0] = 0;
    LOBYTE(v46) = 0;
    LOBYTE(v47[0]) = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    v50 = 0;
    llvm::remarks::BitstreamMetaParserHelper::parse((llvm::remarks::BitstreamMetaParserHelper *)&v41, a3);
    if (*a3)
      goto LABEL_28;
    v18 = *(_BYTE **)(a1 + 464);
    llvm::remarks::BitstreamRemarkParser::processCommonMeta((llvm::remarks::BitstreamRemarkParser *)a1, (llvm::remarks::BitstreamMetaParserHelper *)&v41, a3);
    if (*a3)
      goto LABEL_28;
    if (*(_DWORD *)(a1 + 480) == 1)
    {
      if (v18 != *(_BYTE **)(a1 + 464))
      {
        v22 = std::generic_category();
        __p[0] = 0;
        __p[1] = 0;
        v28 = 0;
        LODWORD(v31) = 0;
        v35 = 0;
        v36 = 0;
        v30 = (uint64_t)&unk_1E81A7208;
        v38 = __p;
        v37 = 0;
        v33 = 0;
        v34 = 0;
        v32 = 0;
        v23 = *(_BYTE **)(a1 + 464);
        v39[0] = &unk_1E8169BA8;
        v39[1] = "Error while parsing external file's BLOCK_META: mismatching versions: original meta: %lu, external file meta: %lu.";
        v39[2] = v18;
        v39[3] = v23;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)v39);
        v24 = v38;
        v25 = operator new();
        v40 = 260;
        v39[0] = v24;
        *(_QWORD *)v25 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v25 + 8));
        *(_QWORD *)(v25 + 32) = 92;
        *(_QWORD *)(v25 + 40) = v22;
        *(_BYTE *)(v25 + 48) = 1;
        *a3 = v25;
        v30 = (uint64_t)off_1E81A6E70;
        if (v37 == 1 && v32)
          MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
        if (SHIBYTE(v28) < 0)
          operator delete(__p[0]);
        goto LABEL_28;
      }
      if (v50)
      {
        *(_QWORD *)(a1 + 472) = v49;
        *a3 = 0;
        goto LABEL_28;
      }
      v26 = std::generic_category();
      v30 = 92;
      v31 = v26;
      v21 = "Error while parsing BLOCK_META: missing remark version.";
    }
    else
    {
      v20 = std::generic_category();
      v30 = 92;
      v31 = v20;
      v21 = "Error while parsing external file's BLOCK_META: wrong container type.";
    }
    v39[0] = v21;
    sub_1C5DF1730(v39, &v30, a3);
  }
  else
  {
    v19 = (_QWORD *)operator new();
    *v19 = &unk_1E8193A88;
    *a3 = (uint64_t)v19;
  }
LABEL_28:
  if (*(_QWORD **)v54 != v55)
    free(*(void **)v54);
}

void sub_1C5ABC804(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9[2];

  if (*(_BYTE *)(a3 + 16))
  {
    v6 = a2 + 408;
    if (*(_BYTE *)(a2 + 448))
    {
      v7 = *(void **)(a2 + 424);
      if (v7)
      {
        *(_QWORD *)(a2 + 432) = v7;
        operator delete(v7);
      }
      *(_BYTE *)(a2 + 448) = 0;
    }
    llvm::remarks::ParsedStringTable::ParsedStringTable(v6, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    *(_BYTE *)(a2 + 448) = 1;
    *a1 = 0;
  }
  else
  {
    v9[0] = 92;
    v9[1] = (uint64_t)std::generic_category();
    v8 = "Error while parsing BLOCK_META: missing string table.";
    sub_1C5DF1730((_BYTE **)&v8, v9, a1);
  }
}

void llvm::remarks::BitstreamRemarkParser::processRemark(llvm::remarks::BitstreamRemarkParser *this@<X0>, llvm::remarks::BitstreamRemarkParserHelper *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  const std::error_category *v23;
  const std::error_category *v24;
  char v25;
  const std::error_category *v26;
  const std::error_category *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = v6;
  v8 = (void *)(v6 + 120);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_QWORD *)(v6 + 432) = 0;
  *(_QWORD *)(v6 + 104) = v6 + 120;
  v9 = (void **)(v6 + 104);
  *(_DWORD *)(v6 + 116) = 5;
  if (!*((_BYTE *)this + 448))
  {
    *(_QWORD *)&v37 = 22;
    *((_QWORD *)&v37 + 1) = std::generic_category();
    v36 = "Error while parsing BLOCK_REMARK: missing string table.";
    sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v35);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v35;
    v35 = 0;
    goto LABEL_40;
  }
  if (!*((_BYTE *)a2 + 9))
  {
    *(_QWORD *)&v37 = 92;
    *((_QWORD *)&v37 + 1) = std::generic_category();
    v36 = "Error while parsing BLOCK_REMARK: missing remark type.";
    sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v34);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v34;
    v34 = 0;
    goto LABEL_40;
  }
  v10 = *((unsigned __int8 *)a2 + 8);
  if (v10 < 7)
  {
    *(_DWORD *)v6 = v10;
    if (!*((_BYTE *)a2 + 24))
    {
      *(_QWORD *)&v37 = 92;
      *((_QWORD *)&v37 + 1) = std::generic_category();
      v36 = "Error while parsing BLOCK_REMARK: missing remark name.";
      sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v32);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v32;
      v32 = 0;
      goto LABEL_40;
    }
    v11 = (uint64_t *)((char *)this + 408);
    llvm::remarks::ParsedStringTable::operator[](v11, *((_QWORD *)a2 + 2), (uint64_t)&v37);
    if ((v38 & 1) == 0)
    {
      *(_OWORD *)(v7 + 24) = v37;
      if (!*((_BYTE *)a2 + 40))
      {
        v23 = std::generic_category();
        *(_QWORD *)&v37 = 92;
        *((_QWORD *)&v37 + 1) = v23;
        v36 = "Error while parsing BLOCK_REMARK: missing remark pass.";
        sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v31);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v31;
        v31 = 0;
        goto LABEL_40;
      }
      llvm::remarks::ParsedStringTable::operator[](v11, *((_QWORD *)a2 + 4), (uint64_t)&v37);
      if ((v38 & 1) == 0)
      {
        *(_OWORD *)(v7 + 8) = v37;
        if (!*((_BYTE *)a2 + 56))
        {
          v24 = std::generic_category();
          *(_QWORD *)&v37 = 92;
          *((_QWORD *)&v37 + 1) = v24;
          v36 = "Error while parsing BLOCK_REMARK: missing remark function name.";
          sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v30);
          *(_BYTE *)(a3 + 8) |= 1u;
          *(_QWORD *)a3 = v30;
          v30 = 0;
          goto LABEL_40;
        }
        llvm::remarks::ParsedStringTable::operator[](v11, *((_QWORD *)a2 + 6), (uint64_t)&v37);
        if ((v38 & 1) == 0)
        {
          *(_OWORD *)(v7 + 40) = v37;
          if (!*((_BYTE *)a2 + 72) || !*((_BYTE *)a2 + 84) || !*((_BYTE *)a2 + 92))
          {
LABEL_18:
            if (*((_BYTE *)a2 + 104))
            {
              v13 = *(unsigned __int8 *)(v7 + 96);
              *(_QWORD *)(v7 + 88) = *((_QWORD *)a2 + 12);
              if (!v13)
                *(_BYTE *)(v7 + 96) = 1;
            }
            if (*((_BYTE *)a2 + 128))
            {
              v14 = *((_QWORD *)a2 + 15);
              if (v14)
              {
                v15 = *((_QWORD *)a2 + 14);
                v16 = *(_BYTE *)(a3 + 8);
                v17 = v14 << 6;
                v18 = v15 + 32;
                while (*(_BYTE *)(v18 - 24))
                {
                  if (!*(_BYTE *)(v18 - 8))
                  {
                    v26 = std::generic_category();
                    *(_QWORD *)&v37 = 92;
                    *((_QWORD *)&v37 + 1) = v26;
                    v36 = "Error while parsing BLOCK_REMARK: missing value in remark argument.";
                    sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v28);
                    *(_BYTE *)(a3 + 8) = v16 | 1;
                    *(_QWORD *)a3 = v28;
                    v28 = 0;
                    goto LABEL_40;
                  }
                  sub_1C624095C((uint64_t)v9);
                  llvm::remarks::ParsedStringTable::operator[](v11, *(_QWORD *)(v18 - 32), (uint64_t)&v37);
                  if ((v38 & 1) != 0
                    || (*(_OWORD *)(*(_QWORD *)(v7 + 104) + ((unint64_t)*(unsigned int *)(v7 + 112) << 6) - 64) = v37,
                        llvm::remarks::ParsedStringTable::operator[](v11, *(_QWORD *)(v18 - 16), (uint64_t)&v37),
                        (v38 & 1) != 0))
                  {
LABEL_48:
                    v21 = v37;
                    v22 = v16 | 1;
                    goto LABEL_36;
                  }
                  *(_OWORD *)(*(_QWORD *)(v7 + 104) + ((unint64_t)*(unsigned int *)(v7 + 112) << 6) - 48) = v37;
                  if (*(_BYTE *)(v18 + 8) && *(_BYTE *)(v18 + 20) && *(_BYTE *)(v18 + 28))
                  {
                    llvm::remarks::ParsedStringTable::operator[](v11, *(_QWORD *)v18, (uint64_t)&v37);
                    if ((v38 & 1) != 0)
                      goto LABEL_48;
                    v19 = *(_QWORD *)(v7 + 104) + ((unint64_t)*(unsigned int *)(v7 + 112) << 6);
                    *(_QWORD *)(v19 - 32) = 0;
                    *(_QWORD *)(v19 - 24) = 0;
                    *(_QWORD *)(v19 - 16) = 0;
                    *(_BYTE *)(v19 - 8) = 1;
                    *(_OWORD *)(*(_QWORD *)(v7 + 104) + ((unint64_t)*(unsigned int *)(v7 + 112) << 6) - 32) = v37;
                    v20 = *(_QWORD *)(v7 + 104) + ((unint64_t)*(unsigned int *)(v7 + 112) << 6);
                    *(_DWORD *)(v20 - 16) = *(_DWORD *)(v18 + 16);
                    *(_DWORD *)(v20 - 12) = *(_DWORD *)(v18 + 24);
                  }
                  v18 += 64;
                  v17 -= 64;
                  if (!v17)
                    goto LABEL_46;
                }
                v27 = std::generic_category();
                *(_QWORD *)&v37 = 92;
                *((_QWORD *)&v37 + 1) = v27;
                v36 = "Error while parsing BLOCK_REMARK: missing key in remark argument.";
                sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v29);
                *(_BYTE *)(a3 + 8) = v16 | 1;
                *(_QWORD *)a3 = v29;
                v29 = 0;
                goto LABEL_40;
              }
              v16 = *(_BYTE *)(a3 + 8);
LABEL_46:
              v25 = v16 & 0xFE;
            }
            else
            {
              v25 = *(_BYTE *)(a3 + 8) & 0xFE;
            }
            *(_BYTE *)(a3 + 8) = v25;
            *(_QWORD *)a3 = v7;
            return;
          }
          llvm::remarks::ParsedStringTable::operator[](v11, *((_QWORD *)a2 + 8), (uint64_t)&v37);
          if ((v38 & 1) == 0)
          {
            *(_BYTE *)(v7 + 80) = 1;
            *(_OWORD *)(v7 + 56) = v37;
            v12 = *((_DWORD *)a2 + 22);
            *(_DWORD *)(v7 + 72) = *((_DWORD *)a2 + 20);
            *(_DWORD *)(v7 + 76) = v12;
            goto LABEL_18;
          }
        }
      }
    }
    v21 = v37;
    v22 = *(_BYTE *)(a3 + 8) | 1;
LABEL_36:
    *(_BYTE *)(a3 + 8) = v22;
    *(_QWORD *)a3 = v21;
    goto LABEL_40;
  }
  *(_QWORD *)&v37 = 92;
  *((_QWORD *)&v37 + 1) = std::generic_category();
  v36 = "Error while parsing BLOCK_REMARK: unknown remark type.";
  sub_1C5DF1730((_BYTE **)&v36, (uint64_t *)&v37, &v33);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v33;
  v33 = 0;
LABEL_40:
  if (*v9 != v8)
    free(*v9);
  MEMORY[0x1CAA32FC0](v7, 0x10D2C401DAD59E6);
}

uint64_t sub_1C5ABCE40(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_1E8193AD8;
  v2 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 448))
  {
    v3 = *(void **)(a1 + 424);
    if (v3)
    {
      *(_QWORD *)(a1 + 432) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 448) = 0;
  }
  v5 = (void **)(a1 + 384);
  sub_1C4FF8984(&v5);
  sub_1C4FF8A28((char **)(a1 + 104));
  if (*(_QWORD *)(a1 + 80))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 80));
    operator delete(*(void **)(a1 + 80));
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C5ABCF00(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_1E8193AD8;
  v2 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 448))
  {
    v3 = *(void **)(a1 + 424);
    if (v3)
    {
      *(_QWORD *)(a1 + 432) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 448) = 0;
  }
  v5 = (void **)(a1 + 384);
  sub_1C4FF8984(&v5);
  sub_1C4FF8A28((char **)(a1 + 104));
  if (*(_QWORD *)(a1 + 80))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 80));
    operator delete(*(void **)(a1 + 80));
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return MEMORY[0x1CAA32FC0](a1, 0x10F3C40DB8192E8);
}

__n128 sub_1C5ABCFD4(uint64_t *a1, __n128 *a2)
{
  __n128 result;

  if (*a1)
  {
    sub_1C4FF80DC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = a2[1].n128_i64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *sub_1C5ABD02C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = (char *)operator new(32 * a4);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v8 = a2 + 8;
      v9 = result + 8;
      do
      {
        v10 = v8 - 8;
        *((_DWORD *)v9 - 2) = *(_DWORD *)(v8 - 8);
        if (*(char *)(v8 + 23) < 0)
        {
          sub_1C47EBC30(v9, *(void **)v8, *(_QWORD *)(v8 + 8));
        }
        else
        {
          *(_OWORD *)v9 = *(_OWORD *)v8;
          *((_QWORD *)v9 + 2) = *(_QWORD *)(v8 + 16);
        }
        v8 += 32;
        v9 += 32;
      }
      while (v10 + 32 != a3);
      result = v9 - 8;
    }
    v7[1] = result;
  }
  return result;
}

void sub_1C5ABD0E8(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  const std::string *v21;
  int v22;
  std::string *v23;
  char *v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  void **v28;
  __int128 v29;
  char *v30;
  const std::string *v31;
  int v32;
  std::string *v33;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 5)
  {
    v18 = *(char **)(a1 + 8);
    v19 = (v18 - v9) >> 5;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        v30 = *(char **)a1;
      }
      else
      {
        v30 = *(char **)a1;
        do
        {
          v31 = (const std::string *)(v6 + 2);
          v32 = *v6;
          v6 += 8;
          v33 = (std::string *)(v9 + 8);
          *(_DWORD *)v9 = v32;
          v9 += 32;
          std::string::operator=(v33, v31);
          v30 += 32;
        }
        while (v6 != a3);
        v18 = *(char **)(a1 + 8);
      }
      while (v18 != v30)
      {
        if (*(v18 - 1) < 0)
          operator delete(*((void **)v18 - 3));
        v18 -= 32;
      }
      *(_QWORD *)(a1 + 8) = v30;
    }
    else
    {
      v20 = &a2[8 * v19];
      if (v18 != v9)
      {
        do
        {
          v21 = (const std::string *)(v6 + 2);
          v22 = *v6;
          v6 += 8;
          v23 = (std::string *)(v9 + 8);
          *(_DWORD *)v9 = v22;
          v9 += 32;
          std::string::operator=(v23, v21);
        }
        while (v6 != v20);
        v9 = *(char **)(a1 + 8);
      }
      v24 = v9;
      if (v20 != a3)
      {
        v25 = 0;
        do
        {
          v26 = &v20[v25];
          *(_DWORD *)&v9[v25 * 4] = v20[v25];
          v27 = &v9[v25 * 4 + 8];
          v28 = (void **)&v20[v25 + 2];
          if (SHIBYTE(v20[v25 + 7]) < 0)
          {
            sub_1C47EBC30(v27, *v28, *((_QWORD *)v26 + 2));
          }
          else
          {
            v29 = *(_OWORD *)v28;
            *(_QWORD *)&v9[v25 * 4 + 24] = *(_QWORD *)&v20[v25 + 6];
            *(_OWORD *)v27 = v29;
          }
          v25 += 8;
        }
        while (v26 + 8 != a3);
        v24 = &v9[v25 * 4];
      }
      *(_QWORD *)(a1 + 8) = v24;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(void ***)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != (void **)v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 4;
        }
        while (v10 != (void **)v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 59)
      goto LABEL_46;
    v12 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v12;
    if (v13 >> 59)
LABEL_46:
      abort();
    v14 = (char *)operator new(32 * v13);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v14[32 * v13];
    if (v6 != a3)
    {
      v15 = v6 + 2;
      v16 = v14 + 8;
      do
      {
        v17 = v15 - 2;
        *((_DWORD *)v16 - 2) = *(v15 - 2);
        if (*((char *)v15 + 23) < 0)
        {
          sub_1C47EBC30(v16, *(void **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          *(_OWORD *)v16 = *(_OWORD *)v15;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v15 + 2);
        }
        v15 += 8;
        v16 += 32;
      }
      while (v17 + 8 != a3);
      v14 = v16 - 8;
    }
    *(_QWORD *)(a1 + 8) = v14;
  }
}

unsigned int *sub_1C5ABD338(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  _OWORD *v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  _OWORD v13[4];

  v1 = result;
  v2 = result[2];
  if (v2 >= result[3])
  {
    memset(v13, 0, sizeof(v13));
    v4 = v2 + 1;
    v5 = *(_QWORD *)result + (v2 << 6) > (unint64_t)v13;
    if (*(_QWORD *)result <= (unint64_t)v13 && v5)
    {
      v12 = (char *)v13 - *(_QWORD *)result;
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4, 64);
      v6 = *(_QWORD *)v1;
      v7 = &v12[*(_QWORD *)v1];
    }
    else
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4, 64);
      v6 = *(_QWORD *)v1;
      v7 = (char *)v13;
    }
    v8 = (_OWORD *)(v6 + ((unint64_t)v1[2] << 6));
    v9 = *(_OWORD *)v7;
    v10 = *((_OWORD *)v7 + 1);
    v11 = *((_OWORD *)v7 + 3);
    v8[2] = *((_OWORD *)v7 + 2);
    v8[3] = v11;
    *v8 = v9;
    v8[1] = v10;
  }
  else
  {
    v3 = (_OWORD *)(*(_QWORD *)result + (v2 << 6));
    v3[2] = 0u;
    v3[3] = 0u;
    *v3 = 0u;
    v3[1] = 0u;
  }
  ++v1[2];
  return result;
}

void sub_1C5ABD414()
{
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5ABD428(int a1, llvm::raw_ostream *this)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v2) > 0x13)
  {
    *(_DWORD *)(v2 + 16) = 778331496;
    result = *(double *)"End of file reached.";
    *(_OWORD *)v2 = *(_OWORD *)"End of file reached.";
    *((_QWORD *)this + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(this, "End of file reached.", 0x14uLL);
  }
  return result;
}

uint64_t sub_1C5ABD47C()
{
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  return 3;
}

void *sub_1C5ABD4C8()
{
  return &llvm::remarks::EndOfFileError::ID;
}

BOOL sub_1C5ABD4D4(uint64_t a1, void *a2)
{
  return a2 == &llvm::remarks::EndOfFileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

double llvm::remarks::BitstreamRemarkSerializerHelper::BitstreamRemarkSerializerHelper(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1048) = a1 + 1064;
  *(_QWORD *)(a1 + 1056) = 0x4000000000;
  *(_QWORD *)(a1 + 1576) = a1;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1592) = 0x20000000;
  *(_QWORD *)(a1 + 1600) = 0;
  *(_DWORD *)(a1 + 1608) = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1688) = a2;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_QWORD *)(a1 + 1760) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1048) = a1 + 1064;
  *(_QWORD *)(a1 + 1056) = 0x4000000000;
  *(_QWORD *)(a1 + 1576) = a1;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1592) = 0x20000000;
  *(_QWORD *)(a1 + 1600) = 0;
  *(_DWORD *)(a1 + 1608) = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1688) = a2;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_QWORD *)(a1 + 1760) = 0;
  return result;
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaBlockInfo(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  llvm::raw_ostream *v2;
  unsigned int *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;

  v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  v3 = (unsigned int *)((char *)this + 1048);
  sub_1C5ABD71C(8u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (unsigned int *)this + 262, "Meta", 4);
  sub_1C5ABD7D8(1u, v2, v3, "Container info", 14);
  v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v4[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[4].__shared_owners_ = 0u;
  v4[5].std::__shared_count = 0u;
  *(_OWORD *)&v4[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[6].__shared_owners_ = 0u;
  v4[7].std::__shared_count = 0u;
  *(_OWORD *)&v4[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[8].__shared_owners_ = 0u;
  v4[9].std::__shared_count = 0u;
  *(_OWORD *)&v4[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[10].__shared_owners_ = 0u;
  v4[11].std::__shared_count = 0u;
  *(_OWORD *)&v4[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[12].__shared_owners_ = 0u;
  v4[13].std::__shared_count = 0u;
  *(_OWORD *)&v4[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[14].__shared_owners_ = 0u;
  v4[15].std::__shared_count = 0u;
  *(_OWORD *)&v4[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[16].__shared_owners_ = 0u;
  v4[17].std::__shared_count = 0u;
  *(_OWORD *)&v4[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[18].__shared_owners_ = 0u;
  v4[19].std::__shared_count = 0u;
  *(_OWORD *)&v4[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[20].__shared_owners_ = 0u;
  v4[21].std::__shared_count = 0u;
  *(_OWORD *)&v4[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[22].__shared_owners_ = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = xmmword_1C85F9DC0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1].__shared_weak_owners_;
  *(_OWORD *)&v4[2].__shared_owners_ = xmmword_1C85F9F80;
  v4[3].std::__shared_count = (std::__shared_count)vdupq_n_s64(2uLL);
  v4[1].__shared_owners_ = 0x2000000003;
  v11 = v4 + 1;
  v12 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  *((_QWORD *)this + 212) = sub_1C5034188(v2, 8, (uint64_t)&v11);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

llvm::raw_ostream *sub_1C5ABD71C(unsigned int a1, llvm::raw_ostream *a2, unsigned int *a3, char *a4, uint64_t a5)
{
  uint64_t v10;

  a3[2] = 0;
  if (a3[3])
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), 1uLL, 8);
    v10 = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = a1;
  ++a3[2];
  sub_1C503D888(a2, 1u, (uint64_t)a3, 0);
  a3[2] = 0;
  sub_1C5ABE80C(a3, *(_QWORD *)a3, a4, &a4[a5]);
  return sub_1C503D888(a2, 2u, (uint64_t)a3, 0);
}

llvm::raw_ostream *sub_1C5ABD7D8(unsigned int a1, llvm::raw_ostream *a2, unsigned int *a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;

  a3[2] = 0;
  if (a3[3])
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), 1uLL, 8);
    v10 = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = a1;
  v11 = a3[2] + 1;
  a3[2] = v11;
  sub_1C5ABE80C(a3, *(_QWORD *)a3 + 8 * v11, a4, &a4[a5]);
  return sub_1C503D888(a2, 3u, (uint64_t)a3, 0);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaRemarkVersion(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  llvm::raw_ostream *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1C5ABD7D8(2u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (unsigned int *)this + 262, "Remark version", 14);
  v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1C85F9DE0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1C85F9F80;
  v3[1].__shared_owners_ = 0x2000000002;
  v10 = v3 + 1;
  v11 = v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  *((_QWORD *)this + 213) = sub_1C5034188(v2, 8, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaStrTab(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  llvm::raw_ostream *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1C5ABD7D8(3u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (unsigned int *)this + 262, "String table", 12);
  v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1C85F9E80;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1C85FA040;
  v3[1].__shared_owners_ = 0x2000000002;
  v10 = v3 + 1;
  v11 = v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  *((_QWORD *)this + 214) = sub_1C5034188(v2, 8, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::emitMetaStrTab(llvm::remarks::BitstreamRemarkSerializerHelper *this, uint64_t ***a2)
{
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  *((_DWORD *)this + 264) = 0;
  if (*((_DWORD *)this + 265))
  {
    v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1048, (uint64_t)this + 1064, 1uLL, 8);
    v4 = *((unsigned int *)this + 264);
  }
  *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v4) = 3;
  ++*((_DWORD *)this + 264);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v16 = v17;
  v15 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  llvm::remarks::StringTable::serialize(a2, (llvm::raw_ostream *)&v8);
  v5 = *((_BYTE *)v16 + 23);
  if (v5 >= 0)
    v6 = (char *)v16;
  else
    v6 = (char *)*v16;
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = (uint64_t)v16[1];
  sub_1C5033D5C((llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), *((_DWORD *)this + 428), *((_QWORD *)this + 131), *((unsigned int *)this + 264), v6, v7, 0);
  v8 = off_1E81A6E70;
  if (v15 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupMetaExternalFile(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  llvm::raw_ostream *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  sub_1C5ABD7D8(4u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (unsigned int *)this + 262, "External File", 13);
  v3 = (std::__shared_weak_count *)operator new(0x228uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v3[3].std::__shared_count = 0u;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  *(_OWORD *)&v3[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[6].__shared_owners_ = 0u;
  v3[7].std::__shared_count = 0u;
  *(_OWORD *)&v3[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[8].__shared_owners_ = 0u;
  v3[9].std::__shared_count = 0u;
  *(_OWORD *)&v3[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[10].__shared_owners_ = 0u;
  v3[11].std::__shared_count = 0u;
  *(_OWORD *)&v3[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[12].__shared_owners_ = 0u;
  v3[13].std::__shared_count = 0u;
  *(_OWORD *)&v3[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[14].__shared_owners_ = 0u;
  v3[15].std::__shared_count = 0u;
  *(_OWORD *)&v3[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[16].__shared_owners_ = 0u;
  v3[17].std::__shared_count = 0u;
  *(_OWORD *)&v3[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[18].__shared_owners_ = 0u;
  v3[19].std::__shared_count = 0u;
  *(_OWORD *)&v3[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[20].__shared_owners_ = 0u;
  v3[21].std::__shared_count = 0u;
  *(_OWORD *)&v3[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[22].__shared_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_weak_owners_ = xmmword_1C85F9E00;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&v3[1].__shared_weak_owners_;
  *(_OWORD *)&v3[2].__shared_owners_ = xmmword_1C85FA040;
  v3[1].__shared_owners_ = 0x2000000002;
  v10 = v3 + 1;
  v11 = v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  *((_QWORD *)this + 215) = sub_1C5034188(v2, 8, (uint64_t)&v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void llvm::remarks::BitstreamRemarkSerializerHelper::setupRemarkBlockInfo(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  llvm::raw_ostream *v2;
  unsigned int *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;

  v2 = (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576);
  v3 = (unsigned int *)((char *)this + 1048);
  sub_1C5ABD71C(9u, (llvm::remarks::BitstreamRemarkSerializerHelper *)((char *)this + 1576), (unsigned int *)this + 262, "Remark", 6);
  sub_1C5ABD7D8(5u, v2, v3, "Remark header", 13);
  v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v4[5].std::__shared_count = 0u;
  *(_OWORD *)&v4[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[6].__shared_owners_ = 0u;
  v4[7].std::__shared_count = 0u;
  *(_OWORD *)&v4[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[8].__shared_owners_ = 0u;
  v4[9].std::__shared_count = 0u;
  *(_OWORD *)&v4[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[10].__shared_owners_ = 0u;
  v4[11].std::__shared_count = 0u;
  *(_OWORD *)&v4[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[12].__shared_owners_ = 0u;
  v4[13].std::__shared_count = 0u;
  *(_OWORD *)&v4[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[14].__shared_owners_ = 0u;
  v4[15].std::__shared_count = 0u;
  *(_OWORD *)&v4[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[16].__shared_owners_ = 0u;
  v4[17].std::__shared_count = 0u;
  *(_OWORD *)&v4[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[18].__shared_owners_ = 0u;
  v4[19].std::__shared_count = 0u;
  *(_OWORD *)&v4[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[20].__shared_owners_ = 0u;
  v4[21].std::__shared_count = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = xmmword_1C85F9FB0;
  *(_OWORD *)&v4[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[22].__shared_owners_ = 0u;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1].__shared_weak_owners_;
  *(_OWORD *)&v4[2].__shared_owners_ = xmmword_1C85F9DF0;
  v4[3].std::__shared_count = (std::__shared_count)xmmword_1C85F6930;
  *(_OWORD *)&v4[3].__shared_weak_owners_ = xmmword_1C85F6930;
  *(_OWORD *)&v4[4].__shared_owners_ = xmmword_1C85F6860;
  v4[1].__shared_owners_ = 0x2000000005;
  v47 = v4 + 1;
  v48 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  *((_QWORD *)this + 216) = sub_1C5034188(v2, 9, (uint64_t)&v47);
  v7 = v48;
  if (v48)
  {
    v8 = (unint64_t *)&v48->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_1C5ABD7D8(6u, v2, v3, "Remark debug location", 21);
  v11 = (std::__shared_weak_count *)operator new(0x228uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v11[4].__shared_owners_ = 0u;
  v11[5].std::__shared_count = 0u;
  *(_OWORD *)&v11[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[6].__shared_owners_ = 0u;
  v11[7].std::__shared_count = 0u;
  *(_OWORD *)&v11[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[8].__shared_owners_ = 0u;
  v11[9].std::__shared_count = 0u;
  *(_OWORD *)&v11[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[10].__shared_owners_ = 0u;
  v11[11].std::__shared_count = 0u;
  *(_OWORD *)&v11[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[12].__shared_owners_ = 0u;
  v11[13].std::__shared_count = 0u;
  *(_OWORD *)&v11[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[14].__shared_owners_ = 0u;
  v11[15].std::__shared_count = 0u;
  *(_OWORD *)&v11[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[16].__shared_owners_ = 0u;
  v11[17].std::__shared_count = 0u;
  *(_OWORD *)&v11[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[18].__shared_owners_ = 0u;
  v11[19].std::__shared_count = 0u;
  *(_OWORD *)&v11[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[20].__shared_owners_ = 0u;
  v11[21].std::__shared_count = 0u;
  *(_OWORD *)&v11[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[22].__shared_owners_ = 0u;
  *(_OWORD *)&v11[1].__shared_weak_owners_ = xmmword_1C85F9FC0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&v11[1].__shared_weak_owners_;
  *(_OWORD *)&v11[2].__shared_owners_ = xmmword_1C85F6880;
  v11[3].std::__shared_count = (std::__shared_count)xmmword_1C85F9F80;
  *(_OWORD *)&v11[3].__shared_weak_owners_ = xmmword_1C85F9F80;
  v11[1].__shared_owners_ = 0x2000000004;
  v45 = v11 + 1;
  v46 = v11;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  *((_QWORD *)this + 217) = sub_1C5034188(v2, 9, (uint64_t)&v45);
  v14 = v46;
  if (v46)
  {
    v15 = (unint64_t *)&v46->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v17 = __ldaxr(v12);
  while (__stlxr(v17 - 1, v12));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_1C5ABD7D8(7u, v2, v3, "Remark hotness", 14);
  v18 = (std::__shared_weak_count *)operator new(0x228uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  v18[3].std::__shared_count = 0u;
  *(_OWORD *)&v18[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[4].__shared_owners_ = 0u;
  v18[5].std::__shared_count = 0u;
  *(_OWORD *)&v18[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[6].__shared_owners_ = 0u;
  v18[7].std::__shared_count = 0u;
  *(_OWORD *)&v18[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[8].__shared_owners_ = 0u;
  v18[9].std::__shared_count = 0u;
  *(_OWORD *)&v18[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[10].__shared_owners_ = 0u;
  v18[11].std::__shared_count = 0u;
  *(_OWORD *)&v18[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[12].__shared_owners_ = 0u;
  v18[13].std::__shared_count = 0u;
  *(_OWORD *)&v18[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[14].__shared_owners_ = 0u;
  v18[15].std::__shared_count = 0u;
  *(_OWORD *)&v18[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[16].__shared_owners_ = 0u;
  v18[17].std::__shared_count = 0u;
  *(_OWORD *)&v18[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[18].__shared_owners_ = 0u;
  v18[19].std::__shared_count = 0u;
  *(_OWORD *)&v18[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[20].__shared_owners_ = 0u;
  v18[21].std::__shared_count = 0u;
  *(_OWORD *)&v18[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v18[22].__shared_owners_ = 0u;
  *(_OWORD *)&v18[1].__shared_weak_owners_ = xmmword_1C85F9F20;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&v18[1].__shared_weak_owners_;
  *(_OWORD *)&v18[2].__shared_owners_ = xmmword_1C85F6860;
  v18[1].__shared_owners_ = 0x2000000002;
  v43 = v18 + 1;
  v44 = v18;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  *((_QWORD *)this + 218) = sub_1C5034188(v2, 9, (uint64_t)&v43);
  v21 = v44;
  if (v44)
  {
    v22 = (unint64_t *)&v44->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(v19);
  while (__stlxr(v24 - 1, v19));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_1C5ABD7D8(8u, v2, v3, "Argument with debug location", 28);
  v25 = (std::__shared_weak_count *)operator new(0x228uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v25[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[6].__shared_owners_ = 0u;
  v25[7].std::__shared_count = 0u;
  *(_OWORD *)&v25[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[8].__shared_owners_ = 0u;
  v25[9].std::__shared_count = 0u;
  *(_OWORD *)&v25[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[10].__shared_owners_ = 0u;
  v25[11].std::__shared_count = 0u;
  *(_OWORD *)&v25[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[12].__shared_owners_ = 0u;
  v25[13].std::__shared_count = 0u;
  *(_OWORD *)&v25[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[14].__shared_owners_ = 0u;
  v25[15].std::__shared_count = 0u;
  *(_OWORD *)&v25[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[16].__shared_owners_ = 0u;
  v25[17].std::__shared_count = 0u;
  *(_OWORD *)&v25[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[18].__shared_owners_ = 0u;
  v25[19].std::__shared_count = 0u;
  *(_OWORD *)&v25[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[20].__shared_owners_ = 0u;
  v25[21].std::__shared_count = 0u;
  *(_OWORD *)&v25[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v25[22].__shared_owners_ = 0u;
  *(_OWORD *)&v25[1].__shared_weak_owners_ = xmmword_1C85F9EC0;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&v25[1].__shared_weak_owners_;
  *(_OWORD *)&v25[2].__shared_owners_ = xmmword_1C85F6880;
  v25[3].std::__shared_count = (std::__shared_count)xmmword_1C85F6880;
  *(_OWORD *)&v25[3].__shared_weak_owners_ = xmmword_1C85F6880;
  *(_OWORD *)&v25[4].__shared_owners_ = xmmword_1C85F9F80;
  v25[5].std::__shared_count = (std::__shared_count)xmmword_1C85F9F80;
  v25[1].__shared_owners_ = 0x2000000006;
  v41 = v25 + 1;
  v42 = v25;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  *((_QWORD *)this + 219) = sub_1C5034188(v2, 9, (uint64_t)&v41);
  v28 = v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  do
    v31 = __ldaxr(v26);
  while (__stlxr(v31 - 1, v26));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  sub_1C5ABD7D8(9u, v2, v3, "Argument", 8);
  v32 = (std::__shared_weak_count *)operator new(0x228uLL);
  v32->__shared_owners_ = 0;
  v33 = (unint64_t *)&v32->__shared_owners_;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E813F300;
  *(_OWORD *)&v32[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[4].__shared_owners_ = 0u;
  v32[5].std::__shared_count = 0u;
  *(_OWORD *)&v32[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[6].__shared_owners_ = 0u;
  v32[7].std::__shared_count = 0u;
  *(_OWORD *)&v32[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[8].__shared_owners_ = 0u;
  v32[9].std::__shared_count = 0u;
  *(_OWORD *)&v32[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[10].__shared_owners_ = 0u;
  v32[11].std::__shared_count = 0u;
  *(_OWORD *)&v32[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[12].__shared_owners_ = 0u;
  v32[13].std::__shared_count = 0u;
  *(_OWORD *)&v32[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[14].__shared_owners_ = 0u;
  v32[15].std::__shared_count = 0u;
  *(_OWORD *)&v32[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[16].__shared_owners_ = 0u;
  v32[17].std::__shared_count = 0u;
  *(_OWORD *)&v32[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[18].__shared_owners_ = 0u;
  v32[19].std::__shared_count = 0u;
  *(_OWORD *)&v32[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[20].__shared_owners_ = 0u;
  v32[21].std::__shared_count = 0u;
  *(_OWORD *)&v32[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[22].__shared_owners_ = 0u;
  *(_OWORD *)&v32[1].__shared_weak_owners_ = xmmword_1C85FA010;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&v32[1].__shared_weak_owners_;
  *(_OWORD *)&v32[2].__shared_owners_ = xmmword_1C85F6880;
  v32[3].std::__shared_count = (std::__shared_count)xmmword_1C85F6880;
  v32[1].__shared_owners_ = 0x2000000003;
  v39 = v32 + 1;
  v40 = v32;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  *((_QWORD *)this + 220) = sub_1C5034188(v2, 9, (uint64_t)&v39);
  v35 = v40;
  if (v40)
  {
    v36 = (unint64_t *)&v40->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  do
    v38 = __ldaxr(v33);
  while (__stlxr(v38 - 1, v33));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
}

llvm::raw_ostream *llvm::remarks::BitstreamRemarkSerializerHelper::flushToStream(llvm::remarks::BitstreamRemarkSerializerHelper *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;

  result = llvm::raw_ostream::write(a2, *(const char **)this, *((_QWORD *)this + 1));
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t llvm::remarks::BitstreamRemarkSerializerHelper::getBuffer(llvm::remarks::BitstreamRemarkSerializerHelper *this)
{
  return *(_QWORD *)this;
}

uint64_t llvm::remarks::BitstreamRemarkSerializer::BitstreamRemarkSerializer(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193B00;
  *(_QWORD *)(a1 + 176) = a1 + 200;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1224) = a1 + 1240;
  *(_QWORD *)(a1 + 1232) = 0x4000000000;
  *(_QWORD *)(a1 + 1752) = a1 + 176;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = 0x20000000;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1784) = 2;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = 1;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_QWORD *)(a1 + 1936) = 0;
  sub_1C630EBB8(a1 + 32);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193B00;
  *(_QWORD *)(a1 + 176) = a1 + 200;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1224) = a1 + 1240;
  *(_QWORD *)(a1 + 1232) = 0x4000000000;
  *(_QWORD *)(a1 + 1752) = a1 + 176;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = 0x20000000;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1784) = 2;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = 1;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_QWORD *)(a1 + 1936) = 0;
  sub_1C630EBB8(a1 + 32);
  return a1;
}

uint64_t llvm::remarks::BitstreamRemarkSerializer::BitstreamRemarkSerializer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;

  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193B00;
  *(_BYTE *)(a1 + 168) = 0;
  if (a3)
    v6 = 2;
  else
    v6 = 1;
  *(_QWORD *)(a1 + 176) = a1 + 200;
  *(_OWORD *)(a1 + 184) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1224) = a1 + 1240;
  *(_QWORD *)(a1 + 1232) = 0x4000000000;
  *(_QWORD *)(a1 + 1752) = a1 + 176;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = 0x20000000;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1784) = 2;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = v6;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_QWORD *)(a1 + 1936) = 0;
  sub_1C5ABE950(v5, a4);
  return a1;
}

{
  uint64_t v5;
  int v6;

  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193B00;
  *(_BYTE *)(a1 + 168) = 0;
  if (a3)
    v6 = 2;
  else
    v6 = 1;
  *(_QWORD *)(a1 + 176) = a1 + 200;
  *(_OWORD *)(a1 + 184) = xmmword_1C86520E0;
  *(_QWORD *)(a1 + 1224) = a1 + 1240;
  *(_QWORD *)(a1 + 1232) = 0x4000000000;
  *(_QWORD *)(a1 + 1752) = a1 + 176;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1768) = 0x20000000;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1784) = 2;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = v6;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_QWORD *)(a1 + 1936) = 0;
  sub_1C5ABE950(v5, a4);
  return a1;
}

unsigned int *sub_1C5ABE80C(unsigned int *result, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_1C50349A8(result, a3, a4);
  v9 = (a2 - v7) >> 3;
  v10 = a4 - a3;
  v11 = a4 - a3 + v8;
  if (v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 8);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (char *)(v7 + 8 * v9);
  v13 = (char *)(v7 + 8 * v8);
  v14 = (v13 - v12) >> 3;
  if (v14 >= v10)
  {
    result = sub_1C6177054(v6, &v13[-8 * v10], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v10] != v12)
      result = (unsigned int *)memmove(&v12[8 * v10], v12, &v13[-8 * v10] - v12);
    while (v5 != a4)
    {
      v17 = *v5++;
      *(_QWORD *)v12 = v17;
      v12 += 8;
    }
  }
  else
  {
    v6[2] = v8 + v10;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * (v8 + v10) - 8 * v14), v12, v13 - v12);
      do
      {
        v15 = *v5++;
        *(_QWORD *)v12 = v15;
        v12 += 8;
        --v14;
      }
      while (v14);
    }
    while (v5 != a4)
    {
      v16 = *v5++;
      *(_QWORD *)v13 = v16;
      v13 += 8;
    }
  }
  return result;
}

uint64_t sub_1C5ABE950(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 128))
  {
    sub_1C630EC40(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    sub_1C4E854AC(a1 + 24, a2 + 24);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = 1;
  }
  return a1;
}

uint64_t sub_1C5ABE9C0(uint64_t a1, uint64_t a2)
{
  _BYTE v5[96];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  sub_1C4E854AC((uint64_t)v5, a1);
  sub_1C4E85668(a1, a2);
  sub_1C4E85668(a2, (uint64_t)v5);
  return sub_1C4926AE8((uint64_t)v5);
}

void llvm::remarks::Remark::getArgsAsMsg(llvm::remarks::Remark *this@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  size_t *v6;
  const void *v7;
  size_t v8;
  __int128 v9;
  void (**v10)(llvm::raw_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *v19[2];
  uint64_t v20;

  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v3 = v19;
  v18 = v19;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4)
  {
    v5 = v4 << 6;
    v6 = (size_t *)(*((_QWORD *)this + 13) + 24);
    do
    {
      v7 = (const void *)*(v6 - 1);
      v8 = *v6;
      if (*v6 <= v13 - (uint64_t)v14)
      {
        if (v8)
        {
          memcpy(v14, v7, *v6);
          v14 += v8;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v10, (const char *)v7, *v6);
      }
      v6 += 8;
      v5 -= 64;
    }
    while (v5);
    v3 = v18;
  }
  if (*((char *)v3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v3, (unint64_t)v3[1]);
  }
  else
  {
    v9 = *(_OWORD *)v3;
    *(_QWORD *)(a2 + 16) = v3[2];
    *(_OWORD *)a2 = v9;
  }
  v10 = off_1E81A6E70;
  if (v17 == 1 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
}

uint64_t LLVMRemarkStringGetData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMRemarkStringGetLen(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t LLVMRemarkDebugLocGetSourceLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t LLVMRemarkDebugLocGetSourceColumn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t LLVMRemarkArgGetValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t LLVMRemarkArgGetDebugLoc(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
    return a1 + 32;
  else
    return 0;
}

uint64_t LLVMRemarkEntryDispose(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 104);
    if (v2 != (void *)(v1 + 120))
      free(v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMRemarkEntryGetType(unsigned int *a1)
{
  return *a1;
}

uint64_t LLVMRemarkEntryGetPassName(uint64_t a1)
{
  return a1 + 8;
}

uint64_t LLVMRemarkEntryGetRemarkName(uint64_t a1)
{
  return a1 + 24;
}

uint64_t LLVMRemarkEntryGetFunctionName(uint64_t a1)
{
  return a1 + 40;
}

uint64_t LLVMRemarkEntryGetDebugLoc(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
    return a1 + 56;
  else
    return 0;
}

uint64_t LLVMRemarkEntryGetHotness(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
    return *(_QWORD *)(a1 + 88);
  else
    return 0;
}

uint64_t LLVMRemarkEntryGetNumArgs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t LLVMRemarkEntryGetFirstArg(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112))
    return *(_QWORD *)(a1 + 104);
  else
    return 0;
}

uint64_t LLVMRemarkEntryGetNextArg(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (result + 64 == *(_QWORD *)(a2 + 104) + ((unint64_t)*(unsigned int *)(a2 + 112) << 6))
      return 0;
    else
      result += 64;
  }
  return result;
}

void llvm::remarks::parseFormat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  const std::error_category *v8;
  void **v9;
  uint64_t v10;
  void (**v11)(llvm::raw_ostream *__hidden);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  if (a2 > 8)
  {
    if (a2 == 9)
    {
      if (*(_QWORD *)a1 == 0x6165727473746962 && *(_BYTE *)(a1 + 8) == 109)
      {
        v5 = 3;
        goto LABEL_23;
      }
    }
    else if (a2 == 11 && *(_QWORD *)a1 == 0x7274732D6C6D6179 && *(_QWORD *)(a1 + 3) == 0x6261747274732D6CLL)
    {
      v5 = 2;
      goto LABEL_23;
    }
  }
  else if (!a2 || a2 == 4 && *(_DWORD *)a1 == 1819107705)
  {
    v5 = 1;
LABEL_23:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = v5;
    return;
  }
  v8 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v19 = __p;
  v18 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v22[0] = &off_1E8132A78;
  v22[1] = "Unknown remark format: '%s'";
  v22[2] = a1;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, (uint64_t)v22);
  v9 = v19;
  v10 = operator new();
  v23 = 260;
  v22[0] = v9;
  *(_QWORD *)v10 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v22, (_QWORD *)(v10 + 8));
  *(_QWORD *)(v10 + 32) = 22;
  *(_QWORD *)(v10 + 40) = v8;
  *(_BYTE *)(v10 + 48) = 1;
  v11 = off_1E81A6E70;
  if (v18 == 1 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v10;
}

void llvm::remarks::magicToFormat(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const std::error_category *v7;
  void **v8;
  uint64_t v9;
  void (**v10)(llvm::raw_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  if (a2 < 4)
    goto LABEL_16;
  v5 = 0x100000001;
  if (*a1 != 539831597)
    v5 = 0;
  if (a2 >= 7 && *a1 != 539831597 && !(*a1 ^ 0x414D4552 | *(_DWORD *)((char *)a1 + 3) ^ 0x534B5241))
    v5 = 0x100000002;
  if ((v5 & 0x100000000) == 0 && *a1 == 1263684946)
    v5 = 0x100000003;
  if ((v5 & 0x100000000) == 0 || (_DWORD)v5 == 0)
  {
LABEL_16:
    v7 = std::generic_category();
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    v11 = 0;
    v15 = 0;
    v16 = 0;
    v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v18 = __p;
    v17 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v21[0] = &off_1E8132A78;
    v21[1] = "Unknown remark magic: '%s'";
    v21[2] = a1;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v10, (uint64_t)v21);
    v8 = v18;
    v9 = operator new();
    v22 = 260;
    v21[0] = v8;
    *(_QWORD *)v9 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v21, (_QWORD *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 22;
    *(_QWORD *)(v9 + 40) = v7;
    *(_BYTE *)(v9 + 48) = 1;
    v10 = off_1E81A6E70;
    if (v17 == 1 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v9;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = v5;
  }
}

void llvm::remarks::getRemarksSectionContents(llvm::remarks *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v15;
  const std::error_category *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20[2];
  char v21;
  uint64_t v22;
  const std::error_category *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) != 0x10)
  {
    v22 = 92;
    v23 = std::generic_category();
    v20[0] = "Unsupported file format.";
    sub_1C5DF1730(v20, &v22, (_QWORD *)a3);
    *(_BYTE *)(a3 + 24) |= 1u;
    return;
  }
  v5 = (*(uint64_t (**)(llvm::remarks *, const llvm::object::ObjectFile *))(*(_QWORD *)this + 344))(this, a2);
  v7 = v6;
  v8 = (*(uint64_t (**)(llvm::remarks *))(*(_QWORD *)this + 352))(this);
  v18 = v5;
  v19 = v7;
  if (v7 == v9 && v5 == v8)
  {
LABEL_18:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 1) = 0;
    *(_DWORD *)(a3 + 17) = 0;
    *(_DWORD *)(a3 + 20) = 0;
    *(_BYTE *)(a3 + 24) &= ~1u;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v11 = v8;
  v12 = v9;
  while (1)
  {
    (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 136))(v20, v7, v5);
    if ((v21 & 1) != 0)
    {
      v15 = v20[0];
      v20[0] = 0;
LABEL_22:
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v15;
      goto LABEL_25;
    }
    if (v20[1] == (_BYTE *)9 && *(_QWORD *)v20[0] == 0x6B72616D65725F5FLL && v20[0][8] == 115)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 128))(v19, &v18);
    v5 = v18;
    v7 = v19;
    if (v19 == v12 && v18 == v11)
      goto LABEL_18;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 168))(&v22, v19, v18);
  v15 = (_BYTE *)v22;
  if ((v24 & 1) != 0)
    goto LABEL_22;
  v16 = v23;
  *(_BYTE *)(a3 + 24) &= ~1u;
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_25:
  if ((v21 & 1) != 0)
  {
    v17 = v20[0];
    v20[0] = 0;
    if (v17)
      (*(void (**)(_BYTE *))(*(_QWORD *)v17 + 8))(v17);
  }
}

uint64_t llvm::remarks::RemarkLinker::keep(uint64_t **a1, llvm::remarks::Remark **a2)
{
  llvm::remarks::StringTable::internalize((llvm::remarks::StringTable *)a1, *a2);
  return sub_1C5ABF8D0(a1 + 16, (int **)a2, (uint64_t *)a2)[4];
}

double llvm::remarks::RemarkLinker::setExternalFilePrependPath(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 152);
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(char *)(a1 + 175) < 0)
      operator delete(*v9);
    result = *(double *)&__dst;
    *(_OWORD *)v9 = __dst;
    *(_QWORD *)(a1 + 168) = v12;
  }
  else
  {
    result = *(double *)&__dst;
    *(_OWORD *)v9 = __dst;
    *(_QWORD *)(a1 + 168) = v12;
    *(_BYTE *)(a1 + 176) = 1;
  }
  return result;
}

void llvm::remarks::RemarkLinker::link(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  int v5;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  llvm::remarks::Remark *v20;
  int *v21;
  int *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  __int128 v29;
  char v30;
  char v31[16];
  void *__p;
  void *v33;
  char v34;
  char *v35;
  char *v36;
  llvm::remarks::Remark *v37;
  char v38;
  char *v39;
  char v40;
  uint64_t v41;

  v5 = a4;
  v41 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFF00000000) == 0)
  {
    llvm::remarks::magicToFormat(a2, a3, (uint64_t)&v39);
    if ((v40 & 1) != 0)
    {
      *a5 = v39;
      return;
    }
    v5 = (int)v39;
  }
  v31[0] = 0;
  v34 = 0;
  v10 = *(_BYTE *)(a1 + 176);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 152);
    v12 = *(_BYTE *)(a1 + 175);
    v13 = v12;
    if (v12 >= 0)
      v11 = a1 + 152;
    v14 = *(_QWORD *)(a1 + 160);
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v14 = v15;
    *(_QWORD *)&v29 = v11;
    *((_QWORD *)&v29 + 1) = v14;
    v10 = 1;
  }
  else
  {
    LOBYTE(v29) = 0;
  }
  v30 = v10;
  llvm::remarks::createRemarkParserFromMeta(v5, (uint64_t)a2, a3, (uint64_t)v31, &v29, (uint64_t)&v39);
  if (v34)
  {
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    v34 = 0;
  }
  v18 = v39;
  if ((v40 & 1) != 0)
  {
    v39 = 0;
    goto LABEL_42;
  }
  do
  {
    (**(void (***)(llvm::remarks::Remark **__return_ptr, char *))v18)(&v37, v18);
    v19 = v38;
    if ((v38 & 1) != 0)
    {
      v24 = (char *)v37;
      v37 = 0;
      *a5 = v24;
      if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v24 + 48))(v24, &llvm::remarks::EndOfFileError::ID))
      {
        *a5 = 0;
        v35 = v24;
        sub_1C4D62BD4(&v35, &v36);
        if (v35)
          (*(void (**)(char *))(*(_QWORD *)v35 + 8))(v35);
        v23 = 3;
      }
      else
      {
        v23 = 1;
      }
      goto LABEL_28;
    }
    *a5 = 0;
    v20 = v37;
    if (*((_BYTE *)v37 + 80))
    {
      v37 = 0;
      v28 = (int *)v20;
      llvm::remarks::StringTable::internalize((llvm::remarks::StringTable *)a1, v20);
      sub_1C5ABF8D0((uint64_t **)(a1 + 128), &v28, (uint64_t *)&v28);
      v21 = v28;
      v28 = 0;
      if (v21)
      {
        v22 = (int *)*((_QWORD *)v21 + 13);
        if (v22 != v21 + 30)
          free(v22);
        MEMORY[0x1CAA32FC0](v21, 0x10D2C401DAD59E6);
      }
      v23 = 0;
LABEL_28:
      v20 = v37;
      v19 = v38;
      goto LABEL_29;
    }
    v23 = 0;
LABEL_29:
    v37 = 0;
    if ((v19 & 1) != 0)
    {
      if (v20)
        (*(void (**)(llvm::remarks::Remark *))(*(_QWORD *)v20 + 8))(v20);
    }
    else if (v20)
    {
      v25 = (char *)*((_QWORD *)v20 + 13);
      if (v25 != (char *)v20 + 120)
        free(v25);
      MEMORY[0x1CAA32FC0](v20, 0x10D2C401DAD59E6);
    }
  }
  while (!v23);
  if (v23 == 3)
  {
    v18 = 0;
LABEL_42:
    *a5 = v18;
  }
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    v27 = 8;
    if ((v40 & 1) == 0)
      v27 = 16;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v26 + v27))(v26, v16, v17);
  }
}

void llvm::remarks::RemarkLinker::link(llvm::remarks *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, char **a4@<X8>)
{
  _DWORD *v7[2];
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::remarks::getRemarksSectionContents(this, this, (uint64_t)v7);
  if ((v9 & 1) != 0)
  {
    *a4 = (char *)v7[0];
  }
  else if (v8)
  {
    llvm::remarks::RemarkLinker::link(a2, v7[0], (unint64_t)v7[1], a3, a4);
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t llvm::remarks::RemarkLinker::serialize@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *v13;
  _QWORD v14[13];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = *(void **)a1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C4E854AC((uint64_t)v14, a1 + 24);
  v14[12] = *(_QWORD *)(a1 + 120);
  llvm::remarks::createRemarkSerializer(a2);
  free(v13);
  result = sub_1C4926AE8((uint64_t)v14);
  if ((v16 & 1) != 0)
  {
    *a3 = v15;
  }
  else
  {
    v7 = v15;
    v15 = 0;
    v8 = *(_QWORD **)(a1 + 128);
    v9 = (_QWORD *)(a1 + 136);
    if (v8 != v9)
    {
      do
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, v8[4]);
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != v9);
    }
    *a3 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    result = v15;
    v15 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t *sub_1C5ABF8D0(uint64_t **a1, int **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = (uint64_t)(a1 + 1);
LABEL_10:
    v9 = (uint64_t *)operator new(0x28uLL);
    v10 = *a3;
    *a3 = 0;
    v9[4] = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v8;
    *v6 = v9;
    v11 = (uint64_t *)**a1;
    v12 = v9;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v9;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t)v5;
      if (!sub_1C5ABF9B8(*a2, (int *)v5[4]))
        break;
      v5 = *(uint64_t **)v8;
      v6 = (uint64_t **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_10;
    }
    if (!sub_1C5ABF9B8(*(int **)(v8 + 32), *a2))
      break;
    v6 = (uint64_t **)(v8 + 8);
    v5 = *(uint64_t **)(v8 + 8);
    if (!v5)
      goto LABEL_10;
  }
  v9 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v9;
}

uint64_t sub_1C5ABF9B8(int *a1, int *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void *v7;
  size_t v8;
  const void *v9;
  int v10;
  int v11;
  BOOL v12;
  void *v13;
  size_t v14;
  const void *v15;
  int v16;
  int v17;
  BOOL v18;
  void *v19;
  size_t v20;
  const void *v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  void *__s2[2];
  void *v27[2];
  void *v28[2];
  _OWORD v29[2];
  __int128 v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[320];
  int v34;
  __int128 __s1;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[41];

  v42[40] = *MEMORY[0x1E0C80C00];
  v34 = *a1;
  __s1 = *(_OWORD *)(a1 + 2);
  v36 = *(_OWORD *)(a1 + 6);
  v37 = *(_OWORD *)(a1 + 10);
  v38[0] = *(_OWORD *)(a1 + 14);
  v38[1] = *(_OWORD *)(a1 + 18);
  v39 = *(_OWORD *)(a1 + 22);
  v40 = v42;
  v41 = 0x500000000;
  if (a1[28])
    sub_1C5AC008C((uint64_t)&v40, (uint64_t)(a1 + 26));
  v3 = *a2;
  v25 = *a2;
  *(_OWORD *)__s2 = *(_OWORD *)(a2 + 2);
  *(_OWORD *)v27 = *(_OWORD *)(a2 + 6);
  *(_OWORD *)v28 = *(_OWORD *)(a2 + 10);
  v29[0] = *(_OWORD *)(a2 + 14);
  v4 = *(_OWORD *)(a2 + 22);
  v29[1] = *(_OWORD *)(a2 + 18);
  v30 = v4;
  v31 = v33;
  v32 = 0x500000000;
  if (a2[28])
  {
    sub_1C5AC008C((uint64_t)&v31, (uint64_t)(a2 + 26));
    v3 = v25;
  }
  if (v34 < v3)
    goto LABEL_6;
  if (v3 >= v34)
  {
    v7 = (void *)*((_QWORD *)&__s1 + 1);
    if (__s2[1] >= (void *)*((_QWORD *)&__s1 + 1))
      v8 = *((_QWORD *)&__s1 + 1);
    else
      v8 = (size_t)__s2[1];
    if (v8)
    {
      v9 = (const void *)__s1;
      v10 = memcmp((const void *)__s1, __s2[0], v8);
      if (v10 < 0 || !v10 && v7 < __s2[1])
        goto LABEL_6;
      v11 = memcmp(__s2[0], v9, v8);
      if (v11 < 0)
        goto LABEL_8;
      if (v11 || (v12 = __s2[1] >= v7, __s2[1] == v7))
      {
LABEL_29:
        v13 = (void *)*((_QWORD *)&v36 + 1);
        if (v27[1] >= (void *)*((_QWORD *)&v36 + 1))
          v14 = *((_QWORD *)&v36 + 1);
        else
          v14 = (size_t)v27[1];
        if (v14)
        {
          v15 = (const void *)v36;
          v16 = memcmp((const void *)v36, v27[0], v14);
          if (v16 < 0 || !v16 && v13 < v27[1])
            goto LABEL_6;
          v17 = memcmp(v27[0], v15, v14);
          if (v17 < 0)
            goto LABEL_8;
          if (v17 || (v18 = v27[1] >= v13, v27[1] == v13))
          {
LABEL_44:
            v19 = (void *)*((_QWORD *)&v37 + 1);
            if (v28[1] >= (void *)*((_QWORD *)&v37 + 1))
              v20 = *((_QWORD *)&v37 + 1);
            else
              v20 = (size_t)v28[1];
            if (v20)
            {
              v21 = (const void *)v37;
              v22 = memcmp((const void *)v37, v28[0], v20);
              if (v22 < 0 || !v22 && v19 < v28[1])
                goto LABEL_6;
              v23 = memcmp(v28[0], v21, v20);
              if (v23 < 0)
                goto LABEL_8;
              if (v23 || (v24 = v28[1] >= v19, v28[1] == v19))
              {
LABEL_59:
                if ((sub_1C5ABFD38((uint64_t)v38, (uint64_t)v29) & 1) == 0)
                {
                  if ((sub_1C5ABFD38((uint64_t)v29, (uint64_t)v38) & 1) != 0)
                    goto LABEL_8;
                  if (BYTE8(v39) && BYTE8(v30))
                  {
                    if ((unint64_t)v39 < (unint64_t)v30)
                      goto LABEL_6;
                  }
                  else if (!BYTE8(v39) && BYTE8(v30))
                  {
                    goto LABEL_6;
                  }
                  if (BYTE8(v39) && BYTE8(v30))
                  {
                    if ((unint64_t)v30 < (unint64_t)v39)
                      goto LABEL_8;
                  }
                  else if (BYTE8(v39) && !BYTE8(v30))
                  {
                    goto LABEL_8;
                  }
                  if ((sub_1C5ABFE3C((__int128 *)v40, (__int128 *)v40 + 4 * (unint64_t)v41, (__int128 *)v31, (__int128 *)v31 + 4 * (unint64_t)v32) & 1) == 0)
                  {
                    sub_1C5ABFE3C((__int128 *)v31, (__int128 *)v31 + 4 * (unint64_t)v32, (__int128 *)v40, (__int128 *)v40 + 4 * (unint64_t)v41);
                    goto LABEL_8;
                  }
                }
LABEL_6:
                v5 = 1;
                goto LABEL_9;
              }
            }
            else
            {
              if ((void *)*((_QWORD *)&v37 + 1) < v28[1])
                goto LABEL_6;
              v24 = v28[1] >= (void *)*((_QWORD *)&v37 + 1);
            }
            if (!v24)
              goto LABEL_8;
            goto LABEL_59;
          }
        }
        else
        {
          if ((void *)*((_QWORD *)&v36 + 1) < v27[1])
            goto LABEL_6;
          v18 = v27[1] >= (void *)*((_QWORD *)&v36 + 1);
        }
        if (!v18)
          goto LABEL_8;
        goto LABEL_44;
      }
    }
    else
    {
      if ((void *)*((_QWORD *)&__s1 + 1) < __s2[1])
        goto LABEL_6;
      v12 = __s2[1] >= (void *)*((_QWORD *)&__s1 + 1);
    }
    if (!v12)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_8:
  v5 = 0;
LABEL_9:
  if (v31 != v33)
    free(v31);
  if (v40 != v42)
    free(v40);
  return v5;
}

uint64_t sub_1C5ABFD38(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  const void *v13;
  const void *v14;
  int v15;
  int v16;
  BOOL v17;
  _BOOL4 v20;

  v2 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v3 = 0;
  else
    v3 = v2 == 0;
  if (v3)
    return 0;
  if (*(_BYTE *)(a1 + 24))
    v4 = 1;
  else
    v4 = v2 == 0;
  if (!v4)
    return 1;
  if (*(_BYTE *)(a1 + 24) && v2 == 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  if (v9 >= v6)
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    if (v6 >= v9)
    {
      v17 = v9 >= v6;
      goto LABEL_28;
    }
    return 1;
  }
  v13 = *(const void **)a2;
  v14 = *(const void **)a1;
  v15 = memcmp(*(const void **)a1, *(const void **)a2, v12);
  if (v15 < 0 || !v15 && v6 < v9)
    return 1;
  v16 = memcmp(v13, v14, v12);
  if (v16 < 0)
    return 0;
  if (!v16)
  {
    v17 = v9 >= v6;
    if (v9 != v6)
    {
LABEL_28:
      if (v17)
        goto LABEL_30;
      return 0;
    }
  }
LABEL_30:
  v20 = v10 >= v7 && v8 < v11;
  return v7 < v10 || v20;
}

uint64_t sub_1C5ABFE3C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a3 == a4)
    return 0;
  v28 = v4;
  v29 = v5;
  v7 = a3;
  while (a1 != a2)
  {
    v10 = a1[1];
    v24 = *a1;
    v25 = v10;
    v11 = a1[3];
    v26 = a1[2];
    v27 = v11;
    v12 = v7[1];
    v20 = *v7;
    v21 = v12;
    v13 = v7[3];
    v22 = v7[2];
    v23 = v13;
    if ((sub_1C5ABFF44((uint64_t)&v24, (uint64_t)&v20) & 1) != 0)
      break;
    v14 = v7[1];
    v24 = *v7;
    v25 = v14;
    v15 = v7[3];
    v26 = v7[2];
    v27 = v15;
    v16 = a1[1];
    v20 = *a1;
    v21 = v16;
    v17 = a1[3];
    v22 = a1[2];
    v23 = v17;
    v18 = sub_1C5ABFF44((uint64_t)&v24, (uint64_t)&v20);
    result = 0;
    if ((v18 & 1) == 0)
    {
      v7 += 4;
      a1 += 4;
      if (v7 != a4)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t sub_1C5ABFF44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  const void *v7;
  const void *v8;
  int v9;
  int v11;
  BOOL v12;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  const void *v18;
  const void *v19;
  int v20;
  int v21;
  BOOL v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 8);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(const void **)a2;
    v8 = *(const void **)a1;
    v9 = memcmp(*(const void **)a1, *(const void **)a2, v6);
    if (v9 < 0)
      return 1;
    if (!v9 && v4 < v5)
      return 1;
    v11 = memcmp(v7, v8, v6);
    if (v11 < 0)
      return 0;
    v12 = v11 || v5 == v4;
    if (!v12 && v5 < v4)
      return 0;
  }
  else
  {
    if (v4 < v5)
      return 1;
    if (v5 < v4)
      return 0;
  }
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a2 + 24);
  if (v16 >= v15)
    v17 = *(_QWORD *)(a1 + 24);
  else
    v17 = *(_QWORD *)(a2 + 24);
  if (!v17)
  {
    if (v15 >= v16)
    {
      v22 = v16 >= v15;
      goto LABEL_38;
    }
    return 1;
  }
  v18 = *(const void **)(a2 + 16);
  v19 = *(const void **)(a1 + 16);
  v20 = memcmp(v19, v18, v17);
  if (v20 < 0 || !v20 && v15 < v16)
    return 1;
  v21 = memcmp(v18, v19, v17);
  if (v21 < 0)
    return 0;
  if (v21)
    return sub_1C5ABFD38(a1 + 32, a2 + 32);
  v22 = v16 >= v15;
  if (v16 == v15)
    return sub_1C5ABFD38(a1 + 32, a2 + 32);
LABEL_38:
  if (!v22)
    return 0;
  return sub_1C5ABFD38(a1 + 32, a2 + 32);
}

uint64_t sub_1C5AC008C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, v4 << 6);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, v5 << 6);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 64);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + (v5 << 6)), (const void *)(*(_QWORD *)a2 + (v5 << 6)), *(_QWORD *)a2 + (v6 << 6) - (*(_QWORD *)a2 + (v5 << 6)));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::remarks::ParsedStringTable::ParsedStringTable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v24;
  char v25;

  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  *(_OWORD *)a1 = v24;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a3)
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    do
    {
      v8 = v6;
      v25 = 0;
      v9 = llvm::StringRef::find((uint64_t *)&v24, &v25, 1uLL, 0);
      v10 = v9 + 1;
      if (v5 < v9 + 1)
        v10 = v5;
      if (v9 == -1)
        v6 = 0;
      else
        v6 += v10;
      v11 = v5 - v10;
      if (v9 == -1)
        v5 = 0;
      else
        v5 = v11;
      v12 = v8 - *(_QWORD *)a1;
      v13 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v7 >= v13)
      {
        v15 = (char *)*v4;
        v16 = (v7 - (_BYTE *)*v4) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          abort();
        v18 = v13 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            sub_1C4764EE4();
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = v21 + 8;
        while (v7 != v15)
        {
          v22 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v14;
        *(_QWORD *)(a1 + 32) = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v7 = v12;
        v14 = v7 + 8;
      }
      *(_QWORD *)(a1 + 24) = v14;
      v7 = v14;
      *(_QWORD *)&v24 = v6;
      *((_QWORD *)&v24 + 1) = v5;
    }
    while (v5);
  }
  return a1;
}

void llvm::remarks::ParsedStringTable::operator[](uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  const std::error_category *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void (**v19)(llvm::raw_ostream *__hidden);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *__p[2];
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;

  v6 = a1[2];
  v7 = (a1[3] - v6) >> 3;
  if (v7 <= a2)
  {
    v15 = std::generic_category();
    v16 = (a1[3] - a1[2]) >> 3;
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v20 = 0;
    v24 = 0;
    v25 = 0;
    v19 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v27 = __p;
    v26 = 0;
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v30[0] = &unk_1E813F0D8;
    v30[1] = "String with index %u is out of bounds (size = %u).";
    v30[2] = a2;
    v30[3] = v16;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v19, (uint64_t)v30);
    v17 = v27;
    v18 = operator new();
    v31 = 260;
    v30[0] = v17;
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v30, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 22;
    *(_QWORD *)(v18 + 40) = v15;
    *(_BYTE *)(v18 + 48) = 1;
    v19 = off_1E81A6E70;
    if (v26 == 1 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8077774924);
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
  }
  else
  {
    v8 = (uint64_t *)(v6 + 8 * a2);
    v11 = *v8;
    v9 = v8 + 1;
    v10 = v11;
    v12 = v7 - 1 == a2;
    v13 = *a1;
    if (v12)
      v9 = a1 + 1;
    v14 = *v9;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v13 + v10;
    *(_QWORD *)(a3 + 8) = v14 + ~v10;
  }
}

void llvm::remarks::createRemarkParser(int a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1C5AC04B8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  const char *v3;
  uint64_t v4[8];

  v4[0] = 22;
  v4[1] = (uint64_t)std::generic_category();
  v3 = "Unknown remark parser format.";
  sub_1C5DF1730((_BYTE **)&v3, v4, &v2);
  *(_BYTE *)(v0 + 8) |= 1u;
  result = v2;
  *(_QWORD *)v0 = v2;
  return result;
}

void sub_1C5AC0648(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[5];
  const char *v26;

  v25[0] = 22;
  v25[1] = (uint64_t)std::generic_category();
  v26 = "Unknown remark parser format.";
  sub_1C5DF1730((_BYTE **)&v26, v25, &v24);
  *(_BYTE *)(v23 + 8) |= 1u;
  *(_QWORD *)v23 = v24;
}

void llvm::remarks::createRemarkParserFromMeta(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  const char *v23;
  uint64_t v24;
  const std::error_category *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((a1 - 1) >= 2)
  {
    if (!a1)
    {
      v24 = 22;
      v25 = std::generic_category();
      v23 = "Unknown remark parser format.";
      sub_1C5DF1730((_BYTE **)&v23, &v24, &v10);
      *(_BYTE *)(a6 + 8) |= 1u;
      *(_QWORD *)a6 = v10;
      return;
    }
    LOBYTE(v13) = 0;
    v16 = 0;
    if (*(_BYTE *)(a4 + 40))
    {
      v9 = *(_OWORD *)(a4 + 16);
      v13 = *(_OWORD *)a4;
      *(_OWORD *)__p = v9;
      v15 = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      v16 = 1;
    }
    v11 = *a5;
    v12 = *((_QWORD *)a5 + 2);
    llvm::remarks::createBitstreamParserFromMeta(a2, a3, &v13, (uint64_t)&v11, (uint64_t)&v24);
    *(_BYTE *)(a6 + 8) = *(_BYTE *)(a6 + 8) & 0xFE | v25 & 1;
    *(_QWORD *)a6 = v24;
    v24 = 0;
    if (v16)
    {
      v8 = __p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        goto LABEL_14;
      }
    }
  }
  else
  {
    LOBYTE(v19) = 0;
    v22 = 0;
    if (*(_BYTE *)(a4 + 40))
    {
      v7 = *(_OWORD *)(a4 + 16);
      v19 = *(_OWORD *)a4;
      v20 = v7;
      v21 = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      v22 = 1;
    }
    v17 = *a5;
    v18 = *((_QWORD *)a5 + 2);
    llvm::remarks::createYAMLParserFromMeta(a2, a3, (uint64_t)&v19, (uint64_t)&v17, (uint64_t)&v24);
    *(_BYTE *)(a6 + 8) = *(_BYTE *)(a6 + 8) & 0xFE | v25 & 1;
    *(_QWORD *)a6 = v24;
    v24 = 0;
    if (v22)
    {
      v8 = (void *)v20;
      if ((_QWORD)v20)
      {
        *((_QWORD *)&v20 + 1) = v20;
LABEL_14:
        operator delete(v8);
      }
    }
  }
}

uint64_t LLVMRemarkParserCreateYAML(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  void *__p;
  char v8;

  v4 = operator new();
  v6[0] = 0;
  v8 = 0;
  sub_1C5AC0A24(v4, 1, a1, a2, (uint64_t)v6);
  if (v8 && __p)
    operator delete(__p);
  return v4;
}

uint64_t sub_1C5AC0A24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *__p[2];
  uint64_t v8;

  if (*(_BYTE *)(a5 + 40))
  {
    *(_OWORD *)__p = *(_OWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    llvm::remarks::createRemarkParser(a2);
    *(_QWORD *)a1 = v8;
    if (__p[0])
      operator delete(__p[0]);
  }
  else
  {
    llvm::remarks::createRemarkParser(a2);
    *(_QWORD *)a1 = v8;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

uint64_t LLVMRemarkParserCreateBitstream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  void *__p;
  char v8;

  v4 = operator new();
  v6[0] = 0;
  v8 = 0;
  sub_1C5AC0A24(v4, 3, a1, a2, (uint64_t)v6);
  if (v8 && __p)
    operator delete(__p);
  return v4;
}

char *LLVMRemarkParserGetNext(uint64_t a1)
{
  char v2;
  char *v3;
  char *v4;
  char *v5;
  void **v7;
  char *v8;
  std::string v9;
  char *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  (***(void (****)(char **__return_ptr))a1)(&v10);
  v2 = v11;
  v3 = v10;
  if ((v11 & 1) != 0 && (v10 = 0, v3))
  {
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v3 + 48))(v3, &llvm::remarks::EndOfFileError::ID))
    {
      v8 = v3;
      sub_1C4D62BD4(&v8, &v9.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (void **)(a1 + 8);
      v8 = v3;
      sub_1C61D2548(&v8, &v9);
      if (*(_BYTE *)(a1 + 32) && *(char *)(a1 + 31) < 0)
        operator delete(*v7);
      *(_OWORD *)v7 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&v9.__r_.__value_.__l + 2);
      memset(&v9, 0, sizeof(v9));
      *(_BYTE *)(a1 + 32) = 1;
    }
    if (v8)
      (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
    v3 = 0;
    v4 = v10;
    v2 = v11;
  }
  else
  {
    v4 = 0;
  }
  v10 = 0;
  if ((v2 & 1) != 0)
  {
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
  }
  else if (v4)
  {
    v5 = (char *)*((_QWORD *)v4 + 13);
    if (v5 != v4 + 120)
      free(v5);
    MEMORY[0x1CAA32FC0](v4, 0x10D2C401DAD59E6);
  }
  return v3;
}

uint64_t LLVMRemarkParserHasError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t LLVMRemarkParserGetErrorMessage(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t *LLVMRemarkParserDispose(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    if (*((_BYTE *)result + 32))
    {
      if (*((char *)result + 31) < 0)
        operator delete((void *)result[1]);
      *((_BYTE *)v1 + 32) = 0;
    }
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C5AC0D8C(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v5;
  __int128 v7;
  void *__p[2];
  uint64_t v9;
  char v10;

  v5 = a4[1];
  v7 = *a4;
  *(_OWORD *)__p = v5;
  v9 = *((_QWORD *)a4 + 4);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  v10 = 1;
  llvm::remarks::YAMLRemarkParser::YAMLRemarkParser((uint64_t)a1, a2, a3, (uint64_t)&v7);
  if (v10 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *a1 = &unk_1E8193C08;
  return a1;
}

uint64_t sub_1C5AC0E04@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *a2;
  LOBYTE(v9) = 0;
  v11 = 0;
  result = llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer(v6, a1, v7, (uint64_t)&v9);
  *a3 = result;
  if (v11)
  {
    free(v9);
    return sub_1C4926AE8((uint64_t)&v10);
  }
  return result;
}

void llvm::remarks::createRemarkSerializer(int a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_1C5AC0F10()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3[28];

  v3[0] = 22;
  v3[1] = (uint64_t)std::generic_category();
  v2 = "Unknown remark serializer format.";
  sub_1C5DF1730((_BYTE **)&v2, v3, &v1);
  *(_BYTE *)(v0 + 8) |= 1u;
  *(_QWORD *)v0 = v1;
}

uint64_t llvm::remarks::RemarkStreamer::RemarkStreamer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v12;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v4;
  if (*(_BYTE *)(a3 + 16))
  {
    v5 = *(const void **)a3;
    if (!*(_QWORD *)a3)
    {
      __dst = 0uLL;
      v12 = 0;
LABEL_14:
      *(_OWORD *)(a1 + 32) = __dst;
      *(_QWORD *)(a1 + 48) = v12;
      *(_BYTE *)(a1 + 56) = 1;
      return a1;
    }
    v6 = *(_QWORD *)(a3 + 8);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = v6;
      v12 = v9 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v12) = *(_QWORD *)(a3 + 8);
      p_dst = &__dst;
      if (!v6)
        goto LABEL_13;
    }
    memmove(p_dst, v5, v6);
LABEL_13:
    *((_BYTE *)p_dst + v6) = 0;
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void llvm::remarks::RemarkStreamer::setFilter(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  const std::error_category *v6;
  void **v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13[2];

  llvm::Regex::Regex((uint64_t)&v10, a2, a3, 0);
  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  if (v11)
  {
    sub_1C5E2A1F8(v11, v10, (uint64_t)__p);
    v6 = std::generic_category();
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v13[0] = 22;
    v13[1] = (uint64_t)v6;
    v12 = v7;
    sub_1C5DF1730((_BYTE **)&v12, v13, a4);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    sub_1C630F0A4(a1, (uint64_t)&v10);
    *a4 = 0;
  }
  llvm::Regex::~Regex((llvm::Regex *)&v10);
}

__n128 sub_1C5AC1304(__n128 *a1, int **a2, _WORD *a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED835A90, "remarks-section", 0xFuLL);
  result = *a1;
  xmmword_1ED835AB0 = (__int128)*a1;
  v7 = *a2;
  dword_1ED835B10 = **a2;
  byte_1ED835B24 = 1;
  dword_1ED835B20 = *v7;
  word_1ED835A9A = (32 * (*a3 & 3)) | word_1ED835A9A & 0xFF9F;
  return result;
}

uint64_t sub_1C5AC1388()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Emit a section containing remark diagnostics metadata. By default, this is enabled "
                                     "for the following formats: yaml-strtab, bitstream.";
  v4.n128_u64[1] = 133;
  v3 = &v2;
  v1 = 1;
  v2 = 0;
  sub_1C630F000(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED835A90, &dword_1C475E000);
}

uint64_t llvm::remarks::StringTable::StringTable(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  unsigned __int8 *v9[4];

  v9[3] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x1000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x400000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_1C64169E0;
  v3 = a2[3] - a2[2];
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v3 >> 3);
    do
    {
      llvm::remarks::ParsedStringTable::operator[](a2, v5, (uint64_t)v9);
      llvm::remarks::StringTable::add(a1, v9[0], (size_t)v9[1], (uint64_t)v8);
      ++v5;
    }
    while (v6 != v5);
  }
  return a1;
}

unint64_t *llvm::remarks::StringTable::internalize(llvm::remarks::StringTable *this, llvm::remarks::Remark *a2)
{
  unint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  __int128 v11;

  llvm::remarks::StringTable::add((uint64_t)this, *((unsigned __int8 **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)v10);
  *(_OWORD *)((char *)a2 + 8) = v11;
  llvm::remarks::StringTable::add((uint64_t)this, *((unsigned __int8 **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)v10);
  *(_OWORD *)((char *)a2 + 24) = v11;
  result = llvm::remarks::StringTable::add((uint64_t)this, *((unsigned __int8 **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)v10);
  *(_OWORD *)((char *)a2 + 40) = v11;
  if (*((_BYTE *)a2 + 80))
  {
    result = llvm::remarks::StringTable::add((uint64_t)this, *((unsigned __int8 **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)v10);
    *(_OWORD *)((char *)a2 + 56) = v11;
  }
  v5 = *((unsigned int *)a2 + 28);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)a2 + 13);
    v7 = v6 + (v5 << 6);
    v8 = v6 + 32;
    do
    {
      v9 = v8 - 32;
      llvm::remarks::StringTable::add((uint64_t)this, *(unsigned __int8 **)(v8 - 32), *(_QWORD *)(v8 - 24), (uint64_t)v10);
      *(_OWORD *)(v8 - 32) = v11;
      result = llvm::remarks::StringTable::add((uint64_t)this, *(unsigned __int8 **)(v8 - 16), *(_QWORD *)(v8 - 8), (uint64_t)v10);
      *(_OWORD *)(v8 - 16) = v11;
      if (*(_BYTE *)(v8 + 24))
      {
        result = llvm::remarks::StringTable::add((uint64_t)this, *(unsigned __int8 **)v8, *(_QWORD *)(v8 + 8), (uint64_t)v10);
        *(_OWORD *)v8 = v11;
      }
      v8 += 64;
    }
    while (v9 + 64 != v7);
  }
  return result;
}

_QWORD *llvm::remarks::YAMLParseError::YAMLParseError(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm ***a5, uint64_t a6)
{
  __int128 v9;
  _QWORD v10[4];
  __int16 v11;

  *a1 = off_1E8193B88;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v10[0] = a2;
  v10[1] = a3;
  v10[2] = 10;
  v11 = 1797;
  v9 = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 48) = sub_1C5AC1680;
  *(_QWORD *)(a4 + 56) = a1 + 1;
  llvm::yaml::Stream::printError(a5, a6, (llvm::Twine *)v10, 0);
  *(_OWORD *)(a4 + 48) = v9;
  return a1;
}

{
  __int128 v9;
  _QWORD v10[4];
  __int16 v11;

  *a1 = off_1E8193B88;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v10[0] = a2;
  v10[1] = a3;
  v10[2] = 10;
  v11 = 1797;
  v9 = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 48) = sub_1C5AC1680;
  *(_QWORD *)(a4 + 56) = a1 + 1;
  llvm::yaml::Stream::printError(a5, a6, (llvm::Twine *)v10, 0);
  *(_OWORD *)(a4 + 48) = v9;
  return a1;
}

void sub_1C5AC1680(llvm::SMDiagnostic *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = a2;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::SMDiagnostic::print(a1, 0, (llvm::raw_ostream *)&v4, 0, 1);
  v2 = v8;
  if ((unint64_t)v8 >= v7)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v4, 10);
  }
  else
  {
    ++v8;
    *v2 = 10;
  }
  v3 = v8 - v6;
  if (v8 != v6)
  {
    v8 = v6;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v4, v6, v3);
  }
  v4 = off_1E81A6E70;
  if (v11 == 1)
  {
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924, v3);
  }
}

void llvm::remarks::createYAMLParserFromMeta(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  const std::error_category *v17;
  void **v18;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  const void *v29;
  unint64_t v30;
  uint64_t v31;
  std::error_code v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  void **v37;
  __int16 v38;
  _QWORD *v39[4];
  __int16 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  void *__p;
  std::error_code v47;
  __int16 v48;
  _BYTE v49[32];
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  void **p_p;
  uint64_t v55;

  v6 = a2;
  v7 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  if (a2 < 7)
    goto LABEL_6;
  if (*(_DWORD *)a1 != 1095583058 || *(_DWORD *)(a1 + 3) != 1397445185)
    goto LABEL_6;
  if (a2 < 8 || *(_BYTE *)(a1 + 7))
  {
    *(_QWORD *)v49 = 92;
    *(_QWORD *)&v49[8] = std::generic_category();
    v14 = "Expecting \\0 after magic number.";
LABEL_20:
    *(_QWORD *)&v42 = v14;
    sub_1C5DF1730((_BYTE **)&v42, (uint64_t *)v49, (_QWORD *)a5);
    *(_BYTE *)(a5 + 8) |= 1u;
    return;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    *(_QWORD *)v49 = 92;
    *(_QWORD *)&v49[8] = std::generic_category();
    *(_QWORD *)&v42 = "Expecting version number.";
    sub_1C5DF1730((_BYTE **)&v42, (uint64_t *)v49, v39);
    v15 = v39[0];
LABEL_27:
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v15;
    return;
  }
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = std::generic_category();
    __p = 0;
    *(_QWORD *)&v47.__val_ = 0;
    v47.__cat_ = 0;
    *(_DWORD *)&v49[8] = 0;
    v51 = 0;
    v52 = 0;
    *(_QWORD *)v49 = &unk_1E81A7208;
    p_p = &__p;
    v53 = 0;
    v50 = 0;
    *(_OWORD *)&v49[16] = 0uLL;
    *(_QWORD *)&v42 = &unk_1E8169BA8;
    *((_QWORD *)&v42 + 1) = "Mismatching remark version. Got %lld, expected %lld.";
    v43 = v16;
    v44 = 0;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v49, (uint64_t)&v42);
    v18 = p_p;
    v15 = (_QWORD *)operator new();
    v45 = 260;
    *(_QWORD *)&v42 = v18;
    *v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v42, v15 + 1);
    v15[4] = 92;
    v15[5] = v17;
    *((_BYTE *)v15 + 48) = 1;
    *(_QWORD *)v49 = off_1E81A6E70;
    if (v53 == 1 && *(_QWORD *)&v49[16])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v49[16], 0x1000C8077774924);
    if (SHIBYTE(v47.__cat_) < 0)
      operator delete(__p);
    goto LABEL_27;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0x10)
  {
    *(_QWORD *)v49 = 92;
    *(_QWORD *)&v49[8] = std::generic_category();
    v14 = "Expecting string table size.";
    goto LABEL_20;
  }
  v20 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 24;
  v6 = a2 - 24;
  if (v20)
  {
    if (*(_BYTE *)(a3 + 40))
    {
      *(_QWORD *)v49 = 92;
      *(_QWORD *)&v49[8] = std::generic_category();
      *(_QWORD *)&v42 = "String table already provided.";
      sub_1C5DF1730((_BYTE **)&v42, (uint64_t *)v49, &v41);
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v41;
      return;
    }
    v21 = v6 >= v20;
    v6 -= v20;
    if (!v21)
    {
      *(_QWORD *)v49 = 92;
      *(_QWORD *)&v49[8] = std::generic_category();
      v14 = "Expecting string table.";
      goto LABEL_20;
    }
    llvm::remarks::ParsedStringTable::ParsedStringTable((uint64_t)v49, v7, v20);
    v7 += v20;
    v22 = *(_QWORD *)&v49[8];
    v23 = *(_QWORD *)&v49[24];
    v24 = *(_QWORD *)&v49[16];
    v25 = v50;
    v26 = *(unsigned __int8 *)(a3 + 40);
    *(_QWORD *)a3 = *(_QWORD *)v49;
    *(_QWORD *)(a3 + 8) = v22;
    if (v26)
    {
      v27 = *(void **)(a3 + 16);
      if (v27)
      {
        *(_QWORD *)(a3 + 24) = v27;
        v33 = v24;
        v34 = v23;
        operator delete(v27);
        v24 = v33;
        v23 = v34;
      }
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v23;
      *(_QWORD *)(a3 + 32) = v25;
    }
    else
    {
      *(_QWORD *)(a3 + 16) = v24;
      *(_QWORD *)(a3 + 24) = v23;
      *(_QWORD *)(a3 + 32) = v25;
      *(_BYTE *)(a3 + 40) = 1;
    }
  }
  if (v6 >= 3 && *(_WORD *)v7 == 11565 && *(_BYTE *)(v7 + 2) == 45)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)v49 = &v49[24];
  *(_OWORD *)&v49[8] = xmmword_1C8667FC0;
  if (*(_BYTE *)(a4 + 16))
  {
    v29 = *(const void **)a4;
    v30 = *(_QWORD *)(a4 + 8);
    if (v30 >= 0x51)
    {
      v35 = v29;
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v49, &v49[24], v30, 1);
      v29 = v35;
      v31 = *(_QWORD *)&v49[8];
    }
    else
    {
      v31 = 0;
      if (!v30)
      {
LABEL_49:
        *(_QWORD *)&v49[8] = v31 + v30;
        goto LABEL_50;
      }
    }
    memcpy((void *)(*(_QWORD *)v49 + v31), v29, v30);
    v31 = *(_QWORD *)&v49[8];
    goto LABEL_49;
  }
LABEL_50:
  v45 = 261;
  *(_QWORD *)&v42 = v7;
  *((_QWORD *)&v42 + 1) = v6;
  v48 = 257;
  v40 = 257;
  v38 = 257;
  llvm::sys::path::append(v49, 0, (_QWORD **)&v42, (_QWORD **)&__p, v39, &v37);
  v45 = 261;
  v42 = *(_OWORD *)v49;
  sub_1C5E1F6CC((unsigned __int8 *)&v42, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&__p);
  if (((uint64_t)v47.__cat_ & 1) == 0)
  {
    std::system_category();
    v10 = __p;
    goto LABEL_53;
  }
  v10 = __p;
  if (!(_DWORD)__p)
  {
LABEL_53:
    v7 = v10[1];
    v6 = v10[2] - v7;
    if (*(_BYTE **)v49 != &v49[24])
      free(*(void **)v49);
LABEL_7:
    if (*(_BYTE *)(a3 + 40))
    {
      v11 = (_QWORD *)operator new();
      v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v49 = *(_OWORD *)a3;
      *(_OWORD *)&v49[16] = v12;
      v50 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      sub_1C5AC0D8C(v11, v7, v6, (__int128 *)v49);
      if (*(_QWORD *)&v49[16])
      {
        *(_QWORD *)&v49[24] = *(_QWORD *)&v49[16];
        operator delete(*(void **)&v49[16]);
      }
      if (!v10)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)operator new();
      llvm::remarks::YAMLRemarkParser::YAMLRemarkParser((uint64_t)v11, v7, v6);
      if (!v10)
      {
LABEL_15:
        *(_BYTE *)(a5 + 8) &= ~1u;
        *(_QWORD *)a5 = v11;
        return;
      }
    }
    v13 = v11[26];
    v11[26] = v10;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_15;
  }
  *(_QWORD *)&v32.__val_ = *(_QWORD *)&v47.__val_;
  v45 = 261;
  v42 = *(_OWORD *)v49;
  sub_1C61D45C4((llvm *)__p, v32, (llvm::Twine *)&v42, &v36);
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v36;
  v36 = 0;
  if (*(_BYTE **)v49 != &v49[24])
    free(*(void **)v49);
}

uint64_t llvm::remarks::YAMLRemarkParser::YAMLRemarkParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[16];
  void *__p;
  void *v7;
  char v8;

  v5[0] = 0;
  v8 = 0;
  llvm::remarks::YAMLRemarkParser::YAMLRemarkParser(a1, a2, a3, (uint64_t)v5);
  if (v8 && __p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

{
  _BYTE v5[16];
  void *__p;
  void *v7;
  char v8;

  v5[0] = 0;
  v8 = 0;
  llvm::remarks::YAMLRemarkParser::YAMLRemarkParser(a1, a2, a3, (uint64_t)v5);
  if (v8 && __p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return a1;
}

uint64_t llvm::remarks::YAMLRemarkParser::YAMLRemarkParser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E8193BD8;
  *(_BYTE *)(a1 + 40) = 0;
  v7 = a1 + 40;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a4 + 40))
    sub_1C5AC3D6C(v7, a4);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 160) = sub_1C5AC1680;
  *(_QWORD *)(a1 + 168) = a1 + 88;
  v8 = llvm::yaml::Stream::Stream((uint64_t *)(a1 + 184), a2, a3, a1 + 112, 1, 0);
  *(_QWORD *)(a1 + 200) = llvm::yaml::Stream::begin((llvm::yaml::Stream *)v8);
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

__n128 llvm::remarks::YAMLRemarkParser::error@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  llvm ***v10;
  _QWORD *v11;
  __n128 result;
  __n128 v13;
  _QWORD v14[4];
  __int16 v15;

  v10 = (llvm ***)(a1 + 184);
  v11 = (_QWORD *)operator new();
  *v11 = off_1E8193B88;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = 10;
  v15 = 1797;
  v13 = *(__n128 *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = sub_1C5AC1680;
  *(_QWORD *)(a1 + 168) = v11 + 1;
  llvm::yaml::Stream::printError(v10, a4, (llvm::Twine *)v14, 0);
  result = v13;
  *(__n128 *)(a1 + 160) = v13;
  *a5 = v11;
  return result;
}

uint64_t llvm::remarks::YAMLRemarkParser::error@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v4;
  BOOL v5;
  const void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  if ((*(char *)(this + 111) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 111))
      goto LABEL_3;
LABEL_14:
    *a2 = 0;
    return this;
  }
  if (!*(_QWORD *)(this + 96))
    goto LABEL_14;
LABEL_3:
  this = operator new();
  v4 = *(_BYTE *)(v2 + 111);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (const void *)(v2 + 88);
  else
    v6 = *(const void **)(v2 + 88);
  v7 = v4 & 0x7F;
  if (v5)
    v8 = *(_QWORD *)(v2 + 96);
  else
    v8 = v7;
  *(_QWORD *)this = off_1E8193B88;
  v9 = (void *)(this + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = (_QWORD *)this;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v9 = operator new(v11 + 1);
    v10[2] = v8;
    v10[3] = v12 | 0x8000000000000000;
    v10[1] = v9;
    goto LABEL_18;
  }
  *(_BYTE *)(this + 31) = v8;
  if (v8)
LABEL_18:
    this = (uint64_t)memmove(v9, v6, v8);
  *((_BYTE *)v9 + v8) = 0;
  *a2 = v10;
  if (*(char *)(v2 + 111) < 0)
  {
    **(_BYTE **)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 88) = 0;
    *(_BYTE *)(v2 + 111) = 0;
  }
  return this;
}

__n128 llvm::remarks::YAMLRemarkParser::parseRemark@<Q0>(llvm::remarks::YAMLRemarkParser *this@<X0>, llvm::yaml::Document *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  llvm::yaml::KeyValueNode *v10;
  unint64_t Value;
  llvm::yaml::SequenceNode *v12;
  llvm::yaml::Node *v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v22;
  _OWORD *v23;
  const char *v24;
  char v25;
  const std::error_category *v26;
  void *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  char v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  _BYTE v39[24];
  char v40;
  __int16 v41;
  char v42;
  const char *v43;
  uint64_t v44;
  char v45;
  const char *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  llvm::remarks::YAMLRemarkParser::error((uint64_t)this, v39);
  v7 = *(_QWORD *)v39;
  if (*(_QWORD *)v39)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
LABEL_3:
    *(_QWORD *)a3 = v7;
    return result;
  }
  v8 = *((_QWORD *)a2 + 13);
  if (!v8)
  {
    v8 = llvm::yaml::Document::parseBlockNode((llvm::yaml::Scanner ***)a2);
    *((_QWORD *)a2 + 13) = v8;
    if (!v8)
    {
      v26 = std::generic_category();
      *(_QWORD *)v39 = 22;
      *(_QWORD *)&v39[8] = v26;
      v43 = "not a valid YAML file.";
      sub_1C5DF1730((_BYTE **)&v43, (uint64_t *)v39, &v38);
      *(_BYTE *)(a3 + 8) |= 1u;
      v7 = v38;
      goto LABEL_3;
    }
  }
  if (*(_DWORD *)(v8 + 32) != 4)
  {
    v28 = (_QWORD *)operator new();
    *v28 = off_1E8193B88;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0;
    *(_QWORD *)v39 = "document root is not of mapping type.";
    *(_OWORD *)&v39[8] = xmmword_1C8668410;
    v41 = 1797;
    v35 = *((__n128 *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v28 + 1;
    llvm::yaml::Stream::printError((llvm ***)this + 23, v8, (llvm::Twine *)v39, 0);
    result = v35;
    *((__n128 *)this + 10) = v35;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v28;
    return result;
  }
  v9 = operator new();
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(_OWORD *)(v9 + 416) = 0u;
  *(_QWORD *)(v9 + 432) = 0;
  *(_QWORD *)(v9 + 104) = v9 + 120;
  *(_DWORD *)(v9 + 116) = 5;
  result = llvm::remarks::YAMLRemarkParser::parseType(this, (llvm::yaml::MappingNode *)v8, (uint64_t)&v46);
  if ((v47 & 1) != 0)
  {
    v24 = v46;
    v46 = 0;
    v25 = *(_BYTE *)(a3 + 8);
LABEL_57:
    *(_BYTE *)(a3 + 8) = v25 | 1;
    *(_QWORD *)a3 = v24;
    goto LABEL_58;
  }
  *(_DWORD *)v9 = (_DWORD)v46;
  *(_BYTE *)(v8 + 76) = 0;
  llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)v8);
  v10 = *(llvm::yaml::KeyValueNode **)(v8 + 80);
  if (!v10)
  {
LABEL_47:
    if (*(_DWORD *)v9 && *(_QWORD *)(v9 + 16) && *(_QWORD *)(v9 + 32) && *(_QWORD *)(v9 + 48))
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = v9;
      v9 = 0;
    }
    else
    {
      v29 = *((_QWORD *)a2 + 13);
      if (!v29)
      {
        v29 = llvm::yaml::Document::parseBlockNode((llvm::yaml::Scanner ***)a2);
        *((_QWORD *)a2 + 13) = v29;
      }
      v30 = (_QWORD *)operator new();
      *v30 = off_1E8193B88;
      v30[1] = 0;
      v30[2] = 0;
      v30[3] = 0;
      *(_QWORD *)v39 = "Type, Pass, Name or Function missing.";
      *(_OWORD *)&v39[8] = xmmword_1C8668410;
      v41 = 1797;
      v36 = *((__n128 *)this + 10);
      *((_QWORD *)this + 20) = sub_1C5AC1680;
      *((_QWORD *)this + 21) = v30 + 1;
      llvm::yaml::Stream::printError((llvm ***)this + 23, v29, (llvm::Twine *)v39, 0);
      result = v36;
      *((__n128 *)this + 10) = v36;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v30;
    }
    goto LABEL_58;
  }
  v34 = *(_BYTE *)(a3 + 8);
  while (1)
  {
    llvm::remarks::YAMLRemarkParser::parseKey(this, v10, (uint64_t)&v43);
    if ((v45 & 1) != 0)
    {
      v24 = v43;
      goto LABEL_56;
    }
    if (v44 != 8)
      break;
    if (*(_QWORD *)v43 == 0x6E6F6974636E7546)
    {
      (*(void (**)(_BYTE *__return_ptr, llvm::remarks::YAMLRemarkParser *, llvm::yaml::KeyValueNode *))(*(_QWORD *)this + 24))(v39, this, v10);
      if ((v39[16] & 1) != 0)
        goto LABEL_54;
      v22 = *(_OWORD *)v39;
      v23 = (_OWORD *)(v9 + 40);
      goto LABEL_45;
    }
    if (*(_QWORD *)v43 != 0x636F4C6775626544)
      goto LABEL_67;
    result = llvm::remarks::YAMLRemarkParser::parseDebugLoc((llvm ***)this, v10, (uint64_t)v39);
    if ((v40 & 1) != 0)
    {
LABEL_54:
      v24 = *(const char **)v39;
LABEL_56:
      v25 = v34;
      goto LABEL_57;
    }
    v20 = *(unsigned __int8 *)(v9 + 80);
    *(_OWORD *)(v9 + 56) = *(_OWORD *)v39;
    *(_QWORD *)(v9 + 72) = *(_QWORD *)&v39[16];
    if (!v20)
      *(_BYTE *)(v9 + 80) = 1;
LABEL_46:
    llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)v8);
    v10 = *(llvm::yaml::KeyValueNode **)(v8 + 80);
    if (!v10)
      goto LABEL_47;
  }
  if (v44 == 7)
  {
    if (*(_DWORD *)v43 != 1853124424 || *(_DWORD *)(v43 + 3) != 1936942446)
    {
LABEL_67:
      v31 = (_QWORD *)operator new();
      *v31 = off_1E8193B88;
      v31[1] = 0;
      v32 = v31 + 1;
      v31[2] = 0;
      v31[3] = 0;
      *(_QWORD *)v39 = "unknown key.";
      v33 = xmmword_1C8668430;
      goto LABEL_68;
    }
    llvm::remarks::YAMLRemarkParser::parseUnsigned(this, v10, (uint64_t)v39);
    if ((v39[8] & 1) != 0)
      goto LABEL_54;
    if (!*(_BYTE *)(v9 + 96))
      *(_BYTE *)(v9 + 96) = 1;
    *(_QWORD *)(v9 + 88) = *(unsigned int *)v39;
    goto LABEL_46;
  }
  if (v44 != 4)
    goto LABEL_67;
  if (*(_DWORD *)v43 == 1936941392)
  {
    (*(void (**)(_BYTE *__return_ptr, llvm::remarks::YAMLRemarkParser *, llvm::yaml::KeyValueNode *))(*(_QWORD *)this + 24))(v39, this, v10);
    if ((v39[16] & 1) != 0)
      goto LABEL_54;
    v22 = *(_OWORD *)v39;
    v23 = (_OWORD *)(v9 + 8);
LABEL_45:
    *v23 = v22;
    goto LABEL_46;
  }
  if (*(_DWORD *)v43 == 1701667150)
  {
    (*(void (**)(_BYTE *__return_ptr, llvm::remarks::YAMLRemarkParser *, llvm::yaml::KeyValueNode *))(*(_QWORD *)this + 24))(v39, this, v10);
    if ((v39[16] & 1) != 0)
      goto LABEL_54;
    v22 = *(_OWORD *)v39;
    v23 = (_OWORD *)(v9 + 24);
    goto LABEL_45;
  }
  if (*(_DWORD *)v43 != 1936159297)
    goto LABEL_67;
  Value = llvm::yaml::KeyValueNode::getValue(v10);
  if (Value)
  {
    v12 = (llvm::yaml::SequenceNode *)Value;
    if (*(_DWORD *)(Value + 32) == 5)
    {
      *(_BYTE *)(Value + 76) = 0;
      while (1)
      {
        llvm::yaml::SequenceNode::increment(v12);
        v13 = (llvm::yaml::Node *)*((_QWORD *)v12 + 10);
        if (!v13)
          goto LABEL_46;
        result = llvm::remarks::YAMLRemarkParser::parseArg((__n128 *)this, v13, (uint64_t)v39);
        if ((v42 & 1) != 0)
          goto LABEL_54;
        v14 = (__int128 *)sub_1C54002E4(v9 + 104, (unint64_t)v39, 1);
        v15 = (_OWORD *)(*(_QWORD *)(v9 + 104) + ((unint64_t)*(unsigned int *)(v9 + 112) << 6));
        v16 = *v14;
        v17 = v14[1];
        v18 = v14[3];
        v15[2] = v14[2];
        v15[3] = v18;
        *v15 = v16;
        v15[1] = v17;
        ++*(_DWORD *)(v9 + 112);
        if ((v42 & 1) != 0)
        {
          v19 = *(_QWORD *)v39;
          *(_QWORD *)v39 = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
    }
  }
  v31 = (_QWORD *)operator new();
  *v31 = off_1E8193B88;
  v31[1] = 0;
  v32 = v31 + 1;
  v31[2] = 0;
  v31[3] = 0;
  *(_QWORD *)v39 = "wrong value type for key.";
  v33 = xmmword_1C8668420;
LABEL_68:
  *(_OWORD *)&v39[8] = v33;
  v41 = 1797;
  v37 = *((__n128 *)this + 10);
  *((_QWORD *)this + 20) = sub_1C5AC1680;
  *((_QWORD *)this + 21) = v32;
  llvm::yaml::Stream::printError((llvm ***)this + 23, (uint64_t)v10, (llvm::Twine *)v39, 0);
  result = v37;
  *((__n128 *)this + 10) = v37;
  *(_BYTE *)(a3 + 8) = v34 | 1;
  *(_QWORD *)a3 = v31;
LABEL_58:
  if (v9)
  {
    v27 = *(void **)(v9 + 104);
    if (v27 != (void *)(v9 + 120))
      free(v27);
    MEMORY[0x1CAA32FC0](v9, 0x10D2C401DAD59E6);
  }
  return result;
}

__n128 llvm::remarks::YAMLRemarkParser::parseType@<Q0>(llvm::remarks::YAMLRemarkParser *this@<X0>, llvm::yaml::MappingNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v22;
  _QWORD *v23;
  __n128 result;
  __n128 v25;
  const char *v26;
  __int128 v27;
  __int16 v28;

  v6 = (uint64_t *)*((_QWORD *)a2 + 7);
  switch(*((_QWORD *)a2 + 8))
  {
    case 7:
      v7 = *(_DWORD *)v6 == 1935757345 && *(_DWORD *)((char *)v6 + 3) == 1684370291;
      if (v7)
      {
        v8 = 0x100000001;
      }
      else
      {
        v7 = (*(_DWORD *)v6 ^ 0x73694D21 | *(_DWORD *)((char *)v6 + 3) ^ 0x64657373) == 0;
        v8 = 0x100000002;
        if (!v7)
          v8 = 0;
      }
      break;
    case 8:
      if (*v6 == 0x6572756C69614621)
        v8 = 0x100000006;
      else
        v8 = 0;
      break;
    case 9:
      v9 = *v6;
      v10 = *((unsigned __int8 *)v6 + 8);
      if (v9 != 0x6973796C616E4121 || v10 != 115)
        goto LABEL_43;
      v8 = 0x100000003;
      break;
    case 0x11:
      v12 = *v6;
      v13 = v6[1];
      v14 = *((unsigned __int8 *)v6 + 16);
      if (v12 != 0x6973796C616E4121 || v13 != 0x6E697361696C4173 || v14 != 103)
        goto LABEL_43;
      v8 = 0x100000005;
      break;
    case 0x12:
      v17 = *v6;
      v18 = v6[1];
      v19 = *((unsigned __int16 *)v6 + 8);
      if (v17 != 0x6973796C616E4121 || v18 != 0x756D6D6F43504673 || v19 != 25972)
        goto LABEL_43;
      v8 = 0x100000004;
      break;
    default:
      goto LABEL_43;
  }
  if (HIDWORD(v8))
    v22 = (_DWORD)v8 == 0;
  else
    v22 = 1;
  if (v22)
  {
LABEL_43:
    v23 = (_QWORD *)operator new();
    *v23 = off_1E8193B88;
    v23[1] = 0;
    v23[2] = 0;
    v23[3] = 0;
    v26 = "expected a remark tag.";
    v27 = xmmword_1C8668440;
    v28 = 1797;
    v25 = *((__n128 *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v23 + 1;
    llvm::yaml::Stream::printError((llvm ***)this + 23, (uint64_t)a2, (llvm::Twine *)&v26, 0);
    result = v25;
    *((__n128 *)this + 10) = v25;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v23;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = v8;
  }
  return result;
}

uint64_t llvm::remarks::YAMLRemarkParser::parseKey@<X0>(llvm::remarks::YAMLRemarkParser *this@<X0>, llvm::yaml::KeyValueNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  const char *v10;
  __int128 v11;
  __int16 v12;

  result = llvm::yaml::KeyValueNode::getKey(a2);
  if (result && *(_DWORD *)(result + 32) == 1)
  {
    v8 = *(_QWORD **)(result + 72);
    v7 = *(_QWORD *)(result + 80);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = v7;
  }
  else
  {
    v8 = (_QWORD *)operator new();
    *v8 = off_1E8193B88;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    v10 = "key is not a string.";
    v11 = xmmword_1C8668450;
    v12 = 1797;
    v9 = *((_OWORD *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v8 + 1;
    result = llvm::yaml::Stream::printError((llvm ***)this + 23, (uint64_t)a2, (llvm::Twine *)&v10, 0);
    *((_OWORD *)this + 10) = v9;
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  *(_QWORD *)a3 = v8;
  return result;
}

void llvm::remarks::YAMLRemarkParser::parseUnsigned(llvm::remarks::YAMLRemarkParser *this@<X0>, llvm::yaml::KeyValueNode *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t Value;
  llvm::yaml::KeyValueNode *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  llvm ***v16;
  llvm::yaml::KeyValueNode *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  __int128 v23;
  __int16 v24;

  v19 = &v21;
  v20 = xmmword_1C6612EF0;
  Value = llvm::yaml::KeyValueNode::getValue(a2);
  if (Value && (v7 = (llvm::yaml::KeyValueNode *)Value, *(_DWORD *)(Value + 32) == 1))
  {
    v8 = llvm::yaml::ScalarNode::getValue(Value, (uint64_t *)&v19);
    if (v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = *(unsigned __int8 *)v8;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 97) >= 0x1A)
          {
            if ((v11 - 65) > 0x19)
              break;
            v12 = -55;
          }
          else
          {
            v12 = -87;
          }
        }
        else
        {
          v12 = -48;
        }
        v13 = v12 + v11;
        if (v13 > 9)
          break;
        v14 = 10 * v10 + v13;
        if (v10 > v14 / 0xA)
          break;
        ++v8;
        v10 = v14;
        if (!--v9)
        {
          if (HIDWORD(v14))
            break;
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_DWORD *)a3 = v14;
          goto LABEL_20;
        }
      }
    }
    v15 = (_QWORD *)operator new();
    *v15 = off_1E8193B88;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = 0;
    v22 = "expected a value of integer type.";
    v23 = xmmword_1C8668460;
    v24 = 1797;
    v18 = *((_OWORD *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v15 + 1;
    v16 = (llvm ***)((char *)this + 184);
    v17 = v7;
  }
  else
  {
    v15 = (_QWORD *)operator new();
    *v15 = off_1E8193B88;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = 0;
    v22 = "expected a value of scalar type.";
    v23 = xmmword_1C8668470;
    v24 = 1797;
    v18 = *((_OWORD *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v15 + 1;
    v16 = (llvm ***)((char *)this + 184);
    v17 = a2;
  }
  llvm::yaml::Stream::printError(v16, (uint64_t)v17, (llvm::Twine *)&v22, 0);
  *((_OWORD *)this + 10) = v18;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v15;
LABEL_20:
  if (v19 != &v21)
    free(v19);
}

__n128 llvm::remarks::YAMLRemarkParser::parseDebugLoc@<Q0>(llvm ***this@<X0>, llvm::yaml::KeyValueNode *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t Value;
  llvm::yaml::MappingNode *v7;
  llvm::yaml::KeyValueNode *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __n128 result;
  uint64_t v16;
  _QWORD *v17;
  llvm ***v18;
  llvm::yaml::KeyValueNode *v19;
  _QWORD *v20;
  llvm::yaml::KeyValueNode *v21;
  char v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  _BYTE v29[24];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Value = llvm::yaml::KeyValueNode::getValue(a2);
  if (Value && (v7 = (llvm::yaml::MappingNode *)Value, *(_DWORD *)(Value + 32) == 4))
  {
    v21 = a2;
    *(_BYTE *)(Value + 76) = 0;
    llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)Value);
    v8 = (llvm::yaml::KeyValueNode *)*((_QWORD *)v7 + 10);
    if (v8)
    {
      v9 = 0;
      v22 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        llvm::remarks::YAMLRemarkParser::parseKey((llvm::remarks::YAMLRemarkParser *)this, v8, (uint64_t)&v25);
        if ((v27 & 1) != 0)
        {
          v16 = v25;
LABEL_28:
          *(_BYTE *)(a3 + 24) |= 1u;
          *(_QWORD *)a3 = v16;
          return result;
        }
        if (v26 == 6)
        {
          if (*(_DWORD *)v25 != 1970040643 || *(_WORD *)(v25 + 4) != 28269)
          {
LABEL_33:
            v20 = (_QWORD *)operator new();
            *v20 = off_1E8193B88;
            v20[1] = 0;
            v20[2] = 0;
            v20[3] = 0;
            *(_QWORD *)v29 = "unknown entry in DebugLoc map.";
            *(_OWORD *)&v29[8] = xmmword_1C8668480;
            v30 = 1797;
            v24 = *((__n128 *)this + 10);
            this[20] = (llvm **)sub_1C5AC1680;
            this[21] = (llvm **)(v20 + 1);
            llvm::yaml::Stream::printError(this + 23, (uint64_t)v8, (llvm::Twine *)v29, 0);
            result = v24;
            *((__n128 *)this + 10) = v24;
            *(_BYTE *)(a3 + 24) |= 1u;
            *(_QWORD *)a3 = v20;
            return result;
          }
          llvm::remarks::YAMLRemarkParser::parseUnsigned((llvm::remarks::YAMLRemarkParser *)this, v8, (uint64_t)v29);
          if ((v29[8] & 1) != 0)
            goto LABEL_27;
          v13 = *(_DWORD *)v29;
          v12 = 1;
        }
        else
        {
          if (v26 != 4)
            goto LABEL_33;
          if (*(_DWORD *)v25 == 1701603654)
          {
            ((void (*)(_BYTE *__return_ptr, llvm ***, llvm::yaml::KeyValueNode *))(*this)[3])(v29, this, v8);
            if ((v29[16] & 1) != 0)
              goto LABEL_27;
            v22 = v29[0];
            v28[0] = *(_QWORD *)&v29[1];
            *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)&v29[8];
            v9 = 1;
          }
          else
          {
            if (*(_DWORD *)v25 != 1701734732)
              goto LABEL_33;
            llvm::remarks::YAMLRemarkParser::parseUnsigned((llvm::remarks::YAMLRemarkParser *)this, v8, (uint64_t)v29);
            if ((v29[8] & 1) != 0)
            {
LABEL_27:
              v16 = *(_QWORD *)v29;
              goto LABEL_28;
            }
            v11 = *(_DWORD *)v29;
            v10 = 1;
          }
        }
        llvm::yaml::MappingNode::increment(v7);
        v8 = (llvm::yaml::KeyValueNode *)*((_QWORD *)v7 + 10);
      }
      while (v8);
      if (v9 && v10 && v12)
      {
        *(_QWORD *)(a3 + 1) = v28[0];
        *(_QWORD *)(a3 + 8) = *(_QWORD *)((char *)v28 + 7);
        *(_BYTE *)(a3 + 24) &= ~1u;
        *(_BYTE *)a3 = v22;
        *(_DWORD *)(a3 + 16) = v11;
        *(_DWORD *)(a3 + 20) = v13;
        return result;
      }
    }
    v17 = (_QWORD *)operator new();
    *v17 = off_1E8193B88;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = 0;
    *(_QWORD *)v29 = "DebugLoc node incomplete.";
    *(_OWORD *)&v29[8] = xmmword_1C8668420;
    v30 = 1797;
    v23 = *((__n128 *)this + 10);
    this[20] = (llvm **)sub_1C5AC1680;
    this[21] = (llvm **)(v17 + 1);
    v18 = this + 23;
    v19 = v21;
  }
  else
  {
    v17 = (_QWORD *)operator new();
    *v17 = off_1E8193B88;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = 0;
    *(_QWORD *)v29 = "expected a value of mapping type.";
    *(_OWORD *)&v29[8] = xmmword_1C8668460;
    v30 = 1797;
    v23 = *((__n128 *)this + 10);
    this[20] = (llvm **)sub_1C5AC1680;
    this[21] = (llvm **)(v17 + 1);
    v18 = this + 23;
    v19 = a2;
  }
  llvm::yaml::Stream::printError(v18, (uint64_t)v19, (llvm::Twine *)v29, 0);
  result = v23;
  *((__n128 *)this + 10) = v23;
  *(_BYTE *)(a3 + 24) |= 1u;
  *(_QWORD *)a3 = v17;
  return result;
}

__n128 llvm::remarks::YAMLRemarkParser::parseArg@<Q0>(__n128 *this@<X0>, llvm::yaml::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  int v8;
  BOOL v9;
  llvm::yaml::Node *v10;
  llvm::yaml::KeyValueNode *v11;
  unsigned __int8 v12;
  int v13;
  __n128 result;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  llvm ***v19;
  llvm::yaml::Node *v20;
  llvm ***v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  llvm::yaml::Node *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __n128 v29;
  __n128 v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  _BYTE v34[23];
  _QWORD v35[2];
  _BYTE v36[24];
  char v37;
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)a2 + 8);
  v9 = v8 == 4;
  if (v8 == 4)
    v10 = a2;
  else
    v10 = 0;
  if (!v9)
  {
    v18 = (_QWORD *)operator new();
    *v18 = off_1E8193B88;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = 0;
    *(_QWORD *)v36 = "expected a value of mapping type.";
    *(_OWORD *)&v36[8] = xmmword_1C8668460;
    v38 = 1797;
    v29 = this[10];
    this[10].n128_u64[0] = (unint64_t)sub_1C5AC1680;
    this[10].n128_u64[1] = (unint64_t)(v18 + 1);
    v19 = (llvm ***)&this[11].n128_u64[1];
    v20 = a2;
LABEL_25:
    llvm::yaml::Stream::printError(v19, (uint64_t)v20, (llvm::Twine *)v36, 0);
    result = v29;
    this[10] = v29;
    *(_BYTE *)(a3 + 64) |= 1u;
    *(_QWORD *)a3 = v18;
    return result;
  }
  v25 = v10;
  *((_BYTE *)a2 + 76) = 0;
  llvm::yaml::MappingNode::increment(a2);
  v11 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
  if (!v11)
  {
LABEL_24:
    v18 = (_QWORD *)operator new();
    *v18 = off_1E8193B88;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = 0;
    *(_QWORD *)v36 = "argument key is missing.";
    *(_OWORD *)&v36[8] = xmmword_1C86684C0;
    v38 = 1797;
    v29 = this[10];
    this[10].n128_u64[0] = (unint64_t)sub_1C5AC1680;
    this[10].n128_u64[1] = (unint64_t)(v18 + 1);
    v19 = (llvm ***)&this[11].n128_u64[1];
    v20 = v25;
    goto LABEL_25;
  }
  v26 = a3;
  v27 = 0;
  v12 = 0;
  v13 = 0;
  v28 = 0;
  do
  {
    llvm::remarks::YAMLRemarkParser::parseKey((llvm::remarks::YAMLRemarkParser *)this, v11, (uint64_t)&v31);
    if ((v33 & 1) != 0)
    {
      v17 = v31;
LABEL_21:
      *(_BYTE *)(v26 + 64) |= 1u;
      *(_QWORD *)v26 = v17;
      return result;
    }
    v15 = (unint64_t)v31;
    v16 = v32;
    if (v32 == 8 && *v31 == 0x636F4C6775626544)
    {
      if (HIDWORD(v27))
      {
        v21 = (llvm ***)&this[11].n128_u64[1];
        v22 = (_QWORD *)operator new();
        *v22 = off_1E8193B88;
        v22[1] = 0;
        v23 = v22 + 1;
        v22[2] = 0;
        v22[3] = 0;
        *(_QWORD *)v36 = "only one DebugLoc entry is allowed per argument.";
        v24 = xmmword_1C86684A0;
        goto LABEL_27;
      }
      result.n128_u64[0] = llvm::remarks::YAMLRemarkParser::parseDebugLoc((llvm ***)this, v11, (uint64_t)v36).n128_u64[0];
      if ((v37 & 1) != 0)
      {
LABEL_20:
        v17 = *(_QWORD **)v36;
        goto LABEL_21;
      }
      *(_OWORD *)v34 = *(_OWORD *)&v36[1];
      *(_QWORD *)&v34[15] = *(_QWORD *)&v36[16];
      LOBYTE(v27) = v36[0];
      HIDWORD(v27) = 1;
    }
    else
    {
      if (v13)
      {
        v21 = (llvm ***)&this[11].n128_u64[1];
        v22 = (_QWORD *)operator new();
        *v22 = off_1E8193B88;
        v22[1] = 0;
        v23 = v22 + 1;
        v22[2] = 0;
        v22[3] = 0;
        *(_QWORD *)v36 = "only one string entry is allowed per argument.";
        v24 = xmmword_1C8668490;
LABEL_27:
        *(_OWORD *)&v36[8] = v24;
        v38 = 1797;
        v30 = this[10];
        this[10].n128_u64[0] = (unint64_t)sub_1C5AC1680;
        this[10].n128_u64[1] = (unint64_t)v23;
        llvm::yaml::Stream::printError(v21, (uint64_t)v11, (llvm::Twine *)v36, 0);
        result = v30;
        this[10] = v30;
        *(_BYTE *)(v26 + 64) |= 1u;
        *(_QWORD *)v26 = v22;
        return result;
      }
      (*(void (**)(_BYTE *__return_ptr, __n128 *, llvm::yaml::KeyValueNode *))(this->n128_u64[0] + 24))(v36, this, v11);
      if ((v36[16] & 1) != 0)
        goto LABEL_20;
      v28 = v36[0];
      v35[0] = *(_QWORD *)&v36[1];
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v36[8];
      v4 = v15 >> 8;
      v13 = 1;
      v12 = v15;
      v3 = v16;
    }
    llvm::yaml::MappingNode::increment(a2);
    v11 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
  }
  while (v11);
  a3 = v26;
  if (!v13)
    goto LABEL_24;
  *(_QWORD *)(v26 + 17) = v35[0];
  *(_QWORD *)(v26 + 24) = *(_QWORD *)((char *)v35 + 7);
  result.n128_u64[0] = *(_QWORD *)v34;
  *(_OWORD *)(v26 + 33) = *(_OWORD *)v34;
  *(_QWORD *)(v26 + 48) = *(_QWORD *)&v34[15];
  *(_BYTE *)(v26 + 64) &= ~1u;
  *(_QWORD *)v26 = v12 | (v4 << 8);
  *(_QWORD *)(v26 + 8) = v3;
  *(_BYTE *)(v26 + 16) = v28;
  *(_BYTE *)(v26 + 32) = v27;
  *(_BYTE *)(v26 + 56) = BYTE4(v27);
  return result;
}

uint64_t llvm::remarks::YAMLRemarkParser::parseStr@<X0>(llvm::remarks::YAMLRemarkParser *this@<X0>, llvm::yaml::KeyValueNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  const char *v16;
  __int128 v17;
  __int16 v18;

  result = llvm::yaml::KeyValueNode::getValue(a2);
  if (result && *(_DWORD *)(result + 32) == 1)
  {
    v7 = *(_BYTE **)(result + 72);
    v8 = *(_QWORD *)(result + 80);
    if (v8)
      v9 = *v7 == 39;
    else
      v9 = 0;
    v10 = v9;
    if (v9)
      v11 = v7 + 1;
    else
      v11 = *(_QWORD **)(result + 72);
    v12 = v8 - v10;
    v13 = v8 - v10 - 1;
    v14 = *((unsigned __int8 *)v11 + v13);
    if (v12 < v13)
      v13 = v12;
    if (v14 == 39)
      v12 = v13;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = v12;
  }
  else
  {
    v11 = (_QWORD *)operator new();
    *v11 = off_1E8193B88;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = 0;
    v16 = "expected a value of scalar type.";
    v17 = xmmword_1C8668470;
    v18 = 1797;
    v15 = *((_OWORD *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v11 + 1;
    result = llvm::yaml::Stream::printError((llvm ***)this + 23, (uint64_t)a2, (llvm::Twine *)&v16, 0);
    *((_OWORD *)this + 10) = v15;
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  *(_QWORD *)a3 = v11;
  return result;
}

void llvm::remarks::YAMLRemarkParser::next(llvm::remarks::YAMLRemarkParser *this@<X0>, uint64_t a2@<X8>)
{
  llvm::yaml::Document **v3;
  llvm::yaml::Document ***v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::yaml::Document ***)((char *)this + 200);
  v3 = (llvm::yaml::Document **)*((_QWORD *)this + 25);
  if (v3 && *v3)
  {
    llvm::remarks::YAMLRemarkParser::parseRemark(this, *v3, (uint64_t)&v7);
    if ((v8 & 1) != 0)
    {
      *v4 = 0;
      v5 = v7;
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      sub_1C630F42C(v4);
      *(_BYTE *)(a2 + 8) &= ~1u;
      v5 = v7;
    }
    *(_QWORD *)a2 = v5;
  }
  else
  {
    v6 = (_QWORD *)operator new();
    *v6 = &unk_1E8193A88;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v6;
  }
}

__n128 llvm::remarks::YAMLStrTabRemarkParser::parseStr@<Q0>(llvm::remarks::YAMLStrTabRemarkParser *this@<X0>, llvm::yaml::KeyValueNode *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t Value;
  __n128 result;
  const char *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  __n128 v15;
  const char *v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Value = llvm::yaml::KeyValueNode::getValue(a2);
  if (!Value || *(_DWORD *)(Value + 32) != 1)
  {
    v14 = (_QWORD *)operator new();
    *v14 = off_1E8193B88;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = 0;
    v16 = "expected a value of scalar type.";
    v17 = xmmword_1C8668470;
    v18 = 1797;
    v15 = *((__n128 *)this + 10);
    *((_QWORD *)this + 20) = sub_1C5AC1680;
    *((_QWORD *)this + 21) = v14 + 1;
    llvm::yaml::Stream::printError((llvm ***)this + 23, (uint64_t)a2, (llvm::Twine *)&v16, 0);
    result = v15;
    *((__n128 *)this + 10) = v15;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v14;
    return result;
  }
  llvm::remarks::YAMLRemarkParser::parseUnsigned(this, a2, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    v8 = v16;
    goto LABEL_19;
  }
  llvm::remarks::ParsedStringTable::operator[]((uint64_t *)this + 5, v16, (uint64_t)&v16);
  v8 = v16;
  if ((BYTE8(v17) & 1) != 0)
  {
LABEL_19:
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v8;
    return result;
  }
  if ((_QWORD)v17)
    v9 = *v16 == 39;
  else
    v9 = 0;
  v10 = v9;
  if (v9)
    v8 = v16 + 1;
  v11 = v17 - v10;
  v12 = v11 - 1;
  v13 = v8[v11 - 1];
  if (v11 < v11 - 1)
    v12 = v11;
  *(_BYTE *)(a3 + 16) &= ~1u;
  if (v13 == 39)
    v11 = v12;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v11;
  return result;
}

uint64_t sub_1C5AC39A0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E8193BD8;
  v2 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)(a1 + 184));
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5AC3A40(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E8193BD8;
  v2 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)(a1 + 184));
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AC3AF0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E8193BD8;
  v2 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)(a1 + 184));
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5AC3B90(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E8193BD8;
  v2 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)(a1 + 184));
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = &unk_1E8193A60;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5AC3C40(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8193B88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5AC3C7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8193B88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C5AC3CC8(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  v7 = v6;
  if (v6 >= 0)
    v8 = (const char *)v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v3 + 8);
  return llvm::raw_ostream::write(this, v8, v10);
}

uint64_t sub_1C5AC3CF4()
{
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  return 3;
}

void *sub_1C5AC3D40()
{
  return &llvm::remarks::YAMLParseError::ID;
}

BOOL sub_1C5AC3D4C(uint64_t a1, void *a2)
{
  return a2 == &llvm::remarks::YAMLParseError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

__n128 sub_1C5AC3D6C(uint64_t a1, uint64_t a2)
{
  void *v4;
  __n128 result;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(void **)(a1 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t *sub_1C5AC3DD8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C47655E8(v2 + 112, *(_QWORD **)(v2 + 120));
    sub_1C4926AE8(v2 + 8);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v8[3];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  LOBYTE(v8[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a4 + 128))
    sub_1C630FB2C((uint64_t)v8, a4);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193C38;
  *(_QWORD *)(a1 + 168) = &off_1E81A6C18;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = a2;
  *(_DWORD *)(a1 + 192) = 70;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_1C630FB9C(a1 + 32, (uint64_t)v8);
  if (v10)
  {
    free(v8[0]);
    sub_1C4926AE8((uint64_t)&v9);
  }
  return a1;
}

{
  void *v8[3];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  LOBYTE(v8[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a4 + 128))
    sub_1C630FB2C((uint64_t)v8, a4);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193C38;
  *(_QWORD *)(a1 + 168) = &off_1E81A6C18;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = a2;
  *(_DWORD *)(a1 + 192) = 70;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_1C630FB9C(a1 + 32, (uint64_t)v8);
  if (v10)
  {
    free(v8[0]);
    sub_1C4926AE8((uint64_t)&v9);
  }
  return a1;
}

uint64_t llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193C38;
  *(_QWORD *)(a1 + 168) = &off_1E81A6C18;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = a3;
  *(_DWORD *)(a1 + 192) = 70;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_1C630FB9C(a1 + 32, a5);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E8193C38;
  *(_QWORD *)(a1 + 168) = &off_1E81A6C18;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = a3;
  *(_DWORD *)(a1 + 192) = 70;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_1C630FB9C(a1 + 32, a5);
  return a1;
}

llvm::raw_ostream *sub_1C5AC3FC4(llvm::raw_ostream *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v2 > 6uLL)
  {
    *(_DWORD *)((char *)v2 + 3) = 1397445185;
    *v2 = 1095583058;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "REMARKS", 7uLL);
  }
  return llvm::raw_ostream::write(this, 0);
}

void sub_1C5AC4034(llvm::raw_ostream *this, uint64_t a2, char a3)
{
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5[0] = *(_QWORD *)(a2 + 120);
    llvm::raw_ostream::write(this, (const char *)v5, 8uLL);
    llvm::remarks::StringTable::serialize((uint64_t ***)a2, this);
  }
  else
  {
    v5[0] = 0;
    llvm::raw_ostream::write(this, (const char *)v5, 8uLL);
  }
}

void sub_1C5AC40CC(llvm::raw_ostream *a1, void *__src, size_t __n)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  _QWORD v9[17];

  v9[16] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = xmmword_1C85F20B0;
  if (__n < 0x81)
  {
    v6 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v7, v9, __n, 1);
  v6 = v8;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v7 + v6, __src, __n);
    v6 = v8;
  }
LABEL_4:
  *(_QWORD *)&v8 = v6 + __n;
  llvm::sys::fs::make_absolute((uint64_t)&v7);
  llvm::raw_ostream::write(a1, (const char *)v7, v8);
  llvm::raw_ostream::write(a1, 0);
  if (v7 != v9)
    free(v7);
}

uint64_t sub_1C5AC41C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __int128 v22[2];
  __int128 v23[2];
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;

  if (((*(uint64_t (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!Passed", 7, *(_DWORD *)*a2 == 1) & 1) == 0&& ((*(uint64_t (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!Missed", 7, *(_DWORD *)*a2 == 2) & 1) == 0&& ((*(uint64_t (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!Analysis", 9, *(_DWORD *)*a2 == 3) & 1) == 0&& ((*(uint64_t (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!AnalysisFPCommute", 18, *(_DWORD *)*a2 == 4) & 1) == 0
    && ((*(uint64_t (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!AnalysisAliasing", 17, *(_DWORD *)*a2 == 5) & 1) == 0)
  {
    (*(void (**)(uint64_t *, const char *, uint64_t, BOOL))(*a1 + 96))(a1, "!Failure", 8, *(_DWORD *)*a2 == 6);
  }
  v4 = a1[1];
  if (v4)
    v5 = *(_DWORD *)(v4 + 8) == 2;
  else
    v5 = 0;
  if (v5)
  {
    v14 = v4 + 32;
    llvm::remarks::StringTable::add(v4 + 32, *(unsigned __int8 **)(*a2 + 8), *(_QWORD *)(*a2 + 16), (uint64_t)&v29);
    v15 = v29.n128_u32[0];
    llvm::remarks::StringTable::add(v14, *(unsigned __int8 **)(*a2 + 24), *(_QWORD *)(*a2 + 32), (uint64_t)&v29);
    v16 = v29.n128_u32[0];
    llvm::remarks::StringTable::add(v14, *(unsigned __int8 **)(*a2 + 40), *(_QWORD *)(*a2 + 48), (uint64_t)&v29);
    v17 = *a2;
    v18 = *(_OWORD *)(*a2 + 72);
    v23[0] = *(_OWORD *)(*a2 + 56);
    v23[1] = v18;
    v19 = *(_QWORD *)(v17 + 104);
    v20 = *(unsigned int *)(v17 + 112);
    v28 = *(_OWORD *)(v17 + 88);
    *(_QWORD *)&v27 = v19;
    *((_QWORD *)&v27 + 1) = v20;
    LODWORD(v26) = v15;
    LODWORD(v25) = v16;
    LODWORD(v24[0]) = v29.n128_u32[0];
    sub_1C6133C1C(a1, (uint64_t)"Pass", &v26, 1);
    sub_1C6133C1C(a1, (uint64_t)"Name", &v25, 1);
    v29 = 0u;
    v30 = 0u;
    sub_1C5AC452C(a1, v23, (__int128 *)&v29);
    sub_1C6133C1C(a1, (uint64_t)"Function", v24, 1);
    v29 = 0uLL;
    v21 = sub_1C5AC476C(a1, (uint64_t)&v28, &v29);
    result = (*(uint64_t (**)(uint64_t *, __n128))(*a1 + 56))(a1, v21);
    if (!(_DWORD)result || (_DWORD)v20)
    {
      v13 = &v27;
      return sub_1C630FC30(a1, (uint64_t)v13);
    }
  }
  else
  {
    v6 = *a2;
    v7 = *(_OWORD *)(*a2 + 72);
    v22[0] = *(_OWORD *)(*a2 + 56);
    v22[1] = v7;
    v8 = *(_QWORD *)(v6 + 104);
    v9 = *(unsigned int *)(v6 + 112);
    v28 = *(_OWORD *)(v6 + 8);
    v10 = *(_OWORD *)(v6 + 24);
    v26 = *(_OWORD *)(v6 + 40);
    v27 = v10;
    v25 = *(_OWORD *)(v6 + 88);
    v24[0] = v8;
    v24[1] = v9;
    sub_1C6205CC8(a1, (uint64_t)"Pass", &v28, 1);
    sub_1C6205CC8(a1, (uint64_t)"Name", &v27, 1);
    v29 = 0u;
    v30 = 0u;
    sub_1C5AC452C(a1, v22, (__int128 *)&v29);
    sub_1C6205CC8(a1, (uint64_t)"Function", &v26, 1);
    v29 = 0uLL;
    v11 = sub_1C5AC476C(a1, (uint64_t)&v25, &v29);
    result = (*(uint64_t (**)(uint64_t *, __n128))(*a1 + 56))(a1, v11);
    if (!(_DWORD)result || (_DWORD)v9)
    {
      v13 = (__int128 *)v24;
      return sub_1C630FC30(a1, (uint64_t)v13);
    }
  }
  return result;
}

uint64_t sub_1C5AC452C(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _DWORD v24[6];
  int v25;
  int v26;
  __int128 v27;

  v22 = 1;
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*((_BYTE *)a2 + 24))
    v7 = 0;
  else
    v7 = v6;
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 24))
    {
LABEL_27:
      v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      return result;
    }
  }
  else if (!*((_BYTE *)a2 + 24))
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_BYTE *)a2 + 24) = 1;
  }
  v23 = 0;
  result = (*(uint64_t (**)(uint64_t *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, "DebugLoc", 0, v7, &v22, &v23);
  if (!(_DWORD)result)
  {
    if (!v22)
      return result;
    goto LABEL_27;
  }
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) != 0)
    goto LABEL_28;
  v9 = a1[37];
  if (!v9)
    goto LABEL_28;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10 || *(_DWORD *)(v10 + 32) != 1)
    goto LABEL_28;
  v11 = *(int **)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 80);
  v13 = v12;
  do
  {
    v14 = v13;
    if (!v13)
      break;
    --v13;
  }
  while (*((_BYTE *)v11 + v14 - 1) == 32);
  if (v14 < v12)
    v12 = v14;
  if (v12 == 6
    && ((v15 = *v11, v16 = *((unsigned __int16 *)v11 + 2), v15 == 1852796476) ? (v17 = v16 == 15973) : (v17 = 0), v17))
  {
    v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
  }
  else
  {
LABEL_28:
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    v27 = *a2;
    v20 = *((_DWORD *)a2 + 4);
    v25 = *((_DWORD *)a2 + 5);
    v26 = v20;
    v21 = a1[1];
    if (v21 && *(_DWORD *)(v21 + 8) == 2)
    {
      llvm::remarks::StringTable::add(v21 + 32, (unsigned __int8 *)v27, *((size_t *)&v27 + 1), (uint64_t)v24);
      sub_1C6133C1C(a1, (uint64_t)"File", v24, 1);
    }
    else
    {
      sub_1C6205CC8(a1, (uint64_t)"File", &v27, 1);
    }
    sub_1C6133C1C(a1, (uint64_t)"Line", &v26, 1);
    sub_1C6133C1C(a1, (uint64_t)"Column", &v25, 1);
    (*(void (**)(uint64_t *))(*a1 + 152))(a1);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v23);
}

__n128 sub_1C5AC476C(_QWORD *a1, uint64_t a2, __n128 *a3)
{
  unsigned int v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  uint64_t v19;

  v18 = 1;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (*(_BYTE *)(a2 + 8))
    v7 = 0;
  else
    v7 = v6;
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
LABEL_27:
      result = *a3;
      *(__n128 *)a2 = *a3;
      return result;
    }
  }
  else if (!*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
  }
  v19 = 0;
  if (!(*(unsigned int (**)(_QWORD *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, "Hotness", 0, v7, &v18, &v19))
  {
    if (!v18)
      return result;
    goto LABEL_27;
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) & 1) != 0)
    goto LABEL_24;
  v9 = a1[37];
  if (!v9)
    goto LABEL_24;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10 || *(_DWORD *)(v10 + 32) != 1)
    goto LABEL_24;
  v11 = *(int **)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 80);
  v13 = v12;
  do
  {
    v14 = v13;
    if (!v13)
      break;
    --v13;
  }
  while (*((_BYTE *)v11 + v14 - 1) == 32);
  if (v14 < v12)
    v12 = v14;
  if (v12 == 6
    && ((v15 = *v11, v16 = *((unsigned __int16 *)v11 + 2), v15 == 1852796476) ? (v17 = v16 == 15973) : (v17 = 0), v17))
  {
    *(__n128 *)a2 = *a3;
  }
  else
  {
LABEL_24:
    sub_1C51EF528((uint64_t)a1, (unint64_t *)a2);
  }
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v19);
  return result;
}

uint64_t sub_1C5AC48F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10[2];

  v4 = a1[1];
  if (v4)
    v5 = *(_DWORD *)(v4 + 8) == 2;
  else
    v5 = 0;
  if (v5)
  {
    llvm::remarks::StringTable::add(v4 + 32, *(unsigned __int8 **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)v10);
    sub_1C6133C1C(a1, *(_QWORD *)a2, v10, 1);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      goto LABEL_13;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + v7) == 10)
        ++v8;
      ++v7;
    }
    while (v6 != v7);
    if (v8 >= 2)
    {
      *(_QWORD *)&v10[0] = *(_QWORD *)(a2 + 16);
      *((_QWORD *)&v10[0] + 1) = v6;
      sub_1C630FDA4(a1, *(_QWORD *)a2, v10);
    }
    else
    {
LABEL_13:
      sub_1C6205CC8(a1, *(_QWORD *)a2, (_OWORD *)(a2 + 16), 1);
    }
  }
  memset(v10, 0, sizeof(v10));
  return sub_1C5AC452C(a1, (__int128 *)(a2 + 32), v10);
}

void sub_1C5AC49E0(_QWORD *a1, _OWORD *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
  {
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    DWORD2(v9) = 0;
    v13 = 0;
    v14 = 0;
    *(_QWORD *)&v9 = &unk_1E81A7208;
    v16 = v17;
    v15 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    llvm::yaml::ScalarTraits<llvm::StringRef,void>::output((uint64_t)a2, a1[1], (llvm::raw_ostream *)&v9);
    v4 = v16;
    v5 = *((_BYTE *)v16 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v16;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v16[1];
    v8[0] = v4;
    v8[1] = v7;
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 224))(a1, v8);
    *(_QWORD *)&v9 = off_1E81A6E70;
    if (v15 == 1 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  else
  {
    v9 = 0uLL;
    (*(void (**)(_QWORD *, __int128 *))(*a1 + 224))(a1, &v9);
    *a2 = v9;
  }
}

_QWORD *llvm::ADCEPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t CachedResultImpl;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  char v10;
  char v11;
  _QWORD v13[5];
  int v14;
  __int128 v15;
  _BYTE v16[28];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[131];
  int v20;
  _QWORD v21[51];
  _QWORD v22[19];
  int v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a1);
  if (CachedResultImpl)
    v7 = CachedResultImpl + 8;
  else
    v7 = 0;
  v13[0] = a1;
  v13[1] = v7;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, a1) + 8;
  v14 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  v17 = v19;
  v18 = 0x8000000000;
  v19[128] = v21;
  v19[129] = v21;
  v19[130] = 32;
  v20 = 0;
  v21[32] = 1;
  v8 = 179;
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v13[v8] = v9;
    v8 += 2;
  }
  while (v8 != 195);
  v21[49] = v22;
  v21[50] = 0x1000000000;
  v22[16] = v24;
  v22[17] = v24;
  v22[18] = 16;
  v23 = 0;
  sub_1C5AC4CE8((uint64_t)v13);
  v11 = v10;
  sub_1C5AC6FD0((uint64_t)v13);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v11 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (!byte_1ED835BD0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key);
}

void sub_1C5AC4CE8(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t ***v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ****v60;
  uint64_t ***v61;
  int v62;
  int v63;
  uint64_t ***v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t **v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  int v109;
  llvm::Instruction *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  int v120;
  BOOL v121;
  unsigned int v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  char *v131;
  char *v132;
  __int128 v133;
  char *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  unsigned int j;
  uint64_t Successor;
  uint64_t v141;
  void *v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  void *v149;
  _BYTE *v150;
  void *v151;
  int v152;
  unsigned int v153;
  const void *v154;
  void **v155;
  void *v156;
  unsigned int v157;
  unsigned int v158;
  char *v159;
  char *v160;
  char *v161;
  int v162;
  BOOL v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  BOOL v181;
  unsigned int v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  void *v200;
  uint64_t v201;
  unsigned int v202;
  BOOL v203;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  void *v219;
  uint64_t v220;
  char v221;
  _QWORD **v222;
  _QWORD **v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t k;
  uint64_t v235;
  unsigned int v236;
  BOOL v237;
  uint64_t v239;
  uint64_t *v240;
  _WORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  int v245;
  int v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  int v250;
  unsigned int m;
  uint64_t v252;
  _QWORD *v253;
  int v254;
  _QWORD **v255;
  unsigned int v256;
  char v257;
  llvm::BasicBlock *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  llvm::Value *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  char *v272;
  char *v273;
  unsigned __int8 **v274;
  int v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  void ****v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  uint64_t v284;
  _QWORD *v285;
  void **v286;
  void **v287;
  uint64_t *v288;
  uint64_t v289;
  void **v290;
  uint64_t v291;
  void **v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t *v301;
  uint64_t v302;
  _QWORD *n;
  _QWORD *v304;
  uint64_t *v305;
  uint64_t *v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t *ii;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD **v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t **v336;
  _QWORD **v337;
  void *__p;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  void **v342;
  void **v343;
  uint64_t v344;
  void **v345;
  _QWORD v346[8];
  char *v347;
  char *v348;
  uint64_t v349;
  void *v350;
  void *v351;
  unint64_t v352;
  _QWORD v353[7];
  uint64_t v354;
  void *v355;
  _BYTE *v356;
  void *v357;
  void *v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  _BYTE v365[40];
  void *v366;
  _BYTE *v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  char v371;
  _BYTE *v372;
  void *v373;
  uint64_t v374;
  int v375;
  _BYTE v376[64];
  _QWORD v377[3];
  __int16 v378;
  void *v379;
  void *v380;
  uint64_t v381;
  int v382;
  _BYTE v383[64];
  void *v384;
  char *v385;
  uint64_t v386;
  void ***v387;
  void *v388;
  uint64_t v389;
  _BYTE v390[128];
  void ***v391;
  void *v392;
  uint64_t v393;
  _BYTE v394[128];
  void ***v395;
  void *v396;
  uint64_t v397;
  _BYTE v398[128];
  void ***v399;
  void *v400;
  uint64_t v401;
  _WORD v402[64];
  uint64_t v403;

  v403 = *MEMORY[0x1E0C80C00];
  v2 = -1;
  v3 = -4;
  v4 = 48;
  v5 = *(_QWORD *)a1 + 72;
  do
  {
    v5 = *(_QWORD *)(v5 + 8);
    v4 -= 48;
    ++v2;
    v3 += 4;
  }
  while (v5 != *(_QWORD *)a1 + 72);
  v340 = a1 + 24;
  if ((_DWORD)v2)
  {
    v6 = (v3 / 3 + 1) | ((unint64_t)(v3 / 3 + 1) >> 1);
    v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
    v8 = ((v7 | (v7 >> 8)) >> 16) | v7 | (v7 >> 8);
    if (*(_DWORD *)(a1 + 40) <= v8)
      sub_1C4DE40D0(v340, v8 + 1);
  }
  v9 = *(_BYTE **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v9) >> 4) < v2)
  {
    if (v2 >= 0x555555555555556)
LABEL_675:
      abort();
    v10 = *(_BYTE **)(a1 + 56);
    v11 = (char *)operator new(-v4);
    v12 = &v11[48 * ((v10 - v9) / 48)];
    v13 = v12;
    if (v10 != v9)
    {
      v14 = &v11[48 * ((v10 - v9) / 48)];
      do
      {
        v13 = v14 - 48;
        v15 = *((_OWORD *)v10 - 3);
        v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v14 - 1) = v16;
        *((_OWORD *)v14 - 3) = v15;
        v10 -= 48;
        v14 -= 48;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = &v11[-v4];
    if (v9)
      operator delete(v9);
  }
  v17 = *(_QWORD *)a1 + 72;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v18 == v17)
  {
    v31 = a1 + 72;
  }
  else
  {
    v19 = 0;
    do
    {
      if (v18)
        v20 = (_QWORD *)(v18 - 24);
      else
        v20 = 0;
      v21 = v20 + 5;
      v22 = 4 * v19-- - 4;
      v23 = v20 + 5;
      do
      {
        v23 = (_QWORD *)v23[1];
        v22 += 4;
        ++v19;
      }
      while (v23 != v21);
      v350 = v20;
      v24 = sub_1C5AC71DC(v340, (uint64_t *)&v350);
      *(_QWORD *)(v24 + 16) = v20;
      v25 = (_QWORD *)v20[5];
      if (v25 == v21)
      {
        v30 = 0;
        *(_QWORD *)(v24 + 24) = 0;
      }
      else
      {
        v26 = v25 - 3;
        if (!v25)
          v26 = 0;
        v27 = *((unsigned __int8 *)v26 + 16) - 40;
        if (v27 < 0xFFFFFFF5)
          v26 = 0;
        *(_QWORD *)(v24 + 24) = v26;
        v30 = v27 >= 0xFFFFFFF5 && v25 != 0 && *((_BYTE *)v26 + 16) == 30 && (*((_DWORD *)v26 + 5) & 0x7FFFFFF) == 1;
      }
      *(_BYTE *)(v24 + 1) = v30;
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18 != v17);
    v31 = a1 + 72;
    if (v19)
    {
      v32 = (v22 / 3 + 1) | ((unint64_t)(v22 / 3 + 1) >> 1);
      v33 = v32 | (v32 >> 2) | ((v32 | (v32 >> 2)) >> 4);
      v34 = ((v33 | (v33 >> 8)) >> 16) | v33 | (v33 >> 8);
      if (*(_DWORD *)(a1 + 88) <= v34)
        sub_1C5AC76A4(a1 + 72, v34 + 1);
    }
  }
  v35 = *(_QWORD *)(a1 + 48);
  v36 = *(_QWORD *)(a1 + 56);
  if (v35 != v36)
  {
    do
    {
      v37 = *(_QWORD *)(v35 + 24);
      v38 = v37 + 40;
      v39 = *(_QWORD *)(v37 + 48);
      if (v39 != v37 + 40)
      {
        do
        {
          v40 = (void *)(v39 - 24);
          if (!v39)
            v40 = 0;
          v350 = v40;
          sub_1C5AC7414(v31, (uint64_t *)&v350)[1] = v35 + 8;
          v39 = *(_QWORD *)(v39 + 8);
        }
        while (v39 != v38);
      }
      v35 += 48;
    }
    while (v35 != v36);
    v41 = *(uint64_t **)(a1 + 48);
    v42 = *(uint64_t **)(a1 + 56);
    if (v41 != v42)
    {
      v43 = v41 + 4;
      do
      {
        *(v43 - 2) = (uint64_t)sub_1C5AC7414(v31, v43);
        v44 = v43 + 2;
        v43 += 6;
      }
      while (v44 != v42);
    }
  }
  v339 = v31;
  v45 = *(_QWORD *)a1 + 72;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v45)
      goto LABEL_121;
    v47 = i - 24;
    if (!i)
      v47 = 0;
    v48 = *(_QWORD *)(v47 + 48);
    if (v48 != v47 + 40)
      break;
  }
  while (1)
  {
    if (v48)
      v49 = v48 - 24;
    else
      v49 = 0;
    v50 = *(unsigned __int8 *)(v49 + 16);
    v51 = (v50 - 61);
    if (v51 > 0x21)
    {
LABEL_62:
      switch(*(_BYTE *)(v49 + 16))
      {
        case '!':
        case '\'':
          goto LABEL_63;
        case '"':
        case '#':
        case '$':
          goto LABEL_70;
        case '%':
          goto LABEL_77;
        case '&':
          goto LABEL_78;
        default:
          if (v50 == 60 && (*(_WORD *)(v49 + 18) & 0x301) != 0)
            goto LABEL_77;
          goto LABEL_70;
      }
    }
    if (((1 << (v50 - 61)) & 0x2000C0000) == 0)
    {
      if (((1 << (v50 - 61)) & 0x800001D) != 0)
        goto LABEL_77;
      if (v51 != 23)
        goto LABEL_62;
LABEL_63:
      v52 = *(_QWORD *)(v49 + 64);
      if (!v52 || (*(_BYTE *)(v52 + 17) & 0x30) == 0)
      {
        v53 = *(_DWORD *)(v49 + 20);
        if (v53 < 0)
        {
          v74 = v49 - 32 * (v53 & 0x7FFFFFF);
          v77 = *(_QWORD *)(v74 - 8);
          v75 = v74 - 8;
          v76 = v77;
          if (v77)
          {
            v78 = -v76;
            while (1)
            {
              v79 = *(_DWORD *)(*(_QWORD *)(v75 + v78) + 8);
              v199 = v79 > 7;
              v80 = (1 << v79) & 0x83;
              if (v199 || v80 == 0)
                break;
              v78 += 16;
              if (!v78)
                goto LABEL_66;
            }
LABEL_77:
            v50 = *(unsigned __int8 *)(v49 + 16);
            goto LABEL_78;
          }
        }
LABEL_66:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v49, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v49, 44))
        {
          goto LABEL_77;
        }
      }
LABEL_70:
      if (llvm::Instruction::mayThrow((llvm::Instruction *)v49))
        goto LABEL_77;
      v54 = llvm::Instruction::willReturn((llvm::Instruction *)v49);
      v50 = *(unsigned __int8 *)(v49 + 16);
      if ((v54 & 1) != 0)
      {
        if ((v50 - 29) <= 0xA && ((v50 & 0xFE) != 0x1E || !byte_1ED835BD0))
          goto LABEL_103;
        goto LABEL_104;
      }
    }
LABEL_78:
    if (v50 != 84)
      goto LABEL_103;
    v55 = *(uint64_t ****)(v49 - 32);
    if (!v55 || *((_BYTE *)v55 + 16) || v55[3] != *(uint64_t ***)(v49 + 72) || (*((_BYTE *)v55 + 23) & 0x10) == 0)
      goto LABEL_103;
    v56 = ***v55;
    v57 = *(_QWORD *)(v56 + 152);
    v58 = *(unsigned int *)(v56 + 168);
    if (!(_DWORD)v58)
      goto LABEL_89;
    LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
    v60 = (uint64_t ****)(v57 + 16 * v59);
    v61 = *v60;
    if (*v60 != v55)
    {
      v62 = 1;
      while (v61 != (uint64_t ***)-4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(uint64_t ****)(v57 + 16 * v59);
        if (v61 == v55)
        {
          v60 = (uint64_t ****)(v57 + 16 * v59);
          goto LABEL_90;
        }
      }
LABEL_89:
      v60 = (uint64_t ****)(v57 + 16 * v58);
    }
LABEL_90:
    v64 = v60[1];
    if (*v64 != (uint64_t **)32
      || ((v65 = v64[2], v66 = v64[3], v68 = v64[4], v67 = v64[5], v65 == (uint64_t **)0x705F6D766C6C5F5FLL)
        ? (v69 = v66 == (uint64_t **)0x695F656C69666F72)
        : (v69 = 0),
          v69 ? (v70 = v68 == (uint64_t **)0x6E656D757274736ELL) : (v70 = 0),
          v70 ? (v71 = v67 == (uint64_t **)0x7465677261745F74) : (v71 = 0),
          !v71 || *(unsigned __int8 *)(*(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF)) + 16) >= 0x15u))
    {
LABEL_103:
      sub_1C5AC747C(a1, v49);
    }
LABEL_104:
    v48 = *(_QWORD *)(v48 + 8);
    v72 = i - 24;
    if (!i)
      v72 = 0;
    if (v48 == v72 + 40)
      break;
LABEL_111:
    if (i == v45)
      goto LABEL_121;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v45)
      break;
    v73 = i - 24;
    if (!i)
      v73 = 0;
    v48 = *(_QWORD *)(v73 + 48);
    if (v48 != v73 + 40)
      goto LABEL_111;
  }
LABEL_121:
  if (!byte_1ED835BD0)
    goto LABEL_345;
  if (byte_1ED81B728)
    goto LABEL_254;
  v342 = 0;
  v343 = 0;
  LODWORD(v344) = 0;
  v82 = *(_QWORD *)a1;
  v83 = -4;
  v84 = 1;
  v85 = *(_QWORD *)a1 + 72;
  do
  {
    v85 = *(_QWORD *)(v85 + 8);
    v83 += 4;
    --v84;
  }
  while (v85 != *(_QWORD *)a1 + 72);
  if (v84)
  {
    v86 = (v83 / 3 + 1) | ((unint64_t)(v83 / 3 + 1) >> 1);
    v87 = v86 | (v86 >> 2) | ((v86 | (v86 >> 2)) >> 4);
    sub_1C574EB5C((uint64_t)&v342, (((v87 | (v87 >> 8)) >> 16) | v87 | (v87 >> 8)) + 1);
    v82 = *(_QWORD *)a1;
  }
  v88 = *(_QWORD *)(v82 + 80);
  if (v88)
    v89 = (void *)(v88 - 24);
  else
    v89 = 0;
  v379 = v89;
  v380 = (void *)1;
  sub_1C5AC7A24((uint64_t)&v350, (uint64_t)&v342, &v379, &v380);
  if ((_BYTE)v352)
  {
    v90 = operator new(0x20uLL);
    *(_QWORD *)v90 = v89;
    v90[8] = 0;
    v90[24] = 0;
    v91 = v90 + 32;
  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v350 = &v342;
  v351 = 0;
  v352 = 0;
  v353[0] = 0;
  sub_1C4E19D7C(&v351, v90, v91, (v91 - v90) >> 5);
  if (v90)
    operator delete(v90);
  v92 = v351;
  v93 = (_BYTE *)v352;
  v94 = (uint64_t)(v352 - (_QWORD)v351) >> 5;
  v351 = 0;
  v352 = 0;
  v353[0] = 0;
  __p = v92;
  sub_1C4E19D7C(&v351, v92, v93, v94);
  v95 = (_QWORD *)v352;
  if ((void *)v352 == v351)
  {
    v135 = (_QWORD *)v352;
    goto LABEL_249;
  }
  do
  {
    v96 = *(v95 - 4);
    v99 = *(_QWORD **)(v96 + 40);
    v98 = (_QWORD *)(v96 + 40);
    v97 = v99;
    if (v99 == v98)
    {
      v101 = 0;
    }
    else
    {
      if (v97)
        v100 = (unsigned __int8 *)(v97 - 3);
      else
        v100 = 0;
      if (v100[16] - 29 >= 0xB)
        v101 = 0;
      else
        v101 = v100;
    }
    v379 = v101;
    if (!*(_BYTE *)sub_1C5AC7414(v339, (uint64_t *)&v379))
    {
      v136 = (_QWORD *)*v98;
      if ((_QWORD *)*v98 != v98)
      {
        if (v136)
          v137 = v136 - 3;
        else
          v137 = 0;
        if (*((_BYTE *)v137 + 16) != 30)
        {
          v138 = 2;
          switch(*((_BYTE *)v137 + 16))
          {
            case 0x1E:
LABEL_677:
              __break(1u);
              return;
            case 0x1F:
              v138 = (*((_DWORD *)v137 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_242;
            case 0x20:
            case 0x26:
              v138 = (*((_DWORD *)v137 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_242;
            case 0x21:
              goto LABEL_225;
            case 0x24:
              v138 = *((_WORD *)v137 + 9) & 1;
              goto LABEL_242;
            case 0x25:
              v138 = 1;
              goto LABEL_225;
            case 0x27:
              v138 = *((_DWORD *)v137 + 20) + 1;
LABEL_242:
              if (!v138)
                goto LABEL_145;
              goto LABEL_225;
            default:
              goto LABEL_145;
          }
        }
        if ((*((_DWORD *)v137 + 5) & 0x7FFFFFF) == 3)
          v138 = 2;
        else
          v138 = 1;
LABEL_225:
        for (j = 0; v138 != j; ++j)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v137, j);
          if ((_DWORD)v344)
          {
            v141 = ((Successor >> 4) ^ (Successor >> 9)) & ((_DWORD)v344 - 1);
            v142 = v342[2 * v141];
            if ((void *)Successor == v142)
            {
LABEL_228:
              if ((_DWORD)v141 != (_DWORD)v344 && LOBYTE(v342[2 * v141 + 1]))
              {
                sub_1C5AC747C(a1, (uint64_t)v101);
                break;
              }
            }
            else
            {
              v143 = 1;
              while (v142 != (void *)-4096)
              {
                v144 = v141 + v143++;
                v141 = v144 & (v344 - 1);
                v142 = v342[2 * v141];
                if ((void *)Successor == v142)
                  goto LABEL_228;
              }
            }
          }
        }
      }
    }
LABEL_145:
    v95 = (_QWORD *)v352;
    do
    {
      v102 = *(v95 - 4);
      if (!*((_BYTE *)v95 - 8))
      {
        v103 = *(_QWORD *)(v102 + 40);
        if (v103 == v102 + 40)
        {
          v104 = 0;
        }
        else
        {
          if (v103)
            v104 = v103 - 24;
          else
            v104 = 0;
          if (*(unsigned __int8 *)(v104 + 16) - 29 >= 0xB)
            v104 = 0;
        }
        *(v95 - 3) = v104;
        *(v95 - 2) = 0;
        *((_BYTE *)v95 - 8) = 1;
      }
      v105 = (_QWORD *)(v102 + 40);
      do
      {
        v106 = (_QWORD *)*v105;
        if ((_QWORD *)*v105 == v105)
        {
LABEL_165:
          v108 = 0;
        }
        else
        {
          if (v106)
            v107 = v106 - 3;
          else
            v107 = 0;
          if (*((_BYTE *)v107 + 16) != 30)
          {
            v108 = 0;
            switch(*((_BYTE *)v107 + 16))
            {
              case 0x1D:
              case 0x22:
              case 0x23:
                goto LABEL_166;
              case 0x1E:
                goto LABEL_677;
              case 0x1F:
                v108 = (*((_DWORD *)v107 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_166;
              case 0x20:
              case 0x26:
                v108 = (*((_DWORD *)v107 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_166;
              case 0x21:
                v108 = 2;
                goto LABEL_166;
              case 0x24:
                v108 = *((_WORD *)v107 + 9) & 1;
                goto LABEL_166;
              case 0x25:
                v108 = 1;
                goto LABEL_166;
              case 0x27:
                v108 = *((_DWORD *)v107 + 20) + 1;
                goto LABEL_166;
              default:
                goto LABEL_165;
            }
          }
          if ((*((_DWORD *)v107 + 5) & 0x7FFFFFF) == 3)
            v108 = 2;
          else
            v108 = 1;
        }
LABEL_166:
        v109 = *((_DWORD *)v95 - 4);
        if (v109 == v108)
        {
          v113 = (uint64_t *)v350;
          v399 = (void ***)v102;
          v114 = *((_DWORD *)v350 + 4);
          if (!v114)
          {
            v117 = 0;
            goto LABEL_199;
          }
          v115 = v114 - 1;
          v116 = (v114 - 1) & ((v102 >> 4) ^ (v102 >> 9));
          v117 = (_BYTE *)(*(_QWORD *)v350 + 16 * v116);
          v118 = *(_QWORD *)v117;
          if (v102 != *(_QWORD *)v117)
          {
            v119 = 0;
            v120 = 1;
            while (v118 != -4096)
            {
              if (v119)
                v121 = 0;
              else
                v121 = v118 == -8192;
              if (v121)
                v119 = v117;
              v122 = v116 + v120++;
              v116 = v122 & v115;
              v117 = (_BYTE *)(*(_QWORD *)v350 + 16 * (v122 & v115));
              v118 = *(_QWORD *)v117;
              if (v102 == *(_QWORD *)v117)
                goto LABEL_204;
            }
            if (v119)
              v117 = v119;
LABEL_199:
            v130 = *((_DWORD *)v350 + 2);
            if (4 * v130 + 4 >= 3 * v114)
            {
              v114 *= 2;
            }
            else if (v114 + ~v130 - *((_DWORD *)v350 + 3) > v114 >> 3)
            {
              goto LABEL_201;
            }
            sub_1C574EB5C((uint64_t)v350, v114);
            v379 = 0;
            sub_1C4E62854(v113, &v399, &v379);
            v117 = v379;
LABEL_201:
            ++*((_DWORD *)v113 + 2);
            if (*(_QWORD *)v117 != -4096)
              --*((_DWORD *)v113 + 3);
            *(_QWORD *)v117 = v399;
            v117[8] = 0;
          }
LABEL_204:
          v117[8] = 0;
          v95 = (_QWORD *)(v352 - 32);
          goto LABEL_211;
        }
        v110 = (llvm::Instruction *)*(v95 - 3);
        v111 = *((_DWORD *)v95 - 4);
        *((_DWORD *)v95 - 4) = v109 + 1;
        v112 = llvm::Instruction::getSuccessor(v110, v111);
        v399 = (void ***)v112;
        v400 = (void *)1;
        sub_1C5AC7A24((uint64_t)&v379, (uint64_t)v350, &v399, &v400);
      }
      while (!(_BYTE)v381);
      v123 = (_BYTE *)v352;
      if (v352 < v353[0])
      {
        *(_QWORD *)v352 = v112;
        v123[8] = 0;
        v123[24] = 0;
        v95 = v123 + 32;
        v352 = (unint64_t)(v123 + 32);
        v135 = v351;
        break;
      }
      v124 = v351;
      v125 = (uint64_t)(v352 - (_QWORD)v351) >> 5;
      v126 = v125 + 1;
      if ((unint64_t)(v125 + 1) >> 59)
        goto LABEL_675;
      v127 = v353[0] - (_QWORD)v351;
      if ((uint64_t)(v353[0] - (_QWORD)v351) >> 4 > v126)
        v126 = v127 >> 4;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0)
        v128 = 0x7FFFFFFFFFFFFFFLL;
      else
        v128 = v126;
      if (v128)
      {
        if (v128 >> 59)
          sub_1C4764EE4();
        v129 = (char *)operator new(32 * v128);
      }
      else
      {
        v129 = 0;
      }
      v131 = &v129[32 * v125];
      *(_QWORD *)v131 = v112;
      v131[8] = 0;
      v131[24] = 0;
      v132 = v131;
      if (v123 != v124)
      {
        do
        {
          v133 = *((_OWORD *)v123 - 1);
          *((_OWORD *)v132 - 2) = *((_OWORD *)v123 - 2);
          *((_OWORD *)v132 - 1) = v133;
          v132 -= 32;
          v123 -= 32;
        }
        while (v123 != v124);
        v123 = v351;
      }
      v134 = &v129[32 * v128];
      v95 = v131 + 32;
      v351 = v132;
      v352 = (unint64_t)(v131 + 32);
      v353[0] = v134;
      if (v123)
        operator delete(v123);
LABEL_211:
      v352 = (unint64_t)v95;
      v135 = v351;
    }
    while (v109 == v108 && v351 != v95);
  }
  while (v95 != v135);
LABEL_249:
  if (v135)
  {
    v352 = (unint64_t)v135;
    operator delete(v135);
  }
  if (__p)
    operator delete(__p);
  MEMORY[0x1CAA32FB4](v342, 8);
LABEL_254:
  v145 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72);
  v146 = *(unsigned int *)(v145 + 32);
  if (!(_DWORD)v146)
    goto LABEL_315;
  v147 = *(uint64_t **)(v145 + 24);
  v148 = &v147[v146];
  while (2)
  {
    v399 = *(void ****)*v147;
    if (*(_BYTE *)(*(_QWORD *)(sub_1C5AC71DC(v340, (uint64_t *)&v399) + 24) + 16) == 29)
      goto LABEL_303;
    sub_1C4EA1748(v147, (uint64_t)&v350);
    v379 = v383;
    v149 = v351;
    if (v351 == v350)
    {
      v380 = v383;
      v150 = v383;
      v151 = v351;
    }
    else
    {
      v165 = v352;
      v150 = malloc_type_malloc(8 * v352, 0x4065EBACuLL);
      if (!v150 && (v165 || (v150 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_314:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v380 = v150;
      v151 = v350;
      v149 = v351;
    }
    v152 = HIDWORD(v352);
    LODWORD(v381) = v352;
    if (v149 == v151)
      v153 = HIDWORD(v352);
    else
      v153 = v352;
    if (v153)
    {
      memmove(v150, v149, 8 * v153);
      v152 = HIDWORD(v352);
    }
    HIDWORD(v381) = v152;
    v382 = v353[0];
    v385 = 0;
    v386 = 0;
    v384 = 0;
    sub_1C4D6CDA0(&v384, v355, v356, 0xAAAAAAAAAAAAAAABLL * ((v356 - (_BYTE *)v355) >> 3));
    v342 = (void **)v346;
    v154 = v358;
    if (v358 == v357)
    {
      v343 = (void **)v346;
      v155 = (void **)v346;
      v156 = v358;
    }
    else
    {
      v166 = v359;
      v155 = (void **)malloc_type_malloc(8 * v359, 0x4065EBACuLL);
      if (!v155)
      {
        if (v166)
          goto LABEL_314;
        v155 = (void **)malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v155)
          goto LABEL_314;
      }
      v343 = v155;
      v156 = v357;
      v154 = v358;
    }
    v157 = v360;
    LODWORD(v344) = v359;
    if (v154 == v156)
      v158 = v360;
    else
      v158 = v359;
    if (v158)
    {
      memmove(v155, v154, 8 * v158);
      v157 = v360;
    }
    HIDWORD(v344) = v157;
    LODWORD(v345) = v361;
    v348 = 0;
    v349 = 0;
    v347 = 0;
    sub_1C4D6CDA0(&v347, v366, v367, 0xAAAAAAAAAAAAAAABLL * ((v367 - (_BYTE *)v366) >> 3));
    while (2)
    {
      if (v385 - (_BYTE *)v384 != v348 - v347)
      {
LABEL_286:
        v395 = (void ***)**((_QWORD **)v385 - 3);
        v164 = sub_1C5AC71DC(v340, (uint64_t *)&v395);
        sub_1C5AC747C(a1, *(_QWORD *)(v164 + 24));
        sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&v379);
        continue;
      }
      break;
    }
    if (v384 != v385)
    {
      v159 = v347 + 8;
      v160 = (char *)v384 + 8;
      do
      {
        v161 = v160 - 8;
        if (*((_QWORD *)v160 - 1) != *((_QWORD *)v159 - 1))
          goto LABEL_286;
        v162 = v159[8];
        if (v160[8])
          v163 = v162 == 0;
        else
          v163 = 1;
        if (v163)
        {
          if ((v160[8] == 0) == (v162 != 0))
            goto LABEL_286;
        }
        else if (*(_QWORD *)v160 != *(_QWORD *)v159)
        {
          goto LABEL_286;
        }
        v159 += 24;
        v160 += 24;
      }
      while (v161 + 24 != v385);
    }
    if (v347)
    {
      v348 = v347;
      operator delete(v347);
    }
    if (v343 != v342)
      free(v343);
    if (v384)
    {
      v385 = (char *)v384;
      operator delete(v384);
    }
    if (v380 != v379)
      free(v380);
    if (v366)
    {
      v367 = v366;
      operator delete(v366);
    }
    if (v358 != v357)
      free(v358);
    if (v355)
    {
      v356 = v355;
      operator delete(v355);
    }
    if (v351 != v350)
      free(v351);
LABEL_303:
    if (++v147 != v148)
      continue;
    break;
  }
LABEL_315:
  v167 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v167)
    v168 = (void *)(v167 - 24);
  else
    v168 = 0;
  v350 = v168;
  v169 = sub_1C5AC71DC(v340, (uint64_t *)&v350);
  *(_BYTE *)v169 = 1;
  if (*(_BYTE *)(v169 + 1))
    sub_1C5AC747C(a1, *(_QWORD *)(v169 + 24));
  v170 = *(_QWORD *)(a1 + 48);
  v171 = *(_QWORD *)(a1 + 56);
  if (v170 != v171)
  {
    while (2)
    {
      if (!**(_BYTE **)(v170 + 16))
      {
        v172 = (_QWORD *)(v170 + 24);
        if ((*(_BYTE *)(a1 + 1424) & 1) != 0)
        {
          v173 = 16;
          v174 = a1 + 1432;
LABEL_326:
          v175 = v173 - 1;
          v176 = ((*v172 >> 4) ^ (*v172 >> 9)) & v175;
          v177 = (_QWORD *)(v174 + 8 * v176);
          v178 = *v177;
          if (*v172 != *v177)
          {
            v179 = 0;
            v180 = 1;
            while (v178 != -4096)
            {
              if (v179)
                v181 = 0;
              else
                v181 = v178 == -8192;
              if (v181)
                v179 = v177;
              v182 = v176 + v180++;
              v176 = v182 & v175;
              v177 = (_QWORD *)(v174 + 8 * v176);
              v178 = *v177;
              if (*v172 == *v177)
                goto LABEL_342;
            }
            if (v179)
              v183 = v179;
            else
              v183 = v177;
            goto LABEL_339;
          }
        }
        else
        {
          v173 = *(_DWORD *)(a1 + 1440);
          if (v173)
          {
            v174 = *(_QWORD *)(a1 + 1432);
            goto LABEL_326;
          }
          v183 = 0;
LABEL_339:
          *sub_1C5AC7B84(a1 + 1424, v170 + 24, (_QWORD *)(v170 + 24), v183) = *v172;
          v184 = *v172;
          v185 = *(unsigned int *)(a1 + 1568);
          if (v185 >= *(unsigned int *)(a1 + 1572))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1560, a1 + 1576, v185 + 1, 8);
            v185 = *(unsigned int *)(a1 + 1568);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8 * v185) = v184;
          ++*(_DWORD *)(a1 + 1568);
        }
      }
LABEL_342:
      v170 += 48;
      if (v170 == v171)
        break;
      continue;
    }
  }
LABEL_345:
  v336 = (uint64_t **)(a1 + 96);
  v186 = (_QWORD *)(a1 + 1724);
  v187 = *(_DWORD *)(a1 + 104);
  while (2)
  {
    if (v187)
    {
      while (2)
      {
        v188 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v187 - 8);
        *(_DWORD *)(a1 + 104) = v187 - 1;
        v189 = *(_DWORD *)(v188 + 20);
        if ((v189 & 0x40000000) != 0)
        {
          v191 = *(uint64_t **)(v188 - 8);
          v190 = v189 & 0x7FFFFFF;
          if (v190)
            goto LABEL_351;
        }
        else
        {
          v190 = v189 & 0x7FFFFFF;
          v191 = (uint64_t *)(v188 - 32 * v190);
          if (!v190)
            goto LABEL_359;
LABEL_351:
          v192 = 32 * v190;
          do
          {
            if (*v191)
              v193 = *(unsigned __int8 *)(*v191 + 16) >= 0x1Cu;
            else
              v193 = 0;
            if (v193)
              sub_1C5AC747C(a1, *v191);
            v191 += 4;
            v192 -= 32;
          }
          while (v192);
        }
LABEL_359:
        if (v188)
        {
          if (*(_BYTE *)(v188 + 16) == 83)
          {
            v350 = *(void **)(v188 + 40);
            v194 = sub_1C5AC71DC(v340, (uint64_t *)&v350);
            if (!*(_BYTE *)(v194 + 2))
            {
              *(_BYTE *)(v194 + 2) = 1;
              v195 = *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8);
              if (v195)
              {
                while (1)
                {
                  v196 = *(_QWORD *)(v195 + 24);
                  v197 = *(unsigned __int8 *)(v196 + 16);
                  v198 = v196 && v197 >= 0x1C;
                  v199 = !v198 || v197 - 29 > 0xA;
                  if (!v199)
                    break;
                  v195 = *(_QWORD *)(v195 + 8);
                  if (!v195)
                    goto LABEL_362;
                }
LABEL_375:
                v200 = *(void **)(v196 + 40);
                v350 = v200;
                v201 = sub_1C5AC71DC(v340, (uint64_t *)&v350);
                if (!*(_BYTE *)(v201 + 3))
                {
                  *(_BYTE *)(v201 + 3) = 1;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 1704), (uint64_t)v200);
                }
                while (1)
                {
                  v195 = *(_QWORD *)(v195 + 8);
                  if (!v195)
                    break;
                  v196 = *(_QWORD *)(v195 + 24);
                  v202 = *(unsigned __int8 *)(v196 + 16);
                  if (v196)
                    v203 = v202 >= 0x1C;
                  else
                    v203 = 0;
                  if (v203 && v202 - 29 < 0xB)
                    goto LABEL_375;
                }
              }
            }
          }
        }
LABEL_362:
        v187 = *(_DWORD *)(a1 + 104);
        if (!v187)
          break;
        continue;
      }
    }
    v205 = *(unsigned int *)(a1 + 1568);
    if (!(_DWORD)v205)
      goto LABEL_620;
    v206 = *(uint64_t **)(a1 + 1560);
    v379 = v383;
    v380 = v383;
    v381 = 16;
    v207 = 8 * v205;
    v382 = 0;
    do
    {
      v208 = *v206++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v379, v208);
      v207 -= 8;
    }
    while (v207);
    v350 = &v352;
    v351 = (void *)0x2000000000;
    v342 = *(void ***)(a1 + 16);
    v343 = 0;
    v345 = &v379;
    v346[0] = a1 + 1704;
    LOBYTE(v344) = 1;
    sub_1C5AC7F60((uint64_t *)&v342, (uint64_t *)&v350);
    v209 = *(void **)(a1 + 1712);
    if (v209 == *(void **)(a1 + 1704))
    {
LABEL_390:
      *v186 = 0;
    }
    else
    {
      v215 = *(unsigned int *)(a1 + 1720);
      if (v215 < 0x21 || 4 * (*(_DWORD *)(a1 + 1724) - *(_DWORD *)(a1 + 1728)) >= v215)
      {
        memset(v209, 255, 8 * v215);
        goto LABEL_390;
      }
      free(v209);
      v216 = *(_DWORD *)(a1 + 1724) - *(_DWORD *)(a1 + 1728);
      v217 = 1 << (33 - __clz(v216 - 1));
      if (v216 <= 0x10)
        v218 = 32;
      else
        v218 = v217;
      *(_DWORD *)(a1 + 1720) = v218;
      *v186 = 0;
      v219 = malloc_type_malloc(8 * v218, 0x4065EBACuLL);
      if (!v219)
        goto LABEL_314;
      *(_QWORD *)(a1 + 1712) = v219;
      memset(v219, 255, 8 * *(unsigned int *)(a1 + 1720));
    }
    v210 = (unint64_t *)v350;
    if ((_DWORD)v351)
    {
      v211 = 8 * v351;
      do
      {
        v212 = *(_QWORD *)(*v210 + 40);
        if (v212 == *v210 + 40)
        {
          v214 = 0;
        }
        else
        {
          if (v212)
            v213 = v212 - 24;
          else
            v213 = 0;
          if (*(unsigned __int8 *)(v213 + 16) - 29 >= 0xB)
            v214 = 0;
          else
            v214 = v213;
        }
        sub_1C5AC747C(a1, v214);
        ++v210;
        v211 -= 8;
      }
      while (v211);
      v210 = (unint64_t *)v350;
    }
    if (v210 != &v352)
      free(v210);
    if (v380 != v379)
      free(v380);
    v187 = *(_DWORD *)(a1 + 104);
    if (v187)
      continue;
    break;
  }
  v220 = *(unsigned int *)(a1 + 1568);
  v379 = &v381;
  v380 = (void *)0xA00000000;
  if (!(_DWORD)v220)
    goto LABEL_620;
  v221 = 0;
  v222 = *(_QWORD ***)(a1 + 1560);
  v223 = &v222[v220];
  v224 = v339;
  v337 = v223;
  while (2)
  {
    v225 = *v222;
    v341 = *v222;
    v226 = sub_1C5AC71DC(v340, (uint64_t *)&v341);
    if (*(_BYTE *)(v226 + 1))
    {
      *(_BYTE *)sub_1C5AC7414(v224, (uint64_t *)(v226 + 24)) = 1;
      goto LABEL_592;
    }
    if ((v221 & 1) == 0)
    {
      v342 = (void **)v346;
      v343 = (void **)v346;
      v344 = 16;
      LODWORD(v345) = 0;
      v227 = *(_QWORD *)a1 + 72;
      v228 = *(_QWORD *)(*(_QWORD *)a1 + 80);
      if (v228 != v227)
      {
        v229 = 0;
        do
        {
          if (v228)
            v230 = v228 - 24;
          else
            v230 = 0;
          v231 = *(_QWORD *)(v230 + 40);
          if (v231 == v230 + 40)
            goto LABEL_435;
          v232 = v231 ? v231 - 24 : 0;
          if (*(_BYTE *)(v232 + 16) != 30)
          {
            switch(*(_BYTE *)(v232 + 16))
            {
              case 0x1E:
                goto LABEL_677;
              case 0x1F:
                v246 = (*(_DWORD *)(v232 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
              case 0x26:
                v246 = (*(_DWORD *)(v232 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x21:
              case 0x25:
                goto LABEL_432;
              case 0x24:
                v246 = *(_WORD *)(v232 + 18) & 1;
                break;
              case 0x27:
                v246 = *(_DWORD *)(v232 + 80) + 1;
                break;
              default:
                goto LABEL_435;
            }
            if (!v246)
            {
LABEL_435:
              v399 = &v342;
              v400 = v402;
              v401 = 0x800000000;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v342, v230);
              if (v233)
              {
                for (k = *(_QWORD *)(v230 + 8); k; k = *(_QWORD *)(k + 8))
                {
                  v235 = *(_QWORD *)(k + 24);
                  v236 = *(unsigned __int8 *)(v235 + 16);
                  if (v235)
                    v237 = v236 >= 0x1C;
                  else
                    v237 = 0;
                  if (v237 && v236 - 29 < 0xB)
                    break;
                }
                v239 = v401;
                if (v401 >= (unint64_t)HIDWORD(v401))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)v402, v401 + 1, 16);
                  v239 = v401;
                }
                v240 = (uint64_t *)((char *)v400 + 16 * v239);
                *v240 = v230;
                v240[1] = k;
                LODWORD(v401) = v401 + 1;
                sub_1C5AC8648(&v399);
              }
              v391 = v399;
              v392 = v394;
              v393 = 0x800000000;
              if ((_DWORD)v401)
                sub_1C486F660((uint64_t)&v392, (uint64_t)&v400);
              if (v400 != v402)
                free(v400);
              v387 = &v342;
              v388 = v390;
              v389 = 0x800000000;
              v399 = v391;
              v400 = v402;
              v401 = 0x800000000;
              if ((_DWORD)v393)
              {
                sub_1C486F510((uint64_t)&v400, (uint64_t)&v392);
                v395 = v387;
                v396 = v398;
                v397 = 0x800000000;
                if ((_DWORD)v389)
                  sub_1C486F510((uint64_t)&v396, (uint64_t)&v388);
              }
              else
              {
                v395 = &v342;
                v396 = v398;
                v397 = 0x800000000;
              }
              v350 = v399;
              v351 = v353;
              v352 = 0x800000000;
              if ((_DWORD)v401)
                sub_1C486F510((uint64_t)&v351, (uint64_t)&v400);
              v362 = (uint64_t)v395;
              v363 = v365;
              v364 = 0x800000000;
              if ((_DWORD)v397)
                sub_1C486F510((uint64_t)&v363, (uint64_t)&v396);
              if (v396 != v398)
                free(v396);
              if (v400 != v402)
                free(v400);
              if (v388 != v390)
                free(v388);
              if (v392 != v394)
                free(v392);
              v399 = (void ***)v350;
              v400 = v402;
              v401 = 0x800000000;
              if ((_DWORD)v352)
                sub_1C486F660((uint64_t)&v400, (uint64_t)&v351);
              v395 = (void ***)v362;
              v396 = v398;
              v397 = 0x800000000;
              if ((_DWORD)v364)
                sub_1C486F660((uint64_t)&v396, (uint64_t)&v363);
              while (1)
              {
                v241 = v400;
                if ((_DWORD)v401 == (_DWORD)v397)
                {
                  if (!(_DWORD)v401)
                  {
LABEL_484:
                    if (v396 != v398)
                    {
                      free(v396);
                      v241 = v400;
                    }
                    if (v241 != v402)
                      free(v241);
                    if (v363 != v365)
                      free(v363);
                    if (v351 != v353)
                      free(v351);
                    break;
                  }
                  v242 = v396;
                  v243 = v400;
                  while (*v243 == *v242 && v243[1] == v242[1])
                  {
                    v243 += 2;
                    v242 += 2;
                    if (v243 == (_QWORD *)((char *)v400 + 16 * v401))
                      goto LABEL_484;
                  }
                }
                v391 = (void ***)*((_QWORD *)v400 + 2 * v401 - 2);
                v245 = v229 + 1;
                *(_DWORD *)(sub_1C5AC71DC(v340, (uint64_t *)&v391) + 32) = v229++;
                LODWORD(v401) = v401 - 1;
                if ((_DWORD)v401)
                {
                  sub_1C5AC8648(&v399);
                  v229 = v245;
                }
              }
            }
          }
LABEL_432:
          v228 = *(_QWORD *)(v228 + 8);
        }
        while (v228 != v227);
        if (v343 != v342)
          free(v343);
      }
    }
    v248 = v225 + 5;
    v247 = (_QWORD *)v225[5];
    if (v247 == v225 + 5)
    {
      v299 = 0;
      v342 = (void **)v346;
      v343 = (void **)v346;
      v344 = 4;
      LODWORD(v345) = 0;
      goto LABEL_602;
    }
    if (v247)
      v249 = v247 - 3;
    else
      v249 = 0;
    if (*((_BYTE *)v249 + 16) == 30)
    {
      if ((*((_DWORD *)v249 + 5) & 0x7FFFFFF) == 3)
        v250 = 2;
      else
        v250 = 1;
LABEL_510:
      v299 = 0;
      for (m = 0; m != v250; ++m)
      {
        v350 = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v249, m);
        v252 = sub_1C5AC71DC(v340, (uint64_t *)&v350);
        if (!v299 || *(_DWORD *)(v299 + 32) < *(_DWORD *)(v252 + 32))
          v299 = v252;
      }
      v247 = (_QWORD *)*v248;
    }
    else
    {
      v250 = 2;
      v299 = 0;
      switch(*((_BYTE *)v249 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          break;
        case 0x1E:
          goto LABEL_677;
        case 0x1F:
          v250 = (*((_DWORD *)v249 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_596;
        case 0x20:
        case 0x26:
          v250 = (*((_DWORD *)v249 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_596;
        case 0x21:
          goto LABEL_510;
        case 0x24:
          v250 = *((_WORD *)v249 + 9) & 1;
          goto LABEL_596;
        case 0x25:
          v250 = 1;
          goto LABEL_510;
        case 0x27:
          v250 = *((_DWORD *)v249 + 20) + 1;
LABEL_596:
          if (!v250)
            goto LABEL_597;
          goto LABEL_510;
        default:
LABEL_597:
          v299 = 0;
          break;
      }
    }
    v342 = (void **)v346;
    v343 = (void **)v346;
    v344 = 4;
    LODWORD(v345) = 0;
    if (v247 == v248)
    {
LABEL_602:
      v264 = 0;
      v300 = *(_QWORD **)(v299 + 16);
      v260 = (_QWORD *)(v299 + 16);
      v261 = v300;
    }
    else
    {
      if (v247)
        v253 = v247 - 3;
      else
        v253 = 0;
      if (*((_BYTE *)v253 + 16) == 30)
      {
        if ((*((_DWORD *)v253 + 5) & 0x7FFFFFF) == 3)
          v254 = 2;
        else
          v254 = 1;
        goto LABEL_524;
      }
      v254 = 2;
      switch(*((_BYTE *)v253 + 16))
      {
        case 0x1E:
          goto LABEL_677;
        case 0x1F:
          v254 = (*((_DWORD *)v253 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          v254 = (*((_DWORD *)v253 + 5) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          goto LABEL_524;
        case 0x24:
          v254 = *((_WORD *)v253 + 9) & 1;
          break;
        case 0x25:
          v254 = 1;
          goto LABEL_524;
        case 0x27:
          v254 = *((_DWORD *)v253 + 20) + 1;
          break;
        default:
          goto LABEL_531;
      }
      if (v254)
      {
LABEL_524:
        v255 = v222;
        v256 = 0;
        v257 = 1;
        do
        {
          v258 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v253, v256);
          v259 = (uint64_t)v258;
          if ((v257 & 1) != 0 && v258 == *(llvm::BasicBlock **)(v299 + 16))
          {
            v257 = 0;
          }
          else
          {
            llvm::BasicBlock::removePredecessor(v258, (llvm::BasicBlock *)v225, 0);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v342, v259);
          }
          ++v256;
        }
        while (v254 != v256);
        v247 = (_QWORD *)*v248;
        v222 = v255;
      }
LABEL_531:
      v262 = *(_QWORD **)(v299 + 16);
      v260 = (_QWORD *)(v299 + 16);
      v261 = v262;
      if (v247 == v248)
      {
        v264 = 0;
      }
      else
      {
        if (v247)
          v263 = (uint64_t)(v247 - 3);
        else
          v263 = 0;
        if (*(unsigned __int8 *)(v263 + 16) - 29 >= 0xB)
          v264 = 0;
        else
          v264 = v263;
      }
    }
    v391 = (void ***)v264;
    v265 = *(_QWORD *)(v264 + 48);
    if (v265)
      sub_1C5AC78A0(a1, v265);
    if (*(_BYTE *)(v264 + 16) != 30 || (*(_DWORD *)(v264 + 20) & 0x7FFFFFF) != 1)
    {
      sub_1C4773D54((uint64_t)&v350, v264, 0, 0, 0);
      v266 = (char *)operator new(0x60uLL);
      v267 = v266;
      *((_DWORD *)v266 + 13) = *((_DWORD *)v266 + 13) & 0x38000000 | 1;
      *(_QWORD *)v266 = 0;
      *((_QWORD *)v266 + 2) = 0;
      *((_QWORD *)v266 + 1) = 0;
      *((_QWORD *)v266 + 4) = **(_QWORD **)*v261 + 1576;
      v268 = (llvm::Value *)(v266 + 32);
      *((_QWORD *)v266 + 3) = v266 + 32;
      *((_QWORD *)v266 + 5) = 0;
      v266[48] = 30;
      v266[49] = 0;
      *((_WORD *)v266 + 25) = 0;
      *((_DWORD *)v266 + 13) = 1;
      *(_OWORD *)(v266 + 56) = 0u;
      *(_OWORD *)(v266 + 72) = 0u;
      *((_DWORD *)v266 + 22) = 0;
      *(_QWORD *)v266 = v261;
      v271 = v261[1];
      v270 = v261 + 1;
      v269 = v271;
      *((_QWORD *)v266 + 1) = v271;
      if (v271)
        *(_QWORD *)(v269 + 16) = v266 + 8;
      *((_QWORD *)v266 + 2) = v270;
      *v270 = v266;
      v402[4] = 257;
      (*(void (**)(uint64_t, llvm::Value *, void ****, _QWORD, _QWORD))(*(_QWORD *)v354 + 16))(v354, v268, &v399, v353[3], v353[4]);
      if (!(_DWORD)v351)
      {
LABEL_561:
        v399 = (void ***)v268;
        v224 = v339;
        *(_BYTE *)sub_1C5AC7414(v339, (uint64_t *)&v399) = 1;
        v279 = *(unsigned __int8 **)(v264 + 48);
        if (v279)
        {
          v387 = *(void ****)(v264 + 48);
          llvm::MetadataTracking::track((uint64_t)&v387, v279, 2);
          v282 = (unsigned __int8 *)*((_QWORD *)v267 + 10);
          v281 = (void ****)(v267 + 80);
          v280 = v282;
          if (v282)
            llvm::MetadataTracking::untrack((uint64_t)v281, v280);
          v283 = (unsigned __int8 *)v387;
          *v281 = v387;
          if (v283)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v387, v283, (uint64_t)v281);
            v387 = 0;
          }
        }
        v399 = 0;
        if (sub_1C4E580F4(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 88), v264, &v399))
        {
          *v399 = (void **)-8192;
          *(int32x2_t *)(a1 + 80) = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v264 + 40) + 40, (uint64_t ***)v264);
        v284 = *(_QWORD *)(v264 + 24);
        v285 = *(_QWORD **)(v264 + 32);
        *v285 = v284;
        *(_QWORD *)(v284 + 8) = v285;
        *(_QWORD *)(v264 + 24) = 0;
        *(_QWORD *)(v264 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v264);
        if (v350 != &v352)
          free(v350);
        goto LABEL_570;
      }
      v272 = (char *)v350;
      v273 = (char *)v350 + 16 * v351;
      v274 = (unsigned __int8 **)(v267 + 80);
      while (1)
      {
        v275 = *(_DWORD *)v272;
        v276 = (unsigned __int8 *)*((_QWORD *)v272 + 1);
        if (v276)
        {
          if (!v275)
          {
            v395 = (void ***)*((_QWORD *)v272 + 1);
            llvm::MetadataTracking::track((uint64_t)&v395, v276, 2);
            v277 = *v274;
            if (!*v274)
            {
LABEL_559:
              v278 = (unsigned __int8 *)v395;
              *v274 = (unsigned __int8 *)v395;
              if (v278)
                llvm::MetadataTracking::retrack((uint64_t)&v395, v278, (uint64_t)(v267 + 80));
              goto LABEL_556;
            }
LABEL_553:
            llvm::MetadataTracking::untrack((uint64_t)(v267 + 80), v277);
            goto LABEL_559;
          }
        }
        else
        {
          v277 = *v274;
          if (!*v274 && (v267[55] & 0x20) == 0)
            goto LABEL_556;
          if (!v275)
          {
            v395 = 0;
            if (!v277)
              goto LABEL_559;
            goto LABEL_553;
          }
        }
        llvm::Value::setMetadata(v268, *(_DWORD *)v272, (llvm::MDNode *)v276);
LABEL_556:
        v272 += 16;
        if (v272 == v273)
          goto LABEL_561;
      }
    }
    llvm::Instruction::setSuccessor((llvm::Instruction *)v264, 0, (llvm::BasicBlock *)v261);
    v224 = v339;
    *(_BYTE *)sub_1C5AC7414(v339, (uint64_t *)&v391) = 1;
LABEL_570:
    v287 = v342;
    v286 = v343;
    v288 = (uint64_t *)((char *)&v344 + 4);
    if (v343 != v342)
      v288 = &v344;
    v289 = *(unsigned int *)v288;
    v290 = v343;
    if ((_DWORD)v289)
    {
      v291 = 0;
      while ((unint64_t)v343[v291] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v289 == ++v291)
          goto LABEL_589;
      }
      v290 = &v343[v291];
    }
    v292 = &v343[v289];
    if (v290 != v292)
    {
      v293 = (uint64_t)v341;
      v294 = (unint64_t)*v290;
LABEL_580:
      if (v294 != *v260)
      {
        v295 = v380;
        if (v380 >= (unint64_t)HIDWORD(v380))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v379, (uint64_t)&v381, v380 + 1, 16);
          v295 = v380;
        }
        v296 = (uint64_t *)((char *)v379 + 16 * v295);
        *v296 = v293;
        v296[1] = v294 | 4;
        LODWORD(v380) = (_DWORD)v380 + 1;
      }
      v297 = (unint64_t *)(v290 + 1);
      while (v297 != (unint64_t *)v292)
      {
        v298 = *v297++;
        v294 = v298;
        if (v298 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v290 = (void **)(v297 - 1);
          goto LABEL_580;
        }
      }
      v287 = v342;
      v286 = v343;
      v224 = v339;
    }
LABEL_589:
    if (v286 != v287)
      free(v286);
    v221 = 1;
    v223 = v337;
LABEL_592:
    if (++v222 != v223)
      continue;
    break;
  }
  v301 = (uint64_t *)v379;
  if ((_DWORD)v380)
  {
    v350 = &v352;
    v351 = (void *)0x1000000000;
    v369 = 0;
    v368 = 0;
    v370 = *(_OWORD *)(a1 + 8);
    v371 = 0;
    v372 = v376;
    v373 = v376;
    v374 = 8;
    v375 = 0;
    memset(v377, 0, sizeof(v377));
    v378 = 0;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)&v350, (unint64_t *)v379, v380);
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v350);
    v342 = (void **)v377;
    sub_1C50B10F0(&v342);
    if (v373 != v372)
      free(v373);
    if (v350 != &v352)
      free(v350);
    v301 = (uint64_t *)v379;
  }
  if (v301 != &v381)
    free(v301);
LABEL_620:
  v302 = *(_QWORD *)a1 + 72;
  for (n = *(_QWORD **)(*(_QWORD *)a1 + 80); n != (_QWORD *)v302; n = (_QWORD *)n[1])
  {
    v304 = n - 3;
    if (!n)
      v304 = 0;
    v305 = (uint64_t *)v304[6];
    if (v305 != v304 + 5)
    {
      if ((_QWORD *)v302 != n)
      {
        v306 = 0;
        v307 = (_QWORD *)(*(_QWORD *)a1 + 72);
        do
        {
          v308 = v307;
          for (ii = v306; ; ii = v311 + 5)
          {
            if (v308 != (_QWORD *)v302)
            {
              v310 = v308 - 3;
              if (!v308)
                v310 = 0;
              if (ii != (uint64_t *)v310[6])
                break;
            }
            v308 = (_QWORD *)*v308;
            v311 = v308 - 3;
            if (!v308)
              v311 = 0;
          }
          v312 = *ii;
          if (*ii)
            v313 = (_QWORD *)(*ii - 24);
          else
            v313 = 0;
          v350 = v313;
          if (!*(_BYTE *)sub_1C5AC7414(v339, (uint64_t *)&v350))
          {
            if (!sub_1C4D99D08((uint64_t)v313) || v312 == 0)
              goto LABEL_647;
            v315 = sub_1C477672C(a1 + 1136, *(_QWORD *)(v313[6] - 8 * *(unsigned int *)(v313[6] + 8)));
            v316 = *(_QWORD *)(a1 + 1144);
            v317 = 1152;
            if (v316 == *(_QWORD *)(a1 + 1136))
              v317 = 1156;
            if (v315 == (_QWORD *)(v316 + 8 * *(unsigned int *)(a1 + v317)))
            {
LABEL_647:
              v318 = *(unsigned int *)(a1 + 104);
              if (v318 >= *(unsigned int *)(a1 + 108))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v336, a1 + 112, v318 + 1, 8);
                v318 = *(unsigned int *)(a1 + 104);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v318) = v313;
              ++*(_DWORD *)(a1 + 104);
              v350 = &v352;
              v351 = (void *)0x100000000;
              llvm::findDbgUsers((uint64_t)&v350, (uint64_t)v313);
              llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v313, (uint64_t *)v350, v351);
              if (v350 != &v352)
                free(v350);
            }
          }
          while (1)
          {
            if (v307 != (_QWORD *)v302)
            {
              v320 = v307 - 3;
              if (!v307)
                v320 = 0;
              if (v306 != (uint64_t *)v320[6])
                break;
            }
            v307 = (_QWORD *)*v307;
            v319 = v307 - 3;
            if (!v307)
              v319 = 0;
            v306 = v319 + 5;
          }
          v306 = (uint64_t *)*v306;
        }
        while (v307 != n || v306 != v305);
      }
      break;
    }
  }
  v321 = *(unsigned int *)(a1 + 104);
  if (!(_DWORD)v321)
    return;
  v322 = *(uint64_t **)(a1 + 96);
  v323 = &v322[v321];
  do
  {
    v324 = *v322;
    v325 = *(_DWORD *)(*v322 + 20);
    if ((v325 & 0x40000000) != 0)
    {
      v327 = *(_QWORD *)(v324 - 8);
      v326 = v325 & 0x7FFFFFF;
      if (!v326)
        goto LABEL_669;
    }
    else
    {
      v326 = v325 & 0x7FFFFFF;
      v327 = v324 - 32 * v326;
      if (!v326)
        goto LABEL_669;
    }
    v328 = 32 * v326;
    v329 = (_QWORD **)(v327 + 16);
    do
    {
      if (*(v329 - 2))
      {
        **v329 = *(v329 - 1);
        v330 = (uint64_t)*(v329 - 1);
        if (v330)
          *(_QWORD *)(v330 + 16) = *v329;
      }
      *(v329 - 2) = 0;
      v329 += 4;
      v328 -= 32;
    }
    while (v328);
LABEL_669:
    ++v322;
  }
  while (v322 != v323);
  v331 = *v336;
  v332 = 8 * v321;
  do
  {
    v333 = *v331++;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v333 + 40) + 40, (uint64_t ***)v333);
    v334 = *(_QWORD *)(v333 + 24);
    v335 = *(_QWORD **)(v333 + 32);
    *v335 = v334;
    *(_QWORD *)(v334 + 8) = v335;
    *(_QWORD *)(v333 + 24) = 0;
    *(_QWORD *)(v333 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v333);
    v332 -= 8;
  }
  while (v332);
}

uint64_t sub_1C5AC6FD0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 1712);
  if (v2 != *(void **)(a1 + 1704))
    free(v2);
  v3 = *(void **)(a1 + 1560);
  if (v3 != (void *)(a1 + 1576))
    free(v3);
  if ((*(_BYTE *)(a1 + 1424) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1432), 8);
  v4 = *(void **)(a1 + 1144);
  if (v4 != *(void **)(a1 + 1136))
    free(v4);
  v5 = *(void **)(a1 + 96);
  if (v5 != (void *)(a1 + 112))
    free(v5);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  return a1;
}

uint64_t sub_1C5AC7080(uint64_t a1)
{
  uint64_t v2;

  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Aggressive Dead Code Elimination";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "adce";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &unk_1ED81B768;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5AC8760;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AC7114(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B768;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8193CE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B770);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AC7080;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B770, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5AC71DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  int v33;

  v4 = *a2;
  v32 = *a2;
  v33 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_11:
      v15 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v16 = *(_QWORD *)(a1 + 24);
      return v16 + 48 * v15 + 8;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_11;
    }
    if (v11)
      v17 = v11;
    else
      v17 = v9;
  }
  else
  {
    v17 = 0;
  }
  v18 = sub_1C4DE3FA0(a1, (uint64_t)&v32, &v32, v17);
  *v18 = v32;
  *((_DWORD *)v18 + 2) = v33;
  v19 = *a2;
  v21 = *(uint64_t **)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(char **)(a1 + 24);
    v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v23) >> 4) + 1;
    if (v24 > 0x555555555555555)
      abort();
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v23) >> 4);
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x2AAAAAAAAAAAAAALL)
      v26 = 0x555555555555555;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 > 0x555555555555555)
        sub_1C4764EE4();
      v27 = (char *)operator new(48 * v26);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[16 * (((char *)v21 - v23) >> 4)];
    *(_QWORD *)v28 = v19;
    *(_OWORD *)(v28 + 8) = 0u;
    v22 = v28 + 48;
    *(_OWORD *)(v28 + 24) = 0u;
    *((_QWORD *)v28 + 5) = 0;
    if (v21 != (uint64_t *)v23)
    {
      do
      {
        v29 = *((_OWORD *)v21 - 3);
        v30 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v28 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v28 - 1) = v30;
        *((_OWORD *)v28 - 3) = v29;
        v28 -= 48;
        v21 -= 6;
      }
      while (v21 != (uint64_t *)v23);
      v21 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v28;
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = &v27[48 * v26];
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v21 = v19;
    v22 = v21 + 6;
    *(_OWORD *)(v21 + 1) = 0u;
    *(_OWORD *)(v21 + 3) = 0u;
    v21[5] = 0;
  }
  *(_QWORD *)(a1 + 32) = v22;
  v16 = *(_QWORD *)(a1 + 24);
  v15 = -1431655765 * (((unint64_t)v22 - v16) >> 4) - 1;
  *((_DWORD *)v18 + 2) = v15;
  return v16 + 48 * v15 + 8;
}

_QWORD *sub_1C5AC7414(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5AC77F0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5 + 1;
}

_QWORD *sub_1C5AC747C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t Successor;

  v19 = a2;
  result = sub_1C5AC7414(a1 + 72, &v19);
  if (!*(_BYTE *)result)
  {
    v5 = result;
    *(_BYTE *)result = 1;
    v6 = *(unsigned int *)(a1 + 104);
    if (v6 >= *(_DWORD *)(a1 + 108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 96, a1 + 112, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 104);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 104);
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
      sub_1C5AC78A0(a1, v7);
    v8 = v5[1];
    if (*(_QWORD *)(v8 + 24) == a2)
    {
      if (sub_1C5AC7990(a1 + 1424, (_QWORD *)(v8 + 16)))
      {
        v9 = *(_QWORD **)(a1 + 1560);
        v10 = *(unsigned int *)(a1 + 1568);
        v11 = &v9[v10];
        if ((_DWORD)v10)
        {
          v12 = 8 * v10;
          while (*v9 != *(_QWORD *)(v8 + 16))
          {
            ++v9;
            v12 -= 8;
            if (!v12)
            {
              v9 = v11;
              break;
            }
          }
        }
        if (v11 != v9 + 1)
        {
          memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
          LODWORD(v10) = *(_DWORD *)(a1 + 1568);
        }
        *(_DWORD *)(a1 + 1568) = v10 - 1;
      }
      if (!*(_BYTE *)(v8 + 1))
      {
        v13 = *(_QWORD *)(a2 + 40);
        v14 = *(_QWORD *)(v13 + 40);
        if (v14 != v13 + 40)
        {
          if (v14)
            v15 = v14 - 24;
          else
            v15 = 0;
          if (*(_BYTE *)(v15 + 16) != 30)
          {
            v16 = 2;
            switch(*(_BYTE *)(v15 + 16))
            {
              case 0x1E:
                __break(1u);
                goto LABEL_33;
              case 0x1F:
                v16 = (*(_DWORD *)(v15 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_30;
              case 0x20:
              case 0x26:
LABEL_33:
                v16 = (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_30;
              case 0x21:
                goto LABEL_25;
              case 0x24:
                v16 = *(_WORD *)(v15 + 18) & 1;
                goto LABEL_30;
              case 0x25:
                v16 = 1;
                goto LABEL_25;
              case 0x27:
                v16 = *(_DWORD *)(v15 + 80) + 1;
LABEL_30:
                if (!v16)
                  return sub_1C5AC792C((_QWORD *)a1, v8);
                goto LABEL_25;
              default:
                return sub_1C5AC792C((_QWORD *)a1, v8);
            }
          }
          if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3)
            v16 = 2;
          else
            v16 = 1;
LABEL_25:
          for (i = 0; i != v16; ++i)
          {
            Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v15, i);
            v18 = sub_1C5AC71DC(a1 + 24, &Successor);
            sub_1C5AC792C((_QWORD *)a1, v18);
          }
        }
      }
    }
    return sub_1C5AC792C((_QWORD *)a1, v8);
  }
  return result;
}

_QWORD *sub_1C5AC76A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (_OWORD *)(v4 + 8);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          *(_OWORD *)(v15 + 1) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (_OWORD *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -4096;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_1C5AC77F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v8 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5AC76A4(a1, v6);
  sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v8;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5AC78A0(uint64_t a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v3;
  _QWORD *result;
  char v5;
  llvm::DIScope *i;
  char v7;

  v3 = (llvm::SmallPtrSetImplBase *)(a1 + 1136);
  do
  {
    result = sub_1C4774094(v3, a2);
    if (!v5)
      break;
    for (i = *(llvm::DIScope **)(a2 - 8 * *(unsigned int *)(a2 + 8)); ; i = (llvm::DIScope *)llvm::DIScope::getScope(i))
    {
      result = sub_1C4774094(v3, (uint64_t)i);
      if (!v7 || *(_BYTE *)i == 17)
        break;
    }
    if (*(_DWORD *)(a2 + 8) != 2)
      break;
    a2 = *(_QWORD *)(a2 - 8);
  }
  while (a2);
  return result;
}

_QWORD *sub_1C5AC792C(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  if (!*(_BYTE *)a2)
  {
    v3 = result;
    *(_BYTE *)a2 = 1;
    if (!*(_BYTE *)(a2 + 3))
    {
      *(_BYTE *)(a2 + 3) = 1;
      result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(result + 213), *(_QWORD *)(a2 + 16));
    }
    if (*(_BYTE *)(a2 + 1))
      return (_QWORD *)sub_1C5AC747C(v3, *(_QWORD *)(a2 + 24));
  }
  return result;
}

uint64_t sub_1C5AC7990(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 16;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_10:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1C5AC7A24(uint64_t result, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = v4 - 1;
    v7 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v4 - 1);
    v8 = *(_QWORD *)a2 + 16 * v7;
    v9 = *(_QWORD *)v8;
    if (*a3 == *(_QWORD *)v8)
    {
LABEL_11:
      v14 = 0;
      goto LABEL_12;
    }
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = v5 + 16 * (v13 & v6);
      v9 = *(_QWORD *)v8;
      if (*a3 == *(_QWORD *)v8)
        goto LABEL_11;
    }
    if (v10)
      v8 = v10;
  }
  else
  {
    v8 = 0;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v4)
  {
    v4 *= 2;
    goto LABEL_22;
  }
  if (v4 + ~v15 - *(_DWORD *)(a2 + 12) <= v4 >> 3)
  {
LABEL_22:
    v17 = result;
    v19 = (uint64_t *)a2;
    v16 = a4;
    v18 = a3;
    sub_1C574EB5C(a2, v4);
    v20 = 0;
    sub_1C4E62854(v19, v18, &v20);
    result = v17;
    a3 = v18;
    a4 = v16;
    a2 = (uint64_t)v19;
    v8 = v20;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v8 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v8 = *a3;
  *(_BYTE *)(v8 + 8) = *a4;
  v5 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_12:
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = v5 + 16 * v4;
  *(_BYTE *)(result + 16) = v14;
  return result;
}

_QWORD *sub_1C5AC7B84(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C5AC7CF8(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C5AC7CF8(a1, v8);
      v20 = 0;
      sub_1C49EE218(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C5AC7CF8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5AC7E60((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5AC7E60((int *)a1, v14, v8);
}

int *sub_1C5AC7E60(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v8[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C5AC7F60(uint64_t *a1, uint64_t *a2)
{
  _BYTE *v4;
  unint64_t **v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50[5];
  uint64_t v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[256];
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[256];
  void *v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[256];
  void *v69;
  uint64_t v70;
  _QWORD v71[67];

  v71[65] = *MEMORY[0x1E0C80C00];
  v69 = v71;
  v70 = 0x2000000000;
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(*a1);
  v66 = v68;
  v67 = 0x2000000000;
  v58 = v62;
  v59 = v62;
  v60 = 32;
  v61 = 0;
  v4 = v57;
  v53 = v57;
  v54 = v57;
  v55 = 32;
  v56 = 0;
  v5 = (unint64_t **)a1[4];
  v6 = v5[1];
  v7 = 16;
  if (v6 == *v5)
    v7 = 20;
  v8 = *(unsigned int *)((char *)v5 + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v6;
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_27;
    }
  }
  else
  {
    v10 = v6;
  }
  v11 = &v6[v8];
  if (v10 == v11)
  {
LABEL_27:
    v13 = v57;
    goto LABEL_28;
  }
  v12 = *v10;
  v13 = v57;
LABEL_11:
  v14 = *(_QWORD *)(*a1 + 48);
  v15 = *(unsigned int *)(*a1 + 64);
  if (!(_DWORD)v15)
    goto LABEL_17;
  LODWORD(v16) = ((v12 >> 4) ^ (v12 >> 9)) & (v15 - 1);
  v17 = (uint64_t *)(v14 + 16 * v16);
  v18 = *v17;
  if (v12 != *v17)
  {
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v12 == v18)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = (uint64_t *)(v14 + 16 * v15);
  }
LABEL_18:
  if (v17 != (uint64_t *)(v14 + 16 * v15))
  {
    v21 = v17[1];
    if (v21)
    {
      v22 = *(unsigned int *)(v21 + 16);
      v23 = *(unsigned int *)(v21 + 72);
      v24 = v70;
      if (v70 >= (unint64_t)HIDWORD(v70))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v70 + 1, 16);
        v24 = v70;
      }
      v25 = (uint64_t *)((char *)v69 + 16 * v24);
      *v25 = v21;
      v25[1] = v22 | (v23 << 32);
      LODWORD(v70) = v70 + 1;
      sub_1C4ED78FC((uint64_t)v69, (uint64_t)v69 + 16 * v70, (uint64_t)&v63, v70);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, v21);
      v4 = v53;
      v13 = v54;
    }
  }
  v26 = v10 + 1;
  while (v26 != v11)
  {
    v27 = *v26++;
    v12 = v27;
    if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = v26 - 1;
      goto LABEL_11;
    }
  }
LABEL_28:
  v28 = v70;
  if ((_DWORD)v70)
  {
    do
    {
      v29 = v69;
      v30 = *(_QWORD *)v69;
      v31 = *((_DWORD *)v69 + 2);
      if (v28 != 1)
      {
        v49 = *(_QWORD *)v69;
        v32 = (char *)v69 + 16 * v28;
        v48 = *((_DWORD *)v69 + 3);
        v33 = sub_1C4ED79C8((uint64_t)v69, (uint64_t)&v63, v28);
        if ((char *)v33 == v32 - 16)
        {
          v30 = v49;
          *(_QWORD *)v33 = v49;
          *(_DWORD *)(v33 + 8) = v31;
          *(_DWORD *)(v33 + 12) = v48;
        }
        else
        {
          *(_QWORD *)v33 = *((_QWORD *)v32 - 2);
          *(_DWORD *)(v33 + 8) = *((_DWORD *)v32 - 2);
          *(_DWORD *)(v33 + 12) = *((_DWORD *)v32 - 1);
          *((_QWORD *)v32 - 2) = v49;
          *((_DWORD *)v32 - 2) = v31;
          *((_DWORD *)v32 - 1) = v48;
          v30 = v49;
          sub_1C4ED78FC((uint64_t)v29, v33 + 16, (uint64_t)&v63, (v33 + 16 - (uint64_t)v29) >> 4);
        }
      }
      LODWORD(v70) = v70 - 1;
      v52 = v31;
      v34 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v67 + 1, 8);
        v34 = v67;
      }
      *((_QWORD *)v66 + v34) = v30;
      v35 = __CFADD__((_DWORD)v67, 1);
      v36 = v67 + 1;
      LODWORD(v67) = v67 + 1;
      if (!v35)
      {
        do
        {
          v37 = *((_QWORD *)v66 + v36 - 1);
          LODWORD(v67) = v36 - 1;
          v51 = 0;
          v38 = *(_QWORD *)v37;
          v50[4] = (uint64_t *)&v69;
          v51 = v38;
          v50[0] = a1;
          v50[1] = (uint64_t *)&v52;
          v50[2] = (uint64_t *)&v58;
          v50[3] = a2;
          sub_1C5AC83F8(a1 + 1, &v51, (uint64_t)&v63);
          v39 = (uint64_t *)v63;
          if (v64)
          {
            v40 = 8 * v64;
            do
            {
              v41 = *v39++;
              sub_1C5AC844C(v50, v41);
              v40 -= 8;
            }
            while (v40);
            v39 = (uint64_t *)v63;
          }
          if (v39 != &v65)
            free(v39);
          v42 = *(unsigned int *)(v37 + 32);
          if ((_DWORD)v42)
          {
            v43 = *(uint64_t **)(v37 + 24);
            v44 = 8 * v42;
            do
            {
              v45 = *v43;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, *v43);
              if (v46)
              {
                v47 = v67;
                if (v67 >= (unint64_t)HIDWORD(v67))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v67 + 1, 8);
                  v47 = v67;
                }
                *((_QWORD *)v66 + v47) = v45;
                LODWORD(v67) = v67 + 1;
              }
              ++v43;
              v44 -= 8;
            }
            while (v44);
          }
          v36 = v67;
        }
        while ((_DWORD)v67);
      }
      v28 = v70;
    }
    while ((_DWORD)v70);
    v4 = v53;
    v13 = v54;
  }
  if (v13 != v4)
    free(v13);
  if (v59 != v58)
    free(v59);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
}

unsigned int *sub_1C5AC83F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;

  v3 = *a1;
  v4 = *a2;
  if (v3)
    return (unsigned int *)sub_1C53C36D0(v3, v4, (unsigned int *)a3);
  do
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      break;
    v6 = *(_QWORD *)(v4 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    v8 = v6 && v7 >= 0x1C;
  }
  while (!v8 || v7 - 29 >= 0xB);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  return sub_1C4DBBCC0((unsigned int *)a3, v4, 0);
}

uint64_t **sub_1C5AC844C(uint64_t **result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v2 = result;
  v3 = *result;
  v4 = **result;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(unsigned int *)(v4 + 64);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (uint64_t *)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 == (uint64_t *)(v5 + 16 * v6))
    v12 = 0;
  else
    v12 = v8[1];
  v13 = *(unsigned int *)(v12 + 16);
  if (v13 <= *(_DWORD *)result[1])
  {
    result = (uint64_t **)sub_1C4774094((llvm::SmallPtrSetImplBase *)result[2], v12);
    if (v14)
    {
      v15 = *(_QWORD *)v12;
      if (!*((_BYTE *)v3 + 16))
        goto LABEL_17;
      v16 = (_QWORD *)v3[3];
      result = (uint64_t **)sub_1C477672C((uint64_t)v16, *(_QWORD *)v12);
      v17 = v16[1];
      v18 = 16;
      if (v17 == *v16)
        v18 = 20;
      if (result != (uint64_t **)(v17 + 8 * *(unsigned int *)((char *)v16 + v18)))
      {
LABEL_17:
        v19 = (uint64_t)v2[3];
        v20 = *(unsigned int *)(v19 + 8);
        if (v20 >= *(_DWORD *)(v19 + 12))
        {
          v29 = (uint64_t)v2[3];
          llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v19 + 16, v20 + 1, 8);
          v19 = v29;
          *(_QWORD *)(*(_QWORD *)v29 + 8 * *(unsigned int *)(v29 + 8)) = v15;
          LODWORD(v20) = *(_DWORD *)(v29 + 8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v15;
        }
        *(_DWORD *)(v19 + 8) = v20 + 1;
        v21 = (_QWORD *)v3[4];
        result = (uint64_t **)sub_1C477672C((uint64_t)v21, v15);
        v22 = v21[1];
        v23 = 16;
        if (v22 == *v21)
          v23 = 20;
        if (result == (uint64_t **)(v22 + 8 * *(unsigned int *)((char *)v21 + v23)))
        {
          v24 = (uint64_t)v2[4];
          v25 = v13 | ((unint64_t)*(unsigned int *)(v12 + 72) << 32);
          v26 = *(unsigned int *)(v24 + 8);
          if (v26 >= *(_DWORD *)(v24 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v24, v24 + 16, v26 + 1, 16);
            LODWORD(v26) = *(_DWORD *)(v24 + 8);
          }
          v27 = (uint64_t *)(*(_QWORD *)v24 + 16 * v26);
          *v27 = v12;
          v27[1] = v25;
          v28 = (*(_DWORD *)(v24 + 8) + 1);
          *(_DWORD *)(v24 + 8) = v28;
          return (uint64_t **)sub_1C4ED78FC(*(_QWORD *)v24, *(_QWORD *)v24 + 16 * v28, (uint64_t)&v30, v28);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5AC8648(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  char v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v1 = result + 1;
  v2 = result[1] + 16 * *((unsigned int *)result + 4);
  v5 = *(_QWORD *)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  if (v5)
  {
    v6 = result;
    v7 = (uint64_t)(result + 3);
    do
    {
      v8 = v4;
      do
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          break;
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v9 && v10 >= 0x1C;
      }
      while (!v11 || v10 - 29 > 0xA);
      *v3 = v8;
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
      result = sub_1C4774094((llvm::SmallPtrSetImplBase *)*v6, v13);
      if (v14)
      {
        for (i = *(_QWORD *)(v13 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v16 = *(_QWORD *)(i + 24);
          v17 = *(unsigned __int8 *)(v16 + 16);
          if (v16)
            v18 = v17 >= 0x1C;
          else
            v18 = 0;
          if (v18 && v17 - 29 < 0xB)
            break;
        }
        v20 = *((unsigned int *)v6 + 4);
        if (v20 >= *((unsigned int *)v6 + 5))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v7, v20 + 1, 16);
          v20 = *((unsigned int *)v6 + 4);
        }
        v21 = (uint64_t *)(v6[1] + 16 * v20);
        *v21 = v13;
        v21[1] = i;
        v22 = *((_DWORD *)v6 + 4) + 1;
        *((_DWORD *)v6 + 4) = v22;
      }
      else
      {
        v22 = *((_DWORD *)v6 + 4);
      }
      v23 = *v1 + 16 * v22;
      v24 = *(_QWORD *)(v23 - 8);
      v3 = (_QWORD *)(v23 - 8);
      v4 = v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_1C5AC8760()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AC7114(v0);
}

void sub_1C5AC878C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AC87B0(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  if (byte_1ED835BD0)
  {
    sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
    sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  }
  else
  {
    llvm::AnalysisUsage::setPreservesCFG(a2);
  }
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5AC8830(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AnalysisPass;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  _QWORD v15[5];
  int v16;
  __int128 v17;
  _BYTE v18[28];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[131];
  int v22;
  _QWORD v23[51];
  _QWORD v24[19];
  int v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)a1 + 1);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v5 + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    v5 = *((_QWORD *)a1 + 1);
  }
  v7 = *(void ***)v5;
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::PostDominatorTreeWrapperPass::ID);
  if (AnalysisPass)
    v9 = AnalysisPass + 32;
  else
    v9 = 0;
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v15[0] = a2;
  v15[1] = v9;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v10 + 32;
  v16 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v19 = v21;
  v20 = 0x8000000000;
  v21[128] = v23;
  v21[129] = v23;
  v21[130] = 32;
  v22 = 0;
  v23[32] = 1;
  v11 = 179;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v15[v11] = v12;
    v11 += 2;
  }
  while (v11 != 195);
  v23[49] = v24;
  v23[50] = 0x1000000000;
  v24[16] = v26;
  v24[17] = v26;
  v24[18] = 16;
  v25 = 0;
  sub_1C5AC4CE8((uint64_t)v15);
  v4 = v13;
  sub_1C5AC6FD0((uint64_t)v15);
  return v4;
}

uint64_t sub_1C5AC89D4()
{
  int v1;
  char v2;
  char *v3;

  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED835B50, "adce-remove-control-flow", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED835B50, &dword_1C475E000);
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED81B6A8, "adce-remove-loops", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81B6A8, &dword_1C475E000);
}

uint64_t sub_1C5AC8A94(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Alignment from assumptions";
  *(_QWORD *)(v3 + 8) = 26;
  *(_QWORD *)(v3 + 16) = "alignment-from-assumptions";
  *(_QWORD *)(v3 + 24) = 26;
  *(_QWORD *)(v3 + 32) = &unk_1ED81B778;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5AC9584;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5AC8B34(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B778;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8193D88;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B780);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AC8A94;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B780, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::AlignmentFromAssumptionsPass::processAssumption(llvm::ScalarEvolution **this, llvm::Type ***a2, unsigned int a3)
{
  uint64_t result;
  const llvm::DominatorTree *v6;
  llvm::Value *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  uint64_t SCEVIter;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v24;
  unint64_t v25;
  const llvm::DominatorTree *v26;
  llvm::Value *v27;
  unsigned __int8 v28;
  char v29;
  unsigned int v30;
  llvm::Value *v32;
  unsigned __int8 v33;
  char v34;
  uint64_t i;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[256];
  llvm::SCEV *v45;
  llvm::SCEV *v46;
  llvm::Value *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[18];

  v50[16] = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v47 = 0;
  v45 = 0;
  result = llvm::AlignmentFromAssumptionsPass::extractAlignmentInfo(this, a2, a3, &v47, &v46, &v45);
  if (!(_DWORD)result)
    return result;
  v7 = v47;
  if (*((unsigned __int8 *)v47 + 16) - 11 < 0xA)
    return 0;
  v8 = *((_QWORD *)*this + 13);
  v9 = *((_DWORD *)*this + 30);
  if (v9)
  {
    v10 = (v9 - 1) & ((v47 >> 4) ^ (v47 >> 9));
    v11 = v8 + 48 * v10;
    v12 = *(llvm::Value **)(v11 + 24);
    if (v12 == v47)
      goto LABEL_11;
    v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v11 = v8 + 48 * v10;
      v12 = *(llvm::Value **)(v11 + 24);
      if (v12 == v47)
        goto LABEL_11;
    }
  }
  v11 = v8 + 48 * v9;
LABEL_11:
  if (v11 == v8 + 48 * v9 || (SCEVIter = *(_QWORD *)(v11 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(*this, (unint64_t)v47);
  v40 = v44;
  v41 = v44;
  v42 = 32;
  v43 = 0;
  v48 = v50;
  v49 = 0x1000000000;
  v16 = *((_QWORD *)v7 + 1);
  if (v16)
  {
    v17 = 0;
    do
    {
      v18 = *(unsigned __int8 **)(v16 + 24);
      if (v18 != (unsigned __int8 *)a2 && v18 && v18[16] >= 0x1Cu)
      {
        if (v17 >= HIDWORD(v49))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v17 + 1, 8);
          v17 = v49;
        }
        v48[v17] = v18;
        v17 = v49 + 1;
        LODWORD(v49) = v49 + 1;
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16);
    if (v17)
    {
      v20 = (int)v46;
      v21 = (int)v45;
      do
      {
        v22 = v48[v17 - 1];
        LODWORD(v49) = v17 - 1;
        v23 = *(unsigned __int8 *)(v22 + 16);
        if (v22 && v23 == 60 || v22 && v23 == 61)
        {
          if (llvm::isValidAssumeForContext((llvm *)a2, (const llvm::Instruction *)v22, this[1], v6))
          {
            sub_1C5AC902C(SCEVIter, v20, v21, *(llvm::Value **)(v22 - 32), *this);
            v25 = *(unsigned __int16 *)(v22 + 18);
            if ((__clz(1 << (v25 >> 1)) ^ 0x3F) < v24)
              *(_WORD *)(v22 + 18) = v25 & 0xFF81 | (2 * v24);
LABEL_45:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v40, v22);
            for (i = *(_QWORD *)(v22 + 8); i; i = *(_QWORD *)(i + 8))
            {
              v36 = *(_QWORD *)(i + 24);
              v37 = (char *)sub_1C477672C((uint64_t)&v40, v36);
              if (v41 == v40)
                v38 = (uint64_t *)((char *)&v42 + 4);
              else
                v38 = &v42;
              if (v37 == &v41[8 * *(unsigned int *)v38])
              {
                v39 = v49;
                if (v49 >= (unint64_t)HIDWORD(v49))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v49 + 1, 8);
                  v39 = v49;
                }
                v48[v39] = v36;
                LODWORD(v49) = v49 + 1;
              }
            }
          }
        }
        else
        {
          if (!sub_1C4DE85D0(v22))
            goto LABEL_45;
          if (llvm::isValidAssumeForContext((llvm *)a2, (const llvm::Instruction *)v22, this[1], v26))
          {
            v27 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)));
            sub_1C5AC902C(SCEVIter, v20, v21, v27, *this);
            v29 = v28;
            if (llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v22 + 64), 0) < v28)
              sub_1C509D0D0(v22, v29);
            v30 = *(_DWORD *)(*(_QWORD *)(v22 - 32) + 36) - 194;
            if (v30 <= 3 && v30 != 1)
            {
              v32 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v22
                                                                   - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)
                                                                   + 32));
              sub_1C5AC902C(SCEVIter, v20, v21, v32, *this);
              v34 = v33;
              if (llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v22 + 64), 1) < v33)
                sub_1C509D15C(v22, v34);
            }
            goto LABEL_45;
          }
        }
        v17 = v49;
      }
      while ((_DWORD)v49);
    }
  }
  if (v48 != v50)
    free(v48);
  if (v41 != v40)
    free(v41);
  return 1;
}

void sub_1C5AC902C(uint64_t a1, int a2, int a3, llvm::Value *a4, llvm::ScalarEvolution *this)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  llvm::Value *v10;
  int v11;
  unsigned int v12;

  v6 = *((_QWORD *)this + 13);
  v7 = *((_DWORD *)this + 30);
  if (v7)
  {
    v8 = (v7 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    v9 = v6 + 48 * v8;
    v10 = *(llvm::Value **)(v9 + 24);
    if (v10 == a4)
    {
LABEL_8:
      if (v9 == v6 + 48 * v7 || !*(_QWORD *)(v9 + 40))
        llvm::ScalarEvolution::createSCEVIter(this, (unint64_t)a4);
      __asm { BR              X11 }
    }
    v11 = 1;
    while (v10 != (llvm::Value *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = v6 + 48 * v8;
      v10 = *(llvm::Value **)(v9 + 24);
      if (v10 == a4)
        goto LABEL_8;
    }
  }
  v9 = v6 + 48 * v7;
  goto LABEL_8;
}

void sub_1C5AC9114()
{
  JUMPOUT(0x1C5AC9100);
}

void sub_1C5AC9120()
{
  JUMPOUT(0x1C5AC9118);
}

uint64_t sub_1C5AC9128(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  llvm::Type **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;

  v31 = *(llvm::Type ***)(v26 + 32);
  if (*((_BYTE *)*v31 + 8) != 13)
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v27 + 40) + 272), *v31);
  llvm::ScalarEvolution::getTruncateOrZeroExtend(v27, v30);
  llvm::ScalarEvolution::getMinusSCEV(v27, v32, v29);
  v34 = v33;
  result = 0;
  if (*(_WORD *)(v34 + 24) != 15)
    __asm { BR              X11 }
  return result;
}

uint64_t llvm::AlignmentFromAssumptionsPass::runImpl(llvm::AlignmentFromAssumptionsPass *this, llvm::Function *a2, llvm::AssumptionCache *a3, llvm::ScalarEvolution *a4, llvm::DominatorTree *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int i;
  int v13;
  unint64_t v14;

  *(_QWORD *)this = a4;
  *((_QWORD *)this + 1) = a5;
  if (!*((_BYTE *)a3 + 184))
    llvm::AssumptionCache::scanFunction(a3);
  v7 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *((_QWORD *)a3 + 2);
    v10 = v9 + 32 * v7;
    do
    {
      v11 = *(_QWORD *)(v9 + 16);
      if (v11)
      {
        for (i = 0; ; ++i)
        {
          v13 = *(_DWORD *)(v11 + 20);
          v14 = v13 < 0 ? *(_QWORD *)(v11 - 8 - 32 * (v13 & 0x7FFFFFF)) : 0;
          if (i >= (v14 >> 4))
            break;
          v8 |= llvm::AlignmentFromAssumptionsPass::processAssumption((llvm::ScalarEvolution **)this, (llvm::Type ***)v11, i);
        }
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  return v8 & 1;
}

_QWORD *llvm::AlignmentFromAssumptionsPass::run@<X0>(llvm::AlignmentFromAssumptionsPass *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::AssumptionCache *v8;
  llvm::ScalarEvolution *v9;
  uint64_t ResultImpl;
  llvm::Function *v11;
  char v12;

  v8 = (llvm::AssumptionCache *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2)+ 8);
  v9 = (llvm::ScalarEvolution *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, a2)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2);
  v12 = llvm::AlignmentFromAssumptionsPass::runImpl(a1, v11, v8, v9, (llvm::DominatorTree *)(ResultImpl + 8));
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v12 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::CFGAnalyses::SetKey);
  return sub_1C4DDB144(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
}

uint64_t sub_1C5AC9584()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AC8B34(v0);
}

void sub_1C5AC95B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AC95D4(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C5AC969C(_QWORD **a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  llvm::AssumptionCacheTracker *v7;
  llvm::AssumptionCache *AssumptionCache;
  void **v9;
  void *v10;
  llvm::ScalarEvolution *v11;
  void **v12;
  void *v13;
  llvm::DominatorTree *v14;
  llvm::Function *v15;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)*a1[1];
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::AssumptionCacheTracker::ID);
  v7 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v7, a2);
  v9 = (void **)*a1[1];
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::ScalarEvolutionWrapperPass::ID);
  v11 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v12 = (void **)*a1[1];
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::DominatorTreeWrapperPass::ID);
  v14 = (llvm::DominatorTree *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32);
  return llvm::AlignmentFromAssumptionsPass::runImpl((llvm::AlignmentFromAssumptionsPass *)(a1 + 4), v15, AssumptionCache, v11, v14);
}

uint64_t sub_1C5AC979C(llvm::SCEV *a1, llvm::SCEV *a2, llvm::ScalarEvolution *this)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;

  llvm::ScalarEvolution::getURemExpr(this, a1, a2);
  v5 = 0;
  if (v4)
  {
    v6 = 0;
    if (!*(_WORD *)(v4 + 24))
    {
      v7 = *(_QWORD *)(v4 + 32);
      v8 = *(_DWORD *)(v7 + 32);
      if (v8 > 0x40)
      {
        v9 = **(_QWORD **)(v7 + 24);
        if (v9)
          goto LABEL_5;
      }
      else
      {
        v9 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v8) >> -(char)v8;
        if (v9)
        {
LABEL_5:
          if (v9 < 0)
            v9 = -v9;
          if ((v9 & (v9 - 1)) != 0)
          {
            v5 = 0;
            v6 = 0;
            return v5 | (v6 << 8);
          }
          v5 = __clz(v9) ^ 0x3F;
          goto LABEL_16;
        }
      }
      v10 = *((_QWORD *)a2 + 4);
      v11 = (unint64_t *)(v10 + 24);
      if (*(_DWORD *)(v10 + 32) >= 0x41u)
        v11 = (unint64_t *)*v11;
      v12 = *v11;
      v13 = __clz(v12) ^ 0x3F;
      if (v12)
        v5 = v13;
      else
        v5 = 0;
LABEL_16:
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  return v5 | (v6 << 8);
}

uint64_t sub_1C5AC9874(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Annotation Remarks";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "annotation-remarks";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED81B788;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5ACA36C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AC9904(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B788;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8193E28;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B790);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AC9874;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B790, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::AnnotationRemarksPass::run@<X0>(const llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1);
  sub_1C5AC9A40(a1, (const char *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5AC9A40(const llvm::Function *a1, const char *a2)
{
  uint64_t result;
  const llvm::Instruction *v5;
  _QWORD ***v6;
  _QWORD **i;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  uint64_t (**v11)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t (***v18)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v19)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v20)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  uint64_t (***v29)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v30)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v31)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t (***v39)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v40)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v41)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void *v52;
  uint64_t v53;
  uint64_t (***v54)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v55)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD ***v69;
  _QWORD *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD **v79;
  _QWORD **v80;
  uint64_t v81;
  uint64_t v82;
  llvm::DiagnosticInfoOptimizationBase *v83;
  char *v84;
  void **v85;
  unint64_t v86;
  void **v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ****v92;
  uint64_t v93;
  uint64_t ***v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  char *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  void *__dst[2];
  char v107;
  void *__p;
  char v109;
  std::string v110;
  void *v111;
  char v112;
  uint64_t v113[3];
  _QWORD v114[2];
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[16];
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t (**v124)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  const char *v130;
  uint64_t v131;
  char v132;
  char v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[260];
  int v137;
  _QWORD **v138;
  char *v139;
  uint64_t v140;
  _QWORD v141[6];

  v141[4] = *MEMORY[0x1E0C80C00];
  result = sub_1C550930C(**(_QWORD **)a1, (uint64_t)"annotation-remarks", 18);
  if (!(_DWORD)result)
    return result;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v119, a1);
  v6 = (_QWORD ***)((char *)a1 + 72);
  v114[0] = 0;
  v114[1] = 0;
  v115 = 0;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  for (i = (_QWORD **)*((_QWORD *)a1 + 10); ; i = (_QWORD **)i[1])
  {
    if (i == v6)
      goto LABEL_77;
    v8 = i - 3;
    if (!i)
      v8 = 0;
    v9 = v8[6];
    if (v9 != v8 + 5)
      break;
  }
  v10 = (char *)v141;
  while (1)
  {
    if (v9)
      v11 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v9 - 3);
    else
      v11 = 0;
    if ((*((_BYTE *)v11 + 23) & 0x20) == 0)
      goto LABEL_29;
    v12 = **(_QWORD **)*v11;
    v124 = v11;
    v13 = *(_DWORD *)(v12 + 2496);
    v14 = v11 >> 4;
    if (!v13)
    {
      v29 = 0;
LABEL_41:
      v18 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))sub_1C541AB24(v12 + 2480, (uint64_t)&v124, (uint64_t *)&v124, v29);
      v30 = v124;
      v18[4] = 0;
      v18[3] = 0;
      *v18 = v30;
      v18[1] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v18 + 3);
      v18[2] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))0x100000000;
      goto LABEL_23;
    }
    v15 = *(_QWORD *)(v12 + 2480);
    v16 = v13 - 1;
    v17 = v16 & (v14 ^ (v11 >> 9));
    v18 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v15 + 40 * v17);
    v19 = *v18;
    if (*v18 != v11)
    {
      v20 = 0;
      v21 = 1;
      while (v19 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v15 + 40 * v17);
        v19 = *v18;
        if (*v18 == v11)
          goto LABEL_23;
      }
      if (v20)
        v29 = v20;
      else
        v29 = v18;
      goto LABEL_41;
    }
LABEL_23:
    v24 = *((unsigned int *)v18 + 4);
    if ((_DWORD)v24)
    {
      v25 = v18[1] + 1;
      v26 = 16 * v24;
      while (*((_DWORD *)v25 - 2) != 30)
      {
        v25 += 2;
        v26 -= 16;
        if (!v26)
          goto LABEL_29;
      }
      if (*v25)
      {
        v31 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v11[6];
        v102 = v10;
        v139 = v10;
        v140 = 0x400000000;
        v124 = v31;
        v125 = &v127;
        v126 = 0x400000000;
        sub_1C63100F4((uint64_t)v113, (uint64_t)&v121, (uint64_t *)&v124, (uint64_t)&v125);
        if (v125 != &v127)
          free(v125);
        if (v139 != v10)
          free(v139);
        v32 = v113[0];
        v33 = *(unsigned int *)(v113[0] + 16);
        if (v33 >= *(unsigned int *)(v113[0] + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v113[0] + 8, v113[0] + 24, v33 + 1, 8);
          v33 = *(unsigned int *)(v32 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v33) = v11;
        ++*(_DWORD *)(v32 + 16);
        if ((*((_BYTE *)v11 + 23) & 0x20) == 0)
          goto LABEL_64;
        v34 = **(_QWORD **)*v11;
        v124 = v11;
        v35 = *(_DWORD *)(v34 + 2496);
        if (!v35)
        {
          v54 = 0;
          goto LABEL_74;
        }
        v36 = *(_QWORD *)(v34 + 2480);
        v37 = v35 - 1;
        v38 = v37 & (v14 ^ (v11 >> 9));
        v39 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v36 + 40 * v38);
        v40 = *v39;
        if (*v39 != v11)
        {
          v41 = 0;
          v42 = 1;
          while (v40 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
          {
            if (v41)
              v43 = 0;
            else
              v43 = v40 == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
            if (v43)
              v41 = v39;
            v44 = v38 + v42++;
            v38 = v44 & v37;
            v39 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v36 + 40 * v38);
            v40 = *v39;
            if (*v39 == v11)
              goto LABEL_59;
          }
          if (v41)
            v54 = v41;
          else
            v54 = v39;
LABEL_74:
          v39 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))sub_1C541AB24(v34 + 2480, (uint64_t)&v124, (uint64_t *)&v124, v54);
          v55 = v124;
          v39[4] = 0;
          v39[3] = 0;
          *v39 = v55;
          v39[1] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v39 + 3);
          v39[2] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))0x100000000;
        }
LABEL_59:
        v45 = *((unsigned int *)v39 + 4);
        if ((_DWORD)v45)
        {
          v46 = v39[1] + 1;
          v47 = 16 * v45;
          while (*((_DWORD *)v46 - 2) != 30)
          {
            v48 = 0;
            v46 += 2;
            v47 -= 16;
            if (!v47)
              goto LABEL_65;
          }
          v48 = *v46;
        }
        else
        {
LABEL_64:
          v48 = 0;
        }
LABEL_65:
        v49 = *(unsigned int *)(v48 + 8);
        if ((_DWORD)v49)
        {
          v50 = -8 * v49;
          do
          {
            v51 = *(void ***)(*(_QWORD *)(v48 + v50) + 8);
            v52 = *v51;
            v124 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v51 + 3);
            v125 = v52;
            LODWORD(v126) = 0;
            v53 = sub_1C630DBC4(v114, (uint64_t)&v124);
            ++*(_DWORD *)(v53 + 16);
            v50 += 8;
          }
          while (v50);
        }
        v10 = v102;
      }
    }
LABEL_29:
    v9 = (_QWORD *)v9[1];
    v27 = i - 3;
    if (!i)
      v27 = 0;
    if (v9 == v27 + 5)
      break;
LABEL_36:
    if (i == v6)
      goto LABEL_76;
  }
  while (1)
  {
    i = (_QWORD **)i[1];
    if (i == v6)
      break;
    v28 = i - 3;
    if (!i)
      v28 = 0;
    v9 = v28[6];
    if (v9 != v28 + 5)
      goto LABEL_36;
  }
LABEL_76:
  v56 = v116;
  v57 = v117;
  if (v116 != v117)
  {
    v62 = &v134;
    v103 = (a1 >> 4) ^ (a1 >> 9);
    while (1)
    {
      if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      {
        LODWORD(v77) = 0;
        v78 = 0;
        goto LABEL_105;
      }
      v63 = ***(_QWORD ***)a1;
      v139 = (char *)a1;
      v64 = *(_DWORD *)(v63 + 2496);
      if (!v64)
        break;
      v65 = *(_QWORD *)(v63 + 2480);
      v66 = v64 - 1;
      v67 = v66 & v103;
      v68 = (_QWORD *)(v65 + 40 * (v66 & v103));
      v69 = (_QWORD ***)*v68;
      if ((const llvm::Function *)*v68 != a1)
      {
        v70 = 0;
        v71 = 1;
        while (v69 != (_QWORD ***)-4096)
        {
          if (v70)
            v72 = 0;
          else
            v72 = v69 == (_QWORD ***)-8192;
          if (v72)
            v70 = v68;
          v73 = v67 + v71++;
          v67 = v73 & v66;
          v68 = (_QWORD *)(v65 + 40 * v67);
          v69 = (_QWORD ***)*v68;
          if ((const llvm::Function *)*v68 == a1)
            goto LABEL_96;
        }
        if (v70)
          v88 = v70;
        else
          v88 = v68;
        goto LABEL_134;
      }
LABEL_96:
      v74 = *((unsigned int *)v68 + 4);
      if ((_DWORD)v74)
      {
        v75 = (_QWORD *)(v68[1] + 8);
        v76 = 16 * v74;
        while (*((_DWORD *)v75 - 2))
        {
          LODWORD(v77) = 0;
          v78 = 0;
          v75 += 2;
          v76 -= 16;
          if (!v76)
            goto LABEL_105;
        }
        v77 = *v75;
        if (*v75)
        {
          v78 = *v75;
          if (*(_BYTE *)v77 != 15)
            v78 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8));
          LODWORD(v77) = *(_DWORD *)(v77 + 28);
          goto LABEL_105;
        }
      }
      else
      {
        LODWORD(v77) = 0;
      }
      v78 = 0;
LABEL_105:
      v79 = (_QWORD **)*((_QWORD *)a1 + 10);
      if (v79)
        v80 = v79 - 3;
      else
        v80 = 0;
      v81 = (uint64_t)v80[7];
      LODWORD(v125) = 11;
      BYTE4(v125) = 2;
      v126 = v81;
      v127 = v78;
      v128 = v77;
      v129 = "annotation-remarks";
      v130 = "AnnotationSummary";
      v131 = 17;
      v132 = 0;
      v133 = 0;
      v134 = v136;
      v135 = 0x400000000;
      v136[256] = 0;
      v137 = -1;
      v138 = v80;
      v124 = &off_1E814E570;
      v139 = "Annotated ";
      v140 = 10;
      sub_1C53B17B4((uint64_t)v62, (const void **)&v139);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v110, "count", 5uLL, *(_DWORD *)(v56 + 16));
      v82 = sub_1C47E3888((uint64_t)&v124, (uint64_t)&v110);
      v139 = " instructions with ";
      v140 = 19;
      sub_1C53B17B4(v82 + 80, (const void **)&v139);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "type", 4uLL, *(void **)v56, *(_QWORD *)(v56 + 8));
      v83 = (llvm::DiagnosticInfoOptimizationBase *)sub_1C47E3888(v82, (uint64_t)__dst);
      llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v119, v83);
      if (v109 < 0)
        operator delete(__p);
      if (v107 < 0)
        operator delete(__dst[0]);
      if (v112 < 0)
        operator delete(v111);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v124 = &off_1E814E790;
      v84 = (char *)v134;
      if ((_DWORD)v135)
      {
        v85 = v62;
        v86 = (unint64_t)v135 << 6;
        do
        {
          v87 = (void **)&v84[v86];
          if (v84[v86 - 17] < 0)
            operator delete(*(v87 - 5));
          if (*((char *)v87 - 41) < 0)
            operator delete(*(v87 - 8));
          v86 -= 64;
        }
        while (v86);
        v84 = (char *)v134;
        v62 = v85;
      }
      if (v84 != v136)
        free(v84);
      v56 += 24;
      if (v56 == v57)
        goto LABEL_77;
    }
    v88 = 0;
LABEL_134:
    v68 = sub_1C541AB24(v63 + 2480, (uint64_t)&v139, (uint64_t *)&v139, v88);
    v89 = v139;
    v68[4] = 0;
    v68[3] = 0;
    *v68 = v89;
    v68[1] = v68 + 3;
    v68[2] = 0x100000000;
    goto LABEL_96;
  }
LABEL_77:
  v58 = v121 + 56 * v123;
  v59 = v123;
  v60 = v58;
  if ((_DWORD)v122)
  {
    if (v123)
    {
      v61 = 56 * v123;
      v60 = v121;
      while ((*(_QWORD *)v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v60 += 56;
        v61 -= 56;
        if (!v61)
        {
          v59 = v123;
          v60 = v121 + 56 * v123;
          goto LABEL_137;
        }
      }
      v59 = v123;
    }
    else
    {
      v59 = 0;
      v60 = v121;
    }
  }
LABEL_137:
  v104 = v123;
  v105 = v121;
  v90 = v121 + 56 * v59;
  while (v60 != v90)
  {
    if (*(_QWORD *)v60)
    {
      v91 = *(unsigned int *)(v60 + 16);
      if ((_DWORD)v91)
      {
        v92 = *(uint64_t *****)(v60 + 8);
        v93 = 8 * v91;
        do
        {
          v94 = *v92;
          if (llvm::AutoInitRemark::canHandle(*v92, v5))
          {
            v95 = v94[5][7][5] + 272;
            v126 = (uint64_t)"annotation-remarks";
            v127 = 18;
            v128 = v95;
            v129 = a2;
            v124 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E81A9D30;
            v125 = v119;
            llvm::MemoryOpRemark::visit((llvm::MemoryOpRemark *)&v124, (const llvm::Instruction *)v94);
          }
          ++v92;
          v93 -= 8;
        }
        while (v93);
      }
    }
    v96 = v60 + 56;
    v60 = v58;
    if (v96 != v58)
    {
      v60 = v96;
      while ((*(_QWORD *)v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v60 += 56;
        if (v60 == v58)
        {
          v60 = v58;
          break;
        }
      }
    }
  }
  sub_1C6176BF8(v114);
  v97 = v120;
  v120 = 0;
  if (v97)
  {
    v98 = *v97;
    *v97 = 0;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    MEMORY[0x1CAA32FC0](v97, 0x20C4093837F09);
  }
  if ((_DWORD)v104)
  {
    v99 = 56 * v104;
    v100 = (_QWORD *)(v105 + 24);
    do
    {
      if ((*(v100 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v101 = (_QWORD *)*(v100 - 2);
        if (v100 != v101)
          free(v101);
      }
      v100 += 7;
      v99 -= 56;
    }
    while (v99);
  }
  return MEMORY[0x1CAA32FB4](v105, 8);
}

uint64_t sub_1C5ACA36C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AC9904(v0);
}

void sub_1C5ACA398(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5ACA3BC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5ACA3D4(uint64_t a1, const llvm::Function *a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, (uint64_t)a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  sub_1C5AC9A40(a2, (const char *)(v5 + 240));
  return 0;
}

_QWORD *llvm::BDCEPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  char v6;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DemandedBitsAnalysis::Key, a1);
  v6 = sub_1C5ACA6C4(a1, (llvm::DemandedBits *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v6 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5ACA6C4(uint64_t a1, llvm::DemandedBits *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int64_t v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  int wouldInstructionBeTriviallyDead;
  uint64_t v19;
  int v20;
  int v21;
  llvm::Instruction *v22;
  uint64_t v23;
  int PrimitiveSizeInBits;
  uint64_t v25;
  llvm::Type *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Instruction **v39;
  llvm::Instruction *v40;
  int v41;
  int v42;
  llvm::Instruction *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value **v55;
  unsigned __int8 *v56;
  llvm::ConstantInt ***v57;
  int v58;
  unsigned int v59;
  BOOL v60;
  llvm::Value **v61;
  llvm::ConstantInt ****v62;
  llvm::Value *v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  char *v75;
  char *v76;
  llvm::CastInst *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v90;
  _QWORD v91[4];
  __int16 v92;
  unint64_t v93;
  unsigned int v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[120];
  void *v98;
  uint64_t v99;
  _QWORD v100[130];

  v100[128] = *MEMORY[0x1E0C80C00];
  v2 = (char *)v100;
  v98 = v100;
  v99 = 0x8000000000;
  v3 = a1 + 72;
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 == a1 + 72)
  {
LABEL_6:
    v8 = 0;
    return v8 & 1;
  }
  while (1)
  {
    v6 = v4 - 24;
    if (!v4)
      v6 = 0;
    v7 = *(_QWORD *)(v6 + 48);
    if (v7 != v6 + 40)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      goto LABEL_6;
  }
  v8 = 0;
  while (1)
  {
    if (v7)
      v9 = v7 - 24;
    else
      v9 = 0;
    v10 = *(unsigned __int8 *)(v9 + 16) - 33;
    if (v10 > 0x37)
    {
LABEL_15:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v9) & 1) == 0
        && (llvm::Instruction::willReturn((llvm::Instruction *)v9) & 1) != 0)
      {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if (((1 << (*(_BYTE *)(v9 + 16) - 33)) & 0x808001D0000010) == 0)
    {
      if (((1 << (*(_BYTE *)(v9 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v19 = *(_QWORD *)(v9 + 64);
        if (v19 && (*(_BYTE *)(v19 + 17) & 0x30) != 0)
          goto LABEL_15;
        v20 = *(_DWORD *)(v9 + 20);
        if (v20 < 0
          && (v67 = v9 - 32 * (v20 & 0x7FFFFFF), v70 = *(_QWORD *)(v67 - 8), v68 = v67 - 8, (v69 = v70) != 0))
        {
          v71 = -v69;
          while (1)
          {
            v72 = *(_DWORD *)(*(_QWORD *)(v68 + v71) + 8);
            v15 = v72 > 7;
            v73 = (1 << v72) & 0x83;
            if (v15 || v73 == 0)
              break;
            v71 += 16;
            if (!v71)
              goto LABEL_44;
          }
        }
        else
        {
LABEL_44:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v9, 45) & 1) != 0
            || llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44))
          {
            goto LABEL_15;
          }
        }
      }
      else if (v10 != 27 || (*(_WORD *)(v9 + 18) & 0x301) == 0)
      {
        goto LABEL_15;
      }
    }
LABEL_17:
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_111;
LABEL_18:
    if ((llvm::DemandedBits::isInstructionDead(a2, (llvm::Instruction *)v9) & 1) != 0)
      goto LABEL_19;
    if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12)
      v12 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v9 + 16) + 8);
    else
      v12 = *(_DWORD *)(*(_QWORD *)v9 + 8);
    if (v12 == 13)
    {
      llvm::DemandedBits::getDemandedBits(a2, (llvm::Instruction *)v9, (llvm::APInt *)&v95);
      if (v96 > 0x40)
      {
        v13 = 0;
        v14 = ((unint64_t)v96 + 63) >> 6;
        do
        {
          v15 = v14-- < 1;
          if (v15)
            break;
          v16 = *((_QWORD *)v95 + v14);
          v13 += __clz(v16);
        }
        while (!v16);
        v17 = v96 | 0xFFFFFFC0;
        if ((v96 & 0x3F) == 0)
          v17 = 0;
        if (v13 + v17 != (_DWORD)v96)
        {
          if (v95)
            MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
          goto LABEL_51;
        }
      }
      else if (v95)
      {
        goto LABEL_51;
      }
      wouldInstructionBeTriviallyDead = llvm::wouldInstructionBeTriviallyDead(v9, 0);
      if (v96 >= 0x41 && v95)
      {
        MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
        if ((wouldInstructionBeTriviallyDead & 1) != 0)
          goto LABEL_19;
      }
      else if (wouldInstructionBeTriviallyDead)
      {
LABEL_19:
        v11 = v99;
        if (v99 >= (unint64_t)HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v2, v99 + 1, 8);
          v11 = v99;
        }
        *((_QWORD *)v98 + v11) = v9;
        LODWORD(v99) = v99 + 1;
        v8 = 1;
        goto LABEL_111;
      }
    }
LABEL_51:
    v21 = *(unsigned __int8 *)(v9 + 16);
    if (v21 == 68)
      v22 = (llvm::Instruction *)v9;
    else
      v22 = 0;
    if (v7 && v21 == 68)
    {
      llvm::DemandedBits::getDemandedBits(a2, v22, (llvm::APInt *)&v93);
      v23 = **((_QWORD **)v22 - 4);
      v90 = (uint64_t)v2;
      if ((*(_DWORD *)(v23 + 8) & 0xFE) == 0x12)
        v23 = **(_QWORD **)(v23 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v23);
      v25 = *(_QWORD *)v22;
      v26 = *(llvm::Type **)v22;
      if ((*(_DWORD *)(*(_QWORD *)v22 + 8) & 0xFE) == 0x12)
        v26 = **(llvm::Type ***)(v25 + 16);
      v27 = llvm::Type::getPrimitiveSizeInBits(v26);
      v28 = v94;
      if (v94 > 0x40)
      {
        v30 = 0;
        v31 = ((unint64_t)v94 + 63) >> 6;
        do
        {
          v15 = v31-- < 1;
          if (v15)
            break;
          v32 = *(_QWORD *)(v93 + 8 * v31);
          v30 += __clz(v32);
        }
        while (!v32);
        v33 = v94 | 0xFFFFFFC0;
        if ((v94 & 0x3F) == 0)
          v33 = 0;
        v29 = v30 + v33;
      }
      else
      {
        v29 = v94 + __clz(v93) - 64;
      }
      v34 = v27 - PrimitiveSizeInBits;
      if (v29 < v34)
      {
LABEL_83:
        if (v28 >= 0x41 && v93)
          MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
        v50 = v29 >= v34;
        v2 = (char *)v90;
        if (v50)
          goto LABEL_111;
        goto LABEL_87;
      }
      sub_1C5ACB01C(*((_QWORD *)v22 + 1), a2);
      sub_1C4773D54((uint64_t)&v95, (uint64_t)v22, 0, 0, 0);
      if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
      {
        v44 = 0;
        v45 = &byte_1C871356D;
        goto LABEL_78;
      }
      v35 = ***(_QWORD ***)v22;
      v36 = *(_QWORD *)(v35 + 152);
      v37 = *(unsigned int *)(v35 + 168);
      if ((_DWORD)v37)
      {
        LODWORD(v38) = (v37 - 1) & ((v22 >> 4) ^ (v22 >> 9));
        v39 = (llvm::Instruction **)(v36 + 16 * v38);
        v40 = *v39;
        if (*v39 == v22)
        {
LABEL_77:
          v43 = v39[1];
          v46 = *(_QWORD *)v43;
          v45 = (char *)v43 + 16;
          v44 = v46;
LABEL_78:
          v47 = (unsigned __int8 *)*((_QWORD *)v22 - 4);
          v92 = 261;
          v91[0] = v45;
          v91[1] = v44;
          v48 = sub_1C4773E38((uint64_t *)&v95, 39, v47, v25, (uint64_t)v91);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, (llvm::Value *)v48, (llvm::Value *)1);
          v49 = v99;
          if (v99 >= (unint64_t)HIDWORD(v99))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v90, v99 + 1, 8);
            v49 = v99;
          }
          *((_QWORD *)v98 + v49) = v22;
          LODWORD(v99) = v99 + 1;
          if (v95 != v97)
            free(v95);
          v8 = 1;
          v28 = v94;
          goto LABEL_83;
        }
        v41 = 1;
        while (v40 != (llvm::Instruction *)-4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(llvm::Instruction **)(v36 + 16 * v38);
          if (v40 == v22)
          {
            v39 = (llvm::Instruction **)(v36 + 16 * v38);
            goto LABEL_77;
          }
        }
      }
      v39 = (llvm::Instruction **)(v36 + 16 * v37);
      goto LABEL_77;
    }
LABEL_87:
    v51 = *(_DWORD *)(v9 + 20);
    if ((v51 & 0x40000000) != 0)
    {
      v53 = *(_QWORD *)(v9 - 8);
      v52 = v51 & 0x7FFFFFF;
      if (!v52)
        goto LABEL_111;
    }
    else
    {
      v52 = v51 & 0x7FFFFFF;
      v53 = v9 - 32 * v52;
      if (!v52)
        goto LABEL_111;
    }
    v54 = 32 * v52;
    v55 = (llvm::Value **)(v53 + 8);
    do
    {
      v57 = (llvm::ConstantInt ***)(v55 - 1);
      v56 = (unsigned __int8 *)*(v55 - 1);
      if ((*(_DWORD *)(*(_QWORD *)v56 + 8) & 0xFE) == 0x12)
        v58 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v56 + 16) + 8);
      else
        v58 = *(_DWORD *)(*(_QWORD *)v56 + 8);
      if (v58 == 13)
      {
        v59 = v56[16];
        v60 = v59 > 0x1B || v59 == 21;
        if (v60 && llvm::DemandedBits::isUseDead(a2, (llvm::Use *)(v55 - 1)))
        {
          sub_1C5ACB01C(*(_QWORD *)(v9 + 8), a2);
          v61 = llvm::ConstantInt::get(**v57, 0, 0);
          if (*v57)
          {
            *(_QWORD *)v55[1] = *v55;
            if (*v55)
              *((_QWORD *)*v55 + 2) = v55[1];
          }
          *v57 = v61;
          if (v61)
          {
            v64 = v61[1];
            v62 = (llvm::ConstantInt ****)(v61 + 1);
            v63 = v64;
            *v55 = v64;
            if (v64)
              *((_QWORD *)v63 + 2) = v55;
            v55[1] = (llvm::Value *)v62;
            *v62 = v57;
          }
          v8 = 1;
        }
      }
      v55 += 4;
      v54 -= 32;
    }
    while (v54);
LABEL_111:
    v7 = *(_QWORD *)(v7 + 8);
    v65 = v4 - 24;
    if (!v4)
      v65 = 0;
    if (v7 == v65 + 40)
      break;
LABEL_118:
    if (v4 == v3)
      goto LABEL_129;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      break;
    v66 = v4 - 24;
    if (!v4)
      v66 = 0;
    v7 = *(_QWORD *)(v66 + 48);
    if (v7 != v66 + 40)
      goto LABEL_118;
  }
LABEL_129:
  v75 = (char *)v98;
  if (!(_DWORD)v99)
    goto LABEL_148;
  v76 = (char *)v98 + 8 * v99;
  while (2)
  {
    v77 = (llvm::CastInst *)*((_QWORD *)v76 - 1);
    v76 -= 8;
    v95 = v97;
    v96 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v95, (uint64_t)v77);
    llvm::salvageDebugInfoForDbgValues(v77, (uint64_t *)v95, v96);
    if (v95 != v97)
      free(v95);
    v78 = *(_QWORD *)v76;
    v79 = *(_DWORD *)(*(_QWORD *)v76 + 20);
    if ((v79 & 0x40000000) != 0)
    {
      v81 = *(_QWORD *)(v78 - 8);
      v80 = v79 & 0x7FFFFFF;
      if (v80)
        goto LABEL_135;
    }
    else
    {
      v80 = v79 & 0x7FFFFFF;
      v81 = v78 - 32 * v80;
      if (v80)
      {
LABEL_135:
        v82 = 32 * v80;
        v83 = (_QWORD **)(v81 + 16);
        do
        {
          if (*(v83 - 2))
          {
            **v83 = *(v83 - 1);
            v84 = (uint64_t)*(v83 - 1);
            if (v84)
              *(_QWORD *)(v84 + 16) = *v83;
          }
          *(v83 - 2) = 0;
          v83 += 4;
          v82 -= 32;
        }
        while (v82);
      }
    }
    if (v76 != v75)
      continue;
    break;
  }
  v75 = (char *)v98;
  if ((_DWORD)v99)
  {
    v85 = 8 * v99;
    do
    {
      v86 = *(_QWORD *)v75;
      v75 += 8;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v86 + 40) + 40, (uint64_t ***)v86);
      v87 = *(_QWORD *)(v86 + 24);
      v88 = *(_QWORD **)(v86 + 32);
      *v88 = v87;
      *(_QWORD *)(v87 + 8) = v88;
      *(_QWORD *)(v86 + 24) = 0;
      *(_QWORD *)(v86 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v86);
      v85 -= 8;
    }
    while (v85);
    v75 = (char *)v98;
  }
LABEL_148:
  if (v75 != v2)
    free(v75);
  return v8 & 1;
}

uint64_t sub_1C5ACAEC0(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeDemandedBitsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Bit-Tracking Dead Code Elimination";
  *(_QWORD *)(v3 + 8) = 34;
  *(_QWORD *)(v3 + 16) = "bdce";
  *(_QWORD *)(v3 + 24) = 4;
  *(_QWORD *)(v3 + 32) = &unk_1ED81B798;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5ACB324;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5ACAF54(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B798;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8193EC8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B7A0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5ACAEC0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B7A0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5ACB01C(uint64_t a1, llvm::DemandedBits *this)
{
  uint64_t v3;
  unsigned __int8 *v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  llvm::Instruction *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  BOOL v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];
  void *v27;
  uint64_t v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v22 = v26;
  v23 = v26;
  v24 = 16;
  v25 = 0;
  v27 = v29;
  v28 = 0x1000000000;
  if (!a1)
    goto LABEL_47;
  v3 = a1;
  do
  {
    v4 = *(unsigned __int8 **)(v3 + 24);
    if (v4)
      v5 = v4[16] >= 0x1Cu;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_22;
    v6 = (*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFE) == 0x12
       ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8)
       : *(_DWORD *)(*(_QWORD *)v4 + 8);
    if (v6 != 13)
      goto LABEL_22;
    llvm::DemandedBits::getDemandedBits(this, *(llvm::Instruction **)(v3 + 24), (llvm::APInt *)&v20);
    v7 = v21;
    if (!v21)
      goto LABEL_22;
    if (v21 <= 0x40)
    {
      if (v20 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v21)
        goto LABEL_22;
LABEL_19:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, (uint64_t)v4);
      v9 = v28;
      if (v28 >= (unint64_t)HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
        v9 = v28;
      }
      *((_QWORD *)v27 + v9) = v4;
      LODWORD(v28) = v28 + 1;
      goto LABEL_22;
    }
    v8 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v20);
    if (v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    if (v8 != v7)
      goto LABEL_19;
LABEL_22:
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3);
  v10 = v28;
  if ((_DWORD)v28)
  {
    while (1)
    {
      v11 = (llvm::Instruction *)*((_QWORD *)v27 + v10 - 1);
      LODWORD(v28) = v10 - 1;
      llvm::Instruction::dropPoisonGeneratingFlags(v11);
      v12 = *((_QWORD *)v11 + 1);
      if (v12)
        break;
LABEL_46:
      v10 = v28;
      if (!(_DWORD)v28)
        goto LABEL_47;
    }
    while (2)
    {
      v13 = *(unsigned __int8 **)(v12 + 24);
      if (v13)
        v14 = v13[16] >= 0x1Cu;
      else
        v14 = 0;
      if (v14)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, *(_QWORD *)(v12 + 24));
        if (v15)
        {
          v16 = (*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) == 0x12
              ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v13 + 16) + 8)
              : *(_DWORD *)(*(_QWORD *)v13 + 8);
          if (v16 == 13)
          {
            llvm::DemandedBits::getDemandedBits(this, (llvm::Instruction *)v13, (llvm::APInt *)&v20);
            v17 = v21;
            if (v21)
            {
              if (v21 > 0x40)
              {
                v18 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v20);
                if (v20)
                  MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
                if (v18 != v17)
                  goto LABEL_42;
              }
              else
              {
                if (v20 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v21)
                  goto LABEL_45;
LABEL_42:
                v19 = v28;
                if (v28 >= (unint64_t)HIDWORD(v28))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
                  v19 = v28;
                }
                *((_QWORD *)v27 + v19) = v13;
                LODWORD(v28) = v28 + 1;
              }
            }
          }
        }
      }
LABEL_45:
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_46;
      continue;
    }
  }
LABEL_47:
  if (v27 != v29)
    free(v27);
  if (v23 != v22)
    free(v23);
}

uint64_t sub_1C5ACB324()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5ACAF54(v0);
}

void sub_1C5ACB350(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5ACB374(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DemandedBitsWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5ACB3BC(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  void **v5;
  void *v6;
  llvm::DemandedBits *v7;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::DemandedBitsWrapperPass::ID);
  v7 = (llvm::DemandedBits *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::DemandedBitsWrapperPass::ID)+ 32);
  return sub_1C5ACA6C4((uint64_t)a2, v7);
}

uint64_t sub_1C5ACB430(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Call-site splitting";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "callsite-splitting";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED81B868;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5ACD3E8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5ACB4D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B868;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8193F68;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B870);
  if (v3 != -1)
  {
    v7[0] = sub_1C5ACB430;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B870, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::CallSiteSplittingPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t ResultImpl;
  char v9;

  v6 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8);
  v7 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v9 = sub_1C5ACB680(a1, v6, v7, ResultImpl + 8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) != 0)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5ACB680(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *FirstNonPHIOrDbg;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  llvm::ValueAsMetadata *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL k;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  llvm::ValueAsMetadata *v32;
  char *v33;
  char wouldInstructionBeTriviallyDead;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE *v67;
  uint64_t DomTree;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  int v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  char *v96;
  char *v97;
  llvm::BasicBlock *v98;
  uint64_t v99;
  uint64_t v100;
  llvm::BasicBlock *v101;
  uint64_t SinglePredecessor;
  _QWORD *v103;
  void *v104;
  void *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  char *v112;
  unsigned int v113;
  llvm::BasicBlock *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  unsigned __int8 *v146;
  void **v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  char v150;
  uint64_t v151;
  char v152;
  char **v153;
  char *v154;
  uint64_t v155;
  const llvm::Twine *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t ***v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t ***v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t **v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t ***v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t **v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t ***v185;
  uint64_t ***v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t ***v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t ***v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  llvm::PHINode *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t ***v219;
  uint64_t ***v220;
  uint64_t **v221;
  uint64_t **v222;
  uint64_t **v223;
  uint64_t **v224;
  uint64_t ***v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 *v229;
  int v230;
  llvm::Instruction *v231;
  BOOL v232;
  unsigned __int8 *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  llvm::Instruction *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  llvm::ValueAsMetadata *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t *v258;
  char **v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t *v266;
  uint64_t v267;
  int32x2_t *v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  int v275;
  int v276;
  unint64_t v278;
  unint64_t *v279;
  uint64_t v280;
  int32x2_t *v281;
  unint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  int v288;
  int v289;
  char *v290;
  llvm::ValueAsMetadata *v291;
  uint64_t v292;
  int v293;
  char *v294;
  llvm::PHINode *v295;
  uint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  void *v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  char v302;
  uint64_t v303;
  char v304;
  char **v305;
  _QWORD *v306;
  unint64_t v308;
  int32x2_t ****v309;
  int32x2_t *v310;
  unint64_t v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  int32x2_t *****v315;
  int32x2_t ****v316;
  int v317;
  int v318;
  uint64_t v319;
  _QWORD *v320;
  unint64_t v321;
  int32x2_t ****v322;
  int32x2_t *v323;
  unint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  int32x2_t *****v328;
  int32x2_t ****v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  llvm::ValueSymbolTable *v341;
  uint64_t j;
  _BYTE *v343;
  uint64_t v344;
  llvm::ValueSymbolTable *v345;
  char *v346;
  uint64_t v347;
  BOOL v349;
  char *v351;
  char *v352;
  llvm::ValueAsMetadata *v354;
  _BOOL4 v355;
  llvm::Value *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  char *v362;
  char *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t ***v366;
  uint64_t v367;
  llvm::ValueAsMetadata *v368;
  uint64_t *v369;
  char *v370;
  void *v371[2];
  _QWORD v372[36];
  char v373;
  _BYTE *v374;
  void *v375;
  uint64_t v376;
  int v377;
  _BYTE v378[64];
  _QWORD v379[3];
  __int16 v380;
  void *v381;
  uint64_t v382;
  _BYTE v383[112];
  void *v384;
  uint64_t v385;
  _BYTE v386[32];
  void *v387;
  uint64_t v388;
  _BYTE v389[32];
  void *v390;
  void *v391;
  uint64_t v392;
  int32x2_t ****v393;
  _QWORD v394[4];
  _QWORD v395[2];
  _BYTE v396[32];
  void *v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  _WORD v401[56];
  uint64_t v402;

  v402 = *MEMORY[0x1E0C80C00];
  v371[0] = v372;
  v371[1] = (void *)0x1000000000;
  v372[33] = 0;
  v372[32] = 0;
  v372[34] = a4;
  v372[35] = 0;
  v373 = 1;
  v374 = v378;
  v375 = v378;
  v376 = 8;
  v377 = 0;
  v4 = a1 + 72;
  memset(v379, 0, sizeof(v379));
  v380 = 0;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5 == a1 + 72)
  {
    v361 = 0;
  }
  else
  {
    v6 = a2;
    v361 = 0;
    v357 = a1 + 72;
    do
    {
      v7 = (_QWORD *)(v5 - 24);
      v23 = v5 == 0;
      v5 = *(_QWORD *)(v5 + 8);
      if (v23)
        v8 = 0;
      else
        v8 = v7;
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg((llvm::BasicBlock *)v8, 1);
      v12 = (_QWORD *)v8[5];
      v11 = v8 + 5;
      v10 = v12;
      if (v12 == v11)
      {
        v13 = 0;
      }
      else
      {
        if (v10)
          v13 = v10 - 3;
        else
          v13 = 0;
        if (*((unsigned __int8 *)v13 + 16) - 29 >= 0xB)
          v13 = 0;
      }
      v14 = FirstNonPHIOrDbg + 24;
      v15 = (char *)(v13 + 3);
      v364 = v5;
      v365 = v11;
      while (v14 != v15)
      {
        v16 = v14;
        v17 = (llvm::ValueAsMetadata *)(v14 - 24);
        v18 = v14 ? (uint64_t)(v14 - 24) : 0;
        v19 = (_QWORD *)*v11;
        if ((_QWORD *)*v11 == v11)
        {
          v20 = 0;
        }
        else
        {
          if (v19)
            v20 = v19 - 3;
          else
            v20 = 0;
          if (*((unsigned __int8 *)v20 + 16) - 29 >= 0xB)
            v20 = 0;
        }
        if ((_QWORD *)v18 == v20)
          break;
        v14 = (char *)*((_QWORD *)v14 + 1);
        v21 = *(unsigned __int8 *)(v18 + 16) - 33;
        v94 = v21 > 0x33;
        v22 = (1 << v21) & 0x8000000000041;
        v23 = v94 || v22 == 0;
        if (!v23
          && (*(v16 - 8) != 84
           || (v24 = *((_QWORD *)v16 - 7)) == 0
           || *(_BYTE *)(v24 + 16)
           || *(_QWORD *)(v24 + 24) != *((_QWORD *)v16 + 6)
           || (*(_BYTE *)(v24 + 33) & 0x20) == 0))
        {
          if (*((_QWORD *)v16 - 2))
            goto LABEL_42;
          v29 = (uint64_t)v17;
          v30 = v15;
          v31 = (char *)*((_QWORD *)v16 + 1);
          v32 = v17;
          v33 = v16;
          wouldInstructionBeTriviallyDead = llvm::wouldInstructionBeTriviallyDead(v29, v6);
          v16 = v33;
          v17 = v32;
          v14 = v31;
          v15 = v30;
          if ((wouldInstructionBeTriviallyDead & 1) == 0)
          {
LABEL_42:
            v25 = *((_QWORD *)v16 - 7);
            if (v25)
            {
              if (!*(_BYTE *)(v25 + 16)
                && *(_QWORD *)(v25 + 24) == *((_QWORD *)v16 + 6)
                && (*(_QWORD *)(v25 + 72) != v25 + 72 || (*(_BYTE *)(v25 + 34) & 0x80) != 0))
              {
                v26 = *(v16 - 8);
                if (v26 == 33)
                {
                  k = 0;
                  v28 = 2;
                }
                else if (v26 == 39)
                {
                  k = 0;
                  v28 = (*((_DWORD *)v16 + 14) + 1);
                }
                else
                {
                  v28 = 0;
                  k = (*((_WORD *)v16 - 3) & 3) == 2;
                }
                v35 = *((_DWORD *)v16 - 1);
                if (v35 < 0
                  && (v346 = (char *)v17 - 32 * (v35 & 0x7FFFFFF),
                      v347 = *((_QWORD *)v346 - 1),
                      (v347 & 0xFFFFFFFF0) != 0))
                {
                  v37 = -(uint64_t)(v35 & 0x7FFFFFF);
                  v36 = *((_DWORD *)v346 - 3) - *(_DWORD *)&v346[-v347];
                }
                else
                {
                  v36 = 0;
                  v37 = -(uint64_t)(v35 & 0x7FFFFFF);
                }
                if (((-32 * v28 + 32 * -v36 - 32 * v37 - 32) & 0x1FFFFFFFE0) == 0
                  || (v38 = *((_QWORD *)v16 + 5)) != 0 && (*(_BYTE *)(v38 + 12) & 0x40) != 0)
                {
                  LOBYTE(v39) = 0;
                }
                else
                {
                  v362 = v16;
                  v351 = v14;
                  v352 = v15;
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v17, 6) & 1) != 0
                    || (v40 = *((_QWORD *)v362 + 5)) != 0 && (*(_BYTE *)(v40 + 15) & 1) != 0)
                  {
                    LOBYTE(v39) = 0;
                    goto LABEL_90;
                  }
                  LOBYTE(v39) = 0;
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v17, 24) & 1) != 0)
                  {
LABEL_90:
                    v14 = v351;
                    v15 = v352;
                  }
                  else
                  {
                    v14 = v351;
                    v15 = v352;
                    if (*(v362 - 8) == 84)
                    {
                      v41 = *((_QWORD *)v362 + 2);
                      for (i = *(_QWORD *)(v41 + 8); i; i = *(_QWORD *)(i + 8))
                      {
                        v43 = *(_QWORD *)(i + 24);
                        v44 = *(unsigned __int8 *)(v43 + 16);
                        if (v43)
                          v45 = v44 >= 0x1C;
                        else
                          v45 = 0;
                        if (v45 && v44 - 29 < 0xB)
                          break;
                      }
                      v381 = v383;
                      v382 = 0x200000000;
                      sub_1C4DBBCC0((unsigned int *)&v381, i, 0);
                      v47 = v381;
                      if ((_DWORD)v382 != 2)
                      {
                        v39 = 0;
                        v50 = v362;
                        goto LABEL_87;
                      }
                      v48 = *(_QWORD *)(*(_QWORD *)v381 + 40);
                      if (v48)
                        v49 = v48 - 24;
                      else
                        v49 = 0;
                      if (*(unsigned __int8 *)(v49 + 16) - 29 >= 0xB)
                        v49 = 0;
                      v50 = v362;
                      if (*(_BYTE *)(v49 + 16) == 32)
                        goto LABEL_85;
                      v51 = *(_QWORD *)(*((_QWORD *)v381 + 1) + 40);
                      if (v51)
                        v52 = v51 - 24;
                      else
                        v52 = 0;
                      if (*(unsigned __int8 *)(v52 + 16) - 29 >= 0xB)
                        v52 = 0;
                      if (*(_BYTE *)(v52 + 16) == 32)
                      {
LABEL_85:
                        v39 = 0;
                        goto LABEL_87;
                      }
                      v53 = (uint64_t *)(v41 + 48);
                      v54 = (uint64_t *)(v41 + 48);
                      do
                      {
                        v55 = *v54;
                        v56 = v55 - 24;
                        if (!v55)
                          v56 = 0;
                        v57 = *(unsigned __int8 *)(v56 + 16);
                        v54 = (uint64_t *)(v55 + 8);
                      }
                      while (v57 == 83);
                      if ((v57 - 38) <= 0x2A
                        && ((1 << (v57 - 38)) & 0x60000000001) != 0)
                      {
                        goto LABEL_113;
                      }
                      v59 = *v53;
                      v60 = *v53 - 24;
                      if (!v59)
                        v60 = 0;
                      v61 = *(unsigned __int8 *)(v60 + 16);
                      v62 = v59;
                      if (v61 == 83)
                      {
                        v62 = v59;
                        do
                        {
                          v62 = *(_QWORD *)(v62 + 8);
                          v63 = v62 - 24;
                          if (!v62)
                            v63 = 0;
                        }
                        while (*(_BYTE *)(v63 + 16) == 83);
                      }
                      v64 = *(unsigned __int8 *)(v62 - 8) - 38;
                      v94 = v64 > 0x38;
                      v65 = (1 << v64) & 0x100060000000001;
                      if (!v94 && v65 != 0)
                      {
LABEL_113:
                        v39 = 0;
LABEL_114:
                        v4 = v357;
                        goto LABEL_87;
                      }
                      if ((char *)v59 == v362)
                      {
                        v39 = 1;
                        goto LABEL_114;
                      }
                      v79 = 0;
                      while (2)
                      {
                        if (v59)
                          v80 = v59 - 24;
                        else
                          v80 = 0;
                        v81 = *(_DWORD *)(v80 + 20);
                        if ((v81 & 0x40000000) != 0)
                        {
                          v83 = *(uint64_t **)(v80 - 8);
                          v82 = v81 & 0x7FFFFFF;
                        }
                        else
                        {
                          v82 = v81 & 0x7FFFFFF;
                          v83 = (uint64_t *)(v80 - 32 * v82);
                        }
                        v399 = (char *)v401;
                        v400 = 0x400000000;
                        if (v82 < 5)
                        {
                          v84 = 0;
                          if (v82)
                          {
                            v85 = 0;
                            v86 = (char *)v401;
LABEL_136:
                            v87 = 32 * v82;
                            v88 = &v86[8 * v85];
                            do
                            {
                              v89 = *v83;
                              v83 += 4;
                              *(_QWORD *)v88 = v89;
                              v88 += 8;
                              v87 -= 32;
                            }
                            while (v87);
                            v90 = v399;
                          }
                          else
                          {
                            v90 = (char *)v401;
                          }
                          LODWORD(v400) = v84 + v82;
                          v91 = (*(uint64_t (**)(_QWORD, uint64_t, char *))(*(_QWORD *)*a3 + 72))(*a3, v80, v90);
                          v93 = v92;
                          if (v399 != (char *)v401)
                            free(v399);
                          if (__OFADD__(v79, v91))
                            v79 = ((v79 + v91) >> 63) ^ 0x8000000000000000;
                          else
                            v79 += v91;
                          v94 = v93 != 1 && v79 < dword_1ED81B828;
                          v39 = v94;
                          v11 = v365;
                          v50 = v362;
                          if (!v94 || (v59 = *(_QWORD *)(v59 + 8), (char *)v59 == v362))
                          {
                            v47 = v381;
                            v4 = v357;
LABEL_87:
                            if (v47 != v383)
                            {
                              free(v47);
                              v50 = v362;
                            }
                            if (!v39)
                              goto LABEL_90;
                            sub_1C5ACD834((uint64_t)&v384, *(_QWORD *)(*((_QWORD *)v50 + 2) + 8));
                            v67 = v384;
                            v349 = k;
                            if (*(_QWORD *)v384 == *((_QWORD *)v384 + 1))
                            {
                              v381 = v383;
                              v382 = 0x200000000;
                            }
                            else
                            {
                              DomTree = llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)v371);
                              v69 = *(unsigned int *)(DomTree + 40);
                              if ((_DWORD)v69)
                              {
                                v70 = v362;
                                v71 = *((_QWORD *)v362 + 2);
                                v72 = *(_QWORD *)(DomTree + 24);
                                LODWORD(v73) = ((v71 >> 4) ^ (v71 >> 9)) & (v69 - 1);
                                v74 = (uint64_t *)(v72 + 16 * v73);
                                v75 = *v74;
                                if (v71 != *v74)
                                {
                                  v76 = 1;
                                  do
                                  {
                                    if (v75 == -4096)
                                      goto LABEL_125;
                                    v77 = v73 + v76++;
                                    v73 = v77 & (v69 - 1);
                                    v75 = *(_QWORD *)(v72 + 16 * v73);
                                  }
                                  while (v71 != v75);
                                  v74 = (uint64_t *)(v72 + 16 * v73);
                                }
                                if (v74 == (uint64_t *)(v72 + 16 * v69))
                                {
LABEL_125:
                                  v78 = 0;
                                }
                                else
                                {
                                  v95 = v74[1];
                                  if (v95)
                                    v78 = **(_QWORD **)(v95 + 8);
                                  else
                                    v78 = 0;
                                }
                              }
                              else
                              {
                                v78 = 0;
                                v70 = v362;
                              }
                              v399 = (char *)v401;
                              v400 = 0x200000000;
                              if (!(_DWORD)v385)
                                goto LABEL_185;
                              v96 = (char *)v384;
                              v97 = (char *)v384 + 8 * v385;
                              do
                              {
                                v99 = *((_QWORD *)v97 - 1);
                                v97 -= 8;
                                v98 = (llvm::BasicBlock *)v99;
                                v387 = v389;
                                v388 = 0x200000000;
                                sub_1C5ACD878((uint64_t)v17, v99, *((_QWORD *)v70 + 2), (uint64_t)&v387);
                                v390 = v394;
                                v391 = v394;
                                v392 = 4;
                                LODWORD(v393) = 0;
                                if (v99 != v78)
                                {
                                  v100 = (uint64_t)v17;
                                  v101 = v98;
                                  do
                                  {
                                    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v101);
                                    v103 = sub_1C477672C((uint64_t)&v390, SinglePredecessor);
                                    v104 = v391;
                                    v105 = v390;
                                    v106 = (uint64_t *)((char *)&v392 + 4);
                                    if (v391 != v390)
                                      v106 = &v392;
                                    if (v103 != (_QWORD *)((char *)v391 + 8 * *(unsigned int *)v106))
                                      goto LABEL_172;
                                    v107 = llvm::BasicBlock::getSinglePredecessor(v101);
                                    if (!v107)
                                      goto LABEL_172;
                                    v108 = v107;
                                    sub_1C5ACD878(v100, v107, (uint64_t)v101, (uint64_t)&v387);
                                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v390, v108);
                                    v101 = (llvm::BasicBlock *)v108;
                                  }
                                  while (v108 != v78);
                                  v104 = v391;
                                  v105 = v390;
LABEL_172:
                                  v17 = (llvm::ValueAsMetadata *)v100;
                                  if (v104 != v105)
                                    free(v104);
                                }
                                v390 = v98;
                                v391 = &v393;
                                v392 = 0x200000000;
                                if ((_DWORD)v388)
                                  sub_1C597E19C((uint64_t)&v391, (uint64_t *)&v387);
                                sub_1C63102FC((uint64_t)&v399, (unint64_t)&v390);
                                if (v391 != &v393)
                                  free(v391);
                                if (v387 != v389)
                                  free(v387);
                                v70 = v362;
                              }
                              while (v97 != v96);
                              v5 = v364;
                              v11 = v365;
                              k = v349;
                              if ((_DWORD)v400)
                              {
                                v109 = v399 + 16;
                                v110 = 56 * v400;
                                while (1)
                                {
                                  v111 = *(_DWORD *)v109;
                                  v109 += 56;
                                  if (v111)
                                    break;
                                  v110 -= 56;
                                  if (!v110)
                                    goto LABEL_185;
                                }
                                v381 = v383;
                                v382 = 0x200000000;
                                sub_1C5ACDB14((uint64_t)&v381, (uint64_t)&v399);
                              }
                              else
                              {
LABEL_185:
                                v381 = v383;
                                v382 = 0x200000000;
                              }
                              sub_1C627C47C(&v399);
                              v67 = v384;
                              v4 = v357;
                            }
                            if (v67 != v386)
                              free(v67);
                            v112 = v362;
                            v113 = v382;
                            if ((_DWORD)v382)
                              goto LABEL_233;
                            v114 = (llvm::BasicBlock *)*((_QWORD *)v362 + 2);
                            v115 = llvm::BasicBlock::getFirstNonPHIOrDbg(v114, 1);
                            v116 = v362;
                            if (v115 != (char *)v17
                              || *((llvm::BasicBlock **)v114 + 5) == (llvm::BasicBlock *)((char *)v114 + 40)
                              || ((v117 = *((_QWORD *)v114 + 6), v118 = v117 - 24, v117)
                                ? (v119 = v117 - 24)
                                : (v119 = 0),
                                  !v117 || *(_BYTE *)(v119 + 16) != 83))
                            {
LABEL_230:
                              v399 = (char *)v401;
                              v400 = 0x200000000;
                              goto LABEL_231;
                            }
                            v120 = *((_DWORD *)v362 - 1);
                            v121 = (char *)v17 - 32 * (v120 & 0x7FFFFFF);
                            v122 = *(v362 - 8);
                            while (1)
                            {
                              if (v122 == 84)
                              {
                                v123 = 0;
                              }
                              else if (v122 == 39)
                              {
                                v116 = v362;
                                v123 = (*((_DWORD *)v362 + 14) + 1);
                                v4 = v357;
                                v5 = v364;
                                v11 = v365;
                                k = v349;
                              }
                              else
                              {
                                v123 = 2;
                                v4 = v357;
                                v5 = v364;
                                v11 = v365;
                                k = v349;
                                v116 = v362;
                              }
                              if (v120 < 0)
                              {
                                v124 = (*(_QWORD *)&v362[-32 * (v120 & 0x7FFFFFF) - 32] & 0xFFFFFFFF0) != 0
                                     ? (*((_DWORD *)v121 - 3) - *(_DWORD *)&v121[-*((_QWORD *)v121 - 1)])
                                     : 0;
                                v4 = v357;
                                v5 = v364;
                                v11 = v365;
                                k = v349;
                                v116 = v362;
                              }
                              else
                              {
                                v124 = 0;
                              }
                              if (v121 != &v362[-32 * v123 - 56 + -32 * v124])
                                break;
LABEL_217:
                              v137 = *(_QWORD *)(v118 + 32);
                              v118 = v137 - 24;
                              if (v137)
                                v138 = v137 - 24;
                              else
                                v138 = 0;
                              if (!v137 || *(_BYTE *)(v138 + 16) != 83)
                                goto LABEL_230;
                            }
                            v125 = 32 * (v120 & 0x7FFFFFF) - 32 - 32 * v123 - 32 * v124;
                            v126 = (_QWORD *)((char *)v17 - 32 * (v120 & 0x7FFFFFF));
                            while (2)
                            {
                              if (*v126 != v118)
                              {
LABEL_205:
                                v126 += 4;
                                v125 -= 32;
                                if (!v125)
                                  goto LABEL_217;
                                continue;
                              }
                              break;
                            }
                            v127 = *(_DWORD *)(v118 + 20);
                            if ((v127 & 0x40000000) != 0)
                            {
                              v134 = *(uint64_t **)(v118 - 8);
                              v135 = &v134[4 * *(unsigned int *)(v118 + 60)];
                              if (*v135 == v135[1])
                                goto LABEL_230;
                              v136 = *v134;
                              v133 = v134[4];
                              if (v136 == v133 || *(unsigned __int8 *)(v136 + 16) > 0x14u)
                                goto LABEL_205;
                            }
                            else
                            {
                              v128 = v127 & 0x7FFFFFF;
                              v129 = (uint64_t *)(v118 - 32 * v128);
                              v130 = &v129[4 * *(unsigned int *)(v118 + 60)];
                              if (*v130 == v130[1])
                                goto LABEL_230;
                              v131 = -v128;
                              v132 = *v129;
                              v133 = *(_QWORD *)(v118 + 32 + 32 * v131);
                              if (v132 == v133 || *(unsigned __int8 *)(v132 + 16) >= 0x15u)
                                goto LABEL_205;
                            }
                            if (*(unsigned __int8 *)(v133 + 16) < 0x15u)
                            {
                              sub_1C5ACD834((uint64_t)&v397, *(_QWORD *)(*((_QWORD *)v116 + 2) + 8));
                              v387 = v389;
                              v388 = 0x200000000;
                              v390 = *(void **)v397;
                              v391 = &v393;
                              v392 = 0x200000000;
                              v384 = v386;
                              v385 = 0x200000000;
                              v394[3] = *((_QWORD *)v397 + 1);
                              v395[0] = v396;
                              v395[1] = 0x200000000;
                              v399 = (char *)v401;
                              v400 = 0x200000000;
                              sub_1C631051C((uint64_t)&v399, (uint64_t)&v390, 2);
                              for (j = 0; j != -14; j -= 7)
                              {
                                v343 = (_BYTE *)v395[j];
                                if (&v396[j * 8] != v343)
                                  free(v343);
                              }
                              if (v384 != v386)
                                free(v384);
                              if (v387 != v389)
                                free(v387);
                              if (v397 != &v398)
                                free(v397);
LABEL_231:
                              sub_1C5ACDB14((uint64_t)&v381, (uint64_t)&v399);
                              sub_1C627C47C(&v399);
                              v113 = v382;
                              v112 = v362;
                              if (!(_DWORD)v382)
                              {
                                LOBYTE(v39) = 0;
                                goto LABEL_460;
                              }
LABEL_233:
                              v139 = *(v112 - 8) == 84 && (*((_WORD *)v112 - 3) & 3) == 2;
                              v356 = 0;
                              v360 = *((_QWORD *)v112 + 2);
                              v355 = v139;
                              if (!v139 && *((_QWORD *)v112 - 2))
                              {
                                v140 = *(_QWORD *)v17;
                                v399 = "phi.call";
                                v401[8] = 259;
                                v141 = (unsigned int *)operator new(0x48uLL);
                                *((_QWORD *)v141 + 1) = v140;
                                *(_QWORD *)v141 = 0;
                                *((_QWORD *)v141 + 2) = 0;
                                *((_QWORD *)v141 + 3) = 0x4000000000000053;
                                *((_OWORD *)v141 + 2) = 0u;
                                *((_OWORD *)v141 + 3) = 0u;
                                v141[16] = 0;
                                v141[17] = v113;
                                llvm::Value::setName((uint64_t ***)v141 + 1, (uint64_t)&v399);
                                v142 = v141[17];
                                v143 = operator new(40 * v142);
                                *(_QWORD *)v141 = v143;
                                if ((_DWORD)v142)
                                {
                                  v144 = &v143[4 * v142];
                                  do
                                  {
                                    *v143 = 0;
                                    v143[1] = 0;
                                    v143[2] = 0;
                                    v143[3] = v141 + 2;
                                    v143 += 4;
                                  }
                                  while (v143 != v144);
                                }
                                v356 = (llvm::Value *)(v141 + 2);
                                v145 = (void *)*((_QWORD *)v362 + 3);
                                v384 = v145;
                                if (v145)
                                  llvm::MetadataTracking::track((uint64_t)&v384, (unsigned __int8 *)v145, 2);
                                v148 = (unsigned __int8 *)*((_QWORD *)v141 + 7);
                                v147 = (void **)(v141 + 14);
                                v146 = v148;
                                if (v148)
                                  llvm::MetadataTracking::untrack((uint64_t)v147, v146);
                                v149 = (unsigned __int8 *)v384;
                                *v147 = v384;
                                if (v149)
                                {
                                  llvm::MetadataTracking::retrack((uint64_t)&v384, v149, (uint64_t)v147);
                                  v384 = 0;
                                }
                              }
                              v150 = 0;
                              v151 = 0;
                              do
                              {
                                v152 = v150;
                                v153 = &(&v399)[8 * v151];
                                *((_DWORD *)v153 + 4) = 128;
                                v154 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
                                *v153 = v154;
                                v153[1] = 0;
                                v157 = *((unsigned int *)v153 + 4);
                                if ((_DWORD)v157)
                                {
                                  v158 = v157 << 6;
                                  v159 = v154 + 16;
                                  do
                                  {
                                    *v159 = 0;
                                    v159[1] = -4096;
                                    *(v159 - 2) = &unk_1E814DA10;
                                    *(v159 - 1) = 2;
                                    v159[2] = 0;
                                    v159 += 8;
                                    v158 -= 64;
                                  }
                                  while (v158);
                                }
                                *((_BYTE *)v153 + 24) = 0;
                                *((_BYTE *)v153 + 48) = 0;
                                v150 = 1;
                                v151 = 1;
                              }
                              while ((v152 & 1) == 0);
                              v160 = v362;
                              if ((_DWORD)v382)
                              {
                                v161 = 0;
                                v354 = v17;
                                do
                                {
                                  v162 = 56 * v161;
                                  v163 = *((_QWORD *)v160 + 1);
                                  if (v163)
                                    v164 = (uint64_t ***)(v163 - 24);
                                  else
                                    v164 = 0;
                                  v359 = v161;
                                  v165 = llvm::DuplicateInstructionsInSplitBetween(v360, *((llvm **)v381 + 7 * v161), v164, (uint64_t)&(&v399)[8 * v161], (uint64_t)v371, v155, v156);
                                  v166 = *(_QWORD *)(v165 + 40);
                                  v358 = (_QWORD *)(v165 + 40);
                                  if (v166)
                                    v167 = v166 - 24;
                                  else
                                    v167 = 0;
                                  if (*(unsigned __int8 *)(v167 + 16) - 29 >= 0xB)
                                    v167 = 0;
                                  v168 = *(_QWORD *)(v167 + 24);
                                  if (v168)
                                    v169 = (uint64_t ***)(v168 - 24);
                                  else
                                    v169 = 0;
                                  v170 = *(unsigned int *)((char *)v381 + v162 + 16);
                                  if ((_DWORD)v170)
                                  {
                                    v171 = *(_QWORD *)((char *)v381 + v162 + 8);
                                    v366 = v169 - 4;
                                    v367 = v171 + 16 * v170;
                                    v369 = (uint64_t *)(v169 + 8);
                                    do
                                    {
                                      v172 = *(uint64_t ***)(*(_QWORD *)v171 - 64);
                                      v173 = *(uint64_t ***)(*(_QWORD *)v171 - 32);
                                      if (*(_DWORD *)(v171 + 8) == 32)
                                      {
                                        v174 = *((unsigned __int8 *)v169 + 16);
                                        if (v174 == 84)
                                        {
                                          v175 = 0;
                                        }
                                        else if (v174 == 39)
                                        {
                                          v175 = (*((_DWORD *)v169 + 20) + 1);
                                        }
                                        else
                                        {
                                          v175 = 2;
                                        }
                                        v176 = *((_DWORD *)v169 + 5);
                                        v177 = v176 & 0x7FFFFFF;
                                        v178 = &v169[-4 * v177];
                                        if (v176 < 0 && (v199 = (uint64_t)*(v178 - 1), (v199 & 0xFFFFFFFF0) != 0))
                                          v179 = (*((_DWORD *)v178 - 3) - *(_DWORD *)((char *)v178 - v199));
                                        else
                                          v179 = 0;
                                        if (v178 != &(&v366[-4 * v175])[-4 * v179])
                                        {
                                          v180 = 0;
                                          v181 = v173 + 1;
                                          v182 = (32 * v175 + 32 * v179) ^ 0xFFFFFFFFFFFFFFE0;
                                          v183 = -32 * v177;
                                          do
                                          {
                                            if (v169[(unint64_t)v183 / 8] == v172)
                                            {
                                              v184 = v180 + 1;
                                              v169[8] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex(v369, **v169, v180 + 1, 39);
                                              v185 = &v169[-4 * (*((_DWORD *)v169 + 5) & 0x7FFFFFF)];
                                              v186 = &v185[4 * v180];
                                              if (*v186)
                                              {
                                                *v186[2] = (uint64_t *)v186[1];
                                                v187 = v186[1];
                                                if (v187)
                                                  v187[2] = (uint64_t *)v186[2];
                                              }
                                              *v186 = v173;
                                              if (v173)
                                              {
                                                v188 = *v181;
                                                v189 = &v185[4 * v180];
                                                v189[1] = (uint64_t **)*v181;
                                                if (v188)
                                                  v188[2] = (uint64_t)(v189 + 1);
                                                v189[2] = v181;
                                                *v181 = (uint64_t *)v186;
                                              }
                                            }
                                            else
                                            {
                                              v184 = v180 + 1;
                                            }
                                            v183 += 32;
                                            v180 = v184;
                                          }
                                          while (v182 != v183);
                                        }
                                      }
                                      else if (*((_BYTE *)*v173 + 8) == 15
                                             && llvm::Constant::isNullValue(*(llvm::Constant **)(*(_QWORD *)v171 - 32)))
                                      {
                                        v190 = *((unsigned __int8 *)v169 + 16);
                                        if (v190 == 84)
                                          v191 = 0;
                                        else
                                          v191 = v190 == 39 ? (*((_DWORD *)v169 + 20) + 1) : 2;
                                        v192 = *((_DWORD *)v169 + 5);
                                        v193 = v192 & 0x7FFFFFF;
                                        v194 = &v169[-4 * v193];
                                        if (v192 < 0 && (v200 = (uint64_t)*(v194 - 1), (v200 & 0xFFFFFFFF0) != 0))
                                          v195 = (*((_DWORD *)v194 - 3) - *(_DWORD *)((char *)v194 - v200));
                                        else
                                          v195 = 0;
                                        if (v194 != &(&v366[-4 * v191])[-4 * v195])
                                        {
                                          v196 = 0;
                                          v197 = (32 * v191 + 32 * v195) ^ 0xFFFFFFFFFFFFFFE0;
                                          v198 = -32 * v193;
                                          do
                                          {
                                            ++v196;
                                            if (v169[(unint64_t)v198 / 8] == v172)
                                              v169[8] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex(v369, **v169, v196, 39);
                                            v198 += 32;
                                          }
                                          while (v197 != v198);
                                        }
                                      }
                                      v171 += 16;
                                    }
                                    while (v171 != v367);
                                  }
                                  v17 = v354;
                                  v160 = v362;
                                  v201 = v356;
                                  v202 = v362 - 56;
                                  if (*(_QWORD *)(v360 + 40) != v360 + 40)
                                  {
                                    v203 = *(_QWORD *)(v360 + 48);
                                    v204 = v203 - 24;
                                    v205 = v203 ? v203 - 24 : 0;
                                    if (v203 && *(_BYTE *)(v205 + 16) == 83)
                                    {
                                      v206 = *(v362 - 8);
                                      do
                                      {
                                        v207 = 0;
                                        if (v206 != 84)
                                        {
                                          if (v206 == 39)
                                          {
                                            v160 = v362;
                                            v207 = (*((_DWORD *)v362 + 14) + 1);
                                          }
                                          else
                                          {
                                            v207 = 2;
                                            v160 = v362;
                                          }
                                          v17 = v354;
                                          v201 = v356;
                                          v202 = v362 - 56;
                                        }
                                        v208 = *((_DWORD *)v160 - 1);
                                        v209 = (_QWORD *)((char *)v17 - 32 * (v208 & 0x7FFFFFF));
                                        if (v208 < 0)
                                        {
                                          if ((*(_QWORD *)&v362[-32 * (v208 & 0x7FFFFFF) - 32] & 0xFFFFFFFF0) != 0)
                                            v210 = (*((_DWORD *)v209 - 3)
                                                                - *(_DWORD *)((char *)v209 - *(v209 - 1)));
                                          else
                                            v210 = 0;
                                          v160 = v362;
                                          v17 = v354;
                                          v201 = v356;
                                          v202 = v362 - 56;
                                        }
                                        else
                                        {
                                          v210 = 0;
                                        }
                                        v211 = (uint64_t)&v202[-32 * v207 + -32 * v210];
                                        if (v209 != (_QWORD *)v211)
                                        {
                                          v212 = 0;
                                          do
                                          {
                                            if (*v209 == v204)
                                            {
                                              v213 = *(_DWORD *)(v204 + 20);
                                              v214 = v213 & 0x7FFFFFF;
                                              if ((v213 & 0x7FFFFFF) != 0)
                                              {
                                                v215 = 0;
                                                while (1)
                                                {
                                                  v216 = v204 - 32 * v214;
                                                  if ((v213 & 0x40000000) != 0)
                                                    v216 = *(_QWORD *)(v204 - 8);
                                                  if (*(_QWORD *)(v216 + 32 * *(unsigned int *)(v204 + 60) + 8 * v215) == v165)
                                                    break;
                                                  if (v214 == ++v215)
                                                    goto LABEL_327;
                                                }
                                              }
                                              else
                                              {
LABEL_327:
                                                LODWORD(v215) = -1;
                                              }
                                              if ((v213 & 0x40000000) != 0)
                                                v217 = *(_QWORD *)(v204 - 8);
                                              else
                                                v217 = v204 - 32 * v214;
                                              v218 = *(_QWORD *)(v217 + 32 * v215);
                                              v219 = &v169[-4 * (*((_DWORD *)v169 + 5) & 0x7FFFFFF)];
                                              v220 = &v219[4 * v212];
                                              if (*v220)
                                              {
                                                *v220[2] = (uint64_t *)v220[1];
                                                v221 = v220[1];
                                                if (v221)
                                                  v221[2] = (uint64_t *)v220[2];
                                              }
                                              *v220 = (uint64_t **)v218;
                                              if (v218)
                                              {
                                                v224 = *(uint64_t ***)(v218 + 8);
                                                v222 = (uint64_t **)(v218 + 8);
                                                v223 = v224;
                                                v225 = &v219[4 * v212];
                                                v225[1] = v224;
                                                if (v224)
                                                  v223[2] = (uint64_t *)(v225 + 1);
                                                v225[2] = v222;
                                                *v222 = (uint64_t *)v220;
                                              }
                                            }
                                            ++v212;
                                            v209 += 4;
                                          }
                                          while (v209 != (_QWORD *)v211);
                                        }
                                        v226 = *(_QWORD *)(v204 + 32);
                                        v204 = v226 - 24;
                                        if (v226)
                                          v227 = v226 - 24;
                                        else
                                          v227 = 0;
                                      }
                                      while (v226 && *(_BYTE *)(v227 + 16) == 83);
                                    }
                                  }
                                  if (v201)
                                  {
                                    sub_1C477667C(v201, (uint64_t)v169, v165);
                                    v160 = v362;
                                  }
                                  v4 = v357;
                                  if (v355)
                                  {
                                    v228 = *((_QWORD *)v160 + 1);
                                    v229 = (unsigned __int8 *)(v228 - 24);
                                    if (!v228)
                                      v229 = 0;
                                    v230 = v229[16];
                                    if (v230 == 77)
                                      v231 = (llvm::Instruction *)v229;
                                    else
                                      v231 = 0;
                                    v232 = v230 != 77 || v228 == 0;
                                    if (!v232)
                                      v228 = *(_QWORD *)(v228 + 8);
                                    if (v228)
                                      v233 = (unsigned __int8 *)(v228 - 24);
                                    else
                                      v233 = 0;
                                    v234 = (_QWORD *)*v358;
                                    if ((_QWORD *)*v358 == v358)
                                    {
                                      v236 = 0;
                                    }
                                    else
                                    {
                                      if (v234)
                                        v235 = (uint64_t)(v234 - 3);
                                      else
                                        v235 = 0;
                                      if (*(unsigned __int8 *)(v235 + 16) - 29 >= 0xB)
                                        v236 = 0;
                                      else
                                        v236 = v235;
                                    }
                                    v237 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v165 + 56) + 24)
                                                                            + 16)
                                                              + 8);
                                    v238 = v233[16];
                                    if (!v232)
                                      v169 = sub_1C5ACDD6C(v231, v236, (uint64_t)v169);
                                    if (v238 == 29)
                                      v239 = (llvm::Instruction *)v233;
                                    else
                                      v239 = 0;
                                    if (v237 == 7)
                                      v240 = 0;
                                    else
                                      v240 = (uint64_t)v169;
                                    sub_1C5ACDD6C(v239, v236, v240);
                                    v160 = v362;
                                  }
                                  v161 = v359 + 1;
                                }
                                while (v359 + 1 < (unint64_t)v382);
                              }
                              if (v355)
                              {
                                v241 = *(_QWORD *)(v360 + 8);
                                for (k = v349; v241; v241 = *(_QWORD *)(v241 + 8))
                                {
                                  v242 = *(_QWORD *)(v241 + 24);
                                  v243 = *(unsigned __int8 *)(v242 + 16);
                                  if (v242)
                                    v244 = v243 >= 0x1C;
                                  else
                                    v244 = 0;
                                  if (v244 && v243 - 29 < 0xB)
                                    break;
                                }
                                v390 = &v392;
                                v391 = (void *)0x200000000;
                                sub_1C4DBBCC0((unsigned int *)&v390, v241, 0);
                                if ((_DWORD)v391)
                                {
                                  v246 = 0;
                                  do
                                  {
                                    v247 = *((_QWORD *)v390 + v246);
                                    v248 = *(_QWORD *)(v247 + 40);
                                    if (v248 == v247 + 40)
                                    {
                                      v250 = 0;
                                    }
                                    else
                                    {
                                      if (v248)
                                        v249 = v248 - 24;
                                      else
                                        v249 = 0;
                                      if (*(unsigned __int8 *)(v249 + 16) - 29 >= 0xB)
                                        v250 = 0;
                                      else
                                        v250 = v249;
                                    }
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v250 + 40) + 40, (uint64_t ***)v250);
                                    v251 = *(_QWORD *)(v250 + 24);
                                    v252 = *(_QWORD **)(v250 + 32);
                                    *v252 = v251;
                                    *(_QWORD *)(v251 + 8) = v252;
                                    *(_QWORD *)(v250 + 24) = 0;
                                    *(_QWORD *)(v250 + 32) = 0;
                                    llvm::Value::deleteValue((llvm::Value *)v250);
                                    v387 = (void *)*((_QWORD *)v390 + v246);
                                    v388 = v360 | 4;
                                    llvm::DomTreeUpdater::applyUpdatesPermissive(v371, (uint64_t *)&v387, 1);
                                    ++v246;
                                  }
                                  while (v246 < v391);
                                }
                                llvm::DomTreeUpdater::deleteBB((llvm::DomTreeUpdater *)v371, (llvm::BasicBlock *)v360);
                                if (v390 != &v392)
                                  free(v390);
                                goto LABEL_419;
                              }
                              v253 = *(_QWORD *)(v360 + 48);
                              if (v253)
                                v254 = (llvm::ValueAsMetadata *)(v253 - 24);
                              else
                                v254 = 0;
                              k = v349;
                              if (v356)
                              {
                                v255 = *((_QWORD *)v254 + 5);
                                *((_QWORD *)v356 + 5) = v255;
                                *(_WORD *)(v255 + 18) &= ~0x8000u;
                                if ((*((_BYTE *)v356 + 23) & 0x10) != 0)
                                {
                                  v344 = *(_QWORD *)(v255 + 56);
                                  if (v344)
                                  {
                                    v345 = *(llvm::ValueSymbolTable **)(v344 + 104);
                                    if (v345)
                                      llvm::ValueSymbolTable::reinsertValue(v345, v356);
                                  }
                                }
                                v256 = *((_QWORD *)v254 + 3);
                                *((_QWORD *)v356 + 4) = (char *)v254 + 24;
                                *((_QWORD *)v356 + 3) = v256;
                                *(_QWORD *)(v256 + 8) = (char *)v356 + 24;
                                *((_QWORD *)v254 + 3) = (char *)v356 + 24;
                                llvm::Value::doRAUW(v17, v356, (llvm::Value *)1);
                                v160 = v362;
                              }
                              v257 = v360 + 40;
                              if (v160 == (char *)(v360 + 40))
                              {
LABEL_419:
                                v258 = &v402;
                                v5 = v364;
                                do
                                {
                                  if (*((_BYTE *)v258 - 16))
                                  {
                                    sub_1C4E43068((uint64_t)(v258 - 5));
                                    MEMORY[0x1CAA32FB4](*(v258 - 5), 8);
                                    *((_BYTE *)v258 - 16) = 0;
                                  }
                                  v259 = (char **)(v258 - 8);
                                  v260 = *((unsigned int *)v258 - 12);
                                  v261 = (char *)*(v258 - 8);
                                  if ((_DWORD)v260)
                                  {
                                    v262 = &v261[64 * v260];
                                    do
                                    {
                                      v263 = *((_QWORD *)v261 + 3);
                                      if ((v263 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                      {
                                        v264 = *((_QWORD *)v261 + 7);
                                        if (v264)
                                        {
                                          if (v264 != -8192 && v264 != -4096)
                                          {
                                            v265 = *((_QWORD *)v261 + 5) & 0xFFFFFFFFFFFFFFF8;
                                            *(_QWORD *)v265 = *((_QWORD *)v261 + 6);
                                            v266 = (unint64_t *)*((_QWORD *)v261 + 6);
                                            if (v266)
                                            {
                                              *v266 = *v266 & 7 | v265;
                                            }
                                            else
                                            {
                                              v267 = *((_QWORD *)v261 + 7);
                                              v268 = ***(int32x2_t ****)v267;
                                              v269 = (unint64_t)v268[303];
                                              if (v269 <= v265)
                                              {
                                                v270 = v268[305].u32[0];
                                                if (v269 + 16 * v270 > v265)
                                                {
                                                  v271 = v270 - 1;
                                                  LODWORD(v272) = v271 & ((v267 >> 4) ^ (v267 >> 9));
                                                  v273 = (uint64_t *)(v269 + 16 * v272);
                                                  v274 = *v273;
                                                  if (v267 == *v273)
                                                  {
LABEL_436:
                                                    *v273 = -8192;
                                                    v268[304] = vadd_s32(v268[304], (int32x2_t)0x1FFFFFFFFLL);
                                                    v267 = *((_QWORD *)v261 + 7);
                                                  }
                                                  else
                                                  {
                                                    v275 = 1;
                                                    while (v274 != -4096)
                                                    {
                                                      v276 = v272 + v275++;
                                                      v272 = v276 & v271;
                                                      v274 = *(_QWORD *)(v269 + 16 * v272);
                                                      if (v267 == v274)
                                                      {
                                                        v273 = (uint64_t *)(v269 + 16 * v272);
                                                        goto LABEL_436;
                                                      }
                                                    }
                                                  }
                                                  *(_BYTE *)(v267 + 17) &= ~1u;
                                                }
                                              }
                                            }
                                            v263 = *((_QWORD *)v261 + 3);
                                          }
                                        }
                                      }
                                      if (v263 != -4096 && v263 != -8192 && v263 != 0)
                                      {
                                        v278 = *((_QWORD *)v261 + 1) & 0xFFFFFFFFFFFFFFF8;
                                        *(_QWORD *)v278 = *((_QWORD *)v261 + 2);
                                        v279 = (unint64_t *)*((_QWORD *)v261 + 2);
                                        if (v279)
                                        {
                                          *v279 = *v279 & 7 | v278;
                                        }
                                        else
                                        {
                                          v280 = *((_QWORD *)v261 + 3);
                                          v281 = ***(int32x2_t ****)v280;
                                          v282 = (unint64_t)v281[303];
                                          if (v282 <= v278)
                                          {
                                            v283 = v281[305].u32[0];
                                            if (v282 + 16 * v283 > v278)
                                            {
                                              v284 = v283 - 1;
                                              LODWORD(v285) = v284 & ((v280 >> 4) ^ (v280 >> 9));
                                              v286 = (uint64_t *)(v282 + 16 * v285);
                                              v287 = *v286;
                                              if (v280 == *v286)
                                              {
LABEL_455:
                                                *v286 = -8192;
                                                v281[304] = vadd_s32(v281[304], (int32x2_t)0x1FFFFFFFFLL);
                                                v280 = *((_QWORD *)v261 + 3);
                                              }
                                              else
                                              {
                                                v288 = 1;
                                                while (v287 != -4096)
                                                {
                                                  v289 = v285 + v288++;
                                                  v285 = v289 & v284;
                                                  v287 = *(_QWORD *)(v282 + 16 * v285);
                                                  if (v280 == v287)
                                                  {
                                                    v286 = (uint64_t *)(v282 + 16 * v285);
                                                    goto LABEL_455;
                                                  }
                                                }
                                              }
                                              *(_BYTE *)(v280 + 17) &= ~1u;
                                            }
                                          }
                                        }
                                      }
                                      v261 += 64;
                                    }
                                    while (v261 != v262);
                                    v261 = *v259;
                                  }
                                  MEMORY[0x1CAA32FB4](v261, 8);
                                  v258 -= 8;
                                }
                                while (v259 != &v399);
                                LOBYTE(v39) = 1;
                                v11 = v365;
LABEL_460:
                                sub_1C627C47C((char **)&v381);
                                goto LABEL_90;
                              }
                              v368 = v254;
                              while (2)
                              {
                                v290 = *(char **)v160;
                                v291 = (llvm::ValueAsMetadata *)(v160 - 24);
                                if (*((_QWORD *)v160 - 2))
                                {
                                  if (*(v160 - 8) != 83)
                                  {
                                    v363 = v160;
                                    v292 = *(_QWORD *)v291;
                                    v293 = v382;
                                    LOWORD(v394[0]) = 257;
                                    v294 = (char *)operator new(0x48uLL);
                                    *((_QWORD *)v294 + 1) = v292;
                                    v295 = (llvm::PHINode *)(v294 + 8);
                                    *(_QWORD *)v294 = 0;
                                    *((_QWORD *)v294 + 2) = 0;
                                    *((_QWORD *)v294 + 3) = 0x4000000000000053;
                                    *((_OWORD *)v294 + 2) = 0u;
                                    v370 = v294 + 32;
                                    *((_OWORD *)v294 + 3) = 0u;
                                    *((_DWORD *)v294 + 16) = 0;
                                    *((_DWORD *)v294 + 17) = v293;
                                    llvm::Value::setName((uint64_t ***)v294 + 1, (uint64_t)&v390);
                                    v296 = *((unsigned int *)v294 + 17);
                                    v297 = operator new(40 * v296);
                                    *(_QWORD *)v294 = v297;
                                    if ((_DWORD)v296)
                                    {
                                      v298 = &v297[4 * v296];
                                      do
                                      {
                                        *v297 = 0;
                                        v297[1] = 0;
                                        v297[2] = 0;
                                        v297[3] = v295;
                                        v297 += 4;
                                      }
                                      while (v297 != v298);
                                    }
                                    v299 = (void *)*((_QWORD *)v363 + 3);
                                    v387 = v299;
                                    if (v299)
                                      llvm::MetadataTracking::track((uint64_t)&v387, (unsigned __int8 *)v299, 2);
                                    v300 = (unsigned __int8 *)*((_QWORD *)v294 + 7);
                                    if (v300)
                                      llvm::MetadataTracking::untrack((uint64_t)(v294 + 56), v300);
                                    v301 = (unsigned __int8 *)v387;
                                    *((_QWORD *)v294 + 7) = v387;
                                    if (v301)
                                    {
                                      llvm::MetadataTracking::retrack((uint64_t)&v387, v301, (uint64_t)(v294 + 56));
                                      v387 = 0;
                                    }
                                    v302 = 0;
                                    v303 = 0;
                                    do
                                    {
                                      v304 = v302;
                                      v391 = (void *)2;
                                      v392 = 0;
                                      v393 = (int32x2_t ****)v291;
                                      if (v291 != (llvm::ValueAsMetadata *)-8192
                                        && v291 != (llvm::ValueAsMetadata *)-4096
                                        && v291)
                                      {
                                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v391);
                                      }
                                      v305 = &(&v399)[8 * v303];
                                      v390 = &unk_1E814DA10;
                                      v394[0] = v305;
                                      v306 = sub_1C52E2ED8((uint64_t)v305, &v390);
                                      if (v393 != (int32x2_t ****)-8192
                                        && v393 != (int32x2_t ****)-4096
                                        && v393 != 0)
                                      {
                                        v308 = (unint64_t)v391 & 0xFFFFFFFFFFFFFFF8;
                                        *(_QWORD *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8) = v392;
                                        if (v392)
                                        {
                                          *(_QWORD *)v392 = *(_QWORD *)v392 & 7 | v308;
                                        }
                                        else
                                        {
                                          v309 = v393;
                                          v310 = ***v393;
                                          v311 = (unint64_t)v310[303];
                                          if (v311 <= v308)
                                          {
                                            v312 = v310[305].u32[0];
                                            if (v311 + 16 * v312 > v308)
                                            {
                                              v313 = v312 - 1;
                                              LODWORD(v314) = v313 & ((v393 >> 4) ^ (v393 >> 9));
                                              v315 = (int32x2_t *****)(v311 + 16 * v314);
                                              v316 = *v315;
                                              if (v393 == *v315)
                                              {
LABEL_491:
                                                *v315 = (int32x2_t ****)-8192;
                                                v310[304] = vadd_s32(v310[304], (int32x2_t)0x1FFFFFFFFLL);
                                                v309 = v393;
                                              }
                                              else
                                              {
                                                v317 = 1;
                                                while (v316 != (int32x2_t ****)-4096)
                                                {
                                                  v318 = v314 + v317++;
                                                  v314 = v318 & v313;
                                                  v316 = *(int32x2_t *****)(v311 + 16 * v314);
                                                  if (v393 == v316)
                                                  {
                                                    v315 = (int32x2_t *****)(v311 + 16 * v314);
                                                    goto LABEL_491;
                                                  }
                                                }
                                              }
                                              *((_BYTE *)v309 + 17) &= ~1u;
                                            }
                                          }
                                        }
                                      }
                                      v319 = v306[7];
                                      v391 = (void *)2;
                                      v392 = 0;
                                      v393 = (int32x2_t ****)v291;
                                      if (v291 != (llvm::ValueAsMetadata *)-8192
                                        && v291 != (llvm::ValueAsMetadata *)-4096
                                        && v291)
                                      {
                                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v391);
                                      }
                                      v390 = &unk_1E814DA10;
                                      v394[0] = v305;
                                      v320 = sub_1C52E2ED8((uint64_t)v305, &v390);
                                      if (v393 != (int32x2_t ****)-8192 && v393 != (int32x2_t ****)-4096 && v393)
                                      {
                                        v321 = (unint64_t)v391 & 0xFFFFFFFFFFFFFFF8;
                                        *(_QWORD *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8) = v392;
                                        if (v392)
                                        {
                                          *(_QWORD *)v392 = *(_QWORD *)v392 & 7 | v321;
                                        }
                                        else
                                        {
                                          v322 = v393;
                                          v323 = ***v393;
                                          v324 = (unint64_t)v323[303];
                                          if (v324 <= v321)
                                          {
                                            v325 = v323[305].u32[0];
                                            if (v324 + 16 * v325 > v321)
                                            {
                                              v326 = v325 - 1;
                                              LODWORD(v327) = v326 & ((v393 >> 4) ^ (v393 >> 9));
                                              v328 = (int32x2_t *****)(v324 + 16 * v327);
                                              v329 = *v328;
                                              if (v393 == *v328)
                                              {
LABEL_509:
                                                *v328 = (int32x2_t ****)-8192;
                                                v323[304] = vadd_s32(v323[304], (int32x2_t)0x1FFFFFFFFLL);
                                                v322 = v393;
                                              }
                                              else
                                              {
                                                v330 = 1;
                                                while (v329 != (int32x2_t ****)-4096)
                                                {
                                                  v331 = v327 + v330++;
                                                  v327 = v331 & v326;
                                                  v329 = *(int32x2_t *****)(v324 + 16 * v327);
                                                  if (v393 == v329)
                                                  {
                                                    v328 = (int32x2_t *****)(v324 + 16 * v327);
                                                    goto LABEL_509;
                                                  }
                                                }
                                              }
                                              *((_BYTE *)v322 + 17) &= ~1u;
                                            }
                                          }
                                        }
                                      }
                                      sub_1C477667C(v295, v319, *(_QWORD *)(v320[7] + 40));
                                      v302 = 1;
                                      v303 = 1;
                                    }
                                    while ((v304 & 1) == 0);
                                    v332 = *(_QWORD *)(v360 + 48);
                                    if (v332)
                                      v333 = v332 - 24;
                                    else
                                      v333 = 0;
                                    v334 = *(_QWORD *)(v333 + 40);
                                    *((_QWORD *)v294 + 6) = v334;
                                    *(_WORD *)(v334 + 18) &= ~0x8000u;
                                    if ((v294[31] & 0x10) != 0)
                                    {
                                      v340 = *(_QWORD *)(v334 + 56);
                                      if (v340)
                                      {
                                        v341 = *(llvm::ValueSymbolTable **)(v340 + 104);
                                        if (v341)
                                          llvm::ValueSymbolTable::reinsertValue(v341, v295);
                                      }
                                    }
                                    v336 = *(_QWORD *)(v333 + 24);
                                    v335 = (_QWORD *)(v333 + 24);
                                    *((_QWORD *)v294 + 4) = v336;
                                    *((_QWORD *)v294 + 5) = v335;
                                    *(_QWORD *)(v336 + 8) = v370;
                                    *v335 = v370;
                                    llvm::Value::doRAUW(v291, v295, (llvm::Value *)1);
                                    k = v349;
                                    v160 = v363;
                                    v257 = v360 + 40;
                                    v254 = v368;
                                    goto LABEL_518;
                                  }
                                }
                                else
                                {
LABEL_518:
                                  v337 = (uint64_t *)v160;
                                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v160 + 2) + 40, (uint64_t ***)v291);
                                  v338 = *v337;
                                  v339 = (uint64_t *)v337[1];
                                  *v339 = *v337;
                                  *(_QWORD *)(v338 + 8) = v339;
                                  *v337 = 0;
                                  v337[1] = 0;
                                  llvm::Value::deleteValue(v291);
                                  if (v291 == v254)
                                    goto LABEL_419;
                                }
                                v160 = v290;
                                if (v290 == (char *)v257)
                                  goto LABEL_419;
                                continue;
                              }
                            }
                            goto LABEL_205;
                          }
                          continue;
                        }
                        break;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v399, (uint64_t)v401, v82, 8);
                      v84 = v400;
                      v86 = v399;
                      v85 = v400;
                      goto LABEL_136;
                    }
                  }
                }
                v361 |= v39;
                v6 = a2;
                if (k)
                  break;
              }
            }
          }
        }
      }
    }
    while (v5 != v4);
  }
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v371);
  v399 = (char *)v379;
  sub_1C50B10F0((void ***)&v399);
  if (v375 != v374)
    free(v375);
  if (v371[0] != v372)
    free(v371[0]);
  return v361 & 1;
}

uint64_t sub_1C5ACD3E8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5ACB4D4(v0);
}

void sub_1C5ACD414(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5ACD438(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5ACD49C(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void **v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  uint64_t v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *__src;
  unsigned int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v8 = v29;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  llvm::TargetLibraryAnalysis::run((uint64_t)(v7 + 4), (uint64_t)a2, (uint64_t)&v34);
  v7[30] = v34;
  v9 = v7 + 30;
  if (*((_BYTE *)v7 + 320))
  {
    if (v9 == &v34)
    {
LABEL_18:
      *((_DWORD *)v7 + 78) = v42;
      goto LABEL_19;
    }
    v10 = (void **)(v7 + 31);
    v11 = v36;
    v12 = *((unsigned int *)v7 + 64);
    if (v12 >= v36)
    {
      if (v36)
        memmove(*v10, __src, 8 * v36);
      goto LABEL_17;
    }
    if (*((_DWORD *)v7 + 65) < v36)
    {
      *((_DWORD *)v7 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v11, 8);
    }
    else if ((_DWORD)v12)
    {
      memmove(*v10, __src, 8 * v12);
      goto LABEL_15;
    }
    v12 = 0;
LABEL_15:
    if (v12 != v36)
      memcpy((char *)*v10 + 8 * v12, (char *)__src + 8 * v12, 8 * v36 - 8 * v12);
LABEL_17:
    *((_DWORD *)v7 + 64) = v11;
    goto LABEL_18;
  }
  v23 = v7 + 33;
  v7[31] = v7 + 33;
  v24 = (void **)(v7 + 31);
  v7[32] = 0x600000000;
  v25 = v36;
  if (v36 && v24 != &__src)
  {
    if (v36 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 31), (uint64_t)(v7 + 33), v36, 8);
      v26 = v36;
      if (!v36)
      {
LABEL_39:
        *((_DWORD *)v7 + 64) = v25;
        goto LABEL_40;
      }
      v23 = *v24;
    }
    else
    {
      v26 = v36;
    }
    memcpy(v23, __src, 8 * v26);
    goto LABEL_39;
  }
LABEL_40:
  *((_DWORD *)v7 + 78) = v42;
  *((_BYTE *)v7 + 320) = 1;
LABEL_19:
  if (__src != v37)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v29);
  sub_1C4D8B52C(v27);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::TargetTransformInfoWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v34 = 0;
  __src = 0;
  v36 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v16 = *(_QWORD *)(v15 + 56);
  if (v16)
  {
    v7 = v37;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 48))(v27, v16, a2);
    v8 = (uint64_t *)(v15 + 64);
    v17 = v27[0];
    if (!*(_BYTE *)(v15 + 72))
    {
      *(_QWORD *)(v15 + 64) = v27[0];
      *(_BYTE *)(v15 + 72) = 1;
      goto LABEL_27;
    }
    v27[0] = 0;
    v18 = *v8;
    *v8 = v17;
    if (!v18)
      goto LABEL_27;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v27[0];
    v27[0] = 0;
    if (!v19)
      goto LABEL_27;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
LABEL_27:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v7);
  sub_1C4D8B52C(&v34);
  v20 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::DominatorTreeWrapperPass::ID);
  v22 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::DominatorTreeWrapperPass::ID);
  return sub_1C5ACB680((uint64_t)a2, v9, v8, v22 + 32);
}

unsigned int *sub_1C5ACD834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;

  for (; a2; a2 = *(_QWORD *)(a2 + 8))
  {
    v2 = *(_QWORD *)(a2 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (v2)
      v4 = v3 >= 0x1C;
    else
      v4 = 0;
    if (v4 && v3 - 29 < 0xB)
      break;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  return sub_1C4DBBCC0((unsigned int *)a1, a2, 0);
}

uint64_t sub_1C5ACD878(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  __int16 v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  llvm::Instruction *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v5 = (_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 != a2 + 40)
  {
    v6 = v4 - 24;
    if (!v4)
      v6 = 0;
    v7 = *(unsigned __int8 *)(v6 + 16) - 40;
    if (v7 < 0xFFFFFFF5)
      v6 = 0;
    if (v4)
    {
      if (*(_BYTE *)(v6 + 16) == 30 && v7 >= 0xFFFFFFF5 && (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
      {
        v9 = *(_QWORD *)(v6 - 96);
        if (v9)
        {
          if (*(_BYTE *)(v9 + 16) == 81 && *(unsigned __int8 *)(*(_QWORD *)(v9 - 32) + 16) <= 0x14u)
          {
            v10 = *(_WORD *)(v9 + 18);
            if ((v10 & 0x3E) == 0x20)
            {
              v13 = result;
              v14 = *(_DWORD *)(result + 20);
              v15 = v14 & 0x7FFFFFF;
              v16 = *(unsigned __int8 *)(result + 16);
              if (v16 == 84)
                v17 = 0;
              else
                v17 = v16 == 39 ? (*(_DWORD *)(result + 80) + 1) : 2;
              v18 = result - 32 * v15;
              if (v14 < 0 && (v30 = *(_QWORD *)(v18 - 8), (v30 & 0xFFFFFFFF0) != 0))
                v19 = (*(_DWORD *)(v18 - 12) - *(_DWORD *)(v18 - v30));
              else
                v19 = 0;
              if (v18 != result - 32 * v17 - 32 * v19 - 32)
              {
                v20 = 0;
                v21 = v10 & 0x3F;
                v22 = *(_QWORD *)(v9 - 64);
                v23 = (32 * v17 + 32 * v19) ^ 0xFFFFFFFFFFFFFFE0;
                v24 = -32 * v15;
                while (1)
                {
                  if (*(unsigned __int8 *)(*(_QWORD *)(v13 + v24) + 16) >= 0x15u)
                  {
                    result = llvm::CallBase::paramHasAttr(v13, v20, 39);
                    if ((result & 1) == 0 && *(_QWORD *)(v13 + v24) == v22)
                      break;
                  }
                  ++v20;
                  v24 += 32;
                  if (v23 == v24)
                    return result;
                }
                v25 = (_QWORD *)*v5;
                if ((_QWORD *)*v5 == v5)
                {
                  v27 = 0;
                }
                else
                {
                  if (v25)
                    v26 = (unsigned __int8 *)(v25 - 3);
                  else
                    v26 = 0;
                  if (v26[16] - 29 >= 0xB)
                    v27 = 0;
                  else
                    v27 = (llvm::Instruction *)v26;
                }
                result = llvm::Instruction::getSuccessor(v27, 0);
                if (result != a3)
                  v21 = dword_1C8668598[*(_WORD *)(v9 + 18) & 0x3F];
                v28 = *(unsigned int *)(a4 + 8);
                if (v28 >= *(_DWORD *)(a4 + 12))
                {
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v28 + 1, 16);
                  LODWORD(v28) = *(_DWORD *)(a4 + 8);
                }
                v29 = (_QWORD *)(*(_QWORD *)a4 + 16 * v28);
                *v29 = v9;
                v29[1] = v21;
                ++*(_DWORD *)(a4 + 8);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C5ACDAAC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C6310368(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C6310368(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5ACDB14(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *i;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v10 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v11 = 56 * v5;
          v12 = (uint64_t *)(v4 + 8);
          do
          {
            v13 = (uint64_t)(v10 + 8);
            *(_QWORD *)v10 = *(v12 - 1);
            v10 += 56;
            sub_1C56EEC88(v13, v12);
            v12 += 7;
            v11 -= 56;
          }
          while (v11);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v14 = *(char **)a1;
        }
        else
        {
          v14 = *(char **)a1;
        }
        for (i = &v14[56 * v6]; i != v10; i -= 56)
        {
          v16 = (char *)*((_QWORD *)i - 6);
          if (i - 32 != v16)
            free(v16);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v17 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v17)
        {
          v18 = *(char **)a2;
          v19 = 56 * v17;
          do
          {
            v20 = *(char **)&v18[v19 - 48];
            if (&v18[v19 - 32] != v20)
              free(v20);
            v19 -= 56;
          }
          while (v19);
        }
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v21 = *(char **)a1;
          v22 = 56 * v6;
          do
          {
            v23 = *(char **)&v21[v22 - 48];
            if (&v21[v22 - 32] != v23)
              free(v23);
            v22 -= 56;
          }
          while (v22);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C6310368(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1 + 8;
        v8 = 56 * v6;
        v9 = (uint64_t *)(v4 + 8);
        do
        {
          *(_QWORD *)(v7 - 8) = *(v9 - 1);
          v7 = sub_1C56EEC88(v7, v9) + 56;
          v9 += 7;
          v8 -= 56;
        }
        while (v8);
        goto LABEL_33;
      }
      v6 = 0;
LABEL_33:
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v6 != v25)
      {
        v26 = &v24[56 * v25];
        v27 = 56 * v6 + 8;
        v28 = (_QWORD *)(*(_QWORD *)a1 + v27);
        v29 = &v24[v27];
        do
        {
          v30 = v29 - 8;
          *(v28 - 1) = *((_QWORD *)v29 - 1);
          *v28 = v28 + 2;
          v28[1] = 0x200000000;
          if (*((_DWORD *)v29 + 2))
            v28 = (_QWORD *)sub_1C56EEC88((uint64_t)v28, (uint64_t *)v29);
          v28 += 7;
          v29 += 56;
        }
        while (v30 + 56 != v26);
        v24 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31)
      {
        v32 = 56 * v31;
        do
        {
          v33 = *(char **)&v24[v32 - 48];
          if (&v24[v32 - 32] != v33)
            free(v33);
          v32 -= 56;
        }
        while (v32);
      }
LABEL_44:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C6310490((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t ***sub_1C5ACDD6C(llvm::Instruction *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ***v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction **v12;
  llvm::Instruction *v13;
  int v14;
  int v15;
  llvm::Instruction *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  int v23;
  uint64_t ***v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v30;
  llvm::ValueSymbolTable *v31;
  _QWORD v32[4];
  __int16 v33;

  llvm::Instruction::clone(a1);
  v7 = v6;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_10;
  }
  v8 = ***(_QWORD ***)a1;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_8;
  LODWORD(v11) = (v10 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v12 = (llvm::Instruction **)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != a1)
  {
    v14 = 1;
    while (v13 != (llvm::Instruction *)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(llvm::Instruction **)(v9 + 16 * v11);
      if (v13 == a1)
      {
        v12 = (llvm::Instruction **)(v9 + 16 * v11);
        goto LABEL_9;
      }
    }
LABEL_8:
    v12 = (llvm::Instruction **)(v9 + 16 * v10);
  }
LABEL_9:
  v16 = v12[1];
  v19 = *(_QWORD *)v16;
  v17 = (char *)v16 + 16;
  v18 = v19;
LABEL_10:
  v33 = 261;
  v32[0] = v17;
  v32[1] = v18;
  llvm::Value::setName(v6, (uint64_t)v32);
  v20 = *(_QWORD *)(a2 + 40);
  v7[5] = (uint64_t **)v20;
  *(_WORD *)(v20 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
  {
    v30 = *(_QWORD *)(v20 + 56);
    if (v30)
    {
      v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
      if (v31)
        llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v7);
    }
  }
  v22 = *(_QWORD *)(a2 + 24);
  v21 = (uint64_t **)(a2 + 24);
  v7[3] = (uint64_t **)v22;
  v7[4] = v21;
  *(_QWORD *)(v22 + 8) = v7 + 3;
  *v21 = (uint64_t *)(v7 + 3);
  if (a3)
  {
    v23 = *((_DWORD *)v7 + 5);
    if ((v23 & 0x40000000) != 0)
      v24 = (uint64_t ***)*(v7 - 1);
    else
      v24 = &v7[-4 * (v23 & 0x7FFFFFF)];
    if (*v24)
    {
      *v24[2] = (uint64_t *)v24[1];
      v25 = v24[1];
      if (v25)
        v25[2] = (uint64_t *)v24[2];
    }
    *v24 = (uint64_t **)a3;
    v28 = *(uint64_t ***)(a3 + 8);
    v27 = (uint64_t **)(a3 + 8);
    v26 = v28;
    v24[1] = v28;
    if (v28)
      v26[2] = (uint64_t *)(v24 + 1);
    v24[2] = v27;
    *v27 = (uint64_t *)v24;
  }
  return v7;
}

uint64_t sub_1C5ACDEF8()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Only allow instructions before a call, if their cost is below DuplicationThreshold";
  *((_QWORD *)&v3 + 1) = 82;
  v1 = 5;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED81B7A8, "callsite-splitting-duplication-threshold", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81B7A8, &dword_1C475E000);
}

uint64_t sub_1C5ACDF7C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Constant Hoisting";
  *(_QWORD *)(v4 + 8) = 17;
  *(_QWORD *)(v4 + 16) = "consthoist";
  *(_QWORD *)(v4 + 24) = 10;
  *(_QWORD *)(v4 + 32) = &unk_1ED81B878;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5AD0DE4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5ACE028(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81B878;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194008;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_OWORD *)(a1 + 5552) = 0u;
  *(_DWORD *)(a1 + 5568) = 0;
  *(_OWORD *)(a1 + 5576) = 0u;
  *(_OWORD *)(a1 + 5592) = 0u;
  *(_OWORD *)(a1 + 5604) = 0u;
  *(_QWORD *)(a1 + 5632) = 0;
  *(_QWORD *)(a1 + 5624) = 0;
  *(_QWORD *)(a1 + 5640) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81B880);
  if (v3 != -1)
  {
    v7[0] = sub_1C5ACDF7C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81B880, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

llvm::Instruction *llvm::ConstantHoistingPass::findMatInsertPt(llvm::ConstantHoistingPass *this, llvm::Instruction *a2, int a3)
{
  int v3;
  char *v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t j;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;

  if (a3 == -1
    || ((v3 = *((_DWORD *)a2 + 5), (v3 & 0x40000000) != 0)
      ? (v4 = (char *)*((_QWORD *)a2 - 1))
      : (v4 = (char *)a2 - 32 * (v3 & 0x7FFFFFF)),
        (v5 = *(_QWORD **)&v4[32 * a3], v6 = *((unsigned __int8 *)v5 + 16), v5) ? (v7 = v6 >= 0x1C) : (v7 = 0),
        v7 ? (v8 = v6 - 66 >= 0xD) : (v8 = 1),
        v8))
  {
    v9 = *((unsigned __int8 *)a2 + 16);
    if ((v9 - 38) > 0x38 || ((1 << (v9 - 38)) & 0x100260000000001) == 0)
      return a2;
    if (a3 == -1 || v9 != 83)
    {
      v13 = *((_QWORD *)a2 + 5);
    }
    else
    {
      v11 = *((_DWORD *)a2 + 5);
      if ((v11 & 0x40000000) != 0)
        v12 = (char *)*((_QWORD *)a2 - 1);
      else
        v12 = (char *)a2 - 32 * (v11 & 0x7FFFFFF);
      v13 = *(_QWORD *)&v12[32 * *((unsigned int *)a2 + 15) + 8 * a3];
      for (i = *(_QWORD *)(v13 + 48); ; i = *(_QWORD *)(i + 8))
      {
        v15 = i - 24;
        if (!i)
          v15 = 0;
        if (*(_BYTE *)(v15 + 16) != 83)
          break;
      }
      v16 = *(unsigned __int8 *)(i - 8) - 38;
      v17 = v16 > 0x38;
      v18 = (1 << v16) & 0x100060000000001;
      if (v17 || v18 == 0)
      {
        v34 = (_QWORD *)(v13 + 40);
LABEL_52:
        v35 = (_QWORD *)*v34;
        if ((_QWORD *)*v34 == v34)
          return 0;
        if (v35)
          v5 = v35 - 3;
        else
          v5 = 0;
        if (*((unsigned __int8 *)v5 + 16) - 29 >= 0xB)
          return 0;
        return (llvm::Instruction *)v5;
      }
    }
    v20 = *((_QWORD *)this + 1);
    v21 = *(_QWORD *)(v20 + 24);
    v22 = *(unsigned int *)(v20 + 40);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = ((v13 >> 4) ^ (v13 >> 9)) & (v22 - 1);
      v24 = (uint64_t *)(v21 + 16 * v23);
      v25 = *v24;
      if (v13 == *v24)
        goto LABEL_40;
      v26 = 1;
      while (v25 != -4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(_QWORD *)(v21 + 16 * v23);
        if (v13 == v25)
        {
          v24 = (uint64_t *)(v21 + 16 * v23);
          goto LABEL_40;
        }
      }
    }
    v24 = (uint64_t *)(v21 + 16 * v22);
LABEL_40:
    v28 = (_QWORD *)v24[1];
    do
    {
      v28 = (_QWORD *)v28[1];
      for (j = *(_QWORD *)(*v28 + 48); ; j = *(_QWORD *)(j + 8))
      {
        v30 = j - 24;
        if (!j)
          v30 = 0;
        if (*(_BYTE *)(v30 + 16) != 83)
          break;
      }
      v31 = *(unsigned __int8 *)(j - 8) - 38;
      v17 = v31 > 0x38;
      v32 = (1 << v31) & 0x100060000000001;
    }
    while (!v17 && v32 != 0);
    v34 = (_QWORD *)(*v28 + 40);
    goto LABEL_52;
  }
  return (llvm::Instruction *)v5;
}

_QWORD *llvm::ConstantHoistingPass::findConstantInsertionPoint@<X0>(llvm::ConstantHoistingPass *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Instruction *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t NearestCommonDominator;
  uint64_t v22;
  llvm::Instruction *v23;
  llvm::Instruction **p_MatInsertPt;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t BlockFreq;
  uint64_t i;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  BOOL v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *j;
  uint64_t *k;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  uint64_t v118;
  int v120;
  unsigned int v121;
  char *v122;
  int32x2_t v123[2];
  int v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[2];
  unsigned int v131;
  llvm::Instruction *MatInsertPt;
  llvm::Instruction *v133;
  uint64_t v134;
  int v135;
  _BYTE v136[128];
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[64];
  uint64_t v142;
  char *v143;
  uint64_t v144;
  _QWORD v145[18];

  v145[16] = *MEMORY[0x1E0C80C00];
  v123[0] = 0;
  v123[1] = 0;
  v124 = 0;
  v126 = 0;
  v127 = 0;
  v125 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(uint64_t **)(a2 + 16);
    v7 = &v6[20 * v5];
    do
    {
      v8 = *((unsigned int *)v6 + 2);
      if ((_DWORD)v8)
      {
        v9 = *v6;
        v10 = *v6 + 16 * v8;
        do
        {
          MatInsertPt = (llvm::Instruction *)*((_QWORD *)llvm::ConstantHoistingPass::findMatInsertPt(this, *(llvm::Instruction **)v9, *(_DWORD *)(v9 + 8))+ 5);
          sub_1C5ACED14((uint64_t)v123, &MatInsertPt);
          v9 += 16;
        }
        while (v9 != v10);
      }
      v6 += 20;
    }
    while (v6 != v7);
    v11 = *((_QWORD *)this + 5);
    if (v124)
    {
      v12 = ((v11 >> 4) ^ (v11 >> 9)) & (v124 - 1);
      v13 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v12);
      if (v11 == v13)
      {
LABEL_9:
        v14 = *(_QWORD *)(v11 + 48);
        if (v14)
          v15 = (llvm::Instruction *)(v14 - 24);
        else
          v15 = 0;
        MatInsertPt = v15;
        goto LABEL_22;
      }
      v120 = 1;
      while (v13 != -4096)
      {
        v121 = v12 + v120++;
        v12 = v121 & (v124 - 1);
        v13 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v12);
        if (v11 == v13)
          goto LABEL_9;
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 5);
  }
  v16 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v16)
  {
    v18 = v125;
    v17 = v126;
    if ((unint64_t)((char *)v126 - (char *)v125) >= 9)
    {
      while (1)
      {
        MatInsertPt = 0;
        v19 = *(v17 - 1);
        sub_1C5AD1500(v123);
        v20 = *(v126 - 1);
        sub_1C5AD1500(v123);
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*((_QWORD *)this + 1), v19, v20);
        MatInsertPt = (llvm::Instruction *)NearestCommonDominator;
        if (NearestCommonDominator == *((_QWORD *)this + 5))
          break;
        sub_1C5ACED14((uint64_t)v123, &MatInsertPt);
        v18 = v125;
        v17 = v126;
        if ((unint64_t)((char *)v126 - (char *)v125) <= 8)
          goto LABEL_18;
      }
      v26 = *(_QWORD *)(NearestCommonDominator + 48);
      if (v26)
        v27 = (char *)(v26 - 24);
      else
        v27 = 0;
      v143 = v27;
      p_MatInsertPt = (llvm::Instruction **)&v143;
      goto LABEL_23;
    }
LABEL_18:
    v22 = *(_QWORD *)(*v18 + 48);
    if (v22)
      v23 = (llvm::Instruction *)(v22 - 24);
    else
      v23 = 0;
    MatInsertPt = llvm::ConstantHoistingPass::findMatInsertPt(this, v23, -1);
LABEL_22:
    p_MatInsertPt = &MatInsertPt;
LABEL_23:
    sub_1C509CEFC((_QWORD *)a3, p_MatInsertPt);
    return sub_1C5408A20(v123);
  }
  v28 = *((_QWORD *)this + 1);
  v142 = v11;
  v137 = (uint64_t *)v141;
  v138 = (uint64_t *)v141;
  v139 = 8;
  v140 = 0;
  MatInsertPt = (llvm::Instruction *)v136;
  v133 = (llvm::Instruction *)v136;
  v134 = 16;
  v135 = 0;
  v29 = v125;
  v30 = v126;
  if (v125 == v126)
    goto LABEL_30;
  do
  {
    v79 = *v29;
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v28, *v29))
      goto LABEL_127;
    if (v138 != v137)
    {
      v102 = v139 < 0x21 || 4 * (HIDWORD(v139) - v140) >= v139;
      if (!v102)
      {
        free(v138);
        v103 = HIDWORD(v139) - v140;
        v104 = 1 << (33 - __clz(HIDWORD(v139) - v140 - 1));
        v140 = 0;
        if (v103 <= 0x10)
          v105 = 32;
        else
          v105 = v104;
        v139 = v105;
        v106 = (uint64_t *)malloc_type_malloc(8 * v105, 0x4065EBACuLL);
        if (!v106)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v138 = v106;
        memset(v106, 255, 8 * v139);
        goto LABEL_92;
      }
      memset(v138, 255, 8 * v139);
    }
    v140 = 0;
    HIDWORD(v139) = 0;
LABEL_92:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v137, v79);
    if (v79 != v11)
    {
      while (1)
      {
        v80 = (char *)sub_1C477672C((uint64_t)&MatInsertPt, v79);
        if (v133 == MatInsertPt)
          v81 = (uint64_t *)((char *)&v134 + 4);
        else
          v81 = &v134;
        if (v80 != (char *)v133 + 8 * *(unsigned int *)v81)
          goto LABEL_112;
        v82 = *(_QWORD *)(v28 + 24);
        v83 = *(unsigned int *)(v28 + 40);
        if (!(_DWORD)v83)
          goto LABEL_103;
        LODWORD(v84) = (v83 - 1) & ((v79 >> 4) ^ (v79 >> 9));
        v85 = (uint64_t *)(v82 + 16 * v84);
        v86 = *v85;
        if (v79 != *v85)
          break;
LABEL_104:
        v79 = **(_QWORD **)(v85[1] + 8);
        if (v124)
        {
          v89 = ((v79 >> 4) ^ (v79 >> 9)) & (v124 - 1);
          v90 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v89);
          if (v79 == v90)
            goto LABEL_127;
          v91 = 1;
          while (v90 != -4096)
          {
            v92 = v89 + v91++;
            v89 = v92 & (v124 - 1);
            v90 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v89);
            if (v79 == v90)
              goto LABEL_127;
          }
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v137, v79);
        if (v79 == v11)
        {
          v93 = v139;
          LODWORD(v94) = HIDWORD(v139);
          v95 = v138;
          goto LABEL_113;
        }
      }
      v87 = 1;
      while (v86 != -4096)
      {
        v88 = v84 + v87++;
        v84 = v88 & (v83 - 1);
        v86 = *(_QWORD *)(v82 + 16 * v84);
        if (v79 == v86)
        {
          v85 = (uint64_t *)(v82 + 16 * v84);
          goto LABEL_104;
        }
      }
LABEL_103:
      v85 = (uint64_t *)(v82 + 16 * v83);
      goto LABEL_104;
    }
LABEL_112:
    v95 = v138;
    LODWORD(v94) = HIDWORD(v139);
    v93 = v139;
LABEL_113:
    if (v95 == v137)
      v94 = v94;
    else
      v94 = v93;
    v96 = v95;
    if ((_DWORD)v94)
    {
      v97 = 8 * v94;
      v96 = v95;
      while ((unint64_t)*v96 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v96;
        v97 -= 8;
        if (!v97)
          goto LABEL_127;
      }
    }
    v98 = (char *)&v95[v94];
    if (v96 != (uint64_t *)v98)
    {
      v99 = *v96;
LABEL_123:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&MatInsertPt, v99);
      v100 = (unint64_t *)(v96 + 1);
      while (v100 != (unint64_t *)v98)
      {
        v101 = *v100++;
        v99 = v101;
        if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v96 = (uint64_t *)(v100 - 1);
          goto LABEL_123;
        }
      }
    }
LABEL_127:
    ++v29;
  }
  while (v29 != v30);
LABEL_30:
  v31 = 0;
  v143 = (char *)v145;
  v145[0] = v11;
  v144 = 0x1000000001;
  v32 = 1;
  do
  {
    v33 = v31;
    v34 = *(_QWORD *)(v28 + 24);
    v35 = *(unsigned int *)(v28 + 40);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)&v143[8 * v33];
      LODWORD(v37) = ((v36 >> 4) ^ (v36 >> 9)) & (v35 - 1);
      v38 = (uint64_t *)(v34 + 16 * v37);
      v39 = *v38;
      if (v36 == *v38)
        goto LABEL_38;
      v40 = 1;
      while (v39 != -4096)
      {
        v41 = v37 + v40++;
        v37 = v41 & (v35 - 1);
        v39 = *(_QWORD *)(v34 + 16 * v37);
        if (v36 == v39)
        {
          v38 = (uint64_t *)(v34 + 16 * v37);
          goto LABEL_38;
        }
      }
    }
    v38 = (uint64_t *)(v34 + 16 * v35);
LABEL_38:
    v42 = v38[1];
    v43 = *(unsigned int *)(v42 + 32);
    if ((_DWORD)v43)
    {
      v44 = *(uint64_t ***)(v42 + 24);
      v45 = 8 * v43;
      do
      {
        v46 = *v44;
        v47 = (char *)sub_1C477672C((uint64_t)&MatInsertPt, **v44);
        if (v133 == MatInsertPt)
          v48 = (uint64_t *)((char *)&v134 + 4);
        else
          v48 = &v134;
        if (v47 != (char *)v133 + 8 * *(unsigned int *)v48)
        {
          v49 = *v46;
          v50 = v144;
          if (v144 >= (unint64_t)HIDWORD(v144))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v144 + 1, 8);
            v50 = v144;
          }
          *(_QWORD *)&v143[8 * v50] = v49;
          LODWORD(v144) = v144 + 1;
        }
        ++v44;
        v45 -= 8;
      }
      while (v45);
      v32 = v144;
    }
    v31 = v33 + 1;
  }
  while (v32 != v33 + 1);
  v130[0] = 0;
  v130[1] = 0;
  v131 = 0;
  sub_1C631101C(v130, v33 + 2);
  if (!(_DWORD)v144)
    goto LABEL_147;
  v122 = v143;
  v51 = &v143[8 * v144];
  while (2)
  {
    v53 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v52 = v53;
    v129 = v53;
    if (v124)
    {
      v55 = ((v52 >> 4) ^ (v52 >> 9)) & (v124 - 1);
      v56 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v55);
      if (v52 == v56)
      {
        v54 = 1;
      }
      else
      {
        v77 = 1;
        do
        {
          v54 = v56 != -4096;
          if (v56 == -4096)
            break;
          v78 = v55 + v77++;
          v55 = v78 & (v124 - 1);
          v56 = *(_QWORD *)(*(_QWORD *)v123 + 8 * v55);
        }
        while (v52 != v56);
      }
    }
    else
    {
      v54 = 0;
    }
    v57 = sub_1C631113C((uint64_t)v130, &v129);
    v58 = sub_1C631113C((uint64_t)v130, &v129);
    if (v129 != v11)
    {
      v59 = *(_QWORD *)(v28 + 24);
      v60 = *(unsigned int *)(v28 + 40);
      if (!(_DWORD)v60)
        goto LABEL_63;
      LODWORD(v61) = (v60 - 1) & ((v129 >> 4) ^ (v129 >> 9));
      v62 = (uint64_t *)(v59 + 16 * v61);
      v63 = *v62;
      if (v129 != *v62)
      {
        v64 = 1;
        while (v63 != -4096)
        {
          v65 = v61 + v64++;
          v61 = v65 & (v60 - 1);
          v63 = *(_QWORD *)(v59 + 16 * v61);
          if (v129 == v63)
          {
            v62 = (uint64_t *)(v59 + 16 * v61);
            goto LABEL_64;
          }
        }
LABEL_63:
        v62 = (uint64_t *)(v59 + 16 * v60);
      }
LABEL_64:
      v128 = **(_QWORD **)(v62[1] + 8);
      v66 = sub_1C631113C((uint64_t)v130, &v128) + 1;
      v67 = sub_1C631113C((uint64_t)v130, &v128);
      if (v54)
        goto LABEL_65;
      for (i = *(_QWORD *)(v129 + 48); ; i = *(_QWORD *)(i + 8))
      {
        v70 = i - 24;
        if (!i)
          v70 = 0;
        if (*(_BYTE *)(v70 + 16) != 83)
          break;
      }
      v71 = *(unsigned __int8 *)(i - 8) - 38;
      v72 = v71 > 0x38;
      v73 = (1 << v71) & 0x100060000000001;
      v74 = v72 || v73 == 0;
      if (v74
        && (v58[7] > (unint64_t)llvm::BlockFrequencyInfo::getBlockFreq(v16, v129)
         || v58[7] == llvm::BlockFrequencyInfo::getBlockFreq(v16, v129) && v57[5] - v57[4] >= 9uLL))
      {
LABEL_65:
        sub_1C5ACED14((uint64_t)v66, &v129);
        BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v16, v129);
      }
      else
      {
        sub_1C5AD113C((uint64_t)v66, (_QWORD *)v57[4], (_QWORD *)v57[5]);
        BlockFreq = v58[7];
      }
      v75 = v67[7];
      v102 = __CFADD__(BlockFreq, v75);
      v76 = BlockFreq + v75;
      if (v102)
        v76 = -1;
      v67[7] = v76;
      if (v51 == v122)
        goto LABEL_147;
      continue;
    }
    break;
  }
  sub_1C4DFC0E4(v123);
  v126 = v125;
  if (v58[7] > (unint64_t)llvm::BlockFrequencyInfo::getBlockFreq(v16, v129))
    goto LABEL_141;
  if (v58[7] != llvm::BlockFrequencyInfo::getBlockFreq(v16, v129))
  {
    v107 = (char *)v57[4];
    v108 = (char *)v57[5];
    goto LABEL_146;
  }
  v107 = (char *)v57[4];
  v108 = (char *)v57[5];
  if ((unint64_t)(v108 - v107) >= 9)
LABEL_141:
    sub_1C5ACED14((uint64_t)v123, &v142);
  else
LABEL_146:
    sub_1C5AD113C((uint64_t)v123, v107, v108);
LABEL_147:
  v109 = v130[0];
  if (v131)
  {
    v110 = (_QWORD *)(v130[0] + 8);
    v111 = (unint64_t)v131 << 6;
    do
    {
      if ((*(v110 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v110 = sub_1C5408A20(v110);
      v110 += 8;
      v111 -= 64;
    }
    while (v111);
    v109 = v130[0];
  }
  MEMORY[0x1CAA32FB4](v109, 8);
  if (v143 != (char *)v145)
    free(v143);
  if (v133 != MatInsertPt)
    free(v133);
  if (v138 != v137)
    free(v138);
  v112 = v125;
  for (j = v126; v112 != j; ++v112)
  {
    for (k = (uint64_t *)(*v112 + 48); ; k = (uint64_t *)(v115 + 8))
    {
      v115 = *k;
      v116 = (unsigned __int8 *)(v115 - 24);
      if (!v115)
        v116 = 0;
      v117 = v116[16] - 38;
      v72 = v117 > 0x38;
      v118 = (1 << v117) & 0x100260000000001;
      if (v72 || v118 == 0)
        break;
    }
    MatInsertPt = (llvm::Instruction *)v116;
    sub_1C509CEFC((_QWORD *)a3, &MatInsertPt);
  }
  return sub_1C5408A20(&v123[0]);
}

BOOL sub_1C5ACED14(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C6187FB8((_DWORD *)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = *(_QWORD **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(_QWORD **)(a1 + 24);
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = *(_QWORD **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    *(_QWORD *)(a1 + 32) = v7;
  }
  return v4 != 0;
}

uint64_t llvm::ConstantHoistingPass::collectConstantCandidates(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _DWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  __int128 v30;
  int v31;
  uint64_t v32;

  v6 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 *)(a3 + 16);
  if (v10 == 84
    && (v11 = *(_QWORD *)(a3 - 32)) != 0
    && !*(_BYTE *)(v11 + 16)
    && *(_QWORD *)(v11 + 24) == *(_QWORD *)(a3 + 72)
    && (*(_BYTE *)(v11 + 33) & 0x20) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t))(**(_QWORD **)*a1 + 664))(*(_QWORD *)*a1, *(unsigned int *)(v11 + 36), a4, a5 + 24, *(_QWORD *)a5, 3);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)*a1 + 656))(*(_QWORD *)*a1, (v10 - 28), a4, a5 + 24, *(_QWORD *)a5, 3, a3);
  }
  v14 = result;
  v15 = v13;
  v16 = result > 1;
  if (v13)
    v16 = v13 > 0;
  if (v16)
  {
    v25 = a5 & 0xFFFFFFFFFFFFFFFBLL;
    v26 = 0;
    sub_1C5AD1568((uint64_t *)&v27, a2, &v25, &v26);
    v17 = v27;
    if (v29[0])
    {
      v18 = a1 + 7;
      v27 = v29;
      v28 = 0x800000000;
      v30 = a5;
      v31 = 0;
      v19 = a1[8];
      if (v19 >= a1[9])
      {
        v21 = sub_1C5AD17A4(a1 + 7, (uint64_t)&v27);
      }
      else
      {
        *(_QWORD *)v19 = v19 + 16;
        *(_QWORD *)(v19 + 8) = 0x800000000;
        if ((_DWORD)v28)
          sub_1C62F45E8(v19, (uint64_t)&v27);
        v20 = v30;
        *(_DWORD *)(v19 + 160) = v31;
        *(_OWORD *)(v19 + 144) = v20;
        v21 = v19 + 168;
      }
      a1[8] = v21;
      if (v27 != v29)
      {
        free(v27);
        v21 = a1[8];
      }
      v23 = *v18;
      v22 = 1022611261 * ((unint64_t)(v21 - *v18) >> 3) - 1;
      v17[2] = v22;
    }
    else
    {
      v22 = *((_DWORD *)v27 + 2);
      v23 = a1[7];
    }
    if (v15)
      v24 = 0;
    else
      v24 = v14;
    return (uint64_t)sub_1C5ACF0F8((unsigned int *)(v23 + 168 * v22), a3, v6, v24);
  }
  return result;
}

uint64_t sub_1C5ACF070(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1C5AD17A4(a1, a2);
  }
  else
  {
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x800000000;
    if (*(_DWORD *)(a2 + 8))
      sub_1C62F45E8(v4, a2);
    v5 = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(v4 + 160) = *(_DWORD *)(a2 + 160);
    *(_OWORD *)(v4 + 144) = v5;
    result = v4 + 168;
  }
  a1[1] = result;
  return result;
}

unsigned int *sub_1C5ACF0F8(unsigned int *result, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = result;
  result[40] += a4;
  v7 = result[2];
  if (v7 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7 + 1, 16);
    LODWORD(v7) = v6[2];
  }
  v8 = (_QWORD *)(*(_QWORD *)v6 + 16 * v7);
  *v8 = a2;
  v8[1] = a3;
  ++v6[2];
  return result;
}

uint64_t sub_1C5ACF174(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  void **v35;

  v28 = *a2;
  v29 = 0;
  sub_1C6311350((uint64_t)a1, &v28, &v29, (uint64_t)&v26);
  v4 = v26;
  if (v27)
  {
    v5 = a1[5];
    v6 = *a2;
    v22[3] = *a2;
    memset(v22, 0, 24);
    v7 = (_QWORD *)a1[4];
    if ((unint64_t)v7 >= v5)
    {
      v12 = a1[3];
      v13 = ((uint64_t)v7 - v12) >> 5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59)
        abort();
      v15 = v5 - v12;
      if (v15 >> 4 > v14)
        v14 = v15 >> 4;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      v34 = a1 + 5;
      if (v16 >> 59)
        sub_1C4764EE4();
      v17 = (char *)operator new(32 * v16);
      v18 = &v17[32 * v13];
      __p = v17;
      v31 = v18;
      *(_QWORD *)v18 = v6;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      v32 = v18 + 32;
      v33 = &v17[32 * v16];
      sub_1C621E810(a1 + 3, &__p);
      v8 = (_QWORD *)a1[4];
      v20 = v31;
      v19 = v32;
      if (v32 != v31)
      {
        do
        {
          v21 = v19 - 32;
          v35 = (void **)(v19 - 24);
          sub_1C5A554E4(&v35);
          v19 = v21;
        }
        while (v21 != v20);
      }
      if (__p)
        operator delete(__p);
    }
    else
    {
      v8 = v7 + 4;
      *v7 = v6;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
    }
    a1[4] = (uint64_t)v8;
    __p = &v23;
    sub_1C5A554E4((void ***)&__p);
    __p = v22;
    sub_1C5A554E4((void ***)&__p);
    v9 = a1[3];
    v10 = ((unint64_t)(a1[4] - v9) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v10;
  }
  else
  {
    v10 = *(_DWORD *)(v26 + 8);
    v9 = a1[3];
  }
  return v9 + 32 * v10 + 8;
}

uint64_t **llvm::ConstantHoistingPass::collectConstantCandidates(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v15;
  unint64_t *v16;
  int v17;
  BOOL v18;

  v7 = (uint64_t *)result;
  v8 = *(_DWORD *)(a3 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD *)(a3 - 8);
  else
    v9 = a3 - 32 * (v8 & 0x7FFFFFF);
  v10 = *(_QWORD *)(v9 + 32 * a4);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v10)
    v12 = v11 == 16;
  else
    v12 = 0;
  if (v12)
    return (uint64_t **)llvm::ConstantHoistingPass::collectConstantCandidates(v7, a2, a3, a4, v10);
  if (v10)
    v13 = v11 >= 0x1C;
  else
    v13 = 0;
  if (v13)
  {
    if (v11 - 66 > 0xC)
      return result;
    v15 = *(_DWORD *)(v10 + 20);
    if ((v15 & 0x40000000) != 0)
    {
      v16 = *(unint64_t **)(v10 - 8);
LABEL_26:
      v10 = *v16;
      v17 = *(unsigned __int8 *)(*v16 + 16);
      if (v10)
        v18 = v17 == 16;
      else
        v18 = 0;
      if (!v18)
        return result;
      return (uint64_t **)llvm::ConstantHoistingPass::collectConstantCandidates(v7, a2, a3, a4, v10);
    }
LABEL_24:
    v16 = (unint64_t *)(v10 - 32 * (v15 & 0x7FFFFFF));
    goto LABEL_26;
  }
  if (v10)
    v14 = v11 == 5;
  else
    v14 = 0;
  if (v14)
  {
    if (byte_1ED81B9C8 && *(_WORD *)(v10 + 18) == 34)
      result = llvm::ConstantHoistingPass::collectConstantCandidates(result, a2, a3, a4, v10);
    if (*(unsigned __int16 *)(v10 + 18) - 38 <= 0xC)
    {
      v15 = *(_DWORD *)(v10 + 20);
      goto LABEL_24;
    }
  }
  return result;
}

void llvm::ConstantHoistingPass::collectConstantCandidates(llvm::ConstantHoistingPass *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  llvm *v8;
  _QWORD v9[2];
  int v10;

  v2 = (char *)a2 + 72;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    do
    {
      if (v3)
        v5 = (uint64_t)(v3 - 24);
      else
        v5 = 0;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 1), v5))
      {
        v6 = v5 + 40;
        for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v8 = (llvm *)(i - 24);
          else
            v8 = 0;
          llvm::ConstantHoistingPass::collectConstantCandidates((uint64_t **)this, (uint64_t)v9, v8);
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  JUMPOUT(0x1CAA32FB4);
}

uint64_t llvm::ConstantHoistingPass::maximizeConstantsInRange(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  char v52;
  void *v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;

  v5 = a2;
  v6 = a1[5][7];
  v7 = *(_QWORD *)(v6 + 112);
  if (v7 && ((*(_BYTE *)(v7 + 17) & 4) != 0 || *(char *)(v7 + 13) < 0))
  {
    if (a3 - a2 >= 16801)
      goto LABEL_8;
  }
  else
  {
    if (llvm::shouldOptimizeForSize((uint64_t ***)v6, (llvm::ProfileSummaryInfo *)a1[6], (uint64_t **)a1[2]))v8 = a3 - v5 <= 16800;
    else
      v8 = 0;
    if (!v8)
    {
LABEL_8:
      if (v5 != a3)
      {
        LODWORD(v9) = 0;
        v10 = *a4;
        v11 = v5;
        do
        {
          v12 = *(_DWORD *)(v11 + 8);
          if (*(_DWORD *)(v11 + 160) > *(_DWORD *)(v10 + 160))
          {
            *a4 = v5;
            v10 = v11;
          }
          v9 = (v12 + v9);
          v11 += 168;
          v5 += 168;
        }
        while (v11 != a3);
        return v9;
      }
      return 0;
    }
  }
  if (v5 == a3)
    return 0;
  LODWORD(v9) = 0;
  v40 = 0;
  v39 = -1;
  v13 = v5;
  v43 = v5;
  do
  {
    v14 = *(uint64_t **)(v13 + 144);
    v54 = *((_DWORD *)v14 + 8);
    if (v54 > 0x40)
    {
      v53 = (void *)operator new[]();
      memcpy(v53, (const void *)v14[3], (((unint64_t)v54 + 63) >> 3) & 0x3FFFFFF8);
      v14 = *(uint64_t **)(v13 + 144);
    }
    else
    {
      v53 = (void *)v14[3];
    }
    v15 = *(unsigned int *)(v13 + 8);
    v42 = v9;
    v41 = v15;
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 0;
      v49 = *v14;
      v18 = *(_DWORD **)v13;
      v44 = *(_QWORD *)v13 + 16 * v15;
      do
      {
        v45 = v18;
        v46 = *(unsigned __int8 *)(*(_QWORD *)v18 + 16) - 28;
        v47 = v18[2];
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 656))(**a1);
        if (__OFADD__(v16, v19))
          v16 = ((v16 + v19) >> 63) ^ 0x8000000000000000;
        else
          v16 += v19;
        if (v20 == 1)
          v17 = 1;
        do
        {
          v21 = *(_QWORD *)(v5 + 144);
          v22 = (uint64_t **)(v21 + 24);
          v23 = *(_QWORD *)(v13 + 144);
          v24 = *(_DWORD *)(v21 + 32);
          v25 = *(_DWORD *)(v23 + 32);
          if (v24 <= v25)
            v26 = *(_DWORD *)(v23 + 32);
          else
            v26 = *(_DWORD *)(v21 + 32);
          if (v24 < 0x41
            || v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v21 + 24)) <= 0x40)
          {
            v28 = *v22;
            if (v24 < 0x41)
              v28 = (uint64_t *)v22;
            v27 = *v28;
          }
          else
          {
            v27 = -1;
          }
          if (v25 < 0x41
            || v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 24)) <= 0x40)
          {
            v29 = *(uint64_t **)(v23 + 24);
            if (v25 < 0x41)
              v29 = (uint64_t *)(v23 + 24);
            if (v27 != -1)
            {
              v30 = *v29;
              if (v30 != -1)
              {
                v31 = v27 - v30;
                v56 = v26;
                if (v26 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v55, v31, 1);
                  v26 = v56;
                  v33 = v55;
                }
                else
                {
                  v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
                  if (!v26)
                    v32 = 0;
                  v33 = v32 & v31;
                }
                v51 = v26;
                v50 = v33;
                v52 = 1;
                v34 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unint64_t *, uint64_t))(*(_QWORD *)**a1 + 640))(**a1, v46, v47, &v50, v49);
                if (v35 == 1)
                  v17 = 1;
                if (__OFSUB__(v16, v34))
                  v16 = ((v16 - v34) >> 63) ^ 0x8000000000000000;
                else
                  v16 -= v34;
                if (v52 && v51 >= 0x41 && v50)
                  MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
              }
            }
          }
          v5 += 168;
        }
        while (v5 != a3);
        v18 = v45 + 4;
        v5 = v43;
      }
      while (v45 + 4 != (_DWORD *)v44);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v36 = v39 < v16;
    if (v40 != v17)
      v36 = v40 < v17;
    if (v36)
    {
      *a4 = v13;
      v39 = v16;
      v40 = v17;
    }
    if (v54 >= 0x41 && v53)
      MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
    v9 = (v41 + v42);
    v13 += 168;
  }
  while (v13 != a3);
  return v9;
}

char **llvm::ConstantHoistingPass::findBaseConstants(llvm::ConstantHoistingPass *this, llvm::GlobalVariable *a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const std::nothrow_t *v9;
  unint64_t v10;
  _QWORD *v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  _BOOL4 v43;
  uint64_t *v45;
  char *v46;
  llvm::GlobalVariable *v47;

  v47 = a2;
  if (a2)
  {
    v3 = (uint64_t *)sub_1C5ACF174((uint64_t *)this + 10, (uint64_t *)&v47);
    v4 = (char *)sub_1C6310D48((uint64_t)this + 5520, (uint64_t)&v47, v5, v6);
  }
  else
  {
    v3 = (uint64_t *)((char *)this + 56);
    v4 = (char *)this + 128;
  }
  v7 = *v3;
  v8 = v3[1];
  v45 = v3;
  if (v8 - *v3 < 1)
  {
LABEL_8:
    sub_1C5AD1BA0(v7, v8, 0xCF3CF3CF3CF3CF3DLL * ((v8 - v7) >> 3), 0, 0);
  }
  else
  {
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((v8 - v7) >> 3);
    while (1)
    {
      v11 = operator new(168 * v10, v9);
      if (v11)
        break;
      v12 = v10 > 1;
      v10 >>= 1;
      if (!v12)
        goto LABEL_8;
    }
    v13 = v11;
    sub_1C5AD1BA0(v7, v8, 0xCF3CF3CF3CF3CF3DLL * ((v8 - v7) >> 3), v11, v10);
    operator delete(v13);
  }
  v15 = *v3;
  v14 = v3[1];
  v16 = *v3 + 168;
  if (v16 != v14)
  {
    v17 = (_QWORD *)*v3;
    v46 = v4;
    while (1)
    {
      v18 = v17;
      v17 = (_QWORD *)v16;
      v19 = *(_QWORD **)(v15 + 144);
      v20 = v18[39];
      if (*v19 == *(_QWORD *)v20)
      {
        v21 = *((unsigned int *)v18 + 44);
        if ((_DWORD)v21)
        {
          v22 = 16 * v21;
          v23 = (unsigned int *)(*v17 + 8);
          while (1)
          {
            v24 = (uint64_t *)*((_QWORD *)v23 - 1);
            v25 = *((unsigned __int8 *)v24 + 16);
            if (v24)
            {
              if (v25 == 60)
                break;
            }
            if (v24)
            {
              if (v25 == 61)
              {
                v26 = *(v24 - 4);
                v27 = v24 - 8;
                if (v26 == v27[4 * *v23])
                {
                  v24 = (uint64_t *)*v27;
                  break;
                }
              }
            }
            v23 += 4;
            v22 -= 16;
            if (!v22)
              goto LABEL_21;
          }
          v28 = *v24;
        }
        else
        {
LABEL_21:
          v28 = 0;
        }
        v29 = *(unsigned int *)(v20 + 32);
        if (v29 >= 0x41)
        {
          v33 = (char *)operator new[]();
          memcpy(v33, *(const void **)(v20 + 24), ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
          v34 = 0;
          v35 = 0;
          v36 = *(_QWORD *)(*(_QWORD *)(v15 + 144) + 24);
          v37 = (unint64_t)(v29 + 63) >> 6;
          do
          {
            v38 = *(_QWORD *)&v33[v34];
            v39 = *(_QWORD *)(v36 + v34);
            v40 = v38 - v39;
            v41 = v38 < v39;
            v42 = v38 + ~v39;
            v43 = v42 >= v38;
            if (v35)
            {
              v35 = v43;
            }
            else
            {
              v42 = v40;
              v35 = v41;
            }
            *(_QWORD *)&v33[v34] = v42;
            v34 += 8;
          }
          while (8 * v37 != v34);
          *(_QWORD *)&v33[8 * (v37 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
          MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
          v4 = v46;
        }
        else
        {
          v30 = *(_QWORD *)(v20 + 24) - v19[3];
          v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
          if (!(_DWORD)v29)
            v31 = 0;
          v32 = (uint64_t)((v31 & v30) << -(char)v29) >> -(char)v29;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)this + 248))(**(_QWORD **)this, v32) & 1) != 0
            && (!v28
             || ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)this + 264))(**(_QWORD **)this, v28, 0, v32, 1, 0, 0, 0) & 1) != 0))
          {
            goto LABEL_38;
          }
        }
      }
      llvm::ConstantHoistingPass::findAndMakeBaseConstant((_QWORD **)this, v15, (uint64_t)v17, (uint64_t)v4);
      v15 = (uint64_t)v17;
LABEL_38:
      v16 = (uint64_t)(v17 + 21);
      if (v17 + 21 == (_QWORD *)v14)
      {
        v14 = v45[1];
        return llvm::ConstantHoistingPass::findAndMakeBaseConstant((_QWORD **)this, v15, v14, (uint64_t)v4);
      }
    }
  }
  return llvm::ConstantHoistingPass::findAndMakeBaseConstant((_QWORD **)this, v15, v14, (uint64_t)v4);
}

void llvm::ConstantHoistingPass::emitBaseConstants(llvm::ConstantHoistingPass *this, llvm::Value *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  llvm::ValueHandleBase *v7;
  llvm::Value *v8;
  llvm::ConstantHoistingPass *v9;
  uint64_t v10;
  llvm::ConstantInt *v11;
  llvm::Instruction *MatInsertPt;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  llvm::Value *v17;
  llvm::GetElementPtrInst *v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  _DWORD *v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  llvm::Instruction *v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  llvm::Instruction *v43;
  llvm::Instruction *v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Instruction *v47;
  char *AsInstruction;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 **v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ValueSymbolTable *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  llvm::ConstantHoistingPass *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  llvm::ValueHandleBase *v85;
  llvm::Instruction *v86;
  unsigned int v87;
  __int16 v88;
  char v89;

  v7 = a3;
  v8 = a2;
  v9 = this;
  if (!a3 && a4)
  {
    if (*(_QWORD *)a2 == a4)
    {
LABEL_14:
      v31 = 1;
      goto LABEL_24;
    }
    v10 = **((_QWORD **)this + 3);
    v11 = *(llvm::ConstantInt **)(v10 + 1960);
    v87 = *(_DWORD *)(v10 + 1968) >> 8;
    if (v87 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v86, 0, 0);
    else
      v86 = 0;
    v7 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v86, a3);
    if (v87 >= 0x41 && v86)
      MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  }
  if (!v7)
    goto LABEL_14;
  MatInsertPt = llvm::ConstantHoistingPass::findMatInsertPt(v9, *(llvm::Instruction **)a5, *(_DWORD *)(a5 + 8));
  if (a4)
  {
    v13 = llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)v9 + 3) + 1912), (llvm::Type *)(*(_DWORD *)(a4 + 8) >> 8));
    v14 = (char *)operator new(0x60uLL);
    *((_DWORD *)v14 + 13) = *((_DWORD *)v14 + 13) & 0x38000000 | 1;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = v14 + 32;
    v86 = (llvm::Instruction *)"base_bitcast";
    v88 = 259;
    llvm::BitCastInst::BitCastInst((uint64_t)(v14 + 32), (uint64_t)v8, v13, (uint64_t)&v86, (uint64_t)MatInsertPt);
    v81 = v9;
    v15 = **((_QWORD **)v9 + 3);
    v85 = v7;
    v86 = (llvm::Instruction *)"mat_gep";
    v88 = 259;
    v16 = (char *)operator new(0x90uLL);
    *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
    v17 = (llvm::Value *)(v16 + 64);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 64;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 7) = v16 + 64;
    v18 = (llvm::GetElementPtrInst *)(v15 + 1912);
    sub_1C4774650(v18, (uint64_t *)v14 + 4, (llvm::Value *)&v85, 1);
    *((_QWORD *)v16 + 8) = v19;
    *((_QWORD *)v16 + 9) = 0;
    v20 = *((_DWORD *)v16 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v16 + 20) = 62;
    *((_DWORD *)v16 + 21) = v20;
    *(_OWORD *)(v16 + 88) = 0u;
    v21 = v16 + 88;
    *(_OWORD *)(v16 + 104) = 0u;
    *((_DWORD *)v16 + 30) = 0;
    if (MatInsertPt)
    {
      v72 = *((_QWORD *)MatInsertPt + 5);
      v73 = (uint64_t *)((char *)MatInsertPt + 24);
      *((_QWORD *)v16 + 13) = v72;
      *(_WORD *)(v72 + 18) &= ~0x8000u;
      if ((v16[87] & 0x10) != 0)
      {
        v75 = *(_QWORD *)(v72 + 56);
        if (v75)
        {
          v76 = *(llvm::ValueSymbolTable **)(v75 + 104);
          if (v76)
            llvm::ValueSymbolTable::reinsertValue(v76, v17);
        }
      }
      v74 = *v73;
      *((_QWORD *)v16 + 11) = *v73;
      *((_QWORD *)v16 + 12) = v73;
      *(_QWORD *)(v74 + 8) = v21;
      *v73 = (uint64_t)v21;
    }
    v22 = *((_DWORD *)v16 + 21);
    *((_QWORD *)v16 + 16) = v18;
    *((_QWORD *)v16 + 17) = v18;
    v23 = v22 & 0x7FFFFFF;
    v24 = -v23;
    v25 = (_QWORD *)((char *)v17 - 32 * v23);
    if (*v25)
    {
      v77 = (char *)v17 + 32 * v24;
      v79 = (_QWORD *)*((_QWORD *)v77 + 2);
      v78 = v77 + 16;
      *v79 = *(v78 - 1);
      v80 = *(v78 - 1);
      if (v80)
        *(_QWORD *)(v80 + 16) = *v78;
    }
    *v25 = v14 + 32;
    v28 = *((_QWORD *)v14 + 5);
    v27 = v14 + 40;
    v26 = v28;
    v29 = (char *)v17 + 32 * v24;
    *((_QWORD *)v29 + 1) = v28;
    v9 = v81;
    if (v28)
      *(_QWORD *)(v26 + 16) = v29 + 8;
    *((_QWORD *)v29 + 2) = v27;
    *v27 = v25;
    sub_1C5382FD4((uint64_t)&v89, (uint64_t *)&v85, (uint64_t *)&v86, (uint64_t)v17 - 32 * (*((_DWORD *)v16 + 21) & 0x7FFFFFF) + 32);
    llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v86);
    v30 = operator new(0x60uLL);
    v30[13] = v30[13] & 0x38000000 | 1;
    v8 = (llvm::Value *)(v30 + 8);
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = 0;
    *((_QWORD *)v30 + 3) = v30 + 8;
    v86 = (llvm::Instruction *)"mat_bitcast";
    v88 = 259;
    llvm::BitCastInst::BitCastInst((uint64_t)(v30 + 8), (uint64_t)v17, a4, (uint64_t)&v86, (uint64_t)MatInsertPt);
  }
  else
  {
    v86 = (llvm::Instruction *)"const_mat";
    v88 = 259;
    v8 = llvm::BinaryOperator::Create(13, v8, (uint64_t)v7, (uint64_t)&v86, (uint64_t)MatInsertPt);
  }
  v32 = *(unsigned __int8 **)(*(_QWORD *)a5 + 48);
  v84 = v32;
  if (v32)
    llvm::MetadataTracking::track((uint64_t)&v84, v32, 2);
  v33 = (unsigned __int8 **)((char *)v8 + 48);
  if (&v84 == (unsigned __int8 **)((char *)v8 + 48))
  {
    if (v84)
      llvm::MetadataTracking::untrack((uint64_t)&v84, v84);
    goto LABEL_22;
  }
  if (*v33)
    llvm::MetadataTracking::untrack((uint64_t)v8 + 48, *v33);
  v34 = v84;
  *v33 = v84;
  if (!v34)
  {
LABEL_22:
    v31 = 0;
    goto LABEL_24;
  }
  llvm::MetadataTracking::retrack((uint64_t)&v84, v34, (uint64_t)v8 + 48);
  v31 = 0;
  v84 = 0;
LABEL_24:
  v35 = *(llvm::Instruction **)a5;
  v36 = *(unsigned int *)(a5 + 8);
  v37 = *(_DWORD *)(*(_QWORD *)a5 + 20);
  if ((v37 & 0x40000000) != 0)
    v38 = (char *)*((_QWORD *)v35 - 1);
  else
    v38 = (char *)v35 - 32 * (v37 & 0x7FFFFFF);
  v39 = *(_QWORD *)&v38[32 * v36];
  v40 = *(unsigned __int8 *)(v39 + 16);
  if (v40 != 16)
  {
    if (v40 <= 0x1B)
      v43 = 0;
    else
      v43 = (llvm::Instruction *)v39;
    v86 = v43;
    if (v43)
    {
      v60 = (uint64_t *)sub_1C6194570((uint64_t)v9 + 5568, (uint64_t *)&v86);
      if (!*v60)
      {
        llvm::Instruction::clone(v86);
        *v60 = v61;
        v62 = *(_DWORD *)(v61 + 20);
        if ((v62 & 0x40000000) != 0)
          v63 = *(_QWORD *)(v61 - 8);
        else
          v63 = v61 - 32 * (v62 & 0x7FFFFFF);
        if (*(_QWORD *)v63)
        {
          **(_QWORD **)(v63 + 16) = *(_QWORD *)(v63 + 8);
          v64 = *(_QWORD *)(v63 + 8);
          if (v64)
            *(_QWORD *)(v64 + 16) = *(_QWORD *)(v63 + 16);
        }
        *(_QWORD *)v63 = v8;
        if (v8)
        {
          v67 = *((_QWORD *)v8 + 1);
          v66 = (uint64_t *)((char *)v8 + 8);
          v65 = v67;
          *(_QWORD *)(v63 + 8) = v67;
          if (v67)
            *(_QWORD *)(v65 + 16) = v63 + 8;
          *(_QWORD *)(v63 + 16) = v66;
          *v66 = v63;
        }
        sub_1C53DF664((_QWORD *)(*((_QWORD *)v86 + 5) + 40), (uint64_t)v86 + 24, *v60);
        v68 = *v60;
        v69 = (unsigned __int8 *)*((_QWORD *)v86 + 6);
        v83 = v69;
        if (v69)
          llvm::MetadataTracking::track((uint64_t)&v83, v69, 2);
        v70 = (unsigned __int8 **)(v68 + 48);
        if (&v83 == v70)
        {
          if (v83)
            llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
        }
        else
        {
          if (*v70)
            llvm::MetadataTracking::untrack((uint64_t)v70, *v70);
          v71 = v83;
          *v70 = v83;
          if (v71)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v83, v71, (uint64_t)v70);
            v83 = 0;
          }
        }
      }
      v44 = *(llvm::Instruction **)a5;
      v45 = *(_DWORD *)(a5 + 8);
      v46 = *v60;
    }
    else
    {
      if (v40 != 5)
        return;
      if (*(_WORD *)(v39 + 18) != 34)
      {
        v47 = llvm::ConstantHoistingPass::findMatInsertPt(v9, v35, v36);
        AsInstruction = llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v39, v47);
        v49 = (uint64_t)AsInstruction;
        v50 = *((_DWORD *)AsInstruction + 5);
        if ((v50 & 0x40000000) != 0)
          v51 = (char *)*((_QWORD *)AsInstruction - 1);
        else
          v51 = &AsInstruction[-32 * (v50 & 0x7FFFFFF)];
        if (*(_QWORD *)v51)
        {
          **((_QWORD **)v51 + 2) = *((_QWORD *)v51 + 1);
          v52 = *((_QWORD *)v51 + 1);
          if (v52)
            *(_QWORD *)(v52 + 16) = *((_QWORD *)v51 + 2);
        }
        *(_QWORD *)v51 = v8;
        if (v8)
        {
          v53 = (char **)((char *)v8 + 8);
          v54 = *((_QWORD *)v8 + 1);
          *((_QWORD *)v51 + 1) = v54;
          if (v54)
            *(_QWORD *)(v54 + 16) = v51 + 8;
          *((_QWORD *)v51 + 2) = v53;
          *v53 = v51;
        }
        v55 = *(unsigned __int8 **)(*(_QWORD *)a5 + 48);
        v82 = v55;
        if (v55)
          llvm::MetadataTracking::track((uint64_t)&v82, v55, 2);
        v56 = (unsigned __int8 **)(v49 + 48);
        if (&v82 == (unsigned __int8 **)(v49 + 48))
        {
          if (v82)
            llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
        }
        else
        {
          if (*v56)
            llvm::MetadataTracking::untrack(v49 + 48, *v56);
          v57 = v82;
          *v56 = v82;
          if (v57)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v82, v57, v49 + 48);
            v82 = 0;
          }
        }
        if ((sub_1C5AD0330(*(_QWORD *)a5, *(_DWORD *)(a5 + 8), v49) & 1) == 0)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v49 + 40) + 40, (uint64_t ***)v49);
          v58 = *(_QWORD *)(v49 + 24);
          v59 = *(_QWORD **)(v49 + 32);
          *v59 = v58;
          *(_QWORD *)(v58 + 8) = v59;
          *(_QWORD *)(v49 + 24) = 0;
          *(_QWORD *)(v49 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v49);
          if ((v31 & 1) == 0)
            goto LABEL_29;
        }
        return;
      }
      v44 = v35;
      v45 = v36;
      v46 = (uint64_t)v8;
    }
    sub_1C5AD0330((uint64_t)v44, v45, v46);
    return;
  }
  if (((v31 | sub_1C5AD0330(*(_QWORD *)a5, *(_DWORD *)(a5 + 8), (uint64_t)v8)) & 1) == 0)
  {
LABEL_29:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v8 + 5) + 40, (uint64_t ***)v8);
    v41 = *((_QWORD *)v8 + 3);
    v42 = (_QWORD *)*((_QWORD *)v8 + 4);
    *v42 = v41;
    *(_QWORD *)(v41 + 8) = v42;
    *((_QWORD *)v8 + 3) = 0;
    *((_QWORD *)v8 + 4) = 0;
    llvm::Value::deleteValue(v8);
  }
}

uint64_t sub_1C5AD0330(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_DWORD *)(a1 + 20);
  if (!a1 || *(_BYTE *)(a1 + 16) != 83)
    goto LABEL_13;
  if ((v3 & 0x40000000) == 0)
  {
    v4 = a1 - 32 * (v3 & 0x7FFFFFF);
    if (!a2)
      goto LABEL_13;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(a1 - 8);
  if (!a2)
  {
LABEL_13:
    if ((v3 & 0x40000000) != 0)
      v9 = *(_QWORD *)(a1 - 8);
    else
      v9 = a1 - 32 * (v3 & 0x7FFFFFF);
    v10 = v9 + 32 * a2;
    if (*(_QWORD *)v10)
    {
      **(_QWORD **)(v10 + 16) = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
    }
    *(_QWORD *)v10 = a3;
    if (a3)
    {
      v14 = *(_QWORD *)(a3 + 8);
      v12 = (_QWORD *)(a3 + 8);
      v13 = v14;
      v15 = v9 + 32 * a2;
      *(_QWORD *)(v15 + 8) = v14;
      if (v14)
        *(_QWORD *)(v13 + 16) = v15 + 8;
      *(_QWORD *)(v15 + 16) = v12;
      *v12 = v10;
    }
    return 1;
  }
LABEL_7:
  v5 = 0;
  v6 = *(unsigned int *)(a1 + 60);
  v7 = *(_QWORD *)(v4 + 32 * v6 + 8 * a2);
  v8 = 32 * v6;
  while ((v3 & 0x40000000) != 0)
  {
    v17 = *(_QWORD *)(a1 - 8);
    if (*(_QWORD *)(v17 + v8) == v7)
      goto LABEL_23;
LABEL_12:
    v5 += 32;
    v8 += 8;
    if (32 * a2 == v5)
      goto LABEL_13;
  }
  if (*(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) + v8) != v7)
    goto LABEL_12;
  v17 = a1 - 32 * (v3 & 0x7FFFFFF);
LABEL_23:
  v18 = *(_QWORD *)(v17 + v5);
  v19 = v17 + 32 * a2;
  if (*(_QWORD *)v19)
  {
    **(_QWORD **)(v19 + 16) = *(_QWORD *)(v19 + 8);
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
  }
  *(_QWORD *)v19 = v18;
  if (!v18)
    return 0;
  v23 = *(_QWORD *)(v18 + 8);
  v21 = (_QWORD *)(v18 + 8);
  v22 = v23;
  v24 = v17 + 32 * a2;
  *(_QWORD *)(v24 + 8) = v23;
  if (v23)
    *(_QWORD *)(v22 + 16) = v24 + 8;
  result = 0;
  *(_QWORD *)(v24 + 16) = v21;
  *v21 = v19;
  return result;
}

uint64_t llvm::ConstantHoistingPass::emitBaseConstants(llvm::ConstantHoistingPass *this, llvm::GlobalVariable *a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *MatInsertPt;
  char *v18;
  _OWORD *v19;
  char *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  llvm::DILocation **v26;
  uint64_t *v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  char *v33;
  char *v34;
  const llvm::APInt *v35;
  uint64_t v36;
  const llvm::DILocation *v37;
  unsigned __int8 *MergedLocation;
  unsigned __int8 *v39;
  int64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  _OWORD v46[2];
  __int16 v47;
  _QWORD v48[3];
  uint64_t *v49;
  uint64_t *v50;
  llvm::GlobalVariable *v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[18];

  v54[16] = *MEMORY[0x1E0C80C00];
  v51 = a2;
  if (a2)
    v5 = (char *)sub_1C6310D48((uint64_t)this + 5520, (uint64_t)&v51, a3, a4);
  else
    v5 = (char *)this + 128;
  v6 = *((_DWORD *)v5 + 2);
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)v5;
    v42 = *(_QWORD *)v5 + 672 * v6;
    do
    {
      llvm::ConstantHoistingPass::findConstantInsertionPoint(this, v8, (uint64_t)v48);
      v9 = v49;
      v43 = v50;
      if (v49 != v50)
      {
        do
        {
          v10 = *v9;
          v52 = v54;
          v53 = 0x400000000;
          v11 = *(_DWORD *)(v8 + 24);
          if (v11)
          {
            v12 = *(uint64_t **)(v8 + 16);
            v13 = &v12[20 * v11];
            do
            {
              v14 = *((unsigned int *)v12 + 2);
              if ((_DWORD)v14)
              {
                v15 = *v12;
                v16 = 16 * v14;
                do
                {
                  MatInsertPt = llvm::ConstantHoistingPass::findMatInsertPt(this, *(llvm::Instruction **)v15, *(_DWORD *)(v15 + 8));
                  if ((char *)v50 - (char *)v49 == 8
                    || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 1), *(_QWORD *)(v10 + 40), *((_QWORD *)MatInsertPt + 5)))
                  {
                    v46[0] = *((_OWORD *)v12 + 9);
                    v46[1] = *(_OWORD *)v15;
                    v18 = (char *)v52;
                    if (v53 >= HIDWORD(v53))
                    {
                      v22 = v53 + 1;
                      if (v52 <= v46 && (char *)v52 + 32 * v53 > (char *)v46)
                      {
                        v41 = (char *)v46 - (_BYTE *)v52;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v22, 32);
                        v18 = (char *)v52;
                        v19 = (char *)v52 + v41;
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v22, 32);
                        v19 = v46;
                        v18 = (char *)v52;
                      }
                    }
                    else
                    {
                      v19 = v46;
                    }
                    v20 = &v18[32 * v53];
                    v21 = v19[1];
                    *(_OWORD *)v20 = *v19;
                    *((_OWORD *)v20 + 1) = v21;
                    LODWORD(v53) = v53 + 1;
                  }
                  v15 += 16;
                  v16 -= 16;
                }
                while (v16);
              }
              v12 += 20;
            }
            while (v12 != v13);
            v11 = v53;
          }
          if (v11 >= dword_1ED81BA88)
          {
            v23 = *(uint64_t **)(v8 + 8);
            if (v23)
            {
              v24 = *v23;
              v25 = (char *)operator new(0x60uLL);
              v26 = (llvm::DILocation **)(v25 + 32);
              *((_DWORD *)v25 + 13) = *((_DWORD *)v25 + 13) & 0x38000000 | 1;
              *(_QWORD *)v25 = 0;
              *((_QWORD *)v25 + 1) = 0;
              *((_QWORD *)v25 + 2) = 0;
              *((_QWORD *)v25 + 3) = v25 + 32;
              v27 = *(uint64_t **)(v8 + 8);
            }
            else
            {
              v24 = **(_QWORD **)v8;
              v28 = (char *)operator new(0x60uLL);
              v26 = (llvm::DILocation **)(v28 + 32);
              *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
              *(_QWORD *)v28 = 0;
              *((_QWORD *)v28 + 1) = 0;
              *((_QWORD *)v28 + 2) = 0;
              *((_QWORD *)v28 + 3) = v28 + 32;
              v27 = *(uint64_t **)v8;
            }
            *(_QWORD *)&v46[0] = "const";
            v47 = 259;
            llvm::BitCastInst::BitCastInst((uint64_t)v26, (uint64_t)v27, v24, (uint64_t)v46, v10);
            v29 = *(unsigned __int8 **)(v10 + 48);
            v45 = v29;
            if (v29)
              llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
            v31 = (unsigned __int8 **)(v26 + 6);
            v30 = (unsigned __int8 *)v26[6];
            if (v30)
              llvm::MetadataTracking::untrack((uint64_t)(v26 + 6), v30);
            v32 = v45;
            *v31 = v45;
            if (v32)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v45, v32, (uint64_t)(v26 + 6));
              v45 = 0;
            }
            if ((_DWORD)v53)
            {
              v33 = (char *)v52;
              v34 = (char *)v52 + 32 * v53;
              do
              {
                v35 = *(const llvm::APInt **)v33;
                v36 = *((_QWORD *)v33 + 1);
                v46[0] = *((_OWORD *)v33 + 1);
                llvm::ConstantHoistingPass::emitBaseConstants(this, (llvm::Value *)v26, v35, v36, (uint64_t)v46);
                MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(v26[6], *(const llvm::DILocation **)(*(_QWORD *)&v46[0] + 48), v37);
                v44 = MergedLocation;
                if (MergedLocation)
                  llvm::MetadataTracking::track((uint64_t)&v44, MergedLocation, 2);
                if (*v31)
                  llvm::MetadataTracking::untrack((uint64_t)(v26 + 6), *v31);
                v39 = v44;
                *v31 = v44;
                if (v39)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v44, v39, (uint64_t)(v26 + 6));
                  v44 = 0;
                }
                v33 += 32;
              }
              while (v33 != v34);
            }
          }
          if (v52 != v54)
            free(v52);
          ++v9;
        }
        while (v9 != v43);
        v7 = 1;
      }
      sub_1C6176BF8(v48);
      v8 += 672;
    }
    while (v8 != v42);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

void llvm::ConstantHoistingPass::deleteDeadCastInst(llvm::ConstantHoistingPass *this)
{
  uint64_t ****v1;
  uint64_t ****v2;
  uint64_t ***v3;
  uint64_t **v4;
  uint64_t **v5;

  v1 = (uint64_t ****)*((_QWORD *)this + 699);
  v2 = (uint64_t ****)*((_QWORD *)this + 700);
  while (v1 != v2)
  {
    v3 = *v1;
    if (!(*v1)[1])
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v3[5] + 5), *v1);
      v4 = v3[3];
      v5 = v3[4];
      *v5 = (uint64_t *)v4;
      v4[1] = (uint64_t *)v5;
      v3[3] = 0;
      v3[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v3);
    }
    v1 += 2;
  }
}

void *sub_1C5AD08EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t i;
  void **v51;
  void **v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[674];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v55[672] = *MEMORY[0x1E0C80C00];
  sub_1C4D8D8A8((_DWORD *)(v4 + 5568));
  *(_QWORD *)(v4 + 5600) = *(_QWORD *)(v4 + 5592);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = *(_QWORD *)(v4 + 64);
  while (v6 != v5)
  {
    v8 = *(void **)(v6 - 168);
    v6 -= 168;
    v7 = v8;
    if ((void *)(v6 + 16) != v8)
      free(v7);
  }
  *(_QWORD *)(v4 + 64) = v5;
  v9 = *(_QWORD *)(v4 + 104);
  v10 = *(_QWORD *)(v4 + 112);
  for (i = v4; v9 != v10; v9 += 32)
  {
    v52 = *(void ***)v9;
    v54 = 0;
    v55[0] = 0;
    v53 = 0;
    v12 = *(_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
    v13 = v11 - v12;
    if (v11 == v12)
    {
      v20 = 0;
    }
    else
    {
      v14 = 0xCF3CF3CF3CF3CF3DLL * (v13 >> 3);
      if (v14 >= 0x186186186186187)
        abort();
      v15 = (char *)operator new(v13);
      v16 = 0;
      v53 = v15;
      v54 = (uint64_t)v15;
      v55[0] = &v15[168 * v14];
      do
      {
        v17 = v12 + v16;
        v18 = (uint64_t)&v15[v16];
        *(_QWORD *)v18 = &v15[v16 + 16];
        *(_QWORD *)(v18 + 8) = 0x800000000;
        if (*(_DWORD *)(v12 + v16 + 8))
          v18 = sub_1C6273000(v18, v12 + v16);
        v19 = *(_OWORD *)(v17 + 144);
        *(_DWORD *)(v18 + 160) = *(_DWORD *)(v17 + 160);
        *(_OWORD *)(v18 + 144) = v19;
        v16 += 168;
      }
      while (v12 + v16 != v11);
      v20 = (char *)v53;
      v21 = &v15[v16];
      v54 = (uint64_t)v21;
      while (v21 != v20)
      {
        v23 = (char *)*((_QWORD *)v21 - 21);
        v21 -= 168;
        v22 = v23;
        if (v21 + 16 != v23)
          free(v22);
      }
    }
    v54 = (uint64_t)v20;
    v51 = &v53;
    sub_1C5A554E4(&v51);
  }
  v24 = i;
  sub_1C6125098((_DWORD *)(i + 80));
  v26 = *(_QWORD *)(i + 104);
  v25 = *(_QWORD *)(i + 112);
  if (v25 != v26)
  {
    do
    {
      v27 = v25 - 32;
      v52 = (void **)(v25 - 24);
      sub_1C5A554E4(&v52);
      v25 = v27;
    }
    while (v27 != v26);
  }
  *(_QWORD *)(i + 112) = v26;
  v28 = *(_DWORD *)(v24 + 136);
  if (v28)
  {
    v29 = *(_QWORD *)(v24 + 128) - 656;
    v30 = 672 * v28;
    do
    {
      sub_1C62EA6E8((char **)(v29 + v30));
      v30 -= 672;
    }
    while (v30);
  }
  *(_DWORD *)(v24 + 136) = 0;
  v49 = (_DWORD *)(v24 + 5520);
  v31 = *(_QWORD *)(v24 + 5544);
  v32 = *(_QWORD *)(v24 + 5552);
  if (v31 != v32)
  {
    while (1)
    {
      v52 = *(void ***)v31;
      v53 = v55;
      v54 = 0x800000000;
      v38 = *(_DWORD *)(v31 + 16);
      if (v38 && &v52 != (void ***)v31)
        break;
LABEL_42:
      v31 += 5400;
      if (v31 == v32)
        goto LABEL_24;
    }
    if (v38 > 8)
    {
      sub_1C62F4484((uint64_t)&v53, *(unsigned int *)(v31 + 16));
      v48 = *(_DWORD *)(v31 + 16);
      v42 = v53;
      if (!v48)
      {
LABEL_38:
        LODWORD(v54) = v38;
        v46 = v42 - 82;
        v47 = 84 * v38;
        do
        {
          sub_1C62EA6E8((char **)&v46[v47]);
          v47 -= 84;
        }
        while (v47 * 8);
        LODWORD(v54) = 0;
        if (v53 != v55)
          free(v53);
        goto LABEL_42;
      }
      v40 = *(_QWORD *)(v31 + 8);
      v41 = v40 + 672 * v48;
    }
    else
    {
      v40 = *(_QWORD *)(v31 + 8);
      v41 = v40 + 672 * v38;
      v42 = v55;
    }
    v43 = v42 + 2;
    v44 = v40 + 16;
    do
    {
      *((_OWORD *)v43 - 1) = *(_OWORD *)(v44 - 16);
      *v43 = v43 + 2;
      v43[1] = 0x400000000;
      if (*(_DWORD *)(v44 + 8))
        v43 = (_QWORD *)sub_1C5AD1330((uint64_t)v43, v44);
      v45 = v44 - 16;
      v43 += 84;
      v44 += 672;
    }
    while (v45 + 672 != v41);
    v42 = v53;
    goto LABEL_38;
  }
LABEL_24:
  result = sub_1C6125098(v49);
  v34 = i;
  v35 = *(_QWORD *)(i + 5552);
  v36 = *(_QWORD *)(i + 5544);
  if (v35 != v36)
  {
    do
    {
      v37 = v35 - 5400;
      result = sub_1C62EA684((char **)(v35 - 5392));
      v35 = v37;
    }
    while (v37 != v36);
  }
  *(_QWORD *)(v34 + 5552) = v36;
  return result;
}

void llvm::ConstantHoistingPass::run(llvm::ConstantHoistingPass *a1, uint64_t a2, uint64_t a3)
{
  llvm::DominatorTree *v6;
  llvm::TargetTransformInfo *v7;
  llvm::BlockFrequencyInfo *v8;
  uint64_t ResultImpl;
  llvm::ProfileSummaryInfo *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;

  v6 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2)+ 8);
  v7 = (llvm::TargetTransformInfo *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, a2)+ 8);
  if (byte_1ED81B908)
    v8 = (llvm::BlockFrequencyInfo *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, a2)+ 8);
  else
    v8 = 0;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a2);
  v10 = (llvm::ProfileSummaryInfo *)sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(a2 + 40));
  v11 = *(_QWORD *)(a2 + 80);
  if (v11)
    v12 = (llvm::BasicBlock *)(v11 - 24);
  else
    v12 = 0;
  llvm::ConstantHoistingPass::runImpl(a1, (llvm::Module **)a2, v7, v6, v8, v12, v10);
}

_QWORD *sub_1C5AD0D70(char a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  *(_QWORD *)v18 = v18 + 32;
  *(_QWORD *)(v18 + 8) = v18 + 32;
  *(_QWORD *)(v18 + 16) = 2;
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 48) = v18 + 80;
  *(_QWORD *)(v18 + 56) = v18 + 80;
  *(_QWORD *)(v18 + 64) = 2;
  *(_DWORD *)(v18 + 72) = 0;
  if ((a1 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)v18, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)v18, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5AD0DE4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5ACE028(v0);
}

void sub_1C5AD0E0C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8194008;
  sub_1C62EA5E0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C5AD0E3C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8194008;
  sub_1C62EA5E0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5AD0E80()
{
  return "Constant Hoisting";
}

void *sub_1C5AD0E90(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  if (byte_1ED81B908)
    sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

uint64_t sub_1C5AD0F0C(_QWORD **a1, uint64_t a2)
{
  llvm::TargetTransformInfo *v2;
  uint64_t *v3;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  llvm::ConstantHoistingPass *v16;
  llvm::DominatorTree *v17;
  llvm::BlockFrequencyInfo *v18;
  void **v19;
  void *v20;
  uint64_t v21;
  char **v22;
  char *v23;
  llvm::BasicBlock *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (const llvm::Function *)a2) & 1) == 0)
  {
    v7 = (char **)*a1[1];
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != llvm::TargetTransformInfoWrapperPass::ID);
    v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
    v29[0] = 0;
    v29[1] = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v10 = *(_QWORD *)(v9 + 56);
    if (v10)
    {
      v3 = v29;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(&v26, v10, a2);
      v2 = (llvm::TargetTransformInfo *)(v9 + 64);
      v11 = v26;
      if (!*(_BYTE *)(v9 + 72))
      {
        *(_QWORD *)(v9 + 64) = v26;
        *(_BYTE *)(v9 + 72) = 1;
        goto LABEL_9;
      }
      v26 = 0;
      v12 = *(_QWORD *)v2;
      *(_QWORD *)v2 = v11;
      if (!v12 || ((*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12), v13 = v26, v26 = 0, !v13))
      {
LABEL_9:
        MEMORY[0x1CAA32FB4](0, 8);
        sub_1C4D8B440(v3);
        sub_1C4D8B52C(v27);
        v14 = (void **)*a1[1];
        do
        {
          v15 = *v14;
          v14 += 2;
        }
        while (v15 != &llvm::DominatorTreeWrapperPass::ID);
        v16 = (llvm::ConstantHoistingPass *)(a1 + 4);
        v17 = (llvm::DominatorTree *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32);
        if (byte_1ED81B908)
        {
          v19 = (void **)*a1[1];
          do
          {
            v20 = *v19;
            v19 += 2;
          }
          while (v20 != &llvm::BlockFrequencyInfoWrapperPass::ID);
          v18 = (llvm::BlockFrequencyInfo *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
        }
        else
        {
          v18 = 0;
        }
        v21 = *(_QWORD *)(a2 + 80);
        v22 = (char **)*a1[1];
        do
        {
          v23 = *v22;
          v22 += 2;
        }
        while (v23 != llvm::ProfileSummaryInfoWrapperPass::ID);
        if (v21)
          v24 = (llvm::BasicBlock *)(v21 - 24);
        else
          v24 = 0;
        v25 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::ProfileSummaryInfoWrapperPass::ID);
        llvm::ConstantHoistingPass::runImpl(v16, (llvm::Module **)a2, v2, v17, v18, v24, *(llvm::ProfileSummaryInfo **)(v25 + 32));
      }
    }
    else
    {
      sub_1C485C2F0();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_9;
  }
  return 0;
}

void sub_1C5AD113C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[31];

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      sub_1C6187FB8((_DWORD *)a1, v4, (uint64_t)v17);
      if (v17[16])
      {
        v7 = *(_QWORD **)(a1 + 32);
        v6 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v7 >= v6)
        {
          v9 = *(_QWORD **)(a1 + 24);
          v10 = v7 - v9;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            abort();
          v12 = v6 - (_QWORD)v9;
          if (v12 >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            if (v13 >> 61)
              sub_1C4764EE4();
            v14 = (char *)operator new(8 * v13);
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = *v4;
          v8 = v15 + 8;
          if (v7 != v9)
          {
            do
            {
              v16 = *--v7;
              *((_QWORD *)v15 - 1) = v16;
              v15 -= 8;
            }
            while (v7 != v9);
            v7 = *(_QWORD **)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v15;
          *(_QWORD *)(a1 + 32) = v8;
          *(_QWORD *)(a1 + 40) = &v14[8 * v13];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = *v4;
          v8 = v7 + 1;
        }
        *(_QWORD *)(a1 + 32) = v8;
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C5AD1278(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6311068((_QWORD *)a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    do
    {
      *result = -4096;
      result += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5AD1330(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v10 = *(_QWORD *)a2;
        v11 = *(_QWORD *)a1;
        v12 = 160 * v4;
        do
        {
          sub_1C6273000(v11, v10);
          *(_OWORD *)(v11 + 144) = *(_OWORD *)(v10 + 144);
          v10 += 160;
          v11 += 160;
          v12 -= 160;
        }
        while (v12);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v13 = *(_QWORD *)a1;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v11 = *(_QWORD *)a1;
      }
      v14 = v13 + 160 * v5;
      while (v14 != v11)
      {
        v16 = *(void **)(v14 - 160);
        v14 -= 160;
        v15 = v16;
        if ((void *)(v14 + 16) != v16)
          free(v15);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD *)a1;
        v18 = 160 * v5;
        do
        {
          v19 = *(void **)(v17 + v18 - 160);
          if ((void *)(v17 + v18 - 144) != v19)
            free(v19);
          v18 -= 160;
        }
        while (v18);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C62F457C(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = 160 * v5;
      do
      {
        v9 = sub_1C6273000(v7, v6);
        *(_OWORD *)(v9 + 144) = *(_OWORD *)(v6 + 144);
        v6 += 160;
        v7 = v9 + 160;
        v8 -= 160;
      }
      while (v8);
LABEL_24:
      v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)a1;
        v24 = 160 * v5;
        v25 = 160 * v20;
        do
        {
          v26 = v23 + v24;
          v27 = v22 + v24;
          *(_QWORD *)v26 = v23 + v24 + 16;
          *(_QWORD *)(v26 + 8) = 0x800000000;
          if (*(_DWORD *)(v22 + v24 + 8))
            v26 = sub_1C6273000(v26, v22 + v24);
          v22 += 160;
          *(_OWORD *)(v26 + 144) = *(_OWORD *)(v27 + 144);
          v23 += 160;
          v25 -= 160;
        }
        while (v24 != v25);
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

uint64_t sub_1C5AD1500(int32x2_t *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v2 = (_QWORD *)(*(_QWORD *)&a1[4] - 8);
  v4 = 0;
  result = sub_1C4A06ED8((uint64_t)a1, v2, &v4);
  if ((_DWORD)result)
  {
    *v4 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_QWORD *)&a1[4] -= 8;
  return result;
}

uint64_t *sub_1C5AD1568(uint64_t *result, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = v8 - 1;
    v11 = (37 * *a3) & (v8 - 1);
    v12 = *(_QWORD *)a2 + 16 * v11;
    v13 = *(_QWORD *)v12;
    if (*a3 == *(_QWORD *)v12)
    {
LABEL_3:
      v14 = 0;
      goto LABEL_10;
    }
    v16 = 0;
    v17 = 1;
    while (v13 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v16 = v12;
      v19 = v11 + v17++;
      v11 = v19 & v10;
      v12 = v9 + 16 * (v19 & v10);
      v13 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_3;
    }
    if (v16)
      v12 = v16;
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v8)
  {
    result = sub_1C5282980((uint64_t *)a2, 2 * v8);
    v20 = *(_DWORD *)(a2 + 16);
    if (v20)
    {
      v21 = v20 - 1;
      v22 = (37 * *a3) & (v20 - 1);
      v12 = *(_QWORD *)a2 + 16 * v22;
      v23 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v25 = 1;
      while (v23 != -4096)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8192;
        if (v26)
          v24 = v12;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        v12 = *(_QWORD *)a2 + 16 * (v27 & v21);
        v23 = *(_QWORD *)v12;
        if (*a3 == *(_QWORD *)v12)
          goto LABEL_7;
      }
LABEL_46:
      if (v24)
        v12 = v24;
      goto LABEL_7;
    }
LABEL_45:
    v12 = 0;
    goto LABEL_7;
  }
  if (v8 + ~v15 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    result = sub_1C5282980((uint64_t *)a2, v8);
    v28 = *(_DWORD *)(a2 + 16);
    if (v28)
    {
      v29 = v28 - 1;
      v30 = (37 * *a3) & (v28 - 1);
      v12 = *(_QWORD *)a2 + 16 * v30;
      v31 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v32 = 1;
      while (v31 != -4096)
      {
        if (v24)
          v33 = 0;
        else
          v33 = v31 == -8192;
        if (v33)
          v24 = v12;
        v34 = v30 + v32++;
        v30 = v34 & v29;
        v12 = *(_QWORD *)a2 + 16 * (v34 & v29);
        v31 = *(_QWORD *)v12;
        if (*a3 == *(_QWORD *)v12)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v12 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v12 = *a3;
  *(_DWORD *)(v12 + 8) = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_10:
  *v7 = v12;
  v7[1] = v9 + 16 * v8;
  *((_BYTE *)v7 + 16) = v14;
  return result;
}

uint64_t sub_1C5AD17A4(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v2 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x186186186186186)
    abort();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x186186186186186)
      sub_1C4764EE4();
    v7 = (char *)operator new(168 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[168 * v2];
  __p = v7;
  v17 = v8;
  v19 = &v7[168 * v6];
  *(_QWORD *)v8 = v8 + 16;
  *((_QWORD *)v8 + 1) = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C62F45E8((uint64_t)&v7[168 * v2], a2);
  v9 = &v7[168 * v2];
  *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 144);
  *((_DWORD *)v9 + 40) = *(_DWORD *)(a2 + 160);
  v18 = v8 + 168;
  sub_1C6311268(a1, &__p);
  v10 = a1[1];
  v11 = v17;
  v12 = v18;
  while (v12 != v11)
  {
    v14 = (char *)*((_QWORD *)v12 - 21);
    v12 -= 168;
    v13 = v14;
    if (v12 + 16 != v14)
      free(v13);
  }
  if (__p)
    operator delete(__p);
  return v10;
}

unint64_t sub_1C5AD1920(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 160 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C62F457C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C62F457C(a1, v5);
    }
  }
  return a2;
}

unint64_t sub_1C5AD1988(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 672 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C62F4484(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C62F4484(a1, v5);
    }
  }
  return a2;
}

void sub_1C5AD19F0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char **v14;
  char *v15;
  char **v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x54F43E32D21C10BLL * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0xC22E450672894)
      abort();
    v8 = 0x54F43E32D21C10BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x611722833944ALL)
      v10 = 0xC22E450672894;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0xC22E450672894)
      sub_1C4764EE4();
    v11 = 5400 * v10;
    v12 = (char *)operator new(5400 * v10);
    v13 = &v12[5400 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C5A5B74C((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 5400;
    sub_1C63113E0(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v15 = v18;
    v14 = (char **)v19;
    if (v19 != v18)
    {
      do
      {
        v16 = v14 - 675;
        sub_1C62EA684(v14 - 674);
        v14 = v16;
      }
      while (v16 != (char **)v15);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C5A5B74C((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 675;
  }
  a1[1] = (uint64_t)v6;
}

void sub_1C5AD1BA0(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[128];
  __int128 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    v8 = a2 - 24;
    v7 = *(_QWORD *)(a2 - 24);
    v10 = (__int128 *)(a1 + 144);
    v9 = *(_QWORD **)(a1 + 144);
    if (*(_QWORD *)v7 == *v9)
    {
      v17 = *(unsigned int *)(v7 + 32);
      if (v17 > 0x40)
      {
        v70 = *(_QWORD *)(v7 + 24);
        v71 = v9[3] - 8;
        v72 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
        v73 = v70 - 8;
        while (v72)
        {
          v74 = *(_QWORD *)(v73 + v72);
          v75 = *(_QWORD *)(v71 + v72);
          v72 -= 8;
          if (v74 != v75)
          {
            if (v74 <= v75)
              goto LABEL_11;
            return;
          }
        }
        return;
      }
      if (*(_QWORD *)(v7 + 24) >= v9[3])
        return;
    }
    else if (*(_DWORD *)(*(_QWORD *)v7 + 8) >> 8 >= *(_DWORD *)(*v9 + 8) >> 8)
    {
      return;
    }
LABEL_11:
    v76 = v78;
    v77 = 0x800000000;
    if (*(_DWORD *)(a1 + 8))
      sub_1C62F45E8((uint64_t)&v76, a1);
    v18 = *v10;
    v80 = *(_DWORD *)(v6 + 160);
    v79 = v18;
    sub_1C62F45E8(v6, v8 - 144);
    v19 = *(_DWORD *)(v8 + 16);
    *v10 = *(_OWORD *)v8;
    *(_DWORD *)(v6 + 160) = v19;
    sub_1C62F45E8(v8 - 144, (uint64_t)&v76);
    v20 = v79;
    *(_DWORD *)(v8 + 16) = v80;
    *(_OWORD *)v8 = v20;
    if (v76 != v78)
      free(v76);
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return;
    v21 = a1 + 168;
    if (a1 + 168 == a2)
      return;
    v22 = a1;
    while (1)
    {
      v23 = v22;
      v22 = v21;
      v25 = v23 + 144;
      v24 = *(_QWORD **)(v23 + 144);
      v26 = *(_QWORD *)(v23 + 312);
      if (*(_QWORD *)v26 != *v24)
        break;
      v27 = *(unsigned int *)(v26 + 32);
      if (v27 <= 0x40)
      {
        if (*(_QWORD *)(v26 + 24) >= v24[3])
          goto LABEL_41;
LABEL_23:
        v76 = v78;
        v77 = 0x800000000;
        if (*(_DWORD *)(v23 + 176))
          sub_1C62F45E8((uint64_t)&v76, v22);
        v79 = *(_OWORD *)(v23 + 312);
        v80 = *(_DWORD *)(v23 + 328);
        sub_1C62F45E8(v22, v23);
        v28 = *(_DWORD *)(v23 + 160);
        *(_OWORD *)(v22 + 144) = *(_OWORD *)v25;
        for (*(_DWORD *)(v22 + 160) = v28; v23 != v6; v23 -= 168)
        {
          v29 = v25;
          v25 = v23 - 24;
          v30 = *(_QWORD **)(v23 - 24);
          if (*(_QWORD *)v79 == *v30)
          {
            v31 = *(unsigned int *)(v79 + 32);
            if (v31 > 0x40)
            {
              v32 = v30[3] - 8;
              v33 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v33)
                  goto LABEL_38;
                v34 = *(_QWORD *)(*(_QWORD *)(v79 + 24) - 8 + v33);
                v35 = *(_QWORD *)(v32 + v33);
                v33 -= 8;
              }
              while (v34 == v35);
              if (v34 > v35)
              {
LABEL_38:
                v25 = v29;
                goto LABEL_39;
              }
            }
            else if (*(_QWORD *)(v79 + 24) >= v30[3])
            {
              goto LABEL_38;
            }
          }
          else if (*(_DWORD *)(*(_QWORD *)v79 + 8) >> 8 >= *(_DWORD *)(*v30 + 8) >> 8)
          {
            goto LABEL_38;
          }
          sub_1C62F45E8(v23, v23 - 168);
          *(_OWORD *)(v23 + 144) = *(_OWORD *)v25;
          *(_DWORD *)(v23 + 160) = *(_DWORD *)(v23 - 8);
        }
        v23 = v6;
LABEL_39:
        sub_1C62F45E8(v23, (uint64_t)&v76);
        v36 = v79;
        *(_DWORD *)(v25 + 16) = v80;
        *(_OWORD *)v25 = v36;
        if (v76 != v78)
          free(v76);
        goto LABEL_41;
      }
      v37 = *(_QWORD *)(v26 + 24);
      v38 = v24[3] - 8;
      v39 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
      v40 = v37 - 8;
      do
      {
        if (!v39)
          goto LABEL_41;
        v41 = *(_QWORD *)(v40 + v39);
        v42 = *(_QWORD *)(v38 + v39);
        v39 -= 8;
      }
      while (v41 == v42);
      if (v41 <= v42)
        goto LABEL_23;
LABEL_41:
      v21 = v22 + 168;
      if (v22 + 168 == a2)
        return;
    }
    if (*(_DWORD *)(*(_QWORD *)v26 + 8) >> 8 >= *(_DWORD *)(*v24 + 8) >> 8)
      goto LABEL_41;
    goto LABEL_23;
  }
  v13 = a4;
  v14 = a3 >> 1;
  v15 = a1 + 168 * (a3 >> 1);
  v16 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_1C5AD1BA0(a1, v15, v16, a4, a5);
    sub_1C5AD1BA0(v6 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), v13, a5);
    sub_1C5AD2844(v6, v6 + 168 * (a3 >> 1), a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
    return;
  }
  sub_1C5AD21C4(a1, v15, v16, a4);
  v43 = &v13[21 * v14];
  sub_1C5AD21C4(v6 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), v43);
  v44 = &v13[21 * a3];
  v45 = (uint64_t)v43;
  v46 = (uint64_t)v13;
  while ((_QWORD *)v45 != v44)
  {
    v47 = *(_QWORD *)(v45 + 144);
    v48 = *(_QWORD **)(v46 + 144);
    if (*(_QWORD *)v47 == *v48)
    {
      v49 = *(unsigned int *)(v47 + 32);
      if (v49 > 0x40)
      {
        v51 = *(_QWORD *)(v47 + 24);
        v52 = v48[3] - 8;
        v53 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
        v54 = v51 - 8;
        while (v53)
        {
          v55 = *(_QWORD *)(v54 + v53);
          v56 = *(_QWORD *)(v52 + v53);
          v53 -= 8;
          if (v55 != v56)
          {
            if (v55 <= v56)
              goto LABEL_55;
            break;
          }
        }
LABEL_60:
        sub_1C62F45E8(v6, v46);
        v57 = *(_DWORD *)(v46 + 160);
        *(_OWORD *)(v6 + 144) = *(_OWORD *)(v46 + 144);
        *(_DWORD *)(v6 + 160) = v57;
        v46 += 168;
        goto LABEL_61;
      }
      if (*(_QWORD *)(v47 + 24) >= v48[3])
        goto LABEL_60;
    }
    else if (*(_DWORD *)(*(_QWORD *)v47 + 8) >> 8 >= *(_DWORD *)(*v48 + 8) >> 8)
    {
      goto LABEL_60;
    }
LABEL_55:
    sub_1C62F45E8(v6, v45);
    v50 = *(_DWORD *)(v45 + 160);
    *(_OWORD *)(v6 + 144) = *(_OWORD *)(v45 + 144);
    *(_DWORD *)(v6 + 160) = v50;
    v45 += 168;
LABEL_61:
    v6 += 168;
    if ((_QWORD *)v46 == v43)
    {
      if ((_QWORD *)v45 != v44)
      {
        v58 = 0;
        do
        {
          v59 = v45 + v58;
          v60 = v6 + v58;
          sub_1C62F45E8(v6 + v58, v45 + v58);
          v61 = *(_DWORD *)(v45 + v58 + 160);
          *(_OWORD *)(v60 + 144) = *(_OWORD *)(v45 + v58 + 144);
          *(_DWORD *)(v60 + 160) = v61;
          v58 += 168;
        }
        while ((_QWORD *)(v59 + 168) != v44);
      }
      goto LABEL_69;
    }
  }
  if ((_QWORD *)v46 != v43)
  {
    v62 = 0;
    do
    {
      v63 = v46 + v62;
      v64 = v6 + v62;
      sub_1C62F45E8(v6 + v62, v46 + v62);
      v65 = *(_DWORD *)(v46 + v62 + 160);
      *(_OWORD *)(v64 + 144) = *(_OWORD *)(v46 + v62 + 144);
      *(_DWORD *)(v64 + 160) = v65;
      v62 += 168;
    }
    while ((_QWORD *)(v63 + 168) != v43);
  }
LABEL_69:
  if (v13)
  {
    v66 = a3;
    do
    {
      v69 = (_QWORD *)*v13;
      v68 = v13 + 2;
      v67 = v69;
      if (v69 != v68)
        free(v67);
      v13 = v68 + 19;
      --v66;
    }
    while (v66);
  }
}

uint64_t sub_1C5AD21C4(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  _OWORD *v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  int v76;

  if (!a3)
    return result;
  v4 = (uint64_t)a4;
  v7 = result;
  if (a3 == 2)
  {
    v10 = (__int128 *)(a2 - 24);
    v9 = *(_QWORD *)(a2 - 24);
    v12 = (__int128 *)(result + 144);
    v11 = *(_QWORD **)(result + 144);
    if (*(_QWORD *)v9 == *v11)
    {
      v55 = *(unsigned int *)(v9 + 32);
      if (v55 > 0x40)
      {
        v69 = *(_QWORD *)(v9 + 24);
        v70 = v11[3] - 8;
        v71 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
        v72 = v69 - 8;
        do
        {
          if (!v71)
            goto LABEL_88;
          v73 = *(_QWORD *)(v72 + v71);
          v74 = *(_QWORD *)(v70 + v71);
          v71 -= 8;
        }
        while (v73 == v74);
        if (v73 > v74)
          goto LABEL_88;
      }
      else if (*(_QWORD *)(v9 + 24) >= v11[3])
      {
LABEL_88:
        *a4 = a4 + 2;
        a4[1] = 0x800000000;
        if (*(_DWORD *)(result + 8))
          sub_1C62F45E8((uint64_t)a4, result);
        v75 = *v12;
        v76 = *(_DWORD *)(v7 + 160);
        *(_QWORD *)(v4 + 168) = v4 + 184;
        result = v4 + 168;
        *(_DWORD *)(v4 + 160) = v76;
        *(_OWORD *)(v4 + 144) = v75;
        *(_QWORD *)(v4 + 176) = 0x800000000;
        if (*(_DWORD *)(a2 - 160))
          result = sub_1C62F45E8(result, a2 - 168);
        v58 = (_OWORD *)(v4 + 312);
        v59 = *v10;
        v60 = *(_DWORD *)(a2 - 8);
LABEL_93:
        *(_DWORD *)(v4 + 328) = v60;
        *v58 = v59;
        return result;
      }
    }
    else if (*(_DWORD *)(*(_QWORD *)v9 + 8) >> 8 >= *(_DWORD *)(*v11 + 8) >> 8)
    {
      goto LABEL_88;
    }
    *a4 = a4 + 2;
    a4[1] = 0x800000000;
    if (*(_DWORD *)(a2 - 160))
      sub_1C62F45E8((uint64_t)a4, a2 - 168);
    v56 = *v10;
    v57 = *(_DWORD *)(a2 - 8);
    *(_QWORD *)(v4 + 168) = v4 + 184;
    result = v4 + 168;
    *(_DWORD *)(v4 + 160) = v57;
    *(_OWORD *)(v4 + 144) = v56;
    *(_QWORD *)(v4 + 176) = 0x800000000;
    if (*(_DWORD *)(v7 + 8))
      result = sub_1C62F45E8(result, v7);
    v58 = (_OWORD *)(v4 + 312);
    v59 = *v12;
    v60 = *(_DWORD *)(v7 + 160);
    goto LABEL_93;
  }
  if (a3 == 1)
  {
    *a4 = a4 + 2;
    a4[1] = 0x800000000;
    if (*(_DWORD *)(result + 8))
      result = sub_1C62F45E8((uint64_t)a4, result);
    v8 = *(_OWORD *)(v7 + 144);
    *(_DWORD *)(v4 + 160) = *(_DWORD *)(v7 + 160);
    *(_OWORD *)(v4 + 144) = v8;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v41 = 168 * (a3 >> 1);
    v42 = result + v41;
    sub_1C5AD1BA0(result, result + v41, a3 >> 1, a4, a3 >> 1);
    result = sub_1C5AD1BA0(v7 + v41, a2, a3 - (a3 >> 1), v4 + v41, a3 - (a3 >> 1));
    v43 = v7 + v41;
    while (1)
    {
      if (v43 == a2)
      {
        if (v7 != v42)
        {
          v61 = 0;
          do
          {
            v62 = v4 + v61;
            v63 = v7 + v61;
            *(_QWORD *)v62 = v4 + v61 + 16;
            *(_QWORD *)(v62 + 8) = 0x800000000;
            if (*(_DWORD *)(v7 + v61 + 8))
              result = sub_1C62F45E8(v4 + v61, v7 + v61);
            v61 += 168;
            v64 = *(_OWORD *)(v63 + 144);
            *(_DWORD *)(v62 + 160) = *(_DWORD *)(v63 + 160);
            *(_OWORD *)(v62 + 144) = v64;
          }
          while (v7 + v61 != v42);
        }
        return result;
      }
      v44 = *(_QWORD *)(v43 + 144);
      v45 = *(_QWORD **)(v7 + 144);
      if (*(_QWORD *)v44 == *v45)
      {
        v46 = *(unsigned int *)(v44 + 32);
        if (v46 > 0x40)
        {
          v48 = *(_QWORD *)(v44 + 24);
          v49 = v45[3] - 8;
          v50 = ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8;
          v51 = v48 - 8;
          do
          {
            if (!v50)
              goto LABEL_60;
            v52 = *(_QWORD *)(v51 + v50);
            v53 = *(_QWORD *)(v49 + v50);
            v50 -= 8;
          }
          while (v52 == v53);
          if (v52 <= v53)
          {
LABEL_53:
            *(_QWORD *)v4 = v4 + 16;
            *(_QWORD *)(v4 + 8) = 0x800000000;
            if (*(_DWORD *)(v43 + 8))
              result = sub_1C62F45E8(v4, v43);
            v47 = *(_OWORD *)(v43 + 144);
            *(_DWORD *)(v4 + 160) = *(_DWORD *)(v43 + 160);
            *(_OWORD *)(v4 + 144) = v47;
            v43 += 168;
            goto LABEL_63;
          }
        }
        else if (*(_QWORD *)(v44 + 24) < v45[3])
        {
          goto LABEL_53;
        }
      }
      else if (*(_DWORD *)(*(_QWORD *)v44 + 8) >> 8 < *(_DWORD *)(*v45 + 8) >> 8)
      {
        goto LABEL_53;
      }
LABEL_60:
      *(_QWORD *)v4 = v4 + 16;
      *(_QWORD *)(v4 + 8) = 0x800000000;
      if (*(_DWORD *)(v7 + 8))
        result = sub_1C62F45E8(v4, v7);
      v54 = *(_OWORD *)(v7 + 144);
      *(_DWORD *)(v4 + 160) = *(_DWORD *)(v7 + 160);
      *(_OWORD *)(v4 + 144) = v54;
      v7 += 168;
LABEL_63:
      v4 += 168;
      if (v7 == v42)
      {
        if (v43 != a2)
        {
          v65 = 0;
          do
          {
            v66 = v43 + v65;
            v67 = v4 + v65;
            *(_QWORD *)v67 = v4 + v65 + 16;
            *(_QWORD *)(v67 + 8) = 0x800000000;
            if (*(_DWORD *)(v43 + v65 + 8))
              result = sub_1C62F45E8(v4 + v65, v43 + v65);
            v65 += 168;
            v68 = *(_OWORD *)(v66 + 144);
            *(_DWORD *)(v67 + 160) = *(_DWORD *)(v66 + 160);
            *(_OWORD *)(v67 + 144) = v68;
          }
          while (v43 + v65 != a2);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  *a4 = a4 + 2;
  a4[1] = 0x800000000;
  if (*(_DWORD *)(result + 8))
    result = sub_1C62F45E8((uint64_t)a4, result);
  v13 = *(_OWORD *)(v7 + 144);
  *(_DWORD *)(v4 + 160) = *(_DWORD *)(v7 + 160);
  *(_OWORD *)(v4 + 144) = v13;
  v14 = v7 + 168;
  if (v7 + 168 == a2)
    return result;
  v15 = v4;
  do
  {
    v16 = v14;
    v17 = *(_QWORD **)(v15 + 144);
    v18 = v15 + 168;
    v19 = v7 + 312;
    v20 = *(_QWORD *)(v7 + 312);
    if (*(_QWORD *)v20 == *v17)
    {
      v21 = *(unsigned int *)(v20 + 32);
      if (v21 > 0x40)
      {
        v34 = *(_QWORD *)(v20 + 24);
        v35 = v17[3] - 8;
        v36 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
        v37 = v34 - 8;
        do
        {
          if (!v36)
            goto LABEL_41;
          v38 = *(_QWORD *)(v37 + v36);
          v39 = *(_QWORD *)(v35 + v36);
          v36 -= 8;
        }
        while (v38 == v39);
        if (v38 > v39)
        {
LABEL_41:
          *(_QWORD *)(v15 + 168) = v15 + 184;
          *(_QWORD *)(v15 + 176) = 0x800000000;
          if (*(_DWORD *)(v7 + 176))
            result = sub_1C62F45E8(v15 + 168, v16);
          v33 = v15 + 312;
          goto LABEL_44;
        }
      }
      else if (*(_QWORD *)(v20 + 24) >= v17[3])
      {
        goto LABEL_41;
      }
    }
    else if (*(_DWORD *)(*(_QWORD *)v20 + 8) >> 8 >= *(_DWORD *)(*v17 + 8) >> 8)
    {
      goto LABEL_41;
    }
    *(_QWORD *)(v15 + 168) = v15 + 184;
    *(_QWORD *)(v15 + 176) = 0x800000000;
    if (*(_DWORD *)(v15 + 8))
      sub_1C62F45E8(v15 + 168, v15);
    *(_OWORD *)(v15 + 312) = *(_OWORD *)(v15 + 144);
    *(_DWORD *)(v15 + 328) = *(_DWORD *)(v15 + 160);
    v22 = v4;
    if (v15 == v4)
      goto LABEL_36;
    while (1)
    {
      v23 = *(_QWORD **)(v15 - 24);
      v24 = *(uint64_t **)v19;
      v25 = **(_QWORD **)v19;
      if (v25 == *v23)
        break;
      if (*(_DWORD *)(v25 + 8) >> 8 >= *(_DWORD *)(*v23 + 8) >> 8)
        goto LABEL_35;
LABEL_29:
      sub_1C62F45E8(v15, v15 - 168);
      *(_OWORD *)(v15 + 144) = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v15 + 160) = *(_DWORD *)(v15 - 8);
      v15 -= 168;
      if (v15 == v4)
      {
        v22 = v4;
        goto LABEL_36;
      }
    }
    v26 = *((unsigned int *)v24 + 8);
    if (v26 <= 0x40)
    {
      if ((unint64_t)v24[3] >= v23[3])
        goto LABEL_35;
      goto LABEL_29;
    }
    v27 = v24[3];
    v28 = v23[3] - 8;
    v29 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
    v30 = v27 - 8;
    while (v29)
    {
      v31 = *(_QWORD *)(v30 + v29);
      v32 = *(_QWORD *)(v28 + v29);
      v29 -= 8;
      if (v31 != v32)
      {
        if (v31 <= v32)
          goto LABEL_29;
        break;
      }
    }
LABEL_35:
    v22 = v15;
LABEL_36:
    result = sub_1C62F45E8(v22, v16);
    v33 = v22 + 144;
LABEL_44:
    v40 = *(_OWORD *)v19;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(v19 + 16);
    *(_OWORD *)v33 = v40;
    v14 = v16 + 168;
    v15 = v18;
    v7 = v16;
  }
  while (v16 + 168 != a2);
  return result;
}

void sub_1C5AD2844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  __int128 *v125;
  __int128 *v126;
  __int128 v127;
  int v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  _BYTE v140[128];
  __int128 v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return;
  v7 = a5;
  v130 = a7;
  v131 = a6;
  do
  {
    if (a4 <= a7 || v7 <= a7)
    {
      v71 = a6;
      if (a4 > v7)
      {
        if (a2 == a3)
          return;
        v72 = 0;
        v73 = 0;
        do
        {
          v74 = a3;
          v75 = &a6[v72];
          v76 = a2 + v72 * 8;
          *v75 = &a6[v72 + 2];
          v75[1] = 0x800000000;
          if (*(_DWORD *)(a2 + v72 * 8 + 8))
          {
            sub_1C62F45E8((uint64_t)&a6[v72], a2 + v72 * 8);
            a6 = v71;
          }
          v77 = *(_OWORD *)(v76 + 144);
          *((_DWORD *)v75 + 40) = *(_DWORD *)(v76 + 160);
          *((_OWORD *)v75 + 9) = v77;
          ++v73;
          v72 += 21;
          a3 = v74;
        }
        while (a2 + v72 * 8 != v74);
        if (!(v72 * 8))
          goto LABEL_153;
        v83 = &a6[v72];
        while (1)
        {
          if (a2 == a1)
          {
            if (v83 != a6)
            {
              v113 = a3;
              v114 = 0;
              do
              {
                v115 = v113 + v114 * 8;
                sub_1C62F45E8(v113 + v114 * 8 - 168, (uint64_t)&v83[v114 - 21]);
                v116 = v83[v114 - 1];
                *(_OWORD *)(v115 - 24) = *(_OWORD *)&v83[v114 - 3];
                *(_DWORD *)(v115 - 8) = v116;
                v114 -= 21;
              }
              while (&v83[v114] != v71);
              goto LABEL_152;
            }
            goto LABEL_153;
          }
          v85 = a2 - 24;
          v84 = *(_QWORD **)(a2 - 24);
          v86 = a2 - 168;
          v87 = *(v83 - 3);
          if (*(_QWORD *)v87 == *v84)
          {
            v88 = *(unsigned int *)(v87 + 32);
            if (v88 > 0x40)
            {
              v93 = *(_QWORD *)(v87 + 24);
              v94 = v84[3] - 8;
              v95 = ((unint64_t)(v88 + 63) >> 3) & 0x3FFFFFF8;
              v96 = v93 - 8;
              do
              {
                if (!v95)
                  goto LABEL_121;
                v97 = *(_QWORD *)(v96 + v95);
                v98 = *(_QWORD *)(v94 + v95);
                v95 -= 8;
              }
              while (v97 == v98);
              v89 = a2 - 168;
              if (v97 <= v98)
                goto LABEL_122;
LABEL_121:
              v86 = (uint64_t)(v83 - 21);
              v85 = (uint64_t)(v83 - 3);
              v89 = a2;
              v83 -= 21;
              goto LABEL_122;
            }
            v89 = a2 - 168;
            if (*(_QWORD *)(v87 + 24) >= v84[3])
              goto LABEL_121;
          }
          else
          {
            v89 = a2 - 168;
            if (*(_DWORD *)(*(_QWORD *)v87 + 8) >> 8 >= *(_DWORD *)(*v84 + 8) >> 8)
              goto LABEL_121;
          }
LABEL_122:
          v90 = a3;
          v91 = a3 - 168;
          sub_1C62F45E8(a3 - 168, v86);
          v92 = *(_DWORD *)(v85 + 16);
          *(_OWORD *)(v90 - 24) = *(_OWORD *)v85;
          *(_DWORD *)(v90 - 8) = v92;
          a2 = v89;
          a3 = v91;
          a6 = v71;
          if (v83 == v71)
            goto LABEL_153;
        }
      }
      if (a1 == a2)
        return;
      v78 = a3;
      v79 = 0;
      v73 = 0;
      do
      {
        v80 = &a6[v79];
        v81 = a1 + v79 * 8;
        *v80 = &a6[v79 + 2];
        v80[1] = 0x800000000;
        if (*(_DWORD *)(a1 + v79 * 8 + 8))
        {
          sub_1C62F45E8((uint64_t)&a6[v79], a1 + v79 * 8);
          a6 = v71;
        }
        v82 = *(_OWORD *)(v81 + 144);
        *((_DWORD *)v80 + 40) = *(_DWORD *)(v81 + 160);
        *((_OWORD *)v80 + 9) = v82;
        ++v73;
        v79 += 21;
      }
      while (a1 + v79 * 8 != a2);
      if (!(v79 * 8))
        goto LABEL_153;
      v99 = &a6[v79];
      v100 = (uint64_t)&a6[v79 - 21];
      v101 = (uint64_t)a6;
      while (1)
      {
        if (a2 == v78)
        {
          if (v99 != (_QWORD *)v101)
          {
            v117 = 0;
            do
            {
              v118 = a1 + v117;
              v119 = v101 + v117;
              sub_1C62F45E8(a1 + v117, v101 + v117);
              v120 = *(_DWORD *)(v101 + v117 + 160);
              *(_OWORD *)(v118 + 144) = *(_OWORD *)(v101 + v117 + 144);
              *(_DWORD *)(v118 + 160) = v120;
              v117 += 168;
            }
            while (v100 != v119);
LABEL_152:
            a6 = v71;
          }
LABEL_153:
          if (a6 && v73)
          {
            do
            {
              v123 = (_QWORD *)*a6;
              v122 = a6 + 2;
              v121 = v123;
              if (v123 != v122)
              {
                v124 = v122;
                free(v121);
                v122 = v124;
              }
              a6 = v122 + 19;
              --v73;
            }
            while (v73);
          }
          return;
        }
        v102 = *(_QWORD *)(a2 + 144);
        v103 = *(_QWORD **)(v101 + 144);
        if (*(_QWORD *)v102 == *v103)
        {
          v104 = *(unsigned int *)(v102 + 32);
          if (v104 > 0x40)
          {
            v106 = *(_QWORD *)(v102 + 24);
            v107 = v103[3] - 8;
            v108 = ((unint64_t)(v104 + 63) >> 3) & 0x3FFFFFF8;
            v109 = v106 - 8;
            do
            {
              if (!v108)
                goto LABEL_142;
              v110 = *(_QWORD *)(v109 + v108);
              v111 = *(_QWORD *)(v107 + v108);
              v108 -= 8;
            }
            while (v110 == v111);
            if (v110 > v111)
            {
LABEL_142:
              sub_1C62F45E8(a1, v101);
              v112 = *(_DWORD *)(v101 + 160);
              *(_OWORD *)(a1 + 144) = *(_OWORD *)(v101 + 144);
              *(_DWORD *)(a1 + 160) = v112;
              v101 += 168;
              goto LABEL_143;
            }
          }
          else if (*(_QWORD *)(v102 + 24) >= v103[3])
          {
            goto LABEL_142;
          }
        }
        else if (*(_DWORD *)(*(_QWORD *)v102 + 8) >> 8 >= *(_DWORD *)(*v103 + 8) >> 8)
        {
          goto LABEL_142;
        }
        sub_1C62F45E8(a1, a2);
        v105 = *(_DWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_DWORD *)(a1 + 160) = v105;
        a2 += 168;
LABEL_143:
        a1 += 168;
        a6 = v71;
        if (v99 == (_QWORD *)v101)
          goto LABEL_153;
      }
    }
    if (!a4)
      return;
    v11 = *(uint64_t **)(a2 + 144);
    v12 = *v11;
    while (1)
    {
      v13 = *(_QWORD **)(a1 + 144);
      if (v12 != *v13)
      {
        if (*(_DWORD *)(v12 + 8) >> 8 < *(_DWORD *)(*v13 + 8) >> 8)
          break;
        goto LABEL_12;
      }
      v14 = *((unsigned int *)v11 + 8);
      if (v14 > 0x40)
      {
        v15 = v13[3] - 8;
        v16 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
        while (v16)
        {
          v17 = *(_QWORD *)(v11[3] - 8 + v16);
          v18 = *(_QWORD *)(v15 + v16);
          v16 -= 8;
          if (v17 != v18)
          {
            if (v17 > v18)
              goto LABEL_12;
            goto LABEL_18;
          }
        }
        goto LABEL_12;
      }
      if ((unint64_t)v11[3] < v13[3])
        break;
LABEL_12:
      a1 += 168;
      if (!--a4)
        return;
    }
LABEL_18:
    v135 = v7;
    if (a4 < v7)
    {
      if (v7 >= 0)
        v19 = v7;
      else
        v19 = v7 + 1;
      v20 = v19 >> 1;
      if (a2 == a1)
      {
        v24 = a2;
      }
      else
      {
        v21 = 0xCF3CF3CF3CF3CF3DLL * ((a2 - a1) >> 3);
        v22 = *(uint64_t **)(a2 + 168 * v20 + 144);
        v23 = *v22;
        v24 = a1;
        do
        {
          v25 = v21 >> 1;
          v26 = v24 + 168 * (v21 >> 1);
          v27 = *(_QWORD **)(v26 + 144);
          if (v23 == *v27)
          {
            v29 = *((unsigned int *)v22 + 8);
            if (v29 > 0x40)
            {
              v35 = v27[3] - 8;
              v36 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v36)
                {
                  v33 = 0;
                  goto LABEL_29;
                }
                v37 = *(_QWORD *)(v22[3] - 8 + v36);
                v38 = *(_QWORD *)(v35 + v36);
                v36 -= 8;
              }
              while (v37 == v38);
              if (v37 > v38)
                v33 = 1;
              else
                v33 = -1;
            }
            else
            {
              v30 = v22[3];
              v31 = v27[3];
              v32 = v30 >= v31;
              v33 = v30 > v31;
              if (!v32)
                v33 = -1;
            }
LABEL_29:
            v28 = v33 >> 31;
          }
          else
          {
            v28 = *(_DWORD *)(v23 + 8) >> 8 < *(_DWORD *)(*v27 + 8) >> 8;
          }
          v34 = v26 + 168;
          v21 += ~v25;
          if (v28)
            v21 = v25;
          else
            v24 = v34;
        }
        while (v21);
      }
      v134 = v20;
      v41 = a2 + 168 * v20;
      v40 = 0xCF3CF3CF3CF3CF3DLL * ((v24 - a1) >> 3);
      goto LABEL_69;
    }
    if (a4 == 1)
    {
      v125 = (__int128 *)(a2 + 144);
      v126 = (__int128 *)(a1 + 144);
      v138 = v140;
      v139 = 0x800000000;
      if (*(_DWORD *)(a1 + 8))
        sub_1C62F45E8((uint64_t)&v138, a1);
      v127 = *v126;
      v142 = *(_DWORD *)(a1 + 160);
      v141 = v127;
      sub_1C62F45E8(a1, a2);
      v128 = *(_DWORD *)(a2 + 160);
      *v126 = *v125;
      *(_DWORD *)(a1 + 160) = v128;
      sub_1C62F45E8(a2, (uint64_t)&v138);
      v129 = v142;
      *v125 = v141;
      *(_DWORD *)(a2 + 160) = v129;
      if (v138 != v140)
        free(v138);
      return;
    }
    if (a4 >= 0)
      v39 = a4;
    else
      v39 = a4 + 1;
    v40 = v39 >> 1;
    v41 = a3;
    if (a3 != a2)
    {
      v42 = 0xCF3CF3CF3CF3CF3DLL * ((a3 - a2) >> 3);
      v43 = *(uint64_t **)(a1 + 168 * v40 + 144);
      v44 = *v43;
      v41 = a2;
      do
      {
        v45 = v42 >> 1;
        v46 = v41 + 168 * (v42 >> 1);
        v47 = *(_QWORD *)(v46 + 144);
        if (*(_QWORD *)v47 == v44)
        {
          v49 = *(unsigned int *)(v47 + 32);
          if (v49 > 0x40)
          {
            v54 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v54)
              {
                v52 = 0;
                goto LABEL_53;
              }
              v55 = *(_QWORD *)(*(_QWORD *)(v47 + 24) - 8 + v54);
              v56 = *(_QWORD *)(v43[3] - 8 + v54);
              v54 -= 8;
            }
            while (v55 == v56);
            if (v55 > v56)
              v52 = 1;
            else
              v52 = -1;
          }
          else
          {
            v50 = *(_QWORD *)(v47 + 24);
            v51 = v43[3];
            v32 = v50 >= v51;
            v52 = v50 > v51;
            if (!v32)
              v52 = -1;
          }
LABEL_53:
          v48 = v52 >> 31;
        }
        else
        {
          v48 = *(_DWORD *)(*(_QWORD *)v47 + 8) >> 8 < *(_DWORD *)(v44 + 8) >> 8;
        }
        v53 = v46 + 168;
        v42 += ~v45;
        if (v48)
          v41 = v53;
        else
          v42 = v45;
      }
      while (v42);
    }
    v24 = a1 + 168 * v40;
    v134 = 0xCF3CF3CF3CF3CF3DLL * ((v41 - a2) >> 3);
LABEL_69:
    v57 = v41;
    if (v24 != a2)
    {
      v57 = v24;
      if (a2 != v41)
      {
        v132 = a3;
        v58 = v24 + 168;
        v136 = v24 + 168;
        v59 = a2;
        while (1)
        {
          v138 = v140;
          v139 = 0x800000000;
          if (*(_DWORD *)(v58 - 160))
            sub_1C62F45E8((uint64_t)&v138, v58 - 168);
          v60 = *(_OWORD *)(v58 - 24);
          v142 = *(_DWORD *)(v58 - 8);
          v141 = v60;
          sub_1C62F45E8(v58 - 168, v59);
          v61 = *(_DWORD *)(v59 + 160);
          *(_OWORD *)(v58 - 24) = *(_OWORD *)(v59 + 144);
          *(_DWORD *)(v58 - 8) = v61;
          sub_1C62F45E8(v59, (uint64_t)&v138);
          v62 = v141;
          *(_DWORD *)(v59 + 160) = v142;
          *(_OWORD *)(v59 + 144) = v62;
          if (v138 != v140)
            free(v138);
          v59 += 168;
          if (v59 == v41)
            break;
          if (v58 == a2)
            a2 = v59;
          v58 += 168;
          v136 += 168;
        }
        a6 = v131;
        if (v58 != a2)
        {
          v63 = a2;
          while (1)
          {
            v58 += 168;
            while (1)
            {
              v138 = v140;
              v139 = 0x800000000;
              if (*(_DWORD *)(v58 - 160))
                sub_1C62F45E8((uint64_t)&v138, v58 - 168);
              v64 = *(_OWORD *)(v58 - 24);
              v142 = *(_DWORD *)(v58 - 8);
              v141 = v64;
              sub_1C62F45E8(v58 - 168, v63);
              v65 = *(_DWORD *)(v63 + 160);
              *(_OWORD *)(v58 - 24) = *(_OWORD *)(v63 + 144);
              *(_DWORD *)(v58 - 8) = v65;
              sub_1C62F45E8(v63, (uint64_t)&v138);
              v66 = v142;
              *(_OWORD *)(v63 + 144) = v141;
              *(_DWORD *)(v63 + 160) = v66;
              if (v138 != v140)
                free(v138);
              v63 += 168;
              a6 = v131;
              if (v63 != v41)
                break;
              v63 = a2;
              v67 = v58 == a2;
              v58 += 168;
              if (v67)
                goto LABEL_94;
            }
            if (v58 == a2)
              a2 = v63;
          }
        }
LABEL_94:
        a3 = v132;
        a7 = v130;
        v57 = v136;
      }
    }
    a4 -= v40;
    v7 = v134;
    if ((uint64_t)(v40 + v134) >= (uint64_t)(a4 + v135 - v134))
    {
      v137 = a1;
      v69 = a6;
      v70 = a7;
      sub_1C5AD2844(v57, v41, a3, a4, v135 - v134);
      v41 = v24;
      a4 = v40;
      a3 = v57;
    }
    else
    {
      v68 = a1;
      v133 = a3;
      v69 = a6;
      v70 = a7;
      sub_1C5AD2844(v68, v24, v57, v40, v134);
      a3 = v133;
      v137 = v57;
      v7 = v135 - v134;
    }
    a2 = v41;
    a6 = v69;
    a7 = v70;
    a1 = v137;
  }
  while (v7);
}

uint64_t sub_1C5AD3254()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  LOBYTE(v1) = 1;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Enable the use of the block frequency analysis to reduce the chance to execute cons"
                                     "t materialization more frequently than without hoisting.";
  v4.n128_u64[1] = 139;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81B888, "consthoist-with-block-frequency", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81B888, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Try hoisting constant gep expressions";
  v4.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81B948, "consthoist-gep", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81B948, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Do not rebase if number of dependent constants of a Base is less than this number.";
  v4.n128_u64[1] = 82;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED81BA08, "consthoist-min-num-to-rebase", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81BA08, &dword_1C475E000);
}

_QWORD *llvm::ConstraintEliminationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t ResultImpl;
  char v9;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1);
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  v9 = sub_1C5AD3498(a1, v6, ResultImpl + 8, v7);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
}

uint64_t sub_1C5AD3498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  llvm::OptimizationRemarkEmitter *v5;
  llvm::ScalarEvolution *v6;
  llvm::ScalarEvolution *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t *v15;
  llvm::Value *v16;
  uint64_t LoopPredecessor;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t LoopLatch;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  void **v33;
  unint64_t v34;
  char *v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char **v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  char v69;
  const char *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unsigned int IndexTypeSizeInBits;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  const char *v80;
  char v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  unsigned int v87;
  _QWORD *v88;
  _DWORD *v89;
  _QWORD *v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  int32x2_t *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  int32x2_t ****v104;
  int32x2_t *v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  int32x2_t *****v110;
  int32x2_t ****v111;
  int v112;
  int v113;
  _QWORD *v114;
  int v115;
  BOOL v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  _DWORD *v120;
  _DWORD *v121;
  _QWORD *v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  size_t v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t *v134;
  int32x2_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  int v142;
  int v143;
  unint64_t v144;
  int32x2_t ****v145;
  int32x2_t *v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int32x2_t *****v151;
  int32x2_t ****v152;
  int v153;
  int v154;
  void **v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  int32x2_t *v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t *v170;
  uint64_t *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  int32x2_t *v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  uint64_t **v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t ***v195;
  uint64_t **v196;
  int v197;
  int v198;
  uint64_t **v199;
  char *v200;
  size_t v201;
  size_t v202;
  uint64_t **v203;
  uint64_t *v204;
  uint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  const std::nothrow_t *v208;
  unint64_t v209;
  uint64_t *v210;
  BOOL v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  int v219;
  _QWORD *v220;
  _QWORD *v221;
  char v222;
  uint64_t v223;
  int v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  int v242;
  int v243;
  const llvm::Value *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  llvm::Value **v302;
  _QWORD *v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  BOOL v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  const llvm::Loop *v315;
  unsigned __int8 *v316;
  uint64_t v317;
  _BOOL4 v318;
  uint64_t v319;
  int v320;
  void *v321;
  char v322;
  uint64_t v323;
  void *v324;
  unsigned int v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  int v333;
  int v334;
  void *v335;
  char v336;
  uint64_t v337;
  void *v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  int v349;
  int v350;
  void *v351;
  char v352;
  uint64_t v353;
  void *v354;
  unsigned int v355;
  char v356;
  _BYTE *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  int v363;
  int v364;
  void *v365;
  char v366;
  uint64_t v367;
  void *v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t *v379;
  int v380;
  unsigned int v381;
  uint64_t SCEVIter;
  BOOL v383;
  uint64_t v384;
  uint64_t v386;
  char *v387;
  char v388;
  uint64_t v389;
  unsigned int v390;
  int v391;
  _DWORD *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t ***v398;
  uint64_t v399;
  unsigned int v400;
  _QWORD *v401;
  _DWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  const llvm::SCEV *v415;
  _QWORD *v416;
  char v417;
  BOOL v418;
  _QWORD *v419;
  char *v420;
  uint64_t ***v421;
  uint64_t v422;
  unsigned int v423;
  _QWORD *v424;
  _DWORD *v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t ***v438;
  uint64_t v439;
  unsigned int v440;
  _QWORD *v441;
  _DWORD *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  int v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  _DWORD *v455;
  _DWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  int v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  int v479;
  int v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  void *v484;
  uint64_t *v485;
  std::string *v486;
  std::string *v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  uint64_t v491;
  char *v492;
  unint64_t v493;
  void **v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  _DWORD *v507;
  uint64_t v508;
  char *v510;
  char *v511;
  unsigned int v512;
  char *v513;
  int v514;
  uint64_t v515;
  unsigned int v516;
  char **v517;
  void **v518;
  uint64_t v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  int *v525;
  int v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  int v532;
  int v533;
  BOOL v534;
  char **v535;
  uint64_t *v536;
  uint64_t v537;
  char *v538;
  uint64_t v539;
  _DWORD *v540;
  char *v541;
  char *v542;
  char *v543;
  int v544;
  char *v545;
  int v546;
  llvm **v547;
  llvm *v548;
  llvm *v549;
  llvm::Value **v550;
  _BOOL4 v551;
  int v552;
  const llvm::APInt *v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  llvm::Value *v557;
  uint64_t v558;
  llvm::Type *v559;
  uint64_t v560;
  _QWORD *v561;
  int v562;
  uint64_t v563;
  uint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  llvm::ConstantInt *v568;
  uint64_t v569;
  std::string *v570;
  llvm::Value *v571;
  llvm::ConstantInt **v572;
  uint64_t v573;
  uint64_t *v574;
  int v575;
  int v576;
  int v577;
  llvm::Value **v578;
  llvm::Value **v579;
  int v580;
  _DWORD **v581;
  int v582;
  uint64_t v583;
  llvm::Value *v584;
  llvm::Constant *v585;
  uint64_t v586;
  uint64_t *v587;
  int v588;
  unsigned int v589;
  char *v590;
  int v591;
  uint64_t v592;
  unsigned int v593;
  char **v594;
  void **v595;
  uint64_t v596;
  _QWORD *v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t *v601;
  int *v602;
  int v603;
  uint64_t v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  int v609;
  int v610;
  BOOL v611;
  char **v612;
  uint64_t *v613;
  uint64_t v614;
  char *v615;
  uint64_t v616;
  _DWORD *v617;
  char *v618;
  char *v619;
  uint64_t v620;
  _QWORD *v621;
  llvm *v622;
  llvm *v623;
  llvm **v624;
  llvm **v625;
  int v626;
  _BOOL4 isConditionImplied;
  llvm **v628;
  llvm **v629;
  uint64_t v630;
  char **v631;
  char *v632;
  char *v633;
  uint64_t **v634;
  llvm::Type *v635;
  const llvm::APInt *v636;
  llvm::Value **True;
  _BOOL4 v638;
  uint64_t **v639;
  llvm::Type *v640;
  const llvm::APInt *v641;
  llvm::Value **False;
  unsigned int v643;
  unsigned int v644;
  uint64_t v645;
  unsigned int v646;
  void **v647;
  llvm::Value **v648;
  llvm::Value **v649;
  llvm::Value **v650;
  llvm::Value *v651;
  llvm::Value **v652;
  llvm::OptimizationRemarkEmitter *v653;
  int v654;
  uint64_t **v655;
  uint64_t v656;
  unsigned int v657;
  void **v658;
  _DWORD *v659;
  const llvm::Loop *v660;
  uint64_t *v661;
  void *v662;
  uint64_t BackedgeTakenCount;
  uint64_t **v664;
  int v665;
  int v666;
  llvm::Module *v667;
  llvm::Module *v668;
  uint64_t *v669;
  uint64_t *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  void *v675;
  llvm::Value *v676;
  llvm::Value *v677;
  int v678;
  int v679;
  uint64_t *v680;
  unsigned int v681;
  char *v682;
  void *v683[2];
  char v684;
  void *__p[2];
  char v686;
  uint64_t v687;
  uint64_t v688;
  void *__src;
  unsigned int v690;
  void *v691;
  uint64_t v692;
  _QWORD v693[6];
  uint64_t *v694;
  void *v695;
  unsigned int v696;
  _BYTE v697[48];
  char *v698;
  unsigned int v699;
  __int16 v700;
  void *v701;
  void *__b;
  uint64_t v703;
  uint64_t v704;
  _WORD v705[376];
  void *v706;
  uint64_t v707;
  _BYTE v708[48];
  uint64_t v709[2];
  int v710;
  _QWORD v711[2];
  int v712;
  char *v713;
  uint64_t v714;
  _DWORD v715[82];
  char *v716;
  uint64_t v717;
  _DWORD v718[82];
  uint64_t *v719;
  uint64_t v720;
  uint64_t v721;
  llvm::ScalarEvolution *v722;
  uint64_t v723;
  void *v724;
  uint64_t v725;
  _BYTE v726[32];
  void *v727;
  uint64_t v728;
  _BYTE v729[2048];
  __int128 v730;
  int v731;
  __int128 v732;
  unsigned int v733;
  void *v734;
  uint64_t v735;
  _QWORD v736[2];
  uint64_t v737;
  void *v738;
  uint64_t v739;
  void *v740;
  uint64_t v741;
  unint64_t *v742;
  int32x2_t ****v743;
  void *v744;
  uint64_t v745;
  void *v746;
  unint64_t *v747;
  uint64_t *v748;
  uint64_t v749;
  void *v750;
  uint64_t v751;
  void *v752;
  void **v753;
  char *v754;
  int32x2_t ****v755;
  char *v756;
  uint64_t v757;
  uint64_t v758;
  void *v759;
  void *v760;
  uint64_t v761;
  void *v762[2];
  uint64_t v763;
  char *v764[12];
  __int16 v765;
  uint64_t v766;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v653 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v4;
  v766 = *MEMORY[0x1E0C80C00];
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(v10);
  v655 = (uint64_t **)v12;
  v13 = *(_QWORD *)(v12 + 40) + 272;
  v720 = v11;
  v721 = v9;
  v722 = v7;
  v723 = v13;
  v724 = v726;
  v725 = 0x400000000;
  v727 = v729;
  v728 = 0x4000000000;
  v730 = 0u;
  v731 = 0;
  v732 = 0u;
  v733 = 0;
  v709[1] = 0;
  v709[0] = 0;
  v710 = 0;
  v711[1] = 0;
  v711[0] = 0;
  v712 = 0;
  v713 = (char *)v715;
  v714 = 0x400000000;
  v715[80] = 1;
  v716 = (char *)v718;
  v717 = 0x400000000;
  v718[80] = 1;
  v719 = &v720;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(v9, (uint64_t)&v706);
  v15 = (uint64_t *)v706;
  v656 = v11;
  if ((_DWORD)v707)
  {
    v669 = (uint64_t *)((char *)v706 + 8 * v707);
    while (1)
    {
      v16 = (llvm::Value *)*v15;
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*v15);
      if (!LoopPredecessor)
        goto LABEL_275;
      v18 = *(_QWORD *)(LoopPredecessor + 40);
      if (v18 == LoopPredecessor + 40)
        goto LABEL_275;
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      if (*(_BYTE *)(v19 + 16) != 30)
      {
        switch(*(_BYTE *)(v19 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_993;
          case 0x1F:
            v186 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_279;
          case 0x20:
            v186 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_279;
          case 0x27:
            v186 = *(_DWORD *)(v19 + 80) + 1;
LABEL_279:
            if (v186 != 1)
              goto LABEL_275;
            goto LABEL_10;
          default:
            goto LABEL_275;
        }
      }
      if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
        goto LABEL_275;
LABEL_10:
      v661 = v15;
      v701 = &v703;
      __b = (void *)0x100000000;
      v691 = v693;
      v692 = 0x100000000;
      if (*(_QWORD *)(**((_QWORD **)v16 + 4) + 40) == **((_QWORD **)v16 + 4) + 40)
        goto LABEL_253;
      v20 = *(_QWORD *)(**((_QWORD **)v16 + 4) + 48);
      v21 = (_DWORD *)(v20 - 24);
      v22 = v20 ? v20 - 24 : 0;
      if (!v20)
        goto LABEL_253;
      v676 = v16;
      if (*(_BYTE *)(v22 + 16) != 83)
        goto LABEL_253;
      do
      {
        if ((v21[5] & 0x7FFFFFF) != 2)
          goto LABEL_59;
        v753 = 0;
        v754 = 0;
        LODWORD(v755) = 0;
        v757 = 0;
        v758 = 0;
        v756 = 0;
        v752 = (void *)6;
        v759 = &v761;
        v760 = (void *)0x200000000;
        if (llvm::InductionDescriptor::isInductionPHI((unint64_t)v21, v16, (uint64_t)v722, (uint64_t)&v752, 0, 0))
        {
          v23 = *(unsigned __int8 *)(*(_QWORD *)v21 + 8);
          if (v23 == 15)
          {
            LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v16);
            v27 = v21[5];
            v28 = v27 & 0x7FFFFFF;
            if ((v27 & 0x7FFFFFF) != 0)
            {
              v29 = 0;
              while (1)
              {
                v30 = &v21[-8 * v28];
                if ((v27 & 0x40000000) != 0)
                  v30 = (_DWORD *)*((_QWORD *)v21 - 1);
                if (*(_QWORD *)&v30[8 * v21[15] + 2 * v29] == LoopLatch)
                  break;
                if (v28 == ++v29)
                  goto LABEL_31;
              }
            }
            else
            {
LABEL_31:
              LODWORD(v29) = -1;
            }
            if ((v27 & 0x40000000) != 0)
              v31 = (_DWORD *)*((_QWORD *)v21 - 1);
            else
              v31 = &v21[-8 * v28];
            v32 = *(_QWORD *)&v31[8 * v29];
            if (!v32 || *(_BYTE *)(v32 + 16) != 62 || (*(_DWORD *)(v32 + 20) & 0x7FFFFFF) != 2)
              goto LABEL_43;
            v740 = v21;
            v33 = &v691;
            goto LABEL_38;
          }
          if (v23 == 13 && v754 && v754[16] == 16)
          {
            v24 = (llvm::APInt *)(v754 + 24);
            v25 = *((_DWORD *)v754 + 8);
            if (v25 > 0x40)
            {
              v116 = llvm::APInt::countLeadingZerosSlowCase(v24) == v25;
              v16 = v676;
              if (!v116)
                goto LABEL_43;
            }
            else
            {
              v16 = v676;
              if (*(_QWORD *)v24)
                goto LABEL_43;
            }
            if (!*((_WORD *)v756 + 12) && *((_QWORD *)v756 + 4))
            {
              v740 = v21;
              v33 = &v701;
LABEL_38:
              sub_1C631156C((uint64_t)v33, &v740, (uint64_t)&v752);
            }
          }
        }
LABEL_43:
        if (v759 != &v761)
          free(v759);
        if (v754 && v754 != (char *)-8192 && v754 != (char *)-4096)
        {
          v34 = (unint64_t)v752 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v752 & 0xFFFFFFFFFFFFFFF8) = v753;
          if (v753)
          {
            *v753 = (void *)((unint64_t)*v753 & 7 | v34);
          }
          else
          {
            v35 = v754;
            v36 = ***(int32x2_t ****)v754;
            v37 = (unint64_t)v36[303];
            if (v37 <= v34)
            {
              v38 = v36[305].u32[0];
              if (v37 + 16 * v38 > v34)
              {
                v39 = v38 - 1;
                LODWORD(v40) = v39 & ((v754 >> 4) ^ (v754 >> 9));
                v41 = (char **)(v37 + 16 * v40);
                v42 = *v41;
                if (v754 != *v41)
                {
                  v43 = 1;
                  do
                  {
                    if (v42 == (char *)-4096)
                      goto LABEL_57;
                    v44 = v40 + v43++;
                    v40 = v44 & v39;
                    v42 = *(char **)(v37 + 16 * v40);
                  }
                  while (v754 != v42);
                  v41 = (char **)(v37 + 16 * v40);
                }
                *v41 = (char *)-8192;
                v14.n128_u64[0] = (unint64_t)vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                v36[304] = (int32x2_t)v14.n128_u64[0];
                v35 = v754;
LABEL_57:
                v35[17] &= ~1u;
              }
            }
          }
        }
LABEL_59:
        v45 = *((_QWORD *)v21 + 4);
        v21 = (_DWORD *)(v45 - 24);
        if (v45)
          v46 = v45 - 24;
        else
          v46 = 0;
      }
      while (v45 && *(_BYTE *)(v46 + 16) == 83);
      v47 = (void **)v691;
      if (!(_DWORD)v692)
        goto LABEL_251;
      v658 = (void **)((char *)v691 + 96 * v692);
      while (2)
      {
        v752 = *v47;
        sub_1C63117B4((uint64_t)&v753, (uint64_t)(v47 + 1));
        v48 = v752;
        sub_1C63117B4((uint64_t)&v746, (uint64_t)&v753);
        v680 = v748;
        v49 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v16);
        v50 = v48[5];
        v51 = v50 & 0x7FFFFFF;
        if ((v50 & 0x7FFFFFF) != 0)
        {
          v52 = 0;
          while (1)
          {
            v53 = (char *)&v48[-8 * v51];
            if ((v50 & 0x40000000) != 0)
              v53 = (char *)*((_QWORD *)v48 - 1);
            if (*(_QWORD *)&v53[32 * v48[15] + 8 * v52] == v49)
              break;
            if (v51 == ++v52)
              goto LABEL_75;
          }
        }
        else
        {
LABEL_75:
          LODWORD(v52) = -1;
        }
        v54 = v48;
        if ((v50 & 0x40000000) != 0)
          v55 = (char *)*((_QWORD *)v48 - 1);
        else
          v55 = (char *)&v48[-8 * v51];
        if ((_DWORD)__b)
        {
          v56 = (void **)v701;
          v667 = (llvm::Module *)((char *)v701 + 96 * __b);
          v673 = *(_QWORD *)&v55[32 * v52];
          v659 = v54;
          v657 = (v54 >> 4) ^ (v54 >> 9);
          while (2)
          {
            v740 = *v56;
            sub_1C63117B4((uint64_t)&v741, (uint64_t)(v56 + 1));
            v662 = v740;
            sub_1C63117B4((uint64_t)&v734, (uint64_t)&v741);
            if (*(_WORD *)(v737 + 24))
              v57 = 0;
            else
              v57 = *(_QWORD *)(v737 + 32);
            v58 = (_QWORD *)(v57 + 24);
            if (*(_DWORD *)(v57 + 32) >= 0x41u)
              v58 = (_QWORD *)*v58;
            v59 = *(_DWORD *)v58;
            if (*(_WORD *)(v749 + 24))
              v60 = 0;
            else
              v60 = *(_QWORD *)(v749 + 32);
            v61 = (unsigned int *)(v60 + 24);
            if (*(_DWORD *)(v60 + 32) >= 0x41u)
              v61 = *(unsigned int **)v61;
            v62 = *v61;
            v63 = v723;
            v64 = *(_QWORD *)(v673 + 72);
            sub_1C4768AD0(v723, v64);
            v66 = v65;
            v68 = v67 == 1;
            llvm::DataLayout::getAlignment(v63, v64);
            v71 = *v680;
            if (*v680 && *(_BYTE *)(v71 + 8) == 15 && !*(_QWORD *)(v71 + 24))
            {
              v72 = v69;
              if (v68)
              v62 /= ((1 << v72) + ((unint64_t)(v66 + 7) >> 3) - 1) & -(1 << v72);
            }
            if ((_DWORD)v62 != v59)
              goto LABEL_122;
            v73 = v723;
            IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v723, *v680);
            v75 = *(_QWORD *)(v673 + 72);
            sub_1C4768AD0(v73, v75);
            v77 = v76;
            v79 = v78 == 1;
            llvm::DataLayout::getAlignment(v73, v75);
            v82 = v81;
            if (v79)
            v83 = ((1 << v82) + ((unint64_t)(v77 + 7) >> 3) - 1) & -(1 << v82);
            v690 = IndexTypeSizeInBits;
            if (IndexTypeSizeInBits > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, v83, 0);
              IndexTypeSizeInBits = v690;
              if (v690 <= 0x40)
              {
                v85 = __src;
                goto LABEL_103;
              }
              v129 = (((unint64_t)v690 + 63) >> 3) & 0x3FFFFFF8;
              v86 = (void *)operator new[]();
              memcpy(v86, __src, v129);
              v85 = (void *)operator new[]();
              memcpy(v85, v86, v129);
            }
            else
            {
              if (IndexTypeSizeInBits)
                v84 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
              else
                v84 = 0;
              v85 = (void *)(v84 & v83);
              __src = (void *)(v84 & v83);
LABEL_103:
              v86 = v85;
            }
            if (v733)
            {
              v87 = (v733 - 1) & v657;
              v88 = (_QWORD *)(v732 + 40 * v87);
              v89 = (_DWORD *)*v88;
              if (v659 == (_DWORD *)*v88)
              {
LABEL_106:
                if (IndexTypeSizeInBits >= 0x41 && v85)
                  MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
                goto LABEL_116;
              }
              v114 = 0;
              v115 = 1;
              while (v89 != (_DWORD *)-4096)
              {
                if (v114)
                  v116 = 0;
                else
                  v116 = v89 == (_DWORD *)-8192;
                if (v116)
                  v114 = v88;
                v117 = v87 + v115++;
                v87 = v117 & (v733 - 1);
                v88 = (_QWORD *)(v732 + 40 * v87);
                v89 = (_DWORD *)*v88;
                if (v659 == (_DWORD *)*v88)
                  goto LABEL_106;
              }
              if (v114)
                v90 = v114;
              else
                v90 = v88;
            }
            else
            {
              v90 = 0;
            }
            if (4 * DWORD2(v732) + 4 >= 3 * v733)
            {
              sub_1C5AD7DDC((uint64_t *)&v732, 2 * v733);
              v118 = v733 - 1;
              v119 = (v733 - 1) & v657;
              v90 = (_QWORD *)(v732 + 40 * v119);
              v120 = (_DWORD *)*v90;
              v121 = v659;
              if (v659 == (_DWORD *)*v90)
                goto LABEL_179;
              v122 = 0;
              v123 = 1;
              while (v120 != (_DWORD *)-4096)
              {
                if (v122)
                  v124 = 0;
                else
                  v124 = v120 == (_DWORD *)-8192;
                if (v124)
                  v122 = v90;
                v125 = v119 + v123++;
                v119 = v125 & v118;
                v90 = (_QWORD *)(v732 + 40 * (v125 & v118));
                v120 = (_DWORD *)*v90;
                if (v659 == (_DWORD *)*v90)
                {
LABEL_191:
                  v91 = v659;
                  goto LABEL_113;
                }
              }
            }
            else
            {
              if (v733 + ~DWORD2(v732) - HIDWORD(v732) > v733 >> 3)
                goto LABEL_112;
              sub_1C5AD7DDC((uint64_t *)&v732, v733);
              v126 = v733 - 1;
              v127 = (v733 - 1) & v657;
              v90 = (_QWORD *)(v732 + 40 * v127);
              v128 = *v90;
              v121 = v659;
              if (v659 == (_DWORD *)*v90)
              {
LABEL_179:
                v91 = v121;
                goto LABEL_113;
              }
              v122 = 0;
              v130 = 1;
              while (v128 != -4096)
              {
                if (v122)
                  v131 = 0;
                else
                  v131 = v128 == -8192;
                if (v131)
                  v122 = v90;
                v132 = v127 + v130++;
                v127 = v132 & v126;
                v90 = (_QWORD *)(v732 + 40 * (v132 & v126));
                v128 = *v90;
                if (v659 == (_DWORD *)*v90)
                  goto LABEL_191;
              }
            }
            if (v122)
              v90 = v122;
LABEL_112:
            v91 = (_DWORD *)*v90;
LABEL_113:
            ++DWORD2(v732);
            if (v91 != (_DWORD *)-4096)
              --HIDWORD(v732);
            *v90 = v659;
            v90[1] = v680;
            *((_DWORD *)v90 + 8) = IndexTypeSizeInBits;
            v90[2] = v662;
            v90[3] = v85;
LABEL_116:
            if (IndexTypeSizeInBits >= 0x41 && v86)
              MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
            if (v690 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_122:
            v16 = v676;
            if (v738 != &v739)
              free(v738);
            if (v736[0] && v736[0] != -8192 && v736[0] != -4096)
            {
              v92 = (unint64_t)v734 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)((unint64_t)v734 & 0xFFFFFFFFFFFFFFF8) = v735;
              if (v735)
              {
                *(_QWORD *)v735 = *(_QWORD *)v735 & 7 | v92;
              }
              else
              {
                v93 = v736[0];
                v94 = ***(int32x2_t ****)v736[0];
                v95 = (unint64_t)v94[303];
                if (v95 <= v92)
                {
                  v96 = v94[305].u32[0];
                  if (v95 + 16 * v96 > v92)
                  {
                    v97 = v96 - 1;
                    LODWORD(v98) = v97 & ((LODWORD(v736[0]) >> 4) ^ (LODWORD(v736[0]) >> 9));
                    v99 = (uint64_t *)(v95 + 16 * v98);
                    v100 = *v99;
                    if (v736[0] == *v99)
                    {
LABEL_135:
                      *v99 = -8192;
                      v14.n128_u64[0] = (unint64_t)vadd_s32(v94[304], (int32x2_t)0x1FFFFFFFFLL);
                      v94[304] = (int32x2_t)v14.n128_u64[0];
                      v93 = v736[0];
                    }
                    else
                    {
                      v101 = 1;
                      while (v100 != -4096)
                      {
                        v102 = v98 + v101++;
                        v98 = v102 & v97;
                        v100 = *(_QWORD *)(v95 + 16 * v98);
                        if (v736[0] == v100)
                        {
                          v99 = (uint64_t *)(v95 + 16 * v98);
                          goto LABEL_135;
                        }
                      }
                    }
                    *(_BYTE *)(v93 + 17) &= ~1u;
                  }
                }
              }
            }
            if (v744 != &v745)
              free(v744);
            if (v743 && v743 != (int32x2_t ****)-8192 && v743 != (int32x2_t ****)-4096)
            {
              v103 = v741 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v741 & 0xFFFFFFFFFFFFFFF8) = v742;
              if (v742)
              {
                *v742 = *v742 & 7 | v103;
              }
              else
              {
                v104 = v743;
                v105 = ***v743;
                v106 = (unint64_t)v105[303];
                if (v106 <= v103)
                {
                  v107 = v105[305].u32[0];
                  if (v106 + 16 * v107 > v103)
                  {
                    v108 = v107 - 1;
                    LODWORD(v109) = v108 & ((v743 >> 4) ^ (v743 >> 9));
                    v110 = (int32x2_t *****)(v106 + 16 * v109);
                    v111 = *v110;
                    if (v743 == *v110)
                    {
LABEL_151:
                      *v110 = (int32x2_t ****)-8192;
                      v14.n128_u64[0] = (unint64_t)vadd_s32(v105[304], (int32x2_t)0x1FFFFFFFFLL);
                      v105[304] = (int32x2_t)v14.n128_u64[0];
                      v104 = v743;
                    }
                    else
                    {
                      v112 = 1;
                      while (v111 != (int32x2_t ****)-4096)
                      {
                        v113 = v109 + v112++;
                        v109 = v113 & v108;
                        v111 = *(int32x2_t *****)(v106 + 16 * v109);
                        if (v743 == v111)
                        {
                          v110 = (int32x2_t *****)(v106 + 16 * v109);
                          goto LABEL_151;
                        }
                      }
                    }
                    *((_BYTE *)v104 + 17) &= ~1u;
                  }
                }
              }
            }
            v56 += 12;
            if (v56 == (void **)v667)
              break;
            continue;
          }
        }
        if (v750 != &v751)
          free(v750);
        if (v748 && v748 != (uint64_t *)-8192 && v748 != (uint64_t *)-4096)
        {
          v133 = (unint64_t)v746 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v746 & 0xFFFFFFFFFFFFFFF8) = v747;
          if (v747)
          {
            *v747 = *v747 & 7 | v133;
          }
          else
          {
            v134 = v748;
            v135 = **(int32x2_t ***)*v748;
            v136 = (unint64_t)v135[303];
            if (v136 <= v133)
            {
              v137 = v135[305].u32[0];
              if (v136 + 16 * v137 > v133)
              {
                v138 = v137 - 1;
                LODWORD(v139) = v138 & ((v748 >> 4) ^ (v748 >> 9));
                v140 = (uint64_t **)(v136 + 16 * v139);
                v141 = *v140;
                if (v748 == *v140)
                {
LABEL_209:
                  *v140 = (uint64_t *)-8192;
                  v14.n128_u64[0] = (unint64_t)vadd_s32(v135[304], (int32x2_t)0x1FFFFFFFFLL);
                  v135[304] = (int32x2_t)v14.n128_u64[0];
                  v134 = v748;
                }
                else
                {
                  v142 = 1;
                  while (v141 != (uint64_t *)-4096)
                  {
                    v143 = v139 + v142++;
                    v139 = v143 & v138;
                    v141 = *(uint64_t **)(v136 + 16 * v139);
                    if (v748 == v141)
                    {
                      v140 = (uint64_t **)(v136 + 16 * v139);
                      goto LABEL_209;
                    }
                  }
                }
                *((_BYTE *)v134 + 17) &= ~1u;
              }
            }
          }
        }
        if (v760 != v762)
          free(v760);
        if (v755 && v755 != (int32x2_t ****)-8192 && v755 != (int32x2_t ****)-4096)
        {
          v144 = (unint64_t)v753 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)((unint64_t)v753 & 0xFFFFFFFFFFFFFFF8) = v754;
          if (v754)
          {
            *(_QWORD *)v754 = *(_QWORD *)v754 & 7 | v144;
          }
          else
          {
            v145 = v755;
            v146 = ***v755;
            v147 = (unint64_t)v146[303];
            if (v147 <= v144)
            {
              v148 = v146[305].u32[0];
              if (v147 + 16 * v148 > v144)
              {
                v149 = v148 - 1;
                LODWORD(v150) = v149 & ((v755 >> 4) ^ (v755 >> 9));
                v151 = (int32x2_t *****)(v147 + 16 * v150);
                v152 = *v151;
                if (v755 == *v151)
                {
LABEL_225:
                  *v151 = (int32x2_t ****)-8192;
                  v14.n128_u64[0] = (unint64_t)vadd_s32(v146[304], (int32x2_t)0x1FFFFFFFFLL);
                  v146[304] = (int32x2_t)v14.n128_u64[0];
                  v145 = v755;
                }
                else
                {
                  v153 = 1;
                  while (v152 != (int32x2_t ****)-4096)
                  {
                    v154 = v150 + v153++;
                    v150 = v154 & v149;
                    v152 = *(int32x2_t *****)(v147 + 16 * v150);
                    if (v755 == v152)
                    {
                      v151 = (int32x2_t *****)(v147 + 16 * v150);
                      goto LABEL_225;
                    }
                  }
                }
                *((_BYTE *)v145 + 17) &= ~1u;
              }
            }
          }
        }
        v47 += 12;
        if (v47 != v658)
          continue;
        break;
      }
      v47 = (void **)v691;
      if ((_DWORD)v692)
      {
        v155 = (void **)((char *)v691 + 96 * v692);
        do
        {
          v156 = (char *)*(v155 - 4);
          if (v156 != (char *)(v155 - 2))
            free(v156);
          v157 = (uint64_t)*(v155 - 9);
          if (v157 && v157 != -8192 && v157 != -4096)
          {
            v158 = (unint64_t)*(v155 - 11) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v158 = *(v155 - 10);
            v159 = (unint64_t *)*(v155 - 10);
            if (v159)
            {
              *v159 = *v159 & 7 | v158;
            }
            else
            {
              v160 = (uint64_t)*(v155 - 9);
              v161 = ***(int32x2_t ****)v160;
              v162 = (unint64_t)v161[303];
              if (v162 <= v158)
              {
                v163 = v161[305].u32[0];
                if (v162 + 16 * v163 > v158)
                {
                  v164 = v163 - 1;
                  LODWORD(v165) = v164 & ((v160 >> 4) ^ (v160 >> 9));
                  v166 = (uint64_t *)(v162 + 16 * v165);
                  v167 = *v166;
                  if (v160 == *v166)
                  {
LABEL_246:
                    *v166 = -8192;
                    v14.n128_u64[0] = (unint64_t)vadd_s32(v161[304], (int32x2_t)0x1FFFFFFFFLL);
                    v161[304] = (int32x2_t)v14.n128_u64[0];
                    v160 = (uint64_t)*(v155 - 9);
                  }
                  else
                  {
                    v168 = 1;
                    while (v167 != -4096)
                    {
                      v169 = v165 + v168++;
                      v165 = v169 & v164;
                      v167 = *(_QWORD *)(v162 + 16 * v165);
                      if (v160 == v167)
                      {
                        v166 = (uint64_t *)(v162 + 16 * v165);
                        goto LABEL_246;
                      }
                    }
                  }
                  *(_BYTE *)(v160 + 17) &= ~1u;
                }
              }
            }
          }
          v155 -= 12;
        }
        while (v155 != v47);
        v47 = (void **)v691;
      }
LABEL_251:
      if (v47 != v693)
        free(v47);
LABEL_253:
      v170 = (uint64_t *)v701;
      if ((_DWORD)__b)
      {
        v171 = (uint64_t *)((char *)v701 + 96 * __b);
        do
        {
          v172 = (char *)*(v171 - 4);
          if (v172 != (char *)(v171 - 2))
            free(v172);
          v173 = *(v171 - 9);
          if (v173 && v173 != -8192 && v173 != -4096)
          {
            v174 = *(v171 - 11) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v174 = *(v171 - 10);
            v175 = (unint64_t *)*(v171 - 10);
            if (v175)
            {
              *v175 = *v175 & 7 | v174;
            }
            else
            {
              v176 = *(v171 - 9);
              v177 = ***(int32x2_t ****)v176;
              v178 = (unint64_t)v177[303];
              if (v178 <= v174)
              {
                v179 = v177[305].u32[0];
                if (v178 + 16 * v179 > v174)
                {
                  v180 = v179 - 1;
                  LODWORD(v181) = v180 & ((v176 >> 4) ^ (v176 >> 9));
                  v182 = (uint64_t *)(v178 + 16 * v181);
                  v183 = *v182;
                  if (v176 == *v182)
                  {
LABEL_268:
                    *v182 = -8192;
                    v14.n128_u64[0] = (unint64_t)vadd_s32(v177[304], (int32x2_t)0x1FFFFFFFFLL);
                    v177[304] = (int32x2_t)v14.n128_u64[0];
                    v176 = *(v171 - 9);
                  }
                  else
                  {
                    v184 = 1;
                    while (v183 != -4096)
                    {
                      v185 = v181 + v184++;
                      v181 = v185 & v180;
                      v183 = *(_QWORD *)(v178 + 16 * v181);
                      if (v176 == v183)
                      {
                        v182 = (uint64_t *)(v178 + 16 * v181);
                        goto LABEL_268;
                      }
                    }
                  }
                  *(_BYTE *)(v176 + 17) &= ~1u;
                }
              }
            }
          }
          v171 -= 12;
        }
        while (v171 != v170);
        v170 = (uint64_t *)v701;
      }
      v15 = v661;
      if (v170 != &v703)
        free(v170);
LABEL_275:
      if (++v15 == v669)
      {
        v15 = (uint64_t *)v706;
        break;
      }
    }
  }
  if (v15 != (uint64_t *)v708)
    free(v15);
  v187 = v655;
  v654 = byte_1ED81BB58;
  if (!byte_1ED81BB58)
  {
    v668 = 0;
    goto LABEL_299;
  }
  v188 = **v655;
  v189 = operator new();
  v190 = v189;
  if ((*((_BYTE *)v655 + 23) & 0x10) == 0)
  {
    v201 = 0;
    v200 = &byte_1C871356D;
    goto LABEL_296;
  }
  v191 = *(_QWORD *)**v655;
  v192 = *(_QWORD *)(v191 + 152);
  v193 = *(unsigned int *)(v191 + 168);
  if (!(_DWORD)v193)
    goto LABEL_294;
  LODWORD(v194) = (v193 - 1) & ((v655 >> 4) ^ (v655 >> 9));
  v195 = (uint64_t ***)(v192 + 16 * v194);
  v196 = *v195;
  if (*v195 != v655)
  {
    v197 = 1;
    while (v196 != (uint64_t **)-4096)
    {
      v198 = v194 + v197++;
      v194 = v198 & (v193 - 1);
      v196 = *(uint64_t ***)(v192 + 16 * v194);
      if (v196 == v655)
      {
        v195 = (uint64_t ***)(v192 + 16 * v194);
        goto LABEL_295;
      }
    }
LABEL_294:
    v195 = (uint64_t ***)(v192 + 16 * v193);
  }
LABEL_295:
  v199 = v195[1];
  v202 = (size_t)*v199;
  v200 = (char *)(v199 + 2);
  v201 = v202;
LABEL_296:
  llvm::Module::Module(v189, v200, v201, v188);
  if (*(char *)(v190 + 215) < 0)
    operator delete(*(void **)(v190 + 192));
  *(_BYTE *)(v190 + 192) = 0;
  v668 = (llvm::Module *)v190;
  *(_BYTE *)(v190 + 215) = 0;
  v187 = v655;
LABEL_299:
  v203 = v187 + 9;
  v204 = v187[10];
  if (v204 != (uint64_t *)(v187 + 9))
  {
    v664 = v187 + 9;
    while (1)
    {
      v212 = v204 ? (uint64_t)(v204 - 3) : 0;
      v213 = *(unsigned int *)(v11 + 40);
      if ((_DWORD)v213)
      {
        v214 = *(_QWORD *)(v11 + 24);
        v681 = (v212 >> 4) ^ (v212 >> 9);
        LODWORD(v215) = v681 & (v213 - 1);
        v216 = (uint64_t *)(v214 + 16 * v215);
        v217 = *v216;
        if (v212 != *v216)
        {
          v218 = 1;
          do
          {
            if (v217 == -4096)
              goto LABEL_696;
            v219 = v215 + v218++;
            v215 = v219 & (v213 - 1);
            v217 = *(_QWORD *)(v214 + 16 * v215);
          }
          while (v212 != v217);
          v216 = (uint64_t *)(v214 + 16 * v215);
        }
        if (v216 != (uint64_t *)(v214 + 16 * v213) && v216[1])
        {
          v670 = v204;
          v220 = (_QWORD *)(v212 + 40);
          v221 = *(_QWORD **)(v212 + 48);
          if (v221 != (_QWORD *)(v212 + 40))
          {
            v222 = 1;
            while (1)
            {
              if (v221)
                v223 = (uint64_t)(v221 - 3);
              else
                v223 = 0;
              v224 = *(unsigned __int8 *)(v223 + 16);
              if (v224 == 81)
                v225 = (_QWORD *)v223;
              else
                v225 = 0;
              if (!v221 || v224 != 81)
              {
                if (!v221
                  || v224 != 84
                  || (v236 = *(_QWORD *)(v223 - 32)) == 0
                  || *(_BYTE *)(v236 + 16)
                  || *(_QWORD *)(v236 + 24) != *(_QWORD *)(v223 + 72)
                  || *(_DWORD *)(v236 + 36) != 284)
                {
                  v691 = 0;
                  LODWORD(v701) = 7;
                  __b = 0;
                  v703 = (uint64_t)&v691;
                  if (!sub_1C4E75A6C((uint64_t)&v701, v223) || *((_BYTE *)v691 + 16) != 81)
                    goto LABEL_381;
                  if ((v222 & 1) != 0)
                  {
                    v245 = *(_QWORD *)(v720 + 24);
                    v246 = *(unsigned int *)(v720 + 40);
                    if (!(_DWORD)v246)
                      goto LABEL_376;
                    v247 = *(_QWORD *)(v223 + 40);
                    LODWORD(v248) = ((v247 >> 4) ^ (v247 >> 9)) & (v246 - 1);
                    v249 = (uint64_t *)(v245 + 16 * v248);
                    v250 = *v249;
                    if (v247 != *v249)
                    {
                      v251 = 1;
                      while (v250 != -4096)
                      {
                        v252 = v248 + v251++;
                        v248 = v252 & (v246 - 1);
                        v250 = *(_QWORD *)(v245 + 16 * v248);
                        if (v247 == v250)
                        {
                          v249 = (uint64_t *)(v245 + 16 * v248);
                          goto LABEL_377;
                        }
                      }
LABEL_376:
                      v249 = (uint64_t *)(v245 + 16 * v246);
                    }
LABEL_377:
                    v271 = v249[1];
                    v701 = v691;
                    __b = *(void **)(v271 + 72);
                    LOWORD(v703) = 0;
                    v704 = 0;
                    v272 = *((unsigned __int8 *)v691 + 16);
LABEL_380:
                    BYTE2(v703) = (v272 - 81) < 2;
                    v14 = sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
LABEL_381:
                    v274 = *(unsigned __int8 *)(v223 + 16);
                    if (v274 == 62)
                      v275 = v223;
                    else
                      v275 = 0;
                    if (!v221 || v274 != 62)
                      goto LABEL_430;
                    if ((*(_BYTE *)(v275 + 17) & 2) == 0)
                      goto LABEL_429;
                    if (sub_1C4F8CF08(v275, 1, 1))
                    {
                      v276 = *(_QWORD *)(v720 + 24);
                      v277 = *(unsigned int *)(v720 + 40);
                      if (!(_DWORD)v277)
                        goto LABEL_424;
                      LODWORD(v278) = (v277 - 1) & v681;
                      v279 = (uint64_t *)(v276 + 16 * v278);
                      v280 = *v279;
                      if (v212 != *v279)
                      {
                        v281 = 1;
                        while (v280 != -4096)
                        {
                          v282 = v278 + v281++;
                          v278 = v282 & (v277 - 1);
                          v280 = *(_QWORD *)(v276 + 16 * v278);
                          if (v212 == v280)
                          {
                            v279 = (uint64_t *)(v276 + 16 * v278);
                            goto LABEL_425;
                          }
                        }
LABEL_424:
                        v279 = (uint64_t *)(v276 + 16 * v277);
                      }
LABEL_425:
                      if (v279 == (uint64_t *)(v276 + 16 * v277))
                        v296 = 0;
                      else
                        v296 = v279[1];
                      sub_1C5AD7F84((uint64_t)&v720, (_QWORD **)v275, v296);
LABEL_429:
                      v274 = *(unsigned __int8 *)(v223 + 16);
LABEL_430:
                      v297 = 0;
                      if (v274 != 29 && v274 != 35)
                      {
                        if (v274 == 80)
                        {
                          v300 = *(_QWORD *)(*(_QWORD *)(v223 + 40) + 56);
                          v301 = *(_DWORD *)(v300 + 20);
                          if ((v301 & 0x40000000) != 0)
                            v302 = *(llvm::Value ***)(v300 - 8);
                          else
                            v302 = (llvm::Value **)(v300 - 32 * (v301 & 0x7FFFFFF));
                          v297 = llvm::classifyEHPersonality(*v302, v244) == 10;
                        }
                        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v223) & 1) != 0)
                        {
                          v297 = 0;
                        }
                        else
                        {
                          v297 = llvm::Instruction::willReturn((llvm::Instruction *)v223);
                        }
                      }
                      v222 &= v297;
                      goto LABEL_436;
                    }
                    v283 = *(_QWORD *)(v275 + 8);
                    if (!v283)
                      goto LABEL_429;
                    v284 = 0;
                    while (2)
                    {
                      v285 = *(_QWORD *)(v283 + 24);
                      if (v285)
                        v286 = *(unsigned __int8 *)(v285 + 16) >= 0x1Cu;
                      else
                        v286 = 0;
                      if (v286)
                      {
                        v287 = *(_QWORD *)(v285 + 40);
                        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v720, v287)
                          && (!v284
                           || v284 != v287
                           && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v720, v284, v287)))
                        {
                          v701 = v705;
                          __b = v705;
                          v703 = 16;
                          LODWORD(v704) = 0;
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, v275);
                          if ((llvm::propagatesPoison(v283) && (sub_1C4F8CF08(v285, 1, 1) & 1) != 0
                             || llvm::mustTriggerUB(v285, &v701, 0))
                            && llvm::isGuaranteedToTransferExecutionToSuccessor(*(_QWORD *)(v287 + 48), v285 + 24, 32))
                          {
                            v288 = *(_QWORD *)(v720 + 24);
                            v289 = *(unsigned int *)(v720 + 40);
                            if (!(_DWORD)v289)
                              goto LABEL_415;
                            LODWORD(v290) = (v289 - 1) & ((v287 >> 4) ^ (v287 >> 9));
                            v291 = (uint64_t *)(v288 + 16 * v290);
                            v292 = *v291;
                            if (v287 != *v291)
                            {
                              v293 = 1;
                              while (v292 != -4096)
                              {
                                v294 = v290 + v293++;
                                v290 = v294 & (v289 - 1);
                                v292 = *(_QWORD *)(v288 + 16 * v290);
                                if (v287 == v292)
                                {
                                  v291 = (uint64_t *)(v288 + 16 * v290);
                                  goto LABEL_416;
                                }
                              }
LABEL_415:
                              v291 = (uint64_t *)(v288 + 16 * v289);
                            }
LABEL_416:
                            if (v291 == (uint64_t *)(v288 + 16 * v289))
                              v295 = 0;
                            else
                              v295 = v291[1];
                            sub_1C5AD7F84((uint64_t)&v720, (_QWORD **)v275, v295);
                            v284 = v287;
                          }
                          if (__b != v701)
                            free(__b);
                        }
                      }
                      v283 = *(_QWORD *)(v283 + 8);
                      if (!v283)
                        goto LABEL_429;
                      continue;
                    }
                  }
                  v255 = *(_QWORD *)(v720 + 24);
                  v256 = *(unsigned int *)(v720 + 40);
                  if ((_DWORD)v256)
                  {
                    v257 = *(_QWORD *)(v223 + 40);
                    LODWORD(v258) = ((v257 >> 4) ^ (v257 >> 9)) & (v256 - 1);
                    v259 = (uint64_t *)(v255 + 16 * v258);
                    v260 = *v259;
                    if (v257 != *v259)
                    {
                      v261 = 1;
                      while (v260 != -4096)
                      {
                        v262 = v258 + v261++;
                        v258 = v262 & (v256 - 1);
                        v260 = *(_QWORD *)(v255 + 16 * v258);
                        if (v257 == v260)
                        {
                          v259 = (uint64_t *)(v255 + 16 * v258);
                          goto LABEL_379;
                        }
                      }
                      goto LABEL_378;
                    }
                  }
                  else
                  {
LABEL_378:
                    v259 = (uint64_t *)(v255 + 16 * v256);
                  }
LABEL_379:
                  v273 = v259[1];
                  v701 = (void *)v223;
                  __b = *(void **)(v273 + 72);
                  LOWORD(v703) = 0;
                  v704 = 0;
                  v272 = *(unsigned __int8 *)(v223 + 16);
                  goto LABEL_380;
                }
                v237 = *(_QWORD *)(v720 + 24);
                v238 = *(unsigned int *)(v720 + 40);
                if ((_DWORD)v238)
                {
                  LODWORD(v239) = (v238 - 1) & v681;
                  v240 = (uint64_t *)(v237 + 16 * v239);
                  v241 = *v240;
                  if (v212 != *v240)
                  {
                    v242 = 1;
                    while (v241 != -4096)
                    {
                      v243 = v239 + v242++;
                      v239 = v243 & (v238 - 1);
                      v241 = *(_QWORD *)(v237 + 16 * v239);
                      if (v212 == v241)
                      {
                        v240 = (uint64_t *)(v237 + 16 * v239);
                        goto LABEL_441;
                      }
                    }
                    goto LABEL_440;
                  }
                }
                else
                {
LABEL_440:
                  v240 = (uint64_t *)(v237 + 16 * v238);
                }
LABEL_441:
                v299 = v240[1];
                v701 = (void *)v223;
                v254 = *(void **)(v299 + 72);
                goto LABEL_362;
              }
              v226 = v225[1];
              if (v226 && !*(_QWORD *)(v226 + 8))
              {
                v227 = *(_QWORD *)(v226 + 24);
                if (v227 && *(unsigned __int8 *)(v227 + 16) >= 0x1Cu)
                {
                  v263 = *(_QWORD *)(v720 + 24);
                  v264 = *(unsigned int *)(v720 + 40);
                  if (!(_DWORD)v264)
                    goto LABEL_438;
                  v265 = *(_QWORD *)(v227 + 40);
                  LODWORD(v266) = ((v265 >> 4) ^ (v265 >> 9)) & (v264 - 1);
                  v267 = (uint64_t *)(v263 + 16 * v266);
                  v268 = *v267;
                  if (v265 != *v267)
                  {
                    v269 = 1;
                    while (v268 != -4096)
                    {
                      v270 = v266 + v269++;
                      v266 = v270 & (v264 - 1);
                      v268 = *(_QWORD *)(v263 + 16 * v266);
                      if (v265 == v268)
                      {
                        v267 = (uint64_t *)(v263 + 16 * v266);
                        goto LABEL_439;
                      }
                    }
LABEL_438:
                    v267 = (uint64_t *)(v263 + 16 * v264);
                  }
LABEL_439:
                  v298 = v267[1];
                  v701 = v225;
                  __b = *(void **)(v298 + 72);
                  LOWORD(v703) = 1;
                  v704 = 0;
                  BYTE2(v703) = 1;
                  goto LABEL_363;
                }
              }
              v229 = *(_QWORD *)(v720 + 24);
              v230 = *(unsigned int *)(v720 + 40);
              if (!(_DWORD)v230)
                goto LABEL_360;
              LODWORD(v231) = (v230 - 1) & v681;
              v232 = (uint64_t *)(v229 + 16 * v231);
              v233 = *v232;
              if (v212 != *v232)
                break;
LABEL_361:
              v253 = v232[1];
              v701 = v225;
              v254 = *(void **)(v253 + 72);
LABEL_362:
              __b = v254;
              LOBYTE(v703) = 1;
              v704 = 0;
              *(_WORD *)((char *)&v703 + 1) = 0;
LABEL_363:
              v14 = sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
LABEL_436:
              v221 = (_QWORD *)v221[1];
              if (v221 == v220)
                goto LABEL_447;
            }
            v234 = 1;
            while (v233 != -4096)
            {
              v235 = v231 + v234++;
              v231 = v235 & (v230 - 1);
              v233 = *(_QWORD *)(v229 + 16 * v231);
              if (v212 == v233)
              {
                v232 = (uint64_t *)(v229 + 16 * v231);
                goto LABEL_361;
              }
            }
LABEL_360:
            v232 = (uint64_t *)(v229 + 16 * v230);
            goto LABEL_361;
          }
LABEL_447:
          v303 = (_QWORD *)*v220;
          v11 = v656;
          v203 = v664;
          v204 = v670;
          if ((_QWORD *)*v220 != v220)
          {
            v304 = v303 ? (uint64_t)(v303 - 3) : 0;
            v305 = *(unsigned __int8 *)(v304 + 16) - 40;
            v306 = v305 >= 0xFFFFFFF5 ? v304 : 0;
            if (v303)
            {
              v307 = *(_BYTE *)(v306 + 16) == 30 && v305 >= 0xFFFFFFF5;
              if (v307 && (*(_DWORD *)(v306 + 20) & 0x7FFFFFF) == 3)
                break;
            }
          }
        }
      }
LABEL_696:
      v204 = (uint64_t *)v204[1];
      if (v204 == (uint64_t *)v203)
        goto LABEL_300;
    }
    v308 = *(_DWORD *)(v721 + 16);
    if (!v308)
    {
LABEL_468:
      v316 = *(unsigned __int8 **)(v306 - 96);
      v740 = 0;
      v746 = 0;
      v701 = &v740;
      __b = &v746;
      if ((sub_1C4849098((_QWORD **)&v701, (uint64_t)v316) & 1) != 0
        || (v691 = &v740, v692 = (uint64_t)&v746, (sub_1C4848F80((_QWORD **)&v691, (uint64_t)v316) & 1) != 0))
      {
        v317 = sub_1C48491B0((uint64_t)&v701, v316);
        v318 = sub_1C5088268((uint64_t)&v701, v316);
        v319 = *(_QWORD *)(v306 + 32 * (v317 << 63 >> 63) - 32);
        if (sub_1C5AD8974(&v720, (llvm::BasicBlock **)v212, v319))
        {
          v320 = v318 & ~(_DWORD)v317;
          v691 = v693;
          v692 = 0x600000000;
          v701 = v705;
          __b = v705;
          v703 = 8;
          LODWORD(v704) = 0;
          if (v320)
          {
            v321 = v746;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v746);
            if (v322)
            {
              v323 = v692;
              if (v692 >= (unint64_t)HIDWORD(v692))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                v323 = v692;
              }
              *((_QWORD *)v691 + v323) = v321;
              LODWORD(v692) = v692 + 1;
            }
            v324 = v740;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v740);
            v325 = v692;
            if (v326)
            {
              if (v692 >= HIDWORD(v692))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                v325 = v692;
              }
              *((_QWORD *)v691 + v325) = v324;
              v325 = v692 + 1;
            }
            if (v325)
            {
              while (1)
              {
                v327 = *((_QWORD *)v691 + v325 - 1);
                LODWORD(v692) = v325 - 1;
                if (!v327 || *(_BYTE *)(v327 + 16) != 81)
                {
                  v734 = 0;
                  v706 = 0;
                  v752 = &v734;
                  v753 = &v706;
                  if (sub_1C4848F80((_QWORD **)&v752, v327))
                  {
                    v335 = v706;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v706);
                    if (v336)
                    {
                      v337 = v692;
                      if (v692 >= (unint64_t)HIDWORD(v692))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                        v337 = v692;
                      }
                      *((_QWORD *)v691 + v337) = v335;
                      LODWORD(v692) = v692 + 1;
                    }
                    v338 = v734;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v734);
                    if (v339)
                    {
                      v340 = v692;
                      if (v692 >= (unint64_t)HIDWORD(v692))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                        v340 = v692;
                      }
                      *((_QWORD *)v691 + v340) = v338;
                      LODWORD(v692) = v692 + 1;
                    }
                  }
                  goto LABEL_503;
                }
                v328 = *(_QWORD *)(v720 + 24);
                v329 = *(unsigned int *)(v720 + 40);
                if (!(_DWORD)v329)
                  goto LABEL_498;
                LODWORD(v330) = (v329 - 1) & ((v319 >> 4) ^ (v319 >> 9));
                v331 = (uint64_t *)(v328 + 16 * v330);
                v332 = *v331;
                if (v319 != *v331)
                  break;
LABEL_499:
                if (v331 == (uint64_t *)(v328 + 16 * v329))
                  v341 = 0;
                else
                  v341 = v331[1];
                sub_1C5AD8BF0((llvm::Value *)&v720, v327, v341);
LABEL_503:
                v325 = v692;
                if (!(_DWORD)v692)
                  goto LABEL_514;
              }
              v333 = 1;
              while (v332 != -4096)
              {
                v334 = v330 + v333++;
                v330 = v334 & (v329 - 1);
                v332 = *(_QWORD *)(v328 + 16 * v330);
                if (v319 == v332)
                {
                  v331 = (uint64_t *)(v328 + 16 * v330);
                  goto LABEL_499;
                }
              }
LABEL_498:
              v331 = (uint64_t *)(v328 + 16 * v329);
              goto LABEL_499;
            }
LABEL_514:
            LODWORD(v692) = 0;
            if (__b != v701)
            {
              if (v703 >= 0x21 && 4 * (HIDWORD(v703) - (int)v704) < v703)
              {
                free(__b);
                v482 = 1 << (33 - __clz(HIDWORD(v703) - v704 - 1));
                v211 = (HIDWORD(v703) - v704) > 0x10;
                LODWORD(v704) = 0;
                if (v211)
                  v483 = v482;
                else
                  v483 = 32;
                v703 = v483;
                v484 = malloc_type_malloc(8 * v483, 0x4065EBACuLL);
                if (!v484)
LABEL_993:
                  llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                __b = v484;
                memset(v484, 255, 8 * v703);
                goto LABEL_516;
              }
              memset(__b, 255, 8 * v703);
            }
            LODWORD(v704) = 0;
            HIDWORD(v703) = 0;
          }
LABEL_516:
          v351 = v746;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v746);
          if (v352)
          {
            v353 = v692;
            if (v692 >= (unint64_t)HIDWORD(v692))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
              v353 = v692;
            }
            *((_QWORD *)v691 + v353) = v351;
            LODWORD(v692) = v692 + 1;
          }
          v354 = v740;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v740);
          v355 = v692;
          if (v356)
          {
            if (v692 >= HIDWORD(v692))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
              v355 = v692;
            }
            *((_QWORD *)v691 + v355) = v354;
            v355 = v692 + 1;
            LODWORD(v692) = v692 + 1;
          }
          if (v355)
          {
            while (1)
            {
              while (1)
              {
                v357 = (_BYTE *)*((_QWORD *)v691 + v355 - 1);
                LODWORD(v692) = v355 - 1;
                if (v357)
                {
                  if (v357[16] == 81)
                    break;
                }
                if (!(_DWORD)v317
                  || (v752 = &v740, v753 = &v746, !sub_1C4849098((_QWORD **)&v752, (uint64_t)v357)))
                {
                  if (!v320)
                    goto LABEL_548;
                  v752 = &v740;
                  v753 = &v746;
                  if (!sub_1C4848F80((_QWORD **)&v752, (uint64_t)v357))
                    goto LABEL_548;
                }
                v365 = v746;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v746);
                if (v366)
                {
                  v367 = v692;
                  if (v692 >= (unint64_t)HIDWORD(v692))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                    v367 = v692;
                  }
                  *((_QWORD *)v691 + v367) = v365;
                  LODWORD(v692) = v692 + 1;
                }
                v368 = v740;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v740);
                if (!v369)
                  goto LABEL_548;
                v370 = v692;
                if (v692 >= (unint64_t)HIDWORD(v692))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v691, (uint64_t)v693, v692 + 1, 8);
                  v370 = v692;
                }
                *((_QWORD *)v691 + v370) = v368;
                v355 = v692 + 1;
                LODWORD(v692) = v355;
                if (!v355)
                  goto LABEL_549;
              }
              v358 = *(_QWORD *)(v720 + 24);
              v359 = *(unsigned int *)(v720 + 40);
              if (!(_DWORD)v359)
                goto LABEL_546;
              LODWORD(v360) = (v359 - 1) & ((v319 >> 4) ^ (v319 >> 9));
              v361 = (uint64_t *)(v358 + 16 * v360);
              v362 = *v361;
              if (v319 != *v361)
                break;
LABEL_547:
              v371 = v361[1];
              v752 = v357;
              v753 = *(void ***)(v371 + 72);
              LOBYTE(v754) = 0;
              BYTE1(v754) = v317;
              v755 = 0;
              BYTE2(v754) = 1;
              v14 = sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v752);
LABEL_548:
              v355 = v692;
              if (!(_DWORD)v692)
                goto LABEL_549;
            }
            v363 = 1;
            while (v362 != -4096)
            {
              v364 = v360 + v363++;
              v360 = v364 & (v359 - 1);
              v362 = *(_QWORD *)(v358 + 16 * v360);
              if (v319 == v362)
              {
                v361 = (uint64_t *)(v358 + 16 * v360);
                goto LABEL_547;
              }
            }
LABEL_546:
            v361 = (uint64_t *)(v358 + 16 * v359);
            goto LABEL_547;
          }
LABEL_549:
          if (__b != v701)
            free(__b);
          v11 = v656;
          if (v691 != v693)
            free(v691);
        }
LABEL_695:
        v204 = v670;
        goto LABEL_696;
      }
      v342 = *(_BYTE **)(v306 - 96);
      if (!v342 || v342[16] != 81)
        goto LABEL_695;
      if (!sub_1C5AD8974(&v720, (llvm::BasicBlock **)v212, *(_QWORD *)(v306 - 32)))
      {
LABEL_686:
        if (!sub_1C5AD8974(&v720, (llvm::BasicBlock **)v212, *(_QWORD *)(v306 - 64)))
          goto LABEL_695;
        v473 = *(_QWORD *)(v720 + 24);
        v474 = *(unsigned int *)(v720 + 40);
        if ((_DWORD)v474)
        {
          v475 = *(_QWORD *)(v306 - 64);
          LODWORD(v476) = ((v475 >> 4) ^ (v475 >> 9)) & (v474 - 1);
          v477 = (uint64_t *)(v473 + 16 * v476);
          v478 = *v477;
          if (v475 == *v477)
          {
LABEL_694:
            v481 = v477[1];
            v701 = v342;
            __b = *(void **)(v481 + 72);
            LOWORD(v703) = 256;
            v704 = 0;
            BYTE2(v703) = v342[16] - 81 < 2;
            v14 = sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
            goto LABEL_695;
          }
          v479 = 1;
          while (v478 != -4096)
          {
            v480 = v476 + v479++;
            v476 = v480 & (v474 - 1);
            v478 = *(_QWORD *)(v473 + 16 * v476);
            if (v475 == v478)
            {
              v477 = (uint64_t *)(v473 + 16 * v476);
              goto LABEL_694;
            }
          }
        }
        v477 = (uint64_t *)(v473 + 16 * v474);
        goto LABEL_694;
      }
      v343 = *(_QWORD *)(v720 + 24);
      v344 = *(unsigned int *)(v720 + 40);
      if ((_DWORD)v344)
      {
        v345 = *(_QWORD *)(v306 - 32);
        LODWORD(v346) = ((v345 >> 4) ^ (v345 >> 9)) & (v344 - 1);
        v347 = (uint64_t *)(v343 + 16 * v346);
        v348 = *v347;
        if (v345 == *v347)
          goto LABEL_675;
        v349 = 1;
        while (v348 != -4096)
        {
          v350 = v346 + v349++;
          v346 = v350 & (v344 - 1);
          v348 = *(_QWORD *)(v343 + 16 * v346);
          if (v345 == v348)
          {
            v347 = (uint64_t *)(v343 + 16 * v346);
            goto LABEL_675;
          }
        }
      }
      v347 = (uint64_t *)(v343 + 16 * v344);
LABEL_675:
      if (v347 == (uint64_t *)(v343 + 16 * v344))
        v463 = 0;
      else
        v463 = v347[1];
      sub_1C5AD8BF0((llvm::Value *)&v720, (uint64_t)v342, v463);
      v464 = *(_QWORD *)(v720 + 24);
      v465 = *(unsigned int *)(v720 + 40);
      if ((_DWORD)v465)
      {
        v466 = *(_QWORD *)(v306 - 32);
        LODWORD(v467) = ((v466 >> 4) ^ (v466 >> 9)) & (v465 - 1);
        v468 = (uint64_t *)(v464 + 16 * v467);
        v469 = *v468;
        if (v466 == *v468)
        {
LABEL_685:
          v472 = v468[1];
          v701 = v342;
          __b = *(void **)(v472 + 72);
          LOWORD(v703) = 0;
          v704 = 0;
          BYTE2(v703) = v342[16] - 81 < 2;
          sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
          goto LABEL_686;
        }
        v470 = 1;
        while (v469 != -4096)
        {
          v471 = v467 + v470++;
          v467 = v471 & (v465 - 1);
          v469 = *(_QWORD *)(v464 + 16 * v467);
          if (v466 == v469)
          {
            v468 = (uint64_t *)(v464 + 16 * v467);
            goto LABEL_685;
          }
        }
      }
      v468 = (uint64_t *)(v464 + 16 * v465);
      goto LABEL_685;
    }
    v309 = *(_QWORD *)v721;
    v310 = v308 - 1;
    v311 = (v308 - 1) & v681;
    v312 = *(_QWORD *)(*(_QWORD *)v721 + 16 * v311);
    if (v212 != v312)
    {
      v313 = 1;
      while (v312 != -4096)
      {
        v314 = v311 + v313++;
        v311 = v314 & v310;
        v312 = *(_QWORD *)(v309 + 16 * v311);
        if (v212 == v312)
          goto LABEL_466;
      }
      goto LABEL_468;
    }
LABEL_466:
    v315 = *(const llvm::Loop **)(v309 + 16 * v311 + 8);
    if (!v315)
      goto LABEL_468;
    if (**((_QWORD **)v315 + 4) != v212)
      goto LABEL_468;
    BackedgeTakenCount = llvm::ScalarEvolution::getBackedgeTakenCount(v722, v315, 2);
    if ((_QWORD *)*v220 == v220)
      goto LABEL_468;
    v372 = *(_QWORD *)(v212 + 48);
    v373 = (uint64_t *)(v372 - 24);
    v374 = v372 ? v372 - 24 : 0;
    if (!v372 || *(_BYTE *)(v374 + 16) != 83)
      goto LABEL_468;
    v660 = v315;
    while (1)
    {
      if ((*(_DWORD *)(*v373 + 8) & 0xFD) != 0xD)
        goto LABEL_653;
      v375 = *((_QWORD *)v722 + 13);
      v376 = *((_DWORD *)v722 + 30);
      if (!v376)
        goto LABEL_567;
      v377 = (v376 - 1) & ((v373 >> 4) ^ (v373 >> 9));
      v378 = v375 + 48 * v377;
      v379 = *(uint64_t **)(v378 + 24);
      if (v379 != v373)
        break;
LABEL_568:
      if (v378 == v375 + 48 * v376 || (SCEVIter = *(_QWORD *)(v378 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter(v722, (unint64_t)v373);
      if (SCEVIter)
        v383 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
      else
        v383 = 0;
      if (!v383)
        goto LABEL_653;
      v384 = *(_QWORD *)(SCEVIter + 32);
      if (!*(_QWORD *)v384 || *(_WORD *)(*(_QWORD *)v384 + 24) != 0)
        goto LABEL_653;
      if (*(_WORD *)(BackedgeTakenCount + 24) != 15)
      {
        v386 = llvm::SCEVAddRecExpr::evaluateAtIteration(v384, *(_QWORD *)(SCEVIter + 40));
        v387 = (char *)sub_1C5AD8888(v386, v315, (llvm::AssumptionCache **)v722);
        if (v387)
        {
          v389 = (uint64_t)v387;
          v390 = *(unsigned __int8 *)(SCEVIter + 28);
          if (*(_BYTE *)(*v373 + 8) == 15)
          {
            v391 = (v390 >> 1) & 1;
            if (*(_QWORD *)v387 != *v373 || v391 == 0)
              goto LABEL_612;
          }
          else if ((v390 & 2) == 0)
          {
            goto LABEL_612;
          }
          if (v388)
          {
            v393 = operator new(0x60uLL);
            v394 = (char *)(v393 + 8);
            v393[13] = v393[13] & 0x38000000 | 1;
            *(_QWORD *)v393 = 0;
            *((_QWORD *)v393 + 1) = 0;
            *((_QWORD *)v393 + 2) = 0;
            *((_QWORD *)v393 + 3) = v393 + 8;
            v395 = *v373;
            v705[0] = 257;
            llvm::ZExtInst::ZExtInst((uint64_t)(v393 + 8), v389, v395, (uint64_t)&v701, 0);
            v396 = v725;
            if (v725 >= (unint64_t)HIDWORD(v725))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
              v396 = v725;
            }
            *((_QWORD *)v724 + v396) = v394;
            LODWORD(v725) = v725 + 1;
          }
          else
          {
            v394 = v387;
          }
          v397 = (char *)operator new(0x80uLL);
          v398 = (uint64_t ***)(v397 + 64);
          *((_DWORD *)v397 + 21) = *((_DWORD *)v397 + 21) & 0x38000000 | 2;
          *(_QWORD *)v397 = 0;
          *((_QWORD *)v397 + 1) = 0;
          *((_QWORD *)v397 + 4) = 0;
          *((_QWORD *)v397 + 2) = 0;
          *((_QWORD *)v397 + 3) = v397 + 64;
          *((_QWORD *)v397 + 5) = 0;
          *((_QWORD *)v397 + 6) = 0;
          *((_QWORD *)v397 + 7) = v397 + 64;
          v705[0] = 257;
          sub_1C4774CC4((_DWORD *)*v373);
          *((_QWORD *)v397 + 8) = v399;
          *((_QWORD *)v397 + 9) = 0;
          v400 = *((_DWORD *)v397 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v397 + 20) = 81;
          *((_DWORD *)v397 + 21) = v400;
          *(_OWORD *)(v397 + 88) = 0u;
          *(_OWORD *)(v397 + 104) = 0u;
          *((_DWORD *)v397 + 30) = 0;
          if (*(_QWORD *)v397)
          {
            **((_QWORD **)v397 + 2) = *((_QWORD *)v397 + 1);
            v461 = *((_QWORD *)v397 + 1);
            if (v461)
              *(_QWORD *)(v461 + 16) = *((_QWORD *)v397 + 2);
          }
          *(_QWORD *)v397 = v373;
          v401 = v373 + 1;
          v402 = (_DWORD *)v373[1];
          *((_QWORD *)v397 + 1) = v402;
          if (v402)
            *((_QWORD *)v402 + 2) = v397 + 8;
          *((_QWORD *)v397 + 2) = v401;
          *v401 = v397;
          if (*((_QWORD *)v397 + 4))
          {
            **((_QWORD **)v397 + 6) = *((_QWORD *)v397 + 5);
            v462 = *((_QWORD *)v397 + 5);
            if (v462)
              *(_QWORD *)(v462 + 16) = *((_QWORD *)v397 + 6);
          }
          *((_QWORD *)v397 + 4) = v394;
          v405 = *((_QWORD *)v394 + 1);
          v404 = v394 + 8;
          v403 = v405;
          *((_QWORD *)v397 + 5) = v405;
          if (v405)
            *(_QWORD *)(v403 + 16) = v397 + 40;
          *((_QWORD *)v397 + 6) = v404;
          *v404 = v397 + 32;
          *((_WORD *)v397 + 41) = 37;
          llvm::Value::setName(v398, (uint64_t)&v701);
          v406 = *(_QWORD *)(v720 + 24);
          v407 = *(unsigned int *)(v720 + 40);
          v11 = v656;
          v315 = v660;
          if ((_DWORD)v407)
          {
            LODWORD(v408) = (v407 - 1) & v681;
            v409 = (uint64_t *)(v406 + 16 * v408);
            v410 = *v409;
            if (v212 != *v409)
            {
              v411 = 1;
              while (v410 != -4096)
              {
                v412 = v408 + v411++;
                v408 = v412 & (v407 - 1);
                v410 = *(_QWORD *)(v406 + 16 * v408);
                if (v212 == v410)
                {
                  v409 = (uint64_t *)(v406 + 16 * v408);
                  goto LABEL_609;
                }
              }
              goto LABEL_608;
            }
          }
          else
          {
LABEL_608:
            v409 = (uint64_t *)(v406 + 16 * v407);
          }
LABEL_609:
          v413 = v409[1];
          v701 = v397 + 64;
          __b = *(void **)(v413 + 72);
          LOWORD(v703) = 0;
          v704 = 0;
          BYTE2(v703) = v397[80] - 81 < 2;
          sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
          v414 = v725;
          if (v725 >= (unint64_t)HIDWORD(v725))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
            v414 = v725;
          }
          *((_QWORD *)v724 + v414) = v398;
          LODWORD(v725) = v725 + 1;
        }
      }
LABEL_612:
      v415 = **(const llvm::SCEV ***)(SCEVIter + 32);
      v416 = (_QWORD *)sub_1C5AD8888((uint64_t)v415, v315, (llvm::AssumptionCache **)v722);
      if (v416)
        v418 = v417 == 0;
      else
        v418 = 0;
      if (!v418)
        goto LABEL_653;
      v419 = v416;
      if (*(_BYTE *)(*v373 + 8) == 15 && *v416 != *v373)
        goto LABEL_653;
      if (!llvm::ScalarEvolution::isKnownPredicate((uint64_t ****)v722, 0x27u, (const llvm::SCEV *)SCEVIter, v415))goto LABEL_636;
      v420 = (char *)operator new(0x80uLL);
      *((_DWORD *)v420 + 21) = *((_DWORD *)v420 + 21) & 0x38000000 | 2;
      *(_QWORD *)v420 = 0;
      *((_QWORD *)v420 + 1) = 0;
      *((_QWORD *)v420 + 4) = 0;
      *((_QWORD *)v420 + 2) = 0;
      *((_QWORD *)v420 + 3) = v420 + 64;
      *((_QWORD *)v420 + 5) = 0;
      *((_QWORD *)v420 + 6) = 0;
      v421 = (uint64_t ***)(v420 + 64);
      *((_QWORD *)v420 + 7) = v420 + 64;
      v705[0] = 257;
      sub_1C4774CC4((_DWORD *)*v373);
      *((_QWORD *)v420 + 8) = v422;
      *((_QWORD *)v420 + 9) = 0;
      v423 = *((_DWORD *)v420 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v420 + 20) = 81;
      *((_DWORD *)v420 + 21) = v423;
      *(_OWORD *)(v420 + 88) = 0u;
      *(_OWORD *)(v420 + 104) = 0u;
      *((_DWORD *)v420 + 30) = 0;
      if (*(_QWORD *)v420)
      {
        **((_QWORD **)v420 + 2) = *((_QWORD *)v420 + 1);
        v457 = *((_QWORD *)v420 + 1);
        if (v457)
          *(_QWORD *)(v457 + 16) = *((_QWORD *)v420 + 2);
      }
      *(_QWORD *)v420 = v373;
      v424 = v373 + 1;
      v425 = (_DWORD *)v373[1];
      *((_QWORD *)v420 + 1) = v425;
      if (v425)
        *((_QWORD *)v425 + 2) = v420 + 8;
      *((_QWORD *)v420 + 2) = v424;
      *v424 = v420;
      if (*((_QWORD *)v420 + 4))
      {
        **((_QWORD **)v420 + 6) = *((_QWORD *)v420 + 5);
        v458 = *((_QWORD *)v420 + 5);
        if (v458)
          *(_QWORD *)(v458 + 16) = *((_QWORD *)v420 + 6);
      }
      *((_QWORD *)v420 + 4) = v419;
      v426 = v419 + 1;
      v427 = v419[1];
      *((_QWORD *)v420 + 5) = v427;
      if (v427)
        *(_QWORD *)(v427 + 16) = v420 + 40;
      *((_QWORD *)v420 + 6) = v426;
      *v426 = v420 + 32;
      *((_WORD *)v420 + 41) = 39;
      llvm::Value::setName(v421, (uint64_t)&v701);
      v428 = *(_QWORD *)(v720 + 24);
      v429 = *(unsigned int *)(v720 + 40);
      v11 = v656;
      if (!(_DWORD)v429)
        goto LABEL_632;
      LODWORD(v430) = (v429 - 1) & v681;
      v431 = (uint64_t *)(v428 + 16 * v430);
      v432 = *v431;
      if (v212 != *v431)
      {
        v433 = 1;
        while (v432 != -4096)
        {
          v434 = v430 + v433++;
          v430 = v434 & (v429 - 1);
          v432 = *(_QWORD *)(v428 + 16 * v430);
          if (v212 == v432)
          {
            v431 = (uint64_t *)(v428 + 16 * v430);
            goto LABEL_633;
          }
        }
LABEL_632:
        v431 = (uint64_t *)(v428 + 16 * v429);
      }
LABEL_633:
      v435 = v431[1];
      v701 = v420 + 64;
      __b = *(void **)(v435 + 72);
      LOWORD(v703) = 0;
      v704 = 0;
      BYTE2(v703) = v420[80] - 81 < 2;
      sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
      v436 = v725;
      if (v725 >= (unint64_t)HIDWORD(v725))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
        v436 = v725;
      }
      v315 = v660;
      *((_QWORD *)v724 + v436) = v421;
      LODWORD(v725) = v725 + 1;
LABEL_636:
      if (llvm::ScalarEvolution::isKnownPredicate((uint64_t ****)v722, 0x23u, (const llvm::SCEV *)SCEVIter, v415))
      {
        v437 = (char *)operator new(0x80uLL);
        v438 = (uint64_t ***)(v437 + 64);
        *((_DWORD *)v437 + 21) = *((_DWORD *)v437 + 21) & 0x38000000 | 2;
        *(_QWORD *)v437 = 0;
        *((_QWORD *)v437 + 1) = 0;
        *((_QWORD *)v437 + 4) = 0;
        *((_QWORD *)v437 + 2) = 0;
        *((_QWORD *)v437 + 3) = v437 + 64;
        *((_QWORD *)v437 + 5) = 0;
        *((_QWORD *)v437 + 6) = 0;
        *((_QWORD *)v437 + 7) = v437 + 64;
        v705[0] = 257;
        sub_1C4774CC4((_DWORD *)*v373);
        *((_QWORD *)v437 + 8) = v439;
        *((_QWORD *)v437 + 9) = 0;
        v440 = *((_DWORD *)v437 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v437 + 20) = 81;
        *((_DWORD *)v437 + 21) = v440;
        *(_OWORD *)(v437 + 88) = 0u;
        *(_OWORD *)(v437 + 104) = 0u;
        *((_DWORD *)v437 + 30) = 0;
        if (*(_QWORD *)v437)
        {
          **((_QWORD **)v437 + 2) = *((_QWORD *)v437 + 1);
          v459 = *((_QWORD *)v437 + 1);
          if (v459)
            *(_QWORD *)(v459 + 16) = *((_QWORD *)v437 + 2);
        }
        *(_QWORD *)v437 = v373;
        v441 = v373 + 1;
        v442 = (_DWORD *)v373[1];
        *((_QWORD *)v437 + 1) = v442;
        if (v442)
          *((_QWORD *)v442 + 2) = v437 + 8;
        *((_QWORD *)v437 + 2) = v441;
        *v441 = v437;
        if (*((_QWORD *)v437 + 4))
        {
          **((_QWORD **)v437 + 6) = *((_QWORD *)v437 + 5);
          v460 = *((_QWORD *)v437 + 5);
          if (v460)
            *(_QWORD *)(v460 + 16) = *((_QWORD *)v437 + 6);
        }
        *((_QWORD *)v437 + 4) = v419;
        v445 = v419[1];
        v444 = v419 + 1;
        v443 = v445;
        *((_QWORD *)v437 + 5) = v445;
        if (v445)
          *(_QWORD *)(v443 + 16) = v437 + 40;
        *((_QWORD *)v437 + 6) = v444;
        *v444 = v437 + 32;
        *((_WORD *)v437 + 41) = 35;
        llvm::Value::setName(v438, (uint64_t)&v701);
        v446 = *(_QWORD *)(v720 + 24);
        v447 = *(unsigned int *)(v720 + 40);
        v11 = v656;
        if (!(_DWORD)v447)
          goto LABEL_649;
        LODWORD(v448) = (v447 - 1) & v681;
        v449 = (uint64_t *)(v446 + 16 * v448);
        v450 = *v449;
        if (v212 != *v449)
        {
          v451 = 1;
          while (v450 != -4096)
          {
            v452 = v448 + v451++;
            v448 = v452 & (v447 - 1);
            v450 = *(_QWORD *)(v446 + 16 * v448);
            if (v212 == v450)
            {
              v449 = (uint64_t *)(v446 + 16 * v448);
              goto LABEL_650;
            }
          }
LABEL_649:
          v449 = (uint64_t *)(v446 + 16 * v447);
        }
LABEL_650:
        v453 = v449[1];
        v701 = v437 + 64;
        __b = *(void **)(v453 + 72);
        LOWORD(v703) = 0;
        v704 = 0;
        BYTE2(v703) = v437[80] - 81 < 2;
        sub_1C47E9C18((uint64_t)&v727, (unint64_t)&v701);
        v454 = v725;
        if (v725 >= (unint64_t)HIDWORD(v725))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
          v454 = v725;
        }
        v315 = v660;
        *((_QWORD *)v724 + v454) = v438;
        LODWORD(v725) = v725 + 1;
      }
LABEL_653:
      v455 = (_DWORD *)v373[4];
      v373 = (uint64_t *)(v455 - 6);
      if (v455)
        v456 = v455 - 6;
      else
        v456 = 0;
      if (!v455 || *((_BYTE *)v456 + 16) != 83)
        goto LABEL_468;
    }
    v380 = 1;
    while (v379 != (uint64_t *)-4096)
    {
      v381 = v377 + v380++;
      v377 = v381 & (v376 - 1);
      v378 = v375 + 48 * v377;
      v379 = *(uint64_t **)(v378 + 24);
      if (v379 == v373)
        goto LABEL_568;
    }
LABEL_567:
    v378 = v375 + 48 * v376;
    goto LABEL_568;
  }
LABEL_300:
  v205 = (uint64_t *)v727;
  v206 = v728;
  v207 = (uint64_t *)((char *)v727 + 32 * v728);
  if (v728 < 0x81)
  {
LABEL_304:
    sub_1C5AD8E24(v205, v207, v206, 0, 0, v14);
  }
  else
  {
    v208 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v209 = v728;
    while (1)
    {
      v210 = (uint64_t *)operator new(32 * v209, v208);
      if (v210)
        break;
      v211 = v209 > 1;
      v209 >>= 1;
      if (!v211)
        goto LABEL_304;
    }
    v485 = v210;
    sub_1C5AD8E24(v205, v207, v206, v210, v209, v14);
    operator delete(v485);
  }
  v706 = v708;
  v707 = 0x600000000;
  v701 = &v703;
  __b = (void *)0x1000000000;
  v486 = (std::string *)v668;
  v487 = 0;
  if (!(_DWORD)v728)
    goto LABEL_705;
  v510 = (char *)v727;
  v511 = (char *)v727 + 32 * v728;
  v682 = v511;
  do
  {
LABEL_762:
    v512 = __b;
    while (v512)
    {
      v513 = (char *)v701 + 48 * v512;
      if (*((_DWORD *)v510 + 3) <= *((_DWORD *)v513 - 11))
        break;
      v514 = *(v513 - 40);
      v515 = 50;
      if (!*(v513 - 40))
        v515 = 7;
      v516 = LODWORD(v709[v515]) - 1;
      LODWORD(v709[v515]) = v516;
      if (v514)
        v517 = &v716;
      else
        v517 = &v713;
      v518 = (void **)&(*v517)[80 * v516];
      if (*v518 != v518 + 2)
      {
        free(*v518);
        v514 = *(v513 - 40);
      }
      v519 = *((unsigned int *)v513 - 6);
      if ((_DWORD)v519)
      {
        v520 = (_QWORD *)*((_QWORD *)v513 - 4);
        v521 = &v520[v519];
        v522 = 1;
        if (v514)
          v522 = 4;
        v523 = 12;
        if (v514)
          v523 = 36;
        do
        {
          v524 = v711;
          if (!v514)
            v524 = v709;
          v525 = &v710;
          if (v514)
            v525 = &v712;
          v526 = *v525;
          if (*v525)
          {
            v527 = *v524;
            v528 = v526 - 1;
            LODWORD(v529) = (v526 - 1) & ((*v520 >> 4) ^ (*v520 >> 9));
            v530 = (uint64_t *)(v527 + 16 * v529);
            v531 = *v530;
            if (*v520 == *v530)
            {
LABEL_787:
              *v530 = -8192;
              --LODWORD(v709[v522]);
              ++*(_DWORD *)((char *)v709 + v523);
            }
            else
            {
              v532 = 1;
              while (v531 != -4096)
              {
                v533 = v529 + v532++;
                v529 = v533 & v528;
                v531 = *(_QWORD *)(v527 + 16 * v529);
                if (*v520 == v531)
                {
                  v530 = (uint64_t *)(v527 + 16 * v529);
                  goto LABEL_787;
                }
              }
            }
          }
          ++v520;
        }
        while (v520 != v521);
      }
      v534 = v514 == 0;
      if (v514)
        v535 = &v716;
      else
        v535 = &v713;
      v536 = &v714;
      if (!v534)
        v536 = &v717;
      v537 = *(unsigned int *)v536;
      if ((_DWORD)v537)
      {
        v538 = *v535;
        v539 = 80 * v537;
        v540 = v538 + 8;
        do
        {
          if ((_DWORD)v519)
            *v540 -= v519;
          v540 += 20;
          v539 -= 80;
        }
        while (v539);
      }
      v512 = (_DWORD)__b - 1;
      LODWORD(__b) = v512;
      v541 = (char *)v701 + 48 * v512;
      v542 = (char *)*((_QWORD *)v541 + 2);
      if (v542 != v541 + 32)
      {
        free(v542);
        goto LABEL_762;
      }
    }
    if (!v510[16])
    {
      v569 = *((_QWORD *)v510 + 3);
      if (!v569
        || sub_1C5AD7AE8((uint64_t)v709, *(_WORD *)(v569 + 18) & 0x3F, *(llvm **)(v569 - 64), *(llvm **)(v569 - 32)))
      {
        v570 = v487;
        v752 = 0;
        v752 = *(void **)v510;
        LODWORD(v691) = 7;
        v692 = 0;
        v693[0] = &v752;
        sub_1C4E75A6C((uint64_t)&v691, (uint64_t)v752);
        if (v752)
        {
          if (*((_BYTE *)v752 + 16) == 81)
          {
            v571 = (llvm::Value *)*((_QWORD *)v752 - 8);
            if (v571)
            {
              v572 = (llvm::ConstantInt **)*((_QWORD *)v752 - 4);
              if (v572)
              {
                v573 = *((_WORD *)v752 + 9) & 0x3F;
                v574 = (v573 - 38) >= 4 ? &v714 : &v717;
                if (*(_DWORD *)v574 <= 0x1F4u)
                {
                  if (v510[17])
                    LODWORD(v573) = dword_1C8668680[v573];
                  sub_1C5AD7490((uint64_t)v709, v573, *((llvm::Value **)v752 - 8), *((llvm::Constant **)v752 - 4), *((_DWORD *)v510 + 2), *((_DWORD *)v510 + 3), (uint64_t)&v701);
                  if (*(_BYTE *)(*(_QWORD *)v571 + 8) == 13)
                  {
                    v575 = (unsigned __int16)v573 - 36;
                    v576 = *((_DWORD *)v510 + 2);
                    v577 = *((_DWORD *)v510 + 3);
                    switch(v575)
                    {
                      case 0:
                        v578 = llvm::ConstantInt::get(*v572, 0, 0);
                        if (sub_1C5AD7AE8((uint64_t)v709, 39, (llvm *)v572, (llvm *)v578))
                        {
                          v579 = llvm::ConstantInt::get(*v572, 0, 0);
                          sub_1C5AD7490((uint64_t)v709, 39, v571, (llvm::Constant *)v579, v576, v577, (uint64_t)&v701);
                          v580 = 40;
                          goto LABEL_977;
                        }
                        break;
                      case 2:
                        v649 = llvm::ConstantInt::get(*v572, -1, 0);
                        if (sub_1C5AD7AE8((uint64_t)v709, 39, (llvm *)v572, (llvm *)v649))
                        {
                          v650 = llvm::ConstantInt::get(*v572, 0, 0);
                          v580 = 35;
                          v651 = v571;
                          goto LABEL_978;
                        }
                        break;
                      case 3:
                        v648 = llvm::ConstantInt::get(*v572, 0, 0);
                        if (sub_1C5AD7AE8((uint64_t)v709, 39, (llvm *)v572, (llvm *)v648))
                        {
                          v580 = 35;
                          goto LABEL_977;
                        }
                        break;
                      case 4:
                        v652 = llvm::ConstantInt::get(*v572, 0, 0);
                        if (sub_1C5AD7AE8((uint64_t)v709, 39, v571, (llvm *)v652))
                        {
                          v580 = 36;
LABEL_977:
                          v651 = v571;
                          v650 = v572;
LABEL_978:
                          sub_1C5AD7490((uint64_t)v709, v580, v651, (llvm::Constant *)v650, v576, v577, (uint64_t)&v701);
                        }
                        break;
                      default:
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v486 = (std::string *)v668;
        v487 = v570;
        v511 = v682;
      }
      goto LABEL_980;
    }
    v543 = *(char **)v510;
    v544 = sub_1C4E8FD48(*(_QWORD *)v510);
    if (!v543 || !v544)
    {
      v581 = *(_DWORD ***)v510;
      v582 = *(unsigned __int8 *)(*(_QWORD *)v510 + 16);
      if (!*(_QWORD *)v510 || v582 != 81)
      {
        if (v582 == 5)
        {
          if (*((_WORD *)v581 + 9) != 28)
            goto LABEL_980;
          v587 = (uint64_t *)&v581[-4 * (*((_DWORD *)v581 + 5) & 0x7FFFFFF)];
          v583 = *v587;
          if (!*v587)
            goto LABEL_980;
          if (*(_BYTE *)(v583 + 16) != 81)
            goto LABEL_980;
          v584 = *(llvm::Value **)(v583 - 64);
          if (!v584)
            goto LABEL_980;
          v585 = *(llvm::Constant **)(v583 - 32);
          if (!v585)
            goto LABEL_980;
          v586 = v587[4];
          if (!v586)
            goto LABEL_980;
        }
        else
        {
          if (v582 != 56)
            goto LABEL_980;
          v583 = (uint64_t)*(v581 - 8);
          if (!v583)
            goto LABEL_980;
          if (*(_BYTE *)(v583 + 16) != 81)
            goto LABEL_980;
          v584 = *(llvm::Value **)(v583 - 64);
          if (!v584)
            goto LABEL_980;
          v585 = *(llvm::Constant **)(v583 - 32);
          if (!v585)
            goto LABEL_980;
          v586 = (uint64_t)*(v581 - 4);
          if (!v586)
            goto LABEL_980;
        }
        if (*(_BYTE *)(v586 + 16) != 81)
          goto LABEL_980;
        v588 = *(_WORD *)(v583 + 18) & 0x3F;
        v691 = v693;
        v692 = 0x100000000;
        sub_1C5AD7490((uint64_t)v709, v588, v584, v585, 0, 0, (uint64_t)&v691);
        v589 = v692;
        while (v589)
        {
          v590 = (char *)v691 + 48 * v589;
          v591 = *(v590 - 40);
          v592 = 50;
          if (!*(v590 - 40))
            v592 = 7;
          v593 = LODWORD(v709[v592]) - 1;
          LODWORD(v709[v592]) = v593;
          if (v591)
            v594 = &v716;
          else
            v594 = &v713;
          v595 = (void **)&(*v594)[80 * v593];
          if (*v595 != v595 + 2)
          {
            free(*v595);
            v591 = *(v590 - 40);
          }
          v596 = *((unsigned int *)v590 - 6);
          if ((_DWORD)v596)
          {
            v597 = (_QWORD *)*((_QWORD *)v590 - 4);
            v598 = &v597[v596];
            v599 = 1;
            if (v591)
              v599 = 4;
            v600 = 12;
            if (v591)
              v600 = 36;
            do
            {
              v601 = v711;
              if (!v591)
                v601 = v709;
              v602 = &v710;
              if (v591)
                v602 = &v712;
              v603 = *v602;
              if (*v602)
              {
                v604 = *v601;
                v605 = v603 - 1;
                LODWORD(v606) = (v603 - 1) & ((*v597 >> 4) ^ (*v597 >> 9));
                v607 = (uint64_t *)(v604 + 16 * v606);
                v608 = *v607;
                if (*v597 != *v607)
                {
                  v609 = 1;
                  do
                  {
                    if (v608 == -4096)
                      goto LABEL_898;
                    v610 = v606 + v609++;
                    v606 = v610 & v605;
                    v608 = *(_QWORD *)(v604 + 16 * v606);
                  }
                  while (*v597 != v608);
                  v607 = (uint64_t *)(v604 + 16 * v606);
                }
                *v607 = -8192;
                --LODWORD(v709[v599]);
                ++*(_DWORD *)((char *)v709 + v600);
              }
LABEL_898:
              ++v597;
            }
            while (v597 != v598);
          }
          v611 = v591 == 0;
          if (v591)
            v612 = &v716;
          else
            v612 = &v713;
          v613 = &v714;
          if (!v611)
            v613 = &v717;
          v614 = *(unsigned int *)v613;
          if ((_DWORD)v614)
          {
            v615 = *v612;
            v616 = 80 * v614;
            v617 = v615 + 8;
            do
            {
              if ((_DWORD)v596)
                *v617 -= v596;
              v617 += 20;
              v616 -= 80;
            }
            while (v616);
          }
          v589 = v692 - 1;
          LODWORD(v692) = v589;
          v618 = (char *)v691 + 48 * v589;
          v619 = (char *)*((_QWORD *)v618 + 2);
          if (v619 != v618 + 32)
          {
            free(v619);
            v589 = v692;
          }
        }
        if (v691 != v693)
          free(v691);
        goto LABEL_980;
      }
      v666 = (int)v487;
      v672 = __b;
      v675 = v701;
      v622 = (llvm *)*(v581 - 8);
      v623 = (llvm *)*(v581 - 4);
      v678 = *((_WORD *)v581 + 9) & 0x3F;
      sub_1C5AD9BB0((uint64_t)&v691, (uint64_t)v709, v678, v622, v623, 1);
      if (!HIBYTE(v700) && (_DWORD)v692)
      {
        if (!v696)
          goto LABEL_938;
        v624 = (llvm **)v695;
        v625 = (llvm **)((char *)v695 + 24 * v696);
        while (sub_1C5AD7AE8((uint64_t)v709, *(_DWORD *)v624, v624[1], v624[2]))
        {
          v624 += 3;
          if (v624 == v625)
            goto LABEL_938;
        }
      }
      sub_1C5AD9BB0((uint64_t)&v752, (uint64_t)v709, v678, v622, v623, 0);
      sub_1C614D378((uint64_t)&v691, (uint64_t)&v752);
      sub_1C476393C((uint64_t)&v695, (uint64_t)v762);
      sub_1C4E015E0((uint64_t)&v698, (uint64_t)v764);
      v700 = v765;
      sub_1C618A4D0(v764);
      if (v762[0] != &v763)
        free(v762[0]);
      v626 = v666;
      v511 = v682;
      if (v752 != &v754)
        free(v752);
      isConditionImplied = 0;
      if (HIBYTE(v700) || !(_DWORD)v692)
        goto LABEL_984;
      if (v696)
      {
        v628 = (llvm **)v695;
        v629 = (llvm **)((char *)v695 + 24 * v696);
        while (sub_1C5AD7AE8((uint64_t)v709, *(_DWORD *)v628, v628[1], v628[2]))
        {
          v628 += 3;
          if (v628 == v629)
            goto LABEL_938;
        }
        isConditionImplied = 0;
        v626 = v666;
        goto LABEL_983;
      }
LABEL_938:
      v679 = v700;
      if ((_BYTE)v700)
        v630 = 49;
      else
        v630 = 6;
      if ((_BYTE)v700)
        v631 = &v716;
      else
        v631 = &v713;
      if (v699)
      {
        v632 = v698;
        v633 = &v698[80 * v699];
        do
        {
          sub_1C4E0125C((uint64_t)v631, *(uint64_t **)v632, *((unsigned int *)v632 + 2));
          v632 += 80;
        }
        while (v632 != v633);
      }
      v740 = &v742;
      v741 = 0x800000000;
      if ((_DWORD)v692)
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v740, (uint64_t)&v691);
      isConditionImplied = llvm::ConstraintSystem::isConditionImplied((uint64_t)v631, (uint64_t)&v740);
      if (v740 != &v742)
        free(v740);
      if (isConditionImplied)
      {
        sub_1C5ADCA24((uint64_t)v668, (uint64_t)v675, v672, (uint64_t)v581, v709, v581);
        sub_1C4774CC4(*v581);
        True = llvm::ConstantInt::getTrue(v634, v635, v636);
        llvm::Value::replaceUsesWithIf((llvm::Value *)v581, (llvm::Value *)True, (unsigned int (*)(uint64_t, uint64_t))sub_1C5ADEA84, (uint64_t)&v752);
      }
      v734 = v736;
      v735 = 0x800000000;
      if ((_DWORD)v692)
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v734, (uint64_t)&v691);
      sub_1C618A18C((uint64_t)&v734, &v746);
      v638 = llvm::ConstraintSystem::isConditionImplied((uint64_t)v631, (uint64_t)&v746);
      if (v746 != &v748)
        free(v746);
      if (v734 != v736)
        free(v734);
      if (v638)
      {
        sub_1C5ADCA24((uint64_t)v668, (uint64_t)v675, v672, (uint64_t)v581, v709, v581);
        sub_1C4774CC4(*v581);
        False = llvm::ConstantInt::getFalse(v639, v640, v641);
        isConditionImplied = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v581, (llvm::Value *)False, (llvm::Value *)1);
      }
      v643 = v699;
      if (!v699)
      {
        v626 = v666;
        v511 = v682;
LABEL_984:
        sub_1C618A4D0(&v698);
        if (v695 != v697)
          free(v695);
        if (v691 != v693)
          free(v691);
        v487 = (std::string *)(v626 | isConditionImplied);
        v486 = (std::string *)v668;
        goto LABEL_980;
      }
      v644 = 0;
      if (v679)
        v645 = 50;
      else
        v645 = 7;
      v626 = v666;
      do
      {
        v646 = LODWORD(v709[v645]) - 1;
        LODWORD(v709[v645]) = v646;
        v647 = (void **)(v709[v630] + 80 * v646);
        if (*v647 != v647 + 2)
        {
          free(*v647);
          v643 = v699;
        }
        ++v644;
      }
      while (v643 > v644);
LABEL_983:
      v511 = v682;
      goto LABEL_984;
    }
    if (*(_DWORD *)(*((_QWORD *)v543 - 4) + 36) != 284)
    {
      v552 = 0;
      goto LABEL_920;
    }
    v545 = v511;
    v546 = (int)v487;
    v487 = v486;
    v547 = (llvm **)&v543[-32 * (*((_DWORD *)v543 + 5) & 0x7FFFFFF)];
    v548 = *v547;
    v549 = v547[4];
    if (!sub_1C5AD9A48(*v547, v549, (uint64_t)v709))
    {
      v552 = 0;
      v486 = v487;
      LODWORD(v487) = v546;
      v511 = v545;
      goto LABEL_920;
    }
    v674 = (uint64_t)v548;
    v550 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v548, 0, 0);
    v671 = (uint64_t)v549;
    v551 = sub_1C5AD9A48(v549, (llvm *)v550, (uint64_t)v709);
    v552 = 0;
    v486 = v487;
    LODWORD(v487) = v546;
    v511 = v545;
    if (!v551)
      goto LABEL_920;
    sub_1C4D8ADA0((uint64_t)&v691, *((uint64_t ***)v543 + 5), (uint64_t)(v543 + 24), 0, 0, 0);
    v554 = *((_QWORD *)v543 + 1);
    if (!v554)
      goto LABEL_916;
    v665 = (int)v487;
    v552 = 0;
    v677 = 0;
    do
    {
      v555 = *(_QWORD *)(v554 + 24);
      v554 = *(_QWORD *)(v554 + 8);
      if (v555 && *(_BYTE *)(v555 + 16) == 92 && *(_DWORD *)(v555 + 72) == 1)
      {
        v556 = **(_DWORD **)(v555 + 64);
        if (v556 == 1)
        {
          v558 = *v694;
          v557 = *(llvm::Value **)(*v694 + 1568);
          if (!v557)
          {
            v568 = *(llvm::ConstantInt **)(v558 + 1888);
            LODWORD(v753) = *(_DWORD *)(v558 + 1896) >> 8;
            if (v753 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v752, 0, 0);
            else
              v752 = 0;
            v557 = llvm::ConstantInt::get(v568, (llvm::LLVMContext *)&v752, v553);
            if (v753 >= 0x41 && v752)
              MEMORY[0x1CAA32F9C](v752, 0x1000C8000313F17);
            *(_QWORD *)(v558 + 1568) = v557;
          }
        }
        else
        {
          if (v556)
            continue;
          v557 = v677;
          if (!v677)
          {
            LOWORD(v756) = 257;
            v557 = (llvm::Value *)sub_1C47733F8((uint64_t)&v691, v674, v671, (uint64_t)&v752, 0, 0);
            v677 = v557;
          }
        }
        v552 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v555, v557, (llvm::Value *)1);
        if (*(_QWORD *)(v555 + 8))
        {
          v511 = v682;
        }
        else
        {
          v560 = v707;
          v511 = v682;
          if (v707 >= (unint64_t)HIDWORD(v707))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v706, (uint64_t)v708, v707 + 1, 8);
            v560 = v707;
          }
          *((_QWORD *)v706 + v560) = v555;
          LODWORD(v707) = v707 + 1;
          v561 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v543, v559);
          v562 = *(_DWORD *)(v555 + 20);
          if ((v562 & 0x40000000) != 0)
            v563 = *(_QWORD *)(v555 - 8);
          else
            v563 = v555 - 32 * (v562 & 0x7FFFFFF);
          if (*(_QWORD *)v563)
          {
            **(_QWORD **)(v563 + 16) = *(_QWORD *)(v563 + 8);
            v564 = *(_QWORD *)(v563 + 8);
            if (v564)
              *(_QWORD *)(v564 + 16) = *(_QWORD *)(v563 + 16);
          }
          *(_QWORD *)v563 = v561;
          if (v561)
          {
            v567 = v561[1];
            v565 = v561 + 1;
            v566 = v567;
            *(_QWORD *)(v563 + 8) = v567;
            if (v567)
              *(_QWORD *)(v566 + 16) = v563 + 8;
            *(_QWORD *)(v563 + 16) = v565;
            *v565 = v563;
          }
        }
      }
    }
    while (v554);
    LODWORD(v487) = v665;
    if (!*((_QWORD *)v543 + 1))
    {
LABEL_916:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v543 + 5) + 40, (uint64_t ***)v543);
      v620 = *((_QWORD *)v543 + 3);
      v621 = (_QWORD *)*((_QWORD *)v543 + 4);
      *v621 = v620;
      *(_QWORD *)(v620 + 8) = v621;
      *((_QWORD *)v543 + 3) = 0;
      *((_QWORD *)v543 + 4) = 0;
      llvm::Value::deleteValue((llvm::Value *)v543);
      v552 = 1;
    }
    if (v691 != v693)
      free(v691);
    v486 = (std::string *)v668;
LABEL_920:
    v487 = (std::string *)(v487 | v552);
LABEL_980:
    v510 += 32;
  }
  while (v510 != v511);
LABEL_705:
  if (v654 && (std::string *)v486[1].__r_.__value_.__l.__size_ != &v486[1])
  {
    v741 = 0;
    v740 = 0;
    v742 = 0;
    LODWORD(v753) = 0;
    LOBYTE(v757) = 0;
    v752 = &unk_1E81A7208;
    v760 = &v740;
    LODWORD(v759) = 0;
    v758 = 0;
    v756 = 0;
    v754 = 0;
    v755 = 0;
    llvm::Module::print(v486, (llvm::raw_ostream *)&v752, 0, 0, 0);
    v488 = v756 - v754;
    if (v756 != v754)
    {
      v756 = v754;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v752, v754, v488);
    }
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v691, (uint64_t)"constraint-elimination", (uint64_t)"repro", 5, (uint64_t)v655);
    v684 = 6;
    strcpy((char *)v683, "String");
    v686 = 6;
    strcpy((char *)__p, "module");
    v687 = 0;
    v688 = 0;
    v489 = sub_1C47E3888((uint64_t)&v691, (uint64_t)v683);
    v490 = v740;
    if (SHIBYTE(v742) >= 0)
      v490 = &v740;
    v491 = HIBYTE(v742) & 0x7F;
    if (SHIBYTE(v742) < 0)
      v491 = v741;
    v746 = v490;
    v747 = (unint64_t *)v491;
    sub_1C53B17B4(v489 + 80, (const void **)&v746);
    if (v686 < 0)
      operator delete(__p[0]);
    if (v684 < 0)
      operator delete(v683[0]);
    llvm::OptimizationRemarkEmitter::emit(v653, (llvm::DiagnosticInfoOptimizationBase *)&v691);
    v691 = &off_1E814E790;
    v492 = (char *)v695;
    if (v696)
    {
      v493 = (unint64_t)v696 << 6;
      do
      {
        v494 = (void **)&v492[v493];
        if (v492[v493 - 17] < 0)
          operator delete(*(v494 - 5));
        if (*((char *)v494 - 41) < 0)
          operator delete(*(v494 - 8));
        v493 -= 64;
      }
      while (v493);
      v492 = (char *)v695;
      v486 = (std::string *)v668;
    }
    if (v492 != v697)
      free(v492);
    v752 = off_1E81A6E70;
    if ((_DWORD)v759 == 1 && v754)
      MEMORY[0x1CAA32F9C](v754, 0x1000C8077774924);
    if (SHIBYTE(v742) < 0)
      operator delete(v740);
  }
  if ((_DWORD)v707)
  {
    v495 = (uint64_t *)v706;
    v496 = 8 * v707;
    do
    {
      v497 = *v495++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v497 + 40) + 40, (uint64_t ***)v497);
      v498 = *(_QWORD *)(v497 + 24);
      v499 = *(_QWORD **)(v497 + 32);
      *v499 = v498;
      *(_QWORD *)(v498 + 8) = v499;
      *(_QWORD *)(v497 + 24) = 0;
      *(_QWORD *)(v497 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v497);
      v496 -= 8;
    }
    while (v496);
  }
  v500 = (uint64_t *)v701;
  if ((_DWORD)__b)
  {
    v501 = 6 * __b;
    do
    {
      v502 = (uint64_t *)v500[v501 - 4];
      if (&v500[v501 - 2] != v502)
        free(v502);
      v501 -= 6;
    }
    while (v501 * 8);
    v500 = (uint64_t *)v701;
  }
  if (v500 != &v703)
    free(v500);
  if (v706 != v708)
    free(v706);
  if (v654)
  {
    llvm::Module::~Module((llvm::Module *)v486);
    MEMORY[0x1CAA32FC0]();
  }
  sub_1C618A4D0(&v716);
  sub_1C618A4D0(&v713);
  MEMORY[0x1CAA32FB4](v711[0], 8);
  MEMORY[0x1CAA32FB4](v709[0], 8);
  if ((_DWORD)v725)
  {
    v503 = 8 * v725;
    v504 = (char *)v724 - 8;
    do
    {
      llvm::Value::deleteValue(*(llvm::Value **)&v504[v503]);
      v503 -= 8;
    }
    while (v503);
  }
  v505 = v732;
  if (v733)
  {
    v506 = 40 * v733;
    v507 = (_DWORD *)(v732 + 32);
    do
    {
      if ((*((_QWORD *)v507 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v507 >= 0x41u)
      {
        v508 = *((_QWORD *)v507 - 1);
        if (v508)
          MEMORY[0x1CAA32F9C](v508, 0x1000C8000313F17);
      }
      v507 += 10;
      v506 -= 40;
    }
    while (v506);
    v505 = v732;
  }
  MEMORY[0x1CAA32FB4](v505, 8);
  MEMORY[0x1CAA32FB4](v730, 8);
  if (v727 != v729)
    free(v727);
  if (v724 != v726)
    free(v724);
  return v487 & 1;
}

uint64_t sub_1C5AD7318(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLazyValueInfoWrapperPassPass(a1, v3);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Constraint Elimination";
  *(_QWORD *)(v5 + 8) = 22;
  *(_QWORD *)(v5 + 16) = "constraint-elimination";
  *(_QWORD *)(v5 + 24) = 22;
  *(_QWORD *)(v5 + 32) = &unk_1ED81BAC8;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5ADEC30;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5AD73C8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81BAC8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81940E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(qword_1ED81BAD0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AD7318;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(qword_1ED81BAD0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5AD7490(uint64_t a1, int a2, llvm::Value *a3, llvm::Constant *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v12;
  llvm **v13;
  llvm **v14;
  llvm **v15;
  llvm **v16;
  uint64_t v17;
  int v18;
  void **v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  _DWORD *v38;
  int v39;
  char v40;
  BOOL v41;
  _DWORD *v42;
  int v43;
  char v44;
  int v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  int v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[16];
  void *v60;
  uint64_t v61;
  _BYTE v62[16];
  void *v63;
  uint64_t v64;
  _BYTE v65[64];
  void *v66;
  uint64_t v67;
  char *v68[12];
  __int16 v69;
  void *v70;
  unsigned int v71;
  uint64_t v72;
  void *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76[12];
  __int16 v77;
  void **v78;
  uint64_t v79;
  _QWORD v80[8];

  v12 = a1;
  v80[6] = *MEMORY[0x1E0C80C00];
  v78 = (void **)v80;
  v79 = 0x600000000;
  sub_1C5AD9E6C((uint64_t)&v70, a1, a2, a3, a4, (uint64_t)&v78, 1);
  if (v71)
  {
    if (!v74)
      goto LABEL_16;
    v15 = (llvm **)v73;
    v16 = (llvm **)((char *)v73 + 24 * v74);
    while (sub_1C5AD7AE8(v12, *(_DWORD *)v15, v15[1], v15[2]))
    {
      v15 += 3;
      if (v15 == v16)
        goto LABEL_16;
    }
  }
  LODWORD(v79) = 0;
  sub_1C5AD9E6C((uint64_t)&v63, v12, a2, a3, a4, (uint64_t)&v78, 0);
  sub_1C614D378((uint64_t)&v70, (uint64_t)&v63);
  sub_1C476393C((uint64_t)&v73, (uint64_t)&v66);
  sub_1C4E015E0((uint64_t)v76, (uint64_t)v68);
  v77 = v69;
  sub_1C618A4D0(v68);
  if (v66 != &v67)
    free(v66);
  if (v63 != v65)
    free(v63);
  if (!v71)
    goto LABEL_46;
  if (!v74)
  {
LABEL_16:
    if ((_BYTE)v77)
      v17 = v12 + 392;
    else
      v17 = v12 + 48;
    if (!v71 || !sub_1C63119AC(v17, (uint64_t *)v70, v71))
      goto LABEL_46;
    v60 = v62;
    v61 = 0x200000000;
    if ((_BYTE)v77)
      v12 += 24;
    v18 = v79;
    if ((_DWORD)v79)
    {
      v19 = v78;
      v20 = 8 * v79;
      do
      {
        v21 = *v19;
        v22 = *(_DWORD *)(v12 + 8) + 1;
        v57 = *v19;
        LODWORD(v58) = v22;
        sub_1C5ADC8F0(v12, (uint64_t *)&v57, &v58, (uint64_t)&v63);
        v23 = v61;
        if (v61 >= (unint64_t)HIDWORD(v61))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 8);
          v23 = v61;
        }
        *((_QWORD *)v60 + v23) = v21;
        v18 = v61 + 1;
        LODWORD(v61) = v61 + 1;
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    v24 = *(_DWORD *)(a7 + 8);
    if (v24 >= *(_DWORD *)(a7 + 12))
    {
      v57 = 0;
      v38 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a7, 0, 48, (unint64_t *)&v57);
      v39 = *(_DWORD *)(a7 + 8);
      v40 = v77;
      v63 = v65;
      v64 = 0x200000000;
      if ((_DWORD)v61)
      {
        sub_1C49EEBE4((uint64_t)&v63, (uint64_t)&v60);
        v41 = (_DWORD)v64 == 0;
      }
      else
      {
        v41 = 1;
      }
      v38[12 * v39] = a5;
      v52 = (char *)&v38[12 * v39];
      *((_QWORD *)v52 + 2) = v52 + 32;
      v53 = (uint64_t)(v52 + 16);
      *(_DWORD *)(v53 - 12) = a6;
      *(_BYTE *)(v53 - 8) = v40;
      *(_QWORD *)(v53 + 8) = 0x200000000;
      if (!v41)
        sub_1C49EEBE4(v53, (uint64_t)&v63);
      if (v63 != v65)
        free(v63);
      sub_1C5ADEAD4((uint64_t *)a7, (uint64_t)v38);
      v54 = (int)v57;
      if (*(_QWORD *)a7 != a7 + 16)
        free(*(void **)a7);
      *(_QWORD *)a7 = v38;
      ++*(_DWORD *)(a7 + 8);
      *(_DWORD *)(a7 + 12) = v54;
      v30 = a6;
    }
    else
    {
      v25 = *(_QWORD *)a7;
      v26 = (_DWORD *)(*(_QWORD *)a7 + 48 * v24);
      v27 = v77;
      v63 = v65;
      v64 = 0x200000000;
      if (v18)
        sub_1C49EEBE4((uint64_t)&v63, (uint64_t)&v60);
      *v26 = a5;
      v28 = v25 + 48 * v24;
      *(_QWORD *)(v28 + 16) = v28 + 32;
      v29 = v28 + 16;
      v30 = a6;
      *(_DWORD *)(v29 - 12) = a6;
      *(_BYTE *)(v29 - 8) = v27;
      *(_QWORD *)(v29 + 8) = 0x200000000;
      if ((_DWORD)v64)
        sub_1C49EEBE4(v29, (uint64_t)&v63);
      if (v63 != v65)
        free(v63);
      ++*(_DWORD *)(a7 + 8);
    }
    if (!HIBYTE(v77))
      goto LABEL_44;
    v31 = (uint64_t *)v70;
    v32 = v71;
    if (v71)
    {
      v33 = 8 * v71;
      v34 = v70;
      do
      {
        *v34 = -*v34;
        ++v34;
        v33 -= 8;
      }
      while (v33);
    }
    sub_1C63119AC(v17, v31, v32);
    v57 = v59;
    v58 = 0x200000000;
    v35 = *(_DWORD *)(a7 + 8);
    if (v35 < *(_DWORD *)(a7 + 12))
    {
      v36 = *(_QWORD *)a7 + 48 * v35;
      v37 = v77;
      *(_DWORD *)v36 = a5;
      *(_DWORD *)(v36 + 4) = v30;
      *(_BYTE *)(v36 + 8) = v37;
      *(_QWORD *)(v36 + 16) = v36 + 32;
      *(_QWORD *)(v36 + 24) = 0x200000000;
      ++*(_DWORD *)(a7 + 8);
LABEL_42:
      if (v57 != v59)
        free(v57);
LABEL_44:
      if (v60 != v62)
        free(v60);
      goto LABEL_46;
    }
    v56 = 0;
    v42 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a7, 0, 48, &v56);
    v43 = *(_DWORD *)(a7 + 8);
    v44 = v77;
    v63 = v65;
    v64 = 0x200000000;
    v45 = v58;
    if (!(_DWORD)v58)
    {
LABEL_62:
      v42[12 * v43] = a5;
      v49 = (char *)&v42[12 * v43];
      *((_QWORD *)v49 + 2) = v49 + 32;
      v50 = (uint64_t)(v49 + 16);
      *(_DWORD *)(v50 - 12) = a6;
      *(_BYTE *)(v50 - 8) = v44;
      *(_QWORD *)(v50 + 8) = 0x200000000;
      if (v45)
        sub_1C49EEBE4(v50, (uint64_t)&v63);
      if (v63 != v65)
        free(v63);
      sub_1C5ADEAD4((uint64_t *)a7, (uint64_t)v42);
      v51 = v56;
      if (*(_QWORD *)a7 != a7 + 16)
        free(*(void **)a7);
      *(_QWORD *)a7 = v42;
      ++*(_DWORD *)(a7 + 8);
      *(_DWORD *)(a7 + 12) = v51;
      goto LABEL_42;
    }
    if (v57 != v59)
    {
      v63 = v57;
      v64 = v58;
      v57 = v59;
      HIDWORD(v58) = 0;
      goto LABEL_61;
    }
    if (v58 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v58, 8);
      v48 = v58;
      if (!(_DWORD)v58)
        goto LABEL_60;
      v47 = v57;
      v46 = v63;
    }
    else
    {
      v46 = v65;
      v47 = v59;
      v48 = v58;
    }
    memcpy(v46, v47, 8 * v48);
LABEL_60:
    LODWORD(v64) = v45;
LABEL_61:
    LODWORD(v58) = 0;
    goto LABEL_62;
  }
  v13 = (llvm **)v73;
  v14 = (llvm **)((char *)v73 + 24 * v74);
  while (sub_1C5AD7AE8(v12, *(_DWORD *)v13, v13[1], v13[2]))
  {
    v13 += 3;
    if (v13 == v14)
      goto LABEL_16;
  }
LABEL_46:
  sub_1C618A4D0(v76);
  if (v73 != &v75)
    free(v73);
  if (v70 != &v72)
    free(v70);
  if (v78 != v80)
    free(v78);
}

BOOL sub_1C5AD7AE8(uint64_t a1, int a2, llvm *a3, llvm *a4)
{
  _BOOL8 isConditionImplied;
  uint64_t v9;
  void *v11[2];
  _BYTE v12[64];
  void *v13[2];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17[12];
  __int16 v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  char *v25[12];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_1C5AD9BB0((uint64_t)&v19, a1, a2, a3, a4, 1);
  if (!v23)
  {
    if (!v20)
    {
      isConditionImplied = 0;
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  sub_1C5AD9BB0((uint64_t)v13, a1, a2, a3, a4, 0);
  sub_1C614D378((uint64_t)&v19, (uint64_t)v13);
  sub_1C476393C((uint64_t)&v22, (uint64_t)&v15);
  sub_1C4E015E0((uint64_t)v25, (uint64_t)v17);
  v26 = v18;
  sub_1C618A4D0(v17);
  if (v15 != &v16)
    free(v15);
  if (v13[0] != &v14)
    free(v13[0]);
  isConditionImplied = 0;
  if (!v23 && v20)
  {
LABEL_10:
    if ((_BYTE)v26)
      v9 = a1 + 392;
    else
      v9 = a1 + 48;
    v11[0] = v12;
    v11[1] = (void *)0x800000000;
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v11, (uint64_t)&v19);
    isConditionImplied = llvm::ConstraintSystem::isConditionImplied(v9, (uint64_t)v11);
    if (v11[0] != v12)
      free(v11[0]);
  }
LABEL_15:
  sub_1C618A4D0(v25);
  if (v22 != &v24)
    free(v22);
  if (v19 != &v21)
    free(v19);
  return isConditionImplied;
}

_QWORD *sub_1C5AD7CBC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;

  v1 = (_QWORD *)result[7];
  if (v1 != result + 9)
  {
    v15 = result;
    free(v1);
    result = v15;
  }
  v2 = result[2];
  if (v2 && v2 != -8192 && v2 != -4096)
  {
    v3 = *result & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v3 = result[1];
    v4 = (unint64_t *)result[1];
    if (v4)
    {
      *v4 = *v4 & 7 | v3;
    }
    else
    {
      v5 = result[2];
      v6 = ***(int32x2_t ****)v5;
      v7 = (unint64_t)v6[303];
      if (v7 <= v3)
      {
        v8 = v6[305].u32[0];
        if (v7 + 16 * v8 > v3)
        {
          v9 = v8 - 1;
          LODWORD(v10) = v9 & ((v5 >> 4) ^ (v5 >> 9));
          v11 = (uint64_t *)(v7 + 16 * v10);
          v12 = *v11;
          if (v5 == *v11)
          {
LABEL_14:
            *v11 = -8192;
            v6[304] = vadd_s32(v6[304], (int32x2_t)0x1FFFFFFFFLL);
            v5 = result[2];
          }
          else
          {
            v13 = 1;
            while (v12 != -4096)
            {
              v14 = v10 + v13++;
              v10 = v14 & v9;
              v12 = *(_QWORD *)(v7 + 16 * v10);
              if (v5 == v12)
              {
                v11 = (uint64_t *)(v7 + 16 * v10);
                goto LABEL_14;
              }
            }
          }
          *(_BYTE *)(v5 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5AD7DDC(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *a1 + 40 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 40 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_QWORD *)v16 = v13;
          *(_OWORD *)(v16 + 8) = *(_OWORD *)(v12 + 1);
          *(_DWORD *)(v16 + 32) = *((_DWORD *)v12 + 8);
          *(_QWORD *)(v16 + 24) = v12[3];
          *((_DWORD *)v12 + 8) = 0;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 5;
      }
      while (v12 != &v4[5 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 40 * v22;
    do
    {
      *result = -4096;
      result += 5;
      v23 -= 40;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C5AD7F84(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  const char *v6;
  llvm::DataLayout *v7;
  signed int IndexTypeSizeInBits;
  uint64_t v9;
  void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  int v18;
  const llvm::APInt *v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  llvm::Value **v25;
  llvm::ConstantInt **v26;
  uint64_t ***v27;
  char *v28;
  llvm::Value ***v29;
  llvm::Value **v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  llvm::ConstantInt *v34;
  llvm::Value *v35;
  llvm::Value ****v36;
  llvm::Value *v37;
  uint64_t v38;
  llvm::ConstantInt **v39;
  char *v40;
  char *v41;
  llvm::ConstantInt *v42;
  _QWORD *v43;
  llvm::ConstantInt *v44;
  llvm::Value *v45;
  _QWORD *v46;
  llvm::Value *v47;
  uint64_t v48;
  char *v49;
  uint64_t ***v50;
  llvm::PointerType *v51;
  llvm::UndefValue *v52;
  llvm::Type *v53;
  llvm::UndefValue *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t ***v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  llvm::ConstantInt *v67;
  _QWORD *v68;
  llvm::ConstantInt *v69;
  uint64_t v70;
  uint64_t result;
  _DWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *__src;
  unsigned int v91;
  uint64_t v92;
  char v93;
  const char *v94;
  uint64_t v95;
  __int16 v96;
  BOOL v97;
  uint64_t ***v98;
  __int16 v99;

  v6 = (const char *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v7 = *(llvm::DataLayout **)(a1 + 24);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v7, (uint64_t)*a2);
  v91 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v7 = *(llvm::DataLayout **)(a1 + 24);
  }
  else
  {
    __src = 0;
  }
  v85[0] = 0;
  v85[1] = 0;
  v86 = 0;
  v88 = 0;
  v89 = 0;
  v87 = 0;
  if (llvm::GEPOperator::collectOffset((uint64_t)a2, v7, IndexTypeSizeInBits, (uint64_t)v85, (unsigned int *)&__src))
  {
    v9 = v91;
    if (v91 > 0x40)
    {
      v11 = (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8;
      v10 = (void *)operator new[]();
      memcpy(v10, __src, v11);
    }
    else
    {
      v10 = __src;
    }
    v80[0] = 0;
    v80[1] = 0;
    v81 = 0;
    sub_1C4DFEB14((uint64_t)v80, (uint64_t)v85);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    sub_1C5AD8CA0(&v82, v87, v88, 0xAAAAAAAAAAAAAAABLL * ((v88 - v87) >> 3));
    v12 = 0;
    if (v82 != v83)
    {
      if (v9 > 0x40)
      {
        v14 = 0;
        v15 = (unint64_t)(v9 + 63) >> 6;
        do
        {
          if (v15-- < 1)
            break;
          v17 = *((_QWORD *)v10 + v15);
          v14 += __clz(v17);
        }
        while (!v17);
        v18 = v9 | 0xFFFFFFC0;
        if ((v9 & 0x3F) == 0)
          v18 = 0;
        v13 = v14 + v18 == (_DWORD)v9;
      }
      else
      {
        v13 = v10 == 0;
      }
      if (v13)
        v12 = 1;
      else
        v12 = 2;
    }
    sub_1C6311868((uint64_t)v80);
    if (v9 >= 0x41 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    if (v12 != 2)
    {
      if (v12 == 1)
      {
        v23 = *(_DWORD *)(v87 + 16);
        if (v23 > 0x40)
          v24 = **(_QWORD **)(v87 + 8);
        else
          v24 = (uint64_t)(*(_QWORD *)(v87 + 8) << -(char)v23) >> -(char)v23;
        v25 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v87, v24, 0);
        v26 = *(llvm::ConstantInt ***)v87;
        goto LABEL_40;
      }
      v21 = (_QWORD *)**a2;
      LODWORD(v94) = IndexTypeSizeInBits;
      if (IndexTypeSizeInBits <= 63)
      {
        if (IndexTypeSizeInBits <= 31)
        {
          switch(IndexTypeSizeInBits)
          {
            case 16:
              v22 = *v21 + 1936;
              goto LABEL_39;
            case 8:
              v22 = *v21 + 1912;
              goto LABEL_39;
            case 1:
              v22 = *v21 + 1888;
              goto LABEL_39;
          }
        }
        else if (IndexTypeSizeInBits == 32)
        {
          v22 = *v21 + 1960;
          goto LABEL_39;
        }
      }
      else
      {
        if (IndexTypeSizeInBits == 64)
        {
          v22 = *v21 + 1984;
LABEL_39:
          v26 = llvm::ConstantInt::get((llvm::ConstantInt **)v22, (llvm::Type *)&__src, v20);
          v25 = 0;
LABEL_40:
          v27 = 0;
          if ((llvm::isKnownNonNegative((llvm *)v26, *(const llvm::Value **)(a1 + 24), (const llvm::DataLayout *)2, 0, 0, 0, (const llvm::DominatorTree *)1) & 1) == 0)
          {
            v28 = (char *)operator new(0x80uLL);
            v27 = (uint64_t ***)(v28 + 64);
            *((_DWORD *)v28 + 21) = *((_DWORD *)v28 + 21) & 0x38000000 | 2;
            *(_QWORD *)v28 = 0;
            *((_QWORD *)v28 + 1) = 0;
            *((_QWORD *)v28 + 2) = 0;
            *((_QWORD *)v28 + 3) = v28 + 64;
            *((_QWORD *)v28 + 4) = 0;
            v29 = (llvm::Value ***)(v28 + 32);
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = v28 + 64;
            v30 = llvm::ConstantInt::get(*v26, 0, 0);
            v99 = 257;
            sub_1C4774CC4(*v26);
            *((_QWORD *)v28 + 8) = v31;
            *((_QWORD *)v28 + 9) = 0;
            v32 = *((_DWORD *)v28 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v28 + 20) = 81;
            *((_DWORD *)v28 + 21) = v32;
            *(_OWORD *)(v28 + 88) = 0u;
            *(_OWORD *)(v28 + 104) = 0u;
            *((_DWORD *)v28 + 30) = 0;
            if (*(_QWORD *)v28)
            {
              **((_QWORD **)v28 + 2) = *((_QWORD *)v28 + 1);
              v74 = *((_QWORD *)v28 + 1);
              if (v74)
                *(_QWORD *)(v74 + 16) = *((_QWORD *)v28 + 2);
            }
            *(_QWORD *)v28 = v26;
            v33 = v26 + 1;
            v34 = v26[1];
            *((_QWORD *)v28 + 1) = v34;
            if (v34)
              *((_QWORD *)v34 + 2) = v28 + 8;
            *((_QWORD *)v28 + 2) = v33;
            *v33 = v28;
            if (*((_QWORD *)v28 + 4))
            {
              **((_QWORD **)v28 + 6) = *((_QWORD *)v28 + 5);
              v75 = *((_QWORD *)v28 + 5);
              if (v75)
                *(_QWORD *)(v75 + 16) = *((_QWORD *)v28 + 6);
            }
            *v29 = v30;
            if (v30)
            {
              v37 = v30[1];
              v36 = (llvm::Value ****)(v30 + 1);
              v35 = v37;
              *((_QWORD *)v28 + 5) = v37;
              if (v37)
                *((_QWORD *)v35 + 2) = v28 + 40;
              *((_QWORD *)v28 + 6) = v36;
              *v36 = v29;
            }
            *((_WORD *)v28 + 41) = 39;
            llvm::Value::setName(v27, (uint64_t)&v94);
            v38 = *(unsigned int *)(a1 + 40);
            if (v38 >= *(_DWORD *)(a1 + 44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v38 + 1, 8);
              LODWORD(v38) = *(_DWORD *)(a1 + 40);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38) = v27;
            ++*(_DWORD *)(a1 + 40);
          }
          if (v25)
          {
            v99 = 257;
            v40 = (char *)operator new(0x80uLL);
            v41 = v40;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 2) = 0;
            *((_QWORD *)v40 + 1) = 0;
            *((_QWORD *)v40 + 5) = 0;
            *((_QWORD *)v40 + 6) = 0;
            *((_QWORD *)v40 + 4) = 0;
            *((_QWORD *)v40 + 8) = *v26;
            v39 = (llvm::ConstantInt **)(v40 + 64);
            *((_QWORD *)v40 + 3) = v40 + 64;
            *((_QWORD *)v40 + 7) = v40 + 64;
            *((_QWORD *)v40 + 9) = 0;
            v40[80] = 45;
            v40[81] = 0;
            *((_WORD *)v40 + 41) = 0;
            *((_DWORD *)v40 + 21) = 2;
            *((_DWORD *)v40 + 30) = 0;
            *(_OWORD *)(v40 + 104) = 0u;
            *(_OWORD *)(v40 + 88) = 0u;
            *(_QWORD *)v40 = v26;
            v44 = v26[1];
            v43 = v26 + 1;
            v42 = v44;
            *((_QWORD *)v40 + 1) = v44;
            if (v44)
              *((_QWORD *)v42 + 2) = v40 + 8;
            *((_QWORD *)v40 + 2) = v43;
            *v43 = v40;
            if (*((_QWORD *)v40 + 4))
            {
              **((_QWORD **)v40 + 6) = *((_QWORD *)v40 + 5);
              v76 = *((_QWORD *)v40 + 5);
              if (v76)
                *(_QWORD *)(v76 + 16) = *((_QWORD *)v40 + 6);
            }
            *((_QWORD *)v40 + 4) = v25;
            v47 = v25[1];
            v46 = v25 + 1;
            v45 = v47;
            *((_QWORD *)v40 + 5) = v47;
            if (v47)
              *((_QWORD *)v45 + 2) = v40 + 40;
            *((_QWORD *)v40 + 6) = v46;
            *v46 = v40 + 32;
            llvm::Value::setName((uint64_t ***)v40 + 8, (uint64_t)&v94);
            v41[81] |= 2u;
            v48 = *(unsigned int *)(a1 + 40);
            if (v48 >= *(_DWORD *)(a1 + 44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a1 + 40);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v48) = v39;
            ++*(_DWORD *)(a1 + 40);
          }
          else
          {
            v39 = v26;
          }
          v94 = v6;
          v95 = 0;
          sub_1C509BD8C(a1 + 2144, &v94, &v95, (uint64_t)&v92);
          if (v93)
          {
            v49 = (char *)operator new(0x60uLL);
            v50 = (uint64_t ***)(v49 + 32);
            *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0x38000000 | 1;
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
            *((_QWORD *)v49 + 2) = 0;
            *((_QWORD *)v49 + 3) = v49 + 32;
            v51 = *v39;
            v52 = (llvm::UndefValue *)llvm::PointerType::get(*v39, 0);
            v54 = llvm::UndefValue::get(v52, v53);
            v94 = "ub";
            v99 = 259;
            *((_QWORD *)v49 + 4) = v51;
            *((_QWORD *)v49 + 5) = 0;
            *((_WORD *)v49 + 24) = 60;
            *((_DWORD *)v49 + 13) = *((_DWORD *)v49 + 13) & 0xC0000000 | 1;
            *(_OWORD *)(v49 + 56) = 0u;
            *(_OWORD *)(v49 + 72) = 0u;
            *((_DWORD *)v49 + 22) = 0;
            if (*(_QWORD *)v49)
            {
              **((_QWORD **)v49 + 2) = *((_QWORD *)v49 + 1);
              v77 = *((_QWORD *)v49 + 1);
              if (v77)
                *(_QWORD *)(v77 + 16) = *((_QWORD *)v49 + 2);
            }
            *(_QWORD *)v49 = v54;
            if (v54)
            {
              v57 = *((_QWORD *)v54 + 1);
              v55 = (_QWORD *)((char *)v54 + 8);
              v56 = v57;
              *((_QWORD *)v49 + 1) = v57;
              if (v57)
                *(_QWORD *)(v56 + 16) = v49 + 8;
              *((_QWORD *)v49 + 2) = v55;
              *v55 = v49;
            }
            *((_WORD *)v49 + 25) = 0;
            v49[92] = 1;
            llvm::Value::setName(v50, (uint64_t)&v94);
            *(_QWORD *)(v92 + 8) = v50;
            v58 = *(unsigned int *)(a1 + 40);
            if (v58 >= *(_DWORD *)(a1 + 44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v58 + 1, 8);
              LODWORD(v58) = *(_DWORD *)(a1 + 40);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v58) = v50;
            ++*(_DWORD *)(a1 + 40);
          }
          if (**(llvm::ConstantInt ***)(v92 + 8) == *v39)
          {
            v59 = (char *)operator new(0x80uLL);
            v60 = (uint64_t ***)(v59 + 64);
            *((_DWORD *)v59 + 21) = *((_DWORD *)v59 + 21) & 0x38000000 | 2;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = 0;
            *((_QWORD *)v59 + 3) = v59 + 64;
            *((_QWORD *)v59 + 4) = 0;
            *((_QWORD *)v59 + 5) = 0;
            *((_QWORD *)v59 + 6) = 0;
            *((_QWORD *)v59 + 7) = v59 + 64;
            v61 = *(_QWORD *)(v92 + 8);
            v99 = 257;
            sub_1C4774CC4(*(_DWORD **)v61);
            *((_QWORD *)v59 + 8) = v62;
            *((_QWORD *)v59 + 9) = 0;
            v63 = *((_DWORD *)v59 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v59 + 20) = 81;
            *((_DWORD *)v59 + 21) = v63;
            *(_OWORD *)(v59 + 88) = 0u;
            *(_OWORD *)(v59 + 104) = 0u;
            *((_DWORD *)v59 + 30) = 0;
            if (*(_QWORD *)v59)
            {
              **((_QWORD **)v59 + 2) = *((_QWORD *)v59 + 1);
              v78 = *((_QWORD *)v59 + 1);
              if (v78)
                *(_QWORD *)(v78 + 16) = *((_QWORD *)v59 + 2);
            }
            *(_QWORD *)v59 = v61;
            v66 = *(_QWORD *)(v61 + 8);
            v65 = (_QWORD *)(v61 + 8);
            v64 = v66;
            *((_QWORD *)v59 + 1) = v66;
            if (v66)
              *(_QWORD *)(v64 + 16) = v59 + 8;
            *((_QWORD *)v59 + 2) = v65;
            *v65 = v59;
            if (*((_QWORD *)v59 + 4))
            {
              **((_QWORD **)v59 + 6) = *((_QWORD *)v59 + 5);
              v79 = *((_QWORD *)v59 + 5);
              if (v79)
                *(_QWORD *)(v79 + 16) = *((_QWORD *)v59 + 6);
            }
            *((_QWORD *)v59 + 4) = v39;
            v69 = v39[1];
            v68 = v39 + 1;
            v67 = v69;
            *((_QWORD *)v59 + 5) = v69;
            if (v69)
              *((_QWORD *)v67 + 2) = v59 + 40;
            *((_QWORD *)v59 + 6) = v68;
            *v68 = v59 + 32;
            *((_WORD *)v59 + 41) = 35;
            llvm::Value::setName(v60, (uint64_t)&v94);
            v94 = v59 + 64;
            v95 = *(_QWORD *)(a3 + 72);
            v96 = 0;
            v98 = v27;
            v97 = v59[80] - 81 < 2;
            sub_1C47E9C18(a1 + 80, (unint64_t)&v94);
            v70 = *(unsigned int *)(a1 + 40);
            if (v70 >= *(_DWORD *)(a1 + 44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v70 + 1, 8);
              LODWORD(v70) = *(_DWORD *)(a1 + 40);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v70) = v60;
            ++*(_DWORD *)(a1 + 40);
          }
          goto LABEL_81;
        }
        if (IndexTypeSizeInBits == 128)
        {
          v22 = *v21 + 2008;
          goto LABEL_39;
        }
      }
      v72 = sub_1C5270984(*v21 + 2168, &v94);
      v22 = *((_QWORD *)v72 + 1);
      if (!v22)
      {
        v22 = sub_1C484358C(*v21 + 2040, 24, 3);
        v73 = (int)v94;
        *(_QWORD *)v22 = v21;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 8) = (v73 << 8) | 0xDu;
        *((_QWORD *)v72 + 1) = v22;
      }
      goto LABEL_39;
    }
  }
LABEL_81:
  result = sub_1C6311868((uint64_t)v85);
  if (v91 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      return MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5AD8888(uint64_t a1, llvm::Loop *a2, llvm::AssumptionCache **this)
{
  uint64_t v3;
  const llvm::SCEV **v5;
  const llvm::SCEV *v6;
  int v7;
  const llvm::SCEV *v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = a1;
  if (a1 && *(_WORD *)(a1 + 24) == 4)
  {
    v5 = *(const llvm::SCEV ***)(a1 + 32);
    v6 = *v5;
    v7 = *((unsigned __int16 *)*v5 + 12);
    v8 = llvm::ScalarEvolution::applyLoopGuards(this, v5[1], a2);
    if (v6 && v7 == 0)
    {
      v10 = *((_QWORD *)v6 + 4);
      v11 = *(_DWORD *)(v10 + 32);
      if (v11 > 0x40)
        v12 = **(_QWORD **)(v10 + 24);
      else
        v12 = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11;
      if (v12 == -1)
      {
        if (llvm::ScalarEvolution::isKnownPositive((llvm::ScalarEvolution *)this, v8))
          v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
      }
    }
  }
  v13 = *(unsigned __int16 *)(v3 + 24);
  if (v13 == 2)
  {
    v3 = *(_QWORD *)(v3 + 32);
    v13 = *(unsigned __int16 *)(v3 + 24);
    if (*(_WORD *)(v3 + 24))
      goto LABEL_16;
LABEL_19:
    v14 = v3 + 32;
    return *(_QWORD *)v14;
  }
  if (!*(_WORD *)(v3 + 24))
    goto LABEL_19;
LABEL_16:
  if (v13 == 14)
  {
    v14 = v3 - 8;
    return *(_QWORD *)v14;
  }
  return 0;
}

BOOL sub_1C5AD8974(uint64_t *a1, llvm::BasicBlock **this, uint64_t a3)
{
  _BOOL8 result;
  llvm::BasicBlock *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v18;
  BOOL v19;
  llvm::BasicBlock *v21;

  if (llvm::BasicBlock::getSingleSuccessor((llvm::BasicBlock *)this))
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*a1, (uint64_t)this, a3);
  v7 = this[5];
  if (v7 == (llvm::BasicBlock *)(this + 5))
    return 0;
  if (v7)
    v8 = (char *)v7 - 24;
  else
    v8 = 0;
  v9 = v8[16];
  if (v9 != 30)
  {
    v10 = 2;
    result = 0;
    switch(v8[16])
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
        __break(1u);
        goto LABEL_44;
      case 31:
        v10 = (*((_DWORD *)v8 + 5) >> 1) & 0x3FFFFFF;
        break;
      case 32:
      case 38:
LABEL_44:
        v10 = (*((_DWORD *)v8 + 5) & 0x7FFFFFF) - 1;
        break;
      case 33:
        goto LABEL_11;
      case 36:
        v10 = *((_WORD *)v8 + 9) & 1;
        break;
      case 37:
        v10 = 1;
        goto LABEL_11;
      case 39:
        v10 = *((_DWORD *)v8 + 20) + 1;
        break;
      default:
        return 0;
    }
    if (v10)
      goto LABEL_11;
    return 0;
  }
  if ((*((_DWORD *)v8 + 5) & 0x7FFFFFF) == 3)
    v10 = 2;
  else
    v10 = 1;
LABEL_11:
  v11 = 0;
  for (i = v8 - 32; ; i -= 32)
  {
    if (v9 != 30)
      __asm { BR              X2 }
    if (*(_QWORD *)i != a3)
      break;
    if (v10 == ++v11)
      return 0;
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (!v13)
    return 1;
  while (1)
  {
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(unsigned __int8 *)(v14 + 16);
    v16 = v14 && v15 >= 0x1C;
    if (v16 && v15 - 29 <= 0xA)
      break;
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      return 1;
  }
LABEL_36:
  v21 = *(llvm::BasicBlock **)(v14 + 40);
  if (v21 == (llvm::BasicBlock *)this
    || (result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*a1, a3, (uint64_t)v21), (_DWORD)result))
  {
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        return 1;
      v14 = *(_QWORD *)(v13 + 24);
      v18 = *(unsigned __int8 *)(v14 + 16);
      if (v14)
        v19 = v18 >= 0x1C;
      else
        v19 = 0;
      if (v19 && v18 - 29 < 0xB)
        goto LABEL_36;
    }
  }
  return result;
}

llvm::Value *sub_1C5AD8BF0(llvm::Value *result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *v8;
  BOOL v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 >= 0x1C && v3 - 83 >= 0xFFFFFFFE)
  {
    v5 = (uint64_t)result;
    result = *(llvm::Value **)(a2 - 64);
    if (result)
    {
      v6 = *(llvm::Value **)(a2 - 32);
      if (v6)
      {
        if ((*(_WORD *)(a2 + 18) & 0x3F) == 0x23)
        {
          v8 = llvm::Value::stripPointerCastsSameRepresentation(result);
          result = llvm::Value::stripPointerCastsSameRepresentation(v6);
          v9 = *((_BYTE *)v8 + 16) != 62 || v8 == 0;
          if (!v9 && *((llvm::Value **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)) == result)
            return (llvm::Value *)sub_1C5AD7F84(v5, (_QWORD **)v8, a3);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5AD8CA0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = a2 + 8;
      do
      {
        v10 = v9 - 8;
        *v8 = *(_QWORD *)(v9 - 8);
        v11 = *(_DWORD *)(v9 + 8);
        *((_DWORD *)v8 + 4) = v11;
        if (v11 > 0x40)
        {
          v12 = (void *)operator new[]();
          v8[1] = v12;
          result = memcpy(v12, *(const void **)v9, (((unint64_t)*((unsigned int *)v8 + 4) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v8[1] = *(_QWORD *)v9;
        }
        v8 += 3;
        v9 += 24;
      }
      while (v10 + 24 != a3);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1C5AD8D94(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          v6 = *((_QWORD *)v4 - 2);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5AD8E24(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  uint64_t *v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  __int128 v21;
  uint64_t *v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t *v45;
  __int128 *v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t *v51;
  __int128 v52;
  unint64_t v53;
  uint64_t *v54;
  __int128 v55;
  _BYTE v56[13];

  if (a3 < 2)
    return;
  v7 = a1;
  if (a3 == 2)
  {
    v8 = a2 - 4;
    if (sub_1C5AD91FC(a2 - 4, a1))
    {
      v10 = *(_OWORD *)v7;
      v9 = *((_OWORD *)v7 + 1);
      v11 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v11;
      *(_OWORD *)v8 = v10;
      *((_OWORD *)v8 + 1) = v9;
    }
    return;
  }
  if ((uint64_t)a3 <= 128)
  {
    if (a1 == a2)
      return;
    v13 = a1 + 4;
    if (a1 + 4 == a2)
      return;
    v14 = a1;
    while (1)
    {
      v15 = v13;
      if (!sub_1C5AD91FC(v13, v14))
        goto LABEL_48;
      v16 = v14[4];
      v17 = v14[5];
      v18 = *((unsigned __int8 *)v14 + 48);
      v19 = *((_BYTE *)v14 + 49);
      v20 = *((unsigned __int8 *)v14 + 50);
      *(_QWORD *)v56 = *(uint64_t *)((char *)v14 + 51);
      *(_QWORD *)&v56[5] = v14[7];
      v21 = *((_OWORD *)v14 + 1);
      v22 = v7;
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v21;
      if (v14 == v7)
        goto LABEL_47;
      do
      {
        v22 = v14;
        v14 -= 4;
        v23 = *((_DWORD *)v22 - 6);
        v24 = v17 >= v23;
        if ((_DWORD)v17 != v23)
          goto LABEL_26;
        if (v18 || !*((_BYTE *)v22 - 16))
        {
          if (v18 && !*((_BYTE *)v22 - 16))
            goto LABEL_47;
          if (!v20 || *((_BYTE *)v22 - 14))
          {
            if (!v20 && *((_BYTE *)v22 - 14))
              goto LABEL_47;
            if (!v20 || !*((_BYTE *)v22 - 14))
            {
              v27 = *v14;
              v28 = *(_QWORD *)(v16 + 40);
              v29 = *(__int16 *)(v28 + 18);
              if ((v29 & 0x80000000) == 0)
              {
                v36 = *(_QWORD *)(v28 + 48);
                if (v36 != v28 + 40)
                {
                  v37 = 0;
                  do
                  {
                    v38 = v36 - 24;
                    if (!v36)
                      v38 = 0;
                    *(_DWORD *)(v38 + 56) = v37++;
                    v36 = *(_QWORD *)(v36 + 8);
                  }
                  while (v36 != v28 + 40);
                }
                *(_WORD *)(v28 + 18) = v29 | 0x8000;
              }
              v24 = *(_DWORD *)(v16 + 56) >= *(_DWORD *)(v27 + 56);
LABEL_26:
              if (v24)
                goto LABEL_47;
              goto LABEL_27;
            }
            v25 = *(_DWORD *)(v16 + 20);
            if ((v25 & 0x40000000) != 0)
              v26 = *(_QWORD **)(v16 - 8);
            else
              v26 = (_QWORD *)(v16 - 32 * (v25 & 0x7FFFFFF));
            v31 = *(_BYTE *)(*v26 + 16) == 16 || *(_BYTE *)(v26[4] + 16) == 16;
            v32 = *v14;
            v33 = *(_DWORD *)(*v14 + 20);
            if ((v33 & 0x40000000) != 0)
              v34 = *(_QWORD **)(v32 - 8);
            else
              v34 = (_QWORD *)(v32 - 32 * (v33 & 0x7FFFFFF));
            if (*(_BYTE *)(*v34 + 16) == 16)
              goto LABEL_47;
            v35 = !v31;
            if (*(_BYTE *)(v34[4] + 16) == 16)
              v35 = 1;
            if ((v35 & 1) != 0)
              goto LABEL_47;
          }
        }
LABEL_27:
        v30 = *((_OWORD *)v14 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v14;
        *((_OWORD *)v22 + 1) = v30;
      }
      while (v14 != v7);
      v22 = v7;
LABEL_47:
      *v22 = v16;
      v22[1] = v17;
      *((_BYTE *)v22 + 16) = v18;
      *((_BYTE *)v22 + 17) = v19;
      *((_BYTE *)v22 + 18) = v20;
      *(uint64_t *)((char *)v22 + 19) = *(_QWORD *)v56;
      v22[3] = *(_QWORD *)&v56[5];
LABEL_48:
      v13 = v15 + 4;
      v14 = v15;
      if (v15 + 4 == a2)
        return;
    }
  }
  v40 = (__int128 *)a4;
  v41 = a3 >> 1;
  v42 = (uint64_t)&a1[4 * (a3 >> 1)];
  v43 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_1C5AD8E24(a1, v42, v43, a4, a5);
    sub_1C5AD8E24(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v40, a5);
    sub_1C5AD9554((uint64_t)v7, &v7[4 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v40, a5);
    return;
  }
  v44 = sub_1C5AD9350((uint64_t)a1, v42, v43, a4, a6);
  v45 = (uint64_t *)&v40[2 * v41];
  sub_1C5AD9350((uint64_t)&v7[4 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v45, v44);
  v46 = &v40[2 * a3];
  v47 = (__int128 *)v45;
  while (v47 != v46)
  {
    if (sub_1C5AD91FC((uint64_t *)v47, (uint64_t *)v40))
    {
      v48 = *v47;
      v49 = v47[1];
      v47 += 2;
    }
    else
    {
      v48 = *v40;
      v49 = v40[1];
      v40 += 2;
    }
    *(_OWORD *)v7 = v48;
    *((_OWORD *)v7 + 1) = v49;
    v7 += 4;
    if (v40 == (__int128 *)v45)
    {
      if (v47 != v46)
      {
        v50 = 0;
        do
        {
          v51 = &v7[v50 / 8];
          v52 = v47[v50 / 0x10 + 1];
          *(_OWORD *)v51 = v47[v50 / 0x10];
          *((_OWORD *)v51 + 1) = v52;
          v50 += 32;
        }
        while (&v47[v50 / 0x10] != v46);
      }
      return;
    }
  }
  if (v40 != (__int128 *)v45)
  {
    v53 = 0;
    do
    {
      v54 = &v7[v53 / 8];
      v55 = v40[v53 / 0x10 + 1];
      *(_OWORD *)v54 = v40[v53 / 0x10];
      *((_OWORD *)v54 + 1) = v55;
      v53 += 32;
    }
    while (&v40[v53 / 0x10] != (__int128 *)v45);
  }
}

uint64_t sub_1C5AD91FC(uint64_t *a1, uint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a2 + 2);
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a1 + 16))
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    return 1;
  if (*((_BYTE *)a1 + 16))
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
    return 0;
  if (*((_BYTE *)a1 + 18) && !*((_BYTE *)a2 + 18))
    return 1;
  if (!*((_BYTE *)a1 + 18) && *((_BYTE *)a2 + 18))
    return 0;
  v9 = *a1;
  if (!*((_BYTE *)a1 + 18) || !*((_BYTE *)a2 + 18))
  {
    v12 = *a2;
    v13 = *(_QWORD *)(v9 + 40);
    v14 = *(__int16 *)(v13 + 18);
    if ((v14 & 0x80000000) == 0)
    {
      v20 = *(_QWORD *)(v13 + 48);
      if (v20 != v13 + 40)
      {
        v21 = 0;
        do
        {
          v22 = v20 - 24;
          if (!v20)
            v22 = 0;
          *(_DWORD *)(v22 + 56) = v21++;
          v20 = *(_QWORD *)(v20 + 8);
        }
        while (v20 != v13 + 40);
      }
      *(_WORD *)(v13 + 18) = v14 | 0x8000;
    }
    v4 = *(_DWORD *)(v9 + 56) >= *(_DWORD *)(v12 + 56);
    return !v4;
  }
  v10 = *(_DWORD *)(v9 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD **)(v9 - 8);
  else
    v11 = (_QWORD *)(v9 - 32 * (v10 & 0x7FFFFFF));
  v15 = *(_BYTE *)(*v11 + 16) == 16 || *(unsigned __int8 *)(v11[4] + 16) == 16;
  v16 = *a2;
  v17 = *(_DWORD *)(*a2 + 20);
  if ((v17 & 0x40000000) != 0)
    v18 = *(_QWORD **)(v16 - 8);
  else
    v18 = (_QWORD *)(v16 - 32 * (v17 & 0x7FFFFFF));
  v19 = *(_BYTE *)(*v18 + 16) != 16 && *(unsigned __int8 *)(v18[4] + 16) != 16;
  return v15 & v19;
}

__n128 sub_1C5AD9350(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, __n128 result)
{
  uint64_t *v5;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t *v31;
  __int128 v32;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = (_OWORD *)(a2 - 32);
      if (sub_1C5AD91FC((uint64_t *)(a2 - 32), (uint64_t *)a1))
      {
        v11 = v10[1];
        *(_OWORD *)v5 = *v10;
        *((_OWORD *)v5 + 1) = v11;
        result = *(__n128 *)v8;
        v12 = *(_OWORD *)(v8 + 16);
      }
      else
      {
        v23 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v5 = *(_OWORD *)v8;
        *((_OWORD *)v5 + 1) = v23;
        result = *(__n128 *)v10;
        v12 = v10[1];
      }
      *((__n128 *)v5 + 2) = result;
      *((_OWORD *)v5 + 3) = v12;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *((_OWORD *)a4 + 1) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v24 = a1 + 32 * (a3 >> 1);
      sub_1C5AD8E24(a1, v24, a3 >> 1, a4, a3 >> 1);
      sub_1C5AD8E24(v8 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), &v5[4 * (a3 >> 1)], a3 - (a3 >> 1));
      v25 = v8 + 32 * (a3 >> 1);
      while (v25 != a2)
      {
        if (sub_1C5AD91FC((uint64_t *)v25, (uint64_t *)v8))
        {
          result = *(__n128 *)v25;
          v26 = *(_OWORD *)(v25 + 16);
          v25 += 32;
        }
        else
        {
          result = *(__n128 *)v8;
          v26 = *(_OWORD *)(v8 + 16);
          v8 += 32;
        }
        *(__n128 *)v5 = result;
        *((_OWORD *)v5 + 1) = v26;
        v5 += 4;
        if (v8 == v24)
        {
          if (v25 != a2)
          {
            v27 = 0;
            do
            {
              v28 = &v5[v27 / 8];
              result = *(__n128 *)(v25 + v27);
              v29 = *(_OWORD *)(v25 + v27 + 16);
              *(__n128 *)v28 = result;
              *((_OWORD *)v28 + 1) = v29;
              v27 += 32;
            }
            while (v25 + v27 != a2);
          }
          return result;
        }
      }
      if (v8 != v24)
      {
        v30 = 0;
        do
        {
          v31 = &v5[v30 / 8];
          result = *(__n128 *)(v8 + v30);
          v32 = *(_OWORD *)(v8 + v30 + 16);
          *(__n128 *)v31 = result;
          *((_OWORD *)v31 + 1) = v32;
          v30 += 32;
        }
        while (v8 + v30 != v24);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v14 = *(_OWORD *)(a1 + 16);
      v13 = a1 + 32;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *((_OWORD *)a4 + 1) = v14;
      if (a1 + 32 != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v16;
          v16 += 4;
          v18 = v16;
          if (sub_1C5AD91FC((uint64_t *)v13, v17))
          {
            v19 = *((_OWORD *)v17 + 1);
            *(_OWORD *)v16 = *(_OWORD *)v17;
            *((_OWORD *)v16 + 1) = v19;
            v18 = v5;
            if (v17 != v5)
            {
              v20 = v15;
              while (1)
              {
                v18 = (uint64_t *)((char *)v5 + v20);
                if (!sub_1C5AD91FC((uint64_t *)v13, (uint64_t *)((char *)v5 + v20 - 32)))
                  break;
                v21 = *(_OWORD *)((char *)v5 + v20 - 16);
                *(_OWORD *)v18 = *(_OWORD *)((char *)v5 + v20 - 32);
                *((_OWORD *)v18 + 1) = v21;
                v20 -= 32;
                if (!v20)
                {
                  v18 = v5;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v13;
          v22 = *(_OWORD *)(v13 + 16);
          v13 += 32;
          *(__n128 *)v18 = result;
          *((_OWORD *)v18 + 1) = v22;
          v15 += 32;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5AD9554(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 *v47;
  uint64_t *v48;
  uint64_t *v49;
  __int128 v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  if (!a5)
    return result;
  v9 = a5;
  v13 = result;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4)
      return result;
    for (i = v13; ; i += 32)
    {
      result = sub_1C5AD91FC(a2, (uint64_t *)v13);
      if ((result & 1) != 0)
        break;
      v13 += 32;
      if (!--a4)
        return result;
    }
    v63 = a6;
    v64 = a3;
    v62 = a7;
    if (a4 < v9)
    {
      if (v9 >= 0)
        v15 = v9;
      else
        v15 = v9 + 1;
      v16 = v15 >> 1;
      a3 = &a2[4 * (v15 >> 1)];
      v17 = ((uint64_t)a2 - i) >> 5;
      if ((uint64_t *)v13 == a2)
      {
        v13 = (uint64_t)a2;
        goto LABEL_45;
      }
      v61 = v9;
      v18 = v13;
      do
      {
        if (sub_1C5AD91FC(a3, (uint64_t *)(v18 + 32 * (v17 >> 1))))
        {
          v17 >>= 1;
        }
        else
        {
          v18 += 32 * (v17 >> 1) + 32;
          v17 += ~(v17 >> 1);
        }
      }
      while (v17);
      v17 = (v18 - i) >> 5;
      goto LABEL_34;
    }
    if (a4 == 1)
    {
      v68 = *(_OWORD *)v13;
      v73 = *(_OWORD *)(v13 + 16);
      v57 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v13 = *(_OWORD *)a2;
      *(_OWORD *)(v13 + 16) = v57;
      *(_OWORD *)a2 = v68;
      *((_OWORD *)a2 + 1) = v73;
      return result;
    }
    if (a4 >= 0)
      v19 = a4;
    else
      v19 = a4 + 1;
    v17 = v19 >> 1;
    v18 = v13 + 32 * (v19 >> 1);
    v16 = ((char *)a3 - (char *)a2) >> 5;
    if (a3 != a2)
    {
      v61 = v9;
      a3 = a2;
      do
      {
        v20 = &a3[4 * (v16 >> 1)];
        v21 = sub_1C5AD91FC(v20, (uint64_t *)v18);
        if (v21)
          v16 += ~(v16 >> 1);
        else
          v16 >>= 1;
        if (v21)
          a3 = v20 + 4;
      }
      while (v16);
      v16 = ((char *)a3 - (char *)a2) >> 5;
LABEL_34:
      v9 = v61;
    }
    if ((uint64_t *)v18 != a2)
    {
      if (a2 == a3)
      {
        a3 = a2;
        a2 = (uint64_t *)v18;
      }
      else if ((uint64_t *)(v18 + 32) == a2)
      {
        v66 = *(_OWORD *)v18;
        v70 = *(_OWORD *)(v18 + 16);
        memmove((void *)v18, a2, (char *)a3 - (char *)a2);
        a2 = (uint64_t *)(v18 + (char *)a3 - (char *)a2);
        *(_OWORD *)a2 = v66;
        *((_OWORD *)a2 + 1) = v70;
      }
      else if (a2 + 4 == a3)
      {
        a2 = (uint64_t *)(v18 + 32);
        v67 = *((_OWORD *)a3 - 2);
        v71 = *((_OWORD *)a3 - 1);
        if (a3 - 4 != (uint64_t *)v18)
          memmove((void *)(v18 + 32), (const void *)v18, (size_t)a3 - v18 - 32);
        *(_OWORD *)v18 = v67;
        *(_OWORD *)(v18 + 16) = v71;
      }
      else
      {
        v22 = ((uint64_t)a2 - v18) >> 5;
        if (v22 == ((char *)a3 - (char *)a2) >> 5)
        {
          v23 = 0;
          do
          {
            v24 = &a2[v23];
            v25 = (_OWORD *)(v18 + v23 * 8);
            v65 = *(_OWORD *)(v18 + v23 * 8);
            v69 = *(_OWORD *)(v18 + v23 * 8 + 16);
            v26 = *(_OWORD *)&a2[v23 + 2];
            *v25 = *(_OWORD *)&a2[v23];
            v25[1] = v26;
            *(_OWORD *)v24 = v65;
            *((_OWORD *)v24 + 1) = v69;
            if ((uint64_t *)(v18 + v23 * 8 + 32) == a2)
              break;
            v23 += 4;
          }
          while (v24 + 4 != a3);
        }
        else
        {
          v27 = ((char *)a3 - (char *)a2) >> 5;
          v28 = ((uint64_t)a2 - v18) >> 5;
          do
          {
            v29 = v28;
            v28 = v27;
            v27 = v29 % v27;
          }
          while (v27);
          if (v28)
          {
            v30 = (_OWORD *)(v18 + 32 * v28);
            do
            {
              v31 = *(v30 - 2);
              v32 = *(v30 - 1);
              v30 -= 2;
              v72 = v32;
              v33 = &v30[2 * v22];
              v34 = v30;
              do
              {
                v35 = v34;
                v34 = v33;
                v36 = v33[1];
                *v35 = *v33;
                v35[1] = v36;
                v37 = __OFSUB__(v22, ((char *)a3 - (char *)v33) >> 5);
                v39 = v22 - (((char *)a3 - (char *)v33) >> 5);
                v38 = (v39 < 0) ^ v37;
                v33 = (_OWORD *)(v18 + 32 * v39);
                if (v38)
                  v33 = &v34[2 * v22];
              }
              while (v33 != v30);
              *v34 = v31;
              v34[1] = v72;
            }
            while (v30 != (_OWORD *)v18);
          }
          a2 = (uint64_t *)(v18 + 32 * (((char *)a3 - (char *)a2) >> 5));
        }
      }
      goto LABEL_61;
    }
LABEL_45:
    v18 = (uint64_t)a2;
    a2 = a3;
LABEL_61:
    v40 = a4 - v17;
    v41 = v9 - v16;
    if ((uint64_t)(v16 + v17) >= (uint64_t)(v9 - (v16 + v17) + a4))
    {
      result = sub_1C5AD9554(a2, a3, v64, a4 - v17, v41, v63, v62);
      a3 = (uint64_t *)v18;
      a7 = v62;
      v41 = v16;
      a6 = v63;
      v40 = v17;
      v64 = a2;
    }
    else
    {
      v42 = v18;
      v43 = v16;
      a7 = v62;
      a6 = v63;
      result = sub_1C5AD9554(v13, v42, a2, v17, v43, v63, v62);
      v13 = (uint64_t)a2;
    }
    a4 = v40;
    v9 = v41;
    a2 = a3;
    a3 = v64;
    if (!v41)
      return result;
  }
  if (a4 <= v9)
  {
    if ((uint64_t *)v13 != a2)
    {
      v51 = 0;
      do
      {
        v52 = &a6[v51 / 0x10];
        v53 = *(_OWORD *)(v13 + v51 + 16);
        *v52 = *(_OWORD *)(v13 + v51);
        v52[1] = v53;
        v51 += 32;
      }
      while ((uint64_t *)(v13 + v51) != a2);
      if (v51)
      {
        v54 = (uint64_t *)a6;
        while (a2 != a3)
        {
          result = sub_1C5AD91FC(a2, v54);
          if ((_DWORD)result)
          {
            v55 = *(_OWORD *)a2;
            v56 = *((_OWORD *)a2 + 1);
            a2 += 4;
          }
          else
          {
            v55 = *(_OWORD *)v54;
            v56 = *((_OWORD *)v54 + 1);
            v54 += 4;
          }
          *(_OWORD *)v13 = v55;
          *(_OWORD *)(v13 + 16) = v56;
          v13 += 32;
          if (&a6[v51 / 0x10] == (__int128 *)v54)
            return result;
        }
        return (uint64_t)memmove((void *)v13, v54, (char *)a6 - (char *)v54 + v51);
      }
    }
  }
  else if (a2 != a3)
  {
    v44 = 0;
    do
    {
      v45 = &a6[v44 / 0x10];
      v46 = *(_OWORD *)&a2[v44 / 8 + 2];
      *v45 = *(_OWORD *)&a2[v44 / 8];
      v45[1] = v46;
      v44 += 32;
    }
    while (&a2[v44 / 8] != a3);
    if (v44)
    {
      v47 = &a6[v44 / 0x10];
      v48 = a3 - 4;
      while (a2 != (uint64_t *)v13)
      {
        result = sub_1C5AD91FC((uint64_t *)v47 - 4, a2 - 4);
        if ((_DWORD)result)
          v49 = a2 - 4;
        else
          v49 = (uint64_t *)(v47 - 2);
        if ((_DWORD)result)
          a2 -= 4;
        v50 = *((_OWORD *)v49 + 1);
        if (!(_DWORD)result)
          v47 -= 2;
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v50;
        v48 -= 4;
        if (v47 == a6)
          return result;
      }
      if (v47 != a6)
      {
        v58 = 0;
        do
        {
          v59 = &v48[v58 / 8];
          v60 = v47[v58 / 0x10 - 1];
          *(_OWORD *)v59 = v47[v58 / 0x10 - 2];
          *((_OWORD *)v59 + 1) = v60;
          v58 -= 32;
        }
        while (&v47[v58 / 0x10] != a6);
      }
    }
  }
  return result;
}

BOOL sub_1C5AD9A48(llvm *a1, llvm *a2, uint64_t a3)
{
  _BOOL8 isConditionImplied;
  BOOL v5;
  llvm **v6;
  llvm **v7;
  uint64_t v8;
  void *v10[2];
  _BYTE v11[64];
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C5AD9BB0((uint64_t)&v12, a3, 39, a1, a2, 1);
  if (v13 < 2)
  {
LABEL_2:
    isConditionImplied = 0;
    goto LABEL_15;
  }
  v5 = v16;
  if (v16)
  {
    v6 = (llvm **)v15;
    v7 = (llvm **)((char *)v15 + 24 * v16);
    while (sub_1C5AD7AE8(a3, *(_DWORD *)v6, v6[1], v6[2]))
    {
      v6 += 3;
      if (v6 == v7)
      {
        v5 = v13 == 0;
        goto LABEL_8;
      }
    }
    goto LABEL_2;
  }
LABEL_8:
  if (v19)
    v8 = a3 + 392;
  else
    v8 = a3 + 48;
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  if (!v5)
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v10, (uint64_t)&v12);
  isConditionImplied = llvm::ConstraintSystem::isConditionImplied(v8, (uint64_t)v10);
  if (v10[0] != v11)
    free(v10[0]);
LABEL_15:
  sub_1C618A4D0(&v18);
  if (v15 != &v17)
    free(v15);
  if (v12 != &v14)
    free(v12);
  return isConditionImplied;
}

void sub_1C5AD9BB0(uint64_t a1, uint64_t a2, int a3, llvm *a4, llvm *a5, int a6)
{
  uint64_t v12;
  _OWORD *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  char *v20;
  int v21;
  __int16 v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[48];
  _BYTE v26[8];
  __int16 v27;
  __int16 v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD v31[3];
  _BYTE v32[152];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[19];
  _QWORD v36[5];

  v36[4] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 736) + 24);
  v27 = 0;
  v28 = 0;
  v29 = v31;
  v30 = xmmword_1C6464ED0;
  v31[1] = v32;
  v31[2] = 0x1000000000;
  memset(&v32[128], 0, 24);
  v33 = v35;
  v34 = 0x800000000;
  v35[16] = 0;
  v35[17] = v36;
  v35[18] = 0x800000000;
  sub_1C48815D8((uint64_t)v26, v12);
  if ((a3 - 38) <= 3
    && llvm::isKnownNonNegative(a4, (const llvm::Value *)v26, (const llvm::DataLayout *)5, 0, 0, 0, (const llvm::DominatorTree *)1)&& llvm::isKnownNonNegative(a5, (const llvm::Value *)v26, (const llvm::DataLayout *)5, 0, 0, 0, (const llvm::DominatorTree *)1))
  {
    a3 -= 4;
  }
  v23 = v25;
  v24 = 0x600000000;
  sub_1C5AD9E6C((uint64_t)&v14, a2, a3, a4, a5, (uint64_t)&v23, a6);
  v13 = (_OWORD *)(a1 + 16);
  if (HIBYTE(v22) || (_DWORD)v24)
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *v13 = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = 0x800000000;
    *(_QWORD *)(a1 + 80) = a1 + 96;
    *(_DWORD *)(a1 + 92) = 2;
    *(_QWORD *)(a1 + 144) = a1 + 160;
    *(_DWORD *)(a1 + 156) = 1;
  }
  else
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = 0x800000000;
    if (v15)
      sub_1C614D378(a1, (uint64_t)&v14);
    *(_QWORD *)(a1 + 80) = a1 + 96;
    *(_QWORD *)(a1 + 88) = 0x200000000;
    if (v18)
      sub_1C476393C(a1 + 80, (uint64_t)&v17);
    *(_QWORD *)(a1 + 144) = a1 + 160;
    *(_QWORD *)(a1 + 152) = 0x100000000;
    if (v21)
      sub_1C4E015E0(a1 + 144, (uint64_t)&v20);
    *(_WORD *)(a1 + 240) = v22;
  }
  sub_1C618A4D0(&v20);
  if (v17 != &v19)
    free(v17);
  if (v14 != &v16)
    free(v14);
  if (v23 != v25)
    free(v23);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v26);
}

void sub_1C5AD9E6C(uint64_t a1, uint64_t a2, int a3, llvm::Value *a4, llvm::Constant *this, uint64_t a6, int a7)
{
  char v12;
  int v13;
  llvm::Value *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  unsigned int v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int v46;
  BOOL v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t *v79;
  unsigned int v80;
  int32x2_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  llvm::Value *v126;
  uint64_t *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int32x2_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  char v137;
  void *v138[2];
  _BYTE v139[64];
  void *v140;
  uint64_t v141;
  _BYTE v142[64];
  void *v143;
  void *v144;
  char *v145;
  _QWORD v146[7];
  void *v147;
  uint64_t v148;
  _BYTE v149[48];
  char *v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  _BYTE *v154;
  void *v155;
  uint64_t v156;
  _QWORD v157[2];
  char v158;
  llvm::Value *v159;
  void *v160;
  uint64_t v161;
  _QWORD v162[2];
  char v163;
  void *v164[2];
  _QWORD v165[14];

  v165[12] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 40;
  v14 = this;
  switch(a3)
  {
    case ' ':
      v15 = 0;
      if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
      {
        if ((llvm::Constant::isNullValue(this) & 1) != 0)
          v15 = 1;
        else
          v15 = sub_1C4E71060((uint64_t)&v143, this);
      }
      v12 = v15 ^ 1;
      v13 = 37;
      goto LABEL_19;
    case '!':
      if (this
        && *((unsigned __int8 *)this + 16) <= 0x14u
        && ((llvm::Constant::isNullValue(this) & 1) != 0 || (sub_1C4E71060((uint64_t)&v143, this) & 1) != 0))
      {
        goto LABEL_12;
      }
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_QWORD *)(a1 + 240) = 0;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      v16 = a1 + 160;
      *(_OWORD *)(a1 + 96) = 0u;
      v17 = a1 + 96;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)a1 = a1 + 16;
      goto LABEL_11;
    case '"':
LABEL_12:
      v12 = 0;
      v13 = 36;
      goto LABEL_15;
    case '#':
      v12 = 0;
      v13 = 37;
      goto LABEL_15;
    case '$':
    case '%':
    case '(':
    case ')':
      v12 = 0;
      v13 = a3;
LABEL_19:
      v14 = a4;
      a4 = this;
      goto LABEL_20;
    case '&':
      goto LABEL_20;
    case '\'':
      v12 = 0;
      v13 = 41;
LABEL_15:
      v14 = this;
LABEL_20:
      v122 = v12;
      v18 = v13 - 38;
      if ((v13 - 38) >= 4)
        v19 = 0;
      else
        v19 = 24;
      if (v18 >= 4)
        v20 = a2;
      else
        v20 = a2 + 24;
      v121 = a1;
      v164[0] = v165;
      v164[1] = (void *)0x400000000;
      v21 = llvm::Value::stripPointerCastsSameRepresentation(v14);
      v159 = 0;
      v160 = v162;
      v22 = 1;
      v162[0] = 1;
      v162[1] = v21;
      v163 = 0;
      v161 = 0x300000001;
      v23 = llvm::Value::stripPointerCastsSameRepresentation(a4);
      v154 = 0;
      v155 = v157;
      v157[0] = 1;
      v157[1] = v23;
      v158 = 0;
      v156 = 0x300000001;
      v123 = v13 - 38;
      v119 = v13;
      if (a7)
      {
        v24 = llvm::Value::stripPointerCastsSameRepresentation(v14);
        sub_1C5ADAC40((uint64_t)&v143, (uint64_t)v24, (uint64_t)v164, v18 < 4, *(_QWORD *)(a2 + 736));
        v159 = (llvm::Value *)v143;
        sub_1C5ADC798((uint64_t)&v160, (uint64_t)&v144);
        if (v144 != v146)
          free(v144);
        v25 = llvm::Value::stripPointerCastsSameRepresentation(a4);
        sub_1C5ADAC40((uint64_t)&v143, (uint64_t)v25, (uint64_t)v164, v18 < 4, *(_QWORD *)(a2 + 736));
        v154 = v143;
        sub_1C5ADC798((uint64_t)&v155, (uint64_t)&v144);
        if (v144 != v146)
          free(v144);
        v120 = v154;
        v26 = v155;
        v22 = v156;
      }
      else
      {
        v120 = 0;
        v26 = v157;
      }
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v126 = v159;
      v27 = (char *)v160;
      v143 = v160;
      v144 = v26;
      v28 = (char *)v160 + 24 * v161;
      v29 = &v26[3 * v22];
      v145 = v28;
      v146[0] = v29;
      v118 = a6 + 16;
      break;
    default:
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_QWORD *)(a1 + 240) = 0;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      v16 = a1 + 160;
      *(_OWORD *)(a1 + 96) = 0u;
      v17 = a1 + 96;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)a1 = a1 + 16;
LABEL_11:
      *(_QWORD *)(a1 + 8) = 0x800000000;
      *(_QWORD *)(a1 + 80) = v17;
      *(_DWORD *)(a1 + 92) = 2;
      *(_QWORD *)(a1 + 144) = v16;
      *(_DWORD *)(a1 + 156) = 1;
      return;
  }
  while (1)
  {
    if (v27 == v28 && v26 == v29)
    {
      v30 = v145 == v28 && v146[0] == (_QWORD)v29;
      if (v30)
        break;
    }
    v31 = 0;
    do
    {
      v32 = (*(uint64_t (**)(void **))((char *)&off_1E8194098 + v31))(&v143);
      v31 += 16;
    }
    while (!v32);
    v33 = *(_QWORD *)(v32 + 8);
    v34 = *(_QWORD *)(a2 + v19);
    v35 = *(unsigned int *)(v20 + 16);
    if (!(_DWORD)v35)
      goto LABEL_48;
    LODWORD(v36) = ((v33 >> 4) ^ (v33 >> 9)) & (v35 - 1);
    v37 = (uint64_t *)(v34 + 16 * v36);
    v38 = *v37;
    if (v33 != *v37)
    {
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v36 + v39++;
        v36 = v40 & (v35 - 1);
        v38 = *(_QWORD *)(v34 + 16 * v36);
        if (v33 == v38)
        {
          v37 = (uint64_t *)(v34 + 16 * v36);
          goto LABEL_49;
        }
      }
LABEL_48:
      v37 = (uint64_t *)(v34 + 16 * v35);
    }
LABEL_49:
    if (v37 == (uint64_t *)(v34 + 16 * v35))
    {
      v41 = *(_DWORD *)(v20 + 8) + *(_DWORD *)(a6 + 8) + 1;
      v135 = *(_QWORD *)(v32 + 8);
      v136 = v41;
      sub_1C5ADC8F0((uint64_t)&v130, &v135, &v136, (uint64_t)v138);
      if (v139[0])
      {
        v42 = *(unsigned int *)(a6 + 8);
        if (v42 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v118, v42 + 1, 8);
          v42 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v42) = v33;
        ++*(_DWORD *)(a6 + 8);
      }
    }
    v43 = 0;
    do
    {
      if (((*(uint64_t (**)(void **))((char *)&off_1E81940B8 + v43))(&v143) & 1) != 0)
        break;
      v30 = v43 == 16;
      v43 += 16;
    }
    while (!v30);
    v27 = (char *)v143;
    v26 = v144;
  }
  v44 = *(unsigned int *)(v20 + 8) + (unint64_t)*(unsigned int *)(a6 + 8) + 1;
  v140 = v142;
  v141 = 0x800000000;
  sub_1C4765AA4((char *)&v140, v44, 0);
  v143 = &v145;
  v144 = (void *)0x800000000;
  if ((_DWORD)v141)
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v143, (uint64_t)&v140);
  v147 = v149;
  v148 = 0x200000000;
  v150 = (char *)&v152;
  v151 = 0x100000000;
  v153 = v18 < 4;
  if (v140 != v142)
    free(v140);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  HIBYTE(v153) = v122;
  if ((_DWORD)v161)
  {
    v48 = (char *)v160;
    v49 = (char *)v160 + 24 * v161;
    while (1)
    {
      v50 = *((_QWORD *)v48 + 1);
      v51 = *(_QWORD *)(a2 + v19);
      v52 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v52)
        goto LABEL_80;
      LODWORD(v53) = ((v50 >> 4) ^ (v50 >> 9)) & (v52 - 1);
      v54 = (uint64_t *)(v51 + 16 * v53);
      v55 = *v54;
      if (v50 != *v54)
        break;
LABEL_81:
      v58 = *(_QWORD *)v48;
      if (v54 == (uint64_t *)(v51 + 16 * v52))
      {
        v59 = *(_DWORD *)(v20 + 8) + *(_DWORD *)(a6 + 8) + 1;
        v135 = *((_QWORD *)v48 + 1);
        v136 = v59;
        sub_1C5ADC8F0((uint64_t)&v130, &v135, &v136, (uint64_t)v138);
        if (v139[0])
        {
          v60 = *(unsigned int *)(a6 + 8);
          if (v60 >= *(unsigned int *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v118, v60 + 1, 8);
            v60 = *(unsigned int *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v60) = v50;
          ++*(_DWORD *)(a6 + 8);
        }
        v61 = *((unsigned int *)v138[0] + 2);
        v50 = *((_QWORD *)v48 + 1);
      }
      else
      {
        v61 = *((unsigned int *)v54 + 2);
      }
      *((_QWORD *)v143 + v61) += v58;
      v135 = v50;
      LOBYTE(v136) = v48[16];
      sub_1C6311914((uint64_t)v138, (uint64_t)&v127, &v135, &v136);
      *((_BYTE *)v138[0] + 8) &= v48[16];
      v48 += 24;
      if (v48 == v49)
        goto LABEL_64;
    }
    v56 = 1;
    while (v55 != -4096)
    {
      v57 = v53 + v56++;
      v53 = v57 & (v52 - 1);
      v55 = *(_QWORD *)(v51 + 16 * v53);
      if (v50 == v55)
      {
        v54 = (uint64_t *)(v51 + 16 * v53);
        goto LABEL_81;
      }
    }
LABEL_80:
    v54 = (uint64_t *)(v51 + 16 * v52);
    goto LABEL_81;
  }
LABEL_64:
  if ((_DWORD)v156)
  {
    v62 = (char *)v155;
    v63 = (char *)v155 + 24 * v156;
    while (1)
    {
      v64 = *((_QWORD *)v62 + 1);
      v65 = *(_QWORD *)(a2 + v19);
      v66 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v66)
        goto LABEL_97;
      LODWORD(v67) = ((v64 >> 4) ^ (v64 >> 9)) & (v66 - 1);
      v68 = (uint64_t *)(v65 + 16 * v67);
      v69 = *v68;
      if (v64 != *v68)
        break;
LABEL_98:
      v72 = *(_QWORD *)v62;
      if (v68 == (uint64_t *)(v65 + 16 * v66))
      {
        v73 = *(_DWORD *)(v20 + 8) + *(_DWORD *)(a6 + 8) + 1;
        v135 = *((_QWORD *)v62 + 1);
        v136 = v73;
        sub_1C5ADC8F0((uint64_t)&v130, &v135, &v136, (uint64_t)v138);
        if (v139[0])
        {
          v74 = *(unsigned int *)(a6 + 8);
          if (v74 >= *(unsigned int *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v118, v74 + 1, 8);
            v74 = *(unsigned int *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v74) = v64;
          ++*(_DWORD *)(a6 + 8);
        }
        v75 = *((unsigned int *)v138[0] + 2);
        v64 = *((_QWORD *)v62 + 1);
      }
      else
      {
        v75 = *((unsigned int *)v68 + 2);
      }
      *((_QWORD *)v143 + v75) -= v72;
      v135 = v64;
      LOBYTE(v136) = v62[16];
      sub_1C6311914((uint64_t)v138, (uint64_t)&v127, &v135, &v136);
      *((_BYTE *)v138[0] + 8) &= v62[16];
      v62 += 24;
      if (v62 == v63)
        goto LABEL_65;
    }
    v70 = 1;
    while (v69 != -4096)
    {
      v71 = v67 + v70++;
      v67 = v71 & (v66 - 1);
      v69 = *(_QWORD *)(v65 + 16 * v67);
      if (v64 == v69)
      {
        v68 = (uint64_t *)(v65 + 16 * v67);
        goto LABEL_98;
      }
    }
LABEL_97:
    v68 = (uint64_t *)(v65 + 16 * v66);
    goto LABEL_98;
  }
LABEL_65:
  v45 = v120 - (_BYTE *)v126;
  if (!__OFADD__(-(uint64_t)v126, v120))
  {
    v46 = v123 >= 4 ? 36 : 40;
    if (v119 != v46 || (v47 = __OFSUB__(v45, 1), --v45, !v47))
    {
      *(_QWORD *)v143 = v45;
      v76 = sub_1C476393C((uint64_t)&v147, (uint64_t)v164);
      v77 = *(_DWORD *)(a6 + 8);
      if (v77)
      {
        v80 = v144;
        v81 = v131;
        v82 = v132;
        v83 = v132 - 1;
        do
        {
          if (*((_QWORD *)v143 + v80 - 1))
            break;
          LODWORD(v144) = --v80;
          v84 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v77-- - 8);
          *(_DWORD *)(a6 + 8) = v77;
          if (v82)
          {
            LODWORD(v85) = ((v84 >> 4) ^ (v84 >> 9)) & v83;
            v86 = (uint64_t *)(v130 + 16 * v85);
            v87 = *v86;
            if (v84 == *v86)
            {
LABEL_115:
              *v86 = -8192;
              v81 = vadd_s32(v81, (int32x2_t)0x1FFFFFFFFLL);
              v131 = v81;
              v77 = *(_DWORD *)(a6 + 8);
            }
            else
            {
              v88 = 1;
              while (v87 != -4096)
              {
                v89 = v85 + v88++;
                v85 = v89 & v83;
                v87 = *(_QWORD *)(v130 + 16 * v85);
                if (v84 == v87)
                {
                  v86 = (uint64_t *)(v130 + 16 * v85);
                  goto LABEL_115;
                }
              }
            }
          }
        }
        while (v77);
      }
      v78 = &v127[2 * v129];
      v124 = v76;
      if ((_DWORD)v128)
      {
        if (v129)
        {
          v90 = 16 * v129;
          v79 = v127;
          while ((*v79 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v79 += 2;
            v90 -= 16;
            if (!v90)
              goto LABEL_125;
          }
        }
        else
        {
          v79 = v127;
        }
      }
      else
      {
LABEL_125:
        v79 = &v127[2 * v129];
      }
      v91 = &v127[2 * v129];
      if (v79 == v91)
      {
LABEL_127:
        *(_QWORD *)v121 = v121 + 16;
        *(_QWORD *)(v121 + 8) = 0x800000000;
        if ((_DWORD)v144)
          sub_1C614D378(v121, (uint64_t)&v143);
        *(_QWORD *)(v121 + 80) = v121 + 96;
        *(_QWORD *)(v121 + 88) = 0x200000000;
        if ((_DWORD)v148)
          sub_1C476393C(v121 + 80, v124);
        *(_QWORD *)(v121 + 144) = v121 + 160;
        *(_QWORD *)(v121 + 152) = 0x100000000;
        if ((_DWORD)v151)
          sub_1C4E015E0(v121 + 144, (uint64_t)&v150);
        *(_WORD *)(v121 + 240) = v153;
        goto LABEL_134;
      }
      while (2)
      {
        if (*((_BYTE *)v79 + 8))
        {
          v92 = *v79;
          v93 = *(_QWORD *)(a2 + v19);
          v94 = *(unsigned int *)(v20 + 16);
          v95 = *v79 >> 4;
          if (!(_DWORD)v94)
            goto LABEL_152;
          LODWORD(v96) = (v95 ^ (v92 >> 9)) & (v94 - 1);
          v97 = (uint64_t *)(v93 + 16 * v96);
          v98 = *v97;
          if (v92 != *v97)
          {
            v99 = 1;
            while (v98 != -4096)
            {
              v100 = v96 + v99++;
              v96 = v100 & (v94 - 1);
              v98 = *(_QWORD *)(v93 + 16 * v96);
              if (v92 == v98)
              {
                v97 = (uint64_t *)(v93 + 16 * v96);
                goto LABEL_153;
              }
            }
LABEL_152:
            v97 = (uint64_t *)(v93 + 16 * v94);
          }
LABEL_153:
          if (v97 != (uint64_t *)(v93 + 16 * v94))
            goto LABEL_164;
          if (!v132)
            goto LABEL_157;
          v101 = (v132 - 1) & (v95 ^ (v92 >> 9));
          v102 = *(_QWORD *)(v130 + 16 * v101);
          if (v92 == v102)
          {
LABEL_156:
            if (v101 == v132)
              goto LABEL_157;
LABEL_164:
            v104 = *(unsigned int *)(v20 + 8) + (unint64_t)*(unsigned int *)(a6 + 8) + 1;
            v138[0] = v139;
            v138[1] = (void *)0x800000000;
            sub_1C4765AA4((char *)v138, v104, 0);
            v105 = *v79;
            v106 = *(_QWORD *)(a2 + v19);
            v107 = *(unsigned int *)(v20 + 16);
            if ((_DWORD)v107)
            {
              LODWORD(v108) = ((v105 >> 4) ^ (v105 >> 9)) & (v107 - 1);
              v109 = (uint64_t *)(v106 + 16 * v108);
              v110 = *v109;
              if (v105 != *v109)
              {
                v111 = 1;
                while (v110 != -4096)
                {
                  v112 = v108 + v111++;
                  v108 = v112 & (v107 - 1);
                  v110 = *(_QWORD *)(v106 + 16 * v108);
                  if (v105 == v110)
                  {
                    v109 = (uint64_t *)(v106 + 16 * v108);
                    goto LABEL_171;
                  }
                }
                goto LABEL_170;
              }
            }
            else
            {
LABEL_170:
              v109 = (uint64_t *)(v106 + 16 * v107);
            }
LABEL_171:
            if (v109 == (uint64_t *)(v106 + 16 * v107))
            {
              v113 = *(_DWORD *)(v20 + 8) + *(_DWORD *)(a6 + 8) + 1;
              v133 = *v79;
              v134 = v113;
              sub_1C5ADC8F0((uint64_t)&v130, &v133, &v134, (uint64_t)&v135);
              if (v137)
              {
                v114 = *(unsigned int *)(a6 + 8);
                if (v114 >= *(unsigned int *)(a6 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v118, v114 + 1, 8);
                  v114 = *(unsigned int *)(a6 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a6 + 8 * v114) = v105;
                ++*(_DWORD *)(a6 + 8);
              }
              v115 = *(unsigned int *)(v135 + 8);
            }
            else
            {
              v115 = *((unsigned int *)v109 + 2);
            }
            *((_QWORD *)v138[0] + v115) = -1;
            sub_1C63118AC((uint64_t)&v150, (unint64_t)v138);
            if (v138[0] != v139)
              free(v138[0]);
          }
          else
          {
            v116 = 1;
            while (v102 != -4096)
            {
              v117 = v101 + v116++;
              v101 = v117 & (v132 - 1);
              v102 = *(_QWORD *)(v130 + 16 * v101);
              if (v92 == v102)
                goto LABEL_156;
            }
          }
        }
LABEL_157:
        v103 = v79 + 2;
        v79 = v78;
        if (v103 != v78)
        {
          v79 = v103;
          while ((*v79 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v79 += 2;
            if (v79 == v78)
            {
              v79 = v78;
              break;
            }
          }
        }
        if (v79 == v91)
          goto LABEL_127;
        continue;
      }
    }
  }
  *(_OWORD *)(v121 + 128) = 0u;
  *(_OWORD *)(v121 + 144) = 0u;
  *(_QWORD *)(v121 + 240) = 0;
  *(_OWORD *)(v121 + 208) = 0u;
  *(_OWORD *)(v121 + 224) = 0u;
  *(_OWORD *)(v121 + 176) = 0u;
  *(_OWORD *)(v121 + 192) = 0u;
  *(_OWORD *)(v121 + 112) = 0u;
  *(_OWORD *)(v121 + 64) = 0u;
  *(_OWORD *)(v121 + 80) = 0u;
  *(_OWORD *)(v121 + 160) = 0u;
  *(_OWORD *)(v121 + 96) = 0u;
  *(_OWORD *)(v121 + 32) = 0u;
  *(_OWORD *)(v121 + 48) = 0u;
  *(_OWORD *)(v121 + 16) = 0u;
  *(_QWORD *)v121 = v121 + 16;
  *(_QWORD *)(v121 + 8) = 0x800000000;
  *(_QWORD *)(v121 + 80) = v121 + 96;
  *(_DWORD *)(v121 + 92) = 2;
  *(_QWORD *)(v121 + 144) = v121 + 160;
  *(_DWORD *)(v121 + 156) = 1;
LABEL_134:
  MEMORY[0x1CAA32FB4](v127, 8);
  sub_1C618A4D0(&v150);
  if (v147 != v149)
    free(v147);
  if (v143 != &v145)
    free(v143);
  MEMORY[0x1CAA32FB4](v130, 8);
  if (v155 != v157)
    free(v155);
  if (v160 != v162)
    free(v160);
  if (v164[0] != v165)
    free(v164[0]);
}

void sub_1C5ADAC40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  __n128 v11;
  int v12;
  BOOL v13;
  char v14;
  _QWORD **v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  char v27;
  __n128 v28;
  __n128 v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int *v32;
  _QWORD *v33;
  unint64_t **v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  __n128 v47;
  llvm::Value **v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  BOOL v52;
  int v53;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t *v68;
  _QWORD **v69;
  unsigned int v70;
  unsigned int v71;
  _QWORD *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  llvm::UndefValue *AggregateElement;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::UndefValue *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  uint64_t v95;
  __n128 v96;
  llvm **v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  int v118;
  llvm **v119;
  int v120;
  llvm **v121;
  int v122;
  unint64_t *v123;
  int v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  llvm::DataLayout *v128;
  unsigned int IndexTypeSizeInBits;
  __n128 v130;
  char v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unint64_t *v136;
  __n128 v137;
  uint64_t v138;
  unint64_t v139;
  llvm *v140;
  _QWORD **v141;
  unsigned int v142;
  uint64_t v143;
  llvm *v144;
  _QWORD **v145;
  __n128 v146;
  unsigned int v147;
  unsigned int v148;
  _QWORD *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD **v153;
  unsigned int v154;
  uint64_t v155;
  llvm *v156;
  llvm::Value **v157;
  __n128 v158;
  llvm::Value **v159;
  __n128 v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  size_t v164;
  int v165;
  BOOL v166;
  llvm::Value **v167;
  __n128 v168;
  _BYTE *v169;
  int v170;
  int64_t v171;
  unint64_t v172;
  int v173;
  const llvm::APInt *v175;
  unint64_t v176;
  llvm::Value **v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void **p_src;
  const char *v190;
  unsigned int v191;
  uint64_t v192;
  llvm::ConstantInt **v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  llvm::ConstantInt **v205;
  llvm::Value **v206;
  unsigned int v207;
  uint64_t v208;
  void *v209;
  llvm::Value **v210;
  char *v211;
  char *v212;
  llvm::Value ***v213;
  llvm::ConstantInt *v214;
  _QWORD *v215;
  llvm::ConstantInt *v216;
  llvm::Value *v217;
  llvm::Value ****v218;
  llvm::Value *v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  _WORD *v227;
  llvm::ConstantInt **v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _WORD *v236;
  unsigned int *v237;
  size_t v238;
  _QWORD *v239;
  size_t v240;
  __n128 v241;
  _BYTE *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  llvm::Value **v251;
  int v252;
  unsigned int v253;
  llvm::Value **v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  _QWORD v258[2];
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *__src;
  unsigned int v264;
  llvm *v265[2];
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271[8];
  __int16 v272;
  __int16 v273;
  _QWORD *v274;
  __int128 v275;
  _QWORD v276[3];
  _BYTE v277[152];
  _QWORD *v278;
  uint64_t v279;
  _QWORD v280[19];
  uint64_t v281;
  __n128 v282;
  llvm::Value **v283;
  _WORD v284[36];
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD v288[2];
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a5 + 24);
  v272 = 0;
  v273 = 0;
  v274 = v276;
  v275 = xmmword_1C6464ED0;
  v276[1] = v277;
  v276[2] = 0x1000000000;
  memset(&v277[128], 0, 24);
  v278 = v280;
  v279 = 0x800000000;
  v280[16] = 0;
  v280[17] = &v281;
  v280[18] = 0x800000000;
  sub_1C48815D8((uint64_t)v271, v10);
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (a2)
    v13 = v12 == 16;
  else
    v13 = 0;
  v14 = !v13;
  if (a4)
  {
    if ((v14 & 1) == 0)
    {
      v15 = (_QWORD **)(a2 + 24);
      if (sub_1C4DA92C4((llvm::APInt *)(a2 + 24), 0x8000000000000000))
      {
        if (sub_1C4DA9220((llvm::APInt *)(a2 + 24), 0x7FFFFFFFFFFFFFFFLL))
        {
          v16 = *(_DWORD *)(a2 + 32);
          if (v16 > 0x40)
            v17 = **v15;
          else
            v17 = (uint64_t)((_QWORD)*v15 << -(char)v16) >> -(char)v16;
          goto LABEL_75;
        }
      }
    }
    v282.n128_u64[0] = 0;
    v285 = (uint64_t)&v282;
    v26 = sub_1C4B0378C((_QWORD **)&v285, a2);
    v27 = v26;
    if (v26)
      a2 = v282.n128_u64[0];
    v265[0] = 0;
    v285 = (uint64_t)&v282;
    v286 = (uint64_t)v265;
    if (sub_1C5ADC614((_QWORD **)&v285, a2))
    {
      sub_1C5ADAC40(a1, v28);
      sub_1C5ADAC40(&v285, v29);
      v30 = (_BYTE *)v286;
      *(_QWORD *)a1 += v285;
      v31 = &v30[24 * v287];
      v32 = (unsigned int *)(a1 + 8);
LABEL_25:
      sub_1C5ADC700(v32, v30, v31);
      v33 = (_QWORD *)v286;
      goto LABEL_26;
    }
    v285 = (uint64_t)&v282;
    v36 = sub_1C4B037F8((_QWORD **)&v285, a2);
    v37 = v282.n128_u64[0];
    if (!v36)
      v37 = a2;
    *(_QWORD *)(a1 + 24) = 1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 32) = v37;
    goto LABEL_34;
  }
  if ((v14 & 1) == 0)
  {
    v34 = (unint64_t **)(a2 + 24);
    v35 = *(_DWORD *)(a2 + 32);
    if (v35 >= 0x41)
    {
      if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) < 0x41)
      {
        v17 = **v34;
        if (v17 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_75;
      }
    }
    else
    {
      v17 = (unint64_t)*v34;
      if ((unint64_t)*v34 <= 0x7FFFFFFFFFFFFFFELL)
      {
LABEL_75:
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = a1 + 24;
        v45 = 0x300000000;
        goto LABEL_76;
      }
    }
    goto LABEL_50;
  }
  if (a2 && v12 == 83)
  {
    v18 = *(_DWORD *)(a5 + 2184);
    if (v18)
    {
      v19 = *(_QWORD *)(a5 + 2168);
      v20 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v21 = (uint64_t *)(v19 + 40 * v20);
      v22 = *v21;
      if (*v21 == a2)
      {
LABEL_18:
        if (v20 != v18)
        {
          v23 = v21[1];
          v24 = *((_DWORD *)v21 + 8);
          if (v24 > 0x40)
            v25 = *(_QWORD *)v21[3];
          else
            v25 = v21[3] << -(char)v24 >> -(char)v24;
          *(_QWORD *)(a1 + 24) = 1;
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 32) = v23;
          *(_BYTE *)(a1 + 40) = 0;
          v11.n128_u64[0] = 0x300000001;
          *(_QWORD *)(a1 + 16) = 0x300000001;
          sub_1C5ADAC40(&v285, v11);
          v60 = v285;
          v30 = (_BYTE *)v286;
          if (v25 >= 0)
            v61 = v25;
          else
            v61 = -v25;
          if (v285 < 0)
            v60 = -v285;
          v62 = v60 * v61;
          if ((v285 ^ v25) < 0)
            v62 = -v62;
          v285 = v62;
          v31 = (_BYTE *)(v286 + 24 * v287);
          if ((_DWORD)v287)
          {
            v63 = 24 * v287;
            v64 = (uint64_t *)v286;
            do
            {
              v65 = *v64;
              if (*v64 < 0)
                v65 = -v65;
              v66 = v65 * v61;
              if ((*v64 ^ v25) < 0)
                v66 = -v66;
              *v64 = v66;
              v64 += 3;
              v63 -= 24;
            }
            while (v63);
          }
          *(_QWORD *)a1 += v62;
          v32 = (unsigned int *)(a1 + 8);
          goto LABEL_25;
        }
      }
      else
      {
        v252 = 1;
        while (v22 != -4096)
        {
          v253 = v20 + v252++;
          v20 = v253 & (v18 - 1);
          v21 = (uint64_t *)(v19 + 40 * v20);
          v22 = *v21;
          if (*v21 == a2)
            goto LABEL_18;
        }
      }
    }
    goto LABEL_50;
  }
  if (a2 && v12 == 62)
  {
    v38 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v39 = (uint64_t **)(a2 - 32 * v38);
    v40 = *v39;
    if (llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)(a5 + 24), **v39) >= 0x41)
      goto LABEL_50;
    v41 = *((unsigned __int8 *)v40 + 16);
    if (v41 != 62)
      v40 = 0;
    if ((_DWORD)v38 == 2 && v41 == 62 && (*(_BYTE *)(a2 + 17) & 2) == 0)
    {
      v282.n128_u64[0] = v40[-4 * (*((_DWORD *)v40 + 5) & 0x7FFFFFF)];
      v285 = 0;
      if (sub_1C4926528(a5 + 2144, &v282, &v285))
      {
        if (v285 != *(_QWORD *)(a5 + 2144) + 16 * *(unsigned int *)(a5 + 2160))
        {
          v42 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          LODWORD(v286) = 64;
          v285 = 1;
          if (sub_1C4D8A7F0((llvm::APInt *)&v285, v42))
          {
            v43 = *((_DWORD *)v40 + 5) & 0x7FFFFFF;
            if ((_DWORD)v43 == 2)
            {
              v44 = 1;
            }
            else
            {
              v135 = (unsigned __int8 *)v40[4 * (v43 - 1) + -4 * v43];
              v282.n128_u32[2] = 64;
              v282.n128_u64[0] = 0;
              v44 = sub_1C4D8A7F0((llvm::APInt *)&v282, v135);
              if (v282.n128_u32[2] >= 0x41 && v282.n128_u64[0])
                MEMORY[0x1CAA32F9C](v282.n128_u64[0], 0x1000C8000313F17);
            }
          }
          else
          {
            v44 = 0;
          }
          if (v286 >= 0x41 && v285)
            MEMORY[0x1CAA32F9C](v285, 0x1000C8000313F17);
          if (v44)
          {
            v77 = 24;
            if (*(_BYTE *)(a2 + 16) == 62)
              v77 = 64;
            v78 = *(_QWORD *)(a2 + v77);
            v79 = *(_DWORD *)(a2 + 20);
            if ((v79 & 0x40000000) != 0)
              v80 = *(_QWORD *)(a2 - 8);
            else
              v80 = a2 - 32 * (v79 & 0x7FFFFFF);
            v81 = v78 & 0xFFFFFFFFFFFFFFF8;
            if ((v78 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*(_BYTE *)(v81 + 8) != 19)
              {
                v82 = *(_QWORD *)(a5 + 24);
                goto LABEL_138;
              }
            }
            else
            {
              AggregateElement = *(llvm::UndefValue **)(v80 + 32);
              if (!AggregateElement || *((_BYTE *)AggregateElement + 16) != 16)
              {
                AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                v81 = 0;
              }
              v88 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
              v86 = (unsigned int *)((char *)AggregateElement + 24);
              v87 = v88;
              if (v86[2] < 0x41)
                v87 = v86;
              v89 = *v87;
              v90 = *(_QWORD *)(v81 + 16);
              if (*(_BYTE *)(*(_QWORD *)(v90 + 8 * v89) + 8) != 19)
              {
                v82 = *(_QWORD *)(a5 + 24);
                v91 = *(llvm::UndefValue **)(v80 + 32);
                if (!v91 || *((_BYTE *)v91 + 16) != 16)
                {
                  v255 = v81;
                  v91 = llvm::Constant::getAggregateElement(v91, 0);
                  v90 = *(_QWORD *)(v255 + 16);
                }
                v94 = (unsigned int *)*((_QWORD *)v91 + 3);
                v92 = (unsigned int *)((char *)v91 + 24);
                v93 = v94;
                if (v92[2] < 0x41)
                  v93 = v92;
                v81 = *(_QWORD *)(v90 + 8 * *v93);
LABEL_138:
                v95 = sub_1C4E3D148(v82, v81);
                v285 = (uint64_t)&v287;
                v96.n128_u64[0] = 0x400000000;
                v286 = 0x400000000;
                sub_1C5ADAC40(a1, v96);
                v97 = (llvm **)v285;
                if ((_DWORD)v286)
                {
                  v98 = 24 * v286;
                  do
                  {
                    if (*(_DWORD *)v97 == 37)
                    {
                      v265[0] = v97[2];
                      v282.n128_u64[0] = 0;
                      if (sub_1C4926528(a5 + 2144, v265, &v282))
                      {
                        if (v282.n128_u64[0] != *(_QWORD *)(a5 + 2144) + 16 * *(unsigned int *)(a5 + 2160))
                          *(_DWORD *)v97 = 36;
                      }
                    }
                    v97 += 3;
                    v98 -= 24;
                  }
                  while (v98);
                  v97 = (llvm **)v285;
                  v99 = v286;
                }
                else
                {
                  v99 = 0;
                }
                v138 = *(unsigned int *)(a3 + 8);
                v139 = v138 + v99;
                if (v139 > *(unsigned int *)(a3 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v139, 24);
                  LODWORD(v138) = *(_DWORD *)(a3 + 8);
                }
                if (v99)
                {
                  memcpy((void *)(*(_QWORD *)a3 + 24 * v138), v97, 24 * v99);
                  LODWORD(v138) = *(_DWORD *)(a3 + 8);
                }
                *(_DWORD *)(a3 + 8) = v138 + v99;
                *(_QWORD *)a1 += v95;
                v33 = (_QWORD *)v285;
                if ((uint64_t *)v285 != &v287)
                  goto LABEL_27;
                goto LABEL_77;
              }
            }
LABEL_50:
            *(_QWORD *)(a1 + 24) = 1;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = a1 + 24;
            *(_QWORD *)(a1 + 32) = a2;
LABEL_51:
            *(_BYTE *)(a1 + 40) = 0;
            goto LABEL_52;
          }
        }
      }
    }
    v127 = *(_QWORD *)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v127 = **(_QWORD **)(v127 + 16);
    v128 = *(llvm::DataLayout **)(a5 + 24);
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v128, v127);
    v265[0] = 0;
    v265[1] = 0;
    v266 = 0;
    v268 = 0;
    v269 = 0;
    v267 = 0;
    v264 = IndexTypeSizeInBits;
    if (IndexTypeSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      v128 = *(llvm::DataLayout **)(a5 + 24);
    }
    else
    {
      __src = 0;
    }
    if ((llvm::GEPOperator::collectOffset(a2, v128, IndexTypeSizeInBits, (uint64_t)v265, (unsigned int *)&__src) & 1) == 0)
    {
      *(_QWORD *)(a1 + 24) = 1;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 32) = a2;
      *(_BYTE *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 16) = 0x300000001;
      goto LABEL_384;
    }
    v131 = *(_BYTE *)(a2 + 17);
    if ((v131 & 2) != 0 && v267 == v268 && v41 == 62 && (*((_DWORD *)v40 + 5) & 0x7FFFFFF) == 2)
    {
      sub_1C5ADAC40(&v285, v130);
      if (v264 > 0x40)
        v162 = *(_QWORD *)__src;
      else
        v162 = (uint64_t)((_QWORD)__src << -(char)v264) >> -(char)v264;
      v285 += v162;
      p_src = &__src;
      if (v264 >= 0x41)
        p_src = (void **)((char *)__src + 8 * ((v264 - 1) >> 6));
      if ((((unint64_t)*p_src >> (v264 - 1)) & 1) != 0)
      {
        v191 = sub_1C4E3D148(*(_QWORD *)(a5 + 24), v40[9]);
        if ((_DWORD)v190 == 1)
        if (v264 > 0x40)
          v192 = *(_QWORD *)__src;
        else
          v192 = (uint64_t)((_QWORD)__src << -(uint64_t)v264) >> -(uint64_t)v264;
        v204 = v192 / v191;
        if (v192 % v191)
        {
          *(_QWORD *)(a1 + 24) = 1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 32) = a2;
          *(_BYTE *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 16) = 0x300000001;
          goto LABEL_338;
        }
        v205 = (llvm::ConstantInt **)v40[-4 * (*((_DWORD *)v40 + 5) & 0x7FFFFFF) + 4];
        v206 = llvm::ConstantInt::get(*v205, -v204, 0);
        v207 = *(_DWORD *)(a3 + 8);
        if (v207 >= *(_DWORD *)(a3 + 12))
        {
          v282.n128_u32[0] = 39;
          v282.n128_u64[1] = (unint64_t)v205;
          v283 = v206;
          sub_1C4AB8FDC(a3, &v282);
        }
        else
        {
          v208 = *(_QWORD *)a3 + 24 * v207;
          *(_DWORD *)v208 = 39;
          *(_QWORD *)(v208 + 8) = v205;
          *(_QWORD *)(v208 + 16) = v206;
          *(_DWORD *)(a3 + 8) = v207 + 1;
        }
      }
      *(_QWORD *)a1 = v285;
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 0x300000000;
      if ((_DWORD)v287)
        sub_1C5ADC798(a1 + 8, (uint64_t)&v286);
LABEL_338:
      v209 = (void *)v286;
      if ((_QWORD *)v286 == v288)
      {
LABEL_384:
        if (v264 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        sub_1C6311868((uint64_t)v265);
        goto LABEL_77;
      }
LABEL_383:
      free(v209);
      goto LABEL_384;
    }
    v132 = v264;
    v133 = __src;
    if (v264 > 0x40)
      v134 = *(_QWORD *)__src;
    else
      v134 = (uint64_t)((_QWORD)__src << -(char)v264) >> -(char)v264;
    v163 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v285 = v134;
    v286 = (uint64_t)v288;
    v288[0] = 1;
    v288[1] = v163;
    v289 = 0;
    v287 = 0x300000001;
    if ((v131 & 2) == 0)
    {
      if (v264 >= 0x41)
      {
        v164 = (((unint64_t)v264 + 63) >> 3) & 0x3FFFFFF8;
        v133 = (void *)operator new[]();
        memcpy(v133, __src, v164);
      }
      v258[0] = 0;
      v258[1] = 0;
      v259 = 0;
      sub_1C4DFEB14((uint64_t)v258, (uint64_t)v265);
      v260 = 0;
      v261 = 0;
      v262 = 0;
      sub_1C5AD8CA0(&v260, v267, v268, 0xAAAAAAAAAAAAAAABLL * ((v268 - v267) >> 3));
      v165 = 0;
      if (v260 != v261)
      {
        if (v132 > 0x40)
        {
          v170 = 0;
          v171 = (unint64_t)(v132 + 63) >> 6;
          do
          {
            v52 = v171-- < 1;
            if (v52)
              break;
            v172 = *((_QWORD *)v133 + v171);
            v170 += __clz(v172);
          }
          while (!v172);
          v173 = v132 | 0xFFFFFFC0;
          if ((v132 & 0x3F) == 0)
            v173 = 0;
          v166 = v170 + v173 == (_DWORD)v132;
        }
        else
        {
          v166 = v133 == 0;
        }
        if (v166)
          v165 = 1;
        else
          v165 = 2;
      }
      sub_1C6311868((uint64_t)v258);
      if (v132 >= 0x41 && v133)
        MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
      if (v165 == 2
        || (v270 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)),
            v282.n128_u64[0] = 0,
            !sub_1C4926528(a5 + 2144, &v270, &v282))
        || (v176 = v282.n128_u64[0], v282.n128_u64[0] == *(_QWORD *)(a5 + 2144) + 16 * *(unsigned int *)(a5 + 2160)))
      {
        *(_QWORD *)(a1 + 24) = 1;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = a1 + 24;
        *(_QWORD *)(a1 + 32) = a2;
        *(_BYTE *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 16) = 0x300000001;
        goto LABEL_382;
      }
      if (v267 == v268)
      {
        v177 = llvm::ConstantInt::get(**(llvm::ConstantInt ****)(v282.n128_u64[0] + 8), (llvm::Type *)&__src, v175);
      }
      else
      {
        v193 = *(llvm::ConstantInt ***)v267;
        v194 = *(_DWORD *)(v267 + 16);
        if (v194 > 0x40)
          v195 = **(_QWORD **)(v267 + 8);
        else
          v195 = (uint64_t)(*(_QWORD *)(v267 + 8) << -(char)v194) >> -(char)v194;
        v210 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v267, v195, 0);
        v284[4] = 257;
        v211 = (char *)operator new(0x80uLL);
        v212 = v211;
        *(_QWORD *)v211 = 0;
        *((_QWORD *)v211 + 2) = 0;
        *((_QWORD *)v211 + 1) = 0;
        *((_QWORD *)v211 + 5) = 0;
        *((_QWORD *)v211 + 6) = 0;
        *((_QWORD *)v211 + 4) = 0;
        v213 = (llvm::Value ***)(v211 + 32);
        *((_QWORD *)v211 + 8) = *v193;
        v177 = (llvm::Value **)(v211 + 64);
        *((_QWORD *)v211 + 3) = v211 + 64;
        *((_QWORD *)v211 + 7) = v211 + 64;
        *((_QWORD *)v211 + 9) = 0;
        v211[80] = 45;
        v211[81] = 0;
        *((_WORD *)v211 + 41) = 0;
        *((_DWORD *)v211 + 21) = 2;
        *((_DWORD *)v211 + 30) = 0;
        *(_OWORD *)(v211 + 104) = 0u;
        *(_OWORD *)(v211 + 88) = 0u;
        *(_QWORD *)v211 = v193;
        v216 = v193[1];
        v215 = v193 + 1;
        v214 = v216;
        *((_QWORD *)v211 + 1) = v216;
        if (v216)
          *((_QWORD *)v214 + 2) = v211 + 8;
        *((_QWORD *)v211 + 2) = v215;
        *v215 = v211;
        if (*((_QWORD *)v211 + 4))
        {
          **((_QWORD **)v211 + 6) = *((_QWORD *)v211 + 5);
          v256 = *((_QWORD *)v211 + 5);
          if (v256)
            *(_QWORD *)(v256 + 16) = *((_QWORD *)v211 + 6);
        }
        *v213 = v210;
        if (v210)
        {
          v219 = v210[1];
          v218 = (llvm::Value ****)(v210 + 1);
          v217 = v219;
          *((_QWORD *)v211 + 5) = v219;
          if (v219)
            *((_QWORD *)v217 + 2) = v211 + 40;
          *((_QWORD *)v211 + 6) = v218;
          *v218 = v213;
        }
        llvm::Value::setName((uint64_t ***)v211 + 8, (uint64_t)&v282);
        v212[81] |= 2u;
        v220 = *(unsigned int *)(a5 + 40);
        if (v220 >= *(_DWORD *)(a5 + 44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5 + 32, a5 + 48, v220 + 1, 8);
          LODWORD(v220) = *(_DWORD *)(a5 + 40);
        }
        *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8 * v220) = v177;
        ++*(_DWORD *)(a5 + 40);
      }
      v221 = *(_DWORD *)(a3 + 8);
      if (v221 >= *(_DWORD *)(a3 + 12))
      {
        v254 = *(llvm::Value ***)(v176 + 8);
        v282.n128_u32[0] = 37;
        v282.n128_u64[1] = (unint64_t)v177;
        v283 = v254;
        v130 = sub_1C4AB8FDC(a3, &v282);
      }
      else
      {
        v222 = *(_QWORD *)(v176 + 8);
        v223 = *(_QWORD *)a3 + 24 * v221;
        *(_DWORD *)v223 = 37;
        *(_QWORD *)(v223 + 8) = v177;
        *(_QWORD *)(v223 + 16) = v222;
        *(_DWORD *)(a3 + 8) = v221 + 1;
      }
    }
    v224 = (unsigned int *)&v286;
    v225 = v267;
    v226 = v268;
    if (v267 != v268)
    {
      v227 = v284;
      do
      {
        v228 = *(llvm::ConstantInt ***)v225;
        v229 = *(unsigned int *)(v225 + 16);
        v257 = *(_DWORD *)(v225 + 16);
        if (v229 > 0x40)
        {
          v234 = (unint64_t)(v229 + 63) >> 3;
          v235 = v226;
          v236 = v227;
          v237 = v224;
          v238 = v234 & 0x3FFFFFF8;
          v239 = (_QWORD *)operator new[]();
          v240 = v238;
          v224 = v237;
          v227 = v236;
          v226 = v235;
          memcpy(v239, *(const void **)(v225 + 8), v240);
          sub_1C5ADAC40(&v282, v241);
          v232 = v239;
          v233 = *v239;
        }
        else
        {
          v230 = *(_QWORD **)(v225 + 8);
          sub_1C5ADAC40(&v282, v130);
          v231 = -v229;
          v232 = v230;
          v233 = (uint64_t)((_QWORD)v230 << v231) >> v231;
        }
        v242 = (_BYTE *)v282.n128_u64[1];
        v243 = v282.n128_u64[0];
        if (v233 >= 0)
          v244 = v233;
        else
          v244 = -v233;
        if (v282.n128_i64[0] < 0)
          v243 = -v282.n128_u64[0];
        v245 = v243 * v244;
        if (((v282.n128_u64[0] ^ v233) & 0x8000000000000000) != 0)
          v245 = -(uint64_t)v245;
        v282.n128_u64[0] = v245;
        v246 = (int)v283;
        if ((_DWORD)v283)
        {
          v247 = 24 * v283;
          v248 = (uint64_t *)v282.n128_u64[1];
          do
          {
            v249 = *v248;
            if (*v248 < 0)
              v249 = -v249;
            v250 = v249 * v244;
            if ((*v248 ^ v233) < 0)
              v250 = -v250;
            *v248 = v250;
            v248 += 3;
            v247 -= 24;
          }
          while (v247);
        }
        v285 += v245;
        sub_1C5ADC700(v224, v242, &v242[24 * v246]);
        if ((llvm::isKnownNonNegative((llvm *)v228, *(const llvm::Value **)(a5 + 24), 0, 0, 0, 0, (const llvm::DominatorTree *)1) & 1) == 0)
        {
          v251 = llvm::ConstantInt::get(*v228, 0, 0);
          v130.n128_f64[0] = sub_1C5ADC5C0(a3, 0x27u, (unint64_t)v228, (uint64_t)v251);
        }
        if ((_WORD *)v282.n128_u64[1] != v227)
          free((void *)v282.n128_u64[1]);
        if (v257 >= 0x41 && v232)
          MEMORY[0x1CAA32F9C](v232, 0x1000C8000313F17);
        v225 += 24;
      }
      while (v225 != v226);
    }
    *(_QWORD *)a1 = v285;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 0x300000000;
    if ((_DWORD)v287)
      sub_1C5ADC798(a1 + 8, (uint64_t)v224);
LABEL_382:
    v209 = (void *)v286;
    if ((_QWORD *)v286 == v288)
      goto LABEL_384;
    goto LABEL_383;
  }
  v282.n128_u64[0] = 0;
  v265[0] = 0;
  v285 = (uint64_t)&v282;
  v46 = sub_1C4B0378C((_QWORD **)&v285, a2);
  v27 = v46;
  if (v46)
    a2 = v282.n128_u64[0];
  v285 = (uint64_t)&v282;
  if (sub_1C4B037F8((_QWORD **)&v285, a2))
  {
    a2 = v282.n128_u64[0];
    v48 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v282.n128_u64[0], 0, 0);
    v47.n128_f64[0] = sub_1C5ADC5C0(a3, 0x27u, v282.n128_u64[0], (uint64_t)v48);
  }
  v49 = *(unsigned __int8 *)(a2 + 16);
  if (v49 < 0x1C)
  {
    if (v49 != 5)
      goto LABEL_68;
    v55 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v57) = v55 - 13;
    LODWORD(v57) = v55 - 13;
    v56 = v57 >> 1;
    if (v56 > 6 || ((1 << v56) & 0x47) == 0)
      goto LABEL_68;
  }
  else
  {
    HIDWORD(v51) = v49 - 41;
    LODWORD(v51) = v49 - 41;
    v50 = v51 >> 1;
    v52 = v50 > 6;
    v53 = (1 << v50) & 0x47;
    if (v52 || v53 == 0)
      goto LABEL_68;
    v55 = v49 - 28;
  }
  if (v55 == 13 && (*(_BYTE *)(a2 + 17) & 2) != 0)
  {
    v83 = *(_DWORD *)(a2 + 20);
    if ((v83 & 0x40000000) != 0)
    {
      v136 = *(unint64_t **)(a2 - 8);
      if (!*v136)
        goto LABEL_68;
      v282.n128_u64[0] = *v136;
      v84 = *(_QWORD *)(a2 - 8);
    }
    else
    {
      v84 = a2 - 32 * (v83 & 0x7FFFFFF);
      if (!*(_QWORD *)v84)
        goto LABEL_68;
      v282.n128_u64[0] = *(_QWORD *)v84;
    }
    if (*(_QWORD *)(v84 + 32))
    {
      v265[0] = *(llvm **)(v84 + 32);
      sub_1C5ADAC40(a1, v47);
LABEL_265:
      sub_1C5ADAC40(&v285, v137);
      v169 = (_BYTE *)v286;
      *(_QWORD *)a1 += v285;
      sub_1C5ADC700((unsigned int *)(a1 + 8), v169, &v169[24 * v287]);
      v33 = (_QWORD *)v286;
      goto LABEL_26;
    }
  }
LABEL_68:
  v285 = (uint64_t)&v282;
  v286 = (uint64_t)v265;
  if (!sub_1C5ADC614((_QWORD **)&v285, a2))
  {
    v58 = *(unsigned __int8 *)(a2 + 16);
    if (v58 == 5)
    {
      v67 = *(unsigned __int16 *)(a2 + 18);
      if (v67 != 13)
        goto LABEL_109;
      v68 = (unint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (!*v68)
        goto LABEL_105;
      v282.n128_u64[0] = *v68;
      v59 = v68[4];
      if (!v59)
        goto LABEL_105;
    }
    else
    {
      if (v58 != 41)
        goto LABEL_106;
      if (!*(_QWORD *)(a2 - 64))
      {
        v58 = 41;
        goto LABEL_147;
      }
      v282.n128_u64[0] = *(_QWORD *)(a2 - 64);
      v59 = *(_QWORD *)(a2 - 32);
      if (!v59)
      {
LABEL_105:
        v58 = *(unsigned __int8 *)(a2 + 16);
LABEL_106:
        if (v58 < 0x1C)
        {
          if (v58 != 5)
            goto LABEL_152;
          v67 = *(unsigned __int16 *)(a2 + 18);
LABEL_109:
          HIDWORD(v76) = v67 - 13;
          LODWORD(v76) = v67 - 13;
          v75 = v76 >> 1;
          if (v75 > 6 || ((1 << v75) & 0x47) == 0)
            goto LABEL_152;
          goto LABEL_150;
        }
LABEL_147:
        HIDWORD(v101) = v58 - 41;
        LODWORD(v101) = v58 - 41;
        v100 = v101 >> 1;
        if (v100 > 6 || ((1 << v100) & 0x47) == 0)
          goto LABEL_152;
        v67 = v58 - 28;
LABEL_150:
        if (v67 == 25 && (*(_BYTE *)(a2 + 17) & 2) != 0)
        {
          v118 = *(_DWORD *)(a2 + 20);
          if ((v118 & 0x40000000) != 0)
          {
            if (!**(_QWORD **)(a2 - 8))
              goto LABEL_152;
            v265[0] = **(llvm ***)(a2 - 8);
            v119 = *(llvm ***)(a2 - 8);
          }
          else
          {
            v119 = (llvm **)(a2 - 32 * (v118 & 0x7FFFFFF));
            if (!*v119)
              goto LABEL_152;
            v265[0] = *v119;
          }
          v140 = v119[4];
          if (v140)
          {
            if (*((_BYTE *)v140 + 16) == 16)
            {
              v141 = (_QWORD **)((char *)v140 + 24);
              if (sub_1C4DA92C4((llvm *)((char *)v140 + 24), 0x8000000000000000))
              {
                if (sub_1C4DA9220((llvm *)((char *)v140 + 24), 0x7FFFFFFFFFFFFFFFLL))
                {
                  v142 = *((_DWORD *)v140 + 8);
                  if (v142 > 0x40)
                    v143 = **v141;
                  else
                    v143 = (uint64_t)((_QWORD)*v141 << -(char)v142) >> -(char)v142;
                  v178.n128_f64[0] = exp2((double)v143);
                  v179 = (uint64_t)v178.n128_f64[0];
                  sub_1C5ADAC40(a1, v178);
                  v180 = *(_QWORD *)a1;
                  if (v179 >= 0)
                    v181 = v179;
                  else
                    v181 = -v179;
                  if (v180 < 0)
                    v180 = -v180;
                  v182 = v180 * v181;
                  if ((*(_QWORD *)a1 ^ v179) < 0)
                    v182 = -v182;
                  *(_QWORD *)a1 = v182;
                  v183 = *(unsigned int *)(a1 + 16);
                  if ((_DWORD)v183)
                  {
                    v184 = *(uint64_t **)(a1 + 8);
                    v185 = 24 * v183;
                    do
                    {
                      v186 = *v184;
                      if (*v184 < 0)
                        v186 = -v186;
                      v187 = v186 * v181;
                      if ((*v184 ^ v179) < 0)
                        v187 = -v187;
                      *v184 = v187;
                      v184 += 3;
                      v185 -= 24;
                    }
                    while (v185);
                  }
                  goto LABEL_77;
                }
              }
            }
          }
        }
LABEL_152:
        v102 = *(unsigned __int8 *)(a2 + 16);
        if (v102 < 0x1C)
        {
          if (v102 != 5)
            goto LABEL_165;
          v105 = *(unsigned __int16 *)(a2 + 18);
          HIDWORD(v107) = v105 - 13;
          LODWORD(v107) = v105 - 13;
          v106 = v107 >> 1;
          if (v106 > 6 || ((1 << v106) & 0x47) == 0)
            goto LABEL_161;
        }
        else
        {
          HIDWORD(v104) = v102 - 41;
          LODWORD(v104) = v102 - 41;
          v103 = v104 >> 1;
          if (v103 > 6 || ((1 << v103) & 0x47) == 0)
            goto LABEL_161;
          v105 = v102 - 28;
        }
        if (v105 == 17 && (*(_BYTE *)(a2 + 17) & 2) != 0)
        {
          v120 = *(_DWORD *)(a2 + 20);
          if ((v120 & 0x40000000) != 0)
          {
            if (!**(_QWORD **)(a2 - 8))
              goto LABEL_161;
            v265[0] = **(llvm ***)(a2 - 8);
            v121 = *(llvm ***)(a2 - 8);
          }
          else
          {
            v121 = (llvm **)(a2 - 32 * (v120 & 0x7FFFFFF));
            if (!*v121)
              goto LABEL_161;
            v265[0] = *v121;
          }
          v144 = v121[4];
          if (v144)
          {
            if (*((_BYTE *)v144 + 16) == 16)
            {
              v145 = (_QWORD **)((char *)v144 + 24);
              if (sub_1C4DA92C4((llvm *)((char *)v144 + 24), 0x8000000000000000))
              {
                if (sub_1C4DA9220((llvm *)((char *)v144 + 24), 0x7FFFFFFFFFFFFFFFLL))
                {
                  v147 = *((_DWORD *)v144 + 8);
                  v148 = v147 - 1;
                  v149 = (_QWORD *)((char *)v144 + 24);
                  if (v147 >= 0x41)
                    v149 = &(*v145)[v148 >> 6];
                  if (((*v149 >> v148) & 1) == 0)
                  {
                    sub_1C5ADAC40(a1, v146);
                    v150 = *((_DWORD *)v144 + 8);
                    if (v150 > 0x40)
                      v151 = **v145;
                    else
                      v151 = (uint64_t)((_QWORD)*v145 << -(char)v150) >> -(char)v150;
                    v196 = *(_QWORD *)a1;
                    if (v151 >= 0)
                      v197 = v151;
                    else
                      v197 = -v151;
                    if (v196 < 0)
                      v196 = -v196;
                    v198 = v196 * v197;
                    if ((*(_QWORD *)a1 ^ v151) < 0)
                      v198 = -v198;
                    *(_QWORD *)a1 = v198;
                    v199 = *(unsigned int *)(a1 + 16);
                    if ((_DWORD)v199)
                    {
                      v200 = *(uint64_t **)(a1 + 8);
                      v201 = 24 * v199;
                      do
                      {
                        v202 = *v200;
                        if (*v200 < 0)
                          v202 = -v202;
                        v203 = v202 * v197;
                        if ((*v200 ^ v151) < 0)
                          v203 = -v203;
                        *v200 = v203;
                        v200 += 3;
                        v201 -= 24;
                      }
                      while (v201);
                    }
                    goto LABEL_77;
                  }
                }
              }
            }
          }
        }
LABEL_161:
        v102 = *(unsigned __int8 *)(a2 + 16);
        if (v102 >= 0x1C)
        {
          HIDWORD(v109) = v102 - 41;
          LODWORD(v109) = v102 - 41;
          v108 = v109 >> 1;
          if (v108 > 6 || ((1 << v108) & 0x47) == 0)
            goto LABEL_170;
          v110 = v102 - 28;
LABEL_168:
          if (v110 == 15 && (*(_BYTE *)(a2 + 17) & 2) != 0)
          {
            v122 = *(_DWORD *)(a2 + 20);
            if ((v122 & 0x40000000) != 0)
            {
              if (!**(_QWORD **)(a2 - 8))
                goto LABEL_170;
              v282.n128_u64[0] = **(_QWORD **)(a2 - 8);
              v123 = *(unint64_t **)(a2 - 8);
            }
            else
            {
              v123 = (unint64_t *)(a2 - 32 * (v122 & 0x7FFFFFF));
              if (!*v123)
                goto LABEL_170;
              v282.n128_u64[0] = *v123;
            }
            v152 = v123[4];
            if (v152)
            {
              if (*(_BYTE *)(v152 + 16) == 16)
              {
                v153 = (_QWORD **)(v152 + 24);
                if (sub_1C4DA92C4((llvm::APInt *)(v152 + 24), 0x8000000000000000))
                {
                  if (sub_1C4DA9220((llvm::APInt *)(v152 + 24), 0x7FFFFFFFFFFFFFFFLL))
                  {
                    v154 = *(_DWORD *)(v152 + 32);
                    if (v154 > 0x40)
                      v155 = **v153;
                    else
                      v155 = (uint64_t)((_QWORD)*v153 << -(char)v154) >> -(char)v154;
                    v188 = v282.n128_u64[0];
                    *(_QWORD *)(a1 + 24) = 1;
                    *(_QWORD *)a1 = -v155;
                    *(_QWORD *)(a1 + 8) = a1 + 24;
                    *(_QWORD *)(a1 + 32) = v188;
                    goto LABEL_51;
                  }
                }
              }
            }
          }
LABEL_170:
          v102 = *(unsigned __int8 *)(a2 + 16);
          if (v102 >= 0x1C)
          {
            HIDWORD(v114) = v102 - 41;
            LODWORD(v114) = v102 - 41;
            v113 = v114 >> 1;
            if (v113 > 6 || ((1 << v113) & 0x47) == 0)
              goto LABEL_179;
            v115 = v102 - 28;
LABEL_177:
            if (v115 != 15 || (*(_BYTE *)(a2 + 17) & 2) == 0)
              goto LABEL_179;
            v124 = *(_DWORD *)(a2 + 20);
            if ((v124 & 0x40000000) != 0)
            {
              v126 = **(_QWORD **)(a2 - 8);
              if (v126)
              {
                v282.n128_u64[0] = **(_QWORD **)(a2 - 8);
                v125 = *(unint64_t **)(a2 - 8);
LABEL_243:
                v156 = (llvm *)v125[4];
                if (v156)
                {
                  *(_QWORD *)(a1 + 24) = 1;
                  v265[0] = v156;
                  *(_QWORD *)a1 = 0;
                  *(_QWORD *)(a1 + 8) = a1 + 24;
                  *(_QWORD *)(a1 + 32) = v126;
                  *(_BYTE *)(a1 + 40) = 0;
                  *(_QWORD *)(a1 + 48) = -1;
                  *(_QWORD *)(a1 + 56) = v156;
                  *(_BYTE *)(a1 + 64) = 0;
                  v45 = 0x300000002;
                  goto LABEL_76;
                }
              }
            }
            else
            {
              v125 = (unint64_t *)(a2 - 32 * (v124 & 0x7FFFFFF));
              v126 = *v125;
              if (*v125)
              {
                v282.n128_u64[0] = *v125;
                goto LABEL_243;
              }
            }
LABEL_179:
            *(_QWORD *)(a1 + 24) = 1;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = a1 + 24;
            *(_QWORD *)(a1 + 32) = a2;
LABEL_34:
            *(_BYTE *)(a1 + 40) = v27;
LABEL_52:
            v45 = 0x300000001;
LABEL_76:
            *(_QWORD *)(a1 + 16) = v45;
            goto LABEL_77;
          }
LABEL_174:
          if (v102 != 5)
            goto LABEL_179;
          v115 = *(unsigned __int16 *)(a2 + 18);
          HIDWORD(v117) = v115 - 13;
          LODWORD(v117) = v115 - 13;
          v116 = v117 >> 1;
          if (v116 > 6 || ((1 << v116) & 0x47) == 0)
            goto LABEL_179;
          goto LABEL_177;
        }
LABEL_165:
        if (v102 != 5)
          goto LABEL_174;
        v110 = *(unsigned __int16 *)(a2 + 18);
        HIDWORD(v112) = v110 - 13;
        LODWORD(v112) = v110 - 13;
        v111 = v112 >> 1;
        if (v111 > 6 || ((1 << v111) & 0x47) == 0)
          goto LABEL_170;
        goto LABEL_168;
      }
    }
    if (*(_BYTE *)(v59 + 16) != 16)
      goto LABEL_105;
    v69 = (_QWORD **)(v59 + 24);
    v70 = *(_DWORD *)(v59 + 32);
    v71 = v70 - 1;
    v72 = (_QWORD *)(v59 + 24);
    if (v70 >= 0x41)
      v72 = &(*v69)[v71 >> 6];
    if (((*v72 >> v71) & 1) == 0
      || !sub_1C4DA92C4((llvm::APInt *)(v59 + 24), 0x8000000000000000)
      || !sub_1C4DA9220((llvm::APInt *)(v59 + 24), 0x7FFFFFFFFFFFFFFFLL))
    {
      goto LABEL_105;
    }
    v73 = *(_DWORD *)(v59 + 32);
    if (v73 > 0x40)
      v74 = **v69;
    else
      v74 = (uint64_t)((_QWORD)*v69 << -(char)v73) >> -(char)v73;
    v167 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v282.n128_u64[0], -v74, 0);
    v168.n128_f64[0] = sub_1C5ADC5C0(a3, 0x23u, v282.n128_u64[0], (uint64_t)v167);
    sub_1C5ADAC40(a1, v168);
    goto LABEL_265;
  }
  if ((llvm::isKnownNonNegative((llvm *)v282.n128_u64[0], (const llvm::Value *)v271, 0, 0, 0, 0, (const llvm::DominatorTree *)1) & 1) == 0)
  {
    v157 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v282.n128_u64[0], 0, 0);
    sub_1C5ADC5C0(a3, 0x27u, v282.n128_u64[0], (uint64_t)v157);
  }
  if ((llvm::isKnownNonNegative(v265[0], (const llvm::Value *)v271, 0, 0, 0, 0, (const llvm::DominatorTree *)1) & 1) == 0)
  {
    v159 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v265[0], 0, 0);
    v158.n128_f64[0] = sub_1C5ADC5C0(a3, 0x27u, (unint64_t)v265[0], (uint64_t)v159);
  }
  sub_1C5ADAC40(a1, v158);
  sub_1C5ADAC40(&v285, v160);
  v161 = (_BYTE *)v286;
  *(_QWORD *)a1 += v285;
  sub_1C5ADC700((unsigned int *)(a1 + 8), v161, &v161[24 * v287]);
  v33 = (_QWORD *)v286;
LABEL_26:
  if (v33 != v288)
LABEL_27:
    free(v33);
LABEL_77:
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v271);
}

double sub_1C5ADC5C0(uint64_t a1, unsigned __int32 a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  double result;
  __n128 v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7.n128_u32[0] = a2;
    v7.n128_u64[1] = a3;
    v8 = a4;
    *(_QWORD *)&result = sub_1C4AB8FDC(a1, &v7).n128_u64[0];
  }
  else
  {
    v5 = *(_QWORD *)a1 + 24 * v4;
    *(_DWORD *)v5 = a2;
    *(_QWORD *)(v5 + 8) = a3;
    *(_QWORD *)(v5 + 16) = a4;
    *(_DWORD *)(a1 + 8) = v4 + 1;
  }
  return result;
}

uint64_t sub_1C5ADC614(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v12;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;

  LODWORD(v2) = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if ((_DWORD)v2 == 5)
    {
      LODWORD(v2) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v9) = v2 - 13;
      LODWORD(v9) = v2 - 13;
      v8 = v9 >> 1;
      v5 = v8 > 6;
      v10 = (1 << v8) & 0x47;
      if (!v5 && v10 != 0)
        goto LABEL_12;
    }
LABEL_16:
    v12 = 0;
    return v12 & v2;
  }
  HIDWORD(v4) = v2 - 41;
  LODWORD(v4) = v2 - 41;
  v3 = v4 >> 1;
  v5 = v3 > 6;
  v6 = (1 << v3) & 0x47;
  if (v5 || v6 == 0)
    goto LABEL_16;
  LODWORD(v2) = v2 - 28;
LABEL_12:
  if ((_DWORD)v2 == 13 && (*(_BYTE *)(a2 + 17) & 4) != 0)
  {
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(uint64_t **)(a2 - 8);
    else
      v15 = (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
    v2 = *v15;
    if (v2)
    {
      **a1 = v2;
      v16 = *(_DWORD *)(a2 + 20);
      v17 = (v16 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v16 & 0x7FFFFFF);
      v2 = *(_QWORD *)(v17 + 32);
      if (v2)
      {
        *a1[1] = v2;
        v12 = 1;
        LODWORD(v2) = 1;
        return v12 & v2;
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  v12 = 1;
  return v12 & v2;
}

unsigned int *sub_1C5ADC700(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3 - __src) >> 3);
  v8 = result[2];
  if (v7 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7 + v8, 24);
    LODWORD(v8) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 24 * v8), __src, v6);
    LODWORD(v8) = v5[2];
  }
  v5[2] = v8 + v7;
  return result;
}

uint64_t sub_1C5ADC798(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8 - 7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9 - 7);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C5ADC8C8(_QWORD *a1)
{
  if (*a1 == a1[2])
    return 0;
  else
    return *a1;
}

uint64_t sub_1C5ADC8DC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 24))
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_1C5ADC8F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a1;
    v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
    result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v12 = *result;
    if (*a2 == *result)
    {
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == -8192;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_17;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_1C4E38190(a1, (uint64_t)a2, a2, v15);
  *result = *a2;
  *((_DWORD *)result + 2) = *a3;
  v9 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v16;
  return result;
}

BOOL sub_1C5ADC9DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = v1 + 24;
  return v1 != v2;
}

BOOL sub_1C5ADCA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 24;
  return v1 != v2;
}

uint64_t sub_1C5ADCA24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  int32x2_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  int32x2_t *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  int32x2_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  llvm::PointerType *v98;
  uint64_t ***v99;
  uint64_t **v100;
  void *v101;
  uint64_t **v102;
  uint64_t *v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ****v112;
  uint64_t ***v113;
  int v114;
  int v115;
  uint64_t ***v116;
  char *v117;
  uint64_t **v118;
  uint64_t **v119;
  char *v120;
  llvm::Function *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t ***v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  int32x2_t *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t *v156;
  uint64_t v157;
  int32x2_t *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t ***v172;
  unsigned int v173;
  uint64_t **v174;
  const llvm::APInt *v175;
  uint64_t *v176;
  uint64_t v177;
  llvm::Value *v178;
  llvm::Instruction *v179;
  const llvm::APInt *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned __int8 *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 *v194;
  int v195;
  int v196;
  llvm::Instruction *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 **v201;
  unsigned __int8 *v202;
  int v203;
  int v204;
  unsigned __int8 **v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  int32x2_t ****v210;
  int32x2_t *v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  int32x2_t *****v216;
  int32x2_t ****v217;
  int v218;
  int v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  int32x2_t ****v223;
  int32x2_t *v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  int32x2_t *****v229;
  int32x2_t ****v230;
  int v231;
  int v232;
  uint64_t ***v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  llvm::Instruction **v238;
  llvm::Instruction *v239;
  int v240;
  int v241;
  llvm::Instruction *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  int32x2_t ****v248;
  int32x2_t *v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  int32x2_t *****v254;
  int32x2_t ****v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  int32x2_t ****v272;
  int32x2_t *v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  int32x2_t *****v278;
  int32x2_t ****v279;
  int v280;
  int v281;
  _QWORD *v282;
  unint64_t v283;
  int32x2_t ****v284;
  int32x2_t *v285;
  unint64_t v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  int32x2_t *****v290;
  int32x2_t ****v291;
  int v292;
  int v293;
  uint64_t v294;
  unsigned __int8 **v295;
  int v296;
  uint64_t v297;
  char *v298;
  unsigned __int8 *v299;
  uint64_t v300;
  llvm::ValueSymbolTable *v301;
  unint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  int32x2_t *v305;
  unint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  llvm::Value *v315;
  uint64_t ***v316;
  uint64_t ***v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  llvm::Instruction **v322;
  llvm::Instruction *v323;
  int v324;
  int v325;
  llvm::Instruction *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t **v334;
  uint64_t v335;
  unsigned __int8 **v336;
  _QWORD *v337;
  _QWORD *v338;
  int v339;
  uint64_t ****v340;
  uint64_t ***v341;
  uint64_t **v342;
  uint64_t ***v343;
  uint64_t **v344;
  _QWORD *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t *v350;
  uint64_t v351;
  int32x2_t *v352;
  unint64_t v353;
  uint64_t v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int v359;
  int v360;
  unint64_t v362;
  unint64_t *v363;
  uint64_t v364;
  int32x2_t *v365;
  unint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  int v372;
  int v373;
  unsigned __int8 *v374;
  uint64_t v375;
  llvm::ValueSymbolTable *v376;
  llvm::ConstantInt *v377;
  llvm::ConstantInt *v378;
  unsigned int v379;
  char v380;
  uint64_t *v381;
  llvm::Instruction *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  _QWORD v391[2];
  unsigned int v392;
  _QWORD v393[3];
  char v394;
  char *v395;
  uint64_t v396;
  unint64_t *v397;
  int32x2_t ****v398;
  _QWORD *v399;
  void *v400;
  unsigned int v401;
  int v402;
  _QWORD v403[2];
  __int16 v404;
  char *v405;
  uint64_t v406;
  void *v407[2];
  _WORD v408[8];
  void *v409;
  uint64_t v410;
  _QWORD v411[2];
  __int16 v412;
  void *v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  _QWORD v417[2];
  _QWORD **v418;
  _QWORD **v419;
  uint64_t *v420;
  void **v421;
  void **v422;
  uint64_t v423;
  int v424;
  __int16 v425;
  char v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  void *v430;
  void *v431;
  uint64_t v432;
  _BYTE v433[48];
  _QWORD *v434;
  uint64_t v435;
  _BYTE v436[32];
  uint64_t **v437;
  uint64_t v438;
  _QWORD v439[8];

  v439[6] = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v11 = result;
  v383 = **(_QWORD **)a6;
  v392 = 128;
  v12 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v13 = 0;
  v391[0] = v12;
  v391[1] = 0;
  do
  {
    v14 = &v12[v13];
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = -4096;
    *(_QWORD *)v14 = &unk_1E814DA10;
    *((_QWORD *)v14 + 1) = 2;
    v13 += 64;
    *((_QWORD *)v14 + 4) = 0;
  }
  while (v13 != 0x2000);
  LOBYTE(v393[0]) = 0;
  v394 = 0;
  v437 = (uint64_t **)v439;
  v438 = 0x600000000;
  v384 = a2 + 48 * a3;
  v385 = a2;
  v387 = a3;
  if (a3)
  {
    v15 = a2 + 16;
    do
    {
      v17 = v15 - 16;
      v16 = *(void **)(v15 - 16);
      LOBYTE(v414) = *(_BYTE *)(v15 - 8);
      v413 = v16;
      v415 = v417;
      v416 = 0x200000000;
      if (*(_DWORD *)(v15 + 8))
      {
        sub_1C49EEBE4((uint64_t)&v415, v15);
        if (v415 != v417)
          free(v415);
      }
      v15 += 48;
    }
    while (v17 + 48 != v384);
  }
  v434 = v436;
  v435 = 0x400000000;
  v18 = *((_DWORD *)a6 + 5);
  v382 = (llvm::Instruction *)a6;
  if ((v18 & 0x40000000) != 0)
  {
    v20 = (char *)*((_QWORD *)a6 - 1);
    v19 = v18 & 0x7FFFFFF;
  }
  else
  {
    v19 = v18 & 0x7FFFFFF;
    v20 = &a6[-32 * v19];
  }
  sub_1C4DA9878((unsigned int *)&v434, (uint64_t)v436, v20, &v20[32 * v19]);
  v21 = v435;
  while ((_DWORD)v435)
  {
    v22 = v434[v21 - 1];
    LODWORD(v435) = v21 - 1;
    v23 = v22 >> 4;
    if (v392)
    {
      v24 = (v23 ^ (v22 >> 9)) & (v392 - 1);
      v25 = v391[0] + (v24 << 6);
      v26 = *(_QWORD *)(v25 + 24);
      if (v22 == v26)
      {
LABEL_19:
        if (v25 != v391[0] + ((unint64_t)v392 << 6))
          goto LABEL_89;
      }
      else
      {
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v392 - 1);
          v25 = v391[0] + (v24 << 6);
          v26 = *(_QWORD *)(v25 + 24);
          if (v22 == v26)
            goto LABEL_19;
        }
      }
    }
    v29 = *(unsigned __int8 *)(v22 + 16);
    if (v29 >= 0x15)
    {
      if (v29 <= 0x1B)
        v30 = 0;
      else
        v30 = v22;
      v31 = *a5;
      v32 = *((unsigned int *)a5 + 4);
      if (!(_DWORD)v32)
        goto LABEL_32;
      LODWORD(v33) = (v32 - 1) & (v23 ^ (v22 >> 9));
      v34 = (uint64_t *)(v31 + 16 * v33);
      v35 = *v34;
      if (v22 == *v34)
      {
LABEL_30:
        v38 = (uint64_t *)(v31 + 16 * v32);
        if (v30)
          goto LABEL_33;
      }
      else
      {
        v36 = 1;
        while (v35 != -4096)
        {
          v37 = v33 + v36++;
          v33 = v37 & (v32 - 1);
          v35 = *(_QWORD *)(v31 + 16 * v33);
          if (v22 == v35)
          {
            v34 = (uint64_t *)(v31 + 16 * v33);
            goto LABEL_30;
          }
        }
LABEL_32:
        v38 = (uint64_t *)(v31 + 16 * v32);
        v34 = v38;
        if (v30)
        {
LABEL_33:
          if (v34 == v38)
          {
            v414 = 2;
            v415 = 0;
            v416 = v22;
            if (v22 != -8192 && v22 != -4096 && v22)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v414);
            v413 = &unk_1E814DA10;
            v417[0] = v391;
            v39 = sub_1C52E2ED8((uint64_t)v391, &v413);
            if (v416 != -8192 && v416 != -4096 && v416)
            {
              v40 = v414 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v414 & 0xFFFFFFFFFFFFFFF8) = v415;
              if (v415)
              {
                *(_QWORD *)v415 = *(_QWORD *)v415 & 7 | v40;
              }
              else
              {
                v41 = v416;
                v42 = ***(int32x2_t ****)v416;
                v43 = (unint64_t)v42[303];
                if (v43 <= v40)
                {
                  v44 = v42[305].u32[0];
                  if (v43 + 16 * v44 > v40)
                  {
                    v45 = v44 - 1;
                    LODWORD(v46) = v45 & ((v416 >> 4) ^ (v416 >> 9));
                    v47 = (uint64_t *)(v43 + 16 * v46);
                    v48 = *v47;
                    if (v416 == *v47)
                    {
LABEL_49:
                      *v47 = -8192;
                      v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
                      v41 = v416;
                    }
                    else
                    {
                      v49 = 1;
                      while (v48 != -4096)
                      {
                        v50 = v46 + v49++;
                        v46 = v50 & v45;
                        v48 = *(_QWORD *)(v43 + 16 * v46);
                        if (v416 == v48)
                        {
                          v47 = (uint64_t *)(v43 + 16 * v46);
                          goto LABEL_49;
                        }
                      }
                    }
                    *(_BYTE *)(v41 + 17) &= ~1u;
                  }
                }
              }
            }
            v65 = v39[7];
            if (v65 != v22)
            {
              if (v65 && v65 != -8192 && v65 != -4096)
              {
                v81 = v39[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v81 = v39[6];
                v82 = (unint64_t *)v39[6];
                if (v82)
                {
                  *v82 = *v82 & 7 | v81;
                }
                else
                {
                  v83 = v39[7];
                  v84 = ***(int32x2_t ****)v83;
                  v85 = (unint64_t)v84[303];
                  if (v85 <= v81)
                  {
                    v86 = v84[305].u32[0];
                    if (v85 + 16 * v86 > v81)
                    {
                      v87 = v86 - 1;
                      LODWORD(v88) = v87 & ((v83 >> 4) ^ (v83 >> 9));
                      v89 = (uint64_t *)(v85 + 16 * v88);
                      v90 = *v89;
                      if (v83 == *v89)
                      {
LABEL_113:
                        *v89 = -8192;
                        v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
                        v83 = v39[7];
                      }
                      else
                      {
                        v91 = 1;
                        while (v90 != -4096)
                        {
                          v92 = v88 + v91++;
                          v88 = v92 & v87;
                          v90 = *(_QWORD *)(v85 + 16 * v88);
                          if (v83 == v90)
                          {
                            v89 = (uint64_t *)(v85 + 16 * v88);
                            goto LABEL_113;
                          }
                        }
                      }
                      *(_BYTE *)(v83 + 17) &= ~1u;
                    }
                  }
                }
              }
              v39[7] = v22;
              if (v22 != -8192 && v22 != -4096 && v22)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v39 + 5));
            }
            v66 = *(_DWORD *)(v30 + 20);
            if ((v66 & 0x40000000) != 0)
            {
              v68 = *(char **)(v30 - 8);
              v67 = v66 & 0x7FFFFFF;
            }
            else
            {
              v67 = v66 & 0x7FFFFFF;
              v68 = (char *)(v30 - 32 * v67);
            }
            sub_1C4DA9878((unsigned int *)&v434, (uint64_t)&v434[v435], v68, &v68[32 * v67]);
            goto LABEL_89;
          }
        }
      }
      v414 = 2;
      v415 = 0;
      v416 = v22;
      if (v22 != -8192 && v22 != -4096 && v22)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v414);
      v413 = &unk_1E814DA10;
      v417[0] = v391;
      v51 = sub_1C52E2ED8((uint64_t)v391, &v413);
      if (v416 != -8192 && v416 != -4096 && v416)
      {
        v52 = v414 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v414 & 0xFFFFFFFFFFFFFFF8) = v415;
        if (v415)
        {
          *(_QWORD *)v415 = *(_QWORD *)v415 & 7 | v52;
        }
        else
        {
          v53 = v416;
          v54 = ***(int32x2_t ****)v416;
          v55 = (unint64_t)v54[303];
          if (v55 <= v52)
          {
            v56 = v54[305].u32[0];
            if (v55 + 16 * v56 > v52)
            {
              v57 = v56 - 1;
              LODWORD(v58) = v57 & ((v416 >> 4) ^ (v416 >> 9));
              v59 = (uint64_t *)(v55 + 16 * v58);
              v60 = *v59;
              if (v416 == *v59)
              {
LABEL_66:
                *v59 = -8192;
                v54[304] = vadd_s32(v54[304], (int32x2_t)0x1FFFFFFFFLL);
                v53 = v416;
              }
              else
              {
                v61 = 1;
                while (v60 != -4096)
                {
                  v62 = v58 + v61++;
                  v58 = v62 & v57;
                  v60 = *(_QWORD *)(v55 + 16 * v58);
                  if (v416 == v60)
                  {
                    v59 = (uint64_t *)(v55 + 16 * v58);
                    goto LABEL_66;
                  }
                }
              }
              *(_BYTE *)(v53 + 17) &= ~1u;
            }
          }
        }
      }
      v63 = v51[7];
      if (v63 != v22)
      {
        if (v63 && v63 != -8192 && v63 != -4096)
        {
          v69 = v51[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v69 = v51[6];
          v70 = (unint64_t *)v51[6];
          if (v70)
          {
            *v70 = *v70 & 7 | v69;
          }
          else
          {
            v71 = v51[7];
            v72 = ***(int32x2_t ****)v71;
            v73 = (unint64_t)v72[303];
            if (v73 <= v69)
            {
              v74 = v72[305].u32[0];
              if (v73 + 16 * v74 > v69)
              {
                v75 = v74 - 1;
                LODWORD(v76) = v75 & ((v71 >> 4) ^ (v71 >> 9));
                v77 = (uint64_t *)(v73 + 16 * v76);
                v78 = *v77;
                if (v71 == *v77)
                {
LABEL_101:
                  *v77 = -8192;
                  v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
                  v71 = v51[7];
                }
                else
                {
                  v79 = 1;
                  while (v78 != -4096)
                  {
                    v80 = v76 + v79++;
                    v76 = v80 & v75;
                    v78 = *(_QWORD *)(v73 + 16 * v76);
                    if (v71 == v78)
                    {
                      v77 = (uint64_t *)(v73 + 16 * v76);
                      goto LABEL_101;
                    }
                  }
                }
                *(_BYTE *)(v71 + 17) &= ~1u;
              }
            }
          }
        }
        v51[7] = v22;
        if (v22 != -8192 && v22 != -4096 && v22)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v51 + 5));
      }
      v64 = v438;
      if (v438 >= (unint64_t)HIDWORD(v438))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v437, (uint64_t)v439, v438 + 1, 8);
        v64 = v438;
      }
      v437[v64] = (uint64_t *)v22;
      LODWORD(v438) = v438 + 1;
    }
LABEL_89:
    v21 = v435;
  }
  v431 = v433;
  v432 = 0x600000000;
  if ((_DWORD)v438)
  {
    v93 = 0;
    v94 = v437;
    v95 = 8 * v438;
    do
    {
      v96 = **v94;
      if (v93 >= HIDWORD(v432))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v431, (uint64_t)v433, v93 + 1, 8);
        v93 = v432;
      }
      *((_QWORD *)v431 + v93) = v96;
      v93 = v432 + 1;
      LODWORD(v432) = v432 + 1;
      ++v94;
      v95 -= 8;
    }
    while (v95);
    v97 = (uint64_t *)v431;
  }
  else
  {
    v93 = 0;
    v97 = (uint64_t *)v433;
  }
  v98 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v383 + 1888), v97, v93, 0);
  v99 = *(uint64_t ****)(*(_QWORD *)(a4 + 40) + 56);
  v100 = v99[5];
  v103 = v100[21];
  v102 = v100 + 21;
  v101 = v103;
  v104 = *((_BYTE *)v102 + 23);
  v105 = v104;
  if (v104 >= 0)
    v101 = v102;
  v106 = (uint64_t)v102[1];
  v107 = v104 & 0x7F;
  if (v105 >= 0)
    v106 = v107;
  if ((*((_BYTE *)v99 + 23) & 0x10) == 0)
  {
    v118 = 0;
    v117 = &byte_1C871356D;
    goto LABEL_137;
  }
  v108 = ***v99;
  v109 = *(_QWORD *)(v108 + 152);
  v110 = *(unsigned int *)(v108 + 168);
  if (!(_DWORD)v110)
    goto LABEL_135;
  LODWORD(v111) = (v110 - 1) & ((v99 >> 4) ^ (v99 >> 9));
  v112 = (uint64_t ****)(v109 + 16 * v111);
  v113 = *v112;
  if (*v112 != v99)
  {
    v114 = 1;
    while (v113 != (uint64_t ***)-4096)
    {
      v115 = v111 + v114++;
      v111 = v115 & (v110 - 1);
      v113 = *(uint64_t ****)(v109 + 16 * v111);
      if (v113 == v99)
      {
        v112 = (uint64_t ****)(v109 + 16 * v111);
        goto LABEL_136;
      }
    }
LABEL_135:
    v112 = (uint64_t ****)(v109 + 16 * v110);
  }
LABEL_136:
  v116 = v112[1];
  v119 = *v116;
  v117 = (char *)(v116 + 2);
  v118 = v119;
LABEL_137:
  v409 = v101;
  v410 = v106;
  v411[0] = v117;
  v411[1] = v118;
  v412 = 1285;
  v413 = &v409;
  v415 = "repro";
  LOWORD(v417[0]) = 770;
  v120 = (char *)operator new(0x80uLL);
  v121 = (llvm::Function *)(v120 + 8);
  *((_DWORD *)v120 + 7) = *((_DWORD *)v120 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v120 = 0;
  llvm::Function::Function((uint64_t *)v120 + 1, v98, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v413, v11);
  if ((_DWORD)v438)
  {
    v122 = 0;
    while (1)
    {
      if ((*((_WORD *)v120 + 13) & 1) != 0)
        llvm::Function::BuildLazyArguments(v121);
      v123 = *((_QWORD *)v120 + 12);
      v124 = (uint64_t ***)v437[v122];
      if ((*((_BYTE *)v124 + 23) & 0x10) == 0)
      {
        v134 = 0;
        v135 = &byte_1C871356D;
        goto LABEL_150;
      }
      v125 = ***v124;
      v126 = *(_QWORD *)(v125 + 152);
      v127 = *(unsigned int *)(v125 + 168);
      if (!(_DWORD)v127)
        goto LABEL_148;
      LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
      v129 = (uint64_t ****)(v126 + 16 * v128);
      v130 = *v129;
      if (*v129 != v124)
        break;
LABEL_149:
      v133 = v129[1];
      v136 = (uint64_t)*v133;
      v135 = (char *)(v133 + 2);
      v134 = v136;
LABEL_150:
      LOWORD(v417[0]) = 261;
      v413 = v135;
      v414 = v134;
      llvm::Value::setName((uint64_t ***)(v123 + 40 * v122++), (uint64_t)&v413);
      if (v122 >= v438)
        goto LABEL_153;
    }
    v131 = 1;
    while (v130 != (uint64_t ***)-4096)
    {
      v132 = v128 + v131++;
      v128 = v132 & (v127 - 1);
      v130 = *(uint64_t ****)(v126 + 16 * v128);
      if (v130 == v124)
      {
        v129 = (uint64_t ****)(v126 + 16 * v128);
        goto LABEL_149;
      }
    }
LABEL_148:
    v129 = (uint64_t ****)(v126 + 16 * v127);
    goto LABEL_149;
  }
LABEL_153:
  sub_1C55B6B84((uint64_t)v391);
  if (v394)
  {
    sub_1C4E43068((uint64_t)v393);
    MEMORY[0x1CAA32FB4](v393[0], 8);
    v394 = 0;
  }
  if ((_DWORD)v438)
  {
    v137 = 0;
    do
    {
      if ((*((_WORD *)v120 + 13) & 1) != 0)
        llvm::Function::BuildLazyArguments(v121);
      v138 = *((_QWORD *)v120 + 12);
      v139 = (uint64_t)v437[v137];
      v414 = 2;
      v415 = 0;
      v416 = v139;
      if (v139 != -8192 && v139 != -4096 && v139 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v414);
      v413 = &unk_1E814DA10;
      v417[0] = v391;
      v141 = sub_1C52E2ED8((uint64_t)v391, &v413);
      if (v416 != -8192 && v416 != -4096 && v416)
      {
        v142 = v414 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v414 & 0xFFFFFFFFFFFFFFF8) = v415;
        if (v415)
        {
          *(_QWORD *)v415 = *(_QWORD *)v415 & 7 | v142;
        }
        else
        {
          v143 = v416;
          v144 = ***(int32x2_t ****)v416;
          v145 = (unint64_t)v144[303];
          if (v145 <= v142)
          {
            v146 = v144[305].u32[0];
            if (v145 + 16 * v146 > v142)
            {
              v147 = v146 - 1;
              LODWORD(v148) = v147 & ((v416 >> 4) ^ (v416 >> 9));
              v149 = (uint64_t *)(v145 + 16 * v148);
              v150 = *v149;
              if (v416 == *v149)
              {
LABEL_176:
                *v149 = -8192;
                v144[304] = vadd_s32(v144[304], (int32x2_t)0x1FFFFFFFFLL);
                v143 = v416;
              }
              else
              {
                v151 = 1;
                while (v150 != -4096)
                {
                  v152 = v148 + v151++;
                  v148 = v152 & v147;
                  v150 = *(_QWORD *)(v145 + 16 * v148);
                  if (v416 == v150)
                  {
                    v149 = (uint64_t *)(v145 + 16 * v148);
                    goto LABEL_176;
                  }
                }
              }
              *(_BYTE *)(v143 + 17) &= ~1u;
            }
          }
        }
      }
      v153 = v138 + 40 * v137;
      v154 = v141[7];
      if (v154 != v153)
      {
        if (v154 && v154 != -8192 && v154 != -4096)
        {
          v155 = v141[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v155 = v141[6];
          v156 = (unint64_t *)v141[6];
          if (v156)
          {
            *v156 = *v156 & 7 | v155;
          }
          else
          {
            v157 = v141[7];
            v158 = ***(int32x2_t ****)v157;
            v159 = (unint64_t)v158[303];
            if (v159 <= v155)
            {
              v160 = v158[305].u32[0];
              if (v159 + 16 * v160 > v155)
              {
                v161 = v160 - 1;
                LODWORD(v162) = v161 & ((v157 >> 4) ^ (v157 >> 9));
                v163 = (uint64_t *)(v159 + 16 * v162);
                v164 = *v163;
                if (v157 == *v163)
                {
LABEL_197:
                  *v163 = -8192;
                  v158[304] = vadd_s32(v158[304], (int32x2_t)0x1FFFFFFFFLL);
                  v157 = v141[7];
                }
                else
                {
                  v165 = 1;
                  while (v164 != -4096)
                  {
                    v166 = v162 + v165++;
                    v162 = v166 & v161;
                    v164 = *(_QWORD *)(v159 + 16 * v162);
                    if (v157 == v164)
                    {
                      v163 = (uint64_t *)(v159 + 16 * v162);
                      goto LABEL_197;
                    }
                  }
                }
                *(_BYTE *)(v157 + 17) &= ~1u;
              }
            }
          }
        }
        v141[7] = v153;
        if (v153 != -8192 && v153 != -4096 && v153)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v141 + 5));
      }
      ++v137;
    }
    while (v137 < v438);
  }
  v413 = "entry";
  LOWORD(v417[0]) = 259;
  v167 = operator new();
  *(_QWORD *)v167 = *(_QWORD *)v383 + 1600;
  *(_QWORD *)(v167 + 8) = 0;
  v168 = *(_DWORD *)(v167 + 20) & 0xC0000000;
  *(_DWORD *)(v167 + 16) = 22;
  *(_DWORD *)(v167 + 20) = v168;
  *(_QWORD *)(v167 + 24) = 0;
  v169 = (_QWORD *)(v167 + 40);
  *(_QWORD *)(v167 + 32) = 0;
  *(_QWORD *)(v167 + 40) = v167 + 40;
  *(_QWORD *)(v167 + 48) = v167 + 40;
  *(_QWORD *)(v167 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v120 + 80), (_QWORD *)v167);
  v170 = *((_QWORD *)v120 + 10);
  *(_QWORD *)(v167 + 32) = v120 + 80;
  *(_QWORD *)(v167 + 24) = v170;
  *(_QWORD *)(v170 + 8) = v167 + 24;
  *((_QWORD *)v120 + 10) = v167 + 24;
  v171 = v167;
  llvm::Value::setName((uint64_t ***)v167, (uint64_t)&v413);
  v413 = "exit";
  LOWORD(v417[0]) = 259;
  v172 = (uint64_t ***)operator new();
  *v172 = (uint64_t **)(*(_QWORD *)v383 + 1600);
  v172[1] = 0;
  v173 = *((_DWORD *)v172 + 5) & 0xC0000000;
  *((_DWORD *)v172 + 4) = 22;
  *((_DWORD *)v172 + 5) = v173;
  v172[3] = 0;
  v172[4] = 0;
  v172[5] = (uint64_t **)(v172 + 5);
  v172[6] = (uint64_t **)(v172 + 5);
  v172[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v120 + 80), v172);
  v174 = (uint64_t **)*((_QWORD *)v120 + 10);
  v381 = (uint64_t *)(v120 + 80);
  v172[4] = (uint64_t **)(v120 + 80);
  v172[3] = v174;
  v174[1] = (uint64_t *)(v172 + 3);
  *((_QWORD *)v120 + 10) = v172 + 3;
  llvm::Value::setName(v172, (uint64_t)&v413);
  v176 = **v172;
  v413 = &v415;
  v414 = 0x200000000;
  v420 = v176;
  v421 = &v429;
  v422 = &v430;
  v423 = 0;
  v424 = 0;
  v425 = 512;
  v426 = 7;
  v427 = 0;
  v428 = 0;
  v429 = &unk_1E8167888;
  v430 = &unk_1E8167A08;
  v418 = v172;
  v419 = v172 + 5;
  v177 = *v176;
  v178 = *(llvm::Value **)(*v176 + 1568);
  v179 = v382;
  if (!v178)
  {
    v377 = *(llvm::ConstantInt **)(v177 + 1888);
    LODWORD(v410) = *(_DWORD *)(v177 + 1896) >> 8;
    if (v410 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v409, 0, 0);
    else
      v409 = 0;
    v178 = llvm::ConstantInt::get(v377, (llvm::LLVMContext *)&v409, v175);
    if (v410 >= 0x41 && v409)
      MEMORY[0x1CAA32F9C](v409, 0x1000C8000313F17);
    *(_QWORD *)(v177 + 1568) = v178;
  }
  sub_1C538D7E4((uint64_t *)&v413, v178);
  v409 = v411;
  v410 = 0x400000000;
  v181 = v387;
  if (!v387)
  {
    v418 = (_QWORD **)v167;
    v419 = (_QWORD **)(v167 + 40);
    goto LABEL_385;
  }
  v182 = v385;
  v183 = v167;
  do
  {
    v184 = *(char **)v182;
    LOBYTE(v406) = *(_BYTE *)(v182 + 8);
    v405 = v184;
    v407[0] = v408;
    v407[1] = (void *)0x200000000;
    if (*(_DWORD *)(v182 + 24))
      sub_1C49EEBE4((uint64_t)v407, v182 + 16);
    v386 = v182;
    v404 = 257;
    v171 = operator new();
    *(_QWORD *)v171 = *(_QWORD *)v383 + 1600;
    *(_QWORD *)(v171 + 8) = 0;
    v185 = *(_DWORD *)(v171 + 20) & 0xC0000000;
    *(_DWORD *)(v171 + 16) = 22;
    *(_DWORD *)(v171 + 20) = v185;
    *(_QWORD *)(v171 + 24) = 0;
    *(_QWORD *)(v171 + 32) = 0;
    *(_QWORD *)(v171 + 40) = v171 + 40;
    *(_QWORD *)(v171 + 48) = v171 + 40;
    *(_QWORD *)(v171 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v381, (_QWORD *)v171);
    v186 = *v381;
    *(_QWORD *)(v171 + 32) = v381;
    *(_QWORD *)(v171 + 24) = v186;
    *(_QWORD *)(v186 + 8) = v171 + 24;
    *v381 = v171 + 24;
    llvm::Value::setName((uint64_t ***)v171, (uint64_t)&v400);
    v187 = v183 + 40;
    v418 = (_QWORD **)v183;
    v419 = (_QWORD **)(v183 + 40);
    v188 = v410;
    if (v410 >= (unint64_t)HIDWORD(v410))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v409, (uint64_t)v411, v410 + 1, 8);
      v188 = v410;
    }
    v388 = v183;
    *((_QWORD *)v409 + v188) = v183;
    LODWORD(v410) = v410 + 1;
    v400 = v403;
    v402 = 4;
    v403[0] = v382;
    v189 = 1;
    do
    {
      v190 = (unsigned __int8 *)*((_QWORD *)v400 + --v189);
      v401 = v189;
      v191 = v190 >> 4;
      if (v392)
      {
        v192 = (v191 ^ (v190 >> 9)) & (v392 - 1);
        v193 = v391[0] + (v192 << 6);
        v194 = *(unsigned __int8 **)(v193 + 24);
        if (v190 == v194)
        {
LABEL_213:
          if (v193 != v391[0] + ((unint64_t)v392 << 6))
            continue;
        }
        else
        {
          v195 = 1;
          while (v194 != (unsigned __int8 *)-4096)
          {
            v196 = v192 + v195++;
            v192 = v196 & (v392 - 1);
            v193 = v391[0] + (v192 << 6);
            v194 = *(unsigned __int8 **)(v193 + 24);
            if (v190 == v194)
              goto LABEL_213;
          }
        }
      }
      if (v190[16] <= 0x1Bu)
        v197 = 0;
      else
        v197 = (llvm::Instruction *)v190;
      v198 = *a5;
      v199 = *((unsigned int *)a5 + 4);
      if (!(_DWORD)v199)
        goto LABEL_224;
      LODWORD(v200) = (v199 - 1) & (v191 ^ (v190 >> 9));
      v201 = (unsigned __int8 **)(v198 + 16 * v200);
      v202 = *v201;
      if (v190 != *v201)
      {
        v203 = 1;
        while (v202 != (unsigned __int8 *)-4096)
        {
          v204 = v200 + v203++;
          v200 = v204 & (v199 - 1);
          v202 = *(unsigned __int8 **)(v198 + 16 * v200);
          if (v190 == v202)
          {
            v201 = (unsigned __int8 **)(v198 + 16 * v200);
            goto LABEL_223;
          }
        }
LABEL_224:
        v205 = (unsigned __int8 **)(v198 + 16 * v199);
        v201 = v205;
        goto LABEL_225;
      }
LABEL_223:
      v205 = (unsigned __int8 **)(v198 + 16 * v199);
LABEL_225:
      if (v201 != v205 || !v197)
        continue;
      llvm::Instruction::clone(v197);
      v207 = v206;
      v396 = 2;
      v397 = 0;
      v398 = (int32x2_t ****)v190;
      if (v190 != (unsigned __int8 *)-8192 && v190 != (unsigned __int8 *)-4096 && v190)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      v395 = (char *)&unk_1E814DA10;
      v399 = v391;
      v208 = sub_1C52E2ED8((uint64_t)v391, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        v209 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *v397 = *v397 & 7 | v209;
        }
        else
        {
          v210 = v398;
          v211 = ***v398;
          v212 = (unint64_t)v211[303];
          if (v212 <= v209)
          {
            v213 = v211[305].u32[0];
            if (v212 + 16 * v213 > v209)
            {
              v214 = v213 - 1;
              LODWORD(v215) = v214 & ((v398 >> 4) ^ (v398 >> 9));
              v216 = (int32x2_t *****)(v212 + 16 * v215);
              v217 = *v216;
              if (v398 == *v216)
              {
LABEL_242:
                *v216 = (int32x2_t ****)-8192;
                v211[304] = vadd_s32(v211[304], (int32x2_t)0x1FFFFFFFFLL);
                v210 = v398;
              }
              else
              {
                v218 = 1;
                while (v217 != (int32x2_t ****)-4096)
                {
                  v219 = v215 + v218++;
                  v215 = v219 & v214;
                  v217 = *(int32x2_t *****)(v212 + 16 * v215);
                  if (v398 == v217)
                  {
                    v216 = (int32x2_t *****)(v212 + 16 * v215);
                    goto LABEL_242;
                  }
                }
              }
              *((_BYTE *)v210 + 17) &= ~1u;
            }
          }
        }
      }
      v220 = v208[7];
      if (v220 != v207)
      {
        if (v220 && v220 != -8192 && v220 != -4096)
        {
          v302 = v208[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v302 = v208[6];
          v303 = (unint64_t *)v208[6];
          if (v303)
          {
            *v303 = *v303 & 7 | v302;
          }
          else
          {
            v304 = v208[7];
            v305 = ***(int32x2_t ****)v304;
            v306 = (unint64_t)v305[303];
            if (v306 <= v302)
            {
              v307 = v305[305].u32[0];
              if (v306 + 16 * v307 > v302)
              {
                v308 = v307 - 1;
                LODWORD(v309) = v308 & ((v304 >> 4) ^ (v304 >> 9));
                v310 = (uint64_t *)(v306 + 16 * v309);
                v311 = *v310;
                if (v304 == *v310)
                {
LABEL_372:
                  *v310 = -8192;
                  v305[304] = vadd_s32(v305[304], (int32x2_t)0x1FFFFFFFFLL);
                  v304 = v208[7];
                }
                else
                {
                  v312 = 1;
                  while (v311 != -4096)
                  {
                    v313 = v309 + v312++;
                    v309 = v313 & v308;
                    v311 = *(_QWORD *)(v306 + 16 * v309);
                    if (v304 == v311)
                    {
                      v310 = (uint64_t *)(v306 + 16 * v309);
                      goto LABEL_372;
                    }
                  }
                }
                *(_BYTE *)(v304 + 17) &= ~1u;
              }
            }
          }
        }
        v208[7] = v207;
        if (v207 != -8192 && v207 != -4096 && v207)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v208 + 5));
      }
      v396 = 2;
      v397 = 0;
      v398 = (int32x2_t ****)v190;
      if (v190 != (unsigned __int8 *)-8192 && v190 != (unsigned __int8 *)-4096 && v190)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      v395 = (char *)&unk_1E814DA10;
      v399 = v391;
      v221 = sub_1C52E2ED8((uint64_t)v391, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        v222 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *v397 = *v397 & 7 | v222;
        }
        else
        {
          v223 = v398;
          v224 = ***v398;
          v225 = (unint64_t)v224[303];
          if (v225 <= v222)
          {
            v226 = v224[305].u32[0];
            if (v225 + 16 * v226 > v222)
            {
              v227 = v226 - 1;
              LODWORD(v228) = v227 & ((v398 >> 4) ^ (v398 >> 9));
              v229 = (int32x2_t *****)(v225 + 16 * v228);
              v230 = *v229;
              if (v398 == *v229)
              {
LABEL_266:
                *v229 = (int32x2_t ****)-8192;
                v224[304] = vadd_s32(v224[304], (int32x2_t)0x1FFFFFFFFLL);
                v223 = v398;
              }
              else
              {
                v231 = 1;
                while (v230 != (int32x2_t ****)-4096)
                {
                  v232 = v228 + v231++;
                  v228 = v232 & v227;
                  v230 = *(int32x2_t *****)(v225 + 16 * v228);
                  if (v398 == v230)
                  {
                    v229 = (int32x2_t *****)(v225 + 16 * v228);
                    goto LABEL_266;
                  }
                }
              }
              *((_BYTE *)v223 + 17) &= ~1u;
            }
          }
        }
      }
      v233 = (uint64_t ***)v221[7];
      if ((*((_BYTE *)v197 + 23) & 0x10) != 0)
      {
        v234 = ***(_QWORD ***)v197;
        v235 = *(_QWORD *)(v234 + 152);
        v236 = *(unsigned int *)(v234 + 168);
        if (!(_DWORD)v236)
          goto LABEL_276;
        LODWORD(v237) = (v236 - 1) & ((v197 >> 4) ^ (v197 >> 9));
        v238 = (llvm::Instruction **)(v235 + 16 * v237);
        v239 = *v238;
        if (*v238 != v197)
        {
          v240 = 1;
          while (v239 != (llvm::Instruction *)-4096)
          {
            v241 = v237 + v240++;
            v237 = v241 & (v236 - 1);
            v239 = *(llvm::Instruction **)(v235 + 16 * v237);
            if (v239 == v197)
            {
              v238 = (llvm::Instruction **)(v235 + 16 * v237);
              goto LABEL_277;
            }
          }
LABEL_276:
          v238 = (llvm::Instruction **)(v235 + 16 * v236);
        }
LABEL_277:
        v242 = v238[1];
        v245 = *(_QWORD *)v242;
        v244 = (char *)v242 + 16;
        v243 = v245;
        goto LABEL_278;
      }
      v243 = 0;
      v244 = &byte_1C871356D;
LABEL_278:
      LOWORD(v399) = 261;
      v395 = v244;
      v396 = v243;
      llvm::Value::setName(v233, (uint64_t)&v395);
      v396 = 2;
      v397 = 0;
      v398 = (int32x2_t ****)v190;
      if (v190 != (unsigned __int8 *)-8192 && v190 != (unsigned __int8 *)-4096 && v190)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      v395 = (char *)&unk_1E814DA10;
      v399 = v391;
      v246 = sub_1C52E2ED8((uint64_t)v391, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        v247 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *v397 = *v397 & 7 | v247;
        }
        else
        {
          v248 = v398;
          v249 = ***v398;
          v250 = (unint64_t)v249[303];
          if (v250 <= v247)
          {
            v251 = v249[305].u32[0];
            if (v250 + 16 * v251 > v247)
            {
              v252 = v251 - 1;
              LODWORD(v253) = v252 & ((v398 >> 4) ^ (v398 >> 9));
              v254 = (int32x2_t *****)(v250 + 16 * v253);
              v255 = *v254;
              if (v398 == *v254)
              {
LABEL_293:
                *v254 = (int32x2_t ****)-8192;
                v249[304] = vadd_s32(v249[304], (int32x2_t)0x1FFFFFFFFLL);
                v248 = v398;
              }
              else
              {
                v256 = 1;
                while (v255 != (int32x2_t ****)-4096)
                {
                  v257 = v253 + v256++;
                  v253 = v257 & v252;
                  v255 = *(int32x2_t *****)(v250 + 16 * v253);
                  if (v398 == v255)
                  {
                    v254 = (int32x2_t *****)(v250 + 16 * v253);
                    goto LABEL_293;
                  }
                }
              }
              *((_BYTE *)v248 + 17) &= ~1u;
            }
          }
        }
      }
      v258 = v246[7];
      v259 = v187;
      if (*(_QWORD *)(v388 + 48) != v187)
      {
        v259 = *(_QWORD *)(v388 + 48);
        while (1)
        {
          v260 = v259 - 24;
          if (!v259)
            v260 = 0;
          if (*(_BYTE *)(v260 + 16) != 83)
            break;
          v259 = *(_QWORD *)(v259 + 8);
          if (v259 == v187)
          {
            v259 = v187;
            goto LABEL_308;
          }
        }
        v261 = *(unsigned __int8 *)(v259 - 8) - 38;
        v262 = v261 > 0x38;
        v263 = (1 << v261) & 0x100060000000001;
        if (!v262 && v263 != 0)
          v259 = *(_QWORD *)(v259 + 8);
      }
LABEL_308:
      if (v259)
        v265 = v259 - 24;
      else
        v265 = 0;
      v266 = *(_QWORD *)(v265 + 40);
      *(_QWORD *)(v258 + 40) = v266;
      *(_WORD *)(v266 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v258 + 23) & 0x10) != 0)
      {
        v300 = *(_QWORD *)(v266 + 56);
        if (v300)
        {
          v301 = *(llvm::ValueSymbolTable **)(v300 + 104);
          if (v301)
            llvm::ValueSymbolTable::reinsertValue(v301, (llvm::Value *)v258);
        }
      }
      v268 = *(_QWORD *)(v265 + 24);
      v267 = (_QWORD *)(v265 + 24);
      *(_QWORD *)(v258 + 24) = v268;
      *(_QWORD *)(v258 + 32) = v267;
      v269 = v258 + 24;
      *(_QWORD *)(v268 + 8) = v269;
      *v267 = v269;
      v396 = 2;
      v397 = 0;
      v398 = (int32x2_t ****)v190;
      if (v190 != (unsigned __int8 *)-8192 && v190 != (unsigned __int8 *)-4096 && v190)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      v395 = (char *)&unk_1E814DA10;
      v399 = v391;
      v270 = sub_1C52E2ED8((uint64_t)v391, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        v271 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *v397 = *v397 & 7 | v271;
        }
        else
        {
          v272 = v398;
          v273 = ***v398;
          v274 = (unint64_t)v273[303];
          if (v274 <= v271)
          {
            v275 = v273[305].u32[0];
            if (v274 + 16 * v275 > v271)
            {
              v276 = v275 - 1;
              LODWORD(v277) = v276 & ((v398 >> 4) ^ (v398 >> 9));
              v278 = (int32x2_t *****)(v274 + 16 * v277);
              v279 = *v278;
              if (v398 == *v278)
              {
LABEL_327:
                *v278 = (int32x2_t ****)-8192;
                v273[304] = vadd_s32(v273[304], (int32x2_t)0x1FFFFFFFFLL);
                v272 = v398;
              }
              else
              {
                v280 = 1;
                while (v279 != (int32x2_t ****)-4096)
                {
                  v281 = v277 + v280++;
                  v277 = v281 & v276;
                  v279 = *(int32x2_t *****)(v274 + 16 * v277);
                  if (v398 == v279)
                  {
                    v278 = (int32x2_t *****)(v274 + 16 * v277);
                    goto LABEL_327;
                  }
                }
              }
              *((_BYTE *)v272 + 17) &= ~1u;
            }
          }
        }
      }
      llvm::Instruction::dropUnknownNonDebugMetadata((_QWORD **)v270[7], 0, 0);
      v396 = 2;
      v397 = 0;
      v398 = (int32x2_t ****)v190;
      if (v190 != (unsigned __int8 *)-8192 && v190 != (unsigned __int8 *)-4096 && v190)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      v395 = (char *)&unk_1E814DA10;
      v399 = v391;
      v282 = sub_1C52E2ED8((uint64_t)v391, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        v283 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *v397 = *v397 & 7 | v283;
        }
        else
        {
          v284 = v398;
          v285 = ***v398;
          v286 = (unint64_t)v285[303];
          if (v286 <= v283)
          {
            v287 = v285[305].u32[0];
            if (v286 + 16 * v287 > v283)
            {
              v288 = v287 - 1;
              LODWORD(v289) = v288 & ((v398 >> 4) ^ (v398 >> 9));
              v290 = (int32x2_t *****)(v286 + 16 * v289);
              v291 = *v290;
              if (v398 == *v290)
              {
LABEL_345:
                *v290 = (int32x2_t ****)-8192;
                v285[304] = vadd_s32(v285[304], (int32x2_t)0x1FFFFFFFFLL);
                v284 = v398;
              }
              else
              {
                v292 = 1;
                while (v291 != (int32x2_t ****)-4096)
                {
                  v293 = v289 + v292++;
                  v289 = v293 & v288;
                  v291 = *(int32x2_t *****)(v286 + 16 * v289);
                  if (v398 == v291)
                  {
                    v290 = (int32x2_t *****)(v286 + 16 * v289);
                    goto LABEL_345;
                  }
                }
              }
              *((_BYTE *)v284 + 17) &= ~1u;
            }
          }
        }
      }
      v294 = v282[7];
      v390 = 0;
      v295 = (unsigned __int8 **)(v294 + 48);
      if (&v390 != (unsigned __int8 **)(v294 + 48))
      {
        if (*v295)
        {
          llvm::MetadataTracking::untrack((uint64_t)v295, *v295);
          v299 = v390;
          *v295 = v390;
          if (v299)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v390, v299, (uint64_t)v295);
            v390 = 0;
          }
        }
        else
        {
          *v295 = 0;
        }
      }
      v296 = *((_DWORD *)v197 + 5);
      if ((v296 & 0x40000000) != 0)
      {
        v298 = (char *)*((_QWORD *)v197 - 1);
        v297 = v296 & 0x7FFFFFF;
      }
      else
      {
        v297 = v296 & 0x7FFFFFF;
        v298 = (char *)v197 - 32 * v297;
      }
      sub_1C4DA9878((unsigned int *)&v400, (uint64_t)v400 + 8 * v401, v298, &v298[32 * v297]);
      v189 = v401;
    }
    while (v189);
    if (v400 != v403)
      free(v400);
    if (v407[0] != v408)
      free(v407[0]);
    v182 = v386 + 48;
    v183 = v171;
  }
  while (v386 + 48 != v384);
  v169 = (_QWORD *)(v171 + 40);
  v181 = v410;
  v418 = (_QWORD **)v171;
  v419 = (_QWORD **)(v171 + 40);
  if (v410 >= HIDWORD(v410))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v409, (uint64_t)v411, v410 + 1, 8);
    v181 = v410;
  }
  v179 = v382;
LABEL_385:
  *((_QWORD *)v409 + v181) = v171;
  LODWORD(v410) = v410 + 1;
  v314 = *v420;
  v315 = *(llvm::Value **)(*v420 + 1560);
  if (!v315)
  {
    v378 = *(llvm::ConstantInt **)(v314 + 1888);
    v379 = *(_DWORD *)(v314 + 1896);
    LODWORD(v406) = v379 >> 8;
    if (v379 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v405, 1, 0);
    }
    else
    {
      if (v379 <= 0xFF)
        v380 = 0;
      else
        v380 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v379);
      v405 = (char *)(v380 & 1);
    }
    v315 = llvm::ConstantInt::get(v378, (llvm::LLVMContext *)&v405, v180);
    if (v406 >= 0x41 && v405)
      MEMORY[0x1CAA32F9C](v405, 0x1000C8000313F17);
    *(_QWORD *)(v314 + 1560) = v315;
  }
  sub_1C538D7E4((uint64_t *)&v413, v315);
  llvm::Instruction::clone(v179);
  v317 = v316;
  if ((*((_BYTE *)v179 + 23) & 0x10) != 0)
  {
    v318 = ***(_QWORD ***)v179;
    v319 = *(_QWORD *)(v318 + 152);
    v320 = *(unsigned int *)(v318 + 168);
    if (!(_DWORD)v320)
      goto LABEL_393;
    LODWORD(v321) = (v320 - 1) & ((v179 >> 4) ^ (v179 >> 9));
    v322 = (llvm::Instruction **)(v319 + 16 * v321);
    v323 = *v322;
    if (*v322 != v179)
    {
      v324 = 1;
      while (v323 != (llvm::Instruction *)-4096)
      {
        v325 = v321 + v324++;
        v321 = v325 & (v320 - 1);
        v323 = *(llvm::Instruction **)(v319 + 16 * v321);
        if (v323 == v179)
        {
          v322 = (llvm::Instruction **)(v319 + 16 * v321);
          goto LABEL_394;
        }
      }
LABEL_393:
      v322 = (llvm::Instruction **)(v319 + 16 * v320);
    }
LABEL_394:
    v326 = v322[1];
    v329 = *(_QWORD *)v326;
    v327 = (char *)v326 + 16;
    v328 = v329;
  }
  else
  {
    v328 = 0;
    v327 = &byte_1C871356D;
  }
  v408[0] = 261;
  v405 = v327;
  v406 = v328;
  llvm::Value::setName(v316, (uint64_t)&v405);
  v330 = (_QWORD *)*v169;
  if ((_QWORD *)*v169 == v169)
  {
    v332 = 0;
  }
  else
  {
    if (v330)
      v331 = v330 - 3;
    else
      v331 = 0;
    if (*((unsigned __int8 *)v331 + 16) - 29 >= 0xB)
      v332 = 0;
    else
      v332 = v331;
  }
  v333 = v332[5];
  v317[5] = (uint64_t **)v333;
  *(_WORD *)(v333 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v317 + 23) & 0x10) != 0)
  {
    v375 = *(_QWORD *)(v333 + 56);
    if (v375)
    {
      v376 = *(llvm::ValueSymbolTable **)(v375 + 104);
      if (v376)
        llvm::ValueSymbolTable::reinsertValue(v376, (llvm::Value *)v317);
    }
  }
  v335 = v332[3];
  v334 = (uint64_t **)(v332 + 3);
  v317[4] = v334;
  v317[3] = (uint64_t **)v335;
  *(_QWORD *)(v335 + 8) = v317 + 3;
  *v334 = (uint64_t *)(v317 + 3);
  llvm::Instruction::dropUnknownNonDebugMetadata(v317, 0, 0);
  v389 = 0;
  v336 = (unsigned __int8 **)(v317 + 6);
  if (&v389 != (unsigned __int8 **)(v317 + 6))
  {
    if (*v336)
    {
      llvm::MetadataTracking::untrack((uint64_t)(v317 + 6), *v336);
      v374 = v389;
      *v336 = v389;
      if (v374)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v389, v374, (uint64_t)(v317 + 6));
        v389 = 0;
      }
    }
    else
    {
      *v336 = 0;
    }
  }
  v337 = (_QWORD *)*v169;
  if ((_QWORD *)*v169 == v169)
  {
    v338 = 0;
  }
  else
  {
    if (v337)
      v338 = v337 - 3;
    else
      v338 = 0;
    if (*((unsigned __int8 *)v338 + 16) - 29 >= 0xB)
      v338 = 0;
  }
  v339 = *((_DWORD *)v338 + 5);
  if ((v339 & 0x40000000) != 0)
    v340 = (uint64_t ****)*(v338 - 1);
  else
    v340 = (uint64_t ****)&v338[-4 * (v339 & 0x7FFFFFF)];
  if (*v340)
  {
    *v340[2] = (uint64_t **)v340[1];
    v341 = v340[1];
    if (v341)
      v341[2] = (uint64_t **)v340[2];
  }
  *v340 = v317;
  v344 = v317[1];
  v343 = v317 + 1;
  v342 = v344;
  v340[1] = (uint64_t ***)v344;
  if (v344)
    v342[2] = (uint64_t *)(v340 + 1);
  v340[2] = v343;
  *v343 = (uint64_t **)v340;
  llvm::remapInstructionsInBlocks((uint64_t *)&v409, (uint64_t)v391);
  if (v409 != v411)
    free(v409);
  if (v413 != &v415)
    free(v413);
  if (v431 != v433)
    free(v431);
  if (v434 != (_QWORD *)v436)
    free(v434);
  if (v437 != v439)
    free(v437);
  if (v394)
  {
    sub_1C4E43068((uint64_t)v393);
    MEMORY[0x1CAA32FB4](v393[0], 8);
    v394 = 0;
  }
  v345 = (_QWORD *)v391[0];
  if (v392)
  {
    v346 = v391[0] + ((unint64_t)v392 << 6);
    do
    {
      v347 = v345[3];
      if ((v347 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v348 = v345[7];
        if (v348)
        {
          if (v348 != -8192 && v348 != -4096)
          {
            v349 = v345[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v349 = v345[6];
            v350 = (unint64_t *)v345[6];
            if (v350)
            {
              *v350 = *v350 & 7 | v349;
            }
            else
            {
              v351 = v345[7];
              v352 = ***(int32x2_t ****)v351;
              v353 = (unint64_t)v352[303];
              if (v353 <= v349)
              {
                v354 = v352[305].u32[0];
                if (v353 + 16 * v354 > v349)
                {
                  v355 = v354 - 1;
                  LODWORD(v356) = v355 & ((v351 >> 4) ^ (v351 >> 9));
                  v357 = (uint64_t *)(v353 + 16 * v356);
                  v358 = *v357;
                  if (v351 == *v357)
                  {
LABEL_448:
                    *v357 = -8192;
                    v352[304] = vadd_s32(v352[304], (int32x2_t)0x1FFFFFFFFLL);
                    v351 = v345[7];
                  }
                  else
                  {
                    v359 = 1;
                    while (v358 != -4096)
                    {
                      v360 = v356 + v359++;
                      v356 = v360 & v355;
                      v358 = *(_QWORD *)(v353 + 16 * v356);
                      if (v351 == v358)
                      {
                        v357 = (uint64_t *)(v353 + 16 * v356);
                        goto LABEL_448;
                      }
                    }
                  }
                  *(_BYTE *)(v351 + 17) &= ~1u;
                }
              }
            }
            v347 = v345[3];
          }
        }
      }
      if (v347 != -4096 && v347 != -8192 && v347 != 0)
      {
        v362 = v345[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v362 = v345[2];
        v363 = (unint64_t *)v345[2];
        if (v363)
        {
          *v363 = *v363 & 7 | v362;
        }
        else
        {
          v364 = v345[3];
          v365 = ***(int32x2_t ****)v364;
          v366 = (unint64_t)v365[303];
          if (v366 <= v362)
          {
            v367 = v365[305].u32[0];
            if (v366 + 16 * v367 > v362)
            {
              v368 = v367 - 1;
              LODWORD(v369) = v368 & ((v364 >> 4) ^ (v364 >> 9));
              v370 = (uint64_t *)(v366 + 16 * v369);
              v371 = *v370;
              if (v364 == *v370)
              {
LABEL_467:
                *v370 = -8192;
                v365[304] = vadd_s32(v365[304], (int32x2_t)0x1FFFFFFFFLL);
                v364 = v345[3];
              }
              else
              {
                v372 = 1;
                while (v371 != -4096)
                {
                  v373 = v369 + v372++;
                  v369 = v373 & v368;
                  v371 = *(_QWORD *)(v366 + 16 * v369);
                  if (v364 == v371)
                  {
                    v370 = (uint64_t *)(v366 + 16 * v369);
                    goto LABEL_467;
                  }
                }
              }
              *(_BYTE *)(v364 + 17) &= ~1u;
            }
          }
        }
      }
      v345 += 8;
    }
    while (v345 != (_QWORD *)v346);
    v345 = (_QWORD *)v391[0];
  }
  return MEMORY[0x1CAA32FB4](v345, 8);
}

BOOL sub_1C5ADEA84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 24);
  return *(_BYTE *)(v2 + 16) != 84
      || (v3 = *(_QWORD *)(v2 - 32)) == 0
      || *(_BYTE *)(v3 + 16)
      || *(_QWORD *)(v3 + 24) != *(_QWORD *)(v2 + 72)
      || (*(_BYTE *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 7;
}

void sub_1C5ADEAD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return;
  v5 = 0;
  v6 = *a1;
  v7 = 48 * v2;
  do
  {
    v8 = a2 + v5;
    v9 = v6 + v5;
    v10 = *(_QWORD *)(v6 + v5);
    *(_BYTE *)(v8 + 8) = *(_BYTE *)(v6 + v5 + 8);
    *(_QWORD *)v8 = v10;
    v11 = (void *)(a2 + v5 + 32);
    *(_QWORD *)(a2 + v5 + 16) = v11;
    *(_QWORD *)(v8 + 24) = 0x200000000;
    v12 = *(unsigned int *)(v6 + v5 + 24);
    if ((_DWORD)v12)
      v13 = v9 == v8;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = *(const void **)(v9 + 16);
      if ((const void *)(v9 + 32) != v14)
      {
        *(_QWORD *)(v8 + 16) = v14;
        v16 = *(_DWORD *)(v6 + v5 + 28);
        *(_DWORD *)(v8 + 24) = v12;
        *(_DWORD *)(v8 + 28) = v16;
        *(_QWORD *)(v9 + 16) = v9 + 32;
        *(_DWORD *)(v6 + v5 + 28) = 0;
        goto LABEL_12;
      }
      if (v12 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + v5 + 16, a2 + v5 + 32, v12, 8);
        v15 = *(unsigned int *)(v9 + 24);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v14 = *(const void **)(v9 + 16);
        v11 = *(void **)(a2 + v5 + 16);
      }
      else
      {
        v15 = *(unsigned int *)(v6 + v5 + 24);
      }
      memcpy(v11, v14, 8 * v15);
LABEL_11:
      *(_DWORD *)(v8 + 24) = v12;
LABEL_12:
      *(_DWORD *)(v9 + 24) = 0;
    }
    v5 += 48;
  }
  while (v7 != v5);
  v17 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = 48 * v17;
    do
    {
      v20 = *(void **)(v18 + v19 - 32);
      if ((void *)(v18 + v19 - 16) != v20)
        free(v20);
      v19 -= 48;
    }
    while (v19);
  }
}

uint64_t sub_1C5ADEC30()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AD73C8(v0);
}

void sub_1C5ADEC5C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5ADEC80(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C5ADED24(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  (*(void (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::ScalarEvolutionWrapperPass::ID);
  v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  return sub_1C5AD3498(a2, v6 + 32, v9 + 32, v14);
}

uint64_t sub_1C5ADEE4C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  dword_1ED81BACC = sub_1C4D9A2C4("conds-eliminated", 0x10uLL, "Controls which conditions are eliminated", 0x28uLL);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Dump IR to reproduce successful transformations.";
  v1.n128_u64[1] = 48;
  sub_1C498EDF8((llvm::cl::Option *)&qword_1ED81BAD0[1], "constraint-elimination-dump-repros", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81BAD0[1], &dword_1C475E000);
}

uint64_t sub_1C5ADEEEC(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLazyValueInfoWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Value Propagation";
  *(_QWORD *)(v3 + 8) = 17;
  *(_QWORD *)(v3 + 16) = "correlated-propagation";
  *(_QWORD *)(v3 + 24) = 22;
  *(_QWORD *)(v3 + 32) = &unk_1ED81BC58;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5AE29CC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5ADEF88(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81BC58;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194188;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81BC60);
  if (v3 != -1)
  {
    v7[0] = sub_1C5ADEEEC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81BC60, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t getDomain(llvm::ConstantInt **a1, llvm::LazyValueInfo *a2, llvm::Instruction *a3)
{
  llvm::Value **v6;
  llvm::Value **v7;

  v6 = llvm::ConstantInt::get(*a1, 0, 0);
  if (llvm::LazyValueInfo::getPredicateAt(a2, 39, (llvm::Value *)a1, (llvm::Constant *)v6, a3, 1) == 1)
    return 0;
  v7 = llvm::ConstantInt::get(*a1, 0, 0);
  if (llvm::LazyValueInfo::getPredicateAt(a2, 41, (llvm::Value *)a1, (llvm::Constant *)v7, a3, 1) == 1)
    return 1;
  else
    return 2;
}

_QWORD *llvm::CorrelatedValuePropagationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::LazyValueInfo *v6;
  llvm::DominatorTree *v7;
  char v8;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE v14[16];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];

  v6 = (llvm::LazyValueInfo *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LazyValueAnalysis::Key, a1)+ 8);
  v7 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1)+ 8);
  llvm::getBestSimplifyQuery<llvm::Function>(a2, a1, (uint64_t)&v10);
  v8 = sub_1C5ADF270(a1, v6, v7, (uint64_t)&v10);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v8 & 1) != 0)
  {
    sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::LazyValueAnalysis::Key);
  }
  else
  {
    v10 = v14;
    v11 = v14;
    v12 = 2;
    v13 = 0;
    v15 = v19;
    v16 = v19;
    v17 = 2;
    v18 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v10, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (&v10 != (_BYTE **)a3)
    {
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 2, (double *)&v10);
      llvm::SmallPtrSetImplBase::MoveFrom(a3 + 48, 2, (double *)&v15);
    }
    if (v16 != v15)
      free(v16);
    if (v11 != v10)
      free(v11);
  }
  return sub_1C4DD7214(a3, (uint64_t)&llvm::LazyValueAnalysis::Key);
}

uint64_t sub_1C5ADF270(uint64_t a1, llvm::LazyValueInfo *a2, llvm::DominatorTree *a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  const void *v13;
  void *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  llvm::Type *v17;
  llvm::DSOLocalEquivalent **v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  llvm::Instruction *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  BOOL v34;
  int PredicateAt;
  const llvm::APInt *v36;
  uint64_t v37;
  llvm::ConstantInt *v38;
  unint64_t v39;
  unint64_t v40;
  llvm::Value *v41;
  int v42;
  _QWORD **v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  llvm::Value *Constant;
  int v47;
  int v48;
  uint64_t v49;
  void ***v50;
  uint64_t v51;
  int v52;
  llvm::Value **v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::APInt *v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  llvm::Value *v66;
  llvm::Value **v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Instruction **v73;
  llvm::Instruction *v74;
  int v75;
  int v76;
  llvm::ValueHandleBase *v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  llvm::Value *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::BasicBlock *v88;
  int v89;
  _QWORD ***v90;
  llvm::ConstantInt ***v91;
  llvm::BasicBlock *v92;
  void *ConstantOnEdge;
  llvm::ConstantInt ***v94;
  llvm::Constant *v95;
  llvm::Constant *v96;
  uint64_t *v97;
  unsigned __int8 *v98;
  BOOL v99;
  unsigned __int8 *v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  const char **v105;
  int v106;
  uint64_t v107;
  const char **v108;
  uint64_t v109;
  const char **v110;
  const char *v111;
  const char **v112;
  int v113;
  uint64_t v114;
  llvm::ConstantInt **v115;
  llvm::Value **v116;
  uint64_t **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  llvm::Instruction **v122;
  llvm::Instruction *v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  llvm::Type *v129;
  llvm::Type *v130;
  unsigned int PrimitiveSizeInBits;
  const llvm::APInt *v132;
  unsigned int v133;
  unsigned int v134;
  void **v135;
  llvm::Value **v136;
  llvm::Type *v137;
  _QWORD **v138;
  _QWORD *v139;
  llvm::Value **NullValue;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Instruction **v145;
  llvm::Instruction *v146;
  int v147;
  int v148;
  char v149;
  unsigned int v150;
  llvm::UndefValue *v151;
  int v153;
  int EquivalentPredWithFlippedSignedness;
  char v155;
  uint64_t v156;
  _QWORD **v157;
  _QWORD *v158;
  llvm::ValueHandleBase *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  int Domain;
  uint64_t v167;
  uint64_t v168;
  void ***v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t **v175;
  uint64_t *v176;
  int v177;
  int v178;
  uint64_t *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  llvm::Value *Neg;
  unsigned __int8 *v184;
  unsigned __int8 **v185;
  unsigned __int8 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  llvm::Instruction **v192;
  llvm::Instruction *v193;
  int v194;
  int v195;
  llvm::ValueAsMetadata *v196;
  llvm::Value *v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  int v203;
  uint64_t v204;
  _QWORD ***v205;
  unsigned __int8 *v206;
  BOOL v207;
  unsigned __int8 **v208;
  int v209;
  uint64_t v210;
  void ***v211;
  BOOL v212;
  unsigned int v213;
  llvm::Value **v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  void **v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  void ***v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t **v228;
  uint64_t *v229;
  int v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  llvm::Value *v236;
  unsigned __int8 *v237;
  unsigned __int8 **v238;
  unsigned __int8 *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  llvm::Instruction **v245;
  llvm::Instruction *v246;
  int v247;
  int v248;
  const llvm::APInt *v249;
  uint64_t *v250;
  uint64_t v251;
  llvm::ValueHandleBase *v252;
  _QWORD ***v253;
  llvm::ValueHandleBase **v254;
  _QWORD **v255;
  _QWORD **v256;
  llvm::ValueHandleBase ***v257;
  _QWORD **v258;
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD ***v263;
  uint64_t v264;
  int v265;
  int v266;
  unint64_t v267;
  uint64_t v268;
  unsigned __int8 *v269;
  llvm::ConstantPointerNull *v270;
  BOOL v271;
  llvm::Constant *v272;
  uint64_t v273;
  uint64_t v274;
  const char **v275;
  uint64_t *v276;
  unint64_t v277;
  llvm::Instruction *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  llvm::Value *v282;
  _QWORD **v283;
  unsigned __int8 **v284;
  unsigned __int8 *v285;
  llvm::Value *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  llvm::Value **v291;
  llvm::Value *v292;
  int v293;
  int v294;
  llvm::BasicBlock *v295;
  void **v296;
  void **v297;
  unint64_t v298;
  _BOOL4 v299;
  int v300;
  uint64_t v301;
  llvm::Value **v302;
  unint64_t v303;
  unsigned int v304;
  uint64_t v305;
  void ***v306;
  void ***v307;
  unsigned int MinSignedBits;
  void **v309;
  unsigned int v310;
  unint64_t v311;
  void *v312;
  unsigned int v313;
  void **p_src;
  _BOOL4 v315;
  unsigned int v316;
  llvm::Instruction *v317;
  llvm::Value **v318;
  void **v319;
  llvm::Value **v320;
  unsigned __int8 *v321;
  _QWORD **v322;
  _QWORD *v323;
  unsigned int v324;
  BOOL v325;
  llvm::Instruction *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  void **ZExtOrBitCast;
  _QWORD **v331;
  unsigned __int8 **v332;
  unsigned __int8 *v333;
  _QWORD **v334;
  _QWORD *v335;
  int v336;
  uint64_t v337;
  _QWORD **v338;
  _QWORD *v339;
  int v340;
  llvm::Instruction *v341;
  void *v342;
  _QWORD **v343;
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  int v347;
  _QWORD *v348;
  _QWORD *v349;
  llvm::Instruction *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD **v356;
  unsigned __int8 **v357;
  unsigned __int8 *v358;
  _QWORD **v359;
  _QWORD *v360;
  void **v361;
  llvm::Instruction *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  _QWORD **v366;
  unsigned __int8 **v367;
  unsigned __int8 *v368;
  uint64_t v369;
  llvm::Value *v370;
  int v371;
  int v372;
  llvm::Value *v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  _QWORD **v377;
  _QWORD *v378;
  unsigned __int8 *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  llvm::Instruction **v384;
  llvm::Instruction *v385;
  int v386;
  int v387;
  llvm::Instruction *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  unsigned __int8 *v392;
  unsigned __int8 *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  llvm::Instruction **v398;
  llvm::Instruction *v399;
  int v400;
  int v401;
  llvm::Instruction *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  unsigned __int8 *v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  llvm::Instruction **v412;
  llvm::Instruction *v413;
  int v414;
  int v415;
  llvm::Instruction *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  unsigned __int8 *v420;
  uint64_t **v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  llvm::Instruction **v426;
  llvm::Instruction *v427;
  int v428;
  int v429;
  llvm::Instruction *v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  unsigned __int8 *v434;
  _QWORD **v435;
  _QWORD *v436;
  uint64_t i;
  void ***v438;
  uint64_t v439;
  void **v440;
  int v441;
  _QWORD ***v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  llvm::Instruction **v449;
  llvm::Instruction *v450;
  int v451;
  int v452;
  llvm::Instruction *v453;
  llvm::Value **v454;
  void **v455;
  llvm::Value **v456;
  unsigned __int8 *v457;
  llvm::Type *v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  unsigned int v461;
  llvm::ConstantAggregateZero *v462;
  llvm::Type *v463;
  const llvm::APInt *v464;
  llvm::UndefValue *v465;
  llvm::Value *v466;
  _QWORD **v467;
  _QWORD *v468;
  unsigned int v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  llvm::Instruction **v475;
  llvm::Instruction *v476;
  int v477;
  int v478;
  llvm::Instruction *v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  _QWORD ***v483;
  _QWORD *v484;
  uint64_t v485;
  llvm::Value *v486;
  _QWORD **v487;
  unsigned __int8 **v488;
  unsigned __int8 *v489;
  unsigned int v490;
  llvm::Value *v491;
  _QWORD **v492;
  _QWORD *v493;
  _DWORD *v494;
  _DWORD *v495;
  int v496;
  llvm::ConstantInt *v497;
  unsigned int v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  _QWORD **v504;
  _QWORD *v505;
  uint64_t v506;
  _QWORD *v507;
  _QWORD *v508;
  _QWORD *v509;
  int v510;
  int v511;
  llvm::Value **v512;
  uint64_t v513;
  llvm::Value *v514;
  llvm::Value *v515;
  llvm::Value *v516;
  llvm::BasicBlock *v517;
  _QWORD *v518;
  _QWORD *v519;
  int v520;
  unsigned int j;
  uint64_t v522;
  void **v523;
  int v524;
  uint64_t v525;
  char v526;
  uint64_t v527;
  unsigned int v528;
  int v529;
  void **v530;
  void ***v531;
  int v532;
  int v533;
  void **v534;
  uint64_t v535;
  llvm::BasicBlock *v536;
  uint64_t v537;
  unsigned int v538;
  llvm::Value **v539;
  uint64_t v540;
  int v541;
  int v542;
  void **v543;
  void **v544;
  void ***v545;
  void **v546;
  unsigned int v547;
  unsigned __int8 *v549;
  int v551;
  const llvm::APInt *v552;
  uint64_t *v553;
  uint64_t v554;
  llvm::ConstantInt *v555;
  unsigned int v556;
  char v557;
  _QWORD *v558;
  int v559;
  uint64_t *v560;
  uint64_t v561;
  llvm::ConstantInt *v562;
  unsigned int v564;
  char v567;
  int v568;
  unsigned int v569;
  int v570;
  int v571;
  _QWORD *v572;
  _BYTE *v573;
  _BYTE v574[64];
  char *v575;
  char *v576;
  uint64_t v577;
  _BYTE *v578;
  _BYTE *v579;
  unsigned int v580;
  unsigned int v581;
  int v582;
  _BYTE v583[64];
  void *__p;
  char *v585;
  uint64_t v586;
  void *v587;
  void *v588;
  unsigned int v589;
  unsigned int v590;
  int v591;
  void *v592;
  _BYTE *v593;
  void *v594;
  void *v595;
  unsigned int v596;
  unsigned int v597;
  void *v598;
  _BYTE *v599;
  unsigned __int8 *v600;
  uint64_t v601;
  const char *v602;
  unsigned int v603;
  __int16 v604;
  llvm::BasicBlock *v605;
  int v606;
  void **Successor;
  llvm::Value **False;
  uint64_t v609;
  _DWORD v610[2];
  _WORD v611[4];
  _BYTE v612[16];
  _BYTE v613[8];
  char v614;
  _BYTE v615[8];
  void *__src;
  uint64_t v617;
  void *v618;
  uint64_t v619;
  const char *v620;
  unsigned int v621;
  __int16 v622;
  uint64_t v623;
  uint64_t v624;
  llvm::DominatorTree *v625;
  uint64_t v626;
  char v627;
  _BYTE *v628;
  void *v629;
  uint64_t v630;
  int v631;
  _BYTE v632[64];
  _BYTE v633[24];
  __int16 v634;
  uint64_t v635;

  v635 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    v6 = (void *)(v5 - 24);
  else
    v6 = 0;
  v618 = v6;
  sub_1C586DB8C((uint64_t *)&v618, (uint64_t)&v587);
  v7 = v583;
  v578 = v583;
  v8 = v588;
  if (v588 == v587)
  {
    v579 = v583;
    v9 = v588;
  }
  else
  {
    v520 = v589;
    v7 = malloc_type_malloc(8 * v589, 0x4065EBACuLL);
    if (!v7)
    {
LABEL_881:
      if (v520)
        goto LABEL_886;
      v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v7)
        goto LABEL_886;
    }
    v579 = v7;
    v9 = v587;
    v8 = v588;
  }
  v10 = v590;
  v580 = v589;
  if (v8 == v9)
    v11 = v590;
  else
    v11 = v589;
  if (v11)
  {
    memmove(v7, v8, 8 * v11);
    v10 = v590;
  }
  v581 = v10;
  v582 = v591;
  v585 = 0;
  v586 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, v592, v593, (v593 - (_BYTE *)v592) >> 5);
  v12 = v574;
  v13 = v595;
  if (v595 != v594)
  {
    v564 = v596;
    v12 = malloc_type_malloc(8 * v596, 0x4065EBACuLL);
    if (v12 || !v564 && (v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v573 = v12;
      v14 = v594;
      v13 = v595;
      goto LABEL_13;
    }
LABEL_886:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v573 = v574;
  v14 = v595;
LABEL_13:
  if (v13 == v14)
    v15 = v597;
  else
    v15 = v596;
  if (v15)
    memmove(v12, v13, 8 * v15);
  v576 = 0;
  v577 = 0;
  v575 = 0;
  sub_1C4E19D7C(&v575, v598, v599, (v599 - (_BYTE *)v598) >> 5);
  v19 = 0;
LABEL_19:
  if (v585 - (_BYTE *)__p != v576 - v575)
    goto LABEL_33;
  if (__p != v585)
  {
    v20 = v575 + 16;
    v21 = (char *)__p + 16;
    while (1)
    {
      v22 = v21 - 16;
      if (*((_QWORD *)v21 - 2) != *((_QWORD *)v20 - 2))
        break;
      v23 = v20[8];
      if (v21[8])
        v24 = v23 == 0;
      else
        v24 = 1;
      if (v24)
      {
        if ((v21[8] == 0) == (v23 != 0))
          break;
      }
      else if (*(_DWORD *)v21 != *(_DWORD *)v20)
      {
        break;
      }
      v20 += 32;
      v21 += 32;
      if (v22 + 32 == v585)
        goto LABEL_859;
    }
LABEL_33:
    v568 = v19;
    v25 = *((_QWORD *)v585 - 4);
    v26 = (_QWORD *)(v25 + 40);
    v27 = *(_QWORD **)(v25 + 48);
    if (v27 == (_QWORD *)(v25 + 40))
    {
      LODWORD(v28) = 0;
      goto LABEL_746;
    }
    v28 = 0;
    v572 = (_QWORD *)(v25 + 40);
    while (2)
    {
      v29 = (_QWORD *)v27[1];
      if (v27)
        v30 = (llvm::Instruction *)(v27 - 3);
      else
        v30 = 0;
      v31 = *((unsigned __int8 *)v30 + 16);
      switch(*((_BYTE *)v30 + 16))
      {
        case ')':
        case '+':
        case '-':
        case '5':
          v32 = sub_1C5AE3144(v30, a2);
          goto LABEL_56;
        case '*':
        case ',':
        case '.':
        case '1':
        case '4':
        case '6':
        case '9':
        case ':':
        case ';':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
          goto LABEL_659;
        case '/':
        case '2':
          v32 = sub_1C5AE2B74(v30, a2);
LABEL_56:
          v28 = v28 | v32;
          goto LABEL_659;
        case '0':
        case '3':
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
            goto LABEL_403;
          if (v31 != 48)
            goto LABEL_291;
          v48 = *((_DWORD *)v30 + 5);
          if ((v48 & 0x40000000) != 0)
          {
            v50 = (void ***)*((_QWORD *)v30 - 1);
            v49 = v48 & 0x7FFFFFF;
            if (!v49)
            {
LABEL_230:
              v168 = 0;
              v169 = &Successor;
              do
              {
                if (LODWORD((&Successor)[2 * v168 + 1]))
                {
                  v170 = (uint64_t *)*v169;
                  if ((*((_BYTE *)*v169 + 23) & 0x10) != 0)
                  {
                    v171 = **(_QWORD **)*v170;
                    v172 = *(_QWORD *)(v171 + 152);
                    v173 = *(unsigned int *)(v171 + 168);
                    if ((_DWORD)v173)
                    {
                      LODWORD(v174) = (v173 - 1) & ((v170 >> 4) ^ (v170 >> 9));
                      v175 = (uint64_t **)(v172 + 16 * v174);
                      v176 = *v175;
                      if (*v175 != v170)
                      {
                        v177 = 1;
                        do
                        {
                          if (v176 == (uint64_t *)-4096)
                            goto LABEL_239;
                          v178 = v174 + v177++;
                          v174 = v178 & (v173 - 1);
                          v176 = *(uint64_t **)(v172 + 16 * v174);
                        }
                        while (v176 != v170);
                        v175 = (uint64_t **)(v172 + 16 * v174);
                      }
                    }
                    else
                    {
LABEL_239:
                      v175 = (uint64_t **)(v172 + 16 * v173);
                    }
                    v179 = v175[1];
                    v182 = *v179;
                    v181 = (char *)(v179 + 2);
                    v180 = v182;
                  }
                  else
                  {
                    v180 = 0;
                    v181 = &byte_1C871356D;
                  }
                  v622 = 773;
                  v618 = v181;
                  v619 = v180;
                  v620 = ".nonneg";
                  Neg = llvm::BinaryOperator::CreateNeg(v170, (llvm::Type *)&v618, (uint64_t)v30);
                  v184 = (unsigned __int8 *)*((_QWORD *)v30 + 6);
                  v600 = v184;
                  if (v184)
                    llvm::MetadataTracking::track((uint64_t)&v600, v184, 2);
                  v185 = (unsigned __int8 **)((char *)Neg + 48);
                  if (&v600 == (unsigned __int8 **)((char *)Neg + 48))
                  {
                    if (v600)
                      llvm::MetadataTracking::untrack((uint64_t)&v600, v600);
                  }
                  else
                  {
                    if (*v185)
                      llvm::MetadataTracking::untrack((uint64_t)Neg + 48, *v185);
                    v186 = v600;
                    *v185 = v600;
                    if (v186)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v600, v186, (uint64_t)Neg + 48);
                      v600 = 0;
                    }
                  }
                  *v169 = (void **)Neg;
                }
                v187 = v168 + 1;
                v169 = &(&Successor)[2 * v168 + 2];
                v168 = 1;
              }
              while (v187 != 2);
              if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
              {
                v188 = ***(_QWORD ***)v30;
                v189 = *(_QWORD *)(v188 + 152);
                v190 = *(unsigned int *)(v188 + 168);
                if ((_DWORD)v190)
                {
                  LODWORD(v191) = (v190 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                  v192 = (llvm::Instruction **)(v189 + 16 * v191);
                  v193 = *v192;
                  if (*v192 != v30)
                  {
                    v194 = 1;
                    do
                    {
                      if (v193 == (llvm::Instruction *)-4096)
                        goto LABEL_381;
                      v195 = v191 + v194++;
                      v191 = v195 & (v190 - 1);
                      v193 = *(llvm::Instruction **)(v189 + 16 * v191);
                    }
                    while (v193 != v30);
                    v192 = (llvm::Instruction **)(v189 + 16 * v191);
                  }
                }
                else
                {
LABEL_381:
                  v192 = (llvm::Instruction **)(v189 + 16 * v190);
                }
                v278 = v192[1];
                v281 = *(_QWORD *)v278;
                v280 = (char *)v278 + 16;
                v279 = v281;
              }
              else
              {
                v279 = 0;
                v280 = &byte_1C871356D;
              }
              v622 = 261;
              v618 = v280;
              v619 = v279;
              v282 = llvm::BinaryOperator::Create(19, Successor, v609, (uint64_t)&v618, (uint64_t)v30);
              v283 = (_QWORD **)*((_QWORD *)v30 + 6);
              __src = v283;
              if (v283)
                llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v283, 2);
              v284 = (unsigned __int8 **)((char *)v282 + 48);
              if (&__src == (void **)((char *)v282 + 48))
              {
                if (__src)
                  llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
              }
              else
              {
                if (*v284)
                  llvm::MetadataTracking::untrack((uint64_t)v282 + 48, *v284);
                v285 = (unsigned __int8 *)__src;
                *v284 = (unsigned __int8 *)__src;
                if (v285)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&__src, v285, (uint64_t)v282 + 48);
                  __src = 0;
                }
              }
              *((_BYTE *)v282 + 17) = *((_BYTE *)v282 + 17) & 0xFD | *((_BYTE *)v30 + 17) & 2;
              v286 = v282;
              if ((_DWORD)False != v610[0])
              {
                if ((*((_BYTE *)v282 + 23) & 0x10) != 0)
                {
                  v287 = ***(_QWORD ***)v282;
                  v288 = *(_QWORD *)(v287 + 152);
                  v289 = *(unsigned int *)(v287 + 168);
                  if ((_DWORD)v289)
                  {
                    LODWORD(v290) = (v289 - 1) & ((v282 >> 4) ^ (v282 >> 9));
                    v291 = (llvm::Value **)(v288 + 16 * v290);
                    v292 = *v291;
                    if (*v291 == v282)
                    {
LABEL_543:
                      v373 = v291[1];
                      v376 = *(_QWORD *)v373;
                      v375 = (char *)v373 + 16;
                      v374 = v376;
LABEL_544:
                      v622 = 773;
                      v618 = v375;
                      v619 = v374;
                      v620 = ".neg";
                      v286 = llvm::BinaryOperator::CreateNeg((uint64_t *)v282, (llvm::Type *)&v618, (uint64_t)v30);
                      goto LABEL_545;
                    }
                    v293 = 1;
                    while (v292 != (llvm::Value *)-4096)
                    {
                      v294 = v290 + v293++;
                      v290 = v294 & (v289 - 1);
                      v292 = *(llvm::Value **)(v288 + 16 * v290);
                      if (v292 == v282)
                        goto LABEL_541;
                    }
                  }
LABEL_542:
                  v291 = (llvm::Value **)(v288 + 16 * v289);
                  goto LABEL_543;
                }
                goto LABEL_663;
              }
              goto LABEL_545;
            }
          }
          else
          {
            v49 = v48 & 0x7FFFFFF;
            v50 = (void ***)((char *)v30 - 32 * v49);
            if (!v49)
              goto LABEL_230;
          }
          v163 = 0;
          v164 = 32 * v49 - 32;
          while (1)
          {
            v165 = *v50;
            (&Successor)[v163] = *v50;
            Domain = getDomain((llvm::ConstantInt **)v165, a2, v30);
            LODWORD((&Successor)[v163 + 1]) = Domain;
            if (Domain == 2)
              break;
            if (v163 != 2)
            {
              v50 += 4;
              v167 = v164;
              v164 -= 32;
              v163 += 2;
              if (v167)
                continue;
            }
            goto LABEL_230;
          }
          v31 = *((unsigned __int8 *)v30 + 16);
          v26 = v572;
LABEL_291:
          if (v31 != 51 || (*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
            goto LABEL_402;
          v209 = *((_DWORD *)v30 + 5);
          if ((v209 & 0x40000000) != 0)
          {
            v211 = (void ***)*((_QWORD *)v30 - 1);
            v210 = v209 & 0x7FFFFFF;
            if (!v210)
            {
LABEL_316:
              v221 = 0;
              v222 = &Successor;
              do
              {
                if (LODWORD((&Successor)[2 * v221 + 1]))
                {
                  v223 = (uint64_t *)*v222;
                  if ((*((_BYTE *)*v222 + 23) & 0x10) != 0)
                  {
                    v224 = **(_QWORD **)*v223;
                    v225 = *(_QWORD *)(v224 + 152);
                    v226 = *(unsigned int *)(v224 + 168);
                    if ((_DWORD)v226)
                    {
                      LODWORD(v227) = (v226 - 1) & ((v223 >> 4) ^ (v223 >> 9));
                      v228 = (uint64_t **)(v225 + 16 * v227);
                      v229 = *v228;
                      if (*v228 != v223)
                      {
                        v230 = 1;
                        do
                        {
                          if (v229 == (uint64_t *)-4096)
                            goto LABEL_325;
                          v231 = v227 + v230++;
                          v227 = v231 & (v226 - 1);
                          v229 = *(uint64_t **)(v225 + 16 * v227);
                        }
                        while (v229 != v223);
                        v228 = (uint64_t **)(v225 + 16 * v227);
                      }
                    }
                    else
                    {
LABEL_325:
                      v228 = (uint64_t **)(v225 + 16 * v226);
                    }
                    v232 = v228[1];
                    v235 = *v232;
                    v234 = (char *)(v232 + 2);
                    v233 = v235;
                  }
                  else
                  {
                    v233 = 0;
                    v234 = &byte_1C871356D;
                  }
                  v622 = 773;
                  v618 = v234;
                  v619 = v233;
                  v620 = ".nonneg";
                  v236 = llvm::BinaryOperator::CreateNeg(v223, (llvm::Type *)&v618, (uint64_t)v30);
                  v237 = (unsigned __int8 *)*((_QWORD *)v30 + 6);
                  v600 = v237;
                  if (v237)
                    llvm::MetadataTracking::track((uint64_t)&v600, v237, 2);
                  v238 = (unsigned __int8 **)((char *)v236 + 48);
                  if (&v600 == (unsigned __int8 **)((char *)v236 + 48))
                  {
                    if (v600)
                      llvm::MetadataTracking::untrack((uint64_t)&v600, v600);
                  }
                  else
                  {
                    if (*v238)
                      llvm::MetadataTracking::untrack((uint64_t)v236 + 48, *v238);
                    v239 = v600;
                    *v238 = v600;
                    if (v239)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v600, v239, (uint64_t)v236 + 48);
                      v600 = 0;
                    }
                  }
                  *v222 = (void **)v236;
                }
                v240 = v221 + 1;
                v222 = &(&Successor)[2 * v221 + 2];
                v221 = 1;
              }
              while (v240 != 2);
              if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
              {
                v241 = ***(_QWORD ***)v30;
                v242 = *(_QWORD *)(v241 + 152);
                v243 = *(unsigned int *)(v241 + 168);
                if ((_DWORD)v243)
                {
                  LODWORD(v244) = (v243 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                  v245 = (llvm::Instruction **)(v242 + 16 * v244);
                  v246 = *v245;
                  if (*v245 != v30)
                  {
                    v247 = 1;
                    do
                    {
                      if (v246 == (llvm::Instruction *)-4096)
                        goto LABEL_525;
                      v248 = v244 + v247++;
                      v244 = v248 & (v243 - 1);
                      v246 = *(llvm::Instruction **)(v242 + 16 * v244);
                    }
                    while (v246 != v30);
                    v245 = (llvm::Instruction **)(v242 + 16 * v244);
                  }
                }
                else
                {
LABEL_525:
                  v245 = (llvm::Instruction **)(v242 + 16 * v243);
                }
                v362 = v245[1];
                v365 = *(_QWORD *)v362;
                v364 = (char *)v362 + 16;
                v363 = v365;
              }
              else
              {
                v363 = 0;
                v364 = &byte_1C871356D;
              }
              v622 = 261;
              v618 = v364;
              v619 = v363;
              v282 = llvm::BinaryOperator::Create(22, Successor, v609, (uint64_t)&v618, (uint64_t)v30);
              v366 = (_QWORD **)*((_QWORD *)v30 + 6);
              __src = v366;
              if (v366)
                llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v366, 2);
              v367 = (unsigned __int8 **)((char *)v282 + 48);
              if (&__src == (void **)((char *)v282 + 48))
              {
                if (__src)
                  llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
              }
              else
              {
                if (*v367)
                  llvm::MetadataTracking::untrack((uint64_t)v282 + 48, *v367);
                v368 = (unsigned __int8 *)__src;
                *v367 = (unsigned __int8 *)__src;
                if (v368)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&__src, v368, (uint64_t)v282 + 48);
                  __src = 0;
                }
              }
              v286 = v282;
              if ((_DWORD)False == 1)
              {
                if ((*((_BYTE *)v282 + 23) & 0x10) != 0)
                {
                  v369 = ***(_QWORD ***)v282;
                  v288 = *(_QWORD *)(v369 + 152);
                  v289 = *(unsigned int *)(v369 + 168);
                  if ((_DWORD)v289)
                  {
                    LODWORD(v290) = (v289 - 1) & ((v282 >> 4) ^ (v282 >> 9));
                    v291 = (llvm::Value **)(v288 + 16 * v290);
                    v370 = *v291;
                    if (*v291 != v282)
                    {
                      v371 = 1;
                      do
                      {
                        if (v370 == (llvm::Value *)-4096)
                          goto LABEL_542;
                        v372 = v290 + v371++;
                        v290 = v372 & (v289 - 1);
                        v370 = *(llvm::Value **)(v288 + 16 * v290);
                      }
                      while (v370 != v282);
LABEL_541:
                      v291 = (llvm::Value **)(v288 + 16 * v290);
                    }
                    goto LABEL_543;
                  }
                  goto LABEL_542;
                }
LABEL_663:
                v374 = 0;
                v375 = &byte_1C871356D;
                goto LABEL_544;
              }
LABEL_545:
              v299 = 1;
              llvm::Value::doRAUW(v30, v286, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
              v377 = (_QWORD **)*((_QWORD *)v30 + 3);
              v378 = (_QWORD *)*((_QWORD *)v30 + 4);
              *v378 = v377;
              v377[1] = v378;
              *((_QWORD *)v30 + 3) = 0;
              *((_QWORD *)v30 + 4) = 0;
              llvm::Value::deleteValue(v30);
              sub_1C5AE2B74(v282, a2);
              v26 = v572;
              goto LABEL_546;
            }
          }
          else
          {
            v210 = v209 & 0x7FFFFFF;
            v211 = (void ***)((char *)v30 - 32 * v210);
            if (!v210)
              goto LABEL_316;
          }
          v216 = 0;
          v217 = 32 * v210 - 32;
          while (1)
          {
            v218 = *v211;
            (&Successor)[v216] = *v211;
            v219 = getDomain((llvm::ConstantInt **)v218, a2, v30);
            LODWORD((&Successor)[v216 + 1]) = v219;
            if (v219 == 2)
              break;
            if (v216 != 2)
            {
              v211 += 4;
              v220 = v217;
              v217 -= 32;
              v216 += 2;
              if (v220)
                continue;
            }
            goto LABEL_316;
          }
          v26 = v572;
LABEL_402:
          v298 = *(unsigned int *)(*(_QWORD *)v30 + 8);
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
          {
LABEL_403:
            v299 = 0;
            goto LABEL_546;
          }
          LOBYTE(Successor) = 0;
          LOBYTE(v611[0]) = 0;
          v612[0] = 0;
          v615[0] = 0;
          v300 = *((_DWORD *)v30 + 5);
          if ((v300 & 0x40000000) != 0)
          {
            v302 = (llvm::Value **)*((_QWORD *)v30 - 1);
            v301 = v300 & 0x7FFFFFF;
          }
          else
          {
            v301 = v300 & 0x7FFFFFF;
            v302 = (llvm::Value **)((char *)v30 - 32 * v301);
          }
          v570 = v28;
          if (v301)
          {
            v303 = 0;
            v304 = 0;
            v305 = 32 * v301 - 32;
            do
            {
              v306 = &(&Successor)[v303 / 8];
              llvm::LazyValueInfo::getConstantRange(a2, *v302, v30, 1, &v618);
              if (LOBYTE(v611[v303 / 2]))
              {
                if (*((_DWORD *)v306 + 2) >= 0x41u && *v306)
                  MEMORY[0x1CAA32F9C](*v306, 0x1000C8000313F17);
                v307 = &(&Successor)[v303 / 8];
                (&Successor)[v303 / 8] = (void **)v618;
                *((_DWORD *)v306 + 2) = v619;
                LODWORD(v619) = 0;
                if (v610[v303 / 4] >= 0x41u && (v309 = v307[2]) != 0)
                {
                  MEMORY[0x1CAA32F9C](v309, 0x1000C8000313F17);
                  v310 = v619;
                  v307[2] = (void **)v620;
                  *((_DWORD *)v307 + 6) = v621;
                  v621 = 0;
                  if (v310 >= 0x41 && v618)
                    MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
                }
                else
                {
                  v307[2] = (void **)v620;
                  *((_DWORD *)v307 + 6) = v621;
                }
              }
              else
              {
                *((_DWORD *)v306 + 2) = v619;
                *v306 = (void **)v618;
                LODWORD(v619) = 0;
                *((_DWORD *)v306 + 6) = v621;
                v306[2] = (void **)v620;
                *((_BYTE *)v306 + 32) = 1;
              }
              MinSignedBits = llvm::ConstantRange::getMinSignedBits((llvm::ConstantRange *)&(&Successor)[v303 / 8]);
              if (MinSignedBits > v304)
                v304 = MinSignedBits;
              if (!v305)
                break;
              v302 += 4;
              v305 -= 32;
              v24 = v303 == 40;
              v303 += 40;
            }
            while (!v24);
          }
          else
          {
            v304 = 0;
          }
          v311 = v298 >> 8;
          LODWORD(v619) = v298 >> 8;
          if (v298 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v618, -1, 1);
          }
          else
          {
            v312 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v298));
            if (v298 <= 0xFF)
              v312 = 0;
            v618 = v312;
          }
          if (!llvm::ConstantRange::contains((llvm::ConstantRange *)v612, (const llvm::APInt *)&v618))
          {
            v315 = 0;
            goto LABEL_494;
          }
          LODWORD(v617) = v304;
          if (v304 > 0x40)
          {
            p_src = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v313 = v304 - 1;
            if (v617 >= 0x41)
              p_src = (void **)((char *)__src + 8 * (v313 >> 6));
          }
          else
          {
            __src = 0;
            LOBYTE(v313) = v304 - 1;
            p_src = &__src;
          }
          *p_src = (void *)((1 << v313) | (unint64_t)*p_src);
          if (v617 < v311)
          {
            llvm::APInt::sext((llvm::APInt *)&__src, v311, (llvm::APInt *)&v600);
            v316 = v601;
          }
          else
          {
            LODWORD(v601) = v617;
            if (v617 <= 0x40)
            {
              v600 = (unsigned __int8 *)__src;
              v315 = llvm::ConstantRange::contains((llvm::ConstantRange *)&Successor, (const llvm::APInt *)&v600);
LABEL_491:
              if (v617 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_494:
              if (v619 >= 0x41 && v618)
                MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
              v345 = v315 + v304;
              if (v315 + v304)
              {
                v346 = (v345 - 1) | ((v345 - 1) >> 1) | (((v345 - 1) | ((v345 - 1) >> 1)) >> 2);
                v345 = v346 | (v346 >> 4) | ((v346 | (v346 >> 4)) >> 8);
                LODWORD(v345) = ((v345 >> 16) | v345) + 1;
              }
              LODWORD(v28) = v570;
              if (v345 <= 8)
                v347 = 8;
              else
                v347 = v345;
              v325 = v347 >= v311;
              v299 = v347 < v311;
              v26 = v572;
              if (v325)
              {
LABEL_591:
                for (i = 0; i != -10; i -= 5)
                {
                  v438 = &(&Successor)[i];
                  if (v615[i * 8])
                  {
                    if (*((_DWORD *)v438 + 16) >= 0x41u)
                    {
                      v439 = *(_QWORD *)&v613[i * 8];
                      if (v439)
                        MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
                    }
                    if (*(_DWORD *)&v612[i * 8 + 8] >= 0x41u)
                    {
                      v440 = v438[5];
                      if (v440)
                        MEMORY[0x1CAA32F9C](v440, 0x1000C8000313F17);
                    }
                    *((_BYTE *)v438 + 72) = 0;
                  }
                }
LABEL_546:
                v28 = v28 | v299;
                goto LABEL_659;
              }
              sub_1C4773D54((uint64_t)&v618, (uint64_t)v30, 0, 0, 0);
              v348 = **(_QWORD ***)v30;
              LODWORD(v600) = v347;
              if (v347 <= 63)
              {
                switch(v347)
                {
                  case 32:
                    v349 = (_QWORD *)(*v348 + 1960);
                    goto LABEL_549;
                  case 16:
                    v349 = (_QWORD *)(*v348 + 1936);
                    goto LABEL_549;
                  case 8:
                    v349 = (_QWORD *)(*v348 + 1912);
                    goto LABEL_549;
                }
              }
              else
              {
                if (v347 == 64)
                {
                  v349 = (_QWORD *)(*v348 + 1984);
                  goto LABEL_549;
                }
                if (v347 == 128)
                {
                  v349 = (_QWORD *)(*v348 + 2008);
                  goto LABEL_549;
                }
              }
              v494 = sub_1C5270984(*v348 + 2168, &v600);
              v349 = (_QWORD *)*((_QWORD *)v494 + 1);
              if (!v349)
              {
                v495 = v494;
                v349 = (_QWORD *)sub_1C484358C(*v348 + 2040, 24, 3);
                v496 = (int)v600;
                *v349 = v348;
                v349[2] = 0;
                v349[1] = (v496 << 8) | 0xDu;
                *((_QWORD *)v495 + 1) = v349;
              }
LABEL_549:
              v379 = (unsigned __int8 *)*((_QWORD *)v30 - 8);
              if ((*((_BYTE *)v30 + 23) & 0x10) == 0)
              {
                v389 = 0;
                v390 = &byte_1C871356D;
LABEL_558:
                v604 = 773;
                v600 = (unsigned __int8 *)v390;
                v601 = v389;
                v602 = ".lhs.trunc";
                v392 = sub_1C5390E08((uint64_t *)&v618, v379, (uint64_t)v349, (uint64_t)&v600);
                v393 = (unsigned __int8 *)*((_QWORD *)v30 - 4);
                if ((*((_BYTE *)v30 + 23) & 0x10) == 0)
                {
                  v403 = 0;
                  v404 = &byte_1C871356D;
LABEL_567:
                  v604 = 773;
                  v600 = (unsigned __int8 *)v404;
                  v601 = v403;
                  v602 = ".rhs.trunc";
                  v406 = sub_1C5390E08((uint64_t *)&v618, v393, (uint64_t)v349, (uint64_t)&v600);
                  v407 = *((unsigned __int8 *)v30 + 16);
                  if ((*((_BYTE *)v30 + 23) & 0x10) == 0)
                  {
                    v417 = 0;
                    v418 = &byte_1C871356D;
LABEL_576:
                    v604 = 261;
                    v600 = (unsigned __int8 *)v418;
                    v601 = v417;
                    v420 = sub_1C4773860((uint64_t)&v618, (v407 - 28), v392, (uint64_t)v406, (uint64_t)&v600, 0);
                    v421 = *(uint64_t ***)v30;
                    if ((*((_BYTE *)v30 + 23) & 0x10) == 0)
                    {
                      v431 = 0;
                      v432 = &byte_1C871356D;
                      LODWORD(v28) = v570;
LABEL_585:
                      v604 = 773;
                      v600 = (unsigned __int8 *)v432;
                      v601 = v431;
                      v602 = ".sext";
                      v434 = sub_1C4773E38((uint64_t *)&v618, 40, v420, (uint64_t)v421, (uint64_t)&v600);
                      if (v420[16] == 48 && v420)
                        v420[17] = v420[17] & 0xFD | *((_BYTE *)v30 + 17) & 2;
                      llvm::Value::doRAUW(v30, (llvm::Value *)v434, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
                      v435 = (_QWORD **)*((_QWORD *)v30 + 3);
                      v436 = (_QWORD *)*((_QWORD *)v30 + 4);
                      *v436 = v435;
                      v435[1] = v436;
                      *((_QWORD *)v30 + 3) = 0;
                      *((_QWORD *)v30 + 4) = 0;
                      llvm::Value::deleteValue(v30);
                      if (v618 != &v620)
                        free(v618);
                      v26 = v572;
                      goto LABEL_591;
                    }
                    v422 = **v421;
                    v423 = *(_QWORD *)(v422 + 152);
                    v424 = *(unsigned int *)(v422 + 168);
                    LODWORD(v28) = v570;
                    if ((_DWORD)v424)
                    {
                      LODWORD(v425) = (v424 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                      v426 = (llvm::Instruction **)(v423 + 16 * v425);
                      v427 = *v426;
                      if (*v426 == v30)
                      {
LABEL_584:
                        v430 = v426[1];
                        v433 = *(_QWORD *)v430;
                        v432 = (char *)v430 + 16;
                        v431 = v433;
                        goto LABEL_585;
                      }
                      v428 = 1;
                      while (v427 != (llvm::Instruction *)-4096)
                      {
                        v429 = v425 + v428++;
                        v425 = v429 & (v424 - 1);
                        v427 = *(llvm::Instruction **)(v423 + 16 * v425);
                        if (v427 == v30)
                        {
                          v426 = (llvm::Instruction **)(v423 + 16 * v425);
                          goto LABEL_584;
                        }
                      }
                    }
                    v426 = (llvm::Instruction **)(v423 + 16 * v424);
                    goto LABEL_584;
                  }
                  v408 = ***(_QWORD ***)v30;
                  v409 = *(_QWORD *)(v408 + 152);
                  v410 = *(unsigned int *)(v408 + 168);
                  if ((_DWORD)v410)
                  {
                    LODWORD(v411) = (v410 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                    v412 = (llvm::Instruction **)(v409 + 16 * v411);
                    v413 = *v412;
                    if (*v412 == v30)
                    {
LABEL_575:
                      v416 = v412[1];
                      v419 = *(_QWORD *)v416;
                      v418 = (char *)v416 + 16;
                      v417 = v419;
                      goto LABEL_576;
                    }
                    v414 = 1;
                    while (v413 != (llvm::Instruction *)-4096)
                    {
                      v415 = v411 + v414++;
                      v411 = v415 & (v410 - 1);
                      v413 = *(llvm::Instruction **)(v409 + 16 * v411);
                      if (v413 == v30)
                      {
                        v412 = (llvm::Instruction **)(v409 + 16 * v411);
                        goto LABEL_575;
                      }
                    }
                  }
                  v412 = (llvm::Instruction **)(v409 + 16 * v410);
                  goto LABEL_575;
                }
                v394 = ***(_QWORD ***)v30;
                v395 = *(_QWORD *)(v394 + 152);
                v396 = *(unsigned int *)(v394 + 168);
                if ((_DWORD)v396)
                {
                  LODWORD(v397) = (v396 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                  v398 = (llvm::Instruction **)(v395 + 16 * v397);
                  v399 = *v398;
                  if (*v398 == v30)
                  {
LABEL_566:
                    v402 = v398[1];
                    v405 = *(_QWORD *)v402;
                    v404 = (char *)v402 + 16;
                    v403 = v405;
                    goto LABEL_567;
                  }
                  v400 = 1;
                  while (v399 != (llvm::Instruction *)-4096)
                  {
                    v401 = v397 + v400++;
                    v397 = v401 & (v396 - 1);
                    v399 = *(llvm::Instruction **)(v395 + 16 * v397);
                    if (v399 == v30)
                    {
                      v398 = (llvm::Instruction **)(v395 + 16 * v397);
                      goto LABEL_566;
                    }
                  }
                }
                v398 = (llvm::Instruction **)(v395 + 16 * v396);
                goto LABEL_566;
              }
              v380 = ***(_QWORD ***)v30;
              v381 = *(_QWORD *)(v380 + 152);
              v382 = *(unsigned int *)(v380 + 168);
              if ((_DWORD)v382)
              {
                LODWORD(v383) = (v382 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                v384 = (llvm::Instruction **)(v381 + 16 * v383);
                v385 = *v384;
                if (*v384 == v30)
                {
LABEL_557:
                  v388 = v384[1];
                  v391 = *(_QWORD *)v388;
                  v390 = (char *)v388 + 16;
                  v389 = v391;
                  goto LABEL_558;
                }
                v386 = 1;
                while (v385 != (llvm::Instruction *)-4096)
                {
                  v387 = v383 + v386++;
                  v383 = v387 & (v382 - 1);
                  v385 = *(llvm::Instruction **)(v381 + 16 * v383);
                  if (v385 == v30)
                  {
                    v384 = (llvm::Instruction **)(v381 + 16 * v383);
                    goto LABEL_557;
                  }
                }
              }
              v384 = (llvm::Instruction **)(v381 + 16 * v382);
              goto LABEL_557;
            }
            v600 = (unsigned __int8 *)operator new[]();
            v316 = v601;
            memcpy(v600, __src, (((unint64_t)v601 + 63) >> 3) & 0x3FFFFFF8);
          }
          v315 = llvm::ConstantRange::contains((llvm::ConstantRange *)&Successor, (const llvm::APInt *)&v600);
          if (v316 >= 0x41 && v600)
            MEMORY[0x1CAA32F9C](v600, 0x1000C8000313F17);
          goto LABEL_491;
        case '7':
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
            goto LABEL_310;
          llvm::LazyValueInfo::getConstantRange(a2, *((llvm::Value **)v30 - 8), v30, 1, &Successor);
          v60 = *(unsigned int *)(*(_QWORD *)v30 + 8);
          v61 = v60 >> 8;
          LODWORD(v617) = *(_DWORD *)(*(_QWORD *)v30 + 8) >> 8;
          if (v60 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
            v606 = v61;
            llvm::APInt::initSlowCase((llvm::APInt *)&v605, 1, 0);
            v64 = v617;
            v62 = (unint64_t)__src;
            LODWORD(v61) = v606;
            v63 = (uint64_t)v605;
          }
          else
          {
            if (v60 >= 0x100)
              v62 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v60);
            else
              v62 = 0;
            __src = (void *)v62;
            v63 = v62 & 1;
            v605 = (llvm::BasicBlock *)v63;
            v64 = v61;
          }
          LODWORD(v601) = v64;
          v600 = (unsigned __int8 *)v62;
          LODWORD(v617) = 0;
          v603 = v61;
          v602 = (const char *)v63;
          v606 = 0;
          v65 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v600, (const llvm::ConstantRange *)&Successor);
          v66 = (llvm::Value *)*((_QWORD *)v30 - 8);
          if (v65)
            goto LABEL_518;
          v67 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v66, 0, 0);
          LODWORD(v68) = 0;
          if (llvm::LazyValueInfo::getPredicateAt(a2, 39, v66, (llvm::Constant *)v67, v30, 1) != 1)
            goto LABEL_519;
          if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
          {
            v69 = ***(_QWORD ***)v30;
            v70 = *(_QWORD *)(v69 + 152);
            v71 = *(unsigned int *)(v69 + 168);
            if ((_DWORD)v71)
            {
              LODWORD(v72) = (v71 - 1) & ((v30 >> 4) ^ (v30 >> 9));
              v73 = (llvm::Instruction **)(v70 + 16 * v72);
              v74 = *v73;
              if (*v73 != v30)
              {
                v75 = 1;
                do
                {
                  if (v74 == (llvm::Instruction *)-4096)
                    goto LABEL_508;
                  v76 = v72 + v75++;
                  v72 = v76 & (v71 - 1);
                  v74 = *(llvm::Instruction **)(v70 + 16 * v72);
                }
                while (v74 != v30);
                v73 = (llvm::Instruction **)(v70 + 16 * v72);
              }
            }
            else
            {
LABEL_508:
              v73 = (llvm::Instruction **)(v70 + 16 * v71);
            }
            v350 = v73[1];
            v353 = *(_QWORD *)v350;
            v352 = (char *)v350 + 16;
            v351 = v353;
            goto LABEL_510;
          }
          v351 = 0;
          v352 = &byte_1C871356D;
LABEL_510:
          v354 = (_QWORD *)*((_QWORD *)v30 - 8);
          v355 = *((_QWORD *)v30 - 4);
          v622 = 261;
          v618 = v352;
          v619 = v351;
          v66 = llvm::BinaryOperator::Create(26, v354, v355, (uint64_t)&v618, (uint64_t)v30);
          v356 = (_QWORD **)*((_QWORD *)v30 + 6);
          v618 = v356;
          if (v356)
            llvm::MetadataTracking::track((uint64_t)&v618, (unsigned __int8 *)v356, 2);
          v357 = (unsigned __int8 **)((char *)v66 + 48);
          if (&v618 == (void **)((char *)v66 + 48))
          {
            if (v618)
              llvm::MetadataTracking::untrack((uint64_t)&v618, (unsigned __int8 *)v618);
          }
          else
          {
            if (*v357)
              llvm::MetadataTracking::untrack((uint64_t)v66 + 48, *v357);
            v358 = (unsigned __int8 *)v618;
            *v357 = (unsigned __int8 *)v618;
            if (v358)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v618, v358, (uint64_t)v66 + 48);
              v618 = 0;
            }
          }
          *((_BYTE *)v66 + 17) = *((_BYTE *)v66 + 17) & 0xFD | *((_BYTE *)v30 + 17) & 2;
LABEL_518:
          LODWORD(v68) = 1;
          llvm::Value::doRAUW(v30, v66, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
          v359 = (_QWORD **)*((_QWORD *)v30 + 3);
          v360 = (_QWORD *)*((_QWORD *)v30 + 4);
          *v360 = v359;
          v359[1] = v360;
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          llvm::Value::deleteValue(v30);
LABEL_519:
          v26 = v572;
          if (v603 >= 0x41 && v602)
            MEMORY[0x1CAA32F9C](v602, 0x1000C8000313F17);
          if (v601 >= 0x41 && v600)
            MEMORY[0x1CAA32F9C](v600, 0x1000C8000313F17);
          if (v610[0] >= 0x41u && v609)
            MEMORY[0x1CAA32F9C](v609, 0x1000C8000313F17);
          if (False >= 0x41)
          {
            v361 = Successor;
            if (Successor)
              goto LABEL_524;
          }
          goto LABEL_658;
        case '8':
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
            goto LABEL_310;
          v80 = *((_QWORD *)v30 - 4);
          if (!v80 || *(_BYTE *)(v80 + 16) != 16)
            goto LABEL_310;
          v82 = (llvm::Value *)*((_QWORD *)v30 - 8);
          v83 = (_QWORD *)(v80 + 24);
          if (!sub_1C49AB31C((llvm::APInt *)(v80 + 24)))
          {
            LODWORD(v68) = 0;
            goto LABEL_657;
          }
          llvm::LazyValueInfo::getConstantRange(a2, v82, v30, 0, &v618);
          llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v618, (llvm::APInt *)&Successor);
          if (False <= 0x40)
          {
            if ((unint64_t)Successor <= *v83)
              goto LABEL_696;
            goto LABEL_103;
          }
          v500 = *v83 - 8;
          v501 = (((unint64_t)False + 63) >> 3) & 0x3FFFFFF8;
          while (v501)
          {
            v502 = *(unint64_t *)((char *)Successor + v501 - 8);
            v503 = *(_QWORD *)(v500 + v501);
            v501 -= 8;
            if (v502 != v503)
            {
              MEMORY[0x1CAA32F9C](Successor, 0x1000C8000313F17);
              if (v502 <= v503)
                goto LABEL_696;
LABEL_103:
              LODWORD(v68) = 0;
              goto LABEL_697;
            }
          }
          if (Successor)
            MEMORY[0x1CAA32F9C](Successor, 0x1000C8000313F17);
LABEL_696:
          LODWORD(v68) = 1;
          llvm::Value::doRAUW(v30, v82, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
          v504 = (_QWORD **)*((_QWORD *)v30 + 3);
          v505 = (_QWORD *)*((_QWORD *)v30 + 4);
          *v505 = v504;
          v504[1] = v505;
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          llvm::Value::deleteValue(v30);
LABEL_697:
          v26 = v572;
          if (v621 >= 0x41 && v620)
            MEMORY[0x1CAA32F9C](v620, 0x1000C8000313F17);
          if (v619 >= 0x41)
          {
            v361 = (void **)v618;
            if (v618)
LABEL_524:
              MEMORY[0x1CAA32F9C](v361, 0x1000C8000313F17);
          }
          goto LABEL_658;
        case '<':
        case '=':
          v45 = (unsigned __int8 *)*((_QWORD *)v30 - 4);
          if (v45[16] >= 0x15u
            && (Constant = llvm::LazyValueInfo::getConstant(a2, *((llvm::Value **)v30 - 4), v30)) != 0)
          {
            llvm::User::replaceUsesOfWith(v30, (llvm::Value *)v45, Constant);
            v47 = 1;
          }
          else
          {
            v47 = 0;
          }
          v28 = v28 | v47;
          goto LABEL_659;
        case 'D':
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
          {
            v59 = 0;
            goto LABEL_461;
          }
          v115 = (llvm::ConstantInt **)*((_QWORD *)v30 - 4);
          v116 = llvm::ConstantInt::get(*v115, 0, 0);
          v59 = 0;
          if (llvm::LazyValueInfo::getPredicateAt(a2, 39, (llvm::Value *)v115, (llvm::Constant *)v116, v30, 1) != 1)goto LABEL_461;
          v117 = *(uint64_t ***)v30;
          if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
          {
            v118 = **v117;
            v119 = *(_QWORD *)(v118 + 152);
            v120 = *(unsigned int *)(v118 + 168);
            if ((_DWORD)v120)
            {
              LODWORD(v121) = (v120 - 1) & ((v30 >> 4) ^ (v30 >> 9));
              v122 = (llvm::Instruction **)(v119 + 16 * v121);
              v123 = *v122;
              if (*v122 != v30)
              {
                v124 = 1;
                do
                {
                  if (v123 == (llvm::Instruction *)-4096)
                    goto LABEL_451;
                  v125 = v121 + v124++;
                  v121 = v125 & (v120 - 1);
                  v123 = *(llvm::Instruction **)(v119 + 16 * v121);
                }
                while (v123 != v30);
                v122 = (llvm::Instruction **)(v119 + 16 * v121);
              }
            }
            else
            {
LABEL_451:
              v122 = (llvm::Instruction **)(v119 + 16 * v120);
            }
            v326 = v122[1];
            v329 = *(_QWORD *)v326;
            v328 = (char *)v326 + 16;
            v327 = v329;
            goto LABEL_453;
          }
          v327 = 0;
          v328 = &byte_1C871356D;
LABEL_453:
          v622 = 261;
          v618 = v328;
          v619 = v327;
          ZExtOrBitCast = (void **)llvm::CastInst::CreateZExtOrBitCast((uint64_t *)v115, (uint64_t)v117, (uint64_t)&v618, (uint64_t)v30);
          v331 = (_QWORD **)*((_QWORD *)v30 + 6);
          v618 = v331;
          if (v331)
            llvm::MetadataTracking::track((uint64_t)&v618, (unsigned __int8 *)v331, 2);
          v332 = (unsigned __int8 **)(ZExtOrBitCast + 6);
          if (&v618 == ZExtOrBitCast + 6)
          {
            if (v618)
              llvm::MetadataTracking::untrack((uint64_t)&v618, (unsigned __int8 *)v618);
          }
          else
          {
            if (*v332)
              llvm::MetadataTracking::untrack((uint64_t)(ZExtOrBitCast + 6), *v332);
            v333 = (unsigned __int8 *)v618;
            *v332 = (unsigned __int8 *)v618;
            if (v333)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v618, v333, (uint64_t)(ZExtOrBitCast + 6));
              v618 = 0;
            }
          }
          v59 = 1;
          llvm::Value::doRAUW(v30, (llvm::Value *)ZExtOrBitCast, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
          v334 = (_QWORD **)*((_QWORD *)v30 + 3);
          v335 = (_QWORD *)*((_QWORD *)v30 + 4);
          *v335 = v334;
          v334[1] = v335;
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          llvm::Value::deleteValue(v30);
LABEL_461:
          v28 = v28 | v59;
          v26 = v572;
          goto LABEL_659;
        case 'Q':
        case 'R':
          v33 = (unsigned __int8 *)*((_QWORD *)v30 - 4);
          if (v33)
            v34 = v33[16] > 0x14u;
          else
            v34 = 1;
          if (v34)
            goto LABEL_193;
          PredicateAt = llvm::LazyValueInfo::getPredicateAt(a2, *((_WORD *)v30 + 9) & 0x3F, *((llvm::Value **)v30 - 8), (llvm::Constant *)v33, v30, 1);
          if (PredicateAt == -1)
          {
            v31 = *((unsigned __int8 *)v30 + 16);
LABEL_193:
            v42 = 0;
            if (v31 != 81)
              v30 = 0;
            if (v27)
            {
              if (v31 == 81 && byte_1ED81BC18 != 0)
              {
                if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12
                  || (v16 = (unsigned __int8 *)*((_QWORD *)v30 - 8), *(_BYTE *)(*(_QWORD *)v16 + 8) != 13)
                  || (v153 = *((_WORD *)v30 + 9) & 0x3F, (v153 - 38) > 3))
                {
                  v42 = 0;
                }
                else
                {
                  llvm::LazyValueInfo::getConstantRange(a2, (llvm::Value *)v16, v30, 1, &v618);
                  llvm::LazyValueInfo::getConstantRange(a2, *((llvm::Value **)v30 - 4), v30, 1, &Successor);
                  EquivalentPredWithFlippedSignedness = llvm::ConstantRange::getEquivalentPredWithFlippedSignedness(v153, (const void **)&v618, (const llvm::ConstantRange *)&Successor);
                  if (v610[0] >= 0x41u && v609)
                    MEMORY[0x1CAA32F9C](v609, 0x1000C8000313F17);
                  if (False >= 0x41 && Successor)
                    MEMORY[0x1CAA32F9C](Successor, 0x1000C8000313F17);
                  if (v621 >= 0x41 && v620)
                    MEMORY[0x1CAA32F9C](v620, 0x1000C8000313F17);
                  if (v619 >= 0x41 && v618)
                    MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
                  if (EquivalentPredWithFlippedSignedness == 42)
                  {
                    v42 = 0;
                  }
                  else
                  {
                    *((_WORD *)v30 + 9) = *((_WORD *)v30 + 9) & 0xFFC0 | EquivalentPredWithFlippedSignedness;
                    v42 = 1;
                  }
                  v26 = v572;
                }
              }
            }
          }
          else
          {
            v37 = ***(_QWORD ***)v30;
            v38 = *(llvm::ConstantInt **)(v37 + 1888);
            v39 = *(unsigned int *)(v37 + 1896);
            LODWORD(v619) = v39 >> 8;
            if (v39 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v618, PredicateAt, 0);
            }
            else
            {
              if (v39 <= 0xFF)
                v40 = 0;
              else
                v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
              v618 = (void *)(v40 & PredicateAt);
            }
            v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v618, v36);
            if (v619 >= 0x41 && v618)
              MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
            v42 = 1;
            llvm::Value::doRAUW(v30, v41, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
            v43 = (_QWORD **)*((_QWORD *)v30 + 3);
            v44 = (_QWORD *)*((_QWORD *)v30 + 4);
            *v44 = v43;
            v43[1] = v44;
            *((_QWORD *)v30 + 3) = 0;
            *((_QWORD *)v30 + 4) = 0;
            llvm::Value::deleteValue(v30);
          }
          v28 = v28 | v42;
          goto LABEL_659;
        case 'S':
          v84 = *((_DWORD *)v30 + 5);
          v85 = v84 & 0x7FFFFFF;
          if ((v84 & 0x7FFFFFF) == 0)
          {
            v618 = &v620;
            v619 = 0x800000000;
            v151 = llvm::SimplifyInstructionWithOperands(v30, (uint64_t)&v620, 0, a4, v17, v18);
            if (v618 == &v620)
            {
              if (v151)
                goto LABEL_267;
            }
            else
            {
              free(v618);
              if (v151)
                goto LABEL_267;
            }
            goto LABEL_269;
          }
          v569 = v28;
          v86 = 0;
          v87 = 0;
          v567 = 0;
          v88 = (llvm::BasicBlock *)*((_QWORD *)v30 + 5);
          do
          {
            v89 = *((_DWORD *)v30 + 5);
            if ((v89 & 0x40000000) != 0)
              v90 = (_QWORD ***)*((_QWORD *)v30 - 1);
            else
              v90 = (_QWORD ***)((char *)v30 - 32 * (v89 & 0x7FFFFFF));
            v91 = (llvm::ConstantInt ***)v90[v86];
            if (*((unsigned __int8 *)v91 + 16) >= 0x15u)
            {
              v92 = (llvm::BasicBlock *)(&v90[4 * *((unsigned int *)v30 + 15)])[v87];
              ConstantOnEdge = llvm::LazyValueInfo::getConstantOnEdge(a2, v91, v92, v88, v30);
              if (ConstantOnEdge)
              {
                v102 = (uint64_t)ConstantOnEdge;
                goto LABEL_132;
              }
              if (*((_BYTE *)v91 + 16) != 85)
                goto LABEL_133;
              v94 = (llvm::ConstantInt ***)*(v91 - 12);
              if (((_DWORD)(*v94)[1] & 0xFE) != 0x12)
              {
                v95 = (llvm::Constant *)llvm::LazyValueInfo::getConstantOnEdge(a2, v94, v92, v88, v30);
                if (v95)
                {
                  v96 = v95;
                  if (llvm::Constant::isOneValue(v95))
                    goto LABEL_128;
                  if (llvm::Constant::isZeroValue(v96))
                  {
                    v97 = (uint64_t *)(v91 - 4);
LABEL_129:
                    v102 = *v97;
                    if (!*v97)
                      goto LABEL_133;
LABEL_132:
                    sub_1C6125834((uint64_t)v30, v87, v102);
                    v567 = 1;
                    goto LABEL_133;
                  }
                }
              }
              v97 = (uint64_t *)(v91 - 4);
              v98 = (unsigned __int8 *)*(v91 - 4);
              if (v98)
                v99 = v98[16] > 0x14u;
              else
                v99 = 1;
              if (!v99
                && !llvm::LazyValueInfo::getPredicateOnEdge(a2, 32, (llvm::Value *)v91, (llvm::Constant *)v98, v92, v88, v30))
              {
LABEL_128:
                v97 = (uint64_t *)(v91 - 8);
                goto LABEL_129;
              }
              v100 = (unsigned __int8 *)*(v91 - 8);
              if (v100)
                v101 = v100[16] > 0x14u;
              else
                v101 = 1;
              if (!v101
                && !llvm::LazyValueInfo::getPredicateOnEdge(a2, 32, (llvm::Value *)v91, (llvm::Constant *)v100, v92, v88, v30))
              {
                goto LABEL_129;
              }
            }
LABEL_133:
            ++v87;
            v86 += 4;
          }
          while (v85 != v87);
          v103 = *((_DWORD *)v30 + 5);
          if ((v103 & 0x40000000) != 0)
          {
            v105 = (const char **)*((_QWORD *)v30 - 1);
            v104 = v103 & 0x7FFFFFF;
          }
          else
          {
            v104 = v103 & 0x7FFFFFF;
            v105 = (const char **)((char *)v30 - 32 * v104);
          }
          v28 = v569;
          v618 = &v620;
          v619 = 0x800000000;
          if (v104 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v104, 8);
            v106 = v619;
            v108 = (const char **)v618;
            v107 = v619;
            goto LABEL_139;
          }
          v106 = 0;
          if (v104)
          {
            v107 = 0;
            v108 = &v620;
LABEL_139:
            v109 = 32 * v104;
            v110 = &v108[v107];
            do
            {
              v111 = *v105;
              v105 += 4;
              *v110++ = v111;
              v109 -= 32;
            }
            while (v109);
            v112 = (const char **)v618;
          }
          else
          {
            v112 = &v620;
          }
          LODWORD(v619) = v106 + v104;
          v151 = llvm::SimplifyInstructionWithOperands(v30, (uint64_t)v112, (v106 + v104), a4, v17, v18);
          if (v618 != &v620)
            free(v618);
          v26 = v572;
          if (v151)
          {
LABEL_267:
            LODWORD(v68) = 1;
            v196 = v30;
            v197 = v151;
            goto LABEL_473;
          }
          if ((v567 & 1) != 0)
            goto LABEL_450;
LABEL_269:
          v618 = &v620;
          v619 = 0x400000000;
          v198 = *((_DWORD *)v30 + 5);
          v68 = (unsigned __int8 *)(v198 & 0x7FFFFFF);
          if ((v198 & 0x7FFFFFF) != 0)
          {
            v199 = 0;
            v200 = 0;
            v201 = 0;
            v202 = 0;
            do
            {
              v203 = *((_DWORD *)v30 + 5);
              v204 = v28;
              if ((v203 & 0x40000000) != 0)
                v205 = (_QWORD ***)*((_QWORD *)v30 - 1);
              else
                v205 = (_QWORD ***)((char *)v30 - 32 * (v203 & 0x7FFFFFF));
              v206 = (unsigned __int8 *)v205[v199];
              if (v206)
                v207 = v206[16] > 0x14u;
              else
                v207 = 1;
              if (v207)
              {
                if (v202)
                {
                  if (v206 != v202)
                    goto LABEL_484;
                }
                else
                {
                  v202 = (unsigned __int8 *)v205[v199];
                }
              }
              else
              {
                if (v200 >= HIDWORD(v619))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v200 + 1, 16);
                  v200 = v619;
                }
                v208 = (unsigned __int8 **)((char *)v618 + 16 * v200);
                *v208 = v206;
                v208[1] = v201;
                v200 = v619 + 1;
                LODWORD(v619) = v619 + 1;
              }
              ++v201;
              v199 += 4;
              v28 = v204;
            }
            while (v68 != v201);
            if (v202)
              v212 = v200 == 0;
            else
              v212 = 1;
            if (v212)
            {
              LODWORD(v68) = 0;
              goto LABEL_485;
            }
            v295 = (llvm::BasicBlock *)*((_QWORD *)v30 + 5);
            if (v202[16] <= 0x1Bu)
            {
              v296 = (void **)v618;
              v297 = (void **)((char *)v618 + 16 * v200);
              goto LABEL_477;
            }
            if (!llvm::DominatorTree::dominates(a3, (const llvm::Instruction *)v202, *((const llvm::BasicBlock **)v30 + 5)))
            {
LABEL_484:
              LODWORD(v68) = 0;
              LODWORD(v28) = v204;
              goto LABEL_485;
            }
            if ((_DWORD)v619)
            {
              v296 = (void **)v618;
              v297 = (void **)((char *)v618 + 16 * v619);
LABEL_477:
              do
              {
                v340 = *((_DWORD *)v30 + 5);
                v341 = (v340 & 0x40000000) != 0
                     ? (llvm::Instruction *)*((_QWORD *)v30 - 1)
                     : (llvm::Instruction *)((char *)v30 - 32 * (v340 & 0x7FFFFFF));
                v342 = *v296;
                if (v342 != llvm::LazyValueInfo::getConstantOnEdge(a2, (llvm::ConstantInt ***)v202, *((llvm::BasicBlock **)v341+ 4 * *((unsigned int *)v30 + 15)+ *((unsigned int *)v296 + 2)), v295, v30))goto LABEL_484;
                v296 += 2;
              }
              while (v296 != v297);
            }
            LODWORD(v68) = 0;
            LODWORD(v28) = v204;
            if (sub_1C4F8BE80((uint64_t ***)v202, 0, (uint64_t)v30, (uint64_t)a3, 0, 1))
            {
              LODWORD(v68) = 1;
              llvm::Value::doRAUW(v30, (llvm::Value *)v202, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
              v343 = (_QWORD **)*((_QWORD *)v30 + 3);
              v344 = (_QWORD *)*((_QWORD *)v30 + 4);
              *v344 = v343;
              v343[1] = v344;
              *((_QWORD *)v30 + 3) = 0;
              *((_QWORD *)v30 + 4) = 0;
              llvm::Value::deleteValue(v30);
            }
          }
LABEL_485:
          if (v618 != &v620)
            free(v618);
LABEL_657:
          v26 = v572;
LABEL_658:
          v28 = v28 | v68;
LABEL_659:
          v27 = v29;
          if (v29 != v26)
            continue;
LABEL_746:
          v507 = (_QWORD *)*v26;
          if ((_QWORD *)*v26 == v26)
          {
            v509 = 0;
          }
          else
          {
            if (v507)
              v508 = v507 - 3;
            else
              v508 = 0;
            if (*((unsigned __int8 *)v508 + 16) - 29 >= 0xB)
              v509 = 0;
            else
              v509 = v508;
          }
          v510 = *((unsigned __int8 *)v509 + 16);
          if (v510 == 29)
          {
            v513 = *((_DWORD *)v509 + 5) & 0x7FFFFFF;
            if (!(_DWORD)v513)
              goto LABEL_815;
            v514 = (llvm::Value *)v509[-4 * v513];
            if (!v514 || *((unsigned __int8 *)v514 + 16) < 0x15u)
              goto LABEL_815;
            v515 = llvm::LazyValueInfo::getConstant(a2, v514, (llvm::Instruction *)v509);
            if (!v515)
            {
              v547 = *((unsigned __int8 *)v514 + 16);
              if (v547 < 0x1C || v547 - 83 < 0xFFFFFFFE)
                goto LABEL_815;
              v549 = (unsigned __int8 *)*((_QWORD *)v514 - 4);
              if (!v549 || v549[16] > 0x14u)
                goto LABEL_815;
              v551 = llvm::LazyValueInfo::getPredicateAt(a2, *((_WORD *)v514 + 9) & 0x3F, *((llvm::Value **)v514 - 8), (llvm::Constant *)v549, (llvm::Instruction *)v509, 0);
              if (v551 == -1)
                goto LABEL_815;
              if (v551 == 1)
              {
                v553 = **(uint64_t ***)v514;
                v554 = *v553;
                v515 = *(llvm::Value **)(*v553 + 1560);
                if (v515)
                  goto LABEL_762;
                v555 = *(llvm::ConstantInt **)(v554 + 1888);
                v556 = *(_DWORD *)(v554 + 1896);
                LODWORD(v619) = v556 >> 8;
                if (v556 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v618, 1, 0);
                }
                else
                {
                  if (v556 <= 0xFF)
                    v557 = 0;
                  else
                    v557 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v556);
                  v618 = (void *)(v557 & 1);
                }
                v515 = llvm::ConstantInt::get(v555, (llvm::LLVMContext *)&v618, v552);
                if (v619 >= 0x41 && v618)
                  MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
                *(_QWORD *)(v554 + 1560) = v515;
              }
              else
              {
                v560 = **(uint64_t ***)v514;
                v561 = *v560;
                v515 = *(llvm::Value **)(*v560 + 1568);
                if (v515)
                  goto LABEL_762;
                v562 = *(llvm::ConstantInt **)(v561 + 1888);
                LODWORD(v619) = *(_DWORD *)(v561 + 1896) >> 8;
                if (v619 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v618, 0, 0);
                else
                  v618 = 0;
                v515 = llvm::ConstantInt::get(v562, (llvm::LLVMContext *)&v618, v552);
                if (v619 >= 0x41 && v618)
                  MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
                *(_QWORD *)(v561 + 1568) = v515;
              }
              if (!v515)
                goto LABEL_815;
            }
LABEL_762:
            llvm::User::replaceUsesOfWith((llvm::User *)v509, v514, v515);
            LODWORD(v28) = 1;
            goto LABEL_815;
          }
          if (v510 == 31)
          {
            v618 = &v620;
            v619 = 0x1000000000;
            v623 = 0;
            v624 = 0;
            v625 = a3;
            v626 = 0;
            v627 = 1;
            v628 = v632;
            v629 = v632;
            v630 = 8;
            v631 = 0;
            memset(v633, 0, sizeof(v633));
            v634 = 0;
            v511 = *((_DWORD *)v509 + 5);
            v571 = v28;
            if ((v511 & 0x40000000) != 0)
              v512 = (llvm::Value **)*(v509 - 1);
            else
              v512 = (llvm::Value **)&v509[-4 * (v511 & 0x7FFFFFF)];
            v516 = *v512;
            v517 = (llvm::BasicBlock *)v509[5];
            v601 = 0;
            v600 = 0;
            LODWORD(v602) = 0;
            v518 = (_QWORD *)*((_QWORD *)v517 + 5);
            if (v518 != (_QWORD *)((char *)v517 + 40))
            {
              if (v518)
                v519 = v518 - 3;
              else
                v519 = 0;
              if (*((_BYTE *)v519 + 16) != 30)
              {
                v520 = 2;
                switch(*((_BYTE *)v519 + 16))
                {
                  case 0x1E:
                    __break(1u);
                    goto LABEL_881;
                  case 0x1F:
                    v520 = (*((_DWORD *)v519 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_837;
                  case 0x20:
                  case 0x26:
                    v520 = (*((_DWORD *)v519 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_837;
                  case 0x21:
                    goto LABEL_772;
                  case 0x24:
                    v520 = *((_WORD *)v519 + 9) & 1;
                    goto LABEL_837;
                  case 0x25:
                    v520 = 1;
                    goto LABEL_772;
                  case 0x27:
                    v520 = *((_DWORD *)v519 + 20) + 1;
LABEL_837:
                    if (!v520)
                      goto LABEL_774;
                    goto LABEL_772;
                  default:
                    goto LABEL_774;
                }
              }
              if ((*((_DWORD *)v519 + 5) & 0x7FFFFFF) == 3)
                v520 = 2;
              else
                v520 = 1;
LABEL_772:
              for (j = 0; j != v520; ++j)
              {
                Successor = (void **)llvm::Instruction::getSuccessor((llvm::Instruction *)v519, j);
                v522 = sub_1C5AE3674((uint64_t)&v600, (uint64_t *)&Successor);
                ++*(_DWORD *)(v522 + 8);
              }
            }
LABEL_774:
            Successor = (void **)v509;
            LOBYTE(False) = 0;
            v613[0] = 0;
            v614 = 0;
            llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&Successor, (const llvm::SwitchInst *)v16);
            v523 = Successor;
            v524 = (*((_DWORD *)Successor + 5) >> 1) & 0x3FFFFFF;
            v525 = (v524 - 1);
            if (v524 == 1)
            {
              sub_1C5AE380C((uint64_t)&Successor);
              v559 = v571;
            }
            else
            {
              v526 = 0;
              v527 = 0;
LABEL_776:
              v528 = 2 * v527 + 3;
              do
              {
                v529 = *((_DWORD *)v523 + 5);
                if ((v529 & 0x40000000) != 0)
                  v530 = (void **)*(v523 - 1);
                else
                  v530 = &v523[-4 * (v529 & 0x7FFFFFF)];
                v531 = (void ***)v530[4 * ((v528 - 1) & 0xFFFFFFFE)];
                v532 = llvm::LazyValueInfo::getPredicateAt(a2, 32, v516, (llvm::Constant *)v531, (llvm::Instruction *)v509, 1);
                if (v532 == 1)
                {
                  v542 = *((_DWORD *)Successor + 5);
                  if ((v542 & 0x40000000) != 0)
                    v543 = (void **)*(Successor - 1);
                  else
                    v543 = &Successor[-4 * (v542 & 0x7FFFFFF)];
                  v559 = v571;
                  if (*v543)
                  {
                    *(_QWORD *)v543[2] = v543[1];
                    v558 = v543[1];
                    if (v558)
                      v558[2] = v543[2];
                  }
                  *v543 = v531;
                  if (v531)
                  {
                    v546 = v531[1];
                    v545 = v531 + 1;
                    v544 = v546;
                    v543[1] = v546;
                    if (v546)
                      v544[2] = v543 + 1;
                    v543[2] = v545;
                    *v545 = v543;
                  }
                  sub_1C5AE380C((uint64_t)&Successor);
                  goto LABEL_808;
                }
                if (!v532)
                {
                  v605 = 0;
                  v533 = *((_DWORD *)v523 + 5);
                  if ((v533 & 0x40000000) != 0)
                    v534 = (void **)*(v523 - 1);
                  else
                    v534 = &v523[-4 * (v533 & 0x7FFFFFF)];
                  v535 = v528;
                  if ((_DWORD)v527 == -2)
                    v535 = 1;
                  v536 = (llvm::BasicBlock *)v534[4 * v535];
                  v605 = v536;
                  llvm::BasicBlock::removePredecessor(v536, v517, 0);
                  if (v613[0])
                  {
                    v614 = 1;
                    *((_DWORD *)False + (v527 + 1)) = *((_DWORD *)False + v609 - 1);
                    LODWORD(v609) = v609 - 1;
                  }
                  v523 = (void **)llvm::SwitchInst::removeCase((uint64_t)Successor, (uint64_t)v523, v527);
                  v527 = v537;
                  v538 = *((_DWORD *)Successor + 5);
                  if ((v538 & 0x40000000) != 0)
                    v539 = (llvm::Value **)*(Successor - 1);
                  else
                    v539 = (llvm::Value **)&Successor[-4 * (v538 & 0x7FFFFFF)];
                  v516 = *v539;
                  v540 = sub_1C5AE3674((uint64_t)&v600, (uint64_t *)&v605);
                  v541 = *(_DWORD *)(v540 + 8) - 1;
                  *(_DWORD *)(v540 + 8) = v541;
                  if (!v541)
                  {
                    __src = v517;
                    v617 = (unint64_t)v536 | 4;
                    llvm::DomTreeUpdater::applyUpdatesPermissive(&v618, (uint64_t *)&__src, 1);
                  }
                  v525 = ((v538 >> 1) & 0x3FFFFFF) - 1;
                  v526 = 1;
                  if (v527 == v525)
                  {
                    sub_1C5AE380C((uint64_t)&Successor);
                    v559 = v571;
LABEL_808:
                    llvm::ConstantFoldTerminator((uint64_t)v517, 0, 0, (uint64_t)&v618);
                    LODWORD(v525) = 1;
                    goto LABEL_810;
                  }
                  goto LABEL_776;
                }
                ++v527;
                v528 += 2;
              }
              while (v525 != v527);
              sub_1C5AE380C((uint64_t)&Successor);
              v559 = v571;
              if ((v526 & 1) != 0)
                goto LABEL_808;
              LODWORD(v525) = 0;
            }
LABEL_810:
            MEMORY[0x1CAA32FB4](v600, 8);
            llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v618);
            Successor = (void **)v633;
            sub_1C50B10F0(&Successor);
            if (v629 != v628)
              free(v629);
            if (v618 != &v620)
              free(v618);
            LODWORD(v28) = v559 | v525;
          }
LABEL_815:
          v19 = v568 | v28;
          sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v578);
          goto LABEL_19;
        case 'T':
          goto LABEL_63;
        case 'U':
          if ((*(_DWORD *)(*(_QWORD *)v30 + 8) & 0xFE) == 0x12)
            goto LABEL_310;
          v16 = (unsigned __int8 *)*((_QWORD *)v30 - 12);
          if (v16[16] < 0x15u)
            goto LABEL_310;
          v77 = llvm::LazyValueInfo::getConstant(a2, (llvm::Value *)v16, v30);
          if (!v77 || *((_BYTE *)v77 + 16) != 16)
            goto LABEL_310;
          v78 = *((_DWORD *)v77 + 8);
          if (v78 > 0x40)
            v79 = llvm::APInt::countLeadingZerosSlowCase((llvm::ValueHandleBase *)((char *)v77 + 24)) == v78 - 1;
          else
            v79 = *((_QWORD *)v77 + 3) == 1;
          v336 = v79;
          v24 = v336 == 0;
          v337 = -32;
          if (!v24)
            v337 = -64;
          v197 = *(llvm::Value **)((char *)v30 + v337);
          goto LABEL_472;
        default:
          if (v31 != 33)
            goto LABEL_659;
LABEL_63:
          v51 = *((_QWORD *)v30 - 4);
          if (!v51
            || *(_BYTE *)(v51 + 16)
            || *(_QWORD *)(v51 + 24) != *((_QWORD *)v30 + 9)
            || *(_DWORD *)(v51 + 36) != 1)
          {
            if (sub_1C57A2C04((uint64_t)v30))
            {
              v113 = *(_DWORD *)(*((_QWORD *)v30 - 4) + 36);
              if (v113 > 304)
              {
                if (v113 == 306)
                  v114 = 36;
                else
                  v114 = 34;
              }
              else if (v113 == 274)
              {
                v114 = 38;
              }
              else
              {
                v114 = 40;
              }
              v213 = (v114 - 2) >> 1;
              if (v213 <= 0x13 && ((0xF0033u >> v213) & 1) != 0)
                v114 = dword_1C8668798[v213];
              v214 = (llvm::Value **)((char *)v30 - 32 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
              v215 = llvm::LazyValueInfo::getPredicateAt(a2, v114, *v214, v214[4], v30, 1);
              if (v215 == -1)
              {
LABEL_310:
                LODWORD(v68) = 0;
              }
              else
              {
                v197 = (llvm::Value *)*((_QWORD *)v30 + 4 * (v215 == 0) + -4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
LABEL_472:
                LODWORD(v68) = 1;
                v196 = v30;
LABEL_473:
                llvm::Value::doRAUW(v196, v197, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
                v338 = (_QWORD **)*((_QWORD *)v30 + 3);
                v339 = (_QWORD *)*((_QWORD *)v30 + 4);
                *v339 = v338;
                v338[1] = v339;
                *((_QWORD *)v30 + 3) = 0;
                *((_QWORD *)v30 + 4) = 0;
                llvm::Value::deleteValue(v30);
              }
              goto LABEL_658;
            }
            if (sub_1C4E8FD48((uint64_t)v30)
              && *(_BYTE *)(**((_QWORD **)v30 - 4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF)) + 8) == 13
              && sub_1C5AE3400((llvm::Value **)v30, a2))
            {
              sub_1C4773D54((uint64_t)&v618, (uint64_t)v30, 0, 0, 0);
              v126 = 13;
              v127 = *(_DWORD *)(*((_QWORD *)v30 - 4) + 36) - 262;
              if (((1 << (*(_BYTE *)(*((_QWORD *)v30 - 4) + 36) - 6)) & 0xC000000003) == 0)
              {
                if (((1 << v127) & 0x6000000600000) != 0)
                  v126 = 15;
                else
                  v126 = 17;
              }
              v441 = *((_DWORD *)v30 + 5);
              v442 = (_QWORD ***)((char *)v30 - 32 * (v441 & 0x7FFFFFF));
              v443 = *v442;
              v444 = (uint64_t)v442[4];
              if ((v441 & 0x10000000) != 0)
              {
                v445 = ***(_QWORD ***)v30;
                v446 = *(_QWORD *)(v445 + 152);
                v447 = *(unsigned int *)(v445 + 168);
                if ((_DWORD)v447)
                {
                  LODWORD(v448) = (v447 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                  v449 = (llvm::Instruction **)(v446 + 16 * v448);
                  v450 = *v449;
                  if (*v449 != v30)
                  {
                    v451 = 1;
                    do
                    {
                      if (v450 == (llvm::Instruction *)-4096)
                        goto LABEL_610;
                      v452 = v448 + v451++;
                      v448 = v452 & (v447 - 1);
                      v450 = *(llvm::Instruction **)(v446 + 16 * v448);
                    }
                    while (v450 != v30);
                    v449 = (llvm::Instruction **)(v446 + 16 * v448);
                  }
                }
                else
                {
LABEL_610:
                  v449 = (llvm::Instruction **)(v446 + 16 * v447);
                }
                v453 = v449[1];
                v456 = *(llvm::Value ***)v453;
                v455 = (void **)((char *)v453 + 16);
                v454 = v456;
              }
              else
              {
                v454 = 0;
                v455 = (void **)&byte_1C871356D;
              }
              v611[0] = 261;
              Successor = v455;
              False = v454;
              v457 = sub_1C4773860((uint64_t)&v618, v126, v443, v444, (uint64_t)&Successor, 0);
              v459 = v457;
              if (v457[16] <= 0x1Bu)
                v460 = 0;
              else
                v460 = v457;
              if (v460)
                v461 = (v127 < 0x17) & (0x610003u >> v127);
              else
                v461 = 0;
              if (v461 == 1)
                v460[17] |= 4u;
              if ((((v127 > 0x16) | (0x1EFFFCu >> v127)) & (v460 != 0)) == 1)
                v460[17] |= 2u;
              v462 = *(llvm::ConstantAggregateZero **)v30;
              Successor = (void **)llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)v30 + 16), v458);
              False = llvm::ConstantInt::getFalse(*(uint64_t ***)(*((_QWORD *)v462 + 2) + 8), v463, v464);
              v465 = llvm::ConstantStruct::get(v462, (llvm::Type *)&Successor, 2);
              LODWORD(v600) = 0;
              v611[0] = 257;
              v466 = (llvm::Value *)sub_1C506D788((uint64_t)&v618, (uint64_t)v465, (uint64_t)v459, &v600, 1, (uint64_t)&Successor);
              llvm::Value::doRAUW(v30, v466, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
              v467 = (_QWORD **)*((_QWORD *)v30 + 3);
              v468 = (_QWORD *)*((_QWORD *)v30 + 4);
              *v468 = v467;
              v467[1] = v468;
              *((_QWORD *)v30 + 3) = 0;
              *((_QWORD *)v30 + 4) = 0;
              llvm::Value::deleteValue(v30);
              v469 = v459[16];
              if (v469 >= 0x1C && v469 - 59 >= 0xFFFFFFEE)
                sub_1C5AE3144((llvm::Instruction *)v459, a2);
              if (v618 != &v620)
                free(v618);
              LODWORD(v68) = 1;
              goto LABEL_657;
            }
            if (!sub_1C5AE360C((uint64_t)v30)
              || *(_BYTE *)(*(_QWORD *)v30 + 8) != 13
              || !sub_1C5AE3400((llvm::Value **)v30, a2))
            {
              sub_1C5062CEC((uint64_t)v30, 0, (uint64_t)&v618);
              if ((_BYTE)v621)
              {
                if (v619)
                {
                  v155 = 0;
                  v156 = 32 * v619;
                  v157 = (_QWORD **)((char *)v618 + 8);
                  do
                  {
                    v158 = v157 - 1;
                    v16 = (unsigned __int8 *)*(v157 - 1);
                    if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) != 0x12 && v16[16] >= 0x15u)
                    {
                      v159 = llvm::LazyValueInfo::getConstant(a2, (llvm::Value *)v16, v30);
                      if (v159)
                      {
                        if (*v158)
                        {
                          *v157[1] = *v157;
                          if (*v157)
                            (*v157)[2] = v157[1];
                        }
                        *(v157 - 1) = v159;
                        v162 = (_QWORD *)*((_QWORD *)v159 + 1);
                        v160 = (_QWORD *)((char *)v159 + 8);
                        v161 = v162;
                        *v157 = v162;
                        if (v162)
                          v161[2] = v157;
                        v157[1] = v160;
                        *v160 = v158;
                        v155 = 1;
                      }
                    }
                    v157 += 4;
                    v156 -= 32;
                  }
                  while (v156);
                }
                else
                {
                  v155 = 0;
                }
                LODWORD(v68) = v155 & 1;
                v26 = v572;
              }
              else
              {
                LODWORD(v68) = 0;
              }
              v618 = &v620;
              v619 = 0x400000000;
              v259 = *((_DWORD *)v30 + 5);
              v260 = *((unsigned __int8 *)v30 + 16);
              if (v260 == 84)
              {
                v261 = 0;
              }
              else
              {
                if (v260 == 39)
                  v261 = (*((_DWORD *)v30 + 20) + 1);
                else
                  v261 = 2;
                v26 = v572;
              }
              v262 = v259 & 0x7FFFFFF;
              v263 = (_QWORD ***)((char *)v30 - 32 * v262);
              if (v259 < 0)
              {
                v506 = (uint64_t)*(v263 - 1);
                if ((v506 & 0xFFFFFFFF0) != 0)
                  v264 = (*((_DWORD *)v263 - 3) - *(_DWORD *)((char *)v263 - v506));
                else
                  v264 = 0;
                v26 = v572;
              }
              else
              {
                v264 = 0;
              }
              if (v263 != (_QWORD ***)((char *)v30 + -32 * v264 + -32 * v261 - 32))
              {
                v265 = v28;
                v266 = 0;
                v267 = (32 * v261 + 32 * v264) ^ 0xFFFFFFFFFFFFFFE0;
                v268 = -32 * v262;
                do
                {
                  v269 = *(unsigned __int8 **)((char *)v30 + v268);
                  v270 = *(llvm::ConstantPointerNull **)v269;
                  if (*(_QWORD *)v269)
                    v271 = *(_BYTE *)(*(_QWORD *)v269 + 8) == 15;
                  else
                    v271 = 0;
                  if (v271 && (llvm::CallBase::paramHasAttr((uint64_t)v30, v266, 39) & 1) == 0 && v269[16] >= 0x15u)
                  {
                    v272 = (llvm::Constant *)llvm::ConstantPointerNull::get(v270, (llvm::PointerType *)v16);
                    if (!llvm::LazyValueInfo::getPredicateAt(a2, 32, (llvm::Value *)v269, v272, v30, 0))
                    {
                      v273 = v619;
                      if (v619 >= (unint64_t)HIDWORD(v619))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v619 + 1, 4);
                        v273 = v619;
                      }
                      *((_DWORD *)v618 + v273) = v266;
                      LODWORD(v619) = v619 + 1;
                    }
                  }
                  ++v266;
                  v268 += 32;
                }
                while (v267 != v268);
                v274 = v619;
                v275 = (const char **)v618;
                if ((_DWORD)v619)
                {
                  Successor = (void **)*((_QWORD *)v30 + 8);
                  v276 = **(uint64_t ***)v30;
                  v277 = llvm::Attribute::get(v276, 39, 0);
                  *((_QWORD *)v30 + 8) = llvm::AttributeList::addParamAttribute(&Successor, v276, v275, v274, v277);
                  LODWORD(v68) = 1;
                  v275 = (const char **)v618;
                }
                LODWORD(v28) = v265;
                v26 = v572;
                if (v275 != &v620)
                  free(v275);
              }
              goto LABEL_658;
            }
            v149 = 13;
            v150 = *(_DWORD *)(*((_QWORD *)v30 - 4) + 36) - 262;
            if (((1 << (*(_BYTE *)(*((_QWORD *)v30 - 4) + 36) - 6)) & 0xC000000003) == 0)
            {
              if (((1 << v150) & 0x6000000600000) != 0)
                v149 = 15;
              else
                v149 = 17;
            }
            v470 = *((_DWORD *)v30 + 5);
            if ((v470 & 0x10000000) != 0)
            {
              v471 = ***(_QWORD ***)v30;
              v472 = *(_QWORD *)(v471 + 152);
              v473 = *(unsigned int *)(v471 + 168);
              if ((_DWORD)v473)
              {
                LODWORD(v474) = (v473 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                v475 = (llvm::Instruction **)(v472 + 16 * v474);
                v476 = *v475;
                if (*v475 != v30)
                {
                  v477 = 1;
                  do
                  {
                    if (v476 == (llvm::Instruction *)-4096)
                      goto LABEL_638;
                    v478 = v474 + v477++;
                    v474 = v478 & (v473 - 1);
                    v476 = *(llvm::Instruction **)(v472 + 16 * v474);
                  }
                  while (v476 != v30);
                  v475 = (llvm::Instruction **)(v472 + 16 * v474);
                }
              }
              else
              {
LABEL_638:
                v475 = (llvm::Instruction **)(v472 + 16 * v473);
              }
              v479 = v475[1];
              v482 = *(_QWORD *)v479;
              v481 = (char *)v479 + 16;
              v480 = v482;
            }
            else
            {
              v480 = 0;
              v481 = &byte_1C871356D;
            }
            v483 = (_QWORD ***)((char *)v30 - 32 * (v470 & 0x7FFFFFF));
            v484 = *v483;
            v485 = (uint64_t)v483[4];
            v622 = 261;
            v618 = v481;
            v619 = v480;
            v486 = llvm::BinaryOperator::Create(v149, v484, v485, (uint64_t)&v618, (uint64_t)v30);
            v487 = (_QWORD **)*((_QWORD *)v30 + 6);
            v618 = v487;
            if (v487)
              llvm::MetadataTracking::track((uint64_t)&v618, (unsigned __int8 *)v487, 2);
            v488 = (unsigned __int8 **)((char *)v486 + 48);
            if (&v618 == (void **)((char *)v486 + 48))
            {
              if (v618)
                llvm::MetadataTracking::untrack((uint64_t)&v618, (unsigned __int8 *)v618);
            }
            else
            {
              if (*v488)
                llvm::MetadataTracking::untrack((uint64_t)v486 + 48, *v488);
              v489 = (unsigned __int8 *)v618;
              *v488 = (unsigned __int8 *)v618;
              if (v489)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v618, v489, (uint64_t)v486 + 48);
                v618 = 0;
              }
            }
            v490 = (v150 < 0x17) & (0x610003u >> v150);
            if (*((unsigned __int8 *)v486 + 16) <= 0x1Bu)
              v491 = 0;
            else
              v491 = v486;
            if (!v491)
              v490 = 0;
            if (v490 == 1)
              *((_BYTE *)v491 + 17) |= 4u;
            if ((((v150 > 0x16) | (0x1EFFFCu >> v150)) & (v491 != 0)) == 1)
              *((_BYTE *)v491 + 17) |= 2u;
            LODWORD(v68) = 1;
            llvm::Value::doRAUW(v30, v486, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
            v492 = (_QWORD **)*((_QWORD *)v30 + 3);
            v493 = (_QWORD *)*((_QWORD *)v30 + 4);
            *v493 = v492;
            v492[1] = v493;
            *((_QWORD *)v30 + 3) = 0;
            *((_QWORD *)v30 + 4) = 0;
            llvm::Value::deleteValue(v30);
            sub_1C5AE3144(v486, a2);
            goto LABEL_657;
          }
          v52 = v28;
          v53 = (llvm::Value **)((char *)v30 - 32 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
          v54 = *v53;
          v55 = v53[4];
          v56 = (llvm::Value *)((char *)v55 + 24);
          v57 = *((_DWORD *)v55 + 8);
          if (v57 > 0x40)
            v58 = llvm::APInt::countLeadingZerosSlowCase(v56) == v57 - 1;
          else
            v58 = *(_QWORD *)v56 == 1;
          v128 = v58;
          v129 = *(llvm::Type **)v54;
          v130 = *(llvm::Type **)v54;
          if ((*(_DWORD *)(*(_QWORD *)v54 + 8) & 0xFE) == 0x12)
            v130 = (llvm::Type *)**((_QWORD **)v129 + 2);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v130);
          v133 = PrimitiveSizeInBits;
          LODWORD(v619) = PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40)
          {
            v135 = &v618;
            llvm::APInt::initSlowCase((llvm::APInt *)&v618, 0, 0);
            v134 = v133 - 1;
            if (v619 >= 0x41)
              v135 = (void **)((char *)v618 + 8 * (v134 >> 6));
          }
          else
          {
            v618 = 0;
            LOBYTE(v134) = PrimitiveSizeInBits - 1;
            v135 = &v618;
          }
          *v135 = (void *)((1 << v134) | (unint64_t)*v135);
          v136 = llvm::ConstantInt::get((llvm::ConstantInt **)v129, (llvm::Type *)&v618, v132);
          if (v619 >= 0x41 && v618)
            MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
          if (llvm::LazyValueInfo::getPredicateAt(a2, 37, v54, (llvm::Constant *)v136, v30, 1) == 1)
          {
            LODWORD(v68) = 1;
            llvm::Value::doRAUW(v30, v54, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
            v138 = (_QWORD **)*((_QWORD *)v30 + 3);
            v139 = (_QWORD *)*((_QWORD *)v30 + 4);
            *v139 = v138;
            v138[1] = v139;
            *((_QWORD *)v30 + 3) = 0;
            *((_QWORD *)v30 + 4) = 0;
            llvm::Value::deleteValue(v30);
LABEL_174:
            LODWORD(v28) = v52;
            goto LABEL_657;
          }
          NullValue = llvm::Constant::getNullValue(v129, v137);
          if (llvm::LazyValueInfo::getPredicateAt(a2, 41, v54, (llvm::Constant *)NullValue, v30, 1) == -1)
          {
            if ((v128 & 1) != 0)
            {
              LODWORD(v68) = 0;
              goto LABEL_174;
            }
            if (llvm::LazyValueInfo::getPredicateAt(a2, 33, v54, (llvm::Constant *)v136, v30, 1) != 1)
            {
              LODWORD(v68) = 0;
              goto LABEL_174;
            }
            v250 = **(uint64_t ***)v30;
            v251 = *v250;
            v252 = *(llvm::ValueHandleBase **)(*v250 + 1560);
            LODWORD(v28) = v52;
            v26 = v572;
            if (!v252)
            {
              v497 = *(llvm::ConstantInt **)(v251 + 1888);
              v498 = *(_DWORD *)(v251 + 1896);
              LODWORD(v619) = v498 >> 8;
              if (v498 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v618, 1, 0);
              }
              else
              {
                if (v498 <= 0xFF)
                  LOBYTE(v499) = 0;
                else
                  v499 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v498);
                v618 = (void *)(v499 & 1);
              }
              v252 = llvm::ConstantInt::get(v497, (llvm::LLVMContext *)&v618, v249);
              if (v619 >= 0x41 && v618)
                MEMORY[0x1CAA32F9C](v618, 0x1000C8000313F17);
              *(_QWORD *)(v251 + 1560) = v252;
            }
            v253 = (_QWORD ***)((char *)v30 - 32 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
            v254 = (llvm::ValueHandleBase **)(v253 + 4);
            if (v253[4])
            {
              *v253[6] = v253[5];
              v255 = v253[5];
              if (v255)
                v255[2] = v253[6];
            }
            *v254 = v252;
            if (v252)
            {
              v258 = (_QWORD **)*((_QWORD *)v252 + 1);
              v257 = (llvm::ValueHandleBase ***)((char *)v252 + 8);
              v256 = v258;
              v253[5] = v258;
              if (v258)
                v256[2] = v253 + 5;
              v253[6] = v257;
              *v257 = v254;
            }
          }
          else
          {
            sub_1C4773D54((uint64_t)&v618, (uint64_t)v30, 0, 0, 0);
            if ((*((_BYTE *)v30 + 23) & 0x10) != 0)
            {
              v141 = ***(_QWORD ***)v30;
              v142 = *(_QWORD *)(v141 + 152);
              v143 = *(unsigned int *)(v141 + 168);
              if ((_DWORD)v143)
              {
                LODWORD(v144) = (v143 - 1) & ((v30 >> 4) ^ (v30 >> 9));
                v145 = (llvm::Instruction **)(v142 + 16 * v144);
                v146 = *v145;
                if (*v145 != v30)
                {
                  v147 = 1;
                  do
                  {
                    if (v146 == (llvm::Instruction *)-4096)
                      goto LABEL_439;
                    v148 = v144 + v147++;
                    v144 = v148 & (v143 - 1);
                    v146 = *(llvm::Instruction **)(v142 + 16 * v144);
                  }
                  while (v146 != v30);
                  v145 = (llvm::Instruction **)(v142 + 16 * v144);
                }
              }
              else
              {
LABEL_439:
                v145 = (llvm::Instruction **)(v142 + 16 * v143);
              }
              v317 = v145[1];
              v320 = *(llvm::Value ***)v317;
              v319 = (void **)((char *)v317 + 16);
              v318 = v320;
            }
            else
            {
              v318 = 0;
              v319 = (void **)&byte_1C871356D;
            }
            v611[0] = 261;
            Successor = v319;
            False = v318;
            v321 = sub_1C5346748((uint64_t)&v618, (uint64_t)v54, (uint64_t)&Successor, 0, v128);
            llvm::Value::doRAUW(v30, (llvm::Value *)v321, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v30 + 5) + 40, (uint64_t ***)v30);
            v322 = (_QWORD **)*((_QWORD *)v30 + 3);
            v323 = (_QWORD *)*((_QWORD *)v30 + 4);
            *v323 = v322;
            v322[1] = v323;
            *((_QWORD *)v30 + 3) = 0;
            *((_QWORD *)v30 + 4) = 0;
            llvm::Value::deleteValue(v30);
            if (v321)
            {
              v324 = v321[16];
              v325 = v324 >= 0x1C && v324 - 59 >= 0xFFFFFFEE;
              if (v325)
                sub_1C5AE3144((llvm::Instruction *)v321, a2);
            }
            v26 = v572;
            LODWORD(v28) = v52;
            if (v618 != &v620)
              free(v618);
          }
LABEL_450:
          LODWORD(v68) = 1;
          goto LABEL_658;
      }
    }
  }
LABEL_859:
  if (v575)
  {
    v576 = v575;
    operator delete(v575);
  }
  if (v573 != v574)
    free(v573);
  if (__p)
  {
    v585 = (char *)__p;
    operator delete(__p);
  }
  if (v579 != v578)
    free(v579);
  if (v598)
  {
    v599 = v598;
    operator delete(v598);
  }
  if (v595 != v594)
    free(v595);
  if (v592)
  {
    v593 = v592;
    operator delete(v592);
  }
  if (v588 != v587)
    free(v588);
  return v19 & 1;
}

uint64_t sub_1C5AE29CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5ADEF88(v0);
}

void sub_1C5AE29F8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5AE2A1C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
}

uint64_t sub_1C5AE2AA0(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  llvm::LazyValueInfo *v10;
  llvm::DominatorTree *v11;
  _BYTE v12[48];

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LazyValueInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LazyValueInfoWrapperPass::ID);
  v8 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::DominatorTreeWrapperPass::ID);
  v10 = (llvm::LazyValueInfo *)(v7 + 32);
  v11 = (llvm::DominatorTree *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32);
  llvm::getBestSimplifyQuery(a1, a2, (uint64_t)v12);
  return sub_1C5ADF270((uint64_t)a2, v10, v11, (uint64_t)v12);
}

uint64_t sub_1C5AE2B74(llvm::Instruction *a1, llvm::LazyValueInfo *this)
{
  int v4;
  unint64_t v5;
  llvm::Value **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int ActiveBits;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Instruction *v22;
  int v23;
  int v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Instruction *v36;
  int v37;
  int v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Instruction *v50;
  int v51;
  int v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Instruction *v64;
  int v65;
  int v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  int v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  __int16 v80;
  void *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    return 0;
  v4 = *((_DWORD *)a1 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (llvm::Value **)*((_QWORD *)a1 - 1);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_21;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (llvm::Value **)((char *)a1 - 32 * v5);
    if (!v5)
      goto LABEL_21;
  }
  LODWORD(v7) = 0;
  v8 = 32 * v5;
  do
  {
    llvm::LazyValueInfo::getConstantRange(this, *v6, a1, 1, &v81);
    ActiveBits = llvm::ConstantRange::getActiveBits((llvm::ConstantRange *)&v81);
    if (ActiveBits <= v7)
      v7 = v7;
    else
      v7 = ActiveBits;
    if (v84 >= 0x41 && v83)
      MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
    if (v82 >= 0x41 && v81)
      MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
    v6 += 4;
    v8 -= 32;
  }
  while (v8);
  if ((_DWORD)v7)
  {
    v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1) | (((v7 - 1) | ((unint64_t)(v7 - 1) >> 1)) >> 2);
    v5 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    LODWORD(v5) = ((v5 >> 16) | v5) + 1;
  }
  else
  {
    LODWORD(v5) = 0;
  }
LABEL_21:
  if (v5 <= 8)
    v11 = 8;
  else
    v11 = v5;
  if (v11 >= *(_DWORD *)(*(_QWORD *)a1 + 8) >> 8)
    return 0;
  sub_1C4773D54((uint64_t)&v81, (uint64_t)a1, 0, 0, 0);
  v12 = **(_QWORD ***)a1;
  LODWORD(v77) = v11;
  if (v11 <= 63)
  {
    switch(v11)
    {
      case 32:
        v13 = (_QWORD *)(*v12 + 1960);
        goto LABEL_33;
      case 16:
        v13 = (_QWORD *)(*v12 + 1936);
        goto LABEL_33;
      case 8:
        v13 = (_QWORD *)(*v12 + 1912);
        goto LABEL_33;
    }
  }
  else
  {
    if (v11 == 64)
    {
      v13 = (_QWORD *)(*v12 + 1984);
      goto LABEL_33;
    }
    if (v11 == 128)
    {
      v13 = (_QWORD *)(*v12 + 2008);
      goto LABEL_33;
    }
  }
  v74 = sub_1C5270984(*v12 + 2168, &v77);
  v13 = (_QWORD *)*((_QWORD *)v74 + 1);
  if (!v13)
  {
    v75 = v74;
    v13 = (_QWORD *)sub_1C484358C(*v12 + 2040, 24, 3);
    v76 = (int)v77;
    *v13 = v12;
    v13[2] = 0;
    v13[1] = (v76 << 8) | 0xDu;
    *((_QWORD *)v75 + 1) = v13;
  }
LABEL_33:
  v15 = (unsigned __int8 *)*((_QWORD *)a1 - 8);
  v16 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v17 = ***(_QWORD ***)a1;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & (v16 ^ (a1 >> 9));
      v21 = v18 + 16 * v20;
      v22 = *(llvm::Instruction **)v21;
      if (*(llvm::Instruction **)v21 == a1)
      {
LABEL_41:
        v25 = *(_QWORD **)(v21 + 8);
        v28 = *v25;
        v26 = (char *)(v25 + 2);
        v27 = v28;
        goto LABEL_42;
      }
      v23 = 1;
      while (v22 != (llvm::Instruction *)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(llvm::Instruction **)(v18 + 16 * v20);
        if (v22 == a1)
        {
          v21 = v18 + 16 * v20;
          goto LABEL_41;
        }
      }
    }
    v21 = v18 + 16 * v19;
    goto LABEL_41;
  }
  v27 = 0;
  v26 = &byte_1C871356D;
LABEL_42:
  v80 = 773;
  v77 = v26;
  v78 = v27;
  v79 = ".lhs.trunc";
  v29 = sub_1C5390E08((uint64_t *)&v81, v15, (uint64_t)v13, (uint64_t)&v77);
  v30 = (unsigned __int8 *)*((_QWORD *)a1 - 4);
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v31 = ***(_QWORD ***)a1;
    v32 = *(_QWORD *)(v31 + 152);
    v33 = *(unsigned int *)(v31 + 168);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & (v16 ^ (a1 >> 9));
      v35 = v32 + 16 * v34;
      v36 = *(llvm::Instruction **)v35;
      if (*(llvm::Instruction **)v35 == a1)
      {
LABEL_50:
        v39 = *(_QWORD **)(v35 + 8);
        v42 = *v39;
        v40 = (char *)(v39 + 2);
        v41 = v42;
        goto LABEL_51;
      }
      v37 = 1;
      while (v36 != (llvm::Instruction *)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(llvm::Instruction **)(v32 + 16 * v34);
        if (v36 == a1)
        {
          v35 = v32 + 16 * v34;
          goto LABEL_50;
        }
      }
    }
    v35 = v32 + 16 * v33;
    goto LABEL_50;
  }
  v41 = 0;
  v40 = &byte_1C871356D;
LABEL_51:
  v80 = 773;
  v77 = v40;
  v78 = v41;
  v79 = ".rhs.trunc";
  v43 = sub_1C5390E08((uint64_t *)&v81, v30, (uint64_t)v13, (uint64_t)&v77);
  v44 = *((unsigned __int8 *)a1 + 16) - 28;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v45 = ***(_QWORD ***)a1;
    v46 = *(_QWORD *)(v45 + 152);
    v47 = *(unsigned int *)(v45 + 168);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = (v47 - 1) & (v16 ^ (a1 >> 9));
      v49 = v46 + 16 * v48;
      v50 = *(llvm::Instruction **)v49;
      if (*(llvm::Instruction **)v49 == a1)
      {
LABEL_59:
        v53 = *(_QWORD **)(v49 + 8);
        v56 = *v53;
        v54 = (char *)(v53 + 2);
        v55 = v56;
        goto LABEL_60;
      }
      v51 = 1;
      while (v50 != (llvm::Instruction *)-4096)
      {
        v52 = v48 + v51++;
        v48 = v52 & (v47 - 1);
        v50 = *(llvm::Instruction **)(v46 + 16 * v48);
        if (v50 == a1)
        {
          v49 = v46 + 16 * v48;
          goto LABEL_59;
        }
      }
    }
    v49 = v46 + 16 * v47;
    goto LABEL_59;
  }
  v55 = 0;
  v54 = &byte_1C871356D;
LABEL_60:
  v80 = 261;
  v77 = v54;
  v78 = v55;
  v57 = sub_1C4773860((uint64_t)&v81, v44, v29, (uint64_t)v43, (uint64_t)&v77, 0);
  v58 = *(uint64_t ***)a1;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v59 = **v58;
    v60 = *(_QWORD *)(v59 + 152);
    v61 = *(unsigned int *)(v59 + 168);
    if ((_DWORD)v61)
    {
      LODWORD(v62) = (v61 - 1) & (v16 ^ (a1 >> 9));
      v63 = v60 + 16 * v62;
      v64 = *(llvm::Instruction **)v63;
      if (*(llvm::Instruction **)v63 == a1)
      {
LABEL_68:
        v67 = *(_QWORD **)(v63 + 8);
        v70 = *v67;
        v68 = (char *)(v67 + 2);
        v69 = v70;
        goto LABEL_69;
      }
      v65 = 1;
      while (v64 != (llvm::Instruction *)-4096)
      {
        v66 = v62 + v65++;
        v62 = v66 & (v61 - 1);
        v64 = *(llvm::Instruction **)(v60 + 16 * v62);
        if (v64 == a1)
        {
          v63 = v60 + 16 * v62;
          goto LABEL_68;
        }
      }
    }
    v63 = v60 + 16 * v61;
    goto LABEL_68;
  }
  v69 = 0;
  v68 = &byte_1C871356D;
LABEL_69:
  v80 = 773;
  v77 = v68;
  v78 = v69;
  v79 = ".zext";
  v71 = sub_1C4773E38((uint64_t *)&v81, 39, v57, (uint64_t)v58, (uint64_t)&v77);
  if (v57[16] == 47 && v57)
    v57[17] = v57[17] & 0xFD | *((_BYTE *)a1 + 17) & 2;
  llvm::Value::doRAUW(a1, (llvm::Value *)v71, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a1 + 5) + 40, (uint64_t ***)a1);
  v72 = *((_QWORD *)a1 + 3);
  v73 = (_QWORD *)*((_QWORD *)a1 + 4);
  *v73 = v72;
  *(_QWORD *)(v72 + 8) = v73;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  llvm::Value::deleteValue(a1);
  if (v81 != &v83)
    free(v81);
  return 1;
}

BOOL sub_1C5AE3144(llvm::Instruction *a1, llvm::LazyValueInfo *this)
{
  int v3;
  _BOOL8 v4;
  int v6;
  llvm::Value *v7;
  _BOOL8 v8;
  _BOOL4 v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  llvm::Instruction *v13;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;

  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    return 0;
  v3 = *((unsigned __int8 *)a1 + 17);
  if ((~v3 & 6) == 0)
    return 0;
  v6 = *((unsigned __int8 *)a1 + 16) - 28;
  v7 = (llvm::Value *)*((_QWORD *)a1 - 4);
  llvm::LazyValueInfo::getConstantRange(this, *((llvm::Value **)a1 - 8), a1, 1, &v25);
  llvm::LazyValueInfo::getConstantRange(this, v7, a1, 1, &v21);
  if ((v3 & 2) != 0)
  {
    v8 = 0;
  }
  else
  {
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&v21, v6, 1, (uint64_t)&v17);
    v8 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v17, (const llvm::ConstantRange *)&v25);
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    if (v18 >= 0x41 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  if ((v3 & 4) != 0)
  {
    v15 = *((unsigned __int8 *)a1 + 16);
    v12 = v15 > 0x1B;
    if (v15 <= 0x1B)
      v13 = 0;
    else
      v13 = a1;
    v4 = v8;
  }
  else
  {
    llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&v21, v6, 2, (uint64_t)&v17);
    v9 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v17, (const llvm::ConstantRange *)&v25);
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    v4 = v8 | v9;
    if (v18 >= 0x41 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    v10 = *((unsigned __int8 *)a1 + 16);
    v11 = v10 > 0x1B;
    v12 = v10 > 0x1B;
    if (v10 <= 0x1B)
      v13 = 0;
    else
      v13 = a1;
    if (v11 && v9)
    {
      *((_BYTE *)v13 + 17) |= 4u;
      v12 = 1;
      v13 = a1;
    }
  }
  if (v8 && v12)
    *((_BYTE *)v13 + 17) |= 2u;
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  return v4;
}

BOOL sub_1C5AE3400(llvm::Value **a1, llvm::LazyValueInfo *this)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v9;
  _BOOL8 v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;

  llvm::LazyValueInfo::getConstantRange(this, a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)], (llvm::Instruction *)a1, 1, &v20);
  llvm::LazyValueInfo::getConstantRange(this, a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4], (llvm::Instruction *)a1, 1, &v16);
  v4 = 13;
  v5 = *((_DWORD *)*(a1 - 4) + 9) - 262;
  if (((1 << (*((_BYTE *)*(a1 - 4) + 36) - 6)) & 0xC000000003) == 0)
  {
    if (((1 << v5) & 0x6000000600000) != 0)
      v4 = 15;
    else
      v4 = 17;
  }
  v6 = v5 > 0x16;
  v7 = (1 << v5) & 0x610003;
  if (v6 || v7 == 0)
    v9 = 1;
  else
    v9 = 2;
  llvm::ConstantRange::makeGuaranteedNoWrapRegion((llvm::ConstantRange *)&v16, v4, v9, (uint64_t)&v12);
  v10 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v12, (const llvm::ConstantRange *)&v20);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  return v10;
}

unint64_t sub_1C5AE360C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36) - 262, v2 <= 0x31))
  {
    return (0x2004000200001uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C5AE3674(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C4F575EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5AE3754(a1, v7);
    v8 = 0;
    sub_1C4F575EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_1C5AE3754(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6311B18(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5AE380C(uint64_t result)
{
  unsigned __int8 **v1;
  llvm::MDNode *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 64))
  {
    v1 = *(unsigned __int8 ***)result;
    v4 = result;
    v2 = (llvm::MDNode *)llvm::SwitchInstProfUpdateWrapper::buildProfBranchWeightsMD((llvm::SwitchInstProfUpdateWrapper *)result);
    llvm::Instruction::setMetadata(v1, 2, v2);
    result = v4;
  }
  if (*(_BYTE *)(result + 56))
  {
    v3 = result;
    if (*(_QWORD *)(result + 8) != result + 24)
      free(*(void **)(result + 8));
    result = v3;
    *(_BYTE *)(v3 + 56) = 0;
  }
  return result;
}

__n128 sub_1C5AE3888(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81BB98, "canonicalize-icmp-predicates-to-unsigned", 0x28uLL);
  v6 = *a1;
  byte_1ED81BC18 = **a1;
  byte_1ED81BC29 = 1;
  byte_1ED81BC28 = *v6;
  word_1ED81BBA2 = (32 * (*a2 & 3)) | word_1ED81BBA2 & 0xFF9F;
  result = *a3;
  xmmword_1ED81BBB8 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5AE390C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enables canonicalization of signed relational predicates to unsigned (e.g. sgt => ugt)";
  v1.n128_u64[1] = 86;
  sub_1C6311BC4(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81BB98, &dword_1C475E000);
}

uint64_t sub_1C5AE3974(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Redundant Dbg Instruction Elimination";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "redundant-dbg-inst-elim";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED81BC70;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5AE3FD4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AE3A04(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81BC70;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194228;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81BC78);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AE3974;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81BC78, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::RedundantDbgInstEliminationPass::run@<X0>(llvm::BasicBlock *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  llvm *v6;

  v3 = (_QWORD *)((char *)a1 + 72);
  v4 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v4 == (_QWORD *)((char *)a1 + 72))
    goto LABEL_9;
  v5 = 0;
  do
  {
    if (v4)
      v6 = (llvm *)(v4 - 3);
    else
      v6 = 0;
    v5 |= llvm::RemoveRedundantDbgInstrs(v6, a1);
    v4 = (_QWORD *)v4[1];
  }
  while (v4 != v3);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = a2 + 80;
    *(_QWORD *)(a2 + 56) = a2 + 80;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
}

_QWORD *llvm::DCEPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  char v6;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  v6 = sub_1C5AE3C30(a1, (uint64_t *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v6 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5AE3C30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int64x2_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v25 = 1;
  v3 = 8;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v25 + v3) = v4;
    v3 += 16;
  }
  while (v3 != 136);
  v28 = v30;
  v29 = 0x1000000000;
  v5 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v5)
    {
      LOBYTE(v9) = 0;
      goto LABEL_39;
    }
    v7 = i - 24;
    if (!i)
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 48);
    if (v8 != v7 + 40)
      break;
  }
  v9 = 0;
  do
  {
    v10 = v8;
    v8 = *(_QWORD *)(v8 + 8);
    v11 = i - 24;
    if (!i)
      v11 = 0;
    if (v8 == v11 + 40)
    {
      v20 = *(_QWORD *)(i + 8);
      i = v5;
      if (v20 != v5)
      {
        while (1)
        {
          v21 = v20 - 24;
          if (!v20)
            v21 = 0;
          v8 = *(_QWORD *)(v21 + 48);
          if (v8 != v21 + 40)
            break;
          v20 = *(_QWORD *)(v20 + 8);
          if (v20 == v5)
          {
            i = v5;
            goto LABEL_13;
          }
        }
        i = v20;
      }
    }
LABEL_13:
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    if ((v25 & 1) != 0)
    {
      v13 = 16;
      v14 = &v26;
    }
    else
    {
      v13 = v27;
      if (!v27)
        goto LABEL_25;
      v14 = v26;
    }
    v15 = v13 - 1;
    v16 = v15 & ((v12 >> 4) ^ (v12 >> 9));
    v17 = v14[v16];
    if (v12 == v17)
      continue;
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v15;
      v17 = v14[v16];
      if (v12 == v17)
        goto LABEL_26;
    }
LABEL_25:
    v9 |= sub_1C5AE4098(v12, (uint64_t)&v25, a2);
LABEL_26:
    ;
  }
  while (i != v5);
  while ((_DWORD)v29)
  {
    v22 = (char *)v28 + 8 * v29;
    v23 = *((_QWORD *)v22 - 1);
    sub_1C4E094A8((uint64_t)&v25, (_QWORD *)v22 - 1);
    LODWORD(v29) = v29 - 1;
    v9 |= sub_1C5AE4098(v23, (uint64_t)&v25, a2);
  }
LABEL_39:
  if (v28 != v30)
    free(v28);
  if ((v25 & 1) == 0)
    MEMORY[0x1CAA32FB4](v26, 8);
  return v9 & 1;
}

uint64_t sub_1C5AE3E7C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Dead Code Elimination";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "dce";
  *(_QWORD *)(v2 + 24) = 3;
  *(_QWORD *)(v2 + 32) = &unk_1ED81BC71;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5AE4354;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5AE3F0C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81BC71;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81942C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81BC80);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AE3E7C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81BC80, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5AE3FD4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AE3A04(v0);
}

void sub_1C5AE4000(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5AE4024(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C5AE402C(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  llvm::BasicBlock *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  llvm *v7;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0
    || (v4 = (_QWORD *)((char *)a2 + 72), v5 = (_QWORD *)*((_QWORD *)a2 + 10), v5 == v4))
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v5)
        v7 = (llvm *)(v5 - 3);
      else
        v7 = 0;
      v6 |= llvm::RemoveRedundantDbgInstrs(v7, v3);
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != v4);
  }
  return v6 & 1;
}

uint64_t sub_1C5AE4098(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  llvm::DominatorTree *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8))
    return 0;
  result = llvm::wouldInstructionBeTriviallyDead(a1, a3);
  if ((_DWORD)result)
  {
    v35 = v37;
    v36 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v35, a1);
    llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a1, (uint64_t *)v35, v36);
    if (v35 != v37)
      free(v35);
    llvm::salvageKnowledge((llvm *)a1, 0, 0, v7);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) == 0)
    {
LABEL_49:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
      v32 = *(_QWORD *)(a1 + 24);
      v33 = *(_QWORD **)(a1 + 32);
      *v33 = v32;
      *(_QWORD *)(v32 + 8) = v33;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)a1);
      return 1;
    }
    v10 = 0;
    while (1)
    {
      v11 = *(_DWORD *)(a1 + 20);
      if ((v11 & 0x40000000) != 0)
        v12 = *(_QWORD *)(a1 - 8);
      else
        v12 = a1 - 32 * (v11 & 0x7FFFFFF);
      v13 = v12 + 32 * v10;
      v14 = *(_QWORD *)v13;
      if (*(_QWORD *)v13)
      {
        **(_QWORD **)(v13 + 16) = *(_QWORD *)(v13 + 8);
        v15 = *(_QWORD *)(v13 + 8);
        if (v15)
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
      }
      *(_QWORD *)v13 = 0;
      if (v14 == a1 || *(_QWORD *)(v14 + 8) != 0)
        goto LABEL_25;
      v17 = *(unsigned __int8 *)(v14 + 16) <= 0x1Bu ? 0 : (_QWORD *)v14;
      v35 = v17;
      if (!v17 || v17[1] || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v17, a3))
        goto LABEL_25;
      if ((*(_BYTE *)a2 & 1) != 0)
      {
        v18 = 16;
        v19 = a2 + 8;
      }
      else
      {
        v18 = *(_DWORD *)(a2 + 16);
        if (!v18)
        {
          v28 = 0;
LABEL_44:
          v29 = sub_1C4E08FFC(a2, (uint64_t)&v35, &v35, v28);
          *v29 = v35;
          v30 = v35;
          v31 = *(unsigned int *)(a2 + 144);
          if (v31 >= *(unsigned int *)(a2 + 148))
          {
            v34 = v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 136, a2 + 152, v31 + 1, 8);
            v30 = v34;
            v31 = *(unsigned int *)(a2 + 144);
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v31) = v30;
          ++*(_DWORD *)(a2 + 144);
          goto LABEL_25;
        }
        v19 = *(_QWORD *)(a2 + 8);
      }
      v20 = v18 - 1;
      v21 = ((v35 >> 4) ^ (v35 >> 9)) & v20;
      v22 = (_QWORD *)(v19 + 8 * v21);
      v23 = (void *)*v22;
      if (v35 != (void *)*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != (void *)-4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == (void *)-8192;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & v20;
          v22 = (_QWORD *)(v19 + 8 * v21);
          v23 = (void *)*v22;
          if (v35 == (void *)*v22)
            goto LABEL_25;
        }
        if (v24)
          v28 = v24;
        else
          v28 = v22;
        goto LABEL_44;
      }
LABEL_25:
      if (++v10 == v9)
        goto LABEL_49;
    }
  }
  return result;
}

uint64_t sub_1C5AE4354()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5AE3F0C(v0);
}

void sub_1C5AE4380(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5AE43A4(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5AE43D4(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15[2];
  int v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__src;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  llvm::TargetLibraryAnalysis::run(v7 + 32, (uint64_t)a2, (uint64_t)&v22);
  *(_QWORD *)(v7 + 240) = v22;
  if (!*(_BYTE *)(v7 + 320))
  {
    v11 = (void *)(v7 + 264);
    *(_QWORD *)(v7 + 248) = v7 + 264;
    v12 = (void **)(v7 + 248);
    *(_QWORD *)(v7 + 256) = 0x600000000;
    v13 = v24;
    if (!v24 || v12 == &__src)
      goto LABEL_31;
    if (v24 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 248, v7 + 264, v24, 8);
      v14 = v24;
      if (!v24)
      {
LABEL_30:
        *(_DWORD *)(v7 + 256) = v13;
LABEL_31:
        *(_DWORD *)(v7 + 312) = v26;
        *(_BYTE *)(v7 + 320) = 1;
        goto LABEL_19;
      }
      v11 = *v12;
    }
    else
    {
      v14 = v24;
    }
    memcpy(v11, __src, 8 * v14);
    goto LABEL_30;
  }
  if ((uint64_t *)(v7 + 240) != &v22)
  {
    v8 = (void **)(v7 + 248);
    v9 = v24;
    v10 = *(unsigned int *)(v7 + 256);
    if (v10 >= v24)
    {
      if (v24)
        memmove(*v8, __src, 8 * v24);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v7 + 260) < v24)
    {
      *(_DWORD *)(v7 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 248, v7 + 264, v9, 8);
    }
    else if ((_DWORD)v10)
    {
      memmove(*v8, __src, 8 * v10);
      goto LABEL_15;
    }
    v10 = 0;
LABEL_15:
    if (v10 != v24)
      memcpy((char *)*v8 + 8 * v10, (char *)__src + 8 * v10, 8 * v24 - 8 * v10);
LABEL_17:
    *(_DWORD *)(v7 + 256) = v9;
  }
  *(_DWORD *)(v7 + 312) = v26;
LABEL_19:
  if (__src != &v25)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v17);
  sub_1C4D8B52C(v15);
  return sub_1C5AE3C30((uint64_t)a2, (uint64_t *)(v7 + 240));
}

uint64_t sub_1C5AE4644()
{
  uint64_t result;

  result = sub_1C4D9A2C4("dce-transform", 0xDuLL, "Controls which instructions are eliminated", 0x2AuLL);
  dword_1ED81BC68 = result;
  return result;
}

_QWORD *llvm::DSEPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  llvm::DominatorTree *v8;
  llvm::MemorySSA *v9;
  uint64_t v10;
  llvm::AssumptionCache *v11;
  uint64_t ResultImpl;
  char v13;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  v7 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8);
  v8 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1)+ 8);
  v9 = *(llvm::MemorySSA **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::MemorySSAAnalysis::Key, a1)
                           + 8);
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, a1) + 8;
  v11 = (llvm::AssumptionCache *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  v13 = sub_1C5AE489C(a1, v6, v9, v8, v10, v11, v7, (llvm::Function *)(ResultImpl + 8));
  if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
  {
    v15 = a1 + 72;
    for (i = *(_QWORD *)(a1 + 80); i != v15; i = *(_QWORD *)(i + 8))
    {
      v17 = i - 24;
      if (!i)
        v17 = 0;
      v18 = v17 + 40;
      v19 = *(_QWORD *)(v17 + 48);
      if (v19 != v18)
      {
        do
        {
          v19 = *(_QWORD *)(v19 + 8);
          v20 = i - 24;
          if (!i)
            v20 = 0;
          v21 = v20 + 40;
          while (v19 == v21)
          {
            i = *(_QWORD *)(i + 8);
            if (i == v15)
              goto LABEL_3;
            v22 = i - 24;
            if (!i)
              v22 = 0;
            v21 = v22 + 40;
            v19 = *(_QWORD *)(v22 + 48);
          }
        }
        while (i != v15);
        break;
      }
    }
  }
LABEL_3:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v13 & 1) == 0)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
}

uint64_t sub_1C5AE489C(uint64_t a1, uint64_t a2, llvm::MemorySSA *this, llvm::DominatorTree *a4, uint64_t a5, llvm::AssumptionCache *a6, uint64_t *a7, llvm::Function *a8)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  const llvm::LoopInfo *v18;
  __int128 *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t j;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Argument *v54;
  llvm::Argument *v55;
  llvm::Argument *k;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  llvm::AssumptionCache *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  unsigned int v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  llvm::MemoryLocation *v72;
  char v73;
  llvm *UnderlyingObject;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  llvm::Value **v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD *v84;
  BOOL *v85;
  uint64_t *v86;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  BOOL *v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  int v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  int v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  llvm::Value **v136;
  uint64_t v137;
  uint64_t v138;
  llvm::Value **v139;
  llvm::Value **v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  unsigned int v149;
  _QWORD *v150;
  int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  BOOL v159;
  unsigned int v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  int v170;
  BOOL v171;
  int v172;
  char *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v187;
  const llvm::Instruction *v188;
  uint64_t v189;
  llvm::Value *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  BOOL v207;
  llvm::ConstantInt ***v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t **v211;
  _QWORD *v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  BOOL v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t m;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  unsigned int *v234;
  uint64_t v235;
  uint64_t v236;
  const llvm::Value **v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t n;
  uint64_t v241;
  const llvm::Value *v242;
  uint64_t ii;
  BOOL *v244;
  int v245;
  uint64_t v246;
  uint64_t jj;
  uint64_t v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  int v271;
  uint64_t v273;
  unsigned int v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  int v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  llvm::Value *v284;
  char *v285;
  llvm::Value *v286;
  llvm::Value *v287;
  llvm::Value *v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  unint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t *v305;
  uint64_t NearestCommonDominator;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  unsigned int *v312;
  uint64_t v313;
  int v314;
  size_t v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  size_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  _QWORD *v333;
  unsigned int *v334;
  uint64_t v335;
  unsigned int v336;
  BOOL v337;
  unsigned int v339;
  BOOL v340;
  uint64_t *v342;
  uint64_t **v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  unint64_t v347;
  uint64_t *v348;
  _QWORD *v349;
  uint64_t v350;
  const llvm::APInt *v351;
  int v352;
  unint64_t v353;
  _QWORD *v354;
  unint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  llvm::Value **v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  llvm::UndefValue **v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  _BOOL4 v368;
  unsigned __int8 *v369;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  int v379;
  int v380;
  int v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  _QWORD *WalkerImpl;
  llvm::Value *v396;
  llvm::Value *v397;
  unint64_t v398;
  uint64_t v399;
  BOOL v400;
  BOOL v401;
  int v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  BOOL v407;
  char v408;
  llvm::UndefValue *InitialValueOfAllocation;
  llvm::MemorySSA *v411;
  _QWORD *SkipSelfWalker;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t ***v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t ****v423;
  uint64_t ***v424;
  int v425;
  int v426;
  uint64_t v427;
  llvm::Value *v428;
  llvm::ConstantInt *****v429;
  llvm::Value *v430;
  uint64_t v431;
  uint64_t ***v432;
  char *v433;
  size_t v434;
  size_t v435;
  uint64_t v436;
  unint64_t v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v446;
  unsigned __int8 *v447;
  BOOL v448;
  uint64_t v449;
  _QWORD *IntPtrType;
  const llvm::APInt *v452;
  llvm::ConstantInt *v453;
  unsigned int v454;
  char v455;
  llvm::ValueHandleBase *v456;
  llvm::Instruction *v457;
  llvm::Value *v458;
  unsigned int v459;
  int v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  llvm::Value *v464;
  int v465;
  int v466;
  llvm::MemoryAccess *v467;
  char *MemoryAccessAfter;
  int v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  llvm::Value *v473;
  int v474;
  int v475;
  llvm::MemoryAccess *v476;
  uint64_t v477;
  _QWORD *v478;
  llvm::SmallPtrSetImplBase *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t *v484;
  int v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t *v488;
  uint64_t *v489;
  unint64_t v490;
  uint64_t *v491;
  unint64_t v492;
  llvm::DataLayout *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  int v498;
  uint64_t *v500;
  uint64_t *v501;
  uint64_t *v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  BOOL v507;
  uint64_t *v508;
  uint64_t *v509;
  uint64_t *v510;
  uint64_t *v511;
  uint64_t v512;
  unint64_t v513;
  BOOL v514;
  int v515;
  uint64_t *v516;
  int v517;
  uint64_t *v518;
  uint64_t *v519;
  uint64_t *v520;
  int v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t *v526;
  llvm::MemoryLocation *v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  _BOOL4 v533;
  int v535;
  const llvm::DataLayout *v536;
  llvm::Value **v537;
  int v539;
  char *v540;
  char *v541;
  llvm::Value *v542;
  uint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  uint64_t *v546;
  llvm::MemoryLocation *v547;
  uint64_t (**v548)();
  char v549;
  uint64_t v550;
  unsigned int kk;
  uint64_t v552;
  _BOOL4 v553;
  BOOL v554;
  unint64_t v555;
  uint64_t v556;
  char v557;
  uint64_t v558;
  unsigned int v559;
  uint64_t v560;
  char *v562;
  char *v563;
  void *v564;
  char *v565;
  int v567;
  unsigned int v568;
  uint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  unsigned int v574;
  unsigned int v575[2];
  uint64_t **v576;
  int __p;
  uint64_t *__pa;
  uint64_t *__pb;
  uint64_t *__pc;
  int v581;
  uint64_t v582;
  int64x2_t v583;
  llvm::DominatorTree *v584;
  unsigned int v585;
  uint64_t v586;
  _BOOL4 v587;
  unint64_t v588;
  llvm::Function *v589;
  uint64_t v590;
  int v591;
  unsigned int v592;
  llvm::ConstantInt ****v593;
  uint64_t **v594;
  unsigned int v595;
  llvm::SmallPtrSetImplBase *v596;
  int v597;
  llvm::Value *v599;
  llvm::Value *v600;
  _QWORD v601[2];
  int v602;
  void *v603;
  _BYTE *v604;
  uint64_t v605;
  _BYTE v606[17];
  _BYTE v607[31];
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  __int128 v615[3];
  uint64_t v616;
  __int128 v617;
  _OWORD v618[2];
  _QWORD v619[2];
  _QWORD v620[3];
  uint64_t v621;
  uint64_t v622;
  int v623;
  uint64_t v624[2];
  int v625;
  char **v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _QWORD v630[2];
  void *v631;
  uint64_t v632;
  _QWORD v633[17];
  uint64_t v634;
  uint64_t v635;
  llvm::MemorySSA *v636;
  llvm::DominatorTree *v637;
  uint64_t v638;
  uint64_t *v639;
  llvm::Value *v640;
  llvm::Function *v641;
  unsigned __int8 v642;
  void *v643;
  uint64_t v644;
  _BYTE v645[345];
  _BYTE *v646;
  void *v647;
  uint64_t v648;
  int v649;
  _BYTE v650[32];
  __int128 v651;
  int v652;
  __int128 v653;
  int v654;
  _BYTE *v655;
  void *v656;
  uint64_t v657;
  int v658;
  _BYTE v659[128];
  __int128 v660;
  unsigned int v661;
  char *v662;
  void *v663;
  uint64_t v664;
  int v665;
  char v666;
  __int128 v667;
  int v668;
  void *v669;
  char *v670;
  unint64_t v671;
  BOOL v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  char v676;
  void *v677;
  uint64_t v678;
  _BYTE v679[192];
  __int128 v680;
  __int128 v681;
  __int128 v682;
  char v683;
  llvm::LLVMContext *v684;
  void *v685;
  uint64_t v686;
  _BYTE v687[9];
  __int128 v688;
  __int128 v689;
  __int128 v690;
  uint64_t v691;
  llvm::Value *v692[6];
  uint64_t v693;
  char v694;
  void *v695;
  int v696;
  uint64_t v697;
  void *v698;
  uint64_t v699;
  _BYTE v700[24];
  void *v701;
  void *v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int v705;
  void *v706;
  _BYTE *v707;
  void *v708[2];
  int v709;
  _BYTE v710[64];
  void *v711;
  uint64_t v712;
  _BYTE v713[64];
  _QWORD **v714;
  _QWORD *v715[5];

  v715[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  llvm::MemorySSA::ensureOptimizedUses(this);
  v619[0] = a1;
  v619[1] = a2;
  v620[0] = &unk_1E8134848;
  v620[1] = a4;
  v622 = 0;
  v620[2] = a8;
  v621 = 0;
  v623 = 0;
  v624[1] = 0;
  v624[0] = 0;
  v625 = 0;
  v626 = &v662;
  v627 = a2;
  v628 = 1;
  v15 = 14;
  do
  {
    v16 = &v619[v15];
    *(_OWORD *)v16 = xmmword_1C85F2120;
    *((_OWORD *)v16 + 1) = xmmword_1C85F2120;
    v15 += 5;
  }
  while (v16 + 5 != v630);
  v630[0] = v620;
  v630[1] = 0;
  v631 = v633;
  v632 = 0x400000000;
  v633[16] = &unk_1E8134870;
  v634 = 1;
  for (i = 76; i != 92; i += 2)
    v619[i] = -4096;
  v636 = this;
  v637 = a4;
  v638 = a5;
  v639 = a7;
  v640 = (llvm::Value *)(*(_QWORD *)(a1 + 40) + 272);
  v641 = a8;
  v643 = v645;
  v644 = 0x4000000000;
  v646 = v650;
  v647 = v650;
  v648 = 4;
  v649 = 0;
  v651 = 0u;
  v652 = 0;
  v653 = 0u;
  v654 = 0;
  v655 = v659;
  v656 = v659;
  v657 = 16;
  v658 = 0;
  v660 = 0u;
  v661 = 0;
  v662 = &v666;
  v663 = &v666;
  v664 = 32;
  v665 = 0;
  v668 = 0;
  v667 = 0u;
  v671 = 0;
  v669 = 0;
  v670 = 0;
  *(_QWORD *)&v680 = a1;
  sub_1C5AE96B8((uint64_t)&v680, (uint64_t)v692);
  v19 = &v682;
  *(_QWORD *)&v680 = &v682;
  v20 = v692[1];
  v584 = a4;
  v589 = a8;
  v590 = a5;
  if (v692[1] == v692[0])
  {
    *((_QWORD *)&v680 + 1) = &v682;
    v21 = v692[1];
  }
  else
  {
    v567 = (int)v692[2];
    v19 = (__int128 *)malloc_type_malloc(8 * LODWORD(v692[2]), 0x4065EBACuLL);
    if (!v19)
    {
      if (v567)
        goto LABEL_1139;
      v19 = (__int128 *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v19)
        goto LABEL_1139;
    }
    *((_QWORD *)&v680 + 1) = v19;
    v21 = v692[0];
    v20 = v692[1];
  }
  v22 = HIDWORD(v692[2]);
  LODWORD(v681) = v692[2];
  if (v20 == v21)
    v23 = HIDWORD(v692[2]);
  else
    v23 = v692[2];
  if (v23)
  {
    memmove(v19, v20, 8 * v23);
    v22 = HIDWORD(v692[2]);
  }
  *(_QWORD *)((char *)&v681 + 4) = __PAIR64__(v692[3], v22);
  v685 = v687;
  v686 = 0x800000000;
  if (v696)
    sub_1C4DB22B8((uint64_t)&v685, (uint64_t *)&v695);
  v24 = &v675;
  *(_QWORD *)&v673 = &v675;
  v25 = v702;
  if (v702 != v701)
  {
    v568 = v703;
    v24 = (__int128 *)malloc_type_malloc(8 * v703, 0x4065EBACuLL);
    if (v24 || !v568 && (v24 = (__int128 *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *((_QWORD *)&v673 + 1) = v24;
      v26 = v701;
      v25 = v702;
      goto LABEL_16;
    }
LABEL_1139:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *((_QWORD *)&v673 + 1) = &v675;
  v26 = v702;
LABEL_16:
  LODWORD(v674) = v703;
  v27 = v704;
  if (v25 == v26)
    v28 = v704;
  else
    v28 = v703;
  if (v28)
  {
    memmove(v24, v25, 8 * v28);
    v27 = v704;
  }
  *(_QWORD *)((char *)&v674 + 4) = __PAIR64__(v705, v27);
  v677 = v679;
  v678 = 0x800000000;
  if ((_DWORD)v707)
    sub_1C4DB22B8((uint64_t)&v677, (uint64_t *)&v706);
  v29 = 0;
LABEL_24:
  if ((_DWORD)v686 != (_DWORD)v678)
    goto LABEL_34;
  if ((_DWORD)v686)
  {
    v30 = v677;
    v31 = v685;
    while (1)
    {
      v32 = *(_QWORD *)v31 == *(_QWORD *)v30 && v31[4] == v30[4];
      if (!v32)
        break;
      v31 += 6;
      v30 += 6;
      if (v31 == (_DWORD *)((char *)v685 + 24 * v686))
        goto LABEL_76;
    }
LABEL_34:
    *(_QWORD *)&v615[0] = 0;
    v33 = *((_QWORD *)v685 + 3 * v686 - 3);
    *(_QWORD *)&v615[0] = v33;
    if (v661)
    {
      v34 = ((v33 >> 4) ^ (v33 >> 9)) & (v661 - 1);
      v35 = (_QWORD *)(v660 + 16 * v34);
      v36 = *v35;
      if (v33 == *v35)
      {
LABEL_49:
        *((_DWORD *)v35 + 2) = v29;
        v42 = v33 + 40;
        for (j = *(_QWORD *)(v33 + 48); ; j = *(_QWORD *)(j + 8))
        {
          if (j == v42)
          {
            ++v29;
            LODWORD(v686) = v686 - 1;
            if ((_DWORD)v686)
              sub_1C56169E8(&v680);
            goto LABEL_24;
          }
          if (j)
            v44 = (uint64_t *)(j - 24);
          else
            v44 = 0;
          v45 = *((_DWORD *)this + 10);
          if (!v45)
            goto LABEL_60;
          v46 = *((_QWORD *)this + 3);
          v47 = v45 - 1;
          v48 = ((v44 >> 4) ^ (v44 >> 9)) & (v45 - 1);
          v49 = *(uint64_t **)(v46 + 16 * v48);
          if (v44 != v49)
            break;
LABEL_59:
          v52 = *(_QWORD *)(v46 + 16 * v48 + 8);
LABEL_61:
          if (!llvm::Instruction::mayThrow((llvm::Instruction *)v44) || v52)
          {
            if (v52)
            {
              if (*(_BYTE *)(v52 + 16) == 26 && v644 < dword_1ED81C0D8)
              {
                sub_1C5AE8824(&v688, (uint64_t)v619, (llvm::MemoryLocation *)v44);
                if ((_BYTE)v691 || sub_1C5AE8630(v639, (uint64_t)v44))
                {
                  v53 = v644;
                  if (v644 >= (unint64_t)HIDWORD(v644))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v643, (uint64_t)v645, v644 + 1, 8);
                    v53 = v644;
                  }
                  *((_QWORD *)v643 + v53) = v52;
                  LODWORD(v644) = v644 + 1;
                }
              }
            }
          }
          else
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v655, v44[5]);
          }
        }
        v50 = 1;
        while (v49 != (uint64_t *)-4096)
        {
          v51 = v48 + v50++;
          v48 = v51 & v47;
          v49 = *(uint64_t **)(v46 + 16 * v48);
          if (v44 == v49)
            goto LABEL_59;
        }
LABEL_60:
        v52 = 0;
        goto LABEL_61;
      }
      v37 = 0;
      v38 = 1;
      while (v36 != -4096)
      {
        if (v37)
          v39 = 0;
        else
          v39 = v36 == -8192;
        if (v39)
          v37 = v35;
        v40 = v34 + v38++;
        v34 = v40 & (v661 - 1);
        v35 = (_QWORD *)(v660 + 16 * v34);
        v36 = *v35;
        if (v33 == *v35)
          goto LABEL_49;
      }
      if (v37)
        v41 = v37;
      else
        v41 = v35;
    }
    else
    {
      v41 = 0;
    }
    v35 = sub_1C4DE3FA0((uint64_t)&v660, (uint64_t)v615, (uint64_t *)v615, v41);
    *v35 = *(_QWORD *)&v615[0];
    *((_DWORD *)v35 + 2) = 0;
    v33 = *(_QWORD *)&v615[0];
    goto LABEL_49;
  }
LABEL_76:
  if (v677 != v679)
    free(v677);
  if (*((_QWORD *)&v673 + 1) != (_QWORD)v673)
    free(*((void **)&v673 + 1));
  if (v685 != v687)
    free(v685);
  if (*((_QWORD *)&v680 + 1) != (_QWORD)v680)
    free(*((void **)&v680 + 1));
  if (v706 != v708)
    free(v706);
  if (v702 != v701)
    free(v702);
  if (v695 != &v697)
    free(v695);
  if (v692[1] != v692[0])
    free(v692[1]);
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1);
    v54 = *(llvm::Argument **)(a1 + 88);
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v55 = *(llvm::Argument **)(a1 + 88);
      goto LABEL_95;
    }
  }
  else
  {
    v54 = *(llvm::Argument **)(a1 + 88);
  }
  v55 = v54;
LABEL_95:
  for (k = (llvm::Argument *)((char *)v55 + 40 * *(_QWORD *)(a1 + 96));
        v54 != k;
        v54 = (llvm::Argument *)((char *)v54 + 40))
  {
    if (llvm::Argument::hasPassPointeeByValueCopyAttr(v54))
    {
      *(_QWORD *)&v680 = v54;
      BYTE8(v680) = 1;
      sub_1C5AE97FC((uint64_t)&v653, &v680, (_BYTE *)&v680 + 8, (uint64_t)v692);
    }
  }
  v642 = llvm::mayContainIrreducibleControl((llvm *)a1, v589, v18);
  v57 = *(unsigned int *)(v590 + 8);
  if ((_DWORD)v57)
  {
    v58 = *(uint64_t **)v590;
    v59 = 8 * v57 - 8;
    v60 = a6;
    do
    {
      v61 = *v58++;
      v62 = *(_QWORD *)(v61 + 40);
      if (v62)
        v63 = v62 - 24;
      else
        v63 = 0;
      if (*(unsigned __int8 *)(v63 + 16) - 29 >= 0xB)
        v63 = 0;
      v64 = *(_BYTE *)(v63 + 16) == 35;
      v65 = v64 || v59 == 0;
      v59 -= 8;
    }
    while (!v65);
  }
  else
  {
    v64 = 0;
    v60 = a6;
  }
  v672 = v64;
  llvm::CodeMetrics::collectEphemeralValues(a1, v60, (llvm::SmallPtrSetImplBase *)&v662);
  v66 = v644;
  v67 = &unk_1C640E000;
  if (!(_DWORD)v644)
  {
    v591 = 0;
    goto LABEL_937;
  }
  v68 = 0;
  v591 = 0;
  v583 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v69 = *((_QWORD *)v643 + v68);
    v70 = sub_1C477672C((uint64_t)&v646, v69);
    if (v647 == v646)
      v71 = (uint64_t *)((char *)&v648 + 4);
    else
      v71 = &v648;
    if (v70 != (_QWORD *)((char *)v647 + 8 * *(unsigned int *)v71))
      goto LABEL_830;
    v72 = *(llvm::MemoryLocation **)(v69 + 72);
    if (sub_1C5AE8630(v639, (uint64_t)v72))
    {
      sub_1C5AE86A0((uint64_t)v692, (uint64_t)v619, (uint64_t)v72);
      if (!v694)
        goto LABEL_830;
      v73 = (char)v692[0];
      v617 = *(_OWORD *)((char *)v692 + 1);
      v618[0] = *(_OWORD *)((char *)&v692[2] + 1);
      *(_OWORD *)((char *)v618 + 15) = *(_OWORD *)&v692[4];
    }
    else
    {
      sub_1C5AE8824(v692, (uint64_t)v619, v72);
      v73 = (char)v692[0];
      v617 = *(_OWORD *)((char *)v692 + 1);
      v618[0] = *(_OWORD *)((char *)&v692[2] + 1);
      *(_OWORD *)((char *)v618 + 15) = *(_OWORD *)&v692[4];
      if (!(_BYTE)v693)
        goto LABEL_830;
    }
    v588 = v68;
    v606[0] = v73;
    *(_OWORD *)&v606[1] = v617;
    *(_OWORD *)v607 = v618[0];
    *(_OWORD *)&v607[15] = *(_OWORD *)((char *)v618 + 15);
    UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)v606, (const llvm::Value *)6);
    v75 = dword_1ED81BE98;
    v76 = dword_1ED81BF58;
    v77 = dword_1ED81C018;
    v601[0] = 0;
    v601[1] = 0;
    v602 = 0;
    v604 = 0;
    v605 = 0;
    v603 = 0;
    if (*(_BYTE *)(v69 + 16) == 25)
      v78 = v69;
    else
      v78 = 0;
    if (v78)
      v79 = (llvm::Value **)(v78 - 32);
    else
      v79 = (llvm::Value **)(v69 - 64);
    v692[0] = *v79;
    sub_1C5AE8994((uint64_t)v601, (uint64_t *)v692);
    v587 = sub_1C5AE8630(v639, (uint64_t)v72);
    v80 = v603;
    v599 = UnderlyingObject;
    v586 = (uint64_t)v72;
    if (v604 != v603)
    {
      v585 = v77;
      v81 = 0;
      v82 = 0;
      while (1)
      {
        v83 = v80[v81];
        v84 = sub_1C477672C((uint64_t)&v646, v83);
        if (v647 == v646)
          v86 = (uint64_t *)((char *)&v648 + 4);
        else
          v86 = &v648;
        if (v84 != (_QWORD *)((char *)v647 + 8 * *(unsigned int *)v86) || v75 == 0 || (_DWORD)v76 == 0)
          goto LABEL_144;
        v89 = *(_QWORD *)(v69 + 72);
        v592 = v75;
        if (byte_1ED81C3D8)
        {
          if (*(_BYTE *)(v69 + 16) == 25)
            v90 = v69;
          else
            v90 = 0;
          v91 = (_QWORD *)(v90 - 32);
          v32 = v90 == 0;
          v92 = (_QWORD *)(v69 - 64);
          if (!v32)
            v92 = v91;
          if (*v92 == v83)
            break;
        }
        v93 = 0;
LABEL_172:
        LOBYTE(v688) = 0;
        LOBYTE(v691) = 0;
        if (*((_QWORD *)v636 + 12) == v83)
        {
          v98 = v83;
LABEL_269:
          if (v93)
          {
            if (*(_BYTE *)(v69 + 16) == 25)
              v129 = v69;
            else
              v129 = 0;
            v130 = (_QWORD *)(v129 - 32);
            v32 = v129 == 0;
            v131 = (_QWORD *)(v69 - 64);
            if (!v32)
              v131 = v130;
            if (v98 != *v131)
              sub_1C4ED3D74(v69, v98);
          }
          goto LABEL_294;
        }
        v98 = v83;
        while (1)
        {
          v99 = v76;
          if (*(_QWORD *)(v69 + 64) == *(_QWORD *)(v98 + 64))
            v100 = (unsigned int *)&unk_1ED81C198;
          else
            v100 = (unsigned int *)&unk_1ED81C258;
          v101 = *v100;
          v337 = v76 >= v101;
          v76 = v76 - v101;
          if ((_DWORD)v76 == 0 || !v337)
            goto LABEL_293;
          if (*(_BYTE *)(v98 + 16) == 27)
          {
            v75 = v592;
LABEL_279:
            v132 = *(unsigned __int8 *)(v98 + 16);
            v133 = v75;
            if (v132 == 27)
            {
              v134 = *(_DWORD *)(v98 + 20);
              if ((v134 & 0x40000000) != 0)
              {
                v136 = *(llvm::Value ***)(v98 - 8);
                v135 = v134 & 0x7FFFFFF;
                if (!v135)
                  goto LABEL_144;
              }
              else
              {
                v135 = v134 & 0x7FFFFFF;
                v136 = (llvm::Value **)(v98 - 32 * v135);
                if (!v135)
                  goto LABEL_144;
              }
              v140 = &v136[4 * v135];
              while (2)
              {
                v692[0] = *v136;
                v141 = *((_QWORD *)v692[0] + 8);
                *(_QWORD *)&v680 = v141;
                v142 = *(_QWORD *)(v98 + 64);
                *(_QWORD *)&v673 = v142;
                v143 = v661;
                if (v661)
                {
                  v144 = v660;
                  v145 = v661 - 1;
                  v146 = (v661 - 1) & ((v141 >> 4) ^ (v141 >> 9));
                  v147 = (uint64_t *)(v660 + 16 * v146);
                  v148 = *v147;
                  if (v141 == *v147)
                  {
                    v149 = *((_DWORD *)v147 + 2);
                    goto LABEL_310;
                  }
                  v150 = 0;
                  v151 = 1;
                  while (v148 != -4096)
                  {
                    if (v150)
                      v152 = 0;
                    else
                      v152 = v148 == -8192;
                    if (v152)
                      v150 = v147;
                    v153 = v146 + v151++;
                    v146 = v153 & v145;
                    v147 = (uint64_t *)(v660 + 16 * v146);
                    v148 = *v147;
                    if (v141 == *v147)
                    {
                      v149 = *((_DWORD *)v147 + 2);
                      goto LABEL_309;
                    }
                  }
                  if (v150)
                    v162 = v150;
                  else
                    v162 = v147;
                }
                else
                {
                  v162 = 0;
                }
                v163 = sub_1C4DE3FA0((uint64_t)&v660, (uint64_t)&v680, (uint64_t *)&v680, v162);
                v149 = 0;
                *v163 = v680;
                *((_DWORD *)v163 + 2) = 0;
                v144 = v660;
                v143 = v661;
                if (!v661)
                {
                  v161 = 0;
                  goto LABEL_323;
                }
LABEL_309:
                v142 = v673;
                v145 = v143 - 1;
LABEL_310:
                v154 = ((v142 >> 4) ^ (v142 >> 9)) & v145;
                v155 = (_QWORD *)(v144 + 16 * v154);
                v156 = *v155;
                if (v142 != *v155)
                {
                  v157 = 0;
                  v158 = 1;
                  while (v156 != -4096)
                  {
                    if (v157)
                      v159 = 0;
                    else
                      v159 = v156 == -8192;
                    if (v159)
                      v157 = v155;
                    v160 = v154 + v158++;
                    v154 = v160 & v145;
                    v155 = (_QWORD *)(v144 + 16 * v154);
                    v156 = *v155;
                    if (v142 == *v155)
                      goto LABEL_324;
                  }
                  if (v157)
                    v161 = v157;
                  else
                    v161 = v155;
LABEL_323:
                  v155 = sub_1C4DE3FA0((uint64_t)&v660, (uint64_t)&v673, (uint64_t *)&v673, v161);
                  *v155 = v673;
                  *((_DWORD *)v155 + 2) = 0;
                }
LABEL_324:
                if (v149 > *((_DWORD *)v155 + 2))
                  sub_1C5AE8994((uint64_t)v601, (uint64_t *)v692);
                v136 += 4;
                if (v136 == v140)
                  goto LABEL_404;
                continue;
              }
            }
            v137 = *(_QWORD *)(v98 + 72);
            if (v132 == 25)
              v138 = v98;
            else
              v138 = 0;
            if (v138)
              v139 = (llvm::Value **)(v138 - 32);
            else
              v139 = (llvm::Value **)(v98 - 64);
            v692[0] = *v139;
            sub_1C5AE8994((uint64_t)v601, (uint64_t *)v692);
            sub_1C5AE8824(v692, (uint64_t)v619, (llvm::MemoryLocation *)v137);
            v680 = *(_OWORD *)v692;
            v681 = *(_OWORD *)&v692[2];
            v682 = *(_OWORD *)&v692[4];
            if (v587)
            {
              if (UnderlyingObject != llvm::getUnderlyingObject((llvm *)v680, (const llvm::Value *)6))
                goto LABEL_144;
              goto LABEL_291;
            }
            v616 = 0;
            v608 = 0;
            v164 = sub_1C5AE8EB8((uint64_t)v619, v586, v137, (uint64_t)v606, (uint64_t)&v680, &v616, &v608);
            if (v164 != 4)
              goto LABEL_378;
            v165 = *(_QWORD *)(v137 + 40);
            v673 = v165;
            v688 = 0uLL;
            *(_QWORD *)&v674 = 0;
            DWORD2(v674) = 0;
            LODWORD(v689) = 0;
            *(_QWORD *)&v615[0] = v165;
            DWORD2(v615[0]) = 0;
            if (!v668)
            {
              v174 = 0;
              goto LABEL_349;
            }
            v166 = (v668 - 1) & ((v165 >> 4) ^ (v165 >> 9));
            v167 = (_QWORD *)(v667 + 16 * v166);
            v168 = *v167;
            if (v165 == *v167)
            {
LABEL_345:
              v173 = (char *)v669 + 32 * *(unsigned int *)(v667 + 16 * v166 + 8);
            }
            else
            {
              v169 = 0;
              v170 = 1;
              while (v168 != -4096)
              {
                if (v169)
                  v171 = 0;
                else
                  v171 = v168 == -8192;
                if (v171)
                  v169 = v167;
                v172 = v166 + v170++;
                v166 = v172 & (v668 - 1);
                v167 = (_QWORD *)(v667 + 16 * v166);
                v168 = *v167;
                if (v165 == *v167)
                  goto LABEL_345;
              }
              if (v169)
                v174 = v169;
              else
                v174 = v167;
LABEL_349:
              v175 = sub_1C4DE3FA0((uint64_t)&v667, (uint64_t)v615, (uint64_t *)v615, v174);
              *v175 = *(_QWORD *)&v615[0];
              *((_DWORD *)v175 + 2) = DWORD2(v615[0]);
              v176 = v670;
              if ((unint64_t)v670 >= v671)
              {
                v280 = (v670 - (_BYTE *)v669) >> 5;
                v281 = v280 + 1;
                if ((unint64_t)(v280 + 1) >> 59)
                  abort();
                v282 = v671 - (_QWORD)v669;
                if ((uint64_t)(v671 - (_QWORD)v669) >> 4 > v281)
                  v281 = v282 >> 4;
                if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFE0)
                  v283 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v283 = v281;
                v692[4] = (llvm::Value *)&v671;
                if (v283 >> 59)
                  sub_1C4764EE4();
                v284 = (llvm::Value *)operator new(32 * v283);
                v285 = (char *)v284 + 32 * v280;
                v692[0] = v284;
                v692[1] = (llvm::Value *)v285;
                *(_OWORD *)v285 = v673;
                *((_QWORD *)&v673 + 1) = 0;
                *((_QWORD *)v285 + 2) = v674;
                *(_QWORD *)&v674 = 0;
                *((_DWORD *)v285 + 6) = DWORD2(v674);
                DWORD2(v674) = 0;
                v692[3] = (llvm::Value *)((char *)v284 + 32 * v283);
                v692[2] = (llvm::Value *)(v285 + 32);
                sub_1C6311F10((uint64_t *)&v669, v692);
                v178 = v670;
                v286 = v692[1];
                v287 = v692[2];
                if (v692[2] != v692[1])
                {
                  do
                  {
                    v288 = (llvm::Value *)((char *)v287 - 32);
                    sub_1C5AEA8FC((uint64_t *)v287 - 3);
                    v287 = v288;
                  }
                  while (v288 != v286);
                }
                if (v692[0])
                  operator delete(v692[0]);
              }
              else
              {
                v177 = v673;
                *((_QWORD *)v670 + 1) = 0;
                *((_QWORD *)v176 + 2) = 0;
                *(_QWORD *)v176 = v177;
                *((_DWORD *)v176 + 6) = 0;
                *((_QWORD *)v176 + 1) = *((_QWORD *)&v673 + 1);
                *((_QWORD *)&v673 + 1) = 0;
                *((_QWORD *)v176 + 2) = v674;
                *(_QWORD *)&v674 = 0;
                *((_DWORD *)v176 + 6) = DWORD2(v674);
                DWORD2(v674) = 0;
                v178 = v176 + 32;
              }
              v670 = v178;
              *((_DWORD *)v175 + 2) = ((unint64_t)(v178 - (_BYTE *)v669) >> 5) - 1;
              v173 = v178 - 32;
            }
            sub_1C5AEA8FC((uint64_t *)&v673 + 1);
            sub_1C5AEA8FC((uint64_t *)&v688);
            v179 = v616;
            v180 = v608;
            v692[0] = (llvm::Value *)v137;
            v181 = *(_QWORD *)&v606[8] & 0x7FFFFFFFFFFFFFFFLL;
            v182 = *((_QWORD *)&v680 + 1) & 0x7FFFFFFFFFFFFFFFLL;
            v183 = (*((_QWORD *)&v680 + 1) & 0x7FFFFFFFFFFFFFFFLL) + v608;
            if (!byte_1ED81BD18 || v183 <= v616 || v181 + v616 < v608)
            {
LABEL_355:
              if (v179 < v180 || !byte_1ED81BDD8 || v183 <= v179 || v179 - v180 + v181 > v182)
              {
                if (v179 <= v180 || byte_1ED81BD18)
                {
                  v184 = v181 + v179;
                }
                else
                {
                  v184 = v181 + v179;
                  if (v183 > v179)
                  {
                    UnderlyingObject = v599;
                    if (v184 >= v183)
                    {
                      v164 = 2;
                      goto LABEL_377;
                    }
LABEL_366:
                    if (v184 > v180 && byte_1ED81BD18 == 0 && v179 <= v180)
                      v164 = 0;
                    else
                      v164 = 6;
LABEL_377:
                    v75 = v133;
LABEL_378:
                    if (!byte_1ED81BDD8 || v164 != 3)
                    {
                      if (v164 != 1)
                        goto LABEL_144;
LABEL_291:
                      sub_1C5AE8B38((uint64_t)v619, v137);
                      v591 = 1;
                      goto LABEL_144;
                    }
                    if (*(_BYTE *)(v137 + 16) == 61)
                      v187 = v137;
                    else
                      v187 = 0;
                    if (*(_BYTE *)(v586 + 16) == 61)
                      v188 = (const llvm::Instruction *)v586;
                    else
                      v188 = 0;
                    if (!v187 || !v188 || !llvm::DominatorTree::dominates(v584, (const llvm::Value *)v187, v188))
                      goto LABEL_144;
                    v189 = *(_QWORD *)(v187 - 64);
                    v593 = (llvm::ConstantInt ****)(v187 - 64);
                    if (*(_BYTE *)(v189 + 16) != 16)
                      goto LABEL_404;
                    __p = v608;
                    v581 = v616;
                    v190 = v640;
                    v191 = *(_QWORD *)v189;
                    sub_1C4768AD0((uint64_t)v640, *(_QWORD *)v189);
                    v193 = v192;
                    v195 = v194;
                    sub_1C4768AD0((uint64_t)v190, v191);
                    v198 = v193 == ((v197 + 7) & 0xFFFFFFFFFFFFFFF8) && v195 == (v196 == 1);
                    UnderlyingObject = v599;
                    if (!v198)
                      goto LABEL_404;
                    v199 = *((_QWORD *)v188 - 8);
                    if (*(_BYTE *)(v199 + 16) != 16)
                      goto LABEL_404;
                    v200 = *(_QWORD *)v199;
                    sub_1C4768AD0((uint64_t)v190, *(_QWORD *)v199);
                    v202 = v201;
                    v204 = v203;
                    sub_1C4768AD0((uint64_t)v190, v200);
                    v207 = v202 == ((v206 + 7) & 0xFFFFFFFFFFFFFFF8) && v204 == (v205 == 1);
                    UnderlyingObject = v599;
                    if (!v207
                      || !sub_1C5AEA970(*(_QWORD *)(v187 + 32), *(llvm::BasicBlock **)(v187 + 40), (uint64_t)v188, &v627, (uint64_t)v190, v584))
                    {
LABEL_404:
                      v75 = v133;
                      goto LABEL_144;
                    }
                    v208 = *v593;
                    v209 = *((unsigned int *)*v593 + 8);
                    v574 = *((_DWORD *)*v593 + 8);
                    if (v209 > 0x40)
                    {
                      v315 = ((unint64_t)(v209 + 63) >> 3) & 0x3FFFFFF8;
                      v571 = operator new[]();
                      memcpy((void *)v571, v208[3], v315);
                    }
                    else
                    {
                      v571 = (uint64_t)v208[3];
                    }
                    v316 = *((_QWORD *)v188 - 8);
                    v317 = *(_DWORD *)(v316 + 32);
                    LODWORD(v692[1]) = v317;
                    if (v317 > 0x40)
                    {
                      v692[0] = (llvm::Value *)operator new[]();
                      v317 = v692[1];
                      memcpy(v692[0], *(const void **)(v316 + 24), (((unint64_t)LODWORD(v692[1]) + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v692[0] = *(llvm::Value **)(v316 + 24);
                    }
                    llvm::APInt::zext((llvm::APInt *)v692, v574, (uint64_t)&v673);
                    if (LODWORD(v692[1]) >= 0x41 && v692[0])
                      MEMORY[0x1CAA32F9C](v692[0], 0x1000C8000313F17);
                    v692[0] = (llvm::Value *)v673;
                    LODWORD(v692[1]) = DWORD2(v673);
                    if (*(_BYTE *)v190)
                      v318 = v574 - (v317 + 8 * (v581 - __p));
                    else
                      v318 = 8 * (v581 - __p);
                    DWORD2(v673) = v574;
                    if (v574 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v673, 0, 0);
                    else
                      *(_QWORD *)&v673 = 0;
                    sub_1C4912E54(&v673, v318, v318 + v317);
                    LODWORD(v319) = DWORD2(v673);
                    DWORD2(v615[0]) = DWORD2(v673);
                    if (DWORD2(v673) > 0x40)
                    {
                      v323 = (((unint64_t)DWORD2(v673) + 63) >> 3) & 0x3FFFFFF8;
                      *(_QWORD *)&v615[0] = operator new[]();
                      memcpy(*(void **)&v615[0], (const void *)v673, v323);
                      llvm::APInt::flipAllBitsSlowCase((uint64_t)v615);
                      v319 = DWORD2(v615[0]);
                      v322 = *(_QWORD *)&v615[0];
                      DWORD2(v615[0]) = 0;
                      if (v319 <= 0x40)
                        goto LABEL_626;
                      v347 = (unint64_t)(v319 + 63) >> 6;
                      v348 = (uint64_t *)v571;
                      v349 = *(_QWORD **)&v615[0];
                      do
                      {
                        v350 = *v348++;
                        *v349++ &= v350;
                        --v347;
                      }
                      while (v347);
                    }
                    else
                    {
                      v320 = ~(_QWORD)v673;
                      v321 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v673);
                      if (!DWORD2(v673))
                        v321 = 0;
                      v322 = v321 & v320;
                      *(_QWORD *)&v615[0] = v321 & v320;
                      DWORD2(v615[0]) = 0;
LABEL_626:
                      v322 &= v571;
                    }
                    LODWORD(v610) = v692[1];
                    if (LODWORD(v692[1]) > 0x40)
                    {
                      v609 = operator new[]();
                      memcpy((void *)v609, v692[0], (((unint64_t)v610 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v609 = (uint64_t)v692[0];
                    }
                    sub_1C4888094((uint64_t)&v609, v318);
                    v352 = v610;
                    if (v610 > 0x40)
                    {
                      v354 = (_QWORD *)v609;
                      v355 = ((unint64_t)v610 + 63) >> 6;
                      v356 = (uint64_t *)v322;
                      do
                      {
                        v357 = *v356++;
                        *v354++ |= v357;
                        --v355;
                      }
                      while (v355);
                      v353 = v609;
                    }
                    else
                    {
                      v353 = v609 | v322;
                    }
                    DWORD2(v688) = v352;
                    *(_QWORD *)&v688 = v353;
                    if (v319 >= 0x41 && v322)
                      MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
                    v358 = llvm::ConstantInt::get(**v593, (llvm::Type *)&v688, v351);
                    v75 = v133;
                    if (DWORD2(v688) >= 0x41 && (_QWORD)v688)
                      MEMORY[0x1CAA32F9C](v688, 0x1000C8000313F17);
                    if (DWORD2(v673) >= 0x41 && (_QWORD)v673)
                      MEMORY[0x1CAA32F9C](v673, 0x1000C8000313F17);
                    if (LODWORD(v692[1]) >= 0x41 && v692[0])
                      MEMORY[0x1CAA32F9C](v692[0], 0x1000C8000313F17);
                    if (v574 >= 0x41 && v571)
                      MEMORY[0x1CAA32F9C](v571, 0x1000C8000313F17);
                    if (!v358)
                      goto LABEL_144;
                    if (*(_QWORD *)(v187 - 64))
                    {
                      **(_QWORD **)(v187 - 48) = *(_QWORD *)(v187 - 56);
                      v427 = *(_QWORD *)(v187 - 56);
                      if (v427)
                        *(_QWORD *)(v427 + 16) = *(_QWORD *)(v187 - 48);
                    }
                    *(_QWORD *)(v187 - 64) = v358;
                    v430 = v358[1];
                    v429 = (llvm::ConstantInt *****)(v358 + 1);
                    v428 = v430;
                    *(_QWORD *)(v187 - 56) = v430;
                    if (v430)
                      *((_QWORD *)v428 + 2) = v187 - 56;
                    *(_QWORD *)(v187 - 48) = v429;
                    *v429 = v593;
                    sub_1C5AE8B38((uint64_t)v619, (uint64_t)v188);
                    v431 = sub_1C5AE9630((uint64_t *)&v667, *(_QWORD *)(v187 + 40));
                    if (v670 != (char *)v431)
                      sub_1C6311E00(v431 + 8, v187);
LABEL_859:
                    v591 = 1;
LABEL_860:
                    v67 = &unk_1C640E000;
                    v68 = v588;
                    goto LABEL_827;
                  }
                }
                UnderlyingObject = v599;
                goto LABEL_366;
              }
              v164 = 3;
LABEL_376:
              UnderlyingObject = v599;
              goto LABEL_377;
            }
            v572 = v181 + v616;
            v582 = *((_QWORD *)&v680 + 1) & 0x7FFFFFFFFFFFFFFFLL;
            v210 = sub_1C62A67E4((uint64_t)(v173 + 8), (uint64_t *)v692);
            v211 = (uint64_t **)(v210 + 1);
            v570 = v210;
            v213 = v210 + 2;
            v212 = (_QWORD *)v210[2];
            v594 = (uint64_t **)(v210 + 1);
            if (v212)
            {
              v214 = v210 + 2;
              do
              {
                v215 = v212[4];
                v216 = v215 < v179;
                if (v215 >= v179)
                  v217 = v212;
                else
                  v217 = v212 + 1;
                if (!v216)
                  v214 = v212;
                v212 = (_QWORD *)*v217;
              }
              while (*v217);
              if (v214 == v213)
              {
                v569 = v179;
                v182 = v582;
              }
              else
              {
                v218 = v214[5];
                v569 = v179;
                v219 = v572;
                v182 = v582;
                if (v218 > v572)
                  goto LABEL_669;
                if (v218 >= v179)
                  v218 = v179;
                v569 = v218;
                if (v572 <= v214[4])
                  v219 = v214[4];
                v572 = v219;
                *(_QWORD *)v575 = v210 + 2;
                __pa = sub_1C485B670((uint64_t **)v210 + 1, v214);
                operator delete(v214);
                v213 = *(uint64_t **)v575;
                v220 = __pa;
                if (*(uint64_t **)v575 != __pa)
                {
                  v182 = v582;
                  v221 = v572;
                  while (1)
                  {
                    v211 = v594;
                    v219 = v221;
                    if (v220[5] > v221)
                      break;
                    if (v221 <= v220[4])
                      v221 = v220[4];
                    __pb = v220;
                    v573 = sub_1C485B670(v594, v220);
                    operator delete(__pb);
                    v213 = *(uint64_t **)v575;
                    v182 = v582;
                    v220 = v573;
                    if (*(uint64_t **)v575 == v573)
                    {
                      v211 = v594;
                      v219 = v221;
                      break;
                    }
                  }
LABEL_669:
                  v342 = (uint64_t *)*v213;
                  if (*v213)
                  {
                    do
                    {
                      while (1)
                      {
                        v343 = (uint64_t **)v342;
                        v344 = v342[4];
                        if (v344 <= v219)
                          break;
                        v342 = *v343;
                        if (!*v343)
                        {
                          v572 = v219;
                          v576 = v343;
                          goto LABEL_678;
                        }
                      }
                      if (v344 >= v219)
                        goto LABEL_681;
                      v342 = v343[1];
                    }
                    while (v342);
                    v572 = v219;
                    v576 = v343 + 1;
                    goto LABEL_678;
                  }
                  v572 = v219;
LABEL_677:
                  v343 = (uint64_t **)v213;
                  v576 = (uint64_t **)v213;
LABEL_678:
                  __pc = (uint64_t *)v343;
                  v343 = (uint64_t **)operator new(0x30uLL);
                  v343[4] = (uint64_t *)v572;
                  v343[5] = 0;
                  *v343 = 0;
                  v343[1] = 0;
                  v343[2] = __pc;
                  *v576 = (uint64_t *)v343;
                  v345 = (uint64_t *)**v594;
                  v346 = (uint64_t *)v343;
                  if (v345)
                  {
                    *v594 = v345;
                    v346 = *v576;
                  }
                  sub_1C4768E74((uint64_t *)v570[2], v346);
                  v211 = v594;
                  ++v570[3];
                  v182 = v582;
LABEL_681:
                  v343[5] = (uint64_t *)v569;
                  if ((*v211)[5] > v180 || (*v211)[4] < v183)
                    goto LABEL_355;
                  v164 = 1;
                  goto LABEL_376;
                }
                v182 = v582;
                v211 = v594;
              }
              v219 = v572;
              goto LABEL_669;
            }
            v569 = v179;
            goto LABEL_677;
          }
          v102 = *(_QWORD *)(v98 + 72);
          v103 = sub_1C5AE9C88((uint64_t)v619, UnderlyingObject, v85);
          v104 = *(_QWORD *)(v98 + 72);
          v105 = *(unsigned __int8 *)(v104 + 16) - 33;
          v120 = v105 > 0x33;
          v106 = (1 << v105) & 0x8000000000041;
          v107 = v120 || v106 == 0;
          if (v107
            || ((v108 = *(_QWORD *)(v104 + 64)) == 0 || (*(_BYTE *)(v108 + 13) & 8) == 0)
            && ((LODWORD(v692[0]) = 7, sub_1C53E4BBC(v104, (__int32 *)v692, 1uLL))
             && ((v127 = *(_QWORD *)(v104 - 32)) == 0
              || *(_BYTE *)(v127 + 16)
              || *(_QWORD *)(v127 + 24) != *(_QWORD *)(v104 + 72)
              || *(_DWORD *)(v127 + 36) != 7)
             || (llvm::CallBase::hasFnAttrOnCalledFunction(v104, 11) & 1) == 0))
          {
            if ((v103 & llvm::Instruction::mayThrow((llvm::Instruction *)v104) & 1) == 0)
              break;
          }
LABEL_189:
          v93 = 0;
          UnderlyingObject = v599;
LABEL_193:
          if (*(_BYTE *)(v98 + 16) == 25)
            v109 = v98;
          else
            v109 = 0;
          if (v109)
            v110 = (uint64_t *)(v109 - 32);
          else
            v110 = (uint64_t *)(v98 - 64);
          v98 = *v110;
          if (*((_QWORD *)v636 + 12) == *v110)
            goto LABEL_269;
        }
        UnderlyingObject = v599;
        if (*(_BYTE *)(v104 + 16) == 63 || (sub_1C5AEA2C4(v104) & 1) != 0)
          goto LABEL_192;
        if (!v599 || !sub_1C5AE9C88((uint64_t)v619, v599, v85))
        {
          v111 = *(_QWORD *)(v89 + 40);
          if (v111 == *(_QWORD *)(v102 + 40))
          {
            v112 = sub_1C477672C((uint64_t)&v655, v111);
            if (v656 == v655)
              v113 = (uint64_t *)((char *)&v657 + 4);
            else
              v113 = &v657;
            if (v112 != (_QWORD *)((char *)v656 + 8 * *(unsigned int *)v113))
              goto LABEL_267;
          }
          else if (HIDWORD(v657) != v658)
          {
            goto LABEL_267;
          }
        }
        if (llvm::Instruction::mayThrow((llvm::Instruction *)v102)
          && !sub_1C5AE9C88((uint64_t)v619, v599, v114))
        {
          goto LABEL_267;
        }
        v115 = *(unsigned __int8 *)(v102 + 16);
        if (v115 == 60)
          goto LABEL_213;
        if (*(unsigned __int8 *)(v102 + 16) <= 0x3Fu)
        {
          if (v115 != 61)
            goto LABEL_216;
LABEL_213:
          v116 = *(unsigned __int16 *)(v102 + 18);
          if ((v116 & 0x380) == 0)
            goto LABEL_216;
          v117 = (v116 >> 7) & 7;
LABEL_215:
          if (v117 - 3 < 5)
            goto LABEL_267;
          goto LABEL_216;
        }
        switch(v115)
        {
          case 'T':
            v126 = *(_QWORD *)(v102 - 32);
            if (v126
              && !*(_BYTE *)(v126 + 16)
              && *(_QWORD *)(v126 + 24) == *(_QWORD *)(v102 + 72)
              && (*(_BYTE *)(v126 + 33) & 0x20) != 0)
            {
              goto LABEL_217;
            }
            break;
          case '@':
            v128 = *(unsigned __int16 *)(v102 + 18);
            if (((v128 >> 2) & 7) - 3 < 5)
              goto LABEL_292;
            UnderlyingObject = v599;
            if ((unint64_t)(v128 >> 5) - 3 < 5)
            {
LABEL_267:
              v99 = v76;
              goto LABEL_293;
            }
            break;
          case 'A':
            v117 = ((unint64_t)*(unsigned __int16 *)(v102 + 18) >> 1) & 7;
            goto LABEL_215;
        }
LABEL_216:
        if (sub_1C5AE9D48((uint64_t)v619, (__int128 *)v606, v102))
          goto LABEL_267;
LABEL_217:
        v118 = *(_QWORD *)(v98 + 8);
        if (v118)
        {
          while (1)
          {
            v119 = *(_QWORD *)(v118 + 24);
            v120 = !v119 || *(unsigned __int8 *)(v119 + 16) - 25 > 1;
            if (!v120
              && (llvm::MemorySSA::dominates((uint64_t)v636, v83, *(_QWORD *)(v118 + 24)) & 1) == 0
              && sub_1C5AE9D48((uint64_t)v619, (__int128 *)v606, *(_QWORD *)(v119 + 72)))
            {
              break;
            }
            v118 = *(_QWORD *)(v118 + 8);
            if (!v118)
              goto LABEL_225;
          }
LABEL_292:
          v99 = v76;
          UnderlyingObject = v599;
LABEL_293:
          v76 = v99;
LABEL_294:
          v75 = v592;
          goto LABEL_144;
        }
LABEL_225:
        sub_1C5AE8824(v692, (uint64_t)v619, (llvm::MemoryLocation *)v102);
        v691 = v693;
        v688 = *(_OWORD *)v692;
        v689 = *(_OWORD *)&v692[2];
        v690 = *(_OWORD *)&v692[4];
        if (!(_BYTE)v693)
          goto LABEL_189;
        UnderlyingObject = v599;
        if (!sub_1C5AE9F68(v102)
          || !sub_1C5AEA068((uint64_t)v619, *(_QWORD *)(v102 + 40), *(_QWORD *)(v89 + 40), (llvm::Value *)v688))
        {
LABEL_192:
          v93 = 0;
          goto LABEL_193;
        }
        if (v587)
        {
          if (sub_1C5AEA15C((uint64_t)v619, (llvm **)&v688, v102, v89))
          {
            v75 = v592;
            goto LABEL_430;
          }
          goto LABEL_192;
        }
        v692[0] = 0;
        *(_QWORD *)&v680 = 0;
        v121 = sub_1C5AE8EB8((uint64_t)v619, v89, v102, (uint64_t)v606, (uint64_t)&v688, (uint64_t *)v692, (uint64_t *)&v680);
        v122 = v121;
        if ((v93 & 1) == 0)
          goto LABEL_247;
        if (*(_BYTE *)(v69 + 16) == 25)
          v123 = v69;
        else
          v123 = 0;
        v124 = (_QWORD *)(v123 - 32);
        v32 = v123 == 0;
        v125 = (_QWORD *)(v69 - 64);
        if (!v32)
          v125 = v124;
        if (v98 == *v125)
        {
          if (v121 == 5)
            goto LABEL_246;
LABEL_247:
          v75 = v592;
          if ((v121 - 5) >= 2)
            goto LABEL_248;
          goto LABEL_192;
        }
        if (v121 == 1)
          goto LABEL_244;
        if (v121 == 5)
        {
LABEL_246:
          v93 = 1;
          goto LABEL_193;
        }
        if (v121 != 4)
          goto LABEL_247;
LABEL_244:
        sub_1C4ED3D74(v69, v98);
        v75 = v592;
LABEL_248:
        if (v122 != 4)
          goto LABEL_430;
        if (v585 <= 1)
        {
          v93 = 0;
          v76 = (v76 - 1);
          goto LABEL_193;
        }
        --v585;
LABEL_430:
        *(_QWORD *)&v680 = &v682;
        *((_QWORD *)&v680 + 1) = &v682;
        *(_QWORD *)&v681 = 16;
        DWORD2(v681) = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v680, *(_QWORD *)(v69 + 72));
        v615[0] = v688;
        v615[1] = v689;
        v615[2] = v690;
        v222 = *(_QWORD *)(v98 + 72);
        v692[0] = (llvm::Value *)1;
        for (m = 1; m != 33; m += 2)
          *(int64x2_t *)&v692[m] = v583;
        v698 = v700;
        v699 = 0x2000000000;
        v224 = *(_QWORD *)(v98 + 8);
        if (!v224)
          goto LABEL_539;
        do
        {
          *(_QWORD *)&v673 = *(_QWORD *)(v224 + 24);
          sub_1C5AEA510((uint64_t)v692, (uint64_t *)&v673);
          v224 = *(_QWORD *)(v224 + 8);
        }
        while (v224);
        v225 = v699;
        if (!(_DWORD)v699)
        {
LABEL_539:
          v274 = v75;
          if (sub_1C5AEA408((uint64_t)v619, (uint64_t (**)())UnderlyingObject))
            goto LABEL_690;
          *(_QWORD *)&v673 = &v675;
          *((_QWORD *)&v673 + 1) = &v675;
          *(_QWORD *)&v674 = 16;
          DWORD2(v674) = 0;
          if (*((_QWORD *)&v680 + 1) == (_QWORD)v680)
            v275 = (unsigned int *)&v681 + 1;
          else
            v275 = (unsigned int *)&v681;
          v276 = *v275;
          if ((_DWORD)v276)
          {
            v277 = 8 * v276;
            v278 = (unint64_t *)*((_QWORD *)&v680 + 1);
            while (*v278 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v278;
              v277 -= 8;
              if (!v277)
                goto LABEL_568;
            }
          }
          else
          {
            v278 = (unint64_t *)*((_QWORD *)&v680 + 1);
          }
          v289 = *((_QWORD *)&v680 + 1) + 8 * v276;
          if (v278 == (unint64_t *)v289)
          {
LABEL_568:
            LODWORD(v293) = 0;
            v294 = 16;
            v295 = (uint64_t *)&v675;
            v296 = (uint64_t *)&v675;
          }
          else
          {
            v290 = *v278;
LABEL_564:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v673, *(_QWORD *)(v290 + 40));
            v291 = v278 + 1;
            while (v291 != (unint64_t *)v289)
            {
              v292 = *v291++;
              v290 = v292;
              if (v292 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v278 = v291 - 1;
                goto LABEL_564;
              }
            }
            v295 = (uint64_t *)*((_QWORD *)&v673 + 1);
            v296 = (uint64_t *)v673;
            LODWORD(v293) = DWORD1(v674);
            v294 = v674;
          }
          v616 = 0;
          if (v295 == v296)
            v293 = v293;
          else
            v293 = v294;
          v297 = &v295[v293];
          if ((_DWORD)v293)
          {
            v298 = 8 * v293;
            v299 = 8 * v293;
            v300 = v295;
            while (1)
            {
              v301 = *v300;
              if ((unint64_t)*v300 < 0xFFFFFFFFFFFFFFFELL)
                break;
              ++v300;
              v299 -= 8;
              if (!v299)
              {
                v301 = *v297;
                break;
              }
            }
            v616 = v301;
            while ((unint64_t)*v295 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v295;
              v298 -= 8;
              if (!v298)
              {
                v295 = v297;
                break;
              }
            }
          }
          else
          {
            v301 = *v295;
            v616 = *v295;
          }
          v302 = (unint64_t *)(v295 + 1);
          do
          {
            if (v302 == (unint64_t *)v297)
              goto LABEL_593;
            v304 = *v302++;
            v303 = v304;
          }
          while (v304 > 0xFFFFFFFFFFFFFFFDLL);
          if (v301)
          {
            v305 = v302 - 1;
LABEL_588:
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(v638, v301, v303);
            v301 = NearestCommonDominator;
            v616 = NearestCommonDominator;
            v307 = v305 + 1;
            while (v307 != (unint64_t *)v297)
            {
              v308 = *v307++;
              v303 = v308;
              if (v308 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v309 = 0;
                v305 = v307 - 1;
                if (NearestCommonDominator)
                  goto LABEL_588;
                goto LABEL_594;
              }
            }
LABEL_593:
            v309 = v301;
            goto LABEL_594;
          }
          v309 = 0;
LABEL_594:
          if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v638, v309, *(_QWORD *)(v98 + 64)))
          {
            v310 = v616;
            goto LABEL_598;
          }
          if (v672)
          {
            v310 = 0;
            v616 = 0;
LABEL_598:
            v311 = sub_1C477672C((uint64_t)&v673, v310);
            if (*((_QWORD *)&v673 + 1) == (_QWORD)v673)
              v312 = (unsigned int *)&v674 + 1;
            else
              v312 = (unsigned int *)&v674;
            if (v311 != (_QWORD *)(*((_QWORD *)&v673 + 1) + 8 * *v312))
            {
              v279 = 1;
              v313 = v98;
              goto LABEL_607;
            }
            v609 = 0;
            v610 = 0;
            v611 = 0;
            v613 = 0;
            v614 = 0;
            v612 = 0;
            if (v616)
            {
              sub_1C5ACED14((uint64_t)&v609, &v616);
            }
            else
            {
              v324 = *(unsigned int *)(v638 + 8);
              if ((_DWORD)v324)
              {
                v325 = *(uint64_t **)v638;
                v326 = 8 * v324;
                do
                {
                  v608 = 0;
                  v608 = *v325;
                  v327 = *(_QWORD *)(v608 + 40);
                  if (v327)
                    v328 = v327 - 24;
                  else
                    v328 = 0;
                  if (*(unsigned __int8 *)(v328 + 16) - 29 >= 0xB)
                    v328 = 0;
                  if (*(_BYTE *)(v328 + 16) != 35)
                    sub_1C5ACED14((uint64_t)&v609, &v608);
                  ++v325;
                  v326 -= 8;
                }
                while (v326);
              }
            }
            v329 = v612;
            if (v613 == v612)
            {
LABEL_665:
              v314 = 0;
            }
            else
            {
              v330 = 0;
              v331 = 0;
              while (1)
              {
                v332 = *(_QWORD *)(v329 + 8 * v330);
                v333 = sub_1C477672C((uint64_t)&v673, v332);
                v334 = *((_QWORD *)&v673 + 1) == (_QWORD)v673
                     ? (unsigned int *)((char *)&v674 + 4)
                     : (unsigned int *)&v674;
                if (v333 == (_QWORD *)(*((_QWORD *)&v673 + 1) + 8 * *v334))
                {
                  if (v332 == *(_QWORD *)(v98 + 64))
                    break;
                  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)v637, v332))
                  {
                    while (1)
                    {
                      v332 = *(_QWORD *)(v332 + 8);
                      if (!v332)
                        break;
                      v335 = *(_QWORD *)(v332 + 24);
                      v336 = *(unsigned __int8 *)(v335 + 16);
                      if (v335)
                        v337 = v336 >= 0x1C;
                      else
                        v337 = 0;
                      if (v337 && v336 - 29 <= 0xA)
                      {
LABEL_653:
                        v608 = *(_QWORD *)(v335 + 40);
                        sub_1C5ACED14((uint64_t)&v609, &v608);
                        while (1)
                        {
                          v332 = *(_QWORD *)(v332 + 8);
                          if (!v332)
                            goto LABEL_663;
                          v335 = *(_QWORD *)(v332 + 24);
                          v339 = *(unsigned __int8 *)(v335 + 16);
                          if (v335)
                            v340 = v339 >= 0x1C;
                          else
                            v340 = 0;
                          if (v340 && v339 - 29 < 0xB)
                            goto LABEL_653;
                        }
                      }
                    }
LABEL_663:
                    if (dword_1ED81C318 <= (unint64_t)((v613 - v612) >> 3))
                      break;
                  }
                }
                v329 = v612;
                v330 = ++v331;
                if (v331 >= (unint64_t)((v613 - v612) >> 3))
                  goto LABEL_665;
              }
              v314 = 1;
            }
            sub_1C5408A20(&v609);
            v313 = 0;
            v279 = 0;
          }
          else
          {
            v313 = 0;
            v279 = 0;
LABEL_607:
            v314 = 1;
          }
          if (*((_QWORD *)&v673 + 1) != (_QWORD)v673)
            free(*((void **)&v673 + 1));
          if (!v314)
LABEL_690:
            v279 = 1;
          else
            v98 = v313;
          v75 = v274;
          goto LABEL_692;
        }
        v226 = 0;
        while (2)
        {
          if (v225 - v226 > v75)
          {
            v98 = 0;
            v279 = 0;
            goto LABEL_692;
          }
          v227 = v75;
          v228 = *((_QWORD *)v698 + v226);
          v595 = v227 - 1;
          if (*(_BYTE *)(v228 + 16) == 27)
          {
            if (*((_QWORD *)&v680 + 1) == (_QWORD)v680)
              v229 = (unsigned int *)&v681 + 1;
            else
              v229 = (unsigned int *)&v681;
            v230 = *v229;
            if ((_DWORD)v230)
            {
              v231 = 8 * v230;
              v232 = (uint64_t *)*((_QWORD *)&v680 + 1);
              while ((unint64_t)*v232 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v232;
                v231 -= 8;
                if (!v231)
                  goto LABEL_461;
              }
            }
            else
            {
              v232 = (uint64_t *)*((_QWORD *)&v680 + 1);
            }
            v238 = *((_QWORD *)&v680 + 1) + 8 * v230;
            if (v232 == (uint64_t *)v238)
            {
LABEL_461:
              for (n = *(_QWORD *)(v228 + 8); n; n = *(_QWORD *)(n + 8))
              {
                *(_QWORD *)&v673 = *(_QWORD *)(n + 24);
                sub_1C5AEA510((uint64_t)v692, (uint64_t *)&v673);
              }
            }
            else
            {
              v239 = *v232;
LABEL_457:
              if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates((uint64_t)v637, *(_QWORD *)(v239 + 40), *(_QWORD *)(v228 + 64)))
              {
                while (1)
                {
                  if (++v232 == (uint64_t *)v238)
                    goto LABEL_461;
                  v239 = *v232;
                  if ((unint64_t)*v232 < 0xFFFFFFFFFFFFFFFELL)
                    goto LABEL_457;
                }
              }
            }
            goto LABEL_490;
          }
          v233 = *(_QWORD *)(v228 + 72);
          if (*((_QWORD *)&v680 + 1) == (_QWORD)v680)
            v234 = (unsigned int *)&v681 + 1;
          else
            v234 = (unsigned int *)&v681;
          v235 = *v234;
          if ((_DWORD)v235)
          {
            v236 = 8 * v235;
            v237 = (const llvm::Value **)*((_QWORD *)&v680 + 1);
            while ((unint64_t)*v237 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v237;
              v236 -= 8;
              if (!v236)
                goto LABEL_471;
            }
          }
          else
          {
            v237 = (const llvm::Value **)*((_QWORD *)&v680 + 1);
          }
          v241 = *((_QWORD *)&v680 + 1) + 8 * v235;
          if (v237 != (const llvm::Value **)v241)
          {
            v242 = *v237;
LABEL_467:
            if (llvm::DominatorTree::dominates(v637, v242, (const llvm::Instruction *)v233))
              goto LABEL_490;
            while (++v237 != (const llvm::Value **)v241)
            {
              v242 = *v237;
              if ((unint64_t)*v237 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_467;
            }
          }
LABEL_471:
          if (sub_1C5AEA15C((uint64_t)v619, (llvm **)v615, v222, v233))
            goto LABEL_490;
          if (sub_1C5AEA2C4(*(_QWORD *)(v228 + 72)))
          {
            for (ii = *(_QWORD *)(v228 + 8); ii; ii = *(_QWORD *)(ii + 8))
            {
              *(_QWORD *)&v673 = *(_QWORD *)(ii + 24);
              sub_1C5AEA510((uint64_t)v692, (uint64_t *)&v673);
            }
            goto LABEL_490;
          }
          UnderlyingObject = v599;
          if (llvm::Instruction::mayThrow((llvm::Instruction *)v233)
            && !sub_1C5AE9C88((uint64_t)v619, v599, v244)
            || sub_1C5AE9D48((uint64_t)v619, v615, v233))
          {
            v98 = 0;
            v279 = 0;
            goto LABEL_728;
          }
          if (v98 == v228)
          {
            if (!sub_1C5AEA338(*(llvm::Value **)&v615[0]))
              goto LABEL_729;
            goto LABEL_490;
          }
          if (v228 == v69 || *(_BYTE *)(v228 + 16) != 26)
          {
LABEL_490:
            ++v226;
            v225 = v699;
            UnderlyingObject = v599;
            v75 = v595;
            if (v226 >= v699)
              goto LABEL_539;
            continue;
          }
          break;
        }
        v245 = *(unsigned __int8 *)(v233 + 16);
        v246 = (v245 - 33);
        if (v246 > 0x37)
          goto LABEL_486;
        if (((1 << (v245 - 33)) & 0x8000000000041) != 0)
        {
          v248 = *(_QWORD *)(v233 + 64);
          if (!v248 || (*(_BYTE *)(v248 + 17) & 0x30) == 0)
          {
            v249 = *(_DWORD *)(v233 + 20);
            if (v249 < 0)
            {
              v265 = v233 - 32 * (v249 & 0x7FFFFFF);
              v268 = *(_QWORD *)(v265 - 8);
              v266 = v265 - 8;
              v267 = v268;
              if (v268)
              {
                v269 = -v267;
                do
                {
                  v270 = *(_DWORD *)(*(_QWORD *)(v266 + v269) + 8);
                  v120 = v270 > 7;
                  v271 = (1 << v270) & 0x83;
                  if (v120 || v271 == 0)
                    goto LABEL_498;
                  v269 += 16;
                }
                while (v269);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v233, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v233, 44) & 1) == 0)
            {
              v245 = *(unsigned __int8 *)(v233 + 16);
              goto LABEL_498;
            }
          }
          goto LABEL_486;
        }
        if (v246 == 27)
        {
          if ((*(_WORD *)(v233 + 18) & 0x301) != 0)
            goto LABEL_506;
LABEL_486:
          for (jj = *(_QWORD *)(v228 + 8); jj; jj = *(_QWORD *)(jj + 8))
          {
            *(_QWORD *)&v673 = *(_QWORD *)(jj + 24);
            sub_1C5AEA510((uint64_t)v692, (uint64_t *)&v673);
          }
          goto LABEL_490;
        }
        if (((1 << (v245 - 33)) & 0x808001D0000010) == 0)
          goto LABEL_486;
LABEL_498:
        v250 = v245 - 33;
        if (v250 <= 0x33 && ((1 << v250) & 0x8000000000041) != 0)
        {
          v251 = *(_QWORD *)(v233 + 64);
          if (v251)
          {
            if ((*(_BYTE *)(v251 + 13) & 8) != 0)
              goto LABEL_486;
          }
          LODWORD(v673) = 7;
          if ((!sub_1C53E4BBC(v233, (__int32 *)&v673, 1uLL)
             || (v273 = *(_QWORD *)(v233 - 32)) != 0
             && !*(_BYTE *)(v273 + 16)
             && *(_QWORD *)(v273 + 24) == *(_QWORD *)(v233 + 72)
             && *(_DWORD *)(v273 + 36) == 7)
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v233, 11) & 1) != 0)
          {
            goto LABEL_486;
          }
        }
LABEL_506:
        v609 = 0;
        v616 = 0;
        sub_1C5AE8824(&v673, (uint64_t)v619, (llvm::MemoryLocation *)v233);
        if (!v676
          || sub_1C5AE8EB8((uint64_t)v619, v233, v222, (uint64_t)&v673, (uint64_t)v615, &v609, &v616) != 1)
        {
          goto LABEL_486;
        }
        v252 = v660;
        if (v661)
        {
          v253 = *(_QWORD *)(v233 + 40);
          v254 = v661 - 1;
          v255 = ((v253 >> 4) ^ (v253 >> 9)) & (v661 - 1);
          v256 = *(_QWORD *)(v660 + 16 * v255);
          if (v253 != v256)
          {
            v261 = 1;
            while (v256 != -4096)
            {
              v262 = v255 + v261++;
              v255 = v262 & v254;
              v256 = *(_QWORD *)(v660 + 16 * v255);
              if (v253 == v256)
                goto LABEL_510;
            }
            v255 = v661;
          }
LABEL_510:
          v257 = *(_DWORD *)(v660 + 16 * v255 + 8);
          v258 = *(_QWORD *)(v98 + 64);
          LODWORD(v259) = ((v258 >> 4) ^ (v258 >> 9)) & v254;
          v260 = *(_QWORD *)(v660 + 16 * v259);
          if (v258 == v260)
          {
            v252 = v660 + 16 * v259;
          }
          else
          {
            v263 = 1;
            while (v260 != -4096)
            {
              v264 = v259 + v263++;
              v259 = v264 & v254;
              v260 = *(_QWORD *)(v660 + 16 * v259);
              if (v258 == v260)
              {
                v252 = v660 + 16 * v259;
                goto LABEL_513;
              }
            }
            v252 = v660 + 16 * v661;
          }
        }
        else
        {
          v257 = *(_DWORD *)(v660 + 8);
        }
LABEL_513:
        if (v257 < *(_DWORD *)(v252 + 8))
        {
          if (!sub_1C5AEA408((uint64_t)v619, (uint64_t (**)())v599))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v680, v233);
          goto LABEL_490;
        }
LABEL_729:
        v98 = 0;
        v279 = 0;
        UnderlyingObject = v599;
LABEL_728:
        v75 = v595;
LABEL_692:
        if (v698 != v700)
          free(v698);
        if (((uint64_t)v692[0] & 1) == 0)
          MEMORY[0x1CAA32FB4](v692[1], 8);
        if (*((_QWORD *)&v680 + 1) != (_QWORD)v680)
          free(*((void **)&v680 + 1));
        if (v279)
          goto LABEL_279;
LABEL_144:
        v80 = v603;
        v81 = ++v82;
        if (v82 >= (unint64_t)((v604 - (_BYTE *)v603) >> 3))
          goto LABEL_732;
      }
      v94 = 0;
      v95 = *(unsigned __int8 *)(v89 + 16) - 33;
      if (v95 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v89 + 16) - 33)) & 0x8000000000041) == 0)
        {
          if (((1 << (*(_BYTE *)(v89 + 16) - 33)) & 0x808001C8000010) == 0)
          {
            if (v95 == 28)
              v94 = (*(_WORD *)(v89 + 18) & 0x301) != 0;
            goto LABEL_171;
          }
LABEL_170:
          v94 = 1;
          goto LABEL_171;
        }
        v96 = *(_QWORD *)(v89 + 64);
        if (v96 && ((*(_BYTE *)(v96 + 20) & 4) != 0 || (*(_BYTE *)(v96 + 17) & 0x10) != 0))
          goto LABEL_165;
        LODWORD(v692[0]) = 7;
        if (sub_1C53E4BBC(v89, (__int32 *)v692, 1uLL))
        {
          v97 = *(_QWORD *)(v89 - 32);
          if (!v97 || *(_BYTE *)(v97 + 16) || *(_QWORD *)(v97 + 24) != *(_QWORD *)(v89 + 72))
          {
            v94 = 1;
            UnderlyingObject = v599;
            goto LABEL_171;
          }
          UnderlyingObject = v599;
          if (*(_DWORD *)(v97 + 36) != 7)
            goto LABEL_170;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v89, 66) & 1) != 0)
LABEL_165:
          v94 = 0;
        else
          v94 = llvm::CallBase::hasFnAttrOnCalledFunction(v89, 44) ^ 1;
      }
LABEL_171:
      v93 = v94 ^ 1;
      goto LABEL_172;
    }
LABEL_732:
    v359 = *(_QWORD *)(v69 + 72);
    if (*(_BYTE *)(v359 + 16) == 61)
      v360 = *(_QWORD *)(v69 + 72);
    else
      v360 = 0;
    if (sub_1C5392540(*(_QWORD *)(v69 + 72)))
      v361 = v359;
    else
      v361 = 0;
    if (v360)
    {
      v362 = (uint64_t *)(v360 - 64);
      v68 = v588;
    }
    else
    {
      v68 = v588;
      if (!v361)
        goto LABEL_755;
      v362 = (uint64_t *)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF) + 32);
    }
    v363 = *v362;
    if (*(unsigned __int8 *)(v363 + 16) >= 0x15u)
      v364 = 0;
    else
      v364 = (llvm::UndefValue **)v363;
    if (!sub_1C5AE9F68(v359))
      goto LABEL_755;
    if (v364)
    {
      v365 = byte_1ED82E438 ? 59 : 63;
      sub_1C4EBF808((uint64_t)UnderlyingObject, v365, v639, v692);
      if (LOBYTE(v692[3]))
      {
        InitialValueOfAllocation = llvm::getInitialValueOfAllocation((uint64_t)UnderlyingObject, v639, *v364);
        if (InitialValueOfAllocation && InitialValueOfAllocation == (llvm::UndefValue *)v364)
        {
          v411 = v636;
          SkipSelfWalker = llvm::MemorySSA::getSkipSelfWalker(v636);
          if (*((_QWORD *)v411 + 12) == (*(uint64_t (**)(_QWORD *, uint64_t))(*SkipSelfWalker + 16))(SkipSelfWalker, v69))goto LABEL_825;
LABEL_755:
          v367 = *(_QWORD *)(v69 + 72);
          v368 = sub_1C5392540(v367);
          if (!v367)
            goto LABEL_826;
          v67 = &unk_1C640E000;
          if (!v368)
            goto LABEL_827;
          v369 = *(unsigned __int8 **)(v367 - 32 * (*(_DWORD *)(v367 + 20) & 0x7FFFFFF) + 32);
          if (!v369 || v369[16] > 0x14u)
            goto LABEL_827;
          if (!llvm::Constant::isNullValue((llvm::Constant *)v369))
            goto LABEL_827;
          v371 = sub_1C5AE9F68(v367);
          if (!v371)
            goto LABEL_827;
          v372 = *(_QWORD *)(v619[0] + 112);
          if (v372)
          {
            if ((*(_BYTE *)(v372 + 18) & 0x2C) != 0)
              goto LABEL_827;
          }
          if ((*(_BYTE *)(v619[0] + 23) & 0x10) != 0)
          {
            v373 = ***(_QWORD ***)v619[0];
            v374 = *(_QWORD *)(v373 + 152);
            v375 = *(unsigned int *)(v373 + 168);
            if (!(_DWORD)v375)
              goto LABEL_832;
            LODWORD(v376) = (v375 - 1) & ((LODWORD(v619[0]) >> 4) ^ (LODWORD(v619[0]) >> 9));
            v377 = (uint64_t *)(v374 + 16 * v376);
            v378 = *v377;
            if (*v377 != v619[0])
            {
              v379 = 1;
              while (v378 != -4096)
              {
                v380 = v376 + v379++;
                v376 = v380 & (v375 - 1);
                v378 = *(_QWORD *)(v374 + 16 * v376);
                if (v378 == v619[0])
                {
                  v377 = (uint64_t *)(v374 + 16 * v376);
                  goto LABEL_833;
                }
              }
LABEL_832:
              v377 = (uint64_t *)(v374 + 16 * v375);
            }
LABEL_833:
            v413 = v377[1];
            if (*(_QWORD *)v413 == 6)
            {
              v414 = *(_DWORD *)(v413 + 16);
              v415 = *(unsigned __int16 *)(v413 + 20);
              if (v414 == 1819042147 && v415 == 25455)
                goto LABEL_827;
            }
          }
          if (!UnderlyingObject)
            goto LABEL_827;
          if (*((_BYTE *)UnderlyingObject + 16) != 84)
            goto LABEL_827;
          v417 = (uint64_t ***)*((_QWORD *)UnderlyingObject - 4);
          if (!v417)
            goto LABEL_827;
          if (*((_BYTE *)v417 + 16))
            goto LABEL_827;
          v418 = (uint64_t)v417[3];
          if (v418 != *((_QWORD *)UnderlyingObject + 9))
            goto LABEL_827;
          LODWORD(v673) = 0;
          if ((*((_BYTE *)v417 + 33) & 0x20) != 0)
            goto LABEL_827;
          if ((*((_BYTE *)v417 + 23) & 0x10) != 0)
          {
            v419 = ***v417;
            v420 = *(_QWORD *)(v419 + 152);
            v421 = *(unsigned int *)(v419 + 168);
            if (!(_DWORD)v421)
              goto LABEL_861;
            LODWORD(v422) = (v421 - 1) & ((v417 >> 4) ^ (v417 >> 9));
            v423 = (uint64_t ****)(v420 + 16 * v422);
            v424 = *v423;
            if (*v423 != v417)
            {
              v425 = 1;
              while (v424 != (uint64_t ***)-4096)
              {
                v426 = v422 + v425++;
                v422 = v426 & (v421 - 1);
                v424 = *(uint64_t ****)(v420 + 16 * v422);
                if (v424 == v417)
                {
                  v423 = (uint64_t ****)(v420 + 16 * v422);
                  goto LABEL_862;
                }
              }
LABEL_861:
              v423 = (uint64_t ****)(v420 + 16 * v421);
            }
LABEL_862:
            v432 = v423[1];
            v435 = (size_t)*v432;
            v433 = (char *)(v432 + 2);
            v434 = v435;
          }
          else
          {
            v434 = 0;
            v433 = &byte_1C871356D;
          }
          v436 = *v639;
          if (!llvm::TargetLibraryInfoImpl::getLibFunc(v371, v433, v434, &v673))
            goto LABEL_827;
          v437 = v673;
          if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v436, v418, v673)
            || ((*(_QWORD *)(v639[1] + 8 * (v437 >> 6)) >> v437) & 1) != 0
            || (_DWORD)v437 != 317
            || (*(_BYTE *)(*v639 + (v437 >> 2)) & 0xC) == 0)
          {
            goto LABEL_827;
          }
          v438 = (_QWORD *)(v367 - 32 * (*(_DWORD *)(v367 + 20) & 0x7FFFFFF));
          if (*((_QWORD *)v599 - 4 * (*((_DWORD *)v599 + 5) & 0x7FFFFFF)) != v438[8])
            goto LABEL_860;
          v439 = *((_QWORD *)v599 + 5);
          v440 = *(_QWORD *)(v367 + 40);
          if (v439 != v440)
          {
            v441 = *(_QWORD *)(v439 + 40);
            if (v441 == v439 + 40)
              goto LABEL_860;
            v442 = v441 ? v441 - 24 : 0;
            v443 = *(unsigned __int8 *)(v442 + 16) - 40;
            v444 = v443 >= 0xFFFFFFF5 ? v442 : 0;
            if (!v441)
              goto LABEL_860;
            if (*(_BYTE *)(v444 + 16) != 30 || v443 < 0xFFFFFFF5)
              goto LABEL_860;
            if ((*(_DWORD *)(v444 + 20) & 0x7FFFFFF) != 3)
              goto LABEL_860;
            v446 = *(_QWORD *)(v444 - 96);
            if (!v446 || *(_BYTE *)(v446 + 16) != 81 || *v438 != *(_QWORD *)(v446 - 64))
              goto LABEL_860;
            v447 = *(unsigned __int8 **)(v446 - 32);
            v448 = !v447 || v447[16] > 0x14u;
            if (v448
              || (llvm::Constant::isNullValue(*(llvm::Constant **)(v446 - 32)) & 1) == 0
              && (sub_1C4E71060((uint64_t)v692, (llvm::Constant *)v447) & 1) == 0)
            {
              goto LABEL_860;
            }
            if (!*(_QWORD *)(v444 - 32))
              goto LABEL_860;
            v449 = *(_QWORD *)(v444 - 64);
            if (!v449)
              goto LABEL_860;
            if ((*(_WORD *)(v446 + 18) & 0x3F) != 0x20 || v440 != v449)
              goto LABEL_860;
          }
          if (!llvm::DominatorTree::dominates(v637, v599, (const llvm::Instruction *)v367)
            || !sub_1C5AEA970(*((_QWORD *)v599 + 4), *((llvm::BasicBlock **)v599 + 5), v367, &v627, (uint64_t)v640, v637))
          {
            goto LABEL_860;
          }
          sub_1C4773D54((uint64_t)&v680, (uint64_t)v599, 0, 0, 0);
          IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v599 + 5) + 56) + 40) + 272), v684, 0);
          v453 = (llvm::ConstantInt *)*IntPtrType;
          v454 = *((_DWORD *)IntPtrType + 2);
          LODWORD(v692[1]) = v454 >> 8;
          if (v454 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v692, 1, 0);
          }
          else
          {
            if (v454 <= 0xFF)
              v455 = 0;
            else
              v455 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v454);
            v692[0] = (llvm::Value *)(v455 & 1);
          }
          v456 = llvm::ConstantInt::get(v453, (llvm::LLVMContext *)v692, v452);
          if (LODWORD(v692[1]) >= 0x41 && v692[0])
            MEMORY[0x1CAA32F9C](v692[0], 0x1000C8000313F17);
          v457 = (llvm::Instruction *)llvm::emitCalloc((uint64_t)v456, *((_QWORD *)v599 - 4 * (*((_DWORD *)v599 + 5) & 0x7FFFFFF)), (uint64_t)&v680, v639);
          if (!v457)
          {
            if ((__int128 *)v680 != &v681)
              free((void *)v680);
            goto LABEL_860;
          }
          v458 = v457;
          v692[0] = v636;
          v692[1] = (llvm::Value *)&v692[3];
          v692[2] = (llvm::Value *)0x1000000000;
          v707 = v710;
          v708[0] = v710;
          v708[1] = (void *)8;
          v709 = 0;
          v711 = v713;
          v712 = 0x800000000;
          v715[0] = 0;
          v715[1] = 0;
          v714 = v715;
          v459 = v599 >> 4;
          v460 = *((_DWORD *)v636 + 10);
          if (v460)
          {
            v461 = *((_QWORD *)v636 + 3);
            v462 = v460 - 1;
            v463 = (v460 - 1) & (v459 ^ (v599 >> 9));
            v464 = *(llvm::Value **)(v461 + 16 * v463);
            if (v599 != v464)
            {
              v465 = 1;
              while (v464 != (llvm::Value *)-4096)
              {
                v466 = v463 + v465++;
                v463 = v466 & v462;
                v464 = *(llvm::Value **)(v461 + 16 * v463);
                if (v599 == v464)
                  goto LABEL_920;
              }
              goto LABEL_921;
            }
LABEL_920:
            v467 = *(llvm::MemoryAccess **)(v461 + 16 * v463 + 8);
          }
          else
          {
LABEL_921:
            v467 = 0;
          }
          MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter((uint64_t **)v692, v457, v467, (llvm::BasicBlock **)v467);
          llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)v692, (llvm::MemoryDef *)MemoryAccessAfter, 1);
          v469 = *((_DWORD *)v692[0] + 10);
          if (v469)
          {
            v470 = *((_QWORD *)v692[0] + 3);
            v471 = v469 - 1;
            v472 = (v469 - 1) & (v459 ^ (v599 >> 9));
            v473 = *(llvm::Value **)(v470 + 16 * v472);
            if (v473 == v599)
            {
LABEL_927:
              v476 = *(llvm::MemoryAccess **)(v470 + 16 * v472 + 8);
              if (v476)
                llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)v692, v476, 0);
            }
            else
            {
              v474 = 1;
              while (v473 != (llvm::Value *)-4096)
              {
                v475 = v472 + v474++;
                v472 = v475 & v471;
                v473 = *(llvm::Value **)(v470 + 16 * v472);
                if (v473 == v599)
                  goto LABEL_927;
              }
            }
          }
          llvm::Value::doRAUW(v599, v458, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v599 + 5) + 40, (uint64_t ***)v599);
          v477 = *((_QWORD *)v599 + 3);
          v478 = (_QWORD *)*((_QWORD *)v599 + 4);
          *v478 = v477;
          *(_QWORD *)(v477 + 8) = v478;
          *((_QWORD *)v599 + 3) = 0;
          *((_QWORD *)v599 + 4) = 0;
          llvm::Value::deleteValue(v599);
          sub_1C61247C0((uint64_t)&v714, v715[0]);
          if (v711 != v713)
            free(v711);
          if (v708[0] != v707)
            free(v708[0]);
          sub_1C4EE41F8((char **)&v692[1]);
          if ((__int128 *)v680 != &v681)
            free((void *)v680);
          sub_1C5AE8B38((uint64_t)v619, v586);
          goto LABEL_859;
        }
      }
    }
    if (!v360)
      goto LABEL_755;
    v366 = *(_QWORD *)(v360 - 64);
    if (!v366 || *(_BYTE *)(v366 + 16) != 60 || *(_QWORD *)(v366 - 32) != *(_QWORD *)(v360 - 32))
      goto LABEL_755;
    v381 = *((_DWORD *)v636 + 10);
    if (!v381)
      goto LABEL_778;
    v382 = *((_QWORD *)v636 + 3);
    v383 = v381 - 1;
    v384 = (v381 - 1) & ((v366 >> 4) ^ (v366 >> 9));
    v385 = *(_QWORD *)(v382 + 16 * v384);
    if (v366 != v385)
    {
      v386 = 1;
      while (v385 != -4096)
      {
        v387 = v384 + v386++;
        v384 = v387 & v383;
        v385 = *(_QWORD *)(v382 + 16 * v384);
        if (v366 == v385)
          goto LABEL_777;
      }
LABEL_778:
      v388 = 0;
      goto LABEL_779;
    }
LABEL_777:
    v388 = *(_QWORD *)(v382 + 16 * v384 + 8);
LABEL_779:
    if (*(_BYTE *)(v388 + 16) == 25)
      v389 = v388;
    else
      v389 = 0;
    v390 = (uint64_t *)(v388 - 64);
    if (v389)
      v390 = (uint64_t *)(v389 - 32);
    v391 = *v390;
    if (*(_BYTE *)(v69 + 16) == 25)
      v392 = v69;
    else
      v392 = 0;
    v393 = (_QWORD *)(v392 - 32);
    v32 = v392 == 0;
    v394 = (_QWORD *)(v69 - 64);
    if (!v32)
      v394 = v393;
    if (v391 == *v394)
      goto LABEL_825;
    memset(v692, 0, 20);
    memset(&v692[3], 0, 24);
    WalkerImpl = llvm::MemorySSA::getWalkerImpl(v636);
    *(_QWORD *)&v680 = (*(uint64_t (**)(_QWORD *, uint64_t))(*WalkerImpl + 16))(WalkerImpl, v69);
    *(_QWORD *)&v673 = v69;
    sub_1C5AE8994((uint64_t)v692, (uint64_t *)&v673);
    sub_1C5AE8994((uint64_t)v692, (uint64_t *)&v680);
    v396 = v692[4];
    v397 = v692[3];
    if ((llvm::Value *)(v692[4] - v692[3]) < (llvm::Value *)9)
    {
      v408 = 0;
      goto LABEL_822;
    }
    v398 = 1;
    while (1)
    {
      v399 = *((_QWORD *)v397 + v398);
      *(_QWORD *)&v680 = v399;
      v400 = v399 && *(_BYTE *)(v399 + 16) == 27;
      v401 = v400;
      if (!v400)
        break;
      v402 = *(_DWORD *)(v399 + 20);
      if ((v402 & 0x40000000) == 0)
      {
        v403 = v402 & 0x7FFFFFF;
        v404 = (uint64_t *)(v399 - 32 * v403);
        if (!v403)
          goto LABEL_811;
LABEL_804:
        v405 = 32 * v403;
        do
        {
          v406 = *v404;
          v404 += 4;
          *(_QWORD *)&v673 = v406;
          sub_1C5AE8994((uint64_t)v692, (uint64_t *)&v673);
          v405 -= 32;
        }
        while (v405);
        v397 = v692[3];
        break;
      }
      v404 = *(uint64_t **)(v399 - 8);
      v403 = v402 & 0x7FFFFFF;
      if (v403)
        goto LABEL_804;
LABEL_811:
      v398 = (v398 + 1);
      if (v398 >= (v396 - v397) >> 3)
      {
        v408 = 0;
        goto LABEL_822;
      }
    }
    v407 = !v401;
    if (v391 == v399)
      v407 = 0;
    if (!v407)
    {
      v396 = v692[4];
      goto LABEL_811;
    }
    v408 = 1;
LABEL_822:
    if (v397)
    {
      v692[4] = v397;
      operator delete(v397);
    }
    MEMORY[0x1CAA32FB4](v692[0], 8);
    if ((v408 & 1) != 0)
      goto LABEL_755;
LABEL_825:
    sub_1C5AE8B38((uint64_t)v619, v586);
    v591 = 1;
LABEL_826:
    v67 = &unk_1C640E000;
LABEL_827:
    if (v603)
      operator delete(v603);
    MEMORY[0x1CAA32FB4](v601[0], 8);
LABEL_830:
    ++v68;
    v66 = v644;
  }
  while (v68 < v644);
LABEL_937:
  if (byte_1ED81BD18)
  {
    v479 = (llvm::SmallPtrSetImplBase *)v669;
    v596 = (llvm::SmallPtrSetImplBase *)v670;
    if (v669 != v670)
    {
      do
      {
        v480 = *((_QWORD *)v479 + 1);
        v481 = *((unsigned int *)v479 + 6);
        v482 = (uint64_t *)(v480 + 32 * v481);
        if (*((_DWORD *)v479 + 4))
        {
          if (*((_DWORD *)v479 + 6))
          {
            v483 = 32 * v481;
            v484 = (uint64_t *)*((_QWORD *)v479 + 1);
            while ((*v484 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v484 += 4;
              v483 -= 32;
              if (!v483)
                goto LABEL_944;
            }
          }
          else
          {
            v484 = (uint64_t *)*((_QWORD *)v479 + 1);
          }
        }
        else
        {
LABEL_944:
          v484 = (uint64_t *)(v480 + 32 * v481);
        }
        v600 = (llvm::Value *)(v480 + 32 * v481);
        if (v484 == (uint64_t *)v600)
        {
          v485 = 0;
        }
        else
        {
          v485 = 0;
          do
          {
            v486 = *v484;
            v681 = 0uLL;
            *(_QWORD *)&v680 = v486;
            *((_QWORD *)&v680 + 1) = &v681;
            v487 = (uint64_t *)v484[1];
            if (v487 != v484 + 2)
            {
              do
              {
                sub_1C628D95C((_QWORD **)&v680 + 1, &v681, v487[4], (_OWORD *)v487 + 2);
                v488 = (uint64_t *)v487[1];
                if (v488)
                {
                  do
                  {
                    v489 = v488;
                    v488 = (uint64_t *)*v488;
                  }
                  while (v488);
                }
                else
                {
                  do
                  {
                    v489 = (uint64_t *)v487[2];
                    v32 = *v489 == (_QWORD)v487;
                    v487 = v489;
                  }
                  while (!v32);
                }
                v487 = v489;
              }
              while (v489 != v484 + 2);
              v486 = v680;
            }
            sub_1C5AE8824(v692, (uint64_t)v619, (llvm::MemoryLocation *)v486);
            v490 = (unint64_t)v692[1];
            v491 = (uint64_t *)llvm::Value::stripPointerCasts(v692[0]);
            v492 = v490 & 0x7FFFFFFFFFFFFFFFLL;
            *(_QWORD *)&v688 = v490 & 0x7FFFFFFFFFFFFFFFLL;
            v493 = v640;
            LODWORD(v692[1]) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v640, *v491);
            if (LODWORD(v692[1]) > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)v692, 0, 0);
            else
              v692[0] = 0;
            llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v491, v493, (const void **)v692, 1, 0, 0, v494);
            if (LODWORD(v692[1]) > 0x40)
            {
              v495 = *(_QWORD *)v692[0];
              MEMORY[0x1CAA32F9C]();
            }
            else
            {
              v495 = (uint64_t)v692[0] << -(uint64_t)LODWORD(v692[1]) >> -(uint64_t)LODWORD(v692[1]);
            }
            *(_QWORD *)&v673 = v495;
            if (*((_QWORD *)&v681 + 1))
            {
              if (*(_BYTE *)(v486 + 16) != 84)
                goto LABEL_995;
              v496 = *(_QWORD *)(v486 - 32);
              if (v496)
              {
                if (*(_BYTE *)(v496 + 16)
                  || *(_QWORD *)(v496 + 24) != *(_QWORD *)(v486 + 72)
                  || (*(_BYTE *)(v496 + 33) & 0x20) == 0)
                {
                  goto LABEL_989;
                }
                v497 = *(_DWORD *)(v496 + 36) - 194;
                v120 = v497 > 6;
                v498 = (1 << v497) & 0x63;
                if (v120 || v498 == 0)
                  goto LABEL_989;
                v500 = (uint64_t *)v681;
                v501 = (uint64_t *)&v681;
                if ((_QWORD)v681)
                {
                  do
                  {
                    v502 = v500;
                    v500 = (uint64_t *)v500[1];
                  }
                  while (v500);
                }
                else
                {
                  do
                  {
                    v502 = (uint64_t *)v501[2];
                    v32 = *v502 == (_QWORD)v501;
                    v501 = v502;
                  }
                  while (v32);
                }
                v503 = v502[5];
                v504 = v503 - v495;
                if (v503 > v495
                  && ((v505 = v502[4] - v503, v337 = v492 >= v504, v506 = v492 - v504, v506 != 0 && v337)
                    ? (v507 = v505 >= v506)
                    : (v507 = 0),
                      v507
                   && sub_1C5AEAFDC((uint64_t ***)v486, &v673, (unint64_t *)&v688, v503, v505, 1)))
                {
                  v508 = (uint64_t *)v502[1];
                  v509 = v502;
                  if (v508)
                  {
                    do
                    {
                      v510 = v508;
                      v508 = (uint64_t *)*v508;
                    }
                    while (v508);
                  }
                  else
                  {
                    do
                    {
                      v510 = (uint64_t *)v509[2];
                      v32 = *v510 == (_QWORD)v509;
                      v509 = v510;
                    }
                    while (!v32);
                  }
                  if (*((uint64_t **)&v680 + 1) == v502)
                    *((_QWORD *)&v680 + 1) = v510;
                  --*((_QWORD *)&v681 + 1);
                  sub_1C485B6E0((uint64_t *)v681, v502);
                  operator delete(v502);
                  LODWORD(v496) = 1;
                }
                else
                {
LABEL_989:
                  LODWORD(v496) = 0;
                }
              }
              v485 |= v496;
              if (*((_QWORD *)&v681 + 1))
              {
LABEL_995:
                if (sub_1C4D99D58(v486)
                  && ((v511 = (uint64_t *)*((_QWORD *)&v680 + 1),
                       v512 = *(_QWORD *)(*((_QWORD *)&v680 + 1) + 40),
                       v513 = *(_QWORD *)(*((_QWORD *)&v680 + 1) + 32) - v512,
                       (uint64_t)v673 >= v512)
                    ? (v514 = v513 > (uint64_t)v673 - v512)
                    : (v514 = 0),
                      v514))
                {
                  v517 = sub_1C5AEAFDC((uint64_t ***)v486, &v673, (unint64_t *)&v688, v512, v513, 0);
                  v515 = 0;
                  if (v517)
                  {
                    v518 = (uint64_t *)v511[1];
                    v519 = v511;
                    if (v518)
                    {
                      do
                      {
                        v520 = v518;
                        v518 = (uint64_t *)*v518;
                      }
                      while (v518);
                    }
                    else
                    {
                      do
                      {
                        v520 = (uint64_t *)v519[2];
                        v32 = *v520 == (_QWORD)v519;
                        v519 = v520;
                      }
                      while (!v32);
                    }
                    if (*((uint64_t **)&v680 + 1) == v511)
                      *((_QWORD *)&v680 + 1) = v520;
                    --*((_QWORD *)&v681 + 1);
                    sub_1C485B6E0((uint64_t *)v681, v511);
                    operator delete(v511);
                    v515 = 1;
                  }
                }
                else
                {
                  v515 = 0;
                }
                v485 |= v515;
              }
            }
            sub_1C6143384((_QWORD *)v681);
            v516 = v484 + 4;
            v484 = v482;
            if (v516 != v482)
            {
              v484 = v516;
              while ((*v484 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v484 += 4;
                if (v484 == v482)
                {
                  v484 = v482;
                  break;
                }
              }
            }
          }
          while (v484 != (uint64_t *)v600);
        }
        v591 |= v485;
        v479 = (llvm::SmallPtrSetImplBase *)((char *)v479 + 32);
      }
      while (v479 != v596);
      v66 = v644;
    }
    v67 = &unk_1C640E000;
  }
  v521 = 0;
  if (!v66)
  {
LABEL_1105:
    v539 = 0;
    goto LABEL_1106;
  }
  v522 = (uint64_t *)v643;
  v523 = 8 * v66;
  while (2)
  {
    v524 = *v522;
    v525 = sub_1C477672C((uint64_t)&v646, *v522);
    if (v647 == v646)
      v526 = (uint64_t *)((char *)&v648 + 4);
    else
      v526 = &v648;
    if (v525 == (_QWORD *)((char *)v647 + 8 * *(unsigned int *)v526) && *((_QWORD *)v636 + 12) != v524)
    {
      v527 = *(llvm::MemoryLocation **)(v524 + 72);
      sub_1C5AE8824(&v680, (uint64_t)v619, v527);
      if (v683)
      {
        if (sub_1C5AE9F68((uint64_t)v527))
        {
          v528 = *(_QWORD *)(v524 - 32);
          if (!v528)
            goto LABEL_1034;
          v529 = *(_DWORD *)(v524 + 92);
          if (*(_BYTE *)(v528 + 16) == 26)
          {
            if (v529 == *(_DWORD *)(v528 + 88))
              goto LABEL_1041;
            goto LABEL_1034;
          }
          if (v529 != *(_DWORD *)(v528 + 72))
          {
LABEL_1034:
            if (*(_BYTE *)(v524 + 16) == 25)
              v530 = v524;
            else
              v530 = 0;
            if (v530)
              v531 = (uint64_t *)(v530 - 32);
            else
              v531 = (uint64_t *)(v524 - 64);
            v528 = *v531;
            if (*(_BYTE *)(v528 + 16) == 26)
            {
LABEL_1041:
              if (*((_QWORD *)v636 + 12) != v528)
              {
                v532 = *(_QWORD *)(v528 + 72);
                if (llvm::Instruction::isIdenticalToWhenDefined(v527, (const llvm::Instruction *)v532))
                {
                  if ((*(unsigned __int8 *)(v532 + 17) ^ *((unsigned __int8 *)v527 + 17)) < 2)
                    goto LABEL_1056;
                }
                v533 = sub_1C5392540(v532);
                if (v532 && v533)
                {
                  if (v527)
                  {
                    if (*((_BYTE *)v527 + 16) == 61)
                    {
                      sub_1C5AE8824(v692, (uint64_t)v619, (llvm::MemoryLocation *)v532);
                      v673 = *(_OWORD *)v692;
                      v674 = *(_OWORD *)&v692[2];
                      v675 = *(_OWORD *)&v692[4];
                      v692[0] = 0;
                      *(_QWORD *)&v688 = 0;
                      v535 = sub_1C5AE8EB8((uint64_t)v619, v532, (uint64_t)v527, (uint64_t)&v673, (uint64_t)&v680, (uint64_t *)v692, (uint64_t *)&v688);
                      v537 = llvm::isBytewiseValue(*((llvm **)v527 - 8), v640, v536);
                      if (v537)
                      {
                        if (v537 == *(llvm::Value ***)(v532 - 32 * (*(_DWORD *)(v532 + 20) & 0x7FFFFFF) + 32)
                          && v535 == 1)
                        {
LABEL_1056:
                          if (!sub_1C5AE9D48((uint64_t)v619, &v680, (uint64_t)v527))
                          {
                            sub_1C5AE8B38((uint64_t)v619, (uint64_t)v527);
                            v521 = 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v522;
    v523 -= 8;
    if (v523)
      continue;
    break;
  }
  if (!(_DWORD)v644)
    goto LABEL_1105;
  v597 = v521;
  v539 = 0;
  v540 = (char *)v643;
  v541 = (char *)v643 + 8 * v644;
  v542 = (llvm::Value *)*((_QWORD *)v67 + 103);
  do
  {
    v544 = *((_QWORD *)v541 - 1);
    v541 -= 8;
    v543 = v544;
    v545 = sub_1C477672C((uint64_t)&v646, v544);
    if (v647 == v646)
      v546 = (uint64_t *)((char *)&v648 + 4);
    else
      v546 = &v648;
    if (v545 == (_QWORD *)((char *)v647 + 8 * *(unsigned int *)v546))
    {
      v547 = *(llvm::MemoryLocation **)(v543 + 72);
      sub_1C5AE8824(&v673, (uint64_t)v619, v547);
      if (v676)
      {
        if (sub_1C5AE9F68((uint64_t)v547))
        {
          v548 = (uint64_t (**)())llvm::getUnderlyingObject((llvm *)v673, (const llvm::Value *)6);
          if (sub_1C5AEA408((uint64_t)v619, v548))
          {
            sub_1C5AE8824(&v680, (uint64_t)v619, *(llvm::MemoryLocation **)(v543 + 72));
            if (v683)
            {
              *(_QWORD *)&v688 = &v689;
              *((_QWORD *)&v688 + 1) = 0x400000000;
              v692[0] = (llvm::Value *)&v692[4];
              v692[1] = (llvm::Value *)&v692[4];
              v692[2] = v542;
              LODWORD(v692[3]) = 0;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)v692, v543);
              if (v549)
              {
                v550 = *(_QWORD *)(v543 + 8);
                for (kk = DWORD2(v688); v550; v550 = *(_QWORD *)(v550 + 8))
                {
                  v552 = *(_QWORD *)(v550 + 24);
                  if (kk >= HIDWORD(v688))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v688, (uint64_t)&v689, kk + 1, 8);
                    kk = DWORD2(v688);
                  }
                  *(_QWORD *)(v688 + 8 * kk) = v552;
                  kk = ++DWORD2(v688);
                }
              }
              else
              {
                kk = DWORD2(v688);
              }
              v553 = kk == 0;
              if (kk)
                v554 = kk >= dword_1ED81BE98;
              else
                v554 = 1;
              if (!v554)
              {
                v555 = 0;
                while (1)
                {
                  v556 = *(_QWORD *)(v688 + 8 * v555);
                  if (*(_BYTE *)(v556 + 16) == 27 || sub_1C5AE9D48((uint64_t)v619, &v680, *(_QWORD *)(v556 + 72)))
                    break;
                  if (*(_BYTE *)(v556 + 16) == 26)
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v692, v556);
                    if (v557)
                    {
                      v558 = *(_QWORD *)(v556 + 8);
                      if (v558)
                      {
                        v559 = DWORD2(v688);
                        do
                        {
                          v560 = *(_QWORD *)(v558 + 24);
                          if (v559 >= HIDWORD(v688))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v688, (uint64_t)&v689, v559 + 1, 8);
                            v559 = DWORD2(v688);
                          }
                          *(_QWORD *)(v688 + 8 * v559) = v560;
                          v559 = ++DWORD2(v688);
                          v558 = *(_QWORD *)(v558 + 8);
                        }
                        while (v558);
                      }
                    }
                  }
                  v553 = ++v555 >= DWORD2(v688);
                  if (v555 >= DWORD2(v688) || DWORD2(v688) >= dword_1ED81BE98)
                    goto LABEL_1099;
                }
                v553 = 0;
              }
LABEL_1099:
              if (v692[1] != v692[0])
                free(v692[1]);
              if ((__int128 *)v688 != &v689)
                free((void *)v688);
              if (v553)
              {
                sub_1C5AE8B38((uint64_t)v619, (uint64_t)v547);
                v539 = 1;
              }
            }
          }
        }
      }
    }
  }
  while (v541 != v540);
  v521 = v597;
LABEL_1106:
  v562 = (char *)v669;
  if (v669)
  {
    v563 = v670;
    v564 = v669;
    if (v670 != v669)
    {
      do
      {
        v565 = v563 - 32;
        sub_1C5AEA8FC((uint64_t *)v563 - 3);
        v563 = v565;
      }
      while (v565 != v562);
      v564 = v669;
    }
    v670 = v562;
    operator delete(v564);
  }
  MEMORY[0x1CAA32FB4](v667, 8);
  if (v663 != v662)
    free(v663);
  MEMORY[0x1CAA32FB4](v660, 8);
  if (v656 != v655)
    free(v656);
  MEMORY[0x1CAA32FB4](v653, 8);
  MEMORY[0x1CAA32FB4](v651, 8);
  if (v647 != v646)
    free(v647);
  if (v643 != v645)
    free(v643);
  if ((v634 & 1) == 0)
    MEMORY[0x1CAA32FB4](v635, 8);
  if (v631 != v633)
    free(v631);
  if ((v628 & 1) == 0)
    MEMORY[0x1CAA32FB4](v629, 8);
  sub_1C4DA93EC(v624);
  MEMORY[0x1CAA32FB4](v621, 8);
  return (v591 | v521 | v539) & 1;
}

uint64_t sub_1C5AE8494(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  uint64_t v6;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v3);
  llvm::initializeMemorySSAWrapperPassPass(a1, v4);
  llvm::initializeMemoryDependenceWrapperPassPass(a1, v5);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  v6 = operator new();
  *(_QWORD *)v6 = "Dead Store Elimination";
  *(_QWORD *)(v6 + 8) = 22;
  *(_QWORD *)(v6 + 16) = "dse";
  *(_QWORD *)(v6 + 24) = 3;
  *(_QWORD *)(v6 + 32) = &unk_1ED81BC88;
  *(_WORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 42) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = sub_1C5AEB508;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v6, 1);
  return v6;
}

uint64_t sub_1C5AE8568(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81BC88;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8194368;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(qword_1ED81BC90);
  if (v3 != -1)
  {
    v7[0] = sub_1C5AE8494;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(qword_1ED81BC90, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C5AE8630(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return *(_BYTE *)(a2 + 16) == 84
      && (v2 = *(_QWORD *)(a2 - 32)) != 0
      && !*(_BYTE *)(v2 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72)
      && (*(_BYTE *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == 167
      || llvm::isFreeCall(a2, a1) != 0;
}

uint64_t sub_1C5AE86A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  v5 = result;
  v19 = 0;
  v15 = &v19;
  v16 = 1;
  v17 = &v18;
  v18 = 0;
  v6 = *(unsigned __int8 *)(a3 + 16);
  if (!a3 || v6 != 84)
    goto LABEL_13;
  v7 = *(_QWORD *)(a3 - 32);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a3 + 72) || *(_DWORD *)(v7 + 36) != 167)
  {
LABEL_17:
    result = llvm::isFreeCall(a3, *(uint64_t **)(a2 + 760));
    if (result)
    {
      *(_QWORD *)v5 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      *(_QWORD *)(v5 + 8) = -2;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      v10 = 1;
      *(_BYTE *)(v5 + 48) = 1;
      goto LABEL_20;
    }
LABEL_19:
    v10 = 0;
    *(_BYTE *)v5 = 0;
    goto LABEL_20;
  }
  result = sub_1C4E7B154(&v15, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  v6 = *(unsigned __int8 *)(a3 + 16);
  if (!(_DWORD)result || v6 != 84)
  {
LABEL_13:
    v11 = v6 - 33;
    v12 = v11 > 0x33;
    v13 = (1 << v11) & 0x8000000000041;
    if (v12 || v13 == 0)
      goto LABEL_19;
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v16);
  if (!v8)
    goto LABEL_17;
  *v17 = v8;
  v9 = v19;
  if (v19 > 0x7FFFFFFFFFFFFFFBLL)
    v9 = -2;
  *(_QWORD *)v5 = v18;
  *(_QWORD *)(v5 + 8) = v9;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_BYTE *)(v5 + 48) = 0;
  v10 = 1;
LABEL_20:
  *(_BYTE *)(v5 + 56) = v10;
  return result;
}

void sub_1C5AE8824(_BYTE *a1, uint64_t a2, llvm::MemoryLocation *this)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;

  v4 = *((unsigned __int8 *)this + 16);
  v5 = (v4 - 33);
  if (v5 > 0x37)
    goto LABEL_5;
  if (((1 << (v4 - 33)) & 0x8000000000041) != 0)
  {
    v8 = *((_QWORD *)this + 8);
    if (v8 && (*(_BYTE *)(v8 + 17) & 0x30) != 0)
      goto LABEL_5;
    v9 = *((_DWORD *)this + 5);
    if (v9 < 0
      && (v11 = (char *)this - 32 * (v9 & 0x7FFFFFF), v14 = *((_QWORD *)v11 - 1), v12 = v11 - 8, (v13 = v14) != 0))
    {
      v15 = -v13;
      while (1)
      {
        v16 = *(_DWORD *)(*(_QWORD *)&v12[v15] + 8);
        v17 = v16 > 7;
        v18 = (1 << v16) & 0x83;
        if (v17 || v18 == 0)
          break;
        v15 += 16;
        if (!v15)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0)
      {
        goto LABEL_5;
      }
      v4 = *((unsigned __int8 *)this + 16);
    }
  }
  else
  {
    if (v5 == 27)
    {
      if ((*((_WORD *)this + 9) & 0x301) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
    if (((1 << (v4 - 33)) & 0x808001D0000010) == 0)
    {
LABEL_5:
      *a1 = 0;
      a1[48] = 0;
      return;
    }
  }
  v10 = v4 - 33;
  if (v10 <= 0x33 && ((1 << v10) & 0x8000000000041) != 0)
  {
    llvm::MemoryLocation::getForDest((uint64_t)this, *(uint64_t **)(a2 + 760), (uint64_t)a1);
    return;
  }
LABEL_16:
  llvm::MemoryLocation::getOrNone((uint64_t ***)this, (uint64_t)a1);
}

void sub_1C5AE8994(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v18 = 0;
  if ((sub_1C5AE9B3C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v18) & 1) != 0)
    return;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 8);
  if (4 * v5 + 4 >= 3 * v4)
  {
    v4 *= 2;
    goto LABEL_26;
  }
  if (v4 + ~v5 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
LABEL_26:
    sub_1C5AE9BD0(a1, v4);
    v18 = 0;
    sub_1C5AE9B3C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v18);
  }
  v6 = v18;
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v11];
    *v16 = *a2;
    v9 = v16 + 1;
    if (v8 != v10)
    {
      do
      {
        v17 = *--v8;
        *--v16 = v17;
      }
      while (v8 != v10);
      v8 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = *a2;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v9;
}

char **sub_1C5AE8B38(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  llvm::EarliestEscapeInfo *v4;
  unsigned int v5;
  uint64_t v6;
  llvm::DominatorTree *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  llvm::MemoryAccess *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  llvm::SmallPtrSetImplBase *v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[32];
  int32x2_t *v35;
  char *v36[2];
  uint64_t v37;
  _BYTE *v38;
  void *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[64];
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  _QWORD **v46;
  _QWORD *v47[2];
  uint64_t *v48;
  uint64_t v49;
  _QWORD v50[3];

  v50[1] = *MEMORY[0x1E0C80C00];
  v35 = *(int32x2_t **)(a1 + 736);
  v36[0] = (char *)&v37;
  v36[1] = (char *)0x1000000000;
  v38 = v42;
  v39 = v42;
  v40 = 8;
  v41 = 0;
  v43 = v45;
  v44 = 0x800000000;
  v47[1] = 0;
  v47[0] = 0;
  v46 = v47;
  v31 = v34;
  v33 = 32;
  v34[0] = a2;
  v30 = (llvm::SmallPtrSetImplBase *)(a1 + 1320);
  v3 = (uint64_t *)(a1 + 1904);
  v4 = (llvm::EarliestEscapeInfo *)(a1 + 16);
  v5 = 1;
  do
  {
    v6 = *((_QWORD *)v31 + v5 - 1);
    v32 = v5 - 1;
    v48 = v50;
    v49 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v48, v6);
    llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v6, v48, v49);
    if (v48 != v50)
      free(v48);
    llvm::salvageKnowledge((llvm *)v6, 0, 0, v7);
    v8 = *(_QWORD *)(a1 + 736);
    v9 = *(_DWORD *)(v8 + 40);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 24);
      v11 = v9 - 1;
      v12 = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v13 = *(_QWORD *)(v10 + 16 * v12);
      if (v6 == v13)
      {
LABEL_9:
        v16 = *(llvm::MemoryAccess **)(v10 + 16 * v12 + 8);
        if (v16)
        {
          if (*((_BYTE *)v16 + 16) == 26)
            sub_1C4774094(v30, (uint64_t)v16);
          llvm::MemorySSAUpdater::removeMemoryAccess(&v35, v16, 0);
        }
      }
      else
      {
        v14 = 1;
        while (v13 != -4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(_QWORD *)(v10 + 16 * v12);
          if (v6 == v13)
            goto LABEL_9;
        }
      }
    }
    v17 = sub_1C5AE9630(v3, *(_QWORD *)(v6 + 40));
    if (*(_QWORD *)(a1 + 1936) != v17)
      sub_1C6311E00(v17 + 8, v6);
    v18 = *(_DWORD *)(v6 + 20);
    if ((v18 & 0x40000000) != 0)
    {
      v20 = *(_QWORD *)(v6 - 8);
      v19 = v18 & 0x7FFFFFF;
      if (!v19)
        goto LABEL_34;
    }
    else
    {
      v19 = v18 & 0x7FFFFFF;
      v20 = v6 - 32 * v19;
      if (!v19)
        goto LABEL_34;
    }
    v21 = 32 * v19;
    v22 = (_QWORD **)(v20 + 16);
    do
    {
      v23 = (uint64_t)*(v22 - 2);
      if (v23)
        v24 = *(unsigned __int8 *)(v23 + 16) >= 0x1Cu;
      else
        v24 = 0;
      if (v24)
      {
        **v22 = *(v22 - 1);
        v25 = (uint64_t)*(v22 - 1);
        if (v25)
          *(_QWORD *)(v25 + 16) = *v22;
        *(v22 - 2) = 0;
        if (!*(_QWORD *)(v23 + 8) && llvm::wouldInstructionBeTriviallyDead(v23, *(uint64_t **)(a1 + 760)))
        {
          v26 = v32;
          if (v32 >= (unint64_t)v33)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v34, v32 + 1, 8);
            v26 = v32;
          }
          *((_QWORD *)v31 + v26) = v23;
          ++v32;
        }
      }
      v22 += 4;
      v21 -= 32;
    }
    while (v21);
LABEL_34:
    llvm::EarliestEscapeInfo::removeInstruction(v4, (llvm::Instruction *)v6);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v6 + 40) + 40, (uint64_t ***)v6);
    v27 = *(_QWORD *)(v6 + 24);
    v28 = *(_QWORD **)(v6 + 32);
    *v28 = v27;
    *(_QWORD *)(v27 + 8) = v28;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v6);
    v5 = v32;
  }
  while (v32);
  if (v31 != v34)
    free(v31);
  sub_1C61247C0((uint64_t)&v46, v47[0]);
  if (v43 != v45)
    free(v43);
  if (v39 != v38)
    free(v39);
  return sub_1C4EE41F8(v36);
}

uint64_t sub_1C5AE8EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  llvm *v19;
  llvm *v20;
  llvm *UnderlyingObject;
  llvm *v22;
  llvm::DataLayout *v23;
  llvm::DataLayout *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 ObjectSize;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t result;
  BOOL v41;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  llvm::DataLayout *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::DataLayout *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  llvm::Type *v72;
  int PrimitiveSizeInBits;
  int v74;
  llvm::Type *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  llvm *v85;
  uint64_t *v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD v89[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;

  v11 = a3;
  if (!sub_1C5AEA068(a1, *(_QWORD *)(a3 + 40), *(_QWORD *)(a2 + 40), *(llvm::Value **)a5))
    return 6;
  v88 = *(_QWORD *)(a4 + 8);
  v14 = *(unsigned __int8 *)(a2 + 16) - 33;
  v15 = v14 > 0x33;
  v16 = (1 << v14) & 0x8000000000041;
  if (!v15 && v16 != 0)
  {
    LODWORD(v92) = 0;
    if (sub_1C4ECD910(*(uint64_t **)(a1 + 760), a2, (int *)&v92))
    {
      v18 = *(_QWORD **)(a1 + 760);
      if (((*(_QWORD *)(v18[1] + (((unint64_t)v92 >> 3) & 0x1FFFFFF8)) >> v92) & 1) == 0
        && ((*(unsigned __int8 *)(*v18 + ((unint64_t)v92 >> 2)) >> (2 * (v92 & 3))) & 3) != 0
        && ((_DWORD)v92 == 106 || (_DWORD)v92 == 103))
      {
        v53 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
        if (v53 && *(_BYTE *)(v53 + 16) == 16)
        {
          v55 = (unint64_t *)(v53 + 24);
          if (*(_DWORD *)(v53 + 32) >= 0x41u)
            v55 = (unint64_t *)*v55;
          v56 = *v55;
          if (v56 > 0x7FFFFFFFFFFFFFFBLL)
            v56 = -2;
          v88 = v56;
        }
      }
    }
  }
  v19 = llvm::Value::stripPointerCasts(*(llvm::Value **)a5);
  v20 = llvm::Value::stripPointerCasts(*(llvm::Value **)a4);
  UnderlyingObject = llvm::getUnderlyingObject(v19, (const llvm::Value *)6);
  v87 = (uint64_t *)v20;
  v22 = llvm::getUnderlyingObject(v20, (const llvm::Value *)6);
  if (UnderlyingObject != v22 || (v88 & 0x8000000000000000) != 0)
  {
    if ((v88 & 0x8000000000000000) != 0)
      goto LABEL_45;
  }
  else
  {
    v23 = *(llvm::DataLayout **)(a1 + 768);
    v24 = *(llvm::DataLayout **)(a1 + 760);
    v25 = *(_QWORD *)a1;
    v92 = 0;
    if (v25 && (v26 = *(_QWORD *)(v25 + 112)) != 0)
    {
      if ((*(_BYTE *)(v26 + 17) & 1) != 0)
        v27 = 0x10000;
      else
        v27 = 0;
    }
    else
    {
      v27 = 0;
    }
    ObjectSize = llvm::getObjectSize(UnderlyingObject, &v92, v23, v24, (llvm::DataLayout *)v27, 0);
    v29 = v92;
    if (!ObjectSize)
      v29 = -1;
    if (v29 != -1 && v29 == v88)
      return 1;
  }
  v31 = *(_QWORD *)(a5 + 8);
  if ((v31 & 0x8000000000000000) != 0)
  {
LABEL_45:
    if (sub_1C4DE85D0(a2))
      v44 = a2;
    else
      v44 = 0;
    if (sub_1C4DE85D0(v11))
      v45 = v11;
    else
      v45 = 0;
    if (v44
      && v45
      && *(_QWORD *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF) + 64) == *(_QWORD *)(v45
                                                                                         - 32
                                                                                         * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF)
                                                                                         + 64))
    {
      v46 = *(_QWORD *)(a1 + 96);
      v47 = *(_DWORD *)(a1 + 440);
      *(_DWORD *)(a1 + 440) = v47 + 1;
      v48 = *(_QWORD *)(v46 + 8);
      v49 = *(_QWORD *)(v46 + 16);
      if (v48 == v49)
      {
        *(_DWORD *)(a1 + 440) = v47;
      }
      else
      {
        v50 = v48 + 8;
        do
        {
          v51 = (*(unsigned __int8 (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v50 - 8) + 24))(*(_QWORD *)(v50 - 8), a5, a4, a1 + 104);
          v52 = v51 != 1 || v50 == v49;
          v50 += 8;
        }
        while (!v52);
        --*(_DWORD *)(a1 + 440);
        if (v51 == 3)
          return 1;
      }
    }
    if (*(_BYTE *)(a2 + 16) == 84
      && (v65 = *(_QWORD *)(a2 - 32)) != 0
      && !*(_BYTE *)(v65 + 16)
      && *(_QWORD *)(v65 + 24) == *(_QWORD *)(a2 + 72))
    {
      if ((*(_BYTE *)(v65 + 33) & 0x20) != 0)
        v66 = a2;
      else
        v66 = 0;
    }
    else
    {
      v66 = 0;
    }
    if (*(_BYTE *)(v11 + 16) != 84)
      return 6;
    v67 = *(_QWORD *)(v11 - 32);
    if (!v67 || *(_BYTE *)(v67 + 16) || *(_QWORD *)(v67 + 24) != *(_QWORD *)(v11 + 72))
      return 6;
    if ((*(_BYTE *)(v67 + 33) & 0x20) == 0)
      v11 = 0;
    result = 6;
    if (v66
      && v11
      && *(_DWORD *)(*(_QWORD *)(v66 - 32) + 36) == 187
      && *(_DWORD *)(*(_QWORD *)(v11 - 32) + 36) == 187)
    {
      v68 = v66 - 32 * (*(_DWORD *)(v66 + 20) & 0x7FFFFFF);
      v69 = **(_QWORD **)v68;
      v70 = **(_QWORD **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
      v71 = *(_DWORD *)(v69 + 8);
      v72 = (llvm::Type *)v69;
      if ((v71 & 0xFE) == 0x12)
        v72 = **(llvm::Type ***)(v69 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v72);
      v74 = *(_DWORD *)(v70 + 8);
      v75 = (llvm::Type *)v70;
      if ((v74 & 0xFE) == 0x12)
        v75 = **(llvm::Type ***)(v70 + 16);
      if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits(v75))
        return 6;
      result = 6;
      if ((v71 == 19) == (v74 == 19)
        && *(_DWORD *)(v69 + 32) == *(_DWORD *)(v70 + 32))
      {
        v76 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v68 + 32));
        v77 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32));
        if (v76 != v77)
        {
          v92 = (uint64_t)v76;
          v93 = 1;
          v94 = 0u;
          v95 = 0u;
          v89[0] = v77;
          v89[1] = 1;
          v90 = 0u;
          v91 = 0u;
          v78 = *(_QWORD *)(a1 + 96);
          v79 = *(_DWORD *)(a1 + 440);
          *(_DWORD *)(a1 + 440) = v79 + 1;
          v80 = *(_QWORD *)(v78 + 8);
          v81 = *(_QWORD *)(v78 + 16);
          if (v80 == v81)
          {
            *(_DWORD *)(a1 + 440) = v79;
            return 6;
          }
          v82 = v80 + 8;
          do
          {
            v83 = (*(unsigned __int8 (**)(_QWORD, uint64_t *, _QWORD *, uint64_t))(**(_QWORD **)(v82 - 8) + 24))(*(_QWORD *)(v82 - 8), &v92, v89, a1 + 104);
            v84 = v83 != 1 || v82 == v81;
            v82 += 8;
          }
          while (!v84);
          --*(_DWORD *)(a1 + 440);
          if (v83 != 3)
            return 6;
        }
        if (*(_QWORD *)(v66 - 32 * (*(_DWORD *)(v66 + 20) & 0x7FFFFFF) + 96) == *(_QWORD *)(v11
                                                                                             - 32
                                                                                             * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)
                                                                                             + 96))
          return 1;
        else
          return 6;
      }
    }
    return result;
  }
  v32 = *(_QWORD *)(a1 + 96);
  v33 = *(_DWORD *)(a1 + 440);
  *(_DWORD *)(a1 + 440) = v33 + 1;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_QWORD *)(v32 + 16);
  if (v34 == v35)
  {
    *(_DWORD *)(a1 + 440) = v33;
    LODWORD(result) = 1;
LABEL_41:
    if (UnderlyingObject != v22)
    {
      if ((_DWORD)result)
        return 6;
      else
        return 5;
    }
    v57 = v31;
    *a7 = 0;
    *a6 = 0;
    v58 = *(llvm::DataLayout **)(a1 + 768);
    LODWORD(v93) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v58, *(_QWORD *)v19);
    if (v93 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v92, 0, 0);
    else
      v92 = 0;
    v60 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v19, v58, (const void **)&v92, 1, 0, 0, v59);
    if (v93 > 0x40)
    {
      *a7 = *(_QWORD *)v92;
      MEMORY[0x1CAA32F9C]();
    }
    else
    {
      *a7 = v92 << -(uint64_t)v93 >> -(uint64_t)v93;
    }
    v61 = *(llvm::DataLayout **)(a1 + 768);
    LODWORD(v93) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v61, *v87);
    if (v93 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v92, 0, 0);
    else
      v92 = 0;
    v63 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v87, v61, (const void **)&v92, 1, 0, 0, v62);
    if (v93 > 0x40)
    {
      *a6 = *(_QWORD *)v92;
      MEMORY[0x1CAA32F9C]();
    }
    else
    {
      *a6 = v92 << -(uint64_t)v93 >> -(uint64_t)v93;
    }
    if (v60 == v63)
    {
      v64 = *a7 - *a6;
      if (*a7 < *a6)
      {
        if (*a6 - *a7 < v57)
          return 4;
        return 5;
      }
      if (v64 + v57 > v88)
      {
        if (v64 < v88)
          return 4;
        return 5;
      }
      return 1;
    }
    return 6;
  }
  v85 = v19;
  v86 = a7;
  v36 = v31;
  v37 = a6;
  v38 = v34 + 8;
  do
  {
    v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v38 - 8) + 24))(*(_QWORD *)(v38 - 8), a4, a5, a1 + 104);
    LODWORD(result) = v39;
    v41 = v39 != 1 || v38 == v35;
    v38 += 8;
  }
  while (!v41);
  --*(_DWORD *)(a1 + 440);
  if (v39 == 3 && v88 >= v36)
    return 1;
  v31 = v36;
  a6 = v37;
  v43 = v39 != 2 || (v39 & 0x100) == 0;
  v19 = v85;
  a7 = v86;
  if (v43)
    goto LABEL_41;
  result = 1;
  if (v39 < 0 || v31 + (v39 >> 9) > v88)
    goto LABEL_41;
  return result;
}

uint64_t sub_1C5AE9630(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return a1[4];
  else
    return a1[3] + 32 * *((unsigned int *)v5 + 2);
}

void sub_1C5AE96B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  void *v9[2];
  _OWORD v10[12];
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  sub_1C5616900((uint64_t)&v12, v4);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9[0] = 0;
  memset(v8, 0, sizeof(v8));
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1C4DC4EEC((uint64_t)&v12, (uint64_t)&v5, a2);
  if (v9[1] != (char *)v10 + 8)
    free(v9[1]);
  if (v6 != v5)
    free(v6);
  if (v14 != v15)
    free(v14);
  if (v13 != v12)
    free(v13);
}

uint64_t sub_1C5AE97FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C5AE988C((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5AE9928(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_BYTE *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C5AE988C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5AE9928(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C5AE99D8(a1, v7);
    v9 = 0;
    sub_1C5AE988C((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5AE99D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5AE9A90(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5AE9A90(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5AE988C((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C5AE9B3C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C5AE9BD0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6311E6C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C5AE9C88(uint64_t a1, llvm *this, BOOL *a3)
{
  int isNotVisibleOnUnwind;
  _BOOL8 result;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t (**v11)();
  uint64_t v12;
  __int16 v13;

  v10 = 0;
  isNotVisibleOnUnwind = llvm::isNotVisibleOnUnwind(this, (const llvm::Value *)&v10, a3);
  result = 0;
  if (isNotVisibleOnUnwind)
  {
    result = 1;
    if (v10)
    {
      v11 = (uint64_t (**)())this;
      LOBYTE(v12) = 1;
      sub_1C5AE97FC(a1 + 1384, &v11, &v12, (uint64_t)&v8);
      if (v9)
      {
        v11 = &off_1E8135970;
        v12 = a1 + 1616;
        v13 = 0;
        llvm::PointerMayBeCaptured(this, (const llvm::Value *)&v11, 0);
        v7 = HIBYTE(v13);
        *(_BYTE *)(v8 + 8) = HIBYTE(v13);
      }
      else
      {
        v7 = *(unsigned __int8 *)(v8 + 8);
      }
      return v7 == 0;
    }
  }
  return result;
}

BOOL sub_1C5AE9D48(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _BOOL8 result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[3];
  char v16;

  if ((sub_1C5AEA2C4(a3) & 1) != 0)
    return 0;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (a3 && v7 == 61)
    return (((unint64_t)*(unsigned __int16 *)(a3 + 18) >> 7) & 7) - 3 < 5;
  result = 0;
  v8 = (v7 - 33);
  if (v8 <= 0x37)
  {
    if (((1 << (v7 - 33)) & 0x8000000000041) != 0)
    {
      v9 = *(_QWORD *)(a3 + 64);
      if (v9 && ((*(_BYTE *)(v9 + 20) & 4) != 0 || (*(_BYTE *)(v9 + 17) & 0x10) != 0))
        return 0;
      LODWORD(v15[0]) = 7;
      if ((!sub_1C53E4BBC(a3, (__int32 *)v15, 1uLL)
         || (v13 = *(_QWORD *)(a3 - 32)) != 0
         && !*(_BYTE *)(v13 + 16)
         && *(_QWORD *)(v13 + 24) == *(_QWORD *)(a3 + 72)
         && *(_DWORD *)(v13 + 36) == 7)
        && ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 66) & 1) != 0
         || (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) & 1) != 0))
      {
        return 0;
      }
    }
    else
    {
      if (((1 << (v7 - 33)) & 0x808001C8000010) != 0)
      {
LABEL_18:
        v10 = v7 - 33;
        if (v10 <= 0x33 && ((1 << v10) & 0x8000000000041) != 0)
        {
          v11 = *(_QWORD *)(a3 + 64);
          if (v11)
          {
            if ((*(_BYTE *)(v11 + 13) & 8) != 0)
              return 0;
          }
          LODWORD(v15[0]) = 7;
          if ((!sub_1C53E4BBC(a3, (__int32 *)v15, 1uLL)
             || (v14 = *(_QWORD *)(a3 - 32)) != 0
             && !*(_BYTE *)(v14 + 16)
             && *(_QWORD *)(v14 + 24) == *(_QWORD *)(a3 + 72)
             && *(_DWORD *)(v14 + 36) == 7)
            && (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 11) & 1) != 0)
          {
            return 0;
          }
        }
        v12 = a2[1];
        v15[0] = *a2;
        v15[1] = v12;
        v15[2] = a2[2];
        v16 = 1;
        return llvm::AAResults::getModRefInfo(*(_QWORD *)(a1 + 96), a3, v15, a1 + 104) & 1;
      }
      if (v8 != 28)
        return result;
      if ((*(_WORD *)(a3 + 18) & 0x301) == 0)
        return 0;
    }
    v7 = *(unsigned __int8 *)(a3 + 16);
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1C5AE9F68(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 61)
    return (*(_WORD *)(a1 + 18) & 0x301) == 0;
  v5 = v2 - 33;
  v6 = v5 > 0x33;
  v7 = (1 << v5) & 0x8000000000041;
  if (v6 || v7 == 0)
    return 0;
  if (sub_1C4DE85D0(a1))
  {
    v9 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96);
    v10 = (llvm::APInt *)(v9 + 24);
    v11 = *(_DWORD *)(v9 + 32);
    if (v11 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v10) == v11;
    else
      return *(_QWORD *)v10 == 0;
  }
  if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)a1) || *(_QWORD *)(a1 + 8))
    return 0;
  result = llvm::Instruction::willReturn((llvm::Instruction *)a1);
  if ((_DWORD)result)
  {
    v12 = *(_QWORD *)(a1 + 64);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 16) & 0x20) != 0)
        return *(unsigned __int8 *)(a1 + 16) - 40 < 0xFFFFFFF5;
    }
    result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 37);
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 16) - 40 < 0xFFFFFFF5;
  }
  return result;
}

uint64_t sub_1C5AEA068(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  if (a2 != a3)
  {
    v4 = *(uint64_t **)(a1 + 776);
    v5 = *((_DWORD *)v4 + 4);
    if (!v5)
      return sub_1C5AEA338(a4);
    v6 = *v4;
    v7 = v5 - 1;
    LODWORD(v8) = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 != a2)
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v10 = *(_QWORD *)(v6 + 16 * v8);
        if (v10 == a2)
        {
          if (!*(_BYTE *)(a1 + 784))
          {
            v13 = *(_QWORD *)(v6 + 16 * v8 + 8);
            if (v13)
              goto LABEL_12;
          }
          return sub_1C5AEA338(a4);
        }
      }
      return sub_1C5AEA338(a4);
    }
    if (*(_BYTE *)(a1 + 784))
      return sub_1C5AEA338(a4);
    v13 = v9[1];
    if (!v13)
      return sub_1C5AEA338(a4);
LABEL_12:
    v14 = v7 & ((a3 >> 4) ^ (a3 >> 9));
    v15 = *(_QWORD *)(v6 + 16 * v14);
    if (v15 == a3)
    {
LABEL_16:
      v18 = *(_QWORD *)(v6 + 16 * v14 + 8);
    }
    else
    {
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v14 + v16++;
        v14 = v17 & v7;
        v15 = *(_QWORD *)(v6 + 16 * v14);
        if (v15 == a3)
          goto LABEL_16;
      }
      v18 = 0;
    }
    if (v13 != v18)
      return sub_1C5AEA338(a4);
  }
  return 1;
}

BOOL sub_1C5AEA15C(uint64_t a1, llvm **a2, uint64_t a3, uint64_t a4)
{
  llvm *UnderlyingObject;
  _BOOL8 result;
  llvm *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _OWORD v18[3];
  llvm *v19[2];
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  __int128 v29;

  sub_1C5AE86A0((uint64_t)v19, a1, a4);
  if (!v23)
    return 0;
  UnderlyingObject = llvm::getUnderlyingObject(*a2, (const llvm::Value *)6);
  if (UnderlyingObject != llvm::getUnderlyingObject(v19[0], (const llvm::Value *)6))
    return 0;
  v18[0] = *(_OWORD *)v19;
  v18[1] = v20;
  v18[2] = v21;
  if (v22)
  {
    v10 = llvm::getUnderlyingObject(*a2, (const llvm::Value *)6);
    v27[0] = *(_QWORD *)&v18[0];
    v27[1] = 1;
    v28 = 0u;
    v29 = 0u;
    v24[0] = (uint64_t)v10;
    v24[1] = 1;
    v25 = 0u;
    v26 = 0u;
    v11 = *(_QWORD *)(a1 + 96);
    v12 = *(_DWORD *)(a1 + 440);
    *(_DWORD *)(a1 + 440) = v12 + 1;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    if (v13 == v14)
    {
      result = 0;
    }
    else
    {
      v15 = v13 + 8;
      do
      {
        v16 = (*(unsigned __int8 (**)(_QWORD, uint64_t *, uint64_t *, uint64_t))(**(_QWORD **)(v15 - 8) + 24))(*(_QWORD *)(v15 - 8), v27, v24, a1 + 104);
        v17 = v16 != 1 || v15 == v14;
        v15 += 8;
      }
      while (!v17);
      v12 = *(_DWORD *)(a1 + 440) - 1;
      result = v16 == 3;
    }
    *(_DWORD *)(a1 + 440) = v12;
  }
  else
  {
    v27[0] = 0;
    v24[0] = 0;
    return sub_1C5AE8EB8(a1, a4, a3, (uint64_t)v18, (uint64_t)a2, v27, v24) == 1;
  }
  return result;
}

uint64_t sub_1C5AEA2C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  BOOL v6;

  if (*(_BYTE *)(a1 + 16) != 84)
    goto LABEL_6;
  v2 = *(_QWORD *)(a1 - 32);
  if (v2)
  {
    LODWORD(v1) = *(unsigned __int8 *)(v2 + 16);
    if (*(_BYTE *)(v2 + 16)
      || (v1 = *(_QWORD *)(v2 + 24), v1 != *(_QWORD *)(a1 + 72))
      || (LODWORD(v1) = *(unsigned __int8 *)(v2 + 33), (v1 & 0x20) == 0))
    {
LABEL_6:
      LODWORD(v2) = 0;
      return v2 & v1;
    }
    v4 = *(_DWORD *)(v2 + 36);
    LODWORD(v2) = 1;
    v6 = (v4 - 163) <= 5 && ((1 << (v4 + 93)) & 0x39) != 0 || v4 == 7;
    LODWORD(v1) = v6;
  }
  return v2 & v1;
}

BOOL sub_1C5AEA338(llvm::Value *a1)
{
  llvm::Value *v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = llvm::Value::stripPointerCasts(a1);
  v2 = *((unsigned __int8 *)v1 + 16);
  if (v2 == 62)
  {
LABEL_4:
    v3 = *((_DWORD *)v1 + 5);
    if ((v3 & 0x40000000) != 0)
    {
      v5 = (char *)*((_QWORD *)v1 - 1);
      v4 = v3 & 0x7FFFFFF;
    }
    else
    {
      v4 = v3 & 0x7FFFFFF;
      v5 = (char *)v1 - 32 * v4;
    }
    v6 = (uint64_t *)(v5 + 32);
    v7 = 32 * v4 - 32;
    while (v7)
    {
      v8 = *v6;
      v6 += 4;
      v7 -= 32;
      if (*(_BYTE *)(v8 + 16) != 16)
        goto LABEL_16;
    }
    if ((v3 & 0x40000000) != 0)
      v9 = (llvm::Value **)*((_QWORD *)v1 - 1);
    else
      v9 = (llvm::Value **)((char *)v1 - 32 * v4);
    v1 = llvm::Value::stripPointerCasts(*v9);
    v2 = *((unsigned __int8 *)v1 + 16);
    goto LABEL_16;
  }
  if (v2 == 5)
  {
    if (*((_WORD *)v1 + 9) != 34)
      return 1;
    goto LABEL_4;
  }
LABEL_16:
  v10 = 1;
  if (v2 >= 0x1C && v1)
  {
    v11 = *((_QWORD *)v1 + 5);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
    if (v12)
      v13 = v12 - 24;
    else
      v13 = 0;
    return v13 == v11;
  }
  return v10;
}

BOOL sub_1C5AEA408(uint64_t a1, uint64_t (**a2)())
{
  BOOL *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t (**v10)();
  uint64_t v11;
  __int16 v12;

  if (*((_BYTE *)a2 + 16) == 59)
    return 1;
  v10 = a2;
  LOBYTE(v11) = 0;
  sub_1C5AE97FC(a1 + 1408, &v10, &v11, (uint64_t)&v8);
  if (v9)
  {
    if (sub_1C5AE9C88(a1, (llvm *)a2, v5))
    {
      v6 = *((unsigned __int8 *)a2 + 16);
      if (v6 >= 0x1C)
      {
        v7 = v6 - 33;
        if (v7 <= 0x33 && ((1 << v7) & 0x8000000000041) != 0)
        {
          if (sub_1C4D91DD8((uint64_t)a2, 19))
          {
            v10 = &off_1E8135970;
            v11 = a1 + 1616;
            v12 = 1;
            llvm::PointerMayBeCaptured((llvm *)a2, (const llvm::Value *)&v10, 0);
            *(_BYTE *)(v8 + 8) = HIBYTE(v12) ^ 1;
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
    }
  }
  return *(_BYTE *)(v8 + 8) != 0;
}

uint64_t sub_1C5AEA510(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C5AEA62C(a1, *a2, &v10);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 32;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    sub_1C5AEA6D0(a1, v6);
    v10 = 0;
    result = sub_1C5AEA62C(a1, *a2, &v10);
  }
  v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 272);
  if (v9 >= *(_DWORD *)(a1 + 276))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 272);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 272);
  return result;
}

uint64_t sub_1C5AEA62C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5AEA6D0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5AEA844(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5AEA844(a1, v14, v8);
}

uint64_t sub_1C5AEA844(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5AEA62C((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1C5AEA8FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (_QWORD **)(v3 + 16);
    do
    {
      if (((unint64_t)*(v5 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C6143384(*v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

BOOL sub_1C5AEA970(uint64_t a1, llvm::BasicBlock *a2, uint64_t a3, uint64_t *a4, uint64_t a5, const llvm::DominatorTree *a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  llvm::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  BOOL v37;
  llvm::BasicBlock **v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  llvm::BasicBlock *v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  uint64_t v48;
  llvm::BasicBlock **v49;
  llvm::BasicBlock *v50;
  llvm::BasicBlock **v51;
  int v52;
  BOOL v53;
  int v54;
  _QWORD *v55;
  int v56;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v65[2];
  int v66;
  _BYTE v67[48];
  uint64_t v68;
  _BYTE v69[32];
  __int128 v70;
  __int128 v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[32];
  uint64_t v75;
  _BYTE v76[40];
  unsigned int v77;
  int v78;
  _QWORD v79[4];
  char *v80;
  uint64_t v81;
  _QWORD v82[179];

  v82[176] = *MEMORY[0x1E0C80C00];
  v80 = (char *)v82;
  v81 = 0x1000000000;
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v8 = *(_QWORD *)(a3 + 40);
  if (sub_1C5392540(a3))
    llvm::MemoryLocation::getForArgument(a3, 0, 0, (uint64_t)&v75);
  else
    llvm::MemoryLocation::getOrNone((uint64_t ***)a3, (uint64_t)&v75);
  v9 = v75;
  v62 = *(_QWORD *)v76;
  v60 = *(_OWORD *)&v76[24];
  v61 = *(_OWORD *)&v76[8];
  *(_QWORD *)v67 = v75;
  *(_QWORD *)&v67[8] = a5;
  *(_OWORD *)&v67[16] = 0uLL;
  *(_QWORD *)&v67[32] = &v68;
  *(_QWORD *)&v67[40] = 0x400000000;
  if (v75 && *(unsigned __int8 *)(v75 + 16) > 0x1Bu)
  {
    v68 = v75;
    *(_OWORD *)v76 = *(_OWORD *)v67;
    *(_OWORD *)&v76[16] = *(_OWORD *)&v67[16];
    v75 = v8;
    *(_QWORD *)&v76[32] = v79;
    v79[0] = v9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_OWORD *)v76 = *(_OWORD *)v67;
    *(_OWORD *)&v76[16] = *(_OWORD *)&v67[16];
    v75 = v8;
    *(_QWORD *)&v76[32] = v79;
  }
  v77 = v10;
  v78 = 4;
  sub_1C4EC91B0((uint64_t)&v80, (unint64_t)&v75);
  if (*(_QWORD **)&v76[32] != v79)
    free(*(void **)&v76[32]);
  if (*(uint64_t **)&v67[32] != &v68)
    free(*(void **)&v67[32]);
  v11 = 1;
  do
  {
    v12 = v81;
    if (!(_DWORD)v81)
      break;
    sub_1C6311FA8(&v75, (uint64_t *)&v80);
    v13 = (llvm::BasicBlock *)v75;
    v14 = a1;
    if ((llvm::BasicBlock *)v75 != a2)
      v14 = *(_QWORD *)(v75 + 48);
    if ((v11 & 1) != 0)
      v15 = a3 + 24;
    else
      v15 = v75 + 40;
    if (v14 != v15)
    {
      v16 = *(_QWORD *)v76;
      while (1)
      {
        if (v14)
          v17 = v14 - 24;
        else
          v17 = 0;
        v18 = *(unsigned __int8 *)(v17 + 16) - 33;
        if (v18 > 0x37)
          goto LABEL_28;
        if (((1 << (*(_BYTE *)(v17 + 16) - 33)) & 0x8000000000041) != 0)
          break;
        if (v18 != 27)
        {
          if (((1 << (*(_BYTE *)(v17 + 16) - 33)) & 0x808001D0000010) == 0)
            goto LABEL_28;
LABEL_44:
          v21 = 1;
          goto LABEL_45;
        }
        v21 = (*(_WORD *)(v17 + 18) & 0x301) != 0;
LABEL_45:
        if (v17 != a3)
        {
          if (v21)
          {
            *(_QWORD *)v67 = v16;
            *(_QWORD *)&v67[8] = v62;
            *(_OWORD *)&v67[16] = v61;
            *(_OWORD *)&v67[32] = v60;
            v30 = 1;
            LOBYTE(v68) = 1;
            if ((llvm::AAResults::getModRefInfo(*a4, v17, (__int128 *)v67, (uint64_t)(a4 + 1)) & 2) != 0)
              goto LABEL_61;
          }
        }
LABEL_28:
        v14 = *(_QWORD *)(v14 + 8);
        if (v14 == v15)
          goto LABEL_49;
      }
      v19 = *(_QWORD *)(v17 + 64);
      if (v19 && (*(_BYTE *)(v19 + 17) & 0x30) != 0)
        goto LABEL_28;
      v20 = *(_DWORD *)(v17 + 20);
      if ((v20 & 0x80000000) == 0
        || (v22 = v17 - 32 * (v20 & 0x7FFFFFF), v25 = *(_QWORD *)(v22 - 8), v23 = v22 - 8, (v24 = v25) == 0))
      {
LABEL_33:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 45) & 1) != 0)
          goto LABEL_28;
        v21 = llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44) ^ 1;
        goto LABEL_45;
      }
      v26 = -v24;
      while (1)
      {
        v27 = *(_DWORD *)(*(_QWORD *)(v23 + v26) + 8);
        v35 = v27 > 7;
        v28 = (1 << v27) & 0x83;
        if (v35 || v28 == 0)
          goto LABEL_44;
        v26 += 16;
        if (!v26)
          goto LABEL_33;
      }
    }
LABEL_49:
    if (v13 == a2)
      goto LABEL_60;
    v31 = *((_QWORD *)v13 + 1);
    if (!v31)
      goto LABEL_60;
    while (1)
    {
      v32 = *(_QWORD *)(v31 + 24);
      v33 = *(unsigned __int8 *)(v32 + 16);
      v34 = v32 && v33 >= 0x1C;
      v35 = !v34 || v33 - 29 > 0xA;
      if (!v35)
        break;
      v31 = *(_QWORD *)(v31 + 8);
      if (!v31)
        goto LABEL_60;
    }
LABEL_79:
    v44 = *(llvm::BasicBlock **)(v32 + 40);
    v70 = *(_OWORD *)v76;
    v71 = *(_OWORD *)&v76[16];
    v72 = v74;
    v73 = 0x400000000;
    v45 = v77;
    if (!v77)
      goto LABEL_94;
    v41 = v74;
    v40 = v77;
    if (v77 < 5)
      goto LABEL_81;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v77, 8);
    v40 = v77;
    if (v77)
    {
      v41 = v72;
LABEL_81:
      memcpy(v41, *(const void **)&v76[32], 8 * v40);
    }
    LODWORD(v73) = v45;
    v46 = (char *)v72;
    while (*(llvm::BasicBlock **)(*(_QWORD *)v46 + 40) != v13)
    {
      v46 += 8;
      if (!--v45)
        goto LABEL_94;
    }
    if ((_QWORD)v70)
      v47 = *(unsigned __int8 *)(v70 + 16) >= 0x1Cu;
    else
      v47 = 0;
    if (v47 && !sub_1C4EF2D28(v70)
      || llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)&v70, v13, v44, a6, 0))
    {
      v30 = 1;
      goto LABEL_118;
    }
LABEL_94:
    *(_QWORD *)v67 = v44;
    *(_QWORD *)&v67[8] = v70;
    if (!v66)
    {
      v39 = 0;
      goto LABEL_110;
    }
    v48 = (v66 - 1) & ((v44 >> 4) ^ (v44 >> 9));
    v49 = (llvm::BasicBlock **)(v65[0] + 16 * v48);
    v50 = *v49;
    if (v44 != *v49)
    {
      v51 = 0;
      v52 = 1;
      while (v50 != (llvm::BasicBlock *)-4096)
      {
        if (v51)
          v53 = 0;
        else
          v53 = v50 == (llvm::BasicBlock *)-8192;
        if (v53)
          v51 = v49;
        v54 = v48 + v52++;
        v48 = v54 & (v66 - 1);
        v49 = (llvm::BasicBlock **)(v65[0] + 16 * v48);
        v50 = *v49;
        if (v44 == *v49)
          goto LABEL_104;
      }
      if (v51)
        v39 = v51;
      else
        v39 = v49;
LABEL_110:
      v55 = sub_1C4ECCA58((uint64_t)v65, (uint64_t)v67, (uint64_t *)v67, v39);
      *(_OWORD *)v55 = *(_OWORD *)v67;
      *(_OWORD *)&v67[8] = v70;
      *(_OWORD *)&v67[24] = v71;
      *(_QWORD *)v67 = v44;
      *(_QWORD *)&v67[40] = v69;
      v68 = 0x400000000;
      v56 = v73;
      if ((_DWORD)v73)
      {
        if (v73 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67[40], (uint64_t)v69, v73, 8);
          v42 = v73;
          if ((_DWORD)v73)
          {
            v43 = *(_BYTE **)&v67[40];
            goto LABEL_113;
          }
        }
        else
        {
          v43 = v69;
          v42 = v73;
LABEL_113:
          memcpy(v43, v72, 8 * v42);
        }
        LODWORD(v68) = v56;
      }
      sub_1C4EC91B0((uint64_t)&v80, (unint64_t)v67);
      if (*(_BYTE **)&v67[40] != v69)
        free(*(void **)&v67[40]);
      v30 = 0;
      goto LABEL_118;
    }
LABEL_104:
    if ((_QWORD)v70 == *(_QWORD *)(v65[0] + 16 * v48 + 8))
      v30 = 8;
    else
      v30 = 1;
LABEL_118:
    if (v72 != v74)
      free(v72);
    if ((v30 | 8) != 8)
      goto LABEL_61;
    while (1)
    {
      v31 = *(_QWORD *)(v31 + 8);
      if (!v31)
        break;
      v32 = *(_QWORD *)(v31 + 24);
      v36 = *(unsigned __int8 *)(v32 + 16);
      if (v32)
        v37 = v36 >= 0x1C;
      else
        v37 = 0;
      if (v37 && v36 - 29 < 0xB)
        goto LABEL_79;
    }
LABEL_60:
    v30 = 0;
LABEL_61:
    if (*(_QWORD **)&v76[32] != v79)
      free(*(void **)&v76[32]);
    v11 = 0;
  }
  while (!v30);
  MEMORY[0x1CAA32FB4](v65[0], 8);
  sub_1C4ECCB88(&v80);
  return v12 == 0;
}

