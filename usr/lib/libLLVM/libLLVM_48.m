uint64_t llvm::sinkRegionForLoopNest(uint64_t a1, llvm::Instruction *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, llvm::DominatorTree *a8, int32x2_t **a9, uint64_t a10, uint64_t a11, llvm::SinkAndHoistLICMFlags *a12)
{
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  llvm::DominatorTree *v37;
  _QWORD v38[4];
  _QWORD v39[9];
  void *v40;
  uint64_t v41;
  _QWORD v42[6];

  v42[4] = *MEMORY[0x1E0C80C00];
  v37 = a8;
  v39[0] = 1;
  for (i = 1; i != 9; i += 2)
    v39[i] = -4096;
  v40 = v42;
  v41 = 0x400000000;
  sub_1C63192F0((uint64_t)v39, (uint64_t *)&v37);
  v17 = *((_QWORD *)v37 + 1);
  v38[0] = *((_QWORD *)v37 + 2);
  v38[1] = v38[0];
  v38[2] = v17;
  v38[3] = v17;
  sub_1C63B07A8((uint64_t)v38, (char *)v39);
  v18 = v41;
  if ((_DWORD)v41)
  {
    v19 = 0;
    while (1)
    {
      v20 = (char *)v40 + 8 * v18;
      v21 = *((_QWORD *)v20 - 1);
      sub_1C5B25FEC(v39, (_QWORD *)v20 - 1);
      v22 = v41 - 1;
      do
      {
        v23 = v22;
        if (!v22)
          break;
      }
      while (!*((_QWORD *)v40 + --v22));
      LODWORD(v41) = v23;
      v25 = *(_QWORD *)(a4 + 24);
      v26 = *(unsigned int *)(a4 + 40);
      if (!(_DWORD)v26)
        goto LABEL_14;
      v27 = **(_QWORD **)(v21 + 32);
      LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v26 - 1);
      v29 = (uint64_t *)(v25 + 16 * v28);
      v30 = *v29;
      if (v27 != *v29)
        break;
LABEL_15:
      if (v29 == (uint64_t *)(v25 + 16 * v26))
        v33 = 0;
      else
        v33 = (uint64_t *)v29[1];
      v19 |= llvm::sinkRegion(v33, a2, a3, (llvm::AAResults *)a4, a5, a6, a7, v21, a9, a10, a11, a12, v37);
      v18 = v41;
      if (!(_DWORD)v41)
        goto LABEL_21;
    }
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v26 - 1);
      v30 = *(_QWORD *)(v25 + 16 * v28);
      if (v27 == v30)
      {
        v29 = (uint64_t *)(v25 + 16 * v28);
        goto LABEL_15;
      }
    }
LABEL_14:
    v29 = (uint64_t *)(v25 + 16 * v26);
    goto LABEL_15;
  }
  LOBYTE(v19) = 0;
LABEL_21:
  if (v40 != v42)
    free(v40);
  if ((v39[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v39[1], 8);
  return v19 & 1;
}

uint64_t llvm::hoistRegion(uint64_t a1, llvm::Instruction *a2, llvm::LoopInfo *a3, llvm::DominatorTree *a4, uint64_t *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7, int32x2_t **a8, int32x2_t *a9, int32x2_t *a10, uint64_t a11, llvm::OptimizationRemarkEmitter *a12, char a13, unsigned __int8 a14)
{
  int32x2_t **v14;
  llvm::DominatorTree *v15;
  uint64_t v17;
  int32x2_t *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  llvm::DominatorTree *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::UndefValue *v35;
  __int32 v36;
  int32x2_t v37;
  __int32 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  llvm::MemoryAccess *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  llvm::BasicBlock *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  llvm::Type *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  int v80;
  int v81;
  char *v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  _BOOL4 v93;
  uint64_t v94;
  llvm::APFloatBase *v95;
  char *v96;
  char *v97;
  const llvm::Instruction *v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  const llvm::BasicBlock *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD **v111;
  _QWORD *v112;
  char *v113;
  char *v114;
  const llvm::Instruction *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  const llvm::BasicBlock *v120;
  __int32 v121;
  int32x2_t v122;
  __int32 v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  llvm::MemoryAccess *v128;
  uint64_t v129;
  _QWORD *v130;
  llvm::BasicBlock *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  char *v146;
  int v147;
  uint64_t *v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  llvm::BasicBlock *v153;
  int v154;
  uint64_t v155;
  llvm::BasicBlock *v156;
  int v157;
  uint64_t v158;
  const llvm::BasicBlock *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  int v176;
  uint64_t v177;
  llvm::ValueSymbolTable *v178;
  _QWORD *v179;
  _QWORD *v180;
  int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  int v187;
  char *v188;
  uint64_t *v189;
  char *v190;
  uint64_t *v191;
  const llvm::BasicBlock **v192;
  const llvm::BasicBlock **v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  const llvm::BasicBlock **v211;
  uint64_t v212;
  uint64_t i;
  uint64_t v214;
  char *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  const llvm::Value *v219;
  char *v220;
  char *v221;
  const llvm::Value *v222;
  const llvm::Value *v223;
  const llvm::Use *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 *v236;
  llvm::OptimizationRemarkEmitter *v237;
  llvm::LoopInfo *v238;
  char *v239;
  int32x2_t **v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  int32x2_t *v245;
  int32x2_t *v246;
  llvm::DSOLocalEquivalent **v248;
  uint64_t v249;
  char v250[8];
  uint64_t v251;
  void *__p;
  _QWORD *v253;
  llvm::LoopInfo *v254;
  llvm::DominatorTree *v255;
  uint64_t v256;
  int32x2_t **v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t *v261;
  uint64_t v262;
  unsigned int v263;
  char *v264;
  char *v265;
  uint64_t v266;
  int v267;
  _WORD v268[32];
  char *v269;
  char *v270;
  uint64_t v271;
  int v272;
  _BYTE v273[32];
  llvm::Instruction *v274;
  char *v275;
  uint64_t v276;
  _QWORD v277[18];

  v14 = a8;
  v15 = (llvm::DominatorTree *)a7;
  v17 = (uint64_t)a4;
  v19 = a10;
  v277[16] = *MEMORY[0x1E0C80C00];
  v254 = a3;
  v255 = a4;
  v256 = a7;
  v257 = a8;
  v258 = 0;
  v259 = 0;
  v260 = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v275 = (char *)v277;
  v276 = 0x1000000000;
  sub_1C4DFE414((uint64_t)v250, a7);
  v238 = a3;
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v250, a3);
  v20 = v253;
  v239 = (char *)__p;
  if (v253 != __p)
  {
    v21 = 0;
    v246 = a10 + 5;
    v245 = a10 + 9;
    v241 = v14;
    v242 = v17;
    v248 = a6;
    v249 = (uint64_t)v15;
    while (1)
    {
      v22 = *(v20 - 1);
      v244 = (char *)(v20 - 1);
      if ((a13 & 1) == 0)
        break;
LABEL_12:
      v31 = v22 + 40;
      v32 = *(_QWORD *)(v22 + 48);
      if (v32 == v22 + 40)
        goto LABEL_365;
      v243 = *(v20 - 1);
      do
      {
        v33 = *(_QWORD *)(v32 + 8);
        if (v32)
          v34 = v32 - 24;
        else
          v34 = 0;
        v35 = llvm::ConstantFoldInstruction(v34, (llvm::Type *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 40) + 56) + 40) + 272), a6);
        if (v35)
        {
          v21 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, v35, (llvm::Value *)1);
          if (*(_QWORD *)(v34 + 8) || !llvm::wouldInstructionBeTriviallyDead(v34, (uint64_t *)a6))
            goto LABEL_288;
          v36 = (*v14)[5].i32[0];
          if (v36)
          {
            v37 = (*v14)[3];
            v38 = v36 - 1;
            v39 = (v36 - 1) & ((v34 >> 4) ^ (v34 >> 9));
            v40 = *(_QWORD *)(*(_QWORD *)&v37 + 16 * v39);
            if (v40 == v34)
            {
LABEL_25:
              v43 = *(llvm::MemoryAccess **)(*(_QWORD *)&v37 + 16 * v39 + 8);
              if (v43)
                llvm::MemorySSAUpdater::removeMemoryAccess(v14, v43, 0);
            }
            else
            {
              v41 = 1;
              while (v40 != -4096)
              {
                v42 = v39 + v41++;
                v39 = v42 & v38;
                v40 = *(_QWORD *)(*(_QWORD *)&v37 + 16 * v39);
                if (v40 == v34)
                  goto LABEL_25;
              }
            }
          }
          llvm::InstructionPrecedenceTracking::removeInstruction(v246, (const llvm::Instruction *)v34);
          llvm::InstructionPrecedenceTracking::removeInstruction(v245, (const llvm::Instruction *)v34);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v34 + 40) + 40, (uint64_t ***)v34);
          v44 = *(_QWORD *)(v34 + 24);
          v45 = *(_QWORD **)(v34 + 32);
          *v45 = v44;
          *(_QWORD *)(v44 + 8) = v45;
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v34);
LABEL_67:
          v21 = 1;
          goto LABEL_288;
        }
        if (llvm::Loop::hasLoopInvariantOperands((uint64_t)v15, v34)
          && llvm::canSinkOrHoistInst((llvm *)v34, a2, (llvm::AAResults *)v17, v15, (llvm::Loop *)v14, (llvm::MemorySSAUpdater *)1, a11, a12, v237))
        {
          result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v15);
          if (!result)
            goto LABEL_37;
          v47 = *(_QWORD *)(result + 40);
          if (v47 == result + 40)
            goto LABEL_37;
          if (v47)
            v48 = v47 - 24;
          else
            v48 = 0;
          if (*(_BYTE *)(v48 + 16) != 30)
          {
            v49 = 0;
            switch(*(_BYTE *)(v48 + 16))
            {
              case 0x1D:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
                goto LABEL_42;
              case 0x1E:
LABEL_397:
                __break(1u);
                return result;
              case 0x1F:
                v50 = (*(_DWORD *)(v48 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_40;
              case 0x20:
                v50 = (*(_DWORD *)(v48 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_40;
              case 0x27:
                v50 = *(_DWORD *)(v48 + 80) + 1;
LABEL_40:
                if (v50 == 1)
                  goto LABEL_41;
                goto LABEL_37;
              default:
                goto LABEL_37;
            }
          }
          if ((*(_DWORD *)(v48 + 20) & 0x7FFFFFF) == 3)
LABEL_37:
            v49 = 0;
          else
LABEL_41:
            v49 = result;
LABEL_42:
          if (sub_1C5B493B4(v34, v49, a12, a5))
          {
            result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v15);
            if (result)
            {
              v51 = *(_QWORD *)(result + 40);
              if (v51 != result + 40)
              {
                if (v51)
                  v52 = v51 - 24;
                else
                  v52 = 0;
                v53 = *(unsigned __int8 *)(v52 + 16);
                v54 = v53 - 29;
                if (v53 == 30)
                {
                  if ((*(_DWORD *)(v52 + 20) & 0x7FFFFFF) == 3)
                    goto LABEL_50;
LABEL_54:
                  v55 = result;
LABEL_55:
                  v57 = *(_QWORD *)(v55 + 40);
                  if (v57 == v55 + 40)
                  {
                    v59 = 0;
                  }
                  else
                  {
                    if (v57)
                      v58 = v57 - 24;
                    else
                      v58 = 0;
                    if (*(unsigned __int8 *)(v58 + 16) - 29 >= 0xB)
                      v59 = 0;
                    else
                      v59 = (unint64_t *)v58;
                  }
                  if (sub_1C5B49638(v34, (unsigned __int8 *)v17, (llvm::DataLayout *)a6, (uint64_t)v15, (uint64_t)v19, a12, v59, a14))
                  {
LABEL_64:
                    v60 = sub_1C5B49C10((uint64_t)&v254, v243);
                    sub_1C5B498C0(v34, v17, (uint64_t)v15, (uint64_t)v60, v19, (uint64_t *)v14, a9, a12);
                    v61 = v276;
                    if (v276 >= (unint64_t)HIDWORD(v276))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 8);
                      v61 = v276;
                    }
                    *(_QWORD *)&v275[8 * v61] = v34;
                    LODWORD(v276) = v276 + 1;
                    goto LABEL_67;
                  }
                  goto LABEL_68;
                }
                v55 = 0;
                switch(v54)
                {
                  case 0:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_55;
                  case 1:
                    goto LABEL_397;
                  case 2:
                    v56 = (*(_DWORD *)(v52 + 20) >> 1) & 0x3FFFFFF;
                    break;
                  case 3:
                    v56 = (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) - 1;
                    break;
                  case 10:
                    v56 = *(_DWORD *)(v52 + 80) + 1;
                    break;
                  default:
                    goto LABEL_50;
                }
                if (v56 == 1)
                  goto LABEL_54;
              }
            }
LABEL_50:
            v55 = 0;
            goto LABEL_55;
          }
        }
LABEL_68:
        v62 = *(unsigned __int8 *)(v34 + 16);
        if (v62 == 49)
        {
          if ((*(_BYTE *)(v34 + 17) & 0x20) == 0)
            goto LABEL_95;
          v63 = *(_DWORD *)(v34 + 20);
          if ((v63 & 0x40000000) != 0)
            v64 = *(_QWORD *)(v34 - 8);
          else
            v64 = v34 - 32 * (v63 & 0x7FFFFFF);
          if (llvm::Loop::isLoopInvariant((uint64_t)v15, *(_QWORD *)(v64 + 32)))
          {
            v66 = *(_DWORD *)(v34 + 20);
            if ((v66 & 0x40000000) != 0)
              v67 = *(_QWORD *)(v34 - 8);
            else
              v67 = v34 - 32 * (v66 & 0x7FFFFFF);
            v94 = *(_QWORD *)(v67 + 32);
            v95 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v94, v65, 1.0);
            v268[0] = 257;
            v96 = (char *)operator new(0x80uLL);
            v97 = v96;
            *(_QWORD *)v96 = 0;
            *((_QWORD *)v96 + 2) = 0;
            *((_QWORD *)v96 + 1) = 0;
            *((_QWORD *)v96 + 5) = 0;
            *((_QWORD *)v96 + 6) = 0;
            *((_QWORD *)v96 + 4) = 0;
            *((_QWORD *)v96 + 8) = *(_QWORD *)v95;
            v98 = (const llvm::Instruction *)(v96 + 64);
            *((_QWORD *)v96 + 3) = v96 + 64;
            *((_QWORD *)v96 + 7) = v96 + 64;
            *((_QWORD *)v96 + 9) = 0;
            v99 = (uint64_t *)(v96 + 72);
            v96[80] = 49;
            v96[81] = 0;
            *((_WORD *)v96 + 41) = 0;
            *((_DWORD *)v96 + 21) = 2;
            *(_OWORD *)(v96 + 88) = 0u;
            v100 = v96 + 88;
            *((_DWORD *)v96 + 30) = 0;
            *(_OWORD *)(v96 + 104) = 0u;
            *(_QWORD *)v96 = v95;
            v103 = *((_QWORD *)v95 + 1);
            v102 = (_QWORD *)((char *)v95 + 8);
            v101 = v103;
            *((_QWORD *)v96 + 1) = v103;
            if (v103)
              *(_QWORD *)(v101 + 16) = v96 + 8;
            *((_QWORD *)v96 + 2) = v102;
            *v102 = v96;
            if (*((_QWORD *)v96 + 4))
            {
              **((_QWORD **)v96 + 6) = *((_QWORD *)v96 + 5);
              v217 = *((_QWORD *)v96 + 5);
              if (v217)
                *(_QWORD *)(v217 + 16) = *((_QWORD *)v96 + 6);
            }
            *((_QWORD *)v96 + 4) = v94;
            v106 = *(_QWORD *)(v94 + 8);
            v105 = (_QWORD *)(v94 + 8);
            v104 = v106;
            *((_QWORD *)v96 + 5) = v106;
            if (v106)
              *(_QWORD *)(v104 + 16) = v96 + 40;
            *((_QWORD *)v96 + 6) = v105;
            *v105 = v96 + 32;
            llvm::Value::setName((uint64_t ***)v96 + 8, (uint64_t)&v264);
            v97[81] |= *(_BYTE *)(v34 + 17) & 0xFE;
            v107 = *(const llvm::BasicBlock **)(v34 + 40);
            llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::InstructionPrecedenceTracking *)v246, v98, v107);
            llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::InstructionPrecedenceTracking *)v245, v98, v107);
            v108 = *(_QWORD *)(v34 + 40);
            *((_QWORD *)v97 + 13) = v108;
            *(_WORD *)(v108 + 18) &= ~0x8000u;
            if ((v97[87] & 0x10) != 0)
            {
              v177 = *(_QWORD *)(v108 + 56);
              if (v177)
              {
                v178 = *(llvm::ValueSymbolTable **)(v177 + 104);
                if (v178)
                  llvm::ValueSymbolTable::reinsertValue(v178, v98);
              }
            }
            v109 = *(_QWORD *)(v34 + 24);
            *((_QWORD *)v97 + 11) = v109;
            *((_QWORD *)v97 + 12) = v34 + 24;
            *(_QWORD *)(v109 + 8) = v100;
            *(_QWORD *)(v34 + 24) = v100;
            v110 = *(_DWORD *)(v34 + 20);
            if ((v110 & 0x40000000) != 0)
              v111 = *(_QWORD ***)(v34 - 8);
            else
              v111 = (_QWORD **)(v34 - 32 * (v110 & 0x7FFFFFF));
            v112 = *v111;
            v268[0] = 257;
            v113 = (char *)operator new(0x80uLL);
            v114 = v113;
            *(_QWORD *)v113 = 0;
            *((_QWORD *)v113 + 1) = 0;
            *((_QWORD *)v113 + 2) = 0;
            *((_QWORD *)v113 + 5) = 0;
            *((_QWORD *)v113 + 6) = 0;
            *((_QWORD *)v113 + 4) = 0;
            *((_QWORD *)v113 + 8) = *v112;
            v115 = (const llvm::Instruction *)(v113 + 64);
            *((_QWORD *)v113 + 3) = v113 + 64;
            *((_QWORD *)v113 + 7) = v113 + 64;
            *((_QWORD *)v113 + 9) = 0;
            v113[80] = 46;
            v113[81] = 0;
            *((_WORD *)v113 + 41) = 0;
            *((_DWORD *)v113 + 21) = 2;
            *((_DWORD *)v113 + 30) = 0;
            *(_OWORD *)(v113 + 104) = 0u;
            *(_OWORD *)(v113 + 88) = 0u;
            *(_QWORD *)v113 = v112;
            v118 = v112[1];
            v117 = v112 + 1;
            v116 = v118;
            *((_QWORD *)v113 + 1) = v118;
            if (v118)
              *(_QWORD *)(v116 + 16) = v113 + 8;
            *((_QWORD *)v113 + 2) = v117;
            *v117 = v113;
            if (*((_QWORD *)v113 + 4))
            {
              **((_QWORD **)v113 + 6) = *((_QWORD *)v113 + 5);
              v218 = *((_QWORD *)v113 + 5);
              if (v218)
                *(_QWORD *)(v218 + 16) = *((_QWORD *)v113 + 6);
            }
            v119 = *v99;
            *((_QWORD *)v113 + 5) = *v99;
            *((_QWORD *)v113 + 4) = v98;
            v14 = v241;
            if (v119)
              *(_QWORD *)(v119 + 16) = v113 + 40;
            *((_QWORD *)v113 + 6) = v99;
            *v99 = (uint64_t)(v113 + 32);
            llvm::Value::setName((uint64_t ***)v113 + 8, (uint64_t)&v264);
            v114[81] |= *(_BYTE *)(v34 + 17) & 0xFE;
            v120 = *(const llvm::BasicBlock **)(v34 + 40);
            llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::InstructionPrecedenceTracking *)v246, v115, v120);
            llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::InstructionPrecedenceTracking *)v245, v115, v120);
            sub_1C53DF664((_QWORD *)(*(_QWORD *)(v34 + 40) + 40), v34 + 24, (uint64_t)v115);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, v115, (llvm::Value *)1);
            v121 = (*v241)[5].i32[0];
            a6 = v248;
            v15 = (llvm::DominatorTree *)v249;
            if (v121)
            {
              v122 = (*v241)[3];
              v123 = v121 - 1;
              v124 = (v121 - 1) & ((v34 >> 4) ^ (v34 >> 9));
              v125 = *(_QWORD *)(*(_QWORD *)&v122 + 16 * v124);
              if (v125 == v34)
              {
LABEL_164:
                v128 = *(llvm::MemoryAccess **)(*(_QWORD *)&v122 + 16 * v124 + 8);
                if (v128)
                  llvm::MemorySSAUpdater::removeMemoryAccess(v241, v128, 0);
              }
              else
              {
                v126 = 1;
                while (v125 != -4096)
                {
                  v127 = v124 + v126++;
                  v124 = v127 & v123;
                  v125 = *(_QWORD *)(*(_QWORD *)&v122 + 16 * v124);
                  if (v125 == v34)
                    goto LABEL_164;
                }
              }
            }
            llvm::InstructionPrecedenceTracking::removeInstruction(v246, (const llvm::Instruction *)v34);
            llvm::InstructionPrecedenceTracking::removeInstruction(v245, (const llvm::Instruction *)v34);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v34 + 40) + 40, (uint64_t ***)v34);
            v129 = *(_QWORD *)(v34 + 24);
            v130 = *(_QWORD **)(v34 + 32);
            *v130 = v129;
            *(_QWORD *)(v129 + 8) = v130;
            *(_QWORD *)(v34 + 24) = 0;
            *(_QWORD *)(v34 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v34);
            v131 = sub_1C5B49C10((uint64_t)&v254, v243);
            v17 = v242;
            sub_1C5B498C0((uint64_t)v98, v242, v249, (uint64_t)v131, a10, (uint64_t *)v241, a9, a12);
            v132 = v276;
            if (v276 >= (unint64_t)HIDWORD(v276))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 8);
              v132 = v276;
            }
            *(_QWORD *)&v275[8 * v132] = v98;
            LODWORD(v276) = v276 + 1;
            v21 = 1;
            v19 = a10;
            goto LABEL_288;
          }
          v62 = *(unsigned __int8 *)(v34 + 16);
        }
        if (*(_QWORD *)(v34 + 8))
        {
          if (!v32)
            goto LABEL_95;
LABEL_79:
          if (v62 == 84)
          {
            v68 = *(_QWORD *)(v34 - 32);
            if (v68)
            {
              if (!*(_BYTE *)(v68 + 16)
                && *(_QWORD *)(v68 + 24) == *(_QWORD *)(v34 + 72)
                && *(_DWORD *)(v68 + 36) == 125)
              {
                goto LABEL_90;
              }
            }
          }
          goto LABEL_95;
        }
        if (v62 == 84)
        {
          v69 = *(_QWORD *)(v34 - 32);
          if (v69
            && !*(_BYTE *)(v69 + 16)
            && *(_QWORD *)(v69 + 24) == *(_QWORD *)(v34 + 72)
            && *(_DWORD *)(v69 + 36) == 164)
          {
LABEL_90:
            if (llvm::Loop::hasLoopInvariantOperands((uint64_t)v15, v34)
              && (*(unsigned int (**)(int32x2_t *, uint64_t, uint64_t, llvm::DominatorTree *))(*(_QWORD *)v19 + 24))(v19, v34, v17, v15)&& llvm::ICFLoopSafetyInfo::doesNotWriteMemoryBefore(v19, (const llvm::Instruction *)v34, (const llvm::BasicBlock ***)v15))
            {
              goto LABEL_64;
            }
            goto LABEL_95;
          }
          v62 = 84;
          if (v32)
            goto LABEL_79;
        }
LABEL_95:
        v70 = *(unsigned __int8 *)(v34 + 16);
        if (v70 == 83)
          v71 = v34;
        else
          v71 = 0;
        if (!v32 || v70 != 83 || !byte_1ED81E170 || !llvm::Loop::hasLoopInvariantOperands(v256, v71))
          goto LABEL_223;
        v72 = (char *)v268;
        v264 = (char *)v268;
        v265 = (char *)v268;
        v266 = 8;
        v267 = 0;
        v73 = *(_QWORD *)(v71 + 40);
        v74 = *(_QWORD *)(v73 + 8);
        if (v74)
        {
          v75 = *(_QWORD *)(v73 + 8);
          while (1)
          {
            v76 = *(_QWORD *)(v75 + 24);
            v77 = *(unsigned __int8 *)(v76 + 16);
            v78 = v76 && v77 >= 0x1C;
            if (v78 && v77 - 29 <= 0xA)
              break;
            v75 = *(_QWORD *)(v75 + 8);
            if (!v75)
            {
              v80 = 0;
              v81 = 0;
              v72 = (char *)v268;
              v82 = (char *)v268;
              goto LABEL_126;
            }
          }
LABEL_114:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v264, *(_QWORD *)(v76 + 40));
          while (1)
          {
            v75 = *(_QWORD *)(v75 + 8);
            if (!v75)
              break;
            v76 = *(_QWORD *)(v75 + 24);
            v83 = *(unsigned __int8 *)(v76 + 16);
            if (v76)
              v84 = v83 >= 0x1C;
            else
              v84 = 0;
            if (v84 && v83 - 29 < 0xB)
              goto LABEL_114;
          }
          v82 = v264;
          v72 = v265;
          v81 = HIDWORD(v266);
          v80 = v267;
          v74 = *(_QWORD *)(v73 + 8);
          if (v74)
          {
LABEL_126:
            while (1)
            {
              v86 = *(_QWORD *)(v74 + 24);
              v87 = *(unsigned __int8 *)(v86 + 16);
              v88 = v86 && v87 >= 0x1C;
              if (v88 && v87 - 29 <= 0xA)
                break;
              v74 = *(_QWORD *)(v74 + 8);
              if (!v74)
                goto LABEL_135;
            }
            v133 = 0;
LABEL_169:
            ++v133;
            while (1)
            {
              v74 = *(_QWORD *)(v74 + 8);
              if (!v74)
                break;
              v134 = *(_QWORD *)(v74 + 24);
              v135 = *(unsigned __int8 *)(v134 + 16);
              if (v134)
                v136 = v135 >= 0x1C;
              else
                v136 = 0;
              if (v136 && v135 - 29 < 0xB)
                goto LABEL_169;
            }
          }
          else
          {
LABEL_135:
            v133 = 0;
          }
          if (v81 - v80 != v133)
          {
            v93 = 0;
            goto LABEL_210;
          }
        }
        else
        {
          v80 = 0;
          v81 = 0;
          v82 = (char *)v268;
        }
        v90 = &v261[2 * v263];
        if ((_DWORD)v262)
        {
          if (v263)
          {
            v91 = 16 * v263;
            v92 = v261;
            while ((*v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v92 += 2;
              v91 -= 16;
              if (!v91)
                goto LABEL_142;
            }
          }
          else
          {
            v92 = v261;
          }
        }
        else
        {
LABEL_142:
          v92 = &v261[2 * v263];
        }
        v138 = &v261[2 * v263];
        if (v92 == v138)
          goto LABEL_209;
        do
        {
          if (v92[1] != v73)
            goto LABEL_202;
          v139 = *v92;
          v140 = *(_QWORD *)(*v92 - 32);
          if (v140 == v73)
          {
            v140 = *(_QWORD *)(v139 + 40);
LABEL_191:
            v144 = (char *)sub_1C477672C((uint64_t)&v264, v140);
            if (v265 == v264)
              v145 = (uint64_t *)((char *)&v266 + 4);
            else
              v145 = &v266;
            if (v144 != &v265[8 * *(unsigned int *)v145])
            {
              *(_QWORD *)v144 = -2;
              ++v267;
            }
            v143 = *(_QWORD *)(*v92 - 64);
            goto LABEL_197;
          }
          if (*(_QWORD *)(v139 - 64) != v73)
            goto LABEL_191;
          v141 = (char *)sub_1C477672C((uint64_t)&v264, *(_QWORD *)(v139 + 40));
          if (v265 == v264)
            v142 = (uint64_t *)((char *)&v266 + 4);
          else
            v142 = &v266;
          if (v141 != &v265[8 * *(unsigned int *)v142])
          {
            *(_QWORD *)v141 = -2;
            ++v267;
          }
          v143 = *(_QWORD *)(*v92 - 32);
LABEL_197:
          v146 = (char *)sub_1C477672C((uint64_t)&v264, v143);
          v81 = HIDWORD(v266);
          if (v265 == v264)
            v147 = HIDWORD(v266);
          else
            v147 = v266;
          if (v146 != &v265[8 * v147])
          {
            *(_QWORD *)v146 = -2;
            ++v267;
          }
LABEL_202:
          v148 = v92 + 2;
          v92 = v90;
          if (v148 != v90)
          {
            v92 = v148;
            while ((*v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v92 += 2;
              if (v92 == v90)
              {
                v92 = v90;
                break;
              }
            }
          }
        }
        while (v92 != v138);
        v80 = v267;
        v82 = v264;
        v72 = v265;
LABEL_209:
        v93 = v81 == v80;
        v14 = v241;
        v19 = a10;
LABEL_210:
        v17 = v242;
        if (v72 != v82)
          free(v72);
        if (!v93)
        {
LABEL_223:
          v157 = *(unsigned __int8 *)(v34 + 16);
          if (v157 != 30)
            v34 = 0;
          if (v32)
          {
            if (v157 == 30)
            {
              v274 = (llvm::Instruction *)v34;
              if (byte_1ED81E170)
              {
                if ((*(_DWORD *)(v34 + 20) & 0x7FFFFFF) == 3
                  && llvm::Loop::hasLoopInvariantOperands(v256, v34))
                {
                  v158 = *(_QWORD *)(v34 - 32);
                  v159 = *(const llvm::BasicBlock **)(v34 - 64);
                  v160 = v256;
                  v161 = sub_1C477672C(v256 + 56, v158);
                  v162 = *(_QWORD *)(v160 + 64);
                  v163 = 72;
                  if (v162 == *(_QWORD *)(v160 + 56))
                    v163 = 76;
                  if (v161 != (_QWORD *)(v162 + 8 * *(unsigned int *)(v160 + v163)))
                  {
                    v164 = v256;
                    result = (uint64_t)sub_1C477672C(v256 + 56, (uint64_t)v159);
                    v165 = *(_QWORD *)(v164 + 64);
                    v166 = 72;
                    if (v165 == *(_QWORD *)(v164 + 56))
                      v166 = 76;
                    if (result != v165 + 8 * *(unsigned int *)(v164 + v166) && v158 != (_QWORD)v159)
                    {
                      v264 = (char *)v268;
                      v265 = (char *)v268;
                      v266 = 4;
                      v267 = 0;
                      v269 = v273;
                      v270 = v273;
                      v271 = 4;
                      v272 = 0;
                      v168 = *(_QWORD *)(v158 + 40);
                      if (v168 != v158 + 40)
                      {
                        if (v168)
                          v169 = v168 - 24;
                        else
                          v169 = 0;
                        v170 = *(unsigned __int8 *)(v169 + 16);
                        v171 = v170 - 29;
                        if (v170 == 30)
                        {
                          if ((*(_DWORD *)(v169 + 20) & 0x7FFFFFF) == 3)
                            v172 = 2;
                          else
                            v172 = 1;
                          goto LABEL_247;
                        }
                        v172 = 2;
                        switch(v171)
                        {
                          case 1:
                            goto LABEL_397;
                          case 2:
                            v172 = (*(_DWORD *)(v169 + 20) >> 1) & 0x3FFFFFF;
                            break;
                          case 3:
                          case 9:
                            v172 = (*(_DWORD *)(v169 + 20) & 0x7FFFFFF) - 1;
                            break;
                          case 4:
                            goto LABEL_247;
                          case 7:
                            v172 = *(_WORD *)(v169 + 18) & 1;
                            break;
                          case 8:
                            v172 = 1;
                            goto LABEL_247;
                          case 10:
                            v172 = *(_DWORD *)(v169 + 80) + 1;
                            break;
                          default:
                            goto LABEL_256;
                        }
                        if (v172)
                        {
LABEL_247:
                          v173 = 0;
                          v174 = v172;
                          v175 = (uint64_t *)(v169 - 32);
                          do
                          {
                            v176 = *(unsigned __int8 *)(v169 + 16);
                            if (v176 != 30)
                              __asm { BR              X9 }
                            result = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v264, *v175);
                            ++v173;
                            v175 -= 4;
                          }
                          while (v174 != v173);
                        }
                      }
LABEL_256:
                      v179 = (_QWORD *)*((_QWORD *)v159 + 5);
                      if (v179 != (_QWORD *)((char *)v159 + 40))
                      {
                        if (v179)
                          v180 = v179 - 3;
                        else
                          v180 = 0;
                        v181 = *((unsigned __int8 *)v180 + 16);
                        v182 = v181 - 29;
                        if (v181 != 30)
                        {
                          v183 = 2;
                          switch(v182)
                          {
                            case 1:
                              goto LABEL_397;
                            case 2:
                              v183 = (*((_DWORD *)v180 + 5) >> 1) & 0x3FFFFFF;
                              goto LABEL_347;
                            case 3:
                            case 9:
                              v183 = (*((_DWORD *)v180 + 5) & 0x7FFFFFF) - 1;
                              goto LABEL_347;
                            case 4:
                              goto LABEL_264;
                            case 7:
                              v183 = *((_WORD *)v180 + 9) & 1;
                              goto LABEL_347;
                            case 8:
                              v183 = 1;
                              goto LABEL_264;
                            case 10:
                              v183 = *((_DWORD *)v180 + 20) + 1;
LABEL_347:
                              if (!v183)
                                goto LABEL_270;
                              goto LABEL_264;
                            default:
                              goto LABEL_270;
                          }
                        }
                        if ((*((_DWORD *)v180 + 5) & 0x7FFFFFF) == 3)
                          v183 = 2;
                        else
                          v183 = 1;
LABEL_264:
                        v184 = 0;
                        v185 = v183;
                        v186 = v180 - 4;
                        do
                        {
                          v187 = *((unsigned __int8 *)v180 + 16);
                          if (v187 != 30)
                            __asm { BR              X9 }
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v269, *v186);
                          ++v184;
                          v186 -= 4;
                        }
                        while (v185 != v184);
                      }
LABEL_270:
                      v188 = (char *)sub_1C477672C((uint64_t)&v264, (uint64_t)v159);
                      if (v265 == v264)
                        v189 = (uint64_t *)((char *)&v266 + 4);
                      else
                        v189 = &v266;
                      v14 = v241;
                      v17 = v242;
                      v19 = a10;
                      if (v188 != &v265[8 * *(unsigned int *)v189])
                      {
LABEL_279:
                        if (!v159)
                          goto LABEL_282;
                        goto LABEL_280;
                      }
                      v190 = (char *)sub_1C477672C((uint64_t)&v269, v158);
                      if (v270 == v269)
                        v191 = (uint64_t *)((char *)&v271 + 4);
                      else
                        v191 = &v271;
                      if (v190 != &v270[8 * *(unsigned int *)v191])
                      {
                        v159 = (const llvm::BasicBlock *)v158;
                        goto LABEL_279;
                      }
                      v193 = (const llvm::BasicBlock **)v264;
                      v192 = (const llvm::BasicBlock **)v265;
                      v194 = HIDWORD(v266);
                      v195 = v266;
                      if (v265 == v264)
                        v196 = HIDWORD(v266);
                      else
                        v196 = v266;
                      v197 = v265;
                      if ((_DWORD)v196)
                      {
                        v198 = 0;
                        while (*(_QWORD *)&v265[v198] >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          v198 += 8;
                          if (8 * v196 == v198)
                            goto LABEL_318;
                        }
                        v197 = &v265[v198];
                      }
                      v199 = &v265[8 * v196];
                      if (v197 != v199)
                      {
                        do
                        {
                          v202 = *(_QWORD *)v197;
                          v201 = (unint64_t *)(v197 + 8);
                          v200 = v202;
                          while (v201 != (unint64_t *)v199)
                          {
                            v203 = *v201++;
                            if (v203 <= 0xFFFFFFFFFFFFFFFDLL)
                            {
                              v197 = (char *)(v201 - 1);
                              goto LABEL_305;
                            }
                          }
                          v197 = v199;
LABEL_305:
                          v204 = (char *)sub_1C477672C((uint64_t)&v269, v200);
                          if (v270 == v269)
                            v205 = (uint64_t *)((char *)&v271 + 4);
                          else
                            v205 = &v271;
                          if (v204 == &v270[8 * *(unsigned int *)v205])
                          {
                            v206 = (char *)sub_1C477672C((uint64_t)&v264, v200);
                            v207 = v265 == v264 ? (uint64_t *)((char *)&v266 + 4) : &v266;
                            if (v206 != &v265[8 * *(unsigned int *)v207])
                            {
                              *(_QWORD *)v206 = -2;
                              ++v267;
                            }
                          }
                          v193 = (const llvm::BasicBlock **)v264;
                          v192 = (const llvm::BasicBlock **)v265;
                          v194 = HIDWORD(v266);
                          v195 = v266;
                          if (v265 == v264)
                            v208 = HIDWORD(v266);
                          else
                            v208 = v266;
                        }
                        while (v197 != &v265[8 * v208]);
                      }
LABEL_318:
                      if (v194 - v267 == 1)
                      {
                        if (v192 == v193)
                          v209 = v194;
                        else
                          v209 = v195;
                        if ((_DWORD)v209)
                        {
                          v210 = 8 * v209;
                          v211 = &v192[v209];
                          while ((unint64_t)*v192 >= 0xFFFFFFFFFFFFFFFELL)
                          {
                            ++v192;
                            v210 -= 8;
                            if (!v210)
                            {
                              v192 = v211;
                              break;
                            }
                          }
                        }
                        v159 = *v192;
                        if (!*v192)
                          goto LABEL_282;
LABEL_280:
                        if (llvm::DominatorTree::dominates(v255, v274, v159))
                          sub_1C6180A54((uint64_t)&v261, (uint64_t *)&v274)[1] = v159;
                        goto LABEL_282;
                      }
                      if (v194 != v267)
                      {
                        v212 = *(_QWORD *)(v158 + 56);
                        for (i = *(_QWORD *)(v212 + 80); ; i = *(_QWORD *)(i + 8))
                        {
                          if (i == v212 + 72)
                          {
                            v159 = (const llvm::BasicBlock *)(v212 + 48);
                            goto LABEL_280;
                          }
                          v159 = (const llvm::BasicBlock *)(i - 24);
                          v214 = i ? i - 24 : 0;
                          v215 = (char *)sub_1C477672C((uint64_t)&v264, v214);
                          v216 = v265 == v264 ? (uint64_t *)((char *)&v266 + 4) : &v266;
                          if (v215 != &v265[8 * *(unsigned int *)v216])
                            break;
                        }
                        if (i)
                          goto LABEL_280;
                      }
LABEL_282:
                      if (v270 != v269)
                        free(v270);
                      if (v265 != v264)
                        free(v265);
                    }
                  }
                }
              }
            }
          }
          v15 = (llvm::DominatorTree *)v249;
          goto LABEL_287;
        }
        v149 = *(_DWORD *)(v71 + 20);
        v150 = v149 & 0x7FFFFFF;
        if ((v149 & 0x7FFFFFF) != 0)
        {
          v151 = 0;
          do
          {
            if ((v149 & 0x40000000) != 0)
              v152 = *(_QWORD *)(v71 - 8);
            else
              v152 = v71 - 32 * v150;
            v153 = sub_1C5B49C10((uint64_t)&v254, *(_QWORD *)(v152 + 32 * *(unsigned int *)(v71 + 60) + 8 * v151));
            v154 = *(_DWORD *)(v71 + 20);
            if ((v154 & 0x40000000) != 0)
              v155 = *(_QWORD *)(v71 - 8);
            else
              v155 = v71 - 32 * (v154 & 0x7FFFFFF);
            *(_QWORD *)(v155 + 32 * *(unsigned int *)(v71 + 60) + 8 * v151++) = v153;
            v149 = *(_DWORD *)(v71 + 20);
            v150 = v149 & 0x7FFFFFF;
          }
          while (v151 < v150);
        }
        v156 = sub_1C5B49C10((uint64_t)&v254, v243);
        v15 = (llvm::DominatorTree *)v249;
        sub_1C5B498C0(v71, v242, v249, (uint64_t)v156, v19, (uint64_t *)v14, a9, a12);
        v21 = 1;
LABEL_287:
        a6 = v248;
LABEL_288:
        v32 = v33;
      }
      while (v33 != v31);
LABEL_365:
      v20 = v244;
      if (v244 == v239)
        goto LABEL_368;
    }
    v23 = *((_DWORD *)v238 + 4);
    if (v23)
    {
      v24 = *(_QWORD *)v238;
      v25 = v23 - 1;
      v26 = (v23 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v27 = *(_QWORD *)(*(_QWORD *)v238 + 16 * v26);
      if (v22 == v27)
      {
LABEL_9:
        v30 = *(llvm::DominatorTree **)(v24 + 16 * v26 + 8);
        goto LABEL_11;
      }
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v26 + v28++;
        v26 = v29 & v25;
        v27 = *(_QWORD *)(v24 + 16 * v26);
        if (v22 == v27)
          goto LABEL_9;
      }
    }
    v30 = 0;
LABEL_11:
    if (v30 != v15)
      goto LABEL_365;
    goto LABEL_12;
  }
  v21 = 0;
LABEL_368:
  if (byte_1ED81E170 && (_DWORD)v276)
  {
    v219 = 0;
    v220 = v275;
    v221 = &v275[8 * v276];
    while (1)
    {
      v223 = (const llvm::Value *)*((_QWORD *)v221 - 1);
      v221 -= 8;
      v222 = v223;
      v224 = (const llvm::Use *)*((_QWORD *)v223 + 1);
      if (v224)
        break;
LABEL_374:
      v222 = v219;
LABEL_391:
      v219 = v222;
      if (v221 == v220)
        goto LABEL_392;
    }
    while (llvm::DominatorTree::dominates((llvm::DominatorTree *)v17, v222, v224))
    {
      v224 = (const llvm::Use *)*((_QWORD *)v224 + 1);
      if (!v224)
        goto LABEL_374;
    }
    v225 = *(_QWORD *)(v17 + 24);
    v226 = *(unsigned int *)(v17 + 40);
    if ((_DWORD)v226)
    {
      v227 = *((_QWORD *)v222 + 5);
      LODWORD(v228) = ((v227 >> 4) ^ (v227 >> 9)) & (v226 - 1);
      v229 = (uint64_t *)(v225 + 16 * v228);
      v230 = *v229;
      if (v227 == *v229)
        goto LABEL_382;
      v231 = 1;
      while (v230 != -4096)
      {
        v232 = v228 + v231++;
        v228 = v232 & (v226 - 1);
        v230 = *(_QWORD *)(v225 + 16 * v228);
        if (v227 == v230)
        {
          v229 = (uint64_t *)(v225 + 16 * v228);
          goto LABEL_382;
        }
      }
    }
    v229 = (uint64_t *)(v225 + 16 * v226);
LABEL_382:
    v233 = *(uint64_t **)(v229[1] + 8);
    v234 = *v233;
    if (!v219 || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v17, *((_QWORD *)v219 + 5), *v233))
    {
      v235 = *(_QWORD *)(v234 + 40);
      if (v235)
        v236 = (unsigned __int8 *)(v235 - 24);
      else
        v236 = 0;
      if (v236[16] - 29 >= 0xB)
        v219 = 0;
      else
        v219 = (const llvm::Value *)v236;
    }
    sub_1C5B4A458(v222, (llvm::BasicBlock **)v219, v19, (uint64_t *)v14, a9);
    v21 = 1;
    goto LABEL_391;
  }
LABEL_392:
  if (__p)
  {
    v253 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v251, 8);
  if (v275 != (char *)v277)
    free(v275);
  MEMORY[0x1CAA32FB4](v261, 8);
  MEMORY[0x1CAA32FB4](v258, 8);
  return v21 & 1;
}

uint64_t sub_1C5B493B4(uint64_t a1, uint64_t a2, llvm::OptimizationRemarkEmitter *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  void **v19;
  const void *v20[10];
  void *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (**v24)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v25;
  char v26;
  uint64_t v27;
  _QWORD v28[5];
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[260];
  int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::Function::getEntryCount(*(uint64_t ****)(a2 + 56), 0, (uint64_t)&v24);
  if (!(_BYTE)v27)
    return 1;
  result = 1;
  if (!a4 || !dword_1ED81E230)
    return result;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = llvm::BlockFrequencyInfo::getBlockFreq(a4, a2) / (unint64_t)dword_1ED81E230;
  if (v10 <= llvm::BlockFrequencyInfo::getBlockFreq(a4, v9))
    return 1;
  v11 = ****(_QWORD ****)a3;
  if (*(_QWORD *)(v11 + 128)
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 72) + 48))(*(_QWORD *)(v11 + 72)),
        (_DWORD)result))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v28, (const llvm::DebugLoc *)(a1 + 48));
    v13 = *(_QWORD *)(a1 + 40);
    v25 = 10;
    v26 = 2;
    v27 = v12;
    v28[2] = "licm";
    v28[3] = "SinkHoistInst";
    v28[4] = 13;
    v29 = 0;
    v30 = 0;
    v31 = v33;
    v32 = 0x400000000;
    v33[256] = 0;
    v34 = -1;
    v35 = v13;
    v24 = &off_1E814E538;
    v20[0] = "failed to sink or hoist instruction because containing block has lower frequency than destination block";
    v20[1] = (const void *)103;
    sub_1C53B17B4((uint64_t)&v31, v20);
    sub_1C61998EC((uint64_t)v20, (uint64_t)&v24);
    v20[0] = &off_1E814E538;
    v24 = &off_1E814E790;
    v14 = (char *)v31;
    if ((_DWORD)v32)
    {
      v15 = (unint64_t)v32 << 6;
      do
      {
        v16 = (void **)&v14[v15];
        if (v14[v15 - 17] < 0)
          operator delete(*(v16 - 5));
        if (*((char *)v16 - 41) < 0)
          operator delete(*(v16 - 8));
        v15 -= 64;
      }
      while (v15);
      v14 = (char *)v31;
    }
    if (v14 != v33)
      free(v14);
    llvm::OptimizationRemarkEmitter::emit(a3, (llvm::DiagnosticInfoOptimizationBase *)v20);
    v20[0] = &off_1E814E790;
    v17 = (char *)v21;
    if (v22)
    {
      v18 = (unint64_t)v22 << 6;
      do
      {
        v19 = (void **)&v17[v18];
        if (v17[v18 - 17] < 0)
          operator delete(*(v19 - 5));
        if (*((char *)v19 - 41) < 0)
          operator delete(*(v19 - 8));
        v18 -= 64;
      }
      while (v18);
      v17 = (char *)v21;
    }
    if (v17 != (char *)&v23)
      free(v17);
    return 0;
  }
  return result;
}

uint64_t sub_1C5B49638(uint64_t a1, unsigned __int8 *a2, llvm::DataLayout *a3, uint64_t a4, uint64_t a5, llvm::OptimizationRemarkEmitter *a6, unint64_t *a7, int a8)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  void **v19;
  char *v20;
  unint64_t v21;
  void **v22;
  const void *v23[10];
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t (**v27)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v28;
  char v29;
  uint64_t v30;
  _QWORD v31[5];
  char v32;
  char v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[260];
  int v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a8 && (llvm::isSafeToSpeculativelyExecute(a1, a7, a2, a3) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a5 + 24))(a5, a1, a2, a4) & 1) != 0)
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 16) != 60)
    return 0;
  result = llvm::Loop::isLoopInvariant(a4, *(_QWORD *)(a1 - 32));
  if ((_DWORD)result)
  {
    v14 = ****(_QWORD ****)a6;
    if (*(_QWORD *)(v14 + 128)
      || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 72) + 48))(*(_QWORD *)(v14 + 72)),
          (_DWORD)result))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v31, (const llvm::DebugLoc *)(a1 + 48));
      v16 = *(_QWORD *)(a1 + 40);
      v28 = 10;
      v29 = 2;
      v30 = v15;
      v31[2] = "licm";
      v31[3] = "LoadWithLoopInvariantAddressCondExecuted";
      v31[4] = 40;
      v32 = 0;
      v33 = 0;
      v34 = v36;
      v35 = 0x400000000;
      v36[256] = 0;
      v37 = -1;
      v38 = v16;
      v27 = &off_1E814E538;
      v23[0] = "failed to hoist load with loop-invariant address because load is conditionally executed";
      v23[1] = (const void *)87;
      sub_1C53B17B4((uint64_t)&v34, v23);
      sub_1C61998EC((uint64_t)v23, (uint64_t)&v27);
      v23[0] = &off_1E814E538;
      v27 = &off_1E814E790;
      v17 = (char *)v34;
      if ((_DWORD)v35)
      {
        v18 = (unint64_t)v35 << 6;
        do
        {
          v19 = (void **)&v17[v18];
          if (v17[v18 - 17] < 0)
            operator delete(*(v19 - 5));
          if (*((char *)v19 - 41) < 0)
            operator delete(*(v19 - 8));
          v18 -= 64;
        }
        while (v18);
        v17 = (char *)v34;
      }
      if (v17 != v36)
        free(v17);
      llvm::OptimizationRemarkEmitter::emit(a6, (llvm::DiagnosticInfoOptimizationBase *)v23);
      v23[0] = &off_1E814E790;
      v20 = (char *)v24;
      if (v25)
      {
        v21 = (unint64_t)v25 << 6;
        do
        {
          v22 = (void **)&v20[v21];
          if (v20[v21 - 17] < 0)
            operator delete(*(v22 - 5));
          if (*((char *)v22 - 41) < 0)
            operator delete(*(v22 - 8));
          v21 -= 64;
        }
        while (v21);
        v20 = (char *)v24;
      }
      if (v20 != (char *)&v26)
        free(v20);
      return 0;
    }
  }
  return result;
}

unsigned __int8 **sub_1C5B498C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t *a6, int32x2_t *a7, llvm::OptimizationRemarkEmitter *a8)
{
  uint64_t v16;
  int v17;
  uint64_t i;
  llvm::BasicBlock **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  void **v29;
  char *v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  void *__p;
  char v37;
  _OWORD v38[5];
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t (**v42)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  char v50;
  char v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[260];
  int v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v16 = ****(_QWORD ****)a8;
  if (*(_QWORD *)(v16 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 72) + 48))(*(_QWORD *)(v16 + 72)))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v38, (const llvm::DebugLoc *)(a1 + 48));
    v25 = *(_QWORD *)(a1 + 40);
    v43 = 9;
    v44 = 2;
    v45 = v24;
    v46 = v38[0];
    v47 = "licm";
    v48 = "Hoisted";
    v49 = 7;
    v50 = 0;
    v51 = 0;
    v52 = v54;
    v53 = 0x400000000;
    v54[256] = 0;
    v55 = -1;
    v56 = v25;
    v42 = &off_1E814E500;
    *(_QWORD *)&v38[0] = "hoisting ";
    *((_QWORD *)&v38[0] + 1) = 9;
    sub_1C53B17B4((uint64_t)&v52, (const void **)v38);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v34, "Inst", 4uLL, (_BYTE *)a1);
    v26 = sub_1C47E3888((uint64_t)&v42, (uint64_t)v34);
    sub_1C61998EC((uint64_t)v38, v26);
    *(_QWORD *)&v38[0] = &off_1E814E500;
    if (v37 < 0)
      operator delete(__p);
    v33 = a3;
    if (v35 < 0)
      operator delete(v34[0]);
    v42 = &off_1E814E790;
    v27 = (char *)v52;
    if ((_DWORD)v53)
    {
      v28 = (unint64_t)v53 << 6;
      do
      {
        v29 = (void **)&v27[v28];
        if (v27[v28 - 17] < 0)
          operator delete(*(v29 - 5));
        if (*((char *)v29 - 41) < 0)
          operator delete(*(v29 - 8));
        v28 -= 64;
      }
      while (v28);
      v27 = (char *)v52;
    }
    if (v27 != v54)
      free(v27);
    llvm::OptimizationRemarkEmitter::emit(a8, (llvm::DiagnosticInfoOptimizationBase *)v38);
    *(_QWORD *)&v38[0] = &off_1E814E790;
    v30 = (char *)v39;
    if (v40)
    {
      v31 = (unint64_t)v40 << 6;
      do
      {
        v32 = (void **)&v30[v31];
        if (v30[v31 - 17] < 0)
          operator delete(*(v32 - 5));
        if (*((char *)v32 - 41) < 0)
          operator delete(*(v32 - 8));
        v31 -= 64;
      }
      while (v31);
      v30 = (char *)v39;
    }
    if (v30 != (char *)&v41)
      free(v30);
    a3 = v33;
  }
  if ((*(_BYTE *)(a1 + 23) & 0x20) != 0 || (v17 = *(unsigned __int8 *)(a1 + 16), v17 == 84))
  {
    if (((*(uint64_t (**)(int32x2_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a1, a2, a3) & 1) == 0)
      llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata((uint64_t ***)a1, 0, 0);
    v17 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v17 == 83)
  {
    for (i = *(_QWORD *)(a4 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v19 = (llvm::BasicBlock **)(i - 24);
      v20 = i ? i - 24 : 0;
      if (*(_BYTE *)(v20 + 16) != 83)
        break;
    }
  }
  else
  {
    v21 = *(_QWORD *)(a4 + 40);
    if (v21)
      v22 = v21 - 24;
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
      v19 = 0;
    else
      v19 = (llvm::BasicBlock **)v22;
  }
  sub_1C5B4A458((llvm::Instruction *)a1, v19, a5, a6, a7);
  return llvm::Instruction::dropLocation((unsigned __int8 **)a1);
}

llvm::BasicBlock *sub_1C5B49C10(uint64_t a1, uint64_t a2)
{
  uint64_t LoopPredecessor;
  uint64_t v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t ***v23;
  llvm::BasicBlock *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *SingleSuccessor;
  _DWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  _DWORD *v37;
  llvm::MemorySSAUpdater *v38;
  llvm::BasicBlock *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  int v46;
  int v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  llvm::BasicBlock *v66;
  char *v67;
  char *v68;
  llvm::Value *v69;
  _DWORD *v70;
  uint64_t v71;
  llvm::Value *v72;
  _QWORD *v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[3];
  llvm::BasicBlock *v83;
  uint64_t v84;
  uint64_t **v85;
  uint64_t *v86[2];

  v86[1] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v85 = (uint64_t **)a2;
  if (byte_1ED81E170)
  {
    v9 = (uint64_t *)(a1 + 32);
    v82[0] = a2;
    v86[0] = 0;
    if (sub_1C61252B8((uint64_t *)(a1 + 32), v82, v86))
      return (llvm::BasicBlock *)sub_1C4E5D0EC(v9, &v85)[1];
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(unsigned int *)(a1 + 72);
    v12 = (uint64_t *)(v10 + 16 * v11);
    if (*(_DWORD *)(a1 + 64))
    {
      if ((_DWORD)v11)
      {
        v13 = 16 * v11;
        v14 = *(uint64_t **)(a1 + 56);
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v14 += 2;
          v13 -= 16;
          if (!v13)
            goto LABEL_22;
        }
      }
      else
      {
        v14 = *(uint64_t **)(a1 + 56);
      }
    }
    else
    {
LABEL_22:
      v14 = (uint64_t *)(v10 + 16 * v11);
    }
    v15 = (uint64_t *)(v10 + 16 * v11);
    if (v14 != v15)
    {
      while (v85 == (uint64_t **)v14[1] || *(uint64_t ***)(*v14 - 32) != v85 && *(uint64_t ***)(*v14 - 64) != v85)
      {
        v16 = v14 + 2;
        v14 = v12;
        if (v16 != v12)
        {
          v14 = v16;
          while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v14 += 2;
            if (v14 == v12)
            {
              v14 = v12;
              break;
            }
          }
        }
        if (v14 == v15)
        {
          v14 = v15;
          break;
        }
      }
    }
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 16));
    if (!LoopPredecessor)
      goto LABEL_42;
    v17 = *(_QWORD *)(LoopPredecessor + 40);
    if (v17 == LoopPredecessor + 40)
      goto LABEL_42;
    if (v17)
      v5 = v17 - 24;
    else
      v5 = 0;
    if (*(_BYTE *)(v5 + 16) == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_42:
        v6 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      v6 = 0;
      switch(*(_BYTE *)(v5 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_47;
        case 0x1E:
LABEL_129:
          __break(1u);
LABEL_130:
          v7 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
LABEL_12:
          if (v7 == 1)
            return (llvm::BasicBlock *)LoopPredecessor;
          return 0;
        case 0x1F:
          v18 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
          v18 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x27:
          v18 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_42;
      }
      if (v18 != 1)
        goto LABEL_42;
    }
    v6 = (llvm::BasicBlock *)LoopPredecessor;
LABEL_47:
    if (v14 == (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 72)))
    {
      sub_1C4E5D0EC((uint64_t *)(a1 + 32), &v85)[1] = v6;
      return v6;
    }
    v84 = 0;
    v19 = *v14;
    v84 = v19;
    v20 = **v85;
    v21 = *(uint64_t ****)(v19 - 32);
    v22 = *(uint64_t ****)(v19 - 64);
    v23 = (uint64_t ***)sub_1C6180A54(a1 + 56, &v84)[1];
    v83 = 0;
    v24 = (llvm::BasicBlock *)sub_1C5B49C10(a1, *(_QWORD *)(v19 + 40));
    v82[0] = a1;
    v82[1] = v20;
    v82[2] = (uint64_t)&v83;
    v83 = v24;
    v25 = (uint64_t *)sub_1C5B4C564(v82, v21);
    v26 = (uint64_t *)sub_1C5B4C564(v82, v22);
    v27 = (uint64_t *)sub_1C5B4C564(v82, v23);
    v28 = (uint64_t *)v27[5];
    if (v28 == v27 + 5
      || (v28 ? (v29 = v28 - 3) : (v29 = 0), *((unsigned __int8 *)v29 + 16) - 29 >= 0xB))
    {
      SingleSuccessor = (uint64_t *)llvm::BasicBlock::getSingleSuccessor(v83);
      sub_1C4FCEAA0(SingleSuccessor[7] + 72, SingleSuccessor + 3, v27[7] + 72, v27 + 3);
      v31 = operator new(0x60uLL);
      v31[13] = v31[13] & 0x38000000 | 1;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      *((_QWORD *)v31 + 3) = v31 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v31 + 8), (llvm::BasicBlock *)SingleSuccessor, (llvm::BasicBlock *)v27);
    }
    v32 = (uint64_t *)v25[5];
    if (v32 == v25 + 5
      || (v32 ? (v33 = v32 - 3) : (v33 = 0), *((unsigned __int8 *)v33 + 16) - 29 >= 0xB))
    {
      sub_1C4FCEAA0(v27[7] + 72, v27 + 3, v25[7] + 72, v25 + 3);
      v34 = operator new(0x60uLL);
      v34[13] = v34[13] & 0x38000000 | 1;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
      *((_QWORD *)v34 + 3) = v34 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v34 + 8), (llvm::BasicBlock *)v27, (llvm::BasicBlock *)v25);
    }
    v35 = (uint64_t *)v26[5];
    if (v35 == v26 + 5
      || (v35 ? (v36 = v35 - 3) : (v36 = 0), *((unsigned __int8 *)v36 + 16) - 29 >= 0xB))
    {
      sub_1C4FCEAA0(v27[7] + 72, v27 + 3, v26[7] + 72, v26 + 3);
      v37 = operator new(0x60uLL);
      v37[13] = v37[13] & 0x38000000 | 1;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = 0;
      *((_QWORD *)v37 + 3) = v37 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v37 + 8), (llvm::BasicBlock *)v27, (llvm::BasicBlock *)v26);
    }
    if (v83 != v6)
      goto LABEL_106;
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith(v6, v6, (llvm::BasicBlock *)v27);
    v38 = *(llvm::MemorySSAUpdater **)(a1 + 24);
    v39 = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v83);
    v86[0] = (uint64_t *)v83;
    llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(v38, v39, (llvm::BasicBlock *)v27, (uint64_t *)v86, 1, 1);
    v40 = *(_QWORD *)(a1 + 8);
    v41 = *(_QWORD *)(v40 + 24);
    v42 = *(unsigned int *)(v40 + 40);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      v44 = (uint64_t **)(v41 + 16 * v43);
      v45 = *v44;
      if (v27 == *v44)
        goto LABEL_75;
      v46 = 1;
      while (v45 != (uint64_t *)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t **)(v41 + 16 * v43);
        if (v27 == v45)
        {
          v44 = (uint64_t **)(v41 + 16 * v43);
          goto LABEL_75;
        }
      }
    }
    v44 = (uint64_t **)(v41 + 16 * v42);
LABEL_75:
    v48 = (uint64_t **)(v41 + 16 * v42);
    if (v44 == v48)
      v49 = 0;
    else
      v49 = v44[1];
    if ((_DWORD)v42)
    {
      v50 = **(uint64_t ***)(*(_QWORD *)(a1 + 16) + 32);
      v51 = v42 - 1;
      LODWORD(v42) = ((v50 >> 4) ^ (v50 >> 9)) & (v42 - 1);
      v52 = (uint64_t **)(v41 + 16 * v42);
      v53 = *v52;
      if (v50 == *v52)
      {
LABEL_84:
        if (v52 != v48)
        {
          v56 = (uint64_t)v52[1];
LABEL_87:
          *(_BYTE *)(v40 + 64) = 0;
          v57 = *(_QWORD *)(v56 + 8);
          if ((uint64_t *)v57 != v49)
          {
            v80 = *(_QWORD *)(v56 + 8);
            v81 = v56;
            v75 = *(_QWORD **)(v57 + 24);
            v76 = *(unsigned int *)(v57 + 32);
            v77 = &v75[v76];
            if ((_DWORD)v76)
            {
              v78 = 8 * v76;
              while (*v75 != v81)
              {
                ++v75;
                v78 -= 8;
                if (!v78)
                {
                  v75 = v77;
                  break;
                }
              }
            }
            if (v77 != v75 + 1)
            {
              memmove(v75, v75 + 1, (char *)v77 - (char *)(v75 + 1));
              LODWORD(v76) = *(_DWORD *)(v80 + 32);
            }
            *(_DWORD *)(v80 + 32) = v76 - 1;
            *(_QWORD *)(v81 + 8) = v49;
            v79 = *((unsigned int *)v49 + 8);
            if (v79 >= *((_DWORD *)v49 + 9))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v49 + 3), (uint64_t)(v49 + 5), v79 + 1, 8);
              LODWORD(v79) = *((_DWORD *)v49 + 8);
            }
            *(_QWORD *)(v49[3] + 8 * v79) = v81;
            ++*((_DWORD *)v49 + 8);
            llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v81);
          }
          v58 = *(_QWORD *)(a1 + 32);
          v59 = *(unsigned int *)(a1 + 48);
          v60 = (_QWORD *)(v58 + 16 * v59);
          if (*(_DWORD *)(a1 + 40))
          {
            if ((_DWORD)v59)
            {
              v61 = 16 * v59;
              v62 = *(_QWORD **)(a1 + 32);
              while ((*v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v62 += 2;
                v61 -= 16;
                if (!v61)
                  goto LABEL_93;
              }
            }
            else
            {
              v62 = *(_QWORD **)(a1 + 32);
            }
          }
          else
          {
LABEL_93:
            v62 = (_QWORD *)(v58 + 16 * v59);
          }
          v63 = (_QWORD *)(v58 + 16 * v59);
          if (v62 != v63)
          {
            v64 = v84;
            do
            {
              if ((llvm::BasicBlock *)v62[1] == v6 && *v62 != *(_QWORD *)(v64 + 40))
                v62[1] = v27;
              v65 = v62 + 2;
              v62 = v60;
              if (v65 != v60)
              {
                v62 = v65;
                while ((*v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v62 += 2;
                  if (v62 == v60)
                  {
                    v62 = v60;
                    break;
                  }
                }
              }
            }
            while (v62 != v63);
          }
LABEL_106:
          v66 = (llvm::BasicBlock *)*((_QWORD *)v83 + 5);
          if (v66 == (llvm::BasicBlock *)((char *)v83 + 40))
          {
            v68 = 0;
          }
          else
          {
            if (v66)
              v67 = (char *)v66 - 24;
            else
              v67 = 0;
            if (v67[16] - 29 >= 0xB)
              v68 = 0;
            else
              v68 = v67;
          }
          v69 = *(llvm::Value **)(v84 - 96);
          v70 = operator new(0xA0uLL);
          v71 = 0;
          v72 = (llvm::Value *)(v70 + 24);
          v70[29] = v70[29] & 0x38000000 | 3;
          do
          {
            v73 = &v70[v71];
            *v73 = 0;
            v73[1] = 0;
            v73[2] = 0;
            v73[3] = v72;
            v71 += 8;
          }
          while (v71 != 24);
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v70 + 24), (llvm::BasicBlock *)v25, (llvm::BasicBlock *)v26, v69, 0);
          v74 = (uint64_t *)(v68 + 24);
          if (!v68)
            v74 = 0;
          v86[0] = v74;
          llvm::ReplaceInstWithInst(*((_QWORD *)v68 + 5) + 40, v86, v72);
          return (llvm::BasicBlock *)sub_1C4E5D0EC(v9, &v85)[1];
        }
      }
      else
      {
        v54 = 1;
        while (v53 != (uint64_t *)-4096)
        {
          v55 = v42 + v54++;
          v42 = v55 & v51;
          v53 = *(uint64_t **)(v41 + 16 * v42);
          if (v50 == v53)
          {
            v52 = (uint64_t **)(v41 + 16 * v42);
            goto LABEL_84;
          }
        }
      }
    }
    v56 = 0;
    goto LABEL_87;
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 16));
  if (!LoopPredecessor)
    return 0;
  v4 = *(_QWORD *)(LoopPredecessor + 40);
  if (v4 == LoopPredecessor + 40)
    return 0;
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  if (*(_BYTE *)(v5 + 16) == 30)
  {
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 3)
      return (llvm::BasicBlock *)LoopPredecessor;
    return 0;
  }
  v6 = 0;
  switch(*(_BYTE *)(v5 + 16))
  {
    case 0x1D:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
      return v6;
    case 0x1E:
      goto LABEL_129;
    case 0x1F:
      v7 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_12;
    case 0x20:
      goto LABEL_130;
    case 0x27:
      v7 = *(_DWORD *)(v5 + 80) + 1;
      goto LABEL_12;
    default:
      return 0;
  }
  return v6;
}

void sub_1C5B4A458(llvm::Instruction *a1, llvm::BasicBlock **a2, int32x2_t *a3, uint64_t *a4, int32x2_t *a5)
{
  int32x2_t *v7;
  llvm::InstructionPrecedenceTracking *v10;
  const llvm::BasicBlock *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Instruction *v16;
  int v17;
  int v18;
  uint64_t v19;

  v7 = a3;
  v10 = (llvm::InstructionPrecedenceTracking *)&a3[5];
  llvm::InstructionPrecedenceTracking::removeInstruction(a3 + 5, a1);
  v7 += 9;
  llvm::InstructionPrecedenceTracking::removeInstruction(v7, a1);
  v11 = a2[5];
  llvm::InstructionPrecedenceTracking::insertInstructionTo(v10, a1, v11);
  llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::InstructionPrecedenceTracking *)v7, a1, v11);
  llvm::Instruction::moveBefore(a1, (llvm::Instruction *)a2);
  v12 = *(_DWORD *)(*a4 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)(*a4 + 24);
    v14 = v12 - 1;
    v15 = (v12 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v16 = *(llvm::Instruction **)(v13 + 16 * v15);
    if (v16 == a1)
    {
LABEL_6:
      v19 = *(_QWORD *)(v13 + 16 * v15 + 8);
      if (v19)
        llvm::MemorySSAUpdater::moveToPlace(a4, v19, a2[5], 2);
    }
    else
    {
      v17 = 1;
      while (v16 != (llvm::Instruction *)-4096)
      {
        v18 = v15 + v17++;
        v15 = v18 & v14;
        v16 = *(llvm::Instruction **)(v13 + 16 * v15);
        if (v16 == a1)
          goto LABEL_6;
      }
    }
  }
  if (a5)
    llvm::ScalarEvolution::forgetValue(a5, a1);
}

uint64_t sub_1C5B4A584(llvm::MemorySSA *this, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *SkipSelfWalker;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)(a5 + 16))
  {
    if (*(_BYTE *)a5)
      return 1;
    v13 = (uint64_t *)a3[4];
    v14 = a3[5] - (_QWORD)v13;
    if (v14)
    {
      v15 = 8 * (v14 >> 3);
      while ((sub_1C5B4D220(*v13, (uint64_t)this, a2) & 1) == 0)
      {
        ++v13;
        v15 -= 8;
        if (!v15)
          goto LABEL_10;
      }
      return 1;
    }
LABEL_10:
    v16 = sub_1C477672C((uint64_t)(a3 + 7), *(_QWORD *)(a4 + 40));
    v17 = a3[8];
    v18 = 72;
    if (v17 == a3[7])
      v18 = 76;
    if (v16 == (_QWORD *)(v17 + 8 * *(unsigned int *)((char *)a3 + v18)))
      return sub_1C5B4D220(*(_QWORD *)(a4 + 40), (uint64_t)this, a2);
    return 0;
  }
  if (*(_DWORD *)(a5 + 4) >= *(_DWORD *)(a5 + 8))
  {
    if (*(_BYTE *)(a2 + 16) == 25)
      v19 = a2;
    else
      v19 = 0;
    if (v19)
      v20 = (uint64_t *)(v19 - 32);
    else
      v20 = (uint64_t *)(a2 - 64);
    v11 = *v20;
  }
  else
  {
    SkipSelfWalker = llvm::MemorySSA::getSkipSelfWalker(this);
    v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*SkipSelfWalker + 16))(SkipSelfWalker, a2);
    ++*(_DWORD *)(a5 + 4);
  }
  if (*((_QWORD *)this + 12) == v11)
    return 0;
  v21 = sub_1C477672C((uint64_t)(a3 + 7), *(_QWORD *)(v11 + 64));
  v22 = a3[8];
  v23 = 72;
  if (v22 == a3[7])
    v23 = 76;
  return v21 != (_QWORD *)(v22 + 8 * *(unsigned int *)((char *)a3 + v23));
}

uint64_t sub_1C5B4A6F4(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (a3 == a2)
    return 1;
  v4 = *(_QWORD *)(a4 + 48);
  v5 = *(unsigned int *)(a4 + 64);
  v6 = v5 - 1;
  while (1)
  {
    if ((_DWORD)v5)
    {
      LODWORD(v7) = ((*a2 >> 4) ^ (*a2 >> 9)) & v6;
      v8 = (uint64_t *)(v4 + 16 * v7);
      v9 = *v8;
      if (*a2 != *v8)
      {
        v10 = 1;
        do
        {
          if (v9 == -4096)
            goto LABEL_22;
          v11 = v7 + v10++;
          v7 = v11 & v6;
          v9 = *(_QWORD *)(v4 + 16 * v7);
        }
        while (*a2 != v9);
        v8 = (uint64_t *)(v4 + 16 * v7);
      }
      if (v8 != (uint64_t *)(v4 + 16 * v5))
      {
        v12 = v8[1];
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 != v12)
            break;
        }
      }
    }
LABEL_22:
    if (++a2 == a3)
      return 1;
  }
  v14 = 0;
  while (1)
  {
    v15 = v13 - 32;
    if (!v13)
      v15 = 0;
    if (*(_BYTE *)(v15 + 16) == 27)
      goto LABEL_21;
    if (*(_QWORD *)(v15 + 72) != a1 || v14 == 1)
      return 0;
    ++v14;
LABEL_21:
    v13 = *(_QWORD *)(v13 + 8);
    if (v13 == v12)
      goto LABEL_22;
  }
}

uint64_t llvm::promoteLoopAccessesToScalars(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, llvm::DataLayout *a8, uint64_t a9, uint64_t **a10, int32x2_t *a11, llvm::OptimizationRemarkEmitter *a12, unsigned __int8 a13)
{
  llvm *v18;
  uint64_t LoopPredecessor;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int32x2_t *v24;
  uint64_t v25;
  unsigned __int8 *UnderlyingObject;
  BOOL *v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t *v64;
  _BOOL4 v65;
  _BOOL4 v66;
  int v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  const char *v73;
  uint64_t v74;
  llvm *v75;
  _BOOL4 v76;
  int v77;
  llvm *v78;
  unsigned int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  const llvm::DILocation *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  int32x2_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unsigned __int8 *MergedLocations;
  uint64_t **v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  llvm::Value *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  llvm **v108;
  llvm *v109;
  int v110;
  int v111;
  llvm *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  _QWORD *v120;
  __int16 v121;
  llvm::MDNode *v122;
  int64x2_t v123;
  int v124;
  int v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t **v129;
  _QWORD *v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  _QWORD *v134;
  llvm::BasicBlock *v135;
  char *DefinedAccess;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  llvm::Value *v141;
  int v142;
  int v143;
  llvm::MemoryAccess *v144;
  uint64_t v145;
  _QWORD *v146;
  char v147;
  int32x2_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  void **v154;
  char *v155;
  unint64_t v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v162;
  llvm *v163;
  int32x2_t *v164;
  char v165;
  uint64_t v166;
  const llvm::DataLayout *v167;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  int v174;
  unsigned __int8 *v175;
  unsigned int v176;
  uint64_t v177;
  int isDereferenceableAndAlignedPointer;
  char v179;
  uint64_t v180;
  uint64_t v181[4];
  __int16 v182;
  unsigned __int8 *v183;
  _OWORD v184[2];
  uint64_t v185;
  int64x2_t *v186;
  unsigned __int8 *v187;
  int64x2_t v188;
  int64x2_t v189;
  void *v190;
  uint64_t v191;
  _BYTE v192[257];
  __int128 v193;
  llvm *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t v201;
  void *v202;
  unsigned int v203;
  _OWORD v204[2];
  int32x2_t *v205;
  char v206;
  int64x2_t v207;
  _BYTE v208[24];
  const char *v209;
  const char *v210;
  uint64_t v211;
  char v212;
  char v213;
  void *v214;
  uint64_t v215;
  _BYTE v216[260];
  int v217;
  uint64_t v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v18 = **(llvm ***)(a1 + 72);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a9);
  if (!LoopPredecessor)
    goto LABEL_8;
  v20 = *(_QWORD *)(LoopPredecessor + 40);
  if (v20 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v20)
    v21 = v20 - 24;
  else
    v21 = 0;
  if (*(_BYTE *)(v21 + 16) == 30)
  {
    if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v22 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v22 = 0;
    switch(*(_BYTE *)(v21 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
        __break(1u);
        goto LABEL_255;
      case 0x1F:
        v23 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_255:
        v23 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v23 = *(_DWORD *)(v21 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v23 != 1)
      goto LABEL_8;
  }
  v22 = LoopPredecessor;
LABEL_13:
  v175 = a7;
  v166 = a3;
  v24 = a11;
  v190 = v192;
  v191 = 0x4000000000;
  v189 = 0u;
  v188 = 0u;
  v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 40);
  if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a11 + 8))(a11))
  {
    UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject(v18, (const llvm::Value *)6);
    v207.i8[0] = 0;
    if ((llvm::isNotVisibleOnUnwind((llvm *)UnderlyingObject, (const llvm::Value *)&v207, v27) & 1) == 0
      || v207.i8[0] && !sub_1C5B4B788((llvm *)UnderlyingObject, **(_QWORD **)(a9 + 32), (uint64_t)v175))
    {
      goto LABEL_143;
    }
    v28 = UnderlyingObject[16] != 59;
  }
  else
  {
    v28 = 0;
  }
  v29 = *(unsigned int *)(a1 + 80);
  if (!(_DWORD)v29)
  {
LABEL_143:
    v71 = 0;
    goto LABEL_144;
  }
  v162 = v28;
  v158 = a4;
  v159 = a5;
  v160 = a6;
  v163 = v18;
  isDereferenceableAndAlignedPointer = 0;
  v30 = 0;
  v174 = 0;
  LODWORD(v31) = 0;
  v32 = 0;
  v176 = 0;
  v177 = 0;
  v167 = (const llvm::DataLayout *)(v25 + 272);
  v33 = *(_QWORD *)(a1 + 72);
  v170 = v33 + 8 * v29;
  v34 = a9 + 56;
  v161 = v22;
  v171 = (_QWORD *)(v22 + 40);
  do
  {
    v172 = v33;
    for (i = *(_QWORD *)(*(_QWORD *)v33 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v36 = *(_QWORD *)(i + 24);
      if (v36)
        v37 = *(unsigned __int8 *)(v36 + 16) >= 0x1Cu;
      else
        v37 = 0;
      if (!v37)
        continue;
      v38 = sub_1C477672C(v34, *(_QWORD *)(v36 + 40));
      v39 = *(_QWORD *)(a9 + 64);
      v40 = 76;
      if (v39 != *(_QWORD *)(a9 + 56))
        v40 = 72;
      if (v38 == (_QWORD *)(v39 + 8 * *(unsigned int *)(a9 + v40)))
        continue;
      v41 = *(unsigned __int8 *)(v36 + 16);
      if (v41 == 61)
      {
        v45 = *(_QWORD *)(i + 24);
        v46 = *(_DWORD *)(v45 + 20);
        if ((v46 & 0x40000000) != 0)
          v47 = *(_QWORD *)(v45 - 8);
        else
          v47 = v45 - 32 * (v46 & 0x7FFFFFF);
        if (((i - v47) & 0x1FFFFFFFE0) != 0x20)
          continue;
        v42 = *(unsigned __int16 *)(v36 + 18);
        if ((v42 & 0x301) != 0)
          goto LABEL_101;
        v43 = v31;
        v48 = __clz(1 << (v42 >> 1)) ^ 0x3F;
        if ((isDereferenceableAndAlignedPointer & v30 & 1) != 0 && v48 <= v176
          || !(*(unsigned int (**)(int32x2_t *, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v24 + 24))(v24, v36, v175, a9))
        {
          if ((v30 & 1) != 0 || (v53 = *(unsigned int *)(a2 + 8), !(_DWORD)v53))
          {
            v30 = 1;
          }
          else
          {
            v164 = v24;
            v54 = *(uint64_t **)a2;
            v55 = 8 * v53 - 8;
            do
            {
              v56 = *v54++;
              v57 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v175, *(_QWORD *)(v36 + 40), v56);
              v58 = !v57 || v55 == 0;
              v55 -= 8;
            }
            while (!v58);
            v30 = v57;
            v24 = v164;
          }
          if ((isDereferenceableAndAlignedPointer & 1) != 0)
          {
            isDereferenceableAndAlignedPointer = 1;
          }
          else
          {
            v62 = (_QWORD *)*v171;
            if ((_QWORD *)*v171 == v171)
            {
              v64 = 0;
            }
            else
            {
              if (v62)
                v63 = v62 - 3;
              else
                v63 = 0;
              if (*((unsigned __int8 *)v63 + 16) - 29 >= 0xB)
                v64 = 0;
              else
                v64 = v63;
            }
            isDereferenceableAndAlignedPointer = llvm::isDereferenceableAndAlignedPointer(*(uint64_t **)(v36 - 32), **(_QWORD **)(v36 - 64), ((unint64_t)*(unsigned __int16 *)(v36 + 18) >> 1) & 0x3F, v167, v64, v175, a8);
          }
          goto LABEL_83;
        }
        if (v176 <= v48)
          v49 = v48;
        else
          v49 = v176;
        v176 = v49;
        v30 = 1;
      }
      else
      {
        if (v41 != 60)
          goto LABEL_101;
        v42 = *(unsigned __int16 *)(v36 + 18);
        if ((v42 & 0x301) != 0)
          goto LABEL_101;
        v43 = v31;
        v44 = __clz(1 << (v42 >> 1)) ^ 0x3F;
        if ((isDereferenceableAndAlignedPointer & (v44 <= v176)) == 0)
        {
          v50 = (_QWORD *)*v171;
          if ((_QWORD *)*v171 == v171)
          {
            v52 = 0;
          }
          else
          {
            if (v50)
              v51 = v50 - 3;
            else
              v51 = 0;
            if (*((unsigned __int8 *)v51 + 16) - 29 >= 0xB)
              v52 = 0;
            else
              v52 = v51;
          }
          v59 = sub_1C5B49638(v36, v175, a8, a9, (uint64_t)v24, a12, v52, a13);
          v60 = v176;
          if (v176 <= v44)
            v60 = v44;
          if (v59)
            v61 = v60;
          else
            v61 = v176;
          v176 = v61;
          isDereferenceableAndAlignedPointer |= v59;
          v174 = 1;
          goto LABEL_83;
        }
        v174 = 1;
      }
      isDereferenceableAndAlignedPointer = 1;
LABEL_83:
      v65 = (v42 & 0x380) != 0;
      v66 = (v42 & 0x380) == 0;
      v67 = *(unsigned __int8 *)(v36 + 16);
      if (v177)
      {
        v68 = (_QWORD *)v36;
        if (v67 != 60)
          v68 = *(_QWORD **)(v36 - 64);
        if (v177 != *v68)
          goto LABEL_101;
      }
      else
      {
        v69 = (uint64_t *)v36;
        if (v67 != 60)
          v69 = *(uint64_t **)(v36 - 64);
        v177 = *v69;
      }
      if ((_DWORD)v191)
      {
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v188), (int32x4_t)vceqzq_s64(v189))))) & 1) != 0)
        {
          llvm::Instruction::getAAMetadata((uint64_t ***)v36, &v193);
          llvm::AAMDNodes::merge((llvm::MDNode **)&v188, (llvm::MDNode **)&v193, &v207);
          v188 = v207;
          v189 = *(int64x2_t *)v208;
        }
      }
      else
      {
        llvm::Instruction::getAAMetadata((uint64_t ***)v36, &v188);
      }
      v70 = v191;
      if (v191 >= (unint64_t)HIDWORD(v191))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, (uint64_t)v192, v191 + 1, 8);
        v70 = v191;
      }
      LODWORD(v31) = v43 | v65;
      v32 |= v66;
      *((_QWORD *)v190 + v70) = v36;
      LODWORD(v191) = v191 + 1;
      v34 = a9 + 56;
    }
    v33 = v172 + 8;
  }
  while (v172 + 8 != v170);
  if ((v31 & v32 & 1) != 0)
  {
LABEL_101:
    v71 = 0;
    goto LABEL_144;
  }
  if ((v31 & 1) != 0)
  {
    v72 = v31;
    sub_1C4768AD0((uint64_t)v167, v177);
    v31 = (unint64_t)(v74 + 7) >> 3;
    v75 = v163;
    if ((_DWORD)v73 == 1)
    v76 = 1 << v176 >= v31;
    LOBYTE(v31) = v72;
    if ((v76 & isDereferenceableAndAlignedPointer & 1) == 0)
      goto LABEL_143;
  }
  else
  {
    v75 = v163;
    if ((isDereferenceableAndAlignedPointer & 1) == 0)
      goto LABEL_143;
  }
  if (((v30 | v162) & 1) == 0)
  {
    v78 = llvm::getUnderlyingObject(v75, (const llvm::Value *)6);
    v79 = *((unsigned __int8 *)v78 + 16);
    if (v79 >= 0x1C)
    {
      v80 = (unsigned __int8 *)v78;
      if (v79 - 33 <= 0x33 && ((1 << (v79 - 33)) & 0x8000000000041) != 0)
      {
        if ((sub_1C4D91DD8((uint64_t)v78, 19) & 1) != 0)
        {
LABEL_116:
          v77 = sub_1C5B4B788((llvm *)v80, **(_QWORD **)(a9 + 32), (uint64_t)v175);
          goto LABEL_118;
        }
        v79 = v80[16];
      }
      if (v79 == 59)
        goto LABEL_116;
    }
    v77 = 0;
LABEL_118:
    if (((v77 | v174) & 1) != 0)
      goto LABEL_119;
    goto LABEL_143;
  }
  LOBYTE(v77) = 1;
LABEL_119:
  v179 = v77;
  v81 = ****(_QWORD ****)a12;
  if (*(_QWORD *)(v81 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v81 + 72) + 48))(*(_QWORD *)(v81 + 72)))
  {
    v147 = v31;
    v148 = v24;
    v149 = *(_QWORD *)v190;
    v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v190 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v193, (const llvm::DebugLoc *)(*(_QWORD *)v190 + 48));
    v151 = *(_QWORD *)(v149 + 40);
    v207.i32[2] = 9;
    v207.i8[12] = 2;
    *(_QWORD *)v208 = v150;
    *(_OWORD *)&v208[8] = v193;
    v209 = "licm";
    v210 = "PromoteLoopAccessesToScalar";
    v211 = 27;
    v212 = 0;
    v213 = 0;
    v214 = v216;
    v215 = 0x400000000;
    v216[256] = 0;
    v217 = -1;
    v218 = v151;
    v207.i64[0] = (uint64_t)&off_1E814E500;
    *(_QWORD *)&v193 = "Moving accesses to memory location out of the loop";
    *((_QWORD *)&v193 + 1) = 50;
    sub_1C53B17B4((uint64_t)&v214, (const void **)&v193);
    sub_1C61998EC((uint64_t)&v193, (uint64_t)&v207);
    *(_QWORD *)&v193 = &off_1E814E500;
    v207.i64[0] = (uint64_t)&off_1E814E790;
    v152 = (char *)v214;
    if ((_DWORD)v215)
    {
      v153 = (unint64_t)v215 << 6;
      do
      {
        v154 = (void **)&v152[v153];
        if (v152[v153 - 17] < 0)
          operator delete(*(v154 - 5));
        if (*((char *)v154 - 41) < 0)
          operator delete(*(v154 - 8));
        v153 -= 64;
      }
      while (v153);
      v152 = (char *)v214;
    }
    if (v152 != v216)
      free(v152);
    llvm::OptimizationRemarkEmitter::emit(a12, (llvm::DiagnosticInfoOptimizationBase *)&v193);
    *(_QWORD *)&v193 = &off_1E814E790;
    v155 = (char *)v202;
    if (v203)
    {
      v156 = (unint64_t)v203 << 6;
      do
      {
        v157 = (void **)&v155[v156];
        if (v155[v156 - 17] < 0)
          operator delete(*(v157 - 5));
        if (*((char *)v157 - 41) < 0)
          operator delete(*(v157 - 8));
        v156 -= 64;
      }
      while (v156);
      v155 = (char *)v202;
    }
    if (v155 != (char *)v204)
      free(v155);
    v24 = v148;
    LOBYTE(v31) = v147;
  }
  v165 = v31;
  if ((_DWORD)v191)
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = (char *)v190;
    v87 = (char *)v190 + 8 * v191;
    do
    {
      v88 = *(_QWORD *)(*(_QWORD *)v86 + 48);
      if (v84 >= v85)
      {
        v90 = v24;
        v91 = (v84 - v83) >> 3;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 61)
          abort();
        if ((v85 - v83) >> 2 > v92)
          v92 = (v85 - v83) >> 2;
        if ((unint64_t)(v85 - v83) >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          if (v93 >> 61)
            sub_1C4764EE4();
          v94 = (char *)operator new(8 * v93);
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v91];
        *(_QWORD *)v95 = v88;
        v89 = v95 + 8;
        while (v84 != v83)
        {
          v96 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v95 - 1) = v96;
          v95 -= 8;
        }
        v85 = &v94[8 * v93];
        if (v83)
          operator delete(v83);
        v83 = v95;
        v24 = v90;
      }
      else
      {
        *(_QWORD *)v84 = v88;
        v89 = v84 + 8;
      }
      v86 += 8;
      v84 = v89;
    }
    while (v86 != v87);
  }
  else
  {
    v89 = 0;
    v83 = 0;
  }
  MergedLocations = (unsigned __int8 *)llvm::DILocation::getMergedLocations((llvm::DILocation **)v83, (v89 - v83) >> 3, v82);
  v187 = MergedLocations;
  if (MergedLocations)
  {
    llvm::MetadataTracking::track((uint64_t)&v187, MergedLocations, 2);
    MergedLocations = v187;
  }
  v207.i64[0] = (uint64_t)v208;
  v207.i64[1] = 0x1000000000;
  memset(v184, 0, sizeof(v184));
  v185 = 0;
  v186 = &v207;
  v99 = (uint64_t **)v190;
  v100 = v191;
  v183 = MergedLocations;
  if (MergedLocations)
    llvm::MetadataTracking::track((uint64_t)&v183, MergedLocations, 2);
  llvm::LoadAndStorePromoter::LoadAndStorePromoter(&v193, v99, v100, (uint64_t)v184, 0, 0);
  *(_QWORD *)&v193 = &off_1E81951C8;
  v194 = v163;
  v195 = a1;
  v196 = a2;
  v197 = v166;
  v198 = v158;
  v199 = v159;
  v200 = a10;
  v201 = v160;
  v202 = v183;
  if (v183)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v183, v183, (uint64_t)&v202);
    v183 = 0;
  }
  LOBYTE(v203) = v176;
  BYTE1(v203) = v165 & 1;
  v204[0] = v188;
  v204[1] = v189;
  v205 = v24;
  v206 = v179;
  v101 = operator new(0x60uLL);
  v102 = v101;
  v103 = (llvm::Value *)(v101 + 8);
  v101[13] = v101[13] & 0x38000000 | 1;
  *(_QWORD *)v101 = 0;
  *((_QWORD *)v101 + 1) = 0;
  *((_QWORD *)v101 + 2) = 0;
  *((_QWORD *)v101 + 3) = v101 + 8;
  if ((*((_BYTE *)v163 + 23) & 0x10) != 0)
  {
    v104 = ***(_QWORD ***)v163;
    v105 = *(_QWORD *)(v104 + 152);
    v106 = *(unsigned int *)(v104 + 168);
    if ((_DWORD)v106)
    {
      LODWORD(v107) = (v106 - 1) & ((v163 >> 4) ^ (v163 >> 9));
      v108 = (llvm **)(v105 + 16 * v107);
      v109 = *v108;
      if (*v108 == v163)
      {
LABEL_162:
        v112 = v108[1];
        v115 = *(_QWORD *)v112;
        v113 = (char *)v112 + 16;
        v114 = v115;
        goto LABEL_163;
      }
      v110 = 1;
      while (v109 != (llvm *)-4096)
      {
        v111 = v107 + v110++;
        v107 = v111 & (v106 - 1);
        v109 = *(llvm **)(v105 + 16 * v107);
        if (v109 == v163)
        {
          v108 = (llvm **)(v105 + 16 * v107);
          goto LABEL_162;
        }
      }
    }
    v108 = (llvm **)(v105 + 16 * v106);
    goto LABEL_162;
  }
  v114 = 0;
  v113 = &byte_1C871356D;
LABEL_163:
  v182 = 773;
  v181[0] = (uint64_t)v113;
  v181[1] = v114;
  v181[2] = (uint64_t)".promoted";
  v116 = (_QWORD *)*v171;
  if ((_QWORD *)*v171 == v171)
  {
    v118 = 0;
  }
  else
  {
    if (v116)
      v117 = (uint64_t)(v116 - 3);
    else
      v117 = 0;
    if (*(unsigned __int8 *)(v117 + 16) - 29 >= 0xB)
      v118 = 0;
    else
      v118 = v117;
  }
  llvm::LoadInst::LoadInst((uint64_t)(v101 + 8), v177, (uint64_t)v163, (uint64_t)v181, 0, v118);
  v120 = v102 + 20;
  v119 = (unsigned __int8 *)*((_QWORD *)v102 + 10);
  v121 = *((_WORD *)v102 + 25);
  if ((v165 & 1) != 0)
    v121 = v121 & 0xFC01 | 0x80;
  *((_WORD *)v102 + 25) = v121 & 0xFF81 | (2 * v176);
  v180 = 0;
  if (v119)
  {
    llvm::MetadataTracking::untrack((uint64_t)(v102 + 20), v119);
    *v120 = v180;
  }
  else
  {
    *v120 = 0;
  }
  v122 = (llvm::MDNode *)v188.i64[1];
  v123 = v189;
  if (v188.i64[0] || __PAIR128__(v188.u64[1], 0) != v189.u64[0] || v189.i64[1])
  {
    if (v188.i64[0] || *v120 || (*((_BYTE *)v102 + 55) & 0x20) != 0)
      llvm::Value::setMetadata(v103, 1, (llvm::MDNode *)v188.i64[0]);
    if (v122 || *v120 || (*((_BYTE *)v102 + 55) & 0x20) != 0)
      llvm::Value::setMetadata(v103, 5, v122);
    if (v123.i64[0] || *v120 || (*((_BYTE *)v102 + 55) & 0x20) != 0)
      llvm::Value::setMetadata(v103, 7, (llvm::MDNode *)v123.i64[0]);
    if (v123.i64[1] || *v120 || (*((_BYTE *)v102 + 55) & 0x20) != 0)
      llvm::Value::setMetadata(v103, 8, (llvm::MDNode *)v123.i64[1]);
  }
  v181[0] = v161;
  v124 = *(_DWORD *)(*(_QWORD *)&v184[0] + 16);
  if (!v124)
  {
    v134 = 0;
    v129 = a10;
LABEL_206:
    v127 = sub_1C4ECCA58(*(uint64_t *)&v184[0], (uint64_t)v181, v181, v134);
    *v127 = v181[0];
    v127[1] = 0;
    goto LABEL_207;
  }
  v125 = v124 - 1;
  v126 = (v124 - 1) & ((v161 >> 4) ^ (v161 >> 9));
  v127 = (_QWORD *)(**(_QWORD **)&v184[0] + 16 * v126);
  v128 = *v127;
  v129 = a10;
  if (*v127 != v161)
  {
    v130 = 0;
    v131 = 1;
    while (v128 != -4096)
    {
      if (v130)
        v132 = 0;
      else
        v132 = v128 == -8192;
      if (v132)
        v130 = v127;
      v133 = v126 + v131++;
      v126 = v133 & v125;
      v127 = (_QWORD *)(**(_QWORD **)&v184[0] + 16 * (v133 & v125));
      v128 = *v127;
      if (*v127 == v161)
        goto LABEL_207;
    }
    if (v130)
      v134 = v130;
    else
      v134 = v127;
    goto LABEL_206;
  }
LABEL_207:
  v127[1] = v103;
  v135 = (llvm::BasicBlock *)*((_QWORD *)v102 + 9);
  DefinedAccess = llvm::MemorySSA::createDefinedAccess(*v129, (uint64_t)v103, 0, 0);
  llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v129, (uint64_t)DefinedAccess, v135, 1);
  llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)v129, (llvm::BasicBlock **)DefinedAccess, 1);
  llvm::LoadAndStorePromoter::run((llvm::UndefValue ***)&v193, (uint64_t)&v190);
  if (!*((_QWORD *)v102 + 5))
  {
    v137 = *((_DWORD *)*v129 + 10);
    if (v137)
    {
      v138 = (*v129)[3];
      v139 = v137 - 1;
      v140 = (v137 - 1) & ((v103 >> 4) ^ (v103 >> 9));
      v141 = *(llvm::Value **)(v138 + 16 * v140);
      if (v141 == v103)
      {
LABEL_213:
        v144 = *(llvm::MemoryAccess **)(v138 + 16 * v140 + 8);
        if (v144)
          llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)v129, v144, 0);
      }
      else
      {
        v142 = 1;
        while (v141 != (llvm::Value *)-4096)
        {
          v143 = v140 + v142++;
          v140 = v143 & v139;
          v141 = *(llvm::Value **)(v138 + 16 * v140);
          if (v141 == v103)
            goto LABEL_213;
        }
      }
    }
    llvm::InstructionPrecedenceTracking::removeInstruction(v24 + 5, v103);
    llvm::InstructionPrecedenceTracking::removeInstruction(v24 + 9, v103);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v102 + 9) + 40, (uint64_t ***)v103);
    v145 = *((_QWORD *)v102 + 7);
    v146 = (_QWORD *)*((_QWORD *)v102 + 8);
    *v146 = v145;
    *(_QWORD *)(v145 + 8) = v146;
    *((_QWORD *)v102 + 7) = 0;
    *((_QWORD *)v102 + 8) = 0;
    llvm::Value::deleteValue(v103);
  }
  *(_QWORD *)&v193 = &off_1E81951C8;
  if (v202)
    llvm::MetadataTracking::untrack((uint64_t)&v202, (unsigned __int8 *)v202);
  llvm::SSAUpdater::~SSAUpdater((void **)v184);
  if ((_BYTE *)v207.i64[0] != v208)
    free((void *)v207.i64[0]);
  if (v187)
    llvm::MetadataTracking::untrack((uint64_t)&v187, v187);
  if (v83)
    operator delete(v83);
  v71 = 1;
LABEL_144:
  if (v190 != v192)
    free(v190);
  return v71;
}

uint64_t sub_1C5B4B788(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3 == a2 + 40)
  {
    v5 = 0;
  }
  else
  {
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
      v5 = 0;
    else
      v5 = v4;
  }
  return llvm::PointerMayBeCapturedBefore(a1, (const llvm::Value *)1, 1, v5, a3, 0, 0, 0) ^ 1;
}

_QWORD *sub_1C5B4B7E8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E81951C8;
  v4 = (unsigned __int8 *)a1[10];
  v2 = (uint64_t)(a1 + 10);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

uint64_t sub_1C5B4B820()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B451FC(v0, dword_1ED835F90, dword_1ED836050, 1);
}

void sub_1C5B4B860(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B4B884(uint64_t a1, llvm *a2)
{
  uint64_t v3;
  llvm::AnalysisUsage *v4;
  llvm::AnalysisUsage *v5;

  v3 = (uint64_t)a2 + 112;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::getLoopAnalysisUsage(a2, v4);
  llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v5);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)llvm::LazyBlockFrequencyInfoPass::ID);
  return sub_1C4771E64((uint64_t)a2, v3, (uint64_t)llvm::LazyBranchProbabilityInfoPass::ID);
}

uint64_t sub_1C5B4B958(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t NamedMetadata;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AnalysisPass;
  void **v12;
  void *v13;
  char **v14;
  char *v15;
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char **v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t *v39;
  uint64_t *v40;
  uint64_t v41;
  char **v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void **v47;
  uint64_t v48;
  llvm::Instruction *v49;
  uint64_t *v50;
  llvm::MemorySSA *v51;
  uint64_t v52;
  _BYTE v53[16];
  uint64_t *v54;
  uint64_t v55[2];
  int v56;
  uint64_t v57[2];
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  void *__src;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;

  v4 = (uint64_t *)a1;
  v72 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40);
  v62 = "agx.reduce.reg.pressure";
  LOWORD(v66) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v5, (uint64_t)&v62);
  if (NamedMetadata)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 128);
    v8 = (_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    if (*v8)
      return 0;
  }
  v10 = v4[1];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v10 + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v52 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID);
    v10 = v4[1];
  }
  else
  {
    v52 = 0;
  }
  v12 = *(void ***)v10;
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::MemorySSAWrapperPass::ID);
  v51 = *(llvm::MemorySSA **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  llvm::Function::getEntryCount(*(uint64_t ****)(**((_QWORD **)a2 + 4) + 56), 0, (uint64_t)&v62);
  if ((_BYTE)v64)
  {
    v43 = *(char ***)v4[1];
    do
    {
      v44 = *v43;
      v43 += 2;
    }
    while (v44 != llvm::LazyBlockFrequencyInfoPass::ID);
    v45 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v43 - 1) + 96))(*(v43 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
    v50 = (uint64_t *)sub_1C619C0A4(v45 + 32);
  }
  else
  {
    v50 = 0;
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v53, *(const llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  v14 = *(char ***)v4[1];
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::AAResultsWrapperPass::ID);
  v49 = *(llvm::Instruction **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v16 = *(char ***)v4[1];
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::LoopInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::LoopInfoWrapperPass::ID);
  v19 = *(char ***)v4[1];
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::DominatorTreeWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::DominatorTreeWrapperPass::ID);
  v22 = *(char ***)v4[1];
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::TargetLibraryInfoWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v25 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  llvm::TargetLibraryAnalysis::run(v24 + 32, v25, (uint64_t)&v62);
  *(_QWORD *)(v24 + 240) = v62;
  v26 = (uint64_t *)(v24 + 240);
  if (*(_BYTE *)(v24 + 320))
  {
    if (v26 == (uint64_t *)&v62)
    {
LABEL_35:
      *(_DWORD *)(v24 + 312) = v71;
      goto LABEL_36;
    }
    v27 = (void **)(v24 + 248);
    v2 = v64;
    v28 = *(unsigned int *)(v24 + 256);
    if (v28 >= v64)
    {
      if (v64)
        memmove(*v27, __src, 8 * v64);
      goto LABEL_34;
    }
    if (*(_DWORD *)(v24 + 260) < v64)
    {
      *(_DWORD *)(v24 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 248, v24 + 264, v2, 8);
    }
    else if ((_DWORD)v28)
    {
      memmove(*v27, __src, 8 * v28);
      goto LABEL_32;
    }
    v28 = 0;
LABEL_32:
    if (v28 != v64)
      memcpy((char *)*v27 + 8 * v28, (char *)__src + 8 * v28, 8 * v64 - 8 * v28);
LABEL_34:
    *(_DWORD *)(v24 + 256) = v2;
    goto LABEL_35;
  }
  v46 = (void *)(v24 + 264);
  *(_QWORD *)(v24 + 248) = v24 + 264;
  v47 = (void **)(v24 + 248);
  *(_QWORD *)(v24 + 256) = 0x600000000;
  v2 = v64;
  if (v64 && v47 != &__src)
  {
    if (v64 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 248, v24 + 264, v64, 8);
      v48 = v64;
      if (!v64)
      {
LABEL_62:
        *(_DWORD *)(v24 + 256) = v2;
        goto LABEL_63;
      }
      v46 = *v47;
    }
    else
    {
      v48 = v64;
    }
    memcpy(v46, __src, 8 * v48);
    goto LABEL_62;
  }
LABEL_63:
  *(_DWORD *)(v24 + 312) = v71;
  *(_BYTE *)(v24 + 320) = 1;
LABEL_36:
  v29 = (uint64_t)v4 + 28;
  v30 = (uint64_t *)(v18 + 32);
  v31 = v21 + 32;
  if (__src != &v65)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v57);
  sub_1C4D8B52C(v55);
  v32 = *(char ***)v4[1];
  do
  {
    v33 = *v32;
    v32 += 2;
  }
  while (v33 != llvm::TargetTransformInfoWrapperPass::ID);
  v34 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v32 - 1) + 96))(*(v32 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v62 = 0;
  __src = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v35 = *(_QWORD *)(v34 + 56);
  if (!v35)
  {
    sub_1C485C2F0();
LABEL_65:
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    goto LABEL_44;
  }
  v2 = (unint64_t)&v65;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v35 + 48))(v55);
  v4 = (uint64_t *)(v34 + 64);
  v36 = v55[0];
  if (*(_BYTE *)(v34 + 72))
  {
    v55[0] = 0;
    v37 = *v4;
    *v4 = v36;
    if (!v37)
      goto LABEL_44;
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v55[0];
    v55[0] = 0;
    if (!v38)
      goto LABEL_44;
    goto LABEL_65;
  }
  *(_QWORD *)(v34 + 64) = v55[0];
  *(_BYTE *)(v34 + 72) = 1;
LABEL_44:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440((uint64_t *)v2);
  sub_1C4D8B52C((uint64_t *)&v62);
  v39 = (int32x2_t *)v52;
  if (v52)
    v39 = *(int32x2_t **)(v52 + 32);
  v9 = sub_1C5B4430C(v29, a2, v49, v30, v31, v50, v26, v4, v39, v51, (llvm::SinkAndHoistLICMFlags *)v53, 0);
  v40 = v54;
  v54 = 0;
  if (v40)
  {
    v41 = *v40;
    *v40 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    MEMORY[0x1CAA32FC0](v40, 0x20C4093837F09);
  }
  return v9;
}

uint64_t sub_1C5B4BF58(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t i;

  if (a3 != a2)
  {
    v8 = a2;
    v9 = result;
    do
    {
      v10 = *(_QWORD *)(v9 + 48);
      v11 = *(unsigned int *)(v9 + 64);
      if ((_DWORD)v11)
      {
        LODWORD(v12) = ((*v8 >> 4) ^ (*v8 >> 9)) & (v11 - 1);
        v13 = (uint64_t *)(v10 + 16 * v12);
        v14 = *v13;
        if (*v8 == *v13)
          goto LABEL_10;
        v15 = 1;
        while (v14 != -4096)
        {
          v16 = v12 + v15++;
          v12 = v16 & (v11 - 1);
          v14 = *(_QWORD *)(v10 + 16 * v12);
          if (*v8 == v14)
          {
            v13 = (uint64_t *)(v10 + 16 * v12);
            goto LABEL_10;
          }
        }
      }
      v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_10:
      if (v13 != (uint64_t *)(v10 + 16 * v11))
      {
        v17 = v13[1];
        if (v17)
        {
          for (i = *(_QWORD *)(v17 + 8); i != v17; i = *(_QWORD *)(i + 8))
          {
            if (i)
            {
              if (*(unsigned __int8 *)(i - 16) - 27 >= 0xFFFFFFFE)
                result = a4(a5, *(_QWORD *)(i + 40));
            }
          }
        }
      }
      ++v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_1C5B4C068(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  int v5;

  v4 = *(uint64_t **)a1;
  v5 = a2[16];
  if (a2 && v5 == 61)
  {
    if (!llvm::Loop::isLoopInvariant(*v4, *((_QWORD *)a2 - 4)))
      return;
LABEL_7:
    sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), (uint64_t)a2);
    llvm::AliasSetTracker::add(*(llvm::AliasSetTracker **)(a1 + 16), (llvm::Instruction *)a2);
    return;
  }
  if (v5 == 60 && llvm::Loop::isLoopInvariant(*v4, *((_QWORD *)a2 - 4)))
    goto LABEL_7;
}

_QWORD *sub_1C5B4C0E8(uint64_t *a1, const llvm::Instruction *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::AliasSet **v9;
  uint64_t v10;
  llvm::AAResults **v11;
  llvm::AliasSet **v12;
  uint64_t v13;
  llvm::AliasSet **v14;
  llvm::AliasSet *v15;
  uint64_t v16;

  v4 = (_QWORD *)*a1;
  result = sub_1C477672C(*a1, (uint64_t)a2);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  if (result == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
  {
    v8 = a1[1];
    v9 = *(llvm::AliasSet ***)v8;
    v10 = *(unsigned int *)(v8 + 8);
    if (!(_DWORD)v10)
      goto LABEL_15;
    v11 = (llvm::AAResults **)a1[2];
    v12 = &v9[v10];
    v13 = 8 * v10 - 8;
    v14 = *(llvm::AliasSet ***)v8;
    do
    {
      v15 = *v14++;
      result = (_QWORD *)llvm::AliasSet::aliasesUnknownInst(v15, a2, *v11);
      if ((_DWORD)result)
        break;
      v13 -= 8;
      v9 = v14;
    }
    while (v14 != v12);
    if (v14 == v12)
    {
LABEL_15:
      v12 = v9;
    }
    else
    {
      v16 = 1;
      v12 = v9;
      do
      {
        result = (_QWORD *)llvm::AliasSet::aliasesUnknownInst(v9[v16], a2, *v11);
        if ((result & 1) == 0)
          *v12++ = v9[v16];
        ++v16;
        v13 -= 8;
      }
      while (v13);
    }
    *(_DWORD *)(v8 + 8) = ((unint64_t)v12 - *(_QWORD *)v8) >> 3;
  }
  return result;
}

void sub_1C5B4C1EC(uint64_t a1, unint64_t a2)
{
  void *v3;
  void *v4;
  char *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 152, &v14);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v8 = 152 * v6;
    do
    {
      v9 = sub_1C5B4C2E4((uint64_t)v3, (uint64_t)v5);
      v5 += 152;
      v3 = (void *)(v9 + 152);
      v8 -= 152;
    }
    while (v8);
    v5 = *(char **)a1;
    v10 = *(_DWORD *)(a1 + 8);
    if (v10)
    {
      v11 = 152 * v10;
      do
      {
        v12 = &v5[v11];
        v13 = *(char **)&v5[v11 - 80];
        if (&v5[v11 - 64] != v13)
        {
          free(v13);
          v12 = &v5[v11];
        }
        if ((*(v12 - 152) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v5[v11 - 144], 8);
        v11 -= 152;
      }
      while (v11);
      v5 = *(char **)a1;
    }
  }
  v7 = v14;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v7;
}

uint64_t sub_1C5B4C2E4(uint64_t a1, uint64_t a2)
{
  int64x2_t v4;
  void **v5;
  unint64_t v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  *(_QWORD *)a1 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  *(int64x2_t *)(a1 + 40) = v4;
  *(int64x2_t *)(a1 + 56) = v4;
  sub_1C5B4C3DC((unsigned int *)a1, (unsigned int *)a2);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  v5 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = 0x800000000;
  v6 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v6)
  {
    v7 = (const void **)(a2 + 72);
    if (v5 != (void **)(a2 + 72))
    {
      v8 = *(_QWORD *)(a2 + 72);
      if (v8 != a2 + 88)
      {
        *(_QWORD *)(a1 + 72) = v8;
        v11 = *(_DWORD *)(a2 + 84);
        *(_DWORD *)(a1 + 80) = v6;
        *(_DWORD *)(a1 + 84) = v11;
        *(_QWORD *)(a2 + 72) = a2 + 88;
        *(_DWORD *)(a2 + 84) = 0;
        goto LABEL_8;
      }
      if (v6 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6, 8);
        v7 = (const void **)(a2 + 72);
        v5 = (void **)(a1 + 72);
        v9 = *(unsigned int *)(a2 + 80);
        if (!(_DWORD)v9)
          goto LABEL_7;
      }
      else
      {
        v9 = *(unsigned int *)(a2 + 80);
      }
      memcpy(*v5, *v7, 8 * v9);
LABEL_7:
      *(_DWORD *)(a1 + 80) = v6;
LABEL_8:
      *(_DWORD *)(a2 + 80) = 0;
    }
  }
  return a1;
}

unsigned int *sub_1C5B4C3DC(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t i;
  uint64_t v11;
  __int128 v12;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = 0;
      v6 = (int *)(result + 2);
      v7 = (int *)(a2 + 2);
      do
      {
        v8 = *(_QWORD *)&v6[v5];
        *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
        *(_QWORD *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 16);
      return result;
    }
    v9 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      v11 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v11;
      LODWORD(v11) = result[4];
      result[4] = a2[4];
      a2[4] = v11;
      return result;
    }
    v4 = *result;
    v9 = result;
    result = a2;
  }
  v12 = *(_OWORD *)(v9 + 2);
  *v9 = v4 | 1;
  for (i = 2; i != 18; i += 2)
    *(_QWORD *)&v9[i] = *(_QWORD *)&result[i];
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v12;
  return result;
}

char **sub_1C5B4C4C8(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v5;
  char *v6;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v5 = 152 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 80];
      if (&v2[v5 - 64] != v6)
        free(v6);
      if ((v2[v5 - 152] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v2[v5 - 144], 8);
      v5 -= 152;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5B4C564(uint64_t *a1, uint64_t ***a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  char *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD v26[4];
  __int16 v27;
  uint64_t ***v28;
  uint64_t v29;

  v28 = a2;
  v29 = 0;
  v4 = *a1;
  v5 = (uint64_t *)(*a1 + 32);
  v26[0] = a2;
  if (sub_1C61252B8(v5, v26, &v29))
    return sub_1C4E5D0EC(v5, &v28)[1];
  v7 = (_QWORD *)a1[1];
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_12;
  }
  v8 = ***a2;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_10;
  LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (uint64_t ****)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a2)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_11;
      }
    }
LABEL_10:
    v12 = (uint64_t ****)(v9 + 16 * v10);
  }
LABEL_11:
  v16 = v12[1];
  v19 = *v16;
  v17 = (char *)(v16 + 2);
  v18 = v19;
LABEL_12:
  v27 = 773;
  v26[0] = v17;
  v26[1] = v18;
  v26[2] = ".licm";
  v20 = a2[7];
  v6 = operator new();
  *(_QWORD *)v6 = *v7 + 1600;
  *(_QWORD *)(v6 + 8) = 0;
  v21 = *(_DWORD *)(v6 + 20) & 0xC0000000;
  *(_QWORD *)(v6 + 24) = 0;
  v22 = v6 + 24;
  *(_DWORD *)(v6 + 16) = 22;
  *(_DWORD *)(v6 + 20) = v21;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 40;
  *(_QWORD *)(v6 + 48) = v6 + 40;
  *(_QWORD *)(v6 + 56) = 0;
  if (v20)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v20 + 9), (_QWORD *)v6);
    v23 = v20[9];
    *(_QWORD *)(v6 + 24) = v23;
    *(_QWORD *)(v6 + 32) = v20 + 9;
    v23[1] = v22;
    v20[9] = (uint64_t *)v22;
  }
  llvm::Value::setName((uint64_t ***)v6, (uint64_t)v26);
  sub_1C4E5D0EC(v5, &v28)[1] = v6;
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(*(_QWORD *)(v4 + 8), v6, *(_QWORD *)a1[2]);
  v24 = **(_QWORD ***)(v4 + 16);
  if (v24)
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v24, v6, *(_QWORD *)v4);
  return v6;
}

void *sub_1C5B4C744(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  _BYTE v17[31];
  uint64_t v18;
  uint64_t v19;

  if (a2 != a3)
  {
    v18 = v3;
    v19 = v4;
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = (uint64_t)result + 72;
    v9 = (uint64_t)result + 88;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40);
      result = sub_1C5B4C82C(v7, &v16, (uint64_t)v17);
      if (v17[16])
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40);
        v11 = *(unsigned int *)(v7 + 80);
        if (v11 >= *(unsigned int *)(v7 + 84))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v9, v11 + 1, 8);
          v11 = *(unsigned int *)(v7 + 80);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8 * v11) = v10;
        ++*(_DWORD *)(v7 + 80);
      }
      do
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          break;
        v12 = *(_QWORD *)(v6 + 24);
        v13 = *(unsigned __int8 *)(v12 + 16);
        v14 = v12 && v13 >= 0x1C;
      }
      while (!v14 || v13 - 29 > 0xA);
    }
    while (v6 != a3);
  }
  return result;
}

_QWORD *sub_1C5B4C82C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v7 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 8;
    v9 = a1 + 8;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      v19 = 0;
      goto LABEL_17;
    }
    v9 = *(_QWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  result = (_QWORD *)(v9 + 8 * v11);
  v13 = *result;
  if (*a2 == *result)
  {
LABEL_12:
    if ((v6 & 1) != 0)
    {
      v18 = 8;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)(a1 + 16);
    }
    v22 = 0;
    v21 = v7 + 8 * v18;
    goto LABEL_20;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = result;
    v17 = v11 + v15++;
    v11 = v17 & v10;
    result = (_QWORD *)(v9 + 8 * v11);
    v13 = *result;
    if (*a2 == *result)
      goto LABEL_12;
  }
  if (v14)
    v19 = v14;
  else
    v19 = result;
LABEL_17:
  result = sub_1C509FCAC(a1, (uint64_t)a2, a2, v19);
  *result = *a2;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v20 = 8;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v20 = *(unsigned int *)(a1 + 16);
  }
  v21 = v7 + 8 * v20;
  v22 = 1;
LABEL_20:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

uint64_t sub_1C5B4C94C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6319734(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6319734(a1, v14, v8);
}

uint64_t sub_1C5B4CAB4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6319A18(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6319A18(a1, v14, v9);
}

void sub_1C5B4CC38(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &off_1E81951C8;
  v3 = (unsigned __int8 *)a1[10];
  v1 = (uint64_t)(a1 + 10);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5B4CC80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL8 result;
  int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a2 - 32);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = v3 + 8;
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v5 = *(_DWORD *)(v3 + 16);
    if (!v5)
      return 0;
    v4 = *(_QWORD *)(v3 + 8);
  }
  v6 = v5 - 1;
  v7 = v6 & ((v2 >> 4) ^ (v2 >> 9));
  v8 = *(_QWORD *)(v4 + 8 * v7);
  if (v8 == v2)
    return 1;
  v10 = 1;
  do
  {
    result = v8 != -4096;
    if (v8 == -4096)
      break;
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v8 = *(_QWORD *)(v4 + 8 * v7);
  }
  while (v8 != v2);
  return result;
}

char **sub_1C5B4CD00(char **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t **v6;
  llvm::UndefValue *ValueInMiddleOfBlock;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::Instruction *v10;
  char *v11;
  llvm::Instruction *v12;
  __int16 v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  llvm::BasicBlock **v17;
  uint64_t **v18;
  llvm::BasicBlock *v19;
  char *MemoryAccessAfter;
  unsigned __int8 *v21;

  if (*((_BYTE *)result + 136))
  {
    v1 = (uint64_t)result;
    v2 = *((unsigned int *)result[4] + 2);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = result + 12;
      v5 = 8 * v2;
      do
      {
        v6 = *(uint64_t ***)(**(_QWORD **)(v1 + 32) + v3);
        ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock(*(llvm::UndefValue ***)(v1 + 8), v6);
        v8 = sub_1C5B4D000(v1, (uint64_t)ValueInMiddleOfBlock, (uint64_t)v6);
        v9 = sub_1C5B4D000(v1, *(_QWORD *)(v1 + 16), (uint64_t)v6);
        v10 = *(llvm::Instruction **)(**(_QWORD **)(v1 + 40) + v3);
        v11 = (char *)operator new(0x80uLL);
        *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
        v12 = (llvm::Instruction *)(v11 + 64);
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
        *((_QWORD *)v11 + 3) = v11 + 64;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 5) = 0;
        *((_QWORD *)v11 + 6) = 0;
        *((_QWORD *)v11 + 7) = v11 + 64;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v11 + 64), v8, v9, 0, v10);
        if (*(_BYTE *)(v1 + 89))
          v13 = *((_WORD *)v11 + 41) & 0xFC01 | 0x80;
        else
          v13 = *((_WORD *)v11 + 41);
        *((_WORD *)v11 + 41) = v13 & 0xFF81 | (2 * *(unsigned __int8 *)(v1 + 88));
        v14 = *(unsigned __int8 **)(v1 + 80);
        v21 = v14;
        if (v14)
          llvm::MetadataTracking::track((uint64_t)&v21, v14, 2);
        v15 = (unsigned __int8 *)*((_QWORD *)v11 + 14);
        if (v15)
          llvm::MetadataTracking::untrack((uint64_t)(v11 + 112), v15);
        v16 = v21;
        *((_QWORD *)v11 + 14) = v21;
        if (v16)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v21, v16, (uint64_t)(v11 + 112));
          v21 = 0;
        }
        if (*v4 || *(_QWORD *)(v1 + 104) || *(_QWORD *)(v1 + 112) || *(_QWORD *)(v1 + 120))
          llvm::Instruction::setAAMetadata(v12, (llvm::MDNode **)(v1 + 96));
        v17 = *(llvm::BasicBlock ***)(**(_QWORD **)(v1 + 48) + v3);
        v18 = *(uint64_t ***)(v1 + 64);
        if (v17)
        {
          MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(*(uint64_t ***)(v1 + 64), v12, 0, v17);
        }
        else
        {
          v19 = (llvm::BasicBlock *)*((_QWORD *)v11 + 13);
          MemoryAccessAfter = llvm::MemorySSA::createDefinedAccess(*v18, (uint64_t)v12, 0, 0);
          llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v18, (uint64_t)MemoryAccessAfter, v19, 0);
        }
        *(_QWORD *)(**(_QWORD **)(v1 + 48) + v3) = MemoryAccessAfter;
        result = llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(v1 + 64), (llvm::MemoryDef *)MemoryAccessAfter, 1);
        v3 += 8;
      }
      while (v5 != v3);
    }
  }
  return result;
}

void sub_1C5B4CF20(uint64_t a1, const llvm::Instruction *a2)
{
  int32x2_t *v4;
  int32x2_t **v5;
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  uint64_t v9;
  const llvm::Instruction *v10;
  int v11;
  int v12;
  llvm::MemoryAccess *v13;

  v4 = *(int32x2_t **)(a1 + 128);
  llvm::InstructionPrecedenceTracking::removeInstruction(v4 + 5, a2);
  llvm::InstructionPrecedenceTracking::removeInstruction(v4 + 9, a2);
  v5 = *(int32x2_t ***)(a1 + 64);
  v6 = (*v5)[5].i32[0];
  if (v6)
  {
    v7 = (*v5)[3];
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(const llvm::Instruction **)(*(_QWORD *)&v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v13 = *(llvm::MemoryAccess **)(*(_QWORD *)&v7 + 16 * v9 + 8);
      if (v13)
        llvm::MemorySSAUpdater::removeMemoryAccess(v5, v13, 0);
    }
    else
    {
      v11 = 1;
      while (v10 != (const llvm::Instruction *)-4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(const llvm::Instruction **)(*(_QWORD *)&v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
}

BOOL sub_1C5B4CFDC(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) != 61 || *(_BYTE *)(a1 + 136) != 0;
}

llvm::Value *sub_1C5B4D000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  llvm::Value *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::ValueSymbolTable *v37;
  _QWORD v38[4];
  __int16 v39;

  v4 = a2;
  if (!llvm::LoopInfo::wouldBeOutOfLoopUseRequiringLCSSA(*(uint64_t **)(a1 + 72), a2, a3))
    return (llvm::Value *)v4;
  v6 = *(uint64_t ***)v4;
  v7 = sub_1C4ECA658(*(_QWORD *)(a1 + 56), a3);
  if ((*(_BYTE *)(v4 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_11;
  }
  v8 = ***(_QWORD ***)v4;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_9;
  LODWORD(v11) = (v10 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v12 = (uint64_t *)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != v4)
  {
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(_QWORD *)(v9 + 16 * v11);
      if (v13 == v4)
      {
        v12 = (uint64_t *)(v9 + 16 * v11);
        goto LABEL_10;
      }
    }
LABEL_9:
    v12 = (uint64_t *)(v9 + 16 * v10);
  }
LABEL_10:
  v16 = (_QWORD *)v12[1];
  v19 = *v16;
  v17 = (char *)(v16 + 2);
  v18 = v19;
LABEL_11:
  v39 = 773;
  v38[0] = v17;
  v38[1] = v18;
  v38[2] = ".lcssa";
  v20 = *(uint64_t **)(a3 + 48);
  v21 = operator new(0x48uLL);
  v22 = v21;
  v21[1] = v6;
  v23 = (llvm::Value *)(v21 + 1);
  *v21 = 0;
  v21[2] = 0;
  v21[3] = 0x4000000000000053;
  *((_OWORD *)v21 + 2) = 0u;
  v24 = (char *)(v21 + 4);
  *((_OWORD *)v21 + 3) = 0u;
  *((_DWORD *)v21 + 16) = 0;
  if (v20)
  {
    v34 = v20[2];
    v21[6] = v34;
    *(_WORD *)(v34 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v21 + 31) & 0x10) != 0)
    {
      v36 = *(_QWORD *)(v34 + 56);
      if (v36)
      {
        v37 = *(llvm::ValueSymbolTable **)(v36 + 104);
        if (v37)
          llvm::ValueSymbolTable::reinsertValue(v37, v23);
      }
    }
    v35 = *v20;
    v22[4] = *v20;
    v22[5] = v20;
    *(_QWORD *)(v35 + 8) = v24;
    *v20 = (uint64_t)v24;
  }
  *((_DWORD *)v22 + 17) = v7;
  llvm::Value::setName((uint64_t ***)v23, (uint64_t)v38);
  v25 = *((unsigned int *)v22 + 17);
  v26 = operator new(40 * v25);
  *v22 = v26;
  if ((_DWORD)v25)
  {
    v27 = &v26[4 * v25];
    do
    {
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = v23;
      v26 += 4;
    }
    while (v26 != v27);
  }
  v28 = *(_QWORD *)(a1 + 56);
  v29 = (uint64_t *)sub_1C4ECA3D4(v28, a3);
  v30 = sub_1C4ECA658(v28, a3);
  if (v30)
  {
    v31 = 8 * v30;
    do
    {
      v32 = *v29++;
      sub_1C477667C(v23, v4, v32);
      v31 -= 8;
    }
    while (v31);
  }
  return v23;
}

uint64_t sub_1C5B4D220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 88);
  if (!(_DWORD)v3)
    return 0;
  v6 = *(_QWORD *)(a2 + 72);
  LODWORD(v7) = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v8 = (uint64_t *)(v6 + 16 * v7);
  v9 = *v8;
  if (*v8 != a1)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v3 - 1);
      v9 = *(_QWORD *)(v6 + 16 * v7);
      if (v9 == a1)
      {
        v8 = (uint64_t *)(v6 + 16 * v7);
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if (v8 == (uint64_t *)(v6 + 16 * v3))
    return 0;
  v12 = v8[1];
  if (!v12)
    return 0;
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 == v12)
    return 0;
  while (1)
  {
    v14 = v13 - 48;
    if (!v13)
      v14 = 0;
    v15 = *(unsigned __int8 *)(v14 + 16);
    v16 = v15 == 26 ? v14 : 0;
    if (v13
      && v15 == 26
      && (*(_QWORD *)(a3 + 64) != *(_QWORD *)(v16 + 64) || !llvm::MemorySSA::locallyDominates(a2, v16, a3)))
    {
      break;
    }
    result = 0;
    v13 = *(_QWORD *)(v13 + 8);
    if (v13 == v12)
      return result;
  }
  return 1;
}

_QWORD *sub_1C5B4D320@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  result = (_QWORD *)sub_1C5B2603C(a1, a2, &v17);
  v9 = v17;
  if ((_DWORD)result)
  {
    v15 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v16 = 4;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(unsigned int *)(a1 + 16);
    }
    v14 = 0;
    v13 = v15 + 16 * v16;
  }
  else
  {
    result = sub_1C5B4D3E0((_DWORD *)a1, (uint64_t)a2, a2, v17);
    v9 = result;
    v10 = *a3;
    *result = *a2;
    result[1] = v10;
    v11 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16);
    }
    v13 = v11 + 16 * v12;
    v14 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

_QWORD *sub_1C5B4D3E0(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C5B4D4A0((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5B2603C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5B4D4A0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5B4D618(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5B4D618(a1, v14, v9);
}

uint64_t sub_1C5B4D618(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5B2603C((uint64_t)v5, a2, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5B4D6D4()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v3 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable memory promotion in LICM pass";
  v1.n128_u64[1] = 37;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81E030, "disable-licm-promotion", &v3, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81E030, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v2) = 0;
  v4 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable control flow (and PHI) hoisting in LICM";
  v1.n128_u64[1] = 46;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81E0F0, "licm-control-flow-hoisting", &v3, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81E0F0, &dword_1C475E000);
  v2 = 4;
  v3 = 1;
  v4 = &v2;
  v1.n128_u64[0] = (unint64_t)"Relative coldness Threshold of hoisting/sinking destination block for LICM to be co"
                                     "nsidered beneficial";
  v1.n128_u64[1] = 102;
  sub_1C61798D0((uint64_t)&unk_1ED81E1B0, "licm-coldness-threshold", &v3, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81E1B0, &dword_1C475E000);
  v2 = 8;
  v3 = 1;
  v4 = &v2;
  v1.n128_u64[0] = (unint64_t)"Max num uses visited for identifying load invariance in loop using invariant start (default = 8)";
  v1.n128_u64[1] = 96;
  sub_1C61798D0((uint64_t)&unk_1ED81E270, "licm-max-num-uses-traversed", &v3, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81E270, &dword_1C475E000);
  v2 = 1;
  v3 = 100;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Enable imprecision in LICM in pathological cases, in exchange for faster compile. C"
                                     "aps the MemorySSA clobbering calls.";
  v1.n128_u64[1] = 118;
  sub_1C4DB1928((uint64_t)&llvm::SetLicmMssaOptCap, "licm-mssa-optimization-cap", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::SetLicmMssaOptCap, &dword_1C475E000);
  v2 = 1;
  v3 = 250;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"[LICM & MemorySSA] When MSSA in LICM is disabled, this has no effect. When MSSA in "
                                     "LICM is enabled, then this is the maximum number of accesses allowed to be present "
                                     "in a loop in order to enable memory promotion.";
  v1.n128_u64[1] = 212;
  sub_1C4DB1928((uint64_t)&llvm::SetLicmMssaNoAccForPromotionCap, "licm-mssa-max-acc-promotion", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::SetLicmMssaNoAccForPromotionCap, &dword_1C475E000);
}

_QWORD *llvm::LoopBoundSplitPass::run@<X0>(llvm::Loop *this@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  const llvm::DominatorTree *v5;
  llvm::ScalarEvolution *v6;
  uint64_t v7;
  uint64_t ExitingBlock;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  llvm::SCEV *v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::SCEV *v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::SCEV *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *(const llvm::DominatorTree **)(a2 + 16);
  v6 = *(llvm::ScalarEvolution **)(a2 + 32);
  v30[0] = 0;
  v30[1] = 0;
  v31 = 42;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 42;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 4) + 56) + 112);
  if ((!v7 || (*(_BYTE *)(v7 + 17) & 4) == 0 && (*(char *)(v7 + 13) & 0x80000000) == 0)
    && *((_QWORD *)this + 1) == *((_QWORD *)this + 2))
  {
    if (llvm::Loop::isLoopSimplifyForm(this))
    {
      if (llvm::Loop::isLCSSAForm(this, v5))
      {
        if (llvm::Loop::isSafeToClone(this))
        {
          ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(this);
          if (ExitingBlock)
          {
            v10 = *(_QWORD *)(ExitingBlock + 40);
            if (v10 != ExitingBlock + 40)
            {
              v11 = v10 ? v10 - 24 : 0;
              v12 = *(unsigned __int8 *)(v11 + 16) - 40;
              v13 = v12 >= 0xFFFFFFF5 ? v11 : 0;
              if (v10)
              {
                if (*(_BYTE *)(v13 + 16) == 30
                  && v12 >= 0xFFFFFFF5
                  && sub_1C5B4F204(v13)
                  && sub_1C5B4F27C((const llvm::BasicBlock ***)this, v6, *(_QWORD *)(v13 - 96), (uint64_t)v24, 1))
                {
                  v24[0] = v13;
                  v15 = (uint64_t *)*((_QWORD *)this + 4);
                  v16 = (uint64_t *)*((_QWORD *)this + 5);
                  if (v16 != v15)
                  {
                    v23 = v29;
                    do
                    {
                      v17 = *v15;
                      if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)this) != v17)
                      {
                        v18 = *(_QWORD *)(v17 + 40);
                        if (v18 != v17 + 40)
                        {
                          v19 = v18 ? v18 - 24 : 0;
                          v20 = *(unsigned __int8 *)(v19 + 16) - 40;
                          v21 = v20 >= 0xFFFFFFF5 ? v19 : 0;
                          if (v18)
                          {
                            v22 = *(_BYTE *)(v21 + 16) == 30 && v20 >= 0xFFFFFFF5;
                            if (v22
                              && sub_1C5B4F204(v21)
                              && !llvm::Loop::isLoopInvariant((uint64_t)this, *(_QWORD *)(v21 - 96))
                              && sub_1C5B4F27C((const llvm::BasicBlock ***)this, v6, *(_QWORD *)(v21 - 96), (uint64_t)v30, 0))
                            {
                              __asm { BR              X10 }
                            }
                          }
                        }
                      }
                      ++v15;
                    }
                    while (v15 != v16);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void sub_1C5B4F098()
{
  JUMPOUT(0x1C5B4E618);
}

BOOL sub_1C5B4F204(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFF) != 3)
      return 0;
    result = 0;
    v2 = *(_QWORD *)(v1 - 96);
    if (!v2 || *(_BYTE *)(v2 + 16) != 81)
      return result;
    v3 = *(_QWORD *)(v2 - 64);
    if (!v3)
      return 0;
    if (!*(_QWORD *)(v2 - 32))
      return 0;
    v4 = *(_QWORD *)(v1 - 32);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v1 - 64);
    if (!v5)
      return 0;
    return (*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFD) == 0xD && v4 != v5;
  }
  return result;
}

BOOL sub_1C5B4F27C(const llvm::BasicBlock ***a1, llvm::ScalarEvolution *this, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t SCEVIter;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t LoopLatch;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _BOOL8 result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::APInt *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t ExitCount;

  *(_QWORD *)(a4 + 8) = a3;
  if (!a3)
    goto LABEL_48;
  v9 = *(_QWORD *)(a3 - 64);
  if (!v9)
    goto LABEL_48;
  *(_QWORD *)(a4 + 24) = v9;
  v10 = *(_QWORD *)(a3 - 32);
  if (!v10)
    goto LABEL_48;
  *(_QWORD *)(a4 + 40) = v10;
  *(_DWORD *)(a4 + 16) = *(_WORD *)(a3 + 18) & 0x3F;
  v11 = *((_QWORD *)this + 13);
  v12 = *((_DWORD *)this + 30);
  if (!v12)
    goto LABEL_10;
  v13 = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  v14 = v11 + 48 * v13;
  v15 = *(_QWORD *)(v14 + 24);
  if (v15 != v9)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = v11 + 48 * v13;
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 == v9)
        goto LABEL_11;
    }
LABEL_10:
    v14 = v11 + 48 * v12;
  }
LABEL_11:
  if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v9);
    v10 = *(_QWORD *)(a4 + 40);
    v11 = *((_QWORD *)this + 13);
    v12 = *((_DWORD *)this + 30);
    if (!v12)
      goto LABEL_20;
  }
  else if (!v12)
  {
    goto LABEL_20;
  }
  v19 = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
  v20 = v11 + 48 * v19;
  v21 = *(_QWORD *)(v20 + 24);
  if (v21 == v10)
    goto LABEL_21;
  v22 = 1;
  while (v21 != -4096)
  {
    v23 = v19 + v22++;
    v19 = v23 & (v12 - 1);
    v20 = v11 + 48 * v19;
    v21 = *(_QWORD *)(v20 + 24);
    if (v21 == v10)
      goto LABEL_21;
  }
LABEL_20:
  v20 = v11 + 48 * v12;
LABEL_21:
  if (v20 == v11 + 48 * v12 || (v24 = *(_QWORD *)(v20 + 40)) == 0)
    v24 = llvm::ScalarEvolution::createSCEVIter(this, v10);
  v25 = *(unsigned __int16 *)(SCEVIter + 24);
  if (SCEVIter)
    v26 = v25 == 7;
  else
    v26 = 0;
  v27 = *(_QWORD *)(a4 + 24);
  if (!v26 && (v24 ? (v28 = *(unsigned __int16 *)(v24 + 24) == 7) : (v28 = 0), v28))
  {
    v29 = *(_QWORD *)(a4 + 40);
    *(_QWORD *)(a4 + 24) = v29;
    *(_QWORD *)(a4 + 40) = v27;
    *(_DWORD *)(a4 + 16) = dword_1C86697CC[*(int *)(a4 + 16)];
    v30 = SCEVIter;
    v27 = v29;
  }
  else
  {
    if (v25 != 7)
    {
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = v24;
      *(_QWORD *)(a4 + 32) = v27;
      goto LABEL_48;
    }
    v30 = v24;
    v24 = SCEVIter;
  }
  *(_QWORD *)(a4 + 48) = v24;
  *(_QWORD *)(a4 + 56) = v30;
  *(_QWORD *)(a4 + 32) = v27;
  if (*(_BYTE *)(v27 + 16) == 83)
  {
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
    v32 = *(_DWORD *)(v27 + 20);
    v33 = v32 & 0x7FFFFFF;
    if ((v32 & 0x7FFFFFF) != 0)
    {
      v34 = 0;
      while (1)
      {
        v35 = v27 - 32 * v33;
        if ((v32 & 0x40000000) != 0)
          v35 = *(_QWORD *)(v27 - 8);
        if (*(_QWORD *)(v35 + 32 * *(unsigned int *)(v27 + 60) + 8 * v34) == LoopLatch)
          break;
        if (v33 == ++v34)
          goto LABEL_43;
      }
    }
    else
    {
LABEL_43:
      LODWORD(v34) = -1;
    }
    if ((v32 & 0x40000000) != 0)
      v36 = *(_QWORD *)(v27 - 8);
    else
      v36 = v27 - 32 * v33;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v36 + 32 * v34);
  }
LABEL_48:
  v37 = (uint64_t *)(a4 + 56);
  result = llvm::ScalarEvolution::isAvailableAtLoopEntry(this, *(const llvm::SCEV **)(a4 + 56), a1);
  if (!result)
    return result;
  v39 = *(_QWORD *)(a4 + 48);
  if (!v39)
    return 0;
  if (*(_QWORD *)(v39 + 40) != 2)
    return 0;
  v40 = *(_QWORD *)(*(_QWORD *)(v39 + 32) + 8);
  if (*(_WORD *)(v40 + 24))
    return 0;
  v41 = *(_QWORD *)(v40 + 32);
  v42 = (llvm::APInt *)(v41 + 24);
  v43 = *(_DWORD *)(v41 + 32);
  v44 = v43 - 1;
  if (v43 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)v42 + 8 * (v44 >> 6)) >> v44) & 1) != 0
      || llvm::APInt::countLeadingZerosSlowCase(v42) == v43)
    {
      return 0;
    }
  }
  else
  {
    v45 = *(_QWORD *)v42 & (1 << v44);
    if (*(_QWORD *)v42)
      v46 = v45 == 0;
    else
      v46 = 0;
    if (!v46)
      return 0;
  }
  if (!a5)
  {
    result = 1;
    switch(*(_DWORD *)(a4 + 16))
    {
      case '$':
      case '(':
        return result;
      case '%':
      case ')':
        __asm { BR              X12 }
        return result;
      default:
        return 0;
    }
  }
  ExitCount = llvm::ScalarEvolution::getExitCount(this, (const llvm::Loop *)a1, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40), 0);
  result = 0;
  if (*(_WORD *)(ExitCount + 24) != 15)
  {
    *v37 = ExitCount;
    return 1;
  }
  return result;
}

void llvm::LoopSinkPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  uint64_t *v7;
  llvm::Instruction *v8;
  llvm::AAResults *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  llvm::DominatorTree *v14;
  uint64_t LoopPredecessor;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[24];
  void *v20;
  unsigned int v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  if (*(_QWORD *)(ResultImpl + 32) == *(_QWORD *)(ResultImpl + 40))
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    v7 = (uint64_t *)(ResultImpl + 8);
    v8 = (llvm::Instruction *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8);
    v9 = (llvm::AAResults *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1)+ 8);
    v10 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, a1)
                    + 8);
    v11 = *(uint64_t **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::MemorySSAAnalysis::Key, a1) + 8);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder((uint64_t)v7, (uint64_t)&v20);
    v12 = 0;
    v13 = v21;
    do
    {
      v14 = (llvm::DominatorTree *)*((_QWORD *)v20 + v13 - 1);
      v21 = v13 - 1;
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v14);
      if (LoopPredecessor)
      {
        v16 = *(_QWORD *)(LoopPredecessor + 40);
        if (v16 != LoopPredecessor + 40)
        {
          if (v16)
            v17 = v16 - 24;
          else
            v17 = 0;
          if (*(_BYTE *)(v17 + 16) != 30)
          {
            switch(*(_BYTE *)(v17 + 16))
            {
              case 0x1E:
                __break(1u);
                return;
              case 0x1F:
                v18 = (*(_DWORD *)(v17 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_16;
              case 0x20:
                v18 = (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_16;
              case 0x27:
                v18 = *(_DWORD *)(v17 + 80) + 1;
LABEL_16:
                if (v18 != 1)
                  goto LABEL_12;
                goto LABEL_10;
              default:
                goto LABEL_12;
            }
          }
          if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) != 3)
          {
LABEL_10:
            llvm::Function::getEntryCount(*(uint64_t ****)(LoopPredecessor + 56), 0, (uint64_t)v19);
            if (v19[16])
              v12 |= sub_1C5B4FB38(v14, v8, v7, v9, v10, v11, 0);
          }
        }
      }
LABEL_12:
      v13 = v21;
    }
    while (v21);
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    if ((v12 & 1) != 0)
    {
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
      sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    }
    else
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    }
    if (v20 != v22)
      free(v20);
  }
}

uint64_t sub_1C5B4FB38(llvm::DominatorTree *a1, llvm::Instruction *a2, uint64_t *a3, llvm::AAResults *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t LoopPredecessor;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t BlockFreq;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t i;
  uint64_t **v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  const std::nothrow_t *v42;
  unint64_t v43;
  uint64_t *v44;
  BOOL v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  llvm::Instruction *v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  llvm::DominatorTree *v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  llvm::Instruction *v129;
  llvm::BasicBlock **v130;
  llvm::BasicBlock *v131;
  llvm::Instruction *v132;
  uint64_t ***v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  llvm::Instruction **v139;
  llvm::Instruction *v140;
  int v141;
  int v142;
  llvm::Instruction *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  llvm::Value *v149;
  _QWORD *v150;
  unsigned int v151;
  uint64_t v152;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  llvm::Value *v162;
  int v163;
  int v164;
  char *DefinedAccess;
  uint64_t v166;
  llvm::ValueSymbolTable *v167;
  const llvm::BasicBlock *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  unsigned int v172;
  uint64_t v173;
  llvm::Instruction *v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  llvm *v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  char *v186;
  int v187;
  unsigned int v188;
  char *v189;
  uint64_t *v191;
  llvm::OptimizationRemarkEmitter *v192;
  llvm::BasicBlock *v193;
  unsigned int v194;
  uint64_t *v195;
  unsigned int v196;
  uint64_t v197;
  llvm::Instruction *v198;
  uint64_t *v199;
  _QWORD *v200;
  int v201;
  llvm *v202;
  llvm::Value *v203;
  _BYTE v204[20];
  char *v205;
  char *v206;
  uint64_t v207;
  int v208;
  _BYTE v209[16];
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  int v213;
  _BYTE v214[16];
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  _WORD v219[8];
  _QWORD v220[33];
  uint64_t *v221;
  uint64_t v222;
  _BYTE v223[80];
  uint64_t *v224;
  char *v225[2];
  uint64_t v226;
  _BYTE *v227;
  _BYTE *v228;
  uint64_t v229;
  int v230;
  _BYTE v231[64];
  _BYTE *v232;
  uint64_t v233;
  _BYTE v234[64];
  _QWORD **v235;
  _QWORD *v236[2];
  uint64_t *v237;
  uint64_t v238;
  _QWORD v239[4];

  v239[2] = *MEMORY[0x1E0C80C00];
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
  if (!LoopPredecessor)
    goto LABEL_8;
  v15 = *(_QWORD *)(LoopPredecessor + 40);
  if (v15 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v15)
    v16 = v15 - 24;
  else
    v16 = 0;
  if (*(_BYTE *)(v16 + 16) != 30)
  {
    v17 = 0;
    switch(*(_BYTE *)(v16 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_13;
      case 0x1E:
LABEL_321:
        __break(1u);
        goto LABEL_322;
      case 0x1F:
        v18 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_11;
      case 0x20:
        v18 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_11;
      case 0x27:
        v18 = *(_DWORD *)(v16 + 80) + 1;
LABEL_11:
        if (v18 == 1)
          goto LABEL_12;
        goto LABEL_8;
      default:
        goto LABEL_8;
    }
  }
  if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 3)
LABEL_8:
    v17 = 0;
  else
LABEL_12:
    v17 = LoopPredecessor;
LABEL_13:
  v198 = a2;
  v199 = a3;
  v19 = v17;
  BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(a5, v17);
  v21 = (uint64_t *)*((_QWORD *)a1 + 4);
  v22 = *((_QWORD *)a1 + 5) - (_QWORD)v21;
  if (!v22)
  {
LABEL_17:
    LOBYTE(v25) = 0;
    return v25 & 1;
  }
  v23 = BlockFreq;
  v24 = 8 * (v22 >> 3);
  while (llvm::BlockFrequencyInfo::getBlockFreq(a5, *v21) > v23)
  {
    ++v21;
    v24 -= 8;
    if (!v24)
      goto LABEL_17;
  }
  v224 = a6;
  v225[0] = (char *)&v226;
  v225[1] = (char *)0x1000000000;
  v227 = v231;
  v228 = v231;
  v229 = 8;
  v230 = 0;
  v232 = v234;
  v233 = 0x800000000;
  v236[1] = 0;
  v236[0] = 0;
  v235 = v236;
  llvm::SinkAndHoistLICMFlags::SinkAndHoistLICMFlags((uint64_t)v204, dword_1ED835F90, dword_1ED836050, 1, (uint64_t)a1, (uint64_t)a6);
  v26 = (uint64_t *)v223;
  v221 = (uint64_t *)v223;
  v222 = 0xA00000000;
  v220[0] = 1;
  for (i = 1; i != 33; i += 2)
    v220[i] = -4096;
  v197 = a7;
  v28 = (uint64_t **)*((_QWORD *)a1 + 4);
  v29 = *((_QWORD *)a1 + 5) - (_QWORD)v28;
  v203 = a4;
  if (!v29)
  {
    v40 = 0;
    v215 = a5;
    v41 = (uint64_t *)v223;
    goto LABEL_48;
  }
  v30 = 0;
  v31 = 8 * (v29 >> 3);
  do
  {
    v32 = *v28;
    v215 = v32;
    v33 = llvm::BlockFrequencyInfo::getBlockFreq(a5, (uint64_t)v32);
    v34 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
    if (!v34)
      goto LABEL_29;
    v35 = *(_QWORD *)(v34 + 40);
    if (v35 == v34 + 40)
      goto LABEL_29;
    if (v35)
      v36 = v35 - 24;
    else
      v36 = 0;
    if (*(_BYTE *)(v36 + 16) != 30)
    {
      v37 = 0;
      switch(*(_BYTE *)(v36 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_34;
        case 0x1E:
          goto LABEL_321;
        case 0x1F:
          v38 = (*(_DWORD *)(v36 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_32;
        case 0x20:
          v38 = (*(_DWORD *)(v36 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_32;
        case 0x27:
          v38 = *(_DWORD *)(v36 + 80) + 1;
LABEL_32:
          if (v38 == 1)
            goto LABEL_33;
          goto LABEL_29;
        default:
          goto LABEL_29;
      }
    }
    if ((*(_DWORD *)(v36 + 20) & 0x7FFFFFF) == 3)
LABEL_29:
      v37 = 0;
    else
LABEL_33:
      v37 = v34;
LABEL_34:
    if (v33 < llvm::BlockFrequencyInfo::getBlockFreq(a5, v37))
    {
      v39 = v222;
      if (v222 >= (unint64_t)HIDWORD(v222))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v221, (uint64_t)v223, v222 + 1, 8);
        v39 = v222;
      }
      v221[v39] = (uint64_t)v32;
      LODWORD(v222) = v222 + 1;
      *((_DWORD *)sub_1C6319DDC(v220, (uint64_t *)&v215) + 2) = ++v30;
    }
    ++v28;
    v31 -= 8;
  }
  while (v31);
  v26 = v221;
  v40 = v222;
  v41 = &v221[v222];
  v215 = a5;
  if (v222 < 0x81)
  {
LABEL_46:
    a4 = v203;
LABEL_48:
    sub_1C5B50E80(v26, v41, &v215, v40, 0, 0);
    goto LABEL_49;
  }
  v42 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v43 = v222;
  while (1)
  {
    v44 = (uint64_t *)operator new(8 * v43, v42);
    if (v44)
      break;
    v45 = v43 > 1;
    v43 >>= 1;
    if (!v45)
      goto LABEL_46;
  }
  v191 = v44;
  sub_1C5B50E80(v26, v41, &v215, v40, v44, v43);
  operator delete(v191);
  a4 = v203;
LABEL_49:
  v48 = *(_QWORD **)(v19 + 40);
  v47 = (_QWORD *)(v19 + 40);
  v46 = v48;
  v50 = v198;
  v49 = v199;
  v51 = v197;
  v25 = 0;
  if (v48 != v47)
  {
    v200 = v47;
    while (1)
    {
      v52 = (_QWORD *)*v46;
      if (*((_BYTE *)v46 - 8) != 83)
      {
        v202 = (llvm *)(v46 - 3);
        if (llvm::canSinkOrHoistInst((llvm *)(v46 - 3), v50, a4, a1, (llvm::Loop *)&v224, 0, (uint64_t)v204, 0, v192))break;
      }
LABEL_198:
      v46 = v52;
      if (v52 == v47)
      {
        if (((v51 != 0) & v25) != 0)
        {
          sub_1C4F3333C((_DWORD *)(v51 + 688));
          LOBYTE(v25) = 1;
        }
        goto LABEL_310;
      }
    }
    v201 = v25;
    v53 = v214;
    v210 = v214;
    v211 = v214;
    v212 = 2;
    v213 = 0;
    v54 = *(v46 - 2);
    if (v54)
    {
      v55 = v214;
      do
      {
        v56 = *(_QWORD *)(v54 + 24);
        if (*(_BYTE *)(v56 + 16) == 83)
          goto LABEL_70;
        v57 = *(_QWORD *)(v56 + 40);
        v58 = *((_DWORD *)v49 + 4);
        if (v58)
        {
          v59 = *v49;
          v60 = v58 - 1;
          v61 = ((v57 >> 4) ^ (v57 >> 9)) & (v58 - 1);
          v62 = *(_QWORD *)(*v49 + 16 * v61);
          if (v57 == v62)
          {
LABEL_61:
            v65 = *(llvm::DominatorTree **)(v59 + 16 * v61 + 8);
            goto LABEL_63;
          }
          v63 = 1;
          while (v62 != -4096)
          {
            v64 = v61 + v63++;
            v61 = v64 & v60;
            v62 = *(_QWORD *)(v59 + 16 * v61);
            if (v57 == v62)
              goto LABEL_61;
          }
        }
        v65 = 0;
        do
        {
          if (!v65)
            goto LABEL_70;
          v65 = *(llvm::DominatorTree **)v65;
LABEL_63:
          ;
        }
        while (v65 != a1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v210, v57);
        v55 = v210;
        v53 = v211;
        v54 = *(_QWORD *)(v54 + 8);
      }
      while (v54);
      v114 = v212;
      v113 = HIDWORD(v212);
      v115 = v213;
    }
    else
    {
      v115 = 0;
      v113 = 0;
      v114 = 2;
      v55 = v214;
    }
    if (v113 - v115 > dword_1ED81E480)
    {
LABEL_70:
      v66 = 0;
LABEL_195:
      if (v53 != v55)
        free(v53);
      v25 = v66 | v201;
      v47 = v200;
      goto LABEL_198;
    }
    v66 = 0;
    v205 = v209;
    v206 = v209;
    v207 = 2;
    v208 = 0;
    if (v113 == v115)
    {
LABEL_192:
      if (v206 != v205)
        free(v206);
      v55 = v210;
      v53 = v211;
      goto LABEL_195;
    }
    if (v53 == v55)
      v67 = v113;
    else
      v67 = v114;
    v68 = (uint64_t *)v53;
    if ((_DWORD)v67)
    {
      v69 = 8 * v67;
      v68 = (uint64_t *)v53;
      while ((unint64_t)*v68 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v68;
        v69 -= 8;
        if (!v69)
          goto LABEL_86;
      }
    }
    v70 = &v53[8 * v67];
    if (v68 != v70)
    {
      v71 = *v68;
LABEL_82:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v205, v71);
      v72 = (unint64_t *)(v68 + 1);
      while (v72 != v70)
      {
        v73 = *v72++;
        v71 = v73;
        if (v73 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v68 = (uint64_t *)(v72 - 1);
          goto LABEL_82;
        }
      }
    }
LABEL_86:
    v215 = (uint64_t *)v219;
    v216 = (uint64_t *)v219;
    v217 = 2;
    v218 = 0;
    if ((_DWORD)v222)
    {
      v74 = v221;
      v75 = &v221[v222];
      do
      {
        v76 = *v74;
        if (v216 != v215)
        {
          if (v217 >= 0x21 && 4 * (HIDWORD(v217) - v218) < v217)
          {
            free(v216);
            v97 = 1 << (33 - __clz(HIDWORD(v217) - v218 - 1));
            v45 = (HIDWORD(v217) - v218) > 0x10;
            v218 = 0;
            if (v45)
              v98 = v97;
            else
              v98 = 32;
            v217 = v98;
            v99 = (uint64_t *)malloc_type_malloc(8 * v98, 0x4065EBACuLL);
            if (!v99)
              goto LABEL_322;
            v216 = v99;
            memset(v99, 255, 8 * v217);
            goto LABEL_90;
          }
          memset(v216, 255, 8 * v217);
        }
        v218 = 0;
        HIDWORD(v217) = 0;
LABEL_90:
        if (v206 == v205)
          v77 = (uint64_t *)((char *)&v207 + 4);
        else
          v77 = &v207;
        v78 = *(unsigned int *)v77;
        if ((_DWORD)v78)
        {
          v79 = 8 * v78;
          v80 = (uint64_t *)v206;
          while ((unint64_t)*v80 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v80;
            v79 -= 8;
            if (!v79)
              goto LABEL_107;
          }
        }
        else
        {
          v80 = (uint64_t *)v206;
        }
        v81 = &v206[8 * v78];
        if (v80 != (uint64_t *)v81)
        {
          v82 = *v80;
LABEL_101:
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v203, v76, v82))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v215, v82);
          v83 = (unint64_t *)(v80 + 1);
          while (v83 != (unint64_t *)v81)
          {
            v84 = *v83++;
            v82 = v84;
            if (v84 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v80 = (uint64_t *)(v83 - 1);
              goto LABEL_101;
            }
          }
        }
LABEL_107:
        if (HIDWORD(v217) != v218)
        {
          v85 = sub_1C5B51848((uint64_t)&v215, a5);
          if (v85 > llvm::BlockFrequencyInfo::getBlockFreq(a5, v76))
          {
            if (v216 == v215)
              v86 = (uint64_t *)((char *)&v217 + 4);
            else
              v86 = &v217;
            v87 = *(unsigned int *)v86;
            if ((_DWORD)v87)
            {
              v88 = 8 * v87;
              v89 = v216;
              while ((unint64_t)*v89 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v89;
                v88 -= 8;
                if (!v88)
                  goto LABEL_135;
              }
            }
            else
            {
              v89 = v216;
            }
            v91 = &v216[v87];
            if (v89 != v91)
            {
              v92 = *v89;
LABEL_126:
              v93 = (char *)sub_1C477672C((uint64_t)&v205, v92);
              if (v206 == v205)
                v94 = (uint64_t *)((char *)&v207 + 4);
              else
                v94 = &v207;
              if (v93 != &v206[8 * *(unsigned int *)v94])
              {
                *(_QWORD *)v93 = -2;
                ++v208;
              }
              v95 = (unint64_t *)(v89 + 1);
              while (v95 != (unint64_t *)v91)
              {
                v96 = *v95++;
                v92 = v96;
                if (v96 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v89 = (uint64_t *)(v95 - 1);
                  goto LABEL_126;
                }
              }
            }
LABEL_135:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v205, v76);
          }
        }
        ++v74;
      }
      while (v74 != v75);
    }
    if (v206 == v205)
      v100 = HIDWORD(v207);
    else
      v100 = v207;
    v101 = (unint64_t *)v206;
    if ((_DWORD)v100)
    {
      v102 = 8 * v100;
      v101 = (unint64_t *)v206;
      while (*v101 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v101;
        v102 -= 8;
        if (!v102)
          goto LABEL_170;
      }
    }
    v103 = &v206[8 * v100];
    if (v101 != (unint64_t *)v103)
    {
      v104 = *v101 + 40;
      v105 = *(_QWORD *)(*v101 + 48);
      while (v105 != v104)
      {
        v106 = v105 - 24;
        if (!v105)
          v106 = 0;
        if (*(_BYTE *)(v106 + 16) == 83)
        {
          v105 = *(_QWORD *)(v105 + 8);
        }
        else
        {
          v107 = *(unsigned __int8 *)(v105 - 8) - 38;
          v45 = v107 > 0x38;
          v108 = (1 << v107) & 0x100060000000001;
          if (!v45 && v108 != 0)
            v105 = *(_QWORD *)(v105 + 8);
          if (v104 == v105)
            break;
          v110 = v101 + 1;
          do
          {
            if (v110 == (unint64_t *)v103)
              goto LABEL_170;
            v112 = *v110++;
            v111 = v112;
          }
          while (v112 > 0xFFFFFFFFFFFFFFFDLL);
          v104 = v111 + 40;
          v105 = *(_QWORD *)(v111 + 48);
          v101 = v110 - 1;
        }
      }
      if (v206 == v205)
        goto LABEL_169;
      if (v207 < 0x21 || 4 * (HIDWORD(v207) - v208) >= v207)
      {
        memset(v206, 255, 8 * v207);
LABEL_169:
        HIDWORD(v207) = 0;
        v208 = 0;
        goto LABEL_170;
      }
      free(v206);
      v187 = 1 << (33 - __clz(HIDWORD(v207) - v208 - 1));
      v45 = (HIDWORD(v207) - v208) > 0x10;
      HIDWORD(v207) = 0;
      v208 = 0;
      if (v45)
        v188 = v187;
      else
        v188 = 32;
      LODWORD(v207) = v188;
      v189 = (char *)malloc_type_malloc(8 * v188, 0x4065EBACuLL);
      if (!v189)
LABEL_322:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v206 = v189;
      memset(v189, 255, 8 * v207);
    }
LABEL_170:
    v116 = sub_1C5B51848((uint64_t)&v205, a5);
    v117 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a1);
    if (v117)
    {
      v118 = *(_QWORD *)(v117 + 40);
      v51 = v197;
      if (v118 == v117 + 40)
        goto LABEL_177;
      if (v118)
        v119 = v118 - 24;
      else
        v119 = 0;
      if (*(_BYTE *)(v119 + 16) != 30)
      {
        v120 = 0;
        switch(*(_BYTE *)(v119 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_182;
          case 0x1E:
            goto LABEL_321;
          case 0x1F:
            v121 = (*(_DWORD *)(v119 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_180;
          case 0x20:
            v121 = (*(_DWORD *)(v119 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_180;
          case 0x27:
            v121 = *(_DWORD *)(v119 + 80) + 1;
LABEL_180:
            if (v121 == 1)
              goto LABEL_181;
            goto LABEL_177;
          default:
            goto LABEL_177;
        }
      }
      if ((*(_DWORD *)(v119 + 20) & 0x7FFFFFF) == 3)
LABEL_177:
        v120 = 0;
      else
LABEL_181:
        v120 = v117;
    }
    else
    {
      v120 = 0;
      v51 = v197;
    }
LABEL_182:
    v45 = v116 > llvm::BlockFrequencyInfo::getBlockFreq(a5, v120);
    v50 = v198;
    v49 = v199;
    if (v45)
    {
      if (v206 != v205)
      {
        if (v207 >= 0x21 && 4 * (HIDWORD(v207) - v208) < v207)
        {
          free(v206);
          v184 = 1 << (33 - __clz(HIDWORD(v207) - v208 - 1));
          v45 = (HIDWORD(v207) - v208) > 0x10;
          HIDWORD(v207) = 0;
          v208 = 0;
          if (v45)
            v185 = v184;
          else
            v185 = 32;
          LODWORD(v207) = v185;
          v186 = (char *)malloc_type_malloc(8 * v185, 0x4065EBACuLL);
          if (!v186)
            goto LABEL_322;
          v206 = v186;
          memset(v186, 255, 8 * v207);
          goto LABEL_186;
        }
        memset(v206, 255, 8 * v207);
      }
      HIDWORD(v207) = 0;
      v208 = 0;
    }
LABEL_186:
    if (v216 != v215)
      free(v216);
    v122 = HIDWORD(v207) - v208;
    if (HIDWORD(v207) == v208)
      goto LABEL_191;
    if (v122 >= 2)
    {
      if (v122 > LODWORD(v220[0]) >> 1)
      {
LABEL_191:
        v66 = 0;
        a4 = v203;
        goto LABEL_192;
      }
      if (v206 == v205)
        v123 = HIDWORD(v207);
      else
        v123 = v207;
      if ((_DWORD)v123)
      {
        v126 = 8 * v123;
        v124 = (uint64_t *)v206;
        while ((unint64_t)*v124 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v124;
          v126 -= 8;
          if (!v126)
            goto LABEL_221;
        }
      }
      else
      {
        v124 = (uint64_t *)v206;
      }
      v125 = (uint64_t *)&v206[8 * v123];
      if (v124 != v125)
      {
        if (!sub_1C6184BF0((uint64_t)v220, *v124, &v215))
          goto LABEL_191;
        while (++v124 != v125)
        {
          if ((unint64_t)*v124 < 0xFFFFFFFFFFFFFFFELL && (sub_1C6184BF0((uint64_t)v220, *v124, &v215) & 1) == 0)
            goto LABEL_191;
        }
      }
    }
LABEL_221:
    v237 = v239;
    v238 = 0x200000000;
    sub_1C6319E40((unsigned int *)&v237, &v205);
    v215 = v220;
    v127 = 126 - 2 * __clz(v238);
    if ((_DWORD)v238)
      v128 = v127;
    else
      v128 = 0;
    sub_1C5B51B64((uint64_t)v237, &v237[v238], (uint64_t *)&v215, v128, 1);
    v129 = (llvm::Instruction *)(v46 - 3);
    a4 = v203;
    v193 = (llvm::BasicBlock *)*v237;
    v194 = v202 >> 4;
    if ((_DWORD)v238 == 1)
    {
LABEL_269:
      v169 = (_QWORD *)((char *)v193 + 40);
      v170 = (_QWORD *)*((_QWORD *)v193 + 6);
      if (v170 == (_QWORD *)((char *)v193 + 40))
      {
        v50 = v198;
        v49 = v199;
        v51 = v197;
      }
      else
      {
        v50 = v198;
        v49 = v199;
        v51 = v197;
        while (1)
        {
          v171 = v170 - 3;
          if (!v170)
            v171 = 0;
          if (*((_BYTE *)v171 + 16) != 83)
            break;
          v170 = (_QWORD *)v170[1];
          if (v170 == v169)
            goto LABEL_282;
        }
        v172 = *((unsigned __int8 *)v170 - 8) - 38;
        v45 = v172 > 0x38;
        v173 = (1 << v172) & 0x100060000000001;
        if (v45 || v173 == 0)
          v169 = v170;
        else
          v169 = (_QWORD *)v170[1];
      }
LABEL_282:
      if (v169)
        v175 = (llvm::Instruction *)(v169 - 3);
      else
        v175 = 0;
      llvm::Instruction::moveBefore(v129, v175);
      v176 = *((_DWORD *)v224 + 10);
      if (v176)
      {
        v177 = v224[3];
        v178 = v176 - 1;
        v179 = (v176 - 1) & (v194 ^ (v202 >> 9));
        v180 = *(llvm **)(v177 + 16 * v179);
        if (v202 == v180)
        {
LABEL_290:
          v183 = *(_QWORD *)(v177 + 16 * v179 + 8);
          if (v183)
            sub_1C4EE2FE8((uint64_t)&v224, v183, v193, 0);
        }
        else
        {
          v181 = 1;
          while (v180 != (llvm *)-4096)
          {
            v182 = v179 + v181++;
            v179 = v182 & v178;
            v180 = *(llvm **)(v177 + 16 * v179);
            if (v202 == v180)
              goto LABEL_290;
          }
        }
      }
      if (v237 != v239)
        free(v237);
      v66 = 1;
      goto LABEL_192;
    }
    v195 = &v237[v238];
    v130 = (llvm::BasicBlock **)(v237 + 1);
    v196 = v194 ^ (v202 >> 9);
    while (1)
    {
      v131 = *v130;
      v132 = v129;
      llvm::Instruction::clone(v129);
      v134 = (uint64_t)v133;
      if ((*((_BYTE *)v46 - 1) & 0x10) == 0)
      {
        v144 = 0;
        v145 = (uint64_t *)&byte_1C871356D;
        goto LABEL_235;
      }
      v135 = ***(_QWORD ***)v132;
      v136 = *(_QWORD *)(v135 + 152);
      v137 = *(unsigned int *)(v135 + 168);
      if (!(_DWORD)v137)
        goto LABEL_233;
      LODWORD(v138) = (v137 - 1) & v196;
      v139 = (llvm::Instruction **)(v136 + 16 * v138);
      v140 = *v139;
      if (*v139 != v132)
        break;
LABEL_234:
      v143 = v139[1];
      v146 = *(uint64_t **)v143;
      v145 = (uint64_t *)((char *)v143 + 16);
      v144 = v146;
LABEL_235:
      v219[0] = 261;
      v215 = v145;
      v216 = v144;
      llvm::Value::setName(v133, (uint64_t)&v215);
      v147 = (_QWORD *)((char *)v131 + 40);
      v148 = (_QWORD *)*((_QWORD *)v131 + 6);
      if (v148 == (_QWORD *)((char *)v131 + 40))
      {
        v149 = (llvm::Value *)(v46 - 3);
      }
      else
      {
        v149 = (llvm::Value *)(v46 - 3);
        while (1)
        {
          v150 = v148 - 3;
          if (!v148)
            v150 = 0;
          if (*((_BYTE *)v150 + 16) != 83)
            break;
          v148 = (_QWORD *)v148[1];
          if (v148 == v147)
            goto LABEL_248;
        }
        v151 = *((unsigned __int8 *)v148 - 8) - 38;
        v45 = v151 > 0x38;
        v152 = (1 << v151) & 0x100060000000001;
        if (v45 || v152 == 0)
          v147 = v148;
        else
          v147 = (_QWORD *)v148[1];
      }
LABEL_248:
      if (v147)
        v154 = v147 - 3;
      else
        v154 = 0;
      v155 = v154[5];
      *(_QWORD *)(v134 + 40) = v155;
      *(_WORD *)(v155 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v134 + 23) & 0x10) != 0)
      {
        v166 = *(_QWORD *)(v155 + 56);
        if (v166)
        {
          v167 = *(llvm::ValueSymbolTable **)(v166 + 104);
          if (v167)
          {
            llvm::ValueSymbolTable::reinsertValue(v167, (llvm::Value *)v134);
            v149 = (llvm::Value *)(v46 - 3);
          }
        }
      }
      v157 = v154[3];
      v156 = v154 + 3;
      *(_QWORD *)(v134 + 24) = v157;
      *(_QWORD *)(v134 + 32) = v156;
      *(_QWORD *)(v157 + 8) = v134 + 24;
      *v156 = v134 + 24;
      v158 = *((_DWORD *)v224 + 10);
      a4 = v203;
      if (v158)
      {
        v159 = v224[3];
        v160 = v158 - 1;
        v161 = (v158 - 1) & v196;
        v162 = *(llvm::Value **)(v159 + 16 * v161);
        if (v149 == v162)
        {
LABEL_257:
          if (*(_QWORD *)(v159 + 16 * v161 + 8))
          {
            DefinedAccess = llvm::MemorySSA::createDefinedAccess(v224, v134, 0, 0);
            llvm::MemorySSA::insertIntoListsForBlock((uint64_t)v224, (uint64_t)DefinedAccess, v131, 0);
            v149 = (llvm::Value *)(v46 - 3);
            if (DefinedAccess)
            {
              if (DefinedAccess[16] == 26)
                llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)&v224, (llvm::MemoryDef *)DefinedAccess, 1);
              else
                llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)&v224, (llvm::BasicBlock **)DefinedAccess, 1);
              v149 = (llvm::Value *)(v46 - 3);
            }
          }
        }
        else
        {
          v163 = 1;
          while (v162 != (llvm::Value *)-4096)
          {
            v164 = v161 + v163++;
            v161 = v164 & v160;
            v162 = *(llvm::Value **)(v159 + 16 * v161);
            if (v149 == v162)
              goto LABEL_257;
          }
        }
      }
      v215 = (uint64_t *)v131;
      llvm::Value::replaceUsesWithIf(v149, (llvm::Value *)v134, (unsigned int (*)(uint64_t, uint64_t))sub_1C5B52A98, (uint64_t)&v215);
      llvm::replaceDominatedUsesWith(v202, (llvm::Value *)v134, v203, v131, v168);
      v129 = (llvm::Instruction *)(v46 - 3);
      if (++v130 == (llvm::BasicBlock **)v195)
        goto LABEL_269;
    }
    v141 = 1;
    while (v140 != (llvm::Instruction *)-4096)
    {
      v142 = v138 + v141++;
      v138 = v142 & (v137 - 1);
      v140 = *(llvm::Instruction **)(v136 + 16 * v138);
      if (v140 == v132)
      {
        v139 = (llvm::Instruction **)(v136 + 16 * v138);
        goto LABEL_234;
      }
    }
LABEL_233:
    v139 = (llvm::Instruction **)(v136 + 16 * v137);
    goto LABEL_234;
  }
LABEL_310:
  if ((v220[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v220[1], 8);
  if (v221 != (uint64_t *)v223)
    free(v221);
  sub_1C61247C0((uint64_t)&v235, v236[0]);
  if (v232 != v234)
    free(v232);
  if (v228 != v227)
    free(v228);
  sub_1C4EE41F8(v225);
  return v25 & 1;
}

uint64_t sub_1C5B50D18(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v3);
  llvm::initializeMemorySSAWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Sink";
  *(_QWORD *)(v5 + 8) = 9;
  *(_QWORD *)(v5 + 16) = "loop-sink";
  *(_QWORD *)(v5 + 24) = 9;
  *(_QWORD *)(v5 + 32) = &unk_1ED81E330;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B52AB0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5B50DB8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81E330;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195218;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81E338);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B50D18;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81E338, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t *sub_1C5B50E80(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t BlockFreq;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *result;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *(a2 - 1));
      result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v9);
      if (BlockFreq < (unint64_t)result)
      {
        v11 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v25 = a5;
      v26 = a4 >> 1;
      v27 = &result[a4 >> 1];
      v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C5B51130(result, v27, a3, v28, a5);
        v29 = &v25[v26];
        result = sub_1C5B51130(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v25[a4];
        v31 = v29;
        while (v31 != v30)
        {
          v32 = v31;
          v33 = *v25;
          v34 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *v31);
          result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v33);
          if (v34 < (unint64_t)result)
            v35 = v32;
          else
            v35 = v25;
          v25 += v34 >= (unint64_t)result;
          v31 = &v32[v34 < (unint64_t)result];
          *v8++ = *v35;
          if (v25 == v29)
          {
            if (v31 != v30)
            {
              v36 = 0;
              if (v34 < (unint64_t)result)
                v37 = 1;
              else
                v37 = 2;
              v38 = &v32[v37 & 1];
              do
              {
                v8[v36] = v38[v36];
                ++v36;
              }
              while (&v38[v36] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          v39 = 0;
          do
          {
            v8[v39] = v25[v39];
            ++v39;
          }
          while (&v25[v39] != v29);
        }
      }
      else
      {
        sub_1C5B50E80(result, v27, a3, v28, a5, a6);
        sub_1C5B50E80(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_1C5B51388(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = result;
        do
        {
          v17 = *v15;
          v16 = v15[1];
          v15 = v13;
          v18 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, v16);
          result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v17);
          if (v18 < (unint64_t)result)
          {
            v19 = *v15;
            v20 = v14;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v20 + 8) = *(uint64_t *)((char *)v8 + v20);
              if (!v20)
                break;
              v21 = *(uint64_t *)((char *)v8 + v20 - 8);
              v22 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, v19);
              result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v21);
              v20 -= 8;
              if (v22 >= (unint64_t)result)
              {
                v23 = (uint64_t *)((char *)v8 + v20 + 8);
                goto LABEL_15;
              }
            }
            v23 = v8;
LABEL_15:
            *v23 = v19;
          }
          v13 = v15 + 1;
          v14 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C5B51130(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v11;
  unint64_t BlockFreq;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *result;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *(a2 - 1));
      result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v11);
      if (BlockFreq >= (unint64_t)result)
        v13 = v7;
      else
        v13 = v10;
      *v5++ = *v13;
      if (BlockFreq >= (unint64_t)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      sub_1C5B50E80(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1C5B50E80(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = v26;
        v28 = *v7;
        v29 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *v26);
        result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v28);
        if (v29 >= (unint64_t)result)
          v30 = v7;
        else
          v30 = v27;
        v26 = &v27[v29 < (unint64_t)result];
        v7 += v29 >= (unint64_t)result;
        *v5++ = *v30;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            v31 = 0;
            v32 = &v27[v29 < (unint64_t)result];
            do
            {
              v5[v31] = v32[v31];
              ++v31;
            }
            while (&v32[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v33 = 0;
        do
        {
          v5[v33] = v7[v33];
          ++v33;
        }
        while (&v7[v33] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v17 = v16;
          v18 = *v16++;
          v19 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *v14);
          result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v18);
          v20 = v16;
          if (v19 < (unint64_t)result)
          {
            v17[1] = *v17;
            v20 = v5;
            if (v17 != v5)
            {
              v21 = v15;
              while (1)
              {
                v20 = (uint64_t *)((char *)v5 + v21);
                v22 = *(uint64_t *)((char *)v5 + v21 - 8);
                v23 = llvm::BlockFrequencyInfo::getBlockFreq(*a3, *v14);
                result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a3, v22);
                if (v23 >= (unint64_t)result)
                  break;
                *v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  v20 = v5;
                  break;
                }
              }
            }
          }
          v24 = *v14++;
          *v20 = v24;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C5B51388(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v15;
  uint64_t v16;
  unint64_t BlockFreq;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;

  if (!a6)
    return result;
  v10 = a6;
  v15 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v16 = *v15;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*a4, *a2);
      result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a4, v16);
      if (BlockFreq < (unint64_t)result)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v72 = a3;
    v73 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v60 = *v15;
        *v15 = *a2;
        *a2 = v60;
        return result;
      }
      if (a5 >= 0)
        v28 = a5;
      else
        v28 = a5 + 1;
      v21 = v28 >> 1;
      v27 = a2;
      a2 = &v15[v28 >> 1];
      v19 = a3 - v27;
      v71 = a4;
      if (a3 == v27)
      {
        v20 = a3;
      }
      else
      {
        v63 = v28 >> 1;
        v65 = v27;
        v67 = a7;
        v69 = a8;
        v29 = *a4;
        v20 = v27;
        do
        {
          v30 = v19 >> 1;
          v31 = &v20[v19 >> 1];
          v33 = *v31;
          v32 = v31 + 1;
          v34 = *a2;
          v35 = v19;
          v36 = llvm::BlockFrequencyInfo::getBlockFreq(v29, v33);
          v37 = llvm::BlockFrequencyInfo::getBlockFreq(v29, v34);
          if (v36 >= v37)
            v19 = v30;
          else
            v19 = v35 + ~(v35 >> 1);
          if (v36 < v37)
            v20 = v32;
        }
        while (v19);
        v27 = v65;
        a7 = v67;
        v19 = v20 - v65;
        a8 = v69;
        v21 = v63;
      }
    }
    else
    {
      if (v10 >= 0)
        v18 = v10;
      else
        v18 = v10 + 1;
      v19 = v18 >> 1;
      v20 = &a2[v18 >> 1];
      v21 = a2 - v15;
      if (a2 == v15)
      {
        v15 = a2;
        a3 = &a2[v18 >> 1];
        goto LABEL_48;
      }
      v62 = v18 >> 1;
      v64 = a2;
      v66 = a7;
      v68 = a8;
      a2 = v15;
      v22 = a4;
      do
      {
        v23 = &a2[v21 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        v26 = llvm::BlockFrequencyInfo::getBlockFreq(*v22, *v20);
        if (v26 < llvm::BlockFrequencyInfo::getBlockFreq(*v22, v25))
        {
          v21 >>= 1;
        }
        else
        {
          a2 = v24;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      v71 = v22;
      v21 = a2 - v15;
      v27 = v64;
      a7 = v66;
      a8 = v68;
      v19 = v62;
    }
    if (a2 == v27)
    {
      a2 = v27;
      a3 = v20;
    }
    else if (v27 == v20)
    {
      v20 = v27;
      a3 = a2;
    }
    else
    {
      if (a2 + 1 != v27)
      {
        v38 = v19;
        if (v27 + 1 == v20)
        {
          v70 = a8;
          v42 = *(v20 - 1);
          a3 = a2 + 1;
          a4 = v71;
          if (v20 - 1 != a2)
            memmove(a2 + 1, a2, (char *)(v20 - 1) - (char *)a2);
          *a2 = v42;
          a8 = v70;
        }
        else
        {
          a3 = sub_1C4E85DF0(a2, v27, v20);
          a4 = v71;
        }
        v19 = v38;
        goto LABEL_48;
      }
      v39 = *a2;
      v40 = (char *)v20 - (char *)v27;
      v41 = v19;
      memmove(a2, v27, (char *)v20 - (char *)v27);
      v19 = v41;
      a3 = (uint64_t *)((char *)a2 + v40);
      *(uint64_t *)((char *)a2 + v40) = v39;
    }
    a4 = v71;
LABEL_48:
    a5 -= v21;
    v10 = v73 - v19;
    if ((uint64_t)(v19 + v21) >= (uint64_t)(v73 - v19 + a5))
    {
      v43 = a5;
      v44 = v19;
      result = (uint64_t *)sub_1C5B51388(a3, v20, v72, a4, v43, v73 - v19, a7, a8);
      v20 = a2;
      v10 = v44;
      a5 = v21;
    }
    else
    {
      result = (uint64_t *)sub_1C5B51388(v15, a2, a3, a4, v21, v19, a7, a8);
      v15 = a3;
      a3 = v72;
    }
    a2 = v20;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v51 = 0;
      do
      {
        a7[v51] = v15[v51];
        ++v51;
      }
      while (&v15[v51] != a2);
      if (v51 * 8)
      {
        v52 = a7;
        while (a2 != a3)
        {
          v53 = *v52;
          v54 = a3;
          v55 = llvm::BlockFrequencyInfo::getBlockFreq(*a4, *a2);
          result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a4, v53);
          v56 = v55 >= (unint64_t)result;
          a3 = v54;
          v57 = !v56;
          v58 = v56;
          if (v56)
            v59 = v52;
          else
            v59 = a2;
          v52 += v58;
          a2 += v57;
          *v15++ = *v59;
          if (&a7[v51] == v52)
            return result;
        }
        return (uint64_t *)memmove(v15, v52, (char *)a7 - (char *)v52 + v51 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v45 = 0;
    do
    {
      a7[v45] = a2[v45];
      ++v45;
    }
    while (&a2[v45] != a3);
    if (v45 * 8)
    {
      v46 = &a7[v45];
      v47 = a3 - 1;
      while (a2 != v15)
      {
        v48 = *(a2 - 1);
        v49 = llvm::BlockFrequencyInfo::getBlockFreq(*a4, *(v46 - 1));
        result = (uint64_t *)llvm::BlockFrequencyInfo::getBlockFreq(*a4, v48);
        if (v49 >= (unint64_t)result)
          v50 = v46;
        else
          v50 = a2;
        if (v49 >= (unint64_t)result)
          --v46;
        else
          --a2;
        *v47-- = *(v50 - 1);
        if (v46 == a7)
          return result;
      }
      if (v46 != a7)
      {
        v61 = 0;
        do
        {
          v47[v61] = v46[v61 - 1];
          --v61;
        }
        while (&v46[v61] != a7);
      }
    }
  }
  return result;
}

unint64_t sub_1C5B51848(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t BlockFreq;
  unint64_t *v13;
  unint64_t v14;
  int v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  if (v4 == *(_QWORD *)a1)
    v6 = v5;
  else
    v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = *(uint64_t **)(a1 + 8);
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_19;
    }
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 8);
  }
  v9 = (_QWORD *)(v4 + 8 * v6);
  if (v8 == v9)
  {
LABEL_19:
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *v8;
LABEL_12:
    BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(a2, v11);
    if (__CFADD__(BlockFreq, v10))
      v10 = -1;
    else
      v10 += BlockFreq;
    v13 = (unint64_t *)(v8 + 1);
    while (v13 != v9)
    {
      v14 = *v13++;
      v11 = v14;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (uint64_t *)(v13 - 1);
        goto LABEL_12;
      }
    }
    v5 = *(_DWORD *)(a1 + 20);
  }
  if (v5 - *(_DWORD *)(a1 + 24) > 1)
  {
    v16 = (unint64_t)(((((unint64_t)dword_1ED81E3C0 << 31) | 0x30)
                            * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
    return llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v16, v10);
  }
  return v10;
}

unsigned int *sub_1C5B5195C(unsigned int *result, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v7 = a3;
  v8 = result;
  v9 = *(_QWORD *)result;
  v10 = result[2];
  if (*(_QWORD *)result + 8 * v10 == a2)
    return sub_1C618F808(result, a3, a4, a5);
  if (a3 == a5)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = a3;
    do
    {
      ++v11;
      v13 = v12 + 1;
      while (v13 != a4)
      {
        v14 = *v13++;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v12 = v13 - 1;
          goto LABEL_9;
        }
      }
      v12 = a4;
LABEL_9:
      ;
    }
    while (v12 != a5);
  }
  v15 = (a2 - v9) >> 3;
  if (v11 + v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11 + v10, 8);
    v9 = *(_QWORD *)v8;
    v10 = v8[2];
  }
  v16 = (char *)(v9 + 8 * v15);
  v17 = (char *)(v9 + 8 * v10);
  v18 = (v17 - v16) >> 3;
  if (v18 >= v11)
  {
    v25 = &v17[-8 * v11];
    result = sub_1C6177054(v8, v25, (char *)(v9 + 8 * v10));
    if (v25 != v16)
      result = (unsigned int *)memmove(&v17[-(v25 - v16)], v16, v25 - v16);
    while (v7 != a5)
    {
      v27 = *v7;
      v26 = v7 + 1;
      *(_QWORD *)v16 = v27;
      while (v26 != a4)
      {
        v28 = *v26++;
        if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v7 = v26 - 1;
          goto LABEL_40;
        }
      }
      v7 = a4;
LABEL_40:
      v16 += 8;
    }
  }
  else
  {
    v8[2] = v10 + v11;
    if (v15 != v10)
    {
      result = (unsigned int *)memcpy((void *)(v9 + 8 * (v10 + v11) - 8 * v18), v16, v17 - v16);
      do
      {
        v20 = *v7;
        v19 = v7 + 1;
        *(_QWORD *)v16 = v20;
        v16 += 8;
        while (v19 != a4)
        {
          v21 = *v19++;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v7 = v19 - 1;
            goto LABEL_22;
          }
        }
        v7 = a4;
LABEL_22:
        --v18;
      }
      while (v18);
    }
    while (v7 != a5)
    {
      v23 = *v7;
      v22 = v7 + 1;
      *(_QWORD *)v17 = v23;
      while (v22 != a4)
      {
        v24 = *v22++;
        if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v7 = v22 - 1;
          goto LABEL_29;
        }
      }
      v7 = a4;
LABEL_29:
      v17 += 8;
    }
  }
  return result;
}

uint64_t sub_1C5B51B64(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;

  v116 = (uint64_t *)result;
LABEL_2:
  v109 = a2 - 2;
  v111 = a2 - 1;
  v108 = a2 - 3;
  v9 = v116;
  v114 = a2;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    v116 = v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v105 = *v10;
        v106 = *(_DWORD *)(sub_1C6319E98(*a3, *(a2 - 1)) + 8);
        result = sub_1C6319E98(*a3, v105);
        if (v106 < *(_DWORD *)(result + 8))
        {
          v107 = *v10;
          *v10 = *(v114 - 1);
          *(v114 - 1) = v107;
        }
        return result;
      case 3:
        return sub_1C5B52650(v10, v10 + 1, v111, a3);
      case 4:
        return sub_1C5B52994(v10, v10 + 1, v10 + 2, v111, a3);
      case 5:
        return sub_1C5B5250C(v10, v10 + 1, v10 + 2, v10 + 3, v111, a3);
      default:
        if (v11 <= 191)
        {
          v52 = v10 + 1;
          v54 = v10 == a2 || v52 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              do
              {
                v57 = *v10;
                v56 = v10[1];
                v10 = v52;
                v58 = *(_DWORD *)(sub_1C6319E98(*a3, v56) + 8);
                result = sub_1C6319E98(*a3, v57);
                v59 = v114;
                if (v58 < *(_DWORD *)(result + 8))
                {
                  v60 = *v10;
                  v61 = v55;
                  while (1)
                  {
                    *(uint64_t *)((char *)v116 + v61 + 8) = *(uint64_t *)((char *)v116 + v61);
                    if (!v61)
                      break;
                    v62 = *(uint64_t *)((char *)v116 + v61 - 8);
                    v63 = *(_DWORD *)(sub_1C6319E98(*a3, v60) + 8);
                    result = sub_1C6319E98(*a3, v62);
                    v61 -= 8;
                    v59 = v114;
                    if (v63 >= *(_DWORD *)(result + 8))
                    {
                      v64 = (uint64_t *)((char *)v116 + v61 + 8);
                      goto LABEL_70;
                    }
                  }
                  v64 = v116;
LABEL_70:
                  *v64 = v60;
                }
                v52 = v10 + 1;
                v55 += 8;
              }
              while (v10 + 1 != v59);
            }
          }
          else if (!v54)
          {
            do
            {
              v96 = *v116;
              v97 = v52;
              v98 = *(_DWORD *)(sub_1C6319E98(*a3, v116[1]) + 8);
              result = sub_1C6319E98(*a3, v96);
              if (v98 < *(_DWORD *)(result + 8))
              {
                v99 = *v97;
                v100 = v97;
                do
                {
                  v101 = v100;
                  v102 = *--v100;
                  *v101 = v102;
                  v103 = *(v101 - 2);
                  v104 = *(_DWORD *)(sub_1C6319E98(*a3, v99) + 8);
                  result = sub_1C6319E98(*a3, v103);
                }
                while (v104 < *(_DWORD *)(result + 8));
                *v100 = v99;
              }
              v116 = v97;
              v52 = v97 + 1;
            }
            while (v97 + 1 != v114);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v65 = (unint64_t)(v12 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v116[v68];
                if (2 * v66 + 2 < v12)
                {
                  v70 = v69[1];
                  v71 = *(_DWORD *)(sub_1C6319E98(*a3, *v69) + 8);
                  if (v71 < *(_DWORD *)(sub_1C6319E98(*a3, v70) + 8))
                  {
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v116[v67];
                v73 = *v72;
                v74 = *(_DWORD *)(sub_1C6319E98(*a3, *v69) + 8);
                result = sub_1C6319E98(*a3, v73);
                v75 = v74 < *(_DWORD *)(result + 8);
                a2 = v114;
                if (!v75)
                {
                  v112 = *v72;
                  do
                  {
                    v76 = v69;
                    *v72 = *v69;
                    if (v65 < v68)
                      break;
                    v77 = (2 * v68) | 1;
                    v69 = &v116[v77];
                    v78 = 2 * v68 + 2;
                    if (v78 < v12)
                    {
                      v110 = v69[1];
                      v79 = *(_DWORD *)(sub_1C6319E98(*a3, *v69) + 8);
                      if (v79 < *(_DWORD *)(sub_1C6319E98(*a3, v110) + 8))
                      {
                        ++v69;
                        v77 = v78;
                      }
                    }
                    v80 = *(_DWORD *)(sub_1C6319E98(*a3, *v69) + 8);
                    result = sub_1C6319E98(*a3, v112);
                    v72 = v76;
                    v68 = v77;
                    v75 = v80 < *(_DWORD *)(result + 8);
                    a2 = v114;
                  }
                  while (!v75);
                  *v76 = v112;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            do
            {
              v81 = 0;
              v82 = v116;
              v113 = *v116;
              v115 = a2;
              do
              {
                v83 = &v82[v81 + 1];
                v84 = (2 * v81) | 1;
                v85 = 2 * v81 + 2;
                if (v85 < v12)
                {
                  v86 = v82[v81 + 2];
                  v87 = *(_DWORD *)(sub_1C6319E98(*a3, *v83) + 8);
                  result = sub_1C6319E98(*a3, v86);
                  if (v87 < *(_DWORD *)(result + 8))
                  {
                    ++v83;
                    v84 = v85;
                  }
                }
                *v82 = *v83;
                v82 = v83;
                v81 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              a2 = v115 - 1;
              if (v83 == v115 - 1)
              {
                *v83 = v113;
              }
              else
              {
                *v83 = *a2;
                *a2 = v113;
                v88 = (char *)v83 - (char *)v116 + 8;
                if (v88 >= 9)
                {
                  v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                  v90 = &v116[v89];
                  v91 = *v83;
                  v92 = *(_DWORD *)(sub_1C6319E98(*a3, *v90) + 8);
                  result = sub_1C6319E98(*a3, v91);
                  if (v92 < *(_DWORD *)(result + 8))
                  {
                    v93 = *v83;
                    do
                    {
                      v94 = v90;
                      *v83 = *v90;
                      if (!v89)
                        break;
                      v89 = (v89 - 1) >> 1;
                      v90 = &v116[v89];
                      v95 = *(_DWORD *)(sub_1C6319E98(*a3, *v90) + 8);
                      result = sub_1C6319E98(*a3, v93);
                      v83 = v94;
                    }
                    while (v95 < *(_DWORD *)(result + 8));
                    *v94 = v93;
                  }
                }
              }
              v75 = v12-- <= 2;
            }
            while (!v75);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5B52650(v14, v10, v111, a3);
        }
        else
        {
          sub_1C5B52650(v10, v14, v111, a3);
          sub_1C5B52650(v10 + 1, v14 - 1, v109, a3);
          sub_1C5B52650(v10 + 2, &v10[v13 + 1], v108, a3);
          sub_1C5B52650(v14 - 1, v14, &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        a2 = v114;
        if ((a5 & 1) == 0)
        {
          v33 = *v10;
          v34 = *(_DWORD *)(sub_1C6319E98(*a3, *(v10 - 1)) + 8);
          if (v34 >= *(_DWORD *)(sub_1C6319E98(*a3, v33) + 8))
          {
            v35 = *v10;
            v36 = *v111;
            v37 = *(_DWORD *)(sub_1C6319E98(*a3, *v10) + 8);
            result = sub_1C6319E98(*a3, v36);
            if (v37 >= *(_DWORD *)(result + 8))
            {
              v49 = v10 + 1;
              do
              {
                v9 = v49;
                if (v49 >= v114)
                  break;
                ++v49;
                v50 = *v9;
                v51 = *(_DWORD *)(sub_1C6319E98(*a3, v35) + 8);
                result = sub_1C6319E98(*a3, v50);
              }
              while (v51 >= *(_DWORD *)(result + 8));
            }
            else
            {
              v9 = v10;
              do
              {
                v38 = v9[1];
                ++v9;
                v39 = *(_DWORD *)(sub_1C6319E98(*a3, v35) + 8);
                result = sub_1C6319E98(*a3, v38);
              }
              while (v39 >= *(_DWORD *)(result + 8));
            }
            v40 = v114;
            if (v9 < v114)
            {
              v40 = v114;
              do
              {
                v41 = *--v40;
                v42 = *(_DWORD *)(sub_1C6319E98(*a3, v35) + 8);
                result = sub_1C6319E98(*a3, v41);
              }
              while (v42 < *(_DWORD *)(result + 8));
            }
            while (v9 < v40)
            {
              v43 = *v9;
              *v9 = *v40;
              *v40 = v43;
              do
              {
                v44 = v9[1];
                ++v9;
                v45 = *(_DWORD *)(sub_1C6319E98(*a3, v35) + 8);
              }
              while (v45 >= *(_DWORD *)(sub_1C6319E98(*a3, v44) + 8));
              do
              {
                v46 = *--v40;
                v47 = *(_DWORD *)(sub_1C6319E98(*a3, v35) + 8);
                result = sub_1C6319E98(*a3, v46);
              }
              while (v47 < *(_DWORD *)(result + 8));
            }
            v48 = v9 - 1;
            if (v9 - 1 != v10)
              *v10 = *v48;
            a5 = 0;
            *v48 = v35;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
          v18 = *(_DWORD *)(sub_1C6319E98(*a3, v10[++v16]) + 8);
        while (v18 < *(_DWORD *)(sub_1C6319E98(*a3, v17) + 8));
        v19 = &v10[v16];
        v20 = v114;
        if (v16 == 1)
        {
          v20 = v114;
          do
          {
            if (v19 >= v20)
              break;
            v31 = *--v20;
            v32 = *(_DWORD *)(sub_1C6319E98(*a3, v31) + 8);
          }
          while (v32 >= *(_DWORD *)(sub_1C6319E98(*a3, v17) + 8));
        }
        else
        {
          do
          {
            v21 = *--v20;
            v22 = *(_DWORD *)(sub_1C6319E98(*a3, v21) + 8);
          }
          while (v22 >= *(_DWORD *)(sub_1C6319E98(*a3, v17) + 8));
        }
        v9 = v19;
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v24 = *v9;
            *v9 = *v23;
            *v23 = v24;
            do
            {
              v25 = v9[1];
              ++v9;
              v26 = *(_DWORD *)(sub_1C6319E98(*a3, v25) + 8);
            }
            while (v26 < *(_DWORD *)(sub_1C6319E98(*a3, v17) + 8));
            do
            {
              v27 = *--v23;
              v28 = *(_DWORD *)(sub_1C6319E98(*a3, v27) + 8);
            }
            while (v28 >= *(_DWORD *)(sub_1C6319E98(*a3, v17) + 8));
          }
          while (v9 < v23);
        }
        v29 = v9 - 1;
        if (v9 - 1 != v116)
          *v116 = *v29;
        *v29 = v17;
        if (v19 < v20)
        {
LABEL_25:
          result = sub_1C5B51B64(v116, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v30 = sub_1C5B5279C(v116, v9 - 1, a3);
        result = sub_1C5B5279C(v9, v114, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_25;
        }
        a2 = v9 - 1;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C5B5250C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  sub_1C5B52994(a1, a2, a3, a4, a6);
  v12 = *a4;
  v13 = *(_DWORD *)(sub_1C6319E98(*a6, *a5) + 8);
  result = sub_1C6319E98(*a6, v12);
  if (v13 < *(_DWORD *)(result + 8))
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a3;
    v17 = *(_DWORD *)(sub_1C6319E98(*a6, *a4) + 8);
    result = sub_1C6319E98(*a6, v16);
    if (v17 < *(_DWORD *)(result + 8))
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a2;
      v20 = *(_DWORD *)(sub_1C6319E98(*a6, *a3) + 8);
      result = sub_1C6319E98(*a6, v19);
      if (v20 < *(_DWORD *)(result + 8))
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        v22 = *a1;
        v23 = *(_DWORD *)(sub_1C6319E98(*a6, *a2) + 8);
        result = sub_1C6319E98(*a6, v22);
        if (v23 < *(_DWORD *)(result + 8))
        {
          v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5B52650(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v8 = *a1;
  v9 = *(_DWORD *)(sub_1C6319E98(*a4, *a2) + 8);
  v10 = *(_DWORD *)(sub_1C6319E98(*a4, v8) + 8);
  v11 = *a2;
  v12 = *(_DWORD *)(sub_1C6319E98(*a4, *a3) + 8);
  result = sub_1C6319E98(*a4, v11);
  v14 = *(_DWORD *)(result + 8);
  if (v9 >= v10)
  {
    if (v12 < v14)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a1;
      v20 = *(_DWORD *)(sub_1C6319E98(*a4, *a2) + 8);
      result = sub_1C6319E98(*a4, v19);
      if (v20 < *(_DWORD *)(result + 8))
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  else
  {
    v15 = *a1;
    if (v12 >= v14)
    {
      *a1 = *a2;
      *a2 = v15;
      v16 = *(_DWORD *)(sub_1C6319E98(*a4, *a3) + 8);
      result = sub_1C6319E98(*a4, v15);
      if (v16 < *(_DWORD *)(result + 8))
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v15;
    }
  }
  return result;
}

BOOL sub_1C5B5279C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *a1;
      v20 = *(_DWORD *)(sub_1C6319E98(*a3, *(a2 - 1)) + 8);
      if (v20 < *(_DWORD *)(sub_1C6319E98(*a3, v19) + 8))
      {
        v21 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v21;
      }
      return 1;
    case 3:
      sub_1C5B52650(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5B52994(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5B5250C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C5B52650(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v8;
    v13 = *(_DWORD *)(sub_1C6319E98(*a3, *v9) + 8);
    if (v13 < *(_DWORD *)(sub_1C6319E98(*a3, v12) + 8))
    {
      v14 = *v9;
      v15 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15 + 24) = *(uint64_t *)((char *)a1 + v15 + 16);
        if (v15 == -16)
          break;
        v16 = *(uint64_t *)((char *)a1 + v15 + 8);
        v17 = *(_DWORD *)(sub_1C6319E98(*a3, v14) + 8);
        v15 -= 8;
        if (v17 >= *(_DWORD *)(sub_1C6319E98(*a3, v16) + 8))
        {
          v18 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_11;
        }
      }
      v18 = a1;
LABEL_11:
      *v18 = v14;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

uint64_t sub_1C5B52994(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  sub_1C5B52650(a1, a2, a3, a5);
  v10 = *a3;
  v11 = *(_DWORD *)(sub_1C6319E98(*a5, *a4) + 8);
  result = sub_1C6319E98(*a5, v10);
  if (v11 < *(_DWORD *)(result + 8))
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a2;
    v15 = *(_DWORD *)(sub_1C6319E98(*a5, *a3) + 8);
    result = sub_1C6319E98(*a5, v14);
    if (v15 < *(_DWORD *)(result + 8))
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a1;
      v18 = *(_DWORD *)(sub_1C6319E98(*a5, *a2) + 8);
      result = sub_1C6319E98(*a5, v17);
      if (v18 < *(_DWORD *)(result + 8))
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

BOOL sub_1C5B52A98(_QWORD *a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) == *a1;
}

uint64_t sub_1C5B52AB0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B50DB8(v0);
}

void sub_1C5B52ADC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B52B00(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *v3;

  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  llvm::getLoopAnalysisUsage(this, v3);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5B52B64(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t LoopPredecessor;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::Instruction *v9;
  void **v10;
  void *v11;
  uint64_t *v12;
  char ***v13;
  uint64_t AnalysisPass;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t *v24;
  llvm::AAResults *v25;
  uint64_t *v26;
  uint64_t v27;
  int v29;
  _BYTE v30[24];

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    return 0;
  v5 = *(_QWORD *)(LoopPredecessor + 40);
  if (v5 == LoopPredecessor + 40)
    return 0;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 16) == 30)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
      return 0;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_32;
      case 0x1F:
        v29 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_32:
        v29 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v29 = *(_DWORD *)(v6 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v29 != 1)
      return 0;
  }
  llvm::Function::getEntryCount(*(uint64_t ****)(LoopPredecessor + 56), 0, (uint64_t)v30);
  if (!v30[16])
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AAResultsWrapperPass::ID);
  v9 = *(llvm::Instruction **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v10 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::MemorySSAWrapperPass::ID);
  v12 = *(uint64_t **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  v13 = (char ***)*((_QWORD *)a1 + 1);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)v13[3], llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v15 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID);
    v13 = (char ***)*((_QWORD *)a1 + 1);
  }
  else
  {
    v15 = 0;
  }
  v16 = *v13;
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::LoopInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::LoopInfoWrapperPass::ID);
  v19 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::DominatorTreeWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::DominatorTreeWrapperPass::ID);
  v22 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v24 = (uint64_t *)(v18 + 32);
  v25 = (llvm::AAResults *)(v21 + 32);
  v26 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
  if (v15)
    v27 = *(_QWORD *)(v15 + 32);
  else
    v27 = 0;
  return sub_1C5B4FB38(a2, v9, v24, v25, v26, v12, v27);
}

uint64_t sub_1C5B52DEC()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 90;
  v3 = &v2;
  *(_QWORD *)&v1 = "Do not sink instructions that require cloning unless they execute less than this percent of the time.";
  *((_QWORD *)&v1 + 1) = 101;
  sub_1C61798D0((uint64_t)&unk_1ED81E340, "sink-freq-percent-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81E340, &dword_1C475E000);
  v4 = 1;
  v2 = 30;
  v3 = &v2;
  *(_QWORD *)&v1 = "Do not sink instructions that have too many uses.";
  *((_QWORD *)&v1 + 1) = 49;
  sub_1C61798D0((uint64_t)&unk_1ED81E400, "max-uses-for-sinking", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81E400, &dword_1C475E000);
}

void llvm::LoopDeletionPass::run(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t ***v8;
  size_t v9;
  void **p_dst;
  const char *v11;
  int v12;
  int v13;
  int v14;
  void **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t *v32;
  void **__dst;
  size_t v34;
  int64_t v35;

  v8 = **(uint64_t *****)(a1 + 32);
  if (!v8 || (*((_BYTE *)v8 + 23) & 0x10) == 0)
  {
    v9 = 14;
    HIBYTE(v35) = 14;
    p_dst = (void **)&__dst;
    v11 = "<unnamed loop>";
    goto LABEL_4;
  }
  v19 = ***v8;
  v20 = *(_QWORD *)(v19 + 152);
  v21 = *(unsigned int *)(v19 + 168);
  if ((_DWORD)v21)
  {
    LODWORD(v22) = (v21 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v23 = (uint64_t ****)(v20 + 16 * v22);
    v24 = *v23;
    if (*v23 == v8)
      goto LABEL_34;
    v25 = 1;
    while (v24 != (uint64_t ***)-4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(uint64_t ****)(v20 + 16 * v22);
      if (v24 == v8)
      {
        v23 = (uint64_t ****)(v20 + 16 * v22);
        goto LABEL_34;
      }
    }
  }
  v23 = (uint64_t ****)(v20 + 16 * v21);
LABEL_34:
  v27 = v23[1];
  v28 = (unint64_t)*v27;
  v11 = (const char *)(v27 + 2);
  v9 = v28;
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v9 >= 0x17)
  {
    v29 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v29 = v9 | 7;
    v30 = v29 + 1;
    p_dst = (void **)operator new(v29 + 1);
    v34 = v9;
    v35 = v30 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v9;
    p_dst = (void **)&__dst;
    if (!v9)
      goto LABEL_5;
  }
LABEL_4:
  memmove(p_dst, v11, v9);
LABEL_5:
  *((_BYTE *)p_dst + v9) = 0;
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v31, *(const llvm::Function **)(**(_QWORD **)(a1 + 32) + 56));
  v12 = sub_1C5B53178(a1, *(llvm::Loop **)(a2 + 16), *(int32x2_t **)(a2 + 32), *(int32x2_t **)(a2 + 24), *(llvm::LoopInfo **)(a2 + 72), (llvm::OptimizationRemarkEmitter *)v31);
  if (v12 == 2
    || (v13 = v12,
        v14 = sub_1C5B53EC0(a1, *(llvm::Loop **)(a2 + 16), *(llvm::ScalarEvolution **)(a2 + 32), *(llvm::ScalarEvolution **)(a2 + 24), *(llvm::LoopInfo **)(a2 + 72)), v14 == 2))
  {
    if (v35 >= 0)
      v15 = (void **)&__dst;
    else
      v15 = __dst;
    if (v35 >= 0)
      v16 = HIBYTE(v35) & 0x7F;
    else
      v16 = v34;
    llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(a3 + 8), a1, (uint64_t)v15, v16);
    if (*(_QWORD *)(a3 + 16) == a1)
      *(_BYTE *)(a3 + 24) = 1;
  }
  else if (v13 != 1 && v14 != 1)
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    goto LABEL_17;
  }
  llvm::getLoopPassPreservedAnalyses(a4);
  if (*(_QWORD *)(a2 + 72))
    sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
LABEL_17:
  v17 = v32;
  v32 = 0;
  if (v17)
  {
    v18 = *v17;
    *v17 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    MEMORY[0x1CAA32FC0](v17, 0x20C4093837F09);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
}

uint64_t sub_1C5B53178(uint64_t a1, llvm::Loop *a2, int32x2_t *a3, int32x2_t *a4, llvm::LoopInfo *a5, llvm::OptimizationRemarkEmitter *a6)
{
  uint64_t LoopPredecessor;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t UniqueExitBlock;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  BOOL v32;
  llvm::Type *v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  llvm::UndefValue *v40;
  llvm::UndefValue ***v41;
  llvm::UndefValue ***v42;
  uint64_t v43;
  llvm::UndefValue **v44;
  llvm::UndefValue **v45;
  uint64_t v46;
  llvm::MemorySSA *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  llvm::BasicBlock **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t j;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v101;
  unsigned int v102;
  char **v103;
  unsigned int OptionalBoolLoopAttribute;
  char v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  llvm::Loop *v112;
  unint64_t v113;
  void **v114;
  llvm::Loop *v115;
  char *v116;
  unint64_t v117;
  void **v118;
  uint64_t v119;
  llvm::MemorySSA *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  void **v128;
  char *v129;
  unint64_t v130;
  void **v131;
  llvm::Loop *v132;
  llvm::LoopInfo *v133;
  llvm::OptimizationRemarkEmitter *v134;
  llvm::OptimizationRemarkEmitter *v135;
  unsigned __int8 v136;
  unsigned __int8 *v137;
  void *v138;
  uint64_t v139;
  _BYTE v140[32];
  const char *v141;
  uint64_t v142;
  void *__p;
  void *v144;
  char *v145;
  unsigned int v146;
  _BYTE v147[272];
  uint64_t (**v148)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  const char *v155;
  const char *v156;
  uint64_t v157;
  char v158;
  char v159;
  char *v160;
  uint64_t v161;
  _BYTE v162[256];
  char v163;
  int v164;
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (!LoopPredecessor)
    return 0;
  v14 = (_QWORD *)(LoopPredecessor + 40);
  v13 = *(_QWORD *)(LoopPredecessor + 40);
  if (v13 == LoopPredecessor + 40)
    return 0;
  if (v13)
    v15 = v13 - 24;
  else
    v15 = 0;
  if (*(_BYTE *)(v15 + 16) == 30)
  {
    if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3)
      return 0;
  }
  else
  {
    v22 = 0;
    switch(*(_BYTE *)(v15 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        return v22;
      case 0x1E:
LABEL_267:
        __break(1u);
        goto LABEL_268;
      case 0x1F:
        v23 = (*(_DWORD *)(v15 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_268:
        v23 = (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v23 = *(_DWORD *)(v15 + 80) + 1;
        break;
      default:
        return 0;
    }
    if (v23 != 1)
      return 0;
  }
  if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits((_QWORD *)a1))
    return 0;
  UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)a1);
  if (!UniqueExitBlock)
  {
    v138 = v140;
    v139 = 0x400000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks((_QWORD *)a1, (uint64_t)&v138);
    if (!llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasNoExitBlocks((_QWORD *)a1))
    {
      v22 = 0;
      goto LABEL_237;
    }
    goto LABEL_99;
  }
  v17 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
  if (!v17)
    goto LABEL_16;
  v18 = *(_QWORD *)(v17 + 40);
  if (v18 == v17 + 40)
    goto LABEL_16;
  v19 = v18 - 24;
  if (!v18)
    v19 = 0;
  v20 = *(unsigned __int8 *)(v19 + 16);
  v21 = v20 - 29;
  if (v20 != 30)
  {
    v15 = 0;
    switch(v21)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_28;
      case 1:
        goto LABEL_267;
      case 2:
        v25 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
        v25 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v25 = *(_DWORD *)(v19 + 80) + 1;
        break;
      default:
        goto LABEL_16;
    }
    if (v25 != 1)
      goto LABEL_16;
LABEL_27:
    v15 = v17;
    goto LABEL_28;
  }
  if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_27;
LABEL_16:
  v15 = 0;
LABEL_28:
  v26 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 80);
  if (v26)
    v27 = v26 - 24;
  else
    v27 = 0;
  if (v27 != v15)
  {
    v28 = *(_QWORD *)(v15 + 8);
    if (!v28)
    {
LABEL_42:
      v134 = a6;
      llvm::ScalarEvolution::forgetLoop(a3, (const llvm::Loop *)a1);
      if (*(_QWORD *)(UniqueExitBlock + 40) != UniqueExitBlock + 40)
      {
        for (i = *(_QWORD *)(UniqueExitBlock + 48); ; i = *(_QWORD *)(v35 + 32))
        {
          v35 = i - 24;
          v36 = i ? i - 24 : 0;
          if (!i || *(_BYTE *)(v36 + 16) != 83)
            break;
          v37 = *(_DWORD *)(i - 4);
          if ((v37 & 0x40000000) != 0)
          {
            v39 = *(_QWORD *)(i - 32);
            v38 = v37 & 0x7FFFFFF;
          }
          else
          {
            v38 = v37 & 0x7FFFFFF;
            v39 = v35 - 32 * v38;
          }
          v40 = llvm::UndefValue::get(*(llvm::UndefValue **)v35, v33);
          if (v38)
          {
            v41 = (llvm::UndefValue ***)((char *)v40 + 8);
            v42 = (llvm::UndefValue ***)(v39 + 8);
            v43 = v38 + 1;
            do
            {
              v44 = (llvm::UndefValue **)(v42 - 1);
              if (*(v42 - 1))
              {
                *v42[1] = (llvm::UndefValue *)*v42;
                if (*v42)
                  (*v42)[2] = (llvm::UndefValue *)v42[1];
              }
              *v44 = v40;
              if (v40)
              {
                v45 = *v41;
                *v42 = *v41;
                if (v45)
                  v45[2] = (llvm::UndefValue *)v42;
                v42[1] = (llvm::UndefValue **)v41;
                *v41 = v44;
              }
              v42 += 4;
              --v43;
            }
            while (v43 > 1);
          }
        }
      }
      v46 = ****(_QWORD ****)v134;
      if (*(_QWORD *)(v46 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v46 + 72) + 48))(*(_QWORD *)(v46 + 72)))
      {
        llvm::Loop::getStartLoc((llvm::Loop *)a1, &v138);
        v106 = (int)v138;
        if (v138)
        {
          v107 = *((_QWORD *)v138 - *((unsigned int *)v138 + 2));
          if (*(_BYTE *)v107 != 15)
            v107 = *(_QWORD *)(v107 - 8 * *(unsigned int *)(v107 + 8));
          v108 = *((_DWORD *)v138 + 1);
          v106 = *((unsigned __int16 *)v138 + 1);
        }
        else
        {
          v107 = 0;
          v108 = 0;
        }
        v109 = **(_QWORD **)(a1 + 32);
        v110 = *(_QWORD *)(v109 + 56);
        v149 = 9;
        LOBYTE(v150) = 2;
        v151 = v110;
        v152 = v107;
        v153 = v108;
        v154 = v106;
        v155 = "loop-delete";
        v156 = "NeverExecutes";
        v157 = 13;
        v158 = 0;
        v159 = 0;
        v160 = v162;
        v161 = 0x400000000;
        v163 = 0;
        v164 = -1;
        v165 = v109;
        v148 = &off_1E814E500;
        v141 = "Loop deleted because it never executes";
        v142 = 38;
        sub_1C53B17B4((uint64_t)&v160, (const void **)&v141);
        sub_1C61998EC((uint64_t)&v141, (uint64_t)&v148);
        v141 = (const char *)&off_1E814E500;
        v148 = &off_1E814E790;
        v111 = v160;
        if ((_DWORD)v161)
        {
          v112 = a2;
          v113 = (unint64_t)v161 << 6;
          do
          {
            v114 = (void **)&v111[v113];
            if (v111[v113 - 17] < 0)
              operator delete(*(v114 - 5));
            if (*((char *)v114 - 41) < 0)
              operator delete(*(v114 - 8));
            v113 -= 64;
          }
          while (v113);
          v111 = v160;
          a2 = v112;
        }
        if (v111 != v162)
          free(v111);
        v115 = a2;
        if (v138)
          llvm::MetadataTracking::untrack((uint64_t)&v138, (unsigned __int8 *)v138);
        llvm::OptimizationRemarkEmitter::emit(v134, (llvm::DiagnosticInfoOptimizationBase *)&v141);
        v141 = (const char *)&off_1E814E790;
        v116 = v145;
        if (v146)
        {
          v117 = (unint64_t)v146 << 6;
          do
          {
            v118 = (void **)&v116[v117];
            if (v116[v117 - 17] < 0)
              operator delete(*(v118 - 5));
            if (*((char *)v118 - 41) < 0)
              operator delete(*(v118 - 8));
            v117 -= 64;
          }
          while (v117);
          v116 = v145;
        }
        if (v116 != v147)
          free(v116);
        a2 = v115;
      }
      llvm::deleteDeadLoop((llvm *)a1, a2, a3, a4, a5, v47);
      return 2;
    }
    while (1)
    {
      v29 = *(_QWORD *)(v28 + 24);
      v30 = *(unsigned __int8 *)(v29 + 16);
      v31 = v29 && v30 >= 0x1C;
      v32 = !v31 || v30 - 29 > 0xA;
      if (!v32)
        break;
      v28 = *(_QWORD *)(v28 + 8);
      if (!v28)
        goto LABEL_42;
    }
LABEL_97:
    v59 = *(_QWORD *)(v29 + 40);
    v60 = *(_QWORD *)(v59 + 40);
    if (v60 != v59 + 40)
    {
      v48 = v60 - 24;
      if (!v60)
        v48 = 0;
      v49 = *(unsigned __int8 *)(v48 + 16) - 40;
      if (v49 < 0xFFFFFFF5)
        v48 = 0;
      if (v60)
      {
        v50 = *(_BYTE *)(v48 + 16) == 30 && v49 >= 0xFFFFFFF5;
        if (v50 && (*(_DWORD *)(v48 + 20) & 0x7FFFFFF) == 3)
        {
          v51 = *(_QWORD *)(v48 - 96);
          if (v51 && *(_BYTE *)(v51 + 16) == 16)
          {
            v53 = *(_QWORD *)(v48 - 32);
            if (v53)
            {
              v54 = *(_QWORD *)(v48 - 64);
              if (v54)
              {
                v55 = (_QWORD *)(v51 + 24);
                if (*(_DWORD *)(v51 + 32) >= 0x41u)
                  v55 = (_QWORD *)*v55;
                if (*v55)
                  v54 = v53;
                if (v54 != v15)
                {
                  while (1)
                  {
                    v28 = *(_QWORD *)(v28 + 8);
                    if (!v28)
                      goto LABEL_42;
                    v29 = *(_QWORD *)(v28 + 24);
                    v56 = *(unsigned __int8 *)(v29 + 16);
                    if (v29)
                      v57 = v56 >= 0x1C;
                    else
                      v57 = 0;
                    if (v57 && v56 - 29 <= 0xA)
                      goto LABEL_97;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v138 = v140;
  v139 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks((_QWORD *)a1, (uint64_t)&v138);
LABEL_99:
  v136 = 0;
  v133 = (llvm::LoopInfo *)a4;
  v132 = a2;
  v135 = a6;
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasNoExitBlocks((_QWORD *)a1)
    || *(_QWORD *)(UniqueExitBlock + 40) == UniqueExitBlock + 40)
  {
    v61 = 1;
  }
  else
  {
    v62 = *(_QWORD *)(UniqueExitBlock + 48);
    v63 = v62 - 24;
    if (v62)
      v64 = v62 - 24;
    else
      v64 = 0;
    v61 = 1;
    if (v62)
    {
      v65 = *(unsigned __int8 *)(v64 + 16);
      v66 = 1;
      while (v65 == 83)
      {
        v67 = v138;
        v68 = *(_DWORD *)(v63 + 20);
        v69 = v68 & 0x7FFFFFF;
        if ((v68 & 0x7FFFFFF) != 0)
        {
          v70 = 0;
          while (1)
          {
            v71 = v63 - 32 * v69;
            if ((v68 & 0x40000000) != 0)
              v71 = *(_QWORD *)(v63 - 8);
            if (*(_QWORD *)(v71 + 32 * *(unsigned int *)(v63 + 60) + 8 * v70) == *(_QWORD *)v138)
              break;
            if (v69 == ++v70)
              goto LABEL_114;
          }
        }
        else
        {
LABEL_114:
          LODWORD(v70) = -1;
        }
        if ((v68 & 0x40000000) != 0)
        {
          v72 = *(_QWORD *)(v63 - 8);
          v73 = v69;
          v74 = -(uint64_t)v69;
        }
        else
        {
          v73 = v69;
          v74 = -(uint64_t)v69;
          v72 = v63 - 32 * v69;
        }
        v75 = *(_QWORD *)(v72 + 32 * v70);
        v76 = v63 + 32 * v74;
        while (++v67 != (_QWORD *)((char *)v138 + 8 * v139))
        {
          if ((_DWORD)v69)
          {
            v77 = 0;
            while (1)
            {
              v78 = v76;
              if ((v68 & 0x40000000) != 0)
                v78 = *(_QWORD *)(v63 - 8);
              if (*(_QWORD *)(v78 + 32 * *(unsigned int *)(v63 + 60) + 8 * v77) == *v67)
                break;
              if (v73 == ++v77)
                goto LABEL_125;
            }
          }
          else
          {
LABEL_125:
            LODWORD(v77) = -1;
          }
          v79 = v76;
          if ((v68 & 0x40000000) != 0)
            v79 = *(_QWORD *)(v63 - 8);
          if (v75 != *(_QWORD *)(v79 + 32 * v77))
          {
            v61 = 0;
            goto LABEL_147;
          }
        }
        if (v75 && *(unsigned __int8 *)(v75 + 16) >= 0x1Cu)
        {
          v80 = (_QWORD *)*v14;
          if ((_QWORD *)*v14 == v14)
          {
            v82 = 0;
          }
          else
          {
            v81 = v80 ? (uint64_t)(v80 - 3) : 0;
            v82 = *(unsigned __int8 *)(v81 + 16) - 29 >= 0xB ? 0 : (llvm::BasicBlock **)v81;
          }
          if (!llvm::Loop::makeLoopInvariant(a1, v75, &v136, v82, 0))
          {
            v66 = 0;
            v61 = 1;
            goto LABEL_148;
          }
        }
        v83 = *(_QWORD *)(v63 + 32);
        v63 = v83 - 24;
        if (v83)
          v84 = v83 - 24;
        else
          v84 = 0;
        if (!v83)
          goto LABEL_147;
        v65 = *(unsigned __int8 *)(v84 + 16);
      }
      goto LABEL_148;
    }
  }
LABEL_147:
  v66 = 1;
LABEL_148:
  if (v136)
    sub_1C4F3333C(&a3[86]);
  if ((v61 & v66) != 1)
    goto LABEL_236;
  v85 = *(_QWORD *)(a1 + 32);
  v86 = *(_QWORD *)(a1 + 40);
  if (v86 != v85)
  {
    while (1)
    {
      v87 = *(_QWORD *)v85 + 40;
      for (j = *(_QWORD *)(*(_QWORD *)v85 + 48); j != v87; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v89 = j - 24;
        else
          v89 = 0;
        v90 = *(unsigned __int8 *)(v89 + 16) - 33;
        if (v90 > 0x37)
        {
LABEL_161:
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v89) & 1) == 0
            && (llvm::Instruction::willReturn((llvm::Instruction *)v89) & 1) != 0)
          {
            continue;
          }
          goto LABEL_163;
        }
        if (((1 << (*(_BYTE *)(v89 + 16) - 33)) & 0x808001D0000010) == 0)
        {
          if (((1 << (*(_BYTE *)(v89 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v91 = *(_QWORD *)(v89 + 64);
            if (v91 && (*(_BYTE *)(v91 + 17) & 0x30) != 0)
              goto LABEL_161;
            v92 = *(_DWORD *)(v89 + 20);
            if (v92 < 0
              && (v93 = v89 - 32 * (v92 & 0x7FFFFFF), v96 = *(_QWORD *)(v93 - 8), v94 = v93 - 8, (v95 = v96) != 0))
            {
              v97 = -v95;
              while (1)
              {
                v98 = *(_DWORD *)(*(_QWORD *)(v94 + v97) + 8);
                v32 = v98 > 7;
                v99 = (1 << v98) & 0x83;
                if (v32 || v99 == 0)
                  break;
                v97 += 16;
                if (!v97)
                  goto LABEL_169;
              }
            }
            else
            {
LABEL_169:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v89, 45) & 1) != 0
                || llvm::CallBase::hasFnAttrOnCalledFunction(v89, 44))
              {
                goto LABEL_161;
              }
            }
          }
          else if (v90 != 27 || (*(_WORD *)(v89 + 18) & 0x301) == 0)
          {
            goto LABEL_161;
          }
        }
LABEL_163:
        if (!sub_1C4D9F8B4(v89) && !sub_1C509DDB0(v89))
          goto LABEL_236;
      }
      v85 += 8;
      if (v85 == v86)
      {
        v85 = *(_QWORD *)(a1 + 32);
        break;
      }
    }
  }
  v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v85 + 56) + 112);
  if (v101 && ((*(_BYTE *)(v101 + 14) & 1) != 0 || (*(_BYTE *)(v101 + 20) & 2) != 0))
    goto LABEL_233;
  sub_1C4DFE414((uint64_t)&v141, a1);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)&v141, v133);
  if ((sub_1C4F7C2CC((uint64_t)&v141, (uint64_t *)v133) & 1) != 0)
  {
    if (__p)
    {
      v144 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v142, 8);
LABEL_236:
    v22 = v136;
    goto LABEL_237;
  }
  v148 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&v151;
  v150 = 8;
  v151 = a1;
  v102 = 1;
  while (1)
  {
    v103 = (char **)v148[v102 - 1];
    v149 = v102 - 1;
    OptionalBoolLoopAttribute = (unsigned __int16)llvm::getOptionalBoolLoopAttribute((llvm::Loop *)v103, "llvm.loop.mustprogress", 0x16uLL);
    if (OptionalBoolLoopAttribute <= 0x100)
      LOBYTE(OptionalBoolLoopAttribute) = 0;
    if ((_BYTE)OptionalBoolLoopAttribute)
      goto LABEL_197;
    if (*(_WORD *)(llvm::ScalarEvolution::getBackedgeTakenCount((llvm::ScalarEvolution *)a3, (const llvm::Loop *)v103, 1)+ 24) == 15)break;
    sub_1C499C3FC((unsigned int *)&v148, v103[1], v103[2]);
LABEL_197:
    v102 = v149;
    if (!v149)
    {
      v105 = 1;
      goto LABEL_228;
    }
  }
  v105 = 0;
LABEL_228:
  if (v148 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&v151)
    free(v148);
  if (__p)
  {
    v144 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v142, 8);
  if ((v105 & 1) == 0)
    goto LABEL_236;
LABEL_233:
  v119 = ****(_QWORD ****)v135;
  if (*(_QWORD *)(v119 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v119 + 72) + 48))(*(_QWORD *)(v119 + 72)))
  {
    llvm::Loop::getStartLoc((llvm::Loop *)a1, &v137);
    v121 = (int)v137;
    if (v137)
    {
      v123 = *(_QWORD *)&v137[-8 * *((unsigned int *)v137 + 2)];
      if (*(_BYTE *)v123 != 15)
        v123 = *(_QWORD *)(v123 - 8 * *(unsigned int *)(v123 + 8));
      v122 = *((_DWORD *)v137 + 1);
      v121 = *((unsigned __int16 *)v137 + 1);
    }
    else
    {
      v122 = 0;
      v123 = 0;
    }
    v124 = **(_QWORD **)(a1 + 32);
    v125 = *(_QWORD *)(v124 + 56);
    v149 = 9;
    LOBYTE(v150) = 2;
    v151 = v125;
    v152 = v123;
    v153 = v122;
    v154 = v121;
    v155 = "loop-delete";
    v156 = "Invariant";
    v157 = 9;
    v158 = 0;
    v159 = 0;
    v160 = v162;
    v161 = 0x400000000;
    v163 = 0;
    v164 = -1;
    v165 = v124;
    v148 = &off_1E814E500;
    v141 = "Loop deleted because it is invariant";
    v142 = 36;
    sub_1C53B17B4((uint64_t)&v160, (const void **)&v141);
    sub_1C61998EC((uint64_t)&v141, (uint64_t)&v148);
    v141 = (const char *)&off_1E814E500;
    v148 = &off_1E814E790;
    v126 = v160;
    if ((_DWORD)v161)
    {
      v127 = (unint64_t)v161 << 6;
      do
      {
        v128 = (void **)&v126[v127];
        if (v126[v127 - 17] < 0)
          operator delete(*(v128 - 5));
        if (*((char *)v128 - 41) < 0)
          operator delete(*(v128 - 8));
        v127 -= 64;
      }
      while (v127);
      v126 = v160;
    }
    if (v126 != v162)
      free(v126);
    if (v137)
      llvm::MetadataTracking::untrack((uint64_t)&v137, v137);
    llvm::OptimizationRemarkEmitter::emit(v135, (llvm::DiagnosticInfoOptimizationBase *)&v141);
    v141 = (const char *)&off_1E814E790;
    v129 = v145;
    if (v146)
    {
      v130 = (unint64_t)v146 << 6;
      do
      {
        v131 = (void **)&v129[v130];
        if (v129[v130 - 17] < 0)
          operator delete(*(v131 - 5));
        if (*((char *)v131 - 41) < 0)
          operator delete(*(v131 - 8));
        v130 -= 64;
      }
      while (v130);
      v129 = v145;
    }
    if (v129 != v147)
      free(v129);
  }
  llvm::deleteDeadLoop((llvm *)a1, v132, a3, (int32x2_t *)v133, a5, v120);
  v22 = 2;
LABEL_237:
  if (v138 != v140)
    free(v138);
  return v22;
}

uint64_t sub_1C5B53EC0(uint64_t a1, llvm::Loop *a2, llvm::ScalarEvolution *a3, llvm::ScalarEvolution *a4, llvm::LoopInfo *a5)
{
  uint64_t result;
  llvm::SCEV *BackedgeTakenCount;
  llvm::MemorySSA *v12;
  const llvm::Loop **BackedgeTakenInfo;
  llvm::SCEV *Exact;
  char isKnownNonZero;
  uint64_t LoopPredecessor;
  uint64_t LoopLatch;
  llvm::LoopBlocksDFS *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::DominatorTree *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  _QWORD *v71;
  unsigned __int8 *v72;
  const llvm::Instruction *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  BOOL v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  int v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  llvm::ScalarEvolution *v152;
  llvm::LoopInfo *v153;
  llvm::ScalarEvolution *v154;
  uint64_t v155;
  llvm::DominatorTree *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int16 v163;
  uint64_t v164[2];
  int v165;
  _BYTE *v166;
  _BYTE *v167;
  uint64_t v168;
  int v169;
  _BYTE v170[32];
  uint64_t v171[2];
  int v172;
  char *v173;
  char *v174;
  uint64_t v175;
  int v176;
  _BYTE v177[32];
  char v178[8];
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;

  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
  if (result)
  {
    BackedgeTakenCount = (llvm::SCEV *)llvm::ScalarEvolution::getBackedgeTakenCount(a3, (const llvm::Loop *)a1, 1);
    if (llvm::SCEV::isZero(BackedgeTakenCount)
      || (BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(a3, (const llvm::Loop *)a1),
          Exact = (llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, a1, (uint64_t)a3, 0), llvm::SCEV::isZero(Exact)))
    {
LABEL_4:
      llvm::breakLoopBackedge((llvm *)a1, a2, (int32x2_t *)a3, a4, a5, v12);
      return 2;
    }
    if (*((_WORD *)Exact + 12) == 15)
    {
      if (!byte_1ED81E540)
        return 0;
    }
    else
    {
      isKnownNonZero = llvm::ScalarEvolution::isKnownNonZero(a3, Exact);
      result = 0;
      if ((isKnownNonZero & 1) != 0 || !byte_1ED81E540)
        return result;
    }
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a1);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
    result = 0;
    v155 = LoopPredecessor;
    if (LoopPredecessor && LoopLatch)
    {
      v18 = (llvm::LoopBlocksDFS *)sub_1C4DFE414((uint64_t)v178, a1);
      llvm::LoopBlocksDFS::perform(v18, a4);
      if ((sub_1C4F7C2CC((uint64_t)v178, (uint64_t *)a4) & 1) != 0)
      {
        if (v180)
        {
          v181 = v180;
          operator delete(v180);
        }
        MEMORY[0x1CAA32FB4](v179, 8);
        return 0;
      }
      v151 = LoopLatch;
      v152 = a3;
      v156 = a2;
      v154 = a4;
      v153 = a5;
      v19 = **(_QWORD **)(a1 + 32);
      v173 = v177;
      v174 = v177;
      v175 = 4;
      v176 = 0;
      v171[0] = 0;
      v171[1] = 0;
      v172 = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v19);
      v166 = v170;
      v167 = v170;
      v168 = 4;
      v169 = 0;
      v164[0] = 0;
      v164[1] = 0;
      v165 = 0;
      v160 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 40) + 272;
      v161 = 0u;
      v162 = 0u;
      v163 = 257;
      v20 = v181;
      v157 = v180;
      v158 = v19;
      if (v181 == v180)
      {
LABEL_271:
        v184 = v151;
        v185 = v158;
        v182 = 0;
        v149 = sub_1C5B554C8(v171, &v184, &v182);
        MEMORY[0x1CAA32FB4](v164[0], 8);
        if (v167 != v166)
          free(v167);
        MEMORY[0x1CAA32FB4](v171[0], 8);
        a3 = v152;
        a5 = v153;
        a2 = v156;
        if (v174 != v173)
          free(v174);
        a4 = v154;
        if (v180)
        {
          v181 = v180;
          operator delete(v180);
        }
        MEMORY[0x1CAA32FB4](v179, 8);
        if ((v149 & 1) == 0)
          goto LABEL_4;
        return 0;
      }
      v150 = a1 + 56;
      while (1)
      {
        v21 = *((_QWORD *)v20 - 1);
        v159 = v20 - 8;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v166, v21);
        result = (uint64_t)sub_1C477672C((uint64_t)&v173, v21);
        if (v174 == v173)
          v23 = (uint64_t *)((char *)&v175 + 4);
        else
          v23 = &v175;
        if ((char *)result == &v174[8 * *(unsigned int *)v23])
          goto LABEL_194;
        v24 = *((_DWORD *)v154 + 4);
        if (!v24)
          goto LABEL_29;
        v25 = *(_QWORD *)v154;
        v26 = v24 - 1;
        v27 = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v28 = *(_QWORD *)(*(_QWORD *)v154 + 16 * v27);
        if (v21 != v28)
          break;
LABEL_28:
        v31 = *(_QWORD *)(v25 + 16 * v27 + 8);
LABEL_30:
        if (v31 != a1)
        {
          v32 = *(_QWORD *)(v21 + 40);
          if (v32 != v21 + 40)
          {
            if (v32)
              v33 = v32 - 24;
            else
              v33 = 0;
            v34 = *(unsigned __int8 *)(v33 + 16);
            v35 = v34 - 29;
            if (v34 != 30)
            {
              v36 = 2;
              switch(v35)
              {
                case 1:
                  goto LABEL_279;
                case 2:
                  v36 = (*(_DWORD *)(v33 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_165;
                case 3:
                case 9:
                  v36 = (*(_DWORD *)(v33 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_165;
                case 4:
                  goto LABEL_39;
                case 7:
                  v36 = *(_WORD *)(v33 + 18) & 1;
                  goto LABEL_165;
                case 8:
                  v36 = 1;
                  goto LABEL_39;
                case 10:
                  v36 = *(_DWORD *)(v33 + 80) + 1;
LABEL_165:
                  if (!v36)
                    goto LABEL_194;
                  goto LABEL_39;
                default:
                  goto LABEL_194;
              }
            }
            if ((*(_DWORD *)(v33 + 20) & 0x7FFFFFF) == 3)
              v36 = 2;
            else
              v36 = 1;
LABEL_39:
            v37 = 0;
            v38 = 0;
            v39 = v36;
            v40 = v33 - 64;
            do
            {
              v41 = *(unsigned __int8 *)(v33 + 16);
              if (v41 != 30)
                __asm { BR              X9 }
              v42 = *(_QWORD *)(v33 - 32 - 32 * v38);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v42);
              v182 = v21;
              v183 = v42;
              sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
              ++v38;
              v37 += 2;
              v40 += 32;
            }
            while (v39 != v38);
          }
          goto LABEL_194;
        }
        v43 = (_QWORD *)(v21 + 40);
        v44 = *(_QWORD **)(v21 + 40);
        if (v44 != (_QWORD *)(v21 + 40))
        {
          v45 = *(_QWORD *)(v21 + 48);
          v46 = v45 - 24;
          if (v45)
            v47 = v45 - 24;
          else
            v47 = 0;
          if (v45)
          {
            v48 = v156;
            if (*(_BYTE *)(v47 + 16) == 83)
            {
              while (1)
              {
                result = *(_QWORD *)v46;
                if (*(_BYTE *)(*(_QWORD *)v46 + 8) == 13)
                {
                  v49 = *(_QWORD *)(v46 + 40);
                  if (v49 == v158)
                  {
                    v55 = *(_DWORD *)(v46 + 20);
                    v56 = v55 & 0x7FFFFFF;
                    if ((v55 & 0x7FFFFFF) != 0)
                    {
                      v57 = 0;
                      while (1)
                      {
                        v58 = v46 - 32 * v56;
                        if ((v55 & 0x40000000) != 0)
                          v58 = *(_QWORD *)(v46 - 8);
                        if (*(_QWORD *)(v58 + 32 * *(unsigned int *)(v46 + 60) + 8 * v57) == v155)
                          break;
                        if (v56 == ++v57)
                          goto LABEL_69;
                      }
                    }
                    else
                    {
LABEL_69:
                      LODWORD(v57) = -1;
                    }
                    if ((v55 & 0x40000000) != 0)
                      v59 = *(_QWORD *)(v46 - 8);
                    else
                      v59 = v46 - 32 * v56;
                    v60 = *(unsigned __int8 **)(v59 + 32 * v57);
                    if (!v60)
                      goto LABEL_113;
LABEL_103:
                    v71 = (_QWORD *)*v43;
                    if ((_QWORD *)*v43 == v43)
                    {
                      v73 = 0;
                    }
                    else
                    {
                      if (v71)
                        v72 = (unsigned __int8 *)(v71 - 3);
                      else
                        v72 = 0;
                      if (v72[16] - 29 >= 0xB)
                        v73 = 0;
                      else
                        v73 = (const llvm::Instruction *)v72;
                    }
                    result = llvm::DominatorTree::dominates(v48, (const llvm::Value *)v60, v73);
                    if ((_DWORD)result)
                    {
                      v74 = sub_1C5B552A8((uint64_t)v60, (uint64_t)v164, (uint64_t)&v160);
                      v184 = v46;
                      result = (uint64_t)sub_1C4EAD954(v164, &v184);
                      *(_QWORD *)(result + 8) = v74;
                    }
                    goto LABEL_113;
                  }
                  v50 = *(_QWORD *)(v49 + 8);
                  if (v50)
                  {
                    while (1)
                    {
                      v51 = *(_QWORD *)(v50 + 24);
                      v52 = *(unsigned __int8 *)(v51 + 16);
                      v53 = v51 && v52 >= 0x1C;
                      if (v53 && v52 - 29 < 0xB)
                        break;
                      v50 = *(_QWORD *)(v50 + 8);
                      if (!v50)
                        goto LABEL_102;
                    }
                    v61 = 0;
LABEL_74:
                    v62 = *(_QWORD *)(v51 + 40);
                    v184 = v62;
                    v185 = v49;
                    v182 = 0;
                    result = sub_1C5B554C8(v171, &v184, &v182);
                    if (!(_DWORD)result)
                      goto LABEL_85;
                    v63 = *(_DWORD *)(v46 + 20);
                    v64 = v63 & 0x7FFFFFF;
                    if ((v63 & 0x7FFFFFF) != 0)
                    {
                      v65 = 0;
                      while (1)
                      {
                        v66 = v46 - 32 * v64;
                        if ((v63 & 0x40000000) != 0)
                          v66 = *(_QWORD *)(v46 - 8);
                        if (*(_QWORD *)(v66 + 32 * *(unsigned int *)(v46 + 60) + 8 * v65) == v62)
                          break;
                        if (v64 == ++v65)
                          goto LABEL_81;
                      }
                    }
                    else
                    {
LABEL_81:
                      LODWORD(v65) = -1;
                    }
                    v67 = (v63 & 0x40000000) != 0 ? *(_QWORD *)(v46 - 8) : v46 - 32 * v64;
                    v60 = *(unsigned __int8 **)(v67 + 32 * v65);
                    if (v60[16] - 11 < 2)
                    {
LABEL_85:
                      v60 = v61;
LABEL_86:
                      v48 = v156;
                      goto LABEL_87;
                    }
                    if (!v61)
                      goto LABEL_86;
                    v102 = v61 == v60;
                    v48 = v156;
                    if (!v102)
                      goto LABEL_113;
LABEL_87:
                    while (1)
                    {
                      v50 = *(_QWORD *)(v50 + 8);
                      if (!v50)
                        break;
                      v51 = *(_QWORD *)(v50 + 24);
                      v68 = *(unsigned __int8 *)(v51 + 16);
                      if (v51)
                        v69 = v68 >= 0x1C;
                      else
                        v69 = 0;
                      if (v69 && v68 - 29 < 0xB)
                      {
                        v61 = v60;
                        goto LABEL_74;
                      }
                    }
                    if (v60)
                      goto LABEL_103;
                    result = *(_QWORD *)v46;
                  }
LABEL_102:
                  result = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)result, v22);
                  v60 = (unsigned __int8 *)result;
                  if (result)
                    goto LABEL_103;
                }
LABEL_113:
                v75 = *(_QWORD *)(v46 + 32);
                v46 = v75 - 24;
                if (v75)
                  v76 = v75 - 24;
                else
                  v76 = 0;
                if (!v75 || *(_BYTE *)(v76 + 16) != 83)
                {
                  v44 = (_QWORD *)*v43;
                  break;
                }
              }
            }
          }
          if (v44 != v43)
          {
            v77 = v44 == 0;
            if (v44)
              v78 = (uint64_t)(v44 - 3);
            else
              v78 = 0;
            v79 = *(unsigned __int8 *)(v78 + 16);
            if ((v79 - 40) >= 0xFFFFFFF5)
              v80 = v78;
            else
              v80 = 0;
            v81 = *(unsigned __int8 *)(v80 + 16);
            if ((v79 - 40) < 0xFFFFFFF5)
              v77 = 1;
            if (v81 == 30 && !v77)
            {
              if ((*(_DWORD *)(v80 + 20) & 0x7FFFFFF) != 3
                || (v82 = *(_BYTE **)(v80 - 96)) == 0
                || (v83 = *(_QWORD *)(v80 - 32)) == 0
                || (v84 = *(_QWORD *)(v80 - 64)) == 0)
              {
LABEL_152:
                if (v79 != 30)
                  __asm { BR              X10 }
                if ((*(_DWORD *)(v78 + 20) & 0x7FFFFFF) == 3)
                  v93 = 2;
                else
                  v93 = 1;
                v94 = 0;
                v95 = 0;
                v96 = v93;
                v97 = v78 - 64;
                do
                {
                  v98 = *(unsigned __int8 *)(v78 + 16);
                  if (v98 != 30)
                    __asm { BR              X9 }
                  v99 = *(_QWORD *)(v78 - 32 - 32 * v95);
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v99);
                  v182 = v21;
                  v183 = v99;
                  sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                  ++v95;
                  v94 += 2;
                  v97 += 32;
                }
                while (v96 != v95);
                goto LABEL_194;
              }
              if (v82[16] != 81 || *(_BYTE *)(*(_QWORD *)v82 + 8) != 13)
              {
                v118 = *((unsigned __int8 *)v44 - 8);
                v119 = v118 - 29;
                if (v118 != 30)
                {
                  v120 = 2;
                  switch(v119)
                  {
                    case 1:
                      goto LABEL_279;
                    case 2:
                      v120 = (*((_DWORD *)v44 - 1) >> 1) & 0x3FFFFFF;
                      goto LABEL_228;
                    case 3:
                    case 9:
                      v120 = (*((_DWORD *)v44 - 1) & 0x7FFFFFF) - 1;
                      goto LABEL_228;
                    case 4:
                      goto LABEL_201;
                    case 7:
                      v120 = *((_WORD *)v44 - 3) & 1;
                      goto LABEL_228;
                    case 8:
                      v120 = 1;
                      goto LABEL_201;
                    case 10:
                      v120 = *((_DWORD *)v44 + 14) + 1;
LABEL_228:
                      if (!v120)
                        goto LABEL_194;
                      goto LABEL_201;
                    default:
                      goto LABEL_194;
                  }
                }
                if ((*((_DWORD *)v44 - 1) & 0x7FFFFFF) == 3)
                  v120 = 2;
                else
                  v120 = 1;
LABEL_201:
                v121 = 0;
                v122 = 0;
                v123 = v120;
                v124 = v44 - 11;
                do
                {
                  v125 = *((unsigned __int8 *)v44 - 8);
                  if (v125 != 30)
                    __asm { BR              X9 }
                  v126 = v44[-4 * v122 - 7];
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v126);
                  v182 = v21;
                  v183 = v126;
                  sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                  ++v122;
                  v121 += 2;
                  v124 += 4;
                }
                while (v123 != v122);
                goto LABEL_194;
              }
              result = sub_1C5B552A8((uint64_t)v82, (uint64_t)v164, (uint64_t)&v160);
              if ((_BYTE *)result == v82)
              {
                v127 = (_QWORD *)*v43;
                if ((_QWORD *)*v43 != v43)
                {
                  if (v127)
                    v128 = v127 - 3;
                  else
                    v128 = 0;
                  v129 = *((unsigned __int8 *)v128 + 16);
                  v130 = v129 - 29;
                  if (v129 != 30)
                  {
                    v131 = 2;
                    switch(v130)
                    {
                      case 1:
                        goto LABEL_279;
                      case 2:
                        v131 = (*((_DWORD *)v128 + 5) >> 1) & 0x3FFFFFF;
                        goto LABEL_245;
                      case 3:
                      case 9:
                        v131 = (*((_DWORD *)v128 + 5) & 0x7FFFFFF) - 1;
                        goto LABEL_245;
                      case 4:
                        goto LABEL_218;
                      case 7:
                        v131 = *((_WORD *)v128 + 9) & 1;
                        goto LABEL_245;
                      case 8:
                        v131 = 1;
                        goto LABEL_218;
                      case 10:
                        v131 = *((_DWORD *)v128 + 20) + 1;
LABEL_245:
                        if (!v131)
                          goto LABEL_194;
                        goto LABEL_218;
                      default:
                        goto LABEL_194;
                    }
                  }
                  if ((*((_DWORD *)v128 + 5) & 0x7FFFFFF) == 3)
                    v131 = 2;
                  else
                    v131 = 1;
LABEL_218:
                  v132 = 0;
                  v133 = 0;
                  v134 = v131;
                  v135 = v128 - 8;
                  do
                  {
                    v136 = *((unsigned __int8 *)v128 + 16);
                    if (v136 != 30)
                      __asm { BR              X9 }
                    v137 = v128[-4 * v133 - 4];
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v137);
                    v182 = v21;
                    v183 = v137;
                    sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                    ++v133;
                    v132 += 2;
                    v135 += 4;
                  }
                  while (v134 != v133);
                }
                goto LABEL_194;
              }
              v85 = *(unsigned __int8 *)(result + 16);
              if ((v85 - 11) <= 1)
              {
                v86 = sub_1C477672C(v150, v83);
                v87 = *(_QWORD *)(a1 + 64);
                v88 = 72;
                if (v87 == *(_QWORD *)(a1 + 56))
                  v88 = 76;
                if (v86 == (_QWORD *)(v87 + 8 * *(unsigned int *)(a1 + v88)))
                  goto LABEL_194;
                v89 = sub_1C477672C(v150, v84);
                v90 = *(_QWORD *)(a1 + 64);
                v91 = 72;
                if (v90 == *(_QWORD *)(a1 + 56))
                  v91 = 76;
                if (v89 == (_QWORD *)(v90 + 8 * *(unsigned int *)(a1 + v91)))
                  goto LABEL_194;
LABEL_225:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v83);
                v182 = v21;
                v183 = v83;
LABEL_193:
                sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                goto LABEL_194;
              }
              if (v85 != 16)
              {
                v138 = (_QWORD *)*v43;
                if ((_QWORD *)*v43 != v43)
                {
                  if (v138)
                    v139 = v138 - 3;
                  else
                    v139 = 0;
                  v140 = *((unsigned __int8 *)v139 + 16);
                  v141 = v140 - 29;
                  if (v140 != 30)
                  {
                    v142 = 2;
                    switch(v141)
                    {
                      case 1:
                        goto LABEL_279;
                      case 2:
                        v142 = (*((_DWORD *)v139 + 5) >> 1) & 0x3FFFFFF;
                        goto LABEL_249;
                      case 3:
                      case 9:
                        v142 = (*((_DWORD *)v139 + 5) & 0x7FFFFFF) - 1;
                        goto LABEL_249;
                      case 4:
                        goto LABEL_238;
                      case 7:
                        v142 = *((_WORD *)v139 + 9) & 1;
                        goto LABEL_249;
                      case 8:
                        v142 = 1;
                        goto LABEL_238;
                      case 10:
                        v142 = *((_DWORD *)v139 + 20) + 1;
LABEL_249:
                        if (!v142)
                          goto LABEL_194;
                        goto LABEL_238;
                      default:
                        goto LABEL_194;
                    }
                  }
                  if ((*((_DWORD *)v139 + 5) & 0x7FFFFFF) == 3)
                    v142 = 2;
                  else
                    v142 = 1;
LABEL_238:
                  v143 = 0;
                  v144 = 0;
                  v145 = v142;
                  v146 = v139 - 8;
                  do
                  {
                    v147 = *((unsigned __int8 *)v139 + 16);
                    if (v147 != 30)
                      __asm { BR              X9 }
                    v148 = v139[-4 * v144 - 4];
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v148);
                    v182 = v21;
                    v183 = v148;
                    sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                    ++v144;
                    v143 += 2;
                    v146 += 4;
                  }
                  while (v145 != v144);
                }
                goto LABEL_194;
              }
              if (llvm::Constant::isAllOnesValue((llvm::Constant *)result))
                goto LABEL_225;
LABEL_192:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v84);
              v182 = v21;
              v183 = v84;
              goto LABEL_193;
            }
            v92 = v81 != 31 || v77;
            if ((v92 & 1) == 0)
            {
              v100 = *(_DWORD *)(v80 + 20);
              if ((v100 & 0x40000000) != 0)
                v101 = *(uint64_t **)(v80 - 8);
              else
                v101 = (uint64_t *)(v80 - 32 * (v100 & 0x7FFFFFF));
              result = sub_1C5B552A8(*v101, (uint64_t)v164, (uint64_t)&v160);
              if (result)
                v102 = *(_BYTE *)(result + 16) == 16;
              else
                v102 = 0;
              if (!v102)
              {
                v103 = (_QWORD *)*v43;
                if ((_QWORD *)*v43 != v43)
                {
                  if (v103)
                    v104 = v103 - 3;
                  else
                    v104 = 0;
                  v105 = *((unsigned __int8 *)v104 + 16);
                  v106 = v105 - 29;
                  if (v105 != 30)
                  {
                    v107 = 2;
                    switch(v106)
                    {
                      case 1:
LABEL_279:
                        __break(1u);
                        return result;
                      case 2:
                        v107 = (*((_DWORD *)v104 + 5) >> 1) & 0x3FFFFFF;
                        goto LABEL_208;
                      case 3:
                      case 9:
                        v107 = (*((_DWORD *)v104 + 5) & 0x7FFFFFF) - 1;
                        goto LABEL_208;
                      case 4:
                        goto LABEL_180;
                      case 7:
                        v107 = *((_WORD *)v104 + 9) & 1;
                        goto LABEL_208;
                      case 8:
                        v107 = 1;
                        goto LABEL_180;
                      case 10:
                        v107 = *((_DWORD *)v104 + 20) + 1;
LABEL_208:
                        if (!v107)
                          goto LABEL_194;
                        goto LABEL_180;
                      default:
                        goto LABEL_194;
                    }
                  }
                  if ((*((_DWORD *)v104 + 5) & 0x7FFFFFF) == 3)
                    v107 = 2;
                  else
                    v107 = 1;
LABEL_180:
                  v108 = 0;
                  v109 = 0;
                  v110 = v107;
                  v111 = v104 - 8;
                  do
                  {
                    v112 = *((unsigned __int8 *)v104 + 16);
                    if (v112 != 30)
                      __asm { BR              X9 }
                    v113 = v104[-4 * v109 - 4];
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v173, v113);
                    v182 = v21;
                    v183 = v113;
                    sub_1C5B55444((uint64_t)v171, &v182, (uint64_t)&v184);
                    ++v109;
                    v108 += 2;
                    v111 += 4;
                  }
                  while (v110 != v109);
                }
                goto LABEL_194;
              }
              sub_1C4E5D490(v80, result);
              v115 = *(_DWORD *)(v80 + 20);
              if ((v115 & 0x40000000) != 0)
                v116 = *(_QWORD *)(v80 - 8);
              else
                v116 = v80 - 32 * (v115 & 0x7FFFFFF);
              if (v114 == 4294967294)
                v117 = 1;
              else
                v117 = (2 * v114 + 3);
              v84 = *(_QWORD *)(v116 + 32 * v117);
              goto LABEL_192;
            }
            if ((v79 - 29) <= 0xA)
              goto LABEL_152;
          }
        }
LABEL_194:
        v20 = v159;
        if (v159 == v157)
          goto LABEL_271;
      }
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v27 + v29++;
        v27 = v30 & v26;
        v28 = *(_QWORD *)(v25 + 16 * v27);
        if (v21 == v28)
          goto LABEL_28;
      }
LABEL_29:
      v31 = 0;
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t sub_1C5B5514C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLoopPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Delete dead loops";
  *(_QWORD *)(v3 + 8) = 17;
  *(_QWORD *)(v3 + 16) = "loop-deletion";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &unk_1ED81E580;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5B558E0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5B551E0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81E580;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81952C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81E588);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B5514C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81E588, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B552A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  llvm *v8;
  llvm::UndefValue *v9;
  uint64_t v10;
  llvm::Constant *v11;
  _BOOL4 isAllOnesValue;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1;
  v15 = a1;
  if (*(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    v16 = a1;
    v17 = 0;
    if (!sub_1C4926528(a2, &v16, &v17) || v17 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
    {
      v6 = *(unsigned __int8 *)(v3 + 16);
      if (v6 >= 0x1C && v6 - 59 >= 0xFFFFFFEE)
      {
        sub_1C5B552A8(*(_QWORD *)(v3 - 64), a2, a3);
        sub_1C5B552A8(*(_QWORD *)(v3 - 32), a2, a3);
        v10 = sub_1C4E6D628(*(unsigned __int8 *)(v3 + 16) - 28);
      }
      else if (v6 == 85)
      {
        v11 = (llvm::Constant *)sub_1C5B552A8(*(_QWORD *)(v3 - 96), a2, a3);
        v10 = 0;
        if (v11 && *((_BYTE *)v11 + 16) == 16)
        {
          isAllOnesValue = llvm::Constant::isAllOnesValue(v11);
          v13 = -32;
          if (isAllOnesValue)
            v13 = -64;
          v10 = sub_1C5B552A8(*(_QWORD *)(v3 + v13), a2, a3);
        }
      }
      else if (v6 == 81)
      {
        v8 = (llvm *)sub_1C5B552A8(*(_QWORD *)(v3 - 64), a2, a3);
        v9 = (llvm::UndefValue *)sub_1C5B552A8(*(_QWORD *)(v3 - 32), a2, a3);
        v10 = (uint64_t)sub_1C4E66730(*(_WORD *)(v3 + 18) & 0x3F, v8, v9, a3, 3);
      }
      else
      {
        v10 = 0;
      }
      if (v10)
        v3 = v10;
      sub_1C509B72C((uint64_t *)a2, &v15)[1] = v3;
    }
    else
    {
      return *(_QWORD *)(v17 + 8);
    }
  }
  return v3;
}

uint64_t sub_1C5B55444@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C5B554C8((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5B556B0(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C5B554C8(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;
  int v23;
  int v24;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = (*a2 >> 4) ^ (*a2 >> 9);
    v23 = (a2[2] >> 4) ^ (a2[2] >> 9);
    v24 = v7;
    v8 = sub_1C5B555BC(&v24, &v23);
    v9 = v4 - 1;
    v10 = (v4 - 1) & v8;
    v11 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)(v6 + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    if (*(_QWORD *)a2 == *v12 && v11 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18 && v13 == -8192)
          v16 = v12;
        v20 = v10 + v17++;
        v10 = v20 & v9;
        v12 = (_QWORD *)(v6 + 16 * (v20 & v9));
        v13 = *v12;
        v14 = v12[1];
        if (*(_QWORD *)a2 == *v12 && v11 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a3 = v12;
  return result;
}

unint64_t sub_1C5B555BC(int *a1, int *a2)
{
  int *v2;
  int *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C517CF98((char *)v11, 0, v11, (char *)v12, v3, v2);
}

_QWORD *sub_1C5B556B0(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_7;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_7:
    sub_1C5B5576C(a1, v7);
    v9 = 0;
    sub_1C5B554C8((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C5B5576C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C5B5582C(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
}

void sub_1C5B5582C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_1C85F2160, 16 * v6);
  while (a2 != a3)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v7 != -4096) && (*(_QWORD *)a2 != -8192 || v7 != -8192))
    {
      v8 = 0;
      sub_1C5B554C8((uint64_t *)a1, (_DWORD *)a2, &v8);
      *v8 = *(_OWORD *)a2;
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 16;
  }
}

uint64_t sub_1C5B558E0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B551E0(v0);
}

void sub_1C5B5590C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B55930(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B55964(llvm::LoopPass *a1, const llvm::Loop *a2, llvm::LPPassManager *a3)
{
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  int32x2_t *v12;
  char **v13;
  char *v14;
  llvm::Loop *v15;
  int32x2_t *v16;
  uint64_t AnalysisPass;
  uint64_t v18;
  llvm::LoopInfo *v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE v27[16];
  uint64_t *v28;

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::DominatorTreeWrapperPass::ID);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ScalarEvolutionWrapperPass::ID);
  v12 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::LoopInfoWrapperPass::ID);
  v15 = (llvm::Loop *)(v9 + 32);
  v16 = (int32x2_t *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::LoopInfoWrapperPass::ID)+ 32);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass
    && (v18 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v19 = *(llvm::LoopInfo **)(v18 + 32);
  }
  else
  {
    v19 = 0;
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v27, *(const llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  v20 = sub_1C5B53178((uint64_t)a2, v15, v12, v16, v19, (llvm::OptimizationRemarkEmitter *)v27);
  if (v20 == 2
    || ((v21 = v20,
         v22 = sub_1C5B53EC0((uint64_t)a2, v15, (llvm::ScalarEvolution *)v12, (llvm::ScalarEvolution *)v16, v19),
         v21 != 1)
      ? (v23 = v22 == 1)
      : (v23 = 1),
        !v23 ? (v6 = 0) : (v6 = 1),
        v22 == 2))
  {
    llvm::LPPassManager::markLoopAsDeleted(a3, a2);
    v6 = 1;
  }
  v24 = v28;
  v28 = 0;
  if (v24)
  {
    v25 = *v24;
    *v24 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    MEMORY[0x1CAA32FC0](v24, 0x20C4093837F09);
  }
  return v6;
}

__n128 sub_1C5B55B5C(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81E4C0, "loop-deletion-enable-symbolic-execution", 0x27uLL);
  word_1ED81E4CA = (32 * (*a1 & 3)) | word_1ED81E4CA & 0xFF9F;
  v6 = *a2;
  byte_1ED81E540 = **a2;
  byte_1ED81E551 = 1;
  byte_1ED81E550 = *v6;
  result = *a3;
  xmmword_1ED81E4E0 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5B55BE0()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Break backedge through symbolic execution of 1st iteration attempting to prove that"
                                     " the backedge is never taken";
  v1.n128_u64[1] = 111;
  sub_1C6319F7C(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81E4C0, &dword_1C475E000);
}

uint64_t sub_1C5B55C48(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v2);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v3);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Data Prefetch";
  *(_QWORD *)(v5 + 8) = 18;
  *(_QWORD *)(v5 + 16) = "loop-data-prefetch";
  *(_QWORD *)(v5 + 24) = 18;
  *(_QWORD *)(v5 + 32) = &unk_1ED81E590;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B56E00;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t llvm::createLoopDataPrefetchPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5B55D28(v1);
}

uint64_t sub_1C5B55D28(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81E590;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8195378;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81E598);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B55C48;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81E598, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B55DF0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  const llvm::Loop *v21;
  llvm::BasicBlock **v22;
  llvm::BasicBlock **v23;
  int v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int SmallConstantMaxTripCount;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned __int16 *SCEVIter;
  BOOL v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  void **v65;
  char *v66;
  char *v67;
  __int128 v68;
  unint64_t v69;
  int64_t v70;
  unsigned int v71;
  char *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD *v91;
  unsigned int v92;
  _QWORD *v93;
  unsigned int v94;
  size_t __n;
  _BYTE *v96;
  _BYTE v97[64];
  char *v98;
  char *v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  _BYTE v106[64];
  void *__p;
  char *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  void *v115;
  _BYTE *v116;
  void *v117;
  void *__src;
  unsigned int v119;
  unsigned int v120;
  void *v121;
  _BYTE *v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  void *v133;
  uint64_t v134;
  int v135;
  char v136;
  void *v137;
  uint64_t v138;
  void *v139[94];
  void *v140;
  uint64_t v141;
  _BYTE v142[512];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = &qword_1ED81E000;
  if (word_1ED81E668)
  {
    if (!dword_1ED81E6E0)
      goto LABEL_200;
  }
  else if (!(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 784))(**(_QWORD **)(a1 + 32)))
  {
    goto LABEL_200;
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(v3 + 24);
  v89 = *(uint64_t **)(v3 + 32);
  if (v4 != v89)
  {
    v5 = 0;
    v6 = &qword_1ED81E000;
    while (1)
    {
      v90 = v4;
      v123 = *v4;
      sub_1C4EA1748(&v123, (uint64_t)&v110);
      v7 = v106;
      v101 = v106;
      v8 = v111;
      if (v111 == v110)
      {
        v102 = v106;
        v9 = v111;
      }
      else
      {
        v85 = v112;
        v7 = malloc_type_malloc(8 * v112, 0x4065EBACuLL);
        if (!v7)
        {
          if (v85 || (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v6 = &qword_1ED81E000, !v7))
LABEL_199:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        v102 = v7;
        v9 = v110;
        v8 = v111;
      }
      v10 = v113;
      v103 = v112;
      if (v8 == v9)
        v11 = v113;
      else
        v11 = v112;
      if (v11)
      {
        memmove(v7, v8, 8 * v11);
        v10 = v113;
      }
      v104 = v10;
      v105 = v114;
      v108 = 0;
      v109 = 0;
      __p = 0;
      sub_1C4D6CDA0(&__p, v115, v116, 0xAAAAAAAAAAAAAAABLL * ((v116 - (_BYTE *)v115) >> 3));
      v12 = v97;
      v13 = __src;
      if (__src == v117)
      {
        v96 = v97;
        v14 = __src;
      }
      else
      {
        v86 = v119;
        v12 = malloc_type_malloc(8 * v119, 0x4065EBACuLL);
        if (!v12)
        {
          if (v86)
            goto LABEL_199;
          v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          v6 = &qword_1ED81E000;
          if (!v12)
            goto LABEL_199;
        }
        v96 = v12;
        v14 = v117;
        v13 = __src;
      }
      if (v13 == v14)
        v15 = v120;
      else
        v15 = v119;
      if (v15)
        memmove(v12, v13, 8 * v15);
      v99 = 0;
      v100 = 0;
      v98 = 0;
      sub_1C4D6CDA0(&v98, v121, v122, 0xAAAAAAAAAAAAAAABLL * ((v122 - (_BYTE *)v121) >> 3));
      while (1)
      {
        if (v108 - (_BYTE *)__p != v99 - v98)
          goto LABEL_36;
        if (__p == v108)
          break;
        v16 = v98 + 8;
        v17 = (char *)__p + 8;
        while (1)
        {
          v18 = v17 - 8;
          if (*((_QWORD *)v17 - 1) != *((_QWORD *)v16 - 1))
            break;
          v19 = v16[8];
          if (v17[8])
            v20 = v19 == 0;
          else
            v20 = 1;
          if (v20)
          {
            if ((v17[8] == 0) == (v19 != 0))
              break;
          }
          else if (*(_QWORD *)v17 != *(_QWORD *)v16)
          {
            break;
          }
          v16 += 24;
          v17 += 24;
          if (v18 + 24 == v108)
            goto LABEL_172;
        }
LABEL_36:
        v21 = (const llvm::Loop *)*((_QWORD *)v108 - 3);
        if (*((_QWORD *)v21 + 1) != *((_QWORD *)v21 + 2))
          goto LABEL_171;
        v132 = &v136;
        v133 = &v136;
        v134 = 32;
        v135 = 0;
        llvm::CodeMetrics::collectEphemeralValues((uint64_t)v21, *(llvm::AssumptionCache **)a1, (llvm::SmallPtrSetImplBase *)&v132);
        v125 = 0;
        v124 = 0;
        v129 = 0;
        v127 = 0;
        v128 = 0;
        v126 = 0;
        v130 = 0;
        v131 = 0;
        v22 = (llvm::BasicBlock **)*((_QWORD *)v21 + 4);
        v23 = (llvm::BasicBlock **)*((_QWORD *)v21 + 5);
        if (v23 == v22)
        {
          v31 = 0;
          LOBYTE(v24) = 0;
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = *v22;
            v26 = (uint64_t)*v22 + 40;
            for (i = *((_QWORD *)*v22 + 6); i != v26; i = *(_QWORD *)(i + 8))
            {
              v28 = i - 24;
              if (!i)
                v28 = 0;
              v29 = *(unsigned __int8 *)(v28 + 16);
              if (v29 == 84 || v29 == 33)
              {
                v30 = *(_QWORD *)(v28 - 32);
                if (v30 && !*(_BYTE *)(v30 + 16) && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v28 + 72))
                {
                  if (*(_DWORD *)(v30 + 36) == 240)
                  {
                    v6 = &qword_1ED81E000;
                    goto LABEL_169;
                  }
                  v24 |= (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 176))(**(_QWORD **)(a1 + 32));
                }
                else
                {
                  v24 = 1;
                }
              }
            }
            llvm::CodeMetrics::analyzeBasicBlock((uint64_t)&v124, v25, *(_QWORD **)(a1 + 32), &v132, 0);
            ++v22;
          }
          while (v22 != v23);
          v31 = v126;
          v6 = &qword_1ED81E000;
        }
        if (v31 <= 1)
          v32 = 1;
        else
          v32 = v31;
        if (*((_WORD *)v2 + 820))
          v33 = dword_1ED81E6E0;
        else
          v33 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 784))(**(_QWORD **)(a1 + 32));
        v34 = v33 / v32;
        if (v32 > v33)
          v34 = 1;
        v92 = v34;
        if (word_1ED81E7E8)
          v35 = dword_1ED81E860;
        else
          v35 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 800))(**(_QWORD **)(a1 + 32));
        if (v92 <= v35)
        {
          SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount(*(const llvm::Loop ***)(a1 + 24), v21);
          if (!SmallConstantMaxTripCount || SmallConstantMaxTripCount >= v92 + 1)
          {
            v88 = v5;
            v140 = v142;
            v141 = 0x1000000000;
            v37 = (_QWORD *)*((_QWORD *)v21 + 4);
            v91 = (_QWORD *)*((_QWORD *)v21 + 5);
            if (v91 == v37)
            {
              v94 = 0;
              v38 = 0;
              goto LABEL_136;
            }
            __n = (size_t)v21;
            v38 = 0;
            v94 = 0;
            while (1)
            {
              v93 = v37;
              v39 = *v37;
              v40 = v39 + 40;
              for (j = *(_QWORD *)(v39 + 48); j != v40; j = *(_QWORD *)(j + 8))
              {
                if (j)
                  v42 = j - 24;
                else
                  v42 = 0;
                v43 = *(unsigned __int8 *)(v42 + 16);
                if (!j || (v44 = j - 24, v43 != 60))
                {
                  if (v43 == 61)
                    v44 = v42;
                  else
                    v44 = 0;
                  if (!j || v43 != 61)
                    continue;
                  if (*((_WORD *)v6 + 724))
                  {
                    if (!byte_1ED81E620)
                      continue;
                  }
                  else if (!(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 808))(**(_QWORD **)(a1 + 32)))
                  {
                    continue;
                  }
                }
                v45 = *(_QWORD *)(v44 - 32);
                v46 = *(_DWORD *)(*(_QWORD *)v45 + 8);
                if ((v46 & 0xFE) == 0x12)
                  v46 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v45 + 16) + 8);
                if (v46 <= 0xFF)
                {
                  v38 = (v38 + 1);
                  if (!llvm::Loop::isLoopInvariant(__n, *(_QWORD *)(v44 - 32)))
                  {
                    v47 = *(_QWORD *)(a1 + 24);
                    v48 = *(_QWORD *)(v47 + 104);
                    v49 = *(_DWORD *)(v47 + 120);
                    if (!v49)
                      goto LABEL_98;
                    v50 = (v49 - 1) & ((v45 >> 4) ^ (v45 >> 9));
                    v51 = v48 + 48 * v50;
                    v52 = *(_QWORD *)(v51 + 24);
                    if (v52 != v45)
                    {
                      v53 = 1;
                      while (v52 != -4096)
                      {
                        v54 = v50 + v53++;
                        v50 = v54 & (v49 - 1);
                        v51 = v48 + 48 * v50;
                        v52 = *(_QWORD *)(v51 + 24);
                        if (v52 == v45)
                          goto LABEL_99;
                      }
LABEL_98:
                      v51 = v48 + 48 * v49;
                    }
LABEL_99:
                    if (v51 == v48 + 48 * v49 || (SCEVIter = *(unsigned __int16 **)(v51 + 40)) == 0)
                      SCEVIter = (unsigned __int16 *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v47, v45);
                    if (SCEVIter)
                      v56 = SCEVIter[12] == 7;
                    else
                      v56 = 0;
                    if (v56)
                    {
                      ++v94;
                      if ((_DWORD)v141)
                      {
                        v57 = (uint64_t *)v140;
                        v58 = 32 * v141;
                        while (1)
                        {
                          llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 24), (uint64_t)SCEVIter, *v57);
                          if (v59 && *(_WORD *)(v59 + 24) == 0)
                          {
                            v61 = *(_QWORD *)(v59 + 32);
                            v62 = *(_DWORD *)(v61 + 32);
                            v63 = v62 > 0x40
                                ? **(_QWORD **)(v61 + 24)
                                : (uint64_t)(*(_QWORD *)(v61 + 24) << -(char)v62) >> -(char)v62;
                            v64 = v63 >= 0 ? v63 : -v63;
                            if (v64 < (*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 760))(**(_QWORD **)(a1 + 32)))
                              break;
                          }
                          v57 += 4;
                          v58 -= 32;
                          if (!v58)
                            goto LABEL_122;
                        }
                        sub_1C5B571C4(v57, j - 24, *(_QWORD *)(a1 + 8), v64);
                        v6 = &qword_1ED81E000;
                      }
                      else
                      {
LABEL_122:
                        v137 = SCEVIter;
                        v138 = 0;
                        LOBYTE(v139[0]) = 0;
                        v139[1] = 0;
                        v65 = &v137;
                        sub_1C5B571C4(&v137, j - 24, 0, 0);
                        v66 = (char *)v140;
                        if (v141 >= HIDWORD(v141))
                        {
                          v69 = v141 + 1;
                          v6 = &qword_1ED81E000;
                          if (v140 <= &v137 && (char *)v140 + 32 * v141 > (char *)&v137)
                          {
                            v70 = (char *)&v137 - (_BYTE *)v140;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v142, v69, 32);
                            v66 = (char *)v140;
                            v65 = (void **)((char *)v140 + v70);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v142, v69, 32);
                            v65 = &v137;
                            v66 = (char *)v140;
                          }
                        }
                        else
                        {
                          v6 = &qword_1ED81E000;
                        }
                        v67 = &v66[32 * v141];
                        v68 = *((_OWORD *)v65 + 1);
                        *(_OWORD *)v67 = *(_OWORD *)v65;
                        *((_OWORD *)v67 + 1) = v68;
                        LODWORD(v141) = v141 + 1;
                      }
                    }
                    continue;
                  }
                }
              }
              v37 = v93 + 1;
              if (v93 + 1 == v91)
              {
LABEL_136:
                if (word_1ED81E728)
                  v71 = dword_1ED81E7A0;
                else
                  v71 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32)
                                                                                           + 792))(**(_QWORD **)(a1 + 32), v38, v94, v141, v24 & 1);
                v72 = (char *)v140;
                if ((_DWORD)v141)
                {
                  v73 = (char *)v140 + 32 * v141;
                  do
                  {
                    v74 = *(uint64_t **)(a1 + 24);
                    if (v71 < 2)
                      goto LABEL_142;
                    v75 = *(_QWORD *)v72;
                    v76 = *(_QWORD *)(*(_QWORD *)v72 + 40);
                    if (v76 == 2)
                    {
                      v77 = *(_QWORD *)(*(_QWORD *)(v75 + 32) + 8);
                    }
                    else
                    {
                      v82 = *(_QWORD *)(v75 + 32);
                      v137 = v139;
                      v138 = 0x300000000;
                      v83 = 8 * v76 - 8;
                      if ((unint64_t)v83 >= 0x19)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v83 >> 3, 8);
                        v84 = v138;
                      }
                      else
                      {
                        v84 = 0;
                      }
                      if (v76 != 1)
                      {
                        memcpy((char *)v137 + 8 * v84, (const void *)(v82 + 8), 8 * v76 - 8);
                        v84 = v138;
                      }
                      LODWORD(v138) = v84 + ((unint64_t)v83 >> 3);
                      v77 = sub_1C618AB20(v74, (uint64_t)&v137, *(uint64_t ***)(v75 + 48));
                      if (v137 != v139)
                        free(v137);
                      v6 = &qword_1ED81E000;
                    }
                    if (v77 && *(_WORD *)(v77 + 24) == 0)
                    {
                      v79 = *(_QWORD *)(v77 + 32);
                      v80 = *(_DWORD *)(v79 + 32);
                      if (v80 > 0x40)
                        v81 = **(_QWORD **)(v79 + 24);
                      else
                        v81 = (uint64_t)(*(_QWORD *)(v79 + 24) << -(char)v80) >> -(char)v80;
                      if (v81 < 0)
                        v81 = -v81;
                      if (v71 <= v81)
LABEL_142:
                        __asm { BR              X10 }
                    }
                    v72 += 32;
                  }
                  while (v72 != v73);
                  v72 = (char *)v140;
                }
                v5 = v88;
                if (v72 != v142)
                  free(v72);
                v2 = &qword_1ED81E000;
                break;
              }
            }
          }
        }
LABEL_169:
        MEMORY[0x1CAA32FB4](v127, 8);
        if (v133 != v132)
          free(v133);
LABEL_171:
        sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v101);
      }
LABEL_172:
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
      if (v96 != v97)
        free(v96);
      if (__p)
      {
        v108 = (char *)__p;
        operator delete(__p);
      }
      if (v102 != v101)
        free(v102);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      if (__src != v117)
        free(__src);
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      if (v111 != v110)
        free(v111);
      v4 = v90 + 1;
      if (v90 + 1 == v89)
        return v5 & 1;
    }
  }
LABEL_200:
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t sub_1C5B56E00()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B55D28(v0);
}

void sub_1C5B56E2C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B56E50(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

uint64_t sub_1C5B56F4C(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t *v2;
  llvm::Function *v3;
  char **v6;
  char *v7;
  uint64_t *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  llvm::AssumptionCacheTracker *v17;
  uint64_t AssumptionCache;
  void **v19;
  void *v20;
  uint64_t v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Function *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v3 = a2;
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v6 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::DominatorTreeWrapperPass::ID);
  v8 = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::DominatorTreeWrapperPass::ID);
  v9 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::LoopInfoWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::LoopInfoWrapperPass::ID);
  v12 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::ScalarEvolutionWrapperPass::ID);
  v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v15 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::AssumptionCacheTracker::ID);
  v17 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v17, v3);
  v19 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v21 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v22 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::TargetTransformInfoWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v30 = 0;
  v31 = 0;
  LODWORD(v32) = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v25 = *(_QWORD *)(v24 + 56);
  if (!v25)
  {
    sub_1C485C2F0();
LABEL_23:
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_19;
  }
  v2 = v8 + 4;
  v11 += 32;
  v8 = &v33;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v25 + 48))(&v29, v25, v3);
  v3 = (llvm::Function *)(v24 + 64);
  v26 = v29;
  if (*(_BYTE *)(v24 + 72))
  {
    v29 = 0;
    v27 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v26;
    if (!v27)
      goto LABEL_19;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v29;
    v29 = 0;
    if (!v28)
      goto LABEL_19;
    goto LABEL_23;
  }
  *(_QWORD *)(v24 + 64) = v29;
  *(_BYTE *)(v24 + 72) = 1;
LABEL_19:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v8);
  sub_1C4D8B52C(&v30);
  v30 = AssumptionCache;
  v31 = v2;
  v32 = v11;
  v33 = v14;
  v34 = v3;
  v35 = v21;
  return sub_1C5B55DF0((uint64_t)&v30);
}

_QWORD *sub_1C5B571C4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v5 = result;
  v6 = result[1];
  if (!v6)
  {
    result[3] = a2;
    result[1] = a2;
    v12 = *(_BYTE *)(a2 + 16) == 61;
LABEL_17:
    *((_BYTE *)v5 + 16) = v12;
    return result;
  }
  v8 = *(_QWORD *)(v6 + 40);
  if (v8 != *(_QWORD *)(a2 + 40))
  {
    result = (_QWORD *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a3, v8, *(_QWORD *)(a2 + 40));
    if (result != (_QWORD *)v8)
    {
      v10 = (_QWORD *)result[5];
      result += 5;
      v9 = v10;
      if (v10 == result)
      {
        v11 = 0;
      }
      else
      {
        if (v9)
          v11 = v9 - 3;
        else
          v11 = 0;
        if (*((unsigned __int8 *)v11 + 16) - 29 >= 0xB)
          v11 = 0;
      }
      v5[1] = v11;
    }
  }
  if (!a4 && *(_BYTE *)(a2 + 16) == 61)
  {
    v12 = 1;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1C5B57284()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v1 = 0;
  v2 = &v1;
  v4.n128_u64[0] = (unint64_t)"Prefetch write addresses";
  v4.n128_u64[1] = 24;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81E5A0, "loop-prefetch-writes", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81E5A0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Number of instructions to prefetch ahead";
  v4.n128_u64[1] = 40;
  LODWORD(v2) = 1;
  sub_1C631A1D0((__int128 *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81E660, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Min stride to add prefetches";
  v4.n128_u64[1] = 28;
  LODWORD(v2) = 1;
  sub_1C631A290((__int128 *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81E720, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Max number of iterations to prefetch ahead";
  v4.n128_u64[1] = 42;
  LODWORD(v2) = 1;
  sub_1C631A350((__int128 *)&v4, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81E7E0, &dword_1C475E000);
}

uint64_t llvm::LoopDistributePass::run@<X0>(llvm::Loop *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  llvm::OptimizationRemarkEmitter *v16;
  uint64_t v17;
  _BYTE v18[24];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, (uint64_t)a1) + 8;
  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, (uint64_t)a1) + 8;
  v16 = (llvm::OptimizationRemarkEmitter *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)a1)+ 8);
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, (uint64_t)a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, (uint64_t)a1) + 8;
  v10 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, (uint64_t)a1)
                 + 8);
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1) + 8;
  v12 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key, (uint64_t)a1)+ 8);
  v13 = operator new(0x48uLL);
  *v13 = &off_1E8195520;
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v6;
  v13[4] = v17;
  v13[5] = v7;
  v13[6] = v11;
  v13[7] = v10;
  v13[8] = v12;
  v19 = v13;
  sub_1C5B575B4(a1, v17, v6, v7, v16, v10, (uint64_t)v18);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v14 & 1) != 0)
  {
    sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return (*(uint64_t (**)(_QWORD *))(*v13 + 40))(v13);
}

void sub_1C5B575B4(llvm::Loop *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::OptimizationRemarkEmitter *a5, _QWORD *a6, uint64_t a7)
{
  void **v7;
  void **v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  llvm::Loop **v29;
  char v30;
  llvm::Loop **v31;
  uint64_t v32;
  _QWORD *v33;
  llvm::OptimizationRemarkEmitter *v34;
  uint64_t v35;
  llvm::Loop *v36;
  unsigned __int8 *StringMetadataForLoop;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  BOOL v41;
  char v42;
  uint64_t LoopLatch;
  uint64_t LoopPredecessor;
  uint64_t v45;
  uint64_t v46;
  llvm::BasicBlock *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  _DWORD *v68;
  unsigned int v69;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  char *v77;
  _DWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  llvm::Loop *v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  llvm::SmallPtrSetImplBase *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::SmallPtrSetImplBase *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  void **v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  int v171;
  BOOL v172;
  int v173;
  unint64_t *v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  char *v178;
  int v179;
  BOOL v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  BOOL v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  llvm::SmallPtrSetImplBase *v191;
  void **v192;
  void **v193;
  __int128 *v194;
  uint64_t v195;
  __int128 *v196;
  uint64_t v197;
  __int128 *v198;
  BOOL v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 *v207;
  int v208;
  const char *v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  BOOL v215;
  int v216;
  int *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  _DWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  __int128 *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int *v242;
  uint64_t v243;
  _DWORD *v244;
  uint64_t v245;
  unsigned int *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  BOOL v250;
  llvm::BasicBlock *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  unsigned __int8 *v255;
  llvm::BasicBlock *v256;
  BOOL v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  llvm::BasicBlock *v261;
  int v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  int32x2_t ****v272;
  int32x2_t *v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  int32x2_t *****v278;
  int32x2_t ****v279;
  int v280;
  int v281;
  llvm::BasicBlock *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  unint64_t v287;
  unint64_t *v288;
  uint64_t v289;
  int32x2_t *v290;
  unint64_t v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  unsigned __int8 *v300;
  llvm::User *v301;
  llvm::Type *v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  _QWORD *v312;
  uint64_t ExitingBlock;
  uint64_t v314;
  llvm::BasicBlock *v315;
  uint64_t v316;
  uint64_t i;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  uint64_t v324;
  int32x2_t *v325;
  unint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  _QWORD **v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  llvm::UndefValue *v339;
  uint64_t v340;
  _QWORD *v341;
  llvm::OptimizationRemarkEmitter *v342;
  uint64_t v343;
  llvm::Loop *v344;
  unsigned int v345;
  uint64_t v346;
  unsigned int v347;
  llvm::Loop *v348;
  unsigned int *LoopID;
  llvm::MDNode *FollowupLoopID;
  uint64_t v351;
  _QWORD *v352;
  void **v353;
  unint64_t v354;
  void **v355;
  void **v356;
  unint64_t v357;
  void **v358;
  uint64_t v359;
  __int128 *v360;
  llvm::Value *v361;
  llvm::Value *v362;
  unint64_t v363;
  _QWORD *v364;
  int v365;
  unsigned int *v366;
  uint64_t SinglePredecessor;
  unint64_t *v368;
  unsigned int *v369;
  unsigned int *v370;
  unsigned int v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  llvm::BasicBlock *v375;
  llvm::BasicBlock *ExitBlock;
  llvm::BasicBlock *v377;
  llvm::Loop **v378;
  llvm::Loop *v385[2];
  int v386[2];
  llvm::Value *v387;
  int v388[2];
  uint64_t v389;
  llvm::OptimizationRemarkEmitter *v390;
  _QWORD *v391;
  __int16 v392;
  _QWORD *v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396[2];
  int v397;
  llvm::Loop *v398;
  uint64_t v399;
  uint64_t v400;
  unsigned __int8 *v401;
  const void *v402[2];
  void *v403;
  uint64_t v404;
  _BYTE v405[64];
  void *v406;
  uint64_t v407;
  _DWORD v408[16];
  void *v409[2];
  _BYTE v410[32];
  void *v411;
  unsigned int v412;
  uint64_t v413;
  void *v414;
  void *v415;
  _DWORD v416[4];
  _BYTE v417[64];
  void *__p;
  _BYTE *v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  _QWORD v423[6];
  void *v424;
  unsigned int v425;
  void *v426;
  char *v427;
  uint64_t v428;
  void *p_src;
  void *__src;
  _QWORD *v431;
  int32x2_t ****v432;
  unint64_t v433;
  const char *v434;
  const char *v435;
  uint64_t v436;
  char v437;
  char v438;
  void *v439;
  uint64_t v440;
  void *v441;
  _BYTE *v442;
  void *v443;
  void *v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  void *v448;
  _BYTE *v449;
  char v450;
  int v451;
  uint64_t v452;
  uint64_t v453;

  v453 = *MEMORY[0x1E0C80C00];
  v403 = v405;
  v404 = 0x800000000;
  v7 = *(void ***)(a2 + 24);
  v8 = *(void ***)(a2 + 32);
  if (v7 == v8)
    return;
  v9 = a2;
  do
  {
    v411 = *v7;
    sub_1C4EA1748((uint64_t *)&v411, (uint64_t)&p_src);
    *(_QWORD *)&v421 = v423;
    v10 = __src;
    if (__src == p_src)
    {
      *((_QWORD *)&v421 + 1) = v423;
      v11 = v423;
      v12 = __src;
    }
    else
    {
      v27 = (int)v431;
      v11 = malloc_type_malloc(8 * v431, 0x4065EBACuLL);
      if (!v11 && (v27 || (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_64:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *((_QWORD *)&v421 + 1) = v11;
      v12 = p_src;
      v10 = __src;
    }
    v13 = HIDWORD(v431);
    LODWORD(v422) = (_DWORD)v431;
    if (v10 == v12)
      v14 = HIDWORD(v431);
    else
      v14 = v431;
    if (v14)
    {
      memmove(v11, v10, 8 * v14);
      v13 = HIDWORD(v431);
    }
    *(_QWORD *)((char *)&v422 + 4) = __PAIR64__(v432, v13);
    v427 = 0;
    v428 = 0;
    v426 = 0;
    sub_1C4D6CDA0(&v426, v441, v442, 0xAAAAAAAAAAAAAAABLL * ((v442 - (_BYTE *)v441) >> 3));
    v414 = v417;
    v15 = v444;
    if (v444 == v443)
    {
      v415 = v417;
      v16 = v417;
      v17 = v444;
    }
    else
    {
      v28 = v445;
      v16 = malloc_type_malloc(8 * v445, 0x4065EBACuLL);
      if (!v16)
      {
        if (v28)
          goto LABEL_64;
        v16 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v16)
          goto LABEL_64;
      }
      v415 = v16;
      v17 = v443;
      v15 = v444;
    }
    v18 = v446;
    v416[0] = v445;
    if (v15 == v17)
      v19 = v446;
    else
      v19 = v445;
    if (v19)
    {
      memmove(v16, v15, 8 * v19);
      v18 = v446;
    }
    v416[1] = v18;
    v416[2] = v447;
    v419 = 0;
    v420 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v448, v449, 0xAAAAAAAAAAAAAAABLL * ((v449 - (_BYTE *)v448) >> 3));
    while (1)
    {
      if (v427 - (_BYTE *)v426 != v419 - (_BYTE *)__p)
        goto LABEL_32;
      if (v426 == v427)
        break;
      v20 = (char *)__p + 8;
      v21 = (char *)v426 + 8;
      while (1)
      {
        v22 = v21 - 8;
        if (*((_QWORD *)v21 - 1) != *((_QWORD *)v20 - 1))
          break;
        v23 = v20[8];
        if (v21[8])
          v24 = v23 == 0;
        else
          v24 = 1;
        if (v24)
        {
          if ((v21[8] == 0) == (v23 != 0))
            break;
        }
        else if (*(_QWORD *)v21 != *(_QWORD *)v20)
        {
          break;
        }
        v20 += 24;
        v21 += 24;
        if (v22 + 24 == v427)
          goto LABEL_37;
      }
LABEL_32:
      v25 = *((_QWORD *)v427 - 3);
      if (*(_QWORD *)(v25 + 8) == *(_QWORD *)(v25 + 16))
      {
        v26 = v404;
        if (v404 >= (unint64_t)HIDWORD(v404))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v403, (uint64_t)v405, v404 + 1, 8);
          v26 = v404;
        }
        *((_QWORD *)v403 + v26) = v25;
        LODWORD(v404) = v404 + 1;
      }
      sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v421);
    }
LABEL_37:
    if (__p)
    {
      v419 = __p;
      operator delete(__p);
    }
    if (v415 != v414)
      free(v415);
    if (v426)
    {
      v427 = (char *)v426;
      operator delete(v426);
    }
    if (*((_QWORD *)&v421 + 1) != (_QWORD)v421)
      free(*((void **)&v421 + 1));
    if (v448)
    {
      v449 = v448;
      operator delete(v448);
    }
    if (v444 != v443)
      free(v444);
    if (v441)
    {
      v442 = v441;
      operator delete(v441);
    }
    if (__src != p_src)
      free(__src);
    ++v7;
  }
  while (v7 != v8);
  v29 = (llvm::Loop **)v403;
  if (!(_DWORD)v404)
    goto LABEL_637;
  v30 = 0;
  v31 = (llvm::Loop **)((char *)v403 + 8 * v404);
  v33 = a6;
  v32 = a7;
  v34 = a5;
  v35 = a4;
  while (1)
  {
    v36 = *v29;
    v385[0] = v36;
    v385[1] = a1;
    *(_QWORD *)v386 = v9;
    v387 = 0;
    *(_QWORD *)v388 = a3;
    v389 = v35;
    v390 = v34;
    v391 = v33;
    v392 = 0;
    StringMetadataForLoop = llvm::findStringMetadataForLoop(v36, "llvm.loop.distribute.enable", 0x1BuLL);
    if (v38)
    {
      v39 = *(_QWORD *)(*(_QWORD *)StringMetadataForLoop + 128);
      v40 = (_QWORD *)(v39 + 24);
      if (*(_DWORD *)(v39 + 32) >= 0x41u)
        v40 = (_QWORD *)*v40;
      v41 = *v40 != 0;
      LOBYTE(v392) = v41;
      HIBYTE(v392) = 1;
    }
    else
    {
      v41 = 0;
    }
    if (v38)
      v42 = v41;
    else
      v42 = byte_1ED81EC30;
    if (!v42)
      goto LABEL_100;
    if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v36))
      break;
    v48 = "MultipleExitBlocks";
    v49 = 18;
    v50 = "multiple exit blocks";
    v51 = 20;
LABEL_98:
    sub_1C5B59BCC((uint64_t)v385, v48, v49, v50, v51);
    v55 = 0;
LABEL_99:
    v30 |= v55;
LABEL_100:
    if (++v29 == v31)
    {
      v29 = (llvm::Loop **)v403;
LABEL_637:
      if (v29 != (llvm::Loop **)v405)
        free(v29);
      return;
    }
  }
  if ((llvm::Loop::isLoopSimplifyForm(v36) & 1) == 0)
  {
    v48 = "NotLoopSimplifyForm";
    v49 = 19;
    v50 = "loop is not in loop-simplify form";
    v51 = 33;
    goto LABEL_98;
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v36);
  if (!LoopLatch || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v36, LoopLatch))
  {
    v48 = "NotBottomTested";
    v49 = 15;
    v50 = "loop is not bottom tested";
    v51 = 25;
    goto LABEL_98;
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v36);
  if (!LoopPredecessor || (v45 = *(_QWORD *)(LoopPredecessor + 40), v45 == LoopPredecessor + 40))
  {
LABEL_87:
    v47 = 0;
    goto LABEL_95;
  }
  if (v45)
    v46 = v45 - 24;
  else
    v46 = 0;
  if (*(_BYTE *)(v46 + 16) != 30)
  {
    v47 = 0;
    switch(*(_BYTE *)(v46 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_95;
      case 0x1E:
        goto LABEL_641;
      case 0x1F:
        v52 = (*(_DWORD *)(v46 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v52 = (*(_DWORD *)(v46 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v52 = *(_DWORD *)(v46 + 80) + 1;
        break;
      default:
        goto LABEL_87;
    }
    if (v52 == 1)
      goto LABEL_94;
    goto LABEL_87;
  }
  if ((*(_DWORD *)(v46 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_87;
LABEL_94:
  v47 = (llvm::BasicBlock *)LoopPredecessor;
LABEL_95:
  v375 = v47;
  v53 = *(_QWORD *)(v32 + 24);
  if (v53)
  {
    v54 = (*(uint64_t (**)(uint64_t, llvm::Loop *))(*(_QWORD *)v53 + 48))(v53, v36);
    v387 = (llvm::Value *)v54;
    if (*(_BYTE *)(v54 + 48))
    {
      v48 = "MemOpsCanBeVectorized";
      v49 = 21;
      v50 = "memory operations are safe for vectorization";
      v51 = 44;
      goto LABEL_98;
    }
    v56 = v54;
    v378 = v31;
    v57 = *(_QWORD *)(v54 + 16);
    if (!*(_BYTE *)(v57 + 216) || (v58 = *(unsigned int *)(v57 + 232), !(_DWORD)v58))
    {
      sub_1C5B59BCC((uint64_t)v385, "NoUnsafeDeps", 12, "no unsafe dependences to isolate", 32);
      v55 = 0;
      v31 = v378;
      goto LABEL_99;
    }
    v393 = &v393;
    v394 = &v393;
    v396[0] = 0;
    v396[1] = 0;
    v395 = 0;
    v397 = 0;
    v398 = v36;
    v399 = v9;
    v374 = v9;
    v400 = a3;
    v414 = v416;
    v415 = (void *)0x800000000;
    v59 = *(uint64_t **)(v57 + 40);
    v60 = *(unsigned int *)(v57 + 48);
    if (v60 < 9)
    {
      v62 = 0;
      if ((_DWORD)v60)
      {
        v61 = v416;
        goto LABEL_109;
      }
      LODWORD(v415) = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v414, (uint64_t)v416, *(unsigned int *)(v57 + 48), 16);
      v61 = v414;
      v62 = v415;
LABEL_109:
      v63 = 8 * v60;
      v64 = &v61[4 * v62];
      do
      {
        v65 = *v59++;
        *(_QWORD *)v64 = v65;
        v64[2] = 0;
        v64 += 4;
        v63 -= 8;
      }
      while (v63);
      v58 = *(unsigned int *)(v57 + 232);
      v62 += v60;
      LODWORD(v415) = v62;
      if (!(_DWORD)v58)
      {
        v34 = a5;
        v35 = a4;
        v31 = v378;
        goto LABEL_122;
      }
    }
    v66 = *(unsigned int **)(v57 + 224);
    v67 = &v66[4 * v58];
    v34 = a5;
    v35 = a4;
    v68 = v414;
    v31 = v378;
    do
    {
      v69 = v66[2];
      if (v69 > 3 || v69 == 1)
      {
        ++v68[4 * *v66 + 2];
        v71 = (char *)&v68[4 * v66[1]];
        --*((_DWORD *)v71 + 2);
      }
      v66 += 4;
    }
    while (v66 != v67);
LABEL_122:
    if (byte_1ED81ECF0)
    {
      if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v33 + 584))(*v33, v56))
      {
        sub_1C5B59BCC((uint64_t)v385, "DoesNotImproveMemThroughput", 27, "Unlikely to improve memory throughput.", 38);
        v55 = 0;
LABEL_125:
        if (v414 != v416)
          free(v414);
        MEMORY[0x1CAA32FB4](v396[0], 8);
        if (v395)
        {
          v73 = v393;
          v72 = v394;
          v74 = *v394;
          *(_QWORD *)(v74 + 8) = v393[1];
          *(_QWORD *)v73[1] = v74;
          v395 = 0;
          if (v72 != &v393)
          {
            do
            {
              v75 = (_QWORD *)v72[1];
              sub_1C5B5A418((uint64_t)v72);
              v72 = v75;
            }
            while (v75 != &v393);
          }
        }
        v9 = v374;
        goto LABEL_99;
      }
      v62 = v415;
    }
    if (v62)
    {
      v76 = 0;
      v77 = (char *)v414 + 16 * v62;
      v78 = (char *)v414 + 8;
      while (1)
      {
        v80 = v78 - 2;
        v79 = *((_QWORD *)v78 - 1);
        if (!v76 && !*v78)
          break;
        if (!v395 || !*((_BYTE *)v393 + 112))
        {
          v81 = operator new(0x118uLL);
          v82 = (uint64_t)(v81 + 2);
          *v81 = 0;
          v81[1] = 0;
          v83 = v398;
          v84 = v79;
          v85 = 1;
LABEL_141:
          sub_1C5B5A1EC(v82, v84, (uint64_t)v83, v85);
          v86 = v393;
          *v81 = v393;
          v81[1] = &v393;
          v86[1] = v81;
          v393 = v81;
          v35 = a4;
          ++v395;
          goto LABEL_142;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v393 + 2), *((_QWORD *)v78 - 1));
LABEL_142:
        v87 = *v78;
        v78 += 4;
        v76 += v87;
        if (v80 + 4 == (_DWORD *)v77)
          goto LABEL_143;
      }
      v81 = operator new(0x118uLL);
      v82 = (uint64_t)(v81 + 2);
      *v81 = 0;
      v81[1] = 0;
      v83 = v398;
      v84 = v79;
      v85 = 0;
      goto LABEL_141;
    }
LABEL_143:
    llvm::findDefsUsedOutsideOfLoop(v36, (uint64_t)&v411);
    if (v412)
    {
      v88 = (uint64_t *)v411;
      v89 = 8 * v412;
      do
      {
        v90 = *v88++;
        v91 = operator new(0x118uLL);
        *v91 = 0;
        v91[1] = 0;
        sub_1C5B5A1EC((uint64_t)(v91 + 2), v90, (uint64_t)v398, 0);
        v92 = v393;
        *v91 = v393;
        v91[1] = &v393;
        v92[1] = v91;
        v93 = v395 + 1;
        v393 = v91;
        ++v395;
        v89 -= 8;
      }
      while (v89);
      v32 = a7;
    }
    else
    {
      v93 = v395;
      v32 = a7;
    }
    v34 = a5;
    v31 = v378;
    if ((v93 & 0xFFFFFFFE) == 0)
      goto LABEL_347;
    v94 = (uint64_t)v394;
    if (v394 == &v393)
      goto LABEL_193;
    v95 = 0;
    while (2)
    {
      v96 = v94 + 16;
      if (*(_BYTE *)(v94 + 112))
        v97 = 0;
      else
        v97 = v95 == 0;
      if (!v97)
      {
        if (v95 && !*(_BYTE *)(v94 + 112))
        {
          sub_1C5B5A2AC(v96, v95);
          v98 = *(_QWORD *)v94;
          v99 = *(_QWORD *)(v94 + 8);
          *(_QWORD *)(v98 + 8) = v99;
          **(_QWORD **)(v94 + 8) = v98;
          --v395;
          sub_1C5B5A418(v94);
          v94 = v99;
          v31 = v378;
          v96 = (uint64_t)v95;
          goto LABEL_160;
        }
        v96 = 0;
      }
      v94 = *(_QWORD *)(v94 + 8);
LABEL_160:
      v95 = (llvm::SmallPtrSetImplBase *)v96;
      if ((_QWORD **)v94 != &v393)
        continue;
      break;
    }
    v100 = (uint64_t)v394;
    if (!byte_1ED81E9F0 && v394 != &v393)
    {
      v101 = 0;
      while (1)
      {
        if (*(_BYTE *)(v100 + 112))
        {
          v102 = 1;
        }
        else
        {
          v103 = *(_QWORD *)(v100 + 24);
          v104 = 32;
          if (v103 == *(_QWORD *)(v100 + 16))
            v104 = 36;
          v105 = *(unsigned int *)(v100 + v104);
          if ((_DWORD)v105)
          {
            v106 = 8 * v105;
            v107 = *(unint64_t **)(v100 + 24);
            while (*v107 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v107;
              v106 -= 8;
              if (!v106)
                goto LABEL_190;
            }
          }
          else
          {
            v107 = *(unint64_t **)(v100 + 24);
          }
          v108 = (unint64_t *)(v103 + 8 * v105);
          if (v107 == v108)
            goto LABEL_190;
          v102 = 0;
          v109 = *v107;
LABEL_176:
          if (*(_BYTE *)(v109 + 16) == 61)
          {
            v110 = *(_QWORD *)(v109 + 40);
            v111 = v400;
            v112 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v398);
            v113 = v111;
            v35 = a4;
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v113, v110, v112))
              goto LABEL_190;
            v102 = 1;
          }
          v114 = v107 + 1;
          v31 = v378;
          while (v114 != v108)
          {
            v115 = *v114++;
            v109 = v115;
            if (v115 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v107 = v114 - 1;
              goto LABEL_176;
            }
          }
          v34 = a5;
        }
        v116 = v100 + 16;
        if (v101 || (v102 & 1) == 0)
          break;
        v100 = *(_QWORD *)(v100 + 8);
LABEL_192:
        v101 = (llvm::SmallPtrSetImplBase *)v116;
        if ((_QWORD **)v100 == &v393)
          goto LABEL_193;
      }
      if (!v101 || ((v102 ^ 1) & 1) != 0)
      {
LABEL_190:
        v116 = 0;
        v100 = *(_QWORD *)(v100 + 8);
      }
      else
      {
        sub_1C5B5A2AC(v116, v101);
        v117 = *(_QWORD *)v100;
        v118 = *(_QWORD *)(v100 + 8);
        *(_QWORD *)(v117 + 8) = v118;
        **(_QWORD **)(v100 + 8) = v117;
        --v395;
        sub_1C5B5A418(v100);
        v100 = v118;
        v116 = (uint64_t)v101;
      }
      v34 = a5;
      v31 = v378;
      goto LABEL_192;
    }
LABEL_193:
    if ((v395 & 0xFFFFFFFE) == 0)
    {
LABEL_347:
      sub_1C5B59BCC((uint64_t)v385, "CantIsolateUnsafeDeps", 21, "cannot isolate unsafe dependencies", 34);
      v55 = 0;
      v33 = a6;
      goto LABEL_371;
    }
    v119 = v394;
    if (v394 == &v393)
    {
      v208 = 0;
      v407 = 0;
      v406 = 0;
      v408[0] = 0;
      __src = 0;
      v431 = 0;
      p_src = &__src;
    }
    else
    {
      do
      {
        v120 = v119[15];
        v121 = *(_QWORD *)(v120 + 32);
        v122 = *(_QWORD *)(v120 + 40) - v121;
        if (v122)
        {
          v123 = 8 * (v122 >> 3);
          do
          {
            v124 = *(_QWORD *)(*(_QWORD *)v121 + 40);
            if (v124 == *(_QWORD *)v121 + 40)
            {
              v126 = 0;
            }
            else
            {
              if (v124)
                v125 = v124 - 24;
              else
                v125 = 0;
              if (*(unsigned __int8 *)(v125 + 16) - 29 >= 0xB)
                v126 = 0;
              else
                v126 = v125;
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v119 + 2), v126);
            v121 += 8;
            v123 -= 8;
          }
          while (v123);
        }
        v127 = (unint64_t *)v119[3];
        v128 = 32;
        if (v127 == (unint64_t *)v119[2])
          v128 = 36;
        v129 = *(unsigned int *)((char *)v119 + v128);
        v130 = &v127[v129];
        if ((_DWORD)v129)
        {
          v131 = 8 * v129;
          while (*v127 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v127;
            v131 -= 8;
            if (!v131)
            {
              v127 = v130;
              break;
            }
          }
        }
        p_src = &v431;
        __src = (void *)0x800000000;
        sub_1C618F808((unsigned int *)&p_src, v127, v130, v130);
        v132 = __src;
        while (1)
        {
          v31 = v378;
          if (!v132)
            break;
          v133 = *((_QWORD *)p_src + --v132);
          LODWORD(__src) = v132;
          v134 = *(_DWORD *)(v133 + 20);
          if ((v134 & 0x40000000) != 0)
          {
            v136 = *(uint64_t **)(v133 - 8);
            v135 = v134 & 0x7FFFFFF;
            if (v135)
              goto LABEL_219;
          }
          else
          {
            v135 = v134 & 0x7FFFFFF;
            v136 = (uint64_t *)(v133 - 32 * v135);
            if (v135)
            {
LABEL_219:
              v137 = 32 * v135;
              do
              {
                v138 = *v136;
                if (*v136)
                  v139 = *(unsigned __int8 *)(*v136 + 16) >= 0x1Cu;
                else
                  v139 = 0;
                if (v139)
                {
                  v140 = v119[15];
                  v141 = sub_1C477672C(v140 + 56, *(_QWORD *)(v138 + 40));
                  v142 = *(_QWORD *)(v140 + 64);
                  v143 = 72;
                  if (v142 == *(_QWORD *)(v140 + 56))
                    v143 = 76;
                  if (v141 != (_QWORD *)(v142 + 8 * *(unsigned int *)(v140 + v143)))
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v119 + 2), v138);
                    if (v144)
                    {
                      v145 = __src;
                      if (__src >= (unint64_t)HIDWORD(__src))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, (uint64_t)&v431, __src + 1, 8);
                        v145 = __src;
                      }
                      *((_QWORD *)p_src + v145) = v138;
                      LODWORD(__src) = (_DWORD)__src + 1;
                    }
                  }
                }
                v136 += 4;
                v137 -= 32;
              }
              while (v137);
              v132 = __src;
              v34 = a5;
            }
          }
        }
        if (p_src != &v431)
          free(p_src);
        v119 = (_QWORD *)v119[1];
      }
      while (v119 != &v393);
      v146 = v394;
      v407 = 0;
      v406 = 0;
      v408[0] = 0;
      __src = 0;
      v431 = 0;
      p_src = &__src;
      if (v394 != &v393)
      {
        v147 = 0;
        v148 = 0;
        while (2)
        {
          v149 = v146[3];
          v150 = 32;
          if (v149 == v146[2])
            v150 = 36;
          v151 = *(unsigned int *)((char *)v146 + v150);
          if ((_DWORD)v151)
          {
            v152 = 8 * v151;
            v153 = (unint64_t *)v146[3];
            while (*v153 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v153;
              v152 -= 8;
              if (!v152)
                goto LABEL_311;
            }
          }
          else
          {
            v153 = (unint64_t *)v146[3];
          }
          v154 = (unint64_t *)(v149 + 8 * v151);
          if (v153 == v154)
            goto LABEL_311;
          v155 = *v153;
LABEL_249:
          if (*(_BYTE *)(v155 + 16) == 60)
          {
            if (!v148)
            {
              v166 = 0;
              goto LABEL_265;
            }
            v368 = v154;
            v371 = v148;
            v156 = ((v155 >> 4) ^ (v155 >> 9)) & (v148 - 1);
            v157 = (char *)v406 + 16 * v156;
            v158 = *(_QWORD *)v157;
            v365 = v147;
            if (v155 == *(_QWORD *)v157)
            {
LABEL_253:
              v159 = (char *)v406 + 16 * v156 + 8;
              v160 = v146;
              do
              {
                v160 = (_QWORD *)*v160;
                v161 = (void **)sub_1C5B5A9EC((uint64_t **)&p_src, v146 + 2);
                v162 = (void **)sub_1C5B5A9EC((uint64_t **)&p_src, v160 + 2);
                if (&__src == v161)
                  v163 = 0;
                else
                  v163 = sub_1C5715004((uint64_t)(v161 + 4));
                if (&__src == v162)
                  v164 = 0;
                else
                  v164 = sub_1C5715004((uint64_t)(v162 + 4));
                if (v163 != v164)
                {
                  *(_QWORD *)(*(_QWORD *)v163 + 8) = *(_QWORD *)(*(_QWORD *)v163 + 8) & 1 | v164;
                  *(_QWORD *)v163 = *(_QWORD *)v164;
                  v165 = *(_QWORD *)(v164 + 8) & 0xFFFFFFFFFFFFFFFELL;
                  *(_QWORD *)v164 = v163;
                  *(_QWORD *)(v164 + 8) = v165;
                }
              }
              while (v160 + 2 != (_QWORD *)*v159);
              v34 = a5;
              v35 = a4;
              v31 = v378;
              v148 = v371;
              v154 = v368;
              v147 = v365;
            }
            else
            {
              v170 = 0;
              v171 = 1;
              while (v158 != -4096)
              {
                if (v170)
                  v172 = 0;
                else
                  v172 = v158 == -8192;
                if (v172)
                  v170 = v157;
                v173 = v156 + v171++;
                v156 = v173 & (v148 - 1);
                v157 = (char *)v406 + 16 * v156;
                v158 = *(_QWORD *)v157;
                if (v155 == *(_QWORD *)v157)
                  goto LABEL_253;
              }
              if (v170)
                v166 = v170;
              else
                v166 = v157;
              v34 = a5;
              v35 = a4;
              v31 = v378;
              v154 = v368;
              v147 = v365;
LABEL_265:
              if (4 * v147 + 4 >= 3 * v148)
              {
                v174 = v154;
                sub_1C5B5A870((uint64_t)&v406, 2 * v148);
                v148 = v408[0];
                v175 = v408[0] - 1;
                v176 = (v408[0] - 1) & ((v155 >> 4) ^ (v155 >> 9));
                v166 = (char *)v406 + 16 * v176;
                v177 = *(_QWORD *)v166;
                if (v155 == *(_QWORD *)v166)
                  goto LABEL_298;
                v178 = 0;
                v179 = 1;
                while (v177 != -4096)
                {
                  if (v178)
                    v180 = 0;
                  else
                    v180 = v177 == -8192;
                  if (v180)
                    v178 = v166;
                  v181 = v176 + v179++;
                  v176 = v181 & v175;
                  v166 = (char *)v406 + 16 * (v181 & v175);
                  v177 = *(_QWORD *)v166;
                  if (v155 == *(_QWORD *)v166)
                    goto LABEL_298;
                }
              }
              else
              {
                if (v148 + ~v147 - HIDWORD(v407) > v148 >> 3)
                  goto LABEL_267;
                v174 = v154;
                sub_1C5B5A870((uint64_t)&v406, v148);
                v148 = v408[0];
                v182 = v408[0] - 1;
                v183 = (v408[0] - 1) & ((v155 >> 4) ^ (v155 >> 9));
                v166 = (char *)v406 + 16 * v183;
                v184 = *(_QWORD *)v166;
                if (v155 == *(_QWORD *)v166)
                {
LABEL_298:
                  v167 = v155;
                  v34 = a5;
                  v35 = a4;
                  v31 = v378;
                  v154 = v174;
                  goto LABEL_268;
                }
                v178 = 0;
                v185 = 1;
                while (v184 != -4096)
                {
                  if (v178)
                    v186 = 0;
                  else
                    v186 = v184 == -8192;
                  if (v186)
                    v178 = v166;
                  v187 = v183 + v185++;
                  v183 = v187 & v182;
                  v166 = (char *)v406 + 16 * (v187 & v182);
                  v184 = *(_QWORD *)v166;
                  if (v155 == *(_QWORD *)v166)
                    goto LABEL_298;
                }
              }
              if (v178)
                v166 = v178;
              v34 = a5;
              v35 = a4;
              v31 = v378;
              v154 = v174;
LABEL_267:
              v167 = *(_QWORD *)v166;
LABEL_268:
              v147 = v407 + 1;
              LODWORD(v407) = v407 + 1;
              if (v167 != -4096)
                --HIDWORD(v407);
              *(_QWORD *)v166 = v155;
              *((_QWORD *)v166 + 1) = v146 + 2;
            }
          }
          v168 = v153 + 1;
          while (v168 != v154)
          {
            v169 = *v168++;
            v155 = v169;
            if (v169 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v153 = v168 - 1;
              goto LABEL_249;
            }
          }
LABEL_311:
          v146 = (_QWORD *)v146[1];
          if (v146 == &v393)
          {
            v33 = a6;
            v32 = a7;
            if (v431)
            {
              v188 = p_src;
              if (p_src != &__src)
              {
                do
                {
                  v189 = v188[5];
                  if ((v189 & 1) != 0)
                  {
                    v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
                    if ((v189 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      v191 = (llvm::SmallPtrSetImplBase *)v188[6];
                      do
                      {
                        sub_1C5B5A2AC(*(_QWORD *)(v190 + 16), v191);
                        v190 = *(_QWORD *)(v190 + 8) & 0xFFFFFFFFFFFFFFFELL;
                      }
                      while (v190);
                    }
                  }
                  v192 = (void **)v188[1];
                  if (v192)
                  {
                    do
                    {
                      v193 = v192;
                      v192 = (void **)*v192;
                    }
                    while (v192);
                  }
                  else
                  {
                    do
                    {
                      v193 = (void **)v188[2];
                      v24 = *v193 == v188;
                      v188 = v193;
                    }
                    while (!v24);
                  }
                  v188 = v193;
                }
                while (v193 != &__src);
              }
              *(_QWORD *)&v421 = &v421;
              *((_QWORD *)&v421 + 1) = &v421;
              v194 = (__int128 *)v394;
              v31 = v378;
              if (v394 != &v393)
              {
                v195 = 0;
                v196 = &v421;
                v197 = v395;
                do
                {
                  v198 = (__int128 *)*((_QWORD *)v194 + 1);
                  if (*((_DWORD *)v194 + 9) == *((_DWORD *)v194 + 10))
                  {
                    if (v198 == (__int128 *)&v393)
                    {
                      v199 = 1;
LABEL_332:
                      v198 = (__int128 *)&v393;
                    }
                    else
                    {
                      while (1)
                      {
                        v199 = *((_DWORD *)v198 + 9) == *((_DWORD *)v198 + 10);
                        if (*((_DWORD *)v198 + 9) != *((_DWORD *)v198 + 10))
                          break;
                        v198 = (__int128 *)*((_QWORD *)v198 + 1);
                        if (v198 == (__int128 *)&v393)
                          goto LABEL_332;
                      }
                    }
                    if (v194 != v198)
                    {
                      v196 = *(__int128 **)v198;
                      if (v194 == *(__int128 **)v198)
                      {
                        v200 = 0;
                      }
                      else
                      {
                        v200 = 0;
                        v201 = v194;
                        do
                        {
                          ++v200;
                          v201 = (__int128 *)*((_QWORD *)v201 + 1);
                        }
                        while (v201 != v196);
                      }
                      v202 = v200 + 1;
                      v197 -= v202;
                      v395 = v197;
                      v195 += v202;
                      v203 = *(_QWORD *)v194;
                      *(_QWORD *)(v203 + 8) = *((_QWORD *)v196 + 1);
                      **((_QWORD **)v196 + 1) = v203;
                      v204 = v421;
                      *(_QWORD *)(v421 + 8) = v194;
                      *(_QWORD *)v194 = v204;
                      *(_QWORD *)&v421 = v196;
                      *((_QWORD *)v196 + 1) = &v421;
                    }
                    if (!v199)
                      v198 = (__int128 *)*((_QWORD *)v198 + 1);
                  }
                  v194 = v198;
                }
                while (v198 != (__int128 *)&v393);
                if (v195)
                {
                  v205 = *((_QWORD *)&v421 + 1);
                  v206 = **((_QWORD **)&v421 + 1);
                  *(_QWORD *)(v206 + 8) = *((_QWORD *)v196 + 1);
                  **((_QWORD **)v196 + 1) = v206;
                  *(_QWORD *)&v422 = 0;
                  if ((__int128 *)v205 != &v421)
                  {
                    do
                    {
                      v207 = *(__int128 **)(v205 + 8);
                      sub_1C5B5A418(v205);
                      v205 = (uint64_t)v207;
                    }
                    while (v207 != &v421);
                  }
                }
              }
              v208 = 1;
            }
            else
            {
              v208 = 0;
            }
LABEL_351:
            sub_1C49F3440(__src);
            MEMORY[0x1CAA32FB4](v406, 8);
            if (v208 && (v395 & 0xFFFFFFFE) == 0)
            {
              v209 = "CantIsolateUnsafeDeps";
              v210 = 21;
              v211 = "cannot isolate unsafe dependencies";
              v212 = 34;
              goto LABEL_370;
            }
            v213 = *(_QWORD *)(*(_QWORD *)v387 + 104);
            v361 = v387;
            if (*((_BYTE *)v387 + 49) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213) & 1) == 0)
            {
              v209 = "RuntimeCheckWithConvergent";
              v210 = 26;
              v211 = "may not insert runtime check with convergent operation";
              v212 = 54;
LABEL_370:
              sub_1C5B59BCC((uint64_t)v385, v209, v210, v211, v212);
              v55 = 0;
              goto LABEL_371;
            }
            v214 = (**(uint64_t (***)(uint64_t))v213)(v213);
            if (HIBYTE(v392))
              v215 = v392 == 0;
            else
              v215 = 1;
            v216 = v215;
            v217 = &dword_1ED81EB70;
            if (v215)
              v217 = (int *)&unk_1ED81EAB0;
            if (v214 > *v217)
            {
              v209 = "TooManySCEVRuntimeChecks";
              v210 = 24;
              v211 = "too many SCEV run-time checks needed.\n";
              v212 = 38;
              goto LABEL_370;
            }
            if (v216 && llvm::getBooleanLoopAttribute(v385[0], "llvm.loop.disable_nonforced", 0x1BuLL))
            {
              v209 = "HeuristicDisabled";
              v210 = 17;
              v211 = "distribution heuristic disabled";
              v212 = 31;
              goto LABEL_370;
            }
            v359 = v213;
            v218 = v394;
            if (v394 != &v393)
            {
              v219 = 0;
              do
              {
                v220 = v218[3];
                v221 = 32;
                if (v220 == v218[2])
                  v221 = 36;
                v222 = *(unsigned int *)((char *)v218 + v221);
                if ((_DWORD)v222)
                {
                  v223 = 8 * v222;
                  v224 = (unint64_t *)v218[3];
                  while (*v224 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v224;
                    v223 -= 8;
                    if (!v223)
                      goto LABEL_392;
                  }
                }
                else
                {
                  v224 = (unint64_t *)v218[3];
                }
                v225 = (unint64_t *)(v220 + 8 * v222);
                if (v224 != v225)
                {
                  v226 = *v224;
LABEL_386:
                  *(_QWORD *)&v421 = v226;
                  *((_QWORD *)&v421 + 1) = v219;
                  sub_1C61D73E4((uint64_t)&p_src, (uint64_t)v396, &v421, (_DWORD *)&v421 + 2);
                  if (!(_BYTE)v431)
                    *((_DWORD *)p_src + 2) = -1;
                  v227 = v224 + 1;
                  while (v227 != v225)
                  {
                    v228 = *v227++;
                    v226 = v228;
                    if (v228 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v224 = v227 - 1;
                      goto LABEL_386;
                    }
                  }
                }
LABEL_392:
                ++v219;
                v218 = (_QWORD *)v218[1];
              }
              while (v218 != &v393);
            }
            v229 = *((_QWORD *)v361 + 1);
            v230 = *(unsigned int *)(v229 + 16);
            v409[0] = v410;
            v409[1] = (void *)0x800000000;
            sub_1C4893E04((char *)v409, v230, 0);
            if ((_DWORD)v230)
            {
              v231 = 0;
              while (1)
              {
                llvm::MemoryDepChecker::getInstructionsForAccess(*((unsigned int **)v361 + 2), *(_QWORD *)(*(_QWORD *)(v229 + 8) + (v231 << 6) + 16), *(unsigned __int8 *)(*(_QWORD *)(v229 + 8) + (v231 << 6) + 40), (uint64_t)&p_src);
                v232 = v409[0];
                *((_DWORD *)v409[0] + v231) = -2;
                if ((_DWORD)__src)
                  break;
LABEL_403:
                if (p_src != &v431)
                  free(p_src);
                if (++v231 == v230)
                  goto LABEL_406;
              }
              v233 = p_src;
              v234 = 8 * __src;
              while (2)
              {
                *(_QWORD *)&v421 = 0;
                *(_QWORD *)&v421 = *v233;
                v235 = *((_DWORD *)sub_1C6128C08(v396, &v421) + 2);
                v236 = v232[v231];
                if (v236 == -2)
                {
LABEL_401:
                  v232[v231] = v235;
                }
                else
                {
                  if (v236 == -1)
                    goto LABEL_403;
                  if (v236 != v235)
                  {
                    v235 = -1;
                    goto LABEL_401;
                  }
                }
                ++v233;
                v234 -= 8;
                if (!v234)
                  goto LABEL_403;
                continue;
              }
            }
LABEL_406:
            v237 = *((_QWORD *)v361 + 1);
            v406 = v408;
            v407 = 0x400000000;
            v238 = *(__int128 **)(v237 + 280);
            v239 = *(unsigned int *)(v237 + 288);
            p_src = &v406;
            if ((_DWORD)v239)
            {
              v360 = &v238[v239];
              do
              {
                v240 = *(unsigned int *)(*(_QWORD *)v238 + 24);
                if ((_DWORD)v240)
                {
                  v241 = *(unsigned int **)(*(_QWORD *)v238 + 16);
                  v242 = &v241[v240];
                  v243 = *((_QWORD *)v238 + 1);
                  v366 = *(unsigned int **)(v243 + 16);
                  v369 = v242;
                  v244 = v409[0];
                  v372 = *(unsigned int *)(v243 + 24);
                  while (!(_DWORD)v372)
                  {
LABEL_416:
                    if (++v241 == v369)
                      goto LABEL_419;
                  }
                  v245 = *v241;
                  v247 = 4 * v372;
                  v246 = v366;
                  while (1)
                  {
                    v248 = *v246;
                    if (llvm::RuntimePointerChecking::needsChecking((llvm::RuntimePointerChecking *)v237, v245, *v246))
                    {
                      v249 = v244[v245];
                      if (v249 == -1 || v249 != v244[v248])
                        break;
                    }
                    ++v246;
                    v247 -= 4;
                    if (!v247)
                      goto LABEL_416;
                  }
                  sub_1C5B5AABC((uint64_t *)&p_src, v238);
                }
LABEL_419:
                ++v238;
              }
              while (v238 != v360);
              if (*((_BYTE *)v361 + 49))
                v250 = (_DWORD)v407 == 0;
              else
                v250 = 1;
              v33 = a6;
              v32 = a7;
              v34 = a5;
              v35 = a4;
              v31 = v378;
              if (!v250)
              {
                sub_1C5B59BCC((uint64_t)v385, "RuntimeCheckWithConvergent", 26, "may not insert runtime check with convergent operation", 54);
                v55 = 0;
                goto LABEL_600;
              }
            }
            else
            {
              v34 = a5;
            }
            if (!llvm::BasicBlock::getSinglePredecessor(v375))
            {
              v251 = (llvm::BasicBlock *)*((_QWORD *)v375 + 5);
              goto LABEL_439;
            }
            v251 = (llvm::BasicBlock *)*((_QWORD *)v375 + 5);
            v252 = *((_QWORD *)v375 + 6);
            if (v252)
              v253 = (char *)(v252 - 24);
            else
              v253 = 0;
            if (v251 == (llvm::BasicBlock *)((char *)v375 + 40))
            {
              v254 = 0;
            }
            else
            {
              v254 = (char *)v251 - 24;
              if (!v251)
                v254 = 0;
              if (v254[16] - 29 >= 0xB)
                v254 = 0;
            }
            if (v253 != v254)
            {
LABEL_439:
              if (v251 == (llvm::BasicBlock *)((char *)v375 + 40))
              {
                v256 = 0;
              }
              else
              {
                if (v251)
                  v255 = (unsigned __int8 *)v251 - 24;
                else
                  v255 = 0;
                if (v255[16] - 29 >= 0xB)
                  v256 = 0;
                else
                  v256 = (llvm::BasicBlock *)v255;
              }
              LOWORD(v433) = 257;
              sub_1C5EBD70C(v375, v256, 0, *(uint64_t *)v388, *(llvm::DomTreeUpdater **)v386, 0, (llvm::Twine *)&p_src, 0);
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359))
              v257 = (_DWORD)v407 == 0;
            else
              v257 = 0;
            if (!v257)
            {
              v348 = v385[0];
              LoopID = (unsigned int *)llvm::Loop::getLoopID(v385[0]);
              llvm::LoopVersioning::LoopVersioning((uint64_t)&p_src, (uint64_t)v361, v406, v407, (uint64_t)v348, *(uint64_t *)v386, *(uint64_t *)v388, v389);
              llvm::LoopVersioning::versionLoop((uint64_t *)&p_src, (uint64_t)&v411);
              llvm::LoopVersioning::annotateLoopWithNoAlias((llvm::LoopVersioning *)&p_src);
              v421 = xmmword_1E8195408;
              v422 = *(_OWORD *)&off_1E8195418;
              FollowupLoopID = llvm::makeFollowupLoopID(LoopID, (uint64_t)&v421, 2, "llvm.loop.distribute.", 1);
              llvm::Loop::setLoopID((llvm::Loop *)__src, FollowupLoopID);
              sub_1C631A498(&p_src);
            }
            v258 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v398);
            if (v258)
            {
              v259 = *(_QWORD *)(v258 + 40);
              if (v259 != v258 + 40)
              {
                if (v259)
                  v260 = v259 - 24;
                else
                  v260 = 0;
                if (*(_BYTE *)(v260 + 16) == 30)
                {
                  if ((*(_DWORD *)(v260 + 20) & 0x7FFFFFF) == 3)
                    goto LABEL_460;
LABEL_464:
                  v261 = (llvm::BasicBlock *)v258;
LABEL_465:
                  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v261);
                  ExitBlock = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v398);
                  v370 = (unsigned int *)llvm::Loop::getLoopID(v398);
                  v263 = v393;
                  v364 = v394;
                  v362 = v261;
                  if (v393 != v394)
                  {
                    LODWORD(v264) = v395;
                    v265 = v363;
                    while (1)
                    {
                      v264 = (v264 - 1);
                      v266 = *v263;
                      v267 = *(_QWORD *)(*v263 + 120);
                      v268 = *v263 + 216;
                      p_src = ".ldist";
                      v431 = (_QWORD *)(v265 & 0xFFFFFFFF00000000 | v264);
                      LOWORD(v433) = 2051;
                      v269 = v268;
                      v373 = llvm::cloneLoopWithPreheader((uint64_t)v261, SinglePredecessor, v267, v268, (uint64_t)&p_src, v399, v400, v266 + 136);
                      *(_QWORD *)(v266 + 128) = v373;
                      __src = (void *)2;
                      v431 = 0;
                      v432 = (int32x2_t ****)ExitBlock;
                      if (ExitBlock != (llvm::BasicBlock *)-8192
                        && ExitBlock != (llvm::BasicBlock *)-4096
                        && ExitBlock)
                      {
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
                      }
                      p_src = &unk_1E814DA10;
                      v433 = v269;
                      v270 = sub_1C52E2ED8(v269, &p_src);
                      if (v432 != (int32x2_t ****)-8192 && v432 != (int32x2_t ****)-4096 && v432)
                      {
                        v271 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v431;
                        if (v431)
                        {
                          *v431 = *v431 & 7 | v271;
                        }
                        else
                        {
                          v272 = v432;
                          v273 = ***v432;
                          v274 = (unint64_t)v273[303];
                          if (v274 <= v271)
                          {
                            v275 = v273[305].u32[0];
                            if (v274 + 16 * v275 > v271)
                            {
                              v276 = v275 - 1;
                              LODWORD(v277) = v276 & ((v432 >> 4) ^ (v432 >> 9));
                              v278 = (int32x2_t *****)(v274 + 16 * v277);
                              v279 = *v278;
                              if (v432 == *v278)
                              {
LABEL_482:
                                *v278 = (int32x2_t ****)-8192;
                                v273[304] = vadd_s32(v273[304], (int32x2_t)0x1FFFFFFFFLL);
                                v272 = v432;
                              }
                              else
                              {
                                v280 = 1;
                                while (v279 != (int32x2_t ****)-4096)
                                {
                                  v281 = v277 + v280++;
                                  v277 = v281 & v276;
                                  v279 = *(int32x2_t *****)(v274 + 16 * v277);
                                  if (v432 == v279)
                                  {
                                    v278 = (int32x2_t *****)(v274 + 16 * v277);
                                    goto LABEL_482;
                                  }
                                }
                              }
                              *((_BYTE *)v272 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v282 = (llvm::BasicBlock *)v270[7];
                      if (v282 != v261)
                      {
                        if (v282 && v282 != (llvm::BasicBlock *)-8192 && v282 != (llvm::BasicBlock *)-4096)
                        {
                          v287 = v270[5] & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v287 = v270[6];
                          v288 = (unint64_t *)v270[6];
                          if (v288)
                          {
                            *v288 = *v288 & 7 | v287;
                          }
                          else
                          {
                            v289 = v270[7];
                            v290 = ***(int32x2_t ****)v289;
                            v291 = (unint64_t)v290[303];
                            if (v291 <= v287)
                            {
                              v292 = v290[305].u32[0];
                              if (v291 + 16 * v292 > v287)
                              {
                                v293 = v292 - 1;
                                LODWORD(v294) = v293 & ((v289 >> 4) ^ (v289 >> 9));
                                v295 = (uint64_t *)(v291 + 16 * v294);
                                v296 = *v295;
                                if (v289 == *v295)
                                {
LABEL_515:
                                  *v295 = -8192;
                                  v290[304] = vadd_s32(v290[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v289 = v270[7];
                                }
                                else
                                {
                                  v297 = 1;
                                  while (v296 != -4096)
                                  {
                                    v298 = v294 + v297++;
                                    v294 = v298 & v293;
                                    v296 = *(_QWORD *)(v291 + 16 * v294);
                                    if (v289 == v296)
                                    {
                                      v295 = (uint64_t *)(v291 + 16 * v294);
                                      goto LABEL_515;
                                    }
                                  }
                                }
                                *(_BYTE *)(v289 + 17) &= ~1u;
                                v34 = a5;
                              }
                            }
                          }
                        }
                        v270[7] = v261;
                        if (v261 != (llvm::BasicBlock *)-8192 && v261 != (llvm::BasicBlock *)-4096 && v261)
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v270 + 5));
                      }
                      llvm::remapInstructionsInBlocks((uint64_t *)(v266 + 136), v269);
                      sub_1C5B5AB30(v370, v266 + 16);
                      v263 = (_QWORD *)*v263;
                      v283 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v373);
                      if (v283)
                      {
                        v284 = *(_QWORD *)(v283 + 40);
                        if (v284 != v283 + 40)
                        {
                          if (v284)
                            v285 = v284 - 24;
                          else
                            v285 = 0;
                          if (*(_BYTE *)(v285 + 16) == 30)
                          {
                            if ((*(_DWORD *)(v285 + 20) & 0x7FFFFFF) != 3)
                              goto LABEL_502;
                          }
                          else
                          {
                            v261 = 0;
                            switch(*(_BYTE *)(v285 + 16))
                            {
                              case 0x1D:
                              case 0x21:
                              case 0x22:
                              case 0x23:
                              case 0x24:
                              case 0x25:
                              case 0x26:
                                goto LABEL_503;
                              case 0x1E:
                                goto LABEL_641;
                              case 0x1F:
                                v286 = (*(_DWORD *)(v285 + 20) >> 1) & 0x3FFFFFF;
                                break;
                              case 0x20:
                                v286 = (*(_DWORD *)(v285 + 20) & 0x7FFFFFF) - 1;
                                break;
                              case 0x27:
                                v286 = *(_DWORD *)(v285 + 80) + 1;
                                break;
                              default:
                                goto LABEL_498;
                            }
                            if (v286 == 1)
                            {
LABEL_502:
                              v261 = (llvm::BasicBlock *)v283;
                              goto LABEL_503;
                            }
                          }
                        }
                      }
LABEL_498:
                      v261 = 0;
LABEL_503:
                      v265 = v265 & 0xFFFFFFFF00000000 | v264;
                      if (v263 == v364)
                        goto LABEL_521;
                    }
                  }
                  v265 = v363;
LABEL_521:
                  v299 = *(_QWORD *)(SinglePredecessor + 40);
                  v363 = v265;
                  if (v299 == SinglePredecessor + 40)
                  {
                    v301 = 0;
                  }
                  else
                  {
                    if (v299)
                      v300 = (unsigned __int8 *)(v299 - 24);
                    else
                      v300 = 0;
                    if (v300[16] - 29 >= 0xB)
                      v301 = 0;
                    else
                      v301 = (llvm::User *)v300;
                  }
                  v35 = a4;
                  llvm::User::replaceUsesOfWith(v301, v362, v261);
                  sub_1C5B5AB30(v370, (uint64_t)(v393 + 2));
                  v303 = v394;
                  v304 = (_QWORD *)v394[1];
                  if (v304 != &v393)
                  {
                    while (2)
                    {
                      v305 = v304[16];
                      if (!v305)
                        v305 = v304[15];
                      v306 = v400;
                      v307 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v305);
                      if (v307)
                      {
                        v308 = *(_QWORD *)(v307 + 40);
                        if (v308 != v307 + 40)
                        {
                          if (v308)
                            v309 = v308 - 24;
                          else
                            v309 = 0;
                          if (*(_BYTE *)(v309 + 16) == 30)
                          {
                            if ((*(_DWORD *)(v309 + 20) & 0x7FFFFFF) == 3)
                              break;
LABEL_543:
                            v310 = v307;
LABEL_544:
                            v312 = (_QWORD *)v303[16];
                            if (!v312)
                              v312 = (_QWORD *)v303[15];
                            ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v312);
                            llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(v306, v310, ExitingBlock);
                            v303 = (_QWORD *)v303[1];
                            v304 = (_QWORD *)v304[1];
                            if (v304 == &v393)
                            {
                              v303 = v394;
                              goto LABEL_594;
                            }
                            continue;
                          }
                          v310 = 0;
                          switch(*(_BYTE *)(v309 + 16))
                          {
                            case 0x1D:
                            case 0x21:
                            case 0x22:
                            case 0x23:
                            case 0x24:
                            case 0x25:
                            case 0x26:
                              goto LABEL_544;
                            case 0x1E:
                              goto LABEL_641;
                            case 0x1F:
                              v311 = (*(_DWORD *)(v309 + 20) >> 1) & 0x3FFFFFF;
                              break;
                            case 0x20:
                              v311 = (*(_DWORD *)(v309 + 20) & 0x7FFFFFF) - 1;
                              break;
                            case 0x27:
                              v311 = *(_DWORD *)(v309 + 80) + 1;
                              break;
                            default:
                              goto LABEL_539;
                          }
                          if (v311 == 1)
                            goto LABEL_543;
                        }
                      }
                      break;
                    }
LABEL_539:
                    v310 = 0;
                    goto LABEL_544;
                  }
LABEL_594:
                  while (v303 != &v393)
                  {
                    p_src = &v431;
                    __src = (void *)0x800000000;
                    v314 = v303[15];
                    v315 = *(llvm::BasicBlock **)(v314 + 32);
                    v377 = *(llvm::BasicBlock **)(v314 + 40);
                    if (v377 != v315)
                    {
                      do
                      {
                        v316 = *(_QWORD *)v315 + 40;
                        for (i = *(_QWORD *)(*(_QWORD *)v315 + 48); i != v316; i = *(_QWORD *)(i + 8))
                        {
                          if (i)
                            v318 = i - 24;
                          else
                            v318 = 0;
                          v319 = sub_1C477672C((uint64_t)(v303 + 2), v318);
                          v320 = v303[3];
                          v321 = 32;
                          if (v320 == v303[2])
                            v321 = 36;
                          if (v319 == (_QWORD *)(v320 + 8 * *(unsigned int *)((char *)v303 + v321)))
                          {
                            if (*((_DWORD *)v303 + 56))
                            {
                              *((_QWORD *)&v421 + 1) = 2;
                              *(_QWORD *)&v422 = 0;
                              *((_QWORD *)&v422 + 1) = v318;
                              if (v318 != -8192 && v318 != -4096 && v318)
                                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&v421 + 8));
                              *(_QWORD *)&v421 = &unk_1E814DA10;
                              v423[0] = v303 + 27;
                              v322 = sub_1C52E2ED8((uint64_t)(v303 + 27), &v421);
                              if (*((_QWORD *)&v422 + 1) != -8192
                                && *((_QWORD *)&v422 + 1) != -4096
                                && *((_QWORD *)&v422 + 1))
                              {
                                v323 = *((_QWORD *)&v421 + 1) & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)(*((_QWORD *)&v421 + 1) & 0xFFFFFFFFFFFFFFF8) = v422;
                                if ((_QWORD)v422)
                                {
                                  *(_QWORD *)v422 = *(_QWORD *)v422 & 7 | v323;
                                }
                                else
                                {
                                  v324 = *((_QWORD *)&v422 + 1);
                                  v325 = (int32x2_t *)****((_QWORD ****)&v422 + 1);
                                  v326 = (unint64_t)v325[303];
                                  if (v326 <= v323)
                                  {
                                    v327 = v325[305].u32[0];
                                    if (v326 + 16 * v327 > v323)
                                    {
                                      v328 = v327 - 1;
                                      LODWORD(v329) = v328 & ((DWORD2(v422) >> 4) ^ (DWORD2(v422) >> 9));
                                      v330 = (uint64_t *)(v326 + 16 * v329);
                                      v331 = *v330;
                                      if (*((_QWORD *)&v422 + 1) == *v330)
                                      {
LABEL_575:
                                        *v330 = -8192;
                                        v325[304] = vadd_s32(v325[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v324 = *((_QWORD *)&v422 + 1);
                                      }
                                      else
                                      {
                                        v332 = 1;
                                        while (v331 != -4096)
                                        {
                                          v333 = v329 + v332++;
                                          v329 = v333 & v328;
                                          v331 = *(_QWORD *)(v326 + 16 * v329);
                                          if (*((_QWORD *)&v422 + 1) == v331)
                                          {
                                            v330 = (uint64_t *)(v326 + 16 * v329);
                                            goto LABEL_575;
                                          }
                                        }
                                      }
                                      *(_BYTE *)(v324 + 17) &= ~1u;
                                    }
                                  }
                                }
                              }
                              v318 = v322[7];
                            }
                            v334 = __src;
                            if (__src >= (unint64_t)HIDWORD(__src))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, (uint64_t)&v431, __src + 1, 8);
                              v334 = __src;
                            }
                            *((_QWORD *)p_src + v334) = v318;
                            LODWORD(__src) = (_DWORD)__src + 1;
                          }
                        }
                        v315 = (llvm::BasicBlock *)((char *)v315 + 8);
                      }
                      while (v315 != v377);
                      v335 = (_QWORD **)p_src;
                      if ((_DWORD)__src)
                      {
                        v336 = 8 * __src;
                        v337 = (char *)p_src - 8;
                        v34 = a5;
                        v35 = a4;
                        do
                        {
                          v338 = *(_QWORD *)&v337[v336];
                          if (*(_QWORD *)(v338 + 8))
                          {
                            v339 = llvm::UndefValue::get(*(llvm::UndefValue **)v338, v302);
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v338, v339, (llvm::Value *)1);
                          }
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v338 + 40) + 40, (uint64_t ***)v338);
                          v340 = *(_QWORD *)(v338 + 24);
                          v341 = *(_QWORD **)(v338 + 32);
                          *v341 = v340;
                          *(_QWORD *)(v340 + 8) = v341;
                          *(_QWORD *)(v338 + 24) = 0;
                          *(_QWORD *)(v338 + 32) = 0;
                          llvm::Value::deleteValue((llvm::Value *)v338);
                          v336 -= 8;
                        }
                        while (v336);
                        v335 = (_QWORD **)p_src;
                      }
                      else
                      {
                        v34 = a5;
                        v35 = a4;
                      }
                      if (v335 != &v431)
                        free(v335);
                    }
                    v303 = (_QWORD *)v303[1];
                  }
                  if (byte_1ED81E930)
                    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::verify(*(uint64_t *)v386);
                  v342 = v390;
                  v343 = ****(_QWORD ****)v390;
                  v33 = a6;
                  v32 = a7;
                  v31 = v378;
                  if (*(_QWORD *)(v343 + 128)
                    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v343 + 72) + 48))(*(_QWORD *)(v343 + 72)))
                  {
                    v344 = v385[0];
                    llvm::Loop::getStartLoc(v385[0], &v401);
                    v345 = v401;
                    if (v401)
                    {
                      v346 = *(_QWORD *)&v401[-8 * *((unsigned int *)v401 + 2)];
                      if (*(_BYTE *)v346 != 15)
                        v346 = *(_QWORD *)(v346 - 8 * *(unsigned int *)(v346 + 8));
                      v347 = *((_DWORD *)v401 + 1);
                      v345 = *((unsigned __int16 *)v401 + 1);
                    }
                    else
                    {
                      v346 = 0;
                      v347 = 0;
                    }
                    v351 = **((_QWORD **)v344 + 4);
                    v352 = *(_QWORD **)(v351 + 56);
                    LODWORD(__src) = 9;
                    BYTE4(__src) = 2;
                    v431 = v352;
                    v432 = (int32x2_t ****)v346;
                    v433 = __PAIR64__(v345, v347);
                    v434 = "loop-distribute";
                    v435 = "Distribute";
                    v436 = 10;
                    v437 = 0;
                    v438 = 0;
                    v439 = &v441;
                    v440 = 0x400000000;
                    v450 = 0;
                    v451 = -1;
                    v452 = v351;
                    p_src = &off_1E814E500;
                    v402[0] = "distributed loop";
                    v402[1] = (const void *)16;
                    sub_1C53B17B4((uint64_t)&v439, v402);
                    sub_1C61998EC((uint64_t)&v421, (uint64_t)&p_src);
                    *(_QWORD *)&v421 = &off_1E814E500;
                    p_src = &off_1E814E790;
                    v353 = (void **)v439;
                    if ((_DWORD)v440)
                    {
                      v354 = (unint64_t)v440 << 6;
                      do
                      {
                        v355 = (void **)((char *)v353 + v354);
                        if (*((char *)v353 + v354 - 17) < 0)
                          operator delete(*(v355 - 5));
                        if (*((char *)v355 - 41) < 0)
                          operator delete(*(v355 - 8));
                        v354 -= 64;
                      }
                      while (v354);
                      v353 = (void **)v439;
                    }
                    if (v353 != &v441)
                      free(v353);
                    if (v401)
                      llvm::MetadataTracking::untrack((uint64_t)&v401, v401);
                    llvm::OptimizationRemarkEmitter::emit(v342, (llvm::DiagnosticInfoOptimizationBase *)&v421);
                    *(_QWORD *)&v421 = &off_1E814E790;
                    v356 = (void **)v424;
                    if (v425)
                    {
                      v357 = (unint64_t)v425 << 6;
                      do
                      {
                        v358 = (void **)((char *)v356 + v357);
                        if (*((char *)v356 + v357 - 17) < 0)
                          operator delete(*(v358 - 5));
                        if (*((char *)v358 - 41) < 0)
                          operator delete(*(v358 - 8));
                        v357 -= 64;
                      }
                      while (v357);
                      v356 = (void **)v424;
                    }
                    if (v356 != &v426)
                      free(v356);
                    v55 = 1;
                    v33 = a6;
                    v32 = a7;
                    v34 = a5;
                    v35 = a4;
                    v31 = v378;
                  }
                  else
                  {
                    v55 = 1;
                  }
LABEL_600:
                  if (v406 != v408)
                    free(v406);
                  if (v409[0] != v410)
                    free(v409[0]);
LABEL_371:
                  if (v411 != &v413)
                    free(v411);
                  goto LABEL_125;
                }
                v261 = 0;
                v34 = a5;
                switch(*(_BYTE *)(v260 + 16))
                {
                  case 0x1D:
                  case 0x21:
                  case 0x22:
                  case 0x23:
                  case 0x24:
                  case 0x25:
                  case 0x26:
                    goto LABEL_465;
                  case 0x1E:
                    goto LABEL_641;
                  case 0x1F:
                    v262 = (*(_DWORD *)(v260 + 20) >> 1) & 0x3FFFFFF;
                    break;
                  case 0x20:
                    v262 = (*(_DWORD *)(v260 + 20) & 0x7FFFFFF) - 1;
                    break;
                  case 0x27:
                    v262 = *(_DWORD *)(v260 + 80) + 1;
                    break;
                  default:
                    goto LABEL_460;
                }
                v34 = a5;
                if (v262 == 1)
                  goto LABEL_464;
              }
            }
LABEL_460:
            v261 = 0;
            goto LABEL_465;
          }
          continue;
        }
      }
      v208 = 0;
    }
    v33 = a6;
    v32 = a7;
    goto LABEL_351;
  }
  sub_1C485C2F0();
LABEL_641:
  __break(1u);
}

uint64_t sub_1C5B59A48(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v4);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Distribution";
  *(_QWORD *)(v5 + 8) = 17;
  *(_QWORD *)(v5 + 16) = "loop-distribute";
  *(_QWORD *)(v5 + 24) = 15;
  *(_QWORD *)(v5 + 32) = &unk_1ED81E8A0;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B5ABEC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5B59B04(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81E8A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8195438;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81E8A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B59A48;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81E8A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5B59BCC(uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  _BOOL4 v10;
  uint64_t v11;
  llvm::OptimizationRemarkEmitter *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  char *v27;
  unint64_t v28;
  void **v29;
  llvm::OptimizationRemarkEmitter *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  void **v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  void **v43;
  const void *v44;
  char *v45;
  unint64_t v46;
  void **v47;
  _BOOL4 v48;
  const char *v49;
  unsigned __int8 *v50;
  void *__p[2];
  char v52;
  const void *v53[2];
  const char *v54;
  uint64_t v55;
  __int16 v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t (**v60)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  char v70;
  char v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[256];
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 65))
    v10 = *(_BYTE *)(a1 + 64) == 0;
  else
    v10 = 1;
  v11 = ***(_QWORD ***)(a1 + 8);
  v12 = *(llvm::OptimizationRemarkEmitter **)(a1 + 48);
  v13 = ****(_QWORD ****)v12;
  v14 = "loop-distribute";
  if (*(_QWORD *)(v13 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 72) + 48))(*(_QWORD *)(v13 + 72)))
  {
    llvm::Loop::getStartLoc(*(llvm::Loop **)a1, __p);
    v15 = (int)__p[0];
    v49 = a4;
    if (__p[0])
    {
      v16 = *((_QWORD *)__p[0] - *((unsigned int *)__p[0] + 2));
      if (*(_BYTE *)v16 != 15)
        v16 = *(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8));
      v17 = *((_DWORD *)__p[0] + 1);
      v15 = *((unsigned __int16 *)__p[0] + 1);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = **(_QWORD **)(*(_QWORD *)a1 + 32);
    v19 = *(_QWORD *)(v18 + 56);
    v61 = 10;
    v62 = 2;
    v63 = v19;
    v64 = v16;
    v65 = v17;
    v66 = v15;
    v67 = "loop-distribute";
    v68 = "NotDistributed";
    v69 = 14;
    v70 = 0;
    v71 = 0;
    v72 = v74;
    v73 = 0x400000000;
    v75 = 0;
    v76 = -1;
    v77 = v18;
    v60 = &off_1E814E538;
    v54 = "loop not distributed: use -Rpass-analysis=loop-distribute for more info";
    v55 = 71;
    sub_1C53B17B4((uint64_t)&v72, (const void **)&v54);
    sub_1C61998EC((uint64_t)&v54, (uint64_t)&v60);
    v54 = (const char *)&off_1E814E538;
    v60 = &off_1E814E790;
    v20 = (char *)v72;
    if ((_DWORD)v73)
    {
      v48 = v10;
      v21 = a2;
      v22 = a3;
      v23 = a5;
      v24 = v11;
      v25 = (unint64_t)v73 << 6;
      do
      {
        v26 = (void **)&v20[v25];
        if (v20[v25 - 17] < 0)
          operator delete(*(v26 - 5));
        if (*((char *)v26 - 41) < 0)
          operator delete(*(v26 - 8));
        v25 -= 64;
      }
      while (v25);
      v20 = (char *)v72;
      v11 = v24;
      a5 = v23;
      a3 = v22;
      a2 = v21;
      v10 = v48;
    }
    if (v20 != v74)
      free(v20);
    a4 = v49;
    if (__p[0])
      llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
    llvm::OptimizationRemarkEmitter::emit(v12, (llvm::DiagnosticInfoOptimizationBase *)&v54);
    v54 = (const char *)&off_1E814E790;
    v27 = (char *)v57;
    if (v58)
    {
      v28 = (unint64_t)v58 << 6;
      do
      {
        v29 = (void **)&v27[v28];
        if (v27[v28 - 17] < 0)
          operator delete(*(v29 - 5));
        if (*((char *)v29 - 41) < 0)
          operator delete(*(v29 - 8));
        v28 -= 64;
      }
      while (v28);
      v27 = (char *)v57;
      a4 = v49;
    }
    if (v27 != (char *)&v59)
      free(v27);
    v14 = "loop-distribute";
  }
  v30 = *(llvm::OptimizationRemarkEmitter **)(a1 + 48);
  if (!v10)
    v14 = (const char *)llvm::OptimizationRemarkAnalysis::AlwaysPrint;
  llvm::Loop::getStartLoc(*(llvm::Loop **)a1, __p);
  v31 = (int)__p[0];
  if (__p[0])
  {
    v32 = *((_QWORD *)__p[0] - *((unsigned int *)__p[0] + 2));
    if (*(_BYTE *)v32 != 15)
      v32 = *(_QWORD *)(v32 - 8 * *(unsigned int *)(v32 + 8));
    v33 = *((_DWORD *)__p[0] + 1);
    v31 = *((unsigned __int16 *)__p[0] + 1);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v34 = **(_QWORD **)(*(_QWORD *)a1 + 32);
  v35 = *(_QWORD *)(v34 + 56);
  v61 = 11;
  v62 = 2;
  v63 = v35;
  v64 = v32;
  v65 = v33;
  v66 = v31;
  v67 = v14;
  v68 = a2;
  v69 = a3;
  v70 = 0;
  v71 = 0;
  v72 = v74;
  v73 = 0x400000000;
  v75 = 0;
  v76 = -1;
  v77 = v34;
  v60 = &off_1E814E570;
  v54 = "loop not distributed: ";
  v55 = 22;
  sub_1C53B17B4((uint64_t)&v72, (const void **)&v54);
  v54 = a4;
  v55 = a5;
  sub_1C53B17B4((uint64_t)&v72, (const void **)&v54);
  llvm::OptimizationRemarkEmitter::emit(v30, (llvm::DiagnosticInfoOptimizationBase *)&v60);
  v60 = &off_1E814E790;
  v36 = (char *)v72;
  if ((_DWORD)v73)
  {
    v37 = (unint64_t)v73 << 6;
    do
    {
      v38 = (void **)&v36[v37];
      if (v36[v37 - 17] < 0)
        operator delete(*(v38 - 5));
      if (*((char *)v38 - 41) < 0)
        operator delete(*(v38 - 8));
      v37 -= 64;
    }
    while (v37);
    v36 = (char *)v72;
  }
  if (v36 != v74)
    free(v36);
  if (__p[0])
    llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
  if (!v10)
  {
    v39 = *(_QWORD *)(a1 + 8);
    llvm::Loop::getStartLoc(*(llvm::Loop **)a1, &v50);
    v40 = (int)v50;
    if (v50)
    {
      v41 = *(_QWORD *)&v50[-8 * *((unsigned int *)v50 + 2)];
      if (*(_BYTE *)v41 != 15)
        v41 = *(_QWORD *)(v41 - 8 * *(unsigned int *)(v41 + 8));
      v42 = *((_DWORD *)v50 + 1);
      v40 = *((unsigned __int16 *)v50 + 1);
    }
    else
    {
      v41 = 0;
      v42 = 0;
    }
    v54 = "loop not distributed: failed explicitly specified loop distribution";
    v56 = 259;
    v61 = 14;
    v62 = 1;
    v63 = v39;
    v64 = v41;
    v65 = v42;
    v66 = v40;
    v67 = 0;
    v68 = "";
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = v74;
    v73 = 0x400000000;
    v75 = 0;
    v76 = -1;
    v60 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&unk_1E814E7C8;
    v77 = 0;
    llvm::Twine::str((llvm::Twine *)&v54, __p);
    v43 = (void **)__p[0];
    if (v52 >= 0)
      v43 = __p;
    v44 = (const void *)(v52 & 0x7F);
    if (v52 < 0)
      v44 = __p[1];
    v53[0] = v43;
    v53[1] = v44;
    sub_1C53B17B4((uint64_t)&v72, v53);
    if (v52 < 0)
      operator delete(__p[0]);
    v60 = &off_1E814E5A8;
    llvm::LLVMContext::diagnose(v11, (const llvm::DiagnosticInfo *)&v60);
    v60 = &off_1E814E790;
    v45 = (char *)v72;
    if ((_DWORD)v73)
    {
      v46 = (unint64_t)v73 << 6;
      do
      {
        v47 = (void **)&v45[v46];
        if (v45[v46 - 17] < 0)
          operator delete(*(v47 - 5));
        if (*((char *)v47 - 41) < 0)
          operator delete(*(v47 - 8));
        v46 -= 64;
      }
      while (v46);
      v45 = (char *)v72;
    }
    if (v45 != v74)
      free(v45);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  }
}

uint64_t sub_1C5B5A1EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x800000000;
  *(_DWORD *)(a1 + 216) = 128;
  v6 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 200) = v6;
  *(_QWORD *)(a1 + 208) = 0;
  v7 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v7)
  {
    v8 = v7 << 6;
    v9 = v6 + 16;
    do
    {
      *v9 = 0;
      v9[1] = -4096;
      *(v9 - 2) = &unk_1E814DA10;
      *(v9 - 1) = 2;
      v9[2] = 0;
      v9 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  return a1;
}

uint64_t *sub_1C5B5A2AC(uint64_t a1, llvm::SmallPtrSetImplBase *this)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  void *v19;

  result = *(uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)a1;
  v6 = 16;
  if (result == *(uint64_t **)a1)
    v6 = 20;
  v7 = *(unsigned int *)(a1 + v6);
  v8 = result;
  if ((_DWORD)v7)
  {
    v9 = 0;
    while ((unint64_t)result[v9] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v7 == ++v9)
        goto LABEL_16;
    }
    v8 = &result[v9];
  }
  v10 = &result[v7];
  if (v8 != v10)
  {
    v11 = *v8;
LABEL_11:
    sub_1C4774094(this, v11);
    v12 = (unint64_t *)(v8 + 1);
    while (v12 != (unint64_t *)v10)
    {
      v13 = *v12++;
      v11 = v13;
      if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (uint64_t *)(v12 - 1);
        goto LABEL_11;
      }
    }
    v5 = *(uint64_t **)a1;
    result = *(uint64_t **)(a1 + 8);
  }
LABEL_16:
  if (result == v5)
    goto LABEL_17;
  v14 = *(unsigned int *)(a1 + 16);
  if (v14 < 0x21 || 4 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24)) >= v14)
  {
    result = (uint64_t *)memset(result, 255, 8 * v14);
LABEL_17:
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_18;
  }
  free(result);
  v16 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  v17 = 1 << (33 - __clz(v16 - 1));
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (v16 <= 0x10)
    v18 = 32;
  else
    v18 = v17;
  *(_DWORD *)(a1 + 16) = v18;
  v19 = malloc_type_malloc(8 * v18, 0x4065EBACuLL);
  if (!v19)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 8) = v19;
  result = (uint64_t *)memset(v19, 255, 8 * *(unsigned int *)(a1 + 16));
LABEL_18:
  *((_BYTE *)this + 96) |= *(_BYTE *)(a1 + 96);
  return result;
}

void sub_1C5B5A418(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  void *v33;

  if (*(_BYTE *)(a1 + 264))
  {
    sub_1C4E43068(a1 + 240);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 240), 8);
    *(_BYTE *)(a1 + 264) = 0;
  }
  v2 = *(unsigned int *)(a1 + 232);
  v3 = *(_QWORD **)(a1 + 216);
  if ((_DWORD)v2)
  {
    v4 = &v3[8 * v2];
    do
    {
      v5 = v3[3];
      if ((v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = v3[7];
        if (v6)
        {
          if (v6 != -8192 && v6 != -4096)
          {
            v7 = v3[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v7 = v3[6];
            v8 = (unint64_t *)v3[6];
            if (v8)
            {
              *v8 = *v8 & 7 | v7;
            }
            else
            {
              v9 = v3[7];
              v10 = ***(int32x2_t ****)v9;
              v11 = (unint64_t)v10[303];
              if (v11 <= v7)
              {
                v12 = v10[305].u32[0];
                if (v11 + 16 * v12 > v7)
                {
                  v13 = v12 - 1;
                  LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                  v15 = (uint64_t *)(v11 + 16 * v14);
                  v16 = *v15;
                  if (v9 == *v15)
                  {
LABEL_17:
                    *v15 = -8192;
                    v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                    v9 = v3[7];
                  }
                  else
                  {
                    v17 = 1;
                    while (v16 != -4096)
                    {
                      v18 = v14 + v17++;
                      v14 = v18 & v13;
                      v16 = *(_QWORD *)(v11 + 16 * v14);
                      if (v9 == v16)
                      {
                        v15 = (uint64_t *)(v11 + 16 * v14);
                        goto LABEL_17;
                      }
                    }
                  }
                  *(_BYTE *)(v9 + 17) &= ~1u;
                }
              }
            }
            v5 = v3[3];
          }
        }
      }
      if (v5 != -4096 && v5 != -8192 && v5 != 0)
      {
        v20 = v3[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v20 = v3[2];
        v21 = (unint64_t *)v3[2];
        if (v21)
        {
          *v21 = *v21 & 7 | v20;
        }
        else
        {
          v22 = v3[3];
          v23 = ***(int32x2_t ****)v22;
          v24 = (unint64_t)v23[303];
          if (v24 <= v20)
          {
            v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v20)
            {
              v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
              v28 = (uint64_t *)(v24 + 16 * v27);
              v29 = *v28;
              if (v22 == *v28)
              {
LABEL_36:
                *v28 = -8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                v22 = v3[3];
              }
              else
              {
                v30 = 1;
                while (v29 != -4096)
                {
                  v31 = v27 + v30++;
                  v27 = v31 & v26;
                  v29 = *(_QWORD *)(v24 + 16 * v27);
                  if (v22 == v29)
                  {
                    v28 = (uint64_t *)(v24 + 16 * v27);
                    goto LABEL_36;
                  }
                }
              }
              *(_BYTE *)(v22 + 17) &= ~1u;
            }
          }
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)(a1 + 216);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  v32 = *(void **)(a1 + 136);
  if (v32 != (void *)(a1 + 152))
    free(v32);
  v33 = *(void **)(a1 + 24);
  if (v33 != *(void **)(a1 + 16))
    free(v33);
  operator delete((void *)a1);
}

uint64_t sub_1C5B5A67C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)result;
    v3 = (_QWORD *)(*(_QWORD *)result + (v1 << 6));
    do
    {
      v4 = v2[3];
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = v2[7];
        if (v5)
        {
          if (v5 != -8192 && v5 != -4096)
          {
            v6 = v2[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v6 = v2[6];
            v7 = (unint64_t *)v2[6];
            if (v7)
            {
              *v7 = *v7 & 7 | v6;
            }
            else
            {
              v8 = v2[7];
              v9 = ***(int32x2_t ****)v8;
              v10 = (unint64_t)v9[303];
              if (v10 <= v6)
              {
                v11 = v9[305].u32[0];
                if (v10 + 16 * v11 > v6)
                {
                  v12 = v11 - 1;
                  LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
                  v14 = (uint64_t *)(v10 + 16 * v13);
                  v15 = *v14;
                  if (v8 == *v14)
                  {
LABEL_15:
                    *v14 = -8192;
                    v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                    v8 = v2[7];
                  }
                  else
                  {
                    v16 = 1;
                    while (v15 != -4096)
                    {
                      v17 = v13 + v16++;
                      v13 = v17 & v12;
                      v15 = *(_QWORD *)(v10 + 16 * v13);
                      if (v8 == v15)
                      {
                        v14 = (uint64_t *)(v10 + 16 * v13);
                        goto LABEL_15;
                      }
                    }
                  }
                  *(_BYTE *)(v8 + 17) &= ~1u;
                }
              }
            }
            v4 = v2[3];
          }
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        v19 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v19 = v2[2];
        v20 = (unint64_t *)v2[2];
        if (v20)
        {
          *v20 = *v20 & 7 | v19;
        }
        else
        {
          v21 = v2[3];
          v22 = ***(int32x2_t ****)v21;
          v23 = (unint64_t)v22[303];
          if (v23 <= v19)
          {
            v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v19)
            {
              v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
              v27 = (uint64_t *)(v23 + 16 * v26);
              v28 = *v27;
              if (v21 == *v27)
              {
LABEL_34:
                *v27 = -8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                v21 = v2[3];
              }
              else
              {
                v29 = 1;
                while (v28 != -4096)
                {
                  v30 = v26 + v29++;
                  v26 = v30 & v25;
                  v28 = *(_QWORD *)(v23 + 16 * v26);
                  if (v21 == v28)
                  {
                    v27 = (uint64_t *)(v23 + 16 * v26);
                    goto LABEL_34;
                  }
                }
              }
              *(_BYTE *)(v21 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *sub_1C5B5A870(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v22 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v19)
              v17 = v19;
          }
LABEL_12:
          *v17 = v15;
          v17[1] = v14[1];
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v23 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v23)
  {
    v24 = 16 * v23;
    do
    {
      *result = -4096;
      result += 2;
      v24 -= 16;
    }
    while (v24);
  }
  return result;
}

uint64_t **sub_1C5B5A9EC(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[6];
        if (v7 <= (unint64_t)a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x38uLL);
    v6[4] = (uint64_t *)(v6 + 4);
    v6[5] = (uint64_t *)1;
    v6[6] = a2;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_1C4768E74(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

uint64_t *sub_1C5B5AABC(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *(unsigned int *)(*a1 + 8);
  if (v5 >= *(_DWORD *)(*a1 + 12))
  {
    v7 = *a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v3 + 16, v5 + 1, 16);
    v4 = v7;
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v3 + 16 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  return a1;
}

void sub_1C5B5AB30(unsigned int *a1, uint64_t a2)
{
  const char *v3;
  llvm::MDNode *FollowupLoopID;
  char v5;
  llvm::MDNode *v6;
  llvm::Loop *v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v8[0] = "llvm.loop.distribute.followup_all";
  v8[1] = 33;
  v3 = "llvm.loop.distribute.followup_sequential";
  if (!*(_BYTE *)(a2 + 96))
    v3 = "llvm.loop.distribute.followup_coincident";
  v8[2] = v3;
  v8[3] = 40;
  FollowupLoopID = llvm::makeFollowupLoopID(a1, (uint64_t)v8, 2, "", 0);
  if (v5)
  {
    v6 = FollowupLoopID;
    v7 = *(llvm::Loop **)(a2 + 112);
    if (!v7)
      v7 = *(llvm::Loop **)(a2 + 104);
    llvm::Loop::setLoopID(v7, v6);
  }
}

uint64_t sub_1C5B5ABEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B59B04(v0);
}

void sub_1C5B5AC18(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B5AC3C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5B5AD10(llvm::FunctionPass *a1, llvm::Loop *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  char **v11;
  char *v12;
  uint64_t *v13;
  char **v14;
  char *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  llvm::OptimizationRemarkEmitter *v19;
  char **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)();
  void (**v29)(uint64_t (***)());
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t *v34;
  int v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v4 = (uint64_t)a1;
  v41 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) == 0)
  {
    v6 = **(char ****)(v4 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != llvm::LoopInfoWrapperPass::ID);
    v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::LoopInfoWrapperPass::ID);
    v9 = **(void ****)(v4 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != &llvm::LoopAccessLegacyAnalysis::ID);
    v31 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LoopAccessLegacyAnalysis::ID);
    v11 = **(char ****)(v4 + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
    }
    while (v12 != llvm::DominatorTreeWrapperPass::ID);
    v13 = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::DominatorTreeWrapperPass::ID);
    v14 = **(char ****)(v4 + 8);
    do
    {
      v15 = *v14;
      v14 += 2;
    }
    while (v15 != llvm::ScalarEvolutionWrapperPass::ID);
    v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
    v17 = **(void ****)(v4 + 8);
    do
    {
      v18 = *v17;
      v17 += 2;
    }
    while (v18 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
    v19 = *(llvm::OptimizationRemarkEmitter **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
    v20 = **(char ****)(v4 + 8);
    do
    {
      v21 = *v20;
      v20 += 2;
    }
    while (v21 != llvm::TargetTransformInfoWrapperPass::ID);
    v22 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36[0] = 0;
    v36[1] = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v23 = *(_QWORD *)(v22 + 56);
    if (v23)
    {
      v8 += 32;
      v4 = (uint64_t)(v13 + 4);
      v2 = v36;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Loop *))(*(_QWORD *)v23 + 48))(&v32, v23, a2);
      v13 = (uint64_t *)(v22 + 64);
      v24 = v32;
      if (!*(_BYTE *)(v22 + 72))
      {
        *(_QWORD *)(v22 + 64) = v32;
        *(_BYTE *)(v22 + 72) = 1;
        goto LABEL_19;
      }
      v32 = 0;
      v25 = *v13;
      *v13 = v24;
      if (!v25 || ((*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25), v26 = v32, v32 = 0, !v26))
      {
LABEL_19:
        MEMORY[0x1CAA32FB4](0, 8);
        sub_1C4D8B440(v2);
        sub_1C4D8B52C((uint64_t *)&v33);
        v33 = &off_1E81954D8;
        v34 = &v31;
        v36[0] = &v33;
        sub_1C5B575B4(a2, v8, v4, v16, v19, v13, (uint64_t)&v33);
        v5 = v27;
        v28 = (uint64_t (***)())v36[0];
        if ((uint64_t (***)())v36[0] == &v33)
        {
          v29 = (void (**)(uint64_t (***)()))(v33 + 4);
          v28 = &v33;
        }
        else
        {
          if (!v36[0])
            return v5;
          v29 = (void (**)(uint64_t (***)()))(*(_QWORD *)v36[0] + 40);
        }
        (*v29)(v28);
        return v5;
      }
    }
    else
    {
      sub_1C485C2F0();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    goto LABEL_19;
  }
  return 0;
}

void sub_1C5B5B00C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5B5B020(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81954D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5B5B054(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81954D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5B5B070(uint64_t a1, llvm::Loop *a2)
{
  return llvm::LoopAccessLegacyAnalysis::getInfo(**(llvm::LoopAccessLegacyAnalysis ***)(a1 + 8), a2);
}

void sub_1C5B5B080()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5B5B094(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E8195520;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C5B5B0E4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E8195520;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5B5B11C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 24);
  v6[0] = *(_OWORD *)(a1 + 8);
  v6[1] = v2;
  v6[2] = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v7 = v4;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(v3, &llvm::LoopAccessAnalysis::Key, a2, (uint64_t)v6)+ 8;
}

uint64_t sub_1C5B5B16C()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Turn on DominatorTree and LoopInfo verification after Loop Distribution";
  v3.n128_u64[1] = 71;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81E8B0, "loop-distribute-verify", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81E8B0, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Whether to distribute into a loop that may not be if-convertible by the loop vectorizer";
  v3.n128_u64[1] = 87;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81E970, "loop-distribute-non-if-convertible", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81E970, &dword_1C475E000);
  v4 = 8;
  v1 = 1;
  v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed for Loop Distribution";
  v3.n128_u64[1] = 63;
  sub_1C4DB1928((uint64_t)&unk_1ED81EA30, "loop-distribute-scev-check-threshold", &v2, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81EA30, &dword_1C475E000);
  v4 = 128;
  v1 = 1;
  v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"The maximum number of SCEV checks allowed for Loop Distribution for loop marked wit"
                                     "h #pragma loop distribute(enable)";
  v3.n128_u64[1] = 116;
  sub_1C631A510(&v2, &v1, (__int128 *)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81EAF0, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable the new, experimental LoopDistribution Pass";
  v3.n128_u64[1] = 50;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81EBB0, "enable-loop-distribute", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81EBB0, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Only distribute loops with a large number of memory ops and backwards dependences with distance 1.";
  v3.n128_u64[1] = 98;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED81EC70, "loop-distribute-mem", &v4, &v3, (_BYTE **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81EC70, &dword_1C475E000);
}

llvm::raw_ostream *sub_1C5B5B390(llvm *a1)
{
  llvm *v2;
  void *v3;
  uint64_t v4;
  llvm *v5;
  _DWORD *v6;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  uint64_t ***v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  uint64_t ***v38;
  size_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ****v47;
  uint64_t ***v48;
  int v49;
  int v50;
  _QWORD *v51;
  const char *v52;
  size_t v53;
  uint64_t ***v54;
  size_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t ***v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ****v63;
  uint64_t ***v64;
  int v65;
  int v66;
  _QWORD *v67;
  const char *v68;
  size_t v69;
  uint64_t ***v70;
  size_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t ***v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t ****v79;
  uint64_t ***v80;
  int v81;
  int v82;
  _QWORD *v83;
  const char *v84;
  size_t v85;
  uint64_t ***v86;
  size_t v87;
  _BYTE *v88;
  _QWORD *v89;
  uint64_t ***v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ****v95;
  uint64_t ***v96;
  int v97;
  int v98;
  _QWORD *v99;
  const char *v100;
  size_t v101;
  uint64_t ***v102;
  size_t v103;
  _BYTE *v104;
  void *v105;
  uint64_t v106;
  uint64_t ****v107;
  uint64_t ***v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t ****v113;
  uint64_t ***v114;
  int v115;
  int v116;
  _QWORD *v117;
  const char *v118;
  size_t v119;
  uint64_t ***v120;
  size_t v121;
  _BYTE *v122;

  v2 = llvm::dbgs(a1);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0xDuLL)
  {
    qmemcpy(v3, "\tGuardBranch: ", 14);
    *((_QWORD *)v2 + 4) += 14;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "\tGuardBranch: ", 0xEuLL);
  }
  v4 = *((_QWORD *)a1 + 43);
  v5 = llvm::dbgs(v2);
  if (v4)
  {
    llvm::Value::print(*((llvm::Value **)a1 + 43), v5, 0);
  }
  else
  {
    v6 = (_DWORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 6uLL)
    {
      *(_DWORD *)((char *)v6 + 3) = 1920233580;
      *v6 = 1819047278;
      *((_QWORD *)v5 + 4) += 7;
    }
    else
    {
      v5 = llvm::raw_ostream::write(v5, "nullptr", 7uLL);
    }
  }
  result = llvm::dbgs(v5);
  v8 = result;
  v9 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v9)
  {
    result = llvm::raw_ostream::write(result, "\n", 1uLL);
    v8 = result;
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)result + 4);
  }
  v10 = (uint64_t ***)*((_QWORD *)a1 + 43);
  if (!v10)
  {
    v19 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v20 = "nullptr";
    v21 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_21:
      result = llvm::raw_ostream::write(v8, v20, v21);
      v8 = result;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
    goto LABEL_24;
  v11 = ***v10;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  if ((_DWORD)v13)
  {
    LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v15 = (uint64_t ****)(v12 + 16 * v14);
    v16 = *v15;
    if (*v15 == v10)
      goto LABEL_20;
    v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(uint64_t ****)(v12 + 16 * v14);
      if (v16 == v10)
      {
        v15 = (uint64_t ****)(v12 + 16 * v14);
        goto LABEL_20;
      }
    }
  }
  v15 = (uint64_t ****)(v12 + 16 * v13);
LABEL_20:
  v22 = v15[1];
  v23 = (size_t)*v22;
  v20 = (const char *)(v22 + 2);
  v21 = v23;
  v19 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v23 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_21;
  if (v21)
  {
LABEL_23:
    result = (llvm::raw_ostream *)memcpy(result, v20, v21);
    *v19 += v21;
  }
LABEL_24:
  v24 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v24)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v25 = *((_QWORD *)result + 4);
  }
  else
  {
    *v24 = 10;
    v25 = *((_QWORD *)v8 + 4) + 1;
    *((_QWORD *)v8 + 4) = v25;
  }
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v25) > 0xB)
  {
    *(_DWORD *)(v25 + 8) = 540701285;
    *(_QWORD *)v25 = *(_QWORD *)"\tPreheader: ";
    *((_QWORD *)v8 + 4) += 12;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tPreheader: ", 0xCuLL);
    v8 = result;
  }
  v26 = *(uint64_t ****)a1;
  if (!*(_QWORD *)a1)
  {
    v35 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v36 = "nullptr";
    v37 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_40:
      result = llvm::raw_ostream::write(v8, v36, v37);
      v8 = result;
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if ((*((_BYTE *)v26 + 23) & 0x10) == 0)
    goto LABEL_43;
  v27 = ***v26;
  v28 = *(_QWORD *)(v27 + 152);
  v29 = *(unsigned int *)(v27 + 168);
  if ((_DWORD)v29)
  {
    LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    v31 = (uint64_t ****)(v28 + 16 * v30);
    v32 = *v31;
    if (*v31 == v26)
      goto LABEL_39;
    v33 = 1;
    while (v32 != (uint64_t ***)-4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v32 = *(uint64_t ****)(v28 + 16 * v30);
      if (v32 == v26)
      {
        v31 = (uint64_t ****)(v28 + 16 * v30);
        goto LABEL_39;
      }
    }
  }
  v31 = (uint64_t ****)(v28 + 16 * v29);
LABEL_39:
  v38 = v31[1];
  v39 = (size_t)*v38;
  v36 = (const char *)(v38 + 2);
  v37 = v39;
  v35 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v39 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_40;
  if (v37)
  {
LABEL_42:
    result = (llvm::raw_ostream *)memcpy(result, v36, v37);
    *v35 += v37;
  }
LABEL_43:
  v40 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v40)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v41 = *((_QWORD *)result + 4);
  }
  else
  {
    *v40 = 10;
    v41 = *((_QWORD *)v8 + 4) + 1;
    *((_QWORD *)v8 + 4) = v41;
  }
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 32;
    *(_QWORD *)v41 = *(_QWORD *)"\tHeader: ";
    *((_QWORD *)v8 + 4) += 9;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tHeader: ", 9uLL);
    v8 = result;
  }
  v42 = (uint64_t ***)*((_QWORD *)a1 + 1);
  if (!v42)
  {
    v51 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v52 = "nullptr";
    v53 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_59:
      result = llvm::raw_ostream::write(v8, v52, v53);
      v8 = result;
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if ((*((_BYTE *)v42 + 23) & 0x10) == 0)
    goto LABEL_62;
  v43 = ***v42;
  v44 = *(_QWORD *)(v43 + 152);
  v45 = *(unsigned int *)(v43 + 168);
  if ((_DWORD)v45)
  {
    LODWORD(v46) = (v45 - 1) & ((v42 >> 4) ^ (v42 >> 9));
    v47 = (uint64_t ****)(v44 + 16 * v46);
    v48 = *v47;
    if (*v47 == v42)
      goto LABEL_58;
    v49 = 1;
    while (v48 != (uint64_t ***)-4096)
    {
      v50 = v46 + v49++;
      v46 = v50 & (v45 - 1);
      v48 = *(uint64_t ****)(v44 + 16 * v46);
      if (v48 == v42)
      {
        v47 = (uint64_t ****)(v44 + 16 * v46);
        goto LABEL_58;
      }
    }
  }
  v47 = (uint64_t ****)(v44 + 16 * v45);
LABEL_58:
  v54 = v47[1];
  v55 = (size_t)*v54;
  v52 = (const char *)(v54 + 2);
  v53 = v55;
  v51 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v55 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_59;
  if (v53)
  {
LABEL_61:
    result = (llvm::raw_ostream *)memcpy(result, v52, v53);
    *v51 += v53;
  }
LABEL_62:
  v56 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v56)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v57 = *((_QWORD *)result + 4);
  }
  else
  {
    *v56 = 10;
    v57 = *((_QWORD *)v8 + 4) + 1;
    *((_QWORD *)v8 + 4) = v57;
  }
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v57) > 0xB)
  {
    *(_DWORD *)(v57 + 8) = 540688962;
    *(_QWORD *)v57 = *(_QWORD *)"\tExitingBB: ";
    *((_QWORD *)v8 + 4) += 12;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tExitingBB: ", 0xCuLL);
    v8 = result;
  }
  v58 = (uint64_t ***)*((_QWORD *)a1 + 2);
  if (!v58)
  {
    v67 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v68 = "nullptr";
    v69 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_78:
      result = llvm::raw_ostream::write(v8, v68, v69);
      v8 = result;
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if ((*((_BYTE *)v58 + 23) & 0x10) == 0)
    goto LABEL_81;
  v59 = ***v58;
  v60 = *(_QWORD *)(v59 + 152);
  v61 = *(unsigned int *)(v59 + 168);
  if ((_DWORD)v61)
  {
    LODWORD(v62) = (v61 - 1) & ((v58 >> 4) ^ (v58 >> 9));
    v63 = (uint64_t ****)(v60 + 16 * v62);
    v64 = *v63;
    if (*v63 == v58)
      goto LABEL_77;
    v65 = 1;
    while (v64 != (uint64_t ***)-4096)
    {
      v66 = v62 + v65++;
      v62 = v66 & (v61 - 1);
      v64 = *(uint64_t ****)(v60 + 16 * v62);
      if (v64 == v58)
      {
        v63 = (uint64_t ****)(v60 + 16 * v62);
        goto LABEL_77;
      }
    }
  }
  v63 = (uint64_t ****)(v60 + 16 * v61);
LABEL_77:
  v70 = v63[1];
  v71 = (size_t)*v70;
  v68 = (const char *)(v70 + 2);
  v69 = v71;
  v67 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v71 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_78;
  if (v69)
  {
LABEL_80:
    result = (llvm::raw_ostream *)memcpy(result, v68, v69);
    *v67 += v69;
  }
LABEL_81:
  v72 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v72)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v73 = *((_QWORD *)result + 4);
  }
  else
  {
    *v72 = 10;
    v73 = *((_QWORD *)v8 + 4) + 1;
    *((_QWORD *)v8 + 4) = v73;
  }
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v73) > 8)
  {
    *(_BYTE *)(v73 + 8) = 32;
    *(_QWORD *)v73 = *(_QWORD *)"\tExitBB: ";
    *((_QWORD *)v8 + 4) += 9;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tExitBB: ", 9uLL);
    v8 = result;
  }
  v74 = (uint64_t ***)*((_QWORD *)a1 + 3);
  if (!v74)
  {
    v83 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v84 = "nullptr";
    v85 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_97:
      result = llvm::raw_ostream::write(v8, v84, v85);
      v8 = result;
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if ((*((_BYTE *)v74 + 23) & 0x10) == 0)
    goto LABEL_100;
  v75 = ***v74;
  v76 = *(_QWORD *)(v75 + 152);
  v77 = *(unsigned int *)(v75 + 168);
  if ((_DWORD)v77)
  {
    LODWORD(v78) = (v77 - 1) & ((v74 >> 4) ^ (v74 >> 9));
    v79 = (uint64_t ****)(v76 + 16 * v78);
    v80 = *v79;
    if (*v79 == v74)
      goto LABEL_96;
    v81 = 1;
    while (v80 != (uint64_t ***)-4096)
    {
      v82 = v78 + v81++;
      v78 = v82 & (v77 - 1);
      v80 = *(uint64_t ****)(v76 + 16 * v78);
      if (v80 == v74)
      {
        v79 = (uint64_t ****)(v76 + 16 * v78);
        goto LABEL_96;
      }
    }
  }
  v79 = (uint64_t ****)(v76 + 16 * v77);
LABEL_96:
  v86 = v79[1];
  v87 = (size_t)*v86;
  v84 = (const char *)(v86 + 2);
  v85 = v87;
  v83 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v87 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_97;
  if (v85)
  {
LABEL_99:
    result = (llvm::raw_ostream *)memcpy(result, v84, v85);
    *v83 += v85;
  }
LABEL_100:
  v88 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v88)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v89 = (_QWORD *)*((_QWORD *)result + 4);
  }
  else
  {
    *v88 = 10;
    v89 = (_QWORD *)(*((_QWORD *)v8 + 4) + 1);
    *((_QWORD *)v8 + 4) = v89;
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v89 > 7uLL)
  {
    *v89 = 0x203A686374614C09;
    *((_QWORD *)v8 + 4) += 8;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tLatch: ", 8uLL);
    v8 = result;
  }
  v90 = (uint64_t ***)*((_QWORD *)a1 + 4);
  if (!v90)
  {
    v99 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v100 = "nullptr";
    v101 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_116:
      result = llvm::raw_ostream::write(v8, v100, v101);
      v8 = result;
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if ((*((_BYTE *)v90 + 23) & 0x10) == 0)
    goto LABEL_119;
  v91 = ***v90;
  v92 = *(_QWORD *)(v91 + 152);
  v93 = *(unsigned int *)(v91 + 168);
  if ((_DWORD)v93)
  {
    LODWORD(v94) = (v93 - 1) & ((v90 >> 4) ^ (v90 >> 9));
    v95 = (uint64_t ****)(v92 + 16 * v94);
    v96 = *v95;
    if (*v95 == v90)
      goto LABEL_115;
    v97 = 1;
    while (v96 != (uint64_t ***)-4096)
    {
      v98 = v94 + v97++;
      v94 = v98 & (v93 - 1);
      v96 = *(uint64_t ****)(v92 + 16 * v94);
      if (v96 == v90)
      {
        v95 = (uint64_t ****)(v92 + 16 * v94);
        goto LABEL_115;
      }
    }
  }
  v95 = (uint64_t ****)(v92 + 16 * v93);
LABEL_115:
  v102 = v95[1];
  v103 = (size_t)*v102;
  v100 = (const char *)(v102 + 2);
  v101 = v103;
  v99 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v103 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_116;
  if (v101)
  {
LABEL_118:
    result = (llvm::raw_ostream *)memcpy(result, v100, v101);
    *v99 += v101;
  }
LABEL_119:
  v104 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v104)
  {
    result = llvm::raw_ostream::write(v8, "\n", 1uLL);
    v8 = result;
    v105 = (void *)*((_QWORD *)result + 4);
  }
  else
  {
    *v104 = 10;
    v105 = (void *)(*((_QWORD *)v8 + 4) + 1);
    *((_QWORD *)v8 + 4) = v105;
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v105 > 0xCuLL)
  {
    qmemcpy(v105, "\tEntryBlock: ", 13);
    *((_QWORD *)v8 + 4) += 13;
  }
  else
  {
    result = llvm::raw_ostream::write(v8, "\tEntryBlock: ", 0xDuLL);
    v8 = result;
  }
  v106 = *((_QWORD *)a1 + 43);
  if (v106)
    v107 = (uint64_t ****)(v106 + 40);
  else
    v107 = (uint64_t ****)a1;
  v108 = *v107;
  if (!v108)
  {
    v117 = (_QWORD *)((char *)v8 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
    v118 = "nullptr";
    v119 = 7;
    if (*((_QWORD *)v8 + 3) - (_QWORD)result <= 6uLL)
    {
LABEL_138:
      result = llvm::raw_ostream::write(v8, v118, v119);
      v8 = result;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if ((*((_BYTE *)v108 + 23) & 0x10) == 0)
    goto LABEL_141;
  v109 = ***v108;
  v110 = *(_QWORD *)(v109 + 152);
  v111 = *(unsigned int *)(v109 + 168);
  if ((_DWORD)v111)
  {
    LODWORD(v112) = (v111 - 1) & ((v108 >> 4) ^ (v108 >> 9));
    v113 = (uint64_t ****)(v110 + 16 * v112);
    v114 = *v113;
    if (*v113 == v108)
      goto LABEL_137;
    v115 = 1;
    while (v114 != (uint64_t ***)-4096)
    {
      v116 = v112 + v115++;
      v112 = v116 & (v111 - 1);
      v114 = *(uint64_t ****)(v110 + 16 * v112);
      if (v114 == v108)
      {
        v113 = (uint64_t ****)(v110 + 16 * v112);
        goto LABEL_137;
      }
    }
  }
  v113 = (uint64_t ****)(v110 + 16 * v111);
LABEL_137:
  v120 = v113[1];
  v121 = (size_t)*v120;
  v118 = (const char *)(v120 + 2);
  v119 = v121;
  v117 = (_QWORD *)((char *)v8 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)v8 + 4);
  if (v121 > *((_QWORD *)v8 + 3) - (_QWORD)result)
    goto LABEL_138;
  if (v119)
  {
LABEL_140:
    result = (llvm::raw_ostream *)memcpy(result, v118, v119);
    *v117 += v119;
  }
LABEL_141:
  v122 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v122)
    return llvm::raw_ostream::write(v8, "\n", 1uLL);
  *v122 = 10;
  ++*((_QWORD *)v8 + 4);
  return result;
}

void llvm::LoopFusePass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ResultImpl;
  char v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  unsigned int v20;
  _QWORD v21[13];
  void *v22;
  char *v23;
  void *v24;
  _QWORD v25[38];
  void *v26;
  _QWORD v27[14];

  v27[12] = *MEMORY[0x1E0C80C00];
  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DependenceAnalysis::Key, a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1) + 8;
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, a1) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1) + 8;
  v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1);
  sub_1C5B5C188((uint64_t)&v19, v6, v7, v8, v9, v10, v11, v12, ResultImpl + 8);
  v14 = sub_1C5B5C328((uint64_t)&v19);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v14 & 1) != 0)
  {
    sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::PostDominatorTreeAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
    sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
  }
  else
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v24);
  v18 = (void **)v27;
  sub_1C50B10F0(&v18);
  if (v26 != (void *)v25[37])
    free(v26);
  if (v24 != v25)
    free(v24);
  sub_1C618F3AC(&v23);
  if (v22 != (void *)v21[12])
    free(v22);
  v15 = v19;
  if (v20)
  {
    v16 = (char *)v19 - 16;
    v17 = 24 * v20;
    do
    {
      sub_1C5B60564(*(_QWORD **)&v16[v17]);
      v17 -= 24;
    }
    while (v17);
    v15 = v19;
  }
  if (v15 != v21)
    free(v15);
}

uint64_t sub_1C5B5C188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21[2];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  *(_QWORD *)(a1 + 112) = a1 + 144;
  *(_QWORD *)(a1 + 120) = a1 + 144;
  *(_QWORD *)(a1 + 128) = 8;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = a1 + 232;
  v16 = a1 + 216;
  *(_QWORD *)(a1 + 224) = 0x400000000;
  v18 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  if (v18 != v17)
  {
    v20 = a8;
    v21[0] = v22;
    v21[1] = (void *)0x400000000;
    sub_1C4EB6A24((unsigned int *)v21, v17, v17, v18, v18);
    sub_1C631A914(v16, (uint64_t)v21);
    if (v21[0] != v22)
      free(v21[0]);
    a8 = v20;
  }
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x1000000000;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 712) = a3;
  *(_QWORD *)(a1 + 720) = a6;
  *(_BYTE *)(a1 + 728) = 1;
  *(_QWORD *)(a1 + 736) = a1 + 768;
  *(_QWORD *)(a1 + 744) = a1 + 768;
  *(_QWORD *)(a1 + 752) = 8;
  *(_DWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_WORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 864) = a2;
  *(_QWORD *)(a1 + 872) = a3;
  *(_QWORD *)(a1 + 880) = a4;
  *(_QWORD *)(a1 + 888) = a5;
  *(_QWORD *)(a1 + 896) = a6;
  *(_QWORD *)(a1 + 904) = a7;
  *(_QWORD *)(a1 + 912) = a8;
  *(_QWORD *)(a1 + 920) = a9;
  return a1;
}

uint64_t sub_1C5B5C328(uint64_t a1)
{
  unsigned int v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::Loop *v14;
  uint64_t LoopLatch;
  const llvm::PostDominatorTree *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm **v21;
  llvm *v22;
  const llvm::BasicBlock **v23;
  uint64_t *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  void **v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  void **v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  void **v55;
  BOOL v56;
  int v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t **v74;
  uint64_t *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  llvm::ScalarEvolution *v82;
  const llvm::Loop *v83;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t Exact;
  llvm::DependenceInfo *v86;
  uint64_t v87;
  llvm::ScalarEvolution *v88;
  const llvm::Loop *v89;
  const llvm::Loop **v90;
  uint64_t v91;
  int v92;
  llvm::Loop *v93;
  int64x2_t *v94;
  llvm **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v104;
  char *v105;
  llvm::Instruction **v106;
  int64x2_t *v107;
  uint64_t v108;
  uint64_t v109;
  const llvm::BasicBlock **v110;
  llvm::DependenceInfo *v111;
  llvm::Instruction **v112;
  uint64_t v113;
  int64x2_t *v114;
  llvm::Instruction *v115;
  uint64_t v116;
  llvm::Instruction **v117;
  uint64_t v118;
  uint64_t v119;
  llvm::Instruction **v120;
  uint64_t v121;
  uint64_t v122;
  llvm::Instruction **v123;
  llvm::Instruction *v124;
  uint64_t v125;
  llvm::Instruction **v126;
  uint64_t v127;
  uint64_t v128;
  llvm::Instruction **v129;
  uint64_t v130;
  uint64_t v131;
  llvm::Value *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64x2_t v145;
  unsigned int v146;
  _BYTE *v147;
  uint64_t v148;
  unsigned int v149;
  _BYTE *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t LoopPredecessor;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  int SmallConstantTripCount;
  int v163;
  unsigned int v164;
  llvm *v165;
  char *FirstNonPHIOrDbg;
  llvm::DependenceInfo *v167;
  llvm::DependenceInfo *v168;
  uint64_t v169;
  uint64_t v170;
  const llvm::BasicBlock **v171;
  int v172;
  unint64_t UniqueSuccessor;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  BOOL v178;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  int v184;
  int v185;
  _QWORD *v186;
  unsigned int v187;
  BOOL v188;
  llvm::DomTreeUpdater *v190;
  llvm::BasicBlock **v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  llvm::Value *v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  llvm::User *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 *v206;
  llvm::User *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t *v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t *v236;
  llvm *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  _QWORD *v241;
  char *v242;
  llvm *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t *v249;
  uint64_t v250;
  llvm::Value *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t i;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unsigned int v259;
  uint64_t v260;
  llvm::Instruction *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned __int8 *v265;
  int v266;
  uint64_t *v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  char *v284;
  _QWORD *v285;
  uint64_t v286;
  llvm::UndefValue *v287;
  _QWORD *v288;
  llvm::Value *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  llvm::Type *v296;
  llvm::UndefValue *v297;
  uint64_t v298;
  llvm::ValueSymbolTable *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 *v302;
  llvm::User *v303;
  uint64_t v304;
  uint64_t v305;
  unsigned __int8 *v306;
  llvm::User *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  llvm::DomTreeUpdater *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm::DependenceInfo *v328;
  uint64_t v329;
  _BYTE *v330;
  _BYTE *v331;
  uint64_t v332;
  int v333;
  uint64_t *v334;
  uint64_t v335;
  int v336;
  uint64_t *v337;
  uint64_t v338;
  _QWORD *v339;
  unint64_t v340;
  uint64_t *v341;
  _QWORD *v342;
  int32x2_t *v343;
  __int32 v344;
  unsigned int v345;
  int32x2_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  int32x2_t v353;
  unsigned int v354;
  __int32 v355;
  unsigned int v356;
  _QWORD *v357;
  uint64_t v358;
  _QWORD *v359;
  int v360;
  BOOL v361;
  unsigned int v362;
  _QWORD *v363;
  _QWORD *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  char *v369;
  uint64_t *v370;
  uint64_t v371;
  unsigned int v372;
  __int32 v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  _QWORD *v379;
  _QWORD *v380;
  char *v381;
  _QWORD *v382;
  _QWORD *v383;
  int64_t v384;
  _QWORD *v385;
  unint64_t v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  _BYTE *v397;
  _BYTE *v398;
  llvm::Value *v399;
  uint64_t v400;
  llvm::Value *v401;
  llvm::BasicBlock *v402;
  uint64_t v403;
  llvm *v404;
  llvm::DependenceInfo *v405;
  uint64_t v406;
  llvm::DependenceInfo *v407;
  llvm::BasicBlock *v408;
  llvm::Value *v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int8 *v412;
  llvm::User *v413;
  uint64_t v414;
  llvm::ValueSymbolTable *v415;
  uint64_t v416;
  llvm::ValueSymbolTable *v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t *v436;
  int v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  _QWORD *v447;
  char *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned __int8 *v464;
  llvm::User *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t *v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  char *v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  llvm *v486;
  char *v487;
  char *v488;
  uint64_t v489;
  _QWORD *v490;
  char *v491;
  llvm *v492;
  _QWORD *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  uint64_t *v498;
  uint64_t v499;
  llvm::Value *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t j;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  unsigned int v508;
  uint64_t v509;
  llvm::Instruction *v511;
  uint64_t v512;
  uint64_t v513;
  unsigned __int8 *v514;
  int v515;
  uint64_t *v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  int v530;
  int v531;
  uint64_t v532;
  char *v533;
  _QWORD *v534;
  uint64_t v535;
  llvm::UndefValue *v536;
  _QWORD *v537;
  llvm::Value *v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  _QWORD *v544;
  llvm::Type *v545;
  llvm::UndefValue *v546;
  uint64_t v547;
  llvm::ValueSymbolTable *v548;
  uint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  llvm::User *v552;
  uint64_t v553;
  uint64_t v554;
  unsigned __int8 *v555;
  llvm::User *v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  llvm::DomTreeUpdater *v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  llvm::DependenceInfo *v578;
  uint64_t v579;
  _BYTE *v580;
  _BYTE *v581;
  uint64_t v582;
  int v583;
  uint64_t *v584;
  uint64_t v585;
  int v586;
  uint64_t *v587;
  uint64_t v588;
  _QWORD *v589;
  unint64_t v590;
  uint64_t *v591;
  _QWORD *v592;
  int32x2_t *v593;
  __int32 v594;
  unsigned int v595;
  int32x2_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  int32x2_t v603;
  unsigned int v604;
  __int32 v605;
  unsigned int v606;
  _QWORD *v607;
  uint64_t v608;
  _QWORD *v609;
  int v610;
  BOOL v611;
  unsigned int v612;
  _QWORD *v613;
  _QWORD *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  _QWORD *v618;
  char *v619;
  uint64_t *v620;
  llvm::Value *v621;
  uint64_t v622;
  uint64_t *v623;
  unsigned int v624;
  __int32 v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  int v629;
  int v630;
  _QWORD *v631;
  _QWORD *v632;
  char *v633;
  _QWORD *v634;
  _QWORD *v635;
  int64_t v636;
  _QWORD *v637;
  unint64_t v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  llvm::ValueSymbolTable *v650;
  uint64_t v651;
  llvm::ValueSymbolTable *v652;
  uint64_t v653;
  llvm::ValueSymbolTable *v654;
  uint64_t v655;
  llvm::ValueSymbolTable *v656;
  char *v657;
  uint64_t v658;
  unsigned int v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  uint64_t v667;
  char *v668;
  char *v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  void *v680;
  void *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  _QWORD *v694;
  unsigned int v695;
  int v696;
  unsigned int v697;
  void *v698;
  char *v699;
  int64x2_t *v700;
  llvm::BasicBlock *v701;
  uint64_t *v702;
  uint64_t *v703;
  char *v704;
  uint64_t v705;
  llvm::SmallPtrSetImplBase *v706;
  int v707;
  int v708;
  char *v709;
  llvm::BasicBlock *v710;
  uint64_t v711;
  llvm::DomTreeUpdater *v712;
  llvm::Value *v713;
  llvm::UndefValue **v714;
  llvm::UndefValue **v715;
  llvm::Value *v716;
  unsigned int v717;
  unint64_t v718;
  llvm::Value *v719;
  unsigned int v720;
  llvm::Value *v721;
  uint64_t v722;
  uint64_t **v723;
  const void **v724;
  uint64_t *v725;
  uint64_t *v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t *v729;
  uint64_t *v730;
  unint64_t v731;
  uint64_t *v732;
  llvm::Instruction **v733;
  llvm::Instruction **v734;
  uint64_t v735;
  uint64_t v736;
  void **v738;
  char *v739;
  uint64_t v740;
  void *v741;
  uint64_t v742;
  _BYTE v743[32];
  void *v744;
  uint64_t v745;
  void *v746;
  uint64_t v747;
  int64x2_t v748;
  llvm::BasicBlock *v749[2];
  llvm::Loop *v750[2];
  void *v751;
  uint64_t v752;
  _BYTE v753[128];
  void *v754;
  uint64_t v755;
  _BYTE v756[128];
  __int128 v757;
  __int128 v758;
  __int128 v759;
  uint64_t v760;
  void *v761;
  uint64_t v762;
  _QWORD v763[2];
  __int16 v764;
  void *v765;
  uint64_t v766;
  _BYTE v767[64];
  void *v768;
  uint64_t v769;
  _QWORD v770[18];

  v770[16] = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 224);
  if (v1 == *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 136))
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  v4 = a1;
  v2 = 0;
  v5 = a1 + 112;
  v700 = (int64x2_t *)(a1 + 216);
  v699 = (char *)(a1 + 16);
  v712 = (llvm::DomTreeUpdater *)(a1 + 424);
  v706 = (llvm::SmallPtrSetImplBase *)(a1 + 112);
  do
  {
    if (!v1)
    {
      v748.i64[0] = (uint64_t)v749;
      v748.i64[1] = 0x400000000;
      goto LABEL_909;
    }
    v6 = v700->i64[0];
    v7 = v700->i64[0] + 48 * v1;
    v705 = v7;
    do
    {
      v8 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v8 != 1)
      {
        v711 = v6;
        v707 = v2;
        if ((_DWORD)v8)
        {
          v9 = *(uint64_t **)v6;
          v10 = *(_QWORD *)v6 + 8 * v8;
          do
          {
            v11 = *v9;
            v12 = *(_QWORD *)(v4 + 888);
            v13 = *(_QWORD **)(v4 + 920);
            v748.i32[0] = 0;
            v748.i16[2] = 1;
            v748.i8[6] = 1;
            (*(void (**)(_QWORD, uint64_t, uint64_t, int64x2_t *))(*(_QWORD *)*v13 + 192))(*v13, v11, v12, &v748);
            sub_1C5B5FDD4((uint64_t)&v748, v11, *(_QWORD *)(v4 + 872), *(_QWORD *)(v4 + 896), *(_QWORD *)(v4 + 904), v748.i64[0]);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v748), (int32x4_t)vceqzq_s64(*(int64x2_t *)v749)))) & 1) == 0)
            {
              if (v750[0])
              {
                if (v750[1])
                {
                  if ((_BYTE)v757)
                  {
                    if (llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount(*(llvm::ScalarEvolution **)(v4 + 888), v750[1]))
                    {
                      if (llvm::Loop::isLoopSimplifyForm(v750[1]))
                      {
                        v14 = v750[1];
                        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v750[1]);
                        if (LoopLatch)
                        {
                          if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v14, LoopLatch))
                          {
                            v17 = *(unsigned int *)(v4 + 8);
                            if ((_DWORD)v17)
                            {
                              v18 = *(_QWORD *)v4;
                              v19 = 24 * v17;
                              while (1)
                              {
                                v20 = *(_QWORD *)(*(_QWORD *)v18 + 376);
                                if (v20)
                                  v21 = (llvm **)(v20 + 40);
                                else
                                  v21 = (llvm **)(*(_QWORD *)v18 + 32);
                                v22 = *v21;
                                v23 = (const llvm::BasicBlock **)&v748;
                                if (*((_QWORD *)&v757 + 1))
                                  v23 = (const llvm::BasicBlock **)(*((_QWORD *)&v757 + 1) + 40);
                                if (llvm::isControlFlowEquivalent(v22, *v23, *(const llvm::BasicBlock **)(v4 + 872), *(const llvm::DominatorTree **)(v4 + 896), v16))break;
                                v18 += 24;
                                v19 -= 24;
                                if (!v19)
                                  goto LABEL_34;
                              }
                              sub_1C5B60230(v18, (uint64_t)&v748);
                              goto LABEL_15;
                            }
LABEL_34:
                            v24 = &v769;
                            v769 = 0;
                            v770[0] = 0;
                            v768 = &v769;
                            v25 = &v768;
                            sub_1C5B60230((uint64_t)&v768, (uint64_t)&v748);
                            v26 = *(unsigned int *)(v4 + 8);
                            v27 = *(void ***)v4;
                            if (v26 >= *(_DWORD *)(v4 + 12))
                            {
                              v54 = v26 + 1;
                              v55 = &v27[3 * v26];
                              v56 = v27 <= &v768 && v55 > &v768;
                              v57 = v56;
                              if (v57 == 1)
                                v58 = 0xAAAAAAAAAAAAAAABLL * (&v768 - v27);
                              else
                                v58 = -1;
                              v741 = 0;
                              v27 = (void **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v4, v54, 24, (unint64_t *)&v741);
                              v59 = *(char **)v4;
                              v60 = *(unsigned int *)(v4 + 8);
                              if ((_DWORD)v60)
                              {
                                v61 = 0;
                                v62 = 24 * v60;
                                do
                                {
                                  v63 = (uint64_t *)&v27[v61 / 8];
                                  *v63 = *(_QWORD *)&v59[v61];
                                  v64 = &v59[v61 + 8];
                                  v65 = *(_QWORD **)v64;
                                  v27[v61 / 8 + 1] = *(void **)v64;
                                  v66 = (uint64_t)&v27[v61 / 8 + 1];
                                  v67 = *(_QWORD *)&v59[v61 + 16];
                                  v63[2] = v67;
                                  if (v67)
                                  {
                                    v65[2] = v66;
                                    *(_QWORD *)&v59[v61] = v64;
                                    *(_QWORD *)v64 = 0;
                                    *(_QWORD *)&v59[v61 + 16] = 0;
                                  }
                                  else
                                  {
                                    *v63 = v66;
                                  }
                                  v61 += 24;
                                }
                                while (v62 != v61);
                                v59 = *(char **)v4;
                                v68 = *(unsigned int *)(v4 + 8);
                                if ((_DWORD)v68)
                                {
                                  v69 = v59 - 16;
                                  v70 = 24 * v68;
                                  do
                                  {
                                    sub_1C5B60564(*(_QWORD **)&v69[v70]);
                                    v70 -= 24;
                                  }
                                  while (v70);
                                  v59 = *(char **)v4;
                                }
                              }
                              v71 = (int)v741;
                              if (v59 != v699)
                                free(v59);
                              *(_QWORD *)v4 = v27;
                              *(_DWORD *)(v4 + 12) = v71;
                              v72 = v57 == 0;
                              if (v57)
                                v25 = &v27[3 * v58];
                              else
                                v25 = &v768;
                              if (v72)
                                v24 = &v769;
                              else
                                v24 = (uint64_t *)&v27[3 * v58 + 1];
                              LODWORD(v26) = *(_DWORD *)(v4 + 8);
                            }
                            v28 = &v27[3 * v26];
                            v28[1] = 0;
                            v29 = (uint64_t *)(v28 + 1);
                            v28[2] = 0;
                            *v28 = v28 + 1;
                            v30 = (uint64_t *)*v25;
                            if (*v25 != v24)
                            {
                              v31 = 0;
                              v732 = v24;
                              v738 = v28;
                              while (*v28 != v29)
                              {
                                v32 = v29;
                                if (v31)
                                {
                                  do
                                  {
                                    v33 = v31;
                                    v31 = (uint64_t *)v31[1];
                                  }
                                  while (v31);
                                }
                                else
                                {
                                  do
                                  {
                                    v33 = (uint64_t *)v32[2];
                                    v72 = *v33 == (_QWORD)v32;
                                    v32 = v33;
                                  }
                                  while (v72);
                                }
                                if (sub_1C5B604EC(v33 + 4, v30 + 4))
                                {
                                  if (!*v29)
                                    goto LABEL_44;
LABEL_46:
                                  v765 = v33;
                                  v34 = (uint64_t **)(v33 + 1);
                                  goto LABEL_48;
                                }
                                v34 = (uint64_t **)sub_1C5B603F8((uint64_t)v28, &v765, v30 + 4);
LABEL_48:
                                if (*v34)
                                  goto LABEL_64;
LABEL_49:
                                v35 = (void **)operator new(0x1A8uLL);
                                v36 = v35;
                                v741 = v35;
                                v742 = (uint64_t)v29;
                                v37 = *((_OWORD *)v30 + 2);
                                v38 = *((_OWORD *)v30 + 4);
                                *((_OWORD *)v35 + 3) = *((_OWORD *)v30 + 3);
                                *((_OWORD *)v35 + 4) = v38;
                                *((_OWORD *)v35 + 2) = v37;
                                v39 = v35 + 12;
                                v35[10] = v35 + 12;
                                v40 = v35 + 10;
                                v35[11] = (void *)0x1000000000;
                                v41 = *((_DWORD *)v30 + 22);
                                if (v41 && v35 != (void **)v30)
                                {
                                  if (v41 < 0x11)
                                  {
                                    v42 = *((unsigned int *)v30 + 22);
                                    goto LABEL_53;
                                  }
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v35 + 10), (uint64_t)v39, *((unsigned int *)v30 + 22), 8);
                                  v42 = *((unsigned int *)v30 + 22);
                                  if ((_DWORD)v42)
                                  {
                                    v39 = *v40;
LABEL_53:
                                    memcpy(v39, (const void *)v30[10], 8 * v42);
                                  }
                                  *((_DWORD *)v36 + 22) = v41;
                                }
                                v43 = v36 + 30;
                                v36[28] = v36 + 30;
                                v36[29] = (void *)0x1000000000;
                                v44 = *((_DWORD *)v30 + 58);
                                if (!v44 || v36 == (void **)v30)
                                  goto LABEL_61;
                                if (v44 >= 0x11)
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v36 + 28), (uint64_t)(v36 + 30), *((unsigned int *)v30 + 58), 8);
                                  v45 = *((unsigned int *)v30 + 58);
                                  if (!(_DWORD)v45)
                                    goto LABEL_60;
                                  v43 = v36[28];
                                }
                                else
                                {
                                  v45 = *((unsigned int *)v30 + 58);
                                }
                                memcpy(v43, (const void *)v30[28], 8 * v45);
LABEL_60:
                                *((_DWORD *)v36 + 58) = v44;
LABEL_61:
                                v46 = *((_OWORD *)v30 + 23);
                                v47 = *((_OWORD *)v30 + 24);
                                v48 = *((_OWORD *)v30 + 25);
                                v36[52] = (void *)v30[52];
                                *((_OWORD *)v36 + 24) = v47;
                                *((_OWORD *)v36 + 25) = v48;
                                *((_OWORD *)v36 + 23) = v46;
                                v743[0] = 1;
                                v49 = v765;
                                v50 = (uint64_t *)v741;
                                *(_QWORD *)v741 = 0;
                                v50[1] = 0;
                                v50[2] = (uint64_t)v49;
                                *v34 = v50;
                                v28 = v738;
                                v51 = *(_QWORD **)*v738;
                                if (v51)
                                {
                                  *v738 = v51;
                                  v50 = *v34;
                                }
                                v24 = v732;
                                sub_1C4768E74((uint64_t *)v738[1], v50);
                                v738[2] = (char *)v738[2] + 1;
                                v741 = 0;
                                sub_1C5B60488((uint64_t)&v741);
LABEL_64:
                                v52 = (uint64_t *)v30[1];
                                if (v52)
                                {
                                  do
                                  {
                                    v53 = v52;
                                    v52 = (uint64_t *)*v52;
                                  }
                                  while (v52);
                                }
                                else
                                {
                                  do
                                  {
                                    v53 = (uint64_t *)v30[2];
                                    v72 = *v53 == (_QWORD)v30;
                                    v30 = v53;
                                  }
                                  while (!v72);
                                }
                                if (v53 == v24)
                                {
                                  LODWORD(v26) = *(_DWORD *)(v4 + 8);
                                  goto LABEL_76;
                                }
                                v31 = (uint64_t *)*v29;
                                v30 = v53;
                              }
                              v33 = v29;
                              if (!v31)
                              {
LABEL_44:
                                v765 = v29;
                                v34 = (uint64_t **)v29;
                                goto LABEL_49;
                              }
                              goto LABEL_46;
                            }
LABEL_76:
                            *(_DWORD *)(v4 + 8) = v26 + 1;
                            sub_1C5B60564((_QWORD *)v769);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_15:
            if (v754 != v756)
              free(v754);
            if (v751 != v753)
              free(v751);
            ++v9;
          }
          while (v9 != (uint64_t *)v10);
        }
        v73 = *(_DWORD *)(v4 + 8);
        if (v73)
        {
          v708 = 0;
          v74 = *(uint64_t ***)v4;
          v722 = *(_QWORD *)v4 + 24 * v73;
          v75 = &qword_1ED81E000;
          while (1)
          {
            v723 = v74;
            if ((unint64_t)v74[2] >= 2)
            {
              v76 = (char *)(v74 + 1);
              v77 = *v74;
              if (*v74 != (uint64_t *)(v74 + 1))
                break;
            }
LABEL_891:
            v74 = v723 + 3;
            if (v723 + 3 == (uint64_t **)v722)
              goto LABEL_894;
          }
          v739 = (char *)(v74 + 1);
          while (1)
          {
            v78 = (char *)v77[1];
            v79 = v78;
            v80 = (char *)v77;
            if (v78)
            {
              do
              {
                v81 = v79;
                v79 = *(char **)v79;
              }
              while (v79);
            }
            else
            {
              do
              {
                v81 = (char *)*((_QWORD *)v80 + 2);
                v72 = *(_QWORD *)v81 == (_QWORD)v80;
                v80 = v81;
              }
              while (!v72);
            }
            if (v81 != v76)
              break;
LABEL_885:
            if (v78)
            {
              do
              {
                v657 = v78;
                v78 = *(char **)v78;
              }
              while (v78);
            }
            else
            {
              do
              {
                v657 = (char *)v77[2];
                v72 = *(_QWORD *)v657 == (_QWORD)v77;
                v77 = v657;
              }
              while (!v72);
            }
            v77 = v657;
            if (v657 == v76)
              goto LABEL_891;
          }
LABEL_117:
          v82 = *(llvm::ScalarEvolution **)(v4 + 888);
          v83 = (const llvm::Loop *)v77[9];
          BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v82, v83);
          Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)v83, (uint64_t)v82, 0);
          if (*(_WORD *)(Exact + 24) == 15
            || (v87 = Exact,
                v88 = *(llvm::ScalarEvolution **)(v4 + 888),
                v89 = (const llvm::Loop *)*((_QWORD *)v81 + 9),
                v90 = llvm::ScalarEvolution::getBackedgeTakenInfo(v88, v89),
                v91 = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v90, (uint64_t)v89, (uint64_t)v88, 0),
                *(_WORD *)(v91 + 24) == 15))
          {
LABEL_119:
            v748.i8[0] = 0;
            v748.i8[4] = 0;
            v748.i8[8] = 0;
          }
          else if (v87 == v91)
          {
            v748.i8[0] = 1;
            v748.i32[1] = 0;
            v748.i8[8] = 1;
          }
          else
          {
            SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(*(llvm::ScalarEvolution **)(v4 + 888), (const llvm::Loop *)v77[9]);
            v163 = llvm::ScalarEvolution::getSmallConstantTripCount(*(llvm::ScalarEvolution **)(v4 + 888), *((const llvm::Loop **)v81 + 9));
            if (!SmallConstantTripCount || !v163)
              goto LABEL_119;
            v164 = (SmallConstantTripCount - v163) & 0xFFFFFF00;
            v748.i8[0] = 0;
            if (SmallConstantTripCount - v163 <= 0)
              v164 = 0;
            v748.i32[1] = v164 & 0xFFFFFF00 | ((SmallConstantTripCount - v163) & ~((SmallConstantTripCount - v163) >> 31));
            v748.i8[8] = SmallConstantTripCount - v163 > 0;
          }
          v92 = v748.u8[8];
          v93 = (llvm::Loop *)HIDWORD(v748.i64[0]);
          if (!*((_BYTE *)v77 + 392) || (v748.i8[0] & 1) != 0)
          {
            if ((v748.i8[0] & 1) == 0)
              goto LABEL_154;
          }
          else if (!v748.i8[8] || *((_DWORD *)v75 + 880) < v748.i32[1])
          {
            goto LABEL_154;
          }
          v94 = (int64x2_t *)(v77 + 4);
          v95 = (llvm **)(v81 + 32);
          v96 = v77[47];
          if (v96)
          {
            if (*((_BYTE *)v77 + 393) || (v97 = *(_QWORD *)(v96 - 32), v97 == v94->i64[0]))
              v97 = *(_QWORD *)(v96 - 64);
            v98 = *((_QWORD *)v81 + 47);
            v99 = (_QWORD *)(v98 + 40);
            if (!v98)
              v99 = v81 + 32;
            if (v97 != *v99)
            {
LABEL_153:
              v76 = v739;
              goto LABEL_154;
            }
            if (v98)
            {
              v100 = *(_QWORD *)(v96 - 96);
              if (!v100)
                goto LABEL_146;
              if (*(unsigned __int8 *)(v100 + 16) < 0x1Cu)
                goto LABEL_146;
              v101 = *(_QWORD *)(v98 - 96);
              if (!v101 || *(unsigned __int8 *)(v101 + 16) < 0x1Cu)
                goto LABEL_146;
              if (llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(v96 - 96), *(const llvm::Instruction **)(v98 - 96))&& (*(unsigned __int8 *)(v101 + 17) ^ *(unsigned __int8 *)(v100 + 17)) <= 1)
              {
                v96 = v77[47];
                v98 = *((_QWORD *)v81 + 47);
                v94 = (int64x2_t *)(v77 + 4);
                v4 = a1;
LABEL_146:
                v72 = *(_QWORD *)(v96 - 32) == v94->i64[0];
                v102 = -64;
                if (v72)
                  v102 = -32;
                if (*(llvm **)(v98 + v102) != *v95 && v92 == 0)
                  goto LABEL_153;
              }
              else
              {
                v94 = (int64x2_t *)(v77 + 4);
                v4 = a1;
                if (!v92)
                  goto LABEL_153;
              }
            }
          }
          else if (*((_QWORD *)v81 + 47) || v77[7] != *((_QWORD *)v81 + 4))
          {
            goto LABEL_153;
          }
          v106 = (llvm::Instruction **)v4;
          v107 = v94;
          v108 = *(_QWORD *)(v94->i64[0] + 40);
          if (v108)
            v109 = v108 - 24;
          else
            v109 = 0;
          if (*(unsigned __int8 *)(v109 + 16) - 29 >= 0xB)
            v110 = 0;
          else
            v110 = (const llvm::BasicBlock **)v109;
          if (!llvm::isSafeToMoveBefore(*v95, v110, v106[109], v106[112], v106[110], v86))
            goto LABEL_242;
          if (v77[47])
          {
            v165 = (llvm *)v77[7];
            FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v81 + 7), 1);
            if (!llvm::isSafeToMoveBefore(v165, (const llvm::BasicBlock **)FirstNonPHIOrDbg, *(llvm::Instruction **)(a1 + 872), *(llvm::DominatorTree **)(a1 + 896), *(const llvm::PostDominatorTree **)(a1 + 880), v167))goto LABEL_242;
            v169 = *(_QWORD *)(*(_QWORD *)(v77[47] + 40) + 40);
            v170 = v169 ? v169 - 24 : 0;
            v171 = *(unsigned __int8 *)(v170 + 16) - 29 >= 0xB ? 0 : (const llvm::BasicBlock **)v170;
            if (!llvm::isSafeToMoveBefore(*(llvm **)(*((_QWORD *)v81 + 47) + 40), v171, *(llvm::Instruction **)(a1 + 872), *(llvm::DominatorTree **)(a1 + 896), *(const llvm::PostDominatorTree **)(a1 + 880), v168))goto LABEL_242;
          }
          v112 = (llvm::Instruction **)v77[28];
          v724 = (const void **)(v77 + 28);
          v113 = *((unsigned int *)v77 + 58);
          v114 = v107;
          if ((_DWORD)v113)
          {
            v733 = &v112[v113];
            do
            {
              v115 = *v112;
              v116 = *((unsigned int *)v81 + 58);
              if ((_DWORD)v116)
              {
                v117 = (llvm::Instruction **)*((_QWORD *)v81 + 28);
                v118 = 8 * v116;
                do
                {
                  if ((sub_1C5B60664(a1, (uint64_t)v114, (uint64_t)(v81 + 32), v115, *v117, dword_1ED81EE80) & 1) == 0)
                    goto LABEL_241;
                  ++v117;
                  v118 -= 8;
                  v114 = v107;
                }
                while (v118);
              }
              v119 = *((unsigned int *)v81 + 22);
              if ((_DWORD)v119)
              {
                v120 = (llvm::Instruction **)*((_QWORD *)v81 + 10);
                v121 = 8 * v119;
                do
                {
                  if ((sub_1C5B60664(a1, (uint64_t)v114, (uint64_t)(v81 + 32), v115, *v120, dword_1ED81EE80) & 1) == 0)
                    goto LABEL_241;
                  ++v120;
                  v121 -= 8;
                  v114 = v107;
                }
                while (v121);
              }
              ++v112;
            }
            while (v112 != v733);
          }
          v122 = *((unsigned int *)v81 + 58);
          if ((_DWORD)v122)
          {
            v123 = (llvm::Instruction **)*((_QWORD *)v81 + 28);
            v734 = &v123[v122];
            while (1)
            {
              v124 = *v123;
              v125 = *((unsigned int *)v77 + 58);
              if ((_DWORD)v125)
                break;
LABEL_187:
              v128 = *((unsigned int *)v77 + 22);
              if ((_DWORD)v128)
              {
                v129 = (llvm::Instruction **)v77[10];
                v130 = 8 * v128;
                while ((sub_1C5B60664(a1, (uint64_t)v114, (uint64_t)(v81 + 32), *v129, v124, dword_1ED81EE80) & 1) != 0)
                {
                  ++v129;
                  v130 -= 8;
                  v114 = v107;
                  if (!v130)
                    goto LABEL_191;
                }
                goto LABEL_241;
              }
LABEL_191:
              if (++v123 == v734)
                goto LABEL_192;
            }
            v126 = (llvm::Instruction **)v77[28];
            v127 = 8 * v125;
            while ((sub_1C5B60664(a1, (uint64_t)v114, (uint64_t)(v81 + 32), *v126, v124, dword_1ED81EE80) & 1) != 0)
            {
              ++v126;
              v127 -= 8;
              v114 = v107;
              if (!v127)
                goto LABEL_187;
            }
LABEL_241:
            v75 = &qword_1ED81E000;
            goto LABEL_242;
          }
LABEL_192:
          v131 = *((_QWORD *)v81 + 9);
          v132 = *(llvm::Value **)(v131 + 32);
          v713 = *(llvm::Value **)(v131 + 40);
          v75 = &qword_1ED81E000;
          if (v713 != v132)
          {
            while (1)
            {
              v716 = v132;
              v133 = *(_QWORD *)(*(_QWORD *)v132 + 48);
              v735 = *(_QWORD *)v132 + 40;
              if (v133 != v735)
                break;
LABEL_212:
              v132 = (llvm::Value *)((char *)v716 + 8);
              if ((llvm::Value *)((char *)v716 + 8) == v713)
                goto LABEL_213;
            }
            while (1)
            {
              if (v133)
                v134 = v133 - 24;
              else
                v134 = 0;
              v135 = *(_DWORD *)(v134 + 20);
              if ((v135 & 0x40000000) != 0)
              {
                v137 = *(_QWORD *)(v134 - 8);
                v136 = v135 & 0x7FFFFFF;
                if (v136)
                {
LABEL_201:
                  v138 = 32 * v136;
                  while (1)
                  {
                    if (*(_QWORD *)v137 && *(unsigned __int8 *)(*(_QWORD *)v137 + 16) >= 0x1Cu)
                    {
                      v140 = v77[9];
                      v141 = sub_1C477672C(v140 + 56, *(_QWORD *)(*(_QWORD *)v137 + 40));
                      v114 = v107;
                      v142 = *(_QWORD *)(v140 + 64);
                      v143 = 72;
                      if (v142 == *(_QWORD *)(v140 + 56))
                        v143 = 76;
                      v144 = *(unsigned int *)(v140 + v143);
                      v75 = &qword_1ED81E000;
                      if (v141 != (_QWORD *)(v142 + 8 * v144))
                        break;
                    }
                    v137 += 32;
                    v138 -= 32;
                    if (!v138)
                      goto LABEL_211;
                  }
LABEL_242:
                  v4 = a1;
                  v76 = v739;
LABEL_154:
                  v104 = (char *)*((_QWORD *)v81 + 1);
                  if (v104)
                  {
                    do
                    {
                      v105 = v104;
                      v104 = *(char **)v104;
                    }
                    while (v104);
                  }
                  else
                  {
                    do
                    {
                      v105 = (char *)*((_QWORD *)v81 + 2);
                      v72 = *(_QWORD *)v105 == (_QWORD)v81;
                      v81 = v105;
                    }
                    while (!v72);
                  }
                  v81 = v105;
                  if (v105 == v76)
                  {
                    v78 = (char *)v77[1];
                    goto LABEL_885;
                  }
                  goto LABEL_117;
                }
              }
              else
              {
                v136 = v135 & 0x7FFFFFF;
                v137 = v134 - 32 * v136;
                if (v136)
                  goto LABEL_201;
              }
LABEL_211:
              v133 = *(_QWORD *)(v133 + 8);
              if (v133 == v735)
                goto LABEL_212;
            }
          }
LABEL_213:
          v145 = v114[1];
          v748 = *v114;
          *(int64x2_t *)v749 = v145;
          *(int64x2_t *)v750 = v114[2];
          v751 = v753;
          v752 = 0x1000000000;
          v146 = *((_DWORD *)v77 + 22);
          if (v146 && &v748 != v114)
          {
            if (v146 < 0x11)
            {
              v147 = v753;
              v148 = *((unsigned int *)v77 + 22);
              goto LABEL_217;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v751, (uint64_t)v753, *((unsigned int *)v77 + 22), 8);
            v148 = *((unsigned int *)v77 + 22);
            if ((_DWORD)v148)
            {
              v147 = v751;
LABEL_217:
              memcpy(v147, (const void *)v77[10], 8 * v148);
            }
            LODWORD(v752) = v146;
            v114 = v107;
          }
          v754 = v756;
          v755 = 0x1000000000;
          v149 = *((_DWORD *)v77 + 58);
          if (v149 && &v754 != (void **)v724)
          {
            if (v149 < 0x11)
            {
              v150 = v756;
              v151 = *((unsigned int *)v77 + 58);
              goto LABEL_223;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v754, (uint64_t)v756, *((unsigned int *)v77 + 58), 8);
            v151 = *((unsigned int *)v77 + 58);
            if ((_DWORD)v151)
            {
              v150 = v754;
LABEL_223:
              memcpy(v150, *v724, 8 * v151);
            }
            LODWORD(v755) = v149;
            v114 = v107;
          }
          v152 = *((_OWORD *)v77 + 24);
          v757 = *((_OWORD *)v77 + 23);
          v758 = v152;
          v759 = *((_OWORD *)v77 + 25);
          v760 = v77[52];
          if (v92 && (_DWORD)v93)
          {
            v153 = a1;
            v154 = llvm::peelLoop(v750[1], v93, *(llvm::LoopInfo **)(a1 + 864), *(int32x2_t **)(a1 + 888), *(llvm::ScalarEvolution **)(a1 + 872), *(llvm::DominatorTree **)(a1 + 912), (char **)1);
            BYTE9(v758) = v154;
            if (!v154)
              goto LABEL_306;
            LODWORD(v758) = v758 + (_DWORD)v93;
            v155 = *(_QWORD *)(a1 + 896);
            *(_QWORD *)(v155 + 80) = *(_QWORD *)(v748.i64[0] + 56);
            sub_1C53BA93C(v155, 0);
            LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v750[1]);
            if (!LoopPredecessor)
              goto LABEL_235;
            v157 = *(_QWORD *)(LoopPredecessor + 40);
            if (v157 == LoopPredecessor + 40)
              goto LABEL_235;
            if (v157)
              v158 = v157 - 24;
            else
              v158 = 0;
            v159 = *(unsigned __int8 *)(v158 + 16);
            v160 = v159 - 29;
            if (v159 != 30)
            {
              v161 = 0;
              switch(v160)
              {
                case 0:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                  goto LABEL_262;
                case 1:
                  __break(1u);
                  return result;
                case 2:
                  v172 = (*(_DWORD *)(v158 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_260;
                case 3:
                  v172 = (*(_DWORD *)(v158 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_260;
                case 10:
                  v172 = *(_DWORD *)(v158 + 80) + 1;
LABEL_260:
                  if (v172 == 1)
                    goto LABEL_261;
                  goto LABEL_235;
                default:
                  goto LABEL_235;
              }
            }
            if ((*(_DWORD *)(v158 + 20) & 0x7FFFFFF) == 3)
LABEL_235:
              v161 = 0;
            else
LABEL_261:
              v161 = LoopPredecessor;
LABEL_262:
            v748.i64[0] = v161;
            v748.i64[1] = **((_QWORD **)v750[1] + 4);
            v749[0] = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock((_QWORD *)v750[1]);
            v749[1] = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock((_QWORD *)v750[1]);
            v750[0] = (llvm::Loop *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v750[1]);
            if (*((_QWORD *)&v757 + 1))
            {
              UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v749[1]);
              if (!UniqueSuccessor)
                goto LABEL_306;
            }
            else
            {
              UniqueSuccessor = (unint64_t)*v95;
              if (!*v95)
                goto LABEL_306;
            }
            v741 = v743;
            v742 = 0x800000000;
            v768 = v770;
            v769 = 0x800000000;
            v174 = *(_QWORD *)(UniqueSuccessor + 8);
            v175 = (uint64_t)v712;
            if (v174)
            {
              while (1)
              {
                v176 = *(_QWORD *)(v174 + 24);
                v177 = *(unsigned __int8 *)(v176 + 16);
                v178 = v176 && v177 >= 0x1C;
                if (v178 && v177 - 29 < 0xB)
                  break;
                v174 = *(_QWORD *)(v174 + 8);
                if (!v174)
                  goto LABEL_302;
              }
LABEL_277:
              v180 = *(_QWORD **)(v176 + 40);
              if (v180 != (_QWORD *)v749[1])
              {
                v181 = (_QWORD *)v180[5];
                if (v181 == v180 + 5)
                {
                  v183 = 0;
                }
                else
                {
                  if (v181)
                    v182 = v181 - 3;
                  else
                    v182 = 0;
                  if (*((unsigned __int8 *)v182 + 16) - 29 >= 0xB)
                    v183 = 0;
                  else
                    v183 = v182;
                }
                v184 = v769;
                if (v769 >= HIDWORD(v769))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v768, (uint64_t)v770, v769 + 1, 8);
                  v175 = (uint64_t)v712;
                  *((_QWORD *)v768 + v769) = v183;
                  v184 = v769;
                }
                else
                {
                  *((_QWORD *)v768 + v769) = v183;
                }
                LODWORD(v769) = v184 + 1;
                v185 = v742;
                if (v742 >= HIDWORD(v742))
                {
                  sub_1C4F76720(&v741, (uint64_t)v180, UniqueSuccessor | 4);
                  v175 = (uint64_t)v712;
                }
                else
                {
                  v186 = (char *)v741 + 16 * v742;
                  *v186 = v180;
                  v186[1] = UniqueSuccessor | 4;
                  LODWORD(v742) = v185 + 1;
                }
              }
              while (1)
              {
                v174 = *(_QWORD *)(v174 + 8);
                if (!v174)
                  break;
                v176 = *(_QWORD *)(v174 + 24);
                v187 = *(unsigned __int8 *)(v176 + 16);
                if (v176)
                  v188 = v187 >= 0x1C;
                else
                  v188 = 0;
                if (v188 && v187 - 29 < 0xB)
                  goto LABEL_277;
              }
              if ((_DWORD)v769)
              {
                v443 = (char *)v768;
                v444 = 8 * v769;
                do
                {
                  v445 = *(_QWORD *)v443;
                  v446 = *(unsigned __int8 *)(*(_QWORD *)v443 + 16);
                  if (v446 != 30)
                    __asm { BR              X10 }
                  v447 = *(_QWORD **)(v445 - 32);
                  if (v447 == (_QWORD *)UniqueSuccessor)
                    v447 = *(_QWORD **)(v445 - 64);
                  v448 = (char *)operator new(0x60uLL);
                  *((_DWORD *)v448 + 13) = *((_DWORD *)v448 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v448 = 0;
                  *((_QWORD *)v448 + 2) = 0;
                  *((_QWORD *)v448 + 1) = 0;
                  *((_QWORD *)v448 + 4) = **(_QWORD **)*v447 + 1576;
                  *((_QWORD *)v448 + 3) = v448 + 32;
                  *((_QWORD *)v448 + 5) = 0;
                  v448[48] = 30;
                  v448[49] = 0;
                  *((_WORD *)v448 + 25) = 0;
                  *((_DWORD *)v448 + 13) = 1;
                  *(_OWORD *)(v448 + 56) = 0u;
                  *(_OWORD *)(v448 + 72) = 0u;
                  *((_DWORD *)v448 + 22) = 0;
                  *(_QWORD *)v448 = v447;
                  v451 = v447[1];
                  v450 = v447 + 1;
                  v449 = v451;
                  *((_QWORD *)v448 + 1) = v451;
                  if (v451)
                    *(_QWORD *)(v449 + 16) = v448 + 8;
                  *((_QWORD *)v448 + 2) = v450;
                  *v450 = v448;
                  v765 = (void *)(v445 + 24);
                  llvm::ReplaceInstWithInst(*(_QWORD *)(v445 + 40) + 40, (uint64_t **)&v765, (llvm::Value *)(v448 + 32));
                  v443 += 8;
                  v444 -= 8;
                  v175 = (uint64_t)v712;
                }
                while (v444);
              }
            }
LABEL_302:
            v190 = (llvm::DomTreeUpdater *)v175;
            llvm::DomTreeUpdater::applyUpdates(v175, (unint64_t *)v741, v742);
            llvm::DomTreeUpdater::flush(v190);
            if (v768 != v770)
              free(v768);
            if (v741 != v743)
              free(v741);
LABEL_306:
            v114 = &v748;
            v75 = &qword_1ED81E000;
          }
          else
          {
            v153 = a1;
          }
          v736 = (uint64_t)v114;
          llvm::moveInstructionsToTheEnd(*v95, (llvm::BasicBlock *)v114->i64[0], *(llvm::BasicBlock **)(v153 + 872), *(llvm::DominatorTree **)(v153 + 896), *(const llvm::PostDominatorTree **)(v153 + 880), v111);
          v191 = (llvm::BasicBlock **)v736;
          v192 = *(_QWORD *)(v736 + 344);
          if (!v192)
          {
            v765 = v767;
            v766 = 0x800000000;
            if (*(_QWORD *)(v736 + 16) != *(_QWORD *)(v736 + 32)
              && *(_QWORD *)(*(_QWORD *)(v736 + 8) + 40) != *(_QWORD *)(v736 + 8) + 40)
            {
              v193 = *(_QWORD *)(*(_QWORD *)(v736 + 8) + 48);
              v194 = v193 - 24;
              v195 = v193 ? v193 - 24 : 0;
              if (v193 && *(_BYTE *)(v195 + 16) == 83)
              {
                v196 = 0;
                do
                {
                  if (v196 >= HIDWORD(v766))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v765, (uint64_t)v767, v196 + 1, 8);
                    v191 = (llvm::BasicBlock **)v736;
                    v196 = v766;
                  }
                  *((_QWORD *)v765 + v196) = v194;
                  v196 = v766 + 1;
                  LODWORD(v766) = v766 + 1;
                  v197 = *(_QWORD *)(v194 + 32);
                  v194 = v197 - 24;
                  if (v197)
                    v198 = v197 - 24;
                  else
                    v198 = 0;
                }
                while (v197 && *(_BYTE *)(v198 + 16) == 83);
              }
            }
            llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)v81 + 4), *((llvm::BasicBlock **)v81 + 4), *v191);
            llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*(llvm::BasicBlock **)(v736 + 32), *(llvm::BasicBlock **)(v736 + 32), *((llvm::BasicBlock **)v81 + 8));
            v768 = v770;
            v769 = 0x800000000;
            if (*(_BYTE *)(v736 + 361))
            {
              v770[1] = (unint64_t)*v95 | 4;
              v200 = *(_QWORD *)(v736 + 16);
              v199 = *(llvm::Value **)(v736 + 24);
              v770[0] = v199;
              LODWORD(v769) = 1;
              v201 = *(_QWORD *)(v200 + 40);
              if (v201 == v200 + 40)
              {
                v203 = 0;
              }
              else
              {
                if (v201)
                  v202 = (unsigned __int8 *)(v201 - 24);
                else
                  v202 = 0;
                if (v202[16] - 29 >= 0xB)
                  v203 = 0;
                else
                  v203 = (llvm::User *)v202;
              }
              llvm::User::replaceUsesOfWith(v203, v199, *((llvm::Value **)v81 + 5));
              v208 = v736;
              v209 = *(_QWORD *)(v736 + 16);
              v210 = *(_QWORD *)(v736 + 24) | 4;
              v211 = v769;
              if (v769 >= HIDWORD(v769))
              {
                sub_1C4F76720(&v768, v209, v210);
                v208 = v736;
              }
              else
              {
                v212 = (uint64_t *)((char *)v768 + 16 * v769);
                *v212 = v209;
                v212[1] = v210;
                LODWORD(v769) = v211 + 1;
              }
              v213 = *(_QWORD *)(v208 + 24);
              v214 = *(_QWORD *)(v213 + 40);
              if (v214 == v213 + 40)
              {
                v216 = 0;
              }
              else
              {
                if (v214)
                  v215 = v214 - 24;
                else
                  v215 = 0;
                if (*(unsigned __int8 *)(v215 + 16) - 29 >= 0xB)
                  v216 = 0;
                else
                  v216 = v215;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v216 + 40) + 40, (uint64_t ***)v216);
              v217 = *(_QWORD *)(v216 + 24);
              v218 = *(_QWORD **)(v216 + 32);
              *v218 = v217;
              *(_QWORD *)(v217 + 8) = v218;
              *(_QWORD *)(v216 + 24) = 0;
              *(_QWORD *)(v216 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v216);
              v219 = *(_QWORD *)(v736 + 16);
              v220 = *((_QWORD *)v81 + 5) & 0xFFFFFFFFFFFFFFFBLL;
              v221 = v769;
              if (v769 >= HIDWORD(v769))
              {
                sub_1C4F76720(&v768, v219, v220);
              }
              else
              {
                v222 = (uint64_t *)((char *)v768 + 16 * v769);
                *v222 = v219;
                v222[1] = v220;
                LODWORD(v769) = v221 + 1;
              }
              v223 = (char *)operator new(0x40uLL);
              *((_DWORD *)v223 + 5) &= 0x38000000u;
              v224 = *(_QWORD *)(v736 + 24);
              *(_QWORD *)v223 = ***(_QWORD ***)v224 + 1576;
              *((_QWORD *)v223 + 1) = 0;
              v223[16] = 35;
              *(_OWORD *)(v223 + 44) = 0u;
              *(_OWORD *)(v223 + 33) = 0u;
              *(_OWORD *)(v223 + 17) = 0u;
              *((_QWORD *)v223 + 5) = v224;
              *(_WORD *)(v224 + 18) &= ~0x8000u;
              if ((v223[23] & 0x10) != 0)
              {
                v416 = *(_QWORD *)(v224 + 56);
                if (v416)
                {
                  v417 = *(llvm::ValueSymbolTable **)(v416 + 104);
                  if (v417)
                    llvm::ValueSymbolTable::reinsertValue(v417, (llvm::Value *)v223);
                }
              }
              v226 = *(_QWORD *)(v224 + 40);
              v225 = (_QWORD *)(v224 + 40);
              *((_QWORD *)v223 + 3) = v226;
              *((_QWORD *)v223 + 4) = v225;
              *(_QWORD *)(v226 + 8) = v223 + 24;
              *v225 = v223 + 24;
            }
            else
            {
              v204 = *(_QWORD *)(v736 + 16);
              v205 = *(_QWORD *)(v204 + 40);
              if (v205 == v204 + 40)
              {
                v207 = 0;
              }
              else
              {
                if (v205)
                  v206 = (unsigned __int8 *)(v205 - 24);
                else
                  v206 = 0;
                if (v206[16] - 29 >= 0xB)
                  v207 = 0;
                else
                  v207 = (llvm::User *)v206;
              }
              llvm::User::replaceUsesOfWith(v207, *((llvm::Value **)v81 + 4), *((llvm::Value **)v81 + 5));
              v227 = v736;
              v228 = *(_QWORD *)(v736 + 16);
              v229 = *((_QWORD *)v81 + 4) | 4;
              v230 = v769;
              v231 = HIDWORD(v769);
              if (v769 >= (unint64_t)HIDWORD(v769))
              {
                sub_1C4F76720(&v768, v228, v229);
                v227 = v736;
                v233 = v769;
                v231 = HIDWORD(v769);
              }
              else
              {
                v232 = (uint64_t *)((char *)v768 + 16 * v769);
                *v232 = v228;
                v232[1] = v229;
                v233 = v230 + 1;
                LODWORD(v769) = v233;
              }
              v234 = *(_QWORD *)(v227 + 16);
              v235 = *((_QWORD *)v81 + 5) & 0xFFFFFFFFFFFFFFFBLL;
              if (v233 >= v231)
              {
                sub_1C4F76720(&v768, v234, v235);
              }
              else
              {
                v236 = (uint64_t *)((char *)v768 + 16 * v233);
                *v236 = v234;
                v236[1] = v235;
                LODWORD(v769) = v233 + 1;
              }
            }
            v237 = (llvm *)*((_QWORD *)*v95 + 5);
            if (v237 == (llvm *)((char *)*v95 + 40))
            {
              v239 = 0;
            }
            else
            {
              if (v237)
                v238 = (char *)v237 - 24;
              else
                v238 = 0;
              if (v238[16] - 29 >= 0xB)
                v239 = 0;
              else
                v239 = v238;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v239 + 5) + 40, (uint64_t ***)v239);
            v240 = *((_QWORD *)v239 + 3);
            v241 = (_QWORD *)*((_QWORD *)v239 + 4);
            *v241 = v240;
            *(_QWORD *)(v240 + 8) = v241;
            *((_QWORD *)v239 + 3) = 0;
            *((_QWORD *)v239 + 4) = 0;
            llvm::Value::deleteValue((llvm::Value *)v239);
            v242 = (char *)operator new(0x40uLL);
            *((_DWORD *)v242 + 5) &= 0x38000000u;
            v243 = *v95;
            *(_QWORD *)v242 = ***(_QWORD ***)*v95 + 1576;
            *((_QWORD *)v242 + 1) = 0;
            v242[16] = 35;
            *(_OWORD *)(v242 + 44) = 0u;
            *(_OWORD *)(v242 + 33) = 0u;
            *(_OWORD *)(v242 + 17) = 0u;
            *((_QWORD *)v242 + 5) = v243;
            *((_WORD *)v243 + 9) &= ~0x8000u;
            if ((v242[23] & 0x10) != 0)
            {
              v414 = *((_QWORD *)v243 + 7);
              if (v414)
              {
                v415 = *(llvm::ValueSymbolTable **)(v414 + 104);
                if (v415)
                  llvm::ValueSymbolTable::reinsertValue(v415, (llvm::Value *)v242);
              }
            }
            v245 = *((_QWORD *)v243 + 5);
            v244 = (_QWORD *)((char *)v243 + 40);
            *((_QWORD *)v242 + 3) = v245;
            *((_QWORD *)v242 + 4) = v244;
            *(_QWORD *)(v245 + 8) = v242 + 24;
            *v244 = v242 + 24;
            v246 = *((_QWORD *)v81 + 4);
            v247 = *((_QWORD *)v81 + 5) | 4;
            v248 = v769;
            if (v769 >= HIDWORD(v769))
            {
              sub_1C4F76720(&v768, v246, v247);
            }
            else
            {
              v249 = (uint64_t *)((char *)v768 + 16 * v769);
              *v249 = v246;
              v249[1] = v247;
              LODWORD(v769) = v248 + 1;
            }
            v250 = *(_QWORD *)(*((_QWORD *)v81 + 5) + 48);
            v251 = (llvm::Value *)(v250 - 24);
            if (v250)
              v252 = v250 - 24;
            else
              v252 = 0;
            if (v250 && *(_BYTE *)(v252 + 16) == 83)
            {
              do
              {
                if ((*(_DWORD *)(*(_QWORD *)v251 + 8) & 0xFD) == 0xD)
                  llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(v153 + 888), v251);
                if (*((_QWORD *)v251 + 1))
                {
                  v253 = *(_QWORD *)(v736 + 8);
                  v254 = v253 + 40;
                  for (i = *(_QWORD *)(v253 + 48); i != v254; i = *(_QWORD *)(i + 8))
                  {
                    v256 = i - 24;
                    if (!i)
                      v256 = 0;
                    if (*(_BYTE *)(v256 + 16) != 83)
                    {
                      v259 = *(unsigned __int8 *)(i - 8) - 38;
                      v56 = v259 > 0x38;
                      v260 = (1 << v259) & 0x100060000000001;
                      if (v56 || v260 == 0)
                        v254 = i;
                      else
                        v254 = *(_QWORD *)(i + 8);
                      break;
                    }
                  }
                  if (v254)
                    v262 = (llvm::Instruction *)(v254 - 24);
                  else
                    v262 = 0;
                  llvm::Instruction::moveBefore(v251, v262);
                }
                else
                {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v251 + 5) + 40, (uint64_t ***)v251);
                  v257 = *((_QWORD *)v251 + 3);
                  v258 = (_QWORD *)*((_QWORD *)v251 + 4);
                  *v258 = v257;
                  *(_QWORD *)(v257 + 8) = v258;
                  *((_QWORD *)v251 + 3) = 0;
                  *((_QWORD *)v251 + 4) = 0;
                  llvm::Value::deleteValue(v251);
                }
                v263 = *(_QWORD *)(*((_QWORD *)v81 + 5) + 48);
                v264 = v263 - 24;
                if (v263)
                  v265 = (unsigned __int8 *)(v263 - 24);
                else
                  v265 = 0;
                v266 = v265[16];
                if (v266 == 83)
                  v251 = (llvm::Value *)v265;
                else
                  v251 = 0;
              }
              while (v263 && v266 == 83);
            }
            else
            {
              v264 = v250 - 24;
            }
            if ((_DWORD)v766)
            {
              v267 = (uint64_t *)v765;
              v709 = (char *)v765 + 8 * v766;
              v703 = (uint64_t *)(v264 + 24);
              do
              {
                v725 = v267;
                v268 = *v267;
                v269 = *(_DWORD *)(*v267 + 20);
                v270 = v269 & 0x7FFFFFF;
                if ((v269 & 0x7FFFFFF) != 0)
                {
                  v271 = 0;
                  while (1)
                  {
                    v272 = v268 - 32 * v270;
                    if ((v269 & 0x40000000) != 0)
                      v272 = *(_QWORD *)(v268 - 8);
                    if (*(_QWORD *)(v272 + 32 * *(unsigned int *)(v268 + 60) + 8 * v271) == *((_QWORD *)v81 + 8))
                      break;
                    if (v270 == ++v271)
                      goto LABEL_412;
                  }
                  v273 = v271;
                  if ((v269 & 0x40000000) == 0)
                  {
LABEL_413:
                    v274 = v268 - 32 * v270;
                    if ((v269 & 0x10000000) == 0)
                      goto LABEL_422;
                    goto LABEL_414;
                  }
                }
                else
                {
LABEL_412:
                  v273 = -1;
                  if ((v269 & 0x40000000) == 0)
                    goto LABEL_413;
                }
                v274 = *(_QWORD *)(v268 - 8);
                if ((v269 & 0x10000000) == 0)
                {
LABEL_422:
                  v283 = 0;
                  v284 = &byte_1C871356D;
                  goto LABEL_425;
                }
LABEL_414:
                v275 = ***(_QWORD ***)v268;
                v276 = *(_QWORD *)(v275 + 152);
                v277 = *(unsigned int *)(v275 + 168);
                if (!(_DWORD)v277)
                  goto LABEL_423;
                LODWORD(v278) = (v277 - 1) & ((v268 >> 4) ^ (v268 >> 9));
                v279 = (uint64_t *)(v276 + 16 * v278);
                v280 = *v279;
                if (*v279 != v268)
                {
                  v281 = 1;
                  while (v280 != -4096)
                  {
                    v282 = v278 + v281++;
                    v278 = v282 & (v277 - 1);
                    v280 = *(_QWORD *)(v276 + 16 * v278);
                    if (v280 == v268)
                    {
                      v279 = (uint64_t *)(v276 + 16 * v278);
                      goto LABEL_424;
                    }
                  }
LABEL_423:
                  v279 = (uint64_t *)(v276 + 16 * v277);
                }
LABEL_424:
                v285 = (_QWORD *)v279[1];
                v286 = *v285;
                v284 = (char *)(v285 + 2);
                v283 = v286;
LABEL_425:
                v714 = *(llvm::UndefValue ***)(v274 + 32 * v273);
                v717 = v273;
                v287 = *v714;
                v764 = 773;
                v761 = v284;
                v762 = v283;
                v763[0] = ".afterFC0";
                v288 = operator new(0x48uLL);
                v288[1] = v287;
                v289 = (llvm::Value *)(v288 + 1);
                *v288 = 0;
                v288[2] = 0;
                v288[3] = 0x4000000000000053;
                *((_OWORD *)v288 + 2) = 0u;
                v290 = (char *)(v288 + 4);
                *((_OWORD *)v288 + 3) = 0u;
                *((_DWORD *)v288 + 16) = 0;
                v291 = *(_QWORD *)(v264 + 40);
                v288[6] = v291;
                *(_WORD *)(v291 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v288 + 31) & 0x10) != 0)
                {
                  v298 = *(_QWORD *)(v291 + 56);
                  if (v298)
                  {
                    v299 = *(llvm::ValueSymbolTable **)(v298 + 104);
                    if (v299)
                      llvm::ValueSymbolTable::reinsertValue(v299, v289);
                  }
                }
                v292 = *v703;
                v288[4] = *v703;
                v288[5] = v703;
                *(_QWORD *)(v292 + 8) = v290;
                *v703 = (uint64_t)v290;
                *((_DWORD *)v288 + 17) = 2;
                llvm::Value::setName((uint64_t ***)v289, (uint64_t)&v761);
                v293 = *((unsigned int *)v288 + 17);
                v294 = operator new(40 * v293);
                *v288 = v294;
                if ((_DWORD)v293)
                {
                  v295 = &v294[4 * v293];
                  do
                  {
                    *v294 = 0;
                    v294[1] = 0;
                    v294[2] = 0;
                    v294[3] = v289;
                    v294 += 4;
                  }
                  while (v294 != v295);
                }
                sub_1C477667C(v289, (uint64_t)v714, *(_QWORD *)(v736 + 32));
                v297 = llvm::UndefValue::get(*v714, v296);
                sub_1C477667C(v289, (uint64_t)v297, *(_QWORD *)(v736 + 16));
                sub_1C6125834(v268, v717, (uint64_t)v289);
                v267 = v725 + 1;
              }
              while (v725 + 1 != (uint64_t *)v709);
            }
            v300 = *(_QWORD *)(v736 + 32);
            v301 = *(_QWORD *)(v300 + 40);
            if (v301 == v300 + 40)
            {
              v303 = 0;
            }
            else
            {
              if (v301)
                v302 = (unsigned __int8 *)(v301 - 24);
              else
                v302 = 0;
              if (v302[16] - 29 >= 0xB)
                v303 = 0;
              else
                v303 = (llvm::User *)v302;
            }
            llvm::User::replaceUsesOfWith(v303, *(llvm::Value **)(v736 + 8), *((llvm::Value **)v81 + 5));
            v304 = *((_QWORD *)v81 + 8);
            v305 = *(_QWORD *)(v304 + 40);
            if (v305 == v304 + 40)
            {
              v307 = 0;
            }
            else
            {
              if (v305)
                v306 = (unsigned __int8 *)(v305 - 24);
              else
                v306 = 0;
              if (v306[16] - 29 >= 0xB)
                v307 = 0;
              else
                v307 = (llvm::User *)v306;
            }
            llvm::User::replaceUsesOfWith(v307, *((llvm::Value **)v81 + 5), *(llvm::Value **)(v736 + 8));
            sub_1C5B61490(*(_QWORD *)(v736 + 32));
            v308 = v736;
            v309 = *(_QWORD *)(v736 + 32);
            v310 = v769;
            v311 = HIDWORD(v769);
            if (v309 == *(_QWORD *)(v736 + 16))
            {
              v313 = v712;
              v4 = a1;
            }
            else
            {
              v312 = *((_QWORD *)v81 + 5) & 0xFFFFFFFFFFFFFFFBLL;
              v313 = v712;
              if (v769 >= (unint64_t)HIDWORD(v769))
              {
                sub_1C4F76720(&v768, v309, v312);
                v308 = v736;
                v313 = v712;
                v310 = v769;
                v311 = HIDWORD(v769);
              }
              else
              {
                v314 = (uint64_t *)((char *)v768 + 16 * v769);
                *v314 = v309;
                v314[1] = v312;
                LODWORD(v769) = ++v310;
              }
              v4 = a1;
              v309 = *(_QWORD *)(v308 + 32);
            }
            v315 = *(_QWORD *)(v308 + 8) | 4;
            if (v310 >= v311)
            {
              sub_1C4F76720(&v768, v309, v315);
              v308 = v736;
              v313 = v712;
              v317 = v769;
              v311 = HIDWORD(v769);
            }
            else
            {
              v316 = (uint64_t *)((char *)v768 + 16 * v310);
              *v316 = v309;
              v316[1] = v315;
              v317 = v310 + 1;
              LODWORD(v769) = v317;
            }
            v318 = *((_QWORD *)v81 + 8);
            v319 = *(_QWORD *)(v308 + 8) & 0xFFFFFFFFFFFFFFFBLL;
            if (v317 >= v311)
            {
              sub_1C4F76720(&v768, v318, v319);
              v313 = v712;
              v321 = v769;
              v311 = HIDWORD(v769);
            }
            else
            {
              v320 = (uint64_t *)((char *)v768 + 16 * v317);
              *v320 = v318;
              v320[1] = v319;
              v321 = v317 + 1;
              LODWORD(v769) = v321;
            }
            v322 = *((_QWORD *)v81 + 8);
            v323 = *((_QWORD *)v81 + 5) | 4;
            if (v321 >= v311)
            {
              sub_1C4F76720(&v768, v322, v323);
              v313 = v712;
              v325 = v769;
            }
            else
            {
              v324 = (uint64_t *)((char *)v768 + 16 * v321);
              *v324 = v322;
              v324[1] = v323;
              v325 = v321 + 1;
              LODWORD(v769) = v321 + 1;
            }
            llvm::DomTreeUpdater::applyUpdates((uint64_t)v313, (unint64_t *)v768, v325);
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(v4 + 864), (uint64_t)*v95);
            llvm::DomTreeUpdater::deleteBB(v313, *v95);
            if (*(_BYTE *)(v736 + 361))
            {
              llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(v4 + 864), *(_QWORD *)(v736 + 24));
              llvm::DomTreeUpdater::deleteBB(v313, *(llvm::BasicBlock **)(v736 + 24));
            }
            llvm::DomTreeUpdater::flush(v313);
            llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(v4 + 888), *((const llvm::Loop **)v81 + 9));
            llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(v4 + 888), *(const llvm::Loop **)(v736 + 40));
            sub_1C5B61598(v4, v736, *((llvm::BasicBlock **)v81 + 8), v326, v327, v328);
            v329 = *((_QWORD *)v81 + 9);
            v331 = *(_BYTE **)(v329 + 32);
            v330 = *(_BYTE **)(v329 + 40);
            v332 = v330 - v331;
            v761 = v763;
            v762 = 0x800000000;
            if ((unint64_t)(v330 - v331) >= 0x41)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v761, (uint64_t)v763, v332 >> 3, 8);
              v333 = v762;
              v334 = (uint64_t *)v761;
            }
            else
            {
              v333 = 0;
              v334 = v763;
            }
            if (v330 != v331)
            {
              memcpy(&v334[v333], v331, v330 - v331);
              v333 = v762;
              v334 = (uint64_t *)v761;
            }
            v335 = v736;
            v336 = v333 + ((unint64_t)v332 >> 3);
            LODWORD(v762) = v336;
            if (v336)
            {
              v337 = &v334[v336];
              do
              {
                v338 = *v334;
                v339 = *(_QWORD **)(v335 + 40);
                v341 = (uint64_t *)v339[5];
                v340 = v339[6];
                if ((unint64_t)v341 >= v340)
                {
                  v726 = v337;
                  v364 = (_QWORD *)v339[4];
                  v365 = v341 - v364;
                  v366 = v365 + 1;
                  if ((unint64_t)(v365 + 1) >> 61)
                    goto LABEL_953;
                  v367 = v340 - (_QWORD)v364;
                  if (v367 >> 2 > v366)
                    v366 = v367 >> 2;
                  if ((unint64_t)v367 >= 0x7FFFFFFFFFFFFFF8)
                    v366 = 0x1FFFFFFFFFFFFFFFLL;
                  v718 = v366;
                  if (v366)
                  {
                    if (v366 >> 61)
                      goto LABEL_954;
                    v368 = (_QWORD *)v339[4];
                    v369 = (char *)operator new(8 * v366);
                    v364 = v368;
                  }
                  else
                  {
                    v369 = 0;
                  }
                  v370 = (uint64_t *)&v369[8 * v365];
                  *v370 = v338;
                  v342 = v370 + 1;
                  if (v341 == v364)
                  {
                    v337 = v726;
                  }
                  else
                  {
                    v337 = v726;
                    do
                    {
                      v371 = *--v341;
                      *--v370 = v371;
                    }
                    while (v341 != v364);
                    v341 = (uint64_t *)v339[4];
                  }
                  v339[4] = v370;
                  v339[5] = v342;
                  v339[6] = &v369[8 * v718];
                  if (v341)
                    operator delete(v341);
                }
                else
                {
                  *v341 = v338;
                  v342 = v341 + 1;
                }
                v339[5] = v342;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)(v339 + 7), v338);
                llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(*((_QWORD *)v81 + 9), v338);
                v343 = *(int32x2_t **)(v4 + 864);
                v344 = v343[2].i32[0];
                v345 = v338 >> 4;
                if (v344)
                {
                  v346 = *v343;
                  v347 = (v344 - 1) & (v345 ^ (v338 >> 9));
                  v348 = *(_QWORD *)(*(_QWORD *)v343 + 16 * v347);
                  if (v338 == v348)
                  {
LABEL_476:
                    v351 = *(_QWORD *)(*(_QWORD *)&v346 + 16 * v347 + 8);
                    goto LABEL_478;
                  }
                  v349 = 1;
                  while (v348 != -4096)
                  {
                    v350 = v347 + v349++;
                    v347 = v350 & (v344 - 1);
                    v348 = *(_QWORD *)(*(_QWORD *)&v346 + 16 * v347);
                    if (v338 == v348)
                      goto LABEL_476;
                  }
                }
                v351 = 0;
LABEL_478:
                v335 = v736;
                if (v351 == *((_QWORD *)v81 + 9))
                {
                  v352 = *(_QWORD *)(v736 + 40);
                  v740 = v338;
                  v353 = *v343;
                  if (v352)
                  {
                    if (!v344)
                    {
                      v363 = 0;
                      goto LABEL_494;
                    }
                    v354 = v345 ^ (v338 >> 9);
                    v355 = v344 - 1;
                    v356 = (v344 - 1) & v354;
                    v357 = (_QWORD *)(*(_QWORD *)&v353 + 16 * v356);
                    v358 = *v357;
                    if (*v357 != v338)
                    {
                      v359 = 0;
                      v360 = 1;
                      while (v358 != -4096)
                      {
                        if (v359)
                          v361 = 0;
                        else
                          v361 = v358 == -8192;
                        if (v361)
                          v359 = v357;
                        v362 = v356 + v360++;
                        v356 = v362 & v355;
                        v357 = (_QWORD *)(*(_QWORD *)&v353 + 16 * (v362 & v355));
                        v358 = *v357;
                        if (*v357 == v338)
                          goto LABEL_495;
                      }
                      if (v359)
                        v363 = v359;
                      else
                        v363 = v357;
LABEL_494:
                      v357 = sub_1C4EB6AAC((uint64_t)v343, (uint64_t)&v740, &v740, v363);
                      *v357 = v740;
                      v357[1] = 0;
                    }
LABEL_495:
                    v357[1] = v352;
                  }
                  else if (v344)
                  {
                    v372 = v345 ^ (v338 >> 9);
                    v373 = v344 - 1;
                    LODWORD(v374) = (v344 - 1) & v372;
                    v375 = (uint64_t *)(*(_QWORD *)&v353 + 16 * v374);
                    v376 = *v375;
                    if (v338 == *v375)
                    {
LABEL_522:
                      *v375 = -8192;
                      v343[1] = vadd_s32(v343[1], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      v377 = 1;
                      while (v376 != -4096)
                      {
                        v378 = v374 + v377++;
                        v374 = v378 & v373;
                        v376 = *(_QWORD *)(*(_QWORD *)&v353 + 16 * v374);
                        if (v338 == v376)
                        {
                          v375 = (uint64_t *)(*(_QWORD *)&v353 + 16 * v374);
                          goto LABEL_522;
                        }
                      }
                    }
                  }
                  v335 = v736;
                }
                ++v334;
              }
              while (v334 != v337);
            }
            v379 = (_QWORD *)*((_QWORD *)v81 + 9);
            v380 = (_QWORD *)v379[1];
            v382 = v379 + 2;
            v381 = (char *)v379[2];
            if (v380 == (_QWORD *)v381)
            {
              v76 = v739;
            }
            else
            {
              v76 = v739;
              do
              {
                v383 = (_QWORD *)*v380;
                v384 = v381 - (char *)(v380 + 1);
                if (v381 != (char *)(v380 + 1))
                {
                  memmove(v380, v380 + 1, v381 - (char *)(v380 + 1));
                  v335 = v736;
                }
                *v382 = (char *)v380 + v384;
                v385 = *(_QWORD **)(v335 + 40);
                *v383 = v385;
                v387 = (_QWORD *)v385[2];
                v386 = v385[3];
                if ((unint64_t)v387 >= v386)
                {
                  v389 = (_QWORD *)v385[1];
                  v390 = v387 - v389;
                  v391 = v390 + 1;
                  if ((unint64_t)(v390 + 1) >> 61)
                    goto LABEL_953;
                  v392 = v386 - (_QWORD)v389;
                  if (v392 >> 2 > v391)
                    v391 = v392 >> 2;
                  if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8)
                    v391 = 0x1FFFFFFFFFFFFFFFLL;
                  v727 = v391;
                  if (v391)
                  {
                    if (v391 >> 61)
                      goto LABEL_954;
                    v393 = (char *)operator new(8 * v391);
                    v335 = v736;
                  }
                  else
                  {
                    v393 = 0;
                  }
                  v394 = &v393[8 * v390];
                  *(_QWORD *)v394 = v383;
                  v388 = v394 + 8;
                  if (v387 != v389)
                  {
                    do
                    {
                      v395 = *--v387;
                      *((_QWORD *)v394 - 1) = v395;
                      v394 -= 8;
                    }
                    while (v387 != v389);
                    v387 = (_QWORD *)v385[1];
                  }
                  v385[1] = v394;
                  v385[2] = v388;
                  v385[3] = &v393[8 * v727];
                  v76 = v739;
                  if (v387)
                  {
                    operator delete(v387);
                    v335 = v736;
                  }
                }
                else
                {
                  *v387 = v383;
                  v388 = v387 + 1;
                }
                v385[2] = v388;
                v379 = (_QWORD *)*((_QWORD *)v81 + 9);
                v380 = (_QWORD *)v379[1];
                v382 = v379 + 2;
                v381 = (char *)v379[2];
              }
              while (v380 != (_QWORD *)v381);
            }
            llvm::LoopInfo::erase(*(int32x2_t **)(v4 + 864), (llvm::Loop *)v379);
            v396 = *(_QWORD *)(v736 + 40);
            if (v761 != v763)
              free(v761);
            if (v768 != v770)
              free(v768);
            v397 = v765;
            v398 = v767;
LABEL_551:
            if (v397 != v398)
              free(v397);
            sub_1C5B5FDD4((uint64_t)&v741, v396, *(_QWORD *)(v4 + 872), *(_QWORD *)(v4 + 896), *(_QWORD *)(v4 + 904), v758);
            sub_1C4774094(v706, *((_QWORD *)v81 + 9));
            sub_1C5B605C4(v723, v77);
            sub_1C5B605C4(v723, (uint64_t *)v81);
            v81 = sub_1C5B60230((uint64_t)v723, (uint64_t)&v741);
            if (v746 != &v747)
              free(v746);
            if (v744 != &v745)
              free(v744);
            if (v754 != v756)
              free(v754);
            if (v751 != v753)
              free(v751);
            v708 = 1;
            v77 = v81;
            goto LABEL_154;
          }
          if (*(_BYTE *)(v736 + 361) || (v399 = *(llvm::Value **)(v192 - 32), v399 == *(llvm::Value **)v736))
            v399 = *(llvm::Value **)(v192 - 64);
          v719 = v399;
          v400 = *((_QWORD *)v81 + 47);
          if (v81[393] || (v401 = *(llvm::Value **)(v400 - 32), v401 == *v95))
            v401 = *(llvm::Value **)(v400 - 64);
          v402 = *(llvm::BasicBlock **)(v192 + 40);
          v403 = *(_QWORD *)(v400 + 40);
          v404 = (llvm *)llvm::BasicBlock::getUniqueSuccessor(*(llvm::BasicBlock **)(v736 + 24));
          v406 = (uint64_t)v404;
          if (!*(_BYTE *)(v736 + 361))
            v404 = *(llvm **)(v736 + 24);
          llvm::moveInstructionsToTheBeginning(v404, *((llvm::BasicBlock **)v81 + 7), *(llvm::BasicBlock **)(v153 + 872), *(llvm::DominatorTree **)(v153 + 896), *(const llvm::PostDominatorTree **)(v153 + 880), v405);
          llvm::moveInstructionsToTheEnd((llvm *)v403, v402, *(llvm::BasicBlock **)(v153 + 872), *(llvm::DominatorTree **)(v153 + 896), *(const llvm::PostDominatorTree **)(v153 + 880), v407);
          v768 = v770;
          v769 = 0x800000000;
          v728 = (uint64_t)v402;
          v408 = v402;
          v409 = v401;
          llvm::BasicBlock::replacePhiUsesWith((uint64_t)v401, (llvm::BasicBlock *)v403, v408);
          llvm::User::replaceUsesOfWith(*(llvm::User **)(v736 + 344), v719, v401);
          v410 = *(_QWORD *)(v736 + 24);
          v710 = (llvm::BasicBlock *)v406;
          if (*(_BYTE *)(v736 + 361))
            v410 = v406;
          v411 = *(_QWORD *)(v410 + 40);
          if (v411 == v410 + 40)
          {
            v413 = 0;
          }
          else
          {
            if (v411)
              v412 = (unsigned __int8 *)(v411 - 24);
            else
              v412 = 0;
            if (v412[16] - 29 >= 0xB)
              v413 = 0;
            else
              v413 = (llvm::User *)v412;
          }
          llvm::User::replaceUsesOfWith(v413, (llvm::Value *)v403, *((llvm::Value **)v81 + 5));
          v418 = *((_QWORD *)v81 + 47);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v418 + 40) + 40, (uint64_t ***)v418);
          v419 = *(_QWORD *)(v418 + 24);
          v420 = *(_QWORD **)(v418 + 32);
          *v420 = v419;
          *(_QWORD *)(v419 + 8) = v420;
          *(_QWORD *)(v418 + 24) = 0;
          *(_QWORD *)(v418 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v418);
          v421 = (char *)operator new(0x40uLL);
          *((_DWORD *)v421 + 5) &= 0x38000000u;
          *(_QWORD *)v421 = ***(_QWORD ***)v403 + 1576;
          *((_QWORD *)v421 + 1) = 0;
          v421[16] = 35;
          *(_OWORD *)(v421 + 44) = 0u;
          *(_OWORD *)(v421 + 33) = 0u;
          *(_OWORD *)(v421 + 17) = 0u;
          *((_QWORD *)v421 + 5) = v403;
          *(_WORD *)(v403 + 18) &= ~0x8000u;
          if ((v421[23] & 0x10) != 0)
          {
            v649 = *(_QWORD *)(v403 + 56);
            if (v649)
            {
              v650 = *(llvm::ValueSymbolTable **)(v649 + 104);
              if (v650)
                llvm::ValueSymbolTable::reinsertValue(v650, (llvm::Value *)v421);
            }
          }
          v422 = *(_QWORD *)(v403 + 40);
          *((_QWORD *)v421 + 3) = v422;
          *((_QWORD *)v421 + 4) = v403 + 40;
          *(_QWORD *)(v422 + 8) = v421 + 24;
          *(_QWORD *)(v403 + 40) = v421 + 24;
          v423 = (unint64_t)*v95 | 4;
          v424 = v769;
          v425 = HIDWORD(v769);
          if (v769 >= (unint64_t)HIDWORD(v769))
          {
            sub_1C4F76720(&v768, v403, v423);
            v427 = v769;
            v425 = HIDWORD(v769);
          }
          else
          {
            v426 = (uint64_t *)((char *)v768 + 16 * v769);
            *v426 = v403;
            v426[1] = v423;
            v427 = v424 + 1;
            LODWORD(v769) = v427;
          }
          v428 = (unint64_t)v409 | 4;
          v429 = v736;
          if (v427 >= v425)
          {
            sub_1C4F76720(&v768, v403, v428);
            v429 = v736;
            v431 = v769;
            v425 = HIDWORD(v769);
          }
          else
          {
            v430 = (uint64_t *)((char *)v768 + 16 * v427);
            *v430 = v403;
            v430[1] = v428;
            v431 = v427 + 1;
            LODWORD(v769) = v431;
          }
          v432 = v403 | 4;
          if (v431 >= v425)
          {
            sub_1C4F76720(&v768, v728, v403 | 4);
            v429 = v736;
            v434 = v769;
            v425 = HIDWORD(v769);
          }
          else
          {
            v433 = (uint64_t *)((char *)v768 + 16 * v431);
            *v433 = v728;
            v433[1] = v432;
            v434 = v431 + 1;
            LODWORD(v769) = v434;
          }
          v435 = (unint64_t)v409 & 0xFFFFFFFFFFFFFFFBLL;
          if (v434 >= v425)
          {
            sub_1C4F76720(&v768, v728, v435);
            v429 = v736;
          }
          else
          {
            v436 = (uint64_t *)((char *)v768 + 16 * v434);
            *v436 = v728;
            v436[1] = v435;
            LODWORD(v769) = v434 + 1;
          }
          v701 = (llvm::BasicBlock *)v403;
          if (*(_BYTE *)(v429 + 361))
          {
            v437 = v769;
            if (v769 >= HIDWORD(v769))
            {
              sub_1C4F76720(&v768, v406, v403 | 4);
            }
            else
            {
              v438 = (uint64_t *)((char *)v768 + 16 * v769);
              *v438 = v406;
              v438[1] = v432;
              LODWORD(v769) = v437 + 1;
            }
            v440 = (uint64_t *)(v406 + 40);
            v439 = *(_QWORD *)(v406 + 40);
            if (v439 == v406 + 40)
            {
              v442 = 0;
            }
            else
            {
              if (v439)
                v441 = v439 - 24;
              else
                v441 = 0;
              if (*(unsigned __int8 *)(v441 + 16) - 29 >= 0xB)
                v442 = 0;
              else
                v442 = v441;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v442 + 40) + 40, (uint64_t ***)v442);
            v452 = *(_QWORD *)(v442 + 24);
            v453 = *(_QWORD **)(v442 + 32);
            *v453 = v452;
            *(_QWORD *)(v452 + 8) = v453;
            *(_QWORD *)(v442 + 24) = 0;
            *(_QWORD *)(v442 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v442);
            v454 = (char *)operator new(0x40uLL);
            *((_DWORD *)v454 + 5) &= 0x38000000u;
            *(_QWORD *)v454 = ***(_QWORD ***)v406 + 1576;
            *((_QWORD *)v454 + 1) = 0;
            v454[16] = 35;
            *(_OWORD *)(v454 + 44) = 0u;
            *(_OWORD *)(v454 + 33) = 0u;
            *(_OWORD *)(v454 + 17) = 0u;
            *((_QWORD *)v454 + 5) = v406;
            *(_WORD *)(v406 + 18) &= ~0x8000u;
            if ((v454[23] & 0x10) != 0)
            {
              v655 = *(_QWORD *)(v406 + 56);
              if (v655)
              {
                v656 = *(llvm::ValueSymbolTable **)(v655 + 104);
                if (v656)
                  llvm::ValueSymbolTable::reinsertValue(v656, (llvm::Value *)v454);
              }
            }
            v455 = *v440;
            *((_QWORD *)v454 + 3) = *v440;
            *((_QWORD *)v454 + 4) = v440;
            *(_QWORD *)(v455 + 8) = v454 + 24;
            *v440 = (uint64_t)(v454 + 24);
            v429 = v736;
          }
          v765 = v767;
          v766 = 0x800000000;
          if (*(_QWORD *)(v429 + 16) != *(_QWORD *)(v429 + 32)
            && *(_QWORD *)(*(_QWORD *)(v429 + 8) + 40) != *(_QWORD *)(v429 + 8) + 40)
          {
            v456 = *(_QWORD *)(*(_QWORD *)(v429 + 8) + 48);
            v457 = v456 - 24;
            v458 = v456 ? v456 - 24 : 0;
            if (v456 && *(_BYTE *)(v458 + 16) == 83)
            {
              v459 = 0;
              do
              {
                if (v459 >= HIDWORD(v766))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v765, (uint64_t)v767, v459 + 1, 8);
                  v429 = v736;
                  v459 = v766;
                }
                *((_QWORD *)v765 + v459) = v457;
                v459 = v766 + 1;
                LODWORD(v766) = v766 + 1;
                v460 = *(_QWORD *)(v457 + 32);
                v457 = v460 - 24;
                if (v460)
                  v461 = v460 - 24;
                else
                  v461 = 0;
              }
              while (v460 && *(_BYTE *)(v461 + 16) == 83);
            }
          }
          llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)v81 + 4), *((llvm::BasicBlock **)v81 + 4), *(llvm::BasicBlock **)v429);
          llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*(llvm::BasicBlock **)(v736 + 32), *(llvm::BasicBlock **)(v736 + 32), *((llvm::BasicBlock **)v81 + 8));
          v462 = *(_QWORD *)(v736 + 16);
          v463 = *(_QWORD *)(v462 + 40);
          if (v463 == v462 + 40)
          {
            v465 = 0;
          }
          else
          {
            if (v463)
              v464 = (unsigned __int8 *)(v463 - 24);
            else
              v464 = 0;
            if (v464[16] - 29 >= 0xB)
              v465 = 0;
            else
              v465 = (llvm::User *)v464;
          }
          llvm::User::replaceUsesOfWith(v465, *(llvm::Value **)(v736 + 24), *((llvm::Value **)v81 + 5));
          v466 = v736;
          v467 = *(_QWORD *)(v736 + 16);
          v468 = *(_QWORD *)(v736 + 24) | 4;
          v469 = v769;
          v470 = HIDWORD(v769);
          if (v769 >= (unint64_t)HIDWORD(v769))
          {
            sub_1C4F76720(&v768, v467, v468);
            v466 = v736;
            v472 = v769;
            v470 = HIDWORD(v769);
          }
          else
          {
            v471 = (uint64_t *)((char *)v768 + 16 * v769);
            *v471 = v467;
            v471[1] = v468;
            v472 = v469 + 1;
            LODWORD(v769) = v472;
          }
          v473 = *(_QWORD *)(v466 + 16);
          v474 = *((_QWORD *)v81 + 5) & 0xFFFFFFFFFFFFFFFBLL;
          if (v472 >= v470)
          {
            sub_1C4F76720(&v768, v473, v474);
            v466 = v736;
          }
          else
          {
            v475 = (uint64_t *)((char *)v768 + 16 * v472);
            *v475 = v473;
            v475[1] = v474;
            LODWORD(v769) = v472 + 1;
          }
          v476 = *(_QWORD *)(v466 + 24);
          v477 = *(_QWORD *)(v476 + 40);
          if (v477 == v476 + 40)
          {
            v479 = 0;
          }
          else
          {
            if (v477)
              v478 = v477 - 24;
            else
              v478 = 0;
            if (*(unsigned __int8 *)(v478 + 16) - 29 >= 0xB)
              v479 = 0;
            else
              v479 = v478;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v479 + 40) + 40, (uint64_t ***)v479);
          v480 = *(_QWORD *)(v479 + 24);
          v481 = *(_QWORD **)(v479 + 32);
          *v481 = v480;
          *(_QWORD *)(v480 + 8) = v481;
          *(_QWORD *)(v479 + 24) = 0;
          *(_QWORD *)(v479 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v479);
          v482 = (char *)operator new(0x40uLL);
          *((_DWORD *)v482 + 5) &= 0x38000000u;
          v483 = *(_QWORD *)(v736 + 24);
          *(_QWORD *)v482 = ***(_QWORD ***)v483 + 1576;
          *((_QWORD *)v482 + 1) = 0;
          v482[16] = 35;
          *(_OWORD *)(v482 + 44) = 0u;
          *(_OWORD *)(v482 + 33) = 0u;
          *(_OWORD *)(v482 + 17) = 0u;
          *((_QWORD *)v482 + 5) = v483;
          *(_WORD *)(v483 + 18) &= ~0x8000u;
          if ((v482[23] & 0x10) != 0)
          {
            v651 = *(_QWORD *)(v483 + 56);
            if (v651)
            {
              v652 = *(llvm::ValueSymbolTable **)(v651 + 104);
              if (v652)
                llvm::ValueSymbolTable::reinsertValue(v652, (llvm::Value *)v482);
            }
          }
          v485 = *(_QWORD *)(v483 + 40);
          v484 = (_QWORD *)(v483 + 40);
          *((_QWORD *)v482 + 3) = v485;
          *((_QWORD *)v482 + 4) = v484;
          *(_QWORD *)(v485 + 8) = v482 + 24;
          *v484 = v482 + 24;
          v486 = (llvm *)*((_QWORD *)*v95 + 5);
          if (v486 == (llvm *)((char *)*v95 + 40))
          {
            v488 = 0;
          }
          else
          {
            if (v486)
              v487 = (char *)v486 - 24;
            else
              v487 = 0;
            if (v487[16] - 29 >= 0xB)
              v488 = 0;
            else
              v488 = v487;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v488 + 5) + 40, (uint64_t ***)v488);
          v489 = *((_QWORD *)v488 + 3);
          v490 = (_QWORD *)*((_QWORD *)v488 + 4);
          *v490 = v489;
          *(_QWORD *)(v489 + 8) = v490;
          *((_QWORD *)v488 + 3) = 0;
          *((_QWORD *)v488 + 4) = 0;
          llvm::Value::deleteValue((llvm::Value *)v488);
          v491 = (char *)operator new(0x40uLL);
          *((_DWORD *)v491 + 5) &= 0x38000000u;
          v492 = *v95;
          *(_QWORD *)v491 = ***(_QWORD ***)*v95 + 1576;
          *((_QWORD *)v491 + 1) = 0;
          v491[16] = 35;
          *(_OWORD *)(v491 + 44) = 0u;
          *(_OWORD *)(v491 + 33) = 0u;
          *(_OWORD *)(v491 + 17) = 0u;
          *((_QWORD *)v491 + 5) = v492;
          *((_WORD *)v492 + 9) &= ~0x8000u;
          if ((v491[23] & 0x10) != 0)
          {
            v653 = *((_QWORD *)v492 + 7);
            if (v653)
            {
              v654 = *(llvm::ValueSymbolTable **)(v653 + 104);
              if (v654)
                llvm::ValueSymbolTable::reinsertValue(v654, (llvm::Value *)v491);
            }
          }
          v494 = *((_QWORD *)v492 + 5);
          v493 = (_QWORD *)((char *)v492 + 40);
          *((_QWORD *)v491 + 3) = v494;
          *((_QWORD *)v491 + 4) = v493;
          *(_QWORD *)(v494 + 8) = v491 + 24;
          *v493 = v491 + 24;
          v495 = *((_QWORD *)v81 + 4);
          v496 = *((_QWORD *)v81 + 5) | 4;
          v497 = v769;
          if (v769 >= HIDWORD(v769))
          {
            sub_1C4F76720(&v768, v495, v496);
          }
          else
          {
            v498 = (uint64_t *)((char *)v768 + 16 * v769);
            *v498 = v495;
            v498[1] = v496;
            LODWORD(v769) = v497 + 1;
          }
          v499 = *(_QWORD *)(*((_QWORD *)v81 + 5) + 48);
          v500 = (llvm::Value *)(v499 - 24);
          if (v499)
            v501 = v499 - 24;
          else
            v501 = 0;
          if (v499 && *(_BYTE *)(v501 + 16) == 83)
          {
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)v500 + 8) & 0xFD) == 0xD)
                llvm::ScalarEvolution::forgetValue(*(int32x2_t **)(v153 + 888), v500);
              if (*((_QWORD *)v500 + 1))
              {
                v502 = *(_QWORD *)(v736 + 8);
                v503 = v502 + 40;
                for (j = *(_QWORD *)(v502 + 48); j != v503; j = *(_QWORD *)(j + 8))
                {
                  v505 = j - 24;
                  if (!j)
                    v505 = 0;
                  if (*(_BYTE *)(v505 + 16) != 83)
                  {
                    v508 = *(unsigned __int8 *)(j - 8) - 38;
                    v56 = v508 > 0x38;
                    v509 = (1 << v508) & 0x100060000000001;
                    if (v56 || v509 == 0)
                      v503 = j;
                    else
                      v503 = *(_QWORD *)(j + 8);
                    break;
                  }
                }
                if (v503)
                  v511 = (llvm::Instruction *)(v503 - 24);
                else
                  v511 = 0;
                llvm::Instruction::moveBefore(v500, v511);
              }
              else
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v500 + 5) + 40, (uint64_t ***)v500);
                v506 = *((_QWORD *)v500 + 3);
                v507 = (_QWORD *)*((_QWORD *)v500 + 4);
                *v507 = v506;
                *(_QWORD *)(v506 + 8) = v507;
                *((_QWORD *)v500 + 3) = 0;
                *((_QWORD *)v500 + 4) = 0;
                llvm::Value::deleteValue(v500);
              }
              v512 = *(_QWORD *)(*((_QWORD *)v81 + 5) + 48);
              v513 = v512 - 24;
              if (v512)
                v514 = (unsigned __int8 *)(v512 - 24);
              else
                v514 = 0;
              v515 = v514[16];
              if (v515 == 83)
                v500 = (llvm::Value *)v514;
              else
                v500 = 0;
            }
            while (v512 && v515 == 83);
          }
          else
          {
            v513 = v499 - 24;
          }
          if ((_DWORD)v766)
          {
            v516 = (uint64_t *)v765;
            v704 = (char *)v765 + 8 * v766;
            v702 = (uint64_t *)(v513 + 24);
            do
            {
              v729 = v516;
              v517 = *v516;
              v518 = *(_DWORD *)(*v516 + 20);
              v519 = v518 & 0x7FFFFFF;
              if ((v518 & 0x7FFFFFF) != 0)
              {
                v520 = 0;
                while (1)
                {
                  v521 = v517 - 32 * v519;
                  if ((v518 & 0x40000000) != 0)
                    v521 = *(_QWORD *)(v517 - 8);
                  if (*(_QWORD *)(v521 + 32 * *(unsigned int *)(v517 + 60) + 8 * v520) == *((_QWORD *)v81 + 8))
                    break;
                  if (v519 == ++v520)
                    goto LABEL_707;
                }
                v522 = v520;
                if ((v518 & 0x40000000) == 0)
                {
LABEL_708:
                  v523 = v517 - 32 * v519;
                  if ((v518 & 0x10000000) == 0)
                    goto LABEL_717;
                  goto LABEL_709;
                }
              }
              else
              {
LABEL_707:
                v522 = -1;
                if ((v518 & 0x40000000) == 0)
                  goto LABEL_708;
              }
              v523 = *(_QWORD *)(v517 - 8);
              if ((v518 & 0x10000000) == 0)
              {
LABEL_717:
                v532 = 0;
                v533 = &byte_1C871356D;
                goto LABEL_720;
              }
LABEL_709:
              v524 = ***(_QWORD ***)v517;
              v525 = *(_QWORD *)(v524 + 152);
              v526 = *(unsigned int *)(v524 + 168);
              if (!(_DWORD)v526)
                goto LABEL_718;
              LODWORD(v527) = (v526 - 1) & ((v517 >> 4) ^ (v517 >> 9));
              v528 = (uint64_t *)(v525 + 16 * v527);
              v529 = *v528;
              if (*v528 != v517)
              {
                v530 = 1;
                while (v529 != -4096)
                {
                  v531 = v527 + v530++;
                  v527 = v531 & (v526 - 1);
                  v529 = *(_QWORD *)(v525 + 16 * v527);
                  if (v529 == v517)
                  {
                    v528 = (uint64_t *)(v525 + 16 * v527);
                    goto LABEL_719;
                  }
                }
LABEL_718:
                v528 = (uint64_t *)(v525 + 16 * v526);
              }
LABEL_719:
              v534 = (_QWORD *)v528[1];
              v535 = *v534;
              v533 = (char *)(v534 + 2);
              v532 = v535;
LABEL_720:
              v715 = *(llvm::UndefValue ***)(v523 + 32 * v522);
              v720 = v522;
              v536 = *v715;
              v764 = 773;
              v761 = v533;
              v762 = v532;
              v763[0] = ".afterFC0";
              v537 = operator new(0x48uLL);
              v537[1] = v536;
              v538 = (llvm::Value *)(v537 + 1);
              *v537 = 0;
              v537[2] = 0;
              v537[3] = 0x4000000000000053;
              *((_OWORD *)v537 + 2) = 0u;
              v539 = (char *)(v537 + 4);
              *((_OWORD *)v537 + 3) = 0u;
              *((_DWORD *)v537 + 16) = 0;
              v540 = *(_QWORD *)(v513 + 40);
              v537[6] = v540;
              *(_WORD *)(v540 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v537 + 31) & 0x10) != 0)
              {
                v547 = *(_QWORD *)(v540 + 56);
                if (v547)
                {
                  v548 = *(llvm::ValueSymbolTable **)(v547 + 104);
                  if (v548)
                    llvm::ValueSymbolTable::reinsertValue(v548, v538);
                }
              }
              v541 = *v702;
              v537[4] = *v702;
              v537[5] = v702;
              *(_QWORD *)(v541 + 8) = v539;
              *v702 = (uint64_t)v539;
              *((_DWORD *)v537 + 17) = 2;
              llvm::Value::setName((uint64_t ***)v538, (uint64_t)&v761);
              v542 = *((unsigned int *)v537 + 17);
              v543 = operator new(40 * v542);
              *v537 = v543;
              if ((_DWORD)v542)
              {
                v544 = &v543[4 * v542];
                do
                {
                  *v543 = 0;
                  v543[1] = 0;
                  v543[2] = 0;
                  v543[3] = v538;
                  v543 += 4;
                }
                while (v543 != v544);
              }
              sub_1C477667C(v538, (uint64_t)v715, *(_QWORD *)(v736 + 32));
              v546 = llvm::UndefValue::get(*v715, v545);
              sub_1C477667C(v538, (uint64_t)v546, *(_QWORD *)(v736 + 16));
              sub_1C6125834(v517, v720, (uint64_t)v538);
              v516 = v729 + 1;
            }
            while (v729 + 1 != (uint64_t *)v704);
          }
          v549 = *(_QWORD *)(v736 + 32);
          v550 = *(_QWORD *)(v549 + 40);
          if (v550 == v549 + 40)
          {
            v552 = 0;
          }
          else
          {
            if (v550)
              v551 = (unsigned __int8 *)(v550 - 24);
            else
              v551 = 0;
            if (v551[16] - 29 >= 0xB)
              v552 = 0;
            else
              v552 = (llvm::User *)v551;
          }
          llvm::User::replaceUsesOfWith(v552, *(llvm::Value **)(v736 + 8), *((llvm::Value **)v81 + 5));
          v553 = *((_QWORD *)v81 + 8);
          v554 = *(_QWORD *)(v553 + 40);
          if (v554 == v553 + 40)
          {
            v556 = 0;
          }
          else
          {
            if (v554)
              v555 = (unsigned __int8 *)(v554 - 24);
            else
              v555 = 0;
            if (v555[16] - 29 >= 0xB)
              v556 = 0;
            else
              v556 = (llvm::User *)v555;
          }
          llvm::User::replaceUsesOfWith(v556, *((llvm::Value **)v81 + 5), *(llvm::Value **)(v736 + 8));
          sub_1C5B61490(*(_QWORD *)(v736 + 32));
          v557 = v736;
          v558 = *(_QWORD *)(v736 + 32);
          v559 = v769;
          v560 = HIDWORD(v769);
          if (v558 == *(_QWORD *)(v736 + 16))
          {
            v562 = v712;
            v564 = a1;
          }
          else
          {
            v561 = *((_QWORD *)v81 + 5) & 0xFFFFFFFFFFFFFFFBLL;
            v562 = v712;
            if (v769 >= (unint64_t)HIDWORD(v769))
            {
              sub_1C4F76720(&v768, v558, v561);
              v557 = v736;
              v562 = v712;
              v559 = v769;
              v560 = HIDWORD(v769);
            }
            else
            {
              v563 = (uint64_t *)((char *)v768 + 16 * v769);
              *v563 = v558;
              v563[1] = v561;
              LODWORD(v769) = ++v559;
            }
            v564 = a1;
            v558 = *(_QWORD *)(v557 + 32);
          }
          v565 = *(_QWORD *)(v557 + 8) | 4;
          if (v559 >= v560)
          {
            sub_1C4F76720(&v768, v558, v565);
            v557 = v736;
            v562 = v712;
            v567 = v769;
            v560 = HIDWORD(v769);
          }
          else
          {
            v566 = (uint64_t *)((char *)v768 + 16 * v559);
            *v566 = v558;
            v566[1] = v565;
            v567 = v559 + 1;
            LODWORD(v769) = v567;
          }
          v568 = *((_QWORD *)v81 + 8);
          v569 = *(_QWORD *)(v557 + 8) & 0xFFFFFFFFFFFFFFFBLL;
          if (v567 >= v560)
          {
            sub_1C4F76720(&v768, v568, v569);
            v562 = v712;
            v571 = v769;
            v560 = HIDWORD(v769);
          }
          else
          {
            v570 = (uint64_t *)((char *)v768 + 16 * v567);
            *v570 = v568;
            v570[1] = v569;
            v571 = v567 + 1;
            LODWORD(v769) = v571;
          }
          v572 = *((_QWORD *)v81 + 8);
          v573 = *((_QWORD *)v81 + 5) | 4;
          if (v571 >= v560)
          {
            sub_1C4F76720(&v768, v572, v573);
            v562 = v712;
            v575 = v769;
          }
          else
          {
            v574 = (uint64_t *)((char *)v768 + 16 * v571);
            *v574 = v572;
            v574[1] = v573;
            v575 = v571 + 1;
            LODWORD(v769) = v571 + 1;
          }
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v562, (unint64_t *)v768, v575);
          llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(v564 + 864), (uint64_t)v701);
          llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(v564 + 864), (uint64_t)*v95);
          llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(v564 + 864), *(_QWORD *)(v736 + 24));
          v4 = a1;
          if (*(_BYTE *)(v736 + 361))
          {
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(*(int32x2_t **)(a1 + 864), (uint64_t)v710);
            llvm::DomTreeUpdater::deleteBB(v562, v710);
          }
          llvm::DomTreeUpdater::deleteBB(v562, v701);
          llvm::DomTreeUpdater::deleteBB(v562, *((llvm::BasicBlock **)v81 + 4));
          llvm::DomTreeUpdater::deleteBB(v562, *(llvm::BasicBlock **)(v736 + 24));
          llvm::DomTreeUpdater::flush(v562);
          llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(a1 + 888), *((const llvm::Loop **)v81 + 9));
          llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(a1 + 888), *(const llvm::Loop **)(v736 + 40));
          sub_1C5B61598(a1, v736, *((llvm::BasicBlock **)v81 + 8), v576, v577, v578);
          v579 = *((_QWORD *)v81 + 9);
          v581 = *(_BYTE **)(v579 + 32);
          v580 = *(_BYTE **)(v579 + 40);
          v582 = v580 - v581;
          v761 = v763;
          v762 = 0x800000000;
          if ((unint64_t)(v580 - v581) >= 0x41)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v761, (uint64_t)v763, v582 >> 3, 8);
            v583 = v762;
            v584 = (uint64_t *)v761;
          }
          else
          {
            v583 = 0;
            v584 = v763;
          }
          if (v580 != v581)
          {
            memcpy(&v584[v583], v581, v580 - v581);
            v583 = v762;
            v584 = (uint64_t *)v761;
          }
          v585 = v736;
          v586 = v583 + ((unint64_t)v582 >> 3);
          LODWORD(v762) = v586;
          if (!v586)
          {
LABEL_818:
            v631 = (_QWORD *)*((_QWORD *)v81 + 9);
            v632 = (_QWORD *)v631[1];
            v634 = v631 + 2;
            v633 = (char *)v631[2];
            if (v632 == (_QWORD *)v633)
            {
              v76 = v739;
            }
            else
            {
              v76 = v739;
              do
              {
                v635 = (_QWORD *)*v632;
                v636 = v633 - (char *)(v632 + 1);
                if (v633 != (char *)(v632 + 1))
                {
                  memmove(v632, v632 + 1, v633 - (char *)(v632 + 1));
                  v585 = v736;
                }
                *v634 = (char *)v632 + v636;
                v637 = *(_QWORD **)(v585 + 40);
                *v635 = v637;
                v639 = (_QWORD *)v637[2];
                v638 = v637[3];
                if ((unint64_t)v639 >= v638)
                {
                  v641 = (_QWORD *)v637[1];
                  v642 = v639 - v641;
                  v643 = v642 + 1;
                  if ((unint64_t)(v642 + 1) >> 61)
                    goto LABEL_953;
                  v644 = v638 - (_QWORD)v641;
                  if (v644 >> 2 > v643)
                    v643 = v644 >> 2;
                  if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
                    v643 = 0x1FFFFFFFFFFFFFFFLL;
                  v731 = v643;
                  if (v643)
                  {
                    if (v643 >> 61)
                      goto LABEL_954;
                    v645 = (char *)operator new(8 * v643);
                    v585 = v736;
                  }
                  else
                  {
                    v645 = 0;
                  }
                  v646 = &v645[8 * v642];
                  *(_QWORD *)v646 = v635;
                  v640 = v646 + 8;
                  if (v639 == v641)
                  {
                    v647 = v731;
                  }
                  else
                  {
                    v647 = v731;
                    do
                    {
                      v648 = *--v639;
                      *((_QWORD *)v646 - 1) = v648;
                      v646 -= 8;
                    }
                    while (v639 != v641);
                    v639 = (_QWORD *)v637[1];
                  }
                  v637[1] = v646;
                  v637[2] = v640;
                  v637[3] = &v645[8 * v647];
                  v76 = v739;
                  if (v639)
                  {
                    operator delete(v639);
                    v585 = v736;
                  }
                }
                else
                {
                  *v639 = v635;
                  v640 = v639 + 1;
                }
                v637[2] = v640;
                v631 = (_QWORD *)*((_QWORD *)v81 + 9);
                v632 = (_QWORD *)v631[1];
                v634 = v631 + 2;
                v633 = (char *)v631[2];
              }
              while (v632 != (_QWORD *)v633);
            }
            llvm::LoopInfo::erase(*(int32x2_t **)(v4 + 864), (llvm::Loop *)v631);
            v396 = *(_QWORD *)(v736 + 40);
            if (v761 != v763)
              free(v761);
            if (v765 != v767)
              free(v765);
            v397 = v768;
            v398 = v770;
            goto LABEL_551;
          }
          v587 = &v584[v586];
          while (2)
          {
            v588 = *v584;
            v589 = *(_QWORD **)(v585 + 40);
            v591 = (uint64_t *)v589[5];
            v590 = v589[6];
            if ((unint64_t)v591 >= v590)
            {
              v730 = v587;
              v614 = (_QWORD *)v589[4];
              v615 = v591 - v614;
              v616 = v615 + 1;
              if ((unint64_t)(v615 + 1) >> 61)
LABEL_953:
                abort();
              v617 = v590 - (_QWORD)v614;
              if (v617 >> 2 > v616)
                v616 = v617 >> 2;
              if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFF8)
                v616 = 0x1FFFFFFFFFFFFFFFLL;
              v721 = (llvm::Value *)v616;
              if (v616)
              {
                if (v616 >> 61)
LABEL_954:
                  sub_1C4764EE4();
                v618 = (_QWORD *)v589[4];
                v619 = (char *)operator new(8 * v616);
                v614 = v618;
              }
              else
              {
                v619 = 0;
              }
              v620 = (uint64_t *)&v619[8 * v615];
              *v620 = v588;
              v592 = v620 + 1;
              if (v591 == v614)
              {
                v587 = v730;
                v621 = v721;
              }
              else
              {
                v587 = v730;
                v621 = v721;
                do
                {
                  v622 = *--v591;
                  *--v620 = v622;
                }
                while (v591 != v614);
                v591 = (uint64_t *)v589[4];
              }
              v589[4] = v620;
              v589[5] = v592;
              v589[6] = &v619[8 * (_QWORD)v621];
              if (v591)
                operator delete(v591);
            }
            else
            {
              *v591 = v588;
              v592 = v591 + 1;
            }
            v589[5] = v592;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v589 + 7), v588);
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(*((_QWORD *)v81 + 9), v588);
            v593 = *(int32x2_t **)(v4 + 864);
            v594 = v593[2].i32[0];
            v595 = v588 >> 4;
            if (v594)
            {
              v596 = *v593;
              v597 = (v594 - 1) & (v595 ^ (v588 >> 9));
              v598 = *(_QWORD *)(*(_QWORD *)v593 + 16 * v597);
              if (v588 != v598)
              {
                v599 = 1;
                while (v598 != -4096)
                {
                  v600 = v597 + v599++;
                  v597 = v600 & (v594 - 1);
                  v598 = *(_QWORD *)(*(_QWORD *)&v596 + 16 * v597);
                  if (v588 == v598)
                    goto LABEL_771;
                }
                goto LABEL_772;
              }
LABEL_771:
              v601 = *(_QWORD *)(*(_QWORD *)&v596 + 16 * v597 + 8);
            }
            else
            {
LABEL_772:
              v601 = 0;
            }
            v585 = v736;
            if (v601 == *((_QWORD *)v81 + 9))
            {
              v602 = *(_QWORD *)(v736 + 40);
              v740 = v588;
              v603 = *v593;
              if (v602)
              {
                if (!v594)
                {
                  v613 = 0;
                  goto LABEL_789;
                }
                v604 = v595 ^ (v588 >> 9);
                v605 = v594 - 1;
                v606 = (v594 - 1) & v604;
                v607 = (_QWORD *)(*(_QWORD *)&v603 + 16 * v606);
                v608 = *v607;
                if (*v607 != v588)
                {
                  v609 = 0;
                  v610 = 1;
                  while (v608 != -4096)
                  {
                    if (v609)
                      v611 = 0;
                    else
                      v611 = v608 == -8192;
                    if (v611)
                      v609 = v607;
                    v612 = v606 + v610++;
                    v606 = v612 & v605;
                    v607 = (_QWORD *)(*(_QWORD *)&v603 + 16 * (v612 & v605));
                    v608 = *v607;
                    if (*v607 == v588)
                      goto LABEL_790;
                  }
                  if (v609)
                    v613 = v609;
                  else
                    v613 = v607;
LABEL_789:
                  v607 = sub_1C4EB6AAC((uint64_t)v593, (uint64_t)&v740, &v740, v613);
                  *v607 = v740;
                  v607[1] = 0;
                }
LABEL_790:
                v607[1] = v602;
              }
              else if (v594)
              {
                v623 = v587;
                v624 = v595 ^ (v588 >> 9);
                v625 = v594 - 1;
                LODWORD(v626) = (v594 - 1) & v624;
                v627 = (uint64_t *)(*(_QWORD *)&v603 + 16 * v626);
                v628 = *v627;
                if (v588 == *v627)
                {
LABEL_817:
                  *v627 = -8192;
                  v593[1] = vadd_s32(v593[1], (int32x2_t)0x1FFFFFFFFLL);
                  v75 = &qword_1ED81E000;
                  v4 = a1;
                  v587 = v623;
                }
                else
                {
                  v629 = 1;
                  while (1)
                  {
                    v75 = &qword_1ED81E000;
                    v4 = a1;
                    v587 = v623;
                    if (v628 == -4096)
                      break;
                    v630 = v626 + v629++;
                    v626 = v630 & v625;
                    v628 = *(_QWORD *)(*(_QWORD *)&v603 + 16 * v626);
                    if (v588 == v628)
                    {
                      v627 = (uint64_t *)(*(_QWORD *)&v603 + 16 * v626);
                      goto LABEL_817;
                    }
                  }
                }
              }
              v585 = v736;
            }
            if (++v584 == v587)
              goto LABEL_818;
            continue;
          }
        }
        v708 = 0;
LABEL_894:
        v2 = v707 | v708;
        v7 = v705;
        v5 = (uint64_t)v706;
        v6 = v711;
      }
      v6 += 48;
    }
    while (v6 != v7);
    v658 = *(_QWORD *)(v4 + 216);
    v659 = *(_DWORD *)(v4 + 224);
    v748.i64[0] = (uint64_t)v749;
    v748.i64[1] = 0x400000000;
    if (v659)
    {
      v660 = v658 + 48 * v659;
      do
      {
        v661 = *(unsigned int *)(v658 + 8);
        if ((_DWORD)v661)
        {
          v662 = *(uint64_t **)v658;
          v663 = 8 * v661;
          do
          {
            v664 = *v662;
            v665 = sub_1C477672C(v5, *v662);
            v666 = *(_QWORD *)(v4 + 120);
            v667 = 128;
            if (v666 == *(_QWORD *)(v4 + 112))
              v667 = 132;
            if (v665 == (_QWORD *)(v666 + 8 * *(unsigned int *)(v4 + v667)))
            {
              v668 = *(char **)(v664 + 8);
              v669 = *(char **)(v664 + 16);
              if (v668 != v669)
              {
                v741 = v743;
                v742 = 0x400000000;
                sub_1C499C3FC((unsigned int *)&v741, v668, v669);
                sub_1C631A914((uint64_t)&v748, (uint64_t)&v741);
                if (v741 != v743)
                  free(v741);
              }
            }
            ++v662;
            v663 -= 8;
          }
          while (v663);
        }
        v658 += 48;
      }
      while (v658 != v660);
    }
LABEL_909:
    if (v700 != &v748)
    {
      v670 = v748.u32[2];
      v671 = *(unsigned int *)(v4 + 224);
      if (v671 >= v748.i32[2])
      {
        if (v748.i32[2])
        {
          v677 = v748.i64[0];
          v676 = v700->i64[0];
          v678 = 48 * v748.u32[2];
          do
          {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v676, v677);
            v677 += 48;
            v676 += 48;
            v678 -= 48;
          }
          while (v678);
          LODWORD(v671) = *(_DWORD *)(v4 + 224);
          v675 = *(_QWORD *)(v4 + 216);
        }
        else
        {
          v675 = v700->i64[0];
          v676 = v700->i64[0];
        }
        v679 = v675 + 48 * v671;
        while (v679 != v676)
        {
          v681 = *(void **)(v679 - 48);
          v679 -= 48;
          v680 = v681;
          if ((void *)(v679 + 16) != v681)
            free(v680);
        }
      }
      else
      {
        if (*(_DWORD *)(v4 + 228) >= v748.i32[2])
        {
          if (!(_DWORD)v671)
            goto LABEL_921;
          v682 = v748.i64[0];
          v683 = v700->i64[0];
          v684 = 48 * v671;
          do
          {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v683, v682);
            v682 += 48;
            v683 += 48;
            v684 -= 48;
          }
          while (v684);
        }
        else
        {
          if ((_DWORD)v671)
          {
            v672 = v700->i64[0];
            v673 = 48 * v671;
            do
            {
              v674 = *(void **)(v672 + v673 - 48);
              if ((void *)(v672 + v673 - 32) != v674)
                free(v674);
              v673 -= 48;
            }
            while (v673);
          }
          *(_DWORD *)(v4 + 224) = 0;
          sub_1C629D370((uint64_t)v700, v670);
LABEL_921:
          v671 = 0;
        }
        if (v671 != v748.u32[2])
        {
          v690 = v748.i64[0];
          v691 = v700->i64[0];
          v692 = 48 * v671;
          v693 = 48 * v748.u32[2];
          do
          {
            v694 = (_QWORD *)(v691 + v692);
            *v694 = v691 + v692 + 16;
            v694[1] = 0x400000000;
            if (*(_DWORD *)(v690 + v692 + 8))
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v694, v690 + v692);
            v691 += 48;
            v693 -= 48;
            v690 += 48;
          }
          while (v692 != v693);
        }
      }
      *(_DWORD *)(v4 + 224) = v670;
    }
    v685 = *(void **)(v4 + 120);
    if (v685 == *(void **)(v4 + 112))
    {
LABEL_934:
      *(_DWORD *)(v4 + 132) = 0;
      *(_DWORD *)(v4 + 136) = 0;
    }
    else
    {
      v689 = *(unsigned int *)(v4 + 128);
      if (v689 < 0x21 || 4 * (*(_DWORD *)(v4 + 132) - *(_DWORD *)(v4 + 136)) >= v689)
      {
        memset(v685, 255, 8 * v689);
        goto LABEL_934;
      }
      free(v685);
      v695 = *(_DWORD *)(v4 + 132) - *(_DWORD *)(v4 + 136);
      v696 = 1 << (33 - __clz(v695 - 1));
      *(_DWORD *)(v4 + 132) = 0;
      *(_DWORD *)(v4 + 136) = 0;
      if (v695 <= 0x10)
        v697 = 32;
      else
        v697 = v696;
      *(_DWORD *)(v4 + 128) = v697;
      v698 = malloc_type_malloc(8 * v697, 0x4065EBACuLL);
      if (!v698)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(v4 + 120) = v698;
      memset(v698, 255, 8 * *(unsigned int *)(v4 + 128));
    }
    ++*(_DWORD *)(v4 + 208);
    sub_1C618F3AC((char **)&v748);
    v686 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v686)
    {
      v687 = *(_QWORD *)v4 - 16;
      v688 = 24 * v686;
      do
      {
        sub_1C5B60564(*(_QWORD **)(v687 + v688));
        v688 -= 24;
      }
      while (v688);
    }
    *(_DWORD *)(v4 + 8) = 0;
    v1 = *(_DWORD *)(v4 + 224);
  }
  while (v1 != *(_DWORD *)(v4 + 132) - *(_DWORD *)(v4 + 136));
  return v2 & 1;
}

uint64_t sub_1C5B5FC08(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeDependenceAnalysisWrapperPassPass(a1, v3);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v4);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Fusion";
  *(_QWORD *)(v5 + 8) = 11;
  *(_QWORD *)(v5 + 16) = "loop-fusion";
  *(_QWORD *)(v5 + 24) = 11;
  *(_QWORD *)(v5 + 32) = &unk_1ED81ED30;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B6160C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t llvm::createLoopFusePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5B5FCF8(v1);
}

uint64_t sub_1C5B5FCF8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81ED30;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8195660;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81ED38);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B5FC08;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81ED38, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B5FDC0(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5B5FDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t LoopPredecessor;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t LoopLatch;
  llvm::Loop *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v44;
  uint64_t *v46;
  __int32 v47;

  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a2);
  if (!LoopPredecessor)
    goto LABEL_8;
  v13 = *(_QWORD *)(LoopPredecessor + 40);
  if (v13 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v13)
    v14 = v13 - 24;
  else
    v14 = 0;
  v15 = *(unsigned __int8 *)(v14 + 16);
  v16 = v15 - 29;
  if (v15 == 30)
  {
    if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v17 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v17 = 0;
    switch(v16)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_13;
      case 1:
        __break(1u);
        goto LABEL_77;
      case 2:
        v18 = (*(_DWORD *)(v14 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
LABEL_77:
        v18 = (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v18 = *(_DWORD *)(v14 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v18 != 1)
      goto LABEL_8;
  }
  v17 = LoopPredecessor;
LABEL_13:
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = **(_QWORD **)(a2 + 32);
  *(_QWORD *)(a1 + 16) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock((_QWORD *)a2);
  *(_QWORD *)(a1 + 24) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock((_QWORD *)a2);
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 32) = LoopLatch;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 56) = 0x1000000000;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x1000000000;
  *(_BYTE *)(a1 + 336) = 1;
  *(_QWORD *)(a1 + 344) = llvm::Loop::getLoopGuardBranch((llvm::Loop *)a2);
  *(_QWORD *)(a1 + 352) = a6;
  *(_BYTE *)(a1 + 360) = llvm::canPeel((llvm *)a2, v20);
  *(_BYTE *)(a1 + 361) = 0;
  *(_QWORD *)(a1 + 368) = a3;
  *(_QWORD *)(a1 + 376) = a4;
  *(_QWORD *)(a1 + 384) = a5;
  v21 = *(uint64_t **)(a2 + 32);
  v46 = *(uint64_t **)(a2 + 40);
  while (v21 != v46)
  {
    v22 = *v21;
    if ((*(_WORD *)(*v21 + 18) & 0x7FFF) != 0)
    {
LABEL_74:
      *(_DWORD *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 336) = 0;
      return a1;
    }
    v23 = v22 + 40;
    for (i = *(_QWORD *)(v22 + 48); i != v23; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v25 = i - 24;
      else
        v25 = 0;
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v25) & 1) != 0)
        goto LABEL_74;
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (i && v26 == 61)
      {
        if ((*(_WORD *)(v25 + 18) & 1) != 0)
          goto LABEL_74;
      }
      else
      {
        if (i && v26 == 60)
        {
          v27 = *(_WORD *)(v25 + 18);
          if ((v27 & 1) != 0)
            goto LABEL_74;
          goto LABEL_28;
        }
        v28 = (v26 - 33);
        if (v28 > 0x37)
          goto LABEL_40;
        if (((1 << v28) & 0x8000000000041) != 0)
        {
          v29 = *(_QWORD *)(v25 + 64);
          if (v29 && (*(_BYTE *)(v29 + 17) & 0x30) != 0)
            goto LABEL_40;
          v30 = *(_DWORD *)(v25 + 20);
          if (v30 < 0
            && (v35 = v25 - 32 * (v30 & 0x7FFFFFF), v38 = *(_QWORD *)(v35 - 8), v36 = v35 - 8, (v37 = v38) != 0))
          {
            v39 = -v37;
            while (1)
            {
              v40 = *(_DWORD *)(*(_QWORD *)(v36 + v39) + 8);
              v41 = v40 > 7;
              v42 = (1 << v40) & 0x83;
              if (v41 || v42 == 0)
                break;
              v39 += 16;
              if (!v39)
                goto LABEL_35;
            }
          }
          else
          {
LABEL_35:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v25, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(v25, 44) & 1) != 0)
            {
              goto LABEL_40;
            }
          }
        }
        else if (((1 << v28) & 0x808001D0000010) == 0)
        {
          if (v28 != 27)
            goto LABEL_40;
          v27 = *(_WORD *)(v25 + 18);
LABEL_28:
          if ((v27 & 0x301) == 0)
            goto LABEL_40;
        }
      }
      v31 = *(unsigned int *)(a1 + 200);
      if (v31 >= *(unsigned int *)(a1 + 204))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 192, a1 + 208, v31 + 1, 8);
        v31 = *(unsigned int *)(a1 + 200);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v31) = v25;
      ++*(_DWORD *)(a1 + 200);
LABEL_40:
      v32 = *(unsigned __int8 *)(v25 + 16) - 33;
      if (v32 > 0x37)
        continue;
      if (((1 << (*(_BYTE *)(v25 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v33 = *(_QWORD *)(v25 + 64);
        if (v33 && ((*(_BYTE *)(v33 + 20) & 4) != 0 || (*(_BYTE *)(v33 + 17) & 0x10) != 0))
          continue;
        v47 = 7;
        if ((!sub_1C53E4BBC(v25, &v47, 1uLL)
           || (v44 = *(_QWORD *)(v25 - 32)) != 0
           && !*(_BYTE *)(v44 + 16)
           && *(_QWORD *)(v44 + 24) == *(_QWORD *)(v25 + 72)
           && *(_DWORD *)(v44 + 36) == 7)
          && ((llvm::CallBase::hasFnAttrOnCalledFunction(v25, 66) & 1) != 0
           || (llvm::CallBase::hasFnAttrOnCalledFunction(v25, 44) & 1) != 0))
        {
          continue;
        }
      }
      else if (((1 << (*(_BYTE *)(v25 + 16) - 33)) & 0x808001C8000010) == 0
             && (v32 != 28 || (*(_WORD *)(v25 + 18) & 0x301) == 0))
      {
        continue;
      }
      v34 = *(unsigned int *)(a1 + 56);
      if (v34 >= *(unsigned int *)(a1 + 60))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v34 + 1, 8);
        v34 = *(unsigned int *)(a1 + 56);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v34) = v25;
      ++*(_DWORD *)(a1 + 56);
    }
    ++v21;
  }
  return a1;
}

char *sub_1C5B60230(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  __int128 v8;
  void *v9;
  void **v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v4 = (uint64_t **)sub_1C5B603F8(a1, &v24, (uint64_t *)a2);
  v5 = (char *)*v4;
  if (*v4)
    return v5;
  v6 = v4;
  v7 = (char *)operator new(0x1A8uLL);
  v5 = v7;
  v22[0] = v7;
  v22[1] = a1 + 8;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v7 + 2) = *(_OWORD *)a2;
  *((_OWORD *)v7 + 3) = v8;
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a2 + 32);
  v9 = v7 + 96;
  *((_QWORD *)v7 + 10) = v7 + 96;
  v10 = (void **)(v7 + 80);
  *((_QWORD *)v7 + 11) = 0x1000000000;
  v11 = *(_DWORD *)(a2 + 56);
  if (v11 && v7 + 32 != (char *)a2)
  {
    if (v11 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 80), (uint64_t)v9, *(unsigned int *)(a2 + 56), 8);
      v12 = *(unsigned int *)(a2 + 56);
      if (!(_DWORD)v12)
        goto LABEL_7;
      v9 = *v10;
    }
    else
    {
      v12 = *(unsigned int *)(a2 + 56);
    }
    memcpy(v9, *(const void **)(a2 + 48), 8 * v12);
LABEL_7:
    *((_DWORD *)v5 + 22) = v11;
  }
  v13 = v5 + 240;
  *((_QWORD *)v5 + 28) = v5 + 240;
  v14 = (void **)(v5 + 224);
  *((_QWORD *)v5 + 29) = 0x1000000000;
  v15 = *(_DWORD *)(a2 + 200);
  if (!v15 || v14 == (void **)(a2 + 192))
    goto LABEL_14;
  if (v15 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v5 + 224), (uint64_t)(v5 + 240), *(unsigned int *)(a2 + 200), 8);
    v16 = *(unsigned int *)(a2 + 200);
    if (!(_DWORD)v16)
      goto LABEL_13;
    v13 = *v14;
  }
  else
  {
    v16 = *(unsigned int *)(a2 + 200);
  }
  memcpy(v13, *(const void **)(a2 + 192), 8 * v16);
LABEL_13:
  *((_DWORD *)v5 + 58) = v15;
LABEL_14:
  v17 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 24) = v17;
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 368);
  *((_QWORD *)v5 + 52) = *(_QWORD *)(a2 + 384);
  v23 = 1;
  v18 = v24;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v18;
  *v6 = (uint64_t *)v5;
  v19 = **(_QWORD **)a1;
  v20 = (uint64_t *)v5;
  if (v19)
  {
    *(_QWORD *)a1 = v19;
    v20 = *v6;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 8), v20);
  ++*(_QWORD *)(a1 + 16);
  v22[0] = 0;
  sub_1C5B60488((uint64_t)v22);
  return v5;
}

_QWORD *sub_1C5B603F8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_1C5B604EC(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C5B604EC(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1C5B60488(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[28];
      if (v3 != v2 + 30)
        free(v3);
      v4 = (_QWORD *)v2[10];
      if (v4 != v2 + 12)
        free(v4);
    }
    operator delete(v2);
  }
  return a1;
}

BOOL sub_1C5B604EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BOOL4 v9;

  v2 = a1[46];
  v3 = a1[43];
  if (v3)
    v4 = (uint64_t *)(v3 + 40);
  else
    v4 = a1;
  v5 = *v4;
  v6 = a2[43];
  if (v6)
    v7 = (uint64_t *)(v6 + 40);
  else
    v7 = a2;
  v8 = *v7;
  v9 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1[46], *v7, v5);
  if (!v9)
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v2, v5, v8);
  return !v9;
}

void sub_1C5B60564(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    sub_1C5B60564(*a1);
    sub_1C5B60564(a1[1]);
    v2 = (_QWORD *)a1[28];
    if (v2 != a1 + 30)
      free(v2);
    v3 = (_QWORD *)a1[10];
    if (v3 != a1 + 12)
      free(v3);
    operator delete(a1);
  }
}

void sub_1C5B605C4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1C485B6E0(v7, a2);
  v8 = (uint64_t *)a2[28];
  if (v8 != a2 + 30)
    free(v8);
  v9 = (uint64_t *)a2[10];
  if (v9 != a2 + 12)
    free(v9);
  operator delete(a2);
}

uint64_t sub_1C5B60664(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4, llvm::Instruction *a5, int a6)
{
  uint64_t isKnownPredicate;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  const llvm::Loop *v15;
  const llvm::Loop *v16;
  const llvm::SCEV *SCEVAtScope;
  const llvm::SCEV *v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::SCEV *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  const llvm::Loop *v30;
  const llvm::Loop *v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[9];

  LODWORD(isKnownPredicate) = a6;
  v43[8] = *MEMORY[0x1E0C80C00];
  while ((_DWORD)isKnownPredicate == 2)
  {
    isKnownPredicate = 1;
    if ((sub_1C5B60664(a1, a2, a3, a4, a5, 0) & 1) != 0)
      return isKnownPredicate;
  }
  if ((_DWORD)isKnownPredicate == 1)
  {
    llvm::DependenceInfo::depends(*(_QWORD *)(a1 + 880), a4, a5, 1, (uint64_t *)&v35);
    v12 = (uint64_t)v35;
    isKnownPredicate = v35 == 0;
    if (v35)
    {
      v35 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    if ((*((_BYTE *)a4 + 16) & 0xFE) == 0x3C)
      v13 = (llvm::Value *)*((_QWORD *)a4 - 4);
    else
      v13 = 0;
    if ((*((_BYTE *)a5 + 16) & 0xFE) == 0x3C)
    {
      isKnownPredicate = 0;
      if (v13)
      {
        v14 = (llvm::Value *)*((_QWORD *)a5 - 4);
        if (v14)
        {
          v15 = *(const llvm::Loop **)(a2 + 40);
          v16 = *(const llvm::Loop **)(a3 + 40);
          SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 888), v13, v15);
          v18 = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 888), v14, v16);
          v19 = *(_QWORD *)(a1 + 888);
          v26 = 0;
          v27 = 0;
          v25 = v19;
          v28 = 0;
          v29 = 257;
          v30 = v15;
          v31 = v16;
          v20 = sub_1C5B60958((uint64_t)&v25, (uint64_t)SCEVAtScope);
          if (!(_BYTE)v29)
            goto LABEL_24;
          v21 = (const llvm::SCEV *)v20;
          v24 = **((_QWORD **)v15 + 4);
          v32 = 0;
          v33 = a1;
          v34 = &v24;
          v35 = &v32;
          v36 = v38;
          v37 = 0x800000000;
          v39 = v43;
          v40 = v43;
          v41 = 8;
          v42 = 0;
          sub_1C5B613BC((uint64_t *)&v35, (uint64_t)v18);
          if ((_DWORD)v37 && !*v35)
          {
            v22 = *((_QWORD *)v36 + v37 - 1);
            LODWORD(v37) = v37 - 1;
            __asm { BR              X10 }
          }
          if (v40 != v39)
            free(v40);
          if (v36 != v38)
            free(v36);
          if (!v32)
            isKnownPredicate = llvm::ScalarEvolution::isKnownPredicate(*(uint64_t *****)(a1 + 888), 0x27u, v21, v18);
          else
LABEL_24:
            isKnownPredicate = 0;
          MEMORY[0x1CAA32FB4](v26, 8);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return isKnownPredicate;
}

uint64_t sub_1C5B60958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    __asm { BR              X10 }
  return v5[1];
}

void *sub_1C5B613BC(uint64_t *a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 11), a2);
  if (v5)
  {
    if (a2
      && *(_WORD *)(a2 + 24) == 7
      && (v6 = *a1,
          v7 = *(_QWORD *)(*a1 + 8),
          result = (void *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(v7 + 872), **(_QWORD **)(*a1 + 16), **(_QWORD **)(*(_QWORD *)(a2 + 48) + 32)), (result & 1) == 0)&& (result = (void *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(v7 + 872), **(_QWORD **)(*(_QWORD *)(a2 + 48) + 32), **(_QWORD **)(v6 + 16)), (result & 1) == 0))
    {
      *(_BYTE *)v6 = 1;
    }
    else
    {
      v8 = *((unsigned int *)a1 + 4);
      if (v8 >= *((_DWORD *)a1 + 5))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), (uint64_t)(a1 + 3), v8 + 1, 8);
        LODWORD(v8) = *((_DWORD *)a1 + 4);
      }
      *(_QWORD *)(a1[1] + 8 * v8) = a2;
      ++*((_DWORD *)a1 + 4);
    }
  }
  return result;
}

void sub_1C5B61490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 != a1 + 40)
  {
    v2 = v1 ? v1 - 24 : 0;
    v3 = *(unsigned __int8 *)(v2 + 16) - 40;
    v4 = v3 >= 0xFFFFFFF5 ? v2 : 0;
    if (v1)
    {
      if (*(_BYTE *)(v4 + 16) == 30 && v3 >= 0xFFFFFFF5)
      {
        v6 = *(_QWORD *)(v4 - 32);
        v7 = (char *)operator new(0x60uLL);
        *((_DWORD *)v7 + 13) = *((_DWORD *)v7 + 13) & 0x38000000 | 1;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 2) = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 4) = ***(_QWORD ***)v6 + 1576;
        *((_QWORD *)v7 + 3) = v7 + 32;
        *((_QWORD *)v7 + 5) = 0;
        v7[48] = 30;
        v7[49] = 0;
        *((_WORD *)v7 + 25) = 0;
        *((_DWORD *)v7 + 13) = 1;
        *(_OWORD *)(v7 + 56) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *((_DWORD *)v7 + 22) = 0;
        v8 = (_QWORD *)(v6 + 8);
        v9 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)v7 = v6;
        *((_QWORD *)v7 + 1) = v9;
        if (v9)
          *(_QWORD *)(v9 + 16) = v7 + 8;
        *((_QWORD *)v7 + 2) = v8;
        *v8 = v7;
        v10 = (uint64_t *)(v4 + 24);
        llvm::ReplaceInstWithInst(*(_QWORD *)(v4 + 40) + 40, &v10, (llvm::Value *)(v7 + 32));
      }
    }
  }
}

uint64_t sub_1C5B61598(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4, uint64_t a5, llvm::DependenceInfo *a6)
{
  uint64_t result;

  llvm::moveInstructionsToTheBeginning(*(llvm **)(a2 + 32), a3, *(llvm::BasicBlock **)(a1 + 872), *(llvm::DominatorTree **)(a1 + 896), *(const llvm::PostDominatorTree **)(a1 + 880), a6);
  result = llvm::BasicBlock::getUniqueSuccessor(*(llvm::BasicBlock **)(a2 + 32));
  if (result)
  {
    llvm::MergeBlockIntoPredecessor(result, (llvm::BasicBlock *)(a1 + 424), *(int32x2_t **)(a1 + 864), 0, 0, 0);
    return llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)(a1 + 424));
  }
  return result;
}

uint64_t sub_1C5B6160C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B5FCF8(v0);
}

void sub_1C5B61638(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B6165C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C5B61788(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  llvm::Function *v2;
  uint64_t v3;
  uint64_t v4;
  char **v6;
  char *v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t *v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  llvm::AssumptionCacheTracker *v27;
  uint64_t AssumptionCache;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  void **v35;
  int *v36;
  char *v37;
  uint64_t v38;
  void **v39;
  void *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v49;
  char *v50;
  void *v51;
  _QWORD v52[38];
  void *v53;
  _QWORD v54[14];

  v2 = a2;
  v3 = (uint64_t)a1;
  v54[12] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v6 = **(char ****)(v3 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::LoopInfoWrapperPass::ID);
  v8 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::LoopInfoWrapperPass::ID);
  v9 = **(char ****)(v3 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::DominatorTreeWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::DominatorTreeWrapperPass::ID);
  v12 = **(void ****)(v3 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::DependenceAnalysisWrapperPass::ID);
  v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::DependenceAnalysisWrapperPass::ID)+ 32);
  v15 = **(char ****)(v3 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::ScalarEvolutionWrapperPass::ID);
  v17 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v18 = **(void ****)(v3 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::PostDominatorTreeWrapperPass::ID);
  v20 = (uint64_t *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v21 = **(void ****)(v3 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v23 = v8 + 32;
  v24 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v25 = **(char ****)(v3 + 8);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != llvm::AssumptionCacheTracker::ID);
  v27 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v27, v2);
  v29 = **(char ****)(v3 + 8);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != llvm::TargetTransformInfoWrapperPass::ID);
  v31 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v32 = *(_QWORD *)(v31 + 56);
  if (!v32)
  {
    sub_1C485C2F0();
LABEL_38:
    (*((void (**)(void **))*v35 + 1))(v35);
    goto LABEL_24;
  }
  v11 += 32;
  v3 = (uint64_t)(v20 + 4);
  v20 = v43;
  (*(void (**)(void ***__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v32 + 48))(&v39, v32, v2);
  v2 = (llvm::Function *)(v31 + 64);
  v33 = v39;
  if (*(_BYTE *)(v31 + 72))
  {
    v39 = 0;
    v34 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v33;
    if (!v34)
      goto LABEL_24;
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v39;
    v39 = 0;
    if (!v35)
      goto LABEL_24;
    goto LABEL_38;
  }
  *(_QWORD *)(v31 + 64) = v39;
  *(_BYTE *)(v31 + 72) = 1;
LABEL_24:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v20);
  sub_1C4D8B52C((uint64_t *)&v40);
  sub_1C5B5C188((uint64_t)&v40, v23, v11, v14, v17, v3, v24, AssumptionCache, (uint64_t)v2);
  v4 = sub_1C5B5C328((uint64_t)&v40);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v51);
  v39 = (void **)v54;
  sub_1C50B10F0(&v39);
  if (v53 != (void *)v52[37])
    free(v53);
  if (v51 != v52)
    free(v51);
  sub_1C618F3AC(&v50);
  if (v49 != v48)
    free(v49);
  v36 = (int *)v40;
  if ((_DWORD)v41)
  {
    v37 = (char *)v40 - 16;
    v38 = 24 * v41;
    do
    {
      sub_1C5B60564(*(_QWORD **)&v37[v38]);
      v38 -= 24;
    }
    while (v38);
    v36 = (int *)v40;
  }
  if (v36 != &v42)
    free(v36);
  return v4;
}

void sub_1C5B61B74(__int128 *a1, uint64_t *a2, _WORD *a3, int **a4, _WORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81EE00, "loop-fusion-dependence-analysis", 0x1FuLL);
  xmmword_1ED81EE20 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  if (v10)
  {
    v11 = *a2;
    v12 = v11 + 40 * v10;
    do
    {
      sub_1C631AB58(*(unsigned __int8 **)v11, *(_QWORD *)(v11 + 8), *(_DWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32));
      v11 += 40;
    }
    while (v11 != v12);
  }
  word_1ED81EE0A = word_1ED81EE0A & 0xFF9F | (32 * (*a3 & 3));
  v13 = *a4;
  dword_1ED81EE80 = **a4;
  byte_1ED81EE94 = 1;
  unk_1ED81EE90 = *v13;
  word_1ED81EE0A = word_1ED81EE0A & 0xFFF8 | *a5 & 7;
}

unint64_t sub_1C5B61C44(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED81EEB0 >= HIDWORD(qword_1ED81EEB0))
  {
    v3 = qword_1ED81EEB0 + 1;
    if (qword_1ED81EEA8 <= a1 && qword_1ED81EEA8 + 48 * (unint64_t)qword_1ED81EEB0 > a1)
    {
      v5 = a1 - qword_1ED81EEA8;
      sub_1C631AC0C(v3);
      return qword_1ED81EEA8 + v5;
    }
    else
    {
      sub_1C631AC0C(v3);
    }
  }
  return a1;
}

uint64_t sub_1C5B61CB8()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;
  int v5;
  __int128 v6;
  _QWORD v7[2];
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = "Which dependence analysis should loop fusion use?";
  *((_QWORD *)&v4 + 1) = 49;
  *(_QWORD *)&v6 = v7;
  v7[0] = "scev";
  v7[1] = 4;
  v8 = 0;
  v9 = "Use the scalar evolution interface";
  v10 = 34;
  v11 = "da";
  v12 = 2;
  v13 = 1;
  v14 = "Use the dependence analysis interface";
  v15 = 37;
  v16 = "all";
  v17 = 3;
  v18 = 2;
  v19 = "Use all available analyses";
  v20 = 26;
  *((_QWORD *)&v6 + 1) = 0x400000003;
  v5 = 1;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C631AA40(&v4, (uint64_t *)&v6, &v5, &v3, &v1);
  if ((_QWORD *)v6 != v7)
    free((void *)v6);
  __cxa_atexit((void (*)(void *))sub_1C631A5EC, &qword_1ED81EE00, &dword_1C475E000);
  LODWORD(v3) = 0;
  *(_QWORD *)&v4 = &v3;
  v5 = 1;
  *(_QWORD *)&v6 = "Max number of iterations to be peeled from a loop, such that fusion can take place";
  *((_QWORD *)&v6 + 1) = 82;
  sub_1C4DB1928((uint64_t)&unk_1ED81ED40, "loop-fusion-peel-max-count", (int **)&v4, &v5, &v6);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81ED40, &dword_1C475E000);
}

_QWORD *llvm::LoopIdiomRecognizePass::run@<X0>(_QWORD **a1@<X1>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *result;
  const llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t *v15;
  _QWORD *v16[10];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[10];

  v21[9] = *MEMORY[0x1E0C80C00];
  if (llvm::DisableLIRP::All)
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    v7 = *(const llvm::Function **)(*a1[4] + 56);
    v8 = *((_QWORD *)v7 + 5) + 272;
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v14, v7);
    sub_1C5B620A4((uint64_t)v16, *a2, a2[2], a2[3], a2[4], a2[5], a2[6], a2[9], v8, (uint64_t)v14);
    if ((sub_1C5B621EC(v16, a1) & 1) != 0)
    {
      llvm::getLoopPassPreservedAnalyses(a3);
      if (a2[9])
        sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    }
    else
    {
      *(_QWORD *)a3 = a3 + 32;
      *(_QWORD *)(a3 + 8) = a3 + 32;
      *(_QWORD *)(a3 + 16) = 2;
      *(_DWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 48) = a3 + 80;
      *(_QWORD *)(a3 + 56) = a3 + 80;
      *(_QWORD *)(a3 + 64) = 2;
      *(_DWORD *)(a3 + 72) = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    }
    if (v20 != v21)
      free(v20);
    sub_1C62EA8E4((uint64_t)&v19);
    result = (_QWORD *)sub_1C62EA8E4((uint64_t)&v18);
    v9 = v17;
    v17 = 0;
    if (v9)
    {
      sub_1C61247C0(v9 + 584, *(_QWORD **)(v9 + 592));
      v10 = *(void **)(v9 + 504);
      if (v10 != (void *)(v9 + 520))
        free(v10);
      v11 = *(void **)(v9 + 416);
      if (v11 != *(void **)(v9 + 408))
        free(v11);
      sub_1C4EE41F8((char **)(v9 + 8));
      result = (_QWORD *)MEMORY[0x1CAA32FC0](v9, 0x10E0C40B8556DDDLL);
    }
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return (_QWORD *)MEMORY[0x1CAA32FC0](v12, 0x20C4093837F09);
    }
  }
  return result;
}

uint64_t sub_1C5B620A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = a10;
  *(_QWORD *)(a1 + 80) = 0;
  v11 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x800000000;
  if (a8)
  {
    v13 = operator new();
    *(_QWORD *)v13 = a8;
    *(_QWORD *)(v13 + 8) = v13 + 24;
    *(_QWORD *)(v13 + 16) = 0x1000000000;
    *(_QWORD *)(v13 + 408) = v13 + 440;
    *(_QWORD *)(v13 + 416) = v13 + 440;
    *(_QWORD *)(v13 + 424) = 8;
    *(_DWORD *)(v13 + 432) = 0;
    *(_QWORD *)(v13 + 504) = v13 + 520;
    *(_QWORD *)(v13 + 512) = 0x800000000;
    *(_QWORD *)(v13 + 600) = 0;
    *(_QWORD *)(v13 + 592) = 0;
    *(_QWORD *)(v13 + 584) = v13 + 592;
    v14 = *v11;
    *v11 = v13;
    if (v14)
    {
      sub_1C61247C0(v14 + 584, *(_QWORD **)(v14 + 592));
      v15 = *(void **)(v14 + 504);
      if (v15 != (void *)(v14 + 520))
        free(v15);
      v16 = *(void **)(v14 + 416);
      if (v16 != *(void **)(v14 + 408))
        free(v16);
      sub_1C4EE41F8((char **)(v14 + 8));
      MEMORY[0x1CAA32FC0](v14, 0x10E0C40B8556DDDLL);
    }
  }
  return a1;
}

uint64_t sub_1C5B621EC(_QWORD **a1, _QWORD **a2)
{
  uint64_t LoopPredecessor;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t ***v19;
  int v21;
  int v22;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  llvm::ScalarEvolution *v30;
  uint64_t v31;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t Exact;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t (**v54)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t (***v60)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v61)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v62)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  const llvm::DataLayout *v73;
  int v74;
  BOOL v75;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t SCEVIter;
  BOOL v86;
  llvm::Value **v87;
  __int16 v88;
  int v89;
  unsigned int v90;
  uint64_t (***v91)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v92)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int64_t v104;
  BOOL v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  BOOL v127;
  BOOL v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  char v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  llvm::Type **v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  llvm::Type **v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  llvm::SCEV *Constant;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BOOL4 v175;
  uint64_t v176;
  int32x2_t ****v177;
  uint64_t v179;
  uint64_t v180;
  llvm::APInt *v181;
  unsigned int v182;
  llvm::Type **v184;
  llvm::Value *v185;
  BOOL v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  llvm::Type **v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  BOOL v197;
  _QWORD *v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  unint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  BOOL v218;
  void *v219;
  int32x2_t ****v220;
  unint64_t v221;
  int32x2_t ****v222;
  int32x2_t *v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  int32x2_t *****v228;
  int32x2_t ****v229;
  int v230;
  int v231;
  int v232;
  int64_t v233;
  unint64_t v234;
  int v235;
  _BOOL4 v236;
  int v237;
  llvm::SCEV *v238;
  __int16 v239;
  llvm::OptimizationRemarkEmitter *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  void **v252;
  char *v253;
  unint64_t v254;
  void **v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BOOL4 v259;
  uint64_t v260;
  int32x2_t ****v261;
  uint64_t v263;
  uint64_t v264;
  llvm::APInt *v265;
  unsigned int v266;
  llvm::Type **v267;
  _QWORD *v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  llvm::Type **v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  BOOL v277;
  _QWORD *v278;
  unint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  llvm::SCEV *NegativeSCEV;
  const llvm::SCEV *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  void **v297;
  unsigned int v298;
  const llvm::SCEV *v299;
  int v300;
  int64_t v301;
  unint64_t v302;
  int v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  int64_t v308;
  unint64_t v309;
  int v310;
  BOOL v311;
  char v312;
  unint64_t v313;
  uint64_t v314;
  int v315;
  int64_t v316;
  unint64_t v317;
  int v318;
  uint64_t v319;
  llvm *v320;
  _QWORD *v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  int32x2_t ****v330;
  unint64_t v331;
  int32x2_t ****v332;
  int32x2_t *v333;
  unint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  int32x2_t *****v338;
  int32x2_t ****v339;
  int v340;
  int v341;
  const llvm::DataLayout *v342;
  __int16 v343;
  unint64_t v344;
  unint64_t v345;
  __int16 v346;
  _BOOL4 v347;
  char v348;
  char v349;
  size_t __n;
  int __na;
  uint64_t v352;
  void **v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  __int16 ParamAlignment;
  char v358;
  uint64_t *v359;
  uint64_t *v360;
  char v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  char v365;
  int v366;
  char v367;
  uint64_t v368;
  uint64_t (**v369)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *);
  uint64_t v370[2];
  int v371;
  __int16 v372;
  uint64_t v373;
  unint64_t *v374;
  int32x2_t ****v375;
  _QWORD *v376;
  unsigned int v377;
  void *v378[2];
  char v379;
  void *__p;
  char v381;
  void *v382;
  uint64_t v383;
  char v384;
  void *v385;
  char v386;
  void *__dst;
  unsigned int v388;
  char v389;
  void *v390;
  char v391;
  void *v392;
  uint64_t v393;
  _BYTE v394[64];
  uint64_t (**v395)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  unint64_t *v396;
  int32x2_t ****v397;
  void *v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t (**UnderlyingObject)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v402;
  uint64_t v403;
  uint64_t v404;
  _DWORD v405[2];
  const char *v406;
  const char *v407;
  uint64_t v408;
  char v409;
  char v410;
  void *v411;
  uint64_t v412;
  _BYTE v413[260];
  int v414;
  uint64_t v415;
  uint64_t v416;

  v416 = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_8;
  v5 = *(_QWORD *)(LoopPredecessor + 40);
  if (v5 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 16) == 30)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_8:
      v7 = 0;
      return v7 & 1;
    }
  }
  else
  {
    v7 = 0;
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        return v7 & 1;
      case 0x1E:
        __break(1u);
        goto LABEL_622;
      case 0x1F:
        v9 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_622:
        v9 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v9 = *(_DWORD *)(v6 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v9 != 1)
      goto LABEL_8;
  }
  v10 = *(uint64_t ****)(*a2[4] + 56);
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v11 = ***v10;
    v12 = *(_QWORD *)(v11 + 152);
    v13 = *(unsigned int *)(v11 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v10)
      {
LABEL_21:
        v19 = v15[1];
        if (*v19 == (uint64_t **)6)
        {
          if (*((_DWORD *)v19 + 4) == 1936549229 && *((_WORD *)v19 + 10) == 29797)
            goto LABEL_8;
          v21 = *((_DWORD *)v19 + 4);
          v22 = *((unsigned __int16 *)v19 + 10);
          if (v21 == 1668113773 && v22 == 31088)
            goto LABEL_8;
        }
        goto LABEL_30;
      }
      v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v10)
        {
          v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_21;
        }
      }
    }
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_21;
  }
LABEL_30:
  v24 = v10[14];
  if (v24)
    LOBYTE(v24) = ((*((_BYTE *)v24 + 17) & 4) != 0 || *((char *)v24 + 13) < 0) && byte_1ED81F328 != 0;
  *((_BYTE *)a1 + 72) = (_BYTE)v24;
  v25 = a1[5];
  v26 = *(_QWORD *)(v25[1] + 40);
  v27 = (v26 & 0x40) == 0 && (*(_BYTE *)(*v25 + 81) & 0x30) != 0;
  *((_BYTE *)a1 + 264) = v27;
  v28 = (v26 & 0x80) == 0 && *(unsigned __int8 *)(*v25 + 81) > 0x3Fu;
  *((_BYTE *)a1 + 265) = v28;
  v29 = (v26 & 4) == 0 && (*(_BYTE *)(*v25 + 80) & 0x30) != 0;
  *((_BYTE *)a1 + 266) = v29;
  if ((v27 || v28 || v29)
    && llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount((llvm::ScalarEvolution *)a1[4], (const llvm::Loop *)a2))
  {
    v30 = (llvm::ScalarEvolution *)a1[4];
    v31 = (uint64_t)*a1;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v30, (const llvm::Loop *)*a1);
    Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v31, (uint64_t)v30, 0);
    v34 = Exact;
    if (Exact && !*(_WORD *)(Exact + 24))
    {
      v35 = *(_QWORD *)(Exact + 32);
      v36 = (_QWORD *)(v35 + 24);
      v37 = *(_DWORD *)(v35 + 32);
      if (v37 < 0x41)
        goto LABEL_53;
      if (v37 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v35 + 24)) <= 0x40)
      {
        v36 = (_QWORD *)*v36;
LABEL_53:
        if (!*v36)
          goto LABEL_8;
      }
    }
    v392 = v394;
    v393 = 0x800000000;
    sub_1C4EAEA40(*a1, (uint64_t)&v392);
    v370[1] = 0;
    v371 = 0;
    v369 = &off_1E8139EA0;
    v370[0] = 0;
    v372 = 0;
    llvm::SimpleLoopSafetyInfo::computeLoopSafetyInfo((llvm::SimpleLoopSafetyInfo *)&v369, (llvm ***)*a1);
    v7 = 0;
    if ((_BYTE)v372)
      goto LABEL_55;
    v38 = (uint64_t *)(*a1)[4];
    v363 = (uint64_t *)(*a1)[5];
    if (v363 == v38)
    {
      v7 = 0;
      goto LABEL_55;
    }
    v7 = 0;
    v362 = v34;
    while (1)
    {
      v39 = *v38;
      v40 = a1[3];
      v41 = *((_DWORD *)v40 + 4);
      if (v41)
      {
        v42 = *v40;
        v43 = v41 - 1;
        v44 = ((v39 >> 4) ^ (v39 >> 9)) & (v41 - 1);
        v45 = *(_QWORD *)(v42 + 16 * v44);
        if (v39 == v45)
        {
LABEL_64:
          v48 = *(_QWORD **)(v42 + 16 * v44 + 8);
          goto LABEL_66;
        }
        v46 = 1;
        while (v45 != -4096)
        {
          v47 = v44 + v46++;
          v44 = v47 & v43;
          v45 = *(_QWORD *)(v42 + 16 * v44);
          if (v39 == v45)
            goto LABEL_64;
        }
      }
      v48 = 0;
LABEL_66:
      if (v48 == *a1)
      {
        if ((_DWORD)v393)
        {
          v49 = (uint64_t *)v392;
          v50 = 8 * v393;
          while (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)a1[2], v39, *v49))
          {
            ++v49;
            v50 -= 8;
            if (!v50)
              goto LABEL_71;
          }
          v136 = 0;
          goto LABEL_239;
        }
LABEL_71:
        v359 = v38;
        sub_1C631AD60((uint64_t)(a1 + 11));
        sub_1C631AD60((uint64_t)(a1 + 17));
        *((_DWORD *)a1 + 48) = 0;
        v51 = *(_QWORD *)(v39 + 48);
        v368 = v39 + 40;
        v364 = v39;
        if (v51 != v39 + 40)
        {
          while (2)
          {
            v52 = v51 - 24;
            if (!v51)
              v52 = 0;
            v53 = *(unsigned __int8 *)(v52 + 16);
            if (v53 == 61)
              v54 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v52;
            else
              v54 = 0;
            if (!v51 || v53 != 61 || (*((_WORD *)v54 + 9) & 0x301) != 0)
              goto LABEL_138;
            if ((*((_BYTE *)v54 + 23) & 0x20) != 0)
            {
              v55 = **(_QWORD **)*v54;
              v395 = v54;
              v56 = *(_DWORD *)(v55 + 2496);
              if (!v56)
              {
                v91 = 0;
                goto LABEL_143;
              }
              v57 = *(_QWORD *)(v55 + 2480);
              v58 = v56 - 1;
              v59 = v58 & ((v54 >> 4) ^ (v54 >> 9));
              v60 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v57 + 40 * v59);
              v61 = *v60;
              if (*v60 != v54)
              {
                v62 = 0;
                v63 = 1;
                while (v61 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
                {
                  if (v62)
                    v64 = 0;
                  else
                    v64 = v61 == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
                  if (v64)
                    v62 = v60;
                  v65 = v59 + v63++;
                  v59 = v65 & v58;
                  v60 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v57 + 40 * v59);
                  v61 = *v60;
                  if (*v60 == v54)
                    goto LABEL_91;
                }
                if (v62)
                  v91 = v62;
                else
                  v91 = v60;
LABEL_143:
                v60 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))sub_1C541AB24(v55 + 2480, (uint64_t)&v395, (uint64_t *)&v395, v91);
                v92 = v395;
                v60[4] = 0;
                v60[3] = 0;
                *v60 = v92;
                v60[1] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v60 + 3);
                v60[2] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))0x100000000;
                v39 = v364;
              }
LABEL_91:
              v66 = *((unsigned int *)v60 + 4);
              if ((_DWORD)v66)
              {
                v67 = v60[1] + 1;
                v68 = 16 * v66;
                while (*((_DWORD *)v67 - 2) != 9)
                {
                  v67 += 2;
                  v68 -= 16;
                  if (!v68)
                    goto LABEL_95;
                }
                if (*v67)
                {
LABEL_138:
                  v51 = *(_QWORD *)(v51 + 8);
                  if (v51 == v368)
                    goto LABEL_242;
                  continue;
                }
              }
            }
            break;
          }
LABEL_95:
          v69 = (uint64_t *)*(v54 - 8);
          v70 = *v69;
          if ((*(_DWORD *)(*v69 + 8) & 0xFE) == 0x12)
            v70 = **(_QWORD **)(v70 + 16);
          v71 = (unint64_t)*(v54 - 4);
          if (sub_1C4DEB33C((uint64_t)a1[7], v70))
            goto LABEL_138;
          sub_1C4768AD0((uint64_t)a1[7], *v69);
          v75 = v74 != 1 && (v72 & 7) == 0;
          if (!v75 || HIDWORD(v72) != 0)
            goto LABEL_138;
          v77 = a1[4];
          v78 = v77[13];
          v79 = *((_DWORD *)v77 + 30);
          if (v79)
          {
            v80 = (v79 - 1) & ((v71 >> 4) ^ (v71 >> 9));
            v81 = v78 + 48 * v80;
            v82 = *(_QWORD *)(v81 + 24);
            if (v82 != v71)
            {
              v83 = 1;
              while (v82 != -4096)
              {
                v84 = v80 + v83++;
                v80 = v84 & (v79 - 1);
                v81 = v78 + 48 * v80;
                v82 = *(_QWORD *)(v81 + 24);
                if (v82 == v71)
                  goto LABEL_113;
              }
              goto LABEL_112;
            }
          }
          else
          {
LABEL_112:
            v81 = v78 + 48 * v79;
          }
LABEL_113:
          if (v81 == v78 + 48 * v79 || (SCEVIter = *(_QWORD *)(v81 + 40)) == 0)
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v77, v71);
          if (SCEVIter)
            v86 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
          else
            v86 = 0;
          if (!v86
            || *(_QWORD **)(SCEVIter + 48) != *a1
            || *(_QWORD *)(SCEVIter + 40) != 2
            || *(_WORD *)(*(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8) + 24))
          {
            goto LABEL_138;
          }
          v87 = llvm::isBytewiseValue((llvm *)v69, (llvm::Value *)a1[7], v73);
          v88 = *((_WORD *)v54 + 9);
          if ((v88 & 0x301) != 0)
          {
LABEL_125:
            v89 = llvm::DisableLIRP::Memset;
            if (*((_BYTE *)a1 + 264) && v87 && !llvm::DisableLIRP::Memset)
            {
              if (!llvm::Loop::isLoopInvariant((uint64_t)*a1, (uint64_t)v87))
              {
                v89 = llvm::DisableLIRP::Memset;
                goto LABEL_130;
              }
LABEL_225:
              UnderlyingObject = 0;
              UnderlyingObject = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))llvm::getUnderlyingObject((llvm *)*(v54 - 4), (const llvm::Value *)6);
              v131 = (uint64_t)(a1 + 11);
LABEL_228:
              v132 = sub_1C631ADB4(v131, (uint64_t *)&UnderlyingObject);
              v133 = v132;
              v134 = *(unsigned int *)(v132 + 8);
              if (v134 >= *(unsigned int *)(v132 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v132, v132 + 16, v134 + 1, 8);
                v134 = *(unsigned int *)(v133 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v133 + 8 * v134) = v54;
              ++*(_DWORD *)(v133 + 8);
LABEL_222:
              v39 = v364;
              goto LABEL_138;
            }
LABEL_130:
            v365 = 0;
            if (*((_BYTE *)a1 + 265) && !v89)
            {
              v90 = *(_DWORD *)(*(_QWORD *)v71 + 8);
              if ((v90 & 0xFE) == 0x12)
                v90 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v71 + 16) + 8);
              if (v90 > 0xFF || !sub_1C5B6AEF8((llvm::Value **)v69, a1[7]))
              {
                v365 = 0;
                goto LABEL_148;
              }
LABEL_227:
              UnderlyingObject = 0;
              UnderlyingObject = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))llvm::getUnderlyingObject((llvm *)*(v54 - 4), (const llvm::Value *)6);
              v131 = (uint64_t)(a1 + 17);
              goto LABEL_228;
            }
LABEL_148:
            v39 = v364;
            if (!*((_BYTE *)a1 + 266) || llvm::DisableLIRP::Memcpy)
              goto LABEL_138;
            v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8) + 32);
            v95 = *(unsigned int *)(v94 + 32);
            if (v95 > 0x40)
            {
              v96 = (_QWORD *)operator new[]();
              memcpy(v96, *(const void **)(v94 + 24), ((unint64_t)(v95 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v96 = *(_QWORD **)(v94 + 24);
            }
            sub_1C4768AD0((uint64_t)a1[7], *(_QWORD *)*(v54 - 8));
            v99 = v98;
            if ((_DWORD)v97 == 1)
            v100 = ((unint64_t)(v99 + 7) >> 3);
            if (v95 < 0x41)
            {
              if (v96 != (_QWORD *)v100)
              {
                LODWORD(v402) = v95;
                v101 = (uint64_t)v96;
                v102 = v95;
                goto LABEL_166;
              }
LABEL_187:
              v115 = 0;
              v116 = (uint64_t)*(v54 - 8);
              if (!v116 || *(_BYTE *)(v116 + 16) != 60)
              {
LABEL_215:
                if (v95 >= 0x41 && v96)
                  MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
                if ((v115 - 3) < 2)
                {
                  v130 = *((unsigned int *)a1 + 48);
                  if (v130 >= *((unsigned int *)a1 + 49))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 23), (uint64_t)(a1 + 25), v130 + 1, 8);
                    v130 = *((unsigned int *)a1 + 48);
                  }
                  a1[23][v130] = v54;
                  ++*((_DWORD *)a1 + 48);
                  goto LABEL_222;
                }
                if (v115 != 2)
                {
                  v39 = v364;
                  if (v115 != 1)
                    goto LABEL_138;
                  goto LABEL_225;
                }
                goto LABEL_227;
              }
              if ((*(_WORD *)(v116 + 18) & 0x301) == 0)
              {
                v117 = a1[4];
                v118 = *(_QWORD *)(v116 - 32);
                v119 = v117[13];
                v120 = *((_DWORD *)v117 + 30);
                if (!v120)
                  goto LABEL_199;
                v121 = ((v118 >> 4) ^ (v118 >> 9)) & (v120 - 1);
                v122 = v119 + 48 * v121;
                v123 = *(_QWORD *)(v122 + 24);
                if (v123 != v118)
                {
                  v124 = 1;
                  while (v123 != -4096)
                  {
                    v125 = v121 + v124++;
                    v121 = v125 & (v120 - 1);
                    v122 = v119 + 48 * v121;
                    v123 = *(_QWORD *)(v122 + 24);
                    if (v123 == v118)
                      goto LABEL_200;
                  }
LABEL_199:
                  v122 = v119 + 48 * v120;
                }
LABEL_200:
                if (v122 == v119 + 48 * v120 || (v126 = *(_QWORD *)(v122 + 40)) == 0)
                  v126 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v117, v118);
                v127 = v126 && *(_WORD *)(v126 + 24) == 7;
                if (v127 && *(_QWORD **)(v126 + 48) == *a1 && *(_QWORD *)(v126 + 40) == 2)
                {
                  v128 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8) == *(_QWORD *)(*(_QWORD *)(v126 + 32) + 8);
                  v129 = v365;
                  if (!v128)
                    v129 = 1;
                  if ((v129 & 1) != 0)
                  {
                    v115 = 4 * v128;
                    goto LABEL_215;
                  }
                  v135 = *(unsigned __int8 *)(v116 + 16);
                  if (v135 == 60 || v135 == 61)
                  {
                    if ((*(_WORD *)(v116 + 18) & 0x380) == 0)
                      goto LABEL_236;
                  }
                  else if ((v135 - 63) >= 3)
                  {
LABEL_236:
                    v115 = 3;
                    goto LABEL_215;
                  }
                  v115 = 4;
                  goto LABEL_215;
                }
              }
LABEL_214:
              v115 = 0;
              goto LABEL_215;
            }
            v103 = 0;
            v104 = (unint64_t)(v95 + 63) >> 6;
            do
            {
              v105 = v104-- < 1;
              if (v105)
                break;
              v106 = v96[v104];
              v103 += __clz(v106);
            }
            while (!v106);
            v107 = v95 | 0xFFFFFFC0;
            if ((v95 & 0x3F) == 0)
              v107 = 0;
            if ((v95 - v103 - v107) < 0x41 && *v96 == v100)
              goto LABEL_187;
            LODWORD(v402) = v95;
            v101 = operator new[]();
            UnderlyingObject = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v101;
            v102 = v402;
            memcpy((void *)v101, v96, (((unint64_t)v402 + 63) >> 3) & 0x3FFFFFF8);
            if (v102 > 0x40)
            {
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&UnderlyingObject);
            }
            else
            {
LABEL_166:
              v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v102;
              if (!v102)
                v108 = 0;
              UnderlyingObject = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v108 & ~v101);
            }
            llvm::APInt::operator++((uint64_t)&UnderlyingObject);
            v109 = v402;
            LODWORD(v402) = 0;
            if (v109 < 0x41)
            {
              if (UnderlyingObject == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v100)
                goto LABEL_187;
              goto LABEL_214;
            }
            v110 = 0;
            v111 = (unint64_t)(v109 + 63) >> 6;
            do
            {
              v105 = v111-- < 1;
              if (v105)
                break;
              v112 = (unint64_t)UnderlyingObject[v111];
              v110 += __clz(v112);
            }
            while (!v112);
            v113 = v109 | 0xFFFFFFC0;
            if ((v109 & 0x3F) == 0)
              v113 = 0;
            if ((v109 - v110 - v113) >= 0x41)
            {
              if (!UnderlyingObject)
                goto LABEL_214;
              v114 = 1;
            }
            else
            {
              v114 = *UnderlyingObject != (uint64_t (*)(llvm::DiagnosticInfoWithLocationBase *__hidden))v100;
              if (!UnderlyingObject)
              {
                if (MEMORY[0] == v100)
                  goto LABEL_187;
                goto LABEL_214;
              }
            }
            MEMORY[0x1CAA32F9C](UnderlyingObject, 0x1000C8000313F17);
            if (v402 >= 0x41 && UnderlyingObject)
              MEMORY[0x1CAA32F9C](UnderlyingObject, 0x1000C8000313F17);
            if (!v114)
              goto LABEL_187;
            goto LABEL_214;
          }
          v93 = *((unsigned __int8 *)v54 + 16);
          if (v93 == 60 || v93 == 61)
          {
            if ((*((_WORD *)v54 + 9) & 0x380) != 0)
            {
LABEL_147:
              v365 = 1;
              goto LABEL_148;
            }
          }
          else if ((v93 - 63) < 3)
          {
            goto LABEL_147;
          }
          if ((v88 & 1) == 0)
            goto LABEL_125;
          goto LABEL_147;
        }
LABEL_242:
        v137 = a1[14];
        v138 = a1[15];
        if (v137 == v138)
        {
          v139 = 0;
          v140 = v362;
        }
        else
        {
          v139 = 0;
          v140 = v362;
          do
          {
            v139 |= sub_1C5B69FBC((uint64_t)a1, (uint64_t)(v137 + 1), v362, 1);
            v137 += 11;
          }
          while (v137 != v138);
        }
        v141 = a1[20];
        v142 = a1[21];
        while (v141 != v142)
        {
          v139 |= sub_1C5B69FBC((uint64_t)a1, (uint64_t)(v141 + 1), v140, 0);
          v141 += 11;
        }
        v143 = *((unsigned int *)a1 + 48);
        if ((_DWORD)v143)
        {
          v144 = a1[23];
          v360 = &v144[v143];
          while (1)
          {
            v145 = *v144;
            v146 = *(llvm::Type ***)(*v144 - 32);
            v147 = a1[4];
            v148 = v147[13];
            v149 = *((_DWORD *)v147 + 30);
            if (!v149)
              goto LABEL_258;
            v150 = (v149 - 1) & ((v146 >> 4) ^ (v146 >> 9));
            v151 = v148 + 48 * v150;
            v152 = *(llvm::Type ***)(v151 + 24);
            if (v152 != v146)
              break;
LABEL_259:
            v366 = v139;
            if (v151 == v148 + 48 * v149 || (v155 = *(_QWORD *)(v151 + 40)) == 0)
              v155 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v147, (unint64_t)v146);
            sub_1C4768AD0((uint64_t)a1[7], **(_QWORD **)(v145 - 64));
            v158 = v157;
            if ((_DWORD)v156 == 1)
            v159 = *(_QWORD *)(v145 - 64);
            v160 = *(_QWORD *)(v159 - 32);
            v161 = a1[4];
            v162 = v161[13];
            v163 = *((_DWORD *)v161 + 30);
            if (v163)
            {
              v164 = v163 - 1;
              v165 = (v163 - 1) & ((v160 >> 4) ^ (v160 >> 9));
              v166 = v162 + 48 * v165;
              v167 = *(_QWORD *)(v166 + 24);
              if (v167 == v160)
                goto LABEL_271;
              v168 = 1;
              while (v167 != -4096)
              {
                v169 = v165 + v168++;
                v165 = v169 & v164;
                v166 = v162 + 48 * (v169 & v164);
                v167 = *(_QWORD *)(v166 + 24);
                if (v167 == v160)
                  goto LABEL_271;
              }
            }
            v166 = v162 + 48 * v163;
LABEL_271:
            if (v166 == v162 + 48 * v163 || (v170 = *(_QWORD *)(v166 + 40)) == 0)
            {
              v170 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v161, *(_QWORD *)(v159 - 32));
              v161 = a1[4];
            }
            Constant = (llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v161, *v146, ((unint64_t)(v158 + 7) >> 3), 0);
            v139 = v366 | sub_1C5B6C450((uint64_t)a1, (uint64_t)v146, v160, Constant, (*(_WORD *)(v145 + 18) >> 1) & 0x3F | 0x100, (*(_WORD *)(v159 + 18) >> 1) & 0x3F | 0x100, v145, v159, v155, v170, v362);
            ++v144;
            v39 = v364;
            if (v144 == v360)
              goto LABEL_275;
          }
          v153 = 1;
          while (v152 != (llvm::Type **)-4096)
          {
            v154 = v150 + v153++;
            v150 = v154 & (v149 - 1);
            v151 = v148 + 48 * v150;
            v152 = *(llvm::Type ***)(v151 + 24);
            if (v152 == v146)
              goto LABEL_259;
          }
LABEL_258:
          v151 = v148 + 48 * v149;
          goto LABEL_259;
        }
LABEL_275:
        v367 = v139;
        v172 = *(_QWORD *)(v39 + 48);
        if (v172 == v368)
        {
          v348 = 0;
          v349 = 0;
          v38 = v359;
          goto LABEL_619;
        }
        v361 = 0;
        while (2)
        {
          v173 = v172;
          v172 = *(_QWORD *)(v172 + 8);
          if (v173)
            v174 = v173 - 24;
          else
            v174 = 0;
          v175 = sub_1C53924A0(v174);
          if (v175)
            v176 = v174;
          else
            v176 = 0;
          if (!v173 || !v175)
            goto LABEL_386;
          v177 = (int32x2_t ****)(v172 - 24);
          if (!v172)
            v177 = 0;
          v373 = 6;
          v374 = 0;
          v375 = v177;
          if (v177 != (int32x2_t ****)-8192 && v177 != (int32x2_t ****)-4096 && v177 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v373);
          v179 = v176 - 32 * (*(_DWORD *)(v176 + 20) & 0x7FFFFFF);
          v180 = *(_QWORD *)(v179 + 96);
          v181 = (llvm::APInt *)(v180 + 24);
          v182 = *(_DWORD *)(v180 + 32);
          if (v182 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v181) == v182)
              goto LABEL_297;
            goto LABEL_371;
          }
          if (*(_QWORD *)v181)
            goto LABEL_371;
LABEL_297:
          if (*(_BYTE *)(*(_QWORD *)(v179 + 64) + 16) != 16)
          {
LABEL_371:
            v220 = v375;
            goto LABEL_372;
          }
          if (*((_BYTE *)a1 + 266))
          {
            if (!llvm::DisableLIRP::Memcpy)
              goto LABEL_306;
            goto LABEL_371;
          }
          if (*(_DWORD *)(*(_QWORD *)(v176 - 32) + 36) != 196 || llvm::DisableLIRP::Memcpy != 0)
            goto LABEL_371;
LABEL_306:
          v184 = (llvm::Type **)llvm::Value::stripPointerCasts(*(llvm::Value **)v179);
          v185 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v176 - 32 * (*(_DWORD *)(v176 + 20) & 0x7FFFFFF) + 32));
          if (v184)
            v186 = v185 == 0;
          else
            v186 = 1;
          if (v186)
            goto LABEL_371;
          v187 = (unint64_t)v185;
          v188 = a1[4];
          v189 = v188[13];
          v190 = *((_DWORD *)v188 + 30);
          if (v190)
          {
            v191 = (v190 - 1) & ((v184 >> 4) ^ (v184 >> 9));
            v192 = v189 + 48 * v191;
            v193 = *(llvm::Type ***)(v192 + 24);
            if (v193 != v184)
            {
              v194 = 1;
              while (v193 != (llvm::Type **)-4096)
              {
                v195 = v191 + v194++;
                v191 = v195 & (v190 - 1);
                v192 = v189 + 48 * v191;
                v193 = *(llvm::Type ***)(v192 + 24);
                if (v193 == v184)
                  goto LABEL_317;
              }
              goto LABEL_316;
            }
          }
          else
          {
LABEL_316:
            v192 = v189 + 48 * v190;
          }
LABEL_317:
          if (v192 == v189 + 48 * v190 || (v196 = *(_QWORD *)(v192 + 40)) == 0)
            v196 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v188, (unint64_t)v184);
          if (v196)
            v197 = *(unsigned __int16 *)(v196 + 24) == 7;
          else
            v197 = 0;
          if (!v197 || *(_QWORD **)(v196 + 48) != *a1 || *(_QWORD *)(v196 + 40) != 2)
            goto LABEL_371;
          v198 = a1[4];
          v199 = v198[13];
          v200 = *((_DWORD *)v198 + 30);
          if (v200)
          {
            v201 = (v200 - 1) & ((v187 >> 4) ^ (v187 >> 9));
            v202 = v199 + 48 * v201;
            v203 = *(_QWORD *)(v202 + 24);
            if (v203 != v187)
            {
              v204 = 1;
              while (v203 != -4096)
              {
                v205 = v201 + v204++;
                v201 = v205 & (v200 - 1);
                v202 = v199 + 48 * v201;
                v203 = *(_QWORD *)(v202 + 24);
                if (v203 == v187)
                  goto LABEL_334;
              }
              goto LABEL_333;
            }
          }
          else
          {
LABEL_333:
            v202 = v199 + 48 * v200;
          }
LABEL_334:
          if (v202 == v199 + 48 * v200 || (v206 = *(_QWORD *)(v202 + 40)) == 0)
            v206 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v198, v187);
          if (v206)
            v207 = *(unsigned __int16 *)(v206 + 24) == 7;
          else
            v207 = 0;
          if (!v207 || *(_QWORD **)(v206 + 48) != *a1 || *(_QWORD *)(v206 + 40) != 2)
            goto LABEL_371;
          v208 = *(_QWORD *)(v176 - 32 * (*(_DWORD *)(v176 + 20) & 0x7FFFFFF) + 64);
          v209 = (unint64_t *)(v208 + 24);
          if (*(_DWORD *)(v208 + 32) >= 0x41u)
            v209 = (unint64_t *)*v209;
          v356 = *v209;
          if (HIDWORD(*v209))
            goto LABEL_371;
          v210 = *(_QWORD *)(*(_QWORD *)(v196 + 32) + 8);
          if (*(_WORD *)(v210 + 24))
            v210 = 0;
          v211 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v206 + 32) + 8) + 24)
               ? 0
               : *(_QWORD *)(*(_QWORD *)(v206 + 32) + 8);
          if (!v210 || v211 == 0)
            goto LABEL_371;
          v213 = *(_QWORD *)(v210 + 32);
          v354 = *(unsigned int *)(v213 + 32);
          if (v354 > 0x40)
          {
            v352 = operator new[]();
            memcpy((void *)v352, *(const void **)(v213 + 24), ((unint64_t)(v354 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v352 = *(_QWORD *)(v213 + 24);
          }
          v214 = *(_QWORD *)(v211 + 32);
          v215 = *(unsigned int *)(v214 + 32);
          if (v215 >= 0x41)
          {
            v219 = (void *)operator new[]();
            memcpy(v219, *(const void **)(v214 + 24), ((unint64_t)(v215 + 63) >> 3) & 0x3FFFFFF8);
            MEMORY[0x1CAA32F9C](v219, 0x1000C8000313F17);
            if (v354 <= 0x40)
              goto LABEL_371;
          }
          else if (v354 <= 0x40)
          {
            __n = *(_QWORD *)(v214 + 24);
            if (v352 == v356)
              goto LABEL_401;
            v377 = v354;
            v216 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v354;
            if (!(_DWORD)v354)
              v216 = 0;
            v376 = (_QWORD *)(v216 & ~v352);
            llvm::APInt::operator++((uint64_t)&v376);
            v217 = v377;
            v377 = 0;
            if (v217 < 0x41)
            {
              v218 = v376 == (_QWORD *)v356;
              goto LABEL_366;
            }
            v232 = 0;
            v233 = (unint64_t)(v217 + 63) >> 6;
            do
            {
              v105 = v233-- < 1;
              if (v105)
                break;
              v234 = v376[v233];
              v232 += __clz(v234);
            }
            while (!v234);
            v235 = v217 | 0xFFFFFFC0;
            if ((v217 & 0x3F) == 0)
              v235 = 0;
            if ((v217 - v232 - v235) >= 0x41)
            {
              if (v376)
              {
                v236 = 1;
                goto LABEL_398;
              }
            }
            else
            {
              v218 = *v376 == v356;
              v236 = *v376 != v356;
              if (!v376)
              {
LABEL_366:
                if (!v218)
                  goto LABEL_404;
LABEL_401:
                v237 = 0;
                if (v352 << -(char)v354 >> -(char)v354 == (uint64_t)(__n << -(char)v215) >> -(char)v215)
                {
                  v238 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a1[4], *v184, v356, 0);
                  ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v176 + 64), 0);
                  v239 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v176 + 64), 1);
                  v237 = sub_1C5B6C450((uint64_t)a1, (uint64_t)v184, v187, v238, ParamAlignment, v239, v176, v176, v196, v206, v362);
                }
LABEL_444:
                v220 = v375;
                if (v237)
                {
                  if (!v375)
                    v172 = *(_QWORD *)(v364 + 48);
                  v361 = 1;
                }
LABEL_372:
                v39 = v364;
                if (v220 != (int32x2_t ****)-8192 && v220 != (int32x2_t ****)-4096 && v220)
                {
                  v221 = v373 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v373 & 0xFFFFFFFFFFFFFFF8) = v374;
                  if (v374)
                  {
                    *v374 = *v374 & 7 | v221;
                  }
                  else
                  {
                    v222 = v375;
                    v223 = ***v375;
                    v224 = (unint64_t)v223[303];
                    if (v224 <= v221)
                    {
                      v225 = v223[305].u32[0];
                      if (v224 + 16 * v225 > v221)
                      {
                        v226 = v225 - 1;
                        LODWORD(v227) = v226 & ((v375 >> 4) ^ (v375 >> 9));
                        v228 = (int32x2_t *****)(v224 + 16 * v227);
                        v229 = *v228;
                        if (v375 == *v228)
                        {
LABEL_383:
                          *v228 = (int32x2_t ****)-8192;
                          v223[304] = vadd_s32(v223[304], (int32x2_t)0x1FFFFFFFFLL);
                          v222 = v375;
                        }
                        else
                        {
                          v230 = 1;
                          while (v229 != (int32x2_t ****)-4096)
                          {
                            v231 = v227 + v230++;
                            v227 = v231 & v226;
                            v229 = *(int32x2_t *****)(v224 + 16 * v227);
                            if (v375 == v229)
                            {
                              v228 = (int32x2_t *****)(v224 + 16 * v227);
                              goto LABEL_383;
                            }
                          }
                        }
                        *((_BYTE *)v222 + 17) &= ~1u;
                      }
                    }
                  }
                }
LABEL_386:
                if (v172 == v368)
                {
                  v256 = *(_QWORD *)(v39 + 48);
                  if (v256 != v368)
                  {
                    v358 = 0;
                    v38 = v359;
                    while (1)
                    {
                      v257 = v256;
                      v256 = *(_QWORD *)(v256 + 8);
                      v258 = v257 ? v257 - 24 : 0;
                      v259 = sub_1C5392540(v258);
                      v260 = v259 ? v258 : 0;
                      if (v257 && v259)
                        break;
LABEL_598:
                      if (v256 == v368)
                      {
                        v348 = v361;
                        v349 = v358;
                        goto LABEL_619;
                      }
                    }
                    v261 = (int32x2_t ****)(v256 - 24);
                    if (!v256)
                      v261 = 0;
                    v395 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))6;
                    v396 = 0;
                    v397 = v261;
                    if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261 != 0)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v395);
                    v263 = v260 - 32 * (*(_DWORD *)(v260 + 20) & 0x7FFFFFF);
                    v264 = *(_QWORD *)(v263 + 96);
                    v265 = (llvm::APInt *)(v264 + 24);
                    v266 = *(_DWORD *)(v264 + 32);
                    if (v266 <= 0x40)
                    {
                      if (!*(_QWORD *)v265)
                        goto LABEL_470;
                      goto LABEL_583;
                    }
                    if (llvm::APInt::countLeadingZerosSlowCase(v265) != v266)
                      goto LABEL_583;
LABEL_470:
                    if (!*((_BYTE *)a1 + 264) || llvm::DisableLIRP::Memset)
                    {
LABEL_583:
                      v330 = v397;
                    }
                    else
                    {
                      v267 = (llvm::Type **)llvm::Value::stripPointerCasts(*(llvm::Value **)v263);
                      v268 = a1[4];
                      v269 = v268[13];
                      v270 = *((_DWORD *)v268 + 30);
                      if (!v270)
                        goto LABEL_478;
                      v271 = (v270 - 1) & ((v267 >> 4) ^ (v267 >> 9));
                      v272 = v269 + 48 * v271;
                      v273 = *(llvm::Type ***)(v272 + 24);
                      if (v273 != v267)
                      {
                        v274 = 1;
                        while (v273 != (llvm::Type **)-4096)
                        {
                          v275 = v271 + v274++;
                          v271 = v275 & (v270 - 1);
                          v272 = v269 + 48 * v271;
                          v273 = *(llvm::Type ***)(v272 + 24);
                          if (v273 == v267)
                            goto LABEL_479;
                        }
LABEL_478:
                        v272 = v269 + 48 * v270;
                      }
LABEL_479:
                      if (v272 == v269 + 48 * v270 || (v276 = *(_QWORD *)(v272 + 40)) == 0)
                        v276 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v268, (unint64_t)v267);
                      if (v276)
                        v277 = *(unsigned __int16 *)(v276 + 24) == 7;
                      else
                        v277 = 0;
                      if (!v277 || *(_QWORD **)(v276 + 48) != *a1 || *(_QWORD *)(v276 + 40) != 2)
                        goto LABEL_583;
                      v278 = a1[4];
                      v279 = *(_QWORD *)(v260 - 32 * (*(_DWORD *)(v260 + 20) & 0x7FFFFFF) + 64);
                      v280 = v278[13];
                      v281 = *((_DWORD *)v278 + 30);
                      if (v281)
                      {
                        v282 = v281 - 1;
                        v283 = ((v279 >> 4) ^ (v279 >> 9)) & (v281 - 1);
                        v284 = v280 + 48 * v283;
                        v285 = *(_QWORD *)(v284 + 24);
                        if (v285 != v279)
                        {
                          v286 = 1;
                          while (v285 != -4096)
                          {
                            v287 = v283 + v286++;
                            v283 = v287 & v282;
                            v284 = v280 + 48 * (v287 & v282);
                            v285 = *(_QWORD *)(v284 + 24);
                            if (v285 == v279)
                              goto LABEL_496;
                          }
                          goto LABEL_495;
                        }
                      }
                      else
                      {
LABEL_495:
                        v284 = v280 + 48 * v281;
                      }
LABEL_496:
                      NegativeSCEV = *(llvm::SCEV **)(*(_QWORD *)(v276 + 32) + 8);
                      if (v284 == v280 + 48 * v281 || (v289 = *(const llvm::SCEV **)(v284 + 40)) == 0)
                        v289 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v278, v279);
                      if (!NegativeSCEV || !v289)
                        goto LABEL_583;
                      v290 = *(_QWORD *)(v260 - 32 * (*(_DWORD *)(v260 + 20) & 0x7FFFFFF) + 64);
                      if (*(_BYTE *)(v290 + 16) == 16)
                      {
                        v291 = (uint64_t *)(v290 + 24);
                        if (*(_DWORD *)(v290 + 32) >= 0x41u)
                          v291 = (uint64_t *)*v291;
                        v292 = *(_QWORD *)(*(_QWORD *)(v276 + 32) + 8);
                        if (!v292 || *(_WORD *)(v292 + 24))
                          goto LABEL_583;
                        v293 = *(_QWORD *)(v292 + 32);
                        v353 = (void **)*v291;
                        v355 = *(unsigned int *)(v293 + 32);
                        if (v355 < 0x41)
                        {
                          v294 = *(_QWORD *)(v293 + 24);
                          if (v353 == (void **)v294)
                          {
                            v296 = *v291;
                            v295 = *(_DWORD *)(v293 + 32);
                            LODWORD(v383) = v355;
                            v297 = v353;
                            goto LABEL_554;
                          }
                          v304 = *(_DWORD *)(v293 + 32);
                          v388 = v355;
                          v297 = (void **)v294;
LABEL_529:
                          v305 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v304;
                          if (!v304)
                            v305 = 0;
                          __dst = (void *)(v305 & ~v294);
                          goto LABEL_532;
                        }
                        v297 = (void **)operator new[]();
                        memcpy(v297, *(const void **)(v293 + 24), ((unint64_t)(v355 + 63) >> 3) & 0x3FFFFFF8);
                        v300 = 0;
                        v301 = (unint64_t)(v355 + 63) >> 6;
                        do
                        {
                          v105 = v301-- < 1;
                          if (v105)
                            break;
                          v302 = (unint64_t)v297[v301];
                          v300 += __clz(v302);
                        }
                        while (!v302);
                        v303 = v355 | 0xFFFFFFC0;
                        if ((v355 & 0x3F) == 0)
                          v303 = 0;
                        if ((v355 - v300 - v303) < 0x41 && *v297 == v353)
                        {
                          LODWORD(v383) = v355;
                          goto LABEL_553;
                        }
                        v388 = v355;
                        v294 = operator new[]();
                        __dst = (void *)v294;
                        v304 = v388;
                        memcpy((void *)v294, v297, (((unint64_t)v388 + 63) >> 3) & 0x3FFFFFF8);
                        if (v304 <= 0x40)
                          goto LABEL_529;
                        llvm::APInt::flipAllBitsSlowCase((uint64_t)&__dst);
LABEL_532:
                        llvm::APInt::operator++((uint64_t)&__dst);
                        v306 = v388;
                        v388 = 0;
                        if (v306 >= 0x41)
                        {
                          v307 = 0;
                          v308 = (unint64_t)(v306 + 63) >> 6;
                          do
                          {
                            v105 = v308-- < 1;
                            if (v105)
                              break;
                            v309 = *((_QWORD *)__dst + v308);
                            v307 += __clz(v309);
                          }
                          while (!v309);
                          v310 = v306 | 0xFFFFFFC0;
                          if ((v306 & 0x3F) == 0)
                            v310 = 0;
                          if ((v306 - v307 - v310) >= 0x41)
                          {
                            if (!__dst)
                              goto LABEL_550;
                            v311 = 1;
                          }
                          else
                          {
                            v311 = *(_QWORD *)__dst != (_QWORD)v353;
                            if (!__dst)
                            {
                              if ((void **)MEMORY[0] != v353)
                                goto LABEL_550;
                              goto LABEL_551;
                            }
                          }
                          MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                          if (v388 >= 0x41 && __dst)
                            MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                          if (!v311)
                            goto LABEL_551;
LABEL_550:
                          v312 = 0;
                          LOBYTE(__na) = 0;
                        }
                        else
                        {
                          if (__dst != v353)
                            goto LABEL_550;
LABEL_551:
                          LODWORD(v383) = v355;
                          if (v355 < 0x41)
                          {
                            v296 = (uint64_t)v297;
                            v295 = v355;
                            goto LABEL_554;
                          }
LABEL_553:
                          v296 = operator new[]();
                          v382 = (void *)v296;
                          v295 = v383;
                          memcpy((void *)v296, v297, (((unint64_t)v383 + 63) >> 3) & 0x3FFFFFF8);
                          if (v295 > 0x40)
                          {
                            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v382);
                          }
                          else
                          {
LABEL_554:
                            if (v295)
                              v313 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v295;
                            else
                              v313 = 0;
                            v382 = (void *)(v313 & ~v296);
                          }
                          llvm::APInt::operator++((uint64_t)&v382);
                          v314 = v383;
                          LODWORD(v383) = 0;
                          if (v314 >= 0x41)
                          {
                            v315 = 0;
                            v316 = (unint64_t)(v314 + 63) >> 6;
                            do
                            {
                              v105 = v316-- < 1;
                              if (v105)
                                break;
                              v317 = *((_QWORD *)v382 + v316);
                              v315 += __clz(v317);
                            }
                            while (!v317);
                            LOBYTE(__na) = 0;
                            v318 = v314 | 0xFFFFFFC0;
                            if ((v314 & 0x3F) == 0)
                              v318 = 0;
                            if ((v314 - v315 - v318) <= 0x40)
                              LOBYTE(__na) = *(_QWORD *)v382 == (_QWORD)v353;
                            if (v382)
                            {
                              MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
                              if (v383 >= 0x41)
                              {
                                if (v382)
                                  MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
                              }
                            }
                          }
                          else
                          {
                            LOBYTE(__na) = v382 == v353;
                          }
                          v312 = 1;
                        }
                        if (v355 >= 0x41 && v297)
                          MEMORY[0x1CAA32F9C](v297, 0x1000C8000313F17);
                        if ((v312 & 1) == 0)
                          goto LABEL_583;
                      }
                      else
                      {
                        v298 = *((_DWORD *)*v267 + 2);
                        if ((v298 & 0xFE) == 0x12)
                          v298 = *(_DWORD *)(**((_QWORD **)*v267 + 2) + 8);
                        if (v298 > 0xFF
                          || llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1[4], v289, (const llvm::Loop *)*a1) != 1)
                        {
                          goto LABEL_583;
                        }
                        __na = llvm::SCEV::isNonConstantNegative(NegativeSCEV);
                        if (__na)
                          NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)a1[4], (uint64_t)NegativeSCEV);
                        if (NegativeSCEV != v289)
                        {
                          v299 = llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)a1[4], NegativeSCEV, (const llvm::Loop *)*a1);
                          if (v299 != llvm::ScalarEvolution::applyLoopGuards((llvm::AssumptionCache **)a1[4], v289, (const llvm::Loop *)*a1))goto LABEL_583;
                        }
                      }
                      v319 = v260 - 32 * (*(_DWORD *)(v260 + 20) & 0x7FFFFFF);
                      v320 = *(llvm **)(v319 + 32);
                      if (!v320 || !llvm::Loop::isLoopInvariant((uint64_t)*a1, *(_QWORD *)(v319 + 32)))
                        goto LABEL_583;
                      UnderlyingObject = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v405;
                      v402 = v405;
                      v403 = 1;
                      LODWORD(v404) = 0;
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&UnderlyingObject, v260);
                      v321 = a1[4];
                      v322 = *(_QWORD *)(v260 - 32 * (*(_DWORD *)(v260 + 20) & 0x7FFFFFF) + 64);
                      v323 = v321[13];
                      v324 = *((_DWORD *)v321 + 30);
                      if (v324)
                      {
                        v325 = ((v322 >> 4) ^ (v322 >> 9)) & (v324 - 1);
                        v326 = v323 + 48 * v325;
                        v327 = *(_QWORD *)(v326 + 24);
                        if (v327 != v322)
                        {
                          v328 = 1;
                          while (v327 != -4096)
                          {
                            v329 = v325 + v328++;
                            v325 = v329 & (v324 - 1);
                            v326 = v323 + 48 * v325;
                            v327 = *(_QWORD *)(v326 + 24);
                            if (v327 == v322)
                              goto LABEL_601;
                          }
                          goto LABEL_600;
                        }
                      }
                      else
                      {
LABEL_600:
                        v326 = v323 + 48 * v324;
                      }
LABEL_601:
                      if (v326 == v323 + 48 * v324 || (v342 = *(const llvm::DataLayout **)(v326 + 40)) == 0)
                        v342 = (const llvm::DataLayout *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v321, v322);
                      v343 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v260 + 64), 0);
                      v344 = (1 << v343);
                      if ((v343 & 0xFF00) == 0)
                        v344 = 0;
                      v345 = __clz(__rbit64(v344)) | 0x100;
                      if (v344)
                        v346 = v345;
                      else
                        v346 = 0;
                      v347 = sub_1C5B6B1E8((uint64_t)a1, v267, v342, v346, v320, v260, (uint64_t)&UnderlyingObject, v276, v362, __na, 1);
                      if (v402 != UnderlyingObject)
                        free(v402);
                      v330 = v397;
                      if (v347)
                      {
                        if (!v397)
                          v256 = *(_QWORD *)(v364 + 48);
                        v358 = 1;
                      }
                    }
                    v38 = v359;
                    if (v330 != (int32x2_t ****)-8192 && v330 != (int32x2_t ****)-4096 && v330)
                    {
                      v331 = (unint64_t)v395 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)((unint64_t)v395 & 0xFFFFFFFFFFFFFFF8) = v396;
                      if (v396)
                      {
                        *v396 = *v396 & 7 | v331;
                      }
                      else
                      {
                        v332 = v397;
                        v333 = ***v397;
                        v334 = (unint64_t)v333[303];
                        if (v334 <= v331)
                        {
                          v335 = v333[305].u32[0];
                          if (v334 + 16 * v335 > v331)
                          {
                            v336 = v335 - 1;
                            LODWORD(v337) = v336 & ((v397 >> 4) ^ (v397 >> 9));
                            v338 = (int32x2_t *****)(v334 + 16 * v337);
                            v339 = *v338;
                            if (v397 == *v338)
                            {
LABEL_595:
                              *v338 = (int32x2_t ****)-8192;
                              v333[304] = vadd_s32(v333[304], (int32x2_t)0x1FFFFFFFFLL);
                              v332 = v397;
                            }
                            else
                            {
                              v340 = 1;
                              while (v339 != (int32x2_t ****)-4096)
                              {
                                v341 = v337 + v340++;
                                v337 = v341 & v336;
                                v339 = *(int32x2_t *****)(v334 + 16 * v337);
                                if (v397 == v339)
                                {
                                  v338 = (int32x2_t *****)(v334 + 16 * v337);
                                  goto LABEL_595;
                                }
                              }
                            }
                            *((_BYTE *)v332 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    goto LABEL_598;
                  }
                  v349 = 0;
                  v38 = v359;
                  v348 = v361;
LABEL_619:
                  v136 = v367 | v348 | v349;
LABEL_239:
                  v7 |= v136;
                  goto LABEL_240;
                }
                continue;
              }
LABEL_398:
              MEMORY[0x1CAA32F9C](v376, 0x1000C8000313F17);
              if (v377 >= 0x41 && v376)
              {
                MEMORY[0x1CAA32F9C](v376, 0x1000C8000313F17);
                if (!v236)
                  goto LABEL_401;
              }
              else if (!v236)
              {
                goto LABEL_401;
              }
            }
LABEL_404:
            v240 = (llvm::OptimizationRemarkEmitter *)a1[8];
            v241 = ****(_QWORD ****)v240;
            if (!*(_QWORD *)(v241 + 128))
            {
              v237 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v241 + 72) + 48))(*(_QWORD *)(v241 + 72));
              if (!v237)
                goto LABEL_444;
            }
            v242 = *(_QWORD *)(v176 + 48);
            if (v242)
            {
              v243 = *(_QWORD *)(v242 - 8 * *(unsigned int *)(v242 + 8));
              if (*(_BYTE *)v243 != 15)
                v243 = *(_QWORD *)(v243 - 8 * *(unsigned int *)(v243 + 8));
              v244 = *(_DWORD *)(v242 + 4);
              LODWORD(v242) = *(unsigned __int16 *)(v242 + 2);
            }
            else
            {
              v243 = 0;
              v244 = 0;
            }
            v245 = *(_QWORD *)(v176 + 40);
            v246 = *(_QWORD *)(v245 + 56);
            LODWORD(v402) = 10;
            BYTE4(v402) = 2;
            v403 = v246;
            v404 = v243;
            v405[0] = v244;
            v405[1] = v242;
            v406 = "loop-idiom";
            v407 = "SizeStrideUnequal";
            v408 = 17;
            v409 = 0;
            v410 = 0;
            v411 = v413;
            v412 = 0x400000000;
            v413[256] = 0;
            v414 = -1;
            v415 = v245;
            UnderlyingObject = &off_1E814E538;
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&__dst, "Inst", 4uLL, "memcpy", 6uLL);
            v247 = sub_1C47E3888((uint64_t)&UnderlyingObject, (uint64_t)&__dst);
            v382 = " in ";
            v383 = 4;
            sub_1C53B17B4(v247 + 80, (const void **)&v382);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v382, "Function", 8uLL, *(_BYTE **)(*(_QWORD *)(v176 + 40) + 56));
            v248 = sub_1C47E3888(v247, (uint64_t)&v382);
            v378[0] = " function will not be hoisted: ";
            v378[1] = (void *)31;
            sub_1C53B17B4(v248 + 80, (const void **)v378);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v378, "Reason", 6uLL, "memcpy size is not equal to stride", 0x22uLL);
            v249 = sub_1C47E3888(v248, (uint64_t)v378);
            sub_1C61998EC((uint64_t)&v395, v249);
            v395 = &off_1E814E538;
            if (v381 < 0)
              operator delete(__p);
            if (v379 < 0)
              operator delete(v378[0]);
            if (v386 < 0)
              operator delete(v385);
            if (v384 < 0)
              operator delete(v382);
            if (v391 < 0)
              operator delete(v390);
            if (v389 < 0)
              operator delete(__dst);
            UnderlyingObject = &off_1E814E790;
            v250 = (char *)v411;
            if ((_DWORD)v412)
            {
              v251 = (unint64_t)v412 << 6;
              do
              {
                v252 = (void **)&v250[v251];
                if (v250[v251 - 17] < 0)
                  operator delete(*(v252 - 5));
                if (*((char *)v252 - 41) < 0)
                  operator delete(*(v252 - 8));
                v251 -= 64;
              }
              while (v251);
              v250 = (char *)v411;
            }
            if (v250 != v413)
              free(v250);
            llvm::OptimizationRemarkEmitter::emit(v240, (llvm::DiagnosticInfoOptimizationBase *)&v395);
            v395 = &off_1E814E790;
            v253 = (char *)v398;
            if (v399)
            {
              v254 = (unint64_t)v399 << 6;
              do
              {
                v255 = (void **)&v253[v254];
                if (v253[v254 - 17] < 0)
                  operator delete(*(v255 - 5));
                if (*((char *)v255 - 41) < 0)
                  operator delete(*(v255 - 8));
                v254 -= 64;
              }
              while (v254);
              v253 = (char *)v398;
            }
            if (v253 != (char *)&v400)
              free(v253);
LABEL_443:
            v237 = 0;
            goto LABEL_444;
          }
          break;
        }
        if (v352)
        {
          MEMORY[0x1CAA32F9C](v352, 0x1000C8000313F17);
          goto LABEL_371;
        }
        goto LABEL_443;
      }
LABEL_240:
      if (++v38 == v363)
      {
LABEL_55:
        v369 = (uint64_t (**)(llvm::SimpleLoopSafetyInfo *__hidden, const llvm::BasicBlock *))&unk_1E813A258;
        sub_1C4EF1108(v370);
        if (v392 != v394)
          free(v392);
        return v7 & 1;
      }
    }
  }
  return sub_1C5B64C70((uint64_t *)a1);
}

uint64_t sub_1C5B64484(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Recognize loop idioms";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "loop-idiom";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &unk_1ED81F058;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5B645F0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5B64528(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F058;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195748;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F060);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B64484;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F060, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B645F0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B64528(v0);
}

void sub_1C5B6461C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B64640(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B64698(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v6;
  char *v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  _QWORD **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AnalysisPass;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];
  uint64_t *v49;
  uint64_t v50[2];
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  void *__src;
  unsigned int v57;
  _QWORD v58[2];
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD v68[11];

  v68[9] = *MEMORY[0x1E0C80C00];
  if (llvm::DisableLIRP::All || (llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v6 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::AAResultsWrapperPass::ID);
  v47 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::DominatorTreeWrapperPass::ID);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::LoopInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::LoopInfoWrapperPass::ID);
  v14 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::ScalarEvolutionWrapperPass::ID);
  v46 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v16 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::TargetLibraryInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v19 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  v20 = v50;
  v48[0] = 0;
  v48[1] = 0;
  LODWORD(v49) = 0;
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v21 = (void **)&v55;
  llvm::TargetLibraryAnalysis::run(v18 + 32, v19, (uint64_t)&v55);
  *(_QWORD *)(v18 + 240) = v55;
  v22 = (_QWORD **)(v18 + 240);
  if (*(_BYTE *)(v18 + 320))
  {
    if (v22 == &v55)
    {
LABEL_28:
      *(_DWORD *)(v18 + 312) = v63;
      goto LABEL_29;
    }
    v21 = (void **)(v18 + 248);
    v23 = v57;
    v24 = *(unsigned int *)(v18 + 256);
    if (v24 >= v57)
    {
      if (v57)
        memmove(*v21, __src, 8 * v57);
      goto LABEL_27;
    }
    if (*(_DWORD *)(v18 + 260) < v57)
    {
      *(_DWORD *)(v18 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 248, v18 + 264, v23, 8);
    }
    else if ((_DWORD)v24)
    {
      memmove(*v21, __src, 8 * v24);
      goto LABEL_25;
    }
    v24 = 0;
LABEL_25:
    if (v24 != v57)
      memcpy((char *)*v21 + 8 * v24, (char *)__src + 8 * v24, 8 * v57 - 8 * v24);
LABEL_27:
    *(_DWORD *)(v18 + 256) = v23;
    goto LABEL_28;
  }
  v43 = (void *)(v18 + 264);
  *(_QWORD *)(v18 + 248) = v18 + 264;
  v44 = (void **)(v18 + 248);
  *(_QWORD *)(v18 + 256) = 0x600000000;
  v21 = (void **)v57;
  if (v57 && v44 != &__src)
  {
    if (v57 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 248, v18 + 264, v57, 8);
      v45 = v57;
      if (!v57)
      {
LABEL_61:
        *(_DWORD *)(v18 + 256) = (_DWORD)v21;
        goto LABEL_62;
      }
      v43 = *v44;
    }
    else
    {
      v45 = v57;
    }
    memcpy(v43, __src, 8 * v45);
    goto LABEL_61;
  }
LABEL_62:
  *(_DWORD *)(v18 + 312) = v63;
  *(_BYTE *)(v18 + 320) = 1;
LABEL_29:
  v25 = v10 + 32;
  v26 = v13 + 32;
  if (__src != v58)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v50);
  sub_1C4D8B52C(v48);
  v27 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v28 = *v27;
    v27 += 2;
  }
  while (v28 != llvm::TargetTransformInfoWrapperPass::ID);
  v29 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v27 - 1) + 96))(*(v27 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v55 = 0;
  __src = 0;
  v57 = 0;
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v30 = *(_QWORD *)(v29 + 56);
  if (!v30)
  {
    sub_1C485C2F0();
LABEL_64:
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_37;
  }
  v21 = (void **)v58;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v30 + 48))(v48);
  v20 = (uint64_t *)(v29 + 64);
  v31 = v48[0];
  if (*(_BYTE *)(v29 + 72))
  {
    v48[0] = 0;
    v32 = *v20;
    *v20 = v31;
    if (!v32)
      goto LABEL_37;
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v48[0];
    v48[0] = 0;
    if (!v33)
      goto LABEL_37;
    goto LABEL_64;
  }
  *(_QWORD *)(v29 + 64) = v48[0];
  *(_BYTE *)(v29 + 72) = 1;
LABEL_37:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440((uint64_t *)v21);
  sub_1C4D8B52C((uint64_t *)&v55);
  v34 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40) + 272;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  v36 = 0;
  if (AnalysisPass)
  {
    v37 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID);
    if (v37)
      v36 = *(_QWORD *)(v37 + 32);
    else
      v36 = 0;
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v48, *(const llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  sub_1C5B620A4((uint64_t)&v55, v47, v25, v26, v46, (uint64_t)v22, (uint64_t)v20, v36, v34, (uint64_t)v48);
  v4 = sub_1C5B621EC(&v55, (_QWORD **)a2);
  if (v67 != v68)
    free(v67);
  sub_1C62EA8E4((uint64_t)&v66);
  sub_1C62EA8E4((uint64_t)&v65);
  v38 = v64;
  v64 = 0;
  if (v38)
  {
    sub_1C61247C0(v38 + 584, *(_QWORD **)(v38 + 592));
    v39 = *(void **)(v38 + 504);
    if (v39 != (void *)(v38 + 520))
      free(v39);
    v40 = *(void **)(v38 + 416);
    if (v40 != *(void **)(v38 + 408))
      free(v40);
    sub_1C4EE41F8((char **)(v38 + 8));
    MEMORY[0x1CAA32FC0](v38, 0x10E0C40B8556DDDLL);
  }
  v41 = v49;
  v49 = 0;
  if (v41)
  {
    v42 = *v41;
    *v41 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    MEMORY[0x1CAA32FC0](v41, 0x20C4093837F09);
  }
  return v4;
}

uint64_t sub_1C5B64C70(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *LoopPredecessor;
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t SinglePredecessor;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  const llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  llvm::BasicBlock *v39;
  llvm::APInt *v40;
  unsigned int v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  const llvm::APInt *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t k;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  llvm::Constant *v73;
  llvm::Constant *v74;
  uint64_t v75;
  int v76;
  uint8x8_t v77;
  int v78;
  _BOOL4 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  llvm::Type *v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  llvm::Type *v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  llvm::Constant *v99;
  llvm *v100;
  _QWORD *v101;
  llvm::BasicBlock *v102;
  int v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v109;
  unsigned int v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v116;
  BOOL v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  _BOOL4 isLoopInvariant;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  int v130;
  int64_t v131;
  unint64_t v132;
  unsigned int v133;
  llvm::ConstantInt *v134;
  unsigned int v135;
  int v137;
  unsigned __int8 *v138;
  unsigned __int8 *v140;
  unint64_t v142;
  _BOOL4 v143;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  llvm::APInt *v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned __int8 *v163;
  unint64_t v165;
  BOOL v166;
  llvm::BasicBlock **v167;
  _BOOL4 v169;
  llvm::BasicBlock *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  llvm::BasicBlock *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  llvm::BasicBlock *v181;
  uint64_t v182;
  unsigned int v183;
  const llvm::Loop *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  llvm::PHINode *v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  llvm::APInt *v201;
  unsigned int v202;
  uint64_t v203;
  BOOL v204;
  uint64_t *v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  const llvm::APInt *v221;
  _QWORD *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  BOOL v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  BOOL v237;
  char v238;
  uint64_t **v239;
  uint64_t v240;
  const char **v241;
  uint64_t v242;
  llvm::BasicBlock *v243;
  uint64_t v244;
  uint64_t SCEVIter;
  unint64_t NegativeSCEV;
  unsigned int v247;
  llvm::APInt *v248;
  uint64_t v249;
  llvm::Type *v250;
  llvm::Type *v251;
  const llvm::APInt *v252;
  int v253;
  llvm::Value **v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t i;
  uint64_t v264;
  uint64_t v265;
  llvm::Value **v266;
  llvm::Value **v267;
  llvm::ConstantInt *v268;
  unsigned int v269;
  int v270;
  llvm::ValueHandleBase *v271;
  uint64_t v272;
  uint64_t **v273;
  llvm::ConstantInt **v274;
  llvm::ConstantExpr *v275;
  unsigned __int8 **v276;
  unsigned __int8 *v277;
  llvm::Value **v278;
  uint64_t v279;
  llvm::Value *v280;
  llvm::Value **v281;
  char *v282;
  char *v283;
  llvm::Value ***v284;
  _QWORD *v285;
  uint64_t v286;
  llvm::Value *v287;
  llvm::Value ****v288;
  llvm::Value *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  _DWORD *v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  llvm::APInt *v300;
  unsigned int v301;
  llvm::Value *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  llvm *v311;
  char *v312;
  uint64_t v313;
  uint64_t *v314;
  _QWORD *v315;
  _QWORD *v316;
  llvm::Value *v317;
  char *v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD *v321;
  llvm::ConstantExpr *v322;
  llvm::ConstantExpr *v323;
  llvm::Value **v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  __int16 v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t **v331;
  uint64_t v332;
  llvm::Value **v333;
  llvm::Value ***v334;
  uint64_t v335;
  llvm::Value ****v336;
  llvm::Value *v337;
  llvm::Value *v338;
  llvm::Value *v339;
  llvm::APInt *v340;
  unsigned int v341;
  char *v342;
  char *v343;
  unsigned __int8 **v344;
  int v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  char *v349;
  char *v350;
  unsigned __int8 **v351;
  int v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  uint64_t v356;
  uint64_t v357;
  const llvm::SCEV *v358;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unsigned __int8 *v364;
  unsigned __int8 *v365;
  uint64_t v366;
  llvm::Type *v367;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v369;
  const llvm::APInt *v370;
  uint64_t v371;
  llvm::ValueHandleBase *v372;
  int v373;
  BOOL v374;
  char v375;
  llvm::Type *v376;
  BOOL v377;
  _QWORD *v378;
  llvm::ConstantExpr *v379;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned __int8 *v386;
  int v387;
  int v388;
  uint64_t v389;
  llvm::ValueSymbolTable *v390;
  llvm::ConstantInt *v391;
  unsigned int v392;
  char v393;
  uint64_t j;
  uint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  llvm::APInt *v400;
  unsigned int v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  _QWORD *v412;
  int v413;
  _QWORD *v414;
  _QWORD *v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t Declaration;
  uint64_t **v420;
  uint64_t v421;
  void *v422;
  unsigned __int8 **v423;
  unsigned __int8 *v424;
  uint64_t v425;
  unsigned __int8 *v426;
  unsigned __int8 **v427;
  unsigned __int8 *v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  BOOL v435;
  __int128 *v436;
  char *v437;
  char *v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  unsigned __int8 *v444;
  unsigned __int8 **v445;
  unsigned __int8 *v446;
  llvm::APInt *v447;
  unsigned int v448;
  uint64_t *v449;
  uint64_t v450;
  llvm::Value **v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  __int16 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t **v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  __int128 *v462;
  void (**v463)(__int128 *);
  llvm::BasicBlock *v464;
  _QWORD *v465;
  _QWORD *v466;
  _QWORD *v467;
  uint64_t v468;
  llvm::ConstantInt *v469;
  uint64_t *v470;
  _QWORD *v471;
  _QWORD *v472;
  llvm::Value *v473;
  char *v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  void *v478;
  void *v479;
  llvm::Value **v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t **v487;
  uint64_t v488;
  llvm::Value **v489;
  llvm::Value ***v490;
  uint64_t v491;
  llvm::Value ****v492;
  llvm::Value *v493;
  llvm::Value *v494;
  char *v495;
  char *v496;
  unsigned __int8 **v497;
  int v498;
  unsigned __int8 *v499;
  unsigned __int8 *v500;
  unsigned __int8 *v501;
  _QWORD *v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  llvm::Value *v506;
  char *v507;
  char *v508;
  llvm::ValueHandleBase **v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  llvm::ValueHandleBase ***v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unsigned __int8 *v521;
  int v522;
  int v523;
  char *v524;
  char *v525;
  unsigned __int8 **v526;
  int v527;
  unsigned __int8 *v528;
  unsigned __int8 *v529;
  unsigned __int8 *v530;
  _QWORD *v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t **v540;
  uint64_t *v541;
  int v542;
  int v543;
  uint64_t *v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  const llvm::APInt *v548;
  uint64_t ***v549;
  uint64_t v550;
  llvm::ValueHandleBase *v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t ****v557;
  uint64_t ***v558;
  int v559;
  int v560;
  uint64_t ***v561;
  char *v562;
  uint64_t **v563;
  uint64_t **v564;
  uint64_t Intrinsic;
  llvm::ConstantInt *v566;
  llvm::Type *v567;
  unsigned int v568;
  llvm::Value **v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t ****v574;
  uint64_t ***v575;
  int v576;
  int v577;
  uint64_t ***v578;
  char *v579;
  uint64_t **v580;
  uint64_t **v581;
  _QWORD *v582;
  llvm::Type *v583;
  llvm::ValueHandleBase *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t ****v589;
  uint64_t ***v590;
  int v591;
  int v592;
  uint64_t ***v593;
  char *v594;
  uint64_t **v595;
  uint64_t **v596;
  uint64_t v597;
  uint64_t ***v598;
  const char *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t ****v605;
  uint64_t ***v606;
  int v607;
  int v608;
  int v609;
  llvm *v610;
  uint64_t v611;
  uint64_t v612;
  unsigned __int8 *v613;
  unsigned __int8 *v614;
  llvm::Type *v615;
  llvm::Type *v616;
  unsigned int v617;
  llvm::Type *v618;
  const llvm::APInt *v619;
  uint64_t v620;
  llvm::ValueHandleBase *v621;
  int v622;
  const llvm::APInt *v623;
  _BOOL4 v624;
  _BOOL4 v625;
  _BOOL8 isZero;
  uint64_t v627;
  llvm::ValueHandleBase *v628;
  unsigned int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  llvm::PHINode **v634;
  llvm::PHINode *v635;
  int v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t ***v640;
  uint64_t v641;
  _QWORD *v642;
  llvm::Value **v643;
  uint64_t ***v644;
  const char *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t ****v651;
  uint64_t ***v652;
  int v653;
  int v654;
  uint64_t ***v655;
  uint64_t v656;
  uint64_t v657;
  unsigned __int8 *v658;
  llvm::Constant *v659;
  llvm::Type *v660;
  unsigned int v661;
  uint64_t v662;
  unint64_t v663;
  int v664;
  int v665;
  uint64_t v666;
  llvm::Value **v667;
  unsigned __int8 *v668;
  BOOL v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unsigned __int8 *v673;
  uint64_t ***v674;
  const char *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t ****v681;
  uint64_t ***v682;
  int v683;
  int v684;
  uint64_t ***v685;
  uint64_t v686;
  llvm::PHINode *v687;
  uint64_t v688;
  uint64_t v689;
  _QWORD *v690;
  uint64_t v691;
  unsigned __int8 *v692;
  llvm::Value **v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  llvm::PHINode **v698;
  llvm::PHINode *v699;
  int v700;
  int v701;
  llvm::PHINode *v702;
  char *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t ***v707;
  const char *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t ****v714;
  uint64_t ***v715;
  int v716;
  int v717;
  uint64_t ***v718;
  uint64_t v719;
  llvm::Value *v720;
  _DWORD *v721;
  _DWORD *v722;
  uint64_t v723;
  llvm::Value *v724;
  _QWORD *v725;
  char *v726;
  char *v727;
  unsigned __int8 **v728;
  int v729;
  unsigned __int8 *v730;
  unsigned __int8 *v731;
  unsigned __int8 *v732;
  _QWORD *v733;
  uint64_t ***v734;
  uint64_t ***v735;
  uint64_t **v736;
  uint64_t **v737;
  llvm::Value **v738;
  llvm::ConstantInt *v739;
  llvm::PHINode *v740;
  char *v741;
  llvm::ConstantExpr **v742;
  llvm::ConstantExpr **v743;
  uint64_t v744;
  llvm::ConstantInt *v745;
  llvm::Type *v746;
  unsigned int v747;
  llvm::Value **v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  llvm::PHINode **v753;
  llvm::PHINode *v754;
  int v755;
  int v756;
  llvm::PHINode *v757;
  char *v758;
  llvm::ConstantExpr **v759;
  llvm::ConstantExpr **v760;
  uint64_t ***v761;
  uint64_t v762;
  uint64_t v763;
  unsigned __int8 *v764;
  unsigned __int8 *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t ****v770;
  uint64_t ***v771;
  int v772;
  int v773;
  uint64_t ***v774;
  char *v775;
  uint64_t **v776;
  uint64_t **v777;
  uint64_t v778;
  llvm::Value *v779;
  uint64_t ***v780;
  const char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t ****v787;
  uint64_t ***v788;
  int v789;
  int v790;
  llvm::ConstantInt *v791;
  unsigned int v792;
  char v793;
  uint64_t v794;
  llvm::ValueSymbolTable *v795;
  uint64_t ***v796;
  uint64_t v797;
  _QWORD *v798;
  llvm::Value **v799;
  uint64_t ***v800;
  const char *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t ****v807;
  uint64_t ***v808;
  int v809;
  int v810;
  uint64_t ***v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unsigned __int8 *v817;
  uint64_t ***v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t ****v825;
  uint64_t ***v826;
  int v827;
  int v828;
  uint64_t ***v829;
  uint64_t v830;
  _QWORD *m;
  _QWORD *v832;
  unsigned __int8 *v833;
  uint64_t v834;
  llvm::Value **v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  llvm::PHINode **v840;
  llvm::PHINode *v841;
  int v842;
  int v843;
  llvm::PHINode *v844;
  char *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t ***v848;
  const char *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t ****v855;
  uint64_t ***v856;
  int v857;
  int v858;
  uint64_t ***v859;
  uint64_t v860;
  llvm::Value *v861;
  char *v862;
  char *v863;
  uint64_t *v864;
  _QWORD *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t **v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unsigned __int8 **v872;
  int v873;
  unsigned __int8 *v874;
  unsigned __int8 *v875;
  unsigned __int8 *v876;
  uint64_t v877;
  uint64_t v878;
  unsigned __int8 *v879;
  _DWORD *v880;
  _DWORD *v881;
  uint64_t v882;
  llvm::Value *v883;
  _QWORD *v884;
  uint64_t v885;
  uint64_t v886;
  unsigned __int8 **v887;
  int v888;
  unsigned __int8 *v889;
  unsigned __int8 *v890;
  unsigned __int8 *v891;
  _QWORD *v892;
  uint64_t ***v893;
  uint64_t ***v894;
  uint64_t **v895;
  uint64_t **v896;
  llvm::Value **v897;
  uint64_t v898;
  _QWORD *v899;
  uint64_t v900;
  _QWORD *v901;
  llvm::ConstantInt *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  llvm::Value *v908;
  llvm::Value *v909;
  llvm::BasicBlock *v910;
  llvm::SCEV *Constant;
  llvm::SCEV *v912;
  int v913;
  char *v914;
  uint64_t v915;
  _QWORD *v916;
  llvm::PHINode *v917;
  llvm::PHINode *v918;
  llvm::PHINode *v919;
  llvm::PHINode *v920;
  llvm::BasicBlock *v921;
  llvm::BasicBlock *v922;
  llvm::BasicBlock *v923;
  llvm::BasicBlock *v924;
  llvm *v925;
  char v926;
  llvm *v927;
  llvm *v928;
  llvm *ExitBlock;
  llvm *v930;
  unsigned __int8 *v931;
  int v932;
  llvm::ConstantInt *v933;
  llvm::ConstantInt *v934;
  llvm::ConstantInt *v935;
  llvm::ConstantInt *v936;
  llvm::ConstantInt *v937;
  llvm::ConstantInt *v938;
  llvm::Type *v939;
  __int128 v940;
  _WORD v941[12];
  _WORD *v942;
  __int128 v943;
  _QWORD v944[2];
  __int16 v945;
  _QWORD *v946;
  llvm::Type *v947[2];
  unsigned __int8 *ExactLogBase2;
  llvm::ValueHandleBase *v949;
  __int16 v950;
  llvm::ConstantExpr *v951;
  unsigned int v952;
  __int16 v953;
  void *v954;
  llvm::ConstantExpr **v955;
  const char *v956;
  void *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  void *v962;
  uint64_t v963;
  _BYTE v964[360];
  _QWORD v965[40];
  void *v966;
  unsigned int v967;
  uint64_t v968;
  void *v969;
  __int16 v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t *v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  __int128 v978;
  const char *v979;
  __int128 *v980;
  __int16 v981;
  const char **v982;
  __int128 v983;
  uint64_t *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t **v987;
  unsigned __int8 *v988[4];

  v988[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)a1[6] + 608))(*(_QWORD *)a1[6], 32) != 2)
    goto LABEL_43;
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(*a1) != 1)
    goto LABEL_43;
  v4 = *(_QWORD **)(*a1 + 32);
  if (((*(_QWORD *)(*a1 + 40) - (_QWORD)v4) & 0x7FFFFFFF8) != 8)
    goto LABEL_43;
  v5 = *v4 + 40;
  v6 = -1;
  v7 = v5;
  do
  {
    v7 = *(_QWORD *)(v7 + 8);
    ++v6;
  }
  while (v7 != v5);
  if (v6 > 0x13)
    goto LABEL_43;
  LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a1);
  if (!LoopPredecessor)
    goto LABEL_43;
  v9 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
  if (v9 == (_QWORD *)((char *)LoopPredecessor + 40))
    goto LABEL_43;
  v10 = (uint64_t)(v9 - 3);
  if (!v9)
    v10 = 0;
  if (*(_BYTE *)(v10 + 16) == 30)
  {
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
      goto LABEL_43;
  }
  else
  {
    switch(*(_BYTE *)(v10 + 16))
    {
      case 0x1E:
LABEL_1415:
        __break(1u);
LABEL_1416:
        v43 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
LABEL_89:
        if (v43 == 1)
          goto LABEL_90;
        goto LABEL_80;
      case 0x1F:
        v22 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v22 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v22 = *(_DWORD *)(v10 + 80) + 1;
        break;
      default:
        goto LABEL_43;
    }
    if (v22 != 1)
      goto LABEL_43;
  }
  v11 = v9 == 0;
  v12 = *((_QWORD *)LoopPredecessor + 6);
  if (v12)
    v11 = v12 - 24 == v10;
  if (!v11)
    goto LABEL_43;
  if (!v9)
    goto LABEL_43;
  if (*(_BYTE *)(v10 + 16) != 30)
    goto LABEL_43;
  if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_43;
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(LoopPredecessor);
  if (!SinglePredecessor)
    goto LABEL_43;
  v1 = SinglePredecessor + 40;
  v2 = *(_QWORD *)(SinglePredecessor + 40);
  if (v2 == SinglePredecessor + 40)
    goto LABEL_43;
  if (v2)
    v14 = v2 - 24;
  else
    v14 = 0;
  v15 = *(unsigned __int8 *)(v14 + 16) - 40;
  if (v15 < 0xFFFFFFF5)
    v14 = 0;
  if (!v2)
    goto LABEL_43;
  v16 = *(_BYTE *)(v14 + 16) == 30 && v15 >= 0xFFFFFFF5;
  if (!v16 || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 1)
    goto LABEL_43;
  v17 = *a1;
  v18 = **(_QWORD **)(*a1 + 32);
  v20 = v18 + 40;
  v19 = *(_QWORD *)(v18 + 40);
  if (v19 == v18 + 40)
  {
    v21 = 0;
  }
  else
  {
    if (v19)
      v21 = v19 - 24;
    else
      v21 = 0;
    if (*(unsigned __int8 *)(v21 + 16) - 29 >= 0xB)
      v21 = 0;
  }
  v125 = *(_BYTE *)(v21 + 16) == 30 ? v21 : 0;
  v126 = sub_1C5B6DCD4(v125, **(_QWORD **)(*a1 + 32));
  if (!v126)
    goto LABEL_43;
  v127 = v126;
  if (*(_BYTE *)(v126 + 16) != 56)
    goto LABEL_43;
  v128 = *(_DWORD *)(v126 + 20);
  if ((v128 & 0x40000000) != 0)
    v129 = *(uint64_t **)(v126 - 8);
  else
    v129 = (uint64_t *)(v126 - 32 * (v128 & 0x7FFFFFF));
  v145 = *v129;
  if (*v129
    && ((v146 = *(unsigned __int8 *)(v145 + 16), v146 >= 0x1C) ? (v147 = v146 - 59 >= 0xFFFFFFEE) : (v147 = 0), v147))
  {
    if ((v128 & 0x40000000) != 0)
      v148 = *(_QWORD *)(v126 - 8);
    else
      v148 = v126 - 32 * (v128 & 0x7FFFFFF);
    v149 = (uint64_t *)(v148 + 32);
  }
  else
  {
    if ((v128 & 0x40000000) != 0)
      v149 = *(uint64_t **)(v126 - 8);
    else
      v149 = (uint64_t *)(v126 - 32 * (v128 & 0x7FFFFFF));
    v145 = v149[4];
    v146 = *(unsigned __int8 *)(v145 + 16);
    if (v146 < 0x1C || v146 - 41 > 0x11)
      goto LABEL_43;
  }
  v150 = *v149;
  if (*(_QWORD *)(v145 - 64) != *v149)
    goto LABEL_43;
  v151 = *(_QWORD *)(v145 - 32);
  if (!v151 || *(_BYTE *)(v151 + 16) != 16)
    goto LABEL_43;
  if (v146 == 41)
  {
    v247 = *(_DWORD *)(v151 + 32);
    if (v247)
    {
      v248 = (llvm::APInt *)(v151 + 24);
      if (v247 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(v248) != v247)
          goto LABEL_43;
      }
      else if (*(_QWORD *)v248 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v247)
      {
        goto LABEL_43;
      }
    }
  }
  else
  {
    if (v146 != 43)
      goto LABEL_43;
    v152 = (llvm::APInt *)(v151 + 24);
    v153 = *(_DWORD *)(v151 + 32);
    if (v153 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v152) != v153 - 1)
        goto LABEL_43;
    }
    else if (*(_QWORD *)v152 != 1)
    {
      goto LABEL_43;
    }
  }
  v927 = (llvm *)sub_1C5B6DD9C(v150, v127, v18);
  if (!v927)
    goto LABEL_43;
  for (i = *(_QWORD *)(v18 + 48); i != v20; i = *(_QWORD *)(i + 8))
  {
    v264 = i - 24;
    if (i)
      v265 = i - 24;
    else
      v265 = 0;
    if (*(_BYTE *)(v265 + 16) != 83)
      goto LABEL_788;
  }
  v264 = 0;
LABEL_788:
  for (j = v264 + 24; ; j = *(_QWORD *)(j + 8))
  {
    if (j == v20)
      goto LABEL_43;
    v395 = j - 24;
    if (!j)
      v395 = 0;
    v938 = (llvm::ConstantInt *)v395;
    if (*(_BYTE *)(v395 + 16) == 41)
    {
      v396 = *(_DWORD *)(v395 + 20);
      v397 = (v396 & 0x40000000) != 0 ? *(_QWORD *)(v395 - 8) : v395 - 32 * (v396 & 0x7FFFFFF);
      v398 = *(_QWORD *)(v397 + 32);
      if (v398 && *(_BYTE *)(v398 + 16) == 16)
      {
        v400 = (llvm::APInt *)(v398 + 24);
        v401 = *(_DWORD *)(v398 + 32);
        if (v401 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v400) != v401 - 1)
            continue;
        }
        else if (*(_QWORD *)v400 != 1)
        {
          continue;
        }
        v402 = (v396 & 0x40000000) != 0
             ? (uint64_t *)*((_QWORD *)v938 - 1)
             : (uint64_t *)((char *)v938 - 32 * (v396 & 0x7FFFFFF));
        v403 = sub_1C5B6DD9C(*v402, (uint64_t)v938, v18);
        if (v403)
        {
          v404 = *((_QWORD *)v938 + 1);
          if (v404)
            break;
        }
      }
    }
LABEL_800:
    ;
  }
  v405 = v403;
  while (*(_QWORD *)(*(_QWORD *)(v404 + 24) + 40) == v18)
  {
    v404 = *(_QWORD *)(v404 + 8);
    if (!v404)
      goto LABEL_800;
  }
  if (!j)
    goto LABEL_43;
  if (*(unsigned __int8 *)(v2 - 8) - 29 >= 0xB)
    v406 = 0;
  else
    v406 = v2 - 24;
  if (*(_BYTE *)(v406 + 16) == 30)
    v407 = v406;
  else
    v407 = 0;
  LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v17);
  if (!LoopPredecessor
    || (v408 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5), v408 == (_QWORD *)((char *)LoopPredecessor + 40)))
  {
LABEL_828:
    v409 = 0;
    goto LABEL_833;
  }
  if (v408)
    v10 = (uint64_t)(v408 - 3);
  else
    v10 = 0;
  if (*(_BYTE *)(v10 + 16) != 30)
  {
    v409 = 0;
    switch(*(_BYTE *)(v10 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_833;
      case 0x1E:
        goto LABEL_1415;
      case 0x1F:
        v410 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v410 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v410 = *(_DWORD *)(v10 + 80) + 1;
        break;
      default:
        goto LABEL_828;
    }
    if (v410 == 1)
      goto LABEL_832;
    goto LABEL_828;
  }
  if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_828;
LABEL_832:
  v409 = (uint64_t)LoopPredecessor;
LABEL_833:
  v411 = sub_1C5B6DCD4(v407, v409);
  v412 = (_QWORD *)v411;
  v413 = *((_DWORD *)v927 + 5);
  if ((v413 & 0x40000000) != 0)
    v414 = (_QWORD *)*((_QWORD *)v927 - 1);
  else
    v414 = (_QWORD *)((char *)v927 - 32 * (v413 & 0x7FFFFFF));
  if (v411 == *v414 || v411 == v414[4])
  {
    LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a1);
    if (LoopPredecessor)
    {
      v415 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
      if (v415 != (_QWORD *)((char *)LoopPredecessor + 40))
      {
        if (v415)
          v10 = (uint64_t)(v415 - 3);
        else
          v10 = 0;
        if (*(_BYTE *)(v10 + 16) == 30)
        {
          if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
            goto LABEL_845;
LABEL_849:
          v924 = LoopPredecessor;
LABEL_850:
          v417 = *(_QWORD *)v1;
          if (*(_QWORD *)v1 == v1)
          {
            v919 = 0;
            sub_1C4773D54((uint64_t)&v954, 0, 0, 0, 0);
          }
          else
          {
            if (v417)
              v418 = v417 - 24;
            else
              v418 = 0;
            if (*(unsigned __int8 *)(v418 + 16) - 29 >= 0xB)
              v418 = 0;
            v919 = (llvm::PHINode *)v418;
            sub_1C4773D54((uint64_t)&v954, v418, 0, 0, 0);
          }
          *(_QWORD *)&v978 = v412;
          *(_QWORD *)&v943 = *v412;
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v960 + 56) + 40), 53, (uint64_t *)&v943, 1);
          v420 = 0;
          if (Declaration)
            v420 = *(uint64_t ***)(Declaration + 24);
          v970 = 257;
          v421 = sub_1C4774778((uint64_t *)&v954, v420, Declaration, (uint64_t *)&v978, 1, (uint64_t)&v966, 0);
          v422 = *(void **)(j + 24);
          v966 = v422;
          if (v422)
            llvm::MetadataTracking::track((uint64_t)&v966, (unsigned __int8 *)v422, 2);
          v423 = (unsigned __int8 **)(v421 + 48);
          if (&v966 == (void **)(v421 + 48))
          {
            if (v966)
              llvm::MetadataTracking::untrack((uint64_t)&v966, (unsigned __int8 *)v966);
          }
          else
          {
            if (*v423)
              llvm::MetadataTracking::untrack(v421 + 48, *v423);
            v424 = (unsigned __int8 *)v966;
            *v423 = (unsigned __int8 *)v966;
            if (v424)
              llvm::MetadataTracking::retrack((uint64_t)&v966, v424, v421 + 48);
          }
          v425 = *(_QWORD *)v405;
          v970 = 257;
          v931 = sub_1C4773690((uint64_t *)&v954, (unsigned __int8 *)v421, v425, (uint64_t)&v966);
          if (v931 != (unsigned __int8 *)v421)
          {
            v426 = *(unsigned __int8 **)(j + 24);
            *(_QWORD *)&v940 = v426;
            if (v426)
              llvm::MetadataTracking::track((uint64_t)&v940, v426, 2);
            v427 = (unsigned __int8 **)(v931 + 48);
            if (&v940 == (__int128 *)(v931 + 48))
            {
              if ((_QWORD)v940)
                llvm::MetadataTracking::untrack((uint64_t)&v940, (unsigned __int8 *)v940);
            }
            else
            {
              if (*v427)
                llvm::MetadataTracking::untrack((uint64_t)(v931 + 48), *v427);
              v428 = (unsigned __int8 *)v940;
              *v427 = (unsigned __int8 *)v940;
              if (v428)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v940, v428, (uint64_t)v427);
                *(_QWORD *)&v940 = 0;
              }
            }
          }
          v429 = *(_DWORD *)(v405 + 20);
          v430 = v429 & 0x7FFFFFF;
          if ((v429 & 0x7FFFFFF) != 0)
          {
            v431 = 0;
            while (1)
            {
              v432 = v405 - 32 * v430;
              if ((v429 & 0x40000000) != 0)
                v432 = *(_QWORD *)(v405 - 8);
              if (*(llvm::BasicBlock **)(v432 + 32 * *(unsigned int *)(v405 + 60) + 8 * v431) == v924)
                break;
              if (v430 == ++v431)
                goto LABEL_881;
            }
          }
          else
          {
LABEL_881:
            LODWORD(v431) = -1;
          }
          if ((v429 & 0x40000000) != 0)
            v433 = *(_QWORD *)(v405 - 8);
          else
            v433 = v405 - 32 * v430;
          v434 = *(_QWORD *)(v433 + 32 * v431);
          if (v434)
            v435 = *(_BYTE *)(v434 + 16) == 16;
          else
            v435 = 0;
          if (!v435)
          {
LABEL_888:
            v981 = 257;
            v436 = (__int128 *)(*(uint64_t (**)(void *, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v962 + 16))(v962, v931, v434, 0, 0);
            if (v436)
              goto LABEL_895;
            v970 = 257;
            v437 = (char *)operator new(0x80uLL);
            v438 = v437;
            *(_QWORD *)v437 = 0;
            *((_QWORD *)v437 + 2) = 0;
            *((_QWORD *)v437 + 1) = 0;
            *((_QWORD *)v437 + 5) = 0;
            *((_QWORD *)v437 + 6) = 0;
            *((_QWORD *)v437 + 4) = 0;
            *((_QWORD *)v437 + 8) = *(_QWORD *)v931;
            v436 = (__int128 *)(v437 + 64);
            *((_QWORD *)v437 + 3) = v437 + 64;
            *((_QWORD *)v437 + 7) = v437 + 64;
            *((_QWORD *)v437 + 9) = 0;
            v437[80] = 41;
            v437[81] = 0;
            *((_WORD *)v437 + 41) = 0;
            *((_DWORD *)v437 + 21) = 2;
            *((_DWORD *)v437 + 30) = 0;
            *(_OWORD *)(v437 + 104) = 0u;
            *(_OWORD *)(v437 + 88) = 0u;
            *(_QWORD *)v437 = v931;
            v439 = v931 + 8;
            v440 = *((_QWORD *)v931 + 1);
            *((_QWORD *)v437 + 1) = v440;
            if (v440)
              *(_QWORD *)(v440 + 16) = v437 + 8;
            *((_QWORD *)v437 + 2) = v439;
            *v439 = v437;
            if (*((_QWORD *)v437 + 4))
            {
              **((_QWORD **)v437 + 6) = *((_QWORD *)v437 + 5);
              v905 = *((_QWORD *)v437 + 5);
              if (v905)
                *(_QWORD *)(v905 + 16) = *((_QWORD *)v437 + 6);
            }
            *((_QWORD *)v437 + 4) = v434;
            v443 = *(_QWORD *)(v434 + 8);
            v442 = (_QWORD *)(v434 + 8);
            v441 = v443;
            *((_QWORD *)v437 + 5) = v443;
            if (v443)
              *(_QWORD *)(v441 + 16) = v437 + 40;
            *((_QWORD *)v437 + 6) = v442;
            *v442 = v437 + 32;
            llvm::Value::setName((uint64_t ***)v437 + 8, (uint64_t)&v966);
            (*(void (**)(uint64_t, __int128 *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v963 + 16))(v963, v436, &v978, v960, v961);
            if (!(_DWORD)v955)
            {
LABEL_895:
              v444 = *(unsigned __int8 **)(j + 24);
              *(_QWORD *)&v943 = v444;
              if (v444)
                llvm::MetadataTracking::track((uint64_t)&v943, v444, 2);
              v445 = (unsigned __int8 **)(v436 + 3);
              if (&v943 == v436 + 3)
              {
                if ((_QWORD)v943)
                  llvm::MetadataTracking::untrack((uint64_t)&v943, (unsigned __int8 *)v943);
              }
              else
              {
                if (*v445)
                  llvm::MetadataTracking::untrack((uint64_t)(v436 + 3), *v445);
                v446 = (unsigned __int8 *)v943;
                *v445 = (unsigned __int8 *)v943;
                if (v446)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v943, v446, (uint64_t)(v436 + 3));
                  *(_QWORD *)&v943 = 0;
                }
              }
              goto LABEL_906;
            }
            v495 = (char *)v954;
            v496 = (char *)v954 + 16 * v955;
            v497 = (unsigned __int8 **)(v438 + 112);
            while (2)
            {
              v498 = *(_DWORD *)v495;
              v499 = (unsigned __int8 *)*((_QWORD *)v495 + 1);
              if (v499)
              {
                if (v498)
                  goto LABEL_966;
                *(_QWORD *)&v943 = *((_QWORD *)v495 + 1);
                llvm::MetadataTracking::track((uint64_t)&v943, v499, 2);
                v500 = *v497;
LABEL_970:
                if (v500)
                  llvm::MetadataTracking::untrack((uint64_t)(v438 + 112), v500);
                v501 = (unsigned __int8 *)v943;
                *v497 = (unsigned __int8 *)v943;
                if (v501)
                  llvm::MetadataTracking::retrack((uint64_t)&v943, v501, (uint64_t)(v438 + 112));
              }
              else
              {
                v500 = *v497;
                if (*v497 || (v438[87] & 0x20) != 0)
                {
                  if (!v498)
                  {
                    *(_QWORD *)&v943 = 0;
                    goto LABEL_970;
                  }
LABEL_966:
                  llvm::Value::setMetadata((llvm::Value *)v436, *(_DWORD *)v495, (llvm::MDNode *)v499);
                }
              }
              v495 += 16;
              if (v495 == v496)
                goto LABEL_895;
              continue;
            }
          }
          v447 = (llvm::APInt *)(v434 + 24);
          v448 = *(_DWORD *)(v434 + 32);
          if (v448 > 0x40)
          {
            v436 = (__int128 *)v931;
            if (llvm::APInt::countLeadingZerosSlowCase(v447) != v448)
              goto LABEL_888;
          }
          else
          {
            v436 = (__int128 *)v931;
            if (*(_QWORD *)v447)
              goto LABEL_888;
          }
LABEL_906:
          v449 = (uint64_t *)((char *)v919 - 96);
          v450 = *((_QWORD *)v919 - 12);
          v451 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v931, 0, 0);
          v452 = *(_QWORD **)(v450 - 64);
          if (v452 == v412)
            v453 = (uint64_t)v931;
          else
            v453 = (uint64_t)v451;
          if (v452 == v412)
            v454 = (uint64_t)v451;
          else
            v454 = (uint64_t)v931;
          v455 = *(_WORD *)(v450 + 18) & 0x3F;
          v970 = 257;
          v456 = sub_1C4774B48((uint64_t)&v954, v455, v453, v454, (uint64_t)&v966);
          if (*v449)
          {
            **((_QWORD **)v919 - 10) = *((_QWORD *)v919 - 11);
            v457 = *((_QWORD *)v919 - 11);
            if (v457)
              *(_QWORD *)(v457 + 16) = *((_QWORD *)v919 - 10);
          }
          *v449 = v456;
          if (v456)
          {
            v460 = *(_QWORD *)(v456 + 8);
            v458 = (uint64_t **)(v456 + 8);
            v459 = v460;
            *((_QWORD *)v919 - 11) = v460;
            if (v460)
              *(_QWORD *)(v459 + 16) = (char *)v919 - 88;
            *((_QWORD *)v919 - 10) = v458;
            *v458 = v449;
          }
          v461 = (uint64_t *)a1[5];
          v980 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions(v450, v461, 0, &v978);
          v462 = v980;
          if (v980 == &v978)
          {
            v463 = (void (**)(__int128 *))(v978 + 32);
            v462 = &v978;
            goto LABEL_923;
          }
          if (v980)
          {
            v463 = (void (**)(__int128 *))(*(_QWORD *)v980 + 40);
LABEL_923:
            (*v463)(v462);
          }
          v464 = **(llvm::BasicBlock ***)(*a1 + 32);
          v465 = (_QWORD *)*((_QWORD *)v464 + 5);
          if (v465 == (_QWORD *)((char *)v464 + 40))
          {
            v466 = 0;
          }
          else
          {
            if (v465)
              v467 = v465 - 3;
            else
              v467 = 0;
            if (*((unsigned __int8 *)v467 + 16) - 29 >= 0xB)
              v466 = 0;
            else
              v466 = v467;
          }
          v468 = *(v466 - 12);
          v469 = *(llvm::ConstantInt **)v931;
          v966 = "tcphi";
          v970 = 259;
          v470 = (uint64_t *)*((_QWORD *)v464 + 6);
          v471 = operator new(0x48uLL);
          v472 = v471;
          v471[1] = v469;
          v473 = (llvm::Value *)(v471 + 1);
          *v471 = 0;
          v471[2] = 0;
          v471[3] = 0x4000000000000053;
          *((_OWORD *)v471 + 2) = 0u;
          v474 = (char *)(v471 + 4);
          *((_OWORD *)v471 + 3) = 0u;
          *((_DWORD *)v471 + 16) = 0;
          if (v470)
          {
            v638 = v470[2];
            v471[6] = v638;
            *(_WORD *)(v638 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v471 + 31) & 0x10) != 0)
            {
              v794 = *(_QWORD *)(v638 + 56);
              if (v794)
              {
                v795 = *(llvm::ValueSymbolTable **)(v794 + 104);
                if (v795)
                  llvm::ValueSymbolTable::reinsertValue(v795, v473);
              }
            }
            v639 = *v470;
            v472[4] = *v470;
            v472[5] = v470;
            *(_QWORD *)(v639 + 8) = v474;
            *v470 = (uint64_t)v474;
          }
          *((_DWORD *)v472 + 17) = 2;
          llvm::Value::setName((uint64_t ***)v473, (uint64_t)&v966);
          v475 = *((unsigned int *)v472 + 17);
          v476 = operator new(40 * v475);
          *v472 = v476;
          if ((_DWORD)v475)
          {
            v477 = &v476[4 * v475];
            do
            {
              *v476 = 0;
              v476[1] = 0;
              v476[2] = 0;
              v476[3] = v473;
              v476 += 4;
            }
            while (v476 != v477);
          }
          v960 = *(_QWORD *)(v468 + 40);
          v961 = v468 + 24;
          v478 = *(void **)(v468 + 48);
          v966 = v478;
          if (v478)
          {
            llvm::MetadataTracking::track((uint64_t)&v966, (unsigned __int8 *)v478, 2);
            v479 = v966;
          }
          else
          {
            v479 = 0;
          }
          sub_1C4774EF4((uint64_t)&v954, 0, (uint64_t)v479);
          if (v966)
            llvm::MetadataTracking::untrack((uint64_t)&v966, (unsigned __int8 *)v966);
          v480 = llvm::ConstantInt::get(v469, 1, 0);
          v966 = "tcdec";
          v970 = 259;
          v481 = sub_1C47733F8((uint64_t)&v954, (uint64_t)v473, (uint64_t)v480, (uint64_t)&v966, 0, 1);
          sub_1C477667C(v473, (uint64_t)v931, (uint64_t)v924);
          sub_1C477667C(v473, v481, (uint64_t)v464);
          v482 = (uint64_t *)(v468 - 64);
          v483 = *(_QWORD *)(v468 - 64);
          if ((llvm::BasicBlock *)*(v466 - 4) == v464)
            v484 = 34;
          else
            v484 = 41;
          *(_WORD *)(v468 + 18) = *(_WORD *)(v468 + 18) & 0xFFC0 | v484;
          if (v483)
          {
            **(_QWORD **)(v468 - 48) = *(_QWORD *)(v468 - 56);
            v485 = *(_QWORD *)(v468 - 56);
            if (v485)
              *(_QWORD *)(v485 + 16) = *(_QWORD *)(v468 - 48);
          }
          *v482 = v481;
          if (v481)
          {
            v488 = *(_QWORD *)(v481 + 8);
            v487 = (uint64_t **)(v481 + 8);
            v486 = v488;
            *(_QWORD *)(v468 - 56) = v488;
            if (v488)
              *(_QWORD *)(v486 + 16) = v468 - 56;
            *(_QWORD *)(v468 - 48) = v487;
            *v487 = v482;
          }
          v489 = llvm::ConstantInt::get(v469, 0, 0);
          v490 = (llvm::Value ***)(v468 - 32);
          if (*(_QWORD *)(v468 - 32))
          {
            **(_QWORD **)(v468 - 16) = *(_QWORD *)(v468 - 24);
            v491 = *(_QWORD *)(v468 - 24);
            if (v491)
              *(_QWORD *)(v491 + 16) = *(_QWORD *)(v468 - 16);
          }
          *v490 = v489;
          if (v489)
          {
            v494 = v489[1];
            v492 = (llvm::Value ****)(v489 + 1);
            v493 = v494;
            *(_QWORD *)(v468 - 24) = v494;
            if (v494)
              *((_QWORD *)v493 + 2) = v468 - 24;
            *(_QWORD *)(v468 - 16) = v492;
            *v492 = v490;
          }
          llvm::Value::replaceUsesOutsideBlock(v938, (llvm::Value *)v436, v464);
          llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[4], (const llvm::Loop *)*a1);
          if (v954 != &v956)
            free(v954);
          return 1;
        }
        v924 = 0;
        switch(*(_BYTE *)(v10 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_850;
          case 0x1E:
            goto LABEL_1415;
          case 0x1F:
            v416 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
            v416 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x27:
            v416 = *(_DWORD *)(v10 + 80) + 1;
            break;
          default:
            goto LABEL_845;
        }
        if (v416 == 1)
          goto LABEL_849;
      }
    }
LABEL_845:
    v924 = 0;
    goto LABEL_850;
  }
LABEL_43:
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(*a1) == 1)
  {
    v23 = *a1;
    v24 = *(uint64_t **)(*a1 + 32);
    if (((*(_QWORD *)(*a1 + 40) - (_QWORD)v24) & 0x7FFFFFFF8) == 8)
    {
      v25 = (const llvm::Value *)a1[7];
      v1 = *v24;
      v2 = *v24 + 40;
      v26 = *(_QWORD *)v2;
      if (*(_QWORD *)v2 == v2)
      {
        v27 = 0;
      }
      else
      {
        if (v26)
          v27 = v26 - 24;
        else
          v27 = 0;
        if (*(unsigned __int8 *)(v27 + 16) - 29 >= 0xB)
          v27 = 0;
      }
      v28 = *(_BYTE *)(v27 + 16) == 30 ? v27 : 0;
      v29 = sub_1C5B6DCD4(v28, v1);
      if (v29)
      {
        v30 = v29;
        v31 = *(unsigned __int8 *)(v29 + 16);
        v32 = v31 < 0x1C || v31 - 53 > 2;
        if (!v32)
        {
          v33 = v31 == 53 ? 54 : 52;
          v932 = v33;
          v34 = *(_DWORD *)(v29 + 20);
          v35 = (v34 & 0x40000000) != 0 ? *(_QWORD *)(v29 - 8) : v29 - 32 * (v34 & 0x7FFFFFF);
          v36 = *(_QWORD *)(v35 + 32);
          if (v36 && *(_BYTE *)(v36 + 16) == 16)
          {
            v40 = (llvm::APInt *)(v36 + 24);
            v41 = *(_DWORD *)(v36 + 32);
            if (v41 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v40) != v41 - 1)
                goto LABEL_71;
            }
            else if (*(_QWORD *)v40 != 1)
            {
              goto LABEL_71;
            }
            v42 = (v34 & 0x40000000) != 0 ? *(uint64_t **)(v30 - 8) : (uint64_t *)(v30 - 32 * (v34 & 0x7FFFFFF));
            v55 = sub_1C5B6DD9C(*v42, v30, v1);
            if (v55)
            {
              v56 = v55;
              LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v23);
              if (LoopPredecessor)
              {
                v57 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
                if (v57 != (_QWORD *)((char *)LoopPredecessor + 40))
                {
                  v58 = v57 - 3;
                  if (!v57)
                    v58 = 0;
                  v59 = *((unsigned __int8 *)v58 + 16);
                  v60 = v59 - 29;
                  if (v59 == 30)
                  {
                    if ((*((_DWORD *)v58 + 5) & 0x7FFFFFF) == 3)
                      goto LABEL_127;
LABEL_131:
                    v10 = (uint64_t)LoopPredecessor;
LABEL_132:
                    v62 = *(_DWORD *)(v56 + 20);
                    v63 = v62 & 0x7FFFFFF;
                    if ((v62 & 0x7FFFFFF) != 0)
                    {
                      v64 = 0;
                      while (1)
                      {
                        v65 = v56 - 32 * v63;
                        if ((v62 & 0x40000000) != 0)
                          v65 = *(_QWORD *)(v56 - 8);
                        if (*(_QWORD *)(v65 + 32 * *(unsigned int *)(v56 + 60) + 8 * v64) == v10)
                          break;
                        if (v63 == ++v64)
                          goto LABEL_138;
                      }
                    }
                    else
                    {
LABEL_138:
                      LODWORD(v64) = -1;
                    }
                    if ((v62 & 0x40000000) != 0)
                      v66 = *(_QWORD *)(v56 - 8);
                    else
                      v66 = v56 - 32 * v63;
                    v925 = *(llvm **)(v66 + 32 * v64);
                    if (*(_BYTE *)(v30 + 16) == 55
                      && !llvm::isKnownNonNegative(v925, v25, 0, 0, 0, 0, (const llvm::DominatorTree *)1))
                    {
                      goto LABEL_71;
                    }
                    for (k = *(_QWORD *)(v1 + 48); k != v2; k = *(_QWORD *)(k + 8))
                    {
                      v68 = k - 24;
                      if (k)
                        v69 = k - 24;
                      else
                        v69 = 0;
                      if (*(_BYTE *)(v69 + 16) != 83)
                        goto LABEL_427;
                    }
                    v68 = 0;
LABEL_427:
                    v195 = v68 + 24;
                    if (v68 + 24 == v2)
                      goto LABEL_71;
                    while (2)
                    {
                      if (v195)
                        v196 = v195 - 24;
                      else
                        v196 = 0;
                      if (*(_BYTE *)(v196 + 16) != 41
                        || ((v197 = *(_DWORD *)(v196 + 20), (v197 & 0x40000000) != 0)
                          ? (v198 = *(_QWORD *)(v196 - 8))
                          : (v198 = v196 - 32 * (v197 & 0x7FFFFFF)),
                            (v199 = *(_QWORD *)(v198 + 32)) != 0 ? (v200 = *(_BYTE *)(v199 + 16) == 16) : (v200 = 0),
                            !v200))
                      {
LABEL_455:
                        v195 = *(_QWORD *)(v195 + 8);
                        if (v195 == v2)
                          goto LABEL_71;
                        continue;
                      }
                      break;
                    }
                    v201 = (llvm::APInt *)(v199 + 24);
                    v202 = *(_DWORD *)(v199 + 32);
                    if (v202 > 0x40)
                    {
                      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v199 + 24)) != v202 - 1
                        && llvm::APInt::countTrailingOnesSlowCase(v201) != v202)
                      {
                        goto LABEL_455;
                      }
                    }
                    else
                    {
                      v203 = *(_QWORD *)v201;
                      if (v202)
                        v204 = v203 == 1;
                      else
                        v204 = 1;
                      if (!v204 && v203 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v202)
                        goto LABEL_455;
                    }
                    if ((v197 & 0x40000000) != 0)
                      v206 = *(uint64_t **)(v196 - 8);
                    else
                      v206 = (uint64_t *)(v196 - 32 * (v197 & 0x7FFFFFF));
                    v207 = sub_1C5B6DD9C(*v206, v196, v1);
                    if (v207)
                    {
                      v208 = (_DWORD *)v207;
                      v209 = *(_QWORD *)(v207 + 8);
                      if (v209)
                      {
                        v2 = 76;
                        do
                        {
                          v210 = *a1;
                          v211 = sub_1C477672C(*a1 + 56, *(_QWORD *)(*(_QWORD *)(v209 + 24) + 40));
                          v212 = *(_QWORD *)(v210 + 64);
                          if (v212 == *(_QWORD *)(v210 + 56))
                            v213 = 76;
                          else
                            v213 = 72;
                          v214 = (_QWORD *)(v212 + 8 * *(unsigned int *)(v210 + v213));
                          v215 = v211 == v214;
                          if (v211 == v214)
                            break;
                          v209 = *(_QWORD *)(v209 + 8);
                        }
                        while (v209);
                      }
                      else
                      {
                        v215 = 0;
                      }
                      v216 = *(_QWORD *)(v196 + 8);
                      if (v216)
                      {
                        v2 = 76;
                        while (1)
                        {
                          v217 = *a1;
                          v218 = sub_1C477672C(*a1 + 56, *(_QWORD *)(*(_QWORD *)(v216 + 24) + 40));
                          v219 = *(_QWORD *)(v217 + 64);
                          v220 = v219 == *(_QWORD *)(v217 + 56) ? 76 : 72;
                          if (v218 == (_QWORD *)(v219 + 8 * *(unsigned int *)(v217 + v220)))
                            break;
                          v216 = *(_QWORD *)(v216 + 8);
                          if (!v216)
                            goto LABEL_475;
                        }
                        if (v215)
                          goto LABEL_71;
                      }
LABEL_475:
                      LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a1);
                      if (LoopPredecessor)
                      {
                        v222 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
                        if (v222 != (_QWORD *)((char *)LoopPredecessor + 40))
                        {
                          if (v222)
                            v10 = (uint64_t)(v222 - 3);
                          else
                            v10 = 0;
                          if (*(_BYTE *)(v10 + 16) == 30)
                          {
                            if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
                              goto LABEL_482;
LABEL_486:
                            v1 = (uint64_t)LoopPredecessor;
LABEL_487:
                            if (!v215)
                            {
                              v224 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v1);
                              if (!v224)
                                goto LABEL_71;
                              v225 = *(_QWORD *)(v224 + 40);
                              if (v225 == v224 + 40)
                                goto LABEL_71;
                              v226 = v225 ? v225 - 24 : 0;
                              v227 = *(unsigned __int8 *)(v226 + 16) - 40;
                              v228 = v227 >= 0xFFFFFFF5 ? v226 : 0;
                              if (!v225)
                                goto LABEL_71;
                              v229 = *(_BYTE *)(v228 + 16) == 30 && v227 >= 0xFFFFFFF5;
                              if (!v229 || (llvm *)sub_1C5B6DCD4(v228, v1) != v925)
                                goto LABEL_71;
                            }
                            v922 = (llvm::BasicBlock *)v1;
                            v947[0] = v925;
                            v947[1] = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v925, (llvm::LLVMContext *)!v215, v221);
                            llvm::BasicBlock::instructionsWithoutDebug(**(llvm::BasicBlock ***)(*a1 + 32), 1, (uint64_t)&v978);
                            v943 = v978;
                            v230 = v944;
                            if (v982)
                            {
                              if (v982 == &v979)
                              {
                                v946 = v944;
                                (*((void (**)(void))*v982 + 3))();
                              }
                              else
                              {
                                v946 = (_QWORD *)(*((uint64_t (**)(void))*v982 + 2))();
                              }
                            }
                            else
                            {
                              v946 = 0;
                            }
                            v940 = v983;
                            v231 = v941;
                            if (v987)
                            {
                              if (v987 == &v984)
                              {
                                v942 = v941;
                                ((void (*)(void))(*v987)[3])();
                              }
                              else
                              {
                                v942 = (_WORD *)((uint64_t (*)(void))(*v987)[2])();
                              }
                            }
                            else
                            {
                              v942 = 0;
                            }
                            v232 = sub_1C534FAE4(&v943, &v940);
                            if (v942 == v941)
                            {
                              v233 = 4;
                              goto LABEL_517;
                            }
                            if (v942)
                            {
                              v233 = 5;
                              v231 = v942;
LABEL_517:
                              (*(void (**)(_QWORD *))(*v231 + 8 * v233))(v231);
                            }
                            if (v946 == v944)
                            {
                              v234 = 4;
                              goto LABEL_522;
                            }
                            if (v946)
                            {
                              v234 = 5;
                              v230 = v946;
LABEL_522:
                              (*(void (**)(_QWORD *))(*v230 + 8 * v234))(v230);
                            }
                            llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v954, v932, *(_QWORD *)v925, (uint64_t *)v947, 2);
                            v235 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)a1[6] + 952))(*(_QWORD *)a1[6], &v954, 3);
                            if (v232 != 6)
                            {
                              v237 = v235 > 1;
                              if (v236)
                                v237 = v236 > 0;
                              if (v237)
                              {
                                v238 = 0;
                                goto LABEL_528;
                              }
                            }
                            v243 = (llvm::BasicBlock *)*((_QWORD *)v922 + 5);
                            if (v243 == (llvm::BasicBlock *)((char *)v922 + 40))
                            {
                              v244 = 0;
                            }
                            else
                            {
                              if (v243)
                                v249 = (uint64_t)v243 - 24;
                              else
                                v249 = 0;
                              if (*(unsigned __int8 *)(v249 + 16) - 29 >= 0xB)
                                v244 = 0;
                              else
                                v244 = v249;
                            }
                            sub_1C4773D54((uint64_t)&v966, v244, 0, 0, 0);
                            v250 = 0;
                            v251 = *(llvm::Type **)(v30 + 48);
                            v939 = v251;
                            if (v251)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v939, (unsigned __int8 *)v251, 2);
                              v250 = v939;
                            }
                            sub_1C4774EF4((uint64_t)&v966, 0, (uint64_t)v250);
                            if (v939)
                              llvm::MetadataTracking::untrack((uint64_t)&v939, (unsigned __int8 *)v939);
                            if (v215)
                            {
                              v253 = *(unsigned __int8 *)(v30 + 16);
                              if (v253 == 54)
                              {
                                v953 = 257;
                                v266 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v925, 1, 0);
                                v255 = sub_1C506ED1C((uint64_t)&v966, (uint64_t)v925, (uint64_t)v266, (uint64_t)&v951, 0);
                              }
                              else
                              {
                                v953 = 257;
                                if (v253 == 55)
                                {
                                  v254 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v925, 1, 0);
                                  v255 = sub_1C534E5D8((uint64_t)&v966, (uint64_t)v925, (uint64_t)v254, (uint64_t)&v951, 0);
                                }
                                else
                                {
                                  v267 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v925, 1, 0);
                                  v255 = sub_1C506E874((uint64_t)&v966, (uint64_t)v925, (uint64_t)v267, (uint64_t)&v951, 0, 0);
                                }
                              }
                              v925 = (llvm *)v255;
                            }
                            ExactLogBase2 = (unsigned __int8 *)v925;
                            v949 = 0;
                            v268 = *(llvm::ConstantInt **)(*v974 + 1888);
                            v269 = *(_DWORD *)(*v974 + 1896);
                            v952 = v269 >> 8;
                            if (v269 >> 8 > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v951, !v215, 0);
                            }
                            else
                            {
                              if (v269 <= 0xFF)
                                v270 = 0;
                              else
                                v270 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v269);
                              v951 = (llvm::ConstantExpr *)(v270 & !v215);
                            }
                            v271 = llvm::ConstantInt::get(v268, (llvm::LLVMContext *)&v951, v252);
                            if (v952 >= 0x41 && v951)
                              MEMORY[0x1CAA32F9C](v951, 0x1000C8000313F17);
                            v949 = v271;
                            v988[0] = 0;
                            v988[0] = *(unsigned __int8 **)v925;
                            v272 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v972 + 56) + 40), v932, (uint64_t *)v988, 1);
                            v273 = 0;
                            if (v272)
                              v273 = *(uint64_t ***)(v272 + 24);
                            v953 = 257;
                            v274 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)&v966, v273, v272, (uint64_t *)&ExactLogBase2, 2, (uint64_t)&v951, 0);
                            v275 = *(llvm::ConstantExpr **)(v30 + 48);
                            v951 = v275;
                            if (v275)
                              llvm::MetadataTracking::track((uint64_t)&v951, (unsigned __int8 *)v275, 2);
                            v276 = (unsigned __int8 **)(v274 + 6);
                            if (&v951 == v274 + 6)
                            {
                              if (v951)
                                llvm::MetadataTracking::untrack((uint64_t)&v951, (unsigned __int8 *)v951);
                            }
                            else
                            {
                              if (*v276)
                                llvm::MetadataTracking::untrack((uint64_t)(v274 + 6), *v276);
                              v277 = (unsigned __int8 *)v951;
                              *v276 = (unsigned __int8 *)v951;
                              if (v277)
                                llvm::MetadataTracking::retrack((uint64_t)&v951, v277, (uint64_t)(v274 + 6));
                            }
                            v937 = *v274;
                            v278 = llvm::ConstantInt::get(*v274, (unint64_t)*((unsigned int *)*v274 + 2) >> 8, 0);
                            v953 = 257;
                            v279 = sub_1C47733F8((uint64_t)&v966, (uint64_t)v278, (uint64_t)v274, (uint64_t)&v951, 0, 0);
                            v280 = (llvm::Value *)v279;
                            if (!v215)
                              goto LABEL_615;
                            v281 = llvm::ConstantInt::get(v937, 1, 0);
                            v950 = 257;
                            v280 = (llvm::Value *)(*(uint64_t (**)(void *, uint64_t, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v975 + 16))(v975, v279, v281, 0, 0);
                            if (v280)
                              goto LABEL_615;
                            v953 = 257;
                            v282 = (char *)operator new(0x80uLL);
                            v283 = v282;
                            *(_QWORD *)v282 = 0;
                            *((_QWORD *)v282 + 2) = 0;
                            *((_QWORD *)v282 + 1) = 0;
                            *((_QWORD *)v282 + 5) = 0;
                            *((_QWORD *)v282 + 6) = 0;
                            *((_QWORD *)v282 + 4) = 0;
                            v284 = (llvm::Value ***)(v282 + 32);
                            *((_QWORD *)v282 + 8) = *(_QWORD *)v279;
                            v280 = (llvm::Value *)(v282 + 64);
                            *((_QWORD *)v282 + 3) = v282 + 64;
                            *((_QWORD *)v282 + 7) = v282 + 64;
                            *((_QWORD *)v282 + 9) = 0;
                            v282[80] = 41;
                            v282[81] = 0;
                            *((_WORD *)v282 + 41) = 0;
                            *((_DWORD *)v282 + 21) = 2;
                            *((_DWORD *)v282 + 30) = 0;
                            *(_OWORD *)(v282 + 104) = 0u;
                            *(_OWORD *)(v282 + 88) = 0u;
                            *(_QWORD *)v282 = v279;
                            v285 = (_QWORD *)(v279 + 8);
                            v286 = *(_QWORD *)(v279 + 8);
                            *((_QWORD *)v282 + 1) = v286;
                            if (v286)
                              *(_QWORD *)(v286 + 16) = v282 + 8;
                            *((_QWORD *)v282 + 2) = v285;
                            *v285 = v282;
                            if (*((_QWORD *)v282 + 4))
                            {
                              **((_QWORD **)v282 + 6) = *((_QWORD *)v282 + 5);
                              v903 = *((_QWORD *)v282 + 5);
                              if (v903)
                                *(_QWORD *)(v903 + 16) = *((_QWORD *)v282 + 6);
                            }
                            *v284 = v281;
                            if (v281)
                            {
                              v289 = v281[1];
                              v288 = (llvm::Value ****)(v281 + 1);
                              v287 = v289;
                              *((_QWORD *)v282 + 5) = v289;
                              if (v289)
                                *((_QWORD *)v287 + 2) = v282 + 40;
                              *((_QWORD *)v282 + 6) = v288;
                              *v288 = v284;
                            }
                            llvm::Value::setName((uint64_t ***)v282 + 8, (uint64_t)&v951);
                            (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v976 + 16))(v976, v280, &ExactLogBase2, v972, v973);
                            if (!v967)
                            {
LABEL_615:
                              v290 = *(_QWORD *)v196;
                              v953 = 257;
                              v918 = (llvm::PHINode *)sub_1C4773690((uint64_t *)&v966, (unsigned __int8 *)v279, v290, (uint64_t)&v951);
                              v291 = v208[5];
                              v292 = v291 & 0x7FFFFFF;
                              if ((v291 & 0x7FFFFFF) != 0)
                              {
                                v293 = 0;
                                while (1)
                                {
                                  v294 = &v208[-8 * v292];
                                  if ((v291 & 0x40000000) != 0)
                                    v294 = (_DWORD *)*((_QWORD *)v208 - 1);
                                  if (*(llvm::BasicBlock **)&v294[8 * v208[15] + 2 * v293] == v922)
                                    break;
                                  if (v292 == ++v293)
                                    goto LABEL_621;
                                }
                              }
                              else
                              {
LABEL_621:
                                LODWORD(v293) = -1;
                              }
                              if ((v291 & 0x40000000) != 0)
                                v295 = (_DWORD *)*((_QWORD *)v208 - 1);
                              else
                                v295 = &v208[-8 * v292];
                              v296 = *(_QWORD *)&v295[8 * v293];
                              v297 = *(_DWORD *)(v196 + 20);
                              if ((v297 & 0x40000000) != 0)
                                v298 = *(_QWORD *)(v196 - 8);
                              else
                                v298 = v196 - 32 * (v297 & 0x7FFFFFF);
                              v299 = *(_QWORD *)(v298 + 32);
                              v300 = (llvm::APInt *)(v299 + 24);
                              v301 = *(_DWORD *)(v299 + 32);
                              if (v301 <= 0x40)
                              {
                                if (*(_QWORD *)v300 != 1)
                                  goto LABEL_629;
LABEL_631:
                                if (*(_BYTE *)(v296 + 16) == 16 && v296 != 0)
                                {
                                  v340 = (llvm::APInt *)(v296 + 24);
                                  v341 = *(_DWORD *)(v296 + 32);
                                  if (v341 > 0x40)
                                  {
                                    if (llvm::APInt::countLeadingZerosSlowCase(v340) == v341)
                                      goto LABEL_644;
                                  }
                                  else if (!*(_QWORD *)v340)
                                  {
                                    goto LABEL_644;
                                  }
                                }
                                v950 = 257;
                                v303 = (llvm::Value *)(*(uint64_t (**)(void *, llvm::PHINode *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v975 + 16))(v975, v918, v296, 0, 0);
                                if (v303)
                                  goto LABEL_643;
                                v953 = 257;
                                v304 = (char *)operator new(0x80uLL);
                                v305 = v304;
                                *(_QWORD *)v304 = 0;
                                *((_QWORD *)v304 + 2) = 0;
                                *((_QWORD *)v304 + 1) = 0;
                                *((_QWORD *)v304 + 5) = 0;
                                *((_QWORD *)v304 + 6) = 0;
                                *((_QWORD *)v304 + 4) = 0;
                                *((_QWORD *)v304 + 8) = *(_QWORD *)v918;
                                v303 = (llvm::Value *)(v304 + 64);
                                *((_QWORD *)v304 + 3) = v304 + 64;
                                *((_QWORD *)v304 + 7) = v304 + 64;
                                *((_QWORD *)v304 + 9) = 0;
                                v304[80] = 41;
                                v304[81] = 0;
                                *((_WORD *)v304 + 41) = 0;
                                *((_DWORD *)v304 + 21) = 2;
                                *((_DWORD *)v304 + 30) = 0;
                                *(_OWORD *)(v304 + 104) = 0u;
                                *(_OWORD *)(v304 + 88) = 0u;
                                *(_QWORD *)v304 = v918;
                                v307 = (_QWORD *)((char *)v918 + 8);
                                v306 = *((_QWORD *)v918 + 1);
                                *((_QWORD *)v304 + 1) = v306;
                                if (v306)
                                  *(_QWORD *)(v306 + 16) = v304 + 8;
                                *((_QWORD *)v304 + 2) = v307;
                                *v307 = v304;
                                if (*((_QWORD *)v304 + 4))
                                {
                                  **((_QWORD **)v304 + 6) = *((_QWORD *)v304 + 5);
                                  v904 = *((_QWORD *)v304 + 5);
                                  if (v904)
                                    *(_QWORD *)(v904 + 16) = *((_QWORD *)v304 + 6);
                                }
                                *((_QWORD *)v304 + 4) = v296;
                                v310 = *(_QWORD *)(v296 + 8);
                                v309 = (_QWORD *)(v296 + 8);
                                v308 = v310;
                                *((_QWORD *)v304 + 5) = v310;
                                if (v310)
                                  *(_QWORD *)(v308 + 16) = v304 + 40;
                                *((_QWORD *)v304 + 6) = v309;
                                *v309 = v304 + 32;
                                llvm::Value::setName((uint64_t ***)v304 + 8, (uint64_t)&v951);
                                (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v976 + 16))(v976, v303, &ExactLogBase2, v972, v973);
                                if (!v967)
                                {
LABEL_643:
                                  v918 = v303;
                                  goto LABEL_644;
                                }
                                v349 = (char *)v966;
                                v350 = (char *)v966 + 16 * v967;
                                v351 = (unsigned __int8 **)(v305 + 112);
                                while (2)
                                {
                                  v352 = *(_DWORD *)v349;
                                  v353 = (unsigned __int8 *)*((_QWORD *)v349 + 1);
                                  if (v353)
                                  {
                                    if (v352)
                                      goto LABEL_711;
                                    v988[0] = *((unsigned __int8 **)v349 + 1);
                                    llvm::MetadataTracking::track((uint64_t)v988, v353, 2);
                                    v354 = *v351;
LABEL_715:
                                    if (v354)
                                      llvm::MetadataTracking::untrack((uint64_t)(v305 + 112), v354);
                                    v355 = v988[0];
                                    *v351 = v988[0];
                                    if (v355)
                                      llvm::MetadataTracking::retrack((uint64_t)v988, v355, (uint64_t)(v305 + 112));
                                  }
                                  else
                                  {
                                    v354 = *v351;
                                    if (*v351 || (v305[87] & 0x20) != 0)
                                    {
                                      if (!v352)
                                      {
                                        v988[0] = 0;
                                        goto LABEL_715;
                                      }
LABEL_711:
                                      llvm::Value::setMetadata(v303, *(_DWORD *)v349, (llvm::MDNode *)v353);
                                    }
                                  }
                                  v349 += 16;
                                  if (v349 == v350)
                                    goto LABEL_643;
                                  continue;
                                }
                              }
                              if (llvm::APInt::countLeadingZerosSlowCase(v300) == v301 - 1)
                                goto LABEL_631;
LABEL_629:
                              v953 = 257;
                              v918 = (llvm::PHINode *)sub_1C47733F8((uint64_t)&v966, v296, (uint64_t)v918, (uint64_t)&v951, 0, 0);
LABEL_644:
                              v928 = **(llvm ***)(*a1 + 32);
                              v311 = (llvm *)*((_QWORD *)v928 + 5);
                              if (v311 == (llvm *)((char *)v928 + 40))
                              {
                                v914 = 0;
                              }
                              else
                              {
                                if (v311)
                                  v312 = (char *)v311 - 24;
                                else
                                  v312 = 0;
                                if (v312[16] - 29 >= 0xB)
                                  v312 = 0;
                                v914 = v312;
                              }
                              v313 = *((_QWORD *)v914 - 12);
                              v951 = (llvm::ConstantExpr *)"tcphi";
                              v953 = 259;
                              v314 = (uint64_t *)*((_QWORD *)v928 + 6);
                              v315 = operator new(0x48uLL);
                              v316 = v315;
                              v315[1] = v937;
                              v317 = (llvm::Value *)(v315 + 1);
                              *v315 = 0;
                              v315[2] = 0;
                              v315[3] = 0x4000000000000053;
                              *((_OWORD *)v315 + 2) = 0u;
                              v318 = (char *)(v315 + 4);
                              *((_OWORD *)v315 + 3) = 0u;
                              *((_DWORD *)v315 + 16) = 0;
                              if (v314)
                              {
                                v356 = v314[2];
                                v315[6] = v356;
                                *(_WORD *)(v356 + 18) &= ~0x8000u;
                                if ((*((_BYTE *)v315 + 31) & 0x10) != 0)
                                {
                                  v389 = *(_QWORD *)(v356 + 56);
                                  if (v389)
                                  {
                                    v390 = *(llvm::ValueSymbolTable **)(v389 + 104);
                                    if (v390)
                                      llvm::ValueSymbolTable::reinsertValue(v390, v317);
                                  }
                                }
                                v357 = *v314;
                                v316[4] = *v314;
                                v316[5] = v314;
                                *(_QWORD *)(v357 + 8) = v318;
                                *v314 = (uint64_t)v318;
                              }
                              *((_DWORD *)v316 + 17) = 2;
                              llvm::Value::setName((uint64_t ***)v317, (uint64_t)&v951);
                              v319 = *((unsigned int *)v316 + 17);
                              v320 = operator new(40 * v319);
                              *v316 = v320;
                              if ((_DWORD)v319)
                              {
                                v321 = &v320[4 * v319];
                                do
                                {
                                  *v320 = 0;
                                  v320[1] = 0;
                                  v320[2] = 0;
                                  v320[3] = v317;
                                  v320 += 4;
                                }
                                while (v320 != v321);
                              }
                              v972 = *(_QWORD *)(v313 + 40);
                              v973 = v313 + 24;
                              v322 = *(llvm::ConstantExpr **)(v313 + 48);
                              v951 = v322;
                              if (v322)
                              {
                                llvm::MetadataTracking::track((uint64_t)&v951, (unsigned __int8 *)v322, 2);
                                v323 = v951;
                              }
                              else
                              {
                                v323 = 0;
                              }
                              sub_1C4774EF4((uint64_t)&v966, 0, (uint64_t)v323);
                              if (v951)
                                llvm::MetadataTracking::untrack((uint64_t)&v951, (unsigned __int8 *)v951);
                              v324 = llvm::ConstantInt::get(v937, 1, 0);
                              v951 = (llvm::ConstantExpr *)"tcdec";
                              v953 = 259;
                              v325 = sub_1C47733F8((uint64_t)&v966, (uint64_t)v317, (uint64_t)v324, (uint64_t)&v951, 0, 1);
                              sub_1C477667C(v317, (uint64_t)v280, (uint64_t)v922);
                              sub_1C477667C(v317, v325, (uint64_t)v928);
                              v326 = (uint64_t *)(v313 - 64);
                              v327 = *(_QWORD *)(v313 - 64);
                              if (*((llvm **)v914 - 4) == v928)
                                v328 = 33;
                              else
                                v328 = 32;
                              *(_WORD *)(v313 + 18) = *(_WORD *)(v313 + 18) & 0xFFC0 | v328;
                              if (v327)
                              {
                                **(_QWORD **)(v313 - 48) = *(_QWORD *)(v313 - 56);
                                v329 = *(_QWORD *)(v313 - 56);
                                if (v329)
                                  *(_QWORD *)(v329 + 16) = *(_QWORD *)(v313 - 48);
                              }
                              *v326 = v325;
                              if (v325)
                              {
                                v332 = *(_QWORD *)(v325 + 8);
                                v331 = (uint64_t **)(v325 + 8);
                                v330 = v332;
                                *(_QWORD *)(v313 - 56) = v332;
                                if (v332)
                                  *(_QWORD *)(v330 + 16) = v313 - 56;
                                *(_QWORD *)(v313 - 48) = v331;
                                *v331 = v326;
                              }
                              v333 = llvm::ConstantInt::get(v937, 0, 0);
                              v334 = (llvm::Value ***)(v313 - 32);
                              if (*(_QWORD *)(v313 - 32))
                              {
                                **(_QWORD **)(v313 - 16) = *(_QWORD *)(v313 - 24);
                                v335 = *(_QWORD *)(v313 - 24);
                                if (v335)
                                  *(_QWORD *)(v335 + 16) = *(_QWORD *)(v313 - 16);
                              }
                              *v334 = v333;
                              if (v333)
                              {
                                v338 = v333[1];
                                v336 = (llvm::Value ****)(v333 + 1);
                                v337 = v338;
                                *(_QWORD *)(v313 - 24) = v338;
                                if (v338)
                                  *((_QWORD *)v337 + 2) = v313 - 24;
                                *(_QWORD *)(v313 - 16) = v336;
                                *v336 = v334;
                              }
                              if (v215)
                                v339 = (llvm::Value *)v208;
                              else
                                v339 = (llvm::Value *)v196;
                              llvm::Value::replaceUsesOutsideBlock(v339, v918, v928);
                              llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[4], (const llvm::Loop *)*a1);
                              if (v966 != &v968)
                                free(v966);
                              v238 = 1;
LABEL_528:
                              if (v962 != v964)
                                free(v962);
                              if (v957 != &v959)
                                free(v957);
                              v239 = v987;
                              if (v987 == &v984)
                              {
                                v240 = 4;
                                v239 = &v984;
                                goto LABEL_534;
                              }
                              if (v987)
                              {
                                v240 = 5;
LABEL_534:
                                ((void (*)(void))(*v239)[v240])();
                              }
                              v241 = v982;
                              if (v982 == &v979)
                              {
                                v242 = 4;
                                v241 = &v979;
                                goto LABEL_537;
                              }
                              if (v982)
                              {
                                v242 = 5;
LABEL_537:
                                (*(void (**)(void))&(*v241)[8 * v242])();
                              }
                              if ((v238 & 1) != 0)
                                return 1;
                              goto LABEL_71;
                            }
                            v342 = (char *)v966;
                            v343 = (char *)v966 + 16 * v967;
                            v344 = (unsigned __int8 **)(v283 + 112);
                            while (2)
                            {
                              v345 = *(_DWORD *)v342;
                              v346 = (unsigned __int8 *)*((_QWORD *)v342 + 1);
                              if (v346)
                              {
                                if (v345)
                                  goto LABEL_693;
                                v988[0] = *((unsigned __int8 **)v342 + 1);
                                llvm::MetadataTracking::track((uint64_t)v988, v346, 2);
                                v347 = *v344;
LABEL_697:
                                if (v347)
                                  llvm::MetadataTracking::untrack((uint64_t)(v283 + 112), v347);
                                v348 = v988[0];
                                *v344 = v988[0];
                                if (v348)
                                  llvm::MetadataTracking::retrack((uint64_t)v988, v348, (uint64_t)(v283 + 112));
                              }
                              else
                              {
                                v347 = *v344;
                                if (*v344 || (v283[87] & 0x20) != 0)
                                {
                                  if (!v345)
                                  {
                                    v988[0] = 0;
                                    goto LABEL_697;
                                  }
LABEL_693:
                                  llvm::Value::setMetadata(v280, *(_DWORD *)v342, (llvm::MDNode *)v346);
                                }
                              }
                              v342 += 16;
                              if (v342 == v343)
                                goto LABEL_615;
                              continue;
                            }
                          }
                          v1 = 0;
                          switch(*(_BYTE *)(v10 + 16))
                          {
                            case 0x1D:
                            case 0x21:
                            case 0x22:
                            case 0x23:
                            case 0x24:
                            case 0x25:
                            case 0x26:
                              goto LABEL_487;
                            case 0x1E:
                              goto LABEL_1415;
                            case 0x1F:
                              v223 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
                              break;
                            case 0x20:
                              v223 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
                              break;
                            case 0x27:
                              v223 = *(_DWORD *)(v10 + 80) + 1;
                              break;
                            default:
                              goto LABEL_482;
                          }
                          if (v223 == 1)
                            goto LABEL_486;
                        }
                      }
LABEL_482:
                      v1 = 0;
                      goto LABEL_487;
                    }
                    goto LABEL_455;
                  }
                  v10 = 0;
                  switch(v60)
                  {
                    case 0:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                      goto LABEL_132;
                    case 1:
                      goto LABEL_1415;
                    case 2:
                      v61 = (*((_DWORD *)v58 + 5) >> 1) & 0x3FFFFFF;
                      break;
                    case 3:
                      v61 = (*((_DWORD *)v58 + 5) & 0x7FFFFFF) - 1;
                      break;
                    case 10:
                      v61 = *((_DWORD *)v58 + 20) + 1;
                      break;
                    default:
                      goto LABEL_127;
                  }
                  if (v61 == 1)
                    goto LABEL_131;
                }
              }
LABEL_127:
              v10 = 0;
              goto LABEL_132;
            }
          }
        }
      }
    }
  }
LABEL_71:
  v951 = 0;
  ExactLogBase2 = 0;
  v947[0] = 0;
  v1 = *a1;
  if (((*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) & 0x7FFFFFFF8) != 8
    || llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(*a1) != 1)
  {
    goto LABEL_235;
  }
  v2 = **(_QWORD **)(v1 + 32);
  LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v1);
  if (!LoopPredecessor
    || (v38 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5), v38 == (_QWORD *)((char *)LoopPredecessor + 40)))
  {
LABEL_80:
    v39 = 0;
  }
  else
  {
    v10 = v38 ? (uint64_t)(v38 - 3) : 0;
    if (*(_BYTE *)(v10 + 16) == 30)
    {
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
        goto LABEL_80;
LABEL_90:
      v39 = LoopPredecessor;
    }
    else
    {
      v39 = 0;
      switch(*(_BYTE *)(v10 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          break;
        case 0x1E:
          goto LABEL_1415;
        case 0x1F:
          v43 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_89;
        case 0x20:
          goto LABEL_1416;
        case 0x27:
          v43 = *(_DWORD *)(v10 + 80) + 1;
          goto LABEL_89;
        default:
          goto LABEL_80;
      }
    }
  }
  v44 = *(_QWORD *)(v2 + 40);
  if (v44 == v2 + 40)
    goto LABEL_235;
  v45 = v44 - 24;
  if (!v44)
    v45 = 0;
  v46 = *(unsigned __int8 *)(v45 + 16) - 40;
  if (v46 < 0xFFFFFFF5)
    v45 = 0;
  if (!v44)
    goto LABEL_235;
  if (*(_BYTE *)(v45 + 16) != 30 || v46 < 0xFFFFFFF5)
    goto LABEL_235;
  if ((*(_DWORD *)(v45 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_235;
  v48 = *(_QWORD *)(v45 - 96);
  if (!v48)
    goto LABEL_235;
  if (*(_BYTE *)(v48 + 16) != 81)
    goto LABEL_235;
  v49 = *(_QWORD *)(v48 - 64);
  if (!v49)
    goto LABEL_235;
  v50 = *(unsigned __int8 **)(v48 - 32);
  if (!v50)
    goto LABEL_235;
  v51 = *(_WORD *)(v48 + 18) & 0x3F;
  LODWORD(v966) = v51;
  v52 = *(_QWORD *)(v45 - 32);
  if (!v52)
    goto LABEL_235;
  v53 = *(_QWORD *)(v45 - 64);
  if (!v53)
    goto LABEL_235;
  if ((v51 & 0x3E) != 0x20
    || v50[16] > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)v50) & 1) == 0
    && (sub_1C4E71060((uint64_t)&v978, (llvm::Constant *)v50) & 1) == 0)
  {
    goto LABEL_111;
  }
  v954 = v947;
  v955 = &v951;
  v957 = &ExactLogBase2;
  v958 = v1;
  v70 = *(unsigned __int8 *)(v49 + 16);
  if (v70 == 5)
  {
    if (*(_WORD *)(v49 + 18) != 28)
      goto LABEL_111;
    v96 = *(_DWORD *)(v49 + 20) & 0x7FFFFFF;
    if (*(_QWORD *)(v49 - 32 * v96))
    {
      v947[0] = *(llvm::Type **)(v49 - 32 * v96);
      if ((sub_1C5B6DDF4((uint64_t)&v955, *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        goto LABEL_180;
      v96 = *(_DWORD *)(v49 + 20) & 0x7FFFFFF;
    }
    v97 = *(_QWORD *)(v49 - 32 * v96 + 32);
    if (!v97)
      goto LABEL_111;
    *(_QWORD *)v954 = v97;
    if ((sub_1C5B6DDF4((uint64_t)&v955, *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF))) & 1) == 0)
      goto LABEL_111;
LABEL_180:
    if (!v947[0] || *((_BYTE *)v947[0] + 16) != 83 || *((_QWORD *)v947[0] + 5) != v2)
      goto LABEL_235;
    v80 = *((_DWORD *)v947[0] + 5);
    v81 = v80 & 0x7FFFFFF;
    if ((v80 & 0x7FFFFFF) != 0)
    {
      v82 = 0;
      while (1)
      {
        v83 = (char *)v947[0] - 32 * v81;
        if ((v80 & 0x40000000) != 0)
          v83 = (char *)*((_QWORD *)v947[0] - 1);
        if (*(llvm::BasicBlock **)&v83[32 * *((unsigned int *)v947[0] + 15) + 8 * v82] == v39)
          break;
        if (v81 == ++v82)
          goto LABEL_189;
      }
    }
    else
    {
LABEL_189:
      LODWORD(v82) = -1;
    }
    v84 = v81;
    v85 = (v80 & 0x40000000) != 0
        ? (llvm::Type *)*((_QWORD *)v947[0] - 1)
        : (llvm::Type *)((char *)v947[0] - 32 * v81);
    v86 = (uint64_t *)*((_QWORD *)v85 + 4 * v82);
    if ((_DWORD)v81)
    {
      v87 = 0;
      while (1)
      {
        v88 = (char *)v947[0] - 32 * v84;
        if ((v80 & 0x40000000) != 0)
          v88 = (char *)*((_QWORD *)v947[0] - 1);
        if (*(_QWORD *)&v88[32 * *((unsigned int *)v947[0] + 15) + 8 * v87] == v2)
          break;
        if (v84 == ++v87)
          goto LABEL_198;
      }
    }
    else
    {
LABEL_198:
      LODWORD(v87) = -1;
    }
    v89 = (v80 & 0x40000000) != 0 ? (llvm::Type *)*((_QWORD *)v947[0] - 1) : (llvm::Type *)((char *)v947[0] - 32 * v84);
    v90 = (unsigned __int8 *)*((_QWORD *)v89 + 4 * v87);
    v91 = v90[16];
    if (!v90 || v91 < 0x1C)
      goto LABEL_235;
    v954 = v947[0];
    if (v91 != 53
      || v947[0] != *((llvm::Type **)v90 - 8)
      || (sub_1C4D89CC8((uint64_t)&v955, *((llvm::Constant **)v90 - 4)) & 1) == 0)
    {
      goto LABEL_235;
    }
    v93 = (_DWORD)v966 == 32 ? v52 : v53;
    if (v93 != v2)
      goto LABEL_235;
    v933 = **(llvm::ConstantInt ***)(*a1 + 32);
    LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a1);
    if (!LoopPredecessor)
      goto LABEL_220;
    v94 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
    if (v94 == (_QWORD *)((char *)LoopPredecessor + 40))
      goto LABEL_220;
    if (v94)
      v10 = (uint64_t)(v94 - 3);
    else
      v10 = 0;
    if (*(_BYTE *)(v10 + 16) == 30)
    {
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_220:
        v95 = 0;
        goto LABEL_733;
      }
    }
    else
    {
      v95 = 0;
      switch(*(_BYTE *)(v10 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_733;
        case 0x1E:
          goto LABEL_1415;
        case 0x1F:
          v360 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
          v360 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x27:
          v360 = *(_DWORD *)(v10 + 80) + 1;
          break;
        default:
          goto LABEL_220;
      }
      if (v360 != 1)
        goto LABEL_220;
    }
    v95 = (uint64_t)LoopPredecessor;
LABEL_733:
    ExitBlock = (llvm *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock((_QWORD *)*a1);
    v361 = *(_QWORD *)(v95 + 40);
    if (v361 == v95 + 40)
    {
      v362 = 0;
    }
    else
    {
      if (v361)
        v363 = v361 - 24;
      else
        v363 = 0;
      if (*(unsigned __int8 *)(v363 + 16) - 29 >= 0xB)
        v362 = 0;
      else
        v362 = v363;
    }
    sub_1C4773D54((uint64_t)&v966, v362, 0, 0, 0);
    v364 = 0;
    v365 = (unsigned __int8 *)*((_QWORD *)v947[0] + 6);
    v988[0] = v365;
    if (v365)
    {
      llvm::MetadataTracking::track((uint64_t)v988, v365, 2);
      v364 = v988[0];
    }
    sub_1C4774EF4((uint64_t)&v966, 0, (uint64_t)v364);
    if (v988[0])
      llvm::MetadataTracking::untrack((uint64_t)v988, v988[0]);
    v939 = 0;
    v366 = *v86;
    v939 = (llvm::Type *)v366;
    v367 = (llvm::Type *)v366;
    if ((*(_DWORD *)(v366 + 8) & 0xFE) == 0x12)
      v367 = **(llvm::Type ***)(v366 + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v367);
    *(_QWORD *)&v978 = llvm::UndefValue::get((llvm::UndefValue *)v366, v369);
    v371 = *v974;
    v372 = *(llvm::ValueHandleBase **)(*v974 + 1560);
    if (!v372)
    {
      v391 = *(llvm::ConstantInt **)(v371 + 1888);
      v392 = *(_DWORD *)(v371 + 1896);
      LODWORD(v955) = v392 >> 8;
      if (v392 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v954, 1, 0);
      }
      else
      {
        if (v392 <= 0xFF)
          v393 = 0;
        else
          v393 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v392);
        v954 = (void *)(v393 & 1);
      }
      v372 = llvm::ConstantInt::get(v391, (llvm::LLVMContext *)&v954, v370);
      if (v955 >= 0x41 && v954)
        MEMORY[0x1CAA32F9C](v954, 0x1000C8000313F17);
      *(_QWORD *)(v371 + 1560) = v372;
    }
    *((_QWORD *)&v978 + 1) = v372;
    llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v954, 52, v366, (uint64_t *)&v978, 2);
    v374 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)a1[6] + 952))(*(_QWORD *)a1[6], &v954, 3) > 1;
    if (v373)
      v374 = v373 > 0;
    if (v374)
    {
      v375 = 0;
      goto LABEL_755;
    }
    v375 = 0;
    v377 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::Type *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a1[6] + 824))(*(_QWORD *)a1[6], 25, v939, 3, 0, 0, 0, 0, 0, 0, 0) > 1;
    if ((_DWORD)v376)
      v377 = (int)v376 > 0;
    if (v377)
    {
LABEL_755:
      if (v962 != v964)
        free(v962);
      if (v957 != &v959)
        free(v957);
      if (v966 == &v968)
      {
        if ((v375 & 1) != 0)
          return 1;
      }
      else
      {
        free(v966);
        if ((v375 & 1) != 0)
          return 1;
      }
      goto LABEL_235;
    }
    v379 = v951;
    AllOnesValue = llvm::Constant::getAllOnesValue(v939, v376);
    if ((ExactLogBase2[23] & 0x10) == 0)
    {
      v504 = 0;
      v503 = &byte_1C871356D;
LABEL_976:
      v945 = 773;
      *(_QWORD *)&v943 = v503;
      *((_QWORD *)&v943 + 1) = v504;
      v944[0] = ".lowbitmask";
      v506 = (llvm::Value *)(*(uint64_t (**)(void *, llvm::ConstantExpr *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v975 + 16))(v975, v379, AllOnesValue, 0, 0);
      if (v506)
        goto LABEL_985;
      v981 = 257;
      v507 = (char *)operator new(0x80uLL);
      v508 = v507;
      *(_QWORD *)v507 = 0;
      *((_QWORD *)v507 + 2) = 0;
      *((_QWORD *)v507 + 1) = 0;
      *((_QWORD *)v507 + 5) = 0;
      *((_QWORD *)v507 + 6) = 0;
      *((_QWORD *)v507 + 4) = 0;
      v509 = (llvm::ValueHandleBase **)(v507 + 32);
      *((_QWORD *)v507 + 8) = *(_QWORD *)v379;
      v506 = (llvm::Value *)(v507 + 64);
      *((_QWORD *)v507 + 3) = v507 + 64;
      *((_QWORD *)v507 + 7) = v507 + 64;
      *((_QWORD *)v507 + 9) = 0;
      v507[80] = 41;
      v507[81] = 0;
      *((_WORD *)v507 + 41) = 0;
      *((_DWORD *)v507 + 21) = 2;
      *((_DWORD *)v507 + 30) = 0;
      *(_OWORD *)(v507 + 104) = 0u;
      *(_OWORD *)(v507 + 88) = 0u;
      *(_QWORD *)v507 = v379;
      v512 = *((_QWORD *)v379 + 1);
      v511 = (_QWORD *)((char *)v379 + 8);
      v510 = v512;
      *((_QWORD *)v507 + 1) = v512;
      if (v512)
        *(_QWORD *)(v510 + 16) = v507 + 8;
      *((_QWORD *)v507 + 2) = v511;
      *v511 = v507;
      if (*((_QWORD *)v507 + 4))
      {
        **((_QWORD **)v507 + 6) = *((_QWORD *)v507 + 5);
        v906 = *((_QWORD *)v507 + 5);
        if (v906)
          *(_QWORD *)(v906 + 16) = *((_QWORD *)v507 + 6);
      }
      *v509 = AllOnesValue;
      if (AllOnesValue)
      {
        v515 = *((_QWORD *)AllOnesValue + 1);
        v514 = (llvm::ValueHandleBase ***)((char *)AllOnesValue + 8);
        v513 = v515;
        *((_QWORD *)v507 + 5) = v515;
        if (v515)
          *(_QWORD *)(v513 + 16) = v507 + 40;
        *((_QWORD *)v507 + 6) = v514;
        *v514 = v509;
      }
      llvm::Value::setName((uint64_t ***)v507 + 8, (uint64_t)&v978);
      (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v976 + 16))(v976, v506, &v943, v972, v973);
      if (!v967)
      {
LABEL_985:
        if ((ExactLogBase2[23] & 0x10) == 0)
        {
          v533 = 0;
          v532 = &byte_1C871356D;
LABEL_1009:
          v981 = 773;
          *(_QWORD *)&v978 = v532;
          *((_QWORD *)&v978 + 1) = v533;
          v979 = ".mask";
          v535 = sub_1C4773594((uint64_t)&v966, v506, (uint64_t)v951, (uint64_t)&v978);
          if ((*((_BYTE *)v86 + 23) & 0x10) == 0)
          {
            v546 = 0;
            v545 = &byte_1C871356D;
LABEL_1018:
            v981 = 773;
            *(_QWORD *)&v978 = v545;
            *((_QWORD *)&v978 + 1) = v546;
            v979 = ".masked";
            v549 = (uint64_t ***)sub_1C4D89BCC((uint64_t)&v966, v86, v535, (uint64_t)&v978);
            *(_QWORD *)&v943 = v549;
            v550 = *v974;
            v551 = *(llvm::ValueHandleBase **)(*v974 + 1560);
            if (!v551)
            {
              v791 = *(llvm::ConstantInt **)(v550 + 1888);
              v792 = *(_DWORD *)(v550 + 1896);
              DWORD2(v978) = v792 >> 8;
              if (v792 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v978, 1, 0);
              }
              else
              {
                if (v792 <= 0xFF)
                  v793 = 0;
                else
                  v793 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v792);
                *(_QWORD *)&v978 = v793 & 1;
              }
              v551 = llvm::ConstantInt::get(v791, (llvm::LLVMContext *)&v978, v548);
              if (DWORD2(v978) >= 0x41 && (_QWORD)v978)
                MEMORY[0x1CAA32F9C](v978, 0x1000C8000313F17);
              *(_QWORD *)(v550 + 1560) = v551;
            }
            *((_QWORD *)&v943 + 1) = v551;
            v552 = v549 >> 4;
            if ((*((_BYTE *)v549 + 23) & 0x10) == 0)
            {
              v563 = 0;
              v562 = &byte_1C871356D;
LABEL_1028:
              v981 = 773;
              *(_QWORD *)&v978 = v562;
              *((_QWORD *)&v978 + 1) = v563;
              v979 = ".numleadingzeros";
              Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v966, 52, (uint64_t *)&v939, 1, (uint64_t *)&v943, 2, 0, (uint64_t)&v978);
              v566 = v939;
              v567 = v939;
              if ((*((_DWORD *)v939 + 2) & 0xFE) == 0x12)
                v567 = (llvm::Type *)**((_QWORD **)v939 + 2);
              v568 = llvm::Type::getPrimitiveSizeInBits(v567);
              v569 = llvm::ConstantInt::get(v566, v568, 0);
              if ((*((_BYTE *)v549 + 23) & 0x10) == 0)
              {
                v580 = 0;
                v579 = &byte_1C871356D;
LABEL_1039:
                v981 = 773;
                *(_QWORD *)&v978 = v579;
                *((_QWORD *)&v978 + 1) = v580;
                v979 = ".numactivebits";
                v582 = (_QWORD *)sub_1C47733F8((uint64_t)&v966, (uint64_t)v569, Intrinsic, (uint64_t)&v978, 1, PrimitiveSizeInBits != 2);
                v584 = llvm::Constant::getAllOnesValue(v939, v583);
                if ((*((_BYTE *)v549 + 23) & 0x10) == 0)
                {
                  v595 = 0;
                  v594 = &byte_1C871356D;
LABEL_1048:
                  v981 = 773;
                  *(_QWORD *)&v978 = v594;
                  *((_QWORD *)&v978 + 1) = v595;
                  v979 = ".leadingonepos";
                  v597 = (*(uint64_t (**)(void *, _QWORD *, llvm::ValueHandleBase *, _QWORD, BOOL))(*(_QWORD *)v975 + 16))(v975, v582, v584, 0, PrimitiveSizeInBits > 2);
                  if (!v597)
                    v597 = sub_1C4774D04((uint64_t *)&v966, 13, v582, (uint64_t)v584, (uint64_t)&v978, 0, PrimitiveSizeInBits > 2);
                  v598 = **(uint64_t *****)(*a1 + 32);
                  if (!v598 || (*((_BYTE *)v598 + 23) & 0x10) == 0)
                  {
                    v599 = "<unnamed loop>";
                    v600 = 14;
LABEL_1105:
                    v981 = 773;
                    *(_QWORD *)&v978 = v599;
                    *((_QWORD *)&v978 + 1) = v600;
                    v979 = ".backedgetakencount";
                    v642 = (_QWORD *)sub_1C47733F8((uint64_t)&v966, (uint64_t)ExactLogBase2, v597, (uint64_t)&v978, 1, 1);
                    v643 = llvm::ConstantInt::get(v939, 1, 0);
                    v644 = **(uint64_t *****)(*a1 + 32);
                    if (!v644 || (*((_BYTE *)v644 + 23) & 0x10) == 0)
                    {
                      v645 = "<unnamed loop>";
                      v646 = 14;
                      goto LABEL_1116;
                    }
                    v647 = ***v644;
                    v648 = *(_QWORD *)(v647 + 152);
                    v649 = *(unsigned int *)(v647 + 168);
                    if ((_DWORD)v649)
                    {
                      LODWORD(v650) = (v649 - 1) & ((v644 >> 4) ^ (v644 >> 9));
                      v651 = (uint64_t ****)(v648 + 16 * v650);
                      v652 = *v651;
                      if (*v651 == v644)
                      {
LABEL_1115:
                        v655 = v651[1];
                        v656 = (uint64_t)*v655;
                        v645 = (const char *)(v655 + 2);
                        v646 = v656;
LABEL_1116:
                        v981 = 773;
                        *(_QWORD *)&v978 = v645;
                        *((_QWORD *)&v978 + 1) = v646;
                        v979 = ".tripcount";
                        v657 = (*(uint64_t (**)(void *, _QWORD *, llvm::Value **, uint64_t, BOOL))(*(_QWORD *)v975 + 16))(v975, v642, v643, 1, PrimitiveSizeInBits != 2);
                        if (!v657)
                          v657 = sub_1C4774D04((uint64_t *)&v966, 13, v642, (uint64_t)v643, (uint64_t)&v978, 1, PrimitiveSizeInBits != 2);
                        v981 = 257;
                        v658 = (unsigned __int8 *)sub_1C506E874((uint64_t)&v966, (uint64_t)v86, (uint64_t)v642, (uint64_t)&v978, 0, 0);
                        llvm::Value::takeName((llvm::Value *)v658, v947[0]);
                        if (v658 && v658[16] >= 0x1Cu)
                          llvm::Instruction::copyIRFlags((uint64_t)v658, (uint64_t)v90, 1);
                        if ((v90[17] & 6) != 0)
                          goto LABEL_1132;
                        v659 = (llvm::Constant *)ExactLogBase2;
                        v660 = v939;
                        if ((*((_DWORD *)v939 + 2) & 0xFE) == 0x12)
                          v660 = (llvm::Type *)**((_QWORD **)v939 + 2);
                        v661 = llvm::Type::getPrimitiveSizeInBits(v660);
                        v662 = v661 - 1;
                        DWORD2(v943) = v661;
                        if (v661 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v943, v662, 0);
                        }
                        else
                        {
                          v663 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v661;
                          if (!v661)
                            v663 = 0;
                          *(_QWORD *)&v943 = v663 & v662;
                        }
                        *(_QWORD *)&v978 = 33;
                        *((_QWORD *)&v978 + 1) = &v943;
                        sub_1C57BEAF0((uint64_t)&v978, v659);
                        v665 = v664;
                        if (DWORD2(v943) >= 0x41 && (_QWORD)v943)
                          MEMORY[0x1CAA32F9C](v943, 0x1000C8000313F17);
                        if (v665)
                        {
LABEL_1132:
                          v981 = 257;
                          v666 = (uint64_t)v86;
                          v667 = (llvm::Value **)v657;
                        }
                        else
                        {
                          v667 = llvm::ConstantInt::get(v939, 1, 0);
                          v981 = 257;
                          v666 = (uint64_t)v658;
                        }
                        v668 = (unsigned __int8 *)sub_1C506E874((uint64_t)&v966, v666, (uint64_t)v667, (uint64_t)&v978, 0, 0);
                        llvm::Value::takeName((llvm::Value *)v668, (llvm::Value *)v90);
                        if (v668)
                          v669 = v668[16] >= 0x1Cu;
                        else
                          v669 = 0;
                        if (v669)
                          llvm::Instruction::copyIRFlags((uint64_t)v668, (uint64_t)v90, 1);
                        llvm::Value::replaceUsesOutsideBlock(v947[0], (llvm::Value *)v658, v933);
                        llvm::Value::replaceUsesOutsideBlock((llvm::Value *)v90, (llvm::Value *)v668, v933);
                        v670 = 0;
                        v671 = *((_QWORD *)v933 + 6);
                        if (v671)
                          v672 = v671 - 24;
                        else
                          v672 = 0;
                        v972 = *(_QWORD *)(v672 + 40);
                        v973 = v672 + 24;
                        v673 = *(unsigned __int8 **)(v672 + 48);
                        *(_QWORD *)&v978 = v673;
                        if (v673)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v978, v673, 2);
                          v670 = v978;
                        }
                        sub_1C4774EF4((uint64_t)&v966, 0, v670);
                        if ((_QWORD)v978)
                          llvm::MetadataTracking::untrack((uint64_t)&v978, (unsigned __int8 *)v978);
                        v674 = **(uint64_t *****)(*a1 + 32);
                        if (!v674 || (*((_BYTE *)v674 + 23) & 0x10) == 0)
                        {
                          v675 = "<unnamed loop>";
                          v676 = 14;
                          goto LABEL_1158;
                        }
                        v677 = ***v674;
                        v678 = *(_QWORD *)(v677 + 152);
                        v679 = *(unsigned int *)(v677 + 168);
                        if ((_DWORD)v679)
                        {
                          LODWORD(v680) = (v679 - 1) & ((v674 >> 4) ^ (v674 >> 9));
                          v681 = (uint64_t ****)(v678 + 16 * v680);
                          v682 = *v681;
                          if (*v681 == v674)
                          {
LABEL_1157:
                            v685 = v681[1];
                            v686 = (uint64_t)*v685;
                            v675 = (const char *)(v685 + 2);
                            v676 = v686;
LABEL_1158:
                            v981 = 773;
                            *(_QWORD *)&v978 = v675;
                            *((_QWORD *)&v978 + 1) = v676;
                            v979 = ".iv";
                            v687 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v966, (uint64_t)v939, 2, (uint64_t)&v978);
                            v688 = 0;
                            v690 = (_QWORD *)((char *)v933 + 40);
                            v689 = *((_QWORD *)v933 + 5);
                            if (v689)
                              v691 = v689 - 24;
                            else
                              v691 = 0;
                            if (*(unsigned __int8 *)(v691 + 16) - 29 >= 0xB)
                              v691 = 0;
                            v972 = *(_QWORD *)(v691 + 40);
                            v973 = v691 + 24;
                            v692 = *(unsigned __int8 **)(v691 + 48);
                            *(_QWORD *)&v978 = v692;
                            if (v692)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v978, v692, 2);
                              v688 = v978;
                            }
                            sub_1C4774EF4((uint64_t)&v966, 0, v688);
                            if ((_QWORD)v978)
                              llvm::MetadataTracking::untrack((uint64_t)&v978, (unsigned __int8 *)v978);
                            v693 = llvm::ConstantInt::get(v939, 1, 0);
                            if ((*((_BYTE *)v687 + 23) & 0x10) == 0)
                            {
                              v704 = 0;
                              v703 = &byte_1C871356D;
LABEL_1176:
                              v981 = 773;
                              *(_QWORD *)&v978 = v703;
                              *((_QWORD *)&v978 + 1) = v704;
                              v979 = ".next";
                              v706 = (*(uint64_t (**)(void *, llvm::PHINode *, llvm::Value **, uint64_t, BOOL))(*(_QWORD *)v975 + 16))(v975, v687, v693, 1, PrimitiveSizeInBits != 2);
                              if (!v706)
                                v706 = sub_1C4774D04((uint64_t *)&v966, 13, v687, (uint64_t)v693, (uint64_t)&v978, 1, PrimitiveSizeInBits != 2);
                              v707 = **(uint64_t *****)(*a1 + 32);
                              if (!v707 || (*((_BYTE *)v707 + 23) & 0x10) == 0)
                              {
                                v708 = "<unnamed loop>";
                                v709 = 14;
                                goto LABEL_1189;
                              }
                              v710 = ***v707;
                              v711 = *(_QWORD *)(v710 + 152);
                              v712 = *(unsigned int *)(v710 + 168);
                              if ((_DWORD)v712)
                              {
                                LODWORD(v713) = (v712 - 1) & ((v707 >> 4) ^ (v707 >> 9));
                                v714 = (uint64_t ****)(v711 + 16 * v713);
                                v715 = *v714;
                                if (*v714 == v707)
                                {
LABEL_1188:
                                  v718 = v714[1];
                                  v719 = (uint64_t)*v718;
                                  v708 = (const char *)(v718 + 2);
                                  v709 = v719;
LABEL_1189:
                                  v981 = 773;
                                  *(_QWORD *)&v978 = v708;
                                  *((_QWORD *)&v978 + 1) = v709;
                                  v979 = ".ivcheck";
                                  v720 = (llvm::Value *)sub_1C4774B48((uint64_t)&v966, 32, v706, v657, (uint64_t)&v978);
                                  v721 = operator new(0xA0uLL);
                                  v722 = v721;
                                  v723 = 0;
                                  v724 = (llvm::Value *)(v721 + 24);
                                  v721[29] = v721[29] & 0x38000000 | 3;
                                  do
                                  {
                                    v725 = &v721[v723];
                                    *v725 = 0;
                                    v725[1] = 0;
                                    v725[2] = 0;
                                    v725[3] = v724;
                                    v723 += 8;
                                  }
                                  while (v723 != 24);
                                  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v721 + 24), ExitBlock, v933, v720, 0);
                                  v981 = 257;
                                  (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v976 + 16))(v976, v724, &v978, v972, v973);
                                  if (!v967)
                                  {
LABEL_1207:
                                    v733 = (_QWORD *)*v690;
                                    if ((_QWORD *)*v690 == v690)
                                    {
                                      v735 = 0;
                                    }
                                    else
                                    {
                                      if (v733)
                                        v734 = (uint64_t ***)(v733 - 3);
                                      else
                                        v734 = 0;
                                      if (*((unsigned __int8 *)v734 + 16) - 29 >= 0xB)
                                        v735 = 0;
                                      else
                                        v735 = v734;
                                    }
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v735[5] + 5), v735);
                                    v736 = v735[3];
                                    v737 = v735[4];
                                    *v737 = (uint64_t *)v736;
                                    v736[1] = (uint64_t *)v737;
                                    v735[3] = 0;
                                    v735[4] = 0;
                                    llvm::Value::deleteValue((llvm::Value *)v735);
                                    v738 = llvm::ConstantInt::get(v939, 0, 0);
                                    sub_1C477667C(v687, (uint64_t)v738, v95);
                                    sub_1C477667C(v687, v706, (uint64_t)v933);
                                    llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[4], (const llvm::Loop *)*a1);
                                    v375 = 1;
                                    goto LABEL_755;
                                  }
                                  v726 = (char *)v966;
                                  v727 = (char *)v966 + 16 * v967;
                                  v728 = (unsigned __int8 **)(v722 + 36);
                                  while (1)
                                  {
                                    v729 = *(_DWORD *)v726;
                                    v730 = (unsigned __int8 *)*((_QWORD *)v726 + 1);
                                    if (v730)
                                    {
                                      if (!v729)
                                      {
                                        *(_QWORD *)&v943 = *((_QWORD *)v726 + 1);
                                        llvm::MetadataTracking::track((uint64_t)&v943, v730, 2);
                                        v731 = *v728;
                                        goto LABEL_1203;
                                      }
                                    }
                                    else
                                    {
                                      v731 = *v728;
                                      if (!*v728 && (*((_BYTE *)v722 + 119) & 0x20) == 0)
                                        goto LABEL_1200;
                                      if (!v729)
                                      {
                                        *(_QWORD *)&v943 = 0;
LABEL_1203:
                                        if (v731)
                                          llvm::MetadataTracking::untrack((uint64_t)(v722 + 36), v731);
                                        v732 = (unsigned __int8 *)v943;
                                        *v728 = (unsigned __int8 *)v943;
                                        if (v732)
                                          llvm::MetadataTracking::retrack((uint64_t)&v943, v732, (uint64_t)(v722 + 36));
                                        goto LABEL_1200;
                                      }
                                    }
                                    llvm::Value::setMetadata(v724, *(_DWORD *)v726, (llvm::MDNode *)v730);
LABEL_1200:
                                    v726 += 16;
                                    if (v726 == v727)
                                      goto LABEL_1207;
                                  }
                                }
                                v716 = 1;
                                while (v715 != (uint64_t ***)-4096)
                                {
                                  v717 = v713 + v716++;
                                  v713 = v717 & (v712 - 1);
                                  v715 = *(uint64_t ****)(v711 + 16 * v713);
                                  if (v715 == v707)
                                  {
                                    v714 = (uint64_t ****)(v711 + 16 * v713);
                                    goto LABEL_1188;
                                  }
                                }
                              }
                              v714 = (uint64_t ****)(v711 + 16 * v712);
                              goto LABEL_1188;
                            }
                            v694 = ***(_QWORD ***)v687;
                            v695 = *(_QWORD *)(v694 + 152);
                            v696 = *(unsigned int *)(v694 + 168);
                            if ((_DWORD)v696)
                            {
                              LODWORD(v697) = (v696 - 1) & ((v687 >> 4) ^ (v687 >> 9));
                              v698 = (llvm::PHINode **)(v695 + 16 * v697);
                              v699 = *v698;
                              if (*v698 == v687)
                              {
LABEL_1175:
                                v702 = v698[1];
                                v705 = *(_QWORD *)v702;
                                v703 = (char *)v702 + 16;
                                v704 = v705;
                                goto LABEL_1176;
                              }
                              v700 = 1;
                              while (v699 != (llvm::PHINode *)-4096)
                              {
                                v701 = v697 + v700++;
                                v697 = v701 & (v696 - 1);
                                v699 = *(llvm::PHINode **)(v695 + 16 * v697);
                                if (v699 == v687)
                                {
                                  v698 = (llvm::PHINode **)(v695 + 16 * v697);
                                  goto LABEL_1175;
                                }
                              }
                            }
                            v698 = (llvm::PHINode **)(v695 + 16 * v696);
                            goto LABEL_1175;
                          }
                          v683 = 1;
                          while (v682 != (uint64_t ***)-4096)
                          {
                            v684 = v680 + v683++;
                            v680 = v684 & (v679 - 1);
                            v682 = *(uint64_t ****)(v678 + 16 * v680);
                            if (v682 == v674)
                            {
                              v681 = (uint64_t ****)(v678 + 16 * v680);
                              goto LABEL_1157;
                            }
                          }
                        }
                        v681 = (uint64_t ****)(v678 + 16 * v679);
                        goto LABEL_1157;
                      }
                      v653 = 1;
                      while (v652 != (uint64_t ***)-4096)
                      {
                        v654 = v650 + v653++;
                        v650 = v654 & (v649 - 1);
                        v652 = *(uint64_t ****)(v648 + 16 * v650);
                        if (v652 == v644)
                        {
                          v651 = (uint64_t ****)(v648 + 16 * v650);
                          goto LABEL_1115;
                        }
                      }
                    }
                    v651 = (uint64_t ****)(v648 + 16 * v649);
                    goto LABEL_1115;
                  }
                  v601 = ***v598;
                  v602 = *(_QWORD *)(v601 + 152);
                  v603 = *(unsigned int *)(v601 + 168);
                  if ((_DWORD)v603)
                  {
                    LODWORD(v604) = (v603 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                    v605 = (uint64_t ****)(v602 + 16 * v604);
                    v606 = *v605;
                    if (*v605 == v598)
                    {
LABEL_1104:
                      v640 = v605[1];
                      v641 = (uint64_t)*v640;
                      v599 = (const char *)(v640 + 2);
                      v600 = v641;
                      goto LABEL_1105;
                    }
                    v607 = 1;
                    while (v606 != (uint64_t ***)-4096)
                    {
                      v608 = v604 + v607++;
                      v604 = v608 & (v603 - 1);
                      v606 = *(uint64_t ****)(v602 + 16 * v604);
                      if (v606 == v598)
                      {
                        v605 = (uint64_t ****)(v602 + 16 * v604);
                        goto LABEL_1104;
                      }
                    }
                  }
                  v605 = (uint64_t ****)(v602 + 16 * v603);
                  goto LABEL_1104;
                }
                v585 = ***v549;
                v586 = *(_QWORD *)(v585 + 152);
                v587 = *(unsigned int *)(v585 + 168);
                if ((_DWORD)v587)
                {
                  LODWORD(v588) = (v587 - 1) & (v552 ^ (v549 >> 9));
                  v589 = (uint64_t ****)(v586 + 16 * v588);
                  v590 = *v589;
                  if (*v589 == v549)
                  {
LABEL_1047:
                    v593 = v589[1];
                    v596 = *v593;
                    v594 = (char *)(v593 + 2);
                    v595 = v596;
                    goto LABEL_1048;
                  }
                  v591 = 1;
                  while (v590 != (uint64_t ***)-4096)
                  {
                    v592 = v588 + v591++;
                    v588 = v592 & (v587 - 1);
                    v590 = *(uint64_t ****)(v586 + 16 * v588);
                    if (v590 == v549)
                    {
                      v589 = (uint64_t ****)(v586 + 16 * v588);
                      goto LABEL_1047;
                    }
                  }
                }
                v589 = (uint64_t ****)(v586 + 16 * v587);
                goto LABEL_1047;
              }
              v570 = ***v549;
              v571 = *(_QWORD *)(v570 + 152);
              v572 = *(unsigned int *)(v570 + 168);
              if ((_DWORD)v572)
              {
                LODWORD(v573) = (v572 - 1) & (v552 ^ (v549 >> 9));
                v574 = (uint64_t ****)(v571 + 16 * v573);
                v575 = *v574;
                if (*v574 == v549)
                {
LABEL_1038:
                  v578 = v574[1];
                  v581 = *v578;
                  v579 = (char *)(v578 + 2);
                  v580 = v581;
                  goto LABEL_1039;
                }
                v576 = 1;
                while (v575 != (uint64_t ***)-4096)
                {
                  v577 = v573 + v576++;
                  v573 = v577 & (v572 - 1);
                  v575 = *(uint64_t ****)(v571 + 16 * v573);
                  if (v575 == v549)
                  {
                    v574 = (uint64_t ****)(v571 + 16 * v573);
                    goto LABEL_1038;
                  }
                }
              }
              v574 = (uint64_t ****)(v571 + 16 * v572);
              goto LABEL_1038;
            }
            v553 = ***v549;
            v554 = *(_QWORD *)(v553 + 152);
            v555 = *(unsigned int *)(v553 + 168);
            if ((_DWORD)v555)
            {
              LODWORD(v556) = (v555 - 1) & (v552 ^ (v549 >> 9));
              v557 = (uint64_t ****)(v554 + 16 * v556);
              v558 = *v557;
              if (*v557 == v549)
              {
LABEL_1027:
                v561 = v557[1];
                v564 = *v561;
                v562 = (char *)(v561 + 2);
                v563 = v564;
                goto LABEL_1028;
              }
              v559 = 1;
              while (v558 != (uint64_t ***)-4096)
              {
                v560 = v556 + v559++;
                v556 = v560 & (v555 - 1);
                v558 = *(uint64_t ****)(v554 + 16 * v556);
                if (v558 == v549)
                {
                  v557 = (uint64_t ****)(v554 + 16 * v556);
                  goto LABEL_1027;
                }
              }
            }
            v557 = (uint64_t ****)(v554 + 16 * v555);
            goto LABEL_1027;
          }
          v536 = **(_QWORD **)*v86;
          v537 = *(_QWORD *)(v536 + 152);
          v538 = *(unsigned int *)(v536 + 168);
          if ((_DWORD)v538)
          {
            LODWORD(v539) = (v538 - 1) & ((v86 >> 4) ^ (v86 >> 9));
            v540 = (uint64_t **)(v537 + 16 * v539);
            v541 = *v540;
            if (*v540 == v86)
            {
LABEL_1017:
              v544 = v540[1];
              v547 = *v544;
              v545 = (char *)(v544 + 2);
              v546 = v547;
              goto LABEL_1018;
            }
            v542 = 1;
            while (v541 != (uint64_t *)-4096)
            {
              v543 = v539 + v542++;
              v539 = v543 & (v538 - 1);
              v541 = *(uint64_t **)(v537 + 16 * v539);
              if (v541 == v86)
              {
                v540 = (uint64_t **)(v537 + 16 * v539);
                goto LABEL_1017;
              }
            }
          }
          v540 = (uint64_t **)(v537 + 16 * v538);
          goto LABEL_1017;
        }
        v516 = ***(_QWORD ***)ExactLogBase2;
        v517 = *(_QWORD *)(v516 + 152);
        v518 = *(unsigned int *)(v516 + 168);
        if ((_DWORD)v518)
        {
          LODWORD(v519) = (v518 - 1) & ((ExactLogBase2 >> 4) ^ (ExactLogBase2 >> 9));
          v520 = v517 + 16 * v519;
          v521 = *(unsigned __int8 **)v520;
          if (*(unsigned __int8 **)v520 == ExactLogBase2)
          {
LABEL_1008:
            v531 = *(_QWORD **)(v520 + 8);
            v534 = *v531;
            v532 = (char *)(v531 + 2);
            v533 = v534;
            goto LABEL_1009;
          }
          v522 = 1;
          while (v521 != (unsigned __int8 *)-4096)
          {
            v523 = v519 + v522++;
            v519 = v523 & (v518 - 1);
            v521 = *(unsigned __int8 **)(v517 + 16 * v519);
            if (v521 == ExactLogBase2)
            {
              v520 = v517 + 16 * v519;
              goto LABEL_1008;
            }
          }
        }
        v520 = v517 + 16 * v518;
        goto LABEL_1008;
      }
      v524 = (char *)v966;
      v525 = (char *)v966 + 16 * v967;
      v526 = (unsigned __int8 **)(v508 + 112);
      while (1)
      {
        v527 = *(_DWORD *)v524;
        v528 = (unsigned __int8 *)*((_QWORD *)v524 + 1);
        if (v528)
        {
          if (!v527)
          {
            *(_QWORD *)&v940 = *((_QWORD *)v524 + 1);
            llvm::MetadataTracking::track((uint64_t)&v940, v528, 2);
            v529 = *v526;
            goto LABEL_1003;
          }
        }
        else
        {
          v529 = *v526;
          if (!*v526 && (v508[87] & 0x20) == 0)
            goto LABEL_1000;
          if (!v527)
          {
            *(_QWORD *)&v940 = 0;
LABEL_1003:
            if (v529)
              llvm::MetadataTracking::untrack((uint64_t)(v508 + 112), v529);
            v530 = (unsigned __int8 *)v940;
            *v526 = (unsigned __int8 *)v940;
            if (v530)
              llvm::MetadataTracking::retrack((uint64_t)&v940, v530, (uint64_t)(v508 + 112));
            goto LABEL_1000;
          }
        }
        llvm::Value::setMetadata(v506, *(_DWORD *)v524, (llvm::MDNode *)v528);
LABEL_1000:
        v524 += 16;
        if (v524 == v525)
          goto LABEL_985;
      }
    }
    v381 = ***(_QWORD ***)ExactLogBase2;
    v382 = *(_QWORD *)(v381 + 152);
    v383 = *(unsigned int *)(v381 + 168);
    if ((_DWORD)v383)
    {
      LODWORD(v384) = (v383 - 1) & ((ExactLogBase2 >> 4) ^ (ExactLogBase2 >> 9));
      v385 = v382 + 16 * v384;
      v386 = *(unsigned __int8 **)v385;
      if (*(unsigned __int8 **)v385 == ExactLogBase2)
      {
LABEL_975:
        v502 = *(_QWORD **)(v385 + 8);
        v505 = *v502;
        v503 = (char *)(v502 + 2);
        v504 = v505;
        goto LABEL_976;
      }
      v387 = 1;
      while (v386 != (unsigned __int8 *)-4096)
      {
        v388 = v384 + v387++;
        v384 = v388 & (v383 - 1);
        v386 = *(unsigned __int8 **)(v382 + 16 * v384);
        if (v386 == ExactLogBase2)
        {
          v385 = v382 + 16 * v384;
          goto LABEL_975;
        }
      }
    }
    v385 = v382 + 16 * v383;
    goto LABEL_975;
  }
  if (v70 == 56)
  {
    if (*(_QWORD *)(v49 - 64))
    {
      v947[0] = *(llvm::Type **)(v49 - 64);
      if ((sub_1C5B6DDF4((uint64_t)&v955, *(_QWORD *)(v49 - 32)) & 1) != 0)
        goto LABEL_180;
    }
    v71 = *(_QWORD *)(v49 - 32);
    if (v71)
    {
      *(_QWORD *)v954 = v71;
      if ((sub_1C5B6DDF4((uint64_t)&v955, *(_QWORD *)(v49 - 64)) & 1) != 0)
        goto LABEL_180;
    }
  }
LABEL_111:
  if ((v966 & 0xFFFFFFFE) != 0x20
    || v50[16] > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)v50) & 1) == 0
    && (sub_1C4E71060((uint64_t)&v978, (llvm::Constant *)v50) & 1) == 0)
  {
    goto LABEL_113;
  }
  v954 = v947;
  v955 = &v951;
  v72 = *(unsigned __int8 *)(v49 + 16);
  if (v72 == 5)
  {
    if (*(_WORD *)(v49 + 18) != 28)
      goto LABEL_113;
    v98 = v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v98)
      goto LABEL_113;
    v947[0] = *(llvm::Type **)v98;
    v99 = *(llvm::Constant **)(v98 + 32);
    if (!v99)
      goto LABEL_113;
    v951 = *(llvm::ConstantExpr **)(v98 + 32);
    if (!sub_1C4E79B78((uint64_t)&v956, v99))
      goto LABEL_113;
LABEL_232:
    ExactLogBase2 = (unsigned __int8 *)llvm::ConstantExpr::getExactLogBase2(v951, v74);
    if (!ExactLogBase2)
      goto LABEL_113;
    goto LABEL_180;
  }
  if (v72 == 56)
  {
    if (*(_QWORD *)(v49 - 64))
    {
      v947[0] = *(llvm::Type **)(v49 - 64);
      v73 = *(llvm::Constant **)(v49 - 32);
      if (v73)
      {
        v951 = *(llvm::ConstantExpr **)(v49 - 32);
        if (sub_1C4E79980((uint64_t)&v956, v73))
          goto LABEL_232;
      }
    }
  }
LABEL_113:
  LODWORD(v955) = 1;
  v954 = 0;
  if (!llvm::decomposeBitTestICmp(v49, v50, (int *)&v966, (uint64_t *)v947, (int8x8_t ***)&v954, 1)
    || (v966 & 0xFFFFFFFE) != 0x20)
  {
LABEL_174:
    v79 = 0;
    goto LABEL_175;
  }
  if (v955 > 0x40)
  {
    v75 = 0;
    v76 = 0;
    do
    {
      v77 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v954 + v75));
      v77.i16[0] = vaddlv_u8(v77);
      v76 += v77.i32[0];
      v75 += 8;
    }
    while (((((unint64_t)v955 + 63) >> 3) & 0x3FFFFFF8) != v75);
    if (v76 == 1)
      goto LABEL_171;
    MEMORY[0x1CAA32F9C](v954, 0x1000C8000313F17);
  }
  else if (v954)
  {
    if (((unint64_t)v954 & ((unint64_t)v954 - 1)) != 0)
      goto LABEL_174;
LABEL_171:
    v951 = (llvm::ConstantExpr *)llvm::ConstantInt::get(*(llvm::ConstantInt ***)v947[0], (llvm::Type *)&v954, v54);
    if (!v951)
      goto LABEL_174;
    if (v955 > 0x40)
    {
      v130 = 0;
      v131 = ((unint64_t)v955 + 63) >> 6;
      do
      {
        v32 = v131-- < 1;
        if (v32)
          break;
        v132 = *((_QWORD *)v954 + v131);
        v130 += __clz(v132);
      }
      while (!v132);
      v133 = v955 | 0xFFFFFFC0;
      if ((v955 & 0x3F) == 0)
        v133 = 0;
      v78 = v130 + v133;
    }
    else
    {
      v78 = (_DWORD)v955 + __clz((unint64_t)v954) - 64;
    }
    ExactLogBase2 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v947[0], ((_DWORD)v955 + ~v78), 0);
    v79 = ExactLogBase2 != 0;
LABEL_175:
    if (v955 >= 0x41 && v954)
    {
      MEMORY[0x1CAA32F9C](v954, 0x1000C8000313F17);
      if (!v79)
        goto LABEL_235;
      goto LABEL_180;
    }
    if (v79)
      goto LABEL_180;
  }
LABEL_235:
  v100 = (llvm *)*a1;
  if (((*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) & 0x7FFFFFFF8) != 8)
    return 0;
  v1 = a1[4];
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(*a1) != 1)
    return 0;
  v2 = **((_QWORD **)v100 + 4);
  LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v100);
  if (!LoopPredecessor
    || (v101 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5), v101 == (_QWORD *)((char *)LoopPredecessor + 40)))
  {
LABEL_244:
    v102 = 0;
    goto LABEL_249;
  }
  if (v101)
    v10 = (uint64_t)(v101 - 3);
  else
    v10 = 0;
  if (*(_BYTE *)(v10 + 16) != 30)
  {
    v102 = 0;
    switch(*(_BYTE *)(v10 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_249;
      case 0x1E:
        goto LABEL_1415;
      case 0x1F:
        v103 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v103 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v103 = *(_DWORD *)(v10 + 80) + 1;
        break;
      default:
        goto LABEL_244;
    }
    if (v103 == 1)
      goto LABEL_248;
    goto LABEL_244;
  }
  if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_244;
LABEL_248:
  v102 = LoopPredecessor;
LABEL_249:
  v104 = *(_QWORD *)(v2 + 40);
  if (v104 == v2 + 40)
    return 0;
  v105 = 0;
  v106 = v104 - 24;
  if (!v104)
    v106 = 0;
  v107 = *(unsigned __int8 *)(v106 + 16) - 40;
  if (v107 < 0xFFFFFFF5)
    v106 = 0;
  if (v104)
  {
    if (*(_BYTE *)(v106 + 16) == 30 && v107 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v106 + 20) & 0x7FFFFFF) != 3)
        return 0;
      v109 = *(_QWORD *)(v106 - 96);
      v110 = *(unsigned __int8 *)(v109 + 16);
      if (!v109 || v110 < 0x1C)
        return 0;
      v112 = *(_QWORD *)(v106 - 32);
      if (!v112)
        return 0;
      v105 = 0;
      v113 = *(_QWORD *)(v106 - 64);
      if (!v113 || v110 != 81)
        return v105;
      v114 = *(_QWORD *)(v109 - 64);
      if (!v114 || *(unsigned __int8 *)(v114 + 16) < 0x1Cu)
        return 0;
      v116 = *(unsigned __int8 **)(v109 - 32);
      v117 = !v116 || v116[16] > 0x14u;
      if (v117
        || (llvm::Constant::isNullValue(*(llvm::Constant **)(v109 - 32)) & 1) == 0
        && (sub_1C4E71060((uint64_t)&v954, (llvm::Constant *)v116) & 1) == 0)
      {
        return 0;
      }
      if ((*(_WORD *)(v109 + 18) & 0x3E) != 0x20 || *(unsigned __int8 *)(v114 + 16) - 53 > 2)
        return 0;
      v118 = *(_DWORD *)(v114 + 20);
      v926 = *(_WORD *)(v109 + 18);
      v119 = (v118 & 0x40000000) != 0 ? *(uint64_t **)(v114 - 8) : (uint64_t *)(v114 - 32 * (v118 & 0x7FFFFFF));
      v120 = *v119;
      isLoopInvariant = llvm::Loop::isLoopInvariant((uint64_t)v100, *v119);
      if (!v120 || !isLoopInvariant)
        return 0;
      v123 = *(_DWORD *)(v114 + 20);
      v124 = (v123 & 0x40000000) != 0 ? *(_QWORD *)(v114 - 8) : v114 - 32 * (v123 & 0x7FFFFFF);
      v134 = *(llvm::ConstantInt **)(v124 + 32);
      v135 = *((unsigned __int8 *)v134 + 16);
      if (!v134 || v135 < 0x1C)
        return 0;
      v917 = (llvm::PHINode *)v120;
      if (*(_BYTE *)(v114 + 16) == 53)
        v137 = 54;
      else
        v137 = 52;
      v913 = v137;
      if (v135 == 41)
      {
        v934 = v134;
        v138 = (unsigned __int8 *)*((_QWORD *)v134 - 8);
        v921 = (llvm::BasicBlock *)v138;
        if (v138 && v138[16] >= 0x1Cu)
        {
          v142 = *((_QWORD *)v134 - 4);
          v154 = llvm::Loop::isLoopInvariant((uint64_t)v100, v142);
          if (v142)
          {
            if (v154)
              goto LABEL_357;
          }
        }
        v134 = v934;
        v140 = (unsigned __int8 *)*((_QWORD *)v934 - 4);
        v921 = (llvm::BasicBlock *)v140;
        if (v140 && v140[16] >= 0x1Cu)
        {
          v142 = *((_QWORD *)v934 - 8);
          v143 = llvm::Loop::isLoopInvariant((uint64_t)v100, v142);
          v134 = v934;
          if (v142 && v143)
          {
LABEL_357:
            v134 = v934;
            if ((*((_BYTE *)v934 + 17) & 6) != 0)
            {
              v155 = *(_QWORD *)(v1 + 104);
              v156 = *(_DWORD *)(v1 + 120);
              if (v156)
              {
                v157 = ((v142 >> 4) ^ (v142 >> 9)) & (v156 - 1);
                v158 = v155 + 48 * v157;
                v159 = *(_QWORD *)(v158 + 24);
                if (v159 == v142)
                  goto LABEL_543;
                v160 = 1;
                while (v159 != -4096)
                {
                  v161 = v157 + v160++;
                  v157 = v161 & (v156 - 1);
                  v158 = v155 + 48 * v157;
                  v159 = *(_QWORD *)(v158 + 24);
                  if (v159 == v142)
                    goto LABEL_543;
                }
              }
              v158 = v155 + 48 * v156;
LABEL_543:
              if (v158 == v155 + 48 * v156 || (SCEVIter = *(_QWORD *)(v158 + 40)) == 0)
                SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1, v142);
              NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(v1, SCEVIter);
              goto LABEL_547;
            }
          }
        }
      }
      v162 = *((unsigned __int8 *)v134 + 16);
      if (v162 == 5)
      {
        if (*((_WORD *)v134 + 9) != 15)
          goto LABEL_385;
        v167 = (llvm::BasicBlock **)((char *)v134 - 32 * (*((_DWORD *)v134 + 5) & 0x7FFFFFF));
        v921 = *v167;
        if (!*v167 || *((unsigned __int8 *)*v167 + 16) < 0x1Cu)
          goto LABEL_385;
        v165 = (unint64_t)v167[4];
        v935 = v134;
        v169 = llvm::Loop::isLoopInvariant((uint64_t)v100, v165);
        v134 = v935;
        if (!v165 || !v169)
          goto LABEL_385;
      }
      else
      {
        if (v162 != 43)
          goto LABEL_385;
        v163 = (unsigned __int8 *)*((_QWORD *)v134 - 8);
        v921 = (llvm::BasicBlock *)v163;
        if (!v163 || v163[16] < 0x1Cu)
          goto LABEL_385;
        v165 = *((_QWORD *)v134 - 4);
        v935 = v134;
        v166 = llvm::Loop::isLoopInvariant((uint64_t)v100, v165);
        v134 = v935;
        if (!v165 || !v166)
          goto LABEL_385;
      }
      v134 = v935;
      if ((*((_BYTE *)v935 + 17) & 4) == 0)
      {
LABEL_385:
        v171 = v134;
        Constant = (llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v1, *(llvm::Type **)v134, 0, 0);
        goto LABEL_386;
      }
      v256 = *(_QWORD *)(v1 + 104);
      v257 = *(_DWORD *)(v1 + 120);
      if (v257)
      {
        v258 = (v257 - 1) & ((v165 >> 4) ^ (v165 >> 9));
        v259 = v256 + 48 * v258;
        v260 = *(_QWORD *)(v259 + 24);
        if (v260 == v165)
          goto LABEL_573;
        v261 = 1;
        while (v260 != -4096)
        {
          v262 = v258 + v261++;
          v258 = v262 & (v257 - 1);
          v259 = v256 + 48 * v258;
          v260 = *(_QWORD *)(v259 + 24);
          if (v260 == v165)
            goto LABEL_573;
        }
      }
      v259 = v256 + 48 * v257;
LABEL_573:
      if (v259 != v256 + 48 * v257)
      {
        Constant = *(llvm::SCEV **)(v259 + 40);
        if (Constant)
          goto LABEL_575;
      }
      NegativeSCEV = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1, v165);
LABEL_547:
      Constant = (llvm::SCEV *)NegativeSCEV;
LABEL_575:
      v171 = v921;
LABEL_386:
      v936 = v171;
      if (*((_BYTE *)v171 + 16) != 83 || *((_QWORD *)v171 + 5) != v2)
        return 0;
      v172 = *((_DWORD *)v171 + 5);
      v173 = v172 & 0x7FFFFFF;
      if ((v172 & 0x7FFFFFF) != 0)
      {
        v174 = 0;
        while (1)
        {
          v175 = (char *)v171 - 32 * v173;
          if ((v172 & 0x40000000) != 0)
            v175 = (char *)*((_QWORD *)v171 - 1);
          if (*(llvm::BasicBlock **)&v175[32 * *((unsigned int *)v171 + 15) + 8 * v174] == v102)
            break;
          if (v173 == ++v174)
            goto LABEL_394;
        }
      }
      else
      {
LABEL_394:
        LODWORD(v174) = -1;
      }
      v176 = v173;
      v177 = (v172 & 0x40000000) != 0
           ? (llvm::BasicBlock *)*((_QWORD *)v171 - 1)
           : (llvm::BasicBlock *)((char *)v171 - 32 * v173);
      v178 = *((_QWORD *)v177 + 4 * v174);
      if ((_DWORD)v173)
      {
        v179 = 0;
        while (1)
        {
          v180 = (char *)v171 - 32 * v176;
          if ((v172 & 0x40000000) != 0)
            v180 = (char *)*((_QWORD *)v171 - 1);
          if (*(_QWORD *)&v180[32 * *((unsigned int *)v171 + 15) + 8 * v179] == v2)
            break;
          if (v176 == ++v179)
            goto LABEL_403;
        }
      }
      else
      {
LABEL_403:
        LODWORD(v179) = -1;
      }
      v181 = (v172 & 0x40000000) != 0
           ? (llvm::BasicBlock *)*((_QWORD *)v171 - 1)
           : (llvm::BasicBlock *)((char *)v171 - 32 * v176);
      v182 = *((_QWORD *)v181 + 4 * v179);
      v183 = *(unsigned __int8 *)(v182 + 16);
      if (!v182 || v183 < 0x1C)
        return 0;
      v954 = v171;
      if (v183 != 41
        || v171 != *(llvm::BasicBlock **)(v182 - 64)
        || (sub_1C4D89CC8((uint64_t)&v955, *(llvm::Constant **)(v182 - 32)) & 1) == 0)
      {
        return 0;
      }
      v186 = v926 & 0x3F;
      v187 = v186 == 32 ? v113 : v112;
      if (v187 != v2)
        return 0;
      if (*(_BYTE *)(v114 + 16) != 55 || llvm::isMustProgress(v100, v185))
        goto LABEL_762;
      v188 = *(_QWORD *)(v1 + 104);
      v189 = *(_DWORD *)(v1 + 120);
      if (v189)
      {
        v190 = ((v917 >> 4) ^ (v917 >> 9)) & (v189 - 1);
        v191 = v188 + 48 * v190;
        v192 = *(llvm::PHINode **)(v191 + 24);
        if (v192 == v917)
        {
LABEL_723:
          if (v191 == v188 + 48 * v189 || (v358 = *(const llvm::SCEV **)(v191 + 40)) == 0)
            v358 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1, (unint64_t)v917);
          if (!llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)v1, v358))
            return 0;
LABEL_762:
          v923 = **(llvm::BasicBlock ***)(*a1 + 32);
          LoopPredecessor = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a1);
          if (!LoopPredecessor)
            goto LABEL_769;
          v378 = (_QWORD *)*((_QWORD *)LoopPredecessor + 5);
          if (v378 == (_QWORD *)((char *)LoopPredecessor + 40))
            goto LABEL_769;
          if (v378)
            v10 = (uint64_t)(v378 - 3);
          else
            v10 = 0;
          if (*(_BYTE *)(v10 + 16) == 30)
          {
            if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
            {
LABEL_769:
              v930 = 0;
              goto LABEL_1064;
            }
          }
          else
          {
            v930 = 0;
            switch(*(_BYTE *)(v10 + 16))
            {
              case 0x1D:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
                goto LABEL_1064;
              case 0x1E:
                goto LABEL_1415;
              case 0x1F:
                v609 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
                v609 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x27:
                v609 = *(_DWORD *)(v10 + 80) + 1;
                break;
              default:
                goto LABEL_769;
            }
            if (v609 != 1)
              goto LABEL_769;
          }
          v930 = LoopPredecessor;
LABEL_1064:
          v910 = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock((_QWORD *)*a1);
          v610 = (llvm *)*((_QWORD *)v930 + 5);
          if (v610 == (llvm *)((char *)v930 + 40))
          {
            v611 = 0;
          }
          else
          {
            if (v610)
              v612 = (uint64_t)v610 - 24;
            else
              v612 = 0;
            if (*(unsigned __int8 *)(v612 + 16) - 29 >= 0xB)
              v611 = 0;
            else
              v611 = v612;
          }
          sub_1C4773D54((uint64_t)&v978, v611, 0, 0, 0);
          v613 = 0;
          v614 = (unsigned __int8 *)*((_QWORD *)v936 + 6);
          ExactLogBase2 = v614;
          if (v614)
          {
            llvm::MetadataTracking::track((uint64_t)&ExactLogBase2, v614, 2);
            v613 = ExactLogBase2;
          }
          sub_1C4774EF4((uint64_t)&v978, 0, (uint64_t)v613);
          if (ExactLogBase2)
            llvm::MetadataTracking::untrack((uint64_t)&ExactLogBase2, ExactLogBase2);
          v947[0] = 0;
          v615 = *(llvm::Type **)v917;
          v947[0] = v615;
          v616 = v615;
          if ((*((_DWORD *)v615 + 2) & 0xFE) == 0x12)
            v616 = (llvm::Type *)**((_QWORD **)v615 + 2);
          v617 = llvm::Type::getPrimitiveSizeInBits(v616);
          *(_QWORD *)&v943 = llvm::UndefValue::get(v615, v618);
          v620 = *v984;
          v621 = *(llvm::ValueHandleBase **)(*v984 + 1568);
          if (!v621)
          {
            v739 = *(llvm::ConstantInt **)(v620 + 1888);
            LODWORD(v955) = *(_DWORD *)(v620 + 1896) >> 8;
            if (v955 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v954, 0, 0);
            else
              v954 = 0;
            v621 = llvm::ConstantInt::get(v739, (llvm::LLVMContext *)&v954, v619);
            if (v955 >= 0x41 && v954)
              MEMORY[0x1CAA32F9C](v954, 0x1000C8000313F17);
            *(_QWORD *)(v620 + 1568) = v621;
          }
          *((_QWORD *)&v943 + 1) = v621;
          llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v966, v913, (uint64_t)v615, (uint64_t *)&v943, 2);
          v624 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)a1[6] + 952))(*(_QWORD *)a1[6], &v966, 3) > 1;
          if (v622)
            v625 = v622 > 0;
          else
            v625 = v624;
          if (v625)
            goto LABEL_1083;
          isZero = 0;
          if (!*((_WORD *)Constant + 12) && Constant)
            isZero = llvm::SCEV::isZero(Constant);
          *(_QWORD *)&v943 = v917;
          v627 = *v984;
          v628 = *(llvm::ValueHandleBase **)(*v984 + 1568);
          if (!v628)
          {
            v902 = *(llvm::ConstantInt **)(v627 + 1888);
            LODWORD(v955) = *(_DWORD *)(v627 + 1896) >> 8;
            if (v955 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v954, 0, 0);
            else
              v954 = 0;
            v628 = llvm::ConstantInt::get(v902, (llvm::LLVMContext *)&v954, v623);
            if (v955 >= 0x41 && v954)
              MEMORY[0x1CAA32F9C](v954, 0x1000C8000313F17);
            *(_QWORD *)(v627 + 1568) = v628;
          }
          *((_QWORD *)&v943 + 1) = v628;
          v629 = v917 >> 4;
          if ((*((_BYTE *)v917 + 23) & 0x10) == 0)
          {
            v742 = 0;
            v741 = &byte_1C871356D;
LABEL_1231:
            LOWORD(v958) = 773;
            v954 = v741;
            v955 = v742;
            v956 = ".numleadingzeros";
            v744 = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v978, v913, (uint64_t *)v947, 1, (uint64_t *)&v943, 2, 0, (uint64_t)&v954);
            v745 = v947[0];
            v746 = v947[0];
            if ((*((_DWORD *)v947[0] + 2) & 0xFE) == 0x12)
              v746 = (llvm::Type *)**((_QWORD **)v947[0] + 2);
            v747 = llvm::Type::getPrimitiveSizeInBits(v746);
            v748 = llvm::ConstantInt::get(v745, v747, 0);
            if ((*((_BYTE *)v917 + 23) & 0x10) == 0)
            {
              v759 = 0;
              v758 = &byte_1C871356D;
LABEL_1242:
              LOWORD(v958) = 773;
              v954 = v758;
              v955 = v759;
              v956 = ".numactivebits";
              v915 = v617;
              v761 = (uint64_t ***)sub_1C47733F8((uint64_t)&v978, (uint64_t)v748, v744, (uint64_t)&v954, 1, v617 != 2);
              sub_1C50D02DC((uint64_t)&v954, (uint64_t ***)a1[4], a1[7], (uint64_t)"loop-idiom", 1);
              v762 = 0;
              if (*((_QWORD *)&v983 + 1))
                v763 = *((_QWORD *)&v983 + 1) - 24;
              else
                v763 = 0;
              v965[6] = *(_QWORD *)(v763 + 40);
              v965[7] = v763 + 24;
              v764 = *(unsigned __int8 **)(v763 + 48);
              *(_QWORD *)&v943 = v764;
              if (v764)
              {
                llvm::MetadataTracking::track((uint64_t)&v943, v764, 2);
                v762 = v943;
              }
              sub_1C4774EF4((uint64_t)v965, 0, v762);
              if ((_QWORD)v943)
                llvm::MetadataTracking::untrack((uint64_t)&v943, (unsigned __int8 *)v943);
              v765 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v954, (llvm::Instruction **)Constant, 0);
              if ((*((_BYTE *)v761 + 23) & 0x10) == 0)
              {
                v776 = 0;
                v775 = &byte_1C871356D;
LABEL_1258:
                v945 = 773;
                *(_QWORD *)&v943 = v775;
                *((_QWORD *)&v943 + 1) = v776;
                v944[0] = ".offset";
                v778 = (*(uint64_t (**)(uint64_t, uint64_t ***, unsigned __int8 *, _BOOL8, uint64_t))(*(_QWORD *)v985 + 16))(v985, v761, v765, isZero, 1);
                if (!v778)
                  v778 = sub_1C4774D04((uint64_t *)&v978, 13, v761, (uint64_t)v765, (uint64_t)&v943, isZero, 1);
                v951 = v947[0];
                *(_QWORD *)&v940 = v778;
                *((_QWORD *)&v940 + 1) = v178;
                *(_QWORD *)&v943 = "iv.final";
                v945 = 259;
                v779 = (llvm::Value *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v978, 274, (uint64_t *)&v951, 1, (uint64_t *)&v940, 2, 0, (uint64_t)&v943);
                v780 = **(uint64_t *****)(*a1 + 32);
                if (!v780 || (*((_BYTE *)v780 + 23) & 0x10) == 0)
                {
                  v781 = "<unnamed loop>";
                  v782 = 14;
LABEL_1281:
                  v945 = 773;
                  *(_QWORD *)&v943 = v781;
                  *((_QWORD *)&v943 + 1) = v782;
                  v944[0] = ".backedgetakencount";
                  v798 = (_QWORD *)sub_1C47733F8((uint64_t)&v978, (uint64_t)v779, v178, (uint64_t)&v943, isZero, 1);
                  v799 = llvm::ConstantInt::get(v947[0], 1, 0);
                  v800 = **(uint64_t *****)(*a1 + 32);
                  if (!v800 || (*((_BYTE *)v800 + 23) & 0x10) == 0)
                  {
                    v801 = "<unnamed loop>";
                    v802 = 14;
                    goto LABEL_1292;
                  }
                  v803 = ***v800;
                  v804 = *(_QWORD *)(v803 + 152);
                  v805 = *(unsigned int *)(v803 + 168);
                  if ((_DWORD)v805)
                  {
                    LODWORD(v806) = (v805 - 1) & ((v800 >> 4) ^ (v800 >> 9));
                    v807 = (uint64_t ****)(v804 + 16 * v806);
                    v808 = *v807;
                    if (*v807 == v800)
                    {
LABEL_1291:
                      v811 = v807[1];
                      v812 = (uint64_t)*v811;
                      v801 = (const char *)(v811 + 2);
                      v802 = v812;
LABEL_1292:
                      v945 = 773;
                      *(_QWORD *)&v943 = v801;
                      *((_QWORD *)&v943 + 1) = v802;
                      v944[0] = ".tripcount";
                      v813 = (*(uint64_t (**)(uint64_t, _QWORD *, llvm::Value **, uint64_t, BOOL))(*(_QWORD *)v985 + 16))(v985, v798, v799, 1, v915 != 2);
                      if (!v813)
                        v813 = sub_1C4774D04((uint64_t *)&v978, 13, v798, (uint64_t)v799, (uint64_t)&v943, 1, v915 != 2);
                      llvm::Value::replaceUsesOutsideBlock(v936, v779, v923);
                      v814 = 0;
                      v815 = *((_QWORD *)v923 + 6);
                      if (v815)
                        v816 = v815 - 24;
                      else
                        v816 = 0;
                      *(_QWORD *)&v983 = *(_QWORD *)(v816 + 40);
                      *((_QWORD *)&v983 + 1) = v816 + 24;
                      v817 = *(unsigned __int8 **)(v816 + 48);
                      *(_QWORD *)&v943 = v817;
                      if (v817)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v943, v817, 2);
                        v814 = v943;
                      }
                      sub_1C4774EF4((uint64_t)&v978, 0, v814);
                      if ((_QWORD)v943)
                        llvm::MetadataTracking::untrack((uint64_t)&v943, (unsigned __int8 *)v943);
                      v818 = **(uint64_t *****)(*a1 + 32);
                      if (!v818 || (*((_BYTE *)v818 + 23) & 0x10) == 0)
                      {
                        v819 = "<unnamed loop>";
                        v820 = 14;
LABEL_1312:
                        v945 = 773;
                        *(_QWORD *)&v943 = v819;
                        *((_QWORD *)&v943 + 1) = v820;
                        v944[0] = ".iv";
                        v920 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v978, (uint64_t)v947[0], 2, (uint64_t)&v943);
                        for (m = (_QWORD *)*((_QWORD *)v923 + 6); ; m = (_QWORD *)m[1])
                        {
                          v832 = m - 3;
                          if (!m)
                            v832 = 0;
                          if (*((_BYTE *)v832 + 16) != 83)
                            break;
                        }
                        *(_QWORD *)&v983 = m[2];
                        *((_QWORD *)&v983 + 1) = m;
                        v833 = (unsigned __int8 *)m[3];
                        *(_QWORD *)&v943 = v833;
                        if (v833)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v943, v833, 2);
                          v834 = v943;
                        }
                        else
                        {
                          v834 = 0;
                        }
                        sub_1C4774EF4((uint64_t)&v978, 0, v834);
                        if ((_QWORD)v943)
                          llvm::MetadataTracking::untrack((uint64_t)&v943, (unsigned __int8 *)v943);
                        v835 = llvm::ConstantInt::get(v947[0], 1, 0);
                        if ((*((_BYTE *)v920 + 23) & 0x10) == 0)
                        {
                          v846 = 0;
                          v845 = &byte_1C871356D;
LABEL_1330:
                          v945 = 773;
                          *(_QWORD *)&v943 = v845;
                          *((_QWORD *)&v943 + 1) = v846;
                          v944[0] = ".next";
                          v912 = (llvm::SCEV *)(*(uint64_t (**)(uint64_t, llvm::PHINode *, llvm::Value **, uint64_t, BOOL))(*(_QWORD *)v985 + 16))(v985, v920, v835, 1, v915 != 2);
                          if (!v912)
                            v912 = (llvm::SCEV *)sub_1C4774D04((uint64_t *)&v978, 13, v920, (uint64_t)v835, (uint64_t)&v943, 1, v915 != 2);
                          v848 = **(uint64_t *****)(*a1 + 32);
                          if (!v848 || (*((_BYTE *)v848 + 23) & 0x10) == 0)
                          {
                            v849 = "<unnamed loop>";
                            v850 = 14;
LABEL_1343:
                            v916 = (_QWORD *)((char *)v923 + 40);
                            v945 = 773;
                            *(_QWORD *)&v943 = v849;
                            *((_QWORD *)&v943 + 1) = v850;
                            v944[0] = ".ivcheck";
                            v908 = (llvm::Value *)sub_1C4774B48((uint64_t)&v978, 32, (uint64_t)v912, v813, (uint64_t)&v943);
                            v909 = v908;
                            if (v186 != 32)
                            {
                              v945 = 257;
                              v909 = (llvm::Value *)sub_1C506EAA0((uint64_t)&v978, (uint64_t)v908, (uint64_t)&v943);
                              llvm::Value::takeName(v909, (llvm::Value *)v109);
                            }
                            v941[8] = 257;
                            v861 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::PHINode *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v985 + 16))(v985, v920, v178, 0, 1);
                            if (!v861)
                            {
                              v945 = 257;
                              v862 = (char *)operator new(0x80uLL);
                              v863 = v862;
                              *(_QWORD *)v862 = 0;
                              *((_QWORD *)v862 + 2) = 0;
                              *((_QWORD *)v862 + 1) = 0;
                              *((_QWORD *)v862 + 5) = 0;
                              *((_QWORD *)v862 + 6) = 0;
                              *((_QWORD *)v862 + 4) = 0;
                              v864 = (uint64_t *)(v862 + 32);
                              *((_QWORD *)v862 + 8) = *(_QWORD *)v920;
                              v861 = (llvm::Value *)(v862 + 64);
                              *((_QWORD *)v862 + 3) = v862 + 64;
                              *((_QWORD *)v862 + 7) = v862 + 64;
                              *((_QWORD *)v862 + 9) = 0;
                              v862[80] = 41;
                              v862[81] = 0;
                              *((_WORD *)v862 + 41) = 0;
                              *((_DWORD *)v862 + 21) = 2;
                              *((_DWORD *)v862 + 30) = 0;
                              *(_OWORD *)(v862 + 104) = 0u;
                              *(_OWORD *)(v862 + 88) = 0u;
                              *(_QWORD *)v862 = v920;
                              v865 = (_QWORD *)((char *)v920 + 8);
                              v866 = *((_QWORD *)v920 + 1);
                              *((_QWORD *)v862 + 1) = v866;
                              if (v866)
                                *(_QWORD *)(v866 + 16) = v862 + 8;
                              *((_QWORD *)v862 + 2) = v865;
                              *v865 = v862;
                              if (*((_QWORD *)v862 + 4))
                              {
                                **((_QWORD **)v862 + 6) = *((_QWORD *)v862 + 5);
                                v907 = *((_QWORD *)v862 + 5);
                                if (v907)
                                  *(_QWORD *)(v907 + 16) = *((_QWORD *)v862 + 6);
                              }
                              *v864 = v178;
                              if (v178)
                              {
                                v869 = *(_QWORD *)(v178 + 8);
                                v868 = (uint64_t **)(v178 + 8);
                                v867 = v869;
                                *((_QWORD *)v862 + 5) = v869;
                                if (v869)
                                  *(_QWORD *)(v867 + 16) = v862 + 40;
                                *((_QWORD *)v862 + 6) = v868;
                                *v868 = v864;
                              }
                              llvm::Value::setName((uint64_t ***)v862 + 8, (uint64_t)&v943);
                              (*(void (**)(uint64_t, llvm::Value *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v986 + 16))(v986, v861, &v940, v983, *((_QWORD *)&v983 + 1));
                              if (DWORD2(v978))
                              {
                                v870 = v978;
                                v871 = v978 + 16 * DWORD2(v978);
                                v872 = (unsigned __int8 **)(v863 + 112);
                                do
                                {
                                  v873 = *(_DWORD *)v870;
                                  v874 = *(unsigned __int8 **)(v870 + 8);
                                  if (v874)
                                  {
                                    if (!v873)
                                    {
                                      v951 = *(llvm::ConstantExpr **)(v870 + 8);
                                      llvm::MetadataTracking::track((uint64_t)&v951, v874, 2);
                                      v875 = *v872;
                                      goto LABEL_1365;
                                    }
                                  }
                                  else
                                  {
                                    v875 = *v872;
                                    if (!*v872 && (v863[87] & 0x20) == 0)
                                      goto LABEL_1362;
                                    if (!v873)
                                    {
                                      v951 = 0;
LABEL_1365:
                                      if (v875)
                                        llvm::MetadataTracking::untrack((uint64_t)(v863 + 112), v875);
                                      v876 = (unsigned __int8 *)v951;
                                      *v872 = (unsigned __int8 *)v951;
                                      if (v876)
                                        llvm::MetadataTracking::retrack((uint64_t)&v951, v876, (uint64_t)(v863 + 112));
                                      goto LABEL_1362;
                                    }
                                  }
                                  llvm::Value::setMetadata(v861, *(_DWORD *)v870, (llvm::MDNode *)v874);
LABEL_1362:
                                  v870 += 16;
                                }
                                while (v870 != v871);
                              }
                              v863[81] |= 4u;
                            }
                            llvm::Value::takeName(v861, v936);
                            v877 = 0;
                            if (*v916)
                              v878 = *v916 - 24;
                            else
                              v878 = 0;
                            if (*(unsigned __int8 *)(v878 + 16) - 29 >= 0xB)
                              v878 = 0;
                            *(_QWORD *)&v983 = *(_QWORD *)(v878 + 40);
                            *((_QWORD *)&v983 + 1) = v878 + 24;
                            v879 = *(unsigned __int8 **)(v878 + 48);
                            *(_QWORD *)&v943 = v879;
                            if (v879)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v943, v879, 2);
                              v877 = v943;
                            }
                            sub_1C4774EF4((uint64_t)&v978, 0, v877);
                            if ((_QWORD)v943)
                              llvm::MetadataTracking::untrack((uint64_t)&v943, (unsigned __int8 *)v943);
                            v880 = operator new(0xA0uLL);
                            v881 = v880;
                            v882 = 0;
                            v883 = (llvm::Value *)(v880 + 24);
                            v880[29] = v880[29] & 0x38000000 | 3;
                            do
                            {
                              v884 = &v880[v882];
                              *v884 = 0;
                              v884[1] = 0;
                              v884[2] = 0;
                              v884[3] = v883;
                              v882 += 8;
                            }
                            while (v882 != 24);
                            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v880 + 24), v910, v923, v908, 0);
                            v945 = 257;
                            (*(void (**)(uint64_t, llvm::Value *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v986 + 16))(v986, v883, &v943, v983, *((_QWORD *)&v983 + 1));
                            if (!DWORD2(v978))
                            {
LABEL_1397:
                              v892 = (_QWORD *)*v916;
                              if ((_QWORD *)*v916 == v916)
                              {
                                v894 = 0;
                              }
                              else
                              {
                                if (v892)
                                  v893 = (uint64_t ***)(v892 - 3);
                                else
                                  v893 = 0;
                                if (*((unsigned __int8 *)v893 + 16) - 29 >= 0xB)
                                  v894 = 0;
                                else
                                  v894 = v893;
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v894[5] + 5), v894);
                              v895 = v894[3];
                              v896 = v894[4];
                              *v896 = (uint64_t *)v895;
                              v895[1] = (uint64_t *)v896;
                              v894[3] = 0;
                              v894[4] = 0;
                              llvm::Value::deleteValue((llvm::Value *)v894);
                              v897 = llvm::ConstantInt::get(v947[0], 0, 0);
                              sub_1C477667C(v920, (uint64_t)v897, (uint64_t)v930);
                              sub_1C477667C(v920, (uint64_t)v912, (uint64_t)v923);
                              llvm::ScalarEvolution::forgetLoop((int32x2_t *)a1[4], (const llvm::Loop *)*a1);
                              llvm::Value::doRAUW(v936, v861, (llvm::Value *)1);
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v936 + 5) + 40, (uint64_t ***)v936);
                              v898 = *((_QWORD *)v936 + 3);
                              v899 = (_QWORD *)*((_QWORD *)v936 + 4);
                              *v899 = v898;
                              *(_QWORD *)(v898 + 8) = v899;
                              *((_QWORD *)v936 + 3) = 0;
                              *((_QWORD *)v936 + 4) = 0;
                              llvm::Value::deleteValue(v936);
                              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v109, v909, (llvm::Value *)1);
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v109 + 40) + 40, (uint64_t ***)v109);
                              v900 = *(_QWORD *)(v109 + 24);
                              v901 = *(_QWORD **)(v109 + 32);
                              *v901 = v900;
                              *(_QWORD *)(v900 + 8) = v901;
                              *(_QWORD *)(v109 + 24) = 0;
                              *(_QWORD *)(v109 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v109);
                              sub_1C50D05E0((uint64_t)&v954);
LABEL_1083:
                              if (v975 != &v977)
                                free(v975);
                              if (v969 != &v971)
                                free(v969);
                              v105 = !v625;
                              if ((const char **)v978 != &v979)
                                free((void *)v978);
                              return v105;
                            }
                            v885 = v978;
                            v886 = v978 + 16 * DWORD2(v978);
                            v887 = (unsigned __int8 **)(v881 + 36);
                            while (1)
                            {
                              v888 = *(_DWORD *)v885;
                              v889 = *(unsigned __int8 **)(v885 + 8);
                              if (v889)
                              {
                                if (!v888)
                                {
                                  *(_QWORD *)&v940 = *(_QWORD *)(v885 + 8);
                                  llvm::MetadataTracking::track((uint64_t)&v940, v889, 2);
                                  v890 = *v887;
                                  goto LABEL_1393;
                                }
                              }
                              else
                              {
                                v890 = *v887;
                                if (!*v887 && (*((_BYTE *)v881 + 119) & 0x20) == 0)
                                  goto LABEL_1390;
                                if (!v888)
                                {
                                  *(_QWORD *)&v940 = 0;
LABEL_1393:
                                  if (v890)
                                    llvm::MetadataTracking::untrack((uint64_t)(v881 + 36), v890);
                                  v891 = (unsigned __int8 *)v940;
                                  *v887 = (unsigned __int8 *)v940;
                                  if (v891)
                                    llvm::MetadataTracking::retrack((uint64_t)&v940, v891, (uint64_t)(v881 + 36));
                                  goto LABEL_1390;
                                }
                              }
                              llvm::Value::setMetadata(v883, *(_DWORD *)v885, (llvm::MDNode *)v889);
LABEL_1390:
                              v885 += 16;
                              if (v885 == v886)
                                goto LABEL_1397;
                            }
                          }
                          v851 = ***v848;
                          v852 = *(_QWORD *)(v851 + 152);
                          v853 = *(unsigned int *)(v851 + 168);
                          if ((_DWORD)v853)
                          {
                            LODWORD(v854) = (v853 - 1) & ((v848 >> 4) ^ (v848 >> 9));
                            v855 = (uint64_t ****)(v852 + 16 * v854);
                            v856 = *v855;
                            if (*v855 == v848)
                            {
LABEL_1342:
                              v859 = v855[1];
                              v860 = (uint64_t)*v859;
                              v849 = (const char *)(v859 + 2);
                              v850 = v860;
                              goto LABEL_1343;
                            }
                            v857 = 1;
                            while (v856 != (uint64_t ***)-4096)
                            {
                              v858 = v854 + v857++;
                              v854 = v858 & (v853 - 1);
                              v856 = *(uint64_t ****)(v852 + 16 * v854);
                              if (v856 == v848)
                              {
                                v855 = (uint64_t ****)(v852 + 16 * v854);
                                goto LABEL_1342;
                              }
                            }
                          }
                          v855 = (uint64_t ****)(v852 + 16 * v853);
                          goto LABEL_1342;
                        }
                        v836 = ***(_QWORD ***)v920;
                        v837 = *(_QWORD *)(v836 + 152);
                        v838 = *(unsigned int *)(v836 + 168);
                        if ((_DWORD)v838)
                        {
                          LODWORD(v839) = (v838 - 1) & ((v920 >> 4) ^ (v920 >> 9));
                          v840 = (llvm::PHINode **)(v837 + 16 * v839);
                          v841 = *v840;
                          if (*v840 == v920)
                          {
LABEL_1329:
                            v844 = v840[1];
                            v847 = *(_QWORD *)v844;
                            v845 = (char *)v844 + 16;
                            v846 = v847;
                            goto LABEL_1330;
                          }
                          v842 = 1;
                          while (v841 != (llvm::PHINode *)-4096)
                          {
                            v843 = v839 + v842++;
                            v839 = v843 & (v838 - 1);
                            v841 = *(llvm::PHINode **)(v837 + 16 * v839);
                            if (v841 == v920)
                            {
                              v840 = (llvm::PHINode **)(v837 + 16 * v839);
                              goto LABEL_1329;
                            }
                          }
                        }
                        v840 = (llvm::PHINode **)(v837 + 16 * v838);
                        goto LABEL_1329;
                      }
                      v821 = ***v818;
                      v822 = *(_QWORD *)(v821 + 152);
                      v823 = *(unsigned int *)(v821 + 168);
                      if ((_DWORD)v823)
                      {
                        LODWORD(v824) = (v823 - 1) & ((v818 >> 4) ^ (v818 >> 9));
                        v825 = (uint64_t ****)(v822 + 16 * v824);
                        v826 = *v825;
                        if (*v825 == v818)
                        {
LABEL_1311:
                          v829 = v825[1];
                          v830 = (uint64_t)*v829;
                          v819 = (const char *)(v829 + 2);
                          v820 = v830;
                          goto LABEL_1312;
                        }
                        v827 = 1;
                        while (v826 != (uint64_t ***)-4096)
                        {
                          v828 = v824 + v827++;
                          v824 = v828 & (v823 - 1);
                          v826 = *(uint64_t ****)(v822 + 16 * v824);
                          if (v826 == v818)
                          {
                            v825 = (uint64_t ****)(v822 + 16 * v824);
                            goto LABEL_1311;
                          }
                        }
                      }
                      v825 = (uint64_t ****)(v822 + 16 * v823);
                      goto LABEL_1311;
                    }
                    v809 = 1;
                    while (v808 != (uint64_t ***)-4096)
                    {
                      v810 = v806 + v809++;
                      v806 = v810 & (v805 - 1);
                      v808 = *(uint64_t ****)(v804 + 16 * v806);
                      if (v808 == v800)
                      {
                        v807 = (uint64_t ****)(v804 + 16 * v806);
                        goto LABEL_1291;
                      }
                    }
                  }
                  v807 = (uint64_t ****)(v804 + 16 * v805);
                  goto LABEL_1291;
                }
                v783 = ***v780;
                v784 = *(_QWORD *)(v783 + 152);
                v785 = *(unsigned int *)(v783 + 168);
                if ((_DWORD)v785)
                {
                  LODWORD(v786) = (v785 - 1) & ((v780 >> 4) ^ (v780 >> 9));
                  v787 = (uint64_t ****)(v784 + 16 * v786);
                  v788 = *v787;
                  if (*v787 == v780)
                  {
LABEL_1280:
                    v796 = v787[1];
                    v797 = (uint64_t)*v796;
                    v781 = (const char *)(v796 + 2);
                    v782 = v797;
                    goto LABEL_1281;
                  }
                  v789 = 1;
                  while (v788 != (uint64_t ***)-4096)
                  {
                    v790 = v786 + v789++;
                    v786 = v790 & (v785 - 1);
                    v788 = *(uint64_t ****)(v784 + 16 * v786);
                    if (v788 == v780)
                    {
                      v787 = (uint64_t ****)(v784 + 16 * v786);
                      goto LABEL_1280;
                    }
                  }
                }
                v787 = (uint64_t ****)(v784 + 16 * v785);
                goto LABEL_1280;
              }
              v766 = ***v761;
              v767 = *(_QWORD *)(v766 + 152);
              v768 = *(unsigned int *)(v766 + 168);
              if ((_DWORD)v768)
              {
                LODWORD(v769) = (v768 - 1) & ((v761 >> 4) ^ (v761 >> 9));
                v770 = (uint64_t ****)(v767 + 16 * v769);
                v771 = *v770;
                if (*v770 == v761)
                {
LABEL_1257:
                  v774 = v770[1];
                  v777 = *v774;
                  v775 = (char *)(v774 + 2);
                  v776 = v777;
                  goto LABEL_1258;
                }
                v772 = 1;
                while (v771 != (uint64_t ***)-4096)
                {
                  v773 = v769 + v772++;
                  v769 = v773 & (v768 - 1);
                  v771 = *(uint64_t ****)(v767 + 16 * v769);
                  if (v771 == v761)
                  {
                    v770 = (uint64_t ****)(v767 + 16 * v769);
                    goto LABEL_1257;
                  }
                }
              }
              v770 = (uint64_t ****)(v767 + 16 * v768);
              goto LABEL_1257;
            }
            v749 = ***(_QWORD ***)v917;
            v750 = *(_QWORD *)(v749 + 152);
            v751 = *(unsigned int *)(v749 + 168);
            if ((_DWORD)v751)
            {
              LODWORD(v752) = (v751 - 1) & (v629 ^ (v917 >> 9));
              v753 = (llvm::PHINode **)(v750 + 16 * v752);
              v754 = *v753;
              if (*v753 == v917)
              {
LABEL_1241:
                v757 = v753[1];
                v760 = *(llvm::ConstantExpr ***)v757;
                v758 = (char *)v757 + 16;
                v759 = v760;
                goto LABEL_1242;
              }
              v755 = 1;
              while (v754 != (llvm::PHINode *)-4096)
              {
                v756 = v752 + v755++;
                v752 = v756 & (v751 - 1);
                v754 = *(llvm::PHINode **)(v750 + 16 * v752);
                if (v754 == v917)
                {
                  v753 = (llvm::PHINode **)(v750 + 16 * v752);
                  goto LABEL_1241;
                }
              }
            }
            v753 = (llvm::PHINode **)(v750 + 16 * v751);
            goto LABEL_1241;
          }
          v630 = ***(_QWORD ***)v917;
          v631 = *(_QWORD *)(v630 + 152);
          v632 = *(unsigned int *)(v630 + 168);
          if ((_DWORD)v632)
          {
            LODWORD(v633) = (v632 - 1) & (v629 ^ (v917 >> 9));
            v634 = (llvm::PHINode **)(v631 + 16 * v633);
            v635 = *v634;
            if (*v634 == v917)
            {
LABEL_1230:
              v740 = v634[1];
              v743 = *(llvm::ConstantExpr ***)v740;
              v741 = (char *)v740 + 16;
              v742 = v743;
              goto LABEL_1231;
            }
            v636 = 1;
            while (v635 != (llvm::PHINode *)-4096)
            {
              v637 = v633 + v636++;
              v633 = v637 & (v632 - 1);
              v635 = *(llvm::PHINode **)(v631 + 16 * v633);
              if (v635 == v917)
              {
                v634 = (llvm::PHINode **)(v631 + 16 * v633);
                goto LABEL_1230;
              }
            }
          }
          v634 = (llvm::PHINode **)(v631 + 16 * v632);
          goto LABEL_1230;
        }
        v193 = 1;
        while (v192 != (llvm::PHINode *)-4096)
        {
          v194 = v190 + v193++;
          v190 = v194 & (v189 - 1);
          v191 = v188 + 48 * v190;
          v192 = *(llvm::PHINode **)(v191 + 24);
          if (v192 == v917)
            goto LABEL_723;
        }
      }
      v191 = v188 + 48 * v189;
      goto LABEL_723;
    }
  }
  return v105;
}

uint64_t sub_1C5B69FBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  llvm *v19;
  uint64_t SCEVIter;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int64_t v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  const llvm::DataLayout *v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int64_t v40;
  unint64_t v41;
  int v42;
  _BOOL4 v43;
  llvm::Value *v44;
  const llvm::DataLayout *v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int *v49;
  unsigned int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  llvm *v64;
  llvm::Value *v65;
  llvm::Value **v66;
  llvm::Value **v67;
  llvm::Value **v68;
  int v69;
  llvm::Value **v70;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  llvm *v98;
  llvm::Type **v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  llvm::Type **v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int64_t v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  BOOL v121;
  int v122;
  int64_t v123;
  unint64_t v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t v129;
  char v130;
  int v131;
  int64_t v132;
  unint64_t v133;
  int v134;
  llvm::Type *v135;
  const llvm::DataLayout *Constant;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  char v146;
  unint64_t v148;
  int v149;
  llvm::Value **v150;
  int v151;
  llvm::Value **v152;
  uint64_t v153;
  int v154;
  unint64_t __n;
  uint64_t v157;
  llvm *v159;
  _QWORD *v161;
  unsigned int v162;
  _QWORD *v163;
  unsigned int v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  _BYTE v169[64];
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  int v174;
  _BYTE v175[128];
  _QWORD *v176;
  unsigned int v177;
  _QWORD v178[2];
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[2];
  int v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  _BYTE v190[64];
  _QWORD v191[11];

  v191[9] = *MEMORY[0x1E0C80C00];
  v183[0] = 0;
  v183[1] = 0;
  v184 = 0;
  v186 = 0;
  v187 = 0;
  v185 = 0;
  v178[0] = 0;
  v178[1] = 0;
  v179 = 0;
  v181 = 0;
  v182 = 0;
  v180 = 0;
  v4 = 1;
  v191[0] = 1;
  do
  {
    v191[v4] = -4096;
    v4 += 2;
  }
  while (v4 != 9);
  v188 = v190;
  v189 = 0x1000000000;
  v5 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v5)
  {
    v6 = 0;
    goto LABEL_243;
  }
  v7 = 0;
  v154 = -1;
  v148 = *(unsigned int *)(a2 + 8);
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v7);
    v9 = *(_QWORD *)(v8 - 32);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(v10 + 104);
    v12 = *(_DWORD *)(v10 + 120);
    if (!v12)
      goto LABEL_12;
    v13 = v12 - 1;
    v14 = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    v15 = v11 + 48 * v14;
    v16 = *(_QWORD *)(v15 + 24);
    if (v16 != v9)
    {
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & v13;
        v15 = v11 + 48 * (v18 & v13);
        v16 = *(_QWORD *)(v15 + 24);
        if (v16 == v9)
          goto LABEL_13;
      }
LABEL_12:
      v15 = v11 + 48 * v12;
    }
LABEL_13:
    v19 = *(llvm **)(v8 - 64);
    if (v15 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v15 + 40)) == 0)
      SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, v9);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8) + 32);
    v22 = *(unsigned int *)(v21 + 32);
    if (v22 > 0x40)
    {
      v23 = (_QWORD *)operator new[]();
      memcpy(v23, *(const void **)(v21 + 24), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v23 = *(_QWORD **)(v21 + 24);
    }
    sub_1C4768AD0(*(_QWORD *)(a1 + 56), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v7) - 64));
    v26 = v25;
    if ((_DWORD)v24 == 1)
    v27 = ((unint64_t)(v26 + 7) >> 3);
    if (v22 >= 0x41)
    {
      v30 = 0;
      v31 = (unint64_t)(v22 + 63) >> 6;
      do
      {
        v32 = v31-- < 1;
        if (v32)
          break;
        v33 = v23[v31];
        v30 += __clz(v33);
      }
      while (!v33);
      v34 = v22 | 0xFFFFFFC0;
      if ((v22 & 0x3F) == 0)
        v34 = 0;
      if ((v22 - v30 - v34) < 0x41 && *v23 == v27)
      {
LABEL_112:
        sub_1C518D044(v183, (uint64_t *)(*(_QWORD *)a2 + 8 * v7));
        goto LABEL_113;
      }
      v177 = v22;
      v28 = operator new[]();
      v176 = (_QWORD *)v28;
      v29 = v177;
      memcpy((void *)v28, v23, (((unint64_t)v177 + 63) >> 3) & 0x3FFFFFF8);
      if (v29 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v176);
        goto LABEL_35;
      }
    }
    else
    {
      if (v23 == (_QWORD *)v27)
        goto LABEL_112;
      v177 = v22;
      v28 = (uint64_t)v23;
      v29 = v22;
    }
    v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
    if (!v29)
      v35 = 0;
    v176 = (_QWORD *)(v35 & ~v28);
LABEL_35:
    llvm::APInt::operator++((uint64_t)&v176);
    v37 = v177;
    v177 = 0;
    if (v37 < 0x41)
    {
      v38 = v176 == (_QWORD *)v27;
LABEL_37:
      if (v38)
        goto LABEL_112;
      goto LABEL_53;
    }
    v39 = 0;
    v40 = (unint64_t)(v37 + 63) >> 6;
    do
    {
      v32 = v40-- < 1;
      if (v32)
        break;
      v41 = v176[v40];
      v39 += __clz(v41);
    }
    while (!v41);
    v42 = v37 | 0xFFFFFFC0;
    if ((v37 & 0x3F) == 0)
      v42 = 0;
    if ((v37 - v39 - v42) >= 0x41)
    {
      if (!v176)
        goto LABEL_53;
      v43 = 0;
    }
    else
    {
      v38 = *v176 == v27;
      v43 = v38;
      if (!v176)
        goto LABEL_37;
    }
    MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
    if (v177 >= 0x41 && v176)
    {
      MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
      if (v43)
        goto LABEL_112;
    }
    else if (v43)
    {
      goto LABEL_112;
    }
LABEL_53:
    v44 = *(llvm::Value **)(a1 + 56);
    if (a4 == 1)
    {
      v150 = llvm::isBytewiseValue(v19, v44, v36);
      v152 = 0;
    }
    else
    {
      v150 = 0;
      v152 = sub_1C5B6AEF8((llvm::Value **)v19, v44);
    }
    v46 = 0;
    LODWORD(v189) = 0;
    v47 = v7 + 1;
    if (v7 + 1 < v5)
    {
      v46 = 0;
      do
      {
        if (v46 >= HIDWORD(v189))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v188, (uint64_t)v190, v46 + 1, 4);
          v46 = v189;
        }
        *((_DWORD *)v188 + v46) = v47;
        v46 = v189 + 1;
        LODWORD(v189) = v189 + 1;
        ++v47;
      }
      while ((_DWORD)v5 != v47);
    }
    v48 = v154;
    if (v7)
    {
      do
      {
        if (v46 >= HIDWORD(v189))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v188, (uint64_t)v190, v46 + 1, 4);
          v46 = v189;
        }
        *((_DWORD *)v188 + v46) = v48;
        v46 = v189 + 1;
        LODWORD(v189) = v189 + 1;
        --v48;
      }
      while (v48 != -1);
    }
    if (v46)
    {
      v49 = (unsigned int *)v188;
      v50 = (unsigned int *)((char *)v188 + 4 * v46);
      __n = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      while (1)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * *v49) - 32);
        v52 = *(_QWORD *)(a1 + 32);
        v53 = *(_QWORD *)(v52 + 104);
        v54 = *(_DWORD *)(v52 + 120);
        if (!v54)
          goto LABEL_73;
        v55 = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        v56 = v53 + 48 * v55;
        v57 = *(_QWORD *)(v56 + 24);
        if (v57 != v51)
          break;
LABEL_74:
        if (v56 == v53 + 48 * v54 || (v60 = *(_QWORD *)(v56 + 40)) == 0)
          v60 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v52, v51);
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 32) + 8) + 32);
        v62 = *(unsigned int *)(v61 + 32);
        if (v62 > 0x40)
        {
          v63 = (_QWORD *)operator new[]();
          memcpy(v63, *(const void **)(v61 + 24), ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v63 = *(_QWORD **)(v61 + 24);
        }
        if (v22 > 0x40)
        {
          if (memcmp(v23, v63, __n))
            goto LABEL_93;
        }
        else if (v23 != v63)
        {
          goto LABEL_93;
        }
        v64 = *(llvm **)(*(_QWORD *)(*(_QWORD *)a2 + 8 * *v49) - 64);
        v65 = *(llvm::Value **)(a1 + 56);
        if (a4 == 1)
        {
          v66 = llvm::isBytewiseValue(v64, v65, v45);
          v67 = 0;
        }
        else
        {
          v67 = sub_1C5B6AEF8((llvm::Value **)v64, v65);
          v66 = 0;
        }
        if (!llvm::isConsecutiveAccess(*(llvm **)(*(_QWORD *)a2 + 8 * v7), *(llvm::Value **)(*(_QWORD *)a2 + 8 * *v49), *(llvm::Value **)(a1 + 56), *(const llvm::DataLayout **)(a1 + 32), 0))
        {
          v69 = 0;
          goto LABEL_99;
        }
        if (a4 == 1)
        {
          v68 = v150;
          if (*((unsigned __int8 *)v150 + 16) - 11 < 2)
            v68 = v66;
          if (v68 == v66)
          {
            v150 = v66;
LABEL_110:
            sub_1C518D044(v178, (uint64_t *)(*(_QWORD *)a2 + 8 * *v49));
            sub_1C518D044(v183, (uint64_t *)(*(_QWORD *)a2 + 8 * v7));
            v72 = *(_QWORD *)(*(_QWORD *)a2 + 8 * *v49);
            sub_1C61B5A08(v191, (uint64_t *)(*(_QWORD *)a2 + 8 * v7))[1] = v72;
            v69 = 11;
            goto LABEL_99;
          }
          v150 = v68;
LABEL_93:
          v69 = 12;
          goto LABEL_99;
        }
        v70 = v152;
        if (*((unsigned __int8 *)v152 + 16) - 11 < 2)
          v70 = v67;
        if (v70 == v67)
        {
          v152 = v67;
          goto LABEL_110;
        }
        v152 = v70;
        v69 = 12;
LABEL_99:
        if (v62 >= 0x41 && v63 != 0)
          MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
        if ((v69 == 12 || !v69) && ++v49 != v50)
          continue;
        goto LABEL_113;
      }
      v58 = 1;
      while (v57 != -4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v56 = v53 + 48 * v55;
        v57 = *(_QWORD *)(v56 + 24);
        if (v57 == v51)
          goto LABEL_74;
      }
LABEL_73:
      v56 = v53 + 48 * v54;
      goto LABEL_74;
    }
LABEL_113:
    if (v22 >= 0x41 && v23)
      MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    ++v7;
    ++v154;
    v5 = v148;
  }
  while (v7 != v148);
  v6 = 0;
  v73 = v185;
  v74 = v186;
  v171 = v175;
  v172 = v175;
  v173 = 16;
  v174 = 0;
  if (v185 == v186)
    goto LABEL_243;
  v146 = 0;
  v75 = v178[0];
  v76 = v179;
  v77 = v179 - 1;
  v151 = v179;
  v149 = v179 - 1;
  v153 = v178[0];
  while (2)
  {
    v78 = *v73;
    v170 = *v73;
    if (!v76)
    {
LABEL_127:
      LODWORD(v83) = 0;
      v165 = (uint64_t *)v169;
      v166 = (uint64_t *)v169;
      v167 = 8;
      v84 = v78;
      v168 = 0;
      if (v76)
      {
LABEL_128:
        v85 = ((v84 >> 4) ^ (v84 >> 9)) & v77;
        v86 = *(_QWORD *)(v75 + 8 * v85);
        if (v84 != v86)
        {
          v87 = 1;
          while (v86 != -4096)
          {
            v88 = v85 + v87++;
            v85 = v88 & v77;
            v86 = *(_QWORD *)(v75 + 8 * v85);
            if (v84 == v86)
              goto LABEL_135;
          }
          goto LABEL_133;
        }
        goto LABEL_135;
      }
LABEL_133:
      while (v184)
      {
        v89 = (v184 - 1) & ((v84 >> 4) ^ (v84 >> 9));
        v90 = *(_QWORD *)(v183[0] + 8 * v89);
        if (v84 != v90)
        {
          v96 = 1;
          while (v90 != -4096)
          {
            v97 = v89 + v96++;
            v89 = v97 & (v184 - 1);
            v90 = *(_QWORD *)(v183[0] + 8 * v89);
            if (v84 == v90)
              goto LABEL_135;
          }
          break;
        }
LABEL_135:
        v91 = (char *)sub_1C477672C((uint64_t)&v171, v84);
        if (v172 == v171)
          v92 = (uint64_t *)((char *)&v173 + 4);
        else
          v92 = &v173;
        if (v91 != &v172[8 * *(unsigned int *)v92])
          break;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v165, v84);
        sub_1C4768AD0(*(_QWORD *)(a1 + 56), **(_QWORD **)(v84 - 64));
        v95 = v94;
        if ((_DWORD)v93 == 1)
        LODWORD(v83) = v83 + ((unint64_t)(v95 + 7) >> 3);
        v84 = sub_1C61B5A08(v191, &v170)[1];
        v170 = v84;
        if (v76)
          goto LABEL_128;
      }
      v98 = *(llvm **)(v78 - 64);
      v99 = *(llvm::Type ***)(v78 - 32);
      v100 = *(_QWORD *)(a1 + 32);
      v101 = *(_QWORD *)(v100 + 104);
      v102 = *(_DWORD *)(v100 + 120);
      if (v102)
      {
        v103 = (v102 - 1) & ((v99 >> 4) ^ (v99 >> 9));
        v104 = v101 + 48 * v103;
        v105 = *(llvm::Type ***)(v104 + 24);
        if (v105 == v99)
        {
LABEL_154:
          if (v104 == v101 + 48 * v102 || (v108 = *(_QWORD *)(v104 + 40)) == 0)
            v108 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v100, *(_QWORD *)(v78 - 32));
          v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 32) + 8) + 32);
          v110 = *(unsigned int *)(v109 + 32);
          v111 = v83;
          v157 = v108;
          v159 = v98;
          if (v110 >= 0x41)
          {
            v113 = operator new[]();
            memcpy((void *)v113, *(const void **)(v109 + 24), ((unint64_t)(v110 + 63) >> 3) & 0x3FFFFFF8);
            v114 = 0;
            v115 = (unint64_t)(v110 + 63) >> 6;
            do
            {
              v32 = v115-- < 1;
              if (v32)
                break;
              v116 = *(_QWORD *)(v113 + 8 * v115);
              v114 += __clz(v116);
            }
            while (!v116);
            v117 = v110 | 0xFFFFFFC0;
            if ((v110 & 0x3F) == 0)
              v117 = 0;
            if ((v110 - v114 - v117) < 0x41 && *(_QWORD *)v113 == v83)
            {
              v162 = v110;
              goto LABEL_195;
            }
            v164 = v110;
            v112 = operator new[]();
            v163 = (_QWORD *)v112;
            v118 = v164;
            memcpy((void *)v112, (const void *)v113, (((unint64_t)v164 + 63) >> 3) & 0x3FFFFFF8);
            if (v118 > 0x40)
            {
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v163);
              goto LABEL_174;
            }
          }
          else
          {
            v112 = *(_QWORD *)(v109 + 24);
            if (v112 == v83)
            {
              v162 = v110;
              v113 = v83;
              v83 = v83;
LABEL_194:
              v127 = v110;
              goto LABEL_196;
            }
            v164 = v110;
            v113 = v112;
            v118 = v110;
          }
          v119 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v118;
          if (!v118)
            v119 = 0;
          v163 = (_QWORD *)(v119 & ~v112);
LABEL_174:
          llvm::APInt::operator++((uint64_t)&v163);
          v120 = v164;
          v164 = 0;
          if (v120 < 0x41)
          {
            v121 = v163 == (_QWORD *)v111;
            goto LABEL_176;
          }
          v122 = 0;
          v123 = (unint64_t)(v120 + 63) >> 6;
          do
          {
            v32 = v123-- < 1;
            if (v32)
              break;
            v124 = v163[v123];
            v122 += __clz(v124);
          }
          while (!v124);
          v125 = v120 | 0xFFFFFFC0;
          if ((v120 & 0x3F) == 0)
            v125 = 0;
          if ((v120 - v122 - v125) >= 0x41)
          {
            if (!v163)
              goto LABEL_221;
            v126 = 1;
          }
          else
          {
            v121 = *v163 == v111;
            v126 = *v163 != v111;
            if (!v163)
            {
LABEL_176:
              if (!v121)
                goto LABEL_221;
LABEL_192:
              v162 = v110;
              if (v110 < 0x41)
              {
                v83 = v113;
                goto LABEL_194;
              }
LABEL_195:
              v83 = operator new[]();
              v161 = (_QWORD *)v83;
              v127 = v162;
              memcpy((void *)v83, (const void *)v113, (((unint64_t)v162 + 63) >> 3) & 0x3FFFFFF8);
              if (v127 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v161);
                goto LABEL_199;
              }
LABEL_196:
              if (v127)
                v128 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v127;
              else
                v128 = 0;
              v161 = (_QWORD *)(v128 & ~v83);
LABEL_199:
              llvm::APInt::operator++((uint64_t)&v161);
              v129 = v162;
              v162 = 0;
              if (v129 >= 0x41)
              {
                v131 = 0;
                v132 = (unint64_t)(v129 + 63) >> 6;
                do
                {
                  v32 = v132-- < 1;
                  if (v32)
                    break;
                  v133 = v161[v132];
                  v131 += __clz(v133);
                }
                while (!v133);
                v130 = 0;
                v134 = v129 | 0xFFFFFFC0;
                if ((v129 & 0x3F) == 0)
                  v134 = 0;
                if ((v129 - v131 - v134) <= 0x40)
                  v130 = *v161 == v111;
                if (v161)
                {
                  MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
                  if (v162 >= 0x41)
                  {
                    if (v161)
                      MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
                  }
                }
              }
              else
              {
                v130 = v161 == (_QWORD *)v111;
              }
              llvm::DataLayout::getIndexType(*(llvm::DataLayout **)(a1 + 56), *v99);
              Constant = (const llvm::DataLayout *)llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 32), v135, v111, 0);
              __n = __n & 0xFFFFFFFFFFFF0000 | ((unint64_t)*(unsigned __int16 *)(v78 + 18) >> 1) & 0x3F | 0x100;
              if (sub_1C5B6B1E8(a1, v99, Constant, __n, v159, v78, (uint64_t)&v165, v157, a3, v130, 0))
              {
                if (v166 == v165)
                  v137 = (uint64_t *)((char *)&v167 + 4);
                else
                  v137 = &v167;
                v138 = *(unsigned int *)v137;
                v75 = v153;
                if ((_DWORD)v138)
                {
                  v139 = 8 * v138;
                  v140 = v166;
                  while ((unint64_t)*v140 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v140;
                    v139 -= 8;
                    if (!v139)
                      goto LABEL_229;
                  }
                }
                else
                {
                  v140 = v166;
                }
                v141 = (char *)&v166[v138];
                if (v140 != (uint64_t *)v141)
                {
                  v142 = *v140;
LABEL_225:
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, v142);
                  v143 = (unint64_t *)(v140 + 1);
                  while (v143 != (unint64_t *)v141)
                  {
                    v144 = *v143++;
                    v142 = v144;
                    if (v144 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v140 = (uint64_t *)(v143 - 1);
                      goto LABEL_225;
                    }
                  }
                }
LABEL_229:
                v146 = 1;
                goto LABEL_230;
              }
LABEL_221:
              v75 = v153;
LABEL_230:
              if (v110 >= 0x41 && v113)
                MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
              if (v166 != v165)
                free(v166);
              v76 = v151;
              v77 = v149;
              goto LABEL_236;
            }
          }
          MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
          if (v164 >= 0x41 && v163)
            MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
          if (v126)
            goto LABEL_221;
          goto LABEL_192;
        }
        v106 = 1;
        while (v105 != (llvm::Type **)-4096)
        {
          v107 = v103 + v106++;
          v103 = v107 & (v102 - 1);
          v104 = v101 + 48 * v103;
          v105 = *(llvm::Type ***)(v104 + 24);
          if (v105 == v99)
            goto LABEL_154;
        }
      }
      v104 = v101 + 48 * v102;
      goto LABEL_154;
    }
    v79 = ((v78 >> 4) ^ (v78 >> 9)) & v77;
    v80 = *(_QWORD *)(v75 + 8 * v79);
    if (v78 != v80)
    {
      v81 = 1;
      while (v80 != -4096)
      {
        v82 = v79 + v81++;
        v79 = v82 & v77;
        v80 = *(_QWORD *)(v75 + 8 * v79);
        if (v78 == v80)
          goto LABEL_236;
      }
      goto LABEL_127;
    }
LABEL_236:
    if (++v73 != v74)
      continue;
    break;
  }
  if (v172 != v171)
    free(v172);
  v6 = v146;
LABEL_243:
  if (v188 != v190)
    free(v188);
  if ((v191[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v191[1], 8);
  sub_1C6176BF8(v178);
  sub_1C6176BF8(v183);
  return v6 & 1;
}

llvm::Value **sub_1C5B6AEF8(llvm::Value **a1, _BYTE *a2)
{
  llvm::Value **result;
  int8x8_t v5;
  const char *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  llvm::PoisonValue *v11;
  llvm::PoisonValue *v12;
  llvm::Type *v13;
  llvm::Value ***v14;
  int8x8_t v15;

  result = 0;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    sub_1C4768AD0((uint64_t)a2, (uint64_t)*a1);
    v7 = v5;
    if ((_DWORD)v6 == 1)
    {
      v15 = v5;
      v7 = v15;
    }
    result = 0;
    if (v7)
    {
      if ((v7.i8[0] & 7) == 0)
      {
        v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] <= 1uLL)
        {
          if (*a2 || *(_QWORD *)&v7 > 0x87uLL)
          {
            return 0;
          }
          else
          {
            v9 = *(_QWORD *)&v7 >> 3;
            if (v9 != 16)
            {
              v10 = 0x10 / v9;
              llvm::ArrayType::get(*a1, (llvm::Type *)(0x10 / v9));
              v12 = v11;
              v13 = (llvm::Type *)operator new(8 * v10);
              v14 = (llvm::Value ***)v13;
              do
                *v14++ = a1;
              while (v14 != (llvm::Value ***)((char *)v13 + 8 * v10));
              a1 = llvm::ConstantArray::get(v12, v13, v10);
              operator delete(v13);
            }
            return a1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5B6B008(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_1C5B6B078(a1, a2);
  }
  else
  {
    *v3 = *(_QWORD *)a2;
    v3[1] = v3 + 3;
    v3[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C614D378((uint64_t)(v3 + 1), a2 + 8);
    result = (uint64_t)(v3 + 11);
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1C5B6B078(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0x2E8BA2E8BA2E8BALL)
    sub_1C4764EE4();
  v7 = 88 * v5;
  v8 = (char *)operator new(88 * v5);
  v9 = &v8[88 * v2];
  __p = v8;
  v16 = v9;
  v18 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 1) = v9 + 24;
  *((_QWORD *)v9 + 2) = 0x800000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614D378((uint64_t)(v9 + 8), a2 + 8);
  v17 = v9 + 88;
  sub_1C631AED4(a1, &__p);
  v10 = a1[1];
  v11 = v16;
LABEL_11:
  for (i = v17; i != v11; i -= 88)
  {
    v17 = i - 88;
    v13 = (char *)*((_QWORD *)i - 10);
    if (v13 != i - 64)
    {
      free(v13);
      goto LABEL_11;
    }
  }
  if (__p)
    operator delete(__p);
  return v10;
}

BOOL sub_1C5B6B1E8(uint64_t a1, llvm::Type **a2, const llvm::DataLayout *a3, __int16 a4, llvm *this, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  llvm::Value **v17;
  llvm::Value **v18;
  unsigned int v19;
  uint64_t LoopPredecessor;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  llvm::Type *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  uint64_t v32;
  llvm::Type *v33;
  uint64_t *v34;
  llvm *v35;
  llvm *v36;
  _BOOL8 isSafeToExpand;
  _QWORD *v38;
  llvm::Instruction *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  llvm *v43;
  llvm::Instruction **v44;
  _QWORD *v45;
  llvm::Instruction *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  llvm::UndefValue *v54;
  llvm::PointerType *v55;
  uint64_t MemSet;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t ***v63;
  unint64_t *v64;
  unint64_t v65;
  llvm::AAMDNodes *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t *v70;
  llvm::AAMDNodes *v71;
  unsigned __int8 *v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  uint64_t **v75;
  llvm::BasicBlock *v76;
  char *DefinedAccess;
  llvm::OptimizationRemarkEmitter *v78;
  uint64_t v79;
  llvm::MemoryAccess *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t ***v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ****v99;
  uint64_t ***v100;
  int v101;
  int v102;
  uint64_t ***v103;
  char *v104;
  size_t v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  int v115;
  _QWORD *v116;
  char *v117;
  size_t v118;
  size_t v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  void **v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t *v130;
  unint64_t v131;
  int32x2_t **v132;
  __int32 v133;
  int32x2_t v134;
  __int32 v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  llvm::UndefValue *v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t *v143;
  unint64_t v144;
  llvm::PointerType **v146;
  __int16 v147;
  uint64_t **v148;
  uint64_t v149;
  unsigned __int8 *v152;
  unsigned int *v153;
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  char v158;
  void *__dst[2];
  char v160;
  void *v161;
  char v162;
  void *v163[2];
  char v164;
  void *__p;
  char v166;
  _BYTE v167[768];
  void *v168[2];
  uint64_t v169;
  uint64_t v170;
  llvm::AAMDNodes *v171[2];
  __int128 v172;
  int v173;
  int v174;
  const char *v175;
  const char *v176;
  uint64_t v177;
  char v178;
  char v179;
  void *v180;
  uint64_t v181;
  _BYTE v182[260];
  int v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v17 = llvm::isBytewiseValue(this, *(llvm::Value **)(a1 + 56), a3);
  if (v17)
    v18 = 0;
  else
    v18 = sub_1C5B6AEF8((llvm::Value **)this, *(_BYTE **)(a1 + 56));
  v19 = *((_DWORD *)*a2 + 2);
  if ((v19 & 0xFE) == 0x12)
    v19 = *(_DWORD *)(**((_QWORD **)*a2 + 2) + 8);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)a1);
  if (!LoopPredecessor)
    goto LABEL_13;
  v21 = *(_QWORD *)(LoopPredecessor + 40);
  if (v21 == LoopPredecessor + 40)
    goto LABEL_13;
  if (v21)
    v22 = v21 - 24;
  else
    v22 = 0;
  if (*(_BYTE *)(v22 + 16) == 30)
  {
    if ((*(_DWORD *)(v22 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_13:
      v23 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v23 = 0;
    switch(*(_BYTE *)(v22 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_18;
      case 0x1E:
        __break(1u);
        goto LABEL_198;
      case 0x1F:
        v24 = (*(_DWORD *)(v22 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_198:
        v24 = (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v24 = *(_DWORD *)(v22 + 80) + 1;
        break;
      default:
        goto LABEL_13;
    }
    if (v24 != 1)
      goto LABEL_13;
  }
  v23 = LoopPredecessor;
LABEL_18:
  v146 = v18;
  v25 = (llvm::Type *)(v19 >> 8);
  v147 = a4;
  v149 = v23;
  v28 = *(_QWORD **)(v23 + 40);
  v27 = (_QWORD *)(v23 + 40);
  v26 = v28;
  if (v28 == v27)
  {
    v29 = 0;
  }
  else
  {
    if (v26)
      v30 = (uint64_t)(v26 - 3);
    else
      v30 = 0;
    if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
      v29 = 0;
    else
      v29 = v30;
  }
  sub_1C4773D54((uint64_t)v168, v29, 0, 0, 0);
  sub_1C50D02DC((uint64_t)v167, *(uint64_t ****)(a1 + 32), *(_QWORD *)(a1 + 56), (uint64_t)"loop-idiom", 1);
  v153 = (unsigned int *)v167;
  v154 = 0;
  v31 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v170 + 1912), v25);
  llvm::DataLayout::getIndexType(*(llvm::DataLayout **)(a1 + 56), *a2);
  v33 = (llvm::Type *)v32;
  v34 = *(uint64_t **)(a8 + 32);
  v35 = (llvm *)*v34;
  if (a10)
  {
    sub_1C5B6BEA0(*v34, a9, v32, a3, *(_QWORD *)(a1 + 32));
    v35 = v36;
  }
  isSafeToExpand = llvm::isSafeToExpand(v35, *(const llvm::SCEV **)(a1 + 32), (llvm::ScalarEvolution *)1);
  if (!isSafeToExpand)
    goto LABEL_192;
  v38 = (_QWORD *)*v27;
  if ((_QWORD *)*v27 == v27)
  {
    v39 = 0;
  }
  else
  {
    v40 = v38 ? (uint64_t)(v38 - 3) : 0;
    v39 = *(unsigned __int8 *)(v40 + 16) - 29 >= 0xB ? 0 : (llvm::Instruction *)v40;
  }
  v41 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v167, (llvm::Instruction **)v35, v31, v39);
  if ((sub_1C5B6BF94((uint64_t)v41, 7, *(_QWORD *)a1, a9, (uint64_t)a3, *(_QWORD *)(a1 + 8), (_QWORD *)a7) & 1) != 0)
    goto LABEL_192;
  v42 = *(_QWORD **)a1;
  if (*(_BYTE *)(a1 + 72))
  {
    if (((v42[5] - v42[4]) & 0x7FFFFFFF0) != 0 && !*v42 && !a11)
      goto LABEL_192;
  }
  sub_1C5B6C118(a9);
  v44 = (llvm::Instruction **)v43;
  if (!llvm::isSafeToExpand(v43, *(const llvm::SCEV **)(a1 + 32), (llvm::ScalarEvolution *)1))
    goto LABEL_192;
  v45 = (_QWORD *)*v27;
  if ((_QWORD *)*v27 == v27)
  {
    v46 = 0;
  }
  else
  {
    if (v45)
      v47 = (unsigned __int8 *)(v45 - 3);
    else
      v47 = 0;
    if (v47[16] - 29 >= 0xB)
      v46 = 0;
    else
      v46 = (llvm::Instruction *)v47;
  }
  v48 = a6;
  v49 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v167, v44, v33, v46);
  if (v17)
  {
    llvm::Instruction::getAAMetadata((uint64_t ***)a6, v171);
    v57 = *(_QWORD *)(a7 + 8);
    if (v57 == *(_QWORD *)a7)
      v58 = (unsigned int *)(a7 + 20);
    else
      v58 = (unsigned int *)(a7 + 16);
    v59 = *v58;
    if ((_DWORD)v59)
    {
      v60 = 8 * v59;
      v61 = *(unint64_t **)(a7 + 8);
      while (*v61 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v61;
        v60 -= 8;
        if (!v60)
          goto LABEL_71;
      }
    }
    else
    {
      v61 = *(unint64_t **)(a7 + 8);
    }
    v62 = (unint64_t *)(v57 + 8 * v59);
    if (v61 != v62)
    {
      v63 = (uint64_t ***)*v61;
LABEL_67:
      llvm::Instruction::getAAMetadata(v63, v163);
      llvm::AAMDNodes::merge(v171, (llvm::MDNode **)v163, &v185);
      *(_OWORD *)v171 = v185;
      v172 = v186;
      v64 = v61 + 1;
      while (v64 != v62)
      {
        v65 = *v64++;
        v63 = (uint64_t ***)v65;
        if (v65 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v61 = v64 - 1;
          goto LABEL_67;
        }
      }
    }
LABEL_71:
    if (v49[16] != 16 || v49 == 0)
    {
      v67 = v171[0];
      v68 = v147;
      if (!v171[0])
      {
LABEL_81:
        v71 = 0;
LABEL_84:
        v171[0] = v71;
        MemSet = (uint64_t)llvm::IRBuilderBase::CreateMemSet((uint64_t)v168, (llvm::Value *)v41, (uint64_t)v17, (uint64_t *)v49, v68, 0, v71, (llvm::MDNode *)v172, *((llvm::MDNode **)&v172 + 1));
        goto LABEL_85;
      }
      v69 = -1;
    }
    else
    {
      v70 = (uint64_t *)(v49 + 24);
      v68 = v147;
      if (*((_DWORD *)v49 + 8) >= 0x41u)
        v70 = (uint64_t *)*v70;
      v67 = v171[0];
      if (!v171[0])
        goto LABEL_81;
      v69 = *v70;
    }
    v71 = llvm::AAMDNodes::extendToTBAA(v67, v69);
    goto LABEL_84;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 40) + 56) + 40);
  v148 = (uint64_t **)sub_1C5867298(v50, "memset_pattern16", 0x10uLL, 0, (uint64_t **)(*(_QWORD *)v170 + 1576), (uint64_t)v31, (uint64_t)v31, (uint64_t)v33);
  v52 = v51;
  llvm::inferLibFuncAttributes(v50, "memset_pattern16", 0x10uLL, *(uint64_t **)(a1 + 40));
  v53 = operator new(0x78uLL);
  v54 = (llvm::UndefValue *)(v53 + 8);
  v53[13] = v53[13] & 0x38000000 | 1;
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = 0;
  *((_QWORD *)v53 + 2) = 0;
  *((_QWORD *)v53 + 3) = v53 + 8;
  v55 = *v146;
  v171[0] = (llvm::AAMDNodes *)".memset_pattern";
  LOWORD(v173) = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v53 + 8), v50, v55, 1, 8, (uint64_t)v146, (uint64_t)v171, 0, 0, 0, 0);
  v53[16] = v53[16] & 0xFFC0FF3F | 0x50080;
  if (*((llvm::Type **)v53 + 4) != v31)
    v54 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v54, v31, 0);
  *(_QWORD *)&v185 = v41;
  *((_QWORD *)&v185 + 1) = v54;
  *(_QWORD *)&v186 = v49;
  LOWORD(v173) = 257;
  MemSet = sub_1C4774778((uint64_t *)v168, v148, v52, (uint64_t *)&v185, 3, (uint64_t)v171, 0);
  v48 = a6;
LABEL_85:
  v72 = *(unsigned __int8 **)(v48 + 48);
  v152 = v72;
  if (v72)
    llvm::MetadataTracking::track((uint64_t)&v152, v72, 2);
  v73 = (unsigned __int8 **)(MemSet + 48);
  if (&v152 == (unsigned __int8 **)(MemSet + 48))
  {
    if (v152)
      llvm::MetadataTracking::untrack((uint64_t)&v152, v152);
  }
  else
  {
    if (*v73)
      llvm::MetadataTracking::untrack(MemSet + 48, *v73);
    v74 = v152;
    *v73 = v152;
    if (v74)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v152, v74, MemSet + 48);
      v152 = 0;
    }
  }
  v75 = *(uint64_t ***)(a1 + 80);
  if (v75)
  {
    v76 = *(llvm::BasicBlock **)(MemSet + 40);
    DefinedAccess = llvm::MemorySSA::createDefinedAccess(*v75, MemSet, 0, 0);
    llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v75, (uint64_t)DefinedAccess, v76, 2);
    llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 80), (llvm::MemoryDef *)DefinedAccess, 1);
  }
  v78 = *(llvm::OptimizationRemarkEmitter **)(a1 + 64);
  v79 = ****(_QWORD ****)v78;
  if (!*(_QWORD *)(v79 + 128)
    && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v79 + 72) + 48))(*(_QWORD *)(v79 + 72)))
  {
    goto LABEL_168;
  }
  v81 = *v73;
  if (*v73)
  {
    v82 = *(_QWORD *)&v81[-8 * *((unsigned int *)v81 + 2)];
    if (*(_BYTE *)v82 != 15)
      v82 = *(_QWORD *)(v82 - 8 * *(unsigned int *)(v82 + 8));
    v83 = *((_DWORD *)v81 + 1);
    LODWORD(v81) = *((unsigned __int16 *)v81 + 1);
  }
  else
  {
    v82 = 0;
    v83 = 0;
  }
  v84 = *(_QWORD *)(v149 + 56);
  LODWORD(v171[1]) = 9;
  BYTE4(v171[1]) = 2;
  *(_QWORD *)&v172 = v84;
  *((_QWORD *)&v172 + 1) = v82;
  v173 = v83;
  v174 = (int)v81;
  v175 = "loop-idiom";
  v176 = "ProcessLoopStridedStore";
  v177 = 23;
  v178 = 0;
  v179 = 0;
  v180 = v182;
  v181 = 0x400000000;
  v182[256] = 0;
  v183 = -1;
  v184 = v149;
  v171[0] = (llvm::AAMDNodes *)&off_1E814E500;
  *(_QWORD *)&v185 = "Transformed loop-strided store in ";
  *((_QWORD *)&v185 + 1) = 34;
  sub_1C53B17B4((uint64_t)&v180, (const void **)&v185);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v185, "Function", 8uLL, *(_BYTE **)(*(_QWORD *)(v48 + 40) + 56));
  v85 = sub_1C47E3888((uint64_t)v171, (uint64_t)&v185);
  v163[0] = " function into a call to ";
  v163[1] = (void *)25;
  sub_1C53B17B4(v85 + 80, (const void **)v163);
  v86 = *(_QWORD *)(MemSet - 32);
  if (!v86 || *(_BYTE *)(v86 + 16) || *(_QWORD *)(v86 + 24) != *(_QWORD *)(MemSet + 72))
    v86 = 0;
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v163, "NewFunction", 0xBuLL, (_BYTE *)v86);
  v87 = sub_1C47E3888(v85, (uint64_t)v163);
  __dst[0] = "() intrinsic";
  __dst[1] = (void *)12;
  sub_1C53B17B4(v87 + 80, (const void **)__dst);
  if (v166 < 0)
    operator delete(__p);
  if (v164 < 0)
    operator delete(v163[0]);
  if (v187 < 0)
    operator delete(*((void **)&v186 + 1));
  if (SBYTE7(v186) < 0)
    operator delete((void *)v185);
  LODWORD(v88) = *(_DWORD *)(a7 + 20);
  if ((_DWORD)v88 != *(_DWORD *)(a7 + 24))
    v183 = v181;
  v89 = *(_QWORD *)(a7 + 8);
  if (v89 == *(_QWORD *)a7)
    v88 = v88;
  else
    v88 = *(unsigned int *)(a7 + 16);
  if ((_DWORD)v88)
  {
    v90 = 8 * v88;
    v91 = *(unint64_t **)(a7 + 8);
    while (*v91 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v91;
      v90 -= 8;
      if (!v90)
        goto LABEL_158;
    }
  }
  else
  {
    v91 = *(unint64_t **)(a7 + 8);
  }
  v92 = (unint64_t *)(v89 + 8 * v88);
  if (v91 != v92)
  {
    v93 = *v91;
LABEL_126:
    v94 = *(uint64_t ****)(v93 + 40);
    if ((*((_BYTE *)v94 + 23) & 0x10) == 0)
    {
      v105 = 0;
      v104 = &byte_1C871356D;
LABEL_135:
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "FromBlock", 9uLL, v104, v105);
      v107 = sub_1C47E3888((uint64_t)v171, (uint64_t)__dst);
      if ((*(_BYTE *)(v149 + 23) & 0x10) == 0)
      {
        v118 = 0;
        v117 = &byte_1C871356D;
LABEL_144:
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v155, "ToBlock", 7uLL, v117, v118);
        sub_1C47E3888(v107, (uint64_t)v155);
        if (v158 < 0)
          operator delete(v157);
        if (v156 < 0)
          operator delete(v155[0]);
        if (v162 < 0)
          operator delete(v161);
        if (v160 < 0)
          operator delete(__dst[0]);
        v120 = v91 + 1;
        while (v120 != v92)
        {
          v121 = *v120++;
          v93 = v121;
          if (v121 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v91 = v120 - 1;
            goto LABEL_126;
          }
        }
        goto LABEL_158;
      }
      v108 = ***(_QWORD ***)v149;
      v109 = *(_QWORD *)(v108 + 152);
      v110 = *(unsigned int *)(v108 + 168);
      if ((_DWORD)v110)
      {
        LODWORD(v111) = (v110 - 1) & ((v149 >> 4) ^ (v149 >> 9));
        v112 = (uint64_t *)(v109 + 16 * v111);
        v113 = *v112;
        if (*v112 == v149)
        {
LABEL_143:
          v116 = (_QWORD *)v112[1];
          v119 = *v116;
          v117 = (char *)(v116 + 2);
          v118 = v119;
          goto LABEL_144;
        }
        v114 = 1;
        while (v113 != -4096)
        {
          v115 = v111 + v114++;
          v111 = v115 & (v110 - 1);
          v113 = *(_QWORD *)(v109 + 16 * v111);
          if (v113 == v149)
          {
            v112 = (uint64_t *)(v109 + 16 * v111);
            goto LABEL_143;
          }
        }
      }
      v112 = (uint64_t *)(v109 + 16 * v110);
      goto LABEL_143;
    }
    v95 = ***v94;
    v96 = *(_QWORD *)(v95 + 152);
    v97 = *(unsigned int *)(v95 + 168);
    if ((_DWORD)v97)
    {
      LODWORD(v98) = (v97 - 1) & ((v94 >> 4) ^ (v94 >> 9));
      v99 = (uint64_t ****)(v96 + 16 * v98);
      v100 = *v99;
      if (*v99 == v94)
      {
LABEL_134:
        v103 = v99[1];
        v106 = (size_t)*v103;
        v104 = (char *)(v103 + 2);
        v105 = v106;
        goto LABEL_135;
      }
      v101 = 1;
      while (v100 != (uint64_t ***)-4096)
      {
        v102 = v98 + v101++;
        v98 = v102 & (v97 - 1);
        v100 = *(uint64_t ****)(v96 + 16 * v98);
        if (v100 == v94)
        {
          v99 = (uint64_t ****)(v96 + 16 * v98);
          goto LABEL_134;
        }
      }
    }
    v99 = (uint64_t ****)(v96 + 16 * v97);
    goto LABEL_134;
  }
LABEL_158:
  llvm::OptimizationRemarkEmitter::emit(v78, (llvm::DiagnosticInfoOptimizationBase *)v171);
  v171[0] = (llvm::AAMDNodes *)&off_1E814E790;
  v122 = (char *)v180;
  if ((_DWORD)v181)
  {
    v123 = (unint64_t)v181 << 6;
    do
    {
      v124 = (void **)&v122[v123];
      if (v122[v123 - 17] < 0)
        operator delete(*(v124 - 5));
      if (*((char *)v124 - 41) < 0)
        operator delete(*(v124 - 8));
      v123 -= 64;
    }
    while (v123);
    v122 = (char *)v180;
  }
  if (v122 != v182)
    free(v122);
LABEL_168:
  v125 = *(_QWORD *)(a7 + 8);
  if (v125 == *(_QWORD *)a7)
    v126 = (unsigned int *)(a7 + 20);
  else
    v126 = (unsigned int *)(a7 + 16);
  v127 = *v126;
  if ((_DWORD)v127)
  {
    v128 = 8 * v127;
    v129 = *(unint64_t **)(a7 + 8);
    while (*v129 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v129;
      v128 -= 8;
      if (!v128)
        goto LABEL_191;
    }
  }
  else
  {
    v129 = *(unint64_t **)(a7 + 8);
  }
  v130 = (unint64_t *)(v125 + 8 * v127);
  if (v129 != v130)
  {
    v131 = *v129;
LABEL_179:
    v132 = *(int32x2_t ***)(a1 + 80);
    if (v132)
    {
      v133 = (*v132)[5].i32[0];
      if (v133)
      {
        v134 = (*v132)[3];
        v135 = v133 - 1;
        v136 = (v133 - 1) & ((v131 >> 4) ^ (v131 >> 9));
        v137 = *(_QWORD *)(*(_QWORD *)&v134 + 16 * v136);
        if (v137 == v131)
        {
LABEL_185:
          v80 = *(llvm::MemoryAccess **)(*(_QWORD *)&v134 + 16 * v136 + 8);
          if (v80)
            llvm::MemorySSAUpdater::removeMemoryAccess(v132, v80, (llvm::Value *)1);
        }
        else
        {
          v138 = 1;
          while (v137 != -4096)
          {
            v139 = v136 + v138++;
            v136 = v139 & v135;
            v137 = *(_QWORD *)(*(_QWORD *)&v134 + 16 * v136);
            if (v137 == v131)
              goto LABEL_185;
          }
        }
      }
    }
    v140 = llvm::UndefValue::get(*(llvm::UndefValue **)v131, v80);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v131, v140, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v131 + 40) + 40, (uint64_t ***)v131);
    v141 = *(_QWORD *)(v131 + 24);
    v142 = *(_QWORD **)(v131 + 32);
    *v142 = v141;
    *(_QWORD *)(v141 + 8) = v142;
    *(_QWORD *)(v131 + 24) = 0;
    *(_QWORD *)(v131 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v131);
    v143 = v129 + 1;
    while (v143 != v130)
    {
      v144 = *v143++;
      v131 = v144;
      if (v144 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v129 = v143 - 1;
        goto LABEL_179;
      }
    }
  }
LABEL_191:
  v154 = 1;
LABEL_192:
  llvm::SCEVExpanderCleaner::cleanup(&v153);
  sub_1C50D05E0((uint64_t)v167);
  if (v168[0] != &v169)
    free(v168[0]);
  return isSafeToExpand;
}

void sub_1C5B6BEA0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SCEV *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t MulExpr;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  llvm::ScalarEvolution::getTruncateOrZeroExtend(a5, a2);
  MulExpr = v8;
  if (!llvm::SCEV::isOne(a4))
  {
    llvm::ScalarEvolution::getTruncateOrZeroExtend(a5, (uint64_t)a4);
    v11[0] = v12;
    v12[0] = MulExpr;
    v12[1] = v10;
    v11[1] = (void *)0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr(a5, (uint64_t)v11, 2, 0);
    if (v11[0] != v12)
      free(v11[0]);
  }
  llvm::ScalarEvolution::getMinusSCEV(a5, a1, MulExpr);
}

uint64_t sub_1C5B6BF94(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v29;
  __int128 v31[3];
  char v32;

  if (*(_WORD *)(a4 + 24))
    v9 = 0;
  else
    v9 = a4;
  if (*(_WORD *)(a5 + 24))
    v10 = 0;
  else
    v10 = a5;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = -2;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 32);
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = *v14 + 1;
    v16 = *(_QWORD *)(v10 + 32);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = *v17 * v15;
    if (v18 <= 0x7FFFFFFFFFFFFFFBLL)
      v12 = v18;
    else
      v12 = -2;
  }
  v19 = *(_QWORD *)(a3 + 32);
  v29 = *(_QWORD *)(a3 + 40);
  if (v29 != v19)
  {
    v20 = a2 & 3;
    v21 = 1;
    do
    {
      v22 = *(_QWORD *)v19 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v19 + 48); i != v22; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v24 = i - 24;
        else
          v24 = 0;
        v25 = sub_1C477672C((uint64_t)a7, v24);
        v26 = a7[1];
        if (v26 == *a7)
          v27 = (unsigned int *)a7 + 5;
        else
          v27 = (unsigned int *)(a7 + 2);
        if (v25 == (_QWORD *)(v26 + 8 * *v27))
        {
          *(_QWORD *)&v31[0] = a1;
          *((_QWORD *)&v31[0] + 1) = v12;
          memset(&v31[1], 0, 32);
          v32 = 1;
          if ((v20 & sub_1C4D90C64(a6, v24, v31)) != 0)
            return v21;
        }
      }
      v19 += 8;
    }
    while (v19 != v29);
  }
  return 0;
}

void sub_1C5B6C118(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_1C5B6C17C()
{
  JUMPOUT(0x1C5B6C168);
}

void sub_1C5B6C188()
{
  JUMPOUT(0x1C5B6C180);
}

uint64_t sub_1C5B6C190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  llvm::ScalarEvolution *v25;
  llvm::Type *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t AddExpr;
  unint64_t v38;
  uint64_t MulExpr;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t Constant;

  sub_1C4768AD0(v29, **(_QWORD **)(v24 + 32));
  v32 = v31;
  if ((_DWORD)v30 == 1)
  sub_1C4768AD0(v29, (uint64_t)v26);
  v35 = v34;
  if ((_DWORD)v33 == 1)
  if (v32 < v35)
    __asm { BR              X11 }
  llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)v25, v28);
  v41 = &v43;
  v43 = v36;
  Constant = llvm::ScalarEvolution::getConstant(v25, v26, 1, 0);
  v42 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v25, (uint64_t)&v41, 2, 0);
  if (v41 != &v43)
    free(v41);
  llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)v25, v27);
  v41 = &v43;
  v43 = AddExpr;
  Constant = v38;
  v42 = 0x200000002;
  MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)v25, (uint64_t)&v41, 2, 0);
  if (v41 != &v43)
    free(v41);
  return MulExpr;
}

BOOL sub_1C5B6C450(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SCEV *a4, __int16 a5, __int16 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _BOOL4 v19;
  uint64_t LoopPredecessor;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Instruction **v29;
  unsigned int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const void *v38;
  llvm::SCEV *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  int v47;
  int64_t v48;
  unint64_t v50;
  int v51;
  llvm::Instruction **v52;
  llvm::Type *v53;
  _QWORD *v54;
  unsigned int v55;
  llvm::Instruction *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  _BOOL4 v59;
  const char *v60;
  uint64_t v61;
  int v62;
  _BOOL4 v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  llvm::OptimizationRemarkEmitter *v67;
  uint64_t v68;
  uint64_t ***v69;
  uint64_t v70;
  uint64_t **v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  llvm::Instruction **v78;
  unsigned int v79;
  llvm::Type *v80;
  llvm::Instruction **v81;
  llvm::Type *v82;
  _QWORD *v83;
  llvm::Instruction *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  char *v87;
  uint64_t *v88;
  _BOOL4 v89;
  llvm::OptimizationRemarkEmitter *v90;
  uint64_t v91;
  uint64_t ***v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  llvm::Instruction **v101;
  _QWORD *v102;
  llvm::Instruction *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t *v106;
  llvm::AAMDNodes *v107;
  uint64_t v108;
  llvm::AAMDNodes *v109;
  int v110;
  int v111;
  llvm::Value *ElementUnorderedAtomicMemCpy;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  void **v118;
  char *v119;
  unint64_t v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  void **v127;
  unint64_t v128;
  void **v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 **v132;
  unsigned __int8 *v133;
  uint64_t **v134;
  llvm::BasicBlock *v135;
  char *DefinedAccess;
  llvm::OptimizationRemarkEmitter *v137;
  uint64_t v138;
  llvm::MemoryAccess *v139;
  unsigned __int8 *v140;
  int v141;
  uint64_t v142;
  uint64_t ***v143;
  uint64_t **v144;
  uint64_t ***v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t ***v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t ****v155;
  uint64_t ***v156;
  int v157;
  int v158;
  _DWORD *v159;
  _DWORD *v160;
  llvm::Type *v161;
  int v162;
  uint64_t ***v163;
  char *v164;
  size_t v165;
  size_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t ****v172;
  uint64_t ***v173;
  int v174;
  int v175;
  uint64_t ***v176;
  char *v177;
  size_t v178;
  size_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  void **v183;
  char *v184;
  unint64_t v185;
  void **v186;
  int32x2_t **v187;
  llvm::UndefValue *v188;
  uint64_t v189;
  _QWORD *v190;
  __int32 v191;
  int32x2_t v192;
  __int32 v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  int v199;
  _BOOL4 v200;
  size_t v201;
  char *v202;
  unsigned int v203;
  llvm::Value *v204;
  unint64_t v205;
  llvm::Type *v206;
  void *__src;
  _QWORD *v208;
  llvm::Instruction **v209;
  _BOOL4 v210;
  uint64_t v211;
  unsigned __int8 *v212;
  llvm::MDNode *v213[4];
  llvm::AAMDNodes *v214[2];
  llvm::MDNode *v215[2];
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char *v222;
  char *v223;
  uint64_t v224;
  int v225;
  _BYTE v226[16];
  _QWORD *v227;
  unsigned int v228;
  unsigned int *v229;
  char v230;
  void *v231[2];
  char v232;
  void *v233;
  char v234;
  void *v235[2];
  char v236;
  void *v237;
  char v238;
  void *v239[2];
  char v240;
  void *__p;
  char v242;
  void *v243[2];
  char v244;
  void *v245;
  char v246;
  void *__dst[2];
  char v248;
  void *v249;
  char v250;
  _BYTE v251[768];
  void *v252[2];
  uint64_t v253;
  _QWORD *v254;
  const char *v255;
  uint64_t v256;
  void *v257;
  unsigned int v258;
  _BYTE v259[272];
  __int128 v260;
  __int128 v261;
  int v262;
  int v263;
  const char *v264;
  const char *v265;
  uint64_t v266;
  char v267;
  char v268;
  void *v269;
  uint64_t v270;
  _BYTE v271[256];
  char v272;
  int v273;
  uint64_t ***v274;
  uint64_t v275;

  v275 = *MEMORY[0x1E0C80C00];
  v19 = sub_1C550CC10(a7);
  if (v19)
    return !v19;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)a1);
  if (!LoopPredecessor)
    goto LABEL_10;
  v22 = *(_QWORD *)(LoopPredecessor + 40);
  if (v22 == LoopPredecessor + 40)
    goto LABEL_10;
  if (v22)
    v23 = v22 - 24;
  else
    v23 = 0;
  if (*(_BYTE *)(v23 + 16) == 30)
  {
    if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_10:
      v24 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v24 = 0;
    switch(*(_BYTE *)(v23 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_15;
      case 0x1E:
        __break(1u);
        goto LABEL_348;
      case 0x1F:
        v25 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_348:
        v25 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v25 = *(_DWORD *)(v23 + 80) + 1;
        break;
      default:
        goto LABEL_10;
    }
    if (v25 != 1)
      goto LABEL_10;
  }
  v24 = LoopPredecessor;
LABEL_15:
  v211 = a1;
  v26 = *(_QWORD *)(v24 + 40);
  v208 = (_QWORD *)(v24 + 40);
  v198 = v24;
  if (v26 == v24 + 40)
  {
    v27 = 0;
  }
  else
  {
    if (v26)
      v28 = v26 - 24;
    else
      v28 = 0;
    if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
      v27 = 0;
    else
      v27 = v28;
  }
  sub_1C4773D54((uint64_t)v252, v27, 0, 0, 0);
  sub_1C50D02DC((uint64_t)v251, *(uint64_t ****)(a1 + 32), *(_QWORD *)(a1 + 56), (uint64_t)"loop-idiom", 1);
  v229 = (unsigned int *)v251;
  v230 = 0;
  v29 = **(llvm::Instruction ****)(a9 + 32);
  v30 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v30 & 0xFE) == 0x12)
    v30 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  v203 = v30 >> 8;
  v31 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(v211 + 56), v30 >> 8) + 12);
  v32 = v254;
  LODWORD(v260) = v31;
  v209 = v29;
  if (v31 <= 63)
  {
    if (v31 <= 31)
    {
      switch(v31)
      {
        case 16:
          v33 = *v254 + 1936;
          goto LABEL_33;
        case 8:
          v33 = *v254 + 1912;
          goto LABEL_33;
        case 1:
          v33 = *v254 + 1888;
          goto LABEL_33;
      }
    }
    else if (v31 == 32)
    {
      v33 = *v254 + 1960;
      goto LABEL_33;
    }
  }
  else
  {
    if (v31 == 64)
    {
      v33 = *v254 + 1984;
LABEL_33:
      v206 = (llvm::Type *)v33;
      goto LABEL_34;
    }
    if (v31 == 128)
    {
      v33 = *v254 + 2008;
      goto LABEL_33;
    }
  }
  v159 = sub_1C5270984(*v254 + 2168, &v260);
  v206 = (llvm::Type *)*((_QWORD *)v159 + 1);
  if (!v206)
  {
    v160 = v159;
    v161 = (llvm::Type *)sub_1C484358C(*v32 + 2040, 24, 3);
    v162 = v260;
    *(_QWORD *)v161 = v32;
    *((_QWORD *)v161 + 2) = 0;
    *((_QWORD *)v161 + 1) = (v162 << 8) | 0xDu;
    v206 = v161;
    *((_QWORD *)v160 + 1) = v161;
  }
LABEL_34:
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 + 32) + 8) + 32);
  v35 = *(unsigned int *)(v34 + 32);
  if (v35 > 0x40)
  {
    v37 = (void *)operator new[]();
    v38 = *(const void **)(v34 + 24);
    v36 = v37;
    memcpy(v37, v38, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v36 = *(void **)(v34 + 24);
  }
  if (*((_WORD *)a4 + 12))
    v39 = 0;
  else
    v39 = a4;
  v40 = *((_QWORD *)v39 + 4);
  v41 = (unint64_t *)(v40 + 24);
  if (*(_DWORD *)(v40 + 32) >= 0x41u)
    v41 = (unint64_t *)*v41;
  v205 = *v41;
  __src = v36;
  v42 = (uint64_t)v36;
  v43 = v35;
  v228 = v35;
  if (v35 >= 0x41
    && (v42 = operator new[](),
        v227 = (_QWORD *)v42,
        v43 = v228,
        memcpy((void *)v42, __src, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8),
        v228 > 0x40))
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v227);
  }
  else
  {
    v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
    if (!v43)
      v44 = 0;
    v227 = (_QWORD *)(v44 & ~v42);
  }
  llvm::APInt::operator++((uint64_t)&v227);
  v45 = v228;
  v228 = 0;
  if (v45 < 0x41)
  {
    if (v227 != (_QWORD *)v205)
    {
LABEL_49:
      v46 = 0;
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  v47 = 0;
  v48 = (unint64_t)(v45 + 63) >> 6;
  do
  {
    if (v48-- < 1)
      break;
    v50 = v227[v48];
    v47 += __clz(v50);
  }
  while (!v50);
  v51 = v45 | 0xFFFFFFC0;
  if ((v45 & 0x3F) == 0)
    v51 = 0;
  if ((v45 - v47 - v51) >= 0x41)
  {
    v46 = 0;
    if (!v227)
      goto LABEL_66;
  }
  else
  {
    v46 = *v227 == v205;
    if (!v227)
    {
      if (MEMORY[0] != v205)
        goto LABEL_49;
      goto LABEL_65;
    }
  }
  MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
  if (v228 >= 0x41 && v227)
  {
    MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
    if (!v46)
      goto LABEL_49;
    goto LABEL_65;
  }
  if (v46)
  {
LABEL_65:
    sub_1C5B6BEA0((uint64_t)v209, a11, (uint64_t)v206, a4, *(_QWORD *)(v211 + 32));
    v209 = v52;
    v46 = 1;
  }
LABEL_66:
  v53 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*v254 + 1912), (llvm::Type *)v203);
  v54 = (_QWORD *)*v208;
  v55 = v35;
  if ((_QWORD *)*v208 == v208)
  {
    v56 = 0;
  }
  else
  {
    if (v54)
      v57 = (unsigned __int8 *)(v54 - 3);
    else
      v57 = 0;
    if (v57[16] - 29 >= 0xB)
      v56 = 0;
    else
      v56 = (llvm::Instruction *)v57;
  }
  v58 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v251, v209, v53, v56);
  v222 = v226;
  v223 = v226;
  v224 = 2;
  v225 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v222, a7);
  v59 = sub_1C53924A0(a7);
  v210 = v59;
  if (v59)
    v60 = "memcpy";
  else
    v60 = "load and store";
  v61 = 14;
  if (v59)
    v61 = 6;
  v201 = v61;
  v202 = (char *)v60;
  v204 = (llvm::Value *)v58;
  v62 = sub_1C5B6BF94((uint64_t)v58, 7, *(_QWORD *)v211, a11, (uint64_t)a4, *(_QWORD *)(v211 + 8), &v222);
  v63 = v62;
  v64 = v55;
  v65 = v46;
  if (v62)
  {
    v66 = *(_QWORD *)(a8 + 8);
    if (!v66 || *(_QWORD *)(v66 + 8))
      goto LABEL_330;
    v199 = v62;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v222, a8);
    if (sub_1C5B6BF94((uint64_t)v204, 7, *(_QWORD *)v211, a11, (uint64_t)a4, *(_QWORD *)(v211 + 8), &v222))
    {
      v67 = *(llvm::OptimizationRemarkEmitter **)(v211 + 64);
      v68 = ****(_QWORD ****)v67;
      if (*(_QWORD *)(v68 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v68 + 72) + 48))(*(_QWORD *)(v68 + 72)))
      {
        v69 = *(uint64_t ****)(a7 + 40);
        v70 = *(_QWORD *)(a7 + 48);
        v71 = v69[7];
        if (v70)
        {
          v73 = *(_QWORD *)(v70 - 8 * *(unsigned int *)(v70 + 8));
          v72 = v64;
          if (*(_BYTE *)v73 != 15)
            v73 = *(_QWORD *)(v73 - 8 * *(unsigned int *)(v73 + 8));
          v74 = *(_DWORD *)(v70 + 4);
          LODWORD(v70) = *(unsigned __int16 *)(v70 + 2);
        }
        else
        {
          v72 = v64;
          v73 = 0;
          v74 = 0;
        }
        DWORD2(v260) = 10;
        BYTE12(v260) = 2;
        *(_QWORD *)&v261 = v71;
        *((_QWORD *)&v261 + 1) = v73;
        v262 = v74;
        v263 = v70;
        v264 = "loop-idiom";
        v265 = "LoopMayAccessStore";
        v266 = 18;
        v267 = 0;
        v268 = 0;
        v269 = v271;
        v270 = 0x400000000;
        v272 = 0;
        v273 = -1;
        v274 = v69;
        *(_QWORD *)&v260 = &off_1E814E538;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Inst", 4uLL, v202, v201);
        v122 = sub_1C47E3888((uint64_t)&v260, (uint64_t)__dst);
        v255 = " in ";
        v256 = 4;
        sub_1C53B17B4(v122 + 80, (const void **)&v255);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v243, "Function", 8uLL, *(_BYTE **)(*(_QWORD *)(a7 + 40) + 56));
        v123 = sub_1C47E3888(v122, (uint64_t)v243);
        v255 = " function will not be hoisted: ";
        v256 = 31;
        sub_1C53B17B4(v123 + 80, (const void **)&v255);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v239, "Reason", 6uLL, "The loop may access store location", 0x22uLL);
        v124 = sub_1C47E3888(v123, (uint64_t)v239);
        sub_1C61998EC((uint64_t)&v255, v124);
        v255 = (const char *)&off_1E814E538;
        if (v242 < 0)
          operator delete(__p);
        if (v240 < 0)
          operator delete(v239[0]);
        if (v246 < 0)
          operator delete(v245);
        if (v244 < 0)
          operator delete(v243[0]);
        if (v250 < 0)
          operator delete(v249);
        if (v248 < 0)
          operator delete(__dst[0]);
        *(_QWORD *)&v260 = &off_1E814E790;
        v125 = (char *)v269;
        if ((_DWORD)v270)
        {
          v126 = (unint64_t)v270 << 6;
          do
          {
            v127 = (void **)&v125[v126];
            if (v125[v126 - 17] < 0)
              operator delete(*(v127 - 5));
            if (*((char *)v127 - 41) < 0)
              operator delete(*(v127 - 8));
            v126 -= 64;
          }
          while (v126);
          v125 = (char *)v269;
        }
        if (v125 != v271)
          free(v125);
        llvm::OptimizationRemarkEmitter::emit(v67, (llvm::DiagnosticInfoOptimizationBase *)&v255);
        v255 = (const char *)&off_1E814E790;
        v119 = (char *)v257;
        if (!v258)
          goto LABEL_236;
        v128 = (unint64_t)v258 << 6;
        do
        {
          v129 = (void **)&v119[v128];
          if (v119[v128 - 17] < 0)
            operator delete(*(v129 - 5));
          if (*((char *)v129 - 41) < 0)
            operator delete(*(v129 - 8));
          v128 -= 64;
        }
        while (v128);
LABEL_235:
        v119 = (char *)v257;
LABEL_236:
        if (v119 != v259)
          free(v119);
        v64 = v72;
        goto LABEL_330;
      }
      goto LABEL_330;
    }
    v75 = (char *)sub_1C477672C((uint64_t)&v222, a8);
    if (v223 == v222)
      v76 = (uint64_t *)((char *)&v224 + 4);
    else
      v76 = &v224;
    v77 = &v223[8 * *(unsigned int *)v76];
    v63 = v199;
    if (v75 != v77)
    {
      *(_QWORD *)v75 = -2;
      ++v225;
    }
  }
  v200 = v63;
  v78 = **(llvm::Instruction ****)(a10 + 32);
  v79 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v79 & 0xFE) == 0x12)
    v79 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  v80 = (llvm::Type *)(v79 >> 8);
  if (v65)
  {
    sub_1C5B6BEA0(**(_QWORD **)(a10 + 32), a11, (uint64_t)v206, a4, *(_QWORD *)(v211 + 32));
    v78 = v81;
  }
  v82 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*v254 + 1912), v80);
  v83 = (_QWORD *)*v208;
  if ((_QWORD *)*v208 == v208)
  {
    v84 = 0;
  }
  else
  {
    if (v83)
      v85 = (unsigned __int8 *)(v83 - 3);
    else
      v85 = 0;
    if (v85[16] - 29 >= 0xB)
      v84 = 0;
    else
      v84 = (llvm::Instruction *)v85;
  }
  v86 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v251, v78, v82, v84);
  if (v210)
  {
    v87 = (char *)sub_1C477672C((uint64_t)&v222, a7);
    v88 = v223 == v222 ? (uint64_t *)((char *)&v224 + 4) : &v224;
    if (v87 != &v223[8 * *(unsigned int *)v88])
    {
      *(_QWORD *)v87 = -2;
      ++v225;
    }
  }
  sub_1C631AFA8((uint64_t)&v216, (llvm::Value *)v86, v204, *(llvm::DataLayout **)(v211 + 56));
  if (!sub_1C5B6BF94((uint64_t)v86, 6, *(_QWORD *)v211, a11, (uint64_t)a4, *(_QWORD *)(v211 + 8), &v222))
  {
    v89 = v221 != 0;
    if (!v210)
      v89 = v200;
    if (!v89)
    {
      v97 = 0;
LABEL_133:
      v100 = *(_QWORD **)v211;
      if (*(_BYTE *)(v211 + 72) && ((v100[5] - v100[4]) & 0x7FFFFFFF0) != 0 && !*v100)
        goto LABEL_330;
      sub_1C5B6C118(a11);
      v102 = (_QWORD *)*v208;
      if ((_QWORD *)*v208 == v208)
      {
        v103 = 0;
      }
      else
      {
        if (v102)
          v104 = (unsigned __int8 *)(v102 - 3);
        else
          v104 = 0;
        if (v104[16] - 29 >= 0xB)
          v103 = 0;
        else
          v103 = (llvm::Instruction *)v104;
      }
      v105 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v251, v101, v206, v103);
      llvm::Instruction::getAAMetadata((uint64_t ***)a8, v214);
      llvm::Instruction::getAAMetadata((uint64_t ***)a7, v213);
      llvm::AAMDNodes::merge(v214, v213, &v260);
      *(_OWORD *)v214 = v260;
      *(_OWORD *)v215 = v261;
      if (v105[16] == 16 && v105)
      {
        v106 = (uint64_t *)(v105 + 24);
        if (*((_DWORD *)v105 + 8) >= 0x41u)
          v106 = (uint64_t *)*v106;
        v107 = v214[0];
        if (v214[0])
        {
          v108 = *v106;
LABEL_153:
          v109 = llvm::AAMDNodes::extendToTBAA(v107, v108);
          goto LABEL_154;
        }
      }
      else
      {
        v107 = v214[0];
        if (v214[0])
        {
          v108 = -1;
          goto LABEL_153;
        }
      }
      v109 = 0;
LABEL_154:
      v214[0] = v109;
      v110 = *(unsigned __int8 *)(a7 + 16);
      if (v110 == 60 || v110 == 61)
      {
        if ((*(_WORD *)(a7 + 18) & 0x380) != 0)
          goto LABEL_241;
      }
      else if ((v110 - 63) < 3)
      {
LABEL_241:
        if ((v97 & 1) != 0
          || 1 << a5 < v205
          || 1 << a6 < v205
          || (uint64_t)v205 > (*(unsigned int (**)(_QWORD))(***(_QWORD ***)(v211 + 48) + 1000))(**(_QWORD **)(v211 + 48)))
        {
          goto LABEL_330;
        }
        ElementUnorderedAtomicMemCpy = llvm::IRBuilderBase::CreateElementUnorderedAtomicMemCpy((uint64_t)v252, v204, a5, (llvm::Value *)v86, a6, (uint64_t *)v105, v205, v214[0], v214[1], v215[0], v215[1]);
LABEL_246:
        v130 = (uint64_t)ElementUnorderedAtomicMemCpy;
        v131 = *(unsigned __int8 **)(a7 + 48);
        v212 = v131;
        if (v131)
          llvm::MetadataTracking::track((uint64_t)&v212, v131, 2);
        v132 = (unsigned __int8 **)(v130 + 48);
        if (&v212 == (unsigned __int8 **)(v130 + 48))
        {
          if (v212)
            llvm::MetadataTracking::untrack((uint64_t)&v212, v212);
        }
        else
        {
          if (*v132)
            llvm::MetadataTracking::untrack(v130 + 48, *v132);
          v133 = v212;
          *v132 = v212;
          if (v133)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v212, v133, v130 + 48);
            v212 = 0;
          }
        }
        v134 = *(uint64_t ***)(v211 + 80);
        if (v134)
        {
          v135 = *(llvm::BasicBlock **)(v130 + 40);
          DefinedAccess = llvm::MemorySSA::createDefinedAccess(*v134, v130, 0, 0);
          llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*v134, (uint64_t)DefinedAccess, v135, 2);
          llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(v211 + 80), (llvm::MemoryDef *)DefinedAccess, 1);
        }
        v137 = *(llvm::OptimizationRemarkEmitter **)(v211 + 64);
        v138 = ****(_QWORD ****)v137;
        if (!*(_QWORD *)(v138 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v138 + 72) + 48))(*(_QWORD *)(v138 + 72)))
        {
          goto LABEL_328;
        }
        v140 = *v132;
        if (*v132)
        {
          v142 = *(_QWORD *)&v140[-8 * *((unsigned int *)v140 + 2)];
          v143 = (uint64_t ***)v198;
          if (*(_BYTE *)v142 != 15)
            v142 = *(_QWORD *)(v142 - 8 * *(unsigned int *)(v142 + 8));
          v141 = *((_DWORD *)v140 + 1);
          LODWORD(v140) = *((unsigned __int16 *)v140 + 1);
        }
        else
        {
          v141 = 0;
          v142 = 0;
          v143 = (uint64_t ***)v198;
        }
        v144 = v143[7];
        DWORD2(v260) = 9;
        BYTE12(v260) = 2;
        *(_QWORD *)&v261 = v144;
        *((_QWORD *)&v261 + 1) = v142;
        v262 = v141;
        v263 = (int)v140;
        v264 = "loop-idiom";
        v265 = "ProcessLoopStoreOfLoopLoad";
        v266 = 26;
        v267 = 0;
        v268 = 0;
        v269 = v271;
        v270 = 0x400000000;
        v272 = 0;
        v273 = -1;
        v145 = v143;
        v274 = v143;
        *(_QWORD *)&v260 = &off_1E814E500;
        v255 = "Formed a call to ";
        v256 = 17;
        sub_1C53B17B4((uint64_t)&v269, (const void **)&v255);
        v146 = *(_QWORD *)(v130 - 32);
        if (!v146 || *(_BYTE *)(v146 + 16) || *(_QWORD *)(v146 + 24) != *(_QWORD *)(v130 + 72))
          v146 = 0;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)__dst, "NewFunction", 0xBuLL, (_BYTE *)v146);
        v147 = sub_1C47E3888((uint64_t)&v260, (uint64_t)__dst);
        v255 = "() intrinsic from ";
        v256 = 18;
        sub_1C53B17B4(v147 + 80, (const void **)&v255);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v243, "Inst", 4uLL, v202, v201);
        v148 = sub_1C47E3888(v147, (uint64_t)v243);
        v255 = " instruction in ";
        v256 = 16;
        sub_1C53B17B4(v148 + 80, (const void **)&v255);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v239, "Function", 8uLL, *(_BYTE **)(*(_QWORD *)(a7 + 40) + 56));
        v149 = sub_1C47E3888(v148, (uint64_t)v239);
        v255 = " function";
        v256 = 9;
        sub_1C53B17B4(v149 + 80, (const void **)&v255);
        *(_DWORD *)(v149 + 356) = *(_DWORD *)(v149 + 88);
        v150 = *(uint64_t ****)(a7 + 40);
        if ((*((_BYTE *)v150 + 23) & 0x10) == 0)
        {
          v165 = 0;
          v164 = &byte_1C871356D;
LABEL_279:
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v235, "FromBlock", 9uLL, v164, v165);
          v167 = sub_1C47E3888(v149, (uint64_t)v235);
          if ((*((_BYTE *)v145 + 23) & 0x10) == 0)
          {
            v178 = 0;
            v177 = &byte_1C871356D;
            goto LABEL_288;
          }
          v168 = ***v145;
          v169 = *(_QWORD *)(v168 + 152);
          v170 = *(unsigned int *)(v168 + 168);
          if ((_DWORD)v170)
          {
            LODWORD(v171) = (v170 - 1) & ((v145 >> 4) ^ (v145 >> 9));
            v172 = (uint64_t ****)(v169 + 16 * v171);
            v173 = *v172;
            if (*v172 == v145)
            {
LABEL_287:
              v176 = v172[1];
              v179 = (size_t)*v176;
              v177 = (char *)(v176 + 2);
              v178 = v179;
LABEL_288:
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v231, "ToBlock", 7uLL, v177, v178);
              v180 = sub_1C47E3888(v167, (uint64_t)v231);
              sub_1C61998EC((uint64_t)&v255, v180);
              v255 = (const char *)&off_1E814E500;
              if (v234 < 0)
                operator delete(v233);
              if (v232 < 0)
                operator delete(v231[0]);
              if (v238 < 0)
                operator delete(v237);
              if (v236 < 0)
                operator delete(v235[0]);
              if (v242 < 0)
                operator delete(__p);
              if (v240 < 0)
                operator delete(v239[0]);
              if (v246 < 0)
                operator delete(v245);
              if (v244 < 0)
                operator delete(v243[0]);
              if (v250 < 0)
                operator delete(v249);
              if (v248 < 0)
                operator delete(__dst[0]);
              *(_QWORD *)&v260 = &off_1E814E790;
              v181 = (char *)v269;
              if ((_DWORD)v270)
              {
                v182 = (unint64_t)v270 << 6;
                do
                {
                  v183 = (void **)&v181[v182];
                  if (v181[v182 - 17] < 0)
                    operator delete(*(v183 - 5));
                  if (*((char *)v183 - 41) < 0)
                    operator delete(*(v183 - 8));
                  v182 -= 64;
                }
                while (v182);
                v181 = (char *)v269;
              }
              if (v181 != v271)
                free(v181);
              llvm::OptimizationRemarkEmitter::emit(v137, (llvm::DiagnosticInfoOptimizationBase *)&v255);
              v255 = (const char *)&off_1E814E790;
              v184 = (char *)v257;
              if (v258)
              {
                v185 = (unint64_t)v258 << 6;
                do
                {
                  v186 = (void **)&v184[v185];
                  if (v184[v185 - 17] < 0)
                    operator delete(*(v186 - 5));
                  if (*((char *)v186 - 41) < 0)
                    operator delete(*(v186 - 8));
                  v185 -= 64;
                }
                while (v185);
                v184 = (char *)v257;
              }
              if (v184 != v259)
                free(v184);
LABEL_328:
              v187 = *(int32x2_t ***)(v211 + 80);
              if (v187)
              {
                v191 = (*v187)[5].i32[0];
                if (v191)
                {
                  v192 = (*v187)[3];
                  v193 = v191 - 1;
                  v194 = (v191 - 1) & ((a7 >> 4) ^ (a7 >> 9));
                  v195 = *(_QWORD *)(*(_QWORD *)&v192 + 16 * v194);
                  if (v195 == a7)
                  {
LABEL_342:
                    v139 = *(llvm::MemoryAccess **)(*(_QWORD *)&v192 + 16 * v194 + 8);
                    if (v139)
                      llvm::MemorySSAUpdater::removeMemoryAccess(v187, v139, (llvm::Value *)1);
                  }
                  else
                  {
                    v196 = 1;
                    while (v195 != -4096)
                    {
                      v197 = v194 + v196++;
                      v194 = v197 & v193;
                      v195 = *(_QWORD *)(*(_QWORD *)&v192 + 16 * v194);
                      if (v195 == a7)
                        goto LABEL_342;
                    }
                  }
                }
              }
              v188 = llvm::UndefValue::get(*(llvm::UndefValue **)a7, v139);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)a7, v188, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a7 + 40) + 40, (uint64_t ***)a7);
              v189 = *(_QWORD *)(a7 + 24);
              v190 = *(_QWORD **)(a7 + 32);
              *v190 = v189;
              *(_QWORD *)(v189 + 8) = v190;
              *(_QWORD *)(a7 + 24) = 0;
              *(_QWORD *)(a7 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)a7);
              v230 = 1;
              goto LABEL_330;
            }
            v174 = 1;
            while (v173 != (uint64_t ***)-4096)
            {
              v175 = v171 + v174++;
              v171 = v175 & (v170 - 1);
              v173 = *(uint64_t ****)(v169 + 16 * v171);
              if (v173 == v145)
              {
                v172 = (uint64_t ****)(v169 + 16 * v171);
                goto LABEL_287;
              }
            }
          }
          v172 = (uint64_t ****)(v169 + 16 * v170);
          goto LABEL_287;
        }
        v151 = ***v150;
        v152 = *(_QWORD *)(v151 + 152);
        v153 = *(unsigned int *)(v151 + 168);
        if ((_DWORD)v153)
        {
          LODWORD(v154) = (v153 - 1) & ((v150 >> 4) ^ (v150 >> 9));
          v155 = (uint64_t ****)(v152 + 16 * v154);
          v156 = *v155;
          if (*v155 == v150)
          {
LABEL_278:
            v163 = v155[1];
            v166 = (size_t)*v163;
            v164 = (char *)(v163 + 2);
            v165 = v166;
            goto LABEL_279;
          }
          v157 = 1;
          while (v156 != (uint64_t ***)-4096)
          {
            v158 = v154 + v157++;
            v154 = v158 & (v153 - 1);
            v156 = *(uint64_t ****)(v152 + 16 * v154);
            if (v156 == v150)
            {
              v155 = (uint64_t ****)(v152 + 16 * v154);
              goto LABEL_278;
            }
          }
        }
        v155 = (uint64_t ****)(v152 + 16 * v153);
        goto LABEL_278;
      }
      v111 = *(unsigned __int8 *)(a8 + 16);
      if (v111 == 60 || v111 == 61)
      {
        if ((*(_WORD *)(a8 + 18) & 0x380) != 0)
          goto LABEL_241;
      }
      else if ((v111 - 63) < 3)
      {
        goto LABEL_241;
      }
      if (v97)
        ElementUnorderedAtomicMemCpy = llvm::IRBuilderBase::CreateMemMove((uint64_t)v252, v204, a5, (llvm::Value *)v86, a6, (uint64_t *)v105, 0, v109, v215[0], v215[1]);
      else
        ElementUnorderedAtomicMemCpy = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)v252, 194, v204, a5, (llvm::Value *)v86, a6, (uint64_t *)v105, 0, v109, v214[1], v215[0], v215[1]);
      goto LABEL_246;
    }
    if (!v210)
    {
      sub_1C4768AD0(v216, *(_QWORD *)a8);
      if (v219 != v220)
        goto LABEL_330;
      v99 = v98 >> 3;
      if (v98 >> 3 != v205)
        goto LABEL_330;
      if (v65)
      {
        if ((uint64_t)(v217 + v99) > v218)
          goto LABEL_330;
      }
      else if (v217 < (uint64_t)(v218 + v99))
      {
        goto LABEL_330;
      }
LABEL_132:
      v97 = 1;
      goto LABEL_133;
    }
LABEL_118:
    if (v65)
    {
      if (v217 >= v218)
        goto LABEL_330;
    }
    else if (v217 < v218)
    {
      goto LABEL_330;
    }
    goto LABEL_132;
  }
  if (v210)
  {
    if (!v221)
      goto LABEL_330;
    goto LABEL_118;
  }
  v90 = *(llvm::OptimizationRemarkEmitter **)(v211 + 64);
  v91 = ****(_QWORD ****)v90;
  if (*(_QWORD *)(v91 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v91 + 72) + 48))(*(_QWORD *)(v91 + 72)))
  {
    v92 = *(uint64_t ****)(a8 + 40);
    v93 = *(_QWORD *)(a8 + 48);
    v94 = v92[7];
    if (v93)
    {
      v95 = *(_QWORD *)(v93 - 8 * *(unsigned int *)(v93 + 8));
      v72 = v64;
      if (*(_BYTE *)v95 != 15)
        v95 = *(_QWORD *)(v95 - 8 * *(unsigned int *)(v95 + 8));
      v96 = *(_DWORD *)(v93 + 4);
      LODWORD(v93) = *(unsigned __int16 *)(v93 + 2);
    }
    else
    {
      v72 = v64;
      v95 = 0;
      v96 = 0;
    }
    DWORD2(v260) = 10;
    BYTE12(v260) = 2;
    *(_QWORD *)&v261 = v94;
    *((_QWORD *)&v261 + 1) = v95;
    v262 = v96;
    v263 = v93;
    v264 = "loop-idiom";
    v265 = "LoopMayAccessLoad";
    v266 = 17;
    v267 = 0;
    v268 = 0;
    v269 = v271;
    v270 = 0x400000000;
    v272 = 0;
    v273 = -1;
    v274 = v92;
    *(_QWORD *)&v260 = &off_1E814E538;
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Inst", 4uLL, "load and store", 0xEuLL);
    v113 = sub_1C47E3888((uint64_t)&v260, (uint64_t)__dst);
    v255 = " in ";
    v256 = 4;
    sub_1C53B17B4(v113 + 80, (const void **)&v255);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v243, "Function", 8uLL, *(_BYTE **)(*(_QWORD *)(a7 + 40) + 56));
    v114 = sub_1C47E3888(v113, (uint64_t)v243);
    v255 = " function will not be hoisted: ";
    v256 = 31;
    sub_1C53B17B4(v114 + 80, (const void **)&v255);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v239, "Reason", 6uLL, "The loop may access load location", 0x21uLL);
    v115 = sub_1C47E3888(v114, (uint64_t)v239);
    sub_1C61998EC((uint64_t)&v255, v115);
    v255 = (const char *)&off_1E814E538;
    if (v242 < 0)
      operator delete(__p);
    if (v240 < 0)
      operator delete(v239[0]);
    if (v246 < 0)
      operator delete(v245);
    if (v244 < 0)
      operator delete(v243[0]);
    if (v250 < 0)
      operator delete(v249);
    if (v248 < 0)
      operator delete(__dst[0]);
    *(_QWORD *)&v260 = &off_1E814E790;
    v116 = (char *)v269;
    if ((_DWORD)v270)
    {
      v117 = (unint64_t)v270 << 6;
      do
      {
        v118 = (void **)&v116[v117];
        if (v116[v117 - 17] < 0)
          operator delete(*(v118 - 5));
        if (*((char *)v118 - 41) < 0)
          operator delete(*(v118 - 8));
        v117 -= 64;
      }
      while (v117);
      v116 = (char *)v269;
    }
    if (v116 != v271)
      free(v116);
    llvm::OptimizationRemarkEmitter::emit(v90, (llvm::DiagnosticInfoOptimizationBase *)&v255);
    v255 = (const char *)&off_1E814E790;
    v119 = (char *)v257;
    if (!v258)
      goto LABEL_236;
    v120 = (unint64_t)v258 << 6;
    do
    {
      v121 = (void **)&v119[v120];
      if (v119[v120 - 17] < 0)
        operator delete(*(v121 - 5));
      if (*((char *)v121 - 41) < 0)
        operator delete(*(v121 - 8));
      v120 -= 64;
    }
    while (v120);
    goto LABEL_235;
  }
LABEL_330:
  if (v223 != v222)
    free(v223);
  if (v64 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::SCEVExpanderCleaner::cleanup(&v229);
  sub_1C50D05E0((uint64_t)v251);
  if (v252[0] != &v253)
    free(v252[0]);
  return !v19;
}

uint64_t sub_1C5B6DC08(uint64_t *a1, uint64_t *a2, llvm::DataLayout *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  unsigned int IndexTypeSizeInBits;

  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a3, *a1);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, 0, 0);
  else
    v9 = 0;
  v7 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a1, a3, &v9, 1, 0, 0, v6);
  if (IndexTypeSizeInBits > 0x40)
  {
    *a2 = *(_QWORD *)v9;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    *a2 = (uint64_t)((_QWORD)v9 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  return v7;
}

uint64_t sub_1C5B6DCD4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  llvm::APInt *v7;
  unsigned int v8;
  int v9;

  if (result)
  {
    v2 = result;
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFF) != 3)
      return 0;
    result = 0;
    v3 = *(_QWORD *)(v2 - 96);
    if (v3 && *(_BYTE *)(v3 + 16) == 81)
    {
      v4 = *(_QWORD *)(v3 - 32);
      if (v4)
        v5 = *(_BYTE *)(v4 + 16) == 16;
      else
        v5 = 0;
      if (!v5)
        return 0;
      v7 = (llvm::APInt *)(v4 + 24);
      v8 = *(_DWORD *)(v4 + 32);
      if (v8 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v7) != v8)
          return 0;
      }
      else if (*(_QWORD *)v7)
      {
        return 0;
      }
      v9 = *(_WORD *)(v3 + 18) & 0x3F;
      if (v9 == 33 && *(_QWORD *)(v2 - 32) == a2)
        return *(_QWORD *)(v3 - 64);
      result = 0;
      if (v9 == 32 && *(_QWORD *)(v2 - 64) == a2)
        return *(_QWORD *)(v3 - 64);
    }
  }
  return result;
}

uint64_t sub_1C5B6DD9C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;

  if (!result || *(_BYTE *)(result + 16) != 83 || *(_QWORD *)(result + 40) != a3)
    return 0;
  v3 = *(_DWORD *)(result + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(_QWORD **)(result - 8) : (_QWORD *)(result - 32 * (v3 & 0x7FFFFFF));
  if (*v4 != a2 && v4[4] != a2)
    return 0;
  return result;
}

uint64_t sub_1C5B6DDF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (!a2)
    return 0;
  **(_QWORD **)a1 = a2;
  result = llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 24), a2);
  if (!(_DWORD)result)
    return result;
  v5 = a1 + 8;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 25)
      return 0;
    result = sub_1C4D89E3C(v5, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    if (!(_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (!v7)
      return 0;
LABEL_12:
    **(_QWORD **)(a1 + 16) = v7;
    return 1;
  }
  if (v6 == 53)
  {
    result = sub_1C4D89CC8(v5, *(llvm::Constant **)(a2 - 64));
    if (!(_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a2 - 32);
    if (v7)
      goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1C5B6DEB0()
{
  int v1;
  char v2;
  char *v3;
  char *v4;
  __n128 v5;

  v5.n128_u64[0] = (unint64_t)"Options to disable Loop Idiom Recognize Pass.";
  v5.n128_u64[1] = 45;
  v2 = 0;
  v3 = &v2;
  v4 = &llvm::DisableLIRP::All;
  v1 = 2;
  sub_1C631B034((__int128 *)&v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &qword_1ED81F068, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Proceed with loop idiom recognize pass, but do not convert loop(s) to memset.";
  v5.n128_u64[1] = 77;
  v3 = &v2;
  v4 = &llvm::DisableLIRP::Memset;
  v2 = 0;
  v1 = 2;
  sub_1C631B18C((llvm::cl::Option *)&unk_1ED81F128, "disable-loop-idiom-memset", &v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED81F128, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Proceed with loop idiom recognize pass, but do not convert loop(s) to memcpy.";
  v5.n128_u64[1] = 77;
  v3 = &v2;
  v4 = &llvm::DisableLIRP::Memcpy;
  v2 = 0;
  v1 = 2;
  sub_1C631B18C((llvm::cl::Option *)&unk_1ED81F1E8, "disable-loop-idiom-memcpy", &v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED81F1E8, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Use loop idiom recognition code size heuristics when compilingwith -Os/-Oz";
  v5.n128_u64[1] = 74;
  LOBYTE(v1) = 1;
  v4 = (char *)&v1;
  LODWORD(v3) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED81F2A8, "use-lir-code-size-heurs", &v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81F2A8, &dword_1C475E000);
}

char **llvm::LoopInstSimplifyPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int32x2_t **v7;
  char **result;
  char *v9[2];
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[64];
  void *v16;
  uint64_t v17;
  _BYTE v18[64];
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  char *v22[2];
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  _BYTE v31[64];
  _QWORD **v32;
  _QWORD *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LOBYTE(v21) = 0;
  v34 = 0;
  v6 = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    v9[0] = (char *)&v10;
    v9[1] = (char *)0x1000000000;
    v11 = v15;
    v12 = v15;
    v16 = v18;
    v17 = 0x800000000;
    v20[1] = 0;
    v20[0] = 0;
    v19 = v20;
    v21 = v6;
    v22[0] = (char *)&v23;
    v22[1] = (char *)0x1000000000;
    v24 = v28;
    v25 = v28;
    v26 = 8;
    v27 = 0;
    v13 = 8;
    v14 = 0;
    v29 = v31;
    v30 = 0x800000000;
    v33[1] = 0;
    v33[0] = 0;
    v32 = v33;
    v34 = 1;
    sub_1C61247C0((uint64_t)&v19, 0);
    if (v16 != v18)
      free(v16);
    if (v12 != v11)
      free(v12);
    sub_1C4EE41F8(v9);
    if (v34)
      v7 = (int32x2_t **)&v21;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  if ((sub_1C5B6E29C(a1, *(_QWORD *)(a2 + 16), *(llvm::LoopInfo **)(a2 + 24), *(_QWORD *)(a2 + 8), *(uint64_t **)(a2 + 40), v7) & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a3);
    result = (char **)sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
    if (*(_QWORD *)(a2 + 72))
      result = (char **)sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    result = (char **)sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v34)
  {
    sub_1C61247C0((uint64_t)&v32, v33[0]);
    if (v29 != v31)
      free(v29);
    if (v25 != v24)
      free(v25);
    return sub_1C4EE41F8(v22);
  }
  return result;
}

uint64_t sub_1C5B6E29C(uint64_t a1, uint64_t a2, llvm::LoopInfo *a3, uint64_t a4, uint64_t *a5, int32x2_t **a6)
{
  llvm::Type *v9;
  llvm::DSOLocalEquivalent **v10;
  char v11;
  llvm::SmallPtrSetImplBase *v12;
  llvm::SmallPtrSetImplBase *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int32x2_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  llvm::UndefValue *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  char *v62;
  uint64_t *v63;
  llvm::SmallPtrSetImplBase *v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int *v67;
  __int32 v68;
  int32x2_t v69;
  __int32 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  llvm::ValueAsMetadata *v76;
  _QWORD *v77;
  int v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int32x2_t *v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  llvm::UndefValue *v96;
  int v97;
  int v98;
  llvm::Value *v99;
  void (**v100)(void);
  void *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  int32x2_t *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  void *v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  char *v126;
  _QWORD *v128;
  int32x2_t *v129;
  _QWORD *v130;
  int32x2_t **v131;
  uint64_t *v132;
  uint64_t v133;
  llvm::SmallPtrSetImplBase *v137;
  uint64_t v138;
  _QWORD v139[5];
  __int16 v140;
  int v141;
  __int16 v142;
  char v143[8];
  uint64_t v144;
  void *__p;
  _QWORD *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  int v150;
  _BYTE v151[32];
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  int v155;
  _BYTE v156[64];
  _BYTE *v157;
  _BYTE *v158;
  uint64_t v159;
  int v160;
  _BYTE v161[70];
  __int16 v162;
  _QWORD v163[3];
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD v170[10];

  v170[8] = *MEMORY[0x1E0C80C00];
  v133 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 56) + 40) + 272;
  v157 = v161;
  v158 = v161;
  v159 = 8;
  v160 = 0;
  v152 = v156;
  v153 = v156;
  v154 = 8;
  v155 = 0;
  v147 = v151;
  v148 = v151;
  v149 = 4;
  v150 = 0;
  v165 = (char *)&v167;
  v166 = 0x800000000;
  sub_1C4DFE414((uint64_t)v143, a1);
  v132 = (uint64_t *)a3;
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v143, a3);
  if (a6)
    v129 = *a6;
  else
    v129 = 0;
  v11 = 0;
  v12 = (llvm::SmallPtrSetImplBase *)&v157;
  v13 = (llvm::SmallPtrSetImplBase *)&v152;
  v131 = a6;
  while (1)
  {
    v137 = v13;
    v15 = __p;
    v14 = v146;
    v128 = __p;
    while (v14 != v15)
    {
      v17 = (char *)(v14 - 1);
      v16 = *(v14 - 1);
      v130 = v17;
      v18 = *(_QWORD *)(v16 + 48);
      v138 = v16 + 40;
      if (v18 != v16 + 40)
      {
        while (1)
        {
          if (v18)
            v19 = v18 - 24;
          else
            v19 = 0;
          if (v18 && *(_BYTE *)(v19 + 16) == 83)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v147, v19);
          if (!*(_QWORD *)(v19 + 8))
          {
            if (llvm::wouldInstructionBeTriviallyDead(v19, a5))
            {
              v168 = 6;
              v169 = 0;
              v170[0] = v19;
              if (v19 != -8192 && v19 != -4096 && v19)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v168);
              v35 = (_QWORD *)sub_1C5087E70((unsigned int *)&v165, (unint64_t)&v168, 1);
              v36 = v166;
              v37 = &v165[24 * v166];
              *(_QWORD *)v37 = 6;
              *((_QWORD *)v37 + 1) = 0;
              v38 = (unint64_t)(v37 + 8);
              v39 = v35[2];
              *((_QWORD *)v37 + 2) = v39;
              if (v39 != -8192 && v39 != -4096)
              {
                if (v39)
                {
                  v40 = *v35 & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)v37 + 1) = *(_QWORD *)v40;
                  *(_QWORD *)v40 = v37;
                  *(_QWORD *)v37 = v40 | 6;
                  v41 = (uint64_t *)*((_QWORD *)v37 + 1);
                  if (v41)
                    *v41 = *v41 & 7 | v38;
                }
              }
              LODWORD(v166) = v36 + 1;
              if (v170[0] != -8192 && v170[0] != -4096 && v170[0])
              {
                v42 = v168 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v168 & 0xFFFFFFFFFFFFFFF8) = v169;
                if (v169)
                {
                  *(_QWORD *)v169 = *(_QWORD *)v169 & 7 | v42;
                }
                else
                {
                  v43 = v170[0];
                  v44 = ***(int32x2_t ****)v170[0];
                  v45 = (unint64_t)v44[303];
                  if (v45 <= v42)
                  {
                    v46 = v44[305].u32[0];
                    if (v45 + 16 * v46 > v42)
                    {
                      v47 = v46 - 1;
                      LODWORD(v48) = v47 & ((LODWORD(v170[0]) >> 4) ^ (LODWORD(v170[0]) >> 9));
                      v49 = (uint64_t *)(v45 + 16 * v48);
                      v50 = *v49;
                      if (v170[0] == *v49)
                      {
LABEL_48:
                        *v49 = -8192;
                        v44[304] = vadd_s32(v44[304], (int32x2_t)0x1FFFFFFFFLL);
                        v43 = v170[0];
                      }
                      else
                      {
                        v51 = 1;
                        while (v50 != -4096)
                        {
                          v52 = v48 + v51++;
                          v48 = v52 & v47;
                          v50 = *(_QWORD *)(v45 + 16 * v48);
                          if (v170[0] == v50)
                          {
                            v49 = (uint64_t *)(v45 + 16 * v48);
                            goto LABEL_48;
                          }
                        }
                      }
                      *(_BYTE *)(v43 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            goto LABEL_82;
          }
          v21 = *((_DWORD *)v12 + 5);
          v20 = *((_DWORD *)v12 + 6);
          if (v21 != v20)
          {
            v22 = sub_1C477672C((uint64_t)v12, v19);
            v23 = *((_QWORD *)v12 + 1);
            v24 = 16;
            if (v23 == *(_QWORD *)v12)
              v24 = 20;
            if (v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)v12 + v24)))
              goto LABEL_82;
          }
          v139[0] = v133;
          v139[1] = a5;
          v139[2] = a2;
          v139[3] = a4;
          v140 = 257;
          v141 = *(_DWORD *)&v161[66];
          v142 = v162;
          v139[4] = v19;
          v25 = *(_DWORD *)(v19 + 20);
          if ((v25 & 0x40000000) != 0)
          {
            v27 = *(uint64_t **)(v19 - 8);
            v26 = v25 & 0x7FFFFFF;
          }
          else
          {
            v26 = v25 & 0x7FFFFFF;
            v27 = (uint64_t *)(v19 - 32 * v26);
          }
          v168 = (unint64_t)v170;
          v169 = 0x800000000;
          if (v26 >= 9)
            break;
          v28 = 0;
          if (v26)
          {
            v29 = 0;
            v30 = v170;
            goto LABEL_24;
          }
          v34 = v170;
LABEL_51:
          LODWORD(v169) = v28 + v26;
          v53 = llvm::SimplifyInstructionWithOperands((llvm *)v19, (uint64_t)v34, (v28 + v26), (uint64_t)v139, v9, v10);
          if ((_QWORD *)v168 == v170)
          {
            if (!v53)
              goto LABEL_82;
          }
          else
          {
            free((void *)v168);
            if (!v53)
              goto LABEL_82;
          }
          if (sub_1C4F20780(v132, v19, (uint64_t)v53))
          {
            v54 = *(_QWORD *)(v19 + 8);
            if (v54)
            {
              v55 = (_QWORD *)((char *)v53 + 8);
              do
              {
                v56 = v54;
                v57 = v54 + 8;
                v54 = *(_QWORD *)(v54 + 8);
                v58 = *(_QWORD *)(v56 + 24);
                if (*(_QWORD *)v56)
                {
                  **(_QWORD **)(v56 + 16) = v54;
                  v59 = *(_QWORD *)(v56 + 8);
                  if (v59)
                    *(_QWORD *)(v59 + 16) = *(_QWORD *)(v56 + 16);
                }
                *(_QWORD *)v56 = v53;
                v60 = *((_QWORD *)v53 + 1);
                *(_QWORD *)(v56 + 8) = v60;
                if (v60)
                  *(_QWORD *)(v60 + 16) = v57;
                *(_QWORD *)(v56 + 16) = v55;
                *v55 = v56;
                v61 = *(_BYTE *)(v58 + 16) != 83 || v58 == 0;
                if (v61
                  || ((v62 = (char *)sub_1C477672C((uint64_t)&v147, v58), v148 != v147)
                    ? (v63 = &v149)
                    : (v63 = (uint64_t *)((char *)&v149 + 4)),
                      v62 == &v148[8 * *(unsigned int *)v63]))
                {
                  if (v21 == v20)
                    continue;
                  v65 = sub_1C477672C(a1 + 56, *(_QWORD *)(v58 + 40));
                  v66 = *(_QWORD *)(a1 + 64);
                  v67 = (unsigned int *)(v66 == *(_QWORD *)(a1 + 56) ? a1 + 76 : a1 + 72);
                  if (v65 == (_QWORD *)(v66 + 8 * *v67))
                    continue;
                  v64 = v12;
                }
                else
                {
                  v64 = v137;
                }
                sub_1C4774094(v64, v58);
              }
              while (v54);
            }
            a6 = v131;
            if (v131)
            {
              if (*((unsigned __int8 *)v53 + 16) >= 0x1Cu)
              {
                v68 = v129[5].i32[0];
                if (v68)
                {
                  v69 = v129[3];
                  v70 = v68 - 1;
                  LODWORD(v71) = v70 & ((v19 >> 4) ^ (v19 >> 9));
                  v72 = (uint64_t *)(*(_QWORD *)&v69 + 16 * v71);
                  v73 = *v72;
                  if (v19 == *v72)
                  {
                    v76 = (llvm::ValueAsMetadata *)v72[1];
                    if (v76)
                    {
LABEL_120:
                      v95 = v70 & ((v53 >> 4) ^ (v53 >> 9));
                      v96 = *(llvm::UndefValue **)(*(_QWORD *)&v69 + 16 * v95);
                      if (v53 == v96)
                      {
LABEL_124:
                        v99 = *(llvm::Value **)(*(_QWORD *)&v69 + 16 * v95 + 8);
                        if (v99)
                          llvm::Value::doRAUW(v76, v99, (llvm::Value *)1);
                      }
                      else
                      {
                        v97 = 1;
                        while (v96 != (llvm::UndefValue *)-4096)
                        {
                          v98 = v95 + v97++;
                          v95 = v98 & v70;
                          v96 = *(llvm::UndefValue **)(*(_QWORD *)&v69 + 16 * v95);
                          if (v53 == v96)
                            goto LABEL_124;
                        }
                      }
                    }
                  }
                  else
                  {
                    v74 = 1;
                    while (v73 != -4096)
                    {
                      v75 = v71 + v74++;
                      v71 = v75 & v70;
                      v73 = *(_QWORD *)(*(_QWORD *)&v69 + 16 * v71);
                      if (v19 == v73)
                      {
                        v76 = *(llvm::ValueAsMetadata **)(*(_QWORD *)&v69 + 16 * v71 + 8);
                        if (!v76)
                          break;
                        goto LABEL_120;
                      }
                    }
                  }
                }
              }
            }
            if (!*(_QWORD *)(v19 + 8) && llvm::wouldInstructionBeTriviallyDead(v19, a5))
            {
              v168 = 6;
              v169 = 0;
              v170[0] = v19;
              if (v19 != -8192 && v19 != -4096 && v19)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v168);
              v77 = (_QWORD *)sub_1C5087E70((unsigned int *)&v165, (unint64_t)&v168, 1);
              v78 = v166;
              v79 = &v165[24 * v166];
              *(_QWORD *)v79 = 6;
              *((_QWORD *)v79 + 1) = 0;
              v80 = (unint64_t)(v79 + 8);
              v81 = v77[2];
              *((_QWORD *)v79 + 2) = v81;
              if (v81 != -8192 && v81 != -4096)
              {
                if (v81)
                {
                  v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)v79 + 1) = *(_QWORD *)v82;
                  *(_QWORD *)v82 = v79;
                  *(_QWORD *)v79 = v82 | 6;
                  v83 = (uint64_t *)*((_QWORD *)v79 + 1);
                  if (v83)
                    *v83 = *v83 & 7 | v80;
                }
              }
              LODWORD(v166) = v78 + 1;
              if (v170[0] != -8192 && v170[0] != -4096 && v170[0])
              {
                v84 = v168 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v168 & 0xFFFFFFFFFFFFFFF8) = v169;
                if (v169)
                {
                  *(_QWORD *)v169 = *(_QWORD *)v169 & 7 | v84;
                }
                else
                {
                  v85 = v170[0];
                  v86 = ***(int32x2_t ****)v170[0];
                  v87 = (unint64_t)v86[303];
                  if (v87 <= v84)
                  {
                    v88 = v86[305].u32[0];
                    if (v87 + 16 * v88 > v84)
                    {
                      v89 = v88 - 1;
                      LODWORD(v90) = v89 & ((LODWORD(v170[0]) >> 4) ^ (LODWORD(v170[0]) >> 9));
                      v91 = (uint64_t *)(v87 + 16 * v90);
                      v92 = *v91;
                      if (v170[0] == *v91)
                      {
LABEL_113:
                        *v91 = -8192;
                        v86[304] = vadd_s32(v86[304], (int32x2_t)0x1FFFFFFFFLL);
                        v85 = v170[0];
                      }
                      else
                      {
                        v93 = 1;
                        while (v92 != -4096)
                        {
                          v94 = v90 + v93++;
                          v90 = v94 & v89;
                          v92 = *(_QWORD *)(v87 + 16 * v90);
                          if (v170[0] == v92)
                          {
                            v91 = (uint64_t *)(v87 + 16 * v90);
                            goto LABEL_113;
                          }
                        }
                      }
                      *(_BYTE *)(v85 + 17) &= ~1u;
                    }
                  }
                }
              }
            }
            v11 = 1;
          }
LABEL_82:
          v18 = *(_QWORD *)(v18 + 8);
          if (v18 == v138)
            goto LABEL_127;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v26, 8);
        v28 = v169;
        v30 = (_QWORD *)v168;
        v29 = v169;
LABEL_24:
        v31 = 32 * v26;
        v32 = &v30[v29];
        do
        {
          v33 = *v27;
          v27 += 4;
          *v32++ = v33;
          v31 -= 32;
        }
        while (v31);
        v34 = (_QWORD *)v168;
        goto LABEL_51;
      }
LABEL_127:
      v14 = v130;
      v15 = v128;
    }
    if ((_DWORD)v166)
    {
      v164 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v165, a5, a6, (uint64_t)v163);
      if (v164 == v163)
      {
        v100 = (void (**)(void))(v163[0] + 32);
      }
      else
      {
        if (!v164)
        {
LABEL_134:
          v11 = 1;
          goto LABEL_135;
        }
        v100 = (void (**)(void))(*v164 + 40);
      }
      (*v100)();
      goto LABEL_134;
    }
LABEL_135:
    if (*((_DWORD *)v137 + 5) == *((_DWORD *)v137 + 6))
      break;
    v101 = (void *)*((_QWORD *)v12 + 1);
    if (v101 == *(void **)v12)
      goto LABEL_137;
    v118 = *((unsigned int *)v12 + 4);
    if (v118 < 0x21 || 4 * (*((_DWORD *)v12 + 5) - *((_DWORD *)v12 + 6)) >= v118)
    {
      memset(v101, 255, 8 * v118);
LABEL_137:
      *((_DWORD *)v12 + 5) = 0;
      *((_DWORD *)v12 + 6) = 0;
      goto LABEL_138;
    }
    free(v101);
    v119 = *((_DWORD *)v12 + 5) - *((_DWORD *)v12 + 6);
    v120 = 1 << (33 - __clz(v119 - 1));
    *((_DWORD *)v12 + 5) = 0;
    *((_DWORD *)v12 + 6) = 0;
    if (v119 <= 0x10)
      v121 = 32;
    else
      v121 = v120;
    *((_DWORD *)v12 + 4) = v121;
    v122 = malloc_type_malloc(8 * v121, 0x4065EBACuLL);
    if (!v122)
LABEL_187:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)v12 + 1) = v122;
    memset(v122, 255, 8 * *((unsigned int *)v12 + 4));
LABEL_138:
    if (v148 == v147)
      goto LABEL_139;
    if (v149 < 0x21 || 4 * (HIDWORD(v149) - v150) >= v149)
    {
      memset(v148, 255, 8 * v149);
LABEL_139:
      HIDWORD(v149) = 0;
      v150 = 0;
      goto LABEL_140;
    }
    free(v148);
    v123 = 1 << (33 - __clz(HIDWORD(v149) - v150 - 1));
    v124 = (HIDWORD(v149) - v150) > 0x10;
    HIDWORD(v149) = 0;
    v150 = 0;
    if (v124)
      v125 = v123;
    else
      v125 = 32;
    LODWORD(v149) = v125;
    v126 = (char *)malloc_type_malloc(8 * v125, 0x4065EBACuLL);
    if (!v126)
      goto LABEL_187;
    v148 = v126;
    memset(v126, 255, 8 * v149);
LABEL_140:
    if ((_DWORD)v166)
    {
      v102 = v165;
      v103 = &v165[24 * v166];
      do
      {
        v104 = *((_QWORD *)v103 - 1);
        if (v104 != -8192 && v104 != -4096 && v104 != 0)
        {
          v106 = *((_QWORD *)v103 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v106 = *((_QWORD *)v103 - 2);
          v107 = (unint64_t *)*((_QWORD *)v103 - 2);
          if (v107)
          {
            *v107 = *v107 & 7 | v106;
          }
          else
          {
            v108 = *((_QWORD *)v103 - 1);
            v109 = ***(int32x2_t ****)v108;
            v110 = (unint64_t)v109[303];
            if (v110 <= v106)
            {
              v111 = v109[305].u32[0];
              if (v110 + 16 * v111 > v106)
              {
                v112 = v111 - 1;
                LODWORD(v113) = v112 & ((v108 >> 4) ^ (v108 >> 9));
                v114 = (uint64_t *)(v110 + 16 * v113);
                v115 = *v114;
                if (v108 == *v114)
                {
LABEL_158:
                  *v114 = -8192;
                  v109[304] = vadd_s32(v109[304], (int32x2_t)0x1FFFFFFFFLL);
                  v108 = *((_QWORD *)v103 - 1);
                }
                else
                {
                  v116 = 1;
                  while (v115 != -4096)
                  {
                    v117 = v113 + v116++;
                    v113 = v117 & v112;
                    v115 = *(_QWORD *)(v110 + 16 * v113);
                    if (v108 == v115)
                    {
                      v114 = (uint64_t *)(v110 + 16 * v113);
                      goto LABEL_158;
                    }
                  }
                }
                *(_BYTE *)(v108 + 17) &= ~1u;
              }
            }
          }
        }
        v103 -= 24;
      }
      while (v103 != v102);
    }
    LODWORD(v166) = 0;
    v13 = v12;
    v12 = v137;
  }
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v144, 8);
  sub_1C52768FC(&v165);
  if (v148 != v147)
    free(v148);
  if (v153 != v152)
    free(v153);
  if (v158 != v157)
    free(v158);
  return v11 & 1;
}

uint64_t sub_1C5B6EE14(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Simplify instructions in loops";
  *(_QWORD *)(v4 + 8) = 30;
  *(_QWORD *)(v4 + 16) = "loop-instsimplify";
  *(_QWORD *)(v4 + 24) = 17;
  *(_QWORD *)(v4 + 32) = &unk_1ED81F368;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B6EF88;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5B6EEC0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F368;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81957F8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F370);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B6EE14;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F370, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B6EF88()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B6EEC0(v0);
}

void sub_1C5B6EFB4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B6EFD8(uint64_t a1, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B6F060(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  llvm::AssumptionCacheTracker *v13;
  uint64_t AssumptionCache;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LoopInfo *v27;
  void **v28;
  void *v29;
  uint64_t v31;
  void *v32;
  void **v33;
  int v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;
  uint64_t v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int32x2_t *v43;
  void *__src;
  uint64_t v45;
  _BYTE v46[48];
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  _QWORD **v56;
  _QWORD *v57[4];

  v57[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::AssumptionCacheTracker::ID);
  v13 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v13, *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  v15 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::TargetLibraryInfoWrapperPass::ID);
  v17 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v18 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  llvm::TargetLibraryAnalysis::run(v17 + 32, v18, (uint64_t)&v43);
  *(_QWORD *)(v17 + 240) = v43;
  v19 = (int32x2_t **)(v17 + 240);
  if (!*(_BYTE *)(v17 + 320))
  {
    v31 = AssumptionCache;
    v32 = (void *)(v17 + 264);
    *(_QWORD *)(v17 + 248) = v17 + 264;
    v33 = (void **)(v17 + 248);
    *(_QWORD *)(v17 + 256) = 0x600000000;
    v34 = v45;
    if (!(_DWORD)v45 || v33 == &__src)
      goto LABEL_43;
    if (v45 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 248, v17 + 264, v45, 8);
      v35 = v45;
      if (!(_DWORD)v45)
      {
LABEL_42:
        *(_DWORD *)(v17 + 256) = v34;
LABEL_43:
        *(_DWORD *)(v17 + 312) = v47;
        *(_BYTE *)(v17 + 320) = 1;
        AssumptionCache = v31;
        goto LABEL_25;
      }
      v32 = *v33;
    }
    else
    {
      v35 = v45;
    }
    memcpy(v32, __src, 8 * v35);
    goto LABEL_42;
  }
  if (v19 != &v43)
  {
    v20 = v10;
    v21 = v7;
    v22 = AssumptionCache;
    v23 = (void **)(v17 + 248);
    v24 = v45;
    v25 = *(unsigned int *)(v17 + 256);
    if (v25 >= v45)
    {
      if ((_DWORD)v45)
        memmove(*v23, __src, 8 * v45);
      goto LABEL_23;
    }
    if (*(_DWORD *)(v17 + 260) < v45)
    {
      *(_DWORD *)(v17 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 248, v17 + 264, v24, 8);
    }
    else if ((_DWORD)v25)
    {
      memmove(*v23, __src, 8 * v25);
      goto LABEL_21;
    }
    v25 = 0;
LABEL_21:
    if (v25 != v45)
      memcpy((char *)*v23 + 8 * v25, (char *)__src + 8 * v25, 8 * v45 - 8 * v25);
LABEL_23:
    *(_DWORD *)(v17 + 256) = v24;
    AssumptionCache = v22;
    v7 = v21;
    v10 = v20;
    v19 = (int32x2_t **)(v17 + 240);
  }
  *(_DWORD *)(v17 + 312) = v47;
LABEL_25:
  v26 = v7 + 32;
  v27 = (llvm::LoopInfo *)(v10 + 32);
  if (__src != v46)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v38);
  sub_1C4D8B52C(v36);
  v28 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v29 = *v28;
    v28 += 2;
  }
  while (v29 != &llvm::MemorySSAWrapperPass::ID);
  v43 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v28 - 1) + 96))(*(v28 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  __src = v46;
  v45 = 0x1000000000;
  v48 = v52;
  v49 = v52;
  v50 = 8;
  v51 = 0;
  v53 = v55;
  v54 = 0x800000000;
  v57[1] = 0;
  v57[0] = 0;
  v56 = v57;
  v4 = sub_1C5B6E29C((uint64_t)a2, v26, v27, AssumptionCache, (uint64_t *)v19, &v43);
  sub_1C61247C0((uint64_t)&v56, v57[0]);
  if (v53 != v55)
    free(v53);
  if (v49 != v48)
    free(v49);
  sub_1C4EE41F8((char **)&__src);
  return v4;
}

uint64_t sub_1C5B6F4C0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeDependenceAnalysisWrapperPassPass(a1, v3);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Interchanges loops for cache reuse";
  *(_QWORD *)(v5 + 8) = 34;
  *(_QWORD *)(v5 + 16) = "loop-interchange";
  *(_QWORD *)(v5 + 24) = 16;
  *(_QWORD *)(v5 + 32) = &unk_1ED81F438;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5B6F62C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5B6F564(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F438;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81958A8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F440);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B6F4C0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F440, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B6F62C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B6F564(v0);
}

void sub_1C5B6F658(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B6F67C(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B6F6C0(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  const llvm::Loop *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  const llvm::Loop ***v25;
  uint64_t v26;
  int v27;
  _QWORD v28[5];
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v4 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::ScalarEvolutionWrapperPass::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID);
  v10 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::DependenceAnalysisWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::DependenceAnalysisWrapperPass::ID)+ 32);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::DominatorTreeWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::DominatorTreeWrapperPass::ID);
  v16 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v18 = v9 + 32;
  v19 = v15 + 32;
  v20 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v28[0] = v6;
  v28[1] = v18;
  v28[2] = v12;
  v28[3] = v19;
  v28[4] = v20;
  if (*(_QWORD *)v2)
    return 0;
  v29 = v31;
  v30 = 0x800000000;
  v23 = *((_QWORD *)v2 + 1);
  v24 = *((_QWORD *)v2 + 2);
  v25 = (const llvm::Loop ***)((char *)v2 + 8);
  if (v23 == v24)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    LODWORD(v26) = 0;
    do
    {
      if (v24 - v23 != 8)
      {
        v27 = 0;
        goto LABEL_27;
      }
      if (v26 >= HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v26 + 1, 8);
        LODWORD(v26) = v30;
      }
      *((_QWORD *)v29 + v26) = v2;
      v26 = (v30 + 1);
      LODWORD(v30) = v30 + 1;
      v2 = **v25;
      v25 = (const llvm::Loop ***)((char *)v2 + 8);
      v23 = *((_QWORD *)v2 + 1);
      v24 = *((_QWORD *)v2 + 2);
    }
    while (v23 != v24);
    if (v26 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v26 + 1, 8);
      LODWORD(v26) = v30;
    }
  }
  *((_QWORD *)v29 + v26) = v2;
  v27 = v30 + 1;
LABEL_27:
  LODWORD(v30) = v27;
  v21 = sub_1C5B6F96C((uint64_t)v28, (uint64_t)&v29);
  if (v29 != v31)
    free(v29);
  return v21;
}

uint64_t sub_1C5B6F96C(uint64_t a1, uint64_t a2)
{
  size_t v2;
  char v3;
  const llvm::Loop **v7;
  uint64_t v8;
  const llvm::Loop *v9;
  llvm::ScalarEvolution *v10;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::Loop **v12;
  const llvm::Loop *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  llvm::Instruction **v26;
  llvm::Instruction **v27;
  llvm::Instruction **v28;
  llvm::Instruction *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char v37;
  uint64_t v38;
  llvm::APInt *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char v51;
  char *v52;
  char *v53;
  char v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  void *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int64x2_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  const llvm::Loop **v89;
  const llvm::Loop *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char *v96;
  _QWORD *v97;
  void *v98;
  char *v99;
  void *v100;
  void *v101;
  llvm::Instruction **v102;
  const llvm::Loop *v103;
  llvm::Instruction **v104;
  llvm::Instruction **v105;
  uint64_t v106;
  uint64_t v107;
  llvm::Instruction **v108;
  unsigned int v109;
  void *__p[2];
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int64x2_t v114;
  char *v115;
  void **v116;
  void *v117;
  uint64_t v118;
  _QWORD v119[18];

  v119[16] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a2 + 8);
  if ((v2 - 11) < 0xFFFFFFF7)
  {
LABEL_2:
    v3 = 0;
    return v3 & 1;
  }
  v7 = *(const llvm::Loop ***)a2;
  v8 = 8 * v2;
  do
  {
    v9 = *v7;
    v10 = *(llvm::ScalarEvolution **)a1;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(*(llvm::ScalarEvolution **)a1, *v7);
    if (*(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)v9, (uint64_t)v10, 0)+ 24) == 15|| llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges((uint64_t)v9) != 1|| !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v9))
    {
      goto LABEL_2;
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  v12 = *(const llvm::Loop ***)a2;
  __p[0] = 0;
  __p[1] = 0;
  v111 = 0;
  v13 = *v12;
  v14 = *(_QWORD *)(a1 + 16);
  v117 = v119;
  v118 = 0x1000000000;
  v15 = *((_QWORD *)v13 + 4);
  v16 = *((_QWORD *)v13 + 5);
  if (v16 != v15)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)v15 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v15 + 48); i != v19; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v21 = i - 24;
        else
          v21 = 0;
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v22 == 60)
          v23 = v21;
        else
          v23 = 0;
        if (!i || v22 != 60)
        {
          v23 = v22 == 61 ? v21 : 0;
          if (!i || v22 != 61)
            continue;
        }
        v24 = *(unsigned __int8 *)(v23 + 16);
        if (v24 == 60 || v24 == 61)
        {
          v25 = *(_WORD *)(v23 + 18);
          if ((v25 & 0x380) != 0 || (v25 & 1) != 0)
            goto LABEL_166;
        }
        else if ((v24 - 63) < 3 || (*(_WORD *)(v23 + 18) & 1) != 0)
        {
LABEL_166:
          v70 = 0;
          goto LABEL_168;
        }
        if (v17 >= HIDWORD(v118))
        {
          v106 = v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v17 + 1, 8);
          v14 = v106;
          v17 = v118;
        }
        *((_QWORD *)v117 + v17) = v21;
        LODWORD(v118) = v118 + 1;
        v17 = v118;
        v18 = v118;
      }
      v15 += 8;
    }
    while (v15 != v16);
    if (v18)
    {
      v26 = (llvm::Instruction **)v117;
      v102 = (llvm::Instruction **)((char *)v117 + 8 * v18);
      v103 = v13;
      v107 = v14;
      while (1)
      {
        v27 = (llvm::Instruction **)((char *)v117 + 8 * v118);
        if (v26 != v27)
          break;
LABEL_164:
        ++v26;
        v70 = 1;
        if (v26 == v102)
          goto LABEL_168;
      }
      v28 = v26;
      v104 = v26;
      v105 = (llvm::Instruction **)((char *)v117 + 8 * v118);
      while (1)
      {
        v29 = *v28;
        if (*((_BYTE *)*v26 + 16) == 60 && *((_BYTE *)v29 + 16) == 60)
          goto LABEL_149;
        llvm::DependenceInfo::depends(v14, *v26, v29, 1, &v112);
        if (!v112)
          break;
        v108 = v28;
        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
        if (v109)
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 1;
          while (1)
          {
            v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 56))(v112, v33);
            if (v34)
            {
              if (!*(_WORD *)(v34 + 24))
                break;
            }
            if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 88))(v112, v33))
            {
              v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 48))(v112, v33);
              if ((v36 & 0xFFFFFFFD) == 1)
              {
                v37 = 60;
              }
              else if ((v36 & 0xFFFFFFFD) == 4)
              {
                v37 = 62;
              }
              else if (v36 == 2)
              {
                v37 = 61;
              }
              else
              {
                v37 = 42;
              }
              if (v32 >= v30)
              {
                v46 = &v32[-v31];
                v47 = (uint64_t)&v32[-v31 + 1];
                if (v47 < 0)
                  goto LABEL_193;
                if (2 * (uint64_t)&v30[-v31] > (unint64_t)v47)
                  v47 = 2 * (_QWORD)&v30[-v31];
                if ((unint64_t)&v30[-v31] >= 0x3FFFFFFFFFFFFFFFLL)
                  v44 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v44 = v47;
                if (v44)
                  v45 = (char *)operator new(v44);
                else
                  v45 = 0;
                v48 = &v46[(_QWORD)v45];
                v52 = &v46[(_QWORD)v45];
                *v52 = v37;
                v49 = v52 + 1;
                if (v32 != (char *)v31)
                {
                  v53 = &v32[~v31];
                  do
                  {
                    v54 = *--v32;
                    (v53--)[(_QWORD)v45] = v54;
                  }
                  while (v32 != (char *)v31);
                  goto LABEL_109;
                }
                goto LABEL_110;
              }
LABEL_95:
              *v32 = v37;
              v35 = v32 + 1;
              goto LABEL_96;
            }
            if (v32 >= v30)
            {
              v42 = &v32[-v31];
              v43 = (uint64_t)&v32[-v31 + 1];
              if (v43 < 0)
                goto LABEL_193;
              if (2 * (uint64_t)&v30[-v31] > (unint64_t)v43)
                v43 = 2 * (_QWORD)&v30[-v31];
              if ((unint64_t)&v30[-v31] >= 0x3FFFFFFFFFFFFFFFLL)
                v44 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              if (v44)
                v45 = (char *)operator new(v44);
              else
                v45 = 0;
              v48 = &v42[(_QWORD)v45];
              v42[(_QWORD)v45] = 83;
              v49 = &v42[(_QWORD)v45 + 1];
              if (v32 != (char *)v31)
              {
                v50 = &v32[~v31];
                do
                {
                  v51 = *--v32;
                  (v50--)[(_QWORD)v45] = v51;
                }
                while (v32 != (char *)v31);
                goto LABEL_109;
              }
              goto LABEL_110;
            }
            *v32 = 83;
            v35 = v32 + 1;
LABEL_96:
            v49 = v35;
LABEL_113:
            v33 = (v33 + 1);
            v32 = v49;
            if (v33 > v109)
              goto LABEL_117;
          }
          v38 = *(_QWORD *)(v34 + 32);
          v39 = (llvm::APInt *)(v38 + 24);
          v40 = *(_DWORD *)(v38 + 32);
          v41 = v40 - 1;
          if (v40 > 0x40)
          {
            if (((*(_QWORD *)(*(_QWORD *)v39 + 8 * (v41 >> 6)) >> v41) & 1) == 0)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v39) == v40)
                goto LABEL_93;
LABEL_58:
              v37 = 62;
LABEL_94:
              if (v32 >= v30)
              {
                v55 = &v32[-v31];
                v56 = (uint64_t)&v32[-v31 + 1];
                if (v56 < 0)
                  goto LABEL_193;
                if (2 * (uint64_t)&v30[-v31] > (unint64_t)v56)
                  v56 = 2 * (_QWORD)&v30[-v31];
                if ((unint64_t)&v30[-v31] >= 0x3FFFFFFFFFFFFFFFLL)
                  v44 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v44 = v56;
                if (v44)
                  v45 = (char *)operator new(v44);
                else
                  v45 = 0;
                v48 = &v55[(_QWORD)v45];
                v57 = &v55[(_QWORD)v45];
                *v57 = v37;
                v49 = v57 + 1;
                if (v32 != (char *)v31)
                {
                  v58 = &v32[~v31];
                  do
                  {
                    v59 = *--v32;
                    (v58--)[(_QWORD)v45] = v59;
                  }
                  while (v32 != (char *)v31);
LABEL_109:
                  v48 = v45;
                }
LABEL_110:
                v30 = &v45[v44];
                if (v31)
                  operator delete((void *)v31);
                v31 = (unint64_t)v48;
                goto LABEL_113;
              }
              goto LABEL_95;
            }
          }
          else if (((*(_QWORD *)v39 >> v41) & 1) == 0)
          {
            if (*(_QWORD *)v39)
              goto LABEL_58;
LABEL_93:
            v37 = 61;
            goto LABEL_94;
          }
          v37 = 60;
          goto LABEL_94;
        }
        v49 = 0;
        v31 = 0;
        v30 = 0;
LABEL_117:
        v60 = (uint64_t)&v49[-v31];
        if (&v49[-v31] == (char *)v2)
        {
          v61 = (uint64_t)v49;
        }
        else
        {
          do
          {
            if (v49 >= v30)
            {
              v62 = v60 + 1;
              if (v60 + 1 < 0)
                goto LABEL_193;
              if (2 * (uint64_t)&v30[-v31] > v62)
                v62 = 2 * (_QWORD)&v30[-v31];
              if ((unint64_t)&v30[-v31] >= 0x3FFFFFFFFFFFFFFFLL)
                v63 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v63 = v62;
              if (v63)
                v64 = (char *)operator new(v63);
              else
                v64 = 0;
              v65 = &v64[v60];
              v64[v60] = 73;
              v61 = (uint64_t)&v64[v60 + 1];
              if (v49 != (char *)v31)
              {
                v66 = v60 - 1;
                do
                {
                  v67 = *--v49;
                  v64[v66--] = v67;
                }
                while (v49 != (char *)v31);
                v65 = v64;
              }
              v30 = &v64[v63];
              if (v31)
                operator delete((void *)v31);
              v31 = (unint64_t)v65;
            }
            else
            {
              *v49 = 73;
              v61 = (uint64_t)(v49 + 1);
            }
            v60 = v61 - v31;
            v49 = (char *)v61;
          }
          while (v61 - v31 != v2);
        }
        v68 = __p[1];
        if (__p[1] >= v111)
        {
          v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          v73 = v72 + 1;
          if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_193:
            abort();
          if (0x5555555555555556 * ((v111 - (char *)__p[0]) >> 3) > v73)
            v73 = 0x5555555555555556 * ((v111 - (char *)__p[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)__p[0]) >> 3) >= 0x555555555555555)
            v74 = 0xAAAAAAAAAAAAAAALL;
          else
            v74 = v73;
          v116 = (void **)&v111;
          if (v74 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v75 = operator new(24 * v74);
          v76 = &v75[((char *)__p[1] - (char *)__p[0]) >> 3];
          v76[1] = 0;
          v76[2] = 0;
          *v76 = 0;
          sub_1C515FEEC(&v75[3 * v72], (const void *)v31, v61, v2);
          v78 = __p[0];
          v77 = __p[1];
          if (__p[1] == __p[0])
          {
            v79 = vdupq_n_s64((unint64_t)__p[1]);
            v80 = (char *)&v75[3 * v72];
          }
          else
          {
            v80 = (char *)&v75[3 * v72];
            do
            {
              *((_QWORD *)v80 - 3) = 0;
              *((_QWORD *)v80 - 2) = 0;
              v80 -= 24;
              *((_QWORD *)v80 + 2) = 0;
              v81 = *(_OWORD *)(v77 - 3);
              v77 -= 3;
              *(_OWORD *)v80 = v81;
              *((_QWORD *)v80 + 2) = v77[2];
              *v77 = 0;
              v77[1] = 0;
              v77[2] = 0;
            }
            while (v77 != v78);
            v79 = *(int64x2_t *)__p;
          }
          v69 = v76 + 3;
          __p[0] = v80;
          __p[1] = v76 + 3;
          v114 = v79;
          v82 = v111;
          v111 = (char *)&v75[3 * v74];
          v115 = v82;
          v113 = v79.i64[0];
          sub_1C61B83C8((uint64_t)&v113);
          v26 = v104;
        }
        else
        {
          *(_QWORD *)__p[1] = 0;
          v68[1] = 0;
          v68[2] = 0;
          sub_1C515FEEC(v68, (const void *)v31, v61, v2);
          v69 = v68 + 3;
          v26 = v104;
        }
        __p[1] = v69;
        v13 = v103;
        if (0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v69 - (unint64_t)__p[0]) >> 3) <= 0x64)
        {
          v27 = v105;
          v28 = v108;
          goto LABEL_142;
        }
        v70 = 0;
        v27 = v105;
        v28 = v108;
LABEL_144:
        v71 = v112;
        v112 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        if (v31)
          operator delete((void *)v31);
        v14 = v107;
        if (!v70)
          goto LABEL_168;
LABEL_149:
        if (++v28 == v27)
          goto LABEL_164;
      }
      v31 = 0;
LABEL_142:
      v70 = 1;
      goto LABEL_144;
    }
  }
  v70 = 1;
LABEL_168:
  if (v117 != v119)
    free(v117);
  if (v70
    && llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v13)
    && (v83 = *(_DWORD *)(a2 + 8), v84 = (v83 - 1), v83 != 1))
  {
    v3 = 0;
    v85 = v83 - 1;
    do
    {
      v86 = 0;
      v87 = v84;
      LODWORD(v88) = v84;
      do
      {
        v88 = (v88 - 1);
        if (sub_1C5B702BC((llvm::ScalarEvolution **)a1, *(llvm::Loop **)(*(_QWORD *)a2 + 8 * v87), *(llvm::Loop **)(*(_QWORD *)a2 + 8 * v88), v87, v88, (llvm::Value *)__p))
        {
          v89 = *(const llvm::Loop ***)a2;
          v90 = *(const llvm::Loop **)(*(_QWORD *)a2 + 8 * v88);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v88) = *(_QWORD *)(*(_QWORD *)a2 + 8 * v87);
          v89[v87] = v90;
          v91 = -1431655765 * ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
          if ((_DWORD)v91)
          {
            v92 = 0;
            v93 = 24 * v91;
            do
            {
              v94 = *(_QWORD *)((char *)__p[0] + v92);
              v95 = *(_BYTE *)(v94 + v88);
              *(_BYTE *)(v94 + v88) = *(_BYTE *)(v94 + v87);
              *(_BYTE *)(v94 + v87) = v95;
              v92 += 24;
            }
            while (v93 != v92);
          }
          v3 = 1;
          v86 = 1;
        }
        --v87;
      }
      while (v88 > (int)v84 - v85);
      --v85;
    }
    while ((v86 & (v85 != 0)) != 0);
  }
  else
  {
    v3 = 0;
  }
  v96 = (char *)__p[0];
  if (__p[0])
  {
    v97 = __p[1];
    v98 = __p[0];
    if (__p[1] != __p[0])
    {
      v99 = (char *)__p[1];
      do
      {
        v101 = (void *)*((_QWORD *)v99 - 3);
        v99 -= 24;
        v100 = v101;
        if (v101)
        {
          *(v97 - 2) = v100;
          operator delete(v100);
        }
        v97 = v99;
      }
      while (v99 != v96);
      v98 = __p[0];
    }
    __p[1] = v96;
    operator delete(v98);
  }
  return v3 & 1;
}

uint64_t sub_1C5B702BC(llvm::ScalarEvolution **a1, llvm::Loop *this, llvm::Loop *a3, int a4, unsigned int a5, llvm::Value *a6)
{
  uint64_t v6;
  uint64_t j;
  unint64_t v8;
  unint64_t v9;
  llvm::Loop **v10;
  llvm::ScalarEvolution *v11;
  llvm::OptimizationRemarkEmitter *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v29;
  llvm::Loop *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  llvm::Loop **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  unint64_t v54;
  void **v55;
  char *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int32x2_t *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Loop *v76;
  llvm::BasicBlock *LoopLatch;
  uint64_t v78;
  uint64_t ExitingBlock;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t LoopPredecessor;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::OptimizationRemarkEmitter *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  llvm::OptimizationRemarkEmitter *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  unint64_t v108;
  void **v109;
  char *v110;
  unint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  unint64_t v116;
  void **v117;
  unint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  llvm::OptimizationRemarkEmitter *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  unint64_t v132;
  void **v133;
  unint64_t v134;
  void **v135;
  int v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  BOOL v152;
  unsigned __int8 *v154;
  _BOOL4 v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void **v159;
  char *v160;
  unint64_t v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  unint64_t v166;
  void **v167;
  llvm::ScalarEvolution *v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  int v175;
  unsigned int v176;
  const llvm::SCEV *SCEVIter;
  void (**v178)(void);
  char v179;
  char v180;
  llvm::OptimizationRemarkEmitter *v181;
  uint64_t v182;
  llvm::Loop *v183;
  unint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t *v191;
  unsigned int v192;
  uint64_t v194;
  unint64_t **v195;
  unint64_t *v196;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  BOOL v212;
  int v213;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  int v245;
  llvm::LoopNest *ExitBlock;
  llvm::OptimizationRemarkEmitter *v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  void **v255;
  unint64_t v256;
  void **v257;
  unint64_t v258;
  void **v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  void **v265;
  unint64_t v266;
  void **v267;
  unint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  int v282;
  llvm::Loop *v284;
  uint64_t UniqueExitBlock;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t *v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  llvm::Loop *v295;
  uint64_t v296;
  uint64_t k;
  uint64_t v298;
  uint64_t v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  llvm::BasicBlock *v306;
  llvm::OptimizationRemarkEmitter *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  llvm::SmallPtrSetImplBase *v312;
  llvm::Value *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  int v318;
  uint64_t v319;
  unsigned __int8 v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  llvm::Value *v331;
  int v332;
  llvm::OptimizationRemarkEmitter *v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int v337;
  llvm::OptimizationRemarkEmitter *v338;
  uint64_t v339;
  llvm::Loop *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t *v345;
  int v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  void **v353;
  unint64_t v354;
  void **v355;
  char *v356;
  unint64_t v357;
  void **v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  void **v364;
  unint64_t v365;
  void **v366;
  unint64_t v367;
  void **v368;
  uint64_t v369;
  uint64_t v370;
  void **v371;
  char *v372;
  void **v373;
  int v374;
  uint64_t v375;
  unsigned int v376;
  llvm::Loop *v377;
  uint64_t v378;
  int v379;
  unint64_t *v380;
  unint64_t v381;
  llvm *v382;
  uint64_t v383;
  uint64_t v384;
  unsigned __int8 *v385;
  llvm::BasicBlock *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned __int8 *v390;
  uint64_t v391;
  llvm::BasicBlock *v392;
  llvm *v393;
  _QWORD *m;
  llvm::BasicBlock *v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void **v401;
  unint64_t v402;
  void **v403;
  unint64_t v404;
  void **v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  llvm::Instruction *v416;
  llvm::BasicBlock *v417;
  unsigned __int8 *v418;
  llvm::Instruction *v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t UniquePredecessor;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  llvm::Value *v437;
  uint64_t v438;
  uint64_t v439;
  llvm::BasicBlock *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t UniqueSuccessor;
  unint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  llvm::BasicBlock **v455;
  uint64_t v456;
  llvm::Loop *v457;
  __int128 v458;
  llvm::Value *v459;
  int32x2_t *v460;
  uint64_t v461;
  int v462;
  int v463;
  unsigned int v464;
  llvm::Value **v465;
  llvm::Value *v466;
  llvm::Value **v467;
  int v468;
  BOOL v469;
  unsigned int v470;
  llvm::Value **v471;
  _QWORD *n;
  _QWORD *ii;
  unint64_t v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  char *v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  llvm::Value **v487;
  llvm::Value *v488;
  int v489;
  int v490;
  _QWORD *i4;
  _QWORD *v492;
  _QWORD *v493;
  char *jj;
  _QWORD *v495;
  _QWORD *v496;
  int64_t v497;
  unint64_t v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  unint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  uint64_t v518;
  _BYTE *v519;
  _BYTE *v520;
  uint64_t v521;
  unsigned __int32 v522;
  uint64_t *v523;
  uint64_t *v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t *v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  char *v542;
  uint64_t *v543;
  uint64_t v544;
  const void *v545;
  uint64_t v546;
  const void *v547;
  const void **v548;
  const void **v549;
  const void *v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  const void *v555;
  int v556;
  int v557;
  uint64_t v558;
  unsigned int v560;
  int v561;
  unsigned int v562;
  _QWORD *v563;
  const void *v564;
  _QWORD *v565;
  int v566;
  BOOL v567;
  unsigned int v568;
  _QWORD *v569;
  unint64_t v570;
  llvm::BasicBlock **v571;
  _QWORD *v572;
  int v573;
  int v574;
  unsigned int v575;
  llvm::BasicBlock **v576;
  llvm::BasicBlock *v577;
  llvm::BasicBlock **v578;
  int v579;
  BOOL v580;
  unsigned int v581;
  llvm::BasicBlock **v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  llvm::Value *v596;
  llvm::BasicBlock *v597;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  unint64_t v610;
  char *v611;
  llvm::BasicBlock **v612;
  llvm::BasicBlock *v613;
  unsigned int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  llvm::BasicBlock *v620;
  uint64_t v621;
  unint64_t *kk;
  llvm::Instruction *v623;
  unint64_t *v624;
  llvm::Instruction *v625;
  llvm::Instruction **v626;
  llvm::Instruction **v627;
  uint64_t mm;
  llvm::Instruction *v629;
  uint64_t v630;
  llvm::Instruction *v631;
  uint64_t nn;
  uint64_t v633;
  uint64_t v634;
  int v635;
  uint64_t *v636;
  uint64_t v637;
  int v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  int v646;
  llvm::SmallPtrSetImplBase *v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  uint64_t *v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unsigned int v656;
  BOOL v657;
  unint64_t *i1;
  unint64_t *v660;
  unint64_t *v661;
  uint64_t v662;
  int v663;
  uint64_t *v664;
  unsigned int v665;
  BOOL v666;
  unint64_t v668;
  _QWORD *v669;
  unint64_t v670;
  uint64_t v671;
  llvm::ValueSymbolTable *v672;
  void *v673;
  llvm::Loop *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  llvm::Instruction **v693;
  llvm::Instruction **v694;
  llvm::Loop *i2;
  llvm::Instruction *v696;
  _QWORD *v697;
  llvm::Instruction *v698;
  llvm::Instruction **v699;
  llvm::Instruction **v700;
  llvm::OptimizationRemarkEmitter *i3;
  llvm::Instruction *v702;
  _QWORD *v703;
  llvm::Instruction *v704;
  uint64_t v705;
  uint64_t v706;
  unsigned int v707;
  llvm::Loop *v708;
  llvm::Loop *v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  unint64_t v716;
  _QWORD *v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unsigned __int32 v722;
  uint64_t *v723;
  __int32 v724;
  __int8 *v725;
  __int32 v726;
  char *v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  _QWORD *v733;
  llvm::Loop **v734;
  llvm::Loop **v735;
  _QWORD *v736;
  llvm::Loop **v737;
  llvm::Loop *v738;
  llvm::Loop *v739;
  llvm::Loop *v740;
  uint64_t *v741;
  uint64_t v742;
  llvm::ValueSymbolTable *v743;
  llvm::Loop *v744;
  llvm::ValueSymbolTable *v745;
  llvm::Loop *v746;
  _QWORD *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t *v751;
  uint64_t v752;
  _QWORD *v753;
  _QWORD *v754;
  _QWORD *v755;
  unint64_t v756;
  uint64_t v757;
  unint64_t *v758;
  uint64_t v759;
  unint64_t v760;
  uint64_t v761;
  llvm::ValueSymbolTable *v762;
  llvm::Value *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  llvm::Value **v768;
  llvm::Value *v769;
  int v770;
  int v771;
  uint64_t v772;
  size_t *v773;
  int v774;
  size_t v775;
  unsigned __int8 *v776;
  int v777;
  int v778;
  uint64_t v779;
  _QWORD *v780;
  unint64_t v781;
  llvm::OptimizationRemarkEmitter *v782;
  llvm::BasicBlock *v783;
  llvm::SmallPtrSetImplBase *v784;
  llvm::SmallPtrSetImplBase *v785;
  llvm::BasicBlock *v786;
  int v787;
  llvm::Value *__s1;
  unsigned __int8 *__s1a;
  unint64_t v790;
  llvm::Loop *v791;
  llvm::BasicBlock *inserted;
  llvm::BasicBlock *v793;
  llvm::Value *v794;
  llvm::Value *v795;
  llvm::BasicBlock *v796;
  unsigned int v797;
  llvm::Loop *v798;
  uint64_t v799;
  _BYTE *v800;
  llvm::OptimizationRemarkEmitter *__n;
  size_t __na;
  unint64_t *v803;
  int v804;
  int v805;
  void *__p;
  uint64_t v807;
  uint64_t v808;
  llvm::Loop *v809;
  llvm::Loop *v810;
  llvm::ScalarEvolution *v811;
  llvm::OptimizationRemarkEmitter *v812;
  char *v813;
  char *v814;
  uint64_t v815;
  int v816;
  _BYTE v817[32];
  void *v818;
  uint64_t v819;
  _BYTE v820[64];
  __int128 v821;
  __int128 v822;
  llvm::Loop *v823;
  llvm::Loop **v824;
  __int128 v825;
  __int128 *v826;
  unint64_t *v827;
  uint64_t v828;
  __int128 **v829;
  __int128 v830;
  _QWORD v831[3];
  _QWORD *v832;
  __int128 v833;
  _BYTE v834[8];
  void *v835;
  __int16 v836;
  _BYTE *v837;
  unint64_t v838;
  int64x2_t v839;
  int64x2_t v840;
  char *v841;
  const char *v842;
  uint64_t v843;
  uint64_t v844;
  void **v845;
  void **v846;
  uint64_t v847;
  int v848;
  __int16 v849;
  char v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  void *v854;
  uint64_t v855;
  char v856;
  int v857;
  uint64_t v858;
  uint64_t *v859;
  uint64_t v860;
  char *v861;
  uint64_t v862;
  _BYTE v863[64];
  char *v864;
  unsigned int v865;
  _QWORD v866[37];

  v8 = (unint64_t)this;
  v9 = (unint64_t)&v838;
  v10 = &v809;
  v866[34] = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v12 = a1[4];
  v809 = a3;
  v810 = this;
  v811 = v11;
  v812 = v12;
  v813 = v817;
  v814 = v817;
  v815 = 4;
  v816 = 0;
  v13 = (uint64_t)v820;
  v818 = v820;
  v819 = 0x800000000;
  v14 = -1431655765 * ((*((_QWORD *)a6 + 1) - *(_QWORD *)a6) >> 3);
  if ((_DWORD)v14)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(unsigned __int8 **)(*(_QWORD *)a6 + 24 * v15);
      v17 = v16[a4];
      if (v17 == 42)
        break;
      v18 = v16[a5];
      if (v18 == 42)
        break;
      v19 = 0;
      do
      {
        v20 = v16[v19];
        if (v20 == 60)
          break;
        if (v20 == 62)
          goto LABEL_22;
        ++v19;
      }
      while (v19 <= a5);
      if (v17 != v18)
      {
        v21 = v17 - 60;
        if (v21 > 0x17)
          break;
        if (((1 << v21) & 0x802003) == 0)
        {
          if (v21 != 2 || !a5)
            break;
          v22 = a5;
          while (1)
          {
            v23 = *v16++;
            v24 = (1 << (v23 - 61)) & 0x401001;
            if ((v23 - 61) > 0x16 || v24 == 0)
              break;
            if (!--v22)
              goto LABEL_22;
          }
        }
      }
      if (++v15 == v14)
        goto LABEL_30;
    }
LABEL_22:
    v26 = ****(_QWORD ****)v12;
    if (!*(_QWORD *)(v26 + 128))
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v26 + 72) + 48))(*(_QWORD *)(v26 + 72)))
        goto LABEL_24;
      v8 = (unint64_t)v810;
    }
    llvm::Loop::getStartLoc((llvm::Loop *)v8, &v825);
    v97 = v825;
    if ((_QWORD)v825)
    {
      v98 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
      if (*(_BYTE *)v98 != 15)
        v98 = *(_QWORD *)(v98 - 8 * *(unsigned int *)(v98 + 8));
      v99 = *(_DWORD *)(v825 + 4);
      v97 = *(unsigned __int16 *)(v825 + 2);
    }
    else
    {
      v98 = 0;
      v99 = 0;
    }
    v105 = **((_QWORD **)v810 + 4);
    v106 = *(_QWORD *)(v105 + 56);
    v839.i32[0] = 10;
    v839.i8[4] = 2;
    v839.i64[1] = v106;
    v840.i64[0] = v98;
    v840.i64[1] = __PAIR64__(v97, v99);
    v841 = "loop-interchange";
    v842 = "Dependence";
    v843 = 10;
    LOBYTE(v844) = 0;
    LOBYTE(v845) = 0;
    v846 = (void **)&v848;
    v847 = 0x400000000;
    v856 = 0;
    v857 = -1;
    v858 = v105;
    v838 = (unint64_t)&off_1E814E538;
    v861 = "Cannot interchange loops due to dependences.";
    v862 = 44;
    sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
    sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
    v861 = (char *)&off_1E814E538;
    v838 = (unint64_t)&off_1E814E790;
    v107 = v846;
    if ((_DWORD)v847)
    {
      v108 = (unint64_t)v847 << 6;
      do
      {
        v109 = (void **)((char *)v107 + v108);
        if (*((char *)v107 + v108 - 17) < 0)
          operator delete(*(v109 - 5));
        if (*((char *)v109 - 41) < 0)
          operator delete(*(v109 - 8));
        v108 -= 64;
      }
      while (v108);
      v107 = v846;
    }
    if (v107 != (void **)&v848)
      free(v107);
    if ((_QWORD)v825)
      llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
    llvm::OptimizationRemarkEmitter::emit(v12, (llvm::DiagnosticInfoOptimizationBase *)&v861);
    v861 = (char *)&off_1E814E790;
    v110 = v864;
    if (!v865)
      goto LABEL_223;
    v111 = (unint64_t)v865 << 6;
    do
    {
      v112 = (void **)&v110[v111];
      if (v110[v111 - 17] < 0)
        operator delete(*(v112 - 5));
      if (*((char *)v112 - 41) < 0)
        operator delete(*(v112 - 8));
      v111 -= 64;
    }
    while (v111);
LABEL_222:
    v110 = v864;
    goto LABEL_223;
  }
LABEL_30:
  v794 = a6;
  v796 = (llvm::BasicBlock *)a1;
  LODWORD(v790) = a4;
  LODWORD(inserted) = a5;
  v29 = (unint64_t *)*((_QWORD *)a3 + 4);
  v798 = a3;
  v30 = (llvm::Loop *)v8;
  v803 = (unint64_t *)*((_QWORD *)a3 + 5);
  if (v803 != v29)
  {
    v800 = v820;
    v6 = (uint64_t)v834;
    j = (uint64_t)&v826;
    v13 = (uint64_t)&v822;
    v31 = (unsigned __int8 *)v831;
    v784 = (llvm::SmallPtrSetImplBase *)&v846;
    v786 = (llvm::BasicBlock *)&v848;
    v783 = (llvm::BasicBlock *)v866;
    v782 = (llvm::OptimizationRemarkEmitter *)&off_1E814E538;
    while (1)
    {
      llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)*v29, 1, (uint64_t)&v825);
      v833 = v825;
      if (v829)
      {
        if (v829 == &v826)
        {
          v837 = v834;
          (*((void (**)(__int128 **, _BYTE *))v826 + 3))(&v826, v834);
        }
        else
        {
          v837 = (_BYTE *)(*((uint64_t (**)(void))*v829 + 2))();
        }
      }
      else
      {
        v837 = 0;
      }
      v821 = v830;
      if (v832)
      {
        if (v832 == v831)
        {
          v824 = (llvm::Loop **)&v822;
          (*(void (**)(_QWORD *, __int128 *))(v831[0] + 24))(v831, &v822);
        }
        else
        {
          v824 = (llvm::Loop **)(*(uint64_t (**)(void))(*v832 + 16))();
        }
      }
      else
      {
        v824 = 0;
      }
LABEL_42:
      v32 = v833;
      while (1)
      {
        if (v32 == (_QWORD)v821)
        {
          v38 = 1;
          goto LABEL_71;
        }
        v33 = v32 - 24;
        if (!v32)
          v33 = 0;
        v34 = *(unsigned __int8 *)(v33 + 16);
        v35 = v34 == 84 ? (_QWORD *)v33 : 0;
        if (v32)
        {
          if (v34 == 84)
          {
            v36 = v35[8];
            if (!v36 || (*(_BYTE *)(v36 + 20) & 4) == 0 && (*(_BYTE *)(v36 + 17) & 0x10) == 0)
              break;
          }
        }
LABEL_57:
        while (1)
        {
          v32 = *(_QWORD *)(v833 + 8);
          *(_QWORD *)&v833 = v32;
          if (v32 == *((_QWORD *)&v833 + 1))
            break;
          if (!v837)
            goto LABEL_329;
          if ((*(unsigned int (**)(void))(*(_QWORD *)v837 + 48))())
            goto LABEL_42;
        }
      }
      LODWORD(v838) = 7;
      if (!sub_1C53E4BBC((uint64_t)v35, (__int32 *)&v838, 1uLL))
        break;
      v37 = *(v35 - 4);
      if (v37 && !*(_BYTE *)(v37 + 16) && *(_QWORD *)(v37 + 24) == v35[9])
      {
        v9 = (unint64_t)&v838;
        if (*(_DWORD *)(v37 + 36) == 7)
          break;
      }
      else
      {
        v9 = (unint64_t)&v838;
      }
LABEL_68:
      __n = v812;
      v39 = ****(_QWORD ****)v812;
      if (*(_QWORD *)(v39 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v39 + 72) + 48))(*(_QWORD *)(v39 + 72)))
      {
        v48 = v35[6];
        if (v48)
        {
          v49 = *(_QWORD *)(v48 - 8 * *(unsigned int *)(v48 + 8));
          if (*(_BYTE *)v49 != 15)
            v49 = *(_QWORD *)(v49 - 8 * *(unsigned int *)(v49 + 8));
          v50 = *(_DWORD *)(v48 + 4);
          LODWORD(v48) = *(unsigned __int16 *)(v48 + 2);
        }
        else
        {
          v49 = 0;
          v50 = 0;
        }
        v51 = v35[5];
        v52 = *(_QWORD *)(v51 + 56);
        v839.i32[0] = 10;
        v839.i8[4] = 2;
        v839.i64[1] = v52;
        v840.i64[0] = v49;
        v840.i64[1] = __PAIR64__(v48, v50);
        v841 = "loop-interchange";
        v842 = "CallInst";
        v843 = 8;
        LOBYTE(v844) = 0;
        LOBYTE(v845) = 0;
        v846 = (void **)&v848;
        v847 = 0x400000000;
        v856 = 0;
        v857 = -1;
        v858 = v51;
        v838 = (unint64_t)&off_1E814E538;
        __p = "Cannot interchange loops due to call instruction.";
        v807 = 49;
        sub_1C53B17B4((uint64_t)&v846, (const void **)&__p);
        sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
        v861 = (char *)&off_1E814E538;
        v838 = (unint64_t)&off_1E814E790;
        v53 = v846;
        __s1 = (llvm::Value *)v8;
        if ((_DWORD)v847)
        {
          v54 = (unint64_t)v847 << 6;
          do
          {
            v55 = (void **)((char *)v53 + v54);
            if (*((char *)v53 + v54 - 17) < 0)
              operator delete(*(v55 - 5));
            if (*((char *)v55 - 41) < 0)
              operator delete(*(v55 - 8));
            v54 -= 64;
          }
          while (v54);
          v53 = v846;
          v9 = (unint64_t)&v838;
          v8 = (unint64_t)__s1;
        }
        if (v53 != (void **)&v848)
          free(v53);
        llvm::OptimizationRemarkEmitter::emit(__n, (llvm::DiagnosticInfoOptimizationBase *)&v861);
        v861 = (char *)&off_1E814E790;
        v56 = v864;
        if (v865)
        {
          v57 = (unint64_t)v865 << 6;
          do
          {
            v58 = (void **)&v56[v57];
            if (v56[v57 - 17] < 0)
              operator delete(*(v58 - 5));
            if (*((char *)v58 - 41) < 0)
              operator delete(*(v58 - 8));
            v57 -= 64;
          }
          while (v57);
          v9 = (unint64_t)&v838;
          v56 = v864;
          v8 = (unint64_t)__s1;
        }
        if (v56 != (char *)v866)
          free(v56);
      }
      v38 = 0;
LABEL_71:
      v40 = v824;
      if (v824 == (llvm::Loop **)&v822)
      {
        v40 = (llvm::Loop **)&v822;
        v41 = 4;
      }
      else
      {
        if (!v824)
          goto LABEL_76;
        v41 = 5;
      }
      (*((void (**)(void))*v40 + v41))();
LABEL_76:
      v42 = v837;
      if (v837 == v834)
      {
        v42 = v834;
        v43 = 4;
      }
      else
      {
        if (!v837)
          goto LABEL_81;
        v43 = 5;
      }
      (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_81:
      v44 = v832;
      if (v832 == v831)
      {
        v44 = v831;
        v45 = 4;
LABEL_83:
        (*(void (**)(void))(*v44 + 8 * v45))();
        goto LABEL_84;
      }
      if (v832)
      {
        v45 = 5;
        goto LABEL_83;
      }
LABEL_84:
      v46 = v829;
      if (v829 == &v826)
      {
        v46 = &v826;
        v47 = 4;
      }
      else
      {
        if (!v829)
          goto LABEL_87;
        v47 = 5;
      }
      (*((void (**)(void))*v46 + v47))();
LABEL_87:
      if ((v38 & 1) == 0)
        goto LABEL_843;
      if (++v29 == v803)
      {
        v30 = v810;
        v13 = (uint64_t)v820;
        goto LABEL_119;
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v35, 66) & 1) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v35, 44) & 1) != 0)
    {
      goto LABEL_57;
    }
    goto LABEL_68;
  }
LABEL_119:
  __s1 = (llvm::Value *)v8;
  if (*(_QWORD *)(**((_QWORD **)v30 + 4) + 40) != **((_QWORD **)v30 + 4) + 40)
  {
    v59 = *(_QWORD *)(**((_QWORD **)v30 + 4) + 48);
    v60 = v59 - 24;
    v61 = v59 ? v59 - 24 : 0;
    if (v59 && *(_BYTE *)(v61 + 16) == 83)
    {
      v6 = (uint64_t)&v818;
      v29 = &v840.u64[1];
      v8 = 6;
      j = -8192;
      do
      {
        v838 = 6;
        v839 = 0uLL;
        v840.i32[0] = 0;
        v841 = 0;
        v842 = 0;
        v840.i64[1] = 0;
        v843 = (uint64_t)&v845;
        v844 = 0x200000000;
        if (llvm::InductionDescriptor::isInductionPHI(v60, v30, (uint64_t)v811, (uint64_t)&v838, 0, 0))
        {
          v62 = v819;
          if (v819 >= (unint64_t)HIDWORD(v819))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v818, (uint64_t)v820, v819 + 1, 8);
            v62 = v819;
          }
          *((_QWORD *)v818 + v62) = v60;
          LODWORD(v819) = v819 + 1;
        }
        if ((void ***)v843 != &v845)
          free((void *)v843);
        if (v839.i64[1] && v839.i64[1] != -8192 && v839.i64[1] != -4096)
        {
          v63 = v838 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v838 & 0xFFFFFFFFFFFFFFF8) = v839.i64[0];
          if (v839.i64[0])
          {
            *(_QWORD *)v839.i64[0] = *(_QWORD *)v839.i64[0] & 7 | v63;
          }
          else
          {
            v64 = v839.i64[1];
            v65 = ***(int32x2_t ****)v839.i64[1];
            v66 = (unint64_t)v65[303];
            if (v66 <= v63)
            {
              v67 = v65[305].u32[0];
              if (v66 + 16 * v67 > v63)
              {
                v68 = v67 - 1;
                LODWORD(v69) = v68 & (((unsigned __int32)v839.i32[2] >> 4) ^ ((unsigned __int32)v839.i32[2] >> 9));
                v70 = (uint64_t *)(v66 + 16 * v69);
                v71 = *v70;
                if (v839.i64[1] == *v70)
                {
LABEL_143:
                  *v70 = -8192;
                  v65[304] = vadd_s32(v65[304], (int32x2_t)0x1FFFFFFFFLL);
                  v64 = v839.i64[1];
                }
                else
                {
                  v72 = 1;
                  while (v71 != -4096)
                  {
                    v73 = v69 + v72++;
                    v69 = v73 & v68;
                    v71 = *(_QWORD *)(v66 + 16 * v69);
                    if (v839.i64[1] == v71)
                    {
                      v70 = (uint64_t *)(v66 + 16 * v69);
                      goto LABEL_143;
                    }
                  }
                }
                *(_BYTE *)(v64 + 17) &= ~1u;
              }
            }
          }
        }
        v74 = *(_QWORD *)(v60 + 32);
        v60 = v74 - 24;
        if (v74)
          v75 = v74 - 24;
        else
          v75 = 0;
      }
      while (v74 && *(_BYTE *)(v75 + 16) == 83);
    }
  }
  if (!(_DWORD)v819)
    goto LABEL_24;
  v76 = v810;
  if (*((_QWORD *)v810 + 1) != *((_QWORD *)v810 + 2))
  {
    LoopLatch = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v809);
    if (!llvm::BasicBlock::getUniquePredecessor(LoopLatch))
    {
      v93 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v76);
      if (*(_QWORD *)(v93 + 40) != v93 + 40)
      {
        for (i = *(_QWORD *)(v93 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v95 = i - 24;
          else
            v95 = 0;
          if (!i || *(_BYTE *)(v95 + 16) != 83)
            goto LABEL_154;
          v96 = *(_QWORD *)(i - 16);
          if (v96)
            break;
LABEL_192:
          ;
        }
        while (v93 != *(_QWORD *)(*(_QWORD *)(v96 + 24) + 40))
        {
          v96 = *(_QWORD *)(v96 + 8);
          if (!v96)
            goto LABEL_192;
        }
        v100 = v812;
        v101 = ****(_QWORD ****)v812;
        if (!*(_QWORD *)(v101 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v101 + 72) + 48))(*(_QWORD *)(v101 + 72)))
        {
          goto LABEL_24;
        }
        llvm::Loop::getStartLoc(v810, &v825);
        v102 = v825;
        if ((_QWORD)v825)
        {
          v103 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
          if (*(_BYTE *)v103 != 15)
            v103 = *(_QWORD *)(v103 - 8 * *(unsigned int *)(v103 + 8));
          v104 = *(_DWORD *)(v825 + 4);
          v102 = *(unsigned __int16 *)(v825 + 2);
        }
        else
        {
          v103 = 0;
          v104 = 0;
        }
        v129 = **((_QWORD **)v810 + 4);
        v130 = *(_QWORD *)(v129 + 56);
        v839.i32[0] = 10;
        v839.i8[4] = 2;
        v839.i64[1] = v130;
        v840.i64[0] = v103;
        v840.i64[1] = __PAIR64__(v102, v104);
        v841 = "loop-interchange";
        v842 = "UnsupportedInnerLatchPHI";
        v843 = 24;
        LOBYTE(v844) = 0;
        LOBYTE(v845) = 0;
        v846 = (void **)&v848;
        v847 = 0x400000000;
        v856 = 0;
        v857 = -1;
        v858 = v129;
        v838 = (unint64_t)&off_1E814E538;
        v861 = "Cannot interchange loops because unsupported PHI nodes found in inner loop latch.";
        v862 = 81;
        sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
        sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
        v861 = (char *)&off_1E814E538;
        v838 = (unint64_t)&off_1E814E790;
        v131 = v846;
        if ((_DWORD)v847)
        {
          v132 = (unint64_t)v847 << 6;
          do
          {
            v133 = (void **)((char *)v131 + v132);
            if (*((char *)v131 + v132 - 17) < 0)
              operator delete(*(v133 - 5));
            if (*((char *)v133 - 41) < 0)
              operator delete(*(v133 - 8));
            v132 -= 64;
          }
          while (v132);
          v131 = v846;
        }
        if (v131 != (void **)&v848)
          free(v131);
        if ((_QWORD)v825)
          llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
        llvm::OptimizationRemarkEmitter::emit(v100, (llvm::DiagnosticInfoOptimizationBase *)&v861);
        v861 = (char *)&off_1E814E790;
        v110 = v864;
        if (!v865)
          goto LABEL_223;
        v134 = (unint64_t)v865 << 6;
        do
        {
          v135 = (void **)&v110[v134];
          if (v110[v134 - 17] < 0)
            operator delete(*(v135 - 5));
          if (*((char *)v135 - 41) < 0)
            operator delete(*(v135 - 8));
          v134 -= 64;
        }
        while (v134);
        goto LABEL_222;
      }
    }
  }
LABEL_154:
  v78 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v810);
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v810) != v78)
    goto LABEL_178;
  ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v809);
  if (ExitingBlock != llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v809))
    goto LABEL_178;
  v80 = *(_QWORD *)(v78 + 40);
  if (v80)
    v81 = v80 - 24;
  else
    v81 = 0;
  if (*(unsigned __int8 *)(v81 + 16) - 29 >= 0xB)
    v81 = 0;
  if (*(_BYTE *)(v81 + 16) != 30)
    goto LABEL_178;
  v82 = *(_QWORD *)(llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v809) + 40);
  if (v82)
    v83 = v82 - 24;
  else
    v83 = 0;
  if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB)
    v83 = 0;
  if (*(_BYTE *)(v83 + 16) != 30)
  {
LABEL_178:
    v88 = v812;
    v89 = ****(_QWORD ****)v812;
    if (!*(_QWORD *)(v89 + 128)
      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v89 + 72) + 48))(*(_QWORD *)(v89 + 72)))
    {
      goto LABEL_24;
    }
    llvm::Loop::getStartLoc(v809, &v825);
    v90 = v825;
    if ((_QWORD)v825)
    {
      v91 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
      if (*(_BYTE *)v91 != 15)
        v91 = *(_QWORD *)(v91 - 8 * *(unsigned int *)(v91 + 8));
      v92 = *(_DWORD *)(v825 + 4);
      v90 = *(unsigned __int16 *)(v825 + 2);
    }
    else
    {
      v91 = 0;
      v92 = 0;
    }
    v113 = **((_QWORD **)v809 + 4);
    v114 = *(_QWORD *)(v113 + 56);
    v839.i32[0] = 10;
    v839.i8[4] = 2;
    v839.i64[1] = v114;
    v840.i64[0] = v91;
    v840.i64[1] = __PAIR64__(v90, v92);
    v841 = "loop-interchange";
    v842 = "ExitingNotLatch";
    v843 = 15;
    LOBYTE(v844) = 0;
    LOBYTE(v845) = 0;
    v846 = (void **)&v848;
    v847 = 0x400000000;
    v856 = 0;
    v857 = -1;
    v858 = v113;
    v838 = (unint64_t)&off_1E814E538;
    v861 = "Loops where the latch is not the exiting block cannot be interchange currently.";
    v862 = 79;
    sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
    sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
    v861 = (char *)&off_1E814E538;
    v838 = (unint64_t)&off_1E814E790;
    v115 = v846;
    if ((_DWORD)v847)
    {
      v116 = (unint64_t)v847 << 6;
      do
      {
        v117 = (void **)((char *)v115 + v116);
        if (*((char *)v115 + v116 - 17) < 0)
          operator delete(*(v117 - 5));
        if (*((char *)v117 - 41) < 0)
          operator delete(*(v117 - 8));
        v116 -= 64;
      }
      while (v116);
      v115 = v846;
    }
    if (v115 != (void **)&v848)
      free(v115);
    if ((_QWORD)v825)
      llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
    llvm::OptimizationRemarkEmitter::emit(v88, (llvm::DiagnosticInfoOptimizationBase *)&v861);
    v861 = (char *)&off_1E814E790;
    v110 = v864;
    if (!v865)
      goto LABEL_223;
    v118 = (unint64_t)v865 << 6;
    do
    {
      v119 = (void **)&v110[v118];
      if (v110[v118 - 17] < 0)
        operator delete(*(v119 - 5));
      if (*((char *)v119 - 41) < 0)
        operator delete(*(v119 - 8));
      v118 -= 64;
    }
    while (v118);
    goto LABEL_222;
  }
  v9 = (unint64_t)&v826;
  *(_QWORD *)&v825 = &v826;
  *((_QWORD *)&v825 + 1) = 0x800000000;
  if ((sub_1C5B758C4((uint64_t *)&v809, v809, (uint64_t)&v825, (uint64_t)v810) & 1) == 0)
  {
    v31 = (unsigned __int8 *)v812;
    v120 = ****(_QWORD ****)v812;
    if (!*(_QWORD *)(v120 + 128)
      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v120 + 72) + 48))(*(_QWORD *)(v120 + 72)))
    {
      goto LABEL_400;
    }
    llvm::Loop::getStartLoc(v809, &v833);
    v121 = v833;
    if (!(_QWORD)v833)
    {
      v122 = 0;
      v123 = 0;
LABEL_333:
      v157 = **((_QWORD **)v809 + 4);
      v158 = *(_QWORD *)(v157 + 56);
      v839.i32[0] = 10;
      v839.i8[4] = 2;
      v839.i64[1] = v158;
      v840.i64[0] = v122;
      v840.i64[1] = __PAIR64__(v121, v123);
      v841 = "loop-interchange";
      v842 = "UnsupportedPHIOuter";
      v843 = 19;
      LOBYTE(v844) = 0;
      LOBYTE(v845) = 0;
      v846 = (void **)&v848;
      v847 = 0x400000000;
      v856 = 0;
      v857 = -1;
      v858 = v157;
      v838 = (unint64_t)&off_1E814E538;
      v861 = "Only outer loops with induction or reduction PHI nodes can be interchanged currently.";
      v862 = 85;
      sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
      sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
      v861 = (char *)&off_1E814E538;
      v838 = (unint64_t)&off_1E814E790;
      v159 = v846;
      if ((_DWORD)v847)
      {
        v8 = (unint64_t)v847 << 6;
        do
        {
          v6 = (uint64_t)v159 + v8;
          if (*((char *)v159 + v8 - 17) < 0)
            operator delete(*(void **)(v6 - 40));
          if (*(char *)(v6 - 41) < 0)
            operator delete(*(void **)(v6 - 64));
          v8 -= 64;
        }
        while (v8);
        v159 = v846;
      }
      if (v159 != (void **)&v848)
        free(v159);
      if ((_QWORD)v833)
        llvm::MetadataTracking::untrack((uint64_t)&v833, (unsigned __int8 *)v833);
      llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v31, (llvm::DiagnosticInfoOptimizationBase *)&v861);
      v861 = (char *)&off_1E814E790;
      v160 = v864;
      if (!v865)
        goto LABEL_629;
      v161 = (unint64_t)v865 << 6;
      do
      {
        v162 = (void **)&v160[v161];
        if (v160[v161 - 17] < 0)
          operator delete(*(v162 - 5));
        if (*((char *)v162 - 41) < 0)
          operator delete(*(v162 - 8));
        v161 -= 64;
      }
      while (v161);
      goto LABEL_628;
    }
LABEL_330:
    v122 = *(_QWORD *)(v121 - 8 * *(unsigned int *)(v121 + 8));
    if (*(_BYTE *)v122 != 15)
      v122 = *(_QWORD *)(v122 - 8 * *(unsigned int *)(v122 + 8));
    v123 = *(_DWORD *)(v121 + 4);
    LODWORD(v121) = *(unsigned __int16 *)(v121 + 2);
    goto LABEL_333;
  }
  DWORD2(v825) = 0;
  if ((sub_1C5B758C4((uint64_t *)&v809, v810, (uint64_t)&v825, 0) & 1) == 0)
  {
    v124 = v812;
    v125 = ****(_QWORD ****)v812;
    if (!*(_QWORD *)(v125 + 128)
      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v125 + 72) + 48))(*(_QWORD *)(v125 + 72)))
    {
      goto LABEL_400;
    }
    llvm::Loop::getStartLoc(v810, &v833);
    v126 = v833;
    if ((_QWORD)v833)
    {
      v127 = *(_QWORD *)(v833 - 8 * *(unsigned int *)(v833 + 8));
      if (*(_BYTE *)v127 != 15)
        v127 = *(_QWORD *)(v127 - 8 * *(unsigned int *)(v127 + 8));
      v128 = *(_DWORD *)(v833 + 4);
      v126 = *(unsigned __int16 *)(v833 + 2);
    }
    else
    {
      v127 = 0;
      v128 = 0;
    }
    v163 = **((_QWORD **)v810 + 4);
    v164 = *(_QWORD *)(v163 + 56);
    v839.i32[0] = 10;
    v839.i8[4] = 2;
    v839.i64[1] = v164;
    v840.i64[0] = v127;
    v840.i64[1] = __PAIR64__(v126, v128);
    v841 = "loop-interchange";
    v842 = "UnsupportedPHIInner";
    v843 = 19;
    LOBYTE(v844) = 0;
    LOBYTE(v845) = 0;
    v846 = (void **)&v848;
    v847 = 0x400000000;
    v856 = 0;
    v857 = -1;
    v858 = v163;
    v838 = (unint64_t)&off_1E814E538;
    v861 = "Only inner loops with induction or reduction PHI nodes can be interchange currently.";
    v862 = 84;
    sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
    sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
    v861 = (char *)&off_1E814E538;
    v838 = (unint64_t)&off_1E814E790;
    v165 = v846;
    if ((_DWORD)v847)
    {
      v8 = (unint64_t)v847 << 6;
      do
      {
        v6 = (uint64_t)v165 + v8;
        if (*((char *)v165 + v8 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        if (*(char *)(v6 - 41) < 0)
          operator delete(*(void **)(v6 - 64));
        v8 -= 64;
      }
      while (v8);
      v165 = v846;
    }
    if (v165 != (void **)&v848)
      free(v165);
    if ((_QWORD)v833)
      llvm::MetadataTracking::untrack((uint64_t)&v833, (unsigned __int8 *)v833);
    llvm::OptimizationRemarkEmitter::emit(v124, (llvm::DiagnosticInfoOptimizationBase *)&v861);
    v861 = (char *)&off_1E814E790;
    v160 = v864;
    if (!v865)
    {
LABEL_629:
      if (v160 != (char *)v866)
        free(v160);
      goto LABEL_400;
    }
    v166 = (unint64_t)v865 << 6;
    do
    {
      v167 = (void **)&v160[v166];
      if (v160[v166 - 17] < 0)
        operator delete(*(v167 - 5));
      if (*((char *)v167 - 41) < 0)
        operator delete(*(v167 - 8));
      v166 -= 64;
    }
    while (v166);
LABEL_628:
    v160 = v864;
    goto LABEL_629;
  }
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v810);
  if (!LoopPredecessor)
    goto LABEL_177;
  v85 = *(_QWORD *)(LoopPredecessor + 40);
  if (v85 == LoopPredecessor + 40)
    goto LABEL_177;
  if (v85)
    v86 = v85 - 24;
  else
    v86 = 0;
  if (*(_BYTE *)(v86 + 16) != 30)
  {
    v87 = 0;
    switch(*(_BYTE *)(v86 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_283;
      case 0x1E:
LABEL_1642:
        __break(1u);
        goto LABEL_1643;
      case 0x1F:
        v136 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_281;
      case 0x20:
        v136 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_281;
      case 0x27:
        v136 = *(_DWORD *)(v86 + 80) + 1;
LABEL_281:
        if (v136 == 1)
          goto LABEL_282;
        goto LABEL_177;
      default:
        goto LABEL_177;
    }
  }
  if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_177:
    v87 = 0;
  else
LABEL_282:
    v87 = LoopPredecessor;
LABEL_283:
  if (!(_DWORD)v819)
  {
LABEL_299:
    v147 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v810);
    v148 = *(_QWORD *)(v147 + 40);
    if (v148 == v147 + 40)
    {
      v149 = 0;
    }
    else
    {
      if (v148)
        v149 = v148 - 24;
      else
        v149 = 0;
      if (*(unsigned __int8 *)(v149 + 16) - 29 >= 0xB)
        v149 = 0;
    }
    if (*(_BYTE *)(v149 + 16) != 30)
      v149 = 0;
    if ((*(_DWORD *)(v149 + 20) & 0x7FFFFFF) != 3)
      goto LABEL_398;
    v150 = *(_QWORD *)(v149 - 96);
    v151 = *(unsigned __int8 *)(v150 + 16);
    if (v150)
      v152 = v151 >= 0x1C;
    else
      v152 = 0;
    if (!v152 || v151 - 83 < 0xFFFFFFFE)
    {
LABEL_397:
      v180 = 0;
      goto LABEL_401;
    }
    v31 = *(unsigned __int8 **)(v150 - 64);
    v154 = *(unsigned __int8 **)(v150 - 32);
    v838 = (unint64_t)&off_1E8195958;
    v839.i64[0] = (uint64_t)&v809;
    v839.i64[1] = (uint64_t)&v838;
    v840.i64[0] = (uint64_t)&v838;
    v861 = (char *)v31;
    if (sub_1C5B75F48((uint64_t)&v838, (uint64_t *)&v861))
    {
      v861 = (char *)v154;
      if (!v840.i64[0])
      {
LABEL_329:
        sub_1C485C2F0();
        goto LABEL_330;
      }
      if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v840.i64[0] + 48))(v840.i64[0], &v861) & 1) != 0)
      {
        v155 = 1;
        v156 = 1;
        goto LABEL_388;
      }
    }
    v861 = (char *)v31;
    if (v840.i64[0])
    {
      if ((*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v840.i64[0] + 48))(v840.i64[0], &v861)
        && v31[16] > 0x14u)
      {
        v31 = v154;
        goto LABEL_377;
      }
      v861 = (char *)v154;
      if (v840.i64[0])
      {
        if (!(*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v840.i64[0] + 48))(v840.i64[0], &v861)
          || v154[16] < 0x15u)
        {
          v156 = 0;
          v155 = 1;
          goto LABEL_388;
        }
LABEL_377:
        v168 = v811;
        v169 = *((_QWORD *)v811 + 13);
        v170 = *((_DWORD *)v811 + 30);
        if (v170)
        {
          v171 = v170 - 1;
          v172 = (v170 - 1) & ((v31 >> 4) ^ (v31 >> 9));
          v173 = v169 + 48 * v172;
          v174 = *(unsigned __int8 **)(v173 + 24);
          if (v174 == v31)
            goto LABEL_384;
          v175 = 1;
          while (v174 != (unsigned __int8 *)-4096)
          {
            v176 = v172 + v175++;
            v172 = v176 & v171;
            v173 = v169 + 48 * (v176 & v171);
            v174 = *(unsigned __int8 **)(v173 + 24);
            if (v174 == v31)
              goto LABEL_384;
          }
        }
        v173 = v169 + 48 * v170;
LABEL_384:
        if (v173 == v169 + 48 * v170 || (SCEVIter = *(const llvm::SCEV **)(v173 + 40)) == 0)
        {
          SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v811, (unint64_t)v31);
          v168 = v811;
        }
        v156 = 0;
        v155 = llvm::ScalarEvolution::getLoopDisposition(v168, SCEVIter, v809) != 1;
LABEL_388:
        if ((unint64_t *)v840.i64[0] == &v838)
        {
          v178 = (void (**)(void))(v838 + 32);
        }
        else
        {
          if (!v840.i64[0])
            goto LABEL_393;
          v178 = (void (**)(void))(*(_QWORD *)v840.i64[0] + 40);
        }
        (*v178)();
LABEL_393:
        if (v155)
          v179 = v156;
        else
          v179 = 1;
        if ((v179 & 1) == 0)
          goto LABEL_398;
        goto LABEL_397;
      }
    }
    goto LABEL_329;
  }
  v137 = (char *)v818;
  v138 = (char *)v818 + 8 * v819;
  while (1)
  {
    v139 = *(_QWORD *)v137;
    v140 = *(_DWORD *)(*(_QWORD *)v137 + 20) & 0x7FFFFFF;
    if ((_DWORD)v140)
      break;
LABEL_298:
    v137 += 8;
    if (v137 == v138)
      goto LABEL_299;
  }
  v8 = 0;
  v6 = 0;
  v141 = 32 * v140;
  while (1)
  {
    v142 = *(_DWORD *)(v139 + 20);
    v143 = (v142 & 0x40000000) != 0 ? *(_QWORD *)(v139 - 8) : v139 - 32 * (v142 & 0x7FFFFFF);
    v144 = *(_QWORD *)(v143 + v6);
    v145 = *(unsigned __int8 *)(v144 + 16);
    if (v145 >= 0x15)
    {
      if (v145 < 0x1C)
        break;
      v146 = (v142 & 0x40000000) != 0 ? *(_QWORD *)(v139 - 8) : v139 - 32 * (v142 & 0x7FFFFFF);
      if (*(_QWORD *)(v146 + 32 * *(unsigned int *)(v139 + 60) + v8) == v87
        && !llvm::Loop::isLoopInvariant((uint64_t)v809, v144))
      {
        break;
      }
    }
    v6 += 32;
    v8 += 8;
    if (v141 == v6)
      goto LABEL_298;
  }
LABEL_398:
  v181 = v812;
  v182 = ****(_QWORD ****)v812;
  if (*(_QWORD *)(v182 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v182 + 72) + 48))(*(_QWORD *)(v182 + 72)))
  {
    llvm::Loop::getStartLoc(v810, &v833);
    v260 = v833;
    if ((_QWORD)v833)
    {
      v261 = *(_QWORD *)(v833 - 8 * *(unsigned int *)(v833 + 8));
      if (*(_BYTE *)v261 != 15)
        v261 = *(_QWORD *)(v261 - 8 * *(unsigned int *)(v261 + 8));
      v262 = *(_DWORD *)(v833 + 4);
      v260 = *(unsigned __int16 *)(v833 + 2);
    }
    else
    {
      v261 = 0;
      v262 = 0;
    }
    v263 = **((_QWORD **)v810 + 4);
    v264 = *(_QWORD *)(v263 + 56);
    v839.i32[0] = 10;
    v839.i8[4] = 2;
    v839.i64[1] = v264;
    v840.i64[0] = v261;
    v840.i64[1] = __PAIR64__(v260, v262);
    v841 = "loop-interchange";
    v842 = "UnsupportedStructureInner";
    v843 = 25;
    LOBYTE(v844) = 0;
    LOBYTE(v845) = 0;
    v846 = (void **)&v848;
    v847 = 0x400000000;
    v856 = 0;
    v857 = -1;
    v858 = v263;
    v838 = (unint64_t)&off_1E814E538;
    v861 = "Inner loop structure not understood currently.";
    v862 = 46;
    sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
    sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
    v861 = (char *)&off_1E814E538;
    v838 = (unint64_t)&off_1E814E790;
    v265 = v846;
    if ((_DWORD)v847)
    {
      v8 = (unint64_t)v847 << 6;
      do
      {
        v6 = (uint64_t)v265 + v8;
        if (*((char *)v265 + v8 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        if (*(char *)(v6 - 41) < 0)
          operator delete(*(void **)(v6 - 64));
        v8 -= 64;
      }
      while (v8);
      v265 = v846;
    }
    if (v265 != (void **)&v848)
      free(v265);
    if ((_QWORD)v833)
      llvm::MetadataTracking::untrack((uint64_t)&v833, (unsigned __int8 *)v833);
    llvm::OptimizationRemarkEmitter::emit(v181, (llvm::DiagnosticInfoOptimizationBase *)&v861);
    v861 = (char *)&off_1E814E790;
    v160 = v864;
    if (!v865)
      goto LABEL_629;
    v266 = (unint64_t)v865 << 6;
    do
    {
      v267 = (void **)&v160[v266];
      if (v160[v266 - 17] < 0)
        operator delete(*(v267 - 5));
      if (*((char *)v267 - 41) < 0)
        operator delete(*(v267 - 8));
      v266 -= 64;
    }
    while (v266);
    goto LABEL_628;
  }
LABEL_400:
  v180 = 1;
LABEL_401:
  if ((_QWORD)v825 != v9)
    free((void *)v825);
  if ((v180 & 1) != 0)
    goto LABEL_24;
  v183 = v809;
  j = (uint64_t)v810;
  v184 = (unint64_t *)**((_QWORD **)v809 + 4);
  v185 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v810);
  v800 = (_BYTE *)v13;
  if (!v185)
    goto LABEL_411;
  v186 = *(_QWORD *)(v185 + 40);
  if (v186 == v185 + 40)
    goto LABEL_411;
  if (v186)
    v86 = v186 - 24;
  else
    v86 = 0;
  if (*(_BYTE *)(v86 + 16) != 30)
  {
    v29 = 0;
    switch(*(_BYTE *)(v86 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_416;
      case 0x1E:
        goto LABEL_1642;
      case 0x1F:
        v187 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_414;
      case 0x20:
        v187 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_414;
      case 0x27:
        v187 = *(_DWORD *)(v86 + 80) + 1;
LABEL_414:
        if (v187 == 1)
          goto LABEL_415;
        goto LABEL_411;
      default:
        goto LABEL_411;
    }
  }
  if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_411:
    v29 = 0;
  else
LABEL_415:
    v29 = (unint64_t *)v185;
LABEL_416:
  v188 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v183);
  v190 = v184 + 5;
  v189 = (unint64_t *)v184[5];
  if (v189 == v184 + 5)
    goto LABEL_577;
  v191 = v189 - 3;
  if (!v189)
    v191 = 0;
  v192 = *((unsigned __int8 *)v191 + 16) - 40;
  if (v192 < 0xFFFFFFF5)
    v191 = 0;
  if (!v189)
    goto LABEL_577;
  if (*((_BYTE *)v191 + 16) != 30 || v192 < 0xFFFFFFF5)
    goto LABEL_577;
  v13 = v188;
  v803 = (unint64_t *)&v813;
  v194 = 1;
  if ((*((_DWORD *)v191 + 5) & 0x7FFFFFF) == 3)
    v194 = 2;
  v195 = (unint64_t **)(v191 - 4);
  do
  {
    v196 = *v195;
    if (*v195 != v29 && v196 != **(unint64_t ***)(j + 32) && v196 != (unint64_t *)v188)
      goto LABEL_577;
    v195 -= 4;
    --v194;
  }
  while (v194);
  v198 = v184[6];
  if ((unint64_t *)v198 != v190)
  {
    v8 = 1;
    v6 = 0x8000000000041;
    do
    {
      if (v198)
        v199 = v198 - 24;
      else
        v199 = 0;
      v200 = *(unsigned __int8 *)(v199 + 16) - 33;
      if (v200 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v199 + 16) - 33)) & 0x808001D0000010) != 0)
          goto LABEL_577;
        if (((1 << (*(_BYTE *)(v199 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v203 = *(_QWORD *)(v199 + 64);
          if (!v203 || (*(_BYTE *)(v203 + 17) & 0x30) == 0)
          {
            v204 = *(_DWORD *)(v199 + 20);
            if (v204 < 0)
            {
              v206 = v199 - 32 * (v204 & 0x7FFFFFF);
              v209 = *(_QWORD *)(v206 - 8);
              v207 = v206 - 8;
              v208 = v209;
              if (v209)
              {
                v210 = -v208;
                do
                {
                  v211 = *(_DWORD *)(*(_QWORD *)(v207 + v210) + 8);
                  v212 = v211 > 7;
                  v213 = (1 << v211) & 0x83;
                  if (v212 || v213 == 0)
                    goto LABEL_577;
                  v210 += 16;
                }
                while (v210);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v199, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v199, 44))
            {
              goto LABEL_577;
            }
          }
        }
        else if (v200 == 27 && (*(_WORD *)(v199 + 18) & 0x301) != 0)
        {
          goto LABEL_577;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v199) & 1) != 0
        || !llvm::Instruction::willReturn((llvm::Instruction *)v199))
      {
        goto LABEL_577;
      }
      v201 = *(unsigned __int8 *)(v199 + 16) - 33;
      if (v201 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v199 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v202 = *(_QWORD *)(v199 + 64);
          if (!v202 || (*(_BYTE *)(v202 + 20) & 4) == 0 && (*(_BYTE *)(v202 + 17) & 0x10) == 0)
          {
            LODWORD(v838) = 7;
            if (sub_1C53E4BBC(v199, (__int32 *)&v838, 1uLL))
            {
              v205 = *(_QWORD *)(v199 - 32);
              if (!v205
                || *(_BYTE *)(v205 + 16)
                || *(_QWORD *)(v205 + 24) != *(_QWORD *)(v199 + 72)
                || *(_DWORD *)(v205 + 36) != 7)
              {
                goto LABEL_577;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v199, 66) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v199, 44) & 1) == 0)
            {
              goto LABEL_577;
            }
          }
        }
        else if (((1 << (*(_BYTE *)(v199 + 16) - 33)) & 0x808001C8000010) != 0
               || v201 == 28 && (*(_WORD *)(v199 + 18) & 0x301) != 0)
        {
          goto LABEL_577;
        }
      }
      v198 = *(_QWORD *)(v198 + 8);
    }
    while ((unint64_t *)v198 != v190);
  }
  v9 = *(_QWORD *)(v13 + 48);
  if (v9 != v13 + 40)
  {
    v8 = 1;
    v6 = 0x8000000000041;
    do
    {
      if (v9)
        v215 = v9 - 24;
      else
        v215 = 0;
      v216 = *(unsigned __int8 *)(v215 + 16) - 33;
      if (v216 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v215 + 16) - 33)) & 0x808001D0000010) != 0)
          goto LABEL_577;
        if (((1 << (*(_BYTE *)(v215 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v219 = *(_QWORD *)(v215 + 64);
          if (!v219 || (*(_BYTE *)(v219 + 17) & 0x30) == 0)
          {
            v220 = *(_DWORD *)(v215 + 20);
            if (v220 < 0)
            {
              v222 = v215 - 32 * (v220 & 0x7FFFFFF);
              v225 = *(_QWORD *)(v222 - 8);
              v223 = v222 - 8;
              v224 = v225;
              if (v225)
              {
                v226 = -v224;
                do
                {
                  v227 = *(_DWORD *)(*(_QWORD *)(v223 + v226) + 8);
                  v212 = v227 > 7;
                  v228 = (1 << v227) & 0x83;
                  if (v212 || v228 == 0)
                    goto LABEL_577;
                  v226 += 16;
                }
                while (v226);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v215, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v215, 44))
            {
              goto LABEL_577;
            }
          }
        }
        else if (v216 == 27 && (*(_WORD *)(v215 + 18) & 0x301) != 0)
        {
          goto LABEL_577;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v215) & 1) != 0
        || !llvm::Instruction::willReturn((llvm::Instruction *)v215))
      {
        goto LABEL_577;
      }
      v217 = *(unsigned __int8 *)(v215 + 16) - 33;
      if (v217 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v215 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v218 = *(_QWORD *)(v215 + 64);
          if (!v218 || (*(_BYTE *)(v218 + 20) & 4) == 0 && (*(_BYTE *)(v218 + 17) & 0x10) == 0)
          {
            LODWORD(v838) = 7;
            if (sub_1C53E4BBC(v215, (__int32 *)&v838, 1uLL))
            {
              v221 = *(_QWORD *)(v215 - 32);
              if (!v221
                || *(_BYTE *)(v221 + 16)
                || *(_QWORD *)(v221 + 24) != *(_QWORD *)(v215 + 72)
                || *(_DWORD *)(v221 + 36) != 7)
              {
                goto LABEL_577;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v215, 66) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v215, 44) & 1) == 0)
            {
              goto LABEL_577;
            }
          }
        }
        else if (((1 << (*(_BYTE *)(v215 + 16) - 33)) & 0x808001C8000010) != 0
               || v217 == 28 && (*(_WORD *)(v215 + 18) & 0x301) != 0)
        {
          goto LABEL_577;
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v13 + 40);
  }
  if (v29 != v184)
  {
    v230 = v29 + 5;
    v231 = v29[6];
    if ((unint64_t *)v231 != v230)
    {
      v9 = 0x8000000000041;
      v6 = 0x808001C8000010;
      v8 = 0x808001D0000010;
      do
      {
        if (v231)
          v232 = v231 - 24;
        else
          v232 = 0;
        v233 = *(unsigned __int8 *)(v232 + 16) - 33;
        if (v233 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v232 + 16) - 33)) & 0x808001D0000010) != 0)
            goto LABEL_577;
          if (((1 << (*(_BYTE *)(v232 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v236 = *(_QWORD *)(v232 + 64);
            if (!v236 || (*(_BYTE *)(v236 + 17) & 0x30) == 0)
            {
              v237 = *(_DWORD *)(v232 + 20);
              if (v237 < 0)
              {
                v239 = v232 - 32 * (v237 & 0x7FFFFFF);
                v242 = *(_QWORD *)(v239 - 8);
                v240 = v239 - 8;
                v241 = v242;
                if (v242)
                {
                  v243 = -v241;
                  do
                  {
                    v244 = *(_DWORD *)(*(_QWORD *)(v240 + v243) + 8);
                    v212 = v244 > 7;
                    v245 = (1 << v244) & 0x83;
                    if (v212 || v245 == 0)
                      goto LABEL_577;
                    v243 += 16;
                  }
                  while (v243);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v232, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v232, 44))
              {
                goto LABEL_577;
              }
            }
          }
          else if (v233 == 27 && (*(_WORD *)(v232 + 18) & 0x301) != 0)
          {
            goto LABEL_577;
          }
        }
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v232) & 1) != 0
          || !llvm::Instruction::willReturn((llvm::Instruction *)v232))
        {
          goto LABEL_577;
        }
        v234 = *(unsigned __int8 *)(v232 + 16) - 33;
        if (v234 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v232 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v235 = *(_QWORD *)(v232 + 64);
            if (!v235 || (*(_BYTE *)(v235 + 20) & 4) == 0 && (*(_BYTE *)(v235 + 17) & 0x10) == 0)
            {
              LODWORD(v838) = 7;
              if (sub_1C53E4BBC(v232, (__int32 *)&v838, 1uLL))
              {
                v238 = *(_QWORD *)(v232 - 32);
                if (!v238
                  || *(_BYTE *)(v238 + 16)
                  || *(_QWORD *)(v238 + 24) != *(_QWORD *)(v232 + 72)
                  || *(_DWORD *)(v238 + 36) != 7)
                {
                  goto LABEL_577;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v232, 66) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v232, 44) & 1) == 0)
              {
                goto LABEL_577;
              }
            }
          }
          else if (((1 << (*(_BYTE *)(v232 + 16) - 33)) & 0x808001C8000010) != 0
                 || v234 == 28 && (*(_WORD *)(v232 + 18) & 0x301) != 0)
          {
            goto LABEL_577;
          }
        }
        v231 = *(_QWORD *)(v231 + 8);
      }
      while ((unint64_t *)v231 != v230);
    }
  }
  ExitBlock = (llvm::LoopNest *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock((_QWORD *)j);
  if (llvm::LoopNest::skipEmptyBlockUntil(ExitBlock, (const llvm::BasicBlock *)v13, 0) != (llvm::BasicBlock *)v13)
    goto LABEL_577;
  v268 = (unint64_t *)((char *)ExitBlock + 40);
  v29 = (unint64_t *)*((_QWORD *)ExitBlock + 6);
  if (v29 == (unint64_t *)((char *)ExitBlock + 40))
  {
LABEL_677:
    v284 = v810;
    UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(v810);
    if (*(_QWORD *)(UniqueExitBlock + 40) != UniqueExitBlock + 40)
    {
      v286 = *(_QWORD *)(UniqueExitBlock + 48);
      v29 = (unint64_t *)(v286 - 24);
      v287 = v286 ? v286 - 24 : 0;
      if (v286 && *(_BYTE *)(v287 + 16) == 83)
      {
        v8 = 72;
        v6 = 76;
        v13 = (uint64_t)&v813;
        while ((*((_DWORD *)v29 + 5) & 0x7FFFFFE) == 0)
        {
          for (j = v29[1]; j; j = *(_QWORD *)(j + 8))
          {
            v9 = *(_QWORD *)(j + 24);
            if (!v9 || *(_BYTE *)(v9 + 16) != 83)
              goto LABEL_723;
            v288 = (char *)sub_1C477672C((uint64_t)&v813, *(_QWORD *)(j + 24));
            v289 = v814 == v813 ? (uint64_t *)((char *)&v815 + 4) : &v815;
            if (v288 == &v814[8 * *(unsigned int *)v289])
            {
              v290 = sub_1C477672C((uint64_t)v284 + 56, *(_QWORD *)(v9 + 40));
              v291 = *((_QWORD *)v284 + 8);
              v292 = v291 == *((_QWORD *)v284 + 7) ? 76 : 72;
              if (v290 != (_QWORD *)(v291 + 8 * *(unsigned int *)((char *)v284 + v292)))
                goto LABEL_723;
            }
          }
          v293 = v29[4];
          v29 = (unint64_t *)(v293 - 24);
          if (v293)
            v294 = v293 - 24;
          else
            v294 = 0;
          if (!v293 || *(_BYTE *)(v294 + 16) != 83)
            goto LABEL_702;
        }
LABEL_723:
        v307 = v812;
        v308 = ****(_QWORD ****)v812;
        if (!*(_QWORD *)(v308 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v308 + 72) + 48))(*(_QWORD *)(v308 + 72)))
        {
          goto LABEL_843;
        }
        llvm::Loop::getStartLoc(v810, &v825);
        v309 = v825;
        if ((_QWORD)v825)
        {
          v310 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
          if (*(_BYTE *)v310 != 15)
            v310 = *(_QWORD *)(v310 - 8 * *(unsigned int *)(v310 + 8));
          v311 = *(_DWORD *)(v825 + 4);
          v309 = *(unsigned __int16 *)(v825 + 2);
        }
        else
        {
          v310 = 0;
          v311 = 0;
        }
        v351 = **((_QWORD **)v810 + 4);
        v352 = *(_QWORD *)(v351 + 56);
        v839.i32[0] = 10;
        v839.i8[4] = 2;
        v839.i64[1] = v352;
        v840.i64[0] = v310;
        v840.i64[1] = __PAIR64__(v309, v311);
        v841 = "loop-interchange";
        v842 = "UnsupportedExitPHI";
        v843 = 18;
        LOBYTE(v844) = 0;
        LOBYTE(v845) = 0;
        v846 = (void **)&v848;
        v847 = 0x400000000;
        v856 = 0;
        v857 = -1;
        v858 = v351;
        v838 = (unint64_t)&off_1E814E538;
        v861 = "Found unsupported PHI node in loop exit.";
        v862 = 40;
        sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
        sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
        v861 = (char *)&off_1E814E538;
        v838 = (unint64_t)&off_1E814E790;
        v353 = v846;
        if ((_DWORD)v847)
        {
          v354 = (unint64_t)v847 << 6;
          do
          {
            v355 = (void **)((char *)v353 + v354);
            if (*((char *)v353 + v354 - 17) < 0)
              operator delete(*(v355 - 5));
            if (*((char *)v355 - 41) < 0)
              operator delete(*(v355 - 8));
            v354 -= 64;
          }
          while (v354);
          v353 = v846;
        }
        if (v353 != (void **)&v848)
          free(v353);
        if ((_QWORD)v825)
          llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
        llvm::OptimizationRemarkEmitter::emit(v307, (llvm::DiagnosticInfoOptimizationBase *)&v861);
        v861 = (char *)&off_1E814E790;
        v356 = v864;
        if (!v865)
          goto LABEL_841;
        v357 = (unint64_t)v865 << 6;
        do
        {
          v358 = (void **)&v356[v357];
          if (v356[v357 - 17] < 0)
            operator delete(*(v358 - 5));
          if (*((char *)v358 - 41) < 0)
            operator delete(*(v358 - 8));
          v357 -= 64;
        }
        while (v357);
        goto LABEL_840;
      }
    }
LABEL_702:
    v295 = v809;
    v296 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(v809);
    if (*(_QWORD *)(v296 + 40) != v296 + 40)
    {
      for (k = *(_QWORD *)(v296 + 48); ; k = *(_QWORD *)(v298 + 32))
      {
        v298 = k - 24;
        if (k)
          v299 = k - 24;
        else
          v299 = 0;
        if (!k || *(_BYTE *)(v299 + 16) != 83)
          goto LABEL_727;
        v300 = *(_DWORD *)(k - 4);
        v301 = v300 & 0x7FFFFFF;
        if ((v300 & 0x7FFFFFF) != 0)
          break;
LABEL_722:
        ;
      }
      v29 = 0;
      v302 = 0;
      while (1)
      {
        v303 = (v300 & 0x40000000) != 0 ? *(_QWORD *)(v298 - 8) : v298 - 32 * v301;
        v304 = *(unint64_t *)((char *)v29 + v303);
        if (v304 && *(unsigned __int8 *)(v304 + 16) >= 0x1Cu)
        {
          v9 = *(_QWORD *)(v304 + 40);
          if (v9 == llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v295))
          {
            v306 = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v295);
            if (!llvm::BasicBlock::getUniquePredecessor(v306))
              break;
          }
        }
        ++v302;
        v300 = *(_DWORD *)(v298 + 20);
        v301 = v300 & 0x7FFFFFF;
        v29 += 4;
        if (v302 >= v301)
          goto LABEL_722;
      }
      v333 = v812;
      v334 = ****(_QWORD ****)v812;
      if (!*(_QWORD *)(v334 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v334 + 72) + 48))(*(_QWORD *)(v334 + 72)))
      {
        goto LABEL_843;
      }
      llvm::Loop::getStartLoc(v809, &v825);
      v335 = v825;
      if ((_QWORD)v825)
      {
        v336 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
        if (*(_BYTE *)v336 != 15)
          v336 = *(_QWORD *)(v336 - 8 * *(unsigned int *)(v336 + 8));
        v337 = *(_DWORD *)(v825 + 4);
        v335 = *(unsigned __int16 *)(v825 + 2);
      }
      else
      {
        v336 = 0;
        v337 = 0;
      }
      v362 = **((_QWORD **)v809 + 4);
      v363 = *(_QWORD *)(v362 + 56);
      v839.i32[0] = 10;
      v839.i8[4] = 2;
      v839.i64[1] = v363;
      v840.i64[0] = v336;
      v840.i64[1] = __PAIR64__(v335, v337);
      v841 = "loop-interchange";
      v842 = "UnsupportedExitPHI";
      v843 = 18;
      LOBYTE(v844) = 0;
      LOBYTE(v845) = 0;
      v846 = (void **)&v848;
      v847 = 0x400000000;
      v856 = 0;
      v857 = -1;
      v858 = v362;
      v838 = (unint64_t)&off_1E814E538;
      v861 = "Found unsupported PHI node in loop exit.";
      v862 = 40;
      sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
      sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
      v861 = (char *)&off_1E814E538;
      v838 = (unint64_t)&off_1E814E790;
      v364 = v846;
      if ((_DWORD)v847)
      {
        v365 = (unint64_t)v847 << 6;
        do
        {
          v366 = (void **)((char *)v364 + v365);
          if (*((char *)v364 + v365 - 17) < 0)
            operator delete(*(v366 - 5));
          if (*((char *)v366 - 41) < 0)
            operator delete(*(v366 - 8));
          v365 -= 64;
        }
        while (v365);
        v364 = v846;
      }
      if (v364 != (void **)&v848)
        free(v364);
      if ((_QWORD)v825)
        llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
      llvm::OptimizationRemarkEmitter::emit(v333, (llvm::DiagnosticInfoOptimizationBase *)&v861);
      v861 = (char *)&off_1E814E790;
      v356 = v864;
      if (!v865)
        goto LABEL_841;
      v367 = (unint64_t)v865 << 6;
      do
      {
        v368 = (void **)&v356[v367];
        if (v356[v367 - 17] < 0)
          operator delete(*(v368 - 5));
        if (*((char *)v368 - 41) < 0)
          operator delete(*(v368 - 8));
        v367 -= 64;
      }
      while (v367);
LABEL_840:
      v356 = v864;
      goto LABEL_841;
    }
LABEL_727:
    v782 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v796 + 4);
    v783 = (llvm::BasicBlock *)*((_QWORD *)__s1 + 5);
    if (v783 != *((llvm::BasicBlock **)__s1 + 4))
    {
      v312 = (llvm::SmallPtrSetImplBase *)*((_QWORD *)__s1 + 4);
      LODWORD(__n) = 0;
      LODWORD(v786) = 0;
      v313 = v798;
      v314 = *(_QWORD *)v796;
      v8 = 253;
      j = 48;
      while (1)
      {
        v784 = v312;
        v315 = *(_QWORD *)v312 + 40;
        v6 = *(_QWORD *)(*(_QWORD *)v312 + 48);
        v803 = (unint64_t *)v315;
        if (v6 == v315)
          goto LABEL_764;
        do
        {
          v316 = v6 - 24;
          if (!v6)
            v316 = 0;
          v317 = *(unsigned __int8 *)(v316 + 16);
          if (v317 == 62)
            v29 = (unint64_t *)v316;
          else
            v29 = 0;
          if (!v6)
            goto LABEL_763;
          if (v317 != 62)
            goto LABEL_763;
          v318 = *((_DWORD *)v29 + 5);
          v9 = v318 & 0x7FFFFFF;
          if ((v318 & 0x7FFFFFF) == 0)
            goto LABEL_763;
          v319 = 0;
          v320 = 0;
          v13 = 0;
          while (1)
          {
            v321 = v29[4 * v319 + -4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)];
            if ((*(_DWORD *)(*(_QWORD *)v321 + 8) & 0xFD) != 0xD)
              goto LABEL_758;
            v322 = *(_QWORD *)(v314 + 104);
            v323 = *(_DWORD *)(v314 + 120);
            if (v323)
            {
              v324 = (v323 - 1) & ((v321 >> 4) ^ (v321 >> 9));
              v325 = v322 + 48 * v324;
              v326 = *(_QWORD *)(v325 + 24);
              if (v326 == v321)
                goto LABEL_747;
              v327 = 1;
              while (v326 != -4096)
              {
                v328 = v324 + v327++;
                v324 = v328 & (v323 - 1);
                v325 = v322 + 48 * v324;
                v326 = *(_QWORD *)(v325 + 24);
                if (v326 == v321)
                  goto LABEL_747;
              }
            }
            v325 = v322 + 48 * v323;
LABEL_747:
            if (v325 == v322 + 48 * v323 || (v329 = *(_QWORD *)(v325 + 40)) == 0)
            {
              v329 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v314, v321);
              v313 = v798;
            }
            if (v329 && *(_WORD *)(v329 + 24) == 7)
            {
              v331 = *(llvm::Value **)(v329 + 48);
              if (((v331 == __s1) & v320) == 1)
              {
                LODWORD(__n) = (_DWORD)__n + 1;
                goto LABEL_762;
              }
              v13 = (v331 == __s1) | v13;
              v320 |= v331 == v313;
              if (v331 == v313 && (v13 & 1) != 0)
                break;
            }
LABEL_758:
            if (++v319 == v9)
              goto LABEL_762;
          }
          LODWORD(v786) = (_DWORD)v786 + 1;
LABEL_762:
          v315 = (uint64_t)v803;
LABEL_763:
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 != v315);
LABEL_764:
        v312 = (llvm::SmallPtrSetImplBase *)((char *)v784 + 8);
        if ((llvm::SmallPtrSetImplBase *)((char *)v784 + 8) == v783)
        {
          v332 = (_DWORD)__n - (_DWORD)v786;
          goto LABEL_771;
        }
      }
    }
    v332 = 0;
LABEL_771:
    if (v332 >= -dword_1ED81F3F8)
    {
      v344 = *(uint64_t **)v794;
      v345 = (uint64_t *)*((_QWORD *)v794 + 1);
      if (*(uint64_t **)v794 != v345)
      {
        while (1)
        {
          v346 = *(unsigned __int8 *)(*v344 + v790);
          if (v346 != 83 && v346 != 73)
            break;
          if (*(_BYTE *)(*v344 + inserted) != 61)
            break;
          v344 += 3;
          if (v344 == v345)
            goto LABEL_772;
        }
      }
      v347 = ****(_QWORD ****)v782;
      if (!*(_QWORD *)(v347 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v347 + 72) + 48))(*(_QWORD *)(v347 + 72)))
      {
        goto LABEL_843;
      }
      llvm::Loop::getStartLoc(__s1, &v821);
      v348 = v821;
      if ((_QWORD)v821)
      {
        v349 = *(_QWORD *)(v821 - 8 * *(unsigned int *)(v821 + 8));
        if (*(_BYTE *)v349 != 15)
          v349 = *(_QWORD *)(v349 - 8 * *(unsigned int *)(v349 + 8));
        v350 = *(_DWORD *)(v821 + 4);
        v348 = *(unsigned __int16 *)(v821 + 2);
      }
      else
      {
        v349 = 0;
        v350 = 0;
      }
      v397 = **((_QWORD **)__s1 + 4);
      v398 = *(_QWORD *)(v397 + 56);
      v839.i32[0] = 10;
      v839.i8[4] = 2;
      v839.i64[1] = v398;
      v840.i64[0] = v349;
      v840.i64[1] = __PAIR64__(v348, v350);
      v841 = "loop-interchange";
      v842 = "InterchangeNotProfitable";
      v843 = 24;
      LOBYTE(v844) = 0;
      LOBYTE(v845) = 0;
      v846 = (void **)&v848;
      v847 = 0x400000000;
      v856 = 0;
      v857 = -1;
      v858 = v397;
      v838 = (unint64_t)&off_1E814E538;
      v861 = "Interchanging loops is too costly (cost=";
      v862 = 40;
      sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v825, "Cost", 4uLL, v332);
      v399 = sub_1C47E3888((uint64_t)&v838, (uint64_t)&v825);
      v861 = ", threshold=";
      v862 = 12;
      sub_1C53B17B4(v399 + 80, (const void **)&v861);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v833, "Threshold", 9uLL, dword_1ED81F3F8);
      v400 = sub_1C47E3888(v399, (uint64_t)&v833);
      v861 = ") and it does not improve parallelism.";
      v862 = 38;
      sub_1C53B17B4(v400 + 80, (const void **)&v861);
      sub_1C61998EC((uint64_t)&v861, v400);
      v861 = (char *)&off_1E814E538;
      if (SHIBYTE(v837) < 0)
        operator delete(v835);
      if ((v834[7] & 0x80000000) != 0)
        operator delete((void *)v833);
      if (SHIBYTE(v829) < 0)
        operator delete(v827);
      if (SHIBYTE(v826) < 0)
        operator delete((void *)v825);
      v838 = (unint64_t)&off_1E814E790;
      v401 = v846;
      if ((_DWORD)v847)
      {
        v402 = (unint64_t)v847 << 6;
        do
        {
          v403 = (void **)((char *)v401 + v402);
          if (*((char *)v401 + v402 - 17) < 0)
            operator delete(*(v403 - 5));
          if (*((char *)v403 - 41) < 0)
            operator delete(*(v403 - 8));
          v402 -= 64;
        }
        while (v402);
        v401 = v846;
      }
      if (v401 != (void **)&v848)
        free(v401);
      if ((_QWORD)v821)
        llvm::MetadataTracking::untrack((uint64_t)&v821, (unsigned __int8 *)v821);
      llvm::OptimizationRemarkEmitter::emit(v782, (llvm::DiagnosticInfoOptimizationBase *)&v861);
      v861 = (char *)&off_1E814E790;
      v356 = v864;
      if (v865)
      {
        v404 = (unint64_t)v865 << 6;
        do
        {
          v405 = (void **)&v356[v404];
          if (v356[v404 - 17] < 0)
            operator delete(*(v405 - 5));
          if (*((char *)v405 - 41) < 0)
            operator delete(*(v405 - 8));
          v404 -= 64;
        }
        while (v404);
        v356 = v864;
      }
LABEL_841:
      if (v356 != (char *)v866)
        free(v356);
LABEL_843:
      v27 = 0;
LABEL_844:
      v13 = (uint64_t)v800;
      goto LABEL_25;
    }
LABEL_772:
    v338 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v796 + 4);
    v339 = ****(_QWORD ****)v338;
    if (*(_QWORD *)(v339 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v339 + 72) + 48))(*(_QWORD *)(v339 + 72)))
    {
      llvm::Loop::getStartLoc(__s1, &v825);
      v359 = v825;
      if ((_QWORD)v825)
      {
        v360 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
        if (*(_BYTE *)v360 != 15)
          v360 = *(_QWORD *)(v360 - 8 * *(unsigned int *)(v360 + 8));
        v361 = *(_DWORD *)(v825 + 4);
        v359 = *(unsigned __int16 *)(v825 + 2);
      }
      else
      {
        v360 = 0;
        v361 = 0;
      }
      v369 = **((_QWORD **)__s1 + 4);
      v370 = *(_QWORD *)(v369 + 56);
      v839.i32[0] = 9;
      v839.i8[4] = 2;
      v839.i64[1] = v370;
      v840.i64[0] = v360;
      v840.i64[1] = __PAIR64__(v359, v361);
      v841 = "loop-interchange";
      v842 = "Interchanged";
      v843 = 12;
      LOBYTE(v844) = 0;
      LOBYTE(v845) = 0;
      v29 = (unint64_t *)&v848;
      v846 = (void **)&v848;
      v847 = 0x400000000;
      v856 = 0;
      v857 = -1;
      v858 = v369;
      v838 = (unint64_t)&off_1E814E500;
      v861 = "Loop interchanged with enclosing loop.";
      v862 = 38;
      sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
      sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
      v861 = (char *)&off_1E814E500;
      v838 = (unint64_t)&off_1E814E790;
      v371 = v846;
      if ((_DWORD)v847)
      {
        v9 = (unint64_t)v847 << 6;
        do
        {
          v8 = (unint64_t)v371 + v9;
          if (*((char *)v371 + v9 - 17) < 0)
            operator delete(*(void **)(v8 - 40));
          if (*(char *)(v8 - 41) < 0)
            operator delete(*(void **)(v8 - 64));
          v9 -= 64;
        }
        while (v9);
        v371 = v846;
      }
      if (v371 != (void **)&v848)
        free(v371);
      if ((_QWORD)v825)
        llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
      llvm::OptimizationRemarkEmitter::emit(v338, (llvm::DiagnosticInfoOptimizationBase *)&v861);
      v861 = (char *)&off_1E814E790;
      v372 = v864;
      if (v865)
      {
        v29 = (unint64_t *)((unint64_t)v865 << 6);
        do
        {
          v373 = (void **)((char *)v29 + (_QWORD)v372);
          if (*((char *)v29 + (_QWORD)v372 - 17) < 0)
            operator delete(*(v373 - 5));
          if (*((char *)v373 - 41) < 0)
            operator delete(*(v373 - 8));
          v29 -= 8;
        }
        while (v29);
        v372 = v864;
      }
      if (v372 != (char *)v866)
        free(v372);
    }
    v340 = (llvm::Loop *)*((_QWORD *)v796 + 3);
    *(_QWORD *)&v821 = v798;
    *((_QWORD *)&v821 + 1) = __s1;
    v822 = *(_OWORD *)v796;
    v823 = v340;
    v824 = &v809;
    if (*((_QWORD *)__s1 + 1) == *((_QWORD *)__s1 + 2))
    {
      v341 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)__s1);
      if (!v341)
        goto LABEL_782;
      v342 = *(_QWORD *)(v341 + 40);
      if (v342 == v341 + 40)
        goto LABEL_782;
      if (v342)
        v86 = v342 - 24;
      else
        v86 = 0;
      if (*(_BYTE *)(v86 + 16) != 30)
      {
        v343 = 0;
        switch(*(_BYTE *)(v86 + 16))
        {
          case 0x1D:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
            goto LABEL_874;
          case 0x1E:
            goto LABEL_1642;
          case 0x1F:
            v374 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_872;
          case 0x20:
            v374 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_872;
          case 0x27:
            v374 = *(_DWORD *)(v86 + 80) + 1;
LABEL_872:
            if (v374 == 1)
              goto LABEL_873;
            goto LABEL_782;
          default:
            goto LABEL_782;
        }
      }
      if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_782:
        v343 = 0;
      else
LABEL_873:
        v343 = v341;
LABEL_874:
      v375 = *((unsigned int *)v824 + 26);
      if (!(_DWORD)v375)
        goto LABEL_1641;
      v376 = 0;
      v29 = (unint64_t *)(v824 + 12);
      v861 = v863;
      j = (uint64_t)&v838;
      v862 = 0x800000000;
      v377 = v824[12];
      v9 = 8 * v375;
      do
      {
        v378 = *(_QWORD *)v377;
        v379 = *(_DWORD *)(*(_QWORD *)v377 + 20);
        if ((v379 & 0x40000000) != 0)
          v380 = *(unint64_t **)(v378 - 8);
        else
          v380 = (unint64_t *)(v378 - 32 * (v379 & 0x7FFFFFF));
        if (v380[4 * *(unsigned int *)(v378 + 60)] == v343)
          v8 = v380[4];
        else
          v8 = *v380;
        v6 = *(unsigned __int8 *)(v8 + 16);
        if (v376 >= HIDWORD(v862))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v861, (uint64_t)v863, v376 + 1, 8);
          v376 = v862;
        }
        if (v6 <= 0x1B)
          v381 = 0;
        else
          v381 = v8;
        *(_QWORD *)&v861[8 * v376] = v381;
        v376 = v862 + 1;
        LODWORD(v862) = v862 + 1;
        v377 = (llvm::Loop *)((char *)v377 + 8);
        v9 -= 8;
      }
      while (v9);
      v382 = (llvm *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((uint64_t *)&v821 + 1));
      v383 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((uint64_t *)&v821 + 1));
      v384 = *(_QWORD *)(v383 + 40);
      if (v384 == v383 + 40)
      {
        v386 = 0;
      }
      else
      {
        if (v384)
          v385 = (unsigned __int8 *)(v384 - 24);
        else
          v385 = 0;
        if (v385[16] - 29 >= 0xB)
          v386 = 0;
        else
          v386 = (llvm::BasicBlock *)v385;
      }
      v840.i16[4] = 257;
      v387 = sub_1C5EBD70C(v382, v386, 0, (uint64_t)v823, *((llvm::DomTreeUpdater **)&v822 + 1), 0, (llvm::Twine *)&v838, 0);
      v838 = 1;
      v839 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v840 = v839;
      v841 = (char *)&v843;
      v842 = (const char *)0x400000000;
      v805 = 0;
      *(_QWORD *)&v825 = &v805;
      *((_QWORD *)&v825 + 1) = &v838;
      v826 = &v821;
      v827 = v29;
      v828 = v387;
      __p = 0;
      v388 = *(_QWORD *)(llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((uint64_t *)&v821 + 1)) + 40);
      if (v388)
        v389 = v388 - 24;
      else
        v389 = 0;
      if (*(unsigned __int8 *)(v389 + 16) - 29 >= 0xB)
        v389 = 0;
      v390 = *(unsigned __int8 **)(v389 - 96);
      if (v390[16] <= 0x1Bu)
        v390 = 0;
      __p = v390;
      if (v390)
        sub_1C6280544((uint64_t)&v838, (uint64_t *)&__p);
      sub_1C5B7609C((unsigned int **)&v825);
      if ((_DWORD)v862)
      {
        v29 = (unint64_t *)v861;
        v391 = 8 * v862;
        do
        {
          v392 = (llvm::BasicBlock *)*v29++;
          *(_QWORD *)&v833 = v392;
          sub_1C6280544((uint64_t)&v838, (uint64_t *)&v833);
          v391 -= 8;
        }
        while (v391);
      }
      sub_1C5B7609C((unsigned int **)&v825);
      v393 = **(llvm ***)(*((_QWORD *)&v821 + 1) + 32);
      for (m = (_QWORD *)*((_QWORD *)v393 + 6); m != (_QWORD *)((char *)v393 + 40); m = (_QWORD *)m[1])
      {
        v395 = (llvm::BasicBlock *)(m - 3);
        if (m)
          v396 = m - 3;
        else
          v396 = 0;
        if (*((_BYTE *)v396 + 16) != 83)
          goto LABEL_948;
      }
      v395 = 0;
LABEL_948:
      v836 = 257;
      sub_1C5EBD70C(v393, v395, 0, (uint64_t)v823, *((llvm::DomTreeUpdater **)&v822 + 1), 0, (llvm::Twine *)&v833, 0);
      if (v841 != (char *)&v843)
        free(v841);
      if ((v838 & 1) == 0)
        MEMORY[0x1CAA32FB4](v839.i64[0], 8);
      if (v861 != v863)
        free(v861);
      __s1 = (llvm::Value *)*((_QWORD *)&v821 + 1);
    }
    v406 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)__s1);
    if (!v406)
      goto LABEL_961;
    v407 = *(_QWORD *)(v406 + 40);
    if (v407 == v406 + 40)
      goto LABEL_961;
    v408 = v407 - 24;
    if (!v407)
      v408 = 0;
    v409 = *(unsigned __int8 *)(v408 + 16);
    v410 = v409 - 29;
    if (v409 != 30)
    {
      v86 = 0;
      switch(v410)
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_966;
        case 1:
          goto LABEL_1642;
        case 2:
          v411 = (*(_DWORD *)(v408 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_964;
        case 3:
          v411 = (*(_DWORD *)(v408 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_964;
        case 10:
          v411 = *(_DWORD *)(v408 + 80) + 1;
LABEL_964:
          if (v411 == 1)
            goto LABEL_965;
          goto LABEL_961;
        default:
          goto LABEL_961;
      }
    }
    if ((*(_DWORD *)(v408 + 20) & 0x7FFFFFF) == 3)
LABEL_961:
      v86 = 0;
    else
LABEL_965:
      v86 = v406;
LABEL_966:
    v412 = v821;
    v413 = **(_QWORD **)(v821 + 32);
    if (v86 != v413)
    {
      v838 = (unint64_t)&v840.u64[1];
      v839.i64[0] = (uint64_t)&v840.i64[1];
      v839.i64[1] = 4;
      v840.i32[0] = 0;
      v415 = *(_QWORD *)(v86 + 40);
      v414 = *(_QWORD *)(v86 + 48);
      if (v414 != v415)
      {
        v29 = (unint64_t *)(v413 + 40);
        do
        {
          if (v414)
            v416 = (llvm::Instruction *)(v414 - 24);
          else
            v416 = 0;
          v417 = (llvm::BasicBlock *)*v29;
          if ((unint64_t *)*v29 == v29)
          {
            v419 = 0;
          }
          else
          {
            if (v417)
              v418 = (unsigned __int8 *)v417 - 24;
            else
              v418 = 0;
            if (v418[16] - 29 >= 0xB)
              v419 = 0;
            else
              v419 = (llvm::Instruction *)v418;
          }
          v414 = *(_QWORD *)(v414 + 8);
          llvm::Instruction::moveBefore(v416, v419);
        }
        while (v414 != v415);
        if (v839.i64[0] != v838)
          free((void *)v839.i64[0]);
      }
      v412 = v821;
    }
    __p = 0;
    v807 = 0;
    v808 = 0;
    v420 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v412);
    if (!v420)
      goto LABEL_991;
    v421 = *(_QWORD *)(v420 + 40);
    if (v421 == v420 + 40)
      goto LABEL_991;
    if (v421)
      v86 = v421 - 24;
    else
      v86 = 0;
    if (*(_BYTE *)(v86 + 16) != 30)
    {
      inserted = 0;
      switch(*(_BYTE *)(v86 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_996;
        case 0x1E:
          goto LABEL_1642;
        case 0x1F:
          v422 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_994;
        case 0x20:
          v422 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_994;
        case 0x27:
          v422 = *(_DWORD *)(v86 + 80) + 1;
LABEL_994:
          if (v422 == 1)
            goto LABEL_995;
          goto LABEL_991;
        default:
          goto LABEL_991;
      }
    }
    if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_991:
      inserted = 0;
    else
LABEL_995:
      inserted = (llvm::BasicBlock *)v420;
LABEL_996:
    v423 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*((uint64_t *)&v821 + 1));
    if (!v423)
      goto LABEL_1003;
    v424 = *(_QWORD *)(v423 + 40);
    if (v424 == v423 + 40)
      goto LABEL_1003;
    if (v424)
      v86 = v424 - 24;
    else
      v86 = 0;
    if (*(_BYTE *)(v86 + 16) != 30)
    {
      __s1 = 0;
      switch(*(_BYTE *)(v86 + 16))
      {
        case 0x1D:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_1008;
        case 0x1E:
          goto LABEL_1642;
        case 0x1F:
          v425 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_1006;
        case 0x20:
          v425 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_1006;
        case 0x27:
          v425 = *(_DWORD *)(v86 + 80) + 1;
LABEL_1006:
          if (v425 == 1)
            goto LABEL_1007;
          goto LABEL_1003;
        default:
          goto LABEL_1003;
      }
    }
    if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_1003:
      __s1 = 0;
    else
LABEL_1007:
      __s1 = (llvm::Value *)v423;
LABEL_1008:
    v426 = *((_QWORD *)inserted + 6);
    if (v426)
      v427 = v426 - 24;
    else
      v427 = 0;
    if (*(_BYTE *)(v427 + 16) == 83 || !llvm::BasicBlock::getUniquePredecessor(inserted))
      inserted = (llvm::BasicBlock *)llvm::InsertPreheaderForLoop((llvm *)v821, v823, *((llvm::DominatorTree **)&v822 + 1), 0, (llvm::MemorySSAUpdater *)1);
    v794 = **(llvm::Value ***)(v821 + 32);
    if (__s1 == v794)
    {
      __s1 = (llvm::Value *)llvm::InsertPreheaderForLoop(*((llvm **)&v821 + 1), v823, *((llvm::DominatorTree **)&v822 + 1), 0, (llvm::MemorySSAUpdater *)1);
      v794 = **(llvm::Value ***)(v821 + 32);
    }
    v796 = **(llvm::BasicBlock ***)(*((_QWORD *)&v821 + 1) + 32);
    v9 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((uint64_t *)&v821 + 1));
    v428 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v821);
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(inserted);
    v430 = llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)v9);
    v786 = (llvm::BasicBlock *)v428;
    v431 = *(_QWORD *)(v428 + 40);
    if (v431 == v428 + 40)
    {
      v432 = 0;
    }
    else
    {
      if (v431)
        v432 = v431 - 24;
      else
        v432 = 0;
      if (*(unsigned __int8 *)(v432 + 16) - 29 >= 0xB)
        v432 = 0;
    }
    if (*(_BYTE *)(v432 + 16) == 30)
      v433 = v432;
    else
      v433 = 0;
    v434 = *(_QWORD *)(v9 + 40);
    v803 = (unint64_t *)(v9 + 40);
    if (v434 == v9 + 40)
    {
      v435 = 0;
    }
    else
    {
      if (v434)
        v435 = v434 - 24;
      else
        v435 = 0;
      if (*(unsigned __int8 *)(v435 + 16) - 29 >= 0xB)
        v435 = 0;
    }
    if (*(_BYTE *)(v435 + 16) == 30)
      v436 = v435;
    else
      v436 = 0;
    v437 = (llvm::Value *)*((_QWORD *)v794 + 5);
    __n = (llvm::Value *)((char *)v794 + 40);
    if (v437 == (llvm::Value *)((char *)v794 + 40))
    {
      v438 = 0;
    }
    else
    {
      if (v437)
        v438 = (uint64_t)v437 - 24;
      else
        v438 = 0;
      if (*(unsigned __int8 *)(v438 + 16) - 29 >= 0xB)
        v438 = 0;
    }
    if (*(_BYTE *)(v438 + 16) == 30)
      v439 = v438;
    else
      v439 = 0;
    v440 = (llvm::BasicBlock *)*((_QWORD *)v796 + 5);
    v798 = (llvm::BasicBlock *)((char *)v796 + 40);
    if (v440 == (llvm::BasicBlock *)((char *)v796 + 40))
    {
      v441 = 0;
    }
    else
    {
      if (v440)
        v441 = (uint64_t)v440 - 24;
      else
        v441 = 0;
      if (*(unsigned __int8 *)(v441 + 16) - 29 >= 0xB)
        v441 = 0;
    }
    if (*(_BYTE *)(v441 + 16) == 30)
      v442 = v441;
    else
      v442 = 0;
    if (!UniquePredecessor || !v430 || !v433 || !v436 || !v439 || !v442)
      goto LABEL_1641;
    v443 = *(_QWORD *)(v430 + 40);
    if (v443 == v430 + 40)
    {
      v444 = 0;
    }
    else
    {
      if (v443)
        v444 = v443 - 24;
      else
        v444 = 0;
      if (*(unsigned __int8 *)(v444 + 16) - 29 >= 0xB)
        v444 = 0;
    }
    v445 = *(_BYTE *)(v444 + 16) == 30 ? v444 : 0;
    v446 = *(_QWORD *)(UniquePredecessor + 40);
    if (v446 == UniquePredecessor + 40)
    {
      v447 = 0;
    }
    else
    {
      if (v446)
        v447 = v446 - 24;
      else
        v447 = 0;
      if (*(unsigned __int8 *)(v447 + 16) - 29 >= 0xB)
        v447 = 0;
    }
    v448 = *(_BYTE *)(v447 + 16) == 30 ? v447 : 0;
    if (!v448 || !v445 || (UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v796)) == 0)
    {
LABEL_1641:
      v27 = 1;
      goto LABEL_844;
    }
    v450 = UniqueSuccessor;
    sub_1C5B763D8(v448, (unint64_t)inserted, (uint64_t)__s1, (char **)&__p);
    v451 = *(_DWORD *)(v439 + 20);
    if ((v451 & 0x40000000) != 0)
    {
      v453 = *(_QWORD *)(v439 - 8);
      v452 = v451 & 0x7FFFFFF;
    }
    else
    {
      v452 = v451 & 0x7FFFFFF;
      v453 = v439 - 32 * v452;
    }
    v454 = (_DWORD)v452 == 3;
    if (v452 != v454)
    {
      v455 = (llvm::BasicBlock **)(v453 + 32 * v454);
      v456 = 32 * v452 - 32 * v454;
      while (*v455 != v786)
      {
        v455 += 4;
        v456 -= 32;
        if (!v456)
          goto LABEL_1100;
      }
      sub_1C5B763D8(v439, (unint64_t)v786, v9, (char **)&__p);
    }
LABEL_1100:
    sub_1C5B763D8(v439, (unint64_t)__s1, v450, (char **)&__p);
    llvm::BasicBlock::replacePhiUsesWith(v450, v796, v794);
    sub_1C5B763D8(v442, v450, (uint64_t)inserted, (char **)&__p);
    v790 = *(_QWORD *)(v436 - 32);
    if ((llvm::BasicBlock *)v790 == v796)
      v790 = *(_QWORD *)(v436 - 64);
    sub_1C5B763D8(v445, v9, v790, (char **)&__p);
    v783 = *(llvm::BasicBlock **)(v433 - 32);
    if (v783 == v794)
      v783 = *(llvm::BasicBlock **)(v433 - 64);
    sub_1C5B763D8(v436, v790, (uint64_t)v783, (char **)&__p);
    sub_1C5B763D8(v433, (unint64_t)v783, v9, (char **)&__p);
    v457 = v823;
    sub_1C4E25D14((uint64_t)&v838, (unint64_t *)__p, (v807 - (uint64_t)__p) >> 4, 1u);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)v457, (uint64_t)&v838, 0);
    if (v859 != &v860)
      free(v859);
    sub_1C4E28CA4((uint64_t)&v855);
    sub_1C4E28CA4((uint64_t)&v838);
    v458 = v821;
    v459 = *(llvm::Value **)v821;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(v821, (uint64_t)__s1);
    v460 = (int32x2_t *)*((_QWORD *)&v822 + 1);
    v838 = (unint64_t)__s1;
    v461 = **((_QWORD **)&v822 + 1);
    v462 = *(_DWORD *)(*((_QWORD *)&v822 + 1) + 16);
    if (!v459)
    {
      if (!v462)
        goto LABEL_1160;
      v485 = v462 - 1;
      LODWORD(v486) = (v462 - 1) & ((__s1 >> 4) ^ (__s1 >> 9));
      v487 = (llvm::Value **)(v461 + 16 * v486);
      v488 = *v487;
      if (__s1 == *v487)
      {
LABEL_1159:
        *v487 = (llvm::Value *)-8192;
        v460[1] = vadd_s32(v460[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v489 = 1;
        while (v488 != (llvm::Value *)-4096)
        {
          v490 = v486 + v489++;
          v486 = v490 & v485;
          v488 = *(llvm::Value **)(v461 + 16 * v486);
          if (__s1 == v488)
          {
            v487 = (llvm::Value **)(v461 + 16 * v486);
            goto LABEL_1159;
          }
        }
      }
LABEL_1123:
      if (v459)
      {
        for (n = (_QWORD *)*((_QWORD *)v459 + 1); n != *((_QWORD **)v459 + 2); ++n)
        {
          if (*n == (_QWORD)v458)
          {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop((uint64_t)v459, v458);
            break;
          }
        }
        for (ii = *(_QWORD **)(v458 + 8); ii != *(_QWORD **)(v458 + 16); ++ii)
        {
          if (*ii == *((_QWORD *)&v458 + 1))
          {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(v458, *((uint64_t *)&v458 + 1));
            break;
          }
        }
        **((_QWORD **)&v458 + 1) = v459;
        v475 = (_QWORD *)*((_QWORD *)v459 + 2);
        v474 = *((_QWORD *)v459 + 3);
        if ((unint64_t)v475 >= v474)
        {
          v477 = (_QWORD *)*((_QWORD *)v459 + 1);
          v478 = v475 - v477;
          v479 = v478 + 1;
          if ((unint64_t)(v478 + 1) >> 61)
            goto LABEL_1358;
          v480 = v474 - (_QWORD)v477;
          if (v480 >> 2 > v479)
            v479 = v480 >> 2;
          if ((unint64_t)v480 >= 0x7FFFFFFFFFFFFFF8)
            v481 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v481 = v479;
          if (v481)
          {
            if (v481 >> 61)
              goto LABEL_1359;
            v482 = (char *)operator new(8 * v481);
          }
          else
          {
            v482 = 0;
          }
          v483 = &v482[8 * v478];
          *(_QWORD *)v483 = *((_QWORD *)&v458 + 1);
          v476 = v483 + 8;
          if (v475 != v477)
          {
            do
            {
              v484 = *--v475;
              *((_QWORD *)v483 - 1) = v484;
              v483 -= 8;
            }
            while (v475 != v477);
            v475 = (_QWORD *)*((_QWORD *)v459 + 1);
          }
          *((_QWORD *)v459 + 1) = v483;
          *((_QWORD *)v459 + 2) = v476;
          *((_QWORD *)v459 + 3) = &v482[8 * v481];
          if (v475)
            operator delete(v475);
        }
        else
        {
          *v475 = *((_QWORD *)&v458 + 1);
          v476 = v475 + 1;
        }
        *((_QWORD *)v459 + 2) = v476;
LABEL_1170:
        v495 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 8);
        for (jj = *(char **)(*((_QWORD *)&v458 + 1) + 16);
              v495 != (_QWORD *)jj;
              jj = *(char **)(*((_QWORD *)&v458 + 1) + 16))
        {
          v496 = (_QWORD *)*v495;
          v497 = jj - (char *)(v495 + 1);
          if (jj != (char *)(v495 + 1))
            memmove(v495, v495 + 1, jj - (char *)(v495 + 1));
          *(_QWORD *)(*((_QWORD *)&v458 + 1) + 16) = (char *)v495 + v497;
          *v496 = v458;
          v499 = *(_QWORD **)(v458 + 16);
          v498 = *(_QWORD *)(v458 + 24);
          if ((unint64_t)v499 >= v498)
          {
            v501 = *(_QWORD **)(v458 + 8);
            v502 = v499 - v501;
            v503 = v502 + 1;
            if ((unint64_t)(v502 + 1) >> 61)
              goto LABEL_1358;
            v504 = v498 - (_QWORD)v501;
            if (v504 >> 2 > v503)
              v503 = v504 >> 2;
            if ((unint64_t)v504 >= 0x7FFFFFFFFFFFFFF8)
              v505 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v505 = v503;
            if (v505)
            {
              if (v505 >> 61)
                goto LABEL_1359;
              v506 = (char *)operator new(8 * v505);
            }
            else
            {
              v506 = 0;
            }
            v507 = &v506[8 * v502];
            *(_QWORD *)v507 = v496;
            v500 = v507 + 8;
            if (v499 != v501)
            {
              do
              {
                v508 = *--v499;
                *((_QWORD *)v507 - 1) = v508;
                v507 -= 8;
              }
              while (v499 != v501);
              v499 = *(_QWORD **)(v458 + 8);
            }
            *(_QWORD *)(v458 + 8) = v507;
            *(_QWORD *)(v458 + 16) = v500;
            *(_QWORD *)(v458 + 24) = &v506[8 * v505];
            if (v499)
              operator delete(v499);
          }
          else
          {
            *v499 = v496;
            v500 = v499 + 1;
          }
          *(_QWORD *)(v458 + 16) = v500;
          v495 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 8);
        }
        *(_QWORD *)v458 = *((_QWORD *)&v458 + 1);
        v509 = *(_QWORD *)(*((_QWORD *)&v458 + 1) + 24);
        if ((unint64_t)v495 >= v509)
        {
          v511 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 8);
          v512 = v495 - v511;
          v513 = v512 + 1;
          if ((unint64_t)(v512 + 1) >> 61)
            goto LABEL_1358;
          v514 = v509 - (_QWORD)v511;
          if (v514 >> 2 > v513)
            v513 = v514 >> 2;
          if ((unint64_t)v514 >= 0x7FFFFFFFFFFFFFF8)
            v515 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v515 = v513;
          if (v515)
          {
            if (v515 >> 61)
              goto LABEL_1359;
            v516 = (char *)operator new(8 * v515);
          }
          else
          {
            v516 = 0;
          }
          v517 = &v516[8 * v512];
          *(_QWORD *)v517 = v458;
          v510 = v517 + 8;
          if (v495 != v511)
          {
            do
            {
              v518 = *--v495;
              *((_QWORD *)v517 - 1) = v518;
              v517 -= 8;
            }
            while (v495 != v511);
            v495 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 8);
          }
          *(_QWORD *)(*((_QWORD *)&v458 + 1) + 8) = v517;
          *(_QWORD *)(*((_QWORD *)&v458 + 1) + 16) = v510;
          *(_QWORD *)(*((_QWORD *)&v458 + 1) + 24) = &v516[8 * v515];
          if (v495)
            operator delete(v495);
        }
        else
        {
          *v495 = v458;
          v510 = v495 + 1;
        }
        *(_QWORD *)(*((_QWORD *)&v458 + 1) + 16) = v510;
        v520 = *(_BYTE **)(*((_QWORD *)&v458 + 1) + 32);
        v519 = *(_BYTE **)(*((_QWORD *)&v458 + 1) + 40);
        v521 = v519 - v520;
        v838 = (unint64_t)&v839.u64[1];
        v839.i64[0] = 0x800000000;
        if ((unint64_t)(v519 - v520) >= 0x41)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v838, (uint64_t)&v839.i64[1], v521 >> 3, 8);
          v522 = v839.i32[0];
        }
        else
        {
          v522 = 0;
        }
        if (v519 != v520)
        {
          memcpy((void *)(v838 + 8 * v522), v520, v519 - v520);
          v522 = v839.i32[0];
        }
        v839.i32[0] = v522 + ((unint64_t)v521 >> 3);
        v523 = *(uint64_t **)(v458 + 32);
        v524 = *(uint64_t **)(v458 + 40);
        while (v523 != v524)
        {
          v525 = *v523;
          v526 = *(_DWORD *)(*((_QWORD *)&v822 + 1) + 16);
          if (v526)
          {
            v527 = **((_QWORD **)&v822 + 1);
            v528 = v526 - 1;
            v529 = ((v525 >> 4) ^ (v525 >> 9)) & (v526 - 1);
            v530 = *(_QWORD *)(**((_QWORD **)&v822 + 1) + 16 * v529);
            if (v525 == v530)
            {
LABEL_1218:
              v533 = *(_QWORD *)(v527 + 16 * v529 + 8);
              goto LABEL_1220;
            }
            v531 = 1;
            while (v530 != -4096)
            {
              v532 = v529 + v531++;
              v529 = v532 & v528;
              v530 = *(_QWORD *)(v527 + 16 * v529);
              if (v525 == v530)
                goto LABEL_1218;
            }
          }
          v533 = 0;
LABEL_1220:
          if (v533 == (_QWORD)v458)
          {
            v535 = *(uint64_t **)(*((_QWORD *)&v458 + 1) + 40);
            v534 = *(_QWORD *)(*((_QWORD *)&v458 + 1) + 48);
            if ((unint64_t)v535 >= v534)
            {
              v537 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 32);
              v538 = v535 - v537;
              v539 = v538 + 1;
              if ((unint64_t)(v538 + 1) >> 61)
                goto LABEL_1358;
              v540 = v534 - (_QWORD)v537;
              if (v540 >> 2 > v539)
                v539 = v540 >> 2;
              v152 = (unint64_t)v540 >= 0x7FFFFFFFFFFFFFF8;
              v541 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v152)
                v541 = v539;
              v781 = v541;
              if (v541)
              {
                if (v541 >> 61)
                  goto LABEL_1359;
                v542 = (char *)operator new(8 * v541);
              }
              else
              {
                v542 = 0;
              }
              v543 = (uint64_t *)&v542[8 * v538];
              *v543 = v525;
              v536 = v543 + 1;
              if (v535 != v537)
              {
                do
                {
                  v544 = *--v535;
                  *--v543 = v544;
                }
                while (v535 != v537);
                v535 = *(uint64_t **)(*((_QWORD *)&v458 + 1) + 32);
              }
              *(_QWORD *)(*((_QWORD *)&v458 + 1) + 32) = v543;
              *(_QWORD *)(*((_QWORD *)&v458 + 1) + 40) = v536;
              *(_QWORD *)(*((_QWORD *)&v458 + 1) + 48) = &v542[8 * v781];
              if (v535)
                operator delete(v535);
            }
            else
            {
              *v535 = v525;
              v536 = v535 + 1;
            }
            *(_QWORD *)(*((_QWORD *)&v458 + 1) + 40) = v536;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(*((_QWORD *)&v458 + 1) + 56), v525);
          }
          ++v523;
        }
        v545 = **(const void ***)(*((_QWORD *)&v458 + 1) + 32);
        v546 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((uint64_t *)&v458 + 1));
        if (v839.i32[0])
        {
          v547 = (const void *)v546;
          v548 = (const void **)v838;
          v549 = (const void **)(v838 + 8 * v839.u32[0]);
          do
          {
            v550 = *v548;
            v551 = *(_DWORD *)(*((_QWORD *)&v822 + 1) + 16);
            v552 = *v548 >> 4;
            if (v551)
            {
              v553 = **((_QWORD **)&v822 + 1);
              v554 = (v552 ^ (v550 >> 9)) & (v551 - 1);
              v555 = *(const void **)(**((_QWORD **)&v822 + 1) + 16 * v554);
              if (v550 == v555)
              {
LABEL_1247:
                v558 = *(_QWORD *)(v553 + 16 * v554 + 8);
                goto LABEL_1249;
              }
              v556 = 1;
              while (v555 != (const void *)-4096)
              {
                v557 = v554 + v556++;
                v554 = v557 & (v551 - 1);
                v555 = *(const void **)(v553 + 16 * v554);
                if (v550 == v555)
                  goto LABEL_1247;
              }
            }
            v558 = 0;
LABEL_1249:
            if (v558 == *((_QWORD *)&v458 + 1))
            {
              if (v550 != v545 && v550 != v547)
              {
                v861 = (char *)*v548;
                if (v551)
                {
                  v560 = v552 ^ (v550 >> 9);
                  v561 = v551 - 1;
                  v562 = v560 & (v551 - 1);
                  v563 = (_QWORD *)(**((_QWORD **)&v822 + 1) + 16 * v562);
                  v564 = (const void *)*v563;
                  if (v550 != (const void *)*v563)
                  {
                    v565 = 0;
                    v566 = 1;
                    while (v564 != (const void *)-4096)
                    {
                      if (v565)
                        v567 = 0;
                      else
                        v567 = v564 == (const void *)-8192;
                      if (v567)
                        v565 = v563;
                      v568 = v562 + v566++;
                      v562 = v568 & v561;
                      v563 = (_QWORD *)(**((_QWORD **)&v822 + 1) + 16 * (v568 & v561));
                      v564 = (const void *)*v563;
                      if (v550 == (const void *)*v563)
                        goto LABEL_1271;
                    }
                    if (v565)
                      v569 = v565;
                    else
                      v569 = v563;
LABEL_1270:
                    v563 = sub_1C4EB6AAC(*((uint64_t *)&v822 + 1), (uint64_t)&v861, (uint64_t *)&v861, v569);
                    *v563 = v861;
                    v563[1] = 0;
                  }
LABEL_1271:
                  v563[1] = v458;
                  goto LABEL_1272;
                }
                v569 = 0;
                goto LABEL_1270;
              }
              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(v458, (uint64_t)v550);
            }
LABEL_1272:
            ++v548;
          }
          while (v548 != v549);
        }
        v571 = *(llvm::BasicBlock ***)(*((_QWORD *)&v458 + 1) + 40);
        v570 = *(_QWORD *)(*((_QWORD *)&v458 + 1) + 48);
        if ((unint64_t)v571 < v570)
        {
          *v571 = inserted;
          v572 = v571 + 1;
          goto LABEL_1277;
        }
        v606 = *(_QWORD **)(*((_QWORD *)&v458 + 1) + 32);
        v607 = v571 - (llvm::BasicBlock **)v606;
        v608 = v607 + 1;
        if (!((unint64_t)(v607 + 1) >> 61))
        {
          v609 = v570 - (_QWORD)v606;
          if (v609 >> 2 > v608)
            v608 = v609 >> 2;
          if ((unint64_t)v609 >= 0x7FFFFFFFFFFFFFF8)
            v610 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v610 = v608;
          if (!v610)
          {
            v611 = 0;
            goto LABEL_1351;
          }
          if (!(v610 >> 61))
          {
            v611 = (char *)operator new(8 * v610);
LABEL_1351:
            v612 = (llvm::BasicBlock **)&v611[8 * v607];
            *v612 = inserted;
            v572 = v612 + 1;
            if (v571 != v606)
            {
              do
              {
                v613 = *--v571;
                *--v612 = v613;
              }
              while (v571 != v606);
              v571 = *(llvm::BasicBlock ***)(*((_QWORD *)&v458 + 1) + 32);
            }
            *(_QWORD *)(*((_QWORD *)&v458 + 1) + 32) = v612;
            *(_QWORD *)(*((_QWORD *)&v458 + 1) + 40) = v572;
            *(_QWORD *)(*((_QWORD *)&v458 + 1) + 48) = &v611[8 * v610];
            if (v571)
              operator delete(v571);
LABEL_1277:
            *(_QWORD *)(*((_QWORD *)&v458 + 1) + 40) = v572;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(*((_QWORD *)&v458 + 1) + 56), (uint64_t)inserted);
            v861 = (char *)inserted;
            v573 = *(_DWORD *)(*((_QWORD *)&v822 + 1) + 16);
            if (v573)
            {
              v574 = v573 - 1;
              v575 = (v573 - 1) & ((inserted >> 4) ^ (inserted >> 9));
              v576 = (llvm::BasicBlock **)(**((_QWORD **)&v822 + 1) + 16 * v575);
              v577 = *v576;
              if (*v576 == inserted)
                goto LABEL_1292;
              v578 = 0;
              v579 = 1;
              while (v577 != (llvm::BasicBlock *)-4096)
              {
                if (v578)
                  v580 = 0;
                else
                  v580 = v577 == (llvm::BasicBlock *)-8192;
                if (v580)
                  v578 = v576;
                v581 = v575 + v579++;
                v575 = v581 & v574;
                v576 = (llvm::BasicBlock **)(**((_QWORD **)&v822 + 1) + 16 * (v581 & v574));
                v577 = *v576;
                if (*v576 == inserted)
                  goto LABEL_1292;
              }
              if (v578)
                v582 = v578;
              else
                v582 = v576;
            }
            else
            {
              v582 = 0;
            }
            v576 = (llvm::BasicBlock **)sub_1C4EB6AAC(*((uint64_t *)&v822 + 1), (uint64_t)&v861, (uint64_t *)&v861, v582);
            *v576 = (llvm::BasicBlock *)v861;
            v576[1] = 0;
LABEL_1292:
            v576[1] = (llvm::BasicBlock *)*((_QWORD *)&v458 + 1);
            llvm::ScalarEvolution::forgetLoop((int32x2_t *)v822, *((const llvm::Loop **)&v458 + 1));
            llvm::ScalarEvolution::forgetLoop((int32x2_t *)v822, (const llvm::Loop *)v458);
            if ((unint64_t *)v838 != &v839.u64[1])
              free((void *)v838);
            v782 = (llvm::OptimizationRemarkEmitter *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(*((_QWORD **)&v821 + 1));
            v784 = (llvm::SmallPtrSetImplBase *)*((_QWORD *)&v821 + 1);
            v8 = *((_QWORD *)&v822 + 1);
            j = v790 + 40;
            v583 = *(_QWORD *)(v790 + 40);
            if (v583 == v790 + 40)
            {
              LODWORD(v86) = 0;
              v6 = (uint64_t)&v839.i64[1];
              v838 = (unint64_t)&v839.u64[1];
              v839.i64[0] = 0x800000000;
            }
            else
            {
              v584 = *(_QWORD *)(v790 + 48);
              v585 = v584 - 24;
              if (v584)
                v586 = v584 - 24;
              else
                v586 = 0;
              if (v584 && *(_BYTE *)(v586 + 16) == 83)
              {
                do
                {
                  if (v585)
                    v587 = v585 + 24;
                  else
                    v587 = 0;
                  v588 = *(_QWORD *)(v587 + 8);
                  if (v588)
                    v589 = v588 - 24;
                  else
                    v589 = 0;
                  v590 = *(_DWORD *)(v585 + 20);
                  v591 = v590 & 0x7FFFFFF;
                  if ((v590 & 0x7FFFFFF) != 0)
                  {
                    v592 = 0;
                    while (1)
                    {
                      v593 = v585 - 32 * v591;
                      if ((v590 & 0x40000000) != 0)
                        v593 = *(_QWORD *)(v585 - 8);
                      if (*(_QWORD *)(v593 + 32 * *(unsigned int *)(v585 + 60) + 8 * v592) == v9)
                        break;
                      if (v591 == ++v592)
                        goto LABEL_1312;
                    }
                  }
                  else
                  {
LABEL_1312:
                    LODWORD(v592) = -1;
                  }
                  if ((v590 & 0x40000000) != 0)
                    v594 = *(_QWORD *)(v585 - 8);
                  else
                    v594 = v585 - 32 * v591;
                  v595 = *(unsigned __int8 *)(v589 + 16);
                  v596 = *(llvm::Value **)(v594 + 32 * v592);
                  v597 = *(llvm::BasicBlock **)(sub_1C5B75E9C((uint64_t)v596) + 40);
                  if (v597 == (llvm::BasicBlock *)v9 || v597 == v796)
                  {
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v585, v596, (llvm::Value *)1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v585 + 40) + 40, (uint64_t ***)v585);
                    v599 = *(_QWORD *)(v585 + 24);
                    v600 = *(_QWORD **)(v585 + 32);
                    *v600 = v599;
                    *(_QWORD *)(v599 + 8) = v600;
                    *(_QWORD *)(v585 + 24) = 0;
                    *(_QWORD *)(v585 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v585);
                  }
                  if (!v588)
                    break;
                  v585 = v589;
                }
                while (v595 == 83);
                v583 = *(_QWORD *)j;
              }
              v6 = (uint64_t)&v839.i64[1];
              v838 = (unint64_t)&v839.u64[1];
              v839.i64[0] = 0x800000000;
              if (v583 == j)
              {
                LODWORD(v86) = 0;
              }
              else
              {
                LODWORD(v86) = 0;
                v601 = *(_QWORD *)(v790 + 48);
                v602 = v601 - 24;
                if (v601)
                  v603 = v601 - 24;
                else
                  v603 = 0;
                if (v601 && *(_BYTE *)(v603 + 16) == 83)
                {
                  LODWORD(v86) = 0;
                  do
                  {
                    if (v86 >= v839.i32[1])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v838, (uint64_t)&v839.i64[1], v86 + 1, 8);
                      LODWORD(v86) = v839.i32[0];
                    }
                    *(_QWORD *)(v838 + 8 * v86) = v602;
                    LODWORD(v86) = ++v839.i32[0];
                    v604 = *(_QWORD *)(v602 + 32);
                    v602 = v604 - 24;
                    if (v604)
                      v605 = v604 - 24;
                    else
                      v605 = 0;
                  }
                  while (v604 && *(_BYTE *)(v605 + 16) == 83);
                }
              }
            }
            v13 = (uint64_t)v863;
            v861 = v863;
            v29 = &v838;
            v862 = 0x800000000;
            if ((unint64_t *)*v803 == v803)
            {
LABEL_1643:
              v614 = 0;
              if ((_DWORD)v86)
                goto LABEL_1382;
            }
            else
            {
              v614 = 0;
              v615 = *(_QWORD *)(v9 + 48);
              v616 = v615 - 24;
              if (v615)
                v617 = v615 - 24;
              else
                v617 = 0;
              if (v615 && *(_BYTE *)(v617 + 16) == 83)
              {
                v614 = 0;
                do
                {
                  if (v614 >= HIDWORD(v862))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v861, (uint64_t)v863, v614 + 1, 8);
                    v614 = v862;
                  }
                  *(_QWORD *)&v861[8 * v614] = v616;
                  v614 = v862 + 1;
                  LODWORD(v862) = v862 + 1;
                  v618 = *(_QWORD *)(v616 + 32);
                  v616 = v618 - 24;
                  if (v618)
                    v619 = v618 - 24;
                  else
                    v619 = 0;
                }
                while (v618 && *(_BYTE *)(v619 + 16) == 83);
                LODWORD(v86) = v839.i32[0];
              }
              if ((_DWORD)v86)
              {
LABEL_1382:
                v620 = (llvm::BasicBlock *)*v29;
                v621 = *v29 + 8 * v86;
                do
                {
                  for (kk = *(unint64_t **)(v9 + 48); kk != v803; kk = (unint64_t *)kk[1])
                  {
                    v623 = (llvm::Instruction *)(kk - 3);
                    if (kk)
                      v624 = kk - 3;
                    else
                      v624 = 0;
                    if (*((_BYTE *)v624 + 16) != 83)
                      goto LABEL_1391;
                  }
                  v623 = 0;
LABEL_1391:
                  v625 = *(llvm::Instruction **)v620;
                  v620 = (llvm::BasicBlock *)((char *)v620 + 8);
                  llvm::Instruction::moveBefore(v625, v623);
                }
                while (v620 != (llvm::BasicBlock *)v621);
                v614 = v862;
              }
            }
            if (v614)
            {
              v626 = (llvm::Instruction **)v29[85];
              v627 = &v626[v614];
              do
              {
                for (mm = *(_QWORD *)(v790 + 48); mm != j; mm = *(_QWORD *)(mm + 8))
                {
                  v629 = (llvm::Instruction *)(mm - 24);
                  if (mm)
                    v630 = mm - 24;
                  else
                    v630 = 0;
                  if (*(_BYTE *)(v630 + 16) != 83)
                    goto LABEL_1403;
                }
                v629 = 0;
LABEL_1403:
                v631 = *v626++;
                llvm::Instruction::moveBefore(v631, v629);
              }
              while (v626 != v627);
            }
            if (v782
              && *((llvm::OptimizationRemarkEmitter **)v782 + 5) != (llvm::OptimizationRemarkEmitter *)((char *)v782 + 40))
            {
              for (nn = *((_QWORD *)v782 + 6); ; nn = *(_QWORD *)(v633 + 32))
              {
                v633 = nn - 24;
                if (nn)
                  v634 = nn - 24;
                else
                  v634 = 0;
                if (!nn || *(_BYTE *)(v634 + 16) != 83)
                  goto LABEL_1476;
                v635 = *(_DWORD *)(nn - 4);
                if ((v635 & 0x7FFFFFF) == 1)
                {
                  v636 = (v635 & 0x40000000) != 0 ? *(uint64_t **)(nn - 32) : (uint64_t *)(nn - 56);
                  v637 = *v636;
                  if (v637 && *(unsigned __int8 *)(v637 + 16) >= 0x1Cu)
                    break;
                }
LABEL_1429:
                ;
              }
              v639 = *(_DWORD *)(v8 + 16);
              if (v639)
              {
                v640 = *(_QWORD *)(v637 + 40);
                v641 = *(_QWORD *)v8;
                v642 = v639 - 1;
                v643 = ((v640 >> 4) ^ (v640 >> 9)) & (v639 - 1);
                v644 = *(_QWORD *)(*(_QWORD *)v8 + 16 * v643);
                if (v640 == v644)
                {
LABEL_1426:
                  v647 = *(llvm::SmallPtrSetImplBase **)(v641 + 16 * v643 + 8);
                  goto LABEL_1428;
                }
                v645 = 1;
                while (v644 != -4096)
                {
                  v646 = v643 + v645++;
                  v643 = v646 & v642;
                  v644 = *(_QWORD *)(v641 + 16 * v643);
                  if (v640 == v644)
                    goto LABEL_1426;
                }
              }
              v647 = 0;
LABEL_1428:
              if (v647 != v784)
              {
                llvm::Instruction::clone((llvm::Instruction *)v633);
                if (*(_BYTE *)(v648 + 16) == 83)
                  v649 = v648;
                else
                  v649 = 0;
                v650 = *(_DWORD *)(v633 + 20);
                if ((v650 & 0x40000000) != 0)
                  v651 = *(uint64_t **)(v633 - 8);
                else
                  v651 = (uint64_t *)(v633 - 32 * (v650 & 0x7FFFFFF));
                sub_1C6125834(v649, 0, *v651);
                v652 = *(_DWORD *)(v649 + 20);
                if ((v652 & 0x40000000) != 0)
                  v653 = *(_QWORD *)(v649 - 8);
                else
                  v653 = v649 - 32 * (v652 & 0x7FFFFFF);
                *(_QWORD *)(v653 + 32 * *(unsigned int *)(v649 + 60)) = v786;
                v654 = *(_QWORD *)(v9 + 8);
                if (v654)
                {
                  while (1)
                  {
                    v655 = *(_QWORD *)(v654 + 24);
                    v656 = *(unsigned __int8 *)(v655 + 16);
                    v657 = v655 && v656 >= 0x1C;
                    if (v657 && v656 - 29 < 0xB)
                      break;
                    v654 = *(_QWORD *)(v654 + 8);
                    if (!v654)
                      goto LABEL_1449;
                  }
LABEL_1456:
                  v662 = *(_QWORD *)(v655 + 40);
                  if ((llvm::BasicBlock *)v662 != v786)
                  {
                    v663 = *(_DWORD *)(v633 + 20);
                    if ((v663 & 0x40000000) != 0)
                      v664 = *(uint64_t **)(v633 - 8);
                    else
                      v664 = (uint64_t *)(v633 - 32 * (v663 & 0x7FFFFFF));
                    sub_1C477667C((llvm::PHINode *)v649, *v664, v662);
                  }
                  while (1)
                  {
                    v654 = *(_QWORD *)(v654 + 8);
                    if (!v654)
                      break;
                    v655 = *(_QWORD *)(v654 + 24);
                    v665 = *(unsigned __int8 *)(v655 + 16);
                    if (v655)
                      v666 = v665 >= 0x1C;
                    else
                      v666 = 0;
                    if (v666 && v665 - 29 < 0xB)
                      goto LABEL_1456;
                  }
                }
LABEL_1449:
                for (i1 = *(unint64_t **)(v9 + 48); i1 != v803; i1 = (unint64_t *)i1[1])
                {
                  v660 = i1 - 3;
                  if (i1)
                    v661 = i1 - 3;
                  else
                    v661 = 0;
                  if (*((_BYTE *)v661 + 16) != 83)
                    goto LABEL_1471;
                }
                v660 = 0;
LABEL_1471:
                v668 = v660[5];
                *(_QWORD *)(v649 + 40) = v668;
                *(_WORD *)(v668 + 18) &= ~0x8000u;
                if ((*(_BYTE *)(v649 + 23) & 0x10) != 0)
                {
                  v671 = *(_QWORD *)(v668 + 56);
                  if (v671)
                  {
                    v672 = *(llvm::ValueSymbolTable **)(v671 + 104);
                    if (v672)
                      llvm::ValueSymbolTable::reinsertValue(v672, (llvm::Value *)v649);
                  }
                }
                v670 = v660[3];
                v669 = v660 + 3;
                *(_QWORD *)(v649 + 32) = v669;
                *(_QWORD *)(v649 + 24) = v670;
                *(_QWORD *)(v670 + 8) = v649 + 24;
                *v669 = v649 + 24;
                sub_1C6125834(v633, 0, v649);
              }
              goto LABEL_1429;
            }
LABEL_1476:
            llvm::BasicBlock::replacePhiUsesWith(v9, (llvm::BasicBlock *)v9, v786);
            v673 = (void *)v29[85];
            if (v673 != (void *)v13)
              free(v673);
            if (*v29 != v6)
              free((void *)*v29);
            llvm::BasicBlock::replacePhiUsesWith((uint64_t)v783, v786, (llvm::BasicBlock *)v9);
            v674 = v10[27];
            v861 = v863;
            v13 = (uint64_t)&v838;
            v862 = 0x400000000;
            v6 = (uint64_t)&v826;
            v10[28] = (llvm::Loop *)&v826;
            v10[29] = (llvm::Loop *)0x400000000;
            if (*(llvm::Loop **)v798 != v798)
            {
              v675 = *((_QWORD *)v796 + 6);
              v676 = v675 - 24;
              v677 = v675 ? v675 - 24 : 0;
              if (v675 && *(_BYTE *)(v677 + 16) == 83)
              {
                do
                {
                  v678 = sub_1C477672C((uint64_t)v674 + 32, v676);
                  v679 = *((_QWORD *)v674 + 5);
                  if (v679 == *((_QWORD *)v674 + 4))
                    v680 = 52;
                  else
                    v680 = 48;
                  if (v678 != (_QWORD *)(v679 + 8 * *(unsigned int *)((char *)v674 + v680)))
                  {
                    v681 = v862;
                    if (v862 >= (unint64_t)HIDWORD(v862))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v861, (uint64_t)v863, v862 + 1, 8);
                      v681 = v862;
                    }
                    *(_QWORD *)&v861[8 * v681] = v676;
                    LODWORD(v862) = v862 + 1;
                  }
                  v682 = *(_QWORD *)(v676 + 32);
                  v676 = v682 - 24;
                  if (v682)
                    v683 = v682 - 24;
                  else
                    v683 = 0;
                }
                while (v682 && *(_BYTE *)(v683 + 16) == 83);
              }
            }
            if (*(llvm::OptimizationRemarkEmitter **)__n != __n)
            {
              v684 = *((_QWORD *)v794 + 6);
              v685 = v684 - 24;
              v686 = v684 ? v684 - 24 : 0;
              if (v684 && *(_BYTE *)(v686 + 16) == 83)
              {
                do
                {
                  v687 = sub_1C477672C((uint64_t)v674 + 32, v685);
                  v688 = *((_QWORD *)v674 + 5);
                  if (v688 == *((_QWORD *)v674 + 4))
                    v689 = 52;
                  else
                    v689 = 48;
                  if (v687 != (_QWORD *)(v688 + 8 * *(unsigned int *)((char *)v674 + v689)))
                  {
                    v690 = DWORD2(v825);
                    if (DWORD2(v825) >= (unint64_t)HIDWORD(v825))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v825, (uint64_t)&v826, DWORD2(v825) + 1, 8);
                      v690 = DWORD2(v825);
                    }
                    *((_QWORD *)v10[28] + v690) = v685;
                    ++DWORD2(v825);
                  }
                  v691 = *(_QWORD *)(v685 + 32);
                  v685 = v691 - 24;
                  if (v691)
                    v692 = v691 - 24;
                  else
                    v692 = 0;
                }
                while (v691 && *(_BYTE *)(v692 + 16) == 83);
              }
            }
            if (DWORD2(v825))
            {
              v693 = (llvm::Instruction **)v10[28];
              v694 = &v693[DWORD2(v825)];
              do
              {
                for (i2 = (llvm::Loop *)*((_QWORD *)v796 + 6); i2 != v798; i2 = (llvm::Loop *)*((_QWORD *)i2 + 1))
                {
                  v696 = (llvm::Loop *)((char *)i2 - 24);
                  if (i2)
                    v697 = (_QWORD *)((char *)i2 - 24);
                  else
                    v697 = 0;
                  if (*((_BYTE *)v697 + 16) != 83)
                    goto LABEL_1526;
                }
                v696 = 0;
LABEL_1526:
                v698 = *v693++;
                llvm::Instruction::moveBefore(v698, v696);
              }
              while (v693 != v694);
            }
            if ((_DWORD)v862)
            {
              v699 = (llvm::Instruction **)v861;
              v700 = (llvm::Instruction **)&v861[8 * v862];
              do
              {
                for (i3 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)v794 + 6);
                      i3 != __n;
                      i3 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)i3 + 1))
                {
                  v702 = (llvm::OptimizationRemarkEmitter *)((char *)i3 - 24);
                  if (i3)
                    v703 = (_QWORD *)((char *)i3 - 24);
                  else
                    v703 = 0;
                  if (*((_BYTE *)v703 + 16) != 83)
                    goto LABEL_1537;
                }
                v702 = 0;
LABEL_1537:
                v704 = *v699++;
                llvm::Instruction::moveBefore(v704, v702);
              }
              while (v699 != v700);
            }
            v8 = (unint64_t)v794;
            llvm::BasicBlock::replacePhiUsesWith((uint64_t)v794, __s1, inserted);
            llvm::BasicBlock::replacePhiUsesWith((uint64_t)v794, (llvm::BasicBlock *)v9, v786);
            llvm::BasicBlock::replacePhiUsesWith((uint64_t)v796, inserted, __s1);
            llvm::BasicBlock::replacePhiUsesWith((uint64_t)v796, v786, (llvm::BasicBlock *)v9);
            v705 = **(_QWORD **)v794;
            v838 = (unint64_t)&v839.u64[1];
            v839.i64[0] = 0x200000000;
            v844 = v705;
            v845 = &v853;
            v846 = &v854;
            v847 = 0;
            v848 = 0;
            v849 = 512;
            v850 = 7;
            v842 = 0;
            v843 = 0;
            v851 = 0;
            v852 = 0;
            v853 = &unk_1E8167888;
            v854 = &unk_1E8167A08;
            j = (uint64_t)&v838;
            v10[40] = (llvm::Loop *)v834;
            v10[41] = (llvm::Loop *)0x400000000;
            v9 = *((_QWORD *)v794 + 5);
            v706 = *((_QWORD *)v794 + 6);
            if (v706 != v9)
            {
              v707 = 0;
              do
              {
                if (v706)
                  v8 = v706 - 24;
                else
                  v8 = 0;
                if (v707 >= HIDWORD(v833))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v833, (uint64_t)v834, v707 + 1, 8);
                  v707 = DWORD2(v833);
                }
                *((_QWORD *)v10[40] + v707) = v8;
                v707 = ++DWORD2(v833);
                v706 = *(_QWORD *)(v706 + 8);
              }
              while (v706 != v9);
            }
            llvm::formLCSSAForInstructions((uint64_t)&v833, (uint64_t)v10[26], (uint64_t *)v10[25], (int32x2_t *)v10[24], (llvm::IRBuilderBase *)&v838, 0);
            v708 = v10[40];
            if (v708 != (llvm::Loop *)v834)
              free(v708);
            if ((unint64_t *)v838 != &v839.u64[1])
              free((void *)v838);
            v709 = v10[28];
            if (v709 != (llvm::Loop *)&v826)
              free(v709);
            if (v861 != v863)
              free(v861);
            if (__p)
              operator delete(__p);
            v710 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v10[22]);
            if (!v710)
              goto LABEL_1563;
            v711 = *(_QWORD *)(v710 + 40);
            if (v711 == v710 + 40)
              goto LABEL_1563;
            if (v711)
              v86 = v711 - 24;
            else
              v86 = 0;
            if (*(_BYTE *)(v86 + 16) != 30)
            {
              v29 = 0;
              switch(*(_BYTE *)(v86 + 16))
              {
                case 0x1D:
                case 0x21:
                case 0x22:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                  goto LABEL_1568;
                case 0x1E:
                  goto LABEL_1642;
                case 0x1F:
                  v712 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_1566;
                case 0x20:
                  v712 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_1566;
                case 0x27:
                  v712 = *(_DWORD *)(v86 + 80) + 1;
LABEL_1566:
                  if (v712 == 1)
                    goto LABEL_1567;
                  goto LABEL_1563;
                default:
                  goto LABEL_1563;
              }
            }
            if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_1563:
              v29 = 0;
            else
LABEL_1567:
              v29 = (unint64_t *)v710;
LABEL_1568:
            v713 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v10[23]);
            if (!v713)
              goto LABEL_1575;
            v714 = *(_QWORD *)(v713 + 40);
            if (v714 == v713 + 40)
              goto LABEL_1575;
            if (v714)
              v86 = v714 - 24;
            else
              v86 = 0;
            if (*(_BYTE *)(v86 + 16) != 30)
            {
              v10 = 0;
              switch(*(_BYTE *)(v86 + 16))
              {
                case 0x1D:
                case 0x21:
                case 0x22:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                  goto LABEL_1580;
                case 0x1E:
                  goto LABEL_1642;
                case 0x1F:
                  v715 = (*(_DWORD *)(v86 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_1578;
                case 0x20:
                  v715 = (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_1578;
                case 0x27:
                  v715 = *(_DWORD *)(v86 + 80) + 1;
LABEL_1578:
                  if (v715 == 1)
                    goto LABEL_1579;
                  goto LABEL_1575;
                default:
                  goto LABEL_1575;
              }
            }
            if ((*(_DWORD *)(v86 + 20) & 0x7FFFFFF) == 3)
LABEL_1575:
              v10 = 0;
            else
LABEL_1579:
              v10 = (llvm::Loop **)v713;
LABEL_1580:
            v716 = v29[6];
            v719 = v29[5];
            v717 = v29 + 5;
            v718 = v719;
            v838 = (unint64_t)&v839.u64[1];
            v839.i64[0] = 0x400000000;
            if (v716 == v719)
            {
              v722 = 0;
              v723 = &v839.i64[1];
            }
            else
            {
              v720 = 0;
              v721 = v716;
              do
              {
                ++v720;
                v721 = *(_QWORD *)(v721 + 8);
              }
              while (v721 != v718);
              if (v720 - 1 >= 4)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v838, (uint64_t)&v839.i64[1], v720, 8);
                v725 = (__int8 *)v838;
                v724 = v839.i32[0];
              }
              else
              {
                v724 = 0;
                v725 = &v839.i8[8];
              }
              v726 = v724;
              v727 = &v725[8 * v724];
              do
              {
                v728 = v716 - 24;
                if (!v716)
                  v728 = 0;
                *(_QWORD *)v727 = v728;
                v727 += 8;
                v716 = *(_QWORD *)(v716 + 8);
              }
              while (v716 != v718);
              v723 = (uint64_t *)v838;
              v722 = v726 + v720;
            }
            v839.i32[0] = v722;
            if (v722)
            {
              v729 = 8 * v722;
              do
              {
                v730 = *v723++;
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v730 + 40) + 40, (uint64_t ***)v730);
                v731 = *(_QWORD *)(v730 + 24);
                v732 = *(_QWORD **)(v730 + 32);
                *v732 = v731;
                *(_QWORD *)(v731 + 8) = v732;
                *(_QWORD *)(v730 + 24) = 0;
                *(_QWORD *)(v730 + 32) = 0;
                v729 -= 8;
              }
              while (v729);
            }
            v733 = (_QWORD *)*v717;
            if ((_QWORD *)*v717 == v717)
            {
              v734 = 0;
            }
            else
            {
              if (v733)
                v734 = (llvm::Loop **)(v733 - 3);
              else
                v734 = 0;
              if (*((unsigned __int8 *)v734 + 16) - 29 >= 0xB)
                v734 = 0;
            }
            v736 = v10 + 5;
            v735 = (llvm::Loop **)v10[5];
            if (v735 == v10 + 5)
            {
              v737 = 0;
            }
            else
            {
              if (v735)
                v737 = v735 - 3;
              else
                v737 = 0;
              if (*((unsigned __int8 *)v737 + 16) - 29 >= 0xB)
                v737 = 0;
            }
            if (v737 == v734)
              goto LABEL_1623;
            v738 = v10[6];
            v739 = (llvm::Loop *)(v737 + 3);
            if (v738 == (llvm::Loop *)(v737 + 3))
              goto LABEL_1623;
            v740 = v734[5];
            v741 = (uint64_t *)(v734 + 3);
            *((_WORD *)v740 + 9) &= ~0x8000u;
            if (v740 == (llvm::Loop *)v10)
            {
LABEL_1622:
              v748 = *(_QWORD *)v739;
              v749 = *(_QWORD *)v738;
              *(_QWORD *)(v749 + 8) = v739;
              *(_QWORD *)v739 = v749;
              v750 = *v741;
              *(_QWORD *)(v748 + 8) = v741;
              *(_QWORD *)v738 = v750;
              *(_QWORD *)(v750 + 8) = v738;
              *v741 = v748;
LABEL_1623:
              v751 = (unint64_t *)v838;
              if (v839.i32[0])
              {
                v752 = 8 * v839.u32[0];
                do
                {
                  v753 = (_QWORD *)*v736;
                  if ((_QWORD *)*v736 == v736)
                  {
                    v755 = 0;
                  }
                  else
                  {
                    if (v753)
                      v754 = v753 - 3;
                    else
                      v754 = 0;
                    if (*((unsigned __int8 *)v754 + 16) - 29 >= 0xB)
                      v755 = 0;
                    else
                      v755 = v754;
                  }
                  v756 = *v751;
                  v757 = v755[5];
                  *(_QWORD *)(v756 + 40) = v757;
                  *(_WORD *)(v757 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v756 + 23) & 0x10) != 0)
                  {
                    v761 = *(_QWORD *)(v757 + 56);
                    if (v761)
                    {
                      v762 = *(llvm::ValueSymbolTable **)(v761 + 104);
                      if (v762)
                        llvm::ValueSymbolTable::reinsertValue(v762, (llvm::Value *)v756);
                    }
                  }
                  v759 = v755[3];
                  v758 = v755 + 3;
                  *(_QWORD *)(v756 + 24) = v759;
                  *(_QWORD *)(v756 + 32) = v758;
                  v760 = v756 + 24;
                  *(_QWORD *)(v759 + 8) = v760;
                  *v758 = v760;
                  ++v751;
                  v752 -= 8;
                }
                while (v752);
                v751 = (unint64_t *)v838;
              }
              if (v751 != &v839.u64[1])
                free(v751);
              goto LABEL_1641;
            }
            v742 = *((_QWORD *)v740 + 7);
            if (v742)
              v743 = *(llvm::ValueSymbolTable **)(v742 + 104);
            else
              v743 = 0;
            v744 = v10[7];
            if (v744)
              v745 = (llvm::ValueSymbolTable *)*((_QWORD *)v744 + 13);
            else
              v745 = 0;
            if (v743 == v745)
            {
              v746 = v738;
              do
              {
                v747 = (_QWORD *)((char *)v746 - 24);
                if (!v746)
                  v747 = 0;
                v747[5] = v740;
                v746 = (llvm::Loop *)*((_QWORD *)v746 + 1);
              }
              while (v746 != v739);
              goto LABEL_1622;
            }
            v791 = v738;
            while (1)
            {
              v763 = (llvm::Loop *)((char *)v791 - 24);
              if (!v791)
                v763 = 0;
              v795 = v763;
              v787 = *((_DWORD *)v763 + 5) & 0x10000000;
              if (v745)
              {
                if (v787)
                  break;
              }
LABEL_1684:
              *((_QWORD *)v795 + 5) = v740;
              if (v743 && v787)
                llvm::ValueSymbolTable::reinsertValue(v743, v795);
              v791 = (llvm::Loop *)*((_QWORD *)v791 + 1);
              if (v791 == v739)
                goto LABEL_1622;
            }
            v764 = ***(_QWORD ***)v763;
            v765 = *(_QWORD *)(v764 + 152);
            v766 = *(unsigned int *)(v764 + 168);
            if ((_DWORD)v766)
            {
              LODWORD(v767) = (v766 - 1) & ((v795 >> 4) ^ (v795 >> 9));
              v768 = (llvm::Value **)(v765 + 16 * v767);
              v769 = *v768;
              if (*v768 == v795)
                goto LABEL_1671;
              v770 = 1;
              while (v769 != (llvm::Value *)-4096)
              {
                v771 = v767 + v770++;
                v767 = v771 & (v766 - 1);
                v769 = *(llvm::Value **)(v765 + 16 * v767);
                if (v769 == v795)
                {
                  v768 = (llvm::Value **)(v765 + 16 * v767);
                  goto LABEL_1671;
                }
              }
            }
            v768 = (llvm::Value **)(v765 + 16 * v766);
LABEL_1671:
            v772 = *((unsigned int *)v745 + 2);
            if ((_DWORD)v772)
            {
              v773 = (size_t *)v768[1];
              v785 = (llvm::SmallPtrSetImplBase *)*((unsigned int *)v745 + 5);
              __s1a = (unsigned __int8 *)v785 + (_QWORD)v773;
              __na = *v773;
              v774 = 0;
              if (*v773)
              {
                v775 = *v773;
                v776 = __s1a;
                do
                {
                  v777 = *v776++;
                  v774 = 33 * v774 + v777;
                  --v775;
                }
                while (v775);
              }
              v797 = v772 - 1;
              v799 = *(_QWORD *)v745;
              v793 = (llvm::BasicBlock *)(*(_QWORD *)v745 + 8 * v772 + 8);
              v804 = 1;
              v778 = v774;
              while (1)
              {
                v779 = v778 & v797;
                v780 = *(_QWORD **)(v799 + 8 * v779);
                if (v780 != (_QWORD *)-8)
                {
                  if (!v780)
                    goto LABEL_1684;
                  if (*((_DWORD *)v793 + v779) == v774
                    && __na == *v780
                    && (!__na || !memcmp(__s1a, (char *)v785 + (_QWORD)v780, __na)))
                  {
                    break;
                  }
                }
                v778 = v804 + v779;
                ++v804;
              }
              *(_QWORD *)(v799 + 8 * (int)v779) = -8;
              *(int32x2_t *)((char *)v745 + 12) = vadd_s32(*(int32x2_t *)((char *)v745 + 12), (int32x2_t)0x1FFFFFFFFLL);
            }
            goto LABEL_1684;
          }
LABEL_1359:
          sub_1C4764EE4();
        }
LABEL_1358:
        abort();
      }
LABEL_1160:
      for (i4 = *(_QWORD **)(v458 + 8); i4 != *(_QWORD **)(v458 + 16); ++i4)
      {
        if (*i4 == *((_QWORD *)&v458 + 1))
        {
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(v458, *((uint64_t *)&v458 + 1));
          break;
        }
      }
      v492 = *(_QWORD **)(*((_QWORD *)&v822 + 1) + 24);
      v493 = *(_QWORD **)(*((_QWORD *)&v822 + 1) + 32);
      if (v492 != v493)
      {
        while (*v492 != (_QWORD)v458)
        {
          if (++v492 == v493)
          {
            v492 = *(_QWORD **)(*((_QWORD *)&v822 + 1) + 32);
            break;
          }
        }
      }
      *v492 = *((_QWORD *)&v458 + 1);
      goto LABEL_1170;
    }
    if (v462)
    {
      v463 = v462 - 1;
      v464 = (v462 - 1) & ((__s1 >> 4) ^ (__s1 >> 9));
      v465 = (llvm::Value **)(v461 + 16 * v464);
      v466 = *v465;
      if (*v465 == __s1)
      {
LABEL_1122:
        v465[1] = v459;
        goto LABEL_1123;
      }
      v467 = 0;
      v468 = 1;
      while (v466 != (llvm::Value *)-4096)
      {
        if (v467)
          v469 = 0;
        else
          v469 = v466 == (llvm::Value *)-8192;
        if (v469)
          v467 = v465;
        v470 = v464 + v468++;
        v464 = v470 & v463;
        v465 = (llvm::Value **)(v461 + 16 * (v470 & v463));
        v466 = *v465;
        if (*v465 == __s1)
          goto LABEL_1122;
      }
      if (v467)
        v471 = v467;
      else
        v471 = v465;
    }
    else
    {
      v471 = 0;
    }
    v465 = (llvm::Value **)sub_1C4EB6AAC(*((uint64_t *)&v822 + 1), (uint64_t)&v838, (uint64_t *)&v838, v471);
    *v465 = (llvm::Value *)v838;
    v465[1] = 0;
    goto LABEL_1122;
  }
  v9 = 0x8000000000041;
  v8 = 7;
  v6 = 0x808001C8000010;
  j = 769;
  v13 = 0x808001D0000010;
  while (1)
  {
    if (v29)
      v269 = (uint64_t)(v29 - 3);
    else
      v269 = 0;
    v270 = *(unsigned __int8 *)(v269 + 16) - 33;
    if (v270 > 0x37)
      goto LABEL_640;
    if (((1 << (*(_BYTE *)(v269 + 16) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_577;
    if (((1 << (*(_BYTE *)(v269 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v270 == 27 && (*(_WORD *)(v269 + 18) & 0x301) != 0)
        goto LABEL_577;
      goto LABEL_640;
    }
    v273 = *(_QWORD *)(v269 + 64);
    if (v273 && (*(_BYTE *)(v273 + 17) & 0x30) != 0)
      goto LABEL_640;
    v274 = *(_DWORD *)(v269 + 20);
    if (v274 < 0)
    {
      v276 = v269 - 32 * (v274 & 0x7FFFFFF);
      v279 = *(_QWORD *)(v276 - 8);
      v277 = v276 - 8;
      v278 = v279;
      if (v279)
        break;
    }
LABEL_659:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v269, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v269, 44))
    {
      goto LABEL_577;
    }
LABEL_640:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v269) & 1) != 0
      || !llvm::Instruction::willReturn((llvm::Instruction *)v269))
    {
      goto LABEL_577;
    }
    v271 = *(unsigned __int8 *)(v269 + 16) - 33;
    if (v271 <= 0x37)
    {
      if (((1 << (*(_BYTE *)(v269 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v272 = *(_QWORD *)(v269 + 64);
        if (!v272 || (*(_BYTE *)(v272 + 20) & 4) == 0 && (*(_BYTE *)(v272 + 17) & 0x10) == 0)
        {
          LODWORD(v838) = 7;
          if (sub_1C53E4BBC(v269, (__int32 *)&v838, 1uLL))
          {
            v275 = *(_QWORD *)(v269 - 32);
            if (!v275
              || *(_BYTE *)(v275 + 16)
              || *(_QWORD *)(v275 + 24) != *(_QWORD *)(v269 + 72)
              || *(_DWORD *)(v275 + 36) != 7)
            {
              goto LABEL_577;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v269, 66) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v269, 44) & 1) == 0)
          {
            goto LABEL_577;
          }
        }
      }
      else if (((1 << (*(_BYTE *)(v269 + 16) - 33)) & 0x808001C8000010) != 0
             || v271 == 28 && (*(_WORD *)(v269 + 18) & 0x301) != 0)
      {
        goto LABEL_577;
      }
    }
    v29 = (unint64_t *)v29[1];
    if (v29 == v268)
      goto LABEL_677;
  }
  v280 = -v278;
  while (1)
  {
    v281 = *(_DWORD *)(*(_QWORD *)(v277 + v280) + 8);
    v212 = v281 > 7;
    v282 = (1 << v281) & 0x83;
    if (v212 || v282 == 0)
      break;
    v280 += 16;
    if (!v280)
      goto LABEL_659;
  }
LABEL_577:
  v248 = v812;
  v249 = ****(_QWORD ****)v812;
  v13 = (uint64_t)v800;
  if (*(_QWORD *)(v249 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v249 + 72) + 48))(*(_QWORD *)(v249 + 72)))
  {
    llvm::Loop::getStartLoc(v810, &v825);
    v250 = v825;
    if ((_QWORD)v825)
    {
      v251 = *(_QWORD *)(v825 - 8 * *(unsigned int *)(v825 + 8));
      if (*(_BYTE *)v251 != 15)
        v251 = *(_QWORD *)(v251 - 8 * *(unsigned int *)(v251 + 8));
      v252 = *(_DWORD *)(v825 + 4);
      v250 = *(unsigned __int16 *)(v825 + 2);
    }
    else
    {
      v251 = 0;
      v252 = 0;
    }
    v253 = **((_QWORD **)v810 + 4);
    v254 = *(_QWORD *)(v253 + 56);
    v839.i32[0] = 10;
    v839.i8[4] = 2;
    v839.i64[1] = v254;
    v840.i64[0] = v251;
    v840.i64[1] = __PAIR64__(v250, v252);
    v841 = "loop-interchange";
    v842 = "NotTightlyNested";
    v843 = 16;
    LOBYTE(v844) = 0;
    LOBYTE(v845) = 0;
    v846 = (void **)&v848;
    v847 = 0x400000000;
    v856 = 0;
    v857 = -1;
    v858 = v253;
    v838 = (unint64_t)&off_1E814E538;
    v861 = "Cannot interchange loops because they are not tightly nested.";
    v862 = 61;
    sub_1C53B17B4((uint64_t)&v846, (const void **)&v861);
    sub_1C61998EC((uint64_t)&v861, (uint64_t)&v838);
    v861 = (char *)&off_1E814E538;
    v838 = (unint64_t)&off_1E814E790;
    v255 = v846;
    if ((_DWORD)v847)
    {
      v256 = (unint64_t)v847 << 6;
      do
      {
        v257 = (void **)((char *)v255 + v256);
        if (*((char *)v255 + v256 - 17) < 0)
          operator delete(*(v257 - 5));
        if (*((char *)v257 - 41) < 0)
          operator delete(*(v257 - 8));
        v256 -= 64;
      }
      while (v256);
      v255 = v846;
    }
    if (v255 != (void **)&v848)
      free(v255);
    if ((_QWORD)v825)
      llvm::MetadataTracking::untrack((uint64_t)&v825, (unsigned __int8 *)v825);
    llvm::OptimizationRemarkEmitter::emit(v248, (llvm::DiagnosticInfoOptimizationBase *)&v861);
    v861 = (char *)&off_1E814E790;
    v110 = v864;
    if (v865)
    {
      v258 = (unint64_t)v865 << 6;
      do
      {
        v259 = (void **)&v110[v258];
        if (v110[v258 - 17] < 0)
          operator delete(*(v259 - 5));
        if (*((char *)v259 - 41) < 0)
          operator delete(*(v259 - 8));
        v258 -= 64;
      }
      while (v258);
      goto LABEL_222;
    }
LABEL_223:
    if (v110 != (char *)v866)
      free(v110);
  }
LABEL_24:
  v27 = 0;
LABEL_25:
  if (v818 != (void *)v13)
    free(v818);
  if (v814 != v813)
    free(v814);
  return v27;
}

uint64_t sub_1C5B758C4(uint64_t *a1, const llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t LoopLatch;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  int32x2_t ****v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int32x2_t *****v39;
  int32x2_t ****v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int32x2_t ****v46;
  int32x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int32x2_t *****v52;
  int32x2_t ****v53;
  int v54;
  int v55;
  int isReductionPHI;
  llvm::SmallPtrSetImplBase *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int16 v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[72];
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int16 v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[72];
  uint64_t v78;
  unint64_t *v79;
  int32x2_t ****v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD v87[4];

  v87[2] = *MEMORY[0x1E0C80C00];
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
  if (result)
  {
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
    if (result)
    {
      if (*(_QWORD *)(**((_QWORD **)a2 + 4) + 40) == **((_QWORD **)a2 + 4) + 40)
        return 1;
      v9 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 48);
      v10 = v9 - 24;
      v11 = v9 ? v9 - 24 : 0;
      result = 1;
      if (v9)
      {
        if (*(_BYTE *)(v11 + 16) == 83)
        {
          v57 = (llvm::SmallPtrSetImplBase *)(a1 + 4);
          v12 = 0uLL;
          while (1)
          {
            v59 = v12;
            v60 = v12;
            v61 = v12;
            v62 = 0;
            v58 = 6;
            v63 = v67;
            v64 = v67;
            v65 = 8;
            v66 = 0;
            v79 = 0;
            v80 = 0;
            v81 = 0;
            v83 = 0;
            v84 = 0;
            v82 = 0;
            v78 = 6;
            v85 = v87;
            v86 = 0x200000000;
            if (llvm::InductionDescriptor::isInductionPHI(v10, a2, a1[2], (uint64_t)&v78, 0, 0))
            {
              v13 = *(unsigned int *)(a3 + 8);
              if (v13 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13 + 1, 8);
                v13 = *(unsigned int *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v10;
              ++*(_DWORD *)(a3 + 8);
            }
            else if (a4)
            {
              LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
              v18 = *(_DWORD *)(v10 + 20);
              v19 = v18 & 0x7FFFFFF;
              if ((v18 & 0x7FFFFFF) != 0)
              {
                v20 = 0;
                while (1)
                {
                  v21 = v10 - 32 * v19;
                  if ((v18 & 0x40000000) != 0)
                    v21 = *(_QWORD *)(v10 - 8);
                  if (*(_QWORD *)(v21 + 32 * *(unsigned int *)(v10 + 60) + 8 * v20) == LoopLatch)
                    break;
                  if (v19 == ++v20)
                    goto LABEL_25;
                }
              }
              else
              {
LABEL_25:
                LODWORD(v20) = -1;
              }
              if ((v18 & 0x40000000) != 0)
                v22 = *(_QWORD *)(v10 - 8);
              else
                v22 = v10 - 32 * v19;
              v23 = sub_1C5B75E9C(*(_QWORD *)(v22 + 32 * v20));
              if (*(unsigned __int8 *)(v23 + 16) < 0x15u)
                goto LABEL_70;
              v24 = *(_QWORD *)(v23 + 8);
              if (!v24)
                goto LABEL_70;
              while (1)
              {
                v25 = *(_QWORD *)(v24 + 24);
                if (v25)
                {
                  if (*(_BYTE *)(v25 + 16) == 83 && (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) != 1)
                    break;
                }
                v24 = *(_QWORD *)(v24 + 8);
                if (!v24)
                  goto LABEL_70;
              }
              v69 = 0uLL;
              v70 = 0uLL;
              v71 = 0uLL;
              v72 = 0;
              v68 = 6;
              v73 = v77;
              v74 = v77;
              v75 = 8;
              v76 = 0;
              isReductionPHI = llvm::RecurrenceDescriptor::isReductionPHI(v25, a4, &v68, 0, 0, 0);
              v26 = v71;
              sub_1C6194908((llvm::ValueHandleBase *)&v68);
              if (!isReductionPHI || v26)
                goto LABEL_70;
              v27 = *(_DWORD *)(v25 + 20);
              if ((v27 & 0x40000000) != 0)
              {
                v29 = *(char **)(v25 - 8);
                v28 = v27 & 0x7FFFFFF;
              }
              else
              {
                v28 = v27 & 0x7FFFFFF;
                v29 = (char *)(v25 - 32 * v28);
              }
              v30 = v29;
              if (v28)
              {
                v31 = 32 * v28;
                v30 = v29;
                while (*(_QWORD *)v30 != v10)
                {
                  v30 += 32;
                  v31 -= 32;
                  if (!v31)
                  {
                    v30 = &v29[32 * v28];
                    break;
                  }
                }
              }
              if (v28 == (v30 - v29) >> 5)
              {
LABEL_70:
                if (v85 != v87)
                  free(v85);
                if (v80 && v80 != (int32x2_t ****)-8192 && v80 != (int32x2_t ****)-4096)
                {
                  v45 = v78 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF8) = v79;
                  if (v79)
                  {
                    *v79 = *v79 & 7 | v45;
                  }
                  else
                  {
                    v46 = v80;
                    v47 = ***v80;
                    v48 = (unint64_t)v47[303];
                    if (v48 <= v45)
                    {
                      v49 = v47[305].u32[0];
                      if (v48 + 16 * v49 > v45)
                      {
                        v50 = v49 - 1;
                        LODWORD(v51) = v50 & ((v80 >> 4) ^ (v80 >> 9));
                        v52 = (int32x2_t *****)(v48 + 16 * v51);
                        v53 = *v52;
                        if (v80 == *v52)
                        {
LABEL_83:
                          *v52 = (int32x2_t ****)-8192;
                          v47[304] = vadd_s32(v47[304], (int32x2_t)0x1FFFFFFFFLL);
                          v46 = v80;
                        }
                        else
                        {
                          v54 = 1;
                          while (v53 != (int32x2_t ****)-4096)
                          {
                            v55 = v51 + v54++;
                            v51 = v55 & v50;
                            v53 = *(int32x2_t *****)(v48 + 16 * v51);
                            if (v80 == v53)
                            {
                              v52 = (int32x2_t *****)(v48 + 16 * v51);
                              goto LABEL_83;
                            }
                          }
                        }
                        *((_BYTE *)v46 + 17) &= ~1u;
                      }
                    }
                  }
                }
                sub_1C6194908((llvm::ValueHandleBase *)&v58);
                return 0;
              }
              sub_1C4774094(v57, v10);
              sub_1C4774094(v57, v25);
            }
            else
            {
              v14 = sub_1C477672C((uint64_t)v57, v10);
              v15 = a1[5];
              v16 = 48;
              if (v15 == a1[4])
                v16 = 52;
              if (v14 == (_QWORD *)(v15 + 8 * *(unsigned int *)((char *)a1 + v16)))
                goto LABEL_70;
            }
            if (v85 != v87)
              free(v85);
            if (v80 && v80 != (int32x2_t ****)-8192 && v80 != (int32x2_t ****)-4096)
            {
              v32 = v78 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF8) = v79;
              if (v79)
              {
                *v79 = *v79 & 7 | v32;
              }
              else
              {
                v33 = v80;
                v34 = ***v80;
                v35 = (unint64_t)v34[303];
                if (v35 <= v32)
                {
                  v36 = v34[305].u32[0];
                  if (v35 + 16 * v36 > v32)
                  {
                    v37 = v36 - 1;
                    LODWORD(v38) = v37 & ((v80 >> 4) ^ (v80 >> 9));
                    v39 = (int32x2_t *****)(v35 + 16 * v38);
                    v40 = *v39;
                    if (v80 == *v39)
                    {
LABEL_60:
                      *v39 = (int32x2_t ****)-8192;
                      v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                      v33 = v80;
                    }
                    else
                    {
                      v41 = 1;
                      while (v40 != (int32x2_t ****)-4096)
                      {
                        v42 = v38 + v41++;
                        v38 = v42 & v37;
                        v40 = *(int32x2_t *****)(v35 + 16 * v38);
                        if (v80 == v40)
                        {
                          v39 = (int32x2_t *****)(v35 + 16 * v38);
                          goto LABEL_60;
                        }
                      }
                    }
                    *((_BYTE *)v33 + 17) &= ~1u;
                  }
                }
              }
            }
            sub_1C6194908((llvm::ValueHandleBase *)&v58);
            v43 = *(_QWORD *)(v10 + 32);
            v10 = v43 - 24;
            if (v43)
              v44 = v43 - 24;
            else
              v44 = 0;
            result = 1;
            if (v43)
            {
              v12 = 0uLL;
              if (*(_BYTE *)(v44 + 16) == 83)
                continue;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5B75E9C(uint64_t result)
{
  int v1;
  uint64_t *v2;

  if (result)
  {
    do
    {
      if (*(_BYTE *)(result + 16) != 83)
        break;
      v1 = *(_DWORD *)(result + 20);
      if ((v1 & 0x7FFFFFF) != 1)
        break;
      v2 = (v1 & 0x40000000) != 0 ? *(uint64_t **)(result - 8) : (uint64_t *)(result - 32);
      result = *v2;
    }
    while (*v2);
  }
  return result;
}

void sub_1C5B75EDC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5B75EF0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8195958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5B75F28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8195958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5B75F48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(v4 + 96);
  v6 = *(unsigned int *)(v4 + 104);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = v5;
    while (*v8 != v3)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        v8 = &v5[v6];
        break;
      }
    }
  }
  else
  {
    v8 = v5;
  }
  if (v6 != v8 - v5)
    return 1;
  v9 = *(unsigned __int8 *)(v3 + 16);
  if (v9 < 0x15)
    return 1;
  if (v9 < 0x1C)
    return 0;
  if (v9 - 66 <= 0xC)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v3 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(uint64_t **)(v3 - 8);
    else
      v13 = (uint64_t *)(v3 - 32 * (v12 & 0x7FFFFFF));
    v17 = *v13;
    goto LABEL_21;
  }
  if (v9 - 41 > 0x11)
    return 0;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_DWORD *)(v3 + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(uint64_t **)(v3 - 8);
  else
    v16 = (uint64_t *)(v3 - 32 * (v15 & 0x7FFFFFF));
  v22 = *v16;
  v19 = *(_QWORD *)(v14 + 24);
  if (!v19)
  {
LABEL_30:
    sub_1C485C2F0();
    return sub_1C5B7609C();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v22);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v20 = *(_DWORD *)(v3 + 20);
    if ((v20 & 0x40000000) != 0)
      v21 = *(_QWORD *)(v3 - 8);
    else
      v21 = v3 - 32 * (v20 & 0x7FFFFFF);
    v17 = *(_QWORD *)(v21 + 32);
LABEL_21:
    v22 = v17;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18)
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v22);
    goto LABEL_30;
  }
  return result;
}

void sub_1C5B7609C(unsigned int **a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  llvm::ValueSymbolTable *v54;
  uint64_t v55;

  v1 = a1[1];
  v2 = **a1;
  if (v1[12] > v2)
  {
    v4 = a1[2];
    while (1)
    {
      llvm::Instruction::clone(*(llvm::Instruction **)(*((_QWORD *)v1 + 5) + 8 * v2));
      v6 = (_QWORD *)v5;
      v7 = a1[4];
      v8 = v7 + 10;
      for (i = *((_QWORD *)v7 + 6); (unsigned int *)i != v8; i = *(_QWORD *)(i + 8))
      {
        v10 = i - 24;
        if (i)
          v11 = i - 24;
        else
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) != 83)
          goto LABEL_11;
      }
      v10 = 0;
LABEL_11:
      v12 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v5 + 40) = v12;
      *(_WORD *)(v12 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
      {
        v53 = *(_QWORD *)(v12 + 56);
        if (v53)
        {
          v54 = *(llvm::ValueSymbolTable **)(v53 + 104);
          if (v54)
            llvm::ValueSymbolTable::reinsertValue(v54, (llvm::Value *)v6);
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      v13 = (_QWORD *)(v10 + 24);
      v6[3] = v14;
      v6[4] = v13;
      *(_QWORD *)(v14 + 8) = v6 + 3;
      *v13 = v6 + 3;
      v15 = *a1;
      v1 = a1[1];
      v16 = **a1;
      v17 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 8 * v16);
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = v6 + 1;
        do
        {
          v20 = *(_QWORD *)(v18 + 8);
          v21 = *(_QWORD *)(v18 + 24);
          v22 = *((_QWORD *)v4 + 1);
          v23 = sub_1C477672C(v22 + 56, *(_QWORD *)(v21 + 40));
          v24 = *(_QWORD *)(v22 + 64);
          v25 = 72;
          if (v24 == *(_QWORD *)(v22 + 56))
            v25 = 76;
          if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)(v22 + v25)) || *(unsigned int **)(v21 + 40) == a1[4])
            goto LABEL_65;
          v26 = a1[3];
          v27 = *(_QWORD **)v26;
          v28 = v26[2];
          if ((_DWORD)v28)
          {
            v29 = 8 * v28;
            v30 = v27;
            while (*v30 != v21)
            {
              ++v30;
              v29 -= 8;
              if (!v29)
              {
                v30 = &v27[v28];
                break;
              }
            }
          }
          else
          {
            v30 = v27;
          }
          if (v28 != v30 - v27)
          {
LABEL_65:
            if (*(_QWORD *)v18)
            {
              **(_QWORD **)(v18 + 16) = *(_QWORD *)(v18 + 8);
              v31 = *(_QWORD *)(v18 + 8);
              if (v31)
                *(_QWORD *)(v31 + 16) = *(_QWORD *)(v18 + 16);
            }
            *(_QWORD *)v18 = v6;
            v32 = v6[1];
            *(_QWORD *)(v18 + 8) = v32;
            if (v32)
              *(_QWORD *)(v32 + 16) = v18 + 8;
            *(_QWORD *)(v18 + 16) = v19;
            *v19 = v18;
          }
          v18 = v20;
        }
        while (v20);
        v15 = *a1;
        v1 = a1[1];
        v16 = **a1;
        v17 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 8 * v16);
      }
      v33 = *(_DWORD *)(v17 + 20);
      if ((v33 & 0x40000000) != 0)
      {
        v35 = *(uint64_t **)(v17 - 8);
        v34 = v33 & 0x7FFFFFF;
      }
      else
      {
        v34 = v33 & 0x7FFFFFF;
        v35 = (uint64_t *)(v17 - 32 * v34);
      }
      v36 = &v35[4 * v34];
      if (v34)
        break;
LABEL_58:
      v2 = v16 + 1;
      *v15 = v2;
      if (v1[12] <= v2)
        return;
    }
    while (1)
    {
      v37 = *v35;
      if (*(unsigned __int8 *)(*v35 + 16) <= 0x1Bu)
        v37 = 0;
      v55 = v37;
      if (v37)
        break;
LABEL_56:
      v35 += 4;
      if (v35 == v36)
      {
        v15 = *a1;
        v1 = a1[1];
        LODWORD(v16) = **a1;
        goto LABEL_58;
      }
    }
    v38 = (uint64_t *)*((_QWORD *)v4 + 3);
    v39 = *((_DWORD *)v38 + 4);
    if (v39)
    {
      v40 = *(_QWORD *)(v37 + 40);
      v41 = *v38;
      v42 = v39 - 1;
      v43 = ((v40 >> 4) ^ (v40 >> 9)) & (v39 - 1);
      v44 = *(_QWORD *)(v41 + 16 * v43);
      if (v40 == v44)
      {
LABEL_45:
        v47 = *(_QWORD *)(v41 + 16 * v43 + 8);
        goto LABEL_47;
      }
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v43 + v45++;
        v43 = v46 & v42;
        v44 = *(_QWORD *)(v41 + 16 * v43);
        if (v40 == v44)
          goto LABEL_45;
      }
    }
    v47 = 0;
LABEL_47:
    if (v47 == *((_QWORD *)v4 + 1))
    {
      v48 = a1[3];
      v49 = *(_QWORD **)v48;
      v50 = v48[2];
      if ((_DWORD)v50)
      {
        v51 = 8 * v50;
        v52 = v49;
        while (*v52 != v37)
        {
          ++v52;
          v51 -= 8;
          if (!v51)
          {
            v52 = &v49[v50];
            break;
          }
        }
      }
      else
      {
        v52 = v49;
      }
      if (v50 == v52 - v49)
        sub_1C6280544((uint64_t)a1[1], &v55);
    }
    goto LABEL_56;
  }
}

void sub_1C5B763D8(uint64_t a1, unint64_t a2, uint64_t a3, char **a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;

  v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0)
  {
    v9 = *(_QWORD *)(a1 - 8);
    v8 = v7 & 0x7FFFFFF;
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
      return;
  }
  else
  {
    v8 = v7 & 0x7FFFFFF;
    v9 = a1 - 32 * v8;
    if ((v7 & 0x7FFFFFF) == 0)
      return;
  }
  v10 = 0;
  v11 = (_QWORD *)(a3 + 8);
  v12 = 32 * v8;
  v13 = (_QWORD **)(v9 + 8);
  do
  {
    v14 = v13 - 1;
    if (*(v13 - 1) == (_QWORD *)a2)
    {
      if (a2)
      {
        *v13[1] = *v13;
        if (*v13)
          (*v13)[2] = v13[1];
      }
      *v14 = a3;
      if (a3)
      {
        v15 = (_QWORD *)*v11;
        *v13 = (_QWORD *)*v11;
        if (v15)
          v15[2] = v13;
        v13[1] = v11;
        *v11 = v14;
      }
      v10 = 1;
    }
    v13 += 4;
    v12 -= 32;
  }
  while (v12);
  if ((v10 & 1) != 0)
  {
    v16 = *(_QWORD *)(a1 + 40);
    v17 = a3 & 0xFFFFFFFFFFFFFFFBLL;
    v19 = a4[1];
    v18 = (unint64_t)a4[2];
    if ((unint64_t)v19 >= v18)
    {
      v21 = *a4;
      v22 = (v19 - *a4) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        goto LABEL_54;
      v24 = v18 - (_QWORD)v21;
      if (v24 >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 60)
          goto LABEL_55;
        v26 = (char *)operator new(16 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[16 * v22];
      *(_QWORD *)v27 = v16;
      *((_QWORD *)v27 + 1) = v17;
      v20 = v27 + 16;
      if (v19 != v21)
      {
        do
        {
          *((_OWORD *)v27 - 1) = *((_OWORD *)v19 - 1);
          v27 -= 16;
          v19 -= 16;
        }
        while (v19 != v21);
        v19 = *a4;
      }
      *a4 = v27;
      a4[1] = v20;
      a4[2] = &v26[16 * v25];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v19 = v16;
      *((_QWORD *)v19 + 1) = v17;
      v20 = v19 + 16;
    }
    a4[1] = v20;
    v28 = *(_QWORD *)(a1 + 40);
    v29 = a2 | 4;
    v30 = (unint64_t)a4[2];
    if ((unint64_t)v20 < v30)
    {
      *(_QWORD *)v20 = v28;
      *((_QWORD *)v20 + 1) = v29;
      v31 = v20 + 16;
      goto LABEL_52;
    }
    v32 = *a4;
    v33 = (v20 - *a4) >> 4;
    v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 60))
    {
      v35 = v30 - (_QWORD)v32;
      if (v35 >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (!v36)
      {
        v37 = 0;
        goto LABEL_46;
      }
      if (!(v36 >> 60))
      {
        v37 = (char *)operator new(16 * v36);
LABEL_46:
        v38 = &v37[16 * v33];
        v39 = &v37[16 * v36];
        *(_QWORD *)v38 = v28;
        *((_QWORD *)v38 + 1) = v29;
        v31 = v38 + 16;
        if (v20 == v32)
        {
          *a4 = v38;
          a4[1] = v31;
          a4[2] = v39;
        }
        else
        {
          do
          {
            *((_OWORD *)v38 - 1) = *((_OWORD *)v20 - 1);
            v38 -= 16;
            v20 -= 16;
          }
          while (v20 != v32);
          v20 = *a4;
          *a4 = v38;
          a4[1] = v31;
          a4[2] = v39;
          if (!v20)
            goto LABEL_52;
        }
        operator delete(v20);
LABEL_52:
        a4[1] = v31;
        return;
      }
LABEL_55:
      sub_1C4764EE4();
    }
LABEL_54:
    abort();
  }
}

__n128 sub_1C5B7664C(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81F378, "loop-interchange-threshold", 0x1AuLL);
  v6 = *a1;
  dword_1ED81F3F8 = **a1;
  byte_1ED81F40C = 1;
  dword_1ED81F408 = *v6;
  word_1ED81F382 = (32 * (*a2 & 3)) | word_1ED81F382 & 0xFF9F;
  result = *a3;
  xmmword_1ED81F398 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5B766D0()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Interchange if you gain more than this number";
  v1.n128_u64[1] = 45;
  sub_1C631B584(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED81F378, &dword_1C475E000);
}

uint64_t Flatten(uint64_t a1, llvm::DominatorTree *a2, int32x2_t *a3, int32x2_t *a4, const llvm::DataLayout *a5, _QWORD *a6, uint64_t a7, llvm::MemorySSAUpdater *a8)
{
  uint64_t v8;
  uint64_t ***v10;
  int v11;
  llvm::Loop ***v12;
  llvm::Loop ***v13;
  llvm::Loop **v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  llvm::Type *v26;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v28;
  int v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  llvm::AssumptionCache *v42;
  uint64_t v43;
  unsigned int v44;
  const llvm::Loop *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  const llvm::Function *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  void **v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Value *v83;
  llvm::Value *v84;
  uint64_t LoopLatch;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _DWORD *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  llvm::Value **v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Value ***v109;
  uint64_t v110;
  llvm::BasicBlock *ExitBlock;
  llvm::BasicBlock *ExitingBlock;
  _QWORD *v113;
  uint64_t ***v114;
  uint64_t ***v115;
  uint64_t **v116;
  uint64_t **v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  llvm::ValueAsMetadata *v128;
  llvm::Value *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  llvm::Instruction *v133;
  uint64_t ***v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t ****v141;
  uint64_t ***v142;
  int v143;
  int v144;
  _DWORD *v145;
  _DWORD *v146;
  int v147;
  uint64_t ***v148;
  uint64_t v149;
  unsigned __int8 v150;
  unsigned __int8 *v151;
  unint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 v154;
  unsigned int v155;
  BOOL v156;
  unsigned __int8 v157;
  unsigned __int8 *v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 v161;
  unsigned int v162;
  BOOL v163;
  llvm::Loop ***v170;
  int v171;
  llvm::Loop *v172;
  llvm::Instruction *v173;
  llvm::Value *v174[2];
  __int128 v175;
  char *v176;
  char *v177;
  uint64_t v178;
  int v179;
  _OWORD v180[3];
  __int128 v181;
  char *v182;
  char *v183;
  uint64_t v184;
  int v185;
  _BYTE v186[32];
  char v187;
  __int128 v188;
  __int128 v189;
  char v190;
  __int128 v191;
  char v192;
  uint64_t v193;
  char *v194[2];
  uint64_t *v195;
  __int16 v196;
  void *v197;
  int v198;
  char v199;
  _QWORD v200[2];
  int v201;
  int v202;
  const char *v203;
  const char *v204;
  uint64_t v205;
  char v206;
  char v207;
  void *v208;
  uint64_t v209;
  _BYTE v210[260];
  int v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v8)
  {
    v10 = (uint64_t ***)a4;
    v11 = 0;
    v12 = *(llvm::Loop ****)(a1 + 8);
    v13 = &v12[v8];
    v170 = v13;
    while (1)
    {
      v14 = *v12;
      if (**v12)
        break;
LABEL_102:
      if (++v12 == v13)
        return v11 & 1;
    }
    v172 = **v12;
    v173 = (llvm::Instruction *)v14;
    *(_OWORD *)v174 = 0u;
    v175 = 0u;
    v176 = (char *)v180;
    v177 = (char *)v180;
    v178 = 4;
    v179 = 0;
    v180[2] = 0u;
    v181 = 0u;
    v182 = v186;
    v183 = v186;
    v184 = 4;
    v185 = 0;
    v187 = 0;
    v188 = 0uLL;
    v15 = 0;
    if (!sub_1C5B779BC((uint64_t)&v172, (uint64_t)v10, a6))
    {
LABEL_97:
      if (v183 != v182)
        free(v183);
      if (v177 != v176)
        free(v177);
      v11 |= v15;
      goto LABEL_102;
    }
    v171 = v11;
    if (!byte_1ED81F658)
      goto LABEL_28;
    v16 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v173 + 4) + 56) + 40);
    v17 = *(unsigned __int8 **)(v16 + 304);
    v18 = *(_QWORD *)(v16 + 312);
    v19 = v17;
    if (v18 >= 2)
    {
      v151 = v17 + 1;
      v150 = *v17;
      v152 = v18 - 1;
      v19 = *(unsigned __int8 **)(v16 + 304);
      v153 = v17 + 1;
      do
      {
        v155 = *v153++;
        v154 = v155;
        v156 = v150 >= v155;
        if (v150 <= v155)
          v150 = v154;
        if (!v156)
          v19 = v151;
        v151 = v153;
        --v152;
      }
      while (v152);
    }
    v20 = &v17[v18];
    if (v19 == &v17[v18])
      v21 = 0;
    else
      v21 = *v19;
    if (v18 >= 2)
    {
      v158 = v17 + 1;
      v157 = *v17;
      v159 = v18 - 1;
      v160 = v17 + 1;
      do
      {
        v162 = *v160++;
        v161 = v162;
        v163 = v157 >= v162;
        if (v157 <= v162)
          v157 = v161;
        if (!v163)
          v17 = v158;
        v158 = v160;
        --v159;
      }
      while (v159);
    }
    v22 = *(_QWORD *)v174[0];
    v23 = *(_QWORD *)v174[1];
    if (v17 == v20 || (v24 = *v17) == 0)
    {
      v26 = 0;
      goto LABEL_21;
    }
    v25 = *(_QWORD **)v16;
    LODWORD(v197) = v24;
    if (v24 <= 63)
    {
      if (v24 <= 31)
      {
        switch(v24)
        {
          case 16:
            v26 = (llvm::Type *)(*v25 + 1936);
            goto LABEL_21;
          case 8:
            v26 = (llvm::Type *)(*v25 + 1912);
            goto LABEL_21;
          case 1:
            v26 = (llvm::Type *)(*v25 + 1888);
            goto LABEL_21;
        }
      }
      else if (v24 == 32)
      {
        v26 = (llvm::Type *)(*v25 + 1960);
        goto LABEL_21;
      }
    }
    else
    {
      if (v24 == 64)
      {
        v26 = (llvm::Type *)(*v25 + 1984);
        goto LABEL_21;
      }
      if (v24 == 128)
      {
        v26 = (llvm::Type *)(*v25 + 2008);
        goto LABEL_21;
      }
    }
    v145 = sub_1C5270984(*v25 + 2168, &v197);
    v26 = (llvm::Type *)*((_QWORD *)v145 + 1);
    if (!v26)
    {
      v146 = v145;
      v26 = (llvm::Type *)sub_1C484358C(*v25 + 2040, 24, 3);
      v147 = (int)v197;
      *(_QWORD *)v26 = v25;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 1) = (v147 << 8) | 0xDu;
      *((_QWORD *)v146 + 1) = v26;
    }
LABEL_21:
    if (v22 == v23)
    {
      if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12)
        v22 = **(_QWORD **)(v22 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
      if (v21 > PrimitiveSizeInBits)
      {
        v28 = v26;
        if ((*((_DWORD *)v26 + 2) & 0xFE) == 0x12)
          v28 = (llvm::Type *)**((_QWORD **)v26 + 2);
        if (llvm::Type::getPrimitiveSizeInBits(v28) >= 2 * PrimitiveSizeInBits)
        {
          sub_1C50D02DC((uint64_t)&v197, v10, v16 + 272, (uint64_t)"loopflatten", 1);
          v193 = 0;
          v194[0] = (char *)&v195;
          v194[1] = (char *)0x400000000;
          *(llvm::Value **)&v191 = v174[0];
          *((_QWORD *)&v191 + 1) = v26;
          v192 = 0;
          if (!llvm::createWideIV(&v191, (uint64_t)a3, (llvm::ScalarEvolution *)v10, (llvm::SCEVExpander *)&v197, a2, (unsigned int *)v194, (_DWORD *)&v193 + 1, &v193, 1, 1))goto LABEL_47;
          if ((llvm::RecursivelyDeleteDeadPHINode((llvm::Instruction *)v191, 0, 0) & 1) == 0)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v182, (uint64_t)v174[0]);
          *(llvm::Value **)&v189 = v174[1];
          *((_QWORD *)&v189 + 1) = v26;
          v190 = 0;
          if (llvm::createWideIV(&v189, (uint64_t)a3, (llvm::ScalarEvolution *)v10, (llvm::SCEVExpander *)&v197, a2, (unsigned int *)v194, (_DWORD *)&v193 + 1, &v193, 1, 1))
          {
            llvm::RecursivelyDeleteDeadPHINode((llvm::Instruction *)v189, 0, 0);
            v187 = 1;
            v188 = *(_OWORD *)v174;
            v29 = sub_1C5B779BC((uint64_t)&v172, (uint64_t)v10, a6);
          }
          else
          {
LABEL_47:
            v29 = 0;
          }
          sub_1C5B78D64(v194);
          sub_1C50D05E0((uint64_t)&v197);
LABEL_29:
          if (v187 && !v29)
          {
LABEL_31:
            v15 = 1;
LABEL_96:
            v11 = v171;
            v13 = v170;
            goto LABEL_97;
          }
          v30 = a6;
          if ((v29 & 1) == 0 && !byte_1ED81F598)
          {
            v31 = v175;
            v32 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v172 + 4) + 56) + 40);
            result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v172);
            if (!result)
              goto LABEL_41;
            v34 = *(_QWORD *)(result + 40);
            if (v34 == result + 40)
              goto LABEL_41;
            if (v34)
              v35 = v34 - 24;
            else
              v35 = 0;
            v36 = *(unsigned __int8 *)(v35 + 16);
            v37 = v36 - 29;
            if (v36 != 30)
            {
              v38 = 0;
              switch(v37)
              {
                case 0:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                  goto LABEL_53;
                case 1:
LABEL_264:
                  __break(1u);
                  return result;
                case 2:
                  v39 = (*(_DWORD *)(v35 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_51;
                case 3:
                  v39 = (*(_DWORD *)(v35 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_51;
                case 10:
                  v39 = *(_DWORD *)(v35 + 80) + 1;
LABEL_51:
                  if (v39 == 1)
                    goto LABEL_52;
                  goto LABEL_41;
                default:
                  goto LABEL_41;
              }
            }
            if ((*(_DWORD *)(v35 + 20) & 0x7FFFFFF) == 3)
LABEL_41:
              v38 = 0;
            else
LABEL_52:
              v38 = result;
LABEL_53:
            v40 = *(_QWORD *)(v38 + 40);
            if (v40 == v38 + 40)
            {
              v42 = 0;
            }
            else
            {
              if (v40)
                v41 = (unsigned __int8 *)(v40 - 24);
              else
                v41 = 0;
              if (v41[16] - 29 >= 0xB)
                v42 = 0;
              else
                v42 = (llvm::AssumptionCache *)v41;
            }
            v43 = v32 + 272;
            v44 = llvm::computeOverflowForUnsignedMul((llvm *)v31, *((const llvm::Value **)&v31 + 1), (const llvm::Value *)(v32 + 272), a5, v42, a2, (const llvm::DominatorTree *)1);
            if (v44 == 2)
            {
              if (v177 == v176)
                v46 = (uint64_t *)((char *)&v178 + 4);
              else
                v46 = &v178;
              v47 = *(unsigned int *)v46;
              if ((_DWORD)v47)
              {
                v48 = 8 * v47;
                v49 = v177;
                v11 = v171;
                v13 = v170;
                while (*(_QWORD *)v49 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v49 += 8;
                  v48 -= 8;
                  if (!v48)
                  {
                    v15 = 0;
                    v10 = (uint64_t ***)a4;
                    goto LABEL_97;
                  }
                }
              }
              else
              {
                v49 = v177;
              }
              v50 = &v177[8 * v47];
              if (v49 != v50)
              {
                v51 = *(_QWORD **)v49;
LABEL_75:
                v52 = v51[1];
                if (v52)
                {
                  while (1)
                  {
                    v53 = *(_QWORD *)(v52 + 24);
                    if (v53)
                    {
                      if (*(_BYTE *)(v53 + 16) == 62)
                      {
                        v54 = *(_QWORD *)(v53 + 8);
                        if (v54)
                          break;
                      }
                    }
LABEL_89:
                    v52 = *(_QWORD *)(v52 + 8);
                    if (!v52)
                      goto LABEL_90;
                  }
                  while (1)
                  {
                    v55 = *(_QWORD *)(v54 + 24);
                    v56 = *(unsigned __int8 *)(v55 + 16);
                    if (v56 == 60
                      || v56 == 61
                      && ((v57 = *(_DWORD *)(v55 + 20), (v57 & 0x40000000) != 0)
                        ? (v58 = *(_QWORD *)(v55 - 8))
                        : (v58 = v55 - 32 * (v57 & 0x7FFFFFF)),
                          v53 == *(_QWORD *)(v58 + 32)))
                    {
                      if (llvm::isGuaranteedToExecuteForEveryIteration((llvm *)v55, v173, v45))
                      {
                        if ((*(_BYTE *)(v53 + 17) & 2) != 0)
                        {
                          v59 = *(_DWORD *)(*v51 + 8);
                          if (llvm::DataLayout::getPointerTypeSizeInBits(v43, *(_QWORD *)v53) <= v59 >> 8)
                            goto LABEL_104;
                        }
                      }
                    }
                    v54 = *(_QWORD *)(v54 + 8);
                    if (!v54)
                      goto LABEL_89;
                  }
                }
LABEL_90:
                v60 = (unint64_t *)(v49 + 8);
                a6 = v30;
                while (v60 != (unint64_t *)v50)
                {
                  v61 = *v60++;
                  v51 = (_QWORD *)v61;
                  if (v61 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v49 = (char *)(v60 - 1);
                    goto LABEL_75;
                  }
                }
              }
              v15 = 0;
            }
            else
            {
              if (v44 >= 3)
                goto LABEL_104;
              v15 = 0;
            }
            v10 = (uint64_t ***)a4;
            goto LABEL_96;
          }
LABEL_104:
          v62 = *(const llvm::Function **)(**((_QWORD **)v172 + 4) + 56);
          llvm::Loop::getStartLoc(v173, v194);
          if (v194[0])
          {
            v63 = *(_QWORD *)&v194[0][-8 * *((unsigned int *)v194[0] + 2)];
            if (*(_BYTE *)v63 != 15)
              v63 = *(_QWORD *)(v63 - 8 * *(unsigned int *)(v63 + 8));
            v64 = *((_DWORD *)v194[0] + 1);
            v65 = *((unsigned __int16 *)v194[0] + 1);
          }
          else
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
          }
          v66 = **((_QWORD **)v173 + 4);
          v67 = *(_QWORD *)(v66 + 56);
          v198 = 9;
          v199 = 2;
          v200[0] = v67;
          v200[1] = v63;
          v201 = v64;
          v202 = v65;
          v203 = "loop-flatten";
          v204 = "Flattened";
          v205 = 9;
          v206 = 0;
          v207 = 0;
          v208 = v210;
          v209 = 0x400000000;
          v210[256] = 0;
          v211 = -1;
          v212 = v66;
          v197 = &off_1E814E500;
          if (v194[0])
            llvm::MetadataTracking::untrack((uint64_t)v194, (unsigned __int8 *)v194[0]);
          llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v194, v62);
          *(_QWORD *)&v191 = "Flattened into outer loop";
          *((_QWORD *)&v191 + 1) = 25;
          sub_1C53B17B4((uint64_t)&v208, (const void **)&v191);
          llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v194, (llvm::DiagnosticInfoOptimizationBase *)&v197);
          v68 = v195;
          v195 = 0;
          a6 = v30;
          v10 = (uint64_t ***)a4;
          if (v68)
          {
            v69 = *v68;
            *v68 = 0;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            MEMORY[0x1CAA32FC0](v68, 0x20C4093837F09);
          }
          v197 = &off_1E814E790;
          v70 = (char *)v208;
          if ((_DWORD)v209)
          {
            v71 = (unint64_t)v209 << 6;
            do
            {
              v72 = (void **)&v70[v71];
              if (v70[v71 - 17] < 0)
                operator delete(*(v72 - 5));
              if (*((char *)v72 - 41) < 0)
                operator delete(*(v72 - 8));
              v71 -= 64;
            }
            while (v71);
            v70 = (char *)v208;
          }
          if (v70 != v210)
            free(v70);
          v73 = v175;
          v197 = "flatten.tripcount";
          LOWORD(v201) = 259;
          result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v172);
          if (!result)
            goto LABEL_132;
          v74 = *(_QWORD *)(result + 40);
          if (v74 == result + 40)
            goto LABEL_132;
          if (v74)
            v75 = v74 - 24;
          else
            v75 = 0;
          v76 = *(unsigned __int8 *)(v75 + 16);
          v77 = v76 - 29;
          if (v76 == 30)
          {
            if ((*(_DWORD *)(v75 + 20) & 0x7FFFFFF) == 3)
            {
LABEL_132:
              v78 = 0;
              goto LABEL_141;
            }
          }
          else
          {
            v78 = 0;
            switch(v77)
            {
              case 0:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                goto LABEL_141;
              case 1:
                goto LABEL_264;
              case 2:
                v79 = (*(_DWORD *)(v75 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 3:
                v79 = (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) - 1;
                break;
              case 10:
                v79 = *(_DWORD *)(v75 + 80) + 1;
                break;
              default:
                goto LABEL_132;
            }
            if (v79 != 1)
              goto LABEL_132;
          }
          v78 = result;
LABEL_141:
          v80 = *(_QWORD *)(v78 + 40);
          if (v80 == v78 + 40)
          {
            v82 = 0;
          }
          else
          {
            if (v80)
              v81 = v80 - 24;
            else
              v81 = 0;
            if (*(unsigned __int8 *)(v81 + 16) - 29 >= 0xB)
              v82 = 0;
            else
              v82 = v81;
          }
          v83 = llvm::BinaryOperator::Create(17, (_QWORD *)v73, *((uint64_t *)&v73 + 1), (uint64_t)&v197, v82);
          v84 = v174[0];
          LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v173);
          v86 = *((_DWORD *)v84 + 5);
          v87 = v86 & 0x7FFFFFF;
          if ((v86 & 0x7FFFFFF) != 0)
          {
            v88 = 0;
            while (1)
            {
              v89 = (char *)v84 - 32 * v87;
              if ((v86 & 0x40000000) != 0)
                v89 = (char *)*((_QWORD *)v84 - 1);
              if (*(_QWORD *)&v89[32 * *((unsigned int *)v84 + 15) + 8 * v88] == LoopLatch)
                break;
              if (v87 == ++v88)
                goto LABEL_155;
            }
          }
          else
          {
LABEL_155:
            LODWORD(v88) = -1;
          }
          llvm::PHINode::removeIncomingValue(v84, v88, 1);
          if (v183 == v182)
            v90 = (uint64_t *)((char *)&v184 + 4);
          else
            v90 = &v184;
          v91 = *(unsigned int *)v90;
          if ((_DWORD)v91)
          {
            v92 = 8 * v91;
            v93 = v183;
            while (*(_QWORD *)v93 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v93 += 8;
              v92 -= 8;
              if (!v92)
                goto LABEL_178;
            }
          }
          else
          {
            v93 = v183;
          }
          v94 = &v183[8 * v91];
          if (v93 != v94)
          {
            v95 = *(_DWORD **)v93;
LABEL_167:
            v96 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v173);
            v97 = v95[5];
            v98 = v97 & 0x7FFFFFF;
            if ((v97 & 0x7FFFFFF) != 0)
            {
              v99 = 0;
              while (1)
              {
                v100 = &v95[-8 * v98];
                if ((v97 & 0x40000000) != 0)
                  v100 = (_DWORD *)*((_QWORD *)v95 - 1);
                if (*(_QWORD *)&v100[8 * v95[15] + 2 * v99] == v96)
                  break;
                if (v98 == ++v99)
                  goto LABEL_173;
              }
            }
            else
            {
LABEL_173:
              LODWORD(v99) = -1;
            }
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v95, v99, 1);
            v101 = (unint64_t *)(v93 + 8);
            while (v101 != (unint64_t *)v94)
            {
              v102 = *v101++;
              v95 = (_DWORD *)v102;
              if (v102 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v93 = (char *)(v101 - 1);
                goto LABEL_167;
              }
            }
          }
LABEL_178:
          v103 = *(_QWORD *)(*((_QWORD *)&v181 + 1) - 96);
          v104 = *(_DWORD *)(v103 + 20);
          if ((v104 & 0x40000000) != 0)
            v105 = *(_QWORD *)(v103 - 8);
          else
            v105 = v103 - 32 * (v104 & 0x7FFFFFF);
          v106 = (llvm::Value **)(v105 + 32);
          if (*(_QWORD *)(v105 + 32))
          {
            **(_QWORD **)(v105 + 48) = *(_QWORD *)(v105 + 40);
            v107 = *(_QWORD *)(v105 + 40);
            if (v107)
              *(_QWORD *)(v107 + 16) = *(_QWORD *)(v105 + 48);
          }
          *v106 = v83;
          if (v83)
          {
            v110 = *((_QWORD *)v83 + 1);
            v109 = (llvm::Value ***)((char *)v83 + 8);
            v108 = v110;
            *(_QWORD *)(v105 + 40) = v110;
            if (v110)
              *(_QWORD *)(v108 + 16) = v105 + 40;
            *(_QWORD *)(v105 + 48) = v109;
            *v109 = v106;
          }
          ExitBlock = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v173);
          ExitingBlock = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v173);
          v113 = (_QWORD *)*((_QWORD *)ExitingBlock + 5);
          if (v113 == (_QWORD *)((char *)ExitingBlock + 40))
          {
            v115 = 0;
          }
          else
          {
            if (v113)
              v114 = (uint64_t ***)(v113 - 3);
            else
              v114 = 0;
            if (*((unsigned __int8 *)v114 + 16) - 29 >= 0xB)
              v115 = 0;
            else
              v115 = v114;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v115[5] + 5), v115);
          v116 = v115[3];
          v117 = v115[4];
          *v117 = (uint64_t *)v116;
          v116[1] = (uint64_t *)v117;
          v115[3] = 0;
          v115[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v115);
          v118 = operator new(0x60uLL);
          v118[13] = v118[13] & 0x38000000 | 1;
          *(_QWORD *)v118 = 0;
          *((_QWORD *)v118 + 1) = 0;
          *((_QWORD *)v118 + 2) = 0;
          *((_QWORD *)v118 + 3) = v118 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v118 + 8), ExitBlock, ExitingBlock);
          sub_1C53BB778((uint64_t)a2, 0, (uint64_t)ExitingBlock, **((_QWORD **)v173 + 4));
          if (a8)
            llvm::MemorySSAUpdater::removeEdge(a8, ExitingBlock, **((llvm::BasicBlock ***)v173 + 4));
          v119 = *((_QWORD *)v174[1] + 5);
          v120 = *(_QWORD *)(v119 + 40);
          if (v120 == v119 + 40)
          {
            v122 = 0;
          }
          else
          {
            if (v120)
              v121 = v120 - 24;
            else
              v121 = 0;
            if (*(unsigned __int8 *)(v121 + 16) - 29 >= 0xB)
              v122 = 0;
            else
              v122 = v121;
          }
          sub_1C4773D54((uint64_t)&v197, v122, 0, 0, 0);
          if (v177 == v176)
            v123 = (uint64_t *)((char *)&v178 + 4);
          else
            v123 = &v178;
          v124 = *(unsigned int *)v123;
          if ((_DWORD)v124)
          {
            v125 = 8 * v124;
            v126 = v177;
            while (*(_QWORD *)v126 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v126 += 8;
              v125 -= 8;
              if (!v125)
                goto LABEL_222;
            }
          }
          else
          {
            v126 = v177;
          }
          v127 = &v177[8 * v124];
          if (v126 != v127)
          {
            v128 = *(llvm::ValueAsMetadata **)v126;
LABEL_216:
            v129 = v174[1];
            if (v187)
            {
              v130 = *(_QWORD *)v128;
              v194[0] = "flatten.trunciv";
              v196 = 259;
              v129 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v197, 38, (unsigned __int8 *)v174[1], v130, (uint64_t)v194);
            }
            llvm::Value::doRAUW(v128, v129, (llvm::Value *)1);
            v131 = (unint64_t *)(v126 + 8);
            while (v131 != (unint64_t *)v127)
            {
              v132 = *v131++;
              v128 = (llvm::ValueAsMetadata *)v132;
              if (v132 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v126 = (char *)(v131 - 1);
                goto LABEL_216;
              }
            }
          }
LABEL_222:
          llvm::ScalarEvolution::forgetLoop(a4, v172);
          llvm::ScalarEvolution::forgetLoop(a4, v173);
          if (!a7)
            goto LABEL_240;
          v133 = v173;
          v134 = (uint64_t ***)**((_QWORD **)v173 + 4);
          if (!v134 || (*((_BYTE *)v134 + 23) & 0x10) == 0)
          {
            v135 = 14;
            v136 = "<unnamed loop>";
            goto LABEL_238;
          }
          v137 = ***v134;
          v138 = *(_QWORD *)(v137 + 152);
          v139 = *(unsigned int *)(v137 + 168);
          if ((_DWORD)v139)
          {
            LODWORD(v140) = (v139 - 1) & ((v134 >> 4) ^ (v134 >> 9));
            v141 = (uint64_t ****)(v138 + 16 * v140);
            v142 = *v141;
            if (*v141 == v134)
            {
LABEL_237:
              v148 = v141[1];
              v149 = (uint64_t)*v148;
              v136 = (const char *)(v148 + 2);
              v135 = v149;
LABEL_238:
              llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(a7 + 8), (uint64_t)v173, (uint64_t)v136, v135);
              if (*(llvm::Instruction **)(a7 + 16) == v133)
                *(_BYTE *)(a7 + 24) = 1;
LABEL_240:
              llvm::LoopInfo::erase(a3, v173);
              if (v197 != v200)
                free(v197);
              goto LABEL_31;
            }
            v143 = 1;
            while (v142 != (uint64_t ***)-4096)
            {
              v144 = v140 + v143++;
              v140 = v144 & (v139 - 1);
              v142 = *(uint64_t ****)(v138 + 16 * v140);
              if (v142 == v134)
              {
                v141 = (uint64_t ****)(v138 + 16 * v140);
                goto LABEL_237;
              }
            }
          }
          v141 = (uint64_t ****)(v138 + 16 * v139);
          goto LABEL_237;
        }
      }
    }
LABEL_28:
    v29 = 0;
    goto LABEL_29;
  }
  LOBYTE(v11) = 0;
  return v11 & 1;
}

char **llvm::LoopFlattenPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  llvm::MemorySSAUpdater *v9;
  char **result;
  char *v11[2];
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  char *v24[2];
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  _QWORD **v34;
  _QWORD *v35[2];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  LOBYTE(v23) = 0;
  v36 = 0;
  v8 = *(_QWORD *)(a2 + 72);
  if (v8)
  {
    v11[0] = (char *)&v12;
    v11[1] = (char *)0x1000000000;
    v13 = v17;
    v14 = v17;
    v18 = v20;
    v19 = 0x800000000;
    v22[1] = 0;
    v22[0] = 0;
    v21 = v22;
    v23 = v8;
    v24[0] = (char *)&v25;
    v24[1] = (char *)0x1000000000;
    v26 = v30;
    v27 = v30;
    v28 = 8;
    v29 = 0;
    v15 = 8;
    v16 = 0;
    v31 = v33;
    v32 = 0x800000000;
    v35[1] = 0;
    v35[0] = 0;
    v34 = v35;
    v36 = 1;
    sub_1C61247C0((uint64_t)&v21, 0);
    if (v18 != v20)
      free(v18);
    if (v14 != v13)
      free(v14);
    sub_1C4EE41F8(v11);
    if (v36)
      v9 = (llvm::MemorySSAUpdater *)&v23;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  if ((Flatten(a1, *(llvm::DominatorTree **)(a2 + 16), *(int32x2_t **)(a2 + 24), *(int32x2_t **)(a2 + 32), *(const llvm::DataLayout **)(a2 + 8), *(_QWORD **)(a2 + 48), a3, v9) & 1) != 0)
  {
    result = (char **)llvm::getLoopPassPreservedAnalyses(a4);
    if (*(_QWORD *)(a2 + 72))
      result = (char **)sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = (char **)sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v36)
  {
    sub_1C61247C0((uint64_t)&v34, v35[0]);
    if (v31 != v33)
      free(v31);
    if (v27 != v26)
      free(v27);
    return sub_1C4EE41F8(v24);
  }
  return result;
}

uint64_t sub_1C5B77858(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeAssumptionCacheTrackerPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Flattens loops";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "loop-flatten";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED81F448;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5B78EAC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5B778F4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F448;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81959A0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F450);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B77858;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F450, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B779BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LoopPredecessor;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t LoopLatch;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  llvm::UndefValue *v34;
  uint64_t v35;
  llvm::Type *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  llvm::UndefValue **v44;
  unsigned int v45;
  llvm::UndefValue *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  llvm::UndefValue *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v63;
  int v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  char *v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int64_t v86;
  int v87;
  _QWORD *v88;
  int v89;
  unint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int v116;
  _BYTE v117[64];
  void *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD v122[6];

  v122[4] = *MEMORY[0x1E0C80C00];
  v113 = v117;
  v114 = v117;
  v115 = 8;
  v116 = 0;
  v6 = (_QWORD *)(a1 + 16);
  v7 = (_QWORD *)(a1 + 32);
  v8 = 0;
  if (!sub_1C5B78360(*(llvm::Loop **)(a1 + 8), (llvm::SmallPtrSetImplBase *)&v113, (unint64_t *)(a1 + 16), (_QWORD *)(a1 + 32), (uint64_t *)(a1 + 112), (uint64_t *)(a1 + 128), a2, *(unsigned __int8 *)(a1 + 208)))goto LABEL_119;
  if (!sub_1C5B78360(*(llvm::Loop **)a1, (llvm::SmallPtrSetImplBase *)&v113, (unint64_t *)(a1 + 24), (_QWORD *)(a1 + 40), (uint64_t *)(a1 + 120), (uint64_t *)(a1 + 136), a2, *(unsigned __int8 *)(a1 + 208))|| !llvm::Loop::isLoopInvariant(*(_QWORD *)a1, *(_QWORD *)(a1 + 32))|| !llvm::Loop::isLoopInvariant(*(_QWORD *)a1, *(_QWORD *)(a1 + 40)))
  {
    goto LABEL_118;
  }
  v112 = a1 + 24;
  v118 = v122;
  v119 = (uint64_t)v122;
  v120 = 4;
  v121 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v118, *(_QWORD *)(a1 + 24));
  v9 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 32);
  if (*(_QWORD *)(v9 + 40) != v9 + 40)
  {
    v10 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 48);
    v11 = v10 - 24;
    v12 = v10 ? v10 - 24 : 0;
    if (v10 && *(_BYTE *)(v12 + 16) == 83)
    {
      while (1)
      {
        if (v11 == *v6)
          goto LABEL_78;
        if (*(_BYTE *)(a1 + 208))
        {
          if (*(_QWORD *)(a1 + 216) == v11 || *(_QWORD *)(a1 + 224) == v11)
            goto LABEL_78;
        }
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 8));
        if (!LoopPredecessor)
          break;
        v15 = *(_QWORD *)(LoopPredecessor + 40);
        if (v15 == LoopPredecessor + 40)
          break;
        v16 = v15 - 24;
        if (!v15)
          v16 = 0;
        v17 = *(unsigned __int8 *)(v16 + 16);
        v18 = v17 - 29;
        if (v17 == 30)
        {
          if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 3)
            break;
        }
        else
        {
          v19 = 0;
          switch(v18)
          {
            case 0:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_28;
            case 1:
              __break(1u);
              goto LABEL_210;
            case 2:
              v20 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 3:
              v20 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) - 1;
              break;
            case 10:
              v20 = *(_DWORD *)(v16 + 80) + 1;
              break;
            default:
              goto LABEL_23;
          }
          if (v20 != 1)
            break;
        }
        v19 = LoopPredecessor;
LABEL_28:
        v21 = *(_DWORD *)(v11 + 20);
        v22 = v21 & 0x7FFFFFF;
        if ((v21 & 0x7FFFFFF) != 0)
        {
          v23 = 0;
          while (1)
          {
            v24 = v11 - 32 * v22;
            if ((v21 & 0x40000000) != 0)
              v24 = *(_QWORD *)(v11 - 8);
            if (*(_QWORD *)(v24 + 32 * *(unsigned int *)(v11 + 60) + 8 * v23) == v19)
              break;
            if (v22 == ++v23)
              goto LABEL_34;
          }
        }
        else
        {
LABEL_34:
          LODWORD(v23) = -1;
        }
        if ((v21 & 0x40000000) != 0)
          v25 = *(_QWORD *)(v11 - 8);
        else
          v25 = v11 - 32 * v22;
        v26 = *(_QWORD *)(v25 + 32 * v23);
        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 8));
        v28 = *(_DWORD *)(v11 + 20);
        v29 = v28 & 0x7FFFFFF;
        if ((v28 & 0x7FFFFFF) != 0)
        {
          v30 = 0;
          while (1)
          {
            v31 = v11 - 32 * v29;
            if ((v28 & 0x40000000) != 0)
              v31 = *(_QWORD *)(v11 - 8);
            if (*(_QWORD *)(v31 + 32 * *(unsigned int *)(v11 + 60) + 8 * v30) == LoopLatch)
              break;
            if (v29 == ++v30)
              goto LABEL_43;
          }
        }
        else
        {
LABEL_43:
          LODWORD(v30) = -1;
        }
        if ((v28 & 0x40000000) != 0)
          v32 = *(_QWORD *)(v11 - 8);
        else
          v32 = v11 - 32 * v29;
        v33 = 0;
        if (*(_BYTE *)(v26 + 16) != 83 || !v26)
          goto LABEL_114;
        if (*(_QWORD *)(v26 + 40) != **(_QWORD **)(*(_QWORD *)a1 + 32))
          goto LABEL_113;
        v34 = *(llvm::UndefValue **)(v32 + 32 * v30);
        v35 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)a1);
        v37 = *(_DWORD *)(v26 + 20);
        v38 = v37 & 0x7FFFFFF;
        if ((v37 & 0x7FFFFFF) != 0)
        {
          v39 = 0;
          while (1)
          {
            v40 = v26 - 32 * v38;
            if ((v37 & 0x40000000) != 0)
              v40 = *(_QWORD *)(v26 - 8);
            if (*(_QWORD *)(v40 + 32 * *(unsigned int *)(v26 + 60) + 8 * v39) == v35)
              break;
            if (v38 == ++v39)
              goto LABEL_55;
          }
        }
        else
        {
LABEL_55:
          LODWORD(v39) = -1;
        }
        v41 = (v37 & 0x40000000) != 0 ? *(_QWORD *)(v26 - 8) : v26 - 32 * v38;
        v33 = 0;
        v42 = *(_QWORD *)(v41 + 32 * v39);
        if (!v42 || *(_BYTE *)(v42 + 16) != 83)
          goto LABEL_114;
        v43 = *(_DWORD *)(v42 + 20);
        if ((v43 & 0x40000000) != 0)
        {
          v44 = *(llvm::UndefValue ***)(v42 - 8);
          v45 = v43 & 0x7FFFFFF;
        }
        else
        {
          v45 = v43 & 0x7FFFFFF;
          v44 = (llvm::UndefValue **)(v42 - 32 * (v43 & 0x7FFFFFF));
        }
        v46 = *v44;
        v47 = v45 - 1;
        if (v45 != 1)
        {
          v48 = v42 - 32 * v45;
          v49 = 32;
          do
          {
            if ((v43 & 0x40000000) != 0)
              v50 = *(llvm::UndefValue **)(*(_QWORD *)(v42 - 8) + v49);
            else
              v50 = *(llvm::UndefValue **)(v48 + v49);
            if (v50 != v46 && v50 != (llvm::UndefValue *)v42)
            {
              if (v46 != (llvm::UndefValue *)v42)
              {
                v46 = 0;
                goto LABEL_76;
              }
              v51 = v48;
              if ((v43 & 0x40000000) != 0)
                v51 = *(_QWORD *)(v42 - 8);
              v46 = *(llvm::UndefValue **)(v51 + v49);
              v7 = (_QWORD *)(a1 + 32);
            }
            v49 += 32;
            --v47;
          }
          while (v47);
        }
        if (v46 == (llvm::UndefValue *)v42)
          v46 = llvm::UndefValue::get(*(llvm::UndefValue **)v42, v36);
LABEL_76:
        if (v46 != v34)
          goto LABEL_113;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v118, v26);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 144), v11);
LABEL_78:
        v52 = *(_QWORD *)(v11 + 32);
        v11 = v52 - 24;
        if (v52)
          v53 = v52 - 24;
        else
          v53 = 0;
        if (!v52 || *(_BYTE *)(v53 + 16) != 83)
          goto LABEL_92;
      }
LABEL_23:
      v19 = 0;
      goto LABEL_28;
    }
  }
LABEL_92:
  if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 32) + 40) == **(_QWORD **)(*(_QWORD *)a1 + 32) + 40)
  {
LABEL_210:
    v33 = 1;
  }
  else
  {
    v54 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 32) + 48);
    v55 = v54 - 24;
    if (v54)
      v56 = v54 - 24;
    else
      v56 = 0;
    v33 = 1;
    if (v54 && *(_BYTE *)(v56 + 16) == 83)
    {
      while (1)
      {
        if (!*(_BYTE *)(a1 + 208)
          || (*(_QWORD *)(a1 + 216) != v55 ? (v57 = *(_QWORD *)(a1 + 224) == v55) : (v57 = 1), !v57))
        {
          v58 = sub_1C477672C((uint64_t)&v118, v55);
          v59 = (void *)v119 == v118 ? (uint64_t *)((char *)&v120 + 4) : &v120;
          if (v58 == (_QWORD *)(v119 + 8 * *(unsigned int *)v59))
            break;
        }
        v60 = *(_QWORD *)(v55 + 32);
        v55 = v60 - 24;
        if (v60)
          v61 = v60 - 24;
        else
          v61 = 0;
        if (!v60 || *(_BYTE *)(v61 + 16) != 83)
          goto LABEL_114;
      }
LABEL_113:
      v33 = 0;
    }
  }
LABEL_114:
  if ((void *)v119 != v118)
    free((void *)v119);
  if (!v33 || *(_QWORD *)*v6 != **(_QWORD **)v112)
  {
LABEL_118:
    v8 = 0;
    goto LABEL_119;
  }
  v63 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v110 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v110 == v63)
    goto LABEL_188;
  v64 = 0;
  v65 = 0;
  do
  {
    v66 = *v63;
    v67 = *(_QWORD *)(a1 + 8);
    v68 = sub_1C477672C(v67 + 56, *v63);
    v69 = *(_QWORD *)(v67 + 64);
    v70 = 72;
    if (v69 == *(_QWORD *)(v67 + 56))
      v70 = 76;
    if (v68 == (_QWORD *)(v69 + 8 * *(unsigned int *)(v67 + v70)))
    {
      v71 = v66 + 40;
      v72 = *(_QWORD *)(v66 + 48);
      if (v72 != v66 + 40)
      {
        v111 = v66 + 40;
        do
        {
          if (v72)
            v73 = v72 - 24;
          else
            v73 = 0;
          v74 = *(unsigned __int8 *)(v73 + 16);
          v75 = v74 != 83 && (v74 - 29) >= 0xB;
          if (v75 && !llvm::isSafeToSpeculativelyExecute(v73, 0, 0, 0))
            goto LABEL_118;
          v76 = (char *)sub_1C477672C((uint64_t)&v113, v73);
          if (v114 == v113)
            v77 = (uint64_t *)((char *)&v115 + 4);
          else
            v77 = &v115;
          if (v76 != &v114[8 * *(unsigned int *)v77])
            goto LABEL_182;
          v78 = *(unsigned __int8 *)(v73 + 16);
          if (v78 == 30)
            v79 = v73;
          else
            v79 = 0;
          if (v72 && v78 == 30)
          {
            if ((*(_DWORD *)(v79 + 20) & 0x7FFFFFF) != 1
              || *(_QWORD *)(v79 - 32) != **(_QWORD **)(*(_QWORD *)(a1 + 8) + 32))
            {
              goto LABEL_164;
            }
          }
          else
          {
            v80 = *(_QWORD **)v112;
            v81 = (_QWORD *)*v7;
            if (v78 == 5)
            {
              if (*(_WORD *)(v73 + 18) != 17)
                goto LABEL_164;
              v84 = (_QWORD *)(v73 - 32 * (*(_DWORD *)(v73 + 20) & 0x7FFFFFF));
              v82 = (_QWORD *)*v84;
              v83 = (_QWORD *)v84[4];
              if (v80 == v82 && v81 == v83)
                goto LABEL_182;
            }
            else
            {
              if (v78 != 45)
                goto LABEL_164;
              v82 = *(_QWORD **)(v73 - 64);
              v83 = *(_QWORD **)(v73 - 32);
              if (v80 == v82 && v81 == v83)
                goto LABEL_182;
            }
            if (v80 != v83 || v81 != v82)
            {
LABEL_164:
              v86 = v65;
              v87 = v64;
              v88 = a3;
              v89 = *(_DWORD *)(v73 + 20);
              if ((v89 & 0x40000000) != 0)
              {
                v91 = *(uint64_t **)(v73 - 8);
                v90 = v89 & 0x7FFFFFF;
              }
              else
              {
                v90 = v89 & 0x7FFFFFF;
                v91 = (uint64_t *)(v73 - 32 * v90);
              }
              v118 = &v120;
              v119 = 0x400000000;
              if (v90 < 5)
              {
                v92 = 0;
                if (v90)
                {
                  v93 = 0;
                  v94 = &v120;
LABEL_169:
                  v95 = 32 * v90;
                  v96 = &v94[v93];
                  do
                  {
                    v97 = *v91;
                    v91 += 4;
                    *v96++ = v97;
                    v95 -= 32;
                  }
                  while (v95);
                  v98 = (uint64_t *)v118;
                }
                else
                {
                  v98 = &v120;
                }
                LODWORD(v119) = v92 + v90;
                v99 = v88;
                v100 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*v88 + 72))(*v88, v73, v98);
                v102 = v101;
                if (v118 != &v120)
                  free(v118);
                if (v102 == 1)
                  v64 = 1;
                else
                  v64 = v87;
                if (__OFADD__(v86, v100))
                  v65 = ((v86 + v100) >> 63) ^ 0x8000000000000000;
                else
                  v65 = v86 + v100;
                a3 = v99;
                v71 = v111;
                v7 = (_QWORD *)(a1 + 32);
                goto LABEL_182;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)&v120, v90, 8);
              v92 = v119;
              v94 = (uint64_t *)v118;
              v93 = v119;
              goto LABEL_169;
            }
          }
LABEL_182:
          v72 = *(_QWORD *)(v72 + 8);
        }
        while (v72 != v71);
      }
    }
    ++v63;
  }
  while (v63 != v110);
  if (v64 || v65 > dword_1ED81F4D8)
    goto LABEL_118;
LABEL_188:
  v118 = v122;
  v119 = (uint64_t)v122;
  v120 = 4;
  v121 = 0;
  v8 = 0;
  if (!sub_1C631B6A8(a1, (llvm::SmallPtrSetImplBase *)&v118))
    goto LABEL_207;
  v103 = *(_QWORD *)(*(_QWORD *)v112 + 8);
  if (!v103)
  {
LABEL_205:
    v8 = 1;
    goto LABEL_207;
  }
  while (2)
  {
    v104 = *(_QWORD *)(v103 + 24);
    if (*(_QWORD *)(a1 + 120) == v104)
      goto LABEL_204;
    if (!v104 || *(_BYTE *)(v104 + 16) != 66)
    {
      v108 = sub_1C477672C((uint64_t)&v118, v104);
      if ((void *)v119 == v118)
        v109 = (uint64_t *)((char *)&v120 + 4);
      else
        v109 = &v120;
      if (v108 == (_QWORD *)(v119 + 8 * *(unsigned int *)v109))
        goto LABEL_206;
      goto LABEL_204;
    }
    v105 = *(_QWORD *)(v104 + 8);
    if (!v105)
    {
LABEL_204:
      v103 = *(_QWORD *)(v103 + 8);
      if (!v103)
        goto LABEL_205;
      continue;
    }
    break;
  }
  while (1)
  {
    v106 = sub_1C477672C((uint64_t)&v118, *(_QWORD *)(v105 + 24));
    v107 = (void *)v119 == v118 ? (uint64_t *)((char *)&v120 + 4) : &v120;
    if (v106 == (_QWORD *)(v119 + 8 * *(unsigned int *)v107))
      break;
    v105 = *(_QWORD *)(v105 + 8);
    if (!v105)
      goto LABEL_204;
  }
LABEL_206:
  v8 = 0;
LABEL_207:
  if ((void *)v119 != v118)
    free((void *)v119);
LABEL_119:
  if (v114 != v113)
    free(v114);
  return v8;
}

unint64_t sub_1C5B78360(llvm::Loop *a1, llvm::SmallPtrSetImplBase *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, int a8)
{
  unint64_t result;
  uint64_t LoopLatch;
  uint64_t v18;
  llvm::Instruction *v19;
  unsigned __int8 *v20;
  uint64_t Successor;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v42;
  int v43;
  int v44;
  llvm::Type **v45;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::SCEV *Exact;
  const llvm::SCEV *v48;
  const llvm::APInt *v49;
  uint64_t TripCountFromExitCount;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  llvm::Type **v55;
  int v56;
  unsigned int v57;
  uint64_t SCEVIter;
  int v59;
  const llvm::SCEV *ZeroExtendExpr;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t *v64;
  llvm::ConstantInt *v66;
  unsigned int v67;
  char v68;
  const llvm::APInt *v69;
  llvm::ValueHandleBase *v70;
  llvm::ConstantInt *v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BOOL4 v91;
  llvm::ValueHandleBase *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unsigned int v97;

  result = llvm::Loop::isLoopSimplifyForm(a1);
  if (!(_DWORD)result)
    return result;
  result = llvm::Loop::isCanonical(a1, (llvm::ScalarEvolution *)a7);
  if (!(_DWORD)result)
    return result;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a1) != LoopLatch)
    return 0;
  result = llvm::Loop::getInductionVariable(a1, (llvm::ScalarEvolution *)a7);
  *a3 = result;
  if (!result)
    return result;
  v18 = *(_QWORD *)(LoopLatch + 40);
  v93 = (_QWORD *)(LoopLatch + 40);
  if (v18 == LoopLatch + 40)
  {
    v19 = 0;
  }
  else
  {
    if (v18)
      v20 = (unsigned __int8 *)(v18 - 24);
    else
      v20 = 0;
    if (v20[16] - 29 >= 0xB)
      v19 = 0;
    else
      v19 = (llvm::Instruction *)v20;
  }
  Successor = llvm::Instruction::getSuccessor(v19, 0);
  v22 = sub_1C477672C((uint64_t)a1 + 56, Successor);
  v23 = *((_QWORD *)a1 + 8);
  v24 = 72;
  if (v23 == *((_QWORD *)a1 + 7))
    v24 = 76;
  v94 = *(unsigned int *)((char *)a1 + v24);
  v95 = v22;
  result = llvm::Loop::getLatchCmpInst(a1);
  if (!result)
    return result;
  if (v95 == (_QWORD *)(v23 + 8 * v94))
  {
    if ((*(_WORD *)(result + 18) & 0x3F) != 0x20)
      return 0;
  }
  else
  {
    v25 = word_1C8669CF8[2 * (*(_WORD *)(result + 18) & 0x3F) - 64];
    if (v25 != 33 && v25 != 36)
      return 0;
  }
  v26 = *(_QWORD *)(result + 8);
  if (v26)
  {
    v27 = -1;
    do
    {
      v28 = v27;
      if (!v27)
        break;
      v26 = *(_QWORD *)(v26 + 8);
      ++v27;
    }
    while (v26);
    if (!v28)
      return 0;
  }
  v29 = (_QWORD *)*v93;
  v30 = result;
  if ((_QWORD *)*v93 == v93)
  {
    v32 = 0;
  }
  else
  {
    v31 = v29 ? (uint64_t)(v29 - 3) : 0;
    v32 = *(unsigned __int8 *)(v31 + 16) - 29 >= 0xB ? 0 : v31;
  }
  *a6 = v32;
  sub_1C4774094(a2, v32);
  sub_1C4774094(a2, v30);
  v33 = *a3;
  v34 = *(_DWORD *)(*a3 + 20);
  v35 = v34 & 0x7FFFFFF;
  if ((v34 & 0x7FFFFFF) != 0)
  {
    v36 = 0;
    while (1)
    {
      v37 = v33 - 32 * v35;
      if ((v34 & 0x40000000) != 0)
        v37 = *(_QWORD *)(v33 - 8);
      if (*(_QWORD *)(v37 + 32 * *(unsigned int *)(v33 + 60) + 8 * v36) == LoopLatch)
        break;
      if (v35 == ++v36)
        goto LABEL_42;
    }
  }
  else
  {
LABEL_42:
    LODWORD(v36) = -1;
  }
  if ((v34 & 0x40000000) != 0)
    v38 = *(_QWORD *)(v33 - 8);
  else
    v38 = v33 - 32 * v35;
  v39 = *(_QWORD *)(v38 + 32 * v36);
  v40 = *(unsigned __int8 *)(v39 + 16);
  if (v40 - 41 >= 0x12 || v40 <= 0x1B)
    v39 = 0;
  *a5 = v39;
  v42 = *(_QWORD *)(v39 + 8);
  if (v42)
  {
    v43 = -2;
    do
    {
      v44 = v43;
      if (!v43)
        break;
      v42 = *(_QWORD *)(v42 + 8);
      ++v43;
    }
    while (v42);
    if (!v44)
      return 0;
  }
  v45 = *(llvm::Type ***)(v30 - 32);
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)a7, a1);
  Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)a1, a7, 0);
  if (*((_WORD *)Exact + 12) == 15)
    return 0;
  v48 = Exact;
  TripCountFromExitCount = llvm::ScalarEvolution::getTripCountFromExitCount((llvm::ScalarEvolution *)a7, Exact, 0);
  v51 = *(_QWORD *)(a7 + 104);
  v52 = *(_DWORD *)(a7 + 120);
  if (!v52)
    goto LABEL_62;
  v53 = (v52 - 1) & ((v45 >> 4) ^ (v45 >> 9));
  v54 = v51 + 48 * v53;
  v55 = *(llvm::Type ***)(v54 + 24);
  if (v55 != v45)
  {
    v56 = 1;
    while (v55 != (llvm::Type **)-4096)
    {
      v57 = v53 + v56++;
      v53 = v57 & (v52 - 1);
      v54 = v51 + 48 * v53;
      v55 = *(llvm::Type ***)(v54 + 24);
      if (v55 == v45)
        goto LABEL_63;
    }
LABEL_62:
    v54 = v51 + 48 * v52;
  }
LABEL_63:
  if (v54 == v51 + 48 * v52 || (SCEVIter = *(_QWORD *)(v54 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a7, (unint64_t)v45);
  if (SCEVIter == TripCountFromExitCount)
    goto LABEL_106;
  v59 = *((unsigned __int8 *)v45 + 16);
  if (!v45 || v59 != 16)
  {
    result = 0;
    if (!v45 || (v59 - 69) < 0xFFFFFFFE || !a8)
      return result;
    v63 = *((_DWORD *)v45 + 5);
    if ((v63 & 0x40000000) != 0)
      v64 = (unint64_t *)*(v45 - 1);
    else
      v64 = (unint64_t *)&v45[-4 * (v63 & 0x7FFFFFF)];
    v75 = *v64;
    v76 = *(_QWORD *)(a7 + 104);
    v77 = *(_DWORD *)(a7 + 120);
    if (v77)
    {
      v78 = ((v75 >> 4) ^ (v75 >> 9)) & (v77 - 1);
      v79 = v76 + 48 * v78;
      v80 = *(_QWORD *)(v79 + 24);
      if (v80 == v75)
      {
LABEL_102:
        if (v79 == v76 + 48 * v77 || (v83 = *(_QWORD *)(v79 + 40)) == 0)
          v83 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a7, v75);
        if (v83 != TripCountFromExitCount)
          return 0;
        goto LABEL_106;
      }
      v81 = 1;
      while (v80 != -4096)
      {
        v82 = v78 + v81++;
        v78 = v82 & (v77 - 1);
        v79 = v76 + 48 * v78;
        v80 = *(_QWORD *)(v79 + 24);
        if (v80 == v75)
          goto LABEL_102;
      }
    }
    v79 = v76 + 48 * v77;
    goto LABEL_102;
  }
  if (!a8)
  {
    ZeroExtendExpr = 0;
LABEL_79:
    if ((const llvm::SCEV *)SCEVIter == v48 || SCEVIter == (_QWORD)ZeroExtendExpr)
    {
      v66 = *(llvm::ConstantInt **)*v45;
      v67 = *((_DWORD *)*v45 + 2);
      v97 = v67 >> 8;
      if (v67 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v96, 1, 0);
      }
      else
      {
        if (v67 <= 0xFF)
          v68 = 0;
        else
          v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
        v96 = v68 & 1;
      }
      v70 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v96, v49);
      if (v97 >= 0x41 && v96)
        MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
      v71 = *(llvm::ConstantInt **)*v45;
      v72 = *((unsigned int *)v45 + 8);
      if (v72 >= 0x41)
      {
        v74 = (void *)operator new[]();
        memcpy(v74, v45[3], ((unint64_t)(v72 + 63) >> 3) & 0x3FFFFFF8);
        v84 = 0;
        v85 = (uint64_t *)*((_QWORD *)v70 + 3);
        v86 = (unint64_t)(v72 + 63) >> 6;
        v87 = (unint64_t *)v74;
        v88 = v86;
        do
        {
          v89 = *v85++;
          v90 = v89 + *v87;
          v91 = v90 + 1 <= *v87;
          if (v84)
          {
            ++v90;
            v84 = v91;
          }
          else
          {
            v84 = v90 < *v87;
          }
          *v87++ = v90;
          --v88;
        }
        while (v88);
        *((_QWORD *)v74 + (v86 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
      }
      else
      {
        v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
        if (!(_DWORD)v72)
          v73 = 0;
        v74 = (void *)(v73 & ((unint64_t)v45[3] + *((_QWORD *)v70 + 3)));
      }
      v97 = v72;
      v96 = (unint64_t)v74;
      v92 = llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v96, v69);
      if (v97 >= 0x41)
      {
        if (v96)
          MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
      }
      *a4 = v92;
      goto LABEL_107;
    }
LABEL_106:
    *a4 = v45;
LABEL_107:
    sub_1C4774094(a2, *a5);
    return 1;
  }
  ZeroExtendExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)a7, v48, *v45, 0);
  v61 = llvm::ScalarEvolution::getTripCountFromExitCount((llvm::ScalarEvolution *)a7, ZeroExtendExpr, 0);
  if ((const llvm::SCEV *)SCEVIter == ZeroExtendExpr)
    goto LABEL_79;
  v62 = v61;
  result = 0;
  if (SCEVIter == v62)
    goto LABEL_79;
  return result;
}

uint64_t sub_1C5B789A8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  v46 = 0;
  v47 = 0;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned __int8 *)(a2 + 16);
  if (v9 == 5)
  {
    v12 = *(unsigned __int16 *)(a2 + 18);
    if (v12 != 13
      || ((v13 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v14 = *v13, v11 = v13[4], v8 != v14)
       || !v11)
      && (v14 ? (v15 = v8 == v11) : (v15 = 0), v11 = v14, !v15))
    {
      v16 = 0;
      v17 = 0;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = &v47;
      goto LABEL_49;
    }
LABEL_19:
    v47 = v11;
    goto LABEL_20;
  }
  if (v9 != 41)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_40;
  }
  v10 = *(_QWORD *)(a2 - 64);
  v11 = *(_QWORD *)(a2 - 32);
  if (v8 == v10 && v11)
    goto LABEL_19;
  if (!v10 || v8 != v11)
  {
    v17 = 0;
    v16 = 0;
    v44 = *(_QWORD *)(a1 + 16);
    v45 = &v47;
LABEL_43:
    v24 = sub_1C4E8FCE0(&v44, v10);
    v25 = *(_QWORD *)(a2 - 32);
    if (v24 && v25 || sub_1C4E8FCE0(&v44, v25) && (v25 = *(_QWORD *)(a2 - 64)) != 0)
    {
      *v45 = v25;
      v26 = v47;
      goto LABEL_55;
    }
    goto LABEL_59;
  }
  v47 = *(_QWORD *)(a2 - 64);
  v11 = v10;
LABEL_20:
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(unsigned __int8 *)(v11 + 16);
  if (v19 == 45)
  {
    v20 = *(_QWORD *)(v11 - 64);
    v16 = *(_QWORD *)(v11 - 32);
    if (v18 != v20)
    {
      v21 = *(_QWORD *)(v11 - 32);
LABEL_23:
      v17 = 0;
      v16 = 0;
      if (v20 && v18 == v21)
      {
        v46 = v20;
        v17 = 1;
        v16 = v20;
      }
      goto LABEL_40;
    }
    if (!v16)
    {
      v21 = 0;
      goto LABEL_23;
    }
    v46 = *(_QWORD *)(v11 - 32);
    v17 = 1;
  }
  else
  {
    if (v19 == 5)
    {
      if (*(_WORD *)(v11 + 18) == 17
        && ((v22 = (uint64_t *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)), v16 = v22[4], v18 == *v22) && v16
         || (*v22 ? (v23 = v18 == v16) : (v23 = 0), v16 = *v22, v23)))
      {
        v46 = v16;
        LOBYTE(v11) = 1;
      }
      else
      {
        v16 = 0;
        LOBYTE(v11) = 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = (v19 == 5) & v11;
  }
LABEL_40:
  v44 = v8;
  v45 = &v47;
  if (v9 != 5)
  {
    if (v9 != 41)
      goto LABEL_59;
    v10 = *(_QWORD *)(a2 - 64);
    goto LABEL_43;
  }
  v12 = *(unsigned __int16 *)(a2 + 18);
LABEL_49:
  if (v12 == 13)
  {
    if ((v27 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)),
          v28 = *v27,
          v29 = sub_1C4E8FCE0(&v44, *v27),
          v26 = v27[4],
          v29)
      && v26
      || (v30 = sub_1C4E8FCE0(&v44, v26), v28) && (v26 = v28, (v30 & 1) != 0))
    {
      v47 = v26;
LABEL_55:
      v31 = *(_QWORD *)(a1 + 24);
      v42 = v31;
      v43 = &v46;
      v32 = *(unsigned __int8 *)(v26 + 16);
      if (v32 == 45)
      {
        v33 = sub_1C4E8FCE0(&v42, *(_QWORD *)(v26 - 64));
        v34 = *(_QWORD *)(v26 - 32);
        if (v33 && v34)
        {
          *v43 = v34;
LABEL_79:
          LODWORD(v31) = 1;
          goto LABEL_83;
        }
        if (sub_1C4E8FCE0(&v42, v34))
        {
          v31 = *(_QWORD *)(v26 - 64);
          if (!v31)
            goto LABEL_83;
          *v43 = v31;
          goto LABEL_79;
        }
        LODWORD(v31) = 0;
      }
      else
      {
        if (v32 == 5)
        {
          if (*(_WORD *)(v26 + 18) == 17
            && ((v36 = (uint64_t *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF)),
                 v37 = *v36,
                 v38 = sub_1C4E8FCE0(&v42, *v36),
                 v39 = v36[4],
                 v38)
             && v39
             || ((v40 = sub_1C4E8FCE0(&v42, v39), v37) ? (v41 = v40 == 0) : (v41 = 1), v39 = v37, !v41)))
          {
            v46 = v39;
            LOBYTE(v31) = 1;
          }
          else
          {
            LOBYTE(v31) = 0;
          }
        }
        LODWORD(v31) = (v32 == 5) & v31;
      }
LABEL_83:
      v16 = v46;
      if (!v46)
        return 0;
      goto LABEL_60;
    }
  }
LABEL_59:
  LODWORD(v31) = 0;
  if (!v16)
    return 0;
LABEL_60:
  if (*(_BYTE *)(a1 + 208) && *(unsigned __int8 *)(v16 + 16) - 67 <= 1)
  {
    v16 = *(_QWORD *)(v16 - 32);
    v46 = v16;
  }
  result = 0;
  if ((v17 | v31) == 1 && v16 == a3)
  {
    sub_1C4774094(this, v47);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 48), a2);
    return 1;
  }
  return result;
}

char **sub_1C5B78D64(char **a1)
{
  char *v2;
  int v3;
  char *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = &v2[24 * v3];
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        v7 = *((_QWORD *)v4 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *((_QWORD *)v4 - 2);
        v8 = (unint64_t *)*((_QWORD *)v4 - 2);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *((_QWORD *)v4 - 1);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_19:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *((_QWORD *)v4 - 1);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5B78EAC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B778F4(v0);
}

void sub_1C5B78ED8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B78EFC(uint64_t a1, llvm *a2)
{
  llvm::getLoopAnalysisUsage(a2, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::AssumptionCacheTracker::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5B78F8C(uint64_t a1, llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v6;
  char *v7;
  llvm::ScalarEvolution *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AnalysisPass;
  uint64_t v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23;
  llvm::DominatorTree *v24;
  llvm::AssumptionCacheTracker *v25;
  const llvm::DataLayout *AssumptionCache;
  uint64_t v27;
  uint64_t v28;
  llvm::Loop **v29;
  llvm::Loop **v30;
  char v31;
  llvm::Loop *v32;
  llvm::LoopNest *v33;
  llvm::ScalarEvolution *v34;
  llvm::LoopNest *v35;
  llvm::MemorySSAUpdater *v36;
  char v37;
  _QWORD *v38;
  int32x2_t *v40;
  uint64_t v41;
  char *v42[2];
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  _BYTE v48[64];
  void *v49;
  uint64_t v50;
  _BYTE v51[64];
  _QWORD *v52;
  _QWORD v53[2];
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  void *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[64];
  void *v67;
  uint64_t v68;
  _BYTE v69[64];
  _QWORD **v70;
  _QWORD *v71[2];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::ScalarEvolutionWrapperPass::ID);
  v8 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v9 = **(char ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::LoopInfoWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::LoopInfoWrapperPass::ID);
  v40 = (int32x2_t *)(v11 + 32);
  v12 = *(_QWORD *)(a1 + 8);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v12 + 24), llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v14 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::DominatorTreeWrapperPass::ID);
    v12 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(char ***)v12;
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::TargetTransformInfoWrapperPass::ID);
  v17 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v55 = 0;
  v54 = 0;
  LODWORD(v56) = 0;
  v57[1] = 0;
  v57[0] = 0;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v61 = 0;
  v18 = *(_QWORD *)(v17 + 56);
  if (!v18)
  {
    sub_1C485C2F0();
    goto LABEL_46;
  }
  v3 = v57;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v18 + 48))(&v41, v18, a2);
  v2 = (uint64_t *)(v17 + 64);
  v19 = v41;
  if (!*(_BYTE *)(v17 + 72))
  {
    *(_QWORD *)(v17 + 64) = v41;
    *(_BYTE *)(v17 + 72) = 1;
    goto LABEL_14;
  }
  v41 = 0;
  v20 = *v2;
  *v2 = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v41;
    v41 = 0;
    if (v21)
LABEL_46:
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
LABEL_14:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(&v54);
  v22 = **(char ****)(a1 + 8);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::AssumptionCacheTracker::ID);
  if (v14)
    v24 = (llvm::DominatorTree *)(v14 + 32);
  else
    v24 = 0;
  v25 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (const llvm::DataLayout *)llvm::AssumptionCacheTracker::getAssumptionCache(v25, a2);
  v27 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (v27)
  {
    v28 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v27 + 96))(v27, &llvm::MemorySSAWrapperPass::ID);
    LOBYTE(v54) = 0;
    v72 = 0;
    if (v28)
    {
      v41 = *(_QWORD *)(v28 + 32);
      v42[0] = (char *)&v43;
      v42[1] = (char *)0x1000000000;
      v44 = v48;
      v45 = v48;
      v49 = v51;
      v50 = 0x800000000;
      v53[1] = 0;
      v53[0] = 0;
      v52 = v53;
      v54 = v41;
      v55 = (char *)v57;
      v56 = 0x1000000000;
      v62 = v66;
      v63 = v66;
      v64 = 8;
      v65 = 0;
      v46 = 8;
      v47 = 0;
      v67 = v69;
      v68 = 0x800000000;
      v71[1] = 0;
      v71[0] = 0;
      v70 = v71;
      v72 = 1;
      sub_1C61247C0((uint64_t)&v52, 0);
      if (v49 != v51)
        free(v49);
      if (v45 != v44)
        free(v45);
      sub_1C4EE41F8(v42);
    }
  }
  else
  {
    LOBYTE(v54) = 0;
    v72 = 0;
  }
  v29 = *(llvm::Loop ***)(v11 + 56);
  v30 = *(llvm::Loop ***)(v11 + 64);
  if (v29 == v30)
  {
    v31 = 0;
  }
  else
  {
    v31 = 0;
    do
    {
      v32 = *v29;
      v33 = (llvm::LoopNest *)operator new();
      v35 = llvm::LoopNest::LoopNest(v33, v32, v8, v34);
      if (v72)
        v36 = (llvm::MemorySSAUpdater *)&v54;
      else
        v36 = 0;
      v37 = Flatten((uint64_t)v35, v24, v40, (int32x2_t *)v8, AssumptionCache, v2, 0, v36);
      v38 = (_QWORD *)*((_QWORD *)v33 + 1);
      if (v38 != (_QWORD *)((char *)v33 + 24))
        free(v38);
      v31 |= v37;
      MEMORY[0x1CAA32FC0](v33, 0x1080C40AE5A6257);
      ++v29;
    }
    while (v29 != v30);
  }
  if (v72)
  {
    sub_1C61247C0((uint64_t)&v70, v71[0]);
    if (v67 != v69)
      free(v67);
    if (v63 != v62)
      free(v63);
    sub_1C4EE41F8(&v55);
    v72 = 0;
  }
  return v31 & 1;
}

__n128 sub_1C5B79430(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81F518, "loop-flatten-assume-no-overflow", 0x1FuLL);
  word_1ED81F522 = (32 * (*a1 & 3)) | word_1ED81F522 & 0xFF9F;
  v6 = *a2;
  byte_1ED81F598 = **a2;
  byte_1ED81F5A9 = 1;
  byte_1ED81F5A8 = *v6;
  result = *a3;
  xmmword_1ED81F538 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5B794B4()
{
  int v1;
  __n128 v2;
  int *v3;
  int v4;

  v4 = 1;
  v1 = 2;
  v2.n128_u64[0] = (unint64_t)"Limit on the cost of instructions that can be repeated due to loop flattening";
  v2.n128_u64[1] = 77;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED81F458, "loop-flatten-cost-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81F458, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Assume that the product of the two iteration trip counts will never overflow";
  v2.n128_u64[1] = 76;
  v3 = &v1;
  sub_1C631B77C(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81F518, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 1;
  v2.n128_u64[0] = (unint64_t)"Widen the loop induction variables, if possible, so overflow checks won't reject flattening";
  v2.n128_u64[1] = 91;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81F5D8, "loop-flatten-widen-iv", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81F5D8, &dword_1C475E000);
}

uint64_t sub_1C5B795DC(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  uint64_t v7;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopAccessLegacyAnalysisPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  llvm::initializeLoopSimplifyPass(a1, v4);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v5);
  llvm::initializeLazyBlockFrequencyInfoPassPass(a1, v6);
  v7 = operator new();
  *(_QWORD *)v7 = "Loop Load Elimination";
  *(_QWORD *)(v7 + 8) = 21;
  *(_QWORD *)(v7 + 16) = "loop-load-elim";
  *(_QWORD *)(v7 + 24) = 14;
  *(_QWORD *)(v7 + 32) = &unk_1ED81F698;
  *(_WORD *)(v7 + 40) = 0;
  *(_BYTE *)(v7 + 42) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = sub_1C5B7B194;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v7, 1);
  return v7;
}

uint64_t sub_1C5B796A0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F698;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8195A40;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F6A0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B795DC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F6A0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::LoopLoadEliminationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Loop *v9;
  uint64_t v10;
  llvm::ScalarEvolution *v11;
  uint64_t ResultImpl;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8;
  v9 = (llvm::Loop *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8);
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  v19 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  v11 = (llvm::ScalarEvolution *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a1);
  v13 = sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(a1 + 40));
  v14 = v13;
  v20 = v8;
  v15 = (int32x2_t *)v6;
  if (v13 && *(_QWORD *)(v13 + 8))
    v16 = (uint64_t **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, a1)
                     + 8);
  else
    v16 = 0;
  v17 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key, a1)+ 8);
  v21[0] = v19;
  v21[1] = v11;
  v21[2] = v9;
  v21[3] = v7;
  v21[4] = v15;
  v21[5] = v10;
  v21[6] = v20;
  v21[7] = v17;
  result = sub_1C5B7994C(v7, v9, v16, v14, v15, v11, (uint64_t (*)(uint64_t, llvm::Loop *))sub_1C5B7B7A0, (uint64_t)v21);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((result & 1) == 0)
    return (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return result;
}

uint64_t sub_1C5B7994C(uint64_t a1, llvm::Loop *a2, uint64_t **a3, uint64_t a4, int32x2_t *a5, llvm::ScalarEvolution *a6, uint64_t (*a7)(uint64_t, llvm::Loop *), uint64_t a8)
{
  void **v8;
  int v11;
  void *v12;
  uint64_t *v13;
  void *v14;
  int v15;
  unsigned int v16;
  void *v17;
  _BYTE *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  BOOL v26;
  llvm *v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, llvm::Loop *);
  uint64_t **v37;
  llvm::Loop *v38;
  uint64_t LoopLatch;
  const llvm::PredicatedScalarEvolution **v40;
  const llvm::PredicatedScalarEvolution **v41;
  const llvm::PredicatedScalarEvolution *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  _QWORD *v54;
  void **v55;
  _QWORD *v56;
  uint64_t *v57;
  void **v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  BOOL v62;
  void **v63;
  void **v64;
  _QWORD *v65;
  const llvm::PredicatedScalarEvolution *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  char *v75;
  uint64_t v76;
  _QWORD **v77;
  uint64_t v78;
  llvm::Loop *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  BOOL v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  void **v99;
  _QWORD *v100;
  void **v101;
  uint64_t *v102;
  uint64_t v103;
  void **v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char v109;
  void **v110;
  void **v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  BOOL v120;
  int v121;
  __int128 *v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  unsigned int v129;
  char *v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  const llvm::PredicatedScalarEvolution *v158;
  uint64_t v159;
  llvm::Loop *v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  llvm::Loop *v165;
  uint64_t v166;
  int v167;
  int v168;
  char *v169;
  const char *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  const llvm::PredicatedScalarEvolution *v174;
  __int128 *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  const char *v190;
  uint64_t *v191;
  _QWORD *v192;
  uint64_t *v193;
  const char *v194;
  uint64_t *v195;
  llvm::ValueAsMetadata **v196;
  llvm::ValueAsMetadata **v197;
  llvm::Value *v198;
  uint64_t SCEV;
  uint64_t result;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  _QWORD *v206;
  unsigned __int8 *v207;
  llvm::Instruction *v208;
  unsigned __int8 *v209;
  char *v210;
  char *v211;
  llvm::Value *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  __int16 v218;
  char *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  _QWORD *v226;
  llvm::Value *v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  llvm::ValueAsMetadata *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  llvm::ValueSymbolTable *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  llvm::ValueSymbolTable *v246;
  _QWORD *v247;
  _QWORD *v248;
  llvm::BasicBlock *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v260;
  uint64_t *v261;
  __int128 v262;
  __int128 *v263;
  int v264;
  void **v265;
  llvm::Loop *v268;
  llvm::Loop *v269;
  void *v270;
  unsigned int v271;
  uint64_t v272;
  const llvm::PredicatedScalarEvolution **v273;
  llvm::Loop *v274;
  uint64_t **v275;
  uint64_t v276;
  int8x16_t v277;
  void *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281[3];
  char v282;
  uint64_t ***v283;
  uint64_t v284[3];
  void *v285;
  const char *v286;
  const char *v287;
  uint64_t v288;
  int v289;
  _WORD v290[16];
  void **v291;
  void *v292;
  uint64_t v293;
  _DWORD v294[4];
  _BYTE v295[64];
  void *__p;
  _BYTE *v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  _BYTE v301[64];
  void *v302;
  void *__src;
  uint64_t v304;
  unsigned int v305;
  _BYTE v306[64];
  void *v307;
  _BYTE *v308;
  void *v309;
  void *v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  void *v314;
  _BYTE *v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD v318[10];

  v318[8] = *MEMORY[0x1E0C80C00];
  v299 = v301;
  v300 = 0x800000000;
  v8 = *(void ***)(a1 + 24);
  v265 = *(void ***)(a1 + 32);
  if (v8 == v265)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v316 = *v8;
      sub_1C4EA1748((uint64_t *)&v316, (uint64_t)&v302);
      v268 = (llvm::Loop *)&v272;
      v12 = __src;
      if (__src == v302)
      {
        v269 = (llvm::Loop *)&v272;
        v13 = &v272;
        v14 = __src;
      }
      else
      {
        v30 = v304;
        v13 = (uint64_t *)malloc_type_malloc(8 * v304, 0x4065EBACuLL);
        if (!v13 && (v30 || (v13 = (uint64_t *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_64:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v269 = (llvm::Loop *)v13;
        v14 = v302;
        v12 = __src;
      }
      v15 = HIDWORD(v304);
      LODWORD(v270) = v304;
      if (v12 == v14)
        v16 = HIDWORD(v304);
      else
        v16 = v304;
      if (v16)
      {
        memmove(v13, v12, 8 * v16);
        v15 = HIDWORD(v304);
      }
      HIDWORD(v270) = v15;
      v271 = v305;
      v279 = 0;
      v280 = 0;
      v278 = 0;
      sub_1C4D6CDA0(&v278, v307, v308, 0xAAAAAAAAAAAAAAABLL * ((v308 - (_BYTE *)v307) >> 3));
      v292 = v295;
      v17 = v310;
      if (v310 == v309)
      {
        v293 = (uint64_t)v295;
        v18 = v295;
        v19 = v310;
      }
      else
      {
        v31 = v311;
        v18 = malloc_type_malloc(8 * v311, 0x4065EBACuLL);
        if (!v18)
        {
          if (v31)
            goto LABEL_64;
          v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v18)
            goto LABEL_64;
        }
        v293 = (uint64_t)v18;
        v19 = v309;
        v17 = v310;
      }
      v20 = v312;
      v294[0] = v311;
      if (v17 == v19)
        v21 = v312;
      else
        v21 = v311;
      if (v21)
      {
        memmove(v18, v17, 8 * v21);
        v20 = v312;
      }
      v294[1] = v20;
      v294[2] = v313;
      v297 = 0;
      v298 = 0;
      __p = 0;
      sub_1C4D6CDA0(&__p, v314, v315, 0xAAAAAAAAAAAAAAABLL * ((v315 - (_BYTE *)v314) >> 3));
      while (1)
      {
        if (v279 - (_BYTE *)v278 != v297 - (_BYTE *)__p)
          goto LABEL_32;
        if (v278 == v279)
          break;
        v22 = (char *)__p + 8;
        v23 = (char *)v278 + 8;
        while (1)
        {
          v24 = v23 - 8;
          if (*((_QWORD *)v23 - 1) != *((_QWORD *)v22 - 1))
            break;
          v25 = v22[8];
          if (v23[8])
            v26 = v25 == 0;
          else
            v26 = 1;
          if (v26)
          {
            if ((v23[8] == 0) == (v25 != 0))
              break;
          }
          else if (*(_QWORD *)v23 != *(_QWORD *)v22)
          {
            break;
          }
          v22 += 24;
          v23 += 24;
          if (v24 + 24 == v279)
            goto LABEL_37;
        }
LABEL_32:
        v27 = (llvm *)*((_QWORD *)v279 - 3);
        v28 = llvm::simplifyLoop(v27, a2, (unint64_t **)a1, a5, a6, 0, 0);
        if (*((_QWORD *)v27 + 1) == *((_QWORD *)v27 + 2))
        {
          v29 = v300;
          if (v300 >= (unint64_t)HIDWORD(v300))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v299, (uint64_t)v301, v300 + 1, 8);
            v29 = v300;
          }
          *((_QWORD *)v299 + v29) = v27;
          LODWORD(v300) = v300 + 1;
        }
        v11 |= v28;
        sub_1C4EA42DC((llvm::SmallPtrSetImplBase *)&v268);
      }
LABEL_37:
      if (__p)
      {
        v297 = __p;
        operator delete(__p);
      }
      if ((void *)v293 != v292)
        free((void *)v293);
      if (v278)
      {
        v279 = (char *)v278;
        operator delete(v278);
      }
      if (v269 != v268)
        free(v269);
      if (v314)
      {
        v315 = v314;
        operator delete(v314);
      }
      if (v310 != v309)
        free(v310);
      if (v307)
      {
        v308 = v307;
        operator delete(v307);
      }
      if (__src != v302)
        free(__src);
      ++v8;
    }
    while (v8 != v265);
    v32 = (uint64_t *)v299;
    if ((_DWORD)v300)
    {
      v33 = (uint64_t *)((char *)v299 + 8 * v300);
      v34 = a8;
      v36 = a7;
      v35 = a4;
      v37 = a3;
      v261 = v33;
LABEL_67:
      v38 = (llvm::Loop *)*v32;
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*v32);
      if (!LoopLatch
        || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)v38, LoopLatch)
        || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v38))
      {
        goto LABEL_370;
      }
      v40 = (const llvm::PredicatedScalarEvolution **)v36(v34, v38);
      v269 = 0;
      v270 = 0;
      v271 = 0;
      v268 = v38;
      v272 = a1;
      v273 = v40;
      v274 = a2;
      v275 = v37;
      v276 = v35;
      llvm::PredicatedScalarEvolution::PredicatedScalarEvolution((llvm::PredicatedScalarEvolution *)&v277, *v40);
      v41 = v273;
      v285 = 0;
      v42 = v273[2];
      if (!*((_BYTE *)v42 + 216))
        goto LABEL_163;
      v302 = v306;
      __src = v306;
      v304 = 4;
      v305 = 0;
      v43 = *((unsigned int *)v42 + 58);
      v264 = v11;
      if ((_DWORD)v43)
      {
        v44 = 0;
        v45 = (unsigned int *)*((_QWORD *)v42 + 28);
        v46 = &v45[4 * v43];
        do
        {
          v47 = *((_QWORD *)v41[2] + 5);
          v48 = *(_QWORD *)(v47 + 8 * *v45);
          v49 = *(_QWORD *)(v47 + 8 * v45[1]);
          v50 = v45[2];
          if (v50 == 1)
          {
            if (*(_BYTE *)(v48 + 16) == 60)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v302, v48);
            if (*(_BYTE *)(v49 + 16) == 60)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v302, v49);
          }
          else
          {
            if (v50 <= 3)
              v51 = v48;
            else
              v51 = v49;
            if (v51 && *(_BYTE *)(v51 + 16) == 61)
            {
              if (v50 > 3)
                v49 = v48;
              if (v49
                && *(_BYTE *)(v49 + 16) == 60
                && **(_QWORD **)(v51 - 32) == **(_QWORD **)(v49 - 32)
                && **(_QWORD **)(v51 - 64) == *(_QWORD *)v49)
              {
                v52 = operator new(0x18uLL);
                *v52 = v44;
                v52[1] = v49;
                v52[2] = v51;
                v285 = v52;
                v44 = v52;
              }
            }
            v11 = v264;
          }
          v45 += 4;
        }
        while (v45 != v46);
        v37 = a3;
        v33 = v261;
        if (HIDWORD(v304) != v305)
        {
          v53 = (void **)v285;
          if (v285)
          {
            v54 = 0;
            v55 = &v285;
            do
            {
              v56 = sub_1C477672C((uint64_t)&v302, (uint64_t)v53[1]);
              if (__src == v302)
                v57 = (uint64_t *)((char *)&v304 + 4);
              else
                v57 = &v304;
              v58 = (void **)*v55;
              if (v56 != (_QWORD *)((char *)__src + 8 * *(unsigned int *)v57))
              {
                v58 = (void **)*v58;
                if (v58)
                {
                  do
                  {
                    v59 = (char *)sub_1C477672C((uint64_t)&v302, (uint64_t)v58[1]);
                    if (__src == v302)
                      v60 = (uint64_t *)((char *)&v304 + 4);
                    else
                      v60 = &v304;
                    v61 = (char *)__src + 8 * *(unsigned int *)v60;
                    v26 = v59 == v61;
                    v62 = v59 != v61;
                    if (v26)
                      break;
                    v58 = (void **)*v58;
                  }
                  while (v58);
                }
                else
                {
                  v62 = 1;
                }
                if (v55 != v58)
                {
                  v63 = v55;
                  do
                  {
                    v64 = v63;
                    v63 = (void **)*v63;
                  }
                  while (v63 != v58);
                  if (v64 != v55)
                  {
                    *v64 = v54;
                    v54 = *v55;
                    *v55 = v58;
                  }
                }
                if (v62)
                  break;
              }
              v53 = (void **)*v58;
              v55 = v58;
            }
            while (*v58);
            if (v54)
            {
              do
              {
                v65 = (_QWORD *)*v54;
                operator delete(v54);
                v54 = v65;
              }
              while (v65);
            }
          }
        }
      }
      if (__src != v302)
        free(__src);
      if (!v285)
      {
LABEL_163:
        v98 = 0;
        goto LABEL_367;
      }
      v260 = v32;
      v66 = v273[2];
      __src = 0;
      v302 = 0;
      LODWORD(v304) = 0;
      if (*((_DWORD *)v66 + 12))
      {
        v67 = 0;
        v68 = 0;
        do
        {
          *((_DWORD *)sub_1C5B7B680(&v302, (uint64_t *)(*((_QWORD *)v66 + 5) + v67)) + 2) = v68++;
          v67 += 8;
        }
        while (v68 < *((unsigned int *)v66 + 12));
      }
      MEMORY[0x1CAA32FB4](v269, 8);
      v269 = (llvm::Loop *)v302;
      v302 = 0;
      v270 = __src;
      __src = 0;
      v271 = v304;
      LODWORD(v304) = 0;
      MEMORY[0x1CAA32FB4](0, 8);
      __src = 0;
      v302 = 0;
      LODWORD(v304) = 0;
      v69 = v285;
      if (!v285)
        goto LABEL_186;
      while (2)
      {
        v71 = v69 + 1;
        v70 = (void *)v69[1];
        v292 = v70;
        v293 = (uint64_t)(v69 + 1);
        if ((_DWORD)v304)
        {
          v72 = ((_DWORD)v304 - 1) & ((v70 >> 4) ^ (v70 >> 9));
          v73 = (char *)v302 + 16 * v72;
          v74 = (void *)*v73;
          if (v70 == (void *)*v73)
          {
LABEL_125:
            v75 = (char *)v302 + 16 * v72;
            v78 = *((_QWORD *)v75 + 1);
            v77 = (_QWORD **)(v75 + 8);
            v76 = v78;
            if (v78)
            {
              if (*(_QWORD *)(v69[2] + 40) == *(_QWORD *)(*(_QWORD *)(v76 + 8) + 40)
                && sub_1C5B7B4A0(v69 + 1, &v277, (uint64_t)v268)
                && sub_1C5B7B4A0(*v77, &v277, (uint64_t)v268))
              {
                v79 = v269;
                if (v271)
                {
                  v80 = (*v77)[1];
                  v81 = v271 - 1;
                  v82 = ((v80 >> 4) ^ (v80 >> 9)) & (v271 - 1);
                  v83 = *((_QWORD *)v269 + 2 * v82);
                  if (v80 != v83)
                  {
                    v94 = 1;
                    while (v83 != -4096)
                    {
                      v95 = v82 + v94++;
                      v82 = v95 & v81;
                      v83 = *((_QWORD *)v269 + 2 * v82);
                      if (v80 == v83)
                        goto LABEL_131;
                    }
                    v82 = v271;
                  }
LABEL_131:
                  v84 = *((_DWORD *)v269 + 4 * v82 + 2);
                  v85 = v69[2];
                  LODWORD(v86) = ((v85 >> 4) ^ (v85 >> 9)) & v81;
                  v87 = *((_QWORD *)v269 + 2 * v86);
                  if (v85 == v87)
                  {
                    v79 = (llvm::Loop *)((char *)v269 + 16 * v86);
                  }
                  else
                  {
                    v96 = 1;
                    do
                    {
                      if (v87 == -4096)
                      {
                        v79 = (llvm::Loop *)((char *)v269 + 16 * v271);
                        goto LABEL_139;
                      }
                      v97 = v86 + v96++;
                      v86 = v97 & v81;
                      v87 = *((_QWORD *)v269 + 2 * v86);
                    }
                    while (v85 != v87);
                    v79 = (llvm::Loop *)((char *)v269 + 16 * v86);
                  }
                }
                else
                {
                  v84 = *((_DWORD *)v269 + 2);
                }
LABEL_139:
                if (v84 < *((_DWORD *)v79 + 2))
                  *v77 = v71;
              }
              else
              {
                *v77 = 0;
              }
            }
LABEL_136:
            v69 = (_QWORD *)*v69;
            if (v69)
              continue;
            v99 = (void **)v285;
            if (v285)
            {
              v100 = 0;
              v101 = &v285;
              while (1)
              {
                v103 = (uint64_t)v99[1];
                v102 = (uint64_t *)(v99 + 1);
                v292 = 0;
                if ((sub_1C49F21C0((uint64_t)v302, v304, v103, &v292) & 1) != 0)
                {
                  if (*((uint64_t **)v292 + 1) == v102)
                  {
                    v104 = (void **)*v101;
                    goto LABEL_183;
                  }
                }
                else
                {
                  v105 = sub_1C5305ED0((uint64_t)&v302, v102, v292);
                  *v105 = *v102;
                  v105[1] = 0;
                }
                v104 = *(void ***)*v101;
                if (!v104)
                {
LABEL_176:
                  v109 = 1;
                  goto LABEL_177;
                }
                while (1)
                {
                  v107 = v104 + 1;
                  v106 = (uint64_t)v104[1];
                  v292 = 0;
                  if ((sub_1C49F21C0((uint64_t)v302, v304, v106, &v292) & 1) == 0)
                  {
                    v108 = sub_1C5305ED0((uint64_t)&v302, (uint64_t *)v104 + 1, v292);
                    *v108 = *v107;
                    v108[1] = 0;
                    goto LABEL_175;
                  }
                  if (*((_QWORD **)v292 + 1) == v107)
                    break;
LABEL_175:
                  v104 = (void **)*v104;
                  if (!v104)
                    goto LABEL_176;
                }
                v109 = 0;
LABEL_177:
                if (v101 != v104)
                {
                  v110 = v101;
                  do
                  {
                    v111 = v110;
                    v110 = (void **)*v110;
                  }
                  while (v110 != v104);
                  if (v111 != v101)
                  {
                    *v111 = v100;
                    v100 = *v101;
                    *v101 = v104;
                  }
                }
                if ((v109 & 1) != 0)
                {
LABEL_184:
                  if (v100)
                  {
                    do
                    {
                      v112 = (_QWORD *)*v100;
                      operator delete(v100);
                      v100 = v112;
                    }
                    while (v112);
                  }
                  break;
                }
LABEL_183:
                v99 = (void **)*v104;
                v101 = v104;
                if (!*v104)
                  goto LABEL_184;
              }
            }
LABEL_186:
            MEMORY[0x1CAA32FB4](v302, 8);
            v113 = v285;
            if (!v285)
            {
              v98 = 0;
              v32 = v260;
              v33 = v261;
              goto LABEL_367;
            }
            v292 = v294;
            v293 = 0x400000000;
            do
            {
              v114 = *(_QWORD *)(v113[2] + 40);
              v115 = (uint64_t)v274;
              v302 = &v304;
              __src = (void *)0x800000000;
              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches((_QWORD **)v268, (uint64_t)&v302);
              v116 = (uint64_t *)v302;
              if ((_DWORD)__src)
              {
                v117 = 8 * __src - 8;
                do
                {
                  v118 = *v116++;
                  v119 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v115, v114, v118);
                  v120 = !v119 || v117 == 0;
                  v117 -= 8;
                }
                while (!v120);
                v121 = v119;
                v116 = (uint64_t *)v302;
                v11 = v264;
              }
              else
              {
                v121 = 1;
              }
              if (v116 != &v304)
                free(v116);
              if (v121)
              {
                v122 = (__int128 *)(v113 + 1);
                if (*(_QWORD *)(v113[1] + 40) == **((_QWORD **)v268 + 4)
                  && sub_1C5B7B4A0(v113 + 1, &v277, (uint64_t)v268))
                {
                  v123 = *v122;
                  v124 = v293;
                  if (v293 >= (unint64_t)HIDWORD(v293))
                  {
                    v262 = *v122;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v292, (uint64_t)v294, v293 + 1, 16);
                    v123 = v262;
                    v124 = v293;
                  }
                  *((_OWORD *)v292 + v124) = v123;
                  LODWORD(v293) = v293 + 1;
                }
              }
              v113 = (_QWORD *)*v113;
            }
            while (v113);
            v125 = (char *)v292;
            if (!(_DWORD)v293)
            {
              v98 = 0;
              v32 = v260;
              v33 = v261;
              goto LABEL_363;
            }
            v32 = v260;
            v33 = v261;
            if ((_DWORD)v293 == 1)
            {
              v126 = *(_QWORD *)v292;
              goto LABEL_248;
            }
            v127 = (char *)v292 + 16 * v293;
            v128 = (char *)v292 + 16;
            v129 = v271 - 1;
            v130 = (char *)v269 + 16 * v271;
            v131 = (char *)v292 + 16;
            v132 = (uint64_t *)v292;
            do
            {
              if (v271)
              {
                v133 = ((*v132 >> 4) ^ (*v132 >> 9)) & v129;
                v134 = *((_QWORD *)v269 + 2 * v133);
                if (*v132 != v134)
                {
                  v141 = 1;
                  while (v134 != -4096)
                  {
                    v142 = v133 + v141++;
                    v133 = v142 & v129;
                    v134 = *((_QWORD *)v269 + 2 * v133);
                    if (*v132 == v134)
                      goto LABEL_214;
                  }
                  v133 = v271;
                }
LABEL_214:
                v135 = *((_DWORD *)v269 + 4 * v133 + 2);
                LODWORD(v136) = ((*(_QWORD *)v131 >> 4) ^ (*(_QWORD *)v131 >> 9)) & v129;
                v137 = (char *)v269 + 16 * v136;
                v138 = *(_QWORD *)v137;
                if (*(_QWORD *)v131 != *(_QWORD *)v137)
                {
                  v139 = 1;
                  do
                  {
                    if (v138 == -4096)
                      goto LABEL_220;
                    v140 = v136 + v139++;
                    v136 = v140 & v129;
                    v138 = *((_QWORD *)v269 + 2 * v136);
                  }
                  while (*(_QWORD *)v131 != v138);
                  v137 = (char *)v269 + 16 * v136;
                }
              }
              else
              {
                v135 = *((_DWORD *)v130 + 2);
LABEL_220:
                v137 = (char *)v269 + 16 * v271;
              }
              if (v135 < *((_DWORD *)v137 + 2))
                v132 = (uint64_t *)v131;
              v131 += 16;
            }
            while (v131 != v127);
            v126 = *v132;
            v143 = (char *)v292;
            while (1)
            {
              v144 = v125;
              v125 = v128;
              if (v271)
              {
                v145 = *((_QWORD *)v144 + 3);
                v146 = ((v145 >> 4) ^ (v145 >> 9)) & v129;
                v147 = *((_QWORD *)v269 + 2 * v146);
                if (v145 != v147)
                {
                  v155 = 1;
                  while (v147 != -4096)
                  {
                    v156 = v146 + v155++;
                    v146 = v156 & v129;
                    v147 = *((_QWORD *)v269 + 2 * v146);
                    if (v145 == v147)
                      goto LABEL_232;
                  }
                  v146 = v271;
                }
LABEL_232:
                v148 = *((_DWORD *)v269 + 4 * v146 + 2);
                v149 = *((_QWORD *)v143 + 1);
                LODWORD(v150) = ((v149 >> 4) ^ (v149 >> 9)) & v129;
                v151 = (char *)v269 + 16 * v150;
                v152 = *(_QWORD *)v151;
                if (v149 == *(_QWORD *)v151)
                  goto LABEL_239;
                v153 = 1;
                while (v152 != -4096)
                {
                  v154 = v150 + v153++;
                  v150 = v154 & v129;
                  v152 = *((_QWORD *)v269 + 2 * v150);
                  if (v149 == v152)
                  {
                    v151 = (char *)v269 + 16 * v150;
                    goto LABEL_239;
                  }
                }
              }
              else
              {
                v148 = *((_DWORD *)v130 + 2);
              }
              v151 = (char *)v269 + 16 * v271;
LABEL_239:
              if (v148 < *((_DWORD *)v151 + 2))
                v143 = v125;
              v128 = v125 + 16;
              if (v125 + 16 == v127)
              {
                v125 = v143;
LABEL_248:
                v157 = *((_QWORD *)v125 + 1);
                v302 = v306;
                __src = v306;
                v304 = 4;
                v305 = 0;
                v158 = v273[2];
                if (v271)
                {
                  LODWORD(v159) = ((v157 >> 4) ^ (v157 >> 9)) & (v271 - 1);
                  v160 = (llvm::Loop *)((char *)v269 + 16 * v159);
                  v161 = *(_QWORD *)v160;
                  if (v157 != *(_QWORD *)v160)
                  {
                    v162 = 1;
                    while (v161 != -4096)
                    {
                      v163 = v159 + v162++;
                      v159 = v163 & (v271 - 1);
                      v161 = *((_QWORD *)v269 + 2 * v159);
                      if (v157 == v161)
                      {
                        v160 = (llvm::Loop *)((char *)v269 + 16 * v159);
                        goto LABEL_386;
                      }
                    }
                    v160 = (llvm::Loop *)((char *)v269 + 16 * v271);
LABEL_386:
                    v11 = v264;
                    v34 = a8;
                    v36 = a7;
                    v35 = a4;
                    v37 = a3;
                    v32 = v260;
                    v33 = v261;
                  }
                }
                else
                {
                  v160 = v269;
                }
                sub_1C5B7B73C((uint64_t *)(*((_QWORD *)v158 + 5) + 8 * *((unsigned int *)v160 + 2) + 8), (uint64_t *)(*((_QWORD *)v158 + 5) + 8 * *((unsigned int *)v158 + 12)), (llvm::SmallPtrSetImplBase *)&v302);
                if (v271)
                {
                  LODWORD(v164) = (v271 - 1) & ((v126 >> 4) ^ (v126 >> 9));
                  v165 = (llvm::Loop *)((char *)v269 + 16 * v164);
                  v166 = *(_QWORD *)v165;
                  if (v126 != *(_QWORD *)v165)
                  {
                    v167 = 1;
                    while (v166 != -4096)
                    {
                      v168 = v164 + v167++;
                      v164 = v168 & (v271 - 1);
                      v166 = *((_QWORD *)v269 + 2 * v164);
                      if (v126 == v166)
                      {
                        v165 = (llvm::Loop *)((char *)v269 + 16 * v164);
                        goto LABEL_388;
                      }
                    }
                    v165 = (llvm::Loop *)((char *)v269 + 16 * v271);
LABEL_388:
                    v11 = v264;
                    v34 = a8;
                    v36 = a7;
                    v35 = a4;
                    v37 = a3;
                    v32 = v260;
                    v33 = v261;
                  }
                }
                else
                {
                  v165 = v269;
                }
                sub_1C5B7B73C(*((uint64_t **)v158 + 5), (uint64_t *)(*((_QWORD *)v158 + 5) + 8 * *((unsigned int *)v165 + 2)), (llvm::SmallPtrSetImplBase *)&v302);
                v169 = (char *)v290;
                v286 = (const char *)v290;
                v287 = (const char *)v290;
                v288 = 4;
                v289 = 0;
                v170 = (const char *)v290;
                if ((_DWORD)v293)
                {
                  v171 = (uint64_t *)v292;
                  v172 = 16 * v293;
                  do
                  {
                    v173 = *v171;
                    v171 += 2;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v286, *(_QWORD *)(v173 - 32));
                    v172 -= 16;
                  }
                  while (v172);
                  v170 = v286;
                  v169 = (char *)v287;
                }
                v174 = v273[1];
                v316 = v318;
                v317 = 0x400000000;
                v175 = (__int128 *)*((_QWORD *)v174 + 35);
                v176 = *((unsigned int *)v174 + 72);
                v291 = (void **)&v316;
                if ((_DWORD)v176)
                {
                  v263 = &v175[v176];
                  do
                  {
                    v177 = *(unsigned int *)(*(_QWORD *)v175 + 24);
                    if ((_DWORD)v177)
                    {
                      v178 = *(unsigned int **)(*(_QWORD *)v175 + 16);
                      v179 = &v178[v177];
                      while (1)
                      {
                        v180 = *((_QWORD *)v175 + 1);
                        v181 = *(unsigned int *)(v180 + 24);
                        if ((_DWORD)v181)
                          break;
LABEL_289:
                        if (++v178 == v179)
                          goto LABEL_292;
                      }
                      v182 = *(unsigned int **)(v180 + 16);
                      v183 = *v178;
                      v184 = 4 * v181;
                      while (1)
                      {
                        v185 = *((_QWORD *)v273[1] + 1);
                        v186 = *(_QWORD *)(v185 + (v183 << 6) + 16);
                        v187 = *(_QWORD *)(v185 + ((unint64_t)*v182 << 6) + 16);
                        v188 = sub_1C477672C((uint64_t)&v302, v186);
                        v189 = __src == v302 ? (uint64_t *)((char *)&v304 + 4) : &v304;
                        if (v188 != (_QWORD *)((char *)__src + 8 * *(unsigned int *)v189))
                        {
                          v190 = (const char *)sub_1C477672C((uint64_t)&v286, v187);
                          v191 = v287 == v286 ? (uint64_t *)((char *)&v288 + 4) : &v288;
                          if (v190 != &v287[8 * *(unsigned int *)v191])
                            break;
                        }
                        v192 = sub_1C477672C((uint64_t)&v302, v187);
                        v193 = __src == v302 ? (uint64_t *)((char *)&v304 + 4) : &v304;
                        if (v192 != (_QWORD *)((char *)__src + 8 * *(unsigned int *)v193))
                        {
                          v194 = (const char *)sub_1C477672C((uint64_t)&v286, v186);
                          v195 = v287 == v286 ? (uint64_t *)((char *)&v288 + 4) : &v288;
                          if (v194 != &v287[8 * *(unsigned int *)v195])
                            break;
                        }
                        ++v182;
                        v184 -= 4;
                        if (!v184)
                          goto LABEL_289;
                      }
                      sub_1C5B5AABC((uint64_t *)&v291, v175);
                    }
LABEL_292:
                    ++v175;
                  }
                  while (v175 != v263);
                  v170 = v286;
                  v169 = (char *)v287;
                  v11 = v264;
                  v34 = a8;
                  v36 = a7;
                  v35 = a4;
                  v37 = a3;
                  v32 = v260;
                  v33 = v261;
                }
                if (v169 != v170)
                  free(v169);
                if (__src != v302)
                  free(__src);
                if (dword_1ED81F728 * (unint64_t)v293 < v317
                  || (***((unsigned int (****)(_QWORD))*v273 + 13))(*((_QWORD *)*v273 + 13)) > dword_1ED81F7E8
                  || !llvm::Loop::isLoopSimplifyForm(v268))
                {
                  goto LABEL_359;
                }
                if (!(_DWORD)v317
                  && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)*v273 + 13) + 8))(*((_QWORD *)*v273 + 13)) & 1) != 0)
                {
                  goto LABEL_303;
                }
                if (*((_BYTE *)v273 + 49)
                  || (v249 = (llvm::BasicBlock *)**((_QWORD **)v268 + 4),
                      (v250 = *(_QWORD *)(*((_QWORD *)v249 + 7) + 112)) != 0)
                  && ((*(_BYTE *)(v250 + 17) & 4) != 0 || *(char *)(v250 + 13) < 0))
                {
LABEL_359:
                  v98 = 0;
                }
                else
                {
                  v98 = 0;
                  if (!llvm::shouldOptimizeForSize(v249, v276, v275))
                  {
                    llvm::LoopVersioning::LoopVersioning((uint64_t)&v302, (uint64_t)v273, v316, v317, (uint64_t)v268, v272, (uint64_t)v274, (uint64_t)v283);
                    sub_1C631B8A8((uint64_t *)&v302);
                    v251 = (char *)v292;
                    if (!(_DWORD)v293)
                      goto LABEL_384;
                    v252 = 16 * v293;
                    v253 = (char *)v292 + v252;
                    while (*(_WORD *)(llvm::PredicatedScalarEvolution::getSCEV(&v277, *(llvm::Value **)(*(_QWORD *)v251 - 32))+ 24) == 7&& *(_WORD *)(llvm::PredicatedScalarEvolution::getSCEV(&v277, *(llvm::Value **)(*((_QWORD *)v251 + 1) - 32))+ 24) == 7)
                    {
                      v251 += 16;
                      v252 -= 16;
                      if (!v252)
                        goto LABEL_394;
                    }
                    v254 = v252 - 16;
                    if (v254)
                    {
                      v255 = 0;
                      v253 = v251;
                      do
                      {
                        if (*(_WORD *)(llvm::PredicatedScalarEvolution::getSCEV(&v277, *(llvm::Value **)(*(_QWORD *)&v251[v255 + 16] - 32))+ 24) == 7&& *(_WORD *)(llvm::PredicatedScalarEvolution::getSCEV(&v277, *(llvm::Value **)(*(_QWORD *)&v251[v255 + 24] - 32))+ 24) == 7)
                        {
                          *(_OWORD *)v253 = *(_OWORD *)&v251[v255 + 16];
                          v253 += 16;
                        }
                        v11 = v264;
                        v255 += 16;
                      }
                      while (v254 != v255);
                    }
                    else
                    {
LABEL_384:
                      v253 = v251;
                    }
LABEL_394:
                    LODWORD(v293) = (unint64_t)(v253 - (_BYTE *)v292) >> 4;
                    sub_1C631A498(&v302);
                    v35 = a4;
LABEL_303:
                    sub_1C50D02DC((uint64_t)&v302, v283, *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v268 + 4) + 56) + 40) + 272, (uint64_t)"storeforward", 1);
                    if ((_DWORD)v293)
                    {
                      v196 = (llvm::ValueAsMetadata **)v292;
                      v197 = (llvm::ValueAsMetadata **)((char *)v292 + 16 * v293);
                      do
                      {
                        v198 = (llvm::Value *)*((_QWORD *)*v196 - 4);
                        SCEV = llvm::PredicatedScalarEvolution::getSCEV(&v277, v198);
                        result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v268);
                        if (!result)
                          goto LABEL_312;
                        v201 = *(_QWORD *)(result + 40);
                        if (v201 == result + 40)
                          goto LABEL_312;
                        if (v201)
                          v202 = v201 - 24;
                        else
                          v202 = 0;
                        if (*(_BYTE *)(v202 + 16) != 30)
                        {
                          v203 = 0;
                          switch(*(_BYTE *)(v202 + 16))
                          {
                            case 0x1D:
                            case 0x21:
                            case 0x22:
                            case 0x23:
                            case 0x24:
                            case 0x25:
                            case 0x26:
                              goto LABEL_317;
                            case 0x1E:
                              __break(1u);
                              return result;
                            case 0x1F:
                              v204 = (*(_DWORD *)(v202 + 20) >> 1) & 0x3FFFFFF;
                              goto LABEL_315;
                            case 0x20:
                              v204 = (*(_DWORD *)(v202 + 20) & 0x7FFFFFF) - 1;
                              goto LABEL_315;
                            case 0x27:
                              v204 = *(_DWORD *)(v202 + 80) + 1;
LABEL_315:
                              if (v204 == 1)
                                goto LABEL_316;
                              goto LABEL_312;
                            default:
                              goto LABEL_312;
                          }
                        }
                        if ((*(_DWORD *)(v202 + 20) & 0x7FFFFFF) == 3)
LABEL_312:
                          v203 = 0;
                        else
LABEL_316:
                          v203 = result;
LABEL_317:
                        v206 = (_QWORD *)(v203 + 40);
                        v205 = *(_QWORD *)(v203 + 40);
                        if (v205 == v203 + 40)
                        {
                          v208 = 0;
                        }
                        else
                        {
                          if (v205)
                            v207 = (unsigned __int8 *)(v205 - 24);
                          else
                            v207 = 0;
                          if (v207[16] - 29 >= 0xB)
                            v208 = 0;
                          else
                            v208 = (llvm::Instruction *)v207;
                        }
                        v209 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v302, **(llvm::Instruction ****)(SCEV + 32), *(llvm::Type **)v198, v208);
                        v210 = (char *)operator new(0x60uLL);
                        v211 = v210;
                        v212 = (llvm::Value *)(v210 + 32);
                        *((_DWORD *)v210 + 13) = *((_DWORD *)v210 + 13) & 0x38000000 | 1;
                        *(_QWORD *)v210 = 0;
                        *((_QWORD *)v210 + 1) = 0;
                        *((_QWORD *)v210 + 2) = 0;
                        *((_QWORD *)v210 + 3) = v210 + 32;
                        v213 = *(_QWORD *)*v196;
                        v286 = "load_initial";
                        v290[0] = 259;
                        v214 = (_QWORD *)*v206;
                        if ((_QWORD *)*v206 == v206)
                        {
                          v217 = 0;
                        }
                        else
                        {
                          v215 = v214 - 3;
                          if (v214)
                            v216 = v214 - 3;
                          else
                            v216 = 0;
                          if (*((unsigned __int8 *)v216 + 16) - 29 >= 0xB)
                            v217 = 0;
                          else
                            v217 = v215;
                        }
                        v218 = *((_WORD *)*v196 + 9);
                        *(_OWORD *)(v210 + 56) = 0u;
                        v219 = v210 + 56;
                        *((_QWORD *)v210 + 4) = v213;
                        *((_QWORD *)v210 + 5) = 0;
                        *((_QWORD *)v210 + 6) = 0x10000003CLL;
                        *(_OWORD *)(v210 + 72) = 0u;
                        *((_DWORD *)v210 + 22) = 0;
                        if (v217)
                        {
                          v235 = v217[5];
                          v236 = v217 + 3;
                          *((_QWORD *)v210 + 9) = v235;
                          *(_WORD *)(v235 + 18) &= ~0x8000u;
                          if ((v210[55] & 0x10) != 0
                            && (v240 = *(_QWORD *)(v235 + 56)) != 0
                            && (v241 = *(llvm::ValueSymbolTable **)(v240 + 104)) != 0)
                          {
                            llvm::ValueSymbolTable::reinsertValue(v241, v212);
                            v242 = *(_QWORD *)v211;
                            v243 = *v236;
                            *((_QWORD *)v211 + 7) = *v236;
                            *((_QWORD *)v211 + 8) = v236;
                            *(_QWORD *)(v243 + 8) = v219;
                            *v236 = (uint64_t)v219;
                            if (v242)
                            {
                              **((_QWORD **)v211 + 2) = *((_QWORD *)v211 + 1);
                              v244 = *((_QWORD *)v211 + 1);
                              if (v244)
                                *(_QWORD *)(v244 + 16) = *((_QWORD *)v211 + 2);
                            }
                          }
                          else
                          {
                            v237 = *v236;
                            *((_QWORD *)v211 + 7) = *v236;
                            *((_QWORD *)v211 + 8) = v236;
                            *(_QWORD *)(v237 + 8) = v219;
                            *v236 = (uint64_t)v219;
                          }
                        }
                        *(_QWORD *)v211 = v209;
                        if (v209)
                        {
                          v222 = *((_QWORD *)v209 + 1);
                          v221 = v209 + 8;
                          v220 = v222;
                          *((_QWORD *)v211 + 1) = v222;
                          if (v222)
                            *(_QWORD *)(v220 + 16) = v211 + 8;
                          *((_QWORD *)v211 + 2) = v221;
                          *v221 = v211;
                        }
                        *((_WORD *)v211 + 25) = *((_WORD *)v211 + 25) & 0xFC00 | v218 & 0x7E;
                        v211[92] = 1;
                        llvm::Value::setName((uint64_t ***)v212, (uint64_t)&v286);
                        v223 = *((_QWORD *)v211 + 4);
                        v286 = "store_forwarded";
                        v290[0] = 259;
                        v224 = *(uint64_t **)(**((_QWORD **)v268 + 4) + 48);
                        v225 = operator new(0x48uLL);
                        v226 = v225;
                        v225[1] = v223;
                        v227 = (llvm::Value *)(v225 + 1);
                        *v225 = 0;
                        v225[2] = 0;
                        v225[3] = 0x4000000000000053;
                        *((_OWORD *)v225 + 2) = 0u;
                        v228 = (char *)(v225 + 4);
                        *((_OWORD *)v225 + 3) = 0u;
                        *((_DWORD *)v225 + 16) = 0;
                        if (v224)
                        {
                          v238 = v224[2];
                          v225[6] = v238;
                          *(_WORD *)(v238 + 18) &= ~0x8000u;
                          if ((*((_BYTE *)v225 + 31) & 0x10) != 0)
                          {
                            v245 = *(_QWORD *)(v238 + 56);
                            if (v245)
                            {
                              v246 = *(llvm::ValueSymbolTable **)(v245 + 104);
                              if (v246)
                                llvm::ValueSymbolTable::reinsertValue(v246, v227);
                            }
                          }
                          v239 = *v224;
                          v226[4] = *v224;
                          v226[5] = v224;
                          *(_QWORD *)(v239 + 8) = v228;
                          *v224 = (uint64_t)v228;
                        }
                        *((_DWORD *)v226 + 17) = 2;
                        llvm::Value::setName((uint64_t ***)v227, (uint64_t)&v286);
                        v229 = *((unsigned int *)v226 + 17);
                        v230 = operator new(40 * v229);
                        *v226 = v230;
                        if ((_DWORD)v229)
                        {
                          v231 = &v230[4 * v229];
                          do
                          {
                            *v230 = 0;
                            v230[1] = 0;
                            v230[2] = 0;
                            v230[3] = v227;
                            v230 += 4;
                          }
                          while (v230 != v231);
                        }
                        sub_1C477667C(v227, (uint64_t)v212, v203);
                        v232 = *((_QWORD *)v196[1] - 8);
                        v233 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v268);
                        sub_1C477667C(v227, v232, v233);
                        v234 = *v196;
                        v196 += 2;
                        llvm::Value::doRAUW(v234, v227, (llvm::Value *)1);
                        v11 = v264;
                        v36 = a7;
                        v35 = a4;
                        v32 = v260;
                      }
                      while (v196 != v197);
                    }
                    sub_1C50D05E0((uint64_t)&v302);
                    v98 = 1;
                    v37 = a3;
                    v33 = v261;
                  }
                }
                if (v316 != v318)
                  free(v316);
                v125 = (char *)v292;
LABEL_363:
                if (v125 != (char *)v294)
                  free(v125);
                v247 = v285;
                if (v285)
                {
                  do
                  {
                    v248 = (_QWORD *)*v247;
                    operator delete(v247);
                    v247 = v248;
                  }
                  while (v248);
                }
LABEL_367:
                sub_1C4EA4224(v284);
                if (v282)
                {
                  sub_1C4E43068((uint64_t)v281);
                  MEMORY[0x1CAA32FB4](v281[0], 8);
                  v282 = 0;
                }
                v11 |= v98;
                sub_1C4EA427C(&v278);
                MEMORY[0x1CAA32FB4](v278, 8);
                MEMORY[0x1CAA32FB4](v277.i64[0], 8);
                MEMORY[0x1CAA32FB4](v269, 8);
LABEL_370:
                if (++v32 == v33)
                {
                  v32 = (uint64_t *)v299;
                  goto LABEL_395;
                }
                goto LABEL_67;
              }
            }
          }
          v90 = 0;
          v91 = 1;
          while (v74 != (void *)-4096)
          {
            if (v90)
              v92 = 0;
            else
              v92 = v74 == (void *)-8192;
            if (v92)
              v90 = v73;
            v93 = v72 + v91++;
            v72 = v93 & (v304 - 1);
            v73 = (char *)v302 + 16 * v72;
            v74 = (void *)*v73;
            if (v70 == (void *)*v73)
              goto LABEL_125;
          }
          if (v90)
            v88 = v90;
          else
            v88 = v73;
        }
        else
        {
          v88 = 0;
        }
        break;
      }
      v89 = sub_1C5305ED0((uint64_t)&v302, (uint64_t *)&v292, v88);
      *v89 = v70;
      v89[1] = v71;
      goto LABEL_136;
    }
LABEL_395:
    if (v32 != (uint64_t *)v301)
      free(v32);
  }
  return v11 & 1;
}

uint64_t sub_1C5B7B194()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B796A0(v0);
}

void sub_1C5B7B1C0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AnalysisUsage *sub_1C5B7B1E4(uint64_t a1, llvm::LazyBlockFrequencyInfoPass *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LoopAccessLegacyAnalysis::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  return llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B7B2C0(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  llvm::Loop *v16;
  uint64_t v17;
  uint64_t **v18;
  char **v19;
  char *v20;
  int32x2_t *v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v4 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::LoopInfoWrapperPass::ID);
  v7 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::LoopAccessLegacyAnalysis::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::LoopAccessLegacyAnalysis::ID);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::DominatorTreeWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::DominatorTreeWrapperPass::ID);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::ProfileSummaryInfoWrapperPass::ID);
  v15 = v6 + 32;
  v16 = (llvm::Loop *)(v12 + 32);
  v17 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  if (*(_QWORD *)(v17 + 8))
  {
    v22 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v23 = *v22;
      v22 += 2;
    }
    while (v23 != llvm::LazyBlockFrequencyInfoPass::ID);
    v24 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
    v18 = (uint64_t **)sub_1C619C0A4(v24 + 32);
  }
  else
  {
    v18 = 0;
  }
  v19 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::ScalarEvolutionWrapperPass::ID);
  v21 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v25 = v9;
  return sub_1C5B7994C(v15, v16, v18, v17, v21, 0, (uint64_t (*)(uint64_t, llvm::Loop *))sub_1C5B7B498, (uint64_t)&v25);
}

uint64_t sub_1C5B7B498(llvm::LoopAccessLegacyAnalysis **a1, llvm::Loop *a2)
{
  return llvm::LoopAccessLegacyAnalysis::getInfo(*a1, a2);
}

BOOL sub_1C5B7B4A0(_QWORD *a1, int8x16_t *a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t PtrStride;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  const char *v17;
  char v18;
  char v19;
  uint64_t SCEV;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[2];
  int v27;
  _QWORD v28[2];
  int v29;

  v6 = *a1;
  v7 = *(llvm::Value **)(*a1 - 32);
  if (!*a1 || *(_BYTE *)(v6 + 16) != 60)
    v6 = *(_QWORD *)(v6 - 64);
  v8 = *(llvm::Value **)(a1[1] - 32);
  v9 = *(_QWORD *)v6;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  if (llvm::getPtrStride(a2, v9, v7, a3, (uint64_t)v28, 0, 1) == 1)
  {
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    PtrStride = llvm::getPtrStride(a2, v9, v8, a3, (uint64_t)v26, 0, 1);
    MEMORY[0x1CAA32FB4](v26[0], 8);
    MEMORY[0x1CAA32FB4](v28[0], 8);
    result = 0;
    if (PtrStride != 1)
      return result;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 56) + 40) + 272;
    sub_1C4768AD0(v12, v9);
    v14 = v13;
    v16 = v15 == 1;
    llvm::DataLayout::getAlignment(v12, v9);
    v19 = v18;
    if (v16)
    SCEV = llvm::PredicatedScalarEvolution::getSCEV(a2, v7);
    v21 = llvm::PredicatedScalarEvolution::getSCEV(a2, v8);
    llvm::ScalarEvolution::getMinusSCEV(a2[5].i64[1], v21, SCEV);
    v23 = *(_QWORD *)(v22 + 32);
    v24 = (_QWORD *)(v23 + 24);
    v25 = *(_DWORD *)(v23 + 32);
    if (v25 < 0x41)
      return *v24 == (-(1 << v19) & ((1 << v19) - 1 + ((unint64_t)(v14 + 7) >> 3)));
    if (v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 24)) <= 0x40)
    {
      v24 = (_QWORD *)*v24;
      return *v24 == (-(1 << v19) & ((1 << v19) - 1 + ((unint64_t)(v14 + 7) >> 3)));
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](v28[0], 8);
  }
  return 0;
}

_QWORD *sub_1C5B7B680(_DWORD *a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = a1[4];
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C4D8D8F4(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

llvm::SmallPtrSetImplBase *sub_1C5B7B73C(uint64_t *a1, uint64_t *a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      if (*v5 && *(_BYTE *)(v6 + 16) == 61)
        sub_1C4774094(this, *(_QWORD *)(v6 - 32));
      ++v5;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_1C5B7B7A0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  _OWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v8 = 0;
  v9 = 0;
  v6 = v3;
  v7 = 0;
  return llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(*(_QWORD *)(a1 + 56), &llvm::LoopAccessAnalysis::Key, a2, (uint64_t)v5)+ 8;
}

uint64_t sub_1C5B7B7F0()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v2 = 1;
  v3 = 1;
  *(_QWORD *)&v1 = "Max number of memchecks allowed per eliminated load on average";
  *((_QWORD *)&v1 + 1) = 62;
  v4 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED81F6A8, "runtime-check-per-loop-load-elim", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81F6A8, &dword_1C475E000);
  v2 = 1;
  v3 = 8;
  v4 = &v3;
  *(_QWORD *)&v1 = "The maximum number of SCEV checks allowed for Loop Load Elimination";
  *((_QWORD *)&v1 + 1) = 67;
  sub_1C631B928(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81F768, &dword_1C475E000);
}

_QWORD *llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::run@<X0>(uint64_t a1@<X0>, llvm::Loop *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, llvm::SmallPtrSetImplBase *a6@<X8>)
{
  if (*(_QWORD *)a2 || *(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104))
    llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::runWithoutLoopNestPasses(a1, a2, a3, a4, a5, (uint64_t)a6);
  else
    llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::runWithLoopNestPasses(a1, a2, a3, a4, a5, (uint64_t)a6);
  return sub_1C4D8B5A8(a6, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey);
}

void llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::runWithLoopNestPasses(uint64_t a1@<X0>, llvm::Loop *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  llvm::LoopNest *v15;
  llvm::ScalarEvolution *v16;
  llvm::LoopNest *v17;
  llvm::ScalarEvolution *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  const void *v47;
  size_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t ***v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ****v59;
  uint64_t ***v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t ***v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  int v101;
  void *v102;
  void *v103;
  int v104;
  int v105;
  char *v106;
  unsigned int *v107;
  char *v108;
  llvm::LoopNest *v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Loop *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  void **v121;
  int v122;
  int v123;
  int v124;
  _BYTE v125[16];
  _BYTE *v126;
  _BYTE *v127;
  int v128;
  int v129;
  int v130;
  _BYTE v131[16];
  char v132;
  void *v133;
  void *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  int v143;
  void *v144;
  void *v145;
  uint64_t v146;
  int v147;
  _BYTE *v148;
  _BYTE *v149;
  uint64_t v150;
  int v151;
  _BYTE v152[16];
  _BYTE *v153;
  _BYTE *v154;
  uint64_t v155;
  int v156;
  _BYTE v157[16];
  _QWORD *v158;

  v11 = a6;
  v12 = a6 + 32;
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = 2;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 48) = v11 + 80;
  *(_QWORD *)(v11 + 56) = v11 + 80;
  *(_QWORD *)(v11 + 64) = 2;
  *(_DWORD *)(v11 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)v11, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v118 = a3;
  v139 = *(_QWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, (uint64_t)a2, a4)+ 8);
  v116 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v116)
    return;
  v119 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v110 = off_1EF8EEB50(&off_1EF8EEB50);
  v117 = a4;
  v113 = a1;
  v114 = a5;
  v111 = v11;
  v112 = a2;
  do
  {
    LOBYTE(v133) = 0;
    v138 = 0;
    if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * (v13 >> 6)) >> v13) & 1) == 0)
    {
      sub_1C5B7C4C8((uint64_t)&v120, (uint64_t)a2, (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * HIDWORD(v119)), v118, v117, a5, &v139);
      sub_1C631BB88((uint64_t)&v133, (uint64_t)&v120);
      if (v132)
      {
        if (v127 != v126)
          free(v127);
        if (v121 != v120)
          free(v121);
      }
      ++HIDWORD(v119);
      goto LABEL_120;
    }
    v115 = *(_QWORD *)(a1 + 96);
    if ((v14 & 1) == 0)
    {
      v16 = *(llvm::ScalarEvolution **)(v117 + 32);
      v17 = (llvm::LoopNest *)operator new();
      llvm::LoopNest::LoopNest(v17, a2, v16, v18);
      if (v15)
      {
        v19 = (char *)*((_QWORD *)v15 + 1);
        if (v19 != (char *)v15 + 24)
          free(v19);
        MEMORY[0x1CAA32FC0](v15, 0x1080C40AE5A6257);
      }
      v15 = v17;
    }
    v20 = **((_QWORD **)v15 + 1);
    v21 = v139;
    if (v139)
    {
      v22 = *(_QWORD *)(v115 + 8 * v119);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22) & 1) == 0)
      {
        v23 = *(unsigned int *)(v21 + 8);
        if ((_DWORD)v23)
        {
          v109 = v15;
          v24 = *(_QWORD **)v21;
          v25 = 32 * v23;
          v26 = 1;
          do
          {
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
            v29 = v28;
            v148 = 0;
            v30 = (_QWORD *)operator new();
            *v30 = &unk_1E8138DE8;
            v30[1] = v20;
            v31 = v148;
            v148 = v30;
            if (v31)
              (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
            v32 = v24[3];
            v33 = v24;
            if ((v32 & 2) == 0)
              v33 = (_QWORD *)*v24;
            v34 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _BYTE **))(v32 & 0xFFFFFFFFFFFFFFF8))(v33, v27, v29, &v148);
            v35 = v148;
            v148 = 0;
            if (v35)
              (*(void (**)(void *))(*(_QWORD *)v35 + 8))(v35);
            v26 &= v34;
            v24 += 4;
            v25 -= 32;
          }
          while (v25);
          v21 = v139;
          if (!v26)
          {
            v63 = *(unsigned int *)(v139 + 152);
            if ((_DWORD)v63)
            {
              v64 = *(_QWORD **)(v139 + 144);
              v65 = 32 * v63;
              do
              {
                v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
                v68 = v67;
                v158 = 0;
                v69 = (_QWORD *)operator new();
                *v69 = &unk_1E8138DE8;
                v69[1] = v20;
                v70 = v158;
                v158 = v69;
                if (v70)
                  (*(void (**)(_QWORD *))(*v70 + 8))(v70);
                v71 = v64[3];
                v72 = v64;
                if ((v71 & 2) == 0)
                  v72 = (_QWORD *)*v64;
                (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v71 & 0xFFFFFFFFFFFFFFF8))(v72, v66, v68, &v158);
                v73 = v158;
                v158 = 0;
                if (v73)
                  (*(void (**)(_QWORD *))(*v73 + 8))(v73);
                v64 += 4;
                v65 -= 32;
              }
              while (v65);
            }
            LOBYTE(v120) = 0;
            v132 = 0;
            a2 = v112;
            a1 = v113;
            v15 = v109;
            a5 = v114;
            goto LABEL_114;
          }
          v15 = v109;
        }
      }
      v36 = *(unsigned int *)(v21 + 296);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD **)(v21 + 288);
        v38 = 32 * v36;
        do
        {
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
          v41 = v40;
          v140 = 0;
          v42 = (_QWORD *)operator new();
          *v42 = &unk_1E8138DE8;
          v42[1] = v20;
          v43 = v140;
          v140 = v42;
          if (v43)
            (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
          v44 = v37[3];
          v45 = v37;
          if ((v44 & 2) == 0)
            v45 = (_QWORD *)*v37;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v44 & 0xFFFFFFFFFFFFFFF8))(v45, v39, v41, &v140);
          v46 = v140;
          v140 = 0;
          if (v46)
            (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
          v37 += 4;
          v38 -= 32;
        }
        while (v38);
      }
    }
    v148 = v152;
    v149 = v152;
    v150 = 2;
    v151 = 0;
    v153 = v157;
    v154 = v157;
    v155 = 2;
    v156 = 0;
    v47 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v115 + 8 * v119) + 32))(*(_QWORD *)(v115 + 8 * v119));
    v51 = **(uint64_t *****)(**((_QWORD **)v15 + 1) + 32);
    if (v51)
    {
      v49 = *((unsigned __int8 *)v51 + 23);
      v53 = v117;
      v54 = (uint64_t *)v110;
      a5 = v114;
      if ((v49 & 0x10) == 0)
      {
        v52 = 1;
        goto LABEL_60;
      }
      v55 = ***v51;
      v56 = *(_QWORD *)(v55 + 152);
      v57 = *(unsigned int *)(v55 + 168);
      if ((_DWORD)v57)
      {
        LODWORD(v58) = (v57 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        v59 = (uint64_t ****)(v56 + 16 * v58);
        v60 = *v59;
        if (*v59 == v51)
        {
LABEL_59:
          v52 = 0;
          v74 = v59[1];
          v75 = (uint64_t)*v74;
          v50 = (const char *)(v74 + 2);
          v49 = v75;
          goto LABEL_60;
        }
        v61 = 1;
        while (v60 != (uint64_t ***)-4096)
        {
          v62 = v58 + v61++;
          v58 = v62 & (v57 - 1);
          v60 = *(uint64_t ****)(v56 + 16 * v58);
          if (v60 == v51)
          {
            v59 = (uint64_t ****)(v56 + 16 * v58);
            goto LABEL_59;
          }
        }
      }
      v59 = (uint64_t ****)(v56 + 16 * v57);
      goto LABEL_59;
    }
    v52 = 1;
    v53 = v117;
    v54 = (uint64_t *)v110;
    a5 = v114;
LABEL_60:
    if (*v54)
    {
      if (v52)
        v76 = "<unnamed loop>";
      else
        v76 = v50;
      if (v52)
        v77 = 14;
      else
        v77 = v49;
      llvm::timeTraceProfilerBegin(v47, v48, (uint64_t)v76, v77);
    }
    (*(void (**)(void **__return_ptr, _QWORD, llvm::LoopNest *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v115 + 8 * v119) + 16))(&v140, *(_QWORD *)(v115 + 8 * v119), v15, v118, v53, a5);
    if (v149 != v148)
      free(v149);
    if (v141 == v140)
    {
      v149 = v148;
      if (HIDWORD(v142))
        memmove(v148, v141, 8 * HIDWORD(v142));
    }
    else
    {
      v149 = v141;
      v141 = v140;
    }
    v150 = v142;
    v151 = v143;
    v142 = 2;
    v143 = 0;
    if (v154 != v153)
      free(v154);
    v78 = v144;
    v79 = v145;
    if (v145 == v144)
    {
      v154 = v153;
      if (HIDWORD(v146))
      {
        memmove(v153, v145, 8 * HIDWORD(v146));
        v79 = v144;
      }
      v78 = v145;
    }
    else
    {
      v154 = v145;
      v145 = v144;
      v79 = v144;
    }
    v155 = v146;
    v156 = v147;
    v146 = 2;
    v147 = 0;
    if (v78 != v79)
      free(v78);
    if (v141 != v140)
      free(v141);
    if (*v54)
      sub_1C6392DC0(*v54);
    v80 = *(_QWORD *)(v115 + 8 * v119);
    if (*(_BYTE *)(a5 + 24))
    {
      if (v139)
      {
        v92 = *(unsigned int *)(v139 + 584);
        if ((_DWORD)v92)
        {
          v93 = *(_QWORD **)(v139 + 576);
          v94 = 32 * v92;
          do
          {
            v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80);
            v97 = v93[3];
            v98 = v93;
            if ((v97 & 2) == 0)
              v98 = (_QWORD *)*v93;
            (*(void (**)(_QWORD *, uint64_t, uint64_t, _BYTE **))(v97 & 0xFFFFFFFFFFFFFFF8))(v98, v96, v95, &v148);
            v93 += 4;
            v94 -= 32;
          }
          while (v94);
        }
      }
    }
    else
    {
      if (v139)
      {
        v81 = *(unsigned int *)(v139 + 440);
        if ((_DWORD)v81)
        {
          v82 = *(_QWORD **)(v139 + 432);
          v83 = 32 * v81;
          do
          {
            v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80);
            v86 = v85;
            v140 = 0;
            v87 = (_QWORD *)operator new();
            *v87 = &unk_1E8138DE8;
            v87[1] = v20;
            v88 = v140;
            v140 = v87;
            if (v88)
              (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
            v89 = v82[3];
            v90 = v82;
            if ((v89 & 2) == 0)
              v90 = (_QWORD *)*v82;
            (*(void (**)(_QWORD *, uint64_t, uint64_t, void **, _BYTE **))(v89 & 0xFFFFFFFFFFFFFFF8))(v90, v84, v86, &v140, &v148);
            v91 = v140;
            v140 = 0;
            if (v91)
              (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
            v82 += 4;
            v83 -= 32;
          }
          while (v83);
        }
      }
      a5 = v114;
    }
    v120 = (void **)v125;
    v99 = v148;
    v100 = v149;
    if (v149 == v148)
    {
      v121 = (void **)v125;
      v101 = HIDWORD(v150);
      if (HIDWORD(v150))
        memmove(v125, v149, 8 * HIDWORD(v150));
    }
    else
    {
      v121 = (void **)v149;
      v149 = v148;
      v100 = v148;
      v101 = HIDWORD(v150);
    }
    v122 = v150;
    v123 = v101;
    v124 = v151;
    v150 = 2;
    v151 = 0;
    v126 = v131;
    v102 = v153;
    v103 = v154;
    if (v154 == v153)
    {
      v127 = v131;
      v104 = HIDWORD(v155);
      if (HIDWORD(v155))
        memmove(v131, v154, 8 * HIDWORD(v155));
    }
    else
    {
      v127 = v154;
      v154 = v153;
      v103 = v153;
      v104 = HIDWORD(v155);
    }
    v128 = v155;
    v129 = v104;
    v130 = v156;
    v155 = 2;
    v156 = 0;
    v132 = 1;
    if (v103 != v102)
    {
      free(v103);
      v99 = v148;
      v100 = v149;
    }
    a2 = v112;
    if (v100 != v99)
      free(v100);
    a1 = v113;
LABEL_114:
    sub_1C631BB88((uint64_t)&v133, (uint64_t)&v120);
    v11 = v111;
    if (v132)
    {
      if (v127 != v126)
        free(v127);
      if (v121 != v120)
        free(v121);
    }
    LODWORD(v119) = v119 + 1;
    v14 = 1;
LABEL_120:
    if (v138)
    {
      v105 = *(unsigned __int8 *)(a5 + 24);
      if (*(_BYTE *)(a5 + 24))
      {
        sub_1C4DD4444(v11, (uint64_t)&v133);
      }
      else
      {
        llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(v118, (uint64_t)a2, (uint64_t)&v133);
        sub_1C4DD4444(v11, (uint64_t)&v133);
        v120 = &v133;
        v121 = (void **)&llvm::LoopNestAnalysis::Key;
        v106 = (char *)sub_1C477672C((uint64_t)&v135, (uint64_t)&llvm::LoopNestAnalysis::Key);
        a1 = v113;
        if (v136 == v135)
          v107 = (unsigned int *)&v137 + 1;
        else
          v107 = (unsigned int *)&v137;
        LOBYTE(v122) = v106 != &v136[8 * *v107];
        v14 &= sub_1C4DAA35C((uint64_t)&v120);
        *(_QWORD *)(a5 + 32) = *(_QWORD *)a2;
      }
      if (v138)
      {
        if (v136 != v135)
          free(v136);
        if (v134 != v133)
          free(v134);
      }
      if (v105)
        break;
    }
    ++v13;
  }
  while (v13 != v116);
  if (v15)
  {
    v108 = (char *)*((_QWORD *)v15 + 1);
    if (v108 != (char *)v15 + 24)
      free(v108);
    MEMORY[0x1CAA32FC0](v15, 0x1080C40AE5A6257);
  }
}

void llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::runWithoutLoopNestPasses(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  uint64_t v21;

  v12 = a6 + 32;
  *(_QWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = 2;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 48) = a6 + 80;
  *(_QWORD *)(a6 + 56) = a6 + 80;
  *(_QWORD *)(a6 + 64) = 2;
  *(_DWORD *)(a6 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v21 = *(_QWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, (uint64_t)a2, a4)+ 8);
  v13 = *(uint64_t **)(a1 + 72);
  v14 = *(uint64_t **)(a1 + 80);
  while (v13 != v14)
  {
    sub_1C5B7C4C8((uint64_t)&v16, (uint64_t)a2, v13, a3, a4, a5, &v21);
    if (v20)
    {
      v15 = *(unsigned __int8 *)(a5 + 24);
      if (*(_BYTE *)(a5 + 24))
      {
        sub_1C4DD4444(a6, (uint64_t)&v16);
      }
      else
      {
        llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(a3, (uint64_t)a2, (uint64_t)&v16);
        sub_1C4DD4444(a6, (uint64_t)&v16);
        *(_QWORD *)(a5 + 32) = *a2;
      }
      if (v20)
      {
        if (v19 != v18)
          free(v19);
        if (v17 != v16)
          free(v17);
      }
      if (v15)
        break;
    }
    ++v13;
  }
}

void sub_1C5B7C4C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t ***v19;
  int v20;
  unsigned int v21;
  size_t v22;
  const void *v23;
  int v24;
  uint64_t v25;
  const char *v26;
  uint64_t *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  int v46;
  void *v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  int v55;
  void *v56;
  void *v57;
  uint64_t v58;
  int v59;
  void *__dst;
  _BYTE *v61;
  uint64_t v62;
  int v63;
  _BYTE v64[16];
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  int v68;
  _BYTE v69[16];

  if ((sub_1C5B7D094(a7, *a3, a2) & 1) != 0)
  {
    __dst = v64;
    v61 = v64;
    v62 = 2;
    v63 = 0;
    v65 = v69;
    v66 = v69;
    v67 = 2;
    v68 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 32))(*a3);
    v14 = **(uint64_t *****)(a2 + 32);
    if (v14)
    {
      if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
      {
        v15 = ***v14;
        v16 = *(_QWORD *)(v15 + 152);
        v17 = *(_DWORD *)(v15 + 168);
        if (v17)
        {
          v18 = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          v19 = *(uint64_t ****)(v16 + 16 * v18);
          if (v19 != v14)
          {
            v20 = 1;
            do
            {
              if (v19 == (uint64_t ***)-4096)
                break;
              v21 = v18 + v20++;
              v18 = v21 & (v17 - 1);
              v19 = *(uint64_t ****)(v16 + 16 * v18);
            }
            while (v19 != v14);
          }
        }
      }
    }
    v27 = (uint64_t *)off_1EF8EEB50(&off_1EF8EEB50);
    if (*v27)
    {
      if (v24)
        v28 = "<unnamed loop>";
      else
        v28 = v26;
      if (v24)
        v29 = 14;
      else
        v29 = v25;
      llvm::timeTraceProfilerBegin(v23, v22, (uint64_t)v28, v29);
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(&v52, *a3, a2, a4, a5, a6);
    if (v61 != __dst)
      free(v61);
    if (v53 == v52)
    {
      v61 = __dst;
      if (HIDWORD(v54))
        memmove(__dst, v53, 8 * HIDWORD(v54));
    }
    else
    {
      v61 = v53;
      v53 = v52;
    }
    v62 = v54;
    v63 = v55;
    v54 = 2;
    v55 = 0;
    if (v66 != v65)
      free(v66);
    v30 = v56;
    v31 = v57;
    if (v57 == v56)
    {
      v66 = v65;
      if (HIDWORD(v58))
      {
        memmove(v65, v57, 8 * HIDWORD(v58));
        v31 = v56;
      }
      v30 = v57;
    }
    else
    {
      v66 = v57;
      v57 = v56;
      v31 = v56;
    }
    v67 = v58;
    v68 = v59;
    v58 = 2;
    v59 = 0;
    if (v30 != v31)
      free(v30);
    if (v53 != v52)
      free(v53);
    if (*v27)
      sub_1C6392DC0(*v27);
    v32 = *(unsigned __int8 *)(a6 + 24);
    v33 = *a3;
    v34 = *a7;
    if (v32)
    {
      if (v34)
      {
        v35 = *(unsigned int *)(v34 + 584);
        if ((_DWORD)v35)
        {
          v36 = *(_QWORD **)(v34 + 576);
          v37 = 32 * v35;
          do
          {
            v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
            v40 = v36[3];
            v41 = v36;
            if ((v40 & 2) == 0)
              v41 = (_QWORD *)*v36;
            (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v40 & 0xFFFFFFFFFFFFFFF8))(v41, v39, v38, &__dst);
            v36 += 4;
            v37 -= 32;
          }
          while (v37);
        }
      }
    }
    else
    {
      sub_1C5B7D34C(v34, *a3, a2, (uint64_t)&__dst);
    }
    v42 = (void *)(a1 + 32);
    *(_QWORD *)a1 = a1 + 32;
    v44 = __dst;
    v43 = v61;
    if (v61 == __dst)
    {
      *(_QWORD *)(a1 + 8) = v42;
      v45 = HIDWORD(v62);
      if (HIDWORD(v62))
        memmove(v42, v43, 8 * HIDWORD(v62));
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v61;
      v61 = v44;
      v43 = v44;
      v45 = HIDWORD(v62);
    }
    v46 = v63;
    *(_DWORD *)(a1 + 16) = v62;
    *(_DWORD *)(a1 + 20) = v45;
    *(_DWORD *)(a1 + 24) = v46;
    v62 = 2;
    v63 = 0;
    v47 = (void *)(a1 + 80);
    *(_QWORD *)(a1 + 48) = a1 + 80;
    v49 = v65;
    v48 = v66;
    if (v66 == v65)
    {
      *(_QWORD *)(a1 + 56) = v47;
      v50 = HIDWORD(v67);
      if (HIDWORD(v67))
        memmove(v47, v48, 8 * HIDWORD(v67));
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v66;
      v66 = v49;
      v48 = v49;
      v50 = HIDWORD(v67);
    }
    v51 = v68;
    *(_DWORD *)(a1 + 64) = v67;
    *(_DWORD *)(a1 + 68) = v50;
    *(_DWORD *)(a1 + 72) = v51;
    v67 = 2;
    v68 = 0;
    *(_BYTE *)(a1 + 96) = 1;
    if (v48 != v49)
    {
      free(v48);
      v44 = __dst;
      v43 = v61;
    }
    if (v43 != v44)
      free(v43);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
}

void llvm::FunctionToLoopPassAdaptor::run(_QWORD *a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const void *v27;
  size_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t ***v41;
  void **p_dst;
  void **v43;
  uint64_t v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  void *__dst;
  void **v51;
  uint64_t v52;
  int v53;
  _BYTE v54[16];
  void *v55;
  _BYTE *v56;
  uint64_t v57;
  int v58;
  _BYTE v59[16];
  _QWORD v60[3];
  char v61;
  char v62;
  _QWORD v63[9];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[6];

  v73[4] = *MEMORY[0x1E0C80C00];
  v65 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, (uint64_t)a2)+ 8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if (sub_1C5A5E51C(&v65, (uint64_t)(a1 + 1), (uint64_t)a2))
  {
    llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run(a1 + 1, (uint64_t)a2, a3, (uint64_t)&v66);
    if (&v66 != (uint64_t *)a4)
    {
      llvm::SmallPtrSetImplBase::MoveFrom(a4, 2, (double *)&v66);
      llvm::SmallPtrSetImplBase::MoveFrom(a4 + 48, 2, (double *)&v69);
    }
    if (v70 != v69)
      free(v70);
    if (v67 != (void *)v66)
      free(v67);
    sub_1C5A5E60C((uint64_t)&v65, (uint64_t)(a1 + 1), (uint64_t)a2, a4);
  }
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, (uint64_t)a2);
  if (*(_QWORD *)(ResultImpl + 32) != *(_QWORD *)(ResultImpl + 40))
  {
    v9 = ResultImpl;
    if (*((_BYTE *)a1 + 32))
      v10 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::MemorySSAAnalysis::Key, (uint64_t)a2)+ 8);
    else
      v10 = 0;
    if (*((_BYTE *)a1 + 33) && (llvm::Function::getEntryCount(a2, 0, (uint64_t)&v66), v68))
      v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)a2)
          + 8;
    else
      v11 = 0;
    if (*((_BYTE *)a1 + 34) && (llvm::Function::getEntryCount(a2, 0, (uint64_t)&v66), v68))
      v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)a2)
          + 8;
    else
      v12 = 0;
    v63[0] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2) + 8;
    v63[1] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2) + 8;
    v63[2] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a2)
           + 8;
    v63[3] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, (uint64_t)a2) + 8;
    v63[4] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, (uint64_t)a2)
           + 8;
    v63[5] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a2)
           + 8;
    v63[6] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2) + 8;
    v63[7] = v11;
    v63[8] = v12;
    v64 = v10;
    v13 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key, (uint64_t)a2);
    if (*((_BYTE *)a1 + 32))
      *(_BYTE *)(v13 + 24) = 1;
    v14 = *(_QWORD *)(v13 + 8);
    v66 = 1;
    for (i = 8; i != 72; i += 16)
      *(uint64_t *)((char *)&v66 + i) = -4096;
    v71 = v73;
    v72 = 0x400000000;
    v16 = *((unsigned __int8 *)a1 + 35);
    v60[0] = &v66;
    v60[1] = v14;
    v62 = v16;
    v41 = a2;
    if (v16)
    {
      v17 = *(void ***)(v9 + 32);
      v18 = *(void ***)(v9 + 40);
      while (v17 != v18)
      {
        v19 = *v17++;
        __dst = v19;
        sub_1C63192F0((uint64_t)&v66, (uint64_t *)&__dst);
      }
    }
    else
    {
      sub_1C5F3D7BC(v9 + 8, (char *)&v66);
    }
    v21 = (uint64_t *)off_1EF8EEB50(&off_1EF8EEB50);
    do
    {
      v22 = (char *)&v71[v20];
      v23 = *((_QWORD *)v22 - 1);
      sub_1C5B25FEC(&v66, (_QWORD *)v22 - 1);
      v24 = v72 - 1;
      do
      {
        v25 = v24;
        if (!v24)
          break;
      }
      while (!v71[--v24]);
      LODWORD(v72) = v25;
      v60[2] = v23;
      v61 = 0;
      if (sub_1C5B7D094(&v65, *a1, v23))
      {
        __dst = v54;
        v51 = (void **)v54;
        v52 = 2;
        v53 = 0;
        v55 = v59;
        v56 = v59;
        v57 = 2;
        v58 = 0;
        v27 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
        if (*v21)
          llvm::timeTraceProfilerBegin(v27, v28, (uint64_t)"", 0);
        (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)*a1 + 16))(&p_dst, *a1, v23, v14, v63, v60);
        if (v51 != __dst)
          free(v51);
        if (v43 == p_dst)
        {
          v51 = (void **)__dst;
          if (HIDWORD(v44))
            memmove(__dst, v43, 8 * HIDWORD(v44));
        }
        else
        {
          v51 = v43;
          v43 = p_dst;
        }
        v52 = v44;
        v53 = v45;
        v44 = 2;
        v45 = 0;
        if (v56 != v55)
          free(v56);
        v29 = v46;
        v30 = v47;
        if (v47 == v46)
        {
          v56 = v55;
          if (HIDWORD(v48))
          {
            memmove(v55, v47, 8 * HIDWORD(v48));
            v30 = v46;
          }
          v29 = v47;
        }
        else
        {
          v56 = v47;
          v47 = v46;
          v30 = v46;
        }
        v57 = v48;
        v58 = v49;
        v48 = 2;
        v49 = 0;
        if (v29 != v30)
          free(v29);
        if (v43 != p_dst)
          free(v43);
        if (*v21)
          sub_1C6392DC0(*v21);
        v31 = *a1;
        if (v61)
        {
          if (v65)
          {
            v32 = *(unsigned int *)(v65 + 584);
            if ((_DWORD)v32)
            {
              v33 = *(_QWORD **)(v65 + 576);
              v34 = 32 * v32;
              do
              {
                v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
                v37 = v33[3];
                v38 = v33;
                if ((v37 & 2) == 0)
                  v38 = (_QWORD *)*v33;
                (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v37 & 0xFFFFFFFFFFFFFFF8))(v38, v36, v35, &__dst);
                v33 += 4;
                v34 -= 32;
              }
              while (v34);
            }
          }
        }
        else
        {
          sub_1C5B7D34C(v65, v31, v23, (uint64_t)&__dst);
        }
        if (v64)
        {
          p_dst = &__dst;
          v43 = (void **)&llvm::MemorySSAAnalysis::Key;
          v39 = sub_1C477672C((uint64_t)&v55, (uint64_t)&llvm::MemorySSAAnalysis::Key);
          v40 = v56 == v55 ? (uint64_t *)((char *)&v57 + 4) : &v57;
          LOBYTE(v44) = v39 != (_QWORD *)&v56[8 * *(unsigned int *)v40];
          if (!sub_1C4DAA35C((uint64_t)&p_dst))
            llvm::report_fatal_error((llvm *)"Loop pass manager using MemorySSA contains a pass that does not preserve MemorySSA", (const char *)1);
        }
        if (!v61)
          llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(v14, v23, (uint64_t)&__dst);
        sub_1C4DD4444(a4, (uint64_t)&__dst);
        if (v56 != v55)
          free(v56);
        if (v51 != __dst)
          free(v51);
      }
      v20 = v72;
    }
    while ((_DWORD)v72);
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey);
    sub_1C4DDB144(a4, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
    sub_1C4DDB144(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
    if (*((_BYTE *)a1 + 33))
    {
      llvm::Function::getEntryCount(v41, 0, (uint64_t)&__dst);
      if ((_BYTE)v52)
        sub_1C4DDB144(a4, (uint64_t)&llvm::BlockFrequencyAnalysis::Key);
    }
    if (*((_BYTE *)a1 + 34))
    {
      llvm::Function::getEntryCount(v41, 0, (uint64_t)&__dst);
      if ((_BYTE)v52)
        sub_1C4DDB144(a4, (uint64_t)&llvm::BranchProbabilityAnalysis::Key);
    }
    if (*((_BYTE *)a1 + 32))
      sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    if (v71 != v73)
      free(v71);
    if ((v66 & 1) == 0)
      MEMORY[0x1CAA32FB4](v67, 8);
  }
}

uint64_t sub_1C5B7D094(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;

  if (!*a1)
    return 1;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = *a1;
  if ((v6 & 1) != 0)
    goto LABEL_13;
  v8 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = *(_QWORD **)v7;
  v10 = 32 * v8;
  v11 = 1;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v14 = v13;
    v46 = 0;
    v15 = (_QWORD *)operator new();
    *v15 = &unk_1E8138DE8;
    v15[1] = a3;
    v16 = v46;
    v46 = v15;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    v17 = v9[3];
    v18 = v9;
    if ((v17 & 2) == 0)
      v18 = (_QWORD *)*v9;
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v17 & 0xFFFFFFFFFFFFFFF8))(v18, v12, v14, &v46);
    v20 = v46;
    v46 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v11 &= v19;
    v9 += 4;
    v10 -= 32;
  }
  while (v10);
  v7 = *a1;
  if (v11)
  {
LABEL_13:
    v21 = *(unsigned int *)(v7 + 296);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v7 + 288);
      v23 = 32 * v21;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v26 = v25;
        v45 = 0;
        v27 = (_QWORD *)operator new();
        *v27 = &unk_1E8138DE8;
        v27[1] = a3;
        v28 = v45;
        v45 = v27;
        if (v28)
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
        v29 = v22[3];
        v30 = v22;
        if ((v29 & 2) == 0)
          v30 = (_QWORD *)*v22;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(v30, v24, v26, &v45);
        v31 = v45;
        v45 = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    return 1;
  }
  v33 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD **)(v7 + 144);
    v35 = 32 * v33;
    do
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v38 = v37;
      v44 = 0;
      v39 = (_QWORD *)operator new();
      *v39 = &unk_1E8138DE8;
      v39[1] = a3;
      v40 = v44;
      v44 = v39;
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      v41 = v34[3];
      v42 = v34;
      if ((v41 & 2) == 0)
        v42 = (_QWORD *)*v34;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v41 & 0xFFFFFFFFFFFFFFF8))(v42, v36, v38, &v44);
      v43 = v44;
      v44 = 0;
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      v34 += 4;
      v35 -= 32;
    }
    while (v35);
  }
  return 0;
}

uint64_t sub_1C5B7D34C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  if (result)
  {
    v4 = *(unsigned int *)(result + 440);
    if ((_DWORD)v4)
    {
      v8 = *(_QWORD **)(result + 432);
      v9 = 32 * v4;
      do
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v12 = v11;
        v17 = 0;
        v13 = (_QWORD *)operator new();
        *v13 = &unk_1E8138DE8;
        v13[1] = a3;
        v14 = v17;
        v17 = v13;
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        v15 = v8[3];
        v16 = v8;
        if ((v15 & 2) == 0)
          v16 = (_QWORD *)*v8;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v16, v10, v12, &v17, a4);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

llvm::PrintLoopPass *llvm::PrintLoopPass::PrintLoopPass(llvm::PrintLoopPass *this)
{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

_QWORD *llvm::PrintLoopPass::PrintLoopPass(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  __int128 v5;

  *a1 = a2;
  v4 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

{
  _QWORD *v4;
  __int128 v5;

  *a1 = a2;
  v4 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_1C5B7D53C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeBranchProbabilityInfoWrapperPassPass(a1, a2);
  llvm::initializeLoopPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Loop predication";
  *(_QWORD *)(v4 + 8) = 16;
  *(_QWORD *)(v4 + 16) = "loop-predication";
  *(_QWORD *)(v4 + 24) = 16;
  *(_QWORD *)(v4 + 32) = &unk_1ED81F828;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B7F0EC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5B7D5D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81F828;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195AE0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81F830);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B7D53C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81F830, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LoopPredicationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  void *v9;
  void *v10;
  _QWORD v11[2];
  int8x16_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a2 + 72))
  {
    v6 = operator new();
    *(_QWORD *)v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(v6 + 8) = v6 + 24;
    *(_QWORD *)(v6 + 16) = 0x1000000000;
    *(_QWORD *)(v6 + 408) = v6 + 440;
    *(_QWORD *)(v6 + 416) = v6 + 440;
    *(_QWORD *)(v6 + 424) = 8;
    *(_DWORD *)(v6 + 432) = 0;
    *(_QWORD *)(v6 + 504) = v6 + 520;
    *(_QWORD *)(v6 + 512) = 0x800000000;
    *(_QWORD *)(v6 + 600) = 0;
    *(_QWORD *)(v6 + 592) = 0;
    *(_QWORD *)(v6 + 584) = v6 + 592;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v11[0] = *(_QWORD *)a2;
  v11[1] = v7;
  v12 = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
  v13 = v6;
  if ((sub_1C5B7D844((uint64_t)v11, a1) & 1) != 0)
  {
    result = llvm::getLoopPassPreservedAnalyses(a3);
    if (*(_QWORD *)(a2 + 72))
      result = sub_1C4DDB144(a3, (uint64_t)&llvm::MemorySSAAnalysis::Key);
    if (v6)
    {
LABEL_8:
      sub_1C61247C0(v6 + 584, *(_QWORD **)(v6 + 592));
      v9 = *(void **)(v6 + 504);
      if (v9 != (void *)(v6 + 520))
        free(v9);
      v10 = *(void **)(v6 + 416);
      if (v10 != *(void **)(v6 + 408))
        free(v10);
      sub_1C4EE41F8((char **)(v6 + 8));
      JUMPOUT(0x1CAA32FC0);
    }
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v6)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1C5B7D844(uint64_t a1, uint64_t a2)
{
  const llvm::Loop *v2;
  char v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t LoopPredecessor;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t LoopLatch;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  const llvm::SCEV **v23;
  llvm::SCEV *v24;
  int v25;
  uint64_t ****v26;
  const llvm::User *v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ***v34;
  uint64_t ***v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t ****v47;
  uint64_t ***v48;
  uint64_t ****v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  float v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ****v76;
  uint64_t ***v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t i;
  _QWORD *v84;
  _QWORD *j;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  llvm *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int32x2_t **v117;
  void (**v118)(void);
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t v131;
  uint64_t v132;
  int32x2_t **v133;
  void (**v134)(void);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::BasicBlock *v138;
  uint64_t v139;
  uint64_t v140;
  llvm::BasicBlock *v141;
  llvm::BasicBlock *SinglePredecessor;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const llvm::APInt *v147;
  char v148;
  int v149;
  llvm::BasicBlock *v150;
  uint64_t v151;
  char v152;
  uint64_t *v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  const llvm::Loop *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  llvm::BasicBlock *v170;
  _QWORD *v171;
  const llvm::APInt *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  llvm::ValueHandleBase *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  llvm::ConstantInt *v183;
  unsigned int v184;
  char v185;
  llvm::ScalarEvolution *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t ExitCount;
  uint64_t v190;
  uint64_t v191;
  unsigned __int16 *UMinFromMismatchedTypes;
  int v193;
  unsigned __int16 *v194;
  unsigned __int16 **v195;
  unsigned __int16 *v196;
  llvm::ScalarEvolution *v197;
  llvm::Instruction *v198;
  uint64_t *v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  llvm::Instruction *v204;
  int v205;
  int v206;
  uint64_t v207;
  void *v208;
  void *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t *v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  const llvm::Loop *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned __int16 *v228;
  llvm::ScalarEvolution *v229;
  int v230;
  llvm::Instruction **v231;
  unsigned __int16 *v232;
  unsigned __int16 **v233;
  unsigned __int16 *v234;
  _QWORD *v235;
  _QWORD *v236;
  int v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  _QWORD *v245;
  unsigned __int8 **v246;
  llvm::Value *v247;
  llvm::Value **v248;
  uint64_t v249;
  llvm::ConstantInt ****v250;
  llvm::Value *v251;
  llvm::Value *v252;
  llvm::ConstantInt *v253;
  unsigned int v254;
  char v255;
  llvm::ValueHandleBase *v256;
  _QWORD *v257;
  unsigned __int8 *v258;
  char v259;
  llvm::Type *WiderType;
  _BYTE *v261;
  _BYTE *v262;
  llvm::ConstantInt ***v263;
  llvm::Instruction *v264;
  const llvm::BasicBlock **v265;
  uint64_t v266;
  llvm::BasicBlock *v267;
  uint64_t v268;
  _BYTE v269[24];
  char v270;
  _QWORD v271[40];
  void *v272;
  uint64_t v273;
  _BYTE v274[32];
  void *v275;
  uint64_t v276;
  _BYTE v277[32];
  _BYTE v278[23];
  void *v279;
  uint64_t v280;
  _BYTE v281[128];
  void *v282;
  uint64_t v283;
  uint64_t v284;
  void **v285;
  __int16 v286;
  void *v287;
  uint64_t v288;
  _QWORD v289[19];

  v289[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 40) = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 56) + 40);
  v7 = sub_1C4FB7E80(*(uint64_t **)(v6 + 112), "llvm.experimental.guard", 0x17uLL);
  v8 = v7 && !*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 8) != 0;
  v9 = sub_1C4FB7E80(*(uint64_t **)(v6 + 112), "llvm.experimental.widenable.condition", 0x25uLL);
  v10 = 0;
  if (v9 && byte_1ED81FBB8 && !*(_BYTE *)(v9 + 16))
    v10 = *(_QWORD *)(v9 + 8) != 0;
  if (!v8 && !v10)
    goto LABEL_54;
  *(_QWORD *)(a1 + 48) = v6 + 272;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 40));
  if (!LoopPredecessor)
    goto LABEL_12;
  v12 = *(_QWORD *)(LoopPredecessor + 40);
  if (v12 == LoopPredecessor + 40)
    goto LABEL_12;
  v13 = v12 ? v12 - 24 : 0;
  if (*(_BYTE *)(v13 + 16) == 30)
  {
    if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_12:
      v14 = 0;
      *(_QWORD *)(a1 + 56) = 0;
      return v14 & 1;
    }
  }
  else
  {
    switch(*(_BYTE *)(v13 + 16))
    {
      case 0x1E:
LABEL_424:
        __break(1u);
        goto LABEL_425;
      case 0x1F:
        v15 = (*(_DWORD *)(v13 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
        v15 = (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v15 = *(_DWORD *)(v13 + 80) + 1;
        break;
      default:
        goto LABEL_12;
    }
    if (v15 != 1)
      goto LABEL_12;
  }
  *(_QWORD *)(a1 + 56) = LoopPredecessor;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 40));
  if (!LoopLatch)
    goto LABEL_54;
  v17 = *(_QWORD *)(LoopLatch + 40);
  if (v17 == LoopLatch + 40)
    goto LABEL_54;
  v14 = 0;
  v18 = v17 - 24;
  if (!v17)
    v18 = 0;
  v19 = *(unsigned __int8 *)(v18 + 16) - 40;
  if (v19 < 0xFFFFFFF5)
    v18 = 0;
  if (v17)
  {
    if (*(_BYTE *)(v18 + 16) == 30 && v19 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_54;
      v14 = 0;
      v21 = *(_QWORD *)(v18 - 96);
      if (!v21 || *(_BYTE *)(v21 + 16) != 81)
        return v14 & 1;
      v22 = *(_QWORD *)(v18 - 32);
      sub_1C5B7F3D8((uint64_t)v269, a1, v21);
      if (!v270)
        goto LABEL_54;
      if (v22 != **(_QWORD **)(*(_QWORD *)(a1 + 40) + 32))
        *(_DWORD *)v269 = dword_1C8669E68[*(int *)v269];
      if (*(_QWORD *)(*(_QWORD *)&v269[8] + 40) != 2)
        goto LABEL_54;
      v23 = *(const llvm::SCEV ***)(*(_QWORD *)&v269[8] + 32);
      v24 = v23[1];
      if (!llvm::SCEV::isOne(v24) && (!llvm::SCEV::isAllOnesValue(v24) || !byte_1ED81F978))
        goto LABEL_54;
      v25 = *(_DWORD *)v269;
      if ((*(_DWORD *)v269 & 0xFFFFFFFE) == 0x20)
      {
        v26 = *(uint64_t *****)(a1 + 16);
        if (llvm::SCEV::isOne(v24))
        {
          if (llvm::ScalarEvolution::isKnownPredicate(v26, 0x25u, *v23, *(const llvm::SCEV **)&v269[16]))
          {
            if (v25 == 33)
              v25 = 36;
            else
              v25 = 35;
            *(_DWORD *)v269 = v25;
          }
        }
      }
      v28 = llvm::SCEV::isOne(v24) ? -36 : -34;
      if (((v28 + v25) & 0xFFFFFFFA) != 0)
      {
LABEL_54:
        v14 = 0;
        return v14 & 1;
      }
      *(_OWORD *)v278 = *(_OWORD *)&v269[1];
      v30 = *(_QWORD *)&v269[16];
      *(_QWORD *)&v278[15] = *(_QWORD *)&v269[16];
      *(_BYTE *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)v278;
      *(_QWORD *)(a1 + 80) = v30;
      v31 = *(_QWORD *)(a1 + 40);
      if (byte_1ED81FA38)
        goto LABEL_141;
      *(_QWORD *)v269 = &v269[16];
      *(_QWORD *)&v269[8] = 0x800000000;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges(v31, (uint64_t)v269);
      if (*(_DWORD *)&v269[8] == 1)
        goto LABEL_136;
      v32 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 40));
      v33 = *(_QWORD *)(v32 + 40);
      if (v33 == v32 + 40)
      {
        v35 = 0;
      }
      else
      {
        if (v33)
          v34 = (uint64_t ***)(v33 - 24);
        else
          v34 = 0;
        if (*((unsigned __int8 *)v34 + 16) - 29 >= 0xB)
          v35 = 0;
        else
          v35 = v34;
      }
      v36 = *((unsigned __int8 *)v35 + 16);
      if (v36 != 30)
        __asm { BR              X10 }
      if (*(v35 - 4) == **(uint64_t ****)(*(_QWORD *)(a1 + 40) + 32))
        v37 = -1;
      else
        v37 = 0;
      v38 = (uint64_t)v35[4 * v37 - 4];
      v39 = *(_QWORD *)(v38 + 40);
      if (v39 != v38 + 40)
      {
        v40 = v39 - 24;
        if (!v39)
          v40 = 0;
        v41 = *(unsigned __int8 *)(v40 + 16);
        if (v41 != 29)
          v40 = 0;
        if (v39 && v41 == 29)
        {
          v71 = *(_QWORD *)(v38 + 48);
          v72 = v71 ? v71 - 24 : 0;
          if (v40 != v72)
          {
            v73 = (uint64_t *)(v40 + 24);
            if (*(_QWORD *)(*(_QWORD *)(v40 + 40) + 48) != v40 + 24)
            {
              v74 = *v73;
              if (*v73)
              {
                if (*(_BYTE *)(v74 - 8) == 84)
                {
                  v75 = *(_QWORD *)(v74 - 56);
                  if (v75)
                  {
                    if (!*(_BYTE *)(v75 + 16)
                      && *(_QWORD *)(v75 + 24) == *(_QWORD *)(v74 + 48)
                      && *(_DWORD *)(v75 + 36) == 119)
                    {
                      v56 = 0;
LABEL_137:
                      if (*(_BYTE **)v269 != &v269[16])
                        free(*(void **)v269);
                      if (!v56)
                        goto LABEL_54;
                      v31 = *(_QWORD *)(a1 + 40);
LABEL_141:
                      v275 = v277;
                      v276 = 0x400000000;
                      v272 = v274;
                      v273 = 0x400000000;
                      v82 = *(_QWORD *)(v31 + 32);
                      for (i = *(_QWORD *)(v31 + 40); v82 != i; v82 += 8)
                      {
                        v84 = (_QWORD *)(*(_QWORD *)v82 + 40);
                        for (j = *(_QWORD **)(*(_QWORD *)v82 + 48); j != v84; j = (_QWORD *)j[1])
                        {
                          if (j)
                            v86 = j - 3;
                          else
                            v86 = 0;
                          if (j)
                          {
                            if (*((_BYTE *)v86 + 16) == 84)
                            {
                              v87 = *(v86 - 4);
                              if (v87)
                              {
                                if (!*(_BYTE *)(v87 + 16)
                                  && *(_QWORD *)(v87 + 24) == v86[9]
                                  && *(_DWORD *)(v87 + 36) == 125)
                                {
                                  v88 = v276;
                                  if (v276 >= (unint64_t)HIDWORD(v276))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 8);
                                    v88 = v276;
                                  }
                                  *((_QWORD *)v275 + v88) = v86;
                                  LODWORD(v276) = v276 + 1;
                                }
                              }
                            }
                          }
                        }
                        if (byte_1ED81FBB8)
                        {
                          v89 = (_QWORD *)*v84;
                          if ((_QWORD *)*v84 == v84)
                          {
                            v91 = 0;
                          }
                          else
                          {
                            v90 = v89 ? (uint64_t)(v89 - 3) : 0;
                            v91 = *(unsigned __int8 *)(v90 + 16) - 29 >= 0xB ? 0 : (llvm *)v90;
                          }
                          if (llvm::isGuardAsWidenableBranch(v91, v27))
                          {
                            v92 = (_QWORD *)*v84;
                            if ((_QWORD *)*v84 == v84)
                            {
                              v94 = 0;
                            }
                            else
                            {
                              if (v92)
                                v93 = v92 - 3;
                              else
                                v93 = 0;
                              if (*((unsigned __int8 *)v93 + 16) - 29 >= 0xB)
                                v94 = 0;
                              else
                                v94 = v93;
                            }
                            v95 = v273;
                            if (v273 >= (unint64_t)HIDWORD(v273))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 8);
                              v95 = v273;
                            }
                            *((_QWORD *)v272 + v95) = v94;
                            LODWORD(v273) = v273 + 1;
                          }
                        }
                      }
                      v261 = v274;
                      v262 = v277;
                      sub_1C50D02DC((uint64_t)v269, *(uint64_t ****)(a1 + 16), *(_QWORD *)(a1 + 48), (uint64_t)"loop-predication", 1);
                      if ((_DWORD)v276)
                      {
                        v3 = 0;
                        v96 = (uint64_t *)v275;
                        v97 = (uint64_t *)((char *)v275 + 8 * v276);
                        while (1)
                        {
                          v98 = *v96;
                          v279 = v281;
                          v280 = 0x400000000;
                          v99 = sub_1C5B7FB74(a1, (uint64_t)&v279, *(_QWORD *)(v98 - 32 * (*(_DWORD *)(v98 + 20) & 0x7FFFFFF)));
                          if (v99)
                            break;
LABEL_199:
                          if (v279 != v281)
                            free(v279);
                          v3 |= v99 != 0;
                          if (++v96 == v97)
                            goto LABEL_204;
                        }
                        v100 = sub_1C5B804D0(a1, v98, (uint64_t *)v279, v280);
                        sub_1C4773D54((uint64_t)&v287, v100, 0, 0, 0);
                        v101 = *(_QWORD **)v279;
                        if (v280 >= 2)
                        {
                          v102 = v280 - 1;
                          v103 = (uint64_t *)((char *)v279 + 8);
                          do
                          {
                            v104 = *v103++;
                            v286 = 257;
                            v101 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v287, v101, v104, (uint64_t)&v282);
                            --v102;
                          }
                          while (v102);
                        }
                        v105 = *(_DWORD *)(v98 + 20) & 0x7FFFFFF;
                        v106 = -v105;
                        v107 = (uint64_t *)(v98 - 32 * v105);
                        v108 = *v107;
                        if (*v107)
                        {
                          v109 = v98 + 32 * v106;
                          v111 = *(_QWORD **)(v109 + 16);
                          v110 = (_QWORD *)(v109 + 16);
                          *v111 = *(v110 - 1);
                          v112 = *(v110 - 1);
                          if (v112)
                            *(_QWORD *)(v112 + 16) = *v110;
                        }
                        *v107 = (uint64_t)v101;
                        if (v101)
                        {
                          v115 = v101[1];
                          v113 = (uint64_t **)(v101 + 1);
                          v114 = v115;
                          v116 = v98 + 32 * v106;
                          *(_QWORD *)(v116 + 8) = v115;
                          if (v115)
                            *(_QWORD *)(v114 + 16) = v116 + 8;
                          *(_QWORD *)(v116 + 16) = v113;
                          *v113 = v107;
                        }
                        v117 = *(int32x2_t ***)(a1 + 32);
                        v285 = 0;
                        llvm::RecursivelyDeleteTriviallyDeadInstructions(v108, 0, v117, &v282);
                        if (v285 == &v282)
                        {
                          v118 = (void (**)(void))((char *)v282 + 32);
                        }
                        else
                        {
                          if (!v285)
                            goto LABEL_197;
                          v118 = (void (**)(void))((char *)*v285 + 40);
                        }
                        (*v118)();
LABEL_197:
                        if (v287 != v289)
                          free(v287);
                        goto LABEL_199;
                      }
                      v3 = 0;
LABEL_204:
                      if ((_DWORD)v273)
                      {
                        v119 = (uint64_t *)v272;
                        v264 = (llvm::Instruction *)((char *)v272 + 8 * v273);
                        while (1)
                        {
                          v120 = *v119;
                          v279 = v281;
                          v280 = 0x400000000;
                          v121 = (uint64_t *)(v120 - 96);
                          v122 = sub_1C5B7FB74(a1, (uint64_t)&v279, *(_QWORD *)(v120 - 96));
                          if (v122)
                            break;
LABEL_224:
                          if (v279 != v281)
                            free(v279);
                          v3 |= v122 != 0;
                          if (++v119 == (uint64_t *)v264)
                            goto LABEL_227;
                        }
                        v123 = sub_1C5B804D0(a1, v120, (uint64_t *)v279, v280);
                        sub_1C4773D54((uint64_t)&v287, v123, 0, 0, 0);
                        v124 = *(_QWORD **)v279;
                        if (v280 >= 2)
                        {
                          v125 = v280 - 1;
                          v126 = (uint64_t *)((char *)v279 + 8);
                          do
                          {
                            v127 = *v126++;
                            v286 = 257;
                            v124 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v287, v124, v127, (uint64_t)&v282);
                            --v125;
                          }
                          while (v125);
                        }
                        v128 = *v121;
                        if (*v121)
                        {
                          **(_QWORD **)(v120 - 80) = *(_QWORD *)(v120 - 88);
                          v129 = *(_QWORD *)(v120 - 88);
                          if (v129)
                            *(_QWORD *)(v129 + 16) = *(_QWORD *)(v120 - 80);
                        }
                        *v121 = (uint64_t)v124;
                        if (v124)
                        {
                          v132 = v124[1];
                          v130 = (uint64_t **)(v124 + 1);
                          v131 = v132;
                          *(_QWORD *)(v120 - 88) = v132;
                          if (v132)
                            *(_QWORD *)(v131 + 16) = v120 - 88;
                          *(_QWORD *)(v120 - 80) = v130;
                          *v130 = v121;
                        }
                        v133 = *(int32x2_t ***)(a1 + 32);
                        v285 = 0;
                        llvm::RecursivelyDeleteTriviallyDeadInstructions(v128, 0, v133, &v282);
                        if (v285 == &v282)
                        {
                          v134 = (void (**)(void))((char *)v282 + 32);
                        }
                        else
                        {
                          if (!v285)
                            goto LABEL_222;
                          v134 = (void (**)(void))((char *)*v285 + 40);
                        }
                        (*v134)();
LABEL_222:
                        if (v287 != v289)
                          free(v287);
                        goto LABEL_224;
                      }
LABEL_227:
                      v2 = *(const llvm::Loop **)(a1 + 40);
                      v4 = v281;
                      v279 = v281;
                      v280 = 0x1000000000;
                      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v2, (uint64_t)&v279);
                      if (!(_DWORD)v280)
                        goto LABEL_248;
                      v135 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v2);
                      if (!v135)
                        goto LABEL_248;
                      v136 = v135;
                      v137 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v2);
                      if (!v137)
                        goto LABEL_248;
                      v138 = (llvm::BasicBlock *)v137;
                      v139 = *(_QWORD *)(v137 + 40);
                      if (v139 == v137 + 40)
                        goto LABEL_248;
                      if (v139)
                        v140 = v139 - 24;
                      else
                        v140 = 0;
                      if (*(_BYTE *)(v140 + 16) != 30)
                      {
                        v148 = 0;
                        switch(*(_BYTE *)(v140 + 16))
                        {
                          case 0x1D:
                          case 0x21:
                          case 0x22:
                          case 0x23:
                          case 0x24:
                          case 0x25:
                          case 0x26:
                            goto LABEL_249;
                          case 0x1E:
                            goto LABEL_424;
                          case 0x1F:
                            v149 = (*(_DWORD *)(v140 + 20) >> 1) & 0x3FFFFFF;
                            goto LABEL_257;
                          case 0x20:
                            v149 = (*(_DWORD *)(v140 + 20) & 0x7FFFFFF) - 1;
                            goto LABEL_257;
                          case 0x27:
                            v149 = *(_DWORD *)(v140 + 80) + 1;
LABEL_257:
                            if (v149 != 1)
                              goto LABEL_248;
                            goto LABEL_236;
                          default:
                            goto LABEL_248;
                        }
                      }
                      if ((*(_DWORD *)(v140 + 20) & 0x7FFFFFF) == 3)
                        goto LABEL_248;
                      do
                      {
LABEL_236:
                        v141 = v138;
                        SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v138);
                        if (!SinglePredecessor)
                          break;
                        v138 = SinglePredecessor;
                      }
                      while (v141 == (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(SinglePredecessor));
                      v143 = llvm::BasicBlock::getSinglePredecessor(v141);
                      if (!v143
                        || ((v144 = *(_QWORD *)(v143 + 40), v144 == v143 + 40)
                          ? (v146 = 0)
                          : (v144 ? (v145 = v144 - 24) : (v145 = 0),
                             *(unsigned __int8 *)(v145 + 16) - 29 >= 0xB ? (v146 = 0) : (v146 = v145)),
                            v267 = 0,
                            v282 = 0,
                            v265 = (const llvm::BasicBlock **)v146,
                            (llvm::parseWidenableBranch(v146, &v282, &v268, &v267, &v266) & 1) == 0))
                      {
LABEL_248:
                        v148 = 0;
LABEL_249:
                        if (v279 != v4)
                          free(v279);
                        sub_1C50D05E0((uint64_t)v269);
                        if (v272 != v261)
                          free(v272);
                        v14 = v3 | v148;
                        if (v275 != v262)
                          free(v275);
                        return v14 & 1;
                      }
                      v150 = v267;
                      if (!v282)
                      {
                        v151 = ***(_QWORD ***)v267;
                        if (!*(_QWORD *)(v151 + 1560))
                        {
                          v253 = *(llvm::ConstantInt **)(v151 + 1888);
                          v254 = *(_DWORD *)(v151 + 1896);
                          LODWORD(v288) = v254 >> 8;
                          if (v254 >> 8 > 0x40)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v287, 1, 0);
                          }
                          else
                          {
                            if (v254 <= 0xFF)
                              v255 = 0;
                            else
                              v255 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v254);
                            v287 = (void *)(v255 & 1);
                          }
                          v256 = llvm::ConstantInt::get(v253, (llvm::LLVMContext *)&v287, v147);
                          if (v288 >= 0x41 && v287)
                            MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
                          *(_QWORD *)(v151 + 1560) = v256;
                        }
                      }
                      v148 = 0;
                      if (!v265)
                        goto LABEL_249;
                      if (v150 != v141)
                        goto LABEL_249;
                      v148 = 0;
                      if (*(_WORD *)(llvm::ScalarEvolution::getExitCount(*(llvm::ScalarEvolution **)(a1 + 16), v2, v136, 0)+ 24) == 15)goto LABEL_249;
                      if (!(_DWORD)v280)
                        goto LABEL_320;
                      v152 = 0;
                      v153 = (uint64_t *)v279;
                      v154 = (char *)v279 + 8 * v280;
                      while (1)
                      {
                        v155 = *v153;
                        v156 = *(uint64_t **)(a1 + 24);
                        v157 = *((_DWORD *)v156 + 4);
                        if (!v157)
                          goto LABEL_276;
                        v158 = *v156;
                        v159 = v157 - 1;
                        v160 = ((v155 >> 4) ^ (v155 >> 9)) & (v157 - 1);
                        v161 = *(_QWORD *)(v158 + 16 * v160);
                        if (v155 != v161)
                          break;
LABEL_275:
                        v164 = *(const llvm::Loop **)(v158 + 16 * v160 + 8);
LABEL_277:
                        if (v164 == v2)
                        {
                          v165 = *(_QWORD *)(v155 + 40);
                          if (v165 != v155 + 40)
                          {
                            v166 = v165 ? v165 - 24 : 0;
                            v167 = *(unsigned __int8 *)(v166 + 16) - 40;
                            v168 = v167 >= 0xFFFFFFF5 ? v166 : 0;
                            if (v165)
                            {
                              if (*(_BYTE *)(v168 + 16) == 30 && v167 >= 0xFFFFFFF5)
                              {
                                v267 = 0;
                                v268 = 0;
                                if (llvm::parseWidenableBranch(v168, &v282, &v268, &v267, &v266))
                                {
                                  v170 = v267;
                                  v171 = sub_1C477672C((uint64_t)v2 + 56, (uint64_t)v267);
                                  v173 = *((_QWORD *)v2 + 8);
                                  v174 = 72;
                                  if (v173 == *((_QWORD *)v2 + 7))
                                    v174 = 76;
                                  if (v171 != (_QWORD *)(v173 + 8 * *(unsigned int *)((char *)v2 + v174)))
                                  {
                                    v175 = v268;
                                    v176 = **(uint64_t ***)v170;
                                    v177 = *v176;
                                    v178 = *(llvm::ValueHandleBase **)(*v176 + 1560);
                                    if (!v178)
                                    {
                                      v183 = *(llvm::ConstantInt **)(v177 + 1888);
                                      v184 = *(_DWORD *)(v177 + 1896);
                                      LODWORD(v288) = v184 >> 8;
                                      if (v184 >> 8 > 0x40)
                                      {
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v287, 1, 0);
                                      }
                                      else
                                      {
                                        if (v184 <= 0xFF)
                                          v185 = 0;
                                        else
                                          v185 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v184);
                                        v287 = (void *)(v185 & 1);
                                      }
                                      v178 = llvm::ConstantInt::get(v183, (llvm::LLVMContext *)&v287, v172);
                                      if (v288 >= 0x41 && v287)
                                        MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
                                      *(_QWORD *)(v177 + 1560) = v178;
                                    }
                                    if (*(_QWORD *)v175)
                                    {
                                      **(_QWORD **)(v175 + 16) = *(_QWORD *)(v175 + 8);
                                      v179 = *(_QWORD *)(v175 + 8);
                                      if (v179)
                                        *(_QWORD *)(v179 + 16) = *(_QWORD *)(v175 + 16);
                                    }
                                    *(_QWORD *)v175 = v178;
                                    if (v178)
                                    {
                                      v182 = *((_QWORD *)v178 + 1);
                                      v181 = (_QWORD *)((char *)v178 + 8);
                                      v180 = v182;
                                      *(_QWORD *)(v175 + 8) = v182;
                                      if (v182)
                                        *(_QWORD *)(v180 + 16) = v175 + 8;
                                      *(_QWORD *)(v175 + 16) = v181;
                                      *v181 = v175;
                                    }
                                    v152 = 1;
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (++v153 == (uint64_t *)v154)
                        {
                          if ((v152 & 1) != 0)
                          {
                            llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(a1 + 16), v2);
                            v148 = 1;
                            goto LABEL_321;
                          }
LABEL_320:
                          v148 = 0;
LABEL_321:
                          v186 = *(llvm::ScalarEvolution **)(a1 + 16);
                          v287 = v289;
                          v288 = 0x1000000000;
                          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v2, (uint64_t)&v287);
                          v282 = &v284;
                          v283 = 0x400000000;
                          if (!(_DWORD)v288)
                            goto LABEL_329;
                          v187 = (uint64_t *)v287;
                          v188 = 8 * v288;
                          do
                          {
                            ExitCount = llvm::ScalarEvolution::getExitCount(v186, v2, *v187, 0);
                            if (*(_WORD *)(ExitCount + 24) != 15)
                            {
                              v190 = ExitCount;
                              v191 = v283;
                              if (v283 >= (unint64_t)HIDWORD(v283))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)&v284, v283 + 1, 8);
                                v191 = v283;
                              }
                              *((_QWORD *)v282 + v191) = v190;
                              LODWORD(v283) = v283 + 1;
                            }
                            ++v187;
                            v188 -= 8;
                          }
                          while (v188);
                          if (v283 >= 2)
                            UMinFromMismatchedTypes = (unsigned __int16 *)llvm::ScalarEvolution::getUMinFromMismatchedTypes((uint64_t)v186, &v282, 0);
                          else
LABEL_329:
                            UMinFromMismatchedTypes = (unsigned __int16 *)*((_QWORD *)v186 + 6);
                          if (v282 != &v284)
                            free(v282);
                          if (v287 != v289)
                            free(v287);
                          v193 = UMinFromMismatchedTypes[12];
                          v194 = UMinFromMismatchedTypes;
                          while (2)
                          {
                            switch(v193)
                            {
                              case 0:
                                v196 = (unsigned __int16 *)*((_QWORD *)v194 + 4);
                                goto LABEL_343;
                              case 1:
                              case 2:
                              case 3:
                              case 13:
                                v196 = v194 + 20;
                                goto LABEL_343;
                              case 4:
                                v196 = v194 + 24;
                                goto LABEL_343;
                              case 5:
                              case 7:
                              case 8:
                              case 9:
                              case 10:
                              case 11:
                              case 12:
                                v195 = (unsigned __int16 **)*((_QWORD *)v194 + 4);
                                goto LABEL_338;
                              case 6:
                                v195 = (unsigned __int16 **)(v194 + 20);
LABEL_338:
                                v194 = *v195;
                                v193 = v194[12];
                                continue;
                              case 14:
                                v196 = (unsigned __int16 *)*((_QWORD *)v194 - 1);
LABEL_343:
                                if (*(_BYTE *)(*(_QWORD *)v196 + 8) == 15
                                  || llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 16), (const llvm::SCEV *)UMinFromMismatchedTypes, v2) != 1|| !llvm::isSafeToExpandAt((llvm *)UMinFromMismatchedTypes, v265, *(const llvm::Instruction **)(a1 + 16), v197))
                                {
                                  goto LABEL_249;
                                }
                                v198 = *(v265 - 12);
                                llvm::Instruction::moveBefore(v198, (llvm::Instruction *)v265);
                                v199 = *(uint64_t **)(a1 + 32);
                                if (!v199)
                                  goto LABEL_354;
                                v200 = *(_DWORD *)(*v199 + 40);
                                if (!v200)
                                  goto LABEL_354;
                                v201 = *(_QWORD *)(*v199 + 24);
                                v202 = v200 - 1;
                                v203 = (v200 - 1) & ((v198 >> 4) ^ (v198 >> 9));
                                v204 = *(llvm::Instruction **)(v201 + 16 * v203);
                                if (v198 == v204)
                                  goto LABEL_352;
                                v205 = 1;
                                break;
                              default:
                                goto LABEL_249;
                            }
                            break;
                          }
                          while (v204 != (llvm::Instruction *)-4096)
                          {
                            v206 = v203 + v205++;
                            v203 = v206 & v202;
                            v204 = *(llvm::Instruction **)(v201 + 16 * v203);
                            if (v198 == v204)
                            {
LABEL_352:
                              v207 = *(_QWORD *)(v201 + 16 * v203 + 8);
                              if (v207)
                                llvm::MemorySSAUpdater::moveToPlace(v199, v207, v265[5], 2);
                              break;
                            }
                          }
LABEL_354:
                          v271[6] = *((_QWORD *)v198 + 5);
                          v271[7] = (char *)v198 + 24;
                          v208 = (void *)*((_QWORD *)v198 + 6);
                          v287 = v208;
                          if (v208)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v287, (unsigned __int8 *)v208, 2);
                            v209 = v287;
                          }
                          else
                          {
                            v209 = 0;
                          }
                          sub_1C4774EF4((uint64_t)v271, 0, (uint64_t)v209);
                          if (v287)
                            llvm::MetadataTracking::untrack((uint64_t)&v287, (unsigned __int8 *)v287);
                          sub_1C4773D54((uint64_t)&v287, (uint64_t)v198, 0, 0, 0);
                          if (!(_DWORD)v280)
                          {
LABEL_427:
                            if (v287 != v289)
                              free(v287);
                            v148 = 1;
                            goto LABEL_249;
                          }
                          v259 = 0;
                          v210 = (uint64_t *)v279;
                          v211 = (uint64_t *)((char *)v279 + 8 * v280);
                          v258 = 0;
                          while (2)
                          {
                            v212 = *v210;
                            v213 = *(uint64_t **)(a1 + 24);
                            v214 = *((_DWORD *)v213 + 4);
                            if (v214)
                            {
                              v215 = *v213;
                              v216 = v214 - 1;
                              v217 = ((v212 >> 4) ^ (v212 >> 9)) & (v214 - 1);
                              v218 = *(_QWORD *)(v215 + 16 * v217);
                              if (v212 != v218)
                              {
                                v219 = 1;
                                while (v218 != -4096)
                                {
                                  v220 = v217 + v219++;
                                  v217 = v220 & v216;
                                  v218 = *(_QWORD *)(v215 + 16 * v217);
                                  if (v212 == v218)
                                    goto LABEL_365;
                                }
                                goto LABEL_366;
                              }
LABEL_365:
                              v221 = *(const llvm::Loop **)(v215 + 16 * v217 + 8);
                            }
                            else
                            {
LABEL_366:
                              v221 = 0;
                            }
                            if (v221 == v2)
                            {
                              v223 = (_QWORD *)(v212 + 40);
                              v222 = *(_QWORD *)(v212 + 40);
                              if (v222 != v212 + 40)
                              {
                                v224 = v222 ? v222 - 24 : 0;
                                v225 = *(unsigned __int8 *)(v224 + 16) - 40;
                                v226 = v225 >= 0xFFFFFFF5 ? v224 : 0;
                                if (v222)
                                {
                                  if (*(_BYTE *)(v226 + 16) == 30 && v225 >= 0xFFFFFFF5)
                                  {
                                    v263 = (llvm::ConstantInt ***)(v226 - 96);
                                    if (*(unsigned __int8 *)(*(_QWORD *)(v226 - 96) + 16) >= 0x15u)
                                    {
                                      v228 = (unsigned __int16 *)llvm::ScalarEvolution::getExitCount(*(llvm::ScalarEvolution **)(a1 + 16), v2, v212, 0);
                                      v230 = v228[12];
                                      v231 = (llvm::Instruction **)v228;
                                      v232 = v228;
                                      while (2)
                                      {
                                        switch(v230)
                                        {
                                          case 0:
                                            v234 = (unsigned __int16 *)*((_QWORD *)v232 + 4);
                                            goto LABEL_392;
                                          case 1:
                                          case 2:
                                          case 3:
                                          case 13:
                                            v234 = v232 + 20;
                                            goto LABEL_392;
                                          case 4:
                                            v234 = v232 + 24;
                                            goto LABEL_392;
                                          case 5:
                                          case 7:
                                          case 8:
                                          case 9:
                                          case 10:
                                          case 11:
                                          case 12:
                                            v233 = (unsigned __int16 **)*((_QWORD *)v232 + 4);
                                            goto LABEL_387;
                                          case 6:
                                            v233 = (unsigned __int16 **)(v232 + 20);
LABEL_387:
                                            v232 = *v233;
                                            v230 = v232[12];
                                            continue;
                                          case 14:
                                            v234 = (unsigned __int16 *)*((_QWORD *)v232 - 1);
LABEL_392:
                                            if (*(_BYTE *)(*(_QWORD *)v234 + 8) != 15
                                              && llvm::isSafeToExpandAt((llvm *)v228, v265, *(const llvm::Instruction **)(a1 + 16), v229))
                                            {
                                              v235 = (_QWORD *)*v223;
                                              if ((_QWORD *)*v223 == v223)
                                              {
                                                v236 = 0;
                                              }
                                              else
                                              {
                                                if (v235)
                                                  v236 = v235 - 3;
                                                else
                                                  v236 = 0;
                                                if (*((unsigned __int8 *)v236 + 16) - 29 >= 0xB)
                                                  v236 = 0;
                                              }
                                              v237 = *((unsigned __int8 *)v236 + 16);
                                              if (v237 != 30)
                                                __asm { BR              X10 }
                                              v238 = sub_1C477672C((uint64_t)v2 + 56, *(v236 - 4));
                                              v239 = *((_QWORD *)v2 + 8);
                                              v240 = 72;
                                              if (v239 == *((_QWORD *)v2 + 7))
                                                v240 = 76;
                                              v241 = (_QWORD *)(v239 + 8 * *(unsigned int *)((char *)v2 + v240));
                                              v257 = v238;
                                              if (v238 == v241)
                                                v242 = 0;
                                              else
                                                v242 = -1;
                                              if (llvm::BasicBlock::getPostdominatingDeoptimizeCall(*(llvm::BasicBlock **)(v226 + 32 * v242 - 32)))
                                              {
                                                v243 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v269, v231, 0);
                                                if (!v258)
                                                  v258 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v269, (llvm::Instruction **)UMinFromMismatchedTypes, 0);
                                                if (*(_QWORD *)v243 == *(_QWORD *)v258)
                                                {
                                                  v244 = v258;
                                                }
                                                else
                                                {
                                                  WiderType = llvm::ScalarEvolution::getWiderType(*(llvm::ScalarEvolution **)(a1 + 16), *(llvm::Type **)v243, *(llvm::Type **)v258);
                                                  v286 = 257;
                                                  v243 = sub_1C4773E38((uint64_t *)&v287, 39, v243, (uint64_t)WiderType, (uint64_t)&v282);
                                                  v286 = 257;
                                                  v244 = sub_1C4773E38((uint64_t *)&v287, 39, v258, (uint64_t)WiderType, (uint64_t)&v282);
                                                }
                                                v286 = 257;
                                                v245 = (_QWORD *)sub_1C4774B48((uint64_t)&v287, 34, (uint64_t)v243, (uint64_t)v244, (uint64_t)&v282);
                                                v286 = 257;
                                                v246 = sub_1C57A4274((uint64_t *)&v287, v245, (uint64_t)&v282);
                                                llvm::widenWidenableBranch(v265, (llvm::BranchInst *)v246, v247);
                                                v248 = llvm::ConstantInt::get(**v263, v257 != v241, 0);
                                                if (*v263)
                                                {
                                                  **(_QWORD **)(v226 - 80) = *(_QWORD *)(v226 - 88);
                                                  v249 = *(_QWORD *)(v226 - 88);
                                                  if (v249)
                                                    *(_QWORD *)(v249 + 16) = *(_QWORD *)(v226 - 80);
                                                }
                                                *v263 = v248;
                                                if (v248)
                                                {
                                                  v252 = v248[1];
                                                  v250 = (llvm::ConstantInt ****)(v248 + 1);
                                                  v251 = v252;
                                                  *(_QWORD *)(v226 - 88) = v252;
                                                  if (v252)
                                                    *((_QWORD *)v251 + 2) = v226 - 88;
                                                  *(_QWORD *)(v226 - 80) = v250;
                                                  *v250 = v263;
                                                }
                                                v259 = 1;
                                              }
                                            }
                                            goto LABEL_368;
                                          default:
                                            goto LABEL_368;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_368:
                            if (++v210 == v211)
                            {
LABEL_425:
                              if ((v259 & 1) != 0)
                                llvm::ScalarEvolution::forgetLoop(*(int32x2_t **)(a1 + 16), v2);
                              goto LABEL_427;
                            }
                            continue;
                          }
                        }
                      }
                      v162 = 1;
                      while (v161 != -4096)
                      {
                        v163 = v160 + v162++;
                        v160 = v163 & v159;
                        v161 = *(_QWORD *)(v158 + 16 * v160);
                        if (v155 == v161)
                          goto LABEL_275;
                      }
LABEL_276:
                      v164 = 0;
                      goto LABEL_277;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((*((_BYTE *)v35 + 23) & 0x20) == 0)
      {
LABEL_136:
        v56 = 1;
        goto LABEL_137;
      }
      v42 = ***v35;
      v287 = v35;
      v43 = *(_DWORD *)(v42 + 2496);
      if (v43)
      {
        v44 = *(_QWORD *)(v42 + 2480);
        v45 = v43 - 1;
        v46 = v45 & ((v35 >> 4) ^ (v35 >> 9));
        v47 = (uint64_t ****)(v44 + 40 * v46);
        v48 = *v47;
        if (*v47 == v35)
        {
LABEL_88:
          v53 = *((unsigned int *)v47 + 4);
          if ((_DWORD)v53)
          {
            v54 = v47[1] + 1;
            v55 = 16 * v53;
            v56 = 1;
            while (*((_DWORD *)v54 - 2) != 2)
            {
              v54 += 2;
              v55 -= 16;
              if (!v55)
                goto LABEL_137;
            }
            v57 = *v54;
            if (*v54)
            {
              v58 = *(unsigned int *)(v57 + 8);
              v59 = *(_QWORD *)(v57 - 8 * v58);
              if (v59)
              {
                if (*(_BYTE *)v59
                  || (v78 = *(_QWORD **)(v59 + 8), *v78 == 14)
                  && ((v79 = v78[3], v80 = *(_QWORD *)((char *)v78 + 30), v79 == 0x775F68636E617262)
                    ? (v81 = v80 == 0x737468676965775FLL)
                    : (v81 = 0),
                      v81))
                {
                  v60 = *((unsigned __int8 *)v35 + 16);
                  if (v60 != 30)
                    __asm { BR              X12 }
                  v61 = (*((_DWORD *)v35 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
                  if ((_DWORD)v58 == v61 + 1)
                  {
                    v62 = sub_1C5B7F648(v32, v38);
                    v63 = *(float *)&dword_1ED81FAF8;
                    if (*(float *)&dword_1ED81FAF8 < 1.0)
                      v63 = 1.0;
                    v64 = v63 * (unint64_t)v62 <= 0x80000000 ? v62 * v63 : 0x80000000;
                    if (*(_DWORD *)&v269[8])
                    {
                      v65 = *(uint64_t **)v269;
                      v66 = *(_QWORD *)v269 + 16 * *(unsigned int *)&v269[8];
                      do
                      {
                        v67 = *v65;
                        v68 = v65[1];
                        v65 += 2;
                        v69 = sub_1C5B7F648(v67, v68);
                        v56 = v69 <= v64;
                      }
                      while (v69 <= v64 && v65 != (uint64_t *)v66);
                      goto LABEL_137;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_136;
        }
        v49 = 0;
        v50 = 1;
        while (v48 != (uint64_t ***)-4096)
        {
          if (v49)
            v51 = 0;
          else
            v51 = v48 == (uint64_t ***)-8192;
          if (v51)
            v49 = v47;
          v52 = v46 + v50++;
          v46 = v52 & v45;
          v47 = (uint64_t ****)(v44 + 40 * v46);
          v48 = *v47;
          if (*v47 == v35)
            goto LABEL_88;
        }
        if (v49)
          v76 = v49;
        else
          v76 = v47;
      }
      else
      {
        v76 = 0;
      }
      v47 = (uint64_t ****)sub_1C541AB24(v42 + 2480, (uint64_t)&v287, (uint64_t *)&v287, v76);
      v77 = (uint64_t ***)v287;
      v47[3] = 0;
      v47[4] = 0;
      *v47 = v77;
      v47[1] = (uint64_t ***)(v47 + 3);
      v47[2] = (uint64_t ***)0x100000000;
      goto LABEL_88;
    }
  }
  return v14 & 1;
}

uint64_t sub_1C5B7F0EC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B7D5D4(v0);
}

void sub_1C5B7F118(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B7F13C(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  llvm::getLoopAnalysisUsage(a2, v3);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5B7F180(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AnalysisPass;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20;
  void *v21;
  void *v22;
  _QWORD v24[11];

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::ScalarEvolutionWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::DominatorTreeWrapperPass::ID);
  v13 = v10 + 32;
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass
    && (v16 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v17 = *(_QWORD *)(v16 + 32);
    v18 = operator new();
    *(_QWORD *)v18 = v17;
    *(_QWORD *)(v18 + 8) = v18 + 24;
    *(_QWORD *)(v18 + 16) = 0x1000000000;
    *(_QWORD *)(v18 + 408) = v18 + 440;
    *(_QWORD *)(v18 + 416) = v18 + 440;
    *(_QWORD *)(v18 + 424) = 8;
    *(_DWORD *)(v18 + 432) = 0;
    *(_QWORD *)(v18 + 504) = v18 + 520;
    *(_QWORD *)(v18 + 512) = 0x800000000;
    *(_QWORD *)(v18 + 600) = 0;
    *(_QWORD *)(v18 + 592) = 0;
    *(_QWORD *)(v18 + 584) = v18 + 592;
  }
  else
  {
    v18 = 0;
  }
  v19 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::AAResultsWrapperPass::ID);
  v24[0] = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v24[1] = v14;
  v24[2] = v7;
  v24[3] = v13;
  v24[4] = v18;
  v4 = sub_1C5B7D844((uint64_t)v24, (uint64_t)a2);
  if (v18)
  {
    sub_1C61247C0(v18 + 584, *(_QWORD **)(v18 + 592));
    v21 = *(void **)(v18 + 504);
    if (v21 != (void *)(v18 + 520))
      free(v21);
    v22 = *(void **)(v18 + 416);
    if (v22 != *(void **)(v18 + 408))
      free(v22);
    sub_1C4EE41F8((char **)(v18 + 8));
    MEMORY[0x1CAA32FC0](v18, 0x10E0C40B8556DDDLL);
  }
  return v4;
}

uint64_t sub_1C5B7F3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = *(_QWORD *)(a3 - 64);
  result = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(result + 104);
  v8 = *(_DWORD *)(result + 120);
  if (!v8)
  {
LABEL_7:
    v11 = v7 + 48 * v8;
    goto LABEL_8;
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v11 = v7 + 48 * v10;
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 != v5)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & v9;
      v11 = v7 + 48 * (v14 & v9);
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 == v5)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v15 = *(_WORD *)(a3 + 18);
  v16 = *(_QWORD *)(a3 - 32);
  if (v11 == v7 + 48 * v8 || (v17 = *(_QWORD *)(v11 + 40)) == 0)
  {
    result = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)result, v5);
    v17 = result;
  }
  if (*(_WORD *)(v17 + 24) == 15)
    goto LABEL_28;
  result = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(result + 104);
  v19 = *(_DWORD *)(result + 120);
  if (!v19)
    goto LABEL_18;
  v20 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  v21 = v18 + 48 * v20;
  v22 = *(_QWORD *)(v21 + 24);
  if (v22 != v16)
  {
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v21 = v18 + 48 * v20;
      v22 = *(_QWORD *)(v21 + 24);
      if (v22 == v16)
        goto LABEL_19;
    }
LABEL_18:
    v21 = v18 + 48 * v19;
  }
LABEL_19:
  if (v21 == v18 + 48 * v19 || (v25 = *(_QWORD *)(v21 + 40)) == 0)
  {
    result = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)result, v16);
    v25 = result;
  }
  if (*(_WORD *)(v25 + 24) != 15)
  {
    v26 = v15 & 0x3F;
    result = llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a2 + 16), (const llvm::SCEV *)v17, *(const llvm::Loop **)(a2 + 40));
    if ((_DWORD)result == 1)
      __asm { BR              X9 }
    if (v17 && *(_WORD *)(v17 + 24) == 7 && *(_QWORD *)(v17 + 48) == *(_QWORD *)(a2 + 40))
    {
      *(_DWORD *)a1 = v26;
      v27 = 1;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v25;
      goto LABEL_29;
    }
  }
LABEL_28:
  v27 = 0;
  *(_BYTE *)a1 = 0;
LABEL_29:
  *(_BYTE *)(a1 + 24) = v27;
  return result;
}

unint64_t sub_1C5B7F648(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t result;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 == a1 + 40)
  {
    v5 = 0;
  }
  else
  {
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
      v5 = 0;
    else
      v5 = v4;
  }
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_QWORD *)(v5 + 48))
  {
    if ((v6 & 0x20000000) == 0)
      goto LABEL_32;
  }
  else if ((v6 & 0x20000000) == 0)
  {
    v7 = *(unsigned __int8 *)(v5 + 16);
    if (v7 != 30)
      __asm { BR              X12 }
    if ((v6 & 0x7FFFFFF) == 3)
      v8 = 2;
    else
      v8 = 1;
    return ((v8 >> 1) | 0x80000000) / v8;
  }
  v9 = ***(_QWORD ***)v5;
  v51 = v5;
  v10 = *(_DWORD *)(v9 + 2496);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 2480);
    v12 = v10 - 1;
    v13 = v12 & ((v5 >> 4) ^ (v5 >> 9));
    v14 = (_QWORD *)(v11 + 40 * v13);
    v15 = *v14;
    if (*v14 == v5)
      goto LABEL_27;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(v11 + 40 * v13);
      v15 = *v14;
      if (*v14 == v5)
        goto LABEL_27;
    }
    if (v16)
      v47 = v16;
    else
      v47 = v14;
  }
  else
  {
    v47 = 0;
  }
  v14 = sub_1C541AB24(v9 + 2480, (uint64_t)&v51, &v51, v47);
  v48 = v51;
  v14[3] = 0;
  v14[4] = 0;
  *v14 = v48;
  v14[1] = v14 + 3;
  v14[2] = 0x100000000;
LABEL_27:
  v20 = *((unsigned int *)v14 + 4);
  if (!(_DWORD)v20)
  {
LABEL_32:
    v23 = 0;
    goto LABEL_33;
  }
  v21 = (_QWORD *)(v14[1] + 8);
  v22 = 16 * v20;
  while (*((_DWORD *)v21 - 2) != 2)
  {
    v23 = 0;
    v21 += 2;
    v22 -= 16;
    if (!v22)
      goto LABEL_33;
  }
  v23 = *v21;
LABEL_33:
  v24 = *(unsigned __int8 *)(v5 + 16);
  if (v24 != 30)
    __asm { BR              X13 }
  if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
    v8 = 2;
  else
    v8 = 1;
  if (!v23)
    return ((v8 >> 1) | 0x80000000) / v8;
  v25 = *(unsigned int *)(v23 + 8);
  v26 = (uint64_t *)(v23 - 8 * v25);
  v27 = *v26;
  if (!*v26)
    return ((v8 >> 1) | 0x80000000) / v8;
  if (!*(_BYTE *)v27)
  {
    v41 = *(_QWORD **)(v27 + 8);
    if (*v41 != 14)
      return ((v8 >> 1) | 0x80000000) / v8;
    v42 = v41[3];
    v43 = *(_QWORD *)((char *)v41 + 30);
    if (v42 != 0x775F68636E617262 || v43 != 0x737468676965775FLL)
      return ((v8 >> 1) | 0x80000000) / v8;
  }
  v28 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
  if ((_DWORD)v25 != v28 + 1)
    return ((v8 >> 1) | 0x80000000) / v8;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 2 * v8;
  v34 = v26 + 1;
  v35 = 0xFFFFFFFFLL;
  v36 = (_QWORD *)(v5 - 32);
  do
  {
    v37 = *(_QWORD *)(*v34 + 128);
    v38 = (_QWORD *)(v37 + 24);
    if (*(_DWORD *)(v37 + 32) >= 0x41u)
      v38 = (_QWORD *)*v38;
    ++v30;
    v39 = (_QWORD *)*v38;
    if (*v36 == a2)
      v40 = v39;
    else
      v40 = 0;
    v32 += (unint64_t)v40;
    v31 += (unint64_t)v39;
    v36 -= 4;
    v29 += 2;
    ++v35;
    ++v34;
  }
  while (v33 != v29);
  v46 = HIDWORD(v31);
  if (HIDWORD(v31))
  {
    LOBYTE(v46) = 0;
    v49 = v31;
    do
    {
      v31 = v49 >> 1;
      LOBYTE(v46) = v46 + 1;
      v50 = v49 >> 33;
      v49 >>= 1;
    }
    while (v50);
  }
  result = v32 >> v46;
  if (v31 != 0x80000000)
    return (((unint64_t)(v32 >> v46) << 31) | (v31 >> 1)) / v31;
  return result;
}

void sub_1C5B7FAD0()
{
  JUMPOUT(0x1C5B7F79CLL);
}

void sub_1C5B7FAE0()
{
  JUMPOUT(0x1C5B7F79CLL);
}

void sub_1C5B7FAE8()
{
  JUMPOUT(0x1C5B7F79CLL);
}

void sub_1C5B7FAF4()
{
  JUMPOUT(0x1C5B7F79CLL);
}

void sub_1C5B7FAFC()
{
  JUMPOUT(0x1C5B7F79CLL);
}

void sub_1C5B7FB08()
{
  JUMPOUT(0x1C5B7F7D4);
}

void sub_1C5B7FB18()
{
  JUMPOUT(0x1C5B7F7D4);
}

void sub_1C5B7FB20()
{
  JUMPOUT(0x1C5B7F7D4);
}

void sub_1C5B7FB2C()
{
  JUMPOUT(0x1C5B7F7D4);
}

void sub_1C5B7FB34()
{
  JUMPOUT(0x1C5B7F7D4);
}

void sub_1C5B7FB40()
{
  JUMPOUT(0x1C5B7F98CLL);
}

void sub_1C5B7FB4C()
{
  JUMPOUT(0x1C5B7F98CLL);
}

void sub_1C5B7FB54()
{
  JUMPOUT(0x1C5B7F98CLL);
}

void sub_1C5B7FB60()
{
  JUMPOUT(0x1C5B7F98CLL);
}

void sub_1C5B7FB68()
{
  JUMPOUT(0x1C5B7F980);
}

uint64_t sub_1C5B7FB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  llvm::SCEV *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[32];
  int v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[28];

  v33[26] = *MEMORY[0x1E0C80C00];
  v31 = v33;
  v32 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v31, 1uLL, a3);
  v22 = 0;
  v23 = v27;
  v24 = v27;
  v25 = 4;
  v26 = 0;
  v20 = a2 + 16;
  v5 = v32;
  do
  {
    while (1)
    {
      v6 = *((_QWORD *)v31 + v5 - 1);
      LODWORD(v32) = v5 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, v6);
      if (!v7)
        goto LABEL_37;
      v8 = *(unsigned __int8 *)(v6 + 16);
      if (v8 <= 0x50)
        break;
      if (v8 == 81)
      {
        sub_1C5B7F3D8((uint64_t)&v28, a1, v6);
        if (v30 && v28 == 36 && *(_QWORD *)(v29 + 40) == 2)
        {
          v15 = *(_QWORD *)(v29 + 32);
          v21 = *(llvm::SCEV **)(v15 + 8);
          if (llvm::SCEV::isOne(v21)
            || (llvm::SCEV::isAllOnesValue(v21) ? (v16 = byte_1ED81F978 == 0) : (v16 = 1), !v16))
          {
            __asm { BR              X10 }
          }
        }
LABEL_34:
        v17 = *(unsigned int *)(a2 + 8);
        if (v17 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v20, v17 + 1, 8);
          v17 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v6;
        ++*(_DWORD *)(a2 + 8);
        goto LABEL_37;
      }
      if (v8 != 84)
        goto LABEL_34;
      v11 = *(_QWORD *)(v6 - 32);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *(_QWORD *)(v6 + 72) || *(_DWORD *)(v11 + 36) != 138)
        goto LABEL_34;
      v22 = v6;
LABEL_37:
      v5 = v32;
      if (!(_DWORD)v32)
        goto LABEL_38;
    }
    if (v8 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 28)
        goto LABEL_34;
      v12 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      v9 = *v12;
      if (!*v12)
        goto LABEL_34;
      v10 = v12[4];
      if (!v10)
        goto LABEL_34;
    }
    else
    {
      if (v8 != 56)
        goto LABEL_34;
      v9 = *(_QWORD *)(v6 - 64);
      if (!v9)
        goto LABEL_34;
      v10 = *(_QWORD *)(v6 - 32);
      if (!v10)
        goto LABEL_34;
    }
    v13 = v32;
    if (v32 >= (unint64_t)HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v32 + 1, 8);
      v13 = v32;
    }
    *((_QWORD *)v31 + v13) = v9;
    v14 = (v32 + 1);
    LODWORD(v32) = v14;
    if (v14 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v14 + 1, 8);
      LODWORD(v14) = v32;
    }
    *((_QWORD *)v31 + v14) = v10;
    v5 = v32 + 1;
    LODWORD(v32) = v5;
  }
  while (v5);
LABEL_38:
  if (v22)
  {
    v18 = *(unsigned int *)(a2 + 8);
    if (v18 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v20, v18 + 1, 8);
      LODWORD(v18) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v22;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v24 != v23)
    free(v24);
  if (v31 != v33)
    free(v31);
  return 0;
}

uint64_t sub_1C5B804D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v7 = 8 * a4;
    while (llvm::Loop::isLoopInvariant(*(_QWORD *)(a1 + 40), *a3))
    {
      ++a3;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 40);
    if (v9 == v8 + 40)
    {
      return 0;
    }
    else
    {
      if (v9)
        v10 = v9 - 24;
      else
        v10 = 0;
      if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
        return 0;
      else
        return v10;
    }
  }
  return a2;
}

uint64_t sub_1C5B80558(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;

  result = llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 16), a2, *(const llvm::Loop **)(a1 + 40));
  if ((_DWORD)result != 1)
  {
    result = 0;
    if (a2)
    {
      if (*((_WORD *)a2 + 12) == 14)
      {
        v5 = *((_QWORD *)a2 - 1);
        if (!v5
          || *(_BYTE *)(v5 + 16) != 60
          || (*(_WORD *)(v5 + 18) & 0x301) != 0
          || !llvm::Loop::hasLoopInvariantOperands(*(_QWORD *)(a1 + 40), v5))
        {
          return 0;
        }
        v6 = *(_QWORD *)a1;
        v23[0] = *(_QWORD *)(v5 - 32);
        v23[1] = -1;
        v24 = 0u;
        v25 = 0u;
        if ((llvm::AAResults::pointsToConstantMemory(v6, (uint64_t)v23, 0) & 1) != 0)
          return 1;
        if ((*(_BYTE *)(v5 + 23) & 0x20) == 0)
          return 0;
        v7 = ***(_QWORD ***)v5;
        v23[0] = v5;
        v8 = *(_DWORD *)(v7 + 2496);
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 2480);
          v10 = v8 - 1;
          v11 = v10 & ((v5 >> 4) ^ (v5 >> 9));
          v12 = (_QWORD *)(v9 + 40 * v11);
          v13 = *v12;
          if (*v12 == v5)
          {
LABEL_21:
            v18 = *((unsigned int *)v12 + 4);
            if ((_DWORD)v18)
            {
              v19 = (_QWORD *)(v12[1] + 8);
              v20 = 16 * v18;
              while (*((_DWORD *)v19 - 2) != 6)
              {
                v19 += 2;
                v20 -= 16;
                if (!v20)
                  return 0;
              }
              if (*v19)
                return 1;
            }
            return 0;
          }
          v14 = 0;
          v15 = 1;
          while (v13 != -4096)
          {
            if (v14)
              v16 = 0;
            else
              v16 = v13 == -8192;
            if (v16)
              v14 = v12;
            v17 = v11 + v15++;
            v11 = v17 & v10;
            v12 = (_QWORD *)(v9 + 40 * v11);
            v13 = *v12;
            if (*v12 == v5)
              goto LABEL_21;
          }
          if (v14)
            v21 = v14;
          else
            v21 = v12;
        }
        else
        {
          v21 = 0;
        }
        v12 = sub_1C541AB24(v7 + 2480, (uint64_t)v23, v23, v21);
        v22 = v23[0];
        v12[3] = 0;
        v12[4] = 0;
        *v12 = v22;
        v12[1] = v12 + 3;
        v12[2] = 0x100000000;
        goto LABEL_21;
      }
    }
  }
  return result;
}

void sub_1C5B80710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X11 }
}

void sub_1C5B80778()
{
  JUMPOUT(0x1C5B80764);
}

void sub_1C5B80784()
{
  JUMPOUT(0x1C5B8077CLL);
}

uint64_t sub_1C5B8078C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const llvm::SCEV *v48;
  llvm::SCEVExpander *v49;
  const llvm::SCEV *v50;
  uint64_t v51;
  llvm::Type *v52;
  const llvm::APInt *v53;
  uint64_t v54;
  llvm::ConstantInt *v55;
  unsigned int v56;
  char v57;
  int v58;
  const llvm::APInt *v59;
  uint64_t v60;
  llvm::Instruction *v61;
  unsigned __int8 *v62;
  llvm::Instruction *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  llvm::ConstantInt *v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  __int16 v71;
  const llvm::SCEV *v72[2];
  _BYTE v73[48];
  uint64_t *v74;

  v52 = **(llvm::Type ***)(v44 + 32);
  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v47 + 16), v50, *(const llvm::Loop **)(v47 + 40)) != 1|| llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v47 + 16), v48, *(const llvm::Loop **)(v47 + 40)) != 1)
  {
    goto LABEL_18;
  }
  sub_1C4773D54((uint64_t)v72, v46, 0, 0, 0);
  if (llvm::ScalarEvolution::isLoopEntryGuardedByCond(*(_QWORD *)(v47 + 16), *(_QWORD *)(v47 + 40), v45, (uint64_t)v50, (uint64_t)v48))
  {
    v54 = *v74;
    v51 = *(_QWORD *)(*v74 + 1560);
    if (!v51)
    {
      v55 = *(llvm::ConstantInt **)(v54 + 1888);
      v56 = *(_DWORD *)(v54 + 1896);
      LODWORD(v70) = v56 >> 8;
      if (v56 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v69, 1, 0);
      }
      else
      {
        if (v56 <= 0xFF)
          v57 = 0;
        else
          v57 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v56);
        v69 = (unsigned __int8 *)(v57 & 1);
      }
      v51 = (uint64_t)llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v69, v53);
      if (v70 >= 0x41 && v69)
        MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
      v58 = 0;
      *(_QWORD *)(v54 + 1560) = v51;
      goto LABEL_16;
    }
LABEL_14:
    v58 = 0;
    goto LABEL_16;
  }
  if (!llvm::ScalarEvolution::isLoopEntryGuardedByCond(*(_QWORD *)(v47 + 16), *(_QWORD *)(v47 + 40), dword_1C8669E68[(int)v45], (uint64_t)v50, (uint64_t)v48))
  {
    v58 = 1;
    goto LABEL_16;
  }
  v60 = *v74;
  v51 = *(_QWORD *)(*v74 + 1568);
  if (v51)
    goto LABEL_14;
  v67 = *(llvm::ConstantInt **)(v60 + 1888);
  LODWORD(v70) = *(_DWORD *)(v60 + 1896) >> 8;
  if (v70 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v69, 0, 0);
  else
    v69 = 0;
  v51 = (uint64_t)llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v69, v59);
  if (v70 >= 0x41 && v69)
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
  v58 = 0;
  *(_QWORD *)(v60 + 1568) = v51;
LABEL_16:
  if ((_BYTE *)v72[0] == v73)
  {
    if (!v58)
      return v51;
  }
  else
  {
    v68 = v58;
    free(v72[0]);
    if (!v68)
      return v51;
  }
LABEL_18:
  v72[0] = v50;
  v61 = (llvm::Instruction *)sub_1C5B80AB0(v47, v46, v72, 1);
  v62 = llvm::SCEVExpander::expandCodeForImpl(v49, (llvm::Instruction **)v50, v52, v61);
  v72[0] = v48;
  v63 = (llvm::Instruction *)sub_1C5B80AB0(v47, v46, v72, 1);
  v64 = llvm::SCEVExpander::expandCodeForImpl(v49, (llvm::Instruction **)v48, v52, v63);
  v69 = v62;
  v70 = v64;
  v65 = sub_1C5B804D0(v47, v46, (uint64_t *)&v69, 2);
  sub_1C4773D54((uint64_t)v72, v65, 0, 0, 0);
  v71 = 257;
  v51 = sub_1C4774B48((uint64_t)v72, v45, (uint64_t)v62, (uint64_t)v64, (uint64_t)&v69);
  if ((_BYTE *)v72[0] != v73)
    free(v72[0]);
  return v51;
}

uint64_t sub_1C5B80AB0(uint64_t a1, uint64_t a2, const llvm::SCEV **a3, uint64_t a4)
{
  uint64_t v7;
  llvm *v8;
  llvm::ScalarEvolution *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::BasicBlock **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a4)
  {
    v7 = 8 * a4;
    while (1)
    {
      v8 = *a3;
      if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 16), *a3, *(const llvm::Loop **)(a1 + 40)) != 1)break;
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 40);
      if (v11 == v10 + 40)
      {
        v13 = 0;
      }
      else
      {
        v12 = v11 ? v11 - 24 : 0;
        v13 = *(unsigned __int8 *)(v12 + 16) - 29 >= 0xB ? 0 : (const llvm::BasicBlock **)v12;
      }
      if (!llvm::isSafeToExpandAt(v8, v13, *(const llvm::Instruction **)(a1 + 16), v9))
        break;
      ++a3;
      v7 -= 8;
      if (!v7)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(v14 + 40);
    if (v15 == v14 + 40)
    {
      return 0;
    }
    else
    {
      if (v15)
        v16 = v15 - 24;
      else
        v16 = 0;
      if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
        return 0;
      else
        return v16;
    }
  }
  return a2;
}

__n128 sub_1C5B80B90(_WORD *a1, double **a2, __n128 *a3)
{
  int v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81FA78, "loop-predication-latch-probability-scale", 0x28uLL);
  word_1ED81FA82 = (32 * (*a1 & 3)) | word_1ED81FA82 & 0xFF9F;
  *(float *)&v6 = **a2;
  dword_1ED81FAF8 = v6;
  byte_1ED81FB0C = 1;
  dword_1ED81FB08 = v6;
  result = *a3;
  xmmword_1ED81FA98 = (__int128)*a3;
  return result;
}

__n128 sub_1C5B80C14(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81FB38, "loop-predication-predicate-widenable-branches-to-deopt", 0x36uLL);
  word_1ED81FB42 = (32 * (*a1 & 3)) | word_1ED81FB42 & 0xFF9F;
  result = *a2;
  xmmword_1ED81FB58 = (__int128)*a2;
  v7 = *a3;
  byte_1ED81FBB8 = **a3;
  byte_1ED81FBC9 = 1;
  byte_1ED81FBC8 = *v7;
  return result;
}

uint64_t sub_1C5B80C98()
{
  uint64_t v1;
  int v2;
  double *v3;
  __n128 v4;

  LODWORD(v3) = 1;
  LOBYTE(v1) = 1;
  v4.n128_u64[0] = (unint64_t)&v1;
  sub_1C631BCB4(&v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81F838, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v1) = 1;
  v4.n128_u64[0] = (unint64_t)&v1;
  sub_1C631BD88(&v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81F8F8, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v1) = 0;
  v4.n128_u64[0] = (unint64_t)&v1;
  sub_1C631BE5C(&v3, (char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81F9B8, &dword_1C475E000);
  v2 = 1;
  v1 = 0x4000000000000000;
  v3 = (double *)&v1;
  v4.n128_u64[0] = (unint64_t)"scale factor for the latch probability. Value should be greater than 1. Lower values are ignored";
  v4.n128_u64[1] = 96;
  sub_1C631BF30(&v2, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED81FA78, &dword_1C475E000);
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Whether or not we should predicate guards expressed as widenable branches to deoptimize blocks";
  v4.n128_u64[1] = 94;
  LOBYTE(v2) = 1;
  v3 = (double *)&v2;
  sub_1C631BFD4(&v1, &v4, (char **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81FB38, &dword_1C475E000);
}

uint64_t sub_1C5B80DE4(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Reroll loops";
  *(_QWORD *)(v3 + 8) = 12;
  *(_QWORD *)(v3 + 16) = "loop-reroll";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1ED81FCB8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5B841E4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5B80E80(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81FCB8;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195B90;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81FCC0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B80DE4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81FCC0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B80F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const llvm::Loop *v5;
  uint64_t v7;
  uint64_t v8;
  llvm::ScalarEvolution *v9;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t Exact;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t SCEVIter;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BOOL4 v43;
  char v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  _BYTE *v62;
  unsigned int v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  const llvm::Instruction *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  char *v80;
  uint64_t *v81;
  llvm::ScalarEvolution **v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  BOOL v95;
  int v96;
  const void *v97;
  const void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  llvm::ScalarEvolution *v105;
  uint64_t v106;
  llvm::AAResults *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  llvm::AAResults *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  void *v177;
  uint64_t **v178;
  llvm::AAResults *v179;
  uint64_t v180;
  llvm::AAResults *v181;
  llvm::AAResults *v182;
  llvm::AAResults *v183;
  _QWORD **v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t *v202;
  unint64_t *v203;
  uint64_t *v204;
  _QWORD **v205;
  unint64_t v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD **v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  int v231;
  unint64_t *v232;
  unint64_t *v233;
  void *v234;
  _QWORD **v235;
  unint64_t v236;
  BOOL v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t *v241;
  _QWORD **v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD **v245;
  uint64_t v246;
  _QWORD **v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  int8x8_t *v256;
  uint64_t v257;
  int8x8_t v258;
  uint8x8_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t *v263;
  uint64_t *v264;
  unsigned int v265;
  _QWORD *v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  _QWORD *v277;
  uint64_t *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t *v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  int v297;
  uint64_t v299;
  unsigned int v300;
  int8x8_t *v301;
  uint64_t v302;
  int8x8_t v303;
  uint8x8_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t *v308;
  char isSameOperationAs;
  unsigned int v310;
  uint64_t i;
  uint64_t *v313;
  uint64_t v314;
  int v315;
  unint64_t v316;
  char v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  BOOL v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  _BOOL4 v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  _QWORD *v332;
  uint64_t *v333;
  _QWORD *v334;
  uint64_t *v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t *v338;
  _QWORD *v339;
  uint64_t *v340;
  uint64_t v341;
  _QWORD *v342;
  char *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  char *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  unsigned int v354;
  uint64_t v355;
  llvm::AliasSet *j;
  int v357;
  int *v358;
  uint64_t v359;
  llvm::BasicBlock *v360;
  uint64_t v361;
  llvm::BasicBlock *v362;
  uint64_t v363;
  uint64_t v364;
  int *v365;
  int *v366;
  int v367;
  char *v368;
  uint64_t v369;
  llvm::BasicBlock *v370;
  int v371;
  int v372;
  int v373;
  int v374;
  void **v375;
  uint64_t k;
  _QWORD *v377;
  int v378;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  llvm::User **v390;
  uint64_t v391;
  uint64_t v392;
  llvm::User *v393;
  int *v394;
  int v395;
  uint64_t ***v396;
  uint64_t **v397;
  uint64_t v398;
  uint64_t **v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  llvm::BasicBlock *v403;
  llvm::Value *v404;
  llvm::Instruction **AddRecExpr;
  llvm::Type *v406;
  char *FirstNonPHIOrDbg;
  unsigned __int8 *v408;
  llvm::User **v409;
  uint64_t *v410;
  llvm::Value *v411;
  char *v412;
  char *v413;
  unint64_t v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  unsigned int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  llvm::ScalarEvolution *v425;
  unint64_t v426;
  uint64_t v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  unsigned int v441;
  void *v442;
  char *v443;
  uint64_t v444;
  char *v445;
  uint64_t *v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t v451;
  int v452;
  unint64_t v453;
  int v454;
  char *v455;
  uint64_t v456;
  _BOOL4 v457;
  char *v458;
  char *v459;
  char *v460;
  char v461;
  llvm::BasicBlock *v462;
  unint64_t v463;
  llvm::BasicBlock *v464;
  llvm::BasicBlock *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469[2];
  int v470;
  llvm::AAResults *v471;
  uint64_t v472;
  llvm::AliasSet *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unsigned int v483;
  void *v484;
  uint64_t v485;
  _BYTE v486[2425];
  __int128 v487;
  int v488;
  __int128 v489;
  int v490;
  __int128 v491;
  unsigned int v492;
  void *v493;
  uint64_t v494;
  _BYTE v495[128];
  unint64_t v496;
  void *v497;
  llvm::ScalarEvolution *v498;
  llvm::AAResults *v499;
  __int128 v500;
  uint64_t v501;
  char v502;
  uint64_t v503[2];
  unint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  void *v508;
  uint64_t v509;
  _BYTE v510[128];
  _QWORD v511[2];
  int v512;
  uint64_t *v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  void *v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  _BYTE v522[128];
  void *v523;
  void *v524;
  uint64_t v525;
  int v526;
  _BYTE v527[128];
  void *v528;
  void *v529;
  uint64_t v530;
  int v531;
  _BYTE v532[128];
  void *v533;
  void *__b;
  uint64_t v535;
  int v536;
  _QWORD v537[94];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v537[92] = *MEMORY[0x1E0C80C00];
  if (((*((_QWORD *)v5 + 5) - *((_QWORD *)v5 + 4)) & 0x7FFFFFFF0) != 0)
    return 0;
  v7 = (uint64_t)v5;
  v8 = v4;
  if (!llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount(*(llvm::ScalarEvolution **)(v4 + 16), v5))
    return 0;
  v9 = *(llvm::ScalarEvolution **)(v8 + 16);
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v9, (const llvm::Loop *)v7);
  Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v7, (uint64_t)v9, 0);
  v493 = v495;
  v494 = 0x1000000000;
  v451 = v8 + 48;
  sub_1C61446F0((unsigned int *)(v8 + 48));
  *(_QWORD *)(v8 + 72) = 0;
  v12 = **(_QWORD **)(v7 + 32);
  v13 = v12 + 40;
  v14 = *(_QWORD *)(v12 + 48);
  if (v14 != v12 + 40)
  {
    v15 = *(_QWORD *)(v12 + 48);
    while (1)
    {
      v16 = v15 - 24;
      if (!v15)
        v16 = 0;
      if (*(_BYTE *)(v16 + 16) != 83)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == v13)
      {
        v15 = v13;
        goto LABEL_16;
      }
    }
    v17 = *(unsigned __int8 *)(v15 - 8) - 38;
    v87 = v17 > 0x38;
    v18 = (1 << v17) & 0x100060000000001;
    if (!v87 && v18 != 0)
      v15 = *(_QWORD *)(v15 + 8);
LABEL_16:
    if (v14 != v15)
    {
      while (1)
      {
        v20 = v14 ? v14 - 24 : 0;
        if (*(_BYTE *)(v20 + 16) == 83 && (*(unsigned __int8 *)(*(_QWORD *)v20 + 8) | 2) == 0xF)
          break;
LABEL_43:
        v14 = *(_QWORD *)(v14 + 8);
        if (v14 == v15)
          goto LABEL_93;
      }
      v21 = *(_QWORD *)(v8 + 16);
      v22 = *(_QWORD *)(v21 + 104);
      v23 = *(_DWORD *)(v21 + 120);
      if (v23)
      {
        v24 = (v23 - 1) & ((v20 >> 4) ^ (v20 >> 9));
        v25 = v22 + 48 * v24;
        v26 = *(_QWORD *)(v25 + 24);
        if (v26 == v20)
        {
LABEL_29:
          if (v25 == v22 + 48 * v23 || (SCEVIter = *(_QWORD *)(v25 + 40)) == 0)
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v21, v20);
          if (SCEVIter)
            v30 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
          else
            v30 = 0;
          if (v30 && *(_QWORD *)(SCEVIter + 48) == v7 && *(_QWORD *)(SCEVIter + 40) == 2)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8);
            if (v31 && *(_WORD *)(v31 + 24) == 0)
            {
              v448 = Exact;
              v33 = *(_QWORD *)(v31 + 32);
              v34 = *(_DWORD *)(v33 + 32);
              if (v34 > 0x40)
                v35 = **(_QWORD **)(v33 + 24);
              else
                v35 = (uint64_t)(*(_QWORD *)(v33 + 24) << -(char)v34) >> -(char)v34;
              v496 = v20;
              sub_1C617C470(v451, (uint64_t *)&v496)[1] = v35;
              v466 = *(_QWORD *)(v20 + 8);
              if (v466)
              {
                v36 = 1;
                v37 = *(_QWORD *)(v20 + 8);
                do
                {
                  v37 = *(_QWORD *)(v37 + 8);
                  --v36;
                }
                while (v37);
                if (-v36 == 1 || v36 == 0)
                {
                  while (1)
                  {
                    v39 = *(_QWORD *)(v466 + 24);
                    v40 = *(_QWORD *)(v39 + 8);
                    if (!v40)
                      break;
                    v41 = 1;
                    v42 = *(_QWORD *)(v39 + 8);
                    do
                    {
                      v42 = *(_QWORD *)(v42 + 8);
                      --v41;
                    }
                    while (v42);
                    v43 = sub_1C5B84664(*(_QWORD *)(v466 + 24));
                    if (-v41 != 1 && v41 != 0)
                      break;
                    v44 = v41 != -1 || v43;
                    if (v36)
                      v44 = 0;
                    v45 = v41 && v36 == -1;
                    if (v45 || (v44 & 1) != 0)
                      break;
                    if (v39)
                    {
                      v46 = *(unsigned __int8 *)(v39 + 16);
                      if (v46 >= 0x1C && v46 - 59 >= 0xFFFFFFEE)
                      {
                        if (v46 == 41)
                        {
                          while (1)
                          {
                            v47 = *(_QWORD *)(v40 + 24);
                            v48 = *(unsigned __int8 *)(v47 + 16);
                            if (v47 && v48 == 83)
                            {
                              if (v47 != v20)
                                goto LABEL_53;
                            }
                            else
                            {
                              if ((*(_BYTE *)(v39 + 17) & 4) != 0)
                              {
                                v49 = *(_QWORD *)(v47 + 8);
                                if (v49)
                                {
                                  if (v48 == 68 && *(_QWORD *)(v49 + 8) == 0)
                                    v47 = *(_QWORD *)(v49 + 24);
                                }
                              }
                              if (!sub_1C5B84664(v47))
                                goto LABEL_53;
                            }
                            v40 = *(_QWORD *)(v40 + 8);
                            if (!v40)
                              goto LABEL_91;
                          }
                        }
                        break;
                      }
                    }
                    if (!v43)
                      break;
LABEL_91:
                    v466 = *(_QWORD *)(v466 + 8);
                    if (!v466)
                    {
                      *(_QWORD *)(v8 + 72) = v20;
                      goto LABEL_56;
                    }
                  }
                }
              }
LABEL_53:
              v38 = v494;
              if (v494 >= (unint64_t)HIDWORD(v494))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v493, (uint64_t)v495, v494 + 1, 8);
                v38 = v494;
              }
              *((_QWORD *)v493 + v38) = v20;
              LODWORD(v494) = v494 + 1;
LABEL_56:
              Exact = v448;
            }
          }
          goto LABEL_43;
        }
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v25 = v22 + 48 * v24;
          v26 = *(_QWORD *)(v25 + 24);
          if (v26 == v20)
            goto LABEL_29;
        }
      }
      v25 = v22 + 48 * v23;
      goto LABEL_29;
    }
  }
LABEL_93:
  v51 = v494;
  if ((_DWORD)v494)
  {
    v449 = Exact;
    v484 = v486;
    v485 = 0x1000000000;
    v487 = 0u;
    v488 = 0;
    v489 = 0u;
    v490 = 0;
    v491 = 0u;
    v492 = 0;
    v52 = **(_QWORD **)(v7 + 32);
    v53 = v52 + 40;
    v54 = *(_QWORD *)(v52 + 48);
    if (v54 == v52 + 40)
    {
      v57 = (uint64_t *)v493;
      v58 = (char *)v493 + 8 * v494;
LABEL_200:
      v450 = (uint64_t *)v58;
      v103 = &v507;
      while (1)
      {
        v104 = *v57;
        v106 = *(_QWORD *)(v8 + 8);
        v105 = *(llvm::ScalarEvolution **)(v8 + 16);
        v107 = *(llvm::AAResults **)v8;
        v108 = *(_BYTE *)(v8 + 40);
        v109 = *(_QWORD *)(v8 + 72);
        v496 = v8;
        v497 = (void *)v7;
        v498 = v105;
        v499 = v107;
        v500 = *(_OWORD *)(v8 + 24);
        v501 = v106;
        v502 = v108;
        v503[0] = v104;
        v505 = v103;
        v506 = 0x1000000000;
        v508 = v510;
        v509 = 0x1000000000;
        v511[0] = 0;
        v511[1] = 0;
        v512 = 0;
        v513 = 0;
        v514 = 0;
        v515 = 0;
        v516 = v8 + 48;
        v517 = v109;
        v111 = sub_1C617C470(v451, v503)[1];
        v503[1] = v111;
        if (v111 < 0)
          v111 = -v111;
        v112 = v503[0];
        if (v111 == 1)
          break;
        v528 = v532;
        v529 = v532;
        v530 = 16;
        v531 = 0;
        v117 = sub_1C5B849E0((uint64_t)&v496, v503[0], (uint64_t)&v528, v110);
        if (v529 != v528)
          free(v529);
        if (v117)
          goto LABEL_220;
LABEL_221:
        sub_1C631C380((uint64_t)v511);
        if (v508 != v510)
          free(v508);
        sub_1C5B85C60((void **)v505, (void **)v505 + 39 * v506);
        if (v505 != v103)
          free(v505);
        if (++v57 == v450)
          goto LABEL_813;
      }
      v113 = v103;
      v114 = *(_QWORD *)(v503[0] + 8);
      if (v114)
      {
        do
        {
          v115 = *(_QWORD *)(v114 + 24);
          if (sub_1C5B846F4(v115, v503[0]))
          {
            v116 = v509;
            if (v509 >= (unint64_t)HIDWORD(v509))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)v510, v509 + 1, 8);
              v116 = v509;
            }
            *((_QWORD *)v508 + v116) = v115;
            LODWORD(v509) = v509 + 1;
          }
          v114 = *(_QWORD *)(v114 + 8);
        }
        while (v114);
        v112 = v503[0];
      }
      v533 = v537;
      __b = v537;
      v535 = 16;
      v536 = 0;
      sub_1C5B8475C((uint64_t)&v496, v112, (uint64_t)&v533, v110);
      if (__b != v533)
        free(__b);
      v118 = v503[0];
      v119 = v509;
      v103 = v113;
      if (v509 >= (unint64_t)HIDWORD(v509))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)v510, v509 + 1, 8);
        v119 = v509;
      }
      *((_QWORD *)v508 + v119) = v118;
      LODWORD(v509) = v509 + 1;
LABEL_220:
      if (!(_DWORD)v506)
        goto LABEL_221;
      v120 = 312 * v506;
      v121 = (unsigned int *)((char *)v505 + 16);
      do
      {
        v122 = *v121;
        if (!(_DWORD)v122 || (_DWORD)v122 != *((_DWORD *)v505 + 4))
          goto LABEL_221;
        v121 += 78;
        v120 -= 312;
      }
      while (v120);
      v123 = v122 + 1;
      v504 = v122 + 1;
      if (v122 > 0x1F)
        goto LABEL_221;
      v446 = v103;
      v447 = v57;
      v528 = v532;
      v529 = v532;
      v530 = 16;
      v531 = 0;
      v523 = v527;
      v524 = v527;
      v525 = 16;
      v526 = 0;
      v518 = v522;
      v519 = v522;
      v520 = 16;
      LODWORD(v521) = 0;
      sub_1C61446F0((unsigned int *)&v487);
      sub_1C61446F0((unsigned int *)&v489);
      sub_1C6150F00((uint64_t)&v491);
      v124 = v485;
      if ((_DWORD)v485)
      {
        v172 = 0;
        do
        {
          v173 = *((unsigned int *)v484 + 38 * v172 + 4);
          if (!((v173 - 1) % v123))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v523, *(_QWORD *)(*((_QWORD *)v484 + 19 * v172 + 1) + 8 * v173 - 8));
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v518, **((_QWORD **)v484 + 19 * v172 + 1));
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v528, **((_QWORD **)v484 + 19 * v172 + 1));
            v533 = (void *)**((_QWORD **)v484 + 19 * v172 + 1);
            *((_DWORD *)sub_1C6128C08((uint64_t *)&v487, &v533) + 2) = v172;
            v174 = *((unsigned int *)v484 + 38 * v172 + 4);
            if ((_DWORD)v174 != 1)
            {
              v175 = (void **)(*((_QWORD *)v484 + 19 * v172 + 1) + 8);
              v176 = 8 * v174 - 8;
              do
              {
                v533 = 0;
                v177 = *v175++;
                v533 = v177;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v528, (uint64_t)v177);
                *((_DWORD *)sub_1C6128C08((uint64_t *)&v487, &v533) + 2) = v172;
                v176 -= 8;
              }
              while (v176);
            }
          }
          ++v172;
        }
        while (v172 != v124);
      }
      v125 = **((_QWORD **)v497 + 4);
      v126 = v125 + 40;
      v127 = *(_QWORD *)(v125 + 48);
      if (v127 == v125 + 40)
      {
LABEL_234:
        v128 = v537;
        v533 = v537;
        __b = v537;
        v535 = 16;
        v536 = 0;
        v129 = v537;
        if ((_DWORD)v506)
        {
          v130 = (char *)v505;
          v131 = (char *)v505 + 312 * v506;
          do
          {
            v132 = *((unsigned int *)v130 + 4);
            if ((_DWORD)v132)
            {
              v133 = (uint64_t *)*((_QWORD *)v130 + 1);
              v134 = 8 * v132;
              do
              {
                v135 = *v133++;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v135);
                v134 -= 8;
              }
              while (v134);
            }
            v136 = *((_QWORD *)v130 + 20);
            v137 = 172;
            if (v136 != *((_QWORD *)v130 + 19))
              v137 = 168;
            v138 = *(unsigned int *)&v130[v137];
            if ((_DWORD)v138)
            {
              v139 = 8 * v138;
              v140 = (uint64_t *)*((_QWORD *)v130 + 20);
              while ((unint64_t)*v140 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v140;
                v139 -= 8;
                if (!v139)
                  goto LABEL_253;
              }
            }
            else
            {
              v140 = (uint64_t *)*((_QWORD *)v130 + 20);
            }
            v141 = (_QWORD *)(v136 + 8 * v138);
            if (v140 != v141)
            {
              v142 = *v140;
              while (1)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v142);
                v143 = (unint64_t *)(v140 + 1);
                do
                {
                  if (v143 == v141)
                    goto LABEL_253;
                  v144 = *v143++;
                  v142 = v144;
                }
                while (v144 > 0xFFFFFFFFFFFFFFFDLL);
                v140 = (uint64_t *)(v143 - 1);
              }
            }
LABEL_253:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, *(_QWORD *)v130);
            v130 += 312;
          }
          while (v130 != v131);
          v129 = v533;
          v128 = __b;
        }
        if ((_DWORD)v509)
        {
          v145 = (uint64_t *)v508;
          v146 = 8 * v509;
          do
          {
            v147 = *v145++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v147);
            v146 -= 8;
          }
          while (v146);
          v128 = __b;
          v129 = v533;
        }
        if ((_DWORD)v506)
        {
          v178 = (uint64_t **)v505;
          v460 = (char *)v505 + 312 * v506;
          do
          {
            v471 = 0;
            v472 = 0;
            LODWORD(v473) = 0;
            sub_1C5B85EA8((uint64_t)&v496, (uint64_t)*v178, &v533, &v528, (uint64_t)&v471);
            v179 = (llvm::AAResults *)((char *)v471 + 8 * v473);
            v462 = (llvm::BasicBlock *)v178;
            if ((_DWORD)v472)
            {
              if ((_DWORD)v473)
              {
                v180 = 8 * v473;
                v181 = v471;
                while ((*(_QWORD *)v181 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v181 = (llvm::AAResults *)((char *)v181 + 8);
                  v180 -= 8;
                  if (!v180)
                    goto LABEL_313;
                }
              }
              else
              {
                v181 = v471;
              }
            }
            else
            {
LABEL_313:
              v181 = (llvm::AAResults *)((char *)v471 + 8 * v473);
            }
            v182 = (llvm::AAResults *)((char *)v471 + 8 * v473);
LABEL_316:
            while (v181 != v182)
            {
              v481 = 0;
              v183 = (llvm::AAResults *)((char *)v181 + 8);
              v481 = *(uint64_t **)v181;
              v184 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v481);
              **v184 |= 1uLL;
              v181 = v179;
              if (v183 != v179)
              {
                v181 = v183;
                do
                {
                  if ((*(_QWORD *)v181 | 0x1000) != 0xFFFFFFFFFFFFF000)
                    goto LABEL_316;
                  v181 = (llvm::AAResults *)((char *)v181 + 8);
                }
                while (v181 != v179);
                v181 = v179;
              }
            }
            v185 = *((unsigned int *)v178 + 4);
            if ((_DWORD)v185)
            {
              v186 = v178[1];
              v187 = &v186[v185];
              v188 = 1;
              do
              {
                v189 = *v186;
                v481 = 0;
                v482 = 0;
                v483 = 0;
                sub_1C5B85EA8((uint64_t)&v496, v189, &v533, &v528, (uint64_t)&v481);
                if ((_DWORD)v482 != (_DWORD)v472)
                {
                  MEMORY[0x1CAA32FB4](v481, 8);
                  MEMORY[0x1CAA32FB4](v471, 8);
                  v207 = 0;
                  goto LABEL_394;
                }
                v190 = v481;
                v191 = &v481[v483];
                if ((_DWORD)v482)
                {
                  if (v483)
                  {
                    v192 = 8 * v483;
                    v193 = v481;
                    while ((*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      ++v193;
                      v192 -= 8;
                      if (!v192)
                        goto LABEL_330;
                    }
                  }
                  else
                  {
                    v193 = v481;
                  }
                }
                else
                {
LABEL_330:
                  v193 = &v481[v483];
                }
                v194 = &v481[v483];
                if (v193 != v194)
                {
                  do
                  {
                    v469[0] = 0;
                    v195 = v193 + 1;
                    v469[0] = *v193;
                    v196 = (_QWORD *)sub_1C631C178((uint64_t)v511, v469);
                    *(_QWORD *)(*v196 + 8 * (v188 >> 6)) |= 1 << v188;
                    v193 = v191;
                    if (v195 != v191)
                    {
                      v193 = v195;
                      do
                      {
                        if ((*v193 | 0x1000) != 0xFFFFFFFFFFFFF000)
                          goto LABEL_338;
                        ++v193;
                      }
                      while (v193 != v191);
                      v193 = v191;
                    }
LABEL_338:
                    ;
                  }
                  while (v193 != v194);
                  v190 = v481;
                }
                MEMORY[0x1CAA32FB4](v190, 8);
                ++v188;
                ++v186;
              }
              while (v186 != v187);
            }
            v197 = *((_QWORD *)v462 + 20);
            v198 = 172;
            if (v197 != *((_QWORD *)v462 + 19))
              v198 = 168;
            v199 = *(unsigned int *)((char *)v462 + v198);
            if ((_DWORD)v199)
            {
              v200 = 8 * v199;
              v201 = (unint64_t *)*((_QWORD *)v462 + 20);
              while (*v201 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v201;
                v200 -= 8;
                if (!v200)
                  goto LABEL_354;
              }
            }
            else
            {
              v201 = (unint64_t *)*((_QWORD *)v462 + 20);
            }
            v202 = (unint64_t *)(v197 + 8 * v199);
            if (v201 != v202)
            {
              while (1)
              {
                v481 = 0;
                v204 = (uint64_t *)*v201;
                v203 = v201 + 1;
                v481 = v204;
                v205 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v481);
                **v205 |= 0x200000000uLL;
                do
                {
                  if (v203 == v202)
                    goto LABEL_354;
                  v206 = *v203++;
                }
                while (v206 > 0xFFFFFFFFFFFFFFFDLL);
                v201 = v203 - 1;
              }
            }
LABEL_354:
            MEMORY[0x1CAA32FB4](v471, 8);
            v178 = (uint64_t **)((char *)v462 + 312);
          }
          while ((char *)v462 + 312 != v460);
          v128 = __b;
          v129 = v533;
        }
        if (v128 != v129)
        {
          if (v535 >= 0x21 && 4 * (HIDWORD(v535) - v536) < v535)
          {
            free(v128);
            v440 = 1 << (33 - __clz(HIDWORD(v535) - v536 - 1));
            v87 = (HIDWORD(v535) - v536) > 0x10;
            v536 = 0;
            if (v87)
              v441 = v440;
            else
              v441 = 32;
            v535 = v441;
            v442 = malloc_type_malloc(8 * v441, 0x4065EBACuLL);
            if (!v442)
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            __b = v442;
            memset(v442, 255, 8 * v535);
            goto LABEL_262;
          }
          memset(v128, 255, 8 * v535);
        }
        v536 = 0;
        HIDWORD(v535) = 0;
LABEL_262:
        if ((_DWORD)v506)
        {
          v148 = (char *)v505;
          v149 = (char *)v505 + 312 * v506;
          do
          {
            v150 = *((unsigned int *)v148 + 4);
            if ((_DWORD)v150)
            {
              v151 = (uint64_t *)*((_QWORD *)v148 + 1);
              v152 = 8 * v150;
              do
              {
                v153 = *v151++;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v153);
                v152 -= 8;
              }
              while (v152);
            }
            v154 = *((_QWORD *)v148 + 20);
            v155 = 172;
            if (v154 != *((_QWORD *)v148 + 19))
              v155 = 168;
            v156 = *(unsigned int *)&v148[v155];
            if ((_DWORD)v156)
            {
              v157 = 8 * v156;
              v158 = (uint64_t *)*((_QWORD *)v148 + 20);
              while ((unint64_t)*v158 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v158;
                v157 -= 8;
                if (!v157)
                  goto LABEL_281;
              }
            }
            else
            {
              v158 = (uint64_t *)*((_QWORD *)v148 + 20);
            }
            v159 = (_QWORD *)(v154 + 8 * v156);
            if (v158 != v159)
            {
              v160 = *v158;
              while (1)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v160);
                v161 = (unint64_t *)(v158 + 1);
                do
                {
                  if (v161 == v159)
                    goto LABEL_281;
                  v162 = *v161++;
                  v160 = v162;
                }
                while (v162 > 0xFFFFFFFFFFFFFFFDLL);
                v158 = (uint64_t *)(v161 - 1);
              }
            }
LABEL_281:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, *(_QWORD *)v148);
            v148 += 312;
          }
          while (v148 != v149);
        }
        v471 = 0;
        v472 = 0;
        LODWORD(v473) = 0;
        if (!(_DWORD)v509)
        {
          v163 = 0;
          v164 = 0;
LABEL_360:
          v211 = (uint64_t *)((char *)v164 + 8 * v163);
          v212 = v211;
          goto LABEL_361;
        }
        v208 = (uint64_t *)v508;
        v209 = 8 * v509;
        do
        {
          v210 = *v208++;
          sub_1C5B85EA8((uint64_t)&v496, v210, &v533, &v528, (uint64_t)&v471);
          v209 -= 8;
        }
        while (v209);
        v164 = v471;
        v163 = v473;
        if (!(_DWORD)v472)
          goto LABEL_360;
        v212 = (uint64_t *)((char *)v471 + 8 * v473);
        if (!(_DWORD)v473)
        {
          v211 = (uint64_t *)v471;
          goto LABEL_361;
        }
        v364 = 0;
        while ((*(_QWORD *)((char *)v471 + v364) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v364 += 8;
          if (8 * v473 == v364)
          {
            v211 = (uint64_t *)((char *)v471 + 8 * v473);
            goto LABEL_361;
          }
        }
        v211 = (uint64_t *)((char *)v471 + v364);
LABEL_361:
        v213 = (uint64_t *)((char *)v164 + 8 * v163);
        while (1)
        {
LABEL_362:
          if (v211 == v213)
          {
            v207 = 1;
            goto LABEL_393;
          }
          v481 = 0;
          v214 = *v211;
          v481 = (uint64_t *)v214;
          v215 = *(unsigned __int8 *)(v214 + 16) - 33;
          if (v215 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v214 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_392;
            if (((1 << (*(_BYTE *)(v214 + 16) - 33)) & 0x8000000000041) == 0)
            {
              if (v215 == 27 && (*(_WORD *)(v214 + 18) & 0x301) != 0)
                goto LABEL_392;
              goto LABEL_367;
            }
            v218 = *(_QWORD *)(v214 + 64);
            if (v218 && (*(_BYTE *)(v218 + 17) & 0x30) != 0)
              goto LABEL_367;
            v219 = *(_DWORD *)(v214 + 20);
            if (v219 < 0)
            {
              v220 = v214 - 32 * (v219 & 0x7FFFFFF);
              v223 = *(_QWORD *)(v220 - 8);
              v221 = v220 - 8;
              v222 = v223;
              if (v223)
              {
                v224 = -v222;
                while (1)
                {
                  v225 = *(_DWORD *)(*(_QWORD *)(v221 + v224) + 8);
                  if (v225 >= 2 && v225 != 7)
                    break;
                  v224 += 16;
                  if (!v224)
                    goto LABEL_377;
                }
LABEL_392:
                v207 = 0;
LABEL_393:
                MEMORY[0x1CAA32FB4](v471, 8);
LABEL_394:
                if (__b != v533)
                  free(__b);
                if (!v207)
                {
                  v231 = 0;
                  goto LABEL_682;
                }
                if (v519 == v518)
                  v227 = (uint64_t *)((char *)&v520 + 4);
                else
                  v227 = &v520;
                v228 = *(unsigned int *)v227;
                if ((_DWORD)v228)
                {
                  v229 = 8 * v228;
                  v230 = (unint64_t *)v519;
                  while (*v230 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v230;
                    v229 -= 8;
                    if (!v229)
                      goto LABEL_412;
                  }
                }
                else
                {
                  v230 = (unint64_t *)v519;
                }
                v232 = (unint64_t *)((char *)v519 + 8 * v228);
                if (v230 != v232)
                {
                  while (1)
                  {
                    v533 = 0;
                    v234 = (void *)*v230;
                    v233 = v230 + 1;
                    v533 = v234;
                    v235 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v533);
                    **v235 |= 0x200000000uLL;
                    do
                    {
                      if (v233 == v232)
                        goto LABEL_412;
                      v236 = *v233++;
                    }
                    while (v236 > 0xFFFFFFFFFFFFFFFDLL);
                    v230 = v233 - 1;
                  }
                }
LABEL_412:
                if (v517)
                  v237 = v517 == v503[0];
                else
                  v237 = 1;
                if (!v237)
                {
                  v238 = *(_QWORD *)(v517 + 8);
                  if (v238)
                  {
                    v239 = (_QWORD *)(**((_QWORD **)v497 + 4) + 40);
                    do
                    {
                      if (*(unsigned __int8 *)(*(_QWORD *)(v238 + 24) + 16) <= 0x1Bu)
                        v240 = 0;
                      else
                        v240 = *(_QWORD **)(v238 + 24);
                      v533 = v240;
                      v241 = (uint64_t *)&v533;
LABEL_422:
                      v242 = (_QWORD **)sub_1C631C178((uint64_t)v511, v241);
                      **v242 |= 0x200000000uLL;
                      while (1)
                      {
                        v240 = (_QWORD *)v240[1];
                        if (!v240)
                          break;
                        v243 = v240[3];
                        if (*(unsigned __int8 *)(v243 + 16) <= 0x1Bu)
                          v244 = 0;
                        else
                          v244 = v240[3];
                        v471 = (llvm::AAResults *)v244;
                        v245 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v471);
                        **v245 |= 0x200000000uLL;
                        v246 = v243;
                        if (*(_BYTE *)(v244 + 16) == 68)
                        {
                          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v244 + 8) + 24) + 16) <= 0x1Bu)
                            v246 = 0;
                          else
                            v246 = *(_QWORD *)(*(_QWORD *)(v244 + 8) + 24);
                          v471 = (llvm::AAResults *)v246;
                          v247 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v471);
                          **v247 |= 0x200000000uLL;
                        }
                        v248 = *(_QWORD *)(v243 + 8);
                        if (v248 && !*(_QWORD *)(v248 + 8))
                        {
                          v249 = 0;
                          v250 = *(_QWORD *)(*(_QWORD *)(v246 + 8) + 24);
                          if (*(_BYTE *)(v250 + 16) != 30)
                            v250 = 0;
                          v481 = (uint64_t *)v250;
                          v251 = (_QWORD *)*v239;
                          if ((_QWORD *)*v239 != v239)
                          {
                            v249 = v251 - 3;
                            if (!v251)
                              v249 = 0;
                            if (*((unsigned __int8 *)v249 + 16) - 29 >= 0xB)
                              v249 = 0;
                          }
                          if ((_QWORD *)v250 == v249)
                          {
                            v241 = (uint64_t *)&v481;
                            goto LABEL_422;
                          }
                        }
                      }
                      v238 = *(_QWORD *)(v238 + 8);
                    }
                    while (v238);
                  }
                }
                v252 = v513;
                v253 = v514;
                while (v252 != v253)
                {
                  v254 = *((unsigned int *)v252 + 4);
                  if (!(_DWORD)v254)
                    goto LABEL_458;
                  v255 = 0;
                  v256 = (int8x8_t *)v252[1];
                  v257 = 8 * v254;
                  do
                  {
                    v258 = *v256++;
                    v259 = (uint8x8_t)vcnt_s8(v258);
                    v259.i16[0] = vaddlv_u8(v259);
                    v255 += v259.i32[0];
                    v257 -= 8;
                  }
                  while (v257);
                  if (v255 != 1)
                  {
LABEL_458:
                    v260 = *v252;
                    if (!sub_1C4D99D08(*v252))
                    {
                      if (*(_BYTE *)(v260 + 16) != 84
                        || (v261 = *(_QWORD *)(v260 - 32)) == 0
                        || *(_BYTE *)(v261 + 16)
                        || *(_QWORD *)(v261 + 24) != *(_QWORD *)(v260 + 72)
                        || (*(_BYTE *)(v261 + 33) & 0x20) == 0
                        || (v262 = *(_DWORD *)(v261 + 36), v262 != 4) && v262 != 316 && v262 != 245)
                      {
                        v231 = 0;
                        goto LABEL_682;
                      }
                    }
                  }
                  v252 += 10;
                }
                if (v504 < 2)
                {
                  v231 = 1;
                  goto LABEL_682;
                }
                LODWORD(v463) = 1;
LABEL_463:
                v263 = v513;
                v471 = v499;
                v472 = (uint64_t)&v472;
                v473 = (llvm::AliasSet *)&v472;
                v477 = 0;
                v478 = 0;
                v474 = 0;
                v475 = 0;
                v476 = 0;
                v469[0] = 0;
                v469[1] = 0;
                v470 = 0;
                v533 = v537;
                __b = v537;
                v535 = 16;
                v536 = 0;
                v264 = v514;
                if (v513 != v514)
                {
                  v265 = v463;
                  while (1)
                  {
                    if ((*(_BYTE *)v263[1] & 1) != 0)
                    {
                      v266 = sub_1C477672C((uint64_t)&v533, *v263);
                      if (__b == v533)
                        v267 = (uint64_t *)((char *)&v535 + 4);
                      else
                        v267 = &v535;
                      if (v266 == (_QWORD *)((char *)__b + 8 * *(unsigned int *)v267))
                      {
                        v264 = v263;
                        goto LABEL_475;
                      }
                      v264 = v514;
                    }
                    v263 += 10;
                    if (v263 == v264)
                      goto LABEL_475;
                  }
                }
                v264 = v513;
                v265 = v463;
LABEL_475:
                v268 = sub_1C5B85CBC(v265, (uint64_t)v511, &v533, 0);
                v231 = 1;
                if (v264 == v514)
                  goto LABEL_676;
                v269 = v268;
                if (v514 == v268)
                  goto LABEL_676;
                v454 = 0;
                v270 = v513;
LABEL_478:
                v271 = *v264;
                v272 = *v269;
                if ((_DWORD)v506)
                {
                  v273 = (uint64_t *)v505;
                  v274 = 312 * v506;
                  while (1)
                  {
                    v275 = *v273;
                    if (*v273 == v271)
                      break;
                    v273 += 39;
                    v274 -= 312;
                    if (!v274)
                      goto LABEL_493;
                  }
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, *v264);
                  v276 = v513;
                  v264 = v514;
                  if (v513 != v514)
                  {
                    while (1)
                    {
                      if ((*(_BYTE *)v276[1] & 1) != 0)
                      {
                        v277 = sub_1C477672C((uint64_t)&v533, *v276);
                        if (__b == v533)
                          v278 = (uint64_t *)((char *)&v535 + 4);
                        else
                          v278 = &v535;
                        if (v277 == (_QWORD *)((char *)__b + 8 * *(unsigned int *)v278))
                          break;
                        v264 = v514;
                      }
                      v276 += 10;
                      if (v276 == v264)
                        goto LABEL_493;
                    }
                  }
                  v264 = v276;
LABEL_493:
                  if ((_DWORD)v506)
                  {
                    v279 = v505;
                    do
                    {
                      v280 = v279[1];
                      v281 = *((unsigned int *)v279 + 4);
                      if ((_DWORD)v281)
                      {
                        v282 = 8 * v281;
                        v283 = (_QWORD *)v279[1];
                        do
                        {
                          if (*v283 == v272)
                            goto LABEL_501;
                          ++v283;
                          v282 -= 8;
                        }
                        while (v282);
                        v283 = (_QWORD *)(v280 + 8 * v281);
                      }
                      else
                      {
                        v283 = (_QWORD *)v279[1];
                      }
LABEL_501:
                      if (v281 != ((uint64_t)v283 - v280) >> 3)
                      {
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v272);
                        v310 = v463;
                        goto LABEL_656;
                      }
                      v279 += 39;
                    }
                    while (v279 != (_QWORD *)((char *)v505 + 312 * v506));
                  }
                  if (v275 == v271)
                    goto LABEL_657;
                }
                if ((llvm::Instruction::isSameOperationAs((llvm::Instruction *)v271, (const llvm::Instruction *)v272, 0) & 1) != 0)
                {
                  v284 = v269;
                  v285 = v463;
                  goto LABEL_506;
                }
                v481 = v269;
                v285 = v463;
                if (v269 == v514)
                  goto LABEL_675;
                v307 = dword_1ED81FC78;
                v308 = v269;
                while (1)
                {
                  isSameOperationAs = llvm::Instruction::isSameOperationAs((llvm::Instruction *)v271, (const llvm::Instruction *)*v308, 0);
                  v284 = v481;
                  if ((isSameOperationAs & 1) != 0 || !v307)
                    break;
                  --v307;
                  v481 += 10;
                  v308 = sub_1C5B85CBC(v463, (uint64_t)v511, &v533, &v481);
                  v481 = v308;
                  if (v514 == v308)
                    goto LABEL_675;
                }
                if (v481 == v269 || v481 == v514)
                  goto LABEL_675;
                v272 = *v481;
                for (i = *(_QWORD *)(*v481 + 8); i; i = *(_QWORD *)(i + 8))
                {
                  v313 = v269;
                  do
                  {
                    if (*(_QWORD *)(i + 24) == *v313)
                      goto LABEL_675;
                    v313 += 10;
                  }
                  while (v313 != v481);
                }
LABEL_506:
                if (v270 < v284)
                {
                  while (2)
                  {
                    v286 = *v270;
                    if ((int)sub_1C476B7EC((uint64_t)(v270 + 1)) < v285)
                      goto LABEL_525;
                    v287 = *(unsigned __int8 *)(v286 + 16);
                    v288 = (v287 - 33);
                    if (v288 > 0x37)
                      goto LABEL_522;
                    if (((1 << (v287 - 33)) & 0x8000000000041) != 0)
                    {
                      v289 = *(_QWORD *)(v286 + 64);
                      if (v289 && (*(_BYTE *)(v289 + 17) & 0x30) != 0)
                        break;
                      v290 = *(_DWORD *)(v286 + 20);
                      if (v290 < 0
                        && (v291 = v286 - 32 * (v290 & 0x7FFFFFF),
                            v294 = *(_QWORD *)(v291 - 8),
                            v292 = v291 - 8,
                            (v293 = v294) != 0))
                      {
                        v295 = -v293;
                        while (1)
                        {
                          v296 = *(_DWORD *)(*(_QWORD *)(v292 + v295) + 8);
                          v87 = v296 > 7;
                          v297 = (1 << v296) & 0x83;
                          if (v87 || v297 == 0)
                            break;
                          v295 += 16;
                          if (!v295)
                            goto LABEL_516;
                        }
                      }
                      else
                      {
LABEL_516:
                        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v286, 45) & 1) != 0
                          || (llvm::CallBase::hasFnAttrOnCalledFunction(v286, 44) & 1) != 0)
                        {
                          break;
                        }
                      }
LABEL_520:
                      llvm::AliasSetTracker::add((llvm::AliasSetTracker *)&v471, (llvm::Instruction *)v286);
                    }
                    else
                    {
                      if (v288 != 27)
                      {
                        if (((1 << (v287 - 33)) & 0x808001D0000010) != 0)
                          goto LABEL_520;
LABEL_522:
                        if (v287 != 83 && (sub_1C5B85D70(v286) & 1) == 0)
                          v454 |= llvm::isSafeToSpeculativelyExecute(v286, 0, 0, 0) ^ 1;
LABEL_525:
                        v270 += 10;
                        if (v270 >= v284)
                          goto LABEL_535;
                        continue;
                      }
                      if ((*(_WORD *)(v286 + 18) & 0x301) != 0)
                        goto LABEL_520;
                    }
                    break;
                  }
                  v287 = *(unsigned __int8 *)(v286 + 16);
                  goto LABEL_522;
                }
LABEL_535:
                v299 = *((unsigned int *)v284 + 4);
                if ((_DWORD)v299)
                {
                  v300 = 0;
                  v301 = (int8x8_t *)v284[1];
                  v302 = 8 * v299;
                  do
                  {
                    v303 = *v301++;
                    v304 = (uint8x8_t)vcnt_s8(v303);
                    v304.i16[0] = vaddlv_u8(v304);
                    v300 += v304.i32[0];
                    v302 -= 8;
                  }
                  while (v302);
                  if (v300 > 1)
                    goto LABEL_675;
                }
                v305 = *(unsigned __int8 *)(v272 + 16) - 33;
                if (v305 > 0x37)
                  goto LABEL_543;
                if (((1 << (*(_BYTE *)(v272 + 16) - 33)) & 0x8000000000041) != 0)
                {
                  v314 = *(_QWORD *)(v272 + 64);
                  if (v314 && ((*(_BYTE *)(v314 + 20) & 4) != 0 || (*(_BYTE *)(v314 + 17) & 0x10) != 0))
                    goto LABEL_543;
                  LODWORD(v481) = 7;
                  if (!sub_1C53E4BBC(v272, (__int32 *)&v481, 1uLL)
                    || (v355 = *(_QWORD *)(v272 - 32)) != 0
                    && !*(_BYTE *)(v355 + 16)
                    && *(_QWORD *)(v355 + 24) == *(_QWORD *)(v272 + 72)
                    && *(_DWORD *)(v355 + 36) == 7)
                  {
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v272, 66) & 1) != 0)
                      goto LABEL_543;
                    v315 = llvm::CallBase::hasFnAttrOnCalledFunction(v272, 44) ^ 1;
                    goto LABEL_670;
                  }
                }
                else if (((1 << (*(_BYTE *)(v272 + 16) - 33)) & 0x808001C8000010) == 0)
                {
                  if (v305 != 28)
                    goto LABEL_543;
                  v315 = (*(_WORD *)(v272 + 18) & 0x301) != 0;
LABEL_670:
                  if (v315)
                  {
                    for (j = v473; j != (llvm::AliasSet *)&v472; j = (llvm::AliasSet *)*((_QWORD *)j + 1))
                    {
                      if (llvm::AliasSet::aliasesUnknownInst(j, (const llvm::Instruction *)v272, v499))
                        goto LABEL_675;
                    }
                  }
LABEL_543:
                  v306 = (v463 - 1);
                  if ((v454 & 1) == 0
                    || ((sub_1C5B85D70(v271) & 1) != 0
                     || llvm::isSafeToSpeculativelyExecute(v271, 0, 0, 0))
                    && ((sub_1C5B85D70(v272) & 1) != 0
                     || llvm::isSafeToSpeculativelyExecute(v272, 0, 0, 0)))
                  {
                    v457 = sub_1C5B85DFC((uint64_t)&v484, v271, v272);
                    if (v457)
                    {
                      switch(*(_BYTE *)(v271 + 16))
                      {
                        case ')':
                        case '-':
                          goto LABEL_620;
                        case '*':
                        case '.':
                          if ((~*(unsigned __int8 *)(v271 + 17) & 0x12) == 0)
                            goto LABEL_620;
                          break;
                        case '+':
                        case ',':
                          break;
                        default:
                          if (*(unsigned __int8 *)(v271 + 16) - 56 >= 3)
                            break;
                          goto LABEL_620;
                      }
                    }
                    if ((*(_DWORD *)(v271 + 20) & 0x7FFFFFF) != 0)
                    {
                      v316 = 0;
                      v461 = 0;
                      v317 = 0;
                      do
                      {
                        v318 = *(_DWORD *)(v272 + 20);
                        if ((v318 & 0x40000000) != 0)
                          v319 = *(_QWORD *)(v272 - 8);
                        else
                          v319 = v272 - 32 * (v318 & 0x7FFFFFF);
                        v320 = *(_QWORD *)(v319 + 32 * v316);
                        if (v457)
                        {
                          v321 = *(unsigned __int8 *)(v320 + 16) < 0x1Cu || v320 == 0;
                          if (!v321 && sub_1C5B85DFC((uint64_t)&v484, v272, v320))
                          {
                            v322 = *(_DWORD *)(v271 + 20);
                            goto LABEL_614;
                          }
                        }
                        if (v470)
                        {
                          v323 = (v470 - 1) & ((v320 >> 4) ^ (v320 >> 9));
                          v324 = *(_QWORD *)(v469[0] + 16 * v323);
                          if (v320 == v324)
                          {
LABEL_591:
                            if ((_DWORD)v323 != v470)
                            {
                              v325 = (uint64_t *)(v469[0] + 16 * v323 + 8);
LABEL_598:
                              v320 = *v325;
                              goto LABEL_599;
                            }
                          }
                          else
                          {
                            v330 = 1;
                            while (v324 != -4096)
                            {
                              v331 = v323 + v330++;
                              v323 = v331 & (v470 - 1);
                              v324 = *(_QWORD *)(v469[0] + 16 * v323);
                              if (v320 == v324)
                                goto LABEL_591;
                            }
                          }
                        }
                        if ((_DWORD)v506)
                        {
                          v325 = (uint64_t *)v505;
                          v326 = 312 * v506;
                          while (*(_QWORD *)(v325[1] + 8 * v306) != v320)
                          {
                            v325 += 39;
                            v326 -= 312;
                            if (!v326)
                              goto LABEL_599;
                          }
                          goto LABEL_598;
                        }
LABEL_599:
                        if ((v317 & 1) != 0)
                          v327 = v316 == 0;
                        else
                          v327 = v316;
                        v322 = *(_DWORD *)(v271 + 20);
                        if ((v322 & 0x40000000) != 0)
                          v328 = *(_QWORD *)(v271 - 8);
                        else
                          v328 = v271 - 32 * (v322 & 0x7FFFFFF);
                        if (*(_QWORD *)(v328 + 32 * v327) != v320)
                        {
                          if ((v317 & 1) != 0
                            || v461 & 1 | ((llvm::Instruction::isCommutative((llvm::Instruction *)v271) & 1) == 0))
                          {
                            goto LABEL_675;
                          }
                          v329 = (v322 & 0x40000000) != 0 ? *(_QWORD *)(v271 - 8) : v271 - 32 * (v322 & 0x7FFFFFF);
                          if (*(_QWORD *)(v329 + 32 * (v316 == 0)) != v320)
                            goto LABEL_675;
                          v317 = 1;
                        }
                        v461 = 1;
                        v306 = (v463 - 1);
LABEL_614:
                        ++v316;
                      }
                      while (v316 < (v322 & 0x7FFFFFFu));
                    }
LABEL_620:
                    v332 = sub_1C477672C((uint64_t)&v523, v271);
                    if (v524 == v523)
                      v333 = (uint64_t *)((char *)&v525 + 4);
                    else
                      v333 = &v525;
                    if (v332 == (_QWORD *)((char *)v524 + 8 * *(unsigned int *)v333)
                      && (v341 = *(_QWORD *)(v271 + 8)) != 0)
                    {
                      v342 = v497;
                      v343 = (char *)v497 + 56;
                      while (1)
                      {
                        v344 = sub_1C477672C((uint64_t)v343, *(_QWORD *)(*(_QWORD *)(v341 + 24) + 40));
                        v345 = v342[8];
                        v346 = 72;
                        if (v345 == v342[7])
                          v346 = 76;
                        if (v344 == (_QWORD *)(v345 + 8 * *(unsigned int *)((char *)v342 + v346)))
                          break;
                        v341 = *(_QWORD *)(v341 + 8);
                        if (!v341)
                          goto LABEL_624;
                      }
                    }
                    else
                    {
LABEL_624:
                      v334 = sub_1C477672C((uint64_t)&v523, v272);
                      if (v524 == v523)
                        v335 = (uint64_t *)((char *)&v525 + 4);
                      else
                        v335 = &v525;
                      v310 = v463;
                      if (v334 != (_QWORD *)((char *)v524 + 8 * *(unsigned int *)v335)
                        || (v347 = *(_QWORD *)(v272 + 8)) == 0)
                      {
LABEL_628:
                        v467 = v271;
                        v480 = v272;
                        if (v488)
                        {
                          v336 = (v488 - 1) & ((v271 >> 4) ^ (v271 >> 9));
                          v337 = *(_QWORD *)(v487 + 16 * v336);
                          if (v271 == v337)
                          {
LABEL_630:
                            *((_DWORD *)sub_1C6128C08((uint64_t *)&v489, &v467) + 2) = 0;
                            *((_DWORD *)sub_1C6128C08((uint64_t *)&v489, &v480) + 2) = v463;
                            v479 = 0;
                            v479 = *((_DWORD *)sub_1C6128C08((uint64_t *)&v487, &v467) + 2);
                            sub_1C6150B8C((uint64_t)&v491, &v479, (uint64_t)&v481);
                          }
                          else
                          {
                            v353 = 1;
                            while (v337 != -4096)
                            {
                              v354 = v336 + v353++;
                              v336 = v354 & (v488 - 1);
                              v337 = *(_QWORD *)(v487 + 16 * v336);
                              if (v271 == v337)
                                goto LABEL_630;
                            }
                          }
                        }
                        v467 = v272;
                        v468 = v271;
                        sub_1C509BD8C((uint64_t)v469, &v467, &v468, (uint64_t)&v481);
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v271);
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v533, v272);
                        v264 = v513;
                        v338 = v514;
                        if (v513 == v514)
                        {
                          v269 = v284;
                          goto LABEL_656;
                        }
                        while (1)
                        {
                          if ((*(_BYTE *)v264[1] & 1) != 0)
                          {
                            v339 = sub_1C477672C((uint64_t)&v533, *v264);
                            if (__b == v533)
                              v340 = (uint64_t *)((char *)&v535 + 4);
                            else
                              v340 = &v535;
                            if (v339 == (_QWORD *)((char *)__b + 8 * *(unsigned int *)v340))
                            {
                              v269 = v284;
LABEL_656:
                              v270 = v269;
                              v269 = sub_1C5B85CBC(v310, (uint64_t)v511, &v533, 0);
LABEL_657:
                              v231 = 1;
                              if (v264 == v514 || v269 == v514)
                              {
LABEL_676:
                                if (__b != v533)
                                  free(__b);
                                MEMORY[0x1CAA32FB4](v469[0], 8);
                                sub_1C4D992E4((uint64_t)&v471);
                                if ((v231 & 1) == 0 || (v463 = (v463 + 1), v504 <= v463))
                                {
LABEL_682:
                                  if (v519 != v518)
                                    free(v519);
                                  if (v524 != v523)
                                    free(v524);
                                  if (v529 != v528)
                                    free(v529);
                                  if (!v231)
                                  {
                                    v103 = v446;
                                    v57 = v447;
                                    goto LABEL_221;
                                  }
                                  v357 = DWORD2(v491);
                                  v358 = (int *)v491;
                                  v359 = v492;
                                  v360 = (llvm::BasicBlock *)(v491 + 4 * v492);
                                  v361 = v492;
                                  v362 = v360;
                                  if (DWORD2(v491))
                                  {
                                    if (!v492)
                                    {
                                      v361 = 0;
                                      v362 = (llvm::BasicBlock *)v491;
                                      goto LABEL_707;
                                    }
                                    v363 = 4 * v492;
                                    v362 = (llvm::BasicBlock *)v491;
                                    while ((*(_DWORD *)v362 - 0x7FFFFFFF) <= 1)
                                    {
                                      v362 = (llvm::BasicBlock *)((char *)v362 + 4);
                                      v363 -= 4;
                                      if (!v363)
                                      {
                                        v361 = v492;
                                        v362 = (llvm::BasicBlock *)(v491 + 4 * v492);
                                        goto LABEL_707;
                                      }
                                    }
                                    v361 = v492;
                                  }
LABEL_707:
                                  v464 = (llvm::BasicBlock *)(v491 + 4 * v361);
                                  if (v362 != v464)
                                  {
                                    do
                                    {
                                      v367 = *(_DWORD *)v362;
                                      v368 = (char *)v484 + 152 * *(int *)v362;
                                      v369 = *((unsigned int *)v368 + 4);
                                      if ((_DWORD)v369 != 1)
                                      {
                                        v372 = 0;
                                        v373 = 0;
                                        v374 = 0;
                                        v375 = (void **)(*((_QWORD *)v368 + 1) + 8);
                                        for (k = 8 * v369 - 8; k; k -= 8)
                                        {
                                          v533 = 0;
                                          v533 = *v375;
                                          v377 = sub_1C6128C08((uint64_t *)&v489, &v533);
                                          v378 = *((_DWORD *)v377 + 2);
                                          if (v378 != v374 && v378 != v374 + 1)
                                          {
                                            v380 = *(_QWORD *)(*((_QWORD *)v484 + 19 * v367 + 1)
                                                             + 8 * *((unsigned int *)v484 + 38 * v367 + 4)
                                                             - 8);
                                            switch(*(_BYTE *)(v380 + 16))
                                            {
                                              case ')':
                                              case '-':
                                                break;
                                              case '*':
                                              case '.':
                                                if ((~*(unsigned __int8 *)(v380 + 17) & 0x12) == 0)
                                                  break;
                                                goto LABEL_806;
                                              case '+':
                                              case ',':
                                                goto LABEL_806;
                                              default:
                                                if (*(unsigned __int8 *)(v380 + 16) - 56 < 3)
                                                  break;
                                                goto LABEL_806;
                                            }
                                          }
                                          if (v378 != v374)
                                          {
                                            if (v372 != v373)
                                            {
LABEL_806:
                                              v103 = v446;
                                              v57 = v447;
                                              goto LABEL_221;
                                            }
                                            v372 = 0;
                                          }
                                          ++v372;
                                          if (!v378)
                                            ++v373;
                                          ++v375;
                                          v374 = *((_DWORD *)v377 + 2);
                                        }
                                      }
                                      v370 = (llvm::BasicBlock *)((char *)v362 + 4);
                                      while (v370 != v360)
                                      {
                                        v371 = *(_DWORD *)v370;
                                        v370 = (llvm::BasicBlock *)((char *)v370 + 4);
                                        if ((v371 - 0x7FFFFFFF) >= 2)
                                        {
                                          v362 = (llvm::BasicBlock *)((char *)v370 - 4);
                                          goto LABEL_734;
                                        }
                                      }
                                      v362 = v360;
LABEL_734:
                                      ;
                                    }
                                    while (v362 != v464);
                                    v357 = DWORD2(v491);
                                    v358 = (int *)v491;
                                    v359 = v492;
                                  }
                                  v365 = &v358[v359];
                                  if (v357)
                                  {
                                    if (v359)
                                    {
                                      v439 = 4 * v359;
                                      v366 = v358;
                                      while ((*v366 - 0x7FFFFFFF) <= 1)
                                      {
                                        ++v366;
                                        v439 -= 4;
                                        if (!v439)
                                          goto LABEL_709;
                                      }
                                    }
                                    else
                                    {
                                      v366 = v358;
                                    }
                                  }
                                  else
                                  {
LABEL_709:
                                    v366 = &v358[v359];
                                  }
                                  v381 = &v358[v359];
                                  while (v366 != v381)
                                  {
                                    v382 = 0;
                                    v383 = *v366;
                                    v384 = (*((_DWORD *)v484 + 38 * *v366 + 4) - 1);
                                    do
                                    {
                                      if (v384 == v382)
                                        goto LABEL_744;
                                      v385 = v382 + 1;
                                      v533 = *(void **)(*((_QWORD *)v484 + 19 * v383 + 1) + 8 * v382 + 8);
                                      v386 = sub_1C6128C08((uint64_t *)&v489, &v533);
                                      v382 = v385;
                                    }
                                    while (!*((_DWORD *)v386 + 2));
                                    LODWORD(v384) = v385 - 2;
LABEL_744:
                                    v533 = &v535;
                                    __b = (void *)0x1000000000;
                                    v387 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v484 + 19 * v383 + 1)
                                                                 + 8 * *((unsigned int *)v484 + 38 * v383 + 4)
                                                                 - 8)
                                                     + 8);
                                    if (v387)
                                    {
                                      LODWORD(v388) = 0;
                                      do
                                      {
                                        v389 = *(_QWORD *)(v387 + 24);
                                        if (v388 >= HIDWORD(__b))
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v533, (uint64_t)&v535, v388 + 1, 8);
                                          LODWORD(v388) = (_DWORD)__b;
                                        }
                                        *((_QWORD *)v533 + v388) = v389;
                                        v388 = ((_DWORD)__b + 1);
                                        LODWORD(__b) = (_DWORD)__b + 1;
                                        v387 = *(_QWORD *)(v387 + 8);
                                      }
                                      while (v387);
                                      v390 = (llvm::User **)v533;
                                      if ((_DWORD)v388)
                                      {
                                        v391 = (int)v384 + 1;
                                        v392 = 8 * v388;
                                        do
                                        {
                                          v393 = *v390++;
                                          llvm::User::replaceUsesOfWith(v393, *(llvm::Value **)(*((_QWORD *)v484 + 19 * v383 + 1)+ 8 * *((unsigned int *)v484 + 38 * v383 + 4)- 8), *(llvm::Value **)(*((_QWORD *)v484 + 19 * v383 + 1) + 8 * v391));
                                          v392 -= 8;
                                        }
                                        while (v392);
                                        v390 = (llvm::User **)v533;
                                      }
                                      if (v390 != (llvm::User **)&v535)
                                        free(v390);
                                    }
                                    v394 = v366 + 1;
                                    while (v394 != v365)
                                    {
                                      v395 = *v394++;
                                      if ((v395 - 0x7FFFFFFF) >= 2)
                                      {
                                        v366 = v394 - 1;
                                        goto LABEL_760;
                                      }
                                    }
                                    v366 = v365;
LABEL_760:
                                    ;
                                  }
                                  v465 = (llvm::BasicBlock *)**((_QWORD **)v497 + 4);
                                  v528 = &v530;
                                  v529 = (void *)0x800000000;
                                  v523 = &v525;
                                  v524 = (void *)0x800000000;
                                  if (!(_DWORD)v506)
                                  {
LABEL_762:
                                    v396 = (uint64_t ***)*((_QWORD *)v465 + 5);
                                    if (v396 != (uint64_t ***)((char *)v465 + 40))
                                    {
                                      do
                                      {
                                        v397 = *v396;
                                        v533 = v396 - 3;
                                        v398 = sub_1C631C178((uint64_t)v511, (uint64_t *)&v533);
                                        if (sub_1C476B7EC(v398) - 1 <= 0x1F)
                                        {
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v396[2] + 5), v396 - 3);
                                          v399 = *v396;
                                          v400 = (uint64_t *)v396[1];
                                          *v400 = (uint64_t)*v396;
                                          v399[1] = v400;
                                          *v396 = 0;
                                          v396[1] = 0;
                                          llvm::Value::deleteValue((llvm::Value *)(v396 - 3));
                                        }
                                        v396 = (uint64_t ***)v397;
                                      }
                                      while (v397 != (uint64_t **)((char *)v465 + 40));
                                    }
                                    v401 = v506;
                                    if ((_DWORD)v506)
                                    {
                                      v402 = 0;
                                      do
                                      {
                                        v403 = (llvm::BasicBlock *)**((_QWORD **)v497 + 4);
                                        v404 = (llvm::Value *)*((_QWORD *)v505 + 39 * v402);
                                        AddRecExpr = (llvm::Instruction **)llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v498, *((_QWORD *)v528 + v402), *((_QWORD *)v523 + v402), (uint64_t **)v497);
                                        sub_1C50D02DC((uint64_t)&v533, (uint64_t ***)v498, *(_QWORD *)(*((_QWORD *)v403 + 7) + 40) + 272, (uint64_t)"reroll", 1);
                                        v406 = *(llvm::Type **)v404;
                                        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v403, 1);
                                        v408 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)&v533, AddRecExpr, v406, (llvm::Instruction *)FirstNonPHIOrDbg);
                                        v409 = (llvm::User **)v513;
                                        v410 = v514;
                                        if (v513 != v514)
                                        {
                                          v411 = (llvm::Value *)v408;
                                          do
                                          {
                                            if (!sub_1C476B7EC((uint64_t)(v409 + 1)))
                                              llvm::User::replaceUsesOfWith(*v409, v404, v411);
                                            v409 += 10;
                                          }
                                          while (v409 != (llvm::User **)v410);
                                        }
                                        sub_1C50D05E0((uint64_t)&v533);
                                        ++v402;
                                      }
                                      while (v402 != v401);
                                    }
                                    sub_1C50D02DC((uint64_t)&v533, (uint64_t ***)v498, *(_QWORD *)(*((_QWORD *)v465 + 7) + 40) + 272, (uint64_t)"reroll", 1);
                                    __asm { BR              X10 }
                                  }
                                  v412 = (char *)v505;
                                  v413 = (char *)v505 + 312 * v506;
                                  while (2)
                                  {
                                    v414 = *(_QWORD *)v412;
                                    v415 = *((_QWORD *)v498 + 13);
                                    v416 = *((_DWORD *)v498 + 30);
                                    if (v416)
                                    {
                                      v417 = ((v414 >> 4) ^ (v414 >> 9)) & (v416 - 1);
                                      v418 = v415 + 48 * v417;
                                      v419 = *(_QWORD *)(v418 + 24);
                                      if (v419 != v414)
                                      {
                                        v420 = 1;
                                        while (v419 != -4096)
                                        {
                                          v421 = v417 + v420++;
                                          v417 = v421 & (v416 - 1);
                                          v418 = v415 + 48 * v417;
                                          v419 = *(_QWORD *)(v418 + 24);
                                          if (v419 == v414)
                                            goto LABEL_783;
                                        }
                                        goto LABEL_782;
                                      }
                                    }
                                    else
                                    {
LABEL_782:
                                      v418 = v415 + 48 * v416;
                                    }
LABEL_783:
                                    if (v418 == v415 + 48 * v416 || (v422 = *(_QWORD *)(v418 + 40)) == 0)
                                      v422 = llvm::ScalarEvolution::createSCEVIter(v498, v414);
                                    v423 = **(_QWORD **)(v422 + 32);
                                    v424 = v529;
                                    if (v529 >= (unint64_t)HIDWORD(v529))
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v528, (uint64_t)&v530, v529 + 1, 8);
                                      v424 = v529;
                                    }
                                    *((_QWORD *)v528 + v424) = v423;
                                    LODWORD(v529) = (_DWORD)v529 + 1;
                                    v425 = v498;
                                    v426 = **((_QWORD **)v412 + 1);
                                    v427 = *((_QWORD *)v498 + 13);
                                    v428 = *((_DWORD *)v498 + 30);
                                    if (v428)
                                    {
                                      v429 = v428 - 1;
                                      v430 = ((v426 >> 4) ^ (v426 >> 9)) & (v428 - 1);
                                      v431 = v427 + 48 * v430;
                                      v432 = *(_QWORD *)(v431 + 24);
                                      if (v432 != v426)
                                      {
                                        v433 = 1;
                                        while (v432 != -4096)
                                        {
                                          v434 = v430 + v433++;
                                          v430 = v434 & v429;
                                          v431 = v427 + 48 * (v434 & v429);
                                          v432 = *(_QWORD *)(v431 + 24);
                                          if (v432 == v426)
                                            goto LABEL_795;
                                        }
                                        goto LABEL_794;
                                      }
                                    }
                                    else
                                    {
LABEL_794:
                                      v431 = v427 + 48 * v428;
                                    }
LABEL_795:
                                    if (v431 == v427 + 48 * v428 || (v435 = *(_QWORD *)(v431 + 40)) == 0)
                                      v435 = llvm::ScalarEvolution::createSCEVIter(v498, v426);
                                    llvm::ScalarEvolution::getMinusSCEV((uint64_t)v425, v435, v422);
                                    v437 = v436;
                                    v438 = v524;
                                    if (v524 >= (unint64_t)HIDWORD(v524))
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v523, (uint64_t)&v525, v524 + 1, 8);
                                      v438 = v524;
                                    }
                                    *((_QWORD *)v523 + v438) = v437;
                                    LODWORD(v524) = (_DWORD)v524 + 1;
                                    v412 += 312;
                                    if (v412 == v413)
                                      goto LABEL_762;
                                    continue;
                                  }
                                }
                                goto LABEL_463;
                              }
                              goto LABEL_478;
                            }
                            v338 = v514;
                          }
                          v264 += 10;
                          if (v264 == v338)
                          {
                            v269 = v284;
                            v264 = v338;
                            goto LABEL_656;
                          }
                        }
                      }
                      v348 = v497;
                      v349 = (char *)v497 + 56;
                      while (1)
                      {
                        v350 = sub_1C477672C((uint64_t)v349, *(_QWORD *)(*(_QWORD *)(v347 + 24) + 40));
                        v351 = v348[8];
                        v352 = 72;
                        if (v351 == v348[7])
                          v352 = 76;
                        if (v350 == (_QWORD *)(v351 + 8 * *(unsigned int *)((char *)v348 + v352)))
                          break;
                        v347 = *(_QWORD *)(v347 + 8);
                        if (!v347)
                          goto LABEL_628;
                      }
                    }
                  }
LABEL_675:
                  v231 = 0;
                  goto LABEL_676;
                }
                v315 = 1;
                goto LABEL_670;
              }
            }
LABEL_377:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v214, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v214, 44))
            {
              goto LABEL_392;
            }
          }
LABEL_367:
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v214) & 1) != 0
            || !llvm::Instruction::willReturn((llvm::Instruction *)v214))
          {
            goto LABEL_392;
          }
          v216 = (_QWORD **)sub_1C631C178((uint64_t)v511, (uint64_t *)&v481);
          **v216 |= 0x200000000uLL;
          v217 = v211 + 1;
          v211 = v212;
          if (v217 != v212)
          {
            v211 = v217;
            do
            {
              if ((*v211 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_362;
              ++v211;
            }
            while (v211 != v212);
            v211 = v212;
          }
        }
      }
      while (1)
      {
        v165 = (void *)(v127 - 24);
        if (!v127)
          v165 = 0;
        v533 = v165;
        v166 = sub_1C631C178((uint64_t)v511, (uint64_t *)&v533);
        v167 = v166;
        v168 = *(unsigned int *)(v166 + 8);
        if ((*(_DWORD *)(v166 + 64) & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)v166 + 8 * v168 - 8) &= ~(-1 << (*(_DWORD *)(v166 + 64) & 0x3F));
        *(_DWORD *)(v166 + 64) = 34;
        if ((_DWORD)v168)
        {
          if ((_DWORD)v168 != 1)
          {
            LODWORD(v168) = 1;
            *(_DWORD *)(v166 + 8) = 1;
          }
          v171 = 34;
        }
        else
        {
          if (*(_DWORD *)(v166 + 12))
          {
            v169 = 0;
            v170 = v168;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v166, v166 + 16, 1uLL, 8);
            v170 = *(unsigned int *)(v167 + 8);
            v169 = *(_DWORD *)(v167 + 8);
          }
          bzero((void *)(*(_QWORD *)v167 + 8 * v170), 8 - 8 * v168);
          LODWORD(v168) = v169 + 1;
          *(_DWORD *)(v167 + 8) = v169 + 1;
          v171 = *(_DWORD *)(v167 + 64) & 0x3F;
          if (!v171)
            goto LABEL_293;
        }
        *(_QWORD *)(*(_QWORD *)v167 + 8 * v168 - 8) &= ~(-1 << v171);
LABEL_293:
        v127 = *(_QWORD *)(v127 + 8);
        if (v127 == v126)
          goto LABEL_234;
      }
    }
    v55 = *(_QWORD *)(v52 + 48);
    while (1)
    {
      v56 = v55 - 24;
      if (!v55)
        v56 = 0;
      if (*(_BYTE *)(v56 + 16) != 83)
        break;
      v55 = *(_QWORD *)(v55 + 8);
      if (v55 == v53)
      {
        v55 = v53;
        goto LABEL_108;
      }
    }
    v59 = *(unsigned __int8 *)(v55 - 8) - 38;
    v87 = v59 > 0x38;
    v60 = (1 << v59) & 0x100060000000001;
    if (!v87 && v60 != 0)
      v55 = *(_QWORD *)(v55 + 8);
LABEL_108:
    if (v54 == v55)
      goto LABEL_198;
    while (1)
    {
      v62 = v54 ? (_BYTE *)(v54 - 24) : 0;
      if (v62[16] == 83)
      {
        if ((*(_DWORD *)(*(_QWORD *)v62 + 8) & 0xFE) == 0x12)
          break;
        v63 = *(_DWORD *)(*(_QWORD *)v62 + 8);
        v87 = v63 > 0x15;
        v64 = (1 << v63) & 0x20AC7F;
        if (!v87 && v64 != 0)
          break;
      }
LABEL_154:
      v54 = *(_QWORD *)(v54 + 8);
      if (v54 == v55)
      {
        v51 = v494;
LABEL_198:
        if (v51)
        {
          v57 = (uint64_t *)v493;
          v58 = (char *)v493 + 8 * v51;
          goto LABEL_200;
        }
LABEL_813:
        MEMORY[0x1CAA32FB4](v491, 4);
        MEMORY[0x1CAA32FB4](v489, 8);
        MEMORY[0x1CAA32FB4](v487, 8);
        v443 = (char *)v484;
        if ((_DWORD)v485)
        {
          v444 = 152 * v485;
          do
          {
            v445 = *(char **)&v443[v444 - 144];
            if (&v443[v444 - 128] != v445)
              free(v445);
            v444 -= 152;
          }
          while (v444);
          v443 = (char *)v484;
        }
        if (v443 != v486)
          free(v443);
        goto LABEL_821;
      }
    }
    LOBYTE(v496) = 0;
    v497 = &v499;
    v498 = (llvm::ScalarEvolution *)0x1000000000;
    sub_1C4848C0C((unsigned int *)&v497, 1uLL, (uint64_t)v62);
    v66 = *(_QWORD *)(*(_QWORD *)v497 + 8);
    if (!v66)
      goto LABEL_141;
    do
    {
      v67 = *(_QWORD *)(v66 + 24);
      v68 = *(_QWORD *)(v67 + 8);
      if (!v68 || *(_QWORD *)(v68 + 8))
        break;
      if (*(unsigned __int8 *)(v67 + 16) - 41 > 0x11)
        goto LABEL_141;
      v69 = v498;
      v70 = (const llvm::Instruction *)*((_QWORD *)v497 + v498 - 1);
      if (*((_BYTE *)v70 + 16) != 83)
      {
        if (!llvm::Instruction::isSameOperationAs((llvm::Instruction *)v67, v70, 0))
          goto LABEL_141;
        v69 = v498;
      }
      if (v69 >= HIDWORD(v498))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v497, (uint64_t)&v499, v69 + 1, 8);
        v69 = v498;
      }
      *((_QWORD *)v497 + v69) = v67;
      v71 = (_DWORD)v498 + 1;
      LODWORD(v498) = (_DWORD)v498 + 1;
      v66 = *(_QWORD *)(v67 + 8);
      if (!v66)
        goto LABEL_130;
    }
    while (!*(_QWORD *)(v66 + 8));
    v71 = v498;
LABEL_130:
    if (v71 >= 2
      && llvm::Instruction::isSameOperationAs((llvm::Instruction *)v67, *((const llvm::Instruction **)v497 + v71 - 1), 0)&& (v72 = *(_QWORD *)(v67 + 8)) != 0)
    {
      do
      {
        v73 = *(_QWORD *)(v72 + 24);
        v74 = sub_1C477672C(v7 + 56, *(_QWORD *)(v73 + 40));
        v75 = *(_QWORD *)(v7 + 64);
        v76 = 76;
        if (v75 != *(_QWORD *)(v7 + 56))
          v76 = 72;
        if (v74 != (_QWORD *)(v75 + 8 * *(unsigned int *)(v7 + v76)) && v73 != *(_QWORD *)v497)
          goto LABEL_141;
        v72 = *(_QWORD *)(v72 + 8);
      }
      while (v72);
      v77 = v498;
      if (v498 >= (unint64_t)HIDWORD(v498))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v497, (uint64_t)&v499, v498 + 1, 8);
        v77 = v498;
      }
      *((_QWORD *)v497 + v77) = v67;
      LODWORD(v498) = (_DWORD)v498 + 1;
      v78 = 1;
      LOBYTE(v496) = 1;
    }
    else
    {
LABEL_141:
      v78 = v496;
      if (!(_BYTE)v496)
        goto LABEL_152;
    }
    v79 = v485;
    v80 = (char *)v484;
    if (v485 < HIDWORD(v485))
    {
      v81 = (uint64_t *)&v496;
      v82 = &v498;
      goto LABEL_144;
    }
    v87 = v484 <= &v496 && (char *)v484 + 152 * v485 > (char *)&v496;
    v88 = v87;
    v89 = 0x86BCA1AF286BCA1BLL * (((char *)&v496 - (_BYTE *)v484) >> 3);
    v452 = v88;
    if (v88 != 1)
      v89 = -1;
    v453 = v89;
    v533 = 0;
    v80 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v484, v485 + 1, 152, (unint64_t *)&v533);
    v459 = (char *)v484;
    if (!(_DWORD)v485)
    {
LABEL_189:
      v102 = (int)v533;
      if (v459 != v486)
        free(v459);
      v484 = v80;
      HIDWORD(v485) = v102;
      if (v452)
        v81 = (uint64_t *)&v80[152 * v453];
      else
        v81 = (uint64_t *)&v496;
      if (v452)
        v82 = (llvm::ScalarEvolution **)&v80[152 * v453 + 16];
      else
        v82 = &v498;
      v79 = v485;
      v78 = *(_BYTE *)v81;
LABEL_144:
      v83 = &v80[152 * v79];
      *v83 = v78;
      *((_QWORD *)v83 + 2) = 0x1000000000;
      *((_QWORD *)v83 + 1) = v83 + 24;
      v84 = (uint64_t)(v83 + 8);
      if (!*(_DWORD *)v82 || (uint64_t *)v84 == v81 + 1)
        goto LABEL_151;
      v85 = *((unsigned int *)v81 + 4);
      if ((_DWORD)v85)
      {
        if (v85 >= 0x11)
        {
          *(_DWORD *)(v84 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v84, v84 + 16, v85, 8);
          v86 = *((unsigned int *)v81 + 4);
          if (!*((_DWORD *)v81 + 4))
            goto LABEL_150;
          goto LABEL_149;
        }
        v86 = *((unsigned int *)v81 + 4);
        if (*((_DWORD *)v81 + 4))
LABEL_149:
          memcpy(*(void **)v84, (const void *)v81[1], 8 * v86);
      }
LABEL_150:
      *(_DWORD *)(v84 + 8) = v85;
LABEL_151:
      LODWORD(v485) = v485 + 1;
LABEL_152:
      if (v497 != &v499)
        free(v497);
      goto LABEL_154;
    }
    v90 = 0;
    v456 = 152 * v485;
    while (1)
    {
      v91 = &v80[v90];
      v92 = &v459[v90];
      *v91 = v459[v90];
      v93 = &v80[v90 + 24];
      *(_QWORD *)&v80[v90 + 8] = v93;
      v455 = &v80[v90 + 8];
      *((_QWORD *)v91 + 2) = 0x1000000000;
      v94 = *(unsigned int *)&v459[v90 + 16];
      if ((_DWORD)v94)
        v95 = v92 == v91;
      else
        v95 = 1;
      if (v95)
        goto LABEL_178;
      v96 = *((_DWORD *)v92 + 4);
      v97 = (const void *)*((_QWORD *)v92 + 1);
      v458 = &v459[v90];
      v98 = v92 + 24;
      if (v98 != v97)
      {
        *(_QWORD *)v455 = v97;
        *((_DWORD *)v91 + 4) = v94;
        *((_DWORD *)v91 + 5) = *(_DWORD *)&v459[v90 + 20];
        *((_QWORD *)v458 + 1) = v98;
        *(_DWORD *)&v459[v90 + 20] = 0;
        goto LABEL_177;
      }
      if (v94 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v455, (uint64_t)&v80[v90 + 24], v94, 8);
        v99 = *((unsigned int *)v458 + 4);
        if (!(_DWORD)v99)
          goto LABEL_176;
        v97 = (const void *)*((_QWORD *)v458 + 1);
        v93 = *(char **)v455;
      }
      else
      {
        v99 = *(unsigned int *)&v459[v90 + 16];
      }
      memcpy(v93, v97, 8 * v99);
LABEL_176:
      *(_DWORD *)&v80[v90 + 16] = v96;
LABEL_177:
      *((_DWORD *)v458 + 4) = 0;
LABEL_178:
      v90 += 152;
      if (v456 == v90)
      {
        v459 = (char *)v484;
        if ((_DWORD)v485)
        {
          v100 = 152 * v485;
          do
          {
            v101 = *(char **)&v459[v100 - 144];
            if (&v459[v100 - 128] != v101)
              free(v101);
            v100 -= 152;
          }
          while (v100);
          v459 = (char *)v484;
        }
        goto LABEL_189;
      }
    }
  }
LABEL_821:
  if (v493 != v495)
    free(v493);
  return 0;
}

uint64_t sub_1C5B841E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B80E80(v0);
}

void sub_1C5B84210(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B84234(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

uint64_t sub_1C5B84264(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  char **v25;
  char *v26;
  uint64_t v27;
  uint64_t AnalysisPass;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  int v37;
  uint64_t v38;
  uint64_t v39[2];
  int v40;
  uint64_t v41[2];
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *__src;
  uint64_t v48;
  _QWORD v49[2];
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::AAResultsWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID);
  v11 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::ScalarEvolutionWrapperPass::ID);
  v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v14 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::TargetLibraryInfoWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v17 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 56);
  v39[0] = 0;
  v39[1] = 0;
  v40 = 0;
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  llvm::TargetLibraryAnalysis::run(v16 + 32, v17, (uint64_t)&v46);
  *(_QWORD *)(v16 + 240) = v46;
  if (!*(_BYTE *)(v16 + 320))
  {
    v32 = v10;
    v33 = v13;
    v34 = v7;
    v35 = (void *)(v16 + 264);
    *(_QWORD *)(v16 + 248) = v16 + 264;
    v36 = (void **)(v16 + 248);
    *(_QWORD *)(v16 + 256) = 0x600000000;
    v37 = v48;
    if (!(_DWORD)v48 || v36 == &__src)
      goto LABEL_39;
    if (v48 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 248, v16 + 264, v48, 8);
      v38 = v48;
      if (!(_DWORD)v48)
      {
LABEL_38:
        *(_DWORD *)(v16 + 256) = v37;
LABEL_39:
        *(_DWORD *)(v16 + 312) = v54;
        *(_BYTE *)(v16 + 320) = 1;
        v7 = v34;
        v13 = v33;
        v10 = v32;
        goto LABEL_25;
      }
      v35 = *v36;
    }
    else
    {
      v38 = v48;
    }
    memcpy(v35, __src, 8 * v38);
    goto LABEL_38;
  }
  if ((uint64_t *)(v16 + 240) != &v46)
  {
    v18 = v10;
    v19 = v13;
    v20 = v7;
    v21 = (void **)(v16 + 248);
    v22 = v48;
    v23 = *(unsigned int *)(v16 + 256);
    if (v23 >= v48)
    {
      if ((_DWORD)v48)
        memmove(*v21, __src, 8 * v48);
      goto LABEL_23;
    }
    if (*(_DWORD *)(v16 + 260) < v48)
    {
      *(_DWORD *)(v16 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 248, v16 + 264, v22, 8);
    }
    else if ((_DWORD)v23)
    {
      memmove(*v21, __src, 8 * v23);
      goto LABEL_21;
    }
    v23 = 0;
LABEL_21:
    if (v23 != v48)
      memcpy((char *)*v21 + 8 * v23, (char *)__src + 8 * v23, 8 * v48 - 8 * v23);
LABEL_23:
    *(_DWORD *)(v16 + 256) = v22;
    v7 = v20;
    v13 = v19;
    v10 = v18;
  }
  *(_DWORD *)(v16 + 312) = v54;
LABEL_25:
  v24 = (void *)(v10 + 32);
  if (__src != v49)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v41);
  sub_1C4D8B52C(v39);
  v25 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != llvm::DominatorTreeWrapperPass::ID);
  v27 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), byte_1EF8F7648, 1);
  v46 = v7;
  __src = v24;
  v48 = v13;
  v49[0] = v16 + 240;
  v49[1] = v27;
  v50 = AnalysisPass != 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v4 = sub_1C5B80F48((uint64_t)&v46, (uint64_t)a2, v29, v30);
  MEMORY[0x1CAA32FB4](v51, 8);
  return v4;
}

BOOL sub_1C5B84664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 40);
  if (v2 == v1 + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  if (*(_BYTE *)(v3 + 16) != 30)
    return 0;
  if (*(unsigned __int8 *)(a1 + 16) - 81 > 1)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || *(_QWORD *)(v4 + 8))
    return 0;
  v6 = *(_DWORD *)(v3 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD **)(v3 - 8);
  else
    v7 = (_QWORD *)(v3 - 32 * (v6 & 0x7FFFFFF));
  return *v7 == a1;
}

uint64_t sub_1C5B846F4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && (v2 >= 0x1C ? (v3 = v2 - 59 >= 0xFFFFFFEE) : (v3 = 0), v3))
  {
    if (v2 != 41)
      return 0;
  }
  else if (v2 != 62)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  do
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (*(_BYTE *)(v5 + 16) != 83)
      v5 = 0;
    if (v5)
      v6 = v5 == a2;
    else
      v6 = 0;
    result = v6;
    if (v6)
      break;
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  return result;
}

void sub_1C5B8475C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v26;
  BOOL v27;
  int v28;
  const void *v30;
  _BYTE *v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  _BYTE v44[128];
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BYTE v50[128];

  v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
    goto LABEL_16;
  v8 = -32;
  do
  {
    v9 = v8;
    if (!v8)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    ++v8;
  }
  while (v7);
  if (v9)
  {
LABEL_16:
    if (*(_QWORD *)(a1 + 64) == a2)
      goto LABEL_17;
    v10 = v50;
    v45 = v50;
    v11 = *(const void **)(a3 + 8);
    if (v11 == *(const void **)a3)
    {
      v46 = v50;
      v12 = v11;
    }
    else
    {
      v38 = *(unsigned int *)(a3 + 16);
      v10 = malloc_type_malloc(8 * v38, 0x4065EBACuLL);
      if (!v10 && ((_DWORD)v38 || (v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_55:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v46 = v10;
      v12 = *(const void **)a3;
      v11 = *(const void **)(a3 + 8);
    }
    v14 = *(_DWORD *)(a3 + 16);
    v13 = *(_DWORD *)(a3 + 20);
    v47 = v14;
    if (v11 == v12)
      v15 = v13;
    else
      v15 = v14;
    if (v15)
    {
      memmove(v10, v11, 8 * v15);
      v13 = *(_DWORD *)(a3 + 20);
    }
    v16 = *(_DWORD *)(a3 + 24);
    v48 = v13;
    v49 = v16;
    v17 = sub_1C5B849E0(a1, a2, (uint64_t)&v45, a4);
    if (v46 != v45)
      free(v46);
    if ((v17 & 1) == 0)
    {
LABEL_17:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, a2);
      for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v19 = *(_QWORD *)(i + 24);
        v20 = *(_QWORD *)(a1 + 5096);
        v21 = *(unsigned int *)(a1 + 5104);
        if ((_DWORD)v21)
        {
          v22 = 8 * v21;
          v23 = *(_QWORD **)(a1 + 5096);
          while (*v23 != v19)
          {
            ++v23;
            v22 -= 8;
            if (!v22)
            {
              v23 = (_QWORD *)(v20 + 8 * v21);
              break;
            }
          }
        }
        else
        {
          v23 = *(_QWORD **)(a1 + 5096);
        }
        if (v21 == ((uint64_t)v23 - v20) >> 3)
        {
          v24 = *(unsigned __int8 *)(v19 + 16);
          if (v19 && v24 >= 0x1C)
          {
            v26 = v24 - 41;
            v27 = v26 > 0x1B;
            v28 = (1 << v26) & 0xE207015;
            if (!v27 && v28 != 0)
            {
              v39 = v44;
              v30 = *(const void **)(a3 + 8);
              if (v30 == *(const void **)a3)
              {
                v40 = v44;
                v31 = v44;
                v32 = v30;
              }
              else
              {
                v37 = *(unsigned int *)(a3 + 16);
                v31 = malloc_type_malloc(8 * v37, 0x4065EBACuLL);
                if (!v31)
                {
                  if ((_DWORD)v37)
                    goto LABEL_55;
                  v31 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                  if (!v31)
                    goto LABEL_55;
                }
                v40 = v31;
                v32 = *(const void **)a3;
                v30 = *(const void **)(a3 + 8);
              }
              v34 = *(_DWORD *)(a3 + 16);
              v33 = *(_DWORD *)(a3 + 20);
              v41 = v34;
              if (v30 == v32)
                v35 = v33;
              else
                v35 = v34;
              if (v35)
              {
                memmove(v31, v30, 8 * v35);
                v33 = *(_DWORD *)(a3 + 20);
              }
              v36 = *(_DWORD *)(a3 + 24);
              v42 = v33;
              v43 = v36;
              sub_1C5B8475C(a1, v19, &v39);
              if (v40 != v39)
                free(v40);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1C5B849E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  llvm::SmallPtrSetImplBase *v6;
  llvm::SmallPtrSetImplBase *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t SCEVIter;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  const void **v38;
  void *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  char *v45;
  uint64_t v46;
  const void *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  _BYTE v109[4992];
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[128];
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  int v117;
  _QWORD v118[18];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v118[16] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v10 + 104);
  v12 = *(_DWORD *)(v10 + 120);
  if (!v12)
  {
LABEL_7:
    v14 = v11 + 48 * v12;
    goto LABEL_8;
  }
  v13 = (v12 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v14 = v11 + 48 * v13;
  v15 = *(_QWORD *)(v14 + 24);
  if (v15 != v5)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = v11 + 48 * v13;
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 == v5)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, v5);
  if (SCEVIter)
    v19 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  else
    v19 = 0;
  if (v19 && *(_QWORD *)(SCEVIter + 48) == *(_QWORD *)(v9 + 8))
  {
    v105 = 0;
    v106 = 0;
    v104 = (uint64_t *)&v105;
    v107 = v109;
    v108 = 0x1000000000;
    v22 = *(_QWORD *)(v8 + 8);
    if (!v22)
      goto LABEL_20;
    while (1)
    {
      v51 = *(_QWORD *)(v22 + 24);
      if (!sub_1C5B846F4(v51, *(_QWORD *)(v9 + 64)))
        break;
      v52 = *(unsigned int *)(v9 + 5104);
      if (v52 >= *(unsigned int *)(v9 + 5108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 5096, v9 + 5112, v52 + 1, 8);
        v52 = *(unsigned int *)(v9 + 5104);
      }
      *(_QWORD *)(*(_QWORD *)(v9 + 5096) + 8 * v52) = v51;
      ++*(_DWORD *)(v9 + 5104);
LABEL_115:
      v22 = *(_QWORD *)(v22 + 8);
      if (!v22)
      {
        if (!v106)
          goto LABEL_20;
        if (v106 == 1)
        {
          v72 = v108;
          if (!(_DWORD)v108)
            goto LABEL_20;
LABEL_155:
          v88 = v105;
          v89 = &v105;
          v90 = &v105;
          if (v105)
          {
            v98 = v105;
            v99 = &v105;
            do
            {
              v100 = v99;
              v101 = v98;
              v102 = v98[4];
              if (v102 >= 0)
                v99 = (uint64_t **)v98;
              else
                ++v98;
              v98 = (uint64_t *)*v98;
            }
            while (v98);
            if (v99 != &v105)
            {
              if (v102 >= 0)
                v100 = (uint64_t **)v101;
              if ((uint64_t)v100[4] < 1)
                goto LABEL_20;
            }
            while (1)
            {
              while (1)
              {
                v90 = (uint64_t **)v88;
                v103 = v88[4];
                if (v103 < 1)
                  break;
                v88 = *v90;
                v89 = v90;
                if (!*v90)
                  goto LABEL_156;
              }
              if ((v103 & 0x8000000000000000) == 0)
                break;
              v88 = v90[1];
              if (!v88)
              {
                v89 = v90 + 1;
                goto LABEL_156;
              }
            }
          }
          else
          {
LABEL_156:
            v91 = (uint64_t *)v90;
            v90 = (uint64_t **)operator new(0x30uLL);
            *v90 = 0;
            v90[1] = 0;
            v90[4] = 0;
            v90[5] = 0;
            v90[2] = v91;
            *v89 = (uint64_t *)v90;
            v92 = (uint64_t *)v90;
            if (*v104)
            {
              v104 = (uint64_t *)*v104;
              v92 = *v89;
            }
            sub_1C4768E74(v105, v92);
            ++v106;
            v72 = v108;
          }
          v90[5] = (uint64_t *)v8;
          v87 = v104;
          if (!v72)
            goto LABEL_160;
        }
        else
        {
          v72 = v108;
          if ((_DWORD)v108)
            goto LABEL_155;
          v87 = v104;
LABEL_160:
          v93 = *(_QWORD *)(v87[5] + 8);
          if (v93)
          {
            v72 = 0;
            do
            {
              ++v72;
              v93 = *(_QWORD *)(v93 + 8);
            }
            while (v93);
          }
          else
          {
            v72 = 0;
          }
        }
        if (v87 == (uint64_t *)&v105)
        {
LABEL_164:
          v23 = 1;
          goto LABEL_21;
        }
        while (2)
        {
          if (v87[4])
          {
            v94 = *(_QWORD *)(v87[5] + 8);
            if (v72)
            {
              v95 = v72;
              while (v94)
              {
                v94 = *(_QWORD *)(v94 + 8);
                if (!--v95)
                  goto LABEL_170;
              }
LABEL_20:
              v23 = 0;
LABEL_21:
              if (v107 != v109)
                free(v107);
              v24 = v105;
              if (!v23)
              {
                v20 = 0;
                goto LABEL_186;
              }
              if (!v105)
                goto LABEL_36;
              v25 = &v105;
              do
              {
                v26 = v25;
                v27 = v24;
                v28 = v24[4];
                if (v28 >= 0)
                  v29 = (uint64_t **)v24;
                else
                  v29 = (uint64_t **)(v24 + 1);
                if (v28 >= 0)
                  v25 = (uint64_t **)v24;
                v24 = *v29;
              }
              while (*v29);
              if (v25 == &v105)
                goto LABEL_36;
              if (v28 >= 0)
                v26 = (uint64_t **)v27;
              if ((uint64_t)v26[4] >= 1)
LABEL_36:
                sub_1C4774094(v7, v8);
              v112 = 0x1000000000;
              v114 = v118;
              v115 = v118;
              v116 = 16;
              v117 = 0;
              v111 = v113;
              v110 = 0;
              v107 = v109;
              v108 = 0x1000000000;
              v30 = v104;
              if (v104 == (uint64_t *)&v105)
              {
LABEL_38:
                if (sub_1C5B85368(v9, (uint64_t)&v110))
                {
                  sub_1C5B858D8((uint64_t)&v107, (unint64_t)&v110);
                  v31 = (char *)v107;
                  v32 = v108;
                  v33 = *(unsigned int *)(v9 + 96);
                  v34 = v33 + v108;
                  if (v34 > *(unsigned int *)(v9 + 100))
                  {
                    sub_1C5B85A8C(v9 + 88, v34);
                    LODWORD(v33) = *(_DWORD *)(v9 + 96);
                  }
                  if (v32)
                  {
                    v35 = 0;
                    v36 = *(_QWORD *)(v9 + 88) + 312 * v33;
                    while (2)
                    {
                      v37 = (const void **)&v31[v35];
                      v38 = (const void **)(v36 + v35);
                      *v38 = *(const void **)&v31[v35];
                      v39 = (void *)(v36 + v35 + 24);
                      *(_QWORD *)(v36 + v35 + 8) = v39;
                      v38[2] = (const void *)0x1000000000;
                      v40 = *(_DWORD *)&v31[v35 + 16];
                      if (v40)
                        v41 = v37 == v38;
                      else
                        v41 = 1;
                      if (v41)
                        goto LABEL_51;
                      if (v40 < 0x11)
                      {
                        v42 = *(unsigned int *)&v31[v35 + 16];
                        goto LABEL_49;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + v35 + 8, v36 + v35 + 24, *(unsigned int *)&v31[v35 + 16], 8);
                      v42 = *((unsigned int *)v37 + 4);
                      if ((_DWORD)v42)
                      {
                        v39 = *(void **)(v36 + v35 + 8);
LABEL_49:
                        memcpy(v39, v37[1], 8 * v42);
                      }
                      *((_DWORD *)v38 + 4) = v40;
LABEL_51:
                      v43 = v38 + 23;
                      v38[19] = v38 + 23;
                      v44 = v37[20];
                      if (v44 == v37[19])
                      {
                        *(_QWORD *)(v36 + v35 + 160) = v43;
                      }
                      else
                      {
                        v50 = *(unsigned int *)&v31[v35 + 168];
                        v43 = malloc_type_malloc(8 * v50, 0x4065EBACuLL);
                        if (!v43 && ((_DWORD)v50 || (v43 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
                          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                        *(_QWORD *)(v36 + v35 + 160) = v43;
                        v44 = v37[19];
                      }
                      v45 = &v31[v35];
                      v46 = v36 + v35;
                      *(_DWORD *)(v36 + v35 + 168) = *(_DWORD *)&v31[v35 + 168];
                      v47 = v37[20];
                      v48 = *(_DWORD *)&v31[v35 + 172];
                      if (v47 == v44)
                        v49 = *(_DWORD *)&v31[v35 + 172];
                      else
                        v49 = *(_DWORD *)&v31[v35 + 168];
                      if (v49)
                      {
                        memmove(v43, v47, 8 * v49);
                        v48 = *((_DWORD *)v45 + 43);
                      }
                      *(_DWORD *)(v46 + 172) = v48;
                      *(_DWORD *)(v46 + 176) = *((_DWORD *)v45 + 44);
                      v35 += 312;
                      if (312 * v32 == v35)
                      {
                        LODWORD(v33) = *(_DWORD *)(v9 + 96);
                        break;
                      }
                      continue;
                    }
                  }
                  *(_DWORD *)(v9 + 96) = v33 + v32;
                  v20 = 1;
                }
                else
                {
LABEL_152:
                  v20 = 0;
                }
                sub_1C5B85C60((void **)v107, (void **)v107 + 39 * v108);
                if (v107 != v109)
                  free(v107);
                if (v115 != v114)
                  free(v115);
                if (v111 != v113)
                  free(v111);
                v24 = v105;
LABEL_186:
                sub_1C6143384(v24);
                return v20;
              }
              while (2)
              {
                if (v110)
                {
                  v73 = v112;
                  if ((_DWORD)v112)
                  {
                    v74 = v105;
                    if (v105)
                    {
                      v75 = v30[4];
                      v76 = v75 - 1;
                      v77 = &v105;
                      do
                      {
                        v78 = v77;
                        v79 = v74;
                        v80 = v74[4];
                        v81 = (uint64_t **)(v74 + 1);
                        if (v80 >= v76)
                        {
                          v81 = (uint64_t **)v79;
                          v77 = (uint64_t **)v79;
                        }
                        v74 = *v81;
                      }
                      while (v74);
                      if (v77 != &v105)
                      {
                        v82 = v80 >= v76 ? v79 : (uint64_t *)v78;
                        if (v75 > v82[4])
                        {
                          v83 = v30[5];
                          if (v112 >= (unint64_t)HIDWORD(v112))
                          {
                            v84 = v112 + 1;
                            goto LABEL_151;
                          }
                          goto LABEL_142;
                        }
                      }
                    }
                    if (!sub_1C5B85368(v9, (uint64_t)&v110))
                      goto LABEL_152;
                    sub_1C5B858D8((uint64_t)&v107, (unint64_t)&v110);
                    v110 = v30[5];
                    LODWORD(v112) = 0;
                  }
                  else
                  {
                    v83 = v30[5];
                    if (HIDWORD(v112))
                    {
                      v73 = 0;
                    }
                    else
                    {
                      v84 = 1;
LABEL_151:
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)v113, v84, 8);
                      v73 = v112;
                    }
LABEL_142:
                    *((_QWORD *)v111 + v73) = v83;
                    LODWORD(v112) = v112 + 1;
                  }
                }
                else
                {
                  v110 = v30[5];
                  if (&v114 != (_QWORD **)v7)
                    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v114, v7);
                }
                v85 = (uint64_t *)v30[1];
                if (v85)
                {
                  do
                  {
                    v86 = (uint64_t **)v85;
                    v85 = (uint64_t *)*v85;
                  }
                  while (v85);
                }
                else
                {
                  do
                  {
                    v86 = (uint64_t **)v30[2];
                    v19 = *v86 == v30;
                    v30 = (uint64_t *)v86;
                  }
                  while (!v19);
                }
                v30 = (uint64_t *)v86;
                if (v86 == &v105)
                  goto LABEL_38;
                continue;
              }
            }
LABEL_170:
            if (v94)
              goto LABEL_20;
          }
          v96 = (uint64_t *)v87[1];
          if (v96)
          {
            do
            {
              v97 = (uint64_t **)v96;
              v96 = (uint64_t *)*v96;
            }
            while (v96);
          }
          else
          {
            do
            {
              v97 = (uint64_t **)v87[2];
              v19 = *v97 == v87;
              v87 = (uint64_t *)v97;
            }
            while (!v19);
          }
          v87 = (uint64_t *)v97;
          if (v97 == &v105)
            goto LABEL_164;
          continue;
        }
      }
    }
    v53 = *(unsigned __int8 *)(v51 + 16);
    if (v51)
      v54 = v53 >= 0x1C;
    else
      v54 = 0;
    if (v54 && v53 - 59 >= 0xFFFFFFEE)
    {
      if ((v53 | 0x10) == 0x39)
      {
        v56 = *(_QWORD *)(v51 - 32);
LABEL_83:
        if (*(_BYTE *)(v56 + 16) == 16)
        {
          v57 = *(_DWORD *)(v56 + 32);
          if (v57 > 0x40)
            v58 = **(_QWORD **)(v56 + 24);
          else
            v58 = (uint64_t)(*(_QWORD *)(v56 + 24) << -(char)v57) >> -(char)v57;
          if (v58 >= 0)
            v60 = v58;
          else
            v60 = -v58;
          v61 = v105;
          v62 = &v105;
          v63 = &v105;
          if (v105)
          {
            v64 = v105;
            v65 = &v105;
            do
            {
              v66 = v65;
              v67 = v64;
              v68 = v64[4];
              if (v68 >= v60)
                v65 = (uint64_t **)v64;
              else
                ++v64;
              v64 = (uint64_t *)*v64;
            }
            while (v64);
            if (v65 != &v105)
            {
              if (v68 >= v60)
                v66 = (uint64_t **)v67;
              if (v60 >= (uint64_t)v66[4])
                goto LABEL_20;
            }
            while (1)
            {
              while (1)
              {
                v63 = (uint64_t **)v61;
                v69 = v61[4];
                if (v69 <= v60)
                  break;
                v61 = *v63;
                v62 = v63;
                if (!*v63)
                  goto LABEL_111;
              }
              if (v69 >= v60)
                break;
              v61 = v63[1];
              if (!v61)
              {
                v62 = v63 + 1;
                goto LABEL_111;
              }
            }
          }
          else
          {
LABEL_111:
            v70 = (uint64_t *)v63;
            v63 = (uint64_t **)operator new(0x30uLL);
            v63[4] = (uint64_t *)v60;
            v63[5] = 0;
            *v63 = 0;
            v63[1] = 0;
            v63[2] = v70;
            *v62 = (uint64_t *)v63;
            v71 = (uint64_t *)v63;
            if (*v104)
            {
              v104 = (uint64_t *)*v104;
              v71 = *v62;
            }
            sub_1C4768E74(v105, v71);
            ++v106;
          }
          v63[5] = (uint64_t *)v51;
          goto LABEL_115;
        }
      }
    }
    else if (v51 && v53 == 62)
    {
      v56 = *(_QWORD *)(v51
                      - 32 * (*(_DWORD *)(v51 + 20) & 0x7FFFFFF)
                      + 32 * ((*(_DWORD *)(v51 + 20) & 0x7FFFFFFu) - 1));
      goto LABEL_83;
    }
    v23 = 0;
    if (!v51 || v53 < 0x1C)
      goto LABEL_21;
    v59 = v108;
    if (v108 >= (unint64_t)HIDWORD(v108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)v109, v108 + 1, 8);
      v59 = v108;
    }
    *((_QWORD *)v107 + v59) = v51;
    LODWORD(v108) = v108 + 1;
    goto LABEL_115;
  }
  return 0;
}

llvm::ScalarEvolution *sub_1C5B85368(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t SCEVIter;
  BOOL v19;
  llvm::ScalarEvolution *result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  llvm::Type **v41;
  unint64_t Constant;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t MulExpr;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  unsigned int v75;
  uint64_t *v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[4];

  v79[3] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      do
      {
        v7 = sub_1C477672C(v6 + 56, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 40));
        v8 = *(_QWORD *)(v6 + 64);
        if (v8 == *(_QWORD *)(v6 + 56))
          v9 = 76;
        else
          v9 = 72;
        if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)(v6 + v9)))
          return 0;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5);
      v4 = *(_QWORD *)a2;
    }
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(v10 + 104);
    v12 = *(_DWORD *)(v10 + 120);
    if (v12)
    {
      v13 = (v12 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v14 = v11 + 48 * v13;
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 == v4)
      {
LABEL_17:
        if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, v4);
        if (SCEVIter)
          v19 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
        else
          v19 = 0;
        if (!v19)
          return 0;
        v21 = *(_QWORD *)(a1 + 16);
        v22 = **(_QWORD **)(a2 + 8);
        v23 = *(_QWORD *)(v21 + 104);
        v24 = *(_DWORD *)(v21 + 120);
        if (v24)
        {
          v25 = v24 - 1;
          v26 = ((v22 >> 4) ^ (v22 >> 9)) & (v24 - 1);
          v27 = v23 + 48 * v26;
          v28 = *(_QWORD *)(v27 + 24);
          if (v28 == v22)
            goto LABEL_33;
          v29 = 1;
          while (v28 != -4096)
          {
            v30 = v26 + v29++;
            v26 = v30 & v25;
            v27 = v23 + 48 * (v30 & v25);
            v28 = *(_QWORD *)(v27 + 24);
            if (v28 == v22)
              goto LABEL_33;
          }
        }
        v27 = v23 + 48 * v24;
LABEL_33:
        v31 = *(unsigned int *)(a2 + 16);
        if (v27 == v23 + 48 * v24 || (v32 = *(_QWORD *)(v27 + 40)) == 0)
          v32 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 16), v22);
        llvm::ScalarEvolution::getMinusSCEV(v21, v32, SCEVIter);
        v34 = v33;
        result = 0;
        v35 = *(unsigned __int16 *)(v34 + 24);
        v36 = v34;
        while (2)
        {
          switch(*(_WORD *)(v34 + 24))
          {
            case 0:
              v38 = *(_QWORD *)(v36 + 32);
              goto LABEL_44;
            case 1:
            case 2:
            case 3:
            case 0xD:
              v38 = v36 + 40;
              goto LABEL_44;
            case 4:
              v38 = v36 + 48;
              goto LABEL_44;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              v37 = *(uint64_t **)(v36 + 32);
              goto LABEL_39;
            case 6:
              v37 = (uint64_t *)(v36 + 40);
LABEL_39:
              v36 = *v37;
              continue;
            case 0xE:
              v38 = *(_QWORD *)(v36 - 8);
LABEL_44:
              if (*(_BYTE *)(*(_QWORD *)v38 + 8) == 15)
                return 0;
              result = *(llvm::ScalarEvolution **)(a1 + 16);
              v39 = v34;
              while (2)
              {
                switch(v35)
                {
                  case 0:
                    v41 = *(llvm::Type ***)(v39 + 32);
                    goto LABEL_53;
                  case 1:
                  case 2:
                  case 3:
                  case 13:
                    v41 = (llvm::Type **)(v39 + 40);
                    goto LABEL_53;
                  case 4:
                    v41 = (llvm::Type **)(v39 + 48);
                    goto LABEL_53;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                    v40 = *(uint64_t **)(v39 + 32);
                    goto LABEL_48;
                  case 6:
                    v40 = (uint64_t *)(v39 + 40);
LABEL_48:
                    v39 = *v40;
                    v35 = *(unsigned __int16 *)(*v40 + 24);
                    continue;
                  case 14:
                    v41 = *(llvm::Type ***)(v39 - 8);
LABEL_53:
                    Constant = llvm::ScalarEvolution::getConstant(result, *v41, (v31 + 1), 0);
                    v43 = *(_QWORD *)(a1 + 16);
                    v44 = *(_QWORD *)(SCEVIter + 40);
                    if (v44 == 2)
                    {
                      v45 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8);
                    }
                    else
                    {
                      v76 = *(uint64_t **)(a1 + 16);
                      v72 = *(_QWORD *)(SCEVIter + 32);
                      v77 = v79;
                      v78 = 0x300000000;
                      v73 = v44;
                      v74 = 8 * v44 - 8;
                      if (v74 >= 0x19)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, (uint64_t)v74 >> 3, 8);
                        v75 = v78;
                      }
                      else
                      {
                        v75 = 0;
                      }
                      if (v73 != 1)
                      {
                        memcpy((char *)v77 + 8 * v75, (const void *)(v72 + 8), v74);
                        v75 = v78;
                      }
                      LODWORD(v78) = v75 + (v74 >> 3);
                      v45 = sub_1C618AB20(v76, (uint64_t)&v77, *(uint64_t ***)(SCEVIter + 48));
                      if (v77 != v79)
                        free(v77);
                      v43 = *(_QWORD *)(a1 + 16);
                    }
                    v77 = v79;
                    v79[0] = v34;
                    v79[1] = Constant;
                    v78 = 0x200000002;
                    MulExpr = llvm::ScalarEvolution::getMulExpr(v43, (uint64_t)&v77, 0, 0);
                    if (v77 != v79)
                      free(v77);
                    if (v45 != MulExpr)
                      return 0;
                    if (v31 < 2)
                      return (llvm::ScalarEvolution *)1;
                    v47 = 1;
                    break;
                  default:
                    return result;
                }
                break;
              }
              break;
            default:
              return result;
          }
          break;
        }
        while (1)
        {
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(_QWORD *)(a2 + 8);
          v50 = *(_QWORD *)(v49 + 8 * v47);
          v51 = *(_QWORD *)(v48 + 104);
          v52 = *(_DWORD *)(v48 + 120);
          if (!v52)
            goto LABEL_66;
          v53 = v52 - 1;
          v54 = ((v50 >> 4) ^ (v50 >> 9)) & (v52 - 1);
          v55 = v51 + 48 * v54;
          v56 = *(_QWORD *)(v55 + 24);
          if (v56 != v50)
            break;
LABEL_67:
          if (v55 == v51 + 48 * v52 || (v59 = *(_QWORD *)(v55 + 40)) == 0)
          {
            v59 = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 16), v50);
            v60 = *(_QWORD *)(a1 + 16);
            v49 = *(_QWORD *)(a2 + 8);
            v51 = *(_QWORD *)(v60 + 104);
            v52 = *(_DWORD *)(v60 + 120);
          }
          else
          {
            v60 = *(_QWORD *)(a1 + 16);
          }
          v61 = *(_QWORD *)(v49 + 8 * v47 - 8);
          v62 = v51 + 48 * v52;
          if (v52)
          {
            v63 = v52 - 1;
            v64 = ((v61 >> 4) ^ (v61 >> 9)) & v63;
            v65 = v51 + 48 * v64;
            v66 = *(_QWORD *)(v65 + 24);
            if (v66 == v61)
              goto LABEL_78;
            v67 = 1;
            while (v66 != -4096)
            {
              v68 = v64 + v67++;
              v64 = v68 & v63;
              v65 = v51 + 48 * v64;
              v66 = *(_QWORD *)(v65 + 24);
              if (v66 == v61)
                goto LABEL_78;
            }
          }
          v65 = v62;
LABEL_78:
          if (v65 == v62 || (v69 = *(_QWORD *)(v65 + 40)) == 0)
            v69 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v60, v61);
          llvm::ScalarEvolution::getMinusSCEV(v48, v59, v69);
          v19 = v70 == v34;
          result = (llvm::ScalarEvolution *)(v70 == v34);
          ++v47;
          if (!v19 || v47 == v31)
            return result;
        }
        v57 = 1;
        while (v56 != -4096)
        {
          v58 = v54 + v57++;
          v54 = v58 & v53;
          v55 = v51 + 48 * (v58 & v53);
          v56 = *(_QWORD *)(v55 + 24);
          if (v56 == v50)
            goto LABEL_67;
        }
LABEL_66:
        v55 = v51 + 48 * v52;
        goto LABEL_67;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v14 = v11 + 48 * v13;
        v15 = *(_QWORD *)(v14 + 24);
        if (v15 == v4)
          goto LABEL_17;
      }
    }
    v14 = v11 + 48 * v12;
    goto LABEL_17;
  }
  return 0;
}

void *sub_1C5B858D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  void *result;
  unint64_t v17;
  const void *v18;
  const void *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v24 = v4 + 1;
    v25 = v5 + 312 * v4;
    if (v5 <= a2 && v25 > a2)
    {
      v27 = a2 - v5;
      sub_1C5B85A8C(a1, v24);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v27;
    }
    else
    {
      sub_1C5B85A8C(a1, v24);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 312 * v6);
  *v7 = *(_QWORD *)a2;
  v8 = v7 + 3;
  v9 = v5 + 312 * v6;
  *(_QWORD *)(v9 + 8) = v8;
  v10 = (void **)(v9 + 8);
  v11 = v5 + 312 * v6;
  *(_QWORD *)(v11 + 16) = 0x1000000000;
  v12 = (unsigned int *)(v11 + 16);
  v13 = *(_DWORD *)(a2 + 16);
  if (v13 && v5 + 312 * v6 != a2)
  {
    if (v13 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v10, (uint64_t)v8, *(unsigned int *)(a2 + 16), 8);
      v14 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v14)
        goto LABEL_7;
      v8 = *v10;
    }
    else
    {
      v14 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v8, *(const void **)(a2 + 8), 8 * v14);
LABEL_7:
    *v12 = v13;
  }
  v15 = v5 + 312 * v6;
  result = (void *)(v15 + 184);
  *(_QWORD *)(v15 + 152) = v15 + 184;
  v17 = v15 + 152;
  v18 = *(const void **)(a2 + 160);
  if (v18 == *(const void **)(a2 + 152))
  {
    *(_QWORD *)(v17 + 8) = result;
  }
  else
  {
    v23 = *(unsigned int *)(a2 + 168);
    result = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
    if (!result && ((_DWORD)v23 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v17 + 8) = result;
    v18 = *(const void **)(a2 + 152);
  }
  *(_DWORD *)(v17 + 16) = *(_DWORD *)(a2 + 168);
  v19 = *(const void **)(a2 + 160);
  v20 = *(_DWORD *)(a2 + 172);
  if (v19 == v18)
    v21 = *(_DWORD *)(a2 + 172);
  else
    v21 = *(_DWORD *)(a2 + 168);
  if (v21)
  {
    result = memmove(result, v19, 8 * v21);
    v20 = *(_DWORD *)(a2 + 172);
  }
  v22 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(v17 + 20) = v20;
  *(_DWORD *)(v17 + 24) = v22;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C5B85A8C(uint64_t a1, unint64_t a2)
{
  char *v3;
  void **v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  void **v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void **v20;
  char *v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;

  v25 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 312, &v25);
  v4 = *(void ***)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 312 * v5;
    while (1)
    {
      v8 = &v4[v6 / 8];
      v9 = (void **)&v3[v6];
      *v9 = v4[v6 / 8];
      v10 = &v3[v6 + 24];
      *(_QWORD *)&v3[v6 + 8] = v10;
      v11 = &v3[v6 + 8];
      v9[2] = (void *)0x1000000000;
      v12 = LODWORD(v4[v6 / 8 + 2]);
      if ((_DWORD)v12)
        v13 = v8 == v9;
      else
        v13 = 1;
      if (v13)
        goto LABEL_13;
      v14 = (void **)v8[1];
      if (v8 + 3 != v14)
      {
        *(_QWORD *)v11 = v14;
        v22 = HIDWORD(v4[v6 / 8 + 2]);
        *((_DWORD *)v9 + 4) = v12;
        *((_DWORD *)v9 + 5) = v22;
        v8[1] = v8 + 3;
        HIDWORD(v4[v6 / 8 + 2]) = 0;
        goto LABEL_12;
      }
      if (v12 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)&v3[v6 + 24], v12, 8);
        v15 = *((unsigned int *)v8 + 4);
        if (!(_DWORD)v15)
          goto LABEL_11;
        v14 = (void **)v8[1];
        v10 = *(char **)&v3[v6 + 8];
      }
      else
      {
        v15 = LODWORD(v4[v6 / 8 + 2]);
      }
      memcpy(v10, v14, 8 * v15);
LABEL_11:
      *((_DWORD *)v9 + 4) = v12;
LABEL_12:
      *((_DWORD *)v8 + 4) = 0;
LABEL_13:
      v16 = v9 + 23;
      v9[19] = v9 + 23;
      v18 = v8[19];
      v17 = v8[20];
      if (v17 == v18)
      {
        v9[20] = v16;
        v19 = HIDWORD(v4[v6 / 8 + 21]);
        if ((_DWORD)v19)
          memmove(v16, v8[20], 8 * v19);
      }
      else
      {
        v9[20] = v17;
        v8[20] = v18;
      }
      v20 = &v4[v6 / 8];
      v21 = &v3[v6];
      *((_QWORD *)v21 + 21) = v4[v6 / 8 + 21];
      *((_DWORD *)v21 + 44) = v4[v6 / 8 + 22];
      v20[21] = (void *)16;
      *((_DWORD *)v20 + 44) = 0;
      v6 += 312;
      if (v7 == v6)
      {
        v4 = *(void ***)a1;
        v23 = *(_DWORD *)(a1 + 8);
        goto LABEL_23;
      }
    }
  }
  v23 = 0;
LABEL_23:
  sub_1C5B85C60(v4, &v4[39 * v23]);
  v24 = v25;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v24;
}

void sub_1C5B85C60(void **a1, void **a2)
{
  void **v3;
  void **v4;
  void **v5;

  if (a2 != a1)
  {
    v3 = a2 - 19;
    do
    {
      if (*v3 != *(v3 - 1))
        free(*v3);
      v4 = (void **)*(v3 - 19);
      if (v3 - 17 != v4)
        free(v4);
      v5 = v3 - 20;
      v3 -= 39;
    }
    while (v5 != a1);
  }
}

uint64_t *sub_1C5B85CBC(unsigned int a1, uint64_t a2, _QWORD *a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;

  if (a4)
    v7 = *a4;
  else
    v7 = *(uint64_t **)(a2 + 24);
  result = *(uint64_t **)(a2 + 32);
  if (v7 != result)
  {
    v9 = 1 << a1;
    v10 = a1 >> 6;
    while (1)
    {
      if ((*(_QWORD *)(v7[1] + 8 * v10) & v9) != 0)
      {
        v11 = sub_1C477672C((uint64_t)a3, *v7);
        v12 = a3[1];
        if (v12 == *a3)
          v13 = (unsigned int *)a3 + 5;
        else
          v13 = (unsigned int *)(a3 + 2);
        if (v11 == (_QWORD *)(v12 + 8 * *v13))
          return v7;
        result = *(uint64_t **)(a2 + 32);
      }
      v7 += 10;
      if (v7 == result)
        return result;
    }
  }
  return v7;
}

uint64_t sub_1C5B85D70(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  llvm::APInt *v6;
  unsigned int v7;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 60 || a1 && v2 == 61)
  {
    return (*(_WORD *)(a1 + 18) & 0x301) == 0;
  }
  else
  {
    result = sub_1C4DE85D0(a1);
    if (!(_DWORD)result)
      return result;
    v5 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96);
    v6 = (llvm::APInt *)(v5 + 24);
    v7 = *(_DWORD *)(v5 + 32);
    if (v7 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v6) == v7;
    else
      return *(_QWORD *)v6 == 0;
  }
}

BOOL sub_1C5B85DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v11;
  uint64_t v13;

  v13 = 0;
  v5 = sub_1C6144BDC(*(_QWORD *)(a1 + 2448), *(_DWORD *)(a1 + 2464), a2, &v13);
  v6 = v13;
  v7 = *(_QWORD *)(a1 + 2448);
  v8 = *(unsigned int *)(a1 + 2464);
  if (v5)
    v9 = v13 == v7 + 16 * v8;
  else
    v9 = 1;
  if (v9)
    return 0;
  v13 = 0;
  v11 = sub_1C6144BDC(v7, v8, a3, &v13);
  return v11
      && v13 != *(_QWORD *)(a1 + 2448) + 16 * *(unsigned int *)(a1 + 2464)
      && *(_DWORD *)(v6 + 8) == *(_DWORD *)(v13 + 8);
}

void sub_1C5B85EA8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  unsigned int i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE v47[31];
  void *v48;
  uint64_t v49;
  _QWORD v50[18];

  v50[16] = *MEMORY[0x1E0C80C00];
  v48 = v50;
  v49 = 0x1000000000;
  sub_1C4848C0C((unsigned int *)&v48, 1uLL, a2);
  for (i = v49; (_DWORD)v49; i = v49)
  {
    v46 = 0;
    v9 = *((_QWORD *)v48 + i - 1);
    LODWORD(v49) = i - 1;
    v46 = v9;
    sub_1C61DB390(a5, &v46, (uint64_t)v47);
    if (v47[16])
    {
      v10 = sub_1C477672C((uint64_t)a4, v46);
      v11 = a4[1];
      if (v11 == *a4)
        v12 = (unsigned int *)a4 + 5;
      else
        v12 = (unsigned int *)(a4 + 2);
      v13 = (_QWORD *)(v11 + 8 * *v12);
      v14 = v46;
      if (v10 == v13)
      {
        v15 = *(_QWORD *)(v46 + 8);
        if (v15)
        {
          while (1)
          {
            v16 = *(_QWORD *)(v15 + 24);
            if (!v16 || *(_BYTE *)(v16 + 16) != 83)
              break;
            v17 = *(_DWORD *)(v16 + 20);
            if ((v17 & 0x40000000) != 0)
              v18 = *(_QWORD *)(v16 - 8);
            else
              v18 = v16 - 32 * (v17 & 0x7FFFFFF);
            v19 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)(v18
                           + 32 * *(unsigned int *)(v16 + 60)
                           + 8 * ((unint64_t)(v15 - v18) >> 5)) != **(_QWORD **)(v19 + 32))
              goto LABEL_15;
LABEL_26:
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
            {
              v14 = v46;
              goto LABEL_28;
            }
          }
          v19 = *(_QWORD *)(a1 + 8);
LABEL_15:
          v20 = sub_1C477672C(v19 + 56, *(_QWORD *)(v16 + 40));
          v21 = *(_QWORD *)(v19 + 64);
          if (v21 == *(_QWORD *)(v19 + 56))
            v22 = 76;
          else
            v22 = 72;
          if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)(v19 + v22)))
          {
            v23 = sub_1C477672C((uint64_t)a3, v16);
            v24 = a3[1];
            v25 = v24 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
            if (v23 == (_QWORD *)(v24 + 8 * *v25))
            {
              v26 = v49;
              if (v49 >= (unint64_t)HIDWORD(v49))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v49 + 1, 8);
                v26 = v49;
              }
              *((_QWORD *)v48 + v26) = v16;
              LODWORD(v49) = v49 + 1;
            }
          }
          goto LABEL_26;
        }
      }
LABEL_28:
      v27 = *(_DWORD *)(v14 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        v29 = *(uint64_t **)(v14 - 8);
        v28 = v27 & 0x7FFFFFF;
        if (v28)
        {
LABEL_32:
          v30 = 32 * v28;
          do
          {
            v31 = *v29;
            if (*v29)
              v32 = *(unsigned __int8 *)(*v29 + 16) >= 0x1Cu;
            else
              v32 = 0;
            if (v32)
            {
              v33 = *(_QWORD *)(v31 + 8);
              if (v33)
              {
                if (!*(_QWORD *)(v33 + 8))
                {
                  v34 = *(_QWORD *)(a1 + 8);
                  v35 = sub_1C477672C(v34 + 56, *(_QWORD *)(v31 + 40));
                  v36 = *(_QWORD *)(v34 + 64);
                  v37 = v36 == *(_QWORD *)(v34 + 56) ? 76 : 72;
                  if (v35 != (_QWORD *)(v36 + 8 * *(unsigned int *)(v34 + v37)))
                  {
                    v38 = sub_1C477672C((uint64_t)a3, v31);
                    v39 = a3[1];
                    v40 = v39 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
                    if (v38 == (_QWORD *)(v39 + 8 * *v40))
                    {
                      v41 = sub_1C477672C((uint64_t)a4, v31);
                      v42 = a4[1];
                      v43 = v42 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
                      if (v41 == (_QWORD *)(v42 + 8 * *v43))
                      {
                        v44 = v49;
                        if (v49 >= (unint64_t)HIDWORD(v49))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v49 + 1, 8);
                          v44 = v49;
                        }
                        *((_QWORD *)v48 + v44) = v31;
                        LODWORD(v49) = v49 + 1;
                      }
                    }
                  }
                }
              }
            }
            v29 += 4;
            v30 -= 32;
          }
          while (v30);
        }
      }
      else
      {
        v28 = v27 & 0x7FFFFFF;
        v29 = (uint64_t *)(v14 - 32 * v28);
        if (v28)
          goto LABEL_32;
      }
    }
  }
  if (v48 != v50)
    free(v48);
}

void sub_1C5B86210(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void **v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *i;
  char *v26;
  int v27;
  void *__p;
  char *v29;
  char *v30;
  char *v31;
  uint64_t *v32;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = (void *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 0x600000000;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7)
      v8 = v5 == a2;
    else
      v8 = 1;
    if (v8)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (const void *)(a2 + 24);
    if (v9 != a2 + 24)
    {
      *(_QWORD *)(v5 + 8) = v9;
      *(_DWORD *)(v5 + 16) = v7;
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_11;
    }
    if (v7 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 8, v5 + 24, *(unsigned int *)(a2 + 16), 8);
      v11 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v11)
        goto LABEL_10;
      v10 = *(const void **)(a2 + 8);
      v6 = *(void **)(v5 + 8);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v6, v10, 8 * v11);
LABEL_10:
    *(_DWORD *)(v5 + 16) = v7;
LABEL_11:
    *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
    *(_DWORD *)(v5 + 72) = *(_DWORD *)(a2 + 72);
    v12 = v5 + 80;
    goto LABEL_13;
  }
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
  if (v13 + 1 > 0x333333333333333)
    abort();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x199999999999999)
    v16 = 0x333333333333333;
  else
    v16 = v15;
  v32 = a1 + 2;
  if (v16)
  {
    if (v16 > 0x333333333333333)
      sub_1C4764EE4();
    v17 = (char *)operator new(80 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v17[80 * v13];
  __p = v17;
  v29 = v18;
  v31 = &v17[80 * v16];
  *(_QWORD *)v18 = *(_QWORD *)a2;
  v19 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  v20 = (void **)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0x600000000;
  v21 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v21 && v20 != (void **)(a2 + 8))
  {
    v22 = *(void **)(a2 + 8);
    if (v22 != (void *)(a2 + 24))
    {
      *v20 = v22;
      v27 = *(_DWORD *)(a2 + 20);
      *((_DWORD *)v18 + 4) = v21;
      *((_DWORD *)v18 + 5) = v27;
      *(_QWORD *)(a2 + 8) = a2 + 24;
      *(_DWORD *)(a2 + 20) = 0;
      goto LABEL_32;
    }
    if (v21 >= 7)
    {
      *((_DWORD *)v18 + 4) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)(v18 + 24), v21, 8);
      v23 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v23)
        goto LABEL_31;
      v22 = *(void **)(a2 + 8);
      v19 = *v20;
    }
    else
    {
      v23 = *(unsigned int *)(a2 + 16);
    }
    memcpy(v19, v22, 8 * v23);
LABEL_31:
    *((_DWORD *)v18 + 4) = v21;
LABEL_32:
    *(_DWORD *)(a2 + 16) = 0;
  }
  *(_DWORD *)&v17[80 * v13 + 72] = *(_DWORD *)(a2 + 72);
  v30 = v18 + 80;
  sub_1C631C2A0(a1, &__p);
  v12 = a1[1];
  v24 = v29;
  for (i = v30; i != v24; i -= 80)
  {
    v26 = (char *)*((_QWORD *)i - 9);
    if (i - 56 != v26)
      free(v26);
  }
  if (__p)
    operator delete(__p);
LABEL_13:
  a1[1] = v12;
}

void sub_1C5B864D8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 9);
        if (v4 - 56 != v6)
          free(v6);
        v4 -= 80;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C5B86554()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v3 = 400;
  v4 = &v3;
  v2 = 1;
  *(_QWORD *)&v1 = "The maximum number of failures to tolerate during fuzzy matching. (default: 400)";
  *((_QWORD *)&v1 + 1) = 80;
  sub_1C631C3C4(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81FBF8, &dword_1C475E000);
}

_BYTE *llvm::LoopRotatePass::LoopRotatePass(_BYTE *this, char a2, char a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

char **llvm::LoopRotatePass::run@<X0>(_BYTE *a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  llvm::AssumptionCache *v10;
  void *v11;
  uint64_t v12;
  llvm::LoopInfo *v13;
  char v14;
  char **result;
  _QWORD v16[5];
  __int16 v17;
  uint64_t v18;
  char *v19[2];
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[64];
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  _QWORD *v29;
  _QWORD v30[2];
  uint64_t v31;
  char *v32[2];
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[64];
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  _QWORD **v42;
  _QWORD *v43[2];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*a1 || llvm::hasVectorizeTransformation(a2, a2) == 5)
    v8 = dword_1ED81FD58;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a3 + 40);
  v10 = *(llvm::AssumptionCache **)(a3 + 8);
  v11 = *(void **)(a3 + 16);
  v16[0] = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40) + 272;
  v16[1] = v9;
  v16[2] = v11;
  v16[3] = v10;
  v16[4] = 0;
  v17 = 257;
  LOBYTE(v31) = 0;
  v44 = 0;
  v12 = *(_QWORD *)(a3 + 72);
  if (v12)
  {
    v18 = *(_QWORD *)(a3 + 72);
    v19[0] = (char *)&v20;
    v19[1] = (char *)0x1000000000;
    v21 = v25;
    v22 = v25;
    v26 = v28;
    v27 = 0x800000000;
    v30[1] = 0;
    v30[0] = 0;
    v29 = v30;
    v31 = v12;
    v32[0] = (char *)&v33;
    v32[1] = (char *)0x1000000000;
    v34 = v38;
    v35 = v38;
    v36 = 8;
    v37 = 0;
    v23 = 8;
    v24 = 0;
    v39 = v41;
    v40 = 0x800000000;
    v43[1] = 0;
    v43[0] = 0;
    v42 = v43;
    v44 = 1;
    sub_1C61247C0((uint64_t)&v29, 0);
    if (v26 != v28)
      free(v26);
    if (v22 != v21)
      free(v22);
    sub_1C4EE41F8(v19);
    if (v44)
      v13 = (llvm::LoopInfo *)&v31;
    else
      v13 = 0;
    v10 = *(llvm::AssumptionCache **)(a3 + 8);
    v11 = *(void **)(a3 + 16);
  }
  else
  {
    v13 = 0;
  }
  llvm::LoopRotation(a2, *(int32x2_t **)(a3 + 24), *(_QWORD **)(a3 + 48), v10, v11, *(int32x2_t **)(a3 + 32), v13, (uint64_t)v16, 0, v8, 0, (a1[1] | byte_1ED81FE18) != 0);
  if ((v14 & 1) != 0)
  {
    result = (char **)llvm::getLoopPassPreservedAnalyses(a4);
    if (*(_QWORD *)(a3 + 72))
      result = (char **)sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = (char **)sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v44)
  {
    sub_1C61247C0((uint64_t)&v42, v43[0]);
    if (v39 != v41)
      free(v39);
    if (v35 != v34)
      free(v35);
    return sub_1C4EE41F8(v32);
  }
  return result;
}

uint64_t sub_1C5B86894(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Rotate Loops";
  *(_QWORD *)(v4 + 8) = 12;
  *(_QWORD *)(v4 + 16) = "loop-rotate";
  *(_QWORD *)(v4 + 24) = 11;
  *(_QWORD *)(v4 + 32) = &unk_1ED81FCC8;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B86A24;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5B86940(uint64_t a1, int a2, char a3)
{
  unint64_t v6;
  int v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81FCC8;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195C40;
  *(_BYTE *)(a1 + 32) = a3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1ED81FCD0);
  if (v6 != -1)
  {
    v11[0] = sub_1C5B86894;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED81FCD0, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v7 = dword_1ED81FD58;
  if (a2 != -1)
    v7 = a2;
  *(_DWORD *)(a1 + 28) = v7;
  return a1;
}

uint64_t sub_1C5B86A24()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B86940(v0, -1, 0);
}

void sub_1C5B86A58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B86A7C(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  llvm::getLoopAnalysisUsage(a2, v3);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LazyBlockFrequencyInfoPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LazyBranchProbabilityInfoPass::ID);
}

uint64_t sub_1C5B86B00(uint64_t a1, const llvm::Loop *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  llvm::Function *v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  llvm::AssumptionCacheTracker *v20;
  llvm::AssumptionCache *AssumptionCache;
  char **v22;
  char *v23;
  uint64_t v24;
  char **v25;
  char *v26;
  int32x2_t *v27;
  void *v28;
  int32x2_t *v29;
  uint64_t AnalysisPass;
  const llvm::Loop *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int hasVectorizeTransformation;
  unsigned int *v36;
  unsigned int v37;
  llvm::LoopInfo *v38;
  uint64_t v39;
  _BYTE v41[48];
  uint64_t v42;
  char *v43[2];
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[64];
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  _QWORD *v53;
  _QWORD v54[2];
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[2];
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  void *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[64];
  void *v68;
  uint64_t v69;
  _BYTE v70[64];
  _QWORD **v71;
  _QWORD *v72[2];
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop((llvm::LoopPass *)a1, a2) & 1) != 0)
    return 0;
  v7 = *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56);
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::LoopInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::LoopInfoWrapperPass::ID);
  v11 = **(char ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v56 = 0;
  v55 = 0;
  LODWORD(v57) = 0;
  v58[1] = 0;
  v58[0] = 0;
  v59 = 0;
  v61 = 0;
  v60 = 0;
  v62 = 0;
  v14 = *(_QWORD *)(v13 + 56);
  if (v14)
  {
    v3 = v58;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v14 + 48))(&v42, v14, v7);
    v2 = (uint64_t *)(v13 + 64);
    v15 = v42;
    if (!*(_BYTE *)(v13 + 72))
    {
      *(_QWORD *)(v13 + 64) = v42;
      *(_BYTE *)(v13 + 72) = 1;
      goto LABEL_11;
    }
    v42 = 0;
    v16 = *v2;
    *v2 = v15;
    if (!v16)
      goto LABEL_11;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v42;
    v42 = 0;
    if (!v17)
      goto LABEL_11;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_11:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C(&v55);
  v18 = **(char ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != llvm::AssumptionCacheTracker::ID);
  v20 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v20, v7);
  v22 = **(char ****)(a1 + 8);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != llvm::DominatorTreeWrapperPass::ID);
  v24 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), llvm::DominatorTreeWrapperPass::ID);
  v25 = **(char ****)(a1 + 8);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != llvm::ScalarEvolutionWrapperPass::ID);
  v27 = (int32x2_t *)(v10 + 32);
  v28 = (void *)(v24 + 32);
  v29 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  llvm::getBestSimplifyQuery((llvm *)a1, v7, (uint64_t)v41);
  LOBYTE(v55) = 0;
  v73 = 0;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v32 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 32);
      v42 = v33;
      v43[0] = (char *)&v44;
      v43[1] = (char *)0x1000000000;
      v45 = v49;
      v46 = v49;
      v47 = 8;
      v48 = 0;
      v50 = v52;
      v51 = 0x800000000;
      v54[1] = 0;
      v54[0] = 0;
      v53 = v54;
      if (v73)
      {
        sub_1C631C54C(&v55, (uint64_t)&v42);
        v34 = (_QWORD *)v54[0];
      }
      else
      {
        v34 = 0;
        v55 = v33;
        v56 = (char *)v58;
        v63 = v67;
        v64 = v67;
        v68 = v70;
        v57 = 0x1000000000;
        v65 = 8;
        v66 = 0;
        v47 = 8;
        v48 = 0;
        v69 = 0x800000000;
        v72[1] = 0;
        v72[0] = 0;
        v71 = v72;
        v73 = 1;
      }
      sub_1C61247C0((uint64_t)&v53, v34);
      if (v50 != v52)
        free(v50);
      if (v46 != v45)
        free(v46);
      sub_1C4EE41F8(v43);
    }
  }
  hasVectorizeTransformation = llvm::hasVectorizeTransformation(a2, v31);
  v36 = (unsigned int *)(a1 + 28);
  if (hasVectorizeTransformation == 5)
    v36 = (unsigned int *)&dword_1ED81FD58;
  v37 = *v36;
  if (v73)
    v38 = (llvm::LoopInfo *)&v55;
  else
    v38 = 0;
  llvm::LoopRotation(a2, v27, v2, AssumptionCache, v28, v29, v38, (uint64_t)v41, 0, v37, 0, (*(unsigned __int8 *)(a1 + 32) | byte_1ED81FE18) != 0);
  v6 = v39;
  if (v73)
  {
    sub_1C61247C0((uint64_t)&v71, v72[0]);
    if (v68 != v70)
      free(v68);
    if (v64 != v63)
      free(v64);
    sub_1C4EE41F8(&v56);
  }
  return v6;
}

uint64_t sub_1C5B86F98()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;

  v3 = 16;
  v4 = &v3;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"The default maximum header size for automatic loop rotation";
  v2.n128_u64[1] = 59;
  sub_1C4DB1928((uint64_t)&unk_1ED81FCD8, "rotation-max-header-size", &v4, &v1, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81FCD8, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Run loop-rotation in the prepare-for-lto stage. This option should be used for testing only.";
  v2.n128_u64[1] = 92;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81FD98, "rotation-prepare-for-lto", (_BYTE **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81FD98, &dword_1C475E000);
}

char **llvm::LoopSimplifyCFGPass::run@<X0>(llvm::Loop *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  llvm::MemorySSAUpdater *v9;
  char **result;
  uint64_t v11;
  char *v12[2];
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[64];
  void *v19;
  uint64_t v20;
  _BYTE v21[64];
  _QWORD *v22;
  _QWORD v23[2];
  uint64_t v24;
  char *v25[2];
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[64];
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  _QWORD **v35;
  _QWORD *v36[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  LOBYTE(v24) = 0;
  v37 = 0;
  v8 = *(_QWORD *)(a2 + 72);
  if (v8)
  {
    v11 = *(_QWORD *)(a2 + 72);
    v12[0] = (char *)&v13;
    v12[1] = (char *)0x1000000000;
    v14 = v18;
    v15 = v18;
    v19 = v21;
    v20 = 0x800000000;
    v23[1] = 0;
    v23[0] = 0;
    v22 = v23;
    v24 = v8;
    v25[0] = (char *)&v26;
    v25[1] = (char *)0x1000000000;
    v27 = v31;
    v28 = v31;
    v29 = 8;
    v30 = 0;
    v16 = 8;
    v17 = 0;
    v32 = v34;
    v33 = 0x800000000;
    v36[1] = 0;
    v36[0] = 0;
    v35 = v36;
    v37 = 1;
    sub_1C61247C0((uint64_t)&v22, 0);
    if (v19 != v21)
      free(v19);
    if (v15 != v14)
      free(v15);
    sub_1C4EE41F8(v12);
    if (v37)
      v9 = (llvm::MemorySSAUpdater *)&v24;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  LOBYTE(v11) = 0;
  if ((sub_1C5B872F8(a1, *(llvm::Loop **)(a2 + 16), *(llvm::LoopInfo **)(a2 + 24), *(llvm::ScalarEvolution **)(a2 + 32), v9, &v11) & 1) != 0)
  {
    if ((_BYTE)v11)
    {
      llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(a3 + 8), (uint64_t)a1, (uint64_t)"loop-simplifycfg", 16);
      if (*(llvm::Loop **)(a3 + 16) == a1)
        *(_BYTE *)(a3 + 24) = 1;
    }
    result = (char **)llvm::getLoopPassPreservedAnalyses(a4);
    if (*(_QWORD *)(a2 + 72))
      result = (char **)sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = (char **)sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v37)
  {
    sub_1C61247C0((uint64_t)&v35, v36[0]);
    if (v32 != v34)
      free(v32);
    if (v28 != v27)
      free(v28);
    return sub_1C4EE41F8(v25);
  }
  return result;
}

uint64_t sub_1C5B872F8(llvm::Loop *a1, llvm::Loop *a2, llvm::LoopInfo *a3, llvm::ScalarEvolution *a4, llvm::MemorySSAUpdater *a5, _BYTE *a6)
{
  llvm::LoopBlocksDFS *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  char *LoopPredecessor;
  uint64_t v14;
  char *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  llvm::Loop *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  char *v45;
  int v46;
  unsigned int v47;
  char *v48;
  void *v49;
  _QWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  char *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  llvm::Loop *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char v94;
  llvm::Loop *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  llvm::SmallPtrSetImplBase *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  llvm::Loop *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t LoopLatch;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  llvm::Loop *v131;
  int v132;
  llvm::Loop *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  llvm::Loop *v157;
  llvm::Loop *v158;
  const llvm::Loop *v159;
  char *v160;
  char *v161;
  char *v162;
  int v163;
  char *v164;
  _QWORD *v165;
  unsigned __int8 *v166;
  llvm::BasicBlock *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  const llvm::APInt *v172;
  llvm::ConstantInt *v173;
  llvm::ValueHandleBase *v174;
  char *v175;
  llvm::Value *v176;
  char *v177;
  char *v178;
  unsigned __int8 **v179;
  int v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  _QWORD *v184;
  uint64_t ***v185;
  uint64_t ***v186;
  uint64_t **v187;
  uint64_t **v188;
  llvm::Type *v189;
  const llvm::APInt *v190;
  llvm::BasicBlock **v191;
  llvm::BasicBlock **v192;
  uint64_t v193;
  llvm::BasicBlock *v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *i;
  _QWORD *v202;
  _QWORD *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  llvm::UndefValue *v207;
  uint64_t v208;
  _QWORD *v209;
  llvm::ConstantInt *v210;
  unsigned int v211;
  unint64_t v212;
  llvm::ConstantInt *v213;
  uint64_t v214;
  char **v215;
  llvm::LoopInfo *v216;
  int v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  int v222;
  int v223;
  llvm::Loop *v224;
  llvm::Loop *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t *v229;
  llvm::Loop *v230;
  unint64_t *v231;
  unint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  llvm::Loop *j;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  llvm::Loop *v243;
  llvm::Loop *v244;
  unint64_t *v245;
  unint64_t v246;
  int32x2_t *v247;
  uint64_t v248;
  int v249;
  int v250;
  unsigned int v251;
  _QWORD *v252;
  void *v253;
  _QWORD *v254;
  int v255;
  BOOL v256;
  unsigned int v257;
  _QWORD *v258;
  llvm::Loop *v259;
  llvm::Loop *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  llvm::Loop *v264;
  llvm::Loop *v265;
  unint64_t v266;
  llvm::Loop **v267;
  _QWORD *v268;
  llvm::LoopInfo *v269;
  llvm::Loop *v270;
  unint64_t v271;
  llvm::Loop **v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  llvm::Loop **v286;
  llvm::Loop *v287;
  llvm::Loop **v288;
  llvm::Loop *v289;
  llvm *v290;
  llvm::ScalarEvolution *v291;
  uint64_t *v292;
  llvm::BasicBlock *v293;
  char *v294;
  _QWORD **v295;
  _QWORD **v296;
  int v297;
  int v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD **v302;
  uint64_t v303;
  int v304;
  uint64_t *v305;
  llvm::BasicBlock *v306;
  llvm::BasicBlock *v307;
  llvm::Loop *v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  llvm::Loop *v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  unsigned int v319;
  unsigned __int8 *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t ***v323;
  uint64_t ***v324;
  unsigned __int8 *v325;
  char *v326;
  char *v327;
  llvm::Value *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  char *v332;
  char *v333;
  unsigned __int8 **v334;
  int v335;
  unsigned __int8 *v336;
  unsigned __int8 *v337;
  unsigned __int8 *v338;
  uint64_t **v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t *v345;
  unsigned int v346;
  unint64_t v347;
  llvm::BasicBlock **v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t *v353;
  int32x2_t *v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t *v368;
  _QWORD *v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  llvm::LoopInfo *v374;
  unint64_t v375;
  uint64_t **v376;
  _QWORD *v377;
  _QWORD *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  char *v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  llvm::BasicBlock **v388;
  uint64_t v389;
  llvm::BasicBlock *v390;
  char v391;
  char *v392;
  char *v393;
  unint64_t v394;
  char *v395;
  int v396;
  int v397;
  llvm::ValueHandleBase *v398;
  uint64_t v399;
  uint64_t v400;
  int v402;
  int v403;
  char *v404;
  uint64_t v405;
  llvm::BasicBlock *SinglePredecessor;
  llvm::BasicBlock *v407;
  int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  llvm::BasicBlock *v412;
  int v413;
  int v414;
  const llvm::Loop *v415;
  const llvm::Loop *v416;
  unsigned int v418;
  uint64_t v419;
  void **v420;
  void *v421;
  int v422;
  int v423;
  void **v424;
  llvm::DomTreeUpdater *v425;
  uint64_t *v432;
  uint64_t *v433;
  char *v434;
  uint64_t *v435;
  uint64_t *v436;
  void *v437;
  unsigned int v438;
  unsigned __int8 *v439;
  unsigned int v440;
  __int16 v441;
  unsigned __int8 *v442;
  llvm::Loop *v443;
  llvm::LoopInfo *v444;
  llvm::Loop *v445;
  llvm::ScalarEvolution *v446;
  llvm::MemorySSAUpdater *v447;
  void *v448[4];
  void *__p;
  uint64_t *v450;
  void *v451[2];
  _QWORD v452[24];
  char v453;
  _QWORD *v454;
  void *v455;
  uint64_t v456;
  int v457;
  _QWORD v458[7];
  char v459;
  _BYTE *v460;
  void *v461;
  uint64_t v462;
  int v463;
  _BYTE v464[64];
  _QWORD v465[3];
  __int16 v466;
  void *v467;
  uint64_t v468;
  _BYTE v469[256];
  __int16 v470;
  _BYTE *v471;
  void *v472;
  uint64_t v473;
  int v474;
  _BYTE v475[64];
  void *v476;
  uint64_t v477;
  _BYTE v478[64];
  _BYTE *v479;
  void *v480;
  uint64_t v481;
  int v482;
  _BYTE v483[64];
  void *v484;
  uint64_t v485;
  _BYTE v486[64];
  _BYTE *v487;
  void *v488;
  uint64_t v489;
  int v490;
  _BYTE v491[64];
  void *v492;
  uint64_t v493;
  _BYTE v494[64];
  void *v495;
  void *v496;
  uint64_t v497;
  int v498;
  _WORD v499[24];
  void *v500;
  int64x2_t v501;
  int64x2_t v502;
  int64x2_t v503;
  int64x2_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  __int16 v509;
  char v510;
  uint64_t v511;
  uint64_t v512;
  void *v513;
  _QWORD v514[36];

  v514[34] = *MEMORY[0x1E0C80C00];
  if (!byte_1ED81FED8 || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1))
  {
    v20 = 0;
    goto LABEL_635;
  }
  v443 = a1;
  v444 = a3;
  v445 = a2;
  v446 = a4;
  v447 = a5;
  v8 = (llvm::LoopBlocksDFS *)sub_1C4DFE414((uint64_t)v448, (uint64_t)a1);
  v451[0] = v452;
  v451[1] = (void *)0x1000000000;
  v458[4] = 0;
  v458[3] = 0;
  v458[5] = a2;
  v458[6] = 0;
  v459 = 0;
  v460 = v464;
  v461 = v464;
  v462 = 8;
  v463 = 0;
  memset(v465, 0, sizeof(v465));
  v466 = 0;
  v467 = v469;
  v468 = 0x1000000000;
  v470 = 0;
  v471 = v475;
  v472 = v475;
  v473 = 8;
  v474 = 0;
  v476 = v478;
  v477 = 0x800000000;
  v479 = v483;
  v480 = v483;
  v481 = 8;
  v482 = 0;
  v484 = v486;
  v485 = 0x800000000;
  v487 = v491;
  v488 = v491;
  v489 = 8;
  v490 = 0;
  v492 = v494;
  v493 = 0x800000000;
  llvm::LoopBlocksDFS::perform(v8, a3);
  v501.i64[0] = 0;
  v500 = 0;
  v501.i32[2] = 0;
  v10 = (uint64_t *)__p;
  v9 = v450;
  if (v450 == __p)
    goto LABEL_93;
  v11 = 0;
  do
  {
    --v9;
    if (v501.i32[2])
    {
      v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & (v501.i32[2] - 1);
      LoopPredecessor = (char *)v500 + 16 * v12;
      v14 = *(_QWORD *)LoopPredecessor;
      if (*v9 == *(_QWORD *)LoopPredecessor)
        goto LABEL_20;
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = LoopPredecessor;
        v18 = v12 + v16++;
        v12 = v18 & (v501.i32[2] - 1);
        LoopPredecessor = (char *)v500 + 16 * v12;
        v14 = *(_QWORD *)LoopPredecessor;
        if (*v9 == *(_QWORD *)LoopPredecessor)
          goto LABEL_20;
      }
      if (v15)
        v19 = v15;
      else
        v19 = LoopPredecessor;
    }
    else
    {
      v19 = 0;
    }
    LoopPredecessor = (char *)sub_1C4DC1798((uint64_t)&v500, (uint64_t)v9, v9, v19);
    *(_QWORD *)LoopPredecessor = *v9;
    *((_DWORD *)LoopPredecessor + 2) = 0;
LABEL_20:
    *((_DWORD *)LoopPredecessor + 2) = v11++;
  }
  while (v9 != v10);
  v22 = (uint64_t *)__p;
  v21 = v450;
  if (v450 != __p)
  {
    while (1)
    {
      v495 = 0;
      v23 = (_QWORD *)*--v21;
      v495 = v23;
      v24 = (_QWORD *)v23[5];
      if (v24 != v23 + 5)
        break;
LABEL_84:
      if (v21 == v22)
        goto LABEL_93;
    }
    if (v24)
      v25 = v24 - 3;
    else
      v25 = 0;
    v26 = *((unsigned __int8 *)v25 + 16);
    v27 = v26 - 29;
    if (v26 != 30)
    {
      v28 = 2;
      switch(v27)
      {
        case 1:
LABEL_691:
          __break(1u);
          goto LABEL_692;
        case 2:
          v28 = (*((_DWORD *)v25 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_87;
        case 3:
        case 9:
          v28 = (*((_DWORD *)v25 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_87;
        case 4:
          goto LABEL_33;
        case 7:
          v28 = *((_WORD *)v25 + 9) & 1;
          goto LABEL_87;
        case 8:
          v28 = 1;
          goto LABEL_33;
        case 10:
          v28 = *((_DWORD *)v25 + 20) + 1;
LABEL_87:
          if (!v28)
            goto LABEL_84;
          goto LABEL_33;
        default:
          goto LABEL_84;
      }
    }
    if ((*((_DWORD *)v25 + 5) & 0x7FFFFFF) == 3)
      v28 = 2;
    else
      v28 = 1;
LABEL_33:
    v29 = 0;
    v30 = v28;
    while (2)
    {
      v439 = 0;
      v31 = *((unsigned __int8 *)v25 + 16);
      if (v31 != 30)
        __asm { BR              X9 }
      v439 = (unsigned __int8 *)v25[-4 * v29 - 4];
      v32 = v443;
      LoopPredecessor = (char *)sub_1C477672C((uint64_t)v443 + 56, (uint64_t)v439);
      v33 = *((_QWORD *)v32 + 8);
      if (v33 == *((_QWORD *)v32 + 7))
        v34 = 76;
      else
        v34 = 72;
      if (LoopPredecessor != (char *)(v33 + 8 * *(unsigned int *)((char *)v32 + v34)))
      {
        v35 = v439;
        v36 = *((_DWORD *)v444 + 4);
        if (!v36)
          goto LABEL_46;
        v37 = *(_QWORD *)v444;
        v38 = v36 - 1;
        v39 = ((v439 >> 4) ^ (v439 >> 9)) & (v36 - 1);
        v40 = *(unsigned __int8 **)(*(_QWORD *)v444 + 16 * v39);
        if (v439 == v40)
        {
LABEL_44:
          v43 = *(_QWORD *)(v37 + 16 * v39 + 8);
          if (!v43 || **(unsigned __int8 ***)(v43 + 32) != v439)
            goto LABEL_46;
        }
        else
        {
          v41 = 1;
          while (v40 != (unsigned __int8 *)-4096)
          {
            v42 = v39 + v41++;
            v39 = v42 & v38;
            v40 = *(unsigned __int8 **)(v37 + 16 * v39);
            if (v439 == v40)
              goto LABEL_44;
          }
LABEL_46:
          v44 = v501.i32[2];
          if (!v501.i32[2])
          {
            v56 = 0;
            goto LABEL_61;
          }
          v45 = (char *)v500;
          v46 = v501.i32[2] - 1;
          v47 = ((v495 >> 4) ^ (v495 >> 9)) & (v501.i32[2] - 1);
          v48 = (char *)v500 + 16 * v47;
          v49 = *(void **)v48;
          if (v495 == *(void **)v48)
          {
            v54 = *((_DWORD *)v48 + 2);
LABEL_64:
            v58 = ((v35 >> 4) ^ (v35 >> 9)) & v46;
            LoopPredecessor = &v45[16 * v58];
            v59 = *(_QWORD *)LoopPredecessor;
            if (v35 != *(unsigned __int8 **)LoopPredecessor)
            {
              v60 = 0;
              v61 = 1;
              while (v59 != -4096)
              {
                if (v60)
                  v62 = 0;
                else
                  v62 = v59 == -8192;
                if (v62)
                  v60 = LoopPredecessor;
                v63 = v58 + v61++;
                v58 = v63 & v46;
                LoopPredecessor = &v45[16 * v58];
                v59 = *(_QWORD *)LoopPredecessor;
                if (v35 == *(unsigned __int8 **)LoopPredecessor)
                  goto LABEL_78;
              }
              if (v60)
                v55 = v60;
              else
                v55 = LoopPredecessor;
              goto LABEL_77;
            }
          }
          else
          {
            v50 = 0;
            v51 = 1;
            while (v49 != (void *)-4096)
            {
              if (v50)
                v52 = 0;
              else
                v52 = v49 == (void *)-8192;
              if (v52)
                v50 = v48;
              v53 = v47 + v51++;
              v47 = v53 & v46;
              v48 = (char *)v500 + 16 * v47;
              v49 = *(void **)v48;
              if (v495 == *(void **)v48)
              {
                v54 = *((_DWORD *)v48 + 2);
                goto LABEL_62;
              }
            }
            if (v50)
              v56 = v50;
            else
              v56 = v48;
LABEL_61:
            v57 = sub_1C4DC1798((uint64_t)&v500, (uint64_t)&v495, (uint64_t *)&v495, v56);
            v54 = 0;
            *v57 = v495;
            *((_DWORD *)v57 + 2) = 0;
            v45 = (char *)v500;
            v44 = v501.i32[2];
            if (v501.i32[2])
            {
LABEL_62:
              v35 = v439;
              v46 = v44 - 1;
              goto LABEL_64;
            }
            v55 = 0;
LABEL_77:
            LoopPredecessor = (char *)sub_1C4DC1798((uint64_t)&v500, (uint64_t)&v439, (uint64_t *)&v439, v55);
            *(_QWORD *)LoopPredecessor = v439;
            *((_DWORD *)LoopPredecessor + 2) = 0;
          }
LABEL_78:
          if (v54 > *((_DWORD *)LoopPredecessor + 2))
          {
            MEMORY[0x1CAA32FB4](v500, 8);
            v132 = 1;
            LOBYTE(v470) = 1;
            goto LABEL_247;
          }
        }
      }
      if (++v29 == v30)
        goto LABEL_84;
      continue;
    }
  }
LABEL_93:
  MEMORY[0x1CAA32FB4](v500, 8);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v471, **((_QWORD **)v443 + 4));
  v64 = v450;
  v432 = (uint64_t *)__p;
  if (v450 != __p)
  {
    while (2)
    {
      v67 = *(v64 - 1);
      v65 = v64 - 1;
      v66 = v67;
      v68 = sub_1C477672C((uint64_t)&v471, v67);
      if (v472 == v471)
        v69 = (uint64_t *)((char *)&v473 + 4);
      else
        v69 = &v473;
      v433 = v65;
      if (v68 == (_QWORD *)((char *)v472 + 8 * *(unsigned int *)v69))
      {
        v79 = v477;
        if (v477 >= (unint64_t)HIDWORD(v477))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v476, (uint64_t)v478, v477 + 1, 8);
          v79 = v477;
        }
        *((_QWORD *)v476 + v79) = v66;
        LODWORD(v477) = v477 + 1;
      }
      else
      {
        LoopPredecessor = (char *)sub_1C5B89D14(v66);
        v70 = LoopPredecessor;
        if (!LoopPredecessor)
          goto LABEL_112;
        v71 = *((_DWORD *)v444 + 4);
        if (!v71)
          goto LABEL_110;
        v72 = *(_QWORD *)v444;
        v73 = v71 - 1;
        v74 = (v71 - 1) & ((v66 >> 4) ^ (v66 >> 9));
        v75 = *(_QWORD *)(*(_QWORD *)v444 + 16 * v74);
        if (v66 == v75)
        {
LABEL_104:
          v78 = *(llvm::Loop **)(v72 + 16 * v74 + 8);
        }
        else
        {
          v76 = 1;
          while (v75 != -4096)
          {
            v77 = v74 + v76++;
            v74 = v77 & v73;
            v75 = *(_QWORD *)(v72 + 16 * v74);
            if (v66 == v75)
              goto LABEL_104;
          }
LABEL_110:
          v78 = 0;
        }
        if (v78 == v443)
        {
          v81 = v493;
          if (v493 >= (unint64_t)HIDWORD(v493))
          {
            LoopPredecessor = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v492, (uint64_t)v494, v493 + 1, 8);
            v81 = v493;
          }
          *((_QWORD *)v492 + v81) = v66;
          LODWORD(v493) = v493 + 1;
          v80 = 1;
        }
        else
        {
LABEL_112:
          v80 = 0;
        }
        v82 = *(_QWORD *)(v66 + 40);
        if (v82 != v66 + 40)
        {
          if (v82)
            v83 = v82 - 24;
          else
            v83 = 0;
          v84 = *(unsigned __int8 *)(v83 + 16);
          v85 = v84 - 29;
          if (v84 != 30)
          {
            v86 = 2;
            switch(v85)
            {
              case 1:
                goto LABEL_691;
              case 2:
                v86 = (*(_DWORD *)(v83 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_141;
              case 3:
              case 9:
                v86 = (*(_DWORD *)(v83 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_141;
              case 4:
                goto LABEL_124;
              case 7:
                v86 = *(_WORD *)(v83 + 18) & 1;
                goto LABEL_141;
              case 8:
                v86 = 1;
                goto LABEL_124;
              case 10:
                v86 = *(_DWORD *)(v83 + 80) + 1;
LABEL_141:
                if (!v86)
                  goto LABEL_108;
                goto LABEL_124;
              default:
                goto LABEL_108;
            }
          }
          if ((*(_DWORD *)(v83 + 20) & 0x7FFFFFF) == 3)
            v86 = 2;
          else
            v86 = 1;
LABEL_124:
          v87 = 0;
          v88 = 0;
          v89 = v83 - 32;
          v90 = v83 - 64;
          v91 = v86;
          do
          {
            v92 = *(unsigned __int8 *)(v83 + 16);
            if (v92 != 30)
              __asm { BR              X9 }
            v93 = *(_QWORD *)(v89 - 32 * v88);
            if (v70 == (char *)v93)
              v94 = 0;
            else
              v94 = v80;
            if ((v94 & 1) == 0)
            {
              v95 = v443;
              v96 = sub_1C477672C((uint64_t)v443 + 56, *(_QWORD *)(v89 - 32 * v88));
              v97 = *((_QWORD *)v95 + 8);
              v98 = 72;
              if (v97 == *((_QWORD *)v95 + 7))
                v98 = 76;
              if (v96 == (_QWORD *)(v97 + 8 * *(unsigned int *)((char *)v95 + v98)))
                v99 = (llvm::SmallPtrSetImplBase *)&v479;
              else
                v99 = (llvm::SmallPtrSetImplBase *)&v471;
              sub_1C4774094(v99, v93);
            }
            ++v88;
            v87 += 2;
            v90 += 32;
          }
          while (v91 != v88);
        }
      }
LABEL_108:
      v64 = v433;
      if (v433 == v432)
        break;
      continue;
    }
  }
  v495 = &v497;
  v496 = (void *)0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v443, (uint64_t)&v495);
  v500 = &v502.u64[1];
  v501.i64[0] = (uint64_t)&v502.i64[1];
  v501.i64[1] = 8;
  v502.i32[0] = 0;
  if ((_DWORD)v496)
  {
    v100 = (uint64_t *)v495;
    v101 = (uint64_t *)((char *)v495 + 8 * v496);
    do
    {
      v102 = *v100;
      v103 = sub_1C477672C((uint64_t)&v479, *v100);
      if (v480 == v479)
        v104 = (uint64_t *)((char *)&v481 + 4);
      else
        v104 = &v481;
      if (v103 == (_QWORD *)((char *)v480 + 8 * *(unsigned int *)v104))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v500, v102);
        if (v105)
        {
          v106 = *(_QWORD *)(v102 + 8);
          if (v106)
          {
            while (1)
            {
              v107 = *(_QWORD *)(v106 + 24);
              v108 = *(unsigned __int8 *)(v107 + 16);
              v109 = v107 && v108 >= 0x1C;
              if (v109 && v108 - 29 <= 0xA)
                break;
              v106 = *(_QWORD *)(v106 + 8);
              if (!v106)
                goto LABEL_164;
            }
LABEL_177:
            v115 = v443;
            v116 = sub_1C477672C((uint64_t)v443 + 56, *(_QWORD *)(v107 + 40));
            v117 = *((_QWORD *)v115 + 8);
            if (v117 == *((_QWORD *)v115 + 7))
              v118 = 76;
            else
              v118 = 72;
            if (v116 == (_QWORD *)(v117 + 8 * *(unsigned int *)((char *)v115 + v118)))
              goto LABEL_167;
            while (1)
            {
              v106 = *(_QWORD *)(v106 + 8);
              if (!v106)
                break;
              v107 = *(_QWORD *)(v106 + 24);
              v112 = *(unsigned __int8 *)(v107 + 16);
              if (v107)
                v113 = v112 >= 0x1C;
              else
                v113 = 0;
              if (v113 && v112 - 29 <= 0xA)
                goto LABEL_177;
            }
          }
LABEL_164:
          v111 = v485;
          if (v485 >= (unint64_t)HIDWORD(v485))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v484, (uint64_t)v486, v485 + 1, 8);
            v111 = v485;
          }
          *((_QWORD *)v484 + v111) = v102;
          LODWORD(v485) = v485 + 1;
        }
      }
LABEL_167:
      ++v100;
    }
    while (v100 != v101);
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v443);
  v120 = **((_QWORD **)v443 + 4);
  v121 = sub_1C477672C((uint64_t)&v471, LoopLatch);
  if (v472 == v471)
    v122 = (uint64_t *)((char *)&v473 + 4);
  else
    v122 = &v473;
  if (v121 == (_QWORD *)((char *)v472 + 8 * *(unsigned int *)v122))
  {
    HIBYTE(v470) = 1;
    goto LABEL_242;
  }
  v123 = sub_1C5B89D14(LoopLatch);
  if (!v123 || v123 == v120)
  {
    HIBYTE(v470) = 0;
    v133 = v443;
  }
  else
  {
    v124 = *((_DWORD *)v444 + 4);
    if (!v124)
      goto LABEL_197;
    v125 = *(_QWORD *)v444;
    v126 = v124 - 1;
    v127 = (v124 - 1) & ((LoopLatch >> 4) ^ (LoopLatch >> 9));
    v128 = *(_QWORD *)(*(_QWORD *)v444 + 16 * v127);
    if (v128 == LoopLatch)
    {
LABEL_193:
      v131 = *(llvm::Loop **)(v125 + 16 * v127 + 8);
    }
    else
    {
      v129 = 1;
      while (v128 != -4096)
      {
        v130 = v127 + v129++;
        v127 = v130 & v126;
        v128 = *(_QWORD *)(v125 + 16 * v127);
        if (v128 == LoopLatch)
          goto LABEL_193;
      }
LABEL_197:
      v131 = 0;
    }
    v133 = v443;
    HIBYTE(v470) = v131 == v443;
    if (v131 == v443)
      goto LABEL_242;
  }
  v134 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v133);
  LoopPredecessor = (char *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v487, v134);
  v135 = (uint64_t *)__p;
  v435 = v450;
  if (__p == v450)
    goto LABEL_242;
  while (2)
  {
    v136 = v135;
    v137 = *v135;
    v139 = (_QWORD *)(*v135 + 40);
    v138 = (_QWORD *)*v139;
    if ((_QWORD *)*v139 == v139)
      goto LABEL_232;
    if (v138)
      v140 = v138 - 3;
    else
      v140 = 0;
    v141 = *((unsigned __int8 *)v140 + 16);
    v142 = v141 - 29;
    if (v141 != 30)
    {
      v143 = 2;
      switch(v142)
      {
        case 1:
          goto LABEL_691;
        case 2:
          v143 = (*((_DWORD *)v140 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_236;
        case 3:
        case 9:
          v143 = (*((_DWORD *)v140 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_236;
        case 4:
          goto LABEL_208;
        case 7:
          v143 = *((_WORD *)v140 + 9) & 1;
          goto LABEL_236;
        case 8:
          v143 = 1;
          goto LABEL_208;
        case 10:
          v143 = *((_DWORD *)v140 + 20) + 1;
LABEL_236:
          if (!v143)
            goto LABEL_232;
          goto LABEL_208;
        default:
          goto LABEL_232;
      }
    }
    if ((*((_DWORD *)v140 + 5) & 0x7FFFFFF) == 3)
      v143 = 2;
    else
      v143 = 1;
LABEL_208:
    v144 = 0;
    v145 = v143;
    while (2)
    {
      v146 = *((unsigned __int8 *)v140 + 16);
      if (v146 != 30)
        __asm { BR              X9 }
      v147 = v140[-4 * v144 - 4];
      LoopPredecessor = (char *)sub_1C477672C((uint64_t)&v487, v147);
      if (v488 == v487)
        v148 = (uint64_t *)((char *)&v489 + 4);
      else
        v148 = &v489;
      if (LoopPredecessor == (char *)v488 + 8 * *(unsigned int *)v148)
        goto LABEL_228;
      LoopPredecessor = (char *)sub_1C477672C((uint64_t)&v471, v137);
      v149 = v472 == v471 ? (uint64_t *)((char *)&v473 + 4) : &v473;
      if (LoopPredecessor == (char *)v472 + 8 * *(unsigned int *)v149)
        goto LABEL_228;
      LoopPredecessor = (char *)sub_1C5B89D14(v137);
      if (LoopPredecessor && LoopPredecessor != (char *)v147)
      {
        v150 = *((_DWORD *)v444 + 4);
        if (!v150)
          goto LABEL_226;
        v151 = *(_QWORD *)v444;
        v152 = v150 - 1;
        v153 = (v150 - 1) & ((v137 >> 4) ^ (v137 >> 9));
        v154 = *(_QWORD *)(*(_QWORD *)v444 + 16 * v153);
        if (v154 == v137)
        {
LABEL_225:
          v157 = *(llvm::Loop **)(v151 + 16 * v153 + 8);
        }
        else
        {
          v155 = 1;
          while (v154 != -4096)
          {
            v156 = v153 + v155++;
            v153 = v156 & v152;
            v154 = *(_QWORD *)(v151 + 16 * v153);
            if (v154 == v137)
              goto LABEL_225;
          }
LABEL_226:
          v157 = 0;
        }
        if (v157 != v443)
          break;
LABEL_228:
        if (++v144 == v145)
          goto LABEL_232;
        continue;
      }
      break;
    }
    LoopPredecessor = (char *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v487, v137);
LABEL_232:
    v135 = v136 + 1;
    if (v136 + 1 != v435)
      continue;
    break;
  }
LABEL_242:
  if ((void *)v501.i64[0] != v500)
    free((void *)v501.i64[0]);
  if (v495 != &v497)
    free(v495);
  v132 = v470;
LABEL_247:
  v20 = 0;
  v425 = (llvm::DomTreeUpdater *)v451;
  if (!v132 && (_DWORD)v493 && !HIBYTE(v470))
  {
    v158 = v443;
    if (v477 + (unint64_t)(HIDWORD(v489) - v490) == ((*((_QWORD *)v443 + 5) - *((_QWORD *)v443 + 4)) >> 3))
    {
      v424 = &v467;
      do
      {
        v159 = v158;
        v158 = *(llvm::Loop **)v158;
      }
      while (v158);
      llvm::ScalarEvolution::forgetLoop((int32x2_t *)v446, v159);
      if ((_DWORD)v485)
      {
        LoopPredecessor = (char *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v443);
        if (!LoopPredecessor)
          goto LABEL_261;
        v160 = (char *)*((_QWORD *)LoopPredecessor + 5);
        if (v160 == LoopPredecessor + 40)
          goto LABEL_261;
        if (v160)
          v161 = v160 - 24;
        else
          v161 = 0;
        if (v161[16] != 30)
        {
          v162 = 0;
          switch(v161[16])
          {
            case 29:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
              goto LABEL_267;
            case 30:
              goto LABEL_691;
            case 31:
              v163 = (*((_DWORD *)v161 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_265;
            case 32:
              v163 = (*((_DWORD *)v161 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_265;
            case 39:
              v163 = *((_DWORD *)v161 + 20) + 1;
LABEL_265:
              if (v163 == 1)
                goto LABEL_266;
              goto LABEL_261;
            default:
              goto LABEL_261;
          }
        }
        if ((*((_DWORD *)v161 + 5) & 0x7FFFFFF) == 3)
LABEL_261:
          v162 = 0;
        else
LABEL_266:
          v162 = LoopPredecessor;
LABEL_267:
        v165 = v162 + 40;
        v164 = (char *)*((_QWORD *)v162 + 5);
        if (v164 == v162 + 40)
        {
          v167 = 0;
        }
        else
        {
          if (v164)
            v166 = (unsigned __int8 *)(v164 - 24);
          else
            v166 = 0;
          if (v166[16] - 29 >= 0xB)
            v167 = 0;
          else
            v167 = (llvm::BasicBlock *)v166;
        }
        v502.i16[4] = 257;
        v168 = sub_1C5EBD70C((llvm *)v162, v167, 0, (uint64_t)v445, v444, (int32x2_t **)v447, (llvm::Twine *)&v500, 0);
        v169 = (_QWORD *)*((_QWORD *)v162 + 5);
        if (v169 == v165)
        {
          v171 = 0;
        }
        else
        {
          if (v169)
            v170 = (uint64_t)(v169 - 3);
          else
            v170 = 0;
          if (*(unsigned __int8 *)(v170 + 16) - 29 >= 0xB)
            v171 = 0;
          else
            v171 = v170;
        }
        sub_1C4773D54((uint64_t)&v500, v171, 0, 0, 0);
        v173 = *(llvm::ConstantInt **)(*(_QWORD *)v504.i64[1] + 1960);
        LODWORD(v496) = *(_DWORD *)(*(_QWORD *)v504.i64[1] + 1968) >> 8;
        if (v496 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v495, 0, 0);
        else
          v495 = 0;
        v174 = llvm::ConstantInt::get(v173, (llvm::LLVMContext *)&v495, v172);
        if (v496 >= 0x41 && v495)
          MEMORY[0x1CAA32F9C](v495, 0x1000C8000313F17);
        v175 = (char *)operator new(0x48uLL);
        *((_DWORD *)v175 + 7) = *((_DWORD *)v175 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v175 = 0;
        *((_QWORD *)v175 + 1) = ***(_QWORD ***)v174 + 1576;
        v176 = (llvm::Value *)(v175 + 8);
        *((_QWORD *)v175 + 2) = 0;
        v175[24] = 31;
        v175[25] = 0;
        *((_WORD *)v175 + 13) = 0;
        *((_DWORD *)v175 + 7) = 0x40000000;
        *((_DWORD *)v175 + 16) = 0;
        *((_OWORD *)v175 + 2) = 0u;
        *((_OWORD *)v175 + 3) = 0u;
        v437 = (void *)v168;
        llvm::SwitchInst::init((uint64_t)(v175 + 8), (uint64_t)v174, v168, 0x16u);
        v499[0] = 257;
        (*(void (**)(uint64_t, char *, void **, uint64_t, uint64_t))(*(_QWORD *)v506 + 16))(v506, v175 + 8, &v495, v503.i64[1], v504.i64[0]);
        if (v501.i32[0])
        {
          v177 = (char *)v500;
          v178 = (char *)v500 + 16 * v501.u32[0];
          v179 = (unsigned __int8 **)(v175 + 56);
          do
          {
            v180 = *(_DWORD *)v177;
            v181 = (unsigned __int8 *)*((_QWORD *)v177 + 1);
            if (v181)
            {
              if (!v180)
              {
                v439 = (unsigned __int8 *)*((_QWORD *)v177 + 1);
                llvm::MetadataTracking::track((uint64_t)&v439, v181, 2);
                v182 = *v179;
                goto LABEL_298;
              }
            }
            else
            {
              v182 = *v179;
              if (!*v179 && (v175[31] & 0x20) == 0)
                goto LABEL_295;
              if (!v180)
              {
                v439 = 0;
LABEL_298:
                if (v182)
                  llvm::MetadataTracking::untrack((uint64_t)(v175 + 56), v182);
                v183 = v439;
                *v179 = v439;
                if (v183)
                  llvm::MetadataTracking::retrack((uint64_t)&v439, v183, (uint64_t)(v175 + 56));
                goto LABEL_295;
              }
            }
            llvm::Value::setMetadata(v176, *(_DWORD *)v177, (llvm::MDNode *)v181);
LABEL_295:
            v177 += 16;
          }
          while (v177 != v178);
        }
        v184 = (_QWORD *)*v165;
        if ((_QWORD *)*v165 == v165)
        {
          v186 = 0;
        }
        else
        {
          if (v184)
            v185 = (uint64_t ***)(v184 - 3);
          else
            v185 = 0;
          if (*((unsigned __int8 *)v185 + 16) - 29 >= 0xB)
            v186 = 0;
          else
            v186 = v185;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v186[5] + 5), v186);
        v187 = v186[3];
        v188 = v186[4];
        *v188 = (uint64_t *)v187;
        v187[1] = (uint64_t *)v188;
        v186[3] = 0;
        v186[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v186);
        if ((_DWORD)v485)
        {
          v191 = (llvm::BasicBlock **)v484;
          v192 = (llvm::BasicBlock **)((char *)v484 + 8 * v485);
          v193 = 1;
          do
          {
            v194 = *v191;
            v495 = &v497;
            v496 = (void *)0x400000000;
            if (*((llvm::BasicBlock **)v194 + 5) == (llvm::BasicBlock *)((char *)v194 + 40))
            {
              v195 = 0;
            }
            else
            {
              v195 = 0;
              v196 = *((_QWORD *)v194 + 6);
              v197 = v196 - 24;
              if (v196)
                v198 = v196 - 24;
              else
                v198 = 0;
              if (v196 && *(_BYTE *)(v198 + 16) == 83)
              {
                v195 = 0;
                do
                {
                  if (v195 >= HIDWORD(v496))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v495, (uint64_t)&v497, v195 + 1, 8);
                    v195 = v496;
                  }
                  *((_QWORD *)v495 + v195) = v197;
                  v195 = (_DWORD)v496 + 1;
                  LODWORD(v496) = (_DWORD)v496 + 1;
                  v199 = *(_QWORD *)(v197 + 32);
                  v197 = v199 - 24;
                  if (v199)
                    v200 = v199 - 24;
                  else
                    v200 = 0;
                }
                while (v199 && *(_BYTE *)(v200 + 16) == 83);
              }
            }
            for (i = (_QWORD *)*((_QWORD *)v194 + 6); i != (_QWORD *)((char *)v194 + 40); i = (_QWORD *)i[1])
            {
              v202 = i - 3;
              if (i)
                v203 = i - 3;
              else
                v203 = 0;
              if (*((_BYTE *)v203 + 16) != 83)
              {
                if (*((_BYTE *)i - 8) == 94)
                {
                  if (v195 < HIDWORD(v496))
                  {
                    *((_QWORD *)v495 + v195++) = v202;
                    LODWORD(v496) = v195;
                    goto LABEL_340;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v495, (uint64_t)&v497, v195 + 1, 8);
                  *((_QWORD *)v495 + v496) = v202;
                  v195 = (_DWORD)v496 + 1;
                  LODWORD(v496) = (_DWORD)v496 + 1;
                }
                break;
              }
            }
            if (!v195)
              goto LABEL_342;
LABEL_340:
            v204 = (char *)v495;
            v205 = (char *)v495 + 8 * v195;
            do
            {
              v206 = *(_QWORD *)v204;
              v204 += 8;
              v207 = llvm::UndefValue::get(*(llvm::UndefValue **)v206, v189);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v206, v207, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v206 + 40) + 40, (uint64_t ***)v206);
              v208 = *(_QWORD *)(v206 + 24);
              v209 = *(_QWORD **)(v206 + 32);
              *v209 = v208;
              *(_QWORD *)(v208 + 8) = v209;
              *(_QWORD *)(v206 + 24) = 0;
              *(_QWORD *)(v206 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v206);
            }
            while (v204 != v205);
LABEL_342:
            v210 = *(llvm::ConstantInt **)(*(_QWORD *)v504.i64[1] + 1960);
            v211 = *(_DWORD *)(*(_QWORD *)v504.i64[1] + 1968);
            v440 = v211 >> 8;
            if (v211 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v439, v193, 0);
            }
            else
            {
              if (v211 <= 0xFF)
                v212 = 0;
              else
                v212 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v211);
              v439 = (unsigned __int8 *)(v212 & v193);
            }
            v213 = llvm::ConstantInt::get(v210, (llvm::LLVMContext *)&v439, v190);
            if (v440 >= 0x41 && v439)
              MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            llvm::SwitchInst::addCase(v176, v213, v194);
            v214 = v468;
            if (v468 >= (unint64_t)HIDWORD(v468))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v467, (uint64_t)v469, v468 + 1, 16);
              v214 = v468;
            }
            v215 = (char **)((char *)v467 + 16 * v214);
            *v215 = v162;
            v215[1] = (char *)((unint64_t)v194 & 0xFFFFFFFFFFFFFFFBLL);
            LODWORD(v468) = v468 + 1;
            if (v495 != &v497)
              free(v495);
            ++v193;
            ++v191;
          }
          while (v191 != v192);
        }
        v216 = v444;
        v217 = *((_DWORD *)v444 + 4);
        v218 = v437;
        if (v217)
        {
          v219 = *(_QWORD *)v444;
          v220 = (v217 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          v221 = *(char **)(*(_QWORD *)v444 + 16 * v220);
          if (v162 != v221)
          {
            v222 = 1;
            while (v221 != (char *)-4096)
            {
              v223 = v220 + v222++;
              v220 = v223 & (v217 - 1);
              v221 = *(char **)(v219 + 16 * v220);
              if (v162 == v221)
                goto LABEL_362;
            }
            goto LABEL_470;
          }
LABEL_362:
          v224 = *(llvm::Loop **)(v219 + 16 * v220 + 8);
          if (!v224)
            goto LABEL_470;
          v225 = v443;
          v226 = v480 == v479 ? (uint64_t *)((char *)&v481 + 4) : &v481;
          v227 = *(unsigned int *)v226;
          if ((_DWORD)v227)
          {
            v228 = 8 * v227;
            v229 = (unint64_t *)v480;
            while (*v229 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v229;
              v228 -= 8;
              if (!v228)
              {
                v230 = 0;
                goto LABEL_403;
              }
            }
          }
          else
          {
            v229 = (unint64_t *)v480;
          }
          v231 = (unint64_t *)((char *)v480 + 8 * v227);
          if (v229 == v231)
          {
            v230 = 0;
          }
          else
          {
            v230 = 0;
            v232 = *v229;
LABEL_374:
            v233 = v217 - 1;
            v234 = ((v232 >> 4) ^ (v232 >> 9)) & (v217 - 1);
            v235 = *(_QWORD *)(v219 + 16 * v234);
            if (v232 == v235)
            {
LABEL_378:
              for (j = *(llvm::Loop **)(v219 + 16 * v234 + 8); j; j = *(llvm::Loop **)j)
              {
                v239 = sub_1C477672C((uint64_t)j + 56, **((_QWORD **)v225 + 4));
                v240 = *((_QWORD *)j + 8);
                if (v240 == *((_QWORD *)j + 7))
                  v241 = 76;
                else
                  v241 = 72;
                if (v239 != (_QWORD *)(v240 + 8 * *(unsigned int *)((char *)j + v241)))
                  break;
              }
            }
            else
            {
              v236 = 1;
              while (v235 != -4096)
              {
                v237 = v234 + v236++;
                v234 = v237 & v233;
                v235 = *(_QWORD *)(v219 + 16 * v234);
                if (v232 == v235)
                  goto LABEL_378;
              }
LABEL_385:
              j = 0;
            }
            if (j == v225)
              j = *(llvm::Loop **)v225;
            if (j)
            {
              if (!v230)
                goto LABEL_395;
              v242 = 0;
              v243 = j;
              do
              {
                v243 = *(llvm::Loop **)v243;
                ++v242;
              }
              while (v243);
              v244 = v230;
              do
              {
                v244 = *(llvm::Loop **)v244;
                LODWORD(v243) = (_DWORD)v243 + 1;
              }
              while (v244);
              if (v242 > v243)
LABEL_395:
                v230 = j;
            }
            v245 = v229 + 1;
            while (v245 != v231)
            {
              v246 = *v245++;
              v232 = v246;
              if (v246 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v219 = *(_QWORD *)v216;
                v217 = *((_DWORD *)v216 + 4);
                v229 = v245 - 1;
                if (v217)
                  goto LABEL_374;
                goto LABEL_385;
              }
            }
          }
          v218 = v437;
LABEL_403:
          if (v230 == v224)
            goto LABEL_470;
          v247 = (int32x2_t *)v444;
          v495 = v218;
          v248 = *(_QWORD *)v444;
          v249 = *((_DWORD *)v444 + 4);
          if (v230)
          {
            if (!v249)
            {
              v258 = 0;
              goto LABEL_419;
            }
            v250 = v249 - 1;
            v251 = (v249 - 1) & ((v218 >> 4) ^ (v218 >> 9));
            v252 = (_QWORD *)(v248 + 16 * v251);
            v253 = (void *)*v252;
            if ((void *)*v252 != v218)
            {
              v254 = 0;
              v255 = 1;
              while (v253 != (void *)-4096)
              {
                if (v254)
                  v256 = 0;
                else
                  v256 = v253 == (void *)-8192;
                if (v256)
                  v254 = v252;
                v257 = v251 + v255++;
                v251 = v257 & v250;
                v252 = (_QWORD *)(v248 + 16 * (v257 & v250));
                v253 = (void *)*v252;
                if ((void *)*v252 == v218)
                  goto LABEL_420;
              }
              if (v254)
                v258 = v254;
              else
                v258 = v252;
LABEL_419:
              v252 = sub_1C4EB6AAC((uint64_t)v444, (uint64_t)&v495, (uint64_t *)&v495, v258);
              *v252 = v495;
              v252[1] = 0;
            }
LABEL_420:
            v252[1] = v230;
          }
          else if (v249)
          {
            v418 = v249 - 1;
            LODWORD(v419) = (v249 - 1) & ((v218 >> 4) ^ (v218 >> 9));
            v420 = (void **)(v248 + 16 * v419);
            v421 = *v420;
            if (v218 == *v420)
            {
LABEL_690:
              *v420 = (void *)-8192;
              v247[1] = vadd_s32(v247[1], (int32x2_t)0x1FFFFFFFFLL);
              v218 = v437;
            }
            else
            {
              v422 = 1;
              v218 = v437;
              while (v421 != (void *)-4096)
              {
                v423 = v419 + v422++;
                v419 = v423 & v418;
                v421 = *(void **)(v248 + 16 * v419);
                if (v437 == v421)
                {
                  v420 = (void **)(v248 + 16 * v419);
                  goto LABEL_690;
                }
              }
            }
          }
          v259 = v224;
          do
          {
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v259, (uint64_t)v218);
            v259 = *(llvm::Loop **)v259;
          }
          while (v259 != v230);
          v260 = v443;
          v261 = (uint64_t *)*((_QWORD *)v443 + 4);
          v262 = (uint64_t *)*((_QWORD *)v443 + 5);
          if (v262 != v261)
          {
            do
            {
              v263 = *v261;
              v264 = v224;
              do
              {
                llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v264, v263);
                v264 = *(llvm::Loop **)v264;
              }
              while (v264 != v230);
              ++v261;
            }
            while (v261 != v262);
            v260 = v443;
          }
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop((uint64_t)v224, (uint64_t)v260);
          if (v230)
          {
            v265 = v443;
            *(_QWORD *)v443 = v230;
            v267 = (llvm::Loop **)*((_QWORD *)v230 + 2);
            v266 = *((_QWORD *)v230 + 3);
            if ((unint64_t)v267 < v266)
            {
              *v267 = v265;
              v268 = v267 + 1;
              goto LABEL_457;
            }
            v274 = (_QWORD *)*((_QWORD *)v230 + 1);
            v275 = v267 - (llvm::Loop **)v274;
            v276 = v275 + 1;
            if (!((unint64_t)(v275 + 1) >> 61))
            {
              v277 = v266 - (_QWORD)v274;
              if (v277 >> 2 > v276)
                v276 = v277 >> 2;
              if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
                v278 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v278 = v276;
              if (!v278)
              {
                v279 = 0;
                goto LABEL_452;
              }
              if (!(v278 >> 61))
              {
                v279 = (char *)operator new(8 * v278);
LABEL_452:
                v286 = (llvm::Loop **)&v279[8 * v275];
                *v286 = v265;
                v268 = v286 + 1;
                if (v267 != v274)
                {
                  do
                  {
                    v287 = *--v267;
                    *--v286 = v287;
                  }
                  while (v267 != v274);
                  v267 = (llvm::Loop **)*((_QWORD *)v230 + 1);
                }
                *((_QWORD *)v230 + 1) = v286;
                *((_QWORD *)v230 + 2) = v268;
                *((_QWORD *)v230 + 3) = &v279[8 * v278];
                if (v267)
                  operator delete(v267);
LABEL_457:
                *((_QWORD *)v230 + 2) = v268;
                do
                {
LABEL_465:
                  v290 = v224;
                  v224 = *(llvm::Loop **)v224;
                }
                while (v224 != v230);
                if (v447)
                  llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)v447, (unint64_t *)v467, v468, (uint64_t)v445, 1);
                else
                  llvm::DomTreeUpdater::applyUpdates((uint64_t)v451, (unint64_t *)v467, v468);
                LODWORD(v468) = 0;
                llvm::formLCSSARecursively(v290, v445, v444, v446, v291);
                goto LABEL_470;
              }
LABEL_683:
              sub_1C4764EE4();
            }
LABEL_682:
            abort();
          }
          v270 = v443;
          v269 = v444;
          v272 = (llvm::Loop **)*((_QWORD *)v444 + 4);
          v271 = *((_QWORD *)v444 + 5);
          if ((unint64_t)v272 >= v271)
          {
            v280 = (_QWORD *)*((_QWORD *)v444 + 3);
            v281 = v272 - (llvm::Loop **)v280;
            v282 = v281 + 1;
            if ((unint64_t)(v281 + 1) >> 61)
              goto LABEL_682;
            v283 = v271 - (_QWORD)v280;
            if (v283 >> 2 > v282)
              v282 = v283 >> 2;
            if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
              v284 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v284 = v282;
            if (v284)
            {
              if (v284 >> 61)
                goto LABEL_683;
              v285 = (char *)operator new(8 * v284);
            }
            else
            {
              v285 = 0;
            }
            v288 = (llvm::Loop **)&v285[8 * v281];
            *v288 = v270;
            v273 = v288 + 1;
            if (v272 != v280)
            {
              do
              {
                v289 = *--v272;
                *--v288 = v289;
              }
              while (v272 != v280);
              v272 = (llvm::Loop **)*((_QWORD *)v269 + 3);
            }
            *((_QWORD *)v269 + 3) = v288;
            *((_QWORD *)v269 + 4) = v273;
            *((_QWORD *)v269 + 5) = &v285[8 * v284];
            if (v272)
              operator delete(v272);
          }
          else
          {
            *v272 = v443;
            v273 = v272 + 1;
          }
          *((_QWORD *)v269 + 4) = v273;
          goto LABEL_465;
        }
LABEL_470:
        if (v447)
        {
          llvm::MemorySSAUpdater::applyUpdates((int32x2_t **)v447, (unint64_t *)v467, v468, (uint64_t)v445, 1);
          LODWORD(v468) = 0;
        }
        LoopPredecessor = (char *)v500;
        if (v500 != &v501.u64[1])
LABEL_692:
          free(LoopPredecessor);
      }
      if ((_DWORD)v493)
      {
        v292 = (uint64_t *)v492;
        v434 = (char *)v492 + 8 * v493;
        while (1)
        {
          v293 = (llvm::BasicBlock *)*v292;
          LoopPredecessor = (char *)sub_1C5B89D14(*v292);
          v294 = LoopPredecessor;
          v495 = v499;
          v496 = v499;
          v497 = 2;
          v498 = 0;
          v295 = (_QWORD **)*((_QWORD *)v293 + 5);
          v436 = v292;
          if (v295 == (_QWORD **)((char *)v293 + 40))
            break;
          if (v295)
            v296 = v295 - 3;
          else
            v296 = 0;
          v297 = *((unsigned __int8 *)v296 + 16);
          v298 = v297 - 29;
          if (v297 == 30)
          {
            if ((*((_DWORD *)v296 + 5) & 0x7FFFFFF) == 3)
              v299 = 2;
            else
              v299 = 1;
          }
          else
          {
            v438 = 0;
            v299 = 2;
            switch(v298)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_495;
              case 1:
                goto LABEL_691;
              case 2:
                v299 = (*((_DWORD *)v296 + 5) >> 1) & 0x3FFFFFF;
                break;
              case 3:
              case 9:
                v299 = (*((_DWORD *)v296 + 5) & 0x7FFFFFF) - 1;
                break;
              case 4:
                goto LABEL_483;
              case 7:
                v299 = *((_WORD *)v296 + 9) & 1;
                break;
              case 8:
                v299 = 1;
                goto LABEL_483;
              case 10:
                v299 = *((_DWORD *)v296 + 20) + 1;
                break;
              default:
                goto LABEL_554;
            }
            if (!v299)
              break;
          }
LABEL_483:
          v300 = 0;
          v301 = 0;
          v438 = 0;
          v302 = v296 - 8;
          v303 = v299;
          do
          {
            v304 = *((unsigned __int8 *)v296 + 16);
            if (v304 != 30)
              __asm { BR              X9 }
            v305 = (uint64_t *)&v296[-4 * v301 - 4];
            v306 = (llvm::BasicBlock *)*v305;
            if ((char *)*v305 == v294)
            {
              ++v438;
            }
            else
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v495, *v305);
              v307 = v293;
              v308 = v443;
              v309 = sub_1C477672C((uint64_t)v443 + 56, (uint64_t)v306);
              v310 = *((_QWORD *)v308 + 8);
              v311 = 72;
              if (v310 == *((_QWORD *)v308 + 7))
                v311 = 76;
              v312 = *(unsigned int *)((char *)v308 + v311);
              v293 = v307;
              llvm::BasicBlock::removePredecessor(v306, v307, v309 == (_QWORD *)(v310 + 8 * v312));
              if (v447)
                llvm::MemorySSAUpdater::removeEdge(v447, v307, v306);
            }
            ++v301;
            v300 += 2;
            v302 += 4;
          }
          while (v303 != v301);
LABEL_495:
          v313 = v443;
          v314 = sub_1C477672C((uint64_t)v443 + 56, (uint64_t)v294);
          v315 = *((_QWORD *)v313 + 8);
          v316 = 72;
          if (v315 == *((_QWORD *)v313 + 7))
            v316 = 76;
          if (v438 >= 2)
          {
            v317 = v314;
            v318 = (_QWORD *)(v315 + 8 * *(unsigned int *)((char *)v313 + v316));
            v319 = v438 - 1;
            do
            {
              llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v294, v293, v317 == v318);
              --v319;
            }
            while (v319);
            if (v447)
              llvm::MemorySSAUpdater::removeDuplicatePhiEdgesBetween(v447, v293, (const llvm::BasicBlock *)v294);
          }
          v320 = 0;
          v321 = **(_QWORD **)v293;
          v500 = &v501.u64[1];
          v501.i64[0] = 0x200000000;
          v504.i64[1] = v321;
          v505 = &v513;
          v506 = (uint64_t)v514;
          v507 = 0;
          v508 = 0;
          v509 = 512;
          v510 = 7;
          v503.i64[1] = 0;
          v504.i64[0] = 0;
          v511 = 0;
          v512 = 0;
          v513 = &unk_1E8167888;
          v514[0] = &unk_1E8167A08;
          v322 = (_QWORD *)*((_QWORD *)v293 + 5);
          if (v322)
            v323 = (uint64_t ***)(v322 - 3);
          else
            v323 = 0;
          if (*((unsigned __int8 *)v323 + 16) - 29 >= 0xB)
            v324 = 0;
          else
            v324 = v323;
          v503.i64[1] = (uint64_t)v324[5];
          v504.i64[0] = (uint64_t)(v324 + 3);
          v325 = (unsigned __int8 *)v324[6];
          v439 = v325;
          if (v325)
          {
            llvm::MetadataTracking::track((uint64_t)&v439, v325, 2);
            v320 = v439;
          }
          sub_1C4774EF4((uint64_t)&v500, 0, (uint64_t)v320);
          if (v439)
            llvm::MetadataTracking::untrack((uint64_t)&v439, v439);
          v326 = (char *)operator new(0x60uLL);
          v327 = v326;
          *((_DWORD *)v326 + 13) = *((_DWORD *)v326 + 13) & 0x38000000 | 1;
          *(_QWORD *)v326 = 0;
          *((_QWORD *)v326 + 2) = 0;
          *((_QWORD *)v326 + 1) = 0;
          *((_QWORD *)v326 + 4) = ***(_QWORD ***)v294 + 1576;
          v328 = (llvm::Value *)(v326 + 32);
          *((_QWORD *)v326 + 3) = v326 + 32;
          *((_QWORD *)v326 + 5) = 0;
          v326[48] = 30;
          v326[49] = 0;
          *((_WORD *)v326 + 25) = 0;
          *((_DWORD *)v326 + 13) = 1;
          *(_OWORD *)(v326 + 56) = 0u;
          *(_OWORD *)(v326 + 72) = 0u;
          *((_DWORD *)v326 + 22) = 0;
          *(_QWORD *)v326 = v294;
          v331 = *((_QWORD *)v294 + 1);
          v330 = v294 + 8;
          v329 = v331;
          *((_QWORD *)v326 + 1) = v331;
          if (v331)
            *(_QWORD *)(v329 + 16) = v326 + 8;
          *((_QWORD *)v326 + 2) = v330;
          *v330 = v326;
          v441 = 257;
          (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v506 + 16))(v506, v328, &v439, v503.i64[1], v504.i64[0]);
          if (v501.i32[0])
          {
            v332 = (char *)v500;
            v333 = (char *)v500 + 16 * v501.u32[0];
            v334 = (unsigned __int8 **)(v327 + 80);
            do
            {
              v335 = *(_DWORD *)v332;
              v336 = (unsigned __int8 *)*((_QWORD *)v332 + 1);
              if (v336)
              {
                if (!v335)
                {
                  v442 = (unsigned __int8 *)*((_QWORD *)v332 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v442, v336, 2);
                  v337 = *v334;
                  if (!*v334)
                  {
LABEL_527:
                    v338 = v442;
                    *v334 = v442;
                    if (v338)
                      llvm::MetadataTracking::retrack((uint64_t)&v442, v338, (uint64_t)(v327 + 80));
                    goto LABEL_524;
                  }
LABEL_521:
                  llvm::MetadataTracking::untrack((uint64_t)(v327 + 80), v337);
                  goto LABEL_527;
                }
              }
              else
              {
                v337 = *v334;
                if (!*v334 && (v327[55] & 0x20) == 0)
                  goto LABEL_524;
                if (!v335)
                {
                  v442 = 0;
                  if (!v337)
                    goto LABEL_527;
                  goto LABEL_521;
                }
              }
              llvm::Value::setMetadata(v328, *(_DWORD *)v332, (llvm::MDNode *)v336);
LABEL_524:
              v332 += 16;
            }
            while (v332 != v333);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v324[5] + 5), v324);
          v339 = v324[3];
          v340 = v324[4];
          *v340 = (uint64_t *)v339;
          v339[1] = (uint64_t *)v340;
          v324[3] = 0;
          v324[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v324);
          if (v496 == v495)
            v341 = (uint64_t *)((char *)&v497 + 4);
          else
            v341 = &v497;
          v342 = *(unsigned int *)v341;
          if ((_DWORD)v342)
          {
            v343 = 8 * v342;
            v344 = (unint64_t *)v496;
            while (*v344 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v344;
              v343 -= 8;
              if (!v343)
                goto LABEL_546;
            }
          }
          else
          {
            v344 = (unint64_t *)v496;
          }
          v345 = (unint64_t *)((char *)v496 + 8 * v342);
          if (v344 != v345)
          {
            v346 = v468;
            v347 = *v344;
LABEL_540:
            if (v346 >= HIDWORD(v468))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v424, (uint64_t)v469, v346 + 1, 16);
              v346 = v468;
            }
            v348 = (llvm::BasicBlock **)((char *)v467 + 16 * v346);
            *v348 = v293;
            v348[1] = (llvm::BasicBlock *)(v347 | 4);
            v346 = v468 + 1;
            LODWORD(v468) = v468 + 1;
            v349 = v344 + 1;
            while (v349 != v345)
            {
              v350 = *v349++;
              v347 = v350;
              if (v350 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v344 = v349 - 1;
                goto LABEL_540;
              }
            }
          }
LABEL_546:
          if (v500 != &v501.u64[1])
            free(v500);
          if (v496 != v495)
            free(v496);
          v292 = v436 + 1;
          if (v436 + 1 == (uint64_t *)v434)
            goto LABEL_559;
        }
LABEL_554:
        v438 = 0;
        goto LABEL_495;
      }
LABEL_559:
      v351 = v477;
      if (!(_DWORD)v477)
      {
        llvm::DomTreeUpdater::applyUpdates((uint64_t)v425, (unint64_t *)v467, v468);
        LODWORD(v468) = 0;
        goto LABEL_610;
      }
      if (v447)
      {
        v500 = (void *)1;
        v501 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v502 = v501;
        v503 = v501;
        v504 = v501;
        v505 = &v507;
        v506 = 0x800000000;
        sub_1C627BE14(&v500, (uint64_t *)v476, (uint64_t *)v476 + v477);
        llvm::MemorySSAUpdater::removeBlocks((uint64_t)v447, (uint64_t)&v500);
        if (v505 != &v507)
          free(v505);
        if ((v500 & 1) == 0)
          MEMORY[0x1CAA32FB4](v501.i64[0], 8);
        v351 = v477;
        v352 = (uint64_t *)v476;
        if ((_DWORD)v477)
          goto LABEL_562;
      }
      else
      {
        v352 = (uint64_t *)v476;
LABEL_562:
        v353 = &v352[v351];
        do
        {
          v354 = (int32x2_t *)v444;
          v355 = *((_DWORD *)v444 + 4);
          if (v355)
          {
            v356 = *v352;
            v357 = *(_QWORD *)v444;
            v358 = v355 - 1;
            v359 = ((*v352 >> 4) ^ (*v352 >> 9)) & (v355 - 1);
            v360 = *(_QWORD *)(*(_QWORD *)v444
                             + 16 * (((*v352 >> 4) ^ (*v352 >> 9)) & v358));
            v361 = ((*v352 >> 4) ^ (*v352 >> 9)) & v358;
            if (*v352 == v360)
            {
LABEL_568:
              v365 = *(_QWORD *)(v357 + 16 * v361 + 8);
              if (v365 && **(_QWORD **)(v365 + 32) == v356)
              {
                if (v356 == v360)
                {
LABEL_574:
                  v368 = *(uint64_t **)(v357 + 16 * v359 + 8);
                }
                else
                {
                  v366 = 1;
                  while (v360 != -4096)
                  {
                    v367 = v359 + v366++;
                    v359 = v367 & v358;
                    v360 = *(_QWORD *)(v357 + 16 * v359);
                    if (v356 == v360)
                      goto LABEL_574;
                  }
                  v368 = 0;
                }
                v369 = (_QWORD *)*v368;
                if (*v368)
                {
                  do
                  {
                    v370 = (uint64_t *)v368[4];
                    v371 = v368[5] - (_QWORD)v370;
                    if (v371)
                    {
                      v372 = 8 * (v371 >> 3);
                      do
                      {
                        v373 = *v370++;
                        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v369, v373);
                        v372 -= 8;
                      }
                      while (v372);
                    }
                    v369 = (_QWORD *)*v369;
                  }
                  while (v369);
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(*v368, (uint64_t)v368);
                  v374 = v444;
                  v376 = (uint64_t **)*((_QWORD *)v444 + 4);
                  v375 = *((_QWORD *)v444 + 5);
                  if ((unint64_t)v376 >= v375)
                  {
                    v378 = (_QWORD *)*((_QWORD *)v444 + 3);
                    v379 = v376 - (uint64_t **)v378;
                    v380 = v379 + 1;
                    if ((unint64_t)(v379 + 1) >> 61)
                      goto LABEL_682;
                    v381 = v375 - (_QWORD)v378;
                    if (v381 >> 2 > v380)
                      v380 = v381 >> 2;
                    if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8)
                      v382 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v382 = v380;
                    if (v382)
                    {
                      if (v382 >> 61)
                        goto LABEL_683;
                      v383 = (char *)operator new(8 * v382);
                    }
                    else
                    {
                      v383 = 0;
                    }
                    v384 = (uint64_t **)&v383[8 * v379];
                    *v384 = v368;
                    v377 = v384 + 1;
                    if (v376 != v378)
                    {
                      do
                      {
                        v385 = *--v376;
                        *--v384 = v385;
                      }
                      while (v376 != v378);
                      v376 = (uint64_t **)*((_QWORD *)v374 + 3);
                    }
                    *((_QWORD *)v374 + 3) = v384;
                    *((_QWORD *)v374 + 4) = v377;
                    *((_QWORD *)v374 + 5) = &v383[8 * v382];
                    if (v376)
                      operator delete(v376);
                  }
                  else
                  {
                    *v376 = v368;
                    v377 = v376 + 1;
                  }
                  *((_QWORD *)v374 + 4) = v377;
                  v354 = (int32x2_t *)v444;
                }
                llvm::LoopInfo::erase(v354, (llvm::Loop *)v368);
              }
            }
            else
            {
              v362 = 1;
              v363 = *(_QWORD *)(*(_QWORD *)v444
                               + 16 * (((*v352 >> 4) ^ (*v352 >> 9)) & v358));
              LODWORD(v361) = ((*v352 >> 4) ^ (*v352 >> 9)) & v358;
              while (v363 != -4096)
              {
                v364 = v361 + v362++;
                v361 = v364 & v358;
                v363 = *(_QWORD *)(v357 + 16 * v361);
                if (v356 == v363)
                  goto LABEL_568;
              }
            }
          }
          ++v352;
        }
        while (v352 != v353);
        v352 = (uint64_t *)v476;
        LODWORD(v351) = v477;
        if ((_DWORD)v477)
        {
          v386 = 8 * v477;
          do
          {
            v387 = *v352++;
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock((int32x2_t *)v444, v387);
            v386 -= 8;
          }
          while (v386);
          v352 = (uint64_t *)v476;
          LODWORD(v351) = v477;
        }
      }
      v20 = 1;
      llvm::detachDeadBlocks(v352, (llvm::Type *)v351, (uint64_t)v424, 1);
      llvm::DomTreeUpdater::applyUpdates((uint64_t)v425, (unint64_t *)v467, v468);
      LODWORD(v468) = 0;
      if ((_DWORD)v477)
      {
        v388 = (llvm::BasicBlock **)v476;
        v389 = 8 * v477;
        do
        {
          v390 = *v388++;
          llvm::DomTreeUpdater::deleteBB(v425, v390);
          v389 -= 8;
        }
        while (v389);
LABEL_610:
        v20 = 1;
      }
    }
    else
    {
      v20 = 0;
    }
  }
  if (HIBYTE(v470))
    v391 = v20;
  else
    v391 = 0;
  *a6 = v391;
  if (v492 != v494)
    free(v492);
  if (v488 != v487)
    free(v488);
  if (v484 != v486)
    free(v484);
  if (v480 != v479)
    free(v480);
  if (v476 != v478)
    free(v476);
  if (v472 != v471)
    free(v472);
  if (v467 != v469)
    free(v467);
  llvm::DomTreeUpdater::flush(v425);
  v500 = v465;
  sub_1C50B10F0((void ***)&v500);
  if (v461 != v460)
    free(v461);
  if (v451[0] != v452)
    free(v451[0]);
  if (__p)
  {
    v450 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v448[1], 8);
LABEL_635:
  if (*a6)
    return 1;
  v443 = (llvm::Loop *)&v445;
  v444 = (llvm::LoopInfo *)0x1000000000;
  v452[21] = 0;
  v452[20] = 0;
  v452[22] = a2;
  v452[23] = 0;
  v453 = 0;
  v454 = v458;
  v455 = v458;
  v456 = 8;
  v457 = 0;
  v462 = 0;
  v460 = 0;
  v461 = 0;
  LOWORD(v463) = 0;
  v392 = (char *)*((_QWORD *)a1 + 4);
  v393 = (char *)*((_QWORD *)a1 + 5);
  v394 = v393 - v392;
  v395 = &v501.i8[8];
  v500 = &v501.u64[1];
  v501.i64[0] = 0x1000000000;
  if ((unint64_t)(v393 - v392) >= 0x81)
  {
    sub_1C5087ED8((unsigned int *)&v500, (v393 - v392) >> 3);
    v396 = v501.i32[0];
    v395 = (char *)v500;
    v397 = v501.i32[0];
  }
  else
  {
    v396 = 0;
    v397 = 0;
  }
  if (v393 != v392)
  {
    v398 = (llvm::ValueHandleBase *)&v395[24 * v396];
    v399 = 8 * ((v393 - v392) >> 3);
    do
    {
      v400 = *(_QWORD *)v392;
      *(_QWORD *)v398 = 6;
      *((_QWORD *)v398 + 1) = 0;
      *((_QWORD *)v398 + 2) = v400;
      if (v400 != -8192 && v400 != -4096 && v400 != 0)
        llvm::ValueHandleBase::AddToUseList(v398);
      v392 += 8;
      v398 = (llvm::ValueHandleBase *)((char *)v398 + 24);
      v399 -= 8;
    }
    while (v399);
    v397 = v501.i32[0];
    v395 = (char *)v500;
  }
  v402 = v397 + (v394 >> 3);
  v501.i32[0] = v402;
  v403 = 0;
  if (v402)
  {
    v404 = &v395[24 * v402];
    do
    {
      v405 = *((_QWORD *)v395 + 2);
      if (v405)
      {
        SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v395 + 2));
        if (SinglePredecessor)
        {
          v407 = SinglePredecessor;
          if (llvm::BasicBlock::getSingleSuccessor(SinglePredecessor))
          {
            v408 = *((_DWORD *)a3 + 4);
            if (v408)
            {
              v409 = *(_QWORD *)a3;
              v410 = v408 - 1;
              v411 = (v408 - 1) & ((v407 >> 4) ^ (v407 >> 9));
              v412 = *(llvm::BasicBlock **)(*(_QWORD *)a3 + 16 * v411);
              if (v407 == v412)
              {
LABEL_658:
                if (*(llvm::Loop **)(v409 + 16 * v411 + 8) == a1)
                {
                  llvm::MergeBlockIntoPredecessor(v405, (llvm::BasicBlock *)&v443, (int32x2_t *)a3, a5, 0, 0);
                  v403 = 1;
                }
              }
              else
              {
                v413 = 1;
                while (v412 != (llvm::BasicBlock *)-4096)
                {
                  v414 = v411 + v413++;
                  v411 = v414 & v410;
                  v412 = *(llvm::BasicBlock **)(v409 + 16 * v411);
                  if (v407 == v412)
                    goto LABEL_658;
                }
              }
            }
          }
        }
      }
      v395 += 24;
    }
    while (v395 != v404);
  }
  sub_1C50880D4((char **)&v500);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v443);
  v500 = &v460;
  sub_1C50B10F0((void ***)&v500);
  if (v455 != v454)
    free(v455);
  if (v443 != (llvm::Loop *)&v445)
    free(v443);
  if (((v20 | v403) & 1) != 0)
  {
    v415 = a1;
    do
    {
      v416 = v415;
      v415 = *(const llvm::Loop **)v415;
    }
    while (v415);
    llvm::ScalarEvolution::forgetLoop((int32x2_t *)a4, v416);
    return 1;
  }
  return 0;
}

uint64_t sub_1C5B89BB0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeLoopPassPass(a1, a2);
  llvm::initializeMemorySSAWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Simplify loop CFG";
  *(_QWORD *)(v4 + 8) = 17;
  *(_QWORD *)(v4 + 16) = "loop-simplifycfg";
  *(_QWORD *)(v4 + 24) = 16;
  *(_QWORD *)(v4 + 32) = &unk_1ED81FF18;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C5B89EB8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5B89C4C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81FF18;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195CF0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81FF20);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B89BB0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81FF20, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B89D14(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  llvm::APInt *v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == a1 + 40)
    return 0;
  v2 = v1 == 0;
  if (v1)
    v3 = v1 - 24;
  else
    v3 = 0;
  v4 = *(unsigned __int8 *)(v3 + 16) - 40;
  v5 = __CFADD__(v4, 11);
  if (v4 < 0xFFFFFFF5)
    v3 = 0;
  v6 = *(unsigned __int8 *)(v3 + 16);
  if (!v5)
    v2 = 1;
  if (v6 == 30 && !v2)
  {
    if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) != 1)
    {
      v7 = *(_QWORD *)(v3 - 32);
      v8 = *(_QWORD *)(v3 - 64);
      if (v7 != v8)
      {
        v9 = *(_QWORD *)(v3 - 96);
        if (v9)
          v10 = *(_BYTE *)(v9 + 16) == 16;
        else
          v10 = 0;
        if (!v10)
          return 0;
        v11 = (llvm::APInt *)(v9 + 24);
        v12 = *(_DWORD *)(v9 + 32);
        if (v12 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v11) == v12)
            return v8;
        }
        else if (!*(_QWORD *)v11)
        {
          return v8;
        }
      }
      return v7;
    }
    return 0;
  }
  v13 = v6 != 31 || v2;
  if ((v13 & 1) != 0)
    return 0;
  v14 = *(_DWORD *)(v3 + 20);
  v15 = (v14 & 0x40000000) != 0 ? *(uint64_t **)(v3 - 8) : (uint64_t *)(v3 - 32 * (v14 & 0x7FFFFFF));
  v16 = *v15;
  v17 = *(unsigned __int8 *)(*v15 + 16);
  if (!v16 || v17 != 16)
    return 0;
  v20 = (v14 >> 1) & 0x3FFFFFF;
  v21 = (v20 - 1);
  if (v20 == 1)
  {
LABEL_41:
    if ((v14 & 0x40000000) != 0)
      v25 = *(_QWORD *)(v3 - 8);
    else
      v25 = v3 - 32 * (v14 & 0x7FFFFFF);
    return *(_QWORD *)(v25 + 32);
  }
  v22 = 0;
  v23 = v3 - 32 * (v14 & 0x7FFFFFF);
  v24 = 2 * v21;
  while ((v14 & 0x40000000) == 0)
  {
    if (*(_QWORD *)(v23 + 32 * (((_DWORD)v22 + 2) & 0xFFFFFFFE)) == v16)
      goto LABEL_48;
LABEL_40:
    v22 += 2;
    if (v24 == v22)
      goto LABEL_41;
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 32 * (((_DWORD)v22 + 2) & 0xFFFFFFFE)) != v16)
    goto LABEL_40;
  v23 = *(_QWORD *)(v3 - 8);
LABEL_48:
  v26 = (v22 + 3);
  if (v22 == 0x1FFFFFFFCLL)
    v26 = 1;
  return *(_QWORD *)(v23 + 32 * v26);
}

uint64_t sub_1C5B89EB8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B89C4C(v0);
}

void sub_1C5B89EE4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5B89F08(uint64_t a1, llvm *a2)
{
  uint64_t v3;
  llvm::AnalysisUsage *v4;

  v3 = (uint64_t)a2 + 112;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v3, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v4);
}

uint64_t sub_1C5B89F54(llvm::LoopPass *a1, const llvm::Loop *a2, llvm::LPPassManager *a3)
{
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  llvm::Loop *v15;
  llvm::LoopInfo *v16;
  llvm::ScalarEvolution *v17;
  uint64_t AnalysisPass;
  uint64_t v19;
  llvm::MemorySSAUpdater *v20;
  uint64_t v22;
  char *v23[2];
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _BYTE v32[64];
  _QWORD *v33;
  _QWORD v34[2];
  uint64_t v35;
  char *v36[2];
  uint64_t v37;
  _BYTE *v38;
  void *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[64];
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  _QWORD **v46;
  _QWORD *v47[2];
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::DominatorTreeWrapperPass::ID);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::LoopInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::LoopInfoWrapperPass::ID);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::ScalarEvolutionWrapperPass::ID);
  v15 = (llvm::Loop *)(v9 + 32);
  v16 = (llvm::LoopInfo *)(v12 + 32);
  v17 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v19 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID);
    LOBYTE(v35) = 0;
    v48 = 0;
    if (v19)
    {
      v22 = *(_QWORD *)(v19 + 32);
      v23[0] = (char *)&v24;
      v23[1] = (char *)0x1000000000;
      v25 = v29;
      v26 = v29;
      v30 = v32;
      v31 = 0x800000000;
      v34[1] = 0;
      v34[0] = 0;
      v33 = v34;
      v35 = v22;
      v36[0] = (char *)&v37;
      v36[1] = (char *)0x1000000000;
      v38 = v42;
      v39 = v42;
      v40 = 8;
      v41 = 0;
      v27 = 8;
      v28 = 0;
      v43 = v45;
      v44 = 0x800000000;
      v47[1] = 0;
      v47[0] = 0;
      v46 = v47;
      v48 = 1;
      sub_1C61247C0((uint64_t)&v33, 0);
      if (v30 != v32)
        free(v30);
      if (v26 != v25)
        free(v26);
      sub_1C4EE41F8(v23);
      if (v48)
        v20 = (llvm::MemorySSAUpdater *)&v35;
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    LOBYTE(v35) = 0;
    v48 = 0;
  }
  LOBYTE(v22) = 0;
  v6 = sub_1C5B872F8(a2, v15, v16, v17, v20, &v22);
  if ((_BYTE)v22)
    llvm::LPPassManager::markLoopAsDeleted(a3, a2);
  if (v48)
  {
    sub_1C61247C0((uint64_t)&v46, v47[0]);
    if (v43 != v45)
      free(v43);
    if (v39 != v38)
      free(v39);
    sub_1C4EE41F8(v36);
    v48 = 0;
  }
  return v6;
}

uint64_t sub_1C5B8A258()
{
  char v1;
  char *v2;

  v1 = 1;
  v2 = &v1;
  sub_1C631C69C(&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED81FE58, &dword_1C475E000);
}

llvm::raw_ostream *sub_1C5B8A2A4(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int32 v7;
  int8x8_t *v8;
  uint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  llvm *v13;
  _BYTE *v14;
  llvm::raw_ostream *result;
  _BYTE *v16;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 61;
    *(_QWORD *)v4 = *(_QWORD *)"[NumUses=";
    *((_QWORD *)v2 + 4) += 9;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v2, "[NumUses=", 9uLL);
  }
  v5 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)((v5 >> 1) & ~(-1 << (v5 >> 58))));
    v12.i16[0] = vaddlv_u8(v12);
    v7 = v12.i32[0];
  }
  else
  {
    v6 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(int8x8_t **)v5;
      v9 = 8 * v6;
      do
      {
        v10 = *v8++;
        v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        v7 += v11.i32[0];
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      v7 = 0;
    }
  }
  v13 = sub_1C5E21910(v3, v7, 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v3 + 3))
  {
    v13 = llvm::raw_ostream::write(v3, 93);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v14 + 1;
    *v14 = 93;
  }
  result = (llvm::raw_ostream *)llvm::errs(v13);
  v16 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v16 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v16 + 1;
  *v16 = 10;
  return result;
}

llvm::raw_ostream *sub_1C5B8A3F4(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_1C5B8A450((uint64_t)a1, v2);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

void sub_1C5B8A450(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  llvm::Value *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  llvm::raw_ostream *v17;
  size_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _DWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a2;
  v4 = *(llvm::Value **)a1;
  if (v4)
  {
    llvm::Value::printAsOperand(v4, a2, 0, 0);
    v5 = (unint64_t *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      v29 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v29) > 2)
      {
        *(_BYTE *)(v29 + 2) = 32;
        *(_WORD *)v29 = 11040;
        *((_QWORD *)v2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v2, " + ", 3uLL);
      }
      goto LABEL_3;
    }
  }
  else
  {
    v5 = (unint64_t *)(a1 + 8);
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_3:
      llvm::raw_ostream::operator<<(v2, *v5);
      LOBYTE(v6) = 0;
      goto LABEL_5;
    }
    LOBYTE(v6) = 1;
  }
LABEL_5:
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = *(uint64_t **)(a1 + 32);
    do
    {
      v10 = *v9;
      v11 = *((_QWORD *)v2 + 4);
      if ((v6 & 1) == 0)
      {
        if ((unint64_t)(*((_QWORD *)v2 + 3) - v11) > 2)
        {
          *(_BYTE *)(v11 + 2) = 32;
          *(_WORD *)v11 = 11040;
          v11 = *((_QWORD *)v2 + 4) + 3;
          *((_QWORD *)v2 + 4) = v11;
        }
        else
        {
          llvm::raw_ostream::write(v2, " + ", 3uLL);
          v11 = *((_QWORD *)v2 + 4);
        }
      }
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v11) > 3)
      {
        *(_DWORD *)v11 = 677864818;
        *((_QWORD *)v2 + 4) += 4;
        v12 = v2;
      }
      else
      {
        v12 = llvm::raw_ostream::write(v2, "reg(", 4uLL);
      }
      llvm::SCEV::print(v10);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 41);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 41;
      }
      LOBYTE(v6) = 0;
      ++v9;
      v8 -= 8;
    }
    while (v8);
    LOBYTE(v6) = 0;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    if ((_DWORD)v7)
      goto LABEL_33;
    if ((v6 & 1) == 0)
    {
      v14 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v14) > 2)
      {
        *(_BYTE *)(v14 + 2) = 32;
        *(_WORD *)v14 = 11040;
        *((_QWORD *)v2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v2, " + ", 3uLL);
      }
    }
    v15 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v15 <= 0x14uLL)
    {
      v16 = "**error: HasBaseReg**";
      v17 = v2;
      v18 = 21;
LABEL_32:
      llvm::raw_ostream::write(v17, v16, v18);
      LOBYTE(v6) = 0;
      goto LABEL_33;
    }
    LOBYTE(v6) = 0;
    qmemcpy(v15, "**error: HasBaseReg**", 21);
    v30 = *((_QWORD *)v2 + 4) + 21;
  }
  else
  {
    if (!(_DWORD)v7)
      goto LABEL_33;
    if ((v6 & 1) == 0)
    {
      v19 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v19) > 2)
      {
        *(_BYTE *)(v19 + 2) = 32;
        *(_WORD *)v19 = 11040;
        *((_QWORD *)v2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v2, " + ", 3uLL);
      }
    }
    v20 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v20 <= 0x15uLL)
    {
      v16 = "**error: !HasBaseReg**";
      v17 = v2;
      v18 = 22;
      goto LABEL_32;
    }
    LOBYTE(v6) = 0;
    qmemcpy(v20, "**error: !HasBaseReg**", 22);
    v30 = *((_QWORD *)v2 + 4) + 22;
  }
  *((_QWORD *)v2 + 4) = v30;
LABEL_33:
  if (*(_QWORD *)(a1 + 24))
  {
    if ((v6 & 1) == 0)
    {
      v21 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v21) > 2)
      {
        *(_BYTE *)(v21 + 2) = 32;
        *(_WORD *)v21 = 11040;
        *((_QWORD *)v2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v2, " + ", 3uLL);
      }
    }
    llvm::raw_ostream::operator<<(v2, *(_QWORD *)(a1 + 24));
    v22 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v22) > 4)
    {
      *(_BYTE *)(v22 + 4) = 40;
      *(_DWORD *)v22 = 1734701610;
      *((_QWORD *)v2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v2, "*reg(", 5uLL);
    }
    v23 = *(_QWORD *)(a1 + 80);
    if (v23)
    {
      llvm::SCEV::print(v23);
    }
    else
    {
      v24 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v24) > 8)
      {
        *(_BYTE *)(v24 + 8) = 62;
        *(_QWORD *)v24 = *(_QWORD *)"<unknown>";
        *((_QWORD *)v2 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v2, "<unknown>", 9uLL);
      }
    }
    v25 = (_BYTE *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, 41);
      LOBYTE(v6) = 0;
    }
    else
    {
      LOBYTE(v6) = 0;
      *((_QWORD *)v2 + 4) = v25 + 1;
      *v25 = 41;
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    if ((v6 & 1) == 0)
    {
      v26 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v26) > 2)
      {
        *(_BYTE *)(v26 + 2) = 32;
        *(_WORD *)v26 = 11040;
        *((_QWORD *)v2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v2, " + ", 3uLL);
      }
    }
    v27 = (_DWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v27 > 3uLL)
    {
      *v27 = 678260073;
      *((_QWORD *)v2 + 4) += 4;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v2, "imm(", 4uLL);
    }
    llvm::raw_ostream::operator<<(v2, *(_QWORD *)(a1 + 88));
    v28 = (_BYTE *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, 41);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v28 + 1;
      *v28 = 41;
    }
  }
}

llvm::raw_ostream *sub_1C5B8A980(unsigned int *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  void *v6;
  unsigned int v7;
  const char *v8;
  size_t v9;
  _DWORD *v10;
  llvm::raw_ostream *v11;
  void *v12;
  unsigned int v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _DWORD *v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  const char *v23;
  _DWORD *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  const char *v29;
  _DWORD *v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  _DWORD *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  llvm::raw_ostream *result;
  _BYTE *v39;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  if (byte_1ED820078)
  {
    sub_1C5E21910(v2, a1[6], 0, 0, 0);
    v4 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v4) > 0xB)
    {
      *(_DWORD *)(v4 + 8) = 1852795252;
      *(_QWORD *)v4 = *(_QWORD *)" instruction";
      v6 = (void *)(*((_QWORD *)v3 + 4) + 12);
      *((_QWORD *)v3 + 4) = v6;
      v5 = v3;
    }
    else
    {
      v5 = llvm::raw_ostream::write(v3, " instruction", 0xCuLL);
      v6 = (void *)*((_QWORD *)v5 + 4);
    }
    v7 = a1[6];
    if (v7 == 1)
      v8 = " ";
    else
      v8 = "s ";
    if (v7 == 1)
      v9 = 1;
    else
      v9 = 2;
    if (v9 <= *((_QWORD *)v5 + 3) - (_QWORD)v6)
    {
      memcpy(v6, v8, v9);
      *((_QWORD *)v5 + 4) += v9;
    }
    else
    {
      llvm::raw_ostream::write(v5, v8, v9);
    }
  }
  sub_1C5E21910(v3, a1[7], 0, 0, 0);
  v10 = (_DWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 1734701600;
    v12 = (void *)(*((_QWORD *)v3 + 4) + 4);
    *((_QWORD *)v3 + 4) = v12;
    v11 = v3;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v3, " reg", 4uLL);
    v12 = (void *)*((_QWORD *)v11 + 4);
  }
  v13 = a1[7];
  v14 = v13 != 1;
  if (*((_QWORD *)v11 + 3) - (_QWORD)v12 >= v14)
  {
    if (v13 != 1)
    {
      v12 = memcpy(v12, "s", v13 != 1);
      *((_QWORD *)v11 + 4) += v14;
    }
  }
  else
  {
    if (v13 == 1)
      v15 = "";
    else
      v15 = "s";
    v12 = llvm::raw_ostream::write(v11, v15, v13 != 1);
  }
  if (a1[8])
  {
    v16 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v16) > 0x12)
    {
      *(_DWORD *)(v16 + 15) = 544502639;
      *(_OWORD *)v16 = *(_OWORD *)", with addrec cost ";
      *((_QWORD *)v3 + 4) += 19;
      v17 = v3;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v3, ", with addrec cost ", 0x13uLL);
    }
    v12 = sub_1C5E21910(v17, a1[8], 0, 0, 0);
  }
  if (a1[9])
  {
    v18 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v18 > 6uLL)
    {
      *(_DWORD *)((char *)v18 + 3) = 544437612;
      *v18 = 1819287596;
      *((_QWORD *)v3 + 4) += 7;
      v19 = v3;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v3, ", plus ", 7uLL);
    }
    sub_1C5E21910(v19, a1[9], 0, 0, 0);
    v20 = (_DWORD *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 6uLL)
    {
      *(_DWORD *)((char *)v20 + 3) = 1819634976;
      *v20 = 542525728;
      v12 = (void *)(*((_QWORD *)v19 + 4) + 7);
      *((_QWORD *)v19 + 4) = v12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, " IV mul", 7uLL);
      v12 = (void *)*((_QWORD *)v19 + 4);
    }
    v21 = a1[9];
    v22 = v21 != 1;
    if (*((_QWORD *)v19 + 3) - (_QWORD)v12 >= v22)
    {
      if (v21 != 1)
      {
        v12 = memcpy(v12, "s", v21 != 1);
        *((_QWORD *)v19 + 4) += v22;
      }
    }
    else
    {
      if (v21 == 1)
        v23 = "";
      else
        v23 = "s";
      v12 = llvm::raw_ostream::write(v19, v23, v21 != 1);
    }
  }
  if (a1[10])
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v24 > 6uLL)
    {
      *(_DWORD *)((char *)v24 + 3) = 544437612;
      *v24 = 1819287596;
      *((_QWORD *)v3 + 4) += 7;
      v25 = v3;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v3, ", plus ", 7uLL);
    }
    sub_1C5E21910(v25, a1[10], 0, 0, 0);
    v26 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 8)
    {
      *(_BYTE *)(v26 + 8) = 100;
      *(_QWORD *)v26 = *(_QWORD *)" base add";
      v12 = (void *)(*((_QWORD *)v25 + 4) + 9);
      *((_QWORD *)v25 + 4) = v12;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v25, " base add", 9uLL);
      v12 = (void *)*((_QWORD *)v25 + 4);
    }
    v27 = a1[10];
    v28 = v27 != 1;
    if (*((_QWORD *)v25 + 3) - (_QWORD)v12 >= v28)
    {
      if (v27 != 1)
      {
        v12 = memcpy(v12, "s", v27 != 1);
        *((_QWORD *)v25 + 4) += v28;
      }
    }
    else
    {
      if (v27 == 1)
        v29 = "";
      else
        v29 = "s";
      v12 = llvm::raw_ostream::write(v25, v29, v27 != 1);
    }
  }
  if (a1[13])
  {
    v30 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v30 > 6uLL)
    {
      *(_DWORD *)((char *)v30 + 3) = 544437612;
      *v30 = 1819287596;
      *((_QWORD *)v3 + 4) += 7;
      v31 = v3;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v3, ", plus ", 7uLL);
    }
    v12 = sub_1C5E21910(v31, a1[13], 0, 0, 0);
    v32 = *((_QWORD *)v31 + 4);
    if ((unint64_t)(*((_QWORD *)v31 + 3) - v32) > 0xA)
    {
      *(_DWORD *)(v32 + 7) = 1953722211;
      *(_QWORD *)v32 = *(_QWORD *)" scale cost";
      *((_QWORD *)v31 + 4) += 11;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v31, " scale cost", 0xBuLL);
    }
  }
  if (a1[11])
  {
    v33 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v33 > 6uLL)
    {
      *(_DWORD *)((char *)v33 + 3) = 544437612;
      *v33 = 1819287596;
      *((_QWORD *)v3 + 4) += 7;
      v34 = v3;
    }
    else
    {
      v34 = llvm::raw_ostream::write(v3, ", plus ", 7uLL);
    }
    v12 = sub_1C5E21910(v34, a1[11], 0, 0, 0);
    v35 = *((_QWORD *)v34 + 4);
    if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 8)
    {
      *(_BYTE *)(v35 + 8) = 116;
      *(_QWORD *)v35 = *(_QWORD *)" imm cost";
      *((_QWORD *)v34 + 4) += 9;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v34, " imm cost", 9uLL);
    }
  }
  if (a1[12])
  {
    v36 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v36 > 6uLL)
    {
      *(_DWORD *)((char *)v36 + 3) = 544437612;
      *v36 = 1819287596;
      *((_QWORD *)v3 + 4) += 7;
    }
    else
    {
      v3 = llvm::raw_ostream::write(v3, ", plus ", 7uLL);
    }
    v12 = sub_1C5E21910(v3, a1[12], 0, 0, 0);
    v37 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v37) > 0xA)
    {
      *(_DWORD *)(v37 + 7) = 1953722211;
      *(_QWORD *)v37 = *(_QWORD *)" setup cost";
      *((_QWORD *)v3 + 4) += 11;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v3, " setup cost", 0xBuLL);
    }
  }
  result = (llvm::raw_ostream *)llvm::errs((llvm *)v12);
  v39 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v39 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v39 + 1;
  *v39 = 10;
  return result;
}

llvm::raw_ostream *sub_1C5B8B094(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = sub_1C5B8B0F0((llvm::Value **)a1, v2);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *sub_1C5B8B0F0(llvm::Value **a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  llvm::Value *v5;
  int v6;
  uint64_t v7;
  llvm::Value *v8;
  const char *OpcodeName;
  size_t v10;
  void *v11;
  void *v12;
  llvm::raw_ostream *result;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;

  v2 = this;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 61;
    *(_QWORD *)v4 = *(_QWORD *)"UserInst=";
    *((_QWORD *)this + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(this, "UserInst=", 9uLL);
  }
  v5 = *a1;
  v6 = *((unsigned __int8 *)*a1 + 16);
  if (*a1 && v6 == 61)
  {
    v7 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v7) > 5)
    {
      *(_WORD *)(v7 + 4) = 8293;
      *(_DWORD *)v7 = 1919906931;
      *((_QWORD *)v2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v2, "store ", 6uLL);
    }
    v8 = (llvm::Value *)*((_QWORD *)v5 - 8);
    goto LABEL_12;
  }
  if (*(_BYTE *)(*(_QWORD *)v5 + 8) != 7)
  {
    v8 = *a1;
LABEL_12:
    llvm::Value::printAsOperand(v8, v2, 0, 0);
    goto LABEL_13;
  }
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(v6 - 28));
  v10 = strlen(OpcodeName);
  v11 = (void *)*((_QWORD *)v2 + 4);
  if (v10 <= *((_QWORD *)v2 + 3) - (_QWORD)v11)
  {
    if (v10)
    {
      memcpy(v11, OpcodeName, v10);
      *((_QWORD *)v2 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v2, OpcodeName, v10);
  }
LABEL_13:
  v12 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v12 > 0x15uLL)
  {
    qmemcpy(v12, ", OperandValToReplace=", 22);
    *((_QWORD *)v2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", OperandValToReplace=", 0x16uLL);
  }
  result = (llvm::raw_ostream *)llvm::Value::printAsOperand(a1[1], v2, 0, 0);
  v14 = a1[3];
  v15 = 32;
  if (v14 == a1[2])
    v15 = 36;
  v16 = *(unsigned int *)((char *)a1 + v15);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    v18 = (unint64_t *)a1[3];
    while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v18;
      v17 -= 8;
      if (!v17)
        goto LABEL_32;
    }
  }
  else
  {
    v18 = (unint64_t *)a1[3];
  }
  v19 = (unint64_t *)((char *)v14 + 8 * v16);
  if (v18 != v19)
  {
    v20 = *v18;
LABEL_25:
    v21 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v21 > 0xDuLL)
    {
      qmemcpy(v21, ", PostIncLoop=", 14);
      *((_QWORD *)v2 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v2, ", PostIncLoop=", 0xEuLL);
    }
    result = (llvm::raw_ostream *)llvm::Value::printAsOperand(**(llvm::Value ***)(v20 + 32), v2, 0, 0);
    v22 = v18 + 1;
    while (v22 != v19)
    {
      v23 = *v22++;
      v20 = v23;
      if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v18 = v22 - 1;
        goto LABEL_25;
      }
    }
  }
LABEL_32:
  if (a1[8])
  {
    v24 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v24) > 8)
    {
      *(_BYTE *)(v24 + 8) = 61;
      *(_QWORD *)v24 = *(_QWORD *)", Offset=";
      *((_QWORD *)v2 + 4) += 9;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v2, ", Offset=", 9uLL);
    }
    return llvm::raw_ostream::operator<<(v2, (unint64_t)a1[8]);
  }
  return result;
}

llvm::raw_ostream *sub_1C5B8B3F4(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = sub_1C5B8B450(a1, v2);
  result = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

llvm::raw_ostream *sub_1C5B8B450(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  llvm::raw_ostream *v7;
  size_t v8;
  _DWORD *v9;
  uint64_t v10;
  llvm::Type *v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t *v18;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  void *v22;
  void *v23;
  void *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  uint64_t v27;

  v2 = this;
  v3 = (uint64_t)result;
  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0xDuLL)
  {
    qmemcpy(v4, "LSR Use: Kind=", 14);
    *((_QWORD *)this + 4) += 14;
  }
  else
  {
    result = llvm::raw_ostream::write(this, "LSR Use: Kind=", 0xEuLL);
  }
  switch(*(_DWORD *)(v3 + 24))
  {
    case 0:
      v5 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v5) <= 4)
      {
        v6 = "Basic";
        v7 = v2;
        v8 = 5;
        goto LABEL_15;
      }
      *(_BYTE *)(v5 + 4) = 99;
      *(_DWORD *)v5 = 1769169218;
      v27 = *((_QWORD *)v2 + 4) + 5;
      goto LABEL_50;
    case 1:
      v9 = (_DWORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v9 <= 6uLL)
      {
        v6 = "Special";
        v7 = v2;
        v8 = 7;
        goto LABEL_15;
      }
      *(_DWORD *)((char *)v9 + 3) = 1818323299;
      *v9 = 1667592275;
      v27 = *((_QWORD *)v2 + 4) + 7;
      goto LABEL_50;
    case 2:
      v10 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v10) > 0xA)
      {
        *(_DWORD *)(v10 + 7) = 543584032;
        *(_QWORD *)v10 = *(_QWORD *)"Address of ";
        *((_QWORD *)v2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Address of ", 0xBuLL);
      }
      v11 = *(llvm::Type **)(v3 + 32);
      if (*((_BYTE *)v11 + 8) == 15)
      {
        v12 = (_DWORD *)*((_QWORD *)v2 + 4);
        if (*((_QWORD *)v2 + 3) - (_QWORD)v12 > 6uLL)
        {
          *(_DWORD *)((char *)v12 + 3) = 1919251566;
          *v12 = 1852403568;
          *((_QWORD *)v2 + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(v2, "pointer", 7uLL);
        }
      }
      else
      {
        llvm::Type::print(v11, v2, 0, 0);
      }
      v24 = (void *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v24 > 0xDuLL)
      {
        qmemcpy(v24, " in addrspace(", 14);
        *((_QWORD *)v2 + 4) += 14;
        v25 = v2;
      }
      else
      {
        v25 = llvm::raw_ostream::write(v2, " in addrspace(", 0xEuLL);
      }
      result = sub_1C5E21910(v25, *(unsigned int *)(v3 + 40), 0, 0, 0);
      v26 = (_BYTE *)*((_QWORD *)v25 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
      {
        result = llvm::raw_ostream::write(v25, 41);
      }
      else
      {
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 41;
      }
      goto LABEL_16;
    case 3:
      v13 = (_QWORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v13 > 7uLL)
      {
        *v13 = 0x6F72655A706D4349;
        v27 = *((_QWORD *)v2 + 4) + 8;
LABEL_50:
        *((_QWORD *)v2 + 4) = v27;
      }
      else
      {
        v6 = "ICmpZero";
        v7 = v2;
        v8 = 8;
LABEL_15:
        result = llvm::raw_ostream::write(v7, v6, v8);
      }
LABEL_16:
      v14 = *((_QWORD *)v2 + 4);
      if ((unint64_t)(*((_QWORD *)v2 + 3) - v14) > 0xA)
      {
        *(_DWORD *)(v14 + 7) = 2067624820;
        *(_QWORD *)v14 = *(_QWORD *)", Offsets={";
        *((_QWORD *)v2 + 4) += 11;
      }
      else
      {
        result = llvm::raw_ostream::write(v2, ", Offsets={", 0xBuLL);
      }
      v15 = *(unsigned int *)(v3 + 56);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 72 * v15;
        v18 = (unint64_t *)(*(_QWORD *)(v3 + 48) + 64);
        do
        {
          if ((v16 & 1) != 0)
          {
            v19 = (_BYTE *)*((_QWORD *)v2 + 4);
            if ((unint64_t)v19 >= *((_QWORD *)v2 + 3))
            {
              llvm::raw_ostream::write(v2, 44);
            }
            else
            {
              *((_QWORD *)v2 + 4) = v19 + 1;
              *v19 = 44;
            }
          }
          v20 = *v18;
          v18 += 9;
          result = llvm::raw_ostream::operator<<(v2, v20);
          v16 = 1;
          v17 -= 72;
        }
        while (v17);
      }
      v21 = (_BYTE *)*((_QWORD *)v2 + 4);
      if ((unint64_t)v21 >= *((_QWORD *)v2 + 3))
      {
        result = llvm::raw_ostream::write(v2, 125);
      }
      else
      {
        *((_QWORD *)v2 + 4) = v21 + 1;
        *v21 = 125;
      }
      if (*(_BYTE *)(v3 + 656))
      {
        v22 = (void *)*((_QWORD *)v2 + 4);
        if (*((_QWORD *)v2 + 3) - (_QWORD)v22 > 0x18uLL)
        {
          qmemcpy(v22, ", all-fixups-outside-loop", 25);
          *((_QWORD *)v2 + 4) += 25;
        }
        else
        {
          result = llvm::raw_ostream::write(v2, ", all-fixups-outside-loop", 0x19uLL);
        }
      }
      if (*(_QWORD *)(v3 + 664))
      {
        v23 = (void *)*((_QWORD *)v2 + 4);
        if (*((_QWORD *)v2 + 3) - (_QWORD)v23 > 0x14uLL)
        {
          qmemcpy(v23, ", widest fixup type: ", 21);
          *((_QWORD *)v2 + 4) += 21;
        }
        else
        {
          v2 = llvm::raw_ostream::write(v2, ", widest fixup type: ", 0x15uLL);
        }
        return (llvm::raw_ostream *)llvm::Type::print(*(llvm::Type **)(v3 + 664), v2, 0, 0);
      }
      return result;
    default:
      goto LABEL_16;
  }
}

llvm::raw_ostream *sub_1C5B8B8D0(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  llvm *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0x17uLL)
  {
    qmemcpy(v4, "in formulae referencing ", 24);
    *((_QWORD *)v2 + 4) += 24;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v2, "in formulae referencing ", 0x18uLL);
  }
  llvm::SCEV::print(*(_QWORD *)(a1 + 16));
  v5 = (_QWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v5 > 7uLL)
  {
    *v5 = 0x20657375206E6920;
    *((_QWORD *)v3 + 4) += 8;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, " in use ", 8uLL);
  }
  sub_1C5E21910(v3, *(_QWORD *)a1, 0, 0, 0);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, " , add offset ", 14);
    *((_QWORD *)v3 + 4) += 14;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, " , add offset ", 0xEuLL);
  }
  v7 = llvm::raw_ostream::operator<<(v3, *(_QWORD *)(a1 + 8));
  result = (llvm::raw_ostream *)llvm::errs(v7);
  v9 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v9 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v9 + 1;
  *v9 = 10;
  return result;
}

llvm::raw_ostream *sub_1C5B8BA40(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _WORD *v11;
  uint64_t v12;
  llvm::Type **v13;
  uint64_t v14;
  llvm::Type *v15;
  _WORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value **v24;
  uint64_t v25;
  llvm *v26;
  _WORD *v27;
  _BYTE *v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  _WORD *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _BYTE *v40;
  llvm::raw_ostream *result;
  _BYTE *v42;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  if (*(_DWORD *)(a1 + 200) || *(_DWORD *)(a1 + 320))
  {
    v4 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0x3FuLL)
    {
      qmemcpy(v4, "LSR has identified the following interesting factors and types: ", 64);
      *((_QWORD *)v2 + 4) += 64;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v2, "LSR has identified the following interesting factors and types: ", 0x40uLL);
    }
    v5 = *(unsigned int *)(a1 + 200);
    v6 = *(_DWORD *)(a1 + 200) == 0;
    if ((_DWORD)v5)
    {
      v7 = *(unint64_t **)(a1 + 192);
      v8 = 8 * v5;
      v9 = 1;
      do
      {
        v10 = *v7;
        v11 = (_WORD *)*((_QWORD *)v3 + 4);
        if ((v9 & 1) == 0)
        {
          if (*((_QWORD *)v3 + 3) - (_QWORD)v11 > 1uLL)
          {
            *v11 = 8236;
            v11 = (_WORD *)(*((_QWORD *)v3 + 4) + 2);
            *((_QWORD *)v3 + 4) = v11;
          }
          else
          {
            llvm::raw_ostream::write(v3, ", ", 2uLL);
            v11 = (_WORD *)*((_QWORD *)v3 + 4);
          }
        }
        if ((unint64_t)v11 >= *((_QWORD *)v3 + 3))
        {
          llvm::raw_ostream::write(v3, 42);
        }
        else
        {
          *((_QWORD *)v3 + 4) = (char *)v11 + 1;
          *(_BYTE *)v11 = 42;
        }
        v2 = llvm::raw_ostream::operator<<(v3, v10);
        v9 = 0;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    v12 = *(unsigned int *)(a1 + 320);
    if ((_DWORD)v12)
    {
      v13 = *(llvm::Type ***)(a1 + 312);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        v16 = (_WORD *)*((_QWORD *)v3 + 4);
        if (!v6)
        {
          if (*((_QWORD *)v3 + 3) - (_QWORD)v16 > 1uLL)
          {
            *v16 = 8236;
            v16 = (_WORD *)(*((_QWORD *)v3 + 4) + 2);
            *((_QWORD *)v3 + 4) = v16;
          }
          else
          {
            llvm::raw_ostream::write(v3, ", ", 2uLL);
            v16 = (_WORD *)*((_QWORD *)v3 + 4);
          }
        }
        if ((unint64_t)v16 >= *((_QWORD *)v3 + 3))
        {
          llvm::raw_ostream::write(v3, 40);
        }
        else
        {
          *((_QWORD *)v3 + 4) = (char *)v16 + 1;
          *(_BYTE *)v16 = 40;
        }
        v2 = (llvm::raw_ostream *)llvm::Type::print(v15, v3, 0, 0);
        v17 = (_BYTE *)*((_QWORD *)v3 + 4);
        if ((unint64_t)v17 >= *((_QWORD *)v3 + 3))
        {
          v2 = llvm::raw_ostream::write(v3, 41);
        }
        else
        {
          *((_QWORD *)v3 + 4) = v17 + 1;
          *v17 = 41;
        }
        v6 = 0;
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v18 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v3 + 3))
    {
      v2 = llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v18 + 1;
      *v18 = 10;
    }
  }
  v19 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v19 > 0x2BuLL)
  {
    qmemcpy(v19, "LSR is examining the following fixup sites:\n", 44);
    *((_QWORD *)v3 + 4) += 44;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v3, "LSR is examining the following fixup sites:\n", 0x2CuLL);
  }
  v20 = *(_DWORD *)(a1 + 368);
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 360);
    v22 = v21 + 1904 * v20;
    do
    {
      v23 = *(unsigned int *)(v21 + 56);
      if ((_DWORD)v23)
      {
        v24 = *(llvm::Value ***)(v21 + 48);
        v25 = 72 * v23;
        do
        {
          v26 = llvm::dbgs(v2);
          v27 = (_WORD *)*((_QWORD *)v26 + 4);
          if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 1uLL)
          {
            *v27 = 8224;
            *((_QWORD *)v26 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v26, "  ", 2uLL);
          }
          v2 = sub_1C5B8B0F0(v24, v3);
          v28 = (_BYTE *)*((_QWORD *)v3 + 4);
          if ((unint64_t)v28 >= *((_QWORD *)v3 + 3))
          {
            v2 = llvm::raw_ostream::write(v3, 10);
          }
          else
          {
            *((_QWORD *)v3 + 4) = v28 + 1;
            *v28 = 10;
          }
          v24 += 9;
          v25 -= 72;
        }
        while (v25);
      }
      v21 += 1904;
    }
    while (v21 != v22);
  }
  v29 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v29 > 0x24uLL)
  {
    qmemcpy(v29, "LSR is examining the following uses:\n", 37);
    *((_QWORD *)v3 + 4) += 37;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v3, "LSR is examining the following uses:\n", 0x25uLL);
  }
  v30 = *(_DWORD *)(a1 + 368);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 360);
    v32 = v31 + 1904 * v30;
    do
    {
      v33 = llvm::dbgs(v2);
      v34 = (_WORD *)*((_QWORD *)v33 + 4);
      if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
      {
        *v34 = 8224;
        *((_QWORD *)v33 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v33, "  ", 2uLL);
      }
      v2 = sub_1C5B8B450((llvm::raw_ostream *)v31, v3);
      v35 = (_BYTE *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v35 >= *((_QWORD *)v3 + 3))
      {
        v2 = llvm::raw_ostream::write(v3, 10);
      }
      else
      {
        *((_QWORD *)v3 + 4) = v35 + 1;
        *v35 = 10;
      }
      v36 = *(unsigned int *)(v31 + 680);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(v31 + 672);
        v38 = 96 * v36;
        do
        {
          v39 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v39 > 3uLL)
          {
            *v39 = 538976288;
            *((_QWORD *)v3 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v3, "    ", 4uLL);
          }
          sub_1C5B8A450(v37, v3);
          v40 = (_BYTE *)*((_QWORD *)v3 + 4);
          if ((unint64_t)v40 >= *((_QWORD *)v3 + 3))
          {
            v2 = llvm::raw_ostream::write(v3, 10);
          }
          else
          {
            *((_QWORD *)v3 + 4) = v40 + 1;
            *v40 = 10;
          }
          v37 += 96;
          v38 -= 96;
        }
        while (v38);
      }
      v31 += 1904;
    }
    while (v31 != v32);
  }
  result = (llvm::raw_ostream *)llvm::errs(v2);
  v42 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v42 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v42 + 1;
  *v42 = 10;
  return result;
}

_QWORD *llvm::LoopStrengthReducePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  _QWORD *result;

  ResultImpl = llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a2, &llvm::IVUsersAnalysis::Key, a1, (uint64_t)a3);
  if ((sub_1C5B8C050(a1, ResultImpl + 8, a3[4], a3[2], a3[3], a3[6], a3[1], a3[5], a3[9]) & 1) != 0)
  {
    result = llvm::getLoopPassPreservedAnalyses(a4);
    if (a3[9])
      return sub_1C4DDB144(a4, (uint64_t)&llvm::MemorySSAAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

uint64_t sub_1C5B8C050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  llvm::Type *v12;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  llvm::DbgVariableIntrinsic *v24;
  _BOOL4 v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  const llvm::SCEV *SCEVIter;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::DbgVariableIntrinsic **v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  llvm::DSOLocalEquivalent **v63;
  _QWORD *v64;
  void (**v65)(_QWORD *);
  uint64_t ExitBlock;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void ***v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  void *v78;
  void *v79;
  uint64_t j;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  llvm::ValueAsMetadata *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  llvm::ValueAsMetadata *v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  llvm::ValueAsMetadata *v105;
  int v106;
  unsigned int v107;
  const llvm::SCEV *v108;
  uint64_t k;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  llvm::ValueAsMetadata *v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  llvm::ValueAsMetadata *v124;
  int v125;
  unsigned int v126;
  const llvm::SCEV *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  llvm::ValueAsMetadata *v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  BOOL v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  llvm::Type *v146;
  uint64_t v147;
  uint64_t v148;
  llvm::UndefValue **v149;
  llvm::UndefValue *v150;
  llvm::Value *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::DbgVariableIntrinsic *v173;
  llvm::MDNode *v174;
  llvm::Value *v175;
  unsigned __int8 *v176;
  llvm::Value *v177;
  uint64_t v178;
  llvm::Value *v179;
  llvm::MDNode *v180;
  llvm::MDNode *v181;
  unsigned __int8 *Impl;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  char *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t **v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  int v195;
  uint64_t v196;
  size_t v197;
  unsigned int v198;
  _QWORD *v199;
  void (**v200)(_QWORD *);
  uint64_t __n;
  _QWORD *v202;
  llvm::DbgVariableIntrinsic *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int64_t v211;
  llvm::Type *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  int v219[2];
  uint64_t *v220;
  unsigned int v221;
  char v222;
  _QWORD v223[3];
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  void *v227;
  uint64_t v228;
  _BYTE v229[48];
  void *v230;
  uint64_t v231;
  _BYTE v232[688];
  void *v233;
  uint64_t v234;
  _BYTE v235[48];
  void *v236[2];
  _BYTE v237[320];
  _QWORD v238[9];
  unsigned __int8 v239;
  void *v240;
  uint64_t v241;
  _QWORD *v242[3];
  void *v243;
  _BYTE v244[72];
  uint64_t v245;
  void *v246;
  uint64_t v247;
  void *v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  void *v253;
  uint64_t v254;
  void *v255;
  unsigned int v256;
  _QWORD v257[49];
  void *v258;
  char *v259;
  int v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _BYTE v264[16];
  _QWORD **v265;
  _QWORD *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  _BYTE v270[64];
  char *v271;
  uint64_t v272;
  _QWORD v273[8];

  v9 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v214 = v10;
  v215 = v11;
  v13 = v12;
  v216 = v14;
  v218 = v15;
  v17 = v16;
  v213 = v18;
  v19 = (uint64_t **)v9;
  v273[6] = *MEMORY[0x1E0C80C00];
  v268 = v270;
  v269 = 0x200000000;
  v262 = v264;
  v263 = 0x200000000;
  v267 = 0;
  v266 = 0;
  v212 = v12;
  v265 = &v266;
  v21 = *(_QWORD *)(v9 + 32);
  v20 = *(_QWORD *)(v9 + 40);
  if (v20 == v21)
    goto LABEL_65;
  do
  {
    v22 = *(_QWORD *)v21 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v21 + 48); i != v22; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v24 = (llvm::DbgVariableIntrinsic *)(i - 24);
      else
        v24 = 0;
      v25 = sub_1C50A0300((uint64_t)v24);
      if (!v25)
        v24 = 0;
      if (!i)
        continue;
      if (!v25)
        continue;
      if (sub_1C631CA9C(v24))
        continue;
      v26 = *(unsigned __int8 **)(*((_QWORD *)v24 - 4 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF)) + 24);
      if (*v26 - 4 < 0x1F)
        continue;
      v27 = *((_QWORD *)v26 + 16);
      if (!v27 || (*(_DWORD *)(*(_QWORD *)v27 + 8) & 0xFD) != 0xD)
        continue;
      v28 = *(_QWORD *)(v17 + 104);
      v29 = *(_DWORD *)(v17 + 120);
      if (!v29)
        goto LABEL_22;
      v30 = ((v27 >> 4) ^ (v27 >> 9)) & (v29 - 1);
      v31 = v28 + 48 * v30;
      v32 = *(_QWORD *)(v31 + 24);
      if (v32 != v27)
      {
        v33 = 1;
        while (v32 != -4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & (v29 - 1);
          v31 = v28 + 48 * v30;
          v32 = *(_QWORD *)(v31 + 24);
          if (v32 == v27)
            goto LABEL_23;
        }
LABEL_22:
        v31 = v28 + 48 * v29;
      }
LABEL_23:
      if (v31 == v28 + 48 * v29 || (SCEVIter = *(const llvm::SCEV **)(v31 + 40)) == 0)
        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, v27);
      if (*((_WORD *)SCEVIter + 12) == 14
        || (llvm::ScalarEvolution::containsUndefs((llvm::ScalarEvolution *)v17, SCEVIter) & 1) != 0)
      {
        continue;
      }
      v238[0] = v24;
      v36 = (_QWORD *)((char *)v24 - 32 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF));
      v238[1] = *(_QWORD *)(v36[8] + 24);
      v238[2] = *(_QWORD *)(*v36 + 24);
      v37 = *(unsigned __int8 **)(*((_QWORD *)v24 - 4 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF)) + 24);
      v38 = *v37;
      if (v38 > 0x22)
        goto LABEL_31;
      if (v38 == 32)
      {
        v37 = (unsigned __int8 *)**((_QWORD **)v37 + 3);
LABEL_31:
        v39 = *((_QWORD *)v37 + 16);
        goto LABEL_34;
      }
      if (((1 << v38) & 0x6FFFFFFF0) == 0)
        goto LABEL_31;
      v39 = 0;
LABEL_34:
      v40 = *(_QWORD *)(v17 + 104);
      v41 = *(_DWORD *)(v17 + 120);
      if (v41)
      {
        v42 = ((v39 >> 4) ^ (v39 >> 9)) & (v41 - 1);
        v43 = v40 + 48 * v42;
        v44 = *(_QWORD *)(v43 + 24);
        if (v44 == v39)
          goto LABEL_41;
        v45 = 1;
        while (v44 != -4096)
        {
          v46 = v42 + v45++;
          v42 = v46 & (v41 - 1);
          v43 = v40 + 48 * v42;
          v44 = *(_QWORD *)(v43 + 24);
          if (v44 == v39)
            goto LABEL_41;
        }
      }
      v43 = v40 + 48 * v41;
LABEL_41:
      if (v43 == v40 + 48 * v41 || (v47 = *(_QWORD *)(v43 + 40)) == 0)
        v47 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, v39);
      v238[3] = v47;
      v48 = v268;
      if (v269 >= HIDWORD(v269))
      {
        v57 = v269 + 1;
        if (v268 <= (char *)v238 && &v268[32 * v269] > (char *)v238)
        {
          v211 = (char *)v238 - v268;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v57, 32);
          v48 = v268;
          v49 = &v268[v211];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v268, (uint64_t)v270, v57, 32);
          v49 = (char *)v238;
          v48 = v268;
        }
      }
      else
      {
        v49 = (char *)v238;
      }
      v50 = &v48[32 * v269];
      v51 = *((_OWORD *)v49 + 1);
      *(_OWORD *)v50 = *(_OWORD *)v49;
      *((_OWORD *)v50 + 1) = v51;
      LODWORD(v269) = v269 + 1;
      if (v267)
        goto LABEL_47;
      v52 = v262;
      v53 = v263;
      if ((_DWORD)v263)
      {
        v54 = 8 * v263;
        v55 = (llvm::DbgVariableIntrinsic **)v262;
        v13 = v212;
        while (*v55 != v24)
        {
          ++v55;
          v54 -= 8;
          if (!v54)
            goto LABEL_54;
        }
        if (v54)
          continue;
LABEL_54:
        if (v263 >= 2)
        {
          do
          {
            v56 = v262[v53 - 1];
            sub_1C509F7DC((uint64_t *)&v265, v56, v56);
            LODWORD(v53) = v263 - 1;
            LODWORD(v263) = v53;
          }
          while ((_DWORD)v53);
LABEL_47:
          sub_1C509F7DC((uint64_t *)&v265, (unint64_t)v24, (uint64_t)v24);
          v13 = v212;
          continue;
        }
      }
      if (v263 >= HIDWORD(v263))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v263 + 1, 8);
        v52 = v262;
        v53 = v263;
      }
      v13 = v212;
      v52[v53] = v24;
      LODWORD(v263) = v263 + 1;
    }
    v21 += 8;
  }
  while (v21 != v20);
LABEL_65:
  if (a9)
  {
    v58 = operator new();
    *(_QWORD *)v58 = a9;
    *(_QWORD *)(v58 + 8) = v58 + 24;
    *(_QWORD *)(v58 + 16) = 0x1000000000;
    *(_QWORD *)(v58 + 408) = v58 + 440;
    *(_QWORD *)(v58 + 416) = v58 + 440;
    *(_QWORD *)(v58 + 424) = 8;
    *(_DWORD *)(v58 + 432) = 0;
    *(_QWORD *)(v58 + 504) = v58 + 520;
    *(_QWORD *)(v58 + 512) = 0x800000000;
    *(_QWORD *)(v58 + 600) = 0;
    *(_QWORD *)(v58 + 592) = 0;
    *(_QWORD *)(v58 + 584) = v58 + 592;
  }
  else
  {
    v58 = 0;
  }
  v59 = v216;
  sub_1C5B8D874((uint64_t)v238, (llvm::Loop *)v19, v213, v17, v218, v216, v13, v214, (uint64_t)v215, v58);
  v60 = v239;
  v61 = llvm::DeleteDeadPHIs(*v19[4], v215, (int32x2_t **)v58);
  if (v60)
    v62 = 1;
  else
    v62 = v61;
  if (byte_1ED81FFB8 && llvm::Loop::isLoopSimplifyForm((llvm::Loop *)v19))
  {
    v233 = v235;
    v234 = 0x1000000000;
    sub_1C50D02DC((uint64_t)&v227, (uint64_t ***)v17, *(_QWORD *)(*(_QWORD *)(*v19[4] + 56) + 40) + 272, (uint64_t)"lsr", 0);
    if (llvm::SCEVExpander::replaceCongruentIVs((uint64_t *)&v227, (const llvm::Loop *)v19, v218, (unsigned int *)&v233, v212, v63))
    {
      v226 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)&v233, v215, (int32x2_t **)v58, v225);
      v64 = v226;
      if (v226 == v225)
      {
        v65 = (void (**)(_QWORD *))(v225[0] + 32);
        v64 = v225;
        goto LABEL_78;
      }
      if (v226)
      {
        v65 = (void (**)(_QWORD *))(*v226 + 40);
LABEL_78:
        (*v65)(v64);
      }
      llvm::DeleteDeadPHIs(*v19[4], v215, (int32x2_t **)v58);
      v62 = 1;
    }
    sub_1C50D05E0((uint64_t)&v227);
    sub_1C50880D4((char **)&v233);
  }
  if (llvm::Loop::isRecursivelyLCSSAForm((uint64_t)v19, v218, v216))
  {
    ExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v19);
    if (ExitBlock)
    {
      if (*(_QWORD *)(ExitBlock + 40) != ExitBlock + 40)
      {
        for (j = *(_QWORD *)(ExitBlock + 48); ; j = *(_QWORD *)(v82 + 32))
        {
          v82 = j - 24;
          if (j)
            v83 = j - 24;
          else
            v83 = 0;
          if (!j)
            goto LABEL_83;
          if (*(_BYTE *)(v83 + 16) != 83)
            goto LABEL_83;
          v84 = *(_DWORD *)(j - 4);
          if ((v84 & 0x7FFFFFF) != 1)
            goto LABEL_83;
          v85 = (v84 & 0x40000000) != 0 ? *(_QWORD *)(j - 32) : j - 56;
          v86 = *(_QWORD *)(*(_QWORD *)v85 + 8);
          if (v86)
          {
            v87 = 2;
            do
            {
              v86 = *(_QWORD *)(v86 + 8);
              --v87;
            }
            while (v86);
            if (!v87)
              break;
          }
        }
        v233 = v235;
        v234 = 0x1000000000;
        sub_1C50D02DC((uint64_t)&v227, (uint64_t ***)v17, *(_QWORD *)(*(_QWORD *)(*v19[4] + 56) + 40) + 272, (uint64_t)"lsr", 0);
        if (llvm::rewriteLoopExitValues((const llvm::Loop *)v19, v216, v215, (int32x2_t *)v17, (uint64_t)v212, (uint64_t)&v227, v218, 1, (unsigned int *)&v233))
        {
          v224 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)&v233, v215, (int32x2_t **)v58, v223);
          v199 = v224;
          if (v224 == v223)
          {
            v200 = (void (**)(_QWORD *))(v223[0] + 32);
            v199 = v223;
            goto LABEL_333;
          }
          if (v224)
          {
            v200 = (void (**)(_QWORD *))(*v224 + 40);
LABEL_333:
            (*v200)(v199);
          }
          llvm::DeleteDeadPHIs(*v19[4], v215, (int32x2_t **)v58);
          v62 = 1;
        }
        sub_1C50D05E0((uint64_t)&v227);
        sub_1C50880D4((char **)&v233);
      }
    }
  }
LABEL_83:
  if ((_DWORD)v269)
  {
    v217 = v62;
    *(_QWORD *)v219 = v58;
    v68 = *(uint64_t **)(v59 + 24);
    v67 = *(uint64_t **)(v59 + 32);
    if (v68 == v67)
    {
LABEL_85:
      LODWORD(v263) = 0;
      sub_1C6143384(v266);
      v266 = 0;
      v267 = 0;
      v265 = &v266;
      v58 = *(_QWORD *)v219;
      v62 = v217;
      goto LABEL_86;
    }
LABEL_145:
    v88 = *v68;
    if (v260)
    {
      v89 = v259;
      v90 = &v259[24 * v260];
      while (1)
      {
        v91 = (llvm::ValueAsMetadata *)*((_QWORD *)v89 + 2);
        if (!v91 || (*(_DWORD *)(*(_QWORD *)v91 + 8) & 0xFD) != 0xD)
          goto LABEL_165;
        v92 = *(_QWORD *)(v17 + 104);
        v93 = *(_DWORD *)(v17 + 120);
        if (!v93)
          goto LABEL_155;
        v94 = (v93 - 1) & ((v91 >> 4) ^ (v91 >> 9));
        v95 = v92 + 48 * v94;
        v96 = *(llvm::ValueAsMetadata **)(v95 + 24);
        if (v96 != v91)
          break;
LABEL_156:
        if (v95 == v92 + 48 * v93 || (v99 = *(_QWORD *)(v95 + 40)) == 0)
          v99 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, *((_QWORD *)v89 + 2));
        if (v99)
          v100 = *(unsigned __int16 *)(v99 + 24) == 7;
        else
          v100 = 0;
        if (!v100 || *(_QWORD *)(v99 + 40) != 2)
          goto LABEL_165;
        v101 = *(_QWORD *)(v17 + 104);
        v102 = *(_DWORD *)(v17 + 120);
        if (!v102)
          goto LABEL_173;
        v103 = (v102 - 1) & ((v91 >> 4) ^ (v91 >> 9));
        v104 = v101 + 48 * v103;
        v105 = *(llvm::ValueAsMetadata **)(v104 + 24);
        if (v105 != v91)
        {
          v106 = 1;
          while (v105 != (llvm::ValueAsMetadata *)-4096)
          {
            v107 = v103 + v106++;
            v103 = v107 & (v102 - 1);
            v104 = v101 + 48 * v103;
            v105 = *(llvm::ValueAsMetadata **)(v104 + 24);
            if (v105 == v91)
              goto LABEL_174;
          }
LABEL_173:
          v104 = v101 + 48 * v102;
        }
LABEL_174:
        if (v104 == v101 + 48 * v102 || (v108 = *(const llvm::SCEV **)(v104 + 40)) == 0)
          v108 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, (unint64_t)v91);
        if (!llvm::ScalarEvolution::containsUndefs((llvm::ScalarEvolution *)v17, v108))
        {
LABEL_215:
          if ((_DWORD)v269)
          {
            v128 = *(_QWORD *)(v17 + 104);
            v129 = *(_DWORD *)(v17 + 120);
            if (!v129)
              goto LABEL_222;
            v130 = (v129 - 1) & ((v91 >> 4) ^ (v91 >> 9));
            v131 = v128 + 48 * v130;
            v132 = *(llvm::ValueAsMetadata **)(v131 + 24);
            if (v132 != v91)
            {
              v133 = 1;
              while (v132 != (llvm::ValueAsMetadata *)-4096)
              {
                v134 = v130 + v133++;
                v130 = v134 & (v129 - 1);
                v131 = v128 + 48 * v130;
                v132 = *(llvm::ValueAsMetadata **)(v131 + 24);
                if (v132 == v91)
                  goto LABEL_223;
              }
LABEL_222:
              v131 = v128 + 48 * v129;
            }
LABEL_223:
            if (v131 == v128 + 48 * v129 || (v135 = *(_QWORD *)(v131 + 40)) == 0)
              v135 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, (unint64_t)v91);
            v136 = v135 && *(_WORD *)(v135 + 24) == 7;
            if (v136 && *(_QWORD *)(v135 + 40) == 2 && *(unsigned __int16 *)(v135 + 26) <= 0x40u)
            {
              v233 = v235;
              v234 = 0x600000000;
              v236[0] = v237;
              v236[1] = (void *)0x200000000;
              sub_1C5BA2274((uint64_t)&v233, v91);
              v137 = *(uint64_t **)(v135 + 32);
              v138 = *v137;
              if (*(_WORD *)(*v137 + 24) == 7)
                goto LABEL_234;
              v139 = *(_QWORD *)(v135 + 40);
              if (v139 == 2)
              {
                v140 = v137[1];
              }
              else
              {
                v208 = v135;
                v210 = *v137;
                v227 = v229;
                v228 = 0x300000000;
                v196 = 8 * v139 - 8;
                v197 = v196;
                if ((unint64_t)v196 >= 0x19)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v196 >> 3, 8);
                  v198 = v228;
                }
                else
                {
                  v198 = 0;
                }
                if (v139 != 1)
                {
                  memcpy((char *)v227 + 8 * v198, v137 + 1, v197);
                  v198 = v228;
                }
                LODWORD(v228) = v198 + (v197 >> 3);
                v140 = sub_1C618AB20((uint64_t *)v17, (uint64_t)&v227, *(uint64_t ***)(v208 + 48));
                if (v227 != v229)
                  free(v227);
                v135 = v208;
                v138 = v210;
              }
              v141 = v138;
              if ((sub_1C5BA23C8(28, v138) & 1) == 0)
              {
                if (sub_1C5BA248C((uint64_t)&v233, v141))
                {
                  v142 = v234;
                  if (v234 >= (unint64_t)HIDWORD(v234))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)v235, v234 + 1, 8);
                    v142 = v234;
                  }
                  *((_QWORD *)v233 + v142) = 28;
                  LODWORD(v234) = v234 + 1;
                  goto LABEL_247;
                }
                goto LABEL_234;
              }
LABEL_247:
              if ((sub_1C5BA23C8(27, v140) & 1) == 0)
              {
                if (!sub_1C5BA248C((uint64_t)&v233, v140))
                  goto LABEL_234;
                v143 = v234;
                if (v234 >= (unint64_t)HIDWORD(v234))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)v235, v234 + 1, 8);
                  v143 = v234;
                }
                *((_QWORD *)v233 + v143) = 27;
                LODWORD(v234) = v234 + 1;
              }
              if ((_DWORD)v269)
              {
                v144 = (uint64_t *)v268;
                v145 = 32 * v269;
                while (1)
                {
                  v209 = v145;
                  if (sub_1C631CA9C((llvm::DbgVariableIntrinsic *)*v144))
                  {
                    v147 = *v144;
                    v148 = *(_QWORD *)(*(_QWORD *)(*v144 - 32 * (*(_DWORD *)(*v144 + 20) & 0x7FFFFFF)) + 24);
                    if (*(_BYTE *)v148 != 32)
                      goto LABEL_265;
                    v149 = *(llvm::UndefValue ***)(**(_QWORD **)(v148 + 24) + 128);
                    if (v149)
                      break;
                  }
LABEL_271:
                  v144 += 4;
                  v145 = v209 - 32;
                  if (v209 == 32)
                    goto LABEL_234;
                }
                v150 = llvm::UndefValue::get(*v149, v146);
                v152 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v150, v151);
                v153 = llvm::MetadataAsValue::get(**(uint64_t ***)v147, v152);
                v154 = *(_DWORD *)(v147 + 20) & 0x7FFFFFF;
                v155 = -v154;
                v156 = (uint64_t *)(v147 - 32 * v154);
                if (*v156)
                {
                  v157 = v147 + 32 * v155;
                  v159 = *(_QWORD **)(v157 + 16);
                  v158 = (_QWORD *)(v157 + 16);
                  *v159 = *(v158 - 1);
                  v160 = *(v158 - 1);
                  if (v160)
                    *(_QWORD *)(v160 + 16) = *v158;
                }
                *v156 = v153;
                if (v153)
                {
                  v163 = *(_QWORD *)(v153 + 8);
                  v161 = (uint64_t **)(v153 + 8);
                  v162 = v163;
                  v164 = v147 + 32 * v155;
                  *(_QWORD *)(v164 + 8) = v163;
                  if (v163)
                    *(_QWORD *)(v162 + 16) = v164 + 8;
                  *(_QWORD *)(v164 + 16) = v161;
                  *v161 = v156;
                }
                sub_1C61D279C(*v144, v144[1]);
LABEL_265:
                llvm::ScalarEvolution::computeConstantDifference((llvm::ScalarEvolution *)v17, (const llvm::SCEV *)v144[3], (const llvm::SCEV *)v135, (uint64_t)&v220);
                if (v222)
                {
                  v165 = v221;
                  if (v165 - sub_1C4959174((llvm::APInt *)&v220) + 1 <= 0x40)
                  {
                    v172 = v221 > 0x40 ? *v220 : (uint64_t)((_QWORD)v220 << -(uint64_t)v221) >> -(uint64_t)v221;
                    v173 = (llvm::DbgVariableIntrinsic *)*v144;
                    v227 = v229;
                    v228 = 0x800000000;
                    llvm::DIExpression::appendOffset((uint64_t)&v227, v172);
                    v174 = llvm::DIExpression::prependOpcodes((_QWORD *)v144[1], (unsigned int *)&v227, 1, 0);
                    sub_1C61D279C((uint64_t)v173, (uint64_t)v174);
                    v207 = **(uint64_t ***)v173;
                    v176 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v91, v175);
                    v177 = (llvm::Value *)llvm::MetadataAsValue::get(v207, v176);
                    llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v173, 0, v177);
                    if (v227 != v229)
                      free(v227);
                  }
                  goto LABEL_267;
                }
                v166 = v144[3];
                v167 = *(_QWORD *)(*(_QWORD *)(*v144 - 32 * (*(_DWORD *)(*v144 + 20) & 0x7FFFFFF)) + 24);
                if (*(_BYTE *)v167 == 32 && *(_DWORD *)(v167 + 32) != 1
                  || *(_WORD *)(v166 + 24) != 7
                  || *(_QWORD *)(v166 + 40) != 2
                  || *(unsigned __int16 *)(v166 + 26) > 0x40u)
                {
LABEL_267:
                  if (v222 && v221 >= 0x41 && v220)
                    MEMORY[0x1CAA32F9C](v220, 0x1000C8000313F17);
                  goto LABEL_271;
                }
                v202 = (_QWORD *)v144[1];
                v203 = (llvm::DbgVariableIntrinsic *)*v144;
                v205 = v144;
                v206 = v135;
                v227 = v229;
                v228 = 0x600000000;
                v230 = v232;
                v231 = 0x200000000;
                llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v230, (uint64_t)v236);
                llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v227, (uint64_t)&v233);
                v168 = *(uint64_t **)(v166 + 32);
                v204 = *v168;
                if (*(_WORD *)(*v168 + 24) != 7)
                {
                  v169 = *(_QWORD *)(v166 + 40);
                  if (v169 == 2)
                  {
                    v170 = v168[1];
                  }
                  else
                  {
                    v271 = (char *)v273;
                    v272 = 0x300000000;
                    __n = 8 * v169 - 8;
                    if ((unint64_t)__n >= 0x19)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, __n >> 3, 8);
                      v195 = v272;
                    }
                    else
                    {
                      v195 = 0;
                    }
                    if (v169 != 1)
                    {
                      memcpy(&v271[8 * v195], v168 + 1, __n);
                      v195 = v272;
                    }
                    LODWORD(v272) = v195 + ((unint64_t)__n >> 3);
                    v170 = sub_1C618AB20((uint64_t *)v17, (uint64_t)&v271, *(uint64_t ***)(v166 + 48));
                    if (v271 != (char *)v273)
                      free(v271);
                  }
                  if ((sub_1C5BA23C8(30, v170) & 1) != 0)
                  {
LABEL_286:
                    if ((sub_1C5BA23C8(34, v204) & 1) == 0)
                    {
                      if (!sub_1C5BA248C((uint64_t)&v227, v204))
                        goto LABEL_288;
                      v178 = v228;
                      if (v228 >= (unint64_t)HIDWORD(v228))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v228 + 1, 8);
                        v178 = v228;
                      }
                      *((_QWORD *)v227 + v178) = 34;
                      LODWORD(v228) = v228 + 1;
                    }
                    if ((_DWORD)v231 == 1 && *(_QWORD *)v227 == 4101 && !*((_QWORD *)v227 + 1))
                    {
                      v179 = (llvm::Value *)llvm::MetadataAsValue::get(**(uint64_t ***)v203, *(unsigned __int8 **)v230);
                      llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v203, 0, v179);
                      v271 = (char *)v273;
                      v272 = 0x600000000;
                      sub_1C4DFE610((unsigned int *)&v271, (_BYTE *)v227 + 16, (_BYTE *)v227 + 8 * v228);
                      v180 = llvm::DIExpression::prependOpcodes(v202, (unsigned int *)&v271, 1, 0);
                      sub_1C61D279C((uint64_t)v203, (uint64_t)v180);
                      if (v271 != (char *)v273)
                        free(v271);
                    }
                    else
                    {
                      v181 = llvm::DIExpression::prependOpcodes(v202, (unsigned int *)&v227, 1, 0);
                      sub_1C61D279C((uint64_t)v203, (uint64_t)v181);
                      Impl = (unsigned __int8 *)llvm::DIArgList::getImpl(**(_QWORD ***)v203, v230, v231, 0, 1);
                      v183 = llvm::MetadataAsValue::get(**(uint64_t ***)v203, Impl);
                      v184 = *((_DWORD *)v203 + 5) & 0x7FFFFFF;
                      v185 = -v184;
                      v186 = (uint64_t *)((char *)v203 - 32 * v184);
                      if (*v186)
                      {
                        v187 = (char *)v203 + 32 * v185;
                        v189 = (_QWORD *)*((_QWORD *)v187 + 2);
                        v188 = v187 + 16;
                        *v189 = *(v188 - 1);
                        v190 = *(v188 - 1);
                        if (v190)
                          *(_QWORD *)(v190 + 16) = *v188;
                      }
                      *v186 = v183;
                      if (v183)
                      {
                        v193 = *(_QWORD *)(v183 + 8);
                        v191 = (uint64_t **)(v183 + 8);
                        v192 = v193;
                        v194 = (char *)v203 + 32 * v185;
                        *((_QWORD *)v194 + 1) = v193;
                        if (v193)
                          *(_QWORD *)(v192 + 16) = v194 + 8;
                        *((_QWORD *)v194 + 2) = v191;
                        *v191 = v186;
                      }
                    }
                    goto LABEL_288;
                  }
                  if (sub_1C5BA248C((uint64_t)&v227, v170))
                  {
                    v171 = v228;
                    if (v228 >= (unint64_t)HIDWORD(v228))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v228 + 1, 8);
                      v171 = v228;
                    }
                    *((_QWORD *)v227 + v171) = 30;
                    LODWORD(v228) = v228 + 1;
                    goto LABEL_286;
                  }
                }
LABEL_288:
                if (v230 != v232)
                  free(v230);
                if (v227 != v229)
                  free(v227);
                v144 = v205;
                v135 = v206;
                goto LABEL_267;
              }
LABEL_234:
              if (v236[0] != v237)
                free(v236[0]);
              if (v233 != v235)
                free(v233);
            }
          }
LABEL_238:
          if (++v68 == v67)
            goto LABEL_85;
          goto LABEL_145;
        }
LABEL_165:
        v89 += 24;
        if (v89 == v90)
          goto LABEL_179;
      }
      v97 = 1;
      while (v96 != (llvm::ValueAsMetadata *)-4096)
      {
        v98 = v94 + v97++;
        v94 = v98 & (v93 - 1);
        v95 = v92 + 48 * v94;
        v96 = *(llvm::ValueAsMetadata **)(v95 + 24);
        if (v96 == v91)
          goto LABEL_156;
      }
LABEL_155:
      v95 = v92 + 48 * v93;
      goto LABEL_156;
    }
LABEL_179:
    if (*(_QWORD *)(**(_QWORD **)(v88 + 32) + 40) == **(_QWORD **)(v88 + 32) + 40)
      goto LABEL_238;
    for (k = *(_QWORD *)(**(_QWORD **)(v88 + 32) + 48); ; k = *((_QWORD *)v91 + 4))
    {
      v91 = (llvm::ValueAsMetadata *)(k - 24);
      if (k)
        v110 = k - 24;
      else
        v110 = 0;
      if (!k || *(_BYTE *)(v110 + 16) != 83)
        goto LABEL_238;
      if ((*(_DWORD *)(*(_QWORD *)v91 + 8) & 0xFD) == 0xD)
        break;
LABEL_203:
      ;
    }
    v111 = *(_QWORD *)(v17 + 104);
    v112 = *(_DWORD *)(v17 + 120);
    if (v112)
    {
      v113 = (v112 - 1) & ((v91 >> 4) ^ (v91 >> 9));
      v114 = v111 + 48 * v113;
      v115 = *(llvm::ValueAsMetadata **)(v114 + 24);
      if (v115 == v91)
      {
LABEL_194:
        if (v114 == v111 + 48 * v112 || (v118 = *(_QWORD *)(v114 + 40)) == 0)
          v118 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, (unint64_t)v91);
        if (v118)
          v119 = *(unsigned __int16 *)(v118 + 24) == 7;
        else
          v119 = 0;
        if (!v119 || *(_QWORD *)(v118 + 40) != 2)
          goto LABEL_203;
        v120 = *(_QWORD *)(v17 + 104);
        v121 = *(_DWORD *)(v17 + 120);
        if (v121)
        {
          v122 = (v121 - 1) & ((v91 >> 4) ^ (v91 >> 9));
          v123 = v120 + 48 * v122;
          v124 = *(llvm::ValueAsMetadata **)(v123 + 24);
          if (v124 == v91)
          {
LABEL_211:
            if (v123 == v120 + 48 * v121 || (v127 = *(const llvm::SCEV **)(v123 + 40)) == 0)
              v127 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v17, (unint64_t)v91);
            if (!llvm::ScalarEvolution::containsUndefs((llvm::ScalarEvolution *)v17, v127))
              goto LABEL_215;
            goto LABEL_203;
          }
          v125 = 1;
          while (v124 != (llvm::ValueAsMetadata *)-4096)
          {
            v126 = v122 + v125++;
            v122 = v126 & (v121 - 1);
            v123 = v120 + 48 * v122;
            v124 = *(llvm::ValueAsMetadata **)(v123 + 24);
            if (v124 == v91)
              goto LABEL_211;
          }
        }
        v123 = v120 + 48 * v121;
        goto LABEL_211;
      }
      v116 = 1;
      while (v115 != (llvm::ValueAsMetadata *)-4096)
      {
        v117 = v113 + v116++;
        v113 = v117 & (v112 - 1);
        v114 = v111 + 48 * v113;
        v115 = *(llvm::ValueAsMetadata **)(v114 + 24);
        if (v115 == v91)
          goto LABEL_194;
      }
    }
    v114 = v111 + 48 * v112;
    goto LABEL_194;
  }
LABEL_86:
  MEMORY[0x1CAA32FB4](v261, 8);
  sub_1C50D06E4((void **)&v259);
  if (v258 != (void *)v257[48])
    free(v258);
  v69 = (char *)v255;
  if (v256)
  {
    v70 = 48 * v256;
    do
    {
      v71 = *(char **)&v69[v70 - 48];
      if (&v69[v70 - 32] != v71)
        free(v71);
      v70 -= 48;
    }
    while (v70);
    v69 = (char *)v255;
  }
  if (v69 != (char *)v257)
    free(v69);
  if (v253 != &v254)
    free(v253);
  v72 = v251;
  if (v252)
  {
    v73 = 16 * v252;
    v74 = (void ***)(v251 + 8);
    do
    {
      if (((unint64_t)*(v74 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v74 = sub_1C4914448(v74);
      v74 += 2;
      v73 -= 16;
    }
    while (v73);
    v72 = v251;
  }
  MEMORY[0x1CAA32FB4](v72, 8);
  v75 = (uint64_t *)v248;
  if (v249)
  {
    v76 = 1904 * v249;
    v77 = (char *)v248 - 1904;
    do
    {
      sub_1C5B9AF24((uint64_t)&v77[v76]);
      v76 -= 1904;
    }
    while (v76);
    v75 = (uint64_t *)v248;
  }
  if (v75 != &v250)
    free(v75);
  if (v246 != &v247)
    free(v246);
  if ((v244[64] & 1) == 0)
    MEMORY[0x1CAA32FB4](v245, 8);
  if (v243 != v244)
    free(v243);
  sub_1C47655E8((uint64_t)v242, v242[1]);
  if (v240 != &v241)
    free(v240);
  if (v58)
  {
    sub_1C61247C0(v58 + 584, *(_QWORD **)(v58 + 592));
    v78 = *(void **)(v58 + 504);
    if (v78 != (void *)(v58 + 520))
      free(v78);
    v79 = *(void **)(v58 + 416);
    if (v79 != *(void **)(v58 + 408))
      free(v79);
    sub_1C4EE41F8((char **)(v58 + 8));
    MEMORY[0x1CAA32FC0](v58, 0x10E0C40B8556DDDLL);
  }
  sub_1C6143384(v266);
  if (v262 != (_QWORD *)v264)
    free(v262);
  if (v268 != v270)
    free(v268);
  return v62;
}

uint64_t sub_1C5B8D6DC(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeIVUsersWrapperPassPass(a1, v3);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Loop Strength Reduction";
  *(_QWORD *)(v5 + 8) = 23;
  *(_QWORD *)(v5 + 16) = "loop-reduce";
  *(_QWORD *)(v5 + 24) = 11;
  *(_QWORD *)(v5 + 32) = &unk_1ED81FF28;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5BA2858;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5B8D798(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED81FF28;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E8195E98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED81FF30);
  if (v3 != -1)
  {
    v7[0] = sub_1C5B8D6DC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED81FF30, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5B8D860(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5B8D874(uint64_t a1, llvm::Loop *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Type *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v14;
  int64x2_t *v15;
  int v16;
  int64x2_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  llvm::ScalarEvolution *v34;
  const llvm::Loop *v35;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Type **v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  BOOL v45;
  llvm::Type *v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t SCEVIter;
  BOOL v59;
  __int16 v60;
  int FPMantissaWidth;
  uint64_t v62;
  uint64_t v63;
  int IndexTypeSizeInBits;
  const char *v65;
  int v66;
  uint64_t v67;
  uint64_t result;
  llvm::Type *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _BOOL8 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD **v80;
  unsigned int v81;
  uint64_t v82;
  double v83;
  llvm::APFloatBase *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  llvm::Type *v99;
  _QWORD *v100;
  llvm::APFloatBase *v101;
  char v102;
  llvm::Value *v103;
  int v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  llvm::Type *v108;
  llvm::Type *v109;
  uint64_t LoopLatch;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t k;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const llvm::Loop **v129;
  uint64_t Exact;
  int v131;
  uint64_t v132;
  uint64_t *v133;
  llvm::Type **v134;
  unint64_t Constant;
  uint64_t v136;
  uint64_t AddExpr;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  llvm::SmallPtrSetImplBase *v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  llvm::SCEV **v153;
  llvm::SCEV *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  BOOL v165;
  _QWORD *v166;
  _BOOL4 v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t Stride;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t ***v174;
  uint64_t ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  uint64_t **v185;
  char *v186;
  uint64_t **v187;
  uint64_t v188;
  uint64_t v189;
  llvm::ValueSymbolTable *v190;
  int v191;
  size_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  llvm::APInt *v213;
  uint64_t v214;
  unint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  size_t v227;
  uint64_t v228;
  BOOL v229;
  llvm::APInt *v230;
  unint64_t *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  uint64_t *v243;
  int v244;
  uint64_t *v245;
  _DWORD *v246;
  llvm::Value *v247;
  uint64_t v248;
  void *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  llvm::Value *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t *v260;
  uint64_t v261;
  int32x2_t *v262;
  unint64_t v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  llvm::Type *v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t NearestCommonDominator;
  uint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t *v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  llvm::Type *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t n;
  unint64_t *v305;
  unint64_t v306;
  llvm::ScalarEvolution **v307;
  _QWORD *v308;
  llvm::ScalarEvolution *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  unsigned int *v326;
  int v327;
  unint64_t *v328;
  llvm::Value *v329;
  char v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int8 *v344;
  BOOL v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int v352;
  _QWORD *v353;
  _QWORD *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  unsigned int v363;
  _BOOL4 v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  int v368;
  int v369;
  llvm::SCEV *v370;
  uint64_t v371;
  _QWORD *v372;
  llvm::SCEV *v373;
  int v374;
  int v375;
  llvm::SmallPtrSetImplBase *v376;
  const void **v377;
  char *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  void **v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  llvm::Value **v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _BYTE *v407;
  _BYTE *v408;
  unsigned int v409;
  uint64_t v410;
  char v411;
  int v412;
  uint64_t v413;
  const void *v414;
  unsigned int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  BOOL v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unsigned int v431;
  BOOL v432;
  uint64_t v434;
  uint64_t v435;
  int v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  uint64_t v441;
  int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  unsigned int v480;
  const llvm::SCEV *v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  BOOL v488;
  BOOL v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  const char *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  const char *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  __int128 v508;
  llvm::Type *ii;
  uint64_t v510;
  uint64_t v511;
  __int128 v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  llvm::SCEV *v516;
  const llvm::SCEV **v517;
  const llvm::SCEV *v518;
  uint64_t v519;
  llvm::SCEV *v520;
  uint64_t v521;
  uint64_t jj;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  __int128 v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  uint64_t v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  __int128 v544;
  uint64_t v545;
  llvm::Type *v546;
  int v547;
  uint64_t v548;
  const char *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  llvm::ConstantInt *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t MulExpr;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  llvm::SCEV *v571;
  llvm::SCEV *v572;
  unint64_t v573;
  llvm::SCEV *v574;
  uint64_t v575;
  _BOOL4 v576;
  _BOOL4 isValueValidForType;
  uint64_t v578;
  uint64_t v579;
  _BYTE *v580;
  uint64_t v581;
  uint64_t v582;
  __int128 v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  char v587;
  int v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  BOOL v592;
  llvm::SCEV *v594;
  unint64_t v595;
  llvm::SCEV *v596;
  unsigned int v597;
  uint64_t *v598;
  uint64_t *v599;
  uint64_t *v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t v603;
  BOOL v604;
  void *v605;
  llvm::Type *v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  __int128 v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  llvm::Type **v615;
  llvm::Type **v616;
  llvm::Type *v617;
  uint64_t *v618;
  llvm::SCEV *AnyExtendExpr;
  const llvm::SCEV **v620;
  uint64_t v621;
  llvm::SCEV *v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  void **v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  _QWORD *v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  _QWORD **v638;
  unsigned int v639;
  uint64_t v640;
  unsigned int v641;
  const void *v642;
  void *v643;
  const void *v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  int v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t *v654;
  BOOL v655;
  uint64_t v656;
  BOOL v657;
  uint64_t v658;
  uint64_t v659;
  const char *v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  unint64_t v666;
  unint64_t v667;
  uint64_t v668;
  llvm::SCEV *v669;
  int v670;
  int v671;
  int v672;
  uint64_t v673;
  llvm::ScalarEvolution *v674;
  llvm::SCEV *v675;
  uint64_t v676;
  llvm::SCEV *v677;
  uint64_t v678;
  _QWORD *v679;
  _QWORD *v680;
  _QWORD *v681;
  uint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  uint64_t v696;
  _QWORD *v697;
  int v698;
  unsigned int v699;
  uint64_t v700;
  const llvm::SCEV *v701;
  llvm::SCEV *v702;
  uint64_t v703;
  llvm::SCEV *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  _QWORD **v714;
  uint64_t *v715;
  uint64_t **v716;
  uint64_t **v717;
  uint64_t v718;
  uint64_t *v719;
  _QWORD *v720;
  uint64_t v721;
  unint64_t *v722;
  _QWORD *v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  void *v727;
  int v728;
  int v729;
  _QWORD *v730;
  _QWORD *v731;
  uint64_t v732;
  char *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  unint64_t v738;
  uint64_t v739;
  _QWORD *v740;
  _QWORD *v741;
  _QWORD *v742;
  uint64_t v743;
  int64_t v744;
  int64_t v745;
  BOOL v746;
  _QWORD *v747;
  uint64_t v748;
  unint64_t *v749;
  _QWORD *v750;
  uint64_t v752;
  unint64_t v753;
  unsigned int v754;
  unint64_t v755;
  uint64_t v756;
  unint64_t v757;
  char *v758;
  uint64_t v759;
  uint64_t v760;
  _QWORD *v761;
  unint64_t *v763;
  uint64_t v764;
  char *v765;
  uint64_t v766;
  __int128 v767;
  unint64_t v768;
  _QWORD *v769;
  _QWORD *v770;
  unint64_t v771;
  uint64_t v772;
  __int32 v773;
  int8x8_t *v774;
  uint64_t v775;
  int8x8_t v776;
  uint8x8_t v777;
  uint8x8_t v778;
  void **v779;
  void ***v780;
  uint64_t v781;
  uint64_t v782;
  _QWORD **v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  unint64_t v793;
  BOOL v795;
  uint64_t v796;
  uint64_t v797;
  llvm::Type *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t *v801;
  _QWORD *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t *v805;
  uint64_t v806;
  int v807;
  BOOL v808;
  BOOL v809;
  uint64_t v810;
  __int128 v812;
  int v813;
  uint64_t *v814;
  char *v815;
  uint64_t *v816;
  int v817;
  __int128 v818;
  uint64_t v819;
  unsigned int v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  int v825;
  char v826;
  unint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v833;
  unint64_t kk;
  uint64_t v835;
  uint64_t v836;
  unsigned int v837;
  uint64_t v838;
  int *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int *v846;
  int v847;
  uint64_t v849;
  uint64_t v850;
  int v851;
  uint64_t *v852;
  int v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  int v861;
  uint64_t v862;
  unint64_t v863;
  unint64_t v864;
  uint64_t v865;
  size_t *v866;
  unint64_t v867;
  unsigned int v868;
  uint64_t v869;
  void *v870;
  uint64_t v871;
  const void *v872;
  const void *v873;
  int v874;
  unsigned int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  char v879;
  uint64_t v880;
  uint64_t *v881;
  uint64_t *v882;
  uint64_t v883;
  __int128 *v884;
  uint64_t v885;
  unsigned int v886;
  uint64_t v887;
  _QWORD *v888;
  int v889;
  int v890;
  __int128 v891;
  uint64_t v892;
  __int128 v893;
  uint64_t v894;
  uint64_t v895;
  _BYTE *v896;
  _BYTE *v897;
  uint64_t v898;
  int v899;
  int v900;
  __int128 v901;
  __int128 v902;
  int v903;
  int v904;
  __int128 v905;
  __int128 v906;
  unsigned int v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  _QWORD *v913;
  _QWORD *v914;
  uint64_t v915;
  unint64_t v916;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  _BOOL4 v920;
  unint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  unsigned int v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  unsigned int *v932;
  uint64_t v933;
  unint64_t v934;
  BOOL v936;
  llvm::ConstantInt *v937;
  uint64_t v938;
  uint64_t v939;
  char v940;
  uint64_t v941;
  llvm::Type *v942;
  uint64_t v943;
  uint64_t v944;
  __int128 *v945;
  void *v946;
  uint64_t v947;
  uint64_t *v948;
  uint64_t v949;
  uint64_t *v950;
  uint64_t v951;
  char *v952;
  uint64_t *v953;
  uint64_t v954;
  _QWORD *v955;
  unint64_t v956;
  uint64_t v957;
  unsigned __int32 v958;
  int8x8_t *v959;
  uint64_t v960;
  int8x8_t v961;
  uint8x8_t v962;
  uint8x8_t v963;
  uint64_t v964;
  uint64_t *v965;
  uint64_t v966;
  char *v967;
  uint64_t *v968;
  uint64_t v969;
  _QWORD *v970;
  unint64_t v971;
  uint64_t v972;
  unsigned __int32 v973;
  int8x8_t *v974;
  uint64_t v975;
  int8x8_t v976;
  uint8x8_t v977;
  uint8x8_t v978;
  uint64_t v979;
  BOOL v980;
  void *v981;
  uint64_t v982;
  int v983;
  uint64_t v984;
  __int128 v985;
  __int128 v986;
  uint64_t v987;
  __int128 v988;
  int v989;
  unsigned int v990;
  void *v991;
  int v992;
  unsigned int v993;
  void *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  BOOL v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  _QWORD *v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  _QWORD *v1010;
  uint64_t v1011;
  uint64_t v1012;
  int *v1013;
  unint64_t v1014;
  unint64_t v1015;
  unsigned int v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unsigned int v1020;
  uint64_t v1021;
  unsigned int *v1022;
  unint64_t v1023;
  uint64_t v1024;
  unint64_t v1025;
  BOOL v1027;
  unsigned int v1029;
  uint64_t v1030;
  unsigned int *v1031;
  unint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  BOOL v1037;
  uint64_t v1038;
  uint64_t v1039;
  unsigned __int32 v1040;
  uint64_t *v1041;
  uint64_t *v1042;
  uint64_t v1043;
  _QWORD *v1044;
  _BYTE *v1045;
  _QWORD *v1046;
  _QWORD *v1047;
  unint64_t v1048;
  uint64_t v1049;
  unsigned __int32 v1050;
  int8x8_t *v1051;
  uint64_t v1052;
  int8x8_t v1053;
  uint8x8_t v1054;
  uint8x8_t v1055;
  unint64_t v1056;
  uint64_t v1057;
  int8x8_t *v1058;
  uint64_t v1059;
  int8x8_t v1060;
  uint8x8_t v1061;
  uint8x8_t v1062;
  BOOL v1063;
  uint64_t v1064;
  uint64_t mm;
  uint64_t v1066;
  uint64_t v1067;
  _QWORD *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  char v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t v1077;
  _QWORD *v1078;
  uint64_t v1079;
  uint64_t v1080;
  _QWORD *v1081;
  llvm::SmallPtrSetImplBase *v1082;
  unint64_t v1083;
  uint64_t v1084;
  unsigned int *v1085;
  uint64_t v1086;
  unint64_t v1087;
  BOOL v1089;
  uint64_t v1090;
  uint64_t *v1091;
  uint64_t *v1092;
  uint64_t v1093;
  _QWORD *v1094;
  _BYTE *v1095;
  unsigned int v1096;
  float v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  _QWORD *v1102;
  uint64_t v1103;
  unsigned int *v1104;
  float v1105;
  llvm::SmallPtrSetImplBase *v1106;
  uint64_t v1107;
  llvm::Type *v1108;
  llvm::Type *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  float v1114;
  float v1115;
  _OWORD *v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t *v1119;
  uint64_t v1120;
  float v1121;
  float v1122;
  uint64_t v1123;
  _QWORD *v1124;
  _BYTE *v1125;
  float v1126;
  float v1127;
  uint64_t v1128;
  _QWORD *v1129;
  unsigned int *v1130;
  BOOL v1131;
  float v1132;
  float v1133;
  _OWORD *v1134;
  uint64_t v1135;
  __int128 v1136;
  _OWORD *v1137;
  __int128 v1138;
  __int128 v1139;
  unsigned int v1140;
  uint64_t v1141;
  void *v1142;
  _OWORD *v1143;
  uint64_t v1144;
  uint64_t *v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  void *v1149;
  uint64_t v1150;
  int v1151;
  __int128 v1152;
  unint64_t v1153;
  uint64_t v1154;
  int v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  void ***v1159;
  int v1160;
  unsigned int v1161;
  _QWORD *v1162;
  uint64_t v1163;
  uint64_t v1164;
  void ***v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unsigned int v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  llvm::Type *v1173;
  uint64_t v1174;
  unsigned int v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int v1182;
  uint64_t v1183;
  uint64_t v1184;
  _QWORD *v1185;
  int v1186;
  _QWORD *v1187;
  _QWORD *v1188;
  int v1189;
  unsigned __int8 *v1190;
  unsigned __int8 *v1191;
  int v1192;
  uint64_t **v1193;
  uint64_t v1194;
  int v1195;
  uint64_t v1196;
  unsigned int v1197;
  uint64_t v1198;
  uint64_t **v1199;
  int v1200;
  int v1201;
  uint64_t v1202;
  uint64_t *v1203;
  uint64_t v1204;
  uint64_t v1205;
  int v1206;
  uint64_t v1207;
  int v1208;
  uint64_t v1209;
  int v1210;
  uint64_t **v1211;
  uint64_t v1212;
  _QWORD *v1213;
  _QWORD *v1214;
  _QWORD *v1215;
  int v1216;
  BOOL v1217;
  int v1218;
  _QWORD *v1219;
  _QWORD *v1220;
  uint64_t v1221;
  uint64_t v1222;
  unsigned __int8 *v1223;
  uint64_t v1224;
  uint64_t v1225;
  int CastOpcode;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  unsigned int v1232;
  _QWORD *v1233;
  _QWORD *v1234;
  int v1235;
  uint64_t v1236;
  _QWORD *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  int v1245;
  uint64_t v1246;
  _QWORD *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  _QWORD *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  _QWORD *v1255;
  uint64_t v1256;
  uint64_t v1257;
  int v1258;
  uint64_t v1259;
  unsigned __int8 *v1260;
  unsigned __int8 *v1261;
  int v1262;
  unsigned __int8 *v1263;
  _DWORD *v1264;
  int v1265;
  _DWORD *v1266;
  uint64_t v1267;
  uint64_t v1268;
  _QWORD *v1269;
  uint64_t v1270;
  llvm::SCEV *v1271;
  void *v1272;
  int v1273;
  llvm::ValueHandleBase *v1274;
  unsigned int v1276;
  unint64_t **v1277;
  unint64_t *v1278;
  int v1279;
  unint64_t *v1280;
  unint64_t *v1281;
  unint64_t *v1282;
  unint64_t v1283;
  llvm::Value *v1284;
  uint64_t v1285;
  uint64_t v1286;
  unsigned int v1287;
  unsigned int v1288;
  uint64_t v1289;
  uint64_t v1290;
  int v1291;
  unsigned int v1292;
  uint64_t v1293;
  unint64_t *v1294;
  uint64_t v1295;
  uint64_t v1296;
  unsigned int v1297;
  unsigned int v1298;
  uint64_t v1299;
  llvm::Value *v1300;
  int v1301;
  unsigned int v1302;
  uint64_t v1303;
  unint64_t **v1304;
  unsigned int v1305;
  unsigned int v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  llvm::Instruction *v1310;
  uint64_t v1311;
  uint64_t v1312;
  unsigned __int8 *v1313;
  llvm::SCEV *v1314;
  uint64_t v1315;
  uint64_t v1316;
  unsigned __int8 *v1317;
  unsigned __int8 *v1318;
  llvm::ScalarEvolution *v1319;
  unint64_t Unknown;
  unint64_t v1321;
  llvm::Instruction **v1322;
  uint64_t v1323;
  _DWORD **v1324;
  uint64_t v1325;
  int v1326;
  llvm::Value *v1327;
  uint64_t v1328;
  void *v1329;
  int v1330;
  llvm::ValueHandleBase *v1331;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  int v1338;
  unsigned int v1339;
  void *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unsigned int v1345;
  uint64_t v1346;
  int v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  llvm::SCEV *v1353;
  uint64_t v1354;
  uint64_t v1355;
  unsigned int v1356;
  unsigned int v1357;
  unsigned int v1358;
  uint64_t v1359;
  llvm::SCEV *v1360;
  int v1361;
  unsigned int v1362;
  uint64_t v1363;
  uint64_t v1364;
  unsigned int v1365;
  unsigned int v1366;
  uint64_t v1367;
  llvm::Value *v1368;
  int v1369;
  unsigned int v1370;
  uint64_t v1371;
  llvm::Value *v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  unsigned __int8 *v1378;
  unsigned __int8 *v1379;
  uint64_t v1380;
  int v1381;
  llvm::SCEV *v1382;
  llvm::ValueHandleBase *v1383;
  uint64_t v1384;
  uint64_t v1385;
  llvm::Type *v1386;
  llvm::SCEV *v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t *v1390;
  int32x2_t **v1391;
  void (**v1392)(void);
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  llvm::Instruction *v1397;
  int v1398;
  llvm::Instruction *v1399;
  const llvm::Use *v1400;
  uint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  unint64_t v1404;
  _QWORD *v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  llvm::ValueSymbolTable *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t *v1420;
  uint64_t v1421;
  size_t *v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  llvm::SmallPtrSetImplBase **v1428;
  uint64_t v1429;
  uint64_t v1430;
  llvm::ConstantInt *v1431;
  uint64_t v1432;
  llvm::ConstantInt *v1433;
  llvm::ConstantInt *v1434;
  _QWORD *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  unsigned int v1443;
  uint64_t v1444;
  unint64_t v1445;
  int v1446;
  int v1447;
  _DWORD **v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unsigned int v1452;
  _QWORD *v1453;
  llvm::APInt *v1454;
  llvm::APInt *v1455;
  llvm::APInt *v1456;
  int v1457;
  llvm::APInt *v1458;
  llvm::APInt *v1459;
  llvm::APInt *v1460;
  llvm::APInt *v1461;
  uint64_t *v1462;
  uint64_t *v1463;
  uint64_t *v1464;
  uint64_t v1465;
  uint64_t v1466;
  _QWORD *v1467;
  llvm::Value *__n;
  size_t __na;
  llvm::Instruction *__nb;
  size_t __nc;
  uint64_t *__nd;
  size_t __ne;
  uint64_t *__nf;
  size_t __ng;
  size_t __nh;
  size_t __ni;
  size_t __nj;
  uint64_t v1479;
  int *v1480;
  uint64_t *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t *v1484;
  char *v1485;
  _QWORD *v1486;
  uint64_t *v1487;
  _QWORD *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t *v1491;
  char v1492;
  uint64_t *v1493;
  uint64_t v1494;
  _BOOL8 v1495;
  int v1496;
  llvm::SmallPtrSetImplBase *v1497;
  llvm::SmallPtrSetImplBase *v1498;
  llvm::Value **v1499;
  llvm::SmallPtrSetImplBase *v1500;
  llvm::SmallPtrSetImplBase *v1501;
  int *v1502;
  llvm::SmallPtrSetImplBase *v1503;
  llvm::SmallPtrSetImplBase *v1504;
  llvm::SmallPtrSetImplBase *v1505;
  llvm::SmallPtrSetImplBase *v1506;
  llvm::SmallPtrSetImplBase *v1507;
  llvm::SmallPtrSetImplBase *v1508;
  llvm::SmallPtrSetImplBase *v1509;
  llvm::Type *v1510;
  uint64_t *v1511;
  llvm::Type *v1512;
  llvm::Type *v1513;
  llvm::Type *v1514;
  llvm::Type *v1515;
  llvm::Type *v1516;
  llvm::Type *v1517;
  llvm::Type *v1518;
  llvm::Type *v1519;
  int v1520;
  uint64_t v1521;
  _BOOL8 v1522;
  llvm::ScalarEvolution *v1523;
  uint64_t v1524;
  unsigned int v1525;
  uint64_t m;
  uint64_t v1527;
  llvm::Type *v1528;
  _BOOL4 v1529;
  uint64_t v1530;
  uint64_t *v1531;
  uint64_t *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t PointerBase;
  uint64_t v1536;
  int *v1537;
  uint64_t v1538;
  uint64_t v1539;
  llvm::SmallPtrSetImplBase *v1540;
  uint64_t v1541;
  llvm::Type *v1542;
  llvm::Type *v1543;
  unsigned int v1544;
  uint64_t v1545;
  unint64_t v1546;
  llvm::Type *v1547;
  llvm::Type *v1548;
  llvm::Type *v1549;
  llvm::Type *v1550;
  llvm::Type *v1551;
  llvm::Type *v1552;
  llvm::Type *v1553;
  int *v1554;
  llvm::Type *v1555;
  llvm::Type *v1556;
  llvm::Type *v1557;
  llvm::Type *v1558;
  void **v1559[2];
  unsigned int v1560;
  _QWORD v1561[2];
  unsigned int v1562;
  __int128 v1563;
  __int128 v1564;
  void *v1565;
  uint64_t v1566;
  _BYTE v1567[32];
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  void *v1571;
  uint64_t v1572;
  _BYTE v1573[32];
  __int128 v1574;
  __int128 v1575;
  __int128 v1576;
  void *v1577;
  uint64_t v1578;
  _BYTE v1579[32];
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  void *v1583;
  uint64_t v1584;
  _OWORD v1585[3];
  __int128 v1586;
  __int128 v1587;
  void *v1588;
  uint64_t v1589;
  _OWORD v1590[3];
  llvm::SCEV *v1591[2];
  __int128 v1592;
  void *v1593;
  uint64_t v1594;
  _BYTE v1595[32];
  __int128 v1596;
  llvm::Instruction *v1597[2];
  _BYTE v1598[24];
  __int128 v1599;
  int v1600;
  __int128 v1601;
  __int128 v1602;
  uint64_t v1603;
  __int128 *v1604;
  void *v1605;
  void *v1606[2];
  _BYTE v1607[24];
  __int128 v1608;
  int v1609;
  __int128 v1610;
  __int128 *v1611;
  __int128 v1612;
  void *v1613;
  uint64_t v1614;
  _BYTE v1615[64];
  void *v1616;
  _BYTE __b[40];
  void *v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  llvm::SCEV *v1622[24];
  unsigned int v1623;
  void *v1624;
  void *v1625;
  unsigned int v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  _WORD v1630[112];
  __int128 v1631;
  __int128 v1632;
  _QWORD v1633[2];
  uint64_t v1634;
  _BYTE *v1635;
  _BYTE *v1636;
  uint64_t v1637;
  int v1638;
  _BYTE v1639[32];
  void *v1640;
  void *v1641;
  uint64_t v1642;
  unint64_t v1643[2];
  __int128 v1644;
  int v1645;
  uint64_t v1646;

  v1646 = *MEMORY[0x1E0C80C00];
  v14 = (_DWORD *)(a1 + 31432);
  v15 = (int64x2_t *)(a1 + 280);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a8;
  *(_QWORD *)(a1 + 40) = a9;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = this;
  *(_QWORD *)(a1 + 64) = a10;
  if (word_1ED8203C0)
    v16 = dword_1ED820438;
  else
    v16 = (*(uint64_t (**)(_QWORD, llvm::Loop *, uint64_t))(**(_QWORD **)a7 + 312))(*(_QWORD *)a7, this, a4);
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_DWORD *)(a1 + 72) = v16;
  *(_BYTE *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 96) = 0x800000000;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x800000000;
  *(_QWORD *)(a1 + 272) = 1;
  v1435 = (_QWORD *)(a1 + 272);
  v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *v15 = v17;
  v15[1] = v17;
  *(_QWORD *)(a1 + 312) = a1 + 328;
  *(_QWORD *)(a1 + 320) = 0x400000000;
  *(_QWORD *)(a1 + 360) = a1 + 376;
  *(_QWORD *)(a1 + 368) = 0x1000000000;
  *(_OWORD *)(a1 + 30840) = 0u;
  v1462 = (uint64_t *)(a1 + 30840);
  *(_DWORD *)(a1 + 30856) = 0;
  *(_QWORD *)(a1 + 30864) = a1 + 30880;
  *(_QWORD *)(a1 + 30872) = 0x1000000000;
  *(_QWORD *)(a1 + 31008) = a1 + 31024;
  *(_QWORD *)(a1 + 31016) = 0x800000000;
  *(_QWORD *)(a1 + 31408) = a1 + 31440;
  *(_QWORD *)(a1 + 31416) = a1 + 31440;
  *(_QWORD *)(a1 + 31424) = 8;
  *v14 = 0;
  *(_QWORD *)(a1 + 31504) = a1 + 31520;
  *(_QWORD *)(a1 + 31512) = 0x200000000;
  v1510 = (llvm::Type *)(a1 + 88);
  *(_DWORD *)(a1 + 31584) = 0;
  *(_OWORD *)(a1 + 31568) = 0u;
  if (!llvm::Loop::isLoopSimplifyForm(this))
    return a1;
  v18 = (_QWORD *)(a3 + 200);
  if (*(_QWORD *)(a3 + 200) == a3 + 200)
    return a1;
  v19 = *(_QWORD **)(a3 + 208);
  if (v19 != v18)
  {
    v20 = 0;
    do
    {
      if (v20 == 200)
        return a1;
      v21 = v19 - 4;
      if (!v19)
        v21 = 0;
      v22 = v21[3];
      if (v22 && *(_BYTE *)(v22 + 16) == 83)
      {
        for (i = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 48); ; i = *(_QWORD *)(i + 8))
        {
          v24 = i - 24;
          if (!i)
            v24 = 0;
          if (*(_BYTE *)(v24 + 16) != 83)
            break;
        }
        v25 = *(unsigned __int8 *)(i - 8);
        v26 = v25 != 38 && (v25 - 79) > 1;
        if (!v26)
        {
          v27 = *(_DWORD *)(v22 + 20);
          if ((v27 & 0x40000000) != 0)
          {
            v29 = *(_QWORD *)(v22 - 8);
            v28 = v27 & 0x7FFFFFF;
            if (v28)
            {
LABEL_26:
              v30 = v29 + 32 * *(unsigned int *)(v22 + 60);
              v31 = v30 + 8 * v28;
              do
              {
                for (j = *(_QWORD *)(*(_QWORD *)v30 + 48); ; j = *(_QWORD *)(j + 8))
                {
                  v33 = j - 24;
                  if (!j)
                    v33 = 0;
                  if (*(_BYTE *)(v33 + 16) != 83)
                    break;
                }
                if (*(_BYTE *)(j - 8) == 38)
                  return a1;
                v30 += 8;
              }
              while (v30 != v31);
            }
          }
          else
          {
            v28 = v27 & 0x7FFFFFF;
            v29 = v22 - 32 * v28;
            if (v28)
              goto LABEL_26;
          }
        }
      }
      ++v20;
      v19 = (_QWORD *)v19[1];
    }
    while (v19 != v18);
  }
  v1542 = a7;
  v34 = *(llvm::ScalarEvolution **)(a1 + 8);
  v35 = *(const llvm::Loop **)(a1 + 56);
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v34, v35);
  if (*(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)v35, (uint64_t)v34, 0)+ 24) == 15)goto LABEL_143;
  v37 = *(_QWORD *)a1 + 200;
  v38 = *(_QWORD *)(*(_QWORD *)a1 + 208);
  if (v38 == v37)
    goto LABEL_143;
  while (1)
  {
    v39 = v38 - 32;
    v42 = v38 == 0;
    v38 = *(_QWORD *)(v38 + 8);
    if (v42)
      v39 = 0;
    v40 = *(llvm::Type ***)(v39 + 24);
    v41 = *((unsigned __int8 *)v40 + 16);
    if (v40)
      v42 = v41 == 71;
    else
      v42 = 0;
    v43 = !v42;
    v44 = v41 - 73;
    if (v40)
      v45 = v44 >= 0xFFFFFFFE;
    else
      v45 = 0;
    if (!v45)
      goto LABEL_72;
    v46 = *v40;
    if (!*v40
      || !(*(unsigned int (**)(_QWORD, llvm::Type *))(***(_QWORD ***)(a1 + 48) + 480))(**(_QWORD **)(a1 + 48), *v40))
    {
      goto LABEL_72;
    }
    v47 = *((_DWORD *)v40 + 5);
    v48 = (v47 & 0x40000000) != 0 ? (unint64_t *)*(v40 - 1) : (unint64_t *)&v40[-4 * (v47 & 0x7FFFFFF)];
    v49 = *v48;
    if (!*v48 || *(_BYTE *)(v49 + 16) != 83 || (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) != 2)
      goto LABEL_72;
    v50 = *(_QWORD *)(a1 + 8);
    v51 = *(_QWORD *)(v50 + 104);
    v52 = *(_DWORD *)(v50 + 120);
    if (!v52)
      goto LABEL_64;
    v53 = (v52 - 1) & ((v49 >> 4) ^ (v49 >> 9));
    v54 = v51 + 48 * v53;
    v55 = *(_QWORD *)(v54 + 24);
    if (v55 != v49)
    {
      v56 = 1;
      while (v55 != -4096)
      {
        v57 = v53 + v56++;
        v53 = v57 & (v52 - 1);
        v54 = v51 + 48 * v53;
        v55 = *(_QWORD *)(v54 + 24);
        if (v55 == v49)
          goto LABEL_65;
      }
LABEL_64:
      v54 = v51 + 48 * v52;
    }
LABEL_65:
    if (v54 == v51 + 48 * v52 || (SCEVIter = *(_QWORD *)(v54 + 40)) == 0)
      SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v50, v49);
    if (SCEVIter)
      v59 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
    else
      v59 = 0;
    if (!v59)
      goto LABEL_72;
    v60 = *(_WORD *)(SCEVIter + 28);
    if (v43)
    {
      if ((v60 & 4) == 0)
        goto LABEL_72;
    }
    else if ((v60 & 2) == 0)
    {
      goto LABEL_72;
    }
    FPMantissaWidth = llvm::Type::getFPMantissaWidth(v46);
    if (FPMantissaWidth == -1)
      goto LABEL_72;
    v1520 = FPMantissaWidth;
    v62 = *(_QWORD *)v49;
    v63 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
    if (*(_BYTE *)(*(_QWORD *)v49 + 8) == 15)
    {
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v63, v62);
    }
    else
    {
      sub_1C4768AD0(v63, v62);
      if ((_DWORD)v65 == 1)
      {
        v1496 = IndexTypeSizeInBits;
        IndexTypeSizeInBits = v1496;
      }
    }
    if (v1520 < IndexTypeSizeInBits)
      goto LABEL_72;
    v66 = *(_DWORD *)(v49 + 20);
    v67 = (v66 & 0x40000000) != 0 ? *(_QWORD *)(v49 - 8) : v49 - 32 * (v66 & 0x7FFFFFF);
    v1521 = *(_QWORD *)(v67 + 32 * *(unsigned int *)(v49 + 60));
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 56));
    if (!result)
      goto LABEL_92;
    v70 = *(_QWORD *)(result + 40);
    if (v70 == result + 40)
      goto LABEL_92;
    v71 = v70 - 24;
    if (!v70)
      v71 = 0;
    v72 = *(unsigned __int8 *)(v71 + 16);
    v73 = v72 - 29;
    if (v72 != 30)
    {
      v74 = 0;
      switch(v73)
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_97;
        case 1:
          __break(1u);
          return result;
        case 2:
          v75 = (*(_DWORD *)(v71 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_95;
        case 3:
          v75 = (*(_DWORD *)(v71 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_95;
        case 10:
          v75 = *(_DWORD *)(v71 + 80) + 1;
LABEL_95:
          if (v75 == 1)
            goto LABEL_96;
          goto LABEL_92;
        default:
          goto LABEL_92;
      }
    }
    if ((*(_DWORD *)(v71 + 20) & 0x7FFFFFF) == 3)
LABEL_92:
      v74 = 0;
    else
LABEL_96:
      v74 = result;
LABEL_97:
    v76 = v1521 == v74;
    v77 = *(_DWORD *)(v49 + 20);
    v78 = (v77 & 0x40000000) != 0 ? *(_QWORD *)(v49 - 8) : v49 - 32 * (v77 & 0x7FFFFFF);
    v1495 = v1521 != v74;
    v79 = *(_QWORD *)(v78 + 32 * v1495);
    if (!v79 || *(_BYTE *)(v79 + 16) != 16)
      goto LABEL_72;
    v80 = (_QWORD **)(v79 + 24);
    v81 = *(_DWORD *)(v79 + 32);
    v1522 = v76;
    if (v43)
    {
      v82 = v81 > 0x40 ? **v80 : (uint64_t)((_QWORD)*v80 << -(char)v81) >> -(char)v81;
      v83 = (double)v82;
    }
    else
    {
      if (v81 >= 0x41)
        v80 = (_QWORD **)*v80;
      v83 = (double)(unint64_t)*v80;
    }
    v84 = llvm::ConstantFP::get((llvm::ConstantFP **)v46, v69, v83);
    v85 = *(_DWORD *)(v49 + 20);
    v86 = (v85 & 0x40000000) != 0 ? *(_QWORD *)(v49 - 8) : v49 - 32 * (v85 & 0x7FFFFFF);
    v87 = *(_QWORD *)(v86 + 32 * v1522);
    if (!v87)
      goto LABEL_72;
    v88 = *(unsigned __int8 *)(v87 + 16);
    if (v88 < 0x1C || v88 - 59 < 0xFFFFFFEE || (v88 | 2) != 0x2B)
      goto LABEL_72;
    v89 = *(_QWORD *)(v87 - 64);
    v90 = *(_QWORD *)(v87 - 32);
    if (v89 != v49)
      break;
    if (*(_BYTE *)(v90 + 16) == 16)
      goto LABEL_122;
LABEL_72:
    if (v38 == v37)
      goto LABEL_143;
  }
  if (v90 != v49)
    goto LABEL_72;
  v90 = *(_QWORD *)(v87 - 64);
  if (*(_BYTE *)(v89 + 16) != 16)
    goto LABEL_72;
LABEL_122:
  v1479 = v90;
  v1482 = (uint64_t)v84;
  v1488 = (_QWORD *)(v90 + 24);
  if (!sub_1C49591DC((llvm::APInt *)(v90 + 24)))
    goto LABEL_72;
  *(_QWORD *)__b = "IV.S.";
  *(_WORD *)&__b[32] = 259;
  v91 = operator new(0x48uLL);
  v92 = v91;
  v91[1] = v46;
  __n = (llvm::Value *)(v91 + 1);
  *v91 = 0;
  v91[2] = 0;
  v91[3] = 0x4000000000000053;
  *((_OWORD *)v91 + 2) = 0u;
  v93 = (char *)(v91 + 4);
  *((_OWORD *)v91 + 3) = 0u;
  *((_DWORD *)v91 + 16) = 0;
  v94 = *(_QWORD *)(v49 + 40);
  v95 = (uint64_t *)(v49 + 24);
  v91[6] = v94;
  *(_WORD *)(v94 + 18) &= ~0x8000u;
  if ((*((_BYTE *)v91 + 31) & 0x10) != 0)
  {
    v1408 = *(_QWORD *)(v94 + 56);
    if (v1408)
    {
      v1409 = *(llvm::ValueSymbolTable **)(v1408 + 104);
      if (v1409)
        llvm::ValueSymbolTable::reinsertValue(v1409, __n);
    }
  }
  v96 = *v95;
  v92[4] = *v95;
  v92[5] = v95;
  *(_QWORD *)(v96 + 8) = v93;
  *v95 = (uint64_t)v93;
  *((_DWORD *)v92 + 17) = 2;
  llvm::Value::setName((uint64_t ***)__n, (uint64_t)__b);
  v97 = *((unsigned int *)v92 + 17);
  v98 = operator new(40 * v97);
  *v92 = v98;
  if ((_DWORD)v97)
  {
    v100 = &v98[4 * v97];
    do
    {
      *v98 = 0;
      v98[1] = 0;
      v98[2] = 0;
      v98[3] = __n;
      v98 += 4;
    }
    while (v98 != v100);
  }
  if (*(_DWORD *)(v1479 + 32) >= 0x41u)
    v1488 = (_QWORD *)*v1488;
  v101 = llvm::ConstantFP::get((llvm::ConstantFP **)v46, v99, (double)(unint64_t)*v1488);
  if (*(_BYTE *)(v87 + 16) == 41)
    v102 = 14;
  else
    v102 = 16;
  *(_QWORD *)__b = "IV.S.next.";
  *(_WORD *)&__b[32] = 259;
  v103 = llvm::BinaryOperator::Create(v102, __n, (uint64_t)v101, (uint64_t)__b, v87);
  v104 = *(_DWORD *)(v49 + 20);
  if ((v104 & 0x40000000) != 0)
    v105 = *(_QWORD *)(v49 - 8);
  else
    v105 = v49 - 32 * (v104 & 0x7FFFFFF);
  sub_1C477667C(__n, v1482, *(_QWORD *)(v105 + 32 * *(unsigned int *)(v49 + 60) + 8 * v1495));
  v106 = *(_DWORD *)(v49 + 20);
  if ((v106 & 0x40000000) != 0)
    v107 = *(_QWORD *)(v49 - 8);
  else
    v107 = v49 - 32 * (v106 & 0x7FFFFFF);
  sub_1C477667C(__n, (uint64_t)v103, *(_QWORD *)(v107 + 32 * *(unsigned int *)(v49 + 60) + 8 * v1522));
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v40, __n, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v40[5] + 40, (uint64_t ***)v40);
  v108 = v40[3];
  v109 = v40[4];
  *(_QWORD *)v109 = v108;
  *((_QWORD *)v108 + 1) = v109;
  v40[3] = 0;
  v40[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v40);
  *(_BYTE *)(a1 + 76) = 1;
LABEL_143:
  v1606[0] = &v1607[16];
  v1606[1] = &v1607[16];
  *(_QWORD *)v1607 = 4;
  *(_DWORD *)&v1607[8] = 0;
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
  *(_QWORD *)__b = &__b[16];
  *(_QWORD *)&__b[8] = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(*(_QWORD **)(a1 + 56), (uint64_t)__b);
  if (!*(_DWORD *)&__b[8])
  {
LABEL_147:
    v115 = *(_QWORD *)(LoopLatch + 40);
    if (v115 == LoopLatch + 40)
    {
      v116 = 0;
    }
    else
    {
      if (v115)
        v116 = v115 - 24;
      else
        v116 = 0;
      if (*(unsigned __int8 *)(v116 + 16) - 29 >= 0xB)
        v116 = 0;
    }
    *(_QWORD *)(a1 + 80) = v116;
    v274 = v1542;
    goto LABEL_406;
  }
  v111 = *(uint64_t **)__b;
  v112 = *(_QWORD *)__b + 8 * *(unsigned int *)&__b[8];
  v113 = 8 * *(unsigned int *)&__b[8];
  v114 = *(_QWORD **)__b;
  while (LoopLatch != *v114)
  {
    ++v114;
    v113 -= 8;
    if (!v113)
      goto LABEL_147;
  }
  v1483 = LoopLatch;
  v1489 = *(_QWORD *)__b + 8 * *(unsigned int *)&__b[8];
  while (2)
  {
    v117 = *v111;
    v118 = *(_QWORD *)(*v111 + 40);
    if (v118 != *v111 + 40)
    {
      v119 = v118 ? v118 - 24 : 0;
      v120 = *(unsigned __int8 *)(v119 + 16) - 40;
      v121 = v120 >= 0xFFFFFFF5 ? v119 : 0;
      if (v118)
      {
        if (*(_BYTE *)(v121 + 16) == 30 && v120 >= 0xFFFFFFF5 && (*(_DWORD *)(v121 + 20) & 0x7FFFFFF) != 1)
        {
          v123 = *(_QWORD *)(v121 - 96);
          if (*(_BYTE *)(v123 + 16) == 81)
          {
            for (k = *(_QWORD *)(*(_QWORD *)a1 + 208); ; k = *(_QWORD *)(k + 8))
            {
              if (k == *(_QWORD *)a1 + 200)
                goto LABEL_259;
              v125 = k - 32;
              v126 = k ? k - 32 : 0;
              if (*(_QWORD *)(v126 + 24) == v123)
                break;
            }
            if ((*(_WORD *)(v123 + 18) & 0x3E) != 0x20)
              goto LABEL_239;
            v127 = *(_QWORD *)(v123 - 32);
            if (!v127)
              goto LABEL_239;
            if (*(_BYTE *)(v127 + 16) != 85)
              goto LABEL_239;
            v128 = *(_QWORD *)(v127 + 8);
            if (!v128 || *(_QWORD *)(v128 + 8))
              goto LABEL_239;
            v1523 = *(llvm::ScalarEvolution **)(a1 + 8);
            v1497 = *(llvm::SmallPtrSetImplBase **)(a1 + 56);
            v129 = llvm::ScalarEvolution::getBackedgeTakenInfo(v1523, v1497);
            Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)v129, (uint64_t)v1497, (uint64_t)v1523, 0);
            v131 = *(unsigned __int16 *)(Exact + 24);
            v132 = Exact;
            v1498 = (llvm::SmallPtrSetImplBase *)v127;
            v1524 = Exact;
            while (2)
            {
              switch(v131)
              {
                case 0:
                  v134 = *(llvm::Type ***)(v132 + 32);
                  goto LABEL_190;
                case 1:
                case 2:
                case 3:
                case 13:
                  v134 = (llvm::Type **)(v132 + 40);
                  goto LABEL_190;
                case 4:
                  v134 = (llvm::Type **)(v132 + 48);
                  goto LABEL_190;
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                  v133 = *(uint64_t **)(v132 + 32);
                  goto LABEL_185;
                case 6:
                  v133 = (uint64_t *)(v132 + 40);
LABEL_185:
                  v132 = *v133;
                  v131 = *(unsigned __int16 *)(v132 + 24);
                  continue;
                case 14:
                  v134 = *(llvm::Type ***)(v132 - 8);
LABEL_190:
                  Constant = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 8), *v134, 1, 0);
                  v136 = *(_QWORD *)(a1 + 8);
                  v1640 = &v1642;
                  __na = Constant;
                  v1642 = Constant;
                  v1643[0] = v1524;
                  v1641 = (void *)0x200000002;
                  AddExpr = llvm::ScalarEvolution::getAddExpr(v136, (uint64_t)&v1640, 0, 0);
                  if (v1640 != &v1642)
                  {
                    v138 = AddExpr;
                    free(v1640);
                    AddExpr = v138;
                  }
                  v139 = *(_QWORD *)(a1 + 8);
                  v140 = *(_QWORD *)(v139 + 104);
                  v141 = *(_DWORD *)(v139 + 120);
                  if (!v141)
                    goto LABEL_198;
                  v142 = (v141 - 1) & ((v1498 >> 4) ^ (v1498 >> 9));
                  v143 = v140 + 48 * v142;
                  v144 = *(llvm::SmallPtrSetImplBase **)(v143 + 24);
                  if (v144 == v1498)
                    goto LABEL_199;
                  v145 = 1;
                  break;
                default:
                  goto LABEL_239;
              }
              break;
            }
            while (v144 != (llvm::SmallPtrSetImplBase *)-4096)
            {
              v146 = v142 + v145++;
              v142 = v146 & (v141 - 1);
              v143 = v140 + 48 * v142;
              v144 = *(llvm::SmallPtrSetImplBase **)(v143 + 24);
              if (v144 == v1498)
                goto LABEL_199;
            }
LABEL_198:
            v143 = v140 + 48 * v141;
LABEL_199:
            if (v143 == v140 + 48 * v141 || (v147 = *(_QWORD *)(v143 + 40)) == 0)
            {
              v148 = AddExpr;
              v149 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v139, (unint64_t)v1498);
              AddExpr = v148;
              v147 = v149;
            }
            if (AddExpr != v147)
              goto LABEL_239;
            v150 = v1524;
            if (!v1524 || *(_WORD *)(v1524 + 24) != 9)
            {
              v152 = *(unsigned __int16 *)(AddExpr + 24);
              if (v152 == 9 && AddExpr)
              {
                v151 = 40;
              }
              else
              {
                if (v152 != 8 || !AddExpr)
                  goto LABEL_239;
                v151 = 36;
              }
              v150 = AddExpr;
              goto LABEL_213;
            }
            v151 = 41;
LABEL_213:
            if (*(_QWORD *)(v150 + 40) != 2)
              goto LABEL_239;
            v153 = *(llvm::SCEV ***)(v150 + 32);
            v154 = *v153;
            if (!*v153)
              goto LABEL_239;
            v1454 = v153[1];
            v1525 = v151;
            if (v151 == 41)
            {
              if (llvm::SCEV::isZero(v154))
                goto LABEL_220;
              goto LABEL_239;
            }
            if (v154 != (llvm::SCEV *)__na)
              goto LABEL_239;
LABEL_220:
            v155 = *(_QWORD *)(a1 + 8);
            v156 = *(_QWORD *)(v123 - 64);
            v157 = *(_QWORD *)(v155 + 104);
            v158 = *(_DWORD *)(v155 + 120);
            if (!v158)
              goto LABEL_227;
            v159 = ((v156 >> 4) ^ (v156 >> 9)) & (v158 - 1);
            v160 = v157 + 48 * v159;
            v161 = *(_QWORD *)(v160 + 24);
            if (v161 != v156)
            {
              v162 = 1;
              while (v161 != -4096)
              {
                v163 = v159 + v162++;
                v159 = v163 & (v158 - 1);
                v160 = v157 + 48 * v159;
                v161 = *(_QWORD *)(v160 + 24);
                if (v161 == v156)
                  goto LABEL_228;
              }
LABEL_227:
              v160 = v157 + 48 * v158;
            }
LABEL_228:
            if (v160 == v157 + 48 * v158 || (v164 = *(_QWORD *)(v160 + 40)) == 0)
              v164 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v155, v156);
            v165 = v164 && *(_WORD *)(v164 + 24) == 7;
            if (!v165
              || *(_QWORD *)(v164 + 40) != 2
              || (v166 = *(_QWORD **)(v164 + 32), *v166 != __na)
              || v166[1] != __na)
            {
LABEL_239:
              __nb = (llvm::Instruction *)v123;
              goto LABEL_240;
            }
            if (((1 << v1525) & 0x22100000000) != 0)
            {
              __nc = *((_QWORD *)v1498 - 8);
              v191 = *(unsigned __int8 *)(__nc + 16);
              if (v191 != 41 && (v191 != 5 || *(_WORD *)(__nc + 18) != 13))
                goto LABEL_329;
              v1446 = *(_DWORD *)(__nc + 20);
              if ((v1446 & 0x40000000) != 0)
                v192 = *(_QWORD *)(__nc - 8);
              else
                v192 = __nc - 32 * (v1446 & 0x7FFFFFF);
              v1451 = 0;
              v212 = *(_QWORD *)(v192 + 32);
              if (v212 && *(_BYTE *)(v212 + 16) == 16)
              {
                v213 = (llvm::APInt *)(v212 + 24);
                v1452 = *(_DWORD *)(v212 + 32);
                if (v1452 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase(v213) != v1452 - 1)
                    goto LABEL_329;
                }
                else if (*(_QWORD *)v213 != 1)
                {
                  goto LABEL_329;
                }
                if ((v1446 & 0x40000000) != 0)
                  v215 = *(unint64_t **)(__nc - 8);
                else
                  v215 = (unint64_t *)(__nc - 32 * (v1446 & 0x7FFFFFF));
                v216 = *(_QWORD *)(a1 + 8);
                v217 = *v215;
                v218 = *(_QWORD *)(v216 + 104);
                v219 = *(_DWORD *)(v216 + 120);
                if (v219)
                {
                  v220 = ((v217 >> 4) ^ (v217 >> 9)) & (v219 - 1);
                  v221 = v218 + 48 * v220;
                  v222 = *(_QWORD *)(v221 + 24);
                  if (v222 != v217)
                  {
                    v223 = 1;
                    while (v222 != -4096)
                    {
                      v224 = v220 + v223++;
                      v220 = v224 & (v219 - 1);
                      v221 = v218 + 48 * v220;
                      v222 = *(_QWORD *)(v221 + 24);
                      if (v222 == v217)
                        goto LABEL_325;
                    }
                    goto LABEL_324;
                  }
                }
                else
                {
LABEL_324:
                  v221 = v218 + 48 * v219;
                }
LABEL_325:
                if (v221 == v218 + 48 * v219 || (v225 = *(_QWORD *)(v221 + 40)) == 0)
                  v225 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v216, v217);
                if ((llvm::APInt *)v225 == v1454)
                {
                  v244 = *(_DWORD *)(__nc + 20);
                  if ((v244 & 0x40000000) != 0)
                    v245 = *(uint64_t **)(__nc - 8);
                  else
                    v245 = (uint64_t *)(__nc - 32 * (v244 & 0x7FFFFFF));
                  v1451 = *v245;
                }
                else
                {
LABEL_329:
                  v1451 = 0;
                }
              }
              __ne = *((_QWORD *)v1498 - 4);
              v226 = *(unsigned __int8 *)(__ne + 16);
              if (v226 != 41 && (v226 != 5 || *(_WORD *)(__ne + 18) != 13)
                || ((v1447 = *(_DWORD *)(__ne + 20), (v1447 & 0x40000000) != 0)
                  ? (v227 = *(_QWORD *)(__ne - 8))
                  : (v227 = __ne - 32 * (v1447 & 0x7FFFFFF)),
                    (v228 = *(_QWORD *)(v227 + 32)) != 0 ? (v229 = *(_BYTE *)(v228 + 16) == 16) : (v229 = 0),
                    !v229))
              {
LABEL_365:
                if (!v1451)
                  goto LABEL_239;
                goto LABEL_366;
              }
              v230 = (llvm::APInt *)(v228 + 24);
              v1443 = *(_DWORD *)(v228 + 32);
              if (v1443 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v230) != v1443 - 1)
                  goto LABEL_365;
              }
              else if (*(_QWORD *)v230 != 1)
              {
                goto LABEL_365;
              }
              if ((v1447 & 0x40000000) != 0)
                v231 = *(unint64_t **)(__ne - 8);
              else
                v231 = (unint64_t *)(__ne - 32 * (v1447 & 0x7FFFFFF));
              v232 = *(_QWORD *)(a1 + 8);
              v233 = *v231;
              v234 = *(_QWORD *)(v232 + 104);
              v235 = *(_DWORD *)(v232 + 120);
              if (v235)
              {
                v236 = ((v233 >> 4) ^ (v233 >> 9)) & (v235 - 1);
                v237 = v234 + 48 * v236;
                v238 = *(_QWORD *)(v237 + 24);
                if (v238 != v233)
                {
                  v239 = 1;
                  while (v238 != -4096)
                  {
                    v240 = v236 + v239++;
                    v236 = v240 & (v235 - 1);
                    v237 = v234 + 48 * v236;
                    v238 = *(_QWORD *)(v237 + 24);
                    if (v238 == v233)
                      goto LABEL_355;
                  }
                  goto LABEL_354;
                }
              }
              else
              {
LABEL_354:
                v237 = v234 + 48 * v235;
              }
LABEL_355:
              if (v237 == v234 + 48 * v235 || (v241 = *(_QWORD *)(v237 + 40)) == 0)
                v241 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v232, v233);
              if ((llvm::APInt *)v241 == v1454)
              {
                v242 = *(_DWORD *)(__ne + 20);
                if ((v242 & 0x40000000) != 0)
                  v243 = *(uint64_t **)(__ne - 8);
                else
                  v243 = (uint64_t *)(__ne - 32 * (v242 & 0x7FFFFFF));
                v1451 = *v243;
              }
              goto LABEL_365;
            }
            v193 = *(_QWORD *)(a1 + 8);
            v194 = *((_QWORD *)v1498 - 8);
            __nd = (uint64_t *)((char *)v1498 - 64);
            v195 = *(_QWORD *)(v193 + 104);
            v196 = *(_DWORD *)(v193 + 120);
            if (v196)
            {
              v197 = ((v194 >> 4) ^ (v194 >> 9)) & (v196 - 1);
              v198 = v195 + 48 * v197;
              v199 = *(_QWORD *)(v198 + 24);
              if (v199 != v194)
              {
                v200 = 1;
                while (v199 != -4096)
                {
                  v201 = v197 + v200++;
                  v197 = v201 & (v196 - 1);
                  v198 = v195 + 48 * v197;
                  v199 = *(_QWORD *)(v198 + 24);
                  if (v199 == v194)
                    goto LABEL_289;
                }
                goto LABEL_288;
              }
            }
            else
            {
LABEL_288:
              v198 = v195 + 48 * v196;
            }
LABEL_289:
            if (v198 == v195 + 48 * v196 || (v202 = *(_QWORD *)(v198 + 40)) == 0)
              v202 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v193, v194);
            if ((llvm::APInt *)v202 != v1454)
            {
              v203 = *(_QWORD *)(a1 + 8);
              v204 = *((_QWORD *)v1498 - 4);
              __nd = (uint64_t *)((char *)v1498 - 32);
              v205 = *(_QWORD *)(v203 + 104);
              v206 = *(_DWORD *)(v203 + 120);
              if (!v206)
                goto LABEL_305;
              v207 = ((v204 >> 4) ^ (v204 >> 9)) & (v206 - 1);
              v208 = v205 + 48 * v207;
              v209 = *(_QWORD *)(v208 + 24);
              if (v209 != v204)
              {
                v210 = 1;
                while (v209 != -4096)
                {
                  v211 = v207 + v210++;
                  v207 = v211 & (v206 - 1);
                  v208 = v205 + 48 * v207;
                  v209 = *(_QWORD *)(v208 + 24);
                  if (v209 == v204)
                    goto LABEL_306;
                }
LABEL_305:
                v208 = v205 + 48 * v206;
              }
LABEL_306:
              if (v208 == v205 + 48 * v206 || (v214 = *(_QWORD *)(v208 + 40)) == 0)
                v214 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v203, v204);
              if ((llvm::APInt *)v214 != v1454)
              {
                if (*((_WORD *)v1454 + 12) != 14 || !v1454)
                  goto LABEL_239;
                __nd = (uint64_t *)((char *)v1454 - 8);
              }
            }
            v1451 = *__nd;
LABEL_366:
            if ((*(_WORD *)(v123 + 18) & 0x3F) == 0x20)
              v1525 = dword_1C866A328[v1525 - 36];
            v246 = operator new(0x80uLL);
            v247 = (llvm::Value *)(v246 + 16);
            v246[21] = v246[21] & 0x38000000 | 2;
            *(_QWORD *)v246 = 0;
            *((_QWORD *)v246 + 1) = 0;
            *((_QWORD *)v246 + 2) = 0;
            *((_QWORD *)v246 + 3) = v246 + 16;
            *((_QWORD *)v246 + 4) = 0;
            *((_QWORD *)v246 + 5) = 0;
            *((_QWORD *)v246 + 6) = 0;
            *((_QWORD *)v246 + 7) = v246 + 16;
            v1455 = (llvm::APInt *)v246;
            v1448 = *(_DWORD ***)(v123 - 64);
            v1640 = "scmp";
            LOWORD(v1643[1]) = 259;
            sub_1C4774CC4(*v1448);
            __nb = v247;
            llvm::CmpInst::CmpInst((uint64_t)v247, v248, 53, v1525, (uint64_t)v1448, v1451, (uint64_t)&v1640, v123, 0);
            v249 = *(void **)(v123 + 48);
            v1640 = v249;
            if (v249)
              llvm::MetadataTracking::track((uint64_t)&v1640, (unsigned __int8 *)v249, 2);
            v250 = (unsigned __int8 *)*((_QWORD *)v1455 + 14);
            v1456 = (llvm::APInt *)((char *)v1455 + 112);
            if (v250)
              llvm::MetadataTracking::untrack((uint64_t)v1456, v250);
            v251 = (unsigned __int8 *)v1640;
            *(_QWORD *)v1456 = v1640;
            if (v251)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v1640, v251, (uint64_t)v1456);
              v1640 = 0;
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v123, v247, (llvm::Value *)1);
            v252 = *(llvm::Value **)(k - 8);
            if (v252 != v247)
            {
              if (v252 && v252 != (llvm::Value *)-8192 && v252 != (llvm::Value *)-4096)
              {
                v259 = *(_QWORD *)(k - 24) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v259 = *(_QWORD *)(k - 16);
                v260 = *(unint64_t **)(k - 16);
                if (v260)
                {
                  *v260 = *v260 & 7 | v259;
                }
                else
                {
                  v261 = *(_QWORD *)(k - 8);
                  v262 = ***(int32x2_t ****)v261;
                  v263 = (unint64_t)v262[303];
                  if (v263 <= v259)
                  {
                    v264 = v262[305].u32[0];
                    if (v263 + 16 * v264 > v259)
                    {
                      v265 = v264 - 1;
                      LODWORD(v266) = v265 & ((v261 >> 4) ^ (v261 >> 9));
                      v267 = (uint64_t *)(v263 + 16 * v266);
                      v268 = *v267;
                      if (v261 == *v267)
                      {
LABEL_392:
                        *v267 = -8192;
                        v262[304] = vadd_s32(v262[304], (int32x2_t)0x1FFFFFFFFLL);
                        v261 = *(_QWORD *)(k - 8);
                      }
                      else
                      {
                        v269 = 1;
                        while (v268 != -4096)
                        {
                          v270 = v266 + v269++;
                          v266 = v270 & v265;
                          v268 = *(_QWORD *)(v263 + 16 * v266);
                          if (v261 == v268)
                          {
                            v267 = (uint64_t *)(v263 + 16 * v266);
                            goto LABEL_392;
                          }
                        }
                      }
                      *(_BYTE *)(v261 + 17) &= ~1u;
                    }
                  }
                }
              }
              *(_QWORD *)(k - 8) = v247;
              if (v247 != (llvm::Value *)-8192 && v247 != (llvm::Value *)-4096 && v247)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(k - 24));
            }
            v1527 = *((_QWORD *)v1498 - 12);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v123 + 40) + 40, (uint64_t ***)v123);
            v253 = *(_QWORD *)(v123 + 24);
            v254 = *(_QWORD **)(v123 + 32);
            *v254 = v253;
            *(_QWORD *)(v253 + 8) = v254;
            *(_QWORD *)(v123 + 24) = 0;
            *(_QWORD *)(v123 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v123);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1498 + 5) + 40, (uint64_t ***)v1498);
            v255 = *((_QWORD *)v1498 + 3);
            v256 = (_QWORD *)*((_QWORD *)v1498 + 4);
            *v256 = v255;
            *(_QWORD *)(v255 + 8) = v256;
            *((_QWORD *)v1498 + 3) = 0;
            *((_QWORD *)v1498 + 4) = 0;
            llvm::Value::deleteValue(v1498);
            if (!*(_QWORD *)(v1527 + 8))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1527 + 40) + 40, (uint64_t ***)v1527);
              v257 = *(_QWORD *)(v1527 + 24);
              v258 = *(_QWORD **)(v1527 + 32);
              *v258 = v257;
              *(_QWORD *)(v257 + 8) = v258;
              *(_QWORD *)(v1527 + 24) = 0;
              *(_QWORD *)(v1527 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v1527);
            }
LABEL_240:
            v167 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), v117, v1483);
            v112 = v1489;
            if (!v167)
              goto LABEL_259;
            if (v1483 != v117)
            {
              v168 = *(_QWORD *)(*(_QWORD *)a1 + 208);
              for (m = *(_QWORD *)a1 + 200; v168 != m; v168 = *(_QWORD *)(v168 + 8))
              {
                if (v168)
                  v169 = v168 - 32;
                else
                  v169 = 0;
                if (v169 != v125)
                {
                  v1499 = (llvm::Value **)v169;
                  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(v169 + 24) + 40), v117))
                  {
                    Stride = llvm::IVUsers::getStride(*(llvm::ScalarEvolution ***)a1, (llvm::Value **)(k - 32), *(const llvm::Loop **)(a1 + 56));
                    v171 = llvm::IVUsers::getStride(*(llvm::ScalarEvolution ***)a1, v1499, *(const llvm::Loop **)(a1 + 56));
                    if (Stride)
                    {
                      if (v171)
                        __asm { BR              X11 }
                    }
                  }
                }
              }
            }
            if (llvm::Instruction::getNextNonDebugInstruction(__nb, 0) == v121)
            {
LABEL_257:
              v173 = (uint64_t)__nb;
            }
            else
            {
              v172 = *((_QWORD *)__nb + 1);
              if (v172 && !*(_QWORD *)(v172 + 8))
              {
                llvm::Instruction::moveBefore(__nb, (llvm::Instruction *)v121);
                goto LABEL_257;
              }
              llvm::Instruction::clone(__nb);
              v173 = (uint64_t)v174;
              v175 = **(uint64_t *****)(*(_QWORD *)(a1 + 56) + 32);
              if ((*((_BYTE *)v175 + 23) & 0x10) != 0)
              {
                v176 = ***v175;
                v177 = *(_QWORD *)(v176 + 152);
                v178 = *(unsigned int *)(v176 + 168);
                if (!(_DWORD)v178)
                  goto LABEL_268;
                LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
                v180 = (uint64_t ****)(v177 + 16 * v179);
                v181 = *v180;
                if (*v180 != v175)
                {
                  v182 = 1;
                  while (v181 != (uint64_t ***)-4096)
                  {
                    v183 = v179 + v182++;
                    v179 = v183 & (v178 - 1);
                    v181 = *(uint64_t ****)(v177 + 16 * v179);
                    if (v181 == v175)
                    {
                      v180 = (uint64_t ****)(v177 + 16 * v179);
                      goto LABEL_269;
                    }
                  }
LABEL_268:
                  v180 = (uint64_t ****)(v177 + 16 * v178);
                }
LABEL_269:
                v184 = v180[1];
                v187 = *v184;
                v186 = (char *)(v184 + 2);
                v185 = v187;
              }
              else
              {
                v185 = 0;
                v186 = &byte_1C871356D;
              }
              LOWORD(v1643[1]) = 773;
              v1640 = v186;
              v1641 = v185;
              v1642 = (uint64_t)".termcond";
              llvm::Value::setName(v174, (uint64_t)&v1640);
              *(_QWORD *)(v173 + 40) = v117;
              *(_WORD *)(v117 + 18) &= ~0x8000u;
              if ((*(_BYTE *)(v173 + 23) & 0x10) != 0)
              {
                v189 = *(_QWORD *)(v117 + 56);
                if (v189)
                {
                  v190 = *(llvm::ValueSymbolTable **)(v189 + 104);
                  if (v190)
                    llvm::ValueSymbolTable::reinsertValue(v190, (llvm::Value *)v173);
                }
              }
              v188 = *(_QWORD *)(v121 + 24);
              *(_QWORD *)(v173 + 32) = v121 + 24;
              *(_QWORD *)(v173 + 24) = v188;
              *(_QWORD *)(v188 + 8) = v173 + 24;
              *(_QWORD *)(v121 + 24) = v173 + 24;
              v125 = llvm::IVUsers::AddUser(*(llvm::IVUsers **)a1, (llvm::Instruction *)v173, *(llvm::Value **)(k + 40));
              llvm::User::replaceUsesOfWith((llvm::User *)v121, __nb, (llvm::Value *)v173);
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v125 + 80), *(_QWORD *)(a1 + 56));
            *(_BYTE *)(a1 + 76) = 1;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v1606, v173);
            v112 = v1489;
          }
        }
      }
    }
LABEL_259:
    if (++v111 != (uint64_t *)v112)
      continue;
    break;
  }
  v271 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
  v272 = *(_QWORD *)(v271 + 40);
  if (v272 == v271 + 40)
  {
    v273 = 0;
  }
  else
  {
    if (v272)
      v273 = v272 - 24;
    else
      v273 = 0;
    if (*(unsigned __int8 *)(v273 + 16) - 29 >= 0xB)
      v273 = 0;
  }
  v274 = v1542;
  *(_QWORD *)(a1 + 80) = v273;
  if (v1606[1] == v1606[0])
    v275 = &v1607[4];
  else
    v275 = v1607;
  v276 = *(unsigned int *)v275;
  if ((_DWORD)v276)
  {
    v277 = 8 * v276;
    v278 = (unint64_t *)v1606[1];
    while (*v278 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v278;
      v277 -= 8;
      if (!v277)
        goto LABEL_406;
    }
  }
  else
  {
    v278 = (unint64_t *)v1606[1];
  }
  v279 = (unint64_t *)((char *)v1606[1] + 8 * v276);
  if (v278 != v279)
  {
    v280 = *v278;
LABEL_425:
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a1 + 16), *(_QWORD *)(v273 + 40), *(_QWORD *)(v280 + 40));
    if (NearestCommonDominator == *(_QWORD *)(v280 + 40))
    {
LABEL_435:
      *(_QWORD *)(a1 + 80) = v280;
      v273 = v280;
    }
    else
    {
      v273 = *(_QWORD *)(a1 + 80);
      if (NearestCommonDominator != *(_QWORD *)(v273 + 40))
      {
        v282 = *(_QWORD *)(NearestCommonDominator + 40);
        if (v282 == NearestCommonDominator + 40)
        {
          v280 = 0;
        }
        else
        {
          if (v282)
            v283 = v282 - 24;
          else
            v283 = 0;
          if (*(unsigned __int8 *)(v283 + 16) - 29 >= 0xB)
            v280 = 0;
          else
            v280 = v283;
        }
        goto LABEL_435;
      }
    }
    v284 = v278 + 1;
    while (v284 != v279)
    {
      v285 = *v284++;
      v280 = v285;
      if (v285 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v278 = v284 - 1;
        goto LABEL_425;
      }
    }
  }
LABEL_406:
  if (*(_BYTE **)__b != &__b[16])
    free(*(void **)__b);
  if (v1606[1] != v1606[0])
    free(v1606[1]);
  if ((_QWORD *)*v18 != v18 && *((_QWORD *)this + 1) == *((_QWORD *)this + 2))
  {
    v1480 = (int *)(a1 + 30848);
    v1428 = (llvm::SmallPtrSetImplBase **)(a1 + 31008);
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)v274 + 280))(*(_QWORD *)v274))
      goto LABEL_609;
    *(_QWORD *)__b = &__b[16];
    *(_QWORD *)&__b[8] = 0x800000000;
    v1606[0] = v1607;
    v1606[1] = (void *)0x800000000;
    v286 = *(_QWORD *)(a1 + 56);
    v287 = **(_QWORD **)(v286 + 32);
    v288 = *(_QWORD *)(a1 + 16);
    v289 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v286);
    v290 = *(_QWORD *)(v288 + 24);
    v291 = *(unsigned int *)(v288 + 40);
    if ((_DWORD)v291)
    {
      LODWORD(v292) = ((v289 >> 4) ^ (v289 >> 9)) & (v291 - 1);
      v293 = (uint64_t *)(v290 + 16 * v292);
      v294 = *v293;
      if (v289 == *v293)
      {
LABEL_448:
        if (v293 == (uint64_t *)(v290 + 16 * v291))
          v297 = 0;
        else
          v297 = (uint64_t *)v293[1];
        v298 = *v297;
        v299 = v1606[1];
        while (v298 != v287)
        {
          if (v299 >= HIDWORD(v1606[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1606, (uint64_t)v1607, v299 + 1, 8);
            v299 = v1606[1];
          }
          *((_QWORD *)v1606[0] + v299) = v298;
          v299 = ++LODWORD(v1606[1]);
          v297 = (uint64_t *)v297[1];
          v298 = *v297;
        }
        if (v299 >= HIDWORD(v1606[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1606, (uint64_t)v1607, v299 + 1, 8);
          v299 = v1606[1];
        }
        *((_QWORD *)v1606[0] + v299) = v287;
        v45 = __CFADD__(v1606[1], 1);
        v300 = ++LODWORD(v1606[1]);
        if (!v45)
        {
          v1528 = (llvm::Type *)v1606[0];
          v301 = (llvm::Type *)((char *)v1606[0] + 8 * v300);
          do
          {
            v302 = *((_QWORD *)v301 - 1);
            v1543 = (llvm::Type *)((char *)v301 - 8);
            v303 = v302 + 40;
            for (n = *(_QWORD *)(v302 + 48); n != v303; n = *(_QWORD *)(n + 8))
            {
              v305 = (unint64_t *)(n - 24);
              if (n)
                v306 = n - 24;
              else
                v306 = 0;
              if (*(_BYTE *)(v306 + 16) == 83)
                continue;
              v307 = *(llvm::ScalarEvolution ***)a1;
              v308 = sub_1C477672C(*(_QWORD *)a1 + 40, v306);
              v309 = v307[6];
              v310 = v309 == v307[5] ? 60 : 56;
              if (v308 == (_QWORD *)((char *)v309 + 8 * *(unsigned int *)((char *)v307 + v310)))
                continue;
              if ((*(_DWORD *)(*(_QWORD *)v306 + 8) & 0xFD) != 0xD)
              {
LABEL_482:
                v320 = *(unsigned int *)(a1 + 31016);
                if ((_DWORD)v320)
                {
                  v321 = 0;
                  v322 = v320 << 7;
                  do
                  {
                    v323 = *(_QWORD *)__b + v321;
                    v324 = sub_1C477672C(*(_QWORD *)__b + v321 + 64, v306);
                    v325 = *(_QWORD *)(v323 + 72);
                    if (v325 == *(_QWORD *)(v323 + 64))
                      v326 = (unsigned int *)(v323 + 84);
                    else
                      v326 = (unsigned int *)(v323 + 80);
                    if (v324 != (_QWORD *)(v325 + 8 * *v326))
                    {
                      *v324 = -2;
                      ++*(_DWORD *)(v323 + 88);
                    }
                    v321 += 128;
                  }
                  while (v322 != v321);
                }
                v1640 = &v1643[1];
                v1641 = &v1643[1];
                v1642 = 4;
                LODWORD(v1643[0]) = 0;
                v327 = *(_DWORD *)(v306 + 20);
                if ((v327 & 0x40000000) != 0)
                {
                  v328 = *(unint64_t **)(v306 - 8);
                  v305 = &v328[4 * (v327 & 0x7FFFFFF)];
                }
                else
                {
                  v328 = (unint64_t *)(v306 - 32 * (v327 & 0x7FFFFFF));
                }
                while (1)
                {
                  v331 = (uint64_t *)sub_1C5B98EFC(v328, v305, *(_QWORD *)(a1 + 56), *(llvm::ScalarEvolution **)(a1 + 8));
                  v332 = v331;
                  if (v331 == (uint64_t *)v305)
                    break;
                  v329 = (llvm::Value *)*v331;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1640, *v331);
                  if (v330)
                    sub_1C5B99014((uint64_t *)a1, (_BYTE *)v306, v329, (uint64_t)__b);
                  v328 = (unint64_t *)(v332 + 4);
                }
                if (v1641 != v1640)
                  free(v1641);
                continue;
              }
              v311 = *(_QWORD *)(a1 + 8);
              v312 = *(_QWORD *)(v311 + 104);
              v313 = *(_DWORD *)(v311 + 120);
              if (!v313)
                goto LABEL_477;
              v314 = (v313 - 1) & ((v306 >> 4) ^ (v306 >> 9));
              v315 = v312 + 48 * v314;
              v316 = *(_QWORD *)(v315 + 24);
              if (v316 != v306)
              {
                v317 = 1;
                while (v316 != -4096)
                {
                  v318 = v314 + v317++;
                  v314 = v318 & (v313 - 1);
                  v315 = v312 + 48 * v314;
                  v316 = *(_QWORD *)(v315 + 24);
                  if (v316 == v306)
                    goto LABEL_478;
                }
LABEL_477:
                v315 = v312 + 48 * v313;
              }
LABEL_478:
              if (v315 == v312 + 48 * v313 || (v319 = *(_QWORD *)(v315 + 40)) == 0)
                v319 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v311, v306);
              if (*(_WORD *)(v319 + 24) == 14)
                goto LABEL_482;
            }
            v301 = v1543;
          }
          while (v1543 != v1528);
        }
        v333 = **(_QWORD **)(*(_QWORD *)(a1 + 56) + 32);
        v334 = a1 + 30848;
        if (*(_QWORD *)(v333 + 40) != v333 + 40)
        {
          v335 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 32) + 48);
          v336 = v335 - 24;
          v337 = v335 ? v335 - 24 : 0;
          if (v335 && *(_BYTE *)(v337 + 16) == 83)
          {
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)v336 + 8) & 0xFD) == 0xD)
              {
                v338 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
                v339 = *(_DWORD *)(v336 + 20);
                v340 = v339 & 0x7FFFFFF;
                if ((v339 & 0x7FFFFFF) != 0)
                {
                  v341 = 0;
                  while (1)
                  {
                    v342 = v336 - 32 * v340;
                    if ((v339 & 0x40000000) != 0)
                      v342 = *(_QWORD *)(v336 - 8);
                    if (*(_QWORD *)(v342 + 32 * *(unsigned int *)(v336 + 60) + 8 * v341) == v338)
                      break;
                    if (v340 == ++v341)
                      goto LABEL_514;
                  }
                }
                else
                {
LABEL_514:
                  LODWORD(v341) = -1;
                }
                if ((v339 & 0x40000000) != 0)
                  v343 = *(_QWORD *)(v336 - 8);
                else
                  v343 = v336 - 32 * v340;
                v344 = *(unsigned __int8 **)(v343 + 32 * v341);
                if (v344)
                  v345 = v344[16] >= 0x1Cu;
                else
                  v345 = 0;
                if (v345)
                  sub_1C5B99014((uint64_t *)a1, (_BYTE *)v336, (llvm::Value *)v344, (uint64_t)__b);
              }
              v346 = *(_QWORD *)(v336 + 32);
              v336 = v346 - 24;
              if (v346)
                v347 = v346 - 24;
              else
                v347 = 0;
            }
            while (v346 && *(_BYTE *)(v347 + 16) == 83);
          }
        }
        v348 = *(unsigned int *)(a1 + 31016);
        if (!(_DWORD)v348)
          goto LABEL_605;
        v349 = 0;
        v350 = 0;
        v1490 = *(unsigned int *)(a1 + 31016);
        while (1)
        {
          v351 = *(_QWORD *)(a1 + 31008) + 48 * v349;
          v352 = *(_DWORD *)(v351 + 8);
          if (v352 < 2
            || *(_DWORD *)(*(_QWORD *)__b + (v349 << 7) + 20) != *(_DWORD *)(*(_QWORD *)__b + (v349 << 7) + 24))
          {
            goto LABEL_591;
          }
          v353 = *(_QWORD **)(a1 + 48);
          v354 = *(_QWORD **)v351;
          v355 = *(_QWORD *)(*(_QWORD *)v351 + 24 * v352 - 24);
          v1544 = v350;
          if (*(_BYTE *)(v355 + 16) != 83)
          {
            v364 = 1;
            goto LABEL_547;
          }
          v356 = *(_QWORD *)(a1 + 8);
          v357 = *(_QWORD *)(v356 + 104);
          v358 = *(_DWORD *)(v356 + 120);
          if (v358)
          {
            v359 = (v358 - 1) & ((v355 >> 4) ^ (v355 >> 9));
            v360 = v357 + 48 * v359;
            v361 = *(_QWORD *)(v360 + 24);
            if (v361 == v355)
              goto LABEL_543;
            v362 = 1;
            while (v361 != -4096)
            {
              v363 = v359 + v362++;
              v359 = v363 & (v358 - 1);
              v360 = v357 + 48 * v359;
              v361 = *(_QWORD *)(v360 + 24);
              if (v361 == v355)
                goto LABEL_543;
            }
          }
          v360 = v357 + 48 * v358;
LABEL_543:
          if (v360 == v357 + 48 * v358 || (v365 = *(_QWORD *)(v360 + 40)) == 0)
          {
            v365 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v356, v355);
            v354 = *(_QWORD **)v351;
          }
          v364 = v365 != v354[2];
LABEL_547:
          v1529 = v364;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v353 + 288))(*v353, *v354) & 1) != 0)
            goto LABEL_567;
          v366 = *(_DWORD *)(v351 + 8);
          if (v366 != 1)
          {
            v370 = 0;
            v369 = 0;
            v368 = 0;
            v367 = 0;
            v371 = *(_QWORD *)v351 + 24 * v366;
            v372 = (_QWORD *)(*(_QWORD *)v351 + 24);
            while (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v353 + 288))(*v353, *v372) & 1) == 0)
            {
              v373 = (llvm::SCEV *)v372[2];
              if (!llvm::SCEV::isZero(v373))
              {
                v374 = v373 == v370 ? v368 : v368 + 1;
                v375 = v373 == v370 ? v369 + 1 : v369;
                if (*((_WORD *)v373 + 12))
                  v368 = v374;
                else
                  ++v367;
                if (*((_WORD *)v373 + 12))
                {
                  v369 = v375;
                  v370 = v373;
                }
              }
              v372 += 3;
              if (v372 == (_QWORD *)v371)
                goto LABEL_565;
            }
LABEL_567:
            v376 = *v1428;
            if (v349 != v1544)
            {
              v377 = (const void **)((char *)v376 + 48 * v349);
              v378 = (char *)v376 + 48 * v1544;
              v379 = *((unsigned int *)v377 + 2);
              v380 = *((unsigned int *)v378 + 2);
              if (v380 >= v379)
              {
                if ((_DWORD)v379)
                  memmove(*(void **)v378, *v377, 24 * v379);
              }
              else
              {
                if (*((_DWORD *)v378 + 3) < v379)
                {
                  *((_DWORD *)v378 + 2) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v376 + 48 * v1544, (uint64_t)(v378 + 16), v379, 24);
                  goto LABEL_575;
                }
                if ((_DWORD)v380)
                  memmove(*(void **)v378, *v377, 24 * v380);
                else
LABEL_575:
                  v380 = 0;
                v381 = *((unsigned int *)v377 + 2);
                if (v380 != v381)
                  memcpy((void *)(*(_QWORD *)v378 + 24 * v380), (char *)*v377 + 24 * v380, (_BYTE *)*v377 + 24 * v381 - ((_BYTE *)*v377 + 24 * v380));
              }
              *((_DWORD *)v378 + 2) = v379;
              *((_QWORD *)v376 + 6 * v1544 + 5) = *((_QWORD *)v376 + 6 * v349 + 5);
              v376 = *v1428;
            }
            v382 = (char *)v376 + 48 * v1544;
            v383 = *((_DWORD *)v382 + 2);
            if (v383 == 1)
            {
LABEL_590:
              v350 = v1544 + 1;
              v334 = a1 + 30848;
              v348 = v1490;
              goto LABEL_591;
            }
            v384 = *(_QWORD *)v382;
            v385 = v384 + 24 * v383;
            v386 = v384 + 24;
            while (2)
            {
              v387 = v386;
              v388 = *(_QWORD *)(v384 + 24);
              v389 = *(_DWORD *)(v388 + 20);
              if ((v389 & 0x40000000) != 0)
              {
                v391 = *(_QWORD **)(v388 - 8);
                v390 = v389 & 0x7FFFFFF;
                if (!v390)
                  goto LABEL_589;
              }
              else
              {
                v390 = v389 & 0x7FFFFFF;
                v391 = (_QWORD *)(v388 - 32 * v390);
                if (!v390)
                  goto LABEL_589;
              }
              v392 = *(_QWORD *)(v384 + 32);
              v393 = 32 * v390;
              v394 = &v391[4 * v390];
              while (*v391 != v392)
              {
                v391 += 4;
                v393 -= 32;
                if (!v393)
                {
                  v391 = v394;
                  break;
                }
              }
LABEL_589:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 31408), (uint64_t)v391);
              v386 = v387 + 24;
              v384 = v387;
              if (v387 + 24 == v385)
                goto LABEL_590;
              continue;
            }
          }
          v367 = 0;
          v368 = 0;
          v369 = 0;
LABEL_565:
          if (v368 + v1529 - (v367 > 1) - v369 < 0)
            goto LABEL_567;
          v334 = a1 + 30848;
          v350 = v1544;
          v348 = v1490;
LABEL_591:
          if (++v349 == v348)
          {
            v395 = *(unsigned int *)(v334 + 168);
            if ((_DWORD)v395 != v350)
            {
              if (v395 <= v350)
              {
                if (*(_DWORD *)(v334 + 172) < v350)
                {
                  sub_1C5B99FD8((uint64_t)v1428, v350);
                  v395 = *(unsigned int *)(v334 + 168);
                }
                if ((_DWORD)v395 != v350)
                {
                  v398 = (uint64_t)*v1428 + 48 * v395;
                  v399 = -48 * v395 + 48 * v350;
                  do
                  {
                    *(_OWORD *)(v398 + 32) = 0uLL;
                    *(_OWORD *)(v398 + 16) = 0uLL;
                    *(_QWORD *)v398 = v398 + 16;
                    *(_QWORD *)(v398 + 8) = 0x100000000;
                    v398 += 48;
                    v399 -= 48;
                  }
                  while (v399);
                }
              }
              else
              {
                v396 = (void **)((char *)*v1428 + 48 * v395 - 48);
                v397 = -48 * v395 + 48 * v350;
                do
                {
                  if (v396 + 2 != *v396)
                    free(*v396);
                  v396 -= 6;
                  v397 += 48;
                }
                while (v397);
              }
              *(_DWORD *)(a1 + 31016) = v350;
            }
LABEL_605:
            if (v1606[0] != v1607)
              free(v1606[0]);
            sub_1C5B9A158(*(uint64_t *)__b, *(_QWORD *)__b + ((unint64_t)*(unsigned int *)&__b[8] << 7));
            if (*(_BYTE **)__b != &__b[16])
              free(*(void **)__b);
LABEL_609:
            *(_QWORD *)__b = 1;
            *(int64x2_t *)&__b[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
            *(_OWORD *)&__b[24] = *(_OWORD *)&__b[8];
            v1618 = &v1620;
            v1619 = 0x400000000;
            v1545 = (uint64_t)v1607;
            v1606[0] = v1607;
            v1606[1] = (void *)0x400000000;
            v400 = *(_QWORD *)(*(_QWORD *)a1 + 208);
            if (v400 != *(_QWORD *)a1 + 200)
            {
              if (v400)
                v401 = (llvm::Value **)(v400 - 32);
              else
                v401 = 0;
              v402 = (char *)&loc_1C5B90038
                   + 4
                   * byte_1C866A0DF[*(unsigned __int16 *)(llvm::IVUsers::getExpr(*(llvm::ScalarEvolution ***)a1, v401)
                                                        + 24)];
              __asm { BR              X11 }
            }
            if (*(_DWORD *)(a1 + 320) == 1)
            {
              sub_1C628250C(v1435);
              *(_DWORD *)(a1 + 320) = 0;
            }
            v403 = a1 + 30848;
            if (v1606[0] != v1607)
              free(v1606[0]);
            if (v1618 != &v1620)
              free(v1618);
            v404 = a1 + 31408;
            if ((__b[0] & 1) == 0)
              MEMORY[0x1CAA32FB4](*(_QWORD *)&__b[8], 8);
            v1597[0] = 0;
            v1457 = (*(uint64_t (**)(_QWORD, _QWORD, llvm::Instruction **, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 48) + 304))(**(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56), v1597, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
            v405 = *(_QWORD *)a1 + 200;
            v406 = *(_QWORD *)(*(_QWORD *)a1 + 208);
            if (v406 == v405)
            {
LABEL_623:
              v407 = *(_BYTE **)(a1 + 30864);
              v408 = &v407[8 * *(unsigned int *)(v403 + 24)];
              v1640 = &v1642;
              v1641 = (void *)0x800000000;
              sub_1C4FA6FB8((unsigned int *)&v1640, v407, v408);
              *(_QWORD *)__b = &__b[32];
              *(_QWORD *)&__b[8] = &__b[32];
              *(_QWORD *)&__b[16] = 32;
              *(_DWORD *)&__b[24] = 0;
              v409 = v1641;
              if (!(_DWORD)v1641)
                goto LABEL_761;
              while (1)
              {
                v410 = *((_QWORD *)v1640 + v409 - 1);
                LODWORD(v1641) = v409 - 1;
                *(_QWORD *)&v1602 = v410;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v410);
                if (!v411)
                  goto LABEL_655;
                v412 = *(unsigned __int16 *)(v410 + 24);
                if ((v412 - 7) < 6 || (v412 - 4) <= 1)
                {
                  v414 = *(const void **)(v410 + 32);
                  v413 = *(_QWORD *)(v410 + 40);
                  v415 = v1641;
                  v416 = v413 + v1641;
                  if (v416 > HIDWORD(v1641))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1640, (uint64_t)&v1642, v416, 8);
                    v415 = v1641;
                  }
                  if (v413)
                  {
                    memcpy((char *)v1640 + 8 * v415, v414, 8 * v413);
                    v415 = v1641;
                  }
                  v409 = v415 + v413;
                  goto LABEL_632;
                }
                if ((v412 - 4) >= 0xFFFFFFFD)
                {
                  v421 = *(_QWORD *)(v410 + 32);
                  v422 = v1641;
                  if (v1641 >= (unint64_t)HIDWORD(v1641))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1640, (uint64_t)&v1642, v1641 + 1, 8);
                    v422 = v1641;
                  }
                  *((_QWORD *)v1640 + v422) = v421;
                  goto LABEL_645;
                }
                if (v412 != 14)
                {
                  if (v412 == 6)
                  {
                    v417 = *(_QWORD *)(v410 + 32);
                    v418 = v1641;
                    if (v1641 >= (unint64_t)HIDWORD(v1641))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1640, (uint64_t)&v1642, v1641 + 1, 8);
                      v418 = v1641;
                    }
                    *((_QWORD *)v1640 + v418) = v417;
                    v419 = ((_DWORD)v1641 + 1);
                    LODWORD(v1641) = v419;
                    v420 = *(_QWORD *)(v410 + 40);
                    if (v419 >= HIDWORD(v1641))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1640, (uint64_t)&v1642, v419 + 1, 8);
                      LODWORD(v419) = (_DWORD)v1641;
                    }
                    *((_QWORD *)v1640 + v419) = v420;
LABEL_645:
                    v409 = (_DWORD)v1641 + 1;
LABEL_632:
                    LODWORD(v1641) = v409;
                    if (!v409)
                      goto LABEL_759;
                    continue;
                  }
                  goto LABEL_655;
                }
                v423 = *(_QWORD *)(v410 - 8);
                v424 = *(unsigned __int8 *)(v423 + 16);
                if (v423)
                  v425 = v424 >= 0x1C;
                else
                  v425 = 0;
                if (!v425)
                {
                  if (v424 - 11 >= 2)
                    goto LABEL_657;
                  goto LABEL_655;
                }
                v426 = *(_QWORD *)(a1 + 56);
                v427 = sub_1C477672C(v426 + 56, *(_QWORD *)(v423 + 40));
                v428 = *(_QWORD *)(v426 + 64);
                v429 = 72;
                if (v428 == *(_QWORD *)(v426 + 56))
                  v429 = 76;
                if (v427 == (_QWORD *)(v428 + 8 * *(unsigned int *)(v426 + v429)))
                  break;
LABEL_655:
                v409 = v1641;
                if (!(_DWORD)v1641)
                {
LABEL_759:
                  if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                    free(*(void **)&__b[8]);
LABEL_761:
                  if (v1640 != &v1642)
                    free(v1640);
                  if (!*(_DWORD *)(a1 + 368))
                    return a1;
                  v501 = 0;
                  v1444 = *(unsigned int *)(a1 + 368);
                  do
                  {
                    v502 = *(_QWORD *)(a1 + 360) + 1904 * v501;
                    v503 = *(unsigned int *)(v502 + 680);
                    if ((_DWORD)v503)
                    {
                      v504 = 0;
                      v505 = (uint64_t *)(v502 + 672);
                      v506 = 96 * v503;
                      do
                      {
                        v507 = *v505 + v504;
                        v508 = *(_OWORD *)(v507 + 16);
                        *(_OWORD *)v1597 = *(_OWORD *)v507;
                        *(_OWORD *)v1598 = v508;
                        *(_QWORD *)&v1598[16] = (char *)&v1599 + 8;
                        *(_QWORD *)&v1599 = 0x400000000;
                        if (*(_DWORD *)(v507 + 40))
                          sub_1C62C1D5C((uint64_t)&v1598[16], v507 + 32);
                        v1601 = *(_OWORD *)(v507 + 80);
                        sub_1C5B9D12C(a1, v502, v501, (uint64_t)v1597, 0);
                        if (*(__int128 **)&v1598[16] != (__int128 *)((char *)&v1599 + 8))
                          free(*(void **)&v1598[16]);
                        v504 += 96;
                      }
                      while (v506 != v504);
                      v1547 = (llvm::Type *)*(unsigned int *)(v502 + 680);
                      if ((_DWORD)v1547)
                      {
                        for (ii = 0; ii != v1547; ii = (llvm::Type *)((char *)ii + 1))
                        {
                          v510 = *v505;
                          v511 = *v505 + 96 * (_QWORD)ii;
                          v512 = *(_OWORD *)(v511 + 16);
                          *(_OWORD *)v1591 = *(_OWORD *)v511;
                          v1592 = v512;
                          v1593 = v1595;
                          v1594 = 0x400000000;
                          if (*(_DWORD *)(v511 + 40))
                          {
                            sub_1C62C1D5C((uint64_t)&v1593, v510 + 96 * (_QWORD)ii + 32);
                            v513 = v1594;
                          }
                          else
                          {
                            v513 = 0;
                          }
                          v1596 = *(_OWORD *)(v510 + 96 * (_QWORD)ii + 80);
                          LODWORD(v1586) = v501;
                          if (*((_QWORD *)&v1592 + 1) == 1)
                            ++v513;
                          if (*((_QWORD *)&v1596 + 1))
                            ++v513;
                          if (v513 >= 2)
                          {
                            sub_1C5B9E418((uint64_t)v1591);
                            v1606[0] = v1607;
                            v1606[1] = (void *)0x400000000;
                            *(_OWORD *)__b = *(_OWORD *)v1591;
                            *(_OWORD *)&__b[16] = v1592;
                            *(_QWORD *)&__b[32] = &v1619;
                            v1618 = (void *)0x400000000;
                            if ((_DWORD)v1594)
                            {
                              sub_1C62C1D5C((uint64_t)&__b[32], (uint64_t)&v1593);
                              *(_OWORD *)v1622 = v1596;
                              LODWORD(v1618) = 0;
                              if ((_DWORD)v1594)
                              {
                                v517 = (const llvm::SCEV **)v1593;
                                v1501 = (llvm::SmallPtrSetImplBase *)((char *)v1593 + 8 * v1594);
                                do
                                {
                                  v518 = *v517;
                                  if (llvm::ScalarEvolution::getBlockDisposition(*(llvm::ScalarEvolution **)(a1 + 8), *v517, **(const llvm::BasicBlock ***)(*(_QWORD *)(a1 + 56) + 32)) == 2&& llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 8), v518, *(const llvm::Loop **)(a1 + 56)) != 2)
                                  {
                                    __asm { BR              X11 }
                                  }
                                  v519 = v1618;
                                  if (v1618 >= (unint64_t)HIDWORD(v1618))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b[32], (uint64_t)&v1619, v1618 + 1, 8);
                                    v519 = v1618;
                                  }
                                  *(_QWORD *)(*(_QWORD *)&__b[32] + 8 * v519) = v518;
                                  LODWORD(v1618) = (_DWORD)v1618 + 1;
                                  ++v517;
                                }
                                while (v517 != (const llvm::SCEV **)v1501);
                              }
                            }
                            else
                            {
                              *(_OWORD *)v1622 = v1596;
                              LODWORD(v1618) = 0;
                            }
                            if (LODWORD(v1606[1]))
                            {
                              *(_QWORD *)&v1602 = __b;
                              *((_QWORD *)&v1602 + 1) = a1;
                              v1603 = v502;
                              v1604 = &v1586;
                              if (LODWORD(v1606[1]) != 1)
                              {
                                v1640 = &v1642;
                                v1641 = (void *)0x400000000;
                                sub_1C62C1D5C((uint64_t)&v1640, (uint64_t)v1606);
                                v520 = (llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)&v1640, 0, 0);
                                sub_1C5B9E498(&v1602, v520);
                                if (v1640 != &v1642)
                                  free(v1640);
                              }
                              if (v1622[1])
                              {
                                v514 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 8), 0, (uint64_t)v1622[1], 1);
                                v515 = LODWORD(v1606[1]);
                                if (LODWORD(v1606[1]) >= (unint64_t)HIDWORD(v1606[1]))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1606, (uint64_t)v1607, LODWORD(v1606[1]) + 1, 8);
                                  v515 = LODWORD(v1606[1]);
                                }
                                *((_QWORD *)v1606[0] + v515) = v514;
                                ++LODWORD(v1606[1]);
                                v1622[1] = 0;
                                v516 = (llvm::SCEV *)llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)v1606, 0, 0);
                                sub_1C5B9E498(&v1602, v516);
                              }
                            }
                            if (*(uint64_t **)&__b[32] != &v1619)
                              free(*(void **)&__b[32]);
                            if (v1606[0] != v1607)
                              free(v1606[0]);
                          }
                          if (v1593 != v1595)
                            free(v1593);
                        }
                      }
                    }
                    ++v501;
                  }
                  while (v501 != v1444);
                  v521 = a1 + 30848;
                  v1425 = *(unsigned int *)(a1 + 368);
                  if (!(_DWORD)v1425)
                    goto LABEL_1005;
                  for (jj = 0; jj != v1425; ++jj)
                  {
                    v1548 = *(llvm::Type **)(a1 + 360);
                    v523 = (uint64_t)v1548 + 1904 * jj;
                    v524 = *(unsigned int *)(v523 + 680);
                    if ((_DWORD)v524)
                    {
                      v525 = 0;
                      __nf = (uint64_t *)(v523 + 672);
                      do
                      {
                        v526 = *__nf;
                        v527 = *__nf + 96 * v525;
                        v528 = *(_OWORD *)(v527 + 16);
                        v1586 = *(_OWORD *)v527;
                        v1587 = v528;
                        v1588 = v1590;
                        v1589 = 0x400000000;
                        if (*(_DWORD *)(v527 + 40))
                          sub_1C62C1D5C((uint64_t)&v1588, v526 + 96 * v525 + 32);
                        v1590[2] = *(_OWORD *)(v526 + 96 * v525 + 80);
                        if (!(_QWORD)v1586)
                        {
                          v529 = v1589;
                          if ((_DWORD)v1589)
                          {
                            v530 = 0;
                            do
                              sub_1C5B9E5BC(a1, v523, jj, (uint64_t)&v1586, v530++, 0);
                            while (v529 != v530);
                          }
                          if (*((_QWORD *)&v1587 + 1) == 1)
                            sub_1C5B9E5BC(a1, v523, jj, (uint64_t)&v1586, -1, 1);
                        }
                        if (v1588 != v1590)
                          free(v1588);
                        ++v525;
                      }
                      while (v525 != v524);
                      v531 = *(unsigned int *)(v523 + 680);
                      if ((_DWORD)v531)
                      {
                        v532 = 0;
                        v533 = (char *)v1548 + 1904 * jj;
                        v1511 = (uint64_t *)(v533 + 648);
                        v1532 = (uint64_t *)(v533 + 640);
                        do
                        {
                          v534 = *__nf;
                          v535 = *__nf + 96 * v532;
                          v536 = *(_OWORD *)(v535 + 16);
                          v1581 = *(_OWORD *)v535;
                          v1582 = v536;
                          v1583 = v1585;
                          v1584 = 0x400000000;
                          if (*(_DWORD *)(v535 + 40))
                            sub_1C62C1D5C((uint64_t)&v1583, v534 + 96 * v532 + 32);
                          v1585[2] = *(_OWORD *)(v534 + 96 * v532 + 80);
                          *(_QWORD *)__b = &__b[16];
                          *(_QWORD *)&__b[16] = *v1532;
                          *(_QWORD *)&__b[8] = 0x200000001;
                          if (*v1511 != *v1532)
                          {
                            *(_QWORD *)&__b[24] = *v1511;
                            *(_DWORD *)&__b[8] = 2;
                          }
                          v537 = v1584;
                          if ((_DWORD)v1584)
                          {
                            v538 = 0;
                            do
                              sub_1C5B9E7F4(a1, v523, jj, (uint64_t)&v1581, (uint64_t)__b, v538++, 0);
                            while (v537 != v538);
                          }
                          if (*((_QWORD *)&v1582 + 1) == 1)
                            sub_1C5B9E7F4(a1, v523, jj, (uint64_t)&v1581, (uint64_t)__b, -1, 1);
                          if (*(_BYTE **)__b != &__b[16])
                            free(*(void **)__b);
                          if (v1583 != v1585)
                            free(v1583);
                          ++v532;
                        }
                        while (v532 != v531);
                        v539 = *(unsigned int *)(v523 + 680);
                        if ((_DWORD)v539)
                        {
                          v540 = 0;
                          v541 = (char *)v1548 + 1904 * jj;
                          v1491 = (uint64_t *)(v541 + 32);
                          v1502 = (int *)(v541 + 24);
                          v1484 = (uint64_t *)(v541 + 40);
                          do
                          {
                            v542 = *__nf;
                            v543 = *__nf + 96 * v540;
                            v544 = *(_OWORD *)(v543 + 16);
                            v1575 = *(_OWORD *)v543;
                            v1576 = v544;
                            v1577 = v1579;
                            v1578 = 0x400000000;
                            if (*(_DWORD *)(v543 + 40))
                              sub_1C62C1D5C((uint64_t)&v1577, v542 + 96 * v540 + 32);
                            v1580 = *(_OWORD *)(v542 + 96 * v540 + 80);
                            if (*v1502 == 3)
                            {
                              v545 = sub_1C5B9ED5C((uint64_t)&v1575);
                              if (v545)
                              {
                                v546 = (llvm::Type *)v545;
                                v547 = *(unsigned __int8 *)(v545 + 8);
                                v548 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
                                if (v547 == 15)
                                {
                                  v551 = llvm::DataLayout::getIndexTypeSizeInBits(v548, (uint64_t)v546);
                                }
                                else
                                {
                                  sub_1C4768AD0(v548, (uint64_t)v546);
                                  v551 = v550;
                                  if ((_DWORD)v549 == 1)
                                }
                                if (v551 <= 0x40 && *v1532 == *v1511)
                                {
                                  if ((_QWORD)v1580)
                                    __asm { BR              X10 }
                                  if ((_DWORD)v1578)
                                    __asm { BR              X12 }
                                  v552 = *(unsigned int *)(a1 + 200);
                                  if ((_DWORD)v552)
                                  {
                                    v553 = *(uint64_t **)(a1 + 192);
                                    v554 = &v553[v552];
                                    do
                                    {
                                      v555 = *v553;
                                      if (llvm::ConstantInt::isValueValidForType(v546, *v553)
                                        && (v555 != -1 || *((_QWORD *)&v1575 + 1) != 0x8000000000000000))
                                      {
                                        v557 = v555 * *((_QWORD *)&v1575 + 1);
                                        if ((unsigned __int128)(v555 * (__int128)*((uint64_t *)&v1575 + 1)) >> 64 == (v555 * *((_QWORD *)&v1575 + 1)) >> 63)
                                        {
                                          if (*((_BYTE *)v546 + 8) == 15
                                            || (v1437 = v555 * *((_QWORD *)&v1575 + 1),
                                                v576 = llvm::ConstantInt::isValueValidForType(v546, v555 * *((_QWORD *)&v1575 + 1)), v557 = v1437, v576))
                                          {
                                            v558 = *v1532;
                                            if (v555 != -1 || v558 != 0x8000000000000000)
                                            {
                                              v559 = v555 * v558;
                                              if ((unsigned __int128)(v555 * (__int128)v558) >> 64 == (v555 * v558) >> 63)
                                              {
                                                if (*((_BYTE *)v546 + 8) == 15
                                                  || (v1438 = v557,
                                                      v1432 = v555 * v558,
                                                      isValueValidForType = llvm::ConstantInt::isValueValidForType(v546, v559), v559 = v1432, v557 = v1438, isValueValidForType))
                                                {
                                                  *(_OWORD *)__b = v1575;
                                                  *(_OWORD *)&__b[16] = v1576;
                                                  *(_QWORD *)&__b[32] = &v1619;
                                                  v1618 = (void *)0x400000000;
                                                  if ((_DWORD)v1578)
                                                  {
                                                    v1439 = v557;
                                                    v578 = v559;
                                                    sub_1C62C1D5C((uint64_t)&__b[32], (uint64_t)&v1577);
                                                    v559 = v578;
                                                    v557 = v1439;
                                                  }
                                                  *(_OWORD *)v1622 = v1580;
                                                  *(_QWORD *)&__b[8] = v557;
                                                  v560 = v559;
                                                  if (sub_1C5B9E730(*(uint64_t **)(a1 + 48), v559, v559, *v1502, *v1491, *v1484, (uint64_t *)__b))
                                                  {
                                                    *(_QWORD *)&__b[8] = *(_QWORD *)&__b[8] + v560 - *v1532;
                                                    v561 = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 8), v546, v555, 0);
                                                    v562 = v561;
                                                    v1463 = v554;
                                                    if ((_DWORD)v1618)
                                                    {
                                                      v563 = 0;
                                                      v1431 = (llvm::ConstantInt *)(8 * v1618);
                                                      v1436 = v561;
                                                      while (1)
                                                      {
                                                        v564 = *(_QWORD *)(a1 + 8);
                                                        v565 = *(_QWORD *)((char *)v563 + *(_QWORD *)&__b[32]);
                                                        v1606[0] = v1607;
                                                        *(_QWORD *)v1607 = v565;
                                                        *(_QWORD *)&v1607[8] = v562;
                                                        v1606[1] = (void *)0x200000002;
                                                        MulExpr = llvm::ScalarEvolution::getMulExpr(v564, (uint64_t)v1606, 0, 0);
                                                        if (v1606[0] != v1607)
                                                        {
                                                          v567 = MulExpr;
                                                          free(v1606[0]);
                                                          MulExpr = v567;
                                                        }
                                                        *(_QWORD *)((char *)v563 + *(_QWORD *)&__b[32]) = MulExpr;
                                                        v568 = sub_1C5B97F8C(*(_QWORD *)((char *)v563 + *(_QWORD *)&__b[32]), v1436, *(llvm::ConstantInt *****)(a1 + 8), 0);
                                                        v562 = v1436;
                                                        v554 = v1463;
                                                        if (v568 != *(_QWORD *)((char *)v563 + (_QWORD)v1577))
                                                          break;
                                                        v563 = (llvm::ConstantInt *)((char *)v563 + 8);
                                                        if (v1431 == v563)
                                                          goto LABEL_879;
                                                      }
                                                    }
                                                    else
                                                    {
LABEL_879:
                                                      if (!v1622[0])
                                                        goto LABEL_883;
                                                      v569 = *(_QWORD *)(a1 + 8);
                                                      v1606[0] = v1607;
                                                      *(llvm::SCEV **)v1607 = v1622[0];
                                                      *(_QWORD *)&v1607[8] = v562;
                                                      v1606[1] = (void *)0x200000002;
                                                      v570 = v562;
                                                      v571 = (llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(v569, (uint64_t)v1606, 0, 0);
                                                      if (v1606[0] != v1607)
                                                      {
                                                        v572 = v571;
                                                        free(v1606[0]);
                                                        v571 = v572;
                                                      }
                                                      v1622[0] = v571;
                                                      v573 = sub_1C5B97F8C((uint64_t)v571, v570, *(llvm::ConstantInt *****)(a1 + 8), 0);
                                                      v554 = v1463;
                                                      if (v573 == (_QWORD)v1580)
                                                      {
LABEL_883:
                                                        v574 = v1622[1];
                                                        if (!v1622[1]
                                                          || (v555 != -1
                                                           || v1622[1] != (llvm::SCEV *)0x8000000000000000)
                                                          && (v575 = (uint64_t)v1622[1] * v555,
                                                              v1622[1] = (llvm::SCEV *)((uint64_t)v1622[1] * v555),
                                                              (uint64_t)v574 * v555 / v555 == *((_QWORD *)&v1580 + 1))
                                                          && (*((_BYTE *)v546 + 8) == 15
                                                           || llvm::ConstantInt::isValueValidForType(v546, v575)))
                                                        {
                                                          sub_1C5B9BCE0((unint64_t *)a1, v523, jj, (unint64_t)__b);
                                                        }
                                                      }
                                                    }
                                                  }
                                                  if (*(uint64_t **)&__b[32] != &v1619)
                                                    free(*(void **)&__b[32]);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      ++v553;
                                    }
                                    while (v553 != v554);
                                  }
                                }
                              }
                            }
                            if (v1577 != v1579)
                              free(v1577);
                            ++v540;
                          }
                          while (v540 != v539);
                          v1433 = (llvm::ConstantInt *)*(unsigned int *)(v523 + 680);
                          if ((_DWORD)v1433)
                          {
                            v579 = 0;
                            v580 = (char *)v1548 + 1904 * jj + 656;
                            while (1)
                            {
                              v581 = *__nf;
                              v582 = *__nf + 96 * v579;
                              v583 = *(_OWORD *)(v582 + 16);
                              v1569 = *(_OWORD *)v582;
                              v1570 = v583;
                              v1571 = v1573;
                              v1572 = 0x400000000;
                              if (*(_DWORD *)(v582 + 40))
                                sub_1C62C1D5C((uint64_t)&v1571, v581 + 96 * v579 + 32);
                              v1440 = v579;
                              v1574 = *(_OWORD *)(v581 + 96 * v579 + 80);
                              v1549 = (llvm::Type *)sub_1C5B9ED5C((uint64_t)&v1569);
                              if (v1549)
                              {
                                if (!*((_QWORD *)&v1570 + 1) || sub_1C5B9E418((uint64_t)&v1569))
                                {
                                  v584 = *(unsigned int *)(a1 + 200);
                                  if ((_DWORD)v584)
                                    break;
                                }
                              }
LABEL_956:
                              if (v1571 != v1573)
                                free(v1571);
                              v579 = v1440 + 1;
                              if ((llvm::ConstantInt *)(v1440 + 1) == v1433)
                                goto LABEL_959;
                            }
                            v585 = *(uint64_t **)(a1 + 192);
                            v1464 = &v585[v584];
                            while (1)
                            {
                              v586 = *v585;
                              *((_QWORD *)&v1570 + 1) = *v585;
                              LOBYTE(v1570) = v1572 > 1;
                              v587 = sub_1C5B9E730(*(uint64_t **)(a1 + 48), *v1532, *v1511, *v1502, *v1491, *v1484, (uint64_t *)&v1569);
                              v588 = *v1502;
                              if ((v587 & 1) == 0)
                              {
                                if (v588
                                  || !sub_1C5B9E730(*(uint64_t **)(a1 + 48), *v1532, *v1511, 1, *v1491, *v1484, (uint64_t *)&v1569)|| !*v580)
                                {
                                  goto LABEL_951;
                                }
                                v588 = 1;
                                *v1502 = 1;
                              }
                              if ((v588 != 3 || (_BYTE)v1570 || v1569 != 0) && (_DWORD)v1572)
                              {
                                v589 = 0;
                                v590 = 8 * v1572;
                                do
                                {
                                  v591 = *(_QWORD *)((char *)v1571 + v589);
                                  if (v591)
                                    v592 = *(unsigned __int16 *)(v591 + 24) == 7;
                                  else
                                    v592 = 0;
                                  if (!v592)
                                    goto LABEL_945;
                                  if (*(_QWORD *)(v591 + 48) != *(_QWORD *)(a1 + 56) && *v580 == 0)
                                    goto LABEL_945;
                                  v594 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 8), v1549, v586, 0);
                                  if (llvm::SCEV::isZero(v594))
                                    goto LABEL_945;
                                  v595 = sub_1C5B97F8C(v591, (uint64_t)v594, *(llvm::ConstantInt *****)(a1 + 8), 1);
                                  if (!v595)
                                    goto LABEL_945;
                                  v596 = (llvm::SCEV *)v595;
                                  *(_OWORD *)__b = v1569;
                                  *(_OWORD *)&__b[16] = v1570;
                                  *(_QWORD *)&__b[32] = &v1619;
                                  v1618 = (void *)0x400000000;
                                  v597 = v1572;
                                  if ((_DWORD)v1572)
                                  {
                                    sub_1C62C1D5C((uint64_t)&__b[32], (uint64_t)&v1571);
                                    v598 = *(uint64_t **)&__b[32];
                                    v597 = v1618;
                                  }
                                  else
                                  {
                                    v598 = &v1619;
                                  }
                                  v1622[1] = *((llvm::SCEV **)&v1574 + 1);
                                  v1622[0] = v596;
                                  v599 = &v598[v589 / 8];
                                  v600 = &v598[v597 - 1];
                                  if (v599 != v600)
                                  {
                                    v601 = *v599;
                                    *v599 = *v600;
                                    *v600 = v601;
                                  }
                                  v602 = v597 - 1;
                                  LODWORD(v1618) = v602;
                                  if (*(_QWORD *)&__b[24] == 1)
                                  {
                                    if (!v602
                                      || ((v603 = *(_QWORD *)(a1 + 56), *(_QWORD *)(v591 + 48) != v603)
                                        ? (v604 = *v580 == 0)
                                        : (v604 = 1),
                                          !v604))
                                    {
                                      v605 = *(void **)&__b[32];
                                      if (*(uint64_t **)&__b[32] == &v1619)
                                        goto LABEL_945;
LABEL_944:
                                      free(v605);
                                      goto LABEL_945;
                                    }
                                    if (*v580)
                                      sub_1C5B9C68C((uint64_t)__b, v603);
                                  }
                                  sub_1C5B9BCE0((unint64_t *)a1, v523, jj, (unint64_t)__b);
                                  v605 = *(void **)&__b[32];
                                  if (*(uint64_t **)&__b[32] != &v1619)
                                    goto LABEL_944;
LABEL_945:
                                  v589 += 8;
                                }
                                while (v590 != v589);
                              }
LABEL_951:
                              if (++v585 == v1464)
                                goto LABEL_956;
                            }
                          }
                        }
                      }
                    }
LABEL_959:
                    ;
                  }
                  v521 = a1 + 30848;
                  v1458 = (llvm::APInt *)*(unsigned int *)(a1 + 368);
                  if ((_DWORD)v1458)
                  {
                    v606 = 0;
                    v607 = &v1619;
                    while (1)
                    {
                      __ng = *(_QWORD *)(a1 + 360) + 1904 * (_QWORD)v606;
                      v1533 = *(unsigned int *)(__ng + 680);
                      v1550 = v606;
                      if ((_DWORD)v1533)
                        break;
LABEL_1004:
                      v606 = (llvm::Type *)((char *)v1550 + 1);
                      if ((llvm::Type *)((char *)v1550 + 1) == v1458)
                        goto LABEL_1005;
                    }
                    v608 = 0;
                    v1512 = (llvm::Type *)(__ng + 672);
                    while (1)
                    {
                      v609 = *(_QWORD *)v1512;
                      v610 = *(_QWORD *)v1512 + 96 * v608;
                      v611 = *(_OWORD *)(v610 + 16);
                      v1563 = *(_OWORD *)v610;
                      v1564 = v611;
                      v1565 = v1567;
                      v1566 = 0x400000000;
                      if (*(_DWORD *)(v610 + 40))
                        sub_1C62C1D5C((uint64_t)&v1565, v609 + 96 * v608 + 32);
                      v1568 = *(_OWORD *)(v609 + 96 * v608 + 80);
                      v521 = a1 + 30848;
                      if (!(_QWORD)v1563)
                      {
                        v612 = sub_1C5B9ED5C((uint64_t)&v1563);
                        if (v612)
                        {
                          v613 = v612;
                          if (*(_BYTE *)(v612 + 8) != 15)
                          {
                            if ((_QWORD)v1568)
                              __asm { BR              X10 }
                            if ((_DWORD)v1566)
                              __asm { BR              X12 }
                            v614 = *(unsigned int *)(a1 + 320);
                            if ((_DWORD)v614)
                              break;
                          }
                        }
                      }
LABEL_967:
                      if (v1565 != v1567)
                        free(v1565);
                      if (++v608 == v1533)
                        goto LABEL_1004;
                    }
                    v615 = *(llvm::Type ***)(a1 + 312);
                    v616 = &v615[v614];
                    while (2)
                    {
                      v617 = *v615;
                      if (*v615 != (llvm::Type *)v613
                        && (*(unsigned int (**)(_QWORD, llvm::Type *, uint64_t))(***(_QWORD ***)(a1 + 48)
                                                                                         + 456))(**(_QWORD **)(a1 + 48), *v615, v613))
                      {
                        *(_OWORD *)__b = v1563;
                        *(_OWORD *)&__b[16] = v1564;
                        *(_QWORD *)&__b[32] = v607;
                        v1618 = (void *)0x400000000;
                        if ((_DWORD)v1566)
                          sub_1C62C1D5C((uint64_t)&__b[32], (uint64_t)&v1565);
                        v618 = v607;
                        *(_OWORD *)v1622 = v1568;
                        if ((_QWORD)v1568)
                        {
                          AnyExtendExpr = (llvm::SCEV *)llvm::ScalarEvolution::getAnyExtendExpr(*(llvm::ScalarEvolution **)(a1 + 8), v1622[0], v617);
                          if (!llvm::SCEV::isZero(AnyExtendExpr))
                          {
                            v1622[0] = AnyExtendExpr;
                            goto LABEL_987;
                          }
                        }
                        else
                        {
                          AnyExtendExpr = 0;
LABEL_987:
                          if (!(_DWORD)v1618)
                          {
LABEL_992:
                            if (!AnyExtendExpr
                              || !sub_1C5B9EE04((uint64_t)v1462, (uint64_t)AnyExtendExpr, (uint64_t)v1550))
                            {
                              if (!(_DWORD)v1618)
                                goto LABEL_999;
                              v623 = *(uint64_t **)&__b[32];
                              v624 = 8 * v1618;
                              while (!sub_1C5B9EE04((uint64_t)v1462, *v623, (uint64_t)v1550))
                              {
                                ++v623;
                                v624 -= 8;
                                if (!v624)
                                  goto LABEL_999;
                              }
                            }
                            sub_1C5B9C68C((uint64_t)__b, *(_QWORD *)(a1 + 56));
                            sub_1C5B9BCE0((unint64_t *)a1, __ng, v1550, (unint64_t)__b);
                            goto LABEL_999;
                          }
                          v620 = *(const llvm::SCEV ***)&__b[32];
                          v621 = 8 * v1618;
                          while (1)
                          {
                            v622 = (llvm::SCEV *)llvm::ScalarEvolution::getAnyExtendExpr(*(llvm::ScalarEvolution **)(a1 + 8), *v620, v617);
                            if (llvm::SCEV::isZero(v622))
                              break;
                            *v620++ = v622;
                            v621 -= 8;
                            if (!v621)
                            {
                              AnyExtendExpr = v1622[0];
                              goto LABEL_992;
                            }
                          }
                        }
LABEL_999:
                        v607 = v618;
                        if (*(uint64_t **)&__b[32] != v618)
                          free(*(void **)&__b[32]);
                        v521 = a1 + 30848;
                      }
                      if (++v615 == v616)
                        goto LABEL_967;
                      continue;
                    }
                  }
LABEL_1005:
                  v1561[0] = 0;
                  v1561[1] = 0;
                  v1562 = 0;
                  v1559[0] = 0;
                  v1559[1] = 0;
                  v1560 = 0;
                  v1613 = v1615;
                  v1614 = 0x800000000;
                  v625 = *(unsigned int *)(v521 + 24);
                  if ((_DWORD)v625)
                  {
                    v709 = *(uint64_t **)(a1 + 30864);
                    v1551 = (llvm::Type *)&v709[v625];
                    do
                    {
                      v710 = *v709;
                      *(_QWORD *)&v1602 = *v709;
                      v711 = sub_1C5B9ABA4((unint64_t *)&v1602, *(uint64_t **)(a1 + 8));
                      v1641 = 0;
                      v1642 = 0;
                      v1640 = &v1641;
                      v712 = v1602;
                      *(_OWORD *)&__b[16] = 0uLL;
                      *(_QWORD *)__b = v1602;
                      *(_QWORD *)&__b[8] = &__b[16];
                      sub_1C631CD0C((uint64_t)v1606, (uint64_t)v1561, (uint64_t *)__b, &__b[8]);
                      sub_1C6143384(*(_QWORD **)&__b[16]);
                      sub_1C6143384(v1641);
                      if (v1607[0])
                      {
                        v713 = v1614;
                        if (v1614 >= (unint64_t)HIDWORD(v1614))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1613, (uint64_t)v1615, v1614 + 1, 8);
                          v713 = v1614;
                        }
                        *((_QWORD *)v1613 + v713) = v712;
                        LODWORD(v1614) = v1614 + 1;
                      }
                      v714 = (_QWORD **)v1606[0];
                      v716 = (uint64_t **)((char *)v1606[0] + 16);
                      v715 = (uint64_t *)*((_QWORD *)v1606[0] + 2);
                      if (v715)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            v717 = (uint64_t **)v715;
                            v718 = v715[4];
                            if (v718 <= v711)
                              break;
                            v715 = *v717;
                            v716 = v717;
                            if (!*v717)
                              goto LABEL_1140;
                          }
                          if (v718 >= v711)
                            break;
                          v715 = v717[1];
                          if (!v715)
                          {
                            v716 = v717 + 1;
                            goto LABEL_1140;
                          }
                        }
                      }
                      else
                      {
                        v717 = (uint64_t **)((char *)v1606[0] + 16);
LABEL_1140:
                        v719 = (uint64_t *)operator new(0x30uLL);
                        v719[4] = v711;
                        v719[5] = v710;
                        *v719 = 0;
                        v719[1] = 0;
                        v719[2] = (uint64_t)v717;
                        *v716 = v719;
                        v720 = (_QWORD *)*v714[1];
                        if (v720)
                        {
                          v714[1] = v720;
                          v719 = *v716;
                        }
                        sub_1C4768E74(v714[2], v719);
                        v714[3] = (_QWORD *)((char *)v714[3] + 1);
                      }
                      *(_QWORD *)__b = 0;
                      if (sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v710, __b))
                        v721 = *(_QWORD *)__b;
                      else
                        v721 = *v1462 + 16 * *(unsigned int *)(a1 + 30856);
                      v722 = (unint64_t *)(v721 + 8);
                      v723 = sub_1C631CE04((uint64_t)v1559, (uint64_t *)&v1602);
                      sub_1C4AFD980(v723 + 1, v722);
                      ++v709;
                    }
                    while (v709 != (uint64_t *)v1551);
                    v627 = (void **)v1613;
                    v626 = v1614;
                  }
                  else
                  {
                    v626 = 0;
                    v627 = (void **)v1615;
                  }
                  *(_QWORD *)__b = &__b[16];
                  *(_QWORD *)&__b[8] = 0x2000000000;
                  v1606[0] = v1607;
                  v1606[1] = (void *)0x2000000000;
                  v1612 = 0uLL;
                  v1611 = &v1612;
                  if (!v626)
                  {
LABEL_1149:
                    sub_1C631CBCC(v1561);
                    LODWORD(v1614) = 0;
                    sub_1C631CC6C(v1559);
                    LODWORD(v1606[1]) = 0;
                    sub_1C6143384((_QWORD *)v1612);
                    v1611 = &v1612;
                    v1612 = 0u;
                    if (*(_DWORD *)&__b[8])
                      __asm { BR              X10 }
                    sub_1C6143384(0);
                    if (v1606[0] != v1607)
                      free(v1606[0]);
                    if (*(_BYTE **)__b != &__b[16])
                      free(*(void **)__b);
                    if (v1613 != v1615)
                      free(v1613);
                    v779 = v1559[0];
                    if (v1560)
                    {
                      v780 = (void ***)(v1559[0] + 1);
                      v781 = 16 * v1560;
                      do
                      {
                        if (((unint64_t)*(v780 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                          v780 = sub_1C4914448(v780);
                        v780 += 2;
                        v781 -= 16;
                      }
                      while (v781);
                      v779 = v1559[0];
                    }
                    MEMORY[0x1CAA32FB4](v779, 8);
                    v782 = v1561[0];
                    if (v1562)
                    {
                      v783 = (_QWORD **)(v1561[0] + 16);
                      v784 = 32 * v1562;
                      do
                      {
                        if (((unint64_t)*(v783 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
                          sub_1C6143384(*v783);
                        v783 += 4;
                        v784 -= 32;
                      }
                      while (v784);
                      v782 = v1561[0];
                    }
                    MEMORY[0x1CAA32FB4](v782, 8);
                    sub_1C5B974A8(a1);
                    v785 = *(unsigned int *)(a1 + 368);
                    v786 = dword_1ED8202B8;
                    if (!(_DWORD)v785)
                      goto LABEL_1261;
                    v788 = *(_QWORD *)(a1 + 360);
                    v789 = v788 + 1904 * v785;
                    v790 = 1904;
                    v791 = 1;
                    do
                    {
                      v792 = *(unsigned int *)(v788 + v790 - 1224);
                      v793 = v791 * v792;
                      if (v792 < dword_1ED8202B8)
                        v791 *= v792;
                      else
                        v791 = dword_1ED8202B8;
                      v795 = v792 >= dword_1ED8202B8
                          || v793 >= dword_1ED8202B8
                          || 1904 * v785 == v790;
                      v790 += 1904;
                    }
                    while (!v795);
                    if (v791 >= dword_1ED8202B8)
                    {
                      v796 = 0;
                      v1449 = *(unsigned int *)(a1 + 368);
                      while (1)
                      {
                        v797 = *(_QWORD *)(a1 + 360) + 1904 * v796;
                        v1553 = (llvm::Type *)*(unsigned int *)(v797 + 680);
                        if (!(_DWORD)v1553)
                          goto LABEL_1322;
                        v1465 = v796;
                        v798 = 0;
                        v1492 = 0;
                        v1486 = (_QWORD *)(v797 + 672);
                        do
                        {
                          v799 = *v1486 + 96 * (_QWORD)v798;
                          v800 = *(unsigned int *)(v799 + 40);
                          if ((_DWORD)v800)
                          {
                            v802 = (_QWORD *)(v799 + 32);
                            v801 = *(uint64_t **)(v799 + 32);
                            v803 = *v1486 + 96 * (_QWORD)v798;
                            v1514 = (llvm::Type *)(v803 + 80);
                            v1537 = (int *)(v803 + 40);
                            v804 = 8 * v800;
                            v805 = v801;
                            do
                            {
                              v806 = *v805;
                              v807 = *(unsigned __int16 *)(*v805 + 24);
                              if (*v805)
                                v808 = v807 == 0;
                              else
                                v808 = 0;
                              if (v808)
                              {
                                v818 = *(_OWORD *)v799;
                                *(_OWORD *)&__b[16] = *(_OWORD *)(v799 + 16);
                                *(_OWORD *)__b = v818;
                                *(_QWORD *)&__b[32] = &v1619;
                                v1618 = (void *)0x400000000;
                                if (*v1537)
                                  sub_1C62C1D5C((uint64_t)&__b[32], v799 + 32);
                                *(_OWORD *)v1622 = *(_OWORD *)v1514;
                                v819 = *(_QWORD *)(v806 + 32);
                                v820 = *(_DWORD *)(v819 + 32);
                                if (v820 > 0x40)
                                  v821 = **(_QWORD **)(v819 + 24);
                                else
                                  v821 = (uint64_t)(*(_QWORD *)(v819 + 24) << -(char)v820) >> -(char)v820;
                                *(_QWORD *)&__b[8] += v821;
                                v822 = (uint64_t)v801 + *(_QWORD *)&__b[32] - *v802;
                                v823 = (int)v1618;
                                v824 = *(_QWORD *)&__b[32] + 8 * v1618;
                                if (v824 != v822 + 8)
                                {
                                  memmove((void *)v822, (const void *)(v822 + 8), v824 - (v822 + 8));
                                  v823 = (int)v1618;
                                }
                                v817 = v823 - 1;
                              }
                              else
                              {
                                if (v806)
                                  v809 = v807 == 14;
                                else
                                  v809 = 0;
                                if (!v809)
                                  goto LABEL_1316;
                                v810 = *(unsigned __int8 *)(*(_QWORD *)(v806 - 8) + 16) >= 4u
                                     ? 0
                                     : *(_QWORD *)(v806 - 8);
                                if (!v810 || *(_QWORD *)v799 != 0)
                                  goto LABEL_1316;
                                v812 = *(_OWORD *)v799;
                                *(_OWORD *)&__b[16] = *(_OWORD *)(v799 + 16);
                                *(_OWORD *)__b = v812;
                                *(_QWORD *)&__b[32] = &v1619;
                                v1618 = (void *)0x400000000;
                                v813 = *v1537;
                                if (*v1537)
                                {
                                  sub_1C62C1D5C((uint64_t)&__b[32], v799 + 32);
                                  v814 = *(uint64_t **)&__b[32];
                                  v813 = (int)v1618;
                                }
                                else
                                {
                                  v814 = &v1619;
                                }
                                *(_OWORD *)v1622 = *(_OWORD *)v1514;
                                *(_QWORD *)__b = v810;
                                v815 = (char *)v801 + (_QWORD)v814 - *v802;
                                v816 = &v814[v813];
                                if (v816 != (uint64_t *)(v815 + 8))
                                {
                                  memmove(v815, v815 + 8, (char *)v816 - (v815 + 8));
                                  v813 = (int)v1618;
                                }
                                v817 = v813 - 1;
                              }
                              LODWORD(v1618) = v817;
                              v825 = sub_1C5BA060C(v797, (uint64_t)__b);
                              v826 = v825;
                              if (v825)
                              {
                                sub_1C5B9F718(v797, (__int128 *)v799);
                                v798 = (llvm::Type *)((char *)v798 - 1);
                                v1553 = (llvm::Type *)((char *)v1553 - 1);
                                v1492 = 1;
                              }
                              if (*(uint64_t **)&__b[32] != &v1619)
                                free(*(void **)&__b[32]);
                              if ((v826 & 1) != 0)
                                break;
LABEL_1316:
                              ++v805;
                              ++v801;
                              v804 -= 8;
                            }
                            while (v804);
                          }
                          v798 = (llvm::Type *)((char *)v798 + 1);
                        }
                        while (v798 != v1553);
                        v785 = v1449;
                        v796 = v1465;
                        if ((v1492 & 1) != 0)
                          sub_1C5B9F854(v797, v1465, (uint64_t)v1462);
LABEL_1322:
                        if (++v796 == v785)
                        {
                          v785 = *(unsigned int *)(a1 + 368);
                          v786 = dword_1ED8202B8;
                          if ((_DWORD)v785)
                          {
                            v788 = *(_QWORD *)(a1 + 360);
                            v789 = v788 + 1904 * v785;
                            break;
                          }
LABEL_1261:
                          v786 = v786;
                          goto LABEL_1262;
                        }
                      }
                    }
                    v827 = 1;
                    v828 = v788;
                    do
                    {
                      v829 = *(unsigned int *)(v828 + 680);
                      v830 = v827 * v829;
                      if (v829 < v786)
                        v827 *= v829;
                      else
                        v827 = v786;
                      v828 += 1904;
                    }
                    while (v829 < v786 && v830 < v786 && v828 != v789);
                    if (v827 < v786)
                    {
                      v833 = v788 + 1904 * v785;
LABEL_1453:
                      v787 = 1;
                      do
                      {
                        v925 = *(unsigned int *)(v788 + 680);
                        v926 = v787 * v925;
                        if (v925 < v786)
                          v787 *= v925;
                        else
                          v787 = v786;
                        v788 += 1904;
                      }
                      while (v925 < v786 && v926 < v786 && v788 != v833);
                      goto LABEL_1465;
                    }
                    for (kk = 0; kk != v785; ++kk)
                    {
                      v835 = *(_QWORD *)(a1 + 360);
                      v836 = v835 + 1904 * kk;
                      v837 = *(_DWORD *)(v836 + 680);
                      if (!v837)
                        continue;
                      v1445 = kk;
                      v1450 = v785;
                      v1441 = v836 + 672;
                      v1442 = *(_QWORD *)(a1 + 360);
                      v838 = *(_QWORD *)(v836 + 672);
                      v1466 = v838 + 96 * v837;
                      v839 = (int *)(v835 + 1904 * kk);
                      v1538 = (uint64_t)v839;
                      v1554 = v839 + 6;
                      v1504 = (llvm::SmallPtrSetImplBase *)(v839 + 10);
                      v1515 = (llvm::Type *)(v839 + 8);
                      v1459 = (llvm::APInt *)(v839 + 166);
                      while (1)
                      {
                        if (*(_QWORD *)(v838 + 8))
                        {
                          if (*(_QWORD *)(v838 + 24) <= 1uLL)
                          {
                            v840 = *(unsigned int *)(a1 + 368);
                            if ((_DWORD)v840)
                            {
                              v841 = 0;
                              while (1)
                              {
                                v842 = *(_QWORD *)(a1 + 360);
                                v843 = v842 + 1904 * v841;
                                if (v843 != v836)
                                {
                                  v844 = v842 + 1904 * v841;
                                  v847 = *(_DWORD *)(v844 + 24);
                                  v846 = (int *)(v844 + 24);
                                  v845 = v847;
                                  if (v847 != 3 && v845 == *v1554)
                                  {
                                    v849 = v842 + 1904 * v841;
                                    v850 = *(_QWORD *)(v849 + 32);
                                    v1493 = (uint64_t *)(v849 + 32);
                                    v852 = (uint64_t *)(v849 + 40);
                                    v851 = *(_DWORD *)(v849 + 40);
                                    v1487 = v852;
                                    if (*(_QWORD *)v1515 == v850
                                      && *(_DWORD *)v1504 == v851
                                      && *(_QWORD *)(v842 + 1904 * v841 + 664) == *(_QWORD *)v1459)
                                    {
                                      v854 = sub_1C5BA060C(v842 + 1904 * v841, v838);
                                      v836 = v1538;
                                      if (v854)
                                      {
                                        v855 = v842 + 1904 * v841;
                                        v856 = *(unsigned int *)(v855 + 680);
                                        if ((_DWORD)v856)
                                        {
                                          v1453 = (_QWORD *)(v855 + 672);
                                          v857 = *(_QWORD *)(v855 + 672);
                                          v858 = *(unsigned int *)(v838 + 40);
                                          v859 = 96 * v856;
                                          while (1)
                                          {
                                            if (*(_DWORD *)(v857 + 40) == (_DWORD)v858)
                                            {
                                              v860 = memcmp(*(const void **)(v857 + 32), *(const void **)(v838 + 32), 8 * v858);
                                              v836 = v1538;
                                              if (!v860
                                                && *(_QWORD *)(v857 + 80) == *(_QWORD *)(v838 + 80)
                                                && *(_QWORD *)v857 == *(_QWORD *)v838
                                                && *(_QWORD *)(v857 + 24) == *(_QWORD *)(v838 + 24)
                                                && *(_QWORD *)(v857 + 88) == *(_QWORD *)(v838 + 88))
                                              {
                                                break;
                                              }
                                            }
                                            v857 += 96;
                                            v859 -= 96;
                                            if (!v859)
                                              goto LABEL_1368;
                                          }
                                          if (!*(_QWORD *)(v857 + 8))
                                            break;
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_1368:
                                if (++v841 == v840)
                                  goto LABEL_1373;
                              }
                              if (v842)
                              {
                                v861 = sub_1C5B9AE04(a1, v842 + 1904 * v841, *(_QWORD *)(v838 + 8), 0, *v1554, *(_QWORD ***)v1515, *(_QWORD *)v1504);
                                v836 = v1538;
                                if (v861)
                                  break;
                              }
                            }
                          }
                        }
LABEL_1373:
                        v838 += 96;
                        if (v838 == v1466)
                        {
                          kk = v1445;
                          v785 = v1450;
                          goto LABEL_1375;
                        }
                      }
                      v862 = v1442 + 1904 * v1445;
                      v864 = *(_QWORD *)(v862 + 48);
                      v862 += 48;
                      v863 = v864;
                      *(_BYTE *)(v842 + 1904 * v841 + 656) &= *(_BYTE *)(v862 + 608);
                      v1420 = (uint64_t *)v862;
                      v865 = *(unsigned int *)(v862 + 8);
                      if ((_DWORD)v865)
                      {
                        v866 = (size_t *)(v842 + 1904 * v841);
                        v1422 = v866 + 6;
                        v1467 = v866 + 81;
                        v1460 = (llvm::APInt *)(v866 + 80);
                        v1505 = (llvm::SmallPtrSetImplBase *)(72 * v865);
                        v1516 = (llvm::Type *)(v866 + 7);
                        do
                        {
                          *(_QWORD *)(v863 + 64) += *(_QWORD *)(v838 + 8);
                          v867 = sub_1C5B9BC78((uint64_t)v1422, v863);
                          __nh = *v1422;
                          v868 = *(_DWORD *)v1516;
                          v869 = *v1422 + 72 * *(unsigned int *)v1516;
                          *(_OWORD *)v869 = *(_OWORD *)v867;
                          v870 = (void *)(v869 + 48);
                          *(_QWORD *)(v869 + 16) = v869 + 48;
                          v871 = v869 + 16;
                          v872 = *(const void **)(v867 + 24);
                          if (v872 == *(const void **)(v867 + 16))
                          {
                            *(_QWORD *)(v871 + 8) = v870;
                          }
                          else
                          {
                            v1418 = *(unsigned int *)(v867 + 32);
                            v870 = malloc_type_malloc(8 * v1418, 0x4065EBACuLL);
                            if (!v870)
                            {
                              if ((_DWORD)v1418)
                                goto LABEL_1126;
                              v870 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                              if (!v870)
                                goto LABEL_1126;
                            }
                            *(_QWORD *)(v871 + 8) = v870;
                            v872 = *(const void **)(v867 + 16);
                          }
                          *(_DWORD *)(v871 + 16) = *(_DWORD *)(v867 + 32);
                          v873 = *(const void **)(v867 + 24);
                          v874 = *(_DWORD *)(v867 + 36);
                          if (v873 == v872)
                            v875 = *(_DWORD *)(v867 + 36);
                          else
                            v875 = *(_DWORD *)(v867 + 32);
                          if (v875)
                          {
                            memmove(v870, v873, 8 * v875);
                            v874 = *(_DWORD *)(v867 + 36);
                          }
                          *(_DWORD *)(v871 + 20) = v874;
                          *(_DWORD *)(v871 + 24) = *(_DWORD *)(v867 + 40);
                          *(_QWORD *)(__nh + 72 * v868 + 64) = *(_QWORD *)(v867 + 64);
                          ++*(_DWORD *)v1516;
                          v876 = *(_QWORD *)(v863 + 64);
                          if (v876 > *v1467)
                            *v1467 = v876;
                          if (v876 < *(_QWORD *)v1460)
                            *(_QWORD *)v1460 = v876;
                          v863 += 72;
                          v1505 = (llvm::SmallPtrSetImplBase *)((char *)v1505 - 72);
                        }
                        while (v1505);
                      }
                      v877 = *(unsigned int *)(v842 + 1904 * v841 + 680);
                      if ((_DWORD)v877)
                      {
                        v878 = 0;
                        v879 = 0;
                        v880 = v842 + 1904 * v841;
                        v881 = (uint64_t *)(v880 + 640);
                        v882 = (uint64_t *)(v880 + 648);
LABEL_1399:
                        v883 = 96 * v878;
                        do
                        {
                          v884 = (__int128 *)(*v1453 + v883);
                          if (!sub_1C5B9E730(*(uint64_t **)(a1 + 48), *v881, *v882, *v846, *v1493, *v1487, (uint64_t *)v884))
                          {
                            sub_1C5B9F718(v843, v884);
                            --v877;
                            v879 = 1;
                            if (v877 != v878)
                              goto LABEL_1399;
                            goto LABEL_1406;
                          }
                          ++v878;
                          v883 += 96;
                        }
                        while (v877 != v878);
                        if ((v879 & 1) == 0)
                          goto LABEL_1407;
LABEL_1406:
                        sub_1C5B9F854(v843, 1191041351 * ((v843 - *(_QWORD *)(a1 + 360)) >> 4), (uint64_t)v1462);
                      }
LABEL_1407:
                      v885 = *(_QWORD *)(a1 + 360);
                      v886 = *(_DWORD *)(a1 + 368);
                      v887 = v885 + 1904 * v886;
                      v888 = (_QWORD *)(v887 - 1904);
                      if (v887 - 1904 != v1538)
                      {
                        memset(__b, 0, 20);
                        *(_QWORD *)__b = *(_QWORD *)v1538;
                        *(_QWORD *)v1538 = 0;
                        *(_DWORD *)&__b[8] = *(_DWORD *)(v1538 + 8);
                        *(_DWORD *)(v1538 + 8) = 0;
                        v889 = *(_DWORD *)&__b[12];
                        *(_DWORD *)&__b[12] = *(_DWORD *)(v1538 + 12);
                        *(_DWORD *)(v1538 + 12) = v889;
                        v890 = *(_DWORD *)&__b[16];
                        *(_DWORD *)&__b[16] = *(_DWORD *)(v1538 + 16);
                        *(_DWORD *)(v1538 + 16) = v890;
                        v891 = *(_OWORD *)v1554;
                        LODWORD(v1618) = v1554[4];
                        *(_OWORD *)&__b[24] = v891;
                        v1619 = (uint64_t)&v1621;
                        v1620 = 0x800000000;
                        if (*(_DWORD *)(v1442 + 1904 * v1445 + 56))
                          sub_1C5B9B324((uint64_t)&v1619, v1420);
                        v892 = v1442 + 1904 * v1445;
                        v893 = *(_OWORD *)(v892 + 656);
                        v1631 = *(_OWORD *)(v892 + 640);
                        v1632 = v893;
                        v1633[0] = &v1634;
                        v1633[1] = 0xC00000000;
                        if (*(_DWORD *)(v892 + 680))
                          sub_1C5B9B7A0((uint64_t)v1633, v1441);
                        v894 = v1442 + 1904 * v1445;
                        v895 = v894 + 1840;
                        v1635 = v1639;
                        v896 = *(_BYTE **)(v894 + 1848);
                        v897 = *(_BYTE **)(v894 + 1840);
                        if (v896 == v897)
                        {
                          v1636 = v1639;
                          v898 = *(unsigned int *)(v895 + 20);
                          if ((_DWORD)v898)
                            memmove(v1639, *(const void **)(v895 + 8), 8 * v898);
                        }
                        else
                        {
                          v1636 = v896;
                          *(_QWORD *)(v895 + 8) = v897;
                        }
                        v1637 = *(_QWORD *)(v895 + 16);
                        v1638 = *(_DWORD *)(v895 + 24);
                        *(_QWORD *)(v895 + 16) = 4;
                        *(_DWORD *)(v895 + 24) = 0;
                        sub_1C5B9BB9C(v1538);
                        MEMORY[0x1CAA32FB4](*(_QWORD *)v1538, 8);
                        *(_QWORD *)v1538 = 0;
                        *(_QWORD *)(v1538 + 8) = 0;
                        *(_DWORD *)(v1538 + 16) = 0;
                        *(_QWORD *)v1538 = *v888;
                        *v888 = 0;
                        *(_DWORD *)(v1538 + 8) = *(_DWORD *)(v887 - 1896);
                        *(_DWORD *)(v887 - 1896) = 0;
                        v899 = *(_DWORD *)(v1538 + 12);
                        *(_DWORD *)(v1538 + 12) = *(_DWORD *)(v887 - 1892);
                        *(_DWORD *)(v887 - 1892) = v899;
                        v900 = *(_DWORD *)(v1538 + 16);
                        *(_DWORD *)(v1538 + 16) = *(_DWORD *)(v887 - 1888);
                        *(_DWORD *)(v887 - 1888) = v900;
                        v901 = *(_OWORD *)(v887 - 1880);
                        v1554[4] = *(_DWORD *)(v887 - 1864);
                        *(_OWORD *)v1554 = v901;
                        sub_1C5B9B324((uint64_t)v1420, (uint64_t *)(v887 - 1856));
                        v902 = *(_OWORD *)(v887 - 1248);
                        *(_OWORD *)(v892 + 640) = *(_OWORD *)(v887 - 1264);
                        *(_OWORD *)(v892 + 656) = v902;
                        sub_1C5B9B7A0(v1441, v887 - 1232);
                        llvm::SmallPtrSetImplBase::MoveFrom(v895, 4, (double *)(v887 - 64));
                        sub_1C5B9BB9C(v887 - 1904);
                        MEMORY[0x1CAA32FB4](*v888, 8);
                        *v888 = 0;
                        *(_QWORD *)(v887 - 1896) = 0;
                        *(_DWORD *)(v887 - 1888) = 0;
                        *v888 = *(_QWORD *)__b;
                        *(_QWORD *)__b = 0;
                        *(_DWORD *)(v887 - 1896) = *(_DWORD *)&__b[8];
                        *(_DWORD *)&__b[8] = 0;
                        v903 = *(_DWORD *)(v887 - 1892);
                        *(_DWORD *)(v887 - 1892) = *(_DWORD *)&__b[12];
                        *(_DWORD *)&__b[12] = v903;
                        v904 = *(_DWORD *)(v887 - 1888);
                        *(_DWORD *)(v887 - 1888) = *(_DWORD *)&__b[16];
                        *(_DWORD *)&__b[16] = v904;
                        v905 = *(_OWORD *)&__b[24];
                        *(_DWORD *)(v887 - 1864) = (_DWORD)v1618;
                        *(_OWORD *)(v887 - 1880) = v905;
                        sub_1C5B9B324(v887 - 1856, &v1619);
                        v906 = v1632;
                        *(_OWORD *)(v887 - 1264) = v1631;
                        *(_OWORD *)(v887 - 1248) = v906;
                        sub_1C5B9B7A0(v887 - 1232, (uint64_t)v1633);
                        if (__b != (_BYTE *)v888)
                          llvm::SmallPtrSetImplBase::MoveFrom(v887 - 64, 4, (double *)&v1635);
                        sub_1C5B9AF24((uint64_t)__b);
                        v886 = *(_DWORD *)(a1 + 368);
                        v885 = *(_QWORD *)(a1 + 360);
                      }
                      v907 = v886 - 1;
                      *(_DWORD *)(a1 + 368) = v907;
                      sub_1C5B9AF24(v885 + 1904 * v907);
                      v908 = *(unsigned int *)(a1 + 368);
                      v909 = *(_QWORD *)(a1 + 30840);
                      v910 = *(unsigned int *)(a1 + 30856);
                      v911 = (_QWORD *)(v909 + 16 * v910);
                      if (*v1480)
                      {
                        if (*(_DWORD *)(a1 + 30856))
                        {
                          v912 = 16 * v910;
                          v913 = *(_QWORD **)(a1 + 30840);
                          while ((*v913 | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v913 += 2;
                            v912 -= 16;
                            if (!v912)
                              goto LABEL_1423;
                          }
                        }
                        else
                        {
                          v913 = *(_QWORD **)(a1 + 30840);
                        }
                      }
                      else
                      {
LABEL_1423:
                        v913 = (_QWORD *)(v909 + 16 * v910);
                      }
                      v914 = (_QWORD *)(v909 + 16 * v910);
                      if (v913 != v914)
                      {
                        v915 = 1 << v908;
                        do
                        {
                          v916 = v913[1];
                          if ((v916 & 1) != 0)
                          {
                            v919 = v916 >> 58;
                            if (v916 >> 58 > v1445)
                            {
                              if (v919 > v908)
                              {
                                v918 = v915 & (v916 >> 1) & ~(-1 << v919);
LABEL_1434:
                                v920 = v918 != 0;
LABEL_1436:
                                *(_QWORD *)__b = v913 + 1;
                                *(_QWORD *)&__b[8] = v1445;
                                sub_1C496F7C8((uint64_t)__b, v920);
                                v916 = v913[1];
                                goto LABEL_1437;
                              }
LABEL_1435:
                              v920 = 0;
                              goto LABEL_1436;
                            }
                          }
                          else
                          {
                            v917 = *(unsigned int *)(v916 + 64);
                            if (v1445 < v917)
                            {
                              if (v917 > v908)
                              {
                                v918 = *(_QWORD *)(*(_QWORD *)v916 + 8 * (v908 >> 6)) & v915;
                                goto LABEL_1434;
                              }
                              goto LABEL_1435;
                            }
                          }
LABEL_1437:
                          if ((v916 & 1) != 0)
                            v921 = v916 >> 58;
                          else
                            v921 = *(unsigned int *)(v916 + 64);
                          if (v921 >= v908)
                            v922 = v908;
                          else
                            v922 = v921;
                          sub_1C496F5AC(v913 + 1, v922, 0);
                          v923 = v913 + 2;
                          v913 = v911;
                          if (v923 != v911)
                          {
                            v913 = v923;
                            while ((*v913 | 0x1000) == 0xFFFFFFFFFFFFF000)
                            {
                              v913 += 2;
                              if (v913 == v911)
                              {
                                v913 = v911;
                                break;
                              }
                            }
                          }
                        }
                        while (v913 != v914);
                      }
                      kk = v1445 - 1;
                      v785 = v1450 - 1;
LABEL_1375:
                      ;
                    }
                    v924 = *(_DWORD *)(a1 + 368);
                    v786 = dword_1ED8202B8;
                    if (v924)
                    {
                      v788 = *(_QWORD *)(a1 + 360);
                      v833 = v788 + 1904 * v924;
                      goto LABEL_1453;
                    }
LABEL_1262:
                    v787 = 1;
LABEL_1465:
                    if (v787 >= v786)
                      sub_1C5B974A8(a1);
                    if (!byte_1ED8201F8)
                      goto LABEL_1561;
                    v929 = *(unsigned int *)(a1 + 368);
                    if ((_DWORD)v929)
                    {
                      v931 = 1904 * v929 - 1904;
                      v932 = (unsigned int *)(*(_QWORD *)(a1 + 360) + 680);
                      v930 = 1;
                      do
                      {
                        v933 = *v932;
                        v934 = v930 * v933;
                        if (v933 < dword_1ED8202B8)
                          v930 *= v933;
                        else
                          v930 = dword_1ED8202B8;
                        v936 = v933 >= dword_1ED8202B8
                            || v934 >= dword_1ED8202B8
                            || v931 == 0;
                        v931 -= 1904;
                        v932 += 476;
                      }
                      while (!v936);
                    }
                    else
                    {
                      v930 = 1;
                    }
                    if (v930 < dword_1ED8202B8)
                      goto LABEL_1561;
                    v1602 = 0uLL;
                    LODWORD(v1603) = 0;
                    v1597[1] = 0;
                    v1597[0] = 0;
                    *(_DWORD *)v1598 = 0;
                    *(_QWORD *)__b = &__b[32];
                    *(_QWORD *)&__b[8] = &__b[32];
                    *(_QWORD *)&__b[16] = 16;
                    *(_DWORD *)&__b[24] = 0;
                    if (!(_DWORD)v929)
                      goto LABEL_1560;
                    v937 = 0;
                    v1555 = (llvm::Type *)(v929 + 1);
                    v1430 = v929;
LABEL_1485:
                    v938 = *(_QWORD *)(a1 + 360) + 1904 * (_QWORD)v937;
                    v939 = *(unsigned int *)(v938 + 680);
                    if (!(_DWORD)v939)
                      goto LABEL_1557;
                    v1434 = v937;
                    v940 = 0;
                    v941 = 0;
                    __ni = *(_QWORD *)(a1 + 360) + 1904 * (_QWORD)v937;
                    v942 = (llvm::Type *)(v938 + 672);
                    v1517 = (llvm::Type *)(v938 + 672);
                    while (2)
                    {
                      v943 = *(_QWORD *)v942;
                      v944 = *(_QWORD *)v942 + 96 * v941;
                      v945 = (__int128 *)(v944 + 80);
                      if (!*(_QWORD *)(v944 + 80))
                      {
LABEL_1488:
                        if (++v941 != v939)
                          continue;
                        v929 = v1430;
                        v937 = v1434;
                        if ((v940 & 1) != 0)
                          sub_1C5B9F854(__ni, v1434, (uint64_t)v1462);
LABEL_1557:
                        sub_1C631D08C((unsigned int *)&v1602);
                        v937 = (llvm::ConstantInt *)((char *)v937 + 1);
                        if (v937 != (llvm::ConstantInt *)v929)
                          goto LABEL_1485;
                        if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                          free(*(void **)&__b[8]);
LABEL_1560:
                        MEMORY[0x1CAA32FB4](0, 8);
                        MEMORY[0x1CAA32FB4](v1602, 8);
LABEL_1561:
                        if (*(_DWORD *)(a1 + 72) == 1)
                        {
                          v995 = *(unsigned int *)(a1 + 368);
                          if ((_DWORD)v995)
                          {
                            v996 = *(_QWORD *)(a1 + 360);
                            v997 = 1904;
                            v998 = 1;
                            do
                            {
                              v999 = *(unsigned int *)(v996 + v997 - 1224);
                              v1000 = v998 * v999;
                              if (v999 < dword_1ED8202B8)
                                v998 *= v999;
                              else
                                v998 = dword_1ED8202B8;
                              v1002 = v999 >= dword_1ED8202B8
                                   || v1000 >= dword_1ED8202B8
                                   || 1904 * v995 == v997;
                              v997 += 1904;
                            }
                            while (!v1002);
                            if (v998 >= dword_1ED8202B8)
                            {
                              v1003 = 0;
                              do
                              {
                                while (1)
                                {
                                  v1004 = v996 + 1904 * v1003;
                                  if (*(_DWORD *)(v1004 + 24) == 2)
                                  {
                                    v1005 = v996 + 1904 * v1003;
                                    v1007 = *(_QWORD *)(v1005 + 32);
                                    v1006 = (_QWORD *)(v1005 + 32);
                                    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 48)
                                                                                              + 1048))(**(_QWORD **)(a1 + 48), 3, v1007) & 1) != 0|| (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(***(_QWORD ***)(a1 + 48)+ 1056))(**(_QWORD **)(a1 + 48), 3, *v1006))
                                    {
                                      break;
                                    }
                                  }
                                  if (++v1003 == v995)
                                    goto LABEL_1620;
                                  v996 = *(_QWORD *)(a1 + 360);
                                }
                                v1008 = v996 + 1904 * v1003;
                                v1009 = *(unsigned int *)(v1008 + 680);
                                if ((_DWORD)v1009)
                                {
                                  v1010 = (_QWORD *)(v1008 + 672);
                                  v1011 = *(_QWORD *)(v1008 + 672);
                                  v1012 = 96 * v1009;
                                  v1013 = (int *)(v1011 + 40);
                                  v1014 = -1;
                                  do
                                  {
                                    v42 = *((_QWORD *)v1013 + 5) == 0;
                                    v1016 = *v1013;
                                    v1013 += 24;
                                    v1015 = v1016;
                                    if (!v42)
                                      ++v1015;
                                    if (v1014 >= v1015)
                                      v1014 = v1015;
                                    v1012 -= 96;
                                  }
                                  while (v1012);
                                  v1017 = 0;
LABEL_1588:
                                  v1018 = *v1010 + 96 * v1017;
                                  do
                                  {
                                    v1019 = *(unsigned int *)(v1018 + 40);
                                    if (*(_QWORD *)(v1018 + 80))
                                      ++v1019;
                                    if (v1019 > v1014)
                                    {
                                      sub_1C5B9F718(v1004, (__int128 *)v1018);
                                      --v1009;
                                      LOBYTE(v1012) = 1;
                                      if (v1009 != v1017)
                                        goto LABEL_1588;
                                      goto LABEL_1599;
                                    }
                                    ++v1017;
                                    v1018 += 96;
                                  }
                                  while (v1009 != v1017);
                                  if ((v1012 & 1) == 0)
                                    goto LABEL_1600;
LABEL_1599:
                                  sub_1C5B9F854(v1004, v1003, (uint64_t)v1462);
                                }
LABEL_1600:
                                v996 = *(_QWORD *)(a1 + 360);
                                v1020 = *(_DWORD *)(a1 + 368);
                                if (v1020)
                                {
                                  v1021 = 1904 * v1020 - 1904;
                                  v1022 = (unsigned int *)(v996 + 680);
                                  v1023 = 1;
                                  do
                                  {
                                    v1024 = *v1022;
                                    v1025 = v1023 * v1024;
                                    if (v1024 < dword_1ED8202B8)
                                      v1023 *= v1024;
                                    else
                                      v1023 = dword_1ED8202B8;
                                    v1027 = v1024 >= dword_1ED8202B8
                                         || v1025 >= dword_1ED8202B8
                                         || v1021 == 0;
                                    v1021 -= 1904;
                                    v1022 += 476;
                                  }
                                  while (!v1027);
                                }
                                else
                                {
                                  v1023 = 1;
                                }
                                ++v1003;
                              }
                              while (v1023 >= dword_1ED8202B8 && v1003 != v995);
                            }
                          }
                        }
LABEL_1620:
                        if (byte_1ED820138)
                        {
                          v1082 = (llvm::SmallPtrSetImplBase *)*(unsigned int *)(a1 + 368);
                          if ((_DWORD)v1082)
                          {
                            v1084 = 1904 * v1082 - 1904;
                            v1085 = (unsigned int *)(*(_QWORD *)(a1 + 360) + 680);
                            v1083 = 1;
                            do
                            {
                              v1086 = *v1085;
                              v1087 = v1083 * v1086;
                              if (v1086 < dword_1ED8202B8)
                                v1083 *= v1086;
                              else
                                v1083 = dword_1ED8202B8;
                              v1089 = v1086 >= dword_1ED8202B8
                                   || v1087 >= dword_1ED8202B8
                                   || v1084 == 0;
                              v1084 -= 1904;
                              v1085 += 476;
                            }
                            while (!v1089);
                          }
                          else
                          {
                            v1083 = 1;
                          }
                          if (v1083 >= dword_1ED8202B8)
                          {
                            v1606[0] = &v1607[16];
                            v1606[1] = &v1607[16];
                            *(_QWORD *)v1607 = 4;
                            *(_DWORD *)&v1607[8] = 0;
                            v1641 = 0;
                            v1640 = 0;
                            LODWORD(v1642) = 0;
                            v1090 = *(unsigned int *)(a1 + 30872);
                            if ((_DWORD)v1090)
                            {
                              v1091 = *(uint64_t **)(a1 + 30864);
                              v1092 = &v1091[v1090];
                              do
                              {
                                v1093 = *v1091;
                                v1094 = sub_1C477672C((uint64_t)v1606, *v1091);
                                if (v1606[1] == v1606[0])
                                  v1095 = &v1607[4];
                                else
                                  v1095 = v1607;
                                if (v1094 == (_QWORD *)((char *)v1606[1] + 8 * *(unsigned int *)v1095))
                                {
                                  v1096 = *(_DWORD *)(a1 + 368);
                                  v1097 = 1.0;
                                  if (v1096)
                                  {
                                    v1098 = 0;
                                    v1099 = *(_QWORD *)(a1 + 360);
                                    v1100 = 1904 * v1096;
                                    do
                                    {
                                      v1101 = v1099 + v1098;
                                      v1102 = sub_1C477672C(v1099 + v1098 + 1840, v1093);
                                      v1103 = *(_QWORD *)(v1099 + v1098 + 1848);
                                      if (v1103 == *(_QWORD *)(v1099 + v1098 + 1840))
                                        v1104 = (unsigned int *)(v1101 + 1860);
                                      else
                                        v1104 = (unsigned int *)(v1101 + 1856);
                                      if (v1102 != (_QWORD *)(v1103 + 8 * *v1104))
                                      {
                                        v1105 = sub_1C5BA0908(*(_QWORD *)(v1101 + 672), *(_DWORD *)(v1101 + 680), v1093);
                                        if (v1105 == 0.0)
                                          sub_1C4774094((llvm::SmallPtrSetImplBase *)v1606, v1093);
                                        else
                                          v1097 = v1097 * v1105;
                                      }
                                      v1098 += 1904;
                                    }
                                    while (v1100 != v1098);
                                  }
                                  *(_QWORD *)&v1602 = v1093;
                                  *((_QWORD *)&v1602 + 1) = LODWORD(v1097);
                                  sub_1C631D410((uint64_t)__b, (uint64_t)&v1640, (uint64_t *)&v1602, (_DWORD *)&v1602 + 2);
                                }
                                ++v1091;
                              }
                              while (v1091 != v1092);
                              v1082 = (llvm::SmallPtrSetImplBase *)*(unsigned int *)(a1 + 368);
                            }
                            if ((_DWORD)v1082)
                            {
                              v1106 = 0;
                              v1507 = v1082;
                              do
                              {
                                v1107 = *(_QWORD *)(a1 + 360) + 1904 * (_QWORD)v1106;
                                v1108 = (llvm::Type *)*(unsigned int *)(v1107 + 680);
                                if (v1108 >= 2)
                                {
                                  v1540 = v1106;
                                  v1556 = 0;
                                  v1109 = 0;
                                  v1110 = v1107 + 672;
                                  v1111 = *(_QWORD *)(v1107 + 672);
                                  v1112 = *(_QWORD *)(v1111 + 80);
                                  v1113 = *(unsigned int *)(v1111 + 40);
                                  if (v1112)
                                    ++v1113;
                                  v1114 = (float)v1113;
                                  v1115 = (float)v1113;
                                  do
                                  {
                                    v1116 = *(_OWORD **)v1110;
                                    v1117 = *(_QWORD *)v1110 + 96 * (_QWORD)v1109;
                                    v1118 = *(unsigned int *)(v1117 + 40);
                                    if ((_DWORD)v1118)
                                    {
                                      v1119 = *(uint64_t **)(v1117 + 32);
                                      v1120 = 8 * v1118;
                                      v1121 = 0.0;
                                      v1122 = 0.0;
                                      do
                                      {
                                        v1123 = *v1119;
                                        *(_QWORD *)__b = v1123;
                                        v1124 = sub_1C477672C((uint64_t)v1606, v1123);
                                        if (v1606[1] == v1606[0])
                                          v1125 = &v1607[4];
                                        else
                                          v1125 = v1607;
                                        if (v1124 == (_QWORD *)((char *)v1606[1] + 8 * *(unsigned int *)v1125))
                                        {
                                          v1126 = *((float *)sub_1C631D60C((uint64_t)&v1640, (uint64_t *)__b) + 2);
                                          v1122 = v1122
                                                + (float)(v1126
                                                        / sub_1C5BA0908(*(_QWORD *)(v1107 + 672), *(_DWORD *)(v1107 + 680), v1123));
                                          if (*(_WORD *)(v1123 + 24) == 7)
                                          {
                                            v1127 = *((float *)sub_1C631D60C((uint64_t)&v1640, (uint64_t *)__b) + 2);
                                            v1121 = v1121
                                                  + (float)(v1127
                                                          / sub_1C5BA0908(*(_QWORD *)(v1107 + 672), *(_DWORD *)(v1107 + 680), v1123));
                                          }
                                        }
                                        ++v1119;
                                        v1120 -= 8;
                                      }
                                      while (v1120);
                                    }
                                    else
                                    {
                                      v1122 = 0.0;
                                      v1121 = 0.0;
                                    }
                                    v1128 = *(_QWORD *)&v1116[6 * (_QWORD)v1109 + 5];
                                    *(_QWORD *)__b = v1128;
                                    if (v1128)
                                    {
                                      v1129 = sub_1C477672C((uint64_t)v1606, v1128);
                                      v1130 = (unsigned int *)(v1606[1] == v1606[0] ? &v1607[4] : v1607);
                                      if (v1129 == (_QWORD *)((char *)v1606[1] + 8 * *v1130))
                                      {
                                        v1132 = *((float *)sub_1C631D60C((uint64_t)&v1640, (uint64_t *)__b) + 2);
                                        v1122 = v1122
                                              + (float)(v1132
                                                      / sub_1C5BA0908(*(_QWORD *)(v1107 + 672), *(_DWORD *)(v1107 + 680), v1128));
                                        if (*(_WORD *)(v1128 + 24) == 7)
                                        {
                                          v1133 = *((float *)sub_1C631D60C((uint64_t)&v1640, (uint64_t *)__b) + 2);
                                          v1121 = v1121
                                                + (float)(v1133
                                                        / sub_1C5BA0908(*(_QWORD *)(v1107 + 672), *(_DWORD *)(v1107 + 680), v1128));
                                        }
                                      }
                                    }
                                    if (v1115 > v1122
                                      || (v1115 == v1122 ? (v1131 = v1114 <= v1121) : (v1131 = 1), !v1131))
                                    {
                                      v1115 = v1122;
                                      v1114 = v1121;
                                      v1556 = v1109;
                                    }
                                    v1109 = (llvm::Type *)((char *)v1109 + 1);
                                  }
                                  while (v1109 != v1108);
                                  if (v1556)
                                  {
                                    v1134 = *(_OWORD **)v1110;
                                    v1135 = *(_QWORD *)v1110 + 96 * (_QWORD)v1556;
                                    v1136 = *(_OWORD *)v1135;
                                    *(_OWORD *)&__b[16] = *(_OWORD *)(v1135 + 16);
                                    *(_OWORD *)__b = v1136;
                                    *(_QWORD *)&__b[32] = &v1619;
                                    v1618 = (void *)0x400000000;
                                    if (*(_DWORD *)(v1135 + 40))
                                      sub_1C4F54880((uint64_t)&__b[32], (uint64_t)&v1134[6 * (_QWORD)v1556 + 2]);
                                    v1137 = &v1134[6 * (_QWORD)v1556];
                                    *(_OWORD *)v1622 = v1137[5];
                                    v1138 = v1134[1];
                                    *(_OWORD *)v1135 = *v1134;
                                    *(_OWORD *)(v1135 + 16) = v1138;
                                    sub_1C4F54880((uint64_t)(v1137 + 2), (uint64_t)(v1134 + 2));
                                    v1137[5] = v1134[5];
                                    v1139 = *(_OWORD *)&__b[16];
                                    *v1134 = *(_OWORD *)__b;
                                    v1134[1] = v1139;
                                    sub_1C4F54880((uint64_t)(v1134 + 2), (uint64_t)&__b[32]);
                                    v1134[5] = *(_OWORD *)v1622;
                                    if (*(uint64_t **)&__b[32] != &v1619)
                                      free(*(void **)&__b[32]);
                                  }
                                  v1140 = *(_DWORD *)(v1107 + 680);
                                  v1106 = v1540;
                                  while (v1140 != 1)
                                  {
                                    *(_DWORD *)(v1107 + 680) = --v1140;
                                    v1141 = *(_QWORD *)v1110 + 96 * v1140;
                                    v1142 = *(void **)(v1141 + 32);
                                    if (v1142 != (void *)(v1141 + 48))
                                    {
                                      free(v1142);
                                      v1140 = *(_DWORD *)(v1107 + 680);
                                    }
                                  }
                                  sub_1C5B9F854(v1107, v1540, (uint64_t)v1462);
                                  v1143 = *(_OWORD **)v1110;
                                  v1144 = *(unsigned int *)(*(_QWORD *)v1110 + 40);
                                  if ((_DWORD)v1144)
                                  {
                                    v1145 = (uint64_t *)*((_QWORD *)v1143 + 4);
                                    v1146 = 8 * v1144;
                                    do
                                    {
                                      v1147 = *v1145++;
                                      sub_1C4774094((llvm::SmallPtrSetImplBase *)v1606, v1147);
                                      v1146 -= 8;
                                    }
                                    while (v1146);
                                  }
                                  v1148 = *((_QWORD *)v1143 + 10);
                                  v1082 = v1507;
                                  if (v1148)
                                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v1606, v1148);
                                }
                                v1106 = (llvm::SmallPtrSetImplBase *)((char *)v1106 + 1);
                              }
                              while (v1106 != v1082);
                            }
                            MEMORY[0x1CAA32FB4](v1640, 8);
                            if (v1606[1] != v1606[0])
                              free(v1606[1]);
                          }
                        }
                        else
                        {
                          *(_QWORD *)__b = &__b[32];
                          *(_QWORD *)&__b[8] = &__b[32];
                          *(_QWORD *)&__b[16] = 4;
                          *(_DWORD *)&__b[24] = 0;
                          while (1)
                          {
                            v1029 = *(_DWORD *)(a1 + 368);
                            if (v1029)
                            {
                              v1030 = 1904 * v1029 - 1904;
                              v1031 = (unsigned int *)(*(_QWORD *)(a1 + 360) + 680);
                              v1032 = 1;
                              v1033 = a1 + 30848;
                              do
                              {
                                v1034 = *v1031;
                                v1035 = v1032 * v1034;
                                if (v1034 < dword_1ED8202B8)
                                  v1032 *= v1034;
                                else
                                  v1032 = dword_1ED8202B8;
                                v1037 = v1034 >= dword_1ED8202B8
                                     || v1035 >= dword_1ED8202B8
                                     || v1030 == 0;
                                v1030 -= 1904;
                                v1031 += 476;
                              }
                              while (!v1037);
                            }
                            else
                            {
                              v1032 = 1;
                              v1033 = a1 + 30848;
                            }
                            if (v1032 < dword_1ED8202B8)
                              break;
                            v1038 = *(unsigned int *)(v1033 + 24);
                            if ((_DWORD)v1038)
                            {
                              v1039 = 0;
                              v1040 = 0;
                              v1041 = *(uint64_t **)(a1 + 30864);
                              v1042 = &v1041[v1038];
                              do
                              {
                                v1043 = *v1041;
                                v1044 = sub_1C477672C((uint64_t)__b, *v1041);
                                if (*(_QWORD *)&__b[8] == *(_QWORD *)__b)
                                  v1045 = &__b[20];
                                else
                                  v1045 = &__b[16];
                                if (v1044 == (_QWORD *)(*(_QWORD *)&__b[8] + 8 * *(unsigned int *)v1045))
                                {
                                  if (v1039)
                                  {
                                    v1606[0] = 0;
                                    if (sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v1043, v1606))
                                      v1046 = v1606[0];
                                    else
                                      v1046 = (_QWORD *)(*v1462 + 16 * *(unsigned int *)(a1 + 30856));
                                    v1048 = v1046[1];
                                    if ((v1048 & 1) != 0)
                                    {
                                      v1055 = (uint8x8_t)vcnt_s8((int8x8_t)((v1048 >> 1) & ~(-1 << (v1048 >> 58))));
                                      v1055.i16[0] = vaddlv_u8(v1055);
                                      v1050 = v1055.i32[0];
                                    }
                                    else
                                    {
                                      v1049 = *(unsigned int *)(v1048 + 8);
                                      if ((_DWORD)v1049)
                                      {
                                        v1050 = 0;
                                        v1051 = *(int8x8_t **)v1048;
                                        v1052 = 8 * v1049;
                                        do
                                        {
                                          v1053 = *v1051++;
                                          v1054 = (uint8x8_t)vcnt_s8(v1053);
                                          v1054.i16[0] = vaddlv_u8(v1054);
                                          v1050 += v1054.i32[0];
                                          v1052 -= 8;
                                        }
                                        while (v1052);
                                      }
                                      else
                                      {
                                        v1050 = 0;
                                      }
                                    }
                                    v1063 = v1040 >= v1050;
                                    if (v1040 <= v1050)
                                      v1040 = v1050;
                                    if (v1063)
                                      v1043 = v1039;
                                  }
                                  else
                                  {
                                    v1606[0] = 0;
                                    if (sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v1043, v1606))
                                      v1047 = v1606[0];
                                    else
                                      v1047 = (_QWORD *)(*v1462 + 16 * *(unsigned int *)(a1 + 30856));
                                    v1056 = v1047[1];
                                    if ((v1056 & 1) != 0)
                                    {
                                      v1062 = (uint8x8_t)vcnt_s8((int8x8_t)((v1056 >> 1) & ~(-1 << (v1056 >> 58))));
                                      v1062.i16[0] = vaddlv_u8(v1062);
                                      v1040 = v1062.i32[0];
                                    }
                                    else
                                    {
                                      v1057 = *(unsigned int *)(v1056 + 8);
                                      if ((_DWORD)v1057)
                                      {
                                        v1040 = 0;
                                        v1058 = *(int8x8_t **)v1056;
                                        v1059 = 8 * v1057;
                                        do
                                        {
                                          v1060 = *v1058++;
                                          v1061 = (uint8x8_t)vcnt_s8(v1060);
                                          v1061.i16[0] = vaddlv_u8(v1061);
                                          v1040 += v1061.i32[0];
                                          v1059 -= 8;
                                        }
                                        while (v1059);
                                      }
                                      else
                                      {
                                        v1040 = 0;
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v1043 = v1039;
                                }
                                ++v1041;
                                v1039 = v1043;
                              }
                              while (v1041 != v1042);
                            }
                            else
                            {
                              v1043 = 0;
                            }
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v1043);
                            v1064 = *(unsigned int *)(a1 + 368);
                            if ((_DWORD)v1064)
                            {
                              for (mm = 0; mm != v1064; ++mm)
                              {
                                v1066 = *(_QWORD *)(a1 + 360);
                                v1067 = v1066 + 1904 * mm;
                                v1068 = sub_1C477672C(v1067 + 1840, v1043);
                                v1069 = *(_QWORD *)(v1067 + 1848);
                                v1070 = 16;
                                if (v1069 == *(_QWORD *)(v1067 + 1840))
                                  v1070 = 20;
                                if (v1068 != (_QWORD *)(v1069 + 8 * *(unsigned int *)(v1067 + 1840 + v1070)))
                                {
                                  v1071 = v1066 + 1904 * mm;
                                  v1072 = *(unsigned int *)(v1071 + 680);
                                  if ((_DWORD)v1072)
                                  {
                                    v1073 = 0;
                                    v1074 = 0;
                                    v1075 = (uint64_t *)(v1071 + 672);
LABEL_1681:
                                    v1076 = *v1075;
                                    do
                                    {
                                      if (*(_QWORD *)(v1076 + 96 * v1073 + 80) != v1043)
                                      {
                                        v1077 = v1076 + 96 * v1073;
                                        v1078 = *(_QWORD **)(v1077 + 32);
                                        v1079 = *(unsigned int *)(v1077 + 40);
                                        if ((_DWORD)v1079)
                                        {
                                          v1080 = 8 * v1079;
                                          v1081 = v1078;
                                          while (*v1081 != v1043)
                                          {
                                            ++v1081;
                                            v1080 -= 8;
                                            if (!v1080)
                                            {
                                              v1081 = &v1078[v1079];
                                              break;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          v1081 = v1078;
                                        }
                                        if (v1079 == v1081 - v1078)
                                        {
                                          sub_1C5B9F718(v1067, (__int128 *)(v1076 + 96 * v1073));
                                          --v1072;
                                          v1074 = 1;
                                          if (v1073 != v1072)
                                            goto LABEL_1681;
                                          goto LABEL_1695;
                                        }
                                      }
                                      ++v1073;
                                    }
                                    while (v1073 != v1072);
                                    if ((v1074 & 1) == 0)
                                      continue;
LABEL_1695:
                                    sub_1C5B9F854(v1067, mm, (uint64_t)v1462);
                                  }
                                }
                              }
                            }
                          }
                          if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                            free(*(void **)&__b[8]);
                        }
                        *(_QWORD *)&v1602 = &v1603;
                        *((_QWORD *)&v1602 + 1) = 0x800000000;
                        v1606[0] = v1607;
                        v1606[1] = (void *)0x800000000;
                        v1149 = *(void **)(a1 + 8);
                        v1150 = *(_QWORD *)(a1 + 48);
                        v1151 = *(_DWORD *)(a1 + 72);
                        v1640 = *(void **)(a1 + 56);
                        v1641 = v1149;
                        v1642 = v1150;
                        v1645 = v1151;
                        *(_QWORD *)&v1152 = -1;
                        *((_QWORD *)&v1152 + 1) = -1;
                        *(_OWORD *)v1643 = v1152;
                        v1644 = v1152;
                        v1597[0] = (llvm::Instruction *)v1640;
                        v1597[1] = (llvm::Instruction *)v1149;
                        *(_QWORD *)v1598 = v1150;
                        v1600 = v1151;
                        *(_OWORD *)&v1598[8] = 0u;
                        v1599 = 0u;
                        *(_QWORD *)__b = &__b[32];
                        *(_QWORD *)&__b[8] = &__b[32];
                        *(_QWORD *)&__b[16] = 16;
                        *(_DWORD *)&__b[24] = 0;
                        v1591[1] = 0;
                        v1591[0] = 0;
                        LODWORD(v1592) = 0;
                        v1153 = *(unsigned int *)(a1 + 368);
                        if (v1153 >= 9)
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1606, (uint64_t)v1607, v1153, 8);
                        sub_1C5BA0A5C(a1, (uint64_t)&v1602, (uint64_t)&v1640, (uint64_t)v1606, (__int128 *)v1597, (unsigned int *)__b, (uint64_t)v1591);
                        MEMORY[0x1CAA32FB4](v1591[0], 8);
                        if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                          free(*(void **)&__b[8]);
                        if (v1606[0] != v1607)
                          free(v1606[0]);
                        *(_DWORD *)(a1 + 96) = 0;
                        sub_1C47655E8(a1 + 168, *(_QWORD **)(a1 + 176));
                        *(_QWORD *)(a1 + 176) = 0;
                        *(_QWORD *)(a1 + 184) = 0;
                        *(_QWORD *)(a1 + 168) = a1 + 176;
                        *(_DWORD *)(a1 + 200) = 0;
                        sub_1C628250C(v1435);
                        *(_DWORD *)(a1 + 320) = 0;
                        v1154 = a1 + 30848;
                        v1155 = *v1480;
                        if (*(_QWORD *)v1480)
                        {
                          v1156 = *(unsigned int *)(a1 + 30856);
                          v1157 = *v1462;
                          if (v1156 > 4 * v1155 && v1156 >= 0x41)
                          {
                            v1158 = 16 * v1156;
                            v1159 = (void ***)(v1157 + 8);
                            do
                            {
                              if (((unint64_t)*(v1159 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                                v1159 = sub_1C4914448(v1159);
                              v1159 += 2;
                              v1158 -= 16;
                            }
                            while (v1158);
                            if (v1155)
                            {
                              v1160 = 1 << (33 - __clz(v1155 - 1));
                              if (v1160 <= 64)
                                v1161 = 64;
                              else
                                v1161 = v1160;
                              v1162 = (_QWORD *)*v1462;
                              if (v1161 == *(_DWORD *)(a1 + 30856))
                              {
                                *(_QWORD *)v1480 = 0;
                                v1163 = 16 * v1161;
                                v1154 = a1 + 30848;
                                do
                                {
                                  *v1162 = -4096;
                                  v1162 += 2;
                                  v1163 -= 16;
                                }
                                while (v1163);
                              }
                              else
                              {
                                MEMORY[0x1CAA32FB4](v1162, 8);
                                v1403 = (4 * v1161 / 3 + 1) | ((unint64_t)(4 * v1161 / 3 + 1) >> 1);
                                v1404 = v1403 | (v1403 >> 2) | ((v1403 | (v1403 >> 2)) >> 4);
                                LODWORD(v1404) = (((v1404 | (v1404 >> 8)) >> 16) | v1404 | (v1404 >> 8)) + 1;
                                *(_DWORD *)(a1 + 30856) = v1404;
                                v1405 = operator new(16 * v1404, (std::align_val_t)8uLL);
                                *v1462 = (uint64_t)v1405;
                                *(_QWORD *)v1480 = 0;
                                v1406 = *(unsigned int *)(a1 + 30856);
                                v1154 = a1 + 30848;
                                if ((_DWORD)v1406)
                                {
                                  v1407 = 16 * v1406;
                                  do
                                  {
                                    *v1405 = -4096;
                                    v1405 += 2;
                                    v1407 -= 16;
                                  }
                                  while (v1407);
                                }
                              }
                              goto LABEL_1812;
                            }
                            if (*(_DWORD *)(a1 + 30856))
                            {
                              MEMORY[0x1CAA32FB4](*v1462, 8);
                              *v1462 = 0;
                              *(_QWORD *)(a1 + 30848) = 0;
                              *(_DWORD *)(a1 + 30856) = 0;
                              v1154 = a1 + 30848;
                              goto LABEL_1812;
                            }
LABEL_1811:
                            v1154 = a1 + 30848;
                            *(_QWORD *)v1480 = 0;
                            goto LABEL_1812;
                          }
                          if (!(_DWORD)v1156)
                            goto LABEL_1811;
                          v1164 = 16 * v1156;
                          v1165 = (void ***)(v1157 + 8);
                          while (2)
                          {
                            v1166 = (uint64_t)*(v1165 - 1);
                            if (v1166 == -8192)
                            {
LABEL_1809:
                              *(v1165 - 1) = (void **)-4096;
                            }
                            else if (v1166 != -4096)
                            {
                              v1165 = sub_1C4914448(v1165);
                              goto LABEL_1809;
                            }
                            v1165 += 2;
                            v1164 -= 16;
                            if (!v1164)
                              goto LABEL_1811;
                            continue;
                          }
                        }
LABEL_1812:
                        *(_DWORD *)(v1154 + 24) = 0;
                        if (!DWORD2(v1602))
                          goto LABEL_2194;
                        v1606[0] = v1607;
                        v1606[1] = (void *)0x1000000000;
                        v1167 = v1154;
                        sub_1C50D02DC((uint64_t)__b, *(uint64_t ****)(a1 + 8), *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 32) + 56) + 40) + 272, (uint64_t)"lsr", 0);
                        v1630[12] = 256;
                        v1168 = *(_QWORD *)(a1 + 80);
                        v1628 = *(_QWORD *)(a1 + 56);
                        v1629 = v1168;
                        v1169 = *(_DWORD *)(v1167 + 168);
                        if (v1169)
                        {
                          v1170 = *(_QWORD *)(a1 + 31008);
                          v1171 = v1170 + 48 * v1169;
                          do
                          {
                            v1172 = *(_QWORD *)(*(_QWORD *)v1170 + 24 * *(unsigned int *)(v1170 + 8) - 24);
                            if (v1172 && *(_BYTE *)(v1172 + 16) == 83)
                            {
                              v1597[0] = *(llvm::Instruction **)(*(_QWORD *)v1170
                                                               + 24 * *(unsigned int *)(v1170 + 8)
                                                               - 24);
                              sub_1C631D678((uint64_t)&v1640, (uint64_t)v1630, v1597);
                            }
                            v1170 += 48;
                          }
                          while (v1170 != v1171);
                        }
                        v1508 = (llvm::SmallPtrSetImplBase *)*(unsigned int *)(a1 + 368);
                        if ((_DWORD)v1508)
                        {
                          v1173 = 0;
                          while (1)
                          {
                            v1174 = *(_QWORD *)(a1 + 360) + 1904 * (_QWORD)v1173;
                            v1175 = *(_DWORD *)(v1174 + 56);
                            if (v1175)
                              break;
LABEL_1982:
                            v1173 = (llvm::Type *)((char *)v1173 + 1);
                            if (v1173 == v1508)
                              goto LABEL_1983;
                          }
                          v1176 = *(_QWORD *)(v1174 + 48);
                          v1518 = v1173;
                          v1541 = v1176 + 72 * v1175;
                          while (2)
                          {
                            v1177 = *(_QWORD *)(a1 + 360);
                            v1557 = (llvm::Type *)(v1177 + 1904 * (_QWORD)v1173);
                            v1178 = *(_QWORD *)(v1602 + 8 * (_QWORD)v1173);
                            v1179 = *(_QWORD *)v1176;
                            if (*(_QWORD *)v1176 && *(_BYTE *)(v1179 + 16) == 83)
                            {
                              v1591[1] = 0;
                              v1591[0] = 0;
                              LODWORD(v1592) = 0;
                              LODWORD(v1180) = *(_DWORD *)(v1179 + 20) & 0x7FFFFFF;
                              if ((_DWORD)v1180)
                              {
                                LODWORD(v1181) = 0;
                                while (1)
                                {
                                  v1182 = *(_DWORD *)(v1179 + 20);
                                  if ((v1182 & 0x40000000) != 0)
                                  {
                                    if (*(_QWORD *)(*(_QWORD *)(v1179 - 8) + 32 * v1181) == *(_QWORD *)(v1176 + 8))
                                    {
                                      v1184 = v1181;
                                      *(_QWORD *)&v1586 = 0;
                                      v1183 = *(_QWORD *)(v1179 - 8);
LABEL_1834:
                                      v1185 = *(_QWORD **)(v1183 + 32 * *(unsigned int *)(v1179 + 60) + 8 * v1184);
                                      *(_QWORD *)&v1586 = v1185;
                                      if ((_DWORD)v1180 == 1)
                                      {
                                        v1186 = 0;
                                        LODWORD(v1180) = 1;
                                        goto LABEL_1874;
                                      }
                                      v1187 = (_QWORD *)v1185[5];
                                      if (v1187 == v1185 + 5)
                                      {
                                        v1188 = 0;
                                      }
                                      else
                                      {
                                        v1188 = v1187 - 3;
                                        if (!v1187)
                                          v1188 = 0;
                                        if (*((unsigned __int8 *)v1188 + 16) - 29 >= 0xB)
                                          v1188 = 0;
                                      }
                                      v1189 = *((unsigned __int8 *)v1188 + 16);
                                      if (v1189 != 30)
                                        __asm { BR              X11 }
                                      if ((*((_DWORD *)v1188 + 5) & 0x7FFFFFF) != 3)
                                        goto LABEL_1873;
                                      v1186 = 0;
                                      if (v1187)
                                        v1190 = (unsigned __int8 *)(v1187 - 3);
                                      else
                                        v1190 = 0;
                                      if (v1190[16] - 29 >= 0xB)
                                        v1191 = 0;
                                      else
                                        v1191 = v1190;
                                      v1192 = v1191[16];
                                      if (v1192 != 32 && v1192 != 38)
                                      {
                                        v1193 = *(uint64_t ***)(v1179 + 40);
                                        v1194 = *(_QWORD *)(a1 + 24);
                                        v1195 = *(_DWORD *)(v1194 + 16);
                                        if (!v1195)
                                          goto LABEL_1859;
                                        v1196 = *(_QWORD *)v1194;
                                        v1197 = v1195 - 1;
                                        v1198 = ((v1193 >> 4) ^ (v1193 >> 9)) & (v1195 - 1);
                                        v1199 = *(uint64_t ***)(*(_QWORD *)v1194 + 16 * v1198);
                                        if (v1193 == v1199)
                                        {
LABEL_1857:
                                          v1202 = *(_QWORD *)(v1196 + 16 * v1198 + 8);
                                          if (!v1202 || v1193 != **(uint64_t ****)(v1202 + 32))
                                            goto LABEL_1859;
                                          goto LABEL_1873;
                                        }
                                        v1200 = 1;
                                        while (v1199 != (uint64_t **)-4096)
                                        {
                                          v1201 = v1198 + v1200++;
                                          v1198 = v1201 & v1197;
                                          v1199 = *(uint64_t ***)(v1196 + 16 * v1198);
                                          if (v1193 == v1199)
                                            goto LABEL_1857;
                                        }
LABEL_1859:
                                        v1203 = (uint64_t *)(v1193 + 6);
                                        do
                                        {
                                          v1204 = *v1203;
                                          v1205 = v1204 - 24;
                                          if (!v1204)
                                            v1205 = 0;
                                          v1206 = *(unsigned __int8 *)(v1205 + 16);
                                          v1203 = (uint64_t *)(v1204 + 8);
                                        }
                                        while (v1206 == 83);
                                        if (v1206 == 94)
                                        {
                                          v1640 = &v1642;
                                          v1641 = (void *)0x200000000;
                                          sub_1C5EBEB94(v1193, (uint64_t *)&v1586, 1, "", "", (uint64_t)&v1640, 0, *(_QWORD *)(a1 + 16), v1194, 0, 0);
                                          v1207 = *(_QWORD *)v1640;
                                          if (v1640 != &v1642)
                                            free(v1640);
                                        }
                                        else
                                        {
                                          v1208 = 0;
                                          v1209 = *(_QWORD *)(a1 + 64);
                                          v1597[0] = *(llvm::Instruction **)(a1 + 16);
                                          v1597[1] = 0;
                                          *(_QWORD *)v1598 = v1194;
                                          *(_QWORD *)&v1598[8] = v1209;
                                          *(_DWORD *)&v1598[16] = 257;
                                          v1210 = 1;
                                          v1598[20] = 1;
                                          do
                                          {
                                            if (v1192 != 30)
                                              __asm { BR              X16 }
                                            v1211 = *(uint64_t ***)&v1191[-32 * v1208++ - 32];
                                            v1210 += 2;
                                          }
                                          while (v1211 != v1193);
                                          LOWORD(v1643[1]) = 257;
                                          v1207 = llvm::SplitCriticalEdge((llvm::Instruction *)v1191, v1208 - 1, (uint64_t)v1597, (llvm::Twine *)&v1640);
                                        }
                                        v1185 = (_QWORD *)v1586;
                                        if (v1207)
                                        {
                                          v1250 = *(_QWORD *)(a1 + 56);
                                          v1251 = sub_1C477672C(v1250 + 56, v1586);
                                          v1252 = *(_QWORD *)(v1250 + 64);
                                          v1253 = 76;
                                          if (v1252 != *(_QWORD *)(v1250 + 56))
                                            v1253 = 72;
                                          if (v1251 != (_QWORD *)(v1252 + 8 * *(unsigned int *)(v1250 + v1253)))
                                          {
                                            v1254 = *(_QWORD *)(a1 + 56);
                                            v1255 = sub_1C477672C(v1254 + 56, *(_QWORD *)(v1179 + 40));
                                            v1256 = *(_QWORD *)(v1254 + 64);
                                            v1257 = 76;
                                            if (v1256 != *(_QWORD *)(v1254 + 56))
                                              v1257 = 72;
                                            if (v1255 == (_QWORD *)(v1256 + 8 * *(unsigned int *)(v1254 + v1257)))
                                              sub_1C4FCEAA0(*(_QWORD *)(*(_QWORD *)(v1179 + 40) + 56) + 72, (uint64_t *)(*(_QWORD *)(v1179 + 40) + 24), *(_QWORD *)(v1207 + 56) + 72, (uint64_t *)(v1207 + 24));
                                          }
                                          v1258 = *(_DWORD *)(v1179 + 20);
                                          *(_QWORD *)&v1586 = v1207;
                                          v1180 = v1258 & 0x7FFFFFF;
                                          if ((v1258 & 0x7FFFFFF) != 0)
                                          {
                                            v1181 = 0;
                                            while (1)
                                            {
                                              v1259 = v1179 - 32 * v1180;
                                              if ((v1258 & 0x40000000) != 0)
                                                v1259 = *(_QWORD *)(v1179 - 8);
                                              if (*(_QWORD *)(v1259 + 32 * *(unsigned int *)(v1179 + 60) + 8 * v1181) == v1207)
                                                break;
                                              if (v1180 == ++v1181)
                                                goto LABEL_1948;
                                            }
                                            v1186 = 1;
                                            v1185 = (_QWORD *)v1207;
                                          }
                                          else
                                          {
LABEL_1948:
                                            LODWORD(v1181) = -1;
                                            v1186 = 1;
                                            v1185 = (_QWORD *)v1207;
                                          }
                                        }
                                        else
                                        {
LABEL_1873:
                                          v1186 = 0;
                                        }
                                      }
LABEL_1874:
                                      v1640 = v1185;
                                      v1641 = 0;
                                      if ((_DWORD)v1592)
                                      {
                                        v1212 = ((_DWORD)v1592 - 1) & ((v1185 >> 4) ^ (v1185 >> 9));
                                        v1213 = (_QWORD *)((char *)v1591[0] + 16 * v1212);
                                        v1214 = (_QWORD *)*v1213;
                                        if (v1185 == (_QWORD *)*v1213)
                                        {
LABEL_1884:
                                          sub_1C6125834(v1179, v1181, *((_QWORD *)v1591[0] + 2 * v1212 + 1));
                                        }
                                        else
                                        {
                                          v1215 = 0;
                                          v1216 = 1;
                                          while (v1214 != (_QWORD *)-4096)
                                          {
                                            if (v1215)
                                              v1217 = 0;
                                            else
                                              v1217 = v1214 == (_QWORD *)-8192;
                                            if (v1217)
                                              v1215 = v1213;
                                            v1218 = v1212 + v1216++;
                                            v1212 = v1218 & (v1592 - 1);
                                            v1213 = (_QWORD *)((char *)v1591[0] + 16 * v1212);
                                            v1214 = (_QWORD *)*v1213;
                                            if (v1185 == (_QWORD *)*v1213)
                                              goto LABEL_1884;
                                          }
                                          if (v1215)
                                            v1219 = v1215;
                                          else
                                            v1219 = v1213;
LABEL_1888:
                                          v1220 = sub_1C4ECCA58((uint64_t)v1591, (uint64_t)&v1640, (uint64_t *)&v1640, v1219);
                                          *v1220 = v1640;
                                          v1220[1] = v1641;
                                          v1221 = *(_QWORD *)(v1586 + 40);
                                          if (v1221 == (_QWORD)v1586 + 40)
                                          {
                                            v1222 = 0;
                                          }
                                          else
                                          {
                                            if (v1221)
                                              v1222 = v1221 - 24;
                                            else
                                              v1222 = 0;
                                            if (*(unsigned __int8 *)(v1222 + 16) - 29 >= 0xB)
                                              v1222 = 0;
                                          }
                                          v1223 = sub_1C5BA10F8(a1, (uint64_t)v1557, (_QWORD *)v1176, v1178, (char *)(v1222 + 24), (uint64_t)__b, (unsigned int *)v1606);
                                          v1224 = (uint64_t)v1223;
                                          v1225 = **(_QWORD **)(v1176 + 8);
                                          if (*(_QWORD *)v1223 != v1225)
                                          {
                                            CastOpcode = llvm::CastInst::getCastOpcode((llvm::CastInst *)v1223, 0, v1225, 0);
                                            v1640 = "tmp";
                                            LOWORD(v1643[1]) = 259;
                                            llvm::CastInst::Create(CastOpcode);
                                            v1224 = v1227;
                                          }
                                          sub_1C6125834(v1179, v1181, v1224);
                                          v1220[1] = v1224;
                                        }
                                        if (v1186)
                                        {
                                          v1228 = *(unsigned int *)(a1 + 368);
                                          if ((_DWORD)v1228)
                                          {
                                            v1229 = 0;
                                            v1230 = *(_QWORD *)(a1 + 360);
                                            while (1)
                                            {
                                              v1231 = v1230 + 1904 * v1229;
                                              v1232 = *(_DWORD *)(v1231 + 56);
                                              if (v1232)
                                                break;
LABEL_1932:
                                              if (++v1229 == v1228)
                                                goto LABEL_1831;
                                            }
                                            v1233 = *(_QWORD **)(v1231 + 48);
                                            v1234 = &v1233[9 * v1232];
                                            while (2)
                                            {
                                              if (*v1233 != v1179)
                                                goto LABEL_1931;
                                              v1235 = *(_DWORD *)(v1179 + 20);
                                              if ((v1235 & 0x40000000) != 0)
                                              {
                                                v1237 = *(_QWORD **)(v1179 - 8);
                                                v1236 = v1235 & 0x7FFFFFF;
                                                if ((*(_DWORD *)(v1179 + 20) & 0x7FFFFFF) == 0)
                                                  goto LABEL_1911;
                                              }
                                              else
                                              {
                                                v1236 = v1235 & 0x7FFFFFF;
                                                v1237 = (_QWORD *)(v1179 - 32 * v1236);
                                                if ((v1235 & 0x7FFFFFF) == 0)
                                                  goto LABEL_1911;
                                              }
                                              v1238 = 32 * v1236;
                                              do
                                              {
                                                if (*v1237 == v1233[1])
                                                  goto LABEL_1931;
                                                v1237 += 4;
                                                v1238 -= 32;
                                              }
                                              while (v1238);
LABEL_1911:
                                              if ((v1235 & 0x40000000) == 0)
                                              {
                                                v1239 = v1179 - 32 * v1236;
                                                if (v1236)
                                                  goto LABEL_1915;
LABEL_1931:
                                                v1233 += 9;
                                                if (v1233 == v1234)
                                                  goto LABEL_1932;
                                                continue;
                                              }
                                              break;
                                            }
                                            v1239 = *(_QWORD *)(v1179 - 8);
                                            if (!v1236)
                                              goto LABEL_1931;
LABEL_1915:
                                            v1240 = v1239 + 32 * *(unsigned int *)(v1179 + 60);
                                            v1241 = v1240 + 8 * v1236;
                                            while (2)
                                            {
                                              v1242 = *(_QWORD *)(*(_QWORD *)v1240 + 48);
LABEL_1917:
                                              v1243 = v1242 - 24;
                                              if (v1242)
                                                v1244 = v1242 - 24;
                                              else
                                                v1244 = 0;
                                              if (*(_BYTE *)(v1244 + 16) != 83)
                                              {
                                                v1240 += 8;
                                                if (v1240 == v1241)
                                                  goto LABEL_1931;
                                                continue;
                                              }
                                              break;
                                            }
                                            v1245 = *(_DWORD *)(v1242 - 4);
                                            if ((v1245 & 0x40000000) != 0)
                                            {
                                              v1247 = *(_QWORD **)(v1242 - 32);
                                              v1246 = v1245 & 0x7FFFFFF;
                                              if ((*(_DWORD *)(v1242 - 4) & 0x7FFFFFF) == 0)
                                              {
LABEL_1929:
                                                v1242 = *(_QWORD *)(v1242 + 8);
                                                goto LABEL_1917;
                                              }
                                            }
                                            else
                                            {
                                              v1246 = v1245 & 0x7FFFFFF;
                                              v1247 = (_QWORD *)(v1243 - 32 * v1246);
                                              if ((v1245 & 0x7FFFFFF) == 0)
                                                goto LABEL_1929;
                                            }
                                            v1248 = v1233[1];
                                            v1249 = 32 * v1246;
                                            do
                                            {
                                              if (*v1247 == v1248)
                                                *v1233 = v1243;
                                              v1247 += 4;
                                              v1249 -= 32;
                                            }
                                            while (v1249);
                                            goto LABEL_1929;
                                          }
                                        }
                                        goto LABEL_1831;
                                      }
                                      v1219 = 0;
                                      goto LABEL_1888;
                                    }
                                  }
                                  else
                                  {
                                    v1183 = v1179 - 32 * (v1182 & 0x7FFFFFF);
                                    if (*(_QWORD *)(v1183 + 32 * v1181) == *(_QWORD *)(v1176 + 8))
                                    {
                                      v1184 = v1181;
                                      *(_QWORD *)&v1586 = 0;
                                      goto LABEL_1834;
                                    }
                                  }
LABEL_1831:
                                  LODWORD(v1181) = v1181 + 1;
                                  if ((_DWORD)v1181 == (_DWORD)v1180)
                                  {
                                    v1271 = v1591[0];
                                    v1173 = v1518;
                                    goto LABEL_1965;
                                  }
                                }
                              }
                              v1271 = 0;
LABEL_1965:
                              MEMORY[0x1CAA32FB4](v1271, 8);
                            }
                            else
                            {
                              v1260 = sub_1C5BA10F8(a1, (uint64_t)v1557, (_QWORD *)v1176, *(_QWORD *)(v1602 + 8 * (_QWORD)v1173), (char *)(v1179 + 24), (uint64_t)__b, (unsigned int *)v1606);
                              v1261 = v1260;
                              if (*(_QWORD *)v1260 != **(_QWORD **)(v1176 + 8))
                              {
                                v1262 = llvm::CastInst::getCastOpcode((llvm::CastInst *)v1260, 0, **(_QWORD **)(v1176 + 8), 0);
                                v1640 = "tmp";
                                LOWORD(v1643[1]) = 259;
                                llvm::CastInst::Create(v1262);
                                v1261 = v1263;
                              }
                              v1264 = *(_DWORD **)v1176;
                              if (*(_DWORD *)(v1177 + 1904 * (_QWORD)v1173 + 24) == 3)
                              {
                                v1265 = v1264[5];
                                if ((v1265 & 0x40000000) != 0)
                                  v1266 = (_DWORD *)*((_QWORD *)v1264 - 1);
                                else
                                  v1266 = &v1264[-8 * (v1265 & 0x7FFFFFF)];
                                if (*(_QWORD *)v1266)
                                {
                                  **((_QWORD **)v1266 + 2) = *((_QWORD *)v1266 + 1);
                                  v1267 = *((_QWORD *)v1266 + 1);
                                  if (v1267)
                                    *(_QWORD *)(v1267 + 16) = *((_QWORD *)v1266 + 2);
                                }
                                *(_QWORD *)v1266 = v1261;
                                if (v1261)
                                {
                                  v1270 = *((_QWORD *)v1261 + 1);
                                  v1269 = v1261 + 8;
                                  v1268 = v1270;
                                  *((_QWORD *)v1266 + 1) = v1270;
                                  if (v1270)
                                    *(_QWORD *)(v1268 + 16) = v1266 + 2;
                                  *((_QWORD *)v1266 + 2) = v1269;
                                  *v1269 = v1266;
                                }
                              }
                              else
                              {
                                llvm::User::replaceUsesOfWith((llvm::User *)v1264, *(llvm::Value **)(v1176 + 8), (llvm::Value *)v1261);
                              }
                            }
                            if (*(unsigned __int8 *)(*(_QWORD *)(v1176 + 8) + 16) <= 0x1Bu)
                              v1272 = 0;
                            else
                              v1272 = *(void **)(v1176 + 8);
                            v1640 = v1272;
                            if (v1272)
                            {
                              v1273 = (int)v1606[1];
                              if (LODWORD(v1606[1]) >= HIDWORD(v1606[1]))
                              {
                                sub_1C578EDF4((unsigned int *)v1606, (uint64_t *)&v1640);
                              }
                              else
                              {
                                v1274 = (llvm::ValueHandleBase *)((char *)v1606[0] + 24 * LODWORD(v1606[1]));
                                *(_QWORD *)v1274 = 6;
                                *((_QWORD *)v1274 + 1) = 0;
                                *((_QWORD *)v1274 + 2) = v1272;
                                if (v1272 != (void *)-8192 && v1272 != (void *)-4096 && v1272 != 0)
                                {
                                  llvm::ValueHandleBase::AddToUseList(v1274);
                                  v1273 = (int)v1606[1];
                                }
                                LODWORD(v1606[1]) = v1273 + 1;
                              }
                            }
                            *(_BYTE *)(a1 + 76) = 1;
                            v1176 += 72;
                            if (v1176 == v1541)
                              goto LABEL_1982;
                            continue;
                          }
                        }
LABEL_1983:
                        v1276 = *(_DWORD *)(a1 + 31016);
                        if (v1276)
                        {
                          v1509 = *v1428;
                          __nj = (size_t)*v1428 + 48 * v1276;
LABEL_1985:
                          v1277 = *(unint64_t ***)v1509;
                          v1278 = **(unint64_t ***)v1509;
                          v1279 = *((_DWORD *)v1278 + 5);
                          if ((v1279 & 0x40000000) != 0)
                          {
                            v1280 = (unint64_t *)*(v1278 - 1);
                            v1278 = &v1280[4 * (v1279 & 0x7FFFFFF)];
                          }
                          else
                          {
                            v1280 = &v1278[-4 * (v1279 & 0x7FFFFFF)];
                          }
                          v1281 = sub_1C5B98EFC(v1280, v1278, *(_QWORD *)(a1 + 56), *(llvm::ScalarEvolution **)(a1 + 8));
                          if (v1281 == v1278)
                            goto LABEL_2157;
                          v1282 = v1281;
                          while (1)
                          {
                            v1283 = *v1282;
                            v1284 = (llvm::Value *)*v1282;
                            if (*v1282)
                            {
                              v1284 = (llvm::Value *)*v1282;
                              if (*(_BYTE *)(v1283 + 16) == 66)
                                v1284 = *(llvm::Value **)(v1283 - 32);
                            }
                            v1285 = *(_QWORD *)(a1 + 8);
                            v1286 = *(_QWORD *)(v1285 + 104);
                            v1287 = *(_DWORD *)(v1285 + 120);
                            if (!v1287)
                              goto LABEL_1999;
                            v1288 = (v1287 - 1) & ((v1283 >> 4) ^ (v1283 >> 9));
                            v1289 = v1286 + 48 * v1288;
                            v1290 = *(_QWORD *)(v1289 + 24);
                            if (v1290 != v1283)
                              break;
LABEL_2000:
                            if (v1289 == v1286 + 48 * v1287 || (v1293 = *(_QWORD *)(v1289 + 40)) == 0)
                              v1293 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1285, v1283);
                            v1294 = v1277[2];
                            if ((unint64_t *)v1293 == v1294)
                            {
LABEL_2017:
                              v1558 = *(llvm::Type **)v1284;
                              v1519 = *(llvm::Type **)v1284;
                              if (*(_BYTE *)(*(_QWORD *)v1284 + 8) != 13)
                              {
                                llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272), v1558);
                                v1519 = v1386;
                              }
                              v1304 = *(unint64_t ***)v1509;
                              v1305 = *((_DWORD *)v1509 + 2);
                              if (v1305 == 1)
                              {
                                v1306 = 1;
                                goto LABEL_2082;
                              }
                              v1307 = 0;
                              v1308 = (uint64_t *)(v1304 + 3);
                              v1309 = 24 * v1305 - 24;
                              while (2)
                              {
                                v1310 = (llvm::Instruction *)*v1308;
                                if (*(_BYTE *)(*v1308 + 16) == 83)
                                {
                                  v1311 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
                                  v1312 = *(_QWORD *)(v1311 + 40);
                                  if (v1312 == v1311 + 40)
                                  {
                                    v1310 = 0;
                                  }
                                  else
                                  {
                                    if (v1312)
                                      v1313 = (unsigned __int8 *)(v1312 - 24);
                                    else
                                      v1313 = 0;
                                    if (v1313[16] - 29 >= 0xB)
                                      v1310 = 0;
                                    else
                                      v1310 = (llvm::Instruction *)v1313;
                                  }
                                }
                                v1314 = (llvm::SCEV *)v1308[2];
                                if (!llvm::SCEV::isZero(v1314))
                                {
                                  llvm::ScalarEvolution::getNoopOrSignExtend(*(_QWORD *)(a1 + 8), (uint64_t)v1314);
                                  if (v1307)
                                  {
                                    v1316 = *(_QWORD *)(a1 + 8);
                                    v1640 = &v1642;
                                    v1642 = v1307;
                                    v1643[0] = v1315;
                                    v1641 = (void *)0x200000002;
                                    v1307 = llvm::ScalarEvolution::getAddExpr(v1316, (uint64_t)&v1640, 0, 0);
                                    if (v1640 != &v1642)
                                      free(v1640);
                                  }
                                  else
                                  {
                                    v1307 = v1315;
                                  }
                                }
                                if (!v1307 || llvm::SCEV::isZero((llvm::SCEV *)v1307))
                                {
                                  v1317 = (unsigned __int8 *)v1284;
                                  goto LABEL_2049;
                                }
                                if (v1625 == v1624)
                                {
LABEL_2040:
                                  v1627 = 0;
                                }
                                else
                                {
                                  if (v1626 < 0x21 || 4 * ((int)v1627 - HIDWORD(v1627)) >= v1626)
                                  {
                                    memset(v1625, 255, 8 * v1626);
                                    goto LABEL_2040;
                                  }
                                  free(v1625);
                                  v1338 = 1 << (33 - __clz(v1627 - HIDWORD(v1627) - 1));
                                  if ((v1627 - HIDWORD(v1627)) <= 0x10)
                                    v1339 = 32;
                                  else
                                    v1339 = v1338;
                                  v1626 = v1339;
                                  v1627 = 0;
                                  v1340 = malloc_type_malloc(8 * v1339, 0x4065EBACuLL);
                                  if (!v1340)
                                    goto LABEL_1126;
                                  v1625 = v1340;
                                  memset(v1340, 255, 8 * v1626);
                                }
                                sub_1C4DFC0E4(v1622);
                                v1318 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)__b, (llvm::Instruction **)v1307, v1519, v1310);
                                v1319 = *(llvm::ScalarEvolution **)(a1 + 8);
                                Unknown = llvm::ScalarEvolution::getUnknown(v1319, v1284);
                                v1321 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v1318);
                                v1640 = &v1642;
                                v1642 = Unknown;
                                v1643[0] = v1321;
                                v1641 = (void *)0x200000002;
                                v1322 = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr((uint64_t)v1319, (uint64_t)&v1640, 0, 0);
                                if (v1640 != &v1642)
                                  free(v1640);
                                v1317 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)__b, v1322, v1558, v1310);
                                if (*(_WORD *)(v1307 + 24))
                                {
LABEL_2044:
                                  v1307 = 0;
                                  v1284 = (llvm::Value *)v1317;
                                }
                                else
                                {
                                  v1323 = *v1308;
                                  v1324 = (_DWORD **)v1308[1];
                                  v1481 = *(uint64_t **)(a1 + 48);
                                  if (sub_1C5B989C4(*v1481, *v1308, (uint64_t)v1324))
                                  {
                                    v1325 = *(_QWORD *)(v1307 + 32);
                                    v1326 = *(_DWORD *)(v1325 + 32);
                                    if (v1326 - sub_1C4959174((llvm::APInt *)(v1325 + 24)) - 64 >= 0xFFFFFFBF)
                                    {
                                      v1334 = sub_1C5B98B48(*v1481, v1323, v1324);
                                      v1335 = *(_QWORD *)(v1307 + 32);
                                      v1336 = *(_DWORD *)(v1335 + 32);
                                      if (v1336 > 0x40)
                                        v1337 = **(_QWORD **)(v1335 + 24);
                                      else
                                        v1337 = (uint64_t)(*(_QWORD *)(v1335 + 24) << -(char)v1336) >> -(char)v1336;
                                      if (v1337
                                        && !(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v1481 + 264))(*v1481, v1334, 0, v1337, 1, 0, v1333, 0))
                                      {
                                        goto LABEL_2044;
                                      }
                                    }
                                    else
                                    {
                                      v1307 = 0;
                                      v1284 = (llvm::Value *)v1317;
                                    }
                                  }
                                  else
                                  {
                                    v1307 = 0;
                                    v1284 = (llvm::Value *)v1317;
                                  }
                                }
LABEL_2049:
                                v1327 = (llvm::Value *)v1308[1];
                                v1328 = *(_QWORD *)v1327;
                                if (v1558 != *(llvm::Type **)v1327)
                                {
                                  sub_1C4773D54((uint64_t)&v1640, (uint64_t)v1310, 0, 0, 0);
                                  v1597[0] = (llvm::Instruction *)"lsr.chain";
                                  *(_WORD *)&v1598[16] = 259;
                                  v1317 = sub_1C5390E08((uint64_t *)&v1640, v1317, v1328, (uint64_t)v1597);
                                  if (v1640 != &v1642)
                                    free(v1640);
                                  v1327 = (llvm::Value *)v1308[1];
                                }
                                llvm::User::replaceUsesOfWith((llvm::User *)*v1308, v1327, (llvm::Value *)v1317);
                                if (*(unsigned __int8 *)(v1308[1] + 16) <= 0x1Bu)
                                  v1329 = 0;
                                else
                                  v1329 = (void *)v1308[1];
                                v1640 = v1329;
                                if (v1329)
                                {
                                  v1330 = (int)v1606[1];
                                  if (LODWORD(v1606[1]) >= HIDWORD(v1606[1]))
                                  {
                                    sub_1C578EDF4((unsigned int *)v1606, (uint64_t *)&v1640);
                                  }
                                  else
                                  {
                                    v1331 = (llvm::ValueHandleBase *)((char *)v1606[0] + 24 * LODWORD(v1606[1]));
                                    *(_QWORD *)v1331 = 6;
                                    *((_QWORD *)v1331 + 1) = 0;
                                    *((_QWORD *)v1331 + 2) = v1329;
                                    if (v1329 != (void *)-8192 && v1329 != (void *)-4096 && v1329 != 0)
                                    {
                                      llvm::ValueHandleBase::AddToUseList(v1331);
                                      v1330 = (int)v1606[1];
                                    }
                                    LODWORD(v1606[1]) = v1330 + 1;
                                  }
                                }
                                v1308 += 3;
                                v1309 -= 24;
                                if (v1309)
                                  continue;
                                break;
                              }
                              v1304 = *(unint64_t ***)v1509;
                              v1306 = *((_DWORD *)v1509 + 2);
LABEL_2082:
                              if (*((_BYTE *)v1304[3 * v1306 - 3] + 16) == 83)
                              {
                                v1341 = **(_QWORD **)(*(_QWORD *)(a1 + 56) + 32);
                                if (*(_QWORD *)(v1341 + 40) != v1341 + 40)
                                {
                                  v1342 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 32) + 48);
                                  v1343 = v1342 - 24;
                                  v1344 = v1342 ? v1342 - 24 : 0;
                                  if (v1342 && *(_BYTE *)(v1344 + 16) == 83)
                                  {
                                    v1345 = (v1284 >> 4) ^ (v1284 >> 9);
                                    while (2)
                                    {
                                      if (!sub_1C5B99B7C(*(_QWORD *)v1343, *(_QWORD *)v1284))
                                        goto LABEL_2149;
                                      v1591[0] = 0;
                                      v1346 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
                                      v1347 = *(_DWORD *)(v1343 + 20);
                                      v1348 = v1347 & 0x7FFFFFF;
                                      if ((v1347 & 0x7FFFFFF) != 0)
                                      {
                                        v1349 = 0;
                                        while (1)
                                        {
                                          v1350 = v1343 - 32 * v1348;
                                          if ((v1347 & 0x40000000) != 0)
                                            v1350 = *(_QWORD *)(v1343 - 8);
                                          if (*(_QWORD *)(v1350 + 32 * *(unsigned int *)(v1343 + 60) + 8 * v1349) == v1346)
                                            break;
                                          if (v1348 == ++v1349)
                                            goto LABEL_2097;
                                        }
                                      }
                                      else
                                      {
LABEL_2097:
                                        LODWORD(v1349) = -1;
                                      }
                                      v1351 = (v1347 & 0x40000000) != 0
                                            ? *(_QWORD *)(v1343 - 8)
                                            : v1343 - 32 * v1348;
                                      v1352 = *(_QWORD *)(v1351 + 32 * v1349);
                                      v1353 = *(unsigned __int8 *)(v1352 + 16) <= 0x1Bu ? 0 : (llvm::SCEV *)v1352;
                                      v1591[0] = v1353;
                                      if (!v1353)
                                        goto LABEL_2149;
                                      v1354 = *(_QWORD *)(a1 + 8);
                                      v1355 = *(_QWORD *)(v1354 + 104);
                                      v1356 = *(_DWORD *)(v1354 + 120);
                                      if (v1356)
                                      {
                                        v1357 = v1356 - 1;
                                        v1358 = (v1356 - 1) & ((v1353 >> 4) ^ (v1353 >> 9));
                                        v1359 = v1355 + 48 * v1358;
                                        v1360 = *(llvm::SCEV **)(v1359 + 24);
                                        if (v1360 != v1353)
                                        {
                                          v1361 = 1;
                                          while (v1360 != (llvm::SCEV *)-4096)
                                          {
                                            v1362 = v1358 + v1361++;
                                            v1358 = v1362 & v1357;
                                            v1359 = v1355 + 48 * (v1362 & v1357);
                                            v1360 = *(llvm::SCEV **)(v1359 + 24);
                                            if (v1360 == v1353)
                                              goto LABEL_2111;
                                          }
                                          goto LABEL_2110;
                                        }
                                      }
                                      else
                                      {
LABEL_2110:
                                        v1359 = v1355 + 48 * v1356;
                                      }
LABEL_2111:
                                      if (v1359 == v1355 + 48 * v1356 || (v1363 = *(_QWORD *)(v1359 + 40)) == 0)
                                      {
                                        v1363 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1354, (unint64_t)v1353);
                                        v1354 = *(_QWORD *)(a1 + 8);
                                        v1355 = *(_QWORD *)(v1354 + 104);
                                        v1356 = *(_DWORD *)(v1354 + 120);
                                      }
                                      v1364 = v1355 + 48 * v1356;
                                      if (v1356)
                                      {
                                        v1365 = v1356 - 1;
                                        v1366 = v1365 & v1345;
                                        v1367 = v1355 + 48 * (v1365 & v1345);
                                        v1368 = *(llvm::Value **)(v1367 + 24);
                                        if (v1368 != v1284)
                                        {
                                          v1369 = 1;
                                          while (v1368 != (llvm::Value *)-4096)
                                          {
                                            v1370 = v1366 + v1369++;
                                            v1366 = v1370 & v1365;
                                            v1367 = v1355 + 48 * v1366;
                                            v1368 = *(llvm::Value **)(v1367 + 24);
                                            if (v1368 == v1284)
                                              goto LABEL_2121;
                                          }
                                          goto LABEL_2120;
                                        }
                                      }
                                      else
                                      {
LABEL_2120:
                                        v1367 = v1364;
                                      }
LABEL_2121:
                                      if (v1367 == v1364 || (v1371 = *(_QWORD *)(v1367 + 40)) == 0)
                                        v1371 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1354, (unint64_t)v1284);
                                      if (v1363 == v1371)
                                      {
                                        v1372 = v1591[0];
                                        v1373 = *(_QWORD *)v1591[0];
                                        if (v1558 == *(llvm::Type **)v1591[0])
                                        {
                                          v1378 = (unsigned __int8 *)v1284;
                                        }
                                        else
                                        {
                                          v1374 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
                                          v1375 = *(_QWORD *)(v1374 + 40);
                                          if (v1375 == v1374 + 40)
                                          {
                                            v1377 = 0;
                                          }
                                          else
                                          {
                                            if (v1375)
                                              v1376 = v1375 - 24;
                                            else
                                              v1376 = 0;
                                            if (*(unsigned __int8 *)(v1376 + 16) - 29 >= 0xB)
                                              v1377 = 0;
                                            else
                                              v1377 = v1376;
                                          }
                                          sub_1C4773D54((uint64_t)&v1640, v1377, 0, 0, 0);
                                          v1379 = (unsigned __int8 *)*((_QWORD *)v1591[0] + 6);
                                          *(_QWORD *)&v1586 = v1379;
                                          if (v1379)
                                          {
                                            llvm::MetadataTracking::track((uint64_t)&v1586, v1379, 2);
                                            v1380 = v1586;
                                          }
                                          else
                                          {
                                            v1380 = 0;
                                          }
                                          sub_1C4774EF4((uint64_t)&v1640, 0, v1380);
                                          if ((_QWORD)v1586)
                                            llvm::MetadataTracking::untrack((uint64_t)&v1586, (unsigned __int8 *)v1586);
                                          v1597[0] = (llvm::Instruction *)"lsr.chain";
                                          *(_WORD *)&v1598[16] = 259;
                                          v1378 = sub_1C5098D9C((uint64_t *)&v1640, (unsigned __int8 *)v1284, v1373, (uint64_t)v1597);
                                          if (v1640 != &v1642)
                                            free(v1640);
                                          v1372 = v1591[0];
                                        }
                                        llvm::User::replaceUsesOfWith((llvm::User *)v1343, v1372, (llvm::Value *)v1378);
                                        v1381 = (int)v1606[1];
                                        if (LODWORD(v1606[1]) >= HIDWORD(v1606[1]))
                                        {
                                          sub_1C578EDF4((unsigned int *)v1606, (uint64_t *)v1591);
                                        }
                                        else
                                        {
                                          v1382 = v1591[0];
                                          v1383 = (llvm::ValueHandleBase *)((char *)v1606[0] + 24 * LODWORD(v1606[1]));
                                          *(_QWORD *)v1383 = 6;
                                          *((_QWORD *)v1383 + 1) = 0;
                                          *((_QWORD *)v1383 + 2) = v1382;
                                          if (v1382 != (llvm::SCEV *)-8192 && v1382 != (llvm::SCEV *)-4096 && v1382)
                                          {
                                            llvm::ValueHandleBase::AddToUseList(v1383);
                                            v1381 = (int)v1606[1];
                                          }
                                          LODWORD(v1606[1]) = v1381 + 1;
                                        }
                                      }
LABEL_2149:
                                      v1384 = *(_QWORD *)(v1343 + 32);
                                      v1343 = v1384 - 24;
                                      if (v1384)
                                        v1385 = v1384 - 24;
                                      else
                                        v1385 = 0;
                                      if (!v1384 || *(_BYTE *)(v1385 + 16) != 83)
                                        break;
                                      continue;
                                    }
                                  }
                                }
                              }
LABEL_2157:
                              *(_BYTE *)(a1 + 76) = 1;
                              v1509 = (llvm::SmallPtrSetImplBase *)((char *)v1509 + 48);
                              if (v1509 == (llvm::SmallPtrSetImplBase *)__nj)
                                goto LABEL_2158;
                              goto LABEL_1985;
                            }
                            v1295 = *(_QWORD *)(a1 + 8);
                            v1296 = *(_QWORD *)(v1295 + 104);
                            v1297 = *(_DWORD *)(v1295 + 120);
                            if (!v1297)
                              goto LABEL_2010;
                            v1298 = (v1297 - 1) & ((v1284 >> 4) ^ (v1284 >> 9));
                            v1299 = v1296 + 48 * v1298;
                            v1300 = *(llvm::Value **)(v1299 + 24);
                            if (v1300 != v1284)
                            {
                              v1301 = 1;
                              while (v1300 != (llvm::Value *)-4096)
                              {
                                v1302 = v1298 + v1301++;
                                v1298 = v1302 & (v1297 - 1);
                                v1299 = v1296 + 48 * v1298;
                                v1300 = *(llvm::Value **)(v1299 + 24);
                                if (v1300 == v1284)
                                  goto LABEL_2011;
                              }
LABEL_2010:
                              v1299 = v1296 + 48 * v1297;
                            }
LABEL_2011:
                            if (v1299 == v1296 + 48 * v1297 || (v1303 = *(_QWORD *)(v1299 + 40)) == 0)
                            {
                              v1303 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v1295, (unint64_t)v1284);
                              v1294 = v1277[2];
                            }
                            if ((unint64_t *)v1303 == v1294)
                              goto LABEL_2017;
                            v1282 = sub_1C5B98EFC(v1282 + 4, v1278, *(_QWORD *)(a1 + 56), *(llvm::ScalarEvolution **)(a1 + 8));
                            if (v1282 == v1278)
                              goto LABEL_2157;
                          }
                          v1291 = 1;
                          while (v1290 != -4096)
                          {
                            v1292 = v1288 + v1291++;
                            v1288 = v1292 & (v1287 - 1);
                            v1289 = v1286 + 48 * v1288;
                            v1290 = *(_QWORD *)(v1289 + 24);
                            if (v1290 == v1283)
                              goto LABEL_2000;
                          }
LABEL_1999:
                          v1289 = v1286 + 48 * v1287;
                          goto LABEL_2000;
                        }
LABEL_2158:
                        if (v1623)
                        {
                          v1387 = v1622[23];
                          v1388 = 24 * v1623;
                          do
                          {
                            v1389 = *((_QWORD *)v1387 + 2);
                            if (v1389)
                            {
                              if (*(unsigned __int8 *)(v1389 + 16) <= 0x1Bu)
                                v1389 = 0;
                              if (*(_QWORD *)(v1389 + 40))
                                sub_1C4EE5050((unsigned int *)(a1 + 31504), (unint64_t)v1387);
                            }
                            v1387 = (llvm::SCEV *)((char *)v1387 + 24);
                            v1388 -= 24;
                          }
                          while (v1388);
                        }
                        sub_1C5B2BF30((uint64_t)__b);
                        v1390 = *(uint64_t **)(a1 + 40);
                        v1391 = *(int32x2_t ***)(a1 + 64);
                        v1643[0] = 0;
                        *(_BYTE *)(a1 + 76) |= llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)v1606, v1390, v1391, &v1640);
                        if ((void **)v1643[0] == &v1640)
                        {
                          v1392 = (void (**)(void))((char *)v1640 + 32);
                        }
                        else
                        {
                          if (!v1643[0])
                            goto LABEL_2171;
                          v1392 = (void (**)(void))(*(_QWORD *)v1643[0] + 40);
                        }
                        (*v1392)();
LABEL_2171:
                        v1393 = **(_QWORD **)(*(_QWORD *)(a1 + 56) + 32);
                        if (*(_QWORD *)(v1393 + 40) != v1393 + 40)
                        {
                          v1394 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 32) + 48);
                          v1395 = v1394 - 24;
                          v1396 = v1394 ? v1394 - 24 : 0;
                          if (v1394 && *(_BYTE *)(v1396 + 16) == 83)
                          {
                            do
                            {
                              v1597[0] = 0;
                              *(_QWORD *)&v1586 = 0;
                              if (llvm::matchSimpleRecurrence(v1395, v1597, v1591, &v1586))
                              {
                                v1397 = v1597[0];
                                v1398 = *((unsigned __int8 *)v1597[0] + 16);
                                if ((v1398 == 41 || v1398 == 43 && *((_QWORD *)v1597[0] - 8) == v1395)
                                  && *(unsigned __int8 *)(v1586 + 16) <= 0x14u)
                                {
                                  v1399 = *(llvm::Instruction **)(a1 + 80);
                                  if (*((_QWORD *)v1597[0] + 5) != *((_QWORD *)v1399 + 5))
                                  {
                                    v1400 = (const llvm::Use *)*((_QWORD *)v1597[0] + 1);
                                    if (v1400)
                                    {
                                      while (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 16), *(const llvm::Value **)(a1 + 80), v1400))
                                      {
                                        v1400 = (const llvm::Use *)*((_QWORD *)v1400 + 1);
                                        if (!v1400)
                                        {
                                          v1399 = *(llvm::Instruction **)(a1 + 80);
                                          goto LABEL_2187;
                                        }
                                      }
                                    }
                                    else
                                    {
LABEL_2187:
                                      llvm::Instruction::moveBefore(v1397, v1399);
                                      *(_BYTE *)(a1 + 76) = 1;
                                    }
                                  }
                                }
                              }
                              v1401 = *(_QWORD *)(v1395 + 32);
                              v1395 = v1401 - 24;
                              if (v1401)
                                v1402 = v1401 - 24;
                              else
                                v1402 = 0;
                            }
                            while (v1401 && *(_BYTE *)(v1402 + 16) == 83);
                          }
                        }
                        sub_1C50D05E0((uint64_t)__b);
                        sub_1C50880D4((char **)v1606);
LABEL_2194:
                        if ((uint64_t *)v1602 != &v1603)
                          free((void *)v1602);
                        return a1;
                      }
                      break;
                    }
                    v1539 = v939;
                    v946 = *(void **)(v943 + 96 * v941 + 24);
                    v1606[0] = *(void **)(v944 + 80);
                    v1606[1] = v946;
                    *(_QWORD *)v1607 = v941;
                    sub_1C631D0E4((uint64_t)v1591, (uint64_t)&v1602, (uint64_t *)v1606, v1607);
                    if ((_BYTE)v1592)
                    {
                      v939 = v1539;
LABEL_1538:
                      v942 = v1517;
                      goto LABEL_1488;
                    }
                    v1494 = *(_QWORD *)v1517;
                    v1506 = (llvm::SmallPtrSetImplBase *)*((_QWORD *)v1591[0] + 2);
                    v947 = v943 + 96 * v941;
                    v950 = *(uint64_t **)(v947 + 32);
                    v949 = v947 + 32;
                    v948 = v950;
                    v951 = *(unsigned int *)(v949 + 8);
                    v952 = 0;
                    if ((_DWORD)v951)
                    {
                      v953 = &v948[v951];
                      do
                      {
                        v954 = *v948;
                        v1606[0] = 0;
                        if (sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v954, v1606))
                          v955 = v1606[0];
                        else
                          v955 = (_QWORD *)(*v1462 + 16 * *(unsigned int *)(a1 + 30856));
                        v956 = v955[1];
                        if ((v956 & 1) != 0)
                        {
                          v963 = (uint8x8_t)vcnt_s8((int8x8_t)((v956 >> 1) & ~(-1 << (v956 >> 58))));
                          v963.i16[0] = vaddlv_u8(v963);
                          v958 = v963.i32[0];
                        }
                        else
                        {
                          v957 = *(unsigned int *)(v956 + 8);
                          if ((_DWORD)v957)
                          {
                            v958 = 0;
                            v959 = *(int8x8_t **)v956;
                            v960 = 8 * v957;
                            do
                            {
                              v961 = *v959++;
                              v962 = (uint8x8_t)vcnt_s8(v961);
                              v962.i16[0] = vaddlv_u8(v962);
                              v958 += v962.i32[0];
                              v960 -= 8;
                            }
                            while (v960);
                          }
                          else
                          {
                            v958 = 0;
                          }
                        }
                        v952 = (char *)v1555 + (_QWORD)v952 - v958;
                        ++v948;
                      }
                      while (v948 != v953);
                    }
                    v964 = v1494 + 96 * (_QWORD)v1506;
                    v965 = *(uint64_t **)(v964 + 32);
                    v1461 = (llvm::APInt *)(v964 + 32);
                    v966 = *(unsigned int *)(v964 + 40);
                    if ((_DWORD)v966)
                    {
                      v967 = 0;
                      v968 = &v965[v966];
                      do
                      {
                        v969 = *v965;
                        v1606[0] = 0;
                        if (sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v969, v1606))
                          v970 = v1606[0];
                        else
                          v970 = (_QWORD *)(*v1462 + 16 * *(unsigned int *)(a1 + 30856));
                        v971 = v970[1];
                        if ((v971 & 1) != 0)
                        {
                          v978 = (uint8x8_t)vcnt_s8((int8x8_t)((v971 >> 1) & ~(-1 << (v971 >> 58))));
                          v978.i16[0] = vaddlv_u8(v978);
                          v973 = v978.i32[0];
                        }
                        else
                        {
                          v972 = *(unsigned int *)(v971 + 8);
                          if ((_DWORD)v972)
                          {
                            v973 = 0;
                            v974 = *(int8x8_t **)v971;
                            v975 = 8 * v972;
                            do
                            {
                              v976 = *v974++;
                              v977 = (uint8x8_t)vcnt_s8(v976);
                              v977.i16[0] = vaddlv_u8(v977);
                              v973 += v977.i32[0];
                              v975 -= 8;
                            }
                            while (v975);
                          }
                          else
                          {
                            v973 = 0;
                          }
                        }
                        v967 = (char *)v1555 + (_QWORD)v967 - v973;
                        ++v965;
                      }
                      while (v965 != v968);
                    }
                    else
                    {
                      v967 = 0;
                    }
                    v979 = v1494 + 96 * (_QWORD)v1506;
                    v980 = v952 >= v967;
                    if (v952 != v967)
                    {
                      v984 = __ni;
                      goto LABEL_1531;
                    }
                    v981 = *(void **)(a1 + 8);
                    v982 = *(_QWORD *)(a1 + 48);
                    v983 = *(_DWORD *)(a1 + 72);
                    v1606[0] = *(void **)(a1 + 56);
                    v1606[1] = v981;
                    *(_QWORD *)v1607 = v982;
                    v1609 = v983;
                    *(_OWORD *)&v1607[8] = 0u;
                    v1608 = 0u;
                    v1640 = v1606[0];
                    v1641 = v981;
                    v1642 = v982;
                    v1645 = v983;
                    *(_OWORD *)v1643 = 0u;
                    v1644 = 0u;
                    v984 = __ni;
                    if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                    {
                      if (*(_DWORD *)&__b[16] >= 0x21u
                        && (4 * (*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24])) < *(_DWORD *)&__b[16])
                      {
                        free(*(void **)&__b[8]);
                        v989 = 1 << (33 - __clz(*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24] - 1));
                        v26 = (*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24]) > 0x10;
                        *(_DWORD *)&__b[24] = 0;
                        if (v26)
                          v990 = v989;
                        else
                          v990 = 32;
                        *(_QWORD *)&__b[16] = v990;
                        v991 = malloc_type_malloc(8 * v990, 0x4065EBACuLL);
                        if (!v991)
                          goto LABEL_1126;
                        *(_QWORD *)&__b[8] = v991;
                        memset(v991, 255, 8 * *(unsigned int *)&__b[16]);
                        v984 = __ni;
LABEL_1523:
                        sub_1C5B9F28C((uint64_t)v1606, (uint64_t *)v944, (llvm::SmallPtrSetImplBase *)__b, (uint64_t)v1597, v984, 0);
                        if (*(_QWORD *)&__b[8] != *(_QWORD *)__b)
                        {
                          if (*(_DWORD *)&__b[16] >= 0x21u
                            && (4 * (*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24])) < *(_DWORD *)&__b[16])
                          {
                            free(*(void **)&__b[8]);
                            v992 = 1 << (33 - __clz(*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24] - 1));
                            v26 = (*(_DWORD *)&__b[20] - *(_DWORD *)&__b[24]) > 0x10;
                            *(_DWORD *)&__b[24] = 0;
                            if (v26)
                              v993 = v992;
                            else
                              v993 = 32;
                            *(_QWORD *)&__b[16] = v993;
                            v994 = malloc_type_malloc(8 * v993, 0x4065EBACuLL);
                            if (!v994)
                              goto LABEL_1126;
                            *(_QWORD *)&__b[8] = v994;
                            memset(v994, 255, 8 * *(unsigned int *)&__b[16]);
                            v984 = __ni;
LABEL_1525:
                            sub_1C5B9F28C((uint64_t)&v1640, (uint64_t *)v979, (llvm::SmallPtrSetImplBase *)__b, (uint64_t)v1597, v984, 0);
                            if (!word_1ED820000
                              || !byte_1ED820078
                              || (v980 = *(_DWORD *)&v1607[8] >= LODWORD(v1643[0]),
                                  *(_DWORD *)&v1607[8] == LODWORD(v1643[0])))
                            {
                              if (!(*(unsigned int (**)(_QWORD, _BYTE *, unint64_t *))(***(_QWORD ***)v1607 + 272))(**(_QWORD **)v1607, &v1607[8], v1643))goto LABEL_1537;
                              goto LABEL_1532;
                            }
LABEL_1531:
                            if (v980)
                            {
LABEL_1537:
                              sub_1C5B9F718(v984, (__int128 *)v944);
                              --v941;
                              v939 = v1539 - 1;
                              v940 = 1;
                              goto LABEL_1538;
                            }
LABEL_1532:
                            v985 = *(_OWORD *)v944;
                            *(_OWORD *)v1607 = *(_OWORD *)(v944 + 16);
                            *(_OWORD *)v1606 = v985;
                            *(_QWORD *)&v1607[16] = (char *)&v1608 + 8;
                            *(_QWORD *)&v1608 = 0x400000000;
                            if (*(_DWORD *)(v949 + 8))
                              sub_1C4F54880((uint64_t)&v1607[16], v949);
                            v1610 = *v945;
                            v986 = *(_OWORD *)(v979 + 16);
                            *(_OWORD *)v944 = *(_OWORD *)v979;
                            *(_OWORD *)(v944 + 16) = v986;
                            sub_1C4F54880(v949, (uint64_t)v1461);
                            v987 = v1494 + 96 * (_QWORD)v1506;
                            *v945 = *(_OWORD *)(v987 + 80);
                            v988 = *(_OWORD *)v1607;
                            *(_OWORD *)v979 = *(_OWORD *)v1606;
                            *(_OWORD *)(v979 + 16) = v988;
                            sub_1C4F54880((uint64_t)v1461, (uint64_t)&v1607[16]);
                            *(_OWORD *)(v987 + 80) = v1610;
                            if (*(__int128 **)&v1607[16] != (__int128 *)((char *)&v1608 + 8))
                              free(*(void **)&v1607[16]);
                            v984 = __ni;
                            goto LABEL_1537;
                          }
                          memset(*(void **)&__b[8], 255, 8 * *(unsigned int *)&__b[16]);
                        }
                        *(_QWORD *)&__b[20] = 0;
                        goto LABEL_1525;
                      }
                      memset(*(void **)&__b[8], 255, 8 * *(unsigned int *)&__b[16]);
                    }
                    *(_QWORD *)&__b[20] = 0;
                    goto LABEL_1523;
                  }
                  v1503 = (llvm::SmallPtrSetImplBase *)&v627[v626];
                  while (1)
                  {
                    v724 = *v627;
                    v1616 = *v627;
                    v1513 = (llvm::Type *)v627;
                    if (v1562)
                    {
                      v725 = ((v724 >> 4) ^ (v724 >> 9)) & (v1562 - 1);
                      v726 = v1561[0] + 32 * v725;
                      v727 = *(void **)v726;
                      if (v724 != *(void **)v726)
                      {
                        v728 = 1;
                        while (v727 != (void *)-4096)
                        {
                          v729 = v725 + v728++;
                          v725 = v729 & (v1562 - 1);
                          v727 = *(void **)(v1561[0] + 32 * v725);
                          if (v724 == v727)
                          {
                            v726 = v1561[0] + 32 * v725;
                            goto LABEL_1159;
                          }
                        }
                        v726 = v1561[0] + 32 * v1562;
                      }
                    }
                    else
                    {
                      v726 = v1561[0];
                    }
LABEL_1159:
                    if (*(_QWORD *)(v726 + 24) != 1)
                    {
                      v730 = *(_QWORD **)(v726 + 8);
                      v731 = (_QWORD *)(v726 + 16);
                      if (v730 != (_QWORD *)(v726 + 16))
                        break;
                    }
LABEL_1238:
                    v627 = (void **)((char *)v1513 + 8);
                    if ((llvm::Type *)((char *)v1513 + 8) == v1503)
                      goto LABEL_1149;
                  }
                  v1536 = v726;
                  while (1)
                  {
                    v732 = v730[5];
                    v1552 = (llvm::Type *)v730[4];
                    v1640 = 0;
                    v733 = sub_1C49F21C0(*v1462, *(_DWORD *)(a1 + 30856), v732, &v1640)
                         ? (char *)v1640
                         : (char *)(*v1462 + 16 * *(unsigned int *)(a1 + 30856));
                    if (!*(_WORD *)(v732 + 24))
                      break;
                    v771 = sub_1C631CE04((uint64_t)v1559, (uint64_t *)&v1616)[1];
                    if ((v771 & 1) != 0)
                    {
                      v778 = (uint8x8_t)vcnt_s8((int8x8_t)((v771 >> 1) & ~(-1 << (v771 >> 58))));
                      v778.i16[0] = vaddlv_u8(v778);
                      v773 = v778.i32[0];
                    }
                    else
                    {
                      v772 = *(unsigned int *)(v771 + 8);
                      if (!(_DWORD)v772)
                        break;
                      v773 = 0;
                      v774 = *(int8x8_t **)v771;
                      v775 = 8 * v772;
                      do
                      {
                        v776 = *v774++;
                        v777 = (uint8x8_t)vcnt_s8(v776);
                        v777.i16[0] = vaddlv_u8(v777);
                        v773 += v777.i32[0];
                        v775 -= 8;
                      }
                      while (v775);
                    }
                    if (v773 != 1)
                      break;
LABEL_1223:
                    v769 = (_QWORD *)v730[1];
                    if (v769)
                    {
                      do
                      {
                        v770 = v769;
                        v769 = (_QWORD *)*v769;
                      }
                      while (v769);
                    }
                    else
                    {
                      do
                      {
                        v770 = (_QWORD *)v730[2];
                        v42 = *v770 == (_QWORD)v730;
                        v730 = v770;
                      }
                      while (!v42);
                    }
                    v730 = v770;
                    if (v770 == v731)
                      goto LABEL_1238;
                  }
                  v734 = *(_QWORD **)(v726 + 16);
                  v735 = v734;
                  v736 = v731;
                  if (v734)
                  {
                    do
                    {
                      v737 = v735;
                      v735 = (_QWORD *)v735[1];
                    }
                    while (v735);
                  }
                  else
                  {
                    do
                    {
                      v737 = (_QWORD *)v736[2];
                      v42 = *v737 == (_QWORD)v736;
                      v736 = v737;
                    }
                    while (v42);
                  }
                  v738 = *(_QWORD *)(*(_QWORD *)(v726 + 8) + 32);
                  v739 = v737[4];
                  v1640 = *(void **)(v726 + 8);
                  v740 = v734;
                  v741 = v731;
                  if (v734)
                  {
                    do
                    {
                      v742 = v740;
                      v740 = (_QWORD *)v740[1];
                    }
                    while (v740);
                  }
                  else
                  {
                    do
                    {
                      v742 = (_QWORD *)v741[2];
                      v42 = *v742 == (_QWORD)v741;
                      v741 = v742;
                    }
                    while (v42);
                  }
                  v1641 = v742;
                  v743 = (uint64_t)v731;
                  if (v734)
                  {
                    v744 = ((v739 ^ v738) & (((v739 & v738) + ((uint64_t)(v739 ^ v738) >> 1)) >> 63))
                         + (v739 & v738)
                         + ((uint64_t)(v739 ^ v738) >> 1);
                    v743 = (uint64_t)v731;
                    do
                    {
                      v745 = v734[4];
                      v746 = v745 < v744;
                      if (v745 >= v744)
                        v747 = v734;
                      else
                        v747 = v734 + 1;
                      if (!v746)
                        v743 = (uint64_t)v734;
                      v734 = (_QWORD *)*v747;
                    }
                    while (*v747);
                  }
                  v748 = 0;
                  v749 = (unint64_t *)(v733 + 8);
                  v1642 = v743;
                  do
                  {
                    v750 = *(&v1640 + v748);
                    if (v730 != v750 && v731 != v750)
                    {
                      v752 = v750[4];
                      v753 = *v749;
                      if ((*v749 & 1) != 0)
                      {
                        v755 = (v753 >> 1) & ~(-1 << (v753 >> 58));
                        if (v755)
                        {
                          v754 = __clz(__rbit64(v755));
LABEL_1195:
                          v756 = (uint64_t)v1552 - v752;
                          while (2)
                          {
                            v757 = v754;
                            *(_QWORD *)&v1602 = v754;
                            *((_QWORD *)&v1602 + 1) = v756;
                            if (*((_QWORD *)&v1612 + 1))
                            {
                              if ((sub_1C631CFE4((uint64_t)&v1611, v754, v756, &v1602) & 1) != 0)
                                goto LABEL_1210;
                            }
                            else
                            {
                              v758 = (char *)v1606[0];
                              v759 = LODWORD(v1606[1]);
                              if (!LODWORD(v1606[1]))
                                goto LABEL_1207;
                              v760 = 16 * LODWORD(v1606[1]);
                              v761 = (char *)v1606[0] + 8;
                              while (*(v761 - 1) != v754 || *v761 != v756)
                              {
                                v761 += 2;
                                v760 -= 16;
                                if (!v760)
                                  goto LABEL_1206;
                              }
                              if (v760)
                                goto LABEL_1213;
LABEL_1206:
                              if (LODWORD(v1606[1]) >= 0x20)
                              {
                                do
                                {
                                  sub_1C631CFE4((uint64_t)&v1611, *((_QWORD *)v1606[0] + 2 * v759 - 2), *((_QWORD *)v1606[0] + 2 * v759 - 1), (_OWORD *)v1606[0] + v759 - 1);
                                  LODWORD(v759) = --LODWORD(v1606[1]);
                                }
                                while (LODWORD(v1606[1]));
                                sub_1C631CFE4((uint64_t)&v1611, v757, v756, &v1602);
                              }
                              else
                              {
LABEL_1207:
                                if (LODWORD(v1606[1]) >= HIDWORD(v1606[1]))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1606, (uint64_t)v1607, LODWORD(v1606[1]) + 1, 16);
                                  v758 = (char *)v1606[0];
                                  v759 = LODWORD(v1606[1]);
                                }
                                v763 = (unint64_t *)&v758[16 * v759];
                                *v763 = v757;
                                v763[1] = v756;
                                ++LODWORD(v1606[1]);
                              }
LABEL_1210:
                              *(_QWORD *)&v1602 = v757;
                              *((_QWORD *)&v1602 + 1) = v756;
                              v1603 = v732;
                              v764 = *(_QWORD *)__b;
                              if (*(_DWORD *)&__b[8] >= *(_DWORD *)&__b[12])
                              {
                                v768 = *(unsigned int *)&__b[8] + 1;
                                if (*(_QWORD *)__b <= (unint64_t)&v1602
                                  && *(_QWORD *)__b + 24 * (unint64_t)*(unsigned int *)&__b[8] > (unint64_t)&v1602)
                                {
                                  v1485 = (char *)&v1602 - *(_QWORD *)__b;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__b, (uint64_t)&__b[16], v768, 24);
                                  v764 = *(_QWORD *)__b;
                                  v765 = &v1485[*(_QWORD *)__b];
                                }
                                else
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__b, (uint64_t)&__b[16], v768, 24);
                                  v765 = (char *)&v1602;
                                  v764 = *(_QWORD *)__b;
                                }
                              }
                              else
                              {
                                v765 = (char *)&v1602;
                              }
                              v766 = v764 + 24 * *(unsigned int *)&__b[8];
                              v767 = *(_OWORD *)v765;
                              *(_QWORD *)(v766 + 16) = *((_QWORD *)v765 + 2);
                              *(_OWORD *)v766 = v767;
                              ++*(_DWORD *)&__b[8];
                            }
LABEL_1213:
                            v754 = sub_1C49143F4(v749, v757);
                            if (v754 == -1)
                              break;
                            continue;
                          }
                        }
                      }
                      else
                      {
                        v754 = sub_1C476B7EC(v753);
                        if (v754 != -1)
                          goto LABEL_1195;
                      }
                    }
                    ++v748;
                  }
                  while (v748 != 3);
                  v726 = v1536;
                  goto LABEL_1223;
                }
              }
              do
              {
                while (1)
                {
                  while (1)
                  {
LABEL_657:
                    v423 = *(_QWORD *)(v423 + 8);
                    if (!v423)
                      goto LABEL_655;
                    v430 = *(_QWORD *)(v423 + 24);
                    v431 = *(unsigned __int8 *)(v430 + 16);
                    if (v430)
                      v432 = v431 >= 0x1C;
                    else
                      v432 = 0;
                    if (v432
                      && (v431 - 38 > 0x38 || ((1 << (v431 - 38)) & 0x100060000000001) == 0))
                    {
                      v434 = *(_QWORD *)(v430 + 40);
                      v435 = **(_QWORD **)(*(_QWORD *)(a1 + 56) + 32);
                      if (*(_QWORD *)(v434 + 56) == *(_QWORD *)(v435 + 56))
                      {
                        if (v431 == 83)
                        {
                          v436 = *(_DWORD *)(v430 + 20);
                          if ((v436 & 0x40000000) != 0)
                            v437 = *(_QWORD *)(v430 - 8);
                          else
                            v437 = v430 - 32 * (v436 & 0x7FFFFFF);
                          v434 = *(_QWORD *)(v437
                                           + 32 * *(unsigned int *)(v430 + 60)
                                           + 8 * ((v423 - v437) >> 5));
                        }
                        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), v435, v434))
                        {
                          v438 = *(_QWORD *)(v434 + 40);
                          if (v438)
                            v439 = v438 - 24;
                          else
                            v439 = 0;
                          if (*(unsigned __int8 *)(v439 + 16) - 29 >= 0xB)
                            v439 = 0;
                          v440 = *(unsigned __int8 *)(v439 + 16) - 38;
                          v26 = v440 > 0x38;
                          v441 = (1 << v440) & 0x100060000000001;
                          if (v26 || v441 == 0)
                            break;
                        }
                      }
                    }
                  }
                  v443 = *(unsigned __int8 *)(v430 + 16);
                  if (v443 != 83)
                    break;
                  v444 = *(_DWORD *)(v430 + 20);
                  v445 = v444 & 0x7FFFFFF;
                  if ((v444 & 0x7FFFFFF) == 0)
                    break;
                  v446 = 0;
                  v447 = 0;
                  v448 = 32 * v445;
                  v449 = v430 - 32 * v445;
                  while (1)
                  {
                    if ((v444 & 0x40000000) != 0)
                    {
                      v451 = *(_QWORD *)(v430 - 8);
                      v450 = *(_QWORD *)(v451 + v447);
                    }
                    else
                    {
                      v450 = *(_QWORD *)(v449 + v447);
                      v451 = v449;
                    }
                    if (v450 == *(_QWORD *)v423)
                    {
                      v452 = *(_QWORD *)(*(_QWORD *)(v451 + 32 * *(unsigned int *)(v430 + 60) + v446) + 40);
                      if (v452)
                        v453 = v452 - 24;
                      else
                        v453 = 0;
                      if (*(unsigned __int8 *)(v453 + 16) - 29 >= 0xB)
                        v453 = 0;
                      v454 = *(unsigned __int8 *)(v453 + 16) - 38;
                      v26 = v454 > 0x38;
                      v455 = (1 << v454) & 0x100060000000001;
                      if (!v26 && v455 != 0)
                        break;
                    }
                    v447 += 32;
                    v446 += 8;
                    if (v448 == v447)
                      goto LABEL_702;
                  }
                }
LABEL_702:
                v457 = *(_QWORD *)(*(_QWORD *)(v430 + 40) + 40);
                if (v457)
                  v458 = v457 - 24;
                else
                  v458 = 0;
                if (*(unsigned __int8 *)(v458 + 16) - 29 >= 0xB)
                  v458 = 0;
              }
              while (*(_BYTE *)(v458 + 16) == 38);
              if ((*(_DWORD *)(*(_QWORD *)v430 + 8) & 0xFD) == 0xD)
              {
                v459 = *(_QWORD *)(a1 + 8);
                v460 = *(_QWORD *)(v459 + 104);
                v461 = *(_DWORD *)(v459 + 120);
                if (!v461)
                  goto LABEL_716;
                v462 = (v461 - 1) & ((v430 >> 4) ^ (v430 >> 9));
                v463 = v460 + 48 * v462;
                v464 = *(_QWORD *)(v463 + 24);
                if (v464 != v430)
                {
                  v465 = 1;
                  while (v464 != -4096)
                  {
                    v466 = v462 + v465++;
                    v462 = v466 & (v461 - 1);
                    v463 = v460 + 48 * v462;
                    v464 = *(_QWORD *)(v463 + 24);
                    if (v464 == v430)
                      goto LABEL_717;
                  }
LABEL_716:
                  v463 = v460 + 48 * v461;
                }
LABEL_717:
                if (v463 == v460 + 48 * v461 || (v467 = *(_QWORD *)(v463 + 40)) == 0)
                  v467 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v459, v430);
                if (*(_WORD *)(v467 + 24) != 14)
                  goto LABEL_657;
                if (v467 == v410)
                {
                  v482 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v430);
                  v483 = v1641;
                  if (v1641 >= (unint64_t)HIDWORD(v1641))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1640, (uint64_t)&v1642, v1641 + 1, 8);
                    v483 = v1641;
                  }
                  *((_QWORD *)v1640 + v483) = v482;
                  LODWORD(v1641) = (_DWORD)v1641 + 1;
                  goto LABEL_657;
                }
                v443 = *(unsigned __int8 *)(v430 + 16);
              }
              if (v443 != 81)
                goto LABEL_742;
              v468 = *(_QWORD *)(v423 + 24);
              v469 = *(_DWORD *)(v468 + 20);
              if ((v469 & 0x40000000) != 0)
                v470 = *(_QWORD *)(v468 - 8);
              else
                v470 = v468 - 32 * (v469 & 0x7FFFFFF);
              v471 = *(_QWORD *)(v430 + 32 * (((v423 - v470) & 0x1FFFFFFFE0) == 0) - 64);
              v472 = *(_QWORD *)(a1 + 8);
              v473 = *(_QWORD *)(v472 + 104);
              v474 = *(_DWORD *)(v472 + 120);
              if (v474)
              {
                v475 = v474 - 1;
                v476 = (v474 - 1) & ((v471 >> 4) ^ (v471 >> 9));
                v477 = v473 + 48 * v476;
                v478 = *(_QWORD *)(v477 + 24);
                if (v478 != v471)
                {
                  v479 = 1;
                  while (v478 != -4096)
                  {
                    v480 = v476 + v479++;
                    v476 = v480 & v475;
                    v477 = v473 + 48 * (v480 & v475);
                    v478 = *(_QWORD *)(v477 + 24);
                    if (v478 == v471)
                      goto LABEL_733;
                  }
                  goto LABEL_732;
                }
              }
              else
              {
LABEL_732:
                v477 = v473 + 48 * v474;
              }
LABEL_733:
              if (v477 == v473 + 48 * v474 || (v481 = *(const llvm::SCEV **)(v477 + 40)) == 0)
                v481 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 8), v471);
              if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v472, v481, *(const llvm::Loop **)(a1 + 56)) != 2)
              {
LABEL_742:
                v484 = sub_1C5B9A1AC(a1, (unint64_t *)&v1602, 0, 0, 0xFFFFFFFFLL);
                v1530 = v485;
                v1546 = v484;
                v1500 = *(llvm::SmallPtrSetImplBase **)(a1 + 360);
                v486 = (uint64_t)v1500 + 1904 * v484;
                v487 = (uint64_t *)sub_1C5B9A8F8(v486);
                *v487 = v430;
                v487[1] = *(_QWORD *)v423;
                v487[8] = v1530;
                v1531 = v487;
                v488 = sub_1C5B9AA10(v487, *(_QWORD *)(a1 + 56));
                if (*(_BYTE *)(v486 + 656))
                  v489 = v488;
                else
                  v489 = 0;
                *(_BYTE *)(v486 + 656) = v489;
                v490 = v486;
                v491 = *(_QWORD *)(v486 + 664);
                if (!v491)
                  goto LABEL_753;
                v492 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
                if (*(_BYTE *)(v491 + 8) == 15)
                {
                  v495 = llvm::DataLayout::getIndexTypeSizeInBits(v492, v491);
                }
                else
                {
                  sub_1C4768AD0(v492, v491);
                  v495 = v494;
                  if ((_DWORD)v493 == 1)
                }
                v496 = *(_QWORD *)v1531[1];
                v497 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
                if (*(_BYTE *)(v496 + 8) == 15)
                {
                  v500 = llvm::DataLayout::getIndexTypeSizeInBits(v497, v496);
                }
                else
                {
                  sub_1C4768AD0(v497, v496);
                  v500 = v499;
                  if ((_DWORD)v498 == 1)
                }
                if (v495 < v500)
LABEL_753:
                  *(_QWORD *)(v490 + 664) = *(_QWORD *)v1531[1];
                v1606[1] = 0;
                v1606[0] = 0;
                *(_QWORD *)&v1607[8] = 0;
                *(_QWORD *)&v1607[16] = (char *)&v1608 + 8;
                v1610 = 0uLL;
                *((_QWORD *)&v1608 + 1) = v410;
                *(_QWORD *)&v1608 = 0x400000001;
                v1607[0] = 1;
                sub_1C5B9BCE0((unint64_t *)a1, v490, v1546, (unint64_t)v1606);
                if (*(__int128 **)&v1607[16] != (__int128 *)((char *)&v1608 + 8))
                  free(*(void **)&v1607[16]);
                sub_1C5B9AB30((unint64_t *)a1, *((_QWORD *)v1500 + 238 * v1546 + 84) + 96 * *((unsigned int *)v1500 + 476 * v1546 + 170) - 96, *(unsigned int *)(a1 + 368) - 1);
                goto LABEL_655;
              }
              goto LABEL_657;
            }
            while (2)
            {
              if (v406)
                v628 = v406 - 32;
              else
                v628 = 0;
              v629 = *(_QWORD *)(v628 + 24);
              v630 = *(_DWORD *)(v629 + 20);
              if ((v630 & 0x40000000) != 0)
              {
                v632 = *(_QWORD **)(v629 - 8);
                v631 = v630 & 0x7FFFFFF;
                if (!v631)
                  goto LABEL_1018;
              }
              else
              {
                v631 = v630 & 0x7FFFFFF;
                v632 = (_QWORD *)(v629 - 32 * v631);
                if (!v631)
                  goto LABEL_1018;
              }
              v633 = 32 * v631;
              v634 = &v632[4 * v631];
              while (*v632 != *(_QWORD *)(v628 + 72))
              {
                v632 += 4;
                v633 -= 32;
                if (!v633)
                {
                  v632 = v634;
                  break;
                }
              }
LABEL_1018:
              v635 = sub_1C477672C(v404, (uint64_t)v632);
              v636 = *(_QWORD *)(a1 + 31416);
              if (v636 == *(_QWORD *)(a1 + 31408))
                v637 = 580;
              else
                v637 = 576;
              if (v635 != (_QWORD *)(v636 + 8 * *(unsigned int *)(v403 + v637)))
              {
LABEL_1022:
                v406 = *(_QWORD *)(v406 + 8);
                if (v406 == v405)
                  goto LABEL_623;
                continue;
              }
              break;
            }
            if (sub_1C5B989C4(**(_QWORD **)(a1 + 48), v629, *(_QWORD *)(v628 + 72)))
            {
              v638 = (_QWORD **)sub_1C5B98B48(**(_QWORD **)(a1 + 48), v629, *(_DWORD ***)(v628 + 72));
              v640 = v1545 & 0xFFFFFFFF00000000 | v639;
              v641 = 2;
            }
            else
            {
              v638 = 0;
              v641 = 0;
              v640 = v1545 | 0xFFFFFFFFLL;
            }
            v1591[0] = 0;
            v1591[0] = (llvm::SCEV *)llvm::IVUsers::getExpr(*(llvm::ScalarEvolution ***)a1, (llvm::Value **)v628);
            *(_QWORD *)&v1602 = &v1605;
            v642 = *(const void **)(v628 + 88);
            if (v642 == *(const void **)(v628 + 80))
            {
              *((_QWORD *)&v1602 + 1) = &v1605;
              v643 = &v1605;
              v644 = v642;
            }
            else
            {
              v700 = *(unsigned int *)(v628 + 96);
              v643 = malloc_type_malloc(8 * v700, 0x4065EBACuLL);
              if (!v643 && ((_DWORD)v700 || (v643 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_1126:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              *((_QWORD *)&v1602 + 1) = v643;
              v644 = *(const void **)(v628 + 80);
              v642 = *(const void **)(v628 + 88);
            }
            v646 = *(_DWORD *)(v628 + 96);
            v645 = *(_DWORD *)(v628 + 100);
            LODWORD(v1603) = v646;
            if (v642 == v644)
              v647 = v645;
            else
              v647 = v646;
            if (v647)
            {
              memmove(v643, v642, 8 * v647);
              v645 = *(_DWORD *)(v628 + 100);
            }
            v648 = *(_DWORD *)(v628 + 104);
            HIDWORD(v1603) = v645;
            LODWORD(v1604) = v648;
            v1545 = v640;
            if (!v629 || *(_BYTE *)(v629 + 16) != 81)
              goto LABEL_1041;
            if (!v1457)
              goto LABEL_1040;
            v649 = *((_QWORD *)v1597[0] - 12);
            if (*(_BYTE *)(v649 + 16) != 81)
              v649 = 0;
            if (v629 != v649)
            {
LABEL_1040:
              if ((*(_WORD *)(v629 + 18) & 0x3E) != 0x20)
                goto LABEL_1041;
              v679 = (_QWORD *)(v629 - 32);
              v680 = *(_QWORD **)(v629 - 32);
              if (v680 == *(_QWORD **)(v628 + 72))
              {
                v681 = (_QWORD *)(v629 - 64);
                v682 = *(_QWORD *)(v629 - 64);
                if (v680)
                {
                  **(_QWORD **)(v629 - 16) = *(_QWORD *)(v629 - 24);
                  v683 = *(_QWORD *)(v629 - 24);
                  if (v683)
                    *(_QWORD *)(v683 + 16) = *(_QWORD *)(v629 - 16);
                }
                *v679 = v682;
                if (v682)
                {
                  v686 = *(_QWORD *)(v682 + 8);
                  v684 = (_QWORD *)(v682 + 8);
                  v685 = v686;
                  *(_QWORD *)(v629 - 24) = v686;
                  if (v686)
                    *(_QWORD *)(v685 + 16) = v629 - 24;
                  *(_QWORD *)(v629 - 16) = v684;
                  *v684 = v679;
                }
                if (*v681)
                {
                  **(_QWORD **)(v629 - 48) = *(_QWORD *)(v629 - 56);
                  v687 = *(_QWORD *)(v629 - 56);
                  if (v687)
                    *(_QWORD *)(v687 + 16) = *(_QWORD *)(v629 - 48);
                }
                *v681 = v680;
                if (v680)
                {
                  v690 = v680[1];
                  v689 = v680 + 1;
                  v688 = v690;
                  *(_QWORD *)(v629 - 56) = v690;
                  if (v690)
                    *(_QWORD *)(v688 + 16) = v629 - 56;
                  *(_QWORD *)(v629 - 48) = v689;
                  *v689 = v681;
                }
                v680 = (_QWORD *)*v679;
                *(_BYTE *)(a1 + 76) = 1;
              }
              v691 = *(_QWORD *)(a1 + 8);
              v692 = *(_QWORD *)(v691 + 104);
              v693 = *(_DWORD *)(v691 + 120);
              if (v693)
              {
                v694 = v693 - 1;
                v695 = (v693 - 1) & ((v680 >> 4) ^ (v680 >> 9));
                v696 = v692 + 48 * v695;
                v697 = *(_QWORD **)(v696 + 24);
                if (v697 != v680)
                {
                  v698 = 1;
                  while (v697 != (_QWORD *)-4096)
                  {
                    v699 = v695 + v698++;
                    v695 = v699 & v694;
                    v696 = v692 + 48 * (v699 & v694);
                    v697 = *(_QWORD **)(v696 + 24);
                    if (v697 == v680)
                      goto LABEL_1105;
                  }
                  goto LABEL_1104;
                }
              }
              else
              {
LABEL_1104:
                v696 = v692 + 48 * v693;
              }
LABEL_1105:
              if (v696 == v692 + 48 * v693 || (v701 = *(const llvm::SCEV **)(v696 + 40)) == 0)
              {
                v701 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v691, (unint64_t)v680);
                v691 = *(_QWORD *)(a1 + 8);
              }
              if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v691, v701, *(const llvm::Loop **)(a1 + 56)) == 1&& llvm::isSafeToExpand(v701, *(const llvm::SCEV **)(a1 + 8), (llvm::ScalarEvolution *)1))
              {
                if (*(_BYTE *)(*v680 + 8) == 15)
                {
                  PointerBase = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), v701);
                  v702 = v1591[0];
                  if (PointerBase != llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), v1591[0]))goto LABEL_1117;
                }
                else
                {
                  v702 = v1591[0];
                }
                v703 = llvm::normalizeForPostIncUse((uint64_t)v701, (uint64_t)&v1602, *(_QWORD *)(a1 + 8));
                llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), v703, (uint64_t)v702);
                v1591[0] = v704;
                v641 = 3;
              }
LABEL_1117:
              v705 = *(unsigned int *)(a1 + 200);
              if ((_DWORD)v705)
              {
                v706 = 0;
                v707 = 8 * v705;
                do
                {
                  v708 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + v706);
                  if (v708 != -1)
                  {
                    *(_QWORD *)__b = -v708;
                    sub_1C631CB64((uint64_t)v1510, (uint64_t *)__b);
                  }
                  v706 += 8;
                }
                while (v707 != v706);
              }
              *(_QWORD *)__b = -1;
              sub_1C631CB64((uint64_t)v1510, (uint64_t *)__b);
LABEL_1041:
              v650 = sub_1C5B9A1AC(a1, (unint64_t *)v1591, v641, v638, v640);
              v652 = v651;
              v653 = *(_QWORD *)(a1 + 360);
              v1534 = v653 + 1904 * v650;
              v654 = (uint64_t *)sub_1C5B9A8F8(v1534);
              *v654 = v629;
              v654[1] = *(_QWORD *)(v628 + 72);
              if (&v1602 != (__int128 *)(v654 + 2))
                llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v654 + 2), (const llvm::SmallPtrSetImplBase *)&v1602);
              v654[8] = v652;
              v655 = sub_1C5B9AA10(v654, *(_QWORD *)(a1 + 56));
              v656 = v653 + 1904 * v650;
              if (*(_BYTE *)(v656 + 656))
                v657 = v655;
              else
                v657 = 0;
              *(_BYTE *)(v656 + 656) = v657;
              v658 = *(_QWORD *)(v656 + 664);
              if (!v658)
                goto LABEL_1054;
              v659 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
              if (*(_BYTE *)(v658 + 8) == 15)
              {
                v662 = llvm::DataLayout::getIndexTypeSizeInBits(v659, v658);
              }
              else
              {
                sub_1C4768AD0(v659, v658);
                v662 = v661;
                if ((_DWORD)v660 == 1)
              }
              v663 = *(_QWORD *)v654[1];
              v664 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
              if (*(_BYTE *)(v663 + 8) == 15)
              {
                v667 = llvm::DataLayout::getIndexTypeSizeInBits(v664, v663);
              }
              else
              {
                sub_1C4768AD0(v664, v663);
                v667 = v666;
                if ((_DWORD)v665 == 1)
              }
              if (v662 < v667)
LABEL_1054:
                *(_QWORD *)(v656 + 664) = *(_QWORD *)v654[1];
              v668 = v653 + 1904 * v650;
              if (!*(_DWORD *)(v668 + 680))
              {
                v669 = v1591[0];
                if (!llvm::isSafeToExpand(v1591[0], *(const llvm::SCEV **)(a1 + 8), 0))
                  *(_BYTE *)(v653 + 1904 * v650 + 657) = 1;
                memset(__b, 0, 17);
                *(_QWORD *)&__b[24] = 0;
                *(_QWORD *)&__b[32] = &v1619;
                v1618 = (void *)0x400000000;
                v1622[0] = 0;
                v1622[1] = 0;
                v673 = *(_QWORD *)(a1 + 56);
                v674 = *(llvm::ScalarEvolution **)(a1 + 8);
                v1606[0] = v1607;
                v1606[1] = (void *)0x400000000;
                v1640 = &v1642;
                v1641 = (void *)0x400000000;
                sub_1C5B9C01C((uint64_t)v669, v673, (uint64_t)v1606, (uint64_t)&v1640, v674, v670, v671, v672, v1410, v1411, v1412, v1413, v1414, v1415, v1416, v1417, v1419, v1421, v1423,
                  v1424,
                  v1426,
                  v1427,
                  v1428,
                  v1429);
                if (LODWORD(v1606[1]))
                {
                  v675 = (llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)v674, (uint64_t)v1606, 0, 0);
                  if (!llvm::SCEV::isZero(v675))
                  {
                    v676 = v1618;
                    if (v1618 >= (unint64_t)HIDWORD(v1618))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b[32], (uint64_t)&v1619, v1618 + 1, 8);
                      v676 = v1618;
                    }
                    *(_QWORD *)(*(_QWORD *)&__b[32] + 8 * v676) = v675;
                    LODWORD(v1618) = (_DWORD)v1618 + 1;
                  }
                  __b[16] = 1;
                }
                if ((_DWORD)v1641)
                {
                  v677 = (llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)v674, (uint64_t)&v1640, 0, 0);
                  if (!llvm::SCEV::isZero(v677))
                  {
                    v678 = v1618;
                    if (v1618 >= (unint64_t)HIDWORD(v1618))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b[32], (uint64_t)&v1619, v1618 + 1, 8);
                      v678 = v1618;
                    }
                    *(_QWORD *)(*(_QWORD *)&__b[32] + 8 * v678) = v677;
                    LODWORD(v1618) = (_DWORD)v1618 + 1;
                  }
                  __b[16] = 1;
                }
                sub_1C5B9C68C((uint64_t)__b, v673);
                if (v1640 != &v1642)
                  free(v1640);
                if (v1606[0] != v1607)
                  free(v1606[0]);
                sub_1C5B9BCE0((unint64_t *)a1, v1534, v650, (unint64_t)__b);
                if (*(uint64_t **)&__b[32] != &v1619)
                  free(*(void **)&__b[32]);
                sub_1C5B9AB30((unint64_t *)a1, *(_QWORD *)(v668 + 672) + 96 * *(unsigned int *)(v668 + 680) - 96, v650);
              }
            }
            if (*((_QWORD *)&v1602 + 1) != (_QWORD)v1602)
              free(*((void **)&v1602 + 1));
            v403 = a1 + 30848;
            v404 = a1 + 31408;
            goto LABEL_1022;
          }
        }
      }
      v295 = 1;
      while (v294 != -4096)
      {
        v296 = v292 + v295++;
        v292 = v296 & (v291 - 1);
        v294 = *(_QWORD *)(v290 + 16 * v292);
        if (v289 == v294)
        {
          v293 = (uint64_t *)(v290 + 16 * v292);
          goto LABEL_448;
        }
      }
    }
    v293 = (uint64_t *)(v290 + 16 * v291);
    goto LABEL_448;
  }
  return a1;
}

uint64_t sub_1C5B974A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  unsigned int v58;
  _BYTE *v59;
  int v60;
  unsigned int v61;
  void **v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  void **v67;
  uint64_t v68;
  void **v69;
  unsigned int v70;
  int v72;
  void **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  unsigned int v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  _BYTE v91[128];
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  int v95;
  _BYTE v96[128];
  _QWORD v97[2];
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *__s2;
  uint64_t v103;
  uint64_t v104;
  _DWORD v105[10];
  void *__base;
  size_t __nel;
  _BYTE v108[32];
  void *v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD v112[10];
  __int128 v113;
  __int128 v114;
  void *v115[2];
  _QWORD v116[4];
  __int128 v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[7];

  v120[4] = *MEMORY[0x1E0C80C00];
  v97[1] = 0;
  v97[0] = 0;
  v98 = 0;
  v92 = v96;
  v93 = v96;
  v94 = 16;
  v95 = 0;
  v87 = v91;
  v88 = v91;
  v89 = 16;
  v90 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v77 = *(unsigned int *)(a1 + 368);
  if ((_DWORD)v77)
  {
    v1 = a1;
    v2 = 0;
    v3 = a1 + 30840;
    while (1)
    {
      v82 = *(_QWORD *)(v1 + 360) + 1904 * v2;
      v81 = *(unsigned int *)(v82 + 680);
      if (!(_DWORD)v81)
        goto LABEL_97;
      v4 = 0;
      v5 = 0;
      v80 = (uint64_t *)(v82 + 672);
      while (2)
      {
        v78 = v4;
        while (1)
        {
          v6 = *v80;
          v7 = *(_QWORD *)(v1 + 8);
          v8 = *(_QWORD *)(v1 + 48);
          v9 = *(_DWORD *)(v1 + 72);
          v109 = *(void **)(v1 + 56);
          v110 = v7;
          v111 = v8;
          v112[8] = v9;
          memset(v112, 0, 32);
          if (v93 == v92)
            goto LABEL_7;
          if (v94 < 0x21 || 4 * (HIDWORD(v94) - v95) >= v94)
          {
            memset(v93, 255, 8 * v94);
LABEL_7:
            v95 = 0;
            HIDWORD(v94) = 0;
            goto LABEL_8;
          }
          free(v93);
          v33 = 1 << (33 - __clz(HIDWORD(v94) - v95 - 1));
          v34 = (HIDWORD(v94) - v95) > 0x10;
          v95 = 0;
          if (v34)
            v35 = v33;
          else
            v35 = 32;
          v94 = v35;
          v36 = malloc_type_malloc(8 * v35, 0x4065EBACuLL);
          if (!v36)
            goto LABEL_124;
          v93 = v36;
          memset(v36, 255, 8 * v94);
LABEL_8:
          v10 = (uint64_t *)(v6 + 96 * v5);
          sub_1C5B9F28C((uint64_t)&v109, v10, (llvm::SmallPtrSetImplBase *)&v92, (uint64_t)v97, v82, (llvm::SmallPtrSetImplBase *)&v87);
          if (v112[1] == -1)
            goto LABEL_85;
          __base = v108;
          __nel = 0x400000000;
          v83 = v6;
          v11 = v6 + 96 * v5;
          v14 = *(uint64_t **)(v11 + 32);
          v13 = v11 + 32;
          v12 = v14;
          v15 = *(unsigned int *)(v13 + 8);
          if ((_DWORD)v15)
          {
            v16 = 8 * v15;
            do
            {
              v17 = *v12;
              if (sub_1C5B9EE04(v3, *v12, v2))
              {
                v18 = __nel;
                if (__nel >= (unint64_t)HIDWORD(__nel))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v108, __nel + 1, 8);
                  v18 = __nel;
                }
                *((_QWORD *)__base + v18) = v17;
                LODWORD(__nel) = __nel + 1;
              }
              ++v12;
              v16 -= 8;
            }
            while (v16);
          }
          v19 = v83 + 96 * v5;
          v22 = *(_QWORD *)(v19 + 80);
          v21 = (__int128 *)(v19 + 80);
          v20 = v22;
          if (v22)
          {
            v23 = sub_1C5B9EE04(v3, v20, v2);
            v24 = __nel;
            if (v23)
            {
              v25 = *(_QWORD *)v21;
              if (__nel >= HIDWORD(__nel))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v108, __nel + 1, 8);
                v24 = __nel;
              }
              *((_QWORD *)__base + v24) = v25;
              v24 = __nel + 1;
              LODWORD(__nel) = __nel + 1;
            }
          }
          else
          {
            v24 = __nel;
          }
          if (v24 >= 2)
          {
            qsort(__base, v24, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C618ABDC);
            v24 = __nel;
          }
          v79 = v21;
          v26 = v1;
          *(_QWORD *)&v113 = &v114;
          *((_QWORD *)&v113 + 1) = 0x400000000;
          if (v24)
            sub_1C62C1D5C((uint64_t)&v113, (uint64_t)&__base);
          v116[0] = v5;
          v99 = 0;
          v27 = v84;
          v28 = v86;
          v29 = sub_1C5BA0328((uint64_t)v84, v86, (uint64_t)&v113, &v99);
          v30 = v99;
          if ((v29 & 1) == 0)
          {
            v100 = v99;
            v31 = v85;
            if (4 * (int)v85 + 4 >= (3 * v28))
            {
              v32 = 2 * v28;
            }
            else
            {
              v32 = v28;
              if ((int)v28 + ~(_DWORD)v85 - HIDWORD(v85) > v28 >> 3)
              {
LABEL_29:
                LODWORD(v85) = v31 + 1;
                __s2 = &v104;
                v104 = -1;
                v103 = 0x400000001;
                if (*(_DWORD *)(v30 + 8) != 1 || **(_QWORD **)v30 != v104)
                  --HIDWORD(v85);
                sub_1C4F54880(v30, (uint64_t)&v113);
                *(_QWORD *)(v30 + 48) = v116[0];
                goto LABEL_33;
              }
            }
            v37 = (v32 - 1) | ((unint64_t)(v32 - 1) >> 1);
            v38 = v37 | (v37 >> 2) | ((v37 | (v37 >> 2)) >> 4);
            v39 = ((v38 | (v38 >> 8)) >> 16) | v38 | (v38 >> 8);
            if ((v39 + 1) > 0x40)
              v40 = v39 + 1;
            else
              v40 = 64;
            v86 = v40;
            v84 = (void **)operator new(56 * v40, (std::align_val_t)8uLL);
            if (v27)
            {
              sub_1C5B9FAC0((uint64_t)&v84);
              __s2 = &v104;
              v104 = -1;
              v103 = 0x400000001;
              v118 = v120;
              v120[0] = -2;
              v119 = 0x400000001;
              if ((_DWORD)v28)
              {
                v73 = v84;
                v74 = v85;
                v72 = v86;
                v41 = 56 * v28;
                v42 = v27;
                do
                {
                  v75 = v41;
                  v76 = (uint64_t)v42;
                  v43 = *((unsigned int *)v42 + 2);
                  if ((_DWORD)v43 == (_DWORD)v103 && (v44 = *(void **)v76, !memcmp(*(const void **)v76, __s2, 8 * v43))
                    || (_DWORD)v43 == (_DWORD)v119 && (v44 = *(void **)v76, !memcmp(*(const void **)v76, v118, 8 * v43)))
                  {
                    v45 = v76;
                  }
                  else
                  {
                    v101 = 0;
                    v45 = v76;
                    sub_1C5BA0328((uint64_t)v73, v72, v76, &v101);
                    v46 = v101;
                    sub_1C4F54880(v101, v76);
                    *(_QWORD *)(v46 + 48) = *(_QWORD *)(v76 + 48);
                    ++v74;
                    v44 = *(void **)v76;
                  }
                  if ((void *)(v45 + 16) != v44)
                    free(v44);
                  v42 = (void **)(v45 + 56);
                  v41 = v75 - 56;
                }
                while (v75 != 56);
                LODWORD(v85) = v74;
                if (v118 != v120)
                  free(v118);
              }
              if (__s2 != &v104)
                free(__s2);
              MEMORY[0x1CAA32FB4](v27, 8);
            }
            else
            {
              sub_1C5B9FAC0((uint64_t)&v84);
            }
            sub_1C5BA0328((uint64_t)v84, v86, (uint64_t)&v113, &v100);
            v31 = v85;
            v30 = v100;
            goto LABEL_29;
          }
LABEL_33:
          v1 = v26;
          if ((__int128 *)v113 != &v114)
            free((void *)v113);
          if (v29)
            break;
          if (__base != v108)
            free(__base);
          if (++v5 == v81)
          {
            if ((v78 & 1) == 0)
              goto LABEL_97;
            goto LABEL_96;
          }
        }
        v47 = *(_QWORD *)(v30 + 48);
        v48 = *v80;
        v49 = *(_QWORD *)(v26 + 8);
        v50 = *(_QWORD *)(v26 + 48);
        v51 = *(_DWORD *)(v26 + 72);
        __s2 = *(void **)(v26 + 56);
        v103 = v49;
        v104 = v50;
        v105[8] = v51;
        memset(v105, 0, 32);
        if (v93 == v92)
          goto LABEL_72;
        if (v94 >= 0x21 && 4 * (HIDWORD(v94) - v95) < v94)
        {
          free(v93);
          v57 = 1 << (33 - __clz(HIDWORD(v94) - v95 - 1));
          v34 = (HIDWORD(v94) - v95) > 0x10;
          v95 = 0;
          if (v34)
            v58 = v57;
          else
            v58 = 32;
          v94 = v58;
          v59 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
          if (!v59)
LABEL_124:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v93 = v59;
          memset(v59, 255, 8 * v94);
        }
        else
        {
          memset(v93, 255, 8 * v94);
LABEL_72:
          v95 = 0;
          HIDWORD(v94) = 0;
        }
        v52 = (uint64_t *)(v48 + 96 * v47);
        sub_1C5B9F28C((uint64_t)&__s2, v52, (llvm::SmallPtrSetImplBase *)&v92, (uint64_t)v97, v82, 0);
        if (word_1ED820000 && byte_1ED820078 && v112[0] != v105[0])
        {
          if (v112[0] >= v105[0])
            goto LABEL_83;
LABEL_79:
          v53 = *((_OWORD *)v10 + 1);
          v113 = *(_OWORD *)v10;
          v114 = v53;
          v115[0] = v116;
          v115[1] = (void *)0x400000000;
          if (*(_DWORD *)(v83 + 96 * v5 + 40))
            sub_1C4F54880((uint64_t)v115, v13);
          v117 = *v79;
          v54 = *((_OWORD *)v52 + 1);
          *(_OWORD *)v10 = *(_OWORD *)v52;
          *((_OWORD *)v10 + 1) = v54;
          v55 = v48 + 96 * v47;
          sub_1C4F54880(v13, v55 + 32);
          *v79 = *(_OWORD *)(v55 + 80);
          v56 = v114;
          *(_OWORD *)v52 = v113;
          *((_OWORD *)v52 + 1) = v56;
          sub_1C4F54880(v55 + 32, (uint64_t)v115);
          *(_OWORD *)(v55 + 80) = v117;
          if (v115[0] != v116)
            free(v115[0]);
          goto LABEL_83;
        }
        if ((*(unsigned int (**)(_QWORD, _DWORD *, _DWORD *))(**(_QWORD **)v111 + 272))(*(_QWORD *)v111, v112, v105))
        {
          goto LABEL_79;
        }
LABEL_83:
        if (__base != v108)
          free(__base);
LABEL_85:
        sub_1C5B9F718(v82, (__int128 *)v10);
        v4 = 1;
        if (v5 != --v81)
          continue;
        break;
      }
LABEL_96:
      sub_1C5B9F854(v82, v2, v3);
LABEL_97:
      v60 = v85;
      if (v85)
      {
        v61 = v86;
        if (v86 <= 4 * (int)v85 || v86 < 0x41)
        {
          *(_QWORD *)&v113 = &v114;
          *(_QWORD *)&v114 = -1;
          *((_QWORD *)&v113 + 1) = 0x400000001;
          v109 = &v111;
          v111 = -2;
          v110 = 0x400000001;
          if (v86)
          {
            v67 = v84;
            v68 = 56 * v86;
            do
            {
              sub_1C62C1D5C((uint64_t)v67, (uint64_t)&v113);
              v67 += 7;
              v68 -= 56;
            }
            while (v68);
            v85 = 0;
            if (v109 != &v111)
              free(v109);
          }
          else
          {
            v85 = 0;
          }
          if ((__int128 *)v113 != &v114)
            free((void *)v113);
        }
        else
        {
          v62 = v84;
          sub_1C5BA0534(v84, v86);
          if (v60)
          {
            v63 = 1 << (33 - __clz(v60 - 1));
            if (v63 <= 64)
              v64 = 64;
            else
              v64 = v63;
            if (v64 != v61)
            {
              MEMORY[0x1CAA32FB4](v62, 8);
              v65 = (4 * v64 / 3u + 1) | ((unint64_t)(4 * v64 / 3u + 1) >> 1);
              v66 = v65 | (v65 >> 2) | ((v65 | (v65 >> 2)) >> 4);
              v86 = (((v66 | (v66 >> 8)) >> 16) | v66 | (v66 >> 8)) + 1;
              v84 = (void **)operator new(56 * v86, (std::align_val_t)8uLL);
            }
            sub_1C5B9FAC0((uint64_t)&v84);
          }
          else
          {
            MEMORY[0x1CAA32FB4](v62, 8);
            v84 = 0;
            v85 = 0;
            v86 = 0;
          }
        }
      }
      if (++v2 == v77)
      {
        v69 = v84;
        v70 = v86;
        goto LABEL_119;
      }
    }
  }
  v70 = 0;
  v69 = 0;
LABEL_119:
  sub_1C5BA0534(v69, v70);
  MEMORY[0x1CAA32FB4](v69, 8);
  if (v88 != v87)
    free(v88);
  if (v93 != v92)
    free(v93);
  return MEMORY[0x1CAA32FB4](0, 8);
}

unint64_t sub_1C5B97F8C(uint64_t a1, uint64_t a2, llvm::ConstantInt ****a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  llvm::APInt *v11;
  _QWORD *v12;
  unint64_t Constant;
  int v14;
  llvm::APInt *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  llvm::ConstantInt *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  int IndexTypeSizeInBits;
  llvm::Type *v29;
  char v30;
  int v31;
  int v32;
  int64_t v33;
  unint64_t v35;
  int v36;
  uint64_t v37;
  const llvm::APInt *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t AddExpr;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE v69[32];
  void *__s1;
  uint64_t v71;
  _QWORD v72[10];

  v72[8] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    __asm { BR              X10 }
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (!a2 || *(_WORD *)(a2 + 24))
  {
    Constant = 0;
    v14 = *(unsigned __int16 *)(a1 + 24);
    if (a1 && !*(_WORD *)(a1 + 24))
      return Constant;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(v9 + 32);
  if (!v10)
    goto LABEL_17;
  v11 = (llvm::APInt *)(v9 + 24);
  if (v10 <= 0x40)
  {
    v12 = *(_QWORD **)v11;
    if (*(_QWORD *)v11 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v10)
      goto LABEL_21;
LABEL_17:
    __asm { BR              X11 }
  }
  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v9 + 24)) == v10)
    goto LABEL_17;
  if (v10 - llvm::APInt::countLeadingZerosSlowCase(v11) > 0x40)
    goto LABEL_23;
  v12 = **(_QWORD ***)v11;
LABEL_21:
  if (v12 == (_QWORD *)1)
    return a1;
LABEL_23:
  v14 = *(unsigned __int16 *)(a1 + 24);
  Constant = a1;
  if (a1 && !*(_WORD *)(a1 + 24))
  {
    v15 = (llvm::APInt *)(*(_QWORD *)(a1 + 32) + 24);
    llvm::APInt::srem(v15, (const void **)v11, (llvm::APInt *)&__s1);
    if (v71 >= 0x41)
    {
      v32 = 0;
      v33 = ((unint64_t)v71 + 63) >> 6;
      do
      {
        if (v33-- < 1)
          break;
        v35 = *((_QWORD *)__s1 + v33);
        v32 += __clz(v35);
      }
      while (!v35);
      v36 = v71 | 0xFFFFFFC0;
      if ((v71 & 0x3F) == 0)
        v36 = 0;
      if ((v71 - v32 - v36) >= 0x41)
      {
        if (__s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      }
      else
      {
        v37 = *(_QWORD *)__s1;
        MEMORY[0x1CAA32F9C]();
        if (!v37)
        {
LABEL_61:
          llvm::APInt::sdiv(v15, (const void **)v11, (llvm::APInt *)&__s1);
          Constant = llvm::ScalarEvolution::getConstant(a3, (const llvm::APInt *)&__s1, v38);
          if (v71 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          return Constant;
        }
      }
    }
    else if (!__s1)
    {
      goto LABEL_61;
    }
    return 0;
  }
LABEL_11:
  if (v14 == 4)
  {
    if ((a4 & 1) != 0)
    {
LABEL_100:
      __s1 = v72;
      v71 = 0x800000000;
      v54 = *(_QWORD *)(a1 + 40);
      if (!v54)
      {
LABEL_108:
        AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a3, (uint64_t)&__s1, 0, 0);
        goto LABEL_109;
      }
      v55 = *(_QWORD **)(a1 + 32);
      v56 = 8 * v54;
      while (1)
      {
        v57 = sub_1C5B97F8C(*v55, a2, a3, a4);
        if (!v57)
          break;
        v58 = v57;
        v59 = v71;
        if (v71 >= (unint64_t)HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v72, v71 + 1, 8);
          v59 = v71;
        }
        *((_QWORD *)__s1 + v59) = v58;
        LODWORD(v71) = v71 + 1;
        ++v55;
        v56 -= 8;
        if (!v56)
          goto LABEL_108;
      }
LABEL_107:
      Constant = 0;
      goto LABEL_110;
    }
    v23 = ***a3;
    v24 = *(_QWORD *)(a1 + 48);
    v25 = (uint64_t)((*a3)[5] + 34);
    if (*(_BYTE *)(v24 + 8) == 15)
    {
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v25, v24);
    }
    else
    {
      sub_1C4768AD0(v25, v24);
      IndexTypeSizeInBits = v27;
      if ((_DWORD)v26 == 1)
    }
    LODWORD(__s1) = IndexTypeSizeInBits + 1;
    if (IndexTypeSizeInBits <= 62)
    {
      if (IndexTypeSizeInBits <= 30)
      {
        switch(IndexTypeSizeInBits)
        {
          case 15:
            v29 = (llvm::Type *)(*(_QWORD *)v23 + 1936);
            goto LABEL_99;
          case 7:
            v29 = (llvm::Type *)(*(_QWORD *)v23 + 1912);
            goto LABEL_99;
          case 0:
            v29 = (llvm::Type *)(*(_QWORD *)v23 + 1888);
            goto LABEL_99;
        }
      }
      else if (IndexTypeSizeInBits == 31)
      {
        v29 = (llvm::Type *)(*(_QWORD *)v23 + 1960);
        goto LABEL_99;
      }
    }
    else
    {
      if (IndexTypeSizeInBits == 63)
      {
        v29 = (llvm::Type *)(*(_QWORD *)v23 + 1984);
        goto LABEL_99;
      }
      if (IndexTypeSizeInBits == 127)
      {
        v29 = (llvm::Type *)(*(_QWORD *)v23 + 2008);
        goto LABEL_99;
      }
    }
    v62 = sub_1C5270984(*(_QWORD *)v23 + 2168, &__s1);
    v29 = (llvm::Type *)*((_QWORD *)v62 + 1);
    if (!v29)
    {
      v63 = v62;
      v29 = (llvm::Type *)sub_1C484358C(*(_QWORD *)v23 + 2040, 24, 3);
      v64 = (int)__s1;
      *(_QWORD *)v29 = v23;
      *((_QWORD *)v29 + 2) = 0;
      *((_QWORD *)v29 + 1) = (v64 << 8) | 0xDu;
      *((_QWORD *)v63 + 1) = v29;
    }
LABEL_99:
    if (*(_WORD *)(llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)a3, (const llvm::SCEV *)a1, v29, 0)+ 24) != 4)return 0;
    goto LABEL_100;
  }
  if (v14 != 5)
  {
    if (v14 == 7)
    {
      if ((a4 & 1) == 0)
        __asm { BR              X12 }
      if (*(_QWORD *)(a1 + 40) == 2)
      {
        Constant = sub_1C5B97F8C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4);
        if (!Constant)
          return Constant;
        v61 = sub_1C5B97F8C(**(_QWORD **)(a1 + 32), a2, a3, a4);
        if (v61)
          return llvm::ScalarEvolution::getAddRecExpr((uint64_t *)a3, v61, Constant, *(uint64_t ***)(a1 + 48));
      }
    }
    return 0;
  }
  if ((a4 & 1) != 0)
  {
    if (!a2 || v8 != 5)
      goto LABEL_85;
  }
  else
  {
    sub_1C5B98D2C(a1);
    if ((v30 & 1) == 0)
      return 0;
    if (!a2 || *(_WORD *)(a2 + 24) != 5 || (sub_1C5B98D2C(a2), !v31))
    {
LABEL_85:
      __s1 = v72;
      v71 = 0x400000000;
      v46 = *(_QWORD *)(a1 + 40);
      if (v46)
      {
        v47 = 0;
        v48 = 0;
        v49 = *(uint64_t **)(a1 + 32);
        v50 = 8 * v46;
        do
        {
          v51 = *v49;
          if (v48)
          {
            v48 = 1;
          }
          else
          {
            v52 = sub_1C5B97F8C(*v49, a2, a3, a4);
            v48 = v52 != 0;
            if (v52)
              v51 = v52;
            v47 = v71;
          }
          if (v47 >= HIDWORD(v71))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v72, v47 + 1, 8);
            v47 = v71;
          }
          *((_QWORD *)__s1 + v47) = v51;
          v47 = v71 + 1;
          LODWORD(v71) = v71 + 1;
          ++v49;
          v50 -= 8;
        }
        while (v50);
        if (v48)
        {
          AddExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)a3, (uint64_t)&__s1, 0, 0);
LABEL_109:
          Constant = AddExpr;
LABEL_110:
          if (__s1 != v72)
            free(__s1);
          return Constant;
        }
      }
      goto LABEL_107;
    }
  }
  v16 = *(uint64_t **)(a1 + 32);
  if (*(_WORD *)(*v16 + 24))
    v17 = 0;
  else
    v17 = *v16;
  v18 = **(_QWORD **)(a2 + 32);
  if (*(_WORD *)(v18 + 24))
    v18 = 0;
  if (v17)
    v19 = v18 == 0;
  else
    v19 = 1;
  if (v19)
    goto LABEL_85;
  v65 = v18;
  v66 = v17;
  v20 = *(_QWORD *)(a1 + 40);
  __s1 = v72;
  v71 = 0x400000000;
  v21 = 8 * v20 - 8;
  if ((unint64_t)v21 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v72, v21 >> 3, 8);
    v22 = v71;
  }
  else
  {
    v22 = 0;
  }
  if (v20 != 1)
  {
    memcpy((char *)__s1 + 8 * v22, v16 + 1, 8 * v20 - 8);
    v22 = v71;
  }
  LODWORD(v71) = v22 + ((unint64_t)v21 >> 3);
  v39 = *(_QWORD *)(a2 + 32);
  v40 = *(_QWORD *)(a2 + 40);
  v67 = v69;
  v68 = 0x400000000;
  v41 = 8 * v40 - 8;
  if ((unint64_t)v41 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v41 >> 3, 8);
    v42 = v68;
    v43 = v67;
  }
  else
  {
    v42 = 0;
    v43 = v69;
  }
  if (v40 != 1)
  {
    memcpy(&v43[8 * v42], (const void *)(v39 + 8), 8 * v40 - 8);
    v42 = v68;
    v43 = v67;
  }
  v44 = v42 + ((unint64_t)v41 >> 3);
  LODWORD(v68) = v44;
  if ((_DWORD)v71 == v44 && !memcmp(__s1, v43, 8 * v44))
  {
    Constant = sub_1C5B97F8C(v66, v65, a3, a4);
    v45 = 1;
    v43 = v67;
  }
  else
  {
    v45 = 0;
  }
  if (v43 != v69)
    free(v43);
  if (__s1 != v72)
    free(__s1);
  if ((v45 & 1) == 0)
    goto LABEL_85;
  return Constant;
}

uint64_t sub_1C5B989C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;

  v5 = *(unsigned __int8 *)(a2 + 16);
  result = v5 == 60;
  if (a2 && v5 == 61)
  {
    v7 = *(_QWORD *)(a2 - 32);
    return v7 == a3;
  }
  if (v5 != 84)
  {
    if (a2 && v5 == 65)
    {
      v7 = *(_QWORD *)(a2 - 64);
    }
    else
    {
      if (!a2 || v5 != 64)
        return result;
      v7 = *(_QWORD *)(a2 - 96);
    }
    return v7 == a3;
  }
  v8 = *(_QWORD *)(a2 - 32);
  if (!v8 || *(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 24) != *(_QWORD *)(a2 + 72) || (*(_BYTE *)(v8 + 33) & 0x20) == 0)
    return result;
  v9 = (*(_DWORD *)(v8 + 36) - 185);
  if (v9 <= 0x37)
  {
    if (((1 << v9) & 0x80000000004001) != 0)
    {
      v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      return v7 == a3;
    }
    if (((1 << v9) & 0x1200) != 0)
    {
      v10 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (*v10 == a3 || v10[4] == a3)
        return 1;
      return result;
    }
    if (v9 == 2)
    {
      v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      return v7 == a3;
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 992))(a1);
  if (a3)
    return 0;
  else
    return v11;
}

uint64_t sub_1C5B98B48(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v3 = *(_DWORD **)a2;
  switch(*(_BYTE *)(a2 + 16))
  {
    case '<':
    case '>':
    case '?':
    case '@':
    case 'A':
      goto LABEL_13;
    case '=':
      v3 = **(_DWORD ***)(a2 - 64);
      goto LABEL_13;
    default:
      if (*(_BYTE *)(a2 + 16) != 84)
        goto LABEL_13;
      v4 = *(_QWORD *)(a2 - 32);
      if (!v4
        || *(_BYTE *)(v4 + 16)
        || *(_QWORD *)(v4 + 24) != *(_QWORD *)(a2 + 72)
        || (*(_BYTE *)(v4 + 33) & 0x20) == 0)
      {
        goto LABEL_13;
      }
      v5 = *(_DWORD *)(v4 + 36);
      if (v5 > 196)
      {
        if (v5 != 197)
        {
          if (v5 == 240 || v5 == 199)
          {
            v3 = *a3;
            goto LABEL_13;
          }
          goto LABEL_27;
        }
LABEL_24:
        v3 = *a3;
        goto LABEL_13;
      }
      switch(v5)
      {
        case 185:
          goto LABEL_13;
        case 187:
          v3 = **(_DWORD ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          goto LABEL_13;
        case 194:
          goto LABEL_24;
      }
LABEL_27:
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 992))(a1);
LABEL_13:
      if (v3)
        v6 = v3[2] == 15;
      else
        v6 = 0;
      if (v6)
        return llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v3 + 1888), (llvm::Type *)(v3[2] >> 8));
      return (uint64_t)v3;
  }
}

void sub_1C5B98D2C(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_1C5B98D78()
{
  JUMPOUT(0x1C5B98D60);
}

void sub_1C5B98D80()
{
  JUMPOUT(0x1C5B98D60);
}

BOOL sub_1C5B98D88@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  const llvm::SCEV *v2;
  llvm::ScalarEvolution *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int IndexTypeSizeInBits;
  int v11;
  llvm::Type *v12;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;

  v5 = *(uint64_t **)(v1 + 32);
  v6 = *v5;
  v7 = *(_QWORD *)(a1 + 40) + 272;
  if (*(_BYTE *)(*v5 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v7, v6);
  }
  else
  {
    sub_1C4768AD0(v7, v6);
    IndexTypeSizeInBits = v9;
    if ((_DWORD)v8 == 1)
  }
  v11 = *((_DWORD *)v2 + 10) * IndexTypeSizeInBits;
  v17 = v11;
  if (v11 <= 63)
  {
    if (v11 <= 31)
    {
      switch(v11)
      {
        case 16:
          v12 = (llvm::Type *)(*v4 + 1936);
          return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
        case 8:
          v12 = (llvm::Type *)(*v4 + 1912);
          return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
        case 1:
          v12 = (llvm::Type *)(*v4 + 1888);
          return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
      }
    }
    else if (v11 == 32)
    {
      v12 = (llvm::Type *)(*v4 + 1960);
      return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
    }
  }
  else
  {
    if (v11 == 64)
    {
      v12 = (llvm::Type *)(*v4 + 1984);
      return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
    }
    if (v11 == 128)
    {
      v12 = (llvm::Type *)(*v4 + 2008);
      return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
    }
  }
  v14 = sub_1C5270984(*v4 + 2168, &v17);
  v12 = (llvm::Type *)*((_QWORD *)v14 + 1);
  if (!v12)
  {
    v15 = v14;
    v12 = (llvm::Type *)sub_1C484358C(*v4 + 2040, 24, 3);
    v16 = v17;
    *(_QWORD *)v12 = v4;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 1) = (v16 << 8) | 0xDu;
    *((_QWORD *)v15 + 1) = v12;
  }
  return *(unsigned __int16 *)(llvm::ScalarEvolution::getSignExtendExpr(v3, v2, v12, 0) + 24) == 5;
}

unint64_t *sub_1C5B98EFC(unint64_t *a1, unint64_t *a2, uint64_t a3, llvm::ScalarEvolution *this)
{
  unint64_t *v4;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t SCEVIter;
  BOOL v18;

  v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v8 = *v4;
      v9 = *v4 && *(unsigned __int8 *)(*v4 + 16) >= 0x1Cu;
      if (v9 && (*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFD) == 0xD)
        break;
LABEL_24:
      v4 += 4;
      if (v4 == a2)
        return a2;
    }
    v10 = *((_QWORD *)this + 13);
    v11 = *((_DWORD *)this + 30);
    if (v11)
    {
      v12 = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v13 = v10 + 48 * v12;
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 == v8)
      {
LABEL_15:
        if (v13 == v10 + 48 * v11 || (SCEVIter = *(_QWORD *)(v13 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter(this, v8);
        if (SCEVIter)
          v18 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
        else
          v18 = 0;
        if (v18 && *(_QWORD *)(SCEVIter + 48) == a3)
          return v4;
        goto LABEL_24;
      }
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v13 = v10 + 48 * v12;
        v14 = *(_QWORD *)(v13 + 24);
        if (v14 == v8)
          goto LABEL_15;
      }
    }
    v13 = v10 + 48 * v11;
    goto LABEL_15;
  }
  return v4;
}

void sub_1C5B99014(uint64_t *a1, _BYTE *a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t SCEVIter;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  llvm::SCEV *v38;
  llvm::SCEV *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void **v52;
  llvm::Value *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  unsigned int v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void **v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  llvm::SmallPtrSetImplBase *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int8 *v114;
  BOOL v115;
  uint64_t v116;
  unsigned __int8 **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned __int8 *v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v138;
  int v139;
  unsigned int v140;
  void *v141;
  unint64_t v142;
  BOOL v143;
  unint64_t v144;
  BOOL v145;
  char *v146;
  char *v147;
  llvm::Value *v148;
  uint64_t v150;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::Value *v156;
  _QWORD v157[10];

  v157[8] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)a3;
  if (a3)
  {
    v5 = (uint64_t *)a3;
    if (*((_BYTE *)a3 + 16) == 66)
      v5 = (uint64_t *)*((_QWORD *)a3 - 4);
  }
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 104);
  v8 = *(_DWORD *)(v6 + 120);
  if (!v8)
  {
LABEL_10:
    v11 = v7 + 48 * v8;
    goto LABEL_11;
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v11 = v7 + 48 * v10;
  v12 = *(uint64_t **)(v11 + 24);
  if (v12 != v5)
  {
    v13 = 1;
    while (v12 != (uint64_t *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & v9;
      v11 = v7 + 48 * (v14 & v9);
      v12 = *(uint64_t **)(v11 + 24);
      if (v12 == v5)
        goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  v15 = (unsigned int *)(a1 + 3877);
  if (v11 == v7 + 48 * v8 || (SCEVIter = *(_QWORD *)(v11 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, (unint64_t)v5);
  v17 = SCEVIter;
LABEL_15:
  while (2)
  {
    switch(*(_WORD *)(v17 + 24))
    {
      case 0:
        v17 = 0;
        goto LABEL_23;
      case 1:
      case 2:
      case 3:
        v18 = (uint64_t *)(v17 + 32);
        goto LABEL_18;
      case 4:
        v19 = 8 * *(_QWORD *)(v17 + 40);
        break;
      case 7:
        v18 = *(uint64_t **)(v17 + 32);
LABEL_18:
        v17 = *v18;
        continue;
      default:
        goto LABEL_23;
    }
    break;
  }
  while (v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 32) - 8 + v19);
    v21 = *(unsigned __int16 *)(v20 + 24);
    v19 -= 8;
    if (v21 != 5)
    {
      v17 = v20;
      if (v21 == 4)
        goto LABEL_15;
      break;
    }
  }
LABEL_23:
  v150 = SCEVIter;
  v148 = a3;
  v22 = (unint64_t *)(a1 + 3876);
  v23 = *v15;
  if ((_DWORD)v23)
  {
    v24 = 0;
    while (1)
    {
      v25 = *v22 + 48 * v24;
      if (*(_QWORD *)(v25 + 40) != v17)
        goto LABEL_62;
      v26 = *(_QWORD *)v25 + 24 * *(unsigned int *)(v25 + 8);
      v27 = *(_QWORD *)(v26 - 16);
      if (v27 && *(_BYTE *)(v27 + 16) == 66)
        v27 = *(_QWORD *)(v27 - 32);
      if (!sub_1C5B99B7C(*(_QWORD *)v27, *v5) || a2[16] == 83 && *(_BYTE *)(*(_QWORD *)(v26 - 24) + 16) == 83)
        goto LABEL_62;
      v28 = a1[1];
      v29 = *(_QWORD *)(v28 + 104);
      v30 = *(_DWORD *)(v28 + 120);
      if (!v30)
        goto LABEL_38;
      v31 = v30 - 1;
      v32 = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      v33 = v29 + 48 * v32;
      v34 = *(_QWORD *)(v33 + 24);
      if (v34 != v27)
        break;
LABEL_39:
      if (v33 == v29 + 48 * v30 || (v37 = *(_QWORD *)(v33 + 40)) == 0)
      {
        v37 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v28, v27);
        v28 = a1[1];
      }
      llvm::ScalarEvolution::getMinusSCEV(v28, v150, v37);
      if (*((_WORD *)v38 + 12) == 15)
        goto LABEL_62;
      v39 = v38;
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a1[1], v38, (const llvm::Loop *)a1[7]) != 1)goto LABEL_62;
      v40 = a1[1];
      if (*((_WORD *)v39 + 12))
      {
        v41 = *(_QWORD *)(*(_QWORD *)v25 + 8);
        if (v41 && *(_BYTE *)(v41 + 16) == 66)
          v41 = *(_QWORD *)(v41 - 32);
        v42 = *(_QWORD *)(v40 + 104);
        v43 = *(_DWORD *)(v40 + 120);
        if (!v43)
          goto LABEL_54;
        v44 = ((v41 >> 4) ^ (v41 >> 9)) & (v43 - 1);
        v45 = v42 + 48 * v44;
        v46 = *(_QWORD *)(v45 + 24);
        if (v46 != v41)
        {
          v47 = 1;
          while (v46 != -4096)
          {
            v48 = v44 + v47++;
            v44 = v48 & (v43 - 1);
            v45 = v42 + 48 * v44;
            v46 = *(_QWORD *)(v45 + 24);
            if (v46 == v41)
              goto LABEL_55;
          }
LABEL_54:
          v45 = v42 + 48 * v43;
        }
LABEL_55:
        if (v45 == v42 + 48 * v43 || (v49 = *(_QWORD *)(v45 + 40)) == 0)
          v49 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1[1], v41);
        llvm::ScalarEvolution::getMinusSCEV(v40, v150, v49);
        if (!*(_WORD *)(v50 + 24))
          goto LABEL_62;
      }
      v153 = v157;
      v154 = (uint64_t)v157;
      v155 = 8;
      LODWORD(v156) = 0;
      v51 = sub_1C5B99BF4((uint64_t)v39, (llvm::SmallPtrSetImplBase *)&v153, v40);
      if ((void *)v154 != v153)
        free((void *)v154);
      if (!v51)
        goto LABEL_65;
LABEL_62:
      if (++v24 == v23)
        goto LABEL_66;
    }
    v35 = 1;
    while (v34 != -4096)
    {
      v36 = v32 + v35++;
      v32 = v36 & v31;
      v33 = v29 + 48 * (v36 & v31);
      v34 = *(_QWORD *)(v33 + 24);
      if (v34 == v27)
        goto LABEL_39;
    }
LABEL_38:
    v33 = v29 + 48 * v30;
    goto LABEL_39;
  }
  LODWORD(v24) = 0;
  v39 = 0;
LABEL_65:
  if ((_DWORD)v24 != (_DWORD)v23)
  {
    v62 = *v22 + 48 * v24;
    v53 = v148;
    v153 = a2;
    v154 = (uint64_t)v148;
    v155 = (uint64_t)v39;
    v63 = *(unsigned int *)(v62 + 8);
    v64 = *(_QWORD *)v62;
    v65 = &v153;
    if (v63 >= *(_DWORD *)(v62 + 12))
    {
      v144 = v63 + 1;
      v145 = v64 + 24 * v63 > (unint64_t)&v153;
      if (v64 <= (unint64_t)&v153 && v145)
      {
        v147 = (char *)&v153 - v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v62, v62 + 16, v144, 24);
        v64 = *(_QWORD *)v62;
        v65 = (void **)&v147[*(_QWORD *)v62];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v62, v62 + 16, v144, 24);
        v64 = *(_QWORD *)v62;
        v65 = &v153;
      }
    }
    v66 = v64 + 24 * *(unsigned int *)(v62 + 8);
    v67 = *(_OWORD *)v65;
    *(_QWORD *)(v66 + 16) = v65[2];
    *(_OWORD *)v66 = v67;
    ++*(_DWORD *)(v62 + 8);
    v68 = (_QWORD *)a4;
    goto LABEL_114;
  }
LABEL_66:
  if (v23 > 7 || a2[16] == 83 || *(_WORD *)(v150 + 24) != 7)
    return;
  v52 = &v153;
  v153 = &v155;
  v53 = v148;
  v155 = (uint64_t)a2;
  v156 = v148;
  v154 = 0x100000001;
  v157[0] = v150;
  v157[1] = v17;
  v54 = *v15;
  v55 = a1[3876];
  if (v54 >= *((_DWORD *)a1 + 7755))
  {
    v142 = v54 + 1;
    v143 = v55 + 48 * v54 > (unint64_t)&v153;
    if (v55 <= (unint64_t)&v153 && v143)
    {
      v146 = (char *)&v153 - v55;
      sub_1C5B99FD8((uint64_t)v22, v142);
      v55 = *v22;
      v52 = (void **)&v146[*v22];
    }
    else
    {
      sub_1C5B99FD8((uint64_t)v22, v142);
      v55 = *v22;
      v52 = &v153;
    }
  }
  v56 = *v15;
  v57 = v55 + 48 * *v15;
  v58 = (void *)(v57 + 16);
  *(_QWORD *)v57 = v57 + 16;
  *(_QWORD *)(v57 + 8) = 0x100000000;
  v59 = *((_DWORD *)v52 + 2);
  if ((void **)v57 != v52 && v59 != 0)
  {
    v61 = *v52;
    if (*v52 != v52 + 2)
    {
      *(_QWORD *)v57 = v61;
      *(_DWORD *)(v57 + 8) = v59;
      *(_DWORD *)(v57 + 12) = *((_DWORD *)v52 + 3);
      *v52 = v52 + 2;
      *((_DWORD *)v52 + 3) = 0;
LABEL_85:
      *((_DWORD *)v52 + 2) = 0;
      goto LABEL_86;
    }
    if (v59 < 2)
    {
      v69 = 1;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v55 + 48 * v56, v57 + 16, *((unsigned int *)v52 + 2), 24);
      v69 = *((_DWORD *)v52 + 2);
      if (!v69)
      {
LABEL_84:
        *(_DWORD *)(v57 + 8) = v59;
        goto LABEL_85;
      }
      v61 = *v52;
      v58 = *(void **)v57;
    }
    memcpy(v58, v61, 24 * v69);
    goto LABEL_84;
  }
LABEL_86:
  *(_QWORD *)(v55 + 48 * v56 + 40) = v52[5];
  ++*v15;
  if (v153 != &v155)
    free(v153);
  v70 = v23 + 1;
  v68 = (_QWORD *)a4;
  v71 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v71 == (_DWORD)v23 + 1)
    goto LABEL_91;
  if (v71 > (int)v23 + 1)
  {
    sub_1C5B9A158(*(_QWORD *)a4 + (v70 << 7), *(_QWORD *)a4 + (v71 << 7));
    *(_DWORD *)(a4 + 8) = v70;
LABEL_91:
    v39 = (llvm::SCEV *)v150;
    LODWORD(v24) = v23;
    goto LABEL_114;
  }
  if (*(_DWORD *)(a4 + 12) <= v23)
  {
    v153 = 0;
    v72 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a4, v23 + 1, 128, (unint64_t *)&v153);
    v73 = *(_QWORD *)a4;
    v74 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v74)
    {
      v75 = 0;
      v76 = v74 << 7;
      do
      {
        v77 = v73 + v75;
        v78 = &v72[v75];
        v79 = &v72[v75 + 32];
        *(_QWORD *)&v72[v75] = v79;
        v81 = *(_QWORD *)(v73 + v75);
        v80 = *(_QWORD *)(v73 + v75 + 8);
        if (v80 == v81)
        {
          *((_QWORD *)v78 + 1) = v79;
          v82 = *(unsigned int *)(v77 + 20);
          if ((_DWORD)v82)
            memmove(v79, *(const void **)(v77 + 8), 8 * v82);
        }
        else
        {
          *((_QWORD *)v78 + 1) = v80;
          *(_QWORD *)(v77 + 8) = v81;
        }
        v83 = v73 + v75;
        v84 = &v72[v75];
        *((_QWORD *)v84 + 2) = *(_QWORD *)(v73 + v75 + 16);
        *((_DWORD *)v84 + 6) = *(_DWORD *)(v73 + v75 + 24);
        *(_QWORD *)(v83 + 16) = 4;
        *(_DWORD *)(v83 + 24) = 0;
        v85 = &v72[v75 + 96];
        *((_QWORD *)v84 + 8) = v85;
        v87 = *(_QWORD *)(v73 + v75 + 64);
        v86 = *(_QWORD *)(v73 + v75 + 72);
        if (v86 == v87)
        {
          *((_QWORD *)v84 + 9) = v85;
          v88 = *(unsigned int *)(v83 + 84);
          if ((_DWORD)v88)
            memmove(v85, *(const void **)(v83 + 72), 8 * v88);
        }
        else
        {
          *((_QWORD *)v84 + 9) = v86;
          *(_QWORD *)(v83 + 72) = v87;
        }
        v89 = v73 + v75;
        v90 = &v72[v75];
        *((_QWORD *)v90 + 10) = *(_QWORD *)(v73 + v75 + 80);
        *((_DWORD *)v90 + 22) = *(_DWORD *)(v73 + v75 + 88);
        *(_QWORD *)(v89 + 80) = 4;
        *(_DWORD *)(v89 + 88) = 0;
        v75 += 128;
      }
      while (v76 != v75);
      v73 = *(_QWORD *)a4;
      v91 = *(unsigned int *)(a4 + 8);
    }
    else
    {
      v91 = 0;
    }
    sub_1C5B9A158(v73, v73 + (v91 << 7));
    v92 = (int)v153;
    if (*(_QWORD *)a4 != a4 + 16)
      free(*(void **)a4);
    *(_QWORD *)a4 = v72;
    *(_DWORD *)(a4 + 12) = v92;
    v71 = *(unsigned int *)(a4 + 8);
    v53 = v148;
  }
  else
  {
    v72 = *(char **)a4;
  }
  if ((_DWORD)v71 != (_DWORD)v70)
  {
    v93 = v71 << 7;
    v94 = v70 << 7;
    do
    {
      v95 = &v72[v93];
      *(_OWORD *)(v95 + 56) = 0uLL;
      *(_OWORD *)(v95 + 72) = 0uLL;
      *((_QWORD *)v95 + 15) = 0;
      *(_OWORD *)(v95 + 104) = 0uLL;
      *(_OWORD *)(v95 + 88) = 0uLL;
      *(_OWORD *)(v95 + 40) = 0uLL;
      *(_OWORD *)(v95 + 24) = 0uLL;
      v96 = (uint64_t)&v72[v93 + 32];
      *(_QWORD *)v95 = v96;
      *((_QWORD *)v95 + 1) = v96;
      *((_QWORD *)v95 + 2) = 4;
      v97 = (uint64_t)&v72[v93 + 96];
      *((_QWORD *)v95 + 8) = v97;
      *((_QWORD *)v95 + 9) = v97;
      v94 -= 128;
      v72 += 128;
      *((_DWORD *)v95 + 20) = 4;
    }
    while (v93 != v94);
  }
  *(_DWORD *)(a4 + 8) = v70;
  LODWORD(v24) = v23;
  v39 = (llvm::SCEV *)v150;
LABEL_114:
  v98 = v24;
  v99 = *v22;
  v100 = *v68 + ((unint64_t)v24 << 7);
  v101 = (llvm::SmallPtrSetImplBase *)(v100 + 64);
  if (!llvm::SCEV::isZero(v39))
  {
    v103 = *(char **)v101;
    v102 = *(char **)(v100 + 72);
    v104 = 16;
    if (v102 == *(char **)v101)
      v104 = 20;
    v105 = *(unsigned int *)((char *)v101 + v104);
    v106 = *(uint64_t **)(v100 + 72);
    if ((_DWORD)v105)
    {
      v107 = 0;
      while (*(_QWORD *)&v102[v107] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v107 += 8;
        if (8 * v105 == v107)
          goto LABEL_130;
      }
      v106 = (uint64_t *)&v102[v107];
    }
    v108 = &v102[8 * v105];
    if (v106 != (uint64_t *)v108)
    {
      v109 = *v106;
LABEL_125:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v100, v109);
      v110 = (unint64_t *)(v106 + 1);
      while (v110 != (unint64_t *)v108)
      {
        v111 = *v110++;
        v109 = v111;
        if (v111 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v106 = (uint64_t *)(v110 - 1);
          goto LABEL_125;
        }
      }
      v103 = *(char **)v101;
      v102 = *(char **)(v100 + 72);
    }
LABEL_130:
    if (v102 != v103)
    {
      v136 = *(unsigned int *)(v100 + 80);
      if (v136 >= 0x21 && 4 * (*(_DWORD *)(v100 + 84) - *(_DWORD *)(v100 + 88)) < v136)
      {
        free(v102);
        v138 = *(_DWORD *)(v100 + 84) - *(_DWORD *)(v100 + 88);
        v139 = 1 << (33 - __clz(v138 - 1));
        *(_DWORD *)(v100 + 84) = 0;
        *(_DWORD *)(v100 + 88) = 0;
        if (v138 <= 0x10)
          v140 = 32;
        else
          v140 = v139;
        *(_DWORD *)(v100 + 80) = v140;
        v141 = malloc_type_malloc(8 * v140, 0x4065EBACuLL);
        if (!v141)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *(_QWORD *)(v100 + 72) = v141;
        memset(v141, 255, 8 * *(unsigned int *)(v100 + 80));
        goto LABEL_132;
      }
      memset(v102, 255, 8 * v136);
    }
    *(_DWORD *)(v100 + 84) = 0;
    *(_DWORD *)(v100 + 88) = 0;
  }
LABEL_132:
  v112 = *((_QWORD *)v53 + 1);
  if (v112)
  {
    v113 = v99 + 48 * v24;
    while (1)
    {
      v114 = *(unsigned __int8 **)(v112 + 24);
      if (v114)
        v115 = v114[16] >= 0x1Cu;
      else
        v115 = 0;
      if (!v115)
        goto LABEL_160;
      v116 = *(unsigned int *)(v113 + 8);
      if ((_DWORD)v116)
      {
        v117 = *(unsigned __int8 ***)v113;
        v118 = 24 * v116;
        while (*v117 != v114)
        {
          v117 += 3;
          v118 -= 24;
          if (!v118)
            goto LABEL_143;
        }
        goto LABEL_160;
      }
LABEL_143:
      if ((*(_DWORD *)(*(_QWORD *)v114 + 8) & 0xFD) == 0xD)
        break;
LABEL_159:
      sub_1C4774094(v101, (uint64_t)v114);
LABEL_160:
      v112 = *(_QWORD *)(v112 + 8);
      if (!v112)
        goto LABEL_161;
    }
    v119 = a1[1];
    v120 = *(_QWORD *)(v119 + 104);
    v121 = *(_DWORD *)(v119 + 120);
    if (v121)
    {
      v122 = (v121 - 1) & ((v114 >> 4) ^ (v114 >> 9));
      v123 = v120 + 48 * v122;
      v124 = *(unsigned __int8 **)(v123 + 24);
      if (v124 == v114)
      {
LABEL_151:
        if (v123 == v120 + 48 * v121 || (v127 = *(_QWORD *)(v123 + 40)) == 0)
          v127 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v119, *(_QWORD *)(v112 + 24));
        if (*(_WORD *)(v127 + 24) != 14)
        {
          v128 = *a1;
          v129 = sub_1C477672C(*a1 + 40, (uint64_t)v114);
          v130 = *(_QWORD *)(v128 + 48);
          v131 = v130 == *(_QWORD *)(v128 + 40) ? 60 : 56;
          if (v129 != (_QWORD *)(v130 + 8 * *(unsigned int *)(v128 + v131)))
            goto LABEL_160;
        }
        goto LABEL_159;
      }
      v125 = 1;
      while (v124 != (unsigned __int8 *)-4096)
      {
        v126 = v122 + v125++;
        v122 = v126 & (v121 - 1);
        v123 = v120 + 48 * v122;
        v124 = *(unsigned __int8 **)(v123 + 24);
        if (v124 == v114)
          goto LABEL_151;
      }
    }
    v123 = v120 + 48 * v121;
    goto LABEL_151;
  }
LABEL_161:
  v132 = *(_QWORD *)a4 + (v98 << 7);
  v133 = sub_1C477672C(v132, (uint64_t)a2);
  v134 = *(_QWORD *)(v132 + 8);
  v135 = 16;
  if (v134 == *(_QWORD *)v132)
    v135 = 20;
  if (v133 != (_QWORD *)(v134 + 8 * *(unsigned int *)(v132 + v135)))
  {
    *v133 = -2;
    ++*(_DWORD *)(v132 + 24);
  }
}

BOOL sub_1C5B99B7C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;

  if (a1 == a2)
    return 1;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 15)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 != 15)
    return 0;
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  return (v3 ^ v2) < 0x100;
}

uint64_t sub_1C5B99BF4(uint64_t a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  unsigned int v27;
  uint64_t SCEVIter;

  while (2)
  {
    result = 0;
    switch(*(_WORD *)(a1 + 24))
    {
      case 0:
        return result;
      case 1:
      case 2:
      case 3:
        v7 = (uint64_t *)(a1 + 32);
        goto LABEL_8;
      default:
        if (*(_WORD *)(a1 + 24) == 14)
          return result;
        sub_1C4774094(a2, a1);
        if (!v8)
          return 0;
        v9 = *(unsigned __int16 *)(a1 + 24);
        if (v9 != 5)
        {
          if (v9 == 7)
          {
            if ((sub_1C5B99DE4(a1, a3) & 1) != 0)
              return 0;
          }
          else if (v9 == 4)
          {
            v12 = *(_QWORD *)(a1 + 40);
            if (v12)
            {
              v13 = *(uint64_t **)(a1 + 32);
              v14 = 8 * v12 - 8;
              do
              {
                v15 = *v13++;
                result = sub_1C5B99BF4(v15, a2, a3);
                if ((result & 1) != 0)
                  break;
                v16 = v14;
                v14 -= 8;
              }
              while (v16);
              return result;
            }
            return 0;
          }
          return 1;
        }
        if (*(_QWORD *)(a1 + 40) != 2)
          return 1;
        v10 = *(uint64_t **)(a1 + 32);
        v11 = *v10;
        v7 = v10 + 1;
        if (!*(_WORD *)(v11 + 24))
        {
LABEL_8:
          a1 = *v7;
          continue;
        }
        v17 = *v7;
        if (v17)
          v18 = *(unsigned __int16 *)(v17 + 24) == 14;
        else
          v18 = 0;
        if (!v18)
          return 1;
        v19 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 8);
        if (!v19)
          return 1;
        while (1)
        {
          v20 = *(_BYTE **)(v19 + 24);
          if (v20)
          {
            if (v20[16] == 45 && (*(_DWORD *)(*(_QWORD *)v20 + 8) & 0xFD) == 0xD)
              break;
          }
          v19 = *(_QWORD *)(v19 + 8);
          if (!v19)
            return 1;
        }
        v21 = *(_QWORD *)(a3 + 104);
        v22 = *(_DWORD *)(a3 + 120);
        if (v22)
        {
          v23 = (v22 - 1) & ((v20 >> 4) ^ (v20 >> 9));
          v24 = v21 + 48 * v23;
          v25 = *(_BYTE **)(v24 + 24);
          if (v25 != v20)
          {
            v26 = 1;
            while (v25 != (_BYTE *)-4096)
            {
              v27 = v23 + v26++;
              v23 = v27 & (v22 - 1);
              v24 = v21 + 48 * v23;
              v25 = *(_BYTE **)(v24 + 24);
              if (v25 == v20)
                goto LABEL_37;
            }
            goto LABEL_36;
          }
        }
        else
        {
LABEL_36:
          v24 = v21 + 48 * v22;
        }
LABEL_37:
        if (v24 == v21 + 48 * v22 || (SCEVIter = *(_QWORD *)(v24 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a3, (unint64_t)v20);
        return SCEVIter == a1;
    }
  }
}

uint64_t sub_1C5B99DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 32);
  if (*(_QWORD *)(v2 + 40) == v2 + 40)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(v2 + 48);
  v6 = v5 - 24;
  if (v5)
    v7 = v5 - 24;
  else
    v7 = 0;
  if (v5 && *(_BYTE *)(v7 + 16) == 83)
  {
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFD) == 0xD)
      {
        if (*(_DWORD *)(*(_QWORD *)v6 + 8) != 13)
          llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 272), *(llvm::Type **)v6);
        __asm { BR              X10 }
      }
      result = 0;
      v8 = *(_QWORD *)(v6 + 32);
      v6 = v8 - 24;
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
    }
    while (v8 && *(_BYTE *)(v9 + 16) == 83);
  }
  return result;
}

void sub_1C5B99FD8(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v21);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v5)
    goto LABEL_21;
  v6 = 0;
  v7 = 48 * v5;
  do
  {
    v8 = &v3[v6];
    v9 = &v4[v6];
    v10 = &v3[v6 + 16];
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = 0x100000000;
    if (v4 != v3)
    {
      v11 = *((_DWORD *)v9 + 2);
      if (v11)
      {
        v12 = &v4[v6];
        v14 = (uint64_t)&v4[v6 + 16];
        v13 = *(const void **)&v4[v6];
        if ((const void *)v14 != v13)
        {
          *(_QWORD *)v8 = v13;
          v15 = *((_DWORD *)v12 + 3);
          *((_DWORD *)v8 + 2) = v11;
          *((_DWORD *)v8 + 3) = v15;
          *(_QWORD *)v12 = v14;
          *((_DWORD *)v12 + 3) = 0;
LABEL_13:
          *((_DWORD *)v9 + 2) = 0;
          goto LABEL_14;
        }
        if (v11 < 2)
        {
          v16 = 1;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3[v6], (uint64_t)&v3[v6 + 16], *((unsigned int *)v9 + 2), 24);
          v16 = *((unsigned int *)v9 + 2);
          if (!(_DWORD)v16)
          {
LABEL_12:
            *((_DWORD *)v8 + 2) = v11;
            goto LABEL_13;
          }
          v13 = *(const void **)v9;
          v10 = *(char **)v8;
        }
        memcpy(v10, v13, 24 * v16);
        goto LABEL_12;
      }
    }
LABEL_14:
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    v6 += 48;
  }
  while (v7 != v6);
  v4 = *(char **)a1;
  v17 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v17)
  {
    v18 = 48 * v17;
    do
    {
      v19 = *(char **)&v4[v18 - 48];
      if (&v4[v18 - 32] != v19)
        free(v19);
      v18 -= 48;
    }
    while (v18);
    v4 = *(char **)a1;
  }
LABEL_21:
  v20 = v21;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v20;
}

void sub_1C5B9A158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 56);
      if (v4 != *(void **)(v2 - 64))
        free(v4);
      v5 = *(void **)(v2 - 120);
      if (v5 != *(void **)(v2 - 128))
        free(v5);
      v2 -= 128;
    }
    while (v2 != a1);
  }
}

unint64_t sub_1C5B9A1AC(uint64_t a1, unint64_t *a2, unsigned int a3, _QWORD **a4, uint64_t a5)
{
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  unsigned int *v23;
  int *v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  char *v30;
  int v31;
  int v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  char *v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t *v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  char *v86;
  uint64_t *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  unint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  _QWORD **v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  _OWORD v105[37];
  __int16 v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD v110[147];
  int v111;
  _QWORD v112[6];

  v112[4] = *MEMORY[0x1E0C80C00];
  v10 = (_DWORD *)(a1 + 31576);
  v11 = *a2;
  v12 = sub_1C5B9ABA4(a2, *(uint64_t **)(a1 + 8));
  if (v12 && (sub_1C5B9B008(**(_QWORD **)(a1 + 48), a3) & 1) == 0)
  {
    v12 = 0;
    *a2 = v11;
  }
  v13 = *a2 & 0xFFFFFFFFFFFFFFF9 | (2 * a3);
  v14 = v10[2];
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 31568);
    v16 = (v14 - 1) & ((v13 >> 9) ^ v13);
    v17 = (unint64_t *)(v15 + 16 * v16);
    v18 = *v17;
    if (v13 == *v17)
    {
LABEL_6:
      v19 = v17[1];
      if ((sub_1C5B9AE04(a1, *(_QWORD *)(a1 + 360) + 1904 * v19, v12, 1, a3, a4, a5) & 1) != 0)
        return v19;
      goto LABEL_15;
    }
    v67 = 0;
    v68 = 1;
    while (v18 != -2)
    {
      if (v67)
        v69 = 0;
      else
        v69 = v18 == -16;
      if (v69)
        v67 = v17;
      v70 = v16 + v68++;
      v16 = v70 & (v14 - 1);
      v17 = (unint64_t *)(v15 + 16 * v16);
      v18 = *v17;
      if (v13 == *v17)
        goto LABEL_6;
    }
    if (v67)
      v17 = v67;
  }
  else
  {
    v17 = 0;
  }
  v20 = (_QWORD *)(a1 + 31568);
  if (4 * *v10 + 4 >= 3 * v14)
  {
    sub_1C5B9B0C8(a1 + 31568, 2 * v14);
    v75 = v10[2] - 1;
    v76 = v75 & ((v13 >> 9) ^ v13);
    v17 = (unint64_t *)(*v20 + 16 * v76);
    v77 = *v17;
    if (v13 == *v17)
    {
LABEL_74:
      v21 = v13;
      goto LABEL_12;
    }
    v78 = 0;
    v79 = 1;
    while (v77 != -2)
    {
      if (v78)
        v80 = 0;
      else
        v80 = v77 == -16;
      if (v80)
        v78 = v17;
      v81 = v76 + v79++;
      v76 = v81 & v75;
      v17 = (unint64_t *)(*v20 + 16 * v76);
      v77 = *v17;
      if (v13 == *v17)
        goto LABEL_74;
    }
LABEL_96:
    if (v78)
      v17 = v78;
    goto LABEL_11;
  }
  if (v14 + ~*v10 - v10[1] <= v14 >> 3)
  {
    sub_1C5B9B0C8(a1 + 31568, v14);
    v82 = v10[2] - 1;
    v83 = v82 & ((v13 >> 9) ^ v13);
    v17 = (unint64_t *)(*v20 + 16 * v83);
    v84 = *v17;
    if (v13 == *v17)
      goto LABEL_74;
    v78 = 0;
    v88 = 1;
    while (v84 != -2)
    {
      if (v78)
        v89 = 0;
      else
        v89 = v84 == -16;
      if (v89)
        v78 = v17;
      v90 = v83 + v88++;
      v83 = v90 & v82;
      v17 = (unint64_t *)(*v20 + 16 * v83);
      v84 = *v17;
      if (v13 == *v17)
        goto LABEL_74;
    }
    goto LABEL_96;
  }
LABEL_11:
  v21 = *v17;
LABEL_12:
  ++*v10;
  if (v21 != -2)
    --v10[1];
  *v17 = v13;
  v17[1] = 0;
LABEL_15:
  v19 = *(unsigned int *)(a1 + 368);
  v22 = &v104;
  v23 = &v100;
  v17[1] = v19;
  v24 = &v99;
  v25 = (_DWORD *)&v98 + 1;
  v26 = &v98;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = a3;
  v101 = a4;
  v102 = a5;
  v27 = &v97;
  v103 = v105;
  v104 = 0x800000000;
  v105[36] = xmmword_1C866A340;
  v106 = 1;
  v107 = 0;
  v108 = v110;
  v109 = 0xC00000000;
  v110[144] = v112;
  v110[145] = v112;
  v110[146] = 4;
  v111 = 0;
  v28 = *(uint64_t **)(a1 + 360);
  if (v19 >= *(_DWORD *)(a1 + 372))
  {
    v46 = v28 <= &v97 && &v28[238 * v19] > &v97;
    v92 = v46;
    if (v46)
      v47 = 0xD946FDD946FDD947 * (((char *)&v97 - (char *)v28) >> 4);
    else
      v47 = -1;
    v91 = v47;
    v96 = 0;
    v28 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 360, v19 + 1, 1904, &v96);
    v48 = *(_QWORD *)(a1 + 360);
    v49 = *(_DWORD *)(a1 + 368);
    if (v49)
    {
      v50 = 0;
      v93 = 1904 * v49;
      v94 = *(_QWORD *)(a1 + 360);
      do
      {
        v51 = v48 + v50;
        v95 = v50;
        v52 = (char *)v28 + v50;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
        *((_DWORD *)v52 + 4) = 0;
        *(_QWORD *)v52 = *(_QWORD *)v51;
        *(_QWORD *)v51 = 0;
        *((_DWORD *)v52 + 2) = *(_DWORD *)(v51 + 8);
        *(_DWORD *)(v51 + 8) = 0;
        v53 = *((_DWORD *)v52 + 3);
        *((_DWORD *)v52 + 3) = *(_DWORD *)(v51 + 12);
        *(_DWORD *)(v51 + 12) = v53;
        v54 = *((_DWORD *)v52 + 4);
        *((_DWORD *)v52 + 4) = *(_DWORD *)(v51 + 16);
        *(_DWORD *)(v51 + 16) = v54;
        v55 = *(_OWORD *)(v51 + 24);
        v56 = *(_DWORD *)(v51 + 40);
        *((_QWORD *)v52 + 6) = v52 + 64;
        *((_DWORD *)v52 + 10) = v56;
        *(_OWORD *)(v52 + 24) = v55;
        *((_QWORD *)v52 + 7) = 0x800000000;
        if (*(_DWORD *)(v51 + 56))
          sub_1C5B9B324((uint64_t)(v52 + 48), (uint64_t *)(v51 + 48));
        v57 = *(_OWORD *)(v51 + 656);
        *((_OWORD *)v52 + 40) = *(_OWORD *)(v51 + 640);
        *((_OWORD *)v52 + 41) = v57;
        *((_QWORD *)v52 + 84) = v52 + 688;
        *((_QWORD *)v52 + 85) = 0xC00000000;
        v48 = v94;
        if (*(_DWORD *)(v51 + 680))
        {
          sub_1C5B9B7A0((uint64_t)(v52 + 672), v94 + v95 + 672);
          v48 = v94;
        }
        v58 = (char *)v28 + v95;
        v59 = v48 + v95;
        v60 = (char *)v28 + v95 + 1872;
        *(uint64_t *)((char *)v28 + v95 + 1840) = (uint64_t)v60;
        v61 = *(_QWORD *)(v48 + v95 + 1848);
        v62 = *(_QWORD *)(v48 + v95 + 1840);
        if (v61 == v62)
        {
          *((_QWORD *)v58 + 231) = v60;
          v63 = *(unsigned int *)(v59 + 1860);
          if ((_DWORD)v63)
          {
            v64 = v48;
            memmove(v60, *(const void **)(v59 + 1848), 8 * v63);
            v48 = v64;
          }
        }
        else
        {
          *((_QWORD *)v58 + 231) = v61;
          *(_QWORD *)(v59 + 1848) = v62;
        }
        v65 = v48 + v95;
        v66 = (char *)v28 + v95;
        *((_QWORD *)v66 + 232) = *(_QWORD *)(v48 + v95 + 1856);
        *((_DWORD *)v66 + 466) = *(_DWORD *)(v48 + v95 + 1864);
        *(_QWORD *)(v65 + 1856) = 4;
        *(_DWORD *)(v65 + 1864) = 0;
        v50 = v95 + 1904;
      }
      while (v93 != v95 + 1904);
      v71 = *(char **)(a1 + 360);
      v72 = *(_DWORD *)(a1 + 368);
      if (v72)
      {
        v73 = 1904 * v72;
        v74 = v71 - 1904;
        do
        {
          sub_1C5B9AF24((uint64_t)&v74[v73]);
          v73 -= 1904;
        }
        while (v73);
        v71 = *(char **)(a1 + 360);
      }
    }
    else
    {
      v71 = *(char **)(a1 + 360);
    }
    v22 = &v104;
    v85 = v96;
    if (v71 != (char *)(a1 + 376))
    {
      free(v71);
      v22 = &v104;
    }
    *(_QWORD *)(a1 + 360) = v28;
    *(_DWORD *)(a1 + 372) = v85;
    v86 = (char *)&v28[238 * v91];
    if (v92)
      v27 = &v28[238 * v91];
    else
      v27 = &v97;
    if (v92)
    {
      v22 = (uint64_t *)(v86 + 56);
      v23 = (unsigned int *)(v86 + 24);
      v24 = (int *)(v86 + 16);
      v25 = v86 + 12;
    }
    v87 = (uint64_t *)(v86 + 8);
    if (v92)
      v26 = v87;
    v29 = *(_DWORD *)(a1 + 368);
  }
  else
  {
    v29 = v19;
  }
  v30 = (char *)&v28[238 * v29];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  *((_DWORD *)v30 + 4) = 0;
  *(_QWORD *)v30 = *v27;
  *v27 = 0;
  *((_DWORD *)v30 + 2) = *(_DWORD *)v26;
  *(_DWORD *)v26 = 0;
  v31 = *((_DWORD *)v30 + 3);
  *((_DWORD *)v30 + 3) = *v25;
  *v25 = v31;
  v32 = *((_DWORD *)v30 + 4);
  *((_DWORD *)v30 + 4) = *v24;
  *v24 = v32;
  v33 = *(_OWORD *)v23;
  v34 = v23[4];
  *((_QWORD *)v30 + 6) = v30 + 64;
  v35 = (uint64_t)(v30 + 48);
  *(_DWORD *)(v35 - 8) = v34;
  *(_OWORD *)(v35 - 24) = v33;
  *(_QWORD *)(v35 + 8) = 0x800000000;
  if (*(_DWORD *)v22)
    sub_1C5B9B324(v35, v27 + 6);
  v36 = (char *)&v28[238 * v29];
  v37 = *((_OWORD *)v27 + 41);
  *((_OWORD *)v36 + 40) = *((_OWORD *)v27 + 40);
  *((_OWORD *)v36 + 41) = v37;
  *((_QWORD *)v36 + 84) = v36 + 688;
  *((_QWORD *)v36 + 85) = 0xC00000000;
  if (*((_DWORD *)v27 + 170))
    sub_1C5B9B7A0((uint64_t)(v36 + 672), (uint64_t)(v27 + 84));
  v38 = (char *)&v28[238 * v29];
  v39 = v38 + 1840;
  v40 = v38 + 1872;
  *((_QWORD *)v38 + 230) = v38 + 1872;
  v41 = v27[231];
  v42 = v27[230];
  if (v41 == v42)
  {
    *((_QWORD *)v39 + 1) = v40;
    v43 = *((unsigned int *)v27 + 465);
    if ((_DWORD)v43)
      memmove(v40, (const void *)v27[231], 8 * v43);
  }
  else
  {
    *((_QWORD *)v39 + 1) = v41;
    v27[231] = v42;
  }
  *((_QWORD *)v39 + 2) = v27[232];
  *((_DWORD *)v39 + 6) = *((_DWORD *)v27 + 466);
  v27[232] = 4;
  *((_DWORD *)v27 + 466) = 0;
  ++*(_DWORD *)(a1 + 368);
  sub_1C5B9AF24((uint64_t)&v97);
  *(int64x2_t *)(*(_QWORD *)(a1 + 360) + 1904 * v19 + 640) = vdupq_n_s64(v12);
  return v19;
}

uint64_t sub_1C5B9A8F8(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = (_QWORD *)(a1 + 48);
  v17 = 0u;
  v18 = 0u;
  v14 = 0u;
  v15 = &v18;
  v16 = &v18;
  LODWORD(v17) = 2;
  v19 = 0;
  v3 = sub_1C5B9BC78(a1 + 48, (unint64_t)&v14);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 56);
  v6 = v4 + 72 * v5;
  *(_OWORD *)v6 = *(_OWORD *)v3;
  v7 = (void *)(v6 + 48);
  *(_QWORD *)(v6 + 16) = v6 + 48;
  v8 = v6 + 16;
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  if (v9 == v10)
  {
    *(_QWORD *)(v8 + 8) = v7;
    v11 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v11)
      memmove(v7, *(const void **)(v3 + 24), 8 * v11);
  }
  else
  {
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)(v3 + 24) = v10;
  }
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 32) = 2;
  *(_DWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v4 + 72 * v5 + 64) = *(_QWORD *)(v3 + 64);
  v12 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 56) = v12;
  if (v16 != v15)
  {
    free(v16);
    v12 = *(_DWORD *)(a1 + 56);
  }
  return *v2 + 72 * v12 - 72;
}

BOOL sub_1C5B9AA10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  if (*a1 && *(_BYTE *)(v3 + 16) == 83)
  {
    v4 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
    if ((_DWORD)v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = 32 * v4;
      while (1)
      {
        v9 = *(_DWORD *)(v3 + 20);
        v10 = (v9 & 0x40000000) != 0 ? *(_QWORD *)(v3 - 8) : v3 - 32 * (v9 & 0x7FFFFFF);
        if (*(_QWORD *)(v10 + v7) == a1[1])
        {
          v11 = sub_1C477672C(a2 + 56, *(_QWORD *)(v10 + 32 * *(unsigned int *)(v3 + 60) + v6));
          v12 = *(_QWORD *)(a2 + 64);
          v13 = v12 == *(_QWORD *)(a2 + 56) ? 76 : 72;
          if (v11 != (_QWORD *)(v12 + 8 * *(unsigned int *)(a2 + v13)))
            break;
        }
        v7 += 32;
        v6 += 8;
        if (v8 == v7)
          return 1;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v15 = sub_1C477672C(a2 + 56, *(_QWORD *)(v3 + 40));
    v16 = *(_QWORD *)(a2 + 64);
    v17 = 72;
    if (v16 == *(_QWORD *)(a2 + 56))
      v17 = 76;
    return v15 == (_QWORD *)(v16 + 8 * *(unsigned int *)(a2 + v17));
  }
}

unint64_t *sub_1C5B9AB30(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  void **v6;
  uint64_t v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v5 = result;
  v6 = *(void ***)(a2 + 80);
  if (v6)
    result = sub_1C5B9CE58((uint64_t)(result + 3855), v6, a3);
  v7 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v7)
  {
    v8 = *(void ****)(a2 + 32);
    v9 = (uint64_t)(v5 + 3855);
    v10 = 8 * v7;
    do
    {
      v11 = *v8++;
      result = sub_1C5B9CE58(v9, v11, a3);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1C5B9ABA4(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  unint64_t AddRecExpr;
  int v25;
  _QWORD *v26;
  void *v28;
  uint64_t v29;
  _QWORD v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(unsigned __int16 *)(*a1 + 24);
  if (*a1)
    v6 = v5 == 0;
  else
    v6 = 0;
  if (!v6)
  {
    if (v4)
      v7 = v5 == 4;
    else
      v7 = 0;
    if (!v7)
    {
      if (v4)
        v8 = v5 == 7;
      else
        v8 = 0;
      if (!v8)
        return 0;
      v10 = *(const void **)(v4 + 32);
      v9 = *(_QWORD *)(v4 + 40);
      v28 = v30;
      v29 = 0x800000000;
      if (v9 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v9, 8);
        v11 = v29;
        v12 = v28;
      }
      else
      {
        if (!v9)
        {
          v25 = 0;
          v26 = v30;
          goto LABEL_31;
        }
        v11 = 0;
        v12 = v30;
      }
      memcpy(&v12[v11], v10, 8 * v9);
      v25 = v29;
      v26 = v28;
LABEL_31:
      LODWORD(v29) = v25 + v9;
      v17 = sub_1C5B9ABA4(v26, a2);
      if (!v17)
        goto LABEL_34;
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a2, (uint64_t **)&v28, *(uint64_t ***)(v4 + 48));
LABEL_33:
      *a1 = AddRecExpr;
LABEL_34:
      if (v28 != v30)
        free(v28);
      return v17;
    }
    v19 = *(const void **)(v4 + 32);
    v18 = *(_QWORD *)(v4 + 40);
    v28 = v30;
    v29 = 0x800000000;
    if (v18 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v18, 8);
      v20 = v29;
      v21 = v28;
    }
    else
    {
      if (!v18)
      {
        v22 = 0;
        v23 = v30;
        goto LABEL_27;
      }
      v20 = 0;
      v21 = v30;
    }
    memcpy(&v21[v20], v19, 8 * v18);
    v22 = v29;
    v23 = v28;
LABEL_27:
    LODWORD(v29) = v22 + v18;
    v17 = sub_1C5B9ABA4(v23, a2);
    if (!v17)
      goto LABEL_34;
    AddRecExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a2, (uint64_t)&v28, 0, 0);
    goto LABEL_33;
  }
  v13 = *(_QWORD *)(v4 + 32);
  v14 = *(_DWORD *)(v13 + 32);
  if (v14 - sub_1C4959174((llvm::APInt *)(v13 + 24)) + 1 > 0x40)
    return 0;
  *a1 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a2, **(llvm::Type ***)(v4 + 32), 0, 0);
  v15 = *(_QWORD *)(v4 + 32);
  v16 = *(_DWORD *)(v15 + 32);
  if (v16 > 0x40)
    return **(_QWORD **)(v15 + 24);
  else
    return (uint64_t)(*(_QWORD *)(v15 + 24) << -(char)v16) >> -(char)v16;
}

uint64_t sub_1C5B9AE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD **a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (*(_DWORD *)(a2 + 24) != a5)
    return 0;
  v8 = (uint64_t)a6;
  v9 = a3;
  v11 = *(_QWORD *)(a2 + 640);
  v12 = *(_QWORD *)(a2 + 648);
  if (a5 == 2 && *(_QWORD ***)(a2 + 32) != a6)
    v8 = **a6 + 1576;
  if (a3 >= v11)
  {
    if (v12 >= a3)
    {
      v9 = *(_QWORD *)(a2 + 640);
      goto LABEL_14;
    }
    if (a3 != v11)
    {
      result = sub_1C5B9B008(**(_QWORD **)(a1 + 48), a5);
      v12 = v9;
      v9 = v11;
      if (!(_DWORD)result)
        return result;
      goto LABEL_14;
    }
  }
  else if (v12 != a3)
  {
    if ((sub_1C5B9B008(**(_QWORD **)(a1 + 48), a5) & 1) == 0)
      return 0;
    goto LABEL_14;
  }
  v12 = a3;
LABEL_14:
  *(_QWORD *)(a2 + 640) = v9;
  *(_QWORD *)(a2 + 648) = v12;
  *(_QWORD *)(a2 + 32) = v8;
  result = 1;
  *(_DWORD *)(a2 + 40) = a7;
  return result;
}

uint64_t sub_1C5B9AF24(uint64_t a1)
{
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(void **)(a1 + 1848);
  if (v2 != *(void **)(a1 + 1840))
    free(v2);
  v3 = *(char **)(a1 + 672);
  v4 = *(unsigned int *)(a1 + 680);
  if ((_DWORD)v4)
  {
    v5 = 96 * v4;
    do
    {
      v6 = *(char **)&v3[v5 - 64];
      if (&v3[v5 - 48] != v6)
        free(v6);
      v5 -= 96;
    }
    while (v5);
    v3 = *(char **)(a1 + 672);
  }
  if (v3 != (char *)(a1 + 688))
    free(v3);
  v7 = *(char **)(a1 + 48);
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8)
  {
    v9 = 72 * v8;
    do
    {
      v10 = *(void **)&v7[v9 - 48];
      if (v10 != *(void **)&v7[v9 - 56])
        free(v10);
      v9 -= 72;
    }
    while (v9);
    v7 = *(char **)(a1 + 48);
  }
  if (v7 != (char *)(a1 + 64))
    free(v7);
  sub_1C5B9BB9C(a1);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

uint64_t sub_1C5B9B008(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C5B9B024 + 4 * byte_1C866A257[a2]))();
}

BOOL sub_1C5B9B024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (a5 | a8 | a6) == 0;
}

_QWORD *sub_1C5B9B0C8(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12 = -2;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if (*v15 != -16 && v16 != -2)
        {
          v18 = v14 & ((v16 >> 9) ^ v16);
          v19 = &result[2 * v18];
          v20 = *v19;
          if (v16 != *v19)
          {
            v21 = 0;
            v22 = 1;
            while (v20 != -2)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v20 == -16;
              if (v23)
                v21 = v19;
              v24 = v18 + v22++;
              v18 = v24 & v14;
              v19 = &result[2 * (v24 & v14)];
              v20 = *v19;
              if (v16 == *v19)
                goto LABEL_15;
            }
            if (v21)
              v19 = v21;
          }
LABEL_15:
          *v19 = v16;
          v19[1] = v15[1];
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -2;
      result += 2;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

void sub_1C5B9B244(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v4 = v6;
  v6[0] = -1;
  v5 = 0x400000001;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)a1;
    v3 = 48 * v1;
    do
    {
      *v2 = v2 + 2;
      v2[1] = 0x400000000;
      if ((_DWORD)v5)
        sub_1C62C1D5C((uint64_t)v2, (uint64_t)&v4);
      v2 += 6;
      v3 -= 48;
    }
    while (v3);
    if (v4 != v6)
      free(v4);
  }
}

uint64_t sub_1C5B9B324(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *i;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 72 * v7;
        do
        {
          v9 = *(void **)&v6[v8 - 48];
          if (v9 != *(void **)&v6[v8 - 56])
            free(v9);
          v8 -= 72;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v10 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = a2 + 1;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(char **)a1;
      if ((_DWORD)v12)
      {
        v18 = v4 + 72 * v12;
        v19 = v4 + 16;
        do
        {
          v20 = v19 - 16;
          *(_OWORD *)v17 = *(_OWORD *)(v19 - 16);
          if ((char *)(v19 - 16) != v17)
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v17 + 16), 2, (double *)v19);
          *((_QWORD *)v17 + 8) = *(_QWORD *)(v19 + 48);
          v17 += 72;
          v19 += 72;
        }
        while (v20 + 72 != v18);
        v21 = v17;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        v17 = *(char **)a1;
      }
      else
      {
        v21 = *(char **)a1;
      }
      for (i = &v17[72 * v13]; i != v21; i -= 72)
      {
        v43 = (void *)*((_QWORD *)i - 6);
        if (v43 != *((void **)i - 7))
          free(v43);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v44 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v44)
      {
        v45 = *a2;
        v46 = 72 * v44;
        do
        {
          v47 = *(void **)(v45 + v46 - 48);
          if (v47 != *(void **)(v45 + v46 - 56))
            free(v47);
          v46 -= 72;
        }
        while (v46);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v22 = v4 + 72 * v13;
        v23 = *(_QWORD *)a1 + 16;
        v24 = v4 + 16;
        do
        {
          *(_OWORD *)(v23 - 16) = *(_OWORD *)(v24 - 16);
          if (v24 != v23)
            llvm::SmallPtrSetImplBase::MoveFrom(v23, 2, (double *)v24);
          v25 = v24 - 16;
          *(_QWORD *)(v23 + 48) = *(_QWORD *)(v24 + 48);
          v23 += 72;
          v24 += 72;
        }
        while (v25 + 72 != v22);
        goto LABEL_35;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(char **)a1;
        v15 = 72 * v13;
        do
        {
          v16 = *(void **)&v14[v15 - 48];
          if (v16 != *(void **)&v14[v15 - 56])
            free(v16);
          v15 -= 72;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C5B9B65C(a1, v12);
    }
    v13 = 0;
LABEL_35:
    v26 = *a2;
    v27 = *((unsigned int *)a2 + 2);
    if (v13 != v27)
    {
      v28 = *(char **)a1;
      v29 = 72 * v13;
      v30 = 72 * v27;
      do
      {
        v31 = v26 + v29;
        v32 = &v28[v29];
        *(_OWORD *)v32 = *(_OWORD *)(v26 + v29);
        v33 = &v28[v29 + 48];
        *((_QWORD *)v32 + 2) = v33;
        v35 = *(_QWORD *)(v26 + v29 + 16);
        v34 = *(_QWORD *)(v26 + v29 + 24);
        if (v34 == v35)
        {
          *((_QWORD *)v32 + 3) = v33;
          v36 = *(unsigned int *)(v31 + 36);
          if ((_DWORD)v36)
            memmove(v33, *(const void **)(v31 + 24), 8 * v36);
        }
        else
        {
          *((_QWORD *)v32 + 3) = v34;
          *(_QWORD *)(v31 + 24) = v35;
        }
        v37 = v26 + v29;
        v38 = &v28[v29];
        *((_QWORD *)v38 + 4) = *(_QWORD *)(v26 + v29 + 32);
        *((_DWORD *)v38 + 10) = *(_DWORD *)(v26 + v29 + 40);
        *(_QWORD *)(v37 + 32) = 2;
        *(_DWORD *)(v37 + 40) = 0;
        *((_QWORD *)v38 + 8) = *(_QWORD *)(v26 + v29 + 64);
        v28 += 72;
        v26 += 72;
        v30 -= 72;
      }
      while (v29 != v30);
      v26 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    v39 = *v10;
    if ((_DWORD)v39)
    {
      v40 = 72 * v39;
      do
      {
        v41 = *(void **)(v26 + v40 - 48);
        if (v41 != *(void **)(v26 + v40 - 56))
          free(v41);
        v40 -= 72;
      }
      while (v40);
    }
    goto LABEL_12;
  }
  return a1;
}

void sub_1C5B9B65C(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  char *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  unint64_t v20;

  v20 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 72, &v20);
  v4 = *(char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 72 * v5;
    do
    {
      v8 = (const void **)&v4[v6];
      v9 = &v3[v6];
      *(_OWORD *)v9 = *(_OWORD *)&v4[v6];
      v10 = &v3[v6 + 48];
      *((_QWORD *)v9 + 2) = v10;
      v12 = *(const void **)&v4[v6 + 16];
      v11 = *(const void **)&v4[v6 + 24];
      if (v11 == v12)
      {
        *((_QWORD *)v9 + 3) = v10;
        v13 = *((unsigned int *)v8 + 9);
        if ((_DWORD)v13)
          memmove(v10, v8[3], 8 * v13);
      }
      else
      {
        *((_QWORD *)v9 + 3) = v11;
        v8[3] = v12;
      }
      v14 = &v4[v6];
      v15 = &v3[v6];
      *((_QWORD *)v15 + 4) = *(_QWORD *)&v4[v6 + 32];
      *((_DWORD *)v15 + 10) = *(_DWORD *)&v4[v6 + 40];
      *((_QWORD *)v14 + 4) = 2;
      *((_DWORD *)v14 + 10) = 0;
      *((_QWORD *)v15 + 8) = *(_QWORD *)&v4[v6 + 64];
      v6 += 72;
    }
    while (v7 != v6);
    v4 = *(char **)a1;
    v16 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v16)
    {
      v17 = 72 * v16;
      do
      {
        v18 = *(void **)&v4[v17 - 48];
        if (v18 != *(void **)&v4[v17 - 56])
          free(v18);
        v17 -= 72;
      }
      while (v17);
      v4 = *(char **)a1;
    }
  }
  v19 = v20;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v19;
}

uint64_t sub_1C5B9B7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *i;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD *v40;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v5 = *(_OWORD **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(_OWORD **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 6 * v7;
        do
        {
          v9 = *(char **)&v6[v8 - 4];
          if (&v6[v8 - 3] != (_OWORD *)v9)
            free(v9);
          v8 -= 6;
        }
        while (v8 * 16);
        v6 = *(_OWORD **)a1;
      }
      if (v6 != (_OWORD *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v4;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = (_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 8);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(_OWORD **)a1;
      if ((_DWORD)v12)
      {
        v18 = &v5[6 * v12];
        do
        {
          v19 = v5[1];
          *v17 = *v5;
          v17[1] = v19;
          sub_1C4F54880((uint64_t)(v17 + 2), (uint64_t)(v5 + 2));
          v17[5] = v5[5];
          v17 += 6;
          v5 += 6;
        }
        while (v5 != v18);
        v20 = v17;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        v17 = *(_OWORD **)a1;
      }
      else
      {
        v20 = *(_OWORD **)a1;
      }
      for (i = &v17[6 * v13]; i != v20; i -= 6)
      {
        v36 = (_OWORD *)*((_QWORD *)i - 8);
        if (i - 3 != v36)
          free(v36);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v37 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v37)
      {
        v38 = *(_OWORD **)a2;
        v39 = 6 * v37;
        do
        {
          v40 = *(_OWORD **)&v38[v39 - 4];
          if (&v38[v39 - 3] != v40)
            free(v40);
          v39 -= 6;
        }
        while (v39 * 16);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v21 = &v5[6 * v13];
        v22 = *(_OWORD **)a1;
        do
        {
          v23 = v5[1];
          *v22 = *v5;
          v22[1] = v23;
          sub_1C4F54880((uint64_t)(v22 + 2), (uint64_t)(v5 + 2));
          v22[5] = v5[5];
          v5 += 6;
          v22 += 6;
        }
        while (v5 != v21);
        goto LABEL_31;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(_OWORD **)a1;
        v15 = 6 * v13;
        do
        {
          v16 = *(_OWORD **)&v14[v15 - 4];
          if (&v14[v15 - 3] != v16)
            free(v16);
          v15 -= 6;
        }
        while (v15 * 16);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C5B9BA84(a1, v12);
    }
    v13 = 0;
LABEL_31:
    v24 = *(_OWORD **)a2;
    v25 = *(unsigned int *)(a2 + 8);
    if (v13 != v25)
    {
      v26 = &v24[6 * v25];
      v27 = *(_OWORD **)a1;
      v28 = 6 * v13;
      do
      {
        v29 = &v24[v28];
        v30 = &v27[v28];
        v31 = v24[v28 + 1];
        *v30 = v24[v28];
        v30[1] = v31;
        *(_QWORD *)&v27[v28 + 2] = &v27[v28 + 3];
        *((_QWORD *)v30 + 5) = 0x400000000;
        if (DWORD2(v24[v28 + 2]))
          sub_1C4F54880((uint64_t)&v27[v28 + 2], (uint64_t)(v29 + 2));
        v30[5] = v29[5];
        v24 += 6;
        v27 += 6;
      }
      while (v29 + 6 != v26);
      v24 = *(_OWORD **)a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    v32 = *v10;
    if ((_DWORD)v32)
    {
      v33 = 6 * v32;
      do
      {
        v34 = *(_OWORD **)&v24[v33 - 4];
        if (&v24[v33 - 3] != v34)
          free(v34);
        v33 -= 6;
      }
      while (v33 * 16);
    }
    goto LABEL_12;
  }
  return a1;
}

void sub_1C5B9BA84(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 96, &v16);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[96 * v6];
    v8 = (uint64_t)(v5 + 32);
    v9 = v3 + 40;
    do
    {
      v10 = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v9 - 40) = v10;
      *((_QWORD *)v9 - 1) = v9 + 8;
      *(_QWORD *)v9 = 0x400000000;
      if (*(_DWORD *)(v8 + 8))
        sub_1C4F54880((uint64_t)(v9 - 8), v8);
      v11 = v8 - 32;
      *(_OWORD *)(v9 + 40) = *(_OWORD *)(v8 + 48);
      v8 += 96;
      v9 += 96;
    }
    while ((char *)(v11 + 96) != v7);
    v5 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 96 * v12;
      do
      {
        v14 = *(char **)&v5[v13 - 64];
        if (&v5[v13 - 48] != v14)
          free(v14);
        v13 -= 96;
      }
      while (v13);
      v5 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v15;
}

void sub_1C5B9BB9C(uint64_t a1)
{
  unsigned int v1;
  void **v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v7 = -1;
    v2 = *(void ***)a1;
    v3 = *(_QWORD *)a1 + 48 * v1;
    do
    {
      v6 = *v2;
      v5 = v2 + 2;
      v4 = v6;
      if (v6 != v5)
        free(v4);
      v2 = (void **)(v5 + 4);
    }
    while (v2 != (void **)v3);
  }
}

unint64_t sub_1C5B9BC78(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 72 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C5B9B65C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C5B9B65C(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5B9BCE0(unint64_t *a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  BOOL v4;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  llvm::SmallPtrSetImplBase *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void *__base;
  uint64_t v34;
  _BYTE v35[32];
  _QWORD v36[2];
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 680))
    v4 = *(_BYTE *)(a2 + 657) == 0;
  else
    v4 = 1;
  if (!v4)
    return 0;
  __base = v35;
  v34 = 0x400000000;
  v9 = *(_DWORD *)(a4 + 40);
  if (v9)
  {
    sub_1C62C1D5C((uint64_t)&__base, a4 + 32);
    v9 = v34;
  }
  v10 = *(_QWORD *)(a4 + 80);
  if (v10)
  {
    if (v9 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v35, v9 + 1, 8);
      v9 = v34;
    }
    *((_QWORD *)__base + v9) = v10;
    v9 = v34 + 1;
    LODWORD(v34) = v34 + 1;
  }
  if (v9 >= 2)
    qsort(__base, v9, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C618ABDC);
  v36[0] = 0;
  v11 = sub_1C5B9CA40(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)&__base, v36);
  if ((v11 & 1) == 0)
  {
    v13 = *(_DWORD *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 16);
    if (4 * v13 + 4 >= 3 * v14)
    {
      v14 *= 2;
    }
    else if (v14 + ~v13 - *(_DWORD *)(a2 + 12) > v14 >> 3)
    {
      goto LABEL_22;
    }
    sub_1C5B9CC4C(a2, v14);
    v36[0] = 0;
    sub_1C5B9CA40(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)&__base, v36);
LABEL_22:
    v15 = v36[0];
    ++*(_DWORD *)(a2 + 8);
    v36[0] = v37;
    v37[0] = -1;
    v36[1] = 0x400000001;
    if (*(_DWORD *)(v15 + 8) != 1 || **(_QWORD **)v15 != v37[0])
      --*(_DWORD *)(a2 + 12);
    sub_1C62C1D5C(v15, (uint64_t)&__base);
    v16 = *(unsigned int *)(a2 + 680);
    v17 = *(_QWORD *)(a2 + 672);
    v18 = a4;
    if (v16 >= *(_DWORD *)(a2 + 684))
    {
      v29 = *(_QWORD *)(a2 + 672);
      v30 = (uint64_t *)(a2 + 672);
      v31 = v16 + 1;
      if (v29 <= a4 && v29 + 96 * v16 > a4)
      {
        v32 = a4 - v29;
        sub_1C5B9BA84(a2 + 672, v31);
        v17 = *v30;
        v18 = v17 + v32;
      }
      else
      {
        sub_1C5B9BA84(a2 + 672, v31);
        v17 = *v30;
        v18 = a4;
      }
    }
    v19 = *(_DWORD *)(a2 + 680);
    v20 = v17 + 96 * v19;
    v21 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v18;
    *(_OWORD *)(v20 + 16) = v21;
    *(_QWORD *)(v20 + 40) = 0x400000000;
    *(_QWORD *)(v20 + 32) = v20 + 48;
    v22 = v20 + 32;
    if (*(_DWORD *)(v18 + 40))
      sub_1C62C1D5C(v22, v18 + 32);
    *(_OWORD *)(v17 + 96 * v19 + 80) = *(_OWORD *)(v18 + 80);
    ++*(_DWORD *)(a2 + 680);
    v23 = (llvm::SmallPtrSetImplBase *)(a2 + 1840);
    v24 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v24)
    {
      v25 = *(uint64_t **)(a4 + 32);
      v26 = 8 * v24;
      do
      {
        v27 = *v25++;
        sub_1C4774094(v23, v27);
        v26 -= 8;
      }
      while (v26);
    }
    v28 = *(_QWORD *)(a4 + 80);
    if (v28)
      sub_1C4774094(v23, v28);
  }
  if (__base != v35)
    free(__base);
  if ((v11 & 1) != 0)
    return 0;
  sub_1C5B9AB30(a1, a4, a3);
  return 1;
}

uint64_t sub_1C5B9C01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::ScalarEvolution *a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  int v27;
  uint64_t result;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::SCEV *v39;
  int v40;
  int v41;
  int v42;
  llvm::SCEV **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t MulExpr;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[10];

  v27 = a2;
  v68[8] = *MEMORY[0x1E0C80C00];
  result = llvm::ScalarEvolution::getBlockDisposition(a5, (const llvm::SCEV *)a1, **(const llvm::BasicBlock ***)(a2 + 32));
  if ((_DWORD)result == 2)
  {
    v33 = *(unsigned int *)(a3 + 8);
    if (v33 >= *(_DWORD *)(a3 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v33) = a1;
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    v34 = *(unsigned __int16 *)(a1 + 24);
    if (a1 && v34 == 4)
    {
      v35 = *(_QWORD *)(a1 + 40);
      if (v35)
      {
        v36 = *(uint64_t **)(a1 + 32);
        v37 = 8 * v35;
        do
        {
          v38 = *v36++;
          result = sub_1C5B9C01C(v38, v27, a3, a4, (int)a5, v30, v31, v32, v52, v53, (uint64_t)v54, v55, v56, v57, v58, v59, (uint64_t)v60, v61, v62,
                     v63,
                     v64,
                     v65,
                     v66,
                     v67);
          v37 -= 8;
        }
        while (v37);
      }
    }
    else
    {
      if (a1 && v34 == 7)
      {
        v39 = **(llvm::SCEV ***)(a1 + 32);
        result = llvm::SCEV::isZero(v39);
        if ((result & 1) == 0 && *(_QWORD *)(a1 + 40) == 2)
        {
          sub_1C5B9C01C((int)v39, v27, a3, a4, (int)a5, v40, v41, v42, v52, v53, (uint64_t)v54, v55, v56, v57, v58, v59, (uint64_t)v60, v61, v62,
            v63,
            v64,
            v65,
            v66,
            v67);
          __asm { BR              X11 }
        }
      }
      else if (a1)
      {
        if (v34 == 5)
        {
          v43 = *(llvm::SCEV ***)(a1 + 32);
          result = llvm::SCEV::isAllOnesValue(*v43);
          if ((_DWORD)result)
          {
            v44 = *(_QWORD *)(a1 + 40);
            v66 = v68;
            v67 = 0x400000000;
            v45 = 8 * v44 - 8;
            if ((unint64_t)v45 >= 0x21)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v45 >> 3, 8);
              v46 = v67;
            }
            else
            {
              v46 = 0;
            }
            if (v44 != 1)
            {
              memcpy((char *)v66 + 8 * v46, v43 + 1, 8 * v44 - 8);
              v46 = v67;
            }
            LODWORD(v67) = v46 + ((unint64_t)v45 >> 3);
            MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)a5, (uint64_t)&v66, 0, 0);
            sub_1C5B9C01C(MulExpr, v27, (int)&v60, (int)&v54, (int)a5, v49, v50, v51, v52, (uint64_t)v68, (uint64_t)&v56, 0x400000000, v56, v57, v58, v59, (uint64_t)&v62, 0x400000000, v62,
              v63,
              v64,
              v65,
              v66,
              v67);
            __asm { BR              X10 }
          }
        }
      }
      v47 = *(unsigned int *)(a4 + 8);
      if (v47 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v47 + 1, 8);
        LODWORD(v47) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v47) = a1;
      ++*(_DWORD *)(a4 + 8);
    }
  }
  return result;
}

uint64_t sub_1C5B9C68C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = *(_QWORD *)(a1 + 80);
  if (!result)
  {
    v5 = (unsigned int *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 40);
    if (v10 < 2)
      return result;
    v6 = (uint64_t **)(a1 + 32);
LABEL_12:
    result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10 - 8);
    *(_DWORD *)(a1 + 40) = v10 - 1;
    *(_QWORD *)(a1 + 80) = result;
    *(_QWORD *)(a1 + 24) = 1;
    goto LABEL_13;
  }
  if (*(_QWORD *)(a1 + 24) != 1)
    return result;
  v5 = (unsigned int *)(a1 + 40);
  v6 = (uint64_t **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 40))
    goto LABEL_33;
  result = sub_1C5B9C830(result, a2);
  if ((result & 1) != 0)
    return result;
  v7 = *v5;
  if (!(_DWORD)v7)
    return result;
  v8 = *v6;
  v9 = 8 * v7;
  while (1)
  {
    result = sub_1C5B9C830(*v8, a2);
    if ((result & 1) != 0)
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return result;
  }
  v10 = *(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 80);
  if (!v10)
  {
LABEL_33:
    if (*(_DWORD *)(a1 + 44))
    {
      v18 = 0;
    }
    else
    {
      v19 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, 1uLL, 8);
      result = v19;
      v18 = *(unsigned int *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = result;
    ++*(_DWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    return result;
  }
  if (!result)
    goto LABEL_12;
LABEL_13:
  result = sub_1C5B9C830(result, a2);
  if ((result & 1) == 0)
  {
    v11 = *v6;
    v12 = *v5;
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = &v11[v12];
      while (1)
      {
        result = sub_1C5B9C830(*v11, a2);
        if ((result & 1) != 0)
          break;
        ++v11;
        v13 -= 8;
        if (!v13)
        {
          v11 = v14;
          break;
        }
      }
      v15 = v11;
      v11 = *v6;
      v16 = *v5;
    }
    else
    {
      v16 = 0;
      v15 = *v6;
    }
    if (v15 != &v11[v16])
    {
      v17 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *v15;
      *v15 = v17;
    }
  }
  return result;
}

uint64_t sub_1C5B9C830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 *v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[64];
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = a2;
  v6 = &v4;
  v7 = v9;
  v8 = 0x800000000;
  v10 = v14;
  v11 = v14;
  v12 = 8;
  v13 = 0;
  sub_1C5B9C9A8((uint64_t)&v6, a1);
  if ((_DWORD)v8 && !*v6)
  {
    v2 = *((_QWORD *)v7 + v8 - 1);
    LODWORD(v8) = v8 - 1;
    __asm { BR              X10 }
  }
  if (v11 != v10)
    free(v11);
  if (v7 != v9)
    free(v7);
  return v4;
}

void *sub_1C5B9C9A8(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (*(_WORD *)(a2 + 24) == 7 && *(_QWORD *)(a2 + 48) == *(_QWORD *)(*(_QWORD *)a1 + 8))
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t sub_1C5B9CA40(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  const void *v16;
  int i;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD v20[6];

  v20[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v19[4] = v20;
    v20[0] = -1;
    v19[5] = 0x400000001;
    v19[0] = -2;
    v18 = 0;
    v15 = a2 - 1;
    v9 = (a2 - 1) & sub_1C6193EA0(*(_QWORD **)a3, *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8));
    v10 = *(unsigned int *)(a3 + 8);
    v16 = *(const void **)a3;
    for (i = 1; ; ++i)
    {
      v11 = a1 + 48 * v9;
      v12 = *(_DWORD *)(v11 + 8);
      if ((_DWORD)v10 == v12 && !memcmp(v16, *(const void **)v11, 8 * v10))
      {
        v5 = 1;
        goto LABEL_18;
      }
      if (v12 == 1 && !memcmp(*(const void **)v11, v20, 8uLL))
        break;
      v13 = v12 == 1 && memcmp(*(const void **)v11, v19, 8uLL) == 0;
      v14 = v18;
      if (v13 && v18 == 0)
        v14 = a1 + 48 * v9;
      v18 = v14;
      v9 = (v9 + i) & v15;
    }
    v5 = 0;
    if (v18)
      v11 = v18;
LABEL_18:
    *a4 = v11;
  }
  else
  {
    v5 = 0;
    *a4 = 0;
  }
  return v5;
}

void sub_1C5B9CC4C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  void *__s2;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(48 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C5B9B244(a1);
    __s2 = v19;
    v19[0] = -1;
    v18 = 0x400000001;
    v14 = v16;
    v16[0] = -2;
    v15 = 0x400000001;
    if ((_DWORD)v3)
    {
      v9 = 48 * v3;
      v10 = v4;
      do
      {
        v11 = *(unsigned int *)(v10 + 8);
        if ((_DWORD)v11 != (_DWORD)v18 || (v12 = *(void **)v10, memcmp(*(const void **)v10, __s2, 8 * v11)))
        {
          if ((_DWORD)v11 != (_DWORD)v15 || (v12 = *(void **)v10, memcmp(*(const void **)v10, v14, 8 * v11)))
          {
            v13 = 0;
            sub_1C5B9CA40(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v10, &v13);
            sub_1C4F54880(v13, v10);
            ++*(_DWORD *)(a1 + 8);
            v12 = *(void **)v10;
          }
        }
        if ((void *)(v10 + 16) != v12)
          free(v12);
        v10 += 48;
        v9 -= 48;
      }
      while (v9);
      if (v14 != v16)
        free(v14);
    }
    if (__s2 != v19)
      free(__s2);
    MEMORY[0x1CAA32FB4](v4, 8);
  }
  else
  {
    sub_1C5B9B244(a1);
  }
}

unint64_t *sub_1C5B9CE58(uint64_t a1, void **a2, uint64_t a3)
{
  char v6;
  void ***v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  void **v11;
  unint64_t *v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void **v17[2];
  uint64_t v18;
  void ***v19;

  v17[1] = a2;
  v18 = 1;
  v17[0] = (void **)1;
  v19 = 0;
  v6 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v19);
  v7 = v19;
  if ((v6 & 1) != 0)
    goto LABEL_7;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_19;
  }
  if (v9 + ~v8 - *(_DWORD *)(a1 + 12) <= v9 >> 3)
  {
LABEL_19:
    sub_1C5B9CFE4(a1, v9);
    v19 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v19);
    v7 = v19;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v7 != (void **)-4096)
    --*(_DWORD *)(a1 + 12);
  *v7 = a2;
  v7[1] = (void **)1;
  v18 = 1;
LABEL_7:
  sub_1C4914448((void ***)&v18);
  sub_1C4914448(v17);
  if ((v6 & 1) == 0)
  {
    v10 = *(unsigned int *)(a1 + 32);
    if (v10 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v10) = a2;
    ++*(_DWORD *)(a1 + 32);
  }
  v13 = v7[1];
  v12 = (unint64_t *)(v7 + 1);
  v11 = v13;
  if ((v13 & 1) != 0)
    v14 = (unint64_t)v11 >> 58;
  else
    v14 = *((unsigned int *)v11 + 16);
  if (v14 <= a3 + 1)
    v15 = a3 + 1;
  else
    v15 = v14;
  sub_1C496F5AC(v12, v15, 0);
  return sub_1C496F8DC(v12, a3);
}

_QWORD *sub_1C5B9CFE4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  uint64_t v14;
  uint64_t *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (void ***)(v4 + 8);
      do
      {
        v14 = (uint64_t)*(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = *v13;
          *v19 = v14;
          v15[1] = (uint64_t)v16;
          *v13 = (void **)1;
          ++*(_DWORD *)(a1 + 8);
          sub_1C4914448(v13);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void sub_1C5B9D12C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t i;

  if (a5 <= 2)
  {
    v10 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
        sub_1C5B9D1F0(a1, a2, a3, a4, a5, i, 0);
    }
    if (*(_QWORD *)(a4 + 24) == 1)
      sub_1C5B9D1F0(a1, a2, a3, a4, a5, -1, 1);
  }
}

void sub_1C5B9D1F0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  const llvm::SCEV **v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const llvm::SCEV **v22;
  llvm::SCEV *v23;
  unint64_t v24;
  _OWORD *v25;
  const llvm::SCEV **v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  const llvm::SCEV **v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t AddExpr;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  unint64_t IndexTypeSizeInBits;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  const llvm::SCEV *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  const llvm::SCEV *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD v68[2];
  void *v69[2];
  _OWORD v70[3];
  _OWORD v71[2];
  void *v72;
  uint64_t v73;
  _BYTE v74[32];
  __int128 v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[64];
  const llvm::SCEV **v79;
  uint64_t v80;
  _QWORD v81[10];

  v81[8] = *MEMORY[0x1E0C80C00];
  v12 = a4 + 32;
  v13 = (uint64_t *)(*(_QWORD *)(a4 + 32) + 8 * a6);
  v65 = (__int128 *)(a4 + 80);
  if (a7)
    v13 = (uint64_t *)(a4 + 80);
  v14 = *v13;
  if (*(_DWORD *)(a1 + 72) != 1
    || (sub_1C5B9D8D0(*(_QWORD *)(a1 + 48), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), v14, *(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 8)) & 1) == 0)
  {
    v79 = (const llvm::SCEV **)v81;
    v80 = 0x800000000;
    v15 = sub_1C5B9DB54(v14, 0, (uint64_t)&v79, *(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 8), 0);
    v16 = v80;
    if (v15)
    {
      v17 = v15;
      if (v80 >= HIDWORD(v80))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, (uint64_t)v81, v80 + 1, 8);
        v16 = v80;
      }
      v79[v16] = (const llvm::SCEV *)v17;
      v16 = v80 + 1;
      LODWORD(v80) = v80 + 1;
    }
    v18 = v79;
    if (v16 >= 2)
    {
      v64 = a6;
      v62 = v12;
      v19 = v70;
      v63 = a5 + 1;
      v20 = 8 * v16;
      v21 = -8 - (_QWORD)v79;
      v22 = v79;
      while (1)
      {
        v23 = *v18;
        if (*((_WORD *)*v18 + 12) != 14)
          goto LABEL_14;
        if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 8), *v18, *(const llvm::Loop **)(a1 + 56)) == 1)break;
LABEL_73:
        ++v18;
        v21 -= 8;
        ++v22;
        v20 -= 8;
        if (!v20)
        {
          v18 = v79;
          goto LABEL_80;
        }
      }
      v23 = *v18;
LABEL_14:
      v24 = *(unsigned int *)(a4 + 40);
      if (*(_QWORD *)(a4 + 80))
        ++v24;
      if ((sub_1C5B9E02C(*(uint64_t **)(a1 + 48), *(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v23, v24 > 1) & 1) == 0)
      {
        v25 = v19;
        v26 = v79;
        v76 = v78;
        v77 = 0x800000000;
        v27 = (char *)v22 - (char *)v79;
        if ((unint64_t)((char *)v22 - (char *)v79) >= 0x41)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v27 >> 3, 8);
          v28 = v77;
        }
        else
        {
          v28 = 0;
        }
        if (v18 != v26)
        {
          memcpy((char *)v76 + 8 * v28, v26, (char *)v22 - (char *)v26);
          v28 = v77;
        }
        v29 = v28 + ((unint64_t)v27 >> 3);
        LODWORD(v77) = v29;
        v30 = &v79[v80];
        v31 = (unint64_t)v30 + v21;
        v32 = v29 + (((uint64_t)v30 + v21) >> 3);
        if (v32 > HIDWORD(v77))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v32, 8);
          LODWORD(v29) = v77;
        }
        if (v18 + 1 != v30)
        {
          memcpy((char *)v76 + 8 * v29, v18 + 1, (size_t)v30 + v21);
          LODWORD(v29) = v77;
        }
        v19 = v25;
        LODWORD(v77) = v29 + (v31 >> 3);
        if ((_DWORD)v77 != 1)
          goto LABEL_30;
        v33 = *(unsigned int *)(a4 + 40);
        if (*(_QWORD *)(a4 + 80))
          ++v33;
        if ((sub_1C5B9E02C(*(uint64_t **)(a1 + 48), *(uint64_t **)(a1 + 8), *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(llvm::SCEV **)v76, v33 > 1) & 1) == 0)
        {
LABEL_30:
          AddExpr = llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)&v76, 0, 0);
          if (!llvm::SCEV::isZero((llvm::SCEV *)AddExpr))
          {
            v35 = *(_OWORD *)(a4 + 16);
            v71[0] = *(_OWORD *)a4;
            v71[1] = v35;
            v72 = v74;
            v73 = 0x400000000;
            if (*(_DWORD *)(a4 + 40))
              sub_1C62C1D5C((uint64_t)&v72, v62);
            v75 = *v65;
            if (!AddExpr || *(_WORD *)(AddExpr + 24))
              goto LABEL_46;
            v36 = **(_QWORD **)(AddExpr + 32);
            v37 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
            if (*(_BYTE *)(v36 + 8) == 15)
            {
              IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v37, v36);
            }
            else
            {
              sub_1C4768AD0(v37, v36);
              IndexTypeSizeInBits = v39;
              if ((_DWORD)v38 == 1)
            }
            if (IndexTypeSizeInBits > 0x40)
              goto LABEL_46;
            v41 = *(_QWORD *)(AddExpr + 32);
            v42 = (_QWORD *)(v41 + 24);
            if (*(_DWORD *)(v41 + 32) >= 0x41u)
              v42 = (_QWORD *)*v42;
            if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 48) + 248))(**(_QWORD **)(a1 + 48), *v42 + *((_QWORD *)&v75 + 1)))
            {
              v43 = *(_QWORD *)(AddExpr + 32);
              v44 = (_QWORD *)(v43 + 24);
              if (*(_DWORD *)(v43 + 32) >= 0x41u)
                v44 = (_QWORD *)*v44;
              *((_QWORD *)&v75 + 1) += *v44;
              if (a7)
              {
                *(_QWORD *)&v75 = 0;
              }
              else
              {
                v59 = (char *)v72 + 8 * v64;
                v60 = v73;
                v61 = (char *)v72 + 8 * v73;
                if (v61 != v59 + 8)
                {
                  memmove(v59, v59 + 8, v61 - (v59 + 8));
                  v60 = v73;
                }
                LODWORD(v73) = v60 - 1;
              }
            }
            else
            {
LABEL_46:
              if (a7)
                *(_QWORD *)&v75 = AddExpr;
              else
                *((_QWORD *)v72 + v64) = AddExpr;
            }
            v45 = *v18;
            if (!*v18 || *((_WORD *)v45 + 12))
              goto LABEL_61;
            v46 = **((_QWORD **)v45 + 4);
            v47 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272;
            if (*(_BYTE *)(v46 + 8) == 15)
            {
              v50 = llvm::DataLayout::getIndexTypeSizeInBits(v47, v46);
            }
            else
            {
              sub_1C4768AD0(v47, v46);
              v50 = v49;
              if ((_DWORD)v48 == 1)
            }
            if (v50 > 0x40)
              goto LABEL_61;
            v51 = *((_QWORD *)v45 + 4);
            v52 = (_QWORD *)(v51 + 24);
            if (*(_DWORD *)(v51 + 32) >= 0x41u)
              v52 = (_QWORD *)*v52;
            if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 48) + 248))(**(_QWORD **)(a1 + 48), *v52 + *((_QWORD *)&v75 + 1)))
            {
              v53 = *((_QWORD *)v45 + 4);
              v54 = (_QWORD *)(v53 + 24);
              if (*(_DWORD *)(v53 + 32) >= 0x41u)
                v54 = (_QWORD *)*v54;
              v19 = v25;
              *((_QWORD *)&v75 + 1) += *v54;
            }
            else
            {
LABEL_61:
              v55 = *v18;
              v56 = v73;
              v19 = v25;
              if (v73 >= (unint64_t)HIDWORD(v73))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v73 + 1, 8);
                v56 = v73;
              }
              *((_QWORD *)v72 + v56) = v55;
              LODWORD(v73) = v73 + 1;
            }
            sub_1C5B9C68C((uint64_t)v71, *(_QWORD *)(a1 + 56));
            if (sub_1C5B9BCE0((unint64_t *)a1, a2, a3, (unint64_t)v71))
            {
              v57 = *(_QWORD *)(a2 + 672) + 96 * *(unsigned int *)(a2 + 680);
              v58 = *(_OWORD *)(v57 - 80);
              v68[0] = *(_OWORD *)(v57 - 96);
              v68[1] = v58;
              v69[0] = v19;
              v69[1] = (void *)0x400000000;
              if (*(_DWORD *)(v57 - 56))
                sub_1C62C1D5C((uint64_t)v69, v57 - 64);
              v70[2] = *(_OWORD *)(v57 - 16);
              sub_1C5B9D12C(a1, a2, a3, v68, v63 + ((31 - __clz(v80)) >> 2));
              if (v69[0] != v19)
                free(v69[0]);
            }
            if (v72 != v74)
              free(v72);
          }
        }
        if (v76 != v78)
          free(v76);
      }
      goto LABEL_73;
    }
LABEL_80:
    if (v18 != v81)
      free(v18);
  }
}

uint64_t sub_1C5B9D8D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  if (a2 != 2)
    return 0;
  v8 = (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
     ? *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8)
     : *(_DWORD *)(a3 + 8);
  if (v8 != 13)
    return 0;
  result = 0;
  if (a4 && *(_WORD *)(a4 + 24) == 7)
  {
    v10 = *(_QWORD *)(a4 + 40);
    if (v10 == 2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8);
    }
    else
    {
      v12 = *(_QWORD *)(a4 + 32);
      v16 = v18;
      v17 = 0x300000000;
      v13 = v10;
      v14 = 8 * v10 - 8;
      if (v14 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, (uint64_t)v14 >> 3, 8);
        v15 = v17;
      }
      else
      {
        v15 = 0;
      }
      if (v13 != 1)
      {
        memcpy((char *)v16 + 8 * v15, (const void *)(v12 + 8), v14);
        v15 = v17;
      }
      LODWORD(v17) = v15 + (v14 >> 3);
      v11 = sub_1C618AB20(a6, (uint64_t)&v16, *(uint64_t ***)(a4 + 48));
      if (v16 != v18)
        free(v16);
    }
    if (!*(_WORD *)(v11 + 24))
      __asm { BR              X11 }
    return 0;
  }
  return result;
}

unint64_t sub_1C5B9DB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6)
{
  uint64_t v6;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MulExpr;
  unint64_t v18;
  llvm::SCEV *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = a1;
  v40 = *MEMORY[0x1E0C80C00];
  if (a6 > 2)
    return v6;
  v12 = *(unsigned __int16 *)(a1 + 24);
  if (a1 && v12 == 4)
  {
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      v14 = *(_QWORD **)(a1 + 32);
      v15 = 8 * v13;
      do
      {
        v16 = sub_1C5B9DB54(*v14, a2, a3, a4, a5, a6 + 1);
        if (v16)
        {
          MulExpr = v16;
          if (a2)
          {
            v36 = &v38;
            v38 = a2;
            v39 = v16;
            v37 = 0x200000002;
            MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)a5, (uint64_t)&v36, 0, 0);
            if (v36 != &v38)
              free(v36);
          }
          v18 = *(unsigned int *)(a3 + 8);
          if (v18 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
            v18 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = MulExpr;
          ++*(_DWORD *)(a3 + 8);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    return 0;
  }
  if (a1 && v12 == 7)
  {
    v19 = **(llvm::SCEV ***)(a1 + 32);
    if (llvm::SCEV::isZero(v19) || *(_QWORD *)(v6 + 40) != 2)
      return v6;
    v20 = sub_1C5B9DB54(v19, a2, a3, a4, a5, a6 + 1);
    if (v20)
    {
      v21 = v20;
      if (*(_QWORD *)(v6 + 48) != a4 && *(_WORD *)(v20 + 24) == 7)
      {
        if (v20 != **(_QWORD **)(v6 + 32))
        {
          v31 = *(_QWORD *)(v6 + 40);
          if (v31 == 2)
          {
            v32 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
          }
          else
          {
            v33 = *(_QWORD *)(v6 + 32);
            v36 = &v38;
            v37 = 0x300000000;
            v34 = 8 * v31 - 8;
            if ((unint64_t)v34 >= 0x19)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)&v38, v34 >> 3, 8);
              v35 = v37;
            }
            else
            {
              v35 = 0;
            }
            if (v31 != 1)
            {
              memcpy((char *)v36 + 8 * v35, (const void *)(v33 + 8), 8 * v31 - 8);
              v35 = v37;
            }
            LODWORD(v37) = v35 + ((unint64_t)v34 >> 3);
            v32 = sub_1C618AB20(a5, (uint64_t)&v36, *(uint64_t ***)(v6 + 48));
            if (v36 != &v38)
              free(v36);
          }
          return llvm::ScalarEvolution::getAddRecExpr(a5, v21, v32, *(uint64_t ***)(v6 + 48));
        }
        return v6;
      }
      if (a2)
      {
        v36 = &v38;
        v38 = a2;
        v39 = v20;
        v37 = 0x200000002;
        v21 = llvm::ScalarEvolution::getMulExpr((uint64_t)a5, (uint64_t)&v36, 0, 0);
        if (v36 != &v38)
          free(v36);
      }
      v29 = *(unsigned int *)(a3 + 8);
      if (v29 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
        LODWORD(v29) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v21;
      ++*(_DWORD *)(a3 + 8);
    }
    if (**(_QWORD **)(v6 + 32))
      __asm { BR              X11 }
  }
  else if (a1 && v12 == 5 && *(_QWORD *)(a1 + 40) == 2)
  {
    v22 = *(uint64_t **)(a1 + 32);
    v23 = *v22;
    if (*v22 && *(_WORD *)(*v22 + 24) == 0)
    {
      if (a2)
      {
        v36 = &v38;
        v38 = a2;
        v39 = v23;
        v37 = 0x200000002;
        v23 = llvm::ScalarEvolution::getMulExpr((uint64_t)a5, (uint64_t)&v36, 0, 0);
        if (v36 != &v38)
          free(v36);
        v22 = *(uint64_t **)(v6 + 32);
      }
      v25 = sub_1C5B9DB54(v22[1], v23, a3, a4, a5, a6 + 1);
      if (!v25)
        return 0;
      v36 = &v38;
      v38 = v23;
      v39 = v25;
      v37 = 0x200000002;
      v26 = llvm::ScalarEvolution::getMulExpr((uint64_t)a5, (uint64_t)&v36, 0, 0);
      if (v36 != &v38)
        free(v36);
      v27 = *(unsigned int *)(a3 + 8);
      if (v27 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
        LODWORD(v27) = *(_DWORD *)(a3 + 8);
      }
      v6 = 0;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  return v6;
}

uint64_t sub_1C5B9E02C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, llvm::SCEV *this, char a9)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  llvm::SCEV *v19;

  v19 = this;
  if (llvm::SCEV::isZero(this))
    return 1;
  v17 = sub_1C5B9ABA4((unint64_t *)&v19, a2);
  v18 = sub_1C5B9E108((unint64_t *)&v19, a2);
  result = llvm::SCEV::isZero(v19);
  if ((_DWORD)result)
  {
    if (!v17 && !v18)
      return 1;
    return sub_1C5B9E334(a1, a3, a4, a5, a6, a7, v18, v17);
  }
  return result;
}

uint64_t sub_1C5B9E108(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  unint64_t AddRecExpr;
  int v22;
  _QWORD *v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(unsigned __int16 *)(*a1 + 24);
  if (*a1)
    v6 = v5 == 14;
  else
    v6 = 0;
  if (!v6)
  {
    if (v4)
      v7 = v5 == 4;
    else
      v7 = 0;
    if (!v7)
    {
      if (v4)
        v8 = v5 == 7;
      else
        v8 = 0;
      if (!v8)
        return 0;
      v10 = *(const void **)(v4 + 32);
      v9 = *(_QWORD *)(v4 + 40);
      v25 = v27;
      v26 = 0x800000000;
      if (v9 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v9, 8);
        v11 = v26;
        v12 = v25;
      }
      else
      {
        if (!v9)
        {
          v22 = 0;
          v23 = v27;
          goto LABEL_32;
        }
        v11 = 0;
        v12 = v27;
      }
      memcpy(&v12[v11], v10, 8 * v9);
      v22 = v26;
      v23 = v25;
LABEL_32:
      LODWORD(v26) = v22 + v9;
      v13 = sub_1C5B9E108(v23, a2);
      if (!v13)
        goto LABEL_35;
      AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a2, (uint64_t **)&v25, *(uint64_t ***)(v4 + 48));
LABEL_34:
      *a1 = AddRecExpr;
LABEL_35:
      if (v25 != v27)
        free(v25);
      return v13;
    }
    v16 = *(const void **)(v4 + 32);
    v15 = *(_QWORD *)(v4 + 40);
    v25 = v27;
    v26 = 0x800000000;
    if (v15 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v15, 8);
      v17 = v26;
      v18 = v25;
    }
    else
    {
      if (!v15)
      {
        v19 = 0;
        v20 = v27;
        goto LABEL_28;
      }
      v17 = 0;
      v18 = v27;
    }
    memcpy(&v18[v17], v16, 8 * v15);
    v19 = v26;
    v20 = v25;
LABEL_28:
    LODWORD(v26) = v19 + v15;
    v13 = sub_1C5B9E108(&v20[(v19 + v15) - 1], a2);
    if (!v13)
      goto LABEL_35;
    AddRecExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a2, (uint64_t)&v25, 0, 0);
    goto LABEL_34;
  }
  v13 = *(_QWORD *)(v4 - 8);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) > 3u;
  else
    v14 = 1;
  if (v14)
    return 0;
  *a1 = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a2, *(llvm::Type **)v13, 0, 0);
  return v13;
}

uint64_t sub_1C5B9E334(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 > 0 == a8 + a2 <= a8 || a3 > 0 == a8 + a3 <= a8 || !sub_1C5B9B008(*a1, a4))
    return 0;
  else
    return sub_1C5B9B008(*a1, a4);
}

BOOL sub_1C5B9E418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == 1)
  {
    *(_QWORD *)(a1 + 24) = 0;
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(unsigned int *)(a1 + 40);
    if (v4 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4) = v3;
    ++*(_DWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return v1 == 1;
}

void sub_1C5B9E498(_QWORD *a1, llvm::SCEV *this)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  _OWORD v8[2];
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v4 = a1[1];
  v6 = *(_OWORD *)(*a1 + 16);
  v8[0] = *(_OWORD *)*a1;
  v8[1] = v6;
  v9 = v11;
  v10 = 0x400000000;
  if (*(_DWORD *)(v5 + 40))
    sub_1C62C1D5C((uint64_t)&v9, v5 + 32);
  v11[2] = *(_OWORD *)(v5 + 80);
  if (!llvm::SCEV::isZero(this))
  {
    v7 = v10;
    if (v10 >= HIDWORD(v10))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v9, (uint64_t)v11, v10 + 1, 8);
      v7 = v10;
    }
    *((_QWORD *)v9 + v7) = this;
    LODWORD(v10) = v10 + 1;
    sub_1C5B9C68C((uint64_t)v8, *(_QWORD *)(v4 + 56));
    sub_1C5B9BCE0((unint64_t *)v4, a1[2], *(_DWORD *)a1[3], (unint64_t)v8);
  }
  if (v9 != v11)
    free(v9);
}

void sub_1C5B9E5BC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  __int128 *v13;
  llvm::SCEV **v14;
  uint64_t v15;
  llvm::SCEV *v16;
  __int128 v17;
  llvm::SCEV **v18;
  llvm::SCEV *v19;
  _OWORD v20[2];
  void *v21[2];
  _BYTE v22[32];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = a4 + 32;
  v13 = (__int128 *)(a4 + 80);
  v14 = (llvm::SCEV **)(*(_QWORD *)(a4 + 32) + 8 * a5);
  if (a6)
    v14 = (llvm::SCEV **)(a4 + 80);
  v19 = *v14;
  v15 = sub_1C5B9E108((unint64_t *)&v19, *(uint64_t **)(a1 + 8));
  v16 = v19;
  if (!llvm::SCEV::isZero(v19) && v15)
  {
    v17 = *(_OWORD *)(a4 + 16);
    v20[0] = *(_OWORD *)a4;
    v20[1] = v17;
    v21[0] = v22;
    v21[1] = (void *)0x400000000;
    if (*(_DWORD *)(a4 + 40))
      sub_1C62C1D5C((uint64_t)v21, v12);
    v23 = *v13;
    *(_QWORD *)&v20[0] = v15;
    if (sub_1C5B9E730(*(uint64_t **)(a1 + 48), *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t *)v20))
    {
      v18 = (llvm::SCEV **)&v23;
      if (!a6)
        v18 = (llvm::SCEV **)((char *)v21[0] + 8 * a5);
      *v18 = v16;
      sub_1C5B9BCE0((unint64_t *)a1, a2, a3, (unint64_t)v20);
    }
    if (v21[0] != v22)
      free(v21[0]);
  }
}

uint64_t sub_1C5B9E730(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *a7;
  v14 = a7[1];
  v15 = a7[3];
  if ((sub_1C5B9E334(a1, a2, a3, a4, a5, a6, *a7, v14) & 1) != 0)
    return 1;
  if (v15 == 1)
    return sub_1C5B9E334(a1, a2, a3, a4, a5, a6, v13, v14);
  return 0;
}

void sub_1C5B9E7F4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  __int128 *v12;
  llvm::SCEV **v13;
  llvm::SCEV *v14;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::SCEV *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  unsigned int v39;
  uint64_t *v40;
  __int128 *v41;
  llvm::SCEV *v42;
  _QWORD v43[6];
  char v44;
  uint64_t v45;
  unsigned int v46;
  void *v47[2];
  __int128 v48;
  void *v49[2];
  _BYTE v50[32];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v46 = a3;
  v45 = a6;
  v44 = a7;
  v43[0] = a4;
  v43[1] = a1;
  v43[2] = a2;
  v43[3] = &v44;
  v43[4] = &v45;
  v43[5] = &v46;
  v11 = a4 + 32;
  v12 = (__int128 *)(a4 + 80);
  v13 = (llvm::SCEV **)(*(_QWORD *)(a4 + 32) + 8 * a6);
  if (a7)
    v13 = (llvm::SCEV **)(a4 + 80);
  v14 = *v13;
  v42 = *v13;
  if (!*(_DWORD *)(a1 + 72) && *(_DWORD *)(a2 + 24) == 2 && *((_WORD *)v14 + 12) == 7 && v14 != 0)
  {
    v16 = *((_QWORD *)v14 + 5);
    if (v16 == 2)
    {
      v17 = *(_QWORD *)(*((_QWORD *)v14 + 4) + 8);
    }
    else
    {
      v40 = *(uint64_t **)(a1 + 8);
      v41 = (__int128 *)(a4 + 80);
      v36 = *((_QWORD *)v14 + 4);
      v47[0] = &v48;
      v47[1] = (void *)0x300000000;
      v37 = v16;
      v38 = 8 * v16 - 8;
      if (v38 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (uint64_t)&v48, (uint64_t)v38 >> 3, 8);
        v39 = v47[1];
      }
      else
      {
        v39 = 0;
      }
      if (v37 != 1)
      {
        memcpy((char *)v47[0] + 8 * v39, (const void *)(v36 + 8), v38);
        v39 = v47[1];
      }
      LODWORD(v47[1]) = v39 + (v38 >> 3);
      v17 = sub_1C618AB20(v40, (uint64_t)v47, *((uint64_t ***)v14 + 6));
      if (v47[0] != &v48)
        free(v47[0]);
      v12 = v41;
    }
    if (v17)
      v18 = *(unsigned __int16 *)(v17 + 24) == 0;
    else
      v18 = 0;
    if (v18)
    {
      v19 = *(_QWORD *)(v17 + 32);
      v20 = *(_DWORD *)(v19 + 32);
      if (v20 > 0x40)
      {
        v24 = **(_QWORD **)(v19 + 24);
      }
      else
      {
        v21 = *(_QWORD *)(v19 + 24);
        v22 = v21 >> (v20 - 1);
        v23 = (uint64_t)(v21 << -(char)v20) >> -(char)v20;
        v24 = (v22 & 1) != 0 ? v23 : v21;
      }
      v25 = *(unsigned int *)(a5 + 8);
      if ((_DWORD)v25)
      {
        v26 = *(uint64_t **)a5;
        v27 = 8 * v25;
        do
        {
          v28 = *v26++;
          sub_1C5B9EB1C(v43, (uint64_t)v14, v28 - v24);
          v27 -= 8;
        }
        while (v27);
      }
    }
  }
  v29 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v29)
  {
    v30 = *(uint64_t **)a5;
    v31 = 8 * v29;
    do
    {
      v32 = *v30++;
      sub_1C5B9EB1C(v43, (uint64_t)v14, v32);
      v31 -= 8;
    }
    while (v31);
  }
  v33 = sub_1C5B9ABA4((unint64_t *)&v42, *(uint64_t **)(a1 + 8));
  v34 = v42;
  if (!llvm::SCEV::isZero(v42) && v33)
  {
    v35 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v47 = *(_OWORD *)a4;
    v48 = v35;
    v49[0] = v50;
    v49[1] = (void *)0x400000000;
    if (*(_DWORD *)(a4 + 40))
      sub_1C62C1D5C((uint64_t)v49, v11);
    v51 = *v12;
    v47[1] = (char *)v47[1] + v33;
    if (sub_1C5B9E730(*(uint64_t **)(a1 + 48), *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t *)v47))
    {
      if (v44)
      {
        *(_QWORD *)&v51 = v34;
      }
      else
      {
        *((_QWORD *)v49[0] + v45) = v34;
        sub_1C5B9C68C((uint64_t)v47, *(_QWORD *)(a1 + 56));
      }
      sub_1C5B9BCE0((unint64_t *)a1, a2, v46, (unint64_t)v47);
    }
    if (v49[0] != v50)
      free(v49[0]);
  }
}

void sub_1C5B9EB1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD v10[2];
  void *v11[2];
  _OWORD v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v6 = a1[1];
  v8 = *(_OWORD *)(*a1 + 16);
  v10[0] = *(_OWORD *)*a1;
  v10[1] = v8;
  v11[0] = v12;
  v11[1] = (void *)0x400000000;
  v9 = (_OWORD *)v7;
  if (*(_DWORD *)(v7 + 40))
  {
    sub_1C62C1D5C((uint64_t)v11, v7 + 32);
    v9 = (_OWORD *)*a1;
  }
  v12[2] = *(_OWORD *)(v7 + 80);
  *((_QWORD *)&v10[0] + 1) = *((_QWORD *)v9 + 1) - a3;
  if (sub_1C5B9E730(*(uint64_t **)(v6 + 48), *(_QWORD *)(a1[2] + 640), *(_QWORD *)(a1[2] + 648), *(_DWORD *)(a1[2] + 24), *(_QWORD *)(a1[2] + 32), *(_QWORD *)(a1[2] + 40), (uint64_t *)v10))
    __asm { BR              X11 }
  if (v11[0] != v12)
    free(v11[0]);
}

uint64_t sub_1C5B9ED5C(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 40))
    return ((uint64_t (*)(void))((char *)&loc_1C5B9ED88
                              + 4 * byte_1C866A2D4[*(unsigned __int16 *)(**(_QWORD **)(a1 + 32) + 24)]))();
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    return ((uint64_t (*)(void))((char *)&loc_1C5B9EDBC + 4 * byte_1C866A2E3[*(unsigned __int16 *)(v2 + 24)]))();
  if (*(_QWORD *)a1)
    return **(_QWORD **)a1;
  return 0;
}

BOOL sub_1C5B9EE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v14;

  v14 = 0;
  if (sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v14))
  {
    v5 = v14;
    v6 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 16);
    v5 = *(_QWORD *)a1 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7)
    return 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = (unint64_t *)(v5 + 8);
  v8 = v10;
  if ((v10 & 1) != 0)
  {
    v12 = (v8 >> 1) & ~(-1 << (v8 >> 58));
    if (!v12)
      return 0;
    v11 = __clz(__rbit64(v12));
  }
  else
  {
    v11 = sub_1C476B7EC(v8);
    if (v11 == -1)
      return 0;
  }
  return v11 != a3 || sub_1C49143F4(v9, v11) != -1;
}

_QWORD *sub_1C5B9EEE0(uint64_t a1, int a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C631CF20((void ***)a1, (void ***)v4, (void ***)&v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5B9EF98(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[4];
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (_QWORD *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = v7[5];
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (_QWORD *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

void sub_1C5B9EFF0(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD **v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (_QWORD **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v5 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C6143384(*v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
    if (v7 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v8 = 32 * v7;
      v9 = *(_QWORD **)a1;
      do
      {
        *v9 = -4096;
        v9 += 4;
        v8 -= 32;
      }
      while (v8);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      a1[4] = v11;
      v12 = operator new(32 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = 0;
      v13 = a1[4];
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -4096;
          v12 += 4;
          v14 -= 32;
        }
        while (v14);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

_QWORD *sub_1C5B9F144(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    result = (_QWORD *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C4914448((void ***)result);
      result += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (v3)
  {
    v5 = 1 << (33 - __clz(v3 - 1));
    if (v5 <= 64)
      v6 = 64;
    else
      v6 = v5;
    if (v6 == *((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      v7 = 16 * v6;
      v8 = (_QWORD *)*v1;
      do
      {
        *v8 = -4096;
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*v1, 8);
      v9 = (4 * v6 / 3 + 1) | ((unint64_t)(4 * v6 / 3 + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v10;
      result = operator new(16 * v10, (std::align_val_t)8uLL);
      *v1 = result;
      v1[1] = 0;
      v11 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        do
        {
          *result = -4096;
          result += 2;
          v12 -= 16;
        }
        while (v12);
      }
    }
  }
  else if (*((_DWORD *)v1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*v1, 8);
    *v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = 0;
  }
  else
  {
    v1[1] = 0;
  }
  return result;
}

uint64_t sub_1C5B9F28C(uint64_t result, uint64_t *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4, uint64_t a5, llvm::SmallPtrSetImplBase *a6)
{
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;

  v11 = result;
  v12 = (_OWORD *)(result + 24);
  v49 = *(_DWORD *)(result + 28);
  v50 = *(_DWORD *)(result + 40);
  v51 = *(_DWORD *)(result + 32);
  v13 = a2[10];
  if (!v13)
    goto LABEL_75;
  result = sub_1C61B75F0(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v13, &v52);
  if ((_DWORD)result)
  {
LABEL_71:
    *(_QWORD *)&v46 = -1;
    *((_QWORD *)&v46 + 1) = -1;
    *v12 = v46;
    v12[1] = v46;
    return result;
  }
  result = (uint64_t)sub_1C5B9FBA0(v11, (uint64_t)a2, v13, a3, a6);
  if (*(_DWORD *)(v11 + 28) != -1)
  {
LABEL_75:
    v14 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v14)
    {
      v15 = (uint64_t *)a2[4];
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        result = sub_1C61B75F0(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), *v15, &v52);
        if ((_DWORD)result)
          goto LABEL_71;
        result = (uint64_t)sub_1C5B9FBA0(v11, (uint64_t)a2, v17, a3, a6);
        if (*(_DWORD *)(v11 + 28) == -1)
          return result;
        ++v15;
        v16 -= 8;
      }
      while (v16);
      v18 = *((unsigned int *)a2 + 10);
    }
    else
    {
      v18 = 0;
    }
    if (a2[10])
      v19 = v18 + 1;
    else
      v19 = v18;
    if (v19 <= 1)
    {
      v21 = *(_DWORD *)(v11 + 40);
    }
    else
    {
      if (a2[3])
      {
        result = sub_1C5B9FC74(*(uint64_t **)(v11 + 16), a5, a2);
        v20 = -2;
        if (!(_DWORD)result)
          v20 = -1;
      }
      else
      {
        v20 = -1;
      }
      v21 = *(_DWORD *)(v11 + 40) + v20 + v19;
    }
    if (a2[11])
      ++v21;
    *(_DWORD *)(v11 + 40) = v21;
    v22 = a2[3];
    if (v22)
    {
      v23 = *(uint64_t **)(v11 + 16);
      v48 = a2[3];
      LOBYTE(v47) = *((_BYTE *)a2 + 16);
      result = sub_1C5B9E334(v23, *(_QWORD *)(a5 + 640), *(_QWORD *)(a5 + 648), *(_DWORD *)(a5 + 24), *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), *a2, a2[1]);
      if ((result & 1) != 0)
      {
        if (*(_DWORD *)(a5 + 24) == 2)
        {
          v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v23 + 440))(*v23, *(_QWORD *)(a5 + 32), *a2, *(_QWORD *)(a5 + 640) + a2[1], *((unsigned __int8 *)a2 + 16), a2[3], *(unsigned int *)(a5 + 40));
          v26 = v25;
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v23 + 440))(*v23, *(_QWORD *)(a5 + 32), *a2, *(_QWORD *)(a5 + 648) + a2[1], *((unsigned __int8 *)a2 + 16), a2[3], *(unsigned int *)(a5 + 40));
          v28 = v24 < result;
          if (v26 != v27)
            v28 = v26 < v27;
          v29 = !v28;
          if (v28)
            LODWORD(v22) = result;
          else
            LODWORD(v22) = v24;
          if (v29)
            v30 = v26;
          else
            v30 = v27;
          if (v30)
            LODWORD(v22) = 0;
        }
        else
        {
          LODWORD(v22) = 0;
        }
      }
      else
      {
        LODWORD(v22) = a2[3] != 1;
      }
    }
    *(_DWORD *)(v11 + 52) += v22;
    v31 = *(unsigned int *)(a5 + 56);
    if ((_DWORD)v31)
    {
      v32 = 72 * v31;
      v33 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 64);
      while (1)
      {
        v34 = a2[1] + *v33;
        if (*a2)
          break;
        if (v34)
        {
          v53 = 64;
          v52 = v34;
          result = sub_1C4959174((llvm::APInt *)&v52);
          *(_DWORD *)(v11 + 44) = *(_DWORD *)(v11 + 44) - result + 65;
          if (v53 >= 0x41)
          {
            result = v52;
            if (v52)
              result = MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
          }
          goto LABEL_42;
        }
LABEL_52:
        v33 += 9;
        v32 -= 72;
        if (!v32)
          goto LABEL_53;
      }
      *(_DWORD *)(v11 + 44) += 64;
LABEL_42:
      if (*(_DWORD *)(a5 + 24) == 2 && v34 != 0)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, int, uint64_t))(***(_QWORD ***)(v11 + 16) + 264))(**(_QWORD **)(v11 + 16), *(_QWORD *)(a5 + 32), *a2, v34, *((unsigned __int8 *)a2 + 16), a2[3], *(unsigned int *)(a5 + 40), *(v33 - 8), v47, v48);
        if ((result & 1) == 0)
          ++*(_DWORD *)(v11 + 40);
      }
      goto LABEL_52;
    }
LABEL_53:
    if (byte_1ED820078)
    {
      v36 = *(_QWORD **)(v11 + 16);
      v37 = sub_1C5B9ED5C((uint64_t)a2);
      v38 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*v36 + 680))(*v36, 0, v37);
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v36 + 672))(*v36, v38);
      v39 = *(_DWORD *)(v11 + 28);
      if (v39 > (int)result - 1)
      {
        v40 = v39 - v49;
        v41 = v39 - result;
        if (v49 <= (int)result - 1)
          v42 = v41 + 1;
        else
          v42 = v40;
        *(_DWORD *)v12 += v42;
      }
      if (*(_DWORD *)(a5 + 24) == 3)
      {
        if (!a2[11] && !a2[1] && *((_DWORD *)a2 + 10) == 1 && !a2[10])
        {
          v43 = *(_DWORD *)(v11 + 32) - v51 + *(_DWORD *)(v11 + 24);
LABEL_68:
          *(_DWORD *)(v11 + 24) = v43;
          return result;
        }
        result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v11 + 16) + 296))(**(_QWORD **)(v11 + 16));
        v45 = *(_DWORD *)(a5 + 24);
        v44 = *(_DWORD *)(v11 + 32) - v51 + *(_DWORD *)(v11 + 24) + (result ^ 1);
        *(_DWORD *)(v11 + 24) = v44;
        if (v45 == 3)
          return result;
      }
      else
      {
        v44 = *(_DWORD *)(v11 + 32) - v51 + *(_DWORD *)(v11 + 24);
      }
      v43 = v44 - v50 + *(_DWORD *)(v11 + 40);
      goto LABEL_68;
    }
  }
  return result;
}

void sub_1C5B9F718(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  _BYTE v15[32];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 672);
  v4 = *(_DWORD *)(a1 + 680);
  v5 = v3 + 96 * v4;
  v6 = (__int128 *)(v5 - 96);
  if ((__int128 *)(v5 - 96) != a2)
  {
    v12 = *a2;
    v13 = a2[1];
    v14[0] = v15;
    v14[1] = (void *)0x400000000;
    if (*((_DWORD *)a2 + 10))
      sub_1C4F54880((uint64_t)v14, (uint64_t)(a2 + 2));
    v16 = a2[5];
    v8 = *(_OWORD *)(v5 - 80);
    *a2 = *v6;
    a2[1] = v8;
    sub_1C4F54880((uint64_t)(a2 + 2), v5 - 64);
    a2[5] = *(_OWORD *)(v5 - 16);
    *v6 = v12;
    *(_OWORD *)(v5 - 80) = v13;
    sub_1C4F54880(v5 - 64, (uint64_t)v14);
    *(_OWORD *)(v5 - 16) = v16;
    if (v14[0] != v15)
      free(v14[0]);
    v4 = *(_DWORD *)(a1 + 680);
    v3 = *(_QWORD *)(a1 + 672);
  }
  v9 = v4 - 1;
  *(_DWORD *)(a1 + 680) = v9;
  v10 = v3 + 96 * v9;
  v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 48))
    free(v11);
}

void sub_1C5B9F854(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  _DWORD v38[3];
  _BYTE v39[32];
  uint64_t v40;

  v6 = *(_OWORD **)(a1 + 1848);
  v7 = *(_OWORD **)(a1 + 1840);
  if (v6 == v7)
  {
    v36 = v39;
    v8 = *(unsigned int *)(a1 + 1860);
    if ((_DWORD)v8)
      memmove(v39, v6, 8 * v8);
  }
  else
  {
    v36 = *(_BYTE **)(a1 + 1848);
    *(_QWORD *)(a1 + 1848) = v7;
    v6 = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 1860);
  }
  v37 = *(_DWORD *)(a1 + 1856);
  v38[0] = v8;
  v38[1] = *(_DWORD *)(a1 + 1864);
  *(_DWORD *)(a1 + 1856) = 4;
  if (v6 != v7)
  {
    *(_QWORD *)&v34 = -1;
    *((_QWORD *)&v34 + 1) = -1;
    *v6 = v34;
    v6[1] = v34;
  }
  *(_QWORD *)(a1 + 1860) = 0;
  v9 = *(_DWORD *)(a1 + 680);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 672);
    v11 = v10 + 96 * v9;
    do
    {
      v12 = *(_QWORD *)(v10 + 80);
      if (v12)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 1840), v12);
      v13 = *(unsigned int *)(v10 + 40);
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)(v10 + 32);
        v15 = 8 * v13;
        do
        {
          v16 = *v14++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 1840), v16);
          v15 -= 8;
        }
        while (v15);
      }
      v10 += 96;
    }
    while (v10 != v11);
  }
  v17 = v36;
  v18 = (unsigned int *)&v37;
  if (v36 == v39)
    v18 = v38;
  v19 = *v18;
  v20 = (uint64_t *)v36;
  if ((_DWORD)v19)
  {
    v21 = 0;
    while (*(_QWORD *)&v36[v21] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v21 += 8;
      if (8 * v19 == v21)
        goto LABEL_38;
    }
    v20 = (uint64_t *)&v36[v21];
  }
  v22 = &v36[8 * v19];
  if (v20 != v22)
  {
    v23 = 1 << a2;
    v35 = ~(1 << a2);
    v24 = a2 >> 6;
    v25 = *v20;
LABEL_24:
    v26 = sub_1C477672C(a1 + 1840, v25);
    v27 = *(_QWORD *)(a1 + 1848);
    if (v27 == *(_QWORD *)(a1 + 1840))
      v28 = 1860;
    else
      v28 = 1856;
    if (v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)(a1 + v28)))
    {
      v40 = 0;
      v29 = sub_1C49F21C0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v25, &v40);
      v30 = v40;
      if (!v29)
        v30 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
      v31 = *(_QWORD *)(v30 + 8);
      if ((v31 & 1) != 0)
        *(_QWORD *)(v30 + 8) = ((2 * ~((-1 << (v31 >> 58)) | v23)) | 0xFC00000000000000) & v31 | 1;
      else
        *(_QWORD *)(*(_QWORD *)v31 + 8 * v24) &= v35;
    }
    v32 = (unint64_t *)(v20 + 1);
    while (v32 != v22)
    {
      v33 = *v32++;
      v25 = v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = (uint64_t *)(v32 - 1);
        goto LABEL_24;
      }
    }
    v17 = v36;
  }
LABEL_38:
  if (v17 != v39)
    free(v17);
}

void sub_1C5B9FAC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v4 = v6;
  v6[0] = -1;
  v5 = 0x400000001;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)a1;
    v3 = 56 * v1;
    do
    {
      *v2 = v2 + 2;
      v2[1] = 0x400000000;
      if ((_DWORD)v5)
        sub_1C62C1D5C((uint64_t)v2, (uint64_t)&v4);
      v2 += 7;
      v3 -= 56;
    }
    while (v3);
    if (v4 != v6)
      free(v4);
  }
}

_QWORD *sub_1C5B9FBA0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *this, llvm::SmallPtrSetImplBase *a5)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;

  if (!a5)
    goto LABEL_6;
  result = sub_1C477672C((uint64_t)a5, a3);
  v11 = *((_QWORD *)a5 + 1);
  v12 = 16;
  if (v11 == *(_QWORD *)a5)
    v12 = 20;
  if (result == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)a5 + v12)))
  {
LABEL_6:
    result = sub_1C4774094(this, a3);
    if (v14)
    {
      result = (_QWORD *)sub_1C5B9FD68(a1, a2, a3);
      if (a5)
      {
        if (*(_DWORD *)(a1 + 28) == -1)
          return sub_1C4774094(a5, a3);
      }
    }
  }
  else
  {
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    *(_OWORD *)(a1 + 40) = v13;
    *(_OWORD *)(a1 + 24) = v13;
  }
  return result;
}

uint64_t sub_1C5B9FC74(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  BOOL v11;

  v6 = *(_DWORD *)(a2 + 24);
  if (v6 != 2)
    return sub_1C5B9E334(a1, *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), v6, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *a3, a3[1]);
  if (((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 448))() & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    return sub_1C5B9E334(a1, *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), v6, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *a3, a3[1]);
  }
  v7 = *(_DWORD *)(a2 + 56);
  if (!v7)
    return 1;
  v8 = 72 * v7 - 72;
  v9 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 64);
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a1 + 264))(*a1, *(_QWORD *)(a2 + 32), *a3, *v9 + a3[1], *((unsigned __int8 *)a3 + 16), a3[3], *(unsigned int *)(a2 + 40), *(v9 - 8));
    if ((_DWORD)result)
      v11 = v8 == 0;
    else
      v11 = 1;
    v8 -= 72;
    v9 += 9;
  }
  while (!v11);
  return result;
}

uint64_t sub_1C5B9FD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *i;
  __int128 v7;
  unsigned int v8;
  int v9;

  if (a3 && *(_WORD *)(a3 + 24) == 7)
  {
    if (*(_QWORD *)(a3 + 48) == *(_QWORD *)a1)
      __asm { BR              X12 }
    result = sub_1C5B99DE4(a3, *(_QWORD *)(a1 + 8));
    if (!(_DWORD)result || *(_DWORD *)(a1 + 56) == 1)
    {
      for (i = *(_QWORD **)a1; ; i = (_QWORD *)*i)
      {
        if (i == *(_QWORD **)(a3 + 48))
        {
          ++*(_DWORD *)(a1 + 28);
          return result;
        }
        if (!i)
          break;
      }
      *(_QWORD *)&v7 = -1;
      *((_QWORD *)&v7 + 1) = -1;
      *(_OWORD *)(a1 + 40) = v7;
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 28);
    result = sub_1C5BA0224(a3, dword_1ED820378);
    v8 = *(_DWORD *)(a1 + 48) + result;
    if (v8 >= 0x10000)
      v8 = 0x10000;
    *(_DWORD *)(a1 + 48) = v8;
    if (*(_WORD *)(a3 + 24) == 5)
    {
      result = llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 8), (const llvm::SCEV *)a3, *(const llvm::Loop **)a1);
      v9 = result == 2;
    }
    else
    {
      v9 = 0;
    }
    *(_DWORD *)(a1 + 36) += v9;
  }
  return result;
}

uint64_t sub_1C5BA0224(uint64_t a1, int a2)
{
  int v4;
  int i;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = 0;
  while (2)
  {
    for (i = 1 - a2; ; ++i)
    {
      v6 = *(unsigned __int16 *)(a1 + 24);
      if (*(_WORD *)(a1 + 24))
        v7 = v6 == 14;
      else
        v7 = 1;
      if (v7)
      {
        v10 = 1;
        return (v10 + v4);
      }
      if (i == 1)
        goto LABEL_22;
      if (v6 == 7)
      {
        v8 = *(uint64_t **)(a1 + 32);
        goto LABEL_12;
      }
      if (v6 - 4 < 0xFFFFFFFD)
        break;
      v8 = (uint64_t *)(a1 + 32);
LABEL_12:
      a1 = *v8;
    }
    if (v6 == 6)
    {
      a2 = -i;
      v9 = sub_1C5BA0224(*(_QWORD *)(a1 + 32), -i);
      a1 = *(_QWORD *)(a1 + 40);
      v4 += v9;
      continue;
    }
    break;
  }
  if (v6 > 0xC || ((1 << v6) & 0x1FB0) == 0 || (v11 = *(_QWORD *)(a1 + 40)) == 0)
  {
LABEL_22:
    v10 = 0;
    return (v10 + v4);
  }
  v10 = 0;
  v12 = *(uint64_t **)(a1 + 32);
  v13 = -i;
  v14 = 8 * v11;
  do
  {
    v15 = *v12++;
    v10 += sub_1C5BA0224(v15, v13);
    v14 -= 8;
  }
  while (v14);
  return (v10 + v4);
}

uint64_t sub_1C5BA0328(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  const void *v16;
  int i;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD v20[6];

  v20[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v19[4] = v20;
    v20[0] = -1;
    v19[5] = 0x400000001;
    v19[0] = -2;
    v18 = 0;
    v15 = a2 - 1;
    v10 = (a2 - 1) & sub_1C6193EA0(*(_QWORD **)a3, *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8));
    v11 = *(unsigned int *)(a3 + 8);
    v16 = *(const void **)a3;
    for (i = 1; ; ++i)
    {
      v5 = a1 + 56 * v10;
      v12 = *(_DWORD *)(v5 + 8);
      if ((_DWORD)v11 == v12 && !memcmp(v16, *(const void **)v5, 8 * v11))
      {
        v6 = 1;
        goto LABEL_3;
      }
      if (v12 == 1 && !memcmp(*(const void **)v5, v20, 8uLL))
        break;
      v13 = v12 == 1 && memcmp(*(const void **)v5, v19, 8uLL) == 0;
      v14 = v18;
      if (v13 && v18 == 0)
        v14 = a1 + 56 * v10;
      v18 = v14;
      v10 = (v10 + i) & v15;
    }
    v6 = 0;
    if (v18)
      v5 = v18;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_3:
  *a4 = v5;
  return v6;
}

void sub_1C5BA0534(void **a1, unsigned int a2)
{
  void **v2;
  void **v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a1;
    v7 = -1;
    v3 = &a1[7 * a2];
    do
    {
      v6 = *v2;
      v5 = v2 + 2;
      v4 = v6;
      if (v6 != v5)
        free(v4);
      v2 = (void **)(v5 + 5);
    }
    while (v2 != v3);
  }
}

uint64_t sub_1C5BA060C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *__base;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  __base = v11;
  v10 = 0x400000000;
  v4 = *(_DWORD *)(a2 + 40);
  if (v4)
  {
    sub_1C62C1D5C((uint64_t)&__base, a2 + 32);
    v4 = v10;
  }
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    if (v4 >= HIDWORD(v10))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v11, v4 + 1, 8);
      v4 = v10;
    }
    *((_QWORD *)__base + v4) = v5;
    v4 = v10 + 1;
    LODWORD(v10) = v10 + 1;
  }
  if (v4 >= 2)
    qsort(__base, v4, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C618ABDC);
  v6 = sub_1C5B9CA40(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)&__base, &v8);
  if (__base != v11)
    free(__base);
  return v6;
}

_OWORD *sub_1C5BA0730(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C631D334(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C866A350;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1C5BA07F8(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = xmmword_1C866A350;
        v6 = (_OWORD *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(24 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C866A350;
          result += 6;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

float sub_1C5BA0908(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL4 v9;

  if (a2)
  {
    LODWORD(v3) = 0;
    v4 = a1 + 96 * a2;
    do
    {
      if (*(_QWORD *)(a1 + 80) == a3)
      {
        v9 = 1;
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v6)
        {
          v7 = 8 * v6;
          v8 = *(_QWORD **)(a1 + 32);
          while (*v8 != a3)
          {
            ++v8;
            v7 -= 8;
            if (!v7)
            {
              v8 = (_QWORD *)(v5 + 8 * v6);
              break;
            }
          }
        }
        else
        {
          v8 = *(_QWORD **)(a1 + 32);
        }
        v9 = v6 != ((uint64_t)v8 - v5) >> 3;
      }
      v3 = (v3 + v9);
      a1 += 96;
    }
    while (a1 != v4);
  }
  else
  {
    v3 = 0;
  }
  return (float)((unint64_t)a2 - v3) / (float)a2;
}

_QWORD *sub_1C5BA09A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C631D558(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5BA0A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, unsigned int *a6, uint64_t a7)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _DWORD *v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  _BYTE v62[44];
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[128];
  char v68[24];
  uint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  char *v72;
  uint64_t v73;
  _QWORD v74[7];

  v74[4] = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)(a4 + 8);
  v12 = *(_QWORD *)(a1 + 360);
  v69 = 1;
  v70 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v71 = v70;
  v72 = (char *)v74;
  v73 = 0x400000000;
  v13 = *((_QWORD *)a6 + 1);
  if (v13 == *(_QWORD *)a6)
    v14 = a6 + 5;
  else
    v14 = a6 + 4;
  v15 = *v14;
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = (unint64_t *)*((_QWORD *)a6 + 1);
    while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
        goto LABEL_21;
    }
  }
  else
  {
    v17 = (unint64_t *)*((_QWORD *)a6 + 1);
  }
  v18 = (unint64_t *)(v13 + 8 * v15);
  if (v17 != v18)
  {
    v59 = v11;
    v19 = (_QWORD *)(v12 + 1904 * v11 + 1840);
LABEL_12:
    v63 = 0;
    v63 = (_BYTE *)*v17;
    v20 = sub_1C477672C((uint64_t)v19, (uint64_t)v63);
    v21 = v19[1];
    if (v21 == *v19)
      v22 = 20;
    else
      v22 = 16;
    if (v20 != (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)v19 + v22)))
      sub_1C61ABE04((uint64_t)&v69, (uint64_t *)&v63);
    v23 = v17 + 1;
    v11 = v59;
    while (v23 != v18)
    {
      v24 = *v23++;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v17 = v23 - 1;
        goto LABEL_12;
      }
    }
  }
LABEL_21:
  v63 = v67;
  v64 = v67;
  v65 = 16;
  v66 = 0;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = *(_DWORD *)(a1 + 72);
  *(_QWORD *)&v61 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)&v61 + 1) = v25;
  *(_QWORD *)v62 = v26;
  *(_DWORD *)&v62[40] = v27;
  v28 = v12 + 1904 * v11;
  memset(&v62[8], 0, 32);
  v29 = *(_DWORD *)(v28 + 680);
  if (!v29)
    goto LABEL_84;
  v60 = v12 + 1904 * v11;
  v30 = *(_QWORD *)(v28 + 672);
  v31 = v30 + 96 * v29;
  v33 = (_OWORD *)a3;
  v32 = a7;
  v34 = (_DWORD *)(a3 + 24);
  do
  {
    if (*(_DWORD *)(a1 + 72) != 1 || *(_DWORD *)(v60 + 24) != 2)
    {
      v36 = *(_QWORD *)(v30 + 80);
      v37 = *(unsigned int *)(v30 + 40);
      if (v36)
        v38 = v37 + 1;
      else
        v38 = *(unsigned int *)(v30 + 40);
      if (v38 >= v73)
        LODWORD(v38) = v73;
      if ((_DWORD)v73)
      {
        v39 = (uint64_t *)v72;
        while (1)
        {
          v40 = *v39;
          if (v36)
          {
            if (v36 == v40)
              goto LABEL_90;
          }
          v41 = *(_QWORD *)(v30 + 32);
          if ((_DWORD)v37)
          {
            v42 = 8 * v37;
            v43 = *(_QWORD **)(v30 + 32);
            while (*v43 != v40)
            {
              ++v43;
              v42 -= 8;
              if (!v42)
              {
                v43 = (_QWORD *)(v41 + 8 * v37);
                break;
              }
            }
          }
          else
          {
            v43 = *(_QWORD **)(v30 + 32);
          }
          if (v37 != ((uint64_t)v43 - v41) >> 3)
          {
LABEL_90:
            LODWORD(v38) = v38 - 1;
            if (!(_DWORD)v38)
              break;
          }
          if (++v39 == (uint64_t *)&v72[8 * v73])
            goto LABEL_45;
        }
      }
      else
      {
LABEL_45:
        if ((_DWORD)v38)
          goto LABEL_81;
      }
    }
    v44 = a5[1];
    v61 = *a5;
    *(_OWORD *)v62 = v44;
    *(_OWORD *)&v62[16] = a5[2];
    *(_OWORD *)&v62[28] = *(__int128 *)((char *)a5 + 44);
    if (&v63 != (_BYTE **)a6)
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v63, (const llvm::SmallPtrSetImplBase *)a6);
    sub_1C5B9F28C((uint64_t)&v61, (uint64_t *)v30, (llvm::SmallPtrSetImplBase *)&v63, v32, v60, 0);
    if (word_1ED820000)
      v45 = byte_1ED820078 == 0;
    else
      v45 = 1;
    if (!v45 && *(_DWORD *)&v62[8] != *v34)
    {
      if (*(_DWORD *)&v62[8] >= *v34)
        goto LABEL_81;
LABEL_56:
      v46 = *(unsigned int *)(a4 + 8);
      if (v46 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v46 + 1, 8);
        v46 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v46) = v30;
      v47 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v47;
      if (v47 != *(_DWORD *)(a1 + 368))
      {
        sub_1C5BA0A5C(a1, a2, v33, a4, &v61, &v63, v32);
        v52 = (uint64_t *)(v30 + 80);
        v53 = *(_QWORD *)(v30 + 80);
        v54 = *(unsigned int *)(v30 + 40);
        if (v53)
          ++v54;
        if (v54 == 1 && *(_DWORD *)(a4 + 8) == 1)
        {
          if (!v53)
            v52 = *(uint64_t **)(v30 + 32);
          sub_1C61B7564((uint64_t)v68, v32, v52);
        }
        goto LABEL_80;
      }
      v48 = *(_OWORD *)v62;
      *v33 = v61;
      v33[1] = v48;
      v33[2] = *(_OWORD *)&v62[16];
      *(_OWORD *)((char *)v33 + 44) = *(_OWORD *)&v62[28];
      if (a2 == a4)
      {
LABEL_80:
        --*(_DWORD *)(a4 + 8);
        goto LABEL_81;
      }
      v49 = *(unsigned int *)(a4 + 8);
      v50 = a2;
      v51 = *(unsigned int *)(a2 + 8);
      if (v51 >= v49)
      {
        if ((_DWORD)v49)
        {
          memmove(*(void **)a2, *(const void **)a4, 8 * v49);
          v50 = a2;
        }
        *(_DWORD *)(v50 + 8) = v49;
        goto LABEL_79;
      }
      if (*(_DWORD *)(a2 + 12) >= v49)
      {
        if ((_DWORD)v51)
        {
          memmove(*(void **)a2, *(const void **)a4, 8 * v51);
LABEL_76:
          v55 = *(unsigned int *)(a4 + 8);
          if (v51 != v55)
            memcpy((void *)(*(_QWORD *)a2 + 8 * v51), (const void *)(*(_QWORD *)a4 + 8 * v51), *(_QWORD *)a4 + 8 * v55 - (*(_QWORD *)a4 + 8 * v51));
          *(_DWORD *)(a2 + 8) = v49;
LABEL_79:
          v33 = (_OWORD *)a3;
          v32 = a7;
          goto LABEL_80;
        }
      }
      else
      {
        *(_DWORD *)(a2 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v49, 8);
      }
      v51 = 0;
      goto LABEL_76;
    }
    if ((*(unsigned int (**)(_QWORD, _BYTE *, _DWORD *))(***(_QWORD ***)v62 + 272))(**(_QWORD **)v62, &v62[8], v34))
    {
      goto LABEL_56;
    }
LABEL_81:
    v30 += 96;
  }
  while (v30 != v31);
  if (v64 != v63)
    free(v64);
LABEL_84:
  if (v72 != (char *)v74)
    free(v72);
  if ((v69 & 1) == 0)
    MEMORY[0x1CAA32FB4](v70.i64[0], 8);
}

uint64_t sub_1C5BA0FA4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 8 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 8 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_1C5BA1040(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C631D7AC(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unsigned __int8 *sub_1C5BA10F8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char *a5, uint64_t a6, unsigned int *a7)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  const llvm::SmallPtrSetImplBase *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t LoopLatch;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  const llvm::SmallPtrSetImplBase *v39;
  uint64_t NearestCommonDominator;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const llvm::Instruction *v48;
  char *v49;
  char *v50;
  const llvm::SmallPtrSetImplBase *v51;
  const llvm::Instruction *v52;
  const llvm::Value **v53;
  uint64_t v54;
  const llvm::Value *v55;
  uint64_t v56;
  const llvm::Instruction *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  _QWORD *v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  BOOL v95;
  uint64_t v96;
  void *v99;
  void *v100;
  llvm::Value *v101;
  llvm::Type *v102;
  llvm::Type *v103;
  llvm::Type *v104;
  llvm::Type *v105;
  llvm::Value *v106;
  llvm::Type *v107;
  uint64_t v108;
  llvm::Value *v109;
  llvm::Type *v110;
  uint64_t *v111;
  uint64_t v112;
  llvm::Instruction **v113;
  llvm::ScalarEvolution *v114;
  unsigned __int8 *v115;
  unint64_t Unknown;
  _QWORD *v117;
  llvm::Value *v118;
  llvm::Instruction **v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unsigned int v124;
  llvm::Instruction **v125;
  unsigned __int8 *v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  llvm::ConstantInt *v132;
  uint64_t v133;
  llvm::ScalarEvolution *v134;
  llvm::Value **v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t v138;
  llvm::ScalarEvolution *v139;
  llvm::Value **v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  llvm::ScalarEvolution *v144;
  llvm::Instruction **Constant;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  void *v149;
  unsigned int *v150;
  unsigned int v151;
  llvm::ValueHandleBase *v152;
  llvm::ConstantInt *v153;
  llvm::Value **v154;
  int v155;
  uint64_t Cast;
  int CastOpcode;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v163;
  llvm::Instruction **v164;
  int v165;
  llvm::ScalarEvolution *v166;
  unsigned __int8 *v167;
  unint64_t v168;
  llvm::Instruction **AddExpr;
  unsigned __int8 *v170;
  unint64_t v171;
  unsigned int v172;
  llvm::ScalarEvolution *v173;
  unsigned __int8 *v174;
  unint64_t v175;
  llvm::Type *v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  void *v180;
  unsigned int v181;
  _QWORD *v182;
  llvm::Type *v183;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  _QWORD v191[8];
  void *v192;
  uint64_t v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;

  v7 = a3;
  v196 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 657))
    return (unsigned __int8 *)a3[1];
  v14 = v191;
  v189 = v191;
  v190 = 0x400000000;
  v15 = a3[1];
  if (v15)
    v16 = *(unsigned __int8 *)(v15 + 16) >= 0x1Cu;
  else
    v16 = 0;
  if (v16)
  {
    v191[0] = a3[1];
    v17 = 1;
    LODWORD(v190) = 1;
  }
  else
  {
    v17 = 0;
  }
  if (*(_DWORD *)(a2 + 24) == 3)
  {
    v18 = *(_QWORD *)(*a3 - 32);
    if (v18 && *(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
    {
      v191[v17] = v18;
      LODWORD(v190) = v17 + 1;
    }
  }
  v20 = (const llvm::SmallPtrSetImplBase *)(a3 + 2);
  v21 = sub_1C477672C((uint64_t)(a3 + 2), *(_QWORD *)(a1 + 56));
  v23 = (unint64_t *)v7[2];
  v22 = (unint64_t *)v7[3];
  v25 = *((_DWORD *)v7 + 8);
  v24 = *((_DWORD *)v7 + 9);
  if (v22 == v23)
    v26 = *((_DWORD *)v7 + 9);
  else
    v26 = *((_DWORD *)v7 + 8);
  v188 = a4;
  if (v21 != &v22[v26])
  {
    if (sub_1C5B9AA10(v7, *(_QWORD *)(a1 + 56)))
    {
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(a1 + 56));
      v28 = *(_QWORD *)(LoopLatch + 40);
      if (v28 == LoopLatch + 40)
      {
        v30 = 0;
      }
      else
      {
        if (v28)
          v29 = v28 - 24;
        else
          v29 = 0;
        if (*(unsigned __int8 *)(v29 + 16) - 29 >= 0xB)
          v30 = 0;
        else
          v30 = v29;
      }
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 80);
    }
    v31 = v190;
    if (v190 >= HIDWORD(v190))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
      v31 = v190;
    }
    *((_QWORD *)v189 + v31) = v30;
    LODWORD(v190) = v190 + 1;
    v23 = (unint64_t *)v7[2];
    v22 = (unint64_t *)v7[3];
    v25 = *((_DWORD *)v7 + 8);
    v24 = *((_DWORD *)v7 + 9);
    a4 = v188;
  }
  v187 = a2;
  if (v22 == v23)
    v32 = v24;
  else
    v32 = v25;
  v33 = v22;
  if ((_DWORD)v32)
  {
    v34 = 8 * v32;
    v33 = v22;
    while (*v33 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v33;
      v34 -= 8;
      if (!v34)
        goto LABEL_66;
    }
  }
  v35 = &v22[v32];
  if (v33 != v35)
  {
    v36 = (_QWORD *)*v33;
LABEL_43:
    if (v36 != *(_QWORD **)(a1 + 56))
    {
      v192 = &v194;
      v193 = 0x400000000;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v36, (uint64_t)&v192);
      v37 = v193;
      if ((_DWORD)v193)
      {
        v185 = (uint64_t)v14;
        v38 = v7;
        v39 = v20;
        NearestCommonDominator = *(_QWORD *)v192;
        if ((_DWORD)v193 != 1)
        {
          v41 = 1;
          do
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a1 + 16), NearestCommonDominator, *((_QWORD *)v192 + v41++));
          while (v37 != (_DWORD)v41);
        }
        v42 = *(_QWORD *)(NearestCommonDominator + 40);
        if (v42 == NearestCommonDominator + 40)
        {
          v44 = 0;
        }
        else
        {
          if (v42)
            v43 = v42 - 24;
          else
            v43 = 0;
          if (*(unsigned __int8 *)(v43 + 16) - 29 >= 0xB)
            v44 = 0;
          else
            v44 = v43;
        }
        v20 = v39;
        v45 = v190;
        v7 = v38;
        v14 = (_QWORD *)v185;
        if (v190 >= (unint64_t)HIDWORD(v190))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v185, v190 + 1, 8);
          v45 = v190;
        }
        *((_QWORD *)v189 + v45) = v44;
        LODWORD(v190) = v190 + 1;
      }
      if (v192 != &v194)
        free(v192);
      a4 = v188;
    }
    v46 = v33 + 1;
    while (v46 != v35)
    {
      v47 = *v46++;
      v36 = (_QWORD *)v47;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v33 = v46 - 1;
        goto LABEL_43;
      }
    }
  }
LABEL_66:
  v48 = (const llvm::Instruction *)(a5 - 24);
  if (a5)
    v49 = a5 - 24;
  else
    v49 = 0;
  v50 = a5;
  if (v49[16] == 38)
    goto LABEL_137;
  v50 = a5;
  v182 = v7;
  v186 = v14;
  do
  {
    if ((_DWORD)v190)
    {
      v51 = v20;
      v52 = 0;
      v53 = (const llvm::Value **)v189;
      v54 = 8 * v190;
      do
      {
        v55 = *v53;
        if (*v53 == v48 || !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 16), *v53, v48))
        {
          a4 = v188;
          v20 = v51;
          v7 = v182;
          v14 = v186;
          goto LABEL_137;
        }
        if (*((_QWORD *)v48 + 5) == *((_QWORD *)v55 + 5)
          && (!v52 || !llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 16), v55, v52)))
        {
          v56 = *((_QWORD *)v55 + 4);
          if (v56)
            v52 = (const llvm::Instruction *)(v56 - 24);
          else
            v52 = 0;
        }
        ++v53;
        v54 -= 8;
      }
      while (v54);
    }
    else
    {
      v51 = v20;
      v52 = 0;
    }
    if (v52)
      v57 = v52;
    else
      v57 = v48;
    v58 = *(uint64_t **)(a1 + 24);
    v59 = *((_QWORD *)v57 + 5);
    v60 = *v58;
    v61 = *((_DWORD *)v58 + 4);
    v62 = v59 >> 4;
    if (v61)
    {
      v63 = (v62 ^ (v59 >> 9)) & (v61 - 1);
      v64 = *(_QWORD *)(v60 + 16 * v63);
      a4 = v188;
      v20 = v51;
      v14 = v186;
      if (v59 != v64)
      {
        v65 = 1;
        v7 = v182;
        while (v64 != -4096)
        {
          v66 = v63 + v65++;
          v63 = v66 & (v61 - 1);
          v64 = *(_QWORD *)(v60 + 16 * v63);
          if (v59 == v64)
            goto LABEL_95;
        }
        v67 = 0;
LABEL_99:
        v68 = 0;
        goto LABEL_100;
      }
      v7 = v182;
LABEL_95:
      v67 = *(_QWORD **)(v60 + 16 * v63 + 8);
      if (!v67)
        goto LABEL_99;
      v68 = 0;
      v69 = v67;
      do
      {
        v69 = (_QWORD *)*v69;
        ++v68;
      }
      while (v69);
    }
    else
    {
      v67 = 0;
      v68 = 0;
      a4 = v188;
      v20 = v51;
      v7 = v182;
      v14 = v186;
    }
LABEL_100:
    v70 = *(_QWORD *)(a1 + 16);
    v71 = *(_QWORD *)(v70 + 24);
    v72 = *(unsigned int *)(v70 + 40);
    if ((_DWORD)v72)
    {
      LODWORD(v73) = (v72 - 1) & (v62 ^ (v59 >> 9));
      v74 = (uint64_t *)(v71 + 16 * v73);
      v75 = *v74;
      if (v59 == *v74)
        goto LABEL_107;
      v76 = 1;
      while (v75 != -4096)
      {
        v77 = v73 + v76++;
        v73 = v77 & (v72 - 1);
        v75 = *(_QWORD *)(v71 + 16 * v73);
        if (v59 == v75)
        {
          v74 = (uint64_t *)(v71 + 16 * v73);
          goto LABEL_107;
        }
      }
    }
    v74 = (uint64_t *)(v71 + 16 * v72);
LABEL_107:
    v50 = (char *)v57 + 24;
    if (v74 == (uint64_t *)(v71 + 16 * v72))
      goto LABEL_137;
    v78 = v74[1];
    if (!v78)
      goto LABEL_137;
    v79 = *(uint64_t **)(v78 + 8);
    if (!v79)
      goto LABEL_137;
    v80 = v61 - 1;
    while (1)
    {
      v81 = *v79;
      if (!v61)
        goto LABEL_121;
      v82 = ((v81 >> 4) ^ (v81 >> 9)) & v80;
      v83 = *(_QWORD *)(v60 + 16 * v82);
      if (v81 != v83)
      {
        v84 = 1;
        while (v83 != -4096)
        {
          v85 = v82 + v84++;
          v82 = v85 & v80;
          v83 = *(_QWORD *)(v60 + 16 * v82);
          if (v81 == v83)
            goto LABEL_116;
        }
LABEL_121:
        v87 = 0;
        v86 = 0;
        goto LABEL_123;
      }
LABEL_116:
      v86 = *(_QWORD **)(v60 + 16 * v82 + 8);
      if (v86)
      {
        v87 = 0;
        v88 = v86;
        do
        {
          v88 = (_QWORD *)*v88;
          ++v87;
        }
        while (v88);
        if (v87 > v68)
          goto LABEL_125;
      }
      else
      {
        v87 = 0;
      }
LABEL_123:
      if (v87 != v68 || v86 == v67)
        break;
LABEL_125:
      v79 = (uint64_t *)v79[1];
      if (!v79)
        goto LABEL_137;
    }
    v89 = *(_QWORD *)(v81 + 40);
    v48 = (const llvm::Instruction *)(v89 - 24);
    if (v89)
      v90 = v89 - 24;
    else
      v90 = 0;
    if (*(unsigned __int8 *)(v90 + 16) - 29 >= 0xB)
      v90 = 0;
  }
  while (*(_BYTE *)(v90 + 16) != 38);
  while (1)
  {
LABEL_137:
    v91 = v50 - 24;
    if (!v50)
      v91 = 0;
    if (v91[16] != 83)
      break;
    v50 = (char *)*((_QWORD *)v50 + 1);
  }
  while (1)
  {
    v92 = (uint64_t)(v50 - 24);
    v93 = v50 ? (uint64_t)(v50 - 24) : 0;
    v94 = *(unsigned __int8 *)(v93 + 16) - 38;
    v95 = v94 > 0x38;
    v96 = (1 << v94) & 0x100060000000001;
    if (v95 || v96 == 0)
      break;
    v50 = (char *)*((_QWORD *)v50 + 1);
  }
  if (sub_1C4D99D08(v93))
  {
    do
    {
      v50 = (char *)*((_QWORD *)v50 + 1);
      if (v50)
        v92 = (uint64_t)(v50 - 24);
      else
        v92 = 0;
    }
    while (sub_1C4D99D08(v92));
  }
  while (sub_1C5BA2178(a6, v92) && v50 != a5)
  {
    v50 = (char *)*((_QWORD *)v50 + 1);
    if (v50)
      v92 = (uint64_t)(v50 - 24);
    else
      v92 = 0;
  }
  if (v189 != v14)
    free(v189);
  *(_QWORD *)(a6 + 496) = *(_QWORD *)(v92 + 40);
  *(_QWORD *)(a6 + 504) = v92 + 24;
  v99 = *(void **)(v92 + 48);
  v189 = v99;
  if (v99)
  {
    llvm::MetadataTracking::track((uint64_t)&v189, (unsigned __int8 *)v99, 2);
    v100 = v189;
  }
  else
  {
    v100 = 0;
  }
  sub_1C4774EF4(a6 + 448, 0, (uint64_t)v100);
  if (v189)
    llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
  if ((const llvm::SmallPtrSetImplBase *)(a6 + 352) != v20)
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(a6 + 352), v20);
  v101 = *(llvm::Value **)v7[1];
  v102 = (llvm::Type *)sub_1C5B9ED5C(a4);
  v103 = v101;
  if (v102)
  {
    v104 = v102;
    if (*((_BYTE *)v102 + 8) != 13)
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272), v102);
    v105 = v102;
    v106 = v101;
    if (*((_BYTE *)v101 + 8) != 13)
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272), v101);
    if (v105 == v106)
      v103 = v101;
    else
      v103 = v104;
  }
  v107 = v103;
  if (*((_BYTE *)v103 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272), v103);
    v107 = v176;
  }
  v189 = v191;
  v190 = 0x800000000;
  v108 = *(unsigned int *)(a4 + 40);
  if ((_DWORD)v108)
  {
    v183 = v103;
    v109 = v101;
    v110 = v107;
    v111 = *(uint64_t **)(a4 + 32);
    v112 = 8 * v108;
    do
    {
      v113 = (llvm::Instruction **)llvm::denormalizeForPostIncUse(*v111, (uint64_t)v20, *(_QWORD *)(a1 + 8));
      v114 = *(llvm::ScalarEvolution **)(a1 + 8);
      v115 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v113, 0);
      Unknown = llvm::ScalarEvolution::getUnknown(v114, (llvm::Value *)v115);
      v108 = v190;
      if (v190 >= (unint64_t)HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
        v108 = v190;
      }
      *((_QWORD *)v189 + v108) = Unknown;
      LODWORD(v108) = v190 + 1;
      LODWORD(v190) = v190 + 1;
      ++v111;
      v112 -= 8;
    }
    while (v112);
    v107 = v110;
    v101 = v109;
    v103 = v183;
  }
  if (!*(_QWORD *)(a4 + 24))
  {
    v117 = 0;
    goto LABEL_188;
  }
  v164 = (llvm::Instruction **)llvm::denormalizeForPostIncUse(*(_QWORD *)(a4 + 80), (uint64_t)v20, *(_QWORD *)(a1 + 8));
  v165 = *(_DWORD *)(v187 + 24);
  if (v165 == 3)
  {
    if (*(_QWORD *)(a4 + 24) == 1)
    {
      v166 = *(llvm::ScalarEvolution **)(a1 + 8);
      v167 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v164, 0);
      v168 = llvm::ScalarEvolution::getUnknown(v166, (llvm::Value *)v167);
      goto LABEL_270;
    }
    v117 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v164, 0);
    LODWORD(v108) = v190;
  }
  else
  {
    if (v165 == 2 && (_DWORD)v190 && sub_1C5B9FC74(*(uint64_t **)(a1 + 48), v187, (uint64_t *)a4))
    {
      AddExpr = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)&v189, 0, 0);
      v170 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, AddExpr, 0);
      LODWORD(v190) = 0;
      v171 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v170);
      v172 = v190;
      if (v190 >= HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
        v172 = v190;
      }
      *((_QWORD *)v189 + v172) = v171;
      LODWORD(v190) = v190 + 1;
    }
    v173 = *(llvm::ScalarEvolution **)(a1 + 8);
    v174 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v164, 0);
    v175 = llvm::ScalarEvolution::getUnknown(v173, (llvm::Value *)v174);
    v168 = v175;
    if (*(_QWORD *)(a4 + 24) != 1)
      __asm { BR              X11 }
LABEL_270:
    v181 = v190;
    if (v190 >= HIDWORD(v190))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
      v181 = v190;
    }
    v117 = 0;
    *((_QWORD *)v189 + v181) = v168;
    LODWORD(v108) = v190 + 1;
    LODWORD(v190) = v190 + 1;
  }
LABEL_188:
  v118 = *(llvm::Value **)a4;
  if (*(_QWORD *)a4)
  {
    if ((_DWORD)v108)
    {
      v119 = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)&v189, 0, 0);
      v120 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v119, v107);
      LODWORD(v190) = 0;
      v121 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v120);
      v122 = v190;
      if (v190 >= HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
        v122 = v190;
      }
      *((_QWORD *)v189 + v122) = v121;
      LODWORD(v190) = v190 + 1;
      v118 = *(llvm::Value **)a4;
    }
    v123 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), v118);
    v124 = v190;
    if (v190 >= HIDWORD(v190))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
      v124 = v190;
    }
    *((_QWORD *)v189 + v124) = v123;
    LODWORD(v108) = v190 + 1;
    LODWORD(v190) = v190 + 1;
  }
  if ((_DWORD)v108)
  {
    v125 = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr(*(_QWORD *)(a1 + 8), (uint64_t)&v189, 0, 0);
    v126 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, v125, v103);
    LODWORD(v190) = 0;
    v127 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v126);
    v128 = v190;
    if (v190 >= HIDWORD(v190))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
      v128 = v190;
    }
    *((_QWORD *)v189 + v128) = v127;
    LODWORD(v190) = v190 + 1;
  }
  v129 = v7[8] + *(_QWORD *)(a4 + 8);
  if (v129)
  {
    if (*(_DWORD *)(v187 + 24) == 3)
    {
      if (v117)
      {
        v130 = llvm::ScalarEvolution::getUnknown(*(llvm::ScalarEvolution **)(a1 + 8), (llvm::Value *)v117);
        v131 = v190;
        if (v190 >= HIDWORD(v190))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
          v131 = v190;
        }
        *((_QWORD *)v189 + v131) = v130;
        LODWORD(v190) = v190 + 1;
        v132 = v107;
        v133 = v129;
      }
      else
      {
        v133 = -v129;
        v132 = v107;
      }
      v117 = llvm::ConstantInt::get(v132, v133, 0);
    }
    else
    {
      v134 = *(llvm::ScalarEvolution **)(a1 + 8);
      v135 = llvm::ConstantInt::get(v107, v129, (const llvm::APInt *)1);
      v136 = llvm::ScalarEvolution::getUnknown(v134, (llvm::Value *)v135);
      v137 = v190;
      if (v190 >= HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
        v137 = v190;
      }
      *((_QWORD *)v189 + v137) = v136;
      LODWORD(v190) = v190 + 1;
    }
  }
  v138 = *(_QWORD *)(a4 + 88);
  if (v138)
  {
    v139 = *(llvm::ScalarEvolution **)(a1 + 8);
    v140 = llvm::ConstantInt::get(v107, v138, (const llvm::APInt *)1);
    v141 = llvm::ScalarEvolution::getUnknown(v139, (llvm::Value *)v140);
    v142 = v190;
    if (v190 >= HIDWORD(v190))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 8);
      v142 = v190;
    }
    *((_QWORD *)v189 + v142) = v141;
    v143 = v190 + 1;
    LODWORD(v190) = v190 + 1;
  }
  else
  {
    v143 = v190;
  }
  v144 = *(llvm::ScalarEvolution **)(a1 + 8);
  if (v143)
    Constant = (llvm::Instruction **)llvm::ScalarEvolution::getAddExpr((uint64_t)v144, (uint64_t)&v189, 0, 0);
  else
    Constant = (llvm::Instruction **)llvm::ScalarEvolution::getConstant(v144, v107, 0, 0);
  v8 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)a6, Constant, v103);
  v146 = *(void **)(a6 + 360);
  if (v146 == *(void **)(a6 + 352))
  {
LABEL_220:
    *(_QWORD *)(a6 + 372) = 0;
  }
  else
  {
    v163 = *(unsigned int *)(a6 + 368);
    if (v163 < 0x21 || 4 * (*(_DWORD *)(a6 + 372) - *(_DWORD *)(a6 + 376)) >= v163)
    {
      memset(v146, 255, 8 * v163);
      goto LABEL_220;
    }
    free(v146);
    v177 = *(_DWORD *)(a6 + 372) - *(_DWORD *)(a6 + 376);
    v178 = 1 << (33 - __clz(v177 - 1));
    if (v177 <= 0x10)
      v179 = 32;
    else
      v179 = v178;
    *(_DWORD *)(a6 + 368) = v179;
    *(_QWORD *)(a6 + 372) = 0;
    v180 = malloc_type_malloc(8 * v179, 0x4065EBACuLL);
    if (!v180)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(a6 + 360) = v180;
    memset(v180, 255, 8 * *(unsigned int *)(a6 + 368));
    a4 = v188;
  }
  sub_1C4DFC0E4((_DWORD *)(a6 + 80));
  if (*(_DWORD *)(v187 + 24) == 3)
  {
    v147 = *v7;
    v148 = (_QWORD *)(v147 - 32);
    if (*(unsigned __int8 *)(*(_QWORD *)(v147 - 32) + 16) <= 0x1Bu)
      v149 = 0;
    else
      v149 = *(void **)(v147 - 32);
    v192 = v149;
    if (v149)
    {
      v150 = a7;
      v151 = a7[2];
      if (v151 >= a7[3])
      {
        sub_1C578EDF4(a7, (uint64_t *)&v192);
      }
      else
      {
        v152 = (llvm::ValueHandleBase *)(*(_QWORD *)a7 + 24 * v151);
        *(_QWORD *)v152 = 6;
        *((_QWORD *)v152 + 1) = 0;
        *((_QWORD *)v152 + 2) = v149;
        if (v149 != (void *)-8192 && v149 != (void *)-4096)
        {
          llvm::ValueHandleBase::AddToUseList(v152);
          v150 = a7;
          v151 = a7[2];
        }
        v150[2] = v151 + 1;
      }
    }
    if (*(_QWORD *)(a4 + 24) == -1)
    {
      if ((llvm::Value *)*v117 != v101)
      {
        CastOpcode = llvm::CastInst::getCastOpcode((llvm::CastInst *)v117, 0, (uint64_t)v101, 0);
        v192 = "tmp";
        v195 = 259;
        llvm::CastInst::Create(CastOpcode);
LABEL_238:
        v117 = (_QWORD *)Cast;
      }
    }
    else
    {
      v153 = v101;
      if (*((_BYTE *)v101 + 8) != 13)
        llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 272), v101);
      v154 = llvm::ConstantInt::get(v153, -v129, (const llvm::APInt *)1);
      v117 = v154;
      if (*v154 != v101)
      {
        v155 = llvm::CastInst::getCastOpcode((llvm::CastInst *)v154, 0, (uint64_t)v101, 0);
        Cast = llvm::ConstantExpr::getCast(v155);
        goto LABEL_238;
      }
    }
    if (*v148)
    {
      **(_QWORD **)(v147 - 16) = *(_QWORD *)(v147 - 24);
      v158 = *(_QWORD *)(v147 - 24);
      if (v158)
        *(_QWORD *)(v158 + 16) = *(_QWORD *)(v147 - 16);
    }
    *v148 = v117;
    if (v117)
    {
      v161 = v117[1];
      v160 = v117 + 1;
      v159 = v161;
      *(_QWORD *)(v147 - 24) = v161;
      if (v161)
        *(_QWORD *)(v159 + 16) = v147 - 24;
      *(_QWORD *)(v147 - 16) = v160;
      *v160 = v148;
    }
  }
  if (v189 != v191)
    free(v189);
  return v8;
}

uint64_t sub_1C5BA2178(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  if ((sub_1C5BA21D8((uint64_t *)(a1 + 56), &v6, &v7) & 1) != 0)
    return 1;
  v5 = a2;
  v7 = 0;
  return sub_1C5BA21D8((uint64_t *)(a1 + 80), &v5, &v7);
}

uint64_t sub_1C5BA21D8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_9;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

void *sub_1C5BA2274(uint64_t a1, llvm::ValueAsMetadata *this)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void *result;
  llvm::Value *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = 4101;
  v5 = *(void ***)(a1 + 64);
  ++*(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 72);
  result = llvm::ValueAsMetadata::get(this, this);
  if ((_DWORD)v6)
  {
    v9 = 8 * v6;
    v10 = &v5[v6];
    while (*v5 != result)
    {
      ++v5;
      v9 -= 8;
      if (!v9)
      {
        v5 = v10;
        break;
      }
    }
  }
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(unsigned int *)(a1 + 72);
  if (v5 == (void **)(v11 + 8 * v12))
  {
    result = llvm::ValueAsMetadata::get(this, v8);
    v13 = result;
    v14 = *(unsigned int *)(a1 + 72);
    if (v14 >= *(_DWORD *)(a1 + 76))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v14 + 1, 8);
      LODWORD(v14) = *(_DWORD *)(a1 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) = v13;
    ++*(_DWORD *)(a1 + 72);
  }
  else
  {
    v12 = ((uint64_t)v5 - v11) >> 3;
  }
  v15 = *(unsigned int *)(a1 + 8);
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5BA23C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  result = 0;
  if (a2 && !*(_WORD *)(a2 + 24))
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_DWORD *)(v5 + 32);
    if (v6 - sub_1C4959174((llvm::APInt *)(v5 + 24)) - 64 >= 0xFFFFFFBF)
    {
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_DWORD *)(v7 + 32);
      if (v8 > 0x40)
        v9 = **(_QWORD **)(v7 + 24);
      else
        v9 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v8) >> -(char)v8;
      result = 0;
      switch(a1)
      {
        case 27:
        case 30:
          v10 = v9 == 1;
          goto LABEL_11;
        case 28:
        case 34:
          v10 = v9 == 0;
LABEL_11:
          result = v10;
          break;
        default:
          return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C5BA248C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::ValueAsMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (a2 && !*(_WORD *)(a2 + 24))
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_DWORD *)(v5 + 32);
    if (v6 - sub_1C4959174((llvm::APInt *)(v5 + 24)) + 1 <= 0x40)
    {
      v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 8);
        LODWORD(v7) = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = 17;
      v8 = (*(_DWORD *)(a1 + 8) + 1);
      *(_DWORD *)(a1 + 8) = v8;
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_DWORD *)(v9 + 32);
      if (v10 > 0x40)
        v11 = **(_QWORD **)(v9 + 24);
      else
        v11 = (uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v10) >> -(char)v10;
      if (v8 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 8);
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v11;
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
    return 0;
  }
  if (a2 && v4 == 14)
  {
    v12 = *(llvm::ValueAsMetadata **)(a2 - 8);
    if (v12)
    {
      sub_1C5BA2274(a1, v12);
      return 1;
    }
    return 0;
  }
  if (a2 && v4 == 5)
  {
    v14 = 30;
    return sub_1C5BA2798(a1, a2, v14);
  }
  if (a2 && v4 == 6)
  {
    v16 = sub_1C5BA248C(a1, *(_QWORD *)(a2 + 32));
    v13 = v16 & sub_1C5BA248C(a1, *(_QWORD *)(a2 + 40));
    v17 = *(unsigned int *)(a1 + 8);
    if (v17 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = 27;
    ++*(_DWORD *)(a1 + 8);
    return v13;
  }
  if (v4 <= 0xD && ((1 << v4) & 0x200E) != 0)
  {
    v18 = (unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 40) + 8) >> 8;
    v13 = sub_1C5BA248C(a1, *(_QWORD *)(a2 + 32));
    v19 = 0;
    v23[0] = 4097;
    v23[1] = v18;
    v20 = 7;
    if (v4 == 3)
      v20 = 5;
    v23[2] = v20;
    v21 = *(_DWORD *)(a1 + 8);
    do
    {
      v22 = v23[v19];
      if (v21 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v21 + 1, 8);
        v21 = *(_DWORD *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v22;
      v21 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v21;
      ++v19;
    }
    while (v19 != 3);
    return v13;
  }
  v13 = 0;
  if (a2 && v4 == 4)
  {
    v14 = 34;
    return sub_1C5BA2798(a1, a2, v14);
  }
  return v13;
}

uint64_t sub_1C5BA2798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v3 = *(_QWORD *)(a2 + 40);
  if (!v3)
    return 1;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = a1 + 16;
  v9 = 8 * v3;
  LODWORD(v10) = 1;
  do
  {
    v11 = sub_1C5BA248C(a1, *(_QWORD *)(v7 + 8 * v6));
    if ((_DWORD)v6)
    {
      v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v8, v12 + 1, 8);
        v12 = *(unsigned int *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a3;
      ++*(_DWORD *)(a1 + 8);
    }
    v10 = v10 & v11;
    ++v6;
    v9 -= 8;
  }
  while (v9);
  return v10;
}

uint64_t sub_1C5BA2858()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5B8D798(v0);
}

void sub_1C5BA2884(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BA28A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 112;
  sub_1C4771E64(a2, a2 + 112, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)byte_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::IVUsersWrapperPass::ID);
  sub_1C4771E64(a2, v3, (uint64_t)&llvm::IVUsersWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, v3, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1C5BA29F4(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void **v7;
  void *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t *v15;
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char *v27;
  llvm::AssumptionCacheTracker *v28;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t AnalysisPass;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void **v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssumptionCache;
  uint64_t v55[2];
  int v56;
  uint64_t v57[2];
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void *__src;
  unsigned int v64;
  _QWORD v65[2];
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;

  v4 = (uint64_t)a2;
  v71 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    return 0;
  v7 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::IVUsersWrapperPass::ID);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::IVUsersWrapperPass::ID)+ 32);
  v10 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ScalarEvolutionWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v13 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::DominatorTreeWrapperPass::ID);
  v15 = (uint64_t *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::DominatorTreeWrapperPass::ID);
  v16 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::LoopInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::LoopInfoWrapperPass::ID);
  v19 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::TargetTransformInfoWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v62 = 0;
  __src = 0;
  v64 = 0;
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v22 = *(_QWORD *)(v21 + 56);
  if (!v22)
  {
    sub_1C485C2F0();
    goto LABEL_54;
  }
  v3 = (uint64_t)(v15 + 4);
  v15 = v65;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v22 + 48))(v55);
  v2 = (uint64_t *)(v21 + 64);
  v23 = v55[0];
  if (!*(_BYTE *)(v21 + 72))
  {
    *(_QWORD *)(v21 + 64) = v55[0];
    *(_BYTE *)(v21 + 72) = 1;
    goto LABEL_17;
  }
  v55[0] = 0;
  v24 = *v2;
  *v2 = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v55[0];
    v55[0] = 0;
    if (v25)
LABEL_54:
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_17:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v15);
  sub_1C4D8B52C(&v62);
  v26 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v27 = *v26;
    v26 += 2;
  }
  while (v27 != llvm::AssumptionCacheTracker::ID);
  v28 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v26 - 1) + 96))(*(v26 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v28, *(llvm::Function **)(**(_QWORD **)(v4 + 32) + 56));
  v29 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != llvm::TargetLibraryInfoWrapperPass::ID);
  v31 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v32 = *(_QWORD *)(**(_QWORD **)(v4 + 32) + 56);
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  llvm::TargetLibraryAnalysis::run(v31 + 32, v32, (uint64_t)&v62);
  *(_QWORD *)(v31 + 240) = v62;
  v53 = v18;
  if (!*(_BYTE *)(v31 + 320))
  {
    v43 = v4;
    v44 = v2;
    v45 = v3;
    v46 = v12;
    v47 = v9;
    v48 = (void *)(v31 + 264);
    *(_QWORD *)(v31 + 248) = v31 + 264;
    v49 = (void **)(v31 + 248);
    *(_QWORD *)(v31 + 256) = 0x600000000;
    v50 = v64;
    if (!v64 || v49 == &__src)
      goto LABEL_52;
    if (v64 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 248, v31 + 264, v64, 8);
      v51 = v64;
      if (!v64)
      {
LABEL_51:
        *(_DWORD *)(v31 + 256) = v50;
LABEL_52:
        *(_DWORD *)(v31 + 312) = v70;
        *(_BYTE *)(v31 + 320) = 1;
        v9 = v47;
        v12 = v46;
        v3 = v45;
        v2 = v44;
        v4 = v43;
        v18 = v53;
        goto LABEL_35;
      }
      v48 = *v49;
    }
    else
    {
      v51 = v64;
    }
    memcpy(v48, __src, 8 * v51);
    goto LABEL_51;
  }
  if ((uint64_t *)(v31 + 240) != &v62)
  {
    v52 = v4;
    v33 = v2;
    v34 = v3;
    v35 = v12;
    v36 = v9;
    v37 = (void **)(v31 + 248);
    v38 = v64;
    v39 = *(unsigned int *)(v31 + 256);
    if (v39 >= v64)
    {
      if (v64)
        memmove(*v37, __src, 8 * v64);
      goto LABEL_33;
    }
    if (*(_DWORD *)(v31 + 260) < v64)
    {
      *(_DWORD *)(v31 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 248, v31 + 264, v38, 8);
    }
    else if ((_DWORD)v39)
    {
      memmove(*v37, __src, 8 * v39);
      goto LABEL_31;
    }
    v39 = 0;
LABEL_31:
    if (v39 != v64)
      memcpy((char *)*v37 + 8 * v39, (char *)__src + 8 * v39, 8 * v64 - 8 * v39);
LABEL_33:
    *(_DWORD *)(v31 + 256) = v38;
    v9 = v36;
    v12 = v35;
    v3 = v34;
    v2 = v33;
    v4 = v52;
    v18 = v53;
  }
  *(_DWORD *)(v31 + 312) = v70;
LABEL_35:
  if (__src != v65)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v57);
  sub_1C4D8B52C(v55);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::MemorySSAWrapperPass::ID, 1);
  if (AnalysisPass
    && (v41 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MemorySSAWrapperPass::ID)) != 0)
  {
    v42 = *(_QWORD *)(v41 + 32);
  }
  else
  {
    v42 = 0;
  }
  return sub_1C5B8C050(v4, v9, v12, v3, v18 + 32, (uint64_t)v2, AssumptionCache, v31 + 240, v42);
}

void sub_1C5BA2F50(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C631D9F8(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C5BA2F94(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED820468 >= HIDWORD(qword_1ED820468))
  {
    v3 = qword_1ED820468 + 1;
    if (qword_1ED820460 <= a1 && qword_1ED820460 + 48 * (unint64_t)qword_1ED820468 > a1)
    {
      v5 = a1 - qword_1ED820460;
      sub_1C631DAAC(v3);
      return qword_1ED820460 + v5;
    }
    else
    {
      sub_1C631DAAC(v3);
    }
  }
  return a1;
}

uint64_t sub_1C5BA3008()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Enable LSR phi elimination";
  v5.n128_u64[1] = 26;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED81FF38, "enable-lsr-phielim", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81FF38, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Add instruction count to a LSR cost model";
  v5.n128_u64[1] = 41;
  sub_1C4E5DE0C((llvm::cl::Option *)&algn_1ED81FFB9[63], "lsr-insns-cost", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED81FFB9[63], &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Narrow LSR complex solution using expectation of registers number";
  v5.n128_u64[1] = 65;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8200B8, "lsr-exp-narrow", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8200B8, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Narrow LSR search space by filtering non-optimal formulae with the same ScaledReg and Scale";
  v5.n128_u64[1] = 91;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED820178, "lsr-filter-same-scaled-reg", &v3, (_BYTE **)&v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED820178, &dword_1C475E000);
  v4 = 1;
  v2 = 2;
  v3 = &v2;
  *(_QWORD *)&v1 = "A flag that overrides the target's preferred addressing mode.";
  *((_QWORD *)&v1 + 1) = 61;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "none";
  v6[1] = 4;
  v7 = 2;
  v8 = "Don't prefer any addressing mode";
  v9 = 32;
  v10 = "preindexed";
  v11 = 10;
  v12 = 0;
  v13 = "Prefer pre-indexed addressing mode";
  v14 = 34;
  v15 = "postindexed";
  v16 = 11;
  v17 = 1;
  v18 = "Prefer post-indexed addressing mode";
  v19 = 35;
  v5.n128_u64[1] = 0x400000003;
  sub_1C631D850(&v4, &v3, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C631C74C, &qword_1ED8203B8, &dword_1C475E000);
  LODWORD(v3) = 1;
  LOWORD(v4) = -1;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"LSR search space complexity limit";
  v5.n128_u64[1] = 33;
  sub_1C631DB78(&v3, (unsigned __int16 **)&v1, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED820238, &dword_1C475E000);
  LODWORD(v3) = 1;
  v4 = 7;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"The limit on recursion depth for LSRs setup cost";
  v5.n128_u64[1] = 48;
  sub_1C61798D0((uint64_t)&unk_1ED8202F8, "lsr-setupcost-depth-limit", &v3, (int **)&v1, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8202F8, &dword_1C475E000);
}

uint64_t llvm::gatherUnrollingPreferences@<X0>(llvm::BasicBlock ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, int a12, __int16 a13, int a14, __int16 a15, uint64_t a16)
{
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t result;
  const llvm::Loop *v25;
  uint64_t v26;
  int v27;

  v21 = &unk_1ED8212A0;
  if (a7 <= 2)
    v21 = &unk_1ED821360;
  *(_DWORD *)a9 = *v21;
  *(_DWORD *)(a9 + 4) = 400;
  v22 = dword_1ED820760;
  *(_DWORD *)(a9 + 8) = dword_1ED820760;
  *(_DWORD *)(a9 + 12) = 150;
  *(_DWORD *)(a9 + 16) = v22;
  *(_OWORD *)(a9 + 20) = xmmword_1C866A360;
  *(_DWORD *)(a9 + 36) = 2;
  *(_WORD *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 42) = 1;
  *(_DWORD *)(a9 + 43) = 0;
  *(_BYTE *)(a9 + 47) = 0;
  v23 = dword_1ED8209A0;
  *(_DWORD *)(a9 + 48) = 60;
  *(_DWORD *)(a9 + 52) = v23;
  result = (*(uint64_t (**)(_QWORD, llvm::BasicBlock ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a3 + 184))(*a3, a1, a2, a9, a6);
  v26 = *(_QWORD *)(*((_QWORD *)*a1[4] + 7) + 112);
  if (v26 && ((*(_BYTE *)(v26 + 17) & 4) != 0 || *(char *)(v26 + 13) < 0)
    || (result = llvm::hasUnrollTransformation((llvm *)a1, v25), (_DWORD)result != 5)
    && (result = llvm::shouldOptimizeForSize(*a1[4], a5, a4), (_DWORD)result))
  {
    v27 = *(_DWORD *)(a9 + 8);
    *(_DWORD *)(a9 + 12) = *(_DWORD *)(a9 + 16);
    *(_DWORD *)a9 = v27;
    *(_DWORD *)(a9 + 4) = 100;
  }
  if (word_1ED820628)
    *(_DWORD *)a9 = dword_1ED8206A0;
  if (word_1ED8207A8)
    *(_DWORD *)(a9 + 12) = dword_1ED820820;
  if (word_1ED820868)
    *(_DWORD *)(a9 + 4) = dword_1ED8208E0;
  if (word_1ED820AA8)
    *(_DWORD *)(a9 + 28) = dword_1ED820B20;
  if (word_1ED820B68)
    *(_DWORD *)(a9 + 32) = dword_1ED820BE0;
  if (word_1ED820C28)
    *(_BYTE *)(a9 + 40) = byte_1ED820CA0;
  if (word_1ED820CE8)
    *(_BYTE *)(a9 + 42) = byte_1ED820D60;
  if (word_1ED820DA8)
    *(_BYTE *)(a9 + 41) = byte_1ED820E20;
  if (!dword_1ED820EE0)
    *(_BYTE *)(a9 + 45) = 0;
  if (word_1ED8210A8)
    *(_BYTE *)(a9 + 46) = byte_1ED821120;
  if (word_1ED820928)
    *(_DWORD *)(a9 + 52) = dword_1ED8209A0;
  if ((a8 & 0xFF00000000) != 0)
  {
    *(_DWORD *)a9 = a8;
    *(_DWORD *)(a9 + 12) = a8;
  }
  if ((a10 & 0xFF00000000) != 0)
    *(_DWORD *)(a9 + 20) = a10;
  if ((a11 & 0xFF00) != 0)
    *(_BYTE *)(a9 + 40) = a11;
  if ((a13 & 0xFF00) != 0)
    *(_BYTE *)(a9 + 41) = a13;
  if ((a15 & 0xFF00) != 0)
    *(_BYTE *)(a9 + 45) = a15;
  if ((a16 & 0xFF00000000) != 0)
    *(_DWORD *)(a9 + 32) = a16;
  return result;
}

uint64_t llvm::ApproximateLoopSize(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4, _QWORD *a5, _QWORD *a6, int a7)
{
  llvm::BasicBlock **v11;
  uint64_t v12;
  uint64_t v15;
  llvm::BasicBlock *v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v24 = 0;
  v23 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v11 = *(llvm::BasicBlock ***)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40) - (_QWORD)v11;
  if (v12)
  {
    v15 = 8 * (v12 >> 3);
    do
    {
      v16 = *v11++;
      llvm::CodeMetrics::analyzeBasicBlock((uint64_t)&v23, v16, a5, a6, 0);
      v15 -= 8;
    }
    while (v15);
    LODWORD(v12) = HIDWORD(v29);
    v17 = BYTE2(v23);
    v18 = HIBYTE(v23);
    v19 = v25;
    v20 = v26;
  }
  else
  {
    v20 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  *a2 = v12;
  *a3 = v17;
  *a4 = v18;
  if (v19 <= a7 + 1)
    v21 = (a7 + 1);
  else
    v21 = v19;
  MEMORY[0x1CAA32FB4](v20, 8);
  return v21;
}

uint64_t llvm::computeUnrollCount(llvm::Loop *a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4, llvm::ConstantInt ****a5, _QWORD *a6, llvm::OptimizationRemarkEmitter *a7, unsigned int a8, unsigned int a9, char a10, unsigned int a11, unsigned int a12, int *a13, _DWORD *a14, _BYTE *a15)
{
  int v21;
  uint64_t LoopID;
  _BOOL4 v23;
  unsigned int v24;
  llvm::Loop *v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  llvm::Loop *v33;
  int v34;
  unsigned int v35;
  BOOL v37;
  char v38;
  unsigned int v39;
  int v40;
  _QWORD *v41;
  llvm::Loop *v42;
  unint64_t v43;
  char v44;
  unsigned int *v45;
  int v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  unsigned int *v52;
  uint64_t LoopEstimatedTripCount;
  char v54;
  _QWORD *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  _DWORD *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int *v74;
  char v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  llvm::Loop *v90;
  int data;
  uint64_t v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  void **v105;
  char *v106;
  unint64_t v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  void **v113;
  char *v114;
  unint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  void **v121;
  char *v122;
  unint64_t v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  void **v131;
  char *v132;
  unint64_t v133;
  void **v134;
  _BOOL4 v135;
  int v136;
  _BOOL4 v137;
  unsigned int *v138;
  unsigned int v139;
  llvm::Loop *v141;
  std::string v142;
  void *__p;
  char v144;
  std::string v145;
  void *v146;
  char v147;
  unsigned __int8 *v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  unsigned int v152;
  _BYTE v153[272];
  uint64_t (**v154)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  const char *v161;
  const char *v162;
  uint64_t v163;
  char v164;
  char v165;
  void *v166;
  uint64_t v167;
  _BYTE v168[256];
  char v169;
  int v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v21 = (unsigned __int16)word_1ED8209E8;
  LoopID = llvm::Loop::getLoopID(a1);
  if (LoopID)
    v23 = llvm::GetUnrollMetadata(LoopID, "llvm.loop.unroll.full", 0x15uLL) != 0;
  else
    v23 = 0;
  v24 = sub_1C5BA472C(a1);
  v25 = a1;
  v26 = v24;
  v141 = v25;
  v27 = llvm::Loop::getLoopID(v25);
  if (v27)
    v28 = llvm::GetUnrollMetadata(v27, "llvm.loop.unroll.enable", 0x17uLL) != 0;
  else
    v28 = 0;
  if (v26)
    v29 = 1;
  else
    v29 = v23;
  v30 = v29 | v28;
  if (v21)
    v31 = 1;
  else
    v31 = v30;
  v32 = (unsigned int *)a13;
  if (*a14)
  {
    if (word_1ED8209E8)
      llvm::report_fatal_error((llvm *)"Cannot specify both explicit peel count and explicit unroll count", (const char *)1);
    v31 = 1;
    a13[5] = 1;
    *((_BYTE *)a13 + 41) = 0;
    return v31;
  }
  v33 = (llvm::Loop *)a12;
  if (!v21 || !*((_BYTE *)a13 + 42))
  {
    if (!v26 || !*((_BYTE *)a13 + 42) && a11 % v26)
      goto LABEL_31;
    goto LABEL_25;
  }
  v34 = dword_1ED820A60;
  v35 = a13[5];
  if (dword_1ED820A60)
    v35 = dword_1ED820A60;
  if (a13[9] + v35 * (unint64_t)(a12 - a13[9]) < *a13)
    goto LABEL_26;
  if (v26)
  {
LABEL_25:
    v34 = v26;
LABEL_26:
    a13[5] = v34;
LABEL_27:
    *(_WORD *)((char *)a13 + 43) = 257;
LABEL_28:
    *((_BYTE *)a13 + 41) |= v26 != 0;
    return v31;
  }
LABEL_31:
  if (a8)
    v37 = v23;
  else
    v37 = 0;
  if (v37)
  {
    a13[5] = a8;
    if (!v21 && !v26)
      goto LABEL_28;
    goto LABEL_27;
  }
  v38 = v31 ^ 1;
  if (!a8)
    v38 = 1;
  v137 = v28;
  v139 = v31;
  if ((v38 & 1) == 0)
  {
    v39 = dword_1ED820FA0;
    v40 = *a13;
    if (*a13 <= dword_1ED820FA0)
      v40 = dword_1ED820FA0;
    *a13 = v40;
    if (a13[3] > v39)
      v39 = a13[3];
    a13[3] = v39;
    v138 = (unsigned int *)(a13 + 5);
    goto LABEL_47;
  }
  a13[5] = 0;
  v138 = (unsigned int *)(a13 + 5);
  if (a8)
  {
LABEL_47:
    a13[5] = a8;
    v41 = a6;
    v42 = (llvm::Loop *)a12;
    v43 = sub_1C5BA4780((uint64_t)v141, a2, a5, v41, a8, a12, (unsigned int *)a13);
    if (HIDWORD(v43))
    {
      *v138 = v43;
      *a15 = 0;
      return v139;
    }
    v44 = 0;
    v135 = a9 != 0;
    v136 = 1;
    goto LABEL_49;
  }
  if (a9)
  {
    v54 = a10 ^ 1;
    if (*((_BYTE *)a13 + 45))
      v54 = 0;
    if ((v54 & 1) == 0 && dword_1ED820EE0 >= a9)
    {
      a13[5] = a9;
      v55 = a6;
      v42 = (llvm::Loop *)a12;
      v56 = sub_1C5BA4780((uint64_t)v141, a2, a5, v55, a9, a12, (unsigned int *)a13);
      if (HIDWORD(v56))
      {
        *v138 = v56;
        *a15 = 1;
        return v139;
      }
      v135 = 1;
      v136 = 0;
      v44 = 1;
LABEL_49:
      v33 = v42;
      v32 = (unsigned int *)a13;
      goto LABEL_50;
    }
    v44 = 1;
    v135 = 1;
    v136 = 0;
  }
  else
  {
    v135 = 0;
    v136 = 0;
    v44 = 1;
  }
LABEL_50:
  v45 = v32;
  v46 = (int)v33;
  llvm::computePeelCount(v141, v33, (uint64_t)a14, a8, a3, (uint64_t)a5, *v32);
  if (*a14)
  {
    *((_BYTE *)v45 + 41) = 0;
    v45[5] = 1;
    return v139;
  }
  v47 = v46;
  v31 = v139;
  if (v136)
    *((_BYTE *)v45 + 40) |= v139;
  if ((v44 & 1) == 0)
  {
    v57 = *((unsigned __int8 *)v45 + 40);
    if (!*((_BYTE *)v45 + 40))
    {
      v66 = 0;
      v59 = v138;
      goto LABEL_112;
    }
    v58 = v45[3];
    v59 = v138;
    if ((_DWORD)v58 == -1)
    {
      if (a8 >= v45[7])
        v66 = v45[7];
      else
        v66 = a8;
      goto LABEL_111;
    }
    if (v45[5])
      v60 = v45[5];
    else
      v60 = a8;
    v61 = v45[9];
    v62 = v46 - v61;
    if (v61 + (v46 - v61) * (unint64_t)v60 > v58)
    {
      if (v58 <= (int)v61 + 1)
        v63 = v61 + 1;
      else
        v63 = v45[3];
      v60 = (v63 - v61) / v62;
    }
    v64 = v45[7];
    if (v60 >= v64)
      v60 = v45[7];
    for (; v60; --v60)
    {
      if (!(a8 % v60))
        break;
    }
    if (v60 <= 1 && *((_BYTE *)v45 + 42))
    {
      v60 = v45[6];
      if (!v60)
      {
LABEL_104:
        v60 = 0;
LABEL_105:
        if (v60 >= v64)
          v66 = v45[7];
        else
          v66 = v60;
LABEL_111:
        v57 = v66 & 0xFFFFFF00;
        v66 = v66;
LABEL_112:
        v67 = v66 | v57;
        *v59 = v67;
        if (v23)
        {
          if (v67 == a8)
            v68 = 0;
          else
            v68 = v136;
          if (v68 != 1)
          {
LABEL_122:
            if (v45[3] != -1 && !v45[5] && v137)
            {
              v71 = v31;
              v72 = ****(_QWORD ****)a7;
              if (*(_QWORD *)(v72 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v72 + 72) + 48))(*(_QWORD *)(v72 + 72)))
              {
                v90 = v141;
                llvm::Loop::getStartLoc(v141, &v145);
                data = (int)v145.__r_.__value_.__l.__data_;
                if (v145.__r_.__value_.__r.__words[0])
                {
                  v92 = *(_QWORD *)(v145.__r_.__value_.__r.__words[0]
                                  - 8 * *(unsigned int *)(v145.__r_.__value_.__r.__words[0] + 8));
                  if (*(_BYTE *)v92 != 15)
                    v92 = *(_QWORD *)(v92 - 8 * *(unsigned int *)(v92 + 8));
                  v93 = *(_DWORD *)(v145.__r_.__value_.__r.__words[0] + 4);
                  data = *(unsigned __int16 *)(v145.__r_.__value_.__r.__words[0] + 2);
                  v90 = v141;
                }
                else
                {
                  v92 = 0;
                  v93 = 0;
                }
                v117 = **((_QWORD **)v90 + 4);
                v118 = *(_QWORD *)(v117 + 56);
                v155 = 10;
                v156 = 2;
                v157 = v118;
                v158 = v92;
                v159 = v93;
                v160 = data;
                v161 = "loop-unroll";
                v162 = "UnrollAsDirectedTooLarge";
                v163 = 24;
                v164 = 0;
                v165 = 0;
                v166 = v168;
                v167 = 0x400000000;
                v169 = 0;
                v170 = -1;
                v171 = v117;
                v154 = &off_1E814E538;
                v149 = "Unable to unroll loop as directed by unroll(enable) pragma because unrolled size is too large.";
                v150 = 94;
                sub_1C53B17B4((uint64_t)&v166, (const void **)&v149);
                sub_1C61998EC((uint64_t)&v149, (uint64_t)&v154);
                v149 = (const char *)&off_1E814E538;
                v154 = &off_1E814E790;
                v119 = (char *)v166;
                if ((_DWORD)v167)
                {
                  v120 = (unint64_t)v167 << 6;
                  do
                  {
                    v121 = (void **)&v119[v120];
                    if (v119[v120 - 17] < 0)
                      operator delete(*(v121 - 5));
                    if (*((char *)v121 - 41) < 0)
                      operator delete(*(v121 - 8));
                    v120 -= 64;
                  }
                  while (v120);
                  v119 = (char *)v166;
                }
                if (v119 != v168)
                  free(v119);
                if (v145.__r_.__value_.__r.__words[0])
                  llvm::MetadataTracking::untrack((uint64_t)&v145, (unsigned __int8 *)v145.__r_.__value_.__l.__data_);
                llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v149);
                v149 = (const char *)&off_1E814E790;
                v122 = (char *)v151;
                if (v152)
                {
                  v123 = (unint64_t)v152 << 6;
                  do
                  {
                    v124 = (void **)&v122[v123];
                    if (v122[v123 - 17] < 0)
                      operator delete(*(v124 - 5));
                    if (*((char *)v124 - 41) < 0)
                      operator delete(*(v124 - 8));
                    v123 -= 64;
                  }
                  while (v123);
                  v122 = (char *)v151;
                }
                if (v122 != v153)
                  free(v122);
              }
              return v71;
            }
            return v31;
          }
        }
        else if ((v137 & v136) != 1 || v67 == a8)
        {
          goto LABEL_122;
        }
        v69 = ****(_QWORD ****)a7;
        if (*(_QWORD *)(v69 + 128)
          || (v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 72) + 48))(*(_QWORD *)(v69 + 72)),
              v45 = (unsigned int *)a13,
              v31 = v139,
              v70))
        {
          v86 = v31;
          llvm::Loop::getStartLoc(v141, &v145);
          v87 = (int)v145.__r_.__value_.__l.__data_;
          if (v145.__r_.__value_.__r.__words[0])
          {
            v88 = *(_QWORD *)(v145.__r_.__value_.__r.__words[0]
                            - 8 * *(unsigned int *)(v145.__r_.__value_.__r.__words[0] + 8));
            if (*(_BYTE *)v88 != 15)
              v88 = *(_QWORD *)(v88 - 8 * *(unsigned int *)(v88 + 8));
            v89 = *(_DWORD *)(v145.__r_.__value_.__r.__words[0] + 4);
            v87 = *(unsigned __int16 *)(v145.__r_.__value_.__r.__words[0] + 2);
          }
          else
          {
            v88 = 0;
            v89 = 0;
          }
          v109 = **((_QWORD **)v141 + 4);
          v110 = *(_QWORD *)(v109 + 56);
          v155 = 10;
          v156 = 2;
          v157 = v110;
          v158 = v88;
          v159 = v89;
          v160 = v87;
          v161 = "loop-unroll";
          v162 = "FullUnrollAsDirectedTooLarge";
          v163 = 28;
          v164 = 0;
          v165 = 0;
          v166 = v168;
          v167 = 0x400000000;
          v169 = 0;
          v170 = -1;
          v171 = v109;
          v154 = &off_1E814E538;
          v149 = "Unable to fully unroll loop as directed by unroll pragma because unrolled size is too large.";
          v150 = 92;
          sub_1C53B17B4((uint64_t)&v166, (const void **)&v149);
          sub_1C61998EC((uint64_t)&v149, (uint64_t)&v154);
          v149 = (const char *)&off_1E814E538;
          v154 = &off_1E814E790;
          v111 = (char *)v166;
          if ((_DWORD)v167)
          {
            v112 = (unint64_t)v167 << 6;
            do
            {
              v113 = (void **)&v111[v112];
              if (v111[v112 - 17] < 0)
                operator delete(*(v113 - 5));
              if (*((char *)v113 - 41) < 0)
                operator delete(*(v113 - 8));
              v112 -= 64;
            }
            while (v112);
            v111 = (char *)v166;
          }
          if (v111 != v168)
            free(v111);
          if (v145.__r_.__value_.__r.__words[0])
            llvm::MetadataTracking::untrack((uint64_t)&v145, (unsigned __int8 *)v145.__r_.__value_.__l.__data_);
          llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v149);
          v149 = (const char *)&off_1E814E790;
          v114 = (char *)v151;
          if (v152)
          {
            v115 = (unint64_t)v152 << 6;
            do
            {
              v116 = (void **)&v114[v115];
              if (v114[v115 - 17] < 0)
                operator delete(*(v116 - 5));
              if (*((char *)v116 - 41) < 0)
                operator delete(*(v116 - 8));
              v115 -= 64;
            }
            while (v115);
            v114 = (char *)v151;
          }
          if (v114 != v153)
            free(v114);
          v31 = v86;
          v45 = (unsigned int *)a13;
        }
        goto LABEL_122;
      }
      while (v61 + v62 * (unint64_t)v60 > v58)
      {
        v65 = v60 >= 2;
        v60 >>= 1;
        if (!v65)
          goto LABEL_104;
      }
    }
    if (v60 > 1)
      goto LABEL_105;
    goto LABEL_104;
  }
  v48 = v135;
  if (v23)
  {
    v49 = ****(_QWORD ****)a7;
    if (*(_QWORD *)(v49 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v49 + 72) + 48))(*(_QWORD *)(v49 + 72)))
    {
      llvm::Loop::getStartLoc(v141, &v145);
      v83 = (int)v145.__r_.__value_.__l.__data_;
      if (v145.__r_.__value_.__r.__words[0])
      {
        v84 = *(_QWORD *)(v145.__r_.__value_.__r.__words[0]
                        - 8 * *(unsigned int *)(v145.__r_.__value_.__r.__words[0] + 8));
        if (*(_BYTE *)v84 != 15)
          v84 = *(_QWORD *)(v84 - 8 * *(unsigned int *)(v84 + 8));
        v85 = *(_DWORD *)(v145.__r_.__value_.__r.__words[0] + 4);
        v83 = *(unsigned __int16 *)(v145.__r_.__value_.__r.__words[0] + 2);
      }
      else
      {
        v84 = 0;
        v85 = 0;
      }
      v101 = **((_QWORD **)v141 + 4);
      v102 = *(_QWORD *)(v101 + 56);
      v155 = 10;
      v156 = 2;
      v157 = v102;
      v158 = v84;
      v159 = v85;
      v160 = v83;
      v161 = "loop-unroll";
      v162 = "CantFullUnrollAsDirectedRuntimeTripCount";
      v163 = 40;
      v164 = 0;
      v165 = 0;
      v166 = v168;
      v167 = 0x400000000;
      v169 = 0;
      v170 = -1;
      v171 = v101;
      v154 = &off_1E814E538;
      v149 = "Unable to fully unroll loop as directed by unroll(full) pragma because loop has a runtime trip count.";
      v150 = 101;
      sub_1C53B17B4((uint64_t)&v166, (const void **)&v149);
      sub_1C61998EC((uint64_t)&v149, (uint64_t)&v154);
      v149 = (const char *)&off_1E814E538;
      v154 = &off_1E814E790;
      v103 = (char *)v166;
      if ((_DWORD)v167)
      {
        v104 = (unint64_t)v167 << 6;
        do
        {
          v105 = (void **)&v103[v104];
          if (v103[v104 - 17] < 0)
            operator delete(*(v105 - 5));
          if (*((char *)v105 - 41) < 0)
            operator delete(*(v105 - 8));
          v104 -= 64;
        }
        while (v104);
        v103 = (char *)v166;
        v48 = v135;
      }
      if (v103 != v168)
        free(v103);
      if (v145.__r_.__value_.__r.__words[0])
        llvm::MetadataTracking::untrack((uint64_t)&v145, (unsigned __int8 *)v145.__r_.__value_.__l.__data_);
      llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v149);
      v149 = (const char *)&off_1E814E790;
      v106 = (char *)v151;
      if (v152)
      {
        v107 = (unint64_t)v152 << 6;
        do
        {
          v108 = (void **)&v106[v107];
          if (v106[v107 - 17] < 0)
            operator delete(*(v108 - 5));
          if (*((char *)v108 - 41) < 0)
            operator delete(*(v108 - 8));
          v107 -= 64;
        }
        while (v107);
        v106 = (char *)v151;
      }
      if (v106 != v153)
        free(v106);
    }
  }
  v50 = llvm::Loop::getLoopID(v141);
  if (v50 && llvm::GetUnrollMetadata(v50, "llvm.loop.unroll.runtime.disable", 0x20uLL))
    goto LABEL_140;
  v51 = !*((_BYTE *)a13 + 44) && v48;
  if (v51 && dword_1ED820EE0 > a9)
    goto LABEL_140;
  llvm::Function::getEntryCount(*(uint64_t ****)(**((_QWORD **)v141 + 4) + 56), 0, (uint64_t)&v154);
  if ((_BYTE)v157)
  {
    LoopEstimatedTripCount = llvm::getLoopEstimatedTripCount(v141, 0, v52);
    if ((LoopEstimatedTripCount & 0xFF00000000) != 0)
    {
      if (dword_1ED821060 > LoopEstimatedTripCount)
        return 0;
      *((_BYTE *)a13 + 43) = 1;
    }
  }
  v73 = v137;
  if (v26)
    v73 = 1;
  if (v21)
    v73 = 1;
  v74 = a13;
  v75 = *((_BYTE *)a13 + 41) | v73;
  *((_BYTE *)a13 + 41) = v75;
  if (!v75)
  {
LABEL_140:
    v31 = 0;
    *v138 = 0;
    return v31;
  }
  v76 = v138;
  v77 = *v138;
  v31 = v139;
  if (*v138 || (v77 = a13[6], (a13[5] = v77) != 0))
  {
    v78 = a13[9];
    v79 = a13[3];
    while (v78 + (v47 - v78) * (unint64_t)v77 > v79)
    {
      *v138 = v77 >> 1;
      v65 = v77 >= 2;
      v77 >>= 1;
      if (!v65)
        goto LABEL_142;
    }
    if (!*((_BYTE *)a13 + 42) && a11 % v77)
    {
      if (v77)
      {
        do
        {
          if (!(a11 % v77))
            break;
          *v138 = v77 >> 1;
          v94 = v77 > 1;
          v77 >>= 1;
        }
        while (v94);
      }
      v95 = sub_1C5BA472C(v141);
      v31 = v139;
      v74 = a13;
      if (v95)
      {
        if (!*((_BYTE *)a13 + 42))
        {
          v96 = ****(_QWORD ****)a7;
          if (*(_QWORD *)(v96 + 128)
            || (v97 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v96 + 72) + 48))(*(_QWORD *)(v96 + 72)),
                v74 = a13,
                v31 = v139,
                v97))
          {
            llvm::Loop::getStartLoc(v141, &v148);
            v98 = (int)v148;
            if (v148)
            {
              v99 = *(_QWORD *)&v148[-8 * *((unsigned int *)v148 + 2)];
              if (*(_BYTE *)v99 != 15)
                v99 = *(_QWORD *)(v99 - 8 * *(unsigned int *)(v99 + 8));
              v100 = *((_DWORD *)v148 + 1);
              v98 = *((unsigned __int16 *)v148 + 1);
            }
            else
            {
              v99 = 0;
              v100 = 0;
            }
            v125 = **((_QWORD **)v141 + 4);
            v126 = *(_QWORD *)(v125 + 56);
            v155 = 10;
            v156 = 2;
            v157 = v126;
            v158 = v99;
            v159 = v100;
            v160 = v98;
            v161 = "loop-unroll";
            v162 = "DifferentUnrollCountFromDirected";
            v163 = 32;
            v164 = 0;
            v165 = 0;
            v166 = v168;
            v167 = 0x400000000;
            v169 = 0;
            v170 = -1;
            v171 = v125;
            v154 = &off_1E814E538;
            v149 = "Unable to unroll loop the number of times directed by unroll_count pragma because remainder loop is r"
                   "estricted (that could architecture specific or because the loop contains a convergent instruction) an"
                   "d so must have an unroll count that divides the loop trip multiple of ";
            v150 = 272;
            sub_1C53B17B4((uint64_t)&v166, (const void **)&v149);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v145, "TripMultiple", 0xCuLL, a11);
            v127 = sub_1C47E3888((uint64_t)&v154, (uint64_t)&v145);
            v149 = ".  Unrolling instead ";
            v150 = 21;
            sub_1C53B17B4(v127 + 80, (const void **)&v149);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v142, "UnrollCount", 0xBuLL, *v138);
            v128 = sub_1C47E3888(v127, (uint64_t)&v142);
            v149 = " time(s).";
            v150 = 9;
            sub_1C53B17B4(v128 + 80, (const void **)&v149);
            sub_1C61998EC((uint64_t)&v149, v128);
            v149 = (const char *)&off_1E814E538;
            if (v144 < 0)
              operator delete(__p);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (v147 < 0)
              operator delete(v146);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            v154 = &off_1E814E790;
            v129 = (char *)v166;
            if ((_DWORD)v167)
            {
              v130 = (unint64_t)v167 << 6;
              do
              {
                v131 = (void **)&v129[v130];
                if (v129[v130 - 17] < 0)
                  operator delete(*(v131 - 5));
                if (*((char *)v131 - 41) < 0)
                  operator delete(*(v131 - 8));
                v130 -= 64;
              }
              while (v130);
              v129 = (char *)v166;
            }
            if (v129 != v168)
              free(v129);
            if (v148)
              llvm::MetadataTracking::untrack((uint64_t)&v148, v148);
            llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v149);
            v149 = (const char *)&off_1E814E790;
            v132 = (char *)v151;
            if (v152)
            {
              v133 = (unint64_t)v152 << 6;
              do
              {
                v134 = (void **)&v132[v133];
                if (v132[v133 - 17] < 0)
                  operator delete(*(v134 - 5));
                if (*((char *)v134 - 41) < 0)
                  operator delete(*(v134 - 8));
                v133 -= 64;
              }
              while (v133);
              v132 = (char *)v151;
            }
            if (v132 != v153)
              free(v132);
            v31 = v139;
            v76 = v138;
            v74 = a13;
          }
        }
      }
    }
  }
LABEL_142:
  v80 = v74[5];
  v81 = v74[7];
  if (v80 > v81)
  {
    *v76 = v81;
    v80 = v81;
  }
  v82 = v48 && v80 > a9;
  if (v82)
    v80 = a9;
  if (v82 || v80 <= 1)
  {
    if (v80 < 2)
      v80 = 0;
    *v76 = v80;
  }
  return v31;
}

unsigned __int8 *sub_1C5BA472C(llvm::Loop *a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  unsigned int *v3;

  result = (unsigned __int8 *)llvm::Loop::getLoopID(a1);
  if (result)
  {
    result = llvm::GetUnrollMetadata((uint64_t)result, "llvm.loop.unroll.count", 0x16uLL);
    if (result)
    {
      v2 = *(_QWORD *)(*(_QWORD *)&result[-8 * *((unsigned int *)result + 2) + 8] + 128);
      v3 = (unsigned int *)(v2 + 24);
      if (*(_DWORD *)(v2 + 32) >= 0x41u)
        v3 = *(unsigned int **)v3;
      return (unsigned __int8 *)*v3;
    }
  }
  return result;
}

uint64_t sub_1C5BA4780(uint64_t a1, _QWORD *a2, llvm::ConstantInt ****a3, _QWORD *a4, unsigned int a5, int a6, unsigned int *a7)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  const llvm::APInt *v46;
  unsigned int j;
  int v48;
  unsigned int v49;
  void **v50;
  void **v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *k;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  int v75;
  unint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v94;
  char v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  BOOL v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  int v141;
  unsigned int v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  BOOL v147;
  unsigned int v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  char v155;
  int v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int v180;
  unsigned int v181;
  uint64_t v183;
  int v184;
  int v185;
  _QWORD v186[2];
  int v187;
  unint64_t Constant;
  _QWORD *v189;
  llvm::ConstantInt ****v190;
  uint64_t v191;
  uint64_t v192[6];
  _QWORD v193[2];
  int v194;
  uint64_t v195;
  int v196;
  _QWORD v197[2];
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202[2];
  _BYTE v203[32];
  void *v204[2];
  _BYTE v205[128];
  void *v206;
  uint64_t v207;
  _BYTE v208[64];
  uint64_t v209;
  uint64_t v210[8];
  void *v211;
  uint64_t v212;
  _BYTE v213[64];
  uint64_t v214;
  void **v215;
  unsigned int v216;
  void *v217;
  uint64_t v218;
  _BYTE v219[128];
  __int128 v220;
  _QWORD v221[6];

  v221[4] = *MEMORY[0x1E0C80C00];
  if (a7[8] < a5)
    goto LABEL_288;
  v8 = a5;
  if (a7[9] + a7[5] * (unint64_t)(a6 - a7[9]) >= *a7)
  {
    v11 = a7[13];
    v199 = a1;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16))
      goto LABEL_288;
    v180 = a5 - 1;
    if (a5 - 1 >= v11)
      goto LABEL_288;
    v214 = 1;
    v13 = 8;
    v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v214 + v13) = v14;
      v13 += 16;
    }
    while (v13 != 136);
    v217 = v219;
    v218 = 0x1000000000;
    v209 = 1;
    memset_pattern16(v210, &unk_1C85F2160, 0x40uLL);
    v211 = v213;
    v212 = 0x400000000;
    v197[0] = 0;
    v197[1] = 0;
    v198 = 0;
    v206 = v208;
    v207 = 0x400000000;
    v195 = 0;
    v196 = 0;
    v193[0] = 0;
    v193[1] = 0;
    v194 = 0;
    v204[0] = v205;
    v204[1] = (void *)0x1000000000;
    v202[0] = v203;
    v202[1] = (void *)0x400000000;
    v192[0] = (uint64_t)v204;
    v192[1] = (uint64_t)v193;
    v192[2] = (uint64_t)&v199;
    v192[3] = (uint64_t)v202;
    v192[4] = (uint64_t)&v195;
    v192[5] = (uint64_t)a2;
    if (v8)
    {
      v15 = 0;
      v184 = 0;
      do
      {
        v16 = **(_QWORD **)(v199 + 32);
        v17 = v16 + 40;
        for (i = *(_QWORD *)(v16 + 48); i != v17; i = *(_QWORD *)(i + 8))
        {
          v19 = i - 24;
          if (!i)
            v19 = 0;
          v20 = *(unsigned __int8 *)(v19 + 16);
          v21 = v20 == 83 ? v19 : 0;
          if (!i || v20 != 83)
            break;
          if (v15)
          {
            result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v199);
LABEL_21:
            v23 = result;
            goto LABEL_29;
          }
          result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v199);
          if (result)
          {
            v24 = *(_QWORD *)(result + 40);
            if (v24 != result + 40)
            {
              v25 = v24 - 24;
              if (!v24)
                v25 = 0;
              v26 = *(unsigned __int8 *)(v25 + 16);
              v27 = v26 - 29;
              if (v26 != 30)
              {
                v23 = 0;
                switch(v27)
                {
                  case 0:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    goto LABEL_29;
                  case 1:
                    goto LABEL_323;
                  case 2:
                    v39 = (*(_DWORD *)(v25 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_47;
                  case 3:
                    v39 = (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_47;
                  case 10:
                    v39 = *(_DWORD *)(v25 + 80) + 1;
LABEL_47:
                    if (v39 != 1)
                      goto LABEL_28;
                    goto LABEL_21;
                  default:
                    goto LABEL_28;
                }
              }
              if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) != 3)
                goto LABEL_21;
            }
          }
LABEL_28:
          v23 = 0;
LABEL_29:
          v28 = *(_DWORD *)(v21 + 20);
          v29 = v28 & 0x7FFFFFF;
          if ((v28 & 0x7FFFFFF) != 0)
          {
            v30 = 0;
            while (1)
            {
              v31 = v21 - 32 * v29;
              if ((v28 & 0x40000000) != 0)
                v31 = *(_QWORD *)(v21 - 8);
              if (*(_QWORD *)(v31 + 32 * *(unsigned int *)(v21 + 60) + 8 * v30) == v23)
                break;
              if (v29 == ++v30)
                goto LABEL_35;
            }
          }
          else
          {
LABEL_35:
            LODWORD(v30) = -1;
          }
          if ((v28 & 0x40000000) != 0)
            v32 = *(_QWORD *)(v21 - 8);
          else
            v32 = v21 - 32 * v29;
          v33 = *(_QWORD *)(v32 + 32 * v30);
          if (v15 && v198)
          {
            v34 = v198 - 1;
            v35 = (v198 - 1) & ((v33 >> 4) ^ (v33 >> 9));
            v36 = *(_QWORD *)(v197[0] + 16 * v35);
            if (v33 == v36)
            {
LABEL_41:
              v33 = *(_QWORD *)(v197[0] + 16 * v35 + 8);
            }
            else
            {
              v40 = 1;
              v41 = *(_QWORD *)(v197[0] + 16 * (v34 & ((v33 >> 4) ^ (v33 >> 9))));
              v42 = v34 & ((v33 >> 4) ^ (v33 >> 9));
              while (v41 != -4096)
              {
                v43 = v42 + v40++;
                v42 = v43 & v34;
                v41 = *(_QWORD *)(v197[0] + 16 * v42);
                if (v33 == v41)
                {
                  v44 = 1;
                  while (v36 != -4096)
                  {
                    v45 = v35 + v44++;
                    v35 = v45 & v34;
                    v36 = *(_QWORD *)(v197[0] + 16 * v35);
                    if (v33 == v36)
                      goto LABEL_41;
                  }
                  v33 = 0;
                  break;
                }
              }
            }
          }
          v37 = v207;
          if (v207 >= (unint64_t)HIDWORD(v207))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v208, v207 + 1, 16);
            v37 = v207;
          }
          v38 = (uint64_t *)((char *)v206 + 16 * v37);
          *v38 = v21;
          v38[1] = v33;
          LODWORD(v207) = v207 + 1;
        }
        sub_1C5505510(v197);
        for (j = v207; (_DWORD)v207; j = v207)
        {
          LODWORD(v207) = j - 1;
          v220 = *((_OWORD *)v206 + j - 1);
          sub_1C509BD8C((uint64_t)v197, &v220, (_QWORD *)&v220 + 1, (uint64_t)v186);
        }
        v186[0] = 0;
        v186[1] = 0;
        v187 = 0;
        v189 = v197;
        v190 = a3;
        v191 = v199;
        DWORD2(v220) = 64;
        *(_QWORD *)&v220 = v15;
        Constant = llvm::ScalarEvolution::getConstant(a3, (const llvm::APInt *)&v220, v46);
        v48 = v184;
        if (DWORD2(v220) >= 0x41 && (_QWORD)v220)
          MEMORY[0x1CAA32F9C](v220, 0x1000C8000313F17);
        LOBYTE(v49) = v214;
        if (v214 > 1 || HIDWORD(v214))
        {
          v50 = &v217;
          v51 = (void **)&v215;
          if ((v214 & 1) != 0)
            goto LABEL_66;
          v49 = v216;
          if (((2 * (_DWORD)v214) & 0xFFFFFFFC) < v216 && v216 >= 0x41)
          {
            sub_1C631E080(&v214);
            LOBYTE(v49) = v214;
          }
          else
          {
            if (v216)
            {
              v51 = v215;
              v50 = &v215[v216];
              do
LABEL_66:
                *v51++ = (void *)-4096;
              while (v51 != v50);
              v49 = v214 & 1;
            }
            v214 = v49;
          }
        }
        LODWORD(v218) = 0;
        v52 = **(_QWORD **)(v199 + 32);
        *(_QWORD *)&v220 = v52;
        if ((v49 & 1) != 0)
        {
          v53 = 16;
          v54 = &v215;
LABEL_73:
          v55 = v53 - 1;
          v56 = v55 & ((v52 >> 4) ^ (v52 >> 9));
          v57 = &v54[v56];
          v58 = *v57;
          if (v52 != *v57)
          {
            v59 = 0;
            v60 = 1;
            while (v58 != -4096)
            {
              if (v59)
                v61 = 0;
              else
                v61 = v58 == -8192;
              if (v61)
                v59 = v57;
              v62 = v56 + v60++;
              v56 = v62 & v55;
              v57 = &v54[v56];
              v58 = *v57;
              if (v52 == *v57)
                goto LABEL_90;
            }
            if (v59)
              v63 = v59;
            else
              v63 = v57;
            goto LABEL_86;
          }
        }
        else
        {
          v53 = v216;
          if (v216)
          {
            v54 = v215;
            goto LABEL_73;
          }
          v63 = 0;
LABEL_86:
          result = (uint64_t)sub_1C5AC7B84((uint64_t)&v214, (uint64_t)&v220, &v220, v63);
          *(_QWORD *)result = v220;
          v64 = v220;
          v65 = v218;
          if (v218 >= (unint64_t)HIDWORD(v218))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
            v65 = v218;
          }
          *((_QWORD *)v217 + v65) = v64;
          v174 = __CFADD__((_DWORD)v218, 1);
          LODWORD(v218) = v218 + 1;
          if (!v174)
          {
            v68 = 0;
            do
            {
              v185 = v48;
              v181 = v68;
              v69 = *((_QWORD *)v217 + v68);
              v70 = (_QWORD *)(v69 + 40);
              v183 = v69;
              for (k = *(_QWORD **)(v69 + 48); k != v70; k = (_QWORD *)k[1])
              {
                if (k)
                  v72 = (uint64_t)(k - 3);
                else
                  v72 = 0;
                result = sub_1C4D99D08(v72);
                if ((result & 1) == 0)
                {
                  result = (uint64_t)sub_1C477672C((uint64_t)a4, v72);
                  v73 = a4[1];
                  v74 = v73 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
                  if (result == v73 + 8 * *v74)
                  {
                    v75 = *(_DWORD *)(v72 + 20);
                    if ((v75 & 0x40000000) != 0)
                    {
                      v77 = *(uint64_t **)(v72 - 8);
                      v76 = v75 & 0x7FFFFFF;
                    }
                    else
                    {
                      v76 = v75 & 0x7FFFFFF;
                      v77 = (uint64_t *)(v72 - 32 * v76);
                    }
                    *(_QWORD *)&v220 = v221;
                    *((_QWORD *)&v220 + 1) = 0x400000000;
                    if (v76 < 5)
                    {
                      v78 = 0;
                      if (v76)
                      {
                        v79 = 0;
                        v80 = v221;
LABEL_115:
                        v81 = 32 * v76;
                        v82 = &v80[v79];
                        do
                        {
                          v83 = *v77;
                          v77 += 4;
                          *v82++ = v83;
                          v81 -= 32;
                        }
                        while (v81);
                        v84 = (_QWORD *)v220;
                      }
                      else
                      {
                        v84 = v221;
                      }
                      DWORD2(v220) = v78 + v76;
                      (*(void (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a2 + 72))(*a2, v72, v84);
                      if ((_QWORD *)v220 != v221)
                        free((void *)v220);
                      __asm { BR              X9 }
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v221, v76, 8);
                    v78 = DWORD2(v220);
                    v80 = (_QWORD *)v220;
                    v79 = DWORD2(v220);
                    goto LABEL_115;
                  }
                }
              }
              v85 = *v70 - 24;
              v86 = *v70 == 0;
              if (*v70)
                v87 = *v70 - 24;
              else
                v87 = 0;
              v88 = *(unsigned __int8 *)(v87 + 16) - 40;
              if (v88 >= 0xFFFFFFF5)
                v89 = v87;
              else
                v89 = 0;
              v200 = 0;
              v90 = *(unsigned __int8 *)(v89 + 16);
              if (v88 < 0xFFFFFFF5)
                v86 = 1;
              if (v90 != 30 || v86)
              {
                v95 = v90 != 31 || v86;
                if ((v95 & 1) != 0)
                  goto LABEL_160;
                v96 = *(_DWORD *)(v89 + 20);
                if ((v96 & 0x40000000) != 0)
                  v97 = *(uint64_t **)(v89 - 8);
                else
                  v97 = (uint64_t *)(v89 - 32 * (v96 & 0x7FFFFFF));
                v98 = *v97;
                *(_QWORD *)&v220 = *v97;
                v201 = 0;
                result = sub_1C4926528((uint64_t)v197, &v220, &v201);
                if ((_DWORD)result)
                {
                  *(_QWORD *)&v220 = v98;
                  v201 = 0;
                  result = sub_1C4926528((uint64_t)v197, &v220, &v201);
                  v98 = 0;
                  if ((_DWORD)result)
                    v98 = *(_QWORD *)(v201 + 8);
                }
                v99 = *(unsigned __int8 *)(v98 + 16);
                if (!v98 || v99 > 0x14)
                {
LABEL_160:
                  v94 = v200;
                  if (!v200)
                    goto LABEL_207;
                  goto LABEL_161;
                }
                if (v99 - 11 > 1)
                {
                  if (v99 != 16)
                    goto LABEL_160;
                  result = sub_1C4E5D490(v89, v98);
                  v121 = *(_DWORD *)(v89 + 20);
                  if ((v121 & 0x40000000) != 0)
                    v122 = *(_QWORD *)(v89 - 8);
                  else
                    v122 = v89 - 32 * (v121 & 0x7FFFFFF);
                  if (v120 == 4294967294)
                    v125 = 1;
                  else
                    v125 = (2 * v120 + 3);
                  v94 = *(_QWORD *)(v122 + 32 * v125);
                }
                else
                {
                  v107 = *(_DWORD *)(v89 + 20);
                  if ((v107 & 0x40000000) != 0)
                    v108 = *(_QWORD *)(v89 - 8);
                  else
                    v108 = v89 - 32 * (v107 & 0x7FFFFFF);
                  v94 = *(_QWORD *)(v108 + 32);
                }
              }
              else
              {
                if ((*(_DWORD *)(v89 + 20) & 0x7FFFFFF) != 3)
                  goto LABEL_160;
                v91 = *(_QWORD *)(v89 - 96);
                *(_QWORD *)&v220 = v91;
                v201 = 0;
                result = sub_1C4926528((uint64_t)v197, &v220, &v201);
                if ((_DWORD)result)
                {
                  *(_QWORD *)&v220 = v91;
                  v201 = 0;
                  result = sub_1C4926528((uint64_t)v197, &v220, &v201);
                  v91 = 0;
                  if ((_DWORD)result)
                    v91 = *(_QWORD *)(v201 + 8);
                }
                v92 = *(unsigned __int8 *)(v91 + 16);
                if (!v91 || v92 > 0x14)
                  goto LABEL_160;
                if (v92 - 11 > 1)
                {
                  if (v92 != 16)
                    goto LABEL_160;
                  result = v91 + 24;
                  v123 = *(_DWORD *)(v91 + 32);
                  if (v123 > 0x40)
                  {
                    result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
                    v124 = (_DWORD)result == v123;
                  }
                  else
                  {
                    v124 = *(_QWORD *)result == 0;
                  }
                  v126 = v124;
                  v94 = *(_QWORD *)(v89 + 32 * (v126 << 63 >> 63) - 32);
                }
                else
                {
                  v94 = *(_QWORD *)(v89 - 32);
                }
              }
              v200 = v94;
              if (!v94)
              {
LABEL_207:
                v127 = (_QWORD *)*v70;
                if ((_QWORD *)*v70 != v70)
                {
                  if (v127)
                    v128 = v127 - 3;
                  else
                    v128 = 0;
                  v129 = *((unsigned __int8 *)v128 + 16);
                  v130 = v129 - 29;
                  if (v129 != 30)
                  {
                    v131 = 2;
                    switch(v130)
                    {
                      case 1:
LABEL_323:
                        __break(1u);
                        return result;
                      case 2:
                        v131 = (*((_DWORD *)v128 + 5) >> 1) & 0x3FFFFFF;
                        goto LABEL_250;
                      case 3:
                      case 9:
                        v131 = (*((_DWORD *)v128 + 5) & 0x7FFFFFF) - 1;
                        goto LABEL_250;
                      case 4:
                        goto LABEL_215;
                      case 7:
                        v131 = *((_WORD *)v128 + 9) & 1;
                        goto LABEL_250;
                      case 8:
                        v131 = 1;
                        goto LABEL_215;
                      case 10:
                        v131 = *((_DWORD *)v128 + 20) + 1;
LABEL_250:
                        if (!v131)
                          goto LABEL_246;
                        goto LABEL_215;
                      default:
                        goto LABEL_246;
                    }
                  }
                  if ((*((_DWORD *)v128 + 5) & 0x7FFFFFF) == 3)
                    v131 = 2;
                  else
                    v131 = 1;
LABEL_215:
                  v132 = 0;
                  v133 = v131;
                  do
                  {
                    v201 = 0;
                    v134 = *((unsigned __int8 *)v128 + 16);
                    if (v134 != 30)
                      __asm { BR              X9 }
                    v201 = v128[-4 * v132 - 4];
                    v135 = v199;
                    v136 = sub_1C477672C(v199 + 56, v201);
                    v137 = *(_QWORD *)(v135 + 64);
                    v138 = 72;
                    if (v137 == *(_QWORD *)(v135 + 56))
                      v138 = 76;
                    if (v136 == (_QWORD *)(v137 + 8 * *(unsigned int *)(v135 + v138)))
                    {
                      *(_QWORD *)&v220 = v183;
                      *((_QWORD *)&v220 + 1) = v201;
                      sub_1C5BA76E0((uint64_t)&v209, (uint64_t *)&v220);
                    }
                    else
                    {
                      if ((v214 & 1) != 0)
                      {
                        v139 = 16;
                        v140 = &v215;
                      }
                      else
                      {
                        v139 = v216;
                        if (!v216)
                        {
                          v149 = 0;
LABEL_238:
                          v150 = sub_1C5AC7B84((uint64_t)&v214, (uint64_t)&v201, &v201, v149);
                          *v150 = v201;
                          v151 = v201;
                          v152 = v218;
                          if (v218 >= (unint64_t)HIDWORD(v218))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
                            v152 = v218;
                          }
                          *((_QWORD *)v217 + v152) = v151;
                          LODWORD(v218) = v218 + 1;
                          goto LABEL_241;
                        }
                        v140 = v215;
                      }
                      v141 = v139 - 1;
                      v142 = ((v201 >> 4) ^ (v201 >> 9)) & v141;
                      v143 = &v140[v142];
                      v144 = *v143;
                      if (v201 != *v143)
                      {
                        v145 = 0;
                        v146 = 1;
                        while (v144 != -4096)
                        {
                          if (v145)
                            v147 = 0;
                          else
                            v147 = v144 == -8192;
                          if (v147)
                            v145 = v143;
                          v148 = v142 + v146++;
                          v142 = v148 & v141;
                          v143 = &v140[v142];
                          v144 = *v143;
                          if (v201 == *v143)
                            goto LABEL_241;
                        }
                        if (v145)
                          v149 = v145;
                        else
                          v149 = v143;
                        goto LABEL_238;
                      }
                    }
LABEL_241:
                    ++v132;
                  }
                  while (v132 != v133);
                }
LABEL_246:
                result = (uint64_t)sub_1C5BA724C(v192, v85, v15);
                v48 = v185;
                v104 = v181;
                goto LABEL_247;
              }
LABEL_161:
              v101 = v199;
              result = (uint64_t)sub_1C477672C(v199 + 56, v94);
              v102 = *(_QWORD *)(v101 + 64);
              v103 = 72;
              if (v102 == *(_QWORD *)(v101 + 56))
                v103 = 76;
              v104 = v181;
              if (result == v102 + 8 * *(unsigned int *)(v101 + v103))
              {
                *(_QWORD *)&v220 = v183;
                *((_QWORD *)&v220 + 1) = v200;
                result = sub_1C5BA76E0((uint64_t)&v209, (uint64_t *)&v220);
                v48 = v185;
              }
              else
              {
                v48 = v185;
                if ((v214 & 1) != 0)
                {
                  v105 = 16;
                  v106 = &v215;
                }
                else
                {
                  v105 = v216;
                  if (!v216)
                  {
                    v117 = 0;
LABEL_185:
                    result = (uint64_t)sub_1C5AC7B84((uint64_t)&v214, (uint64_t)&v200, &v200, v117);
                    *(_QWORD *)result = v200;
                    v118 = v200;
                    v119 = v218;
                    if (v218 >= (unint64_t)HIDWORD(v218))
                    {
                      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
                      v119 = v218;
                    }
                    *((_QWORD *)v217 + v119) = v118;
                    LODWORD(v218) = v218 + 1;
                    goto LABEL_247;
                  }
                  v106 = v215;
                }
                v109 = v105 - 1;
                v110 = ((v200 >> 4) ^ (v200 >> 9)) & v109;
                v111 = &v106[v110];
                v112 = *v111;
                if (v200 != *v111)
                {
                  v113 = 0;
                  v114 = 1;
                  while (v112 != -4096)
                  {
                    if (v113)
                      v115 = 0;
                    else
                      v115 = v112 == -8192;
                    if (v115)
                      v113 = v111;
                    v116 = v110 + v114++;
                    v110 = v116 & v109;
                    v111 = &v106[v110];
                    v112 = *v111;
                    if (v200 == *v111)
                      goto LABEL_247;
                  }
                  if (v113)
                    v117 = v113;
                  else
                    v117 = v111;
                  goto LABEL_185;
                }
              }
LABEL_247:
              v68 = v104 + 1;
            }
            while ((_DWORD)v218 != v68);
          }
        }
LABEL_90:
        v66 = v195 < 0;
        if (v196 != v48)
          v66 = v196 < v48;
        if (v66)
        {
          MEMORY[0x1CAA32FB4](v186[0], 8);
        }
        else
        {
          if (v196 == v48)
            v67 = v195 > 0;
          else
            v67 = v48 < v196;
          MEMORY[0x1CAA32FB4](v186[0], 8);
          if (!v67)
          {
            v153 = 0;
            v154 = 0;
            v155 = 1;
            goto LABEL_270;
          }
        }
        v184 = v48;
        ++v15;
      }
      while (v15 != v8);
      v160 = v212;
      while (v160)
      {
        v161 = (char *)v211 + 16 * v160;
        v162 = *((_QWORD *)v161 - 2);
        v163 = *((_QWORD *)v161 - 1);
        v186[0] = 0;
        if (sub_1C5BA7910((uint64_t)&v209, v162, v163, v186))
        {
          v164 = v186[0];
          *(_QWORD *)v186[0] = -8192;
          *(_QWORD *)(v164 + 8) = -8192;
          LODWORD(v209) = v209 - 2;
          ++HIDWORD(v209);
        }
        v160 = v212 - 1;
        LODWORD(v212) = v212 - 1;
        v165 = v163 + 40;
        v166 = *(_QWORD *)(v163 + 48);
        if (v166 != v163 + 40)
        {
          do
          {
            v167 = v166 - 24;
            if (!v166 || *(_BYTE *)(v166 - 8) != 83)
              break;
            v168 = *(_DWORD *)(v166 - 4);
            v169 = v168 & 0x7FFFFFF;
            if ((v168 & 0x7FFFFFF) != 0)
            {
              v170 = 0;
              while (1)
              {
                v171 = v167 - 32 * v169;
                if ((v168 & 0x40000000) != 0)
                  v171 = *(_QWORD *)(v166 - 32);
                if (*(_QWORD *)(v171 + 32 * *(unsigned int *)(v166 + 36) + 8 * v170) == v162)
                  break;
                if (v169 == ++v170)
                  goto LABEL_302;
              }
            }
            else
            {
LABEL_302:
              LODWORD(v170) = -1;
            }
            if ((v168 & 0x40000000) != 0)
              v172 = *(_QWORD *)(v166 - 32);
            else
              v172 = v167 - 32 * v169;
            v173 = *(_QWORD *)(v172 + 32 * v170);
            if (v173)
              v174 = *(unsigned __int8 *)(v173 + 16) >= 0x1Cu;
            else
              v174 = 0;
            if (v174)
            {
              v175 = v199;
              v176 = sub_1C477672C(v199 + 56, *(_QWORD *)(v173 + 40));
              v177 = *(_QWORD *)(v175 + 64);
              v178 = v177 == *(_QWORD *)(v175 + 56) ? 76 : 72;
              if (v176 != (_QWORD *)(v177 + 8 * *(unsigned int *)(v175 + v178)))
                sub_1C5BA724C(v192, v173, v180);
            }
            v166 = *(_QWORD *)(v166 + 8);
          }
          while (v166 != v165);
          v160 = v212;
        }
      }
      v156 = v195;
      v157 = v196 == 0;
    }
    else
    {
      v156 = v195;
      v157 = v196 == 0;
    }
    v155 = 0;
    if (!v157)
      v156 = 0;
    v154 = v156 & 0xFFFFFF00;
    v153 = v156;
LABEL_270:
    if (v202[0] != v203)
      free(v202[0]);
    if (v204[0] != v205)
      free(v204[0]);
    MEMORY[0x1CAA32FB4](v193[0], 8);
    if (v206 != v208)
      free(v206);
    MEMORY[0x1CAA32FB4](v197[0], 8);
    if (v211 != v213)
      free(v211);
    if ((v209 & 1) == 0)
      MEMORY[0x1CAA32FB4](v210[0], 8);
    if (v217 != v219)
      free(v217);
    if ((v214 & 1) != 0)
    {
      if ((v155 & 1) != 0)
        goto LABEL_288;
    }
    else
    {
      MEMORY[0x1CAA32FB4](v215, 8);
      if ((v155 & 1) != 0)
        goto LABEL_288;
    }
    v158 = v154 | v153;
    v159 = a7[1];
    if (v154 | v153 && 100 * HIDWORD(v154) / v158 < v159)
      v159 = 100 * HIDWORD(v154) / v158;
    if (*a7 * v159 / 0x64 > v158)
      goto LABEL_3;
LABEL_288:
    v10 = 0;
    LOBYTE(v8) = 0;
    v9 = 0;
    return v10 | v9 | v8;
  }
LABEL_3:
  v9 = v8 & 0xFFFFFF00;
  v10 = 0x100000000;
  return v10 | v9 | v8;
}

uint64_t sub_1C5BA5DAC(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Unroll loops";
  *(_QWORD *)(v3 + 8) = 12;
  *(_QWORD *)(v3 + 16) = "loop-unroll";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1ED820610;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5BA7C64;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5BA5E50(uint64_t a1, int a2, char a3, char a4, uint64_t a5, uint64_t a6, __int16 a7, __int16 a8, __int16 a9, int a10, __int16 a11, int a12, __int16 a13, uint64_t a14)
{
  unint64_t v16;
  unint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED820610;
  *(_QWORD *)a1 = &off_1E8195F90;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  *(_QWORD *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = a7;
  *(_WORD *)(a1 + 54) = a8;
  *(_WORD *)(a1 + 56) = a9;
  *(_WORD *)(a1 + 58) = a11;
  *(_WORD *)(a1 + 60) = a13;
  *(_QWORD *)(a1 + 64) = a14;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v18 = qword_1ED830BC0[0];
  v16 = atomic_load(&qword_1ED820618);
  if (v16 != -1)
  {
    v20[0] = sub_1C5BA5DAC;
    v20[1] = &v18;
    v19 = v20;
    std::__call_once(&qword_1ED820618, &v19, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::LoopFullUnrollPass::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t ***v18;
  size_t v19;
  void **p_dst;
  const char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t v32;
  char **v33;
  char **v34;
  uint64_t *v35;
  int v36;
  uint64_t ***v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void **v55;
  uint64_t v56;
  void **__dst;
  size_t v58;
  int64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE v64[32];
  _BYTE v65[16];
  uint64_t *v66;
  _QWORD v67[4];
  char *v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[6];

  v73[4] = *MEMORY[0x1E0C80C00];
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v65, *(const llvm::Function **)(**(_QWORD **)(a2 + 32) + 56));
  v10 = *(_QWORD *)a2;
  v60 = v64;
  v61 = v64;
  v62 = 4;
  v63 = 0;
  if (v10)
  {
    v11 = *(uint64_t **)(v10 + 8);
    v12 = *(uint64_t **)(v10 + 16);
    while (v11 != v12)
    {
      v13 = *v11++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v60, v13);
    }
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 24);
    v15 = *(uint64_t **)(v14 + 24);
    v16 = *(uint64_t **)(v14 + 32);
    while (v15 != v16)
    {
      v17 = *v15++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v60, v17);
    }
  }
  v18 = **(uint64_t *****)(a2 + 32);
  if (!v18 || (*((_BYTE *)v18 + 23) & 0x10) == 0)
  {
    v19 = 14;
    HIBYTE(v59) = 14;
    p_dst = (void **)&__dst;
    v21 = "<unnamed loop>";
    goto LABEL_11;
  }
  v24 = ***v18;
  v25 = *(_QWORD *)(v24 + 152);
  v26 = *(unsigned int *)(v24 + 168);
  if ((_DWORD)v26)
  {
    LODWORD(v27) = (v26 - 1) & ((v18 >> 4) ^ (v18 >> 9));
    v28 = (uint64_t ****)(v25 + 16 * v27);
    v29 = *v28;
    if (*v28 == v18)
      goto LABEL_34;
    v30 = 1;
    while (v29 != (uint64_t ***)-4096)
    {
      v31 = v27 + v30++;
      v27 = v31 & (v26 - 1);
      v29 = *(uint64_t ****)(v25 + 16 * v27);
      if (v29 == v18)
      {
        v28 = (uint64_t ****)(v25 + 16 * v27);
        goto LABEL_34;
      }
    }
  }
  v28 = (uint64_t ****)(v25 + 16 * v26);
LABEL_34:
  v37 = v28[1];
  v38 = (unint64_t)*v37;
  v21 = (const char *)(v37 + 2);
  v19 = v38;
  if (v38 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v19 >= 0x17)
  {
    v39 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v39 = v19 | 7;
    v40 = v39 + 1;
    p_dst = (void **)operator new(v39 + 1);
    v58 = v19;
    v59 = v40 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v59) = v19;
  p_dst = (void **)&__dst;
  if (v19)
LABEL_11:
    memmove(p_dst, v21, v19);
  *((_BYTE *)p_dst + v19) = 0;
  if (sub_1C5BA6468((llvm *)a2, *(const llvm::Loop **)(a3 + 16), *(_QWORD *)(a3 + 24), *(llvm::ScalarEvolution **)(a3 + 32), *(llvm::AssumptionCache **)(a3 + 48), *(llvm::AssumptionCache **)(a3 + 8), (llvm::OptimizationRemarkEmitter *)v65, 0, 0, 1u, *(_DWORD *)a1, *(_WORD *)(a1 + 4), HIBYTE(*(_WORD *)(a1 + 4)), 0, 0, 256, 0, 256, 0,
                       256,
                       0,
                       257,
                       0,
                       256,
                       0))
  {
    v71 = v73;
    v72 = 0x400000000;
    v32 = *(_QWORD *)(a3 + 24);
    v33 = (char **)(v32 + 24);
    v34 = (char **)(v32 + 32);
    if (v10)
    {
      v34 = (char **)(v10 + 16);
      v33 = (char **)(v10 + 8);
    }
    sub_1C499C3FC((unsigned int *)&v71, *v33, *v34);
    v35 = v71;
    if ((_DWORD)v72)
    {
      v41 = &v71[v72];
      v42 = 8 * v72 - 8;
      v43 = v71;
      while (1)
      {
        if (*v43 == a2)
        {
          v36 = 1;
          goto LABEL_51;
        }
        v44 = (char *)sub_1C477672C((uint64_t)&v60, *v43);
        v45 = v61 == v60 ? (uint64_t *)((char *)&v62 + 4) : &v62;
        if (v44 != &v61[8 * *(unsigned int *)v45])
          break;
        ++v43;
        v42 -= 8;
        if (v43 == v41)
        {
          v36 = 0;
          v35 = v41;
          goto LABEL_62;
        }
      }
      v36 = 0;
LABEL_51:
      if (v43 + 1 == v41)
      {
        v35 = v43;
      }
      else
      {
        v46 = 1;
        v35 = v43;
        do
        {
          v47 = v43[v46];
          if (v47 == a2)
          {
            v36 = 1;
          }
          else
          {
            v48 = (char *)sub_1C477672C((uint64_t)&v60, v47);
            if (v61 == v60)
              v49 = (uint64_t *)((char *)&v62 + 4);
            else
              v49 = &v62;
            if (v48 == &v61[8 * *(unsigned int *)v49])
              *v35++ = v43[v46];
          }
          ++v46;
          v42 -= 8;
        }
        while (v42);
      }
    }
    else
    {
      v36 = 0;
    }
LABEL_62:
    LODWORD(v72) = (unint64_t)((char *)v35 - (char *)v71) >> 3;
    sub_1C6319C38(a4, (uint64_t)v71, v72);
    if (v36)
    {
      if (byte_1ED8211E0)
      {
        v50 = *(char **)(a2 + 8);
        v51 = *(char **)(a2 + 16);
        v68 = v70;
        v69 = 0x400000000;
        sub_1C499C3FC((unsigned int *)&v68, v50, v51);
        v52 = v68;
        v53 = v69;
        sub_1C63192F0(*(_QWORD *)a4, (uint64_t *)(a4 + 16));
        v54 = *(char **)a4;
        v67[0] = &v52[8 * v53];
        v67[1] = v67[0];
        v67[2] = v52;
        v67[3] = v52;
        sub_1C63B07A8((uint64_t)v67, v54);
        *(_BYTE *)(a4 + 24) = 1;
        if (v68 != v70)
          free(v68);
      }
    }
    else
    {
      if (v59 >= 0)
        v55 = (void **)&__dst;
      else
        v55 = __dst;
      if (v59 >= 0)
        v56 = HIBYTE(v59) & 0x7F;
      else
        v56 = v58;
      llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(a4 + 8), a2, (uint64_t)v55, v56);
      if (*(_QWORD *)(a4 + 16) == a2)
        *(_BYTE *)(a4 + 24) = 1;
    }
    llvm::getLoopPassPreservedAnalyses(a5);
    if (v71 != v73)
      free(v71);
  }
  else
  {
    *(_QWORD *)a5 = a5 + 32;
    *(_QWORD *)(a5 + 8) = a5 + 32;
    *(_QWORD *)(a5 + 16) = 2;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 48) = a5 + 80;
    *(_QWORD *)(a5 + 56) = a5 + 80;
    *(_QWORD *)(a5 + 64) = 2;
    *(_DWORD *)(a5 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (SHIBYTE(v59) < 0)
    operator delete(__dst);
  if (v61 != v60)
    free(v61);
  v22 = v66;
  v66 = 0;
  if (v22)
  {
    v23 = *v22;
    *v22 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    MEMORY[0x1CAA32FC0](v22, 0x20C4093837F09);
  }
}

uint64_t sub_1C5BA6468(llvm *a1, const llvm::Loop *a2, uint64_t a3, llvm::ScalarEvolution *a4, llvm::AssumptionCache *a5, llvm::AssumptionCache *a6, llvm::OptimizationRemarkEmitter *a7, uint64_t **a8, uint64_t a9, unsigned __int8 a10, int a11, char a12, char a13, uint64_t a14, uint64_t a15, __int16 a16, int a17, __int16 a18, int a19, __int16 a20,int a21,__int16 a22,int a23,__int16 a24,uint64_t a25)
{
  char hasUnrollTransformation;
  const llvm::Loop *v34;
  char v35;
  const llvm::Loop *v36;
  uint64_t v37;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  const llvm::BasicBlock *ExitingBlock;
  const llvm::BasicBlock **v46;
  uint64_t v47;
  unsigned int SmallConstantTripMultiple;
  const llvm::BasicBlock *v49;
  unsigned int SmallConstantTripCount;
  uint64_t v51;
  unsigned int SmallConstantMaxTripCount;
  uint64_t LoopLatch;
  char isBackedgeTakenCountMaxOrZero;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  const llvm::TargetTransformInfo *v58;
  BOOL v59;
  llvm::MDNode *FollowupLoopID;
  char v61;
  llvm::MDNode *v62;
  char v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  void **v72;
  char *v73;
  unint64_t v74;
  void **v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *LoopID;
  uint64_t v81;
  _BOOL4 v82;
  char v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  _BYTE v88[256];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  std::string v96;
  void *v97;
  char v98;
  unsigned __int8 *v99;
  const llvm::BasicBlock **v100;
  uint64_t v101;
  _BYTE v102[64];
  char *v103;
  uint64_t v104;
  char *v105;
  unsigned int v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  int v110;
  int v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  char v115;
  char v116;
  char *v117;
  uint64_t v118;
  _BYTE v119[260];
  int v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  hasUnrollTransformation = llvm::hasUnrollTransformation(a1, a2);
  if ((hasUnrollTransformation & 2) != 0)
    return 0;
  v35 = hasUnrollTransformation;
  if (*(_QWORD *)a1)
  {
    if (llvm::hasUnrollAndJamTransformation(*(llvm **)a1, v34) == 5
      && llvm::hasUnrollTransformation(a1, v34) != 5)
    {
      return 0;
    }
  }
  if (llvm::hasUnrollAndJamTransformation(a1, v34) == 5
    && llvm::hasUnrollTransformation(a1, v36) != 5
    || !llvm::Loop::isLoopSimplifyForm(a1)
    || (v35 & 1) == 0 && (a12 & 1) != 0)
  {
    return 0;
  }
  v81 = a3;
  v39 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)a1 + 4) + 56) + 112);
  if (v39)
  {
    v40 = (*(_BYTE *)(v39 + 17) & 4) != 0 || *(char *)(v39 + 13) < 0;
    v82 = v40;
  }
  else
  {
    v82 = 0;
  }
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  llvm::gatherUnrollingPreferences((llvm::BasicBlock ***)a1, (uint64_t)a4, a5, a8, a9, (uint64_t)a7, a11, a15, (uint64_t)&v90, a14, a16, 0, a18, 0, a20, a25);
  v89 = llvm::gatherPeelingPreferences((uint64_t)a1, (uint64_t)a4, a5, a22, a24, 1);
  if (!(_DWORD)v90)
  {
    if (BYTE8(v92))
      v41 = HIDWORD(v90) == 0;
    else
      v41 = 1;
    v42 = v82;
    if (!v41)
      v42 = 1;
    if (v42 != 1)
      return 0;
  }
  v84 = v88;
  v85 = v88;
  v86 = 32;
  v87 = 0;
  llvm::CodeMetrics::collectEphemeralValues((uint64_t)a1, a6, (llvm::SmallPtrSetImplBase *)&v84);
  v43 = llvm::ApproximateLoopSize((uint64_t)a1, &v95, (_BYTE *)&v94 + 1, &v94, a5, &v84, SDWORD1(v92));
  v37 = 0;
  if (!HIBYTE(v94))
  {
    if (v82)
    {
      if (v90 <= v43 + 1)
        v44 = v43 + 1;
      else
        v44 = v90;
      LODWORD(v90) = v44;
    }
    if (v95)
    {
      v37 = 0;
      goto LABEL_73;
    }
    v79 = v43;
    v100 = (const llvm::BasicBlock **)v102;
    v101 = 0x800000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a1, (uint64_t)&v100);
    if ((_DWORD)v101)
    {
      LODWORD(ExitingBlock) = 0;
      v46 = v100;
      v47 = 8 * v101;
      SmallConstantTripMultiple = 1;
      do
      {
        v49 = *v46++;
        SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(a4, a1, v49);
        if (SmallConstantTripCount - 1 < (int)ExitingBlock - 1)
        {
          SmallConstantTripMultiple = SmallConstantTripCount;
          LODWORD(ExitingBlock) = SmallConstantTripCount;
        }
        v47 -= 8;
      }
      while (v47);
      if ((_DWORD)ExitingBlock)
      {
        SmallConstantMaxTripCount = 0;
        goto LABEL_46;
      }
    }
    else
    {
      SmallConstantTripMultiple = 1;
    }
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a1);
    if (LoopLatch
      && (ExitingBlock = (const llvm::BasicBlock *)LoopLatch,
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting((uint64_t)a1, LoopLatch))
      || (ExitingBlock = (const llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(a1)) != 0)
    {
      SmallConstantTripMultiple = llvm::ScalarEvolution::getSmallConstantTripMultiple(a4, a1, ExitingBlock);
      LODWORD(ExitingBlock) = 0;
    }
    SmallConstantMaxTripCount = 1;
LABEL_46:
    if ((_BYTE)v94)
      BYTE10(v92) = 0;
    v78 = SmallConstantMaxTripCount;
    if (SmallConstantMaxTripCount)
    {
      SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a4, a1);
      isBackedgeTakenCountMaxOrZero = llvm::ScalarEvolution::isBackedgeTakenCountMaxOrZero(a4, a1);
    }
    else
    {
      isBackedgeTakenCountMaxOrZero = 0;
    }
    v55 = llvm::computeUnrollCount(a1, a5, (unsigned __int8 *)a2, v51, (llvm::ConstantInt ****)a4, &v84, a7, ExitingBlock, SmallConstantMaxTripCount, isBackedgeTakenCountMaxOrZero, SmallConstantTripMultiple, v79, (int *)&v90, &v89, &v83);
    if (DWORD1(v91))
    {
      if ((_DWORD)v89)
      {
        v56 = ****(_QWORD ****)a7;
        v57 = (uint64_t *)v81;
        if (*(_QWORD *)(v56 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v56 + 72) + 48))(*(_QWORD *)(v56 + 72)))
        {
          llvm::Loop::getStartLoc(a1, &v99);
          v64 = (int)v99;
          if (v99)
          {
            v65 = *(_QWORD *)&v99[-8 * *((unsigned int *)v99 + 2)];
            if (*(_BYTE *)v65 != 15)
              v65 = *(_QWORD *)(v65 - 8 * *(unsigned int *)(v65 + 8));
            v66 = *((_DWORD *)v99 + 1);
            v64 = *((unsigned __int16 *)v99 + 1);
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          v67 = **((_QWORD **)a1 + 4);
          v68 = *(_QWORD *)(v67 + 56);
          DWORD2(v108) = 9;
          BYTE12(v108) = 2;
          *(_QWORD *)&v109 = v68;
          *((_QWORD *)&v109 + 1) = v65;
          v110 = v66;
          v111 = v64;
          v112 = "loop-unroll";
          v113 = "Peeled";
          v114 = 6;
          v115 = 0;
          v116 = 0;
          v117 = v119;
          v118 = 0x400000000;
          v119[256] = 0;
          v120 = -1;
          v121 = v67;
          *(_QWORD *)&v108 = &off_1E814E500;
          v103 = " peeled loop by ";
          v104 = 16;
          sub_1C53B17B4((uint64_t)&v117, (const void **)&v103);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v96, "PeelCount", 9uLL, v89);
          v69 = sub_1C47E3888((uint64_t)&v108, (uint64_t)&v96);
          v103 = " iterations";
          v104 = 11;
          sub_1C53B17B4(v69 + 80, (const void **)&v103);
          sub_1C61998EC((uint64_t)&v103, v69);
          v103 = (char *)&off_1E814E500;
          if (v98 < 0)
            operator delete(v97);
          v57 = (uint64_t *)v81;
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          *(_QWORD *)&v108 = &off_1E814E790;
          v70 = v117;
          if ((_DWORD)v118)
          {
            v71 = (unint64_t)v118 << 6;
            do
            {
              v72 = (void **)&v70[v71];
              if (v70[v71 - 17] < 0)
                operator delete(*(v72 - 5));
              if (*((char *)v72 - 41) < 0)
                operator delete(*(v72 - 8));
              v71 -= 64;
            }
            while (v71);
            v70 = v117;
            v57 = (uint64_t *)v81;
          }
          if (v70 != v119)
            free(v70);
          if (v99)
            llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
          llvm::OptimizationRemarkEmitter::emit(a7, (llvm::DiagnosticInfoOptimizationBase *)&v103);
          v103 = (char *)&off_1E814E790;
          v73 = v105;
          if (v106)
          {
            v74 = (unint64_t)v106 << 6;
            do
            {
              v75 = (void **)&v73[v74];
              if (v73[v74 - 17] < 0)
                operator delete(*(v75 - 5));
              if (*((char *)v75 - 41) < 0)
                operator delete(*(v75 - 8));
              v74 -= 64;
            }
            while (v74);
            v73 = v105;
          }
          if (v73 != (char *)&v107)
            free(v73);
        }
        if (llvm::peelLoop(a1, (llvm::Loop *)v89, (llvm::LoopInfo *)v57, (int32x2_t *)a4, a2, a6, (char **)a10))
        {
          v37 = 1;
          llvm::simplifyLoopAfterUnroll(a1, (llvm::Loop *)1, v57, (uint64_t ***)a4, a2, (llvm::DSOLocalEquivalent **)a6, a5, v58);
          if (!BYTE6(v89))
            goto LABEL_71;
          goto LABEL_57;
        }
        v37 = 0;
      }
      else
      {
        v77 = v55;
        if (v78)
          v59 = SmallConstantTripMultiple % DWORD1(v91) != 0;
        else
          v59 = 0;
        BYTE9(v92) &= v59;
        LoopID = (unsigned int *)llvm::Loop::getLoopID(a1);
        v103 = 0;
        v37 = llvm::UnrollLoop(a1, DWORD1(v91) | ((unint64_t)BYTE12(v92) << 32) | ((unint64_t)BYTE9(v92) << 40) | ((unint64_t)BYTE11(v92) << 48) | ((unint64_t)BYTE14(v92) << 56), a13, v81, (unint64_t)a4, (uint64_t)a2, (unint64_t)a6, a5, a7, a10, v76, (BOOL)&v103);
        if (!(_DWORD)v37)
          goto LABEL_71;
        if (v103)
        {
          v108 = xmmword_1E8196030;
          v109 = *(_OWORD *)&off_1E8196040;
          FollowupLoopID = llvm::makeFollowupLoopID(LoopID, (uint64_t)&v108, 2, "", 0);
          if (v61)
            llvm::Loop::setLoopID((llvm::Loop *)v103, FollowupLoopID);
        }
        if ((_DWORD)v37 == 2)
          goto LABEL_71;
        v108 = xmmword_1E8196050;
        v109 = *(_OWORD *)&off_1E8196060;
        v62 = llvm::makeFollowupLoopID(LoopID, (uint64_t)&v108, 2, "", 0);
        if (v63)
        {
          llvm::Loop::setLoopID(a1, v62);
        }
        else if (v77)
        {
LABEL_57:
          llvm::Loop::setLoopAlreadyUnrolled(a1);
        }
      }
    }
    else
    {
      v37 = 0;
    }
LABEL_71:
    if (v100 != (const llvm::BasicBlock **)v102)
      free(v100);
  }
LABEL_73:
  if (v85 != v84)
    free(v85);
  return v37;
}

void llvm::LoopUnrollPass::run(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t CachedResultImpl;
  int32x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm **v18;
  llvm **v19;
  int v20;
  int v21;
  llvm *v22;
  llvm::ScalarEvolution *v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  llvm *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t ***v36;
  void **p_dst;
  size_t v38;
  const char *v39;
  int v40;
  BOOL v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ****v48;
  uint64_t ***v49;
  int v50;
  int v51;
  uint64_t ***v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  llvm::ScalarEvolution *v60;
  llvm::OptimizationRemarkEmitter *v61;
  llvm::AssumptionCache *v62;
  uint64_t **v63;
  llvm::ScalarEvolution *v64;
  uint64_t v65;
  llvm::Loop *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void **__dst;
  size_t v72;
  int64_t v73;
  _QWORD v74[9];
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[6];

  v77[4] = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, a2);
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, a2);
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, a2);
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominatorTreeAnalysis::Key, a2);
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, a2);
  v70 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OptimizationRemarkEmitterAnalysis::Key, a2);
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a3, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key, a2);
  if (CachedResultImpl)
    v58 = *(_QWORD *)(CachedResultImpl + 8);
  else
    v58 = 0;
  v13 = (int32x2_t *)(ResultImpl + 8);
  v14 = v8 + 8;
  v66 = (llvm::Loop *)(v10 + 8);
  v64 = (llvm::ScalarEvolution *)(v11 + 8);
  v15 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a2);
  v16 = sub_1C4E60FE0((uint64_t *)(v15 + 8), *(_QWORD *)(a2 + 40));
  v65 = v16;
  if (v16)
  {
    v17 = v58;
    if (*(_QWORD *)(v16 + 8))
      v63 = (uint64_t **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, a2)+ 8);
    else
      v63 = 0;
  }
  else
  {
    v63 = 0;
    v17 = v58;
  }
  v61 = (llvm::OptimizationRemarkEmitter *)(v70 + 8);
  v62 = (llvm::AssumptionCache *)(v9 + 8);
  v18 = *(llvm ***)(v8 + 32);
  v19 = *(llvm ***)(v8 + 40);
  if (v18 == v19)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = llvm::simplifyLoop(*v18, v66, (unint64_t **)v14, v13, v64, 0, 0);
      v22 = *v18++;
      v20 |= v21 | llvm::formLCSSARecursively(v22, v66, (const llvm::DominatorTree *)v14, (const llvm::LoopInfo *)v13, v23);
    }
    while (v18 != v19);
  }
  v74[0] = 1;
  for (i = 1; i != 9; i += 2)
    v74[i] = -4096;
  v75 = v77;
  v76 = 0x400000000;
  sub_1C5F3D7BC(v14, (char *)v74);
  v25 = v76;
  v26 = v65;
  if ((_DWORD)v76)
  {
    v59 = v8 + 8;
    v60 = (llvm::ScalarEvolution *)v13;
    do
    {
      v27 = (char *)&v75[v25];
      v28 = (llvm *)*((_QWORD *)v27 - 1);
      sub_1C5B25FEC(v74, (_QWORD *)v27 - 1);
      v29 = v76 - 1;
      do
      {
        v30 = v29;
        if (!v29)
          break;
      }
      while (!v75[--v29]);
      LODWORD(v76) = v30;
      v32 = a1[1];
      v33 = a1[1];
      if (v26)
      {
        v34 = v32 >> 8;
        if (*(_BYTE *)(v26 + 49))
        {
          v35 = v34 <= 1 ? 1 : v32 >> 8;
          if (*(_BYTE *)(v26 + 48))
          {
            v33 = 0;
            v34 = v35;
          }
        }
      }
      else
      {
        v34 = v32 >> 8;
      }
      v36 = (uint64_t ***)**((_QWORD **)v28 + 4);
      if (!v36 || (*((_BYTE *)v36 + 23) & 0x10) == 0)
      {
        HIBYTE(v73) = 14;
        p_dst = (void **)&__dst;
        v38 = 14;
        v39 = "<unnamed loop>";
LABEL_32:
        memmove(p_dst, v39, v38);
        goto LABEL_33;
      }
      v44 = ***v36;
      v45 = *(_QWORD *)(v44 + 152);
      v46 = *(unsigned int *)(v44 + 168);
      if ((_DWORD)v46)
      {
        LODWORD(v47) = (v46 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        v48 = (uint64_t ****)(v45 + 16 * v47);
        v49 = *v48;
        if (*v48 == v36)
          goto LABEL_53;
        v50 = 1;
        while (v49 != (uint64_t ***)-4096)
        {
          v51 = v47 + v50++;
          v47 = v51 & (v46 - 1);
          v49 = *(uint64_t ****)(v45 + 16 * v47);
          if (v49 == v36)
          {
            v48 = (uint64_t ****)(v45 + 16 * v47);
            goto LABEL_53;
          }
        }
      }
      v48 = (uint64_t ****)(v45 + 16 * v46);
LABEL_53:
      v52 = v48[1];
      v53 = (unint64_t)*v52;
      v39 = (const char *)(v52 + 2);
      v38 = v53;
      if (v53 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v38 >= 0x17)
      {
        v54 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v54 = v38 | 7;
        v55 = v54 + 1;
        p_dst = (void **)operator new(v54 + 1);
        v56 = v55 | 0x8000000000000000;
        v17 = v58;
        v72 = v38;
        v73 = v56;
        __dst = p_dst;
        goto LABEL_32;
      }
      HIBYTE(v73) = v38;
      p_dst = (void **)&__dst;
      if (v38)
        goto LABEL_32;
LABEL_33:
      *((_BYTE *)p_dst + v38) = 0;
      v14 = v14 & 0xFFFFFFFFFFFF0000 | *a1;
      v69 = v33 | ((unint64_t)v34 << 8) | v69 & 0xFFFFFFFFFFFF0000;
      v70 = v70 & 0xFFFFFFFFFFFF0000 | a1[4];
      v67 = v67 & 0xFFFFFFFFFFFF0000 | a1[2];
      v68 = v68 & 0xFFFFFFFFFFFF0000 | a1[3];
      v26 = v65;
      v40 = sub_1C5BA6468(v28, v66, v59, v60, v62, v64, v61, v63, v65, 1u, *((_DWORD *)a1 + 5), a1[12], HIBYTE(a1[12]), 0, 0, v14, SHIDWORD(v14), v67, SHIDWORD(v67),
              v68,
              SHIDWORD(v68),
              v69,
              SHIDWORD(v69),
              a1[4],
              *(_QWORD *)(a1 + 6));
      v41 = v40 != 0;
      if (v17 && v40 == 2)
      {
        if (v73 >= 0)
          v42 = (void **)&__dst;
        else
          v42 = __dst;
        if (v73 >= 0)
          v43 = HIBYTE(v73) & 0x7F;
        else
          v43 = v72;
        llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(v17, (uint64_t)v28, (uint64_t)v42, v43);
      }
      if (SHIBYTE(v73) < 0)
        operator delete(__dst);
      LOBYTE(v20) = v20 | v41;
      v25 = v76;
    }
    while ((_DWORD)v76);
  }
  if ((v20 & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a4);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v75 != v77)
    free(v75);
  if ((v74[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v74[1], 8);
}

unsigned int *sub_1C5BA724C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t LoopLatch;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[5];

  v66[4] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 8);
  if (v7 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v6 + 16, v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a2;
  ++*(_DWORD *)(v6 + 8);
  while (2)
  {
    v63 = a3;
    v8 = a3 & 0x3FFFFFFF;
    result = (unsigned int *)*a1;
    v10 = *(_DWORD *)(*a1 + 8);
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)result + 8 * v10 - 8);
      result[2] = v10 - 1;
      v12 = a1[1];
      v64 = 0;
      if (sub_1C5BA7810(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), v11, v8, &v64))
      {
        v13 = v64;
        v14 = *(_QWORD *)v12;
        v15 = *(unsigned int *)(v12 + 16);
      }
      else
      {
        v14 = *(_QWORD *)v12;
        v15 = *(unsigned int *)(v12 + 16);
        v13 = (_DWORD *)(*(_QWORD *)v12 + 16 * v15);
      }
      if (v13 == (_DWORD *)(v14 + 16 * v15))
        goto LABEL_72;
      v16 = v13[2];
      if (v16 < 0)
        goto LABEL_72;
      v13[2] = v16 | 0x80000000;
      if (*(_BYTE *)(v11 + 16) == 83 && v11 != 0)
      {
        v18 = *(_QWORD *)a1[2];
        if (*(_QWORD *)(v11 + 40) == **(_QWORD **)(v18 + 32))
        {
          if (v63)
          {
            LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v18);
            v31 = *(_DWORD *)(v11 + 20);
            v32 = v31 & 0x7FFFFFF;
            if ((v31 & 0x7FFFFFF) != 0)
            {
              v33 = 0;
              while (1)
              {
                v34 = v11 - 32 * v32;
                if ((v31 & 0x40000000) != 0)
                  v34 = *(_QWORD *)(v11 - 8);
                if (*(_QWORD *)(v34 + 32 * *(unsigned int *)(v11 + 60) + 8 * v33) == LoopLatch)
                  break;
                if (v32 == ++v33)
                  goto LABEL_31;
              }
            }
            else
            {
LABEL_31:
              LODWORD(v33) = -1;
            }
            if ((v31 & 0x40000000) != 0)
              v35 = *(_QWORD *)(v11 - 8);
            else
              v35 = v11 - 32 * v32;
            v36 = *(_QWORD *)(v35 + 32 * v33);
            if (v36)
              v37 = *(unsigned __int8 *)(v36 + 16) >= 0x1Cu;
            else
              v37 = 0;
            if (v37)
            {
              v38 = *(_QWORD *)a1[2];
              v39 = sub_1C477672C(v38 + 56, *(_QWORD *)(v36 + 40));
              v40 = *(_QWORD *)(v38 + 64);
              v41 = v40 == *(_QWORD *)(v38 + 56) ? 76 : 72;
              if (v39 != (_QWORD *)(v40 + 8 * *(unsigned int *)(v38 + v41)))
              {
                v42 = a1[3];
                v43 = *(unsigned int *)(v42 + 8);
                if (v43 >= *(unsigned int *)(v42 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1[3], v42 + 16, v43 + 1, 8);
                  v43 = *(unsigned int *)(v42 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v42 + 8 * v43) = v36;
                ++*(_DWORD *)(v42 + 8);
              }
            }
          }
          goto LABEL_72;
        }
      }
      if ((v16 & 0x40000000) == 0)
      {
        v19 = *(_DWORD *)(v11 + 20);
        if ((v19 & 0x40000000) != 0)
        {
          v21 = *(uint64_t **)(v11 - 8);
          v20 = v19 & 0x7FFFFFF;
        }
        else
        {
          v20 = v19 & 0x7FFFFFF;
          v21 = (uint64_t *)(v11 - 32 * v20);
        }
        v22 = (_QWORD *)a1[5];
        v64 = v66;
        v65 = 0x400000000;
        if (v20 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v20, 8);
          v23 = v65;
          v25 = v64;
          v24 = v65;
        }
        else
        {
          v23 = 0;
          if (!v20)
          {
            v29 = v66;
LABEL_47:
            LODWORD(v65) = v23 + v20;
            v44 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*v22 + 72))(*v22, v11, v29);
            v46 = v45;
            if (v64 != v66)
              free(v64);
            v47 = a1[4];
            if (v46 == 1)
              *(_DWORD *)(v47 + 8) = 1;
            v48 = *(_QWORD *)v47 + v44;
            if (__OFADD__(*(_QWORD *)v47, v44))
              v48 = (v48 >> 63) ^ 0x8000000000000000;
            *(_QWORD *)v47 = v48;
            goto LABEL_54;
          }
          v24 = 0;
          v25 = v66;
        }
        v26 = 32 * v20;
        v27 = &v25[v24];
        do
        {
          v28 = *v21;
          v21 += 4;
          *v27++ = v28;
          v26 -= 32;
        }
        while (v26);
        v29 = v64;
        goto LABEL_47;
      }
LABEL_54:
      v49 = *(_DWORD *)(v11 + 20);
      if ((v49 & 0x40000000) != 0)
      {
        v51 = *(_QWORD *)(v11 - 8);
        v50 = v49 & 0x7FFFFFF;
        if (!v50)
          goto LABEL_72;
      }
      else
      {
        v50 = v49 & 0x7FFFFFF;
        v51 = v11 - 32 * v50;
        if (!v50)
          goto LABEL_72;
      }
      v52 = 32 * v50;
      do
      {
        v53 = *(_QWORD *)v51;
        if (*(_QWORD *)v51)
          v54 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16) >= 0x1Cu;
        else
          v54 = 0;
        if (v54)
        {
          v55 = *(_QWORD *)a1[2];
          v56 = sub_1C477672C(v55 + 56, *(_QWORD *)(v53 + 40));
          v57 = *(_QWORD *)(v55 + 64);
          v58 = v57 == *(_QWORD *)(v55 + 56) ? 76 : 72;
          if (v56 != (_QWORD *)(v57 + 8 * *(unsigned int *)(v55 + v58)))
          {
            v59 = *a1;
            v60 = *(unsigned int *)(*a1 + 8);
            if (v60 >= *(unsigned int *)(*a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v59 + 16, v60 + 1, 8);
              v60 = *(unsigned int *)(v59 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v59 + 8 * v60) = v53;
            ++*(_DWORD *)(v59 + 8);
          }
        }
        v51 += 32;
        v52 -= 32;
      }
      while (v52);
LABEL_72:
      result = (unsigned int *)*a1;
      v10 = *(_DWORD *)(*a1 + 8);
    }
    while (v10);
    v61 = a1[3];
    v62 = *(unsigned int *)(v61 + 8);
    if ((_DWORD)v62)
    {
      sub_1C4DFE610(result, *(_BYTE **)v61, (_BYTE *)(*(_QWORD *)v61 + 8 * v62));
      *(_DWORD *)(a1[3] + 8) = 0;
      a3 = v63 - 1;
      continue;
    }
    return result;
  }
}

uint64_t sub_1C5BA76E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;

  v11 = 0;
  result = sub_1C5BA7910(a1, *a2, a2[1], &v11);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 4;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5BA7A10(a1, v6);
  v11 = 0;
  result = sub_1C5BA7910(a1, *a2, a2[1], &v11);
LABEL_6:
  v7 = v11;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096 || v7[1] != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_OWORD *)a2;
  v9 = *(unsigned int *)(a1 + 80);
  if (v9 >= *(_DWORD *)(a1 + 84))
  {
    v10 = *(_OWORD *)a2;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v9 + 1, 16);
    v8 = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 72) + 16 * v9) = v8;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

uint64_t sub_1C5BA7810(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * ((4 * a4) >> 2)) << 32)
       + (37 * ((4 * a4) >> 2))
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 16 * v9);
    v11 = *((_DWORD *)v10 + 2);
    v12 = *v10;
    if (*v10 == a3 && ((v11 ^ a4) & 0x3FFFFFFF) == 0)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (1)
      {
        v14 = v11 & 0x3FFFFFFF;
        if (v12 == -4096 && !(_DWORD)v14)
          break;
        if (v16)
          v18 = 0;
        else
          v18 = (_DWORD)v14 == 0;
        if (v18 && v12 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 16 * (v20 & v8));
        v11 = *((_DWORD *)v10 + 2);
        v12 = *v10;
        v14 = 1;
        if (*v10 == a3 && ((v11 ^ a4) & 0x3FFFFFFF) == 0)
          goto LABEL_9;
      }
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t sub_1C5BA7910(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 16 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_9;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_9:
  *a4 = v12;
  return result;
}

void sub_1C5BA7A10(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5BA7B94(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  sub_1C5BA7B94(a1, v14, v9);
}

void sub_1C5BA7B94(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 64;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_12;
    v8 = *(void **)(a1 + 8);
    v9 = 16 * v7;
  }
  memset_pattern16(v8, &unk_1C85F2160, v9);
LABEL_12:
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      sub_1C5BA7910(a1, v10, v11, &v13);
      v12 = v13;
      *v13 = *a2;
      v12[1] = a2[1];
      *(_DWORD *)a1 += 2;
    }
    a2 += 2;
  }
}

uint64_t sub_1C5BA7C64()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BA5E50(v0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void sub_1C5BA7CC0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BA7CE4(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

BOOL sub_1C5BA7D28(uint64_t a1, const llvm::Loop *a2, llvm::LPPassManager *a3)
{
  llvm::AssumptionCache *v3;
  uint64_t *v4;
  _BOOL8 v8;
  llvm::Function *v9;
  char **v10;
  char *v11;
  const llvm::Loop *v12;
  char **v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  llvm::ScalarEvolution *v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char *v27;
  llvm::AssumptionCacheTracker *v28;
  llvm::AssumptionCache *AssumptionCache;
  uint64_t AnalysisPass;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t *v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  if ((llvm::LoopPass::skipLoop((llvm::LoopPass *)a1, a2) & 1) != 0)
    return 0;
  v9 = *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::DominatorTreeWrapperPass::ID);
  v12 = (const llvm::Loop *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::DominatorTreeWrapperPass::ID);
  v13 = **(char ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != llvm::LoopInfoWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), llvm::LoopInfoWrapperPass::ID);
  v16 = **(char ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != llvm::ScalarEvolutionWrapperPass::ID);
  v18 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v19 = **(char ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != llvm::TargetTransformInfoWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v36[0] = 0;
  v36[1] = 0;
  LODWORD(v37) = 0;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v22 = *(_QWORD *)(v21 + 56);
  if (v22)
  {
    v12 = (const llvm::Loop *)((char *)v12 + 32);
    v4 = v38;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v22 + 48))(&v35, v22, v9);
    v3 = (llvm::AssumptionCache *)(v21 + 64);
    v23 = v35;
    if (!*(_BYTE *)(v21 + 72))
    {
      *(_QWORD *)(v21 + 64) = v35;
      *(_BYTE *)(v21 + 72) = 1;
      goto LABEL_15;
    }
    v35 = 0;
    v24 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v23;
    if (!v24)
      goto LABEL_15;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v35;
    v35 = 0;
    if (!v25)
      goto LABEL_15;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
LABEL_15:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v4);
  sub_1C4D8B52C(v36);
  v26 = **(char ****)(a1 + 8);
  do
  {
    v27 = *v26;
    v26 += 2;
  }
  while (v27 != llvm::AssumptionCacheTracker::ID);
  v28 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v26 - 1) + 96))(*(v26 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v28, v9);
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v36, v9);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), byte_1EF8F7648, 1);
  v31 = sub_1C5BA6468(a2, v12, v15 + 32, v18, v3, AssumptionCache, (llvm::OptimizationRemarkEmitter *)v36, 0, 0, AnalysisPass != 0, *(_DWORD *)(a1 + 28), *(_WORD *)(a1 + 32), HIBYTE(*(_WORD *)(a1 + 32)), *(_QWORD *)(a1 + 36), *(_QWORD *)(a1 + 44), *(_WORD *)(a1 + 52), 0, *(_WORD *)(a1 + 54), 0,
          *(_WORD *)(a1 + 56),
          0,
          *(_WORD *)(a1 + 58),
          0,
          *(_WORD *)(a1 + 60),
          *(_QWORD *)(a1 + 64));
  if (v31 == 2)
    llvm::LPPassManager::markLoopAsDeleted(a3, a2);
  v8 = v31 != 0;
  v32 = v37;
  v37 = 0;
  if (v32)
  {
    v33 = *v32;
    *v32 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    MEMORY[0x1CAA32FC0](v32, 0x20C4093837F09);
  }
  return v8;
}

uint64_t sub_1C5BA8064()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Forget everything in SCEV when doing LoopUnroll, instead of just the current top-mo"
                                     "st loop. This is sometimes preferred to reduce compile time.";
  v1.n128_u64[1] = 143;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::ForgetSCEVInLoopUnroll, "forget-scev-loop-unroll", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ForgetSCEVInLoopUnroll, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"The cost threshold for loop unrolling";
  v1.n128_u64[1] = 37;
  sub_1C61DDD4C((uint64_t)&unk_1ED820620, "unroll-threshold", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820620, &dword_1C475E000);
  v2 = 1;
  v3 = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The cost threshold for loop unrolling when optimizing for size";
  v1.n128_u64[1] = 62;
  sub_1C4DB1928((uint64_t)&unk_1ED8206E0, "unroll-optsize-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8206E0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"The cost threshold for partial loop unrolling";
  v1.n128_u64[1] = 45;
  sub_1C631E144(&v4, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8207A0, &dword_1C475E000);
  v2 = 1;
  v3 = 400;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The maximum 'boost' (represented as a percentage >= 100) applied to the threshold w"
                                     "hen aggressively unrolling a loop due to the dynamic cost savings. If completely un"
                                     "rolling a loop will reduce the total runtime from X to Y, we boost the loop unroll "
                                     "threshold to DefaultThreshold*std::min(MaxPercentThresholdBoost, X/Y). This limit a"
                                     "voids excessive code bloat.";
  v1.n128_u64[1] = 359;
  sub_1C4DB1928((uint64_t)&unk_1ED820860, "unroll-max-percent-threshold-boost", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820860, &dword_1C475E000);
  v2 = 1;
  v3 = 10;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Don't allow loop unrolling to simulate more than this number ofiterations when chec"
                                     "king full unroll profitability";
  v1.n128_u64[1] = 113;
  sub_1C4DB1928((uint64_t)&unk_1ED820920, "unroll-max-iteration-count-to-analyze", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820920, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Use this unroll count for all loops including those with unroll_count pragma values"
                                     ", for testing purposes";
  v1.n128_u64[1] = 105;
  sub_1C631E204(&v4, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8209E0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Set the max unroll count for partial and runtime unrolling, fortesting purposes";
  v1.n128_u64[1] = 79;
  sub_1C61DDD4C((uint64_t)&unk_1ED820AA0, "unroll-max-count", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820AA0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Set the max unroll count for full unrolling, for testing purposes";
  v1.n128_u64[1] = 65;
  sub_1C631E2C4(&v4, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED820B60, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Allows loops to be partially unrolled until -unroll-threshold loop size is reached.";
  v1.n128_u64[1] = 83;
  sub_1C61B2D38((uint64_t)&unk_1ED820C20, "unroll-allow-partial", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED820C20, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Allow generation of a loop remainder (extra iterations) when unrolling a loop.";
  v1.n128_u64[1] = 78;
  sub_1C61B2D38((uint64_t)&unk_1ED820CE0, "unroll-allow-remainder", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED820CE0, &dword_1C475E000);
  v3 = 1;
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Unroll loops with run-time trip counts";
  v1.n128_u64[1] = 38;
  sub_1C631E384(&v4, &v3, (__int128 *)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED820DA0, &dword_1C475E000);
  v2 = 1;
  v3 = 8;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The max of trip count upper bound that is considered in unrolling";
  v1.n128_u64[1] = 65;
  sub_1C4DB1928((uint64_t)&unk_1ED820E60, "unroll-max-upperbound", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820E60, &dword_1C475E000);
  v2 = 1;
  v3 = 0x4000;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Unrolled size limit for loops with an unroll(full) or unroll_count pragma.";
  v1.n128_u64[1] = 74;
  sub_1C4DB1928((uint64_t)&unk_1ED820F20, "pragma-unroll-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820F20, &dword_1C475E000);
  v2 = 1;
  v3 = 5;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"If the runtime tripcount for the loop is lower than the threshold, the loop is cons"
                                     "idered as flat and will be less aggressively unrolled.";
  v1.n128_u64[1] = 137;
  sub_1C4DB1928((uint64_t)&unk_1ED820FE0, "flat-loop-tripcount-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED820FE0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Allow the loop remainder to be unrolled.";
  v1.n128_u64[1] = 40;
  sub_1C61B2D38((uint64_t)&unk_1ED8210A0, "unroll-remainder", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8210A0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Enqueue and re-visit child loops in the loop PM after unrolling. This shouldn't typ"
                                     "ically be needed as child loops (or their clones) were already visited.";
  v1.n128_u64[1] = 154;
  sub_1C61B2D38((uint64_t)&unk_1ED821160, "unroll-revisit-child-loops", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED821160, &dword_1C475E000);
  v2 = 1;
  v3 = 300;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Threshold (max size of unrolled loop) to use in aggressive (O3) optimizations";
  v1.n128_u64[1] = 77;
  sub_1C4DB1928((uint64_t)&unk_1ED821220, "unroll-threshold-aggressive", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821220, &dword_1C475E000);
  v2 = 1;
  v3 = 150;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Default threshold (max size of unrolled loop), used in all but O3 optimizations";
  v1.n128_u64[1] = 79;
  sub_1C4DB1928((uint64_t)&unk_1ED8212E0, "unroll-threshold-default", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8212E0, &dword_1C475E000);
}

uint64_t sub_1C5BA85B8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  uint64_t v8;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v3);
  llvm::initializeLCSSAWrapperPassPass(a1, v4);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v5);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDependenceAnalysisWrapperPassPass(a1, v6);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v7);
  v8 = operator new();
  *(_QWORD *)v8 = "Unroll and Jam loops";
  *(_QWORD *)(v8 + 8) = 20;
  *(_QWORD *)(v8 + 16) = "loop-unroll-and-jam";
  *(_QWORD *)(v8 + 24) = 19;
  *(_QWORD *)(v8 + 32) = &unk_1ED8213A0;
  *(_WORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 42) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = sub_1C5BA8B84;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v8, 1);
  return v8;
}

uint64_t sub_1C5BA8694(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8213A0;
  *(_QWORD *)a1 = &off_1E8196080;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8213A8);
  if (v4 != -1)
  {
    v8[0] = sub_1C5BA85B8;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8213A8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::LoopUnrollAndJamPass::run@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  const llvm::Function *v9;
  llvm::DependenceInfo *v10;
  llvm::Loop *v11;
  llvm::AssumptionCache *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  char v17;
  llvm::ScalarEvolution *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t ***v24;
  void ***p_dst;
  size_t v26;
  const char *v27;
  int v28;
  BOOL v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t ***v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::AssumptionCache *v44;
  llvm::Loop *v45;
  llvm::DependenceInfo *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *result;
  uint64_t *v50;
  uint64_t v51;
  llvm::ScalarEvolution *v53;
  int v54;
  llvm::AssumptionCache *v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t *v58;
  uint64_t v59;
  int8x16_t v60;
  const llvm::Function *v61;
  void **__dst;
  void **v63;
  int64_t v64;
  uint64_t *v65;
  _QWORD v66[9];
  void *v67;
  uint64_t v68;
  _QWORD v69[6];

  v69[4] = *MEMORY[0x1E0C80C00];
  v9 = *(const llvm::Function **)(**(_QWORD **)(**(_QWORD **)(a2 + 8) + 32) + 56);
  v59 = *a3;
  v60 = vextq_s8(*(int8x16_t *)(a3 + 3), *(int8x16_t *)(a3 + 3), 8uLL);
  v61 = v9;
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v57, v9);
  v10 = (llvm::DependenceInfo *)a3[3];
  v11 = (llvm::Loop *)a3[4];
  v12 = (llvm::AssumptionCache *)a3[6];
  v53 = (llvm::ScalarEvolution *)a3[2];
  v54 = *a1;
  v13 = *(uint64_t **)(a2 + 8);
  v14 = *(unsigned int *)(a2 + 16);
  v55 = (llvm::AssumptionCache *)a3[1];
  v56 = *v13;
  v66[0] = 1;
  for (i = 1; i != 9; i += 2)
    v66[i] = -4096;
  v67 = v69;
  v68 = 0x400000000;
  __dst = (void **)&v13[v14];
  v63 = __dst;
  v64 = (int64_t)v13;
  v65 = v13;
  sub_1C63B07A8((uint64_t)&__dst, (char *)v66);
  v16 = v68;
  if ((_DWORD)v68)
  {
    v17 = 0;
    v18 = v53;
    while (1)
    {
      v19 = (char *)v67 + 8 * v16;
      v20 = *((_QWORD *)v19 - 1);
      sub_1C5B25FEC(v66, (_QWORD *)v19 - 1);
      v21 = v68 - 1;
      do
      {
        v22 = v21;
        if (!v21)
          break;
      }
      while (!*((_QWORD *)v67 + --v21));
      LODWORD(v68) = v22;
      v24 = **(uint64_t *****)(v20 + 32);
      if (!v24 || (*((_BYTE *)v24 + 23) & 0x10) == 0)
      {
        HIBYTE(v64) = 14;
        p_dst = &__dst;
        v26 = 14;
        v27 = "<unnamed loop>";
        goto LABEL_11;
      }
      v32 = ***v24;
      v33 = *(_QWORD *)(v32 + 152);
      v34 = *(unsigned int *)(v32 + 168);
      if ((_DWORD)v34)
      {
        LODWORD(v35) = (v34 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        v36 = (uint64_t ****)(v33 + 16 * v35);
        v37 = *v36;
        if (*v36 == v24)
          goto LABEL_33;
        v38 = 1;
        while (v37 != (uint64_t ***)-4096)
        {
          v39 = v35 + v38++;
          v35 = v39 & (v34 - 1);
          v37 = *(uint64_t ****)(v33 + 16 * v35);
          if (v37 == v24)
          {
            v36 = (uint64_t ****)(v33 + 16 * v35);
            goto LABEL_33;
          }
        }
      }
      v36 = (uint64_t ****)(v33 + 16 * v34);
LABEL_33:
      v40 = v36[1];
      v41 = (unint64_t)*v40;
      v27 = (const char *)(v40 + 2);
      v26 = v41;
      if (v41 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v26 >= 0x17)
      {
        v42 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v42 = v26 | 7;
        v43 = a4;
        v44 = v12;
        v45 = v11;
        v46 = v10;
        v47 = v42 + 1;
        p_dst = (void ***)operator new(v42 + 1);
        v48 = v47 | 0x8000000000000000;
        v10 = v46;
        v11 = v45;
        v12 = v44;
        a4 = v43;
        v18 = v53;
        v63 = (void **)v26;
        v64 = v48;
        __dst = (void **)p_dst;
      }
      else
      {
        HIBYTE(v64) = v26;
        p_dst = &__dst;
        if (!v26)
          goto LABEL_12;
      }
LABEL_11:
      memmove(p_dst, v27, v26);
LABEL_12:
      *((_BYTE *)p_dst + v26) = 0;
      v28 = sub_1C5BA8F80(v20, v18, v10, v11, v12, v55, (llvm::DominatorTree *)&v59, (llvm::OptimizationRemarkEmitter *)v57, v54);
      v29 = v28 != 0;
      if (v20 == v56 && v28 == 2)
      {
        v30 = v64 >= 0 ? (void **)&__dst : __dst;
        v31 = v64 >= 0 ? HIBYTE(v64) & 0x7F : (uint64_t)v63;
        llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(*(_QWORD *)(a4 + 8), v56, (uint64_t)v30, v31);
        if (*(_QWORD *)(a4 + 16) == v56)
          *(_BYTE *)(a4 + 24) = 1;
      }
      if (SHIBYTE(v64) < 0)
        operator delete(__dst);
      v17 |= v29;
      v16 = v68;
      if (!(_DWORD)v68)
        goto LABEL_41;
    }
  }
  v17 = 0;
LABEL_41:
  if (v67 != v69)
    free(v67);
  if ((v66[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v66[1], 8);
  if ((v17 & 1) != 0)
  {
    llvm::getLoopPassPreservedAnalyses(a5);
    result = sub_1C4DDB144(a5, (uint64_t)&llvm::LoopNestAnalysis::Key);
  }
  else
  {
    *(_QWORD *)a5 = a5 + 32;
    *(_QWORD *)(a5 + 8) = a5 + 32;
    *(_QWORD *)(a5 + 16) = 2;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 48) = a5 + 80;
    *(_QWORD *)(a5 + 56) = a5 + 80;
    *(_QWORD *)(a5 + 64) = 2;
    *(_DWORD *)(a5 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a5, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v50 = v58;
  v58 = 0;
  if (v50)
  {
    v51 = *v50;
    *v50 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    return (_QWORD *)MEMORY[0x1CAA32FC0](v50, 0x20C4093837F09);
  }
  return result;
}

uint64_t sub_1C5BA8B84()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BA8694(v0, 2);
}

void sub_1C5BA8BB4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BA8BD8(uint64_t a1, llvm *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DependenceAnalysisWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  return llvm::getLoopAnalysisUsage(a2, v3);
}

BOOL sub_1C5BA8C80(uint64_t a1, const llvm::Loop *a2, llvm::LPPassManager *a3)
{
  llvm::AssumptionCache *v3;
  uint64_t *v4;
  llvm::Function *v9;
  char **v10;
  char *v11;
  char **v12;
  char *v13;
  llvm::DependenceInfo *v14;
  void **v15;
  void *v16;
  llvm::DominatorTree *v17;
  char **v18;
  char *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  llvm::OptimizationRemarkEmitter *v30;
  char **v31;
  char *v32;
  llvm::AssumptionCacheTracker *v33;
  llvm::AssumptionCache *AssumptionCache;
  int v35;
  llvm::Loop *v36;
  uint64_t v37;
  uint64_t v38[2];
  int v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  if ((llvm::LoopPass::skipLoop((llvm::LoopPass *)a1, a2) & 1) != 0)
    return 0;
  v9 = *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ScalarEvolutionWrapperPass::ID);
  v36 = *(llvm::Loop **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v12 = **(char ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::LoopInfoWrapperPass::ID);
  v14 = (llvm::DependenceInfo *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::LoopInfoWrapperPass::ID);
  v15 = **(void ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::DependenceAnalysisWrapperPass::ID);
  v17 = *(llvm::DominatorTree **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::DependenceAnalysisWrapperPass::ID)+ 32);
  v18 = **(char ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != llvm::DominatorTreeWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), llvm::DominatorTreeWrapperPass::ID);
  v21 = **(char ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::TargetTransformInfoWrapperPass::ID);
  v23 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v24 = *(_QWORD *)(v23 + 56);
  if (v24)
  {
    v14 = (llvm::DependenceInfo *)((char *)v14 + 32);
    v4 = v40;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v24 + 48))(&v37, v24, v9);
    v3 = (llvm::AssumptionCache *)(v23 + 64);
    v25 = v37;
    if (!*(_BYTE *)(v23 + 72))
    {
      *(_QWORD *)(v23 + 64) = v37;
      *(_BYTE *)(v23 + 72) = 1;
      goto LABEL_17;
    }
    v37 = 0;
    v26 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v25;
    if (!v26)
      goto LABEL_17;
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v37;
    v37 = 0;
    if (!v27)
      goto LABEL_17;
  }
  else
  {
    sub_1C485C2F0();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_17:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v4);
  sub_1C4D8B52C(v38);
  v28 = **(void ****)(a1 + 8);
  do
  {
    v29 = *v28;
    v28 += 2;
  }
  while (v29 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  v30 = *(llvm::OptimizationRemarkEmitter **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v28 - 1) + 96))(*(v28 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  v31 = **(char ****)(a1 + 8);
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != llvm::AssumptionCacheTracker::ID);
  v33 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v33, v9);
  v35 = sub_1C5BA8F80((uint64_t)a2, (llvm::ScalarEvolution *)(v20 + 32), v14, v36, v3, AssumptionCache, v17, v30, *(_DWORD *)(a1 + 28));
  if (v35 == 2)
    llvm::LPPassManager::markLoopAsDeleted(a3, a2);
  return v35 != 0;
}

uint64_t sub_1C5BA8F80(uint64_t a1, llvm::ScalarEvolution *a2, llvm::DependenceInfo *a3, llvm::Loop *a4, llvm::AssumptionCache *a5, llvm::AssumptionCache *a6, llvm::DominatorTree *a7, llvm::OptimizationRemarkEmitter *a8, int a9)
{
  const llvm::Loop *v17;
  char hasUnrollAndJamTransformation;
  uint64_t v19;
  int v20;
  llvm::LoopInfo *v21;
  llvm::Loop *v22;
  unsigned int *LoopID;
  llvm::MDNode *FollowupLoopID;
  char v25;
  const llvm::BasicBlock *LoopLatch;
  const llvm::BasicBlock *v27;
  unsigned int SmallConstantTripCount;
  int v29;
  int v30;
  uint64_t v31;
  llvm::DSOLocalEquivalent **v32;
  llvm::ScalarEvolution *v33;
  unsigned __int8 *UnrollMetadata;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  int v42;
  int i;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  const llvm::SCEV *SCEVAtScope;
  llvm::Loop *v51;
  llvm::MDNode *v52;
  char v53;
  llvm::MDNode *v54;
  char v55;
  llvm::MDNode *v56;
  llvm::MDNode *v57;
  char v58;
  llvm::Loop **v60;
  int v61;
  unsigned int v62;
  llvm::Loop *v63;
  unsigned int *v64;
  unsigned int v65;
  llvm::Loop *v66;
  llvm::DSOLocalEquivalent **v67;
  int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  llvm::Loop *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int v75;
  _BYTE v76[258];
  __int16 v77;
  int v78;
  _BYTE *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v80 = 0u;
  llvm::gatherUnrollingPreferences((llvm::BasicBlock ***)a1, (uint64_t)a4, a5, 0, 0, (uint64_t)a8, a9, 0, (uint64_t)&v80, 0, 0, 0, 0, 0, 0, 0);
  LODWORD(v72) = 0;
  WORD2(v72) = 1;
  BYTE6(v72) = 1;
  (*(void (**)(_QWORD, uint64_t, llvm::Loop *, _BYTE **))(**(_QWORD **)a5 + 192))(*(_QWORD *)a5, a1, a4, &v72);
  v79 = v72;
  hasUnrollAndJamTransformation = llvm::hasUnrollAndJamTransformation((llvm *)a1, v17);
  v19 = 0;
  if ((hasUnrollAndJamTransformation & 2) == 0)
  {
    if ((hasUnrollAndJamTransformation & 5) != 0)
      HIBYTE(v82) = 1;
    if (word_1ED8213B8)
      HIBYTE(v82) = byte_1ED821430;
    if (word_1ED821538)
    {
      v20 = dword_1ED8215B0;
      LODWORD(v83) = dword_1ED8215B0;
    }
    else
    {
      v20 = v83;
    }
    v19 = 0;
    if (HIBYTE(v82))
    {
      if (v20)
      {
        if (sub_1C5BA9700((llvm::Loop *)a1, "llvm.loop.unroll.", 0x11uLL)
          && !sub_1C5BA9700((llvm::Loop *)a1, "llvm.loop.unroll_and_jam.", 0x19uLL)
          || !llvm::isSafeToUnrollAndJam((llvm *)a1, a4, a2, a7, a3, v21))
        {
          return 0;
        }
        v78 = 0;
        v77 = 0;
        v72 = v76;
        v73 = v76;
        v74 = 32;
        v75 = 0;
        llvm::CodeMetrics::collectEphemeralValues(a1, a6, (llvm::SmallPtrSetImplBase *)&v72);
        v22 = **(llvm::Loop ***)(a1 + 8);
        v68 = llvm::ApproximateLoopSize((uint64_t)v22, &v78, (_BYTE *)&v77 + 1, &v77, a5, &v72, SDWORD1(v82));
        v69 = llvm::ApproximateLoopSize(a1, &v78, (_BYTE *)&v77 + 1, &v77, a5, &v72, SDWORD1(v82));
        v19 = 0;
        if (HIBYTE(v77) || v78 || (_BYTE)v77)
          goto LABEL_85;
        v70 = (unsigned __int8 *)a2;
        v67 = (llvm::DSOLocalEquivalent **)a6;
        LoopID = (unsigned int *)llvm::Loop::getLoopID((llvm::Loop *)a1);
        v63 = (llvm::Loop *)llvm::Loop::getLoopID(v22);
        v64 = LoopID;
        v84 = xmmword_1E8196120;
        v85 = *(_OWORD *)&off_1E8196130;
        FollowupLoopID = llvm::makeFollowupLoopID(LoopID, (uint64_t)&v84, 2, "", 0);
        if (v25)
          llvm::Loop::setLoopID(v22, FollowupLoopID);
        LoopLatch = (const llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a1);
        v27 = (const llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v22);
        SmallConstantTripCount = llvm::ScalarEvolution::getSmallConstantTripCount(a4, (const llvm::Loop *)a1, LoopLatch);
        LODWORD(LoopLatch) = llvm::ScalarEvolution::getSmallConstantTripMultiple(a4, (const llvm::Loop *)a1, LoopLatch);
        v66 = v22;
        v29 = llvm::ScalarEvolution::getSmallConstantTripCount(a4, v22, v27);
        LOBYTE(v84) = 0;
        v65 = LoopLatch;
        v62 = SmallConstantTripCount;
        if ((llvm::computeUnrollCount((llvm::Loop *)a1, a5, v70, (uint64_t)a3, (llvm::ConstantInt ****)a4, &v72, a8, SmallConstantTripCount, 0, 0, LoopLatch, v69, (int *)&v80, &v79, &v84) & 1) != 0|| (_BYTE)v84)
        {
          goto LABEL_66;
        }
        v30 = (unsigned __int16)word_1ED821478;
        if (word_1ED821478)
        {
          DWORD1(v81) = dword_1ED8214F0;
          BYTE12(v82) = 1;
          if (BYTE10(v82))
          {
            if (DWORD1(v82) + dword_1ED8214F0 * (unint64_t)(v69 - DWORD1(v82)) < v80
              && DWORD1(v82) + dword_1ED8214F0 * (unint64_t)(v68 - DWORD1(v82)) < v83)
            {
              goto LABEL_53;
            }
          }
        }
        v61 = v29;
        v31 = llvm::Loop::getLoopID((llvm::Loop *)a1);
        v32 = v67;
        v33 = (llvm::ScalarEvolution *)v70;
        if (!v31)
          goto LABEL_35;
        UnrollMetadata = llvm::GetUnrollMetadata(v31, "llvm.loop.unroll_and_jam.count", 0x1EuLL);
        if (!UnrollMetadata)
          goto LABEL_35;
        v35 = *(_QWORD *)(*(_QWORD *)&UnrollMetadata[-8 * *((unsigned int *)UnrollMetadata + 2) + 8] + 128);
        v36 = (_QWORD *)(v35 + 24);
        if (*(_DWORD *)(v35 + 32) >= 0x41u)
          v36 = (_QWORD *)*v36;
        v37 = (_QWORD *)*v36;
        if ((_DWORD)v37)
        {
          DWORD1(v81) = (_DWORD)v37;
          BYTE9(v82) = 1;
          BYTE12(v82) = 1;
          if (!BYTE10(v82) && v65 % v37
            || DWORD1(v82) + v37 * (unint64_t)(v69 - DWORD1(v82)) >= v80)
          {
            v38 = 1;
          }
          else
          {
            v38 = 1;
            if (DWORD1(v82) + v37 * (unint64_t)(v68 - DWORD1(v82)) < v83)
            {
LABEL_68:
              v51 = (llvm::Loop *)DWORD1(v81);
              if (DWORD1(v81) < 2)
              {
                v19 = 0;
                goto LABEL_85;
              }
              if (v62 && DWORD1(v81) > v62)
              {
                DWORD1(v81) = v62;
                v51 = (llvm::Loop *)v62;
              }
              v71 = 0;
              v19 = llvm::UnrollAndJamLoop((llvm ***)a1, v51, v62, v65, SBYTE14(v82), a3, (int32x2_t *)a4, v33, v32, a5, a8, (llvm::OptimizationRemarkEmitter *)&v71, v60);
              if (v71)
              {
                v84 = xmmword_1E8196140;
                v85 = *(_OWORD *)&off_1E8196150;
                v52 = llvm::makeFollowupLoopID(v64, (uint64_t)&v84, 2, "", 0);
                if (v53)
                  llvm::Loop::setLoopID(v71, v52);
              }
              v84 = xmmword_1E8196160;
              v85 = *(_OWORD *)&off_1E8196170;
              v54 = llvm::makeFollowupLoopID(v64, (uint64_t)&v84, 2, "", 0);
              if (v55)
                v56 = v54;
              else
                v56 = v63;
              llvm::Loop::setLoopID(v66, v56);
              if ((_DWORD)v19 == 2)
                goto LABEL_85;
              if ((_DWORD)v19 == 1)
              {
                v84 = xmmword_1E8196180;
                v85 = *(_OWORD *)&off_1E8196190;
                v57 = llvm::makeFollowupLoopID(v64, (uint64_t)&v84, 2, "", 0);
                if (v58)
                {
                  llvm::Loop::setLoopID((llvm::Loop *)a1, v57);
                  goto LABEL_85;
                }
                if ((v38 & 1) == 0)
                {
LABEL_85:
                  if (v73 != v72)
                    free(v73);
                  return v19;
                }
              }
              else if (!v38)
              {
                goto LABEL_85;
              }
              llvm::Loop::setLoopAlreadyUnrolled((llvm::Loop *)a1);
              goto LABEL_85;
            }
          }
        }
        else
        {
LABEL_35:
          v38 = 0;
        }
        v39 = llvm::Loop::getLoopID((llvm::Loop *)a1);
        if (v39)
          v40 = llvm::GetUnrollMetadata(v39, "llvm.loop.unroll_and_jam.enable", 0x1FuLL) != 0;
        else
          v40 = 0;
        if (v30)
          v41 = 1;
        else
          v41 = v38;
        v42 = v41 | v40;
        if (v42 == 1)
          LODWORD(v83) = dword_1ED821670;
        if (BYTE10(v82))
        {
          if ((v41 & 1) != 0)
          {
            v38 = 1;
            goto LABEL_68;
          }
          v44 = DWORD1(v81);
          for (i = v61; v44; DWORD1(v81) = --v44)
          {
            if (DWORD1(v82) + (v68 - DWORD1(v82)) * (unint64_t)v44 < v83)
              break;
          }
        }
        else
        {
          i = v61;
          if (DWORD1(v82) + DWORD1(v81) * (unint64_t)(v68 - DWORD1(v82)) >= v83)
            goto LABEL_66;
        }
        if ((v42 & 1) != 0)
        {
LABEL_53:
          v38 = 1;
LABEL_67:
          v32 = v67;
          v33 = (llvm::ScalarEvolution *)v70;
          goto LABEL_68;
        }
        if (!i || i * v68 >= v80)
        {
          v45 = (uint64_t *)*((_QWORD *)v66 + 4);
          if (*((_QWORD *)v66 + 5) - (_QWORD)v45 == 8)
          {
            v46 = *v45;
            v47 = v46 + 40;
            v48 = *(_QWORD *)(v46 + 48);
            if (v48 != v46 + 40)
            {
              v49 = 0;
              do
              {
                if (v48)
                {
                  if (*(_BYTE *)(v48 - 8) == 60)
                  {
                    SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(a4, *(llvm::Value **)(v48 - 56), (const llvm::Loop *)a1);
                    if (llvm::ScalarEvolution::getLoopDisposition(a4, SCEVAtScope, (const llvm::Loop *)a1) == 1)++v49;
                  }
                }
                v48 = *(_QWORD *)(v48 + 8);
              }
              while (v48 != v47);
              if (v49)
              {
                v38 = 0;
                goto LABEL_67;
              }
            }
          }
        }
LABEL_66:
        v38 = 0;
        DWORD1(v81) = 0;
        goto LABEL_67;
      }
    }
  }
  return v19;
}

uint64_t sub_1C5BA9700(llvm::Loop *a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  size_t *v11;
  const void *v12;
  size_t v13;

  result = llvm::Loop::getLoopID(a1);
  if (result)
  {
    v7 = result + 8;
    v6 = *(unsigned int *)(result + 8);
    if (v6 < 2)
    {
      return 0;
    }
    else
    {
      v8 = -8 * v6;
      while (1)
      {
        v9 = *(unsigned __int8 **)(v7 + v8);
        if (*v9 - 4 <= 0x1E)
        {
          v10 = *(_QWORD *)&v9[-8 * *((unsigned int *)v9 + 2)];
          if (!*(_BYTE *)v10)
          {
            v11 = *(size_t **)(v10 + 8);
            v13 = *v11;
            v12 = v11 + 3;
            if (v13 >= a3 && (!a3 || !memcmp(v12, a2, a3)))
              break;
          }
        }
        v8 += 8;
        if (v8 == -8)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C5BA97A8()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  LODWORD(v4) = 1;
  *(_QWORD *)&v1 = "Allows loops to be unroll-and-jammed.";
  *((_QWORD *)&v1 + 1) = 37;
  sub_1C61B2D38((uint64_t)&unk_1ED8213B0, "allow-unroll-and-jam", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8213B0, &dword_1C475E000);
  LODWORD(v4) = 1;
  *(_QWORD *)&v1 = "Use this unroll count for all loops including those with unroll_and_jam_count pragma values, for testing purposes";
  *((_QWORD *)&v1 + 1) = 113;
  sub_1C61DDD4C((uint64_t)&unk_1ED821470, "unroll-and-jam-count", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821470, &dword_1C475E000);
  v2 = 1;
  v3 = 60;
  v4 = &v3;
  *(_QWORD *)&v1 = "Threshold to use for inner loop when doing unroll and jam.";
  *((_QWORD *)&v1 + 1) = 58;
  sub_1C4DB1928((uint64_t)&unk_1ED821530, "unroll-and-jam-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED821530, &dword_1C475E000);
  v2 = 1;
  v3 = 1024;
  v4 = &v3;
  *(_QWORD *)&v1 = "Unrolled size limit for loops with an unroll_and_jam(full) or unroll_count pragma.";
  *((_QWORD *)&v1 + 1) = 82;
  sub_1C4DB1928((uint64_t)&unk_1ED8215F0, "pragma-unroll-and-jam-threshold", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8215F0, &dword_1C475E000);
}

uint64_t sub_1C5BA9910(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLegacyDivergenceAnalysisPass(a1, v3);
  llvm::initializeMemorySSAWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Unswitch loops";
  *(_QWORD *)(v5 + 8) = 14;
  *(_QWORD *)(v5 + 16) = "loop-unswitch";
  *(_QWORD *)(v5 + 24) = 13;
  *(_QWORD *)(v5 + 32) = &unk_1ED8216B0;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5BA9AF0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5BA99C4(uint64_t a1, char a2, char a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8216B0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)a1 = &off_1E81961B0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = dword_1ED821740;
  *(_BYTE *)(a1 + 128) = a2;
  *(_BYTE *)(a1 + 129) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = &off_1E8139EA0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_BYTE *)(a1 + 288) = a3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED8216B8);
  if (v5 != -1)
  {
    v9[0] = sub_1C5BA9910;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED8216B8, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5BA9AF0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5BA99C4(v0, 0, 0);
}

void sub_1C5BA9B20(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &off_1E81961B0;
  v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(_QWORD *)(a1 + 272) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 200) = &unk_1E813A258;
  sub_1C4EF1108((uint64_t *)(a1 + 208));
  v4 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v4)
  {
    sub_1C61247C0(v4 + 584, *(_QWORD **)(v4 + 592));
    v5 = *(void **)(v4 + 504);
    if (v5 != (void *)(v4 + 520))
      free(v5);
    v6 = *(void **)(v4 + 416);
    if (v6 != *(void **)(v4 + 408))
      free(v6);
    sub_1C4EE41F8((char **)(v4 + 8));
    MEMORY[0x1CAA32FC0](v4, 0x10E0C40B8556DDDLL);
  }
  sub_1C5BABA98(*(_QWORD **)(a1 + 88));
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5BA9C00(uint64_t a1)
{
  sub_1C5BA9B20(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5BA9C24(uint64_t a1, llvm *a2)
{
  uint64_t v4;
  llvm::AnalysisUsage *v5;

  v4 = (uint64_t)a2 + 112;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LazyBlockFrequencyInfoPass::ID);
  sub_1C4771E64((uint64_t)a2, v4, (uint64_t)llvm::LazyBranchProbabilityInfoPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, v4, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  if (*(_BYTE *)(a1 + 288))
    sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LegacyDivergenceAnalysis::ID);
  return llvm::getLoopAnalysisUsage(a2, v5);
}

void sub_1C5BA9CE8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v3 = (uint64_t *)(a1 + 88);
  v2 = *(uint64_t **)(a1 + 88);
  if (v2)
  {
    v4 = v3[6];
    v5 = v2;
    v6 = v3;
    do
    {
      v7 = v5[4];
      v8 = v7 >= v4;
      if (v7 >= v4)
        v9 = (uint64_t **)v5;
      else
        v9 = (uint64_t **)(v5 + 1);
      if (v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != v3 && v6[4] <= v4)
    {
      *(_DWORD *)(a1 + 120) += (*((_DWORD *)v6 + 11) + *((_DWORD *)v6 + 10)) * *((_DWORD *)v6 + 12);
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v12 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v11 = v6;
        do
        {
          v12 = (uint64_t *)v11[2];
          v13 = *v12 == (_QWORD)v11;
          v11 = v12;
        }
        while (!v13);
      }
      if (*(uint64_t **)(a1 + 80) == v6)
        *(_QWORD *)(a1 + 80) = v12;
      --*(_QWORD *)(a1 + 96);
      sub_1C485B6E0(v2, v6);
      sub_1C631E58C((_DWORD *)v6 + 14);
      MEMORY[0x1CAA32FB4](v6[7], 8);
      operator delete(v6);
    }
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
}

uint64_t sub_1C5BA9DDC(uint64_t a1, const llvm::Loop *a2, uint64_t a3)
{
  const llvm::Loop *v4;
  char **v7;
  char *v8;
  llvm::AssumptionCacheTracker *v9;
  char **v10;
  char *v11;
  char **v12;
  char *v13;
  char **v14;
  char *v15;
  void **v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void **LoopPredecessor;
  void *v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  __int128 *v25;
  uint64_t *v26;
  llvm::SimpleLoopSafetyInfo *v27;
  uint64_t *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  _BOOL4 v32;
  int v33;
  _QWORD *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  __int128 *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::BasicBlock **v53;
  uint64_t v54;
  uint64_t v55;
  llvm::BasicBlock *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  const llvm::APInt *v68;
  char v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  int v83;
  int v85;
  BOOL v86;
  int v88;
  uint64_t *v89;
  llvm::ValueHandleBase *v90;
  uint64_t v91;
  llvm::ValueHandleBase *v92;
  llvm::ValueHandleBase *v93;
  uint64_t v94;
  llvm::ValueHandleBase *v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  llvm::ConstantInt *v109;
  llvm::ConstantInt *v110;
  unsigned int v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t j;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unsigned __int8 *v135;
  const llvm::APInt *v136;
  const llvm::Value *v137;
  uint64_t v138;
  llvm::ValueHandleBase *v139;
  llvm::ConstantInt *v140;
  unsigned int v141;
  char v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  int v150;
  unsigned __int8 **v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  int v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  llvm::Type *v163;
  const llvm::Value *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  llvm::AssumptionCache *v169;
  llvm::ValueHandleBase *AllOnesValue;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned int *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  const llvm::APInt *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  int v190;
  int v191;
  llvm::ValueHandleBase *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  llvm::ValueHandleBase *v196;
  uint64_t v197;
  llvm::ConstantInt *v198;
  unsigned int v199;
  char v200;
  unsigned __int8 *v201;
  const llvm::Value *v202;
  char v203;
  const llvm::APInt *v204;
  uint64_t v205;
  uint64_t v206;
  llvm::ValueHandleBase *v207;
  uint64_t v208;
  uint64_t k;
  unsigned __int8 *v210;
  const llvm::APInt *v211;
  const llvm::Value *v212;
  uint64_t v213;
  llvm::ValueHandleBase *v214;
  llvm::ConstantInt *v215;
  unsigned int v216;
  char v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned int *v221;
  llvm::ConstantInt *v222;
  unsigned int v223;
  char v224;
  uint64_t LoopID;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  llvm::Value *v231;
  uint64_t v232;
  const llvm::APInt *v233;
  llvm *v234;
  uint64_t v235;
  llvm::ValueHandleBase *v236;
  llvm::ConstantInt *v237;
  unsigned int v238;
  char v239;
  char v240;
  uint64_t v241;
  int v242;
  unsigned __int8 **v243;
  unsigned __int8 *v244;
  llvm::Value *v245;
  unsigned int v246;
  unsigned __int8 **v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  llvm *v254;
  int v255;
  uint64_t v256;
  llvm::ValueHandleBase *v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  uint64_t v263;
  const llvm::Value *v264;
  void **v265;
  _BOOL4 isOneValue;
  uint64_t v267;
  uint64_t v268;
  void **v269;
  void **v270;
  int v271;
  int v272;
  void **v273;
  char v274;
  char v275;
  uint64_t v276;
  const llvm::APInt *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  void **v282;
  uint64_t v283;
  void **v284;
  uint64_t v285;
  llvm::Type *v286;
  unsigned __int8 *v287;
  int v288;
  uint64_t v289;
  _QWORD **v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  void **v294;
  void *v295;
  llvm::LegacyDivergenceAnalysis *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  llvm::ConstantInt *v305;
  llvm::UndefValue *v306;
  llvm::Value *v307;
  uint64_t *v308;
  uint64_t v309;
  __int128 *v310;
  llvm::AssumptionCache *v311;
  llvm::AssumptionCache *v312;
  llvm::AssumptionCache *v313;
  uint64_t *v314;
  void **v315;
  llvm::SimpleLoopSafetyInfo *v316;
  _BYTE *v317;
  uint64_t *v318;
  uint64_t *v319;
  char v320;
  _QWORD v321[2];
  char v322;
  void *v323[2];
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  llvm::Constant *v335;
  char v336;
  void **v337;
  char v338;
  uint64_t v339;

  v4 = a2;
  v339 = *MEMORY[0x1E0C80C00];
  if ((llvm::LoopPass::skipLoop((llvm::LoopPass *)a1, a2) & 1) != 0)
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AssumptionCacheTracker::ID);
  v9 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AssumptionCacheTracker::ID);
  *(_QWORD *)(a1 + 48) = llvm::AssumptionCacheTracker::getAssumptionCache(v9, *(llvm::Function **)(**((_QWORD **)v4 + 4) + 56));
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  *(_QWORD *)(a1 + 40) = a3;
  v12 = **(char ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(a1 + 144) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32;
  v14 = **(char ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v16 = **(void ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::MemorySSAWrapperPass::ID);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::MemorySSAWrapperPass::ID)+ 32);
  v18 = operator new();
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v18 + 8) = v18 + 24;
  *(_QWORD *)(v18 + 16) = 0x1000000000;
  *(_QWORD *)(v18 + 408) = v18 + 440;
  *(_QWORD *)(v18 + 416) = v18 + 440;
  *(_QWORD *)(v18 + 424) = 8;
  *(_DWORD *)(v18 + 432) = 0;
  *(_QWORD *)(v18 + 504) = v18 + 520;
  *(_QWORD *)(v18 + 512) = 0x800000000;
  *(_QWORD *)(v18 + 600) = 0;
  *(_QWORD *)(v18 + 592) = 0;
  *(_QWORD *)(v18 + 584) = v18 + 592;
  v19 = *(void ***)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v18;
  if (v19)
  {
    sub_1C61247C0((uint64_t)(v19 + 73), v19[74]);
    LoopPredecessor = (void **)v19[63];
    if (LoopPredecessor != v19 + 65)
LABEL_525:
      free(LoopPredecessor);
    v21 = v19[52];
    if (v21 != v19[51])
      free(v21);
    sub_1C4EE41F8((char **)v19 + 1);
    MEMORY[0x1CAA32FC0](v19, 0x10E0C40B8556DDDLL);
  }
  *(_QWORD *)(a1 + 136) = v4;
  v22 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v4 + 4) + 56) + 112);
  if (v22)
  {
    v23 = *(_BYTE *)(v22 + 18);
    *(_BYTE *)(a1 + 192) = (v23 & 0x20) != 0;
    v24 = (_BYTE *)(a1 + 192);
    if ((v23 & 0x20) != 0)
      llvm::SimpleLoopSafetyInfo::computeLoopSafetyInfo((llvm::SimpleLoopSafetyInfo *)(a1 + 200), (llvm ***)v4);
  }
  else
  {
    *(_BYTE *)(a1 + 192) = 0;
    v24 = (_BYTE *)(a1 + 192);
  }
  v4 = 0;
  v25 = &v324;
  v19 = (void **)&v329;
  v26 = &v332;
  v27 = (llvm::SimpleLoopSafetyInfo *)(a1 + 200);
  v28 = &v334;
  do
  {
    *(_BYTE *)(a1 + 129) = 0;
    v320 = 0;
    v29 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 176) = **(_QWORD **)(v29 + 32);
    LoopPredecessor = (void **)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v29);
    if (!LoopPredecessor || (v30 = (void **)LoopPredecessor[5], v30 == LoopPredecessor + 5))
    {
LABEL_31:
      v32 = 0;
      *(_QWORD *)(a1 + 184) = 0;
      goto LABEL_38;
    }
    if (v30)
      v31 = v30 - 3;
    else
      v31 = 0;
    if (*((_BYTE *)v31 + 16) == 30)
    {
      if ((*((_DWORD *)v31 + 5) & 0x7FFFFFF) == 3)
        goto LABEL_31;
    }
    else
    {
      switch(*((_BYTE *)v31 + 16))
      {
        case 0x1E:
          goto LABEL_524;
        case 0x1F:
          v33 = (*((_DWORD *)v31 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
          v33 = (*((_DWORD *)v31 + 5) & 0x7FFFFFF) - 1;
          break;
        case 0x27:
          v33 = *((_DWORD *)v31 + 20) + 1;
          break;
        default:
          goto LABEL_31;
      }
      if (v33 != 1)
        goto LABEL_31;
    }
    *(_QWORD *)(a1 + 184) = LoopPredecessor;
    if (!llvm::Loop::isSafeToClone(*(llvm::Loop **)(a1 + 136))
      || !llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(*(_QWORD **)(a1 + 136)))
    {
      v32 = 0;
      goto LABEL_38;
    }
    v316 = v27;
    v317 = v24;
    v318 = v26;
    v314 = ***(uint64_t ****)(a1 + 176);
    v34 = *(_QWORD **)(a1 + 136);
    v35 = **(char ****)(a1 + 8);
    do
    {
      v36 = *v35;
      v35 += 2;
    }
    while (v36 != llvm::TargetTransformInfoWrapperPass::ID);
    v37 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v35 - 1) + 96))(*(v35 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v328 = 0;
    v329 = 0;
    LODWORD(v330) = 0;
    v331 = 0;
    v332 = 0;
    v333 = 0;
    *v28 = 0;
    v28[1] = 0;
    v319 = v28;
    *((_DWORD *)v28 + 4) = 0;
    v38 = *(_QWORD *)(v37 + 56);
    if (!v38)
    {
      sub_1C485C2F0();
LABEL_524:
      __break(1u);
      goto LABEL_525;
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v38 + 48))(v323);
    v39 = (uint64_t *)(v37 + 64);
    v40 = v323[0];
    if (*(_BYTE *)(v37 + 72))
    {
      v323[0] = 0;
      v41 = *v39;
      *v39 = (uint64_t)v40;
      if (v41)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v42 = v323[0];
        v323[0] = 0;
        if (v42)
          (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    else
    {
      *(void **)(v37 + 64) = v323[0];
      *(_BYTE *)(v37 + 72) = 1;
    }
    MEMORY[0x1CAA32FB4](0, 8);
    sub_1C4D8B440(&v331);
    sub_1C4D8B52C((uint64_t *)&v328);
    v311 = *(llvm::AssumptionCache **)(a1 + 48);
    v325 = 0;
    *(_OWORD *)v323 = 0u;
    v324 = 0u;
    v328 = v34;
    *v19 = 0;
    *((_DWORD *)v19 + 2) = 0;
    v331 = 0;
    v332 = 0;
    v333 = 0;
    v43 = a1 + 88;
    v44 = (_QWORD *)(a1 + 88);
    v45 = *(_QWORD *)(a1 + 88);
    v315 = v19;
    if (v45)
    {
      while (1)
      {
        while (1)
        {
          v43 = v45;
          v46 = *(_QWORD *)(v45 + 32);
          if ((unint64_t)v34 >= v46)
            break;
          v45 = *(_QWORD *)v43;
          v44 = (_QWORD *)v43;
          if (!*(_QWORD *)v43)
            goto LABEL_54;
        }
        if (v46 >= (unint64_t)v34)
          break;
        v45 = *(_QWORD *)(v43 + 8);
        if (!v45)
        {
          v44 = (_QWORD *)(v43 + 8);
          goto LABEL_54;
        }
      }
      v47 = v25;
      v52 = 0;
      v50 = 0;
      v51 = 0;
    }
    else
    {
LABEL_54:
      v47 = v25;
      v48 = operator new(0x50uLL);
      v321[0] = v48;
      v321[1] = a1 + 88;
      v48[4] = v34;
      v48[5] = 0;
      *((_DWORD *)v48 + 12) = 0;
      v48[7] = 0;
      v331 = 0;
      v48[8] = 0;
      v332 = 0;
      *((_DWORD *)v48 + 18) = 0;
      v333 = 0;
      v322 = 1;
      *v48 = 0;
      v48[1] = 0;
      v48[2] = v43;
      *v44 = v48;
      v49 = **(_QWORD **)(a1 + 80);
      if (v49)
      {
        *(_QWORD *)(a1 + 80) = v49;
        v48 = (_QWORD *)*v44;
      }
      sub_1C4768E74(*(uint64_t **)(a1 + 88), v48);
      ++*(_QWORD *)(a1 + 96);
      v43 = v321[0];
      v321[0] = 0;
      sub_1C5BAE778((uint64_t)v321);
      v50 = v331;
      v51 = 1;
      v52 = v324;
    }
    sub_1C631E58C(&v331);
    MEMORY[0x1CAA32FB4](v50, 8);
    v25 = v47;
    sub_1C631E58C(v47);
    MEMORY[0x1CAA32FB4](v52, 8);
    v26 = v318;
    if (v51)
    {
      v328 = v318;
      v329 = v318;
      v330 = 32;
      LODWORD(v331) = 0;
      llvm::CodeMetrics::collectEphemeralValues((uint64_t)v34, v311, (llvm::SmallPtrSetImplBase *)&v328);
      BYTE4(v323[0]) = 0;
      LODWORD(v323[0]) = 0;
      LODWORD(v325) = 0;
      v324 = 0uLL;
      v323[1] = 0;
      v326 = 0;
      v327 = 0;
      v53 = (llvm::BasicBlock **)v34[4];
      v54 = v34[5] - (_QWORD)v53;
      if (v54)
      {
        v55 = 8 * (v54 >> 3);
        do
        {
          v56 = *v53++;
          llvm::CodeMetrics::analyzeBasicBlock((uint64_t)v323, v56, v39, &v328, 0);
          v55 -= 8;
        }
        while (v55);
        LODWORD(v54) = v323[1];
        v57 = BYTE2(v323[0]);
        v58 = v324;
      }
      else
      {
        v58 = 0;
        v57 = 0;
      }
      *(_DWORD *)(v43 + 48) = v54;
      v59 = *(_DWORD *)(a1 + 120);
      *(_QWORD *)(v43 + 40) = v59 / v54;
      *(_DWORD *)(a1 + 120) = v59 % v54;
      MEMORY[0x1CAA32FB4](v58, 8);
      if (v329 != v328)
        free(v329);
      if (v57)
      {
        v32 = 0;
        v27 = v316;
        v24 = v317;
        v19 = v315;
        v28 = v319;
        goto LABEL_38;
      }
    }
    *(_QWORD *)(a1 + 104) = v43 + 56;
    *(_QWORD *)(a1 + 112) = v43 + 40;
    v60 = *(_QWORD *)(a1 + 136);
    v61 = **(_QWORD **)(v60 + 32);
    v62 = *(_QWORD *)(v61 + 40);
    if (v62 == v61 + 40)
    {
      v64 = 0;
    }
    else
    {
      if (v62)
        v63 = v62 - 24;
      else
        v63 = 0;
      if (*(unsigned __int8 *)(v63 + 16) - 29 >= 0xB)
        v64 = 0;
      else
        v64 = v63;
    }
    v312 = **(llvm::AssumptionCache ***)v61;
    v328 = v318;
    v329 = v318;
    v330 = 8;
    LODWORD(v331) = 0;
    v65 = sub_1C477672C(v60 + 56, v61);
    v66 = *(_QWORD *)(v60 + 64);
    v67 = 72;
    if (v66 == *(_QWORD *)(v60 + 56))
      v67 = 76;
    if (v65 != (_QWORD *)(v66 + 8 * *(unsigned int *)(v60 + v67)))
    {
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v328, v61);
        if (!v69)
          break;
        v70 = v61 + 40;
        for (i = *(_QWORD *)(v61 + 48); i != v70; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v72 = i - 24;
          else
            v72 = 0;
          v73 = *(unsigned __int8 *)(v72 + 16) - 33;
          if (v73 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v72 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_162;
            if (((1 << (*(_BYTE *)(v72 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v74 = *(_QWORD *)(v72 + 64);
              if (!v74 || (*(_BYTE *)(v74 + 17) & 0x30) == 0)
              {
                v75 = *(_DWORD *)(v72 + 20);
                if (v75 < 0)
                {
                  v76 = v72 - 32 * (v75 & 0x7FFFFFF);
                  v79 = *(_QWORD *)(v76 - 8);
                  v77 = v76 - 8;
                  v78 = v79;
                  if (v79)
                  {
                    v80 = -v78;
                    while (1)
                    {
                      v81 = *(_DWORD *)(*(_QWORD *)(v77 + v80) + 8);
                      v82 = v81 > 7;
                      v83 = (1 << v81) & 0x83;
                      if (v82 || v83 == 0)
                        break;
                      v80 += 16;
                      v26 = v318;
                      if (!v80)
                        goto LABEL_94;
                    }
                    v113 = 0;
                    v26 = v318;
                    goto LABEL_163;
                  }
                }
LABEL_94:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v72, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v72, 44))
                {
                  goto LABEL_162;
                }
              }
            }
            else if (v73 == 27 && (*(_WORD *)(v72 + 18) & 0x301) != 0)
            {
              goto LABEL_162;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v72) & 1) != 0
            || (llvm::Instruction::willReturn((llvm::Instruction *)v72) & 1) == 0)
          {
            goto LABEL_162;
          }
        }
        v85 = *(unsigned __int8 *)(v64 + 16);
        v86 = v64 == 0;
        if (v85 != 30 || v64 == 0)
        {
          if (v85 != 31)
            goto LABEL_370;
          v28 = v319;
          if (!v64)
            goto LABEL_371;
          v88 = *(_DWORD *)(v64 + 20);
          if ((v88 & 0x40000000) != 0)
            v89 = *(uint64_t **)(v64 - 8);
          else
            v89 = (uint64_t *)(v64 - 32 * (v88 & 0x7FFFFFF));
          v86 = 0;
          v97 = *v89;
          v85 = 31;
          if (!v97 || *(_BYTE *)(v97 + 16) != 16)
            goto LABEL_385;
          sub_1C4E5D490(v64, v97);
          v99 = *(_DWORD *)(v64 + 20);
          if ((v99 & 0x40000000) != 0)
            v100 = *(_QWORD *)(v64 - 8);
          else
            v100 = v64 - 32 * (v99 & 0x7FFFFFF);
          if (v98 == 4294967294)
            v101 = 1;
          else
            v101 = (2 * v98 + 3);
          v96 = (uint64_t *)(v100 + 32 * v101);
        }
        else
        {
          if ((*(_DWORD *)(v64 + 20) & 0x7FFFFFF) == 1)
            goto LABEL_122;
          v90 = *(llvm::ValueHandleBase **)(v64 - 96);
          v91 = *(_QWORD *)v312;
          v92 = *(llvm::ValueHandleBase **)(*(_QWORD *)v312 + 1560);
          if (!v92)
          {
            v110 = *(llvm::ConstantInt **)(v91 + 1888);
            v111 = *(_DWORD *)(v91 + 1896);
            LODWORD(v323[1]) = v111 >> 8;
            if (v111 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v323, 1, 0);
            }
            else
            {
              if (v111 <= 0xFF)
                v112 = 0;
              else
                v112 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v111);
              v323[0] = (void *)(v112 & 1);
            }
            v92 = llvm::ConstantInt::get(v110, (llvm::LLVMContext *)v323, v68);
            if (LODWORD(v323[1]) >= 0x41 && v323[0])
              MEMORY[0x1CAA32F9C](v323[0], 0x1000C8000313F17);
            *(_QWORD *)(v91 + 1560) = v92;
          }
          v26 = v318;
          if (v90 == v92)
          {
LABEL_122:
            v96 = (uint64_t *)(v64 - 32);
          }
          else
          {
            v93 = *(llvm::ValueHandleBase **)(v64 - 96);
            v94 = *(_QWORD *)v312;
            v95 = *(llvm::ValueHandleBase **)(*(_QWORD *)v312 + 1568);
            if (!v95)
            {
              v109 = *(llvm::ConstantInt **)(v94 + 1888);
              LODWORD(v323[1]) = *(_DWORD *)(v94 + 1896) >> 8;
              if (LODWORD(v323[1]) > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)v323, 0, 0);
              else
                v323[0] = 0;
              v95 = llvm::ConstantInt::get(v109, (llvm::LLVMContext *)v323, v68);
              if (LODWORD(v323[1]) >= 0x41 && v323[0])
                MEMORY[0x1CAA32F9C](v323[0], 0x1000C8000313F17);
              *(_QWORD *)(v94 + 1568) = v95;
            }
            if (v93 != v95)
            {
              v86 = 0;
              v85 = *(unsigned __int8 *)(v64 + 16);
LABEL_370:
              v28 = v319;
LABEL_371:
              if (v85 == 30 && !v86)
              {
                if ((*(_DWORD *)(v64 + 20) & 0x7FFFFFF) != 3)
                {
                  LOBYTE(v241) = 0;
                  v240 = 1;
                  goto LABEL_400;
                }
                v230 = sub_1C5BABAE4(*(unsigned __int8 **)(v64 - 96), *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
                if (v230)
                {
                  v231 = (llvm::Value *)v230;
                  if (*(unsigned __int8 **)(v64 - 96) == v230)
                  {
                    v232 = sub_1C5BAE7CC(*(_QWORD *)(a1 + 136), *(_QWORD *)(v64 - 32));
                    if (v232)
                    {
                      v234 = (llvm *)v232;
                      v235 = *(_QWORD *)v312;
                      v236 = *(llvm::ValueHandleBase **)(*(_QWORD *)v312 + 1560);
                      if (!v236)
                      {
                        v237 = *(llvm::ConstantInt **)(v235 + 1888);
                        v238 = *(_DWORD *)(v235 + 1896);
                        LODWORD(v323[1]) = v238 >> 8;
                        if (v238 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)v323, 1, 0);
                        }
                        else
                        {
                          if (v238 <= 0xFF)
                            v239 = 0;
                          else
                            v239 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v238);
                          v323[0] = (void *)(v239 & 1);
                        }
                        v236 = llvm::ConstantInt::get(v237, (llvm::LLVMContext *)v323, v233);
                        if (LODWORD(v323[1]) >= 0x41 && v323[0])
                          MEMORY[0x1CAA32F9C](v323[0], 0x1000C8000313F17);
                        *(_QWORD *)(v235 + 1560) = v236;
                      }
                      goto LABEL_447;
                    }
                    v276 = sub_1C5BAE7CC(*(_QWORD *)(a1 + 136), *(_QWORD *)(v64 - 64));
                    if (!v276)
                      goto LABEL_452;
                    v234 = (llvm *)v276;
                    v278 = *(_QWORD *)v312;
                    v236 = *(llvm::ValueHandleBase **)(*(_QWORD *)v312 + 1568);
                    if (!v236)
                    {
                      v305 = *(llvm::ConstantInt **)(v278 + 1888);
                      LODWORD(v323[1]) = *(_DWORD *)(v278 + 1896) >> 8;
                      if (LODWORD(v323[1]) > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)v323, 0, 0);
                      else
                        v323[0] = 0;
                      v236 = llvm::ConstantInt::get(v305, (llvm::LLVMContext *)v323, v277);
                      if (LODWORD(v323[1]) >= 0x41 && v323[0])
                        MEMORY[0x1CAA32F9C](v323[0], 0x1000C8000313F17);
                      *(_QWORD *)(v278 + 1568) = v236;
                    }
LABEL_447:
                    v279 = *((_QWORD *)v234 + 6);
                    v280 = v279 ? v279 - 24 : 0;
                    if (*(_BYTE *)(v280 + 16) == 83 || (sub_1C5BAD8D4((uint64_t)v231) & 1) != 0)
                    {
LABEL_452:
                      LOBYTE(v241) = 0;
                      v240 = 1;
                    }
                    else
                    {
                      sub_1C5BAE858(a1, *(_QWORD *)(a1 + 136), v231, v236, v234, v64);
                      v240 = 1;
                      LOBYTE(v241) = 1;
                    }
LABEL_492:
                    v26 = v318;
LABEL_399:
                    v28 = v319;
                    goto LABEL_400;
                  }
                }
                goto LABEL_397;
              }
LABEL_385:
              v240 = 0;
              if (v85 != 31)
              {
                LOBYTE(v241) = 0;
                goto LABEL_400;
              }
              LOBYTE(v241) = 0;
              if (v86)
              {
LABEL_400:
                v113 = v240 & v241;
                goto LABEL_164;
              }
              v242 = *(_DWORD *)(v64 + 20);
              if ((v242 & 0x40000000) != 0)
                v243 = *(unsigned __int8 ***)(v64 - 8);
              else
                v243 = (unsigned __int8 **)(v64 - 32 * (v242 & 0x7FFFFFF));
              v244 = sub_1C5BABAE4(*v243, *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
              if (v244
                && ((v245 = (llvm::Value *)v244, v246 = *(_DWORD *)(v64 + 20), (v246 & 0x40000000) != 0)
                  ? (v247 = *(unsigned __int8 ***)(v64 - 8))
                  : (v247 = (unsigned __int8 **)(v64 - 32 * (v246 & 0x7FFFFFF))),
                    *v247 == v244))
              {
                v241 = ((v246 >> 1) & 0x3FFFFFF) - 1;
                if ((_DWORD)v241)
                {
                  v310 = v25;
                  v248 = 0;
                  v249 = 2 * v241;
                  while (1)
                  {
                    v250 = *(_DWORD *)(v64 + 20);
                    if ((v250 & 0x40000000) != 0)
                      v251 = *(_QWORD *)(v64 - 8);
                    else
                      v251 = v64 - 32 * (v250 & 0x7FFFFFF);
                    v252 = (v248 + 3);
                    if (v248 == 0x1FFFFFFFCLL)
                      v252 = 1;
                    v253 = sub_1C5BAE7CC(*(_QWORD *)(a1 + 136), *(_QWORD *)(v251 + 32 * v252));
                    if (v253)
                    {
                      v254 = (llvm *)v253;
                      v255 = *(_DWORD *)(v64 + 20);
                      v256 = (v255 & 0x40000000) != 0 ? *(_QWORD *)(v64 - 8) : v64 - 32 * (v255 & 0x7FFFFFF);
                      v257 = *(llvm::ValueHandleBase **)(v256 + 32 * (((_DWORD)v248 + 2) & 0xFFFFFFFE));
                      v323[0] = (void *)v64;
                      v258 = sub_1C62944C0(*(_QWORD *)(a1 + 104), (uint64_t *)v323);
                      v259 = sub_1C477672C((uint64_t)(v258 + 1), (uint64_t)v257);
                      v260 = v258[2];
                      v261 = v260 == v258[1] ? (unsigned int *)((char *)v258 + 28) : (unsigned int *)(v258 + 3);
                      if (v259 == (_QWORD *)(v260 + 8 * *v261))
                        break;
                    }
                    v248 += 2;
                    v26 = v318;
                    if (v249 == v248)
                    {
                      LOBYTE(v241) = 0;
                      v240 = 1;
                      v25 = v310;
                      goto LABEL_399;
                    }
                  }
                  v262 = *((_QWORD *)v254 + 6);
                  if (v262)
                    v263 = v262 - 24;
                  else
                    v263 = 0;
                  if (*(_BYTE *)(v263 + 16) == 83)
                  {
                    LOBYTE(v241) = 0;
                    v240 = 1;
                  }
                  else
                  {
                    sub_1C5BAE858(a1, *(_QWORD *)(a1 + 136), v245, v257, v254, 0);
                    v323[0] = (void *)v64;
                    v304 = sub_1C62944C0(*(_QWORD *)(a1 + 104), (uint64_t *)v323);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v304 + 1), (uint64_t)v257);
                    v240 = 1;
                    LOBYTE(v241) = 1;
                  }
                  v25 = v310;
                  goto LABEL_492;
                }
              }
              else
              {
LABEL_397:
                LOBYTE(v241) = 0;
              }
              v240 = 1;
              goto LABEL_399;
            }
            v96 = (uint64_t *)(v64 - 64);
          }
        }
        v61 = *v96;
        v103 = (_QWORD *)(*v96 + 40);
        v102 = (_QWORD *)*v103;
        if ((_QWORD *)*v103 == v103)
        {
          v64 = 0;
        }
        else
        {
          if (v102)
            v104 = (uint64_t)(v102 - 3);
          else
            v104 = 0;
          if (*(unsigned __int8 *)(v104 + 16) - 29 >= 0xB)
            v64 = 0;
          else
            v64 = v104;
        }
        v105 = *(_QWORD *)(a1 + 136);
        v106 = sub_1C477672C(v105 + 56, v61);
        v107 = *(_QWORD *)(v105 + 64);
        v108 = 72;
        if (v107 == *(_QWORD *)(v105 + 56))
          v108 = 76;
      }
      while (v106 != (_QWORD *)(v107 + 8 * *(unsigned int *)(v105 + v108)));
    }
LABEL_162:
    v113 = 0;
LABEL_163:
    v28 = v319;
LABEL_164:
    v27 = v316;
    v24 = v317;
    if (v329 != v328)
      free(v329);
    if ((v113 & 1) != 0)
    {
      v32 = 1;
      goto LABEL_505;
    }
    if (*(_BYTE *)(a1 + 128)
      || (v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 56) + 112)) != 0
      && (*(_BYTE *)(v114 + 17) & 4) != 0)
    {
      v32 = v320 != 0;
      goto LABEL_505;
    }
    v309 = (uint64_t)v25;
    v323[0] = v25;
    v323[1] = (void *)0x400000000;
    v115 = *(_QWORD *)(a1 + 136);
    v116 = *(_QWORD *)(v115 + 32);
    v117 = *(_QWORD *)(v115 + 40);
    if (v117 != v116)
    {
      do
      {
        v118 = *(_QWORD *)v116 + 40;
        for (j = *(_QWORD *)(*(_QWORD *)v116 + 48); j != v118; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v120 = j - 24;
          else
            v120 = 0;
          v121 = *(unsigned __int8 *)(v120 + 16) - 33;
          v82 = v121 > 0x33;
          v122 = (1 << v121) & 0x8000000000041;
          if (!v82 && v122 != 0)
          {
            v124 = *(_QWORD *)(j + 40);
            if (v124 && (*(_BYTE *)(v124 + 12) & 0x40) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(j - 24, 6) & 1) != 0)
            {
              goto LABEL_225;
            }
            v125 = *(unsigned __int8 *)(v120 + 16);
            if (j && v125 == 33)
            {
              v126 = (uint64_t *)(*(_QWORD *)(v120 - 64) + 48);
              do
              {
                v127 = *v126;
                v128 = v127 - 24;
                if (!v127)
                  v128 = 0;
                v129 = *(unsigned __int8 *)(v128 + 16);
                v126 = (uint64_t *)(v127 + 8);
              }
              while (v129 == 83);
              if ((v129 - 38) <= 0x2A && ((1 << (v129 - 38)) & 0x60000000001) != 0)
              {
LABEL_225:
                v32 = v320 != 0;
                goto LABEL_501;
              }
            }
            if (v125 == 84)
            {
              v131 = *(_QWORD *)(v120 - 32);
              if (v131)
              {
                if (!*(_BYTE *)(v131 + 16)
                  && *(_QWORD *)(v131 + 24) == *(_QWORD *)(v120 + 72)
                  && (*(_BYTE *)(v131 + 33) & 0x20) != 0
                  && *(_DWORD *)(*(_QWORD *)(j - 56) + 36) == 125)
                {
                  v132 = LODWORD(v323[1]);
                  if (LODWORD(v323[1]) >= (unint64_t)HIDWORD(v323[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v323, v309, LODWORD(v323[1]) + 1, 8);
                    v132 = LODWORD(v323[1]);
                  }
                  *((_QWORD *)v323[0] + v132) = j - 24;
                  ++LODWORD(v323[1]);
                }
              }
            }
          }
        }
        v116 += 8;
      }
      while (v116 != v117);
      v26 = v318;
      v28 = v319;
      if (LODWORD(v323[1]))
      {
        v133 = (char *)v323[0];
        v134 = 8 * LODWORD(v323[1]);
        do
        {
          v135 = sub_1C5BABAE4(*(unsigned __int8 **)(*(_QWORD *)v133 - 32 * (*(_DWORD *)(*(_QWORD *)v133 + 20) & 0x7FFFFFF)), *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
          if (v135)
          {
            v137 = (const llvm::Value *)v135;
            v138 = *v314;
            v139 = *(llvm::ValueHandleBase **)(*v314 + 1560);
            if (!v139)
            {
              v140 = *(llvm::ConstantInt **)(v138 + 1888);
              v141 = *(_DWORD *)(v138 + 1896);
              LODWORD(v329) = v141 >> 8;
              if (v141 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v328, 1, 0);
              }
              else
              {
                if (v141 <= 0xFF)
                  v142 = 0;
                else
                  v142 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v141);
                v328 = (void *)(v142 & 1);
              }
              v139 = llvm::ConstantInt::get(v140, (llvm::LLVMContext *)&v328, v136);
              if (v329 >= 0x41 && v328)
                MEMORY[0x1CAA32F9C](v328, 0x1000C8000313F17);
              *(_QWORD *)(v138 + 1560) = v139;
              v28 = v319;
            }
            v26 = v318;
            if ((sub_1C5BABB3C(a1, v137, v139, 0, 0, 0) & 1) != 0)
            {
              v32 = 1;
              v25 = (__int128 *)v309;
              goto LABEL_502;
            }
          }
          v133 += 8;
          v134 -= 8;
        }
        while (v134);
      }
    }
    v143 = *(_QWORD *)(a1 + 136);
    v144 = *(uint64_t **)(v143 + 32);
    v308 = *(uint64_t **)(v143 + 40);
    if (v308 == v144)
    {
LABEL_358:
      v25 = (__int128 *)v309;
      if (!*(_QWORD *)(a1 + 152))
        goto LABEL_360;
      LoopID = llvm::Loop::getLoopID(*(llvm::Loop **)(a1 + 136));
      if (llvm::findOptionMDForLoopID(LoopID, "llvm.loop.unswitch.partial.disable", 0x22uLL))
        goto LABEL_360;
      llvm::hasPartialIVCondition(*(llvm **)(a1 + 136), (llvm::Loop *)dword_1ED821800, *(llvm::MemorySSA **)(a1 + 160), *(_QWORD *)(a1 + 152), (uint64_t)&v328);
      if (!v338)
        goto LABEL_360;
      v226 = **(_QWORD **)(*(_QWORD *)(a1 + 136) + 32);
      v227 = *(_QWORD *)(v226 + 40);
      if (v227 == v226 + 40)
      {
        v229 = 0;
      }
      else
      {
        if (v227)
          v228 = v227 - 24;
        else
          v228 = 0;
        if (*(unsigned __int8 *)(v228 + 16) - 29 >= 0xB)
          v229 = 0;
        else
          v229 = v228;
      }
      v264 = *(const llvm::Value **)v328;
      if (v336)
      {
        if (*(_BYTE *)(a1 + 288))
        {
          v294 = **(void ****)(a1 + 8);
          do
          {
            v295 = *v294;
            v294 += 2;
          }
          while (v295 != &llvm::LegacyDivergenceAnalysis::ID);
          v296 = (llvm::LegacyDivergenceAnalysis *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v294 - 1)
                                                                                             + 96))(*(v294 - 1), &llvm::LegacyDivergenceAnalysis::ID);
          v25 = (__int128 *)v309;
          if ((llvm::LegacyDivergenceAnalysis::isDivergent(v296, v264) & 1) != 0)
          {
            v32 = 0;
            v28 = v319;
LABEL_481:
            v26 = v318;
            if (!v338)
              goto LABEL_502;
            v275 = 0;
LABEL_483:
            if (v328 != &v330)
              free(v328);
            if ((v275 & 1) == 0)
              goto LABEL_502;
            goto LABEL_360;
          }
        }
        v19 = *(void ***)(a1 + 176);
        v265 = v337;
        isOneValue = llvm::Constant::isOneValue(v335);
        if (isOneValue)
          v267 = (uint64_t)v265;
        else
          v267 = (uint64_t)v19;
        if (!isOneValue)
          v19 = v265;
        LoopPredecessor = (void **)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a1 + 136));
        if (LoopPredecessor)
        {
          v269 = (void **)LoopPredecessor[5];
          if (v269 != LoopPredecessor + 5)
          {
            if (v269)
              v270 = v269 - 3;
            else
              v270 = 0;
            v271 = *((unsigned __int8 *)v270 + 16);
            v272 = v271 - 29;
            if (v271 == 30)
            {
              if ((*((_DWORD *)v270 + 5) & 0x7FFFFFF) == 3)
                goto LABEL_439;
LABEL_456:
              v273 = LoopPredecessor;
LABEL_457:
              v282 = (void **)v273[5];
              if (v282 == v273 + 5)
              {
                v285 = 0;
              }
              else
              {
                v283 = (uint64_t)(v282 - 3);
                if (v282)
                  v284 = v282 - 3;
                else
                  v284 = 0;
                if (*((unsigned __int8 *)v284 + 16) - 29 >= 0xB)
                  v285 = 0;
                else
                  v285 = v283;
              }
              sub_1C5BADA28(a1, v264, v335, v267, (llvm::BasicBlock *)v19, v285, v229, v268, (unsigned __int8 **)v328, v329);
              v28 = v319;
              if (v285)
              {
                if ((*(_BYTE *)(v285 + 23) & 8) != 0)
                {
                  v306 = llvm::UndefValue::get(*(llvm::UndefValue **)v285, v286);
                  llvm::ValueAsMetadata::handleRAUW((uint64_t *)v285, v306, v307);
                }
                v287 = *(unsigned __int8 **)(v285 + 48);
                if (v287)
                  llvm::MetadataTracking::untrack(v285 + 48, v287);
                llvm::Value::~Value((llvm::Value *)v285, (llvm::Value *)v287);
                v288 = *(_DWORD *)(v285 + 20);
                if ((v288 & 0x40000000) != 0)
                {
                  v298 = *(char **)(v285 - 8);
                  v293 = (char *)(v285 - 8);
                  v297 = v298;
                  v299 = v288 & 0x7FFFFFF;
                  if ((_DWORD)v299)
                  {
                    v300 = 32 * v299;
                    do
                    {
                      v301 = &v297[v300];
                      if (*(_QWORD *)&v297[v300 - 32])
                      {
                        **((_QWORD **)v301 - 2) = *((_QWORD *)v301 - 3);
                        v302 = *((_QWORD *)v301 - 3);
                        if (v302)
                          *(_QWORD *)(v302 + 16) = *((_QWORD *)v301 - 2);
                      }
                      v300 -= 32;
                    }
                    while (v300);
                  }
                  operator delete(v297);
                  v25 = (__int128 *)v309;
                  v28 = v319;
                }
                else
                {
                  v289 = v288 & 0x7FFFFFF;
                  if ((_DWORD)v289)
                  {
                    v290 = (_QWORD **)(v285 - 16);
                    v291 = -32 * v289;
                    do
                    {
                      if (*(v290 - 2))
                      {
                        **v290 = *(v290 - 1);
                        v292 = (uint64_t)*(v290 - 1);
                        if (v292)
                          *(_QWORD *)(v292 + 16) = *v290;
                      }
                      v290 -= 4;
                      v291 += 32;
                    }
                    while (v291);
                  }
                  v293 = (char *)(v285 - 32 * v289);
                  if (v288 < 0)
                    v293 = &v293[-*((_QWORD *)v293 - 1) - 8];
                }
                operator delete(v293);
              }
LABEL_480:
              *(_BYTE *)(a1 + 129) = 0;
              v32 = 1;
              goto LABEL_481;
            }
            v273 = 0;
            v25 = (__int128 *)v309;
            switch(v272)
            {
              case 0:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                goto LABEL_457;
              case 1:
                goto LABEL_524;
              case 2:
                v281 = (*((_DWORD *)v270 + 5) >> 1) & 0x3FFFFFF;
                break;
              case 3:
                v281 = (*((_DWORD *)v270 + 5) & 0x7FFFFFF) - 1;
                break;
              case 10:
                v281 = *((_DWORD *)v270 + 20) + 1;
                break;
              default:
                goto LABEL_439;
            }
            v25 = (__int128 *)v309;
            if (v281 == 1)
              goto LABEL_456;
          }
        }
LABEL_439:
        v273 = 0;
        goto LABEL_457;
      }
      v274 = sub_1C5BABB3C(a1, v264, v335, v229, (unsigned __int8 **)v328, v329);
      v28 = v319;
      if ((v274 & 1) == 0)
      {
        if (v338)
        {
          v32 = 1;
          v275 = 1;
          v26 = v318;
          goto LABEL_483;
        }
        v26 = v318;
LABEL_360:
        v32 = v320 != 0;
        goto LABEL_502;
      }
      goto LABEL_480;
    }
    while (1)
    {
      v145 = *(_QWORD *)(*v144 + 40);
      if (v145 == *v144 + 40)
      {
        v313 = 0;
      }
      else
      {
        if (v145)
          v146 = (unsigned __int8 *)(v145 - 24);
        else
          v146 = 0;
        if (v146[16] - 29 >= 0xB)
          v146 = 0;
        v313 = (llvm::AssumptionCache *)v146;
      }
      if (*v317
        && !llvm::SimpleLoopSafetyInfo::isGuaranteedToExecute(v316, v313, *(const llvm::DominatorTree **)(a1 + 144), *(const llvm::BasicBlock ****)(a1 + 136)))
      {
        goto LABEL_346;
      }
      v147 = *((unsigned __int8 *)v313 + 16);
      if (v147 == 30 && v313 != 0)
        break;
      if (v147 != 31 || v313 == 0)
        goto LABEL_317;
      v150 = *((_DWORD *)v313 + 5);
      v151 = (v150 & 0x40000000) != 0
           ? (unsigned __int8 **)*((_QWORD *)v313 - 1)
           : (unsigned __int8 **)((char *)v313 - 32 * (v150 & 0x7FFFFFF));
      v161 = *v151;
      v162 = sub_1C5BABAE4(*v151, *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
      if (!v162 || ((*((_DWORD *)v313 + 5) >> 1) & 0x3FFFFFF) == 1)
        goto LABEL_317;
      v165 = (const llvm::Value *)v162;
      if ((_DWORD)v163 == 1)
      {
        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v161, v163);
        v328 = v313;
LABEL_339:
        v218 = sub_1C62944C0(*(_QWORD *)(a1 + 104), (uint64_t *)&v328);
        v219 = sub_1C477672C((uint64_t)(v218 + 1), (uint64_t)AllOnesValue);
        v220 = v218[2];
        if (v220 == v218[1])
          v221 = (unsigned int *)v218 + 7;
        else
          v221 = (unsigned int *)(v218 + 3);
        if (v219 != (_QWORD *)(v220 + 8 * *v221))
          goto LABEL_346;
        goto LABEL_343;
      }
      if ((_DWORD)v163 == 2)
      {
        AllOnesValue = (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)v161, v163);
        v328 = v313;
        goto LABEL_339;
      }
      v166 = 0;
      v167 = 2 * (((*((_DWORD *)v313 + 5) >> 1) & 0x3FFFFFFu) - 1);
      while (1)
      {
        v168 = *((_DWORD *)v313 + 5);
        v169 = (v168 & 0x40000000) != 0
             ? (llvm::AssumptionCache *)*((_QWORD *)v313 - 1)
             : (llvm::AssumptionCache *)((char *)v313 - 32 * (v168 & 0x7FFFFFF));
        AllOnesValue = (llvm::ValueHandleBase *)*((_QWORD *)v169 + 4 * (((_DWORD)v166 + 2) & 0xFFFFFFFE));
        v328 = v313;
        v171 = sub_1C62944C0(*(_QWORD *)(a1 + 104), (uint64_t *)&v328);
        v172 = sub_1C477672C((uint64_t)(v171 + 1), (uint64_t)AllOnesValue);
        v173 = v171[2];
        v174 = v173 == v171[1] ? (unsigned int *)((char *)v171 + 28) : (unsigned int *)(v171 + 3);
        if (v172 == (_QWORD *)(v173 + 8 * *v174))
          break;
        v166 += 2;
        if (v167 == v166)
          goto LABEL_346;
      }
LABEL_343:
      if (AllOnesValue)
      {
        if (sub_1C5BABB3C(a1, v165, AllOnesValue, 0, 0, 0))
        {
          v328 = v313;
          v303 = sub_1C62944C0(*(_QWORD *)(a1 + 104), (uint64_t *)&v328);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v303 + 1), (uint64_t)AllOnesValue);
          goto LABEL_500;
        }
LABEL_317:
        v208 = *v144 + 40;
        for (k = *(_QWORD *)(*v144 + 48); k != v208; k = *(_QWORD *)(k + 8))
        {
          if (k)
          {
            if (*(_BYTE *)(k - 8) == 85)
            {
              v210 = sub_1C5BABAE4(*(unsigned __int8 **)(k - 120), *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
              if (v210)
              {
                v212 = (const llvm::Value *)v210;
                v213 = *v314;
                v214 = *(llvm::ValueHandleBase **)(*v314 + 1560);
                if (!v214)
                {
                  v215 = *(llvm::ConstantInt **)(v213 + 1888);
                  v216 = *(_DWORD *)(v213 + 1896);
                  LODWORD(v329) = v216 >> 8;
                  if (v216 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v328, 1, 0);
                  }
                  else
                  {
                    if (v216 <= 0xFF)
                      v217 = 0;
                    else
                      v217 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v216);
                    v328 = (void *)(v217 & 1);
                  }
                  v214 = llvm::ConstantInt::get(v215, (llvm::LLVMContext *)&v328, v211);
                  if (v329 >= 0x41 && v328)
                    MEMORY[0x1CAA32F9C](v328, 0x1000C8000313F17);
                  *(_QWORD *)(v213 + 1560) = v214;
                }
                if ((sub_1C5BABB3C(a1, v212, v214, 0, 0, 0) & 1) != 0)
                  goto LABEL_500;
              }
            }
          }
        }
      }
LABEL_346:
      ++v144;
      v26 = v318;
      v28 = v319;
      if (v144 == v308)
        goto LABEL_358;
    }
    v152 = *v144;
    v153 = *(_QWORD *)(a1 + 144);
    v154 = *(_QWORD *)(v153 + 24);
    v155 = *(unsigned int *)(v153 + 40);
    if (!(_DWORD)v155)
      goto LABEL_270;
    LODWORD(v156) = ((v152 >> 4) ^ (v152 >> 9)) & (v155 - 1);
    v157 = (uint64_t *)(v154 + 16 * v156);
    v158 = *v157;
    if (v152 != *v157)
    {
      v159 = 1;
      while (v158 != -4096)
      {
        v160 = v156 + v159++;
        v156 = v160 & (v155 - 1);
        v158 = *(_QWORD *)(v154 + 16 * v156);
        if (v152 == v158)
        {
          v157 = (uint64_t *)(v154 + 16 * v156);
          goto LABEL_271;
        }
      }
LABEL_270:
      v157 = (uint64_t *)(v154 + 16 * v155);
    }
LABEL_271:
    v175 = **(_QWORD **)(v157[1] + 8);
    while (2)
    {
      v176 = *(_QWORD *)(a1 + 136);
      v177 = sub_1C477672C(v176 + 56, v175);
      v179 = *(_QWORD *)(v176 + 64);
      v180 = 72;
      if (v179 == *(_QWORD *)(v176 + 56))
        v180 = 76;
      if (v177 != (_QWORD *)(v179 + 8 * *(unsigned int *)(v176 + v180)))
      {
        v181 = *(_QWORD *)(v175 + 40);
        if (v181 == v175 + 40)
        {
          v182 = 0;
        }
        else
        {
          if (v181)
            v182 = v181 - 24;
          else
            v182 = 0;
          if (*(unsigned __int8 *)(v182 + 16) - 29 >= 0xB)
            v182 = 0;
        }
        if (*(_BYTE *)(v182 + 16) == 30)
          v183 = v182;
        else
          v183 = 0;
        v184 = *(_QWORD *)(a1 + 144);
        v185 = *(_QWORD *)(v184 + 24);
        v186 = *(unsigned int *)(v184 + 40);
        if (!(_DWORD)v186)
          goto LABEL_292;
        LODWORD(v187) = (v186 - 1) & ((v175 >> 4) ^ (v175 >> 9));
        v188 = (uint64_t *)(v185 + 16 * v187);
        v189 = *v188;
        if (v175 != *v188)
        {
          v190 = 1;
          while (v189 != -4096)
          {
            v191 = v187 + v190++;
            v187 = v191 & (v186 - 1);
            v189 = *(_QWORD *)(v185 + 16 * v187);
            if (v175 == v189)
            {
              v188 = (uint64_t *)(v185 + 16 * v187);
              goto LABEL_293;
            }
          }
LABEL_292:
          v188 = (uint64_t *)(v185 + 16 * v186);
        }
LABEL_293:
        v175 = **(_QWORD **)(v188[1] + 8);
        if (v183)
        {
          if ((*(_DWORD *)(v183 + 20) & 0x7FFFFFF) == 3)
          {
            v192 = *(llvm::ValueHandleBase **)(v183 - 96);
            if (*((_BYTE *)v192 + 16) == 16)
            {
              v193 = v152;
              v194 = **(uint64_t ***)v192;
              v195 = *v194;
              v196 = *(llvm::ValueHandleBase **)(*v194 + 1560);
              if (!v196)
              {
                v198 = *(llvm::ConstantInt **)(v195 + 1888);
                v199 = *(_DWORD *)(v195 + 1896);
                LODWORD(v329) = v199 >> 8;
                if (v199 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v328, 1, 0);
                }
                else
                {
                  if (v199 <= 0xFF)
                    v200 = 0;
                  else
                    v200 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v199);
                  v328 = (void *)(v200 & 1);
                }
                v196 = llvm::ConstantInt::get(v198, (llvm::LLVMContext *)&v328, v178);
                if (v329 >= 0x41 && v328)
                  MEMORY[0x1CAA32F9C](v328, 0x1000C8000313F17);
                *(_QWORD *)(v195 + 1560) = v196;
                v184 = *(_QWORD *)(a1 + 144);
              }
              v197 = v192 == v196 ? -1 : 0;
              v152 = v193;
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v184, *(_QWORD *)(v183 + 32 * v197 - 32), v193))
              {
                goto LABEL_346;
              }
            }
          }
        }
        continue;
      }
      break;
    }
    if ((*((_DWORD *)v313 + 5) & 0x7FFFFFF) != 3)
      goto LABEL_317;
    v201 = sub_1C5BABAE4(*((unsigned __int8 **)v313 - 12), *(_QWORD *)(a1 + 136), &v320, *(uint64_t **)(a1 + 168));
    if (!v201)
      goto LABEL_317;
    v202 = (const llvm::Value *)v201;
    v203 = sub_1C5BAD8D4((uint64_t)v201);
    v205 = (uint64_t)v313;
    if ((v203 & 1) != 0)
      goto LABEL_317;
    v206 = *v314;
    v207 = *(llvm::ValueHandleBase **)(*v314 + 1560);
    if (!v207)
    {
      v222 = *(llvm::ConstantInt **)(v206 + 1888);
      v223 = *(_DWORD *)(v206 + 1896);
      LODWORD(v329) = v223 >> 8;
      if (v223 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v328, 1, 0);
      }
      else
      {
        if (v223 <= 0xFF)
          v224 = 0;
        else
          v224 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v223);
        v328 = (void *)(v224 & 1);
      }
      v207 = llvm::ConstantInt::get(v222, (llvm::LLVMContext *)&v328, v204);
      if (v329 >= 0x41 && v328)
        MEMORY[0x1CAA32F9C](v328, 0x1000C8000313F17);
      *(_QWORD *)(v206 + 1560) = v207;
      v205 = (uint64_t)v313;
    }
    if ((sub_1C5BABB3C(a1, v202, v207, v205, 0, 0) & 1) == 0)
      goto LABEL_317;
LABEL_500:
    v32 = 1;
LABEL_501:
    v25 = (__int128 *)v309;
    v26 = v318;
    v28 = v319;
LABEL_502:
    if (v323[0] != v25)
      free(v323[0]);
    v27 = v316;
    v24 = v317;
LABEL_505:
    v19 = v315;
LABEL_38:
    v4 = (const llvm::Loop *)(v4 | v32);
  }
  while (*(_BYTE *)(a1 + 129));
  return v4 & 1;
}

