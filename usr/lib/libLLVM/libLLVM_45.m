void llvm::opt::OptTable::~OptTable(void **this)
{
  void *v2;

  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  sub_1C4F02264((uint64_t)(this + 7));
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

unint64_t llvm::opt::OptTable::getOption(_QWORD *a1, int a2)
{
  if (a2)
    return *a1 + ((unint64_t)(a2 - 1) << 6);
  else
    return 0;
}

void llvm::opt::OptTable::suggestValueCompletions(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, int64x2_t *a6@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v14;
  const char *v15;
  const void **v16;
  const void **v17;
  size_t v18;
  const void *v19;
  size_t v20;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  char v36;
  char *v37;
  __int128 __dst;
  unint64_t v39;
  const char *v40;
  int64x2_t v41;
  unint64_t v42;
  int64x2_t *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[18];

  v46[16] = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a1 + 48);
  v8 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  v9 = v8 - v7;
  if (v8 <= v7)
  {
LABEL_6:
    a6->i64[0] = 0;
    a6->i64[1] = 0;
    a6[1].i64[0] = 0;
  }
  else
  {
    v14 = *(_QWORD *)a1 + (v7 << 6);
    while (1)
    {
      v15 = *(const char **)(v14 + 56);
      if (v15)
      {
        if (sub_1C5A1EE94(*(_QWORD *)v14, *(char **)(v14 + 8), a2, a3))
          break;
      }
      v14 += 64;
      if (!--v9)
        goto LABEL_6;
    }
    v44 = v46;
    v45 = 0x800000000;
    v40 = v15;
    v41.i64[0] = strlen(v15);
    llvm::StringRef::split(&v40, (uint64_t)&v44, ",", 1uLL, -1, 0);
    a6[1].i64[0] = 0;
    a6->i64[0] = 0;
    a6->i64[1] = 0;
    v16 = (const void **)v44;
    if ((_DWORD)v45)
    {
      v17 = (const void **)((char *)v44 + 16 * v45);
      while (1)
      {
        v18 = (size_t)v16[1];
        if (v18 >= a5)
        {
          v19 = *v16;
          if (!a5 || !memcmp(*v16, a4, a5))
          {
            if (v18 >= a5)
              v20 = a5;
            else
              v20 = v18;
            if (v20)
            {
              if (memcmp(a4, v19, v20) || a5 != v18)
              {
LABEL_24:
                if (v18 >= 0x7FFFFFFFFFFFFFF8)
                  goto LABEL_55;
                if (v18 >= 0x17)
                {
                  v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v18 | 7) != 0x17)
                    v23 = v18 | 7;
                  v24 = v23 + 1;
                  p_dst = (__int128 *)operator new(v23 + 1);
                  *((_QWORD *)&__dst + 1) = v18;
                  v39 = v24 | 0x8000000000000000;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  HIBYTE(v39) = v18;
                  p_dst = &__dst;
                  if (!v18)
                  {
LABEL_32:
                    *((_BYTE *)p_dst + v18) = 0;
                    v25 = a6->u64[1];
                    v26 = a6[1].u64[0];
                    if (v25 >= v26)
                    {
                      v27 = a6->i64[0];
                      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - a6->i64[0]) >> 3);
                      v29 = v28 + 1;
                      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_55:
                        abort();
                      if (0x5555555555555556 * ((uint64_t)(v26 - v27) >> 3) > v29)
                        v29 = 0x5555555555555556 * ((uint64_t)(v26 - v27) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v27) >> 3) >= 0x555555555555555)
                        v30 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v30 = v29;
                      v43 = a6 + 1;
                      if (v30)
                      {
                        if (v30 > 0xAAAAAAAAAAAAAAALL)
                          sub_1C4764EE4();
                        v31 = (char *)operator new(24 * v30);
                      }
                      else
                      {
                        v31 = 0;
                      }
                      v32 = &v31[24 * v28];
                      *(_OWORD *)v32 = __dst;
                      *((_QWORD *)v32 + 2) = v39;
                      v39 = 0;
                      __dst = 0uLL;
                      if (v25 == v27)
                      {
                        v36 = 0;
                        v35 = vdupq_n_s64(v25);
                        v33 = &v31[24 * v28];
                      }
                      else
                      {
                        v33 = &v31[24 * v28];
                        do
                        {
                          v34 = *(_OWORD *)(v25 - 24);
                          *((_QWORD *)v33 - 1) = *(_QWORD *)(v25 - 8);
                          *(_OWORD *)(v33 - 24) = v34;
                          v33 -= 24;
                          *(_QWORD *)(v25 - 16) = 0;
                          *(_QWORD *)(v25 - 8) = 0;
                          *(_QWORD *)(v25 - 24) = 0;
                          v25 -= 24;
                        }
                        while (v25 != v27);
                        v35 = *a6;
                        v26 = a6[1].u64[0];
                        v36 = HIBYTE(v39);
                      }
                      v37 = v32 + 24;
                      a6->i64[0] = (uint64_t)v33;
                      a6->i64[1] = (uint64_t)(v32 + 24);
                      v41 = v35;
                      a6[1].i64[0] = (uint64_t)&v31[24 * v30];
                      v42 = v26;
                      v40 = (const char *)v35.i64[0];
                      sub_1C4D868F0((uint64_t)&v40);
                      a6->i64[1] = (uint64_t)v37;
                      if (v36 < 0)
                        operator delete((void *)__dst);
                    }
                    else
                    {
                      *(_OWORD *)v25 = __dst;
                      *(_QWORD *)(v25 + 16) = v39;
                      a6->i64[1] = v25 + 24;
                    }
                    goto LABEL_51;
                  }
                }
                memmove(p_dst, v19, v18);
                goto LABEL_32;
              }
            }
            else if (a5 != v18)
            {
              goto LABEL_24;
            }
          }
        }
LABEL_51:
        v16 += 2;
        if (v16 == v17)
        {
          v16 = (const void **)v44;
          break;
        }
      }
    }
    if (v16 != v46)
      free(v16);
  }
}

uint64_t sub_1C5A1EE94(uint64_t result, char *__s, char *a3, size_t a4)
{
  const char **v7;
  size_t v8;
  const char *v9;
  size_t v10;
  const char **v11;
  const char *v12;

  if (result)
  {
    v7 = (const char **)result;
    if (__s)
      v8 = strlen(__s);
    else
      v8 = 0;
    v9 = *v7;
    if (*v7)
    {
      if (a4 >= a4 - v8)
        v10 = a4 - v8;
      else
        v10 = a4;
      v11 = v7 + 1;
      while (a4 < v8 || v8 && memcmp(&a3[a4 - v8], __s, v8) || v10 != strlen(v9) || v10 && memcmp(a3, v9, v10))
      {
        v12 = *v11++;
        v9 = v12;
        if (!v12)
          return 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::opt::OptTable::findByPrefix(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char **v10;
  const std::string::value_type **v11;
  const char *v13;
  uint64_t v14;
  const char **v15;
  size_t v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  size_t v23;
  void *p_p;
  uint64_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  std::string *v36;
  BOOL v37;
  std::string::size_type v38;
  int v39;
  std::string::size_type v40;
  std::string *v41;
  uint64_t v42;
  std::string *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  size_t __sz;
  unint64_t v58;
  void *__p;
  std::string::size_type v62;
  int64_t v63;
  std::string __dst;
  std::string v65;
  std::string v66;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v5 = *((unsigned int *)a1 + 12);
  v58 = (a1[1] - *a1) >> 6;
  if (v58 > v5)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v7 = a3 | 7;
    __sz = v7 + 1;
    v54 = (v7 + 1) | 0x8000000000000000;
    while (1)
    {
      v8 = *a1;
      v9 = *a1 + (v5 << 6);
      v10 = *(const char ***)v9;
      if (*(_QWORD *)v9)
      {
        v11 = (const std::string::value_type **)(v9 + 16);
        if ((*(_QWORD *)(v9 + 16) || *(_WORD *)(v9 + 44) != 0) && (*(_DWORD *)(v8 + (v5 << 6) + 40) & a4) == 0)
        {
          v13 = *v10;
          if (*v10)
            break;
        }
      }
LABEL_94:
      if (++v5 == v58)
        return;
    }
    v14 = 0;
    v15 = (const char **)(v8 + (v5 << 6) + 8);
    while (1)
    {
      v16 = strlen(v13);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_96:
        abort();
      v17 = v16;
      if (v16 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (v16)
        goto LABEL_20;
LABEL_21:
      p_dst->__r_.__value_.__s.__data_[v17] = 0;
      v21 = *v15;
      v22 = strlen(*v15);
      if (v22 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_96;
      v23 = v22;
      if (v22 >= 0x17)
      {
        v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v25 = v22 | 7;
        v26 = v25 + 1;
        p_p = operator new(v25 + 1);
        v62 = v23;
        v63 = v26 | 0x8000000000000000;
        __p = p_p;
LABEL_28:
        memmove(p_p, v21, v23);
        goto LABEL_29;
      }
      HIBYTE(v63) = v22;
      p_p = &__p;
      if (v22)
        goto LABEL_28;
LABEL_29:
      *((_BYTE *)p_p + v23) = 0;
      if (v63 >= 0)
        v27 = (const std::string::value_type *)&__p;
      else
        v27 = (const std::string::value_type *)__p;
      if (v63 >= 0)
        v28 = HIBYTE(v63) & 0x7F;
      else
        v28 = v62;
      v29 = std::string::append(&__dst, v27, v28);
      v30 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v65, "\t");
      v32 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63) < 0)
        operator delete(__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (*v11)
        std::string::append(&v66, *v11);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v66;
      else
        v33 = (std::string *)v66.__r_.__value_.__r.__words[0];
      size = *((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x7F;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v66.__r_.__value_.__l.__size_;
      if (size < a3)
        goto LABEL_91;
      if (a3)
      {
        if (memcmp(v33, a2, a3))
          goto LABEL_91;
        if (a3 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_96;
        if (a3 >= 0x17)
        {
          v35 = (std::string *)operator new(__sz);
          __dst.__r_.__value_.__l.__size_ = a3;
          __dst.__r_.__value_.__r.__words[2] = v54;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
          v35 = &__dst;
        }
        memmove(v35, a2, a3);
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v35 = &__dst;
      }
      v35->__r_.__value_.__s.__data_[a3] = 0;
      v36 = std::string::append(&__dst, "\t");
      v37 = 0;
      v65 = *v36;
      v36->__r_.__value_.__r.__words[0] = 0;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = *((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x7F;
      else
        v38 = v66.__r_.__value_.__l.__size_;
      v39 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
      v40 = *((_BYTE *)&v65.__r_.__value_.__s + 23) & 0x7F;
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = v65.__r_.__value_.__l.__size_;
      if (v38 != v40)
        goto LABEL_76;
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v65;
      else
        v41 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v37 = memcmp(v66.__r_.__value_.__l.__data_, v41, v66.__r_.__value_.__l.__size_) == 0;
        goto LABEL_76;
      }
      if ((*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x7F) != 0)
      {
        v42 = (*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x7F) - 1;
        v43 = &v66;
        do
        {
          v45 = v43->__r_.__value_.__s.__data_[0];
          v43 = (std::string *)((char *)v43 + 1);
          v44 = v45;
          v47 = v41->__r_.__value_.__s.__data_[0];
          v41 = (std::string *)((char *)v41 + 1);
          v46 = v47;
          v49 = v42-- != 0;
          v37 = v44 == v46;
        }
        while (v44 == v46 && v49);
LABEL_76:
        if ((v39 & 0x80000000) == 0)
          goto LABEL_78;
LABEL_77:
        operator delete(v65.__r_.__value_.__l.__data_);
        goto LABEL_78;
      }
      v37 = 1;
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_77;
LABEL_78:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v37)
        {
LABEL_82:
          v50 = a5;
          v51 = a5[1];
          if (v51 >= a5[2])
          {
            v53 = sub_1C4D9AEFC(a5, (uint64_t)&v66);
            v50 = a5;
          }
          else
          {
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1C47EBC30((_BYTE *)a5[1], v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
              v50 = a5;
            }
            else
            {
              v52 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
              *(_QWORD *)(v51 + 16) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
              *(_OWORD *)v51 = v52;
            }
            v53 = v51 + 24;
          }
          v50[1] = v53;
        }
      }
      else if (!v37)
      {
        goto LABEL_82;
      }
LABEL_91:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      ++v14;
      v13 = *(const char **)(*(_QWORD *)v9 + 8 * v14);
      if (!v13)
        goto LABEL_94;
    }
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_20:
    memmove(p_dst, v13, v17);
    goto LABEL_21;
  }
}

uint64_t llvm::opt::OptTable::findNearest(uint64_t a1, char *a2, size_t a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  size_t v14;
  std::string::size_type v15;
  size_t v16;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  std::string::size_type v22;
  size_t v23;
  int v24;
  char *v25;
  std::string *p_dst;
  size_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  std::string::size_type v31;
  size_t v32;
  char *v33;
  size_t v34;
  std::string *v35;
  uint64_t v36;
  char *v37;
  std::string *v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  std::string::size_type v42;
  uint64_t v43;
  void **v44;
  unint64_t v45;
  std::string *v46;
  unint64_t size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  __int128 v56;
  uint64_t v57;
  std::string v58;
  size_t v59;
  __int16 v60;
  void *__p[2];
  char v62;
  std::string __dst;
  char *v64;
  size_t v65;

  v64 = a2;
  v65 = a3;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 48);
  if (v8 != (v7 - *(_QWORD *)a1) >> 6)
  {
    v10 = a6;
    v11 = a5;
    v9 = 0xFFFFFFFFLL;
    v13 = *(_QWORD *)a1 + (v8 << 6);
    v14 = a7;
    v52 = a7;
    v53 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v15 = *(_QWORD *)(v13 + 8);
      if (v15)
      {
        v16 = strlen(*(const char **)(v13 + 8));
        if (v16 && v16 >= v14)
        {
          v18 = *(_DWORD *)(v13 + 40);
          v19 = (v18 & v11) != 0 || v11 == 0;
          v20 = v18 & v10;
          v21 = v19 && v20 == 0;
          if (v21 && *(_QWORD *)v13)
            break;
        }
      }
LABEL_83:
      v13 += 64;
      if (v13 == v7)
        return v9;
    }
    v22 = v65;
    if (v65 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_85;
    v23 = v16;
    v24 = *(unsigned __int8 *)(v16 + v15 - 1);
    v25 = v64;
    if (v65 >= 0x17)
    {
      v27 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17)
        v27 = v65 | 7;
      v28 = v27 + 1;
      p_dst = (std::string *)operator new(v27 + 1);
      __dst.__r_.__value_.__l.__size_ = v22;
      __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v65;
      p_dst = &__dst;
      if (!v65)
        goto LABEL_27;
    }
    memmove(p_dst, v25, v22);
LABEL_27:
    p_dst->__r_.__value_.__s.__data_[v22] = 0;
    if (v24 != 61 && v24 != 58)
    {
      v34 = 0;
      v33 = 0;
LABEL_55:
      v42 = **(_QWORD **)v13;
      if (v42)
      {
        v43 = 8;
        do
        {
          v60 = 1283;
          v58.__r_.__value_.__r.__words[0] = v42;
          v58.__r_.__value_.__r.__words[2] = v15;
          v59 = v23;
          llvm::Twine::str((llvm::Twine *)&v58, __p);
          if (v62 >= 0)
            v44 = __p;
          else
            v44 = (void **)__p[0];
          if (v62 >= 0)
            v45 = v62 & 0x7F;
          else
            v45 = (unint64_t)__p[1];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &__dst;
          else
            v46 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __dst.__r_.__value_.__l.__size_;
          v48 = sub_1C5E3C880((uint64_t)v44, v45, (unsigned __int8 *)v46, size, 1, v9);
          v49 = v48;
          if (!v34 && (v24 == 61 || v24 == 58))
            v49 = (v48 + 1);
          if (v49 < v9)
          {
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            v58.__r_.__value_.__r.__words[2] = (std::string::size_type)v33;
            v59 = v34;
            v60 = 1284;
            llvm::Twine::str((llvm::Twine *)&v58, &v56);
            if (*(char *)(a4 + 23) < 0)
              operator delete(*(void **)a4);
            *(_OWORD *)a4 = v56;
            *(_QWORD *)(a4 + 16) = v57;
            v9 = v49;
          }
          if (v62 < 0)
            operator delete(__p[0]);
          v42 = *(_QWORD *)(*(_QWORD *)v13 + v43);
          v43 += 8;
        }
        while (v42);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v11 = a5;
      v10 = a6;
      v14 = v52;
      v7 = v53;
      goto LABEL_83;
    }
    v58.__r_.__value_.__s.__data_[0] = v24;
    v29 = llvm::StringRef::find((uint64_t *)&v64, (char *)&v58, 1uLL, 0);
    if (v29 == -1)
    {
      v33 = 0;
      v34 = 0;
      v30 = v64;
      v31 = v65;
    }
    else
    {
      v30 = v64;
      if (v65 >= v29)
        v31 = v29;
      else
        v31 = v65;
      if (v65 >= v29 + 1)
        v32 = v29 + 1;
      else
        v32 = v65;
      v33 = &v64[v32];
      v34 = v65 - v32;
    }
    if (v31 > 0x7FFFFFFFFFFFFFF7)
LABEL_85:
      abort();
    if (v31 >= 0x17)
    {
      v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v36 = v31 | 7;
      v51 = v36 + 1;
      v37 = v30;
      v38 = (std::string *)operator new(v36 + 1);
      v30 = v37;
      v35 = v38;
      v58.__r_.__value_.__l.__size_ = v31;
      v58.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    }
    else
    {
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = v31;
      v35 = &v58;
      if (!v31)
        goto LABEL_47;
    }
    memmove(v35, v30, v31);
LABEL_47:
    v35->__r_.__value_.__s.__data_[v31] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = v58;
    if (v65 && (v39 = v64, (v40 = memchr(v64, v24, v65)) != 0))
      v41 = v40 - v39;
    else
      v41 = -1;
    if (v41 == v31)
      std::string::push_back(&__dst, v24);
    goto LABEL_55;
  }
  return 0xFFFFFFFFLL;
}

BOOL llvm::opt::OptTable::addValues(llvm::opt::OptTable *this, char *__s, const char *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  BOOL v8;
  size_t v9;

  v3 = *((unsigned int *)this + 12);
  v4 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 6;
  if (v4 <= v3)
  {
    return 0;
  }
  else
  {
    v7 = *(_QWORD *)this + (v3 << 6);
    v8 = 1;
    while (1)
    {
      v9 = __s ? strlen(__s) : 0;
      if (sub_1C5A1EE94(*(_QWORD *)v7, *(char **)(v7 + 8), __s, v9))
        break;
      v8 = ++v3 < v4;
      v7 += 64;
      if (v4 == v3)
        return 0;
    }
    *(_QWORD *)(v7 + 56) = a3;
  }
  return v8;
}

double llvm::opt::OptTable::parseOneArgGrouped@<D0>(llvm::opt::OptTable *this@<X0>, llvm::opt::InputArgList *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int *v4;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t first_not_of;
  size_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  double result;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  unsigned int v55;
  int *v56;
  llvm::opt::InputArgList *v57;
  uint64_t v58;
  llvm::opt::OptTable *v59;
  uint64_t v60;
  size_t v61;
  __int16 v62;
  uint64_t v63[2];
  _QWORD v64[2];

  v4 = a3;
  v8 = *a3;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * v8);
  v64[0] = v9;
  if (v9)
    v10 = strlen((const char *)v9);
  else
    v10 = 0;
  v64[1] = v10;
  if (sub_1C5A1FD04(*((size_t ***)this + 7), *((_DWORD *)this + 16), (_BYTE *)v9, v10))
  {
    v11 = *((_DWORD *)this + 10);
    v12 = v4;
    if (v11)
    {
      v13 = *(_QWORD *)this + ((unint64_t)(v11 - 1) << 6);
    }
    else
    {
      this = 0;
      v13 = 0;
    }
    *v12 = v8 + 1;
    v37 = operator new();
    *(_QWORD *)v37 = v13;
    *(_QWORD *)(v37 + 8) = this;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = v9;
    *(_QWORD *)(v37 + 32) = v10;
    *(_DWORD *)(v37 + 40) = v8;
LABEL_39:
    *(_BYTE *)(v37 + 44) &= 0xFCu;
    *(_QWORD *)(v37 + 64) = v9;
    *(_QWORD *)(v37 + 48) = v37 + 64;
    *(_QWORD *)(v37 + 80) = 0;
    *(_QWORD *)&result = 0x200000001;
    *(_QWORD *)(v37 + 56) = 0x200000001;
    *a4 = v37;
  }
  else
  {
    v57 = a2;
    v14 = *(_QWORD *)this;
    v15 = *((_QWORD *)this + 1);
    v16 = v15 - *(_QWORD *)this;
    v17 = *((_BYTE *)this + 111);
    v18 = v17;
    if (v17 >= 0)
      v19 = (unsigned __int8 *)this + 88;
    else
      v19 = (unsigned __int8 *)*((_QWORD *)this + 11);
    v20 = v17 & 0x7F;
    if (v18 >= 0)
      v21 = v20;
    else
      v21 = *((_QWORD *)this + 12);
    first_not_of = llvm::StringRef::find_first_not_of(v64, v19, v21, 0);
    if (first_not_of >= v10)
      v23 = v10;
    else
      v23 = first_not_of;
    v24 = *((unsigned int *)this + 12);
    if (v24 == v16 >> 6)
      goto LABEL_46;
    v56 = (int *)v4;
    v25 = (char *)(v9 + v23);
    v26 = v14 + (v24 << 6);
    v27 = (v15 - v26) >> 6;
    do
    {
      v28 = v26 + (v27 >> 1 << 6);
      v29 = sub_1C5A212B8(*(char **)(v28 + 8), v25);
      if (v29)
        v27 += ~(v27 >> 1);
      else
        v27 >>= 1;
      if (v29)
        v26 = v28 + 64;
    }
    while (v27);
    v4 = (unsigned int *)v56;
    if (v26 == v15)
    {
LABEL_46:
      if (*(_BYTE *)(v9 + 1) == 45)
      {
        v40 = v4;
        v41 = *((_DWORD *)this + 11);
        v42 = a4;
        if (v41)
        {
          v43 = *(_QWORD *)this + ((unint64_t)(v41 - 1) << 6);
        }
        else
        {
          this = 0;
          v43 = 0;
        }
        v51 = (*v40)++;
        v52 = operator new();
        *(_QWORD *)v52 = v43;
        *(_QWORD *)(v52 + 8) = this;
        *(_QWORD *)(v52 + 16) = 0;
        *(_QWORD *)(v52 + 24) = v9;
        *(_QWORD *)(v52 + 32) = v10;
        *(_DWORD *)(v52 + 40) = v51;
        *(_BYTE *)(v52 + 44) &= 0xFCu;
        *(_QWORD *)(v52 + 64) = v9;
        *(_QWORD *)(v52 + 48) = v52 + 64;
        *(_QWORD *)(v52 + 80) = 0;
        *(_QWORD *)&result = 0x200000001;
        *(_QWORD *)(v52 + 56) = 0x200000001;
        *v42 = v52;
      }
      else
      {
        v44 = v4;
        v45 = a4;
        v62 = 261;
        if (v10 >= 2)
          v46 = 2;
        else
          v46 = v10;
        v58 = v9;
        v59 = (llvm::opt::OptTable *)v46;
        v47 = (const char *)sub_1C5A1C500((uint64_t)v57, (uint64_t)&v58);
        v48 = *v44;
        v58 = 45;
        v60 = v9 + v46;
        v61 = v10 - v46;
        v62 = 1287;
        *(_QWORD *)(*((_QWORD *)v57 + 22) + 8 * v48) = sub_1C5A1C500((uint64_t)v57, (uint64_t)&v58);
        v49 = *((_DWORD *)this + 11);
        if (v49)
        {
          v50 = *(_QWORD *)this + ((unint64_t)(v49 - 1) << 6);
        }
        else
        {
          this = 0;
          v50 = 0;
        }
        v53 = operator new();
        if (v47)
          v54 = strlen(v47);
        else
          v54 = 0;
        v55 = *v44;
        *(_QWORD *)v53 = v50;
        *(_QWORD *)(v53 + 8) = this;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)(v53 + 24) = v47;
        *(_QWORD *)(v53 + 32) = v54;
        *(_DWORD *)(v53 + 40) = v55;
        *(_BYTE *)(v53 + 44) &= 0xFCu;
        *(_QWORD *)(v53 + 64) = v47;
        *(_QWORD *)(v53 + 48) = v53 + 64;
        *(_QWORD *)(v53 + 80) = 0;
        *(_QWORD *)&result = 0x200000001;
        *(_QWORD *)(v53 + 56) = 0x200000001;
        *v45 = v53;
      }
    }
    else
    {
      v30 = 0;
      v31 = *v56;
      while (1)
      {
        v32 = sub_1C5A1FDB4(v26, (char *)v9, v10, *((unsigned __int8 *)this + 24));
        if (v32)
        {
          v33 = v32;
          v58 = v26;
          v59 = this;
          llvm::opt::Option::accept(&v58, (uint64_t)v57, *(_QWORD *)(*((_QWORD *)v57 + 22) + 8 * v31), v32, 0, v56, a4);
          if (*a4)
            break;
          *a4 = 0;
          if (v33 == 2 && *(_BYTE *)(v58 + 36) == 3)
            v30 = v26;
          if ((_DWORD)v31 != *v56)
            break;
        }
        v26 += 64;
        if (v26 == v15)
        {
          if (!v30)
            goto LABEL_46;
          v63[0] = v30;
          v63[1] = (uint64_t)this;
          if (*(_BYTE *)(v9 + 2) == 61)
          {
            v35 = *((_DWORD *)this + 11);
            if (v35)
            {
              v36 = *(_QWORD *)this + ((unint64_t)(v35 - 1) << 6);
            }
            else
            {
              this = 0;
              v36 = 0;
            }
            *v56 = v31 + 1;
            v37 = operator new();
            *(_QWORD *)v37 = v36;
            *(_QWORD *)(v37 + 8) = this;
            *(_QWORD *)(v37 + 16) = 0;
            *(_QWORD *)(v37 + 24) = v9;
            *(_QWORD *)(v37 + 32) = v10;
            *(_DWORD *)(v37 + 40) = v31;
            goto LABEL_39;
          }
          if (v10 >= 2)
            v38 = 2;
          else
            v38 = v10;
          llvm::opt::Option::accept(v63, (uint64_t)v57, v9, v38, 1, v56, a4);
          if (*a4)
          {
            v39 = *v56;
            v58 = 45;
            v60 = v9 + v38;
            v61 = v10 - v38;
            v62 = 1287;
            *(_QWORD *)(*((_QWORD *)v57 + 22) + 8 * v39) = sub_1C5A1C500((uint64_t)v57, (uint64_t)&v58);
            return result;
          }
          *a4 = 0;
          goto LABEL_46;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5A1FD04(size_t **a1, int a2, _BYTE *__s1, size_t a4)
{
  size_t **i;
  size_t **v8;
  size_t *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  uint64_t result;
  size_t *v14;
  BOOL v15;

  if (a4 != 1 || *__s1 != 45)
  {
    i = a1;
    if (a2)
    {
      for (i = a1; !*i || *i + 1 == 0; ++i)
        ;
    }
    v8 = &a1[a2];
    if (i != v8)
    {
      v9 = *i;
      do
      {
        v12 = *v9;
        v10 = v9 + 1;
        v11 = v12;
        if (a4 >= v12)
        {
          if (!v11)
            return 0;
          result = memcmp(__s1, v10, v11);
          if (!(_DWORD)result)
            return result;
        }
        do
        {
          v14 = i[1];
          ++i;
          v9 = v14;
          if (v14)
            v15 = v9 + 1 == 0;
          else
            v15 = 1;
        }
        while (v15);
      }
      while (i != v8);
    }
  }
  return 1;
}

uint64_t sub_1C5A1FDB4(uint64_t a1, char *a2, size_t a3, int a4)
{
  const char *v4;
  const char **i;
  size_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  size_t v14;
  char *v15;
  size_t v16;
  const char *v17;
  size_t v18;
  int v19;
  unsigned __int8 *v21[2];

  v4 = **(const char ***)a1;
  if (!v4)
    return 0;
  for (i = (const char **)(*(_QWORD *)a1 + 8); ; ++i)
  {
    v10 = strlen(v4);
    if (a3 < v10)
      goto LABEL_14;
    v11 = v10;
    if (v10)
    {
      if (memcmp(a2, v4, v10))
        goto LABEL_14;
    }
    v12 = a3 >= v11 ? v11 : a3;
    v13 = &a2[v12];
    v14 = a3 - v12;
    v21[0] = (unsigned __int8 *)&a2[v12];
    v21[1] = (unsigned __int8 *)(a3 - v12);
    v15 = *(char **)(a1 + 8);
    if (a4)
      break;
    if (!v15)
      goto LABEL_22;
    v16 = strlen(*(const char **)(a1 + 8));
    if (v14 >= v16 && (!v16 || !memcmp(v13, v15, v16)))
    {
LABEL_20:
      v19 = strlen(v15);
      return (v19 + v11);
    }
LABEL_14:
    v17 = *i;
    v4 = v17;
    if (!v17)
      return 0;
  }
  if (v15)
  {
    v18 = strlen(*(const char **)(a1 + 8));
    if (llvm::StringRef::startswith_insensitive(v21, (unsigned __int8 *)v15, v18))
      goto LABEL_20;
    goto LABEL_14;
  }
  if (!llvm::StringRef::startswith_insensitive(v21, 0, 0))
    goto LABEL_14;
LABEL_22:
  v19 = 0;
  return (v19 + v11);
}

double llvm::opt::OptTable::ParseOneArg@<D0>(llvm::opt::OptTable *this@<X0>, const llvm::opt::ArgList *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v12;
  const char *v13;
  char *v14;
  size_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t first_not_of;
  size_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  int v32;
  size_t v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  int v37;
  unsigned int v39;
  uint64_t v40;
  double result;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  size_t v46;
  int v47;
  const llvm::opt::ArgList *v48;
  int v49;
  int *v50;
  char *v51;
  llvm::opt::OptTable *v52;

  v12 = *a3;
  v13 = (const char *)(**(uint64_t (***)(const llvm::opt::ArgList *, _QWORD))a2)(a2, *a3);
  v14 = (char *)v13;
  if (v13)
    v15 = strlen(v13);
  else
    v15 = 0;
  if (sub_1C5A1FD04(*((size_t ***)this + 7), *((_DWORD *)this + 16), v14, v15))
  {
    v16 = *((_DWORD *)this + 10);
    if (v16)
    {
      v17 = *(_QWORD *)this + ((unint64_t)(v16 - 1) << 6);
    }
    else
    {
      this = 0;
      v17 = 0;
    }
    v44 = (*a3)++;
    v45 = operator new();
    if (!v14)
    {
      v46 = 0;
      goto LABEL_56;
    }
LABEL_55:
    v46 = strlen(v14);
LABEL_56:
    *(_QWORD *)v45 = v17;
    *(_QWORD *)(v45 + 8) = this;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)(v45 + 24) = v14;
    *(_QWORD *)(v45 + 32) = v46;
    *(_DWORD *)(v45 + 40) = v44;
    *(_BYTE *)(v45 + 44) &= 0xFCu;
    *(_QWORD *)(v45 + 64) = v14;
    *(_QWORD *)(v45 + 48) = v45 + 64;
    *(_QWORD *)(v45 + 80) = 0;
    *(_QWORD *)&result = 0x200000001;
    *(_QWORD *)(v45 + 56) = 0x200000001;
    *a6 = v45;
    return result;
  }
  v47 = v12;
  v48 = a2;
  v49 = a4;
  v18 = *((unsigned int *)this + 12);
  v19 = *((_QWORD *)this + 1);
  v20 = *(_QWORD *)this + (v18 << 6);
  v21 = (v19 - *(_QWORD *)this) >> 6;
  v51 = v14;
  if (v14)
    v22 = strlen(v14);
  else
    v22 = 0;
  v52 = (llvm::opt::OptTable *)v22;
  v23 = *((_BYTE *)this + 111);
  if (v23 >= 0)
    v24 = (unsigned __int8 *)this + 88;
  else
    v24 = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (v23 >= 0)
    v25 = v23 & 0x7F;
  else
    v25 = *((_QWORD *)this + 12);
  first_not_of = llvm::StringRef::find_first_not_of(&v51, v24, v25, 0);
  if (first_not_of >= v22)
    v27 = v22;
  else
    v27 = first_not_of;
  v50 = (int *)a3;
  if (v21 != v18)
  {
    v28 = &v14[v27];
    v29 = (v19 - v20) >> 6;
    do
    {
      v30 = v20 + (v29 >> 1 << 6);
      v31 = sub_1C5A212B8(*(char **)(v30 + 8), v28);
      if (v31)
        v29 += ~(v29 >> 1);
      else
        v29 >>= 1;
      if (v31)
        v20 = v30 + 64;
    }
    while (v29);
  }
  if (v20 == v19)
  {
LABEL_47:
    if (*v14 == 47)
    {
      v43 = *((_DWORD *)this + 10);
      if (!v43)
      {
LABEL_49:
        this = 0;
        v17 = 0;
LABEL_52:
        v44 = (*v50)++;
        v45 = operator new();
        goto LABEL_55;
      }
    }
    else
    {
      v43 = *((_DWORD *)this + 11);
      if (!v43)
        goto LABEL_49;
    }
    v17 = *(_QWORD *)this + ((unint64_t)(v43 - 1) << 6);
    goto LABEL_52;
  }
  while (1)
  {
    v32 = *((unsigned __int8 *)this + 24);
    v20 += 64;
    while (1)
    {
      v33 = v14 ? strlen(v14) : 0;
      v34 = sub_1C5A1FDB4(v20 - 64, v14, v33, v32 != 0);
      if (v34)
        break;
      v36 = v20 == v19;
      v20 += 64;
      if (v36)
        goto LABEL_47;
    }
    v35 = *(_DWORD *)(v20 - 24);
    v36 = (v35 & v49) != 0 || v49 == 0;
    v51 = (char *)(v20 - 64);
    v52 = this;
    v37 = v35 & a5;
    if (v36 && v37 == 0)
    {
      v39 = v34;
      v40 = (**(uint64_t (***)(const llvm::opt::ArgList *, _QWORD))v48)(v48, *v50);
      llvm::opt::Option::accept((uint64_t *)&v51, (uint64_t)v48, v40, v39, 0, v50, a6);
      if (*a6)
        return result;
      v42 = *v50;
      *a6 = 0;
      if (v47 != v42)
        return result;
    }
    if (v20 == v19)
      goto LABEL_47;
  }
}

void llvm::opt::OptTable::ParseArgs(llvm::opt::OptTable *a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X4>, int a6@<W5>, int a7@<W6>, llvm::opt::InputArgList *a8@<X8>)
{
  unsigned int v12;
  unsigned int v15;
  _BYTE *v16;
  llvm::opt::Arg *v17;
  llvm::opt::Arg *v18;
  int v19;
  llvm::opt::Arg *v20;
  unsigned int v21;

  v12 = a3;
  llvm::opt::InputArgList::InputArgList(a8, a2, &a2[a3]);
  *a5 = 0;
  *a4 = 0;
  v21 = 0;
  if (v12)
  {
    v15 = 0;
    do
    {
      v16 = *(_BYTE **)(*((_QWORD *)a8 + 22) + 8 * v15);
      if (v16)
      {
        if (*v16)
        {
          if (*((_BYTE *)a1 + 25))
            llvm::opt::OptTable::parseOneArgGrouped(a1, a8, &v21, (uint64_t *)&v20);
          else
            llvm::opt::OptTable::ParseOneArg(a1, a8, &v21, a6, a7, (uint64_t *)&v20);
          v17 = v20;
          if (v20)
          {
            v20 = 0;
            llvm::opt::ArgList::append(a8, v17);
            v18 = v20;
            v20 = 0;
            if (v18)
            {
              llvm::opt::Arg::~Arg(v18);
              MEMORY[0x1CAA32FC0]();
            }
            v19 = 0;
          }
          else
          {
            *a4 = v15;
            *a5 = v21 + ~v15;
            v19 = 3;
          }
          v15 = v21;
        }
        else
        {
          v21 = ++v15;
          v19 = 2;
        }
        if (v19 == 3)
          return;
      }
      else
      {
        v21 = ++v15;
      }
    }
    while (v15 < v12);
  }
}

void llvm::opt::OptTable::parseArgs(const char **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, void (*a6)(uint64_t, void **, std::string::size_type)@<X5>, uint64_t a7@<X6>, llvm::opt::InputArgList *a8@<X8>)
{
  __int16 v13;
  void **v14;
  std::string::size_type v15;
  uint64_t v16;
  llvm::opt::Arg **v17;
  llvm::opt::Arg *v18;
  std::string *v19;
  size_t size;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  void **v25;
  void *v26;
  void *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  void **v38;
  void *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  void *__p[2];
  uint64_t v45;
  std::string v46;
  __int128 v47;
  const char *v48;
  __int128 v49;
  const char *v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  const char **v57;
  uint64_t v58;
  _BYTE v59[16];

  v57 = (const char **)v59;
  v58 = 0;
  llvm::cl::expandResponseFiles(a2, a3, a1[4], a5, (unsigned int *)&v57);
  v56 = 0;
  llvm::opt::OptTable::ParseArgs((llvm::opt::OptTable *)a1, v57, v58, (unsigned int *)&v56 + 1, &v56, 0, 0, a8);
  if ((_DWORD)v56)
  {
    if (**(_BYTE **)(*((_QWORD *)a8 + 22) + 8 * HIDWORD(v56)))
    {
      *(_QWORD *)&v49 = *(_QWORD *)(*((_QWORD *)a8 + 22) + 8 * HIDWORD(v56));
      v50 = ": missing argument";
      v13 = 771;
    }
    else
    {
      *(_QWORD *)&v49 = ": missing argument";
      v13 = 259;
    }
    v52 = v13;
    llvm::Twine::str((llvm::Twine *)&v49, &v53);
    v14 = v55 >= 0 ? (void **)&v53 : v53;
    v15 = v55 >= 0 ? HIBYTE(v55) & 0x7F : v54;
    a6(a7, v14, v15);
    if (SHIBYTE(v55) < 0)
      operator delete(v53);
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_1C5A1C784((uint64_t)a8, a4, (uint64_t)&v49);
  v47 = v49;
  v16 = v51;
  v48 = v50;
  v17 = (llvm::opt::Arg **)v49;
  if ((_QWORD)v49 != v51)
  {
    while (1)
    {
      v18 = *v17;
      llvm::opt::Arg::getAsString(*v17, a8, &v46);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v46;
      else
        v19 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v46.__r_.__value_.__l.__size_;
      if (llvm::opt::OptTable::findNearest((uint64_t)a1, (char *)v19, size, (uint64_t)&v53, 0, 0, 4u) < 2)
      {
        llvm::opt::Arg::getAsString(v18, a8, &v40);
        v28 = std::string::insert(&v40, 0, "unknown argument '");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v41, "', did you mean '");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v32 = (const std::string::value_type *)&v53;
        else
          v32 = (const std::string::value_type *)v53;
        if (v55 >= 0)
          v33 = HIBYTE(v55) & 0x7F;
        else
          v33 = v54;
        v34 = std::string::append(&v42, v32, v33);
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v43, "'?");
        v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v45 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v45 >= 0)
          v38 = __p;
        else
          v38 = (void **)__p[0];
        if (v45 >= 0)
          v39 = (void *)(HIBYTE(v45) & 0x7F);
        else
          v39 = __p[1];
        a6(a7, v38, (std::string::size_type)v39);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_56;
        v27 = (void *)v40.__r_.__value_.__r.__words[0];
      }
      else
      {
        llvm::opt::Arg::getAsString(v18, a8, &v42);
        v21 = std::string::insert(&v42, 0, "unknown argument '");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v43, "'");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v45 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (v45 >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        if (v45 >= 0)
          v26 = (void *)(HIBYTE(v45) & 0x7F);
        else
          v26 = __p[1];
        a6(a7, v25, (std::string::size_type)v26);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_56;
        v27 = (void *)v42.__r_.__value_.__r.__words[0];
      }
      operator delete(v27);
LABEL_56:
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      *(_QWORD *)&v47 = v47 + 8;
      sub_1C5A1DA30((uint64_t)&v47);
      v17 = (llvm::opt::Arg **)v47;
      if ((_QWORD)v47 == v16)
      {
        if (SHIBYTE(v55) < 0)
          operator delete(v53);
        break;
      }
    }
  }
  if (v57 != (const char **)v59)
    free(v57);
}

void llvm::opt::OptTable::printHelp(llvm::opt::OptTable *this, llvm::raw_ostream *a2, const char *a3, const char *a4, int a5, int a6, int a7)
{
  uint64_t v14;
  llvm::raw_ostream *v15;
  size_t v16;
  void *v17;
  _WORD *v18;
  _DWORD *v19;
  llvm::raw_ostream *v20;
  size_t v21;
  void *v22;
  _WORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  const char *v36;
  BOOL v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  llvm::opt::OptTable *v41;
  uint64_t v42;
  std::string::size_type v43;
  llvm::opt::OptTable *v44;
  std::string::size_type v45;
  unsigned int v46;
  const std::string::value_type *v47;
  size_t v48;
  size_t v49;
  __int128 *p_dst;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  size_t v56;
  __int128 *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  size_t v61;
  uint64_t *v62;
  size_t v63;
  size_t v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  size_t v68;
  size_t v69;
  int v70;
  _BOOL4 v71;
  _OWORD *v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  __int128 v89;
  void **v90;
  int i;
  uint64_t *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  _BYTE *v101;
  char v102;
  BOOL v103;
  const void *v104;
  size_t v105;
  size_t v106;
  _WORD *v107;
  llvm::raw_ostream *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  char v117;
  BOOL v118;
  const char *v119;
  size_t v120;
  size_t v121;
  _BYTE *v122;
  const void *v123;
  unint64_t v124;
  _BYTE *v125;
  llvm::raw_ostream *v126;
  uint64_t *v127;
  uint64_t **v128;
  const char *v129;
  const char *v130;
  uint64_t v131;
  llvm::opt::OptTable *v132;
  int v133;
  int v134;
  int v135;
  _OWORD *v136;
  uint64_t **v137;
  std::string __p;
  _QWORD v139[3];
  __int128 __dst;
  int64_t v141;
  std::string v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;

  v14 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 9)
  {
    *(_WORD *)(v14 + 8) = 8250;
    *(_QWORD *)v14 = *(_QWORD *)"OVERVIEW: ";
    *((_QWORD *)a2 + 4) += 10;
    v15 = a2;
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    v15 = llvm::raw_ostream::write(a2, "OVERVIEW: ", 0xAuLL);
    if (!a4)
      goto LABEL_5;
  }
  v16 = strlen(a4);
  v17 = (void *)*((_QWORD *)v15 + 4);
  if (v16 <= *((_QWORD *)v15 + 3) - (_QWORD)v17)
  {
    if (v16)
    {
      memcpy(v17, a4, v16);
      *((_QWORD *)v15 + 4) += v16;
    }
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, a4, v16);
  }
LABEL_5:
  v18 = (_WORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 2570;
    *((_QWORD *)v15 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v15, "\n\n", 2uLL);
  }
  v19 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 6uLL)
  {
    *(_DWORD *)((char *)v19 + 3) = 540689735;
    *v19 = 1195463509;
    *((_QWORD *)a2 + 4) += 7;
    v20 = a2;
    if (a3)
    {
LABEL_9:
      v21 = strlen(a3);
      v22 = (void *)*((_QWORD *)v20 + 4);
      if (v21 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
      {
        if (v21)
        {
          memcpy(v22, a3, v21);
          *((_QWORD *)v20 + 4) += v21;
        }
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, a3, v21);
      }
    }
  }
  else
  {
    v20 = llvm::raw_ostream::write(a2, "USAGE: ", 7uLL);
    if (a3)
      goto LABEL_9;
  }
  v23 = (_WORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v23 > 1uLL)
  {
    *v23 = 2570;
    *((_QWORD *)v20 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v20, "\n\n", 2uLL);
  }
  v144 = 0;
  v145 = 0;
  v143 = (uint64_t *)&v144;
  v24 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if ((v24 & 0x3FFFFFFFC0) == 0)
    goto LABEL_219;
  v25 = v139;
  v26 = (v24 >> 6);
  v27 = 1;
  do
  {
    v28 = (v27 - 1);
    v29 = *(_QWORD *)this;
    v30 = *(_QWORD *)this + (v28 << 6);
    if (!*(_BYTE *)(v30 + 36))
      goto LABEL_38;
    v31 = *(_DWORD *)(v30 + 40);
    v32 = (v31 & a5) != 0 || a5 == 0;
    v33 = v31 & a6;
    if (!v32 || v33 != 0)
      goto LABEL_38;
    v35 = v29 + (v28 << 6);
    v36 = *(const char **)(v35 + 16);
    if (v36)
      v37 = 1;
    else
      v37 = a7 == 0;
    if (v37)
    {
      if (!v36)
        goto LABEL_38;
    }
    else
    {
      if (!(_DWORD)v27)
        v35 = 0;
      v40 = *(unsigned __int16 *)(v35 + 46);
      if (!v40)
        goto LABEL_38;
      v41 = (_DWORD)v27 ? this : 0;
      v42 = *(_QWORD *)v41;
      if (!v42)
        goto LABEL_38;
      v36 = *(const char **)(v29
                           + ((unint64_t)(*(_DWORD *)(v42
                                                                         + ((unint64_t)(v40 - 1) << 6)
                                                                         + 32)
                                                             - 1) << 6)
                           + 16);
      if (!v36)
        goto LABEL_38;
    }
    if (!*v36)
      goto LABEL_38;
    v136 = v25;
    LODWORD(v38) = v27;
    v133 = a5;
    while (1)
    {
      v38 = *(unsigned __int16 *)(v29 + ((unint64_t)(v38 - 1) << 6) + 44);
      if (!v38)
        break;
      v39 = *(const char **)(v29 + ((unint64_t)(v38 - 1) << 6) + 16);
      if (v39)
        goto LABEL_48;
    }
    v39 = "OPTIONS";
LABEL_48:
    v43 = v29 + (v28 << 6);
    if ((_DWORD)v27)
      v44 = this;
    else
      v44 = 0;
    if ((_DWORD)v27)
      v45 = v43;
    else
      v45 = 0;
    __p.__r_.__value_.__r.__words[0] = v45;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    sub_1C62E0798(&v142, (const char ****)&__p);
    v46 = *(unsigned __int8 *)(v45 + 36);
    if (v46 <= 0xC)
    {
      if (((1 << v46) & 0x9C0) != 0)
      {
        std::string::push_back(&v142, 32);
LABEL_61:
        if (*(_QWORD *)(*(_QWORD *)this + (v28 << 6) + 24))
          v47 = *(const std::string::value_type **)(*(_QWORD *)this + (v28 << 6) + 24);
        else
          v47 = "<value>";
LABEL_64:
        std::string::append(&v142, v47);
        goto LABEL_65;
      }
      if (((1 << v46) & 0x1210) != 0)
        goto LABEL_61;
      if (v46 != 10)
        goto LABEL_65;
      v47 = *(const std::string::value_type **)(*(_QWORD *)this + (v28 << 6) + 24);
      if (v47)
      {
        std::string::push_back(&v142, 32);
        goto LABEL_64;
      }
      for (i = *(unsigned __int8 *)(v45 + 37); i; --i)
        std::string::append(&v142, " <value>");
    }
LABEL_65:
    v48 = strlen(v39);
    if (v48 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_232;
    v49 = v48;
    v134 = a6;
    v135 = a7;
    v131 = v26;
    v132 = this;
    if (v48 >= 0x17)
    {
      v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17)
        v51 = v48 | 7;
      v52 = v51 + 1;
      p_dst = (__int128 *)operator new(v51 + 1);
      *((_QWORD *)&__dst + 1) = v49;
      v141 = v52 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v141) = v48;
      p_dst = &__dst;
      if (!v48)
        goto LABEL_73;
    }
    memmove(p_dst, v39, v49);
LABEL_73:
    *((_BYTE *)p_dst + v49) = 0;
    v53 = v144;
    v54 = &v144;
    v55 = &v144;
    if (v144)
    {
      if (v141 >= 0)
        v56 = HIBYTE(v141) & 0x7F;
      else
        v56 = *((_QWORD *)&__dst + 1);
      if (v141 >= 0)
        v57 = &__dst;
      else
        v57 = (__int128 *)__dst;
      while (1)
      {
        while (1)
        {
          v54 = (uint64_t **)v53;
          v60 = v53[4];
          v58 = v53 + 4;
          v59 = (uint64_t *)v60;
          v61 = *((unsigned __int8 *)v58 + 23);
          if ((v61 & 0x80u) == 0)
            v62 = v58;
          else
            v62 = v59;
          v63 = v58[1];
          if ((v61 & 0x80u) == 0)
            v64 = v61 & 0x7F;
          else
            v64 = v58[1];
          if (v64 >= v56)
            v65 = v56;
          else
            v65 = v64;
          v66 = memcmp(v57, v62, v65);
          v67 = v56 < v64;
          if (v66)
            v67 = v66 < 0;
          if (!v67)
            break;
          v53 = *v54;
          v55 = v54;
          if (!*v54)
            goto LABEL_105;
        }
        v137 = v54;
        if ((v61 & 0x80u) == 0)
          v68 = v61;
        else
          v68 = v63;
        if (v56 >= v68)
          v69 = v68;
        else
          v69 = v56;
        v70 = memcmp(v62, v57, v69);
        v71 = v68 < v56;
        if (v70)
          v71 = v70 < 0;
        if (!v71)
          break;
        v53 = v54[1];
        if (!v53)
        {
          v55 = v54 + 1;
          goto LABEL_105;
        }
      }
    }
    else
    {
LABEL_105:
      v72 = operator new(0x50uLL);
      v72[2] = __dst;
      v73 = v141;
      __dst = 0uLL;
      v141 = 0;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = 0;
      *((_QWORD *)v72 + 6) = v73;
      *((_QWORD *)v72 + 7) = 0;
      *((_QWORD *)v72 + 8) = 0;
      *((_QWORD *)v72 + 9) = 0;
      *((_QWORD *)v72 + 2) = v54;
      *v55 = (uint64_t *)v72;
      v137 = (uint64_t **)v72;
      v74 = (uint64_t *)v72;
      if (*v143)
      {
        v143 = (uint64_t *)*v143;
        v74 = *v55;
      }
      sub_1C4768E74(v144, v74);
      ++v145;
    }
    a6 = v134;
    a7 = v135;
    v25 = v136;
    v26 = v131;
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      sub_1C47EBC30(&__p, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
    else
      __p = v142;
    this = v132;
    v139[0] = v36;
    v139[1] = strlen(v36);
    v75 = v137[8];
    v76 = v137[9];
    if (v75 >= v76)
    {
      v79 = v137[7];
      v80 = 0xCCCCCCCCCCCCCCCDLL * (v75 - v79);
      v81 = v80 + 1;
      if (v80 + 1 > 0x666666666666666)
LABEL_232:
        abort();
      v82 = 0xCCCCCCCCCCCCCCCDLL * (v76 - v79);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x333333333333333)
        v83 = 0x666666666666666;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 > 0x666666666666666)
          sub_1C4764EE4();
        v84 = (char *)operator new(40 * v83);
      }
      else
      {
        v84 = 0;
      }
      v85 = &v84[40 * v80];
      v86 = (uint64_t *)&v84[40 * v83];
      *(std::string *)v85 = __p;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v85 + 24) = *v136;
      v78 = (uint64_t *)(v85 + 40);
      v87 = v137[7];
      v88 = v137[8];
      if (v88 == v87)
      {
        v137[7] = (uint64_t *)v85;
        v137[8] = v78;
        v137[9] = v86;
        this = v132;
        v25 = v136;
      }
      else
      {
        this = v132;
        do
        {
          v89 = *(_OWORD *)(v88 - 5);
          *((_QWORD *)v85 - 3) = *(v88 - 3);
          *(_OWORD *)(v85 - 40) = v89;
          *(v88 - 4) = 0;
          *(v88 - 3) = 0;
          *(v88 - 5) = 0;
          *((_OWORD *)v85 - 1) = *((_OWORD *)v88 - 1);
          v85 -= 40;
          v88 -= 5;
        }
        while (v88 != v87);
        v25 = v136;
        v88 = v137[7];
        v90 = (void **)v137[8];
        v137[7] = (uint64_t *)v85;
        v137[8] = v78;
        for (v137[9] = v86; v90 != (void **)v88; v90 -= 5)
        {
          if (*((char *)v90 - 17) < 0)
            operator delete(*(v90 - 5));
        }
      }
      a5 = v133;
      if (v88)
        operator delete(v88);
    }
    else
    {
      v77 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v75[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)v75 = v77;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v75 + 3) = *v136;
      v78 = v75 + 5;
      a5 = v133;
    }
    v137[8] = v78;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141) < 0)
      operator delete((void *)__dst);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
LABEL_38:
    v32 = v27++ == v26;
  }
  while (!v32);
  v92 = v143;
  if (v143 != (uint64_t *)&v144)
  {
    do
    {
      v93 = *((_BYTE *)v92 + 55);
      v94 = v93 & 0x7F;
      if (v93 >= 0)
        v95 = v93 & 0x7F;
      else
        v95 = v92[5];
      v96 = *((_BYTE *)v143 + 55);
      v97 = v96;
      v98 = v96 & 0x7F;
      if (v97 < 0)
        v98 = v143[5];
      if (v95 == v98)
      {
        if (v97 >= 0)
          v99 = (unsigned __int8 *)(v143 + 4);
        else
          v99 = (unsigned __int8 *)v143[4];
        if ((*((_BYTE *)v92 + 55) & 0x80) != 0)
        {
          if (!memcmp((const void *)v92[4], v99, v92[5]))
            goto LABEL_162;
        }
        else
        {
          if ((v93 & 0x7F) == 0)
            goto LABEL_162;
          v100 = (unsigned __int8 *)(v92 + 4);
          while (*v100 == *v99)
          {
            ++v100;
            ++v99;
            if (!--v94)
              goto LABEL_162;
          }
        }
      }
      v101 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v101)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v101 = 10;
        ++*((_QWORD *)a2 + 4);
      }
LABEL_162:
      v102 = *((_BYTE *)v92 + 55);
      v103 = v102 < 0;
      if (v102 >= 0)
        v104 = v92 + 4;
      else
        v104 = (const void *)v92[4];
      v105 = v102 & 0x7F;
      if (v103)
        v106 = v92[5];
      else
        v106 = v105;
      v107 = (_WORD *)*((_QWORD *)a2 + 4);
      if (v106 <= *((_QWORD *)a2 + 3) - (_QWORD)v107)
      {
        if (v106)
        {
          memcpy(v107, v104, v106);
          v107 = (_WORD *)(*((_QWORD *)a2 + 4) + v106);
          *((_QWORD *)a2 + 4) = v107;
        }
        v108 = a2;
      }
      else
      {
        v108 = llvm::raw_ostream::write(a2, (const char *)v104, v106);
        v107 = (_WORD *)*((_QWORD *)v108 + 4);
      }
      if (*((_QWORD *)v108 + 3) - (_QWORD)v107 > 1uLL)
      {
        *v107 = 2618;
        *((_QWORD *)v108 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v108, ":\n", 2uLL);
      }
      v109 = v92[7];
      v110 = v92[8];
      if (v109 != v110)
      {
        v111 = 0;
        v112 = v92[7];
        do
        {
          if (*(char *)(v112 + 23) < 0)
            v113 = *(_QWORD *)(v112 + 8);
          else
            LODWORD(v113) = *(unsigned __int8 *)(v112 + 23);
          if (v111 <= v113)
            v114 = v113;
          else
            v114 = v111;
          if (v113 < 0x18)
            v111 = v114;
          v112 += 40;
        }
        while (v112 != v110);
        do
        {
          if (*(char *)(v109 + 23) < 0)
            v115 = *(_QWORD *)(v109 + 8);
          else
            LODWORD(v115) = *(unsigned __int8 *)(v109 + 23);
          v116 = v111 - v115;
          llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
          v117 = *(_BYTE *)(v109 + 23);
          v118 = v117 < 0;
          if (v117 >= 0)
            v119 = (const char *)v109;
          else
            v119 = *(const char **)v109;
          v120 = v117 & 0x7F;
          if (v118)
            v121 = *(_QWORD *)(v109 + 8);
          else
            v121 = v120;
          llvm::raw_ostream::write(a2, v119, v121);
          if ((v116 & 0x80000000) != 0)
          {
            v122 = (_BYTE *)*((_QWORD *)a2 + 4);
            if (*((_BYTE **)a2 + 3) == v122)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *v122 = 10;
              ++*((_QWORD *)a2 + 4);
            }
            v116 = v111 + 2;
          }
          llvm::raw_ostream::indent(a2, v116 + 1);
          v123 = *(const void **)(v109 + 24);
          v124 = *(_QWORD *)(v109 + 32);
          v125 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (v124 <= *((_QWORD *)a2 + 3) - (_QWORD)v125)
          {
            if (v124)
            {
              memcpy(v125, v123, *(_QWORD *)(v109 + 32));
              v125 = (_BYTE *)(*((_QWORD *)a2 + 4) + v124);
              *((_QWORD *)a2 + 4) = v125;
            }
            v126 = a2;
          }
          else
          {
            v126 = llvm::raw_ostream::write(a2, (const char *)v123, *(_QWORD *)(v109 + 32));
            v125 = (_BYTE *)*((_QWORD *)v126 + 4);
          }
          if ((unint64_t)v125 >= *((_QWORD *)v126 + 3))
          {
            llvm::raw_ostream::write(v126, 10);
          }
          else
          {
            *((_QWORD *)v126 + 4) = v125 + 1;
            *v125 = 10;
          }
          v109 += 40;
        }
        while (v109 != v110);
      }
      v127 = (uint64_t *)v92[1];
      if (v127)
      {
        do
        {
          v128 = (uint64_t **)v127;
          v127 = (uint64_t *)*v127;
        }
        while (v127);
      }
      else
      {
        do
        {
          v128 = (uint64_t **)v92[2];
          v32 = *v128 == v92;
          v92 = (uint64_t *)v128;
        }
        while (!v32);
      }
      v92 = (uint64_t *)v128;
    }
    while (v128 != &v144);
  }
LABEL_219:
  v129 = (const char *)*((_QWORD *)a2 + 4);
  v130 = (const char *)*((_QWORD *)a2 + 2);
  if (v129 != v130)
  {
    *((_QWORD *)a2 + 4) = v130;
    llvm::raw_ostream::flush_tied_then_write(a2, v130, v129 - v130);
  }
  sub_1C5A21354((char *)v144);
}

BOOL sub_1C5A212B8(char *a1, char *a2)
{
  __darwin_ct_rune_t v4;
  __darwin_ct_rune_t v5;
  __darwin_ct_rune_t v6;
  int v7;
  char *v8;
  char *v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;

  v4 = __tolower(*a1);
  v5 = __tolower(*a2);
  v6 = v4 << 24;
  v7 = (char)v4;
  if ((char)v4 == (char)v5)
  {
    v8 = a2 + 1;
    v9 = a1 + 1;
    while (v6)
    {
      v10 = *v9++;
      v11 = __tolower(v10);
      v12 = *v8++;
      v5 = __tolower(v12);
      v6 = v11 << 24;
      v7 = (char)v11;
      if ((char)v11 != (char)v5)
        goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  if (!v6)
    return 0;
  return !(v5 << 24) || v7 < (char)v5;
}

void sub_1C5A21354(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    sub_1C5A21354(*(_QWORD *)a1);
    sub_1C5A21354(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 8);
      v4 = (void *)*((_QWORD *)a1 + 7);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 17) < 0)
            operator delete(*(void **)(v3 - 40));
          v3 -= 40;
        }
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 7);
      }
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v4);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t llvm::PassBuilder::PassBuilder(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 v8;
  int v9;
  uint64_t v10;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void **v21;
  void **v22;
  unsigned __int8 *v23;
  size_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unsigned __int8 *v27;
  size_t v28;
  unsigned __int8 *v29;
  size_t v30;
  unsigned __int8 *v31;
  size_t v32;
  unsigned __int8 *v33;
  size_t v34;
  unsigned __int8 *v35;
  size_t v36;
  unsigned __int8 *v37;
  size_t v38;
  unsigned __int8 *v39;
  size_t v40;
  unsigned __int8 *v41;
  size_t v42;
  unsigned __int8 *v43;
  size_t v44;
  unsigned __int8 *v45;
  size_t v46;
  unsigned __int8 *v47;
  size_t v48;
  unsigned __int8 *v49;
  size_t v50;
  unsigned __int8 *v51;
  size_t v52;
  unsigned __int8 *v53;
  size_t v54;
  unsigned __int8 *v55;
  size_t v56;
  unsigned __int8 *v57;
  size_t v58;
  unsigned __int8 *v59;
  size_t v60;
  unsigned __int8 *v61;
  size_t v62;
  unsigned __int8 *v63;
  size_t v64;
  unsigned __int8 *v65;
  size_t v66;
  unsigned __int8 *v67;
  size_t v68;
  unsigned __int8 *v69;
  size_t v70;
  unsigned __int8 *v71;
  size_t v72;
  unsigned __int8 *v73;
  size_t v74;
  unsigned __int8 *v75;
  size_t v76;
  unsigned __int8 *v77;
  size_t v78;
  unsigned __int8 *v79;
  size_t v80;
  unsigned __int8 *v81;
  size_t v82;
  unsigned __int8 *v83;
  size_t v84;
  unsigned __int8 *v85;
  size_t v86;
  unsigned __int8 *v87;
  size_t v88;
  unsigned __int8 *v89;
  size_t v90;
  unsigned __int8 *v91;
  size_t v92;
  unsigned __int8 *v93;
  size_t v94;
  unsigned __int8 *v95;
  size_t v96;
  unsigned __int8 *v97;
  size_t v98;
  unsigned __int8 *v99;
  size_t v100;
  unsigned __int8 *v101;
  size_t v102;
  unsigned __int8 *v103;
  size_t v104;
  unsigned __int8 *v105;
  size_t v106;
  unsigned __int8 *v107;
  size_t v108;
  unsigned __int8 *v109;
  size_t v110;
  unsigned __int8 *v111;
  size_t v112;
  unsigned __int8 *v113;
  size_t v114;
  unsigned __int8 *v115;
  size_t v116;
  unsigned __int8 *v117;
  size_t v118;
  unsigned __int8 *v119;
  size_t v120;
  unsigned __int8 *v121;
  size_t v122;
  unsigned __int8 *v123;
  size_t v124;
  unsigned __int8 *v125;
  size_t v126;
  unsigned __int8 *v127;
  size_t v128;
  unsigned __int8 *v129;
  size_t v130;
  unsigned __int8 *v131;
  size_t v132;
  unsigned __int8 *v133;
  size_t v134;
  unsigned __int8 *v135;
  size_t v136;
  unsigned __int8 *v137;
  size_t v138;
  unsigned __int8 *v139;
  size_t v140;
  unsigned __int8 *v141;
  size_t v142;
  unsigned __int8 *v143;
  size_t v144;
  unsigned __int8 *v145;
  size_t v146;
  unsigned __int8 *v147;
  size_t v148;
  unsigned __int8 *v149;
  size_t v150;
  unsigned __int8 *v151;
  size_t v152;
  unsigned __int8 *v153;
  size_t v154;
  unsigned __int8 *v155;
  size_t v156;
  unsigned __int8 *v157;
  size_t v158;
  unsigned __int8 *v159;
  size_t v160;
  unsigned __int8 *v161;
  size_t v162;
  unsigned __int8 *v163;
  size_t v164;
  unsigned __int8 *v165;
  size_t v166;
  unsigned __int8 *v167;
  size_t v168;
  unsigned __int8 *v169;
  size_t v170;
  unsigned __int8 *v171;
  size_t v172;
  unsigned __int8 *v173;
  size_t v174;
  unsigned __int8 *v175;
  size_t v176;
  unsigned __int8 *v177;
  size_t v178;
  unsigned __int8 *v179;
  size_t v180;
  unsigned __int8 *v181;
  size_t v182;
  unsigned __int8 *v183;
  size_t v184;
  unsigned __int8 *v185;
  size_t v186;
  unsigned __int8 *v187;
  size_t v188;
  unsigned __int8 *v189;
  size_t v190;
  unsigned __int8 *v191;
  size_t v192;
  unsigned __int8 *v193;
  size_t v194;
  unsigned __int8 *v195;
  size_t v196;
  unsigned __int8 *v197;
  size_t v198;
  unsigned __int8 *v199;
  size_t v200;
  unsigned __int8 *v201;
  size_t v202;
  unsigned __int8 *v203;
  size_t v204;
  unsigned __int8 *v205;
  size_t v206;
  unsigned __int8 *v207;
  size_t v208;
  unsigned __int8 *v209;
  size_t v210;
  unsigned __int8 *v211;
  size_t v212;
  unsigned __int8 *v213;
  size_t v214;
  unsigned __int8 *v215;
  size_t v216;
  unsigned __int8 *v217;
  size_t v218;
  unsigned __int8 *v219;
  size_t v220;
  unsigned __int8 *v221;
  size_t v222;
  unsigned __int8 *v223;
  size_t v224;
  unsigned __int8 *v225;
  size_t v226;
  unsigned __int8 *v227;
  size_t v228;
  unsigned __int8 *v229;
  size_t v230;
  unsigned __int8 *v231;
  size_t v232;
  unsigned __int8 *v233;
  size_t v234;
  unsigned __int8 *v235;
  size_t v236;
  unsigned __int8 *v237;
  size_t v238;
  unsigned __int8 *v239;
  size_t v240;
  unsigned __int8 *v241;
  size_t v242;
  unsigned __int8 *v243;
  size_t v244;
  unsigned __int8 *v245;
  size_t v246;
  unsigned __int8 *v247;
  size_t v248;
  unsigned __int8 *v249;
  size_t v250;
  unsigned __int8 *v251;
  size_t v252;
  unsigned __int8 *v253;
  size_t v254;
  unsigned __int8 *v255;
  size_t v256;
  unsigned __int8 *v257;
  size_t v258;
  unsigned __int8 *v259;
  size_t v260;
  unsigned __int8 *v261;
  size_t v262;
  unsigned __int8 *v263;
  size_t v264;
  unsigned __int8 *v265;
  size_t v266;
  unsigned __int8 *v267;
  size_t v268;
  unsigned __int8 *v269;
  size_t v270;
  unsigned __int8 *v271;
  size_t v272;
  unsigned __int8 *v273;
  size_t v274;
  unsigned __int8 *v275;
  size_t v276;
  unsigned __int8 *v277;
  size_t v278;
  unsigned __int8 *v279;
  size_t v280;
  unsigned __int8 *v281;
  size_t v282;
  unsigned __int8 *v283;
  size_t v284;
  unsigned __int8 *v285;
  size_t v286;
  unsigned __int8 *v287;
  size_t v288;
  unsigned __int8 *v289;
  size_t v290;
  unsigned __int8 *v291;
  size_t v292;
  unsigned __int8 *v293;
  size_t v294;
  unsigned __int8 *v295;
  size_t v296;
  unsigned __int8 *v297;
  size_t v298;
  unsigned __int8 *v299;
  size_t v300;
  unsigned __int8 *v301;
  size_t v302;
  unsigned __int8 *v303;
  size_t v304;
  unsigned __int8 *v305;
  size_t v306;
  unsigned __int8 *v307;
  size_t v308;
  unsigned __int8 *v309;
  size_t v310;
  unsigned __int8 *v311;
  size_t v312;
  unsigned __int8 *v313;
  size_t v314;
  unsigned __int8 *v315;
  size_t v316;
  unsigned __int8 *v317;
  size_t v318;
  unsigned __int8 *v319;
  size_t v320;
  unsigned __int8 *v321;
  size_t v322;
  unsigned __int8 *v323;
  size_t v324;
  unsigned __int8 *v325;
  size_t v326;
  unsigned __int8 *v327;
  size_t v328;
  unsigned __int8 *v329;
  size_t v330;
  unsigned __int8 *v331;
  size_t v332;
  unsigned __int8 *v333;
  size_t v334;
  unsigned __int8 *v335;
  size_t v336;
  unsigned __int8 *v337;
  size_t v338;
  unsigned __int8 *v339;
  size_t v340;
  unsigned __int8 *v341;
  size_t v342;
  unsigned __int8 *v343;
  size_t v344;
  unsigned __int8 *v345;
  size_t v346;
  unsigned __int8 *v347;
  size_t v348;
  unsigned __int8 *v349;
  size_t v350;
  unsigned __int8 *v351;
  size_t v352;
  unsigned __int8 *v353;
  size_t v354;
  unsigned __int8 *v355;
  size_t v356;
  unsigned __int8 *v357;
  size_t v358;
  unsigned __int8 *v359;
  size_t v360;
  unsigned __int8 *v361;
  size_t v362;
  unsigned __int8 *v363;
  size_t v364;
  unsigned __int8 *v365;
  size_t v366;
  unsigned __int8 *v367;
  size_t v368;
  unsigned __int8 *v369;
  size_t v370;
  unsigned __int8 *v371;
  size_t v372;
  unsigned __int8 *v373;
  size_t v374;
  unsigned __int8 *v375;
  size_t v376;
  unsigned __int8 *v377;
  size_t v378;
  unsigned __int8 *v379;
  size_t v380;
  unsigned __int8 *v381;
  size_t v382;
  unsigned __int8 *v383;
  size_t v384;
  unsigned __int8 *v385;
  size_t v386;
  unsigned __int8 *v387;
  size_t v388;
  unsigned __int8 *v389;
  size_t v390;
  unsigned __int8 *v391;
  size_t v392;
  unsigned __int8 *v393;
  size_t v394;
  unsigned __int8 *v395;
  size_t v396;
  unsigned __int8 *v397;
  size_t v398;
  unsigned __int8 *v399;
  size_t v400;
  unsigned __int8 *v401;
  size_t v402;
  unsigned __int8 *v403;
  size_t v404;
  unsigned __int8 *v405;
  size_t v406;
  unsigned __int8 *v407;
  size_t v408;
  unsigned __int8 *v409;
  size_t v410;
  unsigned __int8 *v411;
  size_t v412;
  unsigned __int8 *v413;
  size_t v414;
  unsigned __int8 *v415;
  size_t v416;
  unsigned __int8 *v417;
  size_t v418;
  unsigned __int8 *v419;
  size_t v420;
  unsigned __int8 *v421;
  size_t v422;
  unsigned __int8 *v423;
  size_t v424;
  unsigned __int8 *v425;
  size_t v426;
  unsigned __int8 *v427;
  size_t v428;
  unsigned __int8 *v429;
  size_t v430;
  unsigned __int8 *v431;
  size_t v432;
  unsigned __int8 *v433;
  size_t v434;
  unsigned __int8 *v435;
  size_t v436;
  unsigned __int8 *v437;
  size_t v438;
  unsigned __int8 *v439;
  size_t v440;
  unsigned __int8 *v441;
  size_t v442;
  unsigned __int8 *v443;
  size_t v444;
  unsigned __int8 *v445;
  size_t v446;
  unsigned __int8 *v447;
  size_t v448;
  unsigned __int8 *v449;
  size_t v450;
  unsigned __int8 *v451;
  size_t v452;
  unsigned __int8 *v453;
  size_t v454;
  unsigned __int8 *v455;
  size_t v456;
  unsigned __int8 *v457;
  size_t v458;
  unsigned __int8 *v459;
  size_t v460;
  unsigned __int8 *v461;
  size_t v462;
  unsigned __int8 *v463;
  size_t v464;
  unsigned __int8 *v465;
  size_t v466;
  unsigned __int8 *v467;
  size_t v468;
  unsigned __int8 *v469;
  size_t v470;
  unsigned __int8 *v471;
  size_t v472;
  unsigned __int8 *v473;
  size_t v474;
  unsigned __int8 *v475;
  size_t v476;
  unsigned __int8 *v477;
  size_t v478;
  unsigned __int8 *v479;
  size_t v480;
  unsigned __int8 *v481;
  size_t v482;
  unsigned __int8 *v483;
  size_t v484;
  unsigned __int8 *v485;
  size_t v486;
  unsigned __int8 *v487;
  size_t v488;
  unsigned __int8 *v489;
  size_t v490;
  unsigned __int8 *v491;
  size_t v492;
  unsigned __int8 *v493;
  size_t v494;
  unsigned __int8 *v495;
  size_t v496;
  unsigned __int8 *v497;
  size_t v498;
  unsigned __int8 *v499;
  size_t v500;
  unsigned __int8 *v501;
  size_t v502;
  unsigned __int8 *v503;
  size_t v504;
  unsigned __int8 *v505;
  size_t v506;
  unsigned __int8 *v507;
  size_t v508;
  unsigned __int8 *v509;
  size_t v510;
  unsigned __int8 *v511;
  size_t v512;
  unsigned __int8 *v513;
  size_t v514;
  unsigned __int8 *v515;
  size_t v516;
  unsigned __int8 *v517;
  size_t v518;
  unsigned __int8 *v519;
  size_t v520;
  unsigned __int8 *v521;
  size_t v522;
  unsigned __int8 *v523;
  size_t v524;
  unsigned __int8 *v525;
  size_t v526;
  unsigned __int8 *v527;
  size_t v528;
  unsigned __int8 *v529;
  size_t v530;
  unsigned __int8 *v531;
  size_t v532;
  unsigned __int8 *v533;
  size_t v534;
  unsigned __int8 *v535;
  size_t v536;
  unsigned __int8 *v537;
  size_t v538;
  unsigned __int8 *v539;
  size_t v540;
  unsigned __int8 *v541;
  size_t v542;
  unsigned __int8 *v543;
  size_t v544;
  unsigned __int8 *v545;
  size_t v546;
  unsigned __int8 *v547;
  size_t v548;
  unsigned __int8 *v549;
  size_t v550;
  unsigned __int8 *v551;
  size_t v552;
  unsigned __int8 *v553;
  size_t v554;
  unsigned __int8 *v555;
  size_t v556;
  unsigned __int8 *v557;
  size_t v558;
  unsigned __int8 *v559;
  size_t v560;
  unsigned __int8 *v561;
  size_t v562;
  unsigned __int8 *v563;
  size_t v564;
  unsigned __int8 *v565;
  size_t v566;
  unsigned __int8 *v567;
  size_t v568;
  unsigned __int8 *v569;
  size_t v570;
  unsigned __int8 *v571;
  size_t v572;
  unsigned __int8 *v573;
  size_t v574;
  unsigned __int8 *v575;
  size_t v576;
  unsigned __int8 *v577;
  size_t v578;
  unsigned __int8 *v579;
  size_t v580;
  unsigned __int8 *v581;
  size_t v582;
  unsigned __int8 *v583;
  size_t v584;
  unsigned __int8 *v585;
  size_t v586;
  unsigned __int8 *v587;
  size_t v588;
  unsigned __int8 *v589;
  size_t v590;
  unsigned __int8 *v591;
  size_t v592;
  unsigned __int8 *v593;
  size_t v594;
  unsigned __int8 *v595;
  size_t v596;
  unsigned __int8 *v597;
  size_t v598;
  unsigned __int8 *v599;
  size_t v600;
  unsigned __int8 *v601;
  size_t v602;
  unsigned __int8 *v603;
  size_t v604;
  unsigned __int8 *v605;
  size_t v606;
  unsigned __int8 *v607;
  size_t v608;
  unsigned __int8 *v609;
  size_t v610;
  unsigned __int8 *v611;
  size_t v612;
  void **v614;
  void **v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  void ***v620;

  *(_QWORD *)a1 = a2;
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 4);
  *(_BYTE *)(a1 + 32) = 0;
  v10 = a1 + 32;
  *(_DWORD *)(v10 - 8) = v9;
  *(_OWORD *)(v10 - 24) = v8;
  *(_BYTE *)(v10 + 96) = 0;
  if (*((_BYTE *)a4 + 96))
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_1C47EBC30((_BYTE *)v10, *(void **)a4, *((_QWORD *)a4 + 1));
    }
    else
    {
      v12 = *a4;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)a4 + 2);
      *(_OWORD *)v10 = v12;
    }
    v13 = (_BYTE *)(a1 + 56);
    if (*((char *)a4 + 47) < 0)
    {
      sub_1C47EBC30(v13, *((void **)a4 + 3), *((_QWORD *)a4 + 4));
    }
    else
    {
      v14 = *(__int128 *)((char *)a4 + 24);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 5);
      *(_OWORD *)v13 = v14;
    }
    v15 = (_BYTE *)(a1 + 80);
    if (*((char *)a4 + 71) < 0)
    {
      sub_1C47EBC30(v15, *((void **)a4 + 6), *((_QWORD *)a4 + 7));
    }
    else
    {
      v16 = a4[3];
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a4 + 8);
      *(_OWORD *)v15 = v16;
    }
    v17 = *((_QWORD *)a4 + 9);
    *(_WORD *)(a1 + 112) = *((_WORD *)a4 + 40);
    *(_QWORD *)(a1 + 104) = v17;
    v18 = *((_QWORD *)a4 + 11);
    *(_QWORD *)(a1 + 120) = v18;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_QWORD *)(a1 + 136) = a5;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x200000000;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x200000000;
  *(_QWORD *)(a1 + 304) = a1 + 320;
  *(_QWORD *)(a1 + 312) = 0x200000000;
  *(_QWORD *)(a1 + 384) = a1 + 400;
  *(_QWORD *)(a1 + 392) = 0x200000000;
  *(_QWORD *)(a1 + 464) = a1 + 480;
  *(_QWORD *)(a1 + 472) = 0x200000000;
  *(_QWORD *)(a1 + 544) = a1 + 560;
  *(_QWORD *)(a1 + 552) = 0x200000000;
  *(_QWORD *)(a1 + 624) = a1 + 640;
  *(_QWORD *)(a1 + 632) = 0x200000000;
  *(_QWORD *)(a1 + 704) = a1 + 720;
  *(_QWORD *)(a1 + 712) = 0x200000000;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 0x200000000;
  *(_QWORD *)(a1 + 864) = a1 + 880;
  *(_QWORD *)(a1 + 872) = 0x200000000;
  *(_QWORD *)(a1 + 944) = a1 + 960;
  *(_QWORD *)(a1 + 952) = 0x200000000;
  *(_QWORD *)(a1 + 1024) = a1 + 1040;
  *(_QWORD *)(a1 + 1032) = 0x200000000;
  *(_QWORD *)(a1 + 1104) = a1 + 1120;
  *(_QWORD *)(a1 + 1112) = 0x200000000;
  *(_QWORD *)(a1 + 1184) = a1 + 1200;
  *(_QWORD *)(a1 + 1192) = 0x200000000;
  *(_QWORD *)(a1 + 1264) = a1 + 1280;
  *(_QWORD *)(a1 + 1272) = 0x200000000;
  *(_QWORD *)(a1 + 1344) = a1 + 1360;
  *(_QWORD *)(a1 + 1352) = 0x200000000;
  *(_QWORD *)(a1 + 1424) = a1 + 1440;
  *(_QWORD *)(a1 + 1432) = 0x200000000;
  *(_QWORD *)(a1 + 1504) = a1 + 1520;
  *(_QWORD *)(a1 + 1512) = 0x200000000;
  *(_QWORD *)(a1 + 1584) = a1 + 1600;
  *(_QWORD *)(a1 + 1592) = 0x200000000;
  *(_QWORD *)(a1 + 1664) = a1 + 1680;
  *(_QWORD *)(a1 + 1672) = 0x200000000;
  *(_QWORD *)(a1 + 1744) = a1 + 1760;
  *(_QWORD *)(a1 + 1752) = 0x200000000;
  *(_QWORD *)(a1 + 1824) = a1 + 1840;
  *(_QWORD *)(a1 + 1832) = 0x200000000;
  *(_QWORD *)(a1 + 1904) = a1 + 1920;
  *(_QWORD *)(a1 + 1912) = 0x200000000;
  *(_BYTE *)(a1 + 1984) = 0;
  if (a2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a1);
  if (a5)
  {
    if (byte_1ED834B48)
    {
LABEL_22:
      v23 = (unsigned __int8 *)sub_1C5A2484C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v23, v24, "callgraph", 9uLL);
      v25 = (unsigned __int8 *)sub_1C5A24904();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v25, v26, "function-groups", 0xFuLL);
      v27 = (unsigned __int8 *)sub_1C5A249BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v27, v28, "lcg", 3uLL);
      v29 = (unsigned __int8 *)sub_1C5A24A74();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v29, v30, "module-summary", 0xEuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpModuleAnalysis", 0x12uLL, "no-op-module", 0xCuLL);
      v31 = (unsigned __int8 *)sub_1C5A24B2C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v31, v32, "profile-summary", 0xFuLL);
      v33 = (unsigned __int8 *)sub_1C5A24BE4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v33, v34, "stack-safety", 0xCuLL);
      v35 = (unsigned __int8 *)sub_1C5A24C9C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v35, v36, "verify", 6uLL);
      v37 = (unsigned __int8 *)sub_1C54E7400();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v37, v38, "pass-instrumentation", 0x14uLL);
      v39 = (unsigned __int8 *)sub_1C5A24D54();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v39, v40, "asan-globals-md", 0xFuLL);
      v41 = (unsigned __int8 *)sub_1C5A24E0C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v41, v42, "inline-advisor", 0xEuLL);
      v43 = (unsigned __int8 *)sub_1C5A24EC4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v43, v44, "ir-similarity", 0xDuLL);
      v45 = (unsigned __int8 *)sub_1C5A24F7C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v45, v46, "globals-aa", 0xAuLL);
      v47 = (unsigned __int8 *)sub_1C5A25034();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v47, v48, "always-inline", 0xDuLL);
      v49 = (unsigned __int8 *)sub_1C5A250EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v49, v50, "attributor", 0xAuLL);
      v51 = (unsigned __int8 *)sub_1C5A251A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v51, v52, "annotation2metadata", 0x13uLL);
      v53 = (unsigned __int8 *)sub_1C5A2525C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v53, v54, "openmp-opt", 0xAuLL);
      v55 = (unsigned __int8 *)sub_1C5A25314();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v55, v56, "called-value-propagation", 0x18uLL);
      v57 = (unsigned __int8 *)sub_1C5A253CC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v57, v58, "canonicalize-aliases", 0x14uLL);
      v59 = (unsigned __int8 *)sub_1C5A25484();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v59, v60, "cg-profile", 0xAuLL);
      v61 = (unsigned __int8 *)sub_1C5A2553C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v61, v62, "check-debugify", 0xEuLL);
      v63 = (unsigned __int8 *)sub_1C5A255F4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v63, v64, "constmerge", 0xAuLL);
      v65 = (unsigned __int8 *)sub_1C5A256AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v65, v66, "coro-early", 0xAuLL);
      v67 = (unsigned __int8 *)sub_1C5A25764();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v67, v68, "cross-dso-cfi", 0xDuLL);
      v69 = (unsigned __int8 *)sub_1C5A2581C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v69, v70, "deadargelim", 0xBuLL);
      v71 = (unsigned __int8 *)sub_1C5A258D4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v71, v72, "debugify", 8uLL);
      v73 = (unsigned __int8 *)sub_1C5A2598C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v73, v74, "dot-callgraph", 0xDuLL);
      v75 = (unsigned __int8 *)sub_1C5A25A44();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v75, v76, "elim-avail-extern", 0x11uLL);
      v77 = (unsigned __int8 *)sub_1C5A25AFC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v77, v78, "extract-blocks", 0xEuLL);
      v79 = (unsigned __int8 *)sub_1C5A25BB4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v79, v80, "forceattrs", 0xAuLL);
      v81 = (unsigned __int8 *)sub_1C5A25C6C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v81, v82, "function-import", 0xFuLL);
      v83 = (unsigned __int8 *)sub_1C5A25D24();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v83, v84, "function-specialization", 0x17uLL);
      v85 = (unsigned __int8 *)sub_1C5A25DDC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v85, v86, "globaldce", 9uLL);
      v87 = (unsigned __int8 *)sub_1C5A25E94();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v87, v88, "globalopt", 9uLL);
      v89 = (unsigned __int8 *)sub_1C5A25F4C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v89, v90, "globalsplit", 0xBuLL);
      v91 = (unsigned __int8 *)sub_1C5A26004();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v91, v92, "hotcoldsplit", 0xCuLL);
      v93 = (unsigned __int8 *)sub_1C5A260BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v93, v94, "inferattrs", 0xAuLL);
      v95 = (unsigned __int8 *)sub_1C5A26174();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v95, v96, "inliner-wrapper", 0xFuLL);
      v97 = (unsigned __int8 *)sub_1C5A2622C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v97, v98, "print<inline-advisor>", 0x15uLL);
      v99 = (unsigned __int8 *)sub_1C5A26174();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v99, v100, "inliner-wrapper-no-mandatory-first", 0x22uLL);
      v101 = (unsigned __int8 *)sub_1C5A262E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v101, v102, "insert-gcov-profiling", 0x15uLL);
      v103 = (unsigned __int8 *)sub_1C5A2639C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v103, v104, "instrorderfile", 0xEuLL);
      v105 = (unsigned __int8 *)sub_1C5A26454();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v105, v106, "instrprof", 9uLL);
      v107 = (unsigned __int8 *)sub_1C5A2650C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v107, v108, "internalize", 0xBuLL);
      v109 = (unsigned __int8 *)sub_1C5A265C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v109, v110, "invalidate<all>", 0xFuLL);
      v111 = (unsigned __int8 *)sub_1C5A2667C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v111, v112, "ipsccp", 6uLL);
      v113 = (unsigned __int8 *)sub_1C5A26734();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v113, v114, "iroutliner", 0xAuLL);
      v115 = (unsigned __int8 *)sub_1C5A267EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v115, v116, "print-ir-similarity", 0x13uLL);
      v117 = (unsigned __int8 *)sub_1C5A268A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v117, v118, "lower-global-dtors", 0x12uLL);
      v119 = (unsigned __int8 *)sub_1C5A2695C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v119, v120, "lowertypetests", 0xEuLL);
      v121 = (unsigned __int8 *)sub_1C5A26A14();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v121, v122, "metarenamer", 0xBuLL);
      v123 = (unsigned __int8 *)sub_1C5A26ACC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v123, v124, "mergefunc", 9uLL);
      v125 = (unsigned __int8 *)sub_1C5A26B84();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v125, v126, "name-anon-globals", 0x11uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpModulePass", 0xEuLL, "no-op-module", 0xCuLL);
      v127 = (unsigned __int8 *)sub_1C5A26C3C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v127, v128, "objc-arc-apelim", 0xFuLL);
      v129 = (unsigned __int8 *)sub_1C5A26CF4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v129, v130, "partial-inliner", 0xFuLL);
      v131 = (unsigned __int8 *)sub_1C5A26DAC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v131, v132, "pgo-icall-prom", 0xEuLL);
      v133 = (unsigned __int8 *)sub_1C5A26E64();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v133, v134, "pgo-instr-gen", 0xDuLL);
      v135 = (unsigned __int8 *)sub_1C5A26F1C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v135, v136, "pgo-instr-use", 0xDuLL);
      v137 = (unsigned __int8 *)sub_1C5A26FD4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v137, v138, "print-function-groups", 0x15uLL);
      v139 = (unsigned __int8 *)sub_1C5A2708C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v139, v140, "print-profile-summary", 0x15uLL);
      v141 = (unsigned __int8 *)sub_1C5A27144();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v141, v142, "print-callgraph", 0xFuLL);
      v143 = (unsigned __int8 *)sub_1C5A271FC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v143, v144, "print", 5uLL);
      v145 = (unsigned __int8 *)sub_1C5A272B4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v145, v146, "print-lcg", 9uLL);
      v147 = (unsigned __int8 *)sub_1C5A2736C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v147, v148, "print-lcg-dot", 0xDuLL);
      v149 = (unsigned __int8 *)sub_1C5A27424();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v149, v150, "print-must-be-executed-contexts", 0x1FuLL);
      v151 = (unsigned __int8 *)sub_1C5A274DC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v151, v152, "print-stack-safety", 0x12uLL);
      v153 = (unsigned __int8 *)sub_1C5A27594();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v153, v154, "print<module-debuginfo>", 0x17uLL);
      v155 = (unsigned __int8 *)sub_1C5A2764C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v155, v156, "recompute-globalsaa", 0x13uLL);
      v157 = (unsigned __int8 *)sub_1C5A27704();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v157, v158, "rel-lookup-table-converter", 0x1AuLL);
      v159 = (unsigned __int8 *)sub_1C5A277BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v159, v160, "rewrite-statepoints-for-gc", 0x1AuLL);
      v161 = (unsigned __int8 *)sub_1C5A27874();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v161, v162, "rewrite-symbols", 0xFuLL);
      v163 = (unsigned __int8 *)sub_1C5A2792C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v163, v164, "rpo-function-attrs", 0x12uLL);
      v165 = (unsigned __int8 *)sub_1C5A279E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v165, v166, "sample-profile", 0xEuLL);
      v167 = (unsigned __int8 *)sub_1C5A26174();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v167, v168, "scc-oz-module-inliner", 0x15uLL);
      v169 = (unsigned __int8 *)sub_1C5A27A9C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v169, v170, "strip", 5uLL);
      v171 = (unsigned __int8 *)sub_1C5A27B54();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v171, v172, "strip-dead-debug-info", 0x15uLL);
      v173 = (unsigned __int8 *)sub_1C5A27C0C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v173, v174, "pseudo-probe", 0xCuLL);
      v175 = (unsigned __int8 *)sub_1C5A27CC4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v175, v176, "soft-ptrauth", 0xCuLL);
      v177 = (unsigned __int8 *)sub_1C5A27D7C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v177, v178, "strip-dead-prototypes", 0x15uLL);
      v179 = (unsigned __int8 *)sub_1C5A27E34();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v179, v180, "strip-debug-declare", 0x13uLL);
      v181 = (unsigned __int8 *)sub_1C5A27EEC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v181, v182, "strip-nondebug", 0xEuLL);
      v183 = (unsigned __int8 *)sub_1C5A27FA4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v183, v184, "strip-nonlinetable-debuginfo", 0x1CuLL);
      v185 = (unsigned __int8 *)sub_1C5A2805C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v185, v186, "synthetic-counts-propagation", 0x1CuLL);
      v187 = (unsigned __int8 *)sub_1C58F6E84();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v187, v188, "verify", 6uLL);
      v189 = (unsigned __int8 *)sub_1C5A28114();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v189, v190, "view-callgraph", 0xEuLL);
      v191 = (unsigned __int8 *)sub_1C5A281CC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v191, v192, "wholeprogramdevirt", 0x12uLL);
      v193 = (unsigned __int8 *)sub_1C5A28284();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v193, v194, "dfsan", 5uLL);
      v195 = (unsigned __int8 *)sub_1C5A2833C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v195, v196, "msan-module", 0xBuLL);
      v197 = (unsigned __int8 *)sub_1C5A283F4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v197, v198, "module-inline", 0xDuLL);
      v199 = (unsigned __int8 *)sub_1C5A284AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v199, v200, "tsan-module", 0xBuLL);
      v201 = (unsigned __int8 *)sub_1C5A28564();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v201, v202, "sancov-module", 0xDuLL);
      v203 = (unsigned __int8 *)sub_1C5A2861C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v203, v204, "memprof-module", 0xEuLL);
      v205 = (unsigned __int8 *)sub_1C5A286D4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v205, v206, "poison-checking", 0xFuLL);
      v207 = (unsigned __int8 *)sub_1C5A2878C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v207, v208, "pseudo-probe-update", 0x13uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopExtractorPass", 0x11uLL, "loop-extract", 0xCuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "HWAddressSanitizerPass", 0x16uLL, "hwasan", 6uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "ModuleAddressSanitizerPass", 0x1AuLL, "asan-module", 0xBuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpCGSCCAnalysis", 0x11uLL, "no-op-cgscc", 0xBuLL);
      v209 = (unsigned __int8 *)sub_1C5A28844();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v209, v210, "fam-proxy", 9uLL);
      v211 = (unsigned __int8 *)sub_1C54E7400();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v211, v212, "pass-instrumentation", 0x14uLL);
      v213 = (unsigned __int8 *)sub_1C5A288FC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v213, v214, "argpromotion", 0xCuLL);
      v215 = (unsigned __int8 *)sub_1C5A265C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v215, v216, "invalidate<all>", 0xFuLL);
      v217 = (unsigned __int8 *)sub_1C5A289B4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v217, v218, "function-attrs", 0xEuLL);
      v219 = (unsigned __int8 *)sub_1C5A28A6C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v219, v220, "attributor-cgscc", 0x10uLL);
      v221 = (unsigned __int8 *)sub_1C5A28B24();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v221, v222, "openmp-opt-cgscc", 0x10uLL);
      v223 = (unsigned __int8 *)sub_1C5A28BDC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v223, v224, "coro-split", 0xAuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpCGSCCPass", 0xDuLL, "no-op-cgscc", 0xBuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "InlinerPass", 0xBuLL, "inline", 6uLL);
      v225 = (unsigned __int8 *)sub_1C58F6DCC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v225, v226, "aa", 2uLL);
      v227 = (unsigned __int8 *)sub_1C54E6CE4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v227, v228, "assumptions", 0xBuLL);
      v229 = (unsigned __int8 *)sub_1C5A28C94();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v229, v230, "block-freq", 0xAuLL);
      v231 = (unsigned __int8 *)sub_1C5A28D4C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v231, v232, "branch-prob", 0xBuLL);
      v233 = (unsigned __int8 *)sub_1C5A28E04();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v233, v234, "cycles", 6uLL);
      v235 = (unsigned __int8 *)sub_1C54E6F60();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v235, v236, "domtree", 7uLL);
      v237 = (unsigned __int8 *)sub_1C5A28EBC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v237, v238, "postdomtree", 0xBuLL);
      v239 = (unsigned __int8 *)sub_1C5A28F74();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v239, v240, "demanded-bits", 0xDuLL);
      v241 = (unsigned __int8 *)sub_1C5A2902C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v241, v242, "domfrontier", 0xBuLL);
      v243 = (unsigned __int8 *)sub_1C5A290E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v243, v244, "func-properties", 0xFuLL);
      v245 = (unsigned __int8 *)sub_1C54E7120();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v245, v246, "loops", 5uLL);
      v247 = (unsigned __int8 *)sub_1C5A2919C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v247, v248, "lazy-value-info", 0xFuLL);
      v249 = (unsigned __int8 *)sub_1C5A29254();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v249, v250, "da", 2uLL);
      v251 = (unsigned __int8 *)sub_1C5A2930C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v251, v252, "inliner-size-estimator", 0x16uLL);
      v253 = (unsigned __int8 *)sub_1C5A293C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v253, v254, "memdep", 6uLL);
      v255 = (unsigned __int8 *)sub_1C5A2947C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v255, v256, "memoryssa", 9uLL);
      v257 = (unsigned __int8 *)sub_1C5A29534();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v257, v258, "phi-values", 0xAuLL);
      v259 = (unsigned __int8 *)sub_1C5A295EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v259, v260, "regions", 7uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpFunctionAnalysis", 0x14uLL, "no-op-function", 0xEuLL);
      v261 = (unsigned __int8 *)sub_1C5A296A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v261, v262, "opt-remark-emit", 0xFuLL);
      v263 = (unsigned __int8 *)sub_1C54E72E0();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v263, v264, "scalar-evolution", 0x10uLL);
      v265 = (unsigned __int8 *)sub_1C5A2975C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v265, v266, "should-not-run-function-passes", 0x1EuLL);
      v267 = (unsigned __int8 *)sub_1C5A29814();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v267, v268, "should-run-extra-vector-passes", 0x1EuLL);
      v269 = (unsigned __int8 *)sub_1C5A298CC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v269, v270, "stack-safety-local", 0x12uLL);
      v271 = (unsigned __int8 *)sub_1C54E6960();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v271, v272, "targetlibinfo", 0xDuLL);
      v273 = (unsigned __int8 *)sub_1C54E7600();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v273, v274, "targetir", 8uLL);
      v275 = (unsigned __int8 *)sub_1C5A24C9C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v275, v276, "verify", 6uLL);
      v277 = (unsigned __int8 *)sub_1C54E7400();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v277, v278, "pass-instrumentation", 0x14uLL);
      v279 = (unsigned __int8 *)sub_1C5A29984();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v279, v280, "divergence", 0xAuLL);
      v281 = (unsigned __int8 *)sub_1C5A29A3C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v281, v282, "gpu-function-analysis", 0x15uLL);
      v283 = (unsigned __int8 *)sub_1C5A29AF4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v283, v284, "basic-aa", 8uLL);
      v285 = (unsigned __int8 *)sub_1C5A29BAC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v285, v286, "cfl-anders-aa", 0xDuLL);
      v287 = (unsigned __int8 *)sub_1C5A29C64();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v287, v288, "cfl-steens-aa", 0xDuLL);
      v289 = (unsigned __int8 *)sub_1C5A29D1C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v289, v290, "objc-arc-aa", 0xBuLL);
      v291 = (unsigned __int8 *)sub_1C5A29DD4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v291, v292, "scev-aa", 7uLL);
      v293 = (unsigned __int8 *)sub_1C5A29E8C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v293, v294, "scoped-noalias-aa", 0x11uLL);
      v295 = (unsigned __int8 *)sub_1C5A29F44();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v295, v296, "tbaa", 4uLL);
      v297 = (unsigned __int8 *)sub_1C5A29FFC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v297, v298, "aa-eval", 7uLL);
      v299 = (unsigned __int8 *)sub_1C5A2A0B4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v299, v300, "adce", 4uLL);
      v301 = (unsigned __int8 *)sub_1C5A2A16C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v301, v302, "add-discriminators", 0x12uLL);
      v303 = (unsigned __int8 *)sub_1C5A2A224();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v303, v304, "aggressive-instcombine", 0x16uLL);
      v305 = (unsigned __int8 *)sub_1C5A2A2DC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v305, v306, "assume-builder", 0xEuLL);
      v307 = (unsigned __int8 *)sub_1C5A2A394();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v307, v308, "assume-simplify", 0xFuLL);
      v309 = (unsigned __int8 *)sub_1C5A2A44C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v309, v310, "alignment-from-assumptions", 0x1AuLL);
      v311 = (unsigned __int8 *)sub_1C5A2A504();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v311, v312, "annotation-remarks", 0x12uLL);
      v313 = (unsigned __int8 *)sub_1C5A2A5BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v313, v314, "bdce", 4uLL);
      v315 = (unsigned __int8 *)sub_1C5A2A674();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v315, v316, "bounds-checking", 0xFuLL);
      v317 = (unsigned __int8 *)sub_1C5A2A72C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v317, v318, "break-crit-edges", 0x10uLL);
      v319 = (unsigned __int8 *)sub_1C5A2A7E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v319, v320, "callsite-splitting", 0x12uLL);
      v321 = (unsigned __int8 *)sub_1C5A2A89C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v321, v322, "consthoist", 0xAuLL);
      v323 = (unsigned __int8 *)sub_1C5A2A954();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v323, v324, "constraint-elimination", 0x16uLL);
      v325 = (unsigned __int8 *)sub_1C5A2AA0C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v325, v326, "chr", 3uLL);
      v327 = (unsigned __int8 *)sub_1C5A2AAC4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v327, v328, "coro-elide", 0xAuLL);
      v329 = (unsigned __int8 *)sub_1C5A2AB7C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v329, v330, "coro-cleanup", 0xCuLL);
      v331 = (unsigned __int8 *)sub_1C5A2AC34();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v331, v332, "correlated-propagation", 0x16uLL);
      v333 = (unsigned __int8 *)sub_1C5A2ACEC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v333, v334, "dce", 3uLL);
      v335 = (unsigned __int8 *)sub_1C5A2ADA4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v335, v336, "dfa-jump-threading", 0x12uLL);
      v337 = (unsigned __int8 *)sub_1C5A2AE5C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v337, v338, "div-rem-pairs", 0xDuLL);
      v339 = (unsigned __int8 *)sub_1C5A2AF14();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v339, v340, "dse", 3uLL);
      v341 = (unsigned __int8 *)sub_1C5A2AFCC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v341, v342, "dot-cfg", 7uLL);
      v343 = (unsigned __int8 *)sub_1C5A2B084();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v343, v344, "dot-cfg-only", 0xCuLL);
      v345 = (unsigned __int8 *)sub_1C5A2B13C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v345, v346, "dot-dom", 7uLL);
      v347 = (unsigned __int8 *)sub_1C5A2B1F4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v347, v348, "dot-dom-only", 0xCuLL);
      v349 = (unsigned __int8 *)sub_1C5A2B2AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v349, v350, "fix-irreducible", 0xFuLL);
      v351 = (unsigned __int8 *)sub_1C5A2B364();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v351, v352, "flattencfg", 0xAuLL);
      v353 = (unsigned __int8 *)sub_1C5A2B41C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v353, v354, "make-guards-explicit", 0x14uLL);
      v355 = (unsigned __int8 *)sub_1C5A2B4D4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v355, v356, "gvn-hoist", 9uLL);
      v357 = (unsigned __int8 *)sub_1C5A2B58C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v357, v358, "gvn-sink", 8uLL);
      v359 = (unsigned __int8 *)sub_1C5A2B644();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v359, v360, "helloworld", 0xAuLL);
      v361 = (unsigned __int8 *)sub_1C5A2B6FC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v361, v362, "infer-address-spaces", 0x14uLL);
      v363 = (unsigned __int8 *)sub_1C5A2B7B4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v363, v364, "instcombine", 0xBuLL);
      v365 = (unsigned __int8 *)sub_1C5A2B86C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v365, v366, "instcount", 9uLL);
      v367 = (unsigned __int8 *)sub_1C5A2B924();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v367, v368, "instsimplify", 0xCuLL);
      v369 = (unsigned __int8 *)sub_1C5A265C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v369, v370, "invalidate<all>", 0xFuLL);
      v371 = (unsigned __int8 *)sub_1C5A2B9DC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v371, v372, "irce", 4uLL);
      v373 = (unsigned __int8 *)sub_1C5A2BA94();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v373, v374, "float2int", 9uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpFunctionPass", 0x10uLL, "no-op-function", 0xEuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LibCallsShrinkWrapPass", 0x16uLL, "libcalls-shrinkwrap", 0x13uLL);
      v375 = (unsigned __int8 *)sub_1C5A2BB4C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v375, v376, "lint", 4uLL);
      v377 = (unsigned __int8 *)sub_1C5A2BC04();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v377, v378, "inject-tli-mappings", 0x13uLL);
      v379 = (unsigned __int8 *)sub_1C5A2BCBC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v379, v380, "instnamer", 9uLL);
      v381 = (unsigned __int8 *)sub_1C5A2BD74();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v381, v382, "loweratomic", 0xBuLL);
      v383 = (unsigned __int8 *)sub_1C5A2BE2C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v383, v384, "lower-expect", 0xCuLL);
      v385 = (unsigned __int8 *)sub_1C5A2BEE4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v385, v386, "lower-guard-intrinsic", 0x15uLL);
      v387 = (unsigned __int8 *)sub_1C5A2BF9C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v387, v388, "lower-constant-intrinsics", 0x19uLL);
      v389 = (unsigned __int8 *)sub_1C5A2C054();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v389, v390, "lower-widenable-condition", 0x19uLL);
      v391 = (unsigned __int8 *)sub_1C5A2C10C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v391, v392, "guard-widening", 0xEuLL);
      v393 = (unsigned __int8 *)sub_1C5A2C1C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v393, v394, "load-store-vectorizer", 0x15uLL);
      v395 = (unsigned __int8 *)sub_1C5A2C27C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v395, v396, "loop-simplify", 0xDuLL);
      v397 = (unsigned __int8 *)sub_1C5A2C334();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v397, v398, "loop-sink", 9uLL);
      v399 = (unsigned __int8 *)sub_1C5A2C3EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v399, v400, "lowerinvoke", 0xBuLL);
      v401 = (unsigned __int8 *)sub_1C5A2C4A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v401, v402, "lowerswitch", 0xBuLL);
      v403 = (unsigned __int8 *)sub_1C5A2C55C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v403, v404, "mem2reg", 7uLL);
      v405 = (unsigned __int8 *)sub_1C5A2C614();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v405, v406, "memcpyopt", 9uLL);
      v407 = (unsigned __int8 *)sub_1C5A2C6CC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v407, v408, "mergeicmps", 0xAuLL);
      v409 = (unsigned __int8 *)sub_1C5A2C784();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v409, v410, "mergereturn", 0xBuLL);
      v411 = (unsigned __int8 *)sub_1C5A2C83C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v411, v412, "nary-reassociate", 0x10uLL);
      v413 = (unsigned __int8 *)sub_1C5A2C8F4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v413, v414, "newgvn", 6uLL);
      v415 = (unsigned __int8 *)sub_1C5A2C9AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v415, v416, "jump-threading", 0xEuLL);
      v417 = (unsigned __int8 *)sub_1C5A2CA64();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v417, v418, "partially-inline-libcalls", 0x19uLL);
      v419 = (unsigned __int8 *)sub_1C5A2CB1C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v419, v420, "lcssa", 5uLL);
      v421 = (unsigned __int8 *)sub_1C5A2CBD4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v421, v422, "loop-data-prefetch", 0x12uLL);
      v423 = (unsigned __int8 *)sub_1C5A2CC8C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v423, v424, "loop-load-elim", 0xEuLL);
      v425 = (unsigned __int8 *)sub_1C5A2CD44();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v425, v426, "loop-fusion", 0xBuLL);
      v427 = (unsigned __int8 *)sub_1C5A2CDFC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v427, v428, "loop-distribute", 0xFuLL);
      v429 = (unsigned __int8 *)sub_1C5A2CEB4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v429, v430, "loop-versioning", 0xFuLL);
      v431 = (unsigned __int8 *)sub_1C5A2CF6C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v431, v432, "objc-arc", 8uLL);
      v433 = (unsigned __int8 *)sub_1C5A2D024();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v433, v434, "objc-arc-contract", 0x11uLL);
      v435 = (unsigned __int8 *)sub_1C5A2D0DC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v435, v436, "objc-arc-expand", 0xFuLL);
      v437 = (unsigned __int8 *)sub_1C5A2D194();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v437, v438, "pgo-memop-opt", 0xDuLL);
      v439 = (unsigned __int8 *)sub_1C5A2D24C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v439, v440, "print", 5uLL);
      v441 = (unsigned __int8 *)sub_1C5A2D304();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v441, v442, "print<assumptions>", 0x12uLL);
      v443 = (unsigned __int8 *)sub_1C5A2D3BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v443, v444, "print<block-freq>", 0x11uLL);
      v445 = (unsigned __int8 *)sub_1C5A2D474();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v445, v446, "print<branch-prob>", 0x12uLL);
      v447 = (unsigned __int8 *)sub_1C5A2D52C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v447, v448, "print<cost-model>", 0x11uLL);
      v449 = (unsigned __int8 *)sub_1C5A2D5E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v449, v450, "print<cycles>", 0xDuLL);
      v451 = (unsigned __int8 *)sub_1C5A2D69C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v451, v452, "print<da>", 9uLL);
      v453 = (unsigned __int8 *)sub_1C5A2D754();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v453, v454, "print<divergence>", 0x11uLL);
      v455 = (unsigned __int8 *)sub_1C5A2D80C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v455, v456, "print<domtree>", 0xEuLL);
      v457 = (unsigned __int8 *)sub_1C5A2D8C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v457, v458, "print<postdomtree>", 0x12uLL);
      v459 = (unsigned __int8 *)sub_1C5A2D97C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v459, v460, "print<delinearization>", 0x16uLL);
      v461 = (unsigned __int8 *)sub_1C5A2DA34();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v461, v462, "print<demanded-bits>", 0x14uLL);
      v463 = (unsigned __int8 *)sub_1C5A2DAEC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v463, v464, "print<domfrontier>", 0x12uLL);
      v465 = (unsigned __int8 *)sub_1C5A2DBA4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v465, v466, "print<func-properties>", 0x16uLL);
      v467 = (unsigned __int8 *)sub_1C5A2DC5C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v467, v468, "print<inline-cost>", 0x12uLL);
      v469 = (unsigned __int8 *)sub_1C5A2DD14();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v469, v470, "print<inliner-size-estimator>", 0x1DuLL);
      v471 = (unsigned __int8 *)sub_1C5A2DDCC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v471, v472, "print<gpu-function-analysis>", 0x1CuLL);
      v473 = (unsigned __int8 *)sub_1C5A2DE84();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v473, v474, "print<loops>", 0xCuLL);
      v475 = (unsigned __int8 *)sub_1C5A2DF3C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v475, v476, "print<memoryssa>", 0x10uLL);
      v477 = (unsigned __int8 *)sub_1C5A2DFF4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v477, v478, "print<memoryssa-walker>", 0x17uLL);
      v479 = (unsigned __int8 *)sub_1C5A2E0AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v479, v480, "print<phi-values>", 0x11uLL);
      v481 = (unsigned __int8 *)sub_1C5A2E164();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v481, v482, "print<regions>", 0xEuLL);
      v483 = (unsigned __int8 *)sub_1C5A2E21C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v483, v484, "print<scalar-evolution>", 0x17uLL);
      v485 = (unsigned __int8 *)sub_1C5A2E2D4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v485, v486, "print<stack-safety-local>", 0x19uLL);
      v487 = (unsigned __int8 *)sub_1C5A2E38C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v487, v488, "print-alias-sets", 0x10uLL);
      v489 = (unsigned __int8 *)sub_1C5A2E444();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v489, v490, "print-predicateinfo", 0x13uLL);
      v491 = (unsigned __int8 *)sub_1C5A2E4FC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v491, v492, "print-mustexecute", 0x11uLL);
      v493 = (unsigned __int8 *)sub_1C5A2E5B4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v493, v494, "print-memderefs", 0xFuLL);
      v495 = (unsigned __int8 *)sub_1C5A2E66C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v495, v496, "reassociate", 0xBuLL);
      v497 = (unsigned __int8 *)sub_1C5A2E724();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v497, v498, "redundant-dbg-inst-elim", 0x17uLL);
      v499 = (unsigned __int8 *)sub_1C5A2E7DC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v499, v500, "reg2mem", 7uLL);
      v501 = (unsigned __int8 *)sub_1C5A2E894();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v501, v502, "scalarize-masked-mem-intrin", 0x1BuLL);
      v503 = (unsigned __int8 *)sub_1C5A2E94C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v503, v504, "scalarizer", 0xAuLL);
      v505 = (unsigned __int8 *)sub_1C5A2EA04();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v505, v506, "separate-const-offset-from-gep", 0x1EuLL);
      v507 = (unsigned __int8 *)sub_1C5A2EABC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v507, v508, "sccp", 4uLL);
      v509 = (unsigned __int8 *)sub_1C5A2EB74();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v509, v510, "sink", 4uLL);
      v511 = (unsigned __int8 *)sub_1C5A2EC2C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v511, v512, "slp-vectorizer", 0xEuLL);
      v513 = (unsigned __int8 *)sub_1C5A2ECE4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v513, v514, "slsr", 4uLL);
      v515 = (unsigned __int8 *)sub_1C5A2ED9C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v515, v516, "speculative-execution", 0x15uLL);
      v517 = (unsigned __int8 *)sub_1C5A2EE54();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v517, v518, "sroa", 4uLL);
      v519 = (unsigned __int8 *)sub_1C5A2EF0C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v519, v520, "strip-gc-relocates", 0x12uLL);
      v521 = (unsigned __int8 *)sub_1C5A2EFC4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v521, v522, "structurizecfg", 0xEuLL);
      v523 = (unsigned __int8 *)sub_1C5A2F07C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v523, v524, "tailcallelim", 0xCuLL);
      v525 = (unsigned __int8 *)sub_1C5A2F134();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v525, v526, "unify-loop-exits", 0x10uLL);
      v527 = (unsigned __int8 *)sub_1C5A2F1EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v527, v528, "vector-combine", 0xEuLL);
      v529 = (unsigned __int8 *)sub_1C58F6E84();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v529, v530, "verify", 6uLL);
      v531 = (unsigned __int8 *)sub_1C5A2F2A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v531, v532, "verify<domtree>", 0xFuLL);
      v533 = (unsigned __int8 *)sub_1C5A2F35C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v533, v534, "verify<loops>", 0xDuLL);
      v535 = (unsigned __int8 *)sub_1C5A2F414();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v535, v536, "verify<memoryssa>", 0x11uLL);
      v537 = (unsigned __int8 *)sub_1C5A2F4CC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v537, v538, "verify<regions>", 0xFuLL);
      v539 = (unsigned __int8 *)sub_1C5A2F584();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v539, v540, "verify<safepoint-ir>", 0x14uLL);
      v541 = (unsigned __int8 *)sub_1C5A2F63C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v541, v542, "verify<scalar-evolution>", 0x18uLL);
      v543 = (unsigned __int8 *)sub_1C5A2F6F4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v543, v544, "view-cfg", 8uLL);
      v545 = (unsigned __int8 *)sub_1C5A2F7AC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v545, v546, "view-cfg-only", 0xDuLL);
      v547 = (unsigned __int8 *)sub_1C5A2F864();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v547, v548, "tlshoist", 8uLL);
      v549 = (unsigned __int8 *)sub_1C5A2F91C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v549, v550, "transform-warning", 0x11uLL);
      v551 = (unsigned __int8 *)sub_1C5A2F9D4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v551, v552, "tsan", 4uLL);
      v553 = (unsigned __int8 *)sub_1C5A2FA8C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v553, v554, "memprof", 7uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "EarlyCSEPass", 0xCuLL, "early-cse", 9uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "EntryExitInstrumenterPass", 0x19uLL, "ee-instrument", 0xDuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LowerMatrixIntrinsicsPass", 0x19uLL, "lower-matrix-intrinsics", 0x17uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopUnrollPass", 0xEuLL, "loop-unroll", 0xBuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "MemorySanitizerPass", 0x13uLL, "msan", 4uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "SimplifyCFGPass", 0xFuLL, "simplifycfg", 0xBuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LoopVectorizePass", 0x11uLL, "loop-vectorize", 0xEuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "MergedLoadStoreMotionPass", 0x19uLL, "mldst-motion", 0xCuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "GVNPass", 7uLL, "gvn", 3uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "StackLifetimePrinterPass", 0x18uLL, "print<stack-lifetime>", 0x15uLL);
      v555 = (unsigned __int8 *)sub_1C5A2FB44();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v555, v556, "loop-flatten", 0xCuLL);
      v557 = (unsigned __int8 *)sub_1C5A2FBFC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v557, v558, "loop-interchange", 0x10uLL);
      v559 = (unsigned __int8 *)sub_1C5A2FCB4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v559, v560, "loop-unroll-and-jam", 0x13uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopNestPass", 0x10uLL, "no-op-loopnest", 0xEuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopAnalysis", 0x10uLL, "no-op-loop", 0xAuLL);
      v561 = (unsigned __int8 *)sub_1C5A2FD6C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v561, v562, "access-info", 0xBuLL);
      v563 = (unsigned __int8 *)sub_1C5A2FE24();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v563, v564, "ddg", 3uLL);
      v565 = (unsigned __int8 *)sub_1C5A2FEDC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v565, v566, "iv-users", 8uLL);
      v567 = (unsigned __int8 *)sub_1C54E7400();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v567, v568, "pass-instrumentation", 0x14uLL);
      v569 = (unsigned __int8 *)sub_1C5A2FF94();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v569, v570, "canon-freeze", 0xCuLL);
      v571 = (unsigned __int8 *)sub_1C5A3004C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v571, v572, "dot-ddg", 7uLL);
      v573 = (unsigned __int8 *)sub_1C5A265C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v573, v574, "invalidate<all>", 0xFuLL);
      v575 = (unsigned __int8 *)sub_1C5A30104();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v575, v576, "loop-idiom", 0xAuLL);
      v577 = (unsigned __int8 *)sub_1C5A301BC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v577, v578, "loop-instsimplify", 0x11uLL);
      v579 = (unsigned __int8 *)sub_1C5A30274();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v579, v580, "loop-rotate", 0xBuLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "NoOpLoopPass", 0xCuLL, "no-op-loop", 0xAuLL);
      v581 = (unsigned __int8 *)sub_1C5A3032C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v581, v582, "print", 5uLL);
      v583 = (unsigned __int8 *)sub_1C5A303E4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v583, v584, "loop-deletion", 0xDuLL);
      v585 = (unsigned __int8 *)sub_1C5A3049C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v585, v586, "loop-simplifycfg", 0x10uLL);
      v587 = (unsigned __int8 *)sub_1C5A30554();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v587, v588, "loop-reduce", 0xBuLL);
      v589 = (unsigned __int8 *)sub_1C5A3060C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v589, v590, "indvars", 7uLL);
      v591 = (unsigned __int8 *)sub_1C5A306C4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v591, v592, "loop-unroll-full", 0x10uLL);
      v593 = (unsigned __int8 *)sub_1C5A3077C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v593, v594, "print-access-info", 0x11uLL);
      v595 = (unsigned __int8 *)sub_1C5A30834();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v595, v596, "print<ddg>", 0xAuLL);
      v597 = (unsigned __int8 *)sub_1C5A308EC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v597, v598, "print<iv-users>", 0xFuLL);
      v599 = (unsigned __int8 *)sub_1C5A309A4();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v599, v600, "print<loopnest>", 0xFuLL);
      v601 = (unsigned __int8 *)sub_1C5A30A5C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v601, v602, "print<loop-cache-cost>", 0x16uLL);
      v603 = (unsigned __int8 *)sub_1C5A30B14();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v603, v604, "loop-predication", 0x10uLL);
      v605 = (unsigned __int8 *)sub_1C5A2C10C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v605, v606, "guard-widening", 0xEuLL);
      v607 = (unsigned __int8 *)sub_1C5A30BCC();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v607, v608, "loop-bound-split", 0x10uLL);
      v609 = (unsigned __int8 *)sub_1C5A30C84();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v609, v610, "loop-reroll", 0xBuLL);
      v611 = (unsigned __int8 *)sub_1C5A30D3C();
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, v611, v612, "loop-versioning-licm", 0x14uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "SimpleLoopUnswitchPass", 0x16uLL, "simple-loop-unswitch", 0x14uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LICMPass", 8uLL, "licm", 4uLL);
      llvm::PassInstrumentationCallbacks::addClassToPassName(a5, "LNICMPass", 9uLL, "lnicm", 5uLL);
      return a1;
    }
    v617 = 0;
    v618 = 0;
    v619 = 0;
    sub_1C484333C(&v617, qword_1ED830C98, qword_1ED830CA0, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830CA0 - qword_1ED830C98) >> 3));
    if (v617 != v618)
    {
      v614 = (void **)&v617;
      sub_1C4765410(&v614);
      goto LABEL_22;
    }
    v614 = 0;
    v615 = 0;
    v616 = 0;
    sub_1C484333C(&v614, qword_1ED830D70, qword_1ED830D78, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830D78 - qword_1ED830D70) >> 3));
    v21 = v614;
    v22 = v615;
    v620 = &v614;
    sub_1C4765410((void ***)&v620);
    v614 = (void **)&v617;
    sub_1C4765410(&v614);
    if (v21 != v22)
      goto LABEL_22;
  }
  return a1;
}

char *sub_1C5A2484C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphAnalysis]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_20[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24904()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionGroupAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_21[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A249BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_22[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24A74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleSummaryIndexAnalysis]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_23[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24B2C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ProfileSummaryAnalysis]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_24[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24BE4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyGlobalAnalysis]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_25[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24C9C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::VerifierAnalysis]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_26[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24D54()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ASanGlobalsMetadataAnalysis]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_27[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24E0C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineAdvisorAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_28[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24EC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRSimilarityAnalysis]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_29[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A24F7C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalsAA]";
  v10[1] = 65;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41)
    v1 = 65;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_30[v1];
  v3 = 65 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25034()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AlwaysInlinerPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_31[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A250EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AttributorPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_32[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A251A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::Annotation2MetadataPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_33[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2525C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OpenMPOptPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_34[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25314()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CalledValuePropagationPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_35[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A253CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CanonicalizeAliasesPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_36[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25484()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CGProfilePass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_37[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2553C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = NewPMCheckDebugifyPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_38[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A255F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstantMergePass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_39[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A256AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroEarlyPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_40[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25764()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CrossDSOCFIPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_41[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2581C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DeadArgumentEliminationPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_42[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A258D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = NewPMDebugifyPass]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_43[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2598C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphDOTPrinterPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_44[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25A44()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::EliminateAvailableExternallyPass]";
  v10[1] = 88;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58)
    v1 = 88;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_45[v1];
  v3 = 88 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25AFC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockExtractorPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_46[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25BB4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ForceFunctionAttrsPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_47[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25C6C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionImportPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_48[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25D24()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionSpecializationPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_49[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25DDC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalDCEPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_50[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25E94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalOptPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_51[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A25F4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GlobalSplitPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_52[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26004()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::HotColdSplittingPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_53[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A260BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InferFunctionAttrsPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_54[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26174()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleInlinerWrapperPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_55[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2622C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineAdvisorAnalysisPrinterPass]";
  v10[1] = 88;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58)
    v1 = 88;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_56[v1];
  v3 = 88 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A262E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GCOVProfilerPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_57[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2639C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstrOrderFilePass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_58[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26454()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstrProfiling]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_59[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2650C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InternalizePass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_60[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A265C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAllAnalysesPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_61[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2667C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IPSCCPPass]";
  v10[1] = 66;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x42)
    v1 = 66;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_62[v1];
  v3 = 66 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26734()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IROutlinerPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_63[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A267EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRSimilarityAnalysisPrinterPass]";
  v10[1] = 87;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57)
    v1 = 87;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_64[v1];
  v3 = 87 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A268A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerGlobalDtorsPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_65[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2695C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerTypeTestsPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_66[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26A14()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MetaRenamerPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_67[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26ACC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MergeFunctionsPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_68[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26B84()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NameAnonGlobalPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_69[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26C3C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCAPElimPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_70[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26CF4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PartialInlinerPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_71[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26DAC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOIndirectCallPromotion]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_72[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26E64()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationGen]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_73[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26F1C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationUse]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_74[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A26FD4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionGroupInfoPrinterPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_75[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2708C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ProfileSummaryPrinterPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_76[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27144()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_77[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A271FC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintModulePass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_78[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A272B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphPrinterPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_79[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2736C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyCallGraphDOTPrinterPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_80[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27424()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MustBeExecutedContextPrinterPass]";
  v10[1] = 88;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x58)
    v1 = 88;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_81[v1];
  v3 = 88 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A274DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyGlobalPrinterPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_82[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27594()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleDebugInfoPrinterPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_83[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2764C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RecomputeGlobalsAAPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_84[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27704()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RelLookupTableConverterPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_85[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A277BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RewriteStatepointsForGC]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_86[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27874()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RewriteSymbolPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_87[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2792C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ReversePostOrderFunctionAttrsPass]";
  v10[1] = 89;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59)
    v1 = 89;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_88[v1];
  v3 = 89 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A279E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SampleProfileLoaderPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_89[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27A9C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripSymbolsPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_90[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27B54()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDeadDebugInfoPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_91[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27C0C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SampleProfileProbePass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_92[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27CC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SoftPointerAuthPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_93[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27D7C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDeadPrototypesPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_94[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27E34()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripDebugDeclarePass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_95[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27EEC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripNonDebugSymbolsPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_96[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A27FA4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripNonLineTableDebugInfoPass]";
  v10[1] = 86;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56)
    v1 = 86;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_97[v1];
  v3 = 86 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2805C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SyntheticCountsPropagation]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_98[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28114()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallGraphViewerPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_99[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A281CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::WholeProgramDevirtPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_100[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28284()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DataFlowSanitizerPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_101[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2833C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleMemorySanitizerPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_102[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A283F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleInlinerPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_103[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A284AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleThreadSanitizerPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_104[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28564()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleSanitizerCoveragePass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_105[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2861C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleMemProfilerPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_106[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A286D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PoisonCheckingPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_107[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2878C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PseudoProbeUpdatePass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_108[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28844()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionAnalysisManagerCGSCCProxy]";
  v10[1] = 89;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59)
    v1 = 89;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_109[v1];
  v3 = 89 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A288FC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ArgumentPromotionPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_110[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A289B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PostOrderFunctionAttrsPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_111[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28A6C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AttributorCGSCCPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_112[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28B24()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OpenMPOptCGSCCPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_113[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28BDC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroSplitPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_114[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28C94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockFrequencyAnalysis]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_115[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28D4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BranchProbabilityAnalysis]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_116[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28E04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CycleAnalysis]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_117[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28EBC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PostDominatorTreeAnalysis]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_118[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A28F74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DemandedBitsAnalysis]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_119[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2902C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominanceFrontierAnalysis]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_120[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A290E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionPropertiesAnalysis]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_121[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2919C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LazyValueAnalysis]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_122[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29254()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DependenceAnalysis]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_123[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2930C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineSizeEstimatorAnalysis]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_124[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A293C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemoryDependenceAnalysis]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_125[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2947C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAAnalysis]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_126[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29534()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PhiValuesAnalysis]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_127[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A295EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoAnalysis]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_128[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A296A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OptimizationRemarkEmitterAnalysis]";
  v10[1] = 89;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59)
    v1 = 89;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_129[v1];
  v3 = 89 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2975C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ShouldNotRunFunctionPassesAnalysis]";
  v10[1] = 90;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5A)
    v1 = 90;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_130[v1];
  v3 = 90 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29814()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ShouldRunExtraVectorPasses]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_131[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A298CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyAnalysis]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_132[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29984()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivergenceAnalysis]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_133[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29A3C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GPUFunctionAnalysis]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_134[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29AF4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BasicAA]";
  v10[1] = 63;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F)
    v1 = 63;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_135[v1];
  v3 = v1 ^ 0x3F;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29BAC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFLAndersAA]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_136[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29C64()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFLSteensAA]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_137[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29D1C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::objcarc::ObjCARCAA]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_138[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29DD4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SCEVAA]";
  v10[1] = 62;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3E)
    v1 = 62;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_139[v1];
  v3 = 62 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29E8C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScopedNoAliasAA]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_140[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29F44()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TypeBasedAA]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_141[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A29FFC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AAEvaluator]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_142[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A0B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ADCEPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_143[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A16C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AddDiscriminatorsPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_144[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A224()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AggressiveInstCombinePass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_145[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A2DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumeBuilderPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_146[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A394()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumeSimplifyPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_147[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A44C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AlignmentFromAssumptionsPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_148[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A504()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AnnotationRemarksPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_149[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A5BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BDCEPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_150[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A674()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BoundsCheckingPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_151[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A72C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BreakCriticalEdgesPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_152[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A7E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CallSiteSplittingPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_153[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A89C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstantHoistingPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_154[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2A954()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ConstraintEliminationPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_155[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AA0C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ControlHeightReductionPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_156[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AAC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroElidePass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_157[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AB7C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroCleanupPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_158[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AC34()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CorrelatedValuePropagationPass]";
  v10[1] = 86;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56)
    v1 = 86;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_159[v1];
  v3 = 86 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2ACEC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DCEPass]";
  v10[1] = 63;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F)
    v1 = 63;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_160[v1];
  v3 = v1 ^ 0x3F;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2ADA4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DFAJumpThreadingPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_161[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AE5C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivRemPairsPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_162[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AF14()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DSEPass]";
  v10[1] = 63;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F)
    v1 = 63;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_163[v1];
  v3 = v1 ^ 0x3F;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2AFCC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGPrinterPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_164[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B084()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGOnlyPrinterPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_165[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B13C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DomTreePrinterPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_166[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B1F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DomTreeOnlyPrinterPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_167[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B2AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FixIrreduciblePass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_168[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B364()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FlattenCFGPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_169[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B41C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MakeGuardsExplicitPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_170[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B4D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GVNHoistPass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_171[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B58C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GVNSinkPass]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_172[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B644()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::HelloWorldPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_173[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B6FC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InferAddressSpacesPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_174[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B7B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstCombinePass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_175[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B86C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstCountPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_176[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B924()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstSimplifyPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_177[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2B9DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IRCEPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_178[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BA94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::Float2IntPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_179[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BB4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LintPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_180[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BC04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InjectTLIMappings]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_181[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BCBC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InstructionNamerPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_182[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BD74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerAtomicPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_183[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BE2C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerExpectIntrinsicPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_184[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BEE4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerGuardIntrinsicPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_185[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2BF9C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerConstantIntrinsicsPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_186[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C054()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerWidenableConditionPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_187[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C10C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GuardWideningPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_188[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C1C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoadStoreVectorizerPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_189[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C27C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopSimplifyPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_190[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C334()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopSinkPass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_191[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C3EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerInvokePass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_192[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C4A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerSwitchPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_193[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C55C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PromotePass]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_194[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C614()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemCpyOptPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_195[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C6CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MergeICmpsPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_196[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C784()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::UnifyFunctionExitNodesPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_197[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C83C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NaryReassociatePass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_198[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C8F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::NewGVNPass]";
  v10[1] = 66;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x42)
    v1 = 66;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_199[v1];
  v3 = 66 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2C9AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::JumpThreadingPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_200[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CA64()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PartiallyInlineLibCallsPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_201[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CB1C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LCSSAPass]";
  v10[1] = 65;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41)
    v1 = 65;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_202[v1];
  v3 = 65 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CBD4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopDataPrefetchPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_203[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CC8C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopLoadEliminationPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_204[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CD44()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFusePass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_205[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CDFC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopDistributePass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_206[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CEB4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVersioningPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_207[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2CF6C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCOptPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_208[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D024()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCContractPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_209[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D0DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ObjCARCExpandPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_210[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D194()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOMemOPSizeOpt]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_211[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D24C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintFunctionPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_212[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D304()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumptionPrinterPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_213[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D3BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BlockFrequencyPrinterPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_214[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D474()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::BranchProbabilityPrinterPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_215[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D52C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CostModelPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_216[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D5E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CycleInfoPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_217[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D69C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DependenceAnalysisPrinterPass]";
  v10[1] = 85;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55)
    v1 = 85;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_218[v1];
  v3 = 85 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D754()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DivergenceAnalysisPrinterPass]";
  v10[1] = 85;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55)
    v1 = 85;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_219[v1];
  v3 = 85 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D80C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreePrinterPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_220[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D8C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PostDominatorTreePrinterPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_221[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2D97C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DelinearizationPrinterPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_222[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DA34()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DemandedBitsPrinterPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_223[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DAEC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominanceFrontierPrinterPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_224[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DBA4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionPropertiesPrinterPass]";
  v10[1] = 85;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55)
    v1 = 85;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_225[v1];
  v3 = 85 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DC5C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineCostAnnotationPrinterPass]";
  v10[1] = 87;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57)
    v1 = 87;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_226[v1];
  v3 = 87 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DD14()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlineSizeEstimatorAnalysisPrinterPass]";
  v10[1] = 94;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5E)
    v1 = 94;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_227[v1];
  v3 = 94 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DDCC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GPUFunctionInfoPrinterPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_228[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DE84()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopPrinterPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_229[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DF3C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_230[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2DFF4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAWalkerPrinterPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_231[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E0AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PhiValuesPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_232[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E164()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoPrinterPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_233[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E21C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionPrinterPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_234[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E2D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StackSafetyPrinterPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_235[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E38C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AliasSetsPrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_236[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E444()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PredicateInfoPrinterPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_237[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E4FC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MustExecutePrinterPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_238[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E5B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemDerefPrinterPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_239[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E66C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ReassociatePass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_240[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E724()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RedundantDbgInstEliminationPass]";
  v10[1] = 87;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x57)
    v1 = 87;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_241[v1];
  v3 = 87 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E7DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegToMemPass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_242[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E894()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarizeMaskedMemIntrinPass]";
  v10[1] = 84;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x54)
    v1 = 84;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_243[v1];
  v3 = 84 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2E94C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarizerPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_244[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EA04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SeparateConstOffsetFromGEPPass]";
  v10[1] = 86;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56)
    v1 = 86;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_245[v1];
  v3 = 86 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EABC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SCCPPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_246[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EB74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SinkingPass]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_247[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EC2C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SLPVectorizerPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_248[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2ECE4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StraightLineStrengthReducePass]";
  v10[1] = 86;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56)
    v1 = 86;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_249[v1];
  v3 = 86 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2ED9C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SpeculativeExecutionPass]";
  v10[1] = 80;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x50)
    v1 = 80;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_250[v1];
  v3 = 80 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EE54()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SROAPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_251[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EF0C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StripGCRelocates]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_252[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2EFC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::StructurizeCFGPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_253[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F07C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TailCallElimPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_254[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F134()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::UnifyLoopExitsPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_255[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F1EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::VectorCombinePass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_256[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F2A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreeVerifierPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_257[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F35C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVerifierPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_258[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F414()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemorySSAVerifierPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_259[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F4CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RegionInfoVerifierPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_260[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F584()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SafepointIRVerifierPass]";
  v10[1] = 79;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F)
    v1 = 79;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_261[v1];
  v3 = 79 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F63C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionVerifierPass]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_262[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F6F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGViewerPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_263[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F7AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CFGOnlyViewerPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_264[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F864()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TLSVariableHoistPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_265[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F91C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::WarnMissedTransformationsPass]";
  v10[1] = 85;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55)
    v1 = 85;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_266[v1];
  v3 = 85 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2F9D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ThreadSanitizerPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_267[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FA8C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MemProfilerPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_268[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FB44()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFlattenPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_269[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FBFC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopInterchangePass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_270[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FCB4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopUnrollAndJamPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_271[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FD6C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAccessAnalysis]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_272[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FE24()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGAnalysis]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_273[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FEDC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IVUsersAnalysis]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_274[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A2FF94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CanonicalizeFreezeInLoopsPass]";
  v10[1] = 85;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x55)
    v1 = 85;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_275[v1];
  v3 = 85 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A3004C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGDotPrinterPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_276[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30104()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopIdiomRecognizePass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_277[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A301BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopInstSimplifyPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_278[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30274()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopRotatePass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_279[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A3032C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PrintLoopPass]";
  v10[1] = 69;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x45)
    v1 = 69;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_280[v1];
  v3 = 69 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A303E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopDeletionPass]";
  v10[1] = 72;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48)
    v1 = 72;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_281[v1];
  v3 = 72 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A3049C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopSimplifyCFGPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_282[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30554()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopStrengthReducePass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_283[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A3060C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IndVarSimplifyPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_284[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A306C4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopFullUnrollPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_285[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A3077C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAccessInfoPrinterPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_286[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30834()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DDGAnalysisPrinterPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_287[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A308EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::IVUsersPrinterPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_288[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A309A4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopNestPrinterPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_289[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30A5C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopCachePrinterPass]";
  v10[1] = 76;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4C)
    v1 = 76;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_290[v1];
  v3 = 76 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30B14()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopPredicationPass]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_291[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30BCC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopBoundSplitPass]";
  v10[1] = 74;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A)
    v1 = 74;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_292[v1];
  v3 = 74 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30C84()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopRerollPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_293[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A30D3C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVersioningLICMPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_294[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *llvm::PassBuilder::registerModuleAnalyses(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *result;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *i;
  _QWORD *v60;

  v60 = &llvm::CallGraphAnalysis::Key;
  v4 = sub_1C56E09C8(a2, &v60);
  if (!v4[1])
  {
    v5 = v4;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E818AFC0;
    v7 = v5[1];
    v5[1] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v60 = &llvm::FunctionGroupAnalysis::Key;
  v8 = sub_1C56E09C8(a2, &v60);
  if (!v8[1])
  {
    v9 = v8;
    v10 = (_QWORD *)operator new();
    *v10 = &off_1E818B018;
    v11 = v9[1];
    v9[1] = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v60 = &llvm::LazyCallGraphAnalysis::Key;
  v12 = sub_1C56E09C8(a2, &v60);
  if (!v12[1])
  {
    v13 = v12;
    v14 = (_QWORD *)operator new();
    *v14 = &off_1E818B070;
    v15 = v13[1];
    v13[1] = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v60 = &llvm::ModuleSummaryIndexAnalysis::Key;
  v16 = sub_1C56E09C8(a2, &v60);
  if (!v16[1])
  {
    v17 = v16;
    v18 = (_QWORD *)operator new();
    *v18 = &off_1E818B0C8;
    v19 = v17[1];
    v17[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v60 = &unk_1EF8F5728;
  v20 = sub_1C56E09C8(a2, &v60);
  if (!v20[1])
  {
    v21 = v20;
    v22 = (_QWORD *)operator new();
    *v22 = &off_1E818B120;
    v23 = v21[1];
    v21[1] = v22;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v60 = &llvm::ProfileSummaryAnalysis::Key;
  v24 = sub_1C56E09C8(a2, &v60);
  if (!v24[1])
  {
    v25 = v24;
    v26 = (_QWORD *)operator new();
    *v26 = &off_1E818B178;
    v27 = v25[1];
    v25[1] = v26;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  v60 = &llvm::StackSafetyGlobalAnalysis::Key;
  v28 = sub_1C56E09C8(a2, &v60);
  if (!v28[1])
  {
    v29 = v28;
    v30 = (_QWORD *)operator new();
    *v30 = &off_1E818B1D0;
    v31 = v29[1];
    v29[1] = v30;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v60 = &llvm::VerifierAnalysis::Key;
  v32 = sub_1C56E09C8(a2, &v60);
  if (!v32[1])
  {
    v33 = v32;
    v34 = (_QWORD *)operator new();
    *v34 = &off_1E818B228;
    v35 = v33[1];
    v33[1] = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v60 = &llvm::PassInstrumentationAnalysis::Key;
  v36 = sub_1C56E09C8(a2, &v60);
  if (!v36[1])
  {
    v37 = v36;
    v38 = (_QWORD *)operator new();
    v39 = *(_QWORD *)(a1 + 136);
    *v38 = &off_1E818B280;
    v38[1] = v39;
    v40 = v37[1];
    v37[1] = v38;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v60 = &llvm::ASanGlobalsMetadataAnalysis::Key;
  v41 = sub_1C56E09C8(a2, &v60);
  if (!v41[1])
  {
    v42 = v41;
    v43 = (_QWORD *)operator new();
    *v43 = &off_1E818B2D8;
    v44 = v42[1];
    v42[1] = v43;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  v60 = &llvm::InlineAdvisorAnalysis::Key;
  v45 = sub_1C56E09C8(a2, &v60);
  if (!v45[1])
  {
    v46 = v45;
    v47 = (_QWORD *)operator new();
    *v47 = &off_1E818B330;
    v48 = v46[1];
    v46[1] = v47;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  v60 = &llvm::IRSimilarityAnalysis::Key;
  v49 = sub_1C56E09C8(a2, &v60);
  if (!v49[1])
  {
    v50 = v49;
    v51 = (_QWORD *)operator new();
    *v51 = &off_1E818B388;
    v52 = v50[1];
    v50[1] = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  v60 = &llvm::GlobalsAA::Key;
  result = sub_1C56E09C8(a2, &v60);
  if (!result[1])
  {
    v54 = result;
    v55 = (_QWORD *)operator new();
    *v55 = &off_1E818B3E0;
    result = (_QWORD *)v54[1];
    v54[1] = v55;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v56 = *(unsigned int *)(a1 + 1112);
  if ((_DWORD)v56)
  {
    v57 = *(_QWORD *)(a1 + 1104);
    v58 = 32 * v56;
    for (i = (_QWORD *)(v57 + 24); *i; i += 4)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _DWORD *))(*(_QWORD *)*i + 48))(*i, a2);
      v58 -= 32;
      if (!v58)
        return result;
    }
    sub_1C485C2F0();
    return (_QWORD *)llvm::PassBuilder::registerFunctionAnalyses();
  }
  return result;
}

_QWORD *llvm::PassBuilder::registerFunctionAnalyses(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::TargetMachine *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  void (**v112)(void);
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *result;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  void **v164;
  int v165;
  void *v166[2];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v166[0] = &llvm::AAManager::Key;
  v4 = sub_1C54E652C(a2, v166);
  if (v4[1])
    goto LABEL_9;
  v5 = v4;
  v6 = (_QWORD *)operator new();
  v166[0] = &v167;
  *(_QWORD *)&v167 = sub_1C5A633DC;
  *((_QWORD *)&v167 + 1) = sub_1C5A63540;
  v7 = *(llvm::TargetMachine **)a1;
  *(_QWORD *)&v168 = sub_1C5A636A4;
  *((_QWORD *)&v168 + 1) = sub_1C5A62D74;
  v166[1] = (void *)0x400000004;
  if (v7)
  {
    (*(void (**)(llvm::TargetMachine *, void **))(*(_QWORD *)v7 + 112))(v7, v166);
    v165 = (int)v166[1];
    *v6 = &unk_1E817E990;
    v6[1] = v6 + 3;
    v8 = (uint64_t)(v6 + 1);
    v6[2] = 0x400000000;
    if (!v165)
      goto LABEL_5;
  }
  else
  {
    *v6 = &unk_1E817E990;
    v6[1] = v6 + 3;
    v8 = (uint64_t)(v6 + 1);
    v6[2] = 0x400000000;
  }
  sub_1C4FCE718(v8, (uint64_t)v166);
LABEL_5:
  v9 = v5[1];
  v5[1] = v6;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v166[0] != &v167)
    free(v166[0]);
LABEL_9:
  v166[0] = &llvm::AAManager::Key;
  v10 = sub_1C54E652C(a2, v166);
  if (!v10[1])
  {
    v113 = v10;
    v114 = (_QWORD *)operator new();
    v167 = 0u;
    v168 = 0u;
    v166[0] = &v167;
    v166[1] = (void *)0x400000000;
    *v114 = &unk_1E817E990;
    v114[1] = v114 + 3;
    v114[2] = 0x400000000;
    v115 = v113[1];
    v113[1] = v114;
    if (v115)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
      if (v166[0] != &v167)
        free(v166[0]);
    }
  }
  v166[0] = &llvm::AssumptionAnalysis::Key;
  v11 = sub_1C54E652C(a2, v166);
  if (!v11[1])
  {
    v12 = v11;
    v13 = (_QWORD *)operator new();
    *v13 = &unk_1E816D628;
    v14 = v12[1];
    v12[1] = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v166[0] = &llvm::BlockFrequencyAnalysis::Key;
  v15 = sub_1C54E652C(a2, v166);
  if (!v15[1])
  {
    v16 = v15;
    v17 = (_QWORD *)operator new();
    *v17 = &off_1E818B540;
    v18 = v16[1];
    v16[1] = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v166[0] = &llvm::BranchProbabilityAnalysis::Key;
  v19 = sub_1C54E652C(a2, v166);
  if (!v19[1])
  {
    v20 = v19;
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E818B598;
    v22 = v20[1];
    v20[1] = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v166[0] = &llvm::CycleAnalysis::Key;
  v23 = sub_1C54E652C(a2, v166);
  if (!v23[1])
  {
    v24 = v23;
    v25 = (_QWORD *)operator new();
    *v25 = &off_1E818B5F0;
    v26 = v24[1];
    v24[1] = v25;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v166[0] = &llvm::DominatorTreeAnalysis::Key;
  v27 = sub_1C54E652C(a2, v166);
  if (!v27[1])
  {
    v28 = v27;
    v29 = (_QWORD *)operator new();
    *v29 = &unk_1E816D680;
    v30 = v28[1];
    v28[1] = v29;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v166[0] = &llvm::PostDominatorTreeAnalysis::Key;
  v31 = sub_1C54E652C(a2, v166);
  if (!v31[1])
  {
    v32 = v31;
    v33 = (_QWORD *)operator new();
    *v33 = &off_1E818B648;
    v34 = v32[1];
    v32[1] = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v166[0] = &llvm::DemandedBitsAnalysis::Key;
  v35 = sub_1C54E652C(a2, v166);
  if (!v35[1])
  {
    v36 = v35;
    v37 = (_QWORD *)operator new();
    *v37 = &off_1E818B6A0;
    v38 = v36[1];
    v36[1] = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  v166[0] = &llvm::DominanceFrontierAnalysis::Key;
  v39 = sub_1C54E652C(a2, v166);
  if (!v39[1])
  {
    v40 = v39;
    v41 = (_QWORD *)operator new();
    *v41 = &off_1E818B6F8;
    v42 = v40[1];
    v40[1] = v41;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v166[0] = &llvm::FunctionPropertiesAnalysis::Key;
  v43 = sub_1C54E652C(a2, v166);
  if (!v43[1])
  {
    v44 = v43;
    v45 = (_QWORD *)operator new();
    *v45 = &off_1E818B750;
    v46 = v44[1];
    v44[1] = v45;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  v166[0] = &llvm::LoopAnalysis::Key;
  v47 = sub_1C54E652C(a2, v166);
  if (!v47[1])
  {
    v48 = v47;
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1E816D6D8;
    v50 = v48[1];
    v48[1] = v49;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  v166[0] = &llvm::LazyValueAnalysis::Key;
  v51 = sub_1C54E652C(a2, v166);
  if (!v51[1])
  {
    v52 = v51;
    v53 = (_QWORD *)operator new();
    *v53 = &off_1E818B7A8;
    v54 = v52[1];
    v52[1] = v53;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  }
  v166[0] = &llvm::DependenceAnalysis::Key;
  v55 = sub_1C54E652C(a2, v166);
  if (!v55[1])
  {
    v56 = v55;
    v57 = (_QWORD *)operator new();
    *v57 = &off_1E818B800;
    v58 = v56[1];
    v56[1] = v57;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  }
  v166[0] = &llvm::InlineSizeEstimatorAnalysis::Key;
  v59 = sub_1C54E652C(a2, v166);
  if (!v59[1])
  {
    v60 = v59;
    v61 = (_QWORD *)operator new();
    *v61 = &off_1E818B858;
    v61[1] = 0;
    v62 = v60[1];
    v60[1] = v61;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  }
  v166[0] = &llvm::MemoryDependenceAnalysis::Key;
  v63 = sub_1C54E652C(a2, v166);
  if (!v63[1])
  {
    v64 = v63;
    v65 = operator new();
    v66 = dword_1ED82E4F8;
    *(_QWORD *)v65 = &off_1E818B8B0;
    *(_DWORD *)(v65 + 8) = v66;
    v67 = v64[1];
    v64[1] = v65;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  v166[0] = &llvm::MemorySSAAnalysis::Key;
  v68 = sub_1C54E652C(a2, v166);
  if (!v68[1])
  {
    v69 = v68;
    v70 = (_QWORD *)operator new();
    *v70 = &off_1E818B908;
    v71 = v69[1];
    v69[1] = v70;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  }
  v166[0] = &llvm::PhiValuesAnalysis::Key;
  v72 = sub_1C54E652C(a2, v166);
  if (!v72[1])
  {
    v73 = v72;
    v74 = (_QWORD *)operator new();
    *v74 = &off_1E818B960;
    v75 = v73[1];
    v73[1] = v74;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  }
  v166[0] = &llvm::RegionInfoAnalysis::Key;
  v76 = sub_1C54E652C(a2, v166);
  if (!v76[1])
  {
    v77 = v76;
    v78 = (_QWORD *)operator new();
    *v78 = &off_1E818B9B8;
    v79 = v77[1];
    v77[1] = v78;
    if (v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  }
  v166[0] = &unk_1EF8F5730;
  v80 = sub_1C54E652C(a2, v166);
  if (!v80[1])
  {
    v81 = v80;
    v82 = (_QWORD *)operator new();
    *v82 = &off_1E818BA10;
    v83 = v81[1];
    v81[1] = v82;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  }
  v166[0] = &llvm::OptimizationRemarkEmitterAnalysis::Key;
  v84 = sub_1C54E652C(a2, v166);
  if (!v84[1])
  {
    v85 = v84;
    v86 = (_QWORD *)operator new();
    *v86 = &off_1E818BA68;
    v87 = v85[1];
    v85[1] = v86;
    if (v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  }
  v166[0] = &llvm::ScalarEvolutionAnalysis::Key;
  v88 = sub_1C54E652C(a2, v166);
  if (!v88[1])
  {
    v89 = v88;
    v90 = (_QWORD *)operator new();
    *v90 = &unk_1E816D730;
    v91 = v89[1];
    v89[1] = v90;
    if (v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  }
  v166[0] = &llvm::ShouldNotRunFunctionPassesAnalysis::Key;
  v92 = sub_1C54E652C(a2, v166);
  if (!v92[1])
  {
    v93 = v92;
    v94 = (_QWORD *)operator new();
    *v94 = &off_1E818BAC0;
    v95 = v93[1];
    v93[1] = v94;
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  }
  v166[0] = &llvm::ShouldRunExtraVectorPasses::Key;
  v96 = sub_1C54E652C(a2, v166);
  if (!v96[1])
  {
    v97 = v96;
    v98 = (_QWORD *)operator new();
    *v98 = &off_1E818BB18;
    v99 = v97[1];
    v97[1] = v98;
    if (v99)
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  }
  v166[0] = &llvm::StackSafetyAnalysis::Key;
  v100 = sub_1C54E652C(a2, v166);
  if (!v100[1])
  {
    v101 = v100;
    v102 = (_QWORD *)operator new();
    *v102 = &off_1E818BB70;
    v103 = v101[1];
    v101[1] = v102;
    if (v103)
      (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  }
  v166[0] = &llvm::TargetLibraryAnalysis::Key;
  v104 = sub_1C54E652C(a2, v166);
  if (!v104[1])
  {
    v105 = v104;
    v106 = operator new();
    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    *(_QWORD *)v106 = &unk_1E816D5D0;
    *(_BYTE *)(v106 + 8) = 0;
    *(_BYTE *)(v106 + 208) = 0;
    v107 = v105[1];
    v105[1] = v106;
    if (v107)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
      if (BYTE8(v178))
        sub_1C61BB478((uint64_t *)v166);
    }
  }
  v166[0] = &llvm::TargetIRAnalysis::Key;
  v108 = sub_1C54E652C(a2, v166);
  if (v108[1])
    goto LABEL_97;
  v109 = v108;
  v110 = (_QWORD *)operator new();
  if (*(_QWORD *)a1)
  {
    llvm::TargetMachine::getTargetIRAnalysis(*(llvm::TargetMachine **)a1, (uint64_t)v166);
    v164 = (void **)*((_QWORD *)&v167 + 1);
    *v110 = &unk_1E816D828;
    if (!v164)
    {
      v110[4] = 0;
      goto LABEL_87;
    }
    if (v164 != v166)
    {
      v110[4] = v164;
      *((_QWORD *)&v167 + 1) = 0;
      goto LABEL_87;
    }
  }
  else
  {
    v166[0] = &off_1E813DC50;
    v166[1] = llvm::TargetIRAnalysis::getDefaultTTI;
    *((_QWORD *)&v167 + 1) = v166;
    *v110 = &unk_1E816D828;
  }
  v110[4] = v110 + 1;
  (*((void (**)(void **))v166[0] + 3))(v166);
LABEL_87:
  v111 = v109[1];
  v109[1] = v110;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (*((void ***)&v167 + 1) == v166)
  {
    v112 = (void (**)(void))((char *)v166[0] + 32);
    goto LABEL_96;
  }
  if (*((_QWORD *)&v167 + 1))
  {
    v112 = (void (**)(void))(**((_QWORD **)&v167 + 1) + 40);
LABEL_96:
    (*v112)();
  }
LABEL_97:
  v166[0] = &llvm::VerifierAnalysis::Key;
  v116 = sub_1C54E652C(a2, v166);
  if (!v116[1])
  {
    v117 = v116;
    v118 = (_QWORD *)operator new();
    *v118 = &off_1E818BBC8;
    v119 = v117[1];
    v117[1] = v118;
    if (v119)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  v166[0] = &llvm::PassInstrumentationAnalysis::Key;
  v120 = sub_1C54E652C(a2, v166);
  if (!v120[1])
  {
    v121 = v120;
    v122 = (_QWORD *)operator new();
    v123 = *(_QWORD *)(a1 + 136);
    *v122 = &unk_1E816D788;
    v122[1] = v123;
    v124 = v121[1];
    v121[1] = v122;
    if (v124)
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  }
  v166[0] = &llvm::DivergenceAnalysis::Key;
  v125 = sub_1C54E652C(a2, v166);
  if (!v125[1])
  {
    v126 = v125;
    v127 = (_QWORD *)operator new();
    *v127 = &off_1E818BC20;
    v128 = v126[1];
    v126[1] = v127;
    if (v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  }
  v166[0] = &llvm::GPUFunctionAnalysis::Key;
  v129 = sub_1C54E652C(a2, v166);
  if (!v129[1])
  {
    v130 = v129;
    v131 = (_QWORD *)operator new();
    *v131 = &off_1E818BC78;
    v132 = v130[1];
    v130[1] = v131;
    if (v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  }
  v166[0] = &llvm::BasicAA::Key;
  v133 = sub_1C54E652C(a2, v166);
  if (!v133[1])
  {
    v134 = v133;
    v135 = (_QWORD *)operator new();
    *v135 = &off_1E818BCD0;
    v136 = v134[1];
    v134[1] = v135;
    if (v136)
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  }
  v166[0] = &llvm::CFLAndersAA::Key;
  v137 = sub_1C54E652C(a2, v166);
  if (!v137[1])
  {
    v138 = v137;
    v139 = (_QWORD *)operator new();
    *v139 = &off_1E818BD28;
    v140 = v138[1];
    v138[1] = v139;
    if (v140)
      (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  }
  v166[0] = &llvm::CFLSteensAA::Key;
  v141 = sub_1C54E652C(a2, v166);
  if (!v141[1])
  {
    v142 = v141;
    v143 = (_QWORD *)operator new();
    *v143 = &off_1E818BD80;
    v144 = v142[1];
    v142[1] = v143;
    if (v144)
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  }
  v166[0] = &llvm::objcarc::ObjCARCAA::Key;
  v145 = sub_1C54E652C(a2, v166);
  if (!v145[1])
  {
    v146 = v145;
    v147 = (_QWORD *)operator new();
    *v147 = &off_1E818BDD8;
    v148 = v146[1];
    v146[1] = v147;
    if (v148)
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  }
  v166[0] = &llvm::SCEVAA::Key;
  v149 = sub_1C54E652C(a2, v166);
  if (!v149[1])
  {
    v150 = v149;
    v151 = (_QWORD *)operator new();
    *v151 = &off_1E818BE30;
    v152 = v150[1];
    v150[1] = v151;
    if (v152)
      (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  }
  v166[0] = &llvm::ScopedNoAliasAA::Key;
  v153 = sub_1C54E652C(a2, v166);
  if (!v153[1])
  {
    v154 = v153;
    v155 = (_QWORD *)operator new();
    *v155 = &off_1E818BE88;
    v156 = v154[1];
    v154[1] = v155;
    if (v156)
      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  }
  v166[0] = &llvm::TypeBasedAA::Key;
  result = sub_1C54E652C(a2, v166);
  if (!result[1])
  {
    v158 = result;
    v159 = (_QWORD *)operator new();
    *v159 = &off_1E818BEE0;
    result = (_QWORD *)v158[1];
    v158[1] = v159;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v160 = *(unsigned int *)(a1 + 1592);
  if ((_DWORD)v160)
  {
    v161 = *(_QWORD *)(a1 + 1584);
    v162 = 32 * v160;
    v163 = (_QWORD *)(v161 + 24);
    do
    {
      if (!*v163)
        sub_1C485C2F0();
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _DWORD *))(*(_QWORD *)*v163 + 48))(*v163, a2);
      v163 += 4;
      v162 -= 32;
    }
    while (v162);
  }
  return result;
}

void llvm::PassBuilder::parsePipelineText(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t first_of;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *__p;
  char *v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  void **v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[6];

  v3 = a2;
  v4 = a1;
  v47[4] = *MEMORY[0x1E0C80C00];
  v37 = a1;
  v38 = a2;
  v35 = 0uLL;
  v36 = 0;
  v45 = v47;
  v47[0] = &v35;
  v6 = 1;
  v46 = 0x400000001;
  v7 = v47;
  while (1)
  {
    v8 = (uint64_t *)v7[v6 - 1];
    first_of = llvm::StringRef::find_first_of(&v37, ",()", 3, 0);
    v10 = first_of;
    if (v3 >= first_of)
      v11 = first_of;
    else
      v11 = v3;
    *(_QWORD *)&v32 = v4;
    *((_QWORD *)&v32 + 1) = v11;
    v34 = 0;
    v33 = 0uLL;
    v12 = v8[1];
    v13 = v8[2];
    if (v12 >= v13)
    {
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v8) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        abort();
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *v8) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v24 = 0x666666666666666;
      v43 = v8 + 2;
      if (v24 > 0x666666666666666)
        sub_1C4764EE4();
      v26 = 5 * v24;
      v27 = (char *)operator new(40 * v24);
      v28 = &v27[40 * v23];
      __p = v27;
      v40 = v28;
      *(_OWORD *)v28 = v32;
      *((_QWORD *)v28 + 3) = 0;
      *((_QWORD *)v28 + 4) = 0;
      *((_QWORD *)v28 + 2) = 0;
      v34 = 0;
      v33 = 0uLL;
      v41 = v28 + 40;
      v42 = &v27[8 * v26];
      sub_1C61A7D7C(v8, &__p);
      v14 = v8[1];
      v30 = v40;
      v29 = v41;
      if (v41 != v40)
      {
        do
        {
          v31 = v29 - 40;
          v44 = (void **)(v29 - 24);
          sub_1C5A59000(&v44);
          v29 = v31;
        }
        while (v31 != v30);
      }
      if (__p)
        operator delete(__p);
    }
    else
    {
      *(_OWORD *)v12 = v32;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_OWORD *)(v12 + 16) = v33;
      *(_QWORD *)(v12 + 32) = v34;
      v14 = v12 + 40;
      v33 = 0uLL;
      v34 = 0;
    }
    v8[1] = v14;
    __p = &v33;
    sub_1C5A59000((void ***)&__p);
    if (v10 == -1)
    {
      v6 = v46;
      goto LABEL_38;
    }
    v15 = *(unsigned __int8 *)(v4 + v10);
    v16 = v3 >= v10 + 1 ? v10 + 1 : v3;
    v17 = v4 + v16;
    v3 -= v16;
    v37 = v4 + v16;
    v38 = v3;
    if (v15 != 40)
      break;
    v18 = v8[1];
    v19 = v46;
    if (v46 >= (unint64_t)HIDWORD(v46))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 8);
      v19 = v46;
    }
    *((_QWORD *)v45 + v19) = v18 - 24;
    v6 = v46 + 1;
    LODWORD(v46) = v46 + 1;
LABEL_17:
    v7 = v45;
    v4 = v17;
  }
  if (v15 == 44)
  {
    v6 = v46;
    goto LABEL_17;
  }
  v20 = v46 - 1;
  if ((_DWORD)v46 == 1)
    goto LABEL_39;
  v21 = 0;
  v6 = v46 - 1;
  while (1)
  {
    LODWORD(v46) = v6;
    if (v3 == v21)
      break;
    v22 = *(unsigned __int8 *)(v17 + v21);
    if (v22 != 41)
    {
      if (v22 != 44)
        goto LABEL_39;
      v17 += v21 + 1;
      v3 += ~v21;
      v37 = v4 + v16 + v21 + 1;
      v38 = v3;
      goto LABEL_17;
    }
    ++v21;
    --v6;
    if (v20 == (_DWORD)v21)
      goto LABEL_39;
  }
LABEL_38:
  if (v6 >= 2)
  {
LABEL_39:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_41;
  }
  *(_OWORD *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v36;
  v36 = 0;
  v35 = 0uLL;
  *(_BYTE *)(a3 + 24) = 1;
LABEL_41:
  if (v45 != v47)
    free(v45);
  v45 = &v35;
  sub_1C5A59000((void ***)&v45);
}

void llvm::PassBuilder::parseModulePass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  void ***v30;
  uint64_t v31;
  unint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  _WORD *v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t *v67;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v90;
  uint64_t v91;
  BOOL v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  BOOL v107;
  int v108;
  uint64_t v109;
  __int16 v112;
  unsigned __int8 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  int v120;
  int v121;
  int v123;
  int v124;
  unint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  _BOOL8 v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t *v137;
  BOOL v143;
  BOOL v156;
  BOOL v181;
  _BOOL8 v193;
  int v202;
  int v203;
  BOOL v214;
  BOOL v222;
  BOOL v232;
  BOOL v237;
  BOOL v239;
  BOOL v258;
  BOOL v264;
  BOOL v274;
  BOOL v288;
  BOOL v297;
  uint64_t v298;
  char *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  unint64_t v304;
  char *v305;
  int v306;
  int v307;
  BOOL v308;
  uint64_t v309;
  unint64_t v311;
  uint64_t v312;
  unsigned int v320;
  unint64_t v321;
  unsigned __int16 *v322;
  uint64_t v323;
  int v324;
  int v325;
  BOOL v326;
  int v327;
  int v328;
  unint64_t v330;
  BOOL v333;
  uint64_t v334;
  uint64_t *v335;
  int v337;
  int v338;
  uint64_t *v340;
  uint64_t *v341;
  char *v342;
  uint64_t v343;
  char v345;
  uint64_t *v346;
  uint64_t *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t *v353;
  uint64_t *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v360;
  uint64_t *v361;
  char *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  char *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  char *v370;
  uint64_t v371;
  uint64_t v373;
  uint64_t (**v374)();
  uint64_t *v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t (**v378)();
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  int v385;
  char *v386;
  uint64_t v387;
  void (*v388)(void);
  uint64_t v391;
  uint64_t (**v392)();
  char *v393;
  BOOL v396;
  BOOL v397;
  BOOL v399;
  BOOL v403;
  uint64_t (**v408)();
  int v410;
  BOOL v413;
  BOOL v416;
  uint64_t v429;
  int64x2_t v430;
  uint64_t v431;
  int v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  char *v438;
  void *v439;
  llvm *v440;
  char *v441;
  char v442;
  _QWORD *v443;
  _BYTE *v444;
  llvm *v445;
  uint64_t v446;
  _BOOL4 v447;
  BOOL v448;
  unint64_t v449;
  int v450;
  uint64_t v451;
  unsigned int *v452;
  unsigned int v453;
  unsigned int v454;
  void *v455;
  BOOL v456;
  uint64_t v457;
  unsigned __int8 *v458;
  int v459;
  unint64_t v460;
  uint64_t v461;
  char v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int *v466;
  unsigned int v467;
  unsigned int v468;
  uint64_t v469;
  unsigned int *v470;
  unsigned int v471;
  unsigned int v472;
  _QWORD *v473;
  uint64_t v474;
  unsigned __int8 *v478;
  int v479;
  unint64_t v480;
  llvm *v481;
  _QWORD *v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  unsigned __int8 *v487;
  int v488;
  unint64_t v489;
  _QWORD *v490;
  char *v491;
  void *v492;
  uint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  char *v499;
  unsigned __int8 *v502;
  int v503;
  unint64_t v504;
  uint64_t v509;
  char v510;
  uint64_t v511;
  char *v512;
  uint64_t (**v513)();
  unint64_t v514;
  BOOL v516;
  BOOL v518;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  llvm *v525;
  uint64_t (**v526)();
  BOOL v529;
  BOOL v534;
  BOOL v535;
  BOOL v538;
  char *v542;
  char v543;
  char v544;
  BOOL v551;
  BOOL v554;
  BOOL v555;
  _BOOL8 v558;
  llvm *v559;
  BOOL v564;
  BOOL v577;
  llvm *v582;
  BOOL v591;
  BOOL v596;
  BOOL v606;
  void *v608;
  void **v609;
  uint64_t v610;
  BOOL v615;
  uint64_t v619;
  void *v621;
  void *v622;
  uint64_t v623;
  uint64_t v630;
  llvm *v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  BOOL v640;
  BOOL v641;
  BOOL v643;
  BOOL v644;
  BOOL v648;
  BOOL v653;
  BOOL v655;
  BOOL v656;
  BOOL v659;
  BOOL v661;
  BOOL v665;
  BOOL v668;
  BOOL v669;
  BOOL v672;
  BOOL v673;
  BOOL v676;
  uint64_t (**v680)();
  uint64_t v685;
  llvm *v686;
  uint64_t v687;
  uint64_t v688;
  BOOL v692;
  BOOL v696;
  uint64_t i;
  _BYTE *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int v706;
  uint64_t v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  unint64_t v714;
  uint64_t *v715;
  __int128 v716;
  int v717;
  uint64_t v718;
  __int128 v719;
  char v720;
  __int128 v721;
  char v722;
  uint64_t v723;
  __int128 v724;
  char v725;
  __int128 v726;
  char v727;
  _BYTE v728[68];
  _BYTE v729[68];
  void *__p;
  unint64_t v731;
  char v732;
  void *p_p;
  unint64_t v734;
  uint64_t v735;
  __int16 v736;
  _BYTE *v737;
  unint64_t v738;
  _BYTE __dst[232];
  void *v740[9];
  int v741;
  int v742;
  __int128 v743;
  __int128 v744;
  int v745;
  int v746;
  __int128 v747;
  __int128 v748;
  int v749;
  int v750;
  uint64_t v751;
  void *v752[2];
  uint64_t v753;
  _BYTE *v754;
  int v755;
  int v756;
  _BYTE v757[176];
  _OWORD *v758;
  int v759;
  _OWORD v760[2];
  int v761;
  llvm **v762;
  int v763;
  llvm *v764;
  __int128 v765;
  int v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  uint64_t v770;
  _DWORD v771[820];
  __int128 v772;
  int v773;
  __int128 v774;
  _BYTE v775[28];
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  _BYTE v779[24];
  uint64_t v780;
  __int128 v781;
  __int128 v782;
  uint64_t v783;

  v5 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = (uint64_t *)v6;
  v10 = v9;
  v11 = v5;
  v13 = v12;
  v783 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(v5 + 1264);
  v15 = *(unsigned int *)(v5 + 1272);
  if (*(_QWORD *)(v6 + 16) == *(_QWORD *)(v6 + 24))
  {
    if ((_DWORD)v15)
    {
      v16 = (_QWORD *)(v14 + 24);
      v17 = (unsigned __int8 *)(32 * v15);
      v4 = 0xCCCCCCCCCCCCCCCDLL;
      while (1)
      {
        v31 = v8[2];
        v32 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v31) >> 3);
        *(_OWORD *)__dst = *(_OWORD *)v8;
        *(_QWORD *)v779 = v31;
        *(_QWORD *)&v779[8] = v32;
        if (!*v16)
          goto LABEL_2235;
        if ((*(unsigned int (**)(_QWORD, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)*v16 + 48))(*v16, __dst, v10, v779))
        {
          break;
        }
        v16 += 4;
        v17 -= 32;
        if (!v17)
          goto LABEL_32;
      }
LABEL_284:
      *v13 = 0;
      return;
    }
LABEL_32:
    v17 = (unsigned __int8 *)*v8;
    v4 = v8[1];
    v33 = sub_1C5A3BDE4(*v8, v4);
    if (v33)
    {
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x300000000;
      if ((llvm::Regex::match((uint64_t)&unk_1ED81A520, (char *)v17, v4, (uint64_t)__dst, 0) & 1) == 0)
      {
        *(_QWORD *)v779 = "unknown default pipeline alias '{0}'";
        *(_QWORD *)&v779[8] = 36;
        *(_QWORD *)&v779[16] = &v782;
        v780 = 1;
        *(_QWORD *)&v781 = &unk_1E818C130;
        *((_QWORD *)&v781 + 1) = v8;
        *(_QWORD *)&v782 = &v781;
        sub_1C4DCAF2C((uint64_t)v779, &__p);
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v90 = qword_1ED836B58[0];
        v91 = operator new();
        v736 = 260;
        p_p = &__p;
        *(_QWORD *)v91 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&p_p, (_QWORD *)(v91 + 8));
        *(_QWORD *)(v91 + 32) = 3;
        *(_QWORD *)(v91 + 40) = v90;
        *(_BYTE *)(v91 + 48) = 1;
        *v13 = v91;
        if (v732 < 0)
          operator delete(__p);
        goto LABEL_1066;
      }
      v34 = *(_QWORD *)__dst;
      if (*(_QWORD *)(*(_QWORD *)__dst + 40) != 2)
      {
        v36 = 0;
        LOBYTE(v37) = 0;
        goto LABEL_991;
      }
      v35 = *(_WORD **)(*(_QWORD *)__dst + 32);
      switch(*v35)
      {
        case 0x304F:
          v104 = &llvm::OptimizationLevel::O0;
          break;
        case 0x314F:
          v104 = &llvm::OptimizationLevel::O1;
          break;
        case 0x324F:
          v104 = &llvm::OptimizationLevel::O2;
          break;
        case 0x334F:
          v104 = &llvm::OptimizationLevel::O3;
          break;
        case 0x734F:
          v104 = &llvm::OptimizationLevel::Os;
          break;
        default:
          v22 = *v35 == 31311;
          v36 = (unint64_t)v22 << 25;
          if (v22)
            LOBYTE(v37) = 2;
          else
            LOBYTE(v37) = 0;
LABEL_991:
          v320 = v37 | ((_DWORD)v36 << 8);
          v321 = v36 >> 24;
          if (!(v321 | v320))
          {
            v322 = *(unsigned __int16 **)(*(_QWORD *)__dst + 16);
            v323 = *(_QWORD *)(*(_QWORD *)__dst + 24);
            if (v323 == 3)
            {
              v328 = *v322;
              v325 = *((unsigned __int8 *)v322 + 2);
              v326 = v328 == 29804;
              v327 = 111;
            }
            else
            {
              if (v323 != 7)
              {
                v330 = v320 | ((unint64_t)v321 << 32);
                if (v323 == 12)
                {
                  v345 = *(_QWORD *)v322 == 0x2D6572702D6F746CLL && *((_DWORD *)v322 + 2) == 1802398060;
                }
                else
                {
                  if (v323 != 16)
                    goto LABEL_1035;
                  if (*(_QWORD *)v322 != 0x2D6F746C6E696874 || *((_QWORD *)v322 + 1) != 0x6B6E696C2D657270)
                    goto LABEL_1035;
                  v345 = 1;
                }
LABEL_1036:
                llvm::PassBuilder::buildO0DefaultPipeline((_BYTE *)v11, v330, v345, v779);
                v347 = *(uint64_t **)&v779[8];
                v346 = *(uint64_t **)v779;
                if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
                {
                  v348 = *(char **)(v10 + 8);
                  do
                  {
                    if ((unint64_t)v348 >= *(_QWORD *)(v10 + 16))
                    {
                      v348 = sub_1C4D62F9C((char **)v10, v346);
                    }
                    else
                    {
                      v349 = *v346;
                      *v346 = 0;
                      *(_QWORD *)v348 = v349;
                      v348 += 8;
                    }
                    *(_QWORD *)(v10 + 8) = v348;
                    ++v346;
                  }
                  while (v346 != v347);
                }
                goto LABEL_1065;
              }
              v324 = *(_DWORD *)v322;
              v325 = *(_DWORD *)((char *)v322 + 3);
              v326 = v324 == 1852401780;
              v327 = 1869900910;
            }
            if (!v326 || v325 != v327)
            {
              v330 = v320 | ((unint64_t)v321 << 32);
LABEL_1035:
              v345 = 0;
              goto LABEL_1036;
            }
          }
          v333 = ((_DWORD)v321 != 2 || v320 != 2) && v320 > 1;
          *(_BYTE *)(v11 + 9) = v333;
          *(_BYTE *)(v11 + 10) = v333;
          v335 = *(uint64_t **)(v34 + 16);
          v334 = *(_QWORD *)(v34 + 24);
          switch(v334)
          {
            case 16:
              v357 = *v335;
              v358 = v335[1];
              if (v357 == 0x2D6F746C6E696874 && v358 == 0x6B6E696C2D657270)
              {
                llvm::PassBuilder::buildThinLTOPreLinkDefaultPipeline(v11, v320 | ((unint64_t)v321 << 32), (uint64_t)v779);
                v365 = *(uint64_t **)&v779[8];
                v364 = *(uint64_t **)v779;
                if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
                {
                  v366 = *(char **)(v10 + 8);
                  do
                  {
                    if ((unint64_t)v366 >= *(_QWORD *)(v10 + 16))
                    {
                      v366 = sub_1C4D62F9C((char **)v10, v364);
                    }
                    else
                    {
                      v367 = *v364;
                      *v364 = 0;
                      *(_QWORD *)v366 = v367;
                      v366 += 8;
                    }
                    *(_QWORD *)(v10 + 8) = v366;
                    ++v364;
                  }
                  while (v364 != v365);
                }
                goto LABEL_1065;
              }
              break;
            case 12:
              v350 = *v335;
              v351 = *((_DWORD *)v335 + 2);
              if (v350 == 0x2D6572702D6F746CLL && v351 == 1802398060)
              {
                llvm::PassBuilder::buildPerModuleDefaultPipeline(v11, v320 | ((unint64_t)v321 << 32), 1, (uint64_t)v779);
                v354 = *(uint64_t **)&v779[8];
                v353 = *(uint64_t **)v779;
                if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
                {
                  v355 = *(char **)(v10 + 8);
                  do
                  {
                    if ((unint64_t)v355 >= *(_QWORD *)(v10 + 16))
                    {
                      v355 = sub_1C4D62F9C((char **)v10, v353);
                    }
                    else
                    {
                      v356 = *v353;
                      *v353 = 0;
                      *(_QWORD *)v355 = v356;
                      v355 += 8;
                    }
                    *(_QWORD *)(v10 + 8) = v355;
                    ++v353;
                  }
                  while (v353 != v354);
                }
                goto LABEL_1065;
              }
              break;
            case 7:
              if (*(_DWORD *)v335 == 1634100580 && *(_DWORD *)((char *)v335 + 3) == 1953264993)
              {
                llvm::PassBuilder::buildPerModuleDefaultPipeline(v11, v320 | ((unint64_t)v321 << 32), 0, (uint64_t)v779);
                v369 = *(uint64_t **)&v779[8];
                v368 = *(uint64_t **)v779;
                if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
                {
                  v370 = *(char **)(v10 + 8);
                  do
                  {
                    if ((unint64_t)v370 >= *(_QWORD *)(v10 + 16))
                    {
                      v370 = sub_1C4D62F9C((char **)v10, v368);
                    }
                    else
                    {
                      v371 = *v368;
                      *v368 = 0;
                      *(_QWORD *)v370 = v371;
                      v370 += 8;
                    }
                    *(_QWORD *)(v10 + 8) = v370;
                    ++v368;
                  }
                  while (v368 != v369);
                }
                goto LABEL_1065;
              }
              v337 = *(_DWORD *)v335;
              v338 = *(_DWORD *)((char *)v335 + 3);
              if (v337 == 1852401780 && v338 == 1869900910)
              {
                llvm::PassBuilder::buildThinLTODefaultPipeline(v11, v320 | ((unint64_t)v321 << 32), 0, (uint64_t)v779);
                v341 = *(uint64_t **)&v779[8];
                v340 = *(uint64_t **)v779;
                if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
                {
                  v342 = *(char **)(v10 + 8);
                  do
                  {
                    if ((unint64_t)v342 >= *(_QWORD *)(v10 + 16))
                    {
                      v342 = sub_1C4D62F9C((char **)v10, v340);
                    }
                    else
                    {
                      v343 = *v340;
                      *v340 = 0;
                      *(_QWORD *)v342 = v343;
                      v342 += 8;
                    }
                    *(_QWORD *)(v10 + 8) = v342;
                    ++v340;
                  }
                  while (v340 != v341);
                }
                goto LABEL_1065;
              }
              break;
          }
          llvm::PassBuilder::buildLTODefaultPipeline(v11, (llvm *)(v320 | ((unint64_t)v321 << 32)), 0, v779);
          v361 = *(uint64_t **)&v779[8];
          v360 = *(uint64_t **)v779;
          if (*(_QWORD *)v779 != *(_QWORD *)&v779[8])
          {
            v362 = *(char **)(v10 + 8);
            do
            {
              if ((unint64_t)v362 >= *(_QWORD *)(v10 + 16))
              {
                v362 = sub_1C4D62F9C((char **)v10, v360);
              }
              else
              {
                v363 = *v360;
                *v360 = 0;
                *(_QWORD *)v362 = v363;
                v362 += 8;
              }
              *(_QWORD *)(v10 + 8) = v362;
              ++v360;
            }
            while (v360 != v361);
          }
LABEL_1065:
          p_p = v779;
          sub_1C4764BBC((void ***)&p_p);
          *v13 = 0;
LABEL_1066:
          if (*(_BYTE **)__dst != &__dst[16])
            free(*(void **)__dst);
          return;
      }
      v37 = *v104;
      v36 = (unint64_t)*v104 >> 8;
      goto LABEL_991;
    }
    if (v4 == 18)
    {
      if (*(_QWORD *)v17 == 0x3C65726975716572
        && *((_QWORD *)v17 + 1) == 0x706172676C6C6163
        && *((_WORD *)v17 + 8) == 15976)
      {
        sub_1C62E0CD4();
        goto LABEL_284;
      }
      if (*(_QWORD *)v17 == 0x6164696C61766E69
        && *((_QWORD *)v17 + 1) == 0x66697265763C6574
        && *((_WORD *)v17 + 8) == 15993)
      {
        sub_1C62E0FC8();
        goto LABEL_284;
      }
      if (*(_QWORD *)v17 == 0x6C672D7265776F6CLL
        && *((_QWORD *)v17 + 1) == 0x6F74642D6C61626FLL
        && *((_WORD *)v17 + 8) == 29554)
      {
        sub_1C62E1C6C();
        goto LABEL_284;
      }
      if (*(_QWORD *)v17 == 0x74732D746E697270
        && *((_QWORD *)v17 + 1) == 0x656661732D6B6361
        && *((_WORD *)v17 + 8) == 31092)
      {
        *(_QWORD *)__dst = llvm::dbgs((llvm *)v33);
        sub_1C62E2140();
        goto LABEL_284;
      }
      if (*(_QWORD *)v17 == 0x636E75662D6F7072
        && *((_QWORD *)v17 + 1) == 0x7474612D6E6F6974
        && *((_WORD *)v17 + 8) == 29554)
      {
        sub_1C62E2420();
        goto LABEL_284;
      }
      if (*(_QWORD *)v17 == 0x6F7270656C6F6877
        && *((_QWORD *)v17 + 1) == 0x697665646D617267
        && *((_WORD *)v17 + 8) == 29810)
      {
        *(_QWORD *)__dst = 0;
        *(_QWORD *)&__dst[8] = 0;
        __dst[16] = 1;
        sub_1C62E27D0();
        goto LABEL_284;
      }
      v715 = v13;
LABEL_98:
      LODWORD(v13) = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      LODWORD(v16) = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
LABEL_99:
      v65 = 0;
      v66 = 0;
LABEL_100:
      v712 = __PAIR64__(v61, v60);
      v709 = __PAIR64__(v64, v54);
      v713 = __PAIR64__(v65, v53);
      v708 = __PAIR64__(v66, v57);
      v710 = __PAIR64__(v52, v58);
      v714 = __PAIR64__(v56, v59);
      v711 = __PAIR64__(v62, v63);
      if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
      {
        v67 = v715;
        if (v4 >= 0xC)
        {
LABEL_102:
          if (*(_QWORD *)v17 != 0x7478652D706F6F6CLL || *((_DWORD *)v17 + 2) != 1952670066)
            goto LABEL_111;
          v69 = 12;
          if (v4 < 0xC)
            v69 = v4;
          v17 += v69;
          v4 -= v69;
        }
        if (!v4)
        {
          v72 = 0;
LABEL_223:
          sub_1C5A551F4((uint64_t)__dst, (uint64_t)v17, v72, "single", 6uLL, (uint64_t)"LoopExtractor", 13);
          if ((__dst[8] & 1) != 0)
          {
            v109 = *(_QWORD *)__dst;
          }
          else
          {
            if (__dst[0])
              v129 = 1;
            else
              v129 = -1;
            *(_DWORD *)v779 = v129;
            sub_1C62E2B54(v10, (int *)v779);
            v109 = 0;
          }
          *v67 = v109;
          return;
        }
LABEL_111:
        v70 = v17 + 1;
        v71 = *v17;
        v72 = v4 - (v71 == 60);
        if (v71 == 60)
        {
          ++v17;
          if (v72)
          {
            if (v70[v72 - 1] == 62 && v72 >= v72 - 1)
              --v72;
          }
        }
        goto LABEL_223;
      }
      v707 = 0;
      v706 = 0;
LABEL_176:
      if (sub_1C5A3C044((char *)v17, v4, "hwasan", 6uLL))
      {
        if (v4 >= 6)
        {
LABEL_178:
          if (*(_DWORD *)v17 != 1935767400 || *((_WORD *)v17 + 2) != 28257)
            goto LABEL_187;
          v100 = 6;
          if (v4 < 6)
            v100 = v4;
          v17 += v100;
          v4 -= v100;
        }
        if (!v4)
          goto LABEL_987;
LABEL_187:
        if (*v17 == 60)
        {
          if (v4 == 1)
            goto LABEL_987;
          v101 = (char *)(v17 + 1);
          if (v17[v4 - 1] == 62)
          {
            if (v4 - 1 >= v4 - 2)
              v4 -= 2;
            else
              --v4;
            __p = v17 + 1;
            v731 = v4;
            if (v4)
            {
              ++v17;
LABEL_239:
              v112 = 0;
              v113 = 0;
              while (1)
              {
                __dst[0] = 59;
                v114 = llvm::StringRef::find((uint64_t *)&__p, __dst, 1uLL, 0);
                if (v4 >= v114)
                  v115 = v114;
                else
                  v115 = v4;
                if (v4 >= v114 + 1)
                  v116 = v114 + 1;
                else
                  v116 = v4;
                v117 = &v101[v116];
                v118 = v4 - v116;
                if (v114 == -1)
                  v119 = (char *)v17;
                else
                  v119 = v101;
                if (v114 == -1)
                {
                  v115 = v4;
                  v101 = 0;
                }
                else
                {
                  v101 = v117;
                }
                v737 = v119;
                v738 = v115;
                if (v114 == -1)
                  v4 = 0;
                else
                  v4 = v118;
                __p = v101;
                v731 = v4;
                if (v115 == 6)
                {
                  v123 = *(_DWORD *)v119;
                  v124 = *((unsigned __int16 *)v119 + 2);
                  if (v123 != 1852990827 || v124 != 27749)
                  {
LABEL_271:
                    *(_QWORD *)__dst = "invalid HWAddressSanitizer pass parameter '{0}' ";
                    *(_QWORD *)&__dst[8] = 48;
                    *(_QWORD *)&__dst[16] = &__dst[48];
                    *(_QWORD *)&__dst[24] = 1;
                    *(_QWORD *)&__dst[32] = &unk_1E8168E00;
                    *(_QWORD *)&__dst[40] = &v737;
                    *(_QWORD *)&__dst[48] = &__dst[32];
                    sub_1C4DCAF2C((uint64_t)__dst, &p_p);
                    if (!atomic_load(qword_1ED836B58))
                      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
                    v127 = qword_1ED836B58[0];
                    v128 = operator new();
                    LOWORD(v781) = 260;
                    *(_QWORD *)v779 = &p_p;
                    *(_QWORD *)v128 = off_1E81A0C88;
                    llvm::Twine::str((llvm::Twine *)v779, (_QWORD *)(v128 + 8));
                    *(_QWORD *)(v128 + 32) = 3;
                    *(_QWORD *)(v128 + 40) = v127;
                    *(_BYTE *)(v128 + 48) = 1;
                    if (SHIBYTE(v735) < 0)
                      operator delete(p_p);
                    *v715 = v128;
                    return;
                  }
                  v113 = 1;
                }
                else
                {
                  if (v115 != 7)
                    goto LABEL_271;
                  v120 = *(_DWORD *)v119;
                  v121 = *(_DWORD *)(v119 + 3);
                  if (v120 != 1868785010 || v121 != 1919252079)
                    goto LABEL_271;
                  v112 = 1;
                }
                v17 = (unsigned __int8 *)v101;
                if (!v4)
                  goto LABEL_988;
              }
            }
LABEL_987:
            v113 = 0;
            v112 = 0;
LABEL_988:
            __dst[2] = 0;
            *(_WORD *)__dst = v113 | (unsigned __int16)(v112 << 8);
            sub_1C62E2BB8(v10, (__int16 *)__dst);
            goto LABEL_1571;
          }
          ++v17;
          --v4;
        }
        else
        {
          v101 = (char *)v17;
        }
        __p = v17;
        v731 = v4;
        goto LABEL_239;
      }
      if (sub_1C5A3C044((char *)v17, v4, "asan-module", 0xBuLL))
      {
        if (v4 >= 0xB)
        {
LABEL_911:
          v297 = *(_QWORD *)v17 == 0x646F6D2D6E617361 && *(_QWORD *)(v17 + 3) == 0x656C75646F6D2D6ELL;
          v102 = v715;
          if (!v297)
            goto LABEL_920;
          v298 = 11;
          if (v4 < 0xB)
            v298 = v4;
          v17 += v298;
          v4 -= v298;
        }
        else
        {
          v102 = v715;
        }
        if (!v4)
          goto LABEL_1092;
LABEL_920:
        if (*v17 == 60)
        {
          if (v4 == 1)
            goto LABEL_1092;
          v299 = (char *)(v17 + 1);
          if (v17[v4 - 1] == 62)
          {
            if (v4 - 1 >= v4 - 2)
              v4 -= 2;
            else
              --v4;
            __p = v17 + 1;
            v731 = v4;
            if (v4)
            {
              ++v17;
              do
              {
LABEL_931:
                __dst[0] = 59;
                v300 = llvm::StringRef::find((uint64_t *)&__p, __dst, 1uLL, 0);
                if (v4 >= v300)
                  v301 = v300;
                else
                  v301 = v4;
                if (v4 >= v300 + 1)
                  v302 = v300 + 1;
                else
                  v302 = v4;
                v303 = &v299[v302];
                v304 = v4 - v302;
                if (v300 == -1)
                  v305 = (char *)v17;
                else
                  v305 = v299;
                if (v300 == -1)
                {
                  v301 = v4;
                  v299 = 0;
                }
                else
                {
                  v299 = v303;
                }
                v737 = v305;
                v738 = v301;
                if (v300 == -1)
                  v4 = 0;
                else
                  v4 = v304;
                __p = v299;
                v731 = v4;
                if (v301 != 6
                  || ((v306 = *(_DWORD *)v305, v307 = *((unsigned __int16 *)v305 + 2), v306 == 1852990827)
                    ? (v308 = v307 == 27749)
                    : (v308 = 0),
                      !v308))
                {
                  *(_QWORD *)__dst = "invalid AddressSanitizer pass parameter '{0}' ";
                  *(_QWORD *)&__dst[8] = 46;
                  *(_QWORD *)&__dst[16] = &__dst[48];
                  *(_QWORD *)&__dst[24] = 1;
                  *(_QWORD *)&__dst[32] = &unk_1E8168E00;
                  *(_QWORD *)&__dst[40] = &v737;
                  *(_QWORD *)&__dst[48] = &__dst[32];
                  sub_1C4DCAF2C((uint64_t)__dst, &p_p);
                  if (!atomic_load(qword_1ED836B58))
                    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
                  v311 = qword_1ED836B58[0];
                  v312 = operator new();
                  LOWORD(v781) = 260;
                  *(_QWORD *)v779 = &p_p;
                  *(_QWORD *)v312 = off_1E81A0C88;
                  llvm::Twine::str((llvm::Twine *)v779, (_QWORD *)(v312 + 8));
                  *(_QWORD *)(v312 + 32) = 3;
                  *(_QWORD *)(v312 + 40) = v311;
                  *(_BYTE *)(v312 + 48) = 1;
                  if (SHIBYTE(v735) < 0)
                    operator delete(p_p);
                  *v102 = v312;
                  return;
                }
                v17 = (unsigned __int8 *)v299;
              }
              while (v4);
              v309 = 0x100000001;
LABEL_1093:
              *(_QWORD *)__dst = v309;
              *(_QWORD *)&__dst[8] = 0x100000001;
              sub_1C62E2C24();
              *v102 = 0;
              return;
            }
LABEL_1092:
            v309 = 0x100000000;
            goto LABEL_1093;
          }
          ++v17;
          --v4;
        }
        else
        {
          v299 = (char *)v17;
        }
        __p = v17;
        v731 = v4;
        goto LABEL_931;
      }
      if ((_DWORD)v714)
      {
        if (*(_QWORD *)v17 == 0x6F6D6F7270677261 && *((_DWORD *)v17 + 2) == 1852795252)
        {
          v391 = operator new();
          *(_QWORD *)v391 = &unk_1E81914A0;
          *(_DWORD *)(v391 + 8) = 3;
          goto LABEL_1360;
        }
      }
      if (HIDWORD(v714))
      {
        if (*(_QWORD *)v17 == 0x6164696C61766E69 && *(_QWORD *)(v17 + 7) == 0x3E6C6C613C657461)
        {
          v391 = operator new();
          v392 = &off_1E818D1A0;
LABEL_1359:
          *(_QWORD *)v391 = v392;
          goto LABEL_1360;
        }
      }
      if ((_DWORD)v13)
      {
        v107 = *(_QWORD *)v17 == 0x6E6F6974636E7566 && *(_QWORD *)(v17 + 6) == 0x73727474612D6E6FLL;
        v108 = HIDWORD(v713);
        if (!v107)
        {
          v705 = 0;
          goto LABEL_292;
        }
        v391 = operator new();
        v393 = (char *)&unk_1E8191450;
        goto LABEL_1358;
      }
      if (v4 == 16)
      {
        if (*(_QWORD *)v17 == 0x7475626972747461 && *((_QWORD *)v17 + 1) == 0x63637367632D726FLL)
        {
          v391 = operator new();
          v393 = (char *)&unk_1E8191410;
        }
        else
        {
          if (*(_QWORD *)v17 != 0x6F2D706D6E65706FLL || *((_QWORD *)v17 + 1) != 0x63637367632D7470)
          {
            v705 = 1;
LABEL_291:
            v108 = HIDWORD(v713);
LABEL_292:
            if (!HIDWORD(v707)
              || (*(_QWORD *)v17 == 0x6C70732D6F726F63 ? (v130 = *((unsigned __int16 *)v17 + 4) == 29801) : (v130 = 0),
                  !v130))
            {
              if (!v108)
              {
                v132 = sub_1C5A3C044((char *)v17, v4, "inline", 6uLL);
                if (!v132)
                {
                  if (v4 == 4)
                  {
                    v135 = HIDWORD(v714);
                    v136 = v713;
                    if (*(_DWORD *)v17 == 1701012577)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190CD0;
                      goto LABEL_1565;
                    }
                    v133 = 0;
                    v134 = 1;
                  }
                  else
                  {
                    v135 = HIDWORD(v714);
                    v136 = v713;
                    if (v4 == 7)
                    {
                      if (*(_DWORD *)v17 == 1697472865 && *(_DWORD *)(v17 + 3) == 1818326629)
                      {
                        memset(__dst, 0, 104);
                        sub_1C62E2C80((uint64_t)v779, (uint64_t *)__dst);
                        sub_1C5A3BB70();
                        v484 = *(_QWORD *)v779;
                        *(_QWORD *)v779 = 0;
                        if (v484)
                          (*(void (**)(uint64_t))(*(_QWORD *)v484 + 8))(v484);
                        llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)__dst);
                        goto LABEL_1571;
                      }
                      v134 = 0;
                      v133 = 1;
                    }
                    else
                    {
                      if (v4 == 18)
                      {
                        if (*(_QWORD *)v17 == 0x637369642D646461
                          && *((_QWORD *)v17 + 1) == 0x6F74616E696D6972
                          && *((_WORD *)v17 + 8) == 29554)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E81921D0;
                          goto LABEL_1565;
                        }
                      }
                      else if ((_DWORD)v713)
                      {
                        if (*(_QWORD *)v17 == 0x6973736572676761
                          && *((_QWORD *)v17 + 1) == 0x6374736E692D6576
                          && *(_QWORD *)(v17 + 14) == 0x656E69626D6F6374)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E8190E90;
                          goto LABEL_1565;
                        }
                      }
                      else if ((_DWORD)v13)
                      {
                        if (*(_QWORD *)v17 == 0x622D656D75737361 && *(_QWORD *)(v17 + 6) == 0x7265646C6975622DLL)
                        {
                          v381 = operator new();
                          v408 = &off_1E818D260;
                          goto LABEL_1566;
                        }
                      }
                      v133 = 0;
                      v134 = 0;
                    }
                  }
LABEL_1149:
                  if (v135)
                  {
                    if (*(_QWORD *)v17 == 0x732D656D75737361 && *(_QWORD *)(v17 + 7) == 0x7966696C706D6973)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190D10;
                      goto LABEL_1565;
                    }
                  }
                  if (v55)
                  {
                    v396 = *(_QWORD *)v17 == 0x6E656D6E67696C61 && *((_QWORD *)v17 + 1) == 0x612D6D6F72662D74;
                    v397 = v396 && *((_QWORD *)v17 + 2) == 0x6F6974706D757373;
                    if (v397 && *((_WORD *)v17 + 12) == 29550)
                    {
                      v381 = operator new();
                      v408 = (uint64_t (**)())&unk_1E8191C20;
                      *(_QWORD *)(v381 + 8) = 0;
                      *(_QWORD *)(v381 + 16) = 0;
                      goto LABEL_1566;
                    }
                  }
                  if (v4 == 18)
                  {
                    v399 = *(_QWORD *)v17 == 0x697461746F6E6E61 && *((_QWORD *)v17 + 1) == 0x72616D65722D6E6FLL;
                    if (v399 && *((_WORD *)v17 + 8) == 29547)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190690;
                      goto LABEL_1565;
                    }
                  }
                  if (v134 && *(_DWORD *)v17 == 1701012578)
                  {
                    v381 = operator new();
                    v382 = (char *)&unk_1E8190C50;
                    goto LABEL_1565;
                  }
                  if (v135)
                  {
                    if (*(_QWORD *)v17 == 0x632D73646E756F62 && *(_QWORD *)(v17 + 7) == 0x676E696B63656863)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D2A0;
                      goto LABEL_1566;
                    }
                  }
                  if (v705)
                  {
                    if (*(_QWORD *)v17 == 0x72632D6B61657262 && *((_QWORD *)v17 + 1) == 0x73656764652D7469)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D2E0;
                      goto LABEL_1566;
                    }
                  }
                  if (v4 == 18)
                  {
                    v403 = *(_QWORD *)v17 == 0x657469736C6C6163 && *((_QWORD *)v17 + 1) == 0x697474696C70732DLL;
                    if (v403 && *((_WORD *)v17 + 8) == 26478)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191710;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v707))
                  {
                    if (*(_QWORD *)v17 == 0x696F6874736E6F63 && *((_WORD *)v17 + 4) == 29811)
                    {
                      bzero(__dst, 0x15D8uLL);
                      *(_QWORD *)&__dst[128] = &__dst[144];
                      *(_DWORD *)&__dst[140] = 8;
                      v772 = 0u;
                      v773 = 0;
                      v774 = 0u;
                      memset(v775, 0, sizeof(v775));
                      v776 = 0;
                      v778 = 0;
                      v777 = 0;
                      sub_1C62E2D30((uint64_t)v779, (uint64_t)__dst, v496, v497);
                      sub_1C5A3BB70();
                      v498 = *(_QWORD *)v779;
                      *(_QWORD *)v779 = 0;
                      if (v498)
                        (*(void (**)(uint64_t))(*(_QWORD *)v498 + 8))(v498);
                      sub_1C62EA5E0((uint64_t)__dst);
                      goto LABEL_1571;
                    }
                  }
                  if (v136)
                  {
                    if (*(_QWORD *)v17 == 0x69617274736E6F63
                      && *((_QWORD *)v17 + 1) == 0x696D696C652D746ELL
                      && *(_QWORD *)(v17 + 14) == 0x6E6F6974616E696DLL)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190ED0;
                      goto LABEL_1565;
                    }
                  }
                  else if (v4 == 3)
                  {
                    if (*(_WORD *)v17 == 26723 && v17[2] == 114)
                    {
                      sub_1C5872960();
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191110;
                      goto LABEL_1565;
                    }
                    v410 = 1;
                    goto LABEL_1218;
                  }
                  v410 = 0;
LABEL_1218:
                  if (HIDWORD(v707))
                  {
                    if (*(_QWORD *)v17 == 0x696C652D6F726F63 && *((_WORD *)v17 + 4) == 25956)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190C90;
                      goto LABEL_1565;
                    }
                  }
                  if ((_DWORD)v714)
                  {
                    if (*(_QWORD *)v17 == 0x656C632D6F726F63 && *((_DWORD *)v17 + 2) == 1886744161)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191F90;
                      goto LABEL_1565;
                    }
                  }
                  if (v136)
                  {
                    v413 = *(_QWORD *)v17 == 0x74616C6572726F63 && *((_QWORD *)v17 + 1) == 0x61706F72702D6465;
                    if (v413 && *(_QWORD *)(v17 + 14) == 0x6E6F697461676170)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190E50;
                      goto LABEL_1565;
                    }
                  }
                  if (v410)
                  {
                    if (*(_WORD *)v17 == 25444 && v17[2] == 101)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D360;
                      goto LABEL_1566;
                    }
                  }
                  if (v4 == 18)
                  {
                    v416 = *(_QWORD *)v17 == 0x706D756A2D616664 && *((_QWORD *)v17 + 1) == 0x696461657268742DLL;
                    if (v416 && *((_WORD *)v17 + 8) == 26478)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191090;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v712))
                  {
                    if (*(_QWORD *)v17 == 0x2D6D65722D766964 && *(_QWORD *)(v17 + 5) == 0x73726961702D6D65)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191F50;
                      goto LABEL_1565;
                    }
                  }
                  if (v410)
                  {
                    if (*(_WORD *)v17 == 29540 && v17[2] == 101)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E81910D0;
                      goto LABEL_1565;
                    }
                  }
                  if (v133)
                  {
                    if (*(_DWORD *)v17 == 762605412 && *(_DWORD *)(v17 + 3) == 1734763309)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D3A0;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v714)
                  {
                    if (*(_QWORD *)v17 == 0x2D6766632D746F64 && *((_DWORD *)v17 + 2) == 2037149295)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D3E0;
                      goto LABEL_1566;
                    }
                  }
                  if (v133)
                  {
                    if (*(_DWORD *)v17 == 762605412 && *(_DWORD *)(v17 + 3) == 1836016685)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D420;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v714)
                  {
                    if (*(_QWORD *)v17 == 0x2D6D6F642D746F64 && *((_DWORD *)v17 + 2) == 2037149295)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D460;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v714))
                  {
                    if (*(_QWORD *)v17 == 0x657272692D786966 && *(_QWORD *)(v17 + 7) == 0x656C626963756465)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D4A0;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v707))
                  {
                    if (*(_QWORD *)v17 == 0x636E657474616C66 && *((_WORD *)v17 + 4) == 26470)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D4E0;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x73696F682D6E7667 && v17[8] == 116)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190D50;
                      goto LABEL_1565;
                    }
                  }
                  if ((_DWORD)v707 && *(_QWORD *)v17 == 0x6B6E69732D6E7667)
                  {
                    v381 = operator new();
                    v382 = (char *)&unk_1E8190D90;
                    goto LABEL_1565;
                  }
                  if (HIDWORD(v707))
                  {
                    if (*(_QWORD *)v17 == 0x726F776F6C6C6568 && *((_WORD *)v17 + 4) == 25708)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D560;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v713))
                  {
                    if (*(_QWORD *)v17 == 0x626D6F6374736E69 && *(_QWORD *)(v17 + 3) == 0x656E69626D6F6374)
                    {
                      *(_QWORD *)__dst = &__dst[16];
                      *(_QWORD *)&__dst[8] = 0x10000000000;
                      v765 = 0u;
                      v766 = 0;
                      v767 = 1;
                      v429 = 2096;
                      v430 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                      do
                      {
                        *(int64x2_t *)&__dst[v429] = v430;
                        v429 += 16;
                      }
                      while (v429 != 2224);
                      v769 = v771;
                      v770 = 0x1000000000;
                      v771[32] = dword_1ED8337E0;
                      sub_1C62E2DF4((uint64_t)v779, (uint64_t)__dst);
                      sub_1C5A3BB70();
                      v431 = *(_QWORD *)v779;
                      *(_QWORD *)v779 = 0;
                      if (v431)
                        (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
                      if (v769 != v771)
                        free(v769);
                      if ((v767 & 1) == 0)
                        MEMORY[0x1CAA32FB4](v768, 8);
                      MEMORY[0x1CAA32FB4](v765, 8);
LABEL_1402:
                      if (*(_BYTE **)__dst != &__dst[16])
                        free(*(void **)__dst);
                      goto LABEL_1571;
                    }
                  }
                  else if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x6E756F6374736E69 && v17[8] == 116)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D5E0;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v714)
                  {
                    if (*(_QWORD *)v17 == 0x706D697374736E69 && *((_DWORD *)v17 + 2) == 2036754796)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191F10;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v714))
                  {
                    if (*(_QWORD *)v17 == 0x6164696C61766E69 && *(_QWORD *)(v17 + 7) == 0x3E6C6C613C657461)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D620;
                      goto LABEL_1566;
                    }
                  }
                  if (v134 && *(_DWORD *)v17 == 1701016169)
                  {
                    v381 = operator new();
                    v408 = &off_1E818D660;
                    goto LABEL_1566;
                  }
                  if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x6E693274616F6C66 && v17[8] == 116)
                    {
                      memset(&__dst[144], 0, 56);
                      *(_QWORD *)&__dst[48] = 1;
                      memset(__dst, 0, 48);
                      *(int64x2_t *)&__dst[56] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                      *(_OWORD *)&__dst[72] = *(_OWORD *)&__dst[56];
                      *(_OWORD *)&__dst[88] = *(_OWORD *)&__dst[56];
                      *(_OWORD *)&__dst[104] = *(_OWORD *)&__dst[56];
                      *(_QWORD *)&__dst[120] = &__dst[136];
                      *(_OWORD *)&__dst[128] = 0x800000000uLL;
                      memset(&__dst[208], 0, 24);
                      *(_QWORD *)&__dst[200] = &__dst[208];
                      memset(v740, 0, 56);
                      sub_1C62E2EB4((uint64_t)v779, (uint64_t)__dst);
                      sub_1C5A3BB70();
                      v509 = *(_QWORD *)v779;
                      *(_QWORD *)v779 = 0;
                      if (v509)
                        (*(void (**)(uint64_t))(*(_QWORD *)v509 + 8))(v509);
                      sub_1C62EA7A0((uint64_t)__dst);
                      goto LABEL_1571;
                    }
                  }
                  else if ((_DWORD)v13)
                  {
                    if (*(_QWORD *)v17 == 0x75662D706F2D6F6ELL && *(_QWORD *)(v17 + 6) == 0x6E6F6974636E7566)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D6A0;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v712)
                  {
                    v516 = *(_QWORD *)v17 == 0x736C6C616362696CLL && *((_QWORD *)v17 + 1) == 0x776B6E697268732DLL;
                    if (v516 && *(_QWORD *)(v17 + 11) == 0x706172776B6E6972)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190810;
                      goto LABEL_1565;
                    }
                  }
                  if (v134 && *(_DWORD *)v17 == 1953393004)
                  {
                    v381 = operator new();
                    v408 = &off_1E818D6E0;
                    goto LABEL_1566;
                  }
                  if ((_DWORD)v712)
                  {
                    v518 = *(_QWORD *)v17 == 0x742D7463656A6E69 && *((_QWORD *)v17 + 1) == 0x697070616D2D696CLL;
                    if (v518 && *(_QWORD *)(v17 + 11) == 0x73676E697070616DLL)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191E90;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x656D616E74736E69 && v17[8] == 114)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D720;
                      goto LABEL_1566;
                    }
                  }
                  else if (HIDWORD(v713))
                  {
                    if (*(_QWORD *)v17 == 0x6F74617265776F6CLL && *(_QWORD *)(v17 + 3) == 0x63696D6F74617265)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D760;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v714)
                  {
                    if (*(_QWORD *)v17 == 0x78652D7265776F6CLL && *((_DWORD *)v17 + 2) == 1952671088)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E81916D0;
                      goto LABEL_1565;
                    }
                  }
                  if ((_DWORD)v710)
                  {
                    v529 = *(_QWORD *)v17 == 0x75672D7265776F6CLL && *((_QWORD *)v17 + 1) == 0x72746E692D647261;
                    if (v529 && *(_QWORD *)(v17 + 13) == 0x6369736E6972746ELL)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D7A0;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v16)
                  {
                    if (*(_QWORD *)v17 == 0x6F632D7265776F6CLL
                      && *((_QWORD *)v17 + 1) == 0x692D746E6174736ELL
                      && *((_QWORD *)v17 + 2) == 0x6369736E6972746ELL
                      && v17[24] == 115)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191DD0;
                      goto LABEL_1565;
                    }
                    v534 = *(_QWORD *)v17 == 0x69772D7265776F6CLL && *((_QWORD *)v17 + 1) == 0x2D656C62616E6564;
                    v535 = v534 && *((_QWORD *)v17 + 2) == 0x6F697469646E6F63;
                    if (v535 && v17[24] == 110)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D7E0;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v13)
                  {
                    if (*(_QWORD *)v17 == 0x69772D6472617567 && *(_QWORD *)(v17 + 6) == 0x676E696E65646977)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D820;
                      goto LABEL_1566;
                    }
                  }
                  if ((_DWORD)v710)
                  {
                    v538 = *(_QWORD *)v17 == 0x6F74732D64616F6CLL && *((_QWORD *)v17 + 1) == 0x6F746365762D6572;
                    if (v538 && *(_QWORD *)(v17 + 13) == 0x72657A69726F7463)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D860;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v712))
                  {
                    if (*(_QWORD *)v17 == 0x6D69732D706F6F6CLL && *(_QWORD *)(v17 + 5) == 0x7966696C706D6973)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8190610;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x6E69732D706F6F6CLL && v17[8] == 107)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191ED0;
                      goto LABEL_1565;
                    }
                  }
                  else if (HIDWORD(v713))
                  {
                    if (*(_QWORD *)v17 == 0x766E697265776F6CLL && *(_QWORD *)(v17 + 3) == 0x656B6F766E697265)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D8A0;
                      goto LABEL_1566;
                    }
                    if (*(_QWORD *)v17 == 0x6977737265776F6CLL && *(_QWORD *)(v17 + 3) == 0x6863746977737265)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D8E0;
                      goto LABEL_1566;
                    }
                  }
                  if (v133)
                  {
                    if (*(_DWORD *)v17 == 846030189 && *(_DWORD *)(v17 + 3) == 1734701618)
                    {
                      v381 = operator new();
                      v382 = (char *)&unk_1E8191950;
                      goto LABEL_1565;
                    }
                  }
                  if (HIDWORD(v711))
                  {
                    if (*(_QWORD *)v17 == 0x706F7970636D656DLL && v17[8] == 116)
                    {
                      v381 = operator new();
                      *(_QWORD *)v381 = &unk_1E8190BE0;
                      *(_OWORD *)(v381 + 8) = 0u;
                      *(_OWORD *)(v381 + 24) = 0u;
                      *(_OWORD *)(v381 + 40) = 0u;
                      goto LABEL_1567;
                    }
                  }
                  if (HIDWORD(v707))
                  {
                    if (*(_QWORD *)v17 == 0x6D6369656772656DLL && *((_WORD *)v17 + 4) == 29552)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D920;
                      goto LABEL_1566;
                    }
                  }
                  if (HIDWORD(v713))
                  {
                    if (*(_QWORD *)v17 == 0x746572656772656DLL && *(_QWORD *)(v17 + 3) == 0x6E72757465726567)
                    {
                      v381 = operator new();
                      v408 = &off_1E818D960;
                      goto LABEL_1566;
                    }
                  }
                  if (v705
                    && (*(_QWORD *)v17 == 0x6165722D7972616ELL
                      ? (v551 = *((_QWORD *)v17 + 1) == 0x65746169636F7373)
                      : (v551 = 0),
                        v551))
                  {
                    memset(__dst, 0, 72);
                    sub_1C62E2F64((uint64_t)v779, (__int128 *)__dst);
                    sub_1C5A3BB70();
                    v619 = *(_QWORD *)v779;
                    *(_QWORD *)v779 = 0;
                    if (v619)
                      (*(void (**)(uint64_t))(*(_QWORD *)v619 + 8))(v619);
                    sub_1C5A55620((uint64_t *)&__dst[48]);
                  }
                  else
                  {
                    if (HIDWORD(v709))
                    {
                      if (*(_DWORD *)v17 == 1735877998 && *((_WORD *)v17 + 2) == 28278)
                      {
                        v381 = operator new();
                        v382 = (char *)&unk_1E8191010;
                        goto LABEL_1565;
                      }
LABEL_1864:
                      if ((_DWORD)v16)
                      {
                        v554 = *(_QWORD *)v17 == 0x6C6C616974726170 && *((_QWORD *)v17 + 1) == 0x656E696C6E692D79;
                        v555 = v554 && *((_QWORD *)v17 + 2) == 0x6C6C616362696C2DLL;
                        if (v555 && v17[24] == 115)
                        {
                          v381 = operator new();
                          v408 = &off_1E818D9E0;
                          goto LABEL_1566;
                        }
                      }
                      if ((_DWORD)v711)
                      {
                        if (*(_DWORD *)v17 == 1936941932 && v17[4] == 97)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E8190650;
                          goto LABEL_1565;
                        }
                      }
                      else if (v4 == 18)
                      {
                        if (*(_QWORD *)v17 == 0x7461642D706F6F6CLL
                          && *((_QWORD *)v17 + 1) == 0x7465666572702D61
                          && *((_WORD *)v17 + 8) == 26723)
                        {
                          v381 = operator new();
                          v408 = &off_1E818DA20;
                          goto LABEL_1566;
                        }
                      }
                      else if ((_DWORD)v13)
                      {
                        if (*(_QWORD *)v17 == 0x616F6C2D706F6F6CLL && *(_QWORD *)(v17 + 6) == 0x6D696C652D64616FLL)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E8191B90;
                          goto LABEL_1565;
                        }
                      }
                      else if (HIDWORD(v713))
                      {
                        if (*(_QWORD *)v17 == 0x7375662D706F6F6CLL && *(_QWORD *)(v17 + 3) == 0x6E6F697375662D70)
                        {
                          v381 = operator new();
                          v408 = &off_1E818DA60;
                          goto LABEL_1566;
                        }
                      }
                      if (HIDWORD(v714))
                      {
                        if (*(_QWORD *)v17 == 0x7369642D706F6F6CLL && *(_QWORD *)(v17 + 7) == 0x6574756269727473)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E8191E50;
                          goto LABEL_1565;
                        }
                        if (*(_QWORD *)v17 == 0x7265762D706F6F6CLL && *(_QWORD *)(v17 + 7) == 0x676E696E6F697372)
                        {
                          v381 = operator new();
                          v408 = &off_1E818DAA0;
                          goto LABEL_1566;
                        }
                      }
                      if ((_DWORD)v707 && *(_QWORD *)v17 == 0x6372612D636A626FLL)
                      {
                        v381 = operator new();
                        v408 = &off_1E818DAE0;
                        goto LABEL_1566;
                      }
                      if (HIDWORD(v710))
                      {
                        v577 = *(_QWORD *)v17 == 0x6372612D636A626FLL && *((_QWORD *)v17 + 1) == 0x636172746E6F632DLL;
                        if (v577 && v17[16] == 116)
                        {
                          v381 = operator new();
                          v408 = &off_1E818DB20;
                          goto LABEL_1566;
                        }
                      }
                      if (HIDWORD(v714))
                      {
                        if (*(_QWORD *)v17 == 0x6372612D636A626FLL && *(_QWORD *)(v17 + 7) == 0x646E617078652D63)
                        {
                          v381 = operator new();
                          v408 = &off_1E818DB60;
                          goto LABEL_1566;
                        }
                      }
                      if (HIDWORD(v712))
                      {
                        if (*(_QWORD *)v17 == 0x6F6D656D2D6F6770 && *(_QWORD *)(v17 + 5) == 0x74706F2D706F6D65)
                        {
                          v381 = operator new();
                          v382 = (char *)&unk_1E8190F10;
                          goto LABEL_1565;
                        }
                      }
                      if ((_DWORD)v711)
                      {
                        if (*(_DWORD *)v17 == 1852404336 && v17[4] == 116)
                        {
                          v582 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          *(_QWORD *)v381 = off_1E818DBA0;
                          *(_QWORD *)(v381 + 8) = v582;
                          *(_QWORD *)(v381 + 16) = 0;
                          *(_BYTE *)(v381 + 39) = 0;
                          goto LABEL_1567;
                        }
                      }
                      else if (v4 == 18)
                      {
                        if (*(_QWORD *)v17 == 0x73613C746E697270
                          && *((_QWORD *)v17 + 1) == 0x6E6F6974706D7573
                          && *((_WORD *)v17 + 8) == 15987)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DBE0;
LABEL_1719:
                          *(_QWORD *)v381 = v526;
                          *(_QWORD *)(v381 + 8) = v525;
                          goto LABEL_1567;
                        }
                        if (*(_QWORD *)v17 == 0x72623C746E697270
                          && *((_QWORD *)v17 + 1) == 0x6F72702D68636E61
                          && *((_WORD *)v17 + 8) == 15970)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DC60;
                          goto LABEL_1719;
                        }
                      }
                      else if (HIDWORD(v710))
                      {
                        if (*(_QWORD *)v17 == 0x6C623C746E697270
                          && *((_QWORD *)v17 + 1) == 0x716572662D6B636FLL
                          && v17[16] == 62)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DC20;
                          goto LABEL_1719;
                        }
                        if (*(_QWORD *)v17 == 0x6F633C746E697270
                          && *((_QWORD *)v17 + 1) == 0x6C65646F6D2D7473
                          && v17[16] == 62)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DCA0;
                          goto LABEL_1719;
                        }
                      }
                      if (HIDWORD(v712)
                        && (*(_QWORD *)v17 == 0x79633C746E697270
                          ? (v615 = *(_QWORD *)(v17 + 5) == 0x3E73656C6379633CLL)
                          : (v615 = 0),
                            v615))
                      {
                        v525 = llvm::dbgs((llvm *)v132);
                        v381 = operator new();
                        v526 = &off_1E818DCE0;
                      }
                      else if (HIDWORD(v711))
                      {
                        if (*(_QWORD *)v17 != 0x61643C746E697270 || v17[8] != 62)
                          goto LABEL_2251;
                        v525 = llvm::dbgs((llvm *)v132);
                        v381 = operator new();
                        v526 = &off_1E818DD20;
                      }
                      else if (HIDWORD(v710))
                      {
                        if (*(_QWORD *)v17 != 0x69643C746E697270
                          || *((_QWORD *)v17 + 1) != 0x65636E6567726576
                          || v17[16] != 62)
                        {
                          goto LABEL_2251;
                        }
                        v525 = llvm::dbgs((llvm *)v132);
                        v381 = operator new();
                        v526 = &off_1E818DD60;
                      }
                      else if ((_DWORD)v13)
                      {
                        if (*(_QWORD *)v17 != 0x6F643C746E697270 || *(_QWORD *)(v17 + 6) != 0x3E656572746D6F64)
                          goto LABEL_2251;
                        v525 = llvm::dbgs((llvm *)v132);
                        v381 = operator new();
                        v526 = &off_1E818DDA0;
                      }
                      else
                      {
                        if (v4 != 18)
                          goto LABEL_2236;
                        if (*(_QWORD *)v17 == 0x6F703C746E697270
                          && *((_QWORD *)v17 + 1) == 0x6572746D6F647473
                          && *((_WORD *)v17 + 8) == 15973)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DDE0;
                        }
                        else if (*(_QWORD *)v17 == 0x6F643C746E697270
                               && *((_QWORD *)v17 + 1) == 0x6569746E6F72666DLL
                               && *((_WORD *)v17 + 8) == 15986)
                        {
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DEA0;
                        }
                        else
                        {
                          if (*(_QWORD *)v17 != 0x6E693C746E697270
                            || *((_QWORD *)v17 + 1) != 0x736F632D656E696CLL
                            || *((_WORD *)v17 + 8) != 15988)
                          {
                            goto LABEL_2251;
                          }
                          v525 = llvm::dbgs((llvm *)v132);
                          v381 = operator new();
                          v526 = &off_1E818DF20;
                        }
                      }
                      goto LABEL_1719;
                    }
                    if (!(_DWORD)v13)
                      goto LABEL_1864;
                    if (*(_QWORD *)v17 != 0x7268742D706D756ALL || *(_QWORD *)(v17 + 6) != 0x676E696461657268)
                      goto LABEL_1864;
                    memset(&__dst[40], 0, 18);
                    *(_QWORD *)&__dst[64] = &__dst[80];
                    *(_QWORD *)&__dst[72] = 0x1000000000;
                    *(_QWORD *)&__dst[224] = 0;
                    *(_QWORD *)&__dst[216] = 0;
                    *(_QWORD *)&__dst[208] = &__dst[216];
                    LOBYTE(v740[1]) = byte_1ED835ED0;
                    HIDWORD(v740[0]) = dword_1ED835E10;
                    sub_1C62E3018((uint64_t)v779, (__int128 *)__dst);
                    sub_1C5A3BB70();
                    v623 = *(_QWORD *)v779;
                    *(_QWORD *)v779 = 0;
                    if (v623)
                      (*(void (**)(uint64_t))(*(_QWORD *)v623 + 8))(v623);
                    sub_1C62EA844((uint64_t)__dst);
                  }
LABEL_1571:
                  *v715 = 0;
                  return;
                }
                if (v4 < 6)
                {
                  v137 = v715;
                  goto LABEL_1458;
                }
LABEL_1450:
                v456 = *(_DWORD *)v17 == 1768713833 && *((_WORD *)v17 + 2) == 25966;
                v137 = v715;
                if (!v456)
                  goto LABEL_1459;
                v457 = 6;
                if (v4 < 6)
                  v457 = v4;
                v17 += v457;
                v4 -= v457;
LABEL_1458:
                if (!v4)
                {
                  v460 = 0;
LABEL_1466:
                  sub_1C5A551F4((uint64_t)__dst, (uint64_t)v17, v460, "only-mandatory", 0xEuLL, (uint64_t)"InlinerPass", 11);
                  if ((__dst[8] & 1) != 0)
                  {
                    v461 = *(_QWORD *)__dst;
                  }
                  else
                  {
                    v462 = __dst[0];
                    v463 = operator new();
                    *(_QWORD *)v463 = &unk_1E817AE90;
                    *(_QWORD *)(v463 + 8) = 0;
                    *(_BYTE *)(v463 + 16) = v462;
                    *(_QWORD *)v779 = v463;
                    sub_1C6297060(v10, (uint64_t *)v779);
                    v464 = *(_QWORD *)v779;
                    *(_QWORD *)v779 = 0;
                    if (v464)
                      (*(void (**)(uint64_t))(*(_QWORD *)v464 + 8))(v464);
                    v461 = 0;
                  }
                  *v137 = v461;
                  return;
                }
LABEL_1459:
                v458 = v17 + 1;
                v459 = *v17;
                v460 = v4 - (v459 == 60);
                if (v459 == 60)
                {
                  ++v17;
                  if (v460)
                  {
                    if (v458[v460 - 1] == 62 && v460 >= v460 - 1)
                      --v460;
                  }
                }
                goto LABEL_1466;
              }
              if (*(_QWORD *)v17 != 0x67632D706F2D6F6ELL || *(_QWORD *)(v17 + 3) != 0x63637367632D706FLL)
              {
                v132 = sub_1C5A3C044((char *)v17, v4, "inline", 6uLL);
                if (!v132)
                {
                  v133 = 0;
                  v134 = 0;
                  v135 = HIDWORD(v714);
                  v136 = v713;
                  goto LABEL_1149;
                }
                goto LABEL_1450;
              }
              v391 = operator new();
              v392 = &off_1E818D1E0;
              goto LABEL_1359;
            }
            v391 = operator new();
            *(_QWORD *)v391 = &unk_1E8191520;
            *(_BYTE *)(v391 + 8) = 0;
LABEL_1360:
            *(_QWORD *)__dst = v391;
            sub_1C6297060(v10, (uint64_t *)__dst);
            goto LABEL_1568;
          }
          v391 = operator new();
          v393 = (char *)&unk_1E81914D0;
        }
LABEL_1358:
        v392 = (uint64_t (**)())(v393 + 16);
        goto LABEL_1359;
      }
      v705 = 0;
      goto LABEL_291;
    }
    v715 = v13;
    LODWORD(v13) = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    LODWORD(v16) = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    switch(v4)
    {
      case 5uLL:
        if (*(_DWORD *)v17 == 1852404336 && v17[4] == 116)
        {
          v440 = llvm::dbgs(0);
          v373 = operator new();
          *(_QWORD *)v373 = off_1E818CBA0;
          *(_QWORD *)(v373 + 8) = v440;
          *(_QWORD *)(v373 + 16) = 0;
          *(_WORD *)(v373 + 39) = 0;
          goto LABEL_1099;
        }
        v93 = *(_DWORD *)v17 == 1769108595 && v17[4] == 112;
        v13 = v715;
        if (v93)
        {
          __dst[0] = 1;
          sub_1C62E2500();
        }
        else
        {
          if (*(_DWORD *)v17 != 1634952804 || v17[4] != 110)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v63 = 1;
            goto LABEL_100;
          }
          memset(v779, 0, sizeof(v779));
          memset(__dst, 0, 24);
          sub_1C62E2828();
          p_p = __dst;
          sub_1C4765410((void ***)&p_p);
          p_p = v779;
          sub_1C4765410((void ***)&p_p);
        }
        goto LABEL_284;
      case 6uLL:
        if (*(_DWORD *)v17 == 1668509801 && *((_WORD *)v17 + 2) == 28771)
        {
          sub_1C62E1B8C();
        }
        else
        {
          v237 = *(_DWORD *)v17 == 1769104758 && *((_WORD *)v17 + 2) == 31078;
          v64 = 1;
          if (!v237)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            goto LABEL_99;
          }
          __dst[0] = 1;
          sub_1C62B2C28(v10, __dst);
        }
        goto LABEL_1571;
      case 7uLL:
      case 0x10uLL:
      case 0x12uLL:
      case 0x1EuLL:
      case 0x21uLL:
        goto LABEL_100;
      case 8uLL:
        if (*(_QWORD *)v17 == 0x7966696775626564)
        {
          sub_1C62E1618();
          goto LABEL_1571;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
        {
          v4 = 8;
          v67 = v715;
          goto LABEL_111;
        }
        v708 = 0;
        v709 = 0;
        v710 = 0;
        v711 = 0;
        v712 = 0;
        v713 = 0;
        LODWORD(v16) = 0;
        v706 = 0;
        v714 = 0;
        v55 = 0;
        LODWORD(v13) = 0;
        v707 = 1;
        goto LABEL_176;
      case 9uLL:
        if (*(_QWORD *)v17 == 0x63646C61626F6C67 && v17[8] == 101)
        {
          v756 = 0;
          v750 = 0;
          v746 = 0;
          v742 = 0;
          memset(v740, 0, sizeof(v740));
          memset(&__dst[24], 0, 208);
          *(_QWORD *)__dst = &__dst[32];
          *(_QWORD *)&__dst[8] = &__dst[32];
          *(_QWORD *)&__dst[16] = 32;
          v741 = 0;
          v743 = 0u;
          v744 = 0u;
          v745 = 1065353216;
          v747 = 0u;
          v748 = 0u;
          v749 = 1065353216;
          v752[0] = 0;
          v751 = 0;
          v752[1] = 0;
          v754 = 0;
          v753 = 0;
          v755 = 0;
          sub_1C5A3BF08();
          sub_1C56E07A8((uint64_t)__dst);
          goto LABEL_1571;
        }
        v232 = *(_QWORD *)v17 == 0x706F6C61626F6C67 && v17[8] == 116;
        v67 = v715;
        if (v232)
        {
          sub_1C5A3BFA0();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 != 0x6F72707274736E69 || v17[8] != 102)
        {
          if (*(_QWORD *)v17 == 0x6E7566656772656DLL && v17[8] == 99)
          {
            sub_1C62E1D58();
            goto LABEL_1122;
          }
          if (*(_QWORD *)v17 != 0x636C2D746E697270 || v17[8] != 103)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v62 = 1;
            goto LABEL_100;
          }
          *(_QWORD *)__dst = llvm::dbgs(0);
          sub_1C62E205C();
          goto LABEL_1571;
        }
        memset(&__dst[8], 0, 24);
        LOBYTE(v740[0]) = 0;
        *(_DWORD *)__dst = 0;
        memset(&__dst[40], 0, 48);
        memset(&__dst[112], 0, 28);
        memset(&__dst[144], 0, 72);
        memset(&v740[1], 0, 32);
        sub_1C62E1A94();
        if (v740[1])
        {
          v740[2] = v740[1];
          operator delete(v740[1]);
        }
        if (*(_QWORD *)&__dst[192])
        {
          *(_QWORD *)&__dst[200] = *(_QWORD *)&__dst[192];
          operator delete(*(void **)&__dst[192]);
        }
        if (*(_QWORD *)&__dst[168])
        {
          *(_QWORD *)&__dst[176] = *(_QWORD *)&__dst[168];
          operator delete(*(void **)&__dst[168]);
        }
        if (*(_QWORD *)&__dst[144])
        {
          *(_QWORD *)&__dst[152] = *(_QWORD *)&__dst[144];
          operator delete(*(void **)&__dst[144]);
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)&__dst[120], 8);
        v473 = *(_QWORD **)&__dst[112];
        if (*(_BYTE **)&__dst[112] == &__dst[88])
        {
          v474 = 4;
          v473 = &__dst[88];
        }
        else
        {
          if (!*(_QWORD *)&__dst[112])
            goto LABEL_1612;
          v474 = 5;
        }
        (*(void (**)(void))(*v473 + 8 * v474))();
LABEL_1612:
        if ((__dst[63] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[40]);
        if ((__dst[31] & 0x80000000) != 0)
        {
          v455 = *(void **)&__dst[8];
          goto LABEL_1616;
        }
        goto LABEL_1571;
      case 0xAuLL:
        if (*(_QWORD *)v17 == 0x7475626972747461 && *((_WORD *)v17 + 4) == 29295)
        {
          sub_1C62E12BC();
          goto LABEL_1571;
        }
        v181 = *(_QWORD *)v17 == 0x6F2D706D6E65706FLL && *((_WORD *)v17 + 4) == 29808;
        v67 = v715;
        if (v181)
        {
          sub_1C62E1350();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x69666F72702D6763 && *((_WORD *)v17 + 4) == 25964)
        {
          sub_1C62E1428();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x72656D74736E6F63 && *((_WORD *)v17 + 4) == 25959)
        {
          sub_1C62E14B4();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x7261652D6F726F63 && *((_WORD *)v17 + 4) == 31084)
        {
          sub_1C62E14FC();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x7474616563726F66 && *((_WORD *)v17 + 4) == 29554)
        {
          sub_1C62E172C();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x7474617265666E69 && *((_WORD *)v17 + 4) == 29554)
        {
          sub_1C62E1894();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x6E696C74756F7269 && *((_WORD *)v17 + 4) == 29285)
        {
          sub_1C62E1BD8();
          goto LABEL_1122;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
        {
          v4 = 10;
          goto LABEL_111;
        }
        v708 = 0;
        v709 = 0;
        v710 = 0;
        v711 = 0;
        v712 = 0;
        v713 = 0;
        LODWORD(v16) = 0;
        v706 = 0;
        v707 = 0x100000000;
        v714 = 0;
        v55 = 0;
        LODWORD(v13) = 0;
        goto LABEL_176;
      case 0xBuLL:
        if (*(_QWORD *)v17 == 0x6567726164616564 && *(_QWORD *)(v17 + 3) == 0x6D696C6567726164)
        {
          *(_QWORD *)__dst = &__dst[8];
          *(_QWORD *)&__dst[8] = 0;
          *(_QWORD *)&__dst[32] = 0;
          *(_QWORD *)&__dst[40] = 0;
          *(_QWORD *)&__dst[16] = 0;
          *(_QWORD *)&__dst[24] = &__dst[32];
          memset(&__dst[56], 0, 17);
          *(_QWORD *)&__dst[48] = &__dst[56];
          sub_1C62E158C();
          sub_1C47655E8((uint64_t)&__dst[48], *(_QWORD **)&__dst[56]);
          sub_1C47655E8((uint64_t)&__dst[24], *(_QWORD **)&__dst[32]);
          sub_1C47655E8((uint64_t)__dst, *(_QWORD **)&__dst[8]);
          goto LABEL_1571;
        }
        v214 = *(_QWORD *)v17 == 0x70736C61626F6C67 && *(_QWORD *)(v17 + 3) == 0x74696C70736C6162;
        v13 = v715;
        if (v214)
        {
          sub_1C62E1804();
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 != 0x6C616E7265746E69 || *(_QWORD *)(v17 + 3) != 0x657A696C616E7265)
        {
          if (*(_QWORD *)v17 == 0x616E65726174656DLL && *(_QWORD *)(v17 + 3) == 0x72656D616E657261)
          {
            sub_1C62E1D14();
          }
          else if (*(_QWORD *)v17 == 0x646F6D2D6E61736DLL && *(_QWORD *)(v17 + 3) == 0x656C75646F6D2D6ELL)
          {
            if (word_1ED833C10 != 0 && byte_1ED833C88 != 0)
              LODWORD(v446) = 2;
            else
              LODWORD(v446) = 0;
            if (word_1ED8339D0)
              v446 = dword_1ED833A48;
            else
              v446 = v446;
            v447 = byte_1ED833B08 != 0;
            if (!word_1ED833A90)
              v447 = word_1ED833C10 != 0 && byte_1ED833C88 != 0;
            if (byte_1ED833BC8)
              v448 = word_1ED833B50 == 0;
            else
              v448 = 1;
            v449 = (word_1ED833C10 != 0) & (byte_1ED833C88 != 0) | (unint64_t)(v446 << 32);
            if (v448)
              v450 = 0;
            else
              v450 = 256;
            *(_QWORD *)__dst = v449;
            *(_DWORD *)&__dst[8] = v450 | v447;
            sub_1C62E28B8();
          }
          else
          {
            if (*(_QWORD *)v17 != 0x646F6D2D6E617374 || *(_QWORD *)(v17 + 3) != 0x656C75646F6D2D6ELL)
            {
              LODWORD(v13) = 0;
              v52 = 0;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v57 = 0;
              v58 = 0;
              v59 = 0;
              LODWORD(v16) = 0;
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v64 = 0;
              v66 = 0;
              v65 = 1;
              goto LABEL_100;
            }
            sub_1C62E29A0();
          }
          goto LABEL_284;
        }
        llvm::InternalizePass::InternalizePass((llvm::InternalizePass *)v779);
        v441 = (char *)operator new();
        v442 = v779[0];
        __dst[0] = v779[0];
        v443 = &__dst[8];
        v444 = (_BYTE *)v781;
        if ((_QWORD)v781)
        {
          if ((_BYTE *)v781 == &v779[8])
          {
            *(_QWORD *)&__dst[32] = &__dst[8];
            (*(void (**)(void))(*(_QWORD *)v781 + 24))();
            v442 = __dst[0];
            v444 = *(_BYTE **)&__dst[32];
          }
          else
          {
            v444 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v781 + 16))();
            *(_QWORD *)&__dst[32] = v444;
          }
        }
        else
        {
          *(_QWORD *)&__dst[32] = 0;
        }
        *(_QWORD *)&__dst[40] = *((_QWORD *)&v781 + 1);
        *(_OWORD *)&__dst[48] = v782;
        DWORD2(v782) = 0;
        *((_QWORD *)&v781 + 1) = 0;
        *(_QWORD *)&v782 = 0;
        *(_QWORD *)v441 = &off_1E818C920;
        v441[8] = v442;
        if (v444)
        {
          if (v444 == &__dst[8])
          {
            *((_QWORD *)v441 + 5) = v441 + 16;
            (*(void (**)(_BYTE *))(*(_QWORD *)&__dst[8] + 24))(&__dst[8]);
          }
          else
          {
            *((_QWORD *)v441 + 5) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v444 + 16))(v444);
          }
        }
        else
        {
          *((_QWORD *)v441 + 5) = 0;
        }
        *((_QWORD *)v441 + 6) = *(_QWORD *)&__dst[40];
        *(_OWORD *)(v441 + 56) = *(_OWORD *)&__dst[48];
        memset(&__dst[40], 0, 20);
        p_p = v441;
        v490 = *(_QWORD **)(v10 + 8);
        if ((unint64_t)v490 >= *(_QWORD *)(v10 + 16))
        {
          v491 = sub_1C4D62F9C((char **)v10, (uint64_t *)&p_p);
          v492 = p_p;
          *(_QWORD *)(v10 + 8) = v491;
          p_p = 0;
          if (v492)
            (*(void (**)(void *))(*(_QWORD *)v492 + 8))(v492);
        }
        else
        {
          *v490 = v441;
          *(_QWORD *)(v10 + 8) = v490 + 1;
          p_p = 0;
        }
        sub_1C4F02264((uint64_t)&__dst[40]);
        if (*(_BYTE **)&__dst[32] == &__dst[8])
        {
          v493 = 4;
        }
        else
        {
          if (!*(_QWORD *)&__dst[32])
            goto LABEL_1598;
          v493 = 5;
          v443 = *(_QWORD **)&__dst[32];
        }
        (*(void (**)(_QWORD *))(*v443 + 8 * v493))(v443);
LABEL_1598:
        sub_1C4F02264((uint64_t)&v781 + 8);
        v494 = (_QWORD *)v781;
        if ((_BYTE *)v781 == &v779[8])
        {
          v495 = 4;
          v494 = &v779[8];
        }
        else
        {
          if (!(_QWORD)v781)
            goto LABEL_284;
          v495 = 5;
        }
        v388 = *(void (**)(void))(*v494 + 8 * v495);
        goto LABEL_1603;
      case 0xCuLL:
        if (*(_QWORD *)v17 == 0x3C65726975716572 && *((_DWORD *)v17 + 2) == 1046963052)
        {
          sub_1C62E0D5C();
          goto LABEL_1571;
        }
        v239 = *(_QWORD *)v17 == 0x73646C6F63746F68 && *((_DWORD *)v17 + 2) == 1953066096;
        v67 = v715;
        if (v239)
        {
          sub_1C62E184C();
        }
        else
        {
          if (*(_QWORD *)v17 == 0x6F6D2D706F2D6F6ELL && *((_DWORD *)v17 + 2) == 1701606756)
          {
            v373 = operator new();
            v378 = &off_1E818CA60;
            goto LABEL_1119;
          }
          if (*(_QWORD *)v17 == 0x702D6F6475657370 && *((_DWORD *)v17 + 2) == 1700949874)
          {
            *(_QWORD *)__dst = *(_QWORD *)v11;
            sub_1C62E2594();
          }
          else
          {
            if (*(_QWORD *)v17 != 0x7274702D74666F73 || *((_DWORD *)v17 + 2) != 1752462689)
            {
              LODWORD(v13) = 0;
              v52 = 0;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v57 = 0;
              v58 = 0;
              LODWORD(v16) = 0;
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v64 = 0;
              v65 = 0;
              v66 = 0;
              v59 = 1;
              goto LABEL_100;
            }
            sub_1C62E25E4();
          }
        }
        goto LABEL_1122;
      case 0xDuLL:
        if (*(_QWORD *)v17 == 0x692D737961776C61 && *(_QWORD *)(v17 + 5) == 0x656E696C6E692D73)
        {
          __dst[0] = 1;
          sub_1C5A3BE6C();
          goto LABEL_1571;
        }
        if (*(_QWORD *)v17 == 0x73642D73736F7263 && *(_QWORD *)(v17 + 5) == 0x6966632D6F73642DLL)
        {
          sub_1C62E1544();
          goto LABEL_1571;
        }
        if (*(_QWORD *)v17 == 0x6C6C61632D746F64 && *(_QWORD *)(v17 + 5) == 0x68706172676C6C61)
        {
          sub_1C62E165C();
          goto LABEL_1571;
        }
        if (*(_QWORD *)v17 == 0x74736E692D6F6770 && *(_QWORD *)(v17 + 5) == 0x6E65672D7274736ELL)
        {
          __dst[0] = 0;
          sub_1C62E1EDC();
          goto LABEL_1571;
        }
        if (*(_QWORD *)v17 == 0x74736E692D6F6770 && *(_QWORD *)(v17 + 5) == 0x6573752D7274736ELL)
        {
          v727 = 0;
          LOBYTE(v726) = 0;
          v725 = 0;
          LOBYTE(v724) = 0;
          v723 = 0;
          llvm::PGOInstrumentationUse::PGOInstrumentationUse((uint64_t)__dst, &v726, &v724, 0, &v723);
          sub_1C62E1F30(v10, (uint64_t)__dst);
          v465 = *(_QWORD *)&__dst[56];
          if (*(_QWORD *)&__dst[56])
          {
            v466 = (unsigned int *)(*(_QWORD *)&__dst[56] + 8);
            do
            {
              v467 = __ldaxr(v466);
              v468 = v467 - 1;
            }
            while (__stlxr(v468, v466));
            if (!v468)
              (*(void (**)(uint64_t))(*(_QWORD *)v465 + 8))(v465);
          }
          if ((__dst[47] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v469 = v723;
          if (v723)
          {
            v470 = (unsigned int *)(v723 + 8);
            do
            {
              v471 = __ldaxr(v470);
              v472 = v471 - 1;
            }
            while (__stlxr(v472, v470));
            if (!v472)
              (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
          }
          if (v725 < 0)
            operator delete((void *)v724);
          if (v727 < 0)
          {
            v455 = (void *)v726;
            goto LABEL_1616;
          }
        }
        else
        {
          if (*(_QWORD *)v17 == 0x636C2D746E697270 && *(_QWORD *)(v17 + 5) == 0x746F642D67636C2DLL)
          {
            *(_QWORD *)__dst = llvm::dbgs(0);
            sub_1C62E20A8();
            goto LABEL_1571;
          }
          if (*(_QWORD *)v17 == 0x692D656C75646F6DLL && *(_QWORD *)(v17 + 5) == 0x656E696C6E692D65)
          {
            llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)&__dst[8]);
            *(_QWORD *)__dst = 0;
            *(_DWORD *)&__dst[76] = 0;
            sub_1C62E291C(v10, (uint64_t *)__dst);
            goto LABEL_1568;
          }
          if (*(_QWORD *)v17 != 0x6D2D766F636E6173 || *(_QWORD *)(v17 + 5) != 0x656C75646F6D2D76)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v61 = 1;
            goto LABEL_100;
          }
          v716 = 0uLL;
          v717 = 0;
          memset(v779, 0, sizeof(v779));
          p_p = 0;
          v734 = 0;
          v735 = 0;
          sub_1C62EA3E4((uint64_t)__dst, &v716, (uint64_t *)v779, (uint64_t *)&p_p);
          sub_1C62E29E4(v10, (__int128 *)__dst);
          sub_1C62EA578((uint64_t)__dst);
          __p = &p_p;
          sub_1C4765410((void ***)&__p);
          p_p = v779;
          sub_1C4765410((void ***)&p_p);
        }
        goto LABEL_1571;
      case 0xEuLL:
        if (*(_QWORD *)v17 == 0x65642D6B63656863 && *(_QWORD *)(v17 + 6) == 0x7966696775626564)
        {
          sub_1C62E1470();
          goto LABEL_1571;
        }
        v274 = *(_QWORD *)v17 == 0x2D74636172747865 && *(_QWORD *)(v17 + 6) == 0x736B636F6C622D74;
        v67 = v715;
        if (v274)
        {
          sub_1C62E16E8();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x64726F7274736E69 && *(_QWORD *)(v17 + 6) == 0x656C696672656472)
        {
          sub_1C62E1A4C();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x7079747265776F6CLL && *(_QWORD *)(v17 + 6) == 0x7374736574657079)
        {
          __dst[0] = 1;
          *(_QWORD *)&__dst[8] = 0;
          *(_QWORD *)&__dst[16] = 0;
          __dst[24] = 1;
          sub_1C62E1CB0(v10, (__n128 *)__dst);
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x6C6163692D6F6770 && *(_QWORD *)(v17 + 6) == 0x6D6F72702D6C6C61)
        {
          *(_WORD *)__dst = 0;
          sub_1C62E1E74(v10, (__int16 *)__dst);
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x702D656C706D6173 && *(_QWORD *)(v17 + 6) == 0x656C69666F72702DLL)
        {
          v722 = 0;
          LOBYTE(v721) = 0;
          v720 = 0;
          LOBYTE(v719) = 0;
          v718 = 0;
          sub_1C5A55168(__dst, &v721, &v719, 0);
          sub_1C62E246C(v10, (uint64_t)__dst);
          v451 = *(_QWORD *)&__dst[56];
          if (*(_QWORD *)&__dst[56])
          {
            v452 = (unsigned int *)(*(_QWORD *)&__dst[56] + 8);
            do
            {
              v453 = __ldaxr(v452);
              v454 = v453 - 1;
            }
            while (__stlxr(v454, v452));
            if (!v454)
              (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
          }
          if ((__dst[47] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (v720 < 0)
            operator delete((void *)v719);
          if (v722 < 0)
          {
            v455 = (void *)v721;
LABEL_1616:
            operator delete(v455);
          }
          goto LABEL_1571;
        }
        if (*(_QWORD *)v17 == 0x6F6E2D7069727473 && *(_QWORD *)(v17 + 6) == 0x67756265646E6F6ELL)
        {
          __dst[0] = 1;
          sub_1C62E26B0();
        }
        else if (*(_QWORD *)v17 == 0x6C61632D77656976 && *(_QWORD *)(v17 + 6) == 0x68706172676C6C61)
        {
          sub_1C62E278C();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x2D666F72706D656DLL || *(_QWORD *)(v17 + 6) != 0x656C75646F6D2D66)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            LODWORD(v13) = 1;
            goto LABEL_100;
          }
          sub_1C62E2A80();
        }
        goto LABEL_1122;
      case 0xFuLL:
        if (*(_QWORD *)v17 == 0x6164696C61766E69 && *(_QWORD *)(v17 + 7) == 0x3E67636C3C657461)
        {
          sub_1C62E0DA0();
          goto LABEL_1571;
        }
        v264 = *(_QWORD *)v17 == 0x3C65726975716572 && *(_QWORD *)(v17 + 7) == 0x3E7966697265763CLL;
        v13 = v715;
        if (v264)
        {
          sub_1C62E0F84();
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 == 0x6E6F6974636E7566 && *(_QWORD *)(v17 + 7) == 0x74726F706D692D6ELL)
        {
          sub_1C62E1778();
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 == 0x2D72656E696C6E69 && *(_QWORD *)(v17 + 7) == 0x726570706172772DLL)
        {
          llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)v729);
          llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass((uint64_t)__dst, (uint64_t)v729, 1, 0, 0);
          goto LABEL_1560;
        }
        if (*(_QWORD *)v17 == 0x6164696C61766E69 && *(_QWORD *)(v17 + 7) == 0x3E6C6C613C657461)
        {
          sub_1C62E1B48();
        }
        else if (*(_QWORD *)v17 == 0x6372612D636A626FLL && *(_QWORD *)(v17 + 7) == 0x6D696C6570612D63)
        {
          sub_1C62E1DE8();
        }
        else if (*(_QWORD *)v17 == 0x2D6C616974726170 && *(_QWORD *)(v17 + 7) == 0x72656E696C6E692DLL)
        {
          sub_1C62E1E2C();
        }
        else if (*(_QWORD *)v17 == 0x61632D746E697270 && *(_QWORD *)(v17 + 7) == 0x68706172676C6C61)
        {
          *(_QWORD *)__dst = llvm::dbgs(0);
          sub_1C62E2010();
        }
        else if (*(_QWORD *)v17 == 0x2D65746972776572 && *(_QWORD *)(v17 + 7) == 0x736C6F626D79732DLL)
        {
          *(_QWORD *)__dst = __dst;
          *(_QWORD *)&__dst[8] = __dst;
          *(_QWORD *)&__dst[16] = 0;
          llvm::RewriteSymbolPass::loadAndParseMapFiles((llvm::RewriteSymbolPass *)__dst);
          sub_1C62E2318();
          sub_1C62EA368((uint64_t *)__dst);
        }
        else
        {
          if (*(_QWORD *)v17 != 0x632D6E6F73696F70 || *(_QWORD *)(v17 + 7) != 0x676E696B63656863)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v56 = 1;
            goto LABEL_100;
          }
          sub_1C62E2AC8();
        }
        goto LABEL_284;
      case 0x11uLL:
        if (*(_QWORD *)v17 == 0x6176612D6D696C65 && *((_QWORD *)v17 + 1) == 0x72657478652D6C69 && v17[16] == 110)
        {
          sub_1C62E16A0();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x6F6E612D656D616ELL || *((_QWORD *)v17 + 1) != 0x6C61626F6C672D6ELL || v17[16] != 115)
          {
            LODWORD(v13) = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v52 = 1;
            goto LABEL_100;
          }
          sub_1C62E1DA0();
        }
        goto LABEL_1571;
      case 0x13uLL:
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x2D736C61626F6C67
          && *(_QWORD *)(v17 + 11) == 0x3E61612D736C6162)
        {
          sub_1C62E122C();
          goto LABEL_1571;
        }
        v222 = *(_QWORD *)v17 == 0x697461746F6E6E61
            && *((_QWORD *)v17 + 1) == 0x646174656D326E6FLL
            && *(_QWORD *)(v17 + 11) == 0x617461646174656DLL;
        v67 = v715;
        if (v222)
        {
          sub_1C62E1304();
        }
        else if (*(_QWORD *)v17 == 0x72692D746E697270
               && *((_QWORD *)v17 + 1) == 0x72616C696D69732DLL
               && *(_QWORD *)(v17 + 11) == 0x79746972616C696DLL)
        {
          *(_QWORD *)__dst = llvm::dbgs(0);
          sub_1C62E1C20();
        }
        else if (*(_QWORD *)v17 == 0x7475706D6F636572
               && *((_QWORD *)v17 + 1) == 0x6C61626F6C672D65
               && *(_QWORD *)(v17 + 11) == 0x6161736C61626F6CLL)
        {
          sub_1C62E2244();
        }
        else if (*(_QWORD *)v17 == 0x65642D7069727473
               && *((_QWORD *)v17 + 1) == 0x6C6365642D677562
               && *(_QWORD *)(v17 + 11) == 0x6572616C6365642DLL)
        {
          sub_1C62E266C();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x702D6F6475657370
            || *((_QWORD *)v17 + 1) != 0x6470752D65626F72
            || *(_QWORD *)(v17 + 11) != 0x6574616470752D65)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v60 = 1;
            goto LABEL_100;
          }
          sub_1C62E2B0C();
        }
        goto LABEL_1122;
      case 0x14uLL:
        if (*(_QWORD *)v17 == 0x6163696E6F6E6163
          && *((_QWORD *)v17 + 1) == 0x696C612D657A696CLL
          && *((_DWORD *)v17 + 4) == 1936028513)
        {
          sub_1C62E13E0();
          goto LABEL_1571;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
          goto LABEL_677;
        if (sub_1C5A3C044((char *)v17, v4, "hwasan", 6uLL))
          goto LABEL_178;
        if (sub_1C5A3C044((char *)v17, v4, "asan-module", 0xBuLL))
          goto LABEL_911;
        v193 = sub_1C5A3C044((char *)v17, v4, "inline", 6uLL);
        if (v193)
          goto LABEL_1450;
        if (*(_QWORD *)v17 == 0x6175672D656B616DLL
          && *((_QWORD *)v17 + 1) == 0x6C7078652D736472
          && *((_DWORD *)v17 + 4) == 1953063785)
        {
          v381 = operator new();
          v408 = &off_1E818D520;
          goto LABEL_1566;
        }
        if (*(_QWORD *)v17 == 0x64612D7265666E69
          && *((_QWORD *)v17 + 1) == 0x70732D7373657264
          && *((_DWORD *)v17 + 4) == 1936024417)
        {
          v381 = operator new();
          *(_QWORD *)v381 = &off_1E818D5A0;
          *(_DWORD *)(v381 + 8) = -1;
          goto LABEL_1567;
        }
        if (*(_QWORD *)v17 == 0x65643C746E697270
          && *((_QWORD *)v17 + 1) == 0x622D6465646E616DLL
          && *((_DWORD *)v17 + 4) == 1047753833)
        {
          v525 = llvm::dbgs((llvm *)v193);
          v381 = operator new();
          v526 = &off_1E818DE60;
          goto LABEL_1719;
        }
        if (*(_QWORD *)v17 != 0x733C796669726576
          || *((_QWORD *)v17 + 1) != 0x746E696F70656661
          || *((_DWORD *)v17 + 4) != 1047685421)
        {
          HIDWORD(v710) = 0;
          LODWORD(v711) = 0;
          LODWORD(v13) = 0;
          v713 = 0;
          v714 = 0;
          HIDWORD(v707) = 0;
          v712 = 0;
          v705 = 0;
          v202 = 0;
          v203 = 1;
          goto LABEL_1536;
        }
        v381 = operator new();
        v408 = &off_1E818E660;
        goto LABEL_1566;
      case 0x15uLL:
        if (*(_QWORD *)v17 == 0x6164696C61766E69
          && *((_QWORD *)v17 + 1) == 0x676C6C61633C6574
          && *(_QWORD *)(v17 + 13) == 0x3E68706172676C6CLL)
        {
          sub_1C62E0D18();
          goto LABEL_1571;
        }
        v156 = *(_QWORD *)v17 == 0x3C65726975716572
            && *((_QWORD *)v17 + 1) == 0x6F6D2D706F2D6F6ELL
            && *(_QWORD *)(v17 + 13) == 0x3E656C75646F6D2DLL;
        v13 = v715;
        if (v156)
        {
          v376 = (_QWORD *)operator new();
          *v376 = &off_1E818C360;
          *(_QWORD *)__dst = v376;
          v377 = *(_QWORD **)(v10 + 8);
          if ((unint64_t)v377 >= *(_QWORD *)(v10 + 16))
          {
            v386 = sub_1C4D62F9C((char **)v10, (uint64_t *)__dst);
            v387 = *(_QWORD *)__dst;
            *(_QWORD *)(v10 + 8) = v386;
            *(_QWORD *)__dst = 0;
            if (v387)
            {
              v388 = *(void (**)(void))(*(_QWORD *)v387 + 8);
LABEL_1603:
              v388();
            }
          }
          else
          {
            *v377 = v376;
            *(_QWORD *)(v10 + 8) = v377 + 1;
          }
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x61732D6B63617473
          && *(_QWORD *)(v17 + 13) == 0x3E7974656661732DLL)
        {
          sub_1C62E0EFC();
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 == 0x6E693C746E697270
          && *((_QWORD *)v17 + 1) == 0x7664612D656E696CLL
          && *(_QWORD *)(v17 + 13) == 0x3E726F7369766461)
        {
          *(_QWORD *)__dst = llvm::dbgs(0);
          sub_1C62E1A00();
          goto LABEL_284;
        }
        if (*(_QWORD *)v17 != 0x672D747265736E69
          || *((_QWORD *)v17 + 1) != 0x666F72702D766F63
          || *(_QWORD *)(v17 + 13) != 0x676E696C69666F72)
        {
          if (*(_QWORD *)v17 == 0x75662D746E697270
            && *((_QWORD *)v17 + 1) == 0x672D6E6F6974636ELL
            && *(_QWORD *)(v17 + 13) == 0x7370756F72672D6ELL)
          {
            v481 = llvm::dbgs(0);
            v482 = (_QWORD *)operator new();
            *v482 = &off_1E818CAE0;
            v482[1] = v481;
            *(_QWORD *)__dst = v482;
            v483 = *(_QWORD **)(v10 + 8);
            if ((unint64_t)v483 < *(_QWORD *)(v10 + 16))
            {
              *v483 = v482;
              *(_QWORD *)(v10 + 8) = v483 + 1;
              goto LABEL_1571;
            }
            v499 = sub_1C4D62F9C((char **)v10, (uint64_t *)__dst);
            v485 = *(_QWORD *)__dst;
            *(_QWORD *)(v10 + 8) = v499;
            goto LABEL_1569;
          }
          if (*(_QWORD *)v17 == 0x72702D746E697270
            && *((_QWORD *)v17 + 1) == 0x75732D656C69666FLL
            && *(_QWORD *)(v17 + 13) == 0x7972616D6D75732DLL)
          {
            *(_QWORD *)__dst = llvm::dbgs(0);
            sub_1C62E1FC4();
            goto LABEL_284;
          }
          if (*(_QWORD *)v17 == 0x6D2D7A6F2D636373
            && *((_QWORD *)v17 + 1) == 0x6E692D656C75646FLL
            && *(_QWORD *)(v17 + 13) == 0x72656E696C6E692DLL)
          {
            llvm::PassBuilder::buildInlinerPipeline((llvm *)0x200000002, v11, 0, (uint64_t)__dst);
LABEL_1560:
            sub_1C62E18E0();
            *(_QWORD *)v779 = &__dst[128];
            sub_1C4764BBC((void ***)v779);
            *(_QWORD *)v779 = &__dst[104];
            sub_1C4764BBC((void ***)v779);
            *(_QWORD *)v779 = &__dst[80];
            sub_1C4764BBC((void ***)v779);
            goto LABEL_284;
          }
          if (*(_QWORD *)v17 == 0x65642D7069727473
            && *((_QWORD *)v17 + 1) == 0x67756265642D6461
            && *(_QWORD *)(v17 + 13) == 0x6F666E692D677562)
          {
            sub_1C62E2550();
            goto LABEL_284;
          }
          if (*(_QWORD *)v17 != 0x65642D7069727473
            || *((_QWORD *)v17 + 1) != 0x6F746F72702D6461
            || *(_QWORD *)(v17 + 13) != 0x73657079746F746FLL)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v58 = 1;
            goto LABEL_100;
          }
          sub_1C62E2628();
          goto LABEL_1571;
        }
        llvm::GCOVOptions::getDefault((uint64_t)v779);
        *(_QWORD *)__dst = *(_QWORD *)v779;
        v385 = SHIBYTE(v780);
        if (SHIBYTE(v780) < 0)
        {
          sub_1C47EBC30(&__dst[8], *(void **)&v779[8], *(unint64_t *)&v779[16]);
        }
        else
        {
          *(_OWORD *)&__dst[8] = *(_OWORD *)&v779[8];
          *(_QWORD *)&__dst[24] = v780;
        }
        v432 = SBYTE7(v782);
        if (SBYTE7(v782) < 0)
        {
          sub_1C47EBC30(&__dst[32], (void *)v781, *((unint64_t *)&v781 + 1));
        }
        else
        {
          *(_OWORD *)&__dst[32] = v781;
          *(_QWORD *)&__dst[48] = v782;
        }
        v433 = (_QWORD *)operator new();
        v434 = *(_QWORD *)__dst;
        v435 = *(_QWORD *)&__dst[16];
        v433[2] = *(_QWORD *)&__dst[8];
        v433[3] = v435;
        *(_QWORD *)((char *)v433 + 31) = *(_QWORD *)&__dst[23];
        LOBYTE(v435) = __dst[31];
        memset(&__dst[8], 0, 24);
        v436 = *(_QWORD *)&__dst[40];
        v433[5] = *(_QWORD *)&__dst[32];
        v433[6] = v436;
        *(_QWORD *)((char *)v433 + 55) = *(_QWORD *)&__dst[47];
        LOBYTE(v436) = __dst[55];
        memset(&__dst[32], 0, 24);
        *v433 = &off_1E818C8E0;
        v433[1] = v434;
        *((_BYTE *)v433 + 39) = v435;
        *((_BYTE *)v433 + 63) = v436;
        p_p = v433;
        v437 = *(_QWORD **)(v10 + 8);
        if ((unint64_t)v437 >= *(_QWORD *)(v10 + 16))
        {
          v438 = sub_1C4D62F9C((char **)v10, (uint64_t *)&p_p);
          v439 = p_p;
          *(_QWORD *)(v10 + 8) = v438;
          p_p = 0;
          if (v439)
            (*(void (**)(void *))(*(_QWORD *)v439 + 8))(v439);
        }
        else
        {
          *v437 = v433;
          *(_QWORD *)(v10 + 8) = v437 + 1;
        }
        if ((__dst[55] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[32]);
        if ((__dst[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__dst[8]);
          if ((v432 & 0x80000000) == 0)
          {
LABEL_1332:
            if ((v385 & 0x80000000) == 0)
              goto LABEL_284;
LABEL_1336:
            operator delete(*(void **)&v779[8]);
            goto LABEL_284;
          }
        }
        else if ((v432 & 0x80000000) == 0)
        {
          goto LABEL_1332;
        }
        operator delete((void *)v781);
        if ((v385 & 0x80000000) == 0)
          goto LABEL_284;
        goto LABEL_1336;
      case 0x16uLL:
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x6C696D69732D7269
          && *(_QWORD *)(v17 + 14) == 0x3E79746972616C69)
        {
          sub_1C62E11A4();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x6164696C61766E69
            || *((_QWORD *)v17 + 1) != 0x61626F6C673C6574
            || *(_QWORD *)(v17 + 14) != 0x3E61612D736C6162)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v53 = 1;
            goto LABEL_100;
          }
          sub_1C62E1278();
        }
        goto LABEL_1571;
      case 0x17uLL:
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x732D656C75646F6DLL
          && *(_QWORD *)(v17 + 15) == 0x3E7972616D6D7573)
        {
          sub_1C62E0DE4();
          goto LABEL_1571;
        }
        v258 = *(_QWORD *)v17 == 0x3C65726975716572
            && *((_QWORD *)v17 + 1) == 0x612D656E696C6E69
            && *(_QWORD *)(v17 + 15) == 0x3E726F7369766461;
        v67 = v715;
        if (v258)
        {
          sub_1C62E111C();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x6E6F6974636E7566
          && *((_QWORD *)v17 + 1) == 0x6C6169636570732DLL
          && *(_QWORD *)(v17 + 15) == 0x6E6F6974617A696CLL)
        {
          sub_1C62E17BC();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x6F6D3C746E697270
          && *((_QWORD *)v17 + 1) == 0x6265642D656C7564
          && *(_QWORD *)(v17 + 15) == 0x3E6F666E69677562)
        {
          v445 = llvm::dbgs(0);
          *(_QWORD *)__dst = &__dst[16];
          *(_QWORD *)&__dst[8] = 0x800000000;
          *(_QWORD *)&__dst[80] = &__dst[96];
          *(_QWORD *)&__dst[88] = 0x800000000;
          *(_QWORD *)&__dst[160] = &__dst[176];
          *(_QWORD *)&__dst[168] = 0x800000000;
          v740[1] = &v740[3];
          v740[2] = (void *)0x800000000;
          *((_QWORD *)&v743 + 1) = (char *)&v744 + 8;
          *(_QWORD *)&v744 = 0x800000000;
          v752[0] = &v755;
          v752[1] = &v755;
          v753 = 32;
          LODWORD(v754) = 0;
          v764 = v445;
          sub_1C62E218C();
          if (v752[1] != v752[0])
            free(v752[1]);
          if (*((__int128 **)&v743 + 1) != (__int128 *)((char *)&v744 + 8))
            free(*((void **)&v743 + 1));
          if (v740[1] != &v740[3])
            free(v740[1]);
          if (*(_BYTE **)&__dst[160] != &__dst[176])
            free(*(void **)&__dst[160]);
          if (*(_BYTE **)&__dst[80] != &__dst[96])
            free(*(void **)&__dst[80]);
          goto LABEL_1402;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
          goto LABEL_102;
        v707 = 0;
        v708 = 0;
        v710 = 0;
        v711 = 0;
        v712 = 0;
        v713 = 0;
        LODWORD(v16) = 0;
        v714 = 0;
        v55 = 0;
        v709 = 0;
        LODWORD(v13) = 0;
        v706 = 1;
        goto LABEL_176;
      case 0x18uLL:
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x6E6F6974636E7566
          && *((_QWORD *)v17 + 2) == 0x3E7370756F72672DLL)
        {
          v373 = operator new();
          v374 = &off_1E818C1E0;
          goto LABEL_1098;
        }
        v288 = *(_QWORD *)v17 == 0x6164696C61766E69
            && *((_QWORD *)v17 + 1) == 0x706F2D6F6E3C6574
            && *((_QWORD *)v17 + 2) == 0x3E656C75646F6D2DLL;
        v67 = v715;
        if (v288)
        {
          v373 = operator new();
          v378 = &off_1E818C3A0;
LABEL_1119:
          *(_QWORD *)v373 = v378;
          *(_QWORD *)__dst = v373;
          v375 = *(uint64_t **)(v10 + 8);
          if ((unint64_t)v375 < *(_QWORD *)(v10 + 16))
            goto LABEL_1100;
          goto LABEL_1120;
        }
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x2D656C69666F7270
          && *((_QWORD *)v17 + 2) == 0x3E7972616D6D7573)
        {
          sub_1C62E0E6C();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x6164696C61766E69
          && *((_QWORD *)v17 + 1) == 0x6B636174733C6574
          && *((_QWORD *)v17 + 2) == 0x3E7974656661732DLL)
        {
          sub_1C62E0F40();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x3C65726975716572
          && *((_QWORD *)v17 + 1) == 0x6F6C672D6E617361
          && *((_QWORD *)v17 + 2) == 0x3E646D2D736C6162)
        {
          sub_1C62E1094();
          goto LABEL_1122;
        }
        if (*(_QWORD *)v17 == 0x762D64656C6C6163
          && *((_QWORD *)v17 + 1) == 0x6F72702D65756C61
          && *((_QWORD *)v17 + 2) == 0x6E6F697461676170)
        {
          sub_1C62E1398();
          goto LABEL_1122;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
          goto LABEL_102;
        if (sub_1C5A3C044((char *)v17, v4, "hwasan", 6uLL))
          goto LABEL_178;
        if (sub_1C5A3C044((char *)v17, v4, "asan-module", 0xBuLL))
          goto LABEL_911;
        if (sub_1C5A3C044((char *)v17, v4, "inline", 6uLL))
          goto LABEL_1450;
        if (*(_QWORD *)v17 != 0x733C796669726576
          || *((_QWORD *)v17 + 1) != 0x76652D72616C6163
          || *((_QWORD *)v17 + 2) != 0x3E6E6F6974756C6FLL)
        {
          HIDWORD(v710) = 0;
          LODWORD(v711) = 0;
          LODWORD(v13) = 0;
          v203 = 0;
          v713 = 0;
          v714 = 0;
          HIDWORD(v707) = 0;
          v712 = 0;
          v705 = 0;
          goto LABEL_1535;
        }
        v381 = operator new();
        v408 = &off_1E818E6A0;
        goto LABEL_1566;
      case 0x19uLL:
        if (*(_QWORD *)v17 != 0x6164696C61766E69
          || *((_QWORD *)v17 + 1) != 0x69732D72693C6574
          || *((_QWORD *)v17 + 2) != 0x79746972616C696DLL
          || v17[24] != 62)
        {
          LODWORD(v13) = 0;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          LODWORD(v16) = 1;
          goto LABEL_100;
        }
        sub_1C62E11E8();
        goto LABEL_1571;
      case 0x1AuLL:
        if (*(_QWORD *)v17 == 0x6164696C61766E69
          && *((_QWORD *)v17 + 1) == 0x6C75646F6D3C6574
          && *((_QWORD *)v17 + 2) == 0x72616D6D75732D65
          && *((_WORD *)v17 + 12) == 15993)
        {
          sub_1C62E0E28();
          goto LABEL_1571;
        }
        v143 = *(_QWORD *)v17 == 0x6164696C61766E69
            && *((_QWORD *)v17 + 1) == 0x6E696C6E693C6574
            && *((_QWORD *)v17 + 2) == 0x6F73697664612D65
            && *((_WORD *)v17 + 12) == 15986;
        v67 = v715;
        if (v143)
        {
          sub_1C62E1160();
        }
        else if (*(_QWORD *)v17 == 0x6B6F6F6C2D6C6572
               && *((_QWORD *)v17 + 1) == 0x656C6261742D7075
               && *((_QWORD *)v17 + 2) == 0x747265766E6F632DLL
               && *((_WORD *)v17 + 12) == 29285)
        {
          sub_1C62E228C();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x2D65746972776572
            || *((_QWORD *)v17 + 1) != 0x696F706574617473
            || *((_QWORD *)v17 + 2) != 0x2D726F662D73746ELL
            || *((_WORD *)v17 + 12) != 25447)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v55 = 1;
            goto LABEL_100;
          }
          sub_1C62E22D4();
        }
        goto LABEL_1122;
      case 0x1BuLL:
        if (*(_QWORD *)v17 == 0x6164696C61766E69
          && *((_QWORD *)v17 + 1) == 0x74636E75663C6574
          && *((_QWORD *)v17 + 2) == 0x756F72672D6E6F69
          && *(_QWORD *)(v17 + 19) == 0x3E7370756F72672DLL)
        {
          v373 = operator new();
          v374 = &off_1E818C220;
LABEL_1098:
          *(_QWORD *)v373 = v374;
LABEL_1099:
          *(_QWORD *)__dst = v373;
          v375 = *(uint64_t **)(v10 + 8);
          v67 = v715;
          if ((unint64_t)v375 >= *(_QWORD *)(v10 + 16))
          {
LABEL_1120:
            v383 = sub_1C4D62F9C((char **)v10, (uint64_t *)__dst);
            v384 = *(_QWORD *)__dst;
            *(_QWORD *)(v10 + 8) = v383;
            *(_QWORD *)__dst = 0;
            if (v384)
              (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
          }
          else
          {
LABEL_1100:
            *v375 = v373;
            *(_QWORD *)(v10 + 8) = v375 + 1;
          }
LABEL_1122:
          *v67 = 0;
          return;
        }
        if (*(_QWORD *)v17 == 0x6164696C61766E69
          && *((_QWORD *)v17 + 1) == 0x69666F72703C6574
          && *((_QWORD *)v17 + 2) == 0x616D6D75732D656CLL
          && *(_QWORD *)(v17 + 19) == 0x3E7972616D6D7573)
        {
          sub_1C62E0EB8();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x6164696C61766E69
            || *((_QWORD *)v17 + 1) != 0x2D6E6173613C6574
            || *((_QWORD *)v17 + 2) != 0x2D736C61626F6C67
            || *(_QWORD *)(v17 + 19) != 0x3E646D2D736C6162)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v57 = 1;
            goto LABEL_100;
          }
          sub_1C62E10D8();
        }
        goto LABEL_1571;
      case 0x1CuLL:
        if (*(_QWORD *)v17 == 0x6F6E2D7069727473
          && *((_QWORD *)v17 + 1) == 0x626174656E696C6ELL
          && *((_QWORD *)v17 + 2) == 0x67756265642D656CLL
          && *((_DWORD *)v17 + 6) == 1868983913)
        {
          sub_1C62E2700();
        }
        else
        {
          if (*(_QWORD *)v17 != 0x69746568746E7973
            || *((_QWORD *)v17 + 1) != 0x73746E756F632D63
            || *((_QWORD *)v17 + 2) != 0x616761706F72702DLL
            || *((_DWORD *)v17 + 6) != 1852795252)
          {
            LODWORD(v13) = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            LODWORD(v16) = 0;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 1;
            goto LABEL_100;
          }
          sub_1C62E2744();
        }
        goto LABEL_1571;
      case 0x1DuLL:
        if (*(_QWORD *)v17 != 0x3C65726975716572
          || *((_QWORD *)v17 + 1) != 0x736E692D73736170
          || *((_QWORD *)v17 + 2) != 0x61746E656D757274
          || *(_QWORD *)(v17 + 21) != 0x3E6E6F697461746ELL)
        {
          LODWORD(v13) = 0;
          v52 = 0;
          v53 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v59 = 0;
          LODWORD(v16) = 0;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v54 = 1;
          goto LABEL_100;
        }
        sub_1C62E100C();
        goto LABEL_1571;
      case 0x1FuLL:
        if (*(_QWORD *)v17 != 0x756D2D746E697270
          || *((_QWORD *)v17 + 1) != 0x78652D65622D7473
          || *((_QWORD *)v17 + 2) != 0x632D646574756365
          || *(_QWORD *)(v17 + 23) != 0x73747865746E6F63)
        {
          goto LABEL_98;
        }
        *(_QWORD *)__dst = llvm::dbgs(0);
        sub_1C62E20F4();
        goto LABEL_1571;
      case 0x20uLL:
        if (*(_QWORD *)v17 != 0x6164696C61766E69
          || *((_QWORD *)v17 + 1) != 0x2D737361703C6574
          || *((_QWORD *)v17 + 2) != 0x656D757274736E69
          || *((_QWORD *)v17 + 3) != 0x3E6E6F697461746ELL)
        {
          goto LABEL_98;
        }
        sub_1C62E1050();
        goto LABEL_1571;
      case 0x22uLL:
        if (!memcmp(v17, "inliner-wrapper-no-mandatory-first", 0x22uLL))
        {
          llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)v728);
          llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass((uint64_t)__dst, (uint64_t)v728, 0, 0, 0);
          sub_1C62E18E0();
          *(_QWORD *)v779 = &__dst[128];
          sub_1C4764BBC((void ***)v779);
          *(_QWORD *)v779 = &__dst[104];
          sub_1C4764BBC((void ***)v779);
          *(_QWORD *)v779 = &__dst[80];
          sub_1C4764BBC((void ***)v779);
          goto LABEL_1571;
        }
        if (sub_1C5A3C044((char *)v17, v4, "loop-extract", 0xCuLL))
        {
LABEL_677:
          v67 = v715;
          goto LABEL_102;
        }
        v707 = 0;
        v708 = 0;
        v710 = 0;
        v711 = 0;
        v712 = 0;
        v713 = 0;
        LODWORD(v16) = 0;
        v706 = 0;
        v714 = 0;
        v55 = 0;
        v709 = 0;
        LODWORD(v13) = 0;
        goto LABEL_176;
      default:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        LODWORD(v16) = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        goto LABEL_100;
    }
  }
  if (!(_DWORD)v15)
  {
LABEL_7:
    v20 = *v8;
    v21 = v8[1];
    if (v21 > 7)
    {
      if (v21 == 8)
      {
        if (*(_QWORD *)v20 != 0x6E6F6974636E7566)
          goto LABEL_131;
      }
      else
      {
        if (v21 != 19)
          goto LABEL_131;
        v38 = *(_QWORD *)v20 == 0x6E6F6974636E7566 && *(_QWORD *)(v20 + 8) == 0x692D72656761653CLL;
        if (!v38 || *(_QWORD *)(v20 + 11) != 0x3E766E692D726567)
          goto LABEL_131;
      }
      memset(__dst, 0, 24);
      v95 = v8[2];
      v96 = v8[3] - v95;
      if (v96)
      {
        v97 = 40 * (v96 / 40);
        while (1)
        {
          llvm::PassBuilder::parseFunctionPass(v11, (uint64_t)__dst, v95, (uint64_t)v7);
          if (*v13)
            break;
          v95 += 40;
          v97 -= 40;
          if (!v97)
          {
            v21 = v8[1];
            goto LABEL_173;
          }
        }
      }
      else
      {
LABEL_173:
        *v13 = 0;
        v98 = v21 != 8 || *(_QWORD *)*v8 != 0x6E6F6974636E7566;
        sub_1C5A3BBD8((__int128 *)__dst, v98, (uint64_t)v779);
        sub_1C5A3BB70();
        v103 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v103)
          (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
        *v13 = 0;
      }
    }
    else
    {
      if (v21 != 5)
      {
        if (v21 == 6)
        {
          v22 = *(_DWORD *)v20 == 1969516397 && *(_WORD *)(v20 + 4) == 25964;
          if (v22)
          {
            memset(__dst, 0, 24);
            v23 = v8[2];
            v24 = v8[3] - v23;
            if (v24)
            {
              v25 = 40 * (v24 / 40);
              while (1)
              {
                llvm::PassBuilder::parseModulePass(v11, __dst, v23);
                if (*v13)
                  break;
                v23 += 40;
                v25 -= 40;
                if (!v25)
                {
                  v27 = *(uint64_t **)__dst;
                  v26 = *(uint64_t **)&__dst[8];
                  *v13 = 0;
                  if (v27 != v26)
                  {
                    v28 = *(char **)(v10 + 8);
                    do
                    {
                      if ((unint64_t)v28 >= *(_QWORD *)(v10 + 16))
                      {
                        v28 = sub_1C4D62F9C((char **)v10, v27);
                      }
                      else
                      {
                        v29 = *v27;
                        *v27 = 0;
                        *(_QWORD *)v28 = v29;
                        v28 += 8;
                      }
                      *(_QWORD *)(v10 + 8) = v28;
                      ++v27;
                    }
                    while (v27 != v26);
                  }
                  goto LABEL_25;
                }
              }
            }
            else
            {
LABEL_25:
              *v13 = 0;
            }
            *(_QWORD *)v779 = __dst;
            v30 = (void ***)v779;
            goto LABEL_149;
          }
        }
LABEL_131:
        v78 = sub_1C5A3BC6C((_DWORD *)v20, v21, v6, v7);
        if (!HIDWORD(v78))
        {
          v79 = *(unsigned int *)(v11 + 1192);
          if (!(_DWORD)v79)
          {
LABEL_137:
            *(_QWORD *)__dst = "invalid use of '{0}' pass as module pipeline";
            *(_QWORD *)&__dst[8] = 44;
            *(_QWORD *)&__dst[16] = &__dst[48];
            *(_QWORD *)&__dst[24] = 1;
            *(_QWORD *)&__dst[32] = &unk_1E818C130;
            *(_QWORD *)&__dst[40] = v8;
            *(_QWORD *)&__dst[48] = &__dst[32];
            sub_1C4DCAF2C((uint64_t)__dst, v779);
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            p_p = (void *)3;
            v734 = qword_1ED836B58[0];
            v83 = v13;
            goto LABEL_140;
          }
          v16 = (_QWORD *)(*(_QWORD *)(v11 + 1184) + 24);
          v17 = (unsigned __int8 *)(32 * v79);
          v11 = 0xCCCCCCCCCCCCCCCDLL;
          while (1)
          {
            v80 = v8[2];
            v81 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v80) >> 3);
            *(_OWORD *)__dst = *(_OWORD *)v8;
            *(_QWORD *)v779 = v80;
            *(_QWORD *)&v779[8] = v81;
            if (!*v16)
              goto LABEL_2235;
            if ((*(unsigned int (**)(_QWORD, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)*v16 + 48))(*v16, __dst, v10, v779))
            {
              goto LABEL_284;
            }
            v16 += 4;
            v17 -= 32;
            if (!v17)
              goto LABEL_137;
          }
        }
        v84 = v78;
        v85 = 0uLL;
        memset(v779, 0, sizeof(v779));
        v86 = v8[2];
        v87 = v8[3] - v86;
        if (v87)
        {
          v88 = 40 * (v87 / 40);
          while (1)
          {
            llvm::PassBuilder::parseModulePass(v11, v779, v86);
            if (*v13)
              break;
            v86 += 40;
            v88 -= 40;
            if (!v88)
            {
              v85 = *(_OWORD *)v779;
              v87 = *(_QWORD *)&v779[16];
              goto LABEL_147;
            }
          }
        }
        else
        {
LABEL_147:
          *v13 = 0;
          *(_DWORD *)__dst = v84;
          *(_OWORD *)&__dst[8] = v85;
          *(_QWORD *)&__dst[24] = v87;
          memset(v779, 0, sizeof(v779));
          sub_1C62E0C44();
          p_p = &__dst[8];
          sub_1C4764BBC((void ***)&p_p);
          *v13 = 0;
        }
        *(_QWORD *)__dst = v779;
        v30 = (void ***)__dst;
LABEL_149:
        sub_1C4764BBC(v30);
        return;
      }
      if (*(_DWORD *)v20 != 1668507491 || *(_BYTE *)(v20 + 4) != 99)
        goto LABEL_131;
      memset(__dst, 0, 24);
      v74 = v8[2];
      v75 = v8[3] - v74;
      if (v75)
      {
        v76 = 40 * (v75 / 40);
        while (1)
        {
          llvm::PassBuilder::parseCGSCCPass(v11, (uint64_t)__dst, v74, (uint64_t)v7);
          if (*v13)
            break;
          v74 += 40;
          v76 -= 40;
          if (!v76)
            goto LABEL_126;
        }
      }
      else
      {
LABEL_126:
        *v13 = 0;
        sub_1C5703824((__int128 *)__dst, (uint64_t *)v779);
        sub_1C6297060(v10, (uint64_t *)v779);
        v77 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v77)
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
        *v13 = 0;
      }
    }
    *(_QWORD *)v779 = __dst;
    sub_1C4764BBC((void ***)v779);
    return;
  }
  v16 = (_QWORD *)(v14 + 24);
  v17 = (unsigned __int8 *)(32 * v15);
  v4 = 0xCCCCCCCCCCCCCCCDLL;
  while (1)
  {
    v18 = v8[2];
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v18) >> 3);
    *(_OWORD *)__dst = *(_OWORD *)v8;
    *(_QWORD *)v779 = v18;
    *(_QWORD *)&v779[8] = v19;
    if (!*v16)
      break;
    if ((*(unsigned int (**)(_QWORD, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)*v16 + 48))(*v16, __dst, v10, v779))
    {
      goto LABEL_284;
    }
    v16 += 4;
    v17 -= 32;
    if (!v17)
      goto LABEL_7;
  }
  while (1)
  {
LABEL_2235:
    sub_1C485C2F0();
LABEL_2236:
    if ((_DWORD)v713)
    {
      if (*(_QWORD *)v17 == 0x65643C746E697270
        && *((_QWORD *)v17 + 1) == 0x7A697261656E696CLL
        && *(_QWORD *)(v17 + 14) == 0x3E6E6F6974617A69)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818DE20;
        goto LABEL_1719;
      }
      if (*(_QWORD *)v17 == 0x75663C746E697270
        && *((_QWORD *)v17 + 1) == 0x65706F72702D636ELL
        && *(_QWORD *)(v17 + 14) == 0x3E73656974726570)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818DEE0;
        goto LABEL_1719;
      }
    }
LABEL_2251:
    if ((_DWORD)v709)
    {
      v640 = *(_QWORD *)v17 == 0x6E693C746E697270 && *((_QWORD *)v17 + 1) == 0x69732D72656E696CLL;
      v641 = v640 && *((_QWORD *)v17 + 2) == 0x6D697473652D657ALL;
      if (v641 && *(_QWORD *)(v17 + 21) == 0x3E726F74616D6974)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818DF60;
        goto LABEL_1719;
      }
    }
    if (HIDWORD(v708))
    {
      v643 = *(_QWORD *)v17 == 0x70673C746E697270 && *((_QWORD *)v17 + 1) == 0x6974636E75662D75;
      v644 = v643 && *((_QWORD *)v17 + 2) == 0x796C616E612D6E6FLL;
      if (v644 && *((_DWORD *)v17 + 6) == 1047751027)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818DFA0;
        goto LABEL_1719;
      }
    }
    if ((_DWORD)v714)
    {
      if (*(_QWORD *)v17 == 0x6F6C3C746E697270 && *((_DWORD *)v17 + 2) == 1047752815)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818DFE0;
        goto LABEL_1719;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x656D3C746E697270 && *((_QWORD *)v17 + 1) == 0x3E61737379726F6DLL)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E020;
        goto LABEL_1719;
      }
    }
    if (v706)
    {
      v648 = *(_QWORD *)v17 == 0x656D3C746E697270 && *((_QWORD *)v17 + 1) == 0x2D61737379726F6DLL;
      if (v648 && *(_QWORD *)(v17 + 15) == 0x3E72656B6C61772DLL)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E060;
        goto LABEL_1719;
      }
    }
    if (HIDWORD(v710))
    {
      if (*(_QWORD *)v17 == 0x68703C746E697270 && *((_QWORD *)v17 + 1) == 0x7365756C61762D69 && v17[16] == 62)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E0A0;
        goto LABEL_1719;
      }
    }
    else if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x65723C746E697270 && *(_QWORD *)(v17 + 6) == 0x3E736E6F69676572)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E0E0;
        goto LABEL_1719;
      }
    }
    if (v706)
    {
      v653 = *(_QWORD *)v17 == 0x63733C746E697270 && *((_QWORD *)v17 + 1) == 0x6F76652D72616C61;
      if (v653 && *(_QWORD *)(v17 + 15) == 0x3E6E6F6974756C6FLL)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E120;
        goto LABEL_1719;
      }
    }
    if ((_DWORD)v16)
    {
      v655 = *(_QWORD *)v17 == 0x74733C746E697270 && *((_QWORD *)v17 + 1) == 0x656661732D6B6361;
      v656 = v655 && *((_QWORD *)v17 + 2) == 0x6C61636F6C2D7974;
      if (v656 && v17[24] == 62)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E160;
        goto LABEL_1719;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x6C612D746E697270 && *((_QWORD *)v17 + 1) == 0x737465732D736169)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E1A0;
        goto LABEL_1719;
      }
    }
    if ((_DWORD)v712)
    {
      v659 = *(_QWORD *)v17 == 0x72702D746E697270 && *((_QWORD *)v17 + 1) == 0x6965746163696465;
      if (v659 && *(_QWORD *)(v17 + 11) == 0x6F666E6965746163)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E1E0;
        goto LABEL_1719;
      }
    }
    if (HIDWORD(v710))
    {
      v661 = *(_QWORD *)v17 == 0x756D2D746E697270 && *((_QWORD *)v17 + 1) == 0x7475636578657473;
      if (v661 && v17[16] == 101)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E220;
        goto LABEL_1719;
      }
    }
    if (HIDWORD(v714))
    {
      if (*(_QWORD *)v17 == 0x656D2D746E697270 && *(_QWORD *)(v17 + 7) == 0x7366657265646D65)
      {
        v525 = llvm::dbgs((llvm *)v132);
        v381 = operator new();
        v526 = &off_1E818E260;
        goto LABEL_1719;
      }
    }
    if (HIDWORD(v713))
    {
      if (*(_QWORD *)v17 == 0x69636F7373616572 && *(_QWORD *)(v17 + 3) == 0x65746169636F7373)
      {
        bzero(__dst, 0x230uLL);
        for (i = 120; i != 552; i += 24)
        {
          v700 = &__dst[i];
          *(_QWORD *)v700 = 0;
          *((_QWORD *)v700 + 1) = 0;
          *((_DWORD *)v700 + 4) = 0;
        }
        sub_1C62E314C((uint64_t)v779, (uint64_t)__dst);
        sub_1C5A3BB70();
        v701 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v701)
          (*(void (**)(uint64_t))(*(_QWORD *)v701 + 8))(v701);
        sub_1C5A55684(__dst);
        goto LABEL_1571;
      }
    }
    if (v706)
    {
      v665 = *(_QWORD *)v17 == 0x6E61646E75646572 && *((_QWORD *)v17 + 1) == 0x6E692D6762642D74;
      if (v665 && *(_QWORD *)(v17 + 15) == 0x6D696C652D74736ELL)
      {
        v381 = operator new();
        v408 = &off_1E818E2A0;
        goto LABEL_1566;
      }
    }
    if (v133)
    {
      if (*(_DWORD *)v17 == 845636978 && *(_DWORD *)(v17 + 3) == 1835363634)
      {
        v381 = operator new();
        v408 = &off_1E818E2E0;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v708)
    {
      v668 = *(_QWORD *)v17 == 0x7A6972616C616373 && *((_QWORD *)v17 + 1) == 0x64656B73616D2D65;
      v669 = v668 && *((_QWORD *)v17 + 2) == 0x746E692D6D656D2DLL;
      if (v669 && *(_QWORD *)(v17 + 19) == 0x6E6972746E692D6DLL)
      {
        v381 = operator new();
        v408 = &off_1E818E320;
        goto LABEL_1566;
      }
    }
    if (HIDWORD(v707))
    {
      if (*(_QWORD *)v17 == 0x7A6972616C616373 && *((_WORD *)v17 + 4) == 29285)
      {
        v381 = operator new();
        *(_QWORD *)v381 = &off_1E818E360;
        *(_DWORD *)(v381 + 8) = 0;
        goto LABEL_1567;
      }
    }
    if (v4 == 30)
    {
      v672 = *(_QWORD *)v17 == 0x6574617261706573 && *((_QWORD *)v17 + 1) == 0x6F2D74736E6F632DLL;
      v673 = v672 && *((_QWORD *)v17 + 2) == 0x72662D7465736666;
      if (v673 && *(_QWORD *)(v17 + 22) == 0x7065672D6D6F7266)
      {
        v381 = operator new();
        v680 = &off_1E818E3A0;
        goto LABEL_2434;
      }
    }
    if (v134)
    {
      if (*(_DWORD *)v17 == 1885561715)
      {
        v381 = operator new();
        v382 = (char *)&unk_1E8190C10;
        goto LABEL_1565;
      }
      if (*(_DWORD *)v17 == 1802398067)
      {
        v381 = operator new();
        v408 = &off_1E818E3E0;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x746365762D706C73 && *(_QWORD *)(v17 + 6) == 0x72657A69726F7463)
      {
        memset(__dst, 0, 168);
        sub_1C62E31D0((uint64_t)v779, (__int128 *)__dst);
        sub_1C5A3BB70();
        v702 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v702)
          (*(void (**)(uint64_t))(*(_QWORD *)v702 + 8))(v702);
        sub_1C62EA8E4((uint64_t)&__dst[120]);
        sub_1C62EA8E4((uint64_t)&__dst[72]);
        goto LABEL_1571;
      }
    }
    if (v134 && *(_DWORD *)v17 == 1920167027)
    {
      v381 = operator new();
      v408 = &off_1E818E420;
LABEL_1566:
      *(_QWORD *)v381 = v408;
      goto LABEL_1567;
    }
    if ((_DWORD)v710)
    {
      v676 = *(_QWORD *)v17 == 0x74616C7563657073 && *((_QWORD *)v17 + 1) == 0x636578652D657669;
      if (v676 && *(_QWORD *)(v17 + 13) == 0x6E6F697475636578)
      {
        v688 = byte_1ED836950;
        v381 = operator new();
        *(_QWORD *)v381 = &unk_1E8190DE0;
        *(_QWORD *)(v381 + 8) = v688;
        *(_QWORD *)(v381 + 16) = 0;
        goto LABEL_1567;
      }
    }
    if (v134 && *(_DWORD *)v17 == 1634693747)
    {
      bzero(__dst, 0x2C0uLL);
      *(_QWORD *)&__dst[48] = &__dst[64];
      *(_DWORD *)&__dst[60] = 16;
      *(_QWORD *)&__dst[192] = &__dst[208];
      *(_DWORD *)&__dst[204] = 8;
      *(_OWORD *)v752 = 0u;
      LODWORD(v753) = 0;
      v754 = v757;
      v756 = 16;
      memset(&v757[128], 0, 44);
      v758 = v760;
      v759 = 2;
      v760[1] = 0u;
      v761 = 0;
      v762 = &v764;
      v763 = 2;
      sub_1C62E3310((uint64_t)v779, (__int128 *)__dst);
      sub_1C5A3BB70();
      v703 = *(_QWORD *)v779;
      *(_QWORD *)v779 = 0;
      if (v703)
        (*(void (**)(uint64_t))(*(_QWORD *)v703 + 8))(v703);
      sub_1C5A55934((uint64_t)__dst);
      goto LABEL_1571;
    }
    if (v4 == 18)
    {
      if (*(_QWORD *)v17 == 0x63672D7069727473
        && *((_QWORD *)v17 + 1) == 0x7461636F6C65722DLL
        && *((_WORD *)v17 + 8) == 29541)
      {
        v381 = operator new();
        v408 = &off_1E818E460;
        goto LABEL_1566;
      }
    }
    else if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x7275746375727473 && *(_QWORD *)(v17 + 6) == 0x676663657A697275)
      {
        v381 = operator new();
        v408 = &off_1E818E4A0;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v714)
    {
      if (*(_QWORD *)v17 == 0x6C6C61636C696174 && *((_DWORD *)v17 + 2) == 1835625573)
      {
        v381 = operator new();
        v382 = (char *)&unk_1E8190F50;
LABEL_1565:
        v408 = (uint64_t (**)())(v382 + 16);
        goto LABEL_1566;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x6F6C2D7966696E75 && *((_QWORD *)v17 + 1) == 0x73746978652D706FLL)
      {
        v381 = operator new();
        v408 = &off_1E818E4E0;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x632D726F74636576 && *(_QWORD *)(v17 + 6) == 0x656E69626D6F632DLL)
      {
        v381 = operator new();
        v680 = (uint64_t (**)())&unk_1E8190FA0;
LABEL_2434:
        *(_QWORD *)v381 = v680;
        *(_BYTE *)(v381 + 8) = 0;
LABEL_1567:
        *(_QWORD *)__dst = v381;
        __dst[8] = 0;
        sub_1C5A3BB70();
LABEL_1568:
        v485 = *(_QWORD *)__dst;
LABEL_1569:
        *(_QWORD *)__dst = 0;
        if (v485)
          (*(void (**)(uint64_t))(*(_QWORD *)v485 + 8))(v485);
        goto LABEL_1571;
      }
    }
    else if (HIDWORD(v709))
    {
      if (*(_DWORD *)v17 == 1769104758 && *((_WORD *)v17 + 2) == 31078)
      {
        v381 = operator new();
        *(_QWORD *)v381 = &off_1E818E520;
        *(_BYTE *)(v381 + 8) = 1;
        goto LABEL_1567;
      }
    }
    if (HIDWORD(v714))
    {
      if (*(_QWORD *)v17 == 0x643C796669726576 && *(_QWORD *)(v17 + 7) == 0x3E656572746D6F64)
      {
        v381 = operator new();
        v408 = &off_1E818E560;
        goto LABEL_1566;
      }
    }
    if (HIDWORD(v712))
    {
      if (*(_QWORD *)v17 == 0x6C3C796669726576 && *(_QWORD *)(v17 + 5) == 0x3E73706F6F6C3C79)
      {
        v381 = operator new();
        v408 = &off_1E818E5A0;
        goto LABEL_1566;
      }
    }
    if (HIDWORD(v710))
    {
      v692 = *(_QWORD *)v17 == 0x6D3C796669726576 && *((_QWORD *)v17 + 1) == 0x61737379726F6D65;
      if (v692 && v17[16] == 62)
      {
        v381 = operator new();
        v408 = &off_1E818E5E0;
        goto LABEL_1566;
      }
    }
    if (HIDWORD(v714))
    {
      if (*(_QWORD *)v17 == 0x723C796669726576 && *(_QWORD *)(v17 + 7) == 0x3E736E6F69676572)
      {
        v381 = operator new();
        v408 = &off_1E818E620;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v707 && *(_QWORD *)v17 == 0x6766632D77656976)
    {
      v381 = operator new();
      v408 = &off_1E818E6E0;
      goto LABEL_1566;
    }
    if (HIDWORD(v712))
    {
      if (*(_QWORD *)v17 == 0x6766632D77656976 && *(_QWORD *)(v17 + 5) == 0x796C6E6F2D676663)
      {
        v381 = operator new();
        v408 = &off_1E818E720;
        goto LABEL_1566;
      }
    }
    if ((_DWORD)v707 && *(_QWORD *)v17 == 0x7473696F68736C74)
    {
      memset(__dst, 0, 64);
      sub_1C62E33C0((uint64_t)v779, (__int128 *)__dst);
      sub_1C5A3BB70();
      v704 = *(_QWORD *)v779;
      *(_QWORD *)v779 = 0;
      if (v704)
        (*(void (**)(uint64_t))(*(_QWORD *)v704 + 8))(v704);
      sub_1C62EA928((uint64_t)&__dst[16]);
      goto LABEL_1571;
    }
    if (HIDWORD(v710))
    {
      v696 = *(_QWORD *)v17 == 0x726F66736E617274 && *((_QWORD *)v17 + 1) == 0x6E696E7261772D6DLL;
      if (v696 && v17[16] == 103)
      {
        v381 = operator new();
        v382 = (char *)&unk_1E8191B50;
        goto LABEL_1565;
      }
    }
    if (v134 && *(_DWORD *)v17 == 1851880308)
    {
      v381 = operator new();
      v408 = &off_1E818E7A0;
      goto LABEL_1566;
    }
    if (v133)
    {
      if (*(_DWORD *)v17 == 1886217581 && *(_DWORD *)(v17 + 3) == 1718579824)
      {
        v381 = operator new();
        v382 = (char *)&unk_1E8191A10;
        goto LABEL_1565;
      }
      v203 = 0;
      v202 = 1;
    }
    else
    {
      v203 = 0;
LABEL_1535:
      v202 = 0;
    }
LABEL_1536:
    if (sub_1C5A3C044((char *)v17, v4, "early-cse", 9uLL))
    {
      if (v4 >= 9)
      {
        if (*(_QWORD *)v17 != 0x73632D796C726165 || v17[8] != 101)
          goto LABEL_1545;
        v17 += 9;
        v4 -= 9;
      }
      if (v4)
      {
LABEL_1545:
        v478 = v17 + 1;
        v479 = *v17;
        v480 = v4 - (v479 == 60);
        if (v479 == 60)
        {
          ++v17;
          if (v480)
          {
            if (v478[v480 - 1] == 62 && v480 >= v480 - 1)
              --v480;
          }
        }
      }
      else
      {
        v480 = 0;
      }
      sub_1C5A551F4((uint64_t)__dst, (uint64_t)v17, v480, "memssa", 6uLL, (uint64_t)"EarlyCSE", 8);
      if ((__dst[8] & 1) == 0)
      {
        v510 = __dst[0];
        v511 = operator new();
        v512 = (char *)&unk_1E8190750;
        goto LABEL_1671;
      }
LABEL_1884:
      v522 = *(_QWORD *)__dst;
LABEL_1885:
      *v715 = v522;
      return;
    }
    if (sub_1C5A3C044((char *)v17, v4, "ee-instrument", 0xDuLL))
    {
      if (v4 >= 0xD)
      {
        if (*(_QWORD *)v17 != 0x7274736E692D6565 || *(_QWORD *)(v17 + 5) != 0x746E656D75727473)
          goto LABEL_1582;
        v17 += 13;
        v4 -= 13;
      }
      if (v4)
      {
LABEL_1582:
        v487 = v17 + 1;
        v488 = *v17;
        v489 = v4 - (v488 == 60);
        if (v488 == 60)
        {
          ++v17;
          if (v489)
          {
            if (v487[v489 - 1] == 62 && v489 >= v489 - 1)
              --v489;
          }
        }
      }
      else
      {
        v489 = 0;
      }
      sub_1C5A551F4((uint64_t)__dst, (uint64_t)v17, v489, "post-inline", 0xBuLL, (uint64_t)"EntryExitInstrumenter", 21);
      if ((__dst[8] & 1) != 0)
        goto LABEL_1884;
      v510 = __dst[0];
      v511 = operator new();
      v513 = &off_1E818E7E0;
LABEL_1710:
      *(_QWORD *)v511 = v513;
      *(_BYTE *)(v511 + 8) = v510;
LABEL_1711:
      *(_QWORD *)v779 = v511;
      v779[8] = 0;
      sub_1C5A3BB70();
      v521 = *(void **)v779;
      *(_QWORD *)v779 = 0;
      if (v521)
        goto LABEL_1712;
      goto LABEL_1713;
    }
    if (sub_1C5A3C044((char *)v17, v4, "lower-matrix-intrinsics", 0x17uLL))
    {
      if (v4 >= 0x17)
      {
        if (*(_QWORD *)v17 != 0x616D2D7265776F6CLL
          || *((_QWORD *)v17 + 1) != 0x746E692D78697274
          || *(_QWORD *)(v17 + 15) != 0x736369736E697274)
        {
          goto LABEL_1632;
        }
        v17 += 23;
        v4 -= 23;
      }
      if (v4)
      {
LABEL_1632:
        v502 = v17 + 1;
        v503 = *v17;
        v504 = v4 - (v503 == 60);
        if (v503 == 60)
        {
          ++v17;
          if (v504)
          {
            if (v502[v504 - 1] == 62 && v504 >= v504 - 1)
              --v504;
          }
        }
      }
      else
      {
        v504 = 0;
      }
      sub_1C5A551F4((uint64_t)__dst, (uint64_t)v17, v504, "minimal", 7uLL, (uint64_t)"LowerMatrixIntrinsics", 21);
      if ((__dst[8] & 1) != 0)
        goto LABEL_1884;
      v510 = __dst[0];
      v511 = operator new();
      v512 = (char *)&unk_1E8191E10;
LABEL_1671:
      v513 = (uint64_t (**)())(v512 + 16);
      goto LABEL_1710;
    }
    if (sub_1C5A3C044((char *)v17, v4, "loop-unroll", 0xBuLL))
    {
      sub_1C5A3C174((uint64_t)__dst, v17, v4, v514);
      if ((__dst[32] & 1) != 0)
        goto LABEL_1884;
      v511 = operator new();
      *(_QWORD *)v511 = &unk_1E8191B20;
      *(_OWORD *)(v511 + 8) = *(_OWORD *)__dst;
      *(_OWORD *)(v511 + 20) = *(_OWORD *)&__dst[12];
      goto LABEL_1711;
    }
    if (sub_1C5A3C044((char *)v17, v4, "msan", 4uLL))
    {
      sub_1C5A3C6C8((uint64_t)__dst, v17, v4);
      if ((__dst[16] & 1) != 0)
        goto LABEL_1884;
      v523 = *(_QWORD *)__dst;
      v524 = *(_DWORD *)&__dst[8];
      v511 = operator new();
      *(_QWORD *)v511 = &off_1E818E820;
      *(_QWORD *)(v511 + 8) = v523;
      *(_DWORD *)(v511 + 16) = v524;
      goto LABEL_1711;
    }
    if (sub_1C5A3C044((char *)v17, v4, "simplifycfg", 0xBuLL))
    {
      sub_1C5A3CAC0((uint64_t)__dst, v17, v4);
      if ((__dst[24] & 1) != 0)
        goto LABEL_1884;
      *(_OWORD *)v779 = *(_OWORD *)__dst;
      *(_QWORD *)&v779[16] = *(_QWORD *)&__dst[16];
      sub_1C5C48FA4((uint64_t)v779);
      v542 = (char *)operator new();
      *(_OWORD *)(v542 + 8) = *(_OWORD *)v779;
      *((_QWORD *)v542 + 3) = *(_QWORD *)&v779[16];
      *(_QWORD *)v542 = &unk_1E81907A0;
      p_p = v542;
      LOBYTE(v734) = 0;
      sub_1C5A3BB70();
      v521 = p_p;
      p_p = 0;
      if (!v521)
        goto LABEL_1713;
LABEL_1712:
      (*(void (**)(void *))(*(_QWORD *)v521 + 8))(v521);
LABEL_1713:
      v522 = 0;
      goto LABEL_1885;
    }
    if (sub_1C5A3C044((char *)v17, v4, "loop-vectorize", 0xEuLL))
    {
      sub_1C5A3D1A4((uint64_t)__dst, v17, v4);
      if ((__dst[8] & 1) != 0)
        goto LABEL_1884;
      v543 = __dst[0] & 1 | (byte_1ED838890 == 0);
      if (byte_1ED838950)
        v544 = __dst[1] & 1;
      else
        v544 = 1;
      v511 = operator new();
      *(_BYTE *)(v511 + 8) = v543;
      *(_BYTE *)(v511 + 9) = v544;
      *(_QWORD *)v511 = &unk_1E8191AA0;
      goto LABEL_1711;
    }
    if (sub_1C5A3C044((char *)v17, v4, "mldst-motion", 0xCuLL))
    {
      sub_1C5A3C0CC((uint64_t)__dst, (uint64_t)v17, v4);
      if ((__dst[8] & 1) != 0)
        goto LABEL_1884;
      v510 = __dst[0];
      v511 = operator new();
      v512 = (char *)&unk_1E8190FD0;
      goto LABEL_1671;
    }
    if (sub_1C5A3C044((char *)v17, v4, "gvn", 3uLL))
    {
      sub_1C5A3D71C((uint64_t)v779, v17, v4);
      if ((v779[16] & 1) == 0)
      {
        sub_1C62EA96C((uint64_t)__dst, *(uint64_t *)v779, *(__int16 *)&v779[8]);
        sub_1C62E3484((uint64_t)&p_p, (__int128 *)__dst);
        sub_1C5A3BB70();
        v621 = p_p;
        p_p = 0;
        if (v621)
          (*(void (**)(void *))(*(_QWORD *)v621 + 8))(v621);
        sub_1C5A55A68((uint64_t)__dst);
        goto LABEL_1713;
      }
LABEL_1857:
      v522 = *(_QWORD *)v779;
      goto LABEL_1885;
    }
    v558 = sub_1C5A3C044((char *)v17, v4, "print<stack-lifetime>", 0x15uLL);
    if (v558)
    {
      sub_1C5A3DAFC((uint64_t)__dst, v17, v4);
      if ((__dst[8] & 1) != 0)
        goto LABEL_1884;
      v630 = *(unsigned int *)__dst;
      v631 = llvm::dbgs(v559);
      v511 = operator new();
      *(_QWORD *)v511 = &off_1E818E860;
      *(_QWORD *)(v511 + 8) = v630;
      *(_QWORD *)(v511 + 16) = v631;
      goto LABEL_1711;
    }
    if ((_DWORD)v714)
    {
      if (*(_QWORD *)v17 == 0x616C662D706F6F6CLL && *((_DWORD *)v17 + 2) == 1852142708)
      {
        sub_1C62E3534((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x746E692D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x65676E6168637265)
      {
        sub_1C62E3648((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if ((_DWORD)v712)
    {
      v564 = *(_QWORD *)v17 == 0x726E752D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x2D646E612D6C6C6FLL;
      if (v564 && *(_QWORD *)(v17 + 11) == 0x6D616A2D646E612DLL)
      {
        LODWORD(__p) = 2;
        sub_1C62E375C((int *)&__p, 0, 0, 0, (uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x6F6C2D706F2D6F6ELL && *(_QWORD *)(v17 + 6) == 0x7473656E706F6F6CLL)
      {
        sub_1C5A3DE70((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if ((_DWORD)v714)
    {
      if (*(_QWORD *)v17 == 0x72662D6E6F6E6163 && *((_DWORD *)v17 + 2) == 1702520165)
      {
        sub_1C62E3890((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (v202)
    {
      if (*(_DWORD *)v17 == 762605412 && *(_DWORD *)(v17 + 3) == 1734632493)
      {
        sub_1C62E3900((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v714))
    {
      if (*(_QWORD *)v17 == 0x6164696C61766E69 && *(_QWORD *)(v17 + 7) == 0x3E6C6C613C657461)
      {
        sub_1C62E3970((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v707))
    {
      if (*(_QWORD *)v17 == 0x6964692D706F6F6CLL && *((_WORD *)v17 + 4) == 28015)
      {
        sub_1C62E39E0((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v710))
    {
      if (*(_QWORD *)v17 == 0x736E692D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x66696C706D697374 && v17[16] == 121)
      {
        sub_1C62E3A54((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    else if (HIDWORD(v713))
    {
      if (*(_QWORD *)v17 == 0x746F722D706F6F6CLL && *(_QWORD *)(v17 + 3) == 0x657461746F722D70)
      {
        LOWORD(__p) = 1;
        sub_1C62E3AC8((__int16 *)&__p, 0, 0, 0, (uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v707))
    {
      if (*(_QWORD *)v17 == 0x6F6C2D706F2D6F6ELL && *((_WORD *)v17 + 4) == 28783)
      {
        v685 = operator new();
        *(_QWORD *)v685 = &off_1E818E960;
        goto LABEL_2464;
      }
    }
    if ((_DWORD)v711)
    {
      if (*(_DWORD *)v17 == 1852404336 && v17[4] == 116)
      {
        v686 = llvm::dbgs((llvm *)v558);
        v685 = operator new();
        *(_QWORD *)v685 = off_1E818E9A0;
        *(_QWORD *)(v685 + 8) = v686;
        *(_QWORD *)(v685 + 16) = 0;
        *(_BYTE *)(v685 + 39) = 0;
LABEL_2464:
        *(_QWORD *)__dst = v685;
        memset(&__dst[8], 0, 28);
        sub_1C62E72F8();
        sub_1C62E77F0();
        sub_1C5A3DDB8((__int128 *)__dst, 0, (uint64_t)v779);
        sub_1C5A3BB70();
        v687 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v687)
          (*(void (**)(uint64_t))(*(_QWORD *)v687 + 8))(v687);
        p_p = &__dst[8];
LABEL_2137:
        sub_1C4764BBC((void ***)&p_p);
        goto LABEL_1568;
      }
    }
    if (HIDWORD(v712))
    {
      if (*(_QWORD *)v17 == 0x6C65642D706F6F6CLL && *(_QWORD *)(v17 + 5) == 0x6E6F6974656C6564)
      {
        sub_1C62E3B74((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x6D69732D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x6766637966696C70)
      {
        sub_1C62E3BE8((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v713))
    {
      if (*(_QWORD *)v17 == 0x6465722D706F6F6CLL && *(_QWORD *)(v17 + 3) == 0x6563756465722D70)
      {
        sub_1C62E3C5C((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (v202)
    {
      if (*(_DWORD *)v17 == 1986293353 && *(_DWORD *)(v17 + 3) == 1936875894)
      {
        LOBYTE(__p) = 1;
        sub_1C62E3CCC((uint64_t)__dst, (char *)&__p);
        goto LABEL_2134;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x726E752D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x6C6C75662D6C6C6FLL)
      {
        LODWORD(__p) = 2;
        WORD2(__p) = 0;
        sub_1C62E3D4C((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v710))
    {
      v591 = *(_QWORD *)v17 == 0x63612D746E697270 && *((_QWORD *)v17 + 1) == 0x666E692D73736563;
      if (v591 && v17[16] == 111)
      {
        __p = llvm::dbgs((llvm *)v558);
        sub_1C62E3DC8((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v707))
    {
      if (*(_QWORD *)v17 == 0x64643C746E697270 && *((_WORD *)v17 + 4) == 15975)
      {
        __p = llvm::dbgs((llvm *)v558);
        sub_1C62E3E40((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v714))
    {
      if (*(_QWORD *)v17 == 0x76693C746E697270 && *(_QWORD *)(v17 + 7) == 0x3E73726573752D76)
      {
        __p = llvm::dbgs((llvm *)v558);
        sub_1C62E3EB8((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
      if (*(_QWORD *)v17 == 0x6F6C3C746E697270 && *(_QWORD *)(v17 + 7) == 0x3E7473656E706F6FLL)
      {
        __p = llvm::dbgs((llvm *)v558);
        sub_1C62E3F30((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
    }
    if ((_DWORD)v713)
    {
      v596 = *(_QWORD *)v17 == 0x6F6C3C746E697270 && *((_QWORD *)v17 + 1) == 0x65686361632D706FLL;
      if (v596 && *(_QWORD *)(v17 + 14) == 0x3E74736F632D6568)
      {
        __p = llvm::dbgs((llvm *)v558);
        sub_1C62E3FA8((uint64_t)__dst, (uint64_t *)&__p);
        goto LABEL_2134;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x6572702D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x6E6F697461636964)
      {
        sub_1C62E4020((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if ((_DWORD)v13)
    {
      if (*(_QWORD *)v17 == 0x69772D6472617567 && *(_QWORD *)(v17 + 6) == 0x676E696E65646977)
      {
        sub_1C62E4090((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (v705)
    {
      if (*(_QWORD *)v17 == 0x756F622D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x74696C70732D646ELL)
      {
        sub_1C62E4100((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    if (HIDWORD(v713))
    {
      if (*(_QWORD *)v17 == 0x7265722D706F6F6CLL && *(_QWORD *)(v17 + 3) == 0x6C6C6F7265722D70)
      {
        sub_1C62E4170((uint64_t)__dst);
        goto LABEL_2134;
      }
    }
    else if (v203)
    {
      v606 = *(_QWORD *)v17 == 0x7265762D706F6F6CLL && *((_QWORD *)v17 + 1) == 0x2D676E696E6F6973;
      if (v606 && *((_DWORD *)v17 + 4) == 1835231596)
      {
        sub_1C62E41E0((uint64_t)__dst);
LABEL_2134:
        sub_1C5A3DDB8((__int128 *)__dst, 0, (uint64_t)v779);
        sub_1C5A3BB70();
        v610 = *(_QWORD *)v779;
        *(_QWORD *)v779 = 0;
        if (v610)
          (*(void (**)(uint64_t))(*(_QWORD *)v610 + 8))(v610);
        p_p = &__dst[8];
        goto LABEL_2137;
      }
    }
    if (sub_1C5A3C044((char *)v17, v4, "simple-loop-unswitch", 0x14uLL))
    {
      sub_1C5A3DFF4((uint64_t)v779, (uint64_t)v17, v4);
      if ((v779[8] & 1) != 0)
        goto LABEL_1857;
      LOWORD(v737) = *(_WORD *)v779 & 0x101;
      sub_1C62E4250((uint64_t)__dst, (__int16 *)&v737);
      sub_1C5A3DDB8((__int128 *)__dst, 0, (uint64_t)&p_p);
      sub_1C5A3BB70();
      v608 = p_p;
      p_p = 0;
      if (v608)
        (*(void (**)(void *))(*(_QWORD *)v608 + 8))(v608);
      __p = &__dst[8];
      v609 = &__p;
LABEL_2196:
      sub_1C4764BBC((void ***)v609);
      v521 = *(void **)__dst;
      *(_QWORD *)__dst = 0;
      if (v521)
        goto LABEL_1712;
      goto LABEL_1713;
    }
    if (sub_1C5A3C044((char *)v17, v4, "licm", 4uLL))
    {
      sub_1C5A3E318((uint64_t)v779, v17, v4, "licm", 4uLL);
      if ((v779[16] & 1) != 0)
        goto LABEL_1857;
      __p = *(void **)v779;
      LODWORD(v731) = *(_DWORD *)&v779[8];
      sub_1C62E42D0((uint64_t *)&__p, 0, 0, 0, (uint64_t)__dst);
      goto LABEL_2193;
    }
    if (sub_1C5A3C044((char *)v17, v4, "lnicm", 5uLL))
    {
      sub_1C5A3E318((uint64_t)v779, v17, v4, "lnicm", 5uLL);
      if ((v779[16] & 1) != 0)
        goto LABEL_1857;
      __p = *(void **)v779;
      LODWORD(v731) = *(_DWORD *)&v779[8];
      sub_1C62E4380((uint64_t)__dst);
LABEL_2193:
      sub_1C5A3DDB8((__int128 *)__dst, 0, (uint64_t)&p_p);
      sub_1C5A3BB70();
      v622 = p_p;
      p_p = 0;
      if (v622)
        (*(void (**)(void *))(*(_QWORD *)v622 + 8))(v622);
      v737 = &__dst[8];
      v609 = (void **)&v737;
      goto LABEL_2196;
    }
    v632 = *(unsigned int *)(v11 + 1192);
    if (!(_DWORD)v632)
      break;
    v16 = (_QWORD *)(*(_QWORD *)(v11 + 1184) + 24);
    v17 = (unsigned __int8 *)(32 * v632);
    v11 = 0xCCCCCCCCCCCCCCCDLL;
    while (1)
    {
      v633 = v8[2];
      v634 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v633) >> 3);
      *(_OWORD *)__dst = *(_OWORD *)v8;
      *(_QWORD *)v779 = v633;
      *(_QWORD *)&v779[8] = v634;
      if (!*v16)
        break;
      if ((*(unsigned int (**)(_QWORD, _BYTE *, uint64_t, _BYTE *))(*(_QWORD *)*v16 + 48))(*v16, __dst, v10, v779))
      {
        goto LABEL_1571;
      }
      v16 += 4;
      v17 -= 32;
      if (!v17)
        goto LABEL_2232;
    }
  }
LABEL_2232:
  *(_QWORD *)__dst = "unknown module pass '{0}'";
  *(_QWORD *)&__dst[8] = 25;
  *(_QWORD *)&__dst[16] = &__dst[48];
  *(_QWORD *)&__dst[24] = 1;
  *(_QWORD *)&__dst[32] = &unk_1E818C130;
  *(_QWORD *)&__dst[40] = v8;
  *(_QWORD *)&__dst[48] = &__dst[32];
  sub_1C4DCAF2C((uint64_t)__dst, v779);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  p_p = (void *)3;
  v734 = qword_1ED836B58[0];
  v83 = v715;
LABEL_140:
  sub_1C5A3BD58(v83, (uint64_t)v779, (uint64_t *)&p_p);
  if ((v779[23] & 0x80000000) != 0)
    operator delete(*(void **)v779);
}

void llvm::PassBuilder::parseModulePassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;

  if (a4)
  {
    v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseModulePass(a1, a2, a3, a4);
      if (*a5)
        break;
      a3 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void llvm::PassBuilder::parseCGSCCPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;

  if (a4)
  {
    v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseCGSCCPass(a1, a2, a3, a4);
      if (*a5)
        break;
      a3 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void llvm::PassBuilder::parseFunctionPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;

  if (a4)
  {
    v9 = 40 * a4;
    while (1)
    {
      llvm::PassBuilder::parseFunctionPass(a1, a2, a3, a4);
      if (*a5)
        break;
      a3 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void sub_1C5A3BB70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1C5A64A30();
  v1 = sub_1C5A64980();
  v2 = *v0;
  *v0 = 0;
  v3 = *((_BYTE *)v0 + 8);
  *(_QWORD *)v1 = &unk_1E81906E0;
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  sub_1C5A6484C();
  if (v6)
  {
    v7 = sub_1C5A6485C(v4);
    v15 = sub_1C5705608((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    if (v15)
      sub_1C57055F0(v15);
  }
  else
  {
    sub_1C5A64880(v4, v5);
  }
  sub_1C57055FC();
}

__n128 sub_1C5A3BBD8@<Q0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  _QWORD v10[3];
  void **v11;

  v6 = operator new();
  v7 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)v6 = &unk_1E81911E0;
  *(_OWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 24) = v7;
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = a2;
  v11 = (void **)v10;
  sub_1C4764BBC(&v11);
  return result;
}

uint64_t sub_1C5A3BC6C(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2 - 7;
  if (a2 >= 7)
  {
    v18 = v4;
    v19 = v5;
    v10 = *a1 == 1701864818 && *(_DWORD *)((char *)a1 + 3) == 1014260069;
    if (v10 && a2 >= 8 && *((_BYTE *)a1 + a2 - 1) == 62)
    {
      v15 = 0;
      v16 = (char *)a1 + 7;
      if (v6 >= a2 - 8)
        v6 = a2 - 8;
      v17 = v6;
      llvm::consumeSignedInteger((llvm *)&v16, 0, &v15, a4);
      if (v17)
        v12 = 1;
      else
        v12 = v11;
      if (v15 != (int)v15)
        v12 = 1;
      if (v12)
        v8 = 0;
      else
        v8 = v15;
      if (v8 < 1)
        v12 = 1;
      v9 = v8 & 0xFFFFFF00;
      v8 = v8;
      v13 = v12 == 0;
      if (v12)
      {
        v9 = 0;
        v8 = 0;
      }
      v7 = 0x100000000;
      if (!v13)
        v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v7 | v9 | v8;
}

void sub_1C5A3BD58(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;

  v6 = operator new();
  v10 = 260;
  v9[0] = a2;
  v8 = *a3;
  v7 = a3[1];
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v9, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 1;
  *a1 = v6;
}

BOOL sub_1C5A3BDE4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1634100580 && *(_DWORD *)(a1 + 3) == 1953264993)
      return 1;
    if (*(_DWORD *)a1 == 1852401780 && *(_DWORD *)(a1 + 3) == 1869900910)
      return 1;
  }
  else if (a2 < 3)
  {
    return 0;
  }
  return *(_WORD *)a1 == 29804 && *(_BYTE *)(a1 + 2) == 111;
}

void sub_1C5A3BE6C()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_1C5A64918();
  v2 = *v0;
  *(_QWORD *)v1 = &unk_1E8192360;
  *(_BYTE *)(v1 + 8) = v2;
  sub_1C5A6484C();
  if (v5)
  {
    v6 = sub_1C5A6485C(v3);
    v14 = sub_1C5705608((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
    if (v14)
      sub_1C57055F0(v14);
  }
  else
  {
    sub_1C5A64880(v3, v4);
  }
  sub_1C57055FC();
}

_QWORD **sub_1C5A3BEC4(_QWORD **a1)
{
  sub_1C47655E8((uint64_t)(a1 + 6), a1[7]);
  sub_1C47655E8((uint64_t)(a1 + 3), a1[4]);
  sub_1C47655E8((uint64_t)a1, a1[1]);
  return a1;
}

uint64_t sub_1C5A3BF08()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char *v6;
  uint64_t v7;
  uint64_t v8[55];
  _QWORD *v9;

  sub_1C5A649A4();
  v1 = (_QWORD *)sub_1C5A64998();
  sub_1C5A5AF78((uint64_t)v8, v0);
  *v1 = &unk_1E81912A0;
  sub_1C5A5AF78((uint64_t)(v1 + 1), v8);
  v9 = v1;
  sub_1C5A64868();
  if (v4)
  {
    v6 = sub_1C5A648AC(v2, (uint64_t *)&v9);
    v7 = sub_1C5A64B20((uint64_t)v6);
    if (v7)
      sub_1C57055F0(v7);
  }
  else
  {
    sub_1C5A64B60(v3);
  }
  return sub_1C56E07A8((uint64_t)v8);
}

void sub_1C5A3BFA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_1C5A64804();
  v1 = sub_1C5A64838(v0, (uint64_t)&unk_1E8191920);
  if (v3)
  {
    v4 = sub_1C5A6485C((uint64_t)v1);
    v12 = sub_1C5705608((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64880((uint64_t)v1, v2);
  }
  sub_1C57055FC();
}

void **sub_1C5A3BFEC(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  sub_1C4764BBC(&v3);
  v3 = a1 + 13;
  sub_1C4764BBC(&v3);
  v3 = a1 + 10;
  sub_1C4764BBC(&v3);
  return a1;
}

BOOL sub_1C5A3C044(char *__s1, size_t a2, void *__s2, size_t __n)
{
  if (a2 < __n)
    return 0;
  if (__n && memcmp(__s1, __s2, __n))
    return 0;
  if (a2 > __n)
  {
    if (__s1[__n] == 60)
      return __s1[a2 - 1] == 62;
    return 0;
  }
  return 1;
}

void sub_1C5A3C0CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  _BYTE *v4;
  int v5;
  unint64_t v6;

  if (a3 >= 0xC)
  {
    v3 = *(_QWORD *)a2 == 0x6F6D2D7473646C6DLL && *(_DWORD *)(a2 + 8) == 1852795252;
    v4 = (_BYTE *)a2;
    if (!v3)
      goto LABEL_10;
    a2 += 12;
    a3 -= 12;
  }
  if (!a3)
    goto LABEL_19;
  v4 = (_BYTE *)a2;
LABEL_10:
  if (*v4 == 60)
  {
    a2 = (uint64_t)(v4 + 1);
    if (a3 == 1)
    {
      a3 = 0;
    }
    else
    {
      v5 = v4[a3 - 1];
      v6 = a3 - 2;
      if (a3 - 1 < a3 - 2)
        v6 = a3 - 1;
      if (v5 == 62)
        a3 = v6;
      else
        --a3;
    }
  }
  else
  {
    a2 = (uint64_t)v4;
  }
LABEL_19:
  sub_1C5A3D4F0(a2, a3, a1);
}

void sub_1C5A3C174(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  char v24;
  int v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  char v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  _QWORD **v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD *v50;
  void *__p[2];
  char v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57[4];
  __int16 v58;

  v4 = a3;
  v5 = (unsigned __int8 *)a2;
  if (a3 >= 0xB)
  {
    if (*a2 != 0x726E752D706F6F6CLL || *(_QWORD *)((char *)a2 + 3) != 0x6C6C6F726E752D70)
      goto LABEL_9;
    LODWORD(a4) = 11;
    v5 = (unsigned __int8 *)a2 + 11;
    v4 = a3 - 11;
  }
  if (!v4)
    goto LABEL_17;
LABEL_9:
  LODWORD(a4) = *v5;
  if ((_DWORD)a4 != 60)
  {
    v8 = (uint64_t)v5;
LABEL_20:
    v55 = v5;
    v56 = v4;
    goto LABEL_21;
  }
  a4 = v4 - 1;
  if (v4 == 1)
    goto LABEL_17;
  v8 = (uint64_t)(v5 + 1);
  if (v5[v4 - 1] != 62)
  {
    ++v5;
    --v4;
    goto LABEL_20;
  }
  if (a4 >= v4 - 2)
    v4 -= 2;
  else
    --v4;
  v55 = v5 + 1;
  v56 = v4;
  if (v4)
  {
    ++v5;
LABEL_21:
    LOBYTE(v12) = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v13 = 2;
    v43 = a4;
    v44 = 0;
    while (1)
    {
      v53 = 0;
      v54 = 0;
      LOBYTE(v45) = 59;
      v14 = llvm::StringRef::find((uint64_t *)&v55, (char *)&v45, 1uLL, 0);
      if (v4 >= v14)
        v16 = v14;
      else
        v16 = v4;
      if (v4 >= v14 + 1)
        v17 = v14 + 1;
      else
        v17 = v4;
      v18 = v8 + v17;
      v19 = v4 - v17;
      if (v14 == -1)
        v20 = v5;
      else
        v20 = (unsigned __int8 *)v8;
      if (v14 == -1)
        v21 = v4;
      else
        v21 = v16;
      if (v14 == -1)
        v8 = 0;
      else
        v8 = v18;
      v53 = v20;
      v54 = v21;
      if (v14 == -1)
        v4 = 0;
      else
        v4 = v19;
      v55 = (unsigned __int8 *)v8;
      v56 = v4;
      if (v21 == 2)
      {
        switch(*(_WORD *)v20)
        {
          case 0x304F:
            v13 = 0;
            break;
          case 0x314F:
            v13 = 1;
            break;
          case 0x324F:
            v13 = 2;
            break;
          case 0x334F:
            v13 = 3;
            break;
          default:
            goto LABEL_100;
        }
        goto LABEL_97;
      }
      if (v21 >= 0x10)
      {
        if (*(_QWORD *)v20 == 0x726E752D6C6C7566 && *((_QWORD *)v20 + 1) == 0x3D78616D2D6C6C6FLL)
        {
          v53 = v20 + 16;
          v54 = v21 - 16;
          v57[0] = 0;
          v45 = (const char *)(v20 + 16);
          v46 = v21 - 16;
          llvm::consumeSignedInteger((llvm *)&v45, 0, v57, v15);
          if ((v36 & 1) != 0)
            goto LABEL_100;
          if (v46)
            goto LABEL_100;
          v12 = v57[0];
          if (v12 != (int)v12)
            goto LABEL_100;
          v43 = LODWORD(v57[0]) >> 8;
          LOBYTE(v44) = 1;
          goto LABEL_97;
        }
      }
      else if (v21 < 3)
      {
        goto LABEL_57;
      }
      if (*(_WORD *)v20 != 28526 || v20[2] != 45)
      {
LABEL_57:
        v24 = 1;
        goto LABEL_61;
      }
      v24 = 0;
      v20 += 3;
      v21 -= 3;
      v53 = v20;
      v54 = v21;
LABEL_61:
      switch(v21)
      {
        case 0xFuLL:
          v30 = *(_QWORD *)v20;
          v31 = *(_QWORD *)(v20 + 7);
          if (v30 != 0x2D656C69666F7270 || v31 != 0x676E696C6565702DLL)
          {
LABEL_100:
            v45 = "invalid LoopUnrollPass parameter '{0}' ";
            v46 = 39;
            v47 = &v50;
            v48 = 1;
            v49[0] = &unk_1E8168E00;
            v49[1] = &v53;
            v50 = v49;
            sub_1C4DCAF2C((uint64_t)&v45, __p);
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            v38 = qword_1ED836B58[0];
            v39 = operator new();
            v58 = 260;
            v57[0] = (unint64_t)__p;
            *(_QWORD *)v39 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v39 + 8));
            *(_QWORD *)(v39 + 32) = 3;
            *(_QWORD *)(v39 + 40) = v38;
            *(_BYTE *)(v39 + 48) = 1;
            *(_BYTE *)(a1 + 32) |= 1u;
            *(_QWORD *)a1 = v39;
            if (v52 < 0)
              operator delete(__p[0]);
            return;
          }
          BYTE4(v44) = 1;
          v11 = v24;
          break;
        case 0xAuLL:
          v33 = *(_QWORD *)v20;
          v34 = *((unsigned __int16 *)v20 + 4);
          if (v33 != 0x756F627265707075 || v34 != 25710)
            goto LABEL_100;
          v10 = 1;
          v9 = v24;
          break;
        case 7uLL:
          if (*(_DWORD *)v20 == 1953653104 && *(_DWORD *)(v20 + 3) == 1818323316)
          {
            LOBYTE(v41) = v24;
            BYTE4(v41) = 1;
          }
          else if (*(_DWORD *)v20 == 1818584432 && *(_DWORD *)(v20 + 3) == 1735289196)
          {
            LOBYTE(v40) = v24;
            BYTE4(v40) = 1;
          }
          else
          {
            v27 = *(_DWORD *)v20;
            v28 = *(_DWORD *)(v20 + 3);
            if (v27 != 1953396082 || v28 != 1701669236)
              goto LABEL_100;
            LOBYTE(v42) = v24;
            BYTE4(v42) = 1;
          }
          break;
        default:
          goto LABEL_100;
      }
LABEL_97:
      v5 = (unsigned __int8 *)v8;
      if (!v4)
        goto LABEL_98;
    }
  }
LABEL_17:
  v40 = 0;
  v41 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v44 = 0;
  LOBYTE(v12) = 0;
  v42 = 0;
  v43 = a4;
  v13 = 2;
LABEL_98:
  *(_BYTE *)(a1 + 32) &= ~1u;
  *(_BYTE *)a1 = v41;
  *(_BYTE *)(a1 + 1) = BYTE4(v41);
  *(_BYTE *)(a1 + 2) = v40;
  *(_BYTE *)(a1 + 3) = BYTE4(v40);
  *(_BYTE *)(a1 + 4) = v42;
  *(_BYTE *)(a1 + 5) = BYTE4(v42);
  *(_BYTE *)(a1 + 6) = v9;
  *(_BYTE *)(a1 + 7) = v10;
  *(_BYTE *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 9) = BYTE4(v44);
  *(_DWORD *)(a1 + 12) = v12 | (v43 << 8);
  *(_BYTE *)(a1 + 16) = v44;
  *(_DWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 24) = 0;
}

void sub_1C5A3C6C8(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v23;
  int v24;
  uint64_t v26;
  int v27;
  char v30;
  const char *v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD *v41;
  void *__p[2];
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48[4];
  __int16 v49;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (a3 >= 4)
  {
    v6 = a2;
    if (*a2 != 1851880301)
      goto LABEL_6;
    v4 = (uint64_t)(a2 + 1);
    v3 = a3 - 4;
  }
  if (v3)
  {
    v6 = (_BYTE *)v4;
LABEL_6:
    if (*v6 == 60)
    {
      v4 = (uint64_t)(v6 + 1);
      if (v3 == 1)
      {
        v3 = 0;
      }
      else if (v6[v3 - 1] == 62)
      {
        if (v3 - 1 >= v3 - 2)
          v3 -= 2;
        else
          --v3;
      }
      else
      {
        --v3;
      }
    }
    else
    {
      v4 = (uint64_t)v6;
    }
  }
  v46 = v4;
  v47 = v3;
  v7 = word_1ED833C10 != 0 && byte_1ED833C88 != 0;
  if (v7)
    v8 = 2;
  else
    v8 = 0;
  if (word_1ED8339D0)
    v9 = dword_1ED833A48;
  else
    v9 = v8;
  if (word_1ED833A90)
    v10 = byte_1ED833B08 != 0;
  else
    v10 = word_1ED833C10 != 0 && byte_1ED833C88 != 0;
  if (word_1ED833B50)
    v11 = byte_1ED833BC8 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (!v3)
  {
LABEL_74:
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_BYTE *)a1 = v7;
    *(_DWORD *)(a1 + 4) = v9;
    *(_BYTE *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 9) = v12;
    return;
  }
  while (1)
  {
    v44 = 0;
    v45 = 0;
    LOBYTE(v36) = 59;
    v13 = llvm::StringRef::find(&v46, (char *)&v36, 1uLL, 0);
    if (v3 >= v13)
      v15 = v13;
    else
      v15 = v3;
    if (v3 >= v13 + 1)
      v16 = v13 + 1;
    else
      v16 = v3;
    v17 = v4 + v16;
    v18 = v3 - v16;
    v19 = v4;
    if (v13 == -1)
    {
      v15 = v3;
      v4 = 0;
    }
    else
    {
      v4 = v17;
    }
    v44 = v19;
    v45 = v15;
    if (v13 == -1)
      v3 = 0;
    else
      v3 = v18;
    v46 = v4;
    v47 = v3;
    if (v15 == 6)
    {
      v23 = *(_DWORD *)v19;
      v24 = *(unsigned __int16 *)(v19 + 4);
      if (v23 != 1852990827 || v24 != 27749)
      {
LABEL_76:
        v31 = "invalid MemorySanitizer pass parameter '{0}' ";
        v32 = 45;
        goto LABEL_78;
      }
      v7 = 1;
      goto LABEL_73;
    }
    if (v15 == 7)
    {
      v20 = *(_DWORD *)v19;
      v21 = *(_DWORD *)(v19 + 3);
      if (v20 != 1868785010 || v21 != 1919252079)
        goto LABEL_76;
      v10 = 1;
      goto LABEL_73;
    }
    if (v15 < 0xE)
    {
      if (v15 != 12)
        goto LABEL_76;
      v26 = *(_QWORD *)v19;
      v27 = *(_DWORD *)(v19 + 8);
      if (v26 != 0x68632D7265676165 || v27 != 1936417637)
        goto LABEL_76;
      v12 = 1;
      goto LABEL_73;
    }
    if (*(_QWORD *)v19 != 0x726F2D6B63617274 || *(_QWORD *)(v19 + 6) != 0x3D736E696769726FLL)
      goto LABEL_76;
    v44 = v19 + 14;
    v45 = v15 - 14;
    v48[0] = 0;
    v36 = (const char *)(v19 + 14);
    v37 = v15 - 14;
    llvm::consumeSignedInteger((llvm *)&v36, 0, v48, v14);
    if ((v30 & 1) != 0)
      break;
    if (v37)
      break;
    v9 = v48[0];
    if (v48[0] != SLODWORD(v48[0]))
      break;
LABEL_73:
    if (!v3)
      goto LABEL_74;
  }
  v31 = "invalid argument to MemorySanitizer pass track-origins parameter: '{0}' ";
  v32 = 72;
LABEL_78:
  v36 = v31;
  v37 = v32;
  v38 = &v41;
  v39 = 1;
  v40[0] = &unk_1E8168E00;
  v40[1] = &v44;
  v41 = v40;
  sub_1C4DCAF2C((uint64_t)&v36, __p);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v34 = qword_1ED836B58[0];
  v35 = operator new();
  v49 = 260;
  v48[0] = (unint64_t)__p;
  *(_QWORD *)v35 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v48, (_QWORD *)(v35 + 8));
  *(_QWORD *)(v35 + 32) = 3;
  *(_QWORD *)(v35 + 40) = v34;
  *(_BYTE *)(v35 + 48) = 1;
  *(_BYTE *)(a1 + 16) |= 1u;
  *(_QWORD *)a1 = v35;
  if (v43 < 0)
    operator delete(__p[0]);
}

void sub_1C5A3CAC0(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v24;
  BOOL v25;
  BOOL v26;
  int AsInteger;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v62;
  unint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  const char *v68;
  uint64_t v69;
  void ***v70;
  uint64_t v71;
  void *v72;
  uint64_t *v73;
  void **v74;
  void *__p[2];
  char v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD v83[4];
  __int16 v84;

  v3 = a3;
  if (a3 >= 0xB)
  {
    if (*a2 != 0x7966696C706D6973 || *(_QWORD *)((char *)a2 + 3) != 0x6766637966696C70)
      goto LABEL_9;
    a2 = (_QWORD *)((char *)a2 + 11);
    v3 = a3 - 11;
  }
  if (!v3)
    goto LABEL_16;
LABEL_9:
  if (*(_BYTE *)a2 != 60)
  {
LABEL_19:
    v81 = a2;
    v82 = v3;
LABEL_20:
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = *(unsigned __int8 *)(a1 + 24);
    v67 = 1;
    v66 = 1;
    while (1)
    {
      v79 = 0;
      v80 = 0;
      LOBYTE(v68) = 59;
      v12 = llvm::StringRef::find((uint64_t *)&v81, (char *)&v68, 1uLL, 0);
      if (v12 == -1)
      {
        v16 = 0;
        v17 = 0;
        v14 = (uint64_t)v81;
      }
      else
      {
        if (v3 >= v12)
          v13 = v12;
        else
          v13 = v3;
        v14 = (uint64_t)v81;
        if (v3 >= v12 + 1)
          v15 = v12 + 1;
        else
          v15 = v3;
        v16 = (uint64_t)v81 + v15;
        v17 = v3 - v15;
        v3 = v13;
      }
      v79 = v14;
      v80 = v3;
      v81 = (_QWORD *)v16;
      v82 = v17;
      if (v3 >= 3 && (*(_WORD *)v14 == 28526 ? (v18 = *(_BYTE *)(v14 + 2) == 45) : (v18 = 0), v18))
      {
        v14 += 3;
        v79 = v14;
        v80 = v3 - 3;
        v19 = 1;
        v3 -= 3;
      }
      else
      {
        v19 = 0;
      }
      v20 = v19 ^ 1u;
      switch(v3)
      {
        case 0xAuLL:
          v21 = *(_QWORD *)v14;
          v22 = *(unsigned __int16 *)(v14 + 8);
          if (v21 != 0x6F6F6C2D7065656BLL || v22 != 29552)
            goto LABEL_115;
          v67 = v20;
          goto LABEL_113;
        case 0x10uLL:
          v40 = *(_QWORD *)v14;
          v39 = *(_QWORD *)(v14 + 8);
          if (v40 != 0x742D686374697773 || v39 != 0x70756B6F6F6C2D6FLL)
            goto LABEL_115;
          v8 = v20;
          goto LABEL_113;
        case 0x11uLL:
          v42 = *(_QWORD *)v14;
          v43 = *(_QWORD *)(v14 + 8);
          v44 = *(unsigned __int8 *)(v14 + 16);
          if (v42 != 0x6D6F632D6B6E6973 || v43 != 0x74736E692D6E6F6DLL || v44 != 115)
            goto LABEL_115;
          v10 = v20;
          goto LABEL_113;
        case 0x12uLL:
          v47 = *(_QWORD *)v14;
          v48 = *(_QWORD *)(v14 + 8);
          v49 = *(unsigned __int16 *)(v14 + 16);
          if (v47 != 0x6F632D7473696F68 || v48 != 0x736E692D6E6F6D6DLL || v49 != 29556)
            goto LABEL_115;
          v9 = v20;
          goto LABEL_113;
        case 0x13uLL:
          v52 = *(_QWORD *)v14;
          v53 = *(_QWORD *)(v14 + 8);
          v54 = *(_QWORD *)(v14 + 11);
          if (v52 != 0x2D64726177726F66 || v53 != 0x632D686374697773 || v54 != 0x646E6F632D686374)
            goto LABEL_115;
          v6 = v20;
          goto LABEL_113;
        case 0x14uLL:
          v57 = *(_QWORD *)v14;
          v58 = *(_QWORD *)(v14 + 8);
          v59 = *(_DWORD *)(v14 + 16);
          if (v57 != 0x722D686374697773 || v58 != 0x2D6F742D65676E61 || v59 != 1886217065)
            goto LABEL_115;
          v7 = v20;
          goto LABEL_113;
        default:
          if (v3 < 0x15)
            v24 = 1;
          else
            v24 = v19;
          if ((v24 & 1) != 0
            || (*(_QWORD *)v14 == 0x6E692D73756E6F62
              ? (v25 = *(_QWORD *)(v14 + 8) == 0x73657268742D7473)
              : (v25 = 0),
                v25 ? (v26 = *(_QWORD *)(v14 + 13) == 0x3D646C6F68736572) : (v26 = 0),
                !v26))
          {
LABEL_115:
            v68 = "invalid SimplifyCFG pass parameter '{0}' ";
            v69 = 41;
            v70 = &v74;
            v71 = 1;
            v72 = &unk_1E8168E00;
            v73 = &v79;
            v74 = &v72;
            sub_1C4DCAF2C((uint64_t)&v68, __p);
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            v64 = qword_1ED836B58[0];
            v65 = operator new();
            v84 = 260;
            v83[0] = __p;
            *(_QWORD *)v65 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)v83, (_QWORD *)(v65 + 8));
            *(_QWORD *)(v65 + 32) = 3;
            *(_QWORD *)(v65 + 40) = v64;
            *(_BYTE *)(v65 + 48) = 1;
            *(_BYTE *)(a1 + 24) = v11 | 1;
            *(_QWORD *)a1 = v65;
            if (v76 < 0)
              operator delete(__p[0]);
            return;
          }
          v79 = v14 + 21;
          v80 = v3 - 21;
          v78 = 1;
          v77 = 0;
          AsInteger = llvm::StringRef::getAsInteger((llvm::StringRef *)&v79, 0, (llvm::APInt *)&v77);
          v28 = AsInteger;
          if (AsInteger)
          {
            v29 = v10;
            v30 = v6;
            v31 = v11;
            v32 = v9;
            v33 = v7;
            v34 = v8;
            v68 = "invalid argument to SimplifyCFG pass bonus-threshold parameter: '{0}' ";
            v69 = 70;
            v70 = &v74;
            v71 = 1;
            v72 = &unk_1E8168E00;
            v73 = &v79;
            v74 = &v72;
            sub_1C4DCAF2C((uint64_t)&v68, __p);
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            v36 = qword_1ED836B58[0];
            v37 = operator new();
            v84 = 260;
            v83[0] = __p;
            *(_QWORD *)v37 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)v83, (_QWORD *)(v37 + 8));
            *(_QWORD *)(v37 + 32) = 3;
            *(_QWORD *)(v37 + 40) = v36;
            *(_BYTE *)(v37 + 48) = 1;
            v11 = v31 | 1;
            *(_BYTE *)(a1 + 24) = v31 | 1;
            *(_QWORD *)a1 = v37;
            if (v76 < 0)
              operator delete(__p[0]);
            v38 = v78;
            v8 = v34;
            v7 = v33;
            v9 = v32;
            v6 = v30;
            v10 = v29;
          }
          else
          {
            v38 = v78;
            if (v78 > 0x40)
              v62 = *v77;
            else
              v62 = (uint64_t)((_QWORD)v77 << -(char)v78) >> -(char)v78;
            v66 = v62;
          }
          if (v38 >= 0x41 && v77)
            MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
          if ((v28 & 1) != 0)
            return;
          v17 = v82;
LABEL_113:
          v3 = v17;
          if (!v17)
            goto LABEL_17;
          break;
      }
    }
  }
  if (v3 == 1)
    goto LABEL_16;
  if (*((_BYTE *)a2 + v3 - 1) != 62)
  {
    a2 = (_QWORD *)((char *)a2 + 1);
    --v3;
    goto LABEL_19;
  }
  if (v3 - 1 >= v3 - 2)
    v3 -= 2;
  else
    --v3;
  v81 = (_QWORD *)((char *)a2 + 1);
  v82 = v3;
  if (v3)
    goto LABEL_20;
LABEL_16:
  LOBYTE(v6) = 0;
  LOBYTE(v7) = 0;
  LOBYTE(v8) = 0;
  LOBYTE(v9) = 0;
  LOBYTE(v10) = 0;
  LOBYTE(v11) = *(_BYTE *)(a1 + 24);
  v66 = 1;
  v67 = 1;
LABEL_17:
  *(_BYTE *)(a1 + 24) = v11 & 0xFE;
  *(_DWORD *)a1 = v66;
  *(_BYTE *)(a1 + 4) = v6;
  *(_BYTE *)(a1 + 5) = v7;
  *(_BYTE *)(a1 + 6) = v8;
  *(_BYTE *)(a1 + 7) = v67;
  *(_BYTE *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 9) = v10;
  *(_WORD *)(a1 + 10) = 257;
  *(_QWORD *)(a1 + 16) = 0;
}

void sub_1C5A3D1A4(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v7;
  unsigned __int8 v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  BOOL v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  _QWORD v33[2];
  _QWORD *v34;
  void *__p[2];
  char v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  void **v41;
  __int16 v42;

  v3 = a3;
  v4 = a2;
  if (a3 >= 0xE)
  {
    if (*a2 != 0x6365762D706F6F6CLL || *(_QWORD *)((char *)a2 + 6) != 0x657A69726F746365)
      goto LABEL_9;
    v4 = (char *)a2 + 14;
    v3 = a3 - 14;
  }
  if (!v3)
    goto LABEL_17;
LABEL_9:
  if (*v4 != 60)
  {
    v7 = (uint64_t)v4;
LABEL_22:
    v39 = v4;
    v40 = v3;
    goto LABEL_23;
  }
  if (v3 == 1)
    goto LABEL_17;
  v7 = (uint64_t)(v4 + 1);
  if (v4[v3 - 1] != 62)
  {
    ++v4;
    --v3;
    goto LABEL_22;
  }
  if (v3 - 1 >= v3 - 2)
    v3 -= 2;
  else
    --v3;
  v39 = v4 + 1;
  v40 = v3;
  if (v3)
  {
    ++v4;
LABEL_23:
    v9 = 0;
    v8 = 0;
    while (1)
    {
      LOBYTE(v32[0]) = 59;
      v10 = llvm::StringRef::find((uint64_t *)&v39, (char *)v32, 1uLL, 0);
      if (v3 >= v10)
        v11 = v10;
      else
        v11 = v3;
      if (v3 >= v10 + 1)
        v12 = v10 + 1;
      else
        v12 = v3;
      v13 = v7 + v12;
      v14 = v3 - v12;
      if (v10 == -1)
        v15 = v4;
      else
        v15 = (_BYTE *)v7;
      if (v10 == -1)
        v16 = v3;
      else
        v16 = v11;
      if (v10 == -1)
        v7 = 0;
      else
        v7 = v13;
      v37 = v15;
      v38 = v16;
      if (v10 == -1)
        v3 = 0;
      else
        v3 = v14;
      v39 = (_BYTE *)v7;
      v40 = v3;
      if (v16 >= 3 && (*(_WORD *)v15 == 28526 ? (v17 = v15[2] == 45) : (v17 = 0), v17))
      {
        v18 = 0;
        v15 += 3;
        v37 = v15;
        v38 = v16 - 3;
        v16 -= 3;
      }
      else
      {
        v18 = 1;
      }
      if (v16 == 21)
      {
        v24 = *(_QWORD *)v15;
        v25 = *((_QWORD *)v15 + 1);
        v26 = *(_QWORD *)(v15 + 13);
        if (v24 != 0x7A69726F74636576 || v25 != 0x646563726F662D65 || v26 != 0x796C6E6F2D646563)
        {
LABEL_71:
          v32[0] = "invalid LoopVectorize parameter '{0}' ";
          v32[1] = 38;
          v32[2] = &v34;
          v32[3] = 1;
          v33[0] = &unk_1E8168E00;
          v33[1] = &v37;
          v34 = v33;
          sub_1C4DCAF2C((uint64_t)v32, __p);
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v30 = qword_1ED836B58[0];
          v31 = operator new();
          v42 = 260;
          v41 = __p;
          *(_QWORD *)v31 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v41, (_QWORD *)(v31 + 8));
          *(_QWORD *)(v31 + 32) = 3;
          *(_QWORD *)(v31 + 40) = v30;
          *(_BYTE *)(v31 + 48) = 1;
          *(_BYTE *)(a1 + 8) |= 1u;
          *(_QWORD *)a1 = v31;
          if (v36 < 0)
            operator delete(__p[0]);
          return;
        }
        v9 = v18;
      }
      else
      {
        if (v16 != 22)
          goto LABEL_71;
        v19 = *(_QWORD *)v15;
        v20 = *((_QWORD *)v15 + 1);
        v21 = *(_QWORD *)(v15 + 14);
        v22 = v19 == 0x61656C7265746E69 && v20 == 0x6563726F662D6576;
        if (!v22 || v21 != 0x796C6E6F2D646563)
          goto LABEL_71;
        v8 = v18;
      }
      v4 = (_BYTE *)v7;
      if (!v3)
        goto LABEL_18;
    }
  }
LABEL_17:
  v8 = 0;
  v9 = 0;
LABEL_18:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_WORD *)a1 = v8 | (unsigned __int16)(v9 << 8);
}

void sub_1C5A3D4F0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD v22[2];
  _QWORD *v23;
  void *__p[2];
  char v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  __int16 v31;

  v28 = a1;
  v29 = a2;
  if (a2)
  {
    v4 = a2;
    v5 = a1;
    while (1)
    {
      LOBYTE(v21[0]) = 59;
      v6 = llvm::StringRef::find(&v28, (char *)v21, 1uLL, 0);
      v7 = v4 >= v6 ? v6 : v4;
      v8 = v4 >= v6 + 1 ? v6 + 1 : v4;
      v9 = v5 + v8;
      v10 = v4 - v8;
      v11 = (unsigned __int16 *)v5;
      v12 = v6 == -1 ? v4 : v7;
      v5 = v6 == -1 ? 0 : v9;
      v26 = v11;
      v27 = v12;
      v4 = v6 == -1 ? 0 : v10;
      v28 = v5;
      v29 = v4;
      if (v12 < 3)
        break;
      v13 = *v11 ^ 0x6F6E | *((unsigned __int8 *)v11 + 2) ^ 0x2D;
      if (!v13)
      {
        v11 = (unsigned __int16 *)((char *)v11 + 3);
        v26 = v11;
        v27 = v12 - 3;
        v12 -= 3;
      }
      if (v12 != 15)
        break;
      v14 = *(_QWORD *)v11;
      v15 = *(_QWORD *)((char *)v11 + 7);
      if (v14 != 0x6F662D74696C7073 || v15 != 0x62622D7265746F6FLL)
        break;
      if (!v4)
      {
        v17 = v13 != 0;
        goto LABEL_34;
      }
    }
    v21[0] = "invalid MergedLoadStoreMotion pass parameter '{0}' ";
    v21[1] = 51;
    v21[2] = &v23;
    v21[3] = 1;
    v22[0] = &unk_1E8168E00;
    v22[1] = &v26;
    v23 = v22;
    sub_1C4DCAF2C((uint64_t)v21, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v19 = qword_1ED836B58[0];
    v20 = operator new();
    v31 = 260;
    v30 = __p;
    *(_QWORD *)v20 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v30, (_QWORD *)(v20 + 8));
    *(_QWORD *)(v20 + 32) = 3;
    *(_QWORD *)(v20 + 40) = v19;
    *(_BYTE *)(v20 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v20;
    if (v25 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v17 = 0;
LABEL_34:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_BYTE *)a3 = v17;
  }
}

void sub_1C5A3D71C(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v38[4];
  _QWORD v39[2];
  _QWORD *v40;
  void *__p[2];
  char v42;
  unsigned __int16 *v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  void **v47;
  __int16 v48;

  v3 = a3;
  v4 = a2;
  if (a3 >= 3)
  {
    if (*(_WORD *)a2 != 30311 || a2[2] != 110)
      goto LABEL_9;
    v4 = a2 + 3;
    v3 = a3 - 3;
  }
  if (!v3)
    goto LABEL_17;
LABEL_9:
  if (*v4 != 60)
  {
    v7 = (uint64_t)v4;
LABEL_22:
    v45 = v4;
    v46 = v3;
    goto LABEL_23;
  }
  if (v3 == 1)
    goto LABEL_17;
  v7 = (uint64_t)(v4 + 1);
  if (v4[v3 - 1] != 62)
  {
    ++v4;
    --v3;
    goto LABEL_22;
  }
  if (v3 - 1 >= v3 - 2)
    v3 -= 2;
  else
    --v3;
  v45 = v4 + 1;
  v46 = v3;
  if (v3)
  {
    ++v4;
LABEL_23:
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v37 = 0;
    v8 = 0;
    v36 = 0;
    while (1)
    {
      LOBYTE(v38[0]) = 59;
      v13 = llvm::StringRef::find((uint64_t *)&v45, (char *)v38, 1uLL, 0);
      if (v3 >= v13)
        v14 = v13;
      else
        v14 = v3;
      if (v3 >= v13 + 1)
        v15 = v13 + 1;
      else
        v15 = v3;
      v16 = v7 + v15;
      v17 = v3 - v15;
      if (v13 == -1)
        v18 = (unsigned __int16 *)v4;
      else
        v18 = (unsigned __int16 *)v7;
      if (v13 == -1)
        v19 = v3;
      else
        v19 = v14;
      if (v13 == -1)
        v7 = 0;
      else
        v7 = v16;
      v43 = v18;
      v44 = v19;
      if (v13 == -1)
        v3 = 0;
      else
        v3 = v17;
      v45 = (_BYTE *)v7;
      v46 = v3;
      if ((unint64_t)v19 >= 3 && (*v18 == 28526 ? (v20 = *((_BYTE *)v18 + 2) == 45) : (v20 = 0), v20))
      {
        v21 = 0;
        v18 = (unsigned __int16 *)((char *)v18 + 3);
        v43 = v18;
        v44 = v19 - 3;
        v19 -= 3;
      }
      else
      {
        v21 = 1;
      }
      if (v19 > 7)
      {
        if (v19 == 8)
        {
          if (*(_QWORD *)v18 != 0x6572702D64616F6CLL)
            goto LABEL_79;
          BYTE4(v37) = 1;
          v8 = v21;
        }
        else
        {
          if (v19 != 23
            || ((v25 = *(_QWORD *)v18,
                 v26 = *((_QWORD *)v18 + 1),
                 v27 = *(_QWORD *)((char *)v18 + 15),
                 v25 == 0x61622D74696C7073)
              ? (v28 = v26 == 0x6C2D656764656B63)
              : (v28 = 0),
                v28 ? (v29 = v27 == 0x6572702D64616F6CLL) : (v29 = 0),
                !v29))
          {
LABEL_79:
            v38[0] = "invalid GVN pass parameter '{0}' ";
            v38[1] = 33;
            v38[2] = &v40;
            v38[3] = 1;
            v39[0] = &unk_1E8168E00;
            v39[1] = &v43;
            v40 = v39;
            sub_1C4DCAF2C((uint64_t)v38, __p);
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            v34 = qword_1ED836B58[0];
            v35 = operator new();
            v48 = 260;
            v47 = __p;
            *(_QWORD *)v35 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&v47, (_QWORD *)(v35 + 8));
            *(_QWORD *)(v35 + 32) = 3;
            *(_QWORD *)(v35 + 40) = v34;
            *(_BYTE *)(v35 + 48) = 1;
            *(_BYTE *)(a1 + 16) |= 1u;
            *(_QWORD *)a1 = v35;
            if (v42 < 0)
              operator delete(__p[0]);
            return;
          }
          v10 = 1;
          v9 = v21;
        }
      }
      else if (v19 == 3)
      {
        v30 = *v18;
        v31 = *((unsigned __int8 *)v18 + 2);
        if (v30 != 29296 || v31 != 101)
          goto LABEL_79;
        v36 = v21;
        LOBYTE(v37) = 1;
      }
      else
      {
        if (v19 != 6)
          goto LABEL_79;
        v22 = *(_DWORD *)v18;
        v23 = v18[2];
        if (v22 != 1684890989 || v23 != 28773)
          goto LABEL_79;
        v12 = 1;
        v11 = v21;
      }
      v4 = (_BYTE *)v7;
      if (!v3)
        goto LABEL_18;
    }
  }
LABEL_17:
  v36 = 0;
  v37 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_18:
  *(_BYTE *)(a1 + 16) &= ~1u;
  *(_BYTE *)a1 = v36;
  *(_BYTE *)(a1 + 1) = v37;
  *(_BYTE *)(a1 + 2) = v8;
  *(_BYTE *)(a1 + 3) = BYTE4(v37);
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = v9;
  *(_BYTE *)(a1 + 7) = v10;
  *(_BYTE *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 9) = v12;
}

void sub_1C5A3DAFC(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  BOOL v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  _QWORD v23[2];
  _QWORD *v24;
  void *__p[2];
  char v26;
  _QWORD v27[2];
  _BYTE *v28;
  unint64_t v29;
  void **v30;
  __int16 v31;

  v3 = a3;
  v4 = a2;
  if (a3 >= 0x15)
  {
    if (*a2 != 0x74733C746E697270
      || a2[1] != 0x6566696C2D6B6361
      || *(_QWORD *)((char *)a2 + 13) != 0x3E656D6974656669)
    {
      goto LABEL_12;
    }
    v4 = (char *)a2 + 21;
    v3 = a3 - 21;
  }
  if (!v3)
    goto LABEL_20;
LABEL_12:
  if (*v4 != 60)
  {
    v8 = (uint64_t)v4;
LABEL_23:
    v28 = v4;
    v29 = v3;
    while (1)
    {
LABEL_24:
      LOBYTE(v22[0]) = 59;
      v10 = llvm::StringRef::find((uint64_t *)&v28, (char *)v22, 1uLL, 0);
      if (v3 >= v10)
        v11 = v10;
      else
        v11 = v3;
      if (v3 >= v10 + 1)
        v12 = v10 + 1;
      else
        v12 = v3;
      v13 = v8 + v12;
      v14 = v3 - v12;
      if (v10 == -1)
        v15 = (unsigned __int16 *)v4;
      else
        v15 = (unsigned __int16 *)v8;
      if (v10 == -1)
      {
        v11 = v3;
        v8 = 0;
      }
      else
      {
        v8 = v13;
      }
      v27[0] = v15;
      v27[1] = v11;
      if (v10 == -1)
        v3 = 0;
      else
        v3 = v14;
      v28 = (_BYTE *)v8;
      v29 = v3;
      if (v11 == 4)
      {
        if (*(_DWORD *)v15 != 1953723757)
          goto LABEL_52;
        v9 = 1;
      }
      else
      {
        if (v11 != 3
          || ((v16 = *v15, v17 = *((unsigned __int8 *)v15 + 2), v16 == 24941) ? (v18 = v17 == 121) : (v18 = 0), !v18))
        {
LABEL_52:
          v22[0] = "invalid StackLifetime parameter '{0}' ";
          v22[1] = 38;
          v22[2] = &v24;
          v22[3] = 1;
          v23[0] = &unk_1E8168E00;
          v23[1] = v27;
          v24 = v23;
          sub_1C4DCAF2C((uint64_t)v22, __p);
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v20 = qword_1ED836B58[0];
          v21 = operator new();
          v31 = 260;
          v30 = __p;
          *(_QWORD *)v21 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v30, (_QWORD *)(v21 + 8));
          *(_QWORD *)(v21 + 32) = 3;
          *(_QWORD *)(v21 + 40) = v20;
          *(_BYTE *)(v21 + 48) = 1;
          *(_BYTE *)(a1 + 8) |= 1u;
          *(_QWORD *)a1 = v21;
          if (v26 < 0)
            operator delete(__p[0]);
          return;
        }
        v9 = 0;
      }
      v4 = (_BYTE *)v8;
      if (!v3)
        goto LABEL_50;
    }
  }
  if (v3 == 1)
    goto LABEL_20;
  v8 = (uint64_t)(v4 + 1);
  if (v4[v3 - 1] != 62)
  {
    ++v4;
    --v3;
    goto LABEL_23;
  }
  if (v3 - 1 >= v3 - 2)
    v3 -= 2;
  else
    --v3;
  v28 = v4 + 1;
  v29 = v3;
  if (v3)
  {
    ++v4;
    goto LABEL_24;
  }
LABEL_20:
  v9 = 0;
LABEL_50:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = v9;
}

uint64_t sub_1C5A3DDB8@<X0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v11[3];
  int v12;
  void **v13;

  v6 = operator new();
  v7 = *a1;
  v8 = a1[1];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v12 = *((_DWORD *)a1 + 8);
  v9 = v12;
  *(_QWORD *)v6 = &unk_1E8190BA0;
  v11[0] = 0;
  *(_OWORD *)(v6 + 8) = v7;
  *(_OWORD *)(v6 + 24) = v8;
  v11[1] = 0;
  v11[2] = 0;
  *(_DWORD *)(v6 + 40) = v9;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = a2;
  v13 = (void **)v11;
  sub_1C4764BBC(&v13);
  return 0;
}

void sub_1C5A3DE70(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  void *v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  _DWORD v9[14];
  _OWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8[0] = v9;
  v8[1] = (void *)0x600000000;
  v9[12] = 0;
  memset(v10, 0, sizeof(v10));
  sub_1C5A4B06C(v8);
  v2 = (_QWORD *)operator new();
  sub_1C62EAA54((uint64_t)v4, (uint64_t)v8);
  *v2 = &unk_1E81905E0;
  sub_1C62EAA54((uint64_t)(v2 + 1), (uint64_t)v4);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 35) = 1;
  sub_1C62E72F8();
  sub_1C62E77F0();
  v3 = (void **)&v7;
  sub_1C4764BBC(&v3);
  v3 = (void **)&v6;
  sub_1C4764BBC(&v3);
  if (v4[0] != &v5)
    free(v4[0]);
  v3 = (void **)&v10[1] + 1;
  sub_1C4764BBC(&v3);
  v3 = (void **)v10;
  sub_1C4764BBC(&v3);
  if (v8[0] != v9)
    free(v8[0]);
}

void sub_1C5A3DFF4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v8;
  unsigned __int8 v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  BOOL v18;
  __int16 v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  _QWORD v30[2];
  _QWORD *v31;
  void *__p[2];
  char v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  void **v38;
  __int16 v39;

  v3 = a3;
  v4 = (_BYTE *)a2;
  if (a3 >= 0x14)
  {
    if (*(_QWORD *)a2 != 0x6C2D656C706D6973
      || *(_QWORD *)(a2 + 8) != 0x77736E752D706F6FLL
      || *(_DWORD *)(a2 + 16) != 1751348329)
    {
      goto LABEL_12;
    }
    v4 = (_BYTE *)(a2 + 20);
    v3 = a3 - 20;
  }
  if (!v3)
    goto LABEL_20;
LABEL_12:
  if (*v4 != 60)
  {
    v8 = (uint64_t)v4;
LABEL_25:
    v36 = v4;
    v37 = v3;
    goto LABEL_26;
  }
  if (v3 == 1)
    goto LABEL_20;
  v8 = (uint64_t)(v4 + 1);
  if (v4[v3 - 1] != 62)
  {
    ++v4;
    --v3;
    goto LABEL_25;
  }
  if (v3 - 1 >= v3 - 2)
    v3 -= 2;
  else
    --v3;
  v36 = v4 + 1;
  v37 = v3;
  if (v3)
  {
    ++v4;
LABEL_26:
    v9 = 0;
    v10 = 1;
    while (1)
    {
      LOBYTE(v29[0]) = 59;
      v11 = llvm::StringRef::find((uint64_t *)&v36, (char *)v29, 1uLL, 0);
      if (v3 >= v11)
        v12 = v11;
      else
        v12 = v3;
      if (v3 >= v11 + 1)
        v13 = v11 + 1;
      else
        v13 = v3;
      v14 = v8 + v13;
      v15 = v3 - v13;
      if (v11 == -1)
        v16 = v4;
      else
        v16 = (_BYTE *)v8;
      if (v11 == -1)
        v17 = v3;
      else
        v17 = v12;
      if (v11 == -1)
        v8 = 0;
      else
        v8 = v14;
      v34 = v16;
      v35 = v17;
      if (v11 == -1)
        v3 = 0;
      else
        v3 = v15;
      v36 = (_BYTE *)v8;
      v37 = v3;
      if (v17 >= 3 && (*(_WORD *)v16 == 28526 ? (v18 = v16[2] == 45) : (v18 = 0), v18))
      {
        v19 = 0;
        v16 += 3;
        v34 = v16;
        v35 = v17 - 3;
        v17 -= 3;
      }
      else
      {
        v19 = 1;
      }
      if (v17 == 7)
      {
        v23 = *(_DWORD *)v16;
        v24 = *(_DWORD *)(v16 + 3);
        v25 = v23 == 1986622068 && v24 == 1818323318;
        v10 = v19;
        if (!v25)
        {
LABEL_66:
          v29[0] = "invalid LoopUnswitch pass parameter '{0}' ";
          v29[1] = 42;
          v29[2] = &v31;
          v29[3] = 1;
          v30[0] = &unk_1E8168E00;
          v30[1] = &v34;
          v31 = v30;
          sub_1C4DCAF2C((uint64_t)v29, __p);
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v27 = qword_1ED836B58[0];
          v28 = operator new();
          v39 = 260;
          v38 = __p;
          *(_QWORD *)v28 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v38, (_QWORD *)(v28 + 8));
          *(_QWORD *)(v28 + 32) = 3;
          *(_QWORD *)(v28 + 40) = v27;
          *(_BYTE *)(v28 + 48) = 1;
          *(_BYTE *)(a1 + 8) |= 1u;
          *(_QWORD *)a1 = v28;
          if (v33 < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        if (v17 != 10)
          goto LABEL_66;
        v20 = *(_QWORD *)v16;
        v21 = *((unsigned __int16 *)v16 + 4);
        v22 = v20 == 0x69766972746E6F6ELL && v21 == 27745;
        v9 = v19;
        if (!v22)
          goto LABEL_66;
      }
      v4 = (_BYTE *)v8;
      if (!v3)
        goto LABEL_21;
    }
  }
LABEL_20:
  v9 = 0;
  v10 = 1;
LABEL_21:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_WORD *)a1 = v9 | (unsigned __int16)(v10 << 8);
}

void sub_1C5A3E318(uint64_t a1, _BYTE *__s1, size_t a3, void *__s2, size_t __n)
{
  unint64_t v5;
  _BYTE *v6;
  size_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[4];
  _QWORD v30[2];
  _QWORD *v31;
  void *__p[2];
  char v33;
  unsigned __int16 *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  void **v38;
  __int16 v39;

  v5 = a3;
  v6 = __s1;
  if (a3 >= __n && (!__n || !memcmp(__s1, __s2, __n)))
  {
    if (v5 >= __n)
      v9 = __n;
    else
      v9 = v5;
    v6 += v9;
    v5 -= v9;
  }
  if (!v5)
    goto LABEL_17;
  if (*v6 != 60)
  {
    v10 = (uint64_t)v6;
LABEL_21:
    v36 = v6;
    v37 = v5;
    v28 = dword_1ED835F90;
    v12 = dword_1ED836050;
    goto LABEL_22;
  }
  if (v5 == 1)
  {
LABEL_17:
    v11 = dword_1ED835F90;
    v12 = dword_1ED836050;
    goto LABEL_18;
  }
  v10 = (uint64_t)(v6 + 1);
  if (v6[v5 - 1] != 62)
  {
    ++v6;
    --v5;
    goto LABEL_21;
  }
  if (v5 - 1 >= v5 - 2)
    v5 -= 2;
  else
    --v5;
  v36 = v6 + 1;
  v37 = v5;
  v11 = dword_1ED835F90;
  v12 = dword_1ED836050;
  if (v5)
  {
    v28 = dword_1ED835F90;
    ++v6;
LABEL_22:
    while (1)
    {
      LOBYTE(v29[0]) = 59;
      v14 = llvm::StringRef::find((uint64_t *)&v36, (char *)v29, 1uLL, 0);
      v15 = v5 >= v14 ? v14 : v5;
      v16 = v5 >= v14 + 1 ? v14 + 1 : v5;
      v17 = v10 + v16;
      v18 = v5 - v16;
      v19 = v14 == -1 ? (unsigned __int16 *)v6 : (unsigned __int16 *)v10;
      v20 = v14 == -1 ? v5 : v15;
      v10 = v14 == -1 ? 0 : v17;
      v34 = v19;
      v35 = v20;
      v5 = v14 == -1 ? 0 : v18;
      v36 = (_BYTE *)v10;
      v37 = v5;
      if (v20 < 3)
        break;
      v21 = *v19 ^ 0x6F6E | *((unsigned __int8 *)v19 + 2) ^ 0x2D;
      if (!v21)
      {
        v19 = (unsigned __int16 *)((char *)v19 + 3);
        v34 = v19;
        v35 = v20 - 3;
        v20 -= 3;
      }
      if (v20 != 16)
        break;
      v23 = *(_QWORD *)v19;
      v22 = *((_QWORD *)v19 + 1);
      if (v23 != 0x657073776F6C6C61 || v22 != 0x6E6F6974616C7563)
        break;
      v6 = (_BYTE *)v10;
      if (!v5)
      {
        v13 = v21 != 0;
        v11 = v28;
        goto LABEL_51;
      }
    }
    v29[0] = "invalid LICM pass parameter '{0}' ";
    v29[1] = 34;
    v29[2] = &v31;
    v29[3] = 1;
    v30[0] = &unk_1E8168E00;
    v30[1] = &v34;
    v31 = v30;
    sub_1C4DCAF2C((uint64_t)v29, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v26 = qword_1ED836B58[0];
    v27 = operator new();
    v39 = 260;
    v38 = __p;
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v38, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v26;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v27;
    if (v33 < 0)
      operator delete(__p[0]);
    return;
  }
LABEL_18:
  v13 = 1;
LABEL_51:
  *(_BYTE *)(a1 + 16) &= ~1u;
  *(_DWORD *)a1 = v11;
  *(_DWORD *)(a1 + 4) = v12;
  *(_BYTE *)(a1 + 8) = v13;
}

void llvm::PassBuilder::parseCGSCCPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  void **v23;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned __int8 *v37;
  int v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v59;
  uint64_t v60;
  char v61;
  BOOL v62;
  llvm *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v74;
  BOOL v78;
  BOOL v79;
  BOOL v81;
  BOOL v85;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  uint64_t (**v93)();
  _QWORD *v94;
  int v96;
  BOOL v99;
  BOOL v102;
  uint64_t (**v114)();
  char *v115;
  void *v116;
  void *v117;
  int v119;
  int v120;
  BOOL v122;
  BOOL v130;
  BOOL v132;
  BOOL v137;
  BOOL v146;
  int v181;
  BOOL v182;
  BOOL v188;
  BOOL v193;
  BOOL v195;
  BOOL v197;
  llvm *v201;
  uint64_t (**v202)();
  void *v203;
  BOOL v206;
  BOOL v209;
  BOOL v213;
  BOOL v215;
  BOOL v217;
  BOOL v219;
  BOOL v221;
  BOOL v222;
  BOOL v224;
  BOOL v225;
  BOOL v229;
  BOOL v231;
  BOOL v234;
  BOOL v236;
  BOOL v237;
  BOOL v242;
  BOOL v246;
  uint64_t v249;
  BOOL v250;
  BOOL v251;
  BOOL v254;
  BOOL v255;
  BOOL v258;
  BOOL v260;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  BOOL v278;
  BOOL v281;
  unsigned __int8 *v285;
  int v286;
  unint64_t v287;
  uint64_t v288;
  int64x2_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v294;
  unsigned __int8 *v295;
  int v296;
  char v297;
  uint64_t v298;
  uint64_t (**v299)();
  uint64_t v300;
  uint64_t v301;
  llvm *v302;
  unint64_t v305;
  unsigned __int8 *v306;
  int v307;
  char *v308;
  unint64_t v309;
  uint64_t i;
  char *v311;
  void **v312;
  uint64_t v313;
  void *v314;
  int v315;
  uint64_t (**v316)();
  uint64_t v317;
  uint64_t v318;
  void **v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  char v324;
  _BOOL8 v325;
  llvm *v326;
  uint64_t v327;
  llvm *v328;
  BOOL v331;
  BOOL v338;
  BOOL v348;
  BOOL v353;
  BOOL v359;
  uint64_t v361;
  void ***v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  _QWORD *v370;
  llvm *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  int v377;
  int v378;
  unsigned int v379;
  int v380;
  llvm *v381;
  int v382;
  void **v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  _OWORD v388[4];
  _QWORD *v389;
  _QWORD v390[8];
  _QWORD *v391;
  _QWORD *v392;
  _QWORD v393[4];
  __int128 v394;
  uint64_t v395;
  uint64_t v396;
  __int128 v397;
  __int128 v398;
  int v399;
  _BYTE *v400;
  int v401;
  _BYTE v402[176];
  _OWORD *v403;
  int v404;
  _OWORD v405[2];
  int v406;
  uint64_t *v407;
  int v408;
  uint64_t v409;
  void *v410[4];
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD v421[2];
  int v422;
  char v423;
  __int128 v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  _DWORD v430[820];
  __int128 v431;
  int v432;
  __int128 v433;
  _BYTE v434[28];
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char v440;
  char v441;
  uint64_t v442;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = v6;
  v9 = v5;
  v10 = v4;
  v12 = v11;
  v442 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v6 + 16);
  v14 = *(_QWORD *)(v6 + 24);
  v15 = *(unsigned __int8 **)v6;
  v16 = *(_QWORD *)(v6 + 8);
  if (v13 != v14)
  {
    if (v16 == 19)
    {
      if (*(_QWORD *)v15 != 0x6E6F6974636E7566
        || *((_QWORD *)v15 + 1) != 0x692D72656761653CLL
        || *(_QWORD *)(v15 + 11) != 0x3E766E692D726567)
      {
        goto LABEL_52;
      }
    }
    else
    {
      if (v16 != 8)
      {
        if (v16 == 5 && *(_DWORD *)v15 == 1668507491 && v15[4] == 99)
        {
          memset(v410, 0, 24);
          v18 = 40 * ((v14 - v13) / 40);
          while (1)
          {
            llvm::PassBuilder::parseCGSCCPass(v10, v410, v13);
            if (*v12)
              goto LABEL_20;
            v13 += 40;
            v18 -= 40;
            if (!v18)
            {
              v19 = (uint64_t *)v410[0];
              v20 = (uint64_t *)v410[1];
              *v12 = 0;
              if (v19 != v20)
              {
                v21 = *(char **)(v9 + 8);
                do
                {
                  if ((unint64_t)v21 >= *(_QWORD *)(v9 + 16))
                  {
                    v21 = sub_1C4D62F9C((char **)v9, v19);
                  }
                  else
                  {
                    v22 = *v19;
                    *v19 = 0;
                    *(_QWORD *)v21 = v22;
                    v21 += 8;
                  }
                  *(_QWORD *)(v9 + 8) = v21;
                  ++v19;
                }
                while (v19 != v20);
              }
LABEL_19:
              *v12 = 0;
              goto LABEL_20;
            }
          }
        }
LABEL_52:
        v41 = sub_1C5A3BC6C(*(_DWORD **)v6, *(_QWORD *)(v6 + 8), v6, v7);
        if (HIDWORD(v41))
        {
          v54 = v41;
          v384 = 0uLL;
          *(_QWORD *)&v385 = 0;
          v55 = 40 * ((v14 - v13) / 40);
          while (1)
          {
            llvm::PassBuilder::parseCGSCCPass(v10, &v384, v13);
            if (*v12)
              break;
            v13 += 40;
            v55 -= 40;
            if (!v55)
            {
              v56 = (void *)v385;
              *v12 = 0;
              LODWORD(v410[0]) = v54;
              *(_OWORD *)&v410[1] = v384;
              v410[3] = v56;
              v384 = 0uLL;
              *(_QWORD *)&v385 = 0;
              sub_1C62E44FC((char **)v9);
              v438 = (uint64_t)&v410[1];
              sub_1C4764BBC((void ***)&v438);
              *v12 = 0;
              break;
            }
          }
          v410[0] = &v384;
          v23 = v410;
          goto LABEL_69;
        }
        v44 = sub_1C5A43DC0(v15, v16, v42, v43);
        if (!HIDWORD(v44))
        {
          v45 = *(unsigned int *)(v10 + 1512);
          if ((_DWORD)v45)
          {
            v46 = (_QWORD *)(*(_QWORD *)(v10 + 1504) + 24);
            v47 = 32 * v45;
            while (1)
            {
              v48 = *(_QWORD *)(v8 + 16);
              v49 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v8 + 24) - v48) >> 3);
              *(_OWORD *)v410 = *(_OWORD *)v8;
              *(_QWORD *)&v384 = v48;
              *((_QWORD *)&v384 + 1) = v49;
              if (!*v46)
                break;
              if ((*(unsigned int (**)(_QWORD, void **, uint64_t, __int128 *))(*(_QWORD *)*v46 + 48))(*v46, v410, v9, &v384))
              {
                goto LABEL_1233;
              }
              v46 += 4;
              v47 -= 32;
              if (!v47)
                goto LABEL_59;
            }
LABEL_1424:
            sub_1C485C2F0();
LABEL_1425:
            sub_1C62E3534((uint64_t)v410);
LABEL_1455:
            sub_1C5A43F70((uint64_t)&v384, (__int128 *)v410);
            sub_1C62E4494();
            v373 = v384;
            *(_QWORD *)&v384 = 0;
            if (v373)
              (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
            v438 = (uint64_t)&v410[1];
LABEL_1458:
            sub_1C4764BBC((void ***)&v438);
            goto LABEL_1230;
          }
LABEL_59:
          v410[0] = "invalid use of '{0}' pass as cgscc pipeline";
          v410[1] = (void *)43;
          v410[2] = &v412;
          v410[3] = (void *)1;
          *(_QWORD *)&v411 = &unk_1E818C130;
          *((_QWORD *)&v411 + 1) = v8;
          *(_QWORD *)&v412 = &v411;
          sub_1C4DCAF2C((uint64_t)v410, &v438);
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v51 = qword_1ED836B58[0];
          v52 = operator new();
          LOWORD(v386) = 260;
          *(_QWORD *)&v384 = &v438;
          *(_QWORD *)v52 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v384, (_QWORD *)(v52 + 8));
          *(_QWORD *)(v52 + 32) = 3;
          *(_QWORD *)(v52 + 40) = v51;
          *(_BYTE *)(v52 + 48) = 1;
          *v12 = v52;
          if (v441 < 0)
          {
            v53 = (void *)v438;
LABEL_63:
            operator delete(v53);
            return;
          }
          return;
        }
        v67 = v44;
        memset(v410, 0, 24);
        v68 = 40 * ((v14 - v13) / 40);
        while (1)
        {
          llvm::PassBuilder::parseCGSCCPass(v10, v410, v13);
          if (*v12)
            break;
          v13 += 40;
          v68 -= 40;
          if (!v68)
          {
            *v12 = 0;
            sub_1C57038A8((__int128 *)v410, v67, (uint64_t)&v384);
            sub_1C62E4590();
            v69 = v384;
            *(_QWORD *)&v384 = 0;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            goto LABEL_19;
          }
        }
LABEL_20:
        *(_QWORD *)&v384 = v410;
        v23 = (void **)&v384;
LABEL_69:
        sub_1C4764BBC((void ***)v23);
        return;
      }
      if (*(_QWORD *)v15 != 0x6E6F6974636E7566)
        goto LABEL_52;
    }
    memset(v410, 0, 24);
    v59 = 40 * ((v14 - v13) / 40);
    while (1)
    {
      llvm::PassBuilder::parseFunctionPass(v10, (uint64_t)v410, v13, (uint64_t)v7);
      if (*v12)
        break;
      v13 += 40;
      v59 -= 40;
      if (!v59)
      {
        v60 = *(_QWORD *)(v8 + 8);
        *v12 = 0;
        v61 = v60 != 8 || **(_QWORD **)v8 != 0x6E6F6974636E7566;
        sub_1C5A43D24((__int128 *)v410, v61, 0, (uint64_t)&v384);
        sub_1C62E4494();
        v269 = v384;
        *(_QWORD *)&v384 = 0;
        if (v269)
          (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
        *v12 = 0;
        break;
      }
    }
    *(_QWORD *)&v384 = v410;
    sub_1C4764BBC((void ***)&v384);
    return;
  }
  if (v16 != 20)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    switch(v16)
    {
      case 0xAuLL:
        if (*(_QWORD *)v15 != 0x6C70732D6F726F63 || *((_WORD *)v15 + 4) != 29801)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 1;
          goto LABEL_30;
        }
        LOBYTE(v410[0]) = 0;
        sub_1C62E4890();
        goto LABEL_1233;
      case 0xBuLL:
        if (*(_QWORD *)v15 != 0x67632D706F2D6F6ELL || *(_QWORD *)(v15 + 3) != 0x63637367632D706FLL)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v26 = 1;
          goto LABEL_30;
        }
        v92 = (_QWORD *)operator new();
        v93 = &off_1E818D1E0;
        goto LABEL_179;
      case 0xCuLL:
        if (*(_QWORD *)v15 != 0x6F6D6F7270677261 || *((_DWORD *)v15 + 2) != 1852795252)
        {
          v26 = 0;
          v27 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v28 = 1;
          goto LABEL_30;
        }
        LODWORD(v410[0]) = 3;
        sub_1C62E4708(v5, (int *)v410);
        goto LABEL_1233;
      case 0xDuLL:
      case 0x11uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x16uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1AuLL:
      case 0x1BuLL:
      case 0x1CuLL:
      case 0x1EuLL:
      case 0x1FuLL:
        goto LABEL_30;
      case 0xEuLL:
        if (*(_QWORD *)v15 != 0x6E6F6974636E7566 || *(_QWORD *)(v15 + 6) != 0x73727474612D6E6FLL)
        {
          v26 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v27 = 1;
          goto LABEL_30;
        }
        sub_1C62E47B4();
        goto LABEL_1233;
      case 0xFuLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69 || *(_QWORD *)(v15 + 7) != 0x3E6C6C613C657461)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v34 = 0;
          v35 = 0;
          v33 = 1;
          goto LABEL_30;
        }
        sub_1C62E4770();
        goto LABEL_1233;
      case 0x10uLL:
        if (*(_QWORD *)v15 == 0x7475626972747461 && *((_QWORD *)v15 + 1) == 0x63637367632D726FLL)
        {
          sub_1C62E4800();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x6F2D706D6E65706FLL || *((_QWORD *)v15 + 1) != 0x63637367632D7470)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v35 = 0;
            v34 = 1;
            goto LABEL_30;
          }
          sub_1C62E4848();
        }
        goto LABEL_1233;
      case 0x12uLL:
        if (*(_QWORD *)v15 != 0x3C65726975716572
          || *((_QWORD *)v15 + 1) != 0x786F72702D6D6166
          || *((_WORD *)v15 + 8) != 15993)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v30 = 1;
          goto LABEL_30;
        }
        sub_1C62E45F8();
        goto LABEL_1233;
      case 0x15uLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69
          || *((_QWORD *)v15 + 1) != 0x702D6D61663C6574
          || *(_QWORD *)(v15 + 13) != 0x3E79786F72702D6DLL)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v32 = 1;
          goto LABEL_30;
        }
        sub_1C62E463C();
        goto LABEL_1233;
      case 0x17uLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69
          || *((_QWORD *)v15 + 1) != 0x706F2D6F6E3C6574
          || *(_QWORD *)(v15 + 15) != 0x3E63637367632D70)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v31 = 1;
          goto LABEL_30;
        }
        v92 = (_QWORD *)operator new();
        v93 = &off_1E818ED20;
        goto LABEL_179;
      case 0x1DuLL:
        if (*(_QWORD *)v15 != 0x3C65726975716572
          || *((_QWORD *)v15 + 1) != 0x736E692D73736170
          || *((_QWORD *)v15 + 2) != 0x61746E656D757274
          || *(_QWORD *)(v15 + 21) != 0x3E6E6F697461746ELL)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v29 = 1;
          goto LABEL_30;
        }
        sub_1C62E4680();
        break;
      case 0x20uLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69
          || *((_QWORD *)v15 + 1) != 0x2D737361703C6574
          || *((_QWORD *)v15 + 2) != 0x656D757274736E69
          || *((_QWORD *)v15 + 3) != 0x3E6E6F697461746ELL)
        {
          goto LABEL_29;
        }
        sub_1C62E46C4();
        goto LABEL_1233;
      default:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        goto LABEL_30;
    }
    goto LABEL_1233;
  }
  if (*(_QWORD *)v15 == 0x3C65726975716572
    && *((_QWORD *)v15 + 1) == 0x67632D706F2D6F6ELL
    && *((_DWORD *)v15 + 4) == 1046700915)
  {
    v92 = (_QWORD *)operator new();
    v93 = &off_1E818ECE0;
LABEL_179:
    *v92 = v93;
    v410[0] = v92;
    v94 = *(_QWORD **)(v9 + 8);
    if ((unint64_t)v94 < *(_QWORD *)(v9 + 16))
    {
      *v94 = v92;
      *(_QWORD *)(v9 + 8) = v94 + 1;
LABEL_1233:
      *v12 = 0;
      return;
    }
    v115 = sub_1C4D62F9C((char **)v9, (uint64_t *)v410);
    v116 = v410[0];
    *(_QWORD *)(v9 + 8) = v115;
LABEL_1231:
    v410[0] = 0;
    if (v116)
      (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
    goto LABEL_1233;
  }
LABEL_29:
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
LABEL_30:
  v375 = v31;
  v376 = v29;
  v377 = v28;
  v378 = v27;
  v379 = v35;
  v380 = v34;
  if (sub_1C5A3C044((char *)v15, v16, "inline", 6uLL))
  {
    if (v16 >= 6)
    {
      if (*(_DWORD *)v15 != 1768713833 || *((_WORD *)v15 + 2) != 25966)
        goto LABEL_39;
      v15 += 6;
      v16 -= 6;
    }
    if (!v16)
    {
      v39 = 0;
LABEL_271:
      sub_1C5A551F4((uint64_t)v410, (uint64_t)v15, v39, "only-mandatory", 0xEuLL, (uint64_t)"InlinerPass", 11);
      if (((uint64_t)v410[1] & 1) != 0)
      {
LABEL_272:
        v117 = v410[0];
LABEL_273:
        *v12 = (uint64_t)v117;
        return;
      }
      *(_QWORD *)&v384 = 0;
      BYTE8(v384) = v410[0];
      sub_1C6296FCC(v9, (uint64_t *)&v384);
LABEL_642:
      v203 = (void *)v384;
      *(_QWORD *)&v384 = 0;
      if (v203)
LABEL_643:
        (*(void (**)(void *))(*(_QWORD *)v203 + 8))(v203);
LABEL_644:
      v117 = 0;
      goto LABEL_273;
    }
LABEL_39:
    v37 = v15 + 1;
    v38 = *v15;
    v39 = v16 - (v38 == 60);
    if (v38 == 60)
    {
      ++v15;
      if (v39)
      {
        if (v37[v39 - 1] == 62 && v39 >= v39 - 1)
          --v39;
      }
    }
    goto LABEL_271;
  }
  if (v16 == 7)
  {
    v62 = *(_DWORD *)v15 == 1697472865 && *(_DWORD *)(v15 + 3) == 1818326629;
    v64 = v378;
    v63 = (llvm *)v379;
    v65 = v380;
    if (v62)
    {
      *(_QWORD *)&v415 = 0;
      v413 = 0u;
      v414 = 0u;
      v411 = 0u;
      v412 = 0u;
      memset(v410, 0, sizeof(v410));
      sub_1C62E48E4((uint64_t)&v384, (uint64_t *)v410);
      sub_1C62E4494();
      v249 = v384;
      *(_QWORD *)&v384 = 0;
      if (v249)
        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
      llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)v410);
      goto LABEL_1233;
    }
    v66 = v32;
  }
  else
  {
    v64 = v378;
    v63 = (llvm *)v379;
    v65 = v380;
    v66 = v32;
    if (v16 == 4)
    {
      v70 = v377;
      if (*(_DWORD *)v15 == 1701012577)
      {
        v90 = (_QWORD *)operator new();
        v91 = (char *)&unk_1E8190CD0;
        goto LABEL_1227;
      }
      v71 = 1;
      if (!v30)
        goto LABEL_106;
      goto LABEL_99;
    }
  }
  v71 = 0;
  v70 = v377;
  if (!v30)
    goto LABEL_106;
LABEL_99:
  if (*(_QWORD *)v15 == 0x637369642D646461
    && *((_QWORD *)v15 + 1) == 0x6F74616E696D6972
    && *((_WORD *)v15 + 8) == 29554)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E81921D0;
    goto LABEL_1227;
  }
LABEL_106:
  if (v16 == 22)
  {
    v74 = *(_QWORD *)v15 == 0x6973736572676761 && *((_QWORD *)v15 + 1) == 0x6374736E692D6576;
    if (v74 && *(_QWORD *)(v15 + 14) == 0x656E69626D6F6374)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190E90;
      goto LABEL_1227;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x622D656D75737361 && *(_QWORD *)(v15 + 6) == 0x7265646C6975622DLL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D260;
      goto LABEL_1228;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x732D656D75737361 && *(_QWORD *)(v15 + 7) == 0x7966696C706D6973)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190D10;
      goto LABEL_1227;
    }
  }
  if (v16 == 26)
  {
    v78 = *(_QWORD *)v15 == 0x6E656D6E67696C61 && *((_QWORD *)v15 + 1) == 0x612D6D6F72662D74;
    v79 = v78 && *((_QWORD *)v15 + 2) == 0x6F6974706D757373;
    if (v79 && *((_WORD *)v15 + 12) == 29550)
    {
      v90 = (_QWORD *)operator new();
      v114 = (uint64_t (**)())&unk_1E8191C20;
      v90[1] = 0;
      v90[2] = 0;
      goto LABEL_1228;
    }
  }
  if (v30)
  {
    v81 = *(_QWORD *)v15 == 0x697461746F6E6E61 && *((_QWORD *)v15 + 1) == 0x72616D65722D6E6FLL;
    if (v81 && *((_WORD *)v15 + 8) == 29547)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190690;
      goto LABEL_1227;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1701012578)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190C50;
    goto LABEL_1227;
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x632D73646E756F62 && *(_QWORD *)(v15 + 7) == 0x676E696B63656863)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D2A0;
      goto LABEL_1228;
    }
  }
  if (v65)
  {
    if (*(_QWORD *)v15 == 0x72632D6B61657262 && *((_QWORD *)v15 + 1) == 0x73656764652D7469)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D2E0;
      goto LABEL_1228;
    }
  }
  if (v30)
  {
    v85 = *(_QWORD *)v15 == 0x657469736C6C6163 && *((_QWORD *)v15 + 1) == 0x697474696C70732DLL;
    if (v85 && *((_WORD *)v15 + 8) == 26478)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191710;
      goto LABEL_1227;
    }
  }
  if ((_DWORD)v63)
  {
    if (*(_QWORD *)v15 == 0x696F6874736E6F63 && *((_WORD *)v15 + 4) == 29811)
    {
      bzero(v410, 0x15D8uLL);
      *(_QWORD *)&v417 = &v418;
      v431 = 0u;
      HIDWORD(v417) = 8;
      v432 = 0;
      v433 = 0u;
      memset(v434, 0, sizeof(v434));
      v435 = 0;
      v437 = 0;
      v436 = 0;
      sub_1C5A43EAC((uint64_t)&v384, (uint64_t)v410, v270, v271);
      sub_1C62E4494();
      v272 = v384;
      *(_QWORD *)&v384 = 0;
      if (v272)
        (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
      sub_1C62EA5E0((uint64_t)v410);
      goto LABEL_1233;
    }
  }
  if (v16 == 22)
  {
    if (*(_QWORD *)v15 == 0x69617274736E6F63
      && *((_QWORD *)v15 + 1) == 0x696D696C652D746ELL
      && *(_QWORD *)(v15 + 14) == 0x6E6F6974616E696DLL)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190ED0;
      goto LABEL_1227;
    }
  }
  else if (v16 == 3)
  {
    if (*(_WORD *)v15 == 26723 && v15[2] == 114)
    {
      sub_1C5872960();
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191110;
      goto LABEL_1227;
    }
    v96 = 1;
    if (!(_DWORD)v63)
      goto LABEL_193;
    goto LABEL_189;
  }
  v96 = 0;
  if (!(_DWORD)v63)
    goto LABEL_193;
LABEL_189:
  if (*(_QWORD *)v15 == 0x696C652D6F726F63 && *((_WORD *)v15 + 4) == 25956)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190C90;
    goto LABEL_1227;
  }
LABEL_193:
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x656C632D6F726F63 && *((_DWORD *)v15 + 2) == 1886744161)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191F90;
      goto LABEL_1227;
    }
  }
  if (v16 == 22)
  {
    v99 = *(_QWORD *)v15 == 0x74616C6572726F63 && *((_QWORD *)v15 + 1) == 0x61706F72702D6465;
    if (v99 && *(_QWORD *)(v15 + 14) == 0x6E6F697461676170)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190E50;
      goto LABEL_1227;
    }
  }
  if (v96)
  {
    if (*(_WORD *)v15 == 25444 && v15[2] == 101)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D360;
      goto LABEL_1228;
    }
  }
  if (v30)
  {
    v102 = *(_QWORD *)v15 == 0x706D756A2D616664 && *((_QWORD *)v15 + 1) == 0x696461657268742DLL;
    if (v102 && *((_WORD *)v15 + 8) == 26478)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191090;
      goto LABEL_1227;
    }
  }
  if (v16 == 13 && *(_QWORD *)v15 == 0x2D6D65722D766964 && *(_QWORD *)(v15 + 5) == 0x73726961702D6D65)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8191F50;
    goto LABEL_1227;
  }
  if (v96)
  {
    if (*(_WORD *)v15 == 29540 && v15[2] == 101)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E81910D0;
      goto LABEL_1227;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1734763309)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818D3A0;
    goto LABEL_1228;
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x2D6766632D746F64 && *((_DWORD *)v15 + 2) == 2037149295)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D3E0;
      goto LABEL_1228;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1836016685)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818D420;
    goto LABEL_1228;
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x2D6D6F642D746F64 && *((_DWORD *)v15 + 2) == 2037149295)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D460;
      goto LABEL_1228;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x657272692D786966 && *(_QWORD *)(v15 + 7) == 0x656C626963756465)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D4A0;
      goto LABEL_1228;
    }
  }
  if ((_DWORD)v63)
  {
    if (*(_QWORD *)v15 == 0x636E657474616C66 && *((_WORD *)v15 + 4) == 26470)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D4E0;
      goto LABEL_1228;
    }
  }
  if (v16 == 20)
  {
    if (*(_QWORD *)v15 == 0x6175672D656B616DLL
      && *((_QWORD *)v15 + 1) == 0x6C7078652D736472
      && *((_DWORD *)v15 + 4) == 1953063785)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D520;
      goto LABEL_1228;
    }
LABEL_282:
    v119 = 0;
    v120 = 0;
    if (!(_DWORD)v63)
      goto LABEL_287;
    goto LABEL_283;
  }
  if (v16 == 8)
  {
    if (*(_QWORD *)v15 == 0x6B6E69732D6E7667)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190D90;
      goto LABEL_1227;
    }
    v120 = 0;
    v119 = 1;
    if (!(_DWORD)v63)
      goto LABEL_287;
LABEL_283:
    if (*(_QWORD *)v15 == 0x726F776F6C6C6568 && *((_WORD *)v15 + 4) == 25708)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D560;
      goto LABEL_1228;
    }
    goto LABEL_287;
  }
  if (v16 != 9)
    goto LABEL_282;
  if (*(_QWORD *)v15 == 0x73696F682D6E7667 && v15[8] == 116)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190D50;
    goto LABEL_1227;
  }
  v119 = 0;
  v120 = 1;
  if ((_DWORD)v63)
    goto LABEL_283;
LABEL_287:
  if (v16 == 20)
  {
    v122 = *(_QWORD *)v15 == 0x64612D7265666E69 && *((_QWORD *)v15 + 1) == 0x70732D7373657264;
    if (v122 && *((_DWORD *)v15 + 4) == 1936024417)
    {
      v90 = (_QWORD *)operator new();
      *v90 = &off_1E818D5A0;
      *((_DWORD *)v90 + 2) = -1;
LABEL_1229:
      v410[0] = v90;
      LOWORD(v410[1]) = 0;
      sub_1C62E4494();
LABEL_1230:
      v116 = v410[0];
      goto LABEL_1231;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x626D6F6374736E69 && *(_QWORD *)(v15 + 3) == 0x656E69626D6F6374)
    {
      v410[0] = &v410[2];
      v410[1] = (void *)0x10000000000;
      v424 = 0u;
      v425 = 0;
      v426 = 1;
      v288 = 262;
      v289 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)&v410[v288] = v289;
        v288 += 2;
      }
      while (v288 != 278);
      v428 = v430;
      v429 = 0x1000000000;
      v430[32] = dword_1ED8337E0;
      sub_1C62E4994((uint64_t)&v384, (uint64_t)v410);
      sub_1C62E4494();
      v290 = v384;
      *(_QWORD *)&v384 = 0;
      if (v290)
        (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
      if (v428 != v430)
        free(v428);
      if ((v426 & 1) == 0)
        MEMORY[0x1CAA32FB4](v427, 8);
      MEMORY[0x1CAA32FB4](v424, 8);
      if (v410[0] != &v410[2])
        free(v410[0]);
      goto LABEL_1233;
    }
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x6E756F6374736E69 && v15[8] == 116)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D5E0;
      goto LABEL_1228;
    }
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x706D697374736E69 && *((_DWORD *)v15 + 2) == 2036754796)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191F10;
      goto LABEL_1227;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69 && *(_QWORD *)(v15 + 7) == 0x3E6C6C613C657461)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D620;
      goto LABEL_1228;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1701016169)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818D660;
    goto LABEL_1228;
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x6E693274616F6C66 && v15[8] == 116)
    {
      v397 = 0u;
      v394 = 0u;
      v391 = 0;
      memset(v390, 0, sizeof(v390));
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      v387 = 1;
      v388[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v388[1] = v388[0];
      v388[2] = v388[0];
      v388[3] = v388[0];
      v389 = &v390[1];
      v390[0] = 0x800000000;
      v392 = v393;
      memset(v393, 0, sizeof(v393));
      *(_QWORD *)&v394 = 0;
      DWORD2(v394) = 0;
      v396 = 0;
      *(_QWORD *)&v397 = 0;
      v395 = 0;
      v291 = operator new();
      sub_1C62F5D68(v410, (uint64_t)&v384);
      *(_QWORD *)v291 = &unk_1E8191DA0;
      sub_1C62F5D68((_QWORD *)(v291 + 8), (uint64_t)v410);
      v438 = v291;
      LOWORD(v439) = 0;
      sub_1C62EA7A0((uint64_t)v410);
      sub_1C62E4494();
      v292 = v438;
      v438 = 0;
      if (v292)
        (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
      sub_1C62EA7A0((uint64_t)&v384);
      goto LABEL_1233;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x75662D706F2D6F6ELL && *(_QWORD *)(v15 + 6) == 0x6E6F6974636E7566)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D6A0;
      goto LABEL_1228;
    }
  }
  if (v16 == 19)
  {
    v130 = *(_QWORD *)v15 == 0x736C6C616362696CLL && *((_QWORD *)v15 + 1) == 0x776B6E697268732DLL;
    if (v130 && *(_QWORD *)(v15 + 11) == 0x706172776B6E6972)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190810;
      goto LABEL_1227;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1953393004)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818D6E0;
    goto LABEL_1228;
  }
  if (v16 == 19)
  {
    v132 = *(_QWORD *)v15 == 0x742D7463656A6E69 && *((_QWORD *)v15 + 1) == 0x697070616D2D696CLL;
    if (v132 && *(_QWORD *)(v15 + 11) == 0x73676E697070616DLL)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191E90;
      goto LABEL_1227;
    }
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x656D616E74736E69 && v15[8] == 114)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D720;
      goto LABEL_1228;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x6F74617265776F6CLL && *(_QWORD *)(v15 + 3) == 0x63696D6F74617265)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D760;
      goto LABEL_1228;
    }
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x78652D7265776F6CLL && *((_DWORD *)v15 + 2) == 1952671088)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E81916D0;
      goto LABEL_1227;
    }
  }
  if (v66)
  {
    v137 = *(_QWORD *)v15 == 0x75672D7265776F6CLL && *((_QWORD *)v15 + 1) == 0x72746E692D647261;
    if (v137 && *(_QWORD *)(v15 + 13) == 0x6369736E6972746ELL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D7A0;
      goto LABEL_1228;
    }
  }
  if (v16 == 25)
  {
    if (*(_QWORD *)v15 == 0x6F632D7265776F6CLL
      && *((_QWORD *)v15 + 1) == 0x692D746E6174736ELL
      && *((_QWORD *)v15 + 2) == 0x6369736E6972746ELL
      && v15[24] == 115)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191DD0;
      goto LABEL_1227;
    }
    if (*(_QWORD *)v15 == 0x69772D7265776F6CLL
      && *((_QWORD *)v15 + 1) == 0x2D656C62616E6564
      && *((_QWORD *)v15 + 2) == 0x6F697469646E6F63
      && v15[24] == 110)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D7E0;
      goto LABEL_1228;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x69772D6472617567 && *(_QWORD *)(v15 + 6) == 0x676E696E65646977)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D820;
      goto LABEL_1228;
    }
  }
  if (v66)
  {
    v146 = *(_QWORD *)v15 == 0x6F74732D64616F6CLL && *((_QWORD *)v15 + 1) == 0x6F746365762D6572;
    if (v146 && *(_QWORD *)(v15 + 13) == 0x72657A69726F7463)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D860;
      goto LABEL_1228;
    }
  }
  if (v16 == 13 && *(_QWORD *)v15 == 0x6D69732D706F6F6CLL && *(_QWORD *)(v15 + 5) == 0x7966696C706D6973)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190610;
    goto LABEL_1227;
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x6E69732D706F6F6CLL && v15[8] == 107)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191ED0;
      goto LABEL_1227;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x766E697265776F6CLL && *(_QWORD *)(v15 + 3) == 0x656B6F766E697265)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D8A0;
      goto LABEL_1228;
    }
    if (*(_QWORD *)v15 == 0x6977737265776F6CLL && *(_QWORD *)(v15 + 3) == 0x6863746977737265)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D8E0;
      goto LABEL_1228;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 846030189 && *(_DWORD *)(v15 + 3) == 1734701618)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8191950;
    goto LABEL_1227;
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x706F7970636D656DLL && v15[8] == 116)
    {
      v90 = (_QWORD *)operator new();
      *v90 = &unk_1E8190BE0;
      *(_OWORD *)(v90 + 1) = 0u;
      *(_OWORD *)(v90 + 3) = 0u;
      *(_OWORD *)(v90 + 5) = 0u;
      goto LABEL_1229;
    }
  }
  if ((_DWORD)v63)
  {
    if (*(_QWORD *)v15 == 0x6D6369656772656DLL && *((_WORD *)v15 + 4) == 29552)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D920;
      goto LABEL_1228;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x746572656772656DLL && *(_QWORD *)(v15 + 3) == 0x6E72757465726567)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D960;
      goto LABEL_1228;
    }
  }
  if (v65)
  {
    if (*(_QWORD *)v15 == 0x6165722D7972616ELL && *((_QWORD *)v15 + 1) == 0x65746169636F7373)
    {
      *(_QWORD *)&v413 = 0;
      v411 = 0u;
      v412 = 0u;
      memset(v410, 0, sizeof(v410));
      sub_1C62E4A54((uint64_t)&v384, (__int128 *)v410);
      sub_1C62E4494();
      v300 = v384;
      *(_QWORD *)&v384 = 0;
      if (v300)
        (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
      sub_1C5A55620((uint64_t *)&v412);
      goto LABEL_1233;
    }
  }
  if (v16 == 6 && *(_DWORD *)v15 == 1735877998 && *((_WORD *)v15 + 2) == 28278)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8191010;
    goto LABEL_1227;
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x7268742D706D756ALL && *(_QWORD *)(v15 + 6) == 0x676E696461657268)
    {
      *(_QWORD *)&v412 = 0;
      *((_QWORD *)&v411 + 1) = 0;
      WORD4(v412) = 0;
      *(_QWORD *)&v413 = &v414;
      *((_QWORD *)&v413 + 1) = 0x1000000000;
      v421[1] = 0;
      v421[0] = 0;
      v420 = v421;
      v423 = byte_1ED835ED0;
      v422 = dword_1ED835E10;
      sub_1C62E4B08((uint64_t)&v384, (__int128 *)v410);
      sub_1C62E4494();
      v301 = v384;
      *(_QWORD *)&v384 = 0;
      if (v301)
        (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
      sub_1C62EA844((uint64_t)v410);
      goto LABEL_1233;
    }
  }
  if (v16 == 25)
  {
    if (*(_QWORD *)v15 == 0x6C6C616974726170
      && *((_QWORD *)v15 + 1) == 0x656E696C6E692D79
      && *((_QWORD *)v15 + 2) == 0x6C6C616362696C2DLL
      && v15[24] == 115)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818D9E0;
      goto LABEL_1228;
    }
    goto LABEL_551;
  }
  if (v16 != 5)
  {
LABEL_551:
    v181 = 0;
    goto LABEL_552;
  }
  if (*(_DWORD *)v15 == 1936941932 && v15[4] == 97)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190650;
    goto LABEL_1227;
  }
  v181 = 1;
LABEL_552:
  if (v30)
  {
    v182 = *(_QWORD *)v15 == 0x7461642D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x7465666572702D61;
    if (v182 && *((_WORD *)v15 + 8) == 26723)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818DA20;
      goto LABEL_1228;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x616F6C2D706F6F6CLL && *(_QWORD *)(v15 + 6) == 0x6D696C652D64616FLL)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191B90;
      goto LABEL_1227;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x7375662D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6E6F697375662D70)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818DA60;
      goto LABEL_1228;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x7369642D706F6F6CLL && *(_QWORD *)(v15 + 7) == 0x6574756269727473)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191E50;
      goto LABEL_1227;
    }
    if (*(_QWORD *)v15 == 0x7265762D706F6F6CLL && *(_QWORD *)(v15 + 7) == 0x676E696E6F697372)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818DAA0;
      goto LABEL_1228;
    }
  }
  if (v119 && *(_QWORD *)v15 == 0x6372612D636A626FLL)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818DAE0;
    goto LABEL_1228;
  }
  if (v16 == 17)
  {
    v188 = *(_QWORD *)v15 == 0x6372612D636A626FLL && *((_QWORD *)v15 + 1) == 0x636172746E6F632DLL;
    if (v188 && v15[16] == 116)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818DB20;
      goto LABEL_1228;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6372612D636A626FLL && *(_QWORD *)(v15 + 7) == 0x646E617078652D63)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818DB60;
      goto LABEL_1228;
    }
  }
  if (v16 == 13 && *(_QWORD *)v15 == 0x6F6D656D2D6F6770 && *(_QWORD *)(v15 + 5) == 0x74706F2D706F6D65)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190F10;
    goto LABEL_1227;
  }
  if (v181)
  {
    if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
    {
      v302 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      *v90 = off_1E818DBA0;
      v90[1] = v302;
      v90[2] = 0;
      *((_BYTE *)v90 + 39) = 0;
      goto LABEL_1229;
    }
  }
  if (v30)
  {
    v193 = *(_QWORD *)v15 == 0x73613C746E697270 && *((_QWORD *)v15 + 1) == 0x6E6F6974706D7573;
    if (v193 && *((_WORD *)v15 + 8) == 15987)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DBE0;
      goto LABEL_1213;
    }
  }
  if (v16 == 17)
  {
    v195 = *(_QWORD *)v15 == 0x6C623C746E697270 && *((_QWORD *)v15 + 1) == 0x716572662D6B636FLL;
    if (v195 && v15[16] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DC20;
      goto LABEL_1213;
    }
  }
  if (v30)
  {
    v197 = *(_QWORD *)v15 == 0x72623C746E697270 && *((_QWORD *)v15 + 1) == 0x6F72702D68636E61;
    if (v197 && *((_WORD *)v15 + 8) == 15970)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DC60;
      goto LABEL_1213;
    }
  }
  if (v16 == 17)
  {
    if (*(_QWORD *)v15 == 0x6F633C746E697270 && *((_QWORD *)v15 + 1) == 0x6C65646F6D2D7473 && v15[16] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DCA0;
      goto LABEL_1213;
    }
  }
  else if (v16 == 13 && *(_QWORD *)v15 == 0x79633C746E697270 && *(_QWORD *)(v15 + 5) == 0x3E73656C6379633CLL)
  {
    v201 = llvm::dbgs(v63);
    v90 = (_QWORD *)operator new();
    v202 = &off_1E818DCE0;
    goto LABEL_1213;
  }
  if (v120)
  {
    if (*(_QWORD *)v15 == 0x61643C746E697270 && v15[8] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DD20;
      goto LABEL_1213;
    }
  }
  if (v16 == 17)
  {
    v206 = *(_QWORD *)v15 == 0x69643C746E697270 && *((_QWORD *)v15 + 1) == 0x65636E6567726576;
    if (v206 && v15[16] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DD60;
      goto LABEL_1213;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x6F643C746E697270 && *(_QWORD *)(v15 + 6) == 0x3E656572746D6F64)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DDA0;
      goto LABEL_1213;
    }
  }
  if (v30)
  {
    v209 = *(_QWORD *)v15 == 0x6F703C746E697270 && *((_QWORD *)v15 + 1) == 0x6572746D6F647473;
    if (v209 && *((_WORD *)v15 + 8) == 15973)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DDE0;
      goto LABEL_1213;
    }
  }
  if (v16 == 22)
  {
    if (*(_QWORD *)v15 == 0x65643C746E697270
      && *((_QWORD *)v15 + 1) == 0x7A697261656E696CLL
      && *(_QWORD *)(v15 + 14) == 0x3E6E6F6974617A69)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DE20;
      goto LABEL_1213;
    }
  }
  else if (v16 == 20)
  {
    v213 = *(_QWORD *)v15 == 0x65643C746E697270 && *((_QWORD *)v15 + 1) == 0x622D6465646E616DLL;
    if (v213 && *((_DWORD *)v15 + 4) == 1047753833)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DE60;
      goto LABEL_1213;
    }
  }
  if (v30)
  {
    v215 = *(_QWORD *)v15 == 0x6F643C746E697270 && *((_QWORD *)v15 + 1) == 0x6569746E6F72666DLL;
    if (v215 && *((_WORD *)v15 + 8) == 15986)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DEA0;
      goto LABEL_1213;
    }
  }
  if (v16 == 22)
  {
    v217 = *(_QWORD *)v15 == 0x75663C746E697270 && *((_QWORD *)v15 + 1) == 0x65706F72702D636ELL;
    if (v217 && *(_QWORD *)(v15 + 14) == 0x3E73656974726570)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DEE0;
      goto LABEL_1213;
    }
  }
  if (v30)
  {
    v219 = *(_QWORD *)v15 == 0x6E693C746E697270 && *((_QWORD *)v15 + 1) == 0x736F632D656E696CLL;
    if (v219 && *((_WORD *)v15 + 8) == 15988)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DF20;
      goto LABEL_1213;
    }
  }
  if (v376)
  {
    v221 = *(_QWORD *)v15 == 0x6E693C746E697270 && *((_QWORD *)v15 + 1) == 0x69732D72656E696CLL;
    v222 = v221 && *((_QWORD *)v15 + 2) == 0x6D697473652D657ALL;
    if (v222 && *(_QWORD *)(v15 + 21) == 0x3E726F74616D6974)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DF60;
      goto LABEL_1213;
    }
  }
  if (v16 == 28)
  {
    v224 = *(_QWORD *)v15 == 0x70673C746E697270 && *((_QWORD *)v15 + 1) == 0x6974636E75662D75;
    v225 = v224 && *((_QWORD *)v15 + 2) == 0x796C616E612D6E6FLL;
    if (v225 && *((_DWORD *)v15 + 6) == 1047751027)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DFA0;
      goto LABEL_1213;
    }
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x6F6C3C746E697270 && *((_DWORD *)v15 + 2) == 1047752815)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818DFE0;
      goto LABEL_1213;
    }
  }
  if (v65)
  {
    if (*(_QWORD *)v15 == 0x656D3C746E697270 && *((_QWORD *)v15 + 1) == 0x3E61737379726F6DLL)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E020;
      goto LABEL_1213;
    }
  }
  if (v375)
  {
    v229 = *(_QWORD *)v15 == 0x656D3C746E697270 && *((_QWORD *)v15 + 1) == 0x2D61737379726F6DLL;
    if (v229 && *(_QWORD *)(v15 + 15) == 0x3E72656B6C61772DLL)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E060;
      goto LABEL_1213;
    }
  }
  if (v16 == 17)
  {
    v231 = *(_QWORD *)v15 == 0x68703C746E697270 && *((_QWORD *)v15 + 1) == 0x7365756C61762D69;
    if (v231 && v15[16] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E0A0;
      goto LABEL_1213;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x65723C746E697270 && *(_QWORD *)(v15 + 6) == 0x3E736E6F69676572)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E0E0;
      goto LABEL_1213;
    }
  }
  if (v375)
  {
    v234 = *(_QWORD *)v15 == 0x63733C746E697270 && *((_QWORD *)v15 + 1) == 0x6F76652D72616C61;
    if (v234 && *(_QWORD *)(v15 + 15) == 0x3E6E6F6974756C6FLL)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E120;
      goto LABEL_1213;
    }
  }
  if (v16 == 25)
  {
    v236 = *(_QWORD *)v15 == 0x74733C746E697270 && *((_QWORD *)v15 + 1) == 0x656661732D6B6361;
    v237 = v236 && *((_QWORD *)v15 + 2) == 0x6C61636F6C2D7974;
    if (v237 && v15[24] == 62)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E160;
      goto LABEL_1213;
    }
  }
  if (v65)
  {
    if (*(_QWORD *)v15 == 0x6C612D746E697270 && *((_QWORD *)v15 + 1) == 0x737465732D736169)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E1A0;
      goto LABEL_1213;
    }
  }
  if (v16 == 19)
  {
    if (*(_QWORD *)v15 != 0x72702D746E697270
      || *((_QWORD *)v15 + 1) != 0x6965746163696465
      || *(_QWORD *)(v15 + 11) != 0x6F666E6965746163)
    {
      goto LABEL_816;
    }
    v201 = llvm::dbgs(v63);
    v90 = (_QWORD *)operator new();
    v202 = &off_1E818E1E0;
LABEL_1213:
    *v90 = v202;
    v90[1] = v201;
    goto LABEL_1229;
  }
  if (v16 == 17)
  {
    v242 = *(_QWORD *)v15 == 0x756D2D746E697270 && *((_QWORD *)v15 + 1) == 0x7475636578657473;
    if (v242 && v15[16] == 101)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E220;
      goto LABEL_1213;
    }
  }
LABEL_816:
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x656D2D746E697270 && *(_QWORD *)(v15 + 7) == 0x7366657265646D65)
    {
      v201 = llvm::dbgs(v63);
      v90 = (_QWORD *)operator new();
      v202 = &off_1E818E260;
      goto LABEL_1213;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x69636F7373616572 && *(_QWORD *)(v15 + 3) == 0x65746169636F7373)
    {
      bzero(&v384, 0x230uLL);
      for (i = 120; i != 552; i += 24)
      {
        v311 = (char *)&v384 + i;
        *(_QWORD *)v311 = 0;
        *((_QWORD *)v311 + 1) = 0;
        *((_DWORD *)v311 + 4) = 0;
      }
      v312 = (void **)operator new();
      sub_1C5A5C40C((uint64_t)v410, (uint64_t)&v384);
      *v312 = &unk_1E8190860;
      sub_1C5A5C40C((uint64_t)(v312 + 1), (uint64_t)v410);
      v438 = (uint64_t)v312;
      LOWORD(v439) = 0;
      sub_1C5A55684(v410);
      sub_1C62E4494();
      v313 = v438;
      v438 = 0;
      if (v313)
        (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
      sub_1C5A55684(&v384);
      goto LABEL_1233;
    }
  }
  if (v375)
  {
    v246 = *(_QWORD *)v15 == 0x6E61646E75646572 && *((_QWORD *)v15 + 1) == 0x6E692D6762642D74;
    if (v246 && *(_QWORD *)(v15 + 15) == 0x6D696C652D74736ELL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E2A0;
      goto LABEL_1228;
    }
  }
  if (v16 == 7)
  {
    if (*(_DWORD *)v15 == 845636978 && *(_DWORD *)(v15 + 3) == 1835363634)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E2E0;
      goto LABEL_1228;
    }
  }
  else if (v16 == 27)
  {
    v250 = *(_QWORD *)v15 == 0x7A6972616C616373 && *((_QWORD *)v15 + 1) == 0x64656B73616D2D65;
    v251 = v250 && *((_QWORD *)v15 + 2) == 0x746E692D6D656D2DLL;
    if (v251 && *(_QWORD *)(v15 + 19) == 0x6E6972746E692D6DLL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E320;
      goto LABEL_1228;
    }
  }
  if ((_DWORD)v63)
  {
    if (*(_QWORD *)v15 == 0x7A6972616C616373 && *((_WORD *)v15 + 4) == 29285)
    {
      v90 = (_QWORD *)operator new();
      *v90 = &off_1E818E360;
      *((_DWORD *)v90 + 2) = 0;
      goto LABEL_1229;
    }
  }
  if (v16 == 30)
  {
    v254 = *(_QWORD *)v15 == 0x6574617261706573 && *((_QWORD *)v15 + 1) == 0x6F2D74736E6F632DLL;
    v255 = v254 && *((_QWORD *)v15 + 2) == 0x72662D7465736666;
    if (v255 && *(_QWORD *)(v15 + 22) == 0x7065672D6D6F7266)
    {
      v90 = (_QWORD *)operator new();
      v316 = &off_1E818E3A0;
LABEL_1208:
      *v90 = v316;
      *((_BYTE *)v90 + 8) = 0;
      goto LABEL_1229;
    }
  }
  if (v71)
  {
    if (*(_DWORD *)v15 != 1885561715)
    {
      if (*(_DWORD *)v15 == 1802398067)
      {
        v90 = (_QWORD *)operator new();
        v114 = &off_1E818E3E0;
        goto LABEL_1228;
      }
      goto LABEL_877;
    }
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8190C10;
LABEL_1227:
    v114 = (uint64_t (**)())(v91 + 16);
    goto LABEL_1228;
  }
LABEL_877:
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x746365762D706C73 && *(_QWORD *)(v15 + 6) == 0x72657A69726F7463)
    {
      v419 = 0;
      v417 = 0u;
      v418 = 0u;
      v415 = 0u;
      v416 = 0u;
      v413 = 0u;
      v414 = 0u;
      v411 = 0u;
      v412 = 0u;
      memset(v410, 0, sizeof(v410));
      sub_1C62E4C3C((uint64_t)&v384, (__int128 *)v410);
      sub_1C62E4494();
      v317 = v384;
      *(_QWORD *)&v384 = 0;
      if (v317)
        (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
      sub_1C62EA8E4((uint64_t)&v416 + 8);
      sub_1C62EA8E4((uint64_t)&v413 + 8);
      goto LABEL_1233;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1920167027)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818E420;
    goto LABEL_1228;
  }
  if (v66)
  {
    v258 = *(_QWORD *)v15 == 0x74616C7563657073 && *((_QWORD *)v15 + 1) == 0x636578652D657669;
    if (v258 && *(_QWORD *)(v15 + 13) == 0x6E6F697475636578)
    {
      v318 = byte_1ED836950;
      v90 = (_QWORD *)operator new();
      *v90 = &unk_1E8190DE0;
      v90[1] = v318;
      v90[2] = 0;
      goto LABEL_1229;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1634693747)
  {
    bzero(&v384, 0x2C0uLL);
    v387 = (uint64_t)v388 + 8;
    DWORD1(v388[0]) = 16;
    v391 = v393;
    v398 = 0u;
    HIDWORD(v392) = 8;
    v399 = 0;
    v400 = v402;
    v401 = 16;
    memset(&v402[128], 0, 44);
    v403 = v405;
    v404 = 2;
    v405[1] = 0u;
    v406 = 0;
    v407 = &v409;
    v408 = 2;
    v319 = (void **)operator new();
    sub_1C62F9A94((uint64_t)v410, &v384);
    *v319 = &unk_1E8190720;
    sub_1C62F9A94((uint64_t)(v319 + 1), (__int128 *)v410);
    v438 = (uint64_t)v319;
    LOWORD(v439) = 0;
    sub_1C5A55934((uint64_t)v410);
    sub_1C62E4494();
    v320 = v438;
    v438 = 0;
    if (v320)
      (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
    sub_1C5A55934((uint64_t)&v384);
    goto LABEL_1233;
  }
  if (v30)
  {
    v260 = *(_QWORD *)v15 == 0x63672D7069727473 && *((_QWORD *)v15 + 1) == 0x7461636F6C65722DLL;
    if (v260 && *((_WORD *)v15 + 8) == 29541)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E460;
      goto LABEL_1228;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x7275746375727473 && *(_QWORD *)(v15 + 6) == 0x676663657A697275)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E4A0;
      goto LABEL_1228;
    }
  }
  if (v70)
  {
    if (*(_QWORD *)v15 == 0x6C6C61636C696174 && *((_DWORD *)v15 + 2) == 1835625573)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8190F50;
      goto LABEL_1227;
    }
  }
  if (v65)
  {
    if (*(_QWORD *)v15 == 0x6F6C2D7966696E75 && *((_QWORD *)v15 + 1) == 0x73746978652D706FLL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E4E0;
      goto LABEL_1228;
    }
  }
  if (v64)
  {
    if (*(_QWORD *)v15 == 0x632D726F74636576 && *(_QWORD *)(v15 + 6) == 0x656E69626D6F632DLL)
    {
      v90 = (_QWORD *)operator new();
      v316 = (uint64_t (**)())&unk_1E8190FA0;
      goto LABEL_1208;
    }
  }
  if (v16 == 6 && *(_DWORD *)v15 == 1769104758 && *((_WORD *)v15 + 2) == 31078)
  {
    v90 = (_QWORD *)operator new();
    *v90 = &off_1E818E520;
    *((_BYTE *)v90 + 8) = 1;
    goto LABEL_1229;
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x643C796669726576 && *(_QWORD *)(v15 + 7) == 0x3E656572746D6F64)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E560;
      goto LABEL_1228;
    }
  }
  if (v16 == 13)
  {
    if (*(_QWORD *)v15 == 0x6C3C796669726576 && *(_QWORD *)(v15 + 5) == 0x3E73706F6F6C3C79)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E5A0;
      goto LABEL_1228;
    }
  }
  else if (v16 == 17)
  {
    v273 = *(_QWORD *)v15 == 0x6D3C796669726576 && *((_QWORD *)v15 + 1) == 0x61737379726F6D65;
    if (v273 && v15[16] == 62)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E5E0;
      goto LABEL_1228;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x723C796669726576 && *(_QWORD *)(v15 + 7) == 0x3E736E6F69676572)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E620;
      goto LABEL_1228;
    }
  }
  if (v16 == 20)
  {
    if (*(_QWORD *)v15 != 0x733C796669726576
      || *((_QWORD *)v15 + 1) != 0x746E696F70656661
      || *((_DWORD *)v15 + 4) != 1047685421)
    {
      goto LABEL_994;
    }
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818E660;
LABEL_1228:
    *v90 = v114;
    goto LABEL_1229;
  }
  if (v16 == 24)
  {
    v278 = *(_QWORD *)v15 == 0x733C796669726576 && *((_QWORD *)v15 + 1) == 0x76652D72616C6163;
    if (v278 && *((_QWORD *)v15 + 2) == 0x3E6E6F6974756C6FLL)
    {
      v90 = (_QWORD *)operator new();
      v114 = &off_1E818E6A0;
      goto LABEL_1228;
    }
  }
LABEL_994:
  if (v119 && *(_QWORD *)v15 == 0x6766632D77656976)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818E6E0;
    goto LABEL_1228;
  }
  if (v16 == 13 && *(_QWORD *)v15 == 0x6766632D77656976 && *(_QWORD *)(v15 + 5) == 0x796C6E6F2D676663)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818E720;
    goto LABEL_1228;
  }
  if (v119 && *(_QWORD *)v15 == 0x7473696F68736C74)
  {
    v411 = 0u;
    v412 = 0u;
    memset(v410, 0, sizeof(v410));
    sub_1C62E4D7C((uint64_t)&v384, (__int128 *)v410);
    sub_1C62E4494();
    v321 = v384;
    *(_QWORD *)&v384 = 0;
    if (v321)
      (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
    sub_1C62EA928((uint64_t)&v410[2]);
    goto LABEL_1233;
  }
  if (v16 == 17)
  {
    v281 = *(_QWORD *)v15 == 0x726F66736E617274 && *((_QWORD *)v15 + 1) == 0x6E696E7261772D6DLL;
    if (v281 && v15[16] == 103)
    {
      v90 = (_QWORD *)operator new();
      v91 = (char *)&unk_1E8191B50;
      goto LABEL_1227;
    }
  }
  if (v71 && *(_DWORD *)v15 == 1851880308)
  {
    v90 = (_QWORD *)operator new();
    v114 = &off_1E818E7A0;
    goto LABEL_1228;
  }
  if (v16 != 7)
  {
    if (sub_1C5A3C044((char *)v15, v16, "early-cse", 9uLL))
    {
      if (v16 >= 9)
      {
        if (*(_QWORD *)v15 != 0x73632D796C726165 || v15[8] != 101)
          goto LABEL_1035;
        v15 += 9;
        v16 -= 9;
      }
      if (!v16)
      {
        v287 = 0;
LABEL_1182:
        sub_1C5A551F4((uint64_t)v410, (uint64_t)v15, v287, "memssa", 6uLL, (uint64_t)"EarlyCSE", 8);
        if (((uint64_t)v410[1] & 1) != 0)
          goto LABEL_272;
        v297 = (char)v410[0];
        v298 = operator new();
        v308 = (char *)&unk_1E8190750;
        goto LABEL_1184;
      }
LABEL_1035:
      v285 = v15 + 1;
      v286 = *v15;
      v287 = v16 - (v286 == 60);
      if (v286 == 60)
      {
        ++v15;
        if (v287)
        {
          if (v285[v287 - 1] == 62 && v287 >= v287 - 1)
            --v287;
        }
      }
      goto LABEL_1182;
    }
    if (sub_1C5A3C044((char *)v15, v16, "ee-instrument", 0xDuLL))
    {
      if (v16 >= 0xD)
      {
        if (*(_QWORD *)v15 != 0x7274736E692D6565 || *(_QWORD *)(v15 + 5) != 0x746E656D75727473)
          goto LABEL_1099;
        v15 += 13;
        v16 -= 13;
      }
      if (!v16)
      {
        v294 = 0;
LABEL_1104:
        sub_1C5A551F4((uint64_t)v410, (uint64_t)v15, v294, "post-inline", 0xBuLL, (uint64_t)"EntryExitInstrumenter", 21);
        if (((uint64_t)v410[1] & 1) != 0)
          goto LABEL_272;
        v297 = (char)v410[0];
        v298 = operator new();
        v299 = &off_1E818E7E0;
        goto LABEL_1185;
      }
LABEL_1099:
      v295 = v15 + 1;
      v296 = *v15;
      v294 = v16 - (v296 == 60);
      if (v296 == 60)
      {
        ++v15;
        if (v294)
        {
          if (v295[v294 - 1] == 62 && v294 >= v294 - 1)
            --v294;
        }
      }
      goto LABEL_1104;
    }
    if (!sub_1C5A3C044((char *)v15, v16, "lower-matrix-intrinsics", 0x17uLL))
      goto LABEL_1155;
    if (v16 >= 0x17)
    {
      if (*(_QWORD *)v15 != 0x616D2D7265776F6CLL
        || *((_QWORD *)v15 + 1) != 0x746E692D78697274
        || *(_QWORD *)(v15 + 15) != 0x736369736E697274)
      {
        goto LABEL_1148;
      }
      v15 += 23;
      v16 -= 23;
    }
    if (!v16)
    {
      v305 = 0;
LABEL_1153:
      sub_1C5A551F4((uint64_t)v410, (uint64_t)v15, v305, "minimal", 7uLL, (uint64_t)"LowerMatrixIntrinsics", 21);
      if (((uint64_t)v410[1] & 1) != 0)
        goto LABEL_272;
      v297 = (char)v410[0];
      v298 = operator new();
      v308 = (char *)&unk_1E8191E10;
      goto LABEL_1184;
    }
LABEL_1148:
    v306 = v15 + 1;
    v307 = *v15;
    v305 = v16 - (v307 == 60);
    if (v307 == 60)
    {
      ++v15;
      if (v305)
      {
        if (v306[v305 - 1] == 62 && v305 >= v305 - 1)
          --v305;
      }
    }
    goto LABEL_1153;
  }
  if (*(_DWORD *)v15 == 1886217581 && *(_DWORD *)(v15 + 3) == 1718579824)
  {
    v90 = (_QWORD *)operator new();
    v91 = (char *)&unk_1E8191A10;
    goto LABEL_1227;
  }
  if (sub_1C5A3C044((char *)v15, 7uLL, "early-cse", 9uLL))
  {
    v16 = 7;
    goto LABEL_1035;
  }
  if (sub_1C5A3C044((char *)v15, 7uLL, "ee-instrument", 0xDuLL))
  {
    v16 = 7;
    goto LABEL_1099;
  }
  if (sub_1C5A3C044((char *)v15, 7uLL, "lower-matrix-intrinsics", 0x17uLL))
  {
    v16 = 7;
    goto LABEL_1148;
  }
LABEL_1155:
  if (sub_1C5A3C044((char *)v15, v16, "loop-unroll", 0xBuLL))
  {
    sub_1C5A3C174((uint64_t)v410, v15, v16, v309);
    if ((v411 & 1) != 0)
      goto LABEL_272;
    v298 = operator new();
    *(_QWORD *)v298 = &unk_1E8191B20;
    *(_OWORD *)(v298 + 8) = *(_OWORD *)v410;
    *(_OWORD *)(v298 + 20) = *(_OWORD *)((char *)&v410[1] + 4);
    goto LABEL_1186;
  }
  if (sub_1C5A3C044((char *)v15, v16, "msan", 4uLL))
  {
    sub_1C5A3C6C8((uint64_t)v410, v15, v16);
    if (((uint64_t)v410[2] & 1) != 0)
      goto LABEL_272;
    v314 = v410[0];
    v315 = (int)v410[1];
    v298 = operator new();
    *(_QWORD *)v298 = &off_1E818E820;
    *(_QWORD *)(v298 + 8) = v314;
    *(_DWORD *)(v298 + 16) = v315;
    goto LABEL_1186;
  }
  if (sub_1C5A3C044((char *)v15, v16, "simplifycfg", 0xBuLL))
  {
    sub_1C5A3CAC0((uint64_t)v410, v15, v16);
    if (((uint64_t)v410[3] & 1) != 0)
      goto LABEL_272;
    v384 = *(_OWORD *)v410;
    *(void **)&v385 = v410[2];
    sub_1C5C48FA4((uint64_t)&v384);
    v322 = operator new();
    *(_OWORD *)(v322 + 8) = v384;
    *(_QWORD *)(v322 + 24) = v385;
    *(_QWORD *)v322 = &unk_1E81907A0;
    v438 = v322;
    LOWORD(v439) = 0;
    sub_1C62E4494();
    v203 = (void *)v438;
    v438 = 0;
    if (v203)
      goto LABEL_643;
    goto LABEL_644;
  }
  if (sub_1C5A3C044((char *)v15, v16, "loop-vectorize", 0xEuLL))
  {
    sub_1C5A3D1A4((uint64_t)v410, v15, v16);
    if (((uint64_t)v410[1] & 1) != 0)
      goto LABEL_272;
    v323 = (uint64_t)v410[0] & 1 | (byte_1ED838890 == 0);
    if (byte_1ED838950)
      v324 = BYTE1(v410[0]) & 1;
    else
      v324 = 1;
    v298 = operator new();
    *(_BYTE *)(v298 + 8) = v323;
    *(_BYTE *)(v298 + 9) = v324;
    *(_QWORD *)v298 = &unk_1E8191AA0;
    goto LABEL_1186;
  }
  if (sub_1C5A3C044((char *)v15, v16, "mldst-motion", 0xCuLL))
  {
    sub_1C5A3C0CC((uint64_t)v410, (uint64_t)v15, v16);
    if (((uint64_t)v410[1] & 1) != 0)
      goto LABEL_272;
    v297 = (char)v410[0];
    v298 = operator new();
    v308 = (char *)&unk_1E8190FD0;
LABEL_1184:
    v299 = (uint64_t (**)())(v308 + 16);
LABEL_1185:
    *(_QWORD *)v298 = v299;
    *(_BYTE *)(v298 + 8) = v297;
LABEL_1186:
    *(_QWORD *)&v384 = v298;
    WORD4(v384) = 0;
    sub_1C62E4494();
    goto LABEL_642;
  }
  if (sub_1C5A3C044((char *)v15, v16, "gvn", 3uLL))
  {
    sub_1C5A3D71C((uint64_t)&v438, v15, v16);
    if ((v440 & 1) != 0)
    {
      v117 = (void *)v438;
      goto LABEL_273;
    }
    sub_1C62EA96C((uint64_t)&v384, v438, v439);
    v363 = operator new();
    sub_1C62FAD50((uint64_t)v410, &v384);
    *(_QWORD *)v363 = &unk_1E8191060;
    sub_1C62FAD50(v363 + 8, (__int128 *)v410);
    LOWORD(v382) = 0;
    sub_1C5A55A68((uint64_t)v410);
    sub_1C62E4494();
    v381 = 0;
    if (v363)
      (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
    sub_1C5A55A68((uint64_t)&v384);
    goto LABEL_644;
  }
  v325 = sub_1C5A3C044((char *)v15, v16, "print<stack-lifetime>", 0x15uLL);
  if (v325)
  {
    sub_1C5A3DAFC((uint64_t)v410, v15, v16);
    if (((uint64_t)v410[1] & 1) != 0)
      goto LABEL_272;
    v327 = LODWORD(v410[0]);
    v328 = llvm::dbgs(v326);
    v298 = operator new();
    *(_QWORD *)v298 = &off_1E818E860;
    *(_QWORD *)(v298 + 8) = v327;
    *(_QWORD *)(v298 + 16) = v328;
    goto LABEL_1186;
  }
  if (v377)
  {
    if (*(_QWORD *)v15 == 0x616C662D706F6F6CLL && *((_DWORD *)v15 + 2) == 1852142708)
      goto LABEL_1425;
  }
  if (v380)
  {
    if (*(_QWORD *)v15 == 0x746E692D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x65676E6168637265)
    {
      sub_1C62E3648((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v16 == 19)
  {
    v331 = *(_QWORD *)v15 == 0x726E752D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x2D646E612D6C6C6FLL;
    if (v331 && *(_QWORD *)(v15 + 11) == 0x6D616A2D646E612DLL)
    {
      LODWORD(v381) = 2;
      sub_1C62E375C((int *)&v381, 0, 0, 0, (uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v378)
  {
    if (*(_QWORD *)v15 == 0x6F6C2D706F2D6F6ELL && *(_QWORD *)(v15 + 6) == 0x7473656E706F6F6CLL)
    {
      sub_1C5A3DE70((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v377)
  {
    if (*(_QWORD *)v15 == 0x72662D6E6F6E6163 && *((_DWORD *)v15 + 2) == 1702520165)
    {
      sub_1C62E3890((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1734632493)
  {
    sub_1C62E3900((uint64_t)v410);
    goto LABEL_1455;
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69 && *(_QWORD *)(v15 + 7) == 0x3E6C6C613C657461)
    {
      sub_1C62E3970((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v379)
  {
    if (*(_QWORD *)v15 == 0x6964692D706F6F6CLL && *((_WORD *)v15 + 4) == 28015)
    {
      sub_1C62E39E0((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v16 == 17)
  {
    v338 = *(_QWORD *)v15 == 0x736E692D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x66696C706D697374;
    if (v338 && v15[16] == 121)
    {
      sub_1C62E3A54((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x746F722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x657461746F722D70)
    {
      LOWORD(v381) = 1;
      sub_1C62E3AC8((__int16 *)&v381, 0, 0, 0, (uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v379)
  {
    if (*(_QWORD *)v15 == 0x6F6C2D706F2D6F6ELL && *((_WORD *)v15 + 4) == 28783)
    {
      v370 = (_QWORD *)operator new();
      *v370 = &off_1E818E960;
LABEL_1437:
      v410[0] = v370;
      memset(&v410[1], 0, 24);
      LODWORD(v411) = 0;
      sub_1C62E72F8();
      sub_1C62E77F0();
      sub_1C5A43F70((uint64_t)&v384, (__int128 *)v410);
      sub_1C62E4494();
      v372 = v384;
      *(_QWORD *)&v384 = 0;
      if (v372)
        (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
      v438 = (uint64_t)&v410[1];
      goto LABEL_1458;
    }
  }
  if (v181)
  {
    if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
    {
      v371 = llvm::dbgs((llvm *)v325);
      v370 = (_QWORD *)operator new();
      *v370 = off_1E818E9A0;
      v370[1] = v371;
      v370[2] = 0;
      *((_BYTE *)v370 + 39) = 0;
      goto LABEL_1437;
    }
  }
  if (v16 == 13 && *(_QWORD *)v15 == 0x6C65642D706F6F6CLL && *(_QWORD *)(v15 + 5) == 0x6E6F6974656C6564)
  {
    sub_1C62E3B74((uint64_t)v410);
    goto LABEL_1455;
  }
  if (v380)
  {
    if (*(_QWORD *)v15 == 0x6D69732D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6766637966696C70)
    {
      sub_1C62E3BE8((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x6465722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6563756465722D70)
    {
      sub_1C62E3C5C((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 1986293353 && *(_DWORD *)(v15 + 3) == 1936875894)
  {
    LOBYTE(v381) = 1;
    sub_1C62E3CCC((uint64_t)v410, (char *)&v381);
    goto LABEL_1455;
  }
  if (v380)
  {
    if (*(_QWORD *)v15 == 0x726E752D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6C6C75662D6C6C6FLL)
    {
      LODWORD(v381) = 2;
      WORD2(v381) = 0;
      sub_1C62E3D4C((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
  }
  if (v16 == 17)
  {
    v348 = *(_QWORD *)v15 == 0x63612D746E697270 && *((_QWORD *)v15 + 1) == 0x666E692D73736563;
    if (v348 && v15[16] == 111)
    {
      v381 = llvm::dbgs((llvm *)v325);
      sub_1C62E3DC8((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
  }
  if (v379)
  {
    if (*(_QWORD *)v15 == 0x64643C746E697270 && *((_WORD *)v15 + 4) == 15975)
    {
      v381 = llvm::dbgs((llvm *)v325);
      sub_1C62E3E40((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x76693C746E697270 && *(_QWORD *)(v15 + 7) == 0x3E73726573752D76)
    {
      v381 = llvm::dbgs((llvm *)v325);
      sub_1C62E3EB8((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
    if (*(_QWORD *)v15 == 0x6F6C3C746E697270 && *(_QWORD *)(v15 + 7) == 0x3E7473656E706F6FLL)
    {
      v381 = llvm::dbgs((llvm *)v325);
      sub_1C62E3F30((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
  }
  if (v16 == 22)
  {
    v353 = *(_QWORD *)v15 == 0x6F6C3C746E697270 && *((_QWORD *)v15 + 1) == 0x65686361632D706FLL;
    if (v353 && *(_QWORD *)(v15 + 14) == 0x3E74736F632D6568)
    {
      v381 = llvm::dbgs((llvm *)v325);
      sub_1C62E3FA8((uint64_t)v410, (uint64_t *)&v381);
      goto LABEL_1455;
    }
  }
  if (v380)
  {
    if (*(_QWORD *)v15 == 0x6572702D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6E6F697461636964)
    {
      sub_1C62E4020((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v378)
  {
    if (*(_QWORD *)v15 == 0x69772D6472617567 && *(_QWORD *)(v15 + 6) == 0x676E696E65646977)
    {
      sub_1C62E4090((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v380)
  {
    if (*(_QWORD *)v15 == 0x756F622D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x74696C70732D646ELL)
    {
      sub_1C62E4100((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x7265722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6C6C6F7265722D70)
    {
      sub_1C62E4170((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (v16 == 20)
  {
    v359 = *(_QWORD *)v15 == 0x7265762D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x2D676E696E6F6973;
    if (v359 && *((_DWORD *)v15 + 4) == 1835231596)
    {
      sub_1C62E41E0((uint64_t)v410);
      goto LABEL_1455;
    }
  }
  if (sub_1C5A3C044((char *)v15, v16, "simple-loop-unswitch", 0x14uLL))
  {
    sub_1C5A3DFF4((uint64_t)&v384, (uint64_t)v15, v16);
    if ((BYTE8(v384) & 1) == 0)
    {
      LOWORD(v383) = v384 & 0x101;
      sub_1C62E4250((uint64_t)v410, (__int16 *)&v383);
      sub_1C5A43F70((uint64_t)&v438, (__int128 *)v410);
      sub_1C62E4494();
      v361 = v438;
      v438 = 0;
      if (v361)
        (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
      v381 = (llvm *)&v410[1];
      v362 = (void ***)&v381;
      goto LABEL_1463;
    }
LABEL_1414:
    v117 = (void *)v384;
    goto LABEL_273;
  }
  if (sub_1C5A3C044((char *)v15, v16, "licm", 4uLL))
  {
    sub_1C5A3E318((uint64_t)&v384, v15, v16, "licm", 4uLL);
    if ((v385 & 1) != 0)
      goto LABEL_1414;
    v381 = (llvm *)v384;
    v382 = DWORD2(v384);
    sub_1C62E42D0((uint64_t *)&v381, 0, 0, 0, (uint64_t)v410);
LABEL_1460:
    sub_1C5A43F70((uint64_t)&v438, (__int128 *)v410);
    sub_1C62E4494();
    v374 = v438;
    v438 = 0;
    if (v374)
      (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
    v383 = &v410[1];
    v362 = &v383;
LABEL_1463:
    sub_1C4764BBC(v362);
    v203 = v410[0];
    v410[0] = 0;
    if (!v203)
      goto LABEL_644;
    goto LABEL_643;
  }
  if (sub_1C5A3C044((char *)v15, v16, "lnicm", 5uLL))
  {
    sub_1C5A3E318((uint64_t)&v384, v15, v16, "lnicm", 5uLL);
    if ((v385 & 1) != 0)
      goto LABEL_1414;
    v381 = (llvm *)v384;
    v382 = DWORD2(v384);
    sub_1C62E4380((uint64_t)v410);
    goto LABEL_1460;
  }
  v364 = *(unsigned int *)(v10 + 1512);
  if ((_DWORD)v364)
  {
    v365 = (_QWORD *)(*(_QWORD *)(v10 + 1504) + 24);
    v366 = 32 * v364;
    do
    {
      v367 = *(_QWORD *)(v8 + 16);
      v368 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v8 + 24) - v367) >> 3);
      *(_OWORD *)v410 = *(_OWORD *)v8;
      *(_QWORD *)&v384 = v367;
      *((_QWORD *)&v384 + 1) = v368;
      if (!*v365)
        goto LABEL_1424;
      if ((*(unsigned int (**)(_QWORD, void **, uint64_t, __int128 *))(*(_QWORD *)*v365 + 48))(*v365, v410, v9, &v384))
      {
        goto LABEL_1233;
      }
      v365 += 4;
      v366 -= 32;
    }
    while (v366);
  }
  v410[0] = "unknown cgscc pass '{0}'";
  v410[1] = (void *)24;
  v410[2] = &v412;
  v410[3] = (void *)1;
  *(_QWORD *)&v411 = &unk_1E818C130;
  *((_QWORD *)&v411 + 1) = v8;
  *(_QWORD *)&v412 = &v411;
  sub_1C4DCAF2C((uint64_t)v410, &v384);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v438 = 3;
  v439 = qword_1ED836B58[0];
  sub_1C5A3BD58(v12, (uint64_t)&v384, &v438);
  if (SBYTE7(v385) < 0)
  {
    v53 = (void *)v384;
    goto LABEL_63;
  }
}

__n128 sub_1C5A43D24@<Q0>(__int128 *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  _QWORD v12[3];
  void **v13;

  v8 = operator new();
  v9 = *((_QWORD *)a1 + 2);
  v10 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)v8 = &unk_1E81911E0;
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 24) = v9;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 9) = a3;
  v13 = (void **)v12;
  sub_1C4764BBC(&v13);
  return result;
}

uint64_t sub_1C5A43DC0(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2 - 7;
  if (a2 >= 7)
  {
    v18 = v4;
    v19 = v5;
    v10 = *a1 == 1769366884 && *(_DWORD *)((char *)a1 + 3) == 1014264425;
    if (v10 && a2 >= 8 && *((_BYTE *)a1 + a2 - 1) == 62)
    {
      v15 = 0;
      v16 = (char *)a1 + 7;
      if (v6 >= a2 - 8)
        v6 = a2 - 8;
      v17 = v6;
      llvm::consumeSignedInteger((llvm *)&v16, 0, &v15, a4);
      if (v17)
        v12 = 1;
      else
        v12 = v11;
      if (v15 != (int)v15)
        v12 = 1;
      if (v12)
        v8 = 0;
      else
        v8 = v15;
      if (v8 < 0)
        v12 = 1;
      v9 = v8 & 0xFFFFFF00;
      v8 = v8;
      v13 = v12 == 0;
      if (v12)
      {
        v9 = 0;
        v8 = 0;
      }
      v7 = 0x100000000;
      if (!v13)
        v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v7 | v9 | v8;
}

uint64_t sub_1C5A43EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10[351];
  uint64_t v11;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v11 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)operator new();
  sub_1C62F435C((uint64_t)v10, v6);
  *v8 = &off_1E818D320;
  sub_1C62F435C((uint64_t)(v8 + 1), v10);
  *(_QWORD *)v7 = v8;
  *(_WORD *)(v7 + 8) = 0;
  return sub_1C62EA5E0((uint64_t)v10);
}

uint64_t sub_1C5A43F70(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _QWORD v9[3];
  int v10;
  void **v11;

  v4 = operator new();
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v10 = *((_DWORD *)a2 + 8);
  v7 = v10;
  *(_QWORD *)v4 = &unk_1E8190BA0;
  v9[0] = 0;
  *(_OWORD *)(v4 + 8) = v5;
  *(_OWORD *)(v4 + 24) = v6;
  v9[1] = 0;
  v9[2] = 0;
  *(_DWORD *)(v4 + 40) = v7;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = 0;
  v11 = (void **)v9;
  sub_1C4764BBC(&v11);
  return 0;
}

void llvm::PassBuilder::parseFunctionPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void ***v22;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v38;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned __int32 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59;
  int v66;
  int v67;
  _BOOL4 v101;
  int v102;
  BOOL v128;
  int v134;
  BOOL v137;
  BOOL v138;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  BOOL v152;
  BOOL v153;
  BOOL v158;
  BOOL v160;
  BOOL v163;
  BOOL v168;
  BOOL v169;
  BOOL v171;
  BOOL v173;
  int v178;
  int v179;
  int v180;
  int v181;
  _BOOL4 v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  BOOL v189;
  BOOL v191;
  BOOL v193;
  BOOL v194;
  BOOL v196;
  BOOL v198;
  BOOL v199;
  BOOL v201;
  BOOL v203;
  BOOL v206;
  uint64_t v215;
  int v218;
  BOOL v221;
  BOOL v225;
  BOOL v226;
  BOOL v228;
  BOOL v232;
  BOOL v235;
  int v240;
  BOOL v241;
  BOOL v244;
  BOOL v254;
  int v257;
  BOOL v259;
  uint64_t v262;
  int64x2_t v263;
  BOOL v269;
  BOOL v271;
  _QWORD *v274;
  uint64_t (**v275)();
  BOOL v287;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v298;
  char *v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  char v306;
  int v307;
  int v316;
  BOOL v317;
  BOOL v328;
  BOOL v330;
  BOOL v332;
  BOOL v334;
  BOOL v338;
  BOOL v341;
  BOOL v343;
  BOOL v345;
  BOOL v347;
  BOOL v349;
  BOOL v351;
  BOOL v353;
  BOOL v354;
  BOOL v356;
  BOOL v357;
  BOOL v361;
  BOOL v363;
  BOOL v366;
  BOOL v368;
  BOOL v369;
  BOOL v372;
  uint64_t v377;
  uint64_t v378;
  BOOL v380;
  BOOL v383;
  BOOL v384;
  BOOL v387;
  BOOL v388;
  BOOL v391;
  BOOL v393;
  BOOL v405;
  BOOL v407;
  BOOL v410;
  int v412;
  int v413;
  int v414;
  unsigned __int8 *v417;
  int v418;
  unint64_t v419;
  unsigned __int8 *v421;
  int v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _BOOL4 v427;
  unsigned __int8 *v430;
  int v431;
  unint64_t v432;
  uint64_t v433;
  llvm *v434;
  uint64_t v435;
  uint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t i;
  char *v440;
  _BOOL8 v441;
  llvm *v442;
  uint64_t v443;
  llvm *v444;
  BOOL v447;
  int v452;
  uint64_t v456;
  BOOL v471;
  BOOL v477;
  void **p_p;
  unint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  llvm *v487;
  int v488;
  _QWORD *v489;
  uint64_t *v490;
  int v491;
  uint64_t v492;
  int v493;
  int v494;
  int v495;
  _BOOL4 v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  char v504;
  int v505;
  int v506;
  char v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *__p;
  unint64_t v513;
  char v514;
  unint64_t *v515;
  __n128 v516[2];
  __int128 v517;
  _OWORD v518[5];
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 *v523;
  __int128 *v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  int v531;
  _BYTE *v532;
  int v533;
  _BYTE v534[176];
  _OWORD *v535;
  int v536;
  _OWORD v537[2];
  int v538;
  uint64_t *v539;
  int v540;
  uint64_t v541;
  __int128 v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  _DWORD v548[820];
  __int128 v549;
  int v550;
  __int128 v551;
  _BYTE v552[28];
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _BYTE v556[32];
  uint64_t v557;
  uint64_t v558;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = (_QWORD *)v6;
  v9 = v5;
  v10 = v4;
  v12 = v11;
  v558 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(v6 + 16);
  v14 = *(_QWORD *)(v6 + 24);
  v15 = *(unsigned __int8 **)v6;
  v16 = *(_QWORD *)(v6 + 8);
  if (v13 != v14)
  {
    if (v16 == 4)
    {
      if (*(_DWORD *)v15 != 1886351212)
        goto LABEL_45;
    }
    else
    {
      if (v16 != 9)
      {
        if (v16 == 8 && *(_QWORD *)v15 == 0x6E6F6974636E7566)
        {
          memset(v516, 0, 24);
          v17 = 40 * ((v14 - v13) / 40);
          while (1)
          {
            llvm::PassBuilder::parseFunctionPass(v10, v516, v13);
            if (*v12)
              break;
            v13 += 40;
            v17 -= 40;
            if (!v17)
            {
              v19 = v516[0].n128_u64[1];
              v18 = (uint64_t *)v516[0].n128_u64[0];
              *v12 = 0;
              if (v18 != (uint64_t *)v19)
              {
                v20 = *(char **)(v9 + 8);
                do
                {
                  if ((unint64_t)v20 >= *(_QWORD *)(v9 + 16))
                  {
                    v20 = sub_1C4D62F9C((char **)v9, v18);
                  }
                  else
                  {
                    v21 = *v18;
                    *v18 = 0;
                    *(_QWORD *)v20 = v21;
                    v20 += 8;
                  }
                  *(_QWORD *)(v9 + 8) = v20;
                  ++v18;
                }
                while (v18 != (uint64_t *)v19);
              }
              *v12 = 0;
              break;
            }
          }
          *(_QWORD *)v556 = v516;
          v22 = (void ***)v556;
LABEL_61:
          sub_1C4764BBC(v22);
          return;
        }
LABEL_45:
        v43 = sub_1C5A3BC6C(*(_DWORD **)v6, *(_QWORD *)(v6 + 8), v6, v7);
        if (HIDWORD(v43))
        {
          v53 = v43;
          memset(v556, 0, 24);
          v54 = 40 * ((v14 - v13) / 40);
          while (1)
          {
            llvm::PassBuilder::parseFunctionPass(v10, v556, v13);
            if (*v12)
              break;
            v13 += 40;
            v54 -= 40;
            if (!v54)
            {
              v55 = *(_QWORD *)&v556[16];
              *v12 = 0;
              v516[0].n128_u32[0] = v53;
              *(__n128 *)((char *)v516 + 8) = *(__n128 *)v556;
              v516[1].n128_u64[1] = v55;
              memset(v556, 0, 24);
              sub_1C62E5018();
              __p = &v516[0].n128_i8[8];
              sub_1C4764BBC((void ***)&__p);
              *v12 = 0;
              break;
            }
          }
          v516[0].n128_u64[0] = (unint64_t)v556;
          v22 = (void ***)v516;
          goto LABEL_61;
        }
        v44 = *(unsigned int *)(v10 + 1672);
        if ((_DWORD)v44)
        {
          v45 = (_QWORD *)(*(_QWORD *)(v10 + 1664) + 24);
          v46 = 32 * v44;
          while (1)
          {
            v47 = v8[2];
            v48 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v47) >> 3);
            v516[0] = *(__n128 *)v8;
            *(_QWORD *)v556 = v47;
            *(_QWORD *)&v556[8] = v48;
            if (!*v45)
              break;
            if ((*(unsigned int (**)(_QWORD, __n128 *, uint64_t, _BYTE *))(*(_QWORD *)*v45 + 48))(*v45, v516, v9, v556))
            {
              goto LABEL_1756;
            }
            v45 += 4;
            v46 -= 32;
            if (!v46)
              goto LABEL_51;
          }
LABEL_1958:
          sub_1C485C2F0();
LABEL_1959:
          sub_1C62E3534((uint64_t)v516);
          goto LABEL_1980;
        }
LABEL_51:
        v516[0].n128_u64[0] = (unint64_t)"invalid use of '{0}' pass as function pipeline";
        v516[0].n128_u64[1] = 46;
        v516[1].n128_u64[0] = (unint64_t)v518;
        v516[1].n128_u64[1] = 1;
        *(_QWORD *)&v517 = &unk_1E818C130;
        *((_QWORD *)&v517 + 1) = v8;
        *(_QWORD *)&v518[0] = &v517;
        sub_1C4DCAF2C((uint64_t)v516, &__p);
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v50 = qword_1ED836B58[0];
        v51 = operator new();
        LOWORD(v557) = 260;
        *(_QWORD *)v556 = &__p;
        *(_QWORD *)v51 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v556, (_QWORD *)(v51 + 8));
        *(_QWORD *)(v51 + 32) = 3;
        *(_QWORD *)(v51 + 40) = v50;
        *(_BYTE *)(v51 + 48) = 1;
        *v12 = v51;
        if (v514 < 0)
        {
          v52 = __p;
LABEL_55:
          operator delete(v52);
          return;
        }
        return;
      }
      if (*(_QWORD *)v15 != 0x73736D2D706F6F6CLL || v15[8] != 97)
        goto LABEL_45;
    }
    v511 = v5;
    v516[0].n128_u64[0] = (unint64_t)v516[1].n128_u64;
    v516[0].n128_u64[1] = 0x600000000;
    LODWORD(v518[1]) = 0;
    memset((char *)&v518[1] + 8, 0, 48);
    v56 = 40 * ((v14 - v13) / 40);
    while (1)
    {
      llvm::PassBuilder::parseLoopPass(v10, (uint64_t)v516, v13, v7, v12);
      if (*v12)
        break;
      v13 += 40;
      v56 -= 40;
      if (!v56)
      {
        v57 = v8[1];
        *v12 = 0;
        v59 = v57 == 9 && *(_QWORD *)*v8 == 0x73736D2D706F6F6CLL && *(_BYTE *)(*v8 + 8) == 97;
        v303 = v8[2];
        v304 = v8[3];
        if (v303 == v304)
        {
          v305 = 0;
          v306 = 0;
        }
        else
        {
          v507 = v59;
          do
          {
            *(_OWORD *)v556 = *(_OWORD *)v303;
            *(_QWORD *)&v556[24] = 0;
            v557 = 0;
            *(_QWORD *)&v556[16] = 0;
            sub_1C5A5E464(&v556[16], *(_OWORD **)(v303 + 16), *(_OWORD **)(v303 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v303 + 24) - *(_QWORD *)(v303 + 16)) >> 3));
            if (*(_QWORD *)&v556[8] == 4)
            {
              v307 = **(_DWORD **)v556;
              __p = &v556[16];
              sub_1C5A59000((void ***)&__p);
              if (v307 == 1835231596)
              {
                v305 = 1;
                goto LABEL_1579;
              }
            }
            else
            {
              __p = &v556[16];
              sub_1C5A59000((void ***)&__p);
            }
            v303 += 40;
          }
          while (v303 != v304);
          v305 = 0;
LABEL_1579:
          v424 = v8[2];
          v425 = v8[3];
          if (v424 == v425)
          {
            v306 = 0;
            v59 = v507;
          }
          else
          {
            v504 = v305;
            do
            {
              *(_OWORD *)v556 = *(_OWORD *)v424;
              *(_QWORD *)&v556[24] = 0;
              v557 = 0;
              *(_QWORD *)&v556[16] = 0;
              sub_1C5A5E464(&v556[16], *(_OWORD **)(v424 + 16), *(_OWORD **)(v424 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v424 + 24) - *(_QWORD *)(v424 + 16)) >> 3));
              if (*(_QWORD *)&v556[8] == 16)
              {
                v427 = **(_QWORD **)v556 != 0x6572702D706F6F6CLL
                    || *(_QWORD *)(*(_QWORD *)v556 + 8) != 0x6E6F697461636964;
                __p = &v556[16];
                sub_1C5A59000((void ***)&__p);
                if (!v427)
                {
                  v306 = 1;
                  goto LABEL_1660;
                }
              }
              else
              {
                __p = &v556[16];
                sub_1C5A59000((void ***)&__p);
              }
              v424 += 40;
            }
            while (v424 != v425);
            v306 = 0;
LABEL_1660:
            v305 = v504;
            v59 = v507;
          }
        }
        sub_1C62E4F10((uint64_t)v516, v59, v305, v306, (uint64_t)v556);
        sub_1C62E4E40(v511, (__n128 *)v556);
        __p = &v556[8];
        sub_1C4764BBC((void ***)&__p);
        v433 = *(_QWORD *)v556;
        *(_QWORD *)v556 = 0;
        if (v433)
          (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
        *v12 = 0;
        break;
      }
    }
    *(_QWORD *)v556 = &v518[3];
    sub_1C4764BBC((void ***)v556);
    *(_QWORD *)v556 = (char *)&v518[1] + 8;
    sub_1C4764BBC((void ***)v556);
    if ((__n128 *)v516[0].n128_u64[0] != &v516[1])
      free((void *)v516[0].n128_u64[0]);
    return;
  }
  v510 = v5;
  if (v16 != 11)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    switch(v16)
    {
      case 0xEuLL:
        if (*(_QWORD *)v15 == 0x6164696C61766E69 && *(_QWORD *)(v15 + 6) == 0x3E61613C65746164)
        {
          sub_1C62E50EC();
        }
        else if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 6) == 0x3E73706F6F6C3C65)
        {
          sub_1C62E55FC();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x6164696C61766E69 || *(_QWORD *)(v15 + 6) != 0x3E61643C65746164)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v502 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v31 = 1;
            goto LABEL_370;
          }
          sub_1C62E5750();
        }
        goto LABEL_1756;
      case 0xFuLL:
        if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 7) == 0x3E73656C6379633CLL)
        {
          sub_1C62E52CC();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x3C65726975716572 || *(_QWORD *)(v15 + 7) != 0x3E7065646D656D3CLL)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v502 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v28 = 1;
            goto LABEL_370;
          }
          sub_1C62E581C();
        }
        goto LABEL_1756;
      case 0x10uLL:
        if (*(_QWORD *)v15 != 0x3C65726975716572 || *((_QWORD *)v15 + 1) != 0x3E656572746D6F64)
        {
          v36 = 0;
          v38 = 0;
          v37 = 1;
          goto LABEL_286;
        }
        sub_1C62E5354();
        goto LABEL_1756;
      case 0x11uLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69 || *((_QWORD *)v15 + 1) != 0x73706F6F6C3C6574 || v15[16] != 62)
        {
          v35 = 0;
          v34 = 0;
          v33 = 0;
          v32 = 0;
          v29 = 0;
          v38 = 0;
          v26 = 0;
          v27 = 1;
          goto LABEL_336;
        }
        sub_1C62E5640();
        goto LABEL_1756;
      case 0x12uLL:
        if (*(_QWORD *)v15 != 0x6164696C61766E69
          || *((_QWORD *)v15 + 1) != 0x656C6379633C6574
          || *((_WORD *)v15 + 8) != 15987)
        {
          v37 = 0;
          v38 = 0;
          v36 = 1;
          goto LABEL_286;
        }
        sub_1C62E5310();
        goto LABEL_1756;
      case 0x13uLL:
        if (*(_QWORD *)v15 == 0x3C65726975716572
          && *((_QWORD *)v15 + 1) == 0x72662D6B636F6C62
          && *(_QWORD *)(v15 + 11) == 0x3E716572662D6B63)
        {
          sub_1C62E51BC();
        }
        else if (*(_QWORD *)v15 == 0x6164696C61766E69
               && *((_QWORD *)v15 + 1) == 0x72746D6F643C6574
               && *(_QWORD *)(v15 + 11) == 0x3E656572746D6F64)
        {
          sub_1C62E5398();
        }
        else if (*(_QWORD *)v15 == 0x3C65726975716572
               && *((_QWORD *)v15 + 1) == 0x756C61762D696870
               && *(_QWORD *)(v15 + 11) == 0x3E7365756C61762DLL)
        {
          sub_1C62E592C();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x6164696C61766E69
            || *((_QWORD *)v15 + 1) != 0x6F696765723C6574
            || *(_QWORD *)(v15 + 11) != 0x3E736E6F69676572)
          {
            v35 = 0;
            v34 = 0;
            v33 = 0;
            v32 = 0;
            v38 = 0;
            v27 = 0;
            v26 = 0;
            v29 = 1;
            goto LABEL_336;
          }
          sub_1C62E59F8();
        }
        goto LABEL_1756;
      case 0x14uLL:
        if (*(_QWORD *)v15 == 0x3C65726975716572
          && *((_QWORD *)v15 + 1) == 0x6974706D75737361
          && *((_DWORD *)v15 + 4) == 1047752303)
        {
          sub_1C62E5134();
        }
        else if (*(_QWORD *)v15 == 0x3C65726975716572
               && *((_QWORD *)v15 + 1) == 0x702D68636E617262
               && *((_DWORD *)v15 + 4) == 1046638450)
        {
          sub_1C62E5244();
        }
        else if (*(_QWORD *)v15 == 0x3C65726975716572
               && *((_QWORD *)v15 + 1) == 0x746D6F6474736F70
               && *((_DWORD *)v15 + 4) == 1046832498)
        {
          sub_1C62E53DC();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x3C65726975716572
            || *((_QWORD *)v15 + 1) != 0x746E6F72666D6F64
            || *((_DWORD *)v15 + 4) != 1047684457)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v502 = 0;
            v28 = 0;
            v29 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v30 = 1;
            goto LABEL_370;
          }
          sub_1C62E54EC();
        }
        goto LABEL_1756;
      case 0x15uLL:
      case 0x1AuLL:
        goto LABEL_286;
      case 0x16uLL:
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x6B636F6C623C6574
          && *(_QWORD *)(v15 + 14) == 0x3E716572662D6B63)
        {
          sub_1C62E5200();
        }
        else if (*(_QWORD *)v15 == 0x3C65726975716572
               && *((_QWORD *)v15 + 1) == 0x6465646E616D6564
               && *(_QWORD *)(v15 + 14) == 0x3E737469622D6465)
        {
          sub_1C62E5464();
        }
        else if (*(_QWORD *)v15 == 0x6164696C61766E69
               && *((_QWORD *)v15 + 1) == 0x762D6968703C6574
               && *(_QWORD *)(v15 + 14) == 0x3E7365756C61762DLL)
        {
          sub_1C62E5970();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x3C65726975716572
            || *((_QWORD *)v15 + 1) != 0x696C746567726174
            || *(_QWORD *)(v15 + 14) != 0x3E6F666E6962696CLL)
          {
            v66 = 0;
            v35 = 0;
            v67 = 0;
            v34 = 0;
            v33 = 0;
            v32 = 0;
            v31 = 0;
            v30 = 0;
            v29 = 0;
            v28 = 0;
            v502 = 0;
            v27 = 0;
            v26 = 0;
            v25 = 0;
            v101 = 0;
            v102 = 1;
            goto LABEL_415;
          }
          sub_1C62E5CEC();
        }
        goto LABEL_1756;
      case 0x17uLL:
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x6D757373613C6574
          && *(_QWORD *)(v15 + 15) == 0x3E736E6F6974706DLL)
        {
          sub_1C62E5178();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x636E6172623C6574
          && *(_QWORD *)(v15 + 15) == 0x3E626F72702D6863)
        {
          sub_1C62E5288();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x6474736F703C6574
          && *(_QWORD *)(v15 + 15) == 0x3E656572746D6F64)
        {
          sub_1C62E5420();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x72666D6F643C6574
          && *(_QWORD *)(v15 + 15) == 0x3E726569746E6F72)
        {
          sub_1C62E5530();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 != 0x3C65726975716572
          || *((_QWORD *)v15 + 1) != 0x75662D706F2D6F6ELL
          || *(_QWORD *)(v15 + 15) != 0x3E6E6F6974636E75)
        {
          v35 = 0;
          v34 = 0;
          v33 = 0;
          v29 = 0;
          v38 = 0;
          v27 = 0;
          v26 = 0;
          v32 = 1;
          goto LABEL_336;
        }
        v274 = (_QWORD *)operator new();
        v275 = &off_1E818F760;
        goto LABEL_1023;
      case 0x18uLL:
        if (*(_QWORD *)v15 == 0x3C65726975716572
          && *((_QWORD *)v15 + 1) == 0x6F72702D636E7566
          && *((_QWORD *)v15 + 2) == 0x3E73656974726570)
        {
          sub_1C62E5574();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 == 0x3C65726975716572
          && *((_QWORD *)v15 + 1) == 0x6C61762D797A616CLL
          && *((_QWORD *)v15 + 2) == 0x3E6F666E692D6575)
        {
          sub_1C62E5684();
          goto LABEL_1756;
        }
        v36 = 0;
        v37 = 0;
        v38 = 1;
LABEL_286:
        if (v16 == 34)
        {
          if (!memcmp(v15, "invalidate<inliner-size-estimator>", 0x22uLL))
          {
            sub_1C62E57D8();
            goto LABEL_1756;
          }
        }
        else
        {
          if (v16 != 31)
          {
            if ((v36 & 1) == 0)
            {
              v34 = 0;
LABEL_321:
              v26 = v16 == 21;
              if (v16 == 21)
              {
                v128 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x726F6D656D3C6574;
                if (v128 && *(_QWORD *)(v15 + 13) == 0x3E61737379726F6DLL)
                {
                  sub_1C62E58E8();
                  goto LABEL_1756;
                }
              }
              if (!v37)
              {
                v35 = 0;
                v33 = 0;
                v32 = 0;
                v29 = 0;
                v27 = 0;
                goto LABEL_336;
              }
              goto LABEL_330;
            }
LABEL_305:
            if (*(_QWORD *)v15 == 0x6164696C61766E69
              && *((_QWORD *)v15 + 1) == 0x65646D656D3C6574
              && *((_WORD *)v15 + 8) == 15984)
            {
              sub_1C62E5860();
              goto LABEL_1756;
            }
            if (*(_QWORD *)v15 == 0x3C65726975716572
              && *((_QWORD *)v15 + 1) == 0x737379726F6D656DLL
              && *((_WORD *)v15 + 8) == 15969)
            {
              sub_1C62E58A4();
              goto LABEL_1756;
            }
            v34 = 1;
            goto LABEL_321;
          }
          if (*(_QWORD *)v15 == 0x3C65726975716572
            && *((_QWORD *)v15 + 1) == 0x2D72656E696C6E69
            && *((_QWORD *)v15 + 2) == 0x7473652D657A6973
            && *(_QWORD *)(v15 + 23) == 0x3E726F74616D6974)
          {
            sub_1C62E5794();
            goto LABEL_1756;
          }
        }
        if ((v36 & 1) == 0)
        {
          if ((v37 & 1) == 0)
          {
            v35 = 0;
            v34 = 0;
            v33 = 0;
            v32 = 0;
            v29 = 0;
            v27 = 0;
            v26 = 0;
            v25 = 0;
            v134 = 0;
            if ((v38 & 1) != 0)
              goto LABEL_349;
LABEL_358:
            v502 = v134;
            if (v35)
            {
              v137 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x722D74706F3C6574;
              v138 = v137 && *((_QWORD *)v15 + 2) == 0x6D652D6B72616D65;
              if (v138 && *(_QWORD *)(v15 + 19) == 0x3E74696D652D6B72)
              {
                sub_1C62E5A84();
                goto LABEL_1756;
              }
            }
            v28 = 0;
            v30 = 0;
            v31 = 0;
            goto LABEL_370;
          }
          v34 = 0;
          v26 = 0;
LABEL_330:
          if (*(_QWORD *)v15 != 0x3C65726975716572 || *((_QWORD *)v15 + 1) != 0x3E736E6F69676572)
          {
            v35 = 0;
            v32 = 0;
            v29 = 0;
            v27 = 0;
            v33 = 1;
            goto LABEL_336;
          }
          sub_1C62E59B4();
          goto LABEL_1756;
        }
        goto LABEL_305;
      case 0x19uLL:
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x6E616D65643C6574
          && *((_QWORD *)v15 + 2) == 0x737469622D646564
          && v15[24] == 62)
        {
          sub_1C62E54A8();
        }
        else
        {
          if (*(_QWORD *)v15 != 0x3C65726975716572
            || *((_QWORD *)v15 + 1) != 0x652D72616C616373
            || *((_QWORD *)v15 + 2) != 0x6E6F6974756C6F76
            || v15[24] != 62)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            v502 = 0;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v66 = 0;
            v67 = 1;
            goto LABEL_403;
          }
          sub_1C62E5AC8();
        }
        goto LABEL_1756;
      case 0x1BuLL:
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x2D636E75663C6574
          && *((_QWORD *)v15 + 2) == 0x69747265706F7270
          && *(_QWORD *)(v15 + 19) == 0x3E73656974726570)
        {
          sub_1C62E55B8();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 == 0x6164696C61766E69
          && *((_QWORD *)v15 + 1) == 0x2D797A616C3C6574
          && *((_QWORD *)v15 + 2) == 0x6E692D65756C6176
          && *(_QWORD *)(v15 + 19) == 0x3E6F666E692D6575)
        {
          sub_1C62E56C8();
          goto LABEL_1756;
        }
        v34 = 0;
        v33 = 0;
        v32 = 0;
        v29 = 0;
        v38 = 0;
        v27 = 0;
        v26 = 0;
        v35 = 1;
LABEL_336:
        if (v16 != 26)
        {
          if (!v38)
          {
            v25 = 0;
            v134 = 0;
            goto LABEL_358;
          }
LABEL_349:
          if (*(_QWORD *)v15 != 0x3C65726975716572
            || *((_QWORD *)v15 + 1) != 0x616D65722D74706FLL
            || *((_QWORD *)v15 + 2) != 0x3E74696D652D6B72)
          {
            v25 = 0;
            v134 = 1;
            goto LABEL_358;
          }
          sub_1C62E5A3C();
          goto LABEL_1756;
        }
        if (*(_QWORD *)v15 != 0x6164696C61766E69
          || *((_QWORD *)v15 + 1) != 0x706F2D6F6E3C6574
          || *((_QWORD *)v15 + 2) != 0x6F6974636E75662DLL
          || *((_WORD *)v15 + 12) != 15982)
        {
          v25 = 1;
          v134 = v38;
          goto LABEL_358;
        }
        v274 = (_QWORD *)operator new();
        v275 = &off_1E818F7A0;
LABEL_1023:
        *v274 = v275;
        v516[0].n128_u64[0] = (unint64_t)v274;
        v298 = *(_QWORD **)(v510 + 8);
        if ((unint64_t)v298 < *(_QWORD *)(v510 + 16))
        {
          *v298 = v274;
          *(_QWORD *)(v510 + 8) = v298 + 1;
          goto LABEL_1756;
        }
        v299 = sub_1C4D62F9C((char **)v510, (uint64_t *)v516);
        v300 = v516[0].n128_u64[0];
        *(_QWORD *)(v510 + 8) = v299;
        goto LABEL_1026;
      default:
        v37 = 0;
        v38 = 0;
        goto LABEL_286;
    }
  }
  if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 3) == 0x3E61613C65726975)
  {
    sub_1C62E50A8();
    goto LABEL_1756;
  }
  if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 3) == 0x3E61643C65726975)
  {
    sub_1C62E570C();
    goto LABEL_1756;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v502 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
LABEL_370:
  switch(v16)
  {
    case 0x2AuLL:
      v491 = v25;
      v505 = v32;
      v493 = v35;
      v496 = v26;
      v499 = v34;
      v509 = 42;
      v143 = v28;
      v144 = v29;
      v145 = v31;
      v146 = v30;
      v147 = v27;
      v148 = v33;
      if (!memcmp(v15, "invalidate<should-not-run-function-passes>", 0x2AuLL))
      {
        sub_1C62E5B94();
        goto LABEL_1756;
      }
      if (!memcmp(v15, "invalidate<should-run-extra-vector-passes>", 0x2AuLL))
      {
        sub_1C62E5C20();
        goto LABEL_1756;
      }
      goto LABEL_390;
    case 0x27uLL:
      v491 = v25;
      v505 = v32;
      v493 = v35;
      v496 = v26;
      v499 = v34;
      v509 = 39;
      v143 = v28;
      v144 = v29;
      v145 = v31;
      v146 = v30;
      v147 = v27;
      v148 = v33;
      if (!memcmp(v15, "require<should-not-run-function-passes>", 0x27uLL))
      {
        sub_1C62E5B50();
        goto LABEL_1756;
      }
      if (!memcmp(v15, "require<should-run-extra-vector-passes>", 0x27uLL))
      {
        sub_1C62E5BDC();
        goto LABEL_1756;
      }
LABEL_390:
      v67 = 0;
      v66 = 0;
      v33 = v148;
      v27 = v147;
      v30 = v146;
      v31 = v145;
      v29 = v144;
      v28 = v143;
      v16 = v509;
      v26 = v496;
      v34 = v499;
      v35 = v493;
      v32 = v505;
      v25 = v491;
      if (!v493)
        goto LABEL_403;
      break;
    case 0x1CuLL:
      if (*(_QWORD *)v15 == 0x6164696C61766E69
        && *((_QWORD *)v15 + 1) == 0x616C6163733C6574
        && *((_QWORD *)v15 + 2) == 0x74756C6F76652D72
        && *((_DWORD *)v15 + 6) == 1047424873)
      {
        sub_1C62E5B0C();
        goto LABEL_1756;
      }
      v67 = 0;
      v66 = 1;
      if (!v35)
        goto LABEL_403;
      break;
    default:
      v67 = 0;
      v66 = 0;
      if (!v35)
        goto LABEL_403;
      break;
  }
  if (*(_QWORD *)v15 == 0x3C65726975716572
    && *((_QWORD *)v15 + 1) == 0x61732D6B63617473
    && *((_QWORD *)v15 + 2) == 0x636F6C2D79746566
    && *(_QWORD *)(v15 + 19) == 0x3E6C61636F6C2D79)
  {
    sub_1C62E5C64();
    goto LABEL_1756;
  }
LABEL_403:
  v101 = v16 == 30;
  if (v16 == 30)
  {
    v152 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x6B636174733C6574;
    v153 = v152 && *((_QWORD *)v15 + 2) == 0x2D7974656661732DLL;
    if (v153 && *(_QWORD *)(v15 + 22) == 0x3E6C61636F6C2D79)
    {
      sub_1C62E5CA8();
      goto LABEL_1756;
    }
  }
  v102 = 0;
LABEL_415:
  if (v67)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69
      && *((_QWORD *)v15 + 1) == 0x65677261743C6574
      && *((_QWORD *)v15 + 2) == 0x6F666E6962696C74
      && v15[24] == 62)
    {
      sub_1C62E5D30();
      goto LABEL_1756;
    }
  }
  else if (v27)
  {
    v158 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x7269746567726174;
    if (v158 && v15[16] == 62)
    {
      sub_1C62E5D74();
      goto LABEL_1756;
    }
  }
  if (v30)
  {
    v160 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x65677261743C6574;
    if (v160 && *((_DWORD *)v15 + 4) == 1047685492)
    {
      sub_1C62E5DB8();
      goto LABEL_1756;
    }
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 7) == 0x3E7966697265763CLL)
    {
      sub_1C62E5DFC();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v163 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x66697265763C6574;
    if (v163 && *((_WORD *)v15 + 8) == 15993)
    {
      sub_1C62E5E40();
      goto LABEL_1756;
    }
  }
  if (v16 == 29)
  {
    if (*(_QWORD *)v15 == 0x3C65726975716572
      && *((_QWORD *)v15 + 1) == 0x736E692D73736170
      && *((_QWORD *)v15 + 2) == 0x61746E656D757274
      && *(_QWORD *)(v15 + 21) == 0x3E6E6F697461746ELL)
    {
      sub_1C62E5E84();
      goto LABEL_1756;
    }
  }
  else if (v16 == 32)
  {
    v168 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x2D737361703C6574;
    v169 = v168 && *((_QWORD *)v15 + 2) == 0x656D757274736E69;
    if (v169 && *((_QWORD *)v15 + 3) == 0x3E6E6F697461746ELL)
    {
      sub_1C62E5EC8();
      goto LABEL_1756;
    }
  }
  if (v29)
  {
    v171 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x6E65677265766964;
    if (v171 && *(_QWORD *)(v15 + 11) == 0x3E65636E65677265)
    {
      sub_1C62E5F0C();
      goto LABEL_1756;
    }
  }
  if (v102)
  {
    v173 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x72657669643C6574;
    if (v173 && *(_QWORD *)(v15 + 14) == 0x3E65636E65677265)
    {
      sub_1C62E5F50();
      goto LABEL_1756;
    }
  }
  if (v101)
  {
    if (*(_QWORD *)v15 == 0x3C65726975716572
      && *((_QWORD *)v15 + 1) == 0x636E75662D757067
      && *((_QWORD *)v15 + 2) == 0x616E612D6E6F6974
      && *(_QWORD *)(v15 + 22) == 0x3E736973796C616ELL)
    {
      sub_1C62E5F94();
      goto LABEL_1756;
    }
  }
  else if (v16 == 33)
  {
    v494 = v30;
    v497 = v31;
    v506 = v32;
    v500 = v33;
    v178 = v27;
    v490 = v12;
    v492 = v10;
    v489 = v8;
    v488 = v28;
    v179 = v29;
    v180 = v102;
    v181 = v34;
    v182 = v26;
    v183 = v35;
    v184 = v66;
    v185 = v25;
    v186 = memcmp(v15, "invalidate<gpu-function-analysis>", 0x21uLL);
    v25 = v185;
    v66 = v184;
    v35 = v183;
    v26 = v182;
    v34 = v181;
    v102 = v180;
    v29 = v179;
    v28 = v488;
    v101 = 0;
    v16 = 33;
    v8 = v489;
    v12 = v490;
    v10 = v492;
    v30 = v494;
    v31 = v497;
    v27 = v178;
    v33 = v500;
    v32 = v506;
    if (!v186)
    {
      sub_1C62E5FD8();
      goto LABEL_1756;
    }
  }
  else if (v27)
  {
    v187 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x61612D6369736162;
    if (v187 && v15[16] == 62)
    {
      sub_1C62E601C();
      goto LABEL_1756;
    }
  }
  if (v30)
  {
    v189 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x63697361623C6574;
    if (v189 && *((_DWORD *)v15 + 4) == 1046569261)
    {
      sub_1C62E6060();
      goto LABEL_1756;
    }
  }
  if (v102)
  {
    v191 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x65646E612D6C6663;
    if (v191 && *(_QWORD *)(v15 + 14) == 0x3E61612D73726564)
    {
      sub_1C62E60A4();
      goto LABEL_1756;
    }
  }
  if (v67)
  {
    v193 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x612D6C66633C6574;
    v194 = v193 && *((_QWORD *)v15 + 2) == 0x61612D737265646ELL;
    if (v194 && v15[24] == 62)
    {
      sub_1C62E60E8();
      goto LABEL_1756;
    }
  }
  if (v102)
  {
    v196 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x656574732D6C6663;
    if (v196 && *(_QWORD *)(v15 + 14) == 0x3E61612D736E6565)
    {
      sub_1C62E612C();
      goto LABEL_1756;
    }
  }
  if (v67)
  {
    v198 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x732D6C66633C6574;
    v199 = v198 && *((_QWORD *)v15 + 2) == 0x61612D736E656574;
    if (v199 && v15[24] == 62)
    {
      sub_1C62E6170();
      goto LABEL_1756;
    }
  }
  if (v30)
  {
    v201 = *(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x6372612D636A626FLL;
    if (v201 && *((_DWORD *)v15 + 4) == 1046569261)
    {
      sub_1C62E61B4();
      goto LABEL_1756;
    }
  }
  if (v32)
  {
    v203 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x2D636A626F3C6574;
    if (v203 && *(_QWORD *)(v15 + 15) == 0x3E61612D6372612DLL)
    {
      sub_1C62E61F8();
      goto LABEL_1756;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x3C65726975716572 && *((_QWORD *)v15 + 1) == 0x3E61612D76656373)
    {
      sub_1C62E623C();
      goto LABEL_1756;
    }
  }
  if (v29)
  {
    v206 = *(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x2D766563733C6574;
    if (v206 && *(_QWORD *)(v15 + 11) == 0x3E61612D76656373)
    {
      sub_1C62E6280();
      goto LABEL_1756;
    }
  }
  if (v25)
  {
    if (*(_QWORD *)v15 == 0x3C65726975716572
      && *((_QWORD *)v15 + 1) == 0x6E2D6465706F6373
      && *((_QWORD *)v15 + 2) == 0x612D7361696C616FLL
      && *((_WORD *)v15 + 12) == 15969)
    {
      sub_1C62E62C4();
      goto LABEL_1756;
    }
    goto LABEL_628;
  }
  if (v16 == 29)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69
      && *((_QWORD *)v15 + 1) == 0x65706F63733C6574
      && *((_QWORD *)v15 + 2) == 0x61696C616F6E2D64
      && *(_QWORD *)(v15 + 21) == 0x3E61612D7361696CLL)
    {
      sub_1C62E6308();
      goto LABEL_1756;
    }
    goto LABEL_628;
  }
  if (v16 != 13)
  {
LABEL_628:
    v215 = 0;
    goto LABEL_629;
  }
  if (*(_QWORD *)v15 == 0x3C65726975716572 && *(_QWORD *)(v15 + 5) == 0x3E616162743C6572)
  {
    sub_1C62E634C();
    goto LABEL_1756;
  }
  v215 = 1;
LABEL_629:
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69 && *((_QWORD *)v15 + 1) == 0x3E616162743C6574)
    {
      sub_1C62E6390();
      goto LABEL_1756;
    }
  }
  if (v16 == 7)
  {
    if (*(_DWORD *)v15 == 1697472865 && *(_DWORD *)(v15 + 3) == 1818326629)
    {
      v517 = 0u;
      memset(v518, 0, 56);
      memset(v516, 0, sizeof(v516));
      sub_1C62E63D4(v510, (uint64_t *)v516);
      llvm::AAEvaluator::~AAEvaluator((llvm::AAEvaluator *)v516);
      goto LABEL_1756;
    }
  }
  else if (v16 == 4)
  {
    if (*(_DWORD *)v15 == 1701012577)
    {
      sub_1C62E64A0();
      goto LABEL_1756;
    }
    v218 = 1;
    if (!v34)
      goto LABEL_653;
    goto LABEL_646;
  }
  v218 = 0;
  if (!v34)
    goto LABEL_653;
LABEL_646:
  if (*(_QWORD *)v15 == 0x637369642D646461
    && *((_QWORD *)v15 + 1) == 0x6F74616E696D6972
    && *((_WORD *)v15 + 8) == 29554)
  {
    sub_1C62E64E8();
    goto LABEL_1756;
  }
LABEL_653:
  if (v102)
  {
    v221 = *(_QWORD *)v15 == 0x6973736572676761 && *((_QWORD *)v15 + 1) == 0x6374736E692D6576;
    if (v221 && *(_QWORD *)(v15 + 14) == 0x656E69626D6F6374)
    {
      sub_1C62E6530();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x622D656D75737361 && *(_QWORD *)(v15 + 6) == 0x7265646C6975622DLL)
    {
      sub_1C62E6578();
      goto LABEL_1756;
    }
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x732D656D75737361 && *(_QWORD *)(v15 + 7) == 0x7966696C706D6973)
    {
      sub_1C62E65BC();
      goto LABEL_1756;
    }
  }
  else if (v25)
  {
    v225 = *(_QWORD *)v15 == 0x6E656D6E67696C61 && *((_QWORD *)v15 + 1) == 0x612D6D6F72662D74;
    v226 = v225 && *((_QWORD *)v15 + 2) == 0x6F6974706D757373;
    if (v226 && *((_WORD *)v15 + 12) == 29550)
    {
      v516[0] = 0uLL;
      sub_1C62E6604();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v228 = *(_QWORD *)v15 == 0x697461746F6E6E61 && *((_QWORD *)v15 + 1) == 0x72616D65722D6E6FLL;
    if (v228 && *((_WORD *)v15 + 8) == 29547)
    {
      sub_1C62E6668();
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1701012578)
  {
    sub_1C62E66B0();
    goto LABEL_1756;
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x632D73646E756F62 && *(_QWORD *)(v15 + 7) == 0x676E696B63656863)
    {
      sub_1C62E66F8();
      goto LABEL_1756;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x72632D6B61657262 && *((_QWORD *)v15 + 1) == 0x73656764652D7469)
    {
      sub_1C62E673C();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v232 = *(_QWORD *)v15 == 0x657469736C6C6163 && *((_QWORD *)v15 + 1) == 0x697474696C70732DLL;
    if (v232 && *((_WORD *)v15 + 8) == 26478)
    {
      sub_1C62E6780();
      goto LABEL_1756;
    }
  }
  if (v16 == 10 && *(_QWORD *)v15 == 0x696F6874736E6F63 && *((_WORD *)v15 + 4) == 29811)
  {
    bzero(v516, 0x15D8uLL);
    *(_QWORD *)&v519 = &v520;
    HIDWORD(v519) = 8;
    v549 = 0u;
    v550 = 0;
    v551 = 0u;
    memset(v552, 0, sizeof(v552));
    v553 = 0;
    v555 = 0;
    v554 = 0;
    sub_1C62E67C8(v510, (uint64_t)v516, v377, v378);
    sub_1C62EA5E0((uint64_t)v516);
    goto LABEL_1756;
  }
  if (v102)
  {
    v235 = *(_QWORD *)v15 == 0x69617274736E6F63 && *((_QWORD *)v15 + 1) == 0x696D696C652D746ELL;
    if (v235 && *(_QWORD *)(v15 + 14) == 0x6E6F6974616E696DLL)
    {
      sub_1C62E6894();
      goto LABEL_1756;
    }
  }
  if (v16 == 3)
  {
    if (*(_WORD *)v15 == 26723 && v15[2] == 114)
    {
      sub_1C5872960();
      sub_1C62E68DC();
      goto LABEL_1756;
    }
    goto LABEL_745;
  }
  if (v16 == 10)
  {
    if (*(_QWORD *)v15 == 0x696C652D6F726F63 && *((_WORD *)v15 + 4) == 25956)
    {
      sub_1C62E6924();
      goto LABEL_1756;
    }
    goto LABEL_745;
  }
  if (v16 != 12)
  {
LABEL_745:
    v240 = 0;
    goto LABEL_746;
  }
  if (*(_QWORD *)v15 == 0x656C632D6F726F63 && *((_DWORD *)v15 + 2) == 1886744161)
  {
    sub_1C62E696C();
    goto LABEL_1756;
  }
  v240 = 1;
LABEL_746:
  if (v102)
  {
    v241 = *(_QWORD *)v15 == 0x74616C6572726F63 && *((_QWORD *)v15 + 1) == 0x61706F72702D6465;
    if (v241 && *(_QWORD *)(v15 + 14) == 0x6E6F697461676170)
    {
      sub_1C62E69B4();
      goto LABEL_1756;
    }
  }
  if (v16 == 3 && *(_WORD *)v15 == 25444 && v15[2] == 101)
  {
    sub_1C62E69FC();
    goto LABEL_1756;
  }
  if (v34)
  {
    v244 = *(_QWORD *)v15 == 0x706D756A2D616664 && *((_QWORD *)v15 + 1) == 0x696461657268742DLL;
    if (v244 && *((_WORD *)v15 + 8) == 26478)
    {
      sub_1C62E6A40();
      goto LABEL_1756;
    }
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x2D6D65722D766964 && *(_QWORD *)(v15 + 5) == 0x73726961702D6D65)
    {
      sub_1C62E6A88();
      goto LABEL_1756;
    }
  }
  if (v16 == 3)
  {
    if (*(_WORD *)v15 == 29540 && v15[2] == 101)
    {
      sub_1C62E6AD0();
      goto LABEL_1756;
    }
  }
  else if (v16 == 7 && *(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1734763309)
  {
    sub_1C62E6B18();
    goto LABEL_1756;
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x2D6766632D746F64 && *((_DWORD *)v15 + 2) == 2037149295)
    {
      sub_1C62E6B5C();
      goto LABEL_1756;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1836016685)
  {
    sub_1C62E6BA0();
    goto LABEL_1756;
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x2D6D6F642D746F64 && *((_DWORD *)v15 + 2) == 2037149295)
    {
      sub_1C62E6BE4();
      goto LABEL_1756;
    }
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x657272692D786966 && *(_QWORD *)(v15 + 7) == 0x656C626963756465)
    {
      sub_1C62E6C28();
      goto LABEL_1756;
    }
  }
  else if (v16 == 10 && *(_QWORD *)v15 == 0x636E657474616C66 && *((_WORD *)v15 + 4) == 26470)
  {
    sub_1C62E6C6C();
    goto LABEL_1756;
  }
  if (v30)
  {
    v254 = *(_QWORD *)v15 == 0x6175672D656B616DLL && *((_QWORD *)v15 + 1) == 0x6C7078652D736472;
    if (v254 && *((_DWORD *)v15 + 4) == 1953063785)
    {
      sub_1C62E6CB0();
      goto LABEL_1756;
    }
  }
  if (v16 == 9)
  {
    if (*(_QWORD *)v15 == 0x73696F682D6E7667 && v15[8] == 116)
    {
      sub_1C62E6CF4();
      goto LABEL_1756;
    }
    goto LABEL_834;
  }
  if (v16 != 8)
  {
    if (v16 == 10 && *(_QWORD *)v15 == 0x726F776F6C6C6568 && *((_WORD *)v15 + 4) == 25708)
    {
      sub_1C62E6D84();
      goto LABEL_1756;
    }
LABEL_834:
    v257 = 0;
    goto LABEL_835;
  }
  if (*(_QWORD *)v15 == 0x6B6E69732D6E7667)
  {
    sub_1C62E6D3C();
    goto LABEL_1756;
  }
  v257 = 1;
LABEL_835:
  if (v30)
  {
    v259 = *(_QWORD *)v15 == 0x64612D7265666E69 && *((_QWORD *)v15 + 1) == 0x70732D7373657264;
    if (v259 && *((_DWORD *)v15 + 4) == 1936024417)
    {
      v516[0].n128_u32[0] = -1;
      sub_1C62E6DC8(v510, (int *)v516);
      goto LABEL_1756;
    }
  }
  if (v16 == 11)
  {
    if (*(_QWORD *)v15 == 0x626D6F6374736E69 && *(_QWORD *)(v15 + 3) == 0x656E69626D6F6374)
    {
      v516[0].n128_u64[0] = (unint64_t)v516[1].n128_u64;
      v516[0].n128_u64[1] = 0x10000000000;
      v542 = 0u;
      v543 = 0;
      v544 = 1;
      v262 = 131;
      v263 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
        v516[v262++] = (__n128)v263;
      while (v262 != 139);
      v546 = v548;
      v547 = 0x1000000000;
      v548[32] = dword_1ED8337E0;
      sub_1C5A49A88();
      if (v546 != v548)
        free(v546);
      if ((v544 & 1) == 0)
        MEMORY[0x1CAA32FB4](v545, 8);
      MEMORY[0x1CAA32FB4](v542, 8);
      if ((__n128 *)v516[0].n128_u64[0] != &v516[1])
        free((void *)v516[0].n128_u64[0]);
      goto LABEL_1756;
    }
  }
  else if (v16 == 9 && *(_QWORD *)v15 == 0x6E756F6374736E69 && v15[8] == 116)
  {
    sub_1C62E6E2C();
    goto LABEL_1756;
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x706D697374736E69 && *((_DWORD *)v15 + 2) == 2036754796)
    {
      sub_1C62E6E70();
      goto LABEL_1756;
    }
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69 && *(_QWORD *)(v15 + 7) == 0x3E6C6C613C657461)
    {
      sub_1C62E6EB8();
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1701016169)
  {
    sub_1C62E6EFC();
    goto LABEL_1756;
  }
  if (v16 == 9 && *(_QWORD *)v15 == 0x6E693274616F6C66 && v15[8] == 116)
  {
    v526 = 0uLL;
    v523 = 0;
    v521 = 0u;
    v522 = 0u;
    v520 = 0u;
    v517 = 0u;
    memset(v516, 0, sizeof(v516));
    *(_QWORD *)&v518[0] = 1;
    *(int64x2_t *)((char *)v518 + 8) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(_OWORD *)((char *)&v518[1] + 8) = *(_OWORD *)((char *)v518 + 8);
    *(_OWORD *)((char *)&v518[2] + 8) = *(_OWORD *)((char *)v518 + 8);
    *(_OWORD *)((char *)&v518[3] + 8) = *(_OWORD *)((char *)v518 + 8);
    *((_QWORD *)&v518[4] + 1) = (char *)&v519 + 8;
    v519 = 0x800000000uLL;
    v525 = 0uLL;
    v524 = &v525;
    v527 = 0uLL;
    v529 = 0uLL;
    v528 = 0uLL;
    sub_1C62E6F40();
    sub_1C62EA7A0((uint64_t)v516);
    goto LABEL_1756;
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x75662D706F2D6F6ELL && *(_QWORD *)(v15 + 6) == 0x6E6F6974636E7566)
    {
      v295 = (_QWORD *)operator new();
      *v295 = &off_1E818D6A0;
      v516[0].n128_u64[0] = (unint64_t)v295;
      v296 = *(_QWORD **)(v510 + 8);
      if ((unint64_t)v296 < *(_QWORD *)(v510 + 16))
      {
        *v296 = v295;
        *(_QWORD *)(v510 + 8) = v296 + 1;
        goto LABEL_1756;
      }
LABEL_1032:
      v301 = sub_1C4D62F9C((char **)v510, (uint64_t *)v516);
      v302 = v516[0].n128_u64[0];
      *(_QWORD *)(v510 + 8) = v301;
      v516[0].n128_u64[0] = 0;
      if (v302)
        (*(void (**)(unint64_t))(*(_QWORD *)v302 + 8))(v302);
      goto LABEL_1756;
    }
  }
  if (v29)
  {
    v269 = *(_QWORD *)v15 == 0x736C6C616362696CLL && *((_QWORD *)v15 + 1) == 0x776B6E697268732DLL;
    if (v269 && *(_QWORD *)(v15 + 11) == 0x706172776B6E6972)
    {
      sub_1C62E6FF4();
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1953393004)
  {
    sub_1C62E703C();
    goto LABEL_1756;
  }
  if (v29)
  {
    v271 = *(_QWORD *)v15 == 0x742D7463656A6E69 && *((_QWORD *)v15 + 1) == 0x697070616D2D696CLL;
    if (v271 && *(_QWORD *)(v15 + 11) == 0x73676E697070616DLL)
    {
      sub_1C62E7080();
      goto LABEL_1756;
    }
  }
  if (v16 == 9)
  {
    if (*(_QWORD *)v15 == 0x656D616E74736E69 && v15[8] == 114)
    {
      sub_1C62E70C8();
      goto LABEL_1756;
    }
  }
  else if (v16 == 11 && *(_QWORD *)v15 == 0x6F74617265776F6CLL && *(_QWORD *)(v15 + 3) == 0x63696D6F74617265)
  {
    sub_1C62E710C();
    goto LABEL_1756;
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x78652D7265776F6CLL && *((_DWORD *)v15 + 2) == 1952671088)
    {
      sub_1C62E7150();
      goto LABEL_1756;
    }
  }
  if (v26)
  {
    if (*(_QWORD *)v15 == 0x75672D7265776F6CLL
      && *((_QWORD *)v15 + 1) == 0x72746E692D647261
      && *(_QWORD *)(v15 + 13) == 0x6369736E6972746ELL)
    {
      sub_1C62E719C();
      goto LABEL_1756;
    }
  }
  else if (v67)
  {
    if (*(_QWORD *)v15 == 0x6F632D7265776F6CLL
      && *((_QWORD *)v15 + 1) == 0x692D746E6174736ELL
      && *((_QWORD *)v15 + 2) == 0x6369736E6972746ELL
      && v15[24] == 115)
    {
      sub_1C62E71E0();
      goto LABEL_1756;
    }
    if (*(_QWORD *)v15 == 0x69772D7265776F6CLL
      && *((_QWORD *)v15 + 1) == 0x2D656C62616E6564
      && *((_QWORD *)v15 + 2) == 0x6F697469646E6F63
      && v15[24] == 110)
    {
      sub_1C62E722C();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x69772D6472617567 && *(_QWORD *)(v15 + 6) == 0x676E696E65646977)
    {
      sub_1C62E7270();
      goto LABEL_1756;
    }
  }
  if (v26)
  {
    v287 = *(_QWORD *)v15 == 0x6F74732D64616F6CLL && *((_QWORD *)v15 + 1) == 0x6F746365762D6572;
    if (v287 && *(_QWORD *)(v15 + 13) == 0x72657A69726F7463)
    {
      sub_1C62E72B4();
      goto LABEL_1756;
    }
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x6D69732D706F6F6CLL && *(_QWORD *)(v15 + 5) == 0x7966696C706D6973)
    {
      sub_1C62E72F8();
      goto LABEL_1756;
    }
  }
  switch(v16)
  {
    case 9uLL:
      if (*(_QWORD *)v15 == 0x6E69732D706F6F6CLL && v15[8] == 107)
      {
        sub_1C62E7344();
        goto LABEL_1756;
      }
      if (*(_QWORD *)v15 == 0x706F7970636D656DLL && v15[8] == 116)
      {
        v517 = 0u;
        memset(v516, 0, sizeof(v516));
        sub_1C62E745C(v510, (uint64_t)v516);
        goto LABEL_1756;
      }
      break;
    case 0xBuLL:
      if (*(_QWORD *)v15 == 0x766E697265776F6CLL && *(_QWORD *)(v15 + 3) == 0x656B6F766E697265)
      {
        sub_1C62E738C();
        goto LABEL_1756;
      }
      if (*(_QWORD *)v15 == 0x6977737265776F6CLL && *(_QWORD *)(v15 + 3) == 0x6863746977737265)
      {
        sub_1C62E73D0();
        goto LABEL_1756;
      }
      if (*(_QWORD *)v15 == 0x746572656772656DLL && *(_QWORD *)(v15 + 3) == 0x6E72757465726567)
      {
        sub_1C62E750C();
        goto LABEL_1756;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v15 == 846030189 && *(_DWORD *)(v15 + 3) == 1734701618)
      {
        sub_1C62E7414();
        goto LABEL_1756;
      }
      break;
    default:
      if (v16 == 10 && *(_QWORD *)v15 == 0x6D6369656772656DLL && *((_WORD *)v15 + 4) == 29552)
      {
        sub_1C62E74C8();
        goto LABEL_1756;
      }
      break;
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6165722D7972616ELL && *((_QWORD *)v15 + 1) == 0x65746169636F7373)
    {
      v517 = 0u;
      memset(v518, 0, 24);
      memset(v516, 0, sizeof(v516));
      sub_1C62E7550(v510, v516);
      sub_1C5A55620((uint64_t *)v518);
      goto LABEL_1756;
    }
  }
  if (v16 == 6 && *(_DWORD *)v15 == 1735877998 && *((_WORD *)v15 + 2) == 28278)
  {
    sub_1C62E761C();
    goto LABEL_1756;
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x7268742D706D756ALL && *(_QWORD *)(v15 + 6) == 0x676E696461657268)
    {
      *((_QWORD *)&v517 + 1) = 0;
      *(_QWORD *)&v518[0] = 0;
      WORD4(v518[0]) = 0;
      *(_QWORD *)&v518[1] = &v518[2];
      *((_QWORD *)&v518[1] + 1) = 0x1000000000;
      *((_QWORD *)&v525 + 1) = 0;
      *(_QWORD *)&v526 = 0;
      *(_QWORD *)&v525 = (char *)&v525 + 8;
      LOBYTE(v527) = byte_1ED835ED0;
      HIDWORD(v526) = dword_1ED835E10;
      sub_1C62E7664();
      sub_1C62EA844((uint64_t)v516);
      goto LABEL_1756;
    }
  }
  if (v67)
  {
    if (*(_QWORD *)v15 == 0x6C6C616974726170
      && *((_QWORD *)v15 + 1) == 0x656E696C6E692D79
      && *((_QWORD *)v15 + 2) == 0x6C6C616362696C2DLL
      && v15[24] == 115)
    {
      sub_1C62E77AC();
      goto LABEL_1756;
    }
    goto LABEL_1093;
  }
  if (v16 != 5)
  {
LABEL_1093:
    v316 = 0;
    goto LABEL_1094;
  }
  if (*(_DWORD *)v15 == 1936941932 && v15[4] == 97)
  {
    sub_1C62E77F0();
    goto LABEL_1756;
  }
  v316 = 1;
LABEL_1094:
  if (v34)
  {
    v317 = *(_QWORD *)v15 == 0x7461642D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x7465666572702D61;
    if (v317 && *((_WORD *)v15 + 8) == 26723)
    {
      sub_1C62E783C();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x616F6C2D706F6F6CLL && *(_QWORD *)(v15 + 6) == 0x6D696C652D64616FLL)
    {
      sub_1C62E7880();
      goto LABEL_1756;
    }
  }
  if (v16 == 11)
  {
    if (*(_QWORD *)v15 == 0x7375662D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6E6F697375662D70)
    {
      sub_1C62E78CC();
      goto LABEL_1756;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x7369642D706F6F6CLL && *(_QWORD *)(v15 + 7) == 0x6574756269727473)
    {
      sub_1C62E7910();
      goto LABEL_1756;
    }
    if (*(_QWORD *)v15 == 0x7265762D706F6F6CLL && *(_QWORD *)(v15 + 7) == 0x676E696E6F697372)
    {
      sub_1C62E7958();
      goto LABEL_1756;
    }
  }
  if (v257 && *(_QWORD *)v15 == 0x6372612D636A626FLL)
  {
    sub_1C62E799C();
    goto LABEL_1756;
  }
  if (v27)
  {
    if (*(_QWORD *)v15 == 0x6372612D636A626FLL && *((_QWORD *)v15 + 1) == 0x636172746E6F632DLL && v15[16] == 116)
    {
      sub_1C62E79E0();
      goto LABEL_1756;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x6372612D636A626FLL && *(_QWORD *)(v15 + 7) == 0x646E617078652D63)
    {
      sub_1C62E7A24();
      goto LABEL_1756;
    }
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x6F6D656D2D6F6770 && *(_QWORD *)(v15 + 5) == 0x74706F2D706F6D65)
    {
      sub_1C62E7A68();
      goto LABEL_1756;
    }
  }
  if (v316)
  {
    if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
    {
      v434 = llvm::dbgs((llvm *)v215);
      v435 = operator new();
      *(_QWORD *)v435 = off_1E818DBA0;
      *(_QWORD *)(v435 + 8) = v434;
      *(_QWORD *)(v435 + 16) = 0;
      *(_BYTE *)(v435 + 39) = 0;
      v516[0].n128_u64[0] = v435;
      v436 = *(uint64_t **)(v510 + 8);
      if ((unint64_t)v436 < *(_QWORD *)(v510 + 16))
      {
        *v436 = v435;
        *(_QWORD *)(v510 + 8) = v436 + 1;
        goto LABEL_1756;
      }
      goto LABEL_1032;
    }
  }
  if (v34)
  {
    v328 = *(_QWORD *)v15 == 0x73613C746E697270 && *((_QWORD *)v15 + 1) == 0x6E6F6974706D7573;
    if (v328 && *((_WORD *)v15 + 8) == 15987)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7AB0();
      goto LABEL_1756;
    }
  }
  if (v27)
  {
    v330 = *(_QWORD *)v15 == 0x6C623C746E697270 && *((_QWORD *)v15 + 1) == 0x716572662D6B636FLL;
    if (v330 && v15[16] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7AFC();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v332 = *(_QWORD *)v15 == 0x72623C746E697270 && *((_QWORD *)v15 + 1) == 0x6F72702D68636E61;
    if (v332 && *((_WORD *)v15 + 8) == 15970)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7B48();
      goto LABEL_1756;
    }
  }
  if (v27)
  {
    v334 = *(_QWORD *)v15 == 0x6F633C746E697270 && *((_QWORD *)v15 + 1) == 0x6C65646F6D2D7473;
    if (v334 && v15[16] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7B94();
      goto LABEL_1756;
    }
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x79633C746E697270 && *(_QWORD *)(v15 + 5) == 0x3E73656C6379633CLL)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7BE0();
      goto LABEL_1756;
    }
  }
  if (v16 == 9)
  {
    if (*(_QWORD *)v15 == 0x61643C746E697270 && v15[8] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7C2C();
      goto LABEL_1756;
    }
  }
  else if (v27)
  {
    v338 = *(_QWORD *)v15 == 0x69643C746E697270 && *((_QWORD *)v15 + 1) == 0x65636E6567726576;
    if (v338 && v15[16] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7C78();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x6F643C746E697270 && *(_QWORD *)(v15 + 6) == 0x3E656572746D6F64)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7CC4();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v341 = *(_QWORD *)v15 == 0x6F703C746E697270 && *((_QWORD *)v15 + 1) == 0x6572746D6F647473;
    if (v341 && *((_WORD *)v15 + 8) == 15973)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7D10();
      goto LABEL_1756;
    }
  }
  if (v102)
  {
    v343 = *(_QWORD *)v15 == 0x65643C746E697270 && *((_QWORD *)v15 + 1) == 0x7A697261656E696CLL;
    if (v343 && *(_QWORD *)(v15 + 14) == 0x3E6E6F6974617A69)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7D5C();
      goto LABEL_1756;
    }
  }
  if (v30)
  {
    v345 = *(_QWORD *)v15 == 0x65643C746E697270 && *((_QWORD *)v15 + 1) == 0x622D6465646E616DLL;
    if (v345 && *((_DWORD *)v15 + 4) == 1047753833)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7DA8();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v347 = *(_QWORD *)v15 == 0x6F643C746E697270 && *((_QWORD *)v15 + 1) == 0x6569746E6F72666DLL;
    if (v347 && *((_WORD *)v15 + 8) == 15986)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7DF4();
      goto LABEL_1756;
    }
  }
  if (v102)
  {
    v349 = *(_QWORD *)v15 == 0x75663C746E697270 && *((_QWORD *)v15 + 1) == 0x65706F72702D636ELL;
    if (v349 && *(_QWORD *)(v15 + 14) == 0x3E73656974726570)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7E40();
      goto LABEL_1756;
    }
  }
  if (v34)
  {
    v351 = *(_QWORD *)v15 == 0x6E693C746E697270 && *((_QWORD *)v15 + 1) == 0x736F632D656E696CLL;
    if (v351 && *((_WORD *)v15 + 8) == 15988)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7E8C();
      goto LABEL_1756;
    }
  }
  v508 = v240;
  if (v16 == 29)
  {
    v353 = *(_QWORD *)v15 == 0x6E693C746E697270 && *((_QWORD *)v15 + 1) == 0x69732D72656E696CLL;
    v354 = v353 && *((_QWORD *)v15 + 2) == 0x6D697473652D657ALL;
    if (v354 && *(_QWORD *)(v15 + 21) == 0x3E726F74616D6974)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7ED8();
      goto LABEL_1756;
    }
  }
  if (v66)
  {
    v356 = *(_QWORD *)v15 == 0x70673C746E697270 && *((_QWORD *)v15 + 1) == 0x6974636E75662D75;
    v357 = v356 && *((_QWORD *)v15 + 2) == 0x796C616E612D6E6FLL;
    if (v357 && *((_DWORD *)v15 + 6) == 1047751027)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7F24();
      goto LABEL_1756;
    }
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x6F6C3C746E697270 && *((_DWORD *)v15 + 2) == 1047752815)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7F70();
      goto LABEL_1756;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x656D3C746E697270 && *((_QWORD *)v15 + 1) == 0x3E61737379726F6DLL)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E7FBC();
      goto LABEL_1756;
    }
  }
  if (v32)
  {
    v361 = *(_QWORD *)v15 == 0x656D3C746E697270 && *((_QWORD *)v15 + 1) == 0x2D61737379726F6DLL;
    if (v361 && *(_QWORD *)(v15 + 15) == 0x3E72656B6C61772DLL)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E8008();
      goto LABEL_1756;
    }
  }
  if (v27)
  {
    v363 = *(_QWORD *)v15 == 0x68703C746E697270 && *((_QWORD *)v15 + 1) == 0x7365756C61762D69;
    if (v363 && v15[16] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E8054();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x65723C746E697270 && *(_QWORD *)(v15 + 6) == 0x3E736E6F69676572)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E80A0();
      goto LABEL_1756;
    }
  }
  if (v32)
  {
    v366 = *(_QWORD *)v15 == 0x63733C746E697270 && *((_QWORD *)v15 + 1) == 0x6F76652D72616C61;
    if (v366 && *(_QWORD *)(v15 + 15) == 0x3E6E6F6974756C6FLL)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E80EC();
      goto LABEL_1756;
    }
  }
  if (v67)
  {
    v368 = *(_QWORD *)v15 == 0x74733C746E697270 && *((_QWORD *)v15 + 1) == 0x656661732D6B6361;
    v369 = v368 && *((_QWORD *)v15 + 2) == 0x6C61636F6C2D7974;
    if (v369 && v15[24] == 62)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E8138();
      goto LABEL_1756;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6C612D746E697270 && *((_QWORD *)v15 + 1) == 0x737465732D736169)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E8184();
      goto LABEL_1756;
    }
  }
  if (v29)
  {
    v372 = *(_QWORD *)v15 == 0x72702D746E697270 && *((_QWORD *)v15 + 1) == 0x6965746163696465;
    if (v372 && *(_QWORD *)(v15 + 11) == 0x6F666E6965746163)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E81D0();
      goto LABEL_1756;
    }
  }
  if (v27)
  {
    if (*(_QWORD *)v15 == 0x756D2D746E697270 && *((_QWORD *)v15 + 1) == 0x7475636578657473 && v15[16] == 101)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E821C();
      goto LABEL_1756;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x656D2D746E697270 && *(_QWORD *)(v15 + 7) == 0x7366657265646D65)
    {
      v516[0].n128_u64[0] = (unint64_t)llvm::dbgs((llvm *)v215);
      sub_1C62E8268();
      goto LABEL_1756;
    }
  }
  else if (v16 == 11 && *(_QWORD *)v15 == 0x69636F7373616572 && *(_QWORD *)(v15 + 3) == 0x65746169636F7373)
  {
    bzero(v516, 0x230uLL);
    for (i = 120; i != 552; i += 24)
    {
      v440 = (char *)v516 + i;
      *(_QWORD *)v440 = 0;
      *((_QWORD *)v440 + 1) = 0;
      *((_DWORD *)v440 + 4) = 0;
    }
    sub_1C62E82B4();
    sub_1C5A55684(v516);
    goto LABEL_1756;
  }
  if (v32)
  {
    v380 = *(_QWORD *)v15 == 0x6E61646E75646572 && *((_QWORD *)v15 + 1) == 0x6E692D6762642D74;
    if (v380 && *(_QWORD *)(v15 + 15) == 0x6D696C652D74736ELL)
    {
      sub_1C62E8334();
      goto LABEL_1756;
    }
  }
  if (v16 == 7 && *(_DWORD *)v15 == 845636978 && *(_DWORD *)(v15 + 3) == 1835363634)
  {
    sub_1C62E8378();
    goto LABEL_1756;
  }
  if (v35)
  {
    v383 = *(_QWORD *)v15 == 0x7A6972616C616373 && *((_QWORD *)v15 + 1) == 0x64656B73616D2D65;
    v384 = v383 && *((_QWORD *)v15 + 2) == 0x746E692D6D656D2DLL;
    if (v384 && *(_QWORD *)(v15 + 19) == 0x6E6972746E692D6DLL)
    {
      sub_1C62E83BC();
      goto LABEL_1756;
    }
  }
  if (v16 == 10)
  {
    if (*(_QWORD *)v15 == 0x7A6972616C616373 && *((_WORD *)v15 + 4) == 29285)
    {
      v516[0].n128_u32[0] = 0;
      sub_1C62E8400(v510, (int *)v516);
      goto LABEL_1756;
    }
  }
  else if (v101)
  {
    v387 = *(_QWORD *)v15 == 0x6574617261706573 && *((_QWORD *)v15 + 1) == 0x6F2D74736E6F632DLL;
    v388 = v387 && *((_QWORD *)v15 + 2) == 0x72662D7465736666;
    if (v388 && *(_QWORD *)(v15 + 22) == 0x7065672D6D6F7266)
    {
      v516[0].n128_u8[0] = 0;
      sub_1C62E8464();
      goto LABEL_1756;
    }
  }
  if (v218)
  {
    if (*(_DWORD *)v15 == 1885561715)
    {
      sub_1C62E84B4();
      goto LABEL_1756;
    }
    if (*(_DWORD *)v15 == 1802398067)
    {
      sub_1C62E84FC();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x746365762D706C73 && *(_QWORD *)(v15 + 6) == 0x72657A69726F7463)
    {
      *(_QWORD *)&v521 = 0;
      v519 = 0u;
      v520 = 0u;
      v517 = 0u;
      memset(v518, 0, sizeof(v518));
      memset(v516, 0, sizeof(v516));
      sub_1C62E8540(v510, (uint64_t)v516);
      sub_1C62EA8E4((uint64_t)&v518[4] + 8);
      sub_1C62EA8E4((uint64_t)&v518[1] + 8);
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1920167027)
  {
    sub_1C62E86C8();
    goto LABEL_1756;
  }
  if (v26)
  {
    v391 = *(_QWORD *)v15 == 0x74616C7563657073 && *((_QWORD *)v15 + 1) == 0x636578652D657669;
    if (v391 && *(_QWORD *)(v15 + 13) == 0x6E6F697475636578)
    {
      v516[0].n128_u8[0] = byte_1ED836950;
      v516[0].n128_u64[1] = 0;
      sub_1C62E870C();
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1634693747)
  {
    bzero(v516, 0x2C0uLL);
    *(_QWORD *)&v518[0] = &v518[1];
    HIDWORD(v518[0]) = 16;
    v523 = &v525;
    HIDWORD(v524) = 8;
    v530 = 0u;
    v531 = 0;
    v532 = v534;
    v533 = 16;
    memset(&v534[128], 0, 44);
    v535 = v537;
    v536 = 2;
    v537[1] = 0u;
    v538 = 0;
    v539 = &v541;
    v540 = 2;
    sub_1C62E8770();
    sub_1C5A55934((uint64_t)v516);
    goto LABEL_1756;
  }
  if (v34)
  {
    v393 = *(_QWORD *)v15 == 0x63672D7069727473 && *((_QWORD *)v15 + 1) == 0x7461636F6C65722DLL;
    if (v393 && *((_WORD *)v15 + 8) == 29541)
    {
      sub_1C62E881C();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x7275746375727473 && *(_QWORD *)(v15 + 6) == 0x676663657A697275)
    {
      sub_1C62E8860();
      goto LABEL_1756;
    }
  }
  if (v240)
  {
    if (*(_QWORD *)v15 == 0x6C6C61636C696174 && *((_DWORD *)v15 + 2) == 1835625573)
    {
      sub_1C62E88A4();
      goto LABEL_1756;
    }
  }
  if (v33)
  {
    if (*(_QWORD *)v15 == 0x6F6C2D7966696E75 && *((_QWORD *)v15 + 1) == 0x73746978652D706FLL)
    {
      sub_1C62E88F0();
      goto LABEL_1756;
    }
  }
  if (v31)
  {
    if (*(_QWORD *)v15 == 0x632D726F74636576 && *(_QWORD *)(v15 + 6) == 0x656E69626D6F632DLL)
    {
      v516[0].n128_u8[0] = 0;
      sub_1C62E8934();
      goto LABEL_1756;
    }
  }
  if (v16 == 6)
  {
    if (*(_DWORD *)v15 == 1769104758 && *((_WORD *)v15 + 2) == 31078)
    {
      v516[0].n128_u8[0] = 1;
      sub_1C62E8988();
      goto LABEL_1756;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x643C796669726576 && *(_QWORD *)(v15 + 7) == 0x3E656572746D6F64)
    {
      sub_1C62E89D8();
      goto LABEL_1756;
    }
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x6C3C796669726576 && *(_QWORD *)(v15 + 5) == 0x3E73706F6F6C3C79)
    {
      sub_1C62E8A1C();
      goto LABEL_1756;
    }
  }
  if (v27)
  {
    if (*(_QWORD *)v15 != 0x6D3C796669726576 || *((_QWORD *)v15 + 1) != 0x61737379726F6D65 || v15[16] != 62)
      goto LABEL_1497;
    sub_1C62E8A60();
LABEL_1756:
    *v12 = 0;
    return;
  }
  if (v28)
  {
    if (*(_QWORD *)v15 == 0x723C796669726576 && *(_QWORD *)(v15 + 7) == 0x3E736E6F69676572)
    {
      sub_1C62E8AA4();
      goto LABEL_1756;
    }
  }
LABEL_1497:
  if (v30)
  {
    v405 = *(_QWORD *)v15 == 0x733C796669726576 && *((_QWORD *)v15 + 1) == 0x746E696F70656661;
    if (v405 && *((_DWORD *)v15 + 4) == 1047685421)
    {
      sub_1C62E8AE8();
      goto LABEL_1756;
    }
  }
  if (v502)
  {
    v407 = *(_QWORD *)v15 == 0x733C796669726576 && *((_QWORD *)v15 + 1) == 0x76652D72616C6163;
    if (v407 && *((_QWORD *)v15 + 2) == 0x3E6E6F6974756C6FLL)
    {
      sub_1C62E8B2C();
      goto LABEL_1756;
    }
  }
  if (v257 && *(_QWORD *)v15 == 0x6766632D77656976)
  {
    sub_1C62E8B70();
    goto LABEL_1756;
  }
  if ((_DWORD)v215)
  {
    if (*(_QWORD *)v15 == 0x6766632D77656976 && *(_QWORD *)(v15 + 5) == 0x796C6E6F2D676663)
    {
      sub_1C62E8BB4();
      goto LABEL_1756;
    }
  }
  if (v257 && *(_QWORD *)v15 == 0x7473696F68736C74)
  {
    v517 = 0u;
    v518[0] = 0u;
    memset(v516, 0, sizeof(v516));
    sub_1C62E8BF8(v510, (__int128 *)v516);
    sub_1C62EA928((uint64_t)&v516[1]);
    goto LABEL_1756;
  }
  if (v27)
  {
    v410 = *(_QWORD *)v15 == 0x726F66736E617274 && *((_QWORD *)v15 + 1) == 0x6E696E7261772D6DLL;
    if (v410 && v15[16] == 103)
    {
      sub_1C62E8CD8();
      goto LABEL_1756;
    }
  }
  if (v218 && *(_DWORD *)v15 == 1851880308)
  {
    sub_1C62E8D20();
    goto LABEL_1756;
  }
  v412 = v215;
  v501 = v33;
  v503 = v102;
  v413 = v29;
  v495 = v30;
  v498 = v31;
  v414 = v27;
  if (v16 == 7 && *(_DWORD *)v15 == 1886217581 && *(_DWORD *)(v15 + 3) == 1718579824)
  {
    sub_1C62E8D64();
    goto LABEL_1756;
  }
  if (sub_1C5A3C044((char *)v15, v16, "early-cse", 9uLL))
  {
    if (v16 >= 9)
    {
      if (*(_QWORD *)v15 != 0x73632D796C726165 || v15[8] != 101)
        goto LABEL_1546;
      v15 += 9;
      v16 -= 9;
    }
    if (!v16)
    {
      v419 = 0;
      goto LABEL_1682;
    }
LABEL_1546:
    v417 = v15 + 1;
    v418 = *v15;
    v419 = v16 - (v418 == 60);
    if (v418 == 60)
    {
      ++v15;
      if (v419)
      {
        if (v417[v419 - 1] == 62 && v419 >= v419 - 1)
          --v419;
      }
    }
LABEL_1682:
    sub_1C5A551F4((uint64_t)v516, (uint64_t)v15, v419, "memssa", 6uLL, (uint64_t)"EarlyCSE", 8);
    if ((v516[0].n128_u8[8] & 1) == 0)
    {
      v556[0] = v516[0].n128_u8[0];
      sub_1C62E8DAC();
LABEL_1765:
      v438 = 0;
      goto LABEL_1742;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "ee-instrument", 0xDuLL))
  {
    if (v16 >= 0xD)
    {
      if (*(_QWORD *)v15 != 0x7274736E692D6565 || *(_QWORD *)(v15 + 5) != 0x746E656D75727473)
        goto LABEL_1565;
      v15 += 13;
      v16 -= 13;
    }
    if (!v16)
    {
      v423 = 0;
      goto LABEL_1715;
    }
LABEL_1565:
    v421 = v15 + 1;
    v422 = *v15;
    v423 = v16 - (v422 == 60);
    if (v422 == 60)
    {
      ++v15;
      if (v423)
      {
        if (v421[v423 - 1] == 62 && v423 >= v423 - 1)
          --v423;
      }
    }
LABEL_1715:
    sub_1C5A551F4((uint64_t)v516, (uint64_t)v15, v423, "post-inline", 0xBuLL, (uint64_t)"EntryExitInstrumenter", 21);
    if ((v516[0].n128_u8[8] & 1) == 0)
    {
      v556[0] = v516[0].n128_u8[0];
      sub_1C62E8E04();
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "lower-matrix-intrinsics", 0x17uLL))
  {
    if (v16 >= 0x17)
    {
      if (*(_QWORD *)v15 != 0x616D2D7265776F6CLL
        || *((_QWORD *)v15 + 1) != 0x746E692D78697274
        || *(_QWORD *)(v15 + 15) != 0x736369736E697274)
      {
        goto LABEL_1645;
      }
      v15 += 23;
      v16 -= 23;
    }
    if (!v16)
    {
      v432 = 0;
      goto LABEL_1740;
    }
LABEL_1645:
    v430 = v15 + 1;
    v431 = *v15;
    v432 = v16 - (v431 == 60);
    if (v431 == 60)
    {
      ++v15;
      if (v432)
      {
        if (v430[v432 - 1] == 62 && v432 >= v432 - 1)
          --v432;
      }
    }
LABEL_1740:
    sub_1C5A551F4((uint64_t)v516, (uint64_t)v15, v432, "minimal", 7uLL, (uint64_t)"LowerMatrixIntrinsics", 21);
    if ((v516[0].n128_u8[8] & 1) == 0)
    {
      v556[0] = v516[0].n128_u8[0];
      sub_1C62E8E54();
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "loop-unroll", 0xBuLL))
  {
    sub_1C5A3C174((uint64_t)v516, v15, v16, v437);
    if ((v517 & 1) == 0)
    {
      *(__n128 *)v556 = v516[0];
      *(__n128 *)&v556[12] = *(__n128 *)((char *)v516 + 12);
      sub_1C62E8EA8(v510, v556);
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "msan", 4uLL))
  {
    sub_1C5A3C6C8((uint64_t)v516, v15, v16);
    if ((v516[1].n128_u8[0] & 1) == 0)
    {
      *(_QWORD *)v556 = v516[0].n128_u64[0];
      *(_DWORD *)&v556[8] = v516[0].n128_u32[2];
      sub_1C62E8F14();
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "simplifycfg", 0xBuLL))
  {
    sub_1C5A3CAC0((uint64_t)v516, v15, v16);
    if ((v516[1].n128_u8[8] & 1) == 0)
    {
      *(__n128 *)v556 = v516[0];
      *(_QWORD *)&v556[16] = v516[1].n128_u64[0];
      sub_1C5C48FA4((uint64_t)v556);
      sub_1C5A49B48();
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "loop-vectorize", 0xEuLL))
  {
    sub_1C5A3D1A4((uint64_t)v556, v15, v16);
    if ((v556[8] & 1) == 0)
    {
      v516[0].n128_u8[0] = v556[0] & 1 | (byte_1ED838890 == 0);
      v452 = HIBYTE(*(unsigned __int16 *)v556) & 1;
      if (!byte_1ED838950)
        LOBYTE(v452) = 1;
      v516[0].n128_u8[1] = v452;
      sub_1C62E8F78();
      goto LABEL_1765;
    }
    goto LABEL_1760;
  }
  if (sub_1C5A3C044((char *)v15, v16, "mldst-motion", 0xCuLL))
  {
    sub_1C5A3C0CC((uint64_t)v516, (uint64_t)v15, v16);
    if ((v516[0].n128_u8[8] & 1) == 0)
    {
      v556[0] = v516[0].n128_u8[0];
      sub_1C62E8FF4();
      goto LABEL_1765;
    }
    goto LABEL_1741;
  }
  if (sub_1C5A3C044((char *)v15, v16, "gvn", 3uLL))
  {
    sub_1C5A3D71C((uint64_t)v556, v15, v16);
    if ((v556[16] & 1) == 0)
    {
      sub_1C62EA96C((uint64_t)v516, *(uint64_t *)v556, *(__int16 *)&v556[8]);
      sub_1C62E9048();
      sub_1C5A55A68((uint64_t)v516);
      goto LABEL_1765;
    }
    goto LABEL_1760;
  }
  v441 = sub_1C5A3C044((char *)v15, v16, "print<stack-lifetime>", 0x15uLL);
  if (v441)
  {
    sub_1C5A3DAFC((uint64_t)v516, v15, v16);
    if ((v516[0].n128_u8[8] & 1) == 0)
    {
      v443 = v516[0].n128_u32[0];
      v444 = llvm::dbgs(v442);
      *(_QWORD *)v556 = v443;
      *(_QWORD *)&v556[8] = v444;
      sub_1C62E90FC();
      goto LABEL_1765;
    }
LABEL_1741:
    v438 = v516[0].n128_u64[0];
LABEL_1742:
    *v12 = v438;
    return;
  }
  if (v508)
  {
    if (*(_QWORD *)v15 == 0x616C662D706F6F6CLL && *((_DWORD *)v15 + 2) == 1852142708)
      goto LABEL_1959;
  }
  if (v501)
  {
    if (*(_QWORD *)v15 == 0x746E692D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x65676E6168637265)
    {
      sub_1C62E3648((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v413)
  {
    v447 = *(_QWORD *)v15 == 0x726E752D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x2D646E612D6C6C6FLL;
    if (v447 && *(_QWORD *)(v15 + 11) == 0x6D616A2D646E612DLL)
    {
      LODWORD(__p) = 2;
      sub_1C62E375C((int *)&__p, 0, 0, 0, (uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v498)
  {
    if (*(_QWORD *)v15 == 0x6F6C2D706F2D6F6ELL && *(_QWORD *)(v15 + 6) == 0x7473656E706F6F6CLL)
    {
      sub_1C5A3DE70((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v508)
  {
    if (*(_QWORD *)v15 == 0x72662D6E6F6E6163 && *((_DWORD *)v15 + 2) == 1702520165)
    {
      sub_1C62E3890((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v16 == 7)
  {
    if (*(_DWORD *)v15 == 762605412 && *(_DWORD *)(v15 + 3) == 1734632493)
    {
      sub_1C62E3900((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x6164696C61766E69 && *(_QWORD *)(v15 + 7) == 0x3E6C6C613C657461)
    {
      sub_1C62E3970((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  else if (v16 == 10)
  {
    if (*(_QWORD *)v15 == 0x6964692D706F6F6CLL && *((_WORD *)v15 + 4) == 28015)
    {
      sub_1C62E39E0((uint64_t)v516);
      goto LABEL_1980;
    }
    if (*(_QWORD *)v15 == 0x6F6C2D706F2D6F6ELL && *((_WORD *)v15 + 4) == 28783)
    {
      v456 = operator new();
      *(_QWORD *)v456 = &off_1E818E960;
LABEL_1965:
      v516[0].n128_u64[0] = v456;
      memset(&v516[0].n128_i8[8], 0, 24);
      LODWORD(v517) = 0;
      sub_1C62E72F8();
      sub_1C62E77F0();
      sub_1C62E4E40(v510, v516);
      *(_QWORD *)v556 = &v516[0].n128_u64[1];
      goto LABEL_1981;
    }
  }
  else if (v414)
  {
    if (*(_QWORD *)v15 == 0x736E692D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x66696C706D697374 && v15[16] == 121)
    {
      sub_1C62E3A54((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  else if (v16 == 11 && *(_QWORD *)v15 == 0x746F722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x657461746F722D70)
  {
    LOWORD(__p) = 1;
    sub_1C62E3AC8((__int16 *)&__p, 0, 0, 0, (uint64_t)v516);
    goto LABEL_1980;
  }
  if (v316)
  {
    if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
    {
      v487 = llvm::dbgs((llvm *)v441);
      v456 = operator new();
      *(_QWORD *)v456 = off_1E818E9A0;
      *(_QWORD *)(v456 + 8) = v487;
      *(_QWORD *)(v456 + 16) = 0;
      *(_BYTE *)(v456 + 39) = 0;
      goto LABEL_1965;
    }
  }
  if (v412)
  {
    if (*(_QWORD *)v15 == 0x6C65642D706F6F6CLL && *(_QWORD *)(v15 + 5) == 0x6E6F6974656C6564)
    {
      sub_1C62E3B74((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v501)
  {
    if (*(_QWORD *)v15 == 0x6D69732D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6766637966696C70)
    {
      sub_1C62E3BE8((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v16 == 11)
  {
    if (*(_QWORD *)v15 == 0x6465722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6563756465722D70)
    {
      sub_1C62E3C5C((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  else if (v16 == 7 && *(_DWORD *)v15 == 1986293353 && *(_DWORD *)(v15 + 3) == 1936875894)
  {
    LOBYTE(__p) = 1;
    sub_1C62E3CCC((uint64_t)v516, (char *)&__p);
    goto LABEL_1980;
  }
  if (v501)
  {
    if (*(_QWORD *)v15 == 0x726E752D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6C6C75662D6C6C6FLL)
    {
      LODWORD(__p) = 2;
      WORD2(__p) = 0;
      sub_1C62E3D4C((uint64_t)v516, (uint64_t *)&__p);
      goto LABEL_1980;
    }
  }
  if (v414)
  {
    if (*(_QWORD *)v15 != 0x63612D746E697270 || *((_QWORD *)v15 + 1) != 0x666E692D73736563 || v15[16] != 111)
      goto LABEL_1901;
    __p = llvm::dbgs((llvm *)v441);
    sub_1C62E3DC8((uint64_t)v516, (uint64_t *)&__p);
LABEL_1980:
    sub_1C62E4E40(v510, v516);
    *(_QWORD *)v556 = &v516[0].n128_u64[1];
LABEL_1981:
    sub_1C4764BBC((void ***)v556);
    v300 = v516[0].n128_u64[0];
LABEL_1026:
    v516[0].n128_u64[0] = 0;
    if (v300)
      (*(void (**)(unint64_t))(*(_QWORD *)v300 + 8))(v300);
    goto LABEL_1756;
  }
  if (v16 == 10)
  {
    if (*(_QWORD *)v15 == 0x64643C746E697270 && *((_WORD *)v15 + 4) == 15975)
    {
      __p = llvm::dbgs((llvm *)v441);
      sub_1C62E3E40((uint64_t)v516, (uint64_t *)&__p);
      goto LABEL_1980;
    }
  }
  else if (v28)
  {
    if (*(_QWORD *)v15 == 0x76693C746E697270 && *(_QWORD *)(v15 + 7) == 0x3E73726573752D76)
    {
      __p = llvm::dbgs((llvm *)v441);
      sub_1C62E3EB8((uint64_t)v516, (uint64_t *)&__p);
      goto LABEL_1980;
    }
    if (*(_QWORD *)v15 == 0x6F6C3C746E697270 && *(_QWORD *)(v15 + 7) == 0x3E7473656E706F6FLL)
    {
      __p = llvm::dbgs((llvm *)v441);
      sub_1C62E3F30((uint64_t)v516, (uint64_t *)&__p);
      goto LABEL_1980;
    }
  }
LABEL_1901:
  if (v503)
  {
    v471 = *(_QWORD *)v15 == 0x6F6C3C746E697270 && *((_QWORD *)v15 + 1) == 0x65686361632D706FLL;
    if (v471 && *(_QWORD *)(v15 + 14) == 0x3E74736F632D6568)
    {
      __p = llvm::dbgs((llvm *)v441);
      sub_1C62E3FA8((uint64_t)v516, (uint64_t *)&__p);
      goto LABEL_1980;
    }
  }
  if (v501)
  {
    if (*(_QWORD *)v15 == 0x6572702D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x6E6F697461636964)
    {
      sub_1C62E4020((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v498)
  {
    if (*(_QWORD *)v15 == 0x69772D6472617567 && *(_QWORD *)(v15 + 6) == 0x676E696E65646977)
    {
      sub_1C62E4090((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v501)
  {
    if (*(_QWORD *)v15 == 0x756F622D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x74696C70732D646ELL)
    {
      sub_1C62E4100((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (v16 == 11 && *(_QWORD *)v15 == 0x7265722D706F6F6CLL && *(_QWORD *)(v15 + 3) == 0x6C6C6F7265722D70)
  {
    sub_1C62E4170((uint64_t)v516);
    goto LABEL_1980;
  }
  if (v495)
  {
    v477 = *(_QWORD *)v15 == 0x7265762D706F6F6CLL && *((_QWORD *)v15 + 1) == 0x2D676E696E6F6973;
    if (v477 && *((_DWORD *)v15 + 4) == 1835231596)
    {
      sub_1C62E41E0((uint64_t)v516);
      goto LABEL_1980;
    }
  }
  if (sub_1C5A3C044((char *)v15, v16, "simple-loop-unswitch", 0x14uLL))
  {
    sub_1C5A3DFF4((uint64_t)v556, (uint64_t)v15, v16);
    if ((v556[8] & 1) == 0)
    {
      LOWORD(v515) = *(_WORD *)v556 & 0x101;
      sub_1C62E4250((uint64_t)v516, (__int16 *)&v515);
      sub_1C62E4E40(v510, v516);
      __p = &v516[0].n128_i8[8];
      p_p = &__p;
      goto LABEL_1947;
    }
LABEL_1760:
    v438 = *(_QWORD *)v556;
    goto LABEL_1742;
  }
  if (sub_1C5A3C044((char *)v15, v16, "licm", 4uLL))
  {
    sub_1C5A3E318((uint64_t)v556, v15, v16, "licm", 4uLL);
    if ((v556[16] & 1) != 0)
      goto LABEL_1760;
    __p = *(void **)v556;
    LODWORD(v513) = *(_DWORD *)&v556[8];
    sub_1C62E42D0((uint64_t *)&__p, 0, 0, 0, (uint64_t)v516);
LABEL_1946:
    sub_1C62E4E40(v510, v516);
    v515 = &v516[0].n128_u64[1];
    p_p = (void **)&v515;
LABEL_1947:
    sub_1C4764BBC((void ***)p_p);
    v480 = v516[0].n128_u64[0];
    v516[0].n128_u64[0] = 0;
    if (v480)
      (*(void (**)(unint64_t))(*(_QWORD *)v480 + 8))(v480);
    goto LABEL_1765;
  }
  if (sub_1C5A3C044((char *)v15, v16, "lnicm", 5uLL))
  {
    sub_1C5A3E318((uint64_t)v556, v15, v16, "lnicm", 5uLL);
    if ((v556[16] & 1) != 0)
      goto LABEL_1760;
    __p = *(void **)v556;
    LODWORD(v513) = *(_DWORD *)&v556[8];
    sub_1C62E4380((uint64_t)v516);
    goto LABEL_1946;
  }
  v481 = *(unsigned int *)(v10 + 1672);
  if ((_DWORD)v481)
  {
    v482 = (_QWORD *)(*(_QWORD *)(v10 + 1664) + 24);
    v483 = 32 * v481;
    do
    {
      v484 = v8[2];
      v485 = 0xCCCCCCCCCCCCCCCDLL * ((v8[3] - v484) >> 3);
      v516[0] = *(__n128 *)v8;
      *(_QWORD *)v556 = v484;
      *(_QWORD *)&v556[8] = v485;
      if (!*v482)
        goto LABEL_1958;
      if ((*(unsigned int (**)(_QWORD, __n128 *, uint64_t, _BYTE *))(*(_QWORD *)*v482 + 48))(*v482, v516, v510, v556))
      {
        goto LABEL_1756;
      }
      v482 += 4;
      v483 -= 32;
    }
    while (v483);
  }
  v516[0].n128_u64[0] = (unint64_t)"unknown function pass '{0}'";
  v516[0].n128_u64[1] = 27;
  v516[1].n128_u64[0] = (unint64_t)v518;
  v516[1].n128_u64[1] = 1;
  *(_QWORD *)&v517 = &unk_1E818C130;
  *((_QWORD *)&v517 + 1) = v8;
  *(_QWORD *)&v518[0] = &v517;
  sub_1C4DCAF2C((uint64_t)v516, v556);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  __p = (void *)3;
  v513 = qword_1ED836B58[0];
  sub_1C5A3BD58(v12, (uint64_t)v556, (uint64_t *)&__p);
  if ((v556[23] & 0x80000000) != 0)
  {
    v52 = *(void **)v556;
    goto LABEL_55;
  }
}

void llvm::PassBuilder::parseLoopPassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;

  if (a4)
  {
    v9 = 40 * (_QWORD)a4;
    while (1)
    {
      llvm::PassBuilder::parseLoopPass(a1, a2, a3, a4, a5);
      if (*a5)
        break;
      a3 += 40;
      v9 -= 40;
      if (!v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *a5 = 0;
  }
}

void sub_1C5A49A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[2368];
  int v20;
  uint64_t v21;

  sub_1C5A649A4();
  v21 = *MEMORY[0x1E0C80C00];
  sub_1C5A64980();
  sub_1C5A64B80();
  sub_1C5A5BC14(v2, v3);
  v20 = *(_DWORD *)(v1 + 2368);
  v4 = sub_1C5A64B70((uint64_t)&unk_1E81907E0);
  sub_1C5A5BC14((uint64_t)v4, v5);
  *(_DWORD *)(v0 + 2376) = v20;
  sub_1C5A64868();
  if (v8)
  {
    v9 = sub_1C5A6485C(v6);
    v17 = sub_1C5705608((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v18, v0);
    if (v17)
      sub_1C57055F0(v17);
  }
  else
  {
    *v7 = v0;
    sub_1C5A64874((uint64_t)(v7 + 1));
  }
  sub_1C57906B0((uint64_t)v19);
  sub_1C5A64A40();
}

void sub_1C5A49B48()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1C5A64B34();
  v0 = sub_1C5A64980();
  sub_1C5A64BBC(v0);
  v2 = sub_1C5A64838(v1, (uint64_t)&unk_1E81907A0);
  if (v4)
  {
    v5 = sub_1C5A6485C((uint64_t)v2);
    v13 = sub_1C5705608((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
    if (v13)
      sub_1C57055F0(v13);
  }
  else
  {
    sub_1C5A64880((uint64_t)v2, v3);
  }
  sub_1C57055FC();
}

void llvm::PassBuilder::parseLoopPass(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  llvm *v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  void **v99;
  unint64_t v100;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  _QWORD *v118;
  uint64_t (**v119)();
  _QWORD *v120;
  char *v121;
  void *v122;
  void *__p[2];
  char v124;
  __int128 v125;
  void *v126[2];
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  __int128 *v130;
  _QWORD v131[2];
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  void **v136;
  uint64_t v137;
  _BYTE v138[16];
  __int16 v139;
  int v140;
  _OWORD v141[3];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v125 = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  if (v9 != v10)
  {
    if (*((_QWORD *)&v125 + 1) == 4 && *(_DWORD *)v125 == 1886351212)
    {
      v32 = (void **)&v127;
      v126[0] = &v127;
      v126[1] = (void *)0x600000000;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0u;
      v35 = 40 * ((v10 - v9) / 40);
      while (1)
      {
        llvm::PassBuilder::parseLoopPass(a1, v126, v9);
        if (*a5)
          break;
        v9 += 40;
        v35 -= 40;
        if (!v35)
        {
          *a5 = 0;
          sub_1C62E9158(a2, (uint64_t)v126);
          *a5 = 0;
          break;
        }
      }
      v136 = (void **)&v134 + 1;
      sub_1C4764BBC(&v136);
      v136 = (void **)&v133;
      sub_1C4764BBC(&v136);
      v34 = (void **)v126[0];
    }
    else
    {
      v11 = sub_1C5A3BC6C((_DWORD *)v125, *((unint64_t *)&v125 + 1), a3, a4);
      if (!HIDWORD(v11))
      {
        v12 = *(unsigned int *)(a1 + 1832);
        if ((_DWORD)v12)
        {
          v13 = (_QWORD *)(*(_QWORD *)(a1 + 1824) + 24);
          v14 = 32 * v12;
          do
          {
            v15 = *(void ***)(a3 + 16);
            v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 24) - (_QWORD)v15) >> 3);
            *(_OWORD *)v126 = v125;
            v136 = v15;
            v137 = v16;
            if (!*v13)
              goto LABEL_355;
            if ((*(unsigned int (**)(_QWORD, void **, uint64_t, void ***))(*(_QWORD *)*v13 + 48))(*v13, v126, a2, &v136))
            {
              goto LABEL_330;
            }
            v13 += 4;
            v14 -= 32;
          }
          while (v14);
        }
        v126[0] = "invalid use of '{0}' pass as loop pipeline";
        v126[1] = (void *)42;
        v127 = v131;
        v128 = 1;
        v129 = &unk_1E8168E00;
        v130 = &v125;
        v131[0] = &v129;
        sub_1C4DCAF2C((uint64_t)v126, __p);
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v18 = qword_1ED836B58[0];
        v19 = operator new();
        v139 = 260;
        v136 = __p;
        *(_QWORD *)v19 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v136, (_QWORD *)(v19 + 8));
        *(_QWORD *)(v19 + 32) = 3;
        *(_QWORD *)(v19 + 40) = v18;
        *(_BYTE *)(v19 + 48) = 1;
        *a5 = v19;
        if (v124 < 0)
        {
          v20 = (void **)__p[0];
LABEL_14:
          operator delete(v20);
          return;
        }
        return;
      }
      v31 = v11;
      v32 = (void **)v138;
      v136 = (void **)v138;
      v137 = 0x600000000;
      v140 = 0;
      memset(v141, 0, sizeof(v141));
      v33 = 40 * ((v10 - v9) / 40);
      while (1)
      {
        llvm::PassBuilder::parseLoopPass(a1, &v136, v9);
        if (*a5)
          break;
        v9 += 40;
        v33 -= 40;
        if (!v33)
        {
          *a5 = 0;
          LODWORD(v126[0]) = v31;
          sub_1C62EAA54((uint64_t)&v126[1], (uint64_t)&v136);
          sub_1C62E9230();
          __p[0] = &v135;
          sub_1C4764BBC((void ***)__p);
          __p[0] = (char *)&v133 + 8;
          sub_1C4764BBC((void ***)__p);
          if (v126[1] != &v128)
            free(v126[1]);
          *a5 = 0;
          break;
        }
      }
      v126[0] = (char *)&v141[1] + 8;
      sub_1C4764BBC((void ***)v126);
      v126[0] = v141;
      sub_1C4764BBC((void ***)v126);
      v34 = v136;
    }
    if (v34 != v32)
      free(v34);
    return;
  }
  switch(*((_QWORD *)&v125 + 1))
  {
    case 5:
      if (*(_DWORD *)v125 != 1852404336 || *(_BYTE *)(v125 + 4) != 116)
        goto LABEL_275;
      v22 = llvm::dbgs((llvm *)a1);
      v23 = *(_DWORD *)(a2 + 64);
      v24 = v23 + 1;
      v25 = *(unsigned int *)(a2 + 8);
      if ((v23 + 1) <= (_DWORD)v25 << 6)
      {
        *(_DWORD *)(a2 + 64) = v24;
      }
      else
      {
        if ((v23 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v25 - 8) &= ~(-1 << (v23 & 0x3F));
        *(_DWORD *)(a2 + 64) = v24;
        v26 = v23 + 64;
        if ((_DWORD)v25 != v26 >> 6)
        {
          v27 = v26 >> 6;
          if (v25 > v27)
          {
            *(_DWORD *)(a2 + 8) = v27;
            LODWORD(v25) = v26 >> 6;
          }
          else
          {
            v28 = v25;
            v29 = v25;
            if (v27 > *(_DWORD *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27, 8);
              v28 = *(unsigned int *)(a2 + 8);
              v29 = *(_DWORD *)(a2 + 8);
            }
            if (v27 != v25)
              bzero((void *)(*(_QWORD *)a2 + 8 * v28), 8 * (v27 - v25));
            LODWORD(v25) = v29 + v27 - v25;
            *(_DWORD *)(a2 + 8) = v25;
            v24 = *(_DWORD *)(a2 + 64);
          }
        }
        v30 = v24 & 0x3F;
        if (v30)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v25 - 8) &= ~(-1 << v30);
      }
      v118 = (_QWORD *)operator new();
      *v118 = off_1E818E9A0;
      v118[1] = v22;
      v118[2] = 0;
      *((_BYTE *)v118 + 39) = 0;
      goto LABEL_326;
    case 7:
      if (*(_DWORD *)v125 == 762605412 && *(_DWORD *)(v125 + 3) == 1734632493)
      {
        sub_1C62E974C();
        goto LABEL_330;
      }
      if (*(_DWORD *)v125 == 1986293353 && *(_DWORD *)(v125 + 3) == 1936875894)
      {
        LOBYTE(v126[0]) = 1;
        sub_1C62E9A4C(a2, (char *)v126);
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0xALL:
      if (*(_QWORD *)v125 == 0x6964692D706F6F6CLL && *(_WORD *)(v125 + 8) == 28015)
      {
        sub_1C62E97FC();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6F6C2D706F2D6F6ELL && *(_WORD *)(v125 + 8) == 28783)
      {
        v110 = *(_DWORD *)(a2 + 64);
        v111 = v110 + 1;
        v112 = *(unsigned int *)(a2 + 8);
        if ((v110 + 1) <= (_DWORD)v112 << 6)
        {
          *(_DWORD *)(a2 + 64) = v111;
        }
        else
        {
          if ((v110 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v112 - 8) &= ~(-1 << (v110 & 0x3F));
          *(_DWORD *)(a2 + 64) = v111;
          v113 = v110 + 64;
          if ((_DWORD)v112 != v113 >> 6)
          {
            v114 = v113 >> 6;
            if (v112 > v114)
            {
              *(_DWORD *)(a2 + 8) = v114;
              LODWORD(v112) = v113 >> 6;
            }
            else
            {
              v115 = v112;
              v116 = v112;
              if (v114 > *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v114, 8);
                v115 = *(unsigned int *)(a2 + 8);
                v116 = *(_DWORD *)(a2 + 8);
              }
              if (v114 != v112)
                bzero((void *)(*(_QWORD *)a2 + 8 * v115), 8 * (v114 - v112));
              LODWORD(v112) = v116 + v114 - v112;
              *(_DWORD *)(a2 + 8) = v112;
              v111 = *(_DWORD *)(a2 + 64);
            }
          }
          v117 = v111 & 0x3F;
          if (v117)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v112 - 8) &= ~(-1 << v117);
        }
        v118 = (_QWORD *)operator new();
        v119 = &off_1E818E960;
        goto LABEL_325;
      }
      if (*(_QWORD *)v125 == 0x64643C746E697270 && *(_WORD *)(v125 + 8) == 15975)
      {
        v126[0] = llvm::dbgs((llvm *)a1);
        sub_1C62E9BA0(a2, (uint64_t *)v126);
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0xBLL:
      if (*(_QWORD *)v125 == 0x746F722D706F6F6CLL && *(_QWORD *)(v125 + 3) == 0x657461746F722D70)
      {
        LOWORD(v126[0]) = 1;
        sub_1C62E98B8(a2, (__int16 *)v126);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6465722D706F6F6CLL && *(_QWORD *)(v125 + 3) == 0x6563756465722D70)
      {
        sub_1C62E99F4();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x7265722D706F6F6CLL && *(_QWORD *)(v125 + 3) == 0x6C6C6F7265722D70)
      {
        sub_1C62E9E38();
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0xCLL:
      if (*(_QWORD *)v125 == 0x616C662D706F6F6CLL && *(_DWORD *)(v125 + 8) == 1852142708)
      {
        sub_1C62E932C((_DWORD *)a2);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x3C65726975716572 && *(_DWORD *)(v125 + 8) == 1046963300)
      {
        sub_1C62E94E4();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x72662D6E6F6E6163 && *(_DWORD *)(v125 + 8) == 1702520165)
      {
        sub_1C62E96F4();
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0xDLL:
      if (*(_QWORD *)v125 != 0x6C65642D706F6F6CLL || *(_QWORD *)(v125 + 5) != 0x6E6F6974656C6564)
        goto LABEL_275;
      sub_1C62E9934();
      goto LABEL_330;
    case 0xELL:
      if (*(_QWORD *)v125 == 0x6F6C2D706F2D6F6ELL && *(_QWORD *)(v125 + 6) == 0x7473656E706F6F6CLL)
      {
        sub_1C5A4B06C((_DWORD *)a2);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x69772D6472617567 && *(_QWORD *)(v125 + 6) == 0x676E696E65646977)
      {
        sub_1C62E9D88();
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0xFLL:
      if (*(_QWORD *)v125 == 0x6164696C61766E69 && *(_QWORD *)(v125 + 7) == 0x3E6764643C657461)
      {
        sub_1C62E953C();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6164696C61766E69 && *(_QWORD *)(v125 + 7) == 0x3E6C6C613C657461)
      {
        sub_1C62E97A4();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x76693C746E697270 && *(_QWORD *)(v125 + 7) == 0x3E73726573752D76)
      {
        v126[0] = llvm::dbgs((llvm *)a1);
        sub_1C62E9C04(a2, (uint64_t *)v126);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6F6C3C746E697270 && *(_QWORD *)(v125 + 7) == 0x3E7473656E706F6FLL)
      {
        v126[0] = llvm::dbgs((llvm *)a1);
        sub_1C62E9C68(a2, (uint64_t *)v126);
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0x10:
      if (*(_QWORD *)v125 == 0x746E692D706F6F6CLL && *(_QWORD *)(v125 + 8) == 0x65676E6168637265)
      {
        sub_1C62E937C((_DWORD *)a2);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6D69732D706F6F6CLL && *(_QWORD *)(v125 + 8) == 0x6766637966696C70)
      {
        sub_1C62E9994();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x726E752D706F6F6CLL && *(_QWORD *)(v125 + 8) == 0x6C6C75662D6C6C6FLL)
      {
        LODWORD(v126[0]) = 2;
        WORD2(v126[0]) = 0;
        sub_1C62E9AC8(a2, (uint64_t *)v126);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6572702D706F6F6CLL && *(_QWORD *)(v125 + 8) == 0x6E6F697461636964)
      {
        sub_1C62E9D30();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 != 0x756F622D706F6F6CLL || *(_QWORD *)(v125 + 8) != 0x74696C70732D646ELL)
        goto LABEL_275;
      sub_1C62E9DE0();
      goto LABEL_330;
    case 0x11:
      if (*(_QWORD *)v125 == 0x3C65726975716572
        && *(_QWORD *)(v125 + 8) == 0x73726573752D7669
        && *(_BYTE *)(v125 + 16) == 62)
      {
        sub_1C62E9594();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x736E692D706F6F6CLL
        && *(_QWORD *)(v125 + 8) == 0x66696C706D697374
        && *(_BYTE *)(v125 + 16) == 121)
      {
        sub_1C62E9858();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x63612D746E697270
        && *(_QWORD *)(v125 + 8) == 0x666E692D73736563
        && *(_BYTE *)(v125 + 16) == 111)
      {
        v126[0] = llvm::dbgs((llvm *)a1);
        sub_1C62E9B3C(a2, (uint64_t *)v126);
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0x13:
      if (*(_QWORD *)v125 == 0x726E752D706F6F6CLL
        && *(_QWORD *)(v125 + 8) == 0x2D646E612D6C6C6FLL
        && *(_QWORD *)(v125 + 11) == 0x6D616A2D646E612DLL)
      {
        LODWORD(v126[0]) = 2;
        sub_1C62E93CC((_DWORD *)a2, (int *)v126);
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 != 0x3C65726975716572
        || *(_QWORD *)(v125 + 8) != 0x6F6C2D706F2D6F6ELL
        || *(_QWORD *)(v125 + 11) != 0x3E706F6F6C2D706FLL)
      {
        goto LABEL_275;
      }
      v42 = *(_DWORD *)(a2 + 64);
      v43 = v42 + 1;
      v44 = *(unsigned int *)(a2 + 8);
      if ((v42 + 1) <= (_DWORD)v44 << 6)
      {
        *(_DWORD *)(a2 + 64) = v43;
      }
      else
      {
        if ((v42 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v44 - 8) &= ~(-1 << (v42 & 0x3F));
        *(_DWORD *)(a2 + 64) = v43;
        v45 = v42 + 64;
        if ((_DWORD)v44 != v45 >> 6)
        {
          v46 = v45 >> 6;
          if (v44 > v46)
          {
            *(_DWORD *)(a2 + 8) = v46;
            LODWORD(v44) = v45 >> 6;
          }
          else
          {
            v47 = v44;
            v48 = v44;
            if (v46 > *(_DWORD *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v46, 8);
              v47 = *(unsigned int *)(a2 + 8);
              v48 = *(_DWORD *)(a2 + 8);
            }
            if (v46 != v44)
              bzero((void *)(*(_QWORD *)a2 + 8 * v47), 8 * (v46 - v44));
            LODWORD(v44) = v48 + v46 - v44;
            *(_DWORD *)(a2 + 8) = v44;
            v43 = *(_DWORD *)(a2 + 64);
          }
        }
        v49 = v43 & 0x3F;
        if (v49)
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v44 - 8) &= ~(-1 << v49);
      }
      v118 = (_QWORD *)operator new();
      v119 = &off_1E81900E0;
      goto LABEL_325;
    case 0x14:
      if (*(_QWORD *)v125 == 0x3C65726975716572
        && *(_QWORD *)(v125 + 8) == 0x692D737365636361
        && *(_DWORD *)(v125 + 16) == 1047488110)
      {
        sub_1C62E9434();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6164696C61766E69
        && *(_QWORD *)(v125 + 8) == 0x73752D76693C6574
        && *(_DWORD *)(v125 + 16) == 1047753317)
      {
        sub_1C62E95EC();
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x7265762D706F6F6CLL
        && *(_QWORD *)(v125 + 8) == 0x2D676E696E6F6973
        && *(_DWORD *)(v125 + 16) == 1835231596)
      {
        sub_1C62E9E90();
        goto LABEL_330;
      }
      goto LABEL_275;
    case 0x16:
      if (*(_QWORD *)v125 == 0x6164696C61766E69
        && *(_QWORD *)(v125 + 8) == 0x706F2D6F6E3C6574
        && *(_QWORD *)(v125 + 14) == 0x3E706F6F6C2D706FLL)
      {
        v102 = *(_DWORD *)(a2 + 64);
        v103 = v102 + 1;
        v104 = *(unsigned int *)(a2 + 8);
        if ((v102 + 1) <= (_DWORD)v104 << 6)
        {
          *(_DWORD *)(a2 + 64) = v103;
        }
        else
        {
          if ((v102 & 0x3F) != 0)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v104 - 8) &= ~(-1 << (v102 & 0x3F));
          *(_DWORD *)(a2 + 64) = v103;
          v105 = v102 + 64;
          if ((_DWORD)v104 != v105 >> 6)
          {
            v106 = v105 >> 6;
            if (v104 > v106)
            {
              *(_DWORD *)(a2 + 8) = v106;
              LODWORD(v104) = v105 >> 6;
            }
            else
            {
              v107 = v104;
              v108 = v104;
              if (v106 > *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v106, 8);
                v107 = *(unsigned int *)(a2 + 8);
                v108 = *(_DWORD *)(a2 + 8);
              }
              if (v106 != v104)
                bzero((void *)(*(_QWORD *)a2 + 8 * v107), 8 * (v106 - v104));
              LODWORD(v104) = v108 + v106 - v104;
              *(_DWORD *)(a2 + 8) = v104;
              v103 = *(_DWORD *)(a2 + 64);
            }
          }
          v109 = v103 & 0x3F;
          if (v109)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v104 - 8) &= ~(-1 << v109);
        }
        v118 = (_QWORD *)operator new();
        v119 = &off_1E8190120;
LABEL_325:
        *v118 = v119;
LABEL_326:
        v126[0] = v118;
        v120 = *(_QWORD **)(a2 + 80);
        if ((unint64_t)v120 >= *(_QWORD *)(a2 + 88))
        {
          v121 = sub_1C4D62F9C((char **)(a2 + 72), (uint64_t *)v126);
          v122 = v126[0];
          *(_QWORD *)(a2 + 80) = v121;
          v126[0] = 0;
          if (v122)
            (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
        }
        else
        {
          *v120 = v118;
          *(_QWORD *)(a2 + 80) = v120 + 1;
        }
        goto LABEL_330;
      }
      if (*(_QWORD *)v125 == 0x6F6C3C746E697270
        && *(_QWORD *)(v125 + 8) == 0x65686361632D706FLL
        && *(_QWORD *)(v125 + 14) == 0x3E74736F632D6568)
      {
        v126[0] = llvm::dbgs((llvm *)a1);
        sub_1C62E9CCC(a2, (uint64_t *)v126);
LABEL_330:
        *a5 = 0;
        return;
      }
LABEL_275:
      if (sub_1C5A3C044((char *)v125, *((size_t *)&v125 + 1), "simple-loop-unswitch", 0x14uLL))
      {
        sub_1C5A3DFF4((uint64_t)v126, v125, *((unint64_t *)&v125 + 1));
        if (((uint64_t)v126[1] & 1) == 0)
        {
          LOWORD(v136) = (uint64_t)v126[0] & 0x101;
          sub_1C62E9EE8(a2, (__int16 *)&v136);
LABEL_333:
          v95 = 0;
          goto LABEL_284;
        }
        goto LABEL_283;
      }
      if (sub_1C5A3C044((char *)v125, *((size_t *)&v125 + 1), "licm", 4uLL))
      {
        sub_1C5A3E318((uint64_t)v126, (_BYTE *)v125, *((size_t *)&v125 + 1), "licm", 4uLL);
        if ((v127 & 1) == 0)
        {
          v136 = (void **)v126[0];
          LODWORD(v137) = v126[1];
          sub_1C62E9F60();
          goto LABEL_333;
        }
LABEL_283:
        v95 = v126[0];
LABEL_284:
        *a5 = (uint64_t)v95;
        return;
      }
      if (sub_1C5A3C044((char *)v125, *((size_t *)&v125 + 1), "lnicm", 5uLL))
      {
        sub_1C5A3E318((uint64_t)v126, (_BYTE *)v125, *((size_t *)&v125 + 1), "lnicm", 5uLL);
        if ((v127 & 1) == 0)
        {
          v136 = (void **)v126[0];
          LODWORD(v137) = v126[1];
          sub_1C62E9FDC((_DWORD *)a2);
          goto LABEL_333;
        }
        goto LABEL_283;
      }
      v96 = *(unsigned int *)(a1 + 1832);
      if ((_DWORD)v96)
      {
        v97 = (_QWORD *)(*(_QWORD *)(a1 + 1824) + 24);
        v98 = 32 * v96;
        while (1)
        {
          v99 = *(void ***)(a3 + 16);
          v100 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 24) - (_QWORD)v99) >> 3);
          *(_OWORD *)v126 = v125;
          v136 = v99;
          v137 = v100;
          if (!*v97)
            break;
          if ((*(unsigned int (**)(_QWORD, void **, uint64_t, void ***))(*(_QWORD *)*v97 + 48))(*v97, v126, a2, &v136))
          {
            goto LABEL_330;
          }
          v97 += 4;
          v98 -= 32;
          if (!v98)
            goto LABEL_290;
        }
LABEL_355:
        sub_1C485C2F0();
      }
LABEL_290:
      v126[0] = "unknown loop pass '{0}'";
      v126[1] = (void *)23;
      v127 = v131;
      v128 = 1;
      v129 = &unk_1E8168E00;
      v130 = &v125;
      v131[0] = &v129;
      sub_1C4DCAF2C((uint64_t)v126, &v136);
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      __p[0] = (void *)3;
      __p[1] = (void *)qword_1ED836B58[0];
      sub_1C5A3BD58(a5, (uint64_t)&v136, (uint64_t *)__p);
      if ((v138[7] & 0x80000000) != 0)
      {
        v20 = v136;
        goto LABEL_14;
      }
      return;
    case 0x17:
      if (*(_QWORD *)v125 != 0x6164696C61766E69
        || *(_QWORD *)(v125 + 8) != 0x73656363613C6574
        || *(_QWORD *)(v125 + 15) != 0x3E6F666E692D7373)
      {
        goto LABEL_275;
      }
      sub_1C62E948C();
      goto LABEL_330;
    case 0x1DLL:
      if (*(_QWORD *)v125 != 0x3C65726975716572
        || *(_QWORD *)(v125 + 8) != 0x736E692D73736170
        || *(_QWORD *)(v125 + 16) != 0x61746E656D757274
        || *(_QWORD *)(v125 + 21) != 0x3E6E6F697461746ELL)
      {
        goto LABEL_275;
      }
      sub_1C62E9644();
      goto LABEL_330;
    case 0x20:
      if (*(_QWORD *)v125 != 0x6164696C61766E69
        || *(_QWORD *)(v125 + 8) != 0x2D737361703C6574
        || *(_QWORD *)(v125 + 16) != 0x656D757274736E69
        || *(_QWORD *)(v125 + 24) != 0x3E6E6F697461746ELL)
      {
        goto LABEL_275;
      }
      sub_1C62E969C();
      goto LABEL_330;
    default:
      goto LABEL_275;
  }
}

void sub_1C5A4B06C(_DWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C5A64AE0(a1);
  *(_QWORD *)sub_1C5A64820() = &off_1E81900A0;
  sub_1C5A64AEC();
  if (v3)
  {
    v4 = sub_1C5A64AD4(v1);
    v12 = sub_1C5A649E4((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_1C57055F0(v12);
  }
  else
  {
    sub_1C5A64BA0(v1, v2);
  }
  sub_1C57055FC();
}

void llvm::PassBuilder::parseAAPassName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD v26[2];

  switch(a4)
  {
    case 4:
      if (*(_DWORD *)a3 != 1633772148)
        goto LABEL_41;
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C5A636A4;
      goto LABEL_50;
    case 7:
      if (*(_DWORD *)a3 != 1986356083 || *(_DWORD *)(a3 + 3) != 1633758582)
        goto LABEL_41;
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C63021F0;
      goto LABEL_50;
    case 8:
      if (*(_QWORD *)a3 != 0x61612D6369736162)
        goto LABEL_41;
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C5A633DC;
      goto LABEL_50;
    case 10:
      if (*(_QWORD *)a3 != 0x2D736C61626F6C67 || *(_WORD *)(a3 + 8) != 24929)
        goto LABEL_41;
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C5A62D74;
      goto LABEL_50;
    case 11:
      if (*(_QWORD *)a3 != 0x6372612D636A626FLL || *(_QWORD *)(a3 + 3) != 0x61612D6372612D63)
        goto LABEL_41;
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C6302188;
      goto LABEL_50;
    case 13:
      if (*(_QWORD *)a3 == 0x65646E612D6C6663 && *(_QWORD *)(a3 + 5) == 0x61612D737265646ELL)
      {
        v7 = *(_DWORD *)(a2 + 8);
        v8 = *(_DWORD *)(a2 + 12);
        v9 = sub_1C63020B8;
        goto LABEL_50;
      }
      if (*(_QWORD *)a3 == 0x656574732D6C6663 && *(_QWORD *)(a3 + 5) == 0x61612D736E656574)
      {
        v7 = *(_DWORD *)(a2 + 8);
        v8 = *(_DWORD *)(a2 + 12);
        v9 = sub_1C6302120;
LABEL_50:
        if (v7 >= v8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 8);
          v7 = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v9;
        ++*(_DWORD *)(a2 + 8);
        return;
      }
LABEL_41:
      v17 = *(unsigned int *)(a1 + 1912);
      if (!(_DWORD)v17)
        return;
      v18 = 32 * v17 - 32;
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 1904) + 24);
      do
      {
        v26[0] = a3;
        v26[1] = a4;
        if (!*v19)
        {
          sub_1C485C2F0();
          llvm::PassBuilder::parsePassPipeline(v21, v22, v23, v24, v25);
          return;
        }
        if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v19 + 48))(*v19, v26, a2) & 1) != 0)
          break;
        v20 = v18;
        v18 -= 32;
        v19 += 4;
      }
      while (v20);
      return;
    case 17:
      if (*(_QWORD *)a3 != 0x6E2D6465706F6373
        || *(_QWORD *)(a3 + 8) != 0x612D7361696C616FLL
        || *(_BYTE *)(a3 + 16) != 97)
      {
        goto LABEL_41;
      }
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(_DWORD *)(a2 + 12);
      v9 = sub_1C5A63540;
      goto LABEL_50;
    default:
      goto LABEL_41;
  }
}

void llvm::PassBuilder::parsePassPipeline(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v23;
  uint64_t v25;
  uint64_t *v26;
  void ***v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const char *v40;
  uint64_t v41;
  BOOL v46;
  BOOL v48;
  BOOL v54;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v72;
  BOOL v73;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  BOOL v82;
  BOOL v83;
  BOOL v85;
  BOOL v86;
  BOOL v90;
  int v95;
  BOOL v99;
  BOOL v101;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v119;
  uint64_t *v120;
  BOOL v124;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  int v140;
  BOOL v141;
  int v142;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  BOOL v162;
  int v164;
  BOOL v165;
  int v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v172;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  BOOL v194;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v220;
  BOOL v222;
  BOOL v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  BOOL v230;
  BOOL v231;
  BOOL v232;
  BOOL v233;
  BOOL v234;
  BOOL v238;
  BOOL v239;
  BOOL v240;
  BOOL v241;
  BOOL v242;
  BOOL v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v254;
  BOOL v255;
  BOOL v258;
  BOOL v260;
  BOOL v261;
  BOOL v262;
  BOOL v263;
  BOOL v264;
  BOOL v265;
  BOOL v266;
  BOOL v267;
  BOOL v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  __int128 v277;
  void *__p[2];
  uint64_t (**v279)(llvm::detail::format_adapter *__hidden);
  __int128 v280;
  uint64_t (**v281)(llvm::detail::format_adapter *__hidden);
  char v282;
  _QWORD v283[2];
  void **v284;
  void **v285;
  unint64_t v286;
  __int128 v287;
  uint64_t (**v288)(llvm::detail::format_adapter *__hidden);
  const char *v289;
  _QWORD v290[2];
  _QWORD v291[2];
  __int128 v292;
  __int128 v293;
  uint64_t (**v294)(llvm::detail::format_adapter *__hidden);
  _QWORD v295[3];

  v295[1] = *MEMORY[0x1E0C80C00];
  v283[0] = a3;
  v283[1] = a4;
  llvm::PassBuilder::parsePipelineText(a3, a4, (uint64_t)&v280);
  if (v282 && (_QWORD)v280 != *((_QWORD *)&v280 + 1))
  {
    v277 = *(_OWORD *)v280;
    if (sub_1C5A3BDE4(v277, *((unint64_t *)&v277 + 1)))
    {
      if ((llvm::Regex::match((uint64_t)&unk_1ED81A520, (char *)v277, *((uint64_t *)&v277 + 1), 0, 0) & 1) != 0)
        goto LABEL_621;
      goto LABEL_5;
    }
    switch(*((_QWORD *)&v277 + 1))
    {
      case 6:
        if (*(_DWORD *)v277 == 1969516397 && *(_WORD *)(v277 + 4) == 25964)
          goto LABEL_621;
        goto LABEL_27;
      case 0x13:
        if (*(_QWORD *)v277 == 0x6E6F6974636E7566
          && *(_QWORD *)(v277 + 8) == 0x692D72656761653CLL
          && *(_QWORD *)(v277 + 11) == 0x3E766E692D726567)
        {
          goto LABEL_621;
        }
        v20 = 0;
        v19 = 0;
        v18 = 1;
        break;
      case 8:
        if (*(_QWORD *)v277 == 0x6E6F6974636E7566)
          goto LABEL_621;
        v18 = 0;
        v20 = 0;
        v19 = 1;
        break;
      case 5:
        if (*(_DWORD *)v277 == 1668507491 && *(_BYTE *)(v277 + 4) == 99)
          goto LABEL_621;
        v18 = 0;
        v19 = 0;
        v20 = 1;
        break;
      default:
LABEL_27:
        v18 = 0;
        v20 = 0;
        v19 = 0;
        break;
    }
    if ((unint64_t)sub_1C5A3BC6C((_DWORD *)v277, *((unint64_t *)&v277 + 1), v8, v9) >> 32)
      goto LABEL_621;
    if (*((_QWORD *)&v277 + 1) != 18)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      switch(*((_QWORD *)&v277 + 1))
      {
        case 0xCLL:
          if (*(_QWORD *)v277 == 0x3C65726975716572 && *(_DWORD *)(v277 + 8) == 1046963052)
            goto LABEL_621;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v34 = 0;
          v33 = 1;
          goto LABEL_253;
        case 0xDLL:
        case 0xELL:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x1CLL:
        case 0x1ELL:
        case 0x1FLL:
          goto LABEL_253;
        case 0xFLL:
          if (*(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 7) == 0x3E67636C3C657461)
            goto LABEL_621;
          if (*(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 7) == 0x3E7966697265763CLL)
            goto LABEL_621;
          v28 = 0;
          v29 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v30 = 1;
          goto LABEL_253;
        case 0x15:
          if (*(_QWORD *)v277 == 0x6164696C61766E69
            && *(_QWORD *)(v277 + 8) == 0x676C6C61633C6574
            && *(_QWORD *)(v277 + 13) == 0x3E68706172676C6CLL)
          {
            goto LABEL_621;
          }
          v46 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x6F6D2D706F2D6F6ELL;
          if (v46 && *(_QWORD *)(v277 + 13) == 0x3E656C75646F6D2DLL)
            goto LABEL_621;
          v48 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x61732D6B63617473;
          if (v48 && *(_QWORD *)(v277 + 13) == 0x3E7974656661732DLL)
            goto LABEL_621;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v31 = 1;
          goto LABEL_253;
        case 0x16:
          if (*(_QWORD *)v277 == 0x3C65726975716572
            && *(_QWORD *)(v277 + 8) == 0x6C696D69732D7269
            && *(_QWORD *)(v277 + 14) == 0x3E79746972616C69)
          {
            goto LABEL_621;
          }
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v28 = 1;
          goto LABEL_253;
        case 0x17:
          if (*(_QWORD *)v277 == 0x3C65726975716572
            && *(_QWORD *)(v277 + 8) == 0x732D656C75646F6DLL
            && *(_QWORD *)(v277 + 15) == 0x3E7972616D6D7573)
          {
            goto LABEL_621;
          }
          v54 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x612D656E696C6E69;
          if (v54 && *(_QWORD *)(v277 + 15) == 0x3E726F7369766461)
            goto LABEL_621;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 1;
          goto LABEL_253;
        case 0x18:
          if (*(_QWORD *)v277 == 0x3C65726975716572
            && *(_QWORD *)(v277 + 8) == 0x6E6F6974636E7566
            && *(_QWORD *)(v277 + 16) == 0x3E7370756F72672DLL)
          {
            goto LABEL_621;
          }
          v58 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x706F2D6F6E3C6574;
          if (v58 && *(_QWORD *)(v277 + 16) == 0x3E656C75646F6D2DLL)
            goto LABEL_621;
          v60 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x2D656C69666F7270;
          if (v60 && *(_QWORD *)(v277 + 16) == 0x3E7972616D6D7573)
            goto LABEL_621;
          v62 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x6B636174733C6574;
          if (v62 && *(_QWORD *)(v277 + 16) == 0x3E7974656661732DLL)
            goto LABEL_621;
          v64 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x6F6C672D6E617361;
          if (v64 && *(_QWORD *)(v277 + 16) == 0x3E646D2D736C6162)
            goto LABEL_621;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v33 = 0;
          v34 = 0;
          v32 = 1;
          goto LABEL_253;
        case 0x19:
          if (*(_QWORD *)v277 != 0x6164696C61766E69
            || *(_QWORD *)(v277 + 8) != 0x69732D72693C6574
            || *(_QWORD *)(v277 + 16) != 0x79746972616C696DLL
            || *(_BYTE *)(v277 + 24) != 62)
          {
            goto LABEL_252;
          }
          goto LABEL_621;
        case 0x1ALL:
          if (*(_QWORD *)v277 == 0x6164696C61766E69
            && *(_QWORD *)(v277 + 8) == 0x6C75646F6D3C6574
            && *(_QWORD *)(v277 + 16) == 0x72616D6D75732D65
            && *(_WORD *)(v277 + 24) == 15993)
          {
            goto LABEL_621;
          }
          v72 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x6E696C6E693C6574;
          v73 = v72 && *(_QWORD *)(v277 + 16) == 0x6F73697664612D65;
          if (v73 && *(_WORD *)(v277 + 24) == 15986)
            goto LABEL_621;
          v28 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v29 = 1;
          goto LABEL_253;
        case 0x1BLL:
          if (*(_QWORD *)v277 != 0x6164696C61766E69
            || *(_QWORD *)(v277 + 8) != 0x74636E75663C6574
            || *(_QWORD *)(v277 + 16) != 0x756F72672D6E6F69
            || *(_QWORD *)(v277 + 19) != 0x3E7370756F72672DLL)
          {
            v82 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x69666F72703C6574;
            v83 = v82 && *(_QWORD *)(v277 + 16) == 0x616D6D75732D656CLL;
            if (!v83 || *(_QWORD *)(v277 + 19) != 0x3E7972616D6D7573)
            {
              v85 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x2D6E6173613C6574;
              v86 = v85 && *(_QWORD *)(v277 + 16) == 0x2D736C61626F6C67;
              if (!v86 || *(_QWORD *)(v277 + 19) != 0x3E646D2D736C6162)
                goto LABEL_252;
            }
          }
          goto LABEL_621;
        case 0x1DLL:
          v75 = *(_QWORD *)(v277 + 16);
          v76 = *(_QWORD *)(v277 + 21);
          v77 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x736E692D73736170;
          v78 = 0x61746E656D757274;
          goto LABEL_245;
        case 0x20:
          v75 = *(_QWORD *)(v277 + 16);
          v76 = *(_QWORD *)(v277 + 24);
          v77 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x2D737361703C6574;
          v78 = 0x656D757274736E69;
LABEL_245:
          if (!v77 || v75 != v78 || v76 != 0x3E6E6F697461746ELL)
            goto LABEL_252;
          goto LABEL_621;
        default:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          goto LABEL_253;
      }
    }
    v21 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x706172676C6C6163;
    if (v21 && *(_WORD *)(v277 + 16) == 15976)
      goto LABEL_621;
    v23 = *(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 8) == 0x66697265763C6574;
    if (v23 && *(_WORD *)(v277 + 16) == 15993)
      goto LABEL_621;
LABEL_252:
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
LABEL_253:
    v273 = v29;
    v274 = v31;
    v275 = v33;
    v276 = v30;
    if (v18)
    {
      v90 = *(_QWORD *)v277 == 0x3C65726975716572 && *(_QWORD *)(v277 + 8) == 0x2D736C61626F6C67;
      if (v90 && *(_QWORD *)(v277 + 11) == 0x3E61612D736C6162)
        goto LABEL_621;
    }
    if (v28)
    {
      if (*(_QWORD *)v277 == 0x6164696C61766E69
        && *(_QWORD *)(v277 + 8) == 0x61626F6C673C6574
        && *(_QWORD *)(v277 + 14) == 0x3E61612D736C6162)
      {
        goto LABEL_621;
      }
LABEL_279:
      v95 = 0;
      v272 = 0;
      if (!v18)
        goto LABEL_287;
      goto LABEL_280;
    }
    if (*((_QWORD *)&v277 + 1) == 10)
    {
      if (*(_QWORD *)v277 == 0x7475626972747461 && *(_WORD *)(v277 + 8) == 29295)
        goto LABEL_621;
      v272 = 0;
      v95 = 1;
      if (v18)
        goto LABEL_280;
    }
    else
    {
      if (*((_QWORD *)&v277 + 1) != 13)
        goto LABEL_279;
      if (*(_QWORD *)v277 == 0x692D737961776C61 && *(_QWORD *)(v277 + 5) == 0x656E696C6E692D73)
        goto LABEL_621;
      v95 = 0;
      v272 = 1;
      if (v18)
      {
LABEL_280:
        if (*(_QWORD *)v277 == 0x697461746F6E6E61
          && *(_QWORD *)(v277 + 8) == 0x646174656D326E6FLL
          && *(_QWORD *)(v277 + 11) == 0x617461646174656DLL)
        {
          goto LABEL_621;
        }
      }
    }
LABEL_287:
    if (v95)
    {
      if (*(_QWORD *)v277 == 0x6F2D706D6E65706FLL && *(_WORD *)(v277 + 8) == 29808)
        goto LABEL_621;
    }
    if (v32)
    {
      v99 = *(_QWORD *)v277 == 0x762D64656C6C6163 && *(_QWORD *)(v277 + 8) == 0x6F72702D65756C61;
      if (v99 && *(_QWORD *)(v277 + 16) == 0x6E6F697461676170)
        goto LABEL_621;
    }
    if (*((_QWORD *)&v277 + 1) == 20)
    {
      v101 = *(_QWORD *)v277 == 0x6163696E6F6E6163 && *(_QWORD *)(v277 + 8) == 0x696C612D657A696CLL;
      if (v101 && *(_DWORD *)(v277 + 16) == 1936028513)
        goto LABEL_621;
    }
    if (v95)
    {
      if (*(_QWORD *)v277 == 0x69666F72702D6763 && *(_WORD *)(v277 + 8) == 25964)
        goto LABEL_621;
    }
    if (*((_QWORD *)&v277 + 1) == 14
      && *(_QWORD *)v277 == 0x65642D6B63656863
      && *(_QWORD *)(v277 + 6) == 0x7966696775626564)
    {
      goto LABEL_621;
    }
    if (v95)
    {
      if (*(_QWORD *)v277 == 0x72656D74736E6F63 && *(_WORD *)(v277 + 8) == 25959)
        goto LABEL_621;
      if (*(_QWORD *)v277 == 0x7261652D6F726F63 && *(_WORD *)(v277 + 8) == 31084)
        goto LABEL_621;
    }
    if (v272)
    {
      if (*(_QWORD *)v277 == 0x73642D73736F7263 && *(_QWORD *)(v277 + 5) == 0x6966632D6F73642DLL)
        goto LABEL_621;
    }
    if (*((_QWORD *)&v277 + 1) == 11
      && *(_QWORD *)v277 == 0x6567726164616564
      && *(_QWORD *)(v277 + 3) == 0x6D696C6567726164)
    {
      goto LABEL_621;
    }
    if (v19 && *(_QWORD *)v277 == 0x7966696775626564)
      goto LABEL_621;
    if (v272)
    {
      if (*(_QWORD *)v277 == 0x6C6C61632D746F64 && *(_QWORD *)(v277 + 5) == 0x68706172676C6C61)
        goto LABEL_621;
    }
    if (*((_QWORD *)&v277 + 1) == 17)
    {
      if (*(_QWORD *)v277 == 0x6176612D6D696C65
        && *(_QWORD *)(v277 + 8) == 0x72657478652D6C69
        && *(_BYTE *)(v277 + 16) == 110)
      {
        goto LABEL_621;
      }
    }
    else if (*((_QWORD *)&v277 + 1) == 14
           && *(_QWORD *)v277 == 0x2D74636172747865
           && *(_QWORD *)(v277 + 6) == 0x736B636F6C622D74)
    {
      goto LABEL_621;
    }
    if (v95)
    {
      if (*(_QWORD *)v277 == 0x7474616563726F66 && *(_WORD *)(v277 + 8) == 29554)
        goto LABEL_621;
    }
    if (v30)
    {
      if (*(_QWORD *)v277 == 0x6E6F6974636E7566 && *(_QWORD *)(v277 + 7) == 0x74726F706D692D6ELL)
        goto LABEL_621;
    }
    if (v34)
    {
      v124 = *(_QWORD *)v277 == 0x6E6F6974636E7566 && *(_QWORD *)(v277 + 8) == 0x6C6169636570732DLL;
      if (v124 && *(_QWORD *)(v277 + 15) == 0x6E6F6974617A696CLL)
        goto LABEL_621;
    }
    if (*((_QWORD *)&v277 + 1) == 9)
    {
      if (*(_QWORD *)v277 == 0x63646C61626F6C67 && *(_BYTE *)(v277 + 8) == 101)
        goto LABEL_621;
      if (*(_QWORD *)v277 == 0x706F6C61626F6C67 && *(_BYTE *)(v277 + 8) == 116)
        goto LABEL_621;
    }
    else if (*((_QWORD *)&v277 + 1) == 11
           && *(_QWORD *)v277 == 0x70736C61626F6C67
           && *(_QWORD *)(v277 + 3) == 0x74696C70736C6162)
    {
      goto LABEL_621;
    }
    if (v33
      && (*(_QWORD *)v277 == 0x73646C6F63746F68 ? (v129 = *(_DWORD *)(v277 + 8) == 1953066096) : (v129 = 0), v129)
      || v95
      && (*(_QWORD *)v277 == 0x7474617265666E69 ? (v130 = *(unsigned __int16 *)(v277 + 8) == 29554) : (v130 = 0), v130)
      || v30
      && (*(_QWORD *)v277 == 0x2D72656E696C6E69 ? (v131 = *(_QWORD *)(v277 + 7) == 0x726570706172772DLL) : (v131 = 0),
          v131)
      || v31
      && (*(_QWORD *)v277 == 0x6E693C746E697270 ? (v132 = *(_QWORD *)(v277 + 8) == 0x7664612D656E696CLL) : (v132 = 0),
          v132 ? (v133 = *(_QWORD *)(v277 + 13) == 0x3E726F7369766461) : (v133 = 0),
          v133)
      || *((_QWORD *)&v277 + 1) == 34 && !memcmp((const void *)v277, "inliner-wrapper-no-mandatory-first", 0x22uLL)
      || v274
      && (*(_QWORD *)v277 == 0x672D747265736E69 ? (v134 = *(_QWORD *)(v277 + 8) == 0x666F72702D766F63) : (v134 = 0),
          v134 ? (v135 = *(_QWORD *)(v277 + 13) == 0x676E696C69666F72) : (v135 = 0),
          v135))
    {
LABEL_621:
      v184 = v280;
      if (*((_QWORD *)&v280 + 1) == (_QWORD)v280)
      {
LABEL_625:
        *a5 = 0;
      }
      else
      {
        v185 = 40 * ((*((_QWORD *)&v280 + 1) - (_QWORD)v280) / 40);
        while (1)
        {
          llvm::PassBuilder::parseModulePass((uint64_t)a1, a2, v184, (uint64_t)v9);
          if (*a5)
            break;
          v184 += 40;
          v185 -= 40;
          if (!v185)
            goto LABEL_625;
        }
      }
      goto LABEL_626;
    }
    switch(*((_QWORD *)&v277 + 1))
    {
      case 0xELL:
        v136 = *(_QWORD *)(v277 + 6);
        v137 = *(_QWORD *)v277 == 0x64726F7274736E69;
        v138 = 0x656C696672656472;
        break;
      case 9:
        if (*(_QWORD *)v277 == 0x6F72707274736E69 && *(_BYTE *)(v277 + 8) == 102)
          goto LABEL_621;
LABEL_650:
        if (v276)
        {
          if (*(_QWORD *)v277 == 0x6164696C61766E69 && *(_QWORD *)(v277 + 7) == 0x3E6C6C613C657461)
            goto LABEL_621;
        }
        if (*((_QWORD *)&v277 + 1) == 6 && *(_DWORD *)v277 == 1668509801 && *(_WORD *)(v277 + 4) == 28771)
          goto LABEL_621;
        if (v95)
        {
          if (*(_QWORD *)v277 == 0x6E696C74756F7269 && *(_WORD *)(v277 + 8) == 29285)
            goto LABEL_621;
        }
        if (v18)
        {
          v194 = *(_QWORD *)v277 == 0x72692D746E697270 && *(_QWORD *)(v277 + 8) == 0x72616C696D69732DLL;
          if (v194 && *(_QWORD *)(v277 + 11) == 0x79746972616C696DLL)
            goto LABEL_621;
        }
        if (*((_QWORD *)&v277 + 1) == 18)
        {
          if (*(_QWORD *)v277 == 0x6C672D7265776F6CLL
            && *(_QWORD *)(v277 + 8) == 0x6F74642D6C61626FLL
            && *(_WORD *)(v277 + 16) == 29554)
          {
            goto LABEL_621;
          }
        }
        else
        {
          if (*((_QWORD *)&v277 + 1) == 14)
          {
            v198 = *(_QWORD *)(v277 + 6);
            v199 = *(_QWORD *)v277 == 0x7079747265776F6CLL;
            v200 = 0x7374736574657079;
          }
          else
          {
            if (*((_QWORD *)&v277 + 1) != 11)
            {
              if (*((_QWORD *)&v277 + 1) == 9)
              {
                if (*(_QWORD *)v277 == 0x6E7566656772656DLL && *(_BYTE *)(v277 + 8) == 99)
                  goto LABEL_621;
              }
              else if (*((_QWORD *)&v277 + 1) == 17)
              {
                v220 = *(_QWORD *)v277 == 0x6F6E612D656D616ELL && *(_QWORD *)(v277 + 8) == 0x6C61626F6C672D6ELL;
                if (v220 && *(_BYTE *)(v277 + 16) == 115)
                  goto LABEL_621;
              }
              goto LABEL_691;
            }
            v198 = *(_QWORD *)(v277 + 3);
            v199 = *(_QWORD *)v277 == 0x616E65726174656DLL;
            v200 = 0x72656D616E657261;
          }
          if (v199 && v198 == v200)
            goto LABEL_621;
        }
LABEL_691:
        if (!v275
          || (*(_QWORD *)v277 == 0x6F6D2D706F2D6F6ELL ? (v202 = *(_DWORD *)(v277 + 8) == 1701606756) : (v202 = 0), !v202))
        {
          if (!v276
            || (*(_QWORD *)v277 == 0x6372612D636A626FLL
              ? (v203 = *(_QWORD *)(v277 + 7) == 0x6D696C6570612D63)
              : (v203 = 0),
                !v203
             && (*(_QWORD *)v277 == 0x2D6C616974726170
               ? (v204 = *(_QWORD *)(v277 + 7) == 0x72656E696C6E692DLL)
               : (v204 = 0),
                 !v204)))
          {
            if (*((_QWORD *)&v277 + 1) != 14
              || (*(_QWORD *)v277 == 0x6C6163692D6F6770
                ? (v205 = *(_QWORD *)(v277 + 6) == 0x6D6F72702D6C6C61)
                : (v205 = 0),
                  !v205))
            {
              if (!v272
                || (*(_QWORD *)v277 == 0x74736E692D6F6770
                  ? (v206 = *(_QWORD *)(v277 + 5) == 0x6E65672D7274736ELL)
                  : (v206 = 0),
                    !v206
                 && (*(_QWORD *)v277 == 0x74736E692D6F6770
                   ? (v207 = *(_QWORD *)(v277 + 5) == 0x6573752D7274736ELL)
                   : (v207 = 0),
                     !v207)))
              {
                if (!v274
                  || (*(_QWORD *)v277 == 0x75662D746E697270
                    ? (v208 = *(_QWORD *)(v277 + 8) == 0x672D6E6F6974636ELL)
                    : (v208 = 0),
                      v208 ? (v209 = *(_QWORD *)(v277 + 13) == 0x7370756F72672D6ELL) : (v209 = 0),
                      !v209
                   && (*(_QWORD *)v277 == 0x72702D746E697270
                     ? (v210 = *(_QWORD *)(v277 + 8) == 0x75732D656C69666FLL)
                     : (v210 = 0),
                       v210 ? (v211 = *(_QWORD *)(v277 + 13) == 0x7972616D6D75732DLL) : (v211 = 0),
                       !v211)))
                {
                  if (!v276
                    || (*(_QWORD *)v277 == 0x61632D746E697270
                      ? (v212 = *(_QWORD *)(v277 + 7) == 0x68706172676C6C61)
                      : (v212 = 0),
                        !v212))
                  {
                    if (!v20
                      || (*(_DWORD *)v277 == 1852404336 ? (v213 = *(_BYTE *)(v277 + 4) == 116) : (v213 = 0), !v213))
                    {
                      if (*((_QWORD *)&v277 + 1) != 9
                        || (*(_QWORD *)v277 == 0x636C2D746E697270 ? (v214 = *(_BYTE *)(v277 + 8) == 103) : (v214 = 0),
                            !v214))
                      {
                        if (!v272
                          || (*(_QWORD *)v277 == 0x636C2D746E697270
                            ? (v215 = *(_QWORD *)(v277 + 5) == 0x746F642D67636C2DLL)
                            : (v215 = 0),
                              !v215))
                        {
                          if (*((_QWORD *)&v277 + 1) == 31)
                          {
                            if (*(_QWORD *)v277 == 0x756D2D746E697270
                              && *(_QWORD *)(v277 + 8) == 0x78652D65622D7473
                              && *(_QWORD *)(v277 + 16) == 0x632D646574756365
                              && *(_QWORD *)(v277 + 23) == 0x73747865746E6F63)
                            {
                              goto LABEL_621;
                            }
                          }
                          else if (*((_QWORD *)&v277 + 1) == 18)
                          {
                            v222 = *(_QWORD *)v277 == 0x74732D746E697270
                                && *(_QWORD *)(v277 + 8) == 0x656661732D6B6361;
                            if (v222 && *(_WORD *)(v277 + 16) == 31092)
                              goto LABEL_621;
                          }
                          if (!v34
                            || (*(_QWORD *)v277 == 0x6F6D3C746E697270
                              ? (v224 = *(_QWORD *)(v277 + 8) == 0x6265642D656C7564)
                              : (v224 = 0),
                                v224 ? (v225 = *(_QWORD *)(v277 + 15) == 0x3E6F666E69677562) : (v225 = 0),
                                !v225))
                          {
                            if (!v18
                              || (*(_QWORD *)v277 == 0x7475706D6F636572
                                ? (v226 = *(_QWORD *)(v277 + 8) == 0x6C61626F6C672D65)
                                : (v226 = 0),
                                  v226 ? (v227 = *(_QWORD *)(v277 + 11) == 0x6161736C61626F6CLL) : (v227 = 0),
                                  !v227))
                            {
                              if (!v273
                                || (*(_QWORD *)v277 == 0x6B6F6F6C2D6C6572
                                  ? (v228 = *(_QWORD *)(v277 + 8) == 0x656C6261742D7075)
                                  : (v228 = 0),
                                    v228 ? (v229 = *(_QWORD *)(v277 + 16) == 0x747265766E6F632DLL) : (v229 = 0),
                                    v229 ? (v230 = *(unsigned __int16 *)(v277 + 24) == 29285) : (v230 = 0),
                                    !v230
                                 && (*(_QWORD *)v277 == 0x2D65746972776572
                                   ? (v231 = *(_QWORD *)(v277 + 8) == 0x696F706574617473)
                                   : (v231 = 0),
                                     v231 ? (v232 = *(_QWORD *)(v277 + 16) == 0x2D726F662D73746ELL) : (v232 = 0),
                                     v232 ? (v233 = *(unsigned __int16 *)(v277 + 24) == 25447) : (v233 = 0),
                                     !v233)))
                              {
                                if (!v276
                                  || (*(_QWORD *)v277 == 0x2D65746972776572
                                    ? (v234 = *(_QWORD *)(v277 + 7) == 0x736C6F626D79732DLL)
                                    : (v234 = 0),
                                      !v234))
                                {
                                  if (*((_QWORD *)&v277 + 1) == 18)
                                  {
                                    if (*(_QWORD *)v277 == 0x636E75662D6F7072
                                      && *(_QWORD *)(v277 + 8) == 0x7474612D6E6F6974
                                      && *(_WORD *)(v277 + 16) == 29554)
                                    {
                                      goto LABEL_621;
                                    }
                                  }
                                  else if (*((_QWORD *)&v277 + 1) == 14
                                         && *(_QWORD *)v277 == 0x702D656C706D6173
                                         && *(_QWORD *)(v277 + 6) == 0x656C69666F72702DLL)
                                  {
                                    goto LABEL_621;
                                  }
                                  if (!v274
                                    || (*(_QWORD *)v277 == 0x6D2D7A6F2D636373
                                      ? (v238 = *(_QWORD *)(v277 + 8) == 0x6E692D656C75646FLL)
                                      : (v238 = 0),
                                        v238 ? (v239 = *(_QWORD *)(v277 + 13) == 0x72656E696C6E692DLL) : (v239 = 0),
                                        !v239))
                                  {
                                    if (!v20
                                      || (*(_DWORD *)v277 == 1769108595
                                        ? (v240 = *(_BYTE *)(v277 + 4) == 112)
                                        : (v240 = 0),
                                          !v240))
                                    {
                                      if (!v274
                                        || (*(_QWORD *)v277 == 0x65642D7069727473
                                          ? (v241 = *(_QWORD *)(v277 + 8) == 0x67756265642D6461)
                                          : (v241 = 0),
                                            v241 ? (v242 = *(_QWORD *)(v277 + 13) == 0x6F666E692D677562) : (v242 = 0),
                                            !v242))
                                      {
                                        if (!v275
                                          || (*(_QWORD *)v277 == 0x702D6F6475657370
                                            ? (v243 = *(_DWORD *)(v277 + 8) == 1700949874)
                                            : (v243 = 0),
                                              !v243
                                           && (*(_QWORD *)v277 == 0x7274702D74666F73
                                             ? (v244 = *(_DWORD *)(v277 + 8) == 1752462689)
                                             : (v244 = 0),
                                               !v244)))
                                        {
                                          if (!v274
                                            || (*(_QWORD *)v277 == 0x65642D7069727473
                                              ? (v245 = *(_QWORD *)(v277 + 8) == 0x6F746F72702D6461)
                                              : (v245 = 0),
                                                v245
                                              ? (v246 = *(_QWORD *)(v277 + 13) == 0x73657079746F746FLL)
                                              : (v246 = 0),
                                                !v246))
                                          {
                                            if (!v18
                                              || (*(_QWORD *)v277 == 0x65642D7069727473
                                                ? (v247 = *(_QWORD *)(v277 + 8) == 0x6C6365642D677562)
                                                : (v247 = 0),
                                                  v247
                                                ? (v248 = *(_QWORD *)(v277 + 11) == 0x6572616C6365642DLL)
                                                : (v248 = 0),
                                                  !v248))
                                            {
                                              switch(*((_QWORD *)&v277 + 1))
                                              {
                                                case 0xELL:
                                                  if (*(_QWORD *)v277 == 0x6F6E2D7069727473
                                                    && *(_QWORD *)(v277 + 6) == 0x67756265646E6F6ELL)
                                                  {
                                                    goto LABEL_621;
                                                  }
                                                  if (*(_QWORD *)v277 == 0x6C61632D77656976
                                                    && *(_QWORD *)(v277 + 6) == 0x68706172676C6C61)
                                                  {
                                                    goto LABEL_621;
                                                  }
                                                  break;
                                                case 0x1CLL:
                                                  if (*(_QWORD *)v277 == 0x6F6E2D7069727473
                                                    && *(_QWORD *)(v277 + 8) == 0x626174656E696C6ELL
                                                    && *(_QWORD *)(v277 + 16) == 0x67756265642D656CLL
                                                    && *(_DWORD *)(v277 + 24) == 1868983913)
                                                  {
                                                    goto LABEL_621;
                                                  }
                                                  v254 = *(_QWORD *)v277 == 0x69746568746E7973
                                                      && *(_QWORD *)(v277 + 8) == 0x73746E756F632D63;
                                                  v255 = v254 && *(_QWORD *)(v277 + 16) == 0x616761706F72702DLL;
                                                  if (v255 && *(_DWORD *)(v277 + 24) == 1852795252)
                                                    goto LABEL_621;
                                                  break;
                                                case 6:
                                                  if (*(_DWORD *)v277 == 1769104758 && *(_WORD *)(v277 + 4) == 31078)
                                                    goto LABEL_621;
                                                  break;
                                                case 0x12:
                                                  v258 = *(_QWORD *)v277 == 0x6F7270656C6F6877
                                                      && *(_QWORD *)(v277 + 8) == 0x697665646D617267;
                                                  if (v258 && *(_WORD *)(v277 + 16) == 29810)
                                                    goto LABEL_621;
                                                  break;
                                              }
                                              if (!v20
                                                || (*(_DWORD *)v277 == 1634952804
                                                  ? (v260 = *(_BYTE *)(v277 + 4) == 110)
                                                  : (v260 = 0),
                                                    !v260))
                                              {
                                                if (*((_QWORD *)&v277 + 1) != 11
                                                  || (*(_QWORD *)v277 == 0x646F6D2D6E61736DLL
                                                    ? (v261 = *(_QWORD *)(v277 + 3) == 0x656C75646F6D2D6ELL)
                                                    : (v261 = 0),
                                                      !v261))
                                                {
                                                  if (!v272
                                                    || (*(_QWORD *)v277 == 0x692D656C75646F6DLL
                                                      ? (v262 = *(_QWORD *)(v277 + 5) == 0x656E696C6E692D65)
                                                      : (v262 = 0),
                                                        !v262))
                                                  {
                                                    if (*((_QWORD *)&v277 + 1) != 11
                                                      || (*(_QWORD *)v277 == 0x646F6D2D6E617374
                                                        ? (v263 = *(_QWORD *)(v277 + 3) == 0x656C75646F6D2D6ELL)
                                                        : (v263 = 0),
                                                          !v263))
                                                    {
                                                      if (!v272
                                                        || (*(_QWORD *)v277 == 0x6D2D766F636E6173
                                                          ? (v264 = *(_QWORD *)(v277 + 5) == 0x656C75646F6D2D76)
                                                          : (v264 = 0),
                                                            !v264))
                                                      {
                                                        if (*((_QWORD *)&v277 + 1) != 14
                                                          || (*(_QWORD *)v277 == 0x2D666F72706D656DLL
                                                            ? (v265 = *(_QWORD *)(v277 + 6) == 0x656C75646F6D2D66)
                                                            : (v265 = 0),
                                                              !v265))
                                                        {
                                                          if (!v276
                                                            || (*(_QWORD *)v277 == 0x632D6E6F73696F70
                                                              ? (v266 = *(_QWORD *)(v277 + 7) == 0x676E696B63656863)
                                                              : (v266 = 0),
                                                                !v266))
                                                          {
                                                            if (!v18
                                                              || (*(_QWORD *)v277 == 0x702D6F6475657370
                                                                ? (v267 = *(_QWORD *)(v277 + 8) == 0x6470752D65626F72)
                                                                : (v267 = 0),
                                                                  v267
                                                                ? (v268 = *(_QWORD *)(v277 + 11) == 0x6574616470752D65)
                                                                : (v268 = 0),
                                                                  !v268))
                                                            {
                                                              if (!sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "loop-extract", 0xCuLL)&& !sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "hwasan", 6uLL)&& !sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "asan-module", 0xBuLL))
                                                              {
                                                                v269 = *((unsigned int *)a1 + 298);
                                                                if ((_DWORD)v269)
                                                                {
                                                                  v285 = 0;
                                                                  v286 = 0;
                                                                  *(_QWORD *)&v287 = 0;
                                                                  v270 = (_QWORD *)(a1[148] + 24);
                                                                  v271 = 32 * v269;
                                                                  while (1)
                                                                  {
                                                                    v292 = v277;
                                                                    __p[0] = 0;
                                                                    __p[1] = 0;
                                                                    if (!*v270)
                                                                      goto LABEL_996;
                                                                    if ((*(unsigned int (**)(_QWORD, __int128 *, void ***, void **))(*(_QWORD *)*v270 + 48))(*v270, &v292, &v285, __p))
                                                                    {
                                                                      goto LABEL_997;
                                                                    }
                                                                    v270 += 4;
                                                                    v271 -= 32;
                                                                    if (!v271)
                                                                    {
                                                                      *(_QWORD *)&v292 = &v285;
                                                                      sub_1C4764BBC((void ***)&v292);
                                                                      break;
                                                                    }
                                                                  }
                                                                }
LABEL_5:
                                                                if (sub_1C5A4DFA8(v277, *((void ***)&v277 + 1), a1[188], (uint64_t *)*((unsigned int *)a1+ 378)))
                                                                {
                                                                  v10 = "cgscc";
                                                                  v11 = 5;
LABEL_48:
                                                                  v285 = (void **)v10;
                                                                  v286 = v11;
                                                                  v287 = v280;
                                                                  v288 = v281;
                                                                  v280 = 0uLL;
                                                                  v281 = 0;
                                                                  *(_QWORD *)&v292 = operator new(0x28uLL);
                                                                  *((_QWORD *)&v292 + 1) = v292;
                                                                  *(_QWORD *)&v293 = v292 + 40;
                                                                  sub_1C5A64538(&v292, (uint64_t)&v285, (uint64_t)&v289);
                                                                  v280 = v292;
                                                                  v281 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))v293;
                                                                  *(_QWORD *)&v293 = 0;
                                                                  v292 = 0uLL;
                                                                  if (!v282)
                                                                    v282 = 1;
                                                                  __p[0] = &v292;
                                                                  sub_1C5A59000((void ***)__p);
                                                                  __p[0] = &v287;
                                                                  v27 = (void ***)__p;
LABEL_620:
                                                                  sub_1C5A59000(v27);
                                                                  goto LABEL_621;
                                                                }
                                                                if (sub_1C5A4E458(v277, *((void ***)&v277 + 1), a1[208], (uint64_t *)*((unsigned int *)a1+ 418)))
                                                                {
                                                                  v10 = "function";
                                                                  v11 = 8;
                                                                  goto LABEL_48;
                                                                }
                                                                if ((unint64_t)sub_1C5A3BC6C((_DWORD *)v277, *((unint64_t *)&v277 + 1), v25, v26) >> 32)
                                                                {
LABEL_616:
                                                                  v285 = (void **)"function";
                                                                  v286 = 8;
                                                                  v40 = "loop";
                                                                  v41 = 4;
LABEL_617:
                                                                  *(_QWORD *)&v292 = v40;
                                                                  *((_QWORD *)&v292 + 1) = v41;
                                                                  v293 = v280;
                                                                  v294 = v281;
                                                                  v280 = 0uLL;
                                                                  v281 = 0;
                                                                  *(_QWORD *)&v287 = operator new(0x28uLL);
                                                                  *((_QWORD *)&v287 + 1) = v287;
                                                                  v288 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))(v287 + 40);
                                                                  sub_1C5A64538(&v287, (uint64_t)&v292, (uint64_t)v295);
                                                                  __p[0] = operator new(0x28uLL);
                                                                  __p[1] = __p[0];
                                                                  v279 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))((char *)__p[0] + 40);
                                                                  sub_1C5A64538(__p, (uint64_t)&v285, (uint64_t)&v289);
                                                                  v280 = *(_OWORD *)__p;
                                                                  v281 = v279;
                                                                  __p[1] = 0;
                                                                  v279 = 0;
                                                                  __p[0] = 0;
                                                                  if (!v282)
                                                                    v282 = 1;
                                                                  v284 = __p;
                                                                  sub_1C5A59000(&v284);
                                                                  v284 = (void **)&v287;
                                                                  sub_1C5A59000(&v284);
                                                                  v284 = (void **)&v293;
                                                                  v27 = &v284;
                                                                  goto LABEL_620;
                                                                }
                                                                switch(*((_QWORD *)&v277 + 1))
                                                                {
                                                                  case 0xCLL:
                                                                    if (*(_QWORD *)v277 == 0x616C662D706F6F6CLL
                                                                      && *(_DWORD *)(v277 + 8) == 1852142708)
                                                                    {
                                                                      goto LABEL_616;
                                                                    }
                                                                    goto LABEL_375;
                                                                  case 0xDLL:
                                                                  case 0xFLL:
                                                                  case 0x11:
                                                                  case 0x12:
                                                                    goto LABEL_375;
                                                                  case 0xELL:
                                                                    v113 = *(_QWORD *)(v277 + 6);
                                                                    v114 = *(_QWORD *)v277 == 0x6F6C2D706F2D6F6ELL;
                                                                    v115 = 0x7473656E706F6F6CLL;
                                                                    goto LABEL_362;
                                                                  case 0x10:
                                                                    v113 = *(_QWORD *)(v277 + 8);
                                                                    v114 = *(_QWORD *)v277 == 0x746E692D706F6F6CLL;
                                                                    v115 = 0x65676E6168637265;
LABEL_362:
                                                                    if (!v114 || v113 != v115)
                                                                      goto LABEL_375;
                                                                    goto LABEL_616;
                                                                  case 0x13:
                                                                    if (*(_QWORD *)v277 == 0x726E752D706F6F6CLL
                                                                      && *(_QWORD *)(v277 + 8) == 0x2D646E612D6C6C6FLL
                                                                      && *(_QWORD *)(v277 + 11) == 0x6D616A2D646E612DLL)
                                                                    {
                                                                      goto LABEL_616;
                                                                    }
                                                                    goto LABEL_375;
                                                                  default:
                                                                    if (*((_QWORD *)&v277 + 1) == 5
                                                                      && *(_DWORD *)v277 == 1667853932
                                                                      && *(_BYTE *)(v277 + 4) == 109)
                                                                    {
LABEL_81:
                                                                      v285 = (void **)"function";
                                                                      v286 = 8;
                                                                      v40 = "loop-mssa";
                                                                      v41 = 9;
                                                                      goto LABEL_617;
                                                                    }
LABEL_375:
                                                                    if (sub_1C5A645BC((void **)v277, *((void ***)&v277 + 1), a1[228], *((_DWORD *)a1 + 458))|| (unint64_t)sub_1C5A3BC6C((_DWORD *)v277, *((unint64_t *)&v277+ 1), v119, v120) >> 32)
                                                                    {
                                                                      goto LABEL_616;
                                                                    }
                                                                    switch(*((_QWORD *)&v277 + 1))
                                                                    {
                                                                      case 4:
                                                                        if (*(_DWORD *)v277 == 1835231596)
                                                                          goto LABEL_81;
                                                                        goto LABEL_612;
                                                                      case 5:
                                                                        v140 = *(unsigned __int8 *)(v277 + 4);
                                                                        v141 = *(_DWORD *)v277 == 1852404336;
                                                                        v142 = 116;
                                                                        goto LABEL_490;
                                                                      case 7:
                                                                        if (*(_DWORD *)v277 == 762605412
                                                                          && *(_DWORD *)(v277 + 3) == 1734632493)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v140 = *(_DWORD *)(v277 + 3);
                                                                        v141 = *(_DWORD *)v277 == 1986293353;
                                                                        v142 = 1936875894;
                                                                        goto LABEL_490;
                                                                      case 0xALL:
                                                                        if (*(_QWORD *)v277 == 0x6964692D706F6F6CLL
                                                                          && *(_WORD *)(v277 + 8) == 28015)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x6F6C2D706F2D6F6ELL
                                                                          && *(_WORD *)(v277 + 8) == 28783)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v140 = *(unsigned __int16 *)(v277 + 8);
                                                                        v141 = *(_QWORD *)v277 == 0x64643C746E697270;
                                                                        v142 = 15975;
                                                                        goto LABEL_490;
                                                                      case 0xBLL:
                                                                        if (*(_QWORD *)v277 == 0x746F722D706F6F6CLL
                                                                          && *(_QWORD *)(v277 + 3) == 0x657461746F722D70)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x6465722D706F6F6CLL
                                                                          && *(_QWORD *)(v277 + 3) == 0x6563756465722D70)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v148 = *(_QWORD *)(v277 + 3);
                                                                        v149 = *(_QWORD *)v277 == 0x7265722D706F6F6CLL;
                                                                        v150 = 0x6C6C6F7265722D70;
                                                                        goto LABEL_498;
                                                                      case 0xCLL:
                                                                        if (*(_QWORD *)v277 == 0x3C65726975716572
                                                                          && *(_DWORD *)(v277 + 8) == 1046963300)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v140 = *(_DWORD *)(v277 + 8);
                                                                        v141 = *(_QWORD *)v277 == 0x72662D6E6F6E6163;
                                                                        v142 = 1702520165;
LABEL_490:
                                                                        if (!v141 || v140 != v142)
                                                                          goto LABEL_612;
                                                                        goto LABEL_616;
                                                                      case 0xDLL:
                                                                        v148 = *(_QWORD *)(v277 + 5);
                                                                        v149 = *(_QWORD *)v277 == 0x6C65642D706F6F6CLL;
                                                                        v150 = 0x6E6F6974656C6564;
                                                                        goto LABEL_498;
                                                                      case 0xELL:
                                                                        v148 = *(_QWORD *)(v277 + 6);
                                                                        v149 = *(_QWORD *)v277 == 0x69772D6472617567;
                                                                        v150 = 0x676E696E65646977;
                                                                        goto LABEL_498;
                                                                      case 0xFLL:
                                                                        if (*(_QWORD *)v277 == 0x6164696C61766E69
                                                                          && *(_QWORD *)(v277 + 7) == 0x3E6764643C657461)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x6164696C61766E69
                                                                          && *(_QWORD *)(v277 + 7) == 0x3E6C6C613C657461)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x76693C746E697270
                                                                          && *(_QWORD *)(v277 + 7) == 0x3E73726573752D76)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v148 = *(_QWORD *)(v277 + 7);
                                                                        v149 = *(_QWORD *)v277 == 0x6F6C3C746E697270;
                                                                        v150 = 0x3E7473656E706F6FLL;
                                                                        goto LABEL_498;
                                                                      case 0x10:
                                                                        if (*(_QWORD *)v277 == 0x6D69732D706F6F6CLL
                                                                          && *(_QWORD *)(v277 + 8) == 0x6766637966696C70)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x726E752D706F6F6CLL
                                                                          && *(_QWORD *)(v277 + 8) == 0x6C6C75662D6C6C6FLL)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        if (*(_QWORD *)v277 == 0x6572702D706F6F6CLL
                                                                          && *(_QWORD *)(v277 + 8) == 0x6E6F697461636964)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v148 = *(_QWORD *)(v277 + 8);
                                                                        v149 = *(_QWORD *)v277 == 0x756F622D706F6F6CLL;
                                                                        v150 = 0x74696C70732D646ELL;
LABEL_498:
                                                                        if (!v149 || v148 != v150)
                                                                          goto LABEL_612;
                                                                        goto LABEL_616;
                                                                      case 0x11:
                                                                        if (*(_QWORD *)v277 == 0x3C65726975716572
                                                                          && *(_QWORD *)(v277 + 8) == 0x73726573752D7669
                                                                          && *(_BYTE *)(v277 + 16) == 62)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v162 = *(_QWORD *)v277 == 0x736E692D706F6F6CLL
                                                                            && *(_QWORD *)(v277 + 8) == 0x66696C706D697374;
                                                                        if (v162 && *(_BYTE *)(v277 + 16) == 121)
                                                                          goto LABEL_616;
                                                                        v164 = *(unsigned __int8 *)(v277 + 16);
                                                                        v165 = *(_QWORD *)v277 == 0x63612D746E697270
                                                                            && *(_QWORD *)(v277 + 8) == 0x666E692D73736563;
                                                                        v166 = 111;
                                                                        goto LABEL_570;
                                                                      case 0x13:
                                                                        v167 = *(_QWORD *)(v277 + 11);
                                                                        v168 = *(_QWORD *)v277 == 0x3C65726975716572
                                                                            && *(_QWORD *)(v277 + 8) == 0x6F6C2D706F2D6F6ELL;
                                                                        v169 = 0x3E706F6F6C2D706FLL;
                                                                        goto LABEL_591;
                                                                      case 0x14:
                                                                        if (*(_QWORD *)v277 == 0x3C65726975716572
                                                                          && *(_QWORD *)(v277 + 8) == 0x692D737365636361
                                                                          && *(_DWORD *)(v277 + 16) == 1047488110)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v172 = *(_QWORD *)v277 == 0x6164696C61766E69
                                                                            && *(_QWORD *)(v277 + 8) == 0x73752D76693C6574;
                                                                        if (v172
                                                                          && *(_DWORD *)(v277 + 16) == 1047753317)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v164 = *(_DWORD *)(v277 + 16);
                                                                        v165 = *(_QWORD *)v277 == 0x7265762D706F6F6CLL
                                                                            && *(_QWORD *)(v277 + 8) == 0x2D676E696E6F6973;
                                                                        v166 = 1835231596;
LABEL_570:
                                                                        if (!v165 || v164 != v166)
                                                                          goto LABEL_612;
                                                                        goto LABEL_616;
                                                                      case 0x16:
                                                                        if (*(_QWORD *)v277 == 0x6164696C61766E69
                                                                          && *(_QWORD *)(v277 + 8) == 0x706F2D6F6E3C6574
                                                                          && *(_QWORD *)(v277 + 14) == 0x3E706F6F6C2D706FLL)
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v167 = *(_QWORD *)(v277 + 14);
                                                                        v168 = *(_QWORD *)v277 == 0x6F6C3C746E697270
                                                                            && *(_QWORD *)(v277 + 8) == 0x65686361632D706FLL;
                                                                        v169 = 0x3E74736F632D6568;
                                                                        goto LABEL_591;
                                                                      case 0x17:
                                                                        v167 = *(_QWORD *)(v277 + 15);
                                                                        v168 = *(_QWORD *)v277 == 0x6164696C61766E69
                                                                            && *(_QWORD *)(v277 + 8) == 0x73656363613C6574;
                                                                        v169 = 0x3E6F666E692D7373;
LABEL_591:
                                                                        if (!v168 || v167 != v169)
                                                                          goto LABEL_612;
                                                                        goto LABEL_616;
                                                                      case 0x1DLL:
                                                                        v178 = *(_QWORD *)(v277 + 16);
                                                                        v179 = *(_QWORD *)(v277 + 21);
                                                                        v180 = *(_QWORD *)v277 == 0x3C65726975716572
                                                                            && *(_QWORD *)(v277 + 8) == 0x736E692D73736170;
                                                                        v181 = 0x61746E656D757274;
                                                                        goto LABEL_605;
                                                                      case 0x20:
                                                                        v178 = *(_QWORD *)(v277 + 16);
                                                                        v179 = *(_QWORD *)(v277 + 24);
                                                                        v180 = *(_QWORD *)v277 == 0x6164696C61766E69
                                                                            && *(_QWORD *)(v277 + 8) == 0x2D737361703C6574;
                                                                        v181 = 0x656D757274736E69;
LABEL_605:
                                                                        if (!v180
                                                                          || v178 != v181
                                                                          || v179 != 0x3E6E6F697461746ELL)
                                                                        {
                                                                          goto LABEL_612;
                                                                        }
                                                                        goto LABEL_616;
                                                                      default:
LABEL_612:
                                                                        if (sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "simple-loop-unswitch", 0x14uLL)|| sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "licm", 4uLL)|| sub_1C5A3C044((char *)v277, *((size_t *)&v277 + 1), "lnicm", 5uLL)|| sub_1C5A645BC((void **)v277, *((void ***)&v277 + 1), a1[228], *((_DWORD *)a1 + 458)))
                                                                        {
                                                                          goto LABEL_616;
                                                                        }
                                                                        v186 = *((unsigned int *)a1 + 338);
                                                                        if (!(_DWORD)v186)
                                                                          goto LABEL_634;
                                                                        a1 = (_QWORD *)(a1[168] + 24);
                                                                        v187 = 32 * v186;
                                                                        break;
                                                                    }
                                                                    break;
                                                                }
                                                                while (1)
                                                                {
                                                                  v285 = (void **)v280;
                                                                  v286 = 0xCCCCCCCCCCCCCCCDLL
                                                                       * ((uint64_t)(*((_QWORD *)&v280 + 1) - v280) >> 3);
                                                                  if (!*a1)
                                                                    break;
                                                                  if ((*(unsigned int (**)(_QWORD, uint64_t, void ***))(*(_QWORD *)*a1 + 48))(*a1, a2, &v285))
                                                                  {
                                                                    goto LABEL_625;
                                                                  }
                                                                  a1 += 4;
                                                                  v187 -= 32;
                                                                  if (!v187)
                                                                  {
LABEL_634:
                                                                    if (*(_QWORD *)(v280 + 16) == *(_QWORD *)(v280 + 24))
                                                                      v188 = "pass";
                                                                    else
                                                                      v188 = "pipeline";
                                                                    v285 = (void **)"unknown {0} name '{1}'";
                                                                    v286 = 22;
                                                                    *(_QWORD *)&v287 = v291;
                                                                    *((_QWORD *)&v287 + 1) = 2;
                                                                    v288 = &off_1E81905B0;
                                                                    v289 = v188;
                                                                    v290[0] = &unk_1E8168E00;
                                                                    v290[1] = &v277;
                                                                    v291[0] = &v288;
                                                                    v291[1] = v290;
                                                                    sub_1C4DCAF2C((uint64_t)&v285, &v292);
                                                                    if (!atomic_load(qword_1ED836B58))
                                                                      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
                                                                    __p[0] = (void *)3;
                                                                    __p[1] = (void *)qword_1ED836B58[0];
                                                                    sub_1C5A3BD58(a5, (uint64_t)&v292, (uint64_t *)__p);
                                                                    if (SBYTE7(v293) < 0)
                                                                    {
                                                                      v15 = (void *)v292;
                                                                      goto LABEL_11;
                                                                    }
                                                                    goto LABEL_626;
                                                                  }
                                                                }
LABEL_996:
                                                                sub_1C485C2F0();
LABEL_997:
                                                                *(_QWORD *)&v292 = &v285;
                                                                sub_1C4764BBC((void ***)&v292);
                                                                goto LABEL_621;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_621;
      case 0xBLL:
        v136 = *(_QWORD *)(v277 + 3);
        v137 = *(_QWORD *)v277 == 0x6C616E7265746E69;
        v138 = 0x657A696C616E7265;
        break;
      default:
        goto LABEL_650;
    }
    if (v137 && v136 == v138)
      goto LABEL_621;
    goto LABEL_650;
  }
  v285 = (void **)"invalid pipeline '{0}'";
  v286 = 22;
  *(_QWORD *)&v287 = v290;
  *((_QWORD *)&v287 + 1) = 1;
  v288 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E8168E00;
  v289 = (const char *)v283;
  v290[0] = &v288;
  sub_1C4DCAF2C((uint64_t)&v285, __p);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v13 = qword_1ED836B58[0];
  v14 = operator new();
  LOWORD(v294) = 260;
  *(_QWORD *)&v292 = __p;
  *(_QWORD *)v14 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v292, (_QWORD *)(v14 + 8));
  *(_QWORD *)(v14 + 32) = 3;
  *(_QWORD *)(v14 + 40) = v13;
  *(_BYTE *)(v14 + 48) = 1;
  *a5 = v14;
  if (SHIBYTE(v279) < 0)
  {
    v15 = __p[0];
LABEL_11:
    operator delete(v15);
  }
LABEL_626:
  if (v282)
  {
    v285 = (void **)&v280;
    sub_1C5A59000(&v285);
  }
}

uint64_t sub_1C5A4DFA8(uint64_t a1, void **a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v4;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v39[3];
  _QWORD v40[2];
  void **v41[2];

  v4 = a4;
  if (a2 == (void **)19)
  {
    if (*(_QWORD *)a1 == 0x6E6F6974636E7566
      && *(_QWORD *)(a1 + 8) == 0x692D72656761653CLL
      && *(_QWORD *)(a1 + 11) == 0x3E766E692D726567)
    {
      return 1;
    }
  }
  else if (a2 == (void **)8)
  {
    if (*(_QWORD *)a1 == 0x6E6F6974636E7566)
      return 1;
  }
  else if (a2 == (void **)5 && *(_DWORD *)a1 == 1668507491 && *(_BYTE *)(a1 + 4) == 99)
  {
    return 1;
  }
  if ((unint64_t)sub_1C5A3BC6C((_DWORD *)a1, (unint64_t)a2, a3, a4) >> 32
    || (unint64_t)sub_1C5A43DC0((_DWORD *)a1, (unint64_t)a2, v11, v12) >> 32)
  {
    return 1;
  }
  switch((unint64_t)a2)
  {
    case 0xAuLL:
      v13 = *(unsigned __int16 *)(a1 + 8);
      v14 = *(_QWORD *)a1 == 0x6C70732D6F726F63;
      v15 = 29801;
      goto LABEL_26;
    case 0xBuLL:
      v16 = *(_QWORD *)(a1 + 3);
      v17 = *(_QWORD *)a1 == 0x67632D706F2D6F6ELL;
      v18 = 0x63637367632D706FLL;
      goto LABEL_34;
    case 0xCuLL:
      v13 = *(_DWORD *)(a1 + 8);
      v14 = *(_QWORD *)a1 == 0x6F6D6F7270677261;
      v15 = 1852795252;
LABEL_26:
      if (!v14 || v13 != v15)
        goto LABEL_88;
      return 1;
    case 0xEuLL:
      v16 = *(_QWORD *)(a1 + 6);
      v17 = *(_QWORD *)a1 == 0x6E6F6974636E7566;
      v18 = 0x73727474612D6E6FLL;
      goto LABEL_34;
    case 0xFuLL:
      v16 = *(_QWORD *)(a1 + 7);
      v17 = *(_QWORD *)a1 == 0x6164696C61766E69;
      v18 = 0x3E6C6C613C657461;
LABEL_34:
      if (!v17 || v16 != v18)
        goto LABEL_88;
      return 1;
    case 0x10uLL:
      if (*(_QWORD *)a1 == 0x7475626972747461 && *(_QWORD *)(a1 + 8) == 0x63637367632D726FLL)
        return 1;
      v22 = *(_QWORD *)(a1 + 8);
      v23 = 0x63637367632D7470;
      v24 = *(_QWORD *)a1 == 0x6F2D706D6E65706FLL;
      goto LABEL_67;
    case 0x12uLL:
      v25 = *(unsigned __int16 *)(a1 + 16);
      v26 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x786F72702D6D6166;
      v27 = 15993;
      goto LABEL_53;
    case 0x14uLL:
      v25 = *(_DWORD *)(a1 + 16);
      v26 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x67632D706F2D6F6ELL;
      v27 = 1046700915;
LABEL_53:
      if (!v26 || v25 != v27)
        goto LABEL_88;
      return 1;
    case 0x15uLL:
      v22 = *(_QWORD *)(a1 + 13);
      v24 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x702D6D61663C6574;
      v23 = 0x3E79786F72702D6DLL;
      goto LABEL_67;
    case 0x17uLL:
      v22 = *(_QWORD *)(a1 + 15);
      v24 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x706F2D6F6E3C6574;
      v23 = 0x3E63637367632D70;
LABEL_67:
      if (!v24 || v22 != v23)
        goto LABEL_88;
      return 1;
    case 0x1DuLL:
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(_QWORD *)(a1 + 21);
      v32 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x736E692D73736170;
      v33 = 0x61746E656D757274;
      goto LABEL_81;
    case 0x20uLL:
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(_QWORD *)(a1 + 24);
      v32 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x2D737361703C6574;
      v33 = 0x656D757274736E69;
LABEL_81:
      if (!v32 || v30 != v33 || v31 != 0x3E6E6F697461746ELL)
        goto LABEL_88;
      return 1;
    default:
LABEL_88:
      if (sub_1C5A3C044((char *)a1, (size_t)a2, "inline", 6uLL))
        return 1;
      if (!v4)
        return 0;
      memset(v39, 0, sizeof(v39));
      v36 = (_QWORD *)(a3 + 24);
      v37 = 32 * v4;
      break;
  }
  do
  {
    v41[0] = (void **)a1;
    v41[1] = a2;
    v40[0] = 0;
    v40[1] = 0;
    if (!*v36)
    {
      sub_1C485C2F0();
      return sub_1C5A4E458();
    }
    if ((*(unsigned int (**)(_QWORD, void ***, _QWORD *, _QWORD *))(*(_QWORD *)*v36 + 48))(*v36, v41, v39, v40))
    {
      v41[0] = (void **)v39;
      sub_1C4764BBC(v41);
      return 1;
    }
    v36 += 4;
    v37 -= 32;
  }
  while (v37);
  v41[0] = (void **)v39;
  sub_1C4764BBC(v41);
  return 0;
}

uint64_t sub_1C5A4E458(uint64_t a1, void **a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v4;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  BOOL v20;
  BOOL v22;
  BOOL v24;
  BOOL v27;
  BOOL v29;
  int v30;
  int v31;
  BOOL v32;
  BOOL v34;
  BOOL v36;
  int v40;
  BOOL v42;
  BOOL v44;
  BOOL v47;
  uint64_t result;
  BOOL v49;
  BOOL v51;
  BOOL v55;
  BOOL v58;
  BOOL v62;
  BOOL v64;
  BOOL v65;
  int v72;
  BOOL v74;
  BOOL v76;
  BOOL v78;
  BOOL v80;
  BOOL v82;
  BOOL v85;
  BOOL v87;
  BOOL v92;
  BOOL v94;
  BOOL v95;
  BOOL v97;
  BOOL v98;
  const char *v103;
  const void *v104;
  size_t v105;
  int v106;
  BOOL v107;
  BOOL v108;
  BOOL v113;
  BOOL v115;
  BOOL v116;
  BOOL v118;
  BOOL v120;
  BOOL v123;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  BOOL v131;
  BOOL v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v145;
  BOOL v147;
  BOOL v149;
  BOOL v150;
  BOOL v152;
  BOOL v154;
  BOOL v157;
  BOOL v165;
  int v166;
  BOOL v169;
  BOOL v171;
  BOOL v175;
  BOOL v176;
  BOOL v178;
  BOOL v182;
  BOOL v188;
  BOOL v191;
  int v192;
  BOOL v193;
  BOOL v202;
  BOOL v204;
  BOOL v208;
  BOOL v216;
  BOOL v218;
  BOOL v223;
  BOOL v225;
  BOOL v226;
  BOOL v228;
  BOOL v229;
  BOOL v232;
  BOOL v245;
  BOOL v246;
  BOOL v249;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  BOOL v258;
  BOOL v260;
  BOOL v262;
  BOOL v264;
  BOOL v268;
  BOOL v271;
  BOOL v273;
  BOOL v275;
  BOOL v277;
  BOOL v279;
  BOOL v281;
  BOOL v288;
  BOOL v290;
  BOOL v291;
  BOOL v295;
  BOOL v297;
  BOOL v300;
  BOOL v302;
  BOOL v303;
  BOOL v306;
  uint64_t v310;
  BOOL v311;
  uint64_t v312;
  BOOL v314;
  BOOL v317;
  BOOL v318;
  BOOL v321;
  BOOL v322;
  BOOL v325;
  BOOL v327;
  BOOL v339;
  BOOL v344;
  _QWORD *v347;
  uint64_t v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  _QWORD v356[3];
  _QWORD v357[2];
  void **v358[2];

  v4 = a4;
  if (a2 == (void **)8)
  {
    if (*(_QWORD *)a1 == 0x6E6F6974636E7566)
      return 1;
    goto LABEL_15;
  }
  if (a2 != (void **)4)
  {
    if (a2 == (void **)9)
    {
      v27 = *(_QWORD *)a1 == 0x73736D2D706F6F6CLL && *(_BYTE *)(a1 + 8) == 97;
      v11 = 1;
      if (v27)
        return 1;
      goto LABEL_16;
    }
    if (a2 == (void **)19)
    {
      v9 = *(_QWORD *)a1 == 0x6E6F6974636E7566
        && *(_QWORD *)(a1 + 8) == 0x692D72656761653CLL
        && *(_QWORD *)(a1 + 11) == 0x3E766E692D726567;
      v10 = 1;
      if (v9)
        return 1;
      v11 = 0;
      goto LABEL_17;
    }
LABEL_15:
    v11 = 0;
LABEL_16:
    v10 = 0;
LABEL_17:
    v12 = 0;
    goto LABEL_18;
  }
  v12 = 1;
  if (*(_DWORD *)a1 == 1886351212)
    return 1;
  v11 = 0;
  v10 = 0;
LABEL_18:
  if ((unint64_t)sub_1C5A3BC6C((_DWORD *)a1, (unint64_t)a2, a3, a4) >> 32)
    return 1;
  if (a2 == (void **)11)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 3) == 0x3E61613C65726975)
      return 1;
    goto LABEL_34;
  }
  if (a2 == (void **)23)
  {
    v44 = *(_QWORD *)a1 == 0x6164696C61766E69
       && *(_QWORD *)(a1 + 8) == 0x6D757373613C6574
       && *(_QWORD *)(a1 + 15) == 0x3E736E6F6974706DLL;
    v16 = 1;
    if (v44)
      return 1;
    goto LABEL_35;
  }
  if (a2 == (void **)20)
  {
    v42 = *(_QWORD *)a1 == 0x3C65726975716572
       && *(_QWORD *)(a1 + 8) == 0x6974706D75737361
       && *(_DWORD *)(a1 + 16) == 1047752303;
    v17 = 1;
    if (v42)
      return 1;
    v16 = 0;
    v15 = 0;
    if (!v10)
      goto LABEL_44;
    goto LABEL_37;
  }
  if (a2 != (void **)14)
  {
LABEL_34:
    v16 = 0;
LABEL_35:
    v15 = 0;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 6) == 0x3E61613C65746164;
  v15 = 1;
  if (v14)
    return 1;
  v16 = 0;
LABEL_36:
  v17 = 0;
  if (!v10)
    goto LABEL_44;
LABEL_37:
  if (*(_QWORD *)a1 == 0x3C65726975716572
    && *(_QWORD *)(a1 + 8) == 0x72662D6B636F6C62
    && *(_QWORD *)(a1 + 11) == 0x3E716572662D6B63)
  {
    return 1;
  }
LABEL_44:
  if (a2 == (void **)22)
  {
    v20 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x6B636F6C623C6574;
    if (v20 && *(_QWORD *)(a1 + 14) == 0x3E716572662D6B63)
      return 1;
  }
  if (v17)
  {
    v22 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x702D68636E617262;
    if (v22 && *(_DWORD *)(a1 + 16) == 1046638450)
      return 1;
  }
  if (v16)
  {
    v24 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x636E6172623C6574;
    if (v24 && *(_QWORD *)(a1 + 15) == 0x3E626F72702D6863)
      return 1;
  }
  if (a2 == (void **)15)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 7) == 0x3E73656C6379633CLL)
      return 1;
    goto LABEL_93;
  }
  if (a2 == (void **)16)
  {
    v55 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x3E656572746D6F64;
    v31 = 1;
    if (v55)
      return 1;
    goto LABEL_94;
  }
  if (a2 != (void **)18)
  {
LABEL_93:
    v31 = 0;
LABEL_94:
    v30 = 0;
    goto LABEL_95;
  }
  v29 = *(_QWORD *)a1 == 0x6164696C61766E69
     && *(_QWORD *)(a1 + 8) == 0x656C6379633C6574
     && *(_WORD *)(a1 + 16) == 15987;
  v30 = 1;
  if (v29)
    return 1;
  v31 = 0;
LABEL_95:
  if (v10)
  {
    v32 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x72746D6F643C6574;
    if (v32 && *(_QWORD *)(a1 + 11) == 0x3E656572746D6F64)
      return 1;
  }
  if (v17)
  {
    v34 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x746D6F6474736F70;
    if (v34 && *(_DWORD *)(a1 + 16) == 1046832498)
      return 1;
  }
  if (v16)
  {
    v36 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x6474736F703C6574;
    if (v36 && *(_QWORD *)(a1 + 15) == 0x3E656572746D6F64)
      return 1;
  }
  if (a2 == (void **)22)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572
      && *(_QWORD *)(a1 + 8) == 0x6465646E616D6564
      && *(_QWORD *)(a1 + 14) == 0x3E737469622D6465)
    {
      return 1;
    }
    v354 = v31;
    v355 = v30;
    v40 = v15;
    goto LABEL_159;
  }
  v354 = v31;
  v355 = v30;
  v40 = v15;
  if (a2 != (void **)25)
  {
LABEL_159:
    v353 = 0;
    goto LABEL_160;
  }
  v47 = *(_QWORD *)a1 == 0x6164696C61766E69
     && *(_QWORD *)(a1 + 8) == 0x6E616D65643C6574
     && *(_QWORD *)(a1 + 16) == 0x737469622D646564
     && *(_BYTE *)(a1 + 24) == 62;
  v353 = 1;
  result = 1;
  if (v47)
    return result;
LABEL_160:
  if (v17)
  {
    v49 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x746E6F72666D6F64;
    if (v49 && *(_DWORD *)(a1 + 16) == 1047684457)
      return 1;
  }
  if (v16)
  {
    v51 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x72666D6F643C6574;
    if (v51 && *(_QWORD *)(a1 + 15) == 0x3E726569746E6F72)
      return 1;
  }
  if (a2 == (void **)24)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572
      && *(_QWORD *)(a1 + 8) == 0x6F72702D636E7566
      && *(_QWORD *)(a1 + 16) == 0x3E73656974726570)
    {
      return 1;
    }
    goto LABEL_205;
  }
  if (a2 != (void **)27)
  {
LABEL_205:
    v352 = 0;
    goto LABEL_206;
  }
  v58 = *(_QWORD *)a1 == 0x6164696C61766E69
     && *(_QWORD *)(a1 + 8) == 0x2D636E75663C6574
     && *(_QWORD *)(a1 + 16) == 0x69747265706F7270
     && *(_QWORD *)(a1 + 19) == 0x3E73656974726570;
  v352 = 1;
  result = 1;
  if (v58)
    return result;
LABEL_206:
  if (v40)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 6) == 0x3E73706F6F6C3C65)
      return 1;
  }
  if (a2 == (void **)17)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x73706F6F6C3C6574
      && *(_BYTE *)(a1 + 16) == 62)
    {
      return 1;
    }
  }
  else if (a2 == (void **)24)
  {
    v62 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x6C61762D797A616CLL;
    if (v62 && *(_QWORD *)(a1 + 16) == 0x3E6F666E692D6575)
      return 1;
  }
  if (v352)
  {
    v64 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x2D797A616C3C6574;
    v65 = v64 && *(_QWORD *)(a1 + 16) == 0x6E692D65756C6176;
    if (v65 && *(_QWORD *)(a1 + 19) == 0x3E6F666E692D6575)
      return 1;
  }
  if (a2 == (void **)11 && *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 3) == 0x3E61643C65726975)
    return 1;
  if (v40)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 6) == 0x3E61643C65746164)
      return 1;
  }
  if (a2 == (void **)34)
  {
    v349 = v40;
    v72 = memcmp((const void *)a1, "invalidate<inliner-size-estimator>", 0x22uLL);
    v40 = v349;
    if (!v72)
      return 1;
  }
  else if (a2 == (void **)31)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572
      && *(_QWORD *)(a1 + 8) == 0x2D72656E696C6E69
      && *(_QWORD *)(a1 + 16) == 0x7473652D657A6973
      && *(_QWORD *)(a1 + 23) == 0x3E726F74616D6974)
    {
      return 1;
    }
  }
  else if (a2 == (void **)15 && *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 7) == 0x3E7065646D656D3CLL)
  {
    return 1;
  }
  if (v355)
  {
    v74 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x65646D656D3C6574;
    if (v74 && *(_WORD *)(a1 + 16) == 15984)
      return 1;
    v76 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x737379726F6D656DLL;
    if (v76 && *(_WORD *)(a1 + 16) == 15969)
      return 1;
  }
  if (a2 == (void **)21)
  {
    v78 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x726F6D656D3C6574;
    if (v78 && *(_QWORD *)(a1 + 13) == 0x3E61737379726F6DLL)
      return 1;
  }
  if (v10)
  {
    v80 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x756C61762D696870;
    if (v80 && *(_QWORD *)(a1 + 11) == 0x3E7365756C61762DLL)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v82 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x762D6968703C6574;
    if (v82 && *(_QWORD *)(a1 + 14) == 0x3E7365756C61762DLL)
      return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x3E736E6F69676572)
      return 1;
  }
  if (v10)
  {
    v85 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x6F696765723C6574;
    if (v85 && *(_QWORD *)(a1 + 11) == 0x3E736E6F69676572)
      return 1;
  }
  if (v16)
  {
    v87 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x75662D706F2D6F6ELL;
    if (v87 && *(_QWORD *)(a1 + 15) == 0x3E6E6F6974636E75)
      return 1;
  }
  if (a2 == (void **)26)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x706F2D6F6E3C6574
      && *(_QWORD *)(a1 + 16) == 0x6F6974636E75662DLL
      && *(_WORD *)(a1 + 24) == 15982)
    {
      return 1;
    }
  }
  else if (a2 == (void **)24)
  {
    v92 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x616D65722D74706FLL;
    if (v92 && *(_QWORD *)(a1 + 16) == 0x3E74696D652D6B72)
      return 1;
  }
  if (v352)
  {
    v94 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x722D74706F3C6574;
    v95 = v94 && *(_QWORD *)(a1 + 16) == 0x6D652D6B72616D65;
    if (v95 && *(_QWORD *)(a1 + 19) == 0x3E74696D652D6B72)
      return 1;
  }
  if (v353)
  {
    v97 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x652D72616C616373;
    v98 = v97 && *(_QWORD *)(a1 + 16) == 0x6E6F6974756C6F76;
    if (v98 && *(_BYTE *)(a1 + 24) == 62)
      return 1;
  }
  if (a2 == (void **)28)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x616C6163733C6574
      && *(_QWORD *)(a1 + 16) == 0x74756C6F76652D72
      && *(_DWORD *)(a1 + 24) == 1047424873)
    {
      return 1;
    }
  }
  else
  {
    if (a2 == (void **)42)
    {
      v350 = v40;
      if (!memcmp((const void *)a1, "invalidate<should-not-run-function-passes>", 0x2AuLL))
        return 1;
      v103 = "invalidate<should-run-extra-vector-passes>";
      v104 = (const void *)a1;
      v105 = 42;
    }
    else
    {
      if (a2 != (void **)39)
        goto LABEL_394;
      v350 = v40;
      if (!memcmp((const void *)a1, "require<should-not-run-function-passes>", 0x27uLL))
        return 1;
      v103 = "require<should-run-extra-vector-passes>";
      v104 = (const void *)a1;
      v105 = 39;
    }
    v106 = memcmp(v104, v103, v105);
    v40 = v350;
    if (!v106)
      return 1;
  }
LABEL_394:
  if (v352)
  {
    v107 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x61732D6B63617473;
    v108 = v107 && *(_QWORD *)(a1 + 16) == 0x636F6C2D79746566;
    if (v108 && *(_QWORD *)(a1 + 19) == 0x3E6C61636F6C2D79)
      return 1;
  }
  if (a2 == (void **)30)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x6B636174733C6574
      && *(_QWORD *)(a1 + 16) == 0x2D7974656661732DLL
      && *(_QWORD *)(a1 + 22) == 0x3E6C61636F6C2D79)
    {
      return 1;
    }
  }
  else if (a2 == (void **)22)
  {
    v113 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x696C746567726174;
    if (v113 && *(_QWORD *)(a1 + 14) == 0x3E6F666E6962696CLL)
      return 1;
  }
  v351 = v40;
  if (v353)
  {
    v115 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x65677261743C6574;
    v116 = v115 && *(_QWORD *)(a1 + 16) == 0x6F666E6962696C74;
    if (v116 && *(_BYTE *)(a1 + 24) == 62)
      return 1;
  }
  if (a2 == (void **)17)
  {
    v118 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x7269746567726174;
    if (v118 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v17)
  {
    v120 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x65677261743C6574;
    if (v120 && *(_DWORD *)(a1 + 16) == 1047685492)
      return 1;
  }
  if (a2 == (void **)15 && *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 7) == 0x3E7966697265763CLL)
    return 1;
  if (v355)
  {
    v123 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x66697265763C6574;
    if (v123 && *(_WORD *)(a1 + 16) == 15993)
      return 1;
  }
  if (a2 == (void **)29)
  {
    v125 = *(_QWORD *)(a1 + 16);
    v126 = *(_QWORD *)(a1 + 21);
    v127 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x736E692D73736170;
    v128 = 0x61746E656D757274;
  }
  else
  {
    if (a2 != (void **)32)
      goto LABEL_483;
    v125 = *(_QWORD *)(a1 + 16);
    v126 = *(_QWORD *)(a1 + 24);
    v127 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x2D737361703C6574;
    v128 = 0x656D757274736E69;
  }
  if (v127 && v125 == v128 && v126 == 0x3E6E6F697461746ELL)
    return 1;
LABEL_483:
  if (v10)
  {
    v131 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x6E65677265766964;
    if (v131 && *(_QWORD *)(a1 + 11) == 0x3E65636E65677265)
      return 1;
  }
  if (a2 == (void **)22)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x72657669643C6574
      && *(_QWORD *)(a1 + 14) == 0x3E65636E65677265)
    {
      return 1;
    }
  }
  else if (a2 == (void **)30)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572
      && *(_QWORD *)(a1 + 8) == 0x636E75662D757067
      && *(_QWORD *)(a1 + 16) == 0x616E612D6E6F6974
      && *(_QWORD *)(a1 + 22) == 0x3E736973796C616ELL)
    {
      return 1;
    }
  }
  else if (a2 == (void **)33)
  {
    if (!memcmp((const void *)a1, "invalidate<gpu-function-analysis>", 0x21uLL))
      return 1;
  }
  else if (a2 == (void **)17)
  {
    v138 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x61612D6369736162;
    if (v138 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v17)
  {
    v140 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x63697361623C6574;
    if (v140 && *(_DWORD *)(a1 + 16) == 1046569261)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v142 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x65646E612D6C6663;
    if (v142 && *(_QWORD *)(a1 + 14) == 0x3E61612D73726564)
      return 1;
  }
  if (v353)
  {
    v144 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x612D6C66633C6574;
    v145 = v144 && *(_QWORD *)(a1 + 16) == 0x61612D737265646ELL;
    if (v145 && *(_BYTE *)(a1 + 24) == 62)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v147 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x656574732D6C6663;
    if (v147 && *(_QWORD *)(a1 + 14) == 0x3E61612D736E6565)
      return 1;
  }
  if (v353)
  {
    v149 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x732D6C66633C6574;
    v150 = v149 && *(_QWORD *)(a1 + 16) == 0x61612D736E656574;
    if (v150 && *(_BYTE *)(a1 + 24) == 62)
      return 1;
  }
  if (v17)
  {
    v152 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x6372612D636A626FLL;
    if (v152 && *(_DWORD *)(a1 + 16) == 1046569261)
      return 1;
  }
  if (v16)
  {
    v154 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x2D636A626F3C6574;
    if (v154 && *(_QWORD *)(a1 + 15) == 0x3E61612D6372612DLL)
      return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 8) == 0x3E61612D76656373)
      return 1;
  }
  if (v10)
  {
    v157 = *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x2D766563733C6574;
    if (v157 && *(_QWORD *)(a1 + 11) == 0x3E61612D76656373)
      return 1;
  }
  if (a2 == (void **)26)
  {
    if (*(_QWORD *)a1 == 0x3C65726975716572
      && *(_QWORD *)(a1 + 8) == 0x6E2D6465706F6373
      && *(_QWORD *)(a1 + 16) == 0x612D7361696C616FLL
      && *(_WORD *)(a1 + 24) == 15969)
    {
      return 1;
    }
    goto LABEL_633;
  }
  if (a2 == (void **)29)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69
      && *(_QWORD *)(a1 + 8) == 0x65706F63733C6574
      && *(_QWORD *)(a1 + 16) == 0x61696C616F6E2D64
      && *(_QWORD *)(a1 + 21) == 0x3E61612D7361696CLL)
    {
      return 1;
    }
    goto LABEL_633;
  }
  if (a2 != (void **)13)
  {
LABEL_633:
    v166 = 0;
    goto LABEL_634;
  }
  v165 = *(_QWORD *)a1 == 0x3C65726975716572 && *(_QWORD *)(a1 + 5) == 0x3E616162743C6572;
  v166 = 1;
  result = 1;
  if (v165)
    return result;
LABEL_634:
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 8) == 0x3E616162743C6574)
      return 1;
  }
  if (a2 == (void **)7 && *(_DWORD *)a1 == 1697472865 && *(_DWORD *)(a1 + 3) == 1818326629)
    return 1;
  if (v12 && *(_DWORD *)a1 == 1701012577)
    return 1;
  if (v355)
  {
    v169 = *(_QWORD *)a1 == 0x637369642D646461 && *(_QWORD *)(a1 + 8) == 0x6F74616E696D6972;
    if (v169 && *(_WORD *)(a1 + 16) == 29554)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v171 = *(_QWORD *)a1 == 0x6973736572676761 && *(_QWORD *)(a1 + 8) == 0x6374736E692D6576;
    if (v171 && *(_QWORD *)(a1 + 14) == 0x656E69626D6F6374)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x622D656D75737361 && *(_QWORD *)(a1 + 6) == 0x7265646C6975622DLL)
      return 1;
  }
  if (a2 == (void **)15)
  {
    if (*(_QWORD *)a1 == 0x732D656D75737361 && *(_QWORD *)(a1 + 7) == 0x7966696C706D6973)
      return 1;
  }
  else if (a2 == (void **)26)
  {
    v175 = *(_QWORD *)a1 == 0x6E656D6E67696C61 && *(_QWORD *)(a1 + 8) == 0x612D6D6F72662D74;
    v176 = v175 && *(_QWORD *)(a1 + 16) == 0x6F6974706D757373;
    if (v176 && *(_WORD *)(a1 + 24) == 29550)
      return 1;
  }
  if (v355)
  {
    v178 = *(_QWORD *)a1 == 0x697461746F6E6E61 && *(_QWORD *)(a1 + 8) == 0x72616D65722D6E6FLL;
    if (v178 && *(_WORD *)(a1 + 16) == 29547)
      return 1;
  }
  if (v12 && *(_DWORD *)a1 == 1701012578)
    return 1;
  if (a2 == (void **)15 && *(_QWORD *)a1 == 0x632D73646E756F62 && *(_QWORD *)(a1 + 7) == 0x676E696B63656863)
    return 1;
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x72632D6B61657262 && *(_QWORD *)(a1 + 8) == 0x73656764652D7469)
      return 1;
  }
  if (v355)
  {
    v182 = *(_QWORD *)a1 == 0x657469736C6C6163 && *(_QWORD *)(a1 + 8) == 0x697474696C70732DLL;
    if (v182 && *(_WORD *)(a1 + 16) == 26478)
      return 1;
  }
  if (a2 == (void **)10)
  {
    if (*(_QWORD *)a1 == 0x696F6874736E6F63 && *(_WORD *)(a1 + 8) == 29811)
      return 1;
    if (*(_QWORD *)a1 == 0x696C652D6F726F63 && *(_WORD *)(a1 + 8) == 25956)
      return 1;
    goto LABEL_752;
  }
  if (a2 == (void **)22)
  {
    if (*(_QWORD *)a1 == 0x69617274736E6F63
      && *(_QWORD *)(a1 + 8) == 0x696D696C652D746ELL
      && *(_QWORD *)(a1 + 14) == 0x6E6F6974616E696DLL)
    {
      return 1;
    }
    v188 = *(_QWORD *)a1 == 0x74616C6572726F63 && *(_QWORD *)(a1 + 8) == 0x61706F72702D6465;
    if (v188 && *(_QWORD *)(a1 + 14) == 0x6E6F697461676170)
      return 1;
    goto LABEL_752;
  }
  if (a2 == (void **)12)
  {
    v202 = *(_QWORD *)a1 == 0x656C632D6F726F63 && *(_DWORD *)(a1 + 8) == 1886744161;
    result = 1;
    if (v202)
      return result;
    goto LABEL_753;
  }
  if (a2 != (void **)3)
  {
LABEL_752:
    LODWORD(result) = 0;
LABEL_753:
    v192 = 0;
    goto LABEL_754;
  }
  if (*(_WORD *)a1 == 26723 && *(_BYTE *)(a1 + 2) == 114)
    return 1;
  v191 = *(_WORD *)a1 == 25444 && *(_BYTE *)(a1 + 2) == 101;
  v192 = 1;
  if (v191)
    return 1;
  LODWORD(result) = 0;
LABEL_754:
  if (v355)
  {
    v193 = *(_QWORD *)a1 == 0x706D756A2D616664 && *(_QWORD *)(a1 + 8) == 0x696461657268742DLL;
    if (v193 && *(_WORD *)(a1 + 16) == 26478)
      return 1;
  }
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x2D6D65722D766964 && *(_QWORD *)(a1 + 5) == 0x73726961702D6D65)
      return 1;
  }
  if (v192)
  {
    if (*(_WORD *)a1 == 29540 && *(_BYTE *)(a1 + 2) == 101)
      return 1;
  }
  if (a2 == (void **)7 && *(_DWORD *)a1 == 762605412 && *(_DWORD *)(a1 + 3) == 1734763309)
    return 1;
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x2D6766632D746F64 && *(_DWORD *)(a1 + 8) == 2037149295)
      return 1;
  }
  if (a2 == (void **)7 && *(_DWORD *)a1 == 762605412 && *(_DWORD *)(a1 + 3) == 1836016685)
    return 1;
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x2D6D6F642D746F64 && *(_DWORD *)(a1 + 8) == 2037149295)
      return 1;
  }
  if (a2 == (void **)15)
  {
    if (*(_QWORD *)a1 == 0x657272692D786966 && *(_QWORD *)(a1 + 7) == 0x656C626963756465)
      return 1;
  }
  else if (a2 == (void **)10 && *(_QWORD *)a1 == 0x636E657474616C66 && *(_WORD *)(a1 + 8) == 26470)
  {
    return 1;
  }
  if (v17)
  {
    v204 = *(_QWORD *)a1 == 0x6175672D656B616DLL && *(_QWORD *)(a1 + 8) == 0x6C7078652D736472;
    if (v204 && *(_DWORD *)(a1 + 16) == 1953063785)
      return 1;
  }
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x73696F682D6E7667 && *(_BYTE *)(a1 + 8) == 116)
      return 1;
  }
  if (a2 == (void **)8)
  {
    if (*(_QWORD *)a1 == 0x6B6E69732D6E7667)
      return 1;
  }
  else if (a2 == (void **)10 && *(_QWORD *)a1 == 0x726F776F6C6C6568 && *(_WORD *)(a1 + 8) == 25708)
  {
    return 1;
  }
  if (v17)
  {
    v208 = *(_QWORD *)a1 == 0x64612D7265666E69 && *(_QWORD *)(a1 + 8) == 0x70732D7373657264;
    if (v208 && *(_DWORD *)(a1 + 16) == 1936024417)
      return 1;
  }
  if (a2 == (void **)11 && *(_QWORD *)a1 == 0x626D6F6374736E69 && *(_QWORD *)(a1 + 3) == 0x656E69626D6F6374)
    return 1;
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x6E756F6374736E69 && *(_BYTE *)(a1 + 8) == 116)
      return 1;
  }
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x706D697374736E69 && *(_DWORD *)(a1 + 8) == 2036754796)
      return 1;
  }
  if (a2 == (void **)15 && *(_QWORD *)a1 == 0x6164696C61766E69 && *(_QWORD *)(a1 + 7) == 0x3E6C6C613C657461)
    return 1;
  if (v12 && *(_DWORD *)a1 == 1701016169)
    return 1;
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x6E693274616F6C66 && *(_BYTE *)(a1 + 8) == 116)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x75662D706F2D6F6ELL && *(_QWORD *)(a1 + 6) == 0x6E6F6974636E7566)
      return 1;
  }
  if (v10)
  {
    v216 = *(_QWORD *)a1 == 0x736C6C616362696CLL && *(_QWORD *)(a1 + 8) == 0x776B6E697268732DLL;
    if (v216 && *(_QWORD *)(a1 + 11) == 0x706172776B6E6972)
      return 1;
  }
  if (v12 && *(_DWORD *)a1 == 1953393004)
    return 1;
  if (v10)
  {
    v218 = *(_QWORD *)a1 == 0x742D7463656A6E69 && *(_QWORD *)(a1 + 8) == 0x697070616D2D696CLL;
    if (v218 && *(_QWORD *)(a1 + 11) == 0x73676E697070616DLL)
      return 1;
  }
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x656D616E74736E69 && *(_BYTE *)(a1 + 8) == 114)
      return 1;
  }
  if (a2 == (void **)11 && *(_QWORD *)a1 == 0x6F74617265776F6CLL && *(_QWORD *)(a1 + 3) == 0x63696D6F74617265)
    return 1;
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x78652D7265776F6CLL && *(_DWORD *)(a1 + 8) == 1952671088)
      return 1;
  }
  if (a2 == (void **)21)
  {
    v223 = *(_QWORD *)a1 == 0x75672D7265776F6CLL && *(_QWORD *)(a1 + 8) == 0x72746E692D647261;
    if (v223 && *(_QWORD *)(a1 + 13) == 0x6369736E6972746ELL)
      return 1;
  }
  if (v353)
  {
    v225 = *(_QWORD *)a1 == 0x6F632D7265776F6CLL && *(_QWORD *)(a1 + 8) == 0x692D746E6174736ELL;
    v226 = v225 && *(_QWORD *)(a1 + 16) == 0x6369736E6972746ELL;
    if (v226 && *(_BYTE *)(a1 + 24) == 115)
      return 1;
    v228 = *(_QWORD *)a1 == 0x69772D7265776F6CLL && *(_QWORD *)(a1 + 8) == 0x2D656C62616E6564;
    v229 = v228 && *(_QWORD *)(a1 + 16) == 0x6F697469646E6F63;
    if (v229 && *(_BYTE *)(a1 + 24) == 110)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x69772D6472617567 && *(_QWORD *)(a1 + 6) == 0x676E696E65646977)
      return 1;
  }
  if (a2 == (void **)21)
  {
    v232 = *(_QWORD *)a1 == 0x6F74732D64616F6CLL && *(_QWORD *)(a1 + 8) == 0x6F746365762D6572;
    if (v232 && *(_QWORD *)(a1 + 13) == 0x72657A69726F7463)
      return 1;
  }
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x6D69732D706F6F6CLL && *(_QWORD *)(a1 + 5) == 0x7966696C706D6973)
      return 1;
  }
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x6E69732D706F6F6CLL && *(_BYTE *)(a1 + 8) == 107)
      return 1;
  }
  if (a2 == (void **)11)
  {
    if (*(_QWORD *)a1 == 0x766E697265776F6CLL && *(_QWORD *)(a1 + 3) == 0x656B6F766E697265)
      return 1;
    if (*(_QWORD *)a1 == 0x6977737265776F6CLL && *(_QWORD *)(a1 + 3) == 0x6863746977737265)
      return 1;
  }
  else if (a2 == (void **)7 && *(_DWORD *)a1 == 846030189 && *(_DWORD *)(a1 + 3) == 1734701618)
  {
    return 1;
  }
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x706F7970636D656DLL && *(_BYTE *)(a1 + 8) == 116)
      return 1;
  }
  if (a2 == (void **)10)
  {
    if (*(_QWORD *)a1 == 0x6D6369656772656DLL && *(_WORD *)(a1 + 8) == 29552)
      return 1;
  }
  else if (a2 == (void **)11 && *(_QWORD *)a1 == 0x746572656772656DLL && *(_QWORD *)(a1 + 3) == 0x6E72757465726567)
  {
    return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x6165722D7972616ELL && *(_QWORD *)(a1 + 8) == 0x65746169636F7373)
      return 1;
  }
  if (a2 == (void **)6 && *(_DWORD *)a1 == 1735877998 && *(_WORD *)(a1 + 4) == 28278)
    return 1;
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x7268742D706D756ALL && *(_QWORD *)(a1 + 6) == 0x676E696461657268)
      return 1;
  }
  if (v353)
  {
    v245 = *(_QWORD *)a1 == 0x6C6C616974726170 && *(_QWORD *)(a1 + 8) == 0x656E696C6E692D79;
    v246 = v245 && *(_QWORD *)(a1 + 16) == 0x6C6C616362696C2DLL;
    if (v246 && *(_BYTE *)(a1 + 24) == 115)
      return 1;
  }
  if (a2 == (void **)5 && *(_DWORD *)a1 == 1936941932 && *(_BYTE *)(a1 + 4) == 97)
    return 1;
  if (v355)
  {
    v249 = *(_QWORD *)a1 == 0x7461642D706F6F6CLL && *(_QWORD *)(a1 + 8) == 0x7465666572702D61;
    if (v249 && *(_WORD *)(a1 + 16) == 26723)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x616F6C2D706F6F6CLL && *(_QWORD *)(a1 + 6) == 0x6D696C652D64616FLL)
      return 1;
  }
  if (a2 == (void **)11)
  {
    v252 = *(_QWORD *)(a1 + 3);
    v253 = *(_QWORD *)a1 == 0x7375662D706F6F6CLL;
    v254 = 0x6E6F697375662D70;
    goto LABEL_1035;
  }
  if (a2 == (void **)15)
  {
    if (*(_QWORD *)a1 == 0x7369642D706F6F6CLL && *(_QWORD *)(a1 + 7) == 0x6574756269727473)
      return 1;
    if (*(_QWORD *)a1 == 0x7265762D706F6F6CLL && *(_QWORD *)(a1 + 7) == 0x676E696E6F697372)
      return 1;
    v252 = *(_QWORD *)(a1 + 7);
    v253 = *(_QWORD *)a1 == 0x6372612D636A626FLL;
    v254 = 0x646E617078652D63;
LABEL_1035:
    if (v253 && v252 == v254)
      return 1;
    goto LABEL_1039;
  }
  if (a2 == (void **)8)
  {
    if (*(_QWORD *)a1 == 0x6372612D636A626FLL)
      return 1;
  }
  else if (a2 == (void **)17)
  {
    v288 = *(_QWORD *)a1 == 0x6372612D636A626FLL && *(_QWORD *)(a1 + 8) == 0x636172746E6F632DLL;
    if (v288 && *(_BYTE *)(a1 + 16) == 116)
      return 1;
  }
LABEL_1039:
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x6F6D656D2D6F6770 && *(_QWORD *)(a1 + 5) == 0x74706F2D706F6D65)
      return 1;
  }
  if (a2 == (void **)5 && *(_DWORD *)a1 == 1852404336 && *(_BYTE *)(a1 + 4) == 116)
    return 1;
  if (v355)
  {
    v258 = *(_QWORD *)a1 == 0x73613C746E697270 && *(_QWORD *)(a1 + 8) == 0x6E6F6974706D7573;
    if (v258 && *(_WORD *)(a1 + 16) == 15987)
      return 1;
  }
  if (a2 == (void **)17)
  {
    v260 = *(_QWORD *)a1 == 0x6C623C746E697270 && *(_QWORD *)(a1 + 8) == 0x716572662D6B636FLL;
    if (v260 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v355)
  {
    v262 = *(_QWORD *)a1 == 0x72623C746E697270 && *(_QWORD *)(a1 + 8) == 0x6F72702D68636E61;
    if (v262 && *(_WORD *)(a1 + 16) == 15970)
      return 1;
  }
  if (a2 == (void **)17)
  {
    v264 = *(_QWORD *)a1 == 0x6F633C746E697270 && *(_QWORD *)(a1 + 8) == 0x6C65646F6D2D7473;
    if (v264 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x79633C746E697270 && *(_QWORD *)(a1 + 5) == 0x3E73656C6379633CLL)
      return 1;
  }
  if (v11)
  {
    if (*(_QWORD *)a1 == 0x61643C746E697270 && *(_BYTE *)(a1 + 8) == 62)
      return 1;
  }
  if (a2 == (void **)17)
  {
    v268 = *(_QWORD *)a1 == 0x69643C746E697270 && *(_QWORD *)(a1 + 8) == 0x65636E6567726576;
    if (v268 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x6F643C746E697270 && *(_QWORD *)(a1 + 6) == 0x3E656572746D6F64)
      return 1;
  }
  if (v355)
  {
    v271 = *(_QWORD *)a1 == 0x6F703C746E697270 && *(_QWORD *)(a1 + 8) == 0x6572746D6F647473;
    if (v271 && *(_WORD *)(a1 + 16) == 15973)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v273 = *(_QWORD *)a1 == 0x65643C746E697270 && *(_QWORD *)(a1 + 8) == 0x7A697261656E696CLL;
    if (v273 && *(_QWORD *)(a1 + 14) == 0x3E6E6F6974617A69)
      return 1;
  }
  if (v17)
  {
    v275 = *(_QWORD *)a1 == 0x65643C746E697270 && *(_QWORD *)(a1 + 8) == 0x622D6465646E616DLL;
    if (v275 && *(_DWORD *)(a1 + 16) == 1047753833)
      return 1;
  }
  if (v355)
  {
    v277 = *(_QWORD *)a1 == 0x6F643C746E697270 && *(_QWORD *)(a1 + 8) == 0x6569746E6F72666DLL;
    if (v277 && *(_WORD *)(a1 + 16) == 15986)
      return 1;
  }
  if (a2 == (void **)22)
  {
    v279 = *(_QWORD *)a1 == 0x75663C746E697270 && *(_QWORD *)(a1 + 8) == 0x65706F72702D636ELL;
    if (v279 && *(_QWORD *)(a1 + 14) == 0x3E73656974726570)
      return 1;
  }
  if (v355)
  {
    v281 = *(_QWORD *)a1 == 0x6E693C746E697270 && *(_QWORD *)(a1 + 8) == 0x736F632D656E696CLL;
    if (v281 && *(_WORD *)(a1 + 16) == 15988)
      return 1;
  }
  if (a2 == (void **)29)
  {
    if (*(_QWORD *)a1 == 0x6E693C746E697270
      && *(_QWORD *)(a1 + 8) == 0x69732D72656E696CLL
      && *(_QWORD *)(a1 + 16) == 0x6D697473652D657ALL
      && *(_QWORD *)(a1 + 21) == 0x3E726F74616D6974)
    {
      return 1;
    }
  }
  else if (a2 == (void **)28)
  {
    v290 = *(_QWORD *)a1 == 0x70673C746E697270 && *(_QWORD *)(a1 + 8) == 0x6974636E75662D75;
    v291 = v290 && *(_QWORD *)(a1 + 16) == 0x796C616E612D6E6FLL;
    if (v291 && *(_DWORD *)(a1 + 24) == 1047751027)
      return 1;
  }
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x6F6C3C746E697270 && *(_DWORD *)(a1 + 8) == 1047752815)
      return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x656D3C746E697270 && *(_QWORD *)(a1 + 8) == 0x3E61737379726F6DLL)
      return 1;
  }
  if (v16)
  {
    v295 = *(_QWORD *)a1 == 0x656D3C746E697270 && *(_QWORD *)(a1 + 8) == 0x2D61737379726F6DLL;
    if (v295 && *(_QWORD *)(a1 + 15) == 0x3E72656B6C61772DLL)
      return 1;
  }
  if (a2 == (void **)17)
  {
    v297 = *(_QWORD *)a1 == 0x68703C746E697270 && *(_QWORD *)(a1 + 8) == 0x7365756C61762D69;
    if (v297 && *(_BYTE *)(a1 + 16) == 62)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x65723C746E697270 && *(_QWORD *)(a1 + 6) == 0x3E736E6F69676572)
      return 1;
  }
  if (v16)
  {
    v300 = *(_QWORD *)a1 == 0x63733C746E697270 && *(_QWORD *)(a1 + 8) == 0x6F76652D72616C61;
    if (v300 && *(_QWORD *)(a1 + 15) == 0x3E6E6F6974756C6FLL)
      return 1;
  }
  if (v353)
  {
    v302 = *(_QWORD *)a1 == 0x74733C746E697270 && *(_QWORD *)(a1 + 8) == 0x656661732D6B6361;
    v303 = v302 && *(_QWORD *)(a1 + 16) == 0x6C61636F6C2D7974;
    if (v303 && *(_BYTE *)(a1 + 24) == 62)
      return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x6C612D746E697270 && *(_QWORD *)(a1 + 8) == 0x737465732D736169)
      return 1;
  }
  if (v10)
  {
    v306 = *(_QWORD *)a1 == 0x72702D746E697270 && *(_QWORD *)(a1 + 8) == 0x6965746163696465;
    if (v306 && *(_QWORD *)(a1 + 11) == 0x6F666E6965746163)
      return 1;
  }
  if (a2 == (void **)17)
  {
    if (*(_QWORD *)a1 == 0x756D2D746E697270
      && *(_QWORD *)(a1 + 8) == 0x7475636578657473
      && *(_BYTE *)(a1 + 16) == 101)
    {
      return 1;
    }
    goto LABEL_1280;
  }
  if (a2 == (void **)15)
  {
    v310 = *(_QWORD *)(a1 + 7);
    v311 = *(_QWORD *)a1 == 0x656D2D746E697270;
    v312 = 0x7366657265646D65;
    goto LABEL_1276;
  }
  if (a2 == (void **)11)
  {
    v310 = *(_QWORD *)(a1 + 3);
    v311 = *(_QWORD *)a1 == 0x69636F7373616572;
    v312 = 0x65746169636F7373;
LABEL_1276:
    if (v311 && v310 == v312)
      return 1;
  }
LABEL_1280:
  if (v16)
  {
    v314 = *(_QWORD *)a1 == 0x6E61646E75646572 && *(_QWORD *)(a1 + 8) == 0x6E692D6762642D74;
    if (v314 && *(_QWORD *)(a1 + 15) == 0x6D696C652D74736ELL)
      return 1;
  }
  if (a2 == (void **)7 && *(_DWORD *)a1 == 845636978 && *(_DWORD *)(a1 + 3) == 1835363634)
    return 1;
  if (v352)
  {
    v317 = *(_QWORD *)a1 == 0x7A6972616C616373 && *(_QWORD *)(a1 + 8) == 0x64656B73616D2D65;
    v318 = v317 && *(_QWORD *)(a1 + 16) == 0x746E692D6D656D2DLL;
    if (v318 && *(_QWORD *)(a1 + 19) == 0x6E6972746E692D6DLL)
      return 1;
  }
  if (a2 == (void **)10)
  {
    if (*(_QWORD *)a1 == 0x7A6972616C616373 && *(_WORD *)(a1 + 8) == 29285)
      return 1;
  }
  else if (a2 == (void **)30)
  {
    v321 = *(_QWORD *)a1 == 0x6574617261706573 && *(_QWORD *)(a1 + 8) == 0x6F2D74736E6F632DLL;
    v322 = v321 && *(_QWORD *)(a1 + 16) == 0x72662D7465736666;
    if (v322 && *(_QWORD *)(a1 + 22) == 0x7065672D6D6F7266)
      return 1;
  }
  if (v12 && (*(_DWORD *)a1 == 1885561715 || *(_DWORD *)a1 == 1802398067))
    return 1;
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x746365762D706C73 && *(_QWORD *)(a1 + 6) == 0x72657A69726F7463)
      return 1;
  }
  if (v12 && *(_DWORD *)a1 == 1920167027)
    return 1;
  if (a2 == (void **)21)
  {
    v325 = *(_QWORD *)a1 == 0x74616C7563657073 && *(_QWORD *)(a1 + 8) == 0x636578652D657669;
    if (v325 && *(_QWORD *)(a1 + 13) == 0x6E6F697475636578)
      return 1;
  }
  if (v12 && *(_DWORD *)a1 == 1634693747)
    return 1;
  if (v355)
  {
    v327 = *(_QWORD *)a1 == 0x63672D7069727473 && *(_QWORD *)(a1 + 8) == 0x7461636F6C65722DLL;
    if (v327 && *(_WORD *)(a1 + 16) == 29541)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x7275746375727473 && *(_QWORD *)(a1 + 6) == 0x676663657A697275)
      return 1;
  }
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a1 == 0x6C6C61636C696174 && *(_DWORD *)(a1 + 8) == 1835625573)
      return 1;
  }
  if (v354)
  {
    if (*(_QWORD *)a1 == 0x6F6C2D7966696E75 && *(_QWORD *)(a1 + 8) == 0x73746978652D706FLL)
      return 1;
  }
  if (v351)
  {
    if (*(_QWORD *)a1 == 0x632D726F74636576 && *(_QWORD *)(a1 + 6) == 0x656E69626D6F632DLL)
      return 1;
  }
  if (a2 == (void **)6)
  {
    if (*(_DWORD *)a1 == 1769104758 && *(_WORD *)(a1 + 4) == 31078)
      return 1;
  }
  else if (a2 == (void **)15 && *(_QWORD *)a1 == 0x643C796669726576 && *(_QWORD *)(a1 + 7) == 0x3E656572746D6F64)
  {
    return 1;
  }
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x6C3C796669726576 && *(_QWORD *)(a1 + 5) == 0x3E73706F6F6C3C79)
      return 1;
  }
  if (a2 == (void **)17)
  {
    if (*(_QWORD *)a1 == 0x6D3C796669726576
      && *(_QWORD *)(a1 + 8) == 0x61737379726F6D65
      && *(_BYTE *)(a1 + 16) == 62)
    {
      return 1;
    }
  }
  else if (a2 == (void **)15 && *(_QWORD *)a1 == 0x723C796669726576 && *(_QWORD *)(a1 + 7) == 0x3E736E6F69676572)
  {
    return 1;
  }
  if (v17)
  {
    v339 = *(_QWORD *)a1 == 0x733C796669726576 && *(_QWORD *)(a1 + 8) == 0x746E696F70656661;
    if (v339 && *(_DWORD *)(a1 + 16) == 1047685421)
      return 1;
  }
  if (a2 == (void **)24)
  {
    if (*(_QWORD *)a1 == 0x733C796669726576
      && *(_QWORD *)(a1 + 8) == 0x76652D72616C6163
      && *(_QWORD *)(a1 + 16) == 0x3E6E6F6974756C6FLL)
    {
      return 1;
    }
  }
  else if (a2 == (void **)8 && *(_QWORD *)a1 == 0x6766632D77656976)
  {
    return 1;
  }
  if (v166)
  {
    if (*(_QWORD *)a1 == 0x6766632D77656976 && *(_QWORD *)(a1 + 5) == 0x796C6E6F2D676663)
      return 1;
  }
  if (a2 == (void **)8)
  {
    if (*(_QWORD *)a1 == 0x7473696F68736C74)
      return 1;
  }
  else if (a2 == (void **)17)
  {
    v344 = *(_QWORD *)a1 == 0x726F66736E617274 && *(_QWORD *)(a1 + 8) == 0x6E696E7261772D6DLL;
    if (v344 && *(_BYTE *)(a1 + 16) == 103)
      return 1;
  }
  if (v12 && *(_DWORD *)a1 == 1851880308)
    return 1;
  if (a2 == (void **)7 && *(_DWORD *)a1 == 1886217581 && *(_DWORD *)(a1 + 3) == 1718579824)
    return 1;
  if (sub_1C5A3C044((char *)a1, (size_t)a2, "early-cse", 9uLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "ee-instrument", 0xDuLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "lower-matrix-intrinsics", 0x17uLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "loop-unroll", 0xBuLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "msan", 4uLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "simplifycfg", 0xBuLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "loop-vectorize", 0xEuLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "mldst-motion", 0xCuLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "gvn", 3uLL)
    || sub_1C5A3C044((char *)a1, (size_t)a2, "print<stack-lifetime>", 0x15uLL))
  {
    return 1;
  }
  if (v4)
  {
    memset(v356, 0, sizeof(v356));
    v347 = (_QWORD *)(a3 + 24);
    v348 = 32 * v4;
    while (1)
    {
      v358[0] = (void **)a1;
      v358[1] = a2;
      v357[0] = 0;
      v357[1] = 0;
      if (!*v347)
        break;
      if ((*(unsigned int (**)(_QWORD, void ***, _QWORD *, _QWORD *))(*(_QWORD *)*v347 + 48))(*v347, v358, v356, v357))
      {
        goto LABEL_1463;
      }
      v347 += 4;
      v348 -= 32;
      if (!v348)
      {
        v358[0] = (void **)v356;
        sub_1C4764BBC(v358);
        return 0;
      }
    }
    sub_1C485C2F0();
LABEL_1463:
    v358[0] = (void **)v356;
    sub_1C4764BBC(v358);
    return 1;
  }
  return 0;
}

void llvm::PassBuilder::parsePassPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  __int128 *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  __int128 v26;
  void *__p[2];
  char v28;
  __int128 *v29;
  __int128 *v30;
  unsigned __int8 v31;
  _QWORD v32[2];
  _QWORD v33[4];
  __int16 v34;

  v32[0] = a3;
  v32[1] = a4;
  llvm::PassBuilder::parsePipelineText(a3, a4, (uint64_t)&v29);
  v8 = v31;
  if (!v31 || (v9 = (uint64_t)v29, v10 = v30, v29 == v30))
  {
    v18 = (void **)"invalid pipeline '{0}'";
    v19 = 22;
    v20 = v24;
    v21 = 1;
    v22 = &unk_1E8168E00;
    v23 = (__int128 *)v32;
    v24[0] = &v22;
    sub_1C4DCAF2C((uint64_t)&v18, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v14 = qword_1ED836B58[0];
    v15 = operator new();
    v34 = 260;
    v33[0] = __p;
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v14;
    *(_BYTE *)(v15 + 48) = 1;
    goto LABEL_14;
  }
  v26 = *v29;
  if ((sub_1C5A4DFA8(v26, *((void ***)&v26 + 1), *(_QWORD *)(a1 + 1504), (uint64_t *)*(unsigned int *)(a1 + 1512)) & 1) == 0)
  {
    v18 = (void **)"unknown cgscc pass '{0}' in pipeline '{1}'";
    v19 = 42;
    v20 = v25;
    v21 = 2;
    v22 = &unk_1E8168E00;
    v23 = &v26;
    v24[0] = &unk_1E8168E00;
    v24[1] = v32;
    v25[0] = &v22;
    v25[1] = v24;
    sub_1C4DCAF2C((uint64_t)&v18, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v17 = qword_1ED836B58[0];
    v15 = operator new();
    v34 = 260;
    v33[0] = __p;
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v17;
    *(_BYTE *)(v15 + 48) = 1;
LABEL_14:
    *a5 = v15;
    if (v28 < 0)
      operator delete(__p[0]);
    goto LABEL_16;
  }
  v12 = 40 * (((uint64_t)v10 - v9) / 40);
  while (1)
  {
    llvm::PassBuilder::parseCGSCCPass(a1, a2, v9, v11);
    if (*a5)
      break;
    v9 += 40;
    v12 -= 40;
    if (!v12)
    {
      *a5 = 0;
      break;
    }
  }
LABEL_16:
  if (v8)
  {
    v18 = (void **)&v29;
    sub_1C5A59000(&v18);
  }
}

{
  int v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  __int128 *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  __int128 v26;
  void *__p[2];
  char v28;
  __int128 *v29;
  __int128 *v30;
  unsigned __int8 v31;
  _QWORD v32[2];
  _QWORD v33[4];
  __int16 v34;

  v32[0] = a3;
  v32[1] = a4;
  llvm::PassBuilder::parsePipelineText(a3, a4, (uint64_t)&v29);
  v8 = v31;
  if (!v31 || (v9 = (uint64_t)v29, v10 = v30, v29 == v30))
  {
    v18 = (void **)"invalid pipeline '{0}'";
    v19 = 22;
    v20 = v24;
    v21 = 1;
    v22 = &unk_1E8168E00;
    v23 = (__int128 *)v32;
    v24[0] = &v22;
    sub_1C4DCAF2C((uint64_t)&v18, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v14 = qword_1ED836B58[0];
    v15 = operator new();
    v34 = 260;
    v33[0] = __p;
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v14;
    *(_BYTE *)(v15 + 48) = 1;
    goto LABEL_14;
  }
  v26 = *v29;
  if ((sub_1C5A4E458(v26, *((void ***)&v26 + 1), *(_QWORD *)(a1 + 1664), (uint64_t *)*(unsigned int *)(a1 + 1672)) & 1) == 0)
  {
    v18 = (void **)"unknown function pass '{0}' in pipeline '{1}'";
    v19 = 45;
    v20 = v25;
    v21 = 2;
    v22 = &unk_1E8168E00;
    v23 = &v26;
    v24[0] = &unk_1E8168E00;
    v24[1] = v32;
    v25[0] = &v22;
    v25[1] = v24;
    sub_1C4DCAF2C((uint64_t)&v18, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v17 = qword_1ED836B58[0];
    v15 = operator new();
    v34 = 260;
    v33[0] = __p;
    *(_QWORD *)v15 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v15 + 8));
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v17;
    *(_BYTE *)(v15 + 48) = 1;
LABEL_14:
    *a5 = v15;
    if (v28 < 0)
      operator delete(__p[0]);
    goto LABEL_16;
  }
  v12 = 40 * (((uint64_t)v10 - v9) / 40);
  while (1)
  {
    llvm::PassBuilder::parseFunctionPass(a1, a2, v9, v11);
    if (*a5)
      break;
    v9 += 40;
    v12 -= 40;
    if (!v12)
    {
      *a5 = 0;
      break;
    }
  }
LABEL_16:
  if (v8)
  {
    v18 = (void **)&v29;
    sub_1C5A59000(&v18);
  }
}

{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void **v15[4];
  _QWORD v16[2];
  _QWORD *v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD v23[2];
  void **v24;
  __int16 v25;

  v23[0] = a3;
  v23[1] = a4;
  llvm::PassBuilder::parsePipelineText(a3, a4, (uint64_t)&v20);
  v9 = v22;
  if (!v22 || (v10 = v20, v20 == v21))
  {
    v15[0] = (void **)"invalid pipeline '{0}'";
    v15[1] = (void **)22;
    v15[2] = (void **)&v17;
    v15[3] = (void **)1;
    v16[0] = &unk_1E8168E00;
    v16[1] = v23;
    v17 = v16;
    sub_1C4DCAF2C((uint64_t)v15, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v13 = qword_1ED836B58[0];
    v14 = operator new();
    v25 = 260;
    v24 = __p;
    *(_QWORD *)v14 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v24, (_QWORD *)(v14 + 8));
    *(_QWORD *)(v14 + 32) = 3;
    *(_QWORD *)(v14 + 40) = v13;
    *(_BYTE *)(v14 + 48) = 1;
    *a5 = v14;
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = 40 * ((v21 - v20) / 40);
    while (1)
    {
      llvm::PassBuilder::parseLoopPass(a1, a2, v10, v8, a5);
      if (*a5)
        break;
      v10 += 40;
      v11 -= 40;
      if (!v11)
      {
        *a5 = 0;
        break;
      }
    }
  }
  if (v9)
  {
    v15[0] = (void **)&v20;
    sub_1C5A59000(v15);
  }
}

void llvm::PassBuilder::parseAAPipeline(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  _QWORD v25[2];
  _DWORD *v26;
  unint64_t v27;
  void **v28;
  __int16 v29;
  void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  _QWORD *(*v35)(uint64_t, uint64_t, uint64_t);
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v26 = a3;
  v27 = a4;
  if (!a4)
  {
LABEL_24:
    *a5 = 0;
    return;
  }
  v6 = a4;
  v7 = (uint64_t)a3;
  if (a4 == 7 && *a3 == 1634100580 && *(_DWORD *)((char *)a3 + 3) == 1953264993)
  {
    v30 = &v32;
    v32 = sub_1C5A633DC;
    v33 = (uint64_t)sub_1C5A63540;
    v22 = *a1;
    v34 = sub_1C5A636A4;
    v35 = sub_1C5A62D74;
    v31 = 0x400000004;
    if (v22)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 112))(v22, &v30);
    sub_1C4FCE718(a2, (uint64_t)&v30);
    if (v30 != &v32)
      free(v30);
    goto LABEL_24;
  }
  while (1)
  {
    LOBYTE(v30) = 44;
    v11 = llvm::StringRef::find((uint64_t *)&v26, (char *)&v30, 1uLL, 0);
    v12 = v6 >= v11 ? v11 : v6;
    v13 = v6 >= v11 + 1 ? v11 + 1 : v6;
    v14 = v7 + v13;
    v15 = v6 - v13;
    v16 = v7;
    v17 = v11 == -1 ? v6 : v12;
    v7 = v11 == -1 ? 0 : v14;
    v25[0] = v16;
    v25[1] = v17;
    v6 = v11 == -1 ? 0 : v15;
    v26 = (_DWORD *)v7;
    v27 = v6;
    llvm::PassBuilder::parseAAPassName((uint64_t)a1, a2, v16, v17);
    if ((v18 & 1) == 0)
      break;
    if (!v6)
      goto LABEL_24;
  }
  v30 = "unknown alias analysis name '{0}'";
  v31 = 33;
  v32 = (void (*)(uint64_t, uint64_t, uint64_t))v36;
  v33 = 1;
  v34 = (void (*)(uint64_t, uint64_t, uint64_t))&unk_1E8168E00;
  v35 = (_QWORD *(*)(uint64_t, uint64_t, uint64_t))v25;
  v36[0] = &v34;
  sub_1C4DCAF2C((uint64_t)&v30, __p);
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v20 = qword_1ED836B58[0];
  v21 = operator new();
  v29 = 260;
  v28 = __p;
  *(_QWORD *)v21 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v28, (_QWORD *)(v21 + 8));
  *(_QWORD *)(v21 + 32) = 3;
  *(_QWORD *)(v21 + 40) = v20;
  *(_BYTE *)(v21 + 48) = 1;
  *a5 = v21;
  if (v24 < 0)
    operator delete(__p[0]);
}

uint64_t llvm::PassBuilder::isAAPassName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;

  result = 0;
  switch(a3)
  {
    case 4:
      return *(_DWORD *)a2 == 1633772148;
    case 7:
      v4 = *(_DWORD *)(a2 + 3);
      v5 = *(_DWORD *)a2 == 1986356083;
      v6 = 1633758582;
      return v5 && v4 == v6;
    case 8:
      return *(_QWORD *)a2 == 0x61612D6369736162;
    case 10:
      v4 = *(unsigned __int16 *)(a2 + 8);
      v5 = *(_QWORD *)a2 == 0x2D736C61626F6C67;
      v6 = 24929;
      return v5 && v4 == v6;
    case 11:
      v8 = *(_QWORD *)(a2 + 3);
      v9 = *(_QWORD *)a2 == 0x6372612D636A626FLL;
      v10 = 0x2D6372612D63;
      goto LABEL_19;
    case 13:
      if (*(_QWORD *)a2 == 0x65646E612D6C6663 && *(_QWORD *)(a2 + 5) == 0x61612D737265646ELL)
        return 1;
      v8 = *(_QWORD *)(a2 + 5);
      v9 = *(_QWORD *)a2 == 0x656574732D6C6663;
      v10 = 0x2D736E656574;
LABEL_19:
      v12 = v10 & 0xFFFFFFFFFFFFLL | 0x6161000000000000;
      return v9 && v8 == v12;
    case 17:
      return *(_QWORD *)a2 == 0x6E2D6465706F6373
          && *(_QWORD *)(a2 + 8) == 0x612D7361696C616FLL
          && *(_BYTE *)(a2 + 16) == 97;
    default:
      return result;
  }
}

uint64_t llvm::PassBuilder::isAnalysisPassName(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v43;
  int v50;
  BOOL v51;
  int v52;
  uint64_t result;
  BOOL v61;
  BOOL v62;

  switch(a3)
  {
    case 2:
      if (*a2 == 24929)
        goto LABEL_214;
      v3 = *a2;
      v4 = 24932;
      goto LABEL_10;
    case 3:
      v5 = 103;
      if (*a2 == 25452 && *((_BYTE *)a2 + 2) == 103)
        goto LABEL_214;
      v7 = *((unsigned __int8 *)a2 + 2);
      v8 = *a2 == 25700;
      return v8 && v7 == v5;
    case 4:
      v3 = *(_DWORD *)a2;
      v4 = 1633772148;
LABEL_10:
      if (v3 == v4)
        goto LABEL_214;
      goto LABEL_213;
    case 5:
      v9 = *((unsigned __int8 *)a2 + 4);
      v10 = *(_DWORD *)a2 == 1886351212;
      v11 = 115;
      return v10 && v9 == v11;
    case 6:
      if (*(_DWORD *)a2 == 1769104758 && a2[2] == 31078)
        goto LABEL_214;
      if (*(_DWORD *)a2 == 1818458467 && a2[2] == 29541)
        goto LABEL_214;
      v14 = a2[2];
      v15 = *(_DWORD *)a2 == 1684890989;
      v16 = 28773;
      goto LABEL_93;
    case 7:
      if (*(_DWORD *)a2 == 1953328996 && *(_DWORD *)((char *)a2 + 3) == 1701147252)
        goto LABEL_214;
      if (*(_DWORD *)a2 == 1768383858 && *(_DWORD *)((char *)a2 + 3) == 1936617321)
        goto LABEL_214;
      v9 = *(_DWORD *)((char *)a2 + 3);
      v10 = *(_DWORD *)a2 == 1986356083;
      v11 = 1633758582;
      return v10 && v9 == v11;
    case 8:
      if (*(_QWORD *)a2 == 0x7269746567726174 || *(_QWORD *)a2 == 0x61612D6369736162)
        goto LABEL_214;
      return *(_QWORD *)a2 == 0x73726573752D7669;
    case 9:
      if (*(_QWORD *)a2 == 0x706172676C6C6163 && *((_BYTE *)a2 + 8) == 104)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x786F72702D6D6166 && *((_BYTE *)a2 + 8) == 121)
        goto LABEL_214;
      v14 = *((unsigned __int8 *)a2 + 8);
      v15 = *(_QWORD *)a2 == 0x737379726F6D656DLL;
      v16 = 97;
      goto LABEL_93;
    case 10:
      if (*(_QWORD *)a2 == 0x2D736C61626F6C67 && a2[4] == 24929)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x72662D6B636F6C62 && a2[4] == 29029)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x756C61762D696870 && a2[4] == 29541)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6E65677265766964 && a2[4] == 25955)
        goto LABEL_214;
      v14 = a2[4];
      v15 = *(_QWORD *)a2 == 0x6F6C2D706F2D6F6ELL;
      v16 = 28783;
      goto LABEL_93;
    case 11:
      if (*(_QWORD *)a2 == 0x67632D706F2D6F6ELL && *(_QWORD *)((char *)a2 + 3) == 0x63637367632D706FLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6974706D75737361 && *(_QWORD *)((char *)a2 + 3) == 0x736E6F6974706D75)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x702D68636E617262 && *(_QWORD *)((char *)a2 + 3) == 0x626F72702D68636ELL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x746D6F6474736F70 && *(_QWORD *)((char *)a2 + 3) == 0x656572746D6F6474)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x746E6F72666D6F64 && *(_QWORD *)((char *)a2 + 3) == 0x726569746E6F7266)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6372612D636A626FLL && *(_QWORD *)((char *)a2 + 3) == 0x61612D6372612D63)
        goto LABEL_214;
      v32 = *(_QWORD *)((char *)a2 + 3);
      v33 = *(_QWORD *)a2 == 0x692D737365636361;
      v34 = 0x6F666E692D737365;
      goto LABEL_148;
    case 12:
      if (*(_QWORD *)a2 == 0x6F6D2D706F2D6F6ELL && *((_DWORD *)a2 + 2) == 1701606756)
        goto LABEL_214;
      v14 = *((_DWORD *)a2 + 2);
      v15 = *(_QWORD *)a2 == 0x61732D6B63617473;
      v16 = 2037671270;
LABEL_93:
      if (!v15 || v14 != v16)
        goto LABEL_213;
      goto LABEL_214;
    case 13:
      if (*(_QWORD *)a2 == 0x6C696D69732D7269 && *(_QWORD *)((char *)a2 + 5) == 0x79746972616C696DLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6465646E616D6564 && *(_QWORD *)((char *)a2 + 5) == 0x737469622D646564)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x696C746567726174 && *(_QWORD *)((char *)a2 + 5) == 0x6F666E6962696C74)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x65646E612D6C6663 && *(_QWORD *)((char *)a2 + 5) == 0x61612D737265646ELL)
        goto LABEL_214;
      v32 = *(_QWORD *)((char *)a2 + 5);
      v33 = *(_QWORD *)a2 == 0x656574732D6C6663;
      v34 = 0x61612D736E656574;
      goto LABEL_148;
    case 14:
      if (*(_QWORD *)a2 == 0x732D656C75646F6DLL && *(_QWORD *)(a2 + 3) == 0x7972616D6D75732DLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x612D656E696C6E69 && *(_QWORD *)(a2 + 3) == 0x726F73697664612DLL)
        goto LABEL_214;
      v32 = *(_QWORD *)(a2 + 3);
      v33 = *(_QWORD *)a2 == 0x75662D706F2D6F6ELL;
      v43 = 1668183398;
LABEL_147:
      v34 = v43 | 0x6E6F697400000000;
      goto LABEL_148;
    case 15:
      if (*(_QWORD *)a2 == 0x6E6F6974636E7566 && *(_QWORD *)((char *)a2 + 7) == 0x7370756F72672D6ELL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x2D656C69666F7270 && *(_QWORD *)((char *)a2 + 7) == 0x7972616D6D75732DLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6F6C672D6E617361 && *(_QWORD *)((char *)a2 + 7) == 0x646D2D736C61626FLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6F72702D636E7566 && *(_QWORD *)((char *)a2 + 7) == 0x736569747265706FLL)
        goto LABEL_214;
      if (*(_QWORD *)a2 == 0x6C61762D797A616CLL && *(_QWORD *)((char *)a2 + 7) == 0x6F666E692D65756CLL)
        goto LABEL_214;
      v32 = *(_QWORD *)((char *)a2 + 7);
      v33 = *(_QWORD *)a2 == 0x616D65722D74706FLL;
      v34 = 0x74696D652D6B7261;
LABEL_148:
      if (!v33 || v32 != v34)
        goto LABEL_213;
      goto LABEL_214;
    case 16:
      v32 = *((_QWORD *)a2 + 1);
      v33 = *(_QWORD *)a2 == 0x652D72616C616373;
      v43 = 1970040694;
      goto LABEL_147;
    case 17:
      v50 = *((unsigned __int8 *)a2 + 16);
      v51 = *(_QWORD *)a2 == 0x6E2D6465706F6373 && *((_QWORD *)a2 + 1) == 0x612D7361696C616FLL;
      v52 = 97;
      goto LABEL_162;
    case 18:
      v50 = a2[8];
      v51 = *(_QWORD *)a2 == 0x61732D6B63617473 && *((_QWORD *)a2 + 1) == 0x636F6C2D79746566;
      v52 = 27745;
LABEL_162:
      if (!v51 || v50 != v52)
        goto LABEL_213;
      goto LABEL_214;
    case 20:
      v7 = *((_DWORD *)a2 + 4);
      v8 = *(_QWORD *)a2 == 0x736E692D73736170 && *((_QWORD *)a2 + 1) == 0x61746E656D757274;
      v5 = 1852795252;
      return v8 && v7 == v5;
    case 21:
      return *(_QWORD *)a2 == 0x636E75662D757067
          && *((_QWORD *)a2 + 1) == 0x616E612D6E6F6974
          && *(_QWORD *)((char *)a2 + 13) == 0x736973796C616E61;
    case 22:
      if (*(_QWORD *)a2 != 0x2D72656E696C6E69
        || *((_QWORD *)a2 + 1) != 0x7473652D657A6973
        || *(_QWORD *)(a2 + 7) != 0x726F74616D697473)
      {
        goto LABEL_213;
      }
      goto LABEL_214;
    case 30:
      if (*(_QWORD *)a2 != 0x6E2D646C756F6873
        || *((_QWORD *)a2 + 1) != 0x662D6E75722D746FLL
        || *((_QWORD *)a2 + 2) != 0x2D6E6F6974636E75
        || *(_QWORD *)(a2 + 11) != 0x7365737361702D6ELL)
      {
        v61 = *(_QWORD *)a2 == 0x722D646C756F6873 && *((_QWORD *)a2 + 1) == 0x61727478652D6E75;
        v62 = v61 && *((_QWORD *)a2 + 2) == 0x2D726F746365762DLL;
        if (!v62 || *(_QWORD *)(a2 + 11) != 0x7365737361702D72)
          goto LABEL_213;
      }
LABEL_214:
      result = 1;
      break;
    default:
LABEL_213:
      result = 0;
      break;
  }
  return result;
}

llvm::raw_ostream *llvm::PassBuilder::printPassNames(llvm::PassBuilder *this, llvm::raw_ostream *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _OWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v3 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v3 > 0xEuLL)
  {
    qmemcpy(v3, "Module passes:\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Module passes:\n", 0xFuLL);
  }
  sub_1C5A54C84("always-inline", 0xDuLL, a2);
  sub_1C5A54C84("attributor", 0xAuLL, a2);
  sub_1C5A54C84("annotation2metadata", 0x13uLL, a2);
  sub_1C5A54C84("openmp-opt", 0xAuLL, a2);
  sub_1C5A54C84("called-value-propagation", 0x18uLL, a2);
  sub_1C5A54C84("canonicalize-aliases", 0x14uLL, a2);
  sub_1C5A54C84("cg-profile", 0xAuLL, a2);
  sub_1C5A54C84("check-debugify", 0xEuLL, a2);
  sub_1C5A54C84("constmerge", 0xAuLL, a2);
  sub_1C5A54C84("coro-early", 0xAuLL, a2);
  sub_1C5A54C84("cross-dso-cfi", 0xDuLL, a2);
  sub_1C5A54C84("deadargelim", 0xBuLL, a2);
  sub_1C5A54C84("debugify", 8uLL, a2);
  sub_1C5A54C84("dot-callgraph", 0xDuLL, a2);
  sub_1C5A54C84("elim-avail-extern", 0x11uLL, a2);
  sub_1C5A54C84("extract-blocks", 0xEuLL, a2);
  sub_1C5A54C84("forceattrs", 0xAuLL, a2);
  sub_1C5A54C84("function-import", 0xFuLL, a2);
  sub_1C5A54C84("function-specialization", 0x17uLL, a2);
  sub_1C5A54C84("globaldce", 9uLL, a2);
  sub_1C5A54C84("globalopt", 9uLL, a2);
  sub_1C5A54C84("globalsplit", 0xBuLL, a2);
  sub_1C5A54C84("hotcoldsplit", 0xCuLL, a2);
  sub_1C5A54C84("inferattrs", 0xAuLL, a2);
  sub_1C5A54C84("inliner-wrapper", 0xFuLL, a2);
  sub_1C5A54C84("print<inline-advisor>", 0x15uLL, a2);
  sub_1C5A54C84("inliner-wrapper-no-mandatory-first", 0x22uLL, a2);
  sub_1C5A54C84("insert-gcov-profiling", 0x15uLL, a2);
  sub_1C5A54C84("instrorderfile", 0xEuLL, a2);
  sub_1C5A54C84("instrprof", 9uLL, a2);
  sub_1C5A54C84("internalize", 0xBuLL, a2);
  sub_1C5A54C84("invalidate<all>", 0xFuLL, a2);
  sub_1C5A54C84("ipsccp", 6uLL, a2);
  sub_1C5A54C84("iroutliner", 0xAuLL, a2);
  sub_1C5A54C84("print-ir-similarity", 0x13uLL, a2);
  sub_1C5A54C84("lower-global-dtors", 0x12uLL, a2);
  sub_1C5A54C84("lowertypetests", 0xEuLL, a2);
  sub_1C5A54C84("metarenamer", 0xBuLL, a2);
  sub_1C5A54C84("mergefunc", 9uLL, a2);
  sub_1C5A54C84("name-anon-globals", 0x11uLL, a2);
  sub_1C5A54C84("no-op-module", 0xCuLL, a2);
  sub_1C5A54C84("objc-arc-apelim", 0xFuLL, a2);
  sub_1C5A54C84("partial-inliner", 0xFuLL, a2);
  sub_1C5A54C84("pgo-icall-prom", 0xEuLL, a2);
  sub_1C5A54C84("pgo-instr-gen", 0xDuLL, a2);
  sub_1C5A54C84("pgo-instr-use", 0xDuLL, a2);
  sub_1C5A54C84("print-function-groups", 0x15uLL, a2);
  sub_1C5A54C84("print-profile-summary", 0x15uLL, a2);
  sub_1C5A54C84("print-callgraph", 0xFuLL, a2);
  sub_1C5A54C84("print", 5uLL, a2);
  sub_1C5A54C84("print-lcg", 9uLL, a2);
  sub_1C5A54C84("print-lcg-dot", 0xDuLL, a2);
  sub_1C5A54C84("print-must-be-executed-contexts", 0x1FuLL, a2);
  sub_1C5A54C84("print-stack-safety", 0x12uLL, a2);
  sub_1C5A54C84("print<module-debuginfo>", 0x17uLL, a2);
  sub_1C5A54C84("recompute-globalsaa", 0x13uLL, a2);
  sub_1C5A54C84("rel-lookup-table-converter", 0x1AuLL, a2);
  sub_1C5A54C84("rewrite-statepoints-for-gc", 0x1AuLL, a2);
  sub_1C5A54C84("rewrite-symbols", 0xFuLL, a2);
  sub_1C5A54C84("rpo-function-attrs", 0x12uLL, a2);
  sub_1C5A54C84("sample-profile", 0xEuLL, a2);
  sub_1C5A54C84("scc-oz-module-inliner", 0x15uLL, a2);
  sub_1C5A54C84("strip", 5uLL, a2);
  sub_1C5A54C84("strip-dead-debug-info", 0x15uLL, a2);
  sub_1C5A54C84("pseudo-probe", 0xCuLL, a2);
  sub_1C5A54C84("soft-ptrauth", 0xCuLL, a2);
  sub_1C5A54C84("strip-dead-prototypes", 0x15uLL, a2);
  sub_1C5A54C84("strip-debug-declare", 0x13uLL, a2);
  sub_1C5A54C84("strip-nondebug", 0xEuLL, a2);
  sub_1C5A54C84("strip-nonlinetable-debuginfo", 0x1CuLL, a2);
  sub_1C5A54C84("synthetic-counts-propagation", 0x1CuLL, a2);
  sub_1C5A54C84("verify", 6uLL, a2);
  sub_1C5A54C84("view-callgraph", 0xEuLL, a2);
  sub_1C5A54C84("wholeprogramdevirt", 0x12uLL, a2);
  sub_1C5A54C84("dfsan", 5uLL, a2);
  sub_1C5A54C84("msan-module", 0xBuLL, a2);
  sub_1C5A54C84("module-inline", 0xDuLL, a2);
  sub_1C5A54C84("tsan-module", 0xBuLL, a2);
  sub_1C5A54C84("sancov-module", 0xDuLL, a2);
  sub_1C5A54C84("memprof-module", 0xEuLL, a2);
  sub_1C5A54C84("poison-checking", 0xFuLL, a2);
  sub_1C5A54C84("pseudo-probe-update", 0x13uLL, a2);
  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x1AuLL)
  {
    qmemcpy(v4, "Module passes with params:\n", 27);
    *((_QWORD *)a2 + 4) += 27;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Module passes with params:\n", 0x1BuLL);
  }
  sub_1C5A54D74("loop-extract", 0xCuLL, "single", 6uLL, a2);
  sub_1C5A54D74("hwasan", 6uLL, "kernel;recover", 0xEuLL, a2);
  sub_1C5A54D74("asan-module", 0xBuLL, "kernel", 6uLL, a2);
  v5 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v5) > 0x10)
  {
    *(_BYTE *)(v5 + 16) = 10;
    *(_OWORD *)v5 = *(_OWORD *)"Module analyses:\n";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Module analyses:\n", 0x11uLL);
  }
  sub_1C5A54C84("callgraph", 9uLL, a2);
  sub_1C5A54C84("function-groups", 0xFuLL, a2);
  sub_1C5A54C84("lcg", 3uLL, a2);
  sub_1C5A54C84("module-summary", 0xEuLL, a2);
  sub_1C5A54C84("no-op-module", 0xCuLL, a2);
  sub_1C5A54C84("profile-summary", 0xFuLL, a2);
  sub_1C5A54C84("stack-safety", 0xCuLL, a2);
  sub_1C5A54C84("verify", 6uLL, a2);
  sub_1C5A54C84("pass-instrumentation", 0x14uLL, a2);
  sub_1C5A54C84("asan-globals-md", 0xFuLL, a2);
  sub_1C5A54C84("inline-advisor", 0xEuLL, a2);
  sub_1C5A54C84("ir-similarity", 0xDuLL, a2);
  sub_1C5A54C84("globals-aa", 0xAuLL, a2);
  v6 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 0x16uLL)
  {
    qmemcpy(v6, "Module alias analyses:\n", 23);
    *((_QWORD *)a2 + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Module alias analyses:\n", 0x17uLL);
  }
  sub_1C5A54C84("globals-aa", 0xAuLL, a2);
  v7 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0xDuLL)
  {
    qmemcpy(v7, "CGSCC passes:\n", 14);
    *((_QWORD *)a2 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(a2, "CGSCC passes:\n", 0xEuLL);
  }
  sub_1C5A54C84("argpromotion", 0xCuLL, a2);
  sub_1C5A54C84("invalidate<all>", 0xFuLL, a2);
  sub_1C5A54C84("function-attrs", 0xEuLL, a2);
  sub_1C5A54C84("attributor-cgscc", 0x10uLL, a2);
  sub_1C5A54C84("openmp-opt-cgscc", 0x10uLL, a2);
  sub_1C5A54C84("coro-split", 0xAuLL, a2);
  sub_1C5A54C84("no-op-cgscc", 0xBuLL, a2);
  v8 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 0x19uLL)
  {
    qmemcpy(v8, "CGSCC passes with params:\n", 26);
    *((_QWORD *)a2 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(a2, "CGSCC passes with params:\n", 0x1AuLL);
  }
  sub_1C5A54D74("inline", 6uLL, "only-mandatory", 0xEuLL, a2);
  v9 = (_OWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 0xFuLL)
  {
    *v9 = *(_OWORD *)"CGSCC analyses:\n";
    *((_QWORD *)a2 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(a2, "CGSCC analyses:\n", 0x10uLL);
  }
  sub_1C5A54C84("no-op-cgscc", 0xBuLL, a2);
  sub_1C5A54C84("fam-proxy", 9uLL, a2);
  sub_1C5A54C84("pass-instrumentation", 0x14uLL, a2);
  v10 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 0x10)
  {
    *(_BYTE *)(v10 + 16) = 10;
    *(_OWORD *)v10 = *(_OWORD *)"Function passes:\n";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Function passes:\n", 0x11uLL);
  }
  sub_1C5A54C84("aa-eval", 7uLL, a2);
  sub_1C5A54C84("adce", 4uLL, a2);
  sub_1C5A54C84("add-discriminators", 0x12uLL, a2);
  sub_1C5A54C84("aggressive-instcombine", 0x16uLL, a2);
  sub_1C5A54C84("assume-builder", 0xEuLL, a2);
  sub_1C5A54C84("assume-simplify", 0xFuLL, a2);
  sub_1C5A54C84("alignment-from-assumptions", 0x1AuLL, a2);
  sub_1C5A54C84("annotation-remarks", 0x12uLL, a2);
  sub_1C5A54C84("bdce", 4uLL, a2);
  sub_1C5A54C84("bounds-checking", 0xFuLL, a2);
  sub_1C5A54C84("break-crit-edges", 0x10uLL, a2);
  sub_1C5A54C84("callsite-splitting", 0x12uLL, a2);
  sub_1C5A54C84("consthoist", 0xAuLL, a2);
  sub_1C5A54C84("constraint-elimination", 0x16uLL, a2);
  sub_1C5A54C84("chr", 3uLL, a2);
  sub_1C5A54C84("coro-elide", 0xAuLL, a2);
  sub_1C5A54C84("coro-cleanup", 0xCuLL, a2);
  sub_1C5A54C84("correlated-propagation", 0x16uLL, a2);
  sub_1C5A54C84("dce", 3uLL, a2);
  sub_1C5A54C84("dfa-jump-threading", 0x12uLL, a2);
  sub_1C5A54C84("div-rem-pairs", 0xDuLL, a2);
  sub_1C5A54C84("dse", 3uLL, a2);
  sub_1C5A54C84("dot-cfg", 7uLL, a2);
  sub_1C5A54C84("dot-cfg-only", 0xCuLL, a2);
  sub_1C5A54C84("dot-dom", 7uLL, a2);
  sub_1C5A54C84("dot-dom-only", 0xCuLL, a2);
  sub_1C5A54C84("fix-irreducible", 0xFuLL, a2);
  sub_1C5A54C84("flattencfg", 0xAuLL, a2);
  sub_1C5A54C84("make-guards-explicit", 0x14uLL, a2);
  sub_1C5A54C84("gvn-hoist", 9uLL, a2);
  sub_1C5A54C84("gvn-sink", 8uLL, a2);
  sub_1C5A54C84("helloworld", 0xAuLL, a2);
  sub_1C5A54C84("infer-address-spaces", 0x14uLL, a2);
  sub_1C5A54C84("instcombine", 0xBuLL, a2);
  sub_1C5A54C84("instcount", 9uLL, a2);
  sub_1C5A54C84("instsimplify", 0xCuLL, a2);
  sub_1C5A54C84("invalidate<all>", 0xFuLL, a2);
  sub_1C5A54C84("irce", 4uLL, a2);
  sub_1C5A54C84("float2int", 9uLL, a2);
  sub_1C5A54C84("no-op-function", 0xEuLL, a2);
  sub_1C5A54C84("libcalls-shrinkwrap", 0x13uLL, a2);
  sub_1C5A54C84("lint", 4uLL, a2);
  sub_1C5A54C84("inject-tli-mappings", 0x13uLL, a2);
  sub_1C5A54C84("instnamer", 9uLL, a2);
  sub_1C5A54C84("loweratomic", 0xBuLL, a2);
  sub_1C5A54C84("lower-expect", 0xCuLL, a2);
  sub_1C5A54C84("lower-guard-intrinsic", 0x15uLL, a2);
  sub_1C5A54C84("lower-constant-intrinsics", 0x19uLL, a2);
  sub_1C5A54C84("lower-widenable-condition", 0x19uLL, a2);
  sub_1C5A54C84("guard-widening", 0xEuLL, a2);
  sub_1C5A54C84("load-store-vectorizer", 0x15uLL, a2);
  sub_1C5A54C84("loop-simplify", 0xDuLL, a2);
  sub_1C5A54C84("loop-sink", 9uLL, a2);
  sub_1C5A54C84("lowerinvoke", 0xBuLL, a2);
  sub_1C5A54C84("lowerswitch", 0xBuLL, a2);
  sub_1C5A54C84("mem2reg", 7uLL, a2);
  sub_1C5A54C84("memcpyopt", 9uLL, a2);
  sub_1C5A54C84("mergeicmps", 0xAuLL, a2);
  sub_1C5A54C84("mergereturn", 0xBuLL, a2);
  sub_1C5A54C84("nary-reassociate", 0x10uLL, a2);
  sub_1C5A54C84("newgvn", 6uLL, a2);
  sub_1C5A54C84("jump-threading", 0xEuLL, a2);
  sub_1C5A54C84("partially-inline-libcalls", 0x19uLL, a2);
  sub_1C5A54C84("lcssa", 5uLL, a2);
  sub_1C5A54C84("loop-data-prefetch", 0x12uLL, a2);
  sub_1C5A54C84("loop-load-elim", 0xEuLL, a2);
  sub_1C5A54C84("loop-fusion", 0xBuLL, a2);
  sub_1C5A54C84("loop-distribute", 0xFuLL, a2);
  sub_1C5A54C84("loop-versioning", 0xFuLL, a2);
  sub_1C5A54C84("objc-arc", 8uLL, a2);
  sub_1C5A54C84("objc-arc-contract", 0x11uLL, a2);
  sub_1C5A54C84("objc-arc-expand", 0xFuLL, a2);
  sub_1C5A54C84("pgo-memop-opt", 0xDuLL, a2);
  sub_1C5A54C84("print", 5uLL, a2);
  sub_1C5A54C84("print<assumptions>", 0x12uLL, a2);
  sub_1C5A54C84("print<block-freq>", 0x11uLL, a2);
  sub_1C5A54C84("print<branch-prob>", 0x12uLL, a2);
  sub_1C5A54C84("print<cost-model>", 0x11uLL, a2);
  sub_1C5A54C84("print<cycles>", 0xDuLL, a2);
  sub_1C5A54C84("print<da>", 9uLL, a2);
  sub_1C5A54C84("print<divergence>", 0x11uLL, a2);
  sub_1C5A54C84("print<domtree>", 0xEuLL, a2);
  sub_1C5A54C84("print<postdomtree>", 0x12uLL, a2);
  sub_1C5A54C84("print<delinearization>", 0x16uLL, a2);
  sub_1C5A54C84("print<demanded-bits>", 0x14uLL, a2);
  sub_1C5A54C84("print<domfrontier>", 0x12uLL, a2);
  sub_1C5A54C84("print<func-properties>", 0x16uLL, a2);
  sub_1C5A54C84("print<inline-cost>", 0x12uLL, a2);
  sub_1C5A54C84("print<inliner-size-estimator>", 0x1DuLL, a2);
  sub_1C5A54C84("print<gpu-function-analysis>", 0x1CuLL, a2);
  sub_1C5A54C84("print<loops>", 0xCuLL, a2);
  sub_1C5A54C84("print<memoryssa>", 0x10uLL, a2);
  sub_1C5A54C84("print<memoryssa-walker>", 0x17uLL, a2);
  sub_1C5A54C84("print<phi-values>", 0x11uLL, a2);
  sub_1C5A54C84("print<regions>", 0xEuLL, a2);
  sub_1C5A54C84("print<scalar-evolution>", 0x17uLL, a2);
  sub_1C5A54C84("print<stack-safety-local>", 0x19uLL, a2);
  sub_1C5A54C84("print-alias-sets", 0x10uLL, a2);
  sub_1C5A54C84("print-predicateinfo", 0x13uLL, a2);
  sub_1C5A54C84("print-mustexecute", 0x11uLL, a2);
  sub_1C5A54C84("print-memderefs", 0xFuLL, a2);
  sub_1C5A54C84("reassociate", 0xBuLL, a2);
  sub_1C5A54C84("redundant-dbg-inst-elim", 0x17uLL, a2);
  sub_1C5A54C84("reg2mem", 7uLL, a2);
  sub_1C5A54C84("scalarize-masked-mem-intrin", 0x1BuLL, a2);
  sub_1C5A54C84("scalarizer", 0xAuLL, a2);
  sub_1C5A54C84("separate-const-offset-from-gep", 0x1EuLL, a2);
  sub_1C5A54C84("sccp", 4uLL, a2);
  sub_1C5A54C84("sink", 4uLL, a2);
  sub_1C5A54C84("slp-vectorizer", 0xEuLL, a2);
  sub_1C5A54C84("slsr", 4uLL, a2);
  sub_1C5A54C84("speculative-execution", 0x15uLL, a2);
  sub_1C5A54C84("sroa", 4uLL, a2);
  sub_1C5A54C84("strip-gc-relocates", 0x12uLL, a2);
  sub_1C5A54C84("structurizecfg", 0xEuLL, a2);
  sub_1C5A54C84("tailcallelim", 0xCuLL, a2);
  sub_1C5A54C84("unify-loop-exits", 0x10uLL, a2);
  sub_1C5A54C84("vector-combine", 0xEuLL, a2);
  sub_1C5A54C84("verify", 6uLL, a2);
  sub_1C5A54C84("verify<domtree>", 0xFuLL, a2);
  sub_1C5A54C84("verify<loops>", 0xDuLL, a2);
  sub_1C5A54C84("verify<memoryssa>", 0x11uLL, a2);
  sub_1C5A54C84("verify<regions>", 0xFuLL, a2);
  sub_1C5A54C84("verify<safepoint-ir>", 0x14uLL, a2);
  sub_1C5A54C84("verify<scalar-evolution>", 0x18uLL, a2);
  sub_1C5A54C84("view-cfg", 8uLL, a2);
  sub_1C5A54C84("view-cfg-only", 0xDuLL, a2);
  sub_1C5A54C84("tlshoist", 8uLL, a2);
  sub_1C5A54C84("transform-warning", 0x11uLL, a2);
  sub_1C5A54C84("tsan", 4uLL, a2);
  sub_1C5A54C84("memprof", 7uLL, a2);
  v11 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 0x1CuLL)
  {
    qmemcpy(v11, "Function passes with params:\n", 29);
    *((_QWORD *)a2 + 4) += 29;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Function passes with params:\n", 0x1DuLL);
  }
  sub_1C5A54D74("early-cse", 9uLL, "memssa", 6uLL, a2);
  sub_1C5A54D74("ee-instrument", 0xDuLL, "post-inline", 0xBuLL, a2);
  sub_1C5A54D74("lower-matrix-intrinsics", 0x17uLL, "minimal", 7uLL, a2);
  sub_1C5A54D74("loop-unroll", 0xBuLL, "O0;O1;O2;O3;full-unroll-max=N;no-partial;partial;no-peeling;peeling;no-profile-peeling;profile-peeling;no-runtime;ru"
    "ntime;no-upperbound;upperbound",
    0x92uLL,
    a2);
  sub_1C5A54D74("msan", 4uLL, "recover;kernel;eager-checks;track-origins=N", 0x2BuLL, a2);
  sub_1C5A54D74("simplifycfg", 0xBuLL, "no-forward-switch-cond;forward-switch-cond;no-switch-range-to-icmp;switch-range-to-icmp;no-switch-to-lookup;switch-t"
    "o-lookup;no-keep-loops;keep-loops;no-hoist-common-insts;hoist-common-insts;no-sink-common-insts;sink-common-insts;bo"
    "nus-inst-threshold=N",
    0xFCuLL,
    a2);
  sub_1C5A54D74("loop-vectorize", 0xEuLL, "no-interleave-forced-only;interleave-forced-only;no-vectorize-forced-only;vectorize-forced-only",
    0x5FuLL,
    a2);
  sub_1C5A54D74("mldst-motion", 0xCuLL, "no-split-footer-bb;split-footer-bb", 0x22uLL, a2);
  sub_1C5A54D74("gvn", 3uLL, "no-pre;pre;no-load-pre;load-pre;no-split-backedge-load-pre;split-backedge-load-pre;no-memdep;memdep",
    0x63uLL,
    a2);
  sub_1C5A54D74("print<stack-lifetime>", 0x15uLL, "may;must", 8uLL, a2);
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 0x12)
  {
    *(_DWORD *)(v12 + 15) = 171602789;
    *(_OWORD *)v12 = *(_OWORD *)"Function analyses:\n";
    *((_QWORD *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Function analyses:\n", 0x13uLL);
  }
  sub_1C5A54C84("aa", 2uLL, a2);
  sub_1C5A54C84("assumptions", 0xBuLL, a2);
  sub_1C5A54C84("block-freq", 0xAuLL, a2);
  sub_1C5A54C84("branch-prob", 0xBuLL, a2);
  sub_1C5A54C84("cycles", 6uLL, a2);
  sub_1C5A54C84("domtree", 7uLL, a2);
  sub_1C5A54C84("postdomtree", 0xBuLL, a2);
  sub_1C5A54C84("demanded-bits", 0xDuLL, a2);
  sub_1C5A54C84("domfrontier", 0xBuLL, a2);
  sub_1C5A54C84("func-properties", 0xFuLL, a2);
  sub_1C5A54C84("loops", 5uLL, a2);
  sub_1C5A54C84("lazy-value-info", 0xFuLL, a2);
  sub_1C5A54C84("da", 2uLL, a2);
  sub_1C5A54C84("inliner-size-estimator", 0x16uLL, a2);
  sub_1C5A54C84("memdep", 6uLL, a2);
  sub_1C5A54C84("memoryssa", 9uLL, a2);
  sub_1C5A54C84("phi-values", 0xAuLL, a2);
  sub_1C5A54C84("regions", 7uLL, a2);
  sub_1C5A54C84("no-op-function", 0xEuLL, a2);
  sub_1C5A54C84("opt-remark-emit", 0xFuLL, a2);
  sub_1C5A54C84("scalar-evolution", 0x10uLL, a2);
  sub_1C5A54C84("should-not-run-function-passes", 0x1EuLL, a2);
  sub_1C5A54C84("should-run-extra-vector-passes", 0x1EuLL, a2);
  sub_1C5A54C84("stack-safety-local", 0x12uLL, a2);
  sub_1C5A54C84("targetlibinfo", 0xDuLL, a2);
  sub_1C5A54C84("targetir", 8uLL, a2);
  sub_1C5A54C84("verify", 6uLL, a2);
  sub_1C5A54C84("pass-instrumentation", 0x14uLL, a2);
  sub_1C5A54C84("divergence", 0xAuLL, a2);
  sub_1C5A54C84("gpu-function-analysis", 0x15uLL, a2);
  sub_1C5A54C84("basic-aa", 8uLL, a2);
  sub_1C5A54C84("cfl-anders-aa", 0xDuLL, a2);
  sub_1C5A54C84("cfl-steens-aa", 0xDuLL, a2);
  sub_1C5A54C84("objc-arc-aa", 0xBuLL, a2);
  sub_1C5A54C84("scev-aa", 7uLL, a2);
  sub_1C5A54C84("scoped-noalias-aa", 0x11uLL, a2);
  sub_1C5A54C84("tbaa", 4uLL, a2);
  v13 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 0x18uLL)
  {
    qmemcpy(v13, "Function alias analyses:\n", 25);
    *((_QWORD *)a2 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Function alias analyses:\n", 0x19uLL);
  }
  sub_1C5A54C84("basic-aa", 8uLL, a2);
  sub_1C5A54C84("cfl-anders-aa", 0xDuLL, a2);
  sub_1C5A54C84("cfl-steens-aa", 0xDuLL, a2);
  sub_1C5A54C84("objc-arc-aa", 0xBuLL, a2);
  sub_1C5A54C84("scev-aa", 7uLL, a2);
  sub_1C5A54C84("scoped-noalias-aa", 0x11uLL, a2);
  sub_1C5A54C84("tbaa", 4uLL, a2);
  v14 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 0x10)
  {
    *(_BYTE *)(v14 + 16) = 10;
    *(_OWORD *)v14 = *(_OWORD *)"LoopNest passes:\n";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "LoopNest passes:\n", 0x11uLL);
  }
  sub_1C5A54C84("loop-flatten", 0xCuLL, a2);
  sub_1C5A54C84("loop-interchange", 0x10uLL, a2);
  sub_1C5A54C84("loop-unroll-and-jam", 0x13uLL, a2);
  sub_1C5A54C84("no-op-loopnest", 0xEuLL, a2);
  v15 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 0xCuLL)
  {
    qmemcpy(v15, "Loop passes:\n", 13);
    *((_QWORD *)a2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Loop passes:\n", 0xDuLL);
  }
  sub_1C5A54C84("canon-freeze", 0xCuLL, a2);
  sub_1C5A54C84("dot-ddg", 7uLL, a2);
  sub_1C5A54C84("invalidate<all>", 0xFuLL, a2);
  sub_1C5A54C84("loop-idiom", 0xAuLL, a2);
  sub_1C5A54C84("loop-instsimplify", 0x11uLL, a2);
  sub_1C5A54C84("loop-rotate", 0xBuLL, a2);
  sub_1C5A54C84("no-op-loop", 0xAuLL, a2);
  sub_1C5A54C84("print", 5uLL, a2);
  sub_1C5A54C84("loop-deletion", 0xDuLL, a2);
  sub_1C5A54C84("loop-simplifycfg", 0x10uLL, a2);
  sub_1C5A54C84("loop-reduce", 0xBuLL, a2);
  sub_1C5A54C84("indvars", 7uLL, a2);
  sub_1C5A54C84("loop-unroll-full", 0x10uLL, a2);
  sub_1C5A54C84("print-access-info", 0x11uLL, a2);
  sub_1C5A54C84("print<ddg>", 0xAuLL, a2);
  sub_1C5A54C84("print<iv-users>", 0xFuLL, a2);
  sub_1C5A54C84("print<loopnest>", 0xFuLL, a2);
  sub_1C5A54C84("print<loop-cache-cost>", 0x16uLL, a2);
  sub_1C5A54C84("loop-predication", 0x10uLL, a2);
  sub_1C5A54C84("guard-widening", 0xEuLL, a2);
  sub_1C5A54C84("loop-bound-split", 0x10uLL, a2);
  sub_1C5A54C84("loop-reroll", 0xBuLL, a2);
  sub_1C5A54C84("loop-versioning-licm", 0x14uLL, a2);
  v16 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 0x18uLL)
  {
    qmemcpy(v16, "Loop passes with params:\n", 25);
    *((_QWORD *)a2 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Loop passes with params:\n", 0x19uLL);
  }
  sub_1C5A54D74("simple-loop-unswitch", 0x14uLL, "nontrivial;no-nontrivial;trivial;no-trivial", 0x2BuLL, a2);
  sub_1C5A54D74("licm", 4uLL, "allowspeculation", 0x10uLL, a2);
  sub_1C5A54D74("lnicm", 5uLL, "allowspeculation", 0x10uLL, a2);
  v17 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 0xEuLL)
  {
    qmemcpy(v17, "Loop analyses:\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Loop analyses:\n", 0xFuLL);
  }
  sub_1C5A54C84("no-op-loop", 0xAuLL, a2);
  sub_1C5A54C84("access-info", 0xBuLL, a2);
  sub_1C5A54C84("ddg", 3uLL, a2);
  sub_1C5A54C84("iv-users", 8uLL, a2);
  return sub_1C5A54C84("pass-instrumentation", 0x14uLL, a2);
}

llvm::raw_ostream *sub_1C5A54C84(const void *a1, size_t a2, llvm::raw_ostream *this)
{
  _WORD *v6;
  llvm::raw_ostream *result;

  v6 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8224;
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 2);
    *((_QWORD *)this + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (a2 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (a2)
    {
      memcpy(result, a1, a2);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + a2);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a1, a2);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *sub_1C5A54D74(const void *a1, size_t a2, const void *a3, size_t a4, llvm::raw_ostream *this)
{
  _WORD *v10;
  _BYTE *v11;
  llvm::raw_ostream *result;

  v10 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8224;
    v11 = (_BYTE *)(*((_QWORD *)this + 4) + 2);
    *((_QWORD *)this + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    v11 = (_BYTE *)*((_QWORD *)this + 4);
  }
  if (a2 <= *((_QWORD *)this + 3) - (_QWORD)v11)
  {
    if (a2)
    {
      memcpy(v11, a1, a2);
      v11 = (_BYTE *)(*((_QWORD *)this + 4) + a2);
      *((_QWORD *)this + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a1, a2);
    v11 = (_BYTE *)*((_QWORD *)this + 4);
  }
  if (*((_BYTE **)this + 3) == v11)
  {
    llvm::raw_ostream::write(this, "<", 1uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  else
  {
    *v11 = 60;
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = result;
  }
  if (a4 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (a4)
    {
      memcpy(result, a3, a4);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + a4);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a3, a4);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)result <= 1uLL)
    return llvm::raw_ostream::write(this, ">\n", 2uLL);
  *(_WORD *)result = 2622;
  *((_QWORD *)this + 4) += 2;
  return result;
}

uint64_t llvm::PassBuilder::registerParseTopLevelPipelineCallback(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;

  v4 = *(unsigned int *)(a1 + 1352);
  v5 = *(_QWORD *)(a1 + 1344);
  if (v4 >= *(_DWORD *)(a1 + 1356))
  {
    v8 = (unint64_t *)(a1 + 1344);
    v9 = v4 + 1;
    v10 = v5 + 32 * v4;
    if (v5 <= a2 && v10 > a2)
    {
      v12 = a2 - v5;
      sub_1C5A646EC(a1 + 1344, v9);
      v5 = *v8;
      a2 = *v8 + v12;
    }
    else
    {
      sub_1C5A646EC(a1 + 1344, v9);
      v5 = *v8;
    }
  }
  v6 = v5 + 32 * *(unsigned int *)(a1 + 1352);
  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(_QWORD *)(v6 + 24) = v6;
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v6);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(v6 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = 0;
  }
  ++*(_DWORD *)(a1 + 1352);
  return result;
}

uint64_t sub_1C5A54FD0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C5A55010(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C5A5507C(uint64_t result)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(result + 408);
  if (v1 != *(void **)(result + 400))
  {
    v6 = result;
    free(v1);
    result = v6;
  }
  v2 = *(void **)(result + 320);
  if (v2 != (void *)(result + 336))
  {
    v7 = result;
    free(v2);
    result = v7;
  }
  v3 = *(void **)(result + 240);
  if (v3 != (void *)(result + 256))
  {
    v8 = result;
    free(v3);
    result = v8;
  }
  v4 = *(void **)(result + 160);
  if (v4 != (void *)(result + 176))
  {
    v9 = result;
    free(v4);
    result = v9;
  }
  v5 = *(void **)(result + 80);
  if (v5 != (void *)(result + 96))
  {
    v10 = result;
    free(v5);
    result = v10;
  }
  if (*(_QWORD *)result != result + 16)
  {
    v11 = result;
    free(*(void **)result);
    return v11;
  }
  return result;
}

char *sub_1C5A55168(char *__dst, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  v8 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v9;
  }
  *((_DWORD *)__dst + 12) = a4;
  *((_QWORD *)__dst + 7) = 0;
  return __dst;
}

void sub_1C5A551F4(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  const void *v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  void *__p[2];
  char v28;
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  unint64_t v32;
  void **v33;
  __int16 v34;

  v31 = a2;
  v32 = a3;
  v30[0] = a6;
  v30[1] = a7;
  if (a3)
  {
    v10 = a3;
    v11 = a2;
    while (1)
    {
      LOBYTE(v23[0]) = 59;
      v12 = llvm::StringRef::find(&v31, (char *)v23, 1uLL, 0);
      v13 = v10 >= v12 ? v12 : v10;
      v14 = v10 >= v12 + 1 ? v12 + 1 : v10;
      v15 = v11 + v14;
      v16 = v10 - v14;
      v17 = v12 == -1;
      v18 = (const void *)v11;
      if (v17)
      {
        v13 = v10;
        v11 = 0;
      }
      else
      {
        v11 = v15;
      }
      v29[0] = v18;
      v29[1] = v13;
      v10 = v17 ? 0 : v16;
      v31 = v11;
      v32 = v10;
      if (v13 != a5 || a5 && memcmp(v18, a4, a5))
        break;
      if (!v10)
      {
        v19 = 1;
        goto LABEL_21;
      }
    }
    v23[0] = "invalid {1} pass parameter '{0}' ";
    v23[1] = 33;
    v23[2] = v26;
    v23[3] = 2;
    v24[0] = &unk_1E8168E00;
    v24[1] = v29;
    v25[0] = &unk_1E8168E00;
    v25[1] = v30;
    v26[0] = v24;
    v26[1] = v25;
    sub_1C4DCAF2C((uint64_t)v23, __p);
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v21 = qword_1ED836B58[0];
    v22 = operator new();
    v34 = 260;
    v33 = __p;
    *(_QWORD *)v22 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v33, (_QWORD *)(v22 + 8));
    *(_QWORD *)(v22 + 32) = 3;
    *(_QWORD *)(v22 + 40) = v21;
    *(_BYTE *)(v22 + 48) = 1;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v22;
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v19 = 0;
LABEL_21:
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_BYTE *)a1 = v19;
  }
}

void sub_1C5A553E4(void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 675;
        sub_1C62EA684(v4 - 674);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5A5546C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        sub_1C5A554E4(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5A554E4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 - 21);
        v4 -= 168;
        v6 = v7;
        if (v4 + 16 != v7)
          free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5A5555C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          v6 = *((_QWORD *)v4 - 2);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v4 - 6) >= 0x41u)
        {
          v7 = *((_QWORD *)v4 - 4);
          if (v7)
            MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C5A55620(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 72 * v2;
    v5 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C56E89BC(v5);
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C5A55684(_QWORD *a1)
{
  uint64_t i;

  for (i = 66; i != 12; i -= 3)
  {
    sub_1C5A556F4((uint64_t)&a1[i]);
    MEMORY[0x1CAA32FB4](a1[i], 8);
  }
  sub_1C5A55900(a1 + 6);
  MEMORY[0x1CAA32FB4](a1[3], 8);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C5A556F4(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 72 * v1;
    do
    {
      v4 = v2[1];
      if ((*v2 != -4096 || v4 != -4096) && (*v2 != -8192 || v4 != -8192))
      {
        v5 = v2[7];
        if (v5 && v5 != -8192 && v5 != -4096)
        {
          v6 = v2[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v6 = v2[6];
          v7 = (unint64_t *)v2[6];
          if (v7)
          {
            *v7 = *v7 & 7 | v6;
          }
          else
          {
            v8 = v2[7];
            v9 = ***(int32x2_t ****)v8;
            v10 = (unint64_t)v9[303];
            if (v10 <= v6)
            {
              v11 = v9[305].u32[0];
              if (v10 + 16 * v11 > v6)
              {
                v12 = v11 - 1;
                LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
                v14 = (uint64_t *)(v10 + 16 * v13);
                v15 = *v14;
                if (v8 == *v14)
                {
LABEL_20:
                  *v14 = -8192;
                  v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                  v8 = v2[7];
                }
                else
                {
                  v16 = 1;
                  while (v15 != -4096)
                  {
                    v17 = v13 + v16++;
                    v13 = v17 & v12;
                    v15 = *(_QWORD *)(v10 + 16 * v13);
                    if (v8 == v15)
                    {
                      v14 = (uint64_t *)(v10 + 16 * v13);
                      goto LABEL_20;
                    }
                  }
                }
                *(_BYTE *)(v8 + 17) &= ~1u;
              }
            }
          }
        }
        v18 = v2[4];
        if (v18 && v18 != -8192 && v18 != -4096)
        {
          v19 = v2[2] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v19 = v2[3];
          v20 = (unint64_t *)v2[3];
          if (v20)
          {
            *v20 = *v20 & 7 | v19;
          }
          else
          {
            v21 = v2[4];
            v22 = ***(int32x2_t ****)v21;
            v23 = (unint64_t)v22[303];
            if (v23 <= v19)
            {
              v24 = v22[305].u32[0];
              if (v23 + 16 * v24 > v19)
              {
                v25 = v24 - 1;
                LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
                v27 = (uint64_t *)(v23 + 16 * v26);
                v28 = *v27;
                if (v21 == *v27)
                {
LABEL_34:
                  *v27 = -8192;
                  v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                  v21 = v2[4];
                }
                else
                {
                  v29 = 1;
                  while (v28 != -4096)
                  {
                    v30 = v26 + v29++;
                    v26 = v30 & v25;
                    v28 = *(_QWORD *)(v23 + 16 * v26);
                    if (v21 == v28)
                    {
                      v27 = (uint64_t *)(v23 + 16 * v26);
                      goto LABEL_34;
                    }
                  }
                }
                *(_BYTE *)(v21 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v2 += 9;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

_QWORD *sub_1C5A55900(_QWORD *a1)
{
  sub_1C484143C((uint64_t)(a1 + 3));
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C5A55934(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 672);
  if (v2 != (void *)(a1 + 688))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 648), 8);
  v3 = *(void **)(a1 + 616);
  if (v3 != (void *)(a1 + 632))
    free(v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 592), 8);
  v4 = *(void **)(a1 + 568);
  if (v4)
  {
    *(_QWORD *)(a1 + 576) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 424);
  if (v5 != (void *)(a1 + 440))
    free(v5);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 400), 8);
  sub_1C4EE4F14((char **)(a1 + 192));
  v6 = *(void **)(a1 + 48);
  if (v6 != (void *)(a1 + 64))
    free(v6);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  return a1;
}

void sub_1C5A559EC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 18);
        if (v4 - 128 != v6)
          free(v6);
        v4 -= 152;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C5A55A68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 696);
  if (v2 != (void *)(a1 + 712))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 664), 8);
  v3 = *(void **)(a1 + 584);
  if (v3 != (void *)(a1 + 600))
    free(v3);
  v4 = *(void **)(a1 + 504);
  if (v4 != (void *)(a1 + 520))
    free(v4);
  if ((*(_BYTE *)(a1 + 432) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 440), 8);
  sub_1C4926AE8(a1 + 336);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 312), 8);
  llvm::GVNPass::ValueTable::~ValueTable((llvm::GVNPass::ValueTable *)(a1 + 128));
  sub_1C5408A20((_QWORD *)(a1 + 48));
  return a1;
}

_QWORD *sub_1C5A55B14@<X0>(uint64_t a1@<X0>, llvm::Loop *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, llvm::SmallPtrSetImplBase *a6@<X8>)
{
  return llvm::PassManager<llvm::Loop,llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::LoopStandardAnalysisResults &,llvm::LPMUpdater &>::run(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C5A55B20()
{
  return 1;
}

char *sub_1C5A55B28()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassManager<Loop, LoopAnalysisManager, LoopSt"
                    "andardAnalysisResults &, LPMUpdater &>]";
  v10[1] = 139;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8B)
    v1 = 139;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_19[v1];
  v3 = 139 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void **sub_1C5A55BE0(void **a1)
{
  void **v3;

  v3 = a1 + 12;
  sub_1C4764BBC(&v3);
  v3 = a1 + 9;
  sub_1C4764BBC(&v3);
  if (*a1 != a1 + 2)
    free(*a1);
  return a1;
}

_QWORD *sub_1C5A55C40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::LoopSimplifyPass::run(a1, a2, a3);
}

uint64_t sub_1C5A55C4C()
{
  return 0;
}

_QWORD *sub_1C5A55C54@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::LCSSAPass::run(a1, a2, a3);
}

uint64_t sub_1C5A55C60()
{
  return 0;
}

void sub_1C5A55C68(llvm::Module *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _BYTE v4[96];
  _BYTE v5[96];

  llvm::CallGraph::CallGraph((llvm::CallGraph *)v4, a1);
  v3 = (_QWORD *)operator new();
  llvm::CallGraph::CallGraph((uint64_t)v5, (uint64_t)v4);
  *v3 = &off_1E818AFF0;
  llvm::CallGraph::CallGraph((uint64_t)(v3 + 1), (uint64_t)v5);
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)v5);
  *a2 = v3;
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)v4);
}

void sub_1C5A55CE8(_QWORD *a1)
{
  *a1 = &off_1E818AFF0;
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A55D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::CallGraph::invalidate(a1 + 8, a2, a3);
}

void sub_1C5A55D34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A55D48@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v8 = v4;
  v5 = operator new();
  v6 = sub_1C6194DA8(v5, (uint64_t)v4, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1);
  sub_1C4E403B0(&v8, 0);
  result = (_QWORD *)operator new();
  *result = &off_1E818B048;
  result[1] = v5;
  *a2 = result;
  return result;
}

_QWORD *sub_1C5A55E10(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E818B048;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C5A55E50(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E818B048;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A55EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::FunctionGroupAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::FunctionGroupAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DD6D80((uint64_t)v8);
}

uint64_t sub_1C5A55F20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[84];

  v6[83] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  llvm::LazyCallGraph::LazyCallGraph((uint64_t)v6, a2);
  *v4 = &off_1E818B0A0;
  llvm::LazyCallGraph::LazyCallGraph((uint64_t)(v4 + 1), (uint64_t)v6);
  *a1 = v4;
  return sub_1C5A55FF0((uint64_t)v6);
}

uint64_t sub_1C5A55FC8(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C5A55FF0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 616);
  if (v2 != (void *)(a1 + 632))
    free(v2);
  if ((*(_BYTE *)(a1 + 576) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 552), 8);
  v3 = *(void **)(a1 + 408);
  if (v3 != (void *)(a1 + 424))
    free(v3);
  sub_1C5A560B4(a1 + 312);
  sub_1C4926AE8(a1 + 312);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 288), 8);
  sub_1C5A561F8(a1 + 192);
  sub_1C4926AE8(a1 + 192);
  sub_1C5A56324(a1 + 120);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  sub_1C5A56368(a1);
  return sub_1C4926AE8(a1);
}

uint64_t sub_1C5A560B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 128; i <= v8; i += 128)
      {
        if ((*(_BYTE *)(i - 72) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(i - 64), 8);
        v10 = *(void **)(i - 120);
        if ((void *)(i - 104) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 128; j <= v14; j += 128)
      {
        if ((*(_BYTE *)(j - 72) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(j - 64), 8);
        v16 = *(void **)(j - 120);
        if ((void *)(j - 104) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C5A561F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 32 <= v8)
      {
        v10 = (_QWORD *)(v9 + 24);
        do
        {
          v11 = (_QWORD *)*(v10 - 2);
          if (v10 != v11)
            free(v11);
          v12 = (unint64_t)(v10 + 5);
          v10 += 4;
        }
        while (v12 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v13 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD **)(a1 + 64);
    v15 = &v14[2 * v13];
    do
    {
      v16 = (*v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = *v14 + v14[1];
      if (v16 + 32 <= v17)
      {
        v18 = (_QWORD *)(v16 + 24);
        do
        {
          v19 = (_QWORD *)*(v18 - 2);
          if (v18 != v19)
            free(v19);
          v20 = (unint64_t)(v18 + 5);
          v18 += 4;
        }
        while (v20 <= v17);
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C5A56324(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 48), 8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_1C5A56368(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 104; i <= v8; i += 104)
      {
        if (*(_BYTE *)(i - 8))
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(i - 32), 8);
          v10 = *(void **)(i - 80);
          if ((void *)(i - 64) != v10)
            free(v10);
          *(_BYTE *)(i - 8) = 0;
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 104; j <= v14; j += 104)
      {
        if (*(_BYTE *)(j - 8))
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(j - 32), 8);
          v16 = *(void **)(j - 80);
          if ((void *)(j - 64) != v16)
            free(v16);
          *(_BYTE *)(j - 8) = 0;
        }
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C5A564BC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE v6[304];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C61A8F54((uint64_t)v6, a2);
  *v4 = &off_1E818B0F8;
  sub_1C61A8F54((uint64_t)(v4 + 1), (uint64_t)v6);
  *a1 = v4;
  return sub_1C61A8910((uint64_t)v6);
}

void sub_1C5A56568()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5657C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818B150;
  *a1 = result;
  return result;
}

const char *sub_1C5A565C0()
{
  return "NoOpModuleAnalysis";
}

void sub_1C5A565D4()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A565E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &unk_1EF8F5728;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&unk_1EF8F5728);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DD6D80((uint64_t)v8);
}

void sub_1C5A56668(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = a1;
  LOBYTE(v10) = 0;
  BYTE8(v10) = 0;
  LOBYTE(v11) = 0;
  BYTE8(v11) = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)&v9);
  v3 = operator new();
  v4 = v10;
  *(_OWORD *)(v3 + 8) = v9;
  v5 = v13;
  v6 = v15;
  v15 = 0;
  *(_QWORD *)v3 = &off_1E818B1A8;
  *((_QWORD *)&v9 + 1) = 0;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v11;
  *(_DWORD *)(v3 + 56) = v12;
  *(_QWORD *)(v3 + 64) = v5;
  v7 = v14;
  v13 = 0;
  v14 = 0;
  *(_QWORD *)(v3 + 72) = v7;
  *(_DWORD *)(v3 + 80) = v6;
  MEMORY[0x1CAA32FB4](0, 8);
  *a2 = v3;
  MEMORY[0x1CAA32FB4](v13, 8);
  v8 = *((_QWORD *)&v9 + 1);
  *((_QWORD *)&v9 + 1) = 0;
  if (v8)
    sub_1C4E5DDC4((uint64_t)&v9 + 8, v8);
}

void sub_1C5A56758(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E818B1A8;
  MEMORY[0x1CAA32FB4](a1[8], 8);
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    sub_1C4E5DDC4((uint64_t)(a1 + 2), v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A567B4()
{
  return 0;
}

__n128 sub_1C5A567BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(&v9, a2);
  v5 = v9;
  v6 = v11;
  *(_QWORD *)v4 = &off_1E818B200;
  *(_QWORD *)(v4 + 8) = v5;
  if (v6)
  {
    if (v6 == &v10)
    {
      *(_QWORD *)(v4 + 40) = v4 + 16;
      (*(void (**)(uint64_t *))(*v6 + 24))(v6);
    }
    else
    {
      *(_QWORD *)(v4 + 40) = v6;
      v11 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 40) = 0;
  }
  v7 = v12;
  *((_QWORD *)&v12 + 1) = 0;
  *(_OWORD *)(v4 + 48) = v7;
  *a1 = v4;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfo *)&v9);
  return result;
}

_QWORD *sub_1C5A568A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)operator new();
  *result = &off_1E818B2B0;
  result[1] = v3;
  *a2 = result;
  return result;
}

void sub_1C5A568F0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A56904()
{
  return 0;
}

void sub_1C5A5690C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v4 = operator new();
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_QWORD *)v4 = &off_1E818B308;
  *(_QWORD *)(v4 + 8) = v5;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v7;
  *(_DWORD *)(v4 + 24) = v6;
  *a1 = v4;
  JUMPOUT(0x1CAA32FB4);
}

uint64_t sub_1C5A56978(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[42];

  v6[41] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C62EB5C8((uint64_t)v6, a2);
  *v4 = &off_1E818B3B8;
  sub_1C62EB5C8((uint64_t)(v4 + 1), (uint64_t)v6);
  *a1 = v4;
  return sub_1C619386C((uint64_t)v6);
}

void sub_1C5A56A20(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v5[44];

  v5[43] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  llvm::GlobalsAAResult::GlobalsAAResult((uint64_t)v5, a2);
  *v4 = &off_1E818B410;
  llvm::GlobalsAAResult::GlobalsAAResult((uint64_t)(v4 + 1), (uint64_t)v5);
  *a1 = v4;
  llvm::GlobalsAAResult::~GlobalsAAResult((llvm::GlobalsAAResult *)v5);
}

_QWORD *sub_1C5A56AC8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62EBAE8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5A56B84()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A56B98@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818B468;
  *a1 = result;
  return result;
}

const char *sub_1C5A56BDC()
{
  return "NoOpCGSCCAnalysis";
}

void sub_1C5A56BF0()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A56C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &unk_1EF8F7250;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&unk_1EF8F7250);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C61848F4((uint64_t)v8);
}

_QWORD *sub_1C5A56C84@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t ResultImpl;
  _QWORD *result;

  ResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a2, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Key, a1, a3);
  llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*(_QWORD *)(ResultImpl + 8), (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 40));
  result = (_QWORD *)operator new();
  *result = &off_1E818B4C0;
  result[1] = 0;
  *a4 = result;
  return result;
}

void sub_1C5A56D00()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A56D14(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4)
{
  return llvm::FunctionAnalysisManagerCGSCCProxy::Result::invalidate((uint64_t *)(a1 + 8), a2, a3, a4);
}

_QWORD *sub_1C5A56D1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)operator new();
  *result = &off_1E818B518;
  result[1] = v3;
  *a2 = result;
  return result;
}

void sub_1C5A56D64()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A56D78()
{
  return 0;
}

_QWORD *sub_1C5A56D80@<X0>(llvm::Value *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t *v5;
  uint64_t *v6;

  llvm::BlockFrequencyAnalysis::run(a1, a2, &v6);
  result = (_QWORD *)operator new();
  v5 = v6;
  *result = &off_1E818B570;
  result[1] = v5;
  *a3 = result;
  return result;
}

void sub_1C5A56DDC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E818B570;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A56E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::BlockFrequencyInfo::invalidate(a1 + 8, a2, a3);
}

uint64_t sub_1C5A56E34@<X0>(const llvm::Function *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _BYTE v6[248];
  _BYTE v7[248];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::BranchProbabilityAnalysis::run(a1, a2, (uint64_t)v6);
  v4 = (_QWORD *)operator new();
  sub_1C5A56EEC((uint64_t)v7, (uint64_t)v6);
  *v4 = &off_1E818B5C8;
  sub_1C5A56EEC((uint64_t)(v4 + 1), (uint64_t)v7);
  sub_1C4DC0BBC((uint64_t)v7);
  *a3 = v4;
  return sub_1C4DC0BBC((uint64_t)v6);
}

uint64_t sub_1C5A56EEC(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v2 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v2;
  v3 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 72) = 1;
  v5 = result + 72;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = v4;
  for (i = 80; i != 144; i += 16)
    *(_QWORD *)(result + i) = -4096;
  v7 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(result + 72) & 0xFFFFFFFE | v7 & 1;
  v8 = *(_DWORD *)(result + 76);
  *(_DWORD *)(result + 72) = v7 & 0xFFFFFFFE | *(_DWORD *)(result + 72) & 1;
  *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v8;
  v9 = *(_DWORD *)(result + 72);
  v10 = *(_DWORD *)(a2 + 72);
  if ((v9 & 1) != 0)
  {
    v9 = *(_DWORD *)(a2 + 72);
    v11 = a2 + 72;
    if ((v10 & 1) == 0)
      goto LABEL_7;
    v16 = 0;
    while (1)
    {
      v17 = result + v16;
      v18 = a2 + v16;
      v19 = *(_QWORD *)(result + v16 + 80);
      v20 = *(_QWORD *)(a2 + v16 + 80);
      if (v19 == -4096 || v19 == -8192 || v20 == -4096 || v20 == -8192)
      {
        *(_QWORD *)(v17 + 80) = v20;
        *(_QWORD *)(v18 + 80) = v19;
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = a2 + v16;
          v23 = result + v16;
          goto LABEL_27;
        }
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = result + v16;
          v23 = a2 + v16;
LABEL_27:
          *(_DWORD *)(v22 + 88) = *(_DWORD *)(v23 + 88);
        }
      }
      else
      {
        v21 = *(_DWORD *)(result + v16 + 88);
        *(_QWORD *)(v17 + 80) = v20;
        *(_DWORD *)(result + v16 + 88) = *(_DWORD *)(a2 + v16 + 88);
        *(_QWORD *)(v18 + 80) = v19;
        *(_DWORD *)(a2 + v16 + 88) = v21;
      }
      v16 += 16;
      if (v16 == 64)
        goto LABEL_12;
    }
  }
  v11 = result + 72;
  v5 = a2 + 72;
  if ((v10 & 1) == 0)
  {
    v12 = *(_QWORD *)(result + 80);
    *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = v12;
    LODWORD(v12) = *(_DWORD *)(result + 88);
    *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = v12;
    goto LABEL_12;
  }
LABEL_7:
  v13 = 0;
  v24 = *(_OWORD *)(v11 + 8);
  *(_DWORD *)v11 = v9 | 1;
  do
  {
    v14 = *(_QWORD *)(v5 + v13 + 8);
    *(_QWORD *)(v11 + v13 + 8) = v14;
    if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *(_DWORD *)(v11 + v13 + 16) = *(_DWORD *)(v5 + v13 + 16);
    v13 += 16;
  }
  while (v13 != 64);
  *(_DWORD *)v5 &= ~1u;
  *(_OWORD *)(v5 + 8) = v24;
LABEL_12:
  *(_QWORD *)(result + 144) = 1;
  for (j = 152; j != 248; j += 24)
    *(_OWORD *)(result + j) = xmmword_1C85F22B0;
  return result;
}

void sub_1C5A57108(_QWORD *a1)
{
  *a1 = &off_1E818B5C8;
  sub_1C4DC0BBC((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A57148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::BranchProbabilityInfo::invalidate(a1 + 8, a2, a3);
}

uint64_t sub_1C5A57150(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = operator new();
  v5 = *a2;
  v6 = a2[1];
  a2[1] = 0;
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  v8 = a2[4];
  a2[4] = 0;
  v9 = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  v10 = a2[9];
  v11 = *(_OWORD *)(a2 + 7);
  a2[8] = 0;
  a2[9] = 0;
  a2[7] = 0;
  *(_QWORD *)v4 = &off_1E818B620;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = v6;
  v15[0] = v5;
  v15[1] = 0;
  v12 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v12;
  v15[2] = 0;
  *(_DWORD *)(v4 + 32) = v7;
  v16 = 0;
  *(_QWORD *)(v4 + 40) = v8;
  v17 = 0;
  v13 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(v4 + 48) = v13;
  v18 = 0;
  *(_DWORD *)(v4 + 56) = v9;
  v19 = 0;
  *(_OWORD *)(v4 + 64) = v11;
  *(_QWORD *)(v4 + 80) = v10;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  *a1 = v4;
  return sub_1C6187958((uint64_t)v15);
}

void sub_1C5A5722C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4[2];
  _BYTE v5[32];
  uint64_t v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14[7];

  v14[6] = *MEMORY[0x1E0C80C00];
  v4[0] = v5;
  v4[1] = (void *)0x400000000;
  v11 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v10 = 0;
  v8 = 0;
  v9 = a1;
  sub_1C53BA93C((uint64_t)v4, 0);
  v3 = (_QWORD *)operator new();
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::DominatorTreeBase((uint64_t)v12, (uint64_t)v4);
  *v3 = &off_1E818B678;
  llvm::DominatorTreeBase<llvm::BasicBlock,true>::DominatorTreeBase((uint64_t)(v3 + 1), (uint64_t)v12);
  sub_1C4DC4E38(v14);
  if (v12[0] != &v13)
    free(v12[0]);
  *a2 = v3;
  sub_1C4DC4E38(v6);
  if (v4[0] != v5)
    free(v4[0]);
}

_QWORD *sub_1C5A57344(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E818B678;
  sub_1C4DC4E38(a1 + 7);
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C5A57388(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E818B678;
  sub_1C4DC4E38(a1 + 7);
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A573DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::PostDominatorTree::invalidate(a1 + 8, a2, a3);
}

void sub_1C5A573E4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _BYTE v6[25];
  _QWORD v7[2];
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[128];
  _OWORD v14[2];
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[256];
  _QWORD v20[2];
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[152];

  *(_QWORD *)v6 = a1;
  *(_QWORD *)&v6[8] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  *(_QWORD *)&v6[16] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, *(uint64_t *)v6)+ 8;
  v6[24] = 0;
  v9 = v13;
  v10 = v13;
  v5 = operator new();
  v14[0] = *(_OWORD *)v6;
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)&v6[9];
  v15 = v19;
  v16 = v19;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v22 = v26;
  v23 = v26;
  v11 = 16;
  v12 = 0;
  *(_QWORD *)v5 = &off_1E818B6D0;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v6;
  *(_OWORD *)(v5 + 17) = *(_OWORD *)&v6[9];
  *(_QWORD *)(v5 + 40) = v5 + 72;
  *(_QWORD *)(v5 + 48) = v5 + 72;
  *(_DWORD *)(v5 + 56) = 32;
  *(_DWORD *)(v5 + 60) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  v17 = 32;
  v18 = 0;
  *(_QWORD *)(v5 + 328) = 0;
  v20[0] = 0;
  *(_DWORD *)(v5 + 336) = 0;
  *(_DWORD *)(v5 + 340) = 0;
  v20[1] = 0;
  *(_DWORD *)(v5 + 344) = 0;
  v21 = 0;
  *(_QWORD *)(v5 + 352) = v5 + 384;
  *(_QWORD *)(v5 + 360) = v5 + 384;
  *(_DWORD *)(v5 + 368) = 16;
  *(_DWORD *)(v5 + 372) = 0;
  *(_DWORD *)(v5 + 376) = 0;
  v24 = 16;
  v25 = 0;
  sub_1C4E08CF4((uint64_t)v20);
  MEMORY[0x1CAA32FB4](v20[0], 8);
  if (v16 != v15)
    free(v16);
  *a3 = v5;
  if (v10 != v9)
    free(v10);
  sub_1C4E08CF4((uint64_t)v7);
  MEMORY[0x1CAA32FB4](v7[0], 8);
}

void sub_1C5A57780(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E818B6D0;
  v2 = (void *)a1[45];
  if (v2 != (void *)a1[44])
    free(v2);
  sub_1C4E08CF4((uint64_t)(a1 + 41));
  MEMORY[0x1CAA32FB4](a1[41], 8);
  v3 = (void *)a1[6];
  if (v3 != (void *)a1[5])
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A577FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::DemandedBitsAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::DemandedBitsAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8);
}

void sub_1C5A5787C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5[3];
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  sub_1C62EBF10(v5, a2);
  *v4 = &off_1E818B728;
  sub_1C62EBF10(v4 + 1, (uint64_t)v5);
  *a1 = v4;
  if (v6 != v7)
    free(v6);
  sub_1C61910D0((uint64_t)v5, (_QWORD *)v5[1]);
}

uint64_t *sub_1C5A57940@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11[4];
  uint64_t v12[4];

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  v8 = *(_QWORD *)(a1 + 40) + 272;
  v11[0] = v6;
  v11[1] = v8;
  v11[2] = v7;
  v9 = (_QWORD *)operator new();
  v12[0] = v6;
  v12[1] = v8;
  v11[3] = 0;
  *v9 = &off_1E818B7D8;
  v9[1] = v6;
  v9[2] = v8;
  v9[3] = v7;
  v9[4] = 0;
  v12[2] = v7;
  v12[3] = 0;
  llvm::LazyValueInfo::releaseMemory(v12);
  *a3 = v9;
  return llvm::LazyValueInfo::releaseMemory(v11);
}

void sub_1C5A57A0C(_QWORD *a1)
{
  *a1 = &off_1E818B7D8;
  llvm::LazyValueInfo::releaseMemory(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A57A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::LazyValueInfo::invalidate(a1 + 8, a2, a3);
}

uint64_t sub_1C5A57A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _BYTE v7[408];
  _BYTE v8[408];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  llvm::MemoryDependenceAnalysis::run((int *)(a1 + 8), a2, a3, (uint64_t)v7);
  v5 = (_QWORD *)operator new();
  sub_1C5A57B0C((uint64_t)v8, (uint64_t)v7);
  *v5 = &off_1E818B8E0;
  sub_1C5A57B0C((uint64_t)(v5 + 1), (uint64_t)v8);
  sub_1C4ECAE14((uint64_t)v8);
  *a4 = v5;
  return sub_1C4ECAE14((uint64_t)v7);
}

uint64_t sub_1C5A57B0C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v6 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v6;
  v7 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v8 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v8;
  v9 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v10 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = v10;
  v11 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  v12 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v12;
  v13 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v13;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  v14 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = v14;
  v15 = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = v15;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  v16 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a2 + 156) = v16;
  v17 = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a2 + 160) = v17;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  v18 = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = v18;
  v19 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 184) = v19;
  v20 = *(_OWORD *)(a2 + 208);
  v21 = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v20;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = v21;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  LODWORD(v21) = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = v21;
  LODWORD(v21) = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = v21;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a2 + 264) = 0;
  LODWORD(v21) = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a2 + 268) = v21;
  LODWORD(v21) = *(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a2 + 272) = v21;
  sub_1C4E854AC(a1 + 280, a2 + 280);
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a2 + 392) = 0;
  v22 = *(_DWORD *)(a1 + 396);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = v22;
  v23 = *(_DWORD *)(a1 + 400);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a2 + 400) = v23;
  return a1;
}

void sub_1C5A57E14(_QWORD *a1)
{
  *a1 = &off_1E818B8E0;
  sub_1C4ECAE14((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A57E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::MemoryDependenceResults::invalidate(a1 + 8, a2, a3, a4);
}

_QWORD *sub_1C5A57E5C@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  llvm::MemorySSA *v5;
  llvm::MemorySSA *v6;

  llvm::MemorySSAAnalysis::run(a1, a2, &v6);
  result = (_QWORD *)operator new();
  v5 = v6;
  *result = &off_1E818B938;
  result[1] = v5;
  *a3 = result;
  return result;
}

void sub_1C5A57EB8(_QWORD *a1)
{
  llvm::MemorySSA *v2;

  v2 = (llvm::MemorySSA *)a1[1];
  *a1 = &off_1E818B938;
  a1[1] = 0;
  if (v2)
  {
    llvm::MemorySSA::~MemorySSA(v2);
    MEMORY[0x1CAA32FC0]();
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A57F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::MemorySSAAnalysis::Result::invalidate(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C5A57F1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  _QWORD v8[2];
  int v9;
  _QWORD v10[2];
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  int v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;

  v12 = a1;
  v4 = operator new();
  v13 = 1;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v23 = a1;
  *(_QWORD *)v4 = &off_1E818B990;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  v14 = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v15 = 0;
  *(_DWORD *)(v4 + 32) = 0;
  v16 = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v17[0] = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v17[1] = 0;
  *(_DWORD *)(v4 + 56) = 0;
  v18 = 0;
  *(_QWORD *)(v4 + 64) = 0;
  v19[0] = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v19[1] = 0;
  *(_DWORD *)(v4 + 80) = 0;
  v20 = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v21[0] = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v21[1] = 0;
  *(_DWORD *)(v4 + 104) = 0;
  v22 = 0;
  *(_QWORD *)(v4 + 112) = a1;
  sub_1C4EF5964(v21);
  MEMORY[0x1CAA32FB4](v21[0], 8);
  sub_1C4EF5888((uint64_t)v19);
  MEMORY[0x1CAA32FB4](v19[0], 8);
  sub_1C4EF5708((uint64_t)v17);
  MEMORY[0x1CAA32FB4](v17[0], 8);
  MEMORY[0x1CAA32FB4](v14, 8);
  *a2 = v4;
  sub_1C4EF5964(v10);
  MEMORY[0x1CAA32FB4](v10[0], 8);
  sub_1C4EF5888((uint64_t)v8);
  MEMORY[0x1CAA32FB4](v8[0], 8);
  sub_1C4EF5708((uint64_t)v6);
  MEMORY[0x1CAA32FB4](v6[0], 8);
  return MEMORY[0x1CAA32FB4](0, 8);
}

void sub_1C5A580DC(_QWORD *a1)
{
  *a1 = &off_1E818B990;
  sub_1C4EF5964(a1 + 11);
  MEMORY[0x1CAA32FB4](a1[11], 8);
  sub_1C4EF5888((uint64_t)(a1 + 8));
  MEMORY[0x1CAA32FB4](a1[8], 8);
  sub_1C4EF5708((uint64_t)(a1 + 5));
  MEMORY[0x1CAA32FB4](a1[5], 8);
  MEMORY[0x1CAA32FB4](a1[2], 8);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A5815C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::PhiValues::invalidate(a1 + 8, a2, a3);
}

_QWORD *sub_1C5A58164(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  void (**v8)(llvm::RegionInfo *__hidden);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = operator new();
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  a2 += 40;
  v9 = *(_OWORD *)(a2 - 32);
  v10 = *(_QWORD *)(a2 - 16);
  v11 = v7;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 - 32) = 0u;
  *(_OWORD *)(a2 - 16) = 0u;
  sub_1C6125098((_DWORD *)a2);
  v8 = &off_1E813A6F0;
  sub_1C62EC564((uint64_t)&v8, (_QWORD *)v7);
  *(_QWORD *)v4 = &off_1E818B9E8;
  v5 = llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::RegionInfoBase(v4 + 8, (uint64_t)&v8);
  *(_QWORD *)(v4 + 8) = &off_1E813A6F0;
  sub_1C62EC564(v5, *(_QWORD **)(v4 + 40));
  *a1 = v4;
  return llvm::RegionInfoBase<llvm::RegionTraits<llvm::Function>>::~RegionInfoBase(&v8);
}

void sub_1C5A5824C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A58260@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818BA40;
  *a1 = result;
  return result;
}

const char *sub_1C5A582A4()
{
  return "NoOpFunctionAnalysis";
}

void sub_1C5A582B8()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A582CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &unk_1EF8F5730;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&unk_1EF8F5730);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8);
}

__n128 sub_1C5A5834C@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  __n128 v7;
  uint64_t *v8;

  llvm::OptimizationRemarkEmitterAnalysis::run(a1, a2, (uint64_t *)&v7);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E818BA98;
  result = v7;
  *(__n128 *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 24) = 0;
  *a3 = v4;
  if (v8)
  {
    v6 = *v8;
    *v8 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C5A583F8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *a1 = &off_1E818BA98;
  v1 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v1)
  {
    v3 = v1;
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    MEMORY[0x1CAA32FC0](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A58474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::OptimizationRemarkEmitter::invalidate(a1 + 8, a2, a3, a4);
}

void sub_1C5A5847C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  llvm::StackSafetyInfo::StackSafetyInfo(&v8, a2);
  v5 = v8;
  v6 = v10;
  *v4 = &off_1E818BBA0;
  v4[1] = v5;
  if (v6)
  {
    if (v6 == &v9)
    {
      v4[5] = v4 + 2;
      (*(void (**)(uint64_t *))(*v6 + 24))(v6);
    }
    else
    {
      v4[5] = v6;
      v10 = 0;
    }
  }
  else
  {
    v4[5] = 0;
  }
  v7 = v11;
  v11 = 0;
  v4[6] = v7;
  *a1 = v4;
  llvm::StackSafetyInfo::~StackSafetyInfo((llvm::StackSafetyInfo *)&v8);
}

void sub_1C5A58568(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _BYTE v6[24];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  llvm::BasicAA::run(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E818BD00;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v7;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&v6[8];
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v8;
  *(_QWORD *)(v4 + 64) = v9;
  *(_QWORD *)(v4 + 72) = v4 + 104;
  *(_QWORD *)(v4 + 80) = v4 + 104;
  *(_QWORD *)(v4 + 88) = 8;
  *(_DWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 168) = v4 + 200;
  *(_QWORD *)(v4 + 176) = v4 + 200;
  *(_QWORD *)(v4 + 184) = 16;
  *(_DWORD *)(v4 + 192) = 0;
  *a3 = v4;
  if (v13 != v12)
    free(v13);
  if (v11 != v10)
    free(v11);
}

void sub_1C5A58634(_QWORD *a1)
{
  void *v1;
  void *v2;
  _QWORD *v3;

  *a1 = &off_1E818BD00;
  v1 = (void *)a1[22];
  if (v1 != (void *)a1[21])
  {
    v3 = a1;
    free(v1);
    a1 = v3;
  }
  v2 = (void *)a1[10];
  if (v2 != (void *)a1[9])
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A586A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return llvm::BasicAAResult::invalidate(a1 + 8, a2, a3, a4);
}

void sub_1C5A586B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  llvm::CFLAndersAAResult::CFLAndersAAResult((uint64_t)&v6, a2);
  *(_QWORD *)v4 = &off_1E818BD58;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v8;
  if (v8)
  {
    if (v8 == &v7)
    {
      *(_QWORD *)(v4 + 40) = v4 + 16;
      (*(void (**)(uint64_t *))(*v5 + 24))(v5);
    }
    else
    {
      *(_QWORD *)(v4 + 40) = v8;
      v8 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 40) = 0;
  }
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *a1 = v4;
  llvm::CFLAndersAAResult::~CFLAndersAAResult((llvm::CFLAndersAAResult *)&v6);
}

void sub_1C5A58798(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  llvm::CFLSteensAAResult::CFLSteensAAResult((uint64_t)&v6, a2);
  *(_QWORD *)v4 = &off_1E818BDB0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v8;
  if (v8)
  {
    if (v8 == &v7)
    {
      *(_QWORD *)(v4 + 40) = v4 + 16;
      (*(void (**)(uint64_t *))(*v5 + 24))(v5);
    }
    else
    {
      *(_QWORD *)(v4 + 40) = v8;
      v8 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 40) = 0;
  }
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *a1 = v4;
  llvm::CFLSteensAAResult::~CFLSteensAAResult((llvm::CFLSteensAAResult *)&v6);
}

_QWORD *sub_1C5A58880@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818BEB8;
  result[1] = 0;
  *a1 = result;
  return result;
}

void sub_1C5A588C4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A588D8()
{
  return 0;
}

_QWORD *sub_1C5A588E0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818BF10;
  result[1] = 0;
  *a1 = result;
  return result;
}

void sub_1C5A58924()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A58938()
{
  return 0;
}

uint64_t *sub_1C5A58940(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C62EB9A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5A56AC8(a1, v7);
    v8 = 0;
    sub_1C62EB9A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

void sub_1C5A58A20()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A58A34@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E818BF68;
  *a1 = result;
  return result;
}

const char *sub_1C5A58A78()
{
  return "NoOpLoopAnalysis";
}

void sub_1C5A58A8C()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5A58AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &unk_1EF8F5738;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&unk_1EF8F5738);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C62ED184((uint64_t)v8);
}

uint64_t *sub_1C5A58B20@<X0>(llvm::Loop *a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  void *v18;
  int v20;
  int v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  unsigned __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[88];

  llvm::LoopAccessInfo::LoopAccessInfo((uint64_t)&v23, a1, *(llvm::ScalarEvolution **)(a2 + 32), *(uint64_t **)(a2 + 40), *(_QWORD *)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v4 = operator new();
  v5 = *((_QWORD *)&v23 + 1);
  v6 = v23;
  v23 = 0u;
  v33 = __PAIR128__(v5, v6);
  v7 = v24;
  v24 = 0;
  v35[0] = v25[0];
  *(_OWORD *)((char *)v35 + 11) = *(_OWORD *)((char *)v25 + 11);
  v8 = v26;
  v34 = v7;
  v36 = v26;
  v26 = 0u;
  v10 = v27;
  v9 = HIDWORD(v27);
  v37 = v27;
  v27 = 0;
  v11 = v28;
  v38 = v28;
  v28 = 0;
  v39 = v43;
  v12 = v30;
  v22 = a3;
  if (v30 == v29)
  {
    v40 = v43;
    v13 = HIDWORD(v31);
    if (HIDWORD(v31))
    {
      v20 = v11;
      v21 = v9;
      v14 = v5;
      v15 = v6;
      memmove(v43, v30, 8 * HIDWORD(v31));
      v11 = v20;
      v9 = v21;
      v6 = v15;
      v5 = v14;
    }
    v12 = v43;
  }
  else
  {
    v40 = v30;
    v30 = v29;
    v13 = HIDWORD(v31);
  }
  v16 = v31;
  v17 = v32;
  HIDWORD(v41) = v13;
  v42 = v32;
  v31 = 8;
  v32 = 0;
  *(_QWORD *)v4 = &off_1E818BFC0;
  *(_QWORD *)(v4 + 8) = v6;
  v33 = 0u;
  v34 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v7;
  *(_OWORD *)(v4 + 32) = v25[0];
  *(_OWORD *)(v4 + 43) = *(_OWORD *)((char *)v25 + 11);
  *(_OWORD *)(v4 + 64) = v8;
  v36 = 0u;
  *(_DWORD *)(v4 + 80) = v10;
  *(_DWORD *)(v4 + 84) = v9;
  v37 = 0;
  *(_DWORD *)(v4 + 88) = v11;
  LODWORD(v41) = v16;
  v38 = 0;
  v18 = (void *)(v4 + 128);
  *(_QWORD *)(v4 + 96) = v4 + 128;
  if (v12 == v43)
  {
    *(_QWORD *)(v4 + 104) = v18;
    if (v13)
      memcpy(v18, v43, 8 * v13);
  }
  else
  {
    *(_QWORD *)(v4 + 104) = v12;
    v40 = v43;
  }
  *(_DWORD *)(v4 + 112) = v16;
  *(_DWORD *)(v4 + 116) = v13;
  *(_DWORD *)(v4 + 120) = v17;
  v41 = 8;
  v42 = 0;
  sub_1C4EA401C((uint64_t *)&v33);
  *v22 = v4;
  return sub_1C4EA401C((uint64_t *)&v23);
}

void sub_1C5A58D24(_QWORD *a1)
{
  *a1 = &off_1E818BFC0;
  sub_1C4EA401C(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A58D64@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  llvm::DDGAnalysis::run(a1, a2, &v6);
  result = (_QWORD *)operator new();
  v5 = v6;
  *result = &off_1E818C018;
  result[1] = v5;
  *a3 = result;
  return result;
}

_QWORD *sub_1C5A58DC0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD v6[63];

  v4 = (_QWORD *)operator new();
  sub_1C5A58E3C((uint64_t)v6, a2);
  *v4 = &off_1E818C070;
  sub_1C5A58E3C((uint64_t)(v4 + 1), (uint64_t)v6);
  *a1 = v4;
  return sub_1C61987D4(v6);
}

uint64_t sub_1C5A58E3C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *i;
  uint64_t *v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = (void *)(a1 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  if (v5 == v6)
  {
    *(_QWORD *)(a1 + 48) = v4;
    v7 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v7)
      memmove(v4, *(const void **)(a2 + 48), 8 * v7);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a2 + 48) = v6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 16;
  *(_DWORD *)(a2 + 64) = 0;
  v8 = (uint64_t *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = a1 + 200;
  *(_QWORD *)(a1 + 208) = a1 + 200;
  if (a1 != a2)
  {
    v9 = (uint64_t *)(a2 + 200);
    v10 = *(uint64_t **)(a2 + 208);
    if (v10 != (uint64_t *)(a2 + 200))
    {
      v11 = *v9;
      v12 = *v10;
      *(_QWORD *)(v12 + 8) = v9;
      *v9 = v12;
      v13 = *v8;
      *(_QWORD *)(v11 + 8) = v8;
      *v10 = v13;
      *(_QWORD *)(v13 + 8) = v10;
      *v8 = v11;
    }
  }
  v14 = (void *)(a1 + 248);
  *(_QWORD *)(a1 + 216) = a1 + 248;
  v16 = *(_QWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 224);
  if (v15 == v16)
  {
    *(_QWORD *)(a1 + 224) = v14;
    v17 = *(unsigned int *)(a2 + 236);
    if ((_DWORD)v17)
      memmove(v14, *(const void **)(a2 + 224), 8 * v17);
  }
  else
  {
    *(_QWORD *)(a1 + 224) = v15;
    *(_QWORD *)(a2 + 224) = v16;
  }
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 232) = 32;
  *(_DWORD *)(a2 + 240) = 0;
  for (i = *(uint64_t **)(a1 + 208); i != v8; i = (uint64_t *)i[1])
  {
    v19 = i - 4;
    if (!i)
      v19 = 0;
    v19[6] = a1;
  }
  return a1;
}

_QWORD *sub_1C5A58F9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)operator new();
  *result = &off_1E818C0C8;
  result[1] = v3;
  *a2 = result;
  return result;
}

void sub_1C5A58FE4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A58FF8()
{
  return 0;
}

void sub_1C5A59000(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        v7 = v4 - 24;
        sub_1C5A59000(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C5A59088(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E81911E0;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  return MEMORY[0x1CAA32FC0](a1, 0xA1C4030951706);
}

_QWORD *sub_1C5A590E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run((_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A590F0()
{
  return 1;
}

char *sub_1C5A590F8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassManager<Function>]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_295[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A591B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E81906E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A59204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::ModuleToFunctionPassAdaptor::run((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A59210()
{
  return 1;
}

char *sub_1C5A59218()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleToFunctionPassAdaptor]";
  v10[1] = 83;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53)
    v1 = 83;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_296[v1];
  v3 = 83 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A592D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (result)
  {
    v2 = *(unsigned int *)(result + 296);
    if ((_DWORD)v2)
    {
      v4 = *(_QWORD **)(result + 288);
      v5 = 32 * v2;
      do
      {
        v6 = sub_1C5A594B0();
        v8 = v7;
        v13 = 0;
        v9 = (_QWORD *)operator new();
        *v9 = &unk_1E81353B8;
        v9[1] = a2;
        v10 = v13;
        v13 = v9;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        v11 = v4[3];
        v12 = v4;
        if ((v11 & 2) == 0)
          v12 = (_QWORD *)*v4;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **))(v11 & 0xFFFFFFFFFFFFFFF8))(v12, v6, v8, &v13);
        result = (uint64_t)v13;
        v13 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_1C5A593B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (result)
  {
    v3 = *(unsigned int *)(result + 440);
    if ((_DWORD)v3)
    {
      v6 = *(_QWORD **)(result + 432);
      v7 = 32 * v3;
      do
      {
        v8 = sub_1C5A594B0();
        v10 = v9;
        v15 = 0;
        v11 = (_QWORD *)operator new();
        *v11 = &unk_1E81353B8;
        v11[1] = a2;
        v12 = v15;
        v15 = v11;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        v13 = v6[3];
        v14 = v6;
        if ((v13 & 2) == 0)
          v14 = (_QWORD *)*v6;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v8, v10, &v15, a3);
        result = (uint64_t)v15;
        v15 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

char *sub_1C5A594B0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassManager<Module>]";
  v10[1] = 75;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4B)
    v1 = 75;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_297[v1];
  v3 = 75 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A59568()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Module>>]";
  v10[1] = 95;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5F)
    v1 = 95;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_298[v1];
  v3 = 95 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A59620()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CallGraphAnalysis, "
                    "llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 145;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x91)
    v1 = 145;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_299[v1];
  v3 = 145 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A596D8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CallGraphAnalysis>]";
  v10[1] = 103;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67)
    v1 = 103;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_300[v1];
  v3 = 103 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A59794()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A597A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::FunctionGroupAnalysis::Key, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5980C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  char *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  llvm::raw_ostream *result;

  v7 = sub_1C5A24904();
  v9 = (const void *)a3(a4, v7, v8);
  v11 = v10;
  v12 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 7uLL)
  {
    *v12 = 0x3C65726975716572;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 8);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "require<", 8uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v11 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v11)
    {
      memcpy(result, v9, v11);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v11);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v9, v11);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A5992C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionGroupAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_301[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A599E4()
{
  return 1;
}

void sub_1C5A599F0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A59A04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&llvm::FunctionGroupAnalysis::Key);
}

llvm::raw_ostream *sub_1C5A59A64(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  char *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  llvm::raw_ostream *result;

  v7 = sub_1C5A24904();
  v9 = (const void *)a3(a4, v7, v8);
  v11 = v10;
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 0xA)
  {
    *(_DWORD *)(v12 + 7) = 1013281889;
    *(_QWORD *)v12 = *(_QWORD *)"invalidate<";
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "invalidate<", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v11 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v11)
    {
      memcpy(result, v9, v11);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v11);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v9, v11);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A59B8C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionGroupAnalysis>]";
  v10[1] = 107;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B)
    v1 = 107;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_302[v1];
  v3 = 107 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A59C44()
{
  return 0;
}

char *sub_1C5A59C4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LazyCallGraphAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_303[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A59D04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LazyCallGraphAnalysis>]";
  v10[1] = 107;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B)
    v1 = 107;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_304[v1];
  v3 = 107 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A59DBC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ModuleSummaryIndexA"
                    "nalysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 154;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9A)
    v1 = 154;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_305[v1];
  v3 = 154 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A59E74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ModuleSummaryIndexAnalysis>]";
  v10[1] = 112;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70)
    v1 = 112;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_306[v1];
  v3 = 112 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A59F30()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A59F44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &unk_1EF8F5728, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A59FA8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpModuleAnalysis", 18);
  v7 = v6;
  v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 7uLL)
  {
    *v8 = 0x3C65726975716572;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 8);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "require<", 8uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A5A0BC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<(anonymous namespace)::No"
                    "OpModuleAnalysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 163;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA3)
    v1 = 163;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_307[v1];
  v3 = 163 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5A174()
{
  return 1;
}

void sub_1C5A5A180()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5A194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&unk_1EF8F5728);
}

llvm::raw_ostream *sub_1C5A5A1F4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpModuleAnalysis", 18);
  v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 1013281889;
    *(_QWORD *)v8 = *(_QWORD *)"invalidate<";
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "invalidate<", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A5A310()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<(anonymous namespace):"
                    ":NoOpModuleAnalysis>]";
  v10[1] = 121;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x79)
    v1 = 121;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_308[v1];
  v3 = 121 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5A3C8()
{
  return 0;
}

char *sub_1C5A5A3D0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ProfileSummaryAnaly"
                    "sis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_309[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A488()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ProfileSummaryAnalysis>]";
  v10[1] = 108;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6C)
    v1 = 108;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_310[v1];
  v3 = 108 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A540()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::StackSafetyGlobalAn"
                    "alysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 153;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99)
    v1 = 153;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_311[v1];
  v3 = 153 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A5F8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::StackSafetyGlobalAnalysis>]";
  v10[1] = 111;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F)
    v1 = 111;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_312[v1];
  v3 = 111 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A6B0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::VerifierAnalysis, l"
                    "lvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 144;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x90)
    v1 = 144;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_313[v1];
  v3 = 144 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A768()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::VerifierAnalysis>]";
  v10[1] = 102;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x66)
    v1 = 102;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_314[v1];
  v3 = 102 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A820()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 155;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B)
    v1 = 155;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_315[v1];
  v3 = 155 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A8D8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PassInstrumentationAnalysis>]";
  v10[1] = 113;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71)
    v1 = 113;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_316[v1];
  v3 = 113 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5A990()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ASanGlobalsMetadata"
                    "Analysis, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 155;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B)
    v1 = 155;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_317[v1];
  v3 = 155 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5AA48()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ASanGlobalsMetadataAnalysis>]";
  v10[1] = 113;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71)
    v1 = 113;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_318[v1];
  v3 = 113 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5AB00()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::InlineAdvisorAnalys"
                    "is, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_319[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5ABB8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::InlineAdvisorAnalysis>]";
  v10[1] = 107;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B)
    v1 = 107;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_320[v1];
  v3 = 107 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5AC70()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::IRSimilarityAnalysi"
                    "s, llvm::Module, llvm::AnalysisManager<Module>>]";
  v10[1] = 148;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94)
    v1 = 148;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_321[v1];
  v3 = 148 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5AD28()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::IRSimilarityAnalysis>]";
  v10[1] = 106;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6A)
    v1 = 106;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_322[v1];
  v3 = 106 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5ADE0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::GlobalsAA, llvm::Mo"
                    "dule, llvm::AnalysisManager<Module>>]";
  v10[1] = 137;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x89)
    v1 = 137;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_323[v1];
  v3 = 137 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5AE98()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::GlobalsAA>]";
  v10[1] = 95;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5F)
    v1 = 95;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_324[v1];
  v3 = 95 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A5AF50()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A5AF64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::AlwaysInlinerPass::run((char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5AF70()
{
  return 1;
}

uint64_t sub_1C5A5AF78(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v4 = (void *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  v6 = *a2;
  v5 = a2[1];
  if (v5 == *a2)
  {
    *(_QWORD *)(a1 + 8) = v4;
    v7 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v7)
      memmove(v4, (const void *)a2[1], 8 * v7);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5;
    a2[1] = v6;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 32;
  *((_DWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = a2[36];
  a2[36] = 0;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = 0;
  v8 = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v8;
  v9 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v9;
  sub_1C5A5B0CC(a1 + 312, a2 + 39);
  sub_1C5A5B0CC(a1 + 352, a2 + 44);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = a2[49];
  a2[49] = 0;
  *(_DWORD *)(a1 + 400) = *((_DWORD *)a2 + 100);
  *((_DWORD *)a2 + 100) = 0;
  v10 = *(_DWORD *)(a1 + 404);
  *(_DWORD *)(a1 + 404) = *((_DWORD *)a2 + 101);
  *((_DWORD *)a2 + 101) = v10;
  v11 = *(_DWORD *)(a1 + 408);
  *(_DWORD *)(a1 + 408) = *((_DWORD *)a2 + 102);
  *((_DWORD *)a2 + 102) = v11;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = a2[52];
  a2[52] = 0;
  *(_DWORD *)(a1 + 424) = *((_DWORD *)a2 + 106);
  *((_DWORD *)a2 + 106) = 0;
  v12 = *(_DWORD *)(a1 + 428);
  *(_DWORD *)(a1 + 428) = *((_DWORD *)a2 + 107);
  *((_DWORD *)a2 + 107) = v12;
  v13 = *(_DWORD *)(a1 + 432);
  *(_DWORD *)(a1 + 432) = *((_DWORD *)a2 + 108);
  *((_DWORD *)a2 + 108) = v13;
  return a1;
}

uint64_t sub_1C5A5B0CC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_1C5A5B140(_QWORD *a1)
{
  *a1 = &unk_1E81912A0;
  sub_1C56E07A8((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A5B184(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::GlobalDCEPass::run(a1 + 8, a2, a3);
}

uint64_t sub_1C5A5B190()
{
  return 0;
}

void sub_1C5A5B198()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A5B1AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::GlobalOptPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5B1B8()
{
  return 0;
}

uint64_t sub_1C5A5B1C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  if (v7)
  {
    if (v7 == a2 + 88)
    {
      *(_QWORD *)(a1 + 112) = a1 + 88;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 112) + 24))(*(_QWORD *)(a2 + 112));
    }
    else
    {
      *(_QWORD *)(a1 + 112) = v7;
      *(_QWORD *)(a2 + 112) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  v8 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = v8;
  v9 = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = v9;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v10 = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  v11 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 264) = v11;
  return a1;
}

void sub_1C5A5B348(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E818C920;
  sub_1C4F02264((uint64_t)(a1 + 6));
  v2 = (_QWORD *)a1[5];
  if (v2 == a1 + 2)
  {
    v3 = 4;
    v2 = a1 + 2;
  }
  else
  {
    if (!v2)
LABEL_7:
      JUMPOUT(0x1CAA32FC0);
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_7;
}

_QWORD *sub_1C5A5B3B8@<X0>(uint64_t a1@<X0>, llvm::Module *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::InternalizePass::run((llvm::InternalizePass *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5B3C4()
{
  return 0;
}

void sub_1C5A5B3D0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5B3E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5B41C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  size_t v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *result;

  v6 = (const char *)a3(a4, "NoOpModulePass", 14);
  v7 = v5;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v6, v5);
  if (v5)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v5);
    *((_QWORD *)a2 + 4) += v7;
  }
  return result;
}

const char *sub_1C5A5B49C()
{
  return "NoOpModulePass";
}

uint64_t sub_1C5A5B4AC()
{
  return 0;
}

void sub_1C5A5B4B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5B4CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::FunctionGroupInfoPrinterPass::run((_QWORD *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C5A5B4D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  char *v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  v7 = sub_1C5A26FD4();
  v10 = (const char *)a3(a4, v7, v8);
  v11 = v9;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v9 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v10, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v9);
    *((_QWORD *)a2 + 4) += v11;
  }
  return result;
}

uint64_t sub_1C5A5B570()
{
  return 0;
}

uint64_t sub_1C5A5B578(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818CBA0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5A5B5B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818CBA0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A5B600(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  llvm::PostOrderFunctionAttrsPass::run(a1, a2, a3, a4);
}

uint64_t sub_1C5A5B60C()
{
  return 0;
}

void sub_1C5A5B618()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5B62C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5B664(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  size_t v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *result;

  v6 = (const char *)a3(a4, "NoOpCGSCCPass", 13);
  v7 = v5;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v6, v5);
  if (v5)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v5);
    *((_QWORD *)a2 + 4) += v7;
  }
  return result;
}

const char *sub_1C5A5B6E4()
{
  return "NoOpCGSCCPass";
}

uint64_t sub_1C5A5B6F4()
{
  return 0;
}

_QWORD *sub_1C5A5B6FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::ADCEPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5B708()
{
  return 0;
}

_QWORD *sub_1C5A5B710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::AlignmentFromAssumptionsPass::run((llvm::AlignmentFromAssumptionsPass *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5B71C()
{
  return 0;
}

_QWORD *sub_1C5A5B724@<X0>(const llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::AnnotationRemarksPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5B730()
{
  return 1;
}

_QWORD *sub_1C5A5B738@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::BDCEPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5B744()
{
  return 0;
}

uint64_t sub_1C5A5B74C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = &v4[672 * v5];
          do
          {
            *(_OWORD *)v9 = *(_OWORD *)v4;
            sub_1C5A5B980((uint64_t)(v9 + 16), (uint64_t)(v4 + 16));
            v9 += 672;
            v4 += 672;
          }
          while (v4 != v10);
          v11 = v9;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v9 = *(char **)a1;
        }
        else
        {
          v11 = *(char **)a1;
        }
        v12 = &v9[672 * v6];
        if (v12 != v11)
        {
          do
          {
            v13 = v12 - 672;
            sub_1C62EA6E8((char **)v12 - 82);
            v12 = v13;
          }
          while (v13 != v11);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v14 = *(_DWORD *)(a2 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)a2 - 656;
          v16 = 672 * v14;
          do
          {
            sub_1C62EA6E8((char **)(v15 + v16));
            v16 -= 672;
          }
          while (v16);
        }
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v17 = *(_QWORD *)a1 - 656;
          v18 = 672 * v6;
          do
          {
            sub_1C62EA6E8((char **)(v17 + v18));
            v18 -= 672;
          }
          while (v18);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C62F4484(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[672 * v6];
        v8 = *(char **)a1;
        do
        {
          *(_OWORD *)v8 = *(_OWORD *)v4;
          sub_1C5A5B980((uint64_t)(v8 + 16), (uint64_t)(v4 + 16));
          v4 += 672;
          v8 += 672;
        }
        while (v4 != v7);
        goto LABEL_26;
      }
      v6 = 0;
LABEL_26:
      v19 = *(char **)a2;
      v20 = *(unsigned int *)(a2 + 8);
      if (v6 != v20)
      {
        v21 = &v19[672 * v20];
        v22 = *(char **)a1;
        v23 = 672 * v6;
        do
        {
          v24 = &v19[v23];
          v25 = &v22[v23];
          *(_OWORD *)v25 = *(_OWORD *)&v19[v23];
          *((_QWORD *)v25 + 3) = 0x400000000;
          *((_QWORD *)v25 + 2) = &v22[v23 + 32];
          if (*(_DWORD *)&v19[v23 + 24])
            sub_1C5A5B980((uint64_t)&v22[v23 + 16], (uint64_t)(v24 + 16));
          v22 += 672;
          v19 += 672;
        }
        while (v24 + 672 != v21);
        v19 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v26 = *(_DWORD *)(a2 + 8);
      if (v26)
      {
        v27 = 672 * v26;
        do
        {
          sub_1C62EA6E8((char **)&v19[v27 - 656]);
          v27 -= 672;
        }
        while (v27);
      }
LABEL_35:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C62F4408((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C5A5B980(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = &v4[160 * v5];
          do
          {
            sub_1C62F45E8((uint64_t)v9, (uint64_t)v4);
            *((_OWORD *)v9 + 9) = *((_OWORD *)v4 + 9);
            v9 += 160;
            v4 += 160;
          }
          while (v4 != v10);
          v11 = v9;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v9 = *(char **)a1;
        }
        else
        {
          v11 = *(char **)a1;
        }
        v12 = &v9[160 * v6];
        while (v12 != v11)
        {
          v14 = (char *)*((_QWORD *)v12 - 20);
          v12 -= 160;
          v13 = v14;
          if (v12 + 16 != v14)
            free(v13);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v15 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v15)
        {
          v16 = *(char **)a2;
          v17 = 160 * v15;
          do
          {
            v18 = *(char **)&v16[v17 - 160];
            if (&v16[v17 - 144] != v18)
              free(v18);
            v17 -= 160;
          }
          while (v17);
        }
        goto LABEL_43;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v19 = *(char **)a1;
          v20 = 160 * v6;
          do
          {
            v21 = *(char **)&v19[v20 - 160];
            if (&v19[v20 - 144] != v21)
              free(v21);
            v20 -= 160;
          }
          while (v20);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C62F457C(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[160 * v6];
        v8 = *(_QWORD *)a1;
        do
        {
          sub_1C62F45E8(v8, (uint64_t)v4);
          *(_OWORD *)(v8 + 144) = *((_OWORD *)v4 + 9);
          v4 += 160;
          v8 += 160;
        }
        while (v4 != v7);
        goto LABEL_32;
      }
      v6 = 0;
LABEL_32:
      v22 = *(char **)a2;
      v23 = *(unsigned int *)(a2 + 8);
      if (v6 != v23)
      {
        v24 = *(char **)a1;
        v25 = 160 * v6;
        v26 = 160 * v23;
        do
        {
          v27 = &v24[v25];
          v28 = &v22[v25];
          *(_QWORD *)v27 = &v24[v25 + 16];
          *((_QWORD *)v27 + 1) = 0x800000000;
          if (*(_DWORD *)&v22[v25 + 8])
            sub_1C62F45E8((uint64_t)&v24[v25], (uint64_t)&v22[v25]);
          v22 += 160;
          *((_OWORD *)v27 + 9) = *((_OWORD *)v28 + 9);
          v24 += 160;
          v26 -= 160;
        }
        while (v25 != v26);
        v22 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v29 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v29)
      {
        v30 = 160 * v29;
        do
        {
          v31 = *(char **)&v22[v30 - 160];
          if (&v22[v30 - 144] != v31)
            free(v31);
          v30 -= 160;
        }
        while (v30);
      }
LABEL_43:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C62F44F0((char **)a1, (char **)a2);
  }
  return a1;
}

_QWORD *sub_1C5A5BBEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::CorrelatedValuePropagationPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5BBF8()
{
  return 0;
}

_QWORD *sub_1C5A5BC00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::DSEPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5BC0C()
{
  return 0;
}

uint64_t sub_1C5A5BC14(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int64x2_t v7;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x10000000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C4964480(a1, (const void **)a2);
  *(_DWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_QWORD *)(a1 + 2064) = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = 0;
  *(_DWORD *)(a1 + 2072) = *(_DWORD *)(a2 + 2072);
  *(_DWORD *)(a2 + 2072) = 0;
  v4 = *(_DWORD *)(a1 + 2076);
  *(_DWORD *)(a1 + 2076) = *(_DWORD *)(a2 + 2076);
  *(_DWORD *)(a2 + 2076) = v4;
  v5 = *(_DWORD *)(a1 + 2080);
  *(_DWORD *)(a1 + 2080) = *(_DWORD *)(a2 + 2080);
  *(_DWORD *)(a2 + 2080) = v5;
  *(_QWORD *)(a1 + 2088) = 1;
  v6 = 2096;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v6) = v7;
    v6 += 16;
  }
  while (v6 != 2224);
  sub_1C5A5BD14((unsigned int *)(a1 + 2088), (unsigned int *)(a2 + 2088));
  *(_QWORD *)(a1 + 2224) = a1 + 2240;
  *(_QWORD *)(a1 + 2232) = 0x1000000000;
  if (*(_DWORD *)(a2 + 2232))
    sub_1C4964480(a1 + 2224, (const void **)(a2 + 2224));
  return a1;
}

__n128 sub_1C5A5BD14(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  __n128 result;
  __n128 v13;

  v2 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  v3 = a1[1];
  *a1 = v2 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = 0;
      v6 = (int *)(a1 + 2);
      v7 = (int *)(a2 + 2);
      do
      {
        v8 = *(_QWORD *)&v6[v5];
        *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
        *(_QWORD *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 32);
      return result;
    }
    v10 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      v9 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v9;
      LODWORD(v9) = a1[4];
      a1[4] = a2[4];
      a2[4] = v9;
      return result;
    }
    v4 = *a1;
    v10 = a1;
    a1 = a2;
  }
  v13 = *(__n128 *)(v10 + 2);
  *v10 = v4 | 1;
  for (i = 2; i != 34; i += 2)
    *(_QWORD *)&v10[i] = *(_QWORD *)&a1[i];
  *a1 &= ~1u;
  result = v13;
  *(__n128 *)(a1 + 2) = v13;
  return result;
}

void sub_1C5A5BE00(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_1E81907E0;
  v2 = *(void **)(a1 + 2232);
  if (v2 != (void *)(a1 + 2248))
    free(v2);
  if ((*(_BYTE *)(a1 + 2096) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2104), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2072), 8);
  v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 24))
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5BE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::InstCombinePass::run(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C5A5BEA0()
{
  return 0;
}

_QWORD *sub_1C5A5BEA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::InstSimplifyPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5BEB4()
{
  return 0;
}

uint64_t sub_1C5A5BEBC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)(a1 + 8);
  sub_1C47655E8(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *v4 = 0;
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      if ((v6[5] & 1) != 0)
      {
        v18 = (uint64_t)&v18;
        v19 = 1;
        v20 = v6[6];
        v8 = sub_1C5A5C00C((uint64_t **)a1, (uint64_t)&v18, (uint64_t)&v18);
        v9 = v6[5] & 0xFFFFFFFFFFFFFFFELL;
        if (v9)
        {
          if (((_BYTE)v8[5] & 1) != 0)
            v10 = v8 + 4;
          else
            v10 = 0;
          do
          {
            v18 = (uint64_t)&v18;
            v19 = 1;
            v20 = *(_QWORD *)(v9 + 16);
            v11 = sub_1C5A5C00C((uint64_t **)a1, (uint64_t)&v18, (uint64_t)&v18);
            v12 = (unint64_t)(v11 + 4);
            if (((_BYTE)v11[5] & 1) == 0)
              v12 = 0;
            if (v10 != (uint64_t **)v12)
            {
              (*v10)[1] = (*v10)[1] & 1 | v12;
              *v10 = *(uint64_t **)v12;
              v13 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)v12 = v10;
              *(_QWORD *)(v12 + 8) = v13;
            }
            v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v9);
        }
      }
      v14 = (_QWORD *)v6[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v6[2];
          v16 = *v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
    }
    while (v15 != v5);
  }
  return a1;
}

uint64_t **sub_1C5A5C00C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[6];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x38uLL);
    v8[4] = (uint64_t *)(v8 + 4);
    v8[5] = (uint64_t *)1;
    v8[6] = *(uint64_t **)(a3 + 16);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void sub_1C5A5C0F8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5C10C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5C144(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  size_t v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *result;

  v6 = (const char *)a3(a4, "NoOpFunctionPass", 16);
  v7 = v5;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v6, v5);
  if (v5)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v5);
    *((_QWORD *)a2 + 4) += v7;
  }
  return result;
}

const char *sub_1C5A5C1C4()
{
  return "NoOpFunctionPass";
}

uint64_t sub_1C5A5C1D4()
{
  return 0;
}

double sub_1C5A5C1DC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return llvm::LowerExpectIntrinsicPass::run(a1, a2);
}

uint64_t sub_1C5A5C1E8()
{
  return 0;
}

_QWORD *sub_1C5A5C1F0@<X0>(llvm *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::LowerConstantIntrinsicsPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5C1FC()
{
  return 0;
}

void sub_1C5A5C204(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::LoopSinkPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5C210()
{
  return 0;
}

_QWORD *sub_1C5A5C218@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::PromotePass::run(a1, a2, a3);
}

uint64_t sub_1C5A5C224()
{
  return 0;
}

_QWORD *sub_1C5A5C22C@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::MemCpyOptPass::run((llvm::MemCpyOptPass *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5C238()
{
  return 0;
}

uint64_t sub_1C5A5C240(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = *(_QWORD **)a1;
          v12 = 8 * v8;
          do
          {
            v13 = *v4++;
            *v11++ = v13;
            v12 -= 8;
          }
          while (v12);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v14 = *(_QWORD **)a1;
            v15 = 8 * v9;
            do
            {
              v16 = *v4++;
              *v14++ = v16;
              v15 -= 8;
            }
            while (v15);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(uint64_t **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C5A5C370@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::LoopLoadEliminationPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5C37C()
{
  return 0;
}

uint64_t sub_1C5A5C384(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818DBA0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5A5C3C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818DBA0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A5C40C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v6 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v6;
  v7 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v7;
  sub_1C62F9080(a1 + 48, a2 + 48);
  for (i = 0; i != 432; i += 24)
  {
    v9 = a1 + i;
    v10 = a2 + i;
    *(_QWORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *(_DWORD *)(v9 + 136) = 0;
    *(_QWORD *)(v9 + 120) = *(_QWORD *)(a2 + i + 120);
    *(_QWORD *)(v10 + 120) = 0;
    *(_DWORD *)(v9 + 128) = *(_DWORD *)(a2 + i + 128);
    *(_DWORD *)(v10 + 128) = 0;
    v11 = *(_DWORD *)(a1 + i + 132);
    *(_DWORD *)(v9 + 132) = *(_DWORD *)(a2 + i + 132);
    *(_DWORD *)(v10 + 132) = v11;
    v12 = *(_DWORD *)(a1 + i + 136);
    *(_DWORD *)(v9 + 136) = *(_DWORD *)(a2 + i + 136);
    *(_DWORD *)(v10 + 136) = v12;
  }
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  return a1;
}

void sub_1C5A5C51C(int32x2_t *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::ReassociatePass::run(a1 + 1, a2, a3);
}

uint64_t sub_1C5A5C528()
{
  return 0;
}

_QWORD *sub_1C5A5C530@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::SCCPPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5C53C()
{
  return 0;
}

_QWORD *sub_1C5A5C544@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::SpeculativeExecutionPass::run((llvm::SpeculativeExecutionPass *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5C550()
{
  return 0;
}

uint64_t sub_1C5A5C558(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 24) = result + 40;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 32) = 0x1000000000;
  if (*(_DWORD *)(a2 + 32))
  {
    v4 = result;
    sub_1C614D378(result + 24, a2 + 24);
    return v4;
  }
  return result;
}

uint64_t sub_1C5A5C5E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v75;
  uint64_t *v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int32x2_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  char *i;
  uint64_t v94;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  int32x2_t *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  int32x2_t *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  int v124;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C62F9B54((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v23 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v24 = &v4[24 * v5];
        do
        {
          v25 = *((_QWORD *)v23 + 2);
          v26 = *((_QWORD *)v4 + 2);
          if (v25 != v26)
          {
            v27 = v25 == -4096 || v25 == 0;
            if (!v27 && v25 != -8192)
            {
              v32 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v32 = *((_QWORD *)v23 + 1);
              v33 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v33)
              {
                *v33 = *v33 & 7 | v32;
              }
              else
              {
                v34 = *((_QWORD *)v23 + 2);
                v35 = ***(int32x2_t ****)v34;
                v36 = (unint64_t)v35[303];
                if (v36 <= v32)
                {
                  v37 = v35[305].u32[0];
                  if (v36 + 16 * v37 > v32)
                  {
                    v38 = v37 - 1;
                    LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                    v40 = (uint64_t *)(v36 + 16 * v39);
                    v41 = *v40;
                    if (v34 == *v40)
                    {
LABEL_52:
                      *v40 = -8192;
                      v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                      v34 = *((_QWORD *)v23 + 2);
                    }
                    else
                    {
                      v42 = 1;
                      while (v41 != -4096)
                      {
                        v43 = v39 + v42++;
                        v39 = v43 & v38;
                        v41 = *(_QWORD *)(v36 + 16 * v39);
                        if (v34 == v41)
                        {
                          v40 = (uint64_t *)(v36 + 16 * v39);
                          goto LABEL_52;
                        }
                      }
                    }
                    *(_BYTE *)(v34 + 17) &= ~1u;
                  }
                }
              }
              v26 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v23 + 2) = v26;
            if (v26 != -4096 && v26 != -8192 && v26 != 0)
            {
              v29 = *(_QWORD *)v4;
              v30 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v23 + 1) = *v30;
              *v30 = v23;
              *(_QWORD *)v23 = v29 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v23 & 7;
              v31 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v31)
                *v31 = *v31 & 7 | (unint64_t)(v23 + 8);
            }
          }
          v4 += 24;
          v23 += 24;
        }
        while (v4 != v24);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v44 = v23;
        v23 = *(char **)a1;
      }
      else
      {
        v44 = *(char **)a1;
      }
      for (i = &v23[24 * v6]; i != v44; i -= 24)
      {
        v94 = *((_QWORD *)i - 1);
        if (v94 != -8192 && v94 != -4096 && v94 != 0)
        {
          v96 = *((_QWORD *)i - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v96 = *((_QWORD *)i - 2);
          v97 = (unint64_t *)*((_QWORD *)i - 2);
          if (v97)
          {
            *v97 = *v97 & 7 | v96;
          }
          else
          {
            v98 = *((_QWORD *)i - 1);
            v99 = ***(int32x2_t ****)v98;
            v100 = (unint64_t)v99[303];
            if (v100 <= v96)
            {
              v101 = v99[305].u32[0];
              if (v100 + 16 * v101 > v96)
              {
                v102 = v101 - 1;
                LODWORD(v103) = v102 & ((v98 >> 4) ^ (v98 >> 9));
                v104 = (uint64_t *)(v100 + 16 * v103);
                v105 = *v104;
                if (v98 == *v104)
                {
LABEL_138:
                  *v104 = -8192;
                  v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
                  v98 = *((_QWORD *)i - 1);
                }
                else
                {
                  v106 = 1;
                  while (v105 != -4096)
                  {
                    v107 = v103 + v106++;
                    v103 = v107 & v102;
                    v105 = *(_QWORD *)(v100 + 16 * v103);
                    if (v98 == v105)
                    {
                      v104 = (uint64_t *)(v100 + 16 * v103);
                      goto LABEL_138;
                    }
                  }
                }
                *(_BYTE *)(v98 + 17) &= ~1u;
              }
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v108 = *(_DWORD *)(a2 + 8);
      if (v108)
      {
        v109 = *(char **)a2;
        v110 = *(_QWORD *)a2 + 24 * v108;
        do
        {
          v111 = *(_QWORD *)(v110 - 8);
          if (v111 != -8192 && v111 != -4096 && v111 != 0)
          {
            v113 = *(_QWORD *)(v110 - 24) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v113 = *(_QWORD *)(v110 - 16);
            v114 = *(unint64_t **)(v110 - 16);
            if (v114)
            {
              *v114 = *v114 & 7 | v113;
            }
            else
            {
              v115 = *(_QWORD *)(v110 - 8);
              v116 = ***(int32x2_t ****)v115;
              v117 = (unint64_t)v116[303];
              if (v117 <= v113)
              {
                v118 = v116[305].u32[0];
                if (v117 + 16 * v118 > v113)
                {
                  v119 = v118 - 1;
                  LODWORD(v120) = v119 & ((v115 >> 4) ^ (v115 >> 9));
                  v121 = (uint64_t *)(v117 + 16 * v120);
                  v122 = *v121;
                  if (v115 == *v121)
                  {
LABEL_159:
                    *v121 = -8192;
                    v116[304] = vadd_s32(v116[304], (int32x2_t)0x1FFFFFFFFLL);
                    v115 = *(_QWORD *)(v110 - 8);
                  }
                  else
                  {
                    v123 = 1;
                    while (v122 != -4096)
                    {
                      v124 = v120 + v123++;
                      v120 = v124 & v119;
                      v122 = *(_QWORD *)(v117 + 16 * v120);
                      if (v115 == v122)
                      {
                        v121 = (uint64_t *)(v117 + 16 * v120);
                        goto LABEL_159;
                      }
                    }
                  }
                  *(_BYTE *)(v115 + 17) &= ~1u;
                }
              }
            }
          }
          v110 -= 24;
        }
        while ((char *)v110 != v109);
      }
      goto LABEL_162;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v45 = &v4[24 * v6];
        v46 = *(char **)a1;
        do
        {
          v47 = *((_QWORD *)v46 + 2);
          v48 = *((_QWORD *)v4 + 2);
          if (v47 != v48)
          {
            v49 = v47 == -4096 || v47 == 0;
            if (!v49 && v47 != -8192)
            {
              v54 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v54 = *((_QWORD *)v46 + 1);
              v55 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v55)
              {
                *v55 = *v55 & 7 | v54;
              }
              else
              {
                v56 = *((_QWORD *)v46 + 2);
                v57 = ***(int32x2_t ****)v56;
                v58 = (unint64_t)v57[303];
                if (v58 <= v54)
                {
                  v59 = v57[305].u32[0];
                  if (v58 + 16 * v59 > v54)
                  {
                    v60 = v59 - 1;
                    LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
                    v62 = (uint64_t *)(v58 + 16 * v61);
                    v63 = *v62;
                    if (v56 == *v62)
                    {
LABEL_82:
                      *v62 = -8192;
                      v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                      v56 = *((_QWORD *)v46 + 2);
                    }
                    else
                    {
                      v64 = 1;
                      while (v63 != -4096)
                      {
                        v65 = v61 + v64++;
                        v61 = v65 & v60;
                        v63 = *(_QWORD *)(v58 + 16 * v61);
                        if (v56 == v63)
                        {
                          v62 = (uint64_t *)(v58 + 16 * v61);
                          goto LABEL_82;
                        }
                      }
                    }
                    *(_BYTE *)(v56 + 17) &= ~1u;
                  }
                }
              }
              v48 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v46 + 2) = v48;
            if (v48 != -4096 && v48 != -8192 && v48 != 0)
            {
              v51 = *(_QWORD *)v4;
              v52 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v46 + 1) = *v52;
              *v52 = v46;
              *(_QWORD *)v46 = v51 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v46 & 7;
              v53 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v53)
                *v53 = *v53 & 7 | (unint64_t)(v46 + 8);
            }
          }
          v4 += 24;
          v46 += 24;
        }
        while (v4 != v45);
        goto LABEL_88;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = *(_QWORD *)a1 + 24 * v6;
        do
        {
          v9 = *(_QWORD *)(v8 - 8);
          if (v9 != -8192 && v9 != -4096 && v9 != 0)
          {
            v11 = *(_QWORD *)(v8 - 24) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v11 = *(_QWORD *)(v8 - 16);
            v12 = *(unint64_t **)(v8 - 16);
            if (v12)
            {
              *v12 = *v12 & 7 | v11;
            }
            else
            {
              v13 = *(_QWORD *)(v8 - 8);
              v14 = ***(int32x2_t ****)v13;
              v15 = (unint64_t)v14[303];
              if (v15 <= v11)
              {
                v16 = v14[305].u32[0];
                if (v15 + 16 * v16 > v11)
                {
                  v17 = v16 - 1;
                  LODWORD(v18) = v17 & ((v13 >> 4) ^ (v13 >> 9));
                  v19 = (uint64_t *)(v15 + 16 * v18);
                  v20 = *v19;
                  if (v13 == *v19)
                  {
LABEL_23:
                    *v19 = -8192;
                    v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                    v13 = *(_QWORD *)(v8 - 8);
                  }
                  else
                  {
                    v21 = 1;
                    while (v20 != -4096)
                    {
                      v22 = v18 + v21++;
                      v18 = v22 & v17;
                      v20 = *(_QWORD *)(v15 + 16 * v18);
                      if (v13 == v20)
                      {
                        v19 = (uint64_t *)(v15 + 16 * v18);
                        goto LABEL_23;
                      }
                    }
                  }
                  *(_BYTE *)(v13 + 17) &= ~1u;
                }
              }
            }
          }
          v8 -= 24;
        }
        while ((char *)v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4EE49E4((unsigned int *)a1, v5);
    }
    v6 = 0;
LABEL_88:
    v66 = *(char **)a2;
    v67 = *(unsigned int *)(a2 + 8);
    if (v6 != v67)
    {
      v68 = *(char **)a1;
      v69 = 24 * v6;
      v70 = *(_QWORD *)a1 + 8;
      v71 = 24 * v67;
      do
      {
        v72 = (unint64_t *)&v68[v69];
        *v72 = 4;
        v72[1] = 0;
        v73 = *(_QWORD *)&v66[v69 + 16];
        v72[2] = v73;
        if (v73 != -8192 && v73 != -4096 && v73 != 0)
        {
          v75 = *(_QWORD *)&v66[v69] & 0xFFFFFFFFFFFFFFF8;
          v72[1] = *(_QWORD *)v75;
          *(_QWORD *)v75 = v72;
          *v72 = v75 | 4;
          v76 = (uint64_t *)v72[1];
          if (v76)
            *v76 = *v76 & 7 | (v69 + v70);
        }
        v68 += 24;
        v66 += 24;
        v70 += 24;
        v71 -= 24;
      }
      while (v69 != v71);
      v66 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v77 = *(_DWORD *)(a2 + 8);
    if (v77)
    {
      v78 = &v66[24 * v77];
      do
      {
        v79 = *((_QWORD *)v78 - 1);
        if (v79 != -8192 && v79 != -4096 && v79 != 0)
        {
          v81 = *((_QWORD *)v78 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v81 = *((_QWORD *)v78 - 2);
          v82 = (unint64_t *)*((_QWORD *)v78 - 2);
          if (v82)
          {
            *v82 = *v82 & 7 | v81;
          }
          else
          {
            v83 = *((_QWORD *)v78 - 1);
            v84 = ***(int32x2_t ****)v83;
            v85 = (unint64_t)v84[303];
            if (v85 <= v81)
            {
              v86 = v84[305].u32[0];
              if (v85 + 16 * v86 > v81)
              {
                v87 = v86 - 1;
                LODWORD(v88) = v87 & ((v83 >> 4) ^ (v83 >> 9));
                v89 = (uint64_t *)(v85 + 16 * v88);
                v90 = *v89;
                if (v83 == *v89)
                {
LABEL_117:
                  *v89 = -8192;
                  v84[304] = vadd_s32(v84[304], (int32x2_t)0x1FFFFFFFFLL);
                  v83 = *((_QWORD *)v78 - 1);
                }
                else
                {
                  v91 = 1;
                  while (v90 != -4096)
                  {
                    v92 = v88 + v91++;
                    v88 = v92 & v87;
                    v90 = *(_QWORD *)(v85 + 16 * v88);
                    if (v83 == v90)
                    {
                      v89 = (uint64_t *)(v85 + 16 * v88);
                      goto LABEL_117;
                    }
                  }
                }
                *(_BYTE *)(v83 + 17) &= ~1u;
              }
            }
          }
        }
        v78 -= 24;
      }
      while (v78 != v66);
    }
LABEL_162:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_1C5A5CE30(int32x2_t *a1@<X0>, int32x2_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::SROAPass::run(a1 + 1, a2, a3, a4);
}

uint64_t sub_1C5A5CE3C()
{
  return 0;
}

void sub_1C5A5CE44(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::TailCallElimPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5CE50()
{
  return 0;
}

_QWORD *sub_1C5A5CE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::EarlyCSEPass::run((_BYTE *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5CE64()
{
  return 0;
}

char *sub_1C5A5CE6C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::EarlyCSEPass]";
  v10[1] = 68;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44)
    v1 = 68;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_325[v1];
  v3 = 68 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5CF24()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::EntryExitInstrumenterPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_326[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5CFDC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LowerMatrixIntrinsicsPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_327[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5D094()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopUnrollPass]";
  v10[1] = 70;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x46)
    v1 = 70;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_328[v1];
  v3 = 70 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A5D14C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A5D160@<X0>(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::SimplifyCFGPass::run(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C5A5D16C()
{
  return 0;
}

char *sub_1C5A5D174()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SimplifyCFGPass]";
  v10[1] = 71;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x47)
    v1 = 71;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_329[v1];
  v3 = 71 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5D22C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopVectorizePass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_330[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5D2E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::MergedLoadStoreMotionPass::run((char *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5D2F0()
{
  return 0;
}

char *sub_1C5A5D2F8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::MergedLoadStoreMotionPass]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_331[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

unsigned int *sub_1C5A5D3B0(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int *v16;
  __int128 v17;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_22:
          v15[4] = v16[4];
        }
      }
      else
      {
        v14 = result[v9 + 4];
        *((_QWORD *)v10 + 1) = v13;
        result[v9 + 4] = a2[v9 + 4];
        *((_QWORD *)v11 + 1) = v12;
        a2[v9 + 4] = v14;
      }
      v9 += 4;
      if (v9 == 16)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v17 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      v6[v7 + 4] = result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

_QWORD *sub_1C5A5D530@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return llvm::GVNPass::run(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C5A5D53C()
{
  return 0;
}

char *sub_1C5A5D544()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::GVNPass]";
  v10[1] = 63;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x3F)
    v1 = 63;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_332[v1];
  v3 = v1 ^ 0x3F;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A5D5FC(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::FunctionToLoopPassAdaptor::run((_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5D608()
{
  return 1;
}

char *sub_1C5A5D610()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::FunctionToLoopPassAdaptor]";
  v10[1] = 81;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x51)
    v1 = 81;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_333[v1];
  v3 = 81 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char **sub_1C5A5D6C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return llvm::LoopInstSimplifyPass::run(a1, a2, a3);
}

uint64_t sub_1C5A5D6D4()
{
  return 0;
}

char **sub_1C5A5D6DC@<X0>(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return llvm::LoopRotatePass::run((_BYTE *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5D6E8()
{
  return 0;
}

void sub_1C5A5D6F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5D708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5D740(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  size_t v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *result;

  v6 = (const char *)a3(a4, "NoOpLoopPass", 12);
  v7 = v5;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v6, v5);
  if (v5)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v5);
    *((_QWORD *)a2 + 4) += v7;
  }
  return result;
}

const char *sub_1C5A5D7C0()
{
  return "NoOpLoopPass";
}

uint64_t sub_1C5A5D7D0()
{
  return 0;
}

uint64_t sub_1C5A5D7D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818E9A0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5A5D814(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E818E9A0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A5D860(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  llvm::LoopDeletionPass::run(a1, a2, a3, a4);
}

uint64_t sub_1C5A5D86C()
{
  return 0;
}

char **sub_1C5A5D874@<X0>(llvm::Loop *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return llvm::LoopSimplifyCFGPass::run(a1, a2, a3, a4);
}

uint64_t sub_1C5A5D880()
{
  return 0;
}

char **sub_1C5A5D888@<X0>(uint64_t a1@<X0>, llvm::Loop *a2@<X1>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  return llvm::IndVarSimplifyPass::run((_BYTE *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5D894()
{
  return 0;
}

void sub_1C5A5D89C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  llvm::SimpleLoopUnswitchPass::run((unsigned __int8 *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1C5A5D8A8()
{
  return 0;
}

char *sub_1C5A5D8B0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::SimpleLoopUnswitchPass]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_334[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C5A5D968@<X0>(uint64_t a1@<X0>, llvm::Loop *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return llvm::LICMPass::run((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C5A5D974()
{
  return 0;
}

char *sub_1C5A5D97C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LICMPass]";
  v10[1] = 64;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x40)
    v1 = 64;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_335[v1];
  v3 = 64 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A5DA34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::CGSCCToFunctionPassAdaptor::run((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t sub_1C5A5DA40()
{
  return 1;
}

char *sub_1C5A5DA48()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CGSCCToFunctionPassAdaptor]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_336[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5DB00(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (result)
  {
    v2 = *(unsigned int *)(result + 296);
    if ((_DWORD)v2)
    {
      v4 = *(_QWORD **)(result + 288);
      v5 = 32 * v2;
      do
      {
        v6 = sub_1C57053B4();
        v8 = v7;
        v13 = 0;
        v9 = (_QWORD *)operator new();
        *v9 = &unk_1E8135388;
        v9[1] = a2;
        v10 = v13;
        v13 = v9;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        v11 = v4[3];
        v12 = v4;
        if ((v11 & 2) == 0)
          v12 = (_QWORD *)*v4;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **))(v11 & 0xFFFFFFFFFFFFFFF8))(v12, v6, v8, &v13);
        result = (uint64_t)v13;
        v13 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_1C5A5DBE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (result)
  {
    v3 = *(unsigned int *)(result + 440);
    if ((_DWORD)v3)
    {
      v6 = *(_QWORD **)(result + 432);
      v7 = 32 * v3;
      do
      {
        v8 = sub_1C57053B4();
        v10 = v9;
        v15 = 0;
        v11 = (_QWORD *)operator new();
        *v11 = &unk_1E8135388;
        v11[1] = a2;
        v12 = v15;
        v15 = v11;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        v13 = v6[3];
        v14 = v6;
        if ((v13 & 2) == 0)
          v14 = (_QWORD *)*v6;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v8, v10, &v15, a3);
        result = (uint64_t)v15;
        v15 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

char *sub_1C5A5DCE0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<LazyCallGraph:"
                    ":SCC, CGSCCAnalysisManager, LazyCallGraph &, CGSCCUpdateResult &>>]";
  v10[1] = 167;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA7)
    v1 = 167;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_337[v1];
  v3 = 167 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A5DD9C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5DDB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a2, &qword_1EF8F7250, a1, a3);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A5DE14(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpCGSCCAnalysis", 17);
  v7 = v6;
  v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 7uLL)
  {
    *v8 = 0x3C65726975716572;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 8);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "require<", 8uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A5DF28()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<(anonymous namespace)::No"
                    "OpCGSCCAnalysis, llvm::LazyCallGraph::SCC, llvm::AnalysisManager<LazyCallGraph::SCC, LazyCallGraph &"
                    ">, llvm::LazyCallGraph &, llvm::CGSCCUpdateResult &>]";
  v10[1] = 253;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xFD)
    v1 = 253;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_338[v1];
  v3 = 253 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5DFE0()
{
  return 0;
}

void sub_1C5A5DFEC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A5E000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&qword_1EF8F7250);
}

llvm::raw_ostream *sub_1C5A5E060(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpCGSCCAnalysis", 17);
  v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 1013281889;
    *(_QWORD *)v8 = *(_QWORD *)"invalidate<";
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "invalidate<", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A5E17C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<(anonymous namespace):"
                    ":NoOpCGSCCAnalysis>]";
  v10[1] = 120;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x78)
    v1 = 120;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_339[v1];
  v3 = 120 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A5E234()
{
  return 0;
}

char *sub_1C5A5E23C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionAnalysisMan"
                    "agerCGSCCProxy, llvm::LazyCallGraph::SCC, llvm::AnalysisManager<LazyCallGraph::SCC, LazyCallGraph &>"
                    ", llvm::LazyCallGraph &, llvm::CGSCCUpdateResult &>]";
  v10[1] = 252;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xFC)
    v1 = 252;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_340[v1];
  v3 = 252 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5E2F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionAnalysis"
                    "ManagerCGSCCProxy>]";
  v10[1] = 119;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x77)
    v1 = 119;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_341[v1];
  v3 = 119 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5E3AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::LazyCallGraph::SCC, llvm::AnalysisManager<LazyCallGraph::SCC, LazyCallGraph &>, llvm"
                    "::LazyCallGraph &, llvm::CGSCCUpdateResult &>]";
  v10[1] = 246;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xF6)
    v1 = 246;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_342[v1];
  v3 = 246 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C5A5E464(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      abort();
    v6 = result;
    v7 = 5 * a4;
    result = operator new(40 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    for (v6[2] = &result[v7]; a2 != a3; a2 = (_OWORD *)((char *)a2 + 40))
    {
      *(_OWORD *)v8 = *a2;
      v8[2] = 0;
      v8[3] = 0;
      v8[4] = 0;
      result = (_QWORD *)sub_1C5A5E464(v8 + 2);
      v8 += 5;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C5A5E51C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v17;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 + 296);
    if ((_DWORD)v4)
    {
      v6 = *(_QWORD **)(v3 + 288);
      v7 = 32 * v4;
      do
      {
        v8 = sub_1C5A590F8();
        v10 = v9;
        v17 = 0;
        v11 = (_QWORD *)operator new();
        *v11 = &unk_1E81353E8;
        v11[1] = a3;
        v12 = v17;
        v17 = v11;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        v13 = v6[3];
        v14 = v6;
        if ((v13 & 2) == 0)
          v14 = (_QWORD *)*v6;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v8, v10, &v17);
        v15 = v17;
        v17 = 0;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_1C5A5E60C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = *(unsigned int *)(v4 + 440);
    if ((_DWORD)v5)
    {
      v8 = *(_QWORD **)(v4 + 432);
      v9 = 32 * v5;
      do
      {
        v10 = sub_1C5A590F8();
        v12 = v11;
        v17 = 0;
        v13 = (_QWORD *)operator new();
        *v13 = &unk_1E81353E8;
        v13[1] = a3;
        v14 = v17;
        v17 = v13;
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        v15 = v8[3];
        v16 = v8;
        if ((v15 & 2) == 0)
          v16 = (_QWORD *)*v8;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v16, v10, v12, &v17, a4);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

char *sub_1C5A5E708()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Function>>]";
  v10[1] = 97;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61)
    v1 = 97;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_343[v1];
  v3 = 97 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5E7C0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::AAManager, llvm::Fu"
                    "nction, llvm::AnalysisManager<Function>>]";
  v10[1] = 141;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8D)
    v1 = 141;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_344[v1];
  v3 = 141 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C5A5E878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&llvm::AAManager::Key);
}

uint64_t sub_1C5A5E8DC()
{
  return 0;
}

char *sub_1C5A5E8E4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::AAManager>]";
  v10[1] = 95;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5F)
    v1 = 95;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_345[v1];
  v3 = 95 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5E99C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::AssumptionAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_346[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EA54()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::AssumptionAnalysis>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_347[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EB0C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BlockFrequencyAnaly"
                    "sis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 154;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9A)
    v1 = 154;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_348[v1];
  v3 = 154 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EBC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BlockFrequencyAnalysis>]";
  v10[1] = 108;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6C)
    v1 = 108;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_349[v1];
  v3 = 108 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EC7C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BranchProbabilityAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D)
    v1 = 157;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_350[v1];
  v3 = 157 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5ED34()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BranchProbabilityAnalysis>]";
  v10[1] = 111;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F)
    v1 = 111;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_351[v1];
  v3 = 111 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EDEC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CycleAnalysis, llvm"
                    "::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 145;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x91)
    v1 = 145;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_352[v1];
  v3 = 145 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EEA4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CycleAnalysis>]";
  v10[1] = 99;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x63)
    v1 = 99;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_353[v1];
  v3 = 99 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5EF5C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DominatorTreeAnalys"
                    "is, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 153;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99)
    v1 = 153;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_354[v1];
  v3 = 153 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F014()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DominatorTreeAnalysis>]";
  v10[1] = 107;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B)
    v1 = 107;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_355[v1];
  v3 = 107 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F0CC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PostDominatorTreeAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D)
    v1 = 157;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_356[v1];
  v3 = 157 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F184()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PostDominatorTreeAnalysis>]";
  v10[1] = 111;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F)
    v1 = 111;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_357[v1];
  v3 = 111 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F23C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DemandedBitsAnalysi"
                    "s, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 152;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x98)
    v1 = 152;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_358[v1];
  v3 = 152 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F2F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DemandedBitsAnalysis>]";
  v10[1] = 106;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6A)
    v1 = 106;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_359[v1];
  v3 = 106 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F3AC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DominanceFrontierAn"
                    "alysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 157;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9D)
    v1 = 157;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_360[v1];
  v3 = 157 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F464()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DominanceFrontierAnalysis>]";
  v10[1] = 111;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F)
    v1 = 111;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_361[v1];
  v3 = 111 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F51C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::FunctionPropertiesA"
                    "nalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 158;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9E)
    v1 = 158;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_362[v1];
  v3 = 158 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F5D4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::FunctionPropertiesAnalysis>]";
  v10[1] = 112;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70)
    v1 = 112;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_363[v1];
  v3 = 112 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F68C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LoopAnalysis, llvm:"
                    ":Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 144;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x90)
    v1 = 144;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_364[v1];
  v3 = 144 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F744()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LoopAnalysis>]";
  v10[1] = 98;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x62)
    v1 = 98;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_365[v1];
  v3 = 98 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F7FC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LazyValueAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_366[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F8B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LazyValueAnalysis>]";
  v10[1] = 103;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67)
    v1 = 103;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_367[v1];
  v3 = 103 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5F96C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DependenceAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_368[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FA24()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DependenceAnalysis>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_369[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FADC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::InlineSizeEstimator"
                    "Analysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 159;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F)
    v1 = 159;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_370[v1];
  v3 = 159 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FB94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::InlineSizeEstimatorAnalysis>]";
  v10[1] = 113;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71)
    v1 = 113;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_371[v1];
  v3 = 113 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FC4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::MemoryDependenceAna"
                    "lysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 156;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9C)
    v1 = 156;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_372[v1];
  v3 = 156 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FD04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::MemoryDependenceAnalysis>]";
  v10[1] = 110;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6E)
    v1 = 110;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_373[v1];
  v3 = 110 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FDBC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::MemorySSAAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_374[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FE74()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::MemorySSAAnalysis>]";
  v10[1] = 103;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67)
    v1 = 103;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_375[v1];
  v3 = 103 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FF2C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PhiValuesAnalysis, "
                    "llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 149;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x95)
    v1 = 149;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_376[v1];
  v3 = 149 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A5FFE4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::PhiValuesAnalysis>]";
  v10[1] = 103;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x67)
    v1 = 103;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_377[v1];
  v3 = 103 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A6009C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::RegionInfoAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_378[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60154()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::RegionInfoAnalysis>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_379[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A60210()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A60224@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &unk_1EF8F5730, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A60288(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpFunctionAnalysis", 20);
  v7 = v6;
  v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 7uLL)
  {
    *v8 = 0x3C65726975716572;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 8);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "require<", 8uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A6039C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<(anonymous namespace)::No"
                    "OpFunctionAnalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 169;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA9)
    v1 = 169;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_380[v1];
  v3 = 169 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A60454()
{
  return 1;
}

void sub_1C5A60460()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A60474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&unk_1EF8F5730);
}

llvm::raw_ostream *sub_1C5A604D4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpFunctionAnalysis", 20);
  v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 1013281889;
    *(_QWORD *)v8 = *(_QWORD *)"invalidate<";
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "invalidate<", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A605F0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<(anonymous namespace):"
                    ":NoOpFunctionAnalysis>]";
  v10[1] = 123;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x7B)
    v1 = 123;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_381[v1];
  v3 = 123 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A606A8()
{
  return 0;
}

_QWORD *sub_1C5A606B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OptimizationRemarkEmitterAnalysis::Key, a1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5A60718()
{
  return 1;
}

char *sub_1C5A60720()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::OptimizationRemarkE"
                    "mitterAnalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 165;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA5)
    v1 = 165;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_382[v1];
  v3 = 165 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A607D8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::OptimizationRema"
                    "rkEmitterAnalysis>]";
  v10[1] = 119;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x77)
    v1 = 119;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_383[v1];
  v3 = 119 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60890()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ScalarEvolutionAnal"
                    "ysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 155;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9B)
    v1 = 155;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_384[v1];
  v3 = 155 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60948()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ScalarEvolutionAnalysis>]";
  v10[1] = 109;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6D)
    v1 = 109;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_385[v1];
  v3 = 109 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60A00()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ShouldNotRunFunctio"
                    "nPassesAnalysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 166;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xA6)
    v1 = 166;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_386[v1];
  v3 = 166 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60AB8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ShouldNotRunFunc"
                    "tionPassesAnalysis>]";
  v10[1] = 120;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x78)
    v1 = 120;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_387[v1];
  v3 = 120 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60B70()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ShouldRunExtraVecto"
                    "rPasses, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 158;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9E)
    v1 = 158;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_388[v1];
  v3 = 158 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60C28()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ShouldRunExtraVectorPasses>]";
  v10[1] = 112;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70)
    v1 = 112;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_389[v1];
  v3 = 112 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60CE0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::StackSafetyAnalysis"
                    ", llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 151;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x97)
    v1 = 151;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_390[v1];
  v3 = 151 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60D98()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::StackSafetyAnalysis>]";
  v10[1] = 105;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x69)
    v1 = 105;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_391[v1];
  v3 = 105 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60E50()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TargetLibraryAnalys"
                    "is, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 153;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x99)
    v1 = 153;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_392[v1];
  v3 = 153 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60F08()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TargetLibraryAnalysis>]";
  v10[1] = 107;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6B)
    v1 = 107;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_393[v1];
  v3 = 107 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A60FC0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TargetIRAnalysis, l"
                    "lvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 148;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94)
    v1 = 148;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_394[v1];
  v3 = 148 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61078()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TargetIRAnalysis>]";
  v10[1] = 102;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x66)
    v1 = 102;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_395[v1];
  v3 = 102 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61130()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::VerifierAnalysis, l"
                    "lvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 148;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x94)
    v1 = 148;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_396[v1];
  v3 = 148 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A611E8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 159;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F)
    v1 = 159;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_397[v1];
  v3 = 159 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A612A0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DivergenceAnalysis,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_398[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61358()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DivergenceAnalysis>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_399[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61410()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::GPUFunctionAnalysis"
                    ", llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 151;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x97)
    v1 = 151;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_400[v1];
  v3 = 151 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A614C8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::GPUFunctionAnalysis>]";
  v10[1] = 105;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x69)
    v1 = 105;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_401[v1];
  v3 = 105 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61580()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::BasicAA, llvm::Func"
                    "tion, llvm::AnalysisManager<Function>>]";
  v10[1] = 139;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8B)
    v1 = 139;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_402[v1];
  v3 = 139 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61638()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::BasicAA>]";
  v10[1] = 93;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5D)
    v1 = 93;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_403[v1];
  v3 = 93 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A616F0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CFLAndersAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F)
    v1 = 143;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_404[v1];
  v3 = 143 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A617A8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CFLAndersAA>]";
  v10[1] = 97;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61)
    v1 = 97;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_405[v1];
  v3 = 97 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61860()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::CFLSteensAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F)
    v1 = 143;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_406[v1];
  v3 = 143 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61918()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::CFLSteensAA>]";
  v10[1] = 97;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61)
    v1 = 97;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_407[v1];
  v3 = 97 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A619D0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::objcarc::ObjCARCAA,"
                    " llvm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 150;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x96)
    v1 = 150;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_408[v1];
  v3 = 150 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61A88()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::objcarc::ObjCARCAA>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_409[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61B40()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::SCEVAA, llvm::Funct"
                    "ion, llvm::AnalysisManager<Function>>]";
  v10[1] = 138;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8A)
    v1 = 138;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_410[v1];
  v3 = 138 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61BF8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::SCEVAA>]";
  v10[1] = 92;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x5C)
    v1 = 92;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_411[v1];
  v3 = 92 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61CB0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::ScopedNoAliasAA, ll"
                    "vm::Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 147;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x93)
    v1 = 147;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_412[v1];
  v3 = 147 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61D68()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::ScopedNoAliasAA>]";
  v10[1] = 101;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x65)
    v1 = 101;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_413[v1];
  v3 = 101 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61E20()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::TypeBasedAA, llvm::"
                    "Function, llvm::AnalysisManager<Function>>]";
  v10[1] = 143;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F)
    v1 = 143;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_414[v1];
  v3 = 143 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A61ED8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::TypeBasedAA>]";
  v10[1] = 97;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61)
    v1 = 97;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_415[v1];
  v3 = 97 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A61F90(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (result)
  {
    v2 = *(unsigned int *)(result + 296);
    if ((_DWORD)v2)
    {
      v4 = *(_QWORD **)(result + 288);
      v5 = 32 * v2;
      do
      {
        v6 = sub_1C5A55B28();
        v8 = v7;
        v13 = 0;
        v9 = (_QWORD *)operator new();
        *v9 = &unk_1E8138DE8;
        v9[1] = a2;
        v10 = v13;
        v13 = v9;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        v11 = v4[3];
        v12 = v4;
        if ((v11 & 2) == 0)
          v12 = (_QWORD *)*v4;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **))(v11 & 0xFFFFFFFFFFFFFFF8))(v12, v6, v8, &v13);
        result = (uint64_t)v13;
        v13 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_1C5A62078(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (result)
  {
    v3 = *(unsigned int *)(result + 440);
    if ((_DWORD)v3)
    {
      v6 = *(_QWORD **)(result + 432);
      v7 = 32 * v3;
      do
      {
        v8 = sub_1C5A55B28();
        v10 = v9;
        v15 = 0;
        v11 = (_QWORD *)operator new();
        *v11 = &unk_1E8138DE8;
        v11[1] = a2;
        v12 = v15;
        v15 = v11;
        if (v12)
          (*(void (**)(_QWORD *))(*v12 + 8))(v12);
        v13 = v6[3];
        v14 = v6;
        if ((v13 & 2) == 0)
          v14 = (_QWORD *)*v6;
        (*(void (**)(_QWORD *, char *, uint64_t, _QWORD **, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v8, v10, &v15, a3);
        result = (uint64_t)v15;
        v15 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

char *sub_1C5A62170()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RepeatedPass<llvm::PassManager<Loop, LoopAnal"
                    "ysisManager, LoopStandardAnalysisResults &, LPMUpdater &>>]";
  v10[1] = 159;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x9F)
    v1 = 159;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_416[v1];
  v3 = 159 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5A6222C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A62240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A62278(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  size_t v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *result;

  v6 = (const char *)a3(a4, "NoOpLoopNestPass", 16);
  v7 = v5;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v6, v5);
  if (v5)
  {
    result = (llvm::raw_ostream *)memcpy(result, v6, v5);
    *((_QWORD *)a2 + 4) += v7;
  }
  return result;
}

const char *sub_1C5A622F8()
{
  return "NoOpLoopNestPass";
}

uint64_t sub_1C5A62308()
{
  return 0;
}

void sub_1C5A62314()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A62328@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a2, &qword_1EF8F5738, a1, a3);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::raw_ostream *sub_1C5A6238C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpLoopAnalysis", 16);
  v7 = v6;
  v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 7uLL)
  {
    *v8 = 0x3C65726975716572;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 8);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "require<", 8uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A624A0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<(anonymous namespace)::No"
                    "OpLoopAnalysis, llvm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopSt"
                    "andardAnalysisResults &, llvm::LPMUpdater &>]";
  v10[1] = 245;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xF5)
    v1 = 245;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_417[v1];
  v3 = 245 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A62558()
{
  return 0;
}

void sub_1C5A62564()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A62578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4DD7214(a1, (uint64_t)&qword_1EF8F5738);
}

llvm::raw_ostream *sub_1C5A625D8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, const char *, uint64_t), uint64_t a4)
{
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  llvm::raw_ostream *result;

  v5 = (const void *)a3(a4, "NoOpLoopAnalysis", 16);
  v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 1013281889;
    *(_QWORD *)v8 = *(_QWORD *)"invalidate<";
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 11);
    *((_QWORD *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "invalidate<", 0xBuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v5, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v5, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, ">", 1uLL);
  *(_BYTE *)result = 62;
  ++*((_QWORD *)a2 + 4);
  return result;
}

char *sub_1C5A626F4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<(anonymous namespace):"
                    ":NoOpLoopAnalysis>]";
  v10[1] = 119;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x77)
    v1 = 119;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_418[v1];
  v3 = 119 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A627AC()
{
  return 0;
}

char *sub_1C5A627B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::LoopAccessAnalysis,"
                    " llvm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisR"
                    "esults &, llvm::LPMUpdater &>]";
  v10[1] = 230;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xE6)
    v1 = 230;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_419[v1];
  v3 = 230 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A6286C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::LoopAccessAnalysis>]";
  v10[1] = 104;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x68)
    v1 = 104;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_420[v1];
  v3 = 104 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A62924()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::DDGAnalysis, llvm::"
                    "Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisResults "
                    "&, llvm::LPMUpdater &>]";
  v10[1] = 223;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xDF)
    v1 = 223;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_421[v1];
  v3 = 223 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A629DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::DDGAnalysis>]";
  v10[1] = 97;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x61)
    v1 = 97;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_422[v1];
  v3 = 97 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A62A94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::IVUsersAnalysis, ll"
                    "vm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandardAnalysisResu"
                    "lts &, llvm::LPMUpdater &>]";
  v10[1] = 227;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xE3)
    v1 = 227;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_423[v1];
  v3 = 227 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A62B4C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InvalidateAnalysisPass<llvm::IVUsersAnalysis>]";
  v10[1] = 101;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x65)
    v1 = 101;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_424[v1];
  v3 = 101 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A62C04()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::RequireAnalysisPass<llvm::PassInstrumentation"
                    "Analysis, llvm::Loop, llvm::AnalysisManager<Loop, LoopStandardAnalysisResults &>, llvm::LoopStandard"
                    "AnalysisResults &, llvm::LPMUpdater &>]";
  v10[1] = 239;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0xEF)
    v1 = 239;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_425[v1];
  v3 = 239 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A62CBC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LNICMPass]";
  v10[1] = 65;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x41)
    v1 = 65;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_426[v1];
  v3 = 65 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C5A62D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *result;

  v5 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, a1)+ 8);
  result = (_QWORD *)sub_1C5A62DE8(v5, *(_QWORD *)(a1 + 40));
  if (result)
  {
    sub_1C4D916B4(a3, result);
    return (_QWORD *)sub_1C5A62E48((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1C5A62DE8(uint64_t *a1, uint64_t a2)
{
  uint64_t CachedResultImpl;
  uint64_t v3;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*a1, (uint64_t)&llvm::GlobalsAA::Key, a2);
  if (!CachedResultImpl)
    return 0;
  v3 = CachedResultImpl + 8;
  sub_1C4E61040();
  return v3;
}

uint64_t sub_1C5A62E48(uint64_t a1)
{
  unint64_t *v1;
  uint64_t result;
  void *v3;
  void *v4;

  v4 = &llvm::GlobalsAA::Key;
  v3 = &llvm::AAManager::Key;
  v1 = sub_1C5A63038((_DWORD *)(a1 + 8), &v4) + 1;
  result = sub_1C5A62EAC(v1, &v3);
  if ((result & 1) == 0)
    return sub_1C5A62F30((uint64_t)v1, (uint64_t)v3);
  return result;
}

BOOL sub_1C5A62EAC(unint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v4 = *(unint64_t **)(v2 & 0xFFFFFFFFFFFFFFF8);
    v3 = &v4[*(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v3 = &a1[v2 > 7];
    v4 = a1;
  }
  if (v4 != v3)
  {
    while (*v4 != *a2)
    {
      if (++v4 == v3)
      {
        v4 = v3;
        break;
      }
    }
  }
  if ((v2 & 4) != 0)
    v5 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v5 = (uint64_t)&a1[v2 > 7];
  return v4 != (unint64_t *)v5;
}

uint64_t sub_1C5A62F30(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    v8 = (uint64_t *)result;
    if ((v2 & 4) == 0)
    {
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v8 = result | 4;
      v4 = result & 0xFFFFFFFFFFFFFFF8;
      v5 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v5 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFF8, v4 + 16, v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(v4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v3;
      ++*(_DWORD *)(v4 + 8);
      v2 = *v8;
    }
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v7 >= *(_DWORD *)(v6 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a2;
    ++*(_DWORD *)(v6 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

_QWORD *sub_1C5A63038(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DDA7C8((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5A63094(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C5A63094(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 2;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5A63154((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4DDA7C8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5A63154(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[5];

  v2 = a2;
  v17[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 2)
    {
      *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5A632F4(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v17;
  v11 = 1;
  v12 = (_QWORD *)(a1 + 8);
  do
  {
    v13 = v9;
    if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v10 = *v12;
      v15 = v12[1];
      v14 = v12 + 1;
      v10[1] = v15;
      *v14 = 0;
      v10 += 2;
      sub_1C4DDA878(v14);
    }
    v12 = (_QWORD *)(a1 + 8 + 16 * v11);
    v9 = 1;
    v11 = 2;
  }
  while ((v13 & 1) == 0);
  if (v2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C5A632F4(a1, v17, v10);
}

uint64_t sub_1C5A632F4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  v3 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v3 & 1) != 0)
  {
    v4 = (_QWORD *)(result + 8);
    v5 = (_QWORD *)(result + 40);
  }
  else
  {
    v6 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v6)
      goto LABEL_4;
    v4 = *(_QWORD **)(result + 8);
    v5 = &v4[2 * v6];
  }
  do
  {
    *v4 = -4096;
    v4 += 2;
  }
  while (v4 != v5);
LABEL_4:
  if (a2 != a3)
  {
    v7 = a2 + 1;
    do
    {
      v8 = (_DWORD *)result;
      if ((*(v7 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C4DDA7C8(result, v7 - 1, &v12);
        v9 = v12;
        *v12 = *(v7 - 1);
        v9[1] = *v7;
        *v7 = 0;
        *v8 += 2;
        sub_1C4DDA878(v7);
      }
      v10 = v7 + 1;
      v7 += 2;
      result = (uint64_t)v8;
    }
    while (v10 != a3);
  }
  return result;
}

void sub_1C5A633DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BasicAA::Key, a1) + 8);
  v5 = (_QWORD *)operator new();
  *v5 = &unk_1E8134220;
  v5[1] = v4;
  *v4 = a3;
  v19 = v5;
  v6 = *(_QWORD **)(a3 + 16);
  if ((unint64_t)v6 < *(_QWORD *)(a3 + 24))
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  else
  {
    v7 = sub_1C4D80F34((char **)(a3 + 8), &v19);
  }
  *(_QWORD *)(a3 + 16) = v7;
  v9 = *(_QWORD **)(a3 + 40);
  v8 = *(_QWORD *)(a3 + 48);
  if ((unint64_t)v9 < v8)
  {
    *v9 = &llvm::BasicAA::Key;
    v17 = v9 + 1;
  }
  else
  {
    v10 = *(_QWORD **)(a3 + 32);
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = &llvm::BasicAA::Key;
    v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        v18 = *--v9;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      v9 = *(_QWORD **)(a3 + 32);
    }
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v17;
    *(_QWORD *)(a3 + 48) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  *(_QWORD *)(a3 + 40) = v17;
}

void sub_1C5A63540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScopedNoAliasAA::Key, a1) + 8);
  v5 = (_QWORD *)operator new();
  *v5 = &unk_1E8134280;
  v5[1] = v4;
  *v4 = a3;
  v19 = v5;
  v6 = *(_QWORD **)(a3 + 16);
  if ((unint64_t)v6 < *(_QWORD *)(a3 + 24))
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  else
  {
    v7 = sub_1C4D80F34((char **)(a3 + 8), &v19);
  }
  *(_QWORD *)(a3 + 16) = v7;
  v9 = *(_QWORD **)(a3 + 40);
  v8 = *(_QWORD *)(a3 + 48);
  if ((unint64_t)v9 < v8)
  {
    *v9 = &llvm::ScopedNoAliasAA::Key;
    v17 = v9 + 1;
  }
  else
  {
    v10 = *(_QWORD **)(a3 + 32);
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = &llvm::ScopedNoAliasAA::Key;
    v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        v18 = *--v9;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      v9 = *(_QWORD **)(a3 + 32);
    }
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v17;
    *(_QWORD *)(a3 + 48) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  *(_QWORD *)(a3 + 40) = v17;
}

void sub_1C5A636A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TypeBasedAA::Key, a1) + 8);
  v5 = (_QWORD *)operator new();
  *v5 = &unk_1E81342E0;
  v5[1] = v4;
  *v4 = a3;
  v19 = v5;
  v6 = *(_QWORD **)(a3 + 16);
  if ((unint64_t)v6 >= *(_QWORD *)(a3 + 24))
  {
    v7 = sub_1C4D80F34((char **)(a3 + 8), &v19);
  }
  else
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a3 + 16) = v7;
  v9 = *(_QWORD **)(a3 + 40);
  v8 = *(_QWORD *)(a3 + 48);
  if ((unint64_t)v9 < v8)
  {
    *v9 = &llvm::TypeBasedAA::Key;
    v17 = v9 + 1;
  }
  else
  {
    v10 = *(_QWORD **)(a3 + 32);
    v11 = v9 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = &llvm::TypeBasedAA::Key;
    v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        v18 = *--v9;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      v9 = *(_QWORD **)(a3 + 32);
    }
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v17;
    *(_QWORD *)(a3 + 48) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  *(_QWORD *)(a3 + 40) = v17;
}

char *sub_1C5A63808()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InnerAnalysisManagerProxy<CGSCCAnalysisManager, Module>]";
  v10[1] = 111;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x6F)
    v1 = 111;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_427[v1];
  v3 = 111 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

int *sub_1C5A638C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v9;
  unsigned int v10[10];
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v10 = 1;
  for (i = 4; i != 12; i += 4)
    *(_QWORD *)&v10[i - 2] = -4096;
  v4 = (_QWORD *)operator new();
  v11 = v9;
  v12[0] = 1;
  for (j = 2; j != 6; j += 2)
    v12[j - 1] = -4096;
  sub_1C5A639F4(v12, v10);
  v6 = v11;
  *v4 = &off_1E8190428;
  v4[1] = v6;
  v4[2] = 1;
  for (k = 3; k != 7; k += 2)
    v4[k] = -4096;
  sub_1C5A639F4(v4 + 2, (unsigned int *)v12);
  sub_1C5A63C38((int *)v12);
  *a2 = v4;
  return sub_1C5A63C38((int *)v10);
}

_QWORD *sub_1C5A639F4(_QWORD *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v2 = (unsigned int *)result;
  v3 = *a2;
  *a2 = *(_DWORD *)result & 0xFFFFFFFE | *a2 & 1;
  v4 = *((_DWORD *)result + 1);
  *(_DWORD *)result = v3 & 0xFFFFFFFE | *(_DWORD *)result & 1;
  *((_DWORD *)result + 1) = a2[1];
  a2[1] = v4;
  v5 = *a2;
  if ((*(_DWORD *)result & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      v7 = a2;
      goto LABEL_7;
    }
    v17 = 0;
    v18 = 0;
    v19 = result + 1;
    v20 = (int *)(a2 + 2);
    while (1)
    {
      v21 = v17;
      result = &v19[2 * v18];
      v22 = (uint64_t *)&v20[4 * v18];
      v23 = *result;
      v24 = *v22;
      if (*result != -4096 && v23 != -8192 && v24 != -4096 && v24 != -8192)
        break;
      *result = v24;
      *v22 = v23;
      if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v28 = result[1];
        v25 = result + 1;
        v22[1] = v28;
        *v25 = 0;
        goto LABEL_22;
      }
      if ((v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v27 = v22[1];
        v26 = v22 + 1;
        result[1] = v27;
        *v26 = 0;
        v25 = v26;
        goto LABEL_22;
      }
LABEL_23:
      v17 = 1;
      v18 = 1;
      if ((v21 & 1) != 0)
        return result;
    }
    v29 = *(_OWORD *)result;
    result[1] = 0;
    *result = v24;
    sub_1C484FAD8(result + 1, v22 + 1);
    *v22 = v23;
    sub_1C484FAD8(v22 + 1, (uint64_t *)&v29 + 1);
    v25 = (_QWORD *)&v29 + 1;
LABEL_22:
    result = sub_1C4DDA878(v25);
    goto LABEL_23;
  }
  if ((v5 & 1) == 0)
  {
    v6 = result[1];
    result[1] = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v6;
    LODWORD(v6) = *((_DWORD *)result + 4);
    *((_DWORD *)result + 4) = a2[4];
    a2[4] = v6;
    return result;
  }
  v5 = *(_DWORD *)result;
  v7 = (unsigned int *)result;
  v2 = a2;
LABEL_7:
  v8 = 0;
  v9 = 0;
  v10 = v7 + 2;
  v29 = *(_OWORD *)(v7 + 2);
  *v7 = v5 | 1;
  v11 = v2 + 2;
  do
  {
    v12 = v8;
    v13 = &v10[2 * v9];
    result = &v11[v9];
    v14 = *result;
    *v13 = *result;
    if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v16 = result[1];
      v15 = result + 1;
      v13[1] = v16;
      *v15 = 0;
      result = sub_1C4DDA878(v15);
    }
    v8 = 1;
    v9 = 1;
  }
  while ((v12 & 1) == 0);
  *v2 &= ~1u;
  *v11 = v29;
  return result;
}

void sub_1C5A63BF0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8190428;
  sub_1C5A63C38((int *)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A63C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Result::invalidate(a1 + 8, a2, a3, a4);
}

int *sub_1C5A63C38(int *result)
{
  int v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  int *v10;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = result + 2;
    v3 = 2;
  }
  else
  {
    v3 = result[4];
    if (!(_DWORD)v3)
      goto LABEL_7;
    v2 = (int *)*((_QWORD *)result + 1);
  }
  v4 = v2 + 2;
  v5 = 16 * v3;
  do
  {
    v6 = *(v4 - 1);
    if (v6 != -4096 && v6 != -8192)
    {
      v9 = result;
      v7 = v5;
      v8 = v4;
      sub_1C4DDA878(v4);
      v5 = v7;
      v4 = v8;
      result = v9;
    }
    v4 += 2;
    v5 -= 16;
  }
  while (v5);
  v1 = *result;
LABEL_7:
  if ((v1 & 1) == 0)
  {
    v10 = result;
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
    return v10;
  }
  return result;
}

char *sub_1C5A63CD8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<ModuleAnalysisManag"
                    "er, LazyCallGraph::SCC, LazyCallGraph &>]";
  v10[1] = 141;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8D)
    v1 = 141;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_428[v1];
  v3 = 141 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

int *sub_1C5A63D90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v9;
  unsigned int v10[10];
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v10 = 1;
  for (i = 4; i != 12; i += 4)
    *(_QWORD *)&v10[i - 2] = -4096;
  v4 = (_QWORD *)operator new();
  v11 = v9;
  v12[0] = 1;
  for (j = 2; j != 6; j += 2)
    v12[j - 1] = -4096;
  sub_1C5A639F4(v12, v10);
  v6 = v11;
  *v4 = &off_1E8190480;
  v4[1] = v6;
  v4[2] = 1;
  for (k = 3; k != 7; k += 2)
    v4[k] = -4096;
  sub_1C5A639F4(v4 + 2, (unsigned int *)v12);
  sub_1C5A63C38((int *)v12);
  *a2 = v4;
  return sub_1C5A63C38((int *)v10);
}

char *sub_1C5A63EC4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<CGSCCAnalysisManager, Function>]";
  v10[1] = 113;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x71)
    v1 = 113;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_429[v1];
  v3 = 113 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

int *sub_1C5A63F7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v9;
  unsigned int v10[10];
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v10 = 1;
  for (i = 4; i != 12; i += 4)
    *(_QWORD *)&v10[i - 2] = -4096;
  v4 = (_QWORD *)operator new();
  v11 = v9;
  v12[0] = 1;
  for (j = 2; j != 6; j += 2)
    v12[j - 1] = -4096;
  sub_1C5A639F4(v12, v10);
  v6 = v11;
  *v4 = &off_1E81904D8;
  v4[1] = v6;
  v4[2] = 1;
  for (k = 3; k != 7; k += 2)
    v4[k] = -4096;
  sub_1C5A639F4(v4 + 2, (unsigned int *)v12);
  sub_1C5A63C38((int *)v12);
  *a2 = v4;
  return sub_1C5A63C38((int *)v10);
}

void sub_1C5A640B0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81904D8;
  sub_1C5A63C38((int *)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A640F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::invalidate(a1 + 8, a2, a3, a4);
}

char *sub_1C5A640F8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<ModuleAnalysisManager, Function>]";
  v10[1] = 114;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x72)
    v1 = 114;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_430[v1];
  v3 = 114 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A641B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, a2) + 8;
  result = operator new();
  *(_QWORD *)result = &off_1E8190530;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v6;
  *(_BYTE *)(result + 24) = 0;
  *a4 = result;
  return result;
}

void sub_1C5A64224(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = &off_1E8190530;
  v1 = a1[1];
  if (v1)
  {
    v2 = a1[1];
    sub_1C4EA4BEC((_DWORD *)(v1 + 48));
    sub_1C4EA4C40((_DWORD *)(v2 + 24));
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5A6428C(uint64_t a1, _BYTE *a2, void **a3, uint64_t *a4)
{
  return llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Result::invalidate(a1 + 8, a2, a3, a4);
}

char *sub_1C5A64294()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InnerAnalysisManagerProxy<LoopAnalysisManager, Function>]";
  v10[1] = 112;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x70)
    v1 = 112;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_431[v1];
  v3 = 112 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

int *sub_1C5A6434C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t i;
  _QWORD *v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v9;
  unsigned int v10[10];
  uint64_t v11;
  _QWORD v12[6];

  v12[5] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v10 = 1;
  for (i = 4; i != 12; i += 4)
    *(_QWORD *)&v10[i - 2] = -4096;
  v4 = (_QWORD *)operator new();
  v11 = v9;
  v12[0] = 1;
  for (j = 2; j != 6; j += 2)
    v12[j - 1] = -4096;
  sub_1C5A639F4(v12, v10);
  v6 = v11;
  *v4 = &off_1E8190588;
  v4[1] = v6;
  v4[2] = 1;
  for (k = 3; k != 7; k += 2)
    v4[k] = -4096;
  sub_1C5A639F4(v4 + 2, (unsigned int *)v12);
  sub_1C5A63C38((int *)v12);
  *a2 = v4;
  return sub_1C5A63C38((int *)v10);
}

char *sub_1C5A64480()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::OuterAnalysisManagerProxy<FunctionAnalysisMan"
                    "ager, Loop, LoopStandardAnalysisResults &>]";
  v10[1] = 143;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x8F)
    v1 = 143;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_432[v1];
  v3 = 143 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C5A64538(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      result = sub_1C5A5E464((_QWORD *)(v4 + 16), *(_OWORD **)(v6 + 16), *(_OWORD **)(v6 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 3));
      v4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

BOOL sub_1C5A645BC(void **a1, void **a2, uint64_t a3, unsigned int a4)
{
  char v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];
  void **v13[2];
  _QWORD v14[2];
  _DWORD v15[14];
  _OWORD v16[3];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v14[0] = v15;
    v14[1] = 0x600000000;
    v15[12] = 0;
    memset(v16, 0, sizeof(v16));
    v7 = 32 * a4 - 32;
    v8 = (_QWORD *)(a3 + 24);
    do
    {
      v13[0] = a1;
      v13[1] = a2;
      v12[0] = 0;
      v12[1] = 0;
      if (!*v8)
      {
        sub_1C485C2F0();
        goto LABEL_10;
      }
      v4 = (*(uint64_t (**)(_QWORD, void ***, _QWORD *, _QWORD *))(*(_QWORD *)*v8 + 48))(*v8, v13, v14, v12);
      if ((v4 & 1) != 0)
        break;
      v9 = v7;
      v7 -= 32;
      v8 += 4;
    }
    while (v9);
    v13[0] = (void **)&v16[1] + 1;
    sub_1C4764BBC(v13);
    v13[0] = (void **)v16;
    sub_1C4764BBC(v13);
    v10 = (void *)v14[0];
    if ((_DWORD *)v14[0] == v15)
      return (v4 & 1) != 0;
LABEL_10:
    free(v10);
    if ((v4 & 1) != 0)
      return 1;
  }
  return 0;
}

void sub_1C5A646EC(uint64_t a1, unint64_t a2)
{
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v15);
  v4 = v3;
  v5 = *(_QWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = 32 * v6;
    v8 = v3;
    do
    {
      v9 = (_QWORD *)v5[3];
      if (v9)
      {
        if (v5 == v9)
        {
          v8[3] = v8;
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v5[3] + 24))(v5[3], v8);
        }
        else
        {
          v8[3] = v9;
          v5[3] = 0;
        }
      }
      else
      {
        v8[3] = 0;
      }
      v5 += 4;
      v8 += 4;
      v7 -= 32;
    }
    while (v7);
    v5 = *(_QWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 4 * v10;
      while (1)
      {
        v12 = (_QWORD *)v5[v11 - 1];
        if (&v5[v11 - 4] == v12)
          break;
        if (v12)
        {
          v13 = 5;
LABEL_15:
          (*(void (**)(void))(*v12 + 8 * v13))();
        }
        v11 -= 4;
        if (!(v11 * 8))
        {
          v5 = *(_QWORD **)a1;
          goto LABEL_18;
        }
      }
      v12 = &v5[v11 - 4];
      v13 = 4;
      goto LABEL_15;
    }
  }
LABEL_18:
  v14 = v15;
  if (v5 != (_QWORD *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t sub_1C5A64804()
{
  return operator new();
}

uint64_t sub_1C5A64820()
{
  return operator new();
}

_QWORD *sub_1C5A64838@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *result = a2;
  return result;
}

char *sub_1C5A6485C(uint64_t a1, ...)
{
  char **v1;
  va_list va;

  va_start(va, a1);
  return sub_1C4D62F9C(v1, (uint64_t *)va);
}

void sub_1C5A64874(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t sub_1C5A64880@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = result;
  *(_QWORD *)(v2 + 8) = a2 + 1;
  return result;
}

uint64_t sub_1C5A6488C()
{
  return operator new();
}

char *sub_1C5A648AC(uint64_t a1, uint64_t *a2)
{
  char **v2;

  return sub_1C4D62F9C(v2, a2);
}

uint64_t sub_1C5A648B4()
{
  return operator new();
}

uint64_t sub_1C5A648F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t result;

  result = a10;
  *(_QWORD *)(v10 + 80) = a1;
  return result;
}

uint64_t sub_1C5A6490C()
{
  return operator new();
}

uint64_t sub_1C5A64918()
{
  return operator new();
}

_DWORD *sub_1C5A64938(uint64_t a1, int a2)
{
  _DWORD *v2;

  return sub_1C4833580(v2, a2, 0);
}

char *sub_1C5A64944(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return sub_1C4D62F9C((char **)(v1 + 72), (uint64_t *)va);
}

_QWORD *sub_1C5A64950@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *result = a2;
  return result;
}

uint64_t sub_1C5A64974()
{
  return operator new();
}

uint64_t sub_1C5A64980()
{
  return operator new();
}

uint64_t sub_1C5A6498C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = result;
  *(_QWORD *)(v2 + 80) = a2 + 1;
  return result;
}

uint64_t sub_1C5A64998()
{
  return operator new();
}

_QWORD *sub_1C5A649B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1 + 16;
  return v1 + 1;
}

__n128 sub_1C5A649C4()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  return result;
}

uint64_t sub_1C5A649E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t result;

  result = a10;
  *(_QWORD *)(v10 + 104) = a1;
  return result;
}

__n128 sub_1C5A649F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, __n128 a11, uint64_t a12)
{
  uint64_t v12;
  __n128 result;

  *(_QWORD *)a1 = v12 + 16;
  *(_QWORD *)(a1 + 24) = a10;
  *(_OWORD *)(a1 + 8) = a9;
  result = a11;
  *(_QWORD *)(a1 + 48) = a12;
  *(__n128 *)(a1 + 32) = a11;
  return result;
}

uint64_t sub_1C5A64A30()
{
  return 24;
}

__n128 sub_1C5A64A4C()
{
  uint64_t v0;
  __n128 result;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  result = *(__n128 *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_1C5A64A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v2 - 24);
  *(_QWORD *)(v1 + 8) = a1;
  *(_QWORD *)(v2 - 24) = 0;
  return result;
}

uint64_t sub_1C5A64AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t result;

  result = a9;
  *(_QWORD *)(v9 + 8) = a1;
  return result;
}

uint64_t sub_1C5A64AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t result;

  result = a13;
  *(_QWORD *)(v13 + 8) = a1;
  return result;
}

char *sub_1C5A64AD4(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return sub_1C4D62F9C((char **)(v1 + 96), (uint64_t *)va);
}

_DWORD *sub_1C5A64AE0(_DWORD *a1)
{
  return sub_1C630145C(a1, 1);
}

void sub_1C5A64AFC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

void sub_1C5A64B08(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

void sub_1C5A64B14(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = a1;
  *(_QWORD *)(v2 - 24) = 0;
}

uint64_t sub_1C5A64B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v1 + 8) = a1;
  *(_QWORD *)(v2 - 40) = 0;
  return result;
}

uint64_t sub_1C5A64B34()
{
  return 32;
}

uint64_t sub_1C5A64B44()
{
  return operator new();
}

void sub_1C5A64B60(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  *(_QWORD *)(v1 + 8) = a1 + 1;
  *(_QWORD *)(v3 - 40) = 0;
}

_QWORD *sub_1C5A64B70@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return v1 + 1;
}

uint64_t sub_1C5A64BA0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = result;
  *(_QWORD *)(v2 + 104) = a2 + 1;
  return result;
}

__n128 sub_1C5A64BBC(uint64_t a1)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *(__n128 *)(a1 + 8) = *v1;
  *(_QWORD *)(a1 + 24) = v1[1].n128_u64[0];
  return result;
}

uint64_t sub_1C5A64BD0(uint64_t result, __n128 a2, __n128 a3)
{
  *(__n128 *)(result + 8) = a2;
  *(__n128 *)(result + 24) = a3;
  return result;
}

void *sub_1C5A64BDC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

char *sub_1C5A64BE4()
{
  char **v0;
  uint64_t v1;

  return sub_1C4D62F9C(v0, (uint64_t *)(v1 - 40));
}

void *sub_1C5A64BF0(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x4CuLL);
}

uint64_t sub_1C5A64BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v1 + 8) = a1;
  *(_QWORD *)(v2 - 40) = 0;
  return result;
}

uint64_t sub_1C5A64C24()
{
  __int128 v1;

  llvm::Regex::Regex((uint64_t)&unk_1ED81A520, "^(default|thinlto-pre-link|thinlto|lto-pre-link|lto)<(O[0123sz])>$", 66, 0);
  __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ED81A520, &dword_1C475E000);
  *(_QWORD *)&v1 = "Print a '-passes' compatible string describing the pipeline (best-effort only).";
  *((_QWORD *)&v1 + 1) = 79;
  sub_1C6136DA0((llvm::cl::Option *)&llvm::PrintPipelinePasses, "print-pipeline-passes", &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PrintPipelinePasses, &dword_1C475E000);
}

void **LLVMRunPasses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  uint64_t v20[2];
  int v21;
  uint64_t v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27[2];
  int v28;
  uint64_t v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34[2];
  int v35;
  uint64_t v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41[2];
  int v42;
  uint64_t v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48[6];
  char v49;
  __int128 v50;
  int v51;
  void **v52;
  _BYTE v53[696];
  _QWORD v54[249];
  char *v55[2];
  _QWORD v56[18];
  _QWORD v57[18];
  _QWORD v58[18];
  _QWORD v59[18];
  _QWORD v60[18];
  _QWORD v61[18];
  _QWORD v62[18];
  _QWORD v63[18];
  _OWORD v64[9];
  int v65;
  int v66;
  uint64_t v67;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v67 = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE *)v8;
  v10 = *(unsigned __int8 *)(v8 + 1);
  v55[0] = (char *)v56;
  v55[1] = (char *)0x400000000;
  v56[16] = v57;
  v56[17] = 0x400000000;
  v57[16] = v58;
  v57[17] = 0x400000000;
  v58[16] = v59;
  v58[17] = 0x400000000;
  v59[16] = v60;
  v59[17] = 0x400000000;
  v60[16] = v61;
  v60[17] = 0x400000000;
  v61[16] = v62;
  v61[17] = 0x400000000;
  v62[16] = v63;
  v62[17] = 0x400000000;
  v63[16] = v64;
  v63[17] = 0x400000000;
  v64[8] = 0u;
  v65 = 0;
  v66 = 32;
  v50 = *(_OWORD *)(v8 + 4);
  v51 = *(_DWORD *)(v8 + 20);
  LOBYTE(v48[0]) = 0;
  v49 = 0;
  llvm::PassBuilder::PassBuilder((uint64_t)v54, v11, &v50, v48, (uint64_t)v55);
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  llvm::PassBuilder::registerLoopAnalyses((uint64_t)v54, (uint64_t)v41);
  llvm::PassBuilder::registerFunctionAnalyses((uint64_t)v54, v34);
  llvm::PassBuilder::registerCGSCCAnalyses((uint64_t)v54, (uint64_t)v27);
  llvm::PassBuilder::registerModuleAnalyses((uint64_t)v54, v20);
  llvm::PassBuilder::crossRegisterProxies((uint64_t)v54, (uint64_t)v41, v34, (uint64_t)v27, v20);
  llvm::StandardInstrumentations::StandardInstrumentations((uint64_t)v53, v9, v10, 0);
  llvm::StandardInstrumentations::registerCallbacks((uint64_t)v53, (uint64_t)v55, v34);
  memset(v19, 0, sizeof(v19));
  if (v10)
  {
    LOBYTE(v52) = 1;
    sub_1C62B2C28((uint64_t)v19, (char *)&v52);
  }
  if (v6)
    v12 = strlen(v6);
  else
    v12 = 0;
  llvm::PassBuilder::parsePassPipeline(v54, (uint64_t)v19, (uint64_t)v6, v12, (uint64_t *)&v52);
  v13 = v52;
  if (!v52)
  {
    llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run(v19, v7, (uint64_t)v20, (uint64_t)&v15);
    if (v18 != v17)
      free(v18);
    if (v16 != v15)
      free(v16);
  }
  v52 = (void **)v19;
  sub_1C4764BBC(&v52);
  sub_1C62B316C((uint64_t)v53);
  MEMORY[0x1CAA32FB4](v24, 8);
  sub_1C4D8B440(v22);
  sub_1C4D8B52C(v20);
  MEMORY[0x1CAA32FB4](v31, 8);
  sub_1C4D8B440(v29);
  sub_1C4D8B52C(v27);
  MEMORY[0x1CAA32FB4](v38, 8);
  sub_1C4D8B440(v36);
  sub_1C4D8B52C(v34);
  MEMORY[0x1CAA32FB4](v45, 8);
  sub_1C4D8B440(v43);
  sub_1C4D8B52C(v41);
  sub_1C62B2F4C((uint64_t)v54);
  sub_1C58F6F3C(v55);
  return v13;
}

double LLVMCreatePassBuilderOptions()
{
  uint64_t v0;
  double result;
  int v2;

  v0 = operator new();
  *(_QWORD *)&result = 16777473;
  *(_DWORD *)(v0 + 4) = 16777473;
  *(_BYTE *)(v0 + 8) = byte_1ED836110;
  v2 = dword_1ED836050;
  *(_DWORD *)(v0 + 12) = dword_1ED835F90;
  *(_DWORD *)(v0 + 16) = v2;
  *(_BYTE *)(v0 + 20) = 1;
  *(_BYTE *)(v0 + 21) = byte_1ED834CC8;
  *(_BYTE *)(v0 + 22) = byte_1ED834C08;
  *(_WORD *)v0 = 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetVerifyEach(uint64_t result, int a2)
{
  *(_BYTE *)(result + 1) = a2 != 0;
  return result;
}

BOOL *LLVMPassBuilderOptionsSetDebugLogging(BOOL *result, int a2)
{
  *result = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetLoopInterleaving(uint64_t result, int a2)
{
  *(_BYTE *)(result + 4) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetLoopVectorization(uint64_t result, int a2)
{
  *(_BYTE *)(result + 5) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetSLPVectorization(uint64_t result, int a2)
{
  *(_BYTE *)(result + 6) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetLoopUnrolling(uint64_t result, int a2)
{
  *(_BYTE *)(result + 7) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(uint64_t result, int a2)
{
  *(_BYTE *)(result + 8) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetLicmMssaOptCap(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetCallGraphProfile(uint64_t result, int a2)
{
  *(_BYTE *)(result + 20) = a2 != 0;
  return result;
}

uint64_t LLVMPassBuilderOptionsSetMergeFunctions(uint64_t result, int a2)
{
  *(_BYTE *)(result + 21) = a2 != 0;
  return result;
}

uint64_t LLVMDisposePassBuilderOptions(uint64_t result)
{
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

double llvm::PipelineTuningOptions::PipelineTuningOptions(llvm::PipelineTuningOptions *this)
{
  double result;
  int v2;

  *(_QWORD *)&result = 16777473;
  *(_DWORD *)this = 16777473;
  *((_BYTE *)this + 4) = byte_1ED836110;
  v2 = dword_1ED836050;
  *((_DWORD *)this + 2) = dword_1ED835F90;
  *((_DWORD *)this + 3) = v2;
  *((_BYTE *)this + 16) = 1;
  *((_BYTE *)this + 17) = byte_1ED834CC8;
  *((_BYTE *)this + 18) = byte_1ED834C08;
  return result;
}

{
  double result;
  int v2;

  *(_QWORD *)&result = 16777473;
  *(_DWORD *)this = 16777473;
  *((_BYTE *)this + 4) = byte_1ED836110;
  v2 = dword_1ED836050;
  *((_DWORD *)this + 2) = dword_1ED835F90;
  *((_DWORD *)this + 3) = v2;
  *((_BYTE *)this + 16) = 1;
  *((_BYTE *)this + 17) = byte_1ED834CC8;
  *((_BYTE *)this + 18) = byte_1ED834C08;
  return result;
}

void llvm::PassBuilder::buildO1FunctionSimplificationPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t i;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void **v41;
  void *v42[2];
  _DWORD v43[14];
  _OWORD v44[3];
  void *v45[2];
  _DWORD v46[14];
  _OWORD v47[3];
  __n128 v48;
  _QWORD v49[4];
  _BYTE *v50;
  int v51;
  _BYTE v52[128];
  _BYTE *v53;
  int v54;
  _BYTE v55[192];
  __int128 v56;
  int v57;
  _BYTE *v58;
  int v59;
  _BYTE v60[128];
  __int128 v61;
  _BYTE v62[28];
  _BYTE *v63;
  int v64;
  _BYTE v65[16];
  __int128 v66;
  int v67;
  _BYTE *v68;
  int v69;
  _BYTE v70[1376];
  __int128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[128];
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)a4 = 0u;
  bzero(&v48, 0x2C0uLL);
  v50 = v52;
  v51 = 16;
  v53 = v55;
  v56 = 0u;
  v54 = 8;
  v57 = 0;
  v58 = v60;
  v59 = 16;
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  v63 = v65;
  v64 = 2;
  v66 = 0u;
  v67 = 0;
  v68 = v70;
  v69 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)&v48);
  v48.n128_u8[0] = 1;
  sub_1C62E8DAC();
  v48.n128_u64[0] = 0x100010000000001;
  v48.n128_u64[1] = 16842752;
  v49[0] = 0;
  sub_1C5C48FA4((uint64_t)&v48);
  sub_1C5A49B48();
  v48.n128_u64[0] = (unint64_t)v49;
  v48.n128_u64[1] = 0x10000000000;
  v71 = 0u;
  v72 = 0;
  v73 = 1;
  v8 = 2096;
  v9 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v48 + v8) = v9;
    v8 += 16;
  }
  while (v8 != 2224);
  v75 = v77;
  v76 = 0x1000000000;
  v78 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v75 != v77)
    free(v75);
  if ((v73 & 1) == 0)
    MEMORY[0x1CAA32FB4](v74, 8);
  MEMORY[0x1CAA32FB4](v71, 8);
  if ((_QWORD *)v48.n128_u64[0] != v49)
    free((void *)v48.n128_u64[0]);
  sub_1C62E6FF4();
  v10 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    while (1)
    {
      v48.n128_u64[0] = a2;
      if (!*v12)
        break;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v12 + 48))(*v12, a4, &v48);
      v12 += 4;
      v11 -= 32;
      if (!v11)
        goto LABEL_13;
    }
LABEL_76:
    sub_1C485C2F0();
  }
LABEL_13:
  v48.n128_u64[0] = 0x100010000000001;
  v48.n128_u64[1] = 16842752;
  v49[0] = 0;
  sub_1C5C48FA4((uint64_t)&v48);
  sub_1C5A49B48();
  bzero(&v48, 0x230uLL);
  for (i = 120; i != 552; i += 24)
  {
    v14 = (char *)&v48 + i;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_DWORD *)v14 + 4) = 0;
  }
  sub_1C62E82B4();
  sub_1C5A55684(&v48);
  v45[0] = v46;
  v45[1] = (void *)0x600000000;
  v46[12] = 0;
  memset(v47, 0, sizeof(v47));
  v42[0] = v43;
  v42[1] = (void *)0x600000000;
  v43[12] = 0;
  memset(v44, 0, sizeof(v44));
  sub_1C62E9858();
  sub_1C62E9994();
  v48.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v48.n128_u32[2] = 0;
  sub_1C62E9F60();
  v48.n128_u8[0] = 1;
  v48.n128_u8[1] = (a3 & 0xFFFFFFFD) == 1;
  sub_1C62E98B8((uint64_t)v45, (__int16 *)&v48);
  v48.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v48.n128_u32[2] = 1;
  sub_1C62E9F60();
  v48.n128_u16[0] = 256;
  sub_1C62E9EE8((uint64_t)v45, (__int16 *)&v48);
  if (byte_1ED832338)
    sub_1C62E932C(v45);
  sub_1C62E97FC();
  v48.n128_u8[0] = 1;
  sub_1C62E9A4C((uint64_t)v42, (char *)&v48);
  v15 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 24);
    do
    {
      v48.n128_u64[0] = a2;
      if (!*v17)
        goto LABEL_76;
      (*(void (**)(_QWORD, void **, __n128 *))(*(_QWORD *)*v17 + 48))(*v17, v42, &v48);
      v17 += 4;
      v16 -= 32;
    }
    while (v16);
  }
  sub_1C62E9934();
  if (byte_1ED8321B8)
    sub_1C62E937C(v42);
  if (a3 != 1 || !*(_BYTE *)(a1 + 128) || *(_DWORD *)(a1 + 104) != 3)
  {
    v18 = *(_BYTE *)(a1 + 12);
    v19 = *(_BYTE *)(a1 + 11) ^ 1;
    v48.n128_u32[0] = a2;
    v48.n128_u8[4] = v19;
    v48.n128_u8[5] = v18;
    sub_1C62E9AC8((uint64_t)v42, (uint64_t *)&v48);
  }
  v20 = *(unsigned int *)(a1 + 312);
  if ((_DWORD)v20)
  {
    v21 = 32 * v20;
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 304) + 24);
    do
    {
      v48.n128_u64[0] = a2;
      if (!*v22)
        goto LABEL_76;
      (*(void (**)(_QWORD, void **, __n128 *))(*(_QWORD *)*v22 + 48))(*v22, v42, &v48);
      v22 += 4;
      v21 -= 32;
    }
    while (v21);
  }
  sub_1C62E5A3C();
  sub_1C62E4F10((uint64_t)v45, 1, 1, 0, (uint64_t)&v48);
  sub_1C62E4E40(a4, &v48);
  v41 = (void **)&v48.n128_u64[1];
  sub_1C4764BBC(&v41);
  v23 = v48.n128_u64[0];
  v48.n128_u64[0] = 0;
  if (v23)
    (*(void (**)(unint64_t))(*(_QWORD *)v23 + 8))(v23);
  v48.n128_u64[0] = 0x100010000000001;
  v48.n128_u64[1] = 16842752;
  v49[0] = 0;
  sub_1C5C48FA4((uint64_t)&v48);
  sub_1C5A49B48();
  v48.n128_u64[0] = (unint64_t)v49;
  v48.n128_u64[1] = 0x10000000000;
  v71 = 0u;
  v72 = 0;
  v73 = 1;
  v24 = 2096;
  v25 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v48 + v24) = v25;
    v24 += 16;
  }
  while (v24 != 2224);
  v75 = v77;
  v76 = 0x1000000000;
  v78 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v75 != v77)
    free(v75);
  if ((v73 & 1) == 0)
    MEMORY[0x1CAA32FB4](v74, 8);
  MEMORY[0x1CAA32FB4](v71, 8);
  if ((_QWORD *)v48.n128_u64[0] != v49)
    free((void *)v48.n128_u64[0]);
  sub_1C62E4F10((uint64_t)v42, 0, 0, 0, (uint64_t)&v48);
  sub_1C62E4E40(a4, &v48);
  v41 = (void **)&v48.n128_u64[1];
  sub_1C4764BBC(&v41);
  v26 = v48.n128_u64[0];
  v48.n128_u64[0] = 0;
  if (v26)
    (*(void (**)(unint64_t))(*(_QWORD *)v26 + 8))(v26);
  bzero(&v48, 0x2C0uLL);
  v50 = v52;
  v51 = 16;
  v53 = v55;
  v56 = 0u;
  v54 = 8;
  v57 = 0;
  v58 = v60;
  v59 = 16;
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  v63 = v65;
  v64 = 2;
  v66 = 0u;
  v67 = 0;
  v68 = v70;
  v69 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)&v48);
  memset(v49, 0, sizeof(v49));
  v48 = 0u;
  sub_1C62E745C(a4, (uint64_t)&v48);
  sub_1C62E84B4();
  sub_1C62E66B0();
  v48.n128_u64[0] = (unint64_t)v49;
  v48.n128_u64[1] = 0x10000000000;
  v71 = 0u;
  v72 = 0;
  v73 = 1;
  v27 = 2096;
  v28 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v48 + v27) = v28;
    v27 += 16;
  }
  while (v27 != 2224);
  v75 = v77;
  v76 = 0x1000000000;
  v78 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v75 != v77)
    free(v75);
  if ((v73 & 1) == 0)
    MEMORY[0x1CAA32FB4](v74, 8);
  MEMORY[0x1CAA32FB4](v71, 8);
  if ((_QWORD *)v48.n128_u64[0] != v49)
    free((void *)v48.n128_u64[0]);
  v29 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    v31 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      v48.n128_u64[0] = a2;
      if (!*v31)
        goto LABEL_76;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v31 + 48))(*v31, a4, &v48);
      v31 += 4;
      v30 -= 32;
    }
    while (v30);
  }
  sub_1C62E6924();
  v32 = *(unsigned int *)(a1 + 392);
  if ((_DWORD)v32)
  {
    v33 = 32 * v32;
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 24);
    do
    {
      v48.n128_u64[0] = a2;
      if (!*v34)
        goto LABEL_76;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v34 + 48))(*v34, a4, &v48);
      v34 += 4;
      v33 -= 32;
    }
    while (v33);
  }
  sub_1C62E64A0();
  v48.n128_u64[0] = 0x100010000000001;
  v48.n128_u64[1] = 16842752;
  v49[0] = 0;
  sub_1C5C48FA4((uint64_t)&v48);
  sub_1C5A49B48();
  v48.n128_u64[0] = (unint64_t)v49;
  v48.n128_u64[1] = 0x10000000000;
  v71 = 0u;
  v72 = 0;
  v73 = 1;
  v35 = 2096;
  v36 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v48 + v35) = v36;
    v35 += 16;
  }
  while (v35 != 2224);
  v75 = v77;
  v76 = 0x1000000000;
  v78 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v75 != v77)
    free(v75);
  if ((v73 & 1) == 0)
    MEMORY[0x1CAA32FB4](v74, 8);
  MEMORY[0x1CAA32FB4](v71, 8);
  if ((_QWORD *)v48.n128_u64[0] != v49)
    free((void *)v48.n128_u64[0]);
  v37 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v37)
  {
    v38 = *(_QWORD *)(a1 + 144);
    v39 = 32 * v37;
    v40 = (_QWORD *)(v38 + 24);
    do
    {
      v48.n128_u64[0] = a2;
      if (!*v40)
        goto LABEL_76;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v40 + 48))(*v40, a4, &v48);
      v40 += 4;
      v39 -= 32;
    }
    while (v39);
  }
  v48.n128_u64[0] = (unint64_t)&v44[1] + 8;
  sub_1C4764BBC((void ***)&v48);
  v48.n128_u64[0] = (unint64_t)v44;
  sub_1C4764BBC((void ***)&v48);
  if (v42[0] != v43)
    free(v42[0]);
  v48.n128_u64[0] = (unint64_t)&v47[1] + 8;
  sub_1C4764BBC((void ***)&v48);
  v48.n128_u64[0] = (unint64_t)v47;
  sub_1C4764BBC((void ***)&v48);
  if (v45[0] != v46)
    free(v45[0]);
}

void llvm::PassBuilder::buildFunctionSimplificationPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __n128 v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  char *v16;
  BOOL v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  void **v49;
  int v50;
  void **v51;
  void *v52[2];
  _DWORD v53[14];
  _OWORD v54[3];
  void *v55[2];
  _DWORD v56[14];
  _OWORD v57[3];
  __n128 v58;
  __int128 v59;
  _BYTE v60[24];
  __int16 v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE v65[112];
  __int128 **v66;
  int v67;
  __int128 *v68;
  __int128 v69;
  int v70;
  char v71;
  __int128 v72;
  int v73;
  _BYTE *v74;
  int v75;
  _BYTE v76[128];
  __int128 v77;
  _BYTE v78[28];
  _BYTE *v79;
  int v80;
  _BYTE v81[16];
  __int128 v82;
  int v83;
  _BYTE *v84;
  int v85;
  _BYTE v86[1376];
  __int128 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _BYTE v93[128];
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 1)
  {
    llvm::PassBuilder::buildO1FunctionSimplificationPipeline(a1, a2, a3, a4);
    return;
  }
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)a4 = 0u;
  bzero(&v58, 0x2C0uLL);
  *(_QWORD *)&v60[16] = &v63;
  v62 = 16;
  v66 = &v68;
  v72 = 0u;
  v67 = 8;
  v73 = 0;
  v74 = v76;
  v75 = 16;
  v77 = 0u;
  memset(v78, 0, sizeof(v78));
  v79 = v81;
  v80 = 2;
  v82 = 0u;
  v83 = 0;
  v84 = v86;
  v85 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)&v58);
  v58.n128_u8[0] = 1;
  sub_1C62E8DAC();
  if (byte_1ED837140)
    sub_1C62E65BC();
  if (byte_1ED8327B8)
    sub_1C62E6CF4();
  if (byte_1ED832878)
  {
    sub_1C62E6D3C();
    v58.n128_u64[0] = 0x100010000000001;
    v58.n128_u64[1] = 16842752;
    *(_QWORD *)&v59 = 0;
    sub_1C5C48FA4((uint64_t)&v58);
    sub_1C5A49B48();
  }
  v58.n128_u8[0] = 1;
  v58.n128_u64[1] = 0;
  sub_1C62E870C();
  v61 = 0;
  *(_OWORD *)&v60[8] = 0u;
  v63 = v65;
  v64 = 0x1000000000;
  v69 = 0u;
  v68 = &v69;
  v71 = byte_1ED835ED0;
  v70 = dword_1ED835E10;
  sub_1C62E7664();
  sub_1C62EA844((uint64_t)&v58);
  sub_1C62E69B4();
  v58.n128_u64[0] = 0x100010000000001;
  v58.n128_u64[1] = 16842752;
  *(_QWORD *)&v59 = 0;
  sub_1C5C48FA4((uint64_t)&v58);
  sub_1C5A49B48();
  v58.n128_u64[0] = (unint64_t)&v59;
  v58.n128_u64[1] = 0x10000000000;
  v87 = 0u;
  v88 = 0;
  v89 = 1;
  v8 = 2096;
  v9 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v58 + v8) = v9;
    v8 += 16;
  }
  while (v8 != 2224);
  v91 = v93;
  v92 = 0x1000000000;
  v94 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v91 != v93)
    free(v91);
  if ((v89 & 1) == 0)
    MEMORY[0x1CAA32FB4](v90, 8);
  MEMORY[0x1CAA32FB4](v87, 8);
  if ((__int128 *)v58.n128_u64[0] != &v59)
    free((void *)v58.n128_u64[0]);
  v10 = (_DWORD)a2 == 3 && HIDWORD(a2) == 0;
  v11 = v10;
  if (v10)
    sub_1C62E6530();
  if (byte_1ED832C38)
    sub_1C62E6894();
  if (!HIDWORD(a2))
    sub_1C62E6FF4();
  v12 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v12)
  {
    v13 = 32 * v12;
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    while (1)
    {
      v58.n128_u64[0] = a2;
      if (!*v14)
        break;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v14 + 48))(*v14, a4, &v58);
      v14 += 4;
      v13 -= 32;
      if (!v13)
        goto LABEL_34;
    }
LABEL_128:
    sub_1C485C2F0();
  }
LABEL_34:
  if (*(_BYTE *)(a1 + 128) && !HIDWORD(a2) && *(_DWORD *)(a1 + 104) == 2)
    sub_1C62E7A68();
  sub_1C62E88A4();
  v58.n128_u64[0] = 0x100010000000001;
  v58.n128_u64[1] = 16842752;
  *(_QWORD *)&v59 = 0;
  sub_1C5C48FA4((uint64_t)&v58);
  sub_1C5A49B48();
  bzero(&v58, 0x230uLL);
  for (i = 120; i != 552; i += 24)
  {
    v16 = (char *)&v58 + i;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_DWORD *)v16 + 4) = 0;
  }
  sub_1C62E82B4();
  sub_1C5A55684(&v58);
  v55[0] = v56;
  v55[1] = (void *)0x600000000;
  v56[12] = 0;
  memset(v57, 0, sizeof(v57));
  v52[0] = v53;
  v52[1] = (void *)0x600000000;
  v53[12] = 0;
  memset(v54, 0, sizeof(v54));
  sub_1C62E9858();
  sub_1C62E9994();
  v58.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v58.n128_u32[2] = 0;
  sub_1C62E9F60();
  v18 = (_DWORD)a2 != 2 || HIDWORD(a2) != 2;
  v58.n128_u8[0] = v18;
  v58.n128_u8[1] = (a3 & 0xFFFFFFFD) == 1;
  sub_1C62E98B8((uint64_t)v55, (__int16 *)&v58);
  v58.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v58.n128_u32[2] = 1;
  sub_1C62E9F60();
  v19 = 0;
  if (v11)
    v19 = byte_1ED81A970 != 0;
  v20 = v11;
  v58.n128_u8[0] = v19;
  v58.n128_u8[1] = 1;
  sub_1C62E9EE8((uint64_t)v55, (__int16 *)&v58);
  if (byte_1ED832338)
    sub_1C62E932C(v55);
  sub_1C62E97FC();
  v58.n128_u8[0] = 1;
  sub_1C62E9A4C((uint64_t)v52, (char *)&v58);
  v21 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    v23 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 24);
    do
    {
      v58.n128_u64[0] = a2;
      if (!*v23)
        goto LABEL_128;
      (*(void (**)(_QWORD, void **, __n128 *))(*(_QWORD *)*v23 + 48))(*v23, v52, &v58);
      v23 += 4;
      v22 -= 32;
    }
    while (v22);
  }
  sub_1C62E9934();
  if (byte_1ED8321B8)
    sub_1C62E937C(v52);
  if (a3 != 1 || !*(_BYTE *)(a1 + 128) || *(_DWORD *)(a1 + 104) != 3)
  {
    v24 = *(_BYTE *)(a1 + 12);
    v25 = *(_BYTE *)(a1 + 11) ^ 1;
    v58.n128_u32[0] = a2;
    v58.n128_u8[4] = v25;
    v58.n128_u8[5] = v24;
    sub_1C62E9AC8((uint64_t)v52, (uint64_t *)&v58);
  }
  v26 = *(unsigned int *)(a1 + 312);
  v27 = v20;
  if ((_DWORD)v26)
  {
    v28 = 32 * v26;
    v29 = (_QWORD *)(*(_QWORD *)(a1 + 304) + 24);
    do
    {
      v58.n128_u64[0] = a2;
      if (!*v29)
        goto LABEL_128;
      (*(void (**)(_QWORD, void **, __n128 *))(*(_QWORD *)*v29 + 48))(*v29, v52, &v58);
      v29 += 4;
      v28 -= 32;
    }
    while (v28);
  }
  sub_1C62E5A3C();
  sub_1C62E4F10((uint64_t)v55, 1, 1, 0, (uint64_t)&v58);
  sub_1C62E4E40(a4, &v58);
  v49 = (void **)&v58.n128_u64[1];
  sub_1C4764BBC(&v49);
  v30 = v58.n128_u64[0];
  v58.n128_u64[0] = 0;
  if (v30)
    (*(void (**)(unint64_t))(*(_QWORD *)v30 + 8))(v30);
  v58.n128_u64[0] = 0x100010000000001;
  v58.n128_u64[1] = 16842752;
  *(_QWORD *)&v59 = 0;
  sub_1C5C48FA4((uint64_t)&v58);
  sub_1C5A49B48();
  v58.n128_u64[0] = (unint64_t)&v59;
  v58.n128_u64[1] = 0x10000000000;
  v87 = 0u;
  v88 = 0;
  v89 = 1;
  v31 = 2096;
  v32 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v58 + v31) = v32;
    v31 += 16;
  }
  while (v31 != 2224);
  v91 = v93;
  v92 = 0x1000000000;
  v94 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v91 != v93)
    free(v91);
  if ((v89 & 1) == 0)
    MEMORY[0x1CAA32FB4](v90, 8);
  MEMORY[0x1CAA32FB4](v87, 8);
  if ((__int128 *)v58.n128_u64[0] != &v59)
    free((void *)v58.n128_u64[0]);
  sub_1C62E4F10((uint64_t)v52, 0, 0, 0, (uint64_t)&v58);
  sub_1C62E4E40(a4, &v58);
  v49 = (void **)&v58.n128_u64[1];
  sub_1C4764BBC(&v49);
  v33 = v58.n128_u64[0];
  v58.n128_u64[0] = 0;
  if (v33)
    (*(void (**)(unint64_t))(*(_QWORD *)v33 + 8))(v33);
  bzero(&v58, 0x2C0uLL);
  *(_QWORD *)&v60[16] = &v63;
  v62 = 16;
  v66 = &v68;
  v72 = 0u;
  v67 = 8;
  v73 = 0;
  v74 = v76;
  v75 = 16;
  v77 = 0u;
  memset(v78, 0, sizeof(v78));
  v79 = v81;
  v80 = 2;
  v82 = 0u;
  v83 = 0;
  v84 = v86;
  v85 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)&v58);
  if (byte_1ED832B78)
  {
    v58.n128_u8[0] = 1;
    sub_1C62E8934();
  }
  v58.n128_u8[0] = 0;
  sub_1C62E8FF4();
  if (byte_1ED8320F8)
  {
    sub_1C62E761C();
  }
  else
  {
    sub_1C62EA96C((uint64_t)&v58, 0, 0);
    sub_1C62E9048();
    sub_1C5A55A68((uint64_t)&v58);
  }
  sub_1C62E84B4();
  if (byte_1ED832C38)
    sub_1C62E6894();
  sub_1C62E66B0();
  v58.n128_u64[0] = (unint64_t)&v59;
  v58.n128_u64[1] = 0x10000000000;
  v87 = 0u;
  v88 = 0;
  v89 = 1;
  v34 = 2096;
  v35 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v58 + v34) = v35;
    v34 += 16;
  }
  while (v34 != 2224);
  v91 = v93;
  v92 = 0x1000000000;
  v94 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v91 != v93)
    free(v91);
  if ((v89 & 1) == 0)
    MEMORY[0x1CAA32FB4](v90, 8);
  MEMORY[0x1CAA32FB4](v87, 8);
  if ((__int128 *)v58.n128_u64[0] != &v59)
    free((void *)v58.n128_u64[0]);
  v36 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v36)
  {
    v37 = 32 * v36;
    v38 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      v58.n128_u64[0] = a2;
      if (!*v38)
        goto LABEL_128;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v38 + 48))(*v38, a4, &v58);
      v38 += 4;
      v37 -= 32;
    }
    while (v37);
  }
  if (!HIDWORD(a2) && byte_1ED8323F8)
    sub_1C62E6A40();
  *(_QWORD *)&v60[8] = 0;
  *(_QWORD *)&v60[16] = 0;
  v61 = 0;
  v63 = v65;
  v64 = 0x1000000000;
  v69 = 0uLL;
  v68 = &v69;
  v71 = byte_1ED835ED0;
  v70 = dword_1ED835E10;
  sub_1C62E7664();
  sub_1C62EA844((uint64_t)&v58);
  sub_1C62E69B4();
  sub_1C62E64A0();
  v59 = 0u;
  *(_OWORD *)v60 = 0u;
  v58 = 0u;
  sub_1C62E745C(a4, (uint64_t)&v58);
  sub_1C62E6AD0();
  v49 = *(void ***)(a1 + 16);
  v50 = 1;
  sub_1C62E42D0((uint64_t *)&v49, 1, 1, 0, (uint64_t)&v58);
  sub_1C62E4E40(a4, &v58);
  v51 = (void **)&v58.n128_u64[1];
  sub_1C4764BBC(&v51);
  v39 = v58.n128_u64[0];
  v58.n128_u64[0] = 0;
  if (v39)
    (*(void (**)(unint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_1C62E6924();
  v40 = *(unsigned int *)(a1 + 392);
  if ((_DWORD)v40)
  {
    v41 = 32 * v40;
    v42 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 24);
    do
    {
      v58.n128_u64[0] = a2;
      if (!*v42)
        goto LABEL_128;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v42 + 48))(*v42, a4, &v58);
      v42 += 4;
      v41 -= 32;
    }
    while (v41);
  }
  v58.n128_u64[0] = 0x100010000000001;
  v58.n128_u64[1] = 16843009;
  *(_QWORD *)&v59 = 0;
  sub_1C5C48FA4((uint64_t)&v58);
  sub_1C5A49B48();
  v58.n128_u64[0] = (unint64_t)&v59;
  v58.n128_u64[1] = 0x10000000000;
  v87 = 0u;
  v88 = 0;
  v89 = 1;
  v43 = 2096;
  v44 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v58 + v43) = v44;
    v43 += 16;
  }
  while (v43 != 2224);
  v91 = v93;
  v92 = 0x1000000000;
  v94 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v91 != v93)
    free(v91);
  if ((v89 & 1) == 0)
    MEMORY[0x1CAA32FB4](v90, 8);
  MEMORY[0x1CAA32FB4](v87, 8);
  if ((__int128 *)v58.n128_u64[0] != &v59)
    free((void *)v58.n128_u64[0]);
  v45 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v45)
  {
    v46 = 32 * v45;
    v47 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      v58.n128_u64[0] = a2;
      if (!*v47)
        goto LABEL_128;
      (*(void (**)(_QWORD, uint64_t, __n128 *))(*(_QWORD *)*v47 + 48))(*v47, a4, &v58);
      v47 += 4;
      v46 -= 32;
    }
    while (v46);
  }
  if (byte_1ED832938)
    v48 = v27;
  else
    v48 = 0;
  if ((v48 & 1) != 0 && *(_BYTE *)(a1 + 128) && (*(_DWORD *)(a1 + 104) & 0xFFFFFFFE) == 2)
  {
    sub_1C5872960();
    sub_1C62E68DC();
  }
  v58.n128_u64[0] = (unint64_t)&v54[1] + 8;
  sub_1C4764BBC((void ***)&v58);
  v58.n128_u64[0] = (unint64_t)v54;
  sub_1C4764BBC((void ***)&v58);
  if (v52[0] != v53)
    free(v52[0]);
  v58.n128_u64[0] = (unint64_t)&v57[1] + 8;
  sub_1C4764BBC((void ***)&v58);
  v58.n128_u64[0] = (unint64_t)v57;
  sub_1C4764BBC((void ***)&v58);
  if (v55[0] != v56)
    free(v55[0]);
}

void llvm::PassBuilder::addRequiredLTOPreLinkPasses()
{
  sub_1C62E13E0();
  sub_1C62E1DA0();
}

void llvm::PassBuilder::addPGOInstrPasses(uint64_t a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t *v8;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  __int16 v43;
  uint64_t v44;
  void *__p[2];
  uint64_t v46;
  void *__dst[2];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _DWORD v51[2];
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  int v65;
  char v66;
  char v67;
  uint64_t v68;
  std::string v69[3];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[4];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  _BYTE v96[24];
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  _BYTE v101[176];
  _OWORD *v102;
  int v103;
  _OWORD v104[2];
  int v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  _DWORD v115[34];
  uint64_t v116;

  v8 = a8;
  v116 = *MEMORY[0x1E0C80C00];
  v15 = HIDWORD(a3);
  if ((a5 & 1) == 0 && !byte_1ED832638)
  {
    v41 = a4;
    v40 = HIDWORD(a3);
    if (HIDWORD(a3))
      v16 = dword_1ED8326F8;
    else
      v16 = 325;
    v51[0] = dword_1ED8326F8;
    v51[1] = v16;
    v52 = 1;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 1;
    llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass((uint64_t)&v68, (uint64_t)v51, 1, 0, 0);
    v50 = 0;
    v49 = 0u;
    bzero(&v73, 0x2C0uLL);
    *((_QWORD *)&v76 + 1) = &v77[1];
    HIDWORD(v77[0]) = 16;
    *((_QWORD *)&v84 + 1) = &v85[1];
    HIDWORD(v85[0]) = 8;
    v98 = 0u;
    LODWORD(v99) = 0;
    *(_QWORD *)&v100 = v101;
    HIDWORD(v100) = 16;
    memset(&v101[128], 0, 44);
    v102 = v104;
    v103 = 2;
    v104[1] = 0u;
    v105 = 0;
    v106 = &v108;
    v107 = 2;
    sub_1C62E8770();
    sub_1C5A55934((uint64_t)&v73);
    LOBYTE(v73) = 0;
    sub_1C62E8DAC();
    *(_QWORD *)&v73 = 0x100010000000001;
    *((_QWORD *)&v73 + 1) = 16842752;
    v74 = 0;
    sub_1C5C48FA4((uint64_t)&v73);
    sub_1C5A49B48();
    *(_QWORD *)&v73 = &v74;
    *((_QWORD *)&v73 + 1) = 0x10000000000;
    v109 = 0u;
    v110 = 0;
    v111 = 1;
    v17 = 2096;
    v18 = (__int128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__int128 *)((char *)&v73 + v17) = v18;
      v17 += 16;
    }
    while (v17 != 2224);
    v113 = v115;
    v114 = 0x1000000000;
    v115[32] = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v113 != v115)
      free(v113);
    if ((v111 & 1) == 0)
      MEMORY[0x1CAA32FB4](v112, 8);
    MEMORY[0x1CAA32FB4](v109, 8);
    if ((uint64_t *)v73 != &v74)
      free((void *)v73);
    v19 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v19)
    {
      v20 = 32 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
      do
      {
        *(_QWORD *)&v73 = a3;
        if (!*v21)
          sub_1C485C2F0();
        (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v21 + 48))(*v21, &v49, &v73);
        v21 += 4;
        v20 -= 32;
      }
      while (v20);
    }
    sub_1C5A43D24(&v49, *(_BYTE *)(a1 + 26), 0, (uint64_t)&v73);
    sub_1C62E4494();
    v22 = v73;
    *(_QWORD *)&v73 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    sub_1C62E18E0();
    v100 = 0u;
    *(_OWORD *)&v96[8] = 0u;
    v94 = 1065353216;
    v89 = 0;
    v91 = 0u;
    v88 = 0u;
    v87 = 0u;
    v86 = 0u;
    memset(v85, 0, sizeof(v85));
    v84 = 0u;
    v83 = 0u;
    v82 = 0u;
    v81 = 0u;
    v80 = 0u;
    v79 = 0u;
    v78 = 0u;
    memset(v77, 0, sizeof(v77));
    v76 = 0u;
    v75 = 0u;
    *(_QWORD *)&v73 = (char *)&v75 + 8;
    *((_QWORD *)&v73 + 1) = (char *)&v75 + 8;
    v74 = 32;
    v90 = 0;
    *(_QWORD *)&v91 = 0;
    DWORD2(v91) = 0;
    v92 = 0u;
    v93 = 0u;
    v95 = 0u;
    *(_OWORD *)v96 = 0u;
    *(_DWORD *)&v96[16] = 1065353216;
    v97 = 0;
    v98 = 0uLL;
    v99 = 0;
    *(_QWORD *)&v100 = 0;
    DWORD2(v100) = 0;
    sub_1C5A3BF08();
    sub_1C56E07A8((uint64_t)&v73);
    *(_QWORD *)&v73 = &v49;
    sub_1C4764BBC((void ***)&v73);
    *(_QWORD *)&v73 = &v72;
    sub_1C4764BBC((void ***)&v73);
    *(_QWORD *)&v73 = &v71;
    sub_1C4764BBC((void ***)&v73);
    *(_QWORD *)&v73 = &v70;
    sub_1C4764BBC((void ***)&v73);
    v8 = a8;
    a4 = v41;
    LODWORD(v15) = v40;
  }
  if ((a4 & 1) != 0)
  {
    LOBYTE(v73) = a5;
    sub_1C62E1EDC();
    v24 = (_DWORD)v15 != 2 || (_DWORD)a3 != 2;
    v43 = v24;
    sub_1C62E3AC8(&v43, 0, 0, 0, (uint64_t)&v73);
    sub_1C5A3DDB8(&v73, *(_BYTE *)(a1 + 26), (uint64_t)&v68);
    sub_1C5A3BB70();
    v25 = v68;
    v68 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    *(_QWORD *)&v49 = (char *)&v73 + 8;
    sub_1C4764BBC((void ***)&v49);
    v26 = v73;
    *(_QWORD *)&v73 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    memset(v69, 0, 24);
    LODWORD(v68) = 0;
    if (*(char *)(a6 + 23) < 0)
    {
      if (!*(_QWORD *)(a6 + 8))
      {
LABEL_39:
        BYTE1(v68) = 1;
        BYTE3(v68) = a5;
        sub_1C58BBD94((uint64_t)&v73, (uint64_t)&v68, a5);
        sub_1C62E1A94();
        if (*((_QWORD *)&v86 + 1))
        {
          *(_QWORD *)&v87 = *((_QWORD *)&v86 + 1);
          operator delete(*((void **)&v86 + 1));
        }
        if (*((_QWORD *)&v84 + 1))
        {
          v85[0] = *((_QWORD *)&v84 + 1);
          operator delete(*((void **)&v84 + 1));
        }
        if ((_QWORD)v83)
        {
          *((_QWORD *)&v83 + 1) = v83;
          operator delete((void *)v83);
        }
        if (*((_QWORD *)&v81 + 1))
        {
          *(_QWORD *)&v82 = *((_QWORD *)&v81 + 1);
          operator delete(*((void **)&v81 + 1));
        }
        MEMORY[0x1CAA32FB4](v80, 8);
        v27 = (__int128 *)*((_QWORD *)&v79 + 1);
        if (*((__int128 **)&v79 + 1) == &v78)
        {
          v28 = 4;
          v27 = &v78;
        }
        else
        {
          if (!*((_QWORD *)&v79 + 1))
          {
LABEL_78:
            if (SHIBYTE(v77[0]) < 0)
              operator delete((void *)v76);
            if (SBYTE7(v75) < 0)
              operator delete(*((void **)&v73 + 1));
            if (SHIBYTE(v69[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69[0].__r_.__value_.__l.__data_);
            return;
          }
          v28 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
        goto LABEL_78;
      }
    }
    else if (!*(_BYTE *)(a6 + 23))
    {
      goto LABEL_39;
    }
    std::string::operator=(v69, (const std::string *)a6);
    goto LABEL_39;
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a6;
    v48 = *(_QWORD *)(a6 + 16);
  }
  if (*(char *)(a7 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a7, *(_QWORD *)(a7 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a7;
    v46 = *(_QWORD *)(a7 + 16);
  }
  v29 = *v8;
  v44 = v29;
  if (v29)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  llvm::PGOInstrumentationUse::PGOInstrumentationUse((uint64_t)&v73, (__int128 *)__dst, (__int128 *)__p, a5, &v44);
  sub_1C62E1F30(a2, (uint64_t)&v73);
  v32 = v77[0];
  if (v77[0])
  {
    v33 = (unsigned int *)(v77[0] + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  if (SBYTE7(v76) < 0)
    operator delete((void *)v75);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  v36 = v44;
  if (v44)
  {
    v37 = (unsigned int *)(v44 + 8);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v48) < 0)
    operator delete(__dst[0]);
  sub_1C62E0E6C();
}

void llvm::PassBuilder::addPGOInstrPassesForO0(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  std::string v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  void *__dst[2];
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *__p;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    LOBYTE(v32[0]) = a4;
    sub_1C62E1EDC();
    memset(&v26, 0, sizeof(v26));
    v25 = 0;
    if (*(char *)(a5 + 23) < 0)
    {
      if (!*(_QWORD *)(a5 + 8))
      {
LABEL_9:
        BYTE1(v25) = 0;
        HIBYTE(v25) = a4;
        sub_1C58BBD94((uint64_t)v32, (uint64_t)&v25, a4);
        sub_1C62E1A94();
        if (__p)
        {
          v47 = __p;
          operator delete(__p);
        }
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        MEMORY[0x1CAA32FB4](v39, 8);
        v12 = v38;
        if (v38 == v37)
        {
          v13 = 4;
          v12 = v37;
        }
        else
        {
          if (!v38)
          {
LABEL_48:
            if (SHIBYTE(v36) < 0)
              operator delete(v35);
            if (SHIBYTE(v34) < 0)
              operator delete(v32[1]);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v26.__r_.__value_.__l.__data_);
            return;
          }
          v13 = 5;
        }
        (*(void (**)(void))(*v12 + 8 * v13))();
        goto LABEL_48;
      }
    }
    else if (!*(_BYTE *)(a5 + 23))
    {
      goto LABEL_9;
    }
    std::string::operator=(&v26, (const std::string *)a5);
    goto LABEL_9;
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    v31 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1C47EBC30(v28, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)a6;
    v29 = *(_QWORD *)(a6 + 16);
  }
  v14 = *a7;
  v27 = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  llvm::PGOInstrumentationUse::PGOInstrumentationUse((uint64_t)v32, (__int128 *)__dst, (__int128 *)v28, a4, &v27);
  sub_1C62E1F30(a2, (uint64_t)v32);
  v17 = v36;
  if (v36)
  {
    v18 = (unsigned int *)(v36 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32[0]);
  v21 = v27;
  if (v27)
  {
    v22 = (unsigned int *)(v27 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
  sub_1C62E0E6C();
}

void llvm::PassBuilder::buildInlinerPipeline(llvm *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  llvm *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  _OWORD v23[4];
  int v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  int v28;
  void **v29;

  v8 = (unint64_t)this >> 32;
  llvm::getInlineParams(this, SHIDWORD(this), (uint64_t)v25);
  if (a3 == 1)
  {
    if (!*(_BYTE *)(a2 + 128))
      goto LABEL_9;
    if (*(_DWORD *)(a2 + 104) == 3)
    {
      DWORD1(v26) = 0;
      if (!BYTE8(v26))
        BYTE8(v26) = 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 128))
  {
    goto LABEL_9;
  }
  BYTE14(v27) = byte_1ED81A670;
  if (!HIBYTE(v27))
    HIBYTE(v27) = 1;
LABEL_9:
  v23[2] = v26;
  v23[3] = v27;
  v24 = v28;
  v23[0] = v25[0];
  v23[1] = v25[1];
  llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass(a4, (uint64_t)v23, byte_1ED81A8B0, dword_1ED81AAF0, dword_1ED82D0B0);
  sub_1C62E122C();
  v9 = (_QWORD *)operator new();
  *v9 = &unk_1E81913E0;
  v21 = v9;
  v22 = 0;
  sub_1C5A3BB70();
  v10 = v21;
  v21 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  sub_1C62E0E6C();
  if ((dword_1ED832DB8 & 2) != 0)
    sub_1C62E4800();
  sub_1C62E47B4();
  if ((_DWORD)this == 3 && !(_DWORD)v8)
  {
    LODWORD(v19) = 3;
    sub_1C62E4708(a4 + 80, (int *)&v19);
LABEL_18:
    sub_1C62E4848();
    goto LABEL_19;
  }
  if ((_DWORD)this == 2 && !(_DWORD)v8)
    goto LABEL_18;
LABEL_19:
  v11 = *(unsigned int *)(a2 + 472);
  if ((_DWORD)v11)
  {
    v12 = 32 * v11;
    v13 = (_QWORD *)(*(_QWORD *)(a2 + 464) + 24);
    while (1)
    {
      *(_QWORD *)&v19 = this;
      if (!*v13)
        break;
      (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*v13 + 48))(*v13, a4 + 80, &v19);
      v13 += 4;
      v12 -= 32;
      if (!v12)
        goto LABEL_23;
    }
    sub_1C485C2F0();
    llvm::PassBuilder::buildModuleInlinerPipeline(v16, v17);
  }
  else
  {
LABEL_23:
    llvm::PassBuilder::buildFunctionSimplificationPipeline(a2, (unint64_t)this, a3, (uint64_t)&v19);
    sub_1C5A43D24(&v19, *(_BYTE *)(a2 + 26), byte_1ED81AA30, (uint64_t)&v20);
    sub_1C62E4494();
    v14 = v20;
    v20 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v29 = (void **)&v19;
    sub_1C4764BBC(&v29);
    LOBYTE(v19) = (v8 | this) != 0;
    sub_1C62E4890();
    if (byte_1ED81AA30)
    {
      v15 = (_QWORD *)operator new();
      *v15 = &unk_1E8191560;
      v18 = v15;
      sub_1C5A3BB70();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
}

uint64_t llvm::PassBuilder::buildModuleInlinerPipeline@<X0>(llvm *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  int v24;
  void **v25;

  v8 = (unint64_t)this >> 32;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  llvm::getInlineParams(this, SHIDWORD(this), (uint64_t)v21);
  if (a3 == 1)
  {
    if (*(_BYTE *)(a2 + 128))
    {
      if (*(_DWORD *)(a2 + 104) == 3)
      {
        DWORD1(v22) = 0;
        if (!BYTE8(v22))
          BYTE8(v22) = 1;
      }
    }
  }
  HIWORD(v23) = 256;
  v16 = v21[1];
  v17 = v22;
  v18 = v23;
  v15 = v21[0];
  v14 = 0;
  v19 = v24;
  v20 = dword_1ED81AAF0;
  sub_1C62E291C((uint64_t)a4, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  llvm::PassBuilder::buildFunctionSimplificationPipeline(a2, (unint64_t)this, a3, (uint64_t)&v14);
  sub_1C5A3BBD8((__int128 *)&v14, *(_BYTE *)(a2 + 26), (uint64_t)&v13);
  sub_1C5A3BB70();
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v25 = (void **)&v14;
  sub_1C4764BBC(&v25);
  v11 = operator new();
  *(_QWORD *)v11 = &unk_1E8191520;
  *(_BYTE *)(v11 + 8) = (v8 | this) != 0;
  v14 = v11;
  sub_1C6297060((uint64_t)a4, &v14);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void llvm::PassBuilder::buildModuleSimplificationPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v12;
  char v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  void **v43;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  void *v60[2];
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  void *__dst[2];
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void **v71;
  _BYTE v72[24];
  void *__p;
  __int128 v74;
  char *v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[9];
  int v81;
  _OWORD v82[13];
  int v83;
  _BYTE *v84;
  int v85;
  _BYTE v86[176];
  _OWORD *v87;
  int v88;
  _OWORD v89[2];
  int v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[128];
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = *(_BYTE *)(a1 + 128);
  if (!v8)
    goto LABEL_15;
  if (a3 != 2)
  {
    if (*(_BYTE *)(a1 + 113))
    {
      *(_QWORD *)v72 = *(_QWORD *)a1;
      sub_1C62E2594();
      if (!*(_BYTE *)(a1 + 128))
      {
        v9 = 0;
        v10 = 1;
        goto LABEL_19;
      }
    }
  }
  if (*(_DWORD *)(a1 + 104) != 3)
  {
    v8 = 0;
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v9 = a3 != 2 || byte_1ED8329F8 == 0;
  v8 = 1;
LABEL_16:
  v10 = a3 != 2;
  if (a3 == 2 && !v9)
  {
    v72[0] = 1;
    v72[1] = v8;
    sub_1C62E1E74(a4, (__int16 *)v72);
    v10 = 0;
    v9 = 0;
  }
LABEL_19:
  sub_1C62E1894();
  sub_1C62E14FC();
  v70 = 0;
  v69 = 0u;
  sub_1C62E7150();
  *(_DWORD *)v72 = 1;
  *(_QWORD *)&v72[4] = 0x101000001000000;
  *(_QWORD *)&v72[16] = 0;
  sub_1C5C48FA4((uint64_t)v72);
  sub_1C5A49B48();
  bzero(v72, 0x2C0uLL);
  v75 = (char *)&v76 + 8;
  DWORD1(v76) = 16;
  v80[8] = v82;
  v81 = 8;
  v82[12] = 0u;
  v83 = 0;
  v84 = v86;
  v85 = 16;
  memset(&v86[128], 0, 44);
  v87 = v89;
  v88 = 2;
  v89[1] = 0u;
  v90 = 0;
  v91 = &v93;
  v92 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)v72);
  v72[0] = 0;
  sub_1C62E8DAC();
  if (HIDWORD(a2))
    v12 = 0;
  else
    v12 = (_DWORD)a2 == 3;
  v13 = !v12;
  if (v12)
    sub_1C62E6780();
  if (v9)
  {
    *(_QWORD *)v72 = &v72[16];
    *(_QWORD *)&v72[8] = 0x10000000000;
    v94 = 0u;
    v95 = 0;
    v96 = 1;
    v14 = 2096;
    v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)&v72[v14] = v15;
      v14 += 16;
    }
    while (v14 != 2224);
    v98 = v100;
    v99 = 0x1000000000;
    v101 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v98 != v100)
      free(v98);
    if ((v96 & 1) == 0)
      MEMORY[0x1CAA32FB4](v97, 8);
    MEMORY[0x1CAA32FB4](v94, 8);
    if (*(_BYTE **)v72 != &v72[16])
      free(*(void **)v72);
  }
  sub_1C5A3BBD8(&v69, *(_BYTE *)(a1 + 26), (uint64_t)v72);
  sub_1C5A3BB70();
  v16 = *(_QWORD *)v72;
  *(_QWORD *)v72 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (_OWORD *)(a1 + 32);
  if (v9)
  {
    if (*(char *)(a1 + 55) < 0)
    {
      sub_1C47EBC30(__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      *(_OWORD *)__dst = *v17;
      v68 = *(_QWORD *)(a1 + 48);
    }
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1C47EBC30(v65, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)v65 = *(_OWORD *)(a1 + 80);
      v66 = *(_QWORD *)(a1 + 96);
    }
    v64 = 0;
    sub_1C5A55168(v72, (__int128 *)__dst, (__int128 *)v65, a3);
    sub_1C62E246C(a4, (uint64_t)v72);
    v18 = v76;
    if ((_QWORD)v76)
    {
      v19 = (unsigned int *)(v76 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    if (SHIBYTE(v74) < 0)
      operator delete(__p);
    if ((v72[23] & 0x80000000) != 0)
      operator delete(*(void **)v72);
    if (SHIBYTE(v66) < 0)
      operator delete(v65[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(__dst[0]);
    sub_1C62E0E6C();
    if ((a3 & 0xFFFFFFFD) != 1)
    {
      *(_WORD *)v72 = 257;
      sub_1C62E1E74(a4, (__int16 *)v72);
    }
  }
  if (HIDWORD(a2) || (_DWORD)a2)
    sub_1C62E1350();
  if ((dword_1ED832DB8 & 1) != 0)
    sub_1C62E12BC();
  if (!v10)
  {
    v72[0] = 0;
    *(_QWORD *)&v72[8] = 0;
    *(_QWORD *)&v72[16] = 0;
    LOBYTE(__p) = 1;
    sub_1C62E1CB0(a4, (__n128 *)v72);
  }
  v22 = *(unsigned int *)(a1 + 1032);
  if ((_DWORD)v22)
  {
    v23 = 32 * v22;
    v24 = (_QWORD *)(*(_QWORD *)(a1 + 1024) + 24);
    while (1)
    {
      *(_QWORD *)v72 = a2;
      if (!*v24)
        break;
      (*(void (**)(_QWORD, uint64_t, _BYTE *))(*(_QWORD *)*v24 + 48))(*v24, a4, v72);
      v24 += 4;
      v23 -= 32;
      if (!v23)
        goto LABEL_72;
    }
LABEL_155:
    sub_1C485C2F0();
  }
LABEL_72:
  if (byte_1ED832CF8)
    v25 = v13;
  else
    v25 = 1;
  if ((v25 & 1) == 0)
    sub_1C62E17BC();
  sub_1C62E1B8C();
  sub_1C62E1398();
  sub_1C5A3BFA0();
  v26 = (_QWORD *)operator new();
  *v26 = &unk_1E8191960;
  *(_QWORD *)v72 = v26;
  v72[8] = 0;
  sub_1C5A3BB70();
  v27 = *(_QWORD *)v72;
  *(_QWORD *)v72 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  *(_OWORD *)&v72[8] = 0u;
  v74 = 0u;
  *(_QWORD *)v72 = &v72[8];
  __p = &v74;
  v76 = 0u;
  v75 = (char *)&v76;
  v77 = 0;
  sub_1C62E158C();
  sub_1C47655E8((uint64_t)&v75, (_QWORD *)v76);
  sub_1C47655E8((uint64_t)&__p, (_QWORD *)v74);
  sub_1C47655E8((uint64_t)v72, *(_QWORD **)&v72[8]);
  v63 = 0;
  v62 = 0u;
  *(_QWORD *)v72 = &v72[16];
  *(_QWORD *)&v72[8] = 0x10000000000;
  v94 = 0u;
  v95 = 0;
  v96 = 1;
  v28 = 2096;
  v29 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v72[v28] = v29;
    v28 += 16;
  }
  while (v28 != 2224);
  v98 = v100;
  v99 = 0x1000000000;
  v101 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v98 != v100)
    free(v98);
  if ((v96 & 1) == 0)
    MEMORY[0x1CAA32FB4](v97, 8);
  MEMORY[0x1CAA32FB4](v94, 8);
  if (*(_BYTE **)v72 != &v72[16])
    free(*(void **)v72);
  v30 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v30)
  {
    v31 = 32 * v30;
    v32 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      *(_QWORD *)v72 = a2;
      if (!*v32)
        goto LABEL_155;
      (*(void (**)(_QWORD, __int128 *, _BYTE *))(*(_QWORD *)*v32 + 48))(*v32, &v62, v72);
      v32 += 4;
      v31 -= 32;
    }
    while (v31);
  }
  *(_QWORD *)v72 = 0x100010000000001;
  *(_QWORD *)&v72[8] = 16842752;
  *(_QWORD *)&v72[16] = 0;
  sub_1C5C48FA4((uint64_t)v72);
  sub_1C5A49B48();
  sub_1C5A3BBD8(&v62, *(_BYTE *)(a1 + 26), (uint64_t)v72);
  sub_1C5A3BB70();
  v33 = *(_QWORD *)v72;
  *(_QWORD *)v72 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(unsigned __int8 *)(a1 + 128);
  v35 = !v10;
  if (*(_BYTE *)(a1 + 128))
    v36 = !v10;
  else
    v36 = 1;
  if ((v36 & 1) == 0)
  {
    v37 = *(_DWORD *)(a1 + 104);
    if ((v37 - 1) <= 1)
    {
      if (*(char *)(a1 + 55) < 0)
      {
        sub_1C47EBC30(v60, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
      }
      else
      {
        *(_OWORD *)v60 = *v17;
        v61 = *(_QWORD *)(a1 + 48);
      }
      if (*(char *)(a1 + 103) < 0)
      {
        sub_1C47EBC30(v58, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
      }
      else
      {
        *(_OWORD *)v58 = *(_OWORD *)(a1 + 80);
        v59 = *(_QWORD *)(a1 + 96);
      }
      v50 = *(_QWORD *)(a1 + 120);
      v57 = v50;
      if (v50)
      {
        v51 = (unsigned int *)(v50 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        llvm::PassBuilder::addPGOInstrPasses(a1, a4, a2, v37 == 1, 0, (uint64_t)v60, (uint64_t)v58, &v57);
        do
        {
          v53 = __ldaxr(v51);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v51));
        if (!v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      }
      else
      {
        llvm::PassBuilder::addPGOInstrPasses(a1, a4, a2, v37 == 1, 0, (uint64_t)v60, (uint64_t)v58, &v57);
      }
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v61) < 0)
        operator delete(v60[0]);
      *(_WORD *)v72 = 0;
      sub_1C62E1E74(a4, (__int16 *)v72);
      v34 = *(unsigned __int8 *)(a1 + 128);
    }
    else
    {
      v34 = 1;
    }
  }
  if (v34)
    v38 = v35;
  else
    v38 = 1;
  if ((v38 & 1) == 0 && *(_DWORD *)(a1 + 108) == 1)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      sub_1C47EBC30(v55, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)v55 = *(_OWORD *)(a1 + 56);
      v56 = *(_QWORD *)(a1 + 72);
    }
    if (SHIBYTE(v56) < 0)
    {
      sub_1C47EBC30(v72, v55[0], (unint64_t)v55[1]);
    }
    else
    {
      *(_OWORD *)v72 = *(_OWORD *)v55;
      *(_QWORD *)&v72[16] = v56;
    }
    v39 = operator new();
    v40 = *(_QWORD *)&v72[8];
    *(_QWORD *)(v39 + 8) = *(_QWORD *)v72;
    *(_QWORD *)(v39 + 16) = v40;
    *(_QWORD *)(v39 + 23) = *(_QWORD *)&v72[15];
    LOBYTE(v40) = v72[23];
    v71 = (void **)v39;
    memset(v72, 0, sizeof(v72));
    *(_QWORD *)v39 = off_1E81924E0;
    *(_BYTE *)(v39 + 31) = v40;
    v41 = *(uint64_t **)(a4 + 8);
    if ((unint64_t)v41 >= *(_QWORD *)(a4 + 16))
    {
      v42 = sub_1C4D62F9C((char **)a4, (uint64_t *)&v71);
      v43 = v71;
      *(_QWORD *)(a4 + 8) = v42;
      v71 = 0;
      if (v43)
        (*((void (**)(void **))*v43 + 1))(v43);
    }
    else
    {
      *v41 = v39;
      *(_QWORD *)(a4 + 8) = v41 + 1;
    }
    if ((v72[23] & 0x80000000) != 0)
      operator delete(*(void **)v72);
    if (SHIBYTE(v56) < 0)
      operator delete(v55[0]);
  }
  if (byte_1ED81A5B0 && !*(_BYTE *)(a1 + 128))
    sub_1C62E2744();
  if (byte_1ED81A7F0)
  {
    llvm::PassBuilder::buildModuleInlinerPipeline((llvm *)a2, a1, a3, v72);
    v44 = *(uint64_t **)v72;
    v45 = *(uint64_t **)&v72[8];
    if (*(_QWORD *)v72 != *(_QWORD *)&v72[8])
    {
      v46 = *(char **)(a4 + 8);
      do
      {
        if ((unint64_t)v46 >= *(_QWORD *)(a4 + 16))
        {
          v46 = sub_1C4D62F9C((char **)a4, v44);
        }
        else
        {
          v47 = *v44;
          *v44 = 0;
          *(_QWORD *)v46 = v47;
          v46 += 8;
        }
        *(_QWORD *)(a4 + 8) = v46;
        ++v44;
      }
      while (v44 != v45);
    }
    v71 = (void **)v72;
    sub_1C4764BBC(&v71);
  }
  else
  {
    llvm::PassBuilder::buildInlinerPipeline((llvm *)a2, a1, a3, (uint64_t)v72);
    sub_1C62E18E0();
    v71 = (void **)v80;
    sub_1C4764BBC(&v71);
    v71 = (void **)&v79;
    sub_1C4764BBC(&v71);
    v71 = (void **)&v78;
    sub_1C4764BBC(&v71);
  }
  if (a3 != 1 && byte_1ED81A730)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1E8191A20;
    *(_QWORD *)v72 = v48;
    v72[8] = 0;
    sub_1C5A3BB70();
    v49 = *(_QWORD *)v72;
    *(_QWORD *)v72 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    sub_1C62E2A80();
  }
  *(_QWORD *)v72 = &v62;
  sub_1C4764BBC((void ***)v72);
  *(_QWORD *)v72 = &v69;
  sub_1C4764BBC((void ***)v72);
}

void llvm::PassBuilder::addVectorPasses(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v8;
  BOOL v9;
  unsigned __int8 v10;
  BOOL v11;
  unsigned __int8 v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  BOOL v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  void **v39;
  void *v40;
  uint64_t v41;
  _DWORD v42[14];
  _OWORD v43[3];
  __n128 v44;
  _QWORD v45[256];
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 8))
    v9 = byte_1ED838890 == 0;
  else
    v9 = 1;
  v10 = v9;
  v44.n128_u8[0] = v10;
  if (v8)
    v11 = byte_1ED838950 == 0;
  else
    v11 = 1;
  v12 = v11;
  v44.n128_u8[1] = v12;
  sub_1C62E8F78();
  if (a4)
  {
    if (byte_1ED832278)
    {
      if (*(_BYTE *)(a1 + 11))
      {
        LODWORD(v37) = a2;
        sub_1C62E375C((int *)&v37, 0, 0, 0, (uint64_t)&v44);
        sub_1C62E4E40(a3, &v44);
        v40 = &v44.n128_i8[8];
        sub_1C4764BBC((void ***)&v40);
        v13 = v44.n128_u64[0];
        v44.n128_u64[0] = 0;
        if (v13)
          (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v14 = *(_BYTE *)(a1 + 12);
    v15 = *(_BYTE *)(a1 + 11) ^ 1;
    v44.n128_u8[12] = 0;
    LOBYTE(v45[0]) = 0;
    v44.n128_u64[0] = 0;
    v44.n128_u16[4] = 0;
    HIDWORD(v45[0]) = a2;
    LOBYTE(v45[1]) = v15;
    BYTE1(v45[1]) = v14;
    sub_1C62E8EA8(a3, &v44);
    sub_1C62E8CD8();
  }
  else
  {
    sub_1C62E7880();
  }
  v44.n128_u64[0] = (unint64_t)v45;
  v44.n128_u64[1] = 0x10000000000;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v16 = 2096;
  v17 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(__n128 *)((char *)&v44 + v16) = v17;
    v16 += 16;
  }
  while (v16 != 2224);
  v50 = v52;
  v51 = 0x1000000000;
  v53 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v50 != v52)
    free(v50);
  if ((v48 & 1) == 0)
    MEMORY[0x1CAA32FB4](v49, 8);
  MEMORY[0x1CAA32FB4](v46, 8);
  if ((_QWORD *)v44.n128_u64[0] != v45)
    free((void *)v44.n128_u64[0]);
  if (a2 >= 2 && byte_1ED832038)
  {
    v38 = 0;
    v37 = 0u;
    v44.n128_u8[0] = 0;
    sub_1C62E8DAC();
    sub_1C62E69B4();
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v18 = 2096;
    v19 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v18) = v19;
      v18 += 16;
    }
    while (v18 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
    v40 = v42;
    v41 = 0x600000000;
    v42[12] = 0;
    memset(v43, 0, sizeof(v43));
    v44.n128_u64[0] = *(_QWORD *)(a1 + 16);
    v44.n128_u32[2] = 1;
    sub_1C62E9F60();
    if (HIDWORD(a2))
      v20 = 0;
    else
      v20 = (_DWORD)a2 == 3;
    v21 = v20;
    v44.n128_u8[0] = v21;
    v44.n128_u8[1] = 1;
    sub_1C62E9EE8((uint64_t)&v40, (__int16 *)&v44);
    sub_1C62E5A3C();
    sub_1C62E4F10((uint64_t)&v40, 1, 1, 0, (uint64_t)&v44);
    sub_1C62E4E40((uint64_t)&v37, &v44);
    v39 = (void **)&v44.n128_u64[1];
    sub_1C4764BBC(&v39);
    v22 = v44.n128_u64[0];
    v44.n128_u64[0] = 0;
    if (v22)
      (*(void (**)(unint64_t))(*(_QWORD *)v22 + 8))(v22);
    v44.n128_u64[0] = 0x100010000000001;
    v44.n128_u64[1] = 16842752;
    v45[0] = 0;
    sub_1C5C48FA4((uint64_t)&v44);
    sub_1C5A49B48();
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v23 = 2096;
    v24 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v23) = v24;
      v23 += 16;
    }
    while (v23 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
    sub_1C6302608();
    v44.n128_u64[0] = (unint64_t)&v43[1] + 8;
    sub_1C4764BBC((void ***)&v44);
    v44.n128_u64[0] = (unint64_t)v43;
    sub_1C4764BBC((void ***)&v44);
    if (v40 != v42)
      free(v40);
    v44.n128_u64[0] = (unint64_t)&v37;
    sub_1C4764BBC((void ***)&v44);
  }
  v44.n128_u64[0] = 0x1010100000001;
  v44.n128_u64[1] = 16843009;
  v45[0] = 0;
  sub_1C5C48FA4((uint64_t)&v44);
  sub_1C5A49B48();
  if (a4)
  {
    sub_1C62E84B4();
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v25 = 2096;
    v26 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v25) = v26;
      v25 += 16;
    }
    while (v25 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
    sub_1C62E66B0();
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v44 = 0u;
    memset(v45, 0, 152);
    sub_1C62E8540(a3, (uint64_t)&v44);
    sub_1C62EA8E4((uint64_t)&v45[13]);
    sub_1C62EA8E4((uint64_t)&v45[7]);
    if (a2 >= 2)
    {
      if (byte_1ED832038)
      {
        v44.n128_u8[0] = 0;
        sub_1C62E8DAC();
      }
    }
  }
  v44.n128_u8[0] = 0;
  sub_1C62E8934();
  if ((a4 & 1) != 0)
  {
    v44 = 0u;
    sub_1C62E6604();
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v27 = 2096;
    v28 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v27) = v28;
      v27 += 16;
    }
    while (v27 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
  }
  else
  {
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v29 = 2096;
    v30 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v29) = v30;
      v29 += 16;
    }
    while (v29 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
    if (byte_1ED832278)
    {
      if (*(_BYTE *)(a1 + 11))
      {
        LODWORD(v37) = a2;
        sub_1C62E375C((int *)&v37, 0, 0, 0, (uint64_t)&v44);
        sub_1C62E4E40(a3, &v44);
        v40 = &v44.n128_i8[8];
        sub_1C4764BBC((void ***)&v40);
        v31 = v44.n128_u64[0];
        v44.n128_u64[0] = 0;
        if (v31)
          (*(void (**)(unint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    v32 = *(_BYTE *)(a1 + 12);
    v33 = *(_BYTE *)(a1 + 11) ^ 1;
    v44.n128_u8[12] = 0;
    LOBYTE(v45[0]) = 0;
    v44.n128_u64[0] = 0;
    v44.n128_u16[4] = 0;
    HIDWORD(v45[0]) = a2;
    LOBYTE(v45[1]) = v33;
    BYTE1(v45[1]) = v32;
    sub_1C62E8EA8(a3, &v44);
    sub_1C62E8CD8();
    v44.n128_u64[0] = (unint64_t)v45;
    v44.n128_u64[1] = 0x10000000000;
    v46 = 0u;
    v47 = 0;
    v48 = 1;
    v34 = 2096;
    v35 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__n128 *)((char *)&v44 + v34) = v35;
      v34 += 16;
    }
    while (v34 != 2224);
    v50 = v52;
    v51 = 0x1000000000;
    v53 = dword_1ED8337E0;
    sub_1C5A49A88();
    if (v50 != v52)
      free(v50);
    if ((v48 & 1) == 0)
      MEMORY[0x1CAA32FB4](v49, 8);
    MEMORY[0x1CAA32FB4](v46, 8);
    if ((_QWORD *)v44.n128_u64[0] != v45)
      free((void *)v44.n128_u64[0]);
    sub_1C62E5A3C();
    v40 = *(void **)(a1 + 16);
    LODWORD(v41) = 1;
    sub_1C62E42D0((uint64_t *)&v40, 1, 1, 0, (uint64_t)&v44);
    sub_1C62E4E40(a3, &v44);
    *(_QWORD *)&v37 = &v44.n128_u64[1];
    sub_1C4764BBC((void ***)&v37);
    v36 = v44.n128_u64[0];
    v44.n128_u64[0] = 0;
    if (v36)
      (*(void (**)(unint64_t))(*(_QWORD *)v36 + 8))(v36);
    v44 = 0uLL;
    sub_1C62E6604();
  }
}

void llvm::PassBuilder::buildModuleOptimizationPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void **p_dst;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 __dst;
  uint64_t v42;
  void **v43;
  void *v44[2];
  _DWORD v45[14];
  _OWORD v46[3];
  _BYTE v47[56];
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  _QWORD v52[10];
  _QWORD v53[11];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1C5A3BFA0();
  v63 = 0;
  v65 = 0u;
  *(_OWORD *)&v60[8] = 0u;
  v58 = 1065353216;
  v55 = 0u;
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  memset(&v47[24], 0, 32);
  *(_QWORD *)v47 = &v47[32];
  *(_QWORD *)&v47[8] = &v47[32];
  *(_QWORD *)&v47[16] = 32;
  *(_QWORD *)&v55 = 0;
  v54 = 0;
  DWORD2(v55) = 0;
  v56 = 0u;
  v57 = 0u;
  v59 = 0u;
  *(_OWORD *)v60 = 0u;
  *(_DWORD *)&v60[16] = 1065353216;
  v62 = 0;
  v61 = 0;
  *(_QWORD *)&v65 = 0;
  v64 = 0;
  DWORD2(v65) = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)v47);
  if (byte_1ED831F78)
    sub_1C62E1E2C();
  if ((a3 & 1) == 0)
    sub_1C62E16A0();
  if (byte_1ED832AB8)
    sub_1C62E1A4C();
  sub_1C62E2420();
  if ((a3 & 1) == 0 && *(_BYTE *)(a1 + 128))
  {
    v8 = *(_DWORD *)(a1 + 108);
    if (v8 == 2)
    {
      if (*(char *)(a1 + 55) < 0)
      {
        sub_1C47EBC30(&v36, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
      }
      else
      {
        v36 = *(_OWORD *)(a1 + 32);
        v37 = *(_QWORD *)(a1 + 48);
      }
      if (*(char *)(a1 + 103) < 0)
      {
        sub_1C47EBC30(v34, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
      }
      else
      {
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 80);
        v35 = *(_QWORD *)(a1 + 96);
      }
      v10 = *(_QWORD *)(a1 + 120);
      v33 = v10;
      if (v10)
      {
        v16 = (unsigned int *)(v10 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, a2, 0, 1, (uint64_t)&v36, (uint64_t)v34, &v33);
        do
        {
          v18 = __ldaxr(v16);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v16));
        if (!v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      else
      {
        llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, a2, 0, 1, (uint64_t)&v36, (uint64_t)v34, &v33);
      }
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
      if (SHIBYTE(v37) < 0)
      {
        p_dst = (void **)&v36;
        goto LABEL_47;
      }
    }
    else if (v8 == 1)
    {
      if (*(char *)(a1 + 79) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
      else
      {
        __dst = *(_OWORD *)(a1 + 56);
        v42 = *(_QWORD *)(a1 + 72);
      }
      if (*(char *)(a1 + 103) < 0)
      {
        sub_1C47EBC30(__p, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 80);
        v40 = *(_QWORD *)(a1 + 96);
      }
      v9 = *(_QWORD *)(a1 + 120);
      v38 = v9;
      if (v9)
      {
        v11 = (unsigned int *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, a2, 1, 1, (uint64_t)&__dst, (uint64_t)__p, &v38);
        do
        {
          v13 = __ldaxr(v11);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v11));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, a2, 1, 1, (uint64_t)&__dst, (uint64_t)__p, &v38);
      }
      if (SHIBYTE(v40) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v42) < 0)
      {
        p_dst = (void **)&__dst;
LABEL_47:
        operator delete(*p_dst);
      }
    }
  }
  sub_1C62E2244();
  v20 = *(unsigned int *)(a1 + 632);
  if ((_DWORD)v20)
  {
    v21 = 32 * v20;
    v22 = (_QWORD *)(*(_QWORD *)(a1 + 624) + 24);
    while (1)
    {
      *(_QWORD *)v47 = a2;
      if (!*v22)
        break;
      (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v22 + 48))(*v22, a4, v47);
      v22 += 4;
      v21 -= 32;
      if (!v21)
        goto LABEL_52;
    }
LABEL_81:
    sub_1C485C2F0();
  }
LABEL_52:
  v31 = 0uLL;
  v32 = 0;
  memset(&v52[3], 0, 56);
  *(_QWORD *)&v47[48] = 1;
  memset(v47, 0, 48);
  v48 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v49 = v48;
  v50 = v48;
  v51 = v48;
  v52[0] = &v52[2];
  *(_OWORD *)&v52[1] = 0x800000000uLL;
  memset(&v53[1], 0, 80);
  v53[0] = &v53[1];
  sub_1C62E6F40();
  sub_1C62EA7A0((uint64_t)v47);
  sub_1C62E71E0();
  if (byte_1ED832B78)
  {
    v47[0] = 0;
    sub_1C62E8E54();
    v47[0] = 0;
    sub_1C62E8DAC();
  }
  v23 = *(unsigned int *)(a1 + 552);
  if ((_DWORD)v23)
  {
    v24 = 32 * v23;
    v25 = (_QWORD *)(*(_QWORD *)(a1 + 544) + 24);
    do
    {
      *(_QWORD *)v47 = a2;
      if (!*v25)
        goto LABEL_81;
      (*(void (**)(_QWORD, __int128 *, _BYTE *))(*(_QWORD *)*v25 + 48))(*v25, &v31, v47);
      v25 += 4;
      v24 -= 32;
    }
    while (v24);
  }
  v44[0] = v45;
  v44[1] = (void *)0x600000000;
  v45[12] = 0;
  memset(v46, 0, sizeof(v46));
  v47[0] = a2 != 0x200000002;
  v47[1] = a3;
  sub_1C62E98B8((uint64_t)v44, (__int16 *)v47);
  sub_1C62E9934();
  sub_1C62E4F10((uint64_t)v44, 0, 0, 0, (uint64_t)v47);
  sub_1C62E4E40((uint64_t)&v31, (__n128 *)v47);
  v43 = (void **)&v47[8];
  sub_1C4764BBC(&v43);
  v26 = *(_QWORD *)v47;
  *(_QWORD *)v47 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_1C62E7910();
  sub_1C62E7080();
  llvm::PassBuilder::addVectorPasses(a1, a2, (uint64_t)&v31, 0);
  sub_1C62E7344();
  sub_1C62E6E70();
  sub_1C62E6A88();
  *(_QWORD *)v47 = 0x100010000000001;
  *(_QWORD *)&v47[8] = 16842752;
  *(_QWORD *)&v47[16] = 0;
  sub_1C5C48FA4((uint64_t)v47);
  sub_1C5A49B48();
  sub_1C62E696C();
  sub_1C5A3BBD8(&v31, *(_BYTE *)(a1 + 26), (uint64_t)v47);
  sub_1C5A3BB70();
  v27 = *(_QWORD *)v47;
  *(_QWORD *)v47 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(unsigned int *)(a1 + 712);
  if ((_DWORD)v28)
  {
    v29 = 32 * v28;
    v30 = (_QWORD *)(*(_QWORD *)(a1 + 704) + 24);
    do
    {
      *(_QWORD *)v47 = a2;
      if (!*v30)
        goto LABEL_81;
      (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v30 + 48))(*v30, a4, v47);
      v30 += 4;
      v29 -= 32;
    }
    while (v29);
  }
  if ((byte_1ED8324B8 || *(_BYTE *)(a1 + 1984)) && (a3 & 1) == 0)
    sub_1C62E184C();
  if (byte_1ED832578)
    sub_1C62E1BD8();
  if (*(_BYTE *)(a1 + 25))
    sub_1C62E1D58();
  if (*(_BYTE *)(a1 + 24))
    sub_1C62E1428();
  *(_DWORD *)&v60[20] = 0;
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  memset(&v47[24], 0, 32);
  *(_QWORD *)v47 = &v47[32];
  *(_QWORD *)&v47[8] = &v47[32];
  *(_QWORD *)&v47[16] = 32;
  v55 = 0uLL;
  v54 = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 1065353216;
  v59 = 0u;
  *(_OWORD *)v60 = 0u;
  *(_DWORD *)&v60[16] = 1065353216;
  v62 = 0;
  v61 = 0;
  v63 = 0;
  v65 = 0uLL;
  v64 = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)v47);
  sub_1C62E14B4();
  if ((a3 & 1) == 0)
    sub_1C62E228C();
  *(_QWORD *)v47 = (char *)&v46[1] + 8;
  sub_1C4764BBC((void ***)v47);
  *(_QWORD *)v47 = v46;
  sub_1C4764BBC((void ***)v47);
  if (v44[0] != v45)
    free(v44[0]);
  *(_QWORD *)v47 = &v31;
  sub_1C4764BBC((void ***)v47);
}

void llvm::PassBuilder::buildPerModuleDefaultPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void **v24;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_1C62E1304();
  sub_1C62E172C();
  v8 = *(unsigned int *)(a1 + 952);
  if ((_DWORD)v8)
  {
    v9 = 32 * v8;
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 944) + 24);
    while (1)
    {
      v22 = (uint64_t *)a2;
      if (!*v10)
        break;
      (*(void (**)(_QWORD, uint64_t, uint64_t **))(*(_QWORD *)*v10 + 48))(*v10, a4, &v22);
      v10 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_5;
    }
    sub_1C485C2F0();
    sub_1C5A698C4();
  }
  else
  {
LABEL_5:
    if (*(_BYTE *)(a1 + 128))
    {
      if (*(_BYTE *)(a1 + 112))
      {
        v11 = (uint64_t *)operator new();
        *v11 = (uint64_t)&unk_1E81921E0;
        v22 = v11;
        LOBYTE(v23) = 0;
        sub_1C5A3BB70();
        v12 = v22;
        v22 = 0;
        if (v12)
          (*(void (**)(uint64_t *))(*v12 + 8))(v12);
      }
    }
    if (a3)
      v13 = 3;
    else
      v13 = 0;
    llvm::PassBuilder::buildModuleSimplificationPipeline(a1, a2, v13, (uint64_t)&v22);
    v14 = v22;
    v15 = v23;
    if (v22 != v23)
    {
      v16 = *(char **)(a4 + 8);
      do
      {
        if ((unint64_t)v16 >= *(_QWORD *)(a4 + 16))
        {
          v16 = sub_1C4D62F9C((char **)a4, v14);
        }
        else
        {
          v17 = *v14;
          *v14 = 0;
          *(_QWORD *)v16 = v17;
          v16 += 8;
        }
        *(_QWORD *)(a4 + 8) = v16;
        ++v14;
      }
      while (v14 != v15);
    }
    v24 = (void **)&v22;
    sub_1C4764BBC(&v24);
    llvm::PassBuilder::buildModuleOptimizationPipeline(a1, a2, a3, &v22);
    v18 = v22;
    v19 = v23;
    if (v22 != v23)
    {
      v20 = *(char **)(a4 + 8);
      do
      {
        if ((unint64_t)v20 >= *(_QWORD *)(a4 + 16))
        {
          v20 = sub_1C4D62F9C((char **)a4, v18);
        }
        else
        {
          v21 = *v18;
          *v18 = 0;
          *(_QWORD *)v20 = v21;
          v20 += 8;
        }
        *(_QWORD *)(a4 + 8) = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    v24 = (void **)&v22;
    sub_1C4764BBC(&v24);
    if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 113) && *(_DWORD *)(a1 + 104) == 3)
      sub_1C62E2B0C();
    sub_1C5A698C4();
    if (a3)
    {
      sub_1C62E13E0();
      sub_1C62E1DA0();
    }
  }
}

uint64_t sub_1C5A698C4()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)operator new();
  *v0 = &unk_1E81906A0;
  v2 = v0;
  sub_1C5A3BB70();
  result = (uint64_t)v2;
  if (v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

void llvm::PassBuilder::buildThinLTOPreLinkDefaultPipeline(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  void **v23;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1C62E1304();
  sub_1C62E172C();
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v6 = (uint64_t *)operator new();
      *v6 = (uint64_t)&unk_1E81921E0;
      v21 = v6;
      LOBYTE(v22) = 0;
      sub_1C5A3BB70();
      v7 = v21;
      v21 = 0;
      if (v7)
        (*(void (**)(uint64_t *))(*v7 + 8))(v7);
    }
  }
  v8 = *(unsigned int *)(a1 + 952);
  if ((_DWORD)v8)
  {
    v9 = 32 * v8;
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 944) + 24);
    while (1)
    {
      v21 = (uint64_t *)a2;
      if (!*v10)
        break;
      (*(void (**)(_QWORD, uint64_t, uint64_t **))(*(_QWORD *)*v10 + 48))(*v10, a3, &v21);
      v10 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::PassBuilder::buildModuleSimplificationPipeline(a1, a2, 1, (uint64_t)&v21);
    v11 = v21;
    v12 = v22;
    if (v21 != v22)
    {
      v13 = *(char **)(a3 + 8);
      do
      {
        if ((unint64_t)v13 >= *(_QWORD *)(a3 + 16))
        {
          v13 = sub_1C4D62F9C((char **)a3, v11);
        }
        else
        {
          v14 = *v11;
          *v11 = 0;
          *(_QWORD *)v13 = v14;
          v13 += 8;
        }
        *(_QWORD *)(a3 + 8) = v13;
        ++v11;
      }
      while (v11 != v12);
    }
    v23 = (void **)&v21;
    sub_1C4764BBC(&v23);
    if (byte_1ED831F78)
      sub_1C62E1E2C();
    sub_1C5A3BFA0();
    v15 = (uint64_t *)operator new();
    *v15 = (uint64_t)&unk_1E8191FA0;
    v21 = v15;
    LOBYTE(v22) = 0;
    sub_1C5A3BB70();
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
    if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 113) && *(_DWORD *)(a1 + 104) == 3)
      sub_1C62E2B0C();
    v17 = *(unsigned int *)(a1 + 712);
    if (!(_DWORD)v17)
    {
LABEL_27:
      sub_1C5A698C4();
      sub_1C62E13E0();
      sub_1C62E1DA0();
      return;
    }
    v18 = *(_QWORD *)(a1 + 704);
    v19 = 32 * v17;
    v20 = (_QWORD *)(v18 + 24);
    while (1)
    {
      v21 = (uint64_t *)a2;
      if (!*v20)
        break;
      (*(void (**)(_QWORD, uint64_t, uint64_t **))(*(_QWORD *)*v20 + 48))(*v20, a3, &v21);
      v20 += 4;
      v19 -= 32;
      if (!v19)
        goto LABEL_27;
    }
  }
  sub_1C485C2F0();
  llvm::PassBuilder::buildThinLTODefaultPipeline();
}

uint64_t llvm::PassBuilder::buildThinLTODefaultPipeline@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _OWORD v19[16];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __n128 *v33;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_1C62E1304();
  if (a3)
  {
    v17 = 0uLL;
    sub_1C62E27D0();
    v18 = a3;
    LOBYTE(v19[0]) = 0;
    sub_1C62E1CB0(a4, &v17);
  }
  if (a2)
  {
    sub_1C62E172C();
    llvm::PassBuilder::buildModuleSimplificationPipeline(a1, a2, 2, (uint64_t)&v17);
    v10 = v17.n128_u64[1];
    v9 = (uint64_t *)v17.n128_u64[0];
    if (v17.n128_u64[0] != v17.n128_u64[1])
    {
      v11 = *(char **)(a4 + 8);
      do
      {
        if ((unint64_t)v11 >= *(_QWORD *)(a4 + 16))
        {
          v11 = sub_1C4D62F9C((char **)a4, v9);
        }
        else
        {
          v12 = *v9;
          *v9 = 0;
          *(_QWORD *)v11 = v12;
          v11 += 8;
        }
        *(_QWORD *)(a4 + 8) = v11;
        ++v9;
      }
      while (v9 != (uint64_t *)v10);
    }
    v33 = &v17;
    sub_1C4764BBC((void ***)&v33);
    llvm::PassBuilder::buildModuleOptimizationPipeline(a1, a2, 0, &v17);
    v14 = v17.n128_u64[1];
    v13 = (uint64_t *)v17.n128_u64[0];
    if (v17.n128_u64[0] != v17.n128_u64[1])
    {
      v15 = *(char **)(a4 + 8);
      do
      {
        if ((unint64_t)v15 >= *(_QWORD *)(a4 + 16))
        {
          v15 = sub_1C4D62F9C((char **)a4, v13);
        }
        else
        {
          v16 = *v13;
          *v13 = 0;
          *(_QWORD *)v15 = v16;
          v15 += 8;
        }
        *(_QWORD *)(a4 + 8) = v15;
        ++v13;
      }
      while (v13 != (uint64_t *)v14);
    }
    v33 = &v17;
    sub_1C4764BBC((void ***)&v33);
    return sub_1C5A698C4();
  }
  else
  {
    v17.n128_u8[0] = 0;
    v17.n128_u64[1] = 0;
    v18 = 0;
    LOBYTE(v19[0]) = 1;
    sub_1C62E1CB0(a4, &v17);
    sub_1C62E16A0();
    v30 = 0;
    v32 = 0u;
    *(_OWORD *)&v27[8] = 0u;
    v25 = 1065353216;
    v20 = 0;
    v22 = 0u;
    memset(v19, 0, sizeof(v19));
    v17.n128_u64[0] = (unint64_t)v19 + 8;
    v17.n128_u64[1] = (unint64_t)v19 + 8;
    v18 = 32;
    v21 = 0;
    *(_QWORD *)&v22 = 0;
    DWORD2(v22) = 0;
    v23 = 0u;
    v24 = 0u;
    v26 = 0u;
    *(_OWORD *)v27 = 0u;
    *(_DWORD *)&v27[16] = 1065353216;
    v28 = 0;
    v29 = 0;
    v31 = 0;
    *(_QWORD *)&v32 = 0;
    DWORD2(v32) = 0;
    sub_1C5A3BF08();
    return sub_1C56E07A8((uint64_t)&v17);
  }
}

void llvm::PassBuilder::buildLTODefaultPipeline(uint64_t a1@<X0>, llvm *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  void **v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void **v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _BYTE v94[68];
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  void *v98[2];
  uint64_t v99;
  void *__dst[2];
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _DWORD v104[14];
  _OWORD v105[3];
  _BYTE v106[56];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  _BYTE v128[24];
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  _BYTE v133[176];
  _OWORD *v134;
  int v135;
  _OWORD v136[2];
  int v137;
  uint64_t *v138;
  int v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[128];
  int v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1C62E1304();
  v8 = *(unsigned int *)(a1 + 792);
  if ((_DWORD)v8)
  {
    v9 = 32 * v8;
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 784) + 24);
    while (1)
    {
      *(_QWORD *)v106 = a2;
      if (!*v10)
        break;
      (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v10 + 48))(*v10, a4, v106);
      v10 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_5;
    }
LABEL_165:
    sub_1C485C2F0();
  }
LABEL_5:
  sub_1C62E1544();
  if (!a2)
  {
    *(_QWORD *)v106 = a3;
    *(_QWORD *)&v106[8] = 0;
    v106[16] = 0;
    sub_1C62E27D0();
    v106[0] = 0;
    *(_QWORD *)&v106[8] = a3;
    *(_QWORD *)&v106[16] = 0;
    v106[24] = 0;
    sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
    v106[0] = 0;
    *(_QWORD *)&v106[8] = 0;
    *(_QWORD *)&v106[16] = 0;
    v106[24] = 1;
    sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
    v11 = *(unsigned int *)(a1 + 872);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(a1 + 864);
      v13 = 32 * v11;
      v14 = (_QWORD *)(v12 + 24);
      do
      {
        *(_QWORD *)v106 = 0;
        if (!*v14)
          goto LABEL_165;
        (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v14 + 48))(*v14, a4, v106);
        v14 += 4;
        v13 -= 32;
      }
      while (v13);
    }
LABEL_50:
    sub_1C5A698C4();
    return;
  }
  v15 = (_OWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 128) && *(_DWORD *)(a1 + 104) == 3)
  {
    if (*(char *)(a1 + 55) < 0)
    {
      sub_1C47EBC30(__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      *(_OWORD *)__dst = *v15;
      v101 = *(_QWORD *)(a1 + 48);
    }
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1C47EBC30(v98, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)v98 = *(_OWORD *)(a1 + 80);
      v99 = *(_QWORD *)(a1 + 96);
    }
    v97 = 0;
    sub_1C5A55168(v106, (__int128 *)__dst, (__int128 *)v98, 4);
    sub_1C62E246C((uint64_t)a4, (uint64_t)v106);
    v16 = v107;
    if ((_QWORD)v107)
    {
      v17 = (unsigned int *)(v107 + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    if ((v106[47] & 0x80000000) != 0)
      operator delete(*(void **)&v106[24]);
    if ((v106[23] & 0x80000000) != 0)
      operator delete(*(void **)v106);
    if (SHIBYTE(v99) < 0)
      operator delete(v98[0]);
    if (SHIBYTE(v101) < 0)
      operator delete(__dst[0]);
    sub_1C62E0E6C();
  }
  sub_1C62E1350();
  v132 = 0u;
  *(_OWORD *)&v128[8] = 0u;
  v126 = 1065353216;
  v121 = 0;
  v123 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  memset(&v106[24], 0, 32);
  *(_QWORD *)v106 = &v106[32];
  *(_QWORD *)&v106[8] = &v106[32];
  *(_QWORD *)&v106[16] = 32;
  *(_QWORD *)&v123 = 0;
  v122 = 0;
  DWORD2(v123) = 0;
  v124 = 0u;
  v125 = 0u;
  v127 = 0u;
  *(_OWORD *)v128 = 0u;
  *(_DWORD *)&v128[16] = 1065353216;
  v130 = 0uLL;
  v129 = 0;
  *(_QWORD *)&v132 = 0;
  v131 = 0;
  DWORD2(v132) = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)v106);
  sub_1C62E172C();
  sub_1C62E1894();
  if (a2 >= 2)
  {
    v20 = *(_BYTE *)(a1 + 26);
    v21 = (_QWORD *)operator new();
    *v21 = &unk_1E8191720;
    *(_QWORD *)v106 = v21;
    v106[8] = v20;
    sub_1C5A3BB70();
    v22 = *(_QWORD *)v106;
    *(_QWORD *)v106 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *(_BYTE *)(a1 + 128);
    if (v23)
      v23 = *(_DWORD *)(a1 + 104) == 3;
    v106[0] = 1;
    v106[1] = v23;
    sub_1C62E1E74((uint64_t)a4, (__int16 *)v106);
    if (!HIDWORD(a2) && byte_1ED832CF8 && (_DWORD)a2 == 3)
      sub_1C62E17BC();
    sub_1C62E1B8C();
    sub_1C62E1398();
  }
  v24 = (_QWORD *)operator new();
  *v24 = &unk_1E8191460;
  *(_QWORD *)v106 = v24;
  sub_1C6297060((uint64_t)a4, (uint64_t *)v106);
  v25 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_1C62E2420();
  sub_1C62E1804();
  *(_QWORD *)v106 = a3;
  *(_QWORD *)&v106[8] = 0;
  v106[16] = 0;
  sub_1C62E27D0();
  if (a2 == (llvm *)1)
  {
    v106[0] = 0;
    *(_QWORD *)&v106[8] = a3;
    *(_QWORD *)&v106[16] = 0;
    v106[24] = 0;
    sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
    v106[0] = 0;
    *(_QWORD *)&v106[8] = 0;
    *(_QWORD *)&v106[16] = 0;
    v106[24] = 1;
    sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
    v26 = *(unsigned int *)(a1 + 872);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(a1 + 864);
      v28 = 32 * v26;
      v29 = (_QWORD *)(v27 + 24);
      while (1)
      {
        *(_QWORD *)v106 = a2;
        if (!*v29)
          goto LABEL_165;
        (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v29 + 48))(*v29, a4, v106);
        v29 += 4;
        v28 -= 32;
        if (!v28)
          goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  sub_1C5A3BFA0();
  v30 = (_QWORD *)operator new();
  *v30 = &unk_1E8191960;
  *(_QWORD *)v106 = v30;
  v106[8] = 0;
  sub_1C5A3BB70();
  v31 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  sub_1C62E14B4();
  *(_OWORD *)&v106[8] = 0u;
  *(_OWORD *)&v106[32] = 0u;
  *(_QWORD *)v106 = &v106[8];
  *(_QWORD *)&v106[24] = &v106[32];
  v107 = 0u;
  *(_QWORD *)&v106[48] = &v107;
  LOBYTE(v108) = 0;
  sub_1C62E158C();
  sub_1C47655E8((uint64_t)&v106[48], (_QWORD *)v107);
  sub_1C47655E8((uint64_t)&v106[24], *(_QWORD **)&v106[32]);
  sub_1C47655E8((uint64_t)v106, *(_QWORD **)&v106[8]);
  v96 = 0;
  v95 = 0u;
  *(_QWORD *)v106 = &v106[16];
  *(_QWORD *)&v106[8] = 0x10000000000;
  v141 = 0u;
  v142 = 0;
  v143 = 1;
  v32 = 2096;
  v33 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v106[v32] = v33;
    v32 += 16;
  }
  while (v32 != 2224);
  v145 = v147;
  v146 = 0x1000000000;
  v148 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v145 != v147)
    free(v145);
  if ((v143 & 1) == 0)
    MEMORY[0x1CAA32FB4](v144, 8);
  MEMORY[0x1CAA32FB4](v141, 8);
  if (*(_BYTE **)v106 == &v106[16])
  {
    if (HIDWORD(a2))
      goto LABEL_63;
  }
  else
  {
    free(*(void **)v106);
    if (HIDWORD(a2))
      goto LABEL_63;
  }
  if ((_DWORD)a2 == 3)
    sub_1C62E6530();
LABEL_63:
  v34 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v34)
  {
    v35 = 32 * v34;
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      *(_QWORD *)v106 = a2;
      if (!*v36)
        goto LABEL_165;
      (*(void (**)(_QWORD, __int128 *, _BYTE *))(*(_QWORD *)*v36 + 48))(*v36, &v95, v106);
      v36 += 4;
      v35 -= 32;
    }
    while (v35);
  }
  sub_1C5A3BBD8(&v95, *(_BYTE *)(a1 + 26), (uint64_t)v106);
  sub_1C5A3BB70();
  v37 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  llvm::getInlineParams(a2, SHIDWORD(a2), (uint64_t)v94);
  llvm::ModuleInlinerWrapperPass::ModuleInlinerWrapperPass((uint64_t)v106, (uint64_t)v94, 1, 0, 0);
  sub_1C62E18E0();
  v102 = (char *)&v111 + 8;
  sub_1C4764BBC((void ***)&v102);
  v102 = &v110;
  sub_1C4764BBC((void ***)&v102);
  v102 = (char *)&v108 + 8;
  sub_1C4764BBC((void ***)&v102);
  sub_1C5A3BFA0();
  v132 = 0u;
  *(_OWORD *)&v128[8] = 0u;
  v126 = 1065353216;
  v121 = 0;
  v123 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  memset(&v106[24], 0, 32);
  *(_QWORD *)v106 = &v106[32];
  *(_QWORD *)&v106[8] = &v106[32];
  *(_QWORD *)&v106[16] = 32;
  *(_QWORD *)&v123 = 0;
  v122 = 0;
  DWORD2(v123) = 0;
  v124 = 0u;
  v125 = 0u;
  v127 = 0u;
  *(_OWORD *)v128 = 0u;
  *(_DWORD *)&v128[16] = 1065353216;
  v130 = 0uLL;
  v129 = 0;
  *(_QWORD *)&v132 = 0;
  v131 = 0;
  DWORD2(v132) = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)v106);
  v38 = operator new();
  *(_QWORD *)v38 = &unk_1E81914A0;
  *(_DWORD *)(v38 + 8) = 3;
  *(_QWORD *)v106 = v38;
  sub_1C6297060((uint64_t)a4, (uint64_t *)v106);
  v39 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v93 = 0;
  v92 = 0u;
  *(_QWORD *)v106 = &v106[16];
  *(_QWORD *)&v106[8] = 0x10000000000;
  v141 = 0u;
  v142 = 0;
  v143 = 1;
  v40 = 2096;
  v41 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v106[v40] = v41;
    v40 += 16;
  }
  while (v40 != 2224);
  v145 = v147;
  v146 = 0x1000000000;
  v148 = dword_1ED8337E0;
  sub_1C5A49A88();
  if (v145 != v147)
    free(v145);
  if ((v143 & 1) == 0)
    MEMORY[0x1CAA32FB4](v144, 8);
  MEMORY[0x1CAA32FB4](v141, 8);
  if (*(_BYTE **)v106 != &v106[16])
    free(*(void **)v106);
  v42 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v42)
  {
    v43 = 32 * v42;
    v44 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      *(_QWORD *)v106 = a2;
      if (!*v44)
        goto LABEL_165;
      (*(void (**)(_QWORD, __int128 *, _BYTE *))(*(_QWORD *)*v44 + 48))(*v44, &v92, v106);
      v44 += 4;
      v43 -= 32;
    }
    while (v43);
  }
  if (byte_1ED832C38)
    sub_1C62E6894();
  *(_QWORD *)&v106[48] = 0;
  *(_QWORD *)&v106[40] = 0;
  LOWORD(v107) = 0;
  *((_QWORD *)&v107 + 1) = (char *)&v108 + 8;
  *(_QWORD *)&v108 = 0x1000000000;
  v117 = 0uLL;
  *((_QWORD *)&v116 + 1) = &v117;
  BYTE8(v118) = 1;
  DWORD1(v118) = dword_1ED835E10;
  sub_1C62E7664();
  sub_1C62EA844((uint64_t)v106);
  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_127;
  v45 = *(_DWORD *)(a1 + 108);
  if (v45 == 2)
  {
    if (*(char *)(a1 + 55) < 0)
    {
      sub_1C47EBC30(&v85, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      v85 = *v15;
      v86 = *(_QWORD *)(a1 + 48);
    }
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1C47EBC30(v83, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)v83 = *(_OWORD *)(a1 + 80);
      v84 = *(_QWORD *)(a1 + 96);
    }
    v52 = *(_QWORD *)(a1 + 120);
    v82 = v52;
    if (v52)
    {
      v53 = (unsigned int *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, (unint64_t)a2, 0, 1, (uint64_t)&v85, (uint64_t)v83, &v82);
      do
      {
        v55 = __ldaxr(v53);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v53));
      if (!v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    else
    {
      llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, (unint64_t)a2, 0, 1, (uint64_t)&v85, (uint64_t)v83, &v82);
    }
    if (SHIBYTE(v84) < 0)
      operator delete(v83[0]);
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_127;
    v51 = (void **)&v85;
  }
  else
  {
    if (v45 != 1)
      goto LABEL_127;
    if (*(char *)(a1 + 79) < 0)
    {
      sub_1C47EBC30(&v90, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      v90 = *(_OWORD *)(a1 + 56);
      v91 = *(_QWORD *)(a1 + 72);
    }
    if (*(char *)(a1 + 103) < 0)
    {
      sub_1C47EBC30(v88, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)v88 = *(_OWORD *)(a1 + 80);
      v89 = *(_QWORD *)(a1 + 96);
    }
    v46 = *(_QWORD *)(a1 + 120);
    v87 = v46;
    if (v46)
    {
      v47 = (unsigned int *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, (unint64_t)a2, 1, 1, (uint64_t)&v90, (uint64_t)v88, &v87);
      do
      {
        v49 = __ldaxr(v47);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v47));
      if (!v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    else
    {
      llvm::PassBuilder::addPGOInstrPasses(a1, (uint64_t)a4, (unint64_t)a2, 1, 1, (uint64_t)&v90, (uint64_t)v88, &v87);
    }
    if (SHIBYTE(v89) < 0)
      operator delete(v88[0]);
    if ((SHIBYTE(v91) & 0x80000000) == 0)
      goto LABEL_127;
    v51 = (void **)&v90;
  }
  operator delete(*v51);
LABEL_127:
  bzero(v106, 0x2C0uLL);
  *(_QWORD *)&v106[48] = (char *)&v107 + 8;
  DWORD1(v107) = 16;
  *((_QWORD *)&v115 + 1) = (char *)&v116 + 8;
  DWORD1(v116) = 8;
  v130 = 0u;
  LODWORD(v131) = 0;
  *(_QWORD *)&v132 = v133;
  HIDWORD(v132) = 16;
  memset(&v133[128], 0, 44);
  v134 = v136;
  v135 = 2;
  v136[1] = 0u;
  v137 = 0;
  v138 = &v140;
  v139 = 2;
  sub_1C62E8770();
  sub_1C5A55934((uint64_t)v106);
  sub_1C62E88A4();
  sub_1C5A3BBD8(&v92, *(_BYTE *)(a1 + 26), (uint64_t)v106);
  sub_1C5A3BB70();
  v57 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (_QWORD *)operator new();
  *v58 = &unk_1E8191460;
  *(_QWORD *)v106 = v58;
  sub_1C6297060((uint64_t)a4, (uint64_t *)v106);
  v59 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1C62E122C();
  v60 = (_QWORD *)operator new();
  *v60 = &unk_1E81913E0;
  *(_QWORD *)v106 = v60;
  v106[8] = 0;
  sub_1C5A3BB70();
  v61 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v80 = 0uLL;
  v81 = 0;
  v102 = *(void **)(a1 + 16);
  LODWORD(v103) = 1;
  sub_1C62E42D0((uint64_t *)&v102, 1, 1, 0, (uint64_t)v106);
  sub_1C62E4E40((uint64_t)&v80, (__n128 *)v106);
  v78 = (void **)&v106[8];
  sub_1C4764BBC(&v78);
  v62 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (byte_1ED8320F8)
  {
    sub_1C62E761C();
  }
  else
  {
    sub_1C62EA96C((uint64_t)v106, 0, 0);
    sub_1C62E9048();
    sub_1C5A55A68((uint64_t)v106);
  }
  memset(v106, 0, 48);
  sub_1C62E745C((uint64_t)&v80, (uint64_t)v106);
  sub_1C62E6AD0();
  v106[0] = 0;
  sub_1C62E8FF4();
  v102 = v104;
  v103 = 0x600000000;
  v104[12] = 0;
  memset(v105, 0, sizeof(v105));
  if (a2 >= 2 && byte_1ED832338)
    sub_1C62E932C(&v102);
  v106[0] = 1;
  sub_1C62E9A4C((uint64_t)&v102, v106);
  sub_1C62E9934();
  v63 = *(_BYTE *)(a1 + 12);
  v64 = *(_BYTE *)(a1 + 11) ^ 1;
  *(_DWORD *)v106 = (_DWORD)a2;
  v106[4] = v64;
  v106[5] = v63;
  sub_1C62E9AC8((uint64_t)&v102, (uint64_t *)v106);
  sub_1C62E4F10((uint64_t)&v102, 0, 1, 0, (uint64_t)v106);
  sub_1C62E4E40((uint64_t)&v80, (__n128 *)v106);
  v78 = (void **)&v106[8];
  sub_1C4764BBC(&v78);
  v65 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_1C62E7910();
  llvm::PassBuilder::addVectorPasses(a1, (unint64_t)a2, (uint64_t)&v80, 1);
  v66 = (_QWORD *)operator new();
  *v66 = &unk_1E81914E0;
  *(_QWORD *)v106 = v66;
  sub_1C6297060((uint64_t)a4, (uint64_t *)v106);
  v67 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v68)
  {
    v69 = 32 * v68;
    v70 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    do
    {
      *(_QWORD *)v106 = a2;
      if (!*v70)
        goto LABEL_165;
      (*(void (**)(_QWORD, __int128 *, _BYTE *))(*(_QWORD *)*v70 + 48))(*v70, &v80, v106);
      v70 += 4;
      v69 -= 32;
    }
    while (v69);
  }
  *(_QWORD *)&v106[48] = 0;
  *(_QWORD *)&v106[40] = 0;
  LOWORD(v107) = 0;
  *((_QWORD *)&v107 + 1) = (char *)&v108 + 8;
  *(_QWORD *)&v108 = 0x1000000000;
  v117 = 0uLL;
  *((_QWORD *)&v116 + 1) = &v117;
  BYTE8(v118) = 1;
  DWORD1(v118) = dword_1ED835E10;
  sub_1C62E7664();
  sub_1C62EA844((uint64_t)v106);
  sub_1C5A3BBD8(&v80, *(_BYTE *)(a1 + 26), (uint64_t)v106);
  sub_1C5A3BB70();
  v71 = *(_QWORD *)v106;
  *(_QWORD *)v106 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v106[0] = 0;
  *(_QWORD *)&v106[8] = a3;
  *(_QWORD *)&v106[16] = 0;
  v106[24] = 0;
  sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
  v106[0] = 0;
  *(_QWORD *)&v106[8] = 0;
  *(_QWORD *)&v106[16] = 0;
  v106[24] = 1;
  sub_1C62E1CB0((uint64_t)a4, (__n128 *)v106);
  if (byte_1ED8324B8 || *(_BYTE *)(a1 + 1984))
    sub_1C62E184C();
  *(_QWORD *)v106 = 0x100010000000001;
  *(_QWORD *)&v106[8] = 16842753;
  *(_QWORD *)&v106[16] = 0;
  sub_1C5C48FA4((uint64_t)v106);
  v72 = operator new();
  *(_OWORD *)(v72 + 8) = *(_OWORD *)v106;
  *(_QWORD *)(v72 + 24) = *(_QWORD *)&v106[16];
  *(_QWORD *)v72 = &unk_1E81907A0;
  v78 = (void **)v72;
  v79 = 0;
  sub_1C5A3BB70();
  v73 = v78;
  v78 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  sub_1C62E16A0();
  v132 = 0u;
  *(_OWORD *)&v128[8] = 0u;
  v126 = 1065353216;
  v121 = 0;
  v123 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  memset(&v106[24], 0, 32);
  *(_QWORD *)v106 = &v106[32];
  *(_QWORD *)&v106[8] = &v106[32];
  *(_QWORD *)&v106[16] = 32;
  *(_QWORD *)&v123 = 0;
  v122 = 0;
  DWORD2(v123) = 0;
  v124 = 0u;
  v125 = 0u;
  v127 = 0u;
  *(_OWORD *)v128 = 0u;
  *(_DWORD *)&v128[16] = 1065353216;
  v130 = 0uLL;
  v129 = 0;
  *(_QWORD *)&v132 = 0;
  v131 = 0;
  DWORD2(v132) = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)v106);
  if (*(_BYTE *)(a1 + 25))
    sub_1C62E1D58();
  v74 = *(unsigned int *)(a1 + 872);
  if ((_DWORD)v74)
  {
    v75 = *(_QWORD *)(a1 + 864);
    v76 = 32 * v74;
    v77 = (_QWORD *)(v75 + 24);
    do
    {
      *(_QWORD *)v106 = a2;
      if (!*v77)
        goto LABEL_165;
      (*(void (**)(_QWORD, _QWORD *, _BYTE *))(*(_QWORD *)*v77 + 48))(*v77, a4, v106);
      v77 += 4;
      v76 -= 32;
    }
    while (v76);
  }
  sub_1C5A698C4();
  *(_QWORD *)v106 = (char *)&v105[1] + 8;
  sub_1C4764BBC((void ***)v106);
  *(_QWORD *)v106 = v105;
  sub_1C4764BBC((void ***)v106);
  if (v102 != v104)
    free(v102);
  *(_QWORD *)v106 = &v80;
  sub_1C4764BBC((void ***)v106);
  *(_QWORD *)v106 = &v92;
  sub_1C4764BBC((void ***)v106);
  *(_QWORD *)v106 = &v95;
  sub_1C4764BBC((void ***)v106);
}

void llvm::PassBuilder::buildO0DefaultPipeline(_BYTE *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _BYTE *v6;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *__p[2];
  uint64_t v66;
  void *__dst[2];
  uint64_t v68;
  void **v69;
  __int128 v70;
  _QWORD v71[5];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  _BYTE v93[24];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;

  v6 = a1;
  v99 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a1[128])
  {
    if (!a1[113] || (*(_QWORD *)&v70 = *(_QWORD *)a1, sub_1C62E2594(), v6[128]))
    {
      v8 = *((_DWORD *)v6 + 26);
      if ((v8 - 1) <= 1)
      {
        if ((char)v6[55] < 0)
        {
          a1 = sub_1C47EBC30(__dst, *((void **)v6 + 4), *((_QWORD *)v6 + 5));
        }
        else
        {
          *(_OWORD *)__dst = *((_OWORD *)v6 + 2);
          v68 = *((_QWORD *)v6 + 6);
        }
        if ((char)v6[103] < 0)
        {
          a1 = sub_1C47EBC30(__p, *((void **)v6 + 10), *((_QWORD *)v6 + 11));
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v6 + 5);
          v66 = *((_QWORD *)v6 + 12);
        }
        v9 = *((_QWORD *)v6 + 15);
        v64 = v9;
        if (v9)
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          llvm::PassBuilder::addPGOInstrPassesForO0((uint64_t)a1, (uint64_t)a4, v8 == 1, 0, (uint64_t)__dst, (uint64_t)__p, &v64);
          do
          {
            v12 = __ldaxr(v10);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v10));
          if (!v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        else
        {
          llvm::PassBuilder::addPGOInstrPassesForO0((uint64_t)a1, (uint64_t)a4, v8 == 1, 0, (uint64_t)__dst, (uint64_t)__p, &v64);
        }
        if (SHIBYTE(v66) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v68) < 0)
          operator delete(__dst[0]);
      }
    }
  }
  v14 = *((unsigned int *)v6 + 238);
  if ((_DWORD)v14)
  {
    v15 = 32 * v14;
    v16 = (_QWORD *)(*((_QWORD *)v6 + 118) + 24);
    while (1)
    {
      *(_QWORD *)&v70 = a2;
      if (!*v16)
        break;
      (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*v16 + 48))(*v16, a4, &v70);
      v16 += 4;
      v15 -= 32;
      if (!v15)
        goto LABEL_27;
    }
LABEL_109:
    sub_1C485C2F0();
  }
LABEL_27:
  if (v6[128])
  {
    if (v6[112])
    {
      v17 = (_QWORD *)operator new();
      *v17 = &unk_1E81921E0;
      *(_QWORD *)&v70 = v17;
      BYTE8(v70) = 0;
      sub_1C5A3BB70();
      v18 = v70;
      *(_QWORD *)&v70 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  v19 = *((unsigned int *)v6 + 258);
  if ((_DWORD)v19)
  {
    v20 = 32 * v19;
    v21 = (_QWORD *)(*((_QWORD *)v6 + 128) + 24);
    do
    {
      *(_QWORD *)&v70 = a2;
      if (!*v21)
        goto LABEL_109;
      (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*v21 + 48))(*v21, a4, &v70);
      v21 += 4;
      v20 -= 32;
    }
    while (v20);
  }
  LOBYTE(v70) = 0;
  sub_1C5A3BE6C();
  if (v6[25])
    sub_1C62E1D58();
  if (byte_1ED832B78)
  {
    v22 = operator new();
    *(_QWORD *)v22 = &unk_1E8191E20;
    *(_BYTE *)(v22 + 8) = 1;
    *(_QWORD *)&v70 = v22;
    BYTE8(v70) = 0;
    sub_1C5A3BB70();
    v23 = v70;
    *(_QWORD *)&v70 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = *((unsigned int *)v6 + 118);
  if ((_DWORD)v24)
  {
    v70 = 0uLL;
    v71[0] = 0;
    v25 = 32 * v24;
    v26 = (_QWORD *)(*((_QWORD *)v6 + 58) + 24);
    do
    {
      *(_QWORD *)&v62 = a2;
      if (!*v26)
        goto LABEL_109;
      (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v26 + 48))(*v26, &v70, &v62);
      v26 += 4;
      v25 -= 32;
    }
    while (v25);
    if ((_QWORD)v70 != *((_QWORD *)&v70 + 1))
    {
      sub_1C5703824(&v70, (uint64_t *)&v62);
      sub_1C6297060((uint64_t)a4, (uint64_t *)&v62);
      v27 = v62;
      *(_QWORD *)&v62 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    *(_QWORD *)&v62 = &v70;
    sub_1C4764BBC((void ***)&v62);
  }
  v28 = *((unsigned int *)v6 + 58);
  if ((_DWORD)v28)
  {
    *(_QWORD *)&v70 = v71;
    *((_QWORD *)&v70 + 1) = 0x600000000;
    DWORD2(v72) = 0;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v29 = 32 * v28;
    v30 = (_QWORD *)(*((_QWORD *)v6 + 28) + 24);
    do
    {
      *(_QWORD *)&v62 = a2;
      if (!*v30)
        goto LABEL_109;
      (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v30 + 48))(*v30, &v70, &v62);
      v30 += 4;
      v29 -= 32;
    }
    while (v29);
    if ((_QWORD)v73 != *((_QWORD *)&v73 + 1) || *((_QWORD *)&v74 + 1) != (_QWORD)v75)
    {
      sub_1C62E4F10((uint64_t)&v70, 0, 0, 0, (uint64_t)&v62);
      sub_1C5A3DDB8(&v62, 0, (uint64_t)&v60);
      sub_1C5A3BB70();
      v32 = v60;
      *(_QWORD *)&v60 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v69 = (void **)&v62 + 1;
      sub_1C4764BBC(&v69);
      v33 = v62;
      *(_QWORD *)&v62 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
    *(_QWORD *)&v62 = (char *)&v74 + 8;
    sub_1C4764BBC((void ***)&v62);
    *(_QWORD *)&v62 = &v73;
    sub_1C4764BBC((void ***)&v62);
    if ((_QWORD *)v70 != v71)
      free((void *)v70);
  }
  v34 = *((unsigned int *)v6 + 78);
  if ((_DWORD)v34)
  {
    *(_QWORD *)&v70 = v71;
    *((_QWORD *)&v70 + 1) = 0x600000000;
    DWORD2(v72) = 0;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v35 = 32 * v34;
    v36 = (_QWORD *)(*((_QWORD *)v6 + 38) + 24);
    do
    {
      *(_QWORD *)&v62 = a2;
      if (!*v36)
        goto LABEL_109;
      (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v36 + 48))(*v36, &v70, &v62);
      v36 += 4;
      v35 -= 32;
    }
    while (v35);
    if ((_QWORD)v73 != *((_QWORD *)&v73 + 1) || *((_QWORD *)&v74 + 1) != (_QWORD)v75)
    {
      sub_1C62E4F10((uint64_t)&v70, 0, 0, 0, (uint64_t)&v62);
      sub_1C5A3DDB8(&v62, 0, (uint64_t)&v60);
      sub_1C5A3BB70();
      v38 = v60;
      *(_QWORD *)&v60 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v69 = (void **)&v62 + 1;
      sub_1C4764BBC(&v69);
      v39 = v62;
      *(_QWORD *)&v62 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    *(_QWORD *)&v62 = (char *)&v74 + 8;
    sub_1C4764BBC((void ***)&v62);
    *(_QWORD *)&v62 = &v73;
    sub_1C4764BBC((void ***)&v62);
    if ((_QWORD *)v70 != v71)
      free((void *)v70);
  }
  v40 = *((unsigned int *)v6 + 98);
  if ((_DWORD)v40)
  {
    v70 = 0uLL;
    v71[0] = 0;
    v41 = 32 * v40;
    v42 = (_QWORD *)(*((_QWORD *)v6 + 48) + 24);
    do
    {
      *(_QWORD *)&v62 = a2;
      if (!*v42)
        goto LABEL_109;
      (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v42 + 48))(*v42, &v70, &v62);
      v42 += 4;
      v41 -= 32;
    }
    while (v41);
    if ((_QWORD)v70 != *((_QWORD *)&v70 + 1))
    {
      sub_1C5A3BBD8(&v70, 0, (uint64_t)&v62);
      sub_1C5A3BB70();
      v43 = v62;
      *(_QWORD *)&v62 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    *(_QWORD *)&v62 = &v70;
    sub_1C4764BBC((void ***)&v62);
  }
  v44 = *((unsigned int *)v6 + 158);
  if ((_DWORD)v44)
  {
    v45 = 32 * v44;
    v46 = (_QWORD *)(*((_QWORD *)v6 + 78) + 24);
    do
    {
      *(_QWORD *)&v70 = a2;
      if (!*v46)
        goto LABEL_109;
      (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*v46 + 48))(*v46, a4, &v70);
      v46 += 4;
      v45 -= 32;
    }
    while (v45);
  }
  v47 = *((unsigned int *)v6 + 138);
  if ((_DWORD)v47)
  {
    v70 = 0uLL;
    v71[0] = 0;
    v48 = 32 * v47;
    v49 = (_QWORD *)(*((_QWORD *)v6 + 68) + 24);
    do
    {
      *(_QWORD *)&v62 = a2;
      if (!*v49)
        goto LABEL_109;
      (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*v49 + 48))(*v49, &v70, &v62);
      v49 += 4;
      v48 -= 32;
    }
    while (v48);
    if ((_QWORD)v70 != *((_QWORD *)&v70 + 1))
    {
      sub_1C5A3BBD8(&v70, 0, (uint64_t)&v62);
      sub_1C5A3BB70();
      v50 = v62;
      *(_QWORD *)&v62 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    *(_QWORD *)&v62 = &v70;
    sub_1C4764BBC((void ***)&v62);
  }
  v62 = 0uLL;
  v63 = 0;
  sub_1C62E14FC();
  v60 = 0uLL;
  v61 = 0;
  LOBYTE(v70) = 0;
  sub_1C62E4890();
  sub_1C5703824(&v60, (uint64_t *)&v70);
  sub_1C6297060((uint64_t)&v62, (uint64_t *)&v70);
  v51 = v70;
  *(_QWORD *)&v70 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = (_QWORD *)operator new();
  *v52 = &unk_1E8191FA0;
  *(_QWORD *)&v70 = v52;
  BYTE8(v70) = 0;
  sub_1C5A3BB70();
  v53 = v70;
  *(_QWORD *)&v70 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v96 = 0;
  v98 = 0u;
  *(_OWORD *)&v93[8] = 0u;
  v91 = 1065353216;
  v86 = 0;
  v88 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  memset(&v71[1], 0, 32);
  *(_QWORD *)&v70 = &v71[2];
  *((_QWORD *)&v70 + 1) = &v71[2];
  v71[0] = 32;
  v87 = 0;
  *(_QWORD *)&v88 = 0;
  DWORD2(v88) = 0;
  v89 = 0u;
  v90 = 0u;
  v92 = 0u;
  *(_OWORD *)v93 = 0u;
  *(_DWORD *)&v93[16] = 1065353216;
  v95 = 0;
  v94 = 0;
  *(_QWORD *)&v98 = 0;
  v97 = 0;
  DWORD2(v98) = 0;
  sub_1C5A3BF08();
  sub_1C56E07A8((uint64_t)&v70);
  v70 = v62;
  v71[0] = v63;
  v62 = 0uLL;
  v63 = 0;
  sub_1C6302678();
  v69 = (void **)&v70;
  sub_1C4764BBC(&v69);
  v54 = *((unsigned int *)v6 + 178);
  if ((_DWORD)v54)
  {
    v55 = *((_QWORD *)v6 + 88);
    v56 = 32 * v54;
    v57 = (_QWORD *)(v55 + 24);
    do
    {
      *(_QWORD *)&v70 = a2;
      if (!*v57)
        goto LABEL_109;
      (*(void (**)(_QWORD, _QWORD *, __int128 *))(*(_QWORD *)*v57 + 48))(*v57, a4, &v70);
      v57 += 4;
      v56 -= 32;
    }
    while (v56);
  }
  if ((a3 & 1) != 0)
  {
    sub_1C62E13E0();
    sub_1C62E1DA0();
  }
  v58 = (_QWORD *)operator new();
  *v58 = &unk_1E81906A0;
  *(_QWORD *)&v70 = v58;
  BYTE8(v70) = 0;
  sub_1C5A3BB70();
  v59 = v70;
  *(_QWORD *)&v70 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  *(_QWORD *)&v70 = &v60;
  sub_1C4764BBC((void ***)&v70);
  *(_QWORD *)&v70 = &v62;
  sub_1C4764BBC((void ***)&v70);
}

uint64_t sub_1C5A6BBC8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C5A6BBDC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C6302BA4(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C5A6BC20(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED81AB20 >= HIDWORD(qword_1ED81AB20))
  {
    v3 = qword_1ED81AB20 + 1;
    if (qword_1ED81AB18 <= a1 && qword_1ED81AB18 + 48 * (unint64_t)qword_1ED81AB20 > a1)
    {
      v5 = a1 - qword_1ED81AB18;
      sub_1C6302C58(v3);
      return qword_1ED81AB18 + v5;
    }
    else
    {
      sub_1C6302C58(v3);
    }
  }
  return a1;
}

__n128 sub_1C5A6BC94(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81A9B0, "enable-no-rerun-simplification-pipeline", 0x27uLL);
  v6 = *a1;
  byte_1ED81AA30 = **a1;
  byte_1ED81AA41 = 1;
  byte_1ED81AA40 = *v6;
  word_1ED81A9BA = (32 * (*a2 & 3)) | word_1ED81A9BA & 0xFF9F;
  result = *a3;
  xmmword_1ED81A9D0 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5A6BD18(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81924E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5A6BD54(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81924E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5A6BDA0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PGOInstrumentationGenCreateVar]";
  v10[1] = 86;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x56)
    v1 = 86;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_433[v1];
  v3 = 86 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C5A6BE58()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::CoroConditionalWrapper]";
  v10[1] = 78;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4E)
    v1 = 78;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_434[v1];
  v3 = 78 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A6BF10()
{
  return operator new();
}

uint64_t sub_1C5A6BF30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  *(_QWORD *)result = v3;
  *(__n128 *)(result + 8) = a3;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

__n128 sub_1C5A6BF54()
{
  __n128 *v0;
  __n128 result;

  result = *v0;
  v0->n128_u64[0] = 0;
  v0->n128_u64[1] = 0;
  v0[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1C5A6BF68()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v3 = &v4;
  v2 = 1;
  *(_QWORD *)&v1 = "Enable ML policy for inliner. Currently trained for -Oz only";
  *((_QWORD *)&v1 + 1) = 60;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "default";
  v6[1] = 7;
  v8 = "Heuristics-based inliner version.";
  v9 = 33;
  v10 = "development";
  v11 = 11;
  v12 = 2;
  v13 = "Use development mode (runtime-loadable model).";
  v14 = 46;
  v7 = 0;
  v15 = "release";
  v16 = 7;
  v17 = 1;
  v18 = "Use release mode (AOT-compiled model).";
  v19 = 38;
  v5.n128_u64[1] = 0x400000003;
  sub_1C63029FC(&v3, &v2, &v1, (uint64_t)&v5);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6302530, &qword_1ED81AA70, &dword_1C475E000);
  LOBYTE(v2) = 0;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Run synthetic function entry count generation pass";
  v5.n128_u64[1] = 50;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED81A530, "enable-npm-synthetic-counts", (_BYTE **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81A530, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable inline deferral during PGO";
  v5.n128_u64[1] = 33;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81A5F0, "enable-npm-pgo-inline-deferral", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81A5F0, &dword_1C475E000);
  LOBYTE(v2) = 0;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Enable memory profiler";
  v5.n128_u64[1] = 22;
  sub_1C6302D24((char **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81A6B0, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable module inliner";
  v5.n128_u64[1] = 21;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81A770, "enable-module-inliner", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81A770, &dword_1C475E000);
  LOBYTE(v2) = 1;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Perform mandatory inlinings module-wide, before performing inlining.";
  v5.n128_u64[1] = 68;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED81A830, "mandatory-inlining-first", (_BYTE **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81A830, &dword_1C475E000);
  LOBYTE(v2) = 1;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Enable non-trivial loop unswitching for -O3";
  v5.n128_u64[1] = 43;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED81A8F0, "enable-npm-O3-nontrivial-unswitch", (_BYTE **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81A8F0, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Eagerly invalidate more analyses in default pipelines";
  v5.n128_u64[1] = 53;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED834B88, "eagerly-invalidate-analyses", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED834B88, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Prevent running the simplification pipeline on a function more than once in the cas"
                                     "e that SCC mutations cause a function to be visited multiple times as long as the f"
                                     "unction has not been changed";
  v5.n128_u64[1] = 194;
  sub_1C6302E6C((char **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81A9B0, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable function merging as part of the optimization pipeline";
  v5.n128_u64[1] = 60;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED834C48, "enable-merge-functions", (_BYTE **)&v1, &v3, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED834C48, &dword_1C475E000);
}

void llvm::PassPlugin::Load(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *PermanentLibrary;
  void *v5;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(__int128 *__return_ptr);
  __int128 v10;
  const char *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  void *__p[2];
  void **v26;
  _OWORD v27[3];
  _QWORD v28[2];
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  void *v34[2];
  uint64_t v35;

  v2 = a1;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary((const char *)a1, (uint64_t)v34);
  if (PermanentLibrary != &llvm::sys::DynamicLibrary::Invalid)
  {
    v5 = PermanentLibrary;
    if (*(char *)(v2 + 23) < 0)
    {
      sub_1C47EBC30(__p, *(void **)v2, *(_QWORD *)(v2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v2;
      v26 = *(void ***)(v2 + 16);
    }
    *(_QWORD *)&v27[0] = v5;
    memset((char *)v27 + 8, 0, 32);
    v9 = (void (*)(__int128 *__return_ptr))dlsym(v5, "llvmGetPassPluginInfo");
    if (v9)
    {
      v9(&v31);
      *(_OWORD *)((char *)v27 + 8) = v31;
      *(_OWORD *)((char *)&v27[1] + 8) = v32;
      if ((_DWORD)v31 != 1)
      {
        v17[0] = "Wrong API version on plugin '";
        v17[2] = v2;
        v18 = 1027;
        v19[0] = v17;
        v19[2] = "'. Got version ";
        v20 = 770;
        v21[0] = v19;
        v21[2] = DWORD2(v27[0]);
        v22 = 2050;
        v23[0] = v21;
        v23[2] = ", supported version is ";
        v24 = 770;
        v28[0] = v23;
        v29 = 1;
        v30 = 2306;
        *(_QWORD *)&v31 = v28;
        *(_QWORD *)&v32 = ".";
        v33 = 770;
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v13 = qword_1ED836B58[0];
        v14 = operator new();
        *(_QWORD *)v14 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v14 + 8));
        *(_QWORD *)(v14 + 32) = 3;
        *(_QWORD *)(v14 + 40) = v13;
        *(_BYTE *)(v14 + 48) = 1;
        goto LABEL_22;
      }
      if (*(_QWORD *)&v27[2])
      {
        *(_OWORD *)a2 = *(_OWORD *)__p;
        v10 = v27[1];
        *(_OWORD *)(a2 + 24) = v27[0];
        *(_BYTE *)(a2 + 64) &= ~1u;
        *(_QWORD *)(a2 + 16) = v26;
        __p[0] = 0;
        __p[1] = 0;
        v26 = 0;
        *(_OWORD *)(a2 + 40) = v10;
        *(_QWORD *)(a2 + 56) = *(_QWORD *)&v27[2];
        goto LABEL_23;
      }
      v28[0] = "Empty entry callback in plugin '";
      v29 = v2;
      v30 = 1027;
      v11 = "'.'";
    }
    else
    {
      v28[0] = "Plugin entry point not found in '";
      v29 = v2;
      v30 = 1027;
      v11 = "'. Is this a legacy plugin?";
    }
    *(_QWORD *)&v31 = v28;
    *(_QWORD *)&v32 = v11;
    v33 = 770;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v16 = qword_1ED836B58[0];
    v14 = operator new();
    *(_QWORD *)v14 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v31, (_QWORD *)(v14 + 8));
    *(_QWORD *)(v14 + 32) = 3;
    *(_QWORD *)(v14 + 40) = v16;
    *(_BYTE *)(v14 + 48) = 1;
LABEL_22:
    *(_BYTE *)(a2 + 64) |= 1u;
    *(_QWORD *)a2 = v14;
LABEL_23:
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    goto LABEL_25;
  }
  v28[0] = "Could not load library '";
  v29 = v2;
  v30 = 1027;
  *(_QWORD *)&v31 = v28;
  *(_QWORD *)&v32 = "': ";
  v33 = 770;
  __p[0] = &v31;
  v26 = v34;
  WORD4(v27[0]) = 1026;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v7 = qword_1ED836B58[0];
  v8 = operator new();
  *(_QWORD *)v8 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)__p, (_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 32) = 3;
  *(_QWORD *)(v8 + 40) = v7;
  *(_BYTE *)(v8 + 48) = 1;
  *(_BYTE *)(a2 + 64) |= 1u;
  *(_QWORD *)a2 = v8;
LABEL_25:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
}

void llvm::IRChangedPrinter::~IRChangedPrinter(llvm::IRChangedPrinter *this)
{
  void **v1;

  *(_QWORD *)this = &unk_1E81925A0;
  v1 = (void **)((char *)this + 8);
  sub_1C4765410(&v1);
}

{
  void **v1;

  *(_QWORD *)this = &unk_1E81925A0;
  v1 = (void **)((char *)this + 8);
  sub_1C4765410(&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_1E81925A0;
  v2 = (void **)((char *)this + 8);
  sub_1C4765410(&v2);
  MEMORY[0x1CAA32FC0](this, 0x10A1C400037C305);
}

uint64_t llvm::ChangeReporter<std::string>::registerRequiredCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = result;
  v10 = result;
  v4 = *(unsigned int *)(a2 + 296);
  if (v4 >= *(_DWORD *)(a2 + 300))
  {
    result = sub_1C5A81448(a2 + 288, &v10);
  }
  else
  {
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 288) + 32 * v4);
    *v5 = result;
    v5[3] = (uint64_t)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
          + 2;
    *(_DWORD *)(a2 + 296) = v4 + 1;
  }
  v10 = v3;
  v6 = *(unsigned int *)(a2 + 440);
  if (v6 >= *(_DWORD *)(a2 + 444))
  {
    result = sub_1C5A8157C(a2 + 432, &v10);
  }
  else
  {
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 432) + 32 * v6);
    *v7 = v3;
    v7[3] = (uint64_t)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
          + 2;
    *(_DWORD *)(a2 + 440) = v6 + 1;
  }
  v10 = v3;
  v8 = *(unsigned int *)(a2 + 584);
  if (v8 >= *(_DWORD *)(a2 + 588))
    return sub_1C5A816B0(a2 + 576, &v10);
  v9 = (uint64_t *)(*(_QWORD *)(a2 + 576) + 32 * v8);
  *v9 = v3;
  v9[3] = (uint64_t)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 584) = v8 + 1;
  return result;
}

{
  return __ZN4llvm14ChangeReporterINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE25registerRequiredCallbacksERNS_28PassInstrumentationCallbacksE(result, a2);
}

void sub_1C5A6C8E8(llvm::raw_ostream *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  const std::string *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ***v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ****v37;
  uint64_t ***v38;
  int v39;
  int v40;
  uint64_t ***v41;
  char *v42;
  size_t v43;
  size_t v44;
  uint64_t ***v45;
  char *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__p;
  char v52;

  if (*a2)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 16))(&v50);
  else
    v50 = 0;
  v4 = sub_1C5A6DAB4(&v50);
  v5 = v50;
  v50 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
  {
    v6 = *a2;
    if (byte_1ED830FC8)
    {
      if (v6)
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 16))(&v49);
      else
        v49 = 0;
      v23 = sub_1C5A6CED4(&v49, 0);
      v24 = v49;
      v49 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = a1;
      v26 = (const std::string *)v23;
      goto LABEL_24;
    }
    v7 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v8 = *a2;
    if (v7 == &llvm::Any::TypeId<llvm::Module const*>::Id)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v26 = *(const std::string **)(*a2 + 8);
      v25 = a1;
LABEL_24:
      sub_1C5A6E294(v25, v26);
      return;
    }
    v9 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    v10 = *a2;
    if (v9 == &llvm::Any::TypeId<llvm::Function const*>::Id)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      sub_1C5A7C03C(a1, *(llvm::Value **)(*a2 + 8));
      return;
    }
    v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v12 = *a2;
    if (v11 != &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
      v13 = *(_QWORD *)(*a2 + 8);
      v14 = *(uint64_t ****)(**(_QWORD **)(v13 + 32) + 56);
      if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
      {
        v47 = 0;
        v46 = &byte_1C871356D;
        goto LABEL_55;
      }
      v15 = ***v14;
      v16 = *(_QWORD *)(v15 + 152);
      v17 = *(unsigned int *)(v15 + 168);
      if ((_DWORD)v17)
      {
        LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v19 = (uint64_t ****)(v16 + 16 * v18);
        v20 = *v19;
        if (*v19 == v14)
        {
LABEL_54:
          v45 = v19[1];
          v48 = (size_t)*v45;
          v46 = (char *)(v45 + 2);
          v47 = v48;
LABEL_55:
          if (llvm::isFunctionInPrintList(v46, v47))
          {
            v52 = 0;
            LOBYTE(__p) = 0;
            llvm::printLoop(v13, a1, (uint64_t)&__p);
            if (v52 < 0)
              operator delete(__p);
          }
          return;
        }
        v21 = 1;
        while (v20 != (uint64_t ***)-4096)
        {
          v22 = v18 + v21++;
          v18 = v22 & (v17 - 1);
          v20 = *(uint64_t ****)(v16 + 16 * v18);
          if (v20 == v14)
          {
            v19 = (uint64_t ****)(v16 + 16 * v18);
            goto LABEL_54;
          }
        }
      }
      v19 = (uint64_t ****)(v16 + 16 * v17);
      goto LABEL_54;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v27 = *(_QWORD *)(*a2 + 8);
    v28 = *(unsigned int *)(v27 + 16);
    if (!(_DWORD)v28)
      return;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 + 8 * v28;
    do
    {
      v31 = *(uint64_t ****)(*(_QWORD *)v29 + 8);
      if (v31)
        v32 = *((_BYTE *)v31 + 16) == 3;
      else
        v32 = 0;
      if (v32)
      {
        if ((*((_DWORD *)v31 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_39;
      }
      else if (*((_BYTE *)v31 + 16) || v31[9] != (uint64_t **)(v31 + 9) || (*((_BYTE *)v31 + 34) & 0x80) != 0)
      {
LABEL_39:
        if ((*((_BYTE *)v31 + 23) & 0x10) != 0)
        {
          v33 = ***v31;
          v34 = *(_QWORD *)(v33 + 152);
          v35 = *(unsigned int *)(v33 + 168);
          if (!(_DWORD)v35)
            goto LABEL_46;
          LODWORD(v36) = (v35 - 1) & ((v31 >> 4) ^ (v31 >> 9));
          v37 = (uint64_t ****)(v34 + 16 * v36);
          v38 = *v37;
          if (*v37 != v31)
          {
            v39 = 1;
            while (v38 != (uint64_t ***)-4096)
            {
              v40 = v36 + v39++;
              v36 = v40 & (v35 - 1);
              v38 = *(uint64_t ****)(v34 + 16 * v36);
              if (v38 == v31)
              {
                v37 = (uint64_t ****)(v34 + 16 * v36);
                goto LABEL_47;
              }
            }
LABEL_46:
            v37 = (uint64_t ****)(v34 + 16 * v35);
          }
LABEL_47:
          v41 = v37[1];
          v44 = (size_t)*v41;
          v42 = (char *)(v41 + 2);
          v43 = v44;
        }
        else
        {
          v43 = 0;
          v42 = &byte_1C871356D;
        }
        if (llvm::isFunctionInPrintList(v42, v43))
          llvm::Function::print((llvm::Function *)v31, a1, 0, 0, 0);
      }
      v29 += 8;
    }
    while (v29 != v30);
  }
}

void llvm::PrintIRInstrumentation::~PrintIRInstrumentation(char **this)
{
  sub_1C5A7E248(this + 1);
}

{
  sub_1C5A7E248(this + 1);
}

uint64_t llvm::PrintIRInstrumentation::pushModuleDesc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t result;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (*(_QWORD *)a4)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 16))(&v30);
  else
    v30 = 0;
  v8 = sub_1C5A6CED4(&v30, 0);
  v9 = v30;
  v30 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(_QWORD *)a4)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 16))(&v27);
  else
    v27 = 0;
  sub_1C5A6D204((char *)__p, &v27);
  v10 = *(_DWORD *)(a1 + 16);
  if (v10 >= *(_DWORD *)(a1 + 20))
  {
    v31 = 0;
    v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 8, 0, 48, &v31);
    v16 = v15;
    v17 = &v15[48 * *(unsigned int *)(a1 + 16)];
    *(_QWORD *)v17 = v8;
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 3) = v29;
    *(_OWORD *)(v17 + 8) = v18;
    __p[1] = 0;
    v29 = 0;
    __p[0] = 0;
    *((_QWORD *)v17 + 4) = a2;
    *((_QWORD *)v17 + 5) = a3;
    v19 = *(char **)(a1 + 8);
    v20 = *(_DWORD *)(a1 + 16);
    if (v20)
    {
      v21 = &v19[48 * v20];
      v22 = v15;
      do
      {
        *(_QWORD *)v22 = *(_QWORD *)v19;
        v23 = *(_OWORD *)(v19 + 8);
        *((_QWORD *)v22 + 3) = *((_QWORD *)v19 + 3);
        *(_OWORD *)(v22 + 8) = v23;
        *((_QWORD *)v19 + 2) = 0;
        *((_QWORD *)v19 + 3) = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_OWORD *)v22 + 2) = *((_OWORD *)v19 + 2);
        v19 += 48;
        v22 += 48;
      }
      while (v19 != v21);
      v19 = *(char **)(a1 + 8);
      v24 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v24)
      {
        v25 = 48 * v24;
        do
        {
          if (v19[v25 - 17] < 0)
            operator delete(*(void **)&v19[v25 - 40]);
          v25 -= 48;
        }
        while (v25);
        v19 = *(char **)(a1 + 8);
      }
    }
    v26 = v31;
    if (v19 != (char *)(a1 + 24))
      free(v19);
    *(_QWORD *)(a1 + 8) = v16;
    v13 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 20) = v26;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8) + 48 * v10;
    *(_QWORD *)v11 = v8;
    v12 = *(_OWORD *)__p;
    *(_QWORD *)(v11 + 24) = v29;
    *(_OWORD *)(v11 + 8) = v12;
    __p[1] = 0;
    v29 = 0;
    __p[0] = 0;
    *(_QWORD *)(v11 + 32) = a2;
    *(_QWORD *)(v11 + 40) = a3;
    v13 = *(_DWORD *)(a1 + 16) + 1;
  }
  *(_DWORD *)(a1 + 16) = v13;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C5A6CED4(_QWORD *a1, char a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ***v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  size_t v40;
  size_t v41;
  uint64_t ***v42;
  char *v43;
  size_t v44;
  size_t v45;

  v4 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v5 = *a1;
  if (v4 == &llvm::Any::TypeId<llvm::Module const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v19 = *a1 + 8;
    return *(_QWORD *)v19;
  }
  v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v7 = *a1;
  if (v6 != &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    v8 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    v9 = *a1;
    if (v8 != &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
      v10 = *(uint64_t ****)(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 32) + 56);
      if ((a2 & 1) != 0)
        goto LABEL_50;
      if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
      {
        v11 = ***v10;
        v12 = *(_QWORD *)(v11 + 152);
        v13 = *(unsigned int *)(v11 + 168);
        if ((_DWORD)v13)
        {
          LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
          v15 = (uint64_t ****)(v12 + 16 * v14);
          v16 = *v15;
          if (*v15 != v10)
          {
            v17 = 1;
            while (v16 != (uint64_t ***)-4096)
            {
              v18 = v14 + v17++;
              v14 = v18 & (v13 - 1);
              v16 = *(uint64_t ****)(v12 + 16 * v14);
              if (v16 == v10)
                goto LABEL_20;
            }
            goto LABEL_47;
          }
LABEL_48:
          v42 = v15[1];
          v45 = (size_t)*v42;
          v43 = (char *)(v42 + 2);
          v44 = v45;
          goto LABEL_49;
        }
        goto LABEL_47;
      }
      goto LABEL_53;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v24 = *(_QWORD *)(*a1 + 8);
    v25 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v25)
      return 0;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = v26 + 8 * v25;
    while (1)
    {
      v28 = *(uint64_t ****)(*(_QWORD *)v26 + 8);
      if ((a2 & 1) != 0)
      {
LABEL_46:
        v19 = (uint64_t)(v28 + 5);
        return *(_QWORD *)v19;
      }
      if (v28 && *((_BYTE *)v28 + 16) == 3)
      {
        if ((*((_DWORD *)v28 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_43;
      }
      else if (!*((_BYTE *)v28 + 16) && v28[9] == (uint64_t **)(v28 + 9) && (*((_BYTE *)v28 + 34) & 0x80) == 0)
      {
        goto LABEL_43;
      }
      if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
        break;
      v40 = 0;
      v39 = &byte_1C871356D;
LABEL_42:
      if (llvm::isFunctionInPrintList(v39, v40))
        goto LABEL_46;
LABEL_43:
      v26 += 8;
      if (v26 == v27)
        return 0;
    }
    v30 = ***v28;
    v31 = *(_QWORD *)(v30 + 152);
    v32 = *(unsigned int *)(v30 + 168);
    if ((_DWORD)v32)
    {
      LODWORD(v33) = (v32 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v34 = (uint64_t ****)(v31 + 16 * v33);
      v35 = *v34;
      if (*v34 == v28)
      {
LABEL_41:
        v38 = v34[1];
        v41 = (size_t)*v38;
        v39 = (char *)(v38 + 2);
        v40 = v41;
        goto LABEL_42;
      }
      v36 = 1;
      while (v35 != (uint64_t ***)-4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & (v32 - 1);
        v35 = *(uint64_t ****)(v31 + 16 * v33);
        if (v35 == v28)
        {
          v34 = (uint64_t ****)(v31 + 16 * v33);
          goto LABEL_41;
        }
      }
    }
    v34 = (uint64_t ****)(v31 + 16 * v32);
    goto LABEL_41;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v10 = *(uint64_t ****)(*a1 + 8);
  if ((a2 & 1) != 0)
    goto LABEL_50;
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v20 = ***v10;
    v12 = *(_QWORD *)(v20 + 152);
    v13 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v15 = (uint64_t ****)(v12 + 16 * v14);
      v21 = *v15;
      if (*v15 != v10)
      {
        v22 = 1;
        while (v21 != (uint64_t ***)-4096)
        {
          v23 = v14 + v22++;
          v14 = v23 & (v13 - 1);
          v21 = *(uint64_t ****)(v12 + 16 * v14);
          if (v21 == v10)
          {
LABEL_20:
            v15 = (uint64_t ****)(v12 + 16 * v14);
            goto LABEL_48;
          }
        }
        goto LABEL_47;
      }
      goto LABEL_48;
    }
LABEL_47:
    v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_48;
  }
LABEL_53:
  v44 = 0;
  v43 = &byte_1C871356D;
LABEL_49:
  if (!llvm::isFunctionInPrintList(v43, v44))
    return 0;
LABEL_50:
  v19 = (uint64_t)(v10 + 5);
  return *(_QWORD *)v19;
}

void sub_1C5A6D204(char *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  unint64_t *v17;
  size_t v18;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  llvm::Loop *v24;
  __int128 v25;
  void (**v26)(llvm::raw_ostream *__hidden);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  void **v34;
  void *v35[2];
  uint64_t v36;

  if ((_UNKNOWN *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2) == &llvm::Any::TypeId<llvm::Module const*>::Id)
  {
    a1[23] = 8;
    strcpy(a1, "[module]");
    return;
  }
  v4 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v5 = *a2;
  if (v4 == &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v8 = *(uint64_t ****)(*a2 + 8);
    if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
    {
      v18 = 0;
      a1[23] = 0;
      goto LABEL_22;
    }
    v9 = ***v8;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v8)
      {
LABEL_14:
        v17 = (unint64_t *)v13[1];
        v20 = *v17;
        v19 = v17 + 2;
        v18 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v18 >= 0x17)
        {
          v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v21 = v18 | 7;
          v22 = v21 + 1;
          v23 = (char *)operator new(v21 + 1);
          *((_QWORD *)a1 + 1) = v18;
          *((_QWORD *)a1 + 2) = v22 | 0x8000000000000000;
          *(_QWORD *)a1 = v23;
          a1 = v23;
        }
        else
        {
          a1[23] = v18;
          if (!v18)
            goto LABEL_22;
        }
        memmove(a1, v19, v18);
LABEL_22:
        a1[v18] = 0;
        return;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v8)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_14;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_14;
  }
  v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v7 = *a2;
  if (v6 == &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    sub_1C57034B8(*(_QWORD *)(*a2 + 8), a1);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    v24 = *(llvm::Loop **)(*a2 + 8);
    v35[0] = 0;
    v35[1] = 0;
    v36 = 0;
    v27 = 0;
    v31 = 0;
    v32 = 0;
    v26 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v34 = v35;
    v33 = 0;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::print(v24, (llvm::raw_ostream *)&v26, 0, 0, 0);
    if (*((char *)v34 + 23) < 0)
    {
      sub_1C47EBC30(a1, *v34, (unint64_t)v34[1]);
    }
    else
    {
      v25 = *(_OWORD *)v34;
      *((_QWORD *)a1 + 2) = v34[2];
      *(_OWORD *)a1 = v25;
    }
    v26 = off_1E81A6E70;
    if (v33 == 1 && v28)
      MEMORY[0x1CAA32F9C](v28, 0x1000C8077774924);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
  }
}

void llvm::PrintIRInstrumentation::popModuleDesc(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C5A6D4EC(a2, a1 + 8);
}

void sub_1C5A6D4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)(v2 - 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v2 - 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v2 - 24);
  *(_QWORD *)(v2 - 40) = 0;
  *(_QWORD *)(v2 - 32) = 0;
  *(_QWORD *)(v2 - 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 - 16);
  LODWORD(v2) = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)a2 + 48 * v2;
  if (*(char *)(v3 + 31) < 0)
    operator delete(*(void **)(v3 + 8));
}

uint64_t llvm::PrintIRInstrumentation::printBeforePass(uint64_t *a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  llvm *v11;
  llvm *v12;
  uint64_t v13;
  _DWORD *v14;
  void **v15;
  size_t v16;
  uint64_t v17;
  llvm *v18;
  llvm *v19;
  uint64_t v20;
  llvm *v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  uint64_t v25;

  result = sub_1C5A6D844(a2, a3);
  if ((result & 1) == 0)
  {
    if (llvm::PrintIRInstrumentation::shouldPrintAfterPass(a1, (unsigned __int8 *)a2, a3))
    {
      if (*(_QWORD *)a4)
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 16))(&v25);
      else
        v25 = 0;
      llvm::PrintIRInstrumentation::pushModuleDesc((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v25);
      v9 = v25;
      v25 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    result = llvm::PrintIRInstrumentation::shouldPrintBeforePass(a1, (unsigned __int8 *)a2, a3);
    if ((_DWORD)result)
    {
      if (*(_QWORD *)a4)
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 16))(&v24);
      else
        v24 = 0;
      v10 = sub_1C5A6DAB4(&v24);
      result = v24;
      v24 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (v10)
      {
        v11 = llvm::dbgs((llvm *)result);
        v12 = v11;
        v13 = *((_QWORD *)v11 + 4);
        if ((unint64_t)(*((_QWORD *)v11 + 3) - v13) > 0x12)
        {
          *(_DWORD *)(v13 + 15) = 543519343;
          *(_OWORD *)v13 = *(_OWORD *)"*** IR Dump Before ";
          v14 = (_DWORD *)(*((_QWORD *)v11 + 4) + 19);
          *((_QWORD *)v12 + 4) = v14;
        }
        else
        {
          llvm::raw_ostream::write(v11, "*** IR Dump Before ", 0x13uLL);
          v14 = (_DWORD *)*((_QWORD *)v12 + 4);
        }
        if (a3 <= *((_QWORD *)v12 + 3) - (_QWORD)v14)
        {
          if (a3)
          {
            memcpy(v14, a2, a3);
            v14 = (_DWORD *)(*((_QWORD *)v12 + 4) + a3);
            *((_QWORD *)v12 + 4) = v14;
          }
        }
        else
        {
          llvm::raw_ostream::write(v12, a2, a3);
          v14 = (_DWORD *)*((_QWORD *)v12 + 4);
        }
        if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 3uLL)
        {
          *v14 = 544108320;
          *((_QWORD *)v12 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v12, " on ", 4uLL);
        }
        if (*(_QWORD *)a4)
          (*(void (**)(llvm **__return_ptr))(**(_QWORD **)a4 + 16))(&v21);
        else
          v21 = 0;
        sub_1C5A6D204((char *)__p, &v21);
        if (v23 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (v23 >= 0)
          v16 = v23 & 0x7F;
        else
          v16 = (size_t)__p[1];
        llvm::raw_ostream::write(v12, (const char *)v15, v16);
        v17 = *((_QWORD *)v12 + 4);
        if ((unint64_t)(*((_QWORD *)v12 + 3) - v17) > 4)
        {
          *(_BYTE *)(v17 + 4) = 10;
          *(_DWORD *)v17 = 707406368;
          *((_QWORD *)v12 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v12, " ***\n", 5uLL);
        }
        if (v23 < 0)
          operator delete(__p[0]);
        v18 = v21;
        v21 = 0;
        if (v18)
          v18 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v18 + 8))(v18);
        v19 = llvm::dbgs(v18);
        if (*(_QWORD *)a4)
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a4 + 16))(&v20);
        else
          v20 = 0;
        sub_1C5A6C8E8(v19, &v20);
        result = v20;
        v20 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t sub_1C5A6D844(char *a1, size_t a2)
{
  _OWORD *v4;
  uint64_t isSpecialPass;
  uint64_t v7[3];

  v4 = operator new(0x50uLL);
  v7[1] = (uint64_t)(v4 + 5);
  v7[2] = (uint64_t)(v4 + 5);
  v4[2] = xmmword_1E8192910;
  v4[3] = *(_OWORD *)&off_1E8192920;
  v4[4] = xmmword_1E8192930;
  *v4 = xmmword_1E81928F0;
  v4[1] = *(_OWORD *)&off_1E8192900;
  v7[0] = (uint64_t)v4;
  isSpecialPass = llvm::isSpecialPass(a1, a2, v7);
  operator delete(v4);
  return isSpecialPass;
}

uint64_t llvm::PrintIRInstrumentation::shouldPrintAfterPass(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  _BOOL8 v3;
  const void *PassNameForClassName;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  if (byte_1ED830F08)
    return 1;
  PassNameForClassName = (const void *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*a1, a2, a3);
  v7 = v6;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_1C484333C(&v14, qword_1ED830D70, qword_1ED830D78, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830D78 - qword_1ED830D70) >> 3));
  v9 = v14;
  v8 = v15;
  if (v14 != v15)
  {
    while (1)
    {
      v10 = *(_BYTE *)(v9 + 23);
      v11 = v10 < 0;
      v12 = v10 >= 0 ? (const void *)v9 : *(const void **)v9;
      v13 = v10 & 0x7F;
      if (v11)
        v13 = *(_QWORD *)(v9 + 8);
      if (v13 == v7 && (!v7 || !memcmp(v12, PassNameForClassName, v7)))
        break;
      v9 += 24;
      if (v9 == v8)
      {
        v9 = v8;
        break;
      }
    }
  }
  v3 = v9 != v8;
  v17 = (void **)&v14;
  sub_1C4765410(&v17);
  return v3;
}

uint64_t llvm::PrintIRInstrumentation::shouldPrintBeforePass(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  _BOOL8 v3;
  const void *PassNameForClassName;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  if (byte_1ED830E48)
    return 1;
  PassNameForClassName = (const void *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*a1, a2, a3);
  v7 = v6;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_1C484333C(&v14, qword_1ED830C98, qword_1ED830CA0, 0xAAAAAAAAAAAAAAABLL * ((qword_1ED830CA0 - qword_1ED830C98) >> 3));
  v9 = v14;
  v8 = v15;
  if (v14 != v15)
  {
    while (1)
    {
      v10 = *(_BYTE *)(v9 + 23);
      v11 = v10 < 0;
      v12 = v10 >= 0 ? (const void *)v9 : *(const void **)v9;
      v13 = v10 & 0x7F;
      if (v11)
        v13 = *(_QWORD *)(v9 + 8);
      if (v13 == v7 && (!v7 || !memcmp(v12, PassNameForClassName, v7)))
        break;
      v9 += 24;
      if (v9 == v8)
      {
        v9 = v8;
        break;
      }
    }
  }
  v3 = v9 != v8;
  v17 = (void **)&v14;
  sub_1C4765410(&v17);
  return v3;
}

uint64_t sub_1C5A6DAB4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t ***v23;
  char *v24;
  size_t v25;
  size_t v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ***v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t ***v49;
  char *v50;
  size_t v51;
  size_t v52;
  uint64_t ***v54;
  size_t v55;

  v2 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v3 = *a1;
  if (v2 == &llvm::Any::TypeId<llvm::Module const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v9 = *(_QWORD *)(*a1 + 8);
    v10 = v9 + 24;
    v11 = *(_QWORD *)(v9 + 32);
    if (v11 == v9 + 24)
      goto LABEL_45;
    v12 = 1;
    v13 = "*";
    while (1)
    {
      v14 = (uint64_t ***)(v11 - 56);
      if (!v11)
        v14 = 0;
      if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
        break;
      v25 = 0;
      v24 = &byte_1C871356D;
LABEL_18:
      if ((llvm::isFunctionInPrintList(v24, v25) & 1) != 0)
        return 1;
      v11 = *(_QWORD *)(v11 + 8);
      if (v11 == v10)
        return llvm::isFunctionInPrintList(v13, v12);
    }
    v15 = ***v14;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v19 = (uint64_t ****)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v14)
      {
LABEL_17:
        v23 = v19[1];
        v26 = (size_t)*v23;
        v24 = (char *)(v23 + 2);
        v25 = v26;
        goto LABEL_18;
      }
      v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v14)
        {
          v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_17;
        }
      }
    }
    v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_17;
  }
  v4 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v5 = *a1;
  if (v4 == &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v8 = (uint64_t ****)(*a1 + 8);
LABEL_23:
    v27 = *v8;
    if ((*((_BYTE *)v27 + 23) & 0x10) == 0)
    {
      v12 = 0;
      v13 = &byte_1C871356D;
      return llvm::isFunctionInPrintList(v13, v12);
    }
    v28 = ***v27;
    v29 = *(_QWORD *)(v28 + 152);
    v30 = *(unsigned int *)(v28 + 168);
    if ((_DWORD)v30)
    {
      LODWORD(v31) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      v32 = (uint64_t ****)(v29 + 16 * v31);
      v33 = *v32;
      if (*v32 == v27)
      {
LABEL_48:
        v54 = v32[1];
        v55 = (size_t)*v54;
        v13 = (char *)(v54 + 2);
        v12 = v55;
        return llvm::isFunctionInPrintList(v13, v12);
      }
      v34 = 1;
      while (v33 != (uint64_t ***)-4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(uint64_t ****)(v29 + 16 * v31);
        if (v33 == v27)
        {
          v32 = (uint64_t ****)(v29 + 16 * v31);
          goto LABEL_48;
        }
      }
    }
    v32 = (uint64_t ****)(v29 + 16 * v30);
    goto LABEL_48;
  }
  v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v7 = *a1;
  if (v6 != &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    v8 = (uint64_t ****)(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 32) + 56);
    goto LABEL_23;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v36 = *(_QWORD *)(*a1 + 8);
  v37 = *(unsigned int *)(v36 + 16);
  if ((_DWORD)v37)
  {
    v38 = *(_QWORD *)(v36 + 8);
    v39 = v38 + 8 * v37;
    v13 = "*";
    v12 = 1;
    while (1)
    {
      v40 = *(uint64_t ****)(*(_QWORD *)v38 + 8);
      if ((*((_BYTE *)v40 + 23) & 0x10) == 0)
      {
        v51 = 0;
        v50 = &byte_1C871356D;
        goto LABEL_41;
      }
      v41 = ***v40;
      v42 = *(_QWORD *)(v41 + 152);
      v43 = *(unsigned int *)(v41 + 168);
      if (!(_DWORD)v43)
        goto LABEL_39;
      LODWORD(v44) = (v43 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v45 = (uint64_t ****)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 != v40)
        break;
LABEL_40:
      v49 = v45[1];
      v52 = (size_t)*v49;
      v50 = (char *)(v49 + 2);
      v51 = v52;
LABEL_41:
      if ((llvm::isFunctionInPrintList(v50, v51) & 1) != 0)
        return 1;
      v38 += 8;
      if (v38 == v39)
        return llvm::isFunctionInPrintList(v13, v12);
    }
    v47 = 1;
    while (v46 != (uint64_t ***)-4096)
    {
      v48 = v44 + v47++;
      v44 = v48 & (v43 - 1);
      v46 = *(uint64_t ****)(v42 + 16 * v44);
      if (v46 == v40)
      {
        v45 = (uint64_t ****)(v42 + 16 * v44);
        goto LABEL_40;
      }
    }
LABEL_39:
    v45 = (uint64_t ****)(v42 + 16 * v43);
    goto LABEL_40;
  }
LABEL_45:
  v13 = "*";
  v12 = 1;
  return llvm::isFunctionInPrintList(v13, v12);
}

void llvm::PrintIRInstrumentation::printAfterPass(uint64_t *a1, void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  llvm *v10;
  llvm *v11;
  llvm *v12;
  uint64_t v13;
  _DWORD *v14;
  void **v15;
  size_t v16;
  llvm *v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  uint64_t v21;
  llvm *v22;
  _BYTE v23[8];
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;

  if ((sub_1C5A6D844((char *)a2, a3) & 1) == 0
    && llvm::PrintIRInstrumentation::shouldPrintAfterPass(a1, (unsigned __int8 *)a2, a3))
  {
    sub_1C5A6D4EC((uint64_t)v23, (uint64_t)(a1 + 1));
    v8 = *a4;
    *(_OWORD *)__p = v24;
    v27 = v25;
    if (v8)
      (*(void (**)(llvm **__return_ptr))(*(_QWORD *)v8 + 16))(&v22);
    else
      v22 = 0;
    v9 = sub_1C5A6DAB4(&v22);
    v10 = v22;
    v22 = 0;
    if (v10)
      v10 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
    {
      v11 = llvm::dbgs(v10);
      v12 = v11;
      v13 = *((_QWORD *)v11 + 4);
      if ((unint64_t)(*((_QWORD *)v11 + 3) - v13) > 0x11)
      {
        *(_WORD *)(v13 + 16) = 8306;
        *(_OWORD *)v13 = *(_OWORD *)"*** IR Dump After ";
        v14 = (_DWORD *)(*((_QWORD *)v11 + 4) + 18);
        *((_QWORD *)v12 + 4) = v14;
      }
      else
      {
        llvm::raw_ostream::write(v11, "*** IR Dump After ", 0x12uLL);
        v14 = (_DWORD *)*((_QWORD *)v12 + 4);
      }
      if (a3 <= *((_QWORD *)v12 + 3) - (_QWORD)v14)
      {
        if (a3)
        {
          memcpy(v14, a2, a3);
          v14 = (_DWORD *)(*((_QWORD *)v12 + 4) + a3);
          *((_QWORD *)v12 + 4) = v14;
        }
      }
      else
      {
        llvm::raw_ostream::write(v12, (const char *)a2, a3);
        v14 = (_DWORD *)*((_QWORD *)v12 + 4);
      }
      if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 3uLL)
      {
        *v14 = 544108320;
        *((_QWORD *)v12 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v12, " on ", 4uLL);
      }
      if (v27 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (v27 >= 0)
        v16 = HIBYTE(v27) & 0x7F;
      else
        v16 = (size_t)__p[1];
      v17 = llvm::raw_ostream::write(v12, (const char *)v15, v16);
      v18 = *((_QWORD *)v12 + 4);
      if ((unint64_t)(*((_QWORD *)v12 + 3) - v18) > 4)
      {
        *(_BYTE *)(v18 + 4) = 10;
        *(_DWORD *)v18 = 707406368;
        *((_QWORD *)v12 + 4) += 5;
      }
      else
      {
        v17 = llvm::raw_ostream::write(v12, " ***\n", 5uLL);
      }
      v19 = llvm::dbgs(v17);
      if (*a4)
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a4 + 16))(&v21);
      else
        v21 = 0;
      sub_1C5A6C8E8(v19, &v21);
      v20 = v21;
      v21 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
  }
}

void llvm::PrintIRInstrumentation::printAfterPassInvalidated(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  unsigned __int8 *PassNameForClassName;
  size_t v7;
  const std::string *v8;
  llvm *v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm *v13;
  const char *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  void *__p[2];
  uint64_t v21;
  _QWORD v22[2];
  uint64_t (**v23)();
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  __int128 v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  v22[0] = a2;
  v22[1] = a3;
  PassNameForClassName = (unsigned __int8 *)llvm::PassInstrumentationCallbacks::getPassNameForClassName(*a1, a2, a3);
  if (llvm::PrintIRInstrumentation::shouldPrintAfterPass(a1, PassNameForClassName, v7)
    && (sub_1C5A6D844((char *)a2, a3) & 1) == 0)
  {
    sub_1C5A6D4EC((uint64_t)&v14, (uint64_t)(a1 + 1));
    v8 = (const std::string *)v14;
    *(_OWORD *)__p = v15;
    v21 = v16;
    if (v14)
    {
      v14 = "*** IR Dump After {0} on {1} (invalidated) ***";
      *(_QWORD *)&v15 = 46;
      *((_QWORD *)&v15 + 1) = v19;
      v16 = 2;
      v17[0] = &unk_1E8168E00;
      v17[1] = v22;
      v18[0] = &unk_1E816A5D0;
      v18[1] = __p;
      v19[0] = v17;
      v19[1] = v18;
      v32 = (char *)v34;
      v33 = xmmword_1C69DD250;
      v24 = 0;
      v28 = 0;
      v29 = 0;
      v23 = &off_1E81A7280;
      v31 = (void **)&v32;
      v30 = 0;
      v26 = 0;
      v27 = 0;
      v25 = 0;
      sub_1C639D338((uint64_t)&v14, (llvm::raw_ostream *)&v23);
      v23 = (uint64_t (**)())off_1E81A6E70;
      if (v30 == 1)
      {
        v9 = v25;
        if (v25)
          v9 = (llvm *)MEMORY[0x1CAA32F9C](v25, 0x1000C8077774924);
      }
      v10 = llvm::dbgs(v9);
      v11 = llvm::raw_ostream::write(v10, v32, v33);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if (*((_BYTE **)v11 + 3) == v12)
      {
        v11 = llvm::raw_ostream::write(v11, "\n", 1uLL);
      }
      else
      {
        *v12 = 10;
        ++*((_QWORD *)v11 + 4);
      }
      v13 = llvm::dbgs(v11);
      sub_1C5A6E294(v13, v8);
      if (v32 != (char *)v34)
        free(v32);
    }
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
  }
}

void sub_1C5A6E294(llvm::raw_ostream *a1, const std::string *a2)
{
  const std::string *v4;
  std::string::size_type i;
  llvm::Value *v6;

  if ((llvm::isFunctionInPrintList("*", 1uLL) & 1) != 0 || byte_1ED830FC8)
  {
    llvm::Module::print(a2, a1, 0, 0, 0);
  }
  else
  {
    v4 = a2 + 1;
    for (i = a2[1].__r_.__value_.__l.__size_; (const std::string *)i != v4; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v6 = (llvm::Value *)(i - 56);
      else
        v6 = 0;
      sub_1C5A7C03C(a1, v6);
    }
  }
}

void llvm::PrintIRInstrumentation::registerCallbacks(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  unint64_t v55;

  *a1 = a2;
  if (byte_1ED830E48)
    v4 = 0;
  else
    v4 = qword_1ED830C98 == qword_1ED830CA0;
  if (!v4 || (!byte_1ED830F08 ? (v5 = qword_1ED830D70 == qword_1ED830D78) : (v5 = 0), !v5))
  {
    v6 = *(unsigned int *)(a2 + 296);
    if (v6 >= *(_DWORD *)(a2 + 300))
    {
      v55 = 0;
      v16 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, &v55);
      v17 = v16;
      v18 = *(unsigned int *)(a2 + 296);
      v19 = &v16[32 * v18];
      *(_QWORD *)v19 = a1;
      *((_QWORD *)v19 + 3) = (char *)off_1EF8EE1F8 + 2;
      v20 = *(_QWORD **)(a2 + 288);
      if ((_DWORD)v18)
      {
        v21 = 32 * v18;
        v22 = v16;
        do
        {
          *((_QWORD *)v22 + 3) = 0;
          v23 = v20[3];
          *((_QWORD *)v22 + 3) = v23;
          if (v20[3] >= 8uLL)
          {
            if ((v23 & 2) != 0 && (v23 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v23 & 0xFFFFFFFFFFFFFFF8) + 8))(v22, v20);
            }
            else
            {
              v24 = *(_OWORD *)v20;
              *((_QWORD *)v22 + 2) = v20[2];
              *(_OWORD *)v22 = v24;
            }
            v20[3] = 0;
          }
          v20 += 4;
          v22 += 32;
          v21 -= 32;
        }
        while (v21);
        v20 = *(_QWORD **)(a2 + 288);
        v25 = *(unsigned int *)(a2 + 296);
        if ((_DWORD)v25)
        {
          v26 = 32 * v25;
          v27 = (char *)(v20 - 4);
          do
          {
            sub_1C5052E10(&v27[v26]);
            v26 -= 32;
          }
          while (v26);
          v20 = *(_QWORD **)(a2 + 288);
        }
      }
      v28 = v55;
      if (v20 != (_QWORD *)(a2 + 304))
        free(v20);
      *(_QWORD *)(a2 + 288) = v17;
      *(_DWORD *)(a2 + 300) = v28;
      v8 = *(_DWORD *)(a2 + 296) + 1;
    }
    else
    {
      v7 = (_QWORD *)(*(_QWORD *)(a2 + 288) + 32 * v6);
      *v7 = a1;
      v7[3] = (char *)off_1EF8EE1F8 + 2;
      v8 = v6 + 1;
    }
    *(_DWORD *)(a2 + 296) = v8;
  }
  if (byte_1ED830F08)
    v9 = 0;
  else
    v9 = qword_1ED830D70 == qword_1ED830D78;
  if (!v9)
  {
    v10 = *(unsigned int *)(a2 + 440);
    if (v10 >= *(_DWORD *)(a2 + 444))
    {
      v55 = 0;
      v29 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v55);
      v30 = v29;
      v31 = *(unsigned int *)(a2 + 440);
      v32 = &v29[32 * v31];
      *(_QWORD *)v32 = a1;
      *((_QWORD *)v32 + 3) = (char *)off_1EF8EE200 + 2;
      v33 = *(_QWORD **)(a2 + 432);
      if ((_DWORD)v31)
      {
        v34 = 32 * v31;
        v35 = v29;
        do
        {
          *((_QWORD *)v35 + 3) = 0;
          v36 = v33[3];
          *((_QWORD *)v35 + 3) = v36;
          if (v33[3] >= 8uLL)
          {
            if ((v36 & 2) != 0 && (v36 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v36 & 0xFFFFFFFFFFFFFFF8) + 8))(v35, v33);
            }
            else
            {
              v37 = *(_OWORD *)v33;
              *((_QWORD *)v35 + 2) = v33[2];
              *(_OWORD *)v35 = v37;
            }
            v33[3] = 0;
          }
          v33 += 4;
          v35 += 32;
          v34 -= 32;
        }
        while (v34);
        v33 = *(_QWORD **)(a2 + 432);
        v38 = *(unsigned int *)(a2 + 440);
        if ((_DWORD)v38)
        {
          v39 = 32 * v38;
          v40 = (char *)(v33 - 4);
          do
          {
            sub_1C5052E10(&v40[v39]);
            v39 -= 32;
          }
          while (v39);
          v33 = *(_QWORD **)(a2 + 432);
        }
      }
      v41 = v55;
      if (v33 != (_QWORD *)(a2 + 448))
        free(v33);
      *(_QWORD *)(a2 + 432) = v30;
      *(_DWORD *)(a2 + 444) = v41;
      v12 = *(_DWORD *)(a2 + 440) + 1;
    }
    else
    {
      v11 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v10);
      *v11 = a1;
      v11[3] = (char *)off_1EF8EE200 + 2;
      v12 = v10 + 1;
    }
    *(_DWORD *)(a2 + 440) = v12;
    v13 = *(unsigned int *)(a2 + 584);
    if (v13 >= *(_DWORD *)(a2 + 588))
    {
      v55 = 0;
      v42 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 576, 0, 32, &v55);
      v43 = v42;
      v44 = *(unsigned int *)(a2 + 584);
      v45 = &v42[32 * v44];
      *(_QWORD *)v45 = a1;
      *((_QWORD *)v45 + 3) = (char *)off_1EF8EE208 + 2;
      v46 = *(_QWORD **)(a2 + 576);
      if ((_DWORD)v44)
      {
        v47 = 32 * v44;
        v48 = v42;
        do
        {
          *((_QWORD *)v48 + 3) = 0;
          v49 = v46[3];
          *((_QWORD *)v48 + 3) = v49;
          if (v46[3] >= 8uLL)
          {
            if ((v49 & 2) != 0 && (v49 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v49 & 0xFFFFFFFFFFFFFFF8) + 8))(v48, v46);
            }
            else
            {
              v50 = *(_OWORD *)v46;
              *((_QWORD *)v48 + 2) = v46[2];
              *(_OWORD *)v48 = v50;
            }
            v46[3] = 0;
          }
          v46 += 4;
          v48 += 32;
          v47 -= 32;
        }
        while (v47);
        v46 = *(_QWORD **)(a2 + 576);
        v51 = *(unsigned int *)(a2 + 584);
        if ((_DWORD)v51)
        {
          v52 = 32 * v51;
          v53 = (char *)(v46 - 4);
          do
          {
            sub_1C5052E10(&v53[v52]);
            v52 -= 32;
          }
          while (v52);
          v46 = *(_QWORD **)(a2 + 576);
        }
      }
      v54 = v55;
      if (v46 != (_QWORD *)(a2 + 592))
        free(v46);
      *(_QWORD *)(a2 + 576) = v43;
      *(_DWORD *)(a2 + 588) = v54;
      v15 = *(_DWORD *)(a2 + 584) + 1;
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(a2 + 576) + 32 * v13);
      *v14 = a1;
      v14[3] = (char *)off_1EF8EE208 + 2;
      v15 = v13 + 1;
    }
    *(_DWORD *)(a2 + 584) = v15;
  }
}

void llvm::OptNoneInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;

  v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= *(_DWORD *)(a2 + 12))
  {
    v20 = 0;
    v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2, 0, 32, &v20);
    v8 = v7;
    v9 = *(unsigned int *)(a2 + 8);
    v10 = &v7[32 * v9];
    *(_QWORD *)v10 = a1;
    *((_QWORD *)v10 + 3) = (char *)off_1EF8EE210 + 2;
    v11 = *(_QWORD **)a2;
    if ((_DWORD)v9)
    {
      v12 = 32 * v9;
      v13 = v7;
      do
      {
        *((_QWORD *)v13 + 3) = 0;
        v14 = v11[3];
        *((_QWORD *)v13 + 3) = v14;
        if (v11[3] >= 8uLL)
        {
          if ((v14 & 2) != 0 && (v14 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(v13, v11);
          }
          else
          {
            v15 = *(_OWORD *)v11;
            *((_QWORD *)v13 + 2) = v11[2];
            *(_OWORD *)v13 = v15;
          }
          v11[3] = 0;
        }
        v11 += 4;
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
      v11 = *(_QWORD **)a2;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = 32 * v16;
        v18 = (char *)(v11 - 4);
        do
        {
          sub_1C5052E10(&v18[v17]);
          v17 -= 32;
        }
        while (v17);
        v11 = *(_QWORD **)a2;
      }
    }
    v19 = v20;
    if (v11 != (_QWORD *)(a2 + 16))
      free(v11);
    *(_QWORD *)a2 = v8;
    v6 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 12) = v19;
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)a2 + 32 * v4);
    *v5 = a1;
    v5[3] = (char *)off_1EF8EE210 + 2;
    v6 = v4 + 1;
  }
  *(_DWORD *)(a2 + 8) = v6;
}

uint64_t llvm::OptNoneInstrumentation::shouldRun(_BYTE *a1, const void *a2, size_t a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  llvm *v10;
  llvm::Value **v11;
  llvm::Value *v12;
  uint64_t v13;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  void *v17;
  llvm::raw_ostream *v18;
  size_t v19;
  char *Name;
  size_t v21;
  void *v22;
  llvm::Value *v23;

  if (!*a4)
    return 1;
  v8 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
  v9 = *a4;
  if (v8 == &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    v10 = (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v11 = (llvm::Value **)(*a4 + 8);
  }
  else
  {
    if (!v9
      || (_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) != &llvm::Any::TypeId<llvm::Loop const*>::Id)
    {
      return 1;
    }
    v10 = (llvm *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
    v11 = (llvm::Value **)(**(_QWORD **)(*(_QWORD *)(*a4 + 8) + 32) + 56);
  }
  v12 = *v11;
  if (!v12)
    return 1;
  v13 = *((_QWORD *)v12 + 14);
  if (!v13 || (*(_BYTE *)(v13 + 17) & 8) == 0)
    return 1;
  v23 = v12;
  if (*a1)
  {
    v15 = (llvm::raw_ostream *)llvm::errs(v10);
    v16 = sub_1C4816AD8(v15, "Skipping pass ");
    v17 = (void *)*((_QWORD *)v16 + 4);
    if (a3 <= *((_QWORD *)v16 + 3) - (_QWORD)v17)
    {
      if (a3)
      {
        memcpy(v17, a2, a3);
        *((_QWORD *)v16 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v16, (const char *)a2, a3);
    }
    v18 = sub_1C4816AD8(v16, " on ");
    Name = llvm::Value::getName(v23);
    v21 = v19;
    v22 = (void *)*((_QWORD *)v18 + 4);
    if (v19 <= *((_QWORD *)v18 + 3) - (_QWORD)v22)
    {
      if (v19)
      {
        memcpy(v22, Name, v19);
        *((_QWORD *)v18 + 4) += v21;
      }
    }
    else
    {
      llvm::raw_ostream::write(v18, Name, v19);
    }
    sub_1C4816AD8(v18, " due to optnone attribute\n");
  }
  return 0;
}

void llvm::OptBisectInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t v18;

  if (!atomic_load((unint64_t *)&llvm::OptBisector))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)llvm::OptBisector + 24))(llvm::OptBisector))
  {
    v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      v18 = 0;
      v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2, 0, 32, &v18);
      v7 = v6;
      v8 = *(unsigned int *)(a2 + 8);
      v6[4 * v8 + 3] = (char *)off_1EF8EE218 + 2;
      v9 = *(_QWORD **)a2;
      if ((_DWORD)v8)
      {
        v10 = 32 * v8;
        v11 = v6;
        do
        {
          v11[3] = 0;
          v12 = v9[3];
          v11[3] = v12;
          if (v9[3] >= 8uLL)
          {
            if ((v12 & 2) != 0 && (v12 & 4) != 0)
            {
              (*(void (**)(_QWORD *, _QWORD *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(v11, v9);
            }
            else
            {
              v13 = *(_OWORD *)v9;
              v11[2] = v9[2];
              *(_OWORD *)v11 = v13;
            }
            v9[3] = 0;
          }
          v9 += 4;
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        v9 = *(_QWORD **)a2;
        v14 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v14)
        {
          v15 = 32 * v14;
          v16 = (char *)(v9 - 4);
          do
          {
            sub_1C5052E10(&v16[v15]);
            v15 -= 32;
          }
          while (v15);
          v9 = *(_QWORD **)a2;
        }
      }
      v17 = v18;
      if (v9 != (_QWORD *)(a2 + 16))
        free(v9);
      *(_QWORD *)a2 = v7;
      v5 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 12) = v17;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 32 * v4 + 24) = (char *)off_1EF8EE218 + 2;
      v5 = v4 + 1;
    }
    *(_DWORD *)(a2 + 8) = v5;
  }
}

void llvm::PrintPassInstrumentation::registerCallbacks(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  char *v30;
  char *v31;
  _OWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  _OWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  char *v56;
  char *v57;
  _OWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  char *v70;
  _OWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  void *v150[2];
  __int128 v151;
  void *v152[2];
  __int128 v153;
  void *v154[2];
  __int128 v155;
  void *__p[2];
  __int128 v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;

  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    if (!a1[1])
    {
      sub_1C63036DC((uint64_t)&v158, "PassManager");
      sub_1C63036DC((uint64_t)&v158, "PassAdaptor");
      v5 = v158;
      v4 = v159;
    }
    __p[0] = a1;
    __p[1] = 0;
    v157 = 0uLL;
    sub_1C4EEC644(&__p[1], v5, v4, (v4 - (uint64_t)v5) >> 4);
    v6 = *(unsigned int *)(a2 + 152);
    if (v6 >= *(_DWORD *)(a2 + 156))
    {
      v161 = 0;
      v30 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 144, 0, 32, &v161);
      v31 = &v30[32 * *(unsigned int *)(a2 + 152)];
      v138 = v157;
      v146 = *(_OWORD *)__p;
      v157 = 0uLL;
      __p[1] = 0;
      *((_QWORD *)v31 + 3) = 0;
      v32 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v31 = v32;
      *(_OWORD *)(v31 + 8) = xmmword_1C8667FA0;
      *v32 = v146;
      v32[1] = v138;
      *((_QWORD *)v31 + 3) = (char *)off_1EF8EE220 + 4;
      v33 = *(_QWORD **)(a2 + 144);
      v34 = *(unsigned int *)(a2 + 152);
      if ((_DWORD)v34)
      {
        v35 = 32 * v34;
        v36 = v30;
        do
        {
          *((_QWORD *)v36 + 3) = 0;
          v37 = v33[3];
          *((_QWORD *)v36 + 3) = v37;
          if (v33[3] >= 8uLL)
          {
            if ((v37 & 2) != 0 && (v37 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v37 & 0xFFFFFFFFFFFFFFF8) + 8))(v36, v33);
            }
            else
            {
              v38 = *(_OWORD *)v33;
              *((_QWORD *)v36 + 2) = v33[2];
              *(_OWORD *)v36 = v38;
            }
            v33[3] = 0;
          }
          v33 += 4;
          v36 += 32;
          v35 -= 32;
        }
        while (v35);
        v33 = *(_QWORD **)(a2 + 144);
        v39 = *(unsigned int *)(a2 + 152);
        if ((_DWORD)v39)
        {
          v40 = 32 * v39;
          v41 = (char *)(v33 - 4);
          do
          {
            sub_1C5052E10(&v41[v40]);
            v40 -= 32;
          }
          while (v40);
          v33 = *(_QWORD **)(a2 + 144);
        }
      }
      v42 = v161;
      if (v33 != (_QWORD *)(a2 + 160))
        free(v33);
      *(_QWORD *)(a2 + 144) = v30;
      ++*(_DWORD *)(a2 + 152);
      *(_DWORD *)(a2 + 156) = v42;
      if (__p[1])
      {
        *(void **)&v157 = __p[1];
        operator delete(__p[1]);
      }
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 144) + 32 * v6;
      v134 = v157;
      v142 = *(_OWORD *)__p;
      v157 = 0uLL;
      __p[1] = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v8 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v7 = v8;
      *(_OWORD *)(v7 + 8) = xmmword_1C8667FA0;
      *v8 = v142;
      v8[1] = v134;
      *(_QWORD *)(v7 + 24) = (char *)off_1EF8EE220 + 4;
      ++*(_DWORD *)(a2 + 152);
    }
    v154[0] = a1;
    v154[1] = 0;
    v155 = 0uLL;
    sub_1C4EEC644(&v154[1], v158, v159, (v159 - (uint64_t)v158) >> 4);
    v9 = *(unsigned int *)(a2 + 296);
    if (v9 >= *(_DWORD *)(a2 + 300))
    {
      v161 = 0;
      v43 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, &v161);
      v44 = &v43[32 * *(unsigned int *)(a2 + 296)];
      v139 = v155;
      v147 = *(_OWORD *)v154;
      v155 = 0uLL;
      v154[1] = 0;
      *((_QWORD *)v44 + 3) = 0;
      v45 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v44 = v45;
      *(_OWORD *)(v44 + 8) = xmmword_1C8667FA0;
      *v45 = v147;
      v45[1] = v139;
      *((_QWORD *)v44 + 3) = (char *)&off_1EF8EE238 + 4;
      v46 = *(_QWORD **)(a2 + 288);
      v47 = *(unsigned int *)(a2 + 296);
      if ((_DWORD)v47)
      {
        v48 = 32 * v47;
        v49 = v43;
        do
        {
          *((_QWORD *)v49 + 3) = 0;
          v50 = v46[3];
          *((_QWORD *)v49 + 3) = v50;
          if (v46[3] >= 8uLL)
          {
            if ((v50 & 2) != 0 && (v50 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v50 & 0xFFFFFFFFFFFFFFF8) + 8))(v49, v46);
            }
            else
            {
              v51 = *(_OWORD *)v46;
              *((_QWORD *)v49 + 2) = v46[2];
              *(_OWORD *)v49 = v51;
            }
            v46[3] = 0;
          }
          v46 += 4;
          v49 += 32;
          v48 -= 32;
        }
        while (v48);
        v46 = *(_QWORD **)(a2 + 288);
        v52 = *(unsigned int *)(a2 + 296);
        if ((_DWORD)v52)
        {
          v53 = 32 * v52;
          v54 = (char *)(v46 - 4);
          do
          {
            sub_1C5052E10(&v54[v53]);
            v53 -= 32;
          }
          while (v53);
          v46 = *(_QWORD **)(a2 + 288);
        }
      }
      v55 = v161;
      if (v46 != (_QWORD *)(a2 + 304))
        free(v46);
      *(_QWORD *)(a2 + 288) = v43;
      *(_DWORD *)(a2 + 300) = v55;
      ++*(_DWORD *)(a2 + 296);
      if (v154[1])
      {
        *(void **)&v155 = v154[1];
        operator delete(v154[1]);
      }
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 288) + 32 * v9;
      v135 = v155;
      v143 = *(_OWORD *)v154;
      v155 = 0uLL;
      v154[1] = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v11 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v10 = v11;
      *(_OWORD *)(v10 + 8) = xmmword_1C8667FA0;
      *v11 = v143;
      v11[1] = v135;
      *(_QWORD *)(v10 + 24) = (char *)&off_1EF8EE238 + 4;
      ++*(_DWORD *)(a2 + 296);
    }
    v152[0] = a1;
    v152[1] = 0;
    v153 = 0uLL;
    sub_1C4EEC644(&v152[1], v158, v159, (v159 - (uint64_t)v158) >> 4);
    v12 = *(unsigned int *)(a2 + 440);
    if (v12 >= *(_DWORD *)(a2 + 444))
    {
      v161 = 0;
      v56 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v161);
      v57 = &v56[32 * *(unsigned int *)(a2 + 440)];
      v140 = v153;
      v148 = *(_OWORD *)v152;
      v153 = 0uLL;
      v152[1] = 0;
      *((_QWORD *)v57 + 3) = 0;
      v58 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v57 = v58;
      *(_OWORD *)(v57 + 8) = xmmword_1C8667FA0;
      *v58 = v148;
      v58[1] = v140;
      *((_QWORD *)v57 + 3) = (char *)&off_1EF8EE250 + 4;
      v59 = *(_QWORD **)(a2 + 432);
      v60 = *(unsigned int *)(a2 + 440);
      if ((_DWORD)v60)
      {
        v61 = 32 * v60;
        v62 = v56;
        do
        {
          *((_QWORD *)v62 + 3) = 0;
          v63 = v59[3];
          *((_QWORD *)v62 + 3) = v63;
          if (v59[3] >= 8uLL)
          {
            if ((v63 & 2) != 0 && (v63 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v63 & 0xFFFFFFFFFFFFFFF8) + 8))(v62, v59);
            }
            else
            {
              v64 = *(_OWORD *)v59;
              *((_QWORD *)v62 + 2) = v59[2];
              *(_OWORD *)v62 = v64;
            }
            v59[3] = 0;
          }
          v59 += 4;
          v62 += 32;
          v61 -= 32;
        }
        while (v61);
        v59 = *(_QWORD **)(a2 + 432);
        v65 = *(unsigned int *)(a2 + 440);
        if ((_DWORD)v65)
        {
          v66 = 32 * v65;
          v67 = (char *)(v59 - 4);
          do
          {
            sub_1C5052E10(&v67[v66]);
            v66 -= 32;
          }
          while (v66);
          v59 = *(_QWORD **)(a2 + 432);
        }
      }
      v68 = v161;
      if (v59 != (_QWORD *)(a2 + 448))
        free(v59);
      *(_QWORD *)(a2 + 432) = v56;
      *(_DWORD *)(a2 + 444) = v68;
      ++*(_DWORD *)(a2 + 440);
      if (v152[1])
      {
        *(void **)&v153 = v152[1];
        operator delete(v152[1]);
      }
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 432) + 32 * v12;
      v136 = v153;
      v144 = *(_OWORD *)v152;
      v153 = 0uLL;
      v152[1] = 0;
      *(_QWORD *)(v13 + 24) = 0;
      v14 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v13 = v14;
      *(_OWORD *)(v13 + 8) = xmmword_1C8667FA0;
      *v14 = v144;
      v14[1] = v136;
      *(_QWORD *)(v13 + 24) = (char *)&off_1EF8EE250 + 4;
      ++*(_DWORD *)(a2 + 440);
    }
    v150[0] = a1;
    v150[1] = 0;
    v151 = 0uLL;
    sub_1C4EEC644(&v150[1], v158, v159, (v159 - (uint64_t)v158) >> 4);
    v15 = *(unsigned int *)(a2 + 584);
    if (v15 >= *(_DWORD *)(a2 + 588))
    {
      v161 = 0;
      v69 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 576, 0, 32, &v161);
      v70 = &v69[32 * *(unsigned int *)(a2 + 584)];
      v141 = v151;
      v149 = *(_OWORD *)v150;
      v151 = 0uLL;
      v150[1] = 0;
      *((_QWORD *)v70 + 3) = 0;
      v71 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v70 = v71;
      *(_OWORD *)(v70 + 8) = xmmword_1C8667FA0;
      *v71 = v149;
      v71[1] = v141;
      *((_QWORD *)v70 + 3) = (char *)off_1EF8EE268 + 4;
      v72 = *(_QWORD **)(a2 + 576);
      v73 = *(unsigned int *)(a2 + 584);
      if ((_DWORD)v73)
      {
        v74 = 32 * v73;
        v75 = v69;
        do
        {
          *((_QWORD *)v75 + 3) = 0;
          v76 = v72[3];
          *((_QWORD *)v75 + 3) = v76;
          if (v72[3] >= 8uLL)
          {
            if ((v76 & 2) != 0 && (v76 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v76 & 0xFFFFFFFFFFFFFFF8) + 8))(v75, v72);
            }
            else
            {
              v77 = *(_OWORD *)v72;
              *((_QWORD *)v75 + 2) = v72[2];
              *(_OWORD *)v75 = v77;
            }
            v72[3] = 0;
          }
          v72 += 4;
          v75 += 32;
          v74 -= 32;
        }
        while (v74);
        v72 = *(_QWORD **)(a2 + 576);
        v78 = *(unsigned int *)(a2 + 584);
        if ((_DWORD)v78)
        {
          v79 = 32 * v78;
          v80 = (char *)(v72 - 4);
          do
          {
            sub_1C5052E10(&v80[v79]);
            v79 -= 32;
          }
          while (v79);
          v72 = *(_QWORD **)(a2 + 576);
        }
      }
      v81 = v161;
      if (v72 != (_QWORD *)(a2 + 592))
        free(v72);
      *(_QWORD *)(a2 + 576) = v69;
      *(_DWORD *)(a2 + 588) = v81;
      ++*(_DWORD *)(a2 + 584);
      if (v150[1])
      {
        *(void **)&v151 = v150[1];
        operator delete(v150[1]);
      }
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 576) + 32 * v15;
      v137 = v151;
      v145 = *(_OWORD *)v150;
      v151 = 0uLL;
      v150[1] = 0;
      *(_QWORD *)(v16 + 24) = 0;
      v17 = operator new(0x20uLL, (std::align_val_t)8uLL);
      *(_QWORD *)v16 = v17;
      *(_OWORD *)(v16 + 8) = xmmword_1C8667FA0;
      *v17 = v145;
      v17[1] = v137;
      *(_QWORD *)(v16 + 24) = (char *)off_1EF8EE268 + 4;
      ++*(_DWORD *)(a2 + 584);
    }
    if (!a1[2])
    {
      v18 = *(unsigned int *)(a2 + 728);
      if (v18 >= *(_DWORD *)(a2 + 732))
      {
        v161 = 0;
        v82 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 720, 0, 32, &v161);
        v83 = v82;
        v84 = *(unsigned int *)(a2 + 728);
        v85 = &v82[32 * v84];
        *(_QWORD *)v85 = a1;
        *((_QWORD *)v85 + 3) = (char *)off_1EF8EE280 + 2;
        v86 = *(_QWORD **)(a2 + 720);
        if ((_DWORD)v84)
        {
          v87 = 32 * v84;
          v88 = v82;
          do
          {
            *((_QWORD *)v88 + 3) = 0;
            v89 = v86[3];
            *((_QWORD *)v88 + 3) = v89;
            if (v86[3] >= 8uLL)
            {
              if ((v89 & 2) != 0 && (v89 & 4) != 0)
              {
                (*(void (**)(char *, _QWORD *))((v89 & 0xFFFFFFFFFFFFFFF8) + 8))(v88, v86);
              }
              else
              {
                v90 = *(_OWORD *)v86;
                *((_QWORD *)v88 + 2) = v86[2];
                *(_OWORD *)v88 = v90;
              }
              v86[3] = 0;
            }
            v86 += 4;
            v88 += 32;
            v87 -= 32;
          }
          while (v87);
          v86 = *(_QWORD **)(a2 + 720);
          v91 = *(unsigned int *)(a2 + 728);
          if ((_DWORD)v91)
          {
            v92 = 32 * v91;
            v93 = (char *)(v86 - 4);
            do
            {
              sub_1C5052E10(&v93[v92]);
              v92 -= 32;
            }
            while (v92);
            v86 = *(_QWORD **)(a2 + 720);
          }
        }
        v94 = v161;
        if (v86 != (_QWORD *)(a2 + 736))
          free(v86);
        *(_QWORD *)(a2 + 720) = v83;
        *(_DWORD *)(a2 + 732) = v94;
        v20 = *(_DWORD *)(a2 + 728) + 1;
      }
      else
      {
        v19 = (_QWORD *)(*(_QWORD *)(a2 + 720) + 32 * v18);
        *v19 = a1;
        v19[3] = (char *)off_1EF8EE280 + 2;
        v20 = v18 + 1;
      }
      *(_DWORD *)(a2 + 728) = v20;
      v21 = *(unsigned int *)(a2 + 872);
      if (v21 >= *(_DWORD *)(a2 + 876))
      {
        v161 = 0;
        v95 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 864, 0, 32, &v161);
        v96 = v95;
        v97 = *(unsigned int *)(a2 + 872);
        v98 = &v95[32 * v97];
        *(_QWORD *)v98 = a1;
        *((_QWORD *)v98 + 3) = (char *)off_1EF8EE288 + 2;
        v99 = *(_QWORD **)(a2 + 864);
        if ((_DWORD)v97)
        {
          v100 = 32 * v97;
          v101 = v95;
          do
          {
            *((_QWORD *)v101 + 3) = 0;
            v102 = v99[3];
            *((_QWORD *)v101 + 3) = v102;
            if (v99[3] >= 8uLL)
            {
              if ((v102 & 2) != 0 && (v102 & 4) != 0)
              {
                (*(void (**)(char *, _QWORD *))((v102 & 0xFFFFFFFFFFFFFFF8) + 8))(v101, v99);
              }
              else
              {
                v103 = *(_OWORD *)v99;
                *((_QWORD *)v101 + 2) = v99[2];
                *(_OWORD *)v101 = v103;
              }
              v99[3] = 0;
            }
            v99 += 4;
            v101 += 32;
            v100 -= 32;
          }
          while (v100);
          v99 = *(_QWORD **)(a2 + 864);
          v104 = *(unsigned int *)(a2 + 872);
          if ((_DWORD)v104)
          {
            v105 = 32 * v104;
            v106 = (char *)(v99 - 4);
            do
            {
              sub_1C5052E10(&v106[v105]);
              v105 -= 32;
            }
            while (v105);
            v99 = *(_QWORD **)(a2 + 864);
          }
        }
        v107 = v161;
        if (v99 != (_QWORD *)(a2 + 880))
          free(v99);
        *(_QWORD *)(a2 + 864) = v96;
        *(_DWORD *)(a2 + 876) = v107;
        v23 = *(_DWORD *)(a2 + 872) + 1;
      }
      else
      {
        v22 = (_QWORD *)(*(_QWORD *)(a2 + 864) + 32 * v21);
        *v22 = a1;
        v22[3] = (char *)off_1EF8EE288 + 2;
        v23 = v21 + 1;
      }
      *(_DWORD *)(a2 + 872) = v23;
      v24 = *(unsigned int *)(a2 + 1016);
      if (v24 >= *(_DWORD *)(a2 + 1020))
      {
        v161 = 0;
        v108 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 1008, 0, 32, &v161);
        v109 = v108;
        v110 = *(unsigned int *)(a2 + 1016);
        v111 = &v108[32 * v110];
        *(_QWORD *)v111 = a1;
        *((_QWORD *)v111 + 3) = (char *)off_1EF8EE290 + 2;
        v112 = *(_QWORD **)(a2 + 1008);
        if ((_DWORD)v110)
        {
          v113 = 32 * v110;
          v114 = v108;
          do
          {
            *((_QWORD *)v114 + 3) = 0;
            v115 = v112[3];
            *((_QWORD *)v114 + 3) = v115;
            if (v112[3] >= 8uLL)
            {
              if ((v115 & 2) != 0 && (v115 & 4) != 0)
              {
                (*(void (**)(char *, _QWORD *))((v115 & 0xFFFFFFFFFFFFFFF8) + 8))(v114, v112);
              }
              else
              {
                v116 = *(_OWORD *)v112;
                *((_QWORD *)v114 + 2) = v112[2];
                *(_OWORD *)v114 = v116;
              }
              v112[3] = 0;
            }
            v112 += 4;
            v114 += 32;
            v113 -= 32;
          }
          while (v113);
          v112 = *(_QWORD **)(a2 + 1008);
          v117 = *(unsigned int *)(a2 + 1016);
          if ((_DWORD)v117)
          {
            v118 = 32 * v117;
            v119 = (char *)(v112 - 4);
            do
            {
              sub_1C5052E10(&v119[v118]);
              v118 -= 32;
            }
            while (v118);
            v112 = *(_QWORD **)(a2 + 1008);
          }
        }
        v120 = v161;
        if (v112 != (_QWORD *)(a2 + 1024))
          free(v112);
        *(_QWORD *)(a2 + 1008) = v109;
        *(_DWORD *)(a2 + 1020) = v120;
        v26 = *(_DWORD *)(a2 + 1016) + 1;
      }
      else
      {
        v25 = (_QWORD *)(*(_QWORD *)(a2 + 1008) + 32 * v24);
        *v25 = a1;
        v25[3] = (char *)off_1EF8EE290 + 2;
        v26 = v24 + 1;
      }
      *(_DWORD *)(a2 + 1016) = v26;
      v27 = *(unsigned int *)(a2 + 1160);
      if (v27 >= *(_DWORD *)(a2 + 1164))
      {
        v161 = 0;
        v121 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 1152, 0, 32, &v161);
        v122 = v121;
        v123 = *(unsigned int *)(a2 + 1160);
        v124 = &v121[32 * v123];
        *(_QWORD *)v124 = a1;
        *((_QWORD *)v124 + 3) = (char *)off_1EF8EE298 + 2;
        v125 = *(_QWORD **)(a2 + 1152);
        if ((_DWORD)v123)
        {
          v126 = 32 * v123;
          v127 = v121;
          do
          {
            *((_QWORD *)v127 + 3) = 0;
            v128 = v125[3];
            *((_QWORD *)v127 + 3) = v128;
            if (v125[3] >= 8uLL)
            {
              if ((v128 & 2) != 0 && (v128 & 4) != 0)
              {
                (*(void (**)(char *, _QWORD *))((v128 & 0xFFFFFFFFFFFFFFF8) + 8))(v127, v125);
              }
              else
              {
                v129 = *(_OWORD *)v125;
                *((_QWORD *)v127 + 2) = v125[2];
                *(_OWORD *)v127 = v129;
              }
              v125[3] = 0;
            }
            v125 += 4;
            v127 += 32;
            v126 -= 32;
          }
          while (v126);
          v125 = *(_QWORD **)(a2 + 1152);
          v130 = *(unsigned int *)(a2 + 1160);
          if ((_DWORD)v130)
          {
            v131 = 32 * v130;
            v132 = (char *)(v125 - 4);
            do
            {
              sub_1C5052E10(&v132[v131]);
              v131 -= 32;
            }
            while (v131);
            v125 = *(_QWORD **)(a2 + 1152);
          }
        }
        v133 = v161;
        if (v125 != (_QWORD *)(a2 + 1168))
          free(v125);
        *(_QWORD *)(a2 + 1152) = v122;
        *(_DWORD *)(a2 + 1164) = v133;
        v29 = *(_DWORD *)(a2 + 1160) + 1;
      }
      else
      {
        v28 = (_QWORD *)(*(_QWORD *)(a2 + 1152) + 32 * v27);
        *v28 = a1;
        v28[3] = (char *)off_1EF8EE298 + 2;
        v29 = v27 + 1;
      }
      *(_DWORD *)(a2 + 1160) = v29;
    }
    if (v158)
      operator delete(v158);
  }
}

_QWORD *llvm::PreservedCFGCheckerInstrumentation::CFG::CFG(_QWORD *this, const llvm::Function *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Successor;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;

  v4 = (uint64_t)this;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  this[4] = 0;
  v5 = (uint64_t)(this + 4);
  this[5] = 0;
  *((_DWORD *)this + 12) = 0;
  if (a3)
  {
    v26 = -4;
    v27 = 1;
    v28 = (_QWORD *)((char *)a2 + 72);
    do
    {
      v28 = (_QWORD *)v28[1];
      v26 += 4;
      --v27;
    }
    while (v28 != (_QWORD *)((char *)a2 + 72));
    if (v27)
    {
      v29 = (v26 / 3 + 1) | ((unint64_t)(v26 / 3 + 1) >> 1);
      v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
      v31 = ((v30 | (v30 >> 8)) >> 16) | v30 | (v30 >> 8);
      v38 = v31 + 1;
      v32 = operator new(40 * (v31 + 1), (std::align_val_t)8uLL);
      v36 = v32;
      v37 = 0;
      v33 = 40 * v31 + 40;
      do
      {
        *v32 = 0x7FFFFFFFFFFFFFFFLL;
        v32 += 5;
        v33 -= 40;
      }
      while (v33);
    }
    else
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
    }
    sub_1C6305FCC((_QWORD *)v4, (uint64_t)&v36);
    sub_1C6305F54(&v36);
    this = (_QWORD *)MEMORY[0x1CAA32FB4](v36, 8);
  }
  v6 = (char *)a2 + 72;
  v7 = (char *)*((_QWORD *)a2 + 10);
  if (v7 != (char *)a2 + 72)
  {
    while (1)
    {
      if (v7)
        v8 = (uint64_t)(v7 - 24);
      else
        v8 = 0;
      if (*(_BYTE *)(v4 + 24))
      {
        v34 = v8;
        Successor = v8;
        this = (_QWORD *)sub_1C6303728((uint64_t)&v36, v4, &Successor, &v34);
      }
      v9 = *(_QWORD *)(v8 + 40);
      if (v9 != v8 + 40)
        break;
LABEL_38:
      v7 = (char *)*((_QWORD *)v7 + 1);
      if (v7 == v6)
        return (_QWORD *)v4;
    }
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    if (*(_BYTE *)(v10 + 16) != 30)
    {
      v11 = 2;
      switch(*(_BYTE *)(v10 + 16))
      {
        case 0x1E:
          __break(1u);
          return this;
        case 0x1F:
          v11 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_41;
        case 0x20:
        case 0x26:
          v11 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_41;
        case 0x21:
          goto LABEL_16;
        case 0x24:
          v11 = *(_WORD *)(v10 + 18) & 1;
          goto LABEL_41;
        case 0x25:
          v11 = 1;
          goto LABEL_16;
        case 0x27:
          v11 = *(_DWORD *)(v10 + 80) + 1;
LABEL_41:
          if (!v11)
            goto LABEL_38;
          goto LABEL_16;
        default:
          goto LABEL_38;
      }
    }
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
      v11 = 2;
    else
      v11 = 1;
LABEL_16:
    v12 = 0;
    while (1)
    {
      Successor = 0;
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v10, v12);
      v36 = (_QWORD *)v8;
      v13 = sub_1C63063F0(v5, (uint64_t *)&v36);
      v15 = v13[1];
      this = v13 + 1;
      v14 = v15;
      v16 = *((_DWORD *)this + 4);
      if (!v16)
        break;
      v17 = v16 - 1;
      v18 = ((Successor >> 4) ^ (Successor >> 9)) & (v16 - 1);
      v19 = v14 + 16 * v18;
      v20 = *(_QWORD *)v19;
      if (Successor != *(_QWORD *)v19)
      {
        v21 = 0;
        v22 = 1;
        while (v20 != -4096)
        {
          if (v21)
            v23 = 0;
          else
            v23 = v20 == -8192;
          if (v23)
            v21 = (_QWORD *)v19;
          v24 = v18 + v22++;
          v18 = v24 & v17;
          v19 = v14 + 16 * (v24 & v17);
          v20 = *(_QWORD *)v19;
          if (Successor == *(_QWORD *)v19)
            goto LABEL_32;
        }
        if (v21)
          v25 = v21;
        else
          v25 = (_QWORD *)v19;
        goto LABEL_31;
      }
LABEL_32:
      ++*(_DWORD *)(v19 + 8);
      if (*(_BYTE *)(v4 + 24))
      {
        v34 = Successor;
        this = (_QWORD *)sub_1C6303728((uint64_t)&v36, v4, &v34, &Successor);
      }
      if (v11 == ++v12)
        goto LABEL_38;
    }
    v25 = 0;
LABEL_31:
    this = sub_1C4DC1798((uint64_t)this, (uint64_t)&Successor, &Successor, v25);
    v19 = (uint64_t)this;
    *this = Successor;
    *((_DWORD *)this + 2) = 0;
    goto LABEL_32;
  }
  return (_QWORD *)v4;
}

double llvm::PreservedCFGCheckerInstrumentation::CFG::printDiff(llvm::PreservedCFGCheckerInstrumentation::CFG *this, llvm::raw_ostream *a2, const llvm::PreservedCFGCheckerInstrumentation::CFG *a3, const llvm::PreservedCFGCheckerInstrumentation::CFG *a4)
{
  double result;
  void *v8;
  int v9;
  void *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  llvm::raw_ostream *v53;
  const char *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  llvm::raw_ostream *v70;
  const char *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  if (sub_1C5A70684((uint64_t)a2))
  {
    v8 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 0x18uLL)
    {
      qmemcpy(v8, "Some blocks were deleted\n", 25);
      result = *(double *)"ks were deleted\n";
      *((_QWORD *)this + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(this, "Some blocks were deleted\n", 0x19uLL);
    }
    return result;
  }
  v9 = *((_DWORD *)a2 + 10);
  if (v9 != *((_DWORD *)a3 + 10))
  {
    v10 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v10 > 0x31uLL)
    {
      qmemcpy(v10, "Different number of non-leaf basic blocks: before=", 50);
      *((_QWORD *)this + 4) += 50;
    }
    else
    {
      llvm::raw_ostream::write(this, "Different number of non-leaf basic blocks: before=", 0x32uLL);
    }
    sub_1C5E21910(this, *((unsigned int *)a2 + 10), 0, 0, 0);
    v11 = (_QWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x3D7265746661202CLL;
      *((_QWORD *)this + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(this, ", after=", 8uLL);
    }
    sub_1C5E21910(this, *((unsigned int *)a3 + 10), 0, 0, 0);
    v12 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v12)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *v12 = 10;
      ++*((_QWORD *)this + 4);
    }
    v9 = *((_DWORD *)a2 + 10);
  }
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((unsigned int *)a2 + 12);
  v15 = v13 + 32 * v14;
  if (v9)
  {
    if ((_DWORD)v14)
    {
      v16 = 32 * v14;
      v17 = *((_QWORD *)a2 + 4);
      while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 32;
        v16 -= 32;
        if (!v16)
          goto LABEL_17;
      }
    }
    else
    {
      v17 = *((_QWORD *)a2 + 4);
    }
  }
  else
  {
LABEL_17:
    v17 = v13 + 32 * v14;
  }
  v18 = v13 + 32 * v14;
  while (v17 != v18)
  {
    v19 = *(_QWORD *)v17;
    v79 = 0;
    if (sub_1C614ECAC(*((_QWORD *)a3 + 4), *((_DWORD *)a3 + 12), v19, &v79))
      v20 = v79 == *((_QWORD *)a3 + 4) + 32 * *((unsigned int *)a3 + 12);
    else
      v20 = 1;
    if (v20)
    {
      v21 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v21 > 0xEuLL)
      {
        qmemcpy(v21, "Non-leaf block ", 15);
        *((_QWORD *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "Non-leaf block ", 0xFuLL);
      }
      sub_1C5A7073C(this, *(_QWORD *)v17);
      v22 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v22 > 0xCuLL)
      {
        qmemcpy(v22, " is removed (", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, " is removed (", 0xDuLL);
      }
      sub_1C5E21910(this, *(unsigned int *)(v17 + 16), 0, 0, 0);
      v23 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v23 > 0xCuLL)
      {
        qmemcpy(v23, " successors)\n", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, " successors)\n", 0xDuLL);
      }
    }
    v24 = v17 + 32;
    v17 = v15;
    if (v24 != v15)
    {
      v17 = v24;
      while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 32;
        if (v17 == v15)
        {
          v17 = v15;
          break;
        }
      }
    }
  }
  v25 = *((_DWORD *)a3 + 10);
  v26 = *((_QWORD *)a3 + 4);
  v27 = *((unsigned int *)a3 + 12);
  v28 = v26 + 32 * v27;
  if (v25)
  {
    if ((_DWORD)v27)
    {
      v29 = 32 * v27;
      v30 = v26;
      while ((*(_QWORD *)v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v30 += 32;
        v29 -= 32;
        if (!v29)
          goto LABEL_46;
      }
    }
    else
    {
      v30 = v26;
    }
  }
  else
  {
LABEL_46:
    v30 = v26 + 32 * v27;
  }
  v31 = v26 + 32 * v27;
  if (v30 != v31)
  {
    while (1)
    {
      v32 = *(_QWORD *)v30;
      v79 = 0;
      v33 = sub_1C614ECAC(*((_QWORD *)a2 + 4), *((_DWORD *)a2 + 12), v32, &v79);
      v34 = v79;
      if (v33 && v79 != *((_QWORD *)a2 + 4) + 32 * *((unsigned int *)a2 + 12))
        break;
      v36 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v36 > 0xEuLL)
      {
        qmemcpy(v36, "Non-leaf block ", 15);
        *((_QWORD *)this + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(this, "Non-leaf block ", 0xFuLL);
      }
      sub_1C5A7073C(this, *(_QWORD *)v30);
      v37 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v37) > 0xA)
      {
        *(_DWORD *)(v37 + 7) = 673211493;
        *(_QWORD *)v37 = *(_QWORD *)" is added (";
        *((_QWORD *)this + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(this, " is added (", 0xBuLL);
      }
      sub_1C5E21910(this, *(unsigned int *)(v30 + 16), 0, 0, 0);
      v38 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v38 > 0xCuLL)
      {
        qmemcpy(v38, " successors)\n", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, " successors)\n", 0xDuLL);
      }
LABEL_130:
      v77 = v30 + 32;
      v30 = v28;
      if (v77 != v28)
      {
        v30 = v77;
        while ((*(_QWORD *)v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v30 += 32;
          if (v30 == v28)
          {
            v30 = v28;
            break;
          }
        }
      }
      if (v30 == v31)
        return result;
    }
    v39 = sub_1C5A70A14(v79 + 8, (uint64_t *)(v30 + 8));
    if ((v39 & 1) != 0)
      goto LABEL_130;
    v40 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v40 > 0x1DuLL)
    {
      qmemcpy(v40, "Different successors of block ", 30);
      *((_QWORD *)this + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(this, "Different successors of block ", 0x1EuLL);
    }
    sub_1C5A7073C(this, *(_QWORD *)v30);
    v41 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v41 > 0xDuLL)
    {
      qmemcpy(v41, " (unordered):\n", 14);
      v42 = *((_QWORD *)this + 4) + 14;
      *((_QWORD *)this + 4) = v42;
    }
    else
    {
      llvm::raw_ostream::write(this, " (unordered):\n", 0xEuLL);
      v42 = *((_QWORD *)this + 4);
    }
    if ((unint64_t)(*((_QWORD *)this + 3) - v42) > 9)
    {
      *(_WORD *)(v42 + 8) = 10272;
      *(_QWORD *)v42 = *(_QWORD *)"- before (";
      *((_QWORD *)this + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(this, "- before (", 0xAuLL);
    }
    sub_1C5E21910(this, *(unsigned int *)(v34 + 16), 0, 0, 0);
    v43 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v43) > 2)
    {
      *(_BYTE *)(v43 + 2) = 32;
      *(_WORD *)v43 = 14889;
      *((_QWORD *)this + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(this, "): ", 3uLL);
    }
    v44 = *(_DWORD *)(v34 + 16);
    v45 = *(_QWORD *)(v34 + 8);
    v46 = *(unsigned int *)(v34 + 24);
    v47 = v45 + 16 * v46;
    v78 = v31;
    if (v44)
    {
      if (v46)
      {
        v48 = 16 * v46;
        v49 = v45;
        while ((*(_QWORD *)v49 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v49 += 16;
          v48 -= 16;
          if (!v48)
            goto LABEL_74;
        }
      }
      else
      {
        v49 = v45;
      }
    }
    else
    {
LABEL_74:
      v49 = v45 + 16 * v46;
    }
    v50 = v45 + 16 * v46;
    while (1)
    {
LABEL_77:
      if (v49 == v50)
      {
        v59 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v59)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
          v60 = *((_QWORD *)this + 4);
        }
        else
        {
          *v59 = 10;
          v60 = *((_QWORD *)this + 4) + 1;
          *((_QWORD *)this + 4) = v60;
        }
        if ((unint64_t)(*((_QWORD *)this + 3) - v60) > 8)
        {
          *(_BYTE *)(v60 + 8) = 40;
          *(_QWORD *)v60 = *(_QWORD *)"- after (";
          *((_QWORD *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "- after (", 9uLL);
        }
        sub_1C5E21910(this, *(unsigned int *)(v30 + 16), 0, 0, 0);
        v61 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v61) > 2)
        {
          *(_BYTE *)(v61 + 2) = 32;
          *(_WORD *)v61 = 14889;
          *((_QWORD *)this + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(this, "): ", 3uLL);
        }
        v62 = *(_QWORD *)(v30 + 8);
        v63 = *(unsigned int *)(v30 + 24);
        v64 = v62 + 16 * v63;
        if (*(_DWORD *)(v30 + 16))
        {
          if (*(_DWORD *)(v30 + 24))
          {
            v65 = 16 * v63;
            v66 = *(_QWORD *)(v30 + 8);
            while ((*(_QWORD *)v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v66 += 16;
              v65 -= 16;
              if (!v65)
                goto LABEL_106;
            }
          }
          else
          {
            v66 = *(_QWORD *)(v30 + 8);
          }
        }
        else
        {
LABEL_106:
          v66 = v62 + 16 * v63;
        }
        v67 = v62 + 16 * v63;
LABEL_109:
        while (2)
        {
          if (v66 == v67)
          {
            v76 = (_BYTE *)*((_QWORD *)this + 4);
            if (*((_BYTE **)this + 3) == v76)
            {
              llvm::raw_ostream::write(this, "\n", 1uLL);
            }
            else
            {
              *v76 = 10;
              ++*((_QWORD *)this + 4);
            }
            v31 = v78;
            goto LABEL_130;
          }
          sub_1C5A7073C(this, *(_QWORD *)v66);
          v69 = (char *)*((_QWORD *)this + 3);
          v68 = (char *)*((_QWORD *)this + 4);
          if (*(_DWORD *)(v66 + 8) == 1)
          {
            if ((unint64_t)(v69 - v68) <= 1)
            {
              v70 = this;
              v71 = ", ";
              v72 = 2;
              goto LABEL_117;
            }
            *(_WORD *)v68 = 8236;
            v75 = *((_QWORD *)this + 4) + 2;
LABEL_126:
            *((_QWORD *)this + 4) = v75;
          }
          else
          {
            if (v69 == v68)
            {
              llvm::raw_ostream::write(this, "(", 1uLL);
            }
            else
            {
              *v68 = 40;
              ++*((_QWORD *)this + 4);
            }
            sub_1C5E21910(this, *(unsigned int *)(v66 + 8), 0, 0, 0);
            v73 = *((_QWORD *)this + 4);
            if ((unint64_t)(*((_QWORD *)this + 3) - v73) > 2)
            {
              *(_BYTE *)(v73 + 2) = 32;
              *(_WORD *)v73 = 11305;
              v75 = *((_QWORD *)this + 4) + 3;
              goto LABEL_126;
            }
            v70 = this;
            v71 = "), ";
            v72 = 3;
LABEL_117:
            llvm::raw_ostream::write(v70, v71, v72);
          }
          v74 = v66 + 16;
          v66 = v64;
          if (v74 != v64)
          {
            v66 = v74;
            while ((*(_QWORD *)v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v66 += 16;
              if (v66 == v64)
              {
                v66 = v64;
                goto LABEL_109;
              }
            }
          }
          continue;
        }
      }
      sub_1C5A7073C(this, *(_QWORD *)v49);
      v52 = (char *)*((_QWORD *)this + 3);
      v51 = (char *)*((_QWORD *)this + 4);
      if (*(_DWORD *)(v49 + 8) == 1)
      {
        if ((unint64_t)(v52 - v51) > 1)
        {
          *(_WORD *)v51 = 8236;
          v58 = *((_QWORD *)this + 4) + 2;
LABEL_94:
          *((_QWORD *)this + 4) = v58;
          goto LABEL_86;
        }
        v53 = this;
        v54 = ", ";
        v55 = 2;
      }
      else
      {
        if (v52 == v51)
        {
          llvm::raw_ostream::write(this, "(", 1uLL);
        }
        else
        {
          *v51 = 40;
          ++*((_QWORD *)this + 4);
        }
        sub_1C5E21910(this, *(unsigned int *)(v49 + 8), 0, 0, 0);
        v56 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v56) > 2)
        {
          *(_BYTE *)(v56 + 2) = 32;
          *(_WORD *)v56 = 11305;
          v58 = *((_QWORD *)this + 4) + 3;
          goto LABEL_94;
        }
        v53 = this;
        v54 = "), ";
        v55 = 3;
      }
      llvm::raw_ostream::write(v53, v54, v55);
LABEL_86:
      v57 = v49 + 16;
      v49 = v47;
      if (v57 != v47)
      {
        v49 = v57;
        while ((*(_QWORD *)v49 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v49 += 16;
          if (v49 == v47)
          {
            v49 = v47;
            goto LABEL_77;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C5A70684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)a1 + 40 * v1;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v1)
    {
      v3 = 40 * v1;
      v4 = *(uint64_t **)a1;
      while (*v4 > 0x7FFFFFFFFFFFFFFDLL)
      {
        v4 += 5;
        v3 -= 40;
        if (!v3)
          goto LABEL_7;
      }
    }
    else
    {
      v4 = *(uint64_t **)a1;
    }
  }
  else
  {
LABEL_7:
    v4 = (uint64_t *)(*(_QWORD *)a1 + 40 * v1);
  }
  v5 = *(_QWORD *)a1 + 40 * v1;
  if (v4 == (uint64_t *)v5)
    return 0;
  while (1)
  {
    v6 = v4[4];
    result = v6 == 0;
    if (!v6)
      return 1;
    v8 = v4 + 5;
    while (v8 != (uint64_t *)v2)
    {
      v9 = *v8;
      v8 += 5;
      if (v9 <= 0x7FFFFFFFFFFFFFFDLL)
      {
        v4 = v8 - 5;
        goto LABEL_16;
      }
    }
    v4 = (uint64_t *)v2;
LABEL_16:
    if (v4 == (uint64_t *)v5)
      return result;
  }
}

llvm::raw_ostream *sub_1C5A7073C(llvm::raw_ostream *this, unint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  _OWORD *v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  _QWORD *v29;
  llvm::raw_ostream *result;
  _BYTE *v31;
  uint64_t v32;

  v3 = this;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v10 = ***(_QWORD ***)a2;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v14 = (uint64_t *)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == a2)
      {
LABEL_28:
        v24 = (size_t *)v14[1];
        v27 = *v24;
        v25 = v24 + 2;
        v26 = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 4);
        if (v27 <= *((_QWORD *)v3 + 3) - (_QWORD)v28)
        {
          if (v26)
          {
            memcpy(v28, v25, v26);
            v28 = (_BYTE *)(*((_QWORD *)v3 + 4) + v26);
            *((_QWORD *)v3 + 4) = v28;
          }
        }
        else
        {
          llvm::raw_ostream::write(v3, (const char *)v25, v26);
          v28 = (_BYTE *)*((_QWORD *)v3 + 4);
        }
        if (*((_BYTE **)v3 + 3) == v28)
          goto LABEL_39;
        *v28 = 60;
LABEL_45:
        v32 = *((_QWORD *)v3 + 4) + 1;
        goto LABEL_46;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(_QWORD *)(v11 + 16 * v13);
        if (v15 == a2)
        {
          v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_28;
        }
      }
    }
    v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_28;
  }
  v4 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 80);
    v6 = v5 - 24;
    if (!v5)
      v6 = 0;
    if (v6 == a2)
    {
      v21 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v21) > 4)
      {
        *(_BYTE *)(v21 + 4) = 121;
        *(_DWORD *)v21 = 1920233061;
        v22 = (_BYTE *)(*((_QWORD *)this + 4) + 5);
        *((_QWORD *)this + 4) = v22;
      }
      else
      {
        llvm::raw_ostream::write(this, "entry", 5uLL);
        v22 = (_BYTE *)*((_QWORD *)v3 + 4);
      }
      v23 = (_BYTE *)*((_QWORD *)v3 + 3);
    }
    else
    {
      v7 = v4 + 72;
      if (v5 == v7)
      {
        v8 = 0;
      }
      else
      {
        LODWORD(v8) = 0;
        do
        {
          v9 = v5 - 24;
          if (!v5)
            v9 = 0;
          if (v9 == a2)
            v8 = v8;
          else
            v8 = (v8 + 1);
          if (v9 == a2)
            break;
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != v7);
      }
      v29 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v29 > 7uLL)
      {
        *v29 = 0x5F64656D616E6E75;
        *((_QWORD *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "unnamed_", 8uLL);
      }
      sub_1C5E21910(v3, v8, 0, 0, 0);
      v23 = (_BYTE *)*((_QWORD *)v3 + 3);
      v22 = (_BYTE *)*((_QWORD *)v3 + 4);
    }
    if (v23 == v22)
    {
LABEL_39:
      v19 = "<";
      this = v3;
      v20 = 1;
      goto LABEL_40;
    }
    *v22 = 60;
    goto LABEL_45;
  }
  v18 = (_OWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v18 <= 0xFuLL)
  {
    v19 = "unnamed_removed<";
    v20 = 16;
LABEL_40:
    llvm::raw_ostream::write(this, v19, v20);
    goto LABEL_41;
  }
  *v18 = *(_OWORD *)"unnamed_removed<";
  v32 = *((_QWORD *)this + 4) + 16;
LABEL_46:
  *((_QWORD *)v3 + 4) = v32;
LABEL_41:
  result = llvm::write_hex(v3, a2, 3, 0, 0);
  v31 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v31)
    return llvm::raw_ostream::write(v3, ">", 1uLL);
  *v31 = 62;
  ++*((_QWORD *)v3 + 4);
  return result;
}

uint64_t sub_1C5A70A14(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *((_DWORD *)a2 + 2))
    return 0;
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1 + 16 * v3;
  if (v2)
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(_QWORD *)a1;
      while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5)
          goto LABEL_7;
      }
    }
    else
    {
      v6 = *(_QWORD *)a1;
    }
  }
  else
  {
LABEL_7:
    v6 = *(_QWORD *)a1 + 16 * v3;
  }
  v7 = *(_QWORD *)a1 + 16 * v3;
  if (v6 != v7)
  {
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8)
    {
      v9 = *a2;
      v10 = v8 - 1;
      v11 = *a2 + 16 * v8;
      result = 1;
      while (1)
      {
        LODWORD(v13) = ((*(_QWORD *)v6 >> 4) ^ (*(_QWORD *)v6 >> 9)) & v10;
        v14 = (uint64_t *)(v9 + 16 * v13);
        v15 = *v14;
        if (*(_QWORD *)v6 != *v14)
          break;
LABEL_17:
        if (v14 == (uint64_t *)v11 || *((_DWORD *)v14 + 2) != *(_DWORD *)(v6 + 8))
          return 0;
        v18 = v6 + 16;
        v6 = v4;
        if (v18 != v4)
        {
          v6 = v18;
          while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v6 += 16;
            if (v6 == v4)
            {
              v6 = v4;
              break;
            }
          }
        }
        if (v6 == v7)
          return result;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & v10;
        v15 = *(_QWORD *)(v9 + 16 * v13);
        if (*(_QWORD *)v6 == v15)
        {
          v14 = (uint64_t *)(v9 + 16 * v13);
          goto LABEL_17;
        }
      }
    }
    return 0;
  }
  return 1;
}

void llvm::PreservedCFGCheckerInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  void *v58;

  if (byte_1ED834D88)
  {
    v58 = &PreservedCFGCheckerAnalysis::Key;
    v6 = sub_1C54E652C(a3, &v58);
    if (!v6[1])
    {
      v7 = v6;
      v8 = (_QWORD *)operator new();
      *v8 = &off_1E8192A20;
      v9 = v7[1];
      v7[1] = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v10 = *(unsigned int *)(a2 + 296);
    if (v10 >= *(_DWORD *)(a2 + 300))
    {
      v58 = 0;
      v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, (unint64_t *)&v58);
      v20 = v19;
      v21 = *(unsigned int *)(a2 + 296);
      v22 = &v19[32 * v21];
      *(_QWORD *)v22 = a1;
      *((_QWORD *)v22 + 1) = a3;
      *((_QWORD *)v22 + 3) = (char *)off_1EF8EE2A0 + 2;
      v23 = *(_QWORD **)(a2 + 288);
      if ((_DWORD)v21)
      {
        v24 = 32 * v21;
        v25 = v19;
        do
        {
          *((_QWORD *)v25 + 3) = 0;
          v26 = v23[3];
          *((_QWORD *)v25 + 3) = v26;
          if (v23[3] >= 8uLL)
          {
            if ((v26 & 2) != 0 && (v26 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(v25, v23);
            }
            else
            {
              v27 = *(_OWORD *)v23;
              *((_QWORD *)v25 + 2) = v23[2];
              *(_OWORD *)v25 = v27;
            }
            v23[3] = 0;
          }
          v23 += 4;
          v25 += 32;
          v24 -= 32;
        }
        while (v24);
        v23 = *(_QWORD **)(a2 + 288);
        v28 = *(unsigned int *)(a2 + 296);
        if ((_DWORD)v28)
        {
          v29 = 32 * v28;
          v30 = (char *)(v23 - 4);
          do
          {
            sub_1C5052E10(&v30[v29]);
            v29 -= 32;
          }
          while (v29);
          v23 = *(_QWORD **)(a2 + 288);
        }
      }
      v31 = (int)v58;
      if (v23 != (_QWORD *)(a2 + 304))
        free(v23);
      *(_QWORD *)(a2 + 288) = v20;
      *(_DWORD *)(a2 + 300) = v31;
      v12 = *(_DWORD *)(a2 + 296) + 1;
    }
    else
    {
      v11 = (_QWORD *)(*(_QWORD *)(a2 + 288) + 32 * v10);
      *v11 = a1;
      v11[1] = a3;
      v11[3] = (char *)off_1EF8EE2A0 + 2;
      v12 = v10 + 1;
    }
    *(_DWORD *)(a2 + 296) = v12;
    v13 = *(unsigned int *)(a2 + 584);
    if (v13 >= *(_DWORD *)(a2 + 588))
    {
      v58 = 0;
      v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 576, 0, 32, (unint64_t *)&v58);
      v33 = v32;
      v34 = *(unsigned int *)(a2 + 584);
      v35 = &v32[32 * v34];
      *(_QWORD *)v35 = a1;
      *((_QWORD *)v35 + 3) = (char *)off_1EF8EE2A8 + 2;
      v36 = *(_QWORD **)(a2 + 576);
      if ((_DWORD)v34)
      {
        v37 = 32 * v34;
        v38 = v32;
        do
        {
          *((_QWORD *)v38 + 3) = 0;
          v39 = v36[3];
          *((_QWORD *)v38 + 3) = v39;
          if (v36[3] >= 8uLL)
          {
            if ((v39 & 2) != 0 && (v39 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v39 & 0xFFFFFFFFFFFFFFF8) + 8))(v38, v36);
            }
            else
            {
              v40 = *(_OWORD *)v36;
              *((_QWORD *)v38 + 2) = v36[2];
              *(_OWORD *)v38 = v40;
            }
            v36[3] = 0;
          }
          v36 += 4;
          v38 += 32;
          v37 -= 32;
        }
        while (v37);
        v36 = *(_QWORD **)(a2 + 576);
        v41 = *(unsigned int *)(a2 + 584);
        if ((_DWORD)v41)
        {
          v42 = 32 * v41;
          v43 = (char *)(v36 - 4);
          do
          {
            sub_1C5052E10(&v43[v42]);
            v42 -= 32;
          }
          while (v42);
          v36 = *(_QWORD **)(a2 + 576);
        }
      }
      v44 = (int)v58;
      if (v36 != (_QWORD *)(a2 + 592))
        free(v36);
      *(_QWORD *)(a2 + 576) = v33;
      *(_DWORD *)(a2 + 588) = v44;
      v15 = *(_DWORD *)(a2 + 584) + 1;
    }
    else
    {
      v14 = (_QWORD *)(*(_QWORD *)(a2 + 576) + 32 * v13);
      *v14 = a1;
      v14[3] = (char *)off_1EF8EE2A8 + 2;
      v15 = v13 + 1;
    }
    *(_DWORD *)(a2 + 584) = v15;
    v16 = *(unsigned int *)(a2 + 440);
    if (v16 >= *(_DWORD *)(a2 + 444))
    {
      v58 = 0;
      v45 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, (unint64_t *)&v58);
      v46 = v45;
      v47 = *(unsigned int *)(a2 + 440);
      v48 = &v45[32 * v47];
      *(_QWORD *)v48 = a1;
      *((_QWORD *)v48 + 1) = a3;
      *((_QWORD *)v48 + 3) = (char *)off_1EF8EE2B0 + 2;
      v49 = *(_QWORD **)(a2 + 432);
      if ((_DWORD)v47)
      {
        v50 = 32 * v47;
        v51 = v45;
        do
        {
          *((_QWORD *)v51 + 3) = 0;
          v52 = v49[3];
          *((_QWORD *)v51 + 3) = v52;
          if (v49[3] >= 8uLL)
          {
            if ((v52 & 2) != 0 && (v52 & 4) != 0)
            {
              (*(void (**)(char *, _QWORD *))((v52 & 0xFFFFFFFFFFFFFFF8) + 8))(v51, v49);
            }
            else
            {
              v53 = *(_OWORD *)v49;
              *((_QWORD *)v51 + 2) = v49[2];
              *(_OWORD *)v51 = v53;
            }
            v49[3] = 0;
          }
          v49 += 4;
          v51 += 32;
          v50 -= 32;
        }
        while (v50);
        v49 = *(_QWORD **)(a2 + 432);
        v54 = *(unsigned int *)(a2 + 440);
        if ((_DWORD)v54)
        {
          v55 = 32 * v54;
          v56 = (char *)(v49 - 4);
          do
          {
            sub_1C5052E10(&v56[v55]);
            v55 -= 32;
          }
          while (v55);
          v49 = *(_QWORD **)(a2 + 432);
        }
      }
      v57 = (int)v58;
      if (v49 != (_QWORD *)(a2 + 448))
        free(v49);
      *(_QWORD *)(a2 + 432) = v46;
      *(_DWORD *)(a2 + 444) = v57;
      v18 = *(_DWORD *)(a2 + 440) + 1;
    }
    else
    {
      v17 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v16);
      *v17 = a1;
      v17[1] = a3;
      v17[3] = (char *)off_1EF8EE2B0 + 2;
      v18 = v16 + 1;
    }
    *(_DWORD *)(a2 + 440) = v18;
  }
}

void llvm::VerifyInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;

  v4 = *(unsigned int *)(a2 + 440);
  if (v4 >= *(_DWORD *)(a2 + 444))
  {
    v20 = 0;
    v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v20);
    v8 = v7;
    v9 = *(unsigned int *)(a2 + 440);
    v10 = &v7[32 * v9];
    *(_QWORD *)v10 = a1;
    *((_QWORD *)v10 + 3) = (char *)off_1EF8EE2B8 + 2;
    v11 = *(_QWORD **)(a2 + 432);
    if ((_DWORD)v9)
    {
      v12 = 32 * v9;
      v13 = v7;
      do
      {
        *((_QWORD *)v13 + 3) = 0;
        v14 = v11[3];
        *((_QWORD *)v13 + 3) = v14;
        if (v11[3] >= 8uLL)
        {
          if ((v14 & 2) != 0 && (v14 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(v13, v11);
          }
          else
          {
            v15 = *(_OWORD *)v11;
            *((_QWORD *)v13 + 2) = v11[2];
            *(_OWORD *)v13 = v15;
          }
          v11[3] = 0;
        }
        v11 += 4;
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
      v11 = *(_QWORD **)(a2 + 432);
      v16 = *(unsigned int *)(a2 + 440);
      if ((_DWORD)v16)
      {
        v17 = 32 * v16;
        v18 = (char *)(v11 - 4);
        do
        {
          sub_1C5052E10(&v18[v17]);
          v17 -= 32;
        }
        while (v17);
        v11 = *(_QWORD **)(a2 + 432);
      }
    }
    v19 = v20;
    if (v11 != (_QWORD *)(a2 + 448))
      free(v11);
    *(_QWORD *)(a2 + 432) = v8;
    *(_DWORD *)(a2 + 444) = v19;
    v6 = *(_DWORD *)(a2 + 440) + 1;
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v4);
    *v5 = a1;
    v5[3] = (char *)off_1EF8EE2B8 + 2;
    v6 = v4 + 1;
  }
  *(_DWORD *)(a2 + 440) = v6;
}

void llvm::InLineChangePrinter::~InLineChangePrinter(llvm::InLineChangePrinter *this)
{
  void **v1;

  *(_QWORD *)this = &unk_1E8192650;
  v1 = (void **)((char *)this + 8);
  sub_1C5A817E4(&v1);
}

{
  void **v1;

  *(_QWORD *)this = &unk_1E8192650;
  v1 = (void **)((char *)this + 8);
  sub_1C5A817E4(&v1);
}

{
  void **v1;

  *(_QWORD *)this = &unk_1E8192650;
  v1 = (void **)((char *)this + 8);
  sub_1C5A817E4(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::IRComparer<llvm::EmptyData>::analyzeIR(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;
  uint64_t ***v9;
  void *v10;
  uint64_t ****v11;
  uint64_t v12;

  v4 = *a1;
  if (v4)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 16))(&v12);
  else
    v12 = 0;
  v5 = sub_1C5A71A3C(&v12);
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v5)
  {
    v7 = v5 + 24;
    for (i = *(_QWORD *)(v5 + 32); i != v7; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v9 = (uint64_t ***)(i - 56);
      else
        v9 = 0;
      result = llvm::IRComparer<llvm::EmptyData>::generateFunctionData(a2, v9);
    }
  }
  else
  {
    v10 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    if (v10 == &llvm::Any::TypeId<llvm::Function const*>::Id)
      v11 = (uint64_t ****)(*a1 + 8);
    else
      v11 = (uint64_t ****)(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 32) + 56);
    return llvm::IRComparer<llvm::EmptyData>::generateFunctionData(a2, *v11);
  }
  return result;
}

{
  return __ZN4llvm10IRComparerINS_9EmptyDataEE9analyzeIRENS_3AnyERNS_7IRDataTIS1_EE(a1, a2);
}

_QWORD *llvm::IRComparer<llvm::EmptyData>::IRComparer(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

void llvm::IRComparer<llvm::EmptyData>::compare(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 ***v12;
  void **v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  unsigned __int8 *v21;
  size_t v22;
  size_t v23;
  int v24;
  size_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  size_t i;
  signed __int8 v36;
  signed __int8 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  void *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  size_t v52;
  uint64_t v53;
  int v54;
  size_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int v58;
  unsigned __int8 **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int j;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  size_t v68;
  uint64_t v69;
  int v70;
  size_t v71;
  unsigned __int8 *v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  int k;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 **v80;
  uint64_t v81;
  int v82;
  size_t v83;
  unsigned __int8 *v84;
  int v85;
  unsigned int v86;
  unsigned __int8 **v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int m;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 **v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  void **v107;
  uint64_t *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unsigned __int8 **v111;
  int v112;
  signed __int8 v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  size_t v116;
  uint64_t *v117;
  uint64_t *v118;
  unsigned __int8 ***v119;
  unsigned __int8 **v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD v125[3];
  _BYTE v126[44];
  int v127;
  void *__p;
  char v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  __int128 __dst;
  uint64_t v134;
  void **v135[4];
  unsigned __int8 *v136;
  uint64_t (*v137)();
  _QWORD *v138;

  if ((a2 & 1) == 0)
  {
    v3 = *(uint64_t **)(*a1 + 24);
    if (*(_DWORD *)(*a1 + 32))
    {
      while (1)
      {
        v4 = *v3;
        if (*v3 && v4 != -8)
          break;
        ++v3;
      }
    }
    else
    {
      v4 = *v3;
    }
    v6 = a1[1];
    v7 = *(uint64_t **)(v6 + 24);
    if (*(_DWORD *)(v6 + 32))
    {
      while (1)
      {
        v8 = *v7;
        if (*v7 && v8 != -8)
          break;
        ++v7;
      }
    }
    else
    {
      v8 = *v7;
    }
    LOBYTE(v135[0]) = 0;
    *(_DWORD *)v126 = 0;
    v10 = *(_QWORD *)(a3 + 24);
    if (v10)
    {
      (*(void (**)(uint64_t, void ***, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v135, v126, v4 + 8, v8 + 8);
    }
    else
    {
      sub_1C485C2F0();
      sub_1C5A71A3C(v106);
    }
    return;
  }
  v130 = 0;
  memset(v126, 0, sizeof(v126));
  v127 = 64;
  __p = 0;
  v129 = 0;
  v11 = (_QWORD *)*a1;
  v12 = (unsigned __int8 ***)a1[1];
  v125[0] = v126;
  v125[1] = a3;
  v125[2] = &v130;
  v137 = sub_1C6307490;
  v138 = v125;
  v13 = (void **)(v11 + 3);
  v14 = (unsigned __int8 *)*v11;
  v124 = v11;
  v109 = (unsigned __int8 *)v11[1];
  v136 = (unsigned __int8 *)*v11;
  v16 = *v12;
  v15 = v12[1];
  v119 = v12;
  v135[0] = (void **)(v12 + 3);
  v135[1] = (void **)&v137;
  v135[2] = v13;
  v135[3] = (void **)&v136;
  v111 = v15;
  if (v16 == v15)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_161;
  }
  v107 = v13;
  v108 = (uint64_t *)(v12 + 3);
  v117 = 0;
  v17 = 0;
  v18 = 0;
  do
  {
    v19 = v18;
    v118 = v17;
LABEL_24:
    v20 = *((_BYTE *)v16 + 23);
    v112 = v20;
    if (v20 >= 0)
      v21 = (unsigned __int8 *)v16;
    else
      v21 = *v16;
    v22 = v20 & 0x7F;
    v115 = v16[1];
    if (v112 >= 0)
      v23 = v22;
    else
      v23 = (size_t)v16[1];
    v120 = v16;
    v121 = *((unsigned int *)v124 + 8);
    if ((_DWORD)v121)
    {
      v24 = 0;
      if (v23)
      {
        v25 = v23;
        v26 = v21;
        do
        {
          v27 = *v26++;
          v24 = 33 * v24 + v27;
          --v25;
        }
        while (v25);
      }
      v28 = v124[3];
      v29 = *((unsigned int *)v124 + 11);
      v30 = 1;
      v31 = v24;
      while (1)
      {
        v32 = v31 & (v121 - 1);
        v33 = *(_QWORD **)(v28 + 8 * v32);
        if (v33 != (_QWORD *)-8)
        {
          if (!v33)
            goto LABEL_116;
          if (*(_DWORD *)(v28 + 8 * v121 + 8 + 4 * v32) == v24
            && v23 == *v33
            && (!v23 || !memcmp(v21, (char *)v33 + v29, v23)))
          {
            break;
          }
        }
        v31 = v30 + v32;
        ++v30;
      }
      if ((_DWORD)v32 != -1 && (int)v32 != v121)
      {
        v34 = v136;
        v17 = v118;
        v36 = v112;
        for (i = (size_t)v115; ; i = (size_t)v120[1])
        {
          v37 = v34[23];
          v38 = *((_QWORD *)v34 + 1);
          v39 = v37 & 0x7F;
          if (v37 >= 0)
            v40 = v37 & 0x7F;
          else
            v40 = *((_QWORD *)v34 + 1);
          v41 = v36 & 0x7F;
          if (v36 >= 0)
            v42 = v36 & 0x7F;
          else
            v42 = i;
          if (v40 == v42)
          {
            v43 = *v120;
            if (v36 >= 0)
              v44 = (unsigned __int8 *)v120;
            else
              v44 = *v120;
            if ((v34[23] & 0x80) != 0)
            {
              v46 = *(void **)v34;
              if (!memcmp(*(const void **)v34, v44, *((_QWORD *)v34 + 1)))
              {
LABEL_69:
                v48 = v118;
                if (v118 != v19)
                {
                  do
                  {
                    v49 = *v48++;
                    ((void (*)(_QWORD *, _QWORD, uint64_t))v137)(v138, 0, v49);
                  }
                  while (v48 != v19);
                  v43 = *v120;
                  i = (size_t)v120[1];
                  v41 = *((_BYTE *)v120 + 23) & 0x7F;
                  v36 = *((_BYTE *)v120 + 23);
                }
                v50 = v36;
                if (v36 >= 0)
                  v51 = (unsigned __int8 *)v120;
                else
                  v51 = v43;
                if (v36 >= 0)
                  v52 = v41;
                else
                  v52 = i;
                v53 = *((unsigned int *)v119 + 8);
                if ((_DWORD)v53)
                {
                  v113 = v36;
                  v116 = i;
                  v122 = v36;
                  v54 = 0;
                  if (v52)
                  {
                    v55 = v52;
                    v56 = v51;
                    do
                    {
                      v57 = *v56++;
                      v54 = 33 * v54 + v57;
                      --v55;
                    }
                    while (v55);
                  }
                  v58 = v53 - 1;
                  v59 = v119[3];
                  v110 = *((unsigned int *)v119 + 8);
                  v60 = (uint64_t)&v59[v53 + 1];
                  v61 = *((unsigned int *)v119 + 11);
                  v62 = 1;
                  for (j = v54; ; j = v64 + v62++)
                  {
                    v64 = j & v58;
                    v65 = v59[v64];
                    if (v65 != (unsigned __int8 *)-8)
                    {
                      if (!v65)
                        goto LABEL_92;
                      if (*(_DWORD *)(v60 + 4 * v64) == v54
                        && v52 == *(_QWORD *)v65
                        && (!v52 || !memcmp(v51, &v65[v61], v52)))
                      {
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v64 != -1)
                  {
                    v66 = (int)v64;
                    v36 = v113;
                    i = v116;
                    v50 = v122;
                    goto LABEL_93;
                  }
LABEL_92:
                  v36 = v113;
                  i = v116;
                  v50 = v122;
                  v66 = v110;
                }
                else
                {
                  v66 = 0;
                  v59 = (unsigned __int8 **)*v108;
                }
LABEL_93:
                v67 = v59[v66];
                if (v50 >= 0)
                  v68 = v36 & 0x7F;
                else
                  v68 = i;
                v69 = *((unsigned int *)v124 + 8);
                if ((_DWORD)v69)
                {
                  v114 = v67;
                  v70 = 0;
                  if (v68)
                  {
                    v71 = v68;
                    v72 = v51;
                    do
                    {
                      v73 = *v72++;
                      v70 = 33 * v70 + v73;
                      --v71;
                    }
                    while (v71);
                  }
                  v74 = (_QWORD *)v124[3];
                  v75 = *((unsigned int *)v124 + 11);
                  v76 = 1;
                  for (k = v70; ; k = v78 + v76++)
                  {
                    v78 = k & (v69 - 1);
                    v79 = (_QWORD *)v74[v78];
                    if (v79 != (_QWORD *)-8)
                    {
                      if (!v79)
                        goto LABEL_110;
                      if (*((_DWORD *)&v74[v69 + 1] + v78) == v70
                        && v68 == *v79
                        && (!v68 || !memcmp(v51, (char *)v79 + v75, v68)))
                      {
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v78 != -1)
                  {
                    v69 = (int)v78;
                    v17 = v118;
                    v80 = v120;
                    v67 = v114;
                    goto LABEL_112;
                  }
LABEL_110:
                  v17 = v118;
                  v67 = v114;
                }
                else
                {
                  v69 = 0;
                  v74 = *v107;
                }
                v80 = v120;
LABEL_112:
                ((void (*)(_QWORD *, uint64_t, unsigned __int8 *))v137)(v138, v74[v69] + 8, v67 + 8);
                v14 = v136 + 24;
                v136 += 24;
                v16 = v80 + 3;
                v19 = v17;
                if (v16 == v111)
                {
                  v18 = v17;
                  goto LABEL_161;
                }
                goto LABEL_24;
              }
              goto LABEL_62;
            }
            if ((v37 & 0x7F) == 0)
              goto LABEL_69;
            v45 = v34;
            while (*v45 == *v44)
            {
              ++v45;
              ++v44;
              if (!--v39)
                goto LABEL_69;
            }
          }
          if ((v34[23] & 0x80) != 0)
          {
            v46 = *(void **)v34;
LABEL_62:
            sub_1C47EBC30(&__dst, v46, v38);
            goto LABEL_63;
          }
          v47 = *(_OWORD *)v34;
          v134 = *((_QWORD *)v34 + 2);
          __dst = v47;
LABEL_63:
          sub_1C630669C((uint64_t)v135, (uint64_t *)&__dst);
          if (SHIBYTE(v134) < 0)
            operator delete((void *)__dst);
          v34 = v136 + 24;
          v136 += 24;
          v36 = *((_BYTE *)v120 + 23);
        }
      }
    }
LABEL_116:
    v81 = *((unsigned int *)v119 + 8);
    if ((_DWORD)v81)
    {
      v82 = 0;
      if (v23)
      {
        v83 = v23;
        v84 = v21;
        do
        {
          v85 = *v84++;
          v82 = 33 * v82 + v85;
          --v83;
        }
        while (v83);
      }
      v86 = v81 - 1;
      v87 = v119[3];
      v123 = *((unsigned int *)v119 + 8);
      v88 = (uint64_t)&v87[v81 + 1];
      v89 = *((unsigned int *)v119 + 11);
      v90 = 1;
      for (m = v82; ; m = v92 + v90++)
      {
        v92 = m & v86;
        v93 = v87[v92];
        if (v93 != (unsigned __int8 *)-8)
        {
          if (!v93)
            goto LABEL_131;
          if (*(_DWORD *)(v88 + 4 * v92) == v82 && v23 == *(_QWORD *)v93 && (!v23 || !memcmp(v21, &v93[v89], v23)))
            break;
        }
      }
      if ((_DWORD)v92 != -1)
      {
        v94 = (int)v92;
        goto LABEL_130;
      }
LABEL_131:
      v17 = v118;
      v94 = v123;
    }
    else
    {
      v94 = 0;
      v87 = (unsigned __int8 **)*v108;
LABEL_130:
      v17 = v118;
    }
    v95 = (uint64_t)(v87[v94] + 8);
    if (v19 >= v117)
    {
      v97 = v19 - v17;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 61)
        abort();
      if (((char *)v117 - (char *)v17) >> 2 > v98)
        v98 = ((char *)v117 - (char *)v17) >> 2;
      if ((unint64_t)((char *)v117 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
        v99 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v99 = v98;
      if (v99)
      {
        if (v99 >> 61)
          sub_1C4764EE4();
        v100 = (char *)operator new(8 * v99);
      }
      else
      {
        v100 = 0;
      }
      v101 = (uint64_t *)&v100[8 * v97];
      *v101 = v95;
      v18 = v101 + 1;
      if (v19 == v17)
      {
        v96 = v120;
      }
      else
      {
        v96 = v120;
        do
        {
          v102 = *--v19;
          *--v101 = v102;
        }
        while (v19 != v17);
      }
      v117 = (uint64_t *)&v100[8 * v99];
      if (v17)
        operator delete(v17);
      v17 = v101;
    }
    else
    {
      *v19 = v95;
      v18 = v19 + 1;
      v96 = v120;
    }
    v16 = v96 + 3;
  }
  while (v16 != v111);
  v14 = v136;
LABEL_161:
  while (v14 != v109)
  {
    if ((char)v14[23] < 0)
    {
      sub_1C47EBC30(&v131, *(void **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v103 = *(_OWORD *)v14;
      v132 = *((_QWORD *)v14 + 2);
      v131 = v103;
    }
    sub_1C630669C((uint64_t)v135, (uint64_t *)&v131);
    if (SHIBYTE(v132) < 0)
      operator delete((void *)v131);
    v14 = v136 + 24;
    v136 += 24;
  }
  if (v17 != v18)
  {
    v104 = v17;
    do
    {
      v105 = *v104++;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v137)(v138, 0, v105);
    }
    while (v104 != v18);
  }
  if (v17)
    operator delete(v17);
  if (v129 < 0)
    operator delete(__p);
  sub_1C6305324((uint64_t)&v126[24]);
  v135[0] = (void **)v126;
  sub_1C4765410(v135);
}

{
  __ZN4llvm10IRComparerINS_9EmptyDataEE7compareEbNSt3__18functionIFvbjRKNS_9FuncDataTIS1_EES8_EEE(a1, a2, a3);
}

uint64_t sub_1C5A71A3C(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    v3 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    result = *a1;
    if (v3 == &llvm::Any::TypeId<llvm::Module const*>::Id)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      v4 = *a1 + 8;
    }
    else
    {
      if (!result)
        return result;
      if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result) != &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
        return 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
      v4 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 8) + 8) + 40;
    }
    return *(_QWORD *)v4;
  }
  return result;
}

void sub_1C5A71AF0(unsigned __int8 **a1, unsigned __int8 **a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  size_t v14;
  int v15;
  size_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  size_t j;
  signed __int8 v27;
  signed __int8 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  void *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  size_t v43;
  uint64_t v44;
  int v45;
  size_t v46;
  unsigned __int8 *v47;
  int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int k;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  int v61;
  size_t v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  int m;
  uint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  size_t v74;
  unsigned __int8 *v75;
  int v76;
  unsigned int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int i;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  signed __int8 v103;
  uint64_t v104;
  size_t v105;
  size_t v106;
  unint64_t v107;
  uint64_t *v108;
  unsigned __int8 *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  void *__dst[2];
  uint64_t v116;
  void *__p[2];
  uint64_t v118;
  _QWORD v119[4];
  unsigned __int8 *v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;

  v121 = a3;
  v122 = a4;
  v4 = *a1;
  v99 = a1[1];
  v6 = *a2;
  v5 = a2[1];
  v119[0] = a2 + 3;
  v119[1] = &v121;
  v119[2] = a1 + 3;
  v119[3] = &v120;
  v120 = v4;
  v101 = v5;
  if (v6 != v5)
  {
    v97 = (uint64_t *)(a1 + 3);
    v98 = (uint64_t *)(a2 + 3);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v107 = (unint64_t)v7;
      v108 = v8;
      v10 = v9;
LABEL_4:
      v11 = v6[23];
      v102 = (char)v11;
      v12 = (v11 & 0x80u) == 0 ? v6 : *(unsigned __int8 **)v6;
      v13 = v11 & 0x7F;
      v105 = *((_QWORD *)v6 + 1);
      v14 = v102 >= 0 ? v13 : *((_QWORD *)v6 + 1);
      v110 = v6;
      v111 = *((unsigned int *)a1 + 8);
      if ((_DWORD)v111)
      {
        v15 = 0;
        if (v14)
        {
          v16 = v14;
          v17 = v12;
          do
          {
            v18 = *v17++;
            v15 = 33 * v15 + v18;
            --v16;
          }
          while (v16);
        }
        v19 = a1[3];
        v20 = *((unsigned int *)a1 + 11);
        v21 = 1;
        v22 = v15;
        while (1)
        {
          v23 = v22 & (v111 - 1);
          v24 = *(_QWORD **)&v19[8 * v23];
          if (v24 != (_QWORD *)-8)
          {
            if (!v24)
              goto LABEL_95;
            if (*(_DWORD *)&v19[8 * v111 + 8 + 4 * v23] == v15
              && v14 == *v24
              && (!v14 || !memcmp(v12, (char *)v24 + v20, v14)))
            {
              break;
            }
          }
          v22 = v21 + v23;
          ++v21;
        }
        if ((_DWORD)v23 != -1 && (int)v23 != v111)
          break;
      }
LABEL_95:
      v72 = *((unsigned int *)a2 + 8);
      if ((_DWORD)v72)
      {
        v73 = 0;
        if (v14)
        {
          v74 = v14;
          v75 = v12;
          do
          {
            v76 = *v75++;
            v73 = 33 * v73 + v76;
            --v74;
          }
          while (v74);
        }
        v77 = v72 - 1;
        v78 = a2[3];
        v113 = *((unsigned int *)a2 + 8);
        v79 = (uint64_t)&v78[8 * v72 + 8];
        v80 = *((unsigned int *)a2 + 11);
        v81 = 1;
        for (i = v73; ; i = v83 + v81++)
        {
          v83 = i & v77;
          v84 = *(_QWORD **)&v78[8 * v83];
          if (v84 != (_QWORD *)-8)
          {
            if (!v84)
              goto LABEL_110;
            if (*(_DWORD *)(v79 + 4 * v83) == v73 && v14 == *v84 && (!v14 || !memcmp(v12, (char *)v84 + v80, v14)))
              break;
          }
        }
        if ((_DWORD)v83 != -1)
        {
          v85 = (int)v83;
          goto LABEL_109;
        }
LABEL_110:
        v8 = v108;
        v86 = v110;
        v85 = v113;
      }
      else
      {
        v85 = 0;
        v78 = (unsigned __int8 *)*v98;
LABEL_109:
        v8 = v108;
        v86 = v110;
      }
      v87 = *(_QWORD *)&v78[8 * v85] + 8;
      v7 = (char *)v107;
      if ((unint64_t)v10 >= v107)
      {
        v88 = v10 - v8;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61)
          abort();
        if ((uint64_t)(v107 - (_QWORD)v8) >> 2 > v89)
          v89 = (uint64_t)(v107 - (_QWORD)v8) >> 2;
        if (v107 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          if (v90 >> 61)
            sub_1C4764EE4();
          v91 = (char *)operator new(8 * v90);
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v88];
        *v92 = v87;
        v9 = v92 + 1;
        while (v10 != v8)
        {
          v93 = *--v10;
          *--v92 = v93;
        }
        v7 = &v91[8 * v90];
        if (v8)
          operator delete(v8);
        v8 = v92;
      }
      else
      {
        *v10 = v87;
        v9 = v10 + 1;
      }
      v6 = v86 + 24;
      if (v6 == v101)
      {
        v4 = v120;
        goto LABEL_139;
      }
    }
    v25 = v120;
    v8 = v108;
    v27 = v102;
    for (j = v105; ; j = *((_QWORD *)v110 + 1))
    {
      v28 = v25[23];
      v29 = *((_QWORD *)v25 + 1);
      v30 = v28 & 0x7F;
      if (v28 >= 0)
        v31 = v28 & 0x7F;
      else
        v31 = *((_QWORD *)v25 + 1);
      v32 = v27 & 0x7F;
      if (v27 >= 0)
        v33 = v27 & 0x7F;
      else
        v33 = j;
      if (v31 == v33)
      {
        v34 = *(unsigned __int8 **)v110;
        if (v27 >= 0)
          v35 = v110;
        else
          v35 = *(unsigned __int8 **)v110;
        if ((v25[23] & 0x80) != 0)
        {
          v37 = *(void **)v25;
          if (!memcmp(*(const void **)v25, v35, *((_QWORD *)v25 + 1)))
          {
LABEL_49:
            v39 = v108;
            if (v108 != v10)
            {
              do
              {
                v40 = *v39++;
                v121(v122, 0, v40);
              }
              while (v39 != v10);
              v34 = *(unsigned __int8 **)v110;
              j = *((_QWORD *)v110 + 1);
              v32 = v110[23] & 0x7F;
              v27 = v110[23];
            }
            v41 = v27;
            if (v27 >= 0)
              v42 = v110;
            else
              v42 = v34;
            if (v27 >= 0)
              v43 = v32;
            else
              v43 = j;
            v44 = *((unsigned int *)a2 + 8);
            if ((_DWORD)v44)
            {
              v103 = v27;
              v106 = j;
              v112 = v27;
              v45 = 0;
              if (v43)
              {
                v46 = v43;
                v47 = v42;
                do
                {
                  v48 = *v47++;
                  v45 = 33 * v45 + v48;
                  --v46;
                }
                while (v46);
              }
              v49 = v44 - 1;
              v50 = a2[3];
              v100 = *((unsigned int *)a2 + 8);
              v51 = (uint64_t)&v50[8 * v44 + 8];
              v52 = *((unsigned int *)a2 + 11);
              v53 = 1;
              for (k = v45; ; k = v55 + v53++)
              {
                v55 = k & v49;
                v56 = *(_QWORD **)&v50[8 * v55];
                if (v56 != (_QWORD *)-8)
                {
                  if (!v56)
                    goto LABEL_72;
                  if (*(_DWORD *)(v51 + 4 * v55) == v45
                    && v43 == *v56
                    && (!v43 || !memcmp(v42, (char *)v56 + v52, v43)))
                  {
                    break;
                  }
                }
              }
              if ((_DWORD)v55 != -1)
              {
                v57 = (int)v55;
                v27 = v103;
                j = v106;
                v41 = v112;
                goto LABEL_73;
              }
LABEL_72:
              v27 = v103;
              j = v106;
              v41 = v112;
              v57 = v100;
            }
            else
            {
              v57 = 0;
              v50 = (unsigned __int8 *)*v98;
            }
LABEL_73:
            v58 = *(_QWORD *)&v50[8 * v57];
            if (v41 >= 0)
              v59 = v27 & 0x7F;
            else
              v59 = j;
            v60 = *((unsigned int *)a1 + 8);
            if ((_DWORD)v60)
            {
              v104 = v58;
              v61 = 0;
              if (v59)
              {
                v62 = v59;
                v63 = v42;
                do
                {
                  v64 = *v63++;
                  v61 = 33 * v61 + v64;
                  --v62;
                }
                while (v62);
              }
              v65 = a1[3];
              v66 = *((unsigned int *)a1 + 11);
              v67 = 1;
              for (m = v61; ; m = v69 + v67++)
              {
                v69 = m & (v60 - 1);
                v70 = *(_QWORD **)&v65[8 * v69];
                if (v70 != (_QWORD *)-8)
                {
                  if (!v70)
                    goto LABEL_90;
                  if (*(_DWORD *)&v65[8 * v60 + 8 + 4 * v69] == v61
                    && v59 == *v70
                    && (!v59 || !memcmp(v42, (char *)v70 + v66, v59)))
                  {
                    break;
                  }
                }
              }
              if ((_DWORD)v69 != -1)
                v60 = (int)v69;
LABEL_90:
              v8 = v108;
              v71 = v110;
              v58 = v104;
            }
            else
            {
              v60 = 0;
              v65 = (unsigned __int8 *)*v97;
              v71 = v110;
            }
            v121(v122, *(_QWORD *)&v65[8 * v60] + 8, v58 + 8);
            v4 = v120 + 24;
            v120 += 24;
            v6 = v71 + 24;
            v10 = v8;
            if (v6 == v101)
            {
              v9 = v8;
              goto LABEL_139;
            }
            goto LABEL_4;
          }
          goto LABEL_42;
        }
        if ((v28 & 0x7F) == 0)
          goto LABEL_49;
        v36 = v25;
        while (*v36 == *v35)
        {
          ++v36;
          ++v35;
          if (!--v30)
            goto LABEL_49;
        }
      }
      if ((v25[23] & 0x80) != 0)
      {
        v37 = *(void **)v25;
LABEL_42:
        sub_1C47EBC30(__p, v37, v29);
        goto LABEL_43;
      }
      v38 = *(_OWORD *)v25;
      v118 = *((_QWORD *)v25 + 2);
      *(_OWORD *)__p = v38;
LABEL_43:
      sub_1C630669C((uint64_t)v119, (uint64_t *)__p);
      if (SHIBYTE(v118) < 0)
        operator delete(__p[0]);
      v25 = v120 + 24;
      v120 += 24;
      v27 = v110[23];
    }
  }
  v8 = 0;
  v9 = 0;
LABEL_139:
  while (v4 != v99)
  {
    if ((char)v4[23] < 0)
    {
      sub_1C47EBC30(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v94 = *(_OWORD *)v4;
      v116 = *((_QWORD *)v4 + 2);
      *(_OWORD *)__dst = v94;
    }
    sub_1C630669C((uint64_t)v119, (uint64_t *)__dst);
    if (SHIBYTE(v116) < 0)
      operator delete(__dst[0]);
    v4 = v120 + 24;
    v120 += 24;
  }
  if (v8 != v9)
  {
    v95 = v8;
    do
    {
      v96 = *v95++;
      v121(v122, 0, v96);
    }
    while (v95 != v9);
  }
  if (v8)
    operator delete(v8);
}

uint64_t llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = result;
  v10 = result;
  v4 = *(unsigned int *)(a2 + 296);
  if (v4 >= *(_DWORD *)(a2 + 300))
  {
    result = sub_1C5A819F0(a2 + 288, &v10);
  }
  else
  {
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 288) + 32 * v4);
    *v5 = result;
    v5[3] = (uint64_t)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
          + 2;
    *(_DWORD *)(a2 + 296) = v4 + 1;
  }
  v10 = v3;
  v6 = *(unsigned int *)(a2 + 440);
  if (v6 >= *(_DWORD *)(a2 + 444))
  {
    result = sub_1C5A81B24(a2 + 432, &v10);
  }
  else
  {
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 432) + 32 * v6);
    *v7 = v3;
    v7[3] = (uint64_t)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
          + 2;
    *(_DWORD *)(a2 + 440) = v6 + 1;
  }
  v10 = v3;
  v8 = *(unsigned int *)(a2 + 584);
  if (v8 >= *(_DWORD *)(a2 + 588))
    return sub_1C5A81C58(a2 + 576, &v10);
  v9 = (uint64_t *)(*(_QWORD *)(a2 + 576) + 32 * v8);
  *v9 = v3;
  v9[3] = (uint64_t)&llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
        + 2;
  *(_DWORD *)(a2 + 584) = v8 + 1;
  return result;
}

{
  return __ZN4llvm14ChangeReporterINS_7IRDataTINS_9EmptyDataEEEE25registerRequiredCallbacksERNS_28PassInstrumentationCallbacksE(result, a2);
}

uint64_t llvm::ChangeReporter<std::string>::ChangeReporter(uint64_t result, char a2)
{
  *(_QWORD *)result = &unk_1E81925A0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_BYTE *)(result + 33) = a2;
  return result;
}

uint64_t llvm::ChangeReporter<std::string>::~ChangeReporter(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E81925A0;
  v3 = (void **)(a1 + 8);
  sub_1C4765410(&v3);
  return a1;
}

uint64_t llvm::ChangeReporter<std::string>::saveIRBeforePass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD **)(a1 + 8);
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(v8 - (_QWORD)v11) >> 3) > v12)
      v12 = 0x5555555555555556 * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3) >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    v29 = a1 + 24;
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v14 = (char *)operator new(24 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * (v9 - v11)];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    if (v9 == v11)
    {
      v18 = vdupq_n_s64((unint64_t)v9);
      v16 = &v14[8 * (v9 - v11)];
    }
    else
    {
      v16 = &v14[8 * (v9 - v11)];
      do
      {
        v17 = *(_OWORD *)(v9 - 3);
        *((_QWORD *)v16 - 1) = *(v9 - 1);
        *(_OWORD *)(v16 - 24) = v17;
        v16 -= 24;
        *(v9 - 2) = 0;
        *(v9 - 1) = 0;
        *(v9 - 3) = 0;
        v9 -= 3;
      }
      while (v9 != v11);
      v18 = *(int64x2_t *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 24);
    }
    v10 = v15 + 24;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15 + 24;
    v27 = v18;
    *(_QWORD *)(a1 + 24) = &v14[24 * v13];
    v28 = v8;
    v26 = v18.i64[0];
    sub_1C4D868F0((uint64_t)&v26);
  }
  else
  {
    *v9 = 0;
    v9[1] = 0;
    v10 = v9 + 3;
    v9[2] = 0;
  }
  *(_QWORD *)(a1 + 16) = v10;
  if (*(_QWORD *)a2)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v25);
  else
    v25 = 0;
  v19 = sub_1C5A725D0(&v25, a3, a4);
  result = v25;
  v25 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v19)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      *(_BYTE *)(a1 + 32) = 0;
      if (*(_BYTE *)(a1 + 33))
      {
        if (*(_QWORD *)a2)
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v24);
        else
          v24 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v24);
        v21 = v24;
        v24 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    v22 = *(_QWORD *)(a1 + 16) - 24;
    if (*(_QWORD *)a2)
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v23);
    else
      v23 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v23, a3, a4, v22);
    result = v23;
    v23 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

{
  return __ZN4llvm14ChangeReporterINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE16saveIRBeforePassENS_3AnyENS_9StringRefE(a1, a2, a3, a4);
}

uint64_t sub_1C5A725D0(_QWORD *a1, char *a2, size_t a3)
{
  unsigned __int8 v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  char *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  void **__dst;
  size_t v28;
  unint64_t v29;

  if ((sub_1C5A6D844(a2, a3) & 1) != 0)
    return 0;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED81ACD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81ACD0))
  {
    v25 = qword_1ED81AED8;
    v26 = unk_1ED81AEE0;
    xmmword_1ED81AD28 = 0u;
    *(_OWORD *)algn_1ED81AD38 = 0u;
    for (dword_1ED81AD48 = 1065353216; v25 != v26; v25 += 24)
      sub_1C542BF9C((uint64_t)&xmmword_1ED81AD28, v25, v25);
    __cxa_atexit((void (*)(void *))sub_1C542BF98, &xmmword_1ED81AD28, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81ACD0);
  }
  if (qword_1ED81AD40)
  {
    if (!a2)
    {
      __dst = 0;
      v28 = 0;
      v29 = 0;
      goto LABEL_16;
    }
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v9 = a3 | 7;
      v10 = v9 + 1;
      p_dst = (void **)operator new(v9 + 1);
      v28 = a3;
      v29 = v10 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v29) = a3;
      p_dst = (void **)&__dst;
      if (!a3)
        goto LABEL_15;
    }
    memmove(p_dst, a2, a3);
LABEL_15:
    *((_BYTE *)p_dst + a3) = 0;
LABEL_16:
    v11 = sub_1C542C56C(&xmmword_1ED81AD28, (uint64_t)&__dst);
    if (SHIBYTE(v29) < 0)
      operator delete(__dst);
    if (!v11)
      return 0;
  }
  if (!*a1
    || (_UNKNOWN *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) != &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    return 1;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v12 = *(uint64_t ****)(*a1 + 8);
  if ((*((_BYTE *)v12 + 23) & 0x10) == 0)
  {
    v23 = 0;
    v22 = &byte_1C871356D;
    return llvm::isFunctionInPrintList(v22, v23);
  }
  v13 = ***v12;
  v14 = *(_QWORD *)(v13 + 152);
  v15 = *(unsigned int *)(v13 + 168);
  if (!(_DWORD)v15)
    goto LABEL_29;
  LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
  v17 = (uint64_t ****)(v14 + 16 * v16);
  v18 = *v17;
  if (*v17 != v12)
  {
    v19 = 1;
    while (v18 != (uint64_t ***)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(uint64_t ****)(v14 + 16 * v16);
      if (v18 == v12)
      {
        v17 = (uint64_t ****)(v14 + 16 * v16);
        goto LABEL_30;
      }
    }
LABEL_29:
    v17 = (uint64_t ****)(v14 + 16 * v15);
  }
LABEL_30:
  v21 = v17[1];
  v24 = (size_t)*v21;
  v22 = (char *)(v21 + 2);
  v23 = v24;
  return llvm::isFunctionInPrintList(v22, v23);
}

void llvm::ChangeReporter<std::string>::handleIRAfterPass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *p_p;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;

  if (*(_QWORD *)a2)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v27);
  else
    v27 = 0;
  sub_1C5A6D204((char *)v28, &v27);
  v8 = v27;
  v27 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (sub_1C5A6D844(a3, a4))
  {
    if (*(_BYTE *)(a1 + 33))
      (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 64))(a1, a3, a4, v28);
    goto LABEL_47;
  }
  if (*(_QWORD *)a2)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v26);
  else
    v26 = 0;
  v9 = sub_1C5A725D0(&v26, a3, a4);
  v10 = v26;
  v26 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if ((v9 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    __p = 0;
    v24 = 0;
    v25 = 0;
    if (*(_QWORD *)a2)
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v22);
    else
      v22 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, size_t, void **))(*(_QWORD *)a1 + 24))(a1, &v22, a3, a4, &__p);
    v12 = v22;
    v22 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(_BYTE *)(v11 - 1);
    v14 = v13 & 0x7F;
    if (v13 >= 0)
      v15 = v13 & 0x7F;
    else
      v15 = *(_QWORD *)(v11 - 16);
    v16 = HIBYTE(v25) & 0x7F;
    if (v25 < 0)
      v16 = v24;
    if (v15 == v16)
    {
      if (v25 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if ((*(_BYTE *)(v11 - 1) & 0x80) == 0)
      {
        if ((v13 & 0x7F) != 0)
        {
          v18 = (unsigned __int8 *)(v11 - 24);
          while (*v18 == *p_p)
          {
            ++v18;
            ++p_p;
            if (!--v14)
              goto LABEL_40;
          }
          goto LABEL_38;
        }
LABEL_40:
        if (*(_BYTE *)(a1 + 33))
          (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 32))(a1, a3, a4, v28);
LABEL_45:
        if (SHIBYTE(v25) < 0)
          operator delete(__p);
        goto LABEL_47;
      }
      if (!memcmp(*(const void **)(v11 - 24), p_p, *(_QWORD *)(v11 - 16)))
        goto LABEL_40;
    }
LABEL_38:
    if (*(_QWORD *)a2)
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v21);
    else
      v21 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a3, a4, v28, v11 - 24, &__p, &v21);
    v19 = v21;
    v21 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 33))
    (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 56))(a1, a3, a4, v28);
LABEL_47:
  v20 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v20 - 1) < 0)
    operator delete(*(void **)(v20 - 24));
  *(_QWORD *)(a1 + 16) = v20 - 24;
  if (v29 < 0)
    operator delete(v28[0]);
}

{
  __ZN4llvm14ChangeReporterINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE17handleIRAfterPassENS_3AnyENS_9StringRefE(a1, a2, a3, a4);
}

void llvm::ChangeReporter<std::string>::handleInvalidatedPass(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 33))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v2 - 1) < 0)
    operator delete(*(void **)(v2 - 24));
  *(_QWORD *)(a1 + 16) = v2 - 24;
}

{
  __ZN4llvm14ChangeReporterINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE21handleInvalidatedPassENS_9StringRefE(a1);
}

uint64_t llvm::TextChangeReporter<std::string>::TextChangeReporter(uint64_t a1, char a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = a2;
  *(_QWORD *)a1 = &unk_1E81925F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = llvm::dbgs((llvm *)a1);
  return a1;
}

_BYTE *llvm::BlockDataT<llvm::EmptyData>::BlockDataT(_BYTE *__dst, llvm::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock **v8;
  llvm::BasicBlock *v9;
  int v10;
  int v11;
  unint64_t *v12;
  size_t v13;
  const void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v20)(llvm::raw_ostream *__hidden);
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char *v28;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v13 = 0;
    __dst[23] = 0;
    goto LABEL_12;
  }
  v4 = ***(_QWORD ***)a2;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (llvm::BasicBlock **)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_9;
    v10 = 1;
    while (v9 != (llvm::BasicBlock *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(llvm::BasicBlock **)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (llvm::BasicBlock **)(v5 + 16 * v7);
        goto LABEL_9;
      }
    }
  }
  v8 = (llvm::BasicBlock **)(v5 + 16 * v6);
LABEL_9:
  v12 = (unint64_t *)v8[1];
  v15 = *v12;
  v14 = v12 + 2;
  v13 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *((_QWORD *)__dst + 1) = v13;
    *((_QWORD *)__dst + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
    goto LABEL_16;
  }
  __dst[23] = v13;
  v16 = __dst;
  if (v13)
  {
LABEL_16:
    memmove(v16, v14, v13);
    goto LABEL_17;
  }
LABEL_12:
  v16 = __dst;
LABEL_17:
  *((_BYTE *)v16 + v13) = 0;
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  v21 = 0;
  v25 = 0;
  v26 = 0;
  v20 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v28 = __dst + 24;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  llvm::BasicBlock::print(a2, (llvm::raw_ostream *)&v20, 0, 1, 1);
  v20 = off_1E81A6E70;
  if (v27 == 1 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8077774924);
  return __dst;
}

{
  return __ZN4llvm10BlockDataTINS_9EmptyDataEEC2ERKNS_10BasicBlockE(__dst, a2);
}

uint64_t llvm::BlockDataT<llvm::EmptyData>::operator==(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  uint64_t result;

  v2 = *(_BYTE *)(a1 + 47);
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a2 + 47);
  v5 = v4;
  v6 = v4 & 0x7F;
  if (v5 < 0)
    v6 = *(_QWORD *)(a2 + 32);
  if (v3 != v6)
    return 0;
  v7 = (const void **)(a1 + 24);
  v10 = *(unsigned __int8 **)(a2 + 24);
  v8 = (unsigned __int8 *)(a2 + 24);
  v9 = v10;
  if (v5 < 0)
    v8 = v9;
  if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    return memcmp(*v7, v8, *(_QWORD *)(a1 + 32)) == 0;
  if ((v2 & 0x7F) == 0)
    return 1;
  v11 = (v2 & 0x7F) - 1;
  do
  {
    v13 = *(unsigned __int8 *)v7;
    v7 = (const void **)((char *)v7 + 1);
    v12 = v13;
    v15 = *v8++;
    v14 = v15;
    v17 = v11-- != 0;
    result = v12 == v14;
  }
  while (v12 == v14 && v17);
  return result;
}

uint64_t llvm::BlockDataT<llvm::EmptyData>::operator!=(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;

  v2 = *(_BYTE *)(a1 + 47);
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a2 + 47);
  v5 = v4;
  v6 = v4 & 0x7F;
  if (v5 < 0)
    v6 = *(_QWORD *)(a2 + 32);
  if (v3 != v6)
    return 1;
  v7 = (const void **)(a1 + 24);
  v10 = *(unsigned __int8 **)(a2 + 24);
  v8 = (unsigned __int8 *)(a2 + 24);
  v9 = v10;
  if (v5 < 0)
    v8 = v9;
  if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    return memcmp(*v7, v8, *(_QWORD *)(a1 + 32)) != 0;
  if ((v2 & 0x7F) == 0)
    return 0;
  v11 = (v2 & 0x7F) - 1;
  do
  {
    v13 = *(unsigned __int8 *)v7;
    v7 = (const void **)((char *)v7 + 1);
    v12 = v13;
    v14 = *v8++;
    result = v12 != v14;
  }
  while (v12 == v14 && v11-- != 0);
  return result;
}

char *llvm::BlockDataT<llvm::EmptyData>::getLabel(char *result)
{
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t llvm::BlockDataT<llvm::EmptyData>::getBody(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  v1 = a1 + 24;
  v2 = v3;
  if (*(char *)(v1 + 23) >= 0)
    return v1;
  return v2;
}

uint64_t llvm::BlockDataT<llvm::EmptyData>::getData(uint64_t a1)
{
  return a1 + 48;
}

uint64_t llvm::FuncDataT<llvm::EmptyData>::FuncDataT(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 44) = 64;
  v3 = a1 + 56;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 44) = 64;
  v3 = a1 + 56;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

char *llvm::FuncDataT<llvm::EmptyData>::getEntryBlockName@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[79] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 7), *((_QWORD *)result + 8));
  *(_OWORD *)a2 = *(_OWORD *)(result + 56);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 9);
  return result;
}

uint64_t llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::ChangeReporter(uint64_t result, char a2)
{
  *(_QWORD *)result = &unk_1E8192650;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_BYTE *)(result + 33) = a2;
  return result;
}

uint64_t llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::~ChangeReporter(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E8192650;
  v3 = (void **)(a1 + 8);
  sub_1C5A817E4(&v3);
  return a1;
}

void llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleIRAfterPass(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[44];
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  char v24;
  void **v25;

  if (*(_QWORD *)a2)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v22);
  else
    v22 = 0;
  sub_1C5A6D204((char *)v23, &v22);
  v8 = v22;
  v22 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (sub_1C5A6D844(a3, a4))
  {
    if (*(_BYTE *)(a1 + 33))
      (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 64))(a1, a3, a4, v23);
  }
  else
  {
    if (*(_QWORD *)a2)
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v21);
    else
      v21 = 0;
    v9 = sub_1C5A725D0(&v21, a3, a4);
    v10 = v21;
    v21 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if ((v9 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 16);
      memset(v19, 0, sizeof(v19));
      v20 = 88;
      if (*(_QWORD *)a2)
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v18);
      else
        v18 = 0;
      (*(void (**)(uint64_t, uint64_t *, char *, size_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, &v18, a3, a4, v19);
      v12 = v18;
      v18 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (sub_1C6307158(v11 - 32, (uint64_t)&v19[24]))
      {
        if (*(_BYTE *)(a1 + 33))
          (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 32))(a1, a3, a4, v23);
      }
      else
      {
        v13 = v11 - 56;
        if (*(_QWORD *)a2)
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v17);
        else
          v17 = 0;
        (*(void (**)(uint64_t, char *, size_t, void **, uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a3, a4, v23, v13, v19, &v17);
        v14 = v17;
        v17 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      sub_1C63052A8((uint64_t)&v19[24]);
      v25 = (void **)v19;
      sub_1C4765410(&v25);
    }
    else if (*(_BYTE *)(a1 + 33))
    {
      (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 56))(a1, a3, a4, v23);
    }
  }
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v15 - 56;
  sub_1C63052A8(v15 - 32);
  *(_QWORD *)v19 = v16;
  sub_1C4765410((void ***)v19);
  *(_QWORD *)(a1 + 16) = v16;
  if (v24 < 0)
    operator delete(v23[0]);
}

{
  __ZN4llvm14ChangeReporterINS_7IRDataTINS_9EmptyDataEEEE17handleIRAfterPassENS_3AnyENS_9StringRefE(a1, a2, a3, a4);
}

void llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::handleInvalidatedPass(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 33))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (void **)(v2 - 56);
  sub_1C63052A8(v2 - 32);
  v4 = v3;
  sub_1C4765410(&v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t llvm::TextChangeReporter<llvm::IRDataT<llvm::EmptyData>>::TextChangeReporter(uint64_t a1, char a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = a2;
  *(_QWORD *)a1 = &unk_1E81926A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = llvm::dbgs((llvm *)a1);
  return a1;
}

uint64_t llvm::IRComparer<llvm::EmptyData>::generateFunctionData(int64x2_t *a1, uint64_t ***a2)
{
  uint64_t ***v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  uint64_t ***v12;
  char *v13;
  size_t v14;
  size_t v15;
  uint64_t **v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  llvm::BasicBlock *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::BasicBlock **v49;
  llvm::BasicBlock *v50;
  int v51;
  int v52;
  llvm::BasicBlock *v53;
  size_t v54;
  char *v55;
  size_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::BasicBlock **v66;
  llvm::BasicBlock *v67;
  int v68;
  int v69;
  llvm::BasicBlock *v70;
  size_t v71;
  char *v72;
  size_t v73;
  size_t v74;
  unsigned int v75;
  int v76;
  size_t v77;
  char *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t ***v94;
  size_t v95;
  char *v96;
  size_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t ****v107;
  uint64_t ***v108;
  int v109;
  int v110;
  uint64_t ***v111;
  char *v112;
  size_t v113;
  size_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  size_t *v121;
  BOOL v122;
  size_t v123;
  _QWORD *v124;
  size_t *v125;
  char *v126;
  _BYTE *v127;
  __int128 v128;
  _BYTE *v129;
  __int128 v130;
  unsigned int v132;
  uint64_t ***v133;
  uint64_t ***v134;
  uint64_t ***v135;
  char *__s1;
  unsigned __int8 *v137;
  size_t v138;
  _QWORD v139[3];
  char *v140;
  __int128 v141;
  __int128 v142;
  unint64_t v143;
  char *v144;
  size_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 __p;
  uint64_t v149;
  __int128 __dst;
  unint64_t v151;
  _BYTE v152[44];
  unsigned int v153;
  __int128 v154;
  unint64_t v155;
  void **v156[3];

  v2 = a2;
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (a2[9] == (uint64_t **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return 0;
  }
  v132 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v4 = ***a2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & (v132 ^ (a2 >> 9));
      v8 = (uint64_t ****)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
      {
LABEL_16:
        v12 = v8[1];
        v15 = (size_t)*v12;
        v13 = (char *)(v12 + 2);
        v14 = v15;
        goto LABEL_17;
      }
      v10 = 1;
      while (v9 != (uint64_t ***)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(uint64_t ****)(v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (uint64_t ****)(v5 + 16 * v7);
          goto LABEL_16;
        }
      }
    }
    v8 = (uint64_t ****)(v5 + 16 * v6);
    goto LABEL_16;
  }
  v14 = 0;
  v13 = &byte_1C871356D;
LABEL_17:
  result = llvm::isFunctionInPrintList(v13, v14);
  if (!(_DWORD)result)
    return result;
  v16 = v2[10];
  if (v16)
    v17 = (uint64_t ***)(v16 - 3);
  else
    v17 = 0;
  if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v151) = 0;
    p_dst = &__dst;
    goto LABEL_38;
  }
  v18 = ***v17;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == v17)
      goto LABEL_30;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == v17)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_30;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_30:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_173;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v151 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_37;
  }
  HIBYTE(v151) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_37:
    memmove(p_dst, v28, v27);
LABEL_38:
  *((_BYTE *)p_dst + v27) = 0;
  memset(v152, 0, sizeof(v152));
  v153 = 64;
  if (SHIBYTE(v151) < 0)
  {
    v33 = (void *)__dst;
    sub_1C47EBC30(&v154, (void *)__dst, *((unint64_t *)&__dst + 1));
    operator delete(v33);
  }
  else
  {
    v154 = __dst;
    v155 = v151;
  }
  v34 = (uint64_t ***)v2[10];
  v134 = v2 + 9;
  if (v34 != v2 + 9)
  {
    v133 = v2;
    while (1)
    {
      v43 = v34 ? (llvm::BasicBlock *)(v34 - 3) : 0;
      v44 = v43 >> 4;
      if ((*((_BYTE *)v43 + 23) & 0x10) != 0)
        break;
      v57 = *(_QWORD **)&v152[8];
      if (*(_QWORD *)&v152[8] < *(_QWORD *)&v152[16])
      {
        v54 = 0;
        *(_BYTE *)(*(_QWORD *)&v152[8] + 23) = 0;
LABEL_65:
        v58 = v57;
        goto LABEL_70;
      }
      v54 = 0;
      v55 = &byte_1C871356D;
LABEL_74:
      v61 = sub_1C5A81DE8((int64x2_t *)v152, v55, v54);
LABEL_75:
      *(_QWORD *)&v152[8] = v61;
      if ((*((_BYTE *)v43 + 23) & 0x10) == 0)
      {
        v71 = 0;
        v72 = &byte_1C871356D;
        goto LABEL_84;
      }
      v62 = ***(_QWORD ***)v43;
      v63 = *(_QWORD *)(v62 + 152);
      v64 = *(unsigned int *)(v62 + 168);
      if (!(_DWORD)v64)
        goto LABEL_82;
      LODWORD(v65) = (v64 - 1) & (v44 ^ (v43 >> 9));
      v66 = (llvm::BasicBlock **)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 != v43)
      {
        v68 = 1;
        while (v67 != (llvm::BasicBlock *)-4096)
        {
          v69 = v65 + v68++;
          v65 = v69 & (v64 - 1);
          v67 = *(llvm::BasicBlock **)(v63 + 16 * v65);
          if (v67 == v43)
          {
            v66 = (llvm::BasicBlock **)(v63 + 16 * v65);
            goto LABEL_83;
          }
        }
LABEL_82:
        v66 = (llvm::BasicBlock **)(v63 + 16 * v64);
      }
LABEL_83:
      v70 = v66[1];
      v73 = *(_QWORD *)v70;
      v72 = (char *)v70 + 16;
      v71 = v73;
LABEL_84:
      v144 = v72;
      v145 = v71;
      llvm::BlockDataT<llvm::EmptyData>::BlockDataT(&v146, v43);
      v74 = v145;
      __s1 = v144;
      v75 = *(_DWORD *)&v152[32];
      if (!*(_DWORD *)&v152[32])
      {
        *(_QWORD *)&v152[36] = 0;
        v93 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v93)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v93[16] = 2;
        *(_QWORD *)&v152[24] = v93;
        v75 = 16;
        *(_DWORD *)&v152[32] = 16;
      }
      v135 = v34;
      v76 = 0;
      if (v74)
      {
        v77 = v74;
        v78 = __s1;
        do
        {
          v79 = *v78++;
          v76 = 33 * v76 + v79;
          --v77;
        }
        while (v77);
      }
      v80 = v75 - 1;
      v81 = *(_QWORD *)&v152[24];
      v82 = *(_QWORD *)&v152[24] + 8 * v75 + 8;
      v83 = v153;
      v84 = -1;
      v85 = 1;
      v86 = v76;
      while (1)
      {
        v87 = v86 & v80;
        v88 = *(_QWORD **)(v81 + 8 * v87);
        if (!v88)
          break;
        if (v88 == (_QWORD *)-8)
        {
          if (v84 == -1)
            v84 = v86 & v80;
        }
        else if (*(_DWORD *)(v82 + 4 * v87) == v76 && v74 == *v88 && (!v74 || !memcmp(__s1, (char *)v88 + v83, v74)))
        {
          goto LABEL_103;
        }
        v86 = v85 + v87;
        ++v85;
      }
      v89 = v84;
      if (v84 == -1)
      {
        v89 = v87;
        v87 = v87;
      }
      else
      {
        v87 = v84;
      }
      *(_DWORD *)(v82 + 4 * v89) = v76;
      v88 = *(_QWORD **)(v81 + 8 * v87);
LABEL_103:
      v2 = v133;
      if (!v88)
        goto LABEL_106;
      if (v88 == (_QWORD *)-8)
      {
        --*(_DWORD *)&v152[40];
LABEL_106:
        v90 = (char *)operator new(v74 + 65, (std::align_val_t)8uLL);
        v91 = v90;
        v92 = v90 + 64;
        if (v74)
          memcpy(v90 + 64, __s1, v74);
        v92[v74] = 0;
        *(_QWORD *)v91 = v74;
        *(_OWORD *)(v91 + 8) = v146;
        *((_QWORD *)v91 + 3) = v147;
        v146 = 0uLL;
        v147 = 0;
        *((_OWORD *)v91 + 2) = __p;
        *((_QWORD *)v91 + 6) = v149;
        __p = 0uLL;
        v149 = 0;
        *(_QWORD *)(v81 + 8 * v87) = v91;
        ++*(_DWORD *)&v152[36];
        llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v152[24], v87);
      }
      if (SHIBYTE(v149) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v147) < 0)
        operator delete((void *)v146);
      v34 = (uint64_t ***)v135[1];
      if (v34 == v134)
        goto LABEL_42;
    }
    v45 = ***(_QWORD ***)v43;
    v46 = *(_QWORD *)(v45 + 152);
    v47 = *(unsigned int *)(v45 + 168);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = (v47 - 1) & (v44 ^ (v43 >> 9));
      v49 = (llvm::BasicBlock **)(v46 + 16 * v48);
      v50 = *v49;
      if (*v49 == v43)
        goto LABEL_61;
      v51 = 1;
      while (v50 != (llvm::BasicBlock *)-4096)
      {
        v52 = v48 + v51++;
        v48 = v52 & (v47 - 1);
        v50 = *(llvm::BasicBlock **)(v46 + 16 * v48);
        if (v50 == v43)
        {
          v49 = (llvm::BasicBlock **)(v46 + 16 * v48);
          goto LABEL_61;
        }
      }
    }
    v49 = (llvm::BasicBlock **)(v46 + 16 * v47);
LABEL_61:
    v53 = v49[1];
    v56 = *(_QWORD *)v53;
    v55 = (char *)v53 + 16;
    v54 = v56;
    v57 = *(_QWORD **)&v152[8];
    if (*(_QWORD *)&v152[8] < *(_QWORD *)&v152[16])
    {
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_173;
      if (v54 >= 0x17)
      {
        v59 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v59 = v54 | 7;
        v60 = v59 + 1;
        v58 = operator new(v59 + 1);
        v57[1] = v54;
        v57[2] = v60 | 0x8000000000000000;
        *v57 = v58;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)&v152[8] + 23) = v54;
        v58 = v57;
        if (!v54)
          goto LABEL_65;
      }
      memmove(v58, v55, v54);
LABEL_70:
      *((_BYTE *)v58 + v54) = 0;
      v61 = (uint64_t)(v57 + 3);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_42:
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
  {
    v98 = (_BYTE *)a1->i64[1];
    if ((unint64_t)v98 < a1[1].i64[0])
    {
      v95 = 0;
      v98[23] = 0;
      goto LABEL_123;
    }
    v95 = 0;
    v96 = &byte_1C871356D;
    goto LABEL_133;
  }
  v35 = ***v2;
  v36 = *(_QWORD *)(v35 + 152);
  v37 = *(unsigned int *)(v35 + 168);
  if ((_DWORD)v37)
  {
    LODWORD(v38) = (v37 - 1) & (v132 ^ (v2 >> 9));
    v39 = (uint64_t ****)(v36 + 16 * v38);
    v40 = *v39;
    if (*v39 == v2)
      goto LABEL_119;
    v41 = 1;
    while (v40 != (uint64_t ***)-4096)
    {
      v42 = v38 + v41++;
      v38 = v42 & (v37 - 1);
      v40 = *(uint64_t ****)(v36 + 16 * v38);
      if (v40 == v2)
      {
        v39 = (uint64_t ****)(v36 + 16 * v38);
        goto LABEL_119;
      }
    }
  }
  v39 = (uint64_t ****)(v36 + 16 * v37);
LABEL_119:
  v94 = v39[1];
  v97 = (size_t)*v94;
  v96 = (char *)(v94 + 2);
  v95 = v97;
  v98 = (_BYTE *)a1->i64[1];
  if ((unint64_t)v98 < a1[1].i64[0])
  {
    if (v95 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v95 >= 0x17)
      {
        v100 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17)
          v100 = v95 | 7;
        v101 = v100 + 1;
        v99 = operator new(v100 + 1);
        *((_QWORD *)v98 + 1) = v95;
        *((_QWORD *)v98 + 2) = v101 | 0x8000000000000000;
        *(_QWORD *)v98 = v99;
      }
      else
      {
        v98[23] = v95;
        v99 = v98;
        if (!v95)
        {
LABEL_123:
          v99 = v98;
LABEL_128:
          v99[v95] = 0;
          v102 = (uint64_t)(v98 + 24);
          goto LABEL_134;
        }
      }
      memmove(v99, v96, v95);
      goto LABEL_128;
    }
LABEL_173:
    abort();
  }
LABEL_133:
  v102 = sub_1C5A81DE8(a1, v96, v95);
LABEL_134:
  a1->i64[1] = v102;
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
  {
    v113 = 0;
    v112 = &byte_1C871356D;
    goto LABEL_143;
  }
  v103 = ***v2;
  v104 = *(_QWORD *)(v103 + 152);
  v105 = *(unsigned int *)(v103 + 168);
  if (!(_DWORD)v105)
    goto LABEL_141;
  LODWORD(v106) = (v105 - 1) & (v132 ^ (v2 >> 9));
  v107 = (uint64_t ****)(v104 + 16 * v106);
  v108 = *v107;
  if (*v107 != v2)
  {
    v109 = 1;
    while (v108 != (uint64_t ***)-4096)
    {
      v110 = v106 + v109++;
      v106 = v110 & (v105 - 1);
      v108 = *(uint64_t ****)(v104 + 16 * v106);
      if (v108 == v2)
      {
        v107 = (uint64_t ****)(v104 + 16 * v106);
        goto LABEL_142;
      }
    }
LABEL_141:
    v107 = (uint64_t ****)(v104 + 16 * v105);
  }
LABEL_142:
  v111 = v107[1];
  v114 = (size_t)*v111;
  v112 = (char *)(v111 + 2);
  v113 = v114;
LABEL_143:
  v137 = (unsigned __int8 *)v112;
  v138 = v113;
  memset(v139, 0, sizeof(v139));
  sub_1C484333C(v139, *(uint64_t *)v152, *(uint64_t *)&v152[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v152[8] - *(_QWORD *)v152) >> 3));
  v140 = 0;
  *(_QWORD *)&v141 = 0;
  *((_QWORD *)&v141 + 1) = 0x4000000000;
  if (*(_DWORD *)&v152[36])
  {
    if (*(_DWORD *)&v152[32])
      v115 = *(unsigned int *)&v152[32];
    else
      v115 = 16;
    v116 = (char *)sub_1C5074000((v115 + 1), 0xCuLL);
    v117 = 0;
    v118 = &v116[8 * v115];
    *(_QWORD *)v118 = 2;
    v119 = v118 + 8;
    v140 = v116;
    LODWORD(v141) = v115;
    v120 = *(_QWORD *)&v152[24] + 8 * v115 + 8;
    *(_QWORD *)((char *)&v141 + 4) = *(_QWORD *)&v152[36];
    do
    {
      v121 = *(size_t **)(*(_QWORD *)&v152[24] + 8 * v117);
      if (v121)
        v122 = v121 + 1 == 0;
      else
        v122 = 1;
      if (v122)
      {
        *(_QWORD *)&v140[8 * v117] = v121;
      }
      else
      {
        v123 = *v121;
        v124 = operator new(*v121 + 65, (std::align_val_t)8uLL);
        v125 = v124;
        v126 = (char *)(v124 + 8);
        if (v123)
          memcpy(v124 + 8, v121 + 8, v123);
        v126[v123] = 0;
        *v125 = v123;
        v127 = v125 + 1;
        if (*((char *)v121 + 31) < 0)
        {
          sub_1C47EBC30(v127, (void *)v121[1], v121[2]);
        }
        else
        {
          v128 = *(_OWORD *)(v121 + 1);
          v125[3] = v121[3];
          *(_OWORD *)v127 = v128;
        }
        v129 = v125 + 4;
        if (*((char *)v121 + 55) < 0)
        {
          sub_1C47EBC30(v129, (void *)v121[4], v121[5]);
        }
        else
        {
          v130 = *((_OWORD *)v121 + 2);
          v125[6] = v121[6];
          *(_OWORD *)v129 = v130;
        }
        *(_QWORD *)&v140[8 * v117] = v125;
        *((_DWORD *)v119 + v117) = *(_DWORD *)(v120 + 4 * v117);
      }
      ++v117;
    }
    while (v115 != v117);
  }
  if (SHIBYTE(v155) < 0)
  {
    sub_1C47EBC30(&v142, (void *)v154, *((unint64_t *)&v154 + 1));
  }
  else
  {
    v142 = v154;
    v143 = v155;
  }
  sub_1C63068EC((uint64_t)&a1[1].i64[1], v137, v138, (uint64_t)v139);
  if (SHIBYTE(v143) < 0)
    operator delete((void *)v142);
  sub_1C6305324((uint64_t)&v140);
  v156[0] = (void **)v139;
  sub_1C4765410(v156);
  if (SHIBYTE(v155) < 0)
    operator delete((void *)v154);
  sub_1C6305324((uint64_t)&v152[24]);
  v156[0] = (void **)v152;
  sub_1C4765410(v156);
  return 1;
}

{
  return __ZN4llvm10IRComparerINS_9EmptyDataEE20generateFunctionDataERNS_7IRDataTIS1_EERKNS_8FunctionE(a1, a2);
}

llvm::DCData *llvm::DCData::DCData(llvm::DCData *this, const llvm::BasicBlock *a2)
{
  const llvm::BasicBlock *v3;
  BOOL v4;
  llvm::Instruction *v5;
  int v6;
  llvm::Instruction *v7;
  int v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  char v18;
  llvm::Instruction *v19;
  int v20;
  unsigned int v21;
  uint64_t Successor;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t *v31;
  size_t v32;
  const void *v33;
  unint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t (***v38)();
  size_t v39;
  int v40;
  uint64_t v41;
  uint64_t ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ****v47;
  uint64_t ***v48;
  int v49;
  int v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  unint64_t *v60;
  size_t v61;
  const void *v62;
  unint64_t v63;
  uint64_t (***v64)();
  uint64_t v65;
  uint64_t v66;
  uint64_t (***v67)();
  size_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t ***v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t ****v85;
  uint64_t ***v86;
  int v87;
  int v88;
  unint64_t *v89;
  size_t v90;
  const void *v91;
  unint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t v95;
  uint64_t (***v96)();
  size_t v97;
  unint64_t *v98;
  size_t v99;
  const void *v100;
  unint64_t v101;
  uint64_t (***p_dst)();
  uint64_t v103;
  uint64_t v104;
  uint64_t (***v105)();
  size_t v106;
  char *v107;
  llvm::StringMapImpl *v108;
  size_t v109;
  unint64_t *v110;
  size_t v111;
  const void *v112;
  unint64_t v113;
  uint64_t (***v114)();
  uint64_t v115;
  uint64_t v116;
  uint64_t (***v117)();
  size_t v118;
  uint64_t ***v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ****v124;
  uint64_t ***v125;
  int v126;
  int v127;
  unint64_t *v128;
  size_t v129;
  const void *v130;
  unint64_t v131;
  uint64_t (***v132)();
  uint64_t v133;
  uint64_t v134;
  _QWORD v136[4];
  _QWORD v137[2];
  _QWORD *v138;
  uint64_t (**__dst)();
  size_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  int v146;
  void **v147;
  _QWORD *v148;
  __int128 v149;
  _QWORD v150[5];

  v150[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x2000000000;
  v3 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v3 == (const llvm::BasicBlock *)((char *)a2 + 40))
    return this;
  v4 = v3 == 0;
  if (v3)
    v5 = (const llvm::BasicBlock *)((char *)v3 - 24);
  else
    v5 = 0;
  v6 = *((unsigned __int8 *)v5 + 16);
  if ((v6 - 40) >= 0xFFFFFFF5)
    v7 = v5;
  else
    v7 = 0;
  v8 = *((unsigned __int8 *)v7 + 16);
  if ((v6 - 40) < 0xFFFFFFF5)
    v4 = 1;
  if (v8 == 30 && !v4)
  {
    if ((*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 1)
    {
      v9 = (uint64_t ***)*((_QWORD *)v7 - 4);
      if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
      {
        v99 = 0;
        HIBYTE(v141) = 0;
        p_dst = &__dst;
        goto LABEL_148;
      }
      v10 = ***v9;
      v11 = *(_QWORD *)(v10 + 152);
      v12 = *(unsigned int *)(v10 + 168);
      if ((_DWORD)v12)
      {
        LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        v14 = (uint64_t ****)(v11 + 16 * v13);
        v15 = *v14;
        if (*v14 == v9)
          goto LABEL_140;
        v16 = 1;
        while (v15 != (uint64_t ***)-4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v12 - 1);
          v15 = *(uint64_t ****)(v11 + 16 * v13);
          if (v15 == v9)
          {
            v14 = (uint64_t ****)(v11 + 16 * v13);
            goto LABEL_140;
          }
        }
      }
      v14 = (uint64_t ****)(v11 + 16 * v12);
LABEL_140:
      v98 = (unint64_t *)v14[1];
      v101 = *v98;
      v100 = v98 + 2;
      v99 = v101;
      if (v101 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v99 >= 0x17)
        {
          v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v99 | 7) != 0x17)
            v103 = v99 | 7;
          v104 = v103 + 1;
          p_dst = (uint64_t (***)())operator new(v103 + 1);
          v140 = v99;
          v141 = v104 | 0x8000000000000000;
          __dst = (uint64_t (**)())p_dst;
        }
        else
        {
          HIBYTE(v141) = v99;
          p_dst = &__dst;
          if (!v99)
            goto LABEL_148;
        }
        memmove(p_dst, v100, v99);
LABEL_148:
        *((_BYTE *)p_dst + v99) = 0;
        if (v141 >= 0)
          v105 = &__dst;
        else
          v105 = (uint64_t (***)())__dst;
        if (v141 >= 0)
          v106 = HIBYTE(v141) & 0x7F;
        else
          v106 = v140;
        v107 = "";
        v108 = this;
        v109 = 0;
LABEL_195:
        sub_1C5A74884(v108, v105, v106, v107, v109);
        if (SHIBYTE(v141) < 0)
          operator delete(__dst);
        return this;
      }
LABEL_203:
      abort();
    }
    v42 = (uint64_t ***)*((_QWORD *)v7 - 4);
    if ((*((_BYTE *)v42 + 23) & 0x10) == 0)
    {
      v111 = 0;
      HIBYTE(v141) = 0;
      v114 = &__dst;
      goto LABEL_164;
    }
    v43 = ***v42;
    v44 = *(_QWORD *)(v43 + 152);
    v45 = *(unsigned int *)(v43 + 168);
    if ((_DWORD)v45)
    {
      LODWORD(v46) = (v45 - 1) & ((v42 >> 4) ^ (v42 >> 9));
      v47 = (uint64_t ****)(v44 + 16 * v46);
      v48 = *v47;
      if (*v47 == v42)
        goto LABEL_156;
      v49 = 1;
      while (v48 != (uint64_t ***)-4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & (v45 - 1);
        v48 = *(uint64_t ****)(v44 + 16 * v46);
        if (v48 == v42)
        {
          v47 = (uint64_t ****)(v44 + 16 * v46);
          goto LABEL_156;
        }
      }
    }
    v47 = (uint64_t ****)(v44 + 16 * v45);
LABEL_156:
    v110 = (unint64_t *)v47[1];
    v113 = *v110;
    v112 = v110 + 2;
    v111 = v113;
    if (v113 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_203;
    if (v111 >= 0x17)
    {
      v115 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v115 = v111 | 7;
      v116 = v115 + 1;
      v114 = (uint64_t (***)())operator new(v115 + 1);
      v140 = v111;
      v141 = v116 | 0x8000000000000000;
      __dst = (uint64_t (**)())v114;
    }
    else
    {
      HIBYTE(v141) = v111;
      v114 = &__dst;
      if (!v111)
      {
LABEL_164:
        *((_BYTE *)v114 + v111) = 0;
        if (v141 >= 0)
          v117 = &__dst;
        else
          v117 = (uint64_t (***)())__dst;
        if (v141 >= 0)
          v118 = HIBYTE(v141) & 0x7F;
        else
          v118 = v140;
        sub_1C5A74884(this, v117, v118, "true", 4uLL);
        if (SHIBYTE(v141) < 0)
          operator delete(__dst);
        v119 = (uint64_t ***)*((_QWORD *)v7 - 8);
        if ((*((_BYTE *)v119 + 23) & 0x10) == 0)
        {
          v129 = 0;
          HIBYTE(v141) = 0;
          v132 = &__dst;
          goto LABEL_188;
        }
        v120 = ***v119;
        v121 = *(_QWORD *)(v120 + 152);
        v122 = *(unsigned int *)(v120 + 168);
        if ((_DWORD)v122)
        {
          LODWORD(v123) = (v122 - 1) & ((v119 >> 4) ^ (v119 >> 9));
          v124 = (uint64_t ****)(v121 + 16 * v123);
          v125 = *v124;
          if (*v124 == v119)
          {
LABEL_180:
            v128 = (unint64_t *)v124[1];
            v131 = *v128;
            v130 = v128 + 2;
            v129 = v131;
            if (v131 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_203;
            if (v129 >= 0x17)
            {
              v133 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v129 | 7) != 0x17)
                v133 = v129 | 7;
              v134 = v133 + 1;
              v132 = (uint64_t (***)())operator new(v133 + 1);
              v140 = v129;
              v141 = v134 | 0x8000000000000000;
              __dst = (uint64_t (**)())v132;
            }
            else
            {
              HIBYTE(v141) = v129;
              v132 = &__dst;
              if (!v129)
                goto LABEL_188;
            }
            memmove(v132, v130, v129);
LABEL_188:
            *((_BYTE *)v132 + v129) = 0;
            if (v141 >= 0)
              v105 = &__dst;
            else
              v105 = (uint64_t (***)())__dst;
            if (v141 >= 0)
              v106 = HIBYTE(v141) & 0x7F;
            else
              v106 = v140;
            v107 = "false";
            v108 = this;
            v109 = 5;
            goto LABEL_195;
          }
          v126 = 1;
          while (v125 != (uint64_t ***)-4096)
          {
            v127 = v123 + v126++;
            v123 = v127 & (v122 - 1);
            v125 = *(uint64_t ****)(v121 + 16 * v123);
            if (v125 == v119)
            {
              v124 = (uint64_t ****)(v121 + 16 * v123);
              goto LABEL_180;
            }
          }
        }
        v124 = (uint64_t ****)(v121 + 16 * v122);
        goto LABEL_180;
      }
    }
    memmove(v114, v112, v111);
    goto LABEL_164;
  }
  v18 = v8 != 31 || v4;
  if ((v18 & 1) == 0)
  {
    v40 = *((_DWORD *)v7 + 5);
    if ((v40 & 0x40000000) != 0)
      v41 = *((_QWORD *)v7 - 1);
    else
      v41 = (uint64_t)v7 - 32 * (v40 & 0x7FFFFFF);
    v51 = *(uint64_t ****)(v41 + 32);
    if ((*((_BYTE *)v51 + 23) & 0x10) == 0)
    {
      v61 = 0;
      HIBYTE(v141) = 0;
      v64 = &__dst;
      goto LABEL_86;
    }
    v52 = ***v51;
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned int *)(v52 + 168);
    if ((_DWORD)v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      v56 = (uint64_t ****)(v53 + 16 * v55);
      v57 = *v56;
      if (*v56 == v51)
      {
LABEL_78:
        v60 = (unint64_t *)v56[1];
        v63 = *v60;
        v62 = v60 + 2;
        v61 = v63;
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_203;
        if (v61 >= 0x17)
        {
          v65 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v65 = v61 | 7;
          v66 = v65 + 1;
          v64 = (uint64_t (***)())operator new(v65 + 1);
          v140 = v61;
          v141 = v66 | 0x8000000000000000;
          __dst = (uint64_t (**)())v64;
        }
        else
        {
          HIBYTE(v141) = v61;
          v64 = &__dst;
          if (!v61)
            goto LABEL_86;
        }
        memmove(v64, v62, v61);
LABEL_86:
        *((_BYTE *)v64 + v61) = 0;
        if (v141 >= 0)
          v67 = &__dst;
        else
          v67 = (uint64_t (***)())__dst;
        if (v141 >= 0)
          v68 = HIBYTE(v141) & 0x7F;
        else
          v68 = v140;
        sub_1C5A74884(this, v67, v68, "default", 7uLL);
        if (SHIBYTE(v141) < 0)
          operator delete(__dst);
        v69 = (*((_DWORD *)v7 + 5) >> 1) & 0x3FFFFFF;
        v70 = (v69 - 1);
        if (v69 == 1)
          return this;
        v71 = 0;
        while (1)
        {
          v72 = *((_DWORD *)v7 + 5);
          if ((v72 & 0x40000000) != 0)
            v73 = *((_QWORD *)v7 - 1);
          else
            v73 = (uint64_t)v7 - 32 * (v72 & 0x7FFFFFF);
          v74 = *(_QWORD *)(v73 + 32 * (2 * v71 + 2));
          v75 = *(_DWORD *)(v74 + 32);
          if (v75 > 0x40)
            v76 = **(_QWORD **)(v74 + 24);
          else
            v76 = (uint64_t)(*(_QWORD *)(v74 + 24) << -(char)v75) >> -(char)v75;
          v136[0] = "{0}";
          v136[1] = 3;
          v136[2] = &v138;
          v136[3] = 1;
          v137[0] = &off_1E8192AC0;
          v137[1] = v76;
          v148 = v150;
          v149 = xmmword_1C69DD250;
          LODWORD(v140) = 0;
          v144 = 0;
          v145 = 0;
          v138 = v137;
          __dst = &off_1E81A7280;
          v147 = (void **)&v148;
          v146 = 0;
          v142 = 0;
          v143 = 0;
          v141 = 0;
          sub_1C639D338((uint64_t)v136, (llvm::raw_ostream *)&__dst);
          __dst = (uint64_t (**)())off_1E81A6E70;
          if (v146 == 1 && v141)
            MEMORY[0x1CAA32F9C](v141, 0x1000C8077774924);
          v77 = *((_DWORD *)v7 + 5);
          if ((v77 & 0x40000000) != 0)
            v78 = *((_QWORD *)v7 - 1);
          else
            v78 = (uint64_t)v7 - 32 * (v77 & 0x7FFFFFF);
          v79 = (2 * v71 + 3);
          if (v71 == 4294967294)
            v79 = 1;
          v80 = *(uint64_t ****)(v78 + 32 * v79);
          if ((*((_BYTE *)v80 + 23) & 0x10) == 0)
          {
            v90 = 0;
            HIBYTE(v141) = 0;
            v93 = &__dst;
            goto LABEL_124;
          }
          v81 = ***v80;
          v82 = *(_QWORD *)(v81 + 152);
          v83 = *(unsigned int *)(v81 + 168);
          if (!(_DWORD)v83)
            goto LABEL_115;
          LODWORD(v84) = (v83 - 1) & ((v80 >> 4) ^ (v80 >> 9));
          v85 = (uint64_t ****)(v82 + 16 * v84);
          v86 = *v85;
          if (*v85 != v80)
            break;
LABEL_116:
          v89 = (unint64_t *)v85[1];
          v92 = *v89;
          v91 = v89 + 2;
          v90 = v92;
          if (v92 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_203;
          if (v90 >= 0x17)
          {
            v94 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v90 | 7) != 0x17)
              v94 = v90 | 7;
            v95 = v94 + 1;
            v93 = (uint64_t (***)())operator new(v94 + 1);
            v140 = v90;
            v141 = v95 | 0x8000000000000000;
            __dst = (uint64_t (**)())v93;
          }
          else
          {
            HIBYTE(v141) = v90;
            v93 = &__dst;
            if (!v90)
              goto LABEL_124;
          }
          memmove(v93, v91, v90);
LABEL_124:
          *((_BYTE *)v93 + v90) = 0;
          if (v141 >= 0)
            v96 = &__dst;
          else
            v96 = (uint64_t (***)())__dst;
          if (v141 >= 0)
            v97 = HIBYTE(v141) & 0x7F;
          else
            v97 = v140;
          sub_1C5A74884(this, v96, v97, v148, v149);
          if (SHIBYTE(v141) < 0)
            operator delete(__dst);
          if (v148 != v150)
            free(v148);
          if (++v71 == v70)
            return this;
        }
        v87 = 1;
        while (v86 != (uint64_t ***)-4096)
        {
          v88 = v84 + v87++;
          v84 = v88 & (v83 - 1);
          v86 = *(uint64_t ****)(v82 + 16 * v84);
          if (v86 == v80)
          {
            v85 = (uint64_t ****)(v82 + 16 * v84);
            goto LABEL_116;
          }
        }
LABEL_115:
        v85 = (uint64_t ****)(v82 + 16 * v83);
        goto LABEL_116;
      }
      v58 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v57 = *(uint64_t ****)(v53 + 16 * v55);
        if (v57 == v51)
        {
          v56 = (uint64_t ****)(v53 + 16 * v55);
          goto LABEL_78;
        }
      }
    }
    v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_78;
  }
  if ((v6 - 29) >= 0xB)
    v19 = 0;
  else
    v19 = v5;
  if ((v6 - 29) <= 0xA)
  {
    if (v6 != 30)
      __asm { BR              X11 }
    if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 3)
      v20 = 2;
    else
      v20 = 1;
    v21 = 0;
    while (1)
    {
      Successor = llvm::Instruction::getSuccessor(v19, v21);
      if ((*(_BYTE *)(Successor + 23) & 0x10) == 0)
      {
        v32 = 0;
        HIBYTE(v141) = 0;
        v35 = &__dst;
        goto LABEL_49;
      }
      v23 = ***(_QWORD ***)Successor;
      v24 = *(_QWORD *)(v23 + 152);
      v25 = *(unsigned int *)(v23 + 168);
      if (!(_DWORD)v25)
        goto LABEL_40;
      LODWORD(v26) = (v25 - 1) & ((Successor >> 4) ^ (Successor >> 9));
      v27 = (uint64_t *)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 != Successor)
        break;
LABEL_41:
      v31 = (unint64_t *)v27[1];
      v34 = *v31;
      v33 = v31 + 2;
      v32 = v34;
      if (v34 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_203;
      if (v32 >= 0x17)
      {
        v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v36 = v32 | 7;
        v37 = v36 + 1;
        v35 = (uint64_t (***)())operator new(v36 + 1);
        v140 = v32;
        v141 = v37 | 0x8000000000000000;
        __dst = (uint64_t (**)())v35;
      }
      else
      {
        HIBYTE(v141) = v32;
        v35 = &__dst;
        if (!v32)
          goto LABEL_49;
      }
      memmove(v35, v33, v32);
LABEL_49:
      *((_BYTE *)v35 + v32) = 0;
      if (v141 >= 0)
        v38 = &__dst;
      else
        v38 = (uint64_t (***)())__dst;
      if (v141 >= 0)
        v39 = HIBYTE(v141) & 0x7F;
      else
        v39 = v140;
      sub_1C5A74884(this, v38, v39, "", 0);
      if (SHIBYTE(v141) < 0)
        operator delete(__dst);
      if (v20 == ++v21)
        return this;
    }
    v29 = 1;
    while (v28 != -4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(_QWORD *)(v24 + 16 * v26);
      if (v28 == Successor)
      {
        v27 = (uint64_t *)(v24 + 16 * v26);
        goto LABEL_41;
      }
    }
LABEL_40:
    v27 = (uint64_t *)(v24 + 16 * v25);
    goto LABEL_41;
  }
  return this;
}

void sub_1C5A74854()
{
  JUMPOUT(0x1C5A74800);
}

void sub_1C5A74864()
{
  JUMPOUT(0x1C5A74800);
}

void sub_1C5A74870()
{
  JUMPOUT(0x1C5A73F0CLL);
}

void sub_1C5A74878()
{
  JUMPOUT(0x1C5A74800);
}

void sub_1C5A74884(llvm::StringMapImpl *a1, void *__src, size_t __len, void *a4, size_t a5)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  unsigned __int8 *v18;
  size_t v19;
  __int128 __p;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  __int128 __dst;
  int64_t v25;
  void *v26[2];
  int64_t v27;
  void *v28[2];
  unint64_t v29;

  if (!__src)
  {
    __dst = 0uLL;
    v25 = 0;
    if (a4)
      goto LABEL_13;
LABEL_7:
    v22 = 0uLL;
    v23 = 0;
    goto LABEL_22;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_38;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v25 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v25) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_11:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (!a4)
    goto LABEL_7;
LABEL_13:
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_38:
    abort();
  if (a5 >= 0x17)
  {
    v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v14 = a5 | 7;
    v15 = v14 + 1;
    v13 = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&v22 + 1) = a5;
    v23 = v15 | 0x8000000000000000;
    *(_QWORD *)&v22 = v13;
  }
  else
  {
    HIBYTE(v23) = a5;
    v13 = &v22;
    if (!a5)
      goto LABEL_21;
  }
  memmove(v13, a4, a5);
LABEL_21:
  *((_BYTE *)v13 + a5) = 0;
LABEL_22:
  v27 = v25;
  *(_OWORD *)v26 = __dst;
  *(_OWORD *)v28 = v22;
  v29 = v23;
  if (v25 >= 0)
    v16 = (unsigned __int8 *)v26;
  else
    v16 = (unsigned __int8 *)__dst;
  if (v25 >= 0)
    v17 = HIBYTE(v25) & 0x7F;
  else
    v17 = *((_QWORD *)&__dst + 1);
  v18 = v16;
  v19 = v17;
  if (SHIBYTE(v29) < 0)
  {
    sub_1C47EBC30(&__p, v28[0], (unint64_t)v28[1]);
    v16 = v18;
    v17 = v19;
  }
  else
  {
    __p = *(_OWORD *)v28;
    v21 = v29;
  }
  sub_1C5A7C154(a1, v16, v17, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

uint64_t llvm::DotCfgChangeReporter::DotCfgChangeReporter(uint64_t this, char a2)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 1;
  *(_BYTE *)(this + 33) = a2;
  *(_QWORD *)this = &off_1E8192700;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 1;
  *(_BYTE *)(this + 33) = a2;
  *(_QWORD *)this = &off_1E8192700;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

void llvm::DotCfgChangeReporter::handleFunctionCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, __int16 a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string::size_type **v32;
  uint64_t v33;
  std::string::size_type **v34;
  uint64_t v35;
  std::string::size_type **i;
  BOOL v37;
  std::string::size_type **v38;
  std::string::size_type v39;
  const void *v40;
  std::string *p_dst;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE *v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  unint64_t v49;
  std::string::size_type size;
  std::string::size_type v51;
  char v52;
  std::string::size_type v53;
  const void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  std::string *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  size_t v65;
  uint64_t *v66;
  unint64_t v67;
  std::string::size_type *v68;
  std::string::size_type *v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  size_t **j;
  unint64_t **m;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  char *v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  unint64_t v89;
  char *v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  int v99;
  _QWORD *v100;
  _QWORD *v101;
  size_t *v104;
  size_t v105;
  uint64_t v106;
  int v107;
  size_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  int v119;
  int v120;
  size_t v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char *v130;
  size_t v131;
  char *v132;
  char *v133;
  unsigned int v134;
  uint64_t *k;
  uint64_t v136;
  uint64_t *v137;
  std::string::size_type **v138;
  uint64_t v139;
  size_t v140;
  uint64_t v141;
  std::string::size_type **v142;
  size_t v143;
  std::string::size_type **v145;
  std::string::size_type v146;
  const void *v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  _BYTE *v152;
  std::string *v153;
  std::string::size_type v154;
  uint64_t v155;
  unint64_t v156;
  std::string::size_type v157;
  std::string::size_type v158;
  char v159;
  std::string::size_type v160;
  const void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  std::string *v166;
  std::string::size_type v167;
  std::string::size_type v168;
  std::string *v169;
  std::string::size_type v170;
  std::string *p_str;
  size_t v172;
  int v173;
  size_t v174;
  int v175;
  int v176;
  std::string::size_type v177;
  std::string::size_type v178;
  int v179;
  int v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t *v183;
  size_t v184;
  size_t *v185;
  uint64_t *v186;
  uint64_t v187;
  std::string::size_type *v188;
  std::string::size_type *v189;
  BOOL v190;
  size_t *v191;
  BOOL v192;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  size_t v204;
  unint64_t v205;
  size_t v206;
  unint64_t v207;
  size_t v208;
  unsigned int v209;
  int v210;
  size_t v211;
  unsigned __int8 *v212;
  int v213;
  unsigned int v214;
  _QWORD *v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  unsigned int v226;
  uint64_t n;
  _QWORD *v228;
  BOOL v229;
  size_t v230;
  int v231;
  char *v232;
  unsigned int v233;
  int v234;
  unsigned __int8 *v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  size_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  char *v247;
  size_t v248;
  char *v249;
  char *v250;
  unsigned int v251;
  uint64_t *ii;
  _QWORD *v253;
  size_t v255;
  unsigned __int8 *v256;
  int v257;
  uint64_t v258;
  unsigned __int8 *v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  _QWORD *v268;
  int v269;
  size_t v270;
  unsigned __int8 *v271;
  int v272;
  int v273;
  int jj;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  const void *v279;
  const void *v280;
  char v281;
  const void *v282;
  unsigned int v283;
  void *v284;
  std::string::size_type v285;
  int v286;
  std::string::size_type v287;
  std::string::size_type v288;
  void *v289;
  std::string::size_type v290;
  const void *v291;
  size_t v292;
  uint64_t v293;
  uint64_t v294;
  std::string *v295;
  std::string::size_type v296;
  __int128 *v297;
  std::string::size_type v298;
  const std::string::value_type *v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  BOOL v303;
  const std::string::value_type *v304;
  std::string::size_type v305;
  std::string::size_type v306;
  std::string *v307;
  std::string::size_type v308;
  size_t v309;
  uint64_t *v310;
  _QWORD *v311;
  void *v312;
  __int128 *v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  char v317;
  std::string::size_type v318;
  int v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t **v324;
  char *v325;
  char *v326;
  char *v327;
  unsigned int v328;
  uint64_t **v329;
  char *v330;
  uint64_t **v331;
  uint64_t *v332;
  uint64_t *v333;
  std::string::size_type v334;
  unint64_t *v335;
  BOOL v336;
  unint64_t v337;
  char v338;
  void *v339;
  size_t v340;
  unint64_t v341;
  void *v342;
  size_t v343;
  BOOL v344;
  void **v345;
  size_t v346;
  unsigned int v347;
  int v348;
  size_t v349;
  void **v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  const void *v365;
  unsigned int v366;
  uint64_t *mm;
  _QWORD *v368;
  __int128 *v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  int v375;
  unsigned int v376;
  unint64_t prime;
  uint64_t v378;
  unint64_t *v379;
  unint64_t *v380;
  unint64_t *v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char *v386;
  unint64_t *v387;
  unint64_t v388;
  _OWORD *v389;
  unsigned int v390;
  uint64_t v391;
  unsigned int *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  unsigned int v396;
  unsigned int v397;
  size_t v398;
  uint64_t v399;
  char v400;
  const void *v401;
  int v402;
  std::string::size_type v403;
  std::string::size_type v404;
  std::string::size_type v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  std::string *v409;
  std::string::size_type v410;
  uint64_t v411;
  char v412;
  const void *v413;
  int v414;
  std::string::size_type v415;
  std::string::size_type v416;
  std::string::size_type v417;
  void *v418;
  std::string::size_type v419;
  std::string::size_type v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  BOOL v424;
  std::string *v425;
  std::string::size_type v426;
  std::string::size_type v427;
  std::string *v428;
  int v429;
  unsigned __int8 *v430;
  size_t v431;
  uint64_t v432;
  int v433;
  size_t v434;
  unsigned __int8 *v435;
  int v436;
  size_t v437;
  int v438;
  int v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  size_t v447;
  unsigned int v448;
  uint64_t v449;
  _BYTE *v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  void **v457;
  unint64_t *v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  char *v462;
  uint64_t v463;
  char *v464;
  char *v465;
  char *v466;
  __int128 v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  uint8x8_t v473;
  _QWORD *v474;
  _QWORD *i1;
  unint64_t v476;
  _QWORD *v477;
  float v478;
  float v479;
  _BOOL8 v480;
  unint64_t v481;
  unint64_t v482;
  void *v483;
  void *v484;
  uint64_t v485;
  _QWORD *v486;
  unint64_t v487;
  uint8x8_t v488;
  unint64_t v489;
  uint8x8_t v490;
  uint64_t v491;
  _QWORD *v492;
  unint64_t v493;
  _QWORD *v494;
  unint64_t v495;
  void *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  void **v500;
  unint64_t *v501;
  unint64_t *v502;
  _QWORD *v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  uint8x8_t v509;
  _QWORD *v510;
  _QWORD *i2;
  unint64_t v512;
  _QWORD *v513;
  float v514;
  float v515;
  _BOOL8 v516;
  unint64_t v517;
  unint64_t v518;
  int8x8_t v519;
  void *v520;
  void *v521;
  uint64_t v522;
  _QWORD *v523;
  unint64_t v524;
  uint8x8_t v525;
  unint64_t v526;
  uint8x8_t v527;
  uint64_t v528;
  _QWORD *v529;
  unint64_t v530;
  _QWORD *v531;
  unint64_t v532;
  void *v533;
  _OWORD *v534;
  _QWORD *v535;
  _OWORD *v536;
  _BYTE *v537;
  uint64_t v538;
  llvm *v539;
  size_t v540;
  size_t v541;
  uint64_t *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  char *v546;
  char *v547;
  char v548;
  char *v549;
  size_t v550;
  size_t v551;
  _BYTE *v552;
  uint64_t v553;
  BOOL v554;
  uint64_t v555;
  _BYTE *v556;
  size_t v557;
  unint64_t v558;
  unint64_t v559;
  size_t v560;
  unint64_t v561;
  _BYTE *v562;
  const void *v563;
  std::string::size_type v564;
  int v565;
  void *v566;
  uint64_t v567;
  uint64_t v568;
  std::string *v569;
  std::string::size_type v570;
  std::string *v571;
  std::string::size_type v572;
  __int128 *v573;
  uint64_t v574;
  uint64_t v575;
  const std::string::value_type *v576;
  std::string::size_type v577;
  std::string *v578;
  std::string::size_type v579;
  std::string *v580;
  std::string::size_type v581;
  unint64_t v582;
  unint64_t v583;
  size_t v584;
  _BYTE *v585;
  std::string::size_type v586;
  const std::string::value_type *v587;
  char v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  const std::string::value_type *v592;
  std::string::size_type v593;
  std::string::size_type v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  char *v601;
  uint64_t v602;
  char *v603;
  char *v604;
  char *v605;
  uint64_t v606;
  _BYTE *v607;
  void **v608;
  __int128 v609;
  uint64_t v610;
  char *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  char *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t **nn;
  uint64_t **v629;
  unsigned int v630;
  size_t v631;
  uint64_t *v632;
  uint64_t *v633;
  uint64_t v634;
  char v635;
  char v636;
  uint64_t v637;
  uint64_t v638;
  _BYTE *v639;
  _BYTE *v640;
  char v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  BOOL v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  __int128 *v649;
  BOOL v650;
  _BYTE *v651;
  uint64_t v652;
  uint64_t v653;
  char v654;
  const void *v655;
  int v656;
  std::string::size_type v657;
  std::string::size_type v658;
  std::string::size_type v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  std::string *v663;
  uint64_t v664;
  uint64_t v665;
  std::string *v666;
  uint64_t v667;
  std::string *v668;
  std::string::size_type v669;
  std::string *v670;
  std::string::size_type v671;
  std::string *v672;
  size_t v673;
  std::string::size_type v674;
  char v675;
  std::string::size_type v676;
  char v677;
  uint64_t v678;
  std::string::size_type v679;
  std::string::size_type v680;
  std::string *v681;
  std::string *v682;
  llvm::raw_ostream *v683;
  llvm::raw_ostream *v684;
  _DWORD *v685;
  const char *v686;
  size_t v687;
  _BYTE *v688;
  __int128 v689;
  std::string::size_type v690;
  uint64_t v691;
  _OWORD *v692;
  unint64_t v693;
  _QWORD *v694;
  std::string *v695;
  std::string *v696;
  size_t v697;
  std::string::size_type v698;
  uint64_t v699;
  std::string *v700;
  std::string *v701;
  size_t v702;
  _WORD *v703;
  void ***v704;
  uint64_t v705;
  llvm::raw_ostream *v706;
  void **v707;
  uint64_t v708;
  const char *v709;
  size_t v710;
  llvm *v711;
  uint64_t v712;
  llvm::raw_ostream *v713;
  llvm::raw_ostream *v714;
  _DWORD *v715;
  const char *v716;
  size_t v717;
  _BYTE *v718;
  uint64_t v719;
  uint64_t v720;
  void *v721;
  uint64_t v722;
  uint64_t v723;
  void *v724;
  void **v725;
  _DWORD *v726;
  uint64_t v727;
  size_t v728;
  std::string *v729;
  _DWORD *v730;
  _QWORD *v731;
  int v732;
  _QWORD *v733;
  unsigned int v734;
  unsigned int v735;
  unint64_t v736;
  void *v737;
  void *v738;
  const char *v739;
  size_t v740;
  _DWORD *v741;
  _QWORD *v742;
  unint64_t v743;
  char v744;
  std::string::size_type v745;
  uint64_t v746;
  std::string *v747;
  size_t v748;
  _DWORD *v749;
  uint64_t v750;
  char v751;
  const char *v752;
  size_t v753;
  uint64_t v754;
  uint64_t v755;
  _QWORD *v756;
  int v757;
  _OWORD *v759;
  uint64_t v760;
  unsigned int v761;
  _QWORD *v762;
  unint64_t *v763;
  void **v764;
  uint64_t *v765;
  unsigned int *v766;
  uint64_t v767;
  uint64_t **v768;
  uint64_t v769;
  unsigned int *v770;
  size_t **v771;
  float *v772;
  std::string::size_type v773;
  uint64_t *v774;
  size_t **v775;
  char *v776;
  void *v777;
  void *v778;
  char **v779;
  std::string::size_type **v780;
  size_t v781;
  unint64_t *v782;
  uint64_t v783;
  int v784;
  int v785;
  uint64_t v786;
  int v787;
  void *__s1;
  char *__s1a;
  void *__s1b;
  int __s1c;
  char *__s1d;
  size_t v793;
  int v794;
  size_t v795;
  unsigned __int8 *v796;
  size_t v797;
  unsigned int v798;
  size_t v799;
  size_t v800;
  size_t v801;
  size_t __n;
  unsigned __int8 *__na;
  void *__nb;
  const void *__nc;
  size_t __nd[2];
  uint64_t __ne;
  _BOOL8 __nf;
  uint64_t v809;
  _QWORD *kk;
  uint64_t v811;
  std::string *v812;
  size_t v813;
  uint64_t v814;
  void **v815;
  size_t *v816;
  float *v817;
  unint64_t v818;
  void ***v819;
  std::string *v820;
  __int128 v821;
  unint64_t v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  uint64_t v826;
  void *v827[2];
  uint64_t v828;
  void *v829;
  uint64_t v830;
  char v831;
  _QWORD v832[2];
  _QWORD v833[2];
  _QWORD v834[2];
  std::string v835;
  __int128 v836;
  uint64_t v837;
  __int128 v838;
  unint64_t v839;
  std::string v840;
  std::string __str;
  uint64_t v842;
  _QWORD v843[2];
  _QWORD *v844;
  std::string v845;
  uint64_t v846;
  uint64_t (**v847)(llvm::detail::format_adapter *__hidden);
  uint64_t *v848;
  uint64_t (***v849)(llvm::detail::format_adapter *__hidden);
  int v850;
  std::string *v851;
  std::string __dst;
  _BYTE v853[32];
  __int128 v854;
  _QWORD v855[2];
  void *v856;
  void *__p;
  _BYTE v858[15];
  char v859;
  _QWORD v860[2];
  _QWORD v861[2];
  _QWORD v862[6];
  _BYTE v863[48];
  _BYTE *v864;
  void *v865;
  _BYTE *v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  void *__src;
  __int128 __len;
  uint64_t v873;
  void *v874;
  uint64_t v875;
  void *v876;
  char *v877;
  void **v878;
  void **v879;
  void *v880;
  __int128 v881;
  _BYTE v882[24];
  void *v883;
  __int128 v884;
  _BYTE v885[128];
  void *v886;
  __int128 v887;
  uint64_t v888;
  void *v889;
  __int128 v890;
  uint64_t v891;
  std::string v892;
  uint64_t v893;
  uint64_t (**v894)(llvm::detail::format_adapter *__hidden);
  uint64_t *v895;
  uint64_t (***v896)(llvm::detail::format_adapter *__hidden);
  int v897;
  _BYTE *v898;
  _BYTE v899[40];
  char v900;
  uint64_t v901;
  int v902;
  __int128 *v903;
  __int128 v904;
  __int128 v905;
  std::string v906;
  uint64_t v907;

  v907 = *MEMORY[0x1E0C80C00];
  v834[0] = a2;
  v834[1] = a3;
  v833[0] = a4;
  v833[1] = a5;
  v832[0] = a9;
  v832[1] = a10;
  v889 = &v891;
  v890 = xmmword_1C6464ED0;
  v886 = &v888;
  v887 = xmmword_1C6464ED0;
  v17 = a1 + 36;
  if (a11)
  {
    __src = "{0}_{1}";
    *(_QWORD *)&__len = 7;
    *((_QWORD *)&__len + 1) = &v878;
    v873 = 2;
    v874 = &unk_1E8168E30;
    v875 = a1 + 36;
    v876 = &unk_1E8168E30;
    v877 = &a13;
    v878 = &v874;
    v879 = &v876;
    *(_QWORD *)v853 = &v853[24];
    *(_OWORD *)&v853[8] = xmmword_1C6464ED0;
    *(_DWORD *)&v863[8] = 0;
    v864 = 0;
    *(_QWORD *)v863 = &off_1E81A7280;
    v866 = v853;
    LODWORD(v865) = 0;
    memset(&v863[16], 0, 25);
    sub_1C639D338((uint64_t)&__src, (llvm::raw_ostream *)v863);
    *(_QWORD *)v863 = off_1E81A6E70;
    if ((_DWORD)v865 == 1 && *(_QWORD *)&v863[16])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v863[16], 0x1000C8077774924);
    sub_1C4FE6ED8((uint64_t)&v889, (uint64_t)v853);
    if (*(_BYTE **)v853 != &v853[24])
      free(*(void **)v853);
    __src = "{0}.{1}";
    *(_QWORD *)&__len = 7;
    *((_QWORD *)&__len + 1) = &v878;
    v873 = 2;
    v874 = &unk_1E8168E30;
    v875 = v17;
    v876 = &unk_1E8168E30;
    v877 = &a13;
    v878 = &v874;
    v879 = &v876;
    *(_QWORD *)v853 = &v853[24];
    *(_OWORD *)&v853[8] = xmmword_1C6464ED0;
    *(_DWORD *)&v863[8] = 0;
    v864 = 0;
    *(_QWORD *)v863 = &off_1E81A7280;
    v866 = v853;
    LODWORD(v865) = 0;
    memset(&v863[16], 0, 25);
    sub_1C639D338((uint64_t)&__src, (llvm::raw_ostream *)v863);
    *(_QWORD *)v863 = off_1E81A6E70;
    if ((_DWORD)v865 != 1)
      goto LABEL_12;
    v18 = *(_QWORD *)&v863[16];
    if (!*(_QWORD *)&v863[16])
      goto LABEL_12;
LABEL_615:
    MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
    goto LABEL_12;
  }
  *(_QWORD *)v863 = "{0}";
  *(_QWORD *)&v863[8] = 3;
  *(_QWORD *)&v863[16] = &v864;
  *(_QWORD *)&v863[24] = 1;
  *(_QWORD *)&v863[32] = &unk_1E8168E30;
  *(_QWORD *)&v863[40] = a1 + 36;
  v864 = &v863[32];
  *(_QWORD *)v853 = &v853[24];
  *(_OWORD *)&v853[8] = xmmword_1C6464ED0;
  LODWORD(__len) = 0;
  LOBYTE(v875) = 0;
  v876 = 0;
  __src = &off_1E81A7280;
  v878 = (void **)v853;
  LODWORD(v877) = 0;
  v874 = 0;
  *((_QWORD *)&__len + 1) = 0;
  v873 = 0;
  sub_1C639D338((uint64_t)v863, (llvm::raw_ostream *)&__src);
  __src = off_1E81A6E70;
  if ((_DWORD)v877 == 1 && *((_QWORD *)&__len + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&__len + 1), 0x1000C8077774924);
  sub_1C4FE6ED8((uint64_t)&v889, (uint64_t)v853);
  if (*(_BYTE **)v853 != &v853[24])
    free(*(void **)v853);
  *(_QWORD *)v863 = "{0}";
  *(_QWORD *)&v863[8] = 3;
  *(_QWORD *)&v863[16] = &v864;
  *(_QWORD *)&v863[24] = 1;
  *(_QWORD *)&v863[32] = &unk_1E8168E30;
  *(_QWORD *)&v863[40] = v17;
  v864 = &v863[32];
  *(_QWORD *)v853 = &v853[24];
  *(_OWORD *)&v853[8] = xmmword_1C6464ED0;
  LODWORD(__len) = 0;
  LOBYTE(v875) = 0;
  v876 = 0;
  __src = &off_1E81A7280;
  v878 = (void **)v853;
  LODWORD(v877) = 0;
  v874 = 0;
  *((_QWORD *)&__len + 1) = 0;
  v873 = 0;
  sub_1C639D338((uint64_t)v863, (llvm::raw_ostream *)&__src);
  __src = off_1E81A6E70;
  if ((_DWORD)v877 == 1)
  {
    v18 = *((_QWORD *)&__len + 1);
    if (*((_QWORD *)&__len + 1))
      goto LABEL_615;
  }
LABEL_12:
  sub_1C4FE6ED8((uint64_t)&v886, (uint64_t)v853);
  if (*(_BYTE **)v853 != &v853[24])
    free(*(void **)v853);
  v883 = v885;
  v884 = xmmword_1C85F20B0;
  __src = "cfgdot-%%%%%%.dot";
  LOWORD(v874) = 259;
  llvm::sys::fs::createUniquePath((uint64_t)&__src, &v883, 1);
  LOWORD(v874) = 261;
  __src = v883;
  *(_QWORD *)&__len = v884;
  llvm::Twine::str((llvm::Twine *)&__src, &v829);
  *(_QWORD *)v863 = "diff_{0}.pdf";
  *(_QWORD *)&v863[8] = 12;
  *(_QWORD *)&v863[16] = &v864;
  *(_QWORD *)&v863[24] = 1;
  *(_QWORD *)&v863[32] = &off_1E8192B48;
  *(_QWORD *)&v863[40] = &v889;
  v864 = &v863[32];
  v880 = v882;
  v881 = xmmword_1C69DD250;
  LODWORD(__len) = 0;
  LOBYTE(v875) = 0;
  v876 = 0;
  __src = &off_1E81A7280;
  v878 = &v880;
  LODWORD(v877) = 0;
  v874 = 0;
  *((_QWORD *)&__len + 1) = 0;
  v873 = 0;
  sub_1C639D338((uint64_t)v863, (llvm::raw_ostream *)&__src);
  __src = off_1E81A6E70;
  if ((_DWORD)v877 == 1 && *((_QWORD *)&__len + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&__len + 1), 0x1000C8077774924);
  __src = &v873;
  __len = xmmword_1C8667FB0;
  sub_1C5A79FD8(&v892, a6, a7);
  *(_QWORD *)v858 = v892.__r_.__value_.__l.__size_;
  v19 = (void *)v892.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v858[7] = *(std::string::size_type *)((char *)&v892.__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v892.__r_.__value_.__r.__words[2]);
  memset(&v892, 0, sizeof(v892));
  *(_QWORD *)v853 = "{0}.{1}{2}{3}{4}";
  *(_QWORD *)&v853[8] = 16;
  *(_QWORD *)&v853[16] = v862;
  *(_QWORD *)&v853[24] = 5;
  *(_QWORD *)&v854 = &off_1E8192B48;
  *((_QWORD *)&v854 + 1) = &v886;
  v855[0] = &unk_1E8168E00;
  v855[1] = v833;
  v856 = &unk_1E816A788;
  __p = v19;
  v859 = v20;
  v860[0] = &unk_1E8168E00;
  v860[1] = v832;
  v861[0] = &unk_1E8168E00;
  v861[1] = v834;
  v862[0] = &v854;
  v862[1] = v855;
  v862[2] = &v856;
  v862[3] = v860;
  v862[4] = v861;
  *(_QWORD *)v863 = &v863[24];
  *(_OWORD *)&v863[8] = xmmword_1C8667FB0;
  *(_DWORD *)&v899[8] = 0;
  v900 = 0;
  v901 = 0;
  *(_QWORD *)v899 = &off_1E81A7280;
  v903 = (__int128 *)v863;
  v902 = 0;
  memset(&v899[16], 0, 24);
  sub_1C639D338((uint64_t)v853, (llvm::raw_ostream *)v899);
  *(_QWORD *)v899 = off_1E81A6E70;
  if (v902 == 1 && *(_QWORD *)&v899[16])
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v899[16], 0x1000C8077774924);
  sub_1C4FE6ED8((uint64_t)&__src, (uint64_t)v863);
  if (*(_BYTE **)v863 != &v863[24])
    free(*(void **)v863);
  v856 = &unk_1E816A788;
  if (v859 < 0)
    operator delete(__p);
  if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v892.__r_.__value_.__l.__data_);
  v21 = __src;
  v22 = __len;
  memset(v863, 0, 44);
  *(_DWORD *)&v863[44] = 16;
  v23 = &v865;
  if (__src)
  {
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1268;
    if ((unint64_t)__len >= 0x17)
    {
      v24 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v24 = __len | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      v867 = v25 | 0x8000000000000000;
      v865 = v23;
      v866 = (_BYTE *)v22;
    }
    else
    {
      HIBYTE(v867) = __len;
      if (!(_QWORD)__len)
        goto LABEL_32;
    }
    memmove(v23, v21, v22);
LABEL_32:
    *((_BYTE *)v23 + v22) = 0;
    goto LABEL_33;
  }
  v865 = 0;
  v866 = 0;
  v867 = 0;
LABEL_33:
  v869 = 0;
  v868 = 0;
  v870 = 0x2000000000;
  *(_OWORD *)&v892.__r_.__value_.__l.__data_ = 0uLL;
  v892.__r_.__value_.__r.__words[2] = 0x1800000000;
  v26 = *(unsigned int *)(a14 + 32);
  v769 = a14;
  v27 = *(uint64_t **)(a14 + 24);
  if ((_DWORD)v26)
  {
    while (!*v27 || *v27 == -8)
      ++v27;
  }
  v793 = *(_QWORD *)(a14 + 24) + 8 * v26;
  if (v27 != (uint64_t *)v793)
  {
    v28 = *v27;
    do
    {
      v29 = *(_QWORD *)v28;
      if (byte_1ED8350B7 >= 0)
        v30 = byte_1ED8350B7 & 0x7F;
      else
        v30 = unk_1ED8350A8;
      if (byte_1ED8350B7 >= 0)
        v31 = &qword_1ED8350A0;
      else
        v31 = (uint64_t *)qword_1ED8350A0;
      v809 = v28 + 88;
      sub_1C5A7C374((uint64_t)v863, (unsigned __int8 *)(v28 + 88), v29, v28 + 8, (uint64_t)v31, v30);
      v34 = *(std::string::size_type ***)(v28 + 56);
      v33 = v28 + 56;
      v32 = v34;
      v35 = *(unsigned int *)(v33 + 8);
      if ((_DWORD)v35)
      {
        for (i = v32; ; ++i)
        {
          v37 = !*i || *i + 1 == 0;
          if (!v37)
            break;
        }
      }
      else
      {
        i = v32;
      }
      v38 = &v32[v35];
      while (i != v38)
      {
        *(_WORD *)&v899[32] = 773;
        *(_QWORD *)v899 = v809;
        *(_QWORD *)&v899[8] = v29;
        *(_QWORD *)&v899[16] = " ";
        v40 = *i + 4;
        v39 = **i;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1268;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          p_dst = (std::string *)operator new(v42 + 1);
          __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = v39;
LABEL_60:
          memmove(p_dst, v40, v39);
          goto LABEL_61;
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = **i;
        p_dst = &__dst;
        if (v39)
          goto LABEL_60;
LABEL_61:
        p_dst->__r_.__value_.__s.__data_[v39] = 0;
        v44 = v899[32];
        if (v899[32] == 1)
        {
          *(_QWORD *)v853 = &__dst;
          *(_OWORD *)&v853[16] = *(_OWORD *)&v840.__r_.__value_.__l.__data_;
          LOWORD(v854) = 260;
          *(_DWORD *)((char *)&v854 + 2) = v838;
          WORD3(v854) = WORD2(v838);
        }
        else if (v899[32])
        {
          if (v899[33] != 1)
            v44 = 2;
          v45 = v899;
          if (v899[33] == 1)
            v45 = *(_BYTE **)v899;
          *(_QWORD *)v853 = v45;
          *(_QWORD *)&v853[8] = *(_QWORD *)&v899[8];
          *(_QWORD *)&v853[16] = &__dst;
          LOBYTE(v854) = v44;
          BYTE1(v854) = 4;
        }
        else
        {
          LOWORD(v854) = 256;
        }
        llvm::Twine::str((llvm::Twine *)v853, &v904);
        v46 = std::string::append((std::string *)&v904, " ");
        v47 = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        v48 = sub_1C63053A8(v33, (unsigned __int8 *)*i + 32, **i);
        if (!v48)
        {
          size = 0;
          v51 = 0;
          v52 = 0;
          memset(&v906, 0, sizeof(v906));
          goto LABEL_81;
        }
        v53 = v49;
        if (v49 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1268;
        v54 = (const void *)v48;
        if (v49 >= 0x17)
        {
          v56 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v49 | 7) != 0x17)
            v56 = v49 | 7;
          v57 = v56 + 1;
          v55 = operator new(v56 + 1);
          v906.__r_.__value_.__l.__size_ = v53;
          v906.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
          v906.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        }
        else
        {
          *((_BYTE *)&v906.__r_.__value_.__s + 23) = v49;
          v55 = &v906;
          if (!v49)
            goto LABEL_80;
        }
        memmove(v55, v54, v53);
LABEL_80:
        *((_BYTE *)v55 + v53) = 0;
        v52 = HIBYTE(v906.__r_.__value_.__r.__words[2]);
        size = v906.__r_.__value_.__l.__size_;
        v51 = v906.__r_.__value_.__r.__words[0];
LABEL_81:
        v58 = v52 < 0;
        if (v52 >= 0)
          v59 = &v906;
        else
          v59 = (std::string *)v51;
        v60 = v52 & 0x7F;
        if (v58)
          v61 = size;
        else
          v61 = v60;
        v62 = std::string::append(&__str, (const std::string::value_type *)v59, v61);
        v63 = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v845.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v845.__r_.__value_.__r.__words[2] = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v906.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SBYTE7(v905) < 0)
          operator delete((void *)v904);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v845;
        else
          v64 = (std::string *)v845.__r_.__value_.__r.__words[0];
        if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
        else
          v65 = v845.__r_.__value_.__l.__size_;
        v820 = v64;
        *(_QWORD *)&v821 = v65;
        v66 = (uint64_t *)qword_1ED8350A0;
        if (byte_1ED8350B7 >= 0)
          v66 = &qword_1ED8350A0;
        v67 = byte_1ED8350B7 & 0x7F;
        if (byte_1ED8350B7 < 0)
          v67 = unk_1ED8350A8;
        *((_QWORD *)&v821 + 1) = v66;
        v822 = v67;
        sub_1C61CE250((uint64_t)&v892, (unsigned __int8 *)v64, v65, (__int128 *)((char *)&v821 + 8));
        if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v845.__r_.__value_.__l.__data_);
        do
        {
          v69 = i[1];
          ++i;
          v68 = v69;
          if (v69)
            v70 = v68 + 1 == 0;
          else
            v70 = 1;
        }
        while (v70);
      }
      do
      {
        v71 = v27[1];
        ++v27;
        v28 = v71;
        if (v71)
          v72 = v28 == -8;
        else
          v72 = 1;
      }
      while (v72);
    }
    while (v27 != (uint64_t *)v793);
  }
  v767 = a15;
  v73 = *(unsigned int *)(a15 + 32);
  if ((_DWORD)v73)
  {
    for (j = *(size_t ***)(a15 + 24); !*j || *j + 1 == 0; ++j)
      ;
  }
  else
  {
    j = *(size_t ***)(a15 + 24);
  }
  v775 = (size_t **)(*(_QWORD *)(a15 + 24) + 8 * v73);
  if (j != v775)
  {
    v104 = *j;
    do
    {
      __s1 = v104 + 11;
      v105 = *v104;
      v811 = (uint64_t)(v104 + 1);
      v106 = *(unsigned int *)&v863[32];
      __n = *v104;
      if (!*(_DWORD *)&v863[32])
        goto LABEL_226;
      v107 = 0;
      if (v105)
      {
        v108 = *v104;
        v109 = (unsigned __int8 *)(v104 + 11);
        do
        {
          v110 = *v109++;
          v107 = 33 * v107 + v110;
          --v108;
        }
        while (v108);
      }
      v111 = *(_DWORD *)&v863[32] - 1;
      v112 = *(_QWORD *)&v863[24];
      v113 = *(_QWORD *)&v863[24] + 8 * *(unsigned int *)&v863[32] + 8;
      v114 = *(unsigned int *)&v863[44];
      v115 = 1;
      v116 = v107;
      while (1)
      {
        v117 = v116 & v111;
        v118 = *(_QWORD **)(v112 + 8 * v117);
        if (v118 != (_QWORD *)-8)
        {
          if (!v118)
            goto LABEL_226;
          if (*(_DWORD *)(v113 + 4 * v117) == v107 && v105 == *v118)
          {
            if (!v105)
            {
              if ((_DWORD)v117 == -1 || (int)v117 == v106)
                goto LABEL_226;
              v120 = 0;
LABEL_203:
              v794 = -1;
              v124 = 1;
              v125 = v120;
              while (1)
              {
                v126 = v125 & v111;
                v127 = *(_QWORD *)(v112 + 8 * v126);
                if (!v127)
                  break;
                if (v127 == -8)
                {
                  if (v794 == -1)
                    v128 = v125 & v111;
                  else
                    v128 = v794;
                  v794 = v128;
                }
                else if (*(_DWORD *)(v113 + 4 * v126) == v120
                       && __n == *(_QWORD *)v127
                       && (!__n || !memcmp(__s1, (const void *)(v127 + v114), __n)))
                {
                  goto LABEL_219;
                }
                v125 = v124 + v126;
                ++v124;
              }
              v129 = v794;
              if (v794 == -1)
              {
                v129 = v126;
                v126 = v126;
              }
              else
              {
                v126 = v794;
              }
              *(_DWORD *)(v113 + 4 * v129) = v120;
              v127 = *(_QWORD *)(v112 + 8 * v126);
LABEL_219:
              if (v127)
              {
                if (v127 == -8)
                {
                  --*(_DWORD *)&v863[40];
                  goto LABEL_220;
                }
              }
              else
              {
LABEL_220:
                v130 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
                v131 = __n;
                v132 = v130;
                v133 = v130 + 16;
                if (__n)
                {
                  memcpy(v130 + 16, __s1, __n);
                  v131 = __n;
                }
                v133[v131] = 0;
                *(_QWORD *)v132 = v131;
                *((_DWORD *)v132 + 2) = 0;
                *(_QWORD *)(v112 + 8 * v126) = v132;
                ++*(_DWORD *)&v863[36];
                v134 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v863[24], v126);
                for (k = (uint64_t *)(*(_QWORD *)&v863[24] + 8 * v134); ; ++k)
                {
                  v127 = *k;
                  if (*k && v127 != -8)
                    break;
                }
              }
              v194 = (_QWORD *)(*(_QWORD *)v863 + 120 * *(unsigned int *)(v127 + 8));
              v194[3] = v811;
              v195 = (uint64_t *)qword_1ED835270;
              if (byte_1ED835287 >= 0)
                v195 = &qword_1ED835270;
              v196 = byte_1ED835287 & 0x7F;
              if (byte_1ED835287 < 0)
                v196 = unk_1ED835278;
              v194[4] = v195;
              v194[5] = v196;
              goto LABEL_233;
            }
            v119 = memcmp(__s1, (char *)v118 + v114, __n);
            v105 = __n;
            if (!v119)
              break;
          }
        }
        v116 = v115 + v117;
        ++v115;
      }
      if ((_DWORD)v117 != -1 && (int)v117 != v106)
      {
        v120 = 0;
        v121 = __n;
        v122 = (unsigned __int8 *)(v104 + 11);
        do
        {
          v123 = *v122++;
          v120 = 33 * v120 + v123;
          --v121;
        }
        while (v121);
        goto LABEL_203;
      }
LABEL_226:
      if (byte_1ED83519F >= 0)
        v136 = byte_1ED83519F & 0x7F;
      else
        v136 = unk_1ED835190;
      if (byte_1ED83519F >= 0)
        v137 = &qword_1ED835188;
      else
        v137 = (uint64_t *)qword_1ED835188;
      sub_1C5A7C374((uint64_t)v863, (unsigned __int8 *)__s1, v105, v811, (uint64_t)v137, v136);
LABEL_233:
      v140 = v104[7];
      v139 = (uint64_t)(v104 + 7);
      v138 = (std::string::size_type **)v140;
      v141 = *(unsigned int *)(v139 + 8);
      if ((_DWORD)v141)
      {
        v142 = v138;
        v143 = __n;
        while (!*v142 || *v142 + 1 == 0)
          ++v142;
      }
      else
      {
        v142 = v138;
        v143 = __n;
      }
      v145 = &v138[v141];
      v780 = v145;
      while (2)
      {
        if (v142 != v145)
        {
          *(_WORD *)&v899[32] = 773;
          *(_QWORD *)v899 = __s1;
          *(_QWORD *)&v899[8] = v143;
          *(_QWORD *)&v899[16] = " ";
          v147 = *v142 + 4;
          v146 = **v142;
          if (v146 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1268;
          if (v146 >= 0x17)
          {
            v149 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v146 | 7) != 0x17)
              v149 = v146 | 7;
            v150 = v149 + 1;
            v148 = operator new(v149 + 1);
            v906.__r_.__value_.__l.__size_ = v146;
            v906.__r_.__value_.__r.__words[2] = v150 | 0x8000000000000000;
            v906.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
          }
          else
          {
            *((_BYTE *)&v906.__r_.__value_.__s + 23) = **v142;
            v148 = &v906;
            if (!v146)
            {
LABEL_252:
              v148[v146] = 0;
              v151 = v899[32];
              if (v899[32] == 1)
              {
                *(_QWORD *)v853 = &v906;
                *(_OWORD *)&v853[16] = v838;
                LOWORD(v854) = 260;
                *(_DWORD *)((char *)&v854 + 2) = v836;
                WORD3(v854) = WORD2(v836);
              }
              else if (v899[32])
              {
                if (v899[33] != 1)
                  v151 = 2;
                v152 = v899;
                if (v899[33] == 1)
                  v152 = *(_BYTE **)v899;
                *(_QWORD *)v853 = v152;
                *(_QWORD *)&v853[8] = *(_QWORD *)&v899[8];
                *(_QWORD *)&v853[16] = &v906;
                LOBYTE(v854) = v151;
                BYTE1(v854) = 4;
              }
              else
              {
                LOWORD(v854) = 256;
              }
              llvm::Twine::str((llvm::Twine *)v853, &__dst);
              v153 = std::string::append(&__dst, " ");
              v154 = v153->__r_.__value_.__r.__words[2];
              v904 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
              *(_QWORD *)&v905 = v154;
              v153->__r_.__value_.__l.__size_ = 0;
              v153->__r_.__value_.__r.__words[2] = 0;
              v153->__r_.__value_.__r.__words[0] = 0;
              v155 = sub_1C63053A8(v139, (unsigned __int8 *)*v142 + 32, **v142);
              if (!v155)
              {
                v157 = 0;
                v158 = 0;
                v159 = 0;
                memset(&v840, 0, sizeof(v840));
                goto LABEL_272;
              }
              v160 = v156;
              if (v156 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_1268;
              v161 = (const void *)v155;
              if (v156 >= 0x17)
              {
                v163 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v156 | 7) != 0x17)
                  v163 = v156 | 7;
                v164 = v163 + 1;
                v162 = operator new(v163 + 1);
                v840.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
                v840.__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
                v840.__r_.__value_.__l.__size_ = v160;
              }
              else
              {
                *((_BYTE *)&v840.__r_.__value_.__s + 23) = v156;
                v162 = &v840;
                if (!v156)
                  goto LABEL_271;
              }
              memmove(v162, v161, v160);
LABEL_271:
              *((_BYTE *)v162 + v160) = 0;
              v159 = HIBYTE(v840.__r_.__value_.__r.__words[2]);
              v157 = v840.__r_.__value_.__l.__size_;
              v158 = v840.__r_.__value_.__r.__words[0];
LABEL_272:
              v165 = v159 < 0;
              if (v159 >= 0)
                v166 = &v840;
              else
                v166 = (std::string *)v158;
              v167 = v159 & 0x7F;
              if (v165)
                v168 = v157;
              else
                v168 = v167;
              v169 = std::string::append((std::string *)&v904, (const std::string::value_type *)v166, v168);
              v170 = v169->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v170;
              v169->__r_.__value_.__l.__size_ = 0;
              v169->__r_.__value_.__r.__words[2] = 0;
              v169->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v840.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v840.__r_.__value_.__l.__data_);
              if (SBYTE7(v905) < 0)
                operator delete((void *)v904);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v906.__r_.__value_.__l.__data_);
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              v812 = p_str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v172 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
              else
                v172 = __str.__r_.__value_.__l.__size_;
              v783 = LODWORD(v892.__r_.__value_.__r.__words[1]);
              if (!LODWORD(v892.__r_.__value_.__r.__words[1]))
                goto LABEL_312;
              v173 = 0;
              if (v172)
              {
                v174 = v172;
                do
                {
                  v175 = p_str->__r_.__value_.__s.__data_[0];
                  p_str = (std::string *)((char *)p_str + 1);
                  v173 = 33 * v173 + v175;
                  --v174;
                }
                while (v174);
              }
              v176 = LODWORD(v892.__r_.__value_.__r.__words[1]) - 1;
              v177 = v892.__r_.__value_.__r.__words[0];
              v178 = v892.__r_.__value_.__r.__words[0] + 8 * LODWORD(v892.__r_.__value_.__r.__words[1]) + 8;
              v795 = HIDWORD(v892.__r_.__value_.__r.__words[2]);
              v179 = 1;
              v180 = v173;
              while (1)
              {
                v181 = v180 & v176;
                v182 = *(_QWORD **)(v177 + 8 * v181);
                if (v182 != (_QWORD *)-8)
                {
                  if (!v182)
                    goto LABEL_312;
                  if (*(_DWORD *)(v178 + 4 * v181) == v173
                    && v172 == *v182
                    && (!v172 || !memcmp(v812, (char *)v182 + v795, v172)))
                  {
                    break;
                  }
                }
                v180 = v179 + v181;
                ++v179;
              }
              if ((_DWORD)v181 == -1 || (int)v181 == v783)
              {
LABEL_312:
                v845.__r_.__value_.__r.__words[0] = (std::string::size_type)v812;
                v845.__r_.__value_.__l.__size_ = v172;
                v186 = (uint64_t *)qword_1ED835188;
                if (byte_1ED83519F >= 0)
                  v186 = &qword_1ED835188;
                v187 = byte_1ED83519F & 0x7F;
                if (byte_1ED83519F < 0)
                  v187 = unk_1ED835190;
                v845.__r_.__value_.__r.__words[2] = (std::string::size_type)v186;
                v846 = v187;
                sub_1C61CE250((uint64_t)&v892, (unsigned __int8 *)v812, v172, &v845.__r_.__value_.__r.__words[2]);
              }
              else
              {
                if (byte_1ED835287 >= 0)
                  v183 = &qword_1ED835270;
                else
                  v183 = (uint64_t *)qword_1ED835270;
                if (byte_1ED835287 >= 0)
                  v184 = byte_1ED835287 & 0x7F;
                else
                  v184 = unk_1ED835278;
                v185 = *sub_1C62DAFD0((uint64_t)&v892, (unsigned __int8 *)v812, v172);
                v185[1] = (size_t)v183;
                v185[2] = v184;
              }
              v143 = __n;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__str.__r_.__value_.__l.__data_);
                v143 = __n;
              }
              do
              {
                v189 = v142[1];
                ++v142;
                v188 = v189;
                if (v189)
                  v190 = v188 + 1 == 0;
                else
                  v190 = 1;
              }
              while (v190);
              v145 = v780;
              continue;
            }
          }
          memmove(v148, v147, v146);
          goto LABEL_252;
        }
        break;
      }
      do
      {
        v191 = j[1];
        ++j;
        v104 = v191;
        if (v191)
          v192 = v104 + 1 == 0;
        else
          v192 = 1;
      }
      while (v192);
    }
    while (j != v775);
  }
  if (LODWORD(v892.__r_.__value_.__r.__words[1]))
  {
    for (m = (unint64_t **)v892.__r_.__value_.__r.__words[0]; !*m || *m + 1 == 0; ++m)
      ;
  }
  else
  {
    m = (unint64_t **)v892.__r_.__value_.__r.__words[0];
  }
  v773 = v892.__r_.__value_.__r.__words[0] + 8 * LODWORD(v892.__r_.__value_.__r.__words[1]);
  if (m == (unint64_t **)v773)
    goto LABEL_123;
  v198 = *m;
  do
  {
    v199 = *v198;
    *(_QWORD *)&v836 = v198 + 3;
    *((_QWORD *)&v836 + 1) = v199;
    __str.__r_.__value_.__s.__data_[0] = 32;
    v200 = llvm::StringRef::rfind((uint64_t *)&v836, &__str, 1uLL);
    if (v200 == -1)
    {
      v203 = 0;
      v204 = 0;
      *(_OWORD *)v853 = v836;
    }
    else
    {
      if (v199 >= v200)
        v201 = v200;
      else
        v201 = v199;
      if (v199 >= v200 + 1)
        v202 = v200 + 1;
      else
        v202 = v199;
      v203 = (char *)v198 + v202 + 24;
      v204 = v199 - v202;
      *(_QWORD *)v853 = v198 + 3;
      *(_QWORD *)&v853[8] = v201;
    }
    v778 = v203;
    v781 = v204;
    *(_QWORD *)&v853[16] = v203;
    *(_QWORD *)&v853[24] = v204;
    __str.__r_.__value_.__s.__data_[0] = 32;
    v205 = llvm::StringRef::find((uint64_t *)v853, (char *)&__str, 1uLL, 0);
    if (v205 == -1)
    {
      v208 = 0;
      v796 = *(unsigned __int8 **)v853;
      __na = 0;
      v206 = *(_QWORD *)&v853[8];
    }
    else
    {
      if (*(_QWORD *)&v853[8] >= v205)
        v206 = v205;
      else
        v206 = *(_QWORD *)&v853[8];
      if (*(_QWORD *)&v853[8] >= v205 + 1)
        v207 = v205 + 1;
      else
        v207 = *(_QWORD *)&v853[8];
      v796 = *(unsigned __int8 **)v853;
      __na = (unsigned __int8 *)(*(_QWORD *)v853 + v207);
      v208 = *(_QWORD *)&v853[8] - v207;
    }
    v813 = v208;
    v209 = *(_DWORD *)&v863[32];
    if (!*(_DWORD *)&v863[32])
    {
      *(_QWORD *)&v863[32] = 0;
      *(_DWORD *)&v863[40] = 0;
      v228 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v228)
        goto LABEL_616;
      v228[16] = 2;
      *(_QWORD *)&v863[24] = v228;
      v209 = 16;
      *(_DWORD *)&v863[32] = 16;
    }
    v210 = 0;
    if (v206)
    {
      v211 = v206;
      v212 = v796;
      do
      {
        v213 = *v212++;
        v210 = 33 * v210 + v213;
        --v211;
      }
      while (v211);
    }
    v214 = v209 - 1;
    v215 = *(_QWORD **)&v863[24];
    v216 = *(_QWORD *)&v863[24] + 8 * v209 + 8;
    __s1a = (char *)*(unsigned int *)&v863[44];
    v784 = -1;
    v217 = 1;
    v218 = v210;
    while (1)
    {
      v219 = v218 & v214;
      v220 = v215[v219];
      if (!v220)
        break;
      if (v220 == -8)
      {
        if (v784 == -1)
          v221 = v218 & v214;
        else
          v221 = v784;
        v784 = v221;
      }
      else if (*(_DWORD *)(v216 + 4 * v219) == v210
             && v206 == *(_QWORD *)v220
             && (!v206 || !memcmp(v796, &__s1a[v220], v206)))
      {
        goto LABEL_389;
      }
      v218 = v217 + v219;
      ++v217;
    }
    v222 = v784;
    if (v784 == -1)
    {
      v222 = v219;
      v219 = v219;
    }
    else
    {
      v219 = v784;
    }
    *(_DWORD *)(v216 + 4 * v222) = v210;
    v220 = v215[v219];
LABEL_389:
    if (v220)
    {
      if (v220 != -8)
      {
        v230 = v813;
        goto LABEL_402;
      }
      --*(_DWORD *)&v863[40];
    }
    v223 = (char *)operator new(v206 + 17, (std::align_val_t)8uLL);
    v224 = v223;
    v225 = v223 + 16;
    if (v206)
      memcpy(v223 + 16, v796, v206);
    v225[v206] = 0;
    *(_QWORD *)v224 = v206;
    *((_DWORD *)v224 + 2) = 0;
    v215[v219] = v224;
    ++*(_DWORD *)&v863[36];
    v226 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v863[24], v219);
    v215 = *(_QWORD **)&v863[24];
    for (n = 8 * v226; ; n += 8)
    {
      v220 = *(_QWORD *)(*(_QWORD *)&v863[24] + n);
      v229 = !v220 || v220 == -8;
      v230 = v813;
      if (!v229)
        break;
    }
LABEL_402:
    v231 = *(_DWORD *)(v220 + 8);
    v232 = *(char **)v863;
    v233 = *(_DWORD *)&v863[32];
    if (!*(_DWORD *)&v863[32])
    {
      *(_QWORD *)&v863[32] = 0;
      *(_DWORD *)&v863[40] = 0;
      v253 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v253)
        goto LABEL_616;
      v215 = v253;
      v253[16] = 2;
      *(_QWORD *)&v863[24] = v253;
      v233 = 16;
      *(_DWORD *)&v863[32] = 16;
      v230 = v813;
    }
    v234 = 0;
    if (v230)
    {
      v235 = __na;
      do
      {
        v236 = *v235++;
        v234 = 33 * v234 + v236;
        --v230;
      }
      while (v230);
    }
    v776 = v232;
    v785 = v231;
    v237 = v233 - 1;
    v238 = (uint64_t)&v215[v233 + 1];
    v797 = *(unsigned int *)&v863[44];
    v239 = -1;
    v240 = 1;
    v241 = v234;
    v242 = v813;
    while (1)
    {
      v243 = v241 & v237;
      v244 = v215[v243];
      if (!v244)
        break;
      if (v244 == -8)
      {
        if (v239 == -1)
          v239 = v241 & v237;
      }
      else if (*(_DWORD *)(v238 + 4 * v243) == v234 && v242 == *(_QWORD *)v244)
      {
        if (!v242)
          goto LABEL_421;
        v245 = memcmp(__na, (const void *)(v244 + v797), v242);
        v242 = v813;
        if (!v245)
          goto LABEL_421;
      }
      v241 = v240 + v243;
      ++v240;
    }
    v246 = v239;
    if (v239 == -1)
    {
      v246 = v243;
      v243 = v243;
    }
    else
    {
      v243 = v239;
    }
    *(_DWORD *)(v238 + 4 * v246) = v234;
    v244 = v215[v243];
LABEL_421:
    if (!v244)
      goto LABEL_422;
    if (v244 == -8)
    {
      --*(_DWORD *)&v863[40];
      v242 = v813;
LABEL_422:
      v247 = (char *)operator new(v242 + 17, (std::align_val_t)8uLL);
      v248 = v813;
      v249 = v247;
      v250 = v247 + 16;
      if (v813)
      {
        memcpy(v247 + 16, __na, v813);
        v248 = v813;
      }
      v250[v248] = 0;
      *(_QWORD *)v249 = v248;
      *((_DWORD *)v249 + 2) = 0;
      v215[v243] = v249;
      ++*(_DWORD *)&v863[36];
      v251 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v863[24], v243);
      for (ii = (uint64_t *)(*(_QWORD *)&v863[24] + 8 * v251); ; ++ii)
      {
        v244 = *ii;
        if (*ii && v244 != -8)
          break;
      }
    }
    v798 = *(_DWORD *)(v244 + 8);
    __nb = (void *)v198[1];
    __s1b = (void *)v198[2];
    v814 = v869;
    if (!(_DWORD)v869)
      goto LABEL_513;
    v255 = *(_QWORD *)&v853[8];
    v256 = *(unsigned __int8 **)v853;
    v257 = 0;
    if (*(_QWORD *)&v853[8])
    {
      v258 = *(_QWORD *)&v853[8];
      v259 = *(unsigned __int8 **)v853;
      do
      {
        v260 = *v259++;
        v257 = 33 * v257 + v260;
        --v258;
      }
      while (v258);
    }
    v261 = v869 - 1;
    v262 = v868;
    v263 = v868 + 8 * v869 + 8;
    v264 = HIDWORD(v870);
    v265 = 1;
    v266 = v257;
    while (1)
    {
      v267 = v266 & v261;
      v268 = *(_QWORD **)(v262 + 8 * v267);
      if (v268 != (_QWORD *)-8)
      {
        if (!v268)
          goto LABEL_513;
        if (*(_DWORD *)(v263 + 4 * v267) == v257 && v255 == *v268)
          break;
      }
LABEL_445:
      v266 = v265 + v267;
      ++v265;
    }
    if (!v255)
    {
      if ((_DWORD)v267 == -1 || (int)v267 == v814)
        goto LABEL_513;
      v269 = 0;
LABEL_450:
      v273 = 1;
      for (jj = v269; ; jj = v275 + v273++)
      {
        v275 = jj & v261;
        v276 = *(_QWORD **)(v262 + 8 * v275);
        if (v276 != (_QWORD *)-8)
        {
          if (!v276)
            goto LABEL_460;
          if (*(_DWORD *)(v263 + 4 * v275) == v269
            && v255 == *v276
            && (!v255 || !memcmp(v256, (char *)v276 + v264, v255)))
          {
            break;
          }
        }
      }
      if ((_DWORD)v275 != -1)
        v814 = (int)v275;
LABEL_460:
      v277 = *(_QWORD *)(v262 + 8 * v814);
      v280 = *(const void **)(v277 + 8);
      v278 = v277 + 8;
      v279 = v280;
      v281 = *(_BYTE *)(v278 + 23);
      if (v281 >= 0)
        v282 = (const void *)v278;
      else
        v282 = v279;
      v283 = v798;
      v284 = __nb;
      if (!v282)
      {
        memset(&v840, 0, sizeof(v840));
        v291 = v778;
        v290 = v781;
        v292 = (size_t)__s1b;
        goto LABEL_477;
      }
      v285 = *(_QWORD *)(v278 + 8);
      v286 = v281;
      v287 = v281 & 0x7F;
      if (v286 >= 0)
        v288 = v287;
      else
        v288 = v285;
      if (v288 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1268;
      if (v288 >= 0x17)
      {
        v293 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v288 | 7) != 0x17)
          v293 = v288 | 7;
        v294 = v293 + 1;
        v289 = operator new(v293 + 1);
        v840.__r_.__value_.__r.__words[2] = v294 | 0x8000000000000000;
        v840.__r_.__value_.__r.__words[0] = (std::string::size_type)v289;
        v840.__r_.__value_.__l.__size_ = v288;
      }
      else
      {
        *((_BYTE *)&v840.__r_.__value_.__s + 23) = v288;
        v289 = &v840;
        if (!v288)
          goto LABEL_476;
      }
      memmove(v289, v282, v288);
LABEL_476:
      v291 = v778;
      v290 = v781;
      v292 = (size_t)__s1b;
      *((_BYTE *)v289 + v288) = 0;
      v284 = __nb;
LABEL_477:
      v295 = std::string::append(&v840, " ");
      v296 = v295->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v906.__r_.__value_.__l.__data_ = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
      v906.__r_.__value_.__r.__words[2] = v296;
      v295->__r_.__value_.__l.__size_ = 0;
      v295->__r_.__value_.__r.__words[2] = 0;
      v295->__r_.__value_.__r.__words[0] = 0;
      if (!v291)
      {
        v298 = 0;
        v299 = 0;
        v300 = 0;
        v838 = 0uLL;
        v839 = 0;
LABEL_488:
        v303 = v300 < 0;
        if (v300 >= 0)
          v304 = (const std::string::value_type *)&v838;
        else
          v304 = v299;
        v305 = v300 & 0x7F;
        if (v303)
          v306 = v298;
        else
          v306 = v305;
        v307 = std::string::append(&v906, v304, v306);
        v308 = v307->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v308;
        v307->__r_.__value_.__l.__size_ = 0;
        v307->__r_.__value_.__r.__words[2] = 0;
        v307->__r_.__value_.__r.__words[0] = 0;
        sub_1C5A7C7AC((uint64_t)&__str, (uint64_t)&__dst, v284, v292);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v839) < 0)
          operator delete((void *)v838);
        if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v906.__r_.__value_.__l.__data_);
        if (SHIBYTE(v840.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v840.__r_.__value_.__l.__data_);
        if (byte_1ED835287 >= 0)
          v309 = byte_1ED835287 & 0x7F;
        else
          v309 = unk_1ED835278;
        if (byte_1ED835287 >= 0)
          v310 = &qword_1ED835270;
        else
          v310 = (uint64_t *)qword_1ED835270;
        v311 = sub_1C5426790((llvm::StringMapImpl *)&v868, *(unsigned __int8 **)v853, *(size_t *)&v853[8]);
        std::string::operator=((std::string *)(*v311 + 8), &__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_527;
        v312 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_533:
        operator delete(v312);
        if (!v291)
          goto LABEL_534;
LABEL_528:
        if (v290 > 0x7FFFFFFFFFFFFFF7)
LABEL_1268:
          abort();
        if (v290 >= 0x17)
        {
          v321 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v290 | 7) != 0x17)
            v321 = v290 | 7;
          v322 = v321 + 1;
          v316 = operator new(v321 + 1);
          __str.__r_.__value_.__r.__words[2] = v322 | 0x8000000000000000;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v316;
          __str.__r_.__value_.__l.__size_ = v290;
        }
        else
        {
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v290;
          v316 = &__str;
          if (!v290)
            goto LABEL_539;
        }
        memmove(v316, v291, v290);
LABEL_539:
        v319 = v785;
        v320 = v776;
        *((_BYTE *)v316 + v290) = 0;
        v318 = __str.__r_.__value_.__r.__words[0];
        v317 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_540;
      }
      if (v290 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1268;
      if (v290 >= 0x17)
      {
        v301 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v290 | 7) != 0x17)
          v301 = v290 | 7;
        v302 = v301 + 1;
        v297 = (__int128 *)operator new(v301 + 1);
        v839 = v302 | 0x8000000000000000;
        *(_QWORD *)&v838 = v297;
        *((_QWORD *)&v838 + 1) = v290;
      }
      else
      {
        HIBYTE(v839) = v290;
        v297 = &v838;
        if (!v290)
          goto LABEL_487;
      }
      memmove(v297, v291, v290);
LABEL_487:
      *((_BYTE *)v297 + v290) = 0;
      v300 = HIBYTE(v839);
      v298 = *((_QWORD *)&v838 + 1);
      v299 = (const std::string::value_type *)v838;
      goto LABEL_488;
    }
    if (memcmp(v256, (char *)v268 + v264, v255))
      goto LABEL_445;
    if ((_DWORD)v267 != -1 && (int)v267 != v814)
    {
      v269 = 0;
      v270 = v255;
      v271 = v256;
      do
      {
        v272 = *v271++;
        v269 = 33 * v269 + v272;
        --v270;
      }
      while (v270);
      goto LABEL_450;
    }
LABEL_513:
    v291 = v778;
    if (!v778)
    {
      v904 = 0uLL;
      *(_QWORD *)&v905 = 0;
      v290 = v781;
      v309 = (size_t)__s1b;
      v310 = (uint64_t *)__nb;
      goto LABEL_524;
    }
    v290 = v781;
    if (v781 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1268;
    if (v781 >= 0x17)
    {
      v314 = (v781 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v781 | 7) != 0x17)
        v314 = v781 | 7;
      v315 = v314 + 1;
      v313 = (__int128 *)operator new(v314 + 1);
      *((_QWORD *)&v904 + 1) = v781;
      *(_QWORD *)&v905 = v315 | 0x8000000000000000;
      *(_QWORD *)&v904 = v313;
      v309 = (size_t)__s1b;
      v310 = (uint64_t *)__nb;
LABEL_522:
      memmove(v313, v778, v781);
      goto LABEL_523;
    }
    BYTE7(v905) = v781;
    v313 = &v904;
    v309 = (size_t)__s1b;
    v310 = (uint64_t *)__nb;
    if (v781)
      goto LABEL_522;
LABEL_523:
    *((_BYTE *)v313 + v781) = 0;
LABEL_524:
    sub_1C5A7C7AC((uint64_t)&__str, (uint64_t)&v904, v310, v309);
    *(_OWORD *)v899 = *(_OWORD *)v853;
    *(std::string *)&v899[16] = __str;
    sub_1C5A7C154((llvm::StringMapImpl *)&v868, *(unsigned __int8 **)v853, *(size_t *)&v853[8], (uint64_t)&v899[16]);
    if ((v899[39] & 0x80000000) != 0)
      operator delete(*(void **)&v899[16]);
    v283 = v798;
    if (SBYTE7(v905) < 0)
    {
      v312 = (void *)v904;
      goto LABEL_533;
    }
LABEL_527:
    if (v291)
      goto LABEL_528;
LABEL_534:
    v317 = 0;
    v318 = 0;
    memset(&__str, 0, sizeof(__str));
    v319 = v785;
    v320 = v776;
LABEL_540:
    v906.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v906.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7);
    memset(&__str, 0, sizeof(__str));
    v323 = &v320[120 * v319];
    v326 = (char *)*((_QWORD *)v323 + 7);
    v324 = (uint64_t **)(v323 + 56);
    v325 = v326;
    if (v326)
    {
      while (1)
      {
        while (1)
        {
          v327 = v325;
          v328 = *((_DWORD *)v325 + 8);
          if (v328 <= v283)
            break;
          v325 = *(char **)v327;
          v329 = (uint64_t **)v327;
          if (!*(_QWORD *)v327)
            goto LABEL_548;
        }
        if (v328 >= v283)
          break;
        v325 = (char *)*((_QWORD *)v327 + 1);
        if (!v325)
        {
          v329 = (uint64_t **)(v327 + 8);
          goto LABEL_548;
        }
      }
    }
    else
    {
      v329 = v324;
      v327 = (char *)v324;
LABEL_548:
      v330 = v327;
      v331 = v324 - 1;
      v327 = (char *)operator new(0x50uLL);
      *((_DWORD *)v327 + 8) = v283;
      *(_QWORD *)v327 = 0;
      *((_QWORD *)v327 + 1) = 0;
      *(_OWORD *)(v327 + 40) = 0u;
      *(_OWORD *)(v327 + 56) = 0u;
      *((_QWORD *)v327 + 9) = 0;
      *((_QWORD *)v327 + 2) = v330;
      *v329 = (uint64_t *)v327;
      v332 = (uint64_t *)**v331;
      v333 = (uint64_t *)v327;
      if (v332)
      {
        *v331 = v332;
        v333 = *v329;
      }
      sub_1C4768E74(v331[1], v333);
      v331[2] = (uint64_t *)((char *)v331[2] + 1);
    }
    if (v327[63] < 0)
      operator delete(*((void **)v327 + 5));
    v334 = v906.__r_.__value_.__r.__words[0];
    *((_QWORD *)v327 + 5) = v318;
    *((_QWORD *)v327 + 6) = v334;
    *(_QWORD *)(v327 + 55) = *(std::string::size_type *)((char *)v906.__r_.__value_.__r.__words + 7);
    v327[63] = v317;
    *((_QWORD *)v327 + 8) = v310;
    *((_QWORD *)v327 + 9) = v309;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    do
    {
      v335 = m[1];
      ++m;
      v198 = v335;
      if (v335)
        v336 = v198 + 1 == 0;
      else
        v336 = 1;
    }
    while (v336);
  }
  while (m != (unint64_t **)v773);
LABEL_123:
  v76 = *(_QWORD **)v863;
  for (kk = *(_QWORD **)&v863[8]; v76 != kk; v76 += 15)
  {
    v77 = (_QWORD *)v76[6];
    if (v77 != v76 + 7)
    {
      do
      {
        *(_DWORD *)v853 = *((_DWORD *)v77 + 8);
        if (*((char *)v77 + 63) < 0)
        {
          sub_1C47EBC30(&v853[8], (void *)v77[5], v77[6]);
        }
        else
        {
          *(_OWORD *)&v853[8] = *(_OWORD *)(v77 + 5);
          *(_QWORD *)&v853[24] = v77[7];
        }
        v854 = *((_OWORD *)v77 + 4);
        v79 = (char *)v76[10];
        v78 = v76[11];
        if ((unint64_t)v79 >= v78)
        {
          v81 = (char *)v76[9];
          v82 = (v79 - v81) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            goto LABEL_1268;
          v84 = v78 - (_QWORD)v81;
          if (v84 >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v85 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            if (v85 >> 62)
              goto LABEL_1511;
            v86 = (char *)operator new(4 * v85);
          }
          else
          {
            v86 = 0;
          }
          v87 = &v86[4 * v82];
          *(_DWORD *)v87 = *(_DWORD *)v853;
          v80 = v87 + 4;
          while (v79 != v81)
          {
            v88 = *((_DWORD *)v79 - 1);
            v79 -= 4;
            *((_DWORD *)v87 - 1) = v88;
            v87 -= 4;
          }
          v76[9] = v87;
          v76[10] = v80;
          v76[11] = &v86[4 * v85];
          if (v81)
            operator delete(v81);
        }
        else
        {
          *(_DWORD *)v79 = *(_DWORD *)v853;
          v80 = v79 + 4;
        }
        v76[10] = v80;
        v90 = (char *)v76[13];
        v89 = v76[14];
        if ((unint64_t)v90 >= v89)
        {
          v92 = (char *)v76[12];
          v93 = (v90 - v92) >> 2;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            goto LABEL_1268;
          v95 = v89 - (_QWORD)v92;
          if (v95 >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            if (v96 >> 62)
LABEL_1511:
              sub_1C4764EE4();
            v97 = (char *)operator new(4 * v96);
          }
          else
          {
            v97 = 0;
          }
          v98 = &v97[4 * v93];
          *(_DWORD *)v98 = *(_DWORD *)v853;
          v91 = v98 + 4;
          while (v90 != v92)
          {
            v99 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v98 - 1) = v99;
            v98 -= 4;
          }
          v76[12] = v98;
          v76[13] = v91;
          v76[14] = &v97[4 * v96];
          if (v92)
            operator delete(v92);
        }
        else
        {
          *(_DWORD *)v90 = *(_DWORD *)v853;
          v91 = v90 + 4;
        }
        v76[13] = v91;
        if ((v853[31] & 0x80000000) != 0)
          operator delete(*(void **)&v853[8]);
        v100 = (_QWORD *)v77[1];
        if (v100)
        {
          do
          {
            v101 = v100;
            v100 = (_QWORD *)*v100;
          }
          while (v100);
        }
        else
        {
          do
          {
            v101 = (_QWORD *)v77[2];
            v37 = *v101 == (_QWORD)v77;
            v77 = v101;
          }
          while (!v37);
        }
        v77 = v101;
      }
      while (v101 != v76 + 7);
    }
  }
  sub_1C61A8A20((uint64_t)&v892);
  if (*(char *)(v767 + 79) < 0)
  {
    sub_1C47EBC30(v827, *(void **)(v767 + 56), *(_QWORD *)(v767 + 64));
  }
  else
  {
    *(_OWORD *)v827 = *(_OWORD *)(v767 + 56);
    v828 = *(_QWORD *)(v767 + 72);
  }
  v337 = HIBYTE(v828);
  v338 = HIBYTE(v828);
  v339 = v827[1];
  v340 = HIBYTE(v828) & 0x7F;
  if (v828 >= 0)
    v341 = HIBYTE(v828) & 0x7F;
  else
    v341 = (unint64_t)v827[1];
  if (v828 < 0)
    v337 = (unint64_t)v827[1];
  if (!(v341 | v337))
  {
    if (*(char *)(v769 + 79) < 0)
    {
      sub_1C47EBC30(v853, *(void **)(v769 + 56), *(_QWORD *)(v769 + 64));
      if ((v828 & 0x8000000000000000) == 0)
      {
LABEL_575:
        v828 = *(_QWORD *)&v853[16];
        *(_OWORD *)v827 = *(_OWORD *)v853;
        v338 = v853[23];
        v339 = *(void **)&v853[8];
        v340 = v853[23] & 0x7F;
        goto LABEL_576;
      }
    }
    else
    {
      *(_OWORD *)v853 = *(_OWORD *)(v769 + 56);
      *(_QWORD *)&v853[16] = *(_QWORD *)(v769 + 72);
      if ((v828 & 0x8000000000000000) == 0)
        goto LABEL_575;
    }
    operator delete(v827[0]);
    goto LABEL_575;
  }
LABEL_576:
  v342 = __src;
  v343 = __len;
  v344 = v338 < 0;
  v345 = v827;
  if (v344)
    v345 = (void **)v827[0];
  v815 = v345;
  if (v344)
    v346 = (size_t)v339;
  else
    v346 = v340;
  v347 = *(_DWORD *)&v863[32];
  if (!*(_DWORD *)&v863[32])
  {
    *(_QWORD *)&v863[32] = 0;
    *(_DWORD *)&v863[40] = 0;
    v368 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (v368)
    {
      v368[16] = 2;
      *(_QWORD *)&v863[24] = v368;
      v347 = 16;
      *(_DWORD *)&v863[32] = 16;
      goto LABEL_582;
    }
LABEL_616:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_582:
  __nc = v342;
  v348 = 0;
  if (v346)
  {
    v349 = v346;
    v350 = v815;
    do
    {
      v351 = *(unsigned __int8 *)v350;
      v350 = (void **)((char *)v350 + 1);
      v348 = 33 * v348 + v351;
      --v349;
    }
    while (v349);
  }
  v799 = v343;
  v352 = v347 - 1;
  v353 = *(_QWORD *)&v863[24];
  v354 = *(_QWORD *)&v863[24] + 8 * v347 + 8;
  v355 = *(unsigned int *)&v863[44];
  v356 = -1;
  v357 = 1;
  v358 = v348;
  while (1)
  {
    v359 = v358 & v352;
    v360 = *(_QWORD *)(v353 + 8 * v359);
    if (!v360)
      break;
    if (v360 == -8)
    {
      if (v356 == -1)
        v356 = v358 & v352;
    }
    else if (*(_DWORD *)(v354 + 4 * v359) == v348
           && v346 == *(_QWORD *)v360
           && (!v346 || !memcmp(v815, (const void *)(v360 + v355), v346)))
    {
      goto LABEL_600;
    }
    v358 = v357 + v359;
    ++v357;
  }
  v361 = v356;
  if (v356 == -1)
  {
    v361 = v359;
    v359 = v359;
  }
  else
  {
    v359 = v356;
  }
  *(_DWORD *)(v354 + 4 * v361) = v348;
  v360 = *(_QWORD *)(v353 + 8 * v359);
LABEL_600:
  if (v360)
  {
    if (v360 == -8)
    {
      --*(_DWORD *)&v863[40];
      goto LABEL_601;
    }
    v365 = __nc;
  }
  else
  {
LABEL_601:
    v362 = (char *)operator new(v346 + 17, (std::align_val_t)8uLL);
    v363 = v362;
    v364 = v362 + 16;
    v365 = __nc;
    if (v346)
      memcpy(v362 + 16, v815, v346);
    v364[v346] = 0;
    *(_QWORD *)v363 = v346;
    *((_DWORD *)v363 + 2) = 0;
    *(_QWORD *)(v353 + 8 * v359) = v363;
    ++*(_DWORD *)&v863[36];
    v366 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v863[24], v359);
    for (mm = (uint64_t *)(*(_QWORD *)&v863[24] + 8 * v366); ; ++mm)
    {
      v360 = *mm;
      if (*mm && v360 != -8)
        break;
    }
  }
  __s1c = *(_DWORD *)(v360 + 8);
  if (!v365)
  {
    v838 = 0uLL;
    v839 = 0;
    LOBYTE(v820) = 0;
    goto LABEL_636;
  }
  if (v799 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_1268;
  if (v799 >= 0x17)
  {
    v371 = (v799 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v799 | 7) != 0x17)
      v371 = v799 | 7;
    v372 = v371 + 1;
    v370 = (__int128 *)operator new(v371 + 1);
    v839 = v372 | 0x8000000000000000;
    *(_QWORD *)&v838 = v370;
    *((_QWORD *)&v838 + 1) = v799;
    goto LABEL_633;
  }
  HIBYTE(v839) = v799;
  v370 = &v838;
  if (v799)
LABEL_633:
    memmove(v370, v365, v799);
  *((_BYTE *)v370 + v799) = 0;
  LOBYTE(v820) = 0;
  if (SHIBYTE(v839) < 0)
  {
    v373 = (void *)v838;
    sub_1C47EBC30(&v821, (void *)v838, *((unint64_t *)&v838 + 1));
    v826 = 0;
    v825 = 0u;
    v824 = 0u;
    v823 = 0u;
    operator delete(v373);
  }
  else
  {
LABEL_636:
    v821 = v838;
    v822 = v839;
    v823 = 0u;
    v824 = 0u;
    v825 = 0u;
    v826 = 0;
  }
  v837 = 0;
  *((_QWORD *)&v836 + 1) = 0;
  *(_QWORD *)&v836 = (char *)&v836 + 8;
  v374 = *(_QWORD *)v863;
  v786 = *(_QWORD *)&v863[8];
  if (*(_QWORD *)v863 == *(_QWORD *)&v863[8])
  {
    v375 = -1;
    goto LABEL_639;
  }
  v540 = 0;
  v375 = -1;
  while (2)
  {
    if (*(_DWORD *)(v374 + 8) == __s1c)
      v375 = v540;
    v541 = *(_QWORD *)(v374 + 40);
    if (byte_1ED835287 >= 0)
      v542 = &qword_1ED835270;
    else
      v542 = (uint64_t *)qword_1ED835270;
    v543 = byte_1ED835287 & 0x7F;
    if (byte_1ED835287 < 0)
      v543 = unk_1ED835278;
    if (v541 == v543 && (!v541 || !memcmp(*(const void **)(v374 + 32), v542, v541)))
    {
      v634 = 0;
      v904 = 0u;
      v905 = 0u;
      v635 = 1;
      do
      {
        v636 = v635;
        v637 = *(_QWORD *)(v374 + 8 * v634 + 16);
        v640 = *(_BYTE **)(v637 + 24);
        v638 = v637 + 24;
        v639 = v640;
        v641 = *(_BYTE *)(v638 + 23);
        v642 = v641;
        if (v641 >= 0)
          v639 = (_BYTE *)v638;
        v643 = *(_QWORD *)(v638 + 8);
        v644 = v641 & 0x7F;
        if (v642 >= 0)
          v643 = v644;
        v645 = *v639 != 10 || v643 == 0;
        v646 = !v645;
        if (!v645)
          ++v639;
        v647 = v643 - v646;
        if (v647)
        {
          v648 = 0;
          while (v639[v648] != 10)
          {
            if (v647 == ++v648)
              goto LABEL_1151;
          }
        }
        else
        {
LABEL_1151:
          v648 = -1;
        }
        v635 = 0;
        v649 = &v904 + v634;
        v650 = v647 > v648;
        if (v647 < v648)
          v648 = v647;
        v651 = &v639[v648];
        v652 = v650;
        if (v650)
          ++v651;
        *(_QWORD *)v649 = v651;
        *((_QWORD *)v649 + 1) = v647 - v648 - v652;
        v634 = 1;
      }
      while ((v636 & 1) != 0);
      v892.__r_.__value_.__r.__words[0] = (std::string::size_type)"<FONT COLOR=\"{0}\">%l</FONT><BR align=\"left\"/>";
      v892.__r_.__value_.__l.__size_ = 45;
      v892.__r_.__value_.__r.__words[2] = (std::string::size_type)&v896;
      v893 = 1;
      v894 = &off_1E8192950;
      v895 = &BeforeColour;
      v896 = &v894;
      *(_QWORD *)v853 = &v853[24];
      *(_OWORD *)&v853[8] = xmmword_1C8667FC0;
      *(_DWORD *)&v899[8] = 0;
      v900 = 0;
      v901 = 0;
      *(_QWORD *)v899 = &off_1E81A7280;
      v903 = (__int128 *)v853;
      v902 = 0;
      memset(&v899[16], 0, 24);
      sub_1C639D338((uint64_t)&v892, (llvm::raw_ostream *)v899);
      *(_QWORD *)v899 = off_1E81A6E70;
      if (v902 == 1 && *(_QWORD *)&v899[16])
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v899[16], 0x1000C8077774924);
      v845.__r_.__value_.__r.__words[0] = (std::string::size_type)"<FONT COLOR=\"{0}\">%l</FONT><BR align=\"left\"/>";
      v845.__r_.__value_.__l.__size_ = 45;
      v845.__r_.__value_.__r.__words[2] = (std::string::size_type)&v849;
      v846 = 1;
      v847 = &off_1E8192950;
      v848 = &AfterColour;
      v849 = &v847;
      *(_QWORD *)v899 = &v899[24];
      *(_OWORD *)&v899[8] = xmmword_1C8667FC0;
      LODWORD(v892.__r_.__value_.__r.__words[1]) = 0;
      LOBYTE(v895) = 0;
      v896 = 0;
      v892.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
      v898 = v899;
      v897 = 0;
      v893 = 0;
      v894 = 0;
      v892.__r_.__value_.__r.__words[2] = 0;
      sub_1C639D338((uint64_t)&v845, (llvm::raw_ostream *)&v892);
      v892.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v897 == 1 && v892.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](v892.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"<FONT COLOR=\"{0}\">%l</FONT><BR align=\"left\"/>";
      __str.__r_.__value_.__l.__size_ = 45;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v844;
      v842 = 1;
      v843[0] = &off_1E8192950;
      v843[1] = &CommonColour;
      v844 = v843;
      v892.__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      *(_OWORD *)&v892.__r_.__value_.__r.__words[1] = xmmword_1C8667FC0;
      LODWORD(v845.__r_.__value_.__r.__words[1]) = 0;
      LOBYTE(v848) = 0;
      v849 = 0;
      v845.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
      v851 = &v892;
      v850 = 0;
      v846 = 0;
      v847 = 0;
      v845.__r_.__value_.__r.__words[2] = 0;
      sub_1C639D338((uint64_t)&__str, (llvm::raw_ostream *)&v845);
      v845.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v850 == 1 && v845.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](v845.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      v653 = *(_QWORD *)(v374 + 16);
      v654 = *(_BYTE *)(v653 + 23);
      if (v654 >= 0)
        v655 = *(const void **)(v374 + 16);
      else
        v655 = *(const void **)v653;
      if (!v655)
      {
        memset(&v845, 0, sizeof(v845));
        goto LABEL_1180;
      }
      v656 = v654;
      v657 = *(_QWORD *)(v653 + 8);
      v658 = v654 & 0x7F;
      if (v656 >= 0)
        v659 = v658;
      else
        v659 = v657;
      if (v659 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1268;
      if (v659 >= 0x17)
      {
        v661 = (v659 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v659 | 7) != 0x17)
          v661 = v659 | 7;
        v662 = v661 + 1;
        v660 = operator new(v661 + 1);
        v845.__r_.__value_.__r.__words[2] = v662 | 0x8000000000000000;
        v845.__r_.__value_.__r.__words[0] = (std::string::size_type)v660;
        v845.__r_.__value_.__l.__size_ = v659;
      }
      else
      {
        *((_BYTE *)&v845.__r_.__value_.__s + 23) = v659;
        v660 = &v845;
        if (!v659)
          goto LABEL_1179;
      }
      memmove(v660, v655, v659);
LABEL_1179:
      *((_BYTE *)v660 + v659) = 0;
LABEL_1180:
      sub_1C5A79FD8(&v906, (char *)v904, *((size_t *)&v904 + 1));
      if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v663 = &v906;
      else
        v663 = (std::string *)v906.__r_.__value_.__r.__words[0];
      if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v664 = *((_BYTE *)&v906.__r_.__value_.__s + 23) & 0x7F;
      else
        v664 = v906.__r_.__value_.__l.__size_;
      sub_1C5A79FD8(&v840, (char *)v905, *((size_t *)&v905 + 1));
      if ((v840.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v666 = &v840;
      else
        v666 = (std::string *)v840.__r_.__value_.__r.__words[0];
      if ((v840.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v667 = *((_BYTE *)&v840.__r_.__value_.__s + 23) & 0x7F;
      else
        v667 = v840.__r_.__value_.__l.__size_;
      sub_1C5A7CDF0((uint64_t)&__dst, (uint64_t)v663, v664, (uint64_t)v666, v667, *(uint64_t *)v853, *(uint64_t *)&v853[8], v665, *(uint64_t *)v899, *(uint64_t *)&v899[8], (uint64_t)v892.__r_.__value_.__l.__data_, v892.__r_.__value_.__l.__size_);
      v668 = std::string::insert(&__dst, 0, ":\n<BR align=\"left\"/>");
      v669 = v668->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v668->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v669;
      v668->__r_.__value_.__l.__size_ = 0;
      v668->__r_.__value_.__r.__words[2] = 0;
      v668->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v670 = &__str;
      else
        v670 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v671 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v671 = __str.__r_.__value_.__l.__size_;
      std::string::append(&v845, (const std::string::value_type *)v670, v671);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v840.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v840.__r_.__value_.__l.__data_);
      if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v906.__r_.__value_.__l.__data_);
      llvm::Regex::Regex((uint64_t)&v906, "<FONT COLOR=\"\\w+\"></FONT>", 25, 0);
      while (1)
      {
        memset(&__str, 0, sizeof(__str));
        if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v672 = &v845;
        else
          v672 = (std::string *)v845.__r_.__value_.__r.__words[0];
        if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v673 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
        else
          v673 = v845.__r_.__value_.__l.__size_;
        llvm::Regex::sub((uint64_t)&v906, (uint64_t)"", 0, v672, v673, (uint64_t)&__str, &__dst);
        v674 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v675 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v676 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          v676 = __str.__r_.__value_.__l.__size_;
          v674 = __str.__r_.__value_.__l.__size_;
        }
        if (v676 | v674)
          break;
        v677 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v678 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v679 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v679 = __dst.__r_.__value_.__l.__size_;
        v680 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
        if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v680 = v845.__r_.__value_.__l.__size_;
        if (v679 == v680)
        {
          if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v681 = &v845;
          else
            v681 = (std::string *)v845.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__dst.__r_.__value_.__l.__data_, v681, __dst.__r_.__value_.__l.__size_))
            {
LABEL_1236:
              v835 = v845;
              memset(&v845, 0, sizeof(v845));
              if ((v677 & 0x80) == 0)
                goto LABEL_1238;
              goto LABEL_1237;
            }
          }
          else
          {
            if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F) == 0)
              goto LABEL_1236;
            v682 = &__dst;
            while (v682->__r_.__value_.__s.__data_[0] == v681->__r_.__value_.__s.__data_[0])
            {
              v682 = (std::string *)((char *)v682 + 1);
              v681 = (std::string *)((char *)v681 + 1);
              if (!--v678)
                goto LABEL_1236;
            }
          }
        }
        std::string::operator=(&v845, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      v675 = 0;
      v835 = __str;
      memset(&__str, 0, sizeof(__str));
      if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_1237:
        operator delete(__dst.__r_.__value_.__l.__data_);
        v675 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
LABEL_1238:
      if (v675 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      llvm::Regex::~Regex((llvm::Regex *)&v906);
      if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v845.__r_.__value_.__l.__data_);
      if ((uint64_t *)v892.__r_.__value_.__l.__data_ != &v893)
        free(v892.__r_.__value_.__l.__data_);
      if (*(_BYTE **)v899 != &v899[24])
        free(*(void **)v899);
      if (*(_BYTE **)v853 != &v853[24])
        free(*(void **)v853);
      goto LABEL_1082;
    }
    v544 = *(_QWORD *)(v374 + 16);
    v547 = *(char **)(v544 + 24);
    v545 = v544 + 24;
    v546 = v547;
    v548 = *(_BYTE *)(v545 + 23);
    if (v548 >= 0)
      v549 = (char *)v545;
    else
      v549 = v546;
    v550 = *(_QWORD *)(v545 + 8);
    if (v548 >= 0)
      v551 = v548 & 0x7F;
    else
      v551 = v550;
    sub_1C5A79FD8((std::string *)v853, v549, v551);
    v552 = *(_BYTE **)v853;
    if (v853[23] >= 0)
      v552 = v853;
    v553 = v853[23] & 0x7F;
    if (v853[23] < 0)
      v553 = *(_QWORD *)&v853[8];
    v554 = *v552 != 10 || v553 == 0;
    v555 = !v554;
    if (v554)
      v556 = v552;
    else
      v556 = v552 + 1;
    v557 = v553 - v555;
    if (v553 == v555)
    {
      v560 = 0;
LABEL_1007:
      v559 = -1;
    }
    else
    {
      v558 = 0;
      while (v556[v558] != 58)
      {
        if (v557 == ++v558)
        {
          v558 = -1;
          break;
        }
      }
      v559 = 0;
      if (v557 >= v558)
        v560 = v558;
      else
        v560 = v557;
      while (v556[v559] != 10)
      {
        if (v557 == ++v559)
          goto LABEL_1007;
      }
    }
    if (v557 >= v559)
      v561 = v559;
    else
      v561 = v557;
    if (v557 <= v559)
      v562 = &v556[v561];
    else
      v562 = &v556[v561 + 1];
    v563 = *(const void **)(v374 + 32);
    v818 = v561;
    __nf = v557 > v559;
    if (!v563)
    {
      memset(&__str, 0, sizeof(__str));
      goto LABEL_1025;
    }
    v564 = *(_QWORD *)(v374 + 40);
    if (v564 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1268;
    v801 = v540;
    v565 = v375;
    if (v564 >= 0x17)
    {
      v567 = (v564 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v564 | 7) != 0x17)
        v567 = v564 | 7;
      v568 = v567 + 1;
      v566 = operator new(v567 + 1);
      __str.__r_.__value_.__r.__words[2] = v568 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v566;
      __str.__r_.__value_.__l.__size_ = v564;
      goto LABEL_1023;
    }
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(_QWORD *)(v374 + 40);
    v566 = &__str;
    if (v564)
LABEL_1023:
      memmove(v566, v563, v564);
    *((_BYTE *)v566 + v564) = 0;
    v375 = v565;
    v540 = v801;
LABEL_1025:
    v569 = std::string::insert(&__str, 0, "<FONT COLOR=\"");
    v570 = v569->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v845.__r_.__value_.__l.__data_ = *(_OWORD *)&v569->__r_.__value_.__l.__data_;
    v845.__r_.__value_.__r.__words[2] = v570;
    v569->__r_.__value_.__l.__size_ = 0;
    v569->__r_.__value_.__r.__words[2] = 0;
    v569->__r_.__value_.__r.__words[0] = 0;
    v571 = std::string::append(&v845, "\">");
    v572 = v571->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v892.__r_.__value_.__l.__data_ = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
    v892.__r_.__value_.__r.__words[2] = v572;
    v571->__r_.__value_.__l.__size_ = 0;
    v571->__r_.__value_.__r.__words[2] = 0;
    v571->__r_.__value_.__r.__words[0] = 0;
    if (v560 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1268;
    if (v560 >= 0x17)
    {
      v574 = (v560 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v560 | 7) != 0x17)
        v574 = v560 | 7;
      v575 = v574 + 1;
      v573 = (__int128 *)operator new(v574 + 1);
      *((_QWORD *)&v904 + 1) = v560;
      *(_QWORD *)&v905 = v575 | 0x8000000000000000;
      *(_QWORD *)&v904 = v573;
      goto LABEL_1032;
    }
    BYTE7(v905) = v560;
    v573 = &v904;
    if (v560)
LABEL_1032:
      memmove(v573, v556, v560);
    *((_BYTE *)v573 + v560) = 0;
    if ((SBYTE7(v905) & 0x80u) == 0)
      v576 = (const std::string::value_type *)&v904;
    else
      v576 = (const std::string::value_type *)v904;
    if ((SBYTE7(v905) & 0x80u) == 0)
      v577 = BYTE7(v905) & 0x7F;
    else
      v577 = *((_QWORD *)&v904 + 1);
    v578 = std::string::append(&v892, v576, v577);
    v579 = v578->__r_.__value_.__r.__words[2];
    *(_OWORD *)v899 = *(_OWORD *)&v578->__r_.__value_.__l.__data_;
    *(_QWORD *)&v899[16] = v579;
    v578->__r_.__value_.__l.__size_ = 0;
    v578->__r_.__value_.__r.__words[2] = 0;
    v578->__r_.__value_.__r.__words[0] = 0;
    v580 = std::string::append((std::string *)v899, ":");
    v581 = v580->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v835.__r_.__value_.__l.__data_ = *(_OWORD *)&v580->__r_.__value_.__l.__data_;
    v835.__r_.__value_.__r.__words[2] = v581;
    v580->__r_.__value_.__l.__size_ = 0;
    v580->__r_.__value_.__r.__words[2] = 0;
    v580->__r_.__value_.__r.__words[0] = 0;
    if ((v899[23] & 0x80000000) != 0)
      operator delete(*(void **)v899);
    if (SBYTE7(v905) < 0)
      operator delete((void *)v904);
    if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v892.__r_.__value_.__l.__data_);
    if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v845.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v582 = v557 - v818 - __nf;
    if (v582)
    {
      while (1)
      {
        std::string::append(&v835, "<BR align=\"left\"/>");
        v583 = 0;
        while (v562[v583] != 10)
        {
          if (v582 == ++v583)
          {
            v583 = -1;
            break;
          }
        }
        v584 = v582 >= v583 ? v583 : v582;
        if (v562)
          break;
        v586 = 0;
        v587 = 0;
        v588 = 0;
        memset(v899, 0, 24);
LABEL_1068:
        v591 = v588;
        if (v588 >= 0)
          v592 = v899;
        else
          v592 = v587;
        v593 = v588 & 0x7F;
        if (v591 >= 0)
          v594 = v593;
        else
          v594 = v586;
        std::string::append(&v835, v592, v594);
        if ((v899[23] & 0x80000000) != 0)
          operator delete(*(void **)v899);
        if (v582 >= v584 + 1)
          v595 = v584 + 1;
        else
          v595 = v582;
        v562 += v595;
        v582 -= v595;
        if (!v582)
          goto LABEL_1080;
      }
      if (v584 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1268;
      if (v584 >= 0x17)
      {
        v589 = (v584 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v584 | 7) != 0x17)
          v589 = v584 | 7;
        v590 = v589 + 1;
        v585 = operator new(v589 + 1);
        *(_QWORD *)&v899[16] = v590 | 0x8000000000000000;
        *(_QWORD *)v899 = v585;
        *(_QWORD *)&v899[8] = v584;
      }
      else
      {
        v899[23] = v584;
        v585 = v899;
        if (!v584)
          goto LABEL_1067;
      }
      memmove(v585, v562, v584);
LABEL_1067:
      v585[v584] = 0;
      v588 = v899[23];
      v586 = *(_QWORD *)&v899[8];
      v587 = *(const std::string::value_type **)v899;
      goto LABEL_1068;
    }
LABEL_1080:
    std::string::append(&v835, "<BR align=\"left\"/></FONT>");
    if ((v853[23] & 0x80000000) != 0)
      operator delete(*(void **)v853);
LABEL_1082:
    *(_OWORD *)v853 = *(_OWORD *)(v374 + 32);
    v596 = *((_QWORD *)&v823 + 1);
    if (*((_QWORD *)&v823 + 1) >= (unint64_t)v824)
    {
      v598 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v823 + 1) - v823) >> 4);
      v599 = v598 + 1;
      if ((unint64_t)(v598 + 1) > 0x1745D1745D1745DLL)
        goto LABEL_1268;
      if (0x5D1745D1745D1746 * ((uint64_t)(v824 - v823) >> 4) > v599)
        v599 = 0x5D1745D1745D1746 * ((uint64_t)(v824 - v823) >> 4);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v824 - v823) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v600 = 0x1745D1745D1745DLL;
      else
        v600 = v599;
      if (v600)
      {
        if (v600 > 0x1745D1745D1745DLL)
          goto LABEL_1511;
        v601 = (char *)operator new(176 * v600);
      }
      else
      {
        v601 = 0;
      }
      v602 = (uint64_t)&v601[176 * v598];
      v603 = &v601[176 * v600];
      sub_1C5A7CC24(v602, (uint64_t)&v835, v853);
      v597 = v602 + 176;
      v604 = (char *)*((_QWORD *)&v823 + 1);
      v605 = (char *)v823;
      if (*((_QWORD *)&v823 + 1) == (_QWORD)v823)
      {
        *(_QWORD *)&v823 = v602;
        *((_QWORD *)&v823 + 1) = v602 + 176;
        *(_QWORD *)&v824 = v603;
      }
      else
      {
        v606 = 0;
        do
        {
          *(_OWORD *)(v602 + v606 - 176) = *(_OWORD *)&v604[v606 - 176];
          v607 = (_BYTE *)(v602 + v606 - 160);
          v608 = (void **)&v604[v606 - 160];
          if (v604[v606 - 137] < 0)
          {
            sub_1C47EBC30(v607, *v608, *(_QWORD *)&v604[v606 - 152]);
          }
          else
          {
            v609 = *(_OWORD *)v608;
            *(_QWORD *)(v602 + v606 - 144) = *(_QWORD *)&v604[v606 - 144];
            *(_OWORD *)v607 = v609;
          }
          v610 = v602 + v606;
          v611 = &v604[v606];
          *(_QWORD *)(v610 - 120) = 0;
          *(_OWORD *)(v610 - 136) = 0u;
          *(_OWORD *)(v610 - 136) = *(_OWORD *)&v604[v606 - 136];
          *(_QWORD *)(v610 - 120) = *(_QWORD *)&v604[v606 - 120];
          *((_QWORD *)v611 - 15) = 0;
          *(_OWORD *)(v611 - 136) = 0u;
          *(_QWORD *)(v610 - 96) = 0;
          *(_OWORD *)(v610 - 112) = 0u;
          *(_OWORD *)(v610 - 112) = *(_OWORD *)&v604[v606 - 112];
          *(_QWORD *)(v610 - 96) = *(_QWORD *)&v604[v606 - 96];
          v612 = *(_QWORD *)&v604[v606 - 88];
          *((_OWORD *)v611 - 7) = 0u;
          *((_OWORD *)v611 - 6) = 0u;
          *(_QWORD *)(v610 - 88) = v612;
          *(_QWORD *)(v610 - 80) = *(_QWORD *)&v604[v606 - 80];
          *((_QWORD *)v611 - 10) = 0;
          v613 = *(_QWORD *)&v604[v606 - 72];
          *(_QWORD *)(v602 + v606 - 72) = v613;
          v614 = *(_QWORD *)&v604[v606 - 64];
          *(_QWORD *)(v610 - 64) = v614;
          *(_DWORD *)(v610 - 56) = *(_DWORD *)&v604[v606 - 56];
          if (v614)
          {
            v615 = *(_QWORD *)(v613 + 8);
            v616 = *(_QWORD *)(v610 - 80);
            if ((v616 & (v616 - 1)) != 0)
            {
              if (v615 >= v616)
                v615 %= v616;
            }
            else
            {
              v615 &= v616 - 1;
            }
            *(_QWORD *)(v612 + 8 * v615) = v602 + v606 - 72;
            *(_QWORD *)&v604[v606 - 72] = 0;
            *(_QWORD *)&v604[v606 - 64] = 0;
          }
          v617 = *((_QWORD *)v611 - 6);
          *((_QWORD *)v611 - 6) = 0;
          *(_QWORD *)(v610 - 48) = v617;
          *(_QWORD *)(v610 - 40) = *((_QWORD *)v611 - 5);
          *((_QWORD *)v611 - 5) = 0;
          v620 = *((_QWORD *)v611 - 4);
          v618 = v611 - 32;
          v619 = v620;
          *(_QWORD *)(v610 - 32) = v620;
          v621 = v610 - 32;
          v622 = *((_QWORD *)v618 + 1);
          *(_QWORD *)(v610 - 24) = v622;
          *(_DWORD *)(v610 - 16) = *((_DWORD *)v618 + 4);
          if (v622)
          {
            v623 = *(_QWORD *)(v619 + 8);
            v624 = *(_QWORD *)(v610 - 40);
            if ((v624 & (v624 - 1)) != 0)
            {
              if (v623 >= v624)
                v623 %= v624;
            }
            else
            {
              v623 &= v624 - 1;
            }
            *(_QWORD *)(v617 + 8 * v623) = v621;
            *(_QWORD *)v618 = 0;
            *((_QWORD *)v618 + 1) = 0;
          }
          *(_BYTE *)(v602 + v606 - 8) = v604[v606 - 8];
          v606 -= 176;
        }
        while (&v604[v606] != v605);
        v625 = *((_QWORD *)&v823 + 1);
        v604 = (char *)v823;
        *(_QWORD *)&v823 = v602 + v606;
        *((_QWORD *)&v823 + 1) = v602 + 176;
        *(_QWORD *)&v824 = v603;
        if ((char *)v625 != v604)
        {
          do
          {
            v625 -= 176;
            sub_1C5A7CD10(v625);
          }
          while ((char *)v625 != v604);
          if (!v604)
            goto LABEL_1116;
LABEL_1115:
          operator delete(v604);
          goto LABEL_1116;
        }
      }
      if (!v604)
        goto LABEL_1116;
      goto LABEL_1115;
    }
    sub_1C5A7CC24(*((uint64_t *)&v823 + 1), (uint64_t)&v835, v853);
    v597 = v596 + 176;
LABEL_1116:
    *((_QWORD *)&v823 + 1) = v597;
    if (SHIBYTE(v835.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v835.__r_.__value_.__l.__data_);
    v626 = *(unsigned int *)(v374 + 8);
    v627 = (uint64_t *)*((_QWORD *)&v836 + 1);
    for (nn = (uint64_t **)&v836 + 1; ; v627 = *nn)
    {
      v629 = nn;
      if (!v627)
        break;
      while (1)
      {
        nn = (uint64_t **)v627;
        v630 = *((_DWORD *)v627 + 7);
        if (v630 > v626)
          break;
        if (v630 >= v626)
          goto LABEL_1129;
        v627 = nn[1];
        if (!v627)
        {
          v629 = nn + 1;
          goto LABEL_1125;
        }
      }
    }
LABEL_1125:
    v631 = v626 | (v540 << 32);
    v632 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v632 + 28) = v631;
    *v632 = 0;
    v632[1] = 0;
    v632[2] = (uint64_t)nn;
    *v629 = v632;
    if (*(_QWORD *)v836)
    {
      *(_QWORD *)&v836 = *(_QWORD *)v836;
      v633 = *v629;
    }
    else
    {
      v633 = v632;
    }
    sub_1C4768E74(*((uint64_t **)&v836 + 1), v633);
    ++v837;
LABEL_1129:
    v540 = (v540 + 1);
    v374 += 120;
    if (v374 != v786)
      continue;
    break;
  }
LABEL_639:
  v376 = v375;
  LOBYTE(v820) = 1;
  v378 = *((_QWORD *)&v823 + 1);
  prime = v823;
  if ((_QWORD)v823 != *((_QWORD *)&v823 + 1))
  {
    v379 = (unint64_t *)v825;
    do
    {
      if ((unint64_t)v379 >= *((_QWORD *)&v825 + 1))
      {
        v381 = (unint64_t *)*((_QWORD *)&v824 + 1);
        v382 = ((uint64_t)v379 - *((_QWORD *)&v824 + 1)) >> 3;
        v383 = v382 + 1;
        if ((unint64_t)(v382 + 1) >> 61)
          goto LABEL_1268;
        v384 = *((_QWORD *)&v825 + 1) - *((_QWORD *)&v824 + 1);
        if ((uint64_t)(*((_QWORD *)&v825 + 1) - *((_QWORD *)&v824 + 1)) >> 2 > v383)
          v383 = v384 >> 2;
        if ((unint64_t)v384 >= 0x7FFFFFFFFFFFFFF8)
          v385 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v385 = v383;
        if (v385)
        {
          if (v385 >> 61)
            goto LABEL_1511;
          v386 = (char *)operator new(8 * v385);
        }
        else
        {
          v386 = 0;
        }
        v387 = (unint64_t *)&v386[8 * v382];
        *v387 = prime;
        v380 = v387 + 1;
        if (v379 != v381)
        {
          do
          {
            v388 = *--v379;
            *--v387 = v388;
          }
          while (v379 != v381);
          v379 = v381;
        }
        *((_QWORD *)&v824 + 1) = v387;
        *(_QWORD *)&v825 = v380;
        *((_QWORD *)&v825 + 1) = &v386[8 * v385];
        if (v379)
          operator delete(v379);
      }
      else
      {
        *v379 = prime;
        v380 = v379 + 1;
      }
      *(_QWORD *)&v825 = v380;
      prime += 176;
      v379 = v380;
    }
    while (prime != v378);
  }
  v826 = *(_QWORD *)(*((_QWORD *)&v824 + 1) + 8 * v376);
  v389 = (_OWORD *)v836;
  if ((__int128 *)v836 != (__int128 *)((char *)&v836 + 8))
  {
    while (2)
    {
      v390 = *((_DWORD *)v389 + 7);
      v759 = v389;
      v761 = *((_DWORD *)v389 + 8);
      v391 = *(_QWORD *)v863 + 120 * v390;
      v760 = v823;
      v392 = *(unsigned int **)(v391 + 96);
      v770 = *(unsigned int **)(v391 + 104);
      v771 = (size_t **)v391;
      if (v392 != v770)
      {
        v393 = *(_QWORD *)v863 + 120 * v390;
        v766 = (unsigned int *)(v393 + 8);
        v394 = v823 + 176 * v761;
        v774 = (uint64_t *)(v394 + 48);
        v779 = (char **)(v394 + 56);
        v764 = (void **)(v394 + 88);
        v765 = (uint64_t *)(v394 + 40);
        v782 = (unint64_t *)(v394 + 96);
        v772 = (float *)(v394 + 120);
        v762 = (_QWORD *)(v394 + 104);
        v763 = (unint64_t *)(v394 + 112);
        v768 = (uint64_t **)(v393 + 56);
        do
        {
          v395 = *v768;
          if (!*v768)
            goto LABEL_1268;
          v396 = *v392;
          while (1)
          {
            while (1)
            {
              v397 = *((_DWORD *)v395 + 8);
              if (v397 <= v396)
                break;
              v395 = (uint64_t *)*v395;
              if (!v395)
                goto LABEL_1268;
            }
            if (v397 >= v396)
              break;
            v395 = (uint64_t *)v395[1];
            if (!v395)
              goto LABEL_1268;
          }
          *(_OWORD *)__nd = *((_OWORD *)v395 + 4);
          v816 = *v771;
          v398 = **v771;
          v399 = *(_QWORD *)(v398 + 120 * *v766 + 16);
          v400 = *(_BYTE *)(v399 + 23);
          if (v400 >= 0)
            v401 = *(const void **)(*v816 + 120 * *v766 + 16);
          else
            v401 = *(const void **)v399;
          if (!v401)
          {
            memset(&v892, 0, sizeof(v892));
            goto LABEL_687;
          }
          v402 = v400;
          v403 = *(_QWORD *)(v399 + 8);
          v404 = v400 & 0x7F;
          if (v402 >= 0)
            v405 = v404;
          else
            v405 = v403;
          if (v405 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1268;
          if (v405 >= 0x17)
          {
            v407 = (v405 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v405 | 7) != 0x17)
              v407 = v405 | 7;
            v408 = v407 + 1;
            v406 = operator new(v407 + 1);
            v892.__r_.__value_.__r.__words[2] = v408 | 0x8000000000000000;
            v892.__r_.__value_.__r.__words[0] = (std::string::size_type)v406;
            v892.__r_.__value_.__l.__size_ = v405;
          }
          else
          {
            *((_BYTE *)&v892.__r_.__value_.__s + 23) = v405;
            v406 = &v892;
            if (!v405)
              goto LABEL_686;
          }
          memmove(v406, v401, v405);
LABEL_686:
          *((_BYTE *)v406 + v405) = 0;
LABEL_687:
          v409 = std::string::append(&v892, " ");
          v410 = v409->__r_.__value_.__r.__words[2];
          *(_OWORD *)v899 = *(_OWORD *)&v409->__r_.__value_.__l.__data_;
          *(_QWORD *)&v899[16] = v410;
          v409->__r_.__value_.__l.__size_ = 0;
          v409->__r_.__value_.__r.__words[2] = 0;
          v409->__r_.__value_.__r.__words[0] = 0;
          v411 = *(_QWORD *)(*v816 + 120 * v396 + 16);
          v412 = *(_BYTE *)(v411 + 23);
          if (v412 >= 0)
            v413 = *(const void **)(*v816 + 120 * v396 + 16);
          else
            v413 = *(const void **)v411;
          if (!v413)
          {
            v419 = 0;
            v420 = 0;
            v421 = 0;
            memset(&v845, 0, sizeof(v845));
            goto LABEL_704;
          }
          v414 = v412;
          v415 = *(_QWORD *)(v411 + 8);
          v416 = v412 & 0x7F;
          if (v414 >= 0)
            v417 = v416;
          else
            v417 = v415;
          if (v417 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1268;
          if (v417 >= 0x17)
          {
            v422 = (v417 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v417 | 7) != 0x17)
              v422 = v417 | 7;
            v423 = v422 + 1;
            v418 = operator new(v422 + 1);
            v845.__r_.__value_.__r.__words[2] = v423 | 0x8000000000000000;
            v845.__r_.__value_.__r.__words[0] = (std::string::size_type)v418;
            v845.__r_.__value_.__l.__size_ = v417;
          }
          else
          {
            *((_BYTE *)&v845.__r_.__value_.__s + 23) = v417;
            v418 = &v845;
            if (!v417)
              goto LABEL_703;
          }
          memmove(v418, v413, v417);
LABEL_703:
          *((_BYTE *)v418 + v417) = 0;
          v421 = HIBYTE(v845.__r_.__value_.__r.__words[2]);
          v419 = v845.__r_.__value_.__l.__size_;
          v420 = v845.__r_.__value_.__r.__words[0];
LABEL_704:
          v424 = v421 < 0;
          if (v421 >= 0)
            v425 = &v845;
          else
            v425 = (std::string *)v420;
          v426 = v421 & 0x7F;
          if (v424)
            v427 = v419;
          else
            v427 = v426;
          v428 = std::string::append((std::string *)v899, (const std::string::value_type *)v425, v427);
          *(std::string *)v853 = *v428;
          v428->__r_.__value_.__r.__words[0] = 0;
          v428->__r_.__value_.__l.__size_ = 0;
          v428->__r_.__value_.__r.__words[2] = 0;
          if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v845.__r_.__value_.__l.__data_);
          if ((v899[23] & 0x80000000) != 0)
            operator delete(*(void **)v899);
          __s1d = (char *)v392;
          if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v892.__r_.__value_.__l.__data_);
          v429 = v853[23];
          if (v853[23] >= 0)
            v430 = v853;
          else
            v430 = *(unsigned __int8 **)v853;
          if (v853[23] >= 0)
            v431 = v853[23] & 0x7F;
          else
            v431 = *(_QWORD *)&v853[8];
          v432 = *((unsigned int *)v816 + 22);
          v800 = v398;
          v777 = *(void **)v853;
          if ((_DWORD)v432)
          {
            v787 = v853[23];
            v433 = 0;
            if (v431)
            {
              v434 = v431;
              v435 = v430;
              do
              {
                v436 = *v435++;
                v433 = 33 * v433 + v436;
                --v434;
              }
              while (v434);
            }
            v437 = v816[10];
            v438 = 1;
            v439 = v433;
            while (1)
            {
              v440 = v439 & (v432 - 1);
              v441 = *(_QWORD **)(v437 + 8 * v440);
              if (v441 != (_QWORD *)-8)
              {
                if (!v441)
                  goto LABEL_736;
                if (*(_DWORD *)(v437 + 8 * v432 + 8 + 4 * v440) == v433
                  && v431 == *v441
                  && (!v431 || !memcmp(v430, (char *)v441 + *((unsigned int *)v816 + 25), v431)))
                {
                  break;
                }
              }
              v439 = v438 + v440;
              ++v438;
            }
            if ((_DWORD)v440 != -1)
              v432 = (int)v440;
LABEL_736:
            v429 = v787;
          }
          else
          {
            v432 = 0;
            v437 = v816[10];
          }
          v442 = *(_QWORD *)(v437 + 8 * v432);
          v445 = *(_QWORD *)(v442 + 8);
          v443 = v442 + 8;
          v444 = v445;
          v446 = *(_BYTE *)(v443 + 23);
          v447 = *(_QWORD *)(v443 + 8);
          if (v429 < 0)
            operator delete(v777);
          if (v446 < 0)
            v443 = v444;
          v448 = *(_DWORD *)(v800 + 120 * v396 + 8);
          v449 = v823;
          *(_OWORD *)v899 = *(_OWORD *)__nd;
          if (!v443)
          {
            memset(v853, 0, 24);
            goto LABEL_754;
          }
          if (v446 >= 0)
            v447 = v446 & 0x7F;
          if (v447 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1268;
          if (v447 >= 0x17)
          {
            v451 = (v447 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v447 | 7) != 0x17)
              v451 = v447 | 7;
            v452 = v451 + 1;
            v450 = operator new(v451 + 1);
            *(_QWORD *)&v853[16] = v452 | 0x8000000000000000;
            *(_QWORD *)v853 = v450;
            *(_QWORD *)&v853[8] = v447;
          }
          else
          {
            v853[23] = v447;
            v450 = v853;
            if (!v447)
              goto LABEL_753;
          }
          memmove(v450, (const void *)v443, v447);
LABEL_753:
          v450[v447] = 0;
LABEL_754:
          prime = v449 + 176 * v448;
          v453 = (unint64_t)v774;
          v454 = *v774;
          if (*v774 < (unint64_t)*v779)
          {
            sub_1C5A7D908(*v774, (uint64_t)v853, prime, v899);
            v455 = v454 + 48;
            v456 = __s1d;
            v458 = v763;
            v457 = v764;
            goto LABEL_779;
          }
          v459 = 0xAAAAAAAAAAAAAAABLL * ((v454 - *v765) >> 4);
          v460 = v459 + 1;
          v456 = __s1d;
          if (v459 + 1 > 0x555555555555555)
            goto LABEL_1268;
          if (0x5555555555555556 * ((uint64_t)&(*v779)[-*v765] >> 4) > v460)
            v460 = 0x5555555555555556 * ((uint64_t)&(*v779)[-*v765] >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&(*v779)[-*v765] >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v461 = 0x555555555555555;
          else
            v461 = v460;
          if (v461)
          {
            if (v461 > 0x555555555555555)
              goto LABEL_1511;
            v462 = (char *)operator new(48 * v461);
          }
          else
          {
            v462 = 0;
          }
          v463 = (uint64_t)&v462[48 * v459];
          v464 = &v462[48 * v461];
          sub_1C5A7D908(v463, (uint64_t)v853, prime, v899);
          v455 = v463 + 48;
          v465 = (char *)*v774;
          v466 = (char *)*v765;
          if (*v774 == *v765)
          {
            *v765 = v463;
            *v774 = v455;
            *v779 = v464;
            goto LABEL_777;
          }
          do
          {
            *(_OWORD *)(v463 - 48) = *((_OWORD *)v465 - 3);
            v467 = *((_OWORD *)v465 - 2);
            *(_QWORD *)(v463 - 16) = *((_QWORD *)v465 - 2);
            *(_OWORD *)(v463 - 32) = v467;
            *((_QWORD *)v465 - 3) = 0;
            *((_QWORD *)v465 - 2) = 0;
            *((_QWORD *)v465 - 4) = 0;
            *(_QWORD *)(v463 - 8) = *((_QWORD *)v465 - 1);
            v463 -= 48;
            v465 -= 48;
          }
          while (v465 != v466);
          v465 = (char *)*v765;
          v468 = *v774;
          *v765 = v463;
          *v774 = v455;
          *v779 = v464;
          if ((char *)v468 == v465)
          {
            v453 = (unint64_t)v774;
LABEL_777:
            v458 = v763;
            v457 = v764;
            if (!v465)
              goto LABEL_779;
LABEL_778:
            operator delete(v465);
            goto LABEL_779;
          }
          v458 = v763;
          v457 = v764;
          do
          {
            if (*(char *)(v468 - 9) < 0)
              operator delete(*(void **)(v468 - 32));
            v468 -= 48;
          }
          while ((char *)v468 != v465);
          v453 = (unint64_t)v774;
          if (v465)
            goto LABEL_778;
LABEL_779:
          *(_QWORD *)v453 = v455;
          if ((v853[23] & 0x80000000) != 0)
            operator delete(*(void **)v853);
          v469 = 0x9DDFEA08EB382D69 * (((((prime >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(prime));
          v470 = 0x9DDFEA08EB382D69 * (HIDWORD(prime) ^ (v469 >> 47) ^ v469);
          v471 = 0x9DDFEA08EB382D69 * (v470 ^ (v470 >> 47));
          v472 = *v782;
          if (*v782)
          {
            v473 = (uint8x8_t)vcnt_s8((int8x8_t)v472);
            v473.i16[0] = vaddlv_u8(v473);
            if (v473.u32[0] > 1uLL)
            {
              v453 = 0x9DDFEA08EB382D69 * (v470 ^ (v470 >> 47));
              if (v471 >= v472)
                v453 = v471 % v472;
            }
            else
            {
              v453 = (v472 - 1) & v471;
            }
            v474 = (_QWORD *)*((_QWORD *)*v457 + v453);
            if (v474)
            {
              for (i1 = (_QWORD *)*v474; i1; i1 = (_QWORD *)*i1)
              {
                v476 = i1[1];
                if (v476 == v471)
                {
                  if (i1[2] == prime)
                    goto LABEL_853;
                }
                else
                {
                  if (v473.u32[0] > 1uLL)
                  {
                    if (v476 >= v472)
                      v476 %= v472;
                  }
                  else
                  {
                    v476 &= v472 - 1;
                  }
                  if (v476 != v453)
                    break;
                }
              }
            }
          }
          v477 = operator new(0x18uLL);
          *v477 = 0;
          v477[1] = v471;
          v477[2] = prime;
          v478 = (float)(*v458 + 1);
          v479 = *v772;
          if (!v472 || (float)(v479 * (float)v472) < v478)
          {
            v480 = (v472 & (v472 - 1)) != 0;
            if (v472 < 3)
              v480 = 1;
            v481 = v480 | (2 * v472);
            v482 = vcvtps_u32_f32(v478 / v479);
            if (v481 <= v482)
              prime = v482;
            else
              prime = v481;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v472 = *v782;
            if (prime <= *v782)
            {
              if (prime < *v782)
              {
                v489 = vcvtps_u32_f32((float)*v458 / *v772);
                if (v472 < 3
                  || (v490 = (uint8x8_t)vcnt_s8((int8x8_t)v472), v490.i16[0] = vaddlv_u8(v490), v490.u32[0] > 1uLL))
                {
                  v489 = std::__next_prime(v489);
                }
                else
                {
                  v491 = 1 << -(char)__clz(v489 - 1);
                  if (v489 >= 2)
                    v489 = v491;
                }
                if (prime <= v489)
                  prime = v489;
                if (prime >= v472)
                {
                  v472 = *v782;
                }
                else
                {
                  if (prime)
                    goto LABEL_809;
                  v496 = *v457;
                  *v457 = 0;
                  if (v496)
                    operator delete(v496);
                  v472 = 0;
                  v457[1] = 0;
                }
              }
            }
            else
            {
LABEL_809:
              if (prime >> 61)
                goto LABEL_1511;
              v483 = operator new(8 * prime);
              v484 = *v457;
              *v457 = v483;
              if (v484)
                operator delete(v484);
              v485 = 0;
              v457[1] = (void *)prime;
              do
                *((_QWORD *)*v457 + v485++) = 0;
              while (prime != v485);
              v486 = (_QWORD *)*v762;
              if (*v762)
              {
                v487 = v486[1];
                v488 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
                v488.i16[0] = vaddlv_u8(v488);
                if (v488.u32[0] > 1uLL)
                {
                  if (v487 >= prime)
                    v487 %= prime;
                }
                else
                {
                  v487 &= prime - 1;
                }
                *((_QWORD *)*v457 + v487) = v762;
                v492 = (_QWORD *)*v486;
                if (*v486)
                {
                  do
                  {
                    v493 = v492[1];
                    if (v488.u32[0] > 1uLL)
                    {
                      if (v493 >= prime)
                        v493 %= prime;
                    }
                    else
                    {
                      v493 &= prime - 1;
                    }
                    if (v493 != v487)
                    {
                      if (!*((_QWORD *)*v457 + v493))
                      {
                        *((_QWORD *)*v457 + v493) = v486;
                        goto LABEL_834;
                      }
                      *v486 = *v492;
                      *v492 = **((_QWORD **)*v457 + v493);
                      **((_QWORD **)*v457 + v493) = v492;
                      v492 = v486;
                    }
                    v493 = v487;
LABEL_834:
                    v486 = v492;
                    v492 = (_QWORD *)*v492;
                    v487 = v493;
                  }
                  while (v492);
                }
              }
              v472 = prime;
            }
            if ((v472 & (v472 - 1)) != 0)
            {
              if (v471 >= v472)
                v453 = v471 % v472;
              else
                v453 = v471;
            }
            else
            {
              v453 = (v472 - 1) & v471;
            }
          }
          v494 = (_QWORD *)*((_QWORD *)*v457 + v453);
          if (v494)
          {
            *v477 = *v494;
          }
          else
          {
            *v477 = *v762;
            *v762 = v477;
            *((_QWORD *)*v457 + v453) = v762;
            if (!*v477)
              goto LABEL_852;
            v495 = *(_QWORD *)(*v477 + 8);
            if ((v472 & (v472 - 1)) != 0)
            {
              if (v495 >= v472)
                v495 %= v472;
            }
            else
            {
              v495 &= v472 - 1;
            }
            v494 = (char *)*v457 + 8 * v495;
          }
          *v494 = v477;
LABEL_852:
          ++*v458;
LABEL_853:
          v392 = (unsigned int *)(v456 + 4);
        }
        while (v392 != v770);
      }
      v497 = v760 + 176 * v761;
      *(_BYTE *)(v497 + 168) = 1;
      v498 = *(_QWORD *)(v497 + 40);
      __ne = *(_QWORD *)(v497 + 48);
      if (v498 == __ne)
      {
LABEL_950:
        v534 = v759;
        v535 = (_QWORD *)*((_QWORD *)v759 + 1);
        if (v535)
        {
          do
          {
            v536 = v535;
            v535 = (_QWORD *)*v535;
          }
          while (v535);
        }
        else
        {
          do
          {
            v536 = (_OWORD *)*((_QWORD *)v534 + 2);
            v37 = *(_QWORD *)v536 == (_QWORD)v534;
            v534 = v536;
          }
          while (!v37);
        }
        v389 = v536;
        if (v536 == (__int128 *)((char *)&v836 + 8))
          goto LABEL_956;
        continue;
      }
      break;
    }
    v499 = v760 + 176 * v761;
    v500 = (void **)(v499 + 128);
    v501 = (unint64_t *)(v499 + 136);
    v502 = (unint64_t *)(v499 + 152);
    v817 = (float *)(v499 + 160);
    v503 = (_QWORD *)(v499 + 144);
    while (2)
    {
      v504 = *(_QWORD *)(v498 + 40);
      v505 = 0x9DDFEA08EB382D69 * (((8 * v504) + 8) ^ HIDWORD(v504));
      v506 = 0x9DDFEA08EB382D69 * (HIDWORD(v504) ^ (v505 >> 47) ^ v505);
      v507 = 0x9DDFEA08EB382D69 * (v506 ^ (v506 >> 47));
      v508 = *v501;
      if (*v501)
      {
        v509 = (uint8x8_t)vcnt_s8((int8x8_t)v508);
        v509.i16[0] = vaddlv_u8(v509);
        if (v509.u32[0] > 1uLL)
        {
          prime = 0x9DDFEA08EB382D69 * (v506 ^ (v506 >> 47));
          if (v507 >= v508)
            prime = v507 % v508;
        }
        else
        {
          prime = v507 & (v508 - 1);
        }
        v510 = (_QWORD *)*((_QWORD *)*v500 + prime);
        if (v510)
        {
          for (i2 = (_QWORD *)*v510; i2; i2 = (_QWORD *)*i2)
          {
            v512 = i2[1];
            if (v512 == v507)
            {
              if (i2[2] == v504)
                goto LABEL_939;
            }
            else
            {
              if (v509.u32[0] > 1uLL)
              {
                if (v512 >= v508)
                  v512 %= v508;
              }
              else
              {
                v512 &= v508 - 1;
              }
              if (v512 != prime)
                break;
            }
          }
        }
      }
      v513 = operator new(0x20uLL);
      *v513 = 0;
      v513[1] = v507;
      v513[2] = v504;
      v513[3] = v498;
      v514 = (float)(*v502 + 1);
      v515 = *v817;
      if (!v508 || (float)(v515 * (float)v508) < v514)
      {
        v516 = (v508 & (v508 - 1)) != 0;
        if (v508 < 3)
          v516 = 1;
        v517 = v516 | (2 * v508);
        v518 = vcvtps_u32_f32(v514 / v515);
        if (v517 <= v518)
          v519 = (int8x8_t)v518;
        else
          v519 = (int8x8_t)v517;
        if (*(_QWORD *)&v519 == 1)
        {
          v519 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v519 & (*(_QWORD *)&v519 - 1)) != 0)
        {
          v519 = (int8x8_t)std::__next_prime(*(_QWORD *)&v519);
        }
        v508 = *v501;
        if (*(_QWORD *)&v519 <= *v501)
        {
          if (*(_QWORD *)&v519 < *v501)
          {
            v526 = vcvtps_u32_f32((float)*v502 / *v817);
            if (v508 < 3
              || (v527 = (uint8x8_t)vcnt_s8((int8x8_t)v508), v527.i16[0] = vaddlv_u8(v527), v527.u32[0] > 1uLL))
            {
              v526 = std::__next_prime(v526);
            }
            else
            {
              v528 = 1 << -(char)__clz(v526 - 1);
              if (v526 >= 2)
                v526 = v528;
            }
            if (*(_QWORD *)&v519 <= v526)
              v519 = (int8x8_t)v526;
            if (*(_QWORD *)&v519 >= v508)
            {
              v508 = *v501;
            }
            else
            {
              if (v519)
                goto LABEL_895;
              v533 = *v500;
              *v500 = 0;
              if (v533)
                operator delete(v533);
              v508 = 0;
              v500[1] = 0;
            }
          }
        }
        else
        {
LABEL_895:
          if (*(_QWORD *)&v519 >> 61)
            goto LABEL_1511;
          v520 = operator new(8 * *(_QWORD *)&v519);
          v521 = *v500;
          *v500 = v520;
          if (v521)
            operator delete(v521);
          v522 = 0;
          v500[1] = (void *)v519;
          do
            *((_QWORD *)*v500 + v522++) = 0;
          while (*(_QWORD *)&v519 != v522);
          v523 = (_QWORD *)*v503;
          if (*v503)
          {
            v524 = v523[1];
            v525 = (uint8x8_t)vcnt_s8(v519);
            v525.i16[0] = vaddlv_u8(v525);
            if (v525.u32[0] > 1uLL)
            {
              if (v524 >= *(_QWORD *)&v519)
                v524 %= *(_QWORD *)&v519;
            }
            else
            {
              v524 &= *(_QWORD *)&v519 - 1;
            }
            *((_QWORD *)*v500 + v524) = v503;
            v529 = (_QWORD *)*v523;
            if (*v523)
            {
              while (2)
              {
                v530 = v529[1];
                if (v525.u32[0] > 1uLL)
                {
                  if (v530 >= *(_QWORD *)&v519)
                    v530 %= *(_QWORD *)&v519;
                }
                else
                {
                  v530 &= *(_QWORD *)&v519 - 1;
                }
                if (v530 == v524)
                {
LABEL_919:
                  v530 = v524;
                }
                else
                {
                  if (*((_QWORD *)*v500 + v530))
                  {
                    *v523 = *v529;
                    *v529 = **((_QWORD **)*v500 + v530);
                    **((_QWORD **)*v500 + v530) = v529;
                    v529 = v523;
                    goto LABEL_919;
                  }
                  *((_QWORD *)*v500 + v530) = v523;
                }
                v523 = v529;
                v529 = (_QWORD *)*v529;
                v524 = v530;
                if (!v529)
                  break;
                continue;
              }
            }
          }
          v508 = (unint64_t)v519;
        }
        if ((v508 & (v508 - 1)) != 0)
        {
          if (v507 >= v508)
            prime = v507 % v508;
          else
            prime = v507;
        }
        else
        {
          prime = (v508 - 1) & v507;
        }
      }
      v531 = (_QWORD *)*((_QWORD *)*v500 + prime);
      if (v531)
      {
        *v513 = *v531;
        goto LABEL_937;
      }
      *v513 = *v503;
      *v503 = v513;
      *((_QWORD *)*v500 + prime) = v503;
      if (*v513)
      {
        v532 = *(_QWORD *)(*v513 + 8);
        if ((v508 & (v508 - 1)) != 0)
        {
          if (v532 >= v508)
            v532 %= v508;
        }
        else
        {
          v532 &= v508 - 1;
        }
        v531 = (char *)*v500 + 8 * v532;
LABEL_937:
        *v531 = v513;
      }
      ++*v502;
LABEL_939:
      v498 += 48;
      if (v498 == __ne)
        goto LABEL_950;
      continue;
    }
  }
LABEL_956:
  sub_1C6143384(*((_QWORD **)&v836 + 1));
  if (v831 >= 0)
    v537 = &v829;
  else
    v537 = v829;
  if (v831 >= 0)
    v538 = v831 & 0x7F;
  else
    v538 = v830;
  LODWORD(v840.__r_.__value_.__l.__data_) = 0;
  v840.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
  v539 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v853, v537, v538, (uint64_t)&v840);
  if (!LODWORD(v840.__r_.__value_.__l.__data_))
  {
    *(_QWORD *)&v838 = &v820;
    LOWORD(v894) = 257;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v853;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v838;
    LOWORD(__dst.__r_.__value_.__r.__words[2]) = 1;
    llvm::Twine::str((llvm::Twine *)&v892, &v906);
    if (*(char *)(v838 + 31) < 0)
    {
      sub_1C47EBC30(v899, *(void **)(v838 + 8), *(_QWORD *)(v838 + 16));
    }
    else
    {
      v689 = *(_OWORD *)(v838 + 8);
      *(_QWORD *)&v899[16] = *(_QWORD *)(v838 + 24);
      *(_OWORD *)v899 = v689;
    }
    v690 = *((_BYTE *)&v906.__r_.__value_.__s + 23) & 0x7F;
    if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v690 = v906.__r_.__value_.__l.__size_;
    if (v690)
    {
      v694 = (_QWORD *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 8uLL)
      {
        *(_BYTE *)(v854 + 8) = 34;
        *v694 = *(_QWORD *)"digraph \"";
        *(_QWORD *)&v854 = v854 + 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "digraph \"", 9uLL);
      }
      v695 = &v906;
    }
    else
    {
      v691 = *(_QWORD *)&v899[8];
      if (v899[23] >= 0)
        v691 = v899[23] & 0x7F;
      v692 = (_OWORD *)v854;
      v693 = *(_QWORD *)&v853[24] - v854;
      if (!v691)
      {
        if (v693 > 0x11)
        {
          *(_WORD *)(v854 + 16) = 2683;
          *v692 = *(_OWORD *)"digraph unnamed {\n";
          *(_QWORD *)&v854 = v854 + 18;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v853, "digraph unnamed {\n", 0x12uLL);
        }
        goto LABEL_1294;
      }
      if (v693 > 8)
      {
        *(_BYTE *)(v854 + 8) = 34;
        *(_QWORD *)v692 = *(_QWORD *)"digraph \"";
        *(_QWORD *)&v854 = v854 + 9;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "digraph \"", 9uLL);
      }
      v695 = (std::string *)v899;
    }
    llvm::DOT::EscapeString((char *)v695, &v845);
    if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v696 = &v845;
    else
      v696 = (std::string *)v845.__r_.__value_.__r.__words[0];
    if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v697 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
    else
      v697 = v845.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write((llvm::raw_ostream *)v853, (const char *)v696, v697);
    if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 3uLL)
    {
      *(_DWORD *)v854 = 175841314;
      *(_QWORD *)&v854 = v854 + 4;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\" {\n", 4uLL);
    }
    if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v845.__r_.__value_.__l.__data_);
LABEL_1294:
    v698 = *((_BYTE *)&v906.__r_.__value_.__s + 23) & 0x7F;
    if ((v906.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v698 = v906.__r_.__value_.__l.__size_;
    if (v698)
    {
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 7uLL)
      {
        *(_QWORD *)v854 = 0x223D6C6562616C09;
        *(_QWORD *)&v854 = v854 + 8;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\tlabel=\"", 8uLL);
      }
      v700 = &v906;
      goto LABEL_1306;
    }
    v699 = v899[23] & 0x7F;
    if (v899[23] < 0)
      v699 = *(_QWORD *)&v899[8];
    if (v699)
    {
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 7uLL)
      {
        *(_QWORD *)v854 = 0x223D6C6562616C09;
        *(_QWORD *)&v854 = v854 + 8;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\tlabel=\"", 8uLL);
      }
      v700 = (std::string *)v899;
LABEL_1306:
      llvm::DOT::EscapeString((char *)v700, &v845);
      if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v701 = &v845;
      else
        v701 = (std::string *)v845.__r_.__value_.__r.__words[0];
      if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v702 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
      else
        v702 = v845.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write((llvm::raw_ostream *)v853, (const char *)v701, v702);
      v703 = (_WORD *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 2uLL)
      {
        *(_BYTE *)(v854 + 2) = 10;
        *v703 = 15138;
        *(_QWORD *)&v854 = v854 + 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\";\n", 3uLL);
      }
      if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v845.__r_.__value_.__l.__data_);
    }
    *((_BYTE *)&v845.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v845, "\tsize=\"190, 190\";\n");
    llvm::raw_ostream::write((llvm::raw_ostream *)v853, (const char *)&v845, 0x12uLL);
    if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v845.__r_.__value_.__l.__data_);
    if (*(_QWORD *)&v853[24] == (_QWORD)v854)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\n", 1uLL);
    }
    else
    {
      *(_BYTE *)v854 = 10;
      *(_QWORD *)&v854 = v854 + 1;
    }
    if ((v899[23] & 0x80000000) != 0)
      operator delete(*(void **)v899);
    v704 = *(void ****)(v838 + 56);
    v819 = *(void ****)(v838 + 64);
    if (v704 == v819)
    {
LABEL_1323:
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 1uLL)
      {
        *(_WORD *)v854 = 2685;
        *(_QWORD *)&v854 = v854 + 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "}\n", 2uLL);
      }
      if (SHIBYTE(v906.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v906.__r_.__value_.__l.__data_);
      v705 = v854 - *(_QWORD *)&v853[16];
      if ((_QWORD)v854 != *(_QWORD *)&v853[16])
      {
        *(_QWORD *)&v854 = *(_QWORD *)&v853[16];
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v853, *(const char **)&v853[16], v705);
      }
      llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)v853);
      goto LABEL_1330;
    }
    while (2)
    {
      v725 = *v704;
      sub_1C5A7DC38(&__str, **v704, (size_t)(*v704)[1]);
      v726 = (_DWORD *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 4uLL)
      {
        *(_BYTE *)(v854 + 4) = 101;
        *v726 = 1685016073;
        *(_QWORD *)&v854 = v854 + 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\tNode", 5uLL);
      }
      llvm::write_hex((llvm::raw_ostream *)v853, (unint64_t)v725, 3, 0, 0);
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 7uLL)
      {
        *(_QWORD *)v854 = 0x3D65706168735B20;
        v727 = v854 + 8;
        *(_QWORD *)&v854 = v854 + 8;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, " [shape=", 8uLL);
        v727 = v854;
      }
      if ((unint64_t)(*(_QWORD *)&v853[24] - v727) > 4)
      {
        *(_BYTE *)(v727 + 4) = 44;
        *(_DWORD *)v727 = 1701736302;
        *(_QWORD *)&v854 = v854 + 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "none,", 5uLL);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v728 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v728 = __str.__r_.__value_.__l.__size_;
      if (v728)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v729 = &__str;
        else
          v729 = (std::string *)__str.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, (const char *)v729, v728);
        if (*(_QWORD *)&v853[24] == (_QWORD)v854)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v853, ",", 1uLL);
        }
        else
        {
          *(_BYTE *)v854 = 44;
          *(_QWORD *)&v854 = v854 + 1;
        }
      }
      v730 = (_DWORD *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 5uLL)
      {
        *(_WORD *)(v854 + 4) = 15724;
        *v730 = 1700946284;
        *(_QWORD *)&v854 = v854 + 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "label=", 6uLL);
      }
      v731 = v725 + 13;
      v732 = -1;
      v733 = v725 + 13;
      do
      {
        v733 = (_QWORD *)*v733;
        v734 = v732 + 1;
        if (!v733)
          break;
        v37 = v732++ == 63;
      }
      while (!v37);
      if (v734 <= 1)
        v735 = 1;
      else
        v735 = v734;
      if (v733)
        v736 = v735 + 1;
      else
        v736 = v735;
      v737 = (void *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 0x30uLL)
      {
        *(_BYTE *)(v854 + 48) = 34;
        qmemcpy(v737, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0", 48);
        v738 = (void *)(v854 + 49);
        *(_QWORD *)&v854 = v854 + 49;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
        v738 = (void *)v854;
      }
      if (*(_QWORD *)&v853[24] - (_QWORD)v738 > 0x2EuLL)
      {
        qmemcpy(v738, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
        *(_QWORD *)&v854 = v854 + 47;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
      }
      sub_1C5E21910((llvm::raw_ostream *)v853, v736, 0, 0, 0);
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 1uLL)
      {
        *(_WORD *)v854 = 15906;
        *(_QWORD *)&v854 = v854 + 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "\">", 2uLL);
      }
      if (*((char *)v725 + 39) < 0)
      {
        sub_1C47EBC30(v899, v725[2], (unint64_t)v725[3]);
      }
      else
      {
        *(_OWORD *)v899 = *((_OWORD *)v725 + 1);
        *(_QWORD *)&v899[16] = v725[4];
      }
      if (v899[23] >= 0)
        v739 = v899;
      else
        v739 = *(const char **)v899;
      if (v899[23] >= 0)
        v740 = v899[23] & 0x7F;
      else
        v740 = *(_QWORD *)&v899[8];
      llvm::raw_ostream::write((llvm::raw_ostream *)v853, v739, v740);
      v741 = (_DWORD *)v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 4uLL)
      {
        *(_BYTE *)(v854 + 4) = 62;
        *v741 = 1685335868;
        *(_QWORD *)&v854 = v854 + 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "</td>", 5uLL);
      }
      if ((v899[23] & 0x80000000) != 0)
        operator delete(*(void **)v899);
      v742 = (_QWORD *)*v731;
      v904 = 0uLL;
      *(_QWORD *)&v905 = 0;
      *(_DWORD *)&v899[8] = 0;
      v900 = 0;
      v901 = 0;
      *(_QWORD *)v899 = &unk_1E81A7208;
      v903 = &v904;
      v902 = 0;
      memset(&v899[16], 0, 24);
      llvm::raw_ostream::write((llvm::raw_ostream *)v899, "</tr><tr>", 9uLL);
      if (v742)
      {
        v743 = 0;
        v744 = 0;
        do
        {
          sub_1C5A7DD2C((uint64_t)&v845, (int8x8_t *)v725, v742[2]);
          v745 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
          if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v745 = v845.__r_.__value_.__l.__size_;
          if (v745)
          {
            v746 = *(_QWORD *)&v899[32];
            if (*(_QWORD *)&v899[24] - *(_QWORD *)&v899[32] > 0x16uLL)
            {
              **(_OWORD **)&v899[32] = *(_OWORD *)"<td colspan=\"1\" port=\"s";
              *(_QWORD *)(v746 + 15) = *(_QWORD *)" port=\"s";
              *(_QWORD *)&v899[32] += 23;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v899, "<td colspan=\"1\" port=\"s", 0x17uLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)v899, v743, 0, 0, 0);
            if (*(_QWORD *)&v899[24] - *(_QWORD *)&v899[32] > 1uLL)
            {
              **(_WORD **)&v899[32] = 15906;
              *(_QWORD *)&v899[32] += 2;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v899, "\">", 2uLL);
            }
            if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v747 = &v845;
            else
              v747 = (std::string *)v845.__r_.__value_.__r.__words[0];
            if ((v845.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v748 = *((_BYTE *)&v845.__r_.__value_.__s + 23) & 0x7F;
            else
              v748 = v845.__r_.__value_.__l.__size_;
            llvm::raw_ostream::write((llvm::raw_ostream *)v899, (const char *)v747, v748);
            v749 = *(_DWORD **)&v899[32];
            if (*(_QWORD *)&v899[24] - *(_QWORD *)&v899[32] > 4uLL)
            {
              *(_BYTE *)(*(_QWORD *)&v899[32] + 4) = 62;
              *v749 = 1685335868;
              *(_QWORD *)&v899[32] += 5;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v899, "</td>", 5uLL);
            }
            v744 = 1;
          }
          if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v845.__r_.__value_.__l.__data_);
          v742 = (_QWORD *)*v742;
          if (!v742)
            break;
          v37 = v743++ == 63;
        }
        while (!v37);
        if (((v742 != 0) & v744) != 0)
        {
          v750 = *(_QWORD *)&v899[32];
          if (*(_QWORD *)&v899[24] - *(_QWORD *)&v899[32] > 0x2BuLL)
          {
            **(_OWORD **)&v899[32] = *(_OWORD *)"<td colspan=\"1\" port=\"s64\">truncated...</td>";
            qmemcpy((void *)(v750 + 16), "port=\"s64\">truncated...</td>", 28);
            *(_QWORD *)&v899[32] += 44;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v899, "<td colspan=\"1\" port=\"s64\">truncated...</td>", 0x2CuLL);
          }
          goto LABEL_1465;
        }
        if ((v744 & 1) != 0)
        {
LABEL_1465:
          v751 = *((_BYTE *)v903 + 23);
          if (v751 >= 0)
            v752 = (const char *)v903;
          else
            v752 = *(const char **)v903;
          if (v751 >= 0)
            v753 = v751 & 0x7F;
          else
            v753 = *((_QWORD *)v903 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v853, v752, v753);
        }
      }
      v754 = v854;
      if (*(_QWORD *)&v853[24] - (_QWORD)v854 > 0xDuLL)
      {
        *(_QWORD *)v854 = *(_QWORD *)"</tr></table>>";
        *(_QWORD *)(v754 + 6) = *(_QWORD *)"/table>>";
        v755 = v854 + 14;
        *(_QWORD *)&v854 = v854 + 14;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "</tr></table>>", 0xEuLL);
        v755 = v854;
      }
      if ((unint64_t)(*(_QWORD *)&v853[24] - v755) > 2)
      {
        *(_BYTE *)(v755 + 2) = 10;
        *(_WORD *)v755 = 15197;
        *(_QWORD *)&v854 = v854 + 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v853, "];\n", 3uLL);
      }
      v756 = (_QWORD *)*v731;
      if (*v731)
      {
        v757 = 0;
        do
        {
          sub_1C5A7D9A4((llvm::raw_ostream **)&__dst, (int8x8_t *)v725, v757, (uint64_t)v756);
          v756 = (_QWORD *)*v756;
          if (v757 == 63)
            break;
          ++v757;
        }
        while (v756);
        for (; v756; v756 = (_QWORD *)*v756)
          sub_1C5A7D9A4((llvm::raw_ostream **)&__dst, (int8x8_t *)v725, 64, (uint64_t)v756);
      }
      *(_QWORD *)v899 = off_1E81A6E70;
      if (v902 == 1 && *(_QWORD *)&v899[16])
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v899[16], 0x1000C8077774924);
      if (SBYTE7(v905) < 0)
        operator delete((void *)v904);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (++v704 == v819)
        goto LABEL_1323;
      continue;
    }
  }
  v683 = (llvm::raw_ostream *)llvm::errs(v539);
  v684 = v683;
  v685 = (_DWORD *)*((_QWORD *)v683 + 4);
  if (*((_QWORD *)v683 + 3) - (_QWORD)v685 > 6uLL)
  {
    *(_DWORD *)((char *)v685 + 3) = 540701295;
    *v685 = 1869771333;
    *((_QWORD *)v683 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v683, "Error: ", 7uLL);
  }
  std::error_code::message((std::string *)v899, (const std::error_code *)&v840);
  if (v899[23] >= 0)
    v686 = v899;
  else
    v686 = *(const char **)v899;
  if (v899[23] >= 0)
    v687 = v899[23] & 0x7F;
  else
    v687 = *(_QWORD *)&v899[8];
  llvm::raw_ostream::write(v684, v686, v687);
  v688 = (_BYTE *)*((_QWORD *)v684 + 4);
  if (*((_BYTE **)v684 + 3) == v688)
  {
    llvm::raw_ostream::write(v684, "\n", 1uLL);
  }
  else
  {
    *v688 = 10;
    ++*((_QWORD *)v684 + 4);
  }
  if ((v899[23] & 0x80000000) != 0)
    operator delete(*(void **)v899);
LABEL_1330:
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v853);
  v706 = *(llvm::raw_ostream **)(a1 + 40);
  if (v831 >= 0)
    v707 = &v829;
  else
    v707 = (void **)v829;
  if (v831 >= 0)
    v708 = v831 & 0x7F;
  else
    v708 = v830;
  llvm::DotCfgChangeReporter::genHTML((uint64_t)__src, __len, v707, v708, (uint64_t)v880, v881, (uint64_t)v853);
  if (v853[23] >= 0)
    v709 = v853;
  else
    v709 = *(const char **)v853;
  if (v853[23] >= 0)
    v710 = v853[23] & 0x7F;
  else
    v710 = *(_QWORD *)&v853[8];
  llvm::raw_ostream::write(v706, v709, v710);
  if ((v853[23] & 0x80000000) != 0)
    operator delete(*(void **)v853);
  LOWORD(v854) = 260;
  *(_QWORD *)v853 = &v829;
  v711 = (llvm *)llvm::sys::fs::remove((llvm::sys::fs *)v853, (const llvm::Twine *)1);
  *(_QWORD *)v899 = v711;
  *(_QWORD *)&v899[8] = v712;
  if ((_DWORD)v711)
  {
    v713 = (llvm::raw_ostream *)llvm::errs(v711);
    v714 = v713;
    v715 = (_DWORD *)*((_QWORD *)v713 + 4);
    if (*((_QWORD *)v713 + 3) - (_QWORD)v715 > 6uLL)
    {
      *(_DWORD *)((char *)v715 + 3) = 540701295;
      *v715 = 1869771333;
      *((_QWORD *)v713 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v713, "Error: ", 7uLL);
    }
    std::error_code::message((std::string *)v853, (const std::error_code *)v899);
    v716 = v853[23] >= 0 ? v853 : *(const char **)v853;
    v717 = v853[23] >= 0 ? v853[23] & 0x7F : *(_QWORD *)&v853[8];
    llvm::raw_ostream::write(v714, v716, v717);
    v718 = (_BYTE *)*((_QWORD *)v714 + 4);
    if (*((_BYTE **)v714 + 3) == v718)
    {
      llvm::raw_ostream::write(v714, "\n", 1uLL);
    }
    else
    {
      *v718 = 10;
      ++*((_QWORD *)v714 + 4);
    }
    if ((v853[23] & 0x80000000) != 0)
      operator delete(*(void **)v853);
  }
  if (*((_QWORD *)&v824 + 1))
  {
    *(_QWORD *)&v825 = *((_QWORD *)&v824 + 1);
    operator delete(*((void **)&v824 + 1));
  }
  v719 = v823;
  if ((_QWORD)v823)
  {
    v720 = *((_QWORD *)&v823 + 1);
    v721 = (void *)v823;
    if (*((_QWORD *)&v823 + 1) != (_QWORD)v823)
    {
      do
      {
        v720 -= 176;
        sub_1C5A7CD10(v720);
      }
      while (v720 != v719);
      v721 = (void *)v823;
    }
    *((_QWORD *)&v823 + 1) = v719;
    operator delete(v721);
  }
  if (SHIBYTE(v822) < 0)
    operator delete((void *)v821);
  if (SHIBYTE(v828) < 0)
    operator delete(v827[0]);
  sub_1C58F7164((uint64_t)&v868);
  if (SHIBYTE(v867) < 0)
    operator delete(v865);
  sub_1C51838C8((uint64_t)&v863[24]);
  v722 = *(_QWORD *)v863;
  if (*(_QWORD *)v863)
  {
    v723 = *(_QWORD *)&v863[8];
    v724 = *(void **)v863;
    if (*(_QWORD *)&v863[8] != *(_QWORD *)v863)
    {
      do
      {
        v723 -= 120;
        sub_1C5A7CB9C(v723);
      }
      while (v723 != v722);
      v724 = *(void **)v863;
    }
    *(_QWORD *)&v863[8] = v722;
    operator delete(v724);
  }
  if (__src != &v873)
    free(__src);
  if (v880 != v882)
    free(v880);
  if (v831 < 0)
    operator delete(v829);
  if (v883 != v885)
    free(v883);
  if (v886 != &v888)
    free(v886);
  if (v889 != &v891)
    free(v889);
}

void sub_1C5A79FD8(std::string *this, char *__src, size_t a3)
{
  size_t v3;
  unint64_t v6;
  size_t v7;
  void **p_dst;
  std::string::size_type v9;
  const std::string::value_type *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char *v18;
  int v19;
  const std::string::value_type *v20;
  void **__dst;
  size_t v22;
  unint64_t v23;

  v3 = a3;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
    goto LABEL_2;
LABEL_5:
  v6 = -1;
  while (1)
  {
    if (v3 >= v6)
      v7 = v6;
    else
      v7 = v3;
    if (!__src)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      __dst = 0;
      v22 = 0;
      v23 = 0;
      goto LABEL_20;
    }
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v7 >= 0x17)
    {
      v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v12 = v7 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v22 = v7;
      v23 = v13 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v23) = v7;
      p_dst = (void **)&__dst;
      if (!v7)
        goto LABEL_19;
    }
    memmove(p_dst, __src, v7);
LABEL_19:
    *((_BYTE *)p_dst + v7) = 0;
    v11 = HIBYTE(v23);
    v10 = (const std::string::value_type *)__dst;
    v9 = v22;
LABEL_20:
    v14 = v11;
    if (v11 >= 0)
      v15 = (const std::string::value_type *)&__dst;
    else
      v15 = v10;
    v16 = v11 & 0x7F;
    if (v14 >= 0)
      v17 = v16;
    else
      v17 = v9;
    std::string::append(this, v15, v17);
    if (SHIBYTE(v23) < 0)
      operator delete(__dst);
    if (v3 <= v6)
      break;
    v18 = &__src[v7];
    v19 = *v18;
    __src = v18 + 1;
    if (v19 == 60)
      v20 = "&lt;";
    else
      v20 = "&gt;";
    std::string::append(this, v20);
    v3 += ~v7;
    if (!v3)
      goto LABEL_5;
LABEL_2:
    v6 = 0;
    while ((__src[v6] & 0xFD) != 0x3C)
    {
      if (v3 == ++v6)
        goto LABEL_5;
    }
  }
}

uint64_t sub_1C5A7A160(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 1) == 0 && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C5A7A198(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t ***v9;
  void *v10;
  uint64_t ****v11;
  uint64_t v12;

  v4 = *a1;
  if (v4)
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 16))(&v12);
  else
    v12 = 0;
  v5 = sub_1C5A71A3C(&v12);
  v6 = v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v5)
  {
    v7 = v5 + 24;
    for (i = *(_QWORD *)(v5 + 32); i != v7; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v9 = (uint64_t ***)(i - 56);
      else
        v9 = 0;
      sub_1C5A80064(a2, v9);
    }
  }
  else
  {
    v10 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    if (v10 == &llvm::Any::TypeId<llvm::Function const*>::Id)
      v11 = (uint64_t ****)(*a1 + 8);
    else
      v11 = (uint64_t ****)(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 32) + 56);
    sub_1C5A80064(a2, *v11);
  }
}

void sub_1C5A7A29C(unsigned __int8 **a1, unsigned __int8 ***a2, char a3, uint64_t a4)
{
  unsigned __int8 **v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;
  char v19;
  unsigned __int8 *v20;
  size_t v21;
  size_t v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  size_t i;
  signed __int8 v36;
  signed __int8 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  void *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  size_t v52;
  uint64_t v53;
  int v54;
  size_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int v58;
  unsigned __int8 **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int j;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  size_t v68;
  uint64_t v69;
  int v70;
  size_t v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  int k;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 **v80;
  uint64_t v81;
  int v82;
  size_t v83;
  unsigned __int8 *v84;
  int v85;
  unsigned int v86;
  unsigned __int8 **v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int m;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned __int8 **v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  size_t v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned __int8 ***v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned __int8 **v114;
  int v115;
  signed __int8 v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  size_t v119;
  unint64_t v120;
  uint64_t *v121;
  unsigned __int8 **v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _QWORD v128[3];
  _BYTE v129[44];
  int v130;
  void *__p;
  char v132;
  int v133;
  __int128 v134;
  uint64_t v135;
  __int128 __dst;
  uint64_t v137;
  void **v138[4];
  unsigned __int8 *v139;
  uint64_t (*v140)();
  _QWORD *v141;

  v4 = a1;
  if ((a3 & 1) == 0)
  {
    v5 = (uint64_t *)a1[3];
    if (*((_DWORD *)a1 + 8))
    {
      while (1)
      {
        v6 = *v5;
        if (*v5 && v6 != -8)
          break;
        ++v5;
      }
    }
    else
    {
      v6 = *v5;
    }
    v8 = a2[3];
    if (*((_DWORD *)a2 + 8))
    {
      while (1)
      {
        v9 = *v8;
        if (*v8 && v9 + 8 != 0)
          break;
        ++v8;
      }
    }
    else
    {
      v9 = *v8;
    }
    LOBYTE(v138[0]) = 0;
    *(_DWORD *)v129 = 0;
    v11 = *(_QWORD *)(a4 + 24);
    if (v11)
    {
      (*(void (**)(uint64_t, void ***, _BYTE *, uint64_t, unsigned __int8 *))(*(_QWORD *)v11 + 48))(v11, v138, v129, v6 + 8, v9 + 8);
    }
    else
    {
      sub_1C485C2F0();
      llvm::DotCfgChangeReporter::omitAfter(v106, v107, v108, v109);
    }
    return;
  }
  v133 = 0;
  memset(v129, 0, sizeof(v129));
  v130 = 88;
  __p = 0;
  v132 = 0;
  v128[0] = v129;
  v128[1] = a4;
  v128[2] = &v133;
  v140 = sub_1C63069B4;
  v141 = v128;
  v12 = *a1;
  v112 = a1[1];
  v14 = *a2;
  v13 = a2[1];
  v138[0] = (void **)(a2 + 3);
  v138[1] = (void **)&v140;
  v138[2] = (void **)(a1 + 3);
  v138[3] = (void **)&v139;
  v139 = v12;
  v114 = v13;
  if (v14 == v13)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_159;
  }
  v110 = (uint64_t *)(a1 + 3);
  v111 = a2 + 3;
  v17 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v120 = (unint64_t)v17;
    v121 = v15;
    v18 = v16;
LABEL_24:
    v19 = *((_BYTE *)v14 + 23);
    v115 = v19;
    if (v19 >= 0)
      v20 = (unsigned __int8 *)v14;
    else
      v20 = *v14;
    v21 = v19 & 0x7F;
    v118 = v14[1];
    if (v115 >= 0)
      v22 = v21;
    else
      v22 = (size_t)v14[1];
    v122 = v14;
    v123 = *((unsigned int *)v4 + 8);
    if ((_DWORD)v123)
    {
      v23 = 0;
      if (v22)
      {
        v24 = v22;
        v25 = v20;
        v26 = a1;
        do
        {
          v27 = *v25++;
          v23 = 33 * v23 + v27;
          --v24;
        }
        while (v24);
      }
      else
      {
        v26 = a1;
      }
      v28 = v26[3];
      v29 = *((unsigned int *)v26 + 11);
      v30 = 1;
      v31 = v23;
      while (1)
      {
        v32 = v31 & (v123 - 1);
        v33 = *(_QWORD **)&v28[8 * v32];
        if (v33 != (_QWORD *)-8)
        {
          if (!v33)
            goto LABEL_116;
          if (*(_DWORD *)&v28[8 * v123 + 8 + 4 * v32] == v23
            && v22 == *v33
            && (!v22 || !memcmp(v20, (char *)v33 + v29, v22)))
          {
            break;
          }
        }
        v31 = v30 + v32;
        ++v30;
      }
      if ((_DWORD)v32 != -1 && (int)v32 != v123)
      {
        v34 = v139;
        v15 = v121;
        v36 = v115;
        for (i = (size_t)v118; ; i = (size_t)v122[1])
        {
          v37 = v34[23];
          v38 = *((_QWORD *)v34 + 1);
          v39 = v37 & 0x7F;
          if (v37 >= 0)
            v40 = v37 & 0x7F;
          else
            v40 = *((_QWORD *)v34 + 1);
          v41 = v36 & 0x7F;
          if (v36 >= 0)
            v42 = v36 & 0x7F;
          else
            v42 = i;
          if (v40 == v42)
          {
            v43 = *v122;
            if (v36 >= 0)
              v44 = (unsigned __int8 *)v122;
            else
              v44 = *v122;
            if ((v34[23] & 0x80) != 0)
            {
              v46 = *(void **)v34;
              if (!memcmp(*(const void **)v34, v44, *((_QWORD *)v34 + 1)))
              {
LABEL_69:
                v48 = v121;
                if (v121 != v18)
                {
                  do
                  {
                    v49 = *v48++;
                    ((void (*)(_QWORD *, _QWORD, uint64_t))v140)(v141, 0, v49);
                  }
                  while (v48 != v18);
                  v43 = *v122;
                  i = (size_t)v122[1];
                  v41 = *((_BYTE *)v122 + 23) & 0x7F;
                  v36 = *((_BYTE *)v122 + 23);
                }
                v50 = v36;
                if (v36 >= 0)
                  v51 = (unsigned __int8 *)v122;
                else
                  v51 = v43;
                if (v36 >= 0)
                  v52 = v41;
                else
                  v52 = i;
                v53 = *((unsigned int *)a2 + 8);
                if ((_DWORD)v53)
                {
                  v116 = v36;
                  v119 = i;
                  v124 = v36;
                  v54 = 0;
                  if (v52)
                  {
                    v55 = v52;
                    v56 = v51;
                    do
                    {
                      v57 = *v56++;
                      v54 = 33 * v54 + v57;
                      --v55;
                    }
                    while (v55);
                  }
                  v58 = v53 - 1;
                  v59 = a2[3];
                  v113 = *((unsigned int *)a2 + 8);
                  v60 = (uint64_t)&v59[v53 + 1];
                  v61 = *((unsigned int *)a2 + 11);
                  v62 = 1;
                  for (j = v54; ; j = v64 + v62++)
                  {
                    v64 = j & v58;
                    v65 = v59[v64];
                    if (v65 != (unsigned __int8 *)-8)
                    {
                      if (!v65)
                        goto LABEL_93;
                      if (*(_DWORD *)(v60 + 4 * v64) == v54
                        && v52 == *(_QWORD *)v65
                        && (!v52 || !memcmp(v51, &v65[v61], v52)))
                      {
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v64 != -1)
                  {
                    v66 = (int)v64;
                    v4 = a1;
                    v36 = v116;
                    i = v119;
                    v50 = v124;
                    goto LABEL_94;
                  }
LABEL_93:
                  v4 = a1;
                  v36 = v116;
                  i = v119;
                  v50 = v124;
                  v66 = v113;
                }
                else
                {
                  v66 = 0;
                  v59 = *v111;
                  v4 = a1;
                }
LABEL_94:
                v67 = v59[v66];
                if (v50 >= 0)
                  v68 = v36 & 0x7F;
                else
                  v68 = i;
                v69 = *((unsigned int *)v4 + 8);
                if ((_DWORD)v69)
                {
                  v117 = v67;
                  v70 = 0;
                  if (v68)
                  {
                    v71 = v68;
                    v72 = v51;
                    do
                    {
                      v73 = *v72++;
                      v70 = 33 * v70 + v73;
                      --v71;
                    }
                    while (v71);
                  }
                  v74 = v4[3];
                  v75 = *((unsigned int *)v4 + 11);
                  v76 = 1;
                  for (k = v70; ; k = v78 + v76++)
                  {
                    v78 = k & (v69 - 1);
                    v79 = *(_QWORD **)&v74[8 * v78];
                    if (v79 != (_QWORD *)-8)
                    {
                      if (!v79)
                        goto LABEL_111;
                      if (*(_DWORD *)&v74[8 * v69 + 8 + 4 * v78] == v70
                        && v68 == *v79
                        && (!v68 || !memcmp(v51, (char *)v79 + v75, v68)))
                      {
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v78 != -1)
                    v69 = (int)v78;
LABEL_111:
                  v15 = v121;
                  v80 = v122;
                  v4 = a1;
                  v67 = v117;
                }
                else
                {
                  v69 = 0;
                  v74 = (unsigned __int8 *)*v110;
                  v80 = v122;
                }
                ((void (*)(_QWORD *, uint64_t, unsigned __int8 *))v140)(v141, *(_QWORD *)&v74[8 * v69] + 8, v67 + 8);
                v12 = v139 + 24;
                v139 += 24;
                v14 = v80 + 3;
                v18 = v15;
                if (v14 == v114)
                {
                  v16 = v15;
                  goto LABEL_159;
                }
                goto LABEL_24;
              }
              goto LABEL_62;
            }
            if ((v37 & 0x7F) == 0)
              goto LABEL_69;
            v45 = v34;
            while (*v45 == *v44)
            {
              ++v45;
              ++v44;
              if (!--v39)
                goto LABEL_69;
            }
          }
          if ((v34[23] & 0x80) != 0)
          {
            v46 = *(void **)v34;
LABEL_62:
            sub_1C47EBC30(&__dst, v46, v38);
            goto LABEL_63;
          }
          v47 = *(_OWORD *)v34;
          v137 = *((_QWORD *)v34 + 2);
          __dst = v47;
LABEL_63:
          sub_1C630669C((uint64_t)v138, (uint64_t *)&__dst);
          if (SHIBYTE(v137) < 0)
            operator delete((void *)__dst);
          v34 = v139 + 24;
          v139 += 24;
          v36 = *((_BYTE *)v122 + 23);
        }
      }
    }
LABEL_116:
    v81 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v81)
    {
      v82 = 0;
      if (v22)
      {
        v83 = v22;
        v84 = v20;
        do
        {
          v85 = *v84++;
          v82 = 33 * v82 + v85;
          --v83;
        }
        while (v83);
      }
      v86 = v81 - 1;
      v87 = a2[3];
      v125 = *((unsigned int *)a2 + 8);
      v88 = (uint64_t)&v87[v81 + 1];
      v89 = *((unsigned int *)a2 + 11);
      v90 = 1;
      for (m = v82; ; m = v92 + v90++)
      {
        v92 = m & v86;
        v93 = v87[v92];
        if (v93 != (unsigned __int8 *)-8)
        {
          if (!v93)
            goto LABEL_131;
          if (*(_DWORD *)(v88 + 4 * v92) == v82 && v22 == *(_QWORD *)v93 && (!v22 || !memcmp(v20, &v93[v89], v22)))
            break;
        }
      }
      if ((_DWORD)v92 != -1)
      {
        v94 = (int)v92;
        goto LABEL_130;
      }
LABEL_131:
      v15 = v121;
      v95 = v122;
      v94 = v125;
    }
    else
    {
      v94 = 0;
      v87 = *v111;
LABEL_130:
      v15 = v121;
      v95 = v122;
    }
    v4 = a1;
    v96 = (uint64_t)(v87[v94] + 8);
    v17 = (char *)v120;
    if ((unint64_t)v18 >= v120)
    {
      v97 = v18 - v15;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 61)
        abort();
      if ((uint64_t)(v120 - (_QWORD)v15) >> 2 > v98)
        v98 = (uint64_t)(v120 - (_QWORD)v15) >> 2;
      if (v120 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v99 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v99 = v98;
      if (v99)
      {
        if (v99 >> 61)
          sub_1C4764EE4();
        v100 = (char *)operator new(8 * v99);
      }
      else
      {
        v100 = 0;
      }
      v101 = (uint64_t *)&v100[8 * v97];
      *v101 = v96;
      v16 = v101 + 1;
      while (v18 != v15)
      {
        v102 = *--v18;
        *--v101 = v102;
      }
      v17 = &v100[8 * v99];
      if (v15)
        operator delete(v15);
      v15 = v101;
    }
    else
    {
      *v18 = v96;
      v16 = v18 + 1;
    }
    v14 = v95 + 3;
  }
  while (v14 != v114);
  v12 = v139;
LABEL_159:
  while (v12 != v112)
  {
    if ((char)v12[23] < 0)
    {
      sub_1C47EBC30(&v134, *(void **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v103 = *(_OWORD *)v12;
      v135 = *((_QWORD *)v12 + 2);
      v134 = v103;
    }
    sub_1C630669C((uint64_t)v138, (uint64_t *)&v134);
    if (SHIBYTE(v135) < 0)
      operator delete((void *)v134);
    v12 = v139 + 24;
    v139 += 24;
  }
  if (v15 != v16)
  {
    v104 = v15;
    do
    {
      v105 = *v104++;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v140)(v141, 0, v105);
    }
    while (v104 != v16);
  }
  if (v15)
    operator delete(v15);
  if (v132 < 0)
    operator delete(__p);
  sub_1C630553C((uint64_t)&v129[24]);
  v138[0] = (void **)v129;
  sub_1C4765410(v138);
}

void llvm::DotCfgChangeReporter::omitAfter(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  char v8;
  std::string v9;
  _QWORD v10[4];
  _QWORD v11[2];
  void *v12;
  void *__p;
  _BYTE v14[15];
  char v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t (**v18)();
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  char *v27;
  __int128 v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 36;
  sub_1C5A79FD8(&v9, a2, a3);
  *(_QWORD *)v14 = v9.__r_.__value_.__l.__size_;
  v7 = (void *)v9.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v14[7] = *(std::string::size_type *)((char *)&v9.__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  memset(&v9, 0, sizeof(v9));
  v10[0] = "  <a>{0}. Pass {1} on {2} omitted because no change</a><br/>\n";
  v10[1] = 61;
  v10[2] = v17;
  v10[3] = 3;
  v11[0] = &unk_1E8168E30;
  v11[1] = v6;
  v12 = &unk_1E816A788;
  __p = v7;
  v15 = v8;
  v16[0] = &unk_1E816A5D0;
  v16[1] = a4;
  v17[0] = v11;
  v17[1] = &v12;
  v17[2] = v16;
  v27 = (char *)v29;
  v28 = xmmword_1C69DD250;
  v19 = 0;
  v23 = 0;
  v24 = 0;
  v18 = &off_1E81A7280;
  v26 = (void **)&v27;
  v25 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  sub_1C639D338((uint64_t)v10, (llvm::raw_ostream *)&v18);
  v18 = (uint64_t (**)())off_1E81A6E70;
  if (v25 == 1 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8077774924);
  v12 = &unk_1E816A788;
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v27, v28);
  ++*(_DWORD *)(a1 + 36);
  if (v27 != (char *)v29)
    free(v27);
}

void llvm::DotCfgChangeReporter::handleInvalidated(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v4;
  void *v5;
  char v6;
  std::string v7;
  _QWORD v8[4];
  _QWORD v9[2];
  void *v10;
  void *__p;
  _BYTE v12[15];
  char v13;
  _QWORD v14[2];
  uint64_t (**v15)();
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  char *v24;
  __int128 v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 36;
  sub_1C5A79FD8(&v7, a2, a3);
  *(_QWORD *)v12 = v7.__r_.__value_.__l.__size_;
  v5 = (void *)v7.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v12[7] = *(std::string::size_type *)((char *)&v7.__r_.__value_.__r.__words[1] + 7);
  v6 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  memset(&v7, 0, sizeof(v7));
  v8[0] = "  <a>{0}. {1} invalidated</a><br/>\n";
  v8[1] = 35;
  v8[2] = v14;
  v8[3] = 2;
  v9[0] = &unk_1E8168E30;
  v9[1] = v4;
  v10 = &unk_1E816A788;
  __p = v5;
  v13 = v6;
  v14[0] = v9;
  v14[1] = &v10;
  v24 = (char *)v26;
  v25 = xmmword_1C69DD250;
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v15 = &off_1E81A7280;
  v23 = (void **)&v24;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  sub_1C639D338((uint64_t)v8, (llvm::raw_ostream *)&v15);
  v15 = (uint64_t (**)())off_1E81A6E70;
  if (v22 == 1 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
  v10 = &unk_1E816A788;
  if (v13 < 0)
    operator delete(__p);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v24, v25);
  ++*(_DWORD *)(a1 + 36);
  if (v24 != (char *)v26)
    free(v24);
}

void llvm::DotCfgChangeReporter::handleFiltered(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  char v8;
  std::string v9;
  _QWORD v10[4];
  _QWORD v11[2];
  void *v12;
  void *__p;
  _BYTE v14[15];
  char v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t (**v18)();
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  char *v27;
  __int128 v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 36;
  sub_1C5A79FD8(&v9, a2, a3);
  *(_QWORD *)v14 = v9.__r_.__value_.__l.__size_;
  v7 = (void *)v9.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v14[7] = *(std::string::size_type *)((char *)&v9.__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  memset(&v9, 0, sizeof(v9));
  v10[0] = "  <a>{0}. Pass {1} on {2} filtered out</a><br/>\n";
  v10[1] = 48;
  v10[2] = v17;
  v10[3] = 3;
  v11[0] = &unk_1E8168E30;
  v11[1] = v6;
  v12 = &unk_1E816A788;
  __p = v7;
  v15 = v8;
  v16[0] = &unk_1E816A5D0;
  v16[1] = a4;
  v17[0] = v11;
  v17[1] = &v12;
  v17[2] = v16;
  v27 = (char *)v29;
  v28 = xmmword_1C69DD250;
  v19 = 0;
  v23 = 0;
  v24 = 0;
  v18 = &off_1E81A7280;
  v26 = (void **)&v27;
  v25 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  sub_1C639D338((uint64_t)v10, (llvm::raw_ostream *)&v18);
  v18 = (uint64_t (**)())off_1E81A6E70;
  if (v25 == 1 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8077774924);
  v12 = &unk_1E816A788;
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v27, v28);
  ++*(_DWORD *)(a1 + 36);
  if (v27 != (char *)v29)
    free(v27);
}

void llvm::DotCfgChangeReporter::handleIgnored(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  char v8;
  std::string v9;
  _QWORD v10[4];
  _QWORD v11[2];
  void *v12;
  void *__p;
  _BYTE v14[15];
  char v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t (**v18)();
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  char *v27;
  __int128 v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 36;
  sub_1C5A79FD8(&v9, a2, a3);
  *(_QWORD *)v14 = v9.__r_.__value_.__l.__size_;
  v7 = (void *)v9.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v14[7] = *(std::string::size_type *)((char *)&v9.__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  memset(&v9, 0, sizeof(v9));
  v10[0] = "  <a>{0}. {1} on {2} ignored</a><br/>\n";
  v10[1] = 38;
  v10[2] = v17;
  v10[3] = 3;
  v11[0] = &unk_1E8168E30;
  v11[1] = v6;
  v12 = &unk_1E816A788;
  __p = v7;
  v15 = v8;
  v16[0] = &unk_1E816A5D0;
  v16[1] = a4;
  v17[0] = v11;
  v17[1] = &v12;
  v17[2] = v16;
  v27 = (char *)v29;
  v28 = xmmword_1C69DD250;
  v19 = 0;
  v23 = 0;
  v24 = 0;
  v18 = &off_1E81A7280;
  v26 = (void **)&v27;
  v25 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  sub_1C639D338((uint64_t)v10, (llvm::raw_ostream *)&v18);
  v18 = (uint64_t (**)())off_1E81A6E70;
  if (v25 == 1 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8077774924);
  v12 = &unk_1E816A788;
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), v27, v28);
  ++*(_DWORD *)(a1 + 36);
  if (v27 != (char *)v29)
    free(v27);
}

BOOL llvm::DotCfgChangeReporter::initializeHTML(llvm::DotCfgChangeReporter *this)
{
  size_t v2;
  void **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::raw_ostream *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  void *__p[2];
  char v39;
  int v40;
  const std::error_category *v41;

  v40 = 0;
  v41 = std::system_category();
  if (byte_1ED83536F >= 0)
    v2 = byte_1ED83536F & 0x7F;
  else
    v2 = qword_1ED835360;
  sub_1C484371C((uint64_t)__p, v2 + 12);
  if (v39 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v2)
  {
    if (byte_1ED83536F >= 0)
      v4 = &qword_1ED835358;
    else
      v4 = (uint64_t *)qword_1ED835358;
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "/passes.html");
  v5 = operator new();
  v6 = v5;
  if (v39 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v39 >= 0)
    v8 = v39 & 0x7F;
  else
    v8 = (uint64_t)__p[1];
  llvm::raw_fd_ostream::raw_fd_ostream(v5, v7, v8, (uint64_t)&v40);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v39 < 0)
    operator delete(__p[0]);
  v10 = v40;
  v11 = (llvm::raw_ostream *)*((_QWORD *)this + 5);
  if (v40)
  {
    *((_QWORD *)this + 5) = 0;
    if (v11)
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v12 = (void *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0xEuLL)
    {
      qmemcpy(v12, "<!doctype html>", 15);
      v13 = *((_QWORD *)v11 + 4) + 15;
      *((_QWORD *)v11 + 4) = v13;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "<!doctype html>", 0xFuLL);
      v13 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v13) > 5)
    {
      *(_WORD *)(v13 + 4) = 15980;
      *(_DWORD *)v13 = 1836345404;
      v14 = *((_QWORD *)v11 + 4) + 6;
      *((_QWORD *)v11 + 4) = v14;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "<html>", 6uLL);
      v14 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v14) > 5)
    {
      *(_WORD *)(v14 + 4) = 15972;
      *(_DWORD *)v14 = 1634035772;
      v15 = (void *)(*((_QWORD *)v11 + 4) + 6);
      *((_QWORD *)v11 + 4) = v15;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "<head>", 6uLL);
      v15 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v15 > 0x15uLL)
    {
      qmemcpy(v15, "<style>.collapsible { ", 22);
      v16 = (void *)(*((_QWORD *)v11 + 4) + 22);
      *((_QWORD *)v11 + 4) = v16;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "<style>.collapsible { ", 0x16uLL);
      v16 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v16 > 0x16uLL)
    {
      qmemcpy(v16, "background-color: #777;", 23);
      v17 = (void *)(*((_QWORD *)v11 + 4) + 23);
      *((_QWORD *)v11 + 4) = v17;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "background-color: #777;", 0x17uLL);
      v17 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v17 > 0xDuLL)
    {
      qmemcpy(v17, " color: white;", 14);
      v18 = *((_QWORD *)v11 + 4) + 14;
      *((_QWORD *)v11 + 4) = v18;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " color: white;", 0xEuLL);
      v18 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v18) > 0x10)
    {
      *(_BYTE *)(v18 + 16) = 59;
      *(_OWORD *)v18 = *(_OWORD *)" cursor: pointer;";
      v19 = (void *)(*((_QWORD *)v11 + 4) + 17);
      *((_QWORD *)v11 + 4) = v19;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " cursor: pointer;", 0x11uLL);
      v19 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v19 > 0xEuLL)
    {
      qmemcpy(v19, " padding: 18px;", 15);
      v20 = (void *)(*((_QWORD *)v11 + 4) + 15);
      *((_QWORD *)v11 + 4) = v20;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " padding: 18px;", 0xFuLL);
      v20 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v20 > 0xCuLL)
    {
      qmemcpy(v20, " width: 100%;", 13);
      v21 = (void *)(*((_QWORD *)v11 + 4) + 13);
      *((_QWORD *)v11 + 4) = v21;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " width: 100%;", 0xDuLL);
      v21 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v21 > 0xDuLL)
    {
      qmemcpy(v21, " border: none;", 14);
      v22 = *((_QWORD *)v11 + 4) + 14;
      *((_QWORD *)v11 + 4) = v22;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " border: none;", 0xEuLL);
      v22 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v22) > 0x11)
    {
      *(_WORD *)(v22 + 16) = 15220;
      *(_OWORD *)v22 = *(_OWORD *)" text-align: left;";
      v23 = (void *)(*((_QWORD *)v11 + 4) + 18);
      *((_QWORD *)v11 + 4) = v23;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " text-align: left;", 0x12uLL);
      v23 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v23 > 0xEuLL)
    {
      qmemcpy(v23, " outline: none;", 15);
      v24 = *((_QWORD *)v11 + 4) + 15;
      *((_QWORD *)v11 + 4) = v24;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " outline: none;", 0xFuLL);
      v24 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v24) > 0x10)
    {
      *(_BYTE *)(v24 + 16) = 59;
      *(_OWORD *)v24 = *(_OWORD *)" font-size: 15px;";
      v25 = (void *)(*((_QWORD *)v11 + 4) + 17);
      *((_QWORD *)v11 + 4) = v25;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " font-size: 15px;", 0x11uLL);
      v25 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v25 > 0x1EuLL)
    {
      qmemcpy(v25, "} .active, .collapsible:hover {", 31);
      v26 = (void *)(*((_QWORD *)v11 + 4) + 31);
      *((_QWORD *)v11 + 4) = v26;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "} .active, .collapsible:hover {", 0x1FuLL);
      v26 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v26 > 0x17uLL)
    {
      qmemcpy(v26, " background-color: #555;", 24);
      v27 = *((_QWORD *)v11 + 4) + 24;
      *((_QWORD *)v11 + 4) = v27;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " background-color: #555;", 0x18uLL);
      v27 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v27) > 0xB)
    {
      *(_DWORD *)(v27 + 8) = 2065724526;
      *(_QWORD *)v27 = *(_QWORD *)"} .content {";
      v28 = *((_QWORD *)v11 + 4) + 12;
      *((_QWORD *)v11 + 4) = v28;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "} .content {", 0xCuLL);
      v28 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v28) > 0x10)
    {
      *(_BYTE *)(v28 + 16) = 59;
      *(_OWORD *)v28 = *(_OWORD *)" padding: 0 18px;";
      v29 = (void *)(*((_QWORD *)v11 + 4) + 17);
      *((_QWORD *)v11 + 4) = v29;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " padding: 0 18px;", 0x11uLL);
      v29 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v29 > 0xEuLL)
    {
      qmemcpy(v29, " display: none;", 15);
      v30 = *((_QWORD *)v11 + 4) + 15;
      *((_QWORD *)v11 + 4) = v30;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " display: none;", 0xFuLL);
      v30 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v30) > 0x11)
    {
      *(_WORD *)(v30 + 16) = 15214;
      *(_OWORD *)v30 = *(_OWORD *)" overflow: hidden;";
      v31 = (void *)(*((_QWORD *)v11 + 4) + 18);
      *((_QWORD *)v11 + 4) = v31;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " overflow: hidden;", 0x12uLL);
      v31 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v31 > 0x1AuLL)
    {
      qmemcpy(v31, " background-color: #f1f1f1;", 27);
      v32 = (_BYTE *)(*((_QWORD *)v11 + 4) + 27);
      *((_QWORD *)v11 + 4) = v32;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, " background-color: #f1f1f1;", 0x1BuLL);
      v32 = (_BYTE *)*((_QWORD *)v11 + 4);
    }
    if (*((_BYTE **)v11 + 3) == v32)
    {
      v11 = llvm::raw_ostream::write(v11, "}", 1uLL);
      v33 = (_QWORD *)*((_QWORD *)v11 + 4);
    }
    else
    {
      *v32 = 125;
      v33 = (_QWORD *)(*((_QWORD *)v11 + 4) + 1);
      *((_QWORD *)v11 + 4) = v33;
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v33 > 7uLL)
    {
      *v33 = 0x3E656C7974732F3CLL;
      v34 = (void *)(*((_QWORD *)v11 + 4) + 8);
      *((_QWORD *)v11 + 4) = v34;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "</style>", 8uLL);
      v34 = (void *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v34 > 0x19uLL)
    {
      qmemcpy(v34, "<title>passes.html</title>", 26);
      v35 = (_QWORD *)(*((_QWORD *)v11 + 4) + 26);
      *((_QWORD *)v11 + 4) = v35;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "<title>passes.html</title>", 0x1AuLL);
      v35 = (_QWORD *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v35 > 7uLL)
    {
      *v35 = 0xA3E646165682F3CLL;
      v36 = *((_QWORD *)v11 + 4) + 8;
      *((_QWORD *)v11 + 4) = v36;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "</head>\n", 8uLL);
      v36 = *((_QWORD *)v11 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v36) > 5)
    {
      *(_WORD *)(v36 + 4) = 15993;
      *(_DWORD *)v36 = 1685021244;
      *((_QWORD *)v11 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v11, "<body>", 6uLL);
    }
  }
  return v10 == 0;
}

uint64_t sub_1C5A7BA20(uint64_t a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__dst[2];
  unint64_t v14;

  v4 = a1 + 128;
  MEMORY[0x1CAA32ABC](a1 + 128, *a2);
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v11 = *(_QWORD *)(a1 + 224);
  if (v11)
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __dst);
    if (SHIBYTE(v14) < 0)
      operator delete(__dst[0]);
    return v4;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C5A7BB14();
  }
}

void sub_1C5A7BB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  unint64_t v52;

  v4 = *(unsigned int *)(a2 + 296);
  if (v4 >= *(_DWORD *)(a2 + 300))
  {
    v52 = 0;
    v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 288, 0, 32, &v52);
    v14 = v13;
    v15 = *(unsigned int *)(a2 + 296);
    v16 = &v13[32 * v15];
    *(_QWORD *)v16 = a1;
    *((_QWORD *)v16 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
                         + 2;
    v17 = *(_QWORD **)(a2 + 288);
    if ((_DWORD)v15)
    {
      v18 = 32 * v15;
      v19 = v13;
      do
      {
        *((_QWORD *)v19 + 3) = 0;
        v20 = v17[3];
        *((_QWORD *)v19 + 3) = v20;
        if (v17[3] >= 8uLL)
        {
          if ((v20 & 2) != 0 && (v20 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v20 & 0xFFFFFFFFFFFFFFF8) + 8))(v19, v17);
          }
          else
          {
            v21 = *(_OWORD *)v17;
            *((_QWORD *)v19 + 2) = v17[2];
            *(_OWORD *)v19 = v21;
          }
          v17[3] = 0;
        }
        v17 += 4;
        v19 += 32;
        v18 -= 32;
      }
      while (v18);
      v17 = *(_QWORD **)(a2 + 288);
      v22 = *(unsigned int *)(a2 + 296);
      if ((_DWORD)v22)
      {
        v23 = 32 * v22;
        v24 = (char *)(v17 - 4);
        do
        {
          sub_1C5052E10(&v24[v23]);
          v23 -= 32;
        }
        while (v23);
        v17 = *(_QWORD **)(a2 + 288);
      }
    }
    v25 = v52;
    if (v17 != (_QWORD *)(a2 + 304))
      free(v17);
    *(_QWORD *)(a2 + 288) = v14;
    *(_DWORD *)(a2 + 300) = v25;
    v6 = *(_DWORD *)(a2 + 296) + 1;
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)(a2 + 288) + 32 * v4);
    *v5 = a1;
    v5[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
          + 2;
    v6 = v4 + 1;
  }
  *(_DWORD *)(a2 + 296) = v6;
  v7 = *(unsigned int *)(a2 + 440);
  if (v7 >= *(_DWORD *)(a2 + 444))
  {
    v52 = 0;
    v26 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 432, 0, 32, &v52);
    v27 = v26;
    v28 = *(unsigned int *)(a2 + 440);
    v29 = &v26[32 * v28];
    *(_QWORD *)v29 = a1;
    *((_QWORD *)v29 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                         + 2;
    v30 = *(_QWORD **)(a2 + 432);
    if ((_DWORD)v28)
    {
      v31 = 32 * v28;
      v32 = v26;
      do
      {
        *((_QWORD *)v32 + 3) = 0;
        v33 = v30[3];
        *((_QWORD *)v32 + 3) = v33;
        if (v30[3] >= 8uLL)
        {
          if ((v33 & 2) != 0 && (v33 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v33 & 0xFFFFFFFFFFFFFFF8) + 8))(v32, v30);
          }
          else
          {
            v34 = *(_OWORD *)v30;
            *((_QWORD *)v32 + 2) = v30[2];
            *(_OWORD *)v32 = v34;
          }
          v30[3] = 0;
        }
        v30 += 4;
        v32 += 32;
        v31 -= 32;
      }
      while (v31);
      v30 = *(_QWORD **)(a2 + 432);
      v35 = *(unsigned int *)(a2 + 440);
      if ((_DWORD)v35)
      {
        v36 = 32 * v35;
        v37 = (char *)(v30 - 4);
        do
        {
          sub_1C5052E10(&v37[v36]);
          v36 -= 32;
        }
        while (v36);
        v30 = *(_QWORD **)(a2 + 432);
      }
    }
    v38 = v52;
    if (v30 != (_QWORD *)(a2 + 448))
      free(v30);
    *(_QWORD *)(a2 + 432) = v27;
    *(_DWORD *)(a2 + 444) = v38;
    v9 = *(_DWORD *)(a2 + 440) + 1;
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)(a2 + 432) + 32 * v7);
    *v8 = a1;
    v8[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
          + 2;
    v9 = v7 + 1;
  }
  *(_DWORD *)(a2 + 440) = v9;
  v10 = *(unsigned int *)(a2 + 584);
  if (v10 >= *(_DWORD *)(a2 + 588))
  {
    v52 = 0;
    v39 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2 + 576, 0, 32, &v52);
    v40 = v39;
    v41 = *(unsigned int *)(a2 + 584);
    v42 = &v39[32 * v41];
    *(_QWORD *)v42 = a1;
    *((_QWORD *)v42 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                         + 2;
    v43 = *(_QWORD **)(a2 + 576);
    if ((_DWORD)v41)
    {
      v44 = 32 * v41;
      v45 = v39;
      do
      {
        *((_QWORD *)v45 + 3) = 0;
        v46 = v43[3];
        *((_QWORD *)v45 + 3) = v46;
        if (v43[3] >= 8uLL)
        {
          if ((v46 & 2) != 0 && (v46 & 4) != 0)
          {
            (*(void (**)(char *, _QWORD *))((v46 & 0xFFFFFFFFFFFFFFF8) + 8))(v45, v43);
          }
          else
          {
            v47 = *(_OWORD *)v43;
            *((_QWORD *)v45 + 2) = v43[2];
            *(_OWORD *)v45 = v47;
          }
          v43[3] = 0;
        }
        v43 += 4;
        v45 += 32;
        v44 -= 32;
      }
      while (v44);
      v43 = *(_QWORD **)(a2 + 576);
      v48 = *(unsigned int *)(a2 + 584);
      if ((_DWORD)v48)
      {
        v49 = 32 * v48;
        v50 = (char *)(v43 - 4);
        do
        {
          sub_1C5052E10(&v50[v49]);
          v49 -= 32;
        }
        while (v49);
        v43 = *(_QWORD **)(a2 + 576);
      }
    }
    v51 = v52;
    if (v43 != (_QWORD *)(a2 + 592))
      free(v43);
    *(_QWORD *)(a2 + 576) = v40;
    *(_DWORD *)(a2 + 588) = v51;
    v12 = *(_DWORD *)(a2 + 584) + 1;
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)(a2 + 576) + 32 * v10);
    *v11 = a1;
    v11[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::DCData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
           + 2;
    v12 = v10 + 1;
  }
  *(_DWORD *)(a2 + 584) = v12;
}

void llvm::StandardInstrumentations::registerCallbacks(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;

  llvm::PrintIRInstrumentation::registerCallbacks((_QWORD *)a1, a2);
  llvm::PrintPassInstrumentation::registerCallbacks((_BYTE *)(a1 + 120), a2);
  llvm::TimePassesHandler::registerCallbacks(a1 + 128, a2);
  llvm::OptNoneInstrumentation::registerCallbacks(a1 + 352, a2);
  llvm::OptBisectInstrumentation::registerCallbacks(v6, a2);
  if (a3)
    llvm::PreservedCFGCheckerInstrumentation::registerCallbacks(a1 + 360, a2, a3);
  if ((dword_1ED834E48 - 1) <= 1)
    llvm::ChangeReporter<std::string>::registerRequiredCallbacks(a1 + 504, a2);
  llvm::PseudoProbeVerifier::registerCallbacks(a1 + 552, a2);
  if (*(_BYTE *)(a1 + 689))
    llvm::VerifyInstrumentation::registerCallbacks(a1 + 688, a2);
  if ((dword_1ED834E48 - 3) <= 3)
    llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(a1 + 584, a2);
  llvm::DotCfgChangeReporter::registerCallbacks((llvm::DotCfgChangeReporter *)(a1 + 640), a2);
}

_QWORD *sub_1C5A7BFA8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8192808;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E8192870;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5A7C028(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C5A7C03C(llvm::raw_ostream *a1, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value **v8;
  llvm::Value *v9;
  int v10;
  int v11;
  llvm::Value *v12;
  char *v13;
  size_t v14;
  size_t v15;

  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v4 = ***(_QWORD ***)a2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v8 = (llvm::Value **)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
      {
LABEL_9:
        v12 = v8[1];
        v15 = *(_QWORD *)v12;
        v13 = (char *)v12 + 16;
        v14 = v15;
        goto LABEL_10;
      }
      v10 = 1;
      while (v9 != (llvm::Value *)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(llvm::Value **)(v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (llvm::Value **)(v5 + 16 * v7);
          goto LABEL_9;
        }
      }
    }
    v8 = (llvm::Value **)(v5 + 16 * v6);
    goto LABEL_9;
  }
  v14 = 0;
  v13 = &byte_1C871356D;
LABEL_10:
  if (llvm::isFunctionInPrintList(v13, v14))
    llvm::Value::print(a2, a1, 0);
}

uint64_t sub_1C5A7C108(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  sub_1C6305324(a1 + 24);
  v3 = (void **)a1;
  sub_1C4765410(&v3);
  return a1;
}

_QWORD *sub_1C5A7C154(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, uint64_t a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *i;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v27;
  uint64_t v28;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v27 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v27)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v27[16] = 2;
    *(_QWORD *)a1 = v27;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v28 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_20:
  i = (_QWORD *)(v12 + 8 * v18);
  if (v19 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v19)
  {
    return i;
  }
  v22 = (char *)operator new(__n + 33, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = v22 + 32;
  if (__n)
    memcpy(v22 + 32, a2, __n);
  v24[__n] = 0;
  *(_QWORD *)v23 = __n;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)v28;
  *((_QWORD *)v23 + 3) = *(_QWORD *)(v28 + 16);
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)v28 = 0;
  *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

void sub_1C5A7C374(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  size_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;

  v11 = *(_QWORD **)a1;
  v10 = *(_QWORD **)(a1 + 8);
  v12 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v10 - *(_QWORD *)a1) >> 3);
  v13 = *(_QWORD *)(a1 + 16);
  v51 = v12;
  if ((unint64_t)v10 >= v13)
  {
    v15 = v12 + 1;
    if (v12 + 1 > 0x222222222222222)
      abort();
    v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v13 - (_QWORD)v11) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x111111111111111)
      v17 = 0x222222222222222;
    else
      v17 = v15;
    if (v17 > 0x222222222222222)
      sub_1C4764EE4();
    v18 = 120 * v17;
    v19 = (char *)operator new(120 * v17);
    v20 = &v19[120 * v12];
    *(_QWORD *)v20 = a1;
    *((_DWORD *)v20 + 2) = v12;
    *((_QWORD *)v20 + 2) = a4;
    *((_QWORD *)v20 + 3) = 0;
    *((_QWORD *)v20 + 4) = a5;
    *((_QWORD *)v20 + 5) = a6;
    *((_QWORD *)v20 + 8) = 0;
    *((_QWORD *)v20 + 7) = 0;
    *((_QWORD *)v20 + 6) = v20 + 56;
    v14 = v20 + 120;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    if (v10 == v11)
    {
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = &v19[v18];
    }
    else
    {
      v49 = &v19[v18];
      v50 = v20 + 120;
      v21 = v10;
      v22 = &v19[120 * v12];
      do
      {
        v23 = *(v21 - 15);
        v21 -= 15;
        *((_QWORD *)v22 - 15) = v23;
        v22 -= 120;
        *((_DWORD *)v20 - 28) = *((_DWORD *)v21 + 2);
        *((_QWORD *)v20 - 13) = v21[2];
        *((_QWORD *)v20 - 12) = v21[3];
        v24 = *((_OWORD *)v21 + 2);
        *((_QWORD *)v20 - 8) = 0;
        *((_QWORD *)v20 - 9) = v20 - 64;
        *(_OWORD *)(v20 - 88) = v24;
        *((_QWORD *)v20 - 7) = 0;
        v25 = (_QWORD *)v21[6];
        if (v25 != v21 + 7)
        {
          do
          {
            sub_1C6305404((_QWORD **)v20 - 9, (uint64_t *)v20 - 8, *((_DWORD *)v25 + 8), (uint64_t)(v25 + 4));
            v26 = (_QWORD *)v25[1];
            if (v26)
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = (_QWORD *)v25[2];
                v28 = *v27 == (_QWORD)v25;
                v25 = v27;
              }
              while (!v28);
            }
            v25 = v27;
          }
          while (v27 != v21 + 7);
        }
        *((_QWORD *)v20 - 5) = 0;
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 6) = 0;
        sub_1C4979194((_QWORD *)v20 - 6, (const void *)*(v10 - 6), *(v10 - 5), (uint64_t)(*(v10 - 5) - *(v10 - 6)) >> 2);
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v29 = v20 - 24;
        *((_QWORD *)v29 + 2) = 0;
        sub_1C4979194(v29, (const void *)*(v10 - 3), *(v10 - 2), (uint64_t)(*(v10 - 2) - *(v10 - 3)) >> 2);
        v10 = v21;
        v20 = v22;
      }
      while (v21 != v11);
      v14 = v50;
      v10 = *(_QWORD **)a1;
      v30 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v50;
      *(_QWORD *)(a1 + 16) = v49;
      while ((_QWORD *)v30 != v10)
      {
        v30 -= 120;
        sub_1C5A7CB9C(v30);
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = a1;
    *((_DWORD *)v10 + 2) = v12;
    v10[2] = a4;
    v10[3] = 0;
    v10[4] = a5;
    v10[5] = a6;
    v10[8] = 0;
    v10[7] = 0;
    v10[6] = v10 + 7;
    v14 = (char *)(v10 + 15);
    *(_OWORD *)(v10 + 9) = 0u;
    *(_OWORD *)(v10 + 11) = 0u;
    *(_OWORD *)(v10 + 13) = 0u;
  }
  *(_QWORD *)(a1 + 8) = v14;
  v31 = *(_DWORD *)(a1 + 32);
  if (!v31)
  {
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    v45 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v45)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v45[16] = 2;
    *(_QWORD *)(a1 + 24) = v45;
    v31 = 16;
    *(_DWORD *)(a1 + 32) = 16;
  }
  v32 = a3;
  v33 = 0;
  if (a3)
  {
    v34 = a2;
    do
    {
      v35 = *v34++;
      v33 = 33 * v33 + v35;
      --v32;
    }
    while (v32);
  }
  v36 = *(_QWORD *)(a1 + 24);
  v37 = v31 - 1;
  v38 = v36 + 8 * v31 + 8;
  v39 = -1;
  v40 = 1;
  v41 = v33;
  while (1)
  {
    v42 = v41 & v37;
    v43 = *(_QWORD **)(v36 + 8 * v42);
    if (!v43)
      break;
    if (v43 == (_QWORD *)-8)
    {
      if (v39 == -1)
        v39 = v41 & v37;
    }
    else if (*(_DWORD *)(v38 + 4 * v42) == v33
           && a3 == *v43
           && (!a3 || !memcmp(a2, (char *)v43 + *(unsigned int *)(a1 + 44), a3)))
    {
      goto LABEL_45;
    }
    v41 = v40 + v42;
    ++v40;
  }
  v44 = v39;
  if (v39 == -1)
  {
    v44 = v42;
    v42 = v42;
  }
  else
  {
    v42 = v39;
  }
  *(_DWORD *)(v38 + 4 * v44) = v33;
  v43 = *(_QWORD **)(v36 + 8 * v42);
LABEL_45:
  if (v43)
  {
    if (v43 != (_QWORD *)-8)
      return;
    --*(_DWORD *)(a1 + 40);
  }
  v46 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v47 = v46;
  v48 = v46 + 16;
  if (a3)
    memcpy(v46 + 16, a2, a3);
  v48[a3] = 0;
  *(_QWORD *)v47 = a3;
  *(_QWORD *)(v36 + 8 * v42) = v47;
  *((_DWORD *)v47 + 2) = v51;
  ++*(_DWORD *)(a1 + 36);
  llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 24), v42);
}

void sub_1C5A7C7AC(uint64_t a1, uint64_t a2, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v9;
  size_t v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  BOOL v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string __dst;
  std::string v24;
  std::string v25;
  std::string v26;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
      goto LABEL_3;
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    return;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_9;
LABEL_3:
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v9 = __len | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = __len;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_15;
    }
    memmove(p_dst, __src, __len);
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[__len] = 0;
    goto LABEL_16;
  }
  memset(&__dst, 0, sizeof(__dst));
LABEL_16:
  v11 = std::string::insert(&__dst, 0, "<FONT COLOR=\"");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v24, "\">");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = *(_BYTE *)(a2 + 23);
  v16 = v15 < 0;
  if (v15 >= 0)
    v17 = (const std::string::value_type *)a2;
  else
    v17 = *(const std::string::value_type **)a2;
  v18 = v15 & 0x7F;
  if (v16)
    v19 = *(_QWORD *)(a2 + 8);
  else
    v19 = v18;
  v20 = std::string::append(&v25, v17, v19);
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v26, "</FONT>");
  *(std::string *)a1 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t *sub_1C5A7C994(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 8), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 8) < a5)
      goto LABEL_17;
    v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v14;
          v15 = *(_DWORD *)(v14 + 32);
          if (v15 <= a5)
            break;
          v14 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v15 >= a5)
          break;
        v5 = a4 + 1;
        v14 = a4[1];
      }
      while (v14);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v16 = a2;
    do
    {
      a4 = (uint64_t *)v16[2];
      v13 = *a4 == (_QWORD)v16;
      v16 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 8) <= a5)
  {
    v17 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v17;
          v18 = *(_DWORD *)(v17 + 32);
          if (v18 <= a5)
            break;
          v17 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v18 >= a5)
          break;
        v5 = a4 + 1;
        v17 = a4[1];
      }
      while (v17);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v10)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

__n128 sub_1C5A7CB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 *v6;
  unsigned __int8 *v7;
  __n128 result;

  v5 = a2 + 8;
  v6 = (__n128 *)operator new(0x50uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  v6[2].n128_u32[0] = *(_DWORD *)a3;
  v7 = &v6[2].n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1C47EBC30(v7, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a3 + 8);
    v6[3].n128_u64[1] = *(_QWORD *)(a3 + 24);
  }
  result = *(__n128 *)(a3 + 32);
  v6[4] = result;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1C5A7CB9C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  sub_1C5A7CBDC(*(char **)(a1 + 56));
}

void sub_1C5A7CBDC(char *a1)
{
  if (a1)
  {
    sub_1C5A7CBDC(*(_QWORD *)a1);
    sub_1C5A7CBDC(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void sub_1C5A7CC24(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _BYTE *v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)a1 = *a3;
  v5 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v8) < 0)
  {
    sub_1C47EBC30(v5, __p[0], (unint64_t)__p[1]);
    v6 = SHIBYTE(v8);
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_DWORD *)(a1 + 120) = 1065353216;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_DWORD *)(a1 + 160) = 1065353216;
    *(_BYTE *)(a1 + 168) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_DWORD *)(a1 + 120) = 1065353216;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_DWORD *)(a1 + 160) = 1065353216;
    *(_BYTE *)(a1 + 168) = 0;
  }
}

void sub_1C5A7CD10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *(_QWORD **)(a1 + 144);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 104);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(void **)(a1 + 64);
  if (v8)
  {
    *(_QWORD *)(a1 + 72) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(void **)(a1 + 40);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 9) < 0)
          operator delete(*(void **)(v10 - 32));
        v10 -= 48;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_1C5A7CDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD *v15;
  size_t *v16;
  int *i;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void **v21;
  const void *v22;
  size_t v23;
  char *v24;
  unsigned __int8 v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t *v37;
  _BYTE *v38;
  _BYTE *v39;
  size_t v40;
  uint64_t **v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t *v51;
  __int128 v52;
  __int16 v53;
  __int128 v54;
  char v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD *v59;
  char v60;
  _QWORD v61[2];
  __int128 v62;
  void ***v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  void **v67;
  char v68;
  const char *v69;
  uint64_t v70;
  const char ***v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  const char **v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _BYTE v85[24];
  uint64_t v86;
  void *v87;
  _QWORD *v88;
  void **v89;
  int v90;
  void **v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  void **v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  void *__dst;
  uint64_t v104;
  _QWORD v105[5];

  v105[3] = *MEMORY[0x1E0C80C00];
  v58[0] = a6;
  v58[1] = a7;
  v57[0] = a9;
  v57[1] = a10;
  v56[0] = a11;
  v56[1] = a12;
  v104 = a2;
  v105[0] = a3;
  v105[1] = a4;
  v105[2] = a5;
  v13 = atomic_load((unsigned __int8 *)&qword_1ED81ACD8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81ACD8))
  {
    unk_1ED81AD90 = 0;
    *(_OWORD *)&qword_1ED81AD80 = 0u;
    *(_OWORD *)&qword_1ED81AD70 = 0u;
    unk_1ED81AD60 = 0u;
    *(_OWORD *)&qword_1ED81AD50 = 0u;
    __cxa_atexit((void (*)(void *))sub_1C5A81F98, 0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED81ACD8);
  }
  v14 = 0;
  v15 = (_QWORD *)(a1 + 8);
  v16 = v105;
  for (i = &dword_1EF8EE1E8; ; ++i)
  {
    if (*i == -1)
    {
      v100 = &v102;
      v101 = xmmword_1C8667FB0;
      v92 = "tmpdiff";
      LOWORD(v95) = 259;
      v18 = sub_1C5E7DA50((uint64_t *)&v92, (__int128 *)"txt", 3, i, &v100, 1, 0);
      if (v18)
      {
        v19 = (char *)operator new(0x28uLL);
        *(_QWORD *)a1 = v19;
        *(_OWORD *)(a1 + 8) = xmmword_1C85F4380;
        strcpy(v19, "Unable to create temporary file.");
      }
      else
      {
        v20 = v15;
        LOWORD(v95) = 261;
        v92 = v100;
        *(_QWORD *)&v93 = v101;
        llvm::Twine::str((llvm::Twine *)&v92, v85);
        v21 = (void **)((char *)&unk_1ED81ACC8 + v14 + 136);
        if (*((char *)&unk_1ED81ACC8 + v14 + 159) < 0)
          operator delete(*v21);
        *(_OWORD *)v21 = *(_OWORD *)v85;
        *(_QWORD *)((char *)&unk_1ED81ACC8 + v14 + 152) = *(_QWORD *)&v85[16];
        v15 = v20;
      }
      if (v100 != &v102)
        free(v100);
      if (v18)
        break;
    }
    if (v14 == 48)
    {
      v25 = atomic_load((unsigned __int8 *)&qword_1ED81ACE0);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED81ACE0))
      {
        if (byte_1ED81AFC7 >= 0)
          v48 = byte_1ED81AFC7 & 0x7F;
        else
          v48 = qword_1ED81AFB8;
        if (byte_1ED81AFC7 >= 0)
          v49 = &qword_1ED81AFB0;
        else
          v49 = (uint64_t *)qword_1ED81AFB0;
        llvm::sys::findProgramByName(v49, v48, 0, 0, (uint64_t)&qword_1ED81AD08);
        __cxa_atexit((void (*)(void *))sub_1C5A7A160, &qword_1ED81AD08, &dword_1C475E000);
        __cxa_guard_release(&qword_1ED81ACE0);
      }
      if ((byte_1ED81AD20 & 1) != 0)
      {
        v26 = (char *)operator new(0x20uLL);
        *(_QWORD *)a1 = v26;
        *(_OWORD *)(a1 + 8) = xmmword_1C6613090;
        strcpy(v26, "Unable to find diff executable.");
        return;
      }
      v50 = v15;
      *(_QWORD *)v85 = "--old-line-format={0}";
      *(_QWORD *)&v85[8] = 21;
      *(_QWORD *)&v85[16] = &v89;
      v86 = 1;
      v87 = &unk_1E8168E00;
      v88 = v58;
      v89 = &v87;
      v100 = &v102;
      v101 = xmmword_1C85F20B0;
      LODWORD(v93) = 0;
      v96 = 0;
      v97 = 0;
      v92 = &off_1E81A7280;
      v99 = &v100;
      v98 = 0;
      v95 = 0;
      *((_QWORD *)&v93 + 1) = 0;
      v94 = 0;
      sub_1C639D338((uint64_t)v85, (llvm::raw_ostream *)&v92);
      v92 = off_1E81A6E70;
      if (v98 == 1 && *((_QWORD *)&v93 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v93 + 1), 0x1000C8077774924);
      v69 = "--new-line-format={0}";
      v70 = 21;
      v71 = &v75;
      v72 = 1;
      v73 = (const char *)&unk_1E8168E00;
      v74 = (uint64_t)v57;
      v75 = &v73;
      v92 = &v94;
      v93 = xmmword_1C85F20B0;
      *(_DWORD *)&v85[8] = 0;
      LOBYTE(v88) = 0;
      v89 = 0;
      *(_QWORD *)v85 = &off_1E81A7280;
      v91 = &v92;
      v90 = 0;
      v86 = 0;
      v87 = 0;
      *(_QWORD *)&v85[16] = 0;
      sub_1C639D338((uint64_t)&v69, (llvm::raw_ostream *)v85);
      *(_QWORD *)v85 = off_1E81A6E70;
      if (v90 == 1 && *(_QWORD *)&v85[16])
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v85[16], 0x1000C8077774924);
      *(_QWORD *)&v62 = "--unchanged-line-format={0}";
      *((_QWORD *)&v62 + 1) = 27;
      v63 = &v67;
      v64 = 1;
      v65 = &unk_1E8168E00;
      v66 = v56;
      v67 = &v65;
      *(_QWORD *)v85 = &v86;
      *(_OWORD *)&v85[8] = xmmword_1C85F20B0;
      LODWORD(v70) = 0;
      LOBYTE(v74) = 0;
      v75 = 0;
      v69 = (const char *)&off_1E81A7280;
      v77 = v85;
      LODWORD(v76) = 0;
      v72 = 0;
      v73 = 0;
      v71 = 0;
      sub_1C639D338((uint64_t)&v62, (llvm::raw_ostream *)&v69);
      v69 = (const char *)off_1E81A6E70;
      if ((_DWORD)v76 == 1 && v71)
        MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
      v28 = &qword_1ED81AFB0;
      if (byte_1ED81AFC7 < 0)
        v28 = (uint64_t *)qword_1ED81AFB0;
      v29 = byte_1ED81AFC7 & 0x7F;
      if (byte_1ED81AFC7 < 0)
        v29 = qword_1ED81AFB8;
      v69 = (const char *)v28;
      v70 = v29;
      v71 = (const char ***)"-w";
      v72 = 2;
      v73 = "-d";
      v74 = 2;
      v75 = (const char **)v100;
      v76 = v101;
      v77 = v92;
      v78 = v93;
      v79 = *(_QWORD *)v85;
      v80 = *(_QWORD *)&v85[8];
      if (byte_1ED81AD67 >= 0)
        v30 = &qword_1ED81AD50;
      else
        v30 = (uint64_t *)qword_1ED81AD50;
      v31 = byte_1ED81AD67 & 0x7F;
      if (byte_1ED81AD67 < 0)
        v31 = qword_1ED81AD58;
      v81 = v30;
      v82 = v31;
      if (byte_1ED81AD7F >= 0)
        v32 = &qword_1ED81AD68;
      else
        v32 = (uint64_t *)qword_1ED81AD68;
      v33 = byte_1ED81AD7F & 0x7F;
      if (byte_1ED81AD7F < 0)
        v33 = qword_1ED81AD70;
      v83 = v32;
      v84 = v33;
      LOBYTE(v62) = 0;
      LOBYTE(v63) = 0;
      if (byte_1ED81AD97 >= 0)
        v34 = &qword_1ED81AD80;
      else
        v34 = (uint64_t *)qword_1ED81AD80;
      v35 = byte_1ED81AD97 & 0x7F;
      if (byte_1ED81AD97 < 0)
        v35 = qword_1ED81AD88;
      v64 = (uint64_t)v34;
      v65 = (void *)v35;
      LOBYTE(v66) = 1;
      LOBYTE(v67) = 0;
      v68 = 0;
      if (byte_1ED81AD1F >= 0)
        v36 = byte_1ED81AD1F & 0x7F;
      else
        v36 = unk_1ED81AD10;
      LOBYTE(v54) = 0;
      if (byte_1ED81AD1F >= 0)
        v37 = &qword_1ED81AD08;
      else
        v37 = (uint64_t *)qword_1ED81AD08;
      v55 = 0;
      if ((llvm::sys::ExecuteAndWait(v37, v36, (uint64_t)&v69, 8, &v54, &v62, 3, 0, 0, 0, 0, 0) & 0x80000000) != 0)
      {
        v42 = (char *)operator new(0x20uLL);
        *(_QWORD *)a1 = v42;
        *(_OWORD *)(a1 + 8) = xmmword_1C6613080;
        strcpy(v42, "Error executing system diff.");
      }
      else
      {
        *(_QWORD *)((char *)v61 + 7) = 0;
        v61[0] = 0;
        v53 = 260;
        v51 = &qword_1ED81AD80;
        sub_1C5E1F6CC((unsigned __int8 *)&v51, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v59);
        if ((v60 & 1) != 0 || !v59)
        {
          LOBYTE(v38) = 0;
          v43 = 0;
          strcpy((char *)a1, "Unable to read result.");
          *(_BYTE *)(a1 + 23) = 22;
        }
        else
        {
          v38 = (_BYTE *)v59[1];
          if (v38)
          {
            v39 = (_BYTE *)v59[2];
            v40 = v39 - v38;
            if ((unint64_t)(v39 - v38) >= 0x7FFFFFFFFFFFFFF8)
              abort();
            if (v40 >= 0x17)
            {
              v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v44 = v40 | 7;
              v45 = v44 + 1;
              v41 = (uint64_t **)operator new(v44 + 1);
              *(_QWORD *)&v52 = v40;
              *((_QWORD *)&v52 + 1) = v45 | 0x8000000000000000;
              v51 = (uint64_t *)v41;
            }
            else
            {
              HIBYTE(v52) = (_BYTE)v39 - (_BYTE)v38;
              v41 = &v51;
              if (v39 == v38)
              {
LABEL_69:
                *((_BYTE *)v41 + v40) = 0;
                v43 = v51;
                LOBYTE(v38) = HIBYTE(v52);
                goto LABEL_70;
              }
            }
            memmove(v41, v38, v40);
            goto LABEL_69;
          }
          v43 = 0;
          v51 = 0;
          v52 = 0uLL;
LABEL_70:
          v46 = 0;
          v61[0] = v52;
          *(_QWORD *)((char *)v61 + 7) = *(_QWORD *)((char *)&v52 + 7);
          while (1)
          {
            v53 = 260;
            v51 = (uint64_t *)((char *)&unk_1ED81ACC8 + v46 + 136);
            if (llvm::sys::fs::remove((llvm::sys::fs *)&v51, (const llvm::Twine *)1))
              break;
            v46 += 24;
            if (v46 == 72)
            {
              *(_QWORD *)a1 = v43;
              *v50 = v61[0];
              *(_QWORD *)((char *)v50 + 7) = *(_QWORD *)((char *)v61 + 7);
              *(_BYTE *)(a1 + 23) = (_BYTE)v38;
              v61[0] = 0;
              *(_QWORD *)((char *)v61 + 7) = 0;
              LOBYTE(v38) = 0;
              v43 = 0;
              goto LABEL_75;
            }
          }
          v47 = (char *)operator new(0x28uLL);
          *(_QWORD *)a1 = v47;
          *(_OWORD *)(a1 + 8) = xmmword_1C85F4380;
          strcpy(v47, "Unable to remove temporary file.");
        }
LABEL_75:
        if ((v60 & 1) == 0 && v59)
          (*(void (**)(_QWORD *))(*v59 + 8))(v59);
        if ((v38 & 0x80) != 0)
          operator delete(v43);
      }
      if (*(uint64_t **)v85 != &v86)
        free(*(void **)v85);
      if (v92 != &v94)
        free(v92);
      if (v100 != &v102)
        free(v100);
      return;
    }
    LOWORD(__dst) = 260;
    v100 = (char *)&unk_1ED81ACC8 + v14 + 136;
    if (llvm::sys::fs::openFile((unsigned __int8 *)&v100, i, 0, 2, 0, 438))
    {
      v24 = (char *)operator new(0x30uLL);
      *(_QWORD *)a1 = v24;
      *(_OWORD *)(a1 + 8) = xmmword_1C64632B0;
      strcpy(v24, "Unable to open temporary file for writing.");
      return;
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v100, *i, 1, 0, 0);
    if (*i == -1)
    {
      v27 = (char *)operator new(0x20uLL);
      *(_QWORD *)a1 = v27;
      *(_OWORD *)(a1 + 8) = xmmword_1C6613090;
      strcpy(v27, "Error opening file for writing.");
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v100);
      return;
    }
    v22 = (const void *)*(v16 - 1);
    v23 = *v16;
    if (*v16 <= v102 - (uint64_t)__dst)
    {
      if (v23)
      {
        memcpy(__dst, v22, *v16);
        __dst = (char *)__dst + v23;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v100, (const char *)v22, *v16);
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v100);
    v14 += 24;
    v16 += 2;
  }
}

llvm::raw_ostream *sub_1C5A7D800(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  char v13;
  int v14;
  const char *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  llvm::raw_ostream *result;

  if (a4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *a3;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 97) >= 0x1A)
        {
          if ((v6 - 65) > 0x19)
            break;
          v7 = -55;
        }
        else
        {
          v7 = -87;
        }
      }
      else
      {
        v7 = -48;
      }
      v8 = v7 + v6;
      if (v8 > 9)
        break;
      v9 = 10 * v5 + v8;
      if (v5 > v9 / 0xA)
        break;
      ++a3;
      v5 = v9;
      if (!--a4)
        goto LABEL_14;
    }
  }
  v9 = -1;
LABEL_14:
  v12 = *(const char **)(a1 + 128);
  v10 = a1 + 128;
  v11 = v12;
  v13 = *(_BYTE *)(v10 + 23);
  v14 = v13;
  if (v13 >= 0)
    v15 = (const char *)v10;
  else
    v15 = v11;
  v16 = *(_QWORD *)(v10 + 8);
  v17 = v13 & 0x7F;
  if (v14 >= 0)
    v16 = v17;
  if (v16 >= v9)
    v18 = v9;
  else
    v18 = v16;
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v18 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v15, v18);
  if (v18)
  {
    result = (llvm::raw_ostream *)memcpy(result, v15, v18);
    *((_QWORD *)this + 4) += v18;
  }
  return result;
}

void sub_1C5A7D908(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6;
  void *v7;
  int v8;
  _BYTE *v9;
  _BYTE v10[7];

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v8 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)a1 = *a4;
  v9 = (_BYTE *)(a1 + 16);
  if (v8 < 0)
  {
    sub_1C47EBC30(v9, v7, v6);
    *(_QWORD *)(a1 + 40) = a3;
    operator delete(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 35) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 39) = v8;
    *(_QWORD *)(a1 + 40) = a3;
  }
}

void sub_1C5A7D9A4(llvm::raw_ostream **a1, int8x8_t *a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  std::string::size_type size;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  llvm::raw_ostream *v15;
  _QWORD *v16;
  int v17;
  size_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  std::string *p_p;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _WORD *v25;
  std::string __p;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    LODWORD(v6) = a3;
    sub_1C5A7DD2C((uint64_t)&__p, a2, *(_QWORD *)(a4 + 16));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      v6 = v6;
    else
      v6 = 0xFFFFFFFFLL;
    v10 = sub_1C5A7DD84(a2, *(_QWORD *)(a4 + 16));
    sub_1C5A7DC38(&__p, *(void **)v10, *(_QWORD *)(v10 + 8));
    if ((int)v6 <= 64)
    {
      v11 = *a1;
      v12 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v12) > 4)
      {
        *(_BYTE *)(v12 + 4) = 101;
        *(_DWORD *)v12 = 1685016073;
        *((_QWORD *)v11 + 4) += 5;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v11, "\tNode", 5uLL);
      }
      llvm::write_hex(v11, (unint64_t)a2, 3, 0, 0);
      if ((v6 & 0x80000000) == 0)
      {
        v13 = *a1;
        v14 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v14 > 1uLL)
        {
          *v14 = 29498;
          *((_QWORD *)v13 + 4) += 2;
        }
        else
        {
          v13 = llvm::raw_ostream::write(v13, ":s", 2uLL);
        }
        sub_1C5E21910(v13, v6, 0, 0, 0);
      }
      v15 = *a1;
      v16 = (_QWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v16 > 7uLL)
      {
        *v16 = 0x65646F4E203E2D20;
        *((_QWORD *)v15 + 4) += 8;
      }
      else
      {
        v15 = llvm::raw_ostream::write(v15, " -> Node", 8uLL);
      }
      llvm::write_hex(v15, v4, 3, 0, 0);
      v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        v18 = __p.__r_.__value_.__l.__size_;
      if (v18)
      {
        v19 = *a1;
        v20 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if (*((_BYTE **)*a1 + 3) == v20)
        {
          v19 = llvm::raw_ostream::write(v19, "[", 1uLL);
        }
        else
        {
          *v20 = 91;
          ++*((_QWORD *)v19 + 4);
        }
        if (v17 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v22 = llvm::raw_ostream::write(v19, (const char *)p_p, v18);
        v23 = (_BYTE *)*((_QWORD *)v22 + 4);
        if (*((_BYTE **)v22 + 3) == v23)
        {
          llvm::raw_ostream::write(v22, "]", 1uLL);
        }
        else
        {
          *v23 = 93;
          ++*((_QWORD *)v22 + 4);
        }
      }
      v24 = *a1;
      v25 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v25 > 1uLL)
      {
        *v25 = 2619;
        *((_QWORD *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ";\n", 2uLL);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A7DC38(std::string *a1, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::string *v9;
  std::string __dst;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  v9 = std::string::insert(&__dst, 0, "color=");
  *a1 = *v9;
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

char *sub_1C5A7DD2C(uint64_t a1, int8x8_t *a2, unint64_t a3)
{
  char *result;
  __int128 v5;

  result = (char *)sub_1C5A7DD84(a2, a3);
  if (result[39] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a1, *((void **)result + 2), *((_QWORD *)result + 3));
  v5 = *((_OWORD *)result + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)result + 4);
  *(_OWORD *)a1 = v5;
  return result;
}

uint64_t sub_1C5A7DD84(int8x8_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v2 >> 47) ^ v2);
  v4 = 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  v5 = a1[17];
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*(_QWORD *)&a1[16] + 8 * v7);
  do
  {
    do
      v8 = (_QWORD *)*v8;
    while (v4 != v8[1]);
  }
  while (v8[2] != a2);
  return v8[3];
}

uint64_t sub_1C5A7DE2C(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  sub_1C630553C(a1 + 24);
  v3 = (void **)a1;
  sub_1C4765410(&v3);
  return a1;
}

uint64_t sub_1C5A7DE78(uint64_t a1)
{
  sub_1C58F7164(a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C5A7DEC0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  size_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  char *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t (**v16)();
  int v17;
  char v18;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      v4 = *(unsigned __int8 **)v2;
      v5 = *(_QWORD *)(v2 + 8);
      v6 = *(_DWORD *)(v2 + 16);
      v14[0] = *(_QWORD *)v2;
      v14[1] = v5;
      v15 = *(_OWORD *)(v2 + 24);
      v16 = &off_1E81928C0;
      v18 = 1;
      v17 = v6;
      v7 = qword_1ED834E70;
      if (qword_1ED834E78 >= HIDWORD(qword_1ED834E78))
      {
        v12 = qword_1ED834E78 + 1;
        if (qword_1ED834E70 <= (unint64_t)v14
          && qword_1ED834E70 + 48 * (unint64_t)qword_1ED834E78 > (unint64_t)v14)
        {
          v13 = (char *)v14 - qword_1ED834E70;
          sub_1C630584C(v12);
          v7 = qword_1ED834E70;
          v8 = &v13[qword_1ED834E70];
          goto LABEL_5;
        }
        sub_1C630584C(v12);
        v7 = qword_1ED834E70;
      }
      v8 = (char *)v14;
LABEL_5:
      v9 = v7 + 48 * qword_1ED834E78;
      v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v8;
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 32) = &off_1E81928E0;
      v11 = *((_DWORD *)v8 + 10);
      *(_BYTE *)(v9 + 44) = v8[44];
      *(_DWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 32) = &off_1E81928C0;
      LODWORD(qword_1ED834E78) = qword_1ED834E78 + 1;
      llvm::cl::AddLiteralOption(qword_1ED834E68, v4, v5);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

__n128 sub_1C5A7E014(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED81AD98, "print-before-changed", 0x14uLL);
  result = *a1;
  xmmword_1ED81ADB8 = (__int128)*a1;
  v7 = *a2;
  byte_1ED81AE18 = **a2;
  byte_1ED81AE29 = 1;
  byte_1ED81AE28 = *v7;
  word_1ED81ADA2 = (32 * (*a3 & 3)) | word_1ED81ADA2 & 0xFF9F;
  return result;
}

void sub_1C5A7E098(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)&qword_1ED835270, &__dst);
  byte_1ED8352A8 = 1;
  std::string::operator=((std::string *)&unk_1ED835290, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C5A7E170(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)&qword_1ED835358, &__dst);
  byte_1ED835390 = 1;
  std::string::operator=((std::string *)&unk_1ED835378, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

char **sub_1C5A7E248(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      if (v2[v4 - 17] < 0)
        operator delete(*(void **)&v2[v4 - 40]);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5A7E2B8(uint64_t **a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  if (v6)
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v9, v6);
  else
    v9 = 0;
  llvm::PrintIRInstrumentation::printBeforePass(v7, a2, a3, (uint64_t)&v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t sub_1C5A7E354(uint64_t **a1, void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  if (v6)
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v9, v6);
  else
    v9 = 0;
  llvm::PrintIRInstrumentation::printAfterPass(v7, a2, a3, &v9);
  result = v9;
  v9 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1C5A7E3F0(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  llvm::PrintIRInstrumentation::printAfterPassInvalidated(*a1, a2, a3);
}

uint64_t sub_1C5A7E3F8(_BYTE **a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t shouldRun;
  uint64_t v9;
  uint64_t v11;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  if (v6)
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v11, v6);
  else
    v11 = 0;
  shouldRun = llvm::OptNoneInstrumentation::shouldRun(v7, a2, a3, &v11);
  v9 = v11;
  v11 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return shouldRun;
}

BOOL sub_1C5A7E49C(uint64_t a1, void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  _BOOL8 v7;
  llvm *v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;

  v6 = *a4;
  *a4 = 0;
  if ((sub_1C5A6D844((char *)a2, a3) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
    v10 = (llvm *)llvm::OptBisector;
    if (v6)
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v14, v6);
    else
      v14 = 0;
    sub_1C5A6D204((char *)__p, &v14);
    if (v16 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v16 >= 0)
      v12 = v16 & 0x7F;
    else
      v12 = (size_t)__p[1];
    v7 = llvm::OptBisect::checkPass(v10, a2, a3, v11, v12);
    if (v16 < 0)
      operator delete(__p[0]);
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v7;
}

char *sub_1C5A7E5C4(char **a1, const char *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  const char **v11;
  char *v12;
  char *v13;
  const char **v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = a1[2] - v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8 >> 60)
    sub_1C4764EE4();
  v10 = (char *)operator new(16 * v8);
  v11 = (const char **)&v10[16 * v4];
  v12 = &v10[16 * v8];
  *v11 = a2;
  v11[1] = (const char *)strlen(a2);
  v13 = (char *)(v11 + 2);
  if (v3 == v2)
  {
    v14 = v11;
  }
  else
  {
    do
    {
      v14 = v11 - 2;
      *((_OWORD *)v11 - 1) = *((_OWORD *)v3 - 1);
      v3 -= 16;
      v11 -= 2;
    }
    while (v3 != v2);
  }
  *a1 = (char *)v14;
  a1[1] = v13;
  a1[2] = v12;
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t sub_1C5A7E6B4(llvm::PrintPassInstrumentation **a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  llvm *v7;
  llvm *v8;
  void *v9;
  _DWORD *v10;
  void **v11;
  size_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  void *__p[2];
  char v17;

  v6 = *a4;
  *a4 = 0;
  v7 = llvm::PrintPassInstrumentation::print(*a1);
  v8 = v7;
  v9 = (void *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0xEuLL)
  {
    qmemcpy(v9, "Skipping pass: ", 15);
    v10 = (_DWORD *)(*((_QWORD *)v7 + 4) + 15);
    *((_QWORD *)v8 + 4) = v10;
  }
  else
  {
    llvm::raw_ostream::write(v7, "Skipping pass: ", 0xFuLL);
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  }
  if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
  {
    if (a3)
    {
      memcpy(v10, a2, a3);
      v10 = (_DWORD *)(*((_QWORD *)v8 + 4) + a3);
      *((_QWORD *)v8 + 4) = v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, (const char *)a2, a3);
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 544108320;
    *((_QWORD *)v8 + 4) += 4;
    if (v6)
      goto LABEL_9;
  }
  else
  {
    llvm::raw_ostream::write(v8, " on ", 4uLL);
    if (v6)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v15, v6);
      goto LABEL_13;
    }
  }
  v15 = 0;
LABEL_13:
  sub_1C5A6D204((char *)__p, &v15);
  if (v17 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v17 >= 0)
    v12 = v17 & 0x7F;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write(v8, (const char *)v11, v12);
  v13 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v13)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v13 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  result = v15;
  v15 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

__n128 sub_1C5A7E894(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void sub_1C5A7E8BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C5A7E8D4(uint64_t a1, char *__s, size_t __n, uint64_t *a4)
{
  uint64_t v6;
  llvm::PrintPassInstrumentation *v7;
  uint64_t result;
  llvm *v9;
  llvm *v10;
  void *v11;
  _DWORD *v12;
  void **v13;
  size_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  v6 = *a4;
  *a4 = 0;
  v7 = *(llvm::PrintPassInstrumentation **)a1;
  result = llvm::isSpecialPass(__s, __n, (uint64_t *)(a1 + 8));
  if ((result & 1) != 0)
  {
    if (!v6)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v9 = llvm::PrintPassInstrumentation::print(v7);
  v10 = v9;
  v11 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 0xDuLL)
  {
    qmemcpy(v11, "Running pass: ", 14);
    v12 = (_DWORD *)(*((_QWORD *)v9 + 4) + 14);
    *((_QWORD *)v10 + 4) = v12;
  }
  else
  {
    llvm::raw_ostream::write(v9, "Running pass: ", 0xEuLL);
    v12 = (_DWORD *)*((_QWORD *)v10 + 4);
  }
  if (__n <= *((_QWORD *)v10 + 3) - (_QWORD)v12)
  {
    if (__n)
    {
      memcpy(v12, __s, __n);
      v12 = (_DWORD *)(*((_QWORD *)v10 + 4) + __n);
      *((_QWORD *)v10 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, __s, __n);
    v12 = (_DWORD *)*((_QWORD *)v10 + 4);
  }
  if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 544108320;
    *((_QWORD *)v10 + 4) += 4;
    if (v6)
      goto LABEL_13;
  }
  else
  {
    llvm::raw_ostream::write(v10, " on ", 4uLL);
    if (v6)
    {
LABEL_13:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v16, v6);
      goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  sub_1C5A6D204((char *)__p, &v16);
  if (v18 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v18 >= 0)
    v14 = v18 & 0x7F;
  else
    v14 = (size_t)__p[1];
  llvm::raw_ostream::write(v10, (const char *)v13, v14);
  v15 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v15)
  {
    llvm::raw_ostream::write(v10, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v10 + 4);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  result = v16;
  v16 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_DWORD *)v7 + 1) += 2;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

__n128 sub_1C5A7EAE8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void sub_1C5A7EB10(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C5A7EB28(uint64_t *a1, char *__s, size_t __n, uint64_t *a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a4;
  *a4 = 0;
  result = llvm::isSpecialPass(__s, __n, a1 + 1);
  if ((result & 1) == 0)
    *(_DWORD *)(*a1 + 4) -= 2;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

__n128 sub_1C5A7EB90(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void sub_1C5A7EBB8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C5A7EBD0(uint64_t *a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  sub_1C6305D94(&v8, a4);
  if ((llvm::isSpecialPass(a2, a3, a1 + 1) & 1) == 0)
    *(_DWORD *)(*a1 + 4) -= 2;
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 sub_1C5A7EC4C(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void sub_1C5A7EC74(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C5A7EC8C(llvm::PrintPassInstrumentation **a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  llvm::PrintPassInstrumentation *v7;
  llvm *v8;
  llvm *v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  size_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  void *__p[2];
  char v18;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  v8 = llvm::PrintPassInstrumentation::print(*a1);
  v9 = v8;
  v10 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v10) > 0x11)
  {
    *(_WORD *)(v10 + 16) = 8250;
    *(_OWORD *)v10 = *(_OWORD *)"Running analysis: ";
    v11 = (_DWORD *)(*((_QWORD *)v8 + 4) + 18);
    *((_QWORD *)v9 + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Running analysis: ", 0x12uLL);
    v11 = (_DWORD *)*((_QWORD *)v9 + 4);
  }
  if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)v11)
  {
    if (a3)
    {
      memcpy(v11, a2, a3);
      v11 = (_DWORD *)(*((_QWORD *)v9 + 4) + a3);
      *((_QWORD *)v9 + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, (const char *)a2, a3);
    v11 = (_DWORD *)*((_QWORD *)v9 + 4);
  }
  if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 3uLL)
  {
    *v11 = 544108320;
    *((_QWORD *)v9 + 4) += 4;
    if (v6)
      goto LABEL_9;
  }
  else
  {
    llvm::raw_ostream::write(v9, " on ", 4uLL);
    if (v6)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v16, v6);
      goto LABEL_13;
    }
  }
  v16 = 0;
LABEL_13:
  sub_1C5A6D204((char *)__p, &v16);
  if (v18 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v18 >= 0)
    v13 = v18 & 0x7F;
  else
    v13 = (size_t)__p[1];
  llvm::raw_ostream::write(v9, (const char *)v12, v13);
  v14 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v14)
  {
    llvm::raw_ostream::write(v9, "\n", 1uLL);
  }
  else
  {
    *v14 = 10;
    ++*((_QWORD *)v9 + 4);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  result = v16;
  v16 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_DWORD *)v7 + 1) += 2;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t sub_1C5A7EE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = *a4;
  *a4 = 0;
  *(_DWORD *)(*(_QWORD *)a1 + 4) -= 2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C5A7EEB4(llvm::PrintPassInstrumentation **a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v6;
  llvm *v7;
  llvm *v8;
  void *v9;
  _DWORD *v10;
  void **v11;
  size_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  void *__p[2];
  char v17;

  v6 = *a4;
  *a4 = 0;
  v7 = llvm::PrintPassInstrumentation::print(*a1);
  v8 = v7;
  v9 = (void *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0x16uLL)
  {
    qmemcpy(v9, "Invalidating analysis: ", 23);
    v10 = (_DWORD *)(*((_QWORD *)v7 + 4) + 23);
    *((_QWORD *)v8 + 4) = v10;
  }
  else
  {
    llvm::raw_ostream::write(v7, "Invalidating analysis: ", 0x17uLL);
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  }
  if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
  {
    if (a3)
    {
      memcpy(v10, a2, a3);
      v10 = (_DWORD *)(*((_QWORD *)v8 + 4) + a3);
      *((_QWORD *)v8 + 4) = v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, (const char *)a2, a3);
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 544108320;
    *((_QWORD *)v8 + 4) += 4;
    if (v6)
      goto LABEL_9;
  }
  else
  {
    llvm::raw_ostream::write(v8, " on ", 4uLL);
    if (v6)
    {
LABEL_9:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v15, v6);
      goto LABEL_13;
    }
  }
  v15 = 0;
LABEL_13:
  sub_1C5A6D204((char *)__p, &v15);
  if (v17 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v17 >= 0)
    v12 = v17 & 0x7F;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write(v8, (const char *)v11, v12);
  v13 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v13)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v13 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  result = v15;
  v15 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

llvm::raw_ostream *sub_1C5A7F094(llvm::PrintPassInstrumentation **a1, const void *a2, size_t a3)
{
  llvm *v5;
  llvm *v6;
  void *v7;
  llvm::raw_ostream *result;

  v5 = llvm::PrintPassInstrumentation::print(*a1);
  v6 = v5;
  v7 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v7 > 0x22uLL)
  {
    qmemcpy(v7, "Clearing all analysis results for: ", 35);
    result = (llvm::raw_ostream *)(*((_QWORD *)v5 + 4) + 35);
    *((_QWORD *)v6 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(v5, "Clearing all analysis results for: ", 0x23uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
  }
  if (a3 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
  {
    if (a3)
    {
      memcpy(result, a2, a3);
      result = (llvm::raw_ostream *)(*((_QWORD *)v6 + 4) + a3);
      *((_QWORD *)v6 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(v6, (const char *)a2, a3);
    result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
  }
  if (*((llvm::raw_ostream **)v6 + 3) == result)
    return llvm::raw_ostream::write(v6, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)v6 + 4);
  return result;
}

_QWORD *sub_1C5A7F1A0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6306274((_QWORD *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = 0x7FFFFFFFFFFFFFFFLL;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5A7F264(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[32];
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = operator new();
  sub_1C63064E0((uint64_t)v6, a2);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)v4 = &off_1E8192A50;
  sub_1C63064E0(v4 + 8, (uint64_t)v6);
  *(_QWORD *)(v4 + 40) = v7;
  v7 = 0;
  *(_QWORD *)(v4 + 48) = v8;
  v8 = 0;
  *(_DWORD *)(v4 + 56) = v9;
  v9 = 0;
  *a1 = v4;
  sub_1C54E61C4((uint64_t)&v7);
  MEMORY[0x1CAA32FB4](v7, 8);
  return sub_1C6306568((uint64_t)v6);
}

char *sub_1C5A7F34C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = PreservedCFGCheckerAnalysis]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_435[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C5A7F404(uint64_t result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = *a4;
  *a4 = 0;
  if (v4)
  {
    v5 = result;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t *))(*v4 + 24))(v4) == &llvm::Any::TypeId<llvm::Function const*>::Id)
    {
      (*(void (**)(uint64_t *))(*v4 + 24))(v4);
      llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(v5 + 8), &PreservedCFGCheckerAnalysis::Key, v4[1]);
    }
    return (*(uint64_t (**)(uint64_t *))(*v4 + 8))(v4);
  }
  return result;
}

uint64_t sub_1C5A7F48C(uint64_t result, const void *a2, size_t a3, _QWORD **a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  const llvm::Function *v10;
  uint64_t CachedResultImpl;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Function **v17;
  const llvm::Function *v18;
  int v19;
  int v20;
  const llvm::Function *v21;
  char *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  llvm *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  llvm *v31;
  llvm *v32;
  const llvm::PreservedCFGCheckerInstrumentation::CFG *v33;
  _QWORD v34[4];
  uint64_t v35[3];
  _QWORD v36[4];
  __int16 v37;

  v5 = *a4;
  *a4 = 0;
  if (v5)
  {
    v9 = result;
    if ((_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5) != &llvm::Any::TypeId<llvm::Function const*>::Id
      || !sub_1C4DDA07C(a5, (uint64_t)&llvm::CFGAnalyses::SetKey)
      && !sub_1C4DDA07C(a5, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey))
    {
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
    }
    (*(void (**)(_QWORD *))(*v5 + 24))(v5);
    v10 = (const llvm::Function *)v5[1];
    CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*(_QWORD *)(v9 + 8), (uint64_t)&PreservedCFGCheckerAnalysis::Key, (uint64_t)v10);
    if (!CachedResultImpl)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
    v12 = (llvm::raw_ostream *)(CachedResultImpl + 8);
    if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
    {
      v23 = 0;
      v22 = &byte_1C871356D;
      goto LABEL_17;
    }
    v13 = ***(_QWORD ***)v10;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v17 = (const llvm::Function **)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == v10)
      {
LABEL_16:
        v21 = v17[1];
        v24 = *(_QWORD *)v21;
        v22 = (char *)v21 + 16;
        v23 = v24;
LABEL_17:
        llvm::PreservedCFGCheckerInstrumentation::CFG::CFG(v34, v10, 0);
        v25 = sub_1C6306650((uint64_t)v34, (uint64_t)v12);
        if ((v25 & 1) == 0)
        {
          v26 = llvm::dbgs((llvm *)v25);
          v27 = sub_1C4816AD8(v26, "Error: ");
          v28 = sub_1C6245B98(v27, a2, a3);
          v29 = sub_1C4816AD8(v28, " does not invalidate CFG analyses but CFG changes detected in function @");
          v30 = sub_1C6245B98(v29, v22, v23);
          v31 = sub_1C4816AD8(v30, ":\n");
          v32 = llvm::dbgs(v31);
          llvm::PreservedCFGCheckerInstrumentation::CFG::printDiff(v32, v12, (const llvm::PreservedCFGCheckerInstrumentation::CFG *)v34, v33);
          v37 = 1283;
          v36[0] = "CFG unexpectedly changed by ";
          v36[2] = a2;
          v36[3] = a3;
          llvm::report_fatal_error((uint64_t)v36, 1);
        }
        sub_1C54E61C4((uint64_t)v35);
        MEMORY[0x1CAA32FB4](v35[0], 8);
        sub_1C6306568((uint64_t)v34);
        return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
      }
      v19 = 1;
      while (v18 != (const llvm::Function *)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(const llvm::Function **)(v14 + 16 * v16);
        if (v18 == v10)
        {
          v17 = (const llvm::Function **)(v14 + 16 * v16);
          goto LABEL_16;
        }
      }
    }
    v17 = (const llvm::Function **)(v14 + 16 * v15);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1C5A7F6AC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    return 0;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)a1 + 32 * v4;
  if (v2)
  {
    if ((_DWORD)v4)
    {
      v6 = 32 * v4;
      v7 = *(uint64_t **)a1;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 4;
        v6 -= 32;
        if (!v6)
          goto LABEL_7;
      }
    }
    else
    {
      v7 = *(uint64_t **)a1;
    }
  }
  else
  {
LABEL_7:
    v7 = (uint64_t *)(*(_QWORD *)a1 + 32 * v4);
  }
  v8 = *(_QWORD *)a1 + 32 * v4;
  if (v7 != (uint64_t *)v8)
  {
    v9 = *(_QWORD *)a2;
    LODWORD(v10) = *(_DWORD *)(a2 + 16);
    while (1)
    {
      v11 = *v7;
      v15 = 0;
      if (sub_1C614ECAC(v9, v10, v11, &v15))
      {
        v12 = v15;
        v9 = *(_QWORD *)a2;
        v10 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        v9 = *(_QWORD *)a2;
        v10 = *(unsigned int *)(a2 + 16);
        v12 = *(_QWORD *)a2 + 32 * v10;
      }
      if (v12 == v9 + 32 * v10)
        return 0;
      result = sub_1C5A70A14(v12 + 8, v7 + 1);
      if ((_DWORD)result)
      {
        v14 = v7 + 4;
        v7 = (uint64_t *)v5;
        if (v14 != (uint64_t *)v5)
        {
          v7 = v14;
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v7 += 4;
            if (v7 == (uint64_t *)v5)
            {
              v7 = (uint64_t *)v5;
              break;
            }
          }
        }
        result = 1;
        if (v7 != (uint64_t *)v8)
          continue;
      }
      return result;
    }
  }
  return 1;
}

uint64_t sub_1C5A7F7F0(_BYTE **a1, uint64_t a2, size_t a3, uint64_t **a4)
{
  uint64_t *v6;
  _BYTE *v7;
  uint64_t result;
  BOOL v9;
  void *v10;
  llvm *v11;
  BOOL *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  llvm *v16;
  llvm::raw_ostream *v17;
  uint64_t ****v18;
  uint64_t ***v19;
  llvm *v20;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  llvm *v31;
  llvm *v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  const void *v36;
  size_t v37;
  size_t *v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  char *v43;

  v6 = *a4;
  *a4 = 0;
  v7 = *a1;
  result = sub_1C5A6D844((char *)a2, a3);
  if ((result & 1) != 0
    || a3 == 12 && (*(_QWORD *)a2 == 0x7265696669726556 ? (v9 = *(_DWORD *)(a2 + 8) == 1936941392) : (v9 = 0), v9))
  {
    if (v6)
      return (*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
  }
  else if (v6)
  {
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6) != &llvm::Any::TypeId<llvm::Function const*>::Id
      && (_UNKNOWN *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6) != &llvm::Any::TypeId<llvm::Loop const*>::Id)
    {
      if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6) != &llvm::Any::TypeId<llvm::Module const*>::Id
        && (_UNKNOWN *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6) != &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
      {
        return (*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
      }
      v10 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
      v11 = (llvm *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
      if (v10 == &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id)
        v13 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(v6[1] + 8) + 8) + 40);
      else
        v13 = v6 + 1;
      v14 = *v13;
      if (*v7)
      {
        v31 = llvm::dbgs(v11);
        v32 = v31;
        v33 = *((_QWORD *)v31 + 4);
        if ((unint64_t)(*((_QWORD *)v31 + 3) - v33) > 0x10)
        {
          *(_BYTE *)(v33 + 16) = 32;
          *(_OWORD *)v33 = *(_OWORD *)"Verifying module ";
          v34 = (_BYTE *)(*((_QWORD *)v31 + 4) + 17);
          *((_QWORD *)v32 + 4) = v34;
        }
        else
        {
          llvm::raw_ostream::write(v31, "Verifying module ", 0x11uLL);
          v34 = (_BYTE *)*((_QWORD *)v32 + 4);
        }
        v35 = *(_BYTE *)(v14 + 191);
        if (v35 >= 0)
          v36 = (const void *)(v14 + 168);
        else
          v36 = *(const void **)(v14 + 168);
        if (v35 >= 0)
          v37 = v35 & 0x7F;
        else
          v37 = *(_QWORD *)(v14 + 176);
        if (v37 <= *((_QWORD *)v32 + 3) - (_QWORD)v34)
        {
          if (v37)
          {
            memcpy(v34, v36, v37);
            v34 = (_BYTE *)(*((_QWORD *)v32 + 4) + v37);
            *((_QWORD *)v32 + 4) = v34;
          }
        }
        else
        {
          llvm::raw_ostream::write(v32, (const char *)v36, v37);
          v34 = (_BYTE *)*((_QWORD *)v32 + 4);
        }
        if (*((_BYTE **)v32 + 3) == v34)
        {
          llvm::raw_ostream::write(v32, "\n", 1uLL);
        }
        else
        {
          *v34 = 10;
          ++*((_QWORD *)v32 + 4);
        }
      }
      if (!llvm::verifyModule((llvm *)v14, 0, 0, v12))
        return (*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
      v43 = "Broken module found, compilation aborted!";
LABEL_63:
      llvm::report_fatal_error((llvm *)v43, (const char *)1);
    }
    v15 = (void *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
    v16 = (llvm *)(*(uint64_t (**)(uint64_t *))(*v6 + 24))(v6);
    if (v15 == &llvm::Any::TypeId<llvm::Loop const*>::Id)
      v18 = (uint64_t ****)(**(_QWORD **)(v6[1] + 32) + 56);
    else
      v18 = (uint64_t ****)(v6 + 1);
    v19 = *v18;
    if (!*v7)
      goto LABEL_56;
    v20 = llvm::dbgs(v16);
    v21 = v20;
    v22 = *((_QWORD *)v20 + 4);
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v22) > 0x12)
    {
      *(_DWORD *)(v22 + 15) = 544108393;
      *(_OWORD *)v22 = *(_OWORD *)"Verifying function ";
      *((_QWORD *)v20 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v20, "Verifying function ", 0x13uLL);
    }
    if ((*((_BYTE *)v19 + 23) & 0x10) == 0)
      goto LABEL_51;
    v23 = ***v19;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v19)
      {
LABEL_49:
        v38 = (size_t *)v27[1];
        v41 = *v38;
        v39 = v38 + 2;
        v40 = v41;
        v42 = (_BYTE *)*((_QWORD *)v21 + 4);
        if (v41 <= *((_QWORD *)v21 + 3) - (_QWORD)v42)
        {
          if (v40)
          {
            memcpy(v42, v39, v40);
            v42 = (_BYTE *)(*((_QWORD *)v21 + 4) + v40);
            *((_QWORD *)v21 + 4) = v42;
          }
          goto LABEL_54;
        }
        llvm::raw_ostream::write(v21, (const char *)v39, v40);
LABEL_51:
        v42 = (_BYTE *)*((_QWORD *)v21 + 4);
LABEL_54:
        if (*((_BYTE **)v21 + 3) == v42)
        {
          llvm::raw_ostream::write(v21, "\n", 1uLL);
        }
        else
        {
          *v42 = 10;
          ++*((_QWORD *)v21 + 4);
        }
LABEL_56:
        if (llvm::verifyFunction(v19, 0, v17))
        {
          v43 = "Broken function found, compilation aborted!";
          goto LABEL_63;
        }
        return (*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
      }
      v29 = 1;
      while (v28 != (uint64_t ***)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(uint64_t ****)(v24 + 16 * v26);
        if (v28 == v19)
        {
          v27 = (uint64_t ****)(v24 + 16 * v26);
          goto LABEL_49;
        }
      }
    }
    v27 = (uint64_t ****)(v24 + 16 * v25);
    goto LABEL_49;
  }
  return result;
}

void sub_1C5A7FC34()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5A7FC48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8192A78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5A7FC88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8192A78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5A7FCB0(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 **a4, unsigned __int8 **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  char v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(v9 + 23);
  if (v10 >= 0)
    v11 = *(const void **)(a1 + 16);
  else
    v11 = *(const void **)v9;
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(v9 + 8);
  llvm::InLineChangePrinter::handleFunctionCompare(*(_QWORD *)(a1 + 8), v11, v12, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v13, v14, v8, a4, a5);
}

void sub_1C5A7FCFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  char v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  char v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  size_t v22;
  const char *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  void **v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  void **v30;
  size_t v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *__dst[2];
  char v39;

  v3 = *a1;
  if (a2)
  {
    v6 = *(const char **)(a2 + 24);
    v4 = a2 + 24;
    v5 = v6;
    v7 = *(_BYTE *)(v4 + 23);
    v8 = v7;
    if (v7 >= 0)
      v9 = (const char *)v4;
    else
      v9 = v5;
    v10 = v7 & 0x7F;
    if (v8 >= 0)
      v11 = v10;
    else
      v11 = *(_QWORD *)(v4 + 8);
    if (a3)
      goto LABEL_9;
LABEL_16:
    v17 = "\n";
    v19 = 1;
    goto LABEL_17;
  }
  v9 = "\n";
  v11 = 1;
  if (!a3)
    goto LABEL_16;
LABEL_9:
  v14 = *(const char **)(a3 + 24);
  v12 = a3 + 24;
  v13 = v14;
  v15 = *(_BYTE *)(v12 + 23);
  v16 = v15;
  if (v15 >= 0)
    v17 = (const char *)v12;
  else
    v17 = v13;
  v18 = v15 & 0x7F;
  if (v16 >= 0)
    v19 = v18;
  else
    v19 = *(_QWORD *)(v12 + 8);
LABEL_17:
  v20 = *(_BYTE *)(v3 + 48) == 0;
  if (*(_BYTE *)(v3 + 48))
    v21 = "\x1B[31m-%l\x1B[0m\n";
  else
    v21 = "-%l\n";
  if (*(_BYTE *)(v3 + 48))
    v22 = 13;
  else
    v22 = 4;
  v39 = v22;
  if (v20)
    v23 = "+%l\n";
  else
    v23 = "\x1B[32m+%l\x1B[0m\n";
  memcpy(__dst, v21, v22);
  *((_BYTE *)__dst + v22) = 0;
  v37 = v22;
  memcpy(v36, v23, v22);
  *((_BYTE *)v36 + v22) = 0;
  v35 = 4;
  strcpy((char *)v34, " %l\n");
  v25 = *(llvm::raw_ostream **)(v3 + 40);
  if (v39 >= 0)
    v26 = __dst;
  else
    v26 = (void **)__dst[0];
  if (v39 >= 0)
    v27 = v39 & 0x7F;
  else
    v27 = (uint64_t)__dst[1];
  v28 = (void **)v36[0];
  if (v37 >= 0)
    v28 = v36;
  v29 = v37 & 0x7F;
  if (v37 < 0)
    v29 = (uint64_t)v36[1];
  sub_1C5A7CDF0((uint64_t)__p, (uint64_t)v9, v11, (uint64_t)v17, v19, (uint64_t)v26, v27, v24, (uint64_t)v28, v29, (uint64_t)v34, 4);
  if (v33 >= 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  if (v33 >= 0)
    v31 = v33 & 0x7F;
  else
    v31 = (size_t)__p[1];
  llvm::raw_ostream::write(v25, (const char *)v30, v31);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(__dst[0]);
}

void sub_1C5A7FEF4(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 7;
        sub_1C63054C0((uint64_t)(v4 - 4));
        v7 = v6;
        sub_1C4765410(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

llvm::raw_ostream *sub_1C5A7FF70(char *a1, size_t a2, llvm::raw_ostream *this, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  llvm::raw_ostream *result;

  if (a5)
  {
    v7 = 0;
    while (1)
    {
      v8 = *a4;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 97) >= 0x1A)
        {
          if ((v8 - 65) > 0x19)
            break;
          v9 = -55;
        }
        else
        {
          v9 = -87;
        }
      }
      else
      {
        v9 = -48;
      }
      v10 = v9 + v8;
      if (v10 > 9)
        break;
      v11 = 10 * v7 + v10;
      if (v7 > v11 / 0xA)
        break;
      ++a4;
      v7 = v11;
      if (!--a5)
        goto LABEL_14;
    }
  }
  v11 = -1;
LABEL_14:
  if (a2 >= v11)
    v12 = v11;
  else
    v12 = a2;
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v12 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, a1, v12);
  if (v12)
  {
    result = (llvm::raw_ostream *)memcpy(result, a1, v12);
    *((_QWORD *)this + 4) += v12;
  }
  return result;
}

void sub_1C5A80064(int64x2_t *a1, uint64_t ***a2)
{
  uint64_t ***v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  uint64_t ***v12;
  char *v13;
  size_t v14;
  size_t v15;
  uint64_t **v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  const llvm::BasicBlock *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const llvm::BasicBlock **v49;
  const llvm::BasicBlock *v50;
  int v51;
  int v52;
  const llvm::BasicBlock *v53;
  size_t v54;
  char *v55;
  size_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  const llvm::BasicBlock *v67;
  int v68;
  int v69;
  _QWORD **v70;
  _QWORD *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const llvm::BasicBlock **v77;
  const llvm::BasicBlock *v78;
  int v79;
  int v80;
  unint64_t *v81;
  size_t v82;
  const void *v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  unsigned int v89;
  int v90;
  size_t v91;
  char *v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t ***v110;
  size_t v111;
  char *v112;
  size_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t ****v123;
  uint64_t ***v124;
  int v125;
  int v126;
  uint64_t ***v127;
  char *v128;
  size_t v129;
  size_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  BOOL v136;
  size_t v137;
  _QWORD *v138;
  size_t *v139;
  char *v140;
  _BYTE *v141;
  __int128 v142;
  _BYTE *v143;
  __int128 v144;
  _QWORD *v145;
  unsigned int v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  BOOL v152;
  size_t v153;
  _QWORD *v154;
  size_t *v155;
  char *v156;
  _BYTE *v157;
  __int128 v158;
  unsigned int v159;
  uint64_t ***v160;
  uint64_t v161;
  uint64_t ***v162;
  _DWORD *v163;
  _QWORD *v165;
  uint64_t v166;
  uint64_t ***v167;
  size_t *v168;
  llvm::DCData *v169;
  char *__s1;
  _DWORD *__s1a;
  unsigned __int8 *v172;
  size_t v173;
  _QWORD v174[3];
  char *v175;
  __int128 v176;
  __int128 v177;
  unint64_t v178;
  char *v179;
  size_t v180;
  __int128 v181;
  unint64_t v182;
  __int128 __p;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 __dst;
  unint64_t v188;
  _BYTE v189[44];
  unsigned int v190;
  __int128 v191;
  unint64_t v192;
  void (**v193)(llvm::raw_ostream *__hidden);
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  int v200;
  __int128 *p_p;

  v2 = a2;
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if (a2[9] == (uint64_t **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return;
  }
  v3 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v4 = ***a2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & (v3 ^ (a2 >> 9));
      v8 = (uint64_t ****)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
      {
LABEL_15:
        v12 = v8[1];
        v15 = (size_t)*v12;
        v13 = (char *)(v12 + 2);
        v14 = v15;
        goto LABEL_16;
      }
      v10 = 1;
      while (v9 != (uint64_t ***)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(uint64_t ****)(v5 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (uint64_t ****)(v5 + 16 * v7);
          goto LABEL_15;
        }
      }
    }
    v8 = (uint64_t ****)(v5 + 16 * v6);
    goto LABEL_15;
  }
  v14 = 0;
  v13 = &byte_1C871356D;
LABEL_16:
  if (!llvm::isFunctionInPrintList(v13, v14))
    return;
  v16 = v2[10];
  if (v16)
    v17 = (uint64_t ***)(v16 - 3);
  else
    v17 = 0;
  if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v188) = 0;
    p_dst = &__dst;
    goto LABEL_38;
  }
  v18 = ***v17;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == v17)
      goto LABEL_30;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == v17)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_30;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_30:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_209;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v188 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_37;
  }
  HIBYTE(v188) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_37:
    memmove(p_dst, v28, v27);
LABEL_38:
  *((_BYTE *)p_dst + v27) = 0;
  memset(v189, 0, sizeof(v189));
  v190 = 88;
  if (SHIBYTE(v188) < 0)
  {
    v33 = (void *)__dst;
    sub_1C47EBC30(&v191, (void *)__dst, *((unint64_t *)&__dst + 1));
    operator delete(v33);
  }
  else
  {
    v191 = __dst;
    v192 = v188;
  }
  v34 = (uint64_t ***)v2[10];
  v162 = v2 + 9;
  if (v34 != v2 + 9)
  {
    v159 = v2 >> 4;
    v160 = v2;
    while (1)
    {
      v43 = v34 ? (const llvm::BasicBlock *)(v34 - 3) : 0;
      v44 = v43 >> 4;
      if ((*((_BYTE *)v43 + 23) & 0x10) != 0)
        break;
      v57 = *(_QWORD **)&v189[8];
      if (*(_QWORD *)&v189[8] < *(_QWORD *)&v189[16])
      {
        v54 = 0;
        *(_BYTE *)(*(_QWORD *)&v189[8] + 23) = 0;
LABEL_65:
        v58 = v57;
        goto LABEL_70;
      }
      v54 = 0;
      v55 = &byte_1C871356D;
LABEL_74:
      v61 = sub_1C5A81DE8((int64x2_t *)v189, v55, v54);
LABEL_75:
      *(_QWORD *)&v189[8] = v61;
      if ((*((_BYTE *)v43 + 23) & 0x10) == 0)
      {
        v82 = 0;
        v179 = &byte_1C871356D;
        v180 = 0;
        v85 = &v181;
        HIBYTE(v182) = 0;
        goto LABEL_99;
      }
      v62 = ***(_QWORD ***)v43;
      v63 = *(_QWORD *)(v62 + 152);
      v64 = *(unsigned int *)(v62 + 168);
      if (!(_DWORD)v64)
        goto LABEL_82;
      LODWORD(v65) = (v64 - 1) & (v44 ^ (v43 >> 9));
      v66 = (_QWORD *)(v63 + 16 * v65);
      v67 = (const llvm::BasicBlock *)*v66;
      if ((const llvm::BasicBlock *)*v66 != v43)
      {
        v68 = 1;
        while (v67 != (const llvm::BasicBlock *)-4096)
        {
          v69 = v65 + v68++;
          v65 = v69 & (v64 - 1);
          v67 = *(const llvm::BasicBlock **)(v63 + 16 * v65);
          if (v67 == v43)
          {
            v64 = v65;
            break;
          }
        }
LABEL_82:
        v70 = (_QWORD **)(v63 + 16 * v64 + 8);
        goto LABEL_84;
      }
      v70 = (_QWORD **)(v66 + 1);
LABEL_84:
      v71 = *v70;
      v72 = *v71;
      v179 = (char *)(v71 + 2);
      v180 = v72;
      v73 = ***(_QWORD ***)v43;
      v74 = *(_QWORD *)(v73 + 152);
      v75 = *(unsigned int *)(v73 + 168);
      if (!(_DWORD)v75)
        goto LABEL_90;
      LODWORD(v76) = (v75 - 1) & (v44 ^ (v43 >> 9));
      v77 = (const llvm::BasicBlock **)(v74 + 16 * v76);
      v78 = *v77;
      if (*v77 != v43)
      {
        v79 = 1;
        while (v78 != (const llvm::BasicBlock *)-4096)
        {
          v80 = v76 + v79++;
          v76 = v80 & (v75 - 1);
          v78 = *(const llvm::BasicBlock **)(v74 + 16 * v76);
          if (v78 == v43)
          {
            v77 = (const llvm::BasicBlock **)(v74 + 16 * v76);
            goto LABEL_91;
          }
        }
LABEL_90:
        v77 = (const llvm::BasicBlock **)(v74 + 16 * v75);
      }
LABEL_91:
      v81 = (unint64_t *)v77[1];
      v84 = *v81;
      v83 = v81 + 2;
      v82 = v84;
      if (v84 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_209;
      if (v82 >= 0x17)
      {
        v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v86 = v82 | 7;
        v87 = v86 + 1;
        v85 = (__int128 *)operator new(v86 + 1);
        *((_QWORD *)&v181 + 1) = v82;
        v182 = v87 | 0x8000000000000000;
        *(_QWORD *)&v181 = v85;
      }
      else
      {
        HIBYTE(v182) = v82;
        v85 = &v181;
        if (!v82)
        {
          v85 = &v181;
          goto LABEL_99;
        }
      }
      memmove(v85, v83, v82);
LABEL_99:
      *((_BYTE *)v85 + v82) = 0;
      __p = 0uLL;
      v184 = 0;
      llvm::DCData::DCData((llvm::DCData *)&v185, v43);
      v194 = 0;
      v198 = 0;
      v199 = 0;
      v193 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
      p_p = &__p;
      v200 = 0;
      v196 = 0;
      v197 = 0;
      v195 = 0;
      llvm::BasicBlock::print(v43, (llvm::raw_ostream *)&v193, 0, 1, 1);
      v193 = off_1E81A6E70;
      if (v200 == 1 && v195)
        MEMORY[0x1CAA32F9C](v195, 0x1000C8077774924);
      v88 = v180;
      __s1 = v179;
      v89 = *(_DWORD *)&v189[32];
      if (!*(_DWORD *)&v189[32])
      {
        *(_QWORD *)&v189[36] = 0;
        v109 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v109)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v109[16] = 2;
        *(_QWORD *)&v189[24] = v109;
        v89 = 16;
        *(_DWORD *)&v189[32] = 16;
      }
      v167 = v34;
      v90 = 0;
      if (v88)
      {
        v91 = v88;
        v92 = __s1;
        do
        {
          v93 = *v92++;
          v90 = 33 * v90 + v93;
          --v91;
        }
        while (v91);
      }
      v94 = v89 - 1;
      v95 = *(_QWORD *)&v189[24];
      v96 = *(_QWORD *)&v189[24] + 8 * v89 + 8;
      v97 = v190;
      v98 = -1;
      v99 = 1;
      v100 = v90;
      while (1)
      {
        v101 = v100 & v94;
        v102 = *(_QWORD **)(v95 + 8 * v101);
        if (!v102)
          break;
        if (v102 == (_QWORD *)-8)
        {
          if (v98 == -1)
            v98 = v100 & v94;
        }
        else if (*(_DWORD *)(v96 + 4 * v101) == v90 && v88 == *v102 && (!v88 || !memcmp(__s1, (char *)v102 + v97, v88)))
        {
          goto LABEL_119;
        }
        v100 = v99 + v101;
        ++v99;
      }
      v103 = v98;
      if (v98 == -1)
      {
        v103 = v101;
        v101 = v101;
      }
      else
      {
        v101 = v98;
      }
      *(_DWORD *)(v96 + 4 * v103) = v90;
      v102 = *(_QWORD **)(v95 + 8 * v101);
LABEL_119:
      v3 = v159;
      v2 = v160;
      if (!v102)
        goto LABEL_122;
      if (v102 == (_QWORD *)-8)
      {
        --*(_DWORD *)&v189[40];
LABEL_122:
        v104 = (char *)operator new(v88 + 89, (std::align_val_t)8uLL);
        v105 = v104;
        v106 = v104 + 88;
        if (v88)
          memcpy(v104 + 88, __s1, v88);
        v106[v88] = 0;
        *(_QWORD *)v105 = v88;
        *(_OWORD *)(v105 + 8) = v181;
        *((_QWORD *)v105 + 3) = v182;
        v181 = 0uLL;
        v182 = 0;
        *((_OWORD *)v105 + 2) = __p;
        v107 = v184;
        __p = 0uLL;
        v184 = 0;
        v108 = v185;
        *((_QWORD *)v105 + 6) = v107;
        *((_QWORD *)v105 + 7) = v108;
        *((_OWORD *)v105 + 4) = v186;
        v185 = 0;
        *(_QWORD *)&v186 = 0;
        DWORD2(v186) = 0;
        *(_QWORD *)(v95 + 8 * v101) = v105;
        ++*(_DWORD *)&v189[36];
        llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v189[24], v101);
      }
      sub_1C58F7164((uint64_t)&v185);
      if (SHIBYTE(v184) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v182) < 0)
        operator delete((void *)v181);
      v34 = (uint64_t ***)v167[1];
      if (v34 == v162)
        goto LABEL_42;
    }
    v45 = ***(_QWORD ***)v43;
    v46 = *(_QWORD *)(v45 + 152);
    v47 = *(unsigned int *)(v45 + 168);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = (v47 - 1) & (v44 ^ (v43 >> 9));
      v49 = (const llvm::BasicBlock **)(v46 + 16 * v48);
      v50 = *v49;
      if (*v49 == v43)
        goto LABEL_61;
      v51 = 1;
      while (v50 != (const llvm::BasicBlock *)-4096)
      {
        v52 = v48 + v51++;
        v48 = v52 & (v47 - 1);
        v50 = *(const llvm::BasicBlock **)(v46 + 16 * v48);
        if (v50 == v43)
        {
          v49 = (const llvm::BasicBlock **)(v46 + 16 * v48);
          goto LABEL_61;
        }
      }
    }
    v49 = (const llvm::BasicBlock **)(v46 + 16 * v47);
LABEL_61:
    v53 = v49[1];
    v56 = *(_QWORD *)v53;
    v55 = (char *)v53 + 16;
    v54 = v56;
    v57 = *(_QWORD **)&v189[8];
    if (*(_QWORD *)&v189[8] < *(_QWORD *)&v189[16])
    {
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_209;
      if (v54 >= 0x17)
      {
        v59 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v59 = v54 | 7;
        v60 = v59 + 1;
        v58 = operator new(v59 + 1);
        v57[1] = v54;
        v57[2] = v60 | 0x8000000000000000;
        *v57 = v58;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)&v189[8] + 23) = v54;
        v58 = v57;
        if (!v54)
          goto LABEL_65;
      }
      memmove(v58, v55, v54);
LABEL_70:
      *((_BYTE *)v58 + v54) = 0;
      v61 = (uint64_t)(v57 + 3);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_42:
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
  {
    v114 = (_BYTE *)a1->i64[1];
    if ((unint64_t)v114 < a1[1].i64[0])
    {
      v111 = 0;
      v114[23] = 0;
      goto LABEL_141;
    }
    v111 = 0;
    v112 = &byte_1C871356D;
    goto LABEL_151;
  }
  v35 = ***v2;
  v36 = *(_QWORD *)(v35 + 152);
  v37 = *(unsigned int *)(v35 + 168);
  if ((_DWORD)v37)
  {
    LODWORD(v38) = (v37 - 1) & (v3 ^ (v2 >> 9));
    v39 = (uint64_t ****)(v36 + 16 * v38);
    v40 = *v39;
    if (*v39 == v2)
      goto LABEL_137;
    v41 = 1;
    while (v40 != (uint64_t ***)-4096)
    {
      v42 = v38 + v41++;
      v38 = v42 & (v37 - 1);
      v40 = *(uint64_t ****)(v36 + 16 * v38);
      if (v40 == v2)
      {
        v39 = (uint64_t ****)(v36 + 16 * v38);
        goto LABEL_137;
      }
    }
  }
  v39 = (uint64_t ****)(v36 + 16 * v37);
LABEL_137:
  v110 = v39[1];
  v113 = (size_t)*v110;
  v112 = (char *)(v110 + 2);
  v111 = v113;
  v114 = (_BYTE *)a1->i64[1];
  if ((unint64_t)v114 < a1[1].i64[0])
  {
    if (v111 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v111 >= 0x17)
      {
        v116 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v116 = v111 | 7;
        v117 = v116 + 1;
        v115 = operator new(v116 + 1);
        *((_QWORD *)v114 + 1) = v111;
        *((_QWORD *)v114 + 2) = v117 | 0x8000000000000000;
        *(_QWORD *)v114 = v115;
      }
      else
      {
        v114[23] = v111;
        v115 = v114;
        if (!v111)
        {
LABEL_141:
          v115 = v114;
LABEL_146:
          v115[v111] = 0;
          v118 = (uint64_t)(v114 + 24);
          goto LABEL_152;
        }
      }
      memmove(v115, v112, v111);
      goto LABEL_146;
    }
LABEL_209:
    abort();
  }
LABEL_151:
  v118 = sub_1C5A81DE8(a1, v112, v111);
LABEL_152:
  a1->i64[1] = v118;
  if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
  {
    v129 = 0;
    v128 = &byte_1C871356D;
    goto LABEL_161;
  }
  v119 = ***v2;
  v120 = *(_QWORD *)(v119 + 152);
  v121 = *(unsigned int *)(v119 + 168);
  if (!(_DWORD)v121)
    goto LABEL_159;
  LODWORD(v122) = (v121 - 1) & (v3 ^ (v2 >> 9));
  v123 = (uint64_t ****)(v120 + 16 * v122);
  v124 = *v123;
  if (*v123 != v2)
  {
    v125 = 1;
    while (v124 != (uint64_t ***)-4096)
    {
      v126 = v122 + v125++;
      v122 = v126 & (v121 - 1);
      v124 = *(uint64_t ****)(v120 + 16 * v122);
      if (v124 == v2)
      {
        v123 = (uint64_t ****)(v120 + 16 * v122);
        goto LABEL_160;
      }
    }
LABEL_159:
    v123 = (uint64_t ****)(v120 + 16 * v121);
  }
LABEL_160:
  v127 = v123[1];
  v130 = (size_t)*v127;
  v128 = (char *)(v127 + 2);
  v129 = v130;
LABEL_161:
  v172 = (unsigned __int8 *)v128;
  v173 = v129;
  memset(v174, 0, sizeof(v174));
  v161 = (uint64_t)&a1[1].i64[1];
  sub_1C484333C(v174, *(uint64_t *)v189, *(uint64_t *)&v189[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v189[8] - *(_QWORD *)v189) >> 3));
  v175 = 0;
  *(_QWORD *)&v176 = 0;
  *((_QWORD *)&v176 + 1) = 0x5800000000;
  if (*(_DWORD *)&v189[36])
  {
    if (*(_DWORD *)&v189[32])
      v131 = *(unsigned int *)&v189[32];
    else
      v131 = 16;
    v132 = (char *)sub_1C5074000((v131 + 1), 0xCuLL);
    v133 = 0;
    v134 = &v132[8 * v131];
    *(_QWORD *)v134 = 2;
    v165 = v134 + 8;
    v166 = v131;
    v175 = v132;
    LODWORD(v176) = v131;
    v163 = (_DWORD *)(*(_QWORD *)&v189[24] + 8 * v131 + 8);
    *(_QWORD *)((char *)&v176 + 4) = *(_QWORD *)&v189[36];
    do
    {
      v135 = *(_QWORD *)(*(_QWORD *)&v189[24] + 8 * v133);
      if (v135)
        v136 = v135 == -8;
      else
        v136 = 1;
      if (v136)
      {
        *(_QWORD *)&v175[8 * v133] = v135;
      }
      else
      {
        v137 = *(_QWORD *)v135;
        v138 = operator new(*(_QWORD *)v135 + 89, (std::align_val_t)8uLL);
        v139 = v138;
        v140 = (char *)(v138 + 11);
        if (v137)
          memcpy(v138 + 11, (const void *)(v135 + 88), v137);
        v140[v137] = 0;
        *v139 = v137;
        v141 = v139 + 1;
        if (*(char *)(v135 + 31) < 0)
        {
          sub_1C47EBC30(v141, *(void **)(v135 + 8), *(_QWORD *)(v135 + 16));
        }
        else
        {
          v142 = *(_OWORD *)(v135 + 8);
          v139[3] = *(_QWORD *)(v135 + 24);
          *(_OWORD *)v141 = v142;
        }
        v143 = v139 + 4;
        if (*(char *)(v135 + 55) < 0)
        {
          sub_1C47EBC30(v143, *(void **)(v135 + 32), *(_QWORD *)(v135 + 40));
        }
        else
        {
          v144 = *(_OWORD *)(v135 + 32);
          v139[6] = *(_QWORD *)(v135 + 48);
          *(_OWORD *)v143 = v144;
        }
        v168 = v139;
        v139[7] = 0;
        v139[8] = 0;
        v145 = v139 + 7;
        v145[2] = 0x2000000000;
        if (*(_DWORD *)(v135 + 68))
        {
          v146 = *(_DWORD *)(v135 + 64);
          if (v146)
            v147 = v146;
          else
            v147 = 16;
          v148 = (char *)sub_1C5074000((v147 + 1), 0xCuLL);
          v149 = 0;
          v150 = &v148[8 * v147];
          *(_QWORD *)v150 = 2;
          __s1a = v150 + 8;
          v168[7] = (size_t)v148;
          *((_DWORD *)v168 + 16) = v147;
          v169 = (llvm::DCData *)(*(_QWORD *)(v135 + 56) + 8 * v147 + 8);
          *(size_t *)((char *)v168 + 68) = *(_QWORD *)(v135 + 68);
          do
          {
            v151 = *(_QWORD *)(*(_QWORD *)(v135 + 56) + 8 * v149);
            if (v151)
              v152 = v151 == -8;
            else
              v152 = 1;
            if (v152)
            {
              *(_QWORD *)(*v145 + 8 * v149) = v151;
            }
            else
            {
              v153 = *(_QWORD *)v151;
              v154 = operator new(*(_QWORD *)v151 + 33, (std::align_val_t)8uLL);
              v155 = v154;
              v156 = (char *)(v154 + 4);
              if (v153)
                memcpy(v154 + 4, (const void *)(v151 + 32), v153);
              v156[v153] = 0;
              *v155 = v153;
              v157 = v155 + 1;
              if (*(char *)(v151 + 31) < 0)
              {
                sub_1C47EBC30(v157, *(void **)(v151 + 8), *(_QWORD *)(v151 + 16));
              }
              else
              {
                v158 = *(_OWORD *)(v151 + 8);
                v155[3] = *(_QWORD *)(v151 + 24);
                *(_OWORD *)v157 = v158;
              }
              *(_QWORD *)(*v145 + 8 * v149) = v155;
              __s1a[v149] = *((_DWORD *)v169 + v149);
            }
            ++v149;
          }
          while (v147 != v149);
        }
        v131 = v166;
        *(_QWORD *)&v175[8 * v133] = v168;
        *((_DWORD *)v165 + v133) = v163[v133];
      }
      ++v133;
    }
    while (v133 != v131);
  }
  if (SHIBYTE(v192) < 0)
  {
    sub_1C47EBC30(&v177, (void *)v191, *((unint64_t *)&v191 + 1));
  }
  else
  {
    v177 = v191;
    v178 = v192;
  }
  sub_1C63068EC(v161, v172, v173, (uint64_t)v174);
  if (SHIBYTE(v178) < 0)
    operator delete((void *)v177);
  sub_1C630553C((uint64_t)&v175);
  v193 = (void (**)(llvm::raw_ostream *__hidden))v174;
  sub_1C4765410((void ***)&v193);
  if (SHIBYTE(v192) < 0)
    operator delete((void *)v191);
  sub_1C630553C((uint64_t)&v189[24]);
  v193 = (void (**)(llvm::raw_ostream *__hidden))v189;
  sub_1C4765410((void ***)&v193);
}

char *sub_1C5A80D7C(const void *a1, size_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v6 = (char *)operator new(a2 + 89, (std::align_val_t)8uLL);
  v7 = v6;
  v8 = v6 + 88;
  if (a2)
    memcpy(v6 + 88, a1, a2);
  v8[a2] = 0;
  *(_QWORD *)v7 = a2;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v9 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v7 + 3) = *(_QWORD *)(a3 + 16);
  *((_QWORD *)v7 + 4) = v9;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *((_QWORD *)v7 + 10) = *(_QWORD *)(a3 + 72);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return v7;
}

void sub_1C5A80E28()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5A80E3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8192B78;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5A80E70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8192B78;
  a2[1] = v2;
  return result;
}

void sub_1C5A80E8C(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;

  llvm::DotCfgChangeReporter::handleFunctionCompare(*(_QWORD *)(a1 + 8), (uint64_t)"", 0, (uint64_t)" ", 1, "Initial IR", 0xAuLL, a8, (uint64_t)"", 0, *a2, v8, *a3, a4, a5);
}

void sub_1C5A80EEC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5A80F00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8192BC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5A80F40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8192BC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5A80F68(uint64_t a1, char *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v8 = *a2;
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(v10 + 23);
  if (v11 >= 0)
    v12 = *(_QWORD *)(a1 + 16);
  else
    v12 = *(_QWORD *)v10;
  if (v11 >= 0)
    v13 = v11 & 0x7F;
  else
    v13 = *(_QWORD *)(v10 + 8);
  llvm::DotCfgChangeReporter::handleFunctionCompare(*(_QWORD *)(a1 + 8), v12, v13, (uint64_t)" Pass ", 6, **(char ***)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a8, (uint64_t)" on ", 4, v8, v14, v9, a4, a5);
}

char *sub_1C5A80FE0(int64x2_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t *v20;

  v2 = a1->i64[0];
  v1 = a1->u64[1];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1 - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  v6 = a1[1].i64[0];
  if (0xDB6DB6DB6DB6DB6ELL * ((v6 - v2) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((v6 - v2) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - v2) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v4;
  v20 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x492492492492492)
      sub_1C4764EE4();
    v8 = (char *)operator new(56 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[56 * v3];
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_QWORD *)v9 + 6) = 0;
  *(_OWORD *)v9 = 0u;
  *((_DWORD *)v9 + 11) = 88;
  if (v1 == v2)
  {
    v10 = vdupq_n_s64(v1);
    v11 = &v8[56 * v3];
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = &v9[v12];
      v14 = v1 + v12;
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 5) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v1 + v12 - 56);
      *((_QWORD *)v13 - 5) = *(_QWORD *)(v1 + v12 - 40);
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *((_QWORD *)v13 - 4) = *(_QWORD *)(v1 + v12 - 32);
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v1 + v12 - 24);
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_DWORD *)(v14 - 16) = 0;
      v12 -= 56;
    }
    while (v1 + v12 != v2);
    v10 = *a1;
    v6 = a1[1].i64[0];
    v11 = &v9[v12];
  }
  v15 = v9 + 56;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v9 + 56);
  v18 = v10;
  a1[1].i64[0] = (uint64_t)&v8[56 * v7];
  v19 = v6;
  v17 = v10.i64[0];
  sub_1C6306C78((uint64_t)&v17);
  return v15;
}

void sub_1C5A81170(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[44];
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  char v24;
  void **v25;

  if (*(_QWORD *)a2)
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v22);
  else
    v22 = 0;
  sub_1C5A6D204((char *)v23, &v22);
  v8 = v22;
  v22 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (sub_1C5A6D844(a3, a4))
  {
    if (*(_BYTE *)(a1 + 33))
      (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 64))(a1, a3, a4, v23);
  }
  else
  {
    if (*(_QWORD *)a2)
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v21);
    else
      v21 = 0;
    v9 = sub_1C5A725D0(&v21, a3, a4);
    v10 = v21;
    v21 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if ((v9 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 16);
      memset(v19, 0, sizeof(v19));
      v20 = 88;
      if (*(_QWORD *)a2)
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v18);
      else
        v18 = 0;
      (*(void (**)(uint64_t, uint64_t *, char *, size_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, &v18, a3, a4, v19);
      v12 = v18;
      v18 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (sub_1C6306DAC(v11 - 32, (uint64_t)&v19[24]))
      {
        if (*(_BYTE *)(a1 + 33))
          (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 32))(a1, a3, a4, v23);
      }
      else
      {
        v13 = v11 - 56;
        if (*(_QWORD *)a2)
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v17);
        else
          v17 = 0;
        (*(void (**)(uint64_t, char *, size_t, void **, uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a3, a4, v23, v13, v19, &v17);
        v14 = v17;
        v17 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      sub_1C63054C0((uint64_t)&v19[24]);
      v25 = (void **)v19;
      sub_1C4765410(&v25);
    }
    else if (*(_BYTE *)(a1 + 33))
    {
      (*(void (**)(uint64_t, char *, size_t, void **))(*(_QWORD *)a1 + 56))(a1, a3, a4, v23);
    }
  }
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v15 - 56;
  sub_1C63054C0(v15 - 32);
  *(_QWORD *)v19 = v16;
  sub_1C4765410((void ***)v19);
  *(_QWORD *)(a1 + 16) = v16;
  if (v24 < 0)
    operator delete(v23[0]);
}

void sub_1C5A813EC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = (_QWORD *)*a1;
  if (*(_BYTE *)(*a1 + 33))
    (*(void (**)(_QWORD))(*v1 + 48))(*a1);
  v2 = v1[2];
  v3 = (void **)(v2 - 56);
  sub_1C63054C0(v2 - 32);
  v4 = v3;
  sub_1C4765410(&v4);
  v1[2] = v3;
}

uint64_t sub_1C5A81448(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

uint64_t sub_1C5A8157C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

uint64_t sub_1C5A816B0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<std::string>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

void sub_1C5A817E4(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 7;
        sub_1C63052A8((uint64_t)(v4 - 4));
        v7 = v6;
        sub_1C4765410(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C5A81860(int64x2_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t *v20;

  v2 = a1->i64[0];
  v1 = a1->u64[1];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1 - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  v6 = a1[1].i64[0];
  if (0xDB6DB6DB6DB6DB6ELL * ((v6 - v2) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((v6 - v2) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - v2) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v4;
  v20 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x492492492492492)
      sub_1C4764EE4();
    v8 = (char *)operator new(56 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[56 * v3];
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_QWORD *)v9 + 6) = 0;
  *(_OWORD *)v9 = 0u;
  *((_DWORD *)v9 + 11) = 88;
  if (v1 == v2)
  {
    v10 = vdupq_n_s64(v1);
    v11 = &v8[56 * v3];
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = &v9[v12];
      v14 = v1 + v12;
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 5) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v1 + v12 - 56);
      *((_QWORD *)v13 - 5) = *(_QWORD *)(v1 + v12 - 40);
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *((_QWORD *)v13 - 4) = *(_QWORD *)(v1 + v12 - 32);
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v1 + v12 - 24);
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_DWORD *)(v14 - 16) = 0;
      v12 -= 56;
    }
    while (v1 + v12 != v2);
    v10 = *a1;
    v6 = a1[1].i64[0];
    v11 = &v9[v12];
  }
  v15 = v9 + 56;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v9 + 56);
  v18 = v10;
  a1[1].i64[0] = (uint64_t)&v8[56 * v7];
  v19 = v6;
  v17 = v10.i64[0];
  sub_1C63070EC((uint64_t)&v17);
  return v15;
}

uint64_t sub_1C5A819F0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

uint64_t sub_1C5A81B24(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::Any,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

uint64_t sub_1C5A81C58(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;

  v19 = 0;
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v19);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v4[32 * v6];
  *(_QWORD *)v7 = *a2;
  *((_QWORD *)v7 + 3) = (char *)&llvm::detail::UniqueFunctionBase<void,llvm::StringRef,llvm::PreservedAnalyses const&>::CallbacksHolder<llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},llvm::ChangeReporter<llvm::IRDataT<llvm::EmptyData>>::registerRequiredCallbacks(llvm::PassInstrumentationCallbacks &)::{lambda(llvm::StringRef,llvm::PreservedAnalyses const&)#1},void>::Callbacks
                      + 2;
  v8 = *(_QWORD **)a1;
  if ((_DWORD)v6)
  {
    v9 = 32 * v6;
    v10 = v4;
    do
    {
      *((_QWORD *)v10 + 3) = 0;
      v11 = v8[3];
      *((_QWORD *)v10 + 3) = v11;
      if (v8[3] >= 8uLL)
      {
        if ((v11 & 2) != 0 && (v11 & 4) != 0)
        {
          (*(void (**)(char *, _QWORD *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v10, v8);
        }
        else
        {
          v12 = *(_OWORD *)v8;
          *((_QWORD *)v10 + 2) = v8[2];
          *(_OWORD *)v10 = v12;
        }
        v8[3] = 0;
      }
      v8 += 4;
      v10 += 32;
      v9 -= 32;
    }
    while (v9);
    v8 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 32 * v13;
      v15 = (char *)(v8 - 4);
      do
      {
        sub_1C5052E10(&v15[v14]);
        v14 -= 32;
      }
      while (v14);
      v8 = *(_QWORD **)a1;
    }
  }
  v16 = v19;
  if (v8 != (_QWORD *)(a1 + 16))
    free(v8);
  *(_QWORD *)a1 = v5;
  v17 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[32 * v17 - 32];
}

void sub_1C5A81D8C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = (_QWORD *)*a1;
  if (*(_BYTE *)(*a1 + 33))
    (*(void (**)(_QWORD))(*v1 + 48))(*a1);
  v2 = v1[2];
  v3 = (void **)(v2 - 56);
  sub_1C63052A8(v2 - 32);
  v4 = v3;
  sub_1C4765410(&v4);
  v1[2] = v3;
}

uint64_t sub_1C5A81DE8(int64x2_t *a1, const void *a2, size_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_24;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v4;
  v26 = a1 + 1;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v3];
  v24.i64[0] = (uint64_t)v10;
  v24.i64[1] = (uint64_t)v10;
  v25 = &v9[24 * v8];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_24:
    abort();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    v13 = (char *)operator new(v11 + 1);
    *((_QWORD *)v10 + 1) = a3;
    *((_QWORD *)v10 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)v10 = v13;
    v10 = v13;
    goto LABEL_18;
  }
  v10[23] = a3;
  if (a3)
LABEL_18:
    memmove(v10, a2, a3);
  v10[a3] = 0;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  v16 = v24.i64[1];
  v17 = v24.i64[0];
  if (v14 == a1->i64[0])
  {
    v19 = vdupq_n_s64(v14);
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v17 - 8) = *(_QWORD *)(v14 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      v14 -= 24;
    }
    while (v14 != v15);
    v19 = *a1;
  }
  v20 = v16 + 24;
  a1->i64[0] = v17;
  a1->i64[1] = v16 + 24;
  v24 = v19;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  v25 = v21;
  v23 = v19.i64[0];
  sub_1C4D868F0((uint64_t)&v23);
  return v20;
}

void sub_1C5A81F98()
{
  uint64_t i;

  for (i = 0; i != -72; i -= 24)
  {
    if (*((char *)&unk_1ED81ACC8 + i + 207) < 0)
      operator delete(*(void **)((char *)&unk_1ED81ACC8 + i + 184));
  }
}

uint64_t sub_1C5A81FDC()
{
  unsigned __int32 v0;
  unint64_t v1;
  int v3;
  int *v4;
  int v5;
  int v6;
  __n128 v7;
  __n128 v8;
  _QWORD v9[21];

  v9[20] = *MEMORY[0x1E0C80C00];
  v7.n128_u32[0] = 1;
  LOBYTE(v4) = 0;
  v8.n128_u64[0] = (unint64_t)&v4;
  sub_1C63055B8(&v7, (char **)&v8);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PreservedCFGCheckerInstrumentation::VerifyPreservedCFG, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Print changed IRs";
  v7.n128_u64[1] = 17;
  v5 = 1;
  v6 = 1;
  v3 = 0;
  v4 = &v3;
  v8.n128_u64[0] = (unint64_t)v9;
  v8.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8, (uint64_t)v9, 8uLL, 40);
  v0 = v8.n128_u32[2];
  v1 = v8.n128_u64[0] + 40 * v8.n128_u32[2];
  *(_QWORD *)v1 = "quiet";
  *(_QWORD *)(v1 + 8) = 5;
  *(_DWORD *)(v1 + 16) = 2;
  *(_QWORD *)(v1 + 24) = "Run in quiet mode";
  *(_QWORD *)(v1 + 32) = 17;
  *(_QWORD *)(v1 + 40) = "diff";
  *(_QWORD *)(v1 + 48) = 4;
  *(_DWORD *)(v1 + 56) = 3;
  *(_QWORD *)(v1 + 64) = "Display patch-like changes";
  *(_QWORD *)(v1 + 72) = 26;
  *(_QWORD *)(v1 + 80) = "diff-quiet";
  *(_QWORD *)(v1 + 88) = 10;
  *(_DWORD *)(v1 + 96) = 4;
  *(_QWORD *)(v1 + 104) = "Display patch-like changes in quiet mode";
  *(_QWORD *)(v1 + 112) = 40;
  *(_QWORD *)(v1 + 120) = "cdiff";
  *(_QWORD *)(v1 + 128) = 5;
  *(_DWORD *)(v1 + 136) = 5;
  *(_QWORD *)(v1 + 144) = "Display patch-like changes with color";
  *(_QWORD *)(v1 + 152) = 37;
  *(_QWORD *)(v1 + 160) = "cdiff-quiet";
  *(_QWORD *)(v1 + 168) = 11;
  *(_DWORD *)(v1 + 176) = 6;
  *(_QWORD *)(v1 + 184) = "Display patch-like changes in quiet mode with color";
  *(_QWORD *)(v1 + 192) = 51;
  *(_QWORD *)(v1 + 200) = "dot-cfg";
  *(_QWORD *)(v1 + 208) = 7;
  *(_DWORD *)(v1 + 216) = 7;
  *(_QWORD *)(v1 + 224) = "Create a website with graphical changes";
  *(_QWORD *)(v1 + 232) = 39;
  *(_QWORD *)(v1 + 240) = "dot-cfg-quiet";
  *(_QWORD *)(v1 + 248) = 13;
  *(_DWORD *)(v1 + 256) = 8;
  *(_QWORD *)(v1 + 264) = "Create a website with graphical changes in quiet mode";
  *(_QWORD *)(v1 + 272) = 53;
  *(_QWORD *)(v1 + 280) = "";
  *(_QWORD *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 1;
  *(_QWORD *)(v1 + 304) = "";
  *(_QWORD *)(v1 + 312) = 0;
  v8.n128_u32[2] = v0 + 8;
  sub_1C630568C((__int128 *)&v7, &v6, &v5, &v4, (uint64_t)&v8);
  if ((_QWORD *)v8.n128_u64[0] != v9)
    free((void *)v8.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6303290, &qword_1ED834DC8, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"pass names";
  v8.n128_u64[1] = 10;
  v7.n128_u64[0] = (unint64_t)"Only consider IR changes for passes whose names match for the print-changed option";
  v7.n128_u64[1] = 82;
  LODWORD(v4) = 1;
  v6 = 1;
  sub_1C6305918((__int128 *)&v8, &v7, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED81AE58, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Print before passes that change them";
  v8.n128_u64[1] = 36;
  LOBYTE(v6) = 0;
  v7.n128_u64[0] = (unint64_t)&v6;
  LODWORD(v4) = 1;
  sub_1C6305A50(&v8, (char **)&v7, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED81AD98, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"diff";
  v8.n128_u64[0] = (unint64_t)"system diff used by change reporters";
  v8.n128_u64[1] = 36;
  sub_1C47AD050((uint64_t)&qword_1ED81AF30, 0, 0);
  qword_1ED81AFB8 = 0;
  qword_1ED81AFB0 = 0;
  unk_1ED81AFC0 = 0;
  qword_1ED81AFD0 = 0;
  qword_1ED81AFE0 = 0;
  qword_1ED81AFD8 = 0;
  byte_1ED81AFE8 = 0;
  qword_1ED81AFC8 = (uint64_t)&unk_1E819E950;
  qword_1ED81AF30 = (uint64_t)&unk_1E819E480;
  qword_1ED81AFF0 = (uint64_t)&unk_1E819E970;
  qword_1ED81AFF8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED81B010 = (uint64_t)&qword_1ED81AFF8;
  sub_1C6305AF4(&v4, (const char **)&v7, &v8);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED81AF30);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED81AF30, &dword_1C475E000);
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"dot";
  v8.n128_u64[0] = (unint64_t)"system dot used by change reporters";
  v8.n128_u64[1] = 35;
  sub_1C47AD050((uint64_t)&qword_1ED81B018, 0, 0);
  qword_1ED81B0A0 = 0;
  qword_1ED81B098 = 0;
  qword_1ED81B0A8 = 0;
  qword_1ED81B0B8 = 0;
  qword_1ED81B0C8 = 0;
  qword_1ED81B0C0 = 0;
  byte_1ED81B0D0 = 0;
  qword_1ED81B0B0 = (uint64_t)&unk_1E819E950;
  qword_1ED81B018 = (uint64_t)&unk_1E819E480;
  qword_1ED81B0D8 = (uint64_t)&unk_1E819E970;
  qword_1ED81B0E0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED81B0F8 = (uint64_t)&qword_1ED81B0E0;
  sub_1C6305B68(&v4, (const char **)&v7, &v8);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED81B018);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED81B018, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Color for dot-cfg before elements.";
  v8.n128_u64[1] = 34;
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"red";
  sub_1C47AD050((uint64_t)&BeforeColour, 0, 0);
  qword_1ED8350A0 = 0;
  unk_1ED8350A8 = 0;
  qword_1ED8350C8 = 0;
  unk_1ED8350D0 = 0;
  qword_1ED8350B8 = (uint64_t)&unk_1E819E950;
  unk_1ED8350C0 = 0;
  byte_1ED8350D8 = 0;
  unk_1ED8350B0 = 0;
  BeforeColour = (uint64_t)&unk_1E819E480;
  qword_1ED8350E0 = (uint64_t)&unk_1E819E970;
  qword_1ED8350E8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED835100 = (uint64_t)&qword_1ED8350E8;
  sub_1C6305BDC((__int128 *)&v8, &v4, (const char **)&v7);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&BeforeColour);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &BeforeColour, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Color for dot-cfg after elements.";
  v8.n128_u64[1] = 33;
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"forestgreen";
  sub_1C47AD050((uint64_t)&AfterColour, 0, 0);
  qword_1ED835188 = 0;
  unk_1ED835190 = 0;
  qword_1ED8351B0 = 0;
  unk_1ED8351B8 = 0;
  qword_1ED8351A0 = (uint64_t)&unk_1E819E950;
  unk_1ED8351A8 = 0;
  byte_1ED8351C0 = 0;
  unk_1ED835198 = 0;
  AfterColour = (uint64_t)&unk_1E819E480;
  qword_1ED8351C8 = (uint64_t)&unk_1E819E970;
  qword_1ED8351D0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8351E8 = (uint64_t)&qword_1ED8351D0;
  sub_1C6305C4C((__int128 *)&v8, &v4, (const char **)&v7);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&AfterColour);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &AfterColour, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Color for dot-cfg common elements.";
  v8.n128_u64[1] = 34;
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"black";
  sub_1C47AD050((uint64_t)&CommonColour, 0, 0);
  qword_1ED835270 = 0;
  unk_1ED835278 = 0;
  qword_1ED835298 = 0;
  unk_1ED8352A0 = 0;
  qword_1ED835288 = (uint64_t)&unk_1E819E950;
  unk_1ED835290 = 0;
  byte_1ED8352A8 = 0;
  unk_1ED835280 = 0;
  CommonColour = (uint64_t)&unk_1E819E480;
  qword_1ED8352B0 = (uint64_t)&unk_1E819E970;
  qword_1ED8352B8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8352D0 = (uint64_t)&qword_1ED8352B8;
  sub_1C6305CBC((__int128 *)&v8, &v4, (const char **)&v7);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&CommonColour);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &CommonColour, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Generate dot files into specified directory for changed IRs";
  v8.n128_u64[1] = 59;
  LODWORD(v4) = 1;
  v7.n128_u64[0] = (unint64_t)"./";
  sub_1C47AD050((uint64_t)&qword_1ED8352D8, 0, 0);
  qword_1ED835358 = 0;
  qword_1ED835360 = 0;
  qword_1ED835380 = 0;
  unk_1ED835388 = 0;
  qword_1ED835370 = (uint64_t)&unk_1E819E950;
  unk_1ED835378 = 0;
  byte_1ED835390 = 0;
  unk_1ED835368 = 0;
  qword_1ED8352D8 = (uint64_t)&unk_1E819E480;
  qword_1ED835398 = (uint64_t)&unk_1E819E970;
  qword_1ED8353A0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8353B8 = (uint64_t)&qword_1ED8353A0;
  sub_1C6305D28((__int128 *)&v8, &v4, (const char **)&v7);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8352D8);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED8352D8, &dword_1C475E000);
}

BOOL llvm::GCOVFile::readGCNO(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  size_t v5;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  _BYTE *v11;
  const char *v12;
  llvm::raw_ostream *v13;
  size_t v14;
  _BOOL8 result;
  char v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  llvm *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t *v49;
  size_t v50;
  unsigned int v51;
  int v52;
  size_t v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  BOOL v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t *i;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t **v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  llvm::raw_ostream *v109;
  void *v110;
  uint64_t v111;
  _WORD *v112;
  int v113;
  int v114;
  uint64_t v115;
  unsigned __int8 *__s1;
  int v117;
  int v118;
  size_t __n;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t **v122;
  llvm::StringMapImpl *v123;
  unint64_t *v124;
  _DWORD *v125;
  size_t v126;
  unsigned int v127;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_DWORD **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16) - (_QWORD)v3;
  if (v4 >= 4)
    v5 = 4;
  else
    v5 = v4;
  if (v4 < 4)
    goto LABEL_7;
  if (*v3 == 1869505383)
  {
    v16 = 0;
LABEL_19:
    *(_QWORD *)a2 = (char *)v3 + v5;
    *(_QWORD *)(a2 + 8) = v4 - v5;
    *(_BYTE *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 17) = 0;
    v17 = (int *)(a1 + 60);
    v18 = sub_1C5A833DC(a2, (int *)(a1 + 60));
    result = 0;
    if (!v18)
      return result;
    v19 = (int *)(a2 + 24);
    *(_DWORD *)(a1 + 64) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    v20 = *(_DWORD *)(a1 + 60);
    if (v20 > 3)
    {
      result = sub_1C5A836AC(a2, (unint64_t *)(a1 + 72));
      if (!result)
        return result;
      v20 = *v17;
    }
    if (v20 >= 3)
      sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    v127 = 0;
    v21 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    if (!v21)
    {
LABEL_158:
      result = 1;
      *(_BYTE *)(a1 + 56) = 1;
      return result;
    }
    v22 = v21;
    v23 = 0;
    v123 = (llvm::StringMapImpl *)(a1 + 24);
    v124 = (unint64_t *)(a1 + 88);
    v122 = (uint64_t **)(a1 + 240);
    while (1)
    {
      result = sub_1C6307494((_QWORD *)a2, &v127);
      if (!result)
        return result;
      v24 = *v19;
      if (v22 == 0x1000000)
        break;
      if (v22 != 21037056 || !v23)
      {
        if (v22 == 21168128 && v23)
        {
          v118 = *v19;
          v33 = (llvm *)sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
          v34 = v33;
          v120 = v23;
          if (*((_DWORD *)v23 + 24) <= v33)
          {
LABEL_162:
            v109 = (llvm::raw_ostream *)llvm::errs(v33);
            v9 = v109;
            v110 = (void *)*((_QWORD *)v109 + 4);
            if (*((_QWORD *)v109 + 3) - (_QWORD)v110 > 0x18uLL)
            {
              qmemcpy(v110, "unexpected block number: ", 25);
              *((_QWORD *)v109 + 4) += 25;
            }
            else
            {
              llvm::raw_ostream::write(v109, "unexpected block number: ", 0x19uLL);
            }
            sub_1C5E21910(v9, v34, 0, 0, 0);
            v111 = *((_QWORD *)v9 + 4);
            if ((unint64_t)(*((_QWORD *)v9 + 3) - v111) > 4)
            {
              *(_BYTE *)(v111 + 4) = 32;
              *(_DWORD *)v111 = 1852385312;
              *((_QWORD *)v9 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v9, " (in ", 5uLL);
            }
            sub_1C5E21910(v9, *((unsigned int *)v120 + 24), 0, 0, 0);
            v112 = (_WORD *)*((_QWORD *)v9 + 4);
            if (*((_QWORD *)v9 + 3) - (_QWORD)v112 <= 1uLL)
            {
              v12 = ")\n";
              v13 = v9;
              v14 = 2;
              goto LABEL_15;
            }
            result = 0;
            *v112 = 2601;
            v108 = *((_QWORD *)v9 + 4) + 2;
            goto LABEL_161;
          }
          if (*v17 <= 4)
            v66 = v127;
          else
            v66 = v127 >> 2;
          v67 = v66 - 1;
          if (v67 >= 2)
          {
            v68 = *(_QWORD *)(v23[11] + 8 * v33);
            v69 = v67 >> 1;
            do
            {
              v70 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
              v71 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
              v72 = *(_QWORD *)(v120[11] + 8 * v70);
              v73 = (_QWORD *)operator new();
              *v73 = v68;
              v73[1] = v72;
              *((_DWORD *)v73 + 4) = v71;
              v73[3] = 0;
              v73[4] = 0;
              v125 = v73;
              v74 = *(unsigned int *)(v68 + 56);
              if (v74 >= *(unsigned int *)(v68 + 60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v68 + 48, v68 + 64, v74 + 1, 8);
                v74 = *(unsigned int *)(v68 + 56);
              }
              *(_QWORD *)(*(_QWORD *)(v68 + 48) + 8 * v74) = v73;
              ++*(_DWORD *)(v68 + 56);
              v75 = v125;
              v76 = *(unsigned int *)(v72 + 24);
              if (v76 >= *(unsigned int *)(v72 + 28))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v72 + 16, v72 + 32, v76 + 1, 8);
                v76 = *(unsigned int *)(v72 + 24);
              }
              *(_QWORD *)(*(_QWORD *)(v72 + 16) + 8 * v76) = v75;
              ++*(_DWORD *)(v72 + 24);
              if ((v125[4] & 1) != 0)
                v77 = (uint64_t)(v120 + 15);
              else
                v77 = (uint64_t)(v120 + 13);
              sub_1C5A83810(v77, (char *)&v125);
              v78 = v125;
              v125 = 0;
              if (v78)
                MEMORY[0x1CAA32FC0](v78, 0x1020C40992E6479);
              --v69;
            }
            while (v69);
          }
        }
        else
        {
          if (v22 != 21299200 || !v23)
            goto LABEL_153;
          v118 = *v19;
          v33 = (llvm *)sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
          v34 = v33;
          v120 = v23;
          if (*((_DWORD *)v23 + 24) <= v33)
            goto LABEL_162;
          v35 = *(_QWORD *)(v23[11] + 8 * v33);
          do
          {
            while (1)
            {
              v36 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
              if (!v36)
                break;
              v37 = v36;
              v38 = *(unsigned int *)(v35 + 88);
              if (v38 >= *(unsigned int *)(v35 + 92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v35 + 80, v35 + 96, v38 + 1, 4);
                v38 = *(unsigned int *)(v35 + 88);
              }
              *(_DWORD *)(*(_QWORD *)(v35 + 80) + 4 * v38) = v37;
              ++*(_DWORD *)(v35 + 88);
            }
            v125 = 0;
            v126 = 0;
            sub_1C5A836AC(a2, (unint64_t *)&v125);
          }
          while (v126);
        }
LABEL_119:
        v23 = v120;
LABEL_152:
        v24 = v118;
        goto LABEL_153;
      }
      if (*v17 > 2)
      {
        v118 = *v19;
        v120 = v23;
        v79 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
        if (v79)
        {
          v80 = v79;
          v81 = 0;
          v82 = (uint64_t)(v23 + 11);
          do
          {
            v83 = (_QWORD *)operator new();
            *(_DWORD *)v83 = v81;
            v83[1] = 0;
            v83[2] = v83 + 4;
            v83[3] = 0x200000000;
            v83[6] = v83 + 8;
            v83[7] = 0x200000000;
            v83[10] = v83 + 12;
            v83[11] = 0x400000000;
            *((_BYTE *)v83 + 112) = 0;
            v83[15] = 0;
            v125 = v83;
            sub_1C5A83780(v82, (char *)&v125);
            v84 = v125;
            v125 = 0;
            if (v84)
            {
              v85 = (_QWORD *)v84[10];
              if (v85 != v84 + 12)
                free(v85);
              v86 = (_QWORD *)v84[6];
              if (v86 != v84 + 8)
                free(v86);
              v87 = (_QWORD *)v84[2];
              if (v87 != v84 + 4)
                free(v87);
              MEMORY[0x1CAA32FC0](v84, 0x10A0C400EDE5EBALL);
            }
            ++v81;
          }
          while (v80 != v81);
        }
        goto LABEL_119;
      }
      if (v127)
      {
        v25 = 0;
        v26 = v23;
        v27 = (uint64_t)(v23 + 11);
        do
        {
          sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
          v28 = (_QWORD *)operator new();
          *(_DWORD *)v28 = v25;
          v28[1] = 0;
          v28[2] = v28 + 4;
          v28[3] = 0x200000000;
          v28[6] = v28 + 8;
          v28[7] = 0x200000000;
          v28[10] = v28 + 12;
          v28[11] = 0x400000000;
          *((_BYTE *)v28 + 112) = 0;
          v28[15] = 0;
          v125 = v28;
          sub_1C5A83780(v27, (char *)&v125);
          v29 = v125;
          v125 = 0;
          if (v29)
          {
            v30 = (_QWORD *)v29[10];
            if (v30 != v29 + 12)
              free(v30);
            v31 = (_QWORD *)v29[6];
            if (v31 != v29 + 8)
              free(v31);
            v32 = (_QWORD *)v29[2];
            if (v32 != v29 + 4)
              free(v32);
            MEMORY[0x1CAA32FC0](v29, 0x10A0C400EDE5EBALL);
          }
          ++v25;
        }
        while (v25 != v127);
        v23 = v26;
      }
LABEL_153:
      if (*v17 <= 4)
        v106 = 4 * v127;
      else
        v106 = v127;
      v107 = (v106 + v24);
      if (v107 < *(_QWORD *)v19)
        return 0;
      llvm::DataExtractor::skip(a2, (unint64_t *)(a2 + 24), v107 - *(_QWORD *)v19);
      v22 = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
      if (!v22)
        goto LABEL_158;
    }
    v118 = *v19;
    v39 = (_QWORD *)operator new();
    *v39 = a1;
    v39[17] = 0;
    v39[15] = v39 + 17;
    *((_DWORD *)v39 + 2) = 0;
    v39[13] = v39 + 15;
    v39[2] = 0;
    v39[3] = 0;
    *(_QWORD *)((char *)v39 + 29) = 0;
    v39[5] = 0;
    v39[6] = 0;
    v39[8] = 0;
    v39[9] = 0;
    v39[7] = v39 + 10;
    v39[11] = v39 + 13;
    v39[12] = 0;
    v39[14] = 0;
    v39[16] = 0;
    v39[18] = 0;
    *((_DWORD *)v39 + 38) = 0;
    v125 = v39;
    v40 = *(unsigned int *)(a1 + 96);
    v41 = *(_QWORD *)(a1 + 88);
    if (v40 >= *(_DWORD *)(a1 + 100))
    {
      v43 = (_QWORD *)(a1 + 88);
      v89 = v40 + 1;
      v90 = v41 + 8 * v40 > (unint64_t)&v125;
      if (v41 <= (unint64_t)&v125 && v90)
      {
        v91 = (char *)&v125 - v41;
        sub_1C5A88358((uint64_t)v124, v89);
        v41 = *v124;
        v42 = &v91[*v124];
      }
      else
      {
        sub_1C5A88358((uint64_t)v124, v89);
        v41 = *v124;
        v42 = (char *)&v125;
      }
    }
    else
    {
      v42 = (char *)&v125;
      v43 = (_QWORD *)(a1 + 88);
    }
    v44 = *(unsigned int *)(a1 + 96);
    v45 = *(_QWORD *)v42;
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(v41 + 8 * v44) = v45;
    v46 = v44 + 1;
    *(_DWORD *)(a1 + 96) = v44 + 1;
    v47 = v125;
    v125 = 0;
    if (v47)
    {
      MEMORY[0x1CAA32FB4](*((_QWORD *)v47 + 17), 8);
      sub_1C5A88228((char **)v47 + 15);
      sub_1C5A88228((char **)v47 + 13);
      sub_1C5A882A0((char **)v47 + 11);
      v48 = (_DWORD *)*((_QWORD *)v47 + 7);
      if (v48 != v47 + 20)
        free(v48);
      MEMORY[0x1CAA32FC0](v47, 0x10F0C408FF3F95ELL);
      v46 = *(_DWORD *)(a1 + 96);
    }
    v49 = *(uint64_t **)(*v43 + 8 * v46 - 8);
    *((_DWORD *)v49 + 2) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    *((_DWORD *)v49 + 3) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    if (*v17 >= 1)
      *((_DWORD *)v49 + 4) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    sub_1C5A836AC(a2, (unint64_t *)v49 + 5);
    v125 = 0;
    v126 = 0;
    if (*v17 > 2)
    {
      *((_BYTE *)v49 + 36) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
      if (!sub_1C5A836AC(a2, (unint64_t *)&v125))
        return 0;
      *((_DWORD *)v49 + 5) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
      *((_DWORD *)v49 + 6) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
      v121 = v49;
      *((_DWORD *)v49 + 7) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
      if (*v17 >= 4)
        *((_DWORD *)v49 + 8) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    }
    else
    {
      if (!sub_1C5A836AC(a2, (unint64_t *)&v125))
        return 0;
      v121 = v49;
      *((_DWORD *)v49 + 5) = sub_1C6387364(a2, (unint64_t *)(a2 + 24), (uint64_t *)(a2 + 32));
    }
    v50 = v126;
    __s1 = (unsigned __int8 *)v125;
    v113 = *(_DWORD *)(a1 + 36);
    v51 = *(_DWORD *)(a1 + 32);
    __n = v126;
    if (!v51)
    {
      *(_DWORD *)(a1 + 36) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      v88 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v88)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v88[16] = 2;
      *(_QWORD *)(a1 + 24) = v88;
      v51 = 16;
      *(_DWORD *)(a1 + 32) = 16;
      v50 = __n;
    }
    v52 = 0;
    if (v50)
    {
      v53 = v50;
      v54 = __s1;
      do
      {
        v55 = *v54++;
        v52 = 33 * v52 + v55;
        --v53;
      }
      while (v53);
    }
    v56 = *(_QWORD *)v123;
    v57 = v51 - 1;
    v58 = *(_QWORD *)v123 + 8 * v51 + 8;
    v114 = -1;
    v115 = *(_QWORD *)v123;
    v59 = 1;
    v60 = v52;
    while (1)
    {
      v61 = v60 & v57;
      v62 = *(_QWORD *)(v56 + 8 * v61);
      if (!v62)
        break;
      if (v62 == -8)
      {
        if (v114 == -1)
          v64 = v60 & v57;
        else
          v64 = v114;
        v114 = v64;
      }
      else if (*(_DWORD *)(v58 + 4 * v61) == v52 && v50 == *(_QWORD *)v62)
      {
        v117 = v59;
        if (!v50)
          goto LABEL_88;
        v63 = memcmp(__s1, (const void *)(v62 + *(unsigned int *)(a1 + 44)), __n);
        v50 = __n;
        v56 = v115;
        v59 = v117;
        if (!v63)
          goto LABEL_88;
      }
      v60 = v59 + v61;
      ++v59;
    }
    v65 = v114;
    if (v114 == -1)
    {
      v65 = v61;
      v61 = v61;
    }
    else
    {
      v61 = v114;
    }
    *(_DWORD *)(v58 + 4 * v65) = v52;
    v62 = *(_QWORD *)(v56 + 8 * v61);
LABEL_88:
    if (v62)
    {
      if (v62 != -8)
      {
LABEL_139:
        v97 = (uint64_t **)(a1 + 240);
        *((_DWORD *)v121 + 20) = *(_DWORD *)(v62 + 8);
        v98 = *v122;
        v99 = (uint64_t **)(a1 + 240);
        if (*v122)
        {
          v100 = *((_DWORD *)v121 + 2);
          while (1)
          {
            while (1)
            {
              v97 = (uint64_t **)v98;
              v101 = *((_DWORD *)v98 + 8);
              if (v101 <= v100)
                break;
              v98 = *v97;
              v99 = v97;
              if (!*v97)
                goto LABEL_147;
            }
            if (v101 >= v100)
              break;
            v98 = v97[1];
            if (!v98)
            {
              v99 = v97 + 1;
              goto LABEL_147;
            }
          }
          v103 = v121;
        }
        else
        {
LABEL_147:
          v102 = (uint64_t *)v97;
          v97 = (uint64_t **)operator new(0x30uLL);
          v103 = v121;
          *((_DWORD *)v97 + 8) = *((_DWORD *)v121 + 2);
          v97[5] = 0;
          *v97 = 0;
          v97[1] = 0;
          v97[2] = v102;
          *v99 = (uint64_t *)v97;
          v104 = **(_QWORD **)(a1 + 232);
          v105 = (uint64_t *)v97;
          if (v104)
          {
            *(_QWORD *)(a1 + 232) = v104;
            v105 = *v99;
          }
          sub_1C4768E74(*(uint64_t **)(a1 + 240), v105);
          ++*(_QWORD *)(a1 + 248);
        }
        v23 = v103;
        v97[5] = v103;
        goto LABEL_152;
      }
      --*(_DWORD *)(a1 + 40);
    }
    v92 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
    v93 = v92;
    v94 = v92 + 16;
    if (__n)
      memcpy(v92 + 16, __s1, __n);
    v94[__n] = 0;
    *(_QWORD *)v93 = __n;
    *((_DWORD *)v93 + 2) = v113;
    *(_QWORD *)(v115 + 8 * v61) = v93;
    ++*(_DWORD *)(a1 + 36);
    for (i = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8 * llvm::StringMapImpl::RehashTable(v123, v61));
          !*i || *i == -8;
    sub_1C6307528((int64x2_t *)a1, v125, v126);
    v62 = *i;
    goto LABEL_139;
  }
  if (*v3 == 1734569583)
  {
    v16 = 1;
    goto LABEL_19;
  }
LABEL_7:
  v8 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v9 = v8;
  v10 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v10) > 0x11)
  {
    *(_WORD *)(v10 + 16) = 8250;
    *(_OWORD *)v10 = *(_OWORD *)"unexpected magic: ";
    v11 = (_BYTE *)(*((_QWORD *)v8 + 4) + 18);
    *((_QWORD *)v8 + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(v8, "unexpected magic: ", 0x12uLL);
    v11 = (_BYTE *)*((_QWORD *)v9 + 4);
  }
  if (v5 <= *((_QWORD *)v9 + 3) - (_QWORD)v11)
  {
    if (v5)
    {
      memcpy(v11, v3, v5);
      v11 = (_BYTE *)(*((_QWORD *)v9 + 4) + v5);
      *((_QWORD *)v9 + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, (const char *)v3, v5);
    v11 = (_BYTE *)*((_QWORD *)v9 + 4);
  }
  if (*((_BYTE **)v9 + 3) == v11)
  {
    v12 = "\n";
    v13 = v9;
    v14 = 1;
LABEL_15:
    llvm::raw_ostream::write(v13, v12, v14);
    return 0;
  }
  else
  {
    result = 0;
    *v11 = 10;
    v108 = *((_QWORD *)v9 + 4) + 1;
LABEL_161:
    *((_QWORD *)v9 + 4) = v108;
  }
  return result;
}

uint64_t sub_1C5A833DC(uint64_t a1, int *a2)
{
  llvm *Bytes;
  unint64_t v5;
  llvm *v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  size_t v13;
  void **v14;
  void **v15;
  char *v16;
  char *v17;
  char v18;
  void **v20;
  int v21;
  int v22;
  int v23;
  int v24;
  llvm::raw_ostream *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  void **__dst;
  size_t v33;
  int64_t v34;

  Bytes = (llvm *)llvm::DataExtractor::getBytes((_QWORD *)a1, (unint64_t *)(a1 + 24), 4, (uint64_t *)(a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = Bytes;
  v7 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v33 = v7;
    v34 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v34) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    Bytes = (llvm *)memmove(p_dst, v6, v7);
  v11 = 0;
  *((_BYTE *)p_dst + v7) = 0;
  v12 = HIBYTE(v34);
  v13 = HIBYTE(v34) & 0x7F;
  if (v34 < 0)
    v13 = v33;
  if (v13 == 4)
  {
    v14 = __dst;
    if (*(_BYTE *)(a1 + 16))
    {
      v15 = (void **)&__dst;
      if (v34 < 0)
        v15 = __dst;
      v16 = (char *)v15 + 3;
      v17 = (char *)v15 + 1;
      do
      {
        v18 = *(v17 - 1);
        *(v17 - 1) = *v16;
        *v16-- = v18;
      }
      while (v17++ < v16);
      v12 = HIBYTE(v34);
      v14 = __dst;
    }
    if (v12 >= 0)
      v20 = (void **)&__dst;
    else
      v20 = v14;
    v21 = *(char *)v20;
    v22 = *(unsigned __int8 *)v20;
    if (v21 < 65)
    {
      if (v12 >= 0)
        v14 = (void **)&__dst;
      v23 = *((char *)v14 + 2) + 10 * (char)v22 - 480;
    }
    else
    {
      if (v12 >= 0)
        v14 = (void **)&__dst;
      v23 = 10 * *((char *)v14 + 1) + 100 * v22 + *((char *)v14 + 2) - 6980;
    }
    if (v23 >= 168)
    {
      v24 = 5;
LABEL_37:
      *a2 = v24;
      *(_DWORD *)(a1 + 48) = v24;
LABEL_38:
      v11 = 1;
      goto LABEL_39;
    }
    if (v23 >= 138)
    {
      v24 = 4;
      goto LABEL_37;
    }
    if (v23 >= 128)
    {
      v24 = 3;
      goto LABEL_37;
    }
    if (v23 >= 96)
    {
      v24 = 2;
      goto LABEL_37;
    }
    if (v23 != 95)
    {
      if (v23 < 82)
      {
        v26 = (llvm::raw_ostream *)llvm::errs(Bytes);
        v27 = *((_QWORD *)v26 + 4);
        if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 0x13)
        {
          *(_DWORD *)(v27 + 16) = 540700271;
          *(_OWORD *)v27 = *(_OWORD *)"unexpected version: ";
          *((_QWORD *)v26 + 4) += 20;
        }
        else
        {
          v26 = llvm::raw_ostream::write(v26, "unexpected version: ", 0x14uLL);
        }
        if (v34 >= 0)
          v28 = (const char *)&__dst;
        else
          v28 = (const char *)__dst;
        if (v34 >= 0)
          v29 = HIBYTE(v34) & 0x7F;
        else
          v29 = v33;
        v30 = llvm::raw_ostream::write(v26, v28, v29);
        v31 = (_BYTE *)*((_QWORD *)v30 + 4);
        if (*((_BYTE **)v30 + 3) == v31)
        {
          llvm::raw_ostream::write(v30, "\n", 1uLL);
          v11 = 0;
        }
        else
        {
          v11 = 0;
          *v31 = 10;
          ++*((_QWORD *)v30 + 4);
        }
        goto LABEL_39;
      }
      *a2 = 0;
      *(_DWORD *)(a1 + 48) = 0;
      goto LABEL_38;
    }
    v11 = 1;
    *a2 = 1;
    *(_DWORD *)(a1 + 48) = 1;
  }
LABEL_39:
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
  return v11;
}

BOOL sub_1C5A836AC(uint64_t a1, unint64_t *a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t Bytes;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13[2];
  unsigned int v14;
  char v15;

  v14 = 0;
  v4 = sub_1C6307494((_QWORD *)a1, &v14);
  result = 0;
  if (v4 && v14)
  {
    v6 = (unint64_t *)(a1 + 24);
    if (*(int *)(a1 + 48) < 5)
    {
      Bytes = llvm::DataExtractor::getBytes((_QWORD *)a1, v6, 4 * v14, (uint64_t *)(a1 + 32));
      v11 = v10;
      v13[0] = Bytes;
      v13[1] = v10;
      v15 = 0;
      v12 = llvm::StringRef::find(v13, &v15, 1uLL, 0);
      if (v11 >= v12)
        v9 = v12;
      else
        v9 = v11;
      if (v12 == -1)
        v9 = v11;
    }
    else
    {
      Bytes = llvm::DataExtractor::getBytes((_QWORD *)a1, v6, v14, (uint64_t *)(a1 + 32));
      v9 = v7 - 1;
      if (v7 < v7 - 1)
        v9 = v7;
    }
    *a2 = Bytes;
    a2[1] = v9;
    return *(_QWORD *)(a1 + 32) == 0;
  }
  return result;
}

void sub_1C5A83780(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C5A88458(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C5A88458(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t llvm::GCOVArc::onTree(llvm::GCOVArc *this)
{
  return *((_DWORD *)this + 4) & 1;
}

void sub_1C5A83810(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C5A8855C(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C5A8855C(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t llvm::GCOVFile::readGCDA(_DWORD *a1, _QWORD *a2)
{
  llvm *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  void *v7;
  const char *v8;
  size_t v9;
  _BOOL8 v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  void *v14;
  _DWORD *v15;
  _BYTE *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  _BOOL8 v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (**v39)(llvm::format_object_base *__hidden);
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)(llvm::format_object_base *__hidden);
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  BOOL v51;
  uint64_t *v52;
  _BOOL8 v53;
  int v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  const void *v57;
  unint64_t v58;
  void *v59;
  const void *v60;
  unint64_t v61;
  void *v62;
  _DWORD *v63;
  uint64_t *v64;
  uint64_t (**v65)(llvm::format_object_base *__hidden);
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;

  if (!sub_1C5A83F74((uint64_t)a2))
    return 0;
  v74 = 0;
  v4 = (llvm *)sub_1C5A833DC((uint64_t)a2, &v74);
  v5 = 0;
  if ((_DWORD)v4)
  {
    if (a1[15] != v74)
    {
      v6 = (llvm::raw_ostream *)llvm::errs(v4);
      v7 = (void *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x1BuLL)
      {
        v5 = 0;
        qmemcpy(v7, "GCOV versions do not match.\n", 28);
        *((_QWORD *)v6 + 4) += 28;
        return v5;
      }
      v8 = "GCOV versions do not match.\n";
      v9 = 28;
LABEL_6:
      llvm::raw_ostream::write(v6, v8, v9);
      return 0;
    }
    v73 = 0;
    v11 = sub_1C6307494(a2, &v73);
    v5 = 0;
    if (!v11)
      return v5;
    if (a1[16] != v73)
    {
      v12 = (llvm::raw_ostream *)llvm::errs((llvm *)v11);
      v13 = v12;
      v14 = (void *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 0x1CuLL)
      {
        qmemcpy(v14, "file checksums do not match: ", 29);
        *((_QWORD *)v12 + 4) += 29;
      }
      else
      {
        llvm::raw_ostream::write(v12, "file checksums do not match: ", 0x1DuLL);
      }
      sub_1C5E21910(v13, a1[16], 0, 0, 0);
      v15 = (_DWORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v15 > 3uLL)
      {
        *v15 = 540877088;
        *((_QWORD *)v13 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v13, " != ", 4uLL);
      }
      sub_1C5E21910(v13, v73, 0, 0, 0);
      v16 = (_BYTE *)*((_QWORD *)v13 + 4);
      if (*((_BYTE **)v13 + 3) != v16)
      {
        v5 = 0;
        *v16 = 10;
        ++*((_QWORD *)v13 + 4);
        return v5;
      }
      v8 = "\n";
      v6 = v13;
      v9 = 1;
      goto LABEL_6;
    }
    v72 = 0;
    v17 = (int *)(a2 + 3);
    v71 = 0;
    v18 = sub_1C6387364((uint64_t)a2, a2 + 3, a2 + 4);
    v5 = 1;
    if (!v18)
      return v5;
    v19 = v18;
    v20 = 0;
    v64 = (uint64_t *)(a1 + 60);
    v21 = a1 + 64;
    while (1)
    {
      v22 = sub_1C6307494(a2, &v72);
      if (!v22)
        return 0;
      v23 = *v17;
      if (v19 == -1560281088)
        break;
      if (v19 != 0x1000000)
      {
        if (v19 == -1593835520)
        {
          sub_1C6307494(a2, v21);
          sub_1C6307494(a2, (_DWORD *)&v72 + 1);
          if ((_DWORD)v72 == 9)
            sub_1C6307494(a2, v21);
        }
        else if (v19 == 27328512 && v20)
        {
          v63 = v21;
          v24 = *(unsigned int *)(v20 + 112);
          if ((int)a1[15] <= 4)
            v25 = 1;
          else
            v25 = 3;
          v26 = ((_DWORD)v24 << v25);
          if ((_DWORD)v72 != (_DWORD)v26)
          {
            v56 = (llvm::raw_ostream *)llvm::errs((llvm *)v22);
            v57 = *(const void **)(v20 + 40);
            v58 = *(_QWORD *)(v20 + 48);
            v59 = (void *)*((_QWORD *)v56 + 4);
            if (v58 <= *((_QWORD *)v56 + 3) - (_QWORD)v59)
            {
              if (v58)
              {
                memcpy(v59, v57, *(_QWORD *)(v20 + 48));
                *((_QWORD *)v56 + 4) += v58;
              }
            }
            else
            {
              llvm::raw_ostream::write(v56, (const char *)v57, *(_QWORD *)(v20 + 48));
            }
            v65 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E813F0F8;
            v66 = ": GCOV_TAG_COUNTER_ARCS mismatch, got %u, expected %u\n";
            v67 = v72 | (unint64_t)(v26 << 32);
LABEL_96:
            llvm::raw_ostream::operator<<(v56, (uint64_t)&v65);
            return 0;
          }
          if ((_DWORD)v24)
          {
            v27 = *(_QWORD *)(v20 + 104);
            v28 = 8 * v24;
            while (sub_1C630756C(a2, (unint64_t *)(*(_QWORD *)v27 + 24)))
            {
              v29 = *(_QWORD **)v27;
              v27 += 8;
              *(_QWORD *)(*v29 + 8) += v29[3];
              v28 -= 8;
              if (!v28)
                goto LABEL_34;
            }
            return 0;
          }
LABEL_34:
          v30 = *(unsigned int *)(v20 + 96);
          if (v30 >= 2)
          {
            v31 = *(uint64_t **)(v20 + 88);
            v34 = *v31;
            v32 = v31 + 1;
            v33 = v34;
            v35 = (uint64_t *)(*(_QWORD *)(v20 + 88) + 8 * v30 - 8);
            if ((int)a1[15] >= 2)
              v35 = v32;
            v36 = *v35;
            v37 = operator new();
            *(_QWORD *)v37 = v36;
            *(_QWORD *)(v37 + 8) = v33;
            *(_DWORD *)(v37 + 16) = 1;
            *(_QWORD *)(v37 + 24) = 0;
            *(_QWORD *)(v37 + 32) = 0;
            v65 = (uint64_t (**)(llvm::format_object_base *__hidden))v37;
            v38 = *(unsigned int *)(v36 + 56);
            if (v38 >= *(unsigned int *)(v36 + 60))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v36 + 48, v36 + 64, v38 + 1, 8);
              v38 = *(unsigned int *)(v36 + 56);
            }
            *(_QWORD *)(*(_QWORD *)(v36 + 48) + 8 * v38) = v37;
            ++*(_DWORD *)(v36 + 56);
            v39 = v65;
            v40 = *(unsigned int *)(v33 + 24);
            if (v40 >= *(unsigned int *)(v33 + 28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v33 + 16, v33 + 32, v40 + 1, 8);
              v40 = *(unsigned int *)(v33 + 24);
            }
            *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * v40) = v39;
            ++*(_DWORD *)(v33 + 24);
            sub_1C5A83810(v20 + 120, (char *)&v65);
            v41 = *(unsigned int *)(v20 + 96);
            if ((_DWORD)v41)
            {
              v42 = *(uint64_t **)(v20 + 88);
              v43 = 8 * v41;
              do
              {
                v44 = *v42++;
                llvm::GCOVFunction::propagateCounts(v20, v44, 0);
                v43 -= 8;
              }
              while (v43);
            }
            v45 = *(unsigned int *)(v20 + 128);
            if ((_DWORD)v45 != 1)
            {
              v46 = *(_QWORD *)(v20 + 120) - 16;
              do
              {
                *(_QWORD *)(**(_QWORD **)(v46 + 8 * v45) + 8) += *(_QWORD *)(*(_QWORD *)(v46 + 8 * v45) + 24);
                --v45;
              }
              while (v45 != 1);
            }
            v47 = v65;
            v65 = 0;
            if (v47)
              MEMORY[0x1CAA32FC0](v47, 0x1020C40992E6479);
          }
          v21 = v63;
        }
        goto LABEL_76;
      }
      if ((_DWORD)v72)
      {
        if ((_DWORD)v72 == 1 || !sub_1C6307494(a2, &v71))
          return 0;
        v48 = *v64;
        if (!*v64)
          goto LABEL_67;
        v49 = (uint64_t *)(a1 + 60);
        do
        {
          v50 = *(_DWORD *)(v48 + 32);
          v51 = v50 >= v71;
          if (v50 >= v71)
            v52 = (uint64_t *)v48;
          else
            v52 = (uint64_t *)(v48 + 8);
          if (v51)
            v49 = (uint64_t *)v48;
          v48 = *v52;
        }
        while (*v52);
        if (v49 == v64 || v71 < *((_DWORD *)v49 + 8))
LABEL_67:
          v49 = (uint64_t *)(a1 + 60);
        v69 = 0;
        v70 = 0;
        v53 = sub_1C6307494(a2, &v70);
        if ((int)a1[15] >= 1)
          v53 = sub_1C6307494(a2, &v69);
        if (v49 != v64)
        {
          v20 = v49[5];
          if (v70 != *(_DWORD *)(v20 + 12) || v69 != *(_DWORD *)(v20 + 16))
          {
            v56 = (llvm::raw_ostream *)llvm::errs((llvm *)v53);
            v60 = *(const void **)(v20 + 40);
            v61 = *(_QWORD *)(v20 + 48);
            v62 = (void *)*((_QWORD *)v56 + 4);
            if (v61 <= *((_QWORD *)v56 + 3) - (_QWORD)v62)
            {
              if (v61)
              {
                memcpy(v62, v60, *(_QWORD *)(v20 + 48));
                *((_QWORD *)v56 + 4) += v61;
              }
            }
            else
            {
              llvm::raw_ostream::write(v56, (const char *)v60, *(_QWORD *)(v20 + 48));
            }
            v65 = &off_1E8192C28;
            v66 = ": checksum mismatch, (%u, %u) != (%u, %u)\n";
            v67 = __PAIR64__(v69, v70);
            v68 = *(_QWORD *)(v20 + 12);
            goto LABEL_96;
          }
        }
        goto LABEL_76;
      }
LABEL_81:
      v19 = sub_1C6387364((uint64_t)a2, a2 + 3, a2 + 4);
      if (!v19)
        return 1;
    }
    if ((_DWORD)v72)
    {
      sub_1C6307494(a2, (_DWORD *)&v72 + 1);
      sub_1C6307494(a2, (_DWORD *)&v72 + 1);
      sub_1C6307494(a2, v21);
    }
    ++a1[65];
LABEL_76:
    if ((int)a1[15] <= 4)
      v54 = 4 * v72;
    else
      v54 = v72;
    v55 = (v54 + v23);
    if (v55 < *(_QWORD *)v17)
      return 0;
    llvm::DataExtractor::skip((_BOOL8)a2, a2 + 3, v55 - *(_QWORD *)v17);
    goto LABEL_81;
  }
  return v5;
}

uint64_t sub_1C5A83F74(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  char v5;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_DWORD **)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16) - (_QWORD)v2;
  if (v3 < 4)
    return 0;
  if (*v2 == 1633968999)
  {
    v5 = 0;
  }
  else
  {
    if (*v2 != 1734567009)
      return 0;
    v5 = 1;
  }
  *(_QWORD *)a1 = v2 + 1;
  *(_QWORD *)(a1 + 8) = v3 - 4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 17) = 0;
  return 1;
}

uint64_t llvm::GCOVFunction::propagateCounts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v7 = a1 + 136;
  v6 = *(_QWORD *)(a1 + 136);
  v24 = 0;
  v8 = sub_1C4EBC5C8(v6, *(_DWORD *)(v7 + 16), a2, &v24);
  result = 0;
  if ((v8 & 1) != 0)
    return result;
  v10 = *(_DWORD *)(v7 + 16);
  v11 = *(_DWORD *)(a1 + 144);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_31;
  }
  if (v10 + ~v11 - *(_DWORD *)(a1 + 148) <= v10 >> 3)
  {
LABEL_31:
    sub_1C4EBC65C(v7, v10);
    v24 = 0;
    sub_1C4EBC5C8(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 152), a2, &v24);
  }
  v12 = v24;
  ++*(_DWORD *)(a1 + 144);
  if (*v12 != -4096)
    --*(_DWORD *)(a1 + 148);
  *v12 = a2;
  v13 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(uint64_t **)(a2 + 16);
    v16 = 8 * v13;
    do
    {
      v17 = *v15;
      if (*v15 != a3)
      {
        if ((*(_BYTE *)(v17 + 16) & 1) != 0)
          v18 = llvm::GCOVFunction::propagateCounts((llvm::GCOVFunction *)a1, *(const llvm::GCOVBlock **)v17, (llvm::GCOVArc *)v17);
        else
          v18 = *(_QWORD *)(v17 + 24);
        v14 += v18;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  else
  {
    v14 = 0;
  }
  v19 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t **)(a2 + 48);
    v21 = 8 * v19;
    do
    {
      v22 = *v20;
      if (*v20 != a3)
      {
        if ((*(_BYTE *)(v22 + 16) & 1) != 0)
          v23 = llvm::GCOVFunction::propagateCounts((llvm::GCOVFunction *)a1, *(const llvm::GCOVBlock **)(v22 + 8), (llvm::GCOVArc *)v22);
        else
          v23 = *(_QWORD *)(v22 + 24);
        v14 -= v23;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  if (v14 >= 0)
    result = v14;
  else
    result = -v14;
  if (a3)
    *(_QWORD *)(a3 + 24) = result;
  return result;
}

llvm::raw_ostream *llvm::GCOVFile::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  llvm::GCOVFunction **v4;
  uint64_t v5;
  llvm::GCOVFunction *v6;

  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v4 = (llvm::GCOVFunction **)*((_QWORD *)this + 11);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = llvm::GCOVFunction::print(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

llvm::raw_ostream *llvm::GCOVFunction::print(llvm::GCOVFunction *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  _WORD *v5;
  const void *v6;
  unint64_t v7;
  _DWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  const void *v12;
  size_t v13;
  llvm::raw_ostream *result;
  _BYTE *v15;
  uint64_t v16;
  llvm::GCOVBlock **v17;
  uint64_t v18;
  llvm::GCOVBlock *v19;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8253;
    *(_DWORD *)v4 = 1027423549;
    v5 = (_WORD *)(*((_QWORD *)a2 + 4) + 6);
    *((_QWORD *)a2 + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(a2, "===== ", 6uLL);
    v5 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  v6 = (const void *)*((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  if (v7 <= *((_QWORD *)a2 + 3) - (_QWORD)v5)
  {
    if (v7)
    {
      memcpy(v5, v6, *((_QWORD *)this + 6));
      v5 = (_WORD *)(*((_QWORD *)a2 + 4) + v7);
      *((_QWORD *)a2 + 4) = v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v6, *((_QWORD *)this + 6));
    v5 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 10272;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
  }
  sub_1C5E21910(a2, *((unsigned int *)this + 2), 0, 0, 0);
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 3uLL)
  {
    *v8 = 541073449;
    v9 = (_BYTE *)(*((_QWORD *)a2 + 4) + 4);
    *((_QWORD *)a2 + 4) = v9;
  }
  else
  {
    llvm::raw_ostream::write(a2, ") @ ", 4uLL);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  v10 = **(_QWORD **)this + 24 * *((unsigned int *)this + 20);
  v11 = *(_BYTE *)(v10 + 23);
  if (v11 >= 0)
    v12 = (const void *)(**(_QWORD **)this + 24 * *((unsigned int *)this + 20));
  else
    v12 = *(const void **)v10;
  if (v11 >= 0)
    v13 = v11 & 0x7F;
  else
    v13 = *(_QWORD *)(v10 + 8);
  if (v13 <= *((_QWORD *)a2 + 3) - (_QWORD)v9)
  {
    if (v13)
    {
      memcpy(v9, v12, v13);
      v9 = (_BYTE *)(*((_QWORD *)a2 + 4) + v13);
      *((_QWORD *)a2 + 4) = v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v12, v13);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  if (*((_BYTE **)a2 + 3) == v9)
  {
    llvm::raw_ostream::write(a2, ":", 1uLL);
  }
  else
  {
    *v9 = 58;
    ++*((_QWORD *)a2 + 4);
  }
  result = sub_1C5E21910(a2, *((unsigned int *)this + 5), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v15)
  {
    result = llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  v16 = *((unsigned int *)this + 24);
  if ((_DWORD)v16)
  {
    v17 = (llvm::GCOVBlock **)*((_QWORD *)this + 11);
    v18 = 8 * v16;
    do
    {
      v19 = *v17++;
      result = llvm::GCOVBlock::print(v19, a2);
      v18 -= 8;
    }
    while (v18);
  }
  return result;
}

llvm *llvm::GCOVFile::dump(llvm::GCOVFunction ***this)
{
  llvm *result;
  uint64_t v3;
  llvm::raw_ostream *v4;
  llvm::GCOVFunction **v5;
  uint64_t v6;
  llvm::GCOVFunction *v7;

  result = llvm::dbgs((llvm *)this);
  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3)
  {
    v4 = result;
    v5 = this[11];
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      result = llvm::GCOVFunction::print(v7, v4);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::GCOVFunction::getName(llvm::GCOVFunction *this, char a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  llvm *v9;
  const char *v10;
  uint64_t v11;
  const void *v12;
  char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;

  if ((a2 & 1) != 0)
  {
    v6 = (uint64_t *)((char *)this + 64);
    v7 = (char *)this + 56;
    if (*((_QWORD *)this + 8))
      return *(_QWORD *)v7;
    v8 = *((_QWORD *)this + 6);
    if (v8 < 2 || (v9 = (llvm *)*((_QWORD *)this + 5), *(_WORD *)v9 != 23135))
    {
LABEL_7:
      v11 = 0;
      v12 = (const void *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 8) = 0;
      if (*((_QWORD *)this + 9) < v8)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 56, (char *)this + 80, v8, 1);
        v11 = *((_QWORD *)this + 8);
        if (!v8)
          goto LABEL_10;
      }
      else if (!v8)
      {
LABEL_10:
        *v6 = v11 + v8;
        return *(_QWORD *)v7;
      }
      memcpy((void *)(*(_QWORD *)v7 + v11), v12, v8);
      v11 = *v6;
      goto LABEL_10;
    }
    LODWORD(v20) = 0;
    v10 = llvm::itaniumDemangle(v9, 0, 0, &v20, a5);
    if ((_DWORD)v20)
    {
      v8 = *((_QWORD *)this + 6);
      goto LABEL_7;
    }
    v14 = (char *)v10;
    if (!v10)
    {
      v18 = 0;
      v19 = 0;
      goto LABEL_17;
    }
    v15 = strlen(v10);
    v16 = v15;
    *((_QWORD *)this + 8) = 0;
    if (*((_QWORD *)this + 9) < v15)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 56, (char *)this + 80, v15, 1);
      v17 = *((_QWORD *)this + 8);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      if (!v15)
      {
LABEL_17:
        *v6 = v19 + v18;
        free(v14);
        return *(_QWORD *)v7;
      }
    }
    memcpy((void *)(*(_QWORD *)v7 + v17), v14, v16);
    v19 = *v6;
    v18 = v16;
    goto LABEL_17;
  }
  return *((_QWORD *)this + 5);
}

uint64_t llvm::GCOVFunction::getFilename(llvm::GCOVFunction *this)
{
  char *v1;

  v1 = (char *)(**(_QWORD **)this + 24 * *((unsigned int *)this + 20));
  if (v1[23] >= 0)
    return **(_QWORD **)this + 24 * *((unsigned int *)this + 20);
  else
    return *(_QWORD *)v1;
}

uint64_t llvm::GCOVFunction::getEntryCount(llvm::GCOVFunction *this)
{
  return *(_QWORD *)(**((_QWORD **)this + 11) + 8);
}

uint64_t llvm::GCOVFunction::getExitBlock(llvm::GCOVFunction *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 11);
  if (*(int *)(*(_QWORD *)this + 60) > 1)
    v2 = v1 + 8;
  else
    v2 = v1 + 8 * *((unsigned int *)this + 24) - 8;
  return *(_QWORD *)v2;
}

llvm::raw_ostream *llvm::GCOVBlock::print(llvm::GCOVBlock *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  _BYTE *v7;
  _OWORD *v8;
  uint64_t v9;
  unsigned int ***v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  _WORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;

  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 7uLL)
  {
    *v4 = 0x203A206B636F6C42;
    *((_QWORD *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Block : ", 8uLL);
  }
  sub_1C5E21910(a2, *(unsigned int *)this, 0, 0, 0);
  v5 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 540680306;
    *(_QWORD *)v5 = *(_QWORD *)" Counter : ";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " Counter : ", 0xBuLL);
  }
  result = sub_1C5E21910(a2, *((_QWORD *)this + 1), 0, 0, 0);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v7)
  {
    result = llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v7 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  if (*((_DWORD *)this + 6))
  {
    v8 = (_OWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 0xFuLL)
    {
      *v8 = *(_OWORD *)"\tSource Edges : ";
      *((_QWORD *)a2 + 4) += 16;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, "\tSource Edges : ", 0x10uLL);
    }
    v9 = *((unsigned int *)this + 6);
    if ((_DWORD)v9)
    {
      v10 = (unsigned int ***)*((_QWORD *)this + 2);
      v11 = 8 * v9;
      do
      {
        v12 = (uint64_t)*v10;
        sub_1C5E21910(a2, ***v10, 0, 0, 0);
        v13 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 1uLL)
        {
          *v13 = 10272;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, " (", 2uLL);
        }
        result = sub_1C5E21910(a2, *(_QWORD *)(v12 + 24), 0, 0, 0);
        v14 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v14) > 2)
        {
          *(_BYTE *)(v14 + 2) = 32;
          *(_WORD *)v14 = 11305;
          *((_QWORD *)a2 + 4) += 3;
        }
        else
        {
          result = llvm::raw_ostream::write(a2, "), ", 3uLL);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    v15 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v15)
    {
      result = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v15 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  if (*((_DWORD *)this + 14))
  {
    v16 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 0x14uLL)
    {
      qmemcpy(v16, "\tDestination Edges : ", 21);
      *((_QWORD *)a2 + 4) += 21;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, "\tDestination Edges : ", 0x15uLL);
    }
    v17 = *((unsigned int *)this + 14);
    if ((_DWORD)v17)
    {
      v18 = 8 * v17;
      v19 = (uint64_t *)*((_QWORD *)this + 6);
      do
      {
        v20 = *v19;
        if ((*(_BYTE *)(*v19 + 16) & 1) != 0)
        {
          v21 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v21 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 42);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v21 + 1;
            *v21 = 42;
          }
        }
        sub_1C5E21910(a2, **(unsigned int **)(v20 + 8), 0, 0, 0);
        v22 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v22 > 1uLL)
        {
          *v22 = 10272;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, " (", 2uLL);
        }
        result = sub_1C5E21910(a2, *(_QWORD *)(v20 + 24), 0, 0, 0);
        v23 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v23) > 2)
        {
          *(_BYTE *)(v23 + 2) = 32;
          *(_WORD *)v23 = 11305;
          *((_QWORD *)a2 + 4) += 3;
        }
        else
        {
          result = llvm::raw_ostream::write(a2, "), ", 3uLL);
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
    v24 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v24)
    {
      result = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v24 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  if (*((_DWORD *)this + 22))
  {
    v25 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v25) > 8)
    {
      *(_BYTE *)(v25 + 8) = 32;
      *(_QWORD *)v25 = *(_QWORD *)"\tLines : ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, "\tLines : ", 9uLL);
    }
    v26 = *((unsigned int *)this + 22);
    if ((_DWORD)v26)
    {
      v27 = (unsigned int *)*((_QWORD *)this + 10);
      v28 = 4 * v26;
      do
      {
        result = sub_1C5E21910(a2, *v27, 0, 0, 0);
        v29 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v29)
        {
          result = llvm::raw_ostream::write(a2, ",", 1uLL);
        }
        else
        {
          *v29 = 44;
          ++*((_QWORD *)a2 + 4);
        }
        ++v27;
        v28 -= 4;
      }
      while (v28);
    }
    v30 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v30)
    {
      return llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v30 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::GCOVFunction::dump(llvm::GCOVFunction *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::GCOVFunction::print(this, v2);
}

llvm::raw_ostream *llvm::GCOVBlock::dump(llvm::GCOVBlock *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::GCOVBlock::print(this, v2);
}

unint64_t llvm::GCOVBlock::augmentOneCycle(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t result;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;

  v4 = *(_QWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = v5 - (_QWORD)v4;
    v8 = v7 >> 3;
    if ((unint64_t)(v7 >> 3) <= 1)
      v8 = 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9 >> 60)
LABEL_45:
      sub_1C4764EE4();
    v10 = operator new(16 * v9);
    v11 = &v10[2 * v9];
    *v10 = a1;
    v10[1] = 0;
    v6 = v10 + 2;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v10 + 2;
    *(_QWORD *)(a2 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = a1;
    v4[1] = 0;
    v6 = v4 + 2;
  }
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a1 + 120) = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v12 = *(v6 - 2);
        v14 = *(v6 - 1);
        v13 = v6 - 2;
        if (v14 != *(_DWORD *)(v12 + 56))
          break;
        *(_BYTE *)(v12 + 112) = 0;
        *(_QWORD *)(a2 + 8) = v13;
        v6 -= 2;
        if (*(_QWORD **)a2 == v13)
          return 0;
      }
      *(v6 - 1) = v14 + 1;
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v14);
      v16 = *(_QWORD *)(v15 + 32);
      if (v16)
      {
        v17 = *(_QWORD *)(v15 + 8);
        if (v17 != v12 && *(_BYTE *)(v17 + 112) != 0)
          break;
      }
    }
    if (*(_QWORD *)(v17 + 120))
      break;
    *(_QWORD *)(v17 + 120) = v15;
    v19 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v6 >= v19)
    {
      v20 = *(_QWORD **)a2;
      v21 = ((uint64_t)v6 - *(_QWORD *)a2) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        abort();
      v23 = v19 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24 >> 60)
        goto LABEL_45;
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v21];
      *(_QWORD *)v26 = v17;
      *((_QWORD *)v26 + 1) = 0;
      if (v6 == v20)
      {
        v28 = &v25[16 * v21];
      }
      else
      {
        v27 = &v25[16 * v21];
        do
        {
          v28 = v27 - 16;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
          v6 -= 2;
          v27 -= 16;
        }
        while (v6 != v20);
      }
      v6 = v26 + 16;
      *(_QWORD *)a2 = v28;
      *(_QWORD *)(a2 + 8) = v26 + 16;
      *(_QWORD *)(a2 + 16) = &v25[16 * v24];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v6 = v17;
      v6[1] = 0;
      v6 += 2;
    }
    *(_QWORD *)(a2 + 8) = v6;
  }
  result = *(_QWORD *)(v15 + 32);
  v30 = v12;
  do
  {
    v31 = *(uint64_t **)(v30 + 120);
    if (v31[4] < result)
      result = v31[4];
    v30 = *v31;
  }
  while (v30 != v17);
  *(_QWORD *)(v15 + 32) = v16 - result;
  do
  {
    v32 = *(uint64_t **)(v12 + 120);
    v32[4] -= result;
    v12 = *v32;
  }
  while (v12 != v17);
  return result;
}

uint64_t llvm::GCOVBlock::getCyclesCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  v1 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = *(uint64_t **)a1;
  v5 = *(_QWORD *)a1 + 8 * v1;
  do
  {
    v6 = v4;
    do
    {
      v7 = *v6++;
      *(_BYTE *)(v7 + 112) = 1;
      *(_QWORD *)(v7 + 120) = 0;
    }
    while (v6 != (uint64_t *)v5);
    while (1)
    {
      if (*(_BYTE *)(*v4 + 112))
      {
        v8 = llvm::GCOVBlock::augmentOneCycle(*v4, (uint64_t)__p);
        if (v8)
          break;
      }
      if (++v4 == (uint64_t *)v5)
        goto LABEL_10;
    }
    v3 += v8;
    v4 = *(uint64_t **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    v5 = *(_QWORD *)a1 + 8 * v9;
  }
  while ((_DWORD)v9);
LABEL_10:
  if (__p[0])
    operator delete(__p[0]);
  return v3;
}

void llvm::gcovOneInput(char *is_absolute, char *a2, char *a3, const void *a4, size_t a5, const void *a6, size_t a7, int *a8)
{
  uint64_t *v8;
  uint64_t *v9;
  llvm *CyclesCount;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  llvm::GCOVFunction **v15;
  llvm::GCOVFunction *v16;
  size_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  size_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  char *v48;
  void *v49;
  void *v50;
  char *v51;
  llvm::GCOVFunction **v52;
  _QWORD *v53;
  llvm::GCOVFunction **v54;
  unint64_t v55;
  _QWORD *v56;
  llvm::GCOVFunction ***v57;
  llvm::GCOVFunction **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  llvm::GCOVFunction **v64;
  llvm::GCOVFunction *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  char **v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void **v101;
  unsigned int v102;
  void *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  unsigned int v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _WORD *v130;
  size_t v131;
  _BYTE *v132;
  char *v133;
  char *v134;
  size_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  std::string::size_type v177;
  void *v178;
  llvm::raw_ostream *v179;
  void *p_dst;
  std::string *v181;
  std::string::size_type v182;
  char v183;
  std::string *v184;
  std::string::size_type v185;
  std::string *v186;
  uint64_t v187;
  uint64_t v188;
  std::string::size_type v189;
  std::string::size_type v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  int *v195;
  size_t v196;
  size_t v197;
  std::string::size_type v198;
  const void *v199;
  void *v200;
  std::string::size_type v201;
  std::string::size_type v202;
  std::string *v203;
  const std::error_category *v204;
  std::error_code *v205;
  const std::error_category *cat;
  char *v207;
  uint64_t v208;
  _WORD *v209;
  size_t v210;
  uint64_t v211;
  std::string *v212;
  size_t size;
  _WORD *v214;
  _BYTE *v215;
  std::string *v216;
  uint64_t v217;
  llvm::raw_ostream *v218;
  std::string *p_p;
  size_t v220;
  _BYTE *v221;
  llvm::raw_ostream *v222;
  std::string::size_type v223;
  void *v224;
  llvm *v225;
  const std::error_category *v226;
  std::string::size_type v227;
  llvm::raw_ostream *v228;
  _WORD *v229;
  std::string::size_type v230;
  std::string::size_type v231;
  void *v232;
  _BYTE *v233;
  void *v234;
  _BYTE *v235;
  void *v236;
  _BYTE *v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  _BYTE *v242;
  void *v243;
  _BYTE *v244;
  unint64_t v245;
  char *v246;
  _BYTE *v247;
  unsigned int ***v248;
  unsigned int **v249;
  unsigned int **v250;
  unsigned int **v251;
  unsigned int *v252;
  uint64_t *v253;
  _DWORD *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  BOOL v265;
  unint64_t v266;
  uint64_t v267;
  size_t v268;
  const void *v269;
  size_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  _WORD *v278;
  void *v279;
  std::string::size_type v280;
  uint64_t v281;
  llvm::raw_ostream *v282;
  const char *v283;
  uint64_t **v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  std::string::size_type v291;
  uint64_t v292;
  uint64_t v293;
  const std::error_category *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  llvm::raw_ostream *v301;
  const std::error_category *v302;
  _BYTE *v303;
  const std::error_category *v305;
  llvm::raw_ostream *v306;
  _BYTE *v307;
  uint64_t v308;
  std::string *v309;
  size_t v310;
  _BYTE *v311;
  char *v312;
  char *v313;
  char v314;
  BOOL v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  __int128 v330;
  char *v331;
  char *v332;
  uint64_t v333;
  size_t v334;
  const void *v335;
  char **v336;
  char v337;
  unsigned __int8 *v338;
  size_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  const void *v344;
  std::string::size_type v345;
  const void *v346;
  std::string *v347;
  size_t v348;
  size_t v349;
  int v350;
  size_t v351;
  void **p_Name;
  std::string *v353;
  void **v354;
  uint64_t v355;
  llvm *v356;
  llvm::raw_ostream *v357;
  const char *v358;
  size_t v359;
  _BYTE *v360;
  char *v361;
  _DWORD *v362;
  _BYTE *v363;
  const void *v364;
  size_t v365;
  uint64_t **v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  _QWORD *v371;
  _BYTE *v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  _BYTE *v376;
  size_t v377;
  const void *v378;
  size_t v379;
  char *v380;
  unint64_t i;
  _QWORD *v382;
  uint64_t **v383;
  _DWORD *v384;
  _BYTE *v385;
  _BYTE *v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  const char *v393;
  _DWORD *v394;
  _BYTE *v395;
  size_t v396;
  char *v397;
  llvm::GCOVFunction **v405;
  uint64_t v406;
  llvm::raw_ostream *v407;
  char *v408;
  char *v409;
  llvm::GCOVFunction **v410;
  unint64_t v411;
  int v412;
  char **v413;
  const void **v414;
  unsigned int v415;
  char **v416;
  char *v417;
  unint64_t v418;
  char *v419;
  uint64_t *v420;
  void **v421;
  const void **v422;
  char *v423;
  uint64_t *v424;
  uint64_t *v425;
  uint64_t v426;
  char *v427;
  void *v428;
  char *v429;
  char *v430;
  std::string __dst;
  void *Name;
  size_t v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  std::string v437;
  std::string __p;
  int v439;
  __int16 v440;
  _QWORD *v441;
  _QWORD v442[2];
  std::string v443;
  size_t v444;
  void *v445;
  int v446;
  _QWORD **v447;
  _QWORD *v448;
  uint64_t v449;
  std::error_code v450;
  std::error_code v451;
  const std::error_category *v452;
  uint64_t v453;

  v453 = *MEMORY[0x1E0C80C00];
  v427 = is_absolute;
  v428 = 0;
  v429 = 0;
  v430 = 0;
  v8 = *(uint64_t **)a8;
  v9 = (uint64_t *)*((_QWORD *)a8 + 1);
  if (*(uint64_t **)a8 != v9)
  {
    v425 = (uint64_t *)*((_QWORD *)a8 + 1);
    while (1)
    {
      v314 = *((_BYTE *)v8 + 23);
      v315 = v314 < 0;
      if (v314 >= 0)
        v316 = v8;
      else
        v316 = (uint64_t *)*v8;
      v317 = v314 & 0x7F;
      if (v315)
        v318 = v8[1];
      else
        v318 = v317;
      v319 = v429;
      if (v429 < v430)
      {
        *(_QWORD *)v429 = v316;
        *((_QWORD *)v319 + 1) = v318;
        *(_OWORD *)(v319 + 40) = 0u;
        *((_QWORD *)v319 + 2) = v319 + 40;
        v320 = v319 + 96;
        *(_OWORD *)(v319 + 24) = 0u;
        *(_OWORD *)(v319 + 56) = 0u;
        *(_OWORD *)(v319 + 72) = 0u;
        v319[88] = 0;
        goto LABEL_509;
      }
      v321 = (char *)v428;
      v322 = 0xAAAAAAAAAAAAAAABLL * ((v429 - (_BYTE *)v428) >> 5) + 1;
      if (v322 > 0x2AAAAAAAAAAAAAALL)
        goto LABEL_665;
      if (0x5555555555555556 * ((v430 - (_BYTE *)v428) >> 5) > v322)
        v322 = 0x5555555555555556 * ((v430 - (_BYTE *)v428) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v430 - (_BYTE *)v428) >> 5) >= 0x155555555555555)
        v323 = 0x2AAAAAAAAAAAAAALL;
      else
        v323 = v322;
      if (v323 > 0x2AAAAAAAAAAAAAALL)
LABEL_664:
        sub_1C4764EE4();
      v324 = 3 * v323;
      is_absolute = (char *)operator new(96 * v323);
      v325 = &is_absolute[32 * ((v429 - (_BYTE *)v428) >> 5)];
      *(_QWORD *)v325 = v316;
      *((_QWORD *)v325 + 1) = v318;
      *(_OWORD *)(v325 + 40) = 0u;
      v326 = &is_absolute[32 * v324];
      *((_QWORD *)v325 + 2) = v325 + 40;
      v320 = v325 + 96;
      *(_OWORD *)(v325 + 24) = 0u;
      *(_OWORD *)(v325 + 56) = 0u;
      *(_OWORD *)(v325 + 72) = 0u;
      v325[88] = 0;
      if (v319 == v321)
        break;
      v327 = 0;
      do
      {
        v328 = &v325[v327];
        v329 = &v319[v327];
        v330 = *(_OWORD *)&v319[v327 - 96];
        v331 = &v325[v327 - 56];
        *(_QWORD *)&v325[v327 - 80] = v331;
        is_absolute = &v325[v327 - 80];
        *((_OWORD *)is_absolute - 1) = v330;
        *((_QWORD *)is_absolute + 1) = 0;
        *((_QWORD *)is_absolute + 2) = 0;
        if (*(_QWORD *)&v319[v327 - 72])
          is_absolute = (char *)sub_1C4FE6ED8((uint64_t)is_absolute, (uint64_t)(v329 - 80));
        *(_QWORD *)v331 = 0;
        *(_QWORD *)&v325[v327 - 48] = 0;
        *(_QWORD *)&v325[v327 - 40] = 0;
        *(_OWORD *)v331 = *(_OWORD *)(v329 - 56);
        *((_QWORD *)v328 - 5) = *((_QWORD *)v329 - 5);
        *((_QWORD *)v329 - 7) = 0;
        *((_QWORD *)v329 - 6) = 0;
        *((_QWORD *)v329 - 5) = 0;
        *((_QWORD *)v328 - 4) = 0;
        *((_QWORD *)v328 - 3) = 0;
        *((_QWORD *)v328 - 2) = 0;
        *((_OWORD *)v328 - 2) = *((_OWORD *)v329 - 2);
        *((_QWORD *)v328 - 2) = *((_QWORD *)v329 - 2);
        *((_QWORD *)v329 - 4) = 0;
        *((_QWORD *)v329 - 3) = 0;
        *((_QWORD *)v329 - 2) = 0;
        *(v328 - 8) = *(v329 - 8);
        v327 -= 96;
      }
      while (&v319[v327] != v321);
      v319 = (char *)v428;
      v332 = v429;
      v428 = &v325[v327];
      v429 = v325 + 96;
      v430 = v326;
      if (v332 == v319)
      {
        v9 = v425;
LABEL_530:
        if (v319)
          goto LABEL_508;
        goto LABEL_509;
      }
      v9 = v425;
      do
      {
        v332 -= 96;
        sub_1C5A87AB4(v332);
      }
      while (v332 != v319);
      if (v319)
LABEL_508:
        operator delete(v319);
LABEL_509:
      v333 = 0;
      v429 = v320;
      v335 = (const void *)*((_QWORD *)v320 - 12);
      v334 = *((_QWORD *)v320 - 11);
      v336 = (char **)(v320 - 80);
      *((_QWORD *)v320 - 9) = 0;
      if (*((_QWORD *)v320 - 8) >= v334)
      {
        if (!v334)
          goto LABEL_512;
LABEL_511:
        is_absolute = (char *)memcpy((void *)(*((_QWORD *)v320 - 10) + v333), v335, v334);
        v333 = *((_QWORD *)v320 - 9);
        goto LABEL_512;
      }
      is_absolute = (char *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v320 - 80), v320 - 56, v334, 1);
      v333 = *((_QWORD *)v320 - 9);
      if (v334)
        goto LABEL_511;
LABEL_512:
      *((_QWORD *)v320 - 9) = v333 + v334;
      v337 = v427[39];
      if (v337 < 0)
      {
        if (!*((_QWORD *)v427 + 3))
          goto LABEL_537;
LABEL_516:
        if (v337 >= 0)
          v338 = (unsigned __int8 *)(v427 + 16);
        else
          v338 = (unsigned __int8 *)*((_QWORD *)v427 + 2);
        if (v337 >= 0)
          v339 = v427[39];
        else
          v339 = *((_QWORD *)v427 + 3);
        is_absolute = (char *)llvm::sys::path::replace_path_prefix((const void **)v320 - 10, v338, v339, "", 0, 0);
        if (!(_DWORD)is_absolute)
          goto LABEL_537;
        v340 = *((_QWORD *)v320 - 9);
        if (!v340)
          goto LABEL_537;
        is_absolute = *v336;
        if (**v336 == 47)
        {
          if (v340 != 1)
          {
            is_absolute = (char *)memmove(is_absolute, is_absolute + 1, v340 - 1);
            v340 = *((_QWORD *)v320 - 9);
          }
          v341 = v340 - 1;
          goto LABEL_536;
        }
        v342 = 0;
        v344 = (const void *)*((_QWORD *)v320 - 12);
        v343 = *((_QWORD *)v320 - 11);
        *((_QWORD *)v320 - 9) = 0;
        if (*((_QWORD *)v320 - 8) < v343)
        {
          is_absolute = (char *)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v320 - 80), v320 - 56, v343, 1);
          v342 = *((_QWORD *)v320 - 9);
          if (v343)
          {
LABEL_534:
            is_absolute = (char *)memcpy((void *)(*((_QWORD *)v320 - 10) + v342), v344, v343);
            v342 = *((_QWORD *)v320 - 9);
          }
        }
        else if (v343)
        {
          goto LABEL_534;
        }
        v341 = v342 + v343;
LABEL_536:
        *((_QWORD *)v320 - 9) = v341;
        goto LABEL_537;
      }
      if (v427[39])
        goto LABEL_516;
LABEL_537:
      if (v427[10])
      {
        LOWORD(v445) = 261;
        *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *((_OWORD *)v320 - 5);
        is_absolute = (char *)llvm::sys::path::is_absolute((const char **)&v443.__r_.__value_.__l.__data_, 0);
        if ((_DWORD)is_absolute)
          *(v320 - 8) = 1;
      }
      v8 += 3;
      if (v8 == v9)
        goto LABEL_2;
    }
    v428 = v325;
    v430 = &is_absolute[32 * v324];
    goto LABEL_530;
  }
LABEL_2:
  CyclesCount = (llvm *)llvm::outs((llvm *)is_absolute);
  v407 = CyclesCount;
  v14 = a8[24];
  if ((_DWORD)v14)
  {
    v15 = (llvm::GCOVFunction **)*((_QWORD *)a8 + 11);
    v405 = &v15[v14];
    do
    {
      v410 = v15;
      v16 = *v15;
      Name = (void *)llvm::GCOVFunction::getName(*v15, v427[8], v11, v12, v13);
      v433 = v17;
      v434 = 0u;
      v435 = 0u;
      v436 = 0;
      v18 = *((_DWORD *)v16 + 20);
      v19 = (char *)v428;
      v20 = *((unsigned int *)v16 + 5);
      v21 = (char *)v428 + 96 * v18;
      v24 = (char *)*((_QWORD *)v21 + 5);
      v23 = v21 + 40;
      v22 = v24;
      v26 = (char **)(v23 + 8);
      v25 = (char *)*((_QWORD *)v23 + 1);
      v27 = (char *)(v25 - v24);
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
      if (v28 > v20)
        goto LABEL_32;
      v423 = (char *)v428;
      v29 = (v20 + 1);
      v30 = v29 - v28;
      if (v29 <= v28)
      {
        v19 = (char *)v428;
        if (v29 < v28)
        {
          v47 = &v22[24 * v29];
          if (v25 != v47)
          {
            v48 = (char *)*((_QWORD *)v23 + 1);
            do
            {
              v50 = (void *)*((_QWORD *)v48 - 3);
              v48 -= 24;
              v49 = v50;
              if (v50)
              {
                *((_QWORD *)v25 - 2) = v49;
                operator delete(v49);
              }
              v25 = v48;
            }
            while (v48 != v47);
          }
          *v26 = v47;
        }
        goto LABEL_31;
      }
      v31 = (char *)v428 + 96 * v18;
      v34 = *((_QWORD *)v31 + 7);
      v33 = v31 + 56;
      v32 = v34;
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v25) >> 3) >= v30)
      {
        bzero(v25, 24 * ((24 * v30 - 24) / 0x18) + 24);
        *v26 = &v25[24 * ((24 * v30 - 24) / 0x18) + 24];
        v19 = v423;
      }
      else
      {
        v415 = *((_DWORD *)v16 + 20);
        v419 = v33;
        v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v22) >> 3);
        if (2 * v35 > v29)
          v29 = 2 * v35;
        if (v35 >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        if (v29 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_664;
        v36 = 3 * v29;
        v37 = operator new(24 * v29);
        v38 = (char *)v37 + 24 * v28;
        v39 = (char *)v37 + 8 * v36;
        v40 = 24 * ((24 * v30 - 24) / 0x18) + 24;
        bzero(v38, v40);
        v41 = &v27[(_QWORD)v37 + v40];
        if (v25 != v22)
        {
          do
          {
            v42 = *(_OWORD *)(v25 - 24);
            v25 -= 24;
            *(_OWORD *)(v38 - 24) = v42;
            v38 -= 24;
            *((_QWORD *)v38 + 2) = *((_QWORD *)v25 + 2);
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = 0;
          }
          while (v25 != v22);
          v25 = *(char **)v23;
          v43 = *v26;
          *(_QWORD *)v23 = v38;
          *v26 = v41;
          *(_QWORD *)v419 = v39;
          v18 = v415;
          v19 = v423;
          if (v43 != v25)
          {
            v44 = v43;
            do
            {
              v46 = (void *)*((_QWORD *)v44 - 3);
              v44 -= 24;
              v45 = v46;
              if (v46)
              {
                *((_QWORD *)v43 - 2) = v45;
                operator delete(v45);
              }
              v43 = v44;
            }
            while (v44 != v25);
          }
          if (!v25)
            goto LABEL_31;
LABEL_30:
          operator delete(v25);
          goto LABEL_31;
        }
        *(_QWORD *)v23 = v38;
        *v26 = v41;
        v18 = v415;
        *(_QWORD *)v419 = v39;
        v19 = v423;
        if (v25)
          goto LABEL_30;
      }
LABEL_31:
      LODWORD(v20) = *((_DWORD *)v16 + 5);
      v22 = *(char **)v23;
LABEL_32:
      v51 = &v22[24 * v20];
      v54 = (llvm::GCOVFunction **)*((_QWORD *)v51 + 1);
      v53 = v51 + 8;
      v52 = v54;
      v55 = v53[1];
      if ((unint64_t)v54 >= v55)
      {
        v57 = (llvm::GCOVFunction ***)&v22[24 * v20];
        v58 = *v57;
        v59 = v52 - *v57;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          goto LABEL_665;
        v61 = v55 - (_QWORD)v58;
        if (v61 >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          if (v62 >> 61)
            goto LABEL_664;
          v63 = (char *)operator new(8 * v62);
        }
        else
        {
          v63 = 0;
        }
        v64 = (llvm::GCOVFunction **)&v63[8 * v59];
        *v64 = v16;
        v56 = v64 + 1;
        if (v52 != v58)
        {
          do
          {
            v65 = *--v52;
            *--v64 = v65;
          }
          while (v52 != v58);
          v52 = *v57;
        }
        *v57 = v64;
        *v53 = v56;
        v53[1] = &v63[8 * v62];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v52 = v16;
        v56 = v52 + 1;
      }
      *v53 = v56;
      v443.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443.__r_.__value_.__r.__words[2];
      v443.__r_.__value_.__l.__size_ = 0x1000000000;
      v448 = 0;
      v449 = 0;
      v447 = &v448;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__l.__size_ = 0x1000000000;
      v442[0] = 0;
      v442[1] = 0;
      v441 = v442;
      v66 = *((unsigned int *)v16 + 24);
      if ((_DWORD)v66)
      {
        v67 = (uint64_t *)*((_QWORD *)v16 + 11);
        v68 = &v67[v66];
        v69 = &v19[96 * v18];
        v70 = (char **)(v69 + 64);
        v71 = (char **)(v69 + 72);
        v413 = (char **)(v69 + 80);
        v416 = (char **)(v69 + 72);
        v420 = v68;
        do
        {
          v72 = *v67;
          v73 = *(unsigned int *)(*v67 + 88);
          if ((_DWORD)v73)
          {
            v424 = v67;
            v74 = *(unsigned int **)(v72 + 80);
            if ((_DWORD)v73 != 1)
            {
              v76 = v74 + 1;
              v75 = *v74;
              v77 = 4 * v73 - 4;
              v78 = v74 + 1;
              do
              {
                v80 = *v78++;
                v79 = v80;
                v81 = v75 >= v80;
                if (v75 <= v80)
                  v75 = v79;
                if (!v81)
                  v74 = v76;
                v76 = v78;
                v77 -= 4;
              }
              while (v77);
            }
            v82 = *v74;
            v83 = *v71;
            v84 = *v70;
            v85 = 0xCCCCCCCCCCCCCCCDLL * ((*v71 - *v70) >> 3);
            if (v85 <= v82)
            {
              v86 = (v82 + 1);
              v87 = v86 - v85;
              if (v86 <= v85)
              {
                if (v86 < v85)
                {
                  v111 = &v84[40 * v86];
                  while (v83 != v111)
                  {
                    v113 = (char *)*((_QWORD *)v83 - 5);
                    v83 -= 40;
                    v112 = v113;
                    if (v83 + 16 != v113)
                      free(v112);
                  }
                  *v71 = v111;
                }
              }
              else if (0xCCCCCCCCCCCCCCCDLL * ((*v413 - v83) >> 3) >= v87)
              {
                v114 = &v83[40 * v87];
                v115 = 40 * v86 - 8 * ((*v71 - *v70) >> 3);
                v116 = v83 + 16;
                do
                {
                  *v116 = 0;
                  v116[1] = 0;
                  v116[2] = 0;
                  *(v116 - 2) = v116;
                  *(v116 - 1) = 0x100000000;
                  v116 += 5;
                  v115 -= 40;
                }
                while (v115);
                *v71 = v114;
              }
              else
              {
                v88 = 0xCCCCCCCCCCCCCCCDLL * ((*v413 - v84) >> 3);
                v89 = 2 * v88;
                if (2 * v88 <= v86)
                  v89 = v86;
                if (v88 >= 0x333333333333333)
                  v90 = 0x666666666666666;
                else
                  v90 = v89;
                if (v90 > 0x666666666666666)
                  goto LABEL_664;
                v91 = (char *)operator new(40 * v90);
                v92 = &v91[40 * v85];
                v93 = v92 + 16;
                v94 = 40 * v86 - 40 * v85;
                do
                {
                  *v93 = 0;
                  v93[1] = 0;
                  v93[2] = 0;
                  *(v93 - 2) = v93;
                  *(v93 - 1) = 0x100000000;
                  v93 += 5;
                  v94 -= 40;
                }
                while (v94);
                v95 = *v71;
                v96 = *v70;
                if (*v71 != *v70)
                {
                  v408 = &v91[40 * v86];
                  v409 = &v91[40 * v90];
                  v97 = 0;
                  while (2)
                  {
                    v98 = &v95[v97];
                    v99 = &v92[v97];
                    v100 = (uint64_t)&v92[v97 - 24];
                    *(_QWORD *)&v92[v97 - 40] = v100;
                    v101 = (void **)&v92[v97 - 40];
                    *(_QWORD *)&v92[v97 - 32] = 0x100000000;
                    if (v92 == v95)
                      goto LABEL_83;
                    v102 = *((_DWORD *)v98 - 8);
                    if (!v102)
                      goto LABEL_83;
                    v103 = (void *)*((_QWORD *)v98 - 5);
                    v104 = &v95[v97];
                    v105 = (uint64_t)&v95[v97 - 24];
                    if ((void *)v105 != v103)
                    {
                      *v101 = v103;
                      *((_DWORD *)v99 - 8) = v102;
                      *((_DWORD *)v99 - 7) = *((_DWORD *)v104 - 7);
                      *((_QWORD *)v98 - 5) = v105;
                      *((_DWORD *)v104 - 7) = 0;
                      goto LABEL_82;
                    }
                    if (v102 < 2)
                    {
                      v106 = *((unsigned int *)v98 - 8);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92[v97 - 40], v100, *((unsigned int *)v98 - 8), 8);
                      v106 = *((unsigned int *)v98 - 8);
                      if (!(_DWORD)v106)
                        goto LABEL_81;
                    }
                    memcpy(*v101, *((const void **)v98 - 5), 8 * v106);
LABEL_81:
                    *((_DWORD *)v99 - 8) = v102;
LABEL_82:
                    *((_DWORD *)v98 - 8) = 0;
LABEL_83:
                    v107 = *((_QWORD *)v98 - 2);
                    *(v99 - 8) = *(v98 - 8);
                    *((_QWORD *)v99 - 2) = v107;
                    v97 -= 40;
                    if (&v95[v97] == v96)
                    {
                      v95 = *v70;
                      v108 = *v416;
                      *v70 = &v92[v97];
                      *v416 = v408;
                      *v413 = v409;
                      while (v108 != v95)
                      {
                        v110 = (char *)*((_QWORD *)v108 - 5);
                        v108 -= 40;
                        v109 = v110;
                        if (v108 + 16 != v110)
                          free(v109);
                      }
                      goto LABEL_98;
                    }
                    continue;
                  }
                }
                *v70 = v92;
                *v71 = &v91[40 * v86];
                *v413 = &v91[40 * v90];
LABEL_98:
                if (v95)
                  operator delete(v95);
              }
            }
            v117 = *(unsigned int *)(v72 + 88);
            v119 = *((_QWORD *)&v434 + 1);
            v118 = v434;
            if ((_DWORD)v117)
            {
              v120 = *(int **)(v72 + 80);
              v121 = 4 * v117;
              do
              {
                v451.__val_ = 0;
                v122 = *v120;
                v451.__val_ = *v120;
                v123 = *v70;
                v124 = sub_1C48302EC((uint64_t)&v443, (unsigned int *)&v451);
                v125 = *(_QWORD *)(v72 + 8);
                if (v125)
                {
                  v119 += (sub_1C48302EC((uint64_t)&__p, (unsigned int *)&v451) >> 32) & 1;
                  v125 = *(_QWORD *)(v72 + 8);
                }
                v126 = &v123[40 * v122];
                v126[32] = 1;
                *((_QWORD *)v126 + 3) += v125;
                v127 = *((unsigned int *)v126 + 2);
                if (v127 >= *((unsigned int *)v126 + 3))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123[40 * v122], (uint64_t)(v126 + 16), v127 + 1, 8);
                  v127 = *((unsigned int *)v126 + 2);
                }
                *(_QWORD *)(*(_QWORD *)v126 + 8 * v127) = v72;
                v118 += HIDWORD(v124) & 1;
                ++*((_DWORD *)v126 + 2);
                ++v120;
                v121 -= 4;
              }
              while (v121);
            }
            *(_QWORD *)&v434 = v118;
            *((_QWORD *)&v434 + 1) = v119;
            v67 = v424;
            v71 = v416;
          }
          ++v67;
        }
        while (v67 != v420);
        v128 = (_QWORD *)v442[0];
      }
      else
      {
        v128 = 0;
      }
      sub_1C47655E8((uint64_t)&v441, v128);
      if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
        free(__p.__r_.__value_.__l.__data_);
      sub_1C47655E8((uint64_t)&v447, v448);
      CyclesCount = (llvm *)v443.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v443.__r_.__value_.__l.__data_ != &v443.__r_.__value_.__r.__words[2])
        free(v443.__r_.__value_.__l.__data_);
      if (v427[3] && !v427[11])
      {
        v129 = *((_QWORD *)v407 + 4);
        if ((unint64_t)(*((_QWORD *)v407 + 3) - v129) > 9)
        {
          *(_WORD *)(v129 + 8) = 10016;
          *(_QWORD *)v129 = *(_QWORD *)"Function '";
          v130 = (_WORD *)(*((_QWORD *)v407 + 4) + 10);
          *((_QWORD *)v407 + 4) = v130;
        }
        else
        {
          llvm::raw_ostream::write(v407, "Function '", 0xAuLL);
          v130 = (_WORD *)*((_QWORD *)v407 + 4);
        }
        v131 = v433;
        if (v433 <= *((_QWORD *)v407 + 3) - (_QWORD)v130)
        {
          if (v433)
          {
            memcpy(v130, Name, v433);
            v130 = (_WORD *)(*((_QWORD *)v407 + 4) + v131);
            *((_QWORD *)v407 + 4) = v130;
          }
        }
        else
        {
          llvm::raw_ostream::write(v407, (const char *)Name, v433);
          v130 = (_WORD *)*((_QWORD *)v407 + 4);
        }
        if (*((_QWORD *)v407 + 3) - (_QWORD)v130 > 1uLL)
        {
          *v130 = 2599;
          *((_QWORD *)v407 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v407, "'\n", 2uLL);
        }
        CyclesCount = sub_1C5A8790C((uint64_t)&v427, &Name, v407);
        v132 = (_BYTE *)*((_QWORD *)v407 + 4);
        if ((unint64_t)v132 >= *((_QWORD *)v407 + 3))
        {
          CyclesCount = llvm::raw_ostream::write(v407, 10);
        }
        else
        {
          *((_QWORD *)v407 + 4) = v132 + 1;
          *v132 = 10;
        }
      }
      v15 = v410 + 1;
    }
    while (v410 + 1 != v405);
  }
  v134 = (char *)v428;
  v133 = v429;
  if (v428 != v429)
  {
    v417 = v429;
    while (v134[88])
    {
LABEL_276:
      v134 += 96;
      if (v134 == v133)
        goto LABEL_475;
    }
    v135 = *((_QWORD *)v134 + 3);
    Name = (void *)*((_QWORD *)v134 + 2);
    v433 = v135;
    v137 = *((_QWORD *)v134 + 8);
    v136 = *((_QWORD *)v134 + 9);
    v421 = (void **)v134;
    v138 = v427;
    if (v137 == v136)
    {
      v144 = 0;
      v175 = 0;
      v142 = 0;
      v141 = 0;
      v140 = 0;
    }
    else
    {
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      do
      {
        v145 = *(unsigned int *)(v137 + 8);
        if ((_DWORD)v145)
        {
          v146 = 0;
          v147 = *(_QWORD **)v137;
          v148 = *(_QWORD *)v137 + 8 * v145;
          v149 = *(_QWORD **)v137;
          do
          {
            v150 = (_DWORD *)*v149;
            if (*(_DWORD *)*v149)
            {
              v151 = v150[6];
              if ((_DWORD)v151)
              {
                v152 = *((_QWORD *)v150 + 2);
                v153 = v152 + 8 * v151;
                do
                {
                  v154 = 8 * v145;
                  v155 = v147;
                  while (*v155 != **(_QWORD **)v152)
                  {
                    ++v155;
                    v154 -= 8;
                    if (!v154)
                    {
                      v155 = (_QWORD *)v148;
                      break;
                    }
                  }
                  if (v145 == v155 - v147)
                    v146 += *(_QWORD *)(*(_QWORD *)v152 + 24);
                  v152 += 8;
                }
                while (v152 != v153);
              }
            }
            else
            {
              v156 = v150[14];
              if ((_DWORD)v156)
              {
                v157 = (uint64_t *)*((_QWORD *)v150 + 6);
                v158 = 8 * v156;
                do
                {
                  v159 = *v157++;
                  v146 += *(_QWORD *)(v159 + 24);
                  v158 -= 8;
                }
                while (v158);
              }
            }
            v160 = v150[14];
            if ((_DWORD)v160)
            {
              v161 = (uint64_t *)*((_QWORD *)v150 + 6);
              v162 = 8 * v160;
              do
              {
                v163 = *v161++;
                *(_QWORD *)(v163 + 32) = *(_QWORD *)(v163 + 24);
                v162 -= 8;
              }
              while (v162);
            }
            ++v149;
          }
          while (v149 != (_QWORD *)v148);
        }
        else
        {
          v146 = 0;
        }
        CyclesCount = (llvm *)llvm::GCOVBlock::getCyclesCount(v137);
        v164 = (char *)CyclesCount + v146;
        *(_QWORD *)(v137 + 24) = (char *)CyclesCount + v146;
        if (*(_BYTE *)(v137 + 32))
          v165 = v164 == 0;
        else
          v165 = 1;
        if (!v165)
          ++v141;
        if (v138[1] && (v166 = *(unsigned int *)(v137 + 8), (_DWORD)v166))
        {
          v167 = *(_QWORD **)v137;
          v168 = *(_QWORD *)v137 + 8 * v166;
          v169 = v164 != 0;
          do
          {
            v170 = *v167;
            if (v139 != *(_DWORD *)(*(_QWORD *)(*v167 + 80) + 4 * *(unsigned int *)(*v167 + 88) - 4))
              goto LABEL_175;
            v171 = *(unsigned int *)(v170 + 56);
            if (!(_DWORD)v171)
              goto LABEL_175;
            v172 = 0;
            v173 = *(uint64_t **)(v170 + 48);
            v174 = 8 * v171;
            v175 = v143;
            do
            {
              v176 = *v173++;
              if (*(_QWORD *)(v176 + 24))
                ++v172;
              v175 += v169;
              v174 -= 8;
            }
            while (v174);
            if (v171 > 1)
            {
              v142 += v171;
              v144 += v172;
            }
            else
            {
LABEL_175:
              v175 = v143;
            }
            ++v167;
            v143 = v175;
          }
          while (v167 != (_QWORD *)v168);
        }
        else
        {
          v175 = v143;
        }
        v140 += *(unsigned __int8 *)(v137 + 32);
        ++v139;
        v137 += 40;
        v143 = v175;
      }
      while (v137 != v136);
    }
    *(_QWORD *)&v434 = v140;
    *((_QWORD *)&v434 + 1) = v141;
    *(_QWORD *)&v435 = v142;
    *((_QWORD *)&v435 + 1) = v175;
    v436 = v144;
    v134 = (char *)v421;
    v178 = *v421;
    v177 = (std::string::size_type)v421[1];
    if (v138[9])
    {
      v179 = v407;
      if (v177 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_665;
      if (v177 >= 0x17)
      {
        v187 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v177 | 7) != 0x17)
          v187 = v177 | 7;
        v188 = v187 + 1;
        p_dst = operator new(v187 + 1);
        __dst.__r_.__value_.__l.__size_ = v177;
        __dst.__r_.__value_.__r.__words[2] = v188 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v421[1];
        p_dst = &__dst;
        if (!v177)
          goto LABEL_211;
      }
      CyclesCount = (llvm *)memmove(p_dst, v178, v177);
LABEL_211:
      *((_BYTE *)p_dst + v177) = 0;
LABEL_247:
      v207 = v427;
      if (!v427[11])
      {
        v208 = *((_QWORD *)v179 + 4);
        if ((unint64_t)(*((_QWORD *)v179 + 3) - v208) > 5)
        {
          *(_WORD *)(v208 + 4) = 10016;
          *(_DWORD *)v208 = 1701603654;
          v209 = (_WORD *)(*((_QWORD *)v179 + 4) + 6);
          *((_QWORD *)v179 + 4) = v209;
        }
        else
        {
          llvm::raw_ostream::write(v179, "File '", 6uLL);
          v209 = (_WORD *)*((_QWORD *)v179 + 4);
        }
        v210 = v433;
        if (v433 <= *((_QWORD *)v179 + 3) - (_QWORD)v209)
        {
          if (v433)
          {
            memcpy(v209, Name, v433);
            v209 = (_WORD *)(*((_QWORD *)v179 + 4) + v210);
            *((_QWORD *)v179 + 4) = v209;
          }
        }
        else
        {
          llvm::raw_ostream::write(v179, (const char *)Name, v433);
          v209 = (_WORD *)*((_QWORD *)v179 + 4);
        }
        if (*((_QWORD *)v179 + 3) - (_QWORD)v209 > 1uLL)
        {
          *v209 = 2599;
          *((_QWORD *)v179 + 4) += 2;
          v207 = v427;
        }
        else
        {
          llvm::raw_ostream::write(v179, "'\n", 2uLL);
        }
        CyclesCount = sub_1C5A8790C((uint64_t)&v427, &Name, v179);
        if (!v207[9] && !v207[6])
        {
          v211 = *((_QWORD *)v179 + 4);
          if ((unint64_t)(*((_QWORD *)v179 + 3) - v211) > 9)
          {
            *(_WORD *)(v211 + 8) = 10016;
            *(_QWORD *)v211 = *(_QWORD *)"Creating '";
            *((_QWORD *)v179 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v179, "Creating '", 0xAuLL);
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v212 = &__dst;
          else
            v212 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __dst.__r_.__value_.__l.__size_;
          CyclesCount = llvm::raw_ostream::write(v179, (const char *)v212, size);
          v214 = (_WORD *)*((_QWORD *)v179 + 4);
          if (*((_QWORD *)v179 + 3) - (_QWORD)v214 > 1uLL)
          {
            *v214 = 2599;
            *((_QWORD *)v179 + 4) += 2;
          }
          else
          {
            CyclesCount = llvm::raw_ostream::write(v179, "'\n", 2uLL);
          }
        }
        v215 = (_BYTE *)*((_QWORD *)v179 + 4);
        if ((unint64_t)v215 >= *((_QWORD *)v179 + 3))
        {
          CyclesCount = llvm::raw_ostream::write(v179, 10);
        }
        else
        {
          *((_QWORD *)v179 + 4) = v215 + 1;
          *v215 = 10;
        }
      }
      if (v207[9] || v207[6])
        goto LABEL_273;
      v443.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v449) = 0;
      if (v207[11])
        goto LABEL_300;
      v451.__val_ = 0;
      v451.__cat_ = std::system_category();
      if ((_BYTE)v449)
      {
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v443);
        LOBYTE(v449) = 0;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v216 = &__dst;
      else
        v216 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v217 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        v217 = __dst.__r_.__value_.__l.__size_;
      CyclesCount = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v443, v216, v217, (uint64_t)&v451, 3);
      LOBYTE(v449) = 1;
      if (v451.__val_)
      {
        v218 = (llvm::raw_ostream *)llvm::errs(CyclesCount);
        std::error_code::message(&__p, &v451);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v220 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v220 = __p.__r_.__value_.__l.__size_;
        CyclesCount = llvm::raw_ostream::write(v218, (const char *)p_p, v220);
        v221 = (_BYTE *)*((_QWORD *)v218 + 4);
        if ((unint64_t)v221 >= *((_QWORD *)v218 + 3))
        {
          CyclesCount = llvm::raw_ostream::write(v218, 10);
        }
        else
        {
          *((_QWORD *)v218 + 4) = v221 + 1;
          *v221 = 10;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_449:
        if ((_BYTE)v449)
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v443);
LABEL_273:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v133 = v417;
        goto LABEL_276;
      }
      if (v207[11])
LABEL_300:
        v222 = (llvm::raw_ostream *)llvm::outs(CyclesCount);
      else
        v222 = (llvm::raw_ostream *)&v443;
      if (v207[6])
      {
        *(_OWORD *)&v437.__r_.__value_.__l.__data_ = 0uLL;
LABEL_303:
        v437.__r_.__value_.__r.__words[2] = 0;
LABEL_313:
        v232 = (void *)*((_QWORD *)v222 + 4);
        if (*((_QWORD *)v222 + 3) - (_QWORD)v232 > 0x16uLL)
        {
          qmemcpy(v232, "        -:    0:Source:", 23);
          *((_QWORD *)v222 + 4) += 23;
        }
        else
        {
          llvm::raw_ostream::write(v222, "        -:    0:Source:", 0x17uLL);
        }
        llvm::raw_ostream::write(v222, (const char *)v421[2], (size_t)v421[3]);
        v233 = (_BYTE *)*((_QWORD *)v222 + 4);
        if ((unint64_t)v233 >= *((_QWORD *)v222 + 3))
        {
          llvm::raw_ostream::write(v222, 10);
        }
        else
        {
          *((_QWORD *)v222 + 4) = v233 + 1;
          *v233 = 10;
        }
        v234 = (void *)*((_QWORD *)v222 + 4);
        if (*((_QWORD *)v222 + 3) - (_QWORD)v234 > 0x15uLL)
        {
          qmemcpy(v234, "        -:    0:Graph:", 22);
          v235 = (_BYTE *)(*((_QWORD *)v222 + 4) + 22);
          *((_QWORD *)v222 + 4) = v235;
        }
        else
        {
          llvm::raw_ostream::write(v222, "        -:    0:Graph:", 0x16uLL);
          v235 = (_BYTE *)*((_QWORD *)v222 + 4);
        }
        if (a5 <= *((_QWORD *)v222 + 3) - (_QWORD)v235)
        {
          if (a5)
          {
            memcpy(v235, a4, a5);
            v235 = (_BYTE *)(*((_QWORD *)v222 + 4) + a5);
            *((_QWORD *)v222 + 4) = v235;
          }
        }
        else
        {
          llvm::raw_ostream::write(v222, (const char *)a4, a5);
          v235 = (_BYTE *)*((_QWORD *)v222 + 4);
        }
        if ((unint64_t)v235 >= *((_QWORD *)v222 + 3))
        {
          llvm::raw_ostream::write(v222, 10);
        }
        else
        {
          *((_QWORD *)v222 + 4) = v235 + 1;
          *v235 = 10;
        }
        v236 = (void *)*((_QWORD *)v222 + 4);
        if (*((_QWORD *)v222 + 3) - (_QWORD)v236 > 0x14uLL)
        {
          qmemcpy(v236, "        -:    0:Data:", 21);
          v237 = (_BYTE *)(*((_QWORD *)v222 + 4) + 21);
          *((_QWORD *)v222 + 4) = v237;
        }
        else
        {
          llvm::raw_ostream::write(v222, "        -:    0:Data:", 0x15uLL);
          v237 = (_BYTE *)*((_QWORD *)v222 + 4);
        }
        if (a7 <= *((_QWORD *)v222 + 3) - (_QWORD)v237)
        {
          if (a7)
          {
            memcpy(v237, a6, a7);
            v237 = (_BYTE *)(*((_QWORD *)v222 + 4) + a7);
            *((_QWORD *)v222 + 4) = v237;
          }
        }
        else
        {
          llvm::raw_ostream::write(v222, (const char *)a6, a7);
          v237 = (_BYTE *)*((_QWORD *)v222 + 4);
        }
        if ((unint64_t)v237 >= *((_QWORD *)v222 + 3))
        {
          llvm::raw_ostream::write(v222, 10);
        }
        else
        {
          *((_QWORD *)v222 + 4) = v237 + 1;
          *v237 = 10;
        }
        v238 = (void *)*((_QWORD *)v222 + 4);
        if (*((_QWORD *)v222 + 3) - (_QWORD)v238 > 0x14uLL)
        {
          qmemcpy(v238, "        -:    0:Runs:", 21);
          *((_QWORD *)v222 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v222, "        -:    0:Runs:", 0x15uLL);
        }
        sub_1C5E21910(v222, a8[64], 0, 0, 0);
        v242 = (_BYTE *)*((_QWORD *)v222 + 4);
        if ((unint64_t)v242 >= *((_QWORD *)v222 + 3))
        {
          llvm::raw_ostream::write(v222, 10);
        }
        else
        {
          *((_QWORD *)v222 + 4) = v242 + 1;
          *v242 = 10;
        }
        if (a8[15] <= 3)
        {
          v243 = (void *)*((_QWORD *)v222 + 4);
          if (*((_QWORD *)v222 + 3) - (_QWORD)v243 > 0x18uLL)
          {
            qmemcpy(v243, "        -:    0:Programs:", 25);
            *((_QWORD *)v222 + 4) += 25;
          }
          else
          {
            llvm::raw_ostream::write(v222, "        -:    0:Programs:", 0x19uLL);
          }
          sub_1C5E21910(v222, a8[65], 0, 0, 0);
          v244 = (_BYTE *)*((_QWORD *)v222 + 4);
          if ((unint64_t)v244 >= *((_QWORD *)v222 + 3))
          {
            llvm::raw_ostream::write(v222, 10);
          }
          else
          {
            *((_QWORD *)v222 + 4) = v244 + 1;
            *v244 = 10;
          }
        }
        if (!v437.__r_.__value_.__r.__words[2])
        {
LABEL_447:
          CyclesCount = (llvm *)v437.__r_.__value_.__r.__words[0];
          if (v437.__r_.__value_.__r.__words[0])
            CyclesCount = (llvm *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v437.__r_.__value_.__l.__data_
                                                                                    + 8))(v437.__r_.__value_.__r.__words[0]);
          goto LABEL_449;
        }
        v245 = 1;
        while (v245 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v134 + 9) - *((_QWORD *)v134 + 8)) >> 3))
        {
          v279 = (void *)*((_QWORD *)v222 + 4);
          if (*((_QWORD *)v222 + 3) - (_QWORD)v279 > 9uLL)
          {
            qmemcpy(v279, "        -:", 10);
            *((_QWORD *)v222 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v222, "        -:", 0xAuLL);
          }
          sub_1C5A87F0C((uint64_t)&v437, v222, v245);
LABEL_441:
          ++v245;
          v134 = (char *)v421;
          if (!v437.__r_.__value_.__r.__words[2])
            goto LABEL_447;
        }
        v406 = *((_QWORD *)v134 + 8);
        v246 = v427;
        if (v427[1])
        {
          v247 = v421[5];
          if (v245 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v421[6] - v247) >> 3))
          {
            v248 = (unsigned int ***)&v247[24 * v245];
            v250 = *v248;
            v249 = v248[1];
            if (v250 != v249)
            {
              v251 = v249;
              do
              {
                v252 = *v250;
                v253 = (uint64_t *)*((_QWORD *)*v250 + 11);
                v255 = v253 + 1;
                v254 = (_DWORD *)*v253;
                v256 = (*v250)[24];
                if (*(int *)(*(_QWORD *)*v250 + 60) < 2)
                  v255 = &v253[v256 - 1];
                v257 = *v255;
                v258 = *(unsigned int *)(v257 + 24);
                if ((_DWORD)v258)
                {
                  v259 = 0;
                  v260 = *(uint64_t **)(v257 + 16);
                  v261 = 8 * v258;
                  do
                  {
                    v262 = *v260++;
                    v259 += *(_QWORD *)(v262 + 24);
                    v261 -= 8;
                  }
                  while (v261);
                }
                else
                {
                  v259 = 0;
                }
                v263 = 0;
                if ((_DWORD)v256)
                {
                  v264 = 8 * v256;
                  do
                  {
                    v265 = *v253 == v257 || *(_DWORD *)*v253 == 0;
                    if (!v265 && *(_QWORD *)(*v253 + 8))
                      ++v263;
                    ++v253;
                    v264 -= 8;
                  }
                  while (v264);
                }
                v266 = *((_QWORD *)v254 + 1);
                v267 = *((_QWORD *)v222 + 4);
                if ((unint64_t)(*((_QWORD *)v222 + 3) - v267) > 8)
                {
                  *(_BYTE *)(v267 + 8) = 32;
                  *(_QWORD *)v267 = *(_QWORD *)"function ";
                  *((_QWORD *)v222 + 4) += 9;
                }
                else
                {
                  llvm::raw_ostream::write(v222, "function ", 9uLL);
                }
                v269 = (const void *)llvm::GCOVFunction::getName((llvm::GCOVFunction *)v252, v246[8], v239, v240, v241);
                v270 = v268;
                v271 = (_QWORD *)*((_QWORD *)v222 + 4);
                if (v268 <= *((_QWORD *)v222 + 3) - (_QWORD)v271)
                {
                  if (v268)
                  {
                    memcpy(v271, v269, v268);
                    v271 = (_QWORD *)(*((_QWORD *)v222 + 4) + v270);
                    *((_QWORD *)v222 + 4) = v271;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v222, (const char *)v269, v268);
                  v271 = (_QWORD *)*((_QWORD *)v222 + 4);
                }
                if (*((_QWORD *)v222 + 3) - (_QWORD)v271 > 7uLL)
                {
                  *v271 = 0x2064656C6C616320;
                  *((_QWORD *)v222 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v222, " called ", 8uLL);
                }
                sub_1C5E21910(v222, v266, 0, 0, 0);
                v272 = *((_QWORD *)v222 + 4);
                if ((unint64_t)(*((_QWORD *)v222 + 3) - v272) > 9)
                {
                  *(_WORD *)(v272 + 8) = 8292;
                  *(_QWORD *)v272 = *(_QWORD *)" returned ";
                  *((_QWORD *)v222 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v222, " returned ", 0xAuLL);
                }
                v273 = 0;
                if (v266 && v259)
                {
                  if (100 * v259 >= v266)
                    v273 = (100 * v259 / v266);
                  else
                    v273 = 1;
                }
                sub_1C5E21910(v222, v273, 0, 0, 0);
                v274 = *((_QWORD *)v222 + 4);
                if ((unint64_t)(*((_QWORD *)v222 + 3) - v274) > 0x11)
                {
                  *(_WORD *)(v274 + 16) = 8292;
                  *(_OWORD *)v274 = *(_OWORD *)"% blocks executed ";
                  *((_QWORD *)v222 + 4) += 18;
                }
                else
                {
                  llvm::raw_ostream::write(v222, "% blocks executed ", 0x12uLL);
                }
                v275 = 0;
                if (v263)
                {
                  v276 = v252[24] - 2;
                  if (v252[24] != 2)
                  {
                    v277 = 100 * v263;
                    if (v277 >= v276)
                      v275 = (v277 / v276);
                    else
                      v275 = 1;
                  }
                }
                sub_1C5E21910(v222, v275, 0, 0, 0);
                v278 = (_WORD *)*((_QWORD *)v222 + 4);
                if (*((_QWORD *)v222 + 3) - (_QWORD)v278 > 1uLL)
                {
                  *v278 = 2597;
                  *((_QWORD *)v222 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v222, "%\n", 2uLL);
                }
                ++v250;
              }
              while (v250 != v251);
            }
          }
        }
        if (*(_BYTE *)(v406 + 40 * v245 + 32))
        {
          v280 = *(_QWORD *)(v406 + 40 * v245 + 24);
          if (v280)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8133270;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"%9llu:";
            __p.__r_.__value_.__r.__words[2] = v280;
            llvm::raw_ostream::operator<<(v222, (uint64_t)&__p);
            goto LABEL_412;
          }
          v281 = *((_QWORD *)v222 + 4);
          if ((unint64_t)(*((_QWORD *)v222 + 3) - v281) <= 9)
          {
            v282 = v222;
            v283 = "    #####:";
            goto LABEL_411;
          }
          *(_WORD *)(v281 + 8) = 14883;
          v308 = *(_QWORD *)"    #####:";
        }
        else
        {
          v281 = *((_QWORD *)v222 + 4);
          if ((unint64_t)(*((_QWORD *)v222 + 3) - v281) <= 9)
          {
            v282 = v222;
            v283 = "        -:";
LABEL_411:
            llvm::raw_ostream::write(v282, v283, 0xAuLL);
            goto LABEL_412;
          }
          *(_WORD *)(v281 + 8) = 14893;
          v308 = 0x2020202020202020;
        }
        *(_QWORD *)v281 = v308;
        *((_QWORD *)v222 + 4) += 10;
LABEL_412:
        v284 = (uint64_t **)(v406 + 40 * v245);
        sub_1C5A87F0C((uint64_t)&v437, v222, v245);
        v285 = *((unsigned int *)v284 + 2);
        if ((_DWORD)v285)
        {
          v286 = 0;
          v287 = 0;
          v288 = *v284;
          v289 = (uint64_t)&(*v284)[v285];
          v411 = v245;
          do
          {
            v290 = *v288;
            if (v245 == *(_DWORD *)(*(_QWORD *)(*v288 + 80) + 4 * *(unsigned int *)(*v288 + 88) - 4))
            {
              if (*v246)
              {
                v291 = *(_QWORD *)(v290 + 8);
                if (v291)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8133270;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"%9llu:";
                  __p.__r_.__value_.__r.__words[2] = v291;
                  llvm::raw_ostream::operator<<(v222, (uint64_t)&__p);
                }
                else
                {
                  v292 = *((_QWORD *)v222 + 4);
                  if ((unint64_t)(*((_QWORD *)v222 + 3) - v292) > 9)
                  {
                    *(_WORD *)(v292 + 8) = 14884;
                    *(_QWORD *)v292 = *(_QWORD *)"    $$$$$:";
                    *((_QWORD *)v222 + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v222, "    $$$$$:", 0xAuLL);
                  }
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E813F3D8;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)"%5u-block %2u\n";
                __p.__r_.__value_.__r.__words[2] = v245;
                v439 = v286;
                llvm::raw_ostream::operator<<(v222, (uint64_t)&__p);
                ++v286;
              }
              if (v246[1])
              {
                v293 = *(unsigned int *)(v290 + 56);
                if (v293 < 2)
                {
                  if ((_DWORD)v293 == 1 && v246[5] != 0)
                  {
                    v305 = *(const std::error_category **)(**(_QWORD **)(v290 + 48) + 24);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8132728;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"unconditional %2u ";
                    __p.__r_.__value_.__r.__words[2] = v287;
                    v306 = llvm::raw_ostream::operator<<(v222, (uint64_t)&__p);
                    *(_QWORD *)&v451.__val_ = v246;
                    v451.__cat_ = v305;
                    v452 = v305;
                    sub_1C5A88064(v306, (unint64_t *)&v451);
                    v307 = (_BYTE *)*((_QWORD *)v222 + 4);
                    if ((unint64_t)v307 >= *((_QWORD *)v222 + 3))
                    {
                      llvm::raw_ostream::write(v222, 10);
                    }
                    else
                    {
                      *((_QWORD *)v222 + 4) = v307 + 1;
                      *v307 = 10;
                    }
                    ++v287;
                  }
                }
                else
                {
                  v294 = 0;
                  v295 = *(uint64_t **)(v290 + 48);
                  v296 = 8 * v293;
                  v297 = 8 * v293;
                  v298 = v295;
                  do
                  {
                    v299 = *v298++;
                    v294 = (const std::error_category *)((char *)v294 + *(_QWORD *)(v299 + 24));
                    v297 -= 8;
                  }
                  while (v297);
                  do
                  {
                    v300 = *v295;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E8132728;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"branch %2u ";
                    __p.__r_.__value_.__r.__words[2] = v287;
                    v301 = llvm::raw_ostream::operator<<(v222, (uint64_t)&__p);
                    v302 = *(const std::error_category **)(v300 + 24);
                    *(_QWORD *)&v451.__val_ = v246;
                    v451.__cat_ = v302;
                    v452 = v294;
                    sub_1C5A88064(v301, (unint64_t *)&v451);
                    v303 = (_BYTE *)*((_QWORD *)v222 + 4);
                    if ((unint64_t)v303 >= *((_QWORD *)v222 + 3))
                    {
                      llvm::raw_ostream::write(v222, 10);
                    }
                    else
                    {
                      *((_QWORD *)v222 + 4) = v303 + 1;
                      *v303 = 10;
                    }
                    ++v295;
                    ++v287;
                    v296 -= 8;
                  }
                  while (v296);
                  v245 = v411;
                }
              }
            }
            ++v288;
          }
          while (v288 != (uint64_t *)v289);
        }
        goto LABEL_441;
      }
      v224 = *v421;
      v223 = (std::string::size_type)v421[1];
      memset(&v437, 0, sizeof(v437));
      v440 = 261;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
      __p.__r_.__value_.__l.__size_ = v223;
      llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&__p, 0, 0, (uint64_t)&v451);
      if ((v452 & 1) != 0)
      {
        v227 = *(_QWORD *)&v451.__val_;
        v450 = v451;
        if (v451.__val_)
        {
          v228 = (llvm::raw_ostream *)llvm::errs(v225);
          v229 = (_WORD *)*((_QWORD *)v228 + 4);
          if (v223 <= *((_QWORD *)v228 + 3) - (_QWORD)v229)
          {
            if (v223)
            {
              memcpy(v229, v224, v223);
              v229 = (_WORD *)(*((_QWORD *)v228 + 4) + v223);
              *((_QWORD *)v228 + 4) = v229;
            }
          }
          else
          {
            llvm::raw_ostream::write(v228, (const char *)v224, v223);
            v229 = (_WORD *)*((_QWORD *)v228 + 4);
          }
          if (*((_QWORD *)v228 + 3) - (_QWORD)v229 > 1uLL)
          {
            *v229 = 8250;
            *((_QWORD *)v228 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v228, ": ", 2uLL);
          }
          std::error_code::message(&__p, &v450);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v309 = &__p;
          else
            v309 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v310 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v310 = __p.__r_.__value_.__l.__size_;
          llvm::raw_ostream::write(v228, (const char *)v309, v310);
          v311 = (_BYTE *)*((_QWORD *)v228 + 4);
          if (*((_BYTE **)v228 + 3) == v311)
          {
            llvm::raw_ostream::write(v228, "\n", 1uLL);
          }
          else
          {
            *v311 = 10;
            ++*((_QWORD *)v228 + 4);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v437.__r_.__value_.__l.__size_ = (std::string::size_type)"";
          goto LABEL_303;
        }
      }
      else
      {
        v226 = std::system_category();
        *(_QWORD *)&v450.__val_ = 0;
        v450.__cat_ = v226;
        v227 = *(_QWORD *)&v451.__val_;
      }
      v230 = *(_QWORD *)(v227 + 8);
      v231 = *(_QWORD *)(v227 + 16) - v230;
      v437.__r_.__value_.__r.__words[0] = v227;
      v437.__r_.__value_.__l.__size_ = v230;
      v437.__r_.__value_.__r.__words[2] = v231;
      goto LABEL_313;
    }
    memset(&__dst, 0, sizeof(__dst));
    v179 = v407;
    if (v138[7] && ((char *)v177 != a3 || a3 && memcmp(v178, a2, (size_t)a3)))
    {
      sub_1C5A87BB8(&v443, a2, a3, v138[4]);
      v181 = std::string::append(&v443, "##");
      v182 = v181->__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = v181->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v181->__r_.__value_.__r.__words[1] + 7);
      v183 = HIBYTE(v181->__r_.__value_.__r.__words[2]);
      v181->__r_.__value_.__l.__size_ = 0;
      v181->__r_.__value_.__r.__words[2] = 0;
      v181->__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = v182;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7);
      __dst.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v183;
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
    }
    sub_1C5A87BB8(&v443, (char *)v178, (char *)v177, v138[4]);
    if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v184 = &v443;
    else
      v184 = (std::string *)v443.__r_.__value_.__r.__words[0];
    if ((v443.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v185 = *((_BYTE *)&v443.__r_.__value_.__s + 23) & 0x7F;
    else
      v185 = v443.__r_.__value_.__l.__size_;
    std::string::append(&__dst, (const std::string::value_type *)v184, v185);
    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v443.__r_.__value_.__l.__data_);
    if (!v138[12])
    {
LABEL_246:
      CyclesCount = (llvm *)std::string::append(&__dst, ".gcov");
      goto LABEL_247;
    }
    *(_OWORD *)&v443.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
    v443.__r_.__value_.__r.__words[2] = 0;
    if (!v178)
    {
      v189 = 0;
      v190 = 0;
      v191 = 0;
      memset(&__p, 0, sizeof(__p));
      goto LABEL_218;
    }
    if (v177 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_665;
    if (v177 >= 0x17)
    {
      v192 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v177 | 7) != 0x17)
        v192 = v177 | 7;
      v193 = v192 + 1;
      v186 = (std::string *)operator new(v192 + 1);
      __p.__r_.__value_.__l.__size_ = v177;
      __p.__r_.__value_.__r.__words[2] = v193 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v177;
      v186 = &__p;
      if (!v177)
        goto LABEL_217;
    }
    memmove(v186, v178, v177);
LABEL_217:
    v186->__r_.__value_.__s.__data_[v177] = 0;
    v191 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v189 = __p.__r_.__value_.__l.__size_;
    v190 = __p.__r_.__value_.__r.__words[0];
LABEL_218:
    v194 = v191 < 0;
    if (v191 >= 0)
      v195 = (int *)&__p;
    else
      v195 = (int *)v190;
    v196 = v191 & 0x7F;
    if (v194)
      v197 = v189;
    else
      v197 = v196;
    llvm::MD5::update((int *)&v443, v195, v197);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    llvm::MD5::final((int *)&v443, &v450.__val_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v439;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
    sub_1C5050690((unsigned __int8 *)&v450, 16, 1, &__p);
    v198 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_665;
    v199 = (const void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ >= 0x17)
    {
      v201 = (__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__p.__r_.__value_.__l.__size_ | 7) != 0x17)
        v201 = __p.__r_.__value_.__l.__size_ | 7;
      v202 = v201 + 1;
      v200 = operator new(v201 + 1);
      v437.__r_.__value_.__l.__size_ = v198;
      v437.__r_.__value_.__r.__words[2] = v202 | 0x8000000000000000;
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
    }
    else
    {
      *((_BYTE *)&v437.__r_.__value_.__s + 23) = __p.__r_.__value_.__s.__data_[8];
      v200 = &v437;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_234;
    }
    memmove(v200, v199, v198);
LABEL_234:
    *((_BYTE *)v200 + v198) = 0;
    v203 = std::string::insert(&v437, 0, "##");
    v204 = (const std::error_category *)v203->__r_.__value_.__r.__words[2];
    v451 = *(std::error_code *)&v203->__r_.__value_.__l.__data_;
    v452 = v204;
    v203->__r_.__value_.__l.__size_ = 0;
    v203->__r_.__value_.__r.__words[2] = 0;
    v203->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v452) >= 0)
      v205 = &v451;
    else
      v205 = *(std::error_code **)&v451.__val_;
    if (SHIBYTE(v452) >= 0)
      cat = (const std::error_category *)(HIBYTE(v452) & 0x7F);
    else
      cat = v451.__cat_;
    std::string::append(&__dst, (const std::string::value_type *)v205, (std::string::size_type)cat);
    if (SHIBYTE(v452) < 0)
      operator delete(*(void **)&v451.__val_);
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v437.__r_.__value_.__l.__data_);
    if ((int *)__p.__r_.__value_.__l.__data_ != &v439)
      free(__p.__r_.__value_.__l.__data_);
    goto LABEL_246;
  }
LABEL_475:
  if (v427[6] && !v427[9])
  {
    v444 = 0;
    v443.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    *(_OWORD *)&v443.__r_.__value_.__r.__words[1] = (unint64_t)a3;
    v445 = a3;
    v446 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&v443);
    v345 = v444;
    if (v444 > 0x7FFFFFFFFFFFFFF7)
LABEL_665:
      abort();
    v346 = (const void *)v443.__r_.__value_.__r.__words[2];
    if (v444 >= 0x17)
    {
      v348 = (v444 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v444 | 7) != 0x17)
        v348 = v444 | 7;
      v349 = v348 + 1;
      v347 = (std::string *)operator new(v348 + 1);
      __p.__r_.__value_.__l.__size_ = v345;
      __p.__r_.__value_.__r.__words[2] = v349 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v347;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v444;
      v347 = &__p;
      if (!v444)
        goto LABEL_554;
    }
    memmove(v347, v346, v345);
LABEL_554:
    v347->__r_.__value_.__s.__data_[v345] = 0;
    v451.__val_ = 0;
    v451.__cat_ = std::system_category();
    v350 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v351 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v351 = __p.__r_.__value_.__l.__size_;
    sub_1C484371C((uint64_t)&Name, v351 + 5);
    if ((SBYTE7(v434) & 0x80u) == 0)
      p_Name = &Name;
    else
      p_Name = (void **)Name;
    if (v351)
    {
      if (v350 >= 0)
        v353 = &__p;
      else
        v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(p_Name, v353, v351);
    }
    strcpy((char *)p_Name + v351, ".gcov");
    if ((SBYTE7(v434) & 0x80u) == 0)
      v354 = &Name;
    else
      v354 = (void **)Name;
    if ((SBYTE7(v434) & 0x80u) == 0)
      v355 = BYTE7(v434) & 0x7F;
    else
      v355 = v433;
    v356 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v443, v354, v355, (uint64_t)&v451, 3);
    if (SBYTE7(v434) < 0)
      operator delete(Name);
    v412 = v350;
    if (v451.__val_)
    {
      v357 = (llvm::raw_ostream *)llvm::errs(v356);
      std::error_code::message((std::string *)&Name, &v451);
      if ((SBYTE7(v434) & 0x80u) == 0)
        v358 = (const char *)&Name;
      else
        v358 = (const char *)Name;
      if ((SBYTE7(v434) & 0x80u) == 0)
        v359 = BYTE7(v434) & 0x7F;
      else
        v359 = v433;
      llvm::raw_ostream::write(v357, v358, v359);
      v360 = (_BYTE *)*((_QWORD *)v357 + 4);
      if ((unint64_t)v360 >= *((_QWORD *)v357 + 3))
      {
        llvm::raw_ostream::write(v357, 10);
      }
      else
      {
        *((_QWORD *)v357 + 4) = v360 + 1;
        *v360 = 10;
      }
      if (SBYTE7(v434) < 0)
        operator delete(Name);
    }
    else
    {
      v422 = (const void **)v428;
      v414 = (const void **)v429;
      if (v428 != v429)
      {
        v361 = v427;
        do
        {
          v362 = v445;
          if (v444 - (unint64_t)v445 > 4)
          {
            *((_BYTE *)v445 + 4) = 58;
            *v362 = 1701603686;
            v363 = (char *)v445 + 5;
            v445 = (char *)v445 + 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, "file:", 5uLL);
            v363 = v445;
          }
          v364 = *v422;
          v365 = (size_t)v422[1];
          if (v365 <= v444 - (unint64_t)v363)
          {
            if (v365)
            {
              memcpy(v363, v364, (size_t)v422[1]);
              v363 = (char *)v445 + v365;
              v445 = (char *)v445 + v365;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, (const char *)v364, (size_t)v422[1]);
            v363 = v445;
          }
          if ((unint64_t)v363 >= v444)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 10);
          }
          else
          {
            v445 = v363 + 1;
            *v363 = 10;
          }
          v366 = (uint64_t **)v422[5];
          v367 = (uint64_t **)v422[6];
          while (v366 != v367)
          {
            v368 = *v366;
            v369 = v366[1];
            while (v368 != v369)
            {
              v370 = *v368;
              v371 = v445;
              if (v444 - (unint64_t)v445 > 8)
              {
                *((_BYTE *)v445 + 8) = 58;
                *v371 = *(_QWORD *)"function:";
                v445 = (char *)v445 + 9;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v443, "function:", 9uLL);
              }
              sub_1C5E21910((llvm::raw_ostream *)&v443, *(unsigned int *)(v370 + 20), 0, 0, 0);
              v372 = v445;
              if ((unint64_t)v445 >= v444)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 44);
              }
              else
              {
                v445 = (char *)v445 + 1;
                *v372 = 44;
              }
              sub_1C5E21910((llvm::raw_ostream *)&v443, *(_QWORD *)(**(_QWORD **)(v370 + 88) + 8), 0, 0, 0);
              v376 = v445;
              if ((unint64_t)v445 >= v444)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 44);
              }
              else
              {
                v445 = (char *)v445 + 1;
                *v376 = 44;
              }
              v378 = (const void *)llvm::GCOVFunction::getName((llvm::GCOVFunction *)v370, v361[8], v373, v374, v375);
              v379 = v377;
              v380 = (char *)v445;
              if (v377 <= v444 - (unint64_t)v445)
              {
                if (v377)
                {
                  memcpy(v445, v378, v377);
                  v380 = (char *)v445 + v379;
                  v445 = (char *)v445 + v379;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v443, (const char *)v378, v377);
                v380 = (char *)v445;
              }
              if ((unint64_t)v380 >= v444)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 10);
              }
              else
              {
                v445 = v380 + 1;
                *v380 = 10;
              }
              ++v368;
            }
            v366 += 3;
          }
          v418 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v422[9] - (_BYTE *)v422[8]) >> 3);
          if (v418 >= 2)
          {
            for (i = 1; i != v418; ++i)
            {
              v382 = v422[8];
              v383 = (uint64_t **)&v382[5 * i];
              if (*((_DWORD *)v383 + 2))
              {
                v384 = v445;
                if (v444 - (unint64_t)v445 > 6)
                {
                  *(_DWORD *)((char *)v445 + 3) = 980708981;
                  *v384 = 1970234220;
                  v445 = (char *)v445 + 7;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v443, "lcount:", 7uLL);
                }
                sub_1C5E21910((llvm::raw_ostream *)&v443, i, 0, 0, 0);
                v385 = v445;
                if ((unint64_t)v445 >= v444)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 44);
                }
                else
                {
                  v445 = (char *)v445 + 1;
                  *v385 = 44;
                }
                sub_1C5E21910((llvm::raw_ostream *)&v443, v382[5 * i + 3], 0, 0, 0);
                v386 = v445;
                if ((unint64_t)v445 >= v444)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 10);
                }
                else
                {
                  v445 = (char *)v445 + 1;
                  *v386 = 10;
                }
                if (v361[1])
                {
                  v387 = *((unsigned int *)v383 + 2);
                  if ((_DWORD)v387)
                  {
                    v388 = *v383;
                    v426 = (uint64_t)&(*v383)[v387];
                    do
                    {
                      v389 = *v388;
                      v390 = *(unsigned int *)(*v388 + 56);
                      if (v390 >= 2
                        && i == *(_DWORD *)(*(_QWORD *)(v389 + 80) + 4 * *(unsigned int *)(v389 + 88) - 4))
                      {
                        v391 = *(_QWORD *)(v389 + 48);
                        v392 = 8 * v390;
                        do
                        {
                          if (*(_QWORD *)(v389 + 8))
                          {
                            if (*(_QWORD *)(*(_QWORD *)v391 + 24))
                              v393 = "taken";
                            else
                              v393 = "nottaken";
                          }
                          else
                          {
                            v393 = "notexec";
                          }
                          v394 = v445;
                          if (v444 - (unint64_t)v445 > 6)
                          {
                            *(_DWORD *)((char *)v445 + 3) = 979919726;
                            *v394 = 1851880034;
                            v445 = (char *)v445 + 7;
                          }
                          else
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, "branch:", 7uLL);
                          }
                          sub_1C5E21910((llvm::raw_ostream *)&v443, i, 0, 0, 0);
                          v395 = v445;
                          if ((unint64_t)v445 >= v444)
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 44);
                          }
                          else
                          {
                            v445 = (char *)v445 + 1;
                            *v395 = 44;
                          }
                          v396 = strlen(v393);
                          v397 = (char *)v445;
                          if (v396 <= v444 - (unint64_t)v445)
                          {
                            if (v396)
                            {
                              memcpy(v445, v393, v396);
                              v397 = (char *)v445 + v396;
                              v445 = (char *)v445 + v396;
                            }
                          }
                          else
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, v393, v396);
                            v397 = (char *)v445;
                          }
                          if ((unint64_t)v397 >= v444)
                          {
                            llvm::raw_ostream::write((llvm::raw_ostream *)&v443, 10);
                          }
                          else
                          {
                            v445 = v397 + 1;
                            *v397 = 10;
                          }
                          v391 += 8;
                          v392 -= 8;
                        }
                        while (v392);
                      }
                      ++v388;
                    }
                    while (v388 != (uint64_t *)v426);
                  }
                }
              }
            }
          }
          v422 += 12;
        }
        while (v422 != v414);
      }
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v443);
    if (v412 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v312 = (char *)v428;
  if (v428)
  {
    v313 = v429;
    if (v429 != v428)
    {
      do
      {
        v313 -= 96;
        sub_1C5A87AB4(v313);
      }
      while (v313 != v312);
      v312 = (char *)v428;
    }
    operator delete(v312);
  }
}

llvm::raw_ostream *sub_1C5A8790C(uint64_t a1, _QWORD *a2, llvm::raw_ostream *a3)
{
  unint64_t v6;
  double v7;
  llvm::raw_ostream *result;
  unint64_t v9;
  double v10;
  llvm::raw_ostream *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(llvm::format_object_base *__hidden);
  const char *v17;
  double v18;
  unint64_t v19;

  v6 = a2[2];
  v7 = (double)(unint64_t)a2[3] * 100.0;
  v16 = &off_1E8192C08;
  v17 = "Lines executed:%.2f%% of %llu\n";
  v18 = v7 / (double)v6;
  v19 = v6;
  result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v16);
  if (*(_BYTE *)(*(_QWORD *)a1 + 1))
  {
    v9 = a2[4];
    if (v9)
    {
      v10 = (double)(unint64_t)a2[5] * 100.0;
      v16 = &off_1E8192C08;
      v17 = "Branches executed:%.2f%% of %llu\n";
      v18 = v10 / (double)v9;
      v19 = v9;
      v11 = llvm::raw_ostream::operator<<(a3, (uint64_t)&v16);
      v12 = a2[4];
      v13 = (double)(unint64_t)a2[6] * 100.0;
      v16 = &off_1E8192C08;
      v17 = "Taken at least once:%.2f%% of %llu\n";
      v18 = v13 / (double)v12;
      v19 = v12;
      result = llvm::raw_ostream::operator<<(v11, (uint64_t)&v16);
    }
    else
    {
      v14 = *((_QWORD *)a3 + 4);
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v14) > 0xB)
      {
        *(_DWORD *)(v14 + 8) = 175334760;
        *(_QWORD *)v14 = *(_QWORD *)"No branches\n";
        *((_QWORD *)a3 + 4) += 12;
      }
      else
      {
        result = llvm::raw_ostream::write(a3, "No branches\n", 0xCuLL);
      }
    }
    v15 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v15) > 8)
    {
      *(_BYTE *)(v15 + 8) = 10;
      *(_QWORD *)v15 = *(_QWORD *)"No calls\n";
      *((_QWORD *)a3 + 4) += 9;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "No calls\n", 9uLL);
    }
  }
  return result;
}

void sub_1C5A87AB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void **v14;

  v2 = a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 40);
        v3 -= 40;
        v5 = v6;
        if ((void *)(v3 + 16) != v6)
          free(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  v7 = (void **)(a1 + 5);
  v8 = a1[5];
  if (v8)
  {
    v9 = a1[6];
    v10 = (void *)a1[5];
    if (v9 != v8)
    {
      v11 = a1[6];
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *v7;
    }
    a1[6] = v8;
    operator delete(v10);
  }
  v14 = (void **)a1[2];
  if (v14 != v7)
    free(v14);
}

uint64_t sub_1C5A87B7C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_1C5A87BB8(_BYTE *__dst, char *__src, char *a3, char a4)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  void *__srca[2];
  size_t __len[2];
  int v28;
  uint64_t v29;

  v4 = a3;
  v5 = __src;
  v6 = __dst;
  v29 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0)
  {
    __srca[1] = 0;
    __len[0] = 0;
    v25 = __src;
    __srca[0] = a3;
    __len[1] = (size_t)a3;
    v28 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&v25);
    v14 = __srca[1];
    if (!__srca[1])
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      return;
    }
    v15 = __len[0];
    if (__len[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
      abort();
    if (__len[0] >= 0x17)
    {
      v19 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v19 = __len[0] | 7;
      v20 = v19 + 1;
      v21 = operator new(v19 + 1);
      v6[1] = v15;
      v6[2] = v20 | 0x8000000000000000;
      *v6 = v21;
      v6 = v21;
    }
    else
    {
      *((_BYTE *)v6 + 23) = __len[0];
      if (!v15)
        goto LABEL_44;
    }
    memmove(v6, v14, v15);
LABEL_44:
    *((_BYTE *)v6 + v15) = 0;
    return;
  }
  v25 = __len;
  *(_OWORD *)__srca = xmmword_1C64638F0;
  v7 = 0;
  if (!a3)
  {
    __dst[23] = 0;
    goto LABEL_49;
  }
  v8 = &a3[(_QWORD)__src];
  v9 = __src;
  v10 = __src;
  do
  {
    if (*v10 != 47)
      goto LABEL_23;
    if (v5 - v9 == 2)
    {
      if (*v9 == 46 && v9[1] == 46)
      {
        if (__srca[1] < (void *)(v7 + 2))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, __len, v7 + 2, 1);
          v7 = (size_t)__srca[0];
        }
        *(_WORD *)((char *)v25 + v7) = 9054;
        v11 = 2;
        goto LABEL_21;
      }
    }
    else if (v5 - v9 == 1 && *v9 == 46)
    {
      goto LABEL_22;
    }
    v12 = __srca[1];
    if (v9 < v10)
    {
      v13 = (void *)(&v5[v7] - v9);
      if (__srca[1] < v13)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, __len, (unint64_t)v13, 1);
        v7 = (size_t)__srca[0];
      }
      memcpy((char *)v25 + v7, v9, v5 - v9);
      v12 = __srca[1];
      v7 = (size_t)&v5[(unint64_t)((char *)__srca[0] - (char *)v9)];
      __srca[0] = (void *)v7;
    }
    if (v7 + 1 > (unint64_t)v12)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, __len, v7 + 1, 1);
      v7 = (size_t)__srca[0];
    }
    *((_BYTE *)v25 + v7) = 35;
    v11 = 1;
LABEL_21:
    v7 = (size_t)__srca[0] + v11;
    __srca[0] = (char *)__srca[0] + v11;
LABEL_22:
    v9 = v10 + 1;
LABEL_23:
    ++v10;
    ++v5;
    --v4;
  }
  while (v4);
  if (v9 < v8)
  {
    v16 = v8 - v9;
    v17 = (void *)(v8 - v9 + v7);
    if (__srca[1] < v17)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, __len, (unint64_t)v17, 1);
      v7 = (size_t)__srca[0];
    }
    memcpy((char *)v25 + v7, v9, v8 - v9);
    v7 = (size_t)__srca[0] + v16;
    __srca[0] = (char *)__srca[0] + v16;
  }
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  v18 = v25;
  if (v7 >= 0x17)
  {
    v22 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v22 = v7 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    v6[1] = v7;
    v6[2] = v23 | 0x8000000000000000;
    *v6 = v24;
    v6 = v24;
  }
  else
  {
    *((_BYTE *)v6 + 23) = v7;
    if (!v7)
      goto LABEL_49;
  }
  memmove(v6, v18, v7);
LABEL_49:
  *((_BYTE *)v6 + v7) = 0;
  if (v25 != __len)
    free(v25);
}

llvm::raw_ostream *sub_1C5A87F0C(uint64_t a1, llvm::raw_ostream *a2, unsigned int a3)
{
  size_t v5;
  const char **v7;
  unint64_t v8;
  size_t v9;
  const char *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  llvm::raw_ostream *result;
  _QWORD v15[3];

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = (const char **)(a1 + 8);
    v8 = llvm::StringRef::find((uint64_t *)(a1 + 8), "\n", 1uLL, 0);
    if (v8 == -1)
    {
      v12 = 0;
      v13 = 0;
      v10 = *v7;
    }
    else
    {
      if (v5 >= v8)
        v9 = v8;
      else
        v9 = v5;
      v10 = *v7;
      if (v5 >= v8 + 1)
        v11 = v8 + 1;
      else
        v11 = v5;
      v12 = &v10[v11];
      v13 = v5 - v11;
      v5 = v9;
    }
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    v10 = "/*EOF*/";
    v5 = 7;
  }
  v15[0] = &off_1E8132728;
  v15[1] = "%5u:";
  v15[2] = a3;
  llvm::raw_ostream::operator<<(a2, (uint64_t)v15);
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v5 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v5)
    {
      memcpy(result, v10, v5);
      result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v5);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, v10, v5);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)a2 + 4);
  return result;
}

llvm::raw_ostream *sub_1C5A88064(llvm::raw_ostream *this, unint64_t *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v15;

  v2 = this;
  if (!a2[2])
  {
    v6 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v6 <= 0xDuLL)
    {
      v7 = "never executed";
      v8 = 14;
LABEL_21:
      llvm::raw_ostream::write(this, v7, v8);
      return v2;
    }
    qmemcpy(v6, "never executed", 14);
    v15 = *((_QWORD *)this + 4) + 14;
LABEL_27:
    *((_QWORD *)v2 + 4) = v15;
    return v2;
  }
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - v4;
  if (!*(_BYTE *)(*a2 + 2))
  {
    if (v5 > 5)
    {
      *(_WORD *)(v4 + 4) = 8302;
      *(_DWORD *)v4 = 1701536116;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, "taken ", 6uLL);
    }
    v9 = a2[1];
    if (v9)
    {
      v10 = a2[2];
      if (v9 == v10)
      {
        v11 = 100;
      }
      else
      {
        v12 = (100 * v9 + (v10 >> 1)) / v10;
        if ((_BYTE)v12)
        {
          if (v12 == 100)
            v11 = 99;
          else
            v11 = v12;
        }
        else
        {
          v11 = 1;
        }
      }
    }
    else
    {
      v11 = 0;
    }
    sub_1C5E21910(v2, v11, 0, 0, 0);
    v13 = (_BYTE *)*((_QWORD *)v2 + 4);
    if (*((_BYTE **)v2 + 3) == v13)
    {
      v7 = "%";
      this = v2;
      v8 = 1;
      goto LABEL_21;
    }
    *v13 = 37;
    v15 = *((_QWORD *)v2 + 4) + 1;
    goto LABEL_27;
  }
  if (v5 > 5)
  {
    *(_WORD *)(v4 + 4) = 8302;
    *(_DWORD *)v4 = 1701536116;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "taken ", 6uLL);
  }
  sub_1C5E21910(v2, a2[1], 0, 0, 0);
  return v2;
}

char **sub_1C5A88228(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        MEMORY[0x1CAA32FC0](v6, 0x1020C40992E6479);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C5A882A0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = (_QWORD *)v6[10];
        if (v7 != v6 + 12)
          free(v7);
        v8 = (_QWORD *)v6[6];
        if (v8 != v6 + 8)
          free(v8);
        v9 = (_QWORD *)v6[2];
        if (v9 != v6 + 4)
          free(v9);
        MEMORY[0x1CAA32FC0](v6, 0x10A0C400EDE5EBALL);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C5A88358(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v14);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v11 + 136), 8);
        sub_1C5A88228((char **)(v11 + 120));
        sub_1C5A88228((char **)(v11 + 104));
        sub_1C5A882A0((char **)(v11 + 88));
        v12 = *(void **)(v11 + 56);
        if (v12 != (void *)(v11 + 80))
          free(v12);
        MEMORY[0x1CAA32FC0](v11, 0x10F0C408FF3F95ELL);
      }
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v13 = v14;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v13;
}

void sub_1C5A88458(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v16);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD **)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
      {
        v12 = (_QWORD *)v11[10];
        if (v12 != v11 + 12)
          free(v12);
        v13 = (_QWORD *)v11[6];
        if (v13 != v11 + 8)
          free(v13);
        v14 = (_QWORD *)v11[2];
        if (v14 != v11 + 4)
          free(v14);
        MEMORY[0x1CAA32FC0](v11, 0x10A0C400EDE5EBALL);
      }
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v15 = v16;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v15;
}

void sub_1C5A8855C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v13);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
        MEMORY[0x1CAA32FC0](v11, 0x1020C40992E6479);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v12 = v13;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C5A88618(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

unint64_t llvm::instrprof_category(llvm *this)
{
  if (!atomic_load(qword_1EF8F5740))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F5740, (void *(*)(void))sub_1C5A8D1B8, (void (*)(void *))sub_1C5A8D1EC);
  return qword_1EF8F5740[0];
}

std::string *llvm::getInstrProfSectionName@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v8;
  const std::string::value_type *v9;
  std::string *result;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (a2 == 5 && a3)
  {
    v8 = a1;
    MEMORY[0x1CAA32ABC](a4, off_1E8192C38[a1]);
  }
  else
  {
    v8 = a1;
    if (a2 == 1)
    {
      v9 = off_1E8192C78[a1];
      return std::string::append(a4, v9);
    }
  }
  result = std::string::append(a4, off_1E8192CB8[v8]);
  if (!a1 && a2 == 5 && a3)
  {
    v9 = ",regular,live_support";
    return std::string::append(a4, v9);
  }
  return result;
}

_DWORD *llvm::SoftInstrProfErrors::addError(_DWORD *result, int a2)
{
  if (a2)
  {
    if (!*result)
      *result = a2;
    return (_DWORD *)((uint64_t (*)(void))((char *)&loc_1C5A8878C + 4 * byte_1C8667FF3[a2 - 15]))();
  }
  return result;
}

void sub_1C5A887B8(_QWORD *__dst, int a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  char v7;
  int v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  char v11;
  BOOL v12;
  const char *v13;
  size_t v14;
  size_t v15;
  __int128 v16;
  void (**v17)(llvm::raw_ostream *__hidden);
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v26[2];
  uint64_t v27;

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v17 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v25 = v26;
  v24 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  switch(a2)
  {
    case 0:
      v5 = "success";
      v6 = 7;
      goto LABEL_28;
    case 1:
      v5 = "end of File";
      v6 = 11;
      goto LABEL_28;
    case 2:
      v5 = "unrecognized instrumentation profile encoding format";
      v6 = 52;
      goto LABEL_28;
    case 3:
      v5 = "invalid instrumentation profile data (bad magic)";
      v6 = 48;
      goto LABEL_28;
    case 4:
      v5 = "invalid instrumentation profile data (file header is corrupt)";
      goto LABEL_20;
    case 5:
      v5 = "unsupported instrumentation profile format version";
      v6 = 50;
      goto LABEL_28;
    case 6:
      v5 = "unsupported instrumentation profile hash type";
      v6 = 45;
      goto LABEL_28;
    case 7:
      v5 = "too much profile data";
      v6 = 21;
      goto LABEL_28;
    case 8:
      v5 = "truncated profile data";
      goto LABEL_26;
    case 9:
      v5 = "malformed instrumentation profile data";
      goto LABEL_16;
    case 10:
      v5 = "debug info for correlation is required";
      goto LABEL_16;
    case 11:
      v5 = "debug info for correlation is not necessary";
      v6 = 43;
      goto LABEL_28;
    case 12:
      v5 = "unable to correlate profile";
      v6 = 27;
      goto LABEL_28;
    case 13:
      v5 = "no profile data available for function";
LABEL_16:
      v6 = 38;
      goto LABEL_28;
    case 14:
      v5 = "invalid profile created. Please file a bug at: https://github.com/llvm/llvm-project/issues/ and include the p"
           "rofraw files that caused this error.";
      v6 = 145;
      goto LABEL_28;
    case 15:
      v5 = "function control flow change detected (hash mismatch)";
      v6 = 53;
      goto LABEL_28;
    case 16:
      v5 = "function basic block count change detected (counter mismatch)";
LABEL_20:
      v6 = 61;
      goto LABEL_28;
    case 17:
      v5 = "counter overflow";
      v6 = 16;
      goto LABEL_28;
    case 18:
      v5 = "function value site count change detected (counter mismatch)";
      v6 = 60;
      goto LABEL_28;
    case 19:
      v5 = "failed to compress data (zlib)";
      v6 = 30;
      goto LABEL_28;
    case 20:
      v5 = "failed to uncompress data (zlib)";
      v6 = 32;
      goto LABEL_28;
    case 21:
      v5 = "empty raw profile file";
LABEL_26:
      v6 = 22;
      goto LABEL_28;
    case 22:
      v5 = "profile uses zlib compression but the profile reader was built without zlib support";
      v6 = 83;
LABEL_28:
      llvm::raw_ostream::write((llvm::raw_ostream *)&v17, v5, v6);
      break;
    default:
      break;
  }
  v7 = *(_BYTE *)(a3 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 < 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    if ((unint64_t)(v20 - (_QWORD)v21) > 1)
    {
      *v21++ = 8250;
      v10 = (llvm::raw_ostream *)&v17;
    }
    else
    {
      v10 = llvm::raw_ostream::write((llvm::raw_ostream *)&v17, ": ", 2uLL);
    }
    v11 = *(_BYTE *)(a3 + 23);
    v12 = v11 < 0;
    if (v11 >= 0)
      v13 = (const char *)a3;
    else
      v13 = *(const char **)a3;
    v14 = v11 & 0x7F;
    if (v12)
      v15 = *(_QWORD *)(a3 + 8);
    else
      v15 = v14;
    llvm::raw_ostream::write(v10, v13, v15);
  }
  if (*((char *)v25 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *v25, (unint64_t)v25[1]);
  }
  else
  {
    v16 = *(_OWORD *)v25;
    __dst[2] = v25[2];
    *(_OWORD *)__dst = v16;
  }
  v17 = off_1E81A6E70;
  if (v24 == 1 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8077774924);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
}

void llvm::getPGOFuncName(llvm *this@<X0>, const llvm::Function *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t Metadata;
  unint64_t *v6;
  size_t v7;
  const void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  char *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm *v38;
  int v39;
  int v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::string *v46;
  _QWORD *v47;
  uint64_t v48;

  if ((a2 & 1) != 0)
  {
    Metadata = llvm::Value::getMetadata((uint64_t)this, "PGOFuncName", 0xBuLL);
    if (Metadata)
    {
      v6 = *(unint64_t **)(*(_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8)) + 8);
      v9 = *v6;
      v8 = v6 + 3;
      v7 = v9;
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v7 >= 0x17)
      {
        v30 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v30 = v7 | 7;
        v31 = v30 + 1;
        v32 = (std::string *)operator new(v30 + 1);
        a3->__r_.__value_.__l.__size_ = v7;
        a3->__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        a3 = v32;
      }
      else
      {
        *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7;
        if (!v7)
          goto LABEL_38;
      }
      memmove(a3, v8, v7);
LABEL_38:
      a3->__r_.__value_.__s.__data_[v7] = 0;
      return;
    }
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v43 = 0;
      v42 = &byte_1C871356D;
      goto LABEL_55;
    }
    v22 = ***(_QWORD ***)this;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((this >> 4) ^ (this >> 9));
      v26 = v23 + 16 * v25;
      v27 = *(llvm **)v26;
      if (*(llvm **)v26 == this)
      {
LABEL_54:
        v47 = *(_QWORD **)(v26 + 8);
        v48 = *v47;
        v42 = (char *)(v47 + 2);
        v43 = v48;
LABEL_55:
        v15 = "";
        v46 = a3;
        v45 = 0;
        v17 = 0;
        goto LABEL_56;
      }
      v28 = 1;
      while (v27 != (llvm *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(llvm **)(v23 + 16 * v25);
        if (v27 == this)
        {
          v26 = v23 + 16 * v25;
          goto LABEL_54;
        }
      }
    }
    v26 = v23 + 16 * v24;
    goto LABEL_54;
  }
  v10 = *((_QWORD *)this + 5);
  v13 = *(char **)(v10 + 192);
  v11 = v10 + 192;
  v12 = v13;
  v14 = *(_BYTE *)(v11 + 23);
  if (v14 >= 0)
    v15 = (char *)v11;
  else
    v15 = v12;
  v16 = *(_QWORD *)(v11 + 8);
  if (v14 >= 0)
    v17 = v14 & 0x7F;
  else
    v17 = v16;
  v18 = dword_1ED81B240;
  if (dword_1ED81B240 <= (byte_1ED81B180 - 1))
    v18 = byte_1ED81B180 - 1;
  if (v18)
  {
    if (v17)
    {
      v19 = 0;
      LODWORD(v20) = 0;
      do
      {
        if (v15[v19] == 47)
          v20 = (v19 + 1);
        else
          v20 = v20;
        v18 -= v15[v19] == 47;
        if (v18)
          v21 = v17 - 1 == v19;
        else
          v21 = 1;
        ++v19;
      }
      while (!v21);
    }
    else
    {
      v20 = 0;
    }
    if (v17 < v20)
      v20 = v17;
    v15 += v20;
    v17 -= v20;
  }
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
    v43 = 0;
    v42 = &byte_1C871356D;
    goto LABEL_52;
  }
  v33 = ***(_QWORD ***)this;
  v34 = *(_QWORD *)(v33 + 152);
  v35 = *(unsigned int *)(v33 + 168);
  if (!(_DWORD)v35)
    goto LABEL_50;
  LODWORD(v36) = (v35 - 1) & ((this >> 4) ^ (this >> 9));
  v37 = v34 + 16 * v36;
  v38 = *(llvm **)v37;
  if (*(llvm **)v37 != this)
  {
    v39 = 1;
    while (v38 != (llvm *)-4096)
    {
      v40 = v36 + v39++;
      v36 = v40 & (v35 - 1);
      v38 = *(llvm **)(v34 + 16 * v36);
      if (v38 == this)
      {
        v37 = v34 + 16 * v36;
        goto LABEL_51;
      }
    }
LABEL_50:
    v37 = v34 + 16 * v35;
  }
LABEL_51:
  v41 = *(_QWORD **)(v37 + 8);
  v44 = *v41;
  v42 = (char *)(v41 + 2);
  v43 = v44;
LABEL_52:
  v45 = *((_DWORD *)this + 8) & 0xF;
  v46 = a3;
LABEL_56:
  llvm::GlobalValue::getGlobalIdentifier(v15, v17, v42, v43, v45, v46);
}

uint64_t llvm::getPGOFuncNameMetadata(llvm *this, const llvm::Function *a2)
{
  return llvm::Value::getMetadata((uint64_t)this, "PGOFuncName", 0xBuLL);
}

char *llvm::getFuncNameWithoutPrefix(char *__s1, size_t a2, void *__s2, size_t __n)
{
  char *v5;
  int v7;
  size_t v8;

  v5 = __s1;
  if (__n - 1 < a2)
  {
    v7 = memcmp(__s1, __s2, __n);
    if (a2 >= __n + 1)
      v8 = __n + 1;
    else
      v8 = a2;
    if (!v7)
      v5 += v8;
  }
  return v5;
}

std::string *llvm::getPGOFuncNameVarName@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  std::string *result;
  std::string::size_type size;
  char v8;
  std::string::size_type v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t i;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  std::string::size_type v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;

  *((_BYTE *)&a4->__r_.__value_.__s + 23) = 8;
  strcpy((char *)a4, "__profn_");
  result = std::string::append(a4, __s, __n);
  if ((a3 - 7) <= 1)
  {
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    v8 = size;
    v9 = a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) == 0)
      v10 = (unsigned __int8 *)a4;
    else
      v10 = (unsigned __int8 *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    if (size)
    {
      v11 = &v10[size];
      v12 = v10;
      while (2)
      {
        for (i = 0; i != 7; ++i)
        {
          if (*v12 == asc_1C875D572[i])
          {
            if (v12 != v11)
            {
              v14 = (unsigned __int8 *)(v12 - v10);
              if (v14 != (unsigned __int8 *)-1)
              {
                while (2)
                {
                  if (v8 >= 0)
                    v9 = (std::string::size_type)a4;
                  v14[v9] = 95;
                  v15 = v14 + 1;
                  v16 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
                  v8 = v16;
                  v9 = a4->__r_.__value_.__r.__words[0];
                  if ((v16 & 0x80u) == 0)
                    v17 = (std::string::size_type)a4;
                  else
                    v17 = a4->__r_.__value_.__r.__words[0];
                  if ((v16 & 0x80u) != 0)
                    v16 = a4->__r_.__value_.__l.__size_;
                  if (v16 > (unint64_t)v15)
                  {
                    v18 = (unsigned __int8 *)(v17 + v16);
                    v19 = &v15[v17];
LABEL_25:
                    v20 = 0;
                    while (*v19 != asc_1C875D572[v20])
                    {
                      if (++v20 == 7)
                      {
                        if (++v19 != v18)
                          goto LABEL_25;
                        return result;
                      }
                    }
                    if (v19 != v18)
                    {
                      v14 = &v19[-v17];
                      if (v14 != (unsigned __int8 *)-1)
                        continue;
                    }
                  }
                  break;
                }
              }
            }
            return result;
          }
        }
        if (++v12 != v11)
          continue;
        break;
      }
    }
  }
  return result;
}

_DWORD *llvm::createPGOFuncNameVar(uint64_t a1, int a2, std::string::value_type *a3, llvm::Type *a4)
{
  BOOL v7;
  int v8;
  int v9;
  llvm::ConstantAggregateZero *v10;
  llvm::Value **Impl;
  _DWORD *v12;
  llvm::PointerType *v13;
  std::string __p;
  std::string *p_p;
  __int16 v17;

  if (a2)
    v7 = a2 == 7;
  else
    v7 = 1;
  if (v7)
    v8 = 8;
  else
    v8 = a2;
  if (a2 == 1)
    v8 = 3;
  if (a2 == 9)
    v9 = 2;
  else
    v9 = v8;
  llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)a1 + 1912), a4);
  Impl = llvm::ConstantDataSequential::getImpl(a3, a4, v10);
  v12 = operator new(0x78uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  v13 = *Impl;
  llvm::getPGOFuncNameVarName(a3, (std::string::size_type)a4, v9, &__p);
  v17 = 260;
  p_p = &__p;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v12 + 8), a1, v13, 1, v9, (uint64_t)Impl, (uint64_t)&p_p, 0, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v12[16] & 0xFu) - 7 >= 2)
  {
    v12[16] = v12[16] & 0xFFFFFFCF | 0x10;
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)(v12 + 8)) & 1) == 0)
      v12[16] |= 0x4000u;
  }
  return v12 + 8;
}

void llvm::InstrProfSymtab::create(llvm::InstrProfSymtab *this@<X0>, llvm::Module *a2@<X1>, llvm::Function *a3@<X2>, uint64_t *a4@<X8>)
{
  char *v6;
  char *v7;
  llvm *v9;
  std::string *p_str;
  size_t size;
  int v12;
  int *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::Function *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  std::string *v30;
  char *v31;
  std::string *v32;
  char *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  uint64_t v36;
  std::string *v37;
  size_t v38;
  int *v39;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  llvm::Function *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  std::string v57;
  std::string __str;
  int v59[5];
  char v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a2 + 24;
  v7 = (char *)*((_QWORD *)a2 + 4);
  if (v7 != (char *)a2 + 24)
  {
    do
    {
      if (v7)
        v9 = (llvm *)(v7 - 56);
      else
        v9 = 0;
      if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
        goto LABEL_6;
      llvm::getPGOFuncName(v9, a3, &__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __str.__r_.__value_.__l.__size_;
      sub_1C6307600((uint64_t)this, (unsigned __int8 *)p_str, size, a4);
      if (*a4)
        goto LABEL_15;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = (int *)&__str;
      else
        v13 = (int *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v14 = __str.__r_.__value_.__l.__size_;
      v62 = xmmword_1C85F4BB0;
      v63 = 0;
      llvm::MD5::update((int *)&v62, v13, v14);
      llvm::MD5::final((int *)&v62, v59);
      v15 = *(_QWORD *)v59;
      v17 = (char *)*((_QWORD *)this + 11);
      v16 = *((_QWORD *)this + 12);
      if ((unint64_t)v17 >= v16)
      {
        v55 = a4;
        v19 = (char *)*((_QWORD *)this + 10);
        v20 = (v17 - v19) >> 4;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60)
          goto LABEL_97;
        v22 = a3;
        v23 = v16 - (_QWORD)v19;
        if (v23 >> 3 > v21)
          v21 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v21;
        if (v24 >> 60)
          goto LABEL_98;
        v25 = (char *)operator new(16 * v24);
        v26 = &v25[16 * v20];
        *(_QWORD *)v26 = v15;
        *((_QWORD *)v26 + 1) = v9;
        if (v17 == v19)
        {
          v28 = &v25[16 * v20];
        }
        else
        {
          v27 = &v25[16 * v20];
          do
          {
            v28 = v27 - 16;
            *((_OWORD *)v27 - 1) = *((_OWORD *)v17 - 1);
            v17 -= 16;
            v27 -= 16;
          }
          while (v17 != v19);
        }
        v18 = v26 + 16;
        *((_QWORD *)this + 10) = v28;
        *((_QWORD *)this + 11) = v26 + 16;
        *((_QWORD *)this + 12) = &v25[16 * v24];
        if (v19)
          operator delete(v19);
        a3 = v22;
        a4 = v55;
      }
      else
      {
        *(_QWORD *)v17 = *(_QWORD *)v59;
        *((_QWORD *)v17 + 1) = v9;
        v18 = v17 + 16;
      }
      *((_QWORD *)this + 11) = v18;
      v60 = 8;
      strcpy((char *)v59, ".__uniq.");
      v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__str;
      else
        v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v29 = __str.__r_.__value_.__l.__size_;
      if (v29 >= 8)
      {
        v31 = (char *)v30 + v29;
        v32 = v30;
        do
        {
          v33 = (char *)memchr(v32, 46, v29 - 7);
          if (!v33)
            break;
          if (*(_QWORD *)v33 == *(_QWORD *)v59)
          {
            v36 = v33 - (char *)v30;
            if (v33 == v31)
              v36 = -1;
            if (v36 == -1)
              v34 = 0;
            else
              v34 = v36 + 8;
            goto LABEL_50;
          }
          v32 = (std::string *)(v33 + 1);
          v29 = v31 - (char *)v32;
        }
        while (v31 - (char *)v32 >= 8);
      }
      v34 = 0;
LABEL_50:
      v35 = std::string::find(&__str, 46, v34);
      if (v35 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        std::string::basic_string(&v57, &__str, 0, v35, (std::allocator<char> *)&v62);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v57;
        else
          v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
        else
          v38 = v57.__r_.__value_.__l.__size_;
        sub_1C6307600((uint64_t)this, (unsigned __int8 *)v37, v38, a4);
        if (*a4)
        {
          if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) != 0)
            operator delete(v57.__r_.__value_.__l.__data_);
LABEL_15:
          v12 = 1;
          goto LABEL_52;
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = (int *)&v57;
        else
          v39 = (int *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
        else
          v40 = v57.__r_.__value_.__l.__size_;
        v62 = xmmword_1C85F4BB0;
        v63 = 0;
        llvm::MD5::update((int *)&v62, v39, v40);
        llvm::MD5::final((int *)&v62, (int *)&v61);
        v41 = v61;
        v43 = (char *)*((_QWORD *)this + 11);
        v42 = *((_QWORD *)this + 12);
        if ((unint64_t)v43 >= v42)
        {
          v56 = a4;
          v45 = (char *)*((_QWORD *)this + 10);
          v46 = (v43 - v45) >> 4;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 60)
LABEL_97:
            abort();
          v48 = a3;
          v49 = v42 - (_QWORD)v45;
          if (v49 >> 3 > v47)
            v47 = v49 >> 3;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
            v50 = 0xFFFFFFFFFFFFFFFLL;
          else
            v50 = v47;
          if (v50 >> 60)
LABEL_98:
            sub_1C4764EE4();
          v51 = (char *)operator new(16 * v50);
          v52 = &v51[16 * v46];
          *(_QWORD *)v52 = v41;
          *((_QWORD *)v52 + 1) = v9;
          if (v43 == v45)
          {
            v54 = &v51[16 * v46];
          }
          else
          {
            v53 = &v51[16 * v46];
            do
            {
              v54 = v53 - 16;
              *((_OWORD *)v53 - 1) = *((_OWORD *)v43 - 1);
              v43 -= 16;
              v53 -= 16;
            }
            while (v43 != v45);
          }
          v44 = v52 + 16;
          *((_QWORD *)this + 10) = v54;
          *((_QWORD *)this + 11) = v52 + 16;
          *((_QWORD *)this + 12) = &v51[16 * v50];
          if (v45)
            operator delete(v45);
          a3 = v48;
          a4 = v56;
        }
        else
        {
          *(_QWORD *)v43 = v61;
          *((_QWORD *)v43 + 1) = v9;
          v44 = v43 + 16;
        }
        *((_QWORD *)this + 11) = v44;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      v12 = 0;
LABEL_52:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v12)
          return;
      }
      else if (v12)
      {
        return;
      }
LABEL_6:
      v7 = (char *)*((_QWORD *)v7 + 1);
    }
    while (v7 != v6);
  }
  *((_BYTE *)this + 128) = 0;
  sub_1C546CB40((uint64_t *)this);
  *a4 = 0;
}

void llvm::collectPGOFuncNameStrings(std::string *this@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  const std::string::value_type *v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  uint64_t v23;
  int v24;
  std::string::size_type size;
  unint64_t v26;
  BOOL v27;
  std::string *p_p;
  std::string __p;
  std::string::value_type __s[16];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((24 * a3) >> 3) - 1;
    do
    {
      if (*(char *)(a2 + v8 + 23) < 0)
        v10 = *(_QWORD *)(a2 + v8 + 8);
      else
        v10 = *(unsigned __int8 *)(a2 + v8 + 23);
      v9 += v10;
      v8 += 24;
    }
    while (24 * a3 != v8);
    std::string::reserve(&__p, v9);
    v11 = *(_BYTE *)(a2 + 23);
    v12 = v11 < 0;
    v13 = v11 >= 0 ? (const std::string::value_type *)a2 : *(const std::string::value_type **)a2;
    v14 = v11 & 0x7F;
    v15 = v12 ? *(_QWORD *)(a2 + 8) : v14;
    std::string::append(&__p, v13, v15);
    if (a3 != 1)
    {
      v16 = a2 + 24;
      v17 = 24 * a3 - 24;
      do
      {
        std::string::append(&__p, "\x01", 1uLL);
        v18 = *(_BYTE *)(v16 + 23);
        v19 = v18 < 0;
        if (v18 >= 0)
          v20 = (const std::string::value_type *)v16;
        else
          v20 = *(const std::string::value_type **)v16;
        v21 = v18 & 0x7F;
        if (v19)
          v22 = *(_QWORD *)(v16 + 8);
        else
          v22 = v21;
        std::string::append(&__p, v20, v22);
        v16 += 24;
        v17 -= 24;
      }
      while (v17);
    }
  }
  v23 = 0;
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v26 = size;
  do
  {
    v27 = v26 > 0x7F;
    __s[v23++] = v26 & 0x7F | ((v26 > 0x7F) << 7);
    v26 >>= 7;
  }
  while (v27);
  if (v24 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  __s[v23] = 0;
  std::string::append(this, __s, v23 + 1);
  std::string::append(this, (const std::string::value_type *)p_p, size);
  *a4 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t llvm::getPGOFuncNameVarInitializer(llvm *this, llvm::GlobalVariable *a2)
{
  llvm::ConstantDataSequential *v2;

  v2 = (llvm::ConstantDataSequential *)*((_QWORD *)this - 4);
  llvm::ConstantDataSequential::isCString(v2);
  return llvm::ConstantDataSequential::getRawDataValues(v2);
}

void llvm::collectPGOFuncNameStrings(std::string *this@<X2>, _QWORD *a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  std::string *v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::ConstantDataSequential *v7;
  _BOOL4 isCString;
  uint64_t RawDataValues;
  unint64_t v10;
  size_t v11;
  size_t v12;
  const void *v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 __dst;
  unint64_t v35;
  __int128 v36;
  char *v37;
  void **v38;
  int64x2_t v39;
  char *v40;
  char **v41;

  v4 = this;
  v36 = 0uLL;
  v37 = 0;
  if (!a3)
  {
    v31 = 0;
    v30 = 0;
    goto LABEL_38;
  }
  v5 = a2;
  v32 = a4;
  v6 = &a2[a3];
  do
  {
    v7 = *(llvm::ConstantDataSequential **)(*v5 - 32);
    isCString = llvm::ConstantDataSequential::isCString(v7);
    RawDataValues = llvm::ConstantDataSequential::getRawDataValues(v7);
    v11 = v10 - 1;
    if (v10 < v10 - 1)
      v11 = v10;
    if (isCString)
      v12 = v11;
    else
      v12 = v10;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
LABEL_39:
      abort();
    v13 = (const void *)RawDataValues;
    if (v12 >= 0x17)
    {
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v15 = v12 | 7;
      v16 = v15 + 1;
      p_dst = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&__dst + 1) = v12;
      v35 = v16 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_15:
      memmove(p_dst, v13, v12);
      goto LABEL_16;
    }
    HIBYTE(v35) = v12;
    p_dst = &__dst;
    if (v12)
      goto LABEL_15;
LABEL_16:
    *((_BYTE *)p_dst + v12) = 0;
    v17 = *((_QWORD *)&v36 + 1);
    v18 = v37;
    if (*((_QWORD *)&v36 + 1) >= (unint64_t)v37)
    {
      v19 = v36;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_39;
      if (0x5555555555555556 * ((uint64_t)&v37[-v36] >> 3) > v21)
        v21 = 0x5555555555555556 * ((uint64_t)&v37[-v36] >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-v36] >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      v41 = &v37;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v23 = (char *)operator new(24 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[24 * v20];
      *(_OWORD *)v24 = __dst;
      *((_QWORD *)v24 + 2) = v35;
      v35 = 0;
      __dst = 0uLL;
      if (v17 == v19)
      {
        v28 = 0;
        v27 = vdupq_n_s64(v17);
        v25 = v24;
      }
      else
      {
        v25 = &v23[24 * v20];
        do
        {
          v26 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v25 - 1) = *(_QWORD *)(v17 - 8);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          *(_QWORD *)(v17 - 16) = 0;
          *(_QWORD *)(v17 - 8) = 0;
          *(_QWORD *)(v17 - 24) = 0;
          v17 -= 24;
        }
        while (v17 != v19);
        v27 = (int64x2_t)v36;
        v18 = v37;
        v28 = HIBYTE(v35);
      }
      v29 = v24 + 24;
      *(_QWORD *)&v36 = v25;
      *((_QWORD *)&v36 + 1) = v24 + 24;
      v39 = v27;
      v37 = &v23[24 * v22];
      v40 = v18;
      v38 = (void **)v27.i64[0];
      sub_1C4D868F0((uint64_t)&v38);
      *((_QWORD *)&v36 + 1) = v29;
      if (v28 < 0)
        operator delete((void *)__dst);
    }
    else
    {
      **((_OWORD **)&v36 + 1) = __dst;
      *(_QWORD *)(v17 + 16) = v35;
      *((_QWORD *)&v36 + 1) = v17 + 24;
    }
    ++v5;
  }
  while (v5 != v6);
  v31 = *((_QWORD *)&v36 + 1);
  v30 = v36;
  a4 = v32;
  v4 = this;
LABEL_38:
  llvm::collectPGOFuncNameStrings(v4, v30, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3), a4);
  v38 = (void **)&v36;
  sub_1C4765410(&v38);
}

void llvm::readPGOFuncNameStrings(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v5;
  char *v7;
  int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  _BYTE *v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  _WORD v30[12];
  void *v31;
  __int128 v32;
  _QWORD v33[18];

  v5 = a1;
  v33[16] = *MEMORY[0x1E0C80C00];
  v7 = &a1[a2];
  do
  {
    if (v5 >= v7)
    {
      *a4 = 0;
      return;
    }
    v8 = 0;
    v9 = 0;
    v10 = v5;
    v11 = 0;
    while (v10)
    {
      v12 = *v10;
      v13 = *v10 & 0x7F;
      if (v9 >= 0x40 && (*v10 & 0x7F) != 0 || (unint64_t)(v13 << v9) >> v9 != v13)
      {
        v11 = 0;
        goto LABEL_12;
      }
      v11 += v13 << v9;
      v9 += 7;
      ++v10;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
    }
    v11 = 0;
    LODWORD(v10) = 0;
LABEL_12:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = &v5[(_DWORD)v10 - (_DWORD)v5];
    v18 = (int)v17;
    do
    {
      if (!&v17[v14])
        goto LABEL_22;
      v19 = v17[v14];
      v20 = v19 & 0x7F;
      if (v16 >= 0x40 && (v19 & 0x7F) != 0)
      {
        v8 = (_DWORD)v17 + v14;
LABEL_22:
        v23 = &v17[v8 - (_DWORD)v17];
        v31 = v33;
        v32 = xmmword_1C85F20B0;
        goto LABEL_23;
      }
      if ((unint64_t)(v20 << v16) >> v16 != v20)
      {
        v8 = v18;
        goto LABEL_22;
      }
      v15 += v20 << v16;
      v16 += 7;
      ++v18;
      ++v14;
    }
    while (v19 < 0);
    v5 = &v17[v14];
    v31 = v33;
    v32 = xmmword_1C85F20B0;
    if (v15)
    {
      v21 = operator new();
      v30[8] = 257;
      *(_QWORD *)v21 = off_1E8192D50;
      *(_DWORD *)(v21 + 8) = 22;
      llvm::Twine::str((llvm::Twine *)&v28, (_QWORD *)(v21 + 16));
      *a4 = v21;
      v22 = 1;
      goto LABEL_35;
    }
    v23 = &v17[v14];
LABEL_23:
    *(_QWORD *)&v27 = v23;
    *((_QWORD *)&v27 + 1) = v11;
    v5 = &v23[v11];
    v28 = v30;
    v29 = 0;
    llvm::StringRef::split(&v27, (uint64_t)&v28, "\x01", 1uLL, -1, 1);
    if ((_DWORD)v29)
    {
      v24 = (char *)v28;
      v25 = (char *)v28 + 16 * v29;
      while (1)
      {
        sub_1C6307600(a3, *(unsigned __int8 **)v24, *((_QWORD *)v24 + 1), a4);
        if (*a4)
          break;
        v24 += 16;
        if (v24 == v25)
          goto LABEL_27;
      }
      v22 = 1;
    }
    else
    {
LABEL_27:
      if (v5 < v7)
      {
        v26 = (_BYTE *)(&v7[-v11] - v23);
        while (!*v5)
        {
          ++v5;
          if (!--v26)
          {
            v22 = 0;
            v5 = v7;
            goto LABEL_33;
          }
        }
      }
      v22 = 0;
    }
LABEL_33:
    if (v28 != v30)
      free(v28);
LABEL_35:
    if (v31 != v33)
      free(v31);
  }
  while (!v22);
}

double llvm::InstrProfRecord::accumulateCounts(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double result;

  v4 = *(uint64_t **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v5 = v3 == *(uint64_t **)a1;
  *(_QWORD *)a2 += ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (v5)
  {
    v8 = 0.0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 += v7;
    }
    while (v4 != v3);
    v8 = (double)v6;
  }
  v9 = 0;
  v10 = 1;
  *(double *)(a2 + 8) = v8 + *(double *)(a2 + 8);
  do
  {
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 24);
    if (!v12)
      goto LABEL_32;
    if ((v11 & 1) != 0)
      v13 = 0;
    else
      v13 = 24;
    v14 = *(_QWORD *)(v12 + v13);
    v15 = 32;
    if ((v11 & 1) != 0)
      v15 = 8;
    v16 = -1431655765 * ((unint64_t)(*(_QWORD *)(v12 + v15) - v14) >> 3);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        if ((v11 & 1) != 0)
          v19 = 0;
        else
          v19 = 24;
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v19) + 24 * v17 + 16);
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v19) + 24 * v17 + 16))
        {
          v21 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v19) + 24 * v17 + 16);
          v22 = (char *)operator new[]();
          bzero(v22, v21);
          v23 = *(_QWORD *)(a1 + 24);
          if (v23)
          {
            if ((v11 & 1) != 0)
              v24 = 0;
            else
              v24 = 24;
            v23 = *(_QWORD *)(v23 + v24);
          }
          v25 = v23 + 24 * v17;
          v26 = *(_QWORD *)(v25 + 8);
          if (v26 != v25)
          {
            v27 = 0;
            do
            {
              *(_OWORD *)&v22[16 * v27++] = *(_OWORD *)(v26 + 16);
              v26 = *(_QWORD *)(v26 + 8);
            }
            while (v26 != v25);
          }
          v28 = 8;
          do
          {
            v18 += *(_QWORD *)&v22[v28];
            v28 += 16;
            --v20;
          }
          while (v20);
          MEMORY[0x1CAA32F9C](v22, 0x1000C80451B5BE8);
        }
        ++v17;
      }
      while (v17 != v16);
    }
    else
    {
LABEL_32:
      v18 = 0;
    }
    v10 = 0;
    v29 = a2 + 8 * v9;
    result = *(double *)(v29 + 16) + (double)v18;
    *(double *)(v29 + 16) = result;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return result;
}

void sub_1C5A89E7C(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, unint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  size_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  __int128 v19;
  BOOL v20;
  int v21;
  int v22;

  if (a2)
    v7 = 24;
  else
    v7 = 0;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v7) + 24 * a3 + 16))
  {
    v10 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v7) + 24 * a3 + 16);
    v12 = (void *)operator new[]();
    bzero(v12, v10);
    *a5 = v12;
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
    {
      v14 = 24;
      if (!a2)
        v14 = 0;
      v13 = *(_QWORD *)(v13 + v14);
    }
    v15 = v13 + 24 * a3;
    v16 = *(_QWORD *)(v15 + 8);
    if (v16 == v15)
    {
      v18 = 0;
      if (!a4)
        return;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = *(_OWORD *)(v16 + 16);
        *((_OWORD *)v12 + v17) = v19;
        v20 = __CFADD__(*((_QWORD *)&v19 + 1), v18);
        v18 += *((_QWORD *)&v19 + 1);
        v21 = v20;
        if (v18 < *((_QWORD *)&v19 + 1))
          v22 = 1;
        else
          v22 = v21;
        if (v22)
          v18 = -1;
        ++v17;
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16 != v15);
      if (!a4)
        return;
    }
    *a4 = v18;
    return;
  }
  if (a4)
    *a4 = 0;
  *a5 = 0;
}

double llvm::InstrProfValueSiteRecord::overlap(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  BOOL v13;
  double v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  double *v21;
  double *v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  double v32;

  sub_1C5A8CF68(*(uint64_t **)(a1 + 8), (uint64_t *)a1, *(_QWORD *)(a1 + 16));
  sub_1C5A8CF68(*(uint64_t **)(a2 + 8), (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v10 = *(_QWORD **)(a1 + 8);
  v11 = *(_QWORD **)(a2 + 8);
  v12 = 0.0;
  v13 = v10 == (_QWORD *)a1 || v11 == (_QWORD *)a2;
  v14 = 0.0;
  if (!v13)
  {
    v17 = a4 + 8 * a3;
    v18 = (double *)(v17 + 16);
    v19 = (double *)(v17 + 48);
    v20 = a5 + 8 * a3;
    v21 = (double *)(v20 + 16);
    v22 = (double *)(v20 + 48);
    do
    {
      v23 = v11[2];
      while (1)
      {
        v24 = v10[2];
        if (v24 == v23)
          break;
        if (v24 >= v23)
          goto LABEL_25;
        v10 = (_QWORD *)v10[1];
        if (v10 == (_QWORD *)a1)
          goto LABEL_6;
      }
      v25 = *v19;
      v26 = 0.0;
      v27 = *v18 < 1.0 || v25 < 1.0;
      v28 = 0.0;
      if (!v27)
      {
        v28 = (double)(unint64_t)v10[3] / *v18;
        v29 = (double)(unint64_t)v11[3] / v25;
        if (v29 < v28)
          v28 = v29;
      }
      v30 = *v22;
      if (*v21 >= 1.0 && v30 >= 1.0)
      {
        v26 = (double)(unint64_t)v10[3] / *v21;
        v32 = (double)(unint64_t)v11[3] / v30;
        if (v32 < v26)
          v26 = v32;
      }
      v12 = v12 + v28;
      v14 = v14 + v26;
      v10 = (_QWORD *)v10[1];
LABEL_25:
      if (v10 == (_QWORD *)a1)
        break;
      v11 = (_QWORD *)v11[1];
    }
    while (v11 != (_QWORD *)a2);
  }
LABEL_6:
  *(double *)(a4 + 8 * a3 + 80) = v12 + *(double *)(a4 + 8 * a3 + 80);
  v15 = a5 + 8 * a3;
  result = v14 + *(double *)(v15 + 80);
  *(double *)(v15 + 80) = result;
  return result;
}

void llvm::InstrProfRecord::overlapValueProfData(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = 32;
    if (!a2)
      v7 = 8;
    v8 = 24;
    if (!a2)
      v8 = 0;
    v9 = -1431655765 * ((*(_QWORD *)(v5 + v7) - *(_QWORD *)(v5 + v8)) >> 3);
    if ((_DWORD)v9)
    {
      v13 = sub_1C5A8A1DC(a1, a2);
      v14 = *(_QWORD *)(a3 + 24);
      if (v14)
      {
        v15 = 24;
        if (!a2)
          v15 = 0;
        v16 = *(_QWORD *)(v14 + v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = 0;
      do
      {
        llvm::InstrProfValueSiteRecord::overlap(*(_QWORD *)v13 + v17, v16 + v17, a2, a4, a5);
        v17 += 24;
        --v9;
      }
      while (v9);
    }
  }
}

_OWORD *sub_1C5A8A1DC(uint64_t a1, int a2)
{
  _OWORD *result;
  void **v5;
  void **v6;

  result = *(_OWORD **)(a1 + 24);
  if (!result)
  {
    result = (_OWORD *)operator new();
    *result = 0u;
    result[1] = 0u;
    result[2] = 0u;
    v5 = *(void ***)(a1 + 24);
    *(_QWORD *)(a1 + 24) = result;
    if (v5)
    {
      v6 = sub_1C62AFDC4(v5);
      MEMORY[0x1CAA32FC0](v6, 0x20C40A759441BLL);
      result = *(_OWORD **)(a1 + 24);
    }
  }
  if (a2)
    return (_OWORD *)((char *)result + 24);
  return result;
}

void llvm::InstrProfRecord::overlap(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  uint64_t v31;
  double v32;
  double v33;

  llvm::InstrProfRecord::accumulateCounts((uint64_t)a1, a4);
  if (a1[1] - *a1 != a2[1] - *a2)
    goto LABEL_26;
  v10 = (_QWORD *)a1[3];
  v11 = (_QWORD *)a2[3];
  if (v10)
  {
    v12 = -1431655765 * ((v10[1] - *v10) >> 3);
    if (!v11)
    {
      if (v12)
        goto LABEL_26;
      v14 = 0;
      v13 = -1431655765 * ((v10[4] - v10[3]) >> 3);
      goto LABEL_11;
    }
    if (v12 != -1431655765 * ((v11[1] - *v11) >> 3))
      goto LABEL_26;
    v13 = -1431655765 * ((v10[4] - v10[3]) >> 3);
LABEL_8:
    v14 = -1431655765 * ((v11[4] - v11[3]) >> 3);
LABEL_11:
    if (v13 == v14)
      goto LABEL_12;
LABEL_26:
    llvm::OverlapStats::addOneMismatch(a3, a4 + 32);
    return;
  }
  if (v11)
  {
    v13 = -1431655765 * ((v11[1] - *v11) >> 3);
    if (v13)
      goto LABEL_26;
    goto LABEL_8;
  }
LABEL_12:
  llvm::InstrProfRecord::overlapValueProfData((uint64_t)a1, 0, (uint64_t)a2, a3, a4);
  llvm::InstrProfRecord::overlapValueProfData((uint64_t)a1, 1u, (uint64_t)a2, a3, a4);
  v15 = *a2;
  v16 = a2[1];
  v17 = (v16 - *a2) >> 3;
  if (v16 == *a2)
  {
    v19 = 0;
    v24 = 0.0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = *(double *)(a3 + 8);
    v21 = *(double *)(a3 + 40);
    v22 = v20 < 1.0;
    if (v21 < 1.0)
      v22 = 1;
    if (v17 <= 1)
      v23 = 1;
    else
      v23 = (v16 - *a2) >> 3;
    v24 = 0.0;
    do
    {
      v25 = *(_QWORD *)(v15 + 8 * v18);
      v26 = 0.0;
      if (!v22)
      {
        v26 = (double)*(unint64_t *)(*a1 + 8 * v18) / v20;
        if ((double)v25 / v21 < v26)
          v26 = (double)v25 / v21;
      }
      v24 = v24 + v26;
      if (v25 > v19)
        v19 = *(_QWORD *)(v15 + 8 * v18);
      ++v18;
    }
    while (v23 != v18);
  }
  *(double *)(a3 + 72) = v24 + *(double *)(a3 + 72);
  ++*(_QWORD *)(a3 + 64);
  if (v19 >= a5)
  {
    if (v16 == v15)
    {
      v32 = 0.0;
    }
    else
    {
      v27 = 0;
      v28 = *(double *)(a4 + 8);
      v29 = *(double *)(a4 + 40);
      v30 = v28 < 1.0;
      if (v29 < 1.0)
        v30 = 1;
      if (v17 <= 1)
        v31 = 1;
      else
        v31 = v17;
      v32 = 0.0;
      do
      {
        v33 = 0.0;
        if (!v30)
        {
          v33 = (double)*(unint64_t *)(*a1 + 8 * v27) / v28;
          if ((double)*(unint64_t *)(v15 + 8 * v27) / v29 < v33)
            v33 = (double)*(unint64_t *)(v15 + 8 * v27) / v29;
        }
        v32 = v32 + v33;
        ++v27;
      }
      while (v31 != v27);
    }
    *(double *)(a4 + 72) = v32;
    *(_QWORD *)(a4 + 64) = v17;
    *(_BYTE *)(a4 + 208) = 1;
  }
}

uint64_t llvm::OverlapStats::addOneMismatch(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  double v6;

  v2 = 0;
  ++*(_QWORD *)(result + 96);
  *(double *)(result + 104) = *(double *)(result + 104) + *(double *)(a2 + 8) / *(double *)(result + 40);
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = result + 8 * v2;
    v6 = *(double *)(v5 + 48);
    if (v6 >= 1.0)
      *(double *)(v5 + 112) = *(double *)(v5 + 112) + *(double *)(a2 + 8 * v2 + 16) / v6;
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

_QWORD *llvm::InstrProfValueSiteRecord::merge(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  _QWORD *result;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;

  sub_1C5A8CF68(*(uint64_t **)(a1 + 8), (uint64_t *)a1, *(_QWORD *)(a1 + 16));
  result = sub_1C5A8CF68(*(uint64_t **)(a2 + 8), (uint64_t *)a2, *(_QWORD *)(a2 + 16));
  v11 = *(_QWORD **)(a2 + 8);
  if (v11 != (_QWORD *)a2)
  {
    v12 = *(_QWORD **)(a1 + 8);
    v13 = __clz(a3);
    do
    {
      v14 = v11 + 2;
      v15 = (_QWORD *)a1;
      if (v12 != (_QWORD *)a1)
      {
        v16 = *v14;
        while (1)
        {
          v17 = v12[2];
          if (v17 >= v16)
            break;
          v12 = (_QWORD *)v12[1];
          if (v12 == (_QWORD *)a1)
          {
            v15 = (_QWORD *)a1;
            goto LABEL_16;
          }
        }
        if (v17 == v16)
        {
          v18 = v11[3];
          v19 = v12[3];
          v20 = __clz(v18) + v13;
          if (v20 >= 0x40)
          {
            v21 = v18 * a3;
            goto LABEL_12;
          }
          if (v20 != 63
            || (v25 = (v18 >> 1) * a3, (v25 & 0x8000000000000000) != 0)
            || (v21 = 2 * v25, (v18 & 1) != 0)
            && (v21 + a3 >= v21 ? (v26 = v21 + a3 >= a3) : (v26 = 0), v21 += a3, !v26))
          {
            v12[3] = -1;
            goto LABEL_27;
          }
LABEL_12:
          v22 = v21 + v19;
          v23 = v21 + v19 >= v19 && v21 + v19 >= v21;
          if (!v23)
            v22 = -1;
          v12[3] = v22;
          if (!v23)
LABEL_27:
            result = (_QWORD *)a4(a5, 17);
          v15 = (_QWORD *)v12[1];
          goto LABEL_17;
        }
        v15 = v12;
      }
LABEL_16:
      result = operator new(0x20uLL);
      *result = 0;
      result[1] = 0;
      *((_OWORD *)result + 1) = *(_OWORD *)v14;
      v24 = *v15;
      *(_QWORD *)(v24 + 8) = result;
      *result = v24;
      *v15 = result;
      result[1] = v15;
      ++*(_QWORD *)(a1 + 16);
LABEL_17:
      v11 = (_QWORD *)v11[1];
      v12 = v15;
    }
    while (v11 != (_QWORD *)a2);
  }
  return result;
}

uint64_t llvm::InstrProfValueSiteRecord::scale(uint64_t result, unint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v18;

  v5 = *(_QWORD *)(result + 8);
  if (v5 != result)
  {
    v10 = result;
    v11 = __clz(a2);
    v12 = 0xFFFFFFFFFFFFFFFFLL / a3;
    do
    {
      v13 = *(_QWORD *)(v5 + 24);
      v14 = __clz(v13) + v11;
      if (v14 < 0x40)
      {
        if (v14 != 63 || (v16 = (v13 >> 1) * a2, (v16 & 0x8000000000000000) != 0))
        {
          *(_QWORD *)(v5 + 24) = v12;
LABEL_14:
          result = a4(a5, 17);
          goto LABEL_15;
        }
        v15 = 2 * v16;
        if ((v13 & 1) != 0)
        {
          v17 = v15 + a2;
          v18 = v15 + a2 >= v15 && v15 + a2 >= a2;
          if (!v18)
            v17 = -1;
          *(_QWORD *)(v5 + 24) = v17 / a3;
          if (v18)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      else
      {
        v15 = v13 * a2;
      }
      *(_QWORD *)(v5 + 24) = v15 / a3;
LABEL_15:
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v10);
  }
  return result;
}

_QWORD *llvm::InstrProfRecord::mergeValueProfData(_QWORD *result, int a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  v9 = (_QWORD *)result[3];
  if (v9)
  {
    if (!a2)
    {
      LODWORD(v10) = -1431655765 * ((v9[1] - *v9) >> 3);
      v12 = (_QWORD *)(a3 + 24);
      v11 = *(_QWORD **)(a3 + 24);
      if (!v11)
        goto LABEL_11;
      goto LABEL_9;
    }
    LODWORD(v10) = -1431655765 * ((v9[4] - v9[3]) >> 3);
  }
  else
  {
    LODWORD(v10) = 0;
  }
  v12 = (_QWORD *)(a3 + 24);
  v11 = *(_QWORD **)(a3 + 24);
  if (!v11)
    goto LABEL_11;
  if (!a2)
  {
LABEL_9:
    v13 = v11 + 1;
    goto LABEL_10;
  }
  v13 = v11 + 4;
  v11 += 3;
LABEL_10:
  LODWORD(v11) = -1431655765 * ((*v13 - *v11) >> 3);
LABEL_11:
  if ((_DWORD)v10 != (_DWORD)v11)
    return (_QWORD *)a5(a6, 18);
  if ((_DWORD)v10)
  {
    v14 = sub_1C5A8A1DC((uint64_t)result, a2);
    if (*v12)
    {
      v15 = 24;
      if (!a2)
        v15 = 0;
      v16 = *(_QWORD *)(*v12 + v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = a5;
    v18 = 0;
    v10 = v10;
    do
    {
      result = llvm::InstrProfValueSiteRecord::merge(*(_QWORD *)v14 + v18, v16 + v18, a4, v17, a6);
      v17 = a5;
      v18 += 24;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *llvm::InstrProfRecord::merge(uint64_t *a1, _QWORD *a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unint64_t v22;
  BOOL v23;

  v6 = a4;
  v7 = (a1[1] - *a1) >> 3;
  v8 = a2[1];
  if (v7 != (v8 - *a2) >> 3)
    return (_QWORD *)a4(a5, 16);
  if (v8 != *a2)
  {
    v12 = 0;
    v13 = __clz(a3);
    if (v7 <= 1)
      v14 = 1;
    else
      v14 = (a1[1] - *a1) >> 3;
    while (1)
    {
      v15 = *(_QWORD *)(*a2 + 8 * v12);
      v16 = *a1;
      v17 = *(_QWORD *)(*a1 + 8 * v12);
      v18 = __clz(v15) + v13;
      if (v18 >= 0x40)
        break;
      if (v18 == 63)
      {
        v22 = (v15 >> 1) * a3;
        if ((v22 & 0x8000000000000000) == 0)
        {
          v19 = 2 * v22;
          if ((v15 & 1) == 0)
            goto LABEL_8;
          v23 = v19 + a3 >= v19 && v19 + a3 >= a3;
          v19 += a3;
          if (v23)
            goto LABEL_8;
        }
      }
      *(_QWORD *)(v16 + 8 * v12) = -1;
LABEL_20:
      a4(a5, 17);
      v6 = a4;
LABEL_21:
      if (v14 == ++v12)
        goto LABEL_22;
    }
    v19 = v15 * a3;
LABEL_8:
    v20 = v19 + v17;
    v21 = v19 + v17 >= v17 && v19 + v17 >= v19;
    if (!v21)
      v20 = -1;
    *(_QWORD *)(v16 + 8 * v12) = v20;
    if (v21)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_22:
  llvm::InstrProfRecord::mergeValueProfData(a1, 0, (uint64_t)a2, a3, v6, a5);
  return llvm::InstrProfRecord::mergeValueProfData(a1, 1, (uint64_t)a2, a3, a4, a5);
}

uint64_t llvm::InstrProfRecord::scaleValueProfData(uint64_t result, int a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;

  v6 = *(_QWORD *)(result + 24);
  if (v6)
  {
    v7 = 32;
    if (!a2)
      v7 = 8;
    v8 = 24;
    if (!a2)
      v8 = 0;
    v9 = *(_QWORD *)(v6 + v8);
    v10 = *(_QWORD *)(v6 + v7) - v9;
    if (v10)
    {
      v15 = 24 * (v10 / 24);
      do
      {
        result = llvm::InstrProfValueSiteRecord::scale(v9, a3, a4, a5, a6);
        v9 += 24;
        v15 -= 24;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t llvm::InstrProfRecord::scale(unint64_t **a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v18;

  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    v12 = __clz(a2);
    do
    {
      v13 = *v10;
      v14 = __clz(*v10) + v12;
      if (v14 < 0x40)
      {
        if (v14 != 63 || (v16 = (v13 >> 1) * a2, (v16 & 0x8000000000000000) != 0))
        {
          *v10 = 0xFFFFFFFFFFFFFFFFLL / a3;
LABEL_14:
          a4(a5, 17);
          goto LABEL_15;
        }
        v15 = 2 * v16;
        if ((v13 & 1) != 0)
        {
          v17 = v15 + a2;
          v18 = v15 + a2 >= v15 && v15 + a2 >= a2;
          if (!v18)
            v17 = -1;
          *v10 = v17 / a3;
          if (v18)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      else
      {
        v15 = v13 * a2;
      }
      *v10 = v15 / a3;
LABEL_15:
      ++v10;
    }
    while (v10 != v11);
  }
  llvm::InstrProfRecord::scaleValueProfData((uint64_t)a1, 0, a2, a3, a4, a5);
  return llvm::InstrProfRecord::scaleValueProfData((uint64_t)a1, 1, a2, a3, a4, a5);
}

unint64_t llvm::InstrProfRecord::remapValue(llvm::InstrProfRecord *this, unint64_t a2, int a3, llvm::InstrProfSymtab *a4)
{
  if (!a3 && a4)
    return llvm::InstrProfSymtab::getFunctionHashFromAddress(a4, a2);
  else
    return a2;
}

uint64_t *llvm::InstrProfRecord::addValueData(uint64_t a1, int a2, int a3, __int128 *a4, unsigned int a5, llvm::InstrProfSymtab *this)
{
  BOOL v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t FunctionHashFromAddress;
  _OWORD *v16;
  _QWORD *v17;
  uint64_t *result;
  _OWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  __int128 *v22;
  __int128 *v23;

  v23 = a4;
  if (a5)
  {
    if (a2)
      v10 = 1;
    else
      v10 = this == 0;
    v11 = !v10;
    v12 = a5;
    v13 = (unint64_t *)a4;
    v14 = a5;
    do
    {
      FunctionHashFromAddress = *v13;
      if (v11)
        FunctionHashFromAddress = llvm::InstrProfSymtab::getFunctionHashFromAddress(this, FunctionHashFromAddress);
      *v13 = FunctionHashFromAddress;
      v13 += 2;
      --v14;
    }
    while (v14);
    v16 = sub_1C5A8A1DC(a1, a2);
    v22 = &a4[v12];
    v17 = (_QWORD *)*((_QWORD *)v16 + 1);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 2))
    {
      result = sub_1C5A8D3DC((uint64_t **)v16, &v23, &v22);
    }
    else
    {
      sub_1C5A8D564((uint64_t)(v16 + 1), v17, &v23, &v22);
      result = v17 + 3;
    }
    *((_QWORD *)v16 + 1) = result;
  }
  else
  {
    v19 = sub_1C5A8A1DC(a1, a2);
    v20 = v19;
    v21 = (_QWORD *)*((_QWORD *)v19 + 1);
    if ((unint64_t)v21 >= *((_QWORD *)v19 + 2))
    {
      result = sub_1C5A8D270((uint64_t **)v19);
    }
    else
    {
      *v21 = v21;
      v21[1] = v21;
      result = v21 + 3;
      v21[2] = 0;
    }
    *((_QWORD *)v20 + 1) = result;
  }
  return result;
}

uint64_t llvm::getValueProfDataSize(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;

  v2 = 0;
  v3 = *a1;
  v4 = 1;
  v5 = 8;
  do
  {
    v6 = v4;
    v7 = ((uint64_t (*)(uint64_t, uint64_t))a1[2])(v3, v2);
    if (v7)
      v5 = ((v7 + 15) & 0xFFFFFFF8) + (_DWORD)v5 + 16 * ((unsigned int (*)(uint64_t, uint64_t))a1[3])(v3, v2);
    v4 = 0;
    v2 = 1;
  }
  while ((v6 & 1) != 0);
  return v5;
}

_DWORD *llvm::serializeValueProfRecordFrom(_DWORD *result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;

  v4 = *a2;
  *result = a3;
  result[1] = a4;
  if (a4)
  {
    v7 = 0;
    v8 = (char *)result + ((a4 + 15) & 0xFFFFFFF8);
    v9 = a4;
    v10 = result + 2;
    do
    {
      v11 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[4])(v4, a3, v7);
      *((_BYTE *)v10 + v7) = v11;
      result = (_DWORD *)((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))a2[6])(v4, v8, a3, v7);
      v8 += 16 * v11;
      ++v7;
    }
    while (v9 != v7);
  }
  return result;
}

unsigned int *llvm::serializeValueProfDataFrom(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  char v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;

  if (a2)
  {
    v3 = a2;
    v4 = *a2;
  }
  else
  {
    v5 = 0;
    v6 = *a1;
    v7 = 1;
    v4 = 8;
    do
    {
      v8 = v7;
      v9 = ((uint64_t (*)(uint64_t, uint64_t))a1[2])(v6, v5);
      if (v9)
        v4 += ((v9 + 15) & 0xFFFFFFF8) + 16 * ((uint64_t (*)(uint64_t, uint64_t))a1[3])(v6, v5);
      v7 = 0;
      v5 = 1;
    }
    while ((v8 & 1) != 0);
    v3 = (unsigned int *)((uint64_t (*)(_QWORD))a1[7])(v4);
  }
  *v3 = v4;
  v10 = 0;
  v3[1] = ((uint64_t (*)(_QWORD))a1[1])(*a1);
  v11 = v3 + 2;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = ((uint64_t (*)(_QWORD, uint64_t))a1[2])(*a1, v10);
    if (v14)
    {
      v15 = 0;
      v16 = *a1;
      *v11 = v10;
      v11[1] = v14;
      v17 = (char *)v11 + ((v14 + 15) & 0xFFFFFFF8);
      v18 = v14;
      do
      {
        v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[4])(v16, v10, v15);
        *((_BYTE *)v11 + v15 + 8) = v19;
        ((void (*)(uint64_t, char *, uint64_t, uint64_t))a1[6])(v16, v17, v10, v15);
        v17 += 16 * v19;
        ++v15;
      }
      while (v18 != v15);
      v20 = v11[1];
      if (v20)
      {
        v21 = 0;
        v22 = (unsigned __int8 *)(v11 + 2);
        v23 = v11[1];
        do
        {
          v24 = *v22++;
          v21 += v24;
          --v23;
        }
        while (v23);
      }
      else
      {
        v21 = 0;
      }
      v11 = (_DWORD *)((char *)v11 + 16 * v21 + ((v20 + 15) & 0xFFFFFFF8));
    }
    v12 = 0;
    v10 = 1;
  }
  while ((v13 & 1) != 0);
  return v3;
}

uint64_t llvm::getNumValueKindsInstrProf(llvm *this, const void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  if (v2[4] == v2[3])
    return v2[1] != *v2;
  return (v2[1] != *v2) + 1;
}

uint64_t llvm::getNumValueSitesInstrProf(llvm *this, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = 32;
  if (!(_DWORD)a2)
    v3 = 8;
  v4 = 24;
  if (!(_DWORD)a2)
    v4 = 0;
  return -1431655765 * ((*(_QWORD *)(v2 + v3) - *(_QWORD *)(v2 + v4)) >> 3);
}

uint64_t llvm::getNumValueDataInstrProf(llvm *this, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  int v10;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = 8;
  if ((_DWORD)a2)
    v3 = 32;
  v4 = 24;
  if (!(_DWORD)a2)
    v4 = 0;
  v5 = *(_QWORD *)(v2 + v4);
  v6 = *(_QWORD *)(v2 + v3) - v5;
  if (!v6)
    return 0;
  LODWORD(result) = 0;
  v8 = 24 * (v6 / 24);
  v9 = (int *)(v5 + 16);
  do
  {
    v10 = *v9;
    v9 += 6;
    result = (result + v10);
    v8 -= 24;
  }
  while (v8);
  return result;
}

uint64_t llvm::getNumValueDataForSiteInstrProf(llvm *this, const void *a2, unsigned int a3)
{
  uint64_t v3;

  if ((_DWORD)a2)
    v3 = 24;
  else
    v3 = 0;
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + v3) + 24 * a3 + 16);
}

__n128 llvm::getValueForSiteInstrProf(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  unsigned int v8;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = 24;
    if (!a3)
      v5 = 0;
    v4 = *(_QWORD *)(v4 + v5);
  }
  v6 = v4 + 24 * a4;
  v7 = *(__n128 **)(v6 + 8);
  if (v7 != (__n128 *)v6)
  {
    v8 = 0;
    do
    {
      result = v7[1];
      *(__n128 *)(a2 + 16 * v8++) = result;
      v7 = (__n128 *)v7->n128_u64[1];
    }
    while (v7 != (__n128 *)v6);
  }
  return result;
}

void llvm::allocValueProfDataInstrProf(llvm *this)
{
  _QWORD *v2;

  v2 = operator new((size_t)this);
  *v2 = 0;
  bzero(v2, (size_t)this);
}

uint64_t llvm::ValueProfData::getSize(llvm *this)
{
  uint64_t v2;
  uint64_t (*v3)(llvm *, const void *);
  unsigned int (*v4)(llvm *, const void *);
  char v5;
  uint64_t v6;
  char v7;
  int v8;

  v2 = 0;
  v3 = (uint64_t (*)(llvm *, const void *))off_1EF8EE318[0];
  v4 = (unsigned int (*)(llvm *, const void *))off_1EF8EE320;
  v5 = 1;
  v6 = 8;
  do
  {
    v7 = v5;
    v8 = v3(this, (const void *)v2);
    if (v8)
      v6 = ((v8 + 15) & 0xFFFFFFF8) + (_DWORD)v6 + 16 * v4(this, (const void *)v2);
    v5 = 0;
    v2 = 1;
  }
  while ((v7 & 1) != 0);
  return v6;
}

unsigned int *llvm::ValueProfData::serializeFrom@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;

  qword_1EF8EE308 = a1;
  result = llvm::serializeValueProfDataFrom(&qword_1EF8EE308, 0);
  *a2 = result;
  return result;
}

unsigned int *llvm::ValueProfData::swapBytesFromHost(unsigned int *result, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;

  if (a2 != 1)
  {
    v2 = result;
    v3 = result[1];
    if (v3)
    {
      v5 = 0;
      result += 2;
      do
      {
        v6 = result[1];
        if (v6)
        {
          v7 = 0;
          v8 = (unsigned __int8 *)(result + 2);
          v9 = result[1];
          do
          {
            v10 = *v8++;
            v7 += v10;
            --v9;
          }
          while (v9);
        }
        else
        {
          v7 = 0;
        }
        v11 = (unsigned int *)((char *)&result[4 * v7] + ((v6 + 15) & 0xFFFFFFF8));
        llvm::ValueProfRecord::swapBytes(result, 1, a2);
        ++v5;
        v3 = v2[1];
        result = v11;
      }
      while (v5 < v3);
    }
    *v2 = bswap32(*v2);
    v2[1] = bswap32(v3);
  }
  return result;
}

uint64_t llvm::getValueProfDataFromInst(uint64_t a1, int a2, unsigned int a3, uint64_t a4, _DWORD *a5, _QWORD *a6, char a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return 0;
  v14 = ***(_QWORD ***)a1;
  v54 = a1;
  v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    v52 = 0;
LABEL_59:
    v19 = sub_1C541AB24(v14 + 2480, (uint64_t)&v54, &v54, v52);
    v53 = v54;
    v19[3] = 0;
    v19[4] = 0;
    *v19 = v53;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v14 + 2480);
  v17 = v15 - 1;
  v18 = v17 & ((a1 >> 4) ^ (a1 >> 9));
  v19 = (_QWORD *)(v16 + 40 * v18);
  v20 = *v19;
  if (*v19 != a1)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (_QWORD *)(v16 + 40 * v18);
      v20 = *v19;
      if (*v19 == a1)
        goto LABEL_12;
    }
    if (v21)
      v52 = v21;
    else
      v52 = v19;
    goto LABEL_59;
  }
LABEL_12:
  v25 = *((unsigned int *)v19 + 4);
  if ((_DWORD)v25)
  {
    v26 = (_QWORD *)(v19[1] + 8);
    v27 = 16 * v25;
    while (*((_DWORD *)v26 - 2) != 2)
    {
      result = 0;
      v26 += 2;
      v27 -= 16;
      if (!v27)
        return result;
    }
    v29 = *v26;
    if (v29)
    {
      v30 = *(unsigned int *)(v29 + 8);
      if (v30 >= 5)
      {
        v31 = (_QWORD *)(v29 - 8 * v30);
        if (*v31)
        {
          v32 = *(_QWORD *)(*v31 + 8);
          if (*(_QWORD *)v32 == 2 && *(_WORD *)(v32 + 24) == 20566)
          {
            v33 = v31[1];
            if (*(_BYTE *)v33 == 1)
            {
              v34 = *(_QWORD *)(v33 + 128);
              if (*(_BYTE *)(v34 + 16) == 16)
              {
                v35 = (_QWORD *)(v34 + 24);
                if (*(_DWORD *)(v34 + 32) >= 0x41u)
                  v35 = (_QWORD *)*v35;
                if (*v35 == a2)
                {
                  v36 = v31[2];
                  if (*(_BYTE *)v36 == 1)
                  {
                    v37 = *(_QWORD *)(v36 + 128);
                    if (*(_BYTE *)(v37 + 16) == 16)
                    {
                      v38 = (_QWORD *)(v37 + 24);
                      if (*(_DWORD *)(v37 + 32) >= 0x41u)
                        v38 = (_QWORD *)*v38;
                      *a6 = *v38;
                      *a5 = 0;
                      if (!a3)
                        return 1;
                      v39 = 0;
                      v40 = 5;
                      while (1)
                      {
                        v41 = v29 - 8 * *(unsigned int *)(v29 + 8);
                        v42 = *(_QWORD *)(v41 + 8 * (v40 - 2));
                        if (*(_BYTE *)v42 == 1)
                        {
                          v43 = *(_QWORD *)(v42 + 128);
                          if (*(_BYTE *)(v43 + 16) != 16)
                            v43 = 0;
                        }
                        else
                        {
                          v43 = 0;
                        }
                        v44 = *(_QWORD *)(v41 + 8 * (v40 - 1));
                        if (*(_BYTE *)v44 != 1)
                          break;
                        result = 0;
                        v45 = *(_QWORD *)(v44 + 128);
                        if (*(_BYTE *)(v45 + 16) == 16)
                          v46 = v45;
                        else
                          v46 = 0;
                        if (v43 && v46)
                        {
                          v47 = (_QWORD *)(v46 + 24);
                          if (*(_DWORD *)(v46 + 32) >= 0x41u)
                            v47 = (_QWORD *)*v47;
                          v48 = (_QWORD *)*v47;
                          if ((a7 & 1) != 0 || v48 != (_QWORD *)-1)
                          {
                            v49 = (_QWORD *)(v43 + 24);
                            if (*(_DWORD *)(v43 + 32) >= 0x41u)
                              v49 = (_QWORD *)*v49;
                            v50 = (_QWORD *)*v49;
                            v51 = (_QWORD *)(a4 + 16 * v39);
                            *v51 = v50;
                            v51[1] = v48;
                            *a5 = ++v39;
                          }
                          result = 1;
                          if (v40 < v30)
                          {
                            v40 += 2;
                            if (v39 < a3)
                              continue;
                          }
                        }
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL llvm::needsComdatForCounter(llvm *this, const llvm::Function *a2, const llvm::Module *a3)
{
  unsigned int v5;
  char *v6;
  __int16 v7;
  void *__p;
  char v9;
  unsigned int v10;

  if (*((_QWORD *)this + 6))
    return 1;
  v7 = 260;
  v6 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v6);
  v5 = (v10 > 9) | (0xDFu >> v10);
  if (v9 < 0)
  {
    operator delete(__p);
    if ((v5 & 1) != 0)
      return (*((_DWORD *)this + 8) & 7) == 1;
  }
  else if ((v10 > 9) | (0xDFu >> v10) & 1)
  {
    return (*((_DWORD *)this + 8) & 7) == 1;
  }
  return 0;
}

uint64_t llvm::isIRPGOFlagSet(uint64_t **this, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;

  result = sub_1C4FB7E80(this[14], "__llvm_profile_raw_version", 0x1AuLL);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 3 || (*(_DWORD *)(result + 32) & 0xFu) - 7 < 2)
      return 0;
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFF) != 0)
    {
      v3 = *(_QWORD *)(result - 32);
      if (!v3 || *(_BYTE *)(v3 + 16) != 16)
        return 0;
      v4 = (uint64_t *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u)
        v4 = (uint64_t *)*v4;
      return *((_BYTE *)v4 + 7) & 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::canRenameComdatFunc(llvm *this, const llvm::Function *a2, const llvm::Module *a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  int v11;
  int v12;
  uint64_t result;
  char hasAddressTaken;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 0;
  v3 = (int)a2;
  v5 = ***(_QWORD ***)this;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
    v9 = v6 + 16 * v8;
    v10 = *(llvm **)v9;
    if (*(llvm **)v9 == this)
      goto LABEL_9;
    v11 = 1;
    while (v10 != (llvm *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(llvm **)(v6 + 16 * v8);
      if (v10 == this)
      {
        v9 = v6 + 16 * v8;
        goto LABEL_9;
      }
    }
  }
  v9 = v6 + 16 * v7;
LABEL_9:
  if (!**(_QWORD **)(v9 + 8))
    return 0;
  result = llvm::needsComdatForCounter(this, *((const llvm::Function **)this + 5), a3);
  if ((_DWORD)result)
  {
    if (!v3
      || (hasAddressTaken = llvm::Function::hasAddressTaken(this, 0, 0, 1, 0, 0),
          result = 0,
          (hasAddressTaken & 1) == 0))
    {
      v15 = *((_DWORD *)this + 8) & 0xF;
      v16 = v15 > 8;
      v17 = (0x18Eu >> v15) & 1;
      if (v16)
        return 0;
      else
        return v17;
    }
  }
  return result;
}

void llvm::createProfileFileNameVar(uint64_t *a1, char *a2, llvm::Type *a3)
{
  uint64_t *v4;
  llvm::Value **String;
  _DWORD *v6;
  llvm::GlobalValue *v7;
  llvm::PointerType *v8;
  int v9;
  size_t *inserted;
  uint64_t *v11;
  __int16 v12;
  void *__p[2];
  char v14;
  __int16 v15;
  unsigned int v16;

  if (a3)
  {
    v4 = a1 + 27;
    String = llvm::ConstantDataArray::getString(*a1, a2, a3, 1);
    v6 = operator new(0x78uLL);
    v7 = (llvm::GlobalValue *)(v6 + 8);
    v6[13] = v6[13] & 0x38000000 | 1;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = v6 + 8;
    v8 = *String;
    __p[0] = "__llvm_profile_filename";
    v15 = 259;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v6 + 8), (uint64_t)a1, v8, 1, 4, (uint64_t)String, (uint64_t)__p, 0, 0, 0, 0);
    v12 = 260;
    v11 = v4;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v11);
    if (v16 > 9 || ((1 << v16) & 0x320) == 0)
    {
      v9 = v6[16];
      v6[16] = v9 & 0xFFFFFFF0;
      if ((v9 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v7) & 1) == 0)
        v6[16] |= 0x4000u;
      inserted = llvm::Module::getOrInsertComdat((uint64_t)a1, "__llvm_profile_filename", 0x17uLL);
      llvm::GlobalObject::setComdat(v7, (llvm::Comdat *)inserted);
    }
    if (v14 < 0)
      operator delete(__p[0]);
  }
}

void llvm::OverlapStats::accumulateCounts(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::vfs::getRealFileSystem(&v21);
  v20 = 260;
  v19[0] = a2;
  v10 = v21;
  llvm::InstrProfReader::create((llvm::Twine *)v19, v21, 0, (uint64_t)&v22);
  v11 = v22;
  if ((v23 & 1) != 0)
  {
    if (!v22)
      llvm::InstrProfReader::accumulateCounts(0, (_QWORD *)a1, a4);
  }
  else
  {
    llvm::InstrProfReader::accumulateCounts(v22, (_QWORD *)a1, a4);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v11 = 0;
    }
  }
  v12 = (unsigned int *)(v10 + 8);
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
  {
    llvm::vfs::getRealFileSystem(&v21);
    v20 = 260;
    v19[0] = a3;
    v15 = v21;
    llvm::InstrProfReader::create((llvm::Twine *)v19, v21, 0, (uint64_t)&v22);
    v11 = v22;
    if ((v23 & 1) != 0)
    {
      if (!v22)
        llvm::InstrProfReader::accumulateCounts(0, (_QWORD *)(a1 + 32), a4);
    }
    else
    {
      llvm::InstrProfReader::accumulateCounts(v22, (_QWORD *)(a1 + 32), a4);
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v11 = 0;
      }
    }
    v16 = (unsigned int *)(v15 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (!v11)
    {
      *(_QWORD *)(a1 + 168) = a2;
      *(_QWORD *)(a1 + 176) = a3;
      *(_BYTE *)(a1 + 208) = 1;
    }
  }
  *a5 = v11;
}

uint64_t llvm::OverlapStats::addOneUnique(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  double v6;

  v2 = 0;
  ++*(_QWORD *)(result + 128);
  *(double *)(result + 136) = *(double *)(result + 136) + *(double *)(a2 + 8) / *(double *)(result + 40);
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = result + 8 * v2;
    v6 = *(double *)(v5 + 48);
    if (v6 >= 1.0)
      *(double *)(v5 + 144) = *(double *)(v5 + 144) + *(double *)(a2 + 8 * v2 + 16) / v6;
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

llvm::raw_ostream *llvm::OverlapStats::dump(llvm::raw_ostream *this, llvm::raw_fd_ostream *a2)
{
  llvm::raw_ostream *v3;
  int v4;
  const char *v5;
  _OWORD *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  _DWORD *v10;
  const void *v11;
  unint64_t v12;
  llvm::raw_fd_ostream *v13;
  uint64_t v14;
  char v15;
  const char *v16;
  size_t v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const char *v22;
  size_t v23;
  llvm::raw_ostream *v24;
  _OWORD *v25;
  const char *v26;
  size_t v27;
  _WORD *v28;
  _DWORD *v29;
  llvm::raw_ostream *v30;
  void *v31;
  size_t v32;
  size_t v33;
  _BYTE *v34;
  _DWORD *v35;
  llvm::raw_ostream *v36;
  void *v37;
  size_t v38;
  _BYTE *v39;
  _DWORD *v40;
  llvm::raw_ostream *v41;
  void *v42;
  void *v43;
  _BYTE *v44;
  void *v45;
  llvm::raw_fd_ostream *v46;
  double v47;
  llvm::raw_ostream *v48;
  _BYTE *v49;
  void *v50;
  llvm::raw_fd_ostream *v51;
  double v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  void *v55;
  llvm::raw_fd_ostream *v56;
  double v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  void *v60;
  llvm::raw_fd_ostream *v61;
  double v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  void *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  char v69;
  char v70;
  double *v71;
  double *v72;
  double v73;
  const char *v74;
  _WORD *v75;
  llvm::raw_ostream *v76;
  _WORD *v77;
  size_t v78;
  size_t v79;
  double v80;
  _BYTE *v81;
  void *v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  size_t v85;
  size_t v86;
  double v87;
  _BYTE *v88;
  _OWORD *v89;
  llvm::raw_ostream *v90;
  void *v91;
  size_t v92;
  size_t v93;
  double v94;
  _BYTE *v95;
  _WORD *v96;
  llvm::raw_ostream *v97;
  void *v98;
  size_t v99;
  size_t v100;
  double v101;
  _BYTE *v102;
  _WORD *v103;
  void *v104;
  size_t v105;
  size_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t (**v109)(llvm::format_object_base *__hidden);
  const char *v110;
  uint64_t v111;
  uint64_t (**v112)(llvm::format_object_base *__hidden);
  const char *v113;
  double v114;
  char __s[24];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 208))
    return this;
  v3 = this;
  v4 = *((_DWORD *)this + 40);
  if (v4)
    v5 = "edge counters";
  else
    v5 = "functions";
  v6 = (_OWORD *)*((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 3) - (_QWORD)v6;
  if (v4)
  {
    if (v7 > 0xF)
    {
      *v6 = *(_OWORD *)"Function level:\n";
      v9 = *((_QWORD *)a2 + 4) + 16;
      *((_QWORD *)a2 + 4) = v9;
      v8 = a2;
    }
    else
    {
      v8 = llvm::raw_ostream::write(a2, "Function level:\n", 0x10uLL);
      v9 = *((_QWORD *)v8 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 0xB)
    {
      *(_DWORD *)(v9 + 8) = 540700271;
      *(_QWORD *)v9 = *(_QWORD *)"  Function: ";
      v10 = (_DWORD *)(*((_QWORD *)v8 + 4) + 12);
      *((_QWORD *)v8 + 4) = v10;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, "  Function: ", 0xCuLL);
      v10 = (_DWORD *)*((_QWORD *)v8 + 4);
    }
    v11 = (const void *)*((_QWORD *)v3 + 23);
    v12 = *((_QWORD *)v3 + 24);
    if (v12 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
    {
      if (v12)
      {
        memcpy(v10, v11, *((_QWORD *)v3 + 24));
        v10 = (_DWORD *)(*((_QWORD *)v8 + 4) + v12);
        *((_QWORD *)v8 + 4) = v10;
      }
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, (const char *)v11, *((_QWORD *)v3 + 24));
      v10 = (_DWORD *)*((_QWORD *)v8 + 4);
    }
    if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 6uLL)
    {
      *(_DWORD *)((char *)v10 + 3) = 1030255457;
      *v10 = 1632118816;
      *((_QWORD *)v8 + 4) += 7;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, " (Hash=", 7uLL);
    }
    sub_1C5E21910(v8, *((_QWORD *)v3 + 25), 0, 0, 0);
    v28 = (_WORD *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v28 > 1uLL)
    {
      *v28 = 2601;
      *((_QWORD *)v8 + 4) += 2;
      goto LABEL_37;
    }
    v26 = ")\n";
    v24 = v8;
    v27 = 2;
  }
  else
  {
    if (v7 > 0x2C)
    {
      qmemcpy(v6, "Profile overlap infomation for base_profile: ", 45);
      *((_QWORD *)a2 + 4) += 45;
      v13 = a2;
    }
    else
    {
      v13 = llvm::raw_ostream::write(a2, "Profile overlap infomation for base_profile: ", 0x2DuLL);
    }
    v14 = *((_QWORD *)v3 + 21);
    v15 = *(_BYTE *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const char *)*((_QWORD *)v3 + 21);
    else
      v16 = *(const char **)v14;
    if (v15 >= 0)
      v17 = v15 & 0x7F;
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = llvm::raw_ostream::write(v13, v16, v17);
    v19 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v19) > 0x12)
    {
      *(_DWORD *)(v19 + 15) = 540697964;
      *(_OWORD *)v19 = *(_OWORD *)" and test_profile: ";
      *((_QWORD *)v18 + 4) += 19;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, " and test_profile: ", 0x13uLL);
    }
    v20 = *((_QWORD *)v3 + 22);
    v21 = *(_BYTE *)(v20 + 23);
    if (v21 >= 0)
      v22 = (const char *)*((_QWORD *)v3 + 22);
    else
      v22 = *(const char **)v20;
    if (v21 >= 0)
      v23 = v21 & 0x7F;
    else
      v23 = *(_QWORD *)(v20 + 8);
    v24 = llvm::raw_ostream::write(v18, v22, v23);
    v25 = (_OWORD *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 0xFuLL)
    {
      *v25 = *(_OWORD *)"\nProgram level:\n";
      *((_QWORD *)v24 + 4) += 16;
      goto LABEL_37;
    }
    v26 = "\nProgram level:\n";
    v27 = 16;
  }
  llvm::raw_ostream::write(v24, v26, v27);
LABEL_37:
  v29 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 6uLL)
  {
    *(_DWORD *)((char *)v29 + 3) = 543584032;
    *v29 = 539172896;
    v31 = (void *)(*((_QWORD *)a2 + 4) + 7);
    *((_QWORD *)a2 + 4) = v31;
    v30 = a2;
  }
  else
  {
    v30 = llvm::raw_ostream::write(a2, "  # of ", 7uLL);
    v31 = (void *)*((_QWORD *)v30 + 4);
  }
  if (v4)
    v32 = 13;
  else
    v32 = 9;
  if (v32 <= *((_QWORD *)v30 + 3) - (_QWORD)v31)
  {
    memcpy(v31, v5, v32);
    v33 = *((_QWORD *)v30 + 4) + v32;
    *((_QWORD *)v30 + 4) = v33;
  }
  else
  {
    v30 = llvm::raw_ostream::write(v30, v5, v32);
    v33 = *((_QWORD *)v30 + 4);
  }
  if (*((_QWORD *)v30 + 3) - v33 > 9)
  {
    *(_WORD *)(v33 + 8) = 8250;
    *(_QWORD *)v33 = *(_QWORD *)" overlap: ";
    *((_QWORD *)v30 + 4) += 10;
  }
  else
  {
    v30 = llvm::raw_ostream::write(v30, " overlap: ", 0xAuLL);
  }
  sub_1C5E21910(v30, *((_QWORD *)v3 + 8), 0, 0, 0);
  v34 = (_BYTE *)*((_QWORD *)v30 + 4);
  if (*((_BYTE **)v30 + 3) == v34)
  {
    llvm::raw_ostream::write(v30, "\n", 1uLL);
  }
  else
  {
    *v34 = 10;
    ++*((_QWORD *)v30 + 4);
  }
  if (*((_QWORD *)v3 + 12))
  {
    v35 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v35 > 6uLL)
    {
      *(_DWORD *)((char *)v35 + 3) = 543584032;
      *v35 = 539172896;
      v37 = (void *)(*((_QWORD *)a2 + 4) + 7);
      *((_QWORD *)a2 + 4) = v37;
      v36 = a2;
    }
    else
    {
      v36 = llvm::raw_ostream::write(a2, "  # of ", 7uLL);
      v37 = (void *)*((_QWORD *)v36 + 4);
    }
    if (v32 <= *((_QWORD *)v36 + 3) - (_QWORD)v37)
    {
      memcpy(v37, v5, v32);
      v38 = *((_QWORD *)v36 + 4) + v32;
      *((_QWORD *)v36 + 4) = v38;
    }
    else
    {
      v36 = llvm::raw_ostream::write(v36, v5, v32);
      v38 = *((_QWORD *)v36 + 4);
    }
    if (*((_QWORD *)v36 + 3) - v38 > 0xA)
    {
      *(_DWORD *)(v38 + 7) = 540698723;
      *(_QWORD *)v38 = *(_QWORD *)" mismatch: ";
      *((_QWORD *)v36 + 4) += 11;
    }
    else
    {
      v36 = llvm::raw_ostream::write(v36, " mismatch: ", 0xBuLL);
    }
    sub_1C5E21910(v36, *((_QWORD *)v3 + 12), 0, 0, 0);
    v39 = (_BYTE *)*((_QWORD *)v36 + 4);
    if (*((_BYTE **)v36 + 3) == v39)
    {
      llvm::raw_ostream::write(v36, "\n", 1uLL);
    }
    else
    {
      *v39 = 10;
      ++*((_QWORD *)v36 + 4);
    }
  }
  if (*((_QWORD *)v3 + 16))
  {
    v40 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 6uLL)
    {
      *(_DWORD *)((char *)v40 + 3) = 543584032;
      *v40 = 539172896;
      v42 = (void *)(*((_QWORD *)a2 + 4) + 7);
      *((_QWORD *)a2 + 4) = v42;
      v41 = a2;
    }
    else
    {
      v41 = llvm::raw_ostream::write(a2, "  # of ", 7uLL);
      v42 = (void *)*((_QWORD *)v41 + 4);
    }
    if (v32 <= *((_QWORD *)v41 + 3) - (_QWORD)v42)
    {
      memcpy(v42, v5, v32);
      v43 = (void *)(*((_QWORD *)v41 + 4) + v32);
      *((_QWORD *)v41 + 4) = v43;
    }
    else
    {
      v41 = llvm::raw_ostream::write(v41, v5, v32);
      v43 = (void *)*((_QWORD *)v41 + 4);
    }
    if (*((_QWORD *)v41 + 3) - (_QWORD)v43 > 0x16uLL)
    {
      qmemcpy(v43, " only in test_profile: ", 23);
      *((_QWORD *)v41 + 4) += 23;
    }
    else
    {
      v41 = llvm::raw_ostream::write(v41, " only in test_profile: ", 0x17uLL);
    }
    sub_1C5E21910(v41, *((_QWORD *)v3 + 16), 0, 0, 0);
    v44 = (_BYTE *)*((_QWORD *)v41 + 4);
    if (*((_BYTE **)v41 + 3) == v44)
    {
      llvm::raw_ostream::write(v41, "\n", 1uLL);
    }
    else
    {
      *v44 = 10;
      ++*((_QWORD *)v41 + 4);
    }
  }
  v45 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v45 > 0x17uLL)
  {
    qmemcpy(v45, "  Edge profile overlap: ", 24);
    *((_QWORD *)a2 + 4) += 24;
    v46 = a2;
  }
  else
  {
    v46 = llvm::raw_ostream::write(a2, "  Edge profile overlap: ", 0x18uLL);
  }
  v47 = *((double *)v3 + 9) * 100.0;
  v112 = &off_1E7FA8D00;
  v113 = "%.3f%%";
  v114 = v47;
  v48 = llvm::raw_ostream::operator<<(v46, (uint64_t)&v112);
  v49 = (_BYTE *)*((_QWORD *)v48 + 4);
  if (*((_BYTE **)v48 + 3) == v49)
  {
    llvm::raw_ostream::write(v48, "\n", 1uLL);
  }
  else
  {
    *v49 = 10;
    ++*((_QWORD *)v48 + 4);
  }
  if (*((_QWORD *)v3 + 12))
  {
    v50 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v50 > 0x25uLL)
    {
      qmemcpy(v50, "  Mismatched count percentage (Edge): ", 38);
      *((_QWORD *)a2 + 4) += 38;
      v51 = a2;
    }
    else
    {
      v51 = llvm::raw_ostream::write(a2, "  Mismatched count percentage (Edge): ", 0x26uLL);
    }
    v52 = *((double *)v3 + 13) * 100.0;
    v112 = &off_1E7FA8D00;
    v113 = "%.3f%%";
    v114 = v52;
    v53 = llvm::raw_ostream::operator<<(v51, (uint64_t)&v112);
    v54 = (_BYTE *)*((_QWORD *)v53 + 4);
    if (*((_BYTE **)v53 + 3) == v54)
    {
      llvm::raw_ostream::write(v53, "\n", 1uLL);
    }
    else
    {
      *v54 = 10;
      ++*((_QWORD *)v53 + 4);
    }
  }
  if (*((_QWORD *)v3 + 16))
  {
    v55 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v55 > 0x32uLL)
    {
      qmemcpy(v55, "  Percentage of Edge profile only in test_profile: ", 51);
      *((_QWORD *)a2 + 4) += 51;
      v56 = a2;
    }
    else
    {
      v56 = llvm::raw_ostream::write(a2, "  Percentage of Edge profile only in test_profile: ", 0x33uLL);
    }
    v57 = *((double *)v3 + 17) * 100.0;
    v112 = &off_1E7FA8D00;
    v113 = "%.3f%%";
    v114 = v57;
    v58 = llvm::raw_ostream::operator<<(v56, (uint64_t)&v112);
    v59 = (_BYTE *)*((_QWORD *)v58 + 4);
    if (*((_BYTE **)v58 + 3) == v59)
    {
      llvm::raw_ostream::write(v58, "\n", 1uLL);
    }
    else
    {
      *v59 = 10;
      ++*((_QWORD *)v58 + 4);
    }
  }
  v60 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v60 > 0x1EuLL)
  {
    qmemcpy(v60, "  Edge profile base count sum: ", 31);
    *((_QWORD *)a2 + 4) += 31;
    v61 = a2;
  }
  else
  {
    v61 = llvm::raw_ostream::write(a2, "  Edge profile base count sum: ", 0x1FuLL);
  }
  v62 = *((double *)v3 + 1);
  v112 = &off_1E7FA8D00;
  v113 = "%.0f";
  v114 = v62;
  v63 = llvm::raw_ostream::operator<<(v61, (uint64_t)&v112);
  v64 = (_BYTE *)*((_QWORD *)v63 + 4);
  if (*((_BYTE **)v63 + 3) == v64)
  {
    v63 = llvm::raw_ostream::write(v63, "\n", 1uLL);
    v65 = (void *)*((_QWORD *)v63 + 4);
  }
  else
  {
    *v64 = 10;
    v65 = (void *)(*((_QWORD *)v63 + 4) + 1);
    *((_QWORD *)v63 + 4) = v65;
  }
  if (*((_QWORD *)v63 + 3) - (_QWORD)v65 > 0x1EuLL)
  {
    qmemcpy(v65, "  Edge profile test count sum: ", 31);
    *((_QWORD *)v63 + 4) += 31;
  }
  else
  {
    v63 = llvm::raw_ostream::write(v63, "  Edge profile test count sum: ", 0x1FuLL);
  }
  v66 = *((_QWORD *)v3 + 5);
  v109 = &off_1E7FA8D00;
  v110 = "%.0f";
  v111 = v66;
  this = llvm::raw_ostream::operator<<(v63, (uint64_t)&v109);
  v67 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v67)
  {
    this = llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v67 = 10;
    ++*((_QWORD *)this + 4);
  }
  v68 = 0;
  v69 = 1;
  do
  {
    v70 = v69;
    v71 = (double *)((char *)v3 + 8 * v68);
    v73 = v71[2];
    v72 = v71 + 2;
    if (v73 >= 1.0 || *((double *)v3 + v68 + 6) >= 1.0)
    {
      *(_DWORD *)&__s[15] = 0;
      if ((v69 & 1) != 0)
        v74 = "IndirectCall";
      else
        v74 = "MemOP";
      *(_OWORD *)__s = *(_OWORD *)v74;
      v75 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v75 > 1uLL)
      {
        *v75 = 8224;
        v77 = (_WORD *)(*((_QWORD *)a2 + 4) + 2);
        *((_QWORD *)a2 + 4) = v77;
        v76 = a2;
      }
      else
      {
        v76 = llvm::raw_ostream::write(a2, "  ", 2uLL);
        v77 = (_WORD *)*((_QWORD *)v76 + 4);
      }
      v78 = strlen(__s);
      v79 = v78;
      if (v78 <= *((_QWORD *)v76 + 3) - (_QWORD)v77)
      {
        if (v78)
        {
          memcpy(v77, __s, v78);
          v77 = (_WORD *)(*((_QWORD *)v76 + 4) + v79);
          *((_QWORD *)v76 + 4) = v77;
        }
      }
      else
      {
        v76 = llvm::raw_ostream::write(v76, __s, v78);
        v77 = (_WORD *)*((_QWORD *)v76 + 4);
      }
      if (*((_QWORD *)v76 + 3) - (_QWORD)v77 > 0x11uLL)
      {
        v77[8] = 8250;
        *(_OWORD *)v77 = *(_OWORD *)" profile overlap: ";
        *((_QWORD *)v76 + 4) += 18;
      }
      else
      {
        v76 = llvm::raw_ostream::write(v76, " profile overlap: ", 0x12uLL);
      }
      v80 = *((double *)v3 + v68 + 10) * 100.0;
      v112 = &off_1E7FA8D00;
      v113 = "%.3f%%";
      v114 = v80;
      llvm::raw_ostream::operator<<(v76, (uint64_t)&v112);
      v81 = (_BYTE *)*((_QWORD *)v76 + 4);
      if (*((_BYTE **)v76 + 3) == v81)
      {
        llvm::raw_ostream::write(v76, "\n", 1uLL);
      }
      else
      {
        *v81 = 10;
        ++*((_QWORD *)v76 + 4);
      }
      if (*((_QWORD *)v3 + 12))
      {
        v82 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v82 > 0x1EuLL)
        {
          qmemcpy(v82, "  Mismatched count percentage (", 31);
          v84 = (_BYTE *)(*((_QWORD *)a2 + 4) + 31);
          *((_QWORD *)a2 + 4) = v84;
          v83 = a2;
        }
        else
        {
          v83 = llvm::raw_ostream::write(a2, "  Mismatched count percentage (", 0x1FuLL);
          v84 = (_BYTE *)*((_QWORD *)v83 + 4);
        }
        v85 = strlen(__s);
        v86 = v85;
        if (v85 <= *((_QWORD *)v83 + 3) - (_QWORD)v84)
        {
          if (v85)
          {
            memcpy(v84, __s, v85);
            v84 = (_BYTE *)(*((_QWORD *)v83 + 4) + v86);
            *((_QWORD *)v83 + 4) = v84;
          }
        }
        else
        {
          v83 = llvm::raw_ostream::write(v83, __s, v85);
          v84 = (_BYTE *)*((_QWORD *)v83 + 4);
        }
        if (*((_QWORD *)v83 + 3) - (_QWORD)v84 > 2uLL)
        {
          v84[2] = 32;
          *(_WORD *)v84 = 14889;
          *((_QWORD *)v83 + 4) += 3;
        }
        else
        {
          v83 = llvm::raw_ostream::write(v83, "): ", 3uLL);
        }
        v87 = *((double *)v3 + v68 + 14) * 100.0;
        v112 = &off_1E7FA8D00;
        v113 = "%.3f%%";
        v114 = v87;
        llvm::raw_ostream::operator<<(v83, (uint64_t)&v112);
        v88 = (_BYTE *)*((_QWORD *)v83 + 4);
        if (*((_BYTE **)v83 + 3) == v88)
        {
          llvm::raw_ostream::write(v83, "\n", 1uLL);
        }
        else
        {
          *v88 = 10;
          ++*((_QWORD *)v83 + 4);
        }
      }
      if (*((_QWORD *)v3 + 16))
      {
        v89 = (_OWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v89 > 0xFuLL)
        {
          *v89 = *(_OWORD *)"  Percentage of ";
          v91 = (void *)(*((_QWORD *)a2 + 4) + 16);
          *((_QWORD *)a2 + 4) = v91;
          v90 = a2;
        }
        else
        {
          v90 = llvm::raw_ostream::write(a2, "  Percentage of ", 0x10uLL);
          v91 = (void *)*((_QWORD *)v90 + 4);
        }
        v92 = strlen(__s);
        v93 = v92;
        if (v92 <= *((_QWORD *)v90 + 3) - (_QWORD)v91)
        {
          if (v92)
          {
            memcpy(v91, __s, v92);
            v91 = (void *)(*((_QWORD *)v90 + 4) + v93);
            *((_QWORD *)v90 + 4) = v91;
          }
        }
        else
        {
          v90 = llvm::raw_ostream::write(v90, __s, v92);
          v91 = (void *)*((_QWORD *)v90 + 4);
        }
        if (*((_QWORD *)v90 + 3) - (_QWORD)v91 > 0x1EuLL)
        {
          qmemcpy(v91, " profile only in test_profile: ", 31);
          *((_QWORD *)v90 + 4) += 31;
        }
        else
        {
          v90 = llvm::raw_ostream::write(v90, " profile only in test_profile: ", 0x1FuLL);
        }
        v94 = *((double *)v3 + v68 + 18) * 100.0;
        v112 = &off_1E7FA8D00;
        v113 = "%.3f%%";
        v114 = v94;
        llvm::raw_ostream::operator<<(v90, (uint64_t)&v112);
        v95 = (_BYTE *)*((_QWORD *)v90 + 4);
        if (*((_BYTE **)v90 + 3) == v95)
        {
          llvm::raw_ostream::write(v90, "\n", 1uLL);
        }
        else
        {
          *v95 = 10;
          ++*((_QWORD *)v90 + 4);
        }
      }
      v96 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v96 > 1uLL)
      {
        *v96 = 8224;
        v98 = (void *)(*((_QWORD *)a2 + 4) + 2);
        *((_QWORD *)a2 + 4) = v98;
        v97 = a2;
      }
      else
      {
        v97 = llvm::raw_ostream::write(a2, "  ", 2uLL);
        v98 = (void *)*((_QWORD *)v97 + 4);
      }
      v99 = strlen(__s);
      v100 = v99;
      if (v99 <= *((_QWORD *)v97 + 3) - (_QWORD)v98)
      {
        if (v99)
        {
          memcpy(v98, __s, v99);
          v98 = (void *)(*((_QWORD *)v97 + 4) + v100);
          *((_QWORD *)v97 + 4) = v98;
        }
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, __s, v99);
        v98 = (void *)*((_QWORD *)v97 + 4);
      }
      if (*((_QWORD *)v97 + 3) - (_QWORD)v98 > 0x18uLL)
      {
        qmemcpy(v98, " profile base count sum: ", 25);
        *((_QWORD *)v97 + 4) += 25;
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, " profile base count sum: ", 0x19uLL);
      }
      v101 = *v72;
      v112 = &off_1E7FA8D00;
      v113 = "%.0f";
      v114 = v101;
      llvm::raw_ostream::operator<<(v97, (uint64_t)&v112);
      v102 = (_BYTE *)*((_QWORD *)v97 + 4);
      if (*((_BYTE **)v97 + 3) == v102)
      {
        v97 = llvm::raw_ostream::write(v97, "\n", 1uLL);
        v103 = (_WORD *)*((_QWORD *)v97 + 4);
      }
      else
      {
        *v102 = 10;
        v103 = (_WORD *)(*((_QWORD *)v97 + 4) + 1);
        *((_QWORD *)v97 + 4) = v103;
      }
      if (*((_QWORD *)v97 + 3) - (_QWORD)v103 > 1uLL)
      {
        *v103 = 8224;
        v104 = (void *)(*((_QWORD *)v97 + 4) + 2);
        *((_QWORD *)v97 + 4) = v104;
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, "  ", 2uLL);
        v104 = (void *)*((_QWORD *)v97 + 4);
      }
      v105 = strlen(__s);
      v106 = v105;
      if (v105 <= *((_QWORD *)v97 + 3) - (_QWORD)v104)
      {
        if (v105)
        {
          memcpy(v104, __s, v105);
          v104 = (void *)(*((_QWORD *)v97 + 4) + v106);
          *((_QWORD *)v97 + 4) = v104;
        }
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, __s, v105);
        v104 = (void *)*((_QWORD *)v97 + 4);
      }
      if (*((_QWORD *)v97 + 3) - (_QWORD)v104 > 0x18uLL)
      {
        qmemcpy(v104, " profile test count sum: ", 25);
        *((_QWORD *)v97 + 4) += 25;
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, " profile test count sum: ", 0x19uLL);
      }
      v107 = *((_QWORD *)v3 + v68 + 6);
      v109 = &off_1E7FA8D00;
      v110 = "%.0f";
      v111 = v107;
      this = llvm::raw_ostream::operator<<(v97, (uint64_t)&v109);
      v108 = (_BYTE *)*((_QWORD *)v97 + 4);
      if (*((_BYTE **)v97 + 3) == v108)
      {
        this = llvm::raw_ostream::write(v97, "\n", 1uLL);
      }
      else
      {
        *v108 = 10;
        ++*((_QWORD *)v97 + 4);
      }
    }
    v69 = 0;
    v68 = 1;
  }
  while ((v70 & 1) != 0);
  return this;
}

uint64_t llvm::IndexedInstrProf::Header::size(llvm::IndexedInstrProf::Header *this)
{
  if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFLL) == 8)
    return 48;
  else
    return 40;
}

uint64_t sub_1C5A8CDE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8192D50;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5A8CE20(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8192D50;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5A8CE6C(uint64_t a1, llvm::raw_ostream *a2)
{
  void **v3;
  size_t v4;
  void *__p[2];
  char v6;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v6 >= 0)
    v4 = v6 & 0x7F;
  else
    v4 = (size_t)__p[1];
  llvm::raw_ostream::write(a2, (const char *)v3, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1C5A8CED8(int *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE *v10;
  char v11;
  char v12;

  v6 = operator new();
  v7 = v6;
  v8 = *a1;
  v9 = 1;
  v12 = 1;
  if (*a2)
  {
    v10 = a2;
    v9 = 3;
  }
  v11 = v9;
  *(_QWORD *)v6 = off_1E8192D50;
  *(_DWORD *)(v6 + 8) = v8;
  llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 16));
  *a3 = v7;
}

uint64_t *sub_1C5A8CF68(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_QWORD *)(*a2 + 16) < (unint64_t)result[2])
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)sub_1C5A8CF68(result, v10, a3 >> 1);
      result = (uint64_t *)sub_1C5A8CF68(v10, a2, a3 - v8);
      v12 = v11[2];
      if (result[2] >= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (i[2] >= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = v14[2];
          if (i[2] >= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (j[2] >= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

_QWORD *sub_1C5A8D12C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 3;
      v4[2] = v2 - 3;
      if (*(v2 - 1))
      {
        v6 = *(v2 - 3);
        result = (_QWORD *)*(v2 - 2);
        v7 = *result;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
        **(_QWORD **)(v6 + 8) = v7;
        *(v2 - 1) = 0;
        if (result != v5)
        {
          do
          {
            v8 = (_QWORD *)result[1];
            operator delete(result);
            result = v8;
          }
          while (v8 != v5);
          v5 = (_QWORD *)v4[2];
        }
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *sub_1C5A8D1B8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E8192D08;
  return result;
}

uint64_t sub_1C5A8D1EC(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5A8D204(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5A8D228()
{
  return "llvm.instrprof";
}

void sub_1C5A8D234(int a1@<W1>, _QWORD *a2@<X8>)
{
  void *__p;
  char v3;

  v3 = 0;
  LOBYTE(__p) = 0;
  sub_1C5A887B8(a2, a1, (uint64_t)&__p);
  if (v3 < 0)
    operator delete(__p);
}

uint64_t *sub_1C5A8D270(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = *a1;
  v1 = a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (v1 - *a1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (a1[2] - v2) > v4)
    v4 = 0x5555555555555556 * (a1[2] - v2);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - v2) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t *)&v7[24 * v3];
  v9 = (uint64_t *)&v7[24 * v6];
  *v8 = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0;
  v10 = v8 + 3;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v1)
      return v10;
    goto LABEL_19;
  }
  do
  {
    v1 -= 3;
    v8 = sub_1C6185480(v8 - 3, v1);
  }
  while (v1 != v2);
  v1 = *a1;
  v11 = a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v11 != v1)
  {
    do
    {
      v12 = v11 - 3;
      if (*(v11 - 1))
      {
        v14 = *(v11 - 3);
        v13 = (uint64_t *)*(v11 - 2);
        v15 = *v13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
        **(_QWORD **)(v14 + 8) = v15;
        *(v11 - 1) = 0;
        if (v13 != v12)
        {
          do
          {
            v16 = (uint64_t *)v13[1];
            operator delete(v13);
            v13 = v16;
          }
          while (v16 != v12);
        }
      }
      v11 = v12;
    }
    while (v12 != v1);
  }
  if (v1)
LABEL_19:
    operator delete(v1);
  return v10;
}

uint64_t *sub_1C5A8D3DC(uint64_t **a1, __int128 **a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = (uint64_t)(a1 + 2);
  if (0x5555555555555556 * (a1[2] - *a1) > v4)
    v4 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v4;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (uint64_t *)&v10[24 * v3];
  v12 = &v10[24 * v9];
  sub_1C5A8D564(v8, v11, a2, a3);
  v13 = v11 + 3;
  v15 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t *)v12;
    if (!v14)
      return v13;
    goto LABEL_19;
  }
  do
  {
    v11 -= 3;
    v14 -= 3;
    sub_1C6185480(v11, v14);
  }
  while (v14 != v15);
  v14 = *a1;
  v16 = a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = (uint64_t *)v12;
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 3;
      if (*(v16 - 1))
      {
        v19 = *(v16 - 3);
        v18 = (uint64_t *)*(v16 - 2);
        v20 = *v18;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(v19 + 8);
        **(_QWORD **)(v19 + 8) = v20;
        *(v16 - 1) = 0;
        if (v18 != v17)
        {
          do
          {
            v21 = (uint64_t *)v18[1];
            operator delete(v18);
            v18 = v21;
          }
          while (v21 != v17);
        }
      }
      v16 = v17;
    }
    while (v17 != v14);
  }
  if (v14)
LABEL_19:
    operator delete(v14);
  return v13;
}

double sub_1C5A8D564(uint64_t a1, _QWORD *a2, __int128 **a3, __int128 **a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  double result;

  v4 = *a3;
  v5 = *a4;
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  if (v4 != v5)
  {
    v7 = 1;
    v8 = a2;
    do
    {
      v9 = operator new(0x20uLL);
      v10 = *v4++;
      result = *(double *)&v10;
      v9[1] = v10;
      *(_QWORD *)v9 = v8;
      *((_QWORD *)v9 + 1) = a2;
      *((_QWORD *)v8 + 1) = v9;
      *a2 = v9;
      a2[2] = v7++;
      v8 = v9;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1C5A8D5E0(uint64_t *a1, int *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE *v10;
  char v11;
  char v12;

  v6 = operator new();
  v7 = v6;
  v8 = *a2;
  v9 = 1;
  v12 = 1;
  if (*a3)
  {
    v10 = a3;
    v9 = 3;
  }
  v11 = v9;
  *(_QWORD *)v6 = off_1E8192D50;
  *(_DWORD *)(v6 + 8) = v8;
  llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v6 + 16));
  *a1 = v7;
}

void sub_1C5A8D670(uint64_t *a1, int *a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;

  v4 = operator new();
  v5 = *a2;
  v6 = "value profile address is greater than total size";
  v7 = 259;
  *(_QWORD *)v4 = off_1E8192D50;
  *(_DWORD *)(v4 + 8) = v5;
  llvm::Twine::str((llvm::Twine *)&v6, (_QWORD *)(v4 + 16));
  *a1 = v4;
}

uint64_t sub_1C5A8D6F4()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Use full module build paths in the profile counter names for static functions.";
  v4.n128_u64[1] = 78;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED81B100, "static-func-full-module-prefix", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED81B100, &dword_1C475E000);
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Strip specified level of directory name from source path in the profile counter nam"
                                     "e for static functions.";
  v4.n128_u64[1] = 106;
  sub_1C6308348(&v3, &v1, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED81B1C0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Enable name/filename string compression";
  v4.n128_u64[1] = 39;
  LOBYTE(v2) = 1;
  v3 = &v2;
  sub_1C614D990((uint64_t)&llvm::DoInstrProfNameCompression, "enable-name-compression", &v4, (_BYTE **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DoInstrProfNameCompression, &dword_1C475E000);
}

double getCountersSection@<D0>(const llvm::object::ObjectFile *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  double result;
  __int128 v17;
  _QWORD v18[2];
  char v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(const llvm::object::ObjectFile *))(*(_QWORD *)a1 + 344))(a1);
  v6 = v5;
  v7 = (*(uint64_t (**)(const llvm::object::ObjectFile *))(*(_QWORD *)a1 + 352))(a1);
  *(_QWORD *)&v17 = v4;
  *((_QWORD *)&v17 + 1) = v6;
  if (v6 != v8 || v4 != v7)
  {
    v10 = v7;
    v11 = v8;
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v18, v6, v4);
      if ((v19 & 1) != 0)
      {
        v13 = v18[0];
        v18[0] = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      else if (v18[1] == 15
             && *(_QWORD *)v18[0] == 0x705F6D766C6C5F5FLL
             && *(_QWORD *)(v18[0] + 7) == 0x73746E635F667270)
      {
        *(_BYTE *)(a2 + 16) &= ~1u;
        result = *(double *)&v17;
        *(_OWORD *)a2 = v17;
        return result;
      }
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v17 + 1) + 128))(*((_QWORD *)&v17 + 1), &v17);
      v6 = *((_QWORD *)&v17 + 1);
      v4 = v17;
    }
    while (*((_QWORD *)&v17 + 1) != v11 || (_QWORD)v17 != v10);
  }
  v15 = operator new();
  v18[0] = "could not find counter section (__llvm_prf_cnts)";
  v20 = 259;
  *(_QWORD *)v15 = off_1E8192D50;
  *(_DWORD *)(v15 + 8) = 12;
  llvm::Twine::str((llvm::Twine *)v18, (_QWORD *)(v15 + 16));
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v15;
  return result;
}

void llvm::InstrProfCorrelator::Context::get(llvm::object::ObjectFile *a1@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  getCountersSection(a1, (uint64_t)&v13);
  v6 = v15;
  if ((v15 & 1) != 0)
  {
    v8 = v13;
    if (v13)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v8;
      return;
    }
    v7 = 0;
  }
  else
  {
    v7 = v13;
  }
  v9 = (_QWORD *)operator new();
  v9[3] = 0;
  v10 = *a2;
  *a2 = 0;
  *v9 = v10;
  v11 = v14;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 144))(v14, v7);
  v9[1] = v12;
  v9[2] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, v7) + v12;
  *((_BYTE *)v9 + 24) = (*((_DWORD *)a1 + 2) < 0x14u) & (0xAAC00u >> *((_DWORD *)a1 + 2));
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v9;
  if ((v6 & 1) != 0)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void llvm::InstrProfCorrelator::get(void **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14[4];
  __int16 v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = (void **)a2;
  v4 = a1;
  v23 = *MEMORY[0x1E0C80C00];
  llvm::object::MachOObjectFile::findDsymObjectMembers(a1, a2, (uint64_t)&v20);
  v6 = v20;
  if ((v22 & 1) != 0)
  {
    v20 = 0;
    if (v6)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v6;
      goto LABEL_23;
    }
  }
  if (v6 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v21 - v6) >> 3) >= 2)
    {
      v7 = operator new();
      v14[0] = (void **)"using multiple objects is not yet supported";
      v15 = 259;
      *(_QWORD *)v7 = off_1E8192D50;
      *(_DWORD *)(v7 + 8) = 12;
      llvm::Twine::str((llvm::Twine *)v14, (_QWORD *)(v7 + 16));
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v7;
      goto LABEL_23;
    }
    v8 = *(_BYTE *)(v6 + 23);
    if (v8 >= 0)
      v4 = (void **)v6;
    else
      v4 = *(void ***)v6;
    if (v8 >= 0)
      v3 = (void **)(v8 & 0x7F);
    else
      v3 = *(void ***)(v6 + 8);
  }
  v15 = 261;
  v14[0] = v4;
  v14[1] = v3;
  sub_1C5E1F6CC((unsigned __int8 *)v14, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v16);
  sub_1C570E564((uint64_t)v16, (uint64_t)&v18);
  if ((v17 & 1) == 0)
  {
    v9 = v16[0];
    v16[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v18;
  if ((v19 & 1) != 0 && (v18 = 0, v10))
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v10;
  }
  else
  {
    v18 = 0;
    v13 = v10;
    llvm::InstrProfCorrelator::get(&v13, a3);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v11 = v18;
  v18 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_23:
  if ((v22 & 1) != 0)
  {
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v14[0] = (void **)&v20;
    sub_1C4765410(v14);
  }
}

