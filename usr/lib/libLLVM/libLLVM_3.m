uint64_t sub_1C48B6FC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  llvm::MachineFunction *v16;
  llvm::MachineInstr *v17;
  llvm::MachineInstr *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  int v24;
  __int16 ***v25;
  int v26;
  const char *v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  llvm::MachineFunction *v36;
  llvm::MachineInstr *v37;
  llvm::MachineInstr *v38;
  uint64_t v39;
  uint64_t (**v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45[5];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v46 = a3;
  v10 = *(_QWORD *)(a2 + 24);
  v45[4] = 0;
  v11 = *(_QWORD *)(v10 + 32);
  v41 = &off_1E816EC08;
  v42 = v11;
  v44 = *(_QWORD *)(v11 + 40);
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 104))(*(_QWORD *)(v11 + 16));
  v12 = *(unsigned __int8 **)(a2 + 24);
  v45[2] = (unsigned __int8 *)a2;
  v45[3] = 0;
  v45[0] = 0;
  v45[1] = v12;
  if ((unsigned __int8 **)(a2 + 56) != v45)
  {
    v13 = *(unsigned __int8 **)(a2 + 56);
    v45[0] = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)v45, v13, 2);
  }
  if (a3 == 513)
  {
    v14 = sub_1C48B6FC4(a1, a2, 257, a4, 0);
    v15 = sub_1C48B6FC4(a1, a2, 257, HIDWORD(a4), 0);
    v47 = v46;
    LODWORD(v48) = 0;
    v16 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v41, 18, &v47, 1, 0, 0, 0);
    v18 = v17;
    v48 = 0;
    v49 = 0;
    LODWORD(v47) = 0;
    HIDWORD(v47) = v14;
    v50 = 0;
    llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    v48 = 0;
    v49 = 25;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v47);
    v48 = 0;
    v49 = 0;
    LODWORD(v47) = 0;
    HIDWORD(v47) = v15;
    v50 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    v48 = 0;
    v49 = 26;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v47);
    v19 = *(_QWORD *)(v42 + 40);
    v21 = *((_QWORD *)v18 + 4);
    v20 = (_QWORD *)((char *)v18 + 32);
    v22 = *(_DWORD *)(v21 + 4);
    v24 = sub_1C4825F50((unint64_t *)&v46);
    if ((_DWORD)v23 == 1)
    if (v24 > 111)
    {
      if (v24 <= 191)
      {
        if (v24 == 112)
        {
          v25 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v24 == 128)
        {
          v25 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v25 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v24 > 287)
      {
        if (v24 == 288)
          v25 = (__int16 ***)&off_1E7FA6178;
        else
          v25 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v24 == 192)
      {
        v25 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v25 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v24 <= 47)
    {
      v25 = &off_1E7FA5F10;
      if (v24 != 1 && v24 != 16)
        v25 = &off_1E7FA5F48;
    }
    else if (v24 > 79)
    {
      if (v24 == 80)
        v25 = (__int16 ***)&off_1E7FA6028;
      else
        v25 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v24 == 48)
    {
      v25 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v25 = (__int16 ***)&off_1E7FA6488;
    }
    *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16 * (v22 & 0x7FFFFFFF)) = v25;
  }
  else
  {
    v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 1646);
    sub_1C4825F50((unint64_t *)&v46);
    if ((_DWORD)v27 == 1)
    v29 = sub_1C4825F50((unint64_t *)&v46);
    if ((_DWORD)v28 == 1)
    if (v26)
      v30 = 4075;
    else
      v30 = 4077;
    if (v26)
      v31 = 4072;
    else
      v31 = 4073;
    if (v29 == 16)
      v30 = v31;
    if (v26)
      v32 = 4070;
    else
      v32 = 4071;
    if (v26)
      v33 = 4066;
    else
      v33 = 4067;
    if (v29 == 16)
      v34 = v33;
    else
      v34 = v32;
    if (a5)
      v35 = v34;
    else
      v35 = v30;
    v47 = v46;
    LODWORD(v48) = 0;
    v36 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v41, v35, &v47, 1, 0, 0, 0);
    v38 = v37;
    LODWORD(v47) = 1;
    v48 = 0;
    v49 = 0;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    v48 = 0;
    v49 = a4;
    llvm::MachineInstr::addOperand(v38, v36, (const llvm::MachineOperand *)&v47);
    sub_1C554AE8C(v38, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
    v20 = (_QWORD *)((char *)v38 + 32);
  }
  v39 = *(unsigned int *)(*v20 + 4);
  v41 = &off_1E816EC08;
  if (v45[0])
    llvm::MetadataTracking::untrack((uint64_t)v45, v45[0]);
  return v39;
}

void sub_1C48B7414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C48B7468()
{
  unsigned int **v0;

  return **v0;
}

__int16 ***sub_1C48B7828(unint64_t *a1, const char *a2)
{
  unint64_t v3;
  const char *v5;
  int v6;
  __int16 ***v7;
  _UNKNOWN **v8;
  _UNKNOWN **v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  __int16 ***v12;
  __int16 ***v13;
  __int16 ***v14;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  _UNKNOWN **v26;
  _UNKNOWN **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0)
    goto LABEL_6;
  v16 = 3;
  if ((v3 & 1) == 0)
    v16 = 19;
  v17 = v3 >> v16;
  v18 = v3 & 0x8000000000000000 | (8 * v17) | 1;
  v19 = 0x8000000000000;
  v20 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v17) | 2;
  if ((v3 & 2) != 0)
    v19 = 0x800000000000000;
  else
    v20 = v18;
  v30 = v20;
  if ((v19 & v3) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    v3 = *a1;
  }
  v21 = (unsigned __int16)(v3 >> 3);
  v22 = sub_1C4825F50((unint64_t *)&v30);
  if ((_DWORD)v23 == 1)
  {
    v28 = v22;
    v22 = v28;
  }
  if (v22 == 8)
  {
    v30 = 129;
    v21 >>= 1;
  }
  v24 = sub_1C4825F50((unint64_t *)&v30);
  if ((_DWORD)v25 == 1)
  {
    v29 = v24;
    v24 = v29;
  }
  switch(v21)
  {
    case 4u:
      v26 = &off_1E7FA6098;
      v27 = &off_1E7FA61E8;
LABEL_54:
      if (v24 == 16)
        return (__int16 ***)v27;
      else
        return (__int16 ***)v26;
    case 3u:
      v26 = &off_1E7FA5FB8;
      v27 = &off_1E7FA5FF0;
      goto LABEL_54;
    case 2u:
      v26 = (_UNKNOWN **)&off_1E7FA6488;
      v27 = &off_1E7FA5F80;
      goto LABEL_54;
  }
LABEL_6:
  v6 = sub_1C4825F50(a1);
  if ((_DWORD)v5 == 1)
  v7 = &off_1E7FA5F10;
  v8 = &off_1E7FA6178;
  if (v6 != 288)
    v8 = &off_1E7FA61B0;
  v9 = &off_1E7FA6108;
  if (v6 != 192)
    v9 = &off_1E7FA6140;
  if (v6 <= 287)
    v8 = v9;
  v10 = &off_1E7FA6060;
  v11 = &off_1E7FA6098;
  if (v6 != 128)
    v11 = &off_1E7FA60D0;
  if (v6 != 112)
    v10 = v11;
  if (v6 <= 191)
    v8 = v10;
  v12 = (__int16 ***)&off_1E7FA6028;
  if (v6 != 80)
    v12 = (__int16 ***)&off_1E7FA5FB8;
  v13 = (__int16 ***)&off_1E7FA5FF0;
  if (v6 != 48)
    v13 = (__int16 ***)&off_1E7FA6488;
  if (v6 <= 79)
    v12 = v13;
  v14 = &off_1E7FA5F48;
  if (v6 == 16)
    v14 = &off_1E7FA5F10;
  if (v6 != 1)
    v7 = v14;
  if (v6 > 47)
    v7 = v12;
  if (v6 <= 111)
    return v7;
  else
    return (__int16 ***)v8;
}

void sub_1C48B7A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD v15[5];
  void *v16;
  uint64_t v17;
  _DWORD v18[14];
  _QWORD v19[5];
  char v20;
  void *__dst;
  uint64_t v22;
  _DWORD v23[14];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 96))
  {
    v19[0] = sub_1C48C16A8;
    v19[1] = 0;
    v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    v20 = 1;
    v7 = v23;
    __dst = v23;
    v22 = 0x600000000;
    if (&__dst == (void **)a5)
      goto LABEL_14;
    v8 = *(_DWORD *)(a5 + 8);
    if (!v8)
      goto LABEL_14;
    if (v8 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v23, *(unsigned int *)(a5 + 8), 8);
      v10 = *(unsigned int *)(a5 + 8);
      if (!(_DWORD)v10)
      {
LABEL_13:
        LODWORD(v22) = v8;
LABEL_14:
        v23[12] = *(_DWORD *)(a5 + 64);
        sub_1C48C2008(a1, (uint64_t)v19);
        v14 = __dst;
        goto LABEL_20;
      }
      v9 = __dst;
    }
    else
    {
      v9 = v23;
      v10 = *(unsigned int *)(a5 + 8);
    }
    memcpy(v9, *(const void **)a5, 8 * v10);
    goto LABEL_13;
  }
  v15[0] = sub_1C48C2128;
  v15[1] = 0;
  v15[2] = a2;
  v15[3] = a3;
  v7 = v18;
  v15[4] = a4;
  v16 = v18;
  v17 = 0x600000000;
  if (&v16 != (void **)a5)
  {
    v11 = *(_DWORD *)(a5 + 8);
    if (v11)
    {
      if (v11 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, *(unsigned int *)(a5 + 8), 8);
        v13 = *(unsigned int *)(a5 + 8);
        if (!(_DWORD)v13)
        {
LABEL_18:
          LODWORD(v17) = v11;
          goto LABEL_19;
        }
        v12 = v16;
      }
      else
      {
        v12 = v18;
        v13 = *(unsigned int *)(a5 + 8);
      }
      memcpy(v12, *(const void **)a5, 8 * v13);
      goto LABEL_18;
    }
  }
LABEL_19:
  v18[12] = *(_DWORD *)(a5 + 64);
  sub_1C48C2A00(a1, (uint64_t)v15);
  v14 = v16;
LABEL_20:
  if (v14 != v7)
    free(v14);
}

void sub_1C48B7C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD v15[5];
  void *v16;
  uint64_t v17;
  _DWORD v18[14];
  _QWORD v19[5];
  char v20;
  void *__dst;
  uint64_t v22;
  _DWORD v23[14];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 96))
  {
    v19[0] = sub_1C48C16A8;
    v19[1] = 0;
    v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    v20 = 0;
    v7 = v23;
    __dst = v23;
    v22 = 0x600000000;
    if (&__dst == (void **)a5)
      goto LABEL_14;
    v8 = *(_DWORD *)(a5 + 8);
    if (!v8)
      goto LABEL_14;
    if (v8 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v23, *(unsigned int *)(a5 + 8), 8);
      v10 = *(unsigned int *)(a5 + 8);
      if (!(_DWORD)v10)
      {
LABEL_13:
        LODWORD(v22) = v8;
LABEL_14:
        v23[12] = *(_DWORD *)(a5 + 64);
        sub_1C48C2008(a1, (uint64_t)v19);
        v14 = __dst;
        goto LABEL_20;
      }
      v9 = __dst;
    }
    else
    {
      v9 = v23;
      v10 = *(unsigned int *)(a5 + 8);
    }
    memcpy(v9, *(const void **)a5, 8 * v10);
    goto LABEL_13;
  }
  v15[0] = sub_1C48C2128;
  v15[1] = 0;
  v15[2] = a2;
  v15[3] = a3;
  v7 = v18;
  v15[4] = a4;
  v16 = v18;
  v17 = 0x600000000;
  if (&v16 != (void **)a5)
  {
    v11 = *(_DWORD *)(a5 + 8);
    if (v11)
    {
      if (v11 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, *(unsigned int *)(a5 + 8), 8);
        v13 = *(unsigned int *)(a5 + 8);
        if (!(_DWORD)v13)
        {
LABEL_18:
          LODWORD(v17) = v11;
          goto LABEL_19;
        }
        v12 = v16;
      }
      else
      {
        v12 = v18;
        v13 = *(unsigned int *)(a5 + 8);
      }
      memcpy(v12, *(const void **)a5, 8 * v13);
      goto LABEL_18;
    }
  }
LABEL_19:
  v18[12] = *(_DWORD *)(a5 + 64);
  sub_1C48C2A00(a1, (uint64_t)v15);
  v14 = v16;
LABEL_20:
  if (v14 != v7)
    free(v14);
}

void sub_1C48B7DE4(unsigned int *a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  BOOL v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  int v8;
  __int128 v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int RegSizeInBits;
  void *v14[2];
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  v3 = a1[20];
  if (v3)
    v4 = v3 == 2;
  else
    v4 = 1;
  if (!v4)
    return;
  v14[0] = v15;
  v14[1] = (void *)0x200000000;
  if (!a2)
  {
    sub_1C485C2F0();
LABEL_22:
    *((_BYTE *)v2 + 32) = 1;
LABEL_9:
    v8 = *((unsigned __int8 *)v2 + 72);
    v9 = v5[3];
    *(_OWORD *)(v2 + 10) = v5[2];
    *(_OWORD *)(v2 + 14) = v9;
    if (!v8)
      *((_BYTE *)v2 + 72) = 1;
    goto LABEL_11;
  }
  v2 = a1;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, void **))(*(_QWORD *)a2 + 48))(a2, a1, v14))
  {
    v5 = v14[0];
    v6 = *((unsigned __int8 *)v2 + 32);
    v7 = *((_OWORD *)v14[0] + 1);
    *(_OWORD *)v2 = *(_OWORD *)v14[0];
    *((_OWORD *)v2 + 1) = v7;
    if (v6)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_11:
  v2[20] = 1;
  v10 = *v2;
  if (*v2 == 7)
  {
    if (v2[4] == 64)
      v2[20] = 2;
    RegSizeInBits = dword_1C65ED588[((v10 >> 8) & 0xFFF) - 1];
  }
  else
  {
    v11 = v2[1];
    if (v11 - 1 <= 0x3FFFFFFE)
    {
      v12 = *((_QWORD *)v2 + 13);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v12 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*((_QWORD *)v2 + 14), v11, v12)+ 24)+ *(_DWORD *)(v12 + 272)* ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*((_QWORD *)v2 + 13), v11, *((_QWORD *)v2 + 12));
    }
  }
  v2[22] = RegSizeInBits;
  if (v14[0] != v15)
    free(v14[0]);
}

void sub_1C48B7F84(llvm::MachineFunction **a1, uint64_t a2)
{
  __int128 v4;
  llvm::MachineInstr *v5;
  llvm::MachineFunction *v6;
  const llvm::MachineOperand *v7;
  __int128 v8;
  llvm::MachineInstr *v9;
  llvm::MachineFunction *v10;
  const llvm::MachineOperand *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v4;
  v6 = *a1;
  v5 = a1[1];
  if (LOBYTE(v15[0]))
  {
    v7 = (const llvm::MachineOperand *)v15;
  }
  else
  {
    *((_QWORD *)&v12 + 1) = 0;
    v13 = 0uLL;
    LODWORD(v12) = 0;
    DWORD1(v12) = DWORD1(v15[0]);
    v7 = (const llvm::MachineOperand *)&v12;
  }
  llvm::MachineInstr::addOperand(v5, v6, v7);
  v8 = *(_OWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 40);
  v13 = v8;
  v14 = *(_QWORD *)(a2 + 72);
  if ((_BYTE)v14)
  {
    v10 = *a1;
    v9 = a1[1];
    if ((_BYTE)v12)
    {
      v11 = (const llvm::MachineOperand *)&v12;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v16[0] = 0;
      v16[1] = DWORD1(v12);
      v19 = 0;
      v11 = (const llvm::MachineOperand *)v16;
    }
    llvm::MachineInstr::addOperand(v9, v10, v11);
  }
}

uint64_t sub_1C48B8030(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  llvm::MachineFunction *v41;
  llvm::MachineInstr *v42;
  llvm::MachineInstr *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  llvm::MachineFunction *v47;
  llvm::MachineInstr *v48;
  llvm::MachineInstr *v49;
  uint64_t v50;
  llvm::detail::DoubleAPFloat *v51;
  void *v52;
  uint64_t (***v53)();
  uint64_t (**v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (**(unsigned __int16 **)(a1 + 16) - 65 > 1)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40);
  v9 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 68), v8);
  v11 = v10;
  if (v10)
  {
    v12 = v9;
    goto LABEL_4;
  }
  v27 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 68);
  if ((int)v27 >= 0)
    v28 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v27);
  else
    v28 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  v29 = *v28;
  if ((*(_BYTE *)(v29 + 3) & 1) == 0)
    v29 = *(_QWORD *)(v29 + 24);
  v30 = *(_QWORD *)(v29 + 8);
  if (**(_WORD **)(v30 + 16) != 121)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 48);
  if (!result)
    return result;
  v52 = *(void **)(result + 32);
  v51 = (llvm::detail::DoubleAPFloat *)(result + 32);
  if (v52 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v51, (unsigned int *)&v54);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v51, (unsigned int *)&v54);
  if (v55 >= 0x41)
    v53 = (uint64_t (***)())v54;
  else
    v53 = &v54;
  v12 = (uint64_t)*v53;
  if (v55 >= 0x41 && v54)
    MEMORY[0x1CAA32F9C]();
LABEL_4:
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_DWORD *)(v13 + 4);
  if (v14 < 0 && (v14 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v14 & 0x7FFFFFFF)) == 257;
    v15 = v24;
    v16 = 0xFFFFLL;
    if (v24)
      v16 = 0xFFFFFFFFLL;
  }
  else
  {
    v15 = 0;
    v16 = 0xFFFFLL;
  }
  v17 = *(_DWORD *)(v13 + 36);
  v18 = v16 & ~v12;
  if (v18 <= 0xFF)
  {
    v19 = v17;
    v20 = *(_QWORD *)(a1 + 24);
    v62 = 0;
    v21 = *(_QWORD *)(v20 + 32);
    v54 = &off_1E816EC08;
    v55 = v21;
    v57 = *(_QWORD *)(v21 + 40);
    v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 16) + 104))(*(_QWORD *)(v21 + 16));
    v22 = *(_QWORD *)(a1 + 24);
    v60 = a1;
    v61 = 0;
    v58 = 0;
    v59 = v22;
    if ((unsigned __int8 **)(a1 + 56) != &v58)
    {
      v23 = *(unsigned __int8 **)(a1 + 56);
      v58 = v23;
      if (v23)
        llvm::MetadataTracking::track((uint64_t)&v58, v23, 2);
    }
    if (**(_WORD **)(a1 + 16) == 65)
    {
      v24 = !v15;
      if (a2)
      {
        v25 = 376;
        v26 = 366;
      }
      else
      {
        v25 = 389;
        v26 = 379;
      }
    }
    else
    {
      v24 = !v15;
      if (a2)
      {
        v25 = 4765;
        v26 = 4755;
      }
      else
      {
        v25 = 4778;
        v26 = 4768;
      }
    }
    if (v24)
      v40 = v25;
    else
      v40 = v26;
    LODWORD(v68) = v14;
    v69 = 1;
    v41 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v54, v40, &v68, 1, 0, 0, 0);
    v43 = v42;
    v63 = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v63);
    v63 = 1;
    v65 = 0;
    v66 = v18;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v63);
    v65 = 0;
    v66 = 0;
    v63 = 0;
    v64 = v19;
    v67 = 0;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v63);
    v63 = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v63);
    v44 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v44 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v44 = a1;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v44 + 8));
    sub_1C554AE8C(v43, a3, a4);
    v54 = &off_1E816EC08;
    v45 = v58;
    if (!v58)
      return 1;
    goto LABEL_53;
  }
  result = 0;
  if (!v11 && v12 <= 255)
  {
    v32 = v17;
    v33 = *(_QWORD *)(a1 + 24);
    v62 = 0;
    v34 = *(_QWORD *)(v33 + 32);
    v54 = &off_1E816EC08;
    v55 = v34;
    v57 = *(_QWORD *)(v34 + 40);
    v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 104))(*(_QWORD *)(v34 + 16));
    v35 = *(_QWORD *)(a1 + 24);
    v60 = a1;
    v61 = 0;
    v58 = 0;
    v59 = v35;
    if ((unsigned __int8 **)(a1 + 56) != &v58)
    {
      v36 = *(unsigned __int8 **)(a1 + 56);
      v58 = v36;
      if (v36)
        llvm::MetadataTracking::track((uint64_t)&v58, v36, 2);
    }
    if (**(_WORD **)(a1 + 16) == 65)
    {
      v37 = !v15;
      if (a2)
      {
        v38 = 410;
        v39 = 398;
      }
      else
      {
        v38 = 429;
        v39 = 417;
      }
    }
    else
    {
      v37 = !v15;
      if (a2)
      {
        v38 = 4799;
        v39 = 4787;
      }
      else
      {
        v38 = 4818;
        v39 = 4806;
      }
    }
    if (v37)
      v46 = v38;
    else
      v46 = v39;
    LODWORD(v68) = v14;
    v69 = 1;
    v47 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v54, v46, &v68, 1, 0, 0, 0);
    v49 = v48;
    v63 = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v48, v47, (const llvm::MachineOperand *)&v63);
    v65 = 0;
    v66 = 0;
    v63 = 0;
    v64 = v32;
    v67 = 0;
    llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v63);
    v63 = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v63);
    v63 = 1;
    v65 = 0;
    v66 = v12;
    llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v63);
    v50 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v50 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v50 = a1;
        do
          v50 = *(_QWORD *)(v50 + 8);
        while ((*(_WORD *)(v50 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v50 + 8));
    sub_1C554AE8C(v49, a3, a4);
    v54 = &off_1E816EC08;
    v45 = v58;
    if (!v58)
      return 1;
LABEL_53:
    llvm::MetadataTracking::untrack((uint64_t)&v58, v45);
    return 1;
  }
  return result;
}

void sub_1C48B85B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;

  *(_DWORD *)(a1 + 152) = 0;
  if (*(_DWORD *)(a1 + 156))
  {
    v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 144, a1 + 160, 1uLL, 8);
    v4 = *(unsigned int *)(a1 + 152);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 152);
  v5 = (char *)&loc_1C48B8700
     + 4 * word_1C646B364[*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)];
  __asm { BR              X9 }
}

void sub_1C48BA634(llvm::MachineFunction ***a1, uint64_t a2)
{
  llvm::MachineFunction **v3;
  __int128 v4;
  llvm::MachineInstr *v5;
  llvm::MachineFunction *v6;
  __int128 v7;
  uint64_t v8;
  llvm::MachineFunction **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _OWORD v19[2];
  void *v20[2];
  __int128 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a2 + 80) >= 4)
  {
    v3 = *a1;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v20 = *(_OWORD *)a2;
    v21 = v4;
    v6 = *v3;
    v5 = v3[1];
LABEL_5:
    llvm::MachineInstr::addOperand(v5, v6, (const llvm::MachineOperand *)v20);
    return;
  }
  v7 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v7;
  v8 = (uint64_t)a1[2];
  if (*(_BYTE *)a1[1])
  {
    v9 = *a1;
    llvm::MachineInstr::addOperand(v9[1], *v9, (const llvm::MachineOperand *)v19);
    v6 = *v9;
    v5 = v9[1];
    LODWORD(v20[0]) = 1;
    v20[1] = 0;
    *(_QWORD *)&v21 = 0;
    goto LABEL_5;
  }
  sub_1C48A8640(v8, (uint64_t)v19, (uint64_t)v20);
  if (LODWORD(v20[1]))
  {
    v13 = 32 * LODWORD(v20[1]);
    v14 = (char *)v20[0] + 24;
    do
    {
      if (!*v14)
        sub_1C485C2F0();
      (*(void (**)(_QWORD, llvm::MachineFunction **))(*(_QWORD *)*v14 + 48))(*v14, *a1);
      v14 += 4;
      v13 -= 32;
    }
    while (v13);
  }
  if (v22)
  {
    v15 = (char *)v20[0];
    if (LODWORD(v20[1]))
    {
      v16 = 32 * LODWORD(v20[1]);
      while (1)
      {
        v17 = *(char **)&v15[v16 - 8];
        if (&v15[v16 - 32] == v17)
          break;
        if (v17)
        {
          v18 = 5;
          goto LABEL_18;
        }
LABEL_19:
        v16 -= 32;
        if (!v16)
        {
          v15 = (char *)v20[0];
          goto LABEL_21;
        }
      }
      v17 = &v15[v16 - 32];
      v18 = 4;
LABEL_18:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 8 * v18))(v17, v10, v11, v12);
      goto LABEL_19;
    }
LABEL_21:
    if (v15 != (char *)&v21)
      free(v15);
  }
}

void sub_1C48BA7A4(uint64_t **a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  llvm::MachineFunction **v19;
  llvm::MachineInstr *v20;
  llvm::MachineFunction *v21;
  llvm::MachineInstr *v22;
  llvm::MachineFunction *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v44;
  int v45;
  const char *v46;
  __int16 ***v47;
  llvm::MachineFunction *v48;
  llvm::MachineInstr *v49;
  llvm::MachineInstr *v50;
  llvm::MachineFunction **v51;
  int v52;
  llvm::MachineInstr *v53;
  llvm::MachineFunction *v54;
  llvm::MachineInstr *v55;
  llvm::MachineFunction *v56;
  int v57;
  unint64_t v58;
  uint64_t (**v59)();
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 ***v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a3 == 5)
  {
    v6 = **a1;
    v7 = *(_QWORD *)(v6 + 24);
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v8 = *(_QWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    v59 = &off_1E816EC08;
    *(_QWORD *)&v60 = v8;
    v61 = v9;
    *((_QWORD *)&v60 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 104))(*(_QWORD *)(v8 + 16));
    *((_QWORD *)&v62 + 1) = v6;
    *(_QWORD *)&v63 = 0;
    *(_QWORD *)&v62 = *(_QWORD *)(v6 + 24);
    *((_QWORD *)&v62 + 1) = v6;
    if ((__int128 *)(v6 + 56) != (__int128 *)((char *)&v61 + 8))
    {
      v10 = *(unsigned __int8 **)(v6 + 56);
      *((_QWORD *)&v61 + 1) = v10;
      if (v10)
        llvm::MetadataTracking::track((uint64_t)&v61 + 8, v10, 2);
    }
    v11 = a1[1];
    v12 = *(unsigned int *)(a4 + 4);
    if ((v12 & 0x80000000) != 0 && (v13 = v12 & 0x7FFFFFFF, (v12 & 0x7FFFFFFF) < *((_DWORD *)v11 + 108)))
    {
      v14 = *(_QWORD *)(v11[53] + 8 * v13);
      v58 = v14;
      v15 = *(_QWORD *)(v11[3] + 16 * v13 + 8);
      if ((*(_BYTE *)(v15 + 3) & 1) == 0)
        v15 = *(_QWORD *)(v15 + 24);
      v16 = *(_QWORD *)(v15 + 8);
      if (**(_WORD **)(v16 + 16) == 121)
        v17 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 48);
      else
        v17 = 0;
      if (v14 == 129)
        v18 = 16;
      else
        v18 = 32;
    }
    else
    {
      v58 = 0;
      v24 = v11[3];
      v25 = v11[34] + 8 * v12;
      if ((int)v12 >= 0)
        v26 = (uint64_t *)v25;
      else
        v26 = (uint64_t *)(v24 + 16 * (v12 & 0x7FFFFFFF) + 8);
      v27 = *v26;
      if ((*(_BYTE *)(v27 + 3) & 1) == 0)
        v27 = *(_QWORD *)(v27 + 24);
      v28 = *(_QWORD *)(v27 + 8);
      if (**(_WORD **)(v28 + 16) == 121)
        v17 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 48);
      else
        v17 = 0;
      v18 = 32;
    }
    v29 = *(_QWORD *)(v17 + 32);
    if ((_UNKNOWN *)v29 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v70, (const llvm::detail::DoubleAPFloat *)(v17 + 32));
    }
    else
    {
      v70 = *(_QWORD *)(v17 + 32);
      if ((*(_DWORD *)(v29 + 8) + 64) >= 0x80)
        v71 = (uint64_t *)operator new[]();
      v30 = *(_BYTE *)(v17 + 52);
      v31 = v30 & 7;
      v73 = v73 & 0xF0 | v30 & 0xF;
      v72 = *(_DWORD *)(v17 + 48);
      v33 = (v30 & 6) != 0 && v31 != 3;
      if (v31 == 1 || v33)
      {
        v34 = *(unsigned int *)(v70 + 8);
        if ((v34 - 64) <= 0xFFFFFF7F)
          v35 = v71;
        else
          v35 = (uint64_t *)&v71;
        v38 = *(uint64_t **)(v17 + 40);
        v37 = (uint64_t *)(v17 + 40);
        v36 = v38;
        if ((*(_DWORD *)(*(v37 - 1) + 8) - 64) >= 0xFFFFFF80)
          v36 = v37;
        if (v34 <= 0xFFFFFFBF)
        {
          v39 = (unint64_t)(v34 + 64) >> 6;
          do
          {
            v40 = *v36++;
            *v35++ = v40;
            --v39;
          }
          while (v39);
        }
      }
    }
    if ((_UNKNOWN *)v70 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v70, (unsigned int *)&v64);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v70, (unsigned int *)&v64);
    v41 = (uint64_t *)&v64;
    if (v65 >= 0x41)
      v41 = v64;
    v42 = *v41;
    if (v65 >= 0x41 && v64 != 0)
      MEMORY[0x1CAA32F9C]();
    if (v18 == 16)
      v44 = 4073;
    else
      v44 = 4077;
    v45 = sub_1C4825F50(&v58);
    if ((_DWORD)v46 == 1)
    {
      v57 = v45;
      v45 = v57;
    }
    if (v45 > 111)
    {
      if (v45 <= 191)
      {
        if (v45 == 112)
        {
          v47 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v45 == 128)
        {
          v47 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v47 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v45 > 287)
      {
        if (v45 == 288)
          v47 = (__int16 ***)&off_1E7FA6178;
        else
          v47 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v45 == 192)
      {
        v47 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v47 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v45 <= 47)
    {
      v47 = &off_1E7FA5F10;
      if (v45 != 1 && v45 != 16)
        v47 = &off_1E7FA5F48;
    }
    else if (v45 > 79)
    {
      if (v45 == 80)
        v47 = (__int16 ***)&off_1E7FA6028;
      else
        v47 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v45 == 48)
    {
      v47 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v47 = (__int16 ***)&off_1E7FA6488;
    }
    v68 = v47;
    v69 = 2;
    v48 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v59, v44, (uint64_t *)&v68, 1, 0, 0, 0);
    v50 = v49;
    LODWORD(v64) = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v64);
    LODWORD(v64) = 1;
    v65 = 0;
    v66 = v42;
    llvm::MachineInstr::addOperand(v50, v48, (const llvm::MachineOperand *)&v64);
    v51 = (llvm::MachineFunction **)a1[2];
    v52 = *(_DWORD *)(*((_QWORD *)v50 + 4) + 4);
    v54 = *v51;
    v53 = v51[1];
    v65 = 0;
    v66 = 0;
    LODWORD(v64) = 0;
    HIDWORD(v64) = v52;
    v67 = 0;
    llvm::MachineInstr::addOperand(v53, v54, (const llvm::MachineOperand *)&v64);
    v56 = *v51;
    v55 = v51[1];
    LODWORD(v64) = 1;
    v65 = 0;
    v66 = 0;
    llvm::MachineInstr::addOperand(v55, v56, (const llvm::MachineOperand *)&v64);
    if ((_UNKNOWN *)v70 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v71);
    }
    else if ((*(_DWORD *)(v70 + 8) - 64) <= 0xFFFFFF7F && v71)
    {
      MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    }
    v59 = &off_1E816EC08;
    if (*((_QWORD *)&v61 + 1))
      llvm::MetadataTracking::untrack((uint64_t)&v61 + 8, *((unsigned __int8 **)&v61 + 1));
  }
  else
  {
    v19 = (llvm::MachineFunction **)a1[2];
    v21 = *v19;
    v20 = v19[1];
    v60 = 0uLL;
    LODWORD(v59) = 0;
    HIDWORD(v59) = a2;
    *(_QWORD *)&v61 = 0;
    llvm::MachineInstr::addOperand(v20, v21, (const llvm::MachineOperand *)&v59);
    v23 = *v19;
    v22 = v19[1];
    LODWORD(v59) = 1;
    v60 = 0uLL;
    llvm::MachineInstr::addOperand(v22, v23, (const llvm::MachineOperand *)&v59);
  }
}

void sub_1C48BAD50(llvm::MachineFunction ***a1, uint64_t a2)
{
  llvm::MachineFunction **v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  llvm::MachineFunction **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _OWORD v20[2];
  void *v21[2];
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 80) == 5)
  {
    v3 = *a1;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v21 = *(_OWORD *)a2;
    v22 = v4;
    llvm::MachineInstr::addOperand(v3[1], *v3, (const llvm::MachineOperand *)v21);
    return;
  }
  v5 = (uint64_t)a1[2];
  v6 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v6;
  if ((DWORD1(v20[0]) & 0x80000000) == 0
    || (v7 = a1[1], v8 = DWORD1(v20[0]) & 0x7FFFFFFF, v8 >= *((_DWORD *)v7 + 108))
    || *((_QWORD *)v7[53] + v8) != 257)
  {
    sub_1C48A725C(v5, (uint64_t)v20, (uint64_t)v21);
    if (LODWORD(v21[1]))
    {
      v15 = 32 * LODWORD(v21[1]);
      v16 = (char *)v21[0] + 24;
      while (*v16)
      {
        (*(void (**)(_QWORD, llvm::MachineFunction **))(*(_QWORD *)*v16 + 48))(*v16, *a1);
        v16 += 4;
        v15 -= 32;
        if (!v15)
          goto LABEL_24;
      }
LABEL_37:
      sub_1C485C2F0();
    }
LABEL_24:
    if (!v23)
      return;
    v11 = (char *)v21[0];
    if (!LODWORD(v21[1]))
    {
LABEL_34:
      if (v11 != (char *)&v22)
        free(v11);
      return;
    }
    v17 = 32 * LODWORD(v21[1]);
    while (1)
    {
      v18 = *(char **)&v11[v17 - 8];
      if (&v11[v17 - 32] == v18)
        break;
      if (v18)
      {
        v19 = 5;
        goto LABEL_31;
      }
LABEL_32:
      v17 -= 32;
      if (!v17)
      {
LABEL_33:
        v11 = (char *)v21[0];
        goto LABEL_34;
      }
    }
    v18 = &v11[v17 - 32];
    v19 = 4;
LABEL_31:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
    goto LABEL_32;
  }
  sub_1C48A74F4(v5, (uint64_t)v20, (uint64_t)v21);
  if (LODWORD(v21[1]))
  {
    v9 = 32 * LODWORD(v21[1]);
    v10 = (char *)v21[0] + 24;
    while (*v10)
    {
      (*(void (**)(_QWORD, llvm::MachineFunction **))(*(_QWORD *)*v10 + 48))(*v10, *a1);
      v10 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_10:
  if (v23)
  {
    v11 = (char *)v21[0];
    if (LODWORD(v21[1]))
    {
      v12 = 32 * LODWORD(v21[1]);
      while (1)
      {
        v13 = *(char **)&v11[v12 - 8];
        if (&v11[v12 - 32] == v13)
          break;
        if (v13)
        {
          v14 = 5;
          goto LABEL_17;
        }
LABEL_18:
        v12 -= 32;
        if (!v12)
          goto LABEL_33;
      }
      v13 = &v11[v12 - 32];
      v14 = 4;
LABEL_17:
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
      goto LABEL_18;
    }
    goto LABEL_34;
  }
}

uint64_t sub_1C48BAF60(uint64_t a1)
{
  int v2;
  uint64_t Metadata;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v2 != 3 || (Metadata = llvm::Value::getMetadata(a1, "agx.bind", 8uLL)) == 0)
  {
LABEL_19:
    if (v2)
      v13 = 10;
    else
      v13 = 11;
    if ((*(_BYTE *)(a1 + 33) & 0x1C) != 0)
      return 13;
    else
      return v13;
  }
  v4 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v6 = *v4;
  v5 = v4[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 128) + 24) + 8) != 17)
    goto LABEL_8;
  if (*(_BYTE *)v5 != 1 || (v7 = *(_QWORD *)(v5 + 128), *(_BYTE *)(v7 + 16) != 16))
  {
    v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
LABEL_8:
    v7 = *(_QWORD *)(v5 + 128);
  }
  v8 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = *(_DWORD *)v8;
  result = 12;
  v12 = (v9 - 93) <= 0x15 && ((1 << (v9 - 93)) & 0x300001) != 0 || v9 == 18;
  if (!v12 && v9 != 43)
    goto LABEL_19;
  return result;
}

uint64_t sub_1C48BB054(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v12;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 129 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v12 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36);
  result = sub_1C48BB12C(a1, a2, &v12);
  if ((_DWORD)result)
  {
    v8 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 68), a2);
    if (v9)
    {
      **(_QWORD **)(a1 + 16) = v8;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C48BB12C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    return 0;
  if (**(_WORD **)(v7 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  v9 = sub_1C554C050(*(_DWORD *)(v8 + 68), a2);
  if (!v10)
    return 0;
  **(_QWORD **)(a1 + 8) = v9;
  return 1;
}

uint64_t sub_1C48BB1EC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      sub_1C48AAD34(a1, a2);
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x400000000;
      if (*(_DWORD *)(a2 + 8))
        sub_1C48AAD34(a1, a2);
      *(_BYTE *)(a1 + 144) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 144))
  {
    sub_1C48AB068((char **)a1);
    *(_BYTE *)(a1 + 144) = 0;
  }
  return a1;
}

uint64_t sub_1C48BB268(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  llvm::MachineInstr *v21;
  llvm::MachineInstr *v22;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  _BYTE v34[4];
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 ***v44;
  int v45;
  _DWORD v46[4];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)a1[1];
  if (!*(_BYTE *)(a5 + 32))
  {
    *(_DWORD *)a5 = 1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 32) = 1;
  }
  sub_1C48AA43C((uint64_t)v34, *a1, v13[10], v13[11], a6, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v29, *a1, v13[10], v13[11], a7, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v24, *a1, v13[10], v13[11], (unsigned __int8 *)a5, 0, 0, 0, 0);
  if (v28 == 32)
    v14 = 5;
  else
    v14 = 2;
  if ((v27 & 0xFFFFFFFE) == 4)
    v15 = 1;
  else
    v15 = v14;
  v46[0] = 5;
  v46[1] = v15;
  if (v38 == 32)
    v16 = 5;
  else
    v16 = 2;
  if ((v37 & 0xFFFFFFFE) == 4)
    v17 = 1;
  else
    v17 = v16;
  if (v33 == 32)
    v18 = 5;
  else
    v18 = 2;
  if ((v32 & 0xFFFFFFFE) == 4)
    v18 = 1;
  v46[2] = v17;
  v46[3] = v18;
  v19 = sub_1C4884024(a3, v46, 4, (_BYTE *)(v13[7] + 1328));
  v44 = &off_1E7FA5F48;
  v45 = 2;
  v20 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v19, &v44, 1, 0, 0, a4 | 0x100000000);
  v22 = v21;
  v39 = 1;
  v41 = 0;
  v42 = 0;
  llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v39);
  if (v27 < 4)
  {
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = v25;
    v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    v39 = 1;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v39 = 1;
    v41 = 0;
    v42 = v26;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  if (v37 < 4)
  {
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = v35;
    v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    v39 = 1;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v39 = 1;
    v41 = 0;
    v42 = v36;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  if (v32 < 4)
  {
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = v30;
    v43 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
    v39 = 1;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v39 = 1;
    v41 = 0;
    v42 = v31;
  }
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  v39 = 1;
  v41 = 0;
  v42 = 32;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v39);
  return *((_QWORD *)v22 + 4);
}

uint64_t sub_1C48BB578(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  llvm::MachineFunction *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  _BYTE v17[4];
  int v18;
  uint64_t v19;
  int v20;
  _BYTE v21[4];
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 ***v30;
  int v31;
  _DWORD v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)a1[1];
  sub_1C48AA43C((uint64_t)v21, *a1, v9[10], v9[11], a4, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v17, *a1, v9[10], v9[11], a5, 0, 0, 0, 0);
  if (v24 > 3)
    v10 = 1;
  else
    v10 = 5;
  v32[0] = 5;
  v32[1] = v10;
  if (v20 > 3)
    v11 = 1;
  else
    v11 = 5;
  v32[2] = v11;
  v12 = sub_1C4884024(45, v32, 3, (_BYTE *)(v9[7] + 1328));
  v30 = &off_1E7FA5F48;
  v31 = 2;
  v13 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12, &v30, 1, 0, 0, a3 | 0x100000000);
  v15 = v14;
  v25 = 1;
  v27 = 0;
  v28 = 0;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v25);
  if (v24 < 4)
  {
    v27 = 0;
    v28 = 0;
    v25 = 0;
    v26 = v22;
    v29 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
    v25 = 1;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v25 = 1;
    v27 = 0;
    v28 = v23;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
  if (v20 < 4)
  {
    v27 = 0;
    v28 = 0;
    v25 = 0;
    v26 = v18;
    v29 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
    v25 = 1;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v25 = 1;
    v27 = 0;
    v28 = v19;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v25);
  return *((_QWORD *)v15 + 4);
}

void sub_1C48BB780(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, int a8, int a9)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void (**v23)(_QWORD *);
  char *v24;
  __int128 v25;
  _QWORD *v26;
  void (**v27)(_QWORD *);
  char *v28;
  __int128 v29;
  _QWORD *v30;
  void (**v31)(_QWORD *);
  int v32;
  _BYTE *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unsigned int v44;
  uint64_t v45;
  llvm::MachineFunction *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  unsigned int v66[30];
  unsigned int v67[30];
  unsigned int v68[30];
  unsigned int v69[30];
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  llvm::MachineFunction *v76;
  uint64_t v77;
  _QWORD v78[4];

  v78[3] = *MEMORY[0x1E0C80C00];
  v16 = a2[1];
  v17 = *(_QWORD *)(v16 + 40);
  sub_1C48AA43C((uint64_t)v69, v17, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v68, v17, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a5, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v67, v17, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a6, 1, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v66, v17, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a7, 1, 0, 0, 0);
  v18 = operator new(0x28uLL);
  *v18 = &off_1E7FA16E8;
  v18[1] = sub_1C48AD47C;
  v19 = v18 + 1;
  v18[2] = 0;
  v18[3] = a1;
  v18[4] = v17;
  v20 = (char *)operator new(0x28uLL);
  *(_QWORD *)v20 = &off_1E7FA16E8;
  *(_OWORD *)(v20 + 8) = *(_OWORD *)(v18 + 1);
  *(_OWORD *)(v20 + 24) = *(_OWORD *)(v18 + 3);
  sub_1C48B7DE4(v69, (uint64_t)v20);
  (*(void (**)(char *))(*(_QWORD *)v20 + 40))(v20);
  v21 = (char *)operator new(0x28uLL);
  *(_QWORD *)v21 = &off_1E7FA16E8;
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v18 + 1);
  *(_OWORD *)(v21 + 24) = *(_OWORD *)(v18 + 3);
  v75 = v21;
  sub_1C48B7DE4(v68, (uint64_t)v21);
  v22 = v75;
  if (v75 == v74)
  {
    v23 = (void (**)(_QWORD *))(v74[0] + 32);
    v22 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_6;
    v23 = (void (**)(_QWORD *))(*v75 + 40);
  }
  (*v23)(v22);
LABEL_6:
  v24 = (char *)operator new(0x28uLL);
  *(_QWORD *)v24 = &off_1E7FA16E8;
  v25 = *(_OWORD *)(v18 + 3);
  *(_OWORD *)(v24 + 8) = *v19;
  *(_OWORD *)(v24 + 24) = v25;
  v73 = v24;
  sub_1C48B7DE4(v67, (uint64_t)v24);
  v26 = v73;
  if (v73 == v72)
  {
    v27 = (void (**)(_QWORD *))(v72[0] + 32);
    v26 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_11;
    v27 = (void (**)(_QWORD *))(*v73 + 40);
  }
  (*v27)(v26);
LABEL_11:
  v28 = (char *)operator new(0x28uLL);
  *(_QWORD *)v28 = &off_1E7FA16E8;
  v29 = *(_OWORD *)(v18 + 3);
  *(_OWORD *)(v28 + 8) = *v19;
  *(_OWORD *)(v28 + 24) = v29;
  v71 = v28;
  sub_1C48B7DE4(v66, (uint64_t)v28);
  v30 = v71;
  if (v71 == v70)
  {
    v31 = (void (**)(_QWORD *))(v70[0] + 32);
    v30 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_16;
    v31 = (void (**)(_QWORD *))(*v71 + 40);
  }
  (*v31)(v30);
LABEL_16:
  if (a8)
    v32 = 5;
  else
    v32 = 2;
  v76 = (llvm::MachineFunction *)v78;
  v77 = 0x500000000;
  sub_1C4893E04((char *)&v76, 1uLL, v32);
  v33 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), *(_QWORD *)v16);
  if ((int)v69[20] >= 4)
  {
    v35 = v77;
    v36 = HIDWORD(v77);
    v34 = 1;
  }
  else
  {
    if (v69[22] == 32)
      v34 = 5;
    else
      v34 = 2;
    v35 = v77;
    v36 = HIDWORD(v77);
  }
  if (v35 >= v36)
  {
    v62 = v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v35 + 1, 4);
    v33 = v62;
    v35 = v77;
  }
  *((_DWORD *)v76 + v35) = v34;
  v37 = (v77 + 1);
  LODWORD(v77) = v77 + 1;
  if ((int)v68[20] >= 4)
  {
    v39 = HIDWORD(v77);
    v38 = 1;
  }
  else
  {
    if (v68[22] == 32)
      v38 = 5;
    else
      v38 = 2;
    v39 = HIDWORD(v77);
  }
  if (v37 >= v39)
  {
    v63 = v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v37 + 1, 4);
    v33 = v63;
    LODWORD(v37) = v77;
  }
  *((_DWORD *)v76 + v37) = v38;
  v40 = (v77 + 1);
  LODWORD(v77) = v77 + 1;
  if ((int)v67[20] > 3)
    v41 = 1;
  else
    v41 = v32;
  if (v40 >= HIDWORD(v77))
  {
    v64 = v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v40 + 1, 4);
    v33 = v64;
    LODWORD(v40) = v77;
  }
  *((_DWORD *)v76 + v40) = v41;
  v42 = (v77 + 1);
  LODWORD(v77) = v77 + 1;
  if ((int)v66[20] > 3)
    v32 = 1;
  if (v42 >= HIDWORD(v77))
  {
    v65 = v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v42 + 1, 4);
    v33 = v65;
    LODWORD(v42) = v77;
  }
  *((_DWORD *)v76 + v42) = v32;
  LODWORD(v77) = v77 + 1;
  v43 = v76;
  v44 = sub_1C4884024(44, v76, v77, v33);
  if (v43 != (llvm::MachineFunction *)v78)
    free(v43);
  v46 = sub_1C55437B8(a2, v44);
  v47 = v45;
  v48 = (unint64_t *)a2[6];
  v49 = *(_QWORD *)(a2[5] + 40);
  *(_QWORD *)(v45 + 24) = v49;
  v50 = *(_QWORD *)(v49 + 32);
  v51 = *(unsigned int *)(v45 + 40);
  if ((_DWORD)v51)
  {
    v55 = *(_QWORD *)(v45 + 32);
    v56 = *(_QWORD *)(v50 + 40);
    v57 = 32 * v51;
    do
    {
      if (!*(_BYTE *)v55)
      {
        v58 = *(unsigned int *)(v55 + 4);
        if ((int)v58 >= 0)
          v59 = (uint64_t *)(*(_QWORD *)(v56 + 272) + 8 * v58);
        else
          v59 = (uint64_t *)(*(_QWORD *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
        v60 = *v59;
        if (*v59)
        {
          v61 = *(_QWORD *)(v60 + 16);
          *(_QWORD *)(v60 + 16) = v55;
          *(_QWORD *)(v55 + 16) = v61;
          if ((*(_BYTE *)(v55 + 3) & 1) != 0)
          {
            *(_QWORD *)(v55 + 24) = v60;
          }
          else
          {
            *(_QWORD *)(v55 + 24) = 0;
            v59 = (uint64_t *)(v61 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v55 + 16) = v55;
          *(_QWORD *)(v55 + 24) = 0;
        }
        *v59 = v55;
      }
      v55 += 32;
      v57 -= 32;
    }
    while (v57);
  }
  v52 = *(_QWORD *)(v50 + 728);
  if (v52)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 24))(v52, v45);
  v53 = *v48 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = v53 | *(_QWORD *)v47 & 7;
  *(_QWORD *)(v47 + 8) = v48;
  *(_QWORD *)(v53 + 8) = v47;
  *v48 = *v48 & 7 | v47;
  v54 = a2[7];
  if (v54)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v47);
  v77 = 0;
  v78[0] = 0;
  v78[1] = 0;
  LODWORD(v76) = 0x1000000;
  HIDWORD(v76) = a9;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v46, (const llvm::MachineOperand *)&v76);
  LODWORD(v76) = 1;
  v77 = 0;
  v78[0] = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v46, (const llvm::MachineOperand *)&v76);
  LODWORD(v76) = 1;
  v77 = 0;
  v78[0] = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v46, (const llvm::MachineOperand *)&v76);
  v76 = v46;
  v77 = v47;
  sub_1C48B7F84(&v76, (uint64_t)v69);
  sub_1C48B7F84(&v76, (uint64_t)v68);
  sub_1C48B7F84(&v76, (uint64_t)v67);
  sub_1C48B7F84(&v76, (uint64_t)v66);
  operator delete(v18);
}

BOOL sub_1C48BBDAC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _BOOL8 v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  BOOL v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  BOOL v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  void **v35;
  uint64_t v36;
  BOOL v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  _OWORD v68[2];
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _QWORD v76[2];
  char v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  _OWORD v94[2];
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  char v107;
  _BYTE v108[2];
  unsigned __int8 v109;
  unsigned int v110;
  unsigned __int8 v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[64];
  void *v133;
  uint64_t v134;
  _QWORD v135[8];
  void *v136;
  uint64_t v137;
  _QWORD v138[8];
  void *v139;
  uint64_t v140;
  _QWORD v141[16];
  void *v142;
  uint64_t v143;
  _QWORD v144[19];

  v144[16] = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)v108, a3, a5);
  v107 = 0;
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))(*a1 + 48))(v94, a1, a4, a2, v115, v116, v117, &v107);
  v8 = 0;
  if (v107 || !v106)
    return v8;
  v93 = v102;
  v90 = v94[0];
  v91 = v94[1];
  v92 = v95;
  v87 = v96;
  v88 = v97;
  v89 = v98;
  v84 = v99;
  v85 = v100;
  v86 = v101;
  v81 = v103;
  v82 = v104;
  v83 = v105;
  v142 = v144;
  v143 = 0x400000000;
  v9 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v118);
  v10 = v110 + v121;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 200))(a1[1]);
  if (v109)
    v12 = v11;
  else
    v12 = 0;
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]);
  if (v120 == -1)
    v14 = 0;
  else
    v14 = v13;
  v15 = v14 & v12;
  if ((v127 & v119) == 0xFFFFFFFF)
    v15 = v12;
  if ((_DWORD)v10 == 2)
    v16 = ((v125 == -1) | ~(_BYTE)v14) & v15;
  else
    v16 = v15;
  if ((_DWORD)v10 != 1)
  {
    v137 = 0;
    v136 = 0;
    v138[0] = 0;
    if (!(_DWORD)v10)
    {
      v136 = v9;
      if ((v16 & 1) == 0)
      {
LABEL_70:
        v10 = 0;
        goto LABEL_71;
      }
      v22 = 0;
      v134 = 0;
      v133 = 0;
      v135[0] = 0;
      goto LABEL_53;
    }
    v18 = &v136;
    (*(void (**)(_QWORD *, void *, void **, uint64_t))(*a1 + 120))(a1, v9, &v136, v10);
    v19 = v10;
    do
    {
      if (!*v18)
      {
        (*(void (**)(_QWORD *, void *, void **, uint64_t))(*a1 + 80))(a1, v9, &v142, v10);
        goto LABEL_70;
      }
      ++v18;
      --v19;
    }
    while (v19);
    if ((v16 & 1) == 0)
      goto LABEL_60;
    v20 = v10;
LABEL_33:
    v21 = 0;
    v22 = 0;
    v134 = 0;
    v133 = 0;
    v135[0] = 0;
    while (1)
    {
      v139 = 0;
      v130 = 0;
      if (!(*(unsigned int (**)(_QWORD *, _QWORD, void **, void **))(*a1 + 128))(a1, *(&v136 + v21), &v139, &v130))
      {
        v139 = 0;
        v130 = 0;
        if (!(*(unsigned int (**)(_QWORD *, _QWORD, void **, void **))(*a1 + 136))(a1, *(&v136 + v21), &v139, &v130))break;
      }
      *(&v133 + v21) = v139;
      if (v22)
      {
        if (v22 != v130)
          break;
      }
      else
      {
        v22 = v130;
      }
      if (v20 == ++v21)
        goto LABEL_45;
    }
    if ((_DWORD)v10 != (_DWORD)v21)
      goto LABEL_60;
LABEL_45:
    v23 = &v133;
    do
    {
      v24 = (uint64_t)*v23++;
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 168))(&v139, a1, v24);
      v26 = v139 == 1 && v141[0] == 0xFFFFFFFFLL;
      v107 |= v26;
      v27 = (_OWORD *)sub_1C47C0F60((uint64_t)&v142, (unint64_t)&v139, 1);
      v28 = (char *)v142 + 32 * v143;
      v29 = v27[1];
      *v28 = *v27;
      v28[1] = v29;
      LODWORD(v143) = v143 + 1;
      --v20;
    }
    while (v20);
LABEL_53:
    (*(void (**)(void **__return_ptr, _QWORD *, void *))(*a1 + 168))(&v139, a1, v22);
    v31 = v139 == 1 && v141[0] == 0xFFFFFFFFLL;
    v107 |= v31;
    v10 = 1;
    v32 = (_OWORD *)sub_1C47C0F60((uint64_t)&v142, (unint64_t)&v139, 1);
    v33 = (char *)v142 + 32 * v143;
    v34 = v32[1];
    *v33 = *v32;
    v33[1] = v34;
    LODWORD(v143) = v143 + 1;
    goto LABEL_71;
  }
  if (v127 != -1)
  {
    if (v14)
      goto LABEL_17;
LABEL_31:
    v138[0] = 0;
    v137 = 0;
    v136 = v9;
    if ((v16 & 1) == 0)
      goto LABEL_60;
    goto LABEL_32;
  }
  if (v119 == -1)
    LOBYTE(v14) = 0;
  if ((v14 & 1) == 0)
    goto LABEL_31;
LABEL_17:
  if ((v124 & v126) == 0xFFFFFFFF)
    v17 = v16;
  else
    v17 = 0;
  v138[0] = 0;
  v137 = 0;
  v136 = v9;
  if ((v17 & 1) != 0)
  {
LABEL_32:
    v20 = 1;
    goto LABEL_33;
  }
LABEL_60:
  v35 = &v136;
  do
  {
    v36 = (uint64_t)*v35++;
    (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 168))(&v139, a1, v36);
    v38 = v139 == 1 && v141[0] == 0xFFFFFFFFLL;
    v107 |= v38;
    v39 = (_OWORD *)sub_1C47C0F60((uint64_t)&v142, (unint64_t)&v139, 1);
    v40 = (char *)v142 + 32 * v143;
    v41 = v39[1];
    *v40 = *v39;
    v40[1] = v41;
    LODWORD(v143) = v143 + 1;
    --v10;
  }
  while (v10);
LABEL_71:
  if (!v107)
  {
    v80 = -1;
    v139 = v141;
    v140 = 0x400000000;
    (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, unsigned int *, void **, char *))(*a1 + 256))(a1, v108, a4, a2, &v80, &v139, &v107);
    if (v107)
    {
      v8 = 0;
LABEL_103:
      if (v139 != v141)
        free(v139);
      goto LABEL_105;
    }
    v136 = v138;
    v137 = 0x200000000;
    if (v120 != -1 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]))
    {
      v42 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v120);
      (*(void (**)(_QWORD *, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v42, &v136, 0xFFFFFFFFLL);
    }
    if (v107)
    {
      v8 = 0;
LABEL_101:
      if (v136 != v138)
        free(v136);
      goto LABEL_103;
    }
    v43 = (v127 & v123) != -1;
    v133 = v135;
    v134 = 0x200000000;
    (*(void (**)(_QWORD *, _BYTE *, uint64_t, void **))(*a1 + 264))(a1, v108, a2, &v133);
    v44 = v111;
    v79 = -1;
    v45 = v122;
    v67 = v110;
    if (!v122 || v128 == -1)
    {
      if (!v122)
      {
LABEL_87:
        if (v122)
          v45 = 1;
        v66 = v45;
        v130 = v132;
        v131 = 0x200000000;
        if (v113 != -1)
        {
          v47 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v129);
          (*(void (**)(_QWORD *, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v47, &v130, 0xFFFFFFFFLL);
        }
        if (v107)
        {
          v8 = 0;
        }
        else
        {
          v65 = v43;
          (*(void (**)(_QWORD *, _BYTE *, uint64_t, void **, void **, _QWORD, void **, void **, void **))(*a1 + 272))(a1, v108, a2, &v142, &v139, v80, &v133, &v136, &v130);
          v78 = -1;
          if (v114 != -1)
          {
            v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
            (*(void (**)(_QWORD *, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v48, &v78, 0);
          }
          v64 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 200))(a1, v108, a2);
          v49 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 208))(a1, v108, a2);
          v50 = a1[1];
          v51 = v80;
          v61 = v113;
          v62 = v112;
          v63 = v79;
          v59 = v123 != -1;
          v60 = v109;
          v58 = v108[1];
          v52 = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)v50 + 104))(v50, v80, v108, v10);
          HIDWORD(v56) = v78;
          BYTE1(v56) = v49;
          LOBYTE(v56) = v64;
          HIBYTE(v55) = v58;
          BYTE2(v55) = v44 == 0;
          BYTE1(v55) = v59;
          LOBYTE(v55) = v65;
          v53 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, int *, char, uint64_t))(*(_QWORD *)v50 + 112))(v50, v51, v67, v62, v61, v60, v66, v63, v55, &v93, v52, v56);
          v74[0] = v90;
          v74[1] = v91;
          v75 = v92;
          v72[0] = v87;
          v72[1] = v88;
          v73 = v89;
          v70[0] = v84;
          v70[1] = v85;
          v71 = v86;
          v68[0] = v81;
          v68[1] = v82;
          v69 = v83;
          HIDWORD(v57) = v80;
          BYTE2(v57) = v49;
          BYTE1(v57) = v64;
          LOBYTE(v57) = v10;
          (*(void (**)(_QWORD *__return_ptr, _QWORD *, _BYTE *, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, _OWORD *, void *, _QWORD, void *, _QWORD, void *, _QWORD, void *, _QWORD, uint64_t, unsigned int))(*a1 + 88))(v76, a1, v108, a2, v53, v74, v72, v70, v68, v142, v143, v139, v140, v133, v134, v130, v131, v57, v79);
          v8 = v77 != 0;
          if (v77)
          {
            (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD *))(*a1 + 104))(a1, v108, a2, v76);
            (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*a1 + 112))(a1, v108, a2, v76[0], v76[1], v79, v78);
          }
        }
        if (v130 != v132)
          free(v130);
        if (v133 != v135)
          free(v133);
        goto LABEL_101;
      }
    }
    else
    {
      v46 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
      (*(void (**)(_QWORD *, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v46, &v79, 0);
      if (v79 < 4)
        goto LABEL_86;
    }
    v79 = 0;
LABEL_86:
    v45 = -1;
    goto LABEL_87;
  }
  v8 = 0;
LABEL_105:
  if (v142 != v144)
    free(v142);
  return v8;
}

void sub_1C48BC758(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[8];
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v3 = *a1 + 8;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v4 + 40);
  v41[0] = v2;
  v41[1] = v5;
  v41[2] = v3;
  memset(&v41[3], 0, 24);
  v41[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 184))(*(_QWORD *)(v4 + 16));
  v41[7] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16));
  v43 = v45;
  v44 = 0x400000000;
  v6 = a1[2];
  v7 = (_DWORD *)(v6 + 56);
  v8 = *(_DWORD *)(v6 + 56);
  if (v8)
  {
    do
    {
      v9 = *(_DWORD *)(v6 + 8);
      do
        v10 = *(_QWORD *)(*(_QWORD *)v6 - 8 + 8 * v9--);
      while (!v10);
      *(_DWORD *)(v6 + 8) = v9;
      v11 = *(_DWORD *)(v6 + 64);
      if (v11)
      {
        v12 = *(_QWORD *)(v6 + 48);
        v13 = v11 - 1;
        LODWORD(v14) = (v11 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (v10 == *v15)
        {
LABEL_10:
          *v15 = -8192;
          *v7 = v8 - 1;
          ++*(_DWORD *)(v6 + 60);
        }
        else
        {
          v17 = 1;
          while (v16 != -4096)
          {
            v18 = v14 + v17++;
            v14 = v18 & v13;
            v16 = *(_QWORD *)(v12 + 16 * v14);
            if (v10 == v16)
            {
              v15 = (uint64_t *)(v12 + 16 * v14);
              goto LABEL_10;
            }
          }
        }
      }
      v19 = **(unsigned __int16 **)(v10 + 16);
      if (v19 != 77 && v19 != 74 || (sub_1C49AB388((uint64_t)v41, v10) & 1) == 0)
      {
        v20 = v44;
        if (v44 >= (unint64_t)HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 8);
          v20 = v44;
        }
        *((_QWORD *)v43 + v20) = v10;
        LODWORD(v44) = v44 + 1;
      }
      v6 = a1[2];
      v7 = (_DWORD *)(v6 + 56);
      v8 = *(_DWORD *)(v6 + 56);
    }
    while (v8);
    v21 = (char *)v43;
    if ((_DWORD)v44)
    {
      v22 = (char *)v43 + 8 * v44;
      while (1)
      {
        v23 = a1[3];
        v25 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        v24 = v25;
        v42 = v25;
        v26 = *(_QWORD *)(v23 + 80);
        v27 = *(_DWORD *)(v23 + 8);
        v28 = *(_DWORD *)(v23 + 96);
        if (!v28)
          break;
        v29 = v28 - 1;
        v30 = v29 & ((v24 >> 4) ^ (v24 >> 9));
        v31 = (_QWORD *)(v26 + 16 * v30);
        v32 = *v31;
        if (*v31 != v24)
        {
          v33 = 0;
          v34 = 1;
          while (v32 != -4096)
          {
            if (v33)
              v35 = 0;
            else
              v35 = v32 == -8192;
            if (v35)
              v33 = v31;
            v36 = v30 + v34++;
            v30 = v36 & v29;
            v31 = (_QWORD *)(v26 + 16 * v30);
            v32 = *v31;
            if (*v31 == v24)
              goto LABEL_37;
          }
          if (v33)
            v37 = v33;
          else
            v37 = v31;
          goto LABEL_34;
        }
LABEL_37:
        if (v22 == v21)
        {
          v21 = (char *)v43;
          goto LABEL_40;
        }
      }
      v37 = 0;
LABEL_34:
      v38 = sub_1C48BE074(v23 + 80, (uint64_t)&v42, &v42, v37);
      *v38 = v42;
      *((_DWORD *)v38 + 2) = v27;
      v39 = v42;
      v40 = *(unsigned int *)(v23 + 8);
      if (v40 >= *(unsigned int *)(v23 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v40 + 1, 8);
        v40 = *(unsigned int *)(v23 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v23 + 8 * v40) = v39;
      ++*(_DWORD *)(v23 + 8);
      goto LABEL_37;
    }
LABEL_40:
    if (v21 != (char *)v45)
      free(v21);
  }
}

uint64_t sub_1C48BCA5C(uint64_t a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  llvm::MachineFunction *v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  llvm::MachineFunction *v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  llvm::MachineFunction *v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  llvm::MachineFunction *v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  llvm::MachineFunction *v111;
  unint64_t *v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  llvm::MachineFunction *v120;
  unint64_t *v121;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  llvm::MachineFunction *v132;
  unint64_t *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  llvm::MachineFunction *v152;
  unint64_t *v153;
  unint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  _BOOL4 v266;
  uint64_t (**v267)();
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  int v272;
  uint64_t v273;
  uint64_t v274;

  if (!a4)
    return 0;
  v17 = *(_QWORD *)(a1 + 24);
  v270 = 0u;
  v271 = 0u;
  v268 = 0u;
  v269 = 0u;
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(_QWORD *)(v18 + 40);
  v267 = &off_1E816EC08;
  *(_QWORD *)&v268 = v18;
  *(_QWORD *)&v269 = v19;
  *((_QWORD *)&v268 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 104))(*(_QWORD *)(v18 + 16));
  v20 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)&v270 + 1) = a1;
  *(_QWORD *)&v271 = 0;
  *((_QWORD *)&v269 + 1) = 0;
  *(_QWORD *)&v270 = v20;
  if ((__int128 *)(a1 + 56) != (__int128 *)((char *)&v269 + 8))
  {
    v21 = *(unsigned __int8 **)(a1 + 56);
    *((_QWORD *)&v269 + 1) = v21;
    if (v21)
      llvm::MetadataTracking::track((uint64_t)&v269 + 8, v21, 2);
  }
  v22 = a9;
  v23 = 1;
  if (a7 != 3 && a8)
    v23 = (a9 - 5) < 2;
  v266 = v23;
  if ((a3 & 0xFFFFFFFB) != 3)
  {
    v67 = a4 - 4;
    if ((a2 & 1) != 0 && v67 >= 0xFFFFFFFE)
    {
      v68 = a9 - 7;
      if (!a6)
      {
        if (v68 >= 3)
          v69 = 509;
        else
          v69 = 510;
        sub_1C55437B8(&v267, v69);
        v71 = (unint64_t *)v70;
        v72 = (unint64_t *)*((_QWORD *)&v270 + 1);
        v73 = *(_QWORD *)(v270 + 40);
        *(_QWORD *)(v70 + 24) = v73;
        v74 = *(_QWORD *)(v73 + 32);
        v75 = *(unsigned int *)(v70 + 40);
        if ((_DWORD)v75)
        {
          v237 = *(_QWORD *)(v70 + 32);
          v238 = *(_QWORD *)(v74 + 40);
          v239 = 32 * v75;
          do
          {
            if (!*(_BYTE *)v237)
            {
              v240 = *(unsigned int *)(v237 + 4);
              if ((int)v240 >= 0)
                v241 = (uint64_t *)(*(_QWORD *)(v238 + 272) + 8 * v240);
              else
                v241 = (uint64_t *)(*(_QWORD *)(v238 + 24) + 16 * (v240 & 0x7FFFFFFF) + 8);
              v242 = *v241;
              if (*v241)
              {
                v243 = *(_QWORD *)(v242 + 16);
                *(_QWORD *)(v242 + 16) = v237;
                *(_QWORD *)(v237 + 16) = v243;
                if ((*(_BYTE *)(v237 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v237 + 24) = v242;
                }
                else
                {
                  *(_QWORD *)(v237 + 24) = 0;
                  v241 = (uint64_t *)(v243 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v237 + 16) = v237;
                *(_QWORD *)(v237 + 24) = 0;
              }
              *v241 = v237;
            }
            v237 += 32;
            v239 -= 32;
          }
          while (v239);
        }
        v76 = *(_QWORD *)(v74 + 728);
        if (v76)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 24))(v76, v70);
        v77 = *v72 & 0xFFFFFFFFFFFFFFF8;
        *v71 = v77 | *v71 & 7;
        v71[1] = (unint64_t)v72;
        *(_QWORD *)(v77 + 8) = v71;
        *v72 = *v72 & 7 | (unint64_t)v71;
        if ((_QWORD)v271)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v71);
      }
      if (v68 >= 3)
        v78 = 8260;
      else
        v78 = 8261;
      v80 = sub_1C55437B8(&v267, v78);
      v81 = (unint64_t *)v79;
      v82 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v83 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v79 + 24) = v83;
      v84 = *(_QWORD *)(v83 + 32);
      v85 = *(unsigned int *)(v79 + 40);
      if ((_DWORD)v85)
      {
        v167 = *(_QWORD *)(v79 + 32);
        v168 = *(_QWORD *)(v84 + 40);
        v169 = 32 * v85;
        do
        {
          if (!*(_BYTE *)v167)
          {
            v170 = *(unsigned int *)(v167 + 4);
            if ((int)v170 >= 0)
              v171 = (uint64_t *)(*(_QWORD *)(v168 + 272) + 8 * v170);
            else
              v171 = (uint64_t *)(*(_QWORD *)(v168 + 24) + 16 * (v170 & 0x7FFFFFFF) + 8);
            v172 = *v171;
            if (*v171)
            {
              v173 = *(_QWORD *)(v172 + 16);
              *(_QWORD *)(v172 + 16) = v167;
              *(_QWORD *)(v167 + 16) = v173;
              if ((*(_BYTE *)(v167 + 3) & 1) != 0)
              {
                *(_QWORD *)(v167 + 24) = v172;
              }
              else
              {
                *(_QWORD *)(v167 + 24) = 0;
                v171 = (uint64_t *)(v173 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v167 + 16) = v167;
              *(_QWORD *)(v167 + 24) = 0;
            }
            *v171 = v167;
          }
          v167 += 32;
          v169 -= 32;
        }
        while (v169);
      }
      v86 = *(_QWORD *)(v84 + 728);
      if (v86)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 24))(v86, v79);
      v87 = *v82 & 0xFFFFFFFFFFFFFFF8;
      *v81 = v87 | *v81 & 7;
      v81[1] = (unint64_t)v82;
      *(_QWORD *)(v87 + 8) = v81;
      *v82 = *v82 & 7 | (unint64_t)v81;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v81);
      v272 = 1;
      v273 = 0;
      v274 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v272);
      v272 = 1;
      v273 = 0;
      v274 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v272);
      v22 = a9;
      if (a4 == 3)
      {
        v89 = sub_1C55437B8(&v267, v78);
        v90 = (unint64_t *)v88;
        v91 = (unint64_t *)*((_QWORD *)&v270 + 1);
        v92 = *(_QWORD *)(v270 + 40);
        *(_QWORD *)(v88 + 24) = v92;
        v93 = *(_QWORD *)(v92 + 32);
        v94 = *(unsigned int *)(v88 + 40);
        if ((_DWORD)v94)
        {
          v202 = *(_QWORD *)(v88 + 32);
          v203 = *(_QWORD *)(v93 + 40);
          v204 = 32 * v94;
          do
          {
            if (!*(_BYTE *)v202)
            {
              v205 = *(unsigned int *)(v202 + 4);
              if ((int)v205 >= 0)
                v206 = (uint64_t *)(*(_QWORD *)(v203 + 272) + 8 * v205);
              else
                v206 = (uint64_t *)(*(_QWORD *)(v203 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
              v207 = *v206;
              if (*v206)
              {
                v208 = *(_QWORD *)(v207 + 16);
                *(_QWORD *)(v207 + 16) = v202;
                *(_QWORD *)(v202 + 16) = v208;
                if ((*(_BYTE *)(v202 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v202 + 24) = v207;
                }
                else
                {
                  *(_QWORD *)(v202 + 24) = 0;
                  v206 = (uint64_t *)(v208 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v202 + 16) = v202;
                *(_QWORD *)(v202 + 24) = 0;
              }
              *v206 = v202;
            }
            v202 += 32;
            v204 -= 32;
          }
          while (v204);
        }
        v95 = *(_QWORD *)(v93 + 728);
        if (v95)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 24))(v95, v88);
        v96 = *v91 & 0xFFFFFFFFFFFFFFF8;
        *v90 = v96 | *v90 & 7;
        v90[1] = (unint64_t)v91;
        *(_QWORD *)(v96 + 8) = v90;
        *v91 = *v91 & 7 | (unint64_t)v90;
        if ((_QWORD)v271)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v90);
        v272 = 1;
        v273 = 0;
        v274 = 3;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v90, v89, (const llvm::MachineOperand *)&v272);
        v272 = 1;
        v273 = 0;
        v274 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v90, v89, (const llvm::MachineOperand *)&v272);
        v22 = a9;
      }
    }
    if ((a2 & 4) == 0)
      goto LABEL_150;
    v97 = v22 - 7;
    if (v67 >= 0xFFFFFFFE && !a7)
    {
      v98 = v22;
      if (v97 >= 3)
        v99 = 2428;
      else
        v99 = 2429;
      sub_1C55437B8(&v267, v99);
      v101 = (unint64_t *)v100;
      v102 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v103 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v100 + 24) = v103;
      v104 = *(_QWORD *)(v103 + 32);
      v105 = *(unsigned int *)(v100 + 40);
      if ((_DWORD)v105)
      {
        v209 = *(_QWORD *)(v100 + 32);
        v210 = *(_QWORD *)(v104 + 40);
        v211 = 32 * v105;
        do
        {
          if (!*(_BYTE *)v209)
          {
            v212 = *(unsigned int *)(v209 + 4);
            if ((int)v212 >= 0)
              v213 = (uint64_t *)(*(_QWORD *)(v210 + 272) + 8 * v212);
            else
              v213 = (uint64_t *)(*(_QWORD *)(v210 + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
            v214 = *v213;
            if (*v213)
            {
              v215 = *(_QWORD *)(v214 + 16);
              *(_QWORD *)(v214 + 16) = v209;
              *(_QWORD *)(v209 + 16) = v215;
              if ((*(_BYTE *)(v209 + 3) & 1) != 0)
              {
                *(_QWORD *)(v209 + 24) = v214;
              }
              else
              {
                *(_QWORD *)(v209 + 24) = 0;
                v213 = (uint64_t *)(v215 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v209 + 16) = v209;
              *(_QWORD *)(v209 + 24) = 0;
            }
            *v213 = v209;
          }
          v209 += 32;
          v211 -= 32;
        }
        while (v211);
      }
      v106 = *(_QWORD *)(v104 + 728);
      if (v106)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 24))(v106, v100);
      v107 = *v102 & 0xFFFFFFFFFFFFFFF8;
      *v101 = v107 | *v101 & 7;
      v101[1] = (unint64_t)v102;
      *(_QWORD *)(v107 + 8) = v101;
      *v102 = *v102 & 7 | (unint64_t)v101;
      v22 = v98;
      if ((_QWORD)v271)
      {
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v101);
        v22 = v98;
      }
    }
    if ((v22 - 5) >= 2)
      v108 = 8262;
    else
      v108 = 8264;
    if (v97 >= 3)
      v109 = v108;
    else
      v109 = 8263;
    v111 = sub_1C55437B8(&v267, v109);
    v112 = (unint64_t *)v110;
    v113 = (unint64_t *)*((_QWORD *)&v270 + 1);
    v114 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v110 + 24) = v114;
    v115 = *(_QWORD *)(v114 + 32);
    v116 = *(unsigned int *)(v110 + 40);
    if ((_DWORD)v116)
    {
      v174 = *(_QWORD *)(v110 + 32);
      v175 = *(_QWORD *)(v115 + 40);
      v176 = 32 * v116;
      do
      {
        if (!*(_BYTE *)v174)
        {
          v177 = *(unsigned int *)(v174 + 4);
          if ((int)v177 >= 0)
            v178 = (uint64_t *)(*(_QWORD *)(v175 + 272) + 8 * v177);
          else
            v178 = (uint64_t *)(*(_QWORD *)(v175 + 24) + 16 * (v177 & 0x7FFFFFFF) + 8);
          v179 = *v178;
          if (*v178)
          {
            v180 = *(_QWORD *)(v179 + 16);
            *(_QWORD *)(v179 + 16) = v174;
            *(_QWORD *)(v174 + 16) = v180;
            if ((*(_BYTE *)(v174 + 3) & 1) != 0)
            {
              *(_QWORD *)(v174 + 24) = v179;
            }
            else
            {
              *(_QWORD *)(v174 + 24) = 0;
              v178 = (uint64_t *)(v180 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v174 + 16) = v174;
            *(_QWORD *)(v174 + 24) = 0;
          }
          *v178 = v174;
        }
        v174 += 32;
        v176 -= 32;
      }
      while (v176);
    }
    v117 = *(_QWORD *)(v115 + 728);
    if (v117)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 24))(v117, v110);
    v118 = *v113 & 0xFFFFFFFFFFFFFFF8;
    *v112 = v118 | *v112 & 7;
    v112[1] = (unint64_t)v113;
    *(_QWORD *)(v118 + 8) = v112;
    *v113 = *v113 & 7 | (unint64_t)v112;
    if ((_QWORD)v271)
      (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v112);
    v272 = 1;
    v273 = 0;
    v274 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v111, (const llvm::MachineOperand *)&v272);
    v272 = 1;
    v273 = 0;
    v274 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v111, (const llvm::MachineOperand *)&v272);
    if (!v266)
      goto LABEL_150;
    v120 = sub_1C55437B8(&v267, v109);
    v121 = (unint64_t *)v119;
    v122 = (unint64_t *)*((_QWORD *)&v270 + 1);
    v123 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v119 + 24) = v123;
    v124 = *(_QWORD *)(v123 + 32);
    v125 = *(unsigned int *)(v119 + 40);
    if ((_DWORD)v125)
    {
      v216 = *(_QWORD *)(v119 + 32);
      v217 = *(_QWORD *)(v124 + 40);
      v218 = 32 * v125;
      do
      {
        if (!*(_BYTE *)v216)
        {
          v219 = *(unsigned int *)(v216 + 4);
          if ((int)v219 >= 0)
            v220 = (uint64_t *)(*(_QWORD *)(v217 + 272) + 8 * v219);
          else
            v220 = (uint64_t *)(*(_QWORD *)(v217 + 24) + 16 * (v219 & 0x7FFFFFFF) + 8);
          v221 = *v220;
          if (*v220)
          {
            v222 = *(_QWORD *)(v221 + 16);
            *(_QWORD *)(v221 + 16) = v216;
            *(_QWORD *)(v216 + 16) = v222;
            if ((*(_BYTE *)(v216 + 3) & 1) != 0)
            {
              *(_QWORD *)(v216 + 24) = v221;
            }
            else
            {
              *(_QWORD *)(v216 + 24) = 0;
              v220 = (uint64_t *)(v222 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v216 + 16) = v216;
            *(_QWORD *)(v216 + 24) = 0;
          }
          *v220 = v216;
        }
        v216 += 32;
        v218 -= 32;
      }
      while (v218);
    }
    v126 = *(_QWORD *)(v124 + 728);
    if (v126)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v126 + 24))(v126, v119);
    v127 = *v122 & 0xFFFFFFFFFFFFFFF8;
    *v121 = v127 | *v121 & 7;
    v121[1] = (unint64_t)v122;
    *(_QWORD *)(v127 + 8) = v121;
    *v122 = *v122 & 7 | (unint64_t)v121;
    if ((_QWORD)v271)
      (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v121);
    v272 = 1;
    v273 = 0;
    v274 = 3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v121, v120, (const llvm::MachineOperand *)&v272);
    v272 = 1;
    v273 = 0;
    v274 = 1;
    goto LABEL_149;
  }
  if ((a2 & 1) != 0)
  {
    v24 = a9 - 7;
    if ((a4 - 4) < 0xFFFFFFFE || !a6)
    {
      v265 = a9 - 7;
      if (v24 >= 3)
        v25 = 8260;
      else
        v25 = 8261;
      v27 = sub_1C55437B8(&v267, v25);
      v28 = (unint64_t *)v26;
      v29 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v30 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v26 + 24) = v30;
      v31 = *(_QWORD *)(v30 + 32);
      v32 = *(unsigned int *)(v26 + 40);
      if ((_DWORD)v32)
      {
        v195 = *(_QWORD *)(v26 + 32);
        v196 = *(_QWORD *)(v31 + 40);
        v197 = 32 * v32;
        do
        {
          if (!*(_BYTE *)v195)
          {
            v198 = *(unsigned int *)(v195 + 4);
            if ((int)v198 >= 0)
              v199 = (uint64_t *)(*(_QWORD *)(v196 + 272) + 8 * v198);
            else
              v199 = (uint64_t *)(*(_QWORD *)(v196 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
            v200 = *v199;
            if (*v199)
            {
              v201 = *(_QWORD *)(v200 + 16);
              *(_QWORD *)(v200 + 16) = v195;
              *(_QWORD *)(v195 + 16) = v201;
              if ((*(_BYTE *)(v195 + 3) & 1) != 0)
              {
                *(_QWORD *)(v195 + 24) = v200;
              }
              else
              {
                *(_QWORD *)(v195 + 24) = 0;
                v199 = (uint64_t *)(v201 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v195 + 16) = v195;
              *(_QWORD *)(v195 + 24) = 0;
            }
            *v199 = v195;
          }
          v195 += 32;
          v197 -= 32;
        }
        while (v197);
      }
      v33 = *(_QWORD *)(v31 + 728);
      if (v33)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v26);
      v34 = *v29 & 0xFFFFFFFFFFFFFFF8;
      *v28 = v34 | *v28 & 7;
      v28[1] = (unint64_t)v29;
      *(_QWORD *)(v34 + 8) = v28;
      *v29 = *v29 & 7 | (unint64_t)v28;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v28);
      v272 = 1;
      v273 = 0;
      v274 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v272);
      v272 = 1;
      v273 = 0;
      v274 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v27, (const llvm::MachineOperand *)&v272);
      v22 = a9;
      if ((a4 - 4) < 0xFFFFFFFE)
        goto LABEL_50;
      v24 = a9 - 7;
      if (v265 >= 3)
        v35 = 501;
      else
        v35 = 502;
      if (v265 >= 3)
        v36 = 505;
      else
        v36 = 506;
      if (a3 == 7)
        v37 = v35;
      else
        v37 = v36;
      sub_1C55437B8(&v267, v37);
      v39 = (unint64_t *)v38;
      v40 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v41 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v38 + 24) = v41;
      v42 = *(_QWORD *)(v41 + 32);
      v43 = *(unsigned int *)(v38 + 40);
      if ((_DWORD)v43)
      {
        v251 = *(_QWORD *)(v38 + 32);
        v252 = *(_QWORD *)(v42 + 40);
        v253 = 32 * v43;
        do
        {
          if (!*(_BYTE *)v251)
          {
            v254 = *(unsigned int *)(v251 + 4);
            if ((int)v254 >= 0)
              v255 = (uint64_t *)(*(_QWORD *)(v252 + 272) + 8 * v254);
            else
              v255 = (uint64_t *)(*(_QWORD *)(v252 + 24) + 16 * (v254 & 0x7FFFFFFF) + 8);
            v256 = *v255;
            if (*v255)
            {
              v257 = *(_QWORD *)(v256 + 16);
              *(_QWORD *)(v256 + 16) = v251;
              *(_QWORD *)(v251 + 16) = v257;
              if ((*(_BYTE *)(v251 + 3) & 1) != 0)
              {
                *(_QWORD *)(v251 + 24) = v256;
              }
              else
              {
                *(_QWORD *)(v251 + 24) = 0;
                v255 = (uint64_t *)(v257 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v251 + 16) = v251;
              *(_QWORD *)(v251 + 24) = 0;
            }
            *v255 = v251;
          }
          v251 += 32;
          v253 -= 32;
        }
        while (v253);
      }
      v44 = *(_QWORD *)(v42 + 728);
      if (v44)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v38);
      v45 = *v40 & 0xFFFFFFFFFFFFFFF8;
      *v39 = v45 | *v39 & 7;
      v39[1] = (unint64_t)v40;
      *(_QWORD *)(v45 + 8) = v39;
      *v40 = *v40 & 7 | (unint64_t)v39;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v39);
    }
    if (v24 >= 3)
      v46 = 8260;
    else
      v46 = 8261;
    v48 = sub_1C55437B8(&v267, v46);
    v49 = (unint64_t *)v47;
    v50 = (unint64_t *)*((_QWORD *)&v270 + 1);
    v51 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v47 + 24) = v51;
    v52 = *(_QWORD *)(v51 + 32);
    v53 = *(unsigned int *)(v47 + 40);
    if ((_DWORD)v53)
    {
      v188 = *(_QWORD *)(v47 + 32);
      v189 = *(_QWORD *)(v52 + 40);
      v190 = 32 * v53;
      do
      {
        if (!*(_BYTE *)v188)
        {
          v191 = *(unsigned int *)(v188 + 4);
          if ((int)v191 >= 0)
            v192 = (uint64_t *)(*(_QWORD *)(v189 + 272) + 8 * v191);
          else
            v192 = (uint64_t *)(*(_QWORD *)(v189 + 24) + 16 * (v191 & 0x7FFFFFFF) + 8);
          v193 = *v192;
          if (*v192)
          {
            v194 = *(_QWORD *)(v193 + 16);
            *(_QWORD *)(v193 + 16) = v188;
            *(_QWORD *)(v188 + 16) = v194;
            if ((*(_BYTE *)(v188 + 3) & 1) != 0)
            {
              *(_QWORD *)(v188 + 24) = v193;
            }
            else
            {
              *(_QWORD *)(v188 + 24) = 0;
              v192 = (uint64_t *)(v194 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v188 + 16) = v188;
            *(_QWORD *)(v188 + 24) = 0;
          }
          *v192 = v188;
        }
        v188 += 32;
        v190 -= 32;
      }
      while (v190);
    }
    v54 = *(_QWORD *)(v52 + 728);
    if (v54)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v47);
    v55 = *v50 & 0xFFFFFFFFFFFFFFF8;
    *v49 = v55 | *v49 & 7;
    v49[1] = (unint64_t)v50;
    *(_QWORD *)(v55 + 8) = v49;
    *v50 = *v50 & 7 | (unint64_t)v49;
    if ((_QWORD)v271)
      (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v49);
    v272 = 1;
    v273 = 0;
    v274 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v49, v48, (const llvm::MachineOperand *)&v272);
    v272 = 1;
    v273 = 0;
    v274 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v49, v48, (const llvm::MachineOperand *)&v272);
    v22 = a9;
    if (a4 == 3)
    {
      v57 = sub_1C55437B8(&v267, v46);
      v58 = (unint64_t *)v56;
      v59 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v60 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v56 + 24) = v60;
      v61 = *(_QWORD *)(v60 + 32);
      v62 = *(unsigned int *)(v56 + 40);
      if ((_DWORD)v62)
      {
        v230 = *(_QWORD *)(v56 + 32);
        v231 = *(_QWORD *)(v61 + 40);
        v232 = 32 * v62;
        do
        {
          if (!*(_BYTE *)v230)
          {
            v233 = *(unsigned int *)(v230 + 4);
            if ((int)v233 >= 0)
              v234 = (uint64_t *)(*(_QWORD *)(v231 + 272) + 8 * v233);
            else
              v234 = (uint64_t *)(*(_QWORD *)(v231 + 24) + 16 * (v233 & 0x7FFFFFFF) + 8);
            v235 = *v234;
            if (*v234)
            {
              v236 = *(_QWORD *)(v235 + 16);
              *(_QWORD *)(v235 + 16) = v230;
              *(_QWORD *)(v230 + 16) = v236;
              if ((*(_BYTE *)(v230 + 3) & 1) != 0)
              {
                *(_QWORD *)(v230 + 24) = v235;
              }
              else
              {
                *(_QWORD *)(v230 + 24) = 0;
                v234 = (uint64_t *)(v236 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v230 + 16) = v230;
              *(_QWORD *)(v230 + 24) = 0;
            }
            *v234 = v230;
          }
          v230 += 32;
          v232 -= 32;
        }
        while (v232);
      }
      v63 = *(_QWORD *)(v61 + 728);
      if (v63)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 24))(v63, v56);
      v64 = *v59 & 0xFFFFFFFFFFFFFFF8;
      *v58 = v64 | *v58 & 7;
      v58[1] = (unint64_t)v59;
      *(_QWORD *)(v64 + 8) = v58;
      *v59 = *v59 & 7 | (unint64_t)v58;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v58);
      v272 = 1;
      v273 = 0;
      v274 = 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)&v272);
      v272 = 1;
      v273 = 0;
      v274 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v57, (const llvm::MachineOperand *)&v272);
      v22 = a9;
    }
  }
LABEL_50:
  if ((a2 & 4) == 0)
    goto LABEL_150;
  if (a7)
  {
    v65 = v22 - 7;
  }
  else
  {
    v128 = v22;
    v65 = v22 - 7;
    if (a5)
    {
      if ((v22 - 5) >= 2)
        v129 = 8262;
      else
        v129 = 8264;
      if (v65 >= 3)
        v130 = v129;
      else
        v130 = 8263;
      v132 = sub_1C55437B8(&v267, v130);
      v133 = (unint64_t *)v131;
      v134 = (unint64_t *)*((_QWORD *)&v270 + 1);
      v135 = *(_QWORD *)(v270 + 40);
      *(_QWORD *)(v131 + 24) = v135;
      v136 = *(_QWORD *)(v135 + 32);
      v137 = *(unsigned int *)(v131 + 40);
      if ((_DWORD)v137)
      {
        v258 = *(_QWORD *)(v131 + 32);
        v259 = *(_QWORD *)(v136 + 40);
        v260 = 32 * v137;
        do
        {
          if (!*(_BYTE *)v258)
          {
            v261 = *(unsigned int *)(v258 + 4);
            if ((int)v261 >= 0)
              v262 = (uint64_t *)(*(_QWORD *)(v259 + 272) + 8 * v261);
            else
              v262 = (uint64_t *)(*(_QWORD *)(v259 + 24) + 16 * (v261 & 0x7FFFFFFF) + 8);
            v263 = *v262;
            if (*v262)
            {
              v264 = *(_QWORD *)(v263 + 16);
              *(_QWORD *)(v263 + 16) = v258;
              *(_QWORD *)(v258 + 16) = v264;
              if ((*(_BYTE *)(v258 + 3) & 1) != 0)
              {
                *(_QWORD *)(v258 + 24) = v263;
              }
              else
              {
                *(_QWORD *)(v258 + 24) = 0;
                v262 = (uint64_t *)(v264 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v258 + 16) = v258;
              *(_QWORD *)(v258 + 24) = 0;
            }
            *v262 = v258;
          }
          v258 += 32;
          v260 -= 32;
        }
        while (v260);
      }
      v138 = *(_QWORD *)(v136 + 728);
      if (v138)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 24))(v138, v131);
      v139 = *v134 & 0xFFFFFFFFFFFFFFF8;
      *v133 = v139 | *v133 & 7;
      v133[1] = (unint64_t)v134;
      *(_QWORD *)(v139 + 8) = v133;
      *v134 = *v134 & 7 | (unint64_t)v133;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v133);
      v272 = 1;
      v273 = 0;
      v274 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v133, v132, (const llvm::MachineOperand *)&v272);
      v272 = 1;
      v273 = 0;
      v274 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v133, v132, (const llvm::MachineOperand *)&v272);
    }
    if (v65 >= 3)
      v140 = 2426;
    else
      v140 = 2427;
    sub_1C55437B8(&v267, v140);
    v142 = (unint64_t *)v141;
    v143 = (unint64_t *)*((_QWORD *)&v270 + 1);
    v144 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v141 + 24) = v144;
    v145 = *(_QWORD *)(v144 + 32);
    v146 = *(unsigned int *)(v141 + 40);
    if ((_DWORD)v146)
    {
      v244 = *(_QWORD *)(v141 + 32);
      v245 = *(_QWORD *)(v145 + 40);
      v246 = 32 * v146;
      do
      {
        if (!*(_BYTE *)v244)
        {
          v247 = *(unsigned int *)(v244 + 4);
          if ((int)v247 >= 0)
            v248 = (uint64_t *)(*(_QWORD *)(v245 + 272) + 8 * v247);
          else
            v248 = (uint64_t *)(*(_QWORD *)(v245 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
          v249 = *v248;
          if (*v248)
          {
            v250 = *(_QWORD *)(v249 + 16);
            *(_QWORD *)(v249 + 16) = v244;
            *(_QWORD *)(v244 + 16) = v250;
            if ((*(_BYTE *)(v244 + 3) & 1) != 0)
            {
              *(_QWORD *)(v244 + 24) = v249;
            }
            else
            {
              *(_QWORD *)(v244 + 24) = 0;
              v248 = (uint64_t *)(v250 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v244 + 16) = v244;
            *(_QWORD *)(v244 + 24) = 0;
          }
          *v248 = v244;
        }
        v244 += 32;
        v246 -= 32;
      }
      while (v246);
    }
    v147 = *(_QWORD *)(v145 + 728);
    if (v147)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 24))(v147, v141);
    v148 = *v143 & 0xFFFFFFFFFFFFFFF8;
    *v142 = v148 | *v142 & 7;
    v142[1] = (unint64_t)v143;
    *(_QWORD *)(v148 + 8) = v142;
    *v143 = *v143 & 7 | (unint64_t)v142;
    if ((_QWORD)v271)
      (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v142);
    v22 = v128;
  }
  if ((v22 - 5) >= 2)
    v149 = 8262;
  else
    v149 = 8264;
  if (v65 >= 3)
    v150 = v149;
  else
    v150 = 8263;
  v152 = sub_1C55437B8(&v267, v150);
  v153 = (unint64_t *)v151;
  v154 = (unint64_t *)*((_QWORD *)&v270 + 1);
  v155 = *(_QWORD *)(v270 + 40);
  *(_QWORD *)(v151 + 24) = v155;
  v156 = *(_QWORD *)(v155 + 32);
  v157 = *(unsigned int *)(v151 + 40);
  if ((_DWORD)v157)
  {
    v181 = *(_QWORD *)(v151 + 32);
    v182 = *(_QWORD *)(v156 + 40);
    v183 = 32 * v157;
    do
    {
      if (!*(_BYTE *)v181)
      {
        v184 = *(unsigned int *)(v181 + 4);
        if ((int)v184 >= 0)
          v185 = (uint64_t *)(*(_QWORD *)(v182 + 272) + 8 * v184);
        else
          v185 = (uint64_t *)(*(_QWORD *)(v182 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
        v186 = *v185;
        if (*v185)
        {
          v187 = *(_QWORD *)(v186 + 16);
          *(_QWORD *)(v186 + 16) = v181;
          *(_QWORD *)(v181 + 16) = v187;
          if ((*(_BYTE *)(v181 + 3) & 1) != 0)
          {
            *(_QWORD *)(v181 + 24) = v186;
          }
          else
          {
            *(_QWORD *)(v181 + 24) = 0;
            v185 = (uint64_t *)(v187 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v181 + 16) = v181;
          *(_QWORD *)(v181 + 24) = 0;
        }
        *v185 = v181;
      }
      v181 += 32;
      v183 -= 32;
    }
    while (v183);
  }
  v158 = *(_QWORD *)(v156 + 728);
  if (v158)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v158 + 24))(v158, v151);
  v159 = *v154 & 0xFFFFFFFFFFFFFFF8;
  *v153 = v159 | *v153 & 7;
  v153[1] = (unint64_t)v154;
  *(_QWORD *)(v159 + 8) = v153;
  *v154 = *v154 & 7 | (unint64_t)v153;
  if ((_QWORD)v271)
    (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v153);
  v272 = 1;
  v273 = 0;
  v274 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v153, v152, (const llvm::MachineOperand *)&v272);
  v272 = 1;
  v273 = 0;
  v274 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v153, v152, (const llvm::MachineOperand *)&v272);
  if (!v266)
    goto LABEL_150;
  v120 = sub_1C55437B8(&v267, v150);
  v121 = (unint64_t *)v160;
  v161 = (unint64_t *)*((_QWORD *)&v270 + 1);
  v162 = *(_QWORD *)(v270 + 40);
  *(_QWORD *)(v160 + 24) = v162;
  v163 = *(_QWORD *)(v162 + 32);
  v164 = *(unsigned int *)(v160 + 40);
  if ((_DWORD)v164)
  {
    v223 = *(_QWORD *)(v160 + 32);
    v224 = *(_QWORD *)(v163 + 40);
    v225 = 32 * v164;
    do
    {
      if (!*(_BYTE *)v223)
      {
        v226 = *(unsigned int *)(v223 + 4);
        if ((int)v226 >= 0)
          v227 = (uint64_t *)(*(_QWORD *)(v224 + 272) + 8 * v226);
        else
          v227 = (uint64_t *)(*(_QWORD *)(v224 + 24) + 16 * (v226 & 0x7FFFFFFF) + 8);
        v228 = *v227;
        if (*v227)
        {
          v229 = *(_QWORD *)(v228 + 16);
          *(_QWORD *)(v228 + 16) = v223;
          *(_QWORD *)(v223 + 16) = v229;
          if ((*(_BYTE *)(v223 + 3) & 1) != 0)
          {
            *(_QWORD *)(v223 + 24) = v228;
          }
          else
          {
            *(_QWORD *)(v223 + 24) = 0;
            v227 = (uint64_t *)(v229 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v223 + 16) = v223;
          *(_QWORD *)(v223 + 24) = 0;
        }
        *v227 = v223;
      }
      v223 += 32;
      v225 -= 32;
    }
    while (v225);
  }
  v165 = *(_QWORD *)(v163 + 728);
  if (v165)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v165 + 24))(v165, v160);
  v166 = *v161 & 0xFFFFFFFFFFFFFFF8;
  *v121 = v166 | *v121 & 7;
  v121[1] = (unint64_t)v161;
  *(_QWORD *)(v166 + 8) = v121;
  *v161 = *v161 & 7 | (unint64_t)v121;
  if ((_QWORD)v271)
    (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v271 + 24))(v271, v121);
  v272 = 1;
  v273 = 0;
  v274 = 3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v121, v120, (const llvm::MachineOperand *)&v272);
  v272 = 1;
  v273 = 0;
  v274 = 2;
LABEL_149:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v121, v120, (const llvm::MachineOperand *)&v272);
LABEL_150:
  v267 = &off_1E816EC08;
  if (*((_QWORD *)&v269 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v269 + 8, *((unsigned __int8 **)&v269 + 1));
  return 1;
}

int32x2_t sub_1C48BDDA0(uint64_t a1, uint64_t a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int32x2_t result;

  v2 = *(int32x2_t **)(a1 + 72);
  v3 = v2[6];
  v4 = v2[8].u32[0];
  v5 = a2 >> 4;
  if ((_DWORD)v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    v7 = *(_QWORD *)&v3 + 16 * v6;
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        v7 = *(_QWORD *)&v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = *(_QWORD *)&v3 + 16 * v4;
LABEL_8:
  if (v7 != *(_QWORD *)&v3 + 16 * v4)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v7 + 8)) = 0;
    *(_QWORD *)v7 = -8192;
    result = vadd_s32(v2[7], (int32x2_t)0x1FFFFFFFFLL);
    v2[7] = result;
  }
  v11 = *(int32x2_t **)(a1 + 80);
  v12 = v11[10];
  v13 = v11[12].u32[0];
  if ((_DWORD)v13)
  {
    LODWORD(v14) = (v13 - 1) & (v5 ^ (a2 >> 9));
    v15 = *(_QWORD *)&v12 + 16 * v14;
    v16 = *(_QWORD *)v15;
    if (*(_QWORD *)v15 == a2)
      goto LABEL_17;
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v14);
      if (v16 == a2)
      {
        v15 = *(_QWORD *)&v12 + 16 * v14;
        goto LABEL_17;
      }
    }
  }
  v15 = *(_QWORD *)&v12 + 16 * v13;
LABEL_17:
  if (v15 != *(_QWORD *)&v12 + 16 * v13)
  {
    *(_QWORD *)(*(_QWORD *)v11 + 8 * *(unsigned int *)(v15 + 8)) = 0;
    *(_QWORD *)v15 = -8192;
    result = vadd_s32(v11[11], (int32x2_t)0x1FFFFFFFFLL);
    v11[11] = result;
  }
  return result;
}

_DWORD *sub_1C48BDED8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _DWORD *result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = **(unsigned __int16 **)(a2 + 16);
  if (v2 == 19 || (v2 - 45) <= 0xD2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v27 = a2;
    result = (_DWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 48);
    v6 = *(_DWORD *)(v3 + 8);
    v7 = *(_DWORD *)(v3 + 64);
    if (v7)
    {
      v8 = v7 - 1;
      v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (_QWORD *)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return result;
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v5 + 16 * v9);
        v11 = *v10;
        if (*v10 == a2)
          return result;
      }
LABEL_25:
      if (v12)
        v24 = v12;
      else
        v24 = v10;
      goto LABEL_28;
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 80);
    v27 = a2;
    result = (_DWORD *)(v3 + 80);
    v16 = *(_QWORD *)(v3 + 80);
    v6 = *(_DWORD *)(v3 + 8);
    v17 = *(_DWORD *)(v3 + 96);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (_QWORD *)(v16 + 16 * v19);
      v20 = *v10;
      if (*v10 == a2)
        return result;
      v12 = 0;
      v21 = 1;
      while (v20 != -4096)
      {
        if (v12)
          v22 = 0;
        else
          v22 = v20 == -8192;
        if (v22)
          v12 = v10;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        v10 = (_QWORD *)(v16 + 16 * v19);
        v20 = *v10;
        if (*v10 == a2)
          return result;
      }
      goto LABEL_25;
    }
  }
  v24 = 0;
LABEL_28:
  result = sub_1C48BE074((uint64_t)result, (uint64_t)&v27, &v27, v24);
  *(_QWORD *)result = v27;
  result[2] = v6;
  v25 = v27;
  v26 = *(unsigned int *)(v3 + 8);
  if (v26 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v26) = v25;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

_QWORD *sub_1C48BE074(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C48BE1EC(a1, 2 * v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C48BE1EC(a1, v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C48BE1EC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C48BE2A4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C48BE2A4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if (*a2 != -4096 && v6 != -8192)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_21;
        }
        if (v11)
          v9 = v11;
      }
LABEL_21:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C48BE384(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t sub_1C48BE390(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_1C48BE39C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 80);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE3EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 80);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE43C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 80);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE48C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 80);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE4DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 80);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 72);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE52C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 80);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 72);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C48BE57C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 80);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 72);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void sub_1C48BE5CC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48BE5E0()
{
  return 1;
}

uint64_t sub_1C48BE5E8()
{
  return 0;
}

uint64_t sub_1C48BE5F0()
{
  return 0;
}

uint64_t sub_1C48BE5F8()
{
  return 24;
}

uint64_t sub_1C48BE600()
{
  return 8;
}

uint64_t sub_1C48BE608(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1C48BE610()
{
  return 1;
}

uint64_t sub_1C48BE618()
{
  return 0;
}

uint64_t sub_1C48BE620(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1C48BE630()
{
  return 1;
}

uint64_t sub_1C48BE638()
{
  return 0;
}

uint64_t sub_1C48BE640()
{
  return 1;
}

uint64_t sub_1C48BE648(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, _DWORD *a14, uint64_t a15, int a16, __int32 a17)
{
  uint8x8_t v17;
  int v18;
  char *v19;
  uint64_t v20;

  if (a5 == -1)
  {
    v20 = 16;
    if (a13)
      v20 = 8;
    v19 = (char *)&unk_1C646D400 + 24 * (a12 ^ 1u) + 4 * (a3 != 7) + v20;
  }
  else
  {
    a1.i32[0] = a17;
    v17 = (uint8x8_t)vcnt_s8(a1);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = *a14 - 1;
    if (!*a14)
      v18 = 0;
    v19 = (char *)&unk_1C646B500
        + 768 * a7
        + 384 * (a12 ^ 1)
        + 96 * (v17.i32[0] - 1)
        + 48 * (a13 ^ 1)
        + 16 * v18
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

uint64_t sub_1C48BE710()
{
  return 0;
}

uint64_t sub_1C48BE718()
{
  return 0;
}

uint64_t sub_1C48BE720(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C48BE734(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C48BE748(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C48BE75C()
{
  return 417;
}

uint64_t sub_1C48BE764()
{
  return 0;
}

uint64_t sub_1C48BE76C()
{
  return 0;
}

uint64_t sub_1C48BE774()
{
  return 1;
}

uint64_t sub_1C48BE77C()
{
  return 0;
}

uint64_t sub_1C48BE784()
{
  return 0;
}

uint64_t sub_1C48BE78C()
{
  return 3;
}

uint64_t sub_1C48BE794()
{
  return 0;
}

uint64_t sub_1C48BE79C(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a2 + 61))
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 4) == 3;
  if (v2)
    return 6;
  else
    return 4;
}

uint64_t sub_1C48BE7BC()
{
  return 0;
}

uint64_t sub_1C48BE7C4()
{
  return 1;
}

uint64_t sub_1C48BE7CC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1)+ 24);
  else
    return dword_1C65ED5A4[(int)a2 - 2];
}

__int16 ***sub_1C48BE80C(uint64_t a1, int a2, int a3)
{
  __int16 ****v3;

  v3 = &off_1E7FA18A0[a2 - 1];
  if (!a3)
    v3 = &(&off_1E7FA1128)[a2 - 1];
  return *v3;
}

uint64_t sub_1C48BE83C()
{
  return 0x1900000001;
}

uint64_t sub_1C48BE848(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a3 + 48);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 8) + 216))(*(_QWORD *)(a3 + 8), a3 + 128, a3);
    *(_QWORD *)(a3 + 48) = v7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 112);
  if (v8)
  {
    if (!*(_DWORD *)(v8 + 8))
      goto LABEL_23;
    v8 = *(_QWORD *)(v8 + 40);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 40);
      if (v9)
      {
        v10 = *(_QWORD *)(v8 + 24);
        v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        v12 = &unk_1ED7EA000;
        if ((v11 & 1) == 0)
        {
          v26 = v10;
          v27 = v7;
          v25 = v9;
          v22 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v12 = &unk_1ED7EA000;
          v9 = v25;
          v23 = v22;
          v10 = v26;
          v7 = v27;
          if (v23)
          {
            v24 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v24 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v24;
            __cxa_guard_release(&qword_1ED7EAC88);
            v12 = (_QWORD *)&unk_1ED7EA000;
            v9 = v25;
            v10 = v26;
            v7 = v27;
          }
        }
        v13 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
        v14 = (-348639895 * ((v13 >> 47) ^ v13)) ^ 0x616F6E73;
        v15 = v9 - 1;
        for (i = 1; ; ++i)
        {
          v17 = v14 & v15;
          v18 = v10 + 24 * v17;
          v19 = *(_QWORD **)v18;
          if (*(_QWORD *)v18 == -1)
          {
            if ("samplesnoalias" == (char *)-1)
              goto LABEL_22;
          }
          else if (v19 == (_QWORD *)-2)
          {
            if ("samplesnoalias" == (char *)-2)
              goto LABEL_22;
          }
          else if (*(_QWORD *)(v18 + 8) == 14
                 && *v19 == 0x6E73656C706D6173
                 && *(_QWORD *)((char *)v19 + 6) == 0x7361696C616F6E73)
          {
LABEL_22:
            LOBYTE(v8) = 1;
            return sub_1C48BEFA4(v7, a2, a3, v8 & (a4 ^ 1u));
          }
          if (v19 == (_QWORD *)-1)
            break;
          v14 = i + v17;
        }
      }
LABEL_23:
      LOBYTE(v8) = 0;
    }
  }
  return sub_1C48BEFA4(v7, a2, a3, v8 & (a4 ^ 1u));
}

uint64_t sub_1C48BEA68(uint64_t a1, int a2)
{
  return dword_1C65ED5D0[a2];
}

uint64_t sub_1C48BEA78(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6, uint64_t a7, int a8, char a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v45;
  int v46;

  if (*(_BYTE *)(a2 + 1))
    v15 = 17301504;
  else
    v15 = 0x80000;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  v17 = v16;
  v18 = *(_BYTE *)(v16 + 404) == 0;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v22 = *(_BYTE *)(v16 + 297) == 0;
    v23 = *a3;
    v46 = 0;
    v24 = sub_1C4979B6C(v16, v23, "SampleWriteCacheCtl", &v46);
    v21 = v46;
    if (!v24)
      v21 = v22;
  }
  else
  {
    v19 = *a3;
    v46 = 0;
    v20 = sub_1C4979B6C(v16, v19, "SampleReadCacheCtl", &v46);
    v21 = v46;
    if (!v20)
      v21 = 0;
  }
  v45 = v21;
  v25 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v46 = 0;
    if (sub_1C4979B6C(v17, v25, "SampleWriteL2Pers", &v46))
      v26 = v46;
    else
      v26 = v18;
  }
  else
  {
    v46 = 0;
    if (sub_1C4979B6C(v17, v25, "SampleReadL2Pers", &v46))
      v26 = v46;
    else
      v26 = 1;
  }
  v27 = *(_DWORD *)(a2 + 4);
  if (v27 == 1)
  {
    v30 = *(_DWORD *)(a2 + 56) != -1;
    goto LABEL_35;
  }
  if (v27 != 2)
  {
    if (*(_DWORD *)(a2 + 48) == -1 && !*(_BYTE *)(a2 + 60))
    {
      v30 = 5;
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  if (*(_BYTE *)(a2 + 61) || *(_DWORD *)(a2 + 48) != -1)
  {
LABEL_27:
    if (*(_DWORD *)(a2 + 56) == -1)
      v30 = 6;
    else
      v30 = 7;
    goto LABEL_35;
  }
  v28 = *(_DWORD *)(a2 + 52);
  v29 = *(_DWORD *)(a2 + 56);
  if (v28 == -1 || v29 == -1)
  {
    v31 = v29 == -1;
    v32 = 2;
    if (!v31)
      v32 = 3;
    if (v28 == -1)
      v30 = v32;
    else
      v30 = 4;
  }
  else
  {
    v30 = 8;
  }
LABEL_35:
  v33 = *(_DWORD *)(a2 + 64) != -1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v35 = v15 | ((a6 & 0xF) << 11) | (unint64_t)v30 | (16 * v33) | ((unint64_t)(result & 0xF) << 6) | ((unint64_t)(*(_DWORD *)(a2 + 80) != -1) << 10) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 17);
  if (*(_BYTE *)(a2 + 62))
  {
    if (*(_DWORD *)(a2 + 84) == -1 || (a5 - 1) > 2)
      v36 = 0;
    else
      v36 = ((unint64_t)(a5 - 1) << 15) + 0x8000;
    v37 = a8;
    v35 |= v36;
  }
  else
  {
    v37 = a8;
  }
  v38 = v35 | ((unint64_t)(*(_DWORD *)(a2 + 48) != -1) << 18);
  if (v37)
    v38 |= 0x200000uLL;
  if (a9)
    v38 |= 0x400000uLL;
  if (*(_BYTE *)a2)
    v39 = v38 | 0x800000;
  else
    v39 = v38;
  v40 = *(unsigned int *)(a10 + 8);
  if (v40 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v39;
  v41 = *(_DWORD *)(a10 + 12);
  v42 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v42) = v45 | (4 * v26);
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void *sub_1C48BEDB8(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4072;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F10;
  return result;
}

void *sub_1C48BEE84(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4075;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F48;
  return result;
}

uint64_t sub_1C48BEF50()
{
  return 0;
}

uint64_t sub_1C48BEF58()
{
  return 0;
}

uint64_t sub_1C48BEF60()
{
  return 1;
}

uint64_t sub_1C48BEF68()
{
  return 0;
}

uint64_t sub_1C48BEF70()
{
  return 1;
}

uint64_t sub_1C48BEF78()
{
  return 0;
}

uint64_t sub_1C48BEF80()
{
  return 395;
}

BOOL sub_1C48BEF88(uint64_t a1, int a2)
{
  return a2 == 318;
}

uint64_t sub_1C48BEF94()
{
  return 0;
}

uint64_t sub_1C48BEF9C()
{
  return 0;
}

uint64_t sub_1C48BEFA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = a2;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 104))(*(_QWORD *)(a3 + 16));
  v17 = a2;
  v18 = 0;
  if (!sub_1C48BF0C0((uint64_t *)(a1 + 160), &v17, &v18)
    || v18 == *(_QWORD *)(a1 + 160) + 16 * *(unsigned int *)(a1 + 176))
  {
    v9 = sub_1C48BF15C((uint64_t *)(a1 + 160), &v16);
    v10 = operator new();
    v11 = v16;
    *(_DWORD *)(v10 + 8) = 7;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 632))(v7, 7);
    *(_QWORD *)(v10 + 16) = v11;
    v14 = v9[1];
    v8 = v9 + 1;
    v13 = v14;
    *(_DWORD *)(v10 + 12) = v12;
    *(_QWORD *)v10 = &unk_1E7FA1730;
    *(_BYTE *)(v10 + 24) = a4;
    *v8 = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else
  {
    v8 = (uint64_t *)(v18 + 8);
  }
  return *v8;
}

uint64_t sub_1C48BF0C0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_14;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C48BF15C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C48BF0C0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C48BF1B8((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C48BF1B8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C48BF268(a1, v7);
  v9 = 0;
  sub_1C48BF0C0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C48BF268(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C48BF320(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C48BF320(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C48BF0C0((uint64_t *)v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C48BF3EC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48BF400(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1C48BF408()
{
  return 1;
}

uint64_t sub_1C48BF410()
{
  return 1;
}

uint64_t sub_1C48BF418()
{
  return 1;
}

void sub_1C48BF420()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48BF434()
{
  return 1;
}

uint64_t sub_1C48BF43C(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned int *a14, uint64_t a15, unsigned __int8 a16, __int32 a17)
{
  unsigned int v17;
  uint8x8_t v18;
  char *v19;
  uint64_t v20;

  v17 = a12 ^ 1;
  if (a5 == -1)
  {
    v20 = 80;
    if (a13)
      v20 = 40;
    v19 = (char *)&unk_1C646D430 + 120 * v17 + 20 * (a3 != 7) + v20 + ((2 * *a14) & 0x1FFFFFFFCLL);
  }
  else
  {
    a1.i32[0] = a17;
    v18 = (uint8x8_t)vcnt_s8(a1);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = (char *)&unk_1C646BB00
        + 3200 * a7
        + 1600 * v17
        + 320 * (v18.i32[0] - (a16 ^ 1))
        + 160 * (a13 ^ 1)
        + 16 * *a14
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

void *sub_1C48BF514(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4073;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F10;
  return result;
}

void *sub_1C48BF5E0(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4077;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F48;
  return result;
}

uint64_t sub_1C48BF6AC()
{
  return 1;
}

void sub_1C48BF6B4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48BF6C8()
{
  return 1;
}

uint64_t sub_1C48BF6D0(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::detail::DoubleAPFloat *v16;
  void *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v22;
  unsigned int v23;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a2 + 4);
  if ((v5 & 0x80000000) != 0)
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v5);
  v7 = *v6;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (v9)
      {
        v10 = **(unsigned __int16 **)(v9 + 16);
        if (v10 == 121)
        {
          if (a4)
            *a4 = 1;
          v15 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48);
          v17 = *(void **)(v15 + 32);
          v16 = (llvm::detail::DoubleAPFloat *)(v15 + 32);
          if (v17 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v16, (unsigned int *)&v22);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v16, (unsigned int *)&v22);
          v18 = v22;
          v19 = v23 >= 0x41;
          if (v23 >= 0x41)
            v20 = v22;
          else
            v20 = &v22;
          *a3 = *v20;
          if (v19 && v18)
            MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
          return 1;
        }
        if (v10 == 120)
        {
          if (a4)
            *a4 = 0;
          v11 = *(_QWORD *)(v9 + 32);
          v12 = *(unsigned __int8 *)(v11 + 32);
          v13 = (_QWORD *)(v11 + 48);
          if (v12 != 1)
          {
            v14 = *v13;
            v13 = (_QWORD *)(*v13 + 24);
            if (*(_DWORD *)(v14 + 32) >= 0x41u)
              v13 = (_QWORD *)*v13;
          }
          *a3 = *v13;
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C48BF81C(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a2 + 4);
  if ((v5 & 0x80000000) != 0)
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v5);
  v7 = *v6;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (v9)
      {
        v10 = **(unsigned __int16 **)(v9 + 16);
        if (v10 == 121)
        {
          if (a4)
            *a4 = 1;
          v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48);
          v13 = *(void **)(v11 + 32);
          v12 = (llvm::detail::DoubleAPFloat *)(v11 + 32);
          if (v13 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (unsigned int *)&v19);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (unsigned int *)&v19);
          if (v20 > 0x40)
          {
            *a3 = *v19;
            MEMORY[0x1CAA32F9C]();
          }
          else
          {
            *a3 = (uint64_t)((_QWORD)v19 << -(char)v20) >> -(char)v20;
          }
          return 1;
        }
        if (v10 == 120)
        {
          if (a4)
            *a4 = 0;
          v14 = *(_QWORD *)(v9 + 32);
          if (*(_BYTE *)(v14 + 32) == 1)
          {
            v15 = *(_QWORD *)(v14 + 48);
          }
          else
          {
            v16 = *(_QWORD *)(v14 + 48);
            v17 = *(_DWORD *)(v16 + 32);
            if (v17 > 0x40)
              v15 = **(_QWORD **)(v16 + 24);
            else
              v15 = (uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v17) >> -(char)v17;
          }
          *a3 = v15;
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C48BF98C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int16 v6;
  unsigned int v7;
  int v8;

  v8 = 0;
  result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), &v8);
  v6 = v8;
  v7 = *(_DWORD *)a3 & 0xFFF00000;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 64;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = v7 & 0xFFF000FF | ((v6 & 0xFFF) << 8) | 7;
  *(_DWORD *)(a3 + 4) = a2;
  return result;
}

void sub_1C48BF9F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
}

_OWORD *sub_1C48BFA08(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  _QWORD **v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  int v27;
  _OWORD *v28;
  __int128 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t (*v35)(void);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _OWORD *v40;
  __int128 v41;
  int v42;
  _OWORD *v43;
  __int128 v44;
  BOOL v45;
  int v46;
  char v47;
  unsigned int v48;
  _QWORD v49[4];

  v10 = (_QWORD **)result;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    v11 = 0;
  }
  else
  {
    v11 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)result + 16))(result, a4);
    LODWORD(v49[0]) = -1;
    result = (_OWORD *)((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[19])(v10, v11, v49, 0);
    if (SLODWORD(v49[0]) >= 0)
      v12 = (int)result;
    else
      v12 = 0;
    if (!(v12 | result ^ 1))
      v11 = 0;
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(_BYTE *)(a2 + 61))
      v13 = 0;
    else
      v13 = *(_BYTE *)(a2 + 60) == 0;
    if (v13 && *(_DWORD *)(a2 + 48) == -1)
    {
      v15 = *(_DWORD *)(a2 + 4);
      if (!v15)
        goto LABEL_34;
    }
    else
    {
      result = (_OWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v10[1] + 224))(v10[1], a2);
      v15 = result >> 1;
      if (!(result >> 1))
      {
LABEL_34:
        if (v11)
        {
          ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t))(*v10)[21])(v49, v10, v11);
          result = (_OWORD *)sub_1C47C0F60(a6, (unint64_t)v49, 1);
          v25 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
          v26 = result[1];
          *v25 = *result;
          v25[1] = v26;
          ++*(_DWORD *)(a6 + 8);
          v27 = 12;
        }
        else
        {
          v27 = 8;
        }
LABEL_37:
        *a5 = v27;
        return result;
      }
    }
    v23 = 0;
    do
    {
      v24 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*v10)[2])(v10, a4, (v23 + *(_DWORD *)(a2 + 72)));
      result = (_OWORD *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v24, a6, 0xFFFFFFFFLL);
      ++v23;
    }
    while (v15 != v23);
    goto LABEL_34;
  }
  v16 = *(_DWORD *)(a2 + 76);
  v17 = *(_DWORD *)(a2 + 68);
  if (v16 != -1 || v17 != -1)
  {
    if (v17 == -1)
      v19 = v16;
    else
      v19 = v17;
    v20 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v19);
    if (*(_DWORD *)(a2 + 92) != -1)
    {
      v48 = -1;
      v21 = ((uint64_t (*)(_QWORD **, uint64_t, unsigned int *, _QWORD))(*v10)[18])(v10, v20, &v48, 0);
      if ((v21 & (v48 < 0xFF)) != 0)
        v22 = 7;
      else
        v22 = 6;
      *a5 = v22;
      ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t))(*v10)[21])(v49, v10, v20);
      goto LABEL_46;
    }
    if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[30])(v10, v20) & 1) != 0
      || ((unsigned int (*)(_QWORD **, uint64_t))(*v10)[28])(v10, v20))
    {
      if ((*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]))
        goto LABEL_43;
    }
    else if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[31])(v10, v20) & 1) == 0
           && !((unsigned int (*)(_QWORD **, uint64_t))(*v10)[29])(v10, v20)
           || (*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_43:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
    }
    v48 = -1;
    v47 = 0;
    v30 = ((uint64_t (*)(_QWORD **, uint64_t, unsigned int *, char *))(*v10)[18])(v10, v20, &v48, &v47);
    result = 0;
    v31 = v30 ^ 1;
    if (v48)
      v31 = 1;
    if (v17 == -1)
      v32 = v31;
    else
      v32 = 1;
    if (v11)
    {
      if (v30)
      {
        if (v32)
        {
          LODWORD(v49[0]) = 0;
          result = (_OWORD *)((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[18])(v10, v11, v49, 0);
          if ((_DWORD)result)
            v48 |= LODWORD(v49[0]) << 16;
        }
      }
    }
    if (v11)
      v33 = v32;
    else
      v33 = 0;
    if ((_DWORD)result || !v33)
    {
      if ((v30 & v32 | result) != 1)
        goto LABEL_84;
      v36 = v10[4];
      if (*(_DWORD *)(v36[1] + 544) == 1)
        goto LABEL_84;
      v37 = v48;
      v38 = v36[43];
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 224))(v38, v48) & 0xFF00000000) == 0)
      {
        result = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 376))(v38, 1);
        if ((_DWORD)result == -1)
          goto LABEL_84;
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v38 + 232))(v38, v37, result);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 328))(v38, v37);
      }
      v35 = *(uint64_t (**)(void))(*v10[1] + 56);
    }
    else
    {
      result = (_OWORD *)((uint64_t (*)(_QWORD **, uint64_t))(*v10)[22])(v10, v20);
      if ((_DWORD)result == -1)
        goto LABEL_84;
      v34 = result;
      result = (_OWORD *)((uint64_t (*)(_QWORD **, uint64_t))(*v10)[22])(v10, v11);
      if ((v34 & 3) != 0 || (_DWORD)result == -1 || v34 > 0xFF || (_DWORD)result != v34 + 2)
        goto LABEL_84;
      v35 = *(uint64_t (**)(void))(*v10[1] + 56);
    }
    result = (_OWORD *)v35();
    if ((_DWORD)result != -1)
    {
      if (v11)
        v39 = v32;
      else
        v39 = 0;
      if (v39 == 1)
        ((void (*)(_QWORD *__return_ptr, _QWORD **, _OWORD *))(*v10)[45])(v49, v10, result);
      else
        ((void (*)(_QWORD *__return_ptr, _QWORD **, _OWORD *))(*v10)[20])(v49, v10, result);
      result = (_OWORD *)sub_1C47C0F60(a6, (unint64_t)v49, 1);
      v42 = 0;
      goto LABEL_88;
    }
LABEL_84:
    if (v32)
    {
      ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t))(*v10)[21])(v49, v10, v20);
      result = (_OWORD *)sub_1C47C0F60(a6, (unint64_t)v49, 1);
      v40 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
      v41 = result[1];
      *v40 = *result;
      v40[1] = v41;
      ++*(_DWORD *)(a6 + 8);
    }
    if (!v11)
    {
      v42 = 1;
LABEL_90:
      if (v17 == -1)
      {
        v45 = v11 == 0;
        if (!v32)
        {
          if (v11)
            v27 = 9;
          else
            v27 = 0;
          goto LABEL_37;
        }
        if (!v42)
        {
          if (v11)
            v27 = 10;
          else
            v27 = 1;
          goto LABEL_37;
        }
        v27 = 5;
        v46 = 11;
      }
      else
      {
        v45 = v42 == 0;
        v27 = 2;
        v46 = 6;
      }
      if (!v45)
        v27 = v46;
      goto LABEL_37;
    }
    ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t))(*v10)[21])(v49, v10, v11);
    v42 = 1;
    result = (_OWORD *)sub_1C47C0F60(a6, (unint64_t)v49, 1);
LABEL_88:
    v43 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v44 = result[1];
    *v43 = *result;
    v43[1] = v44;
    ++*(_DWORD *)(a6 + 8);
    goto LABEL_90;
  }
  if (*(_DWORD *)(a2 + 92) != -1)
  {
    *a5 = 7;
    ((void (*)(_QWORD *__return_ptr, _QWORD **, _QWORD))(*v10)[9])(v49, v10, 0);
LABEL_46:
    result = (_OWORD *)sub_1C47C0F60(a6, (unint64_t)v49, 1);
    v28 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v29 = result[1];
    *v28 = *result;
    v28[1] = v29;
    ++*(_DWORD *)(a6 + 8);
    return result;
  }
  if (v11)
  {
    *a5 = 9;
    ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t))(*v10)[21])(v49, v10, v11);
    goto LABEL_46;
  }
  *a5 = 0;
  return result;
}

__n128 sub_1C48C0074(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  __n128 result;
  int v11;
  uint64_t v12;
  uint64_t (*v14)(_QWORD **, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _QWORD v23[4];
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 64);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1)
    v11 = 1;
  else
    v11 = v9;
  v12 = *(unsigned int *)(a2 + 80);
  if (v11 != 1 || (_DWORD)v12 != -1)
  {
    v14 = (uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[2];
    if ((_DWORD)v12 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if ((_DWORD)v12 == -1)
        v12 = *(unsigned int *)(a2 + 64);
      v16 = v14(a1, a3, v12);
      ((void (*)(_OWORD *__return_ptr, _QWORD **, uint64_t))(*a1)[21])(v26, a1, v16);
      v19 = v26;
    }
    else
    {
      v17 = ((uint64_t (*)(_QWORD **, uint64_t))v14)(a1, a3);
      v18 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      ((void (*)(_OWORD *__return_ptr, _QWORD **, uint64_t))(*a1)[21])(v25, a1, v18);
      ((void (*)(_OWORD *__return_ptr, _QWORD **, uint64_t))(*a1)[21])(v24, a1, v17);
      v26[0] = v25[0];
      v26[1] = v25[1];
      v26[2] = v24[0];
      v26[3] = v24[1];
      ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t, _OWORD *, uint64_t))(*a1)[12])(v23, a1, a3, v26, 2);
      v19 = v23;
    }
    v20 = sub_1C47C0F60(a4, (unint64_t)v19, 1);
    v21 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    result = *(__n128 *)v20;
    v22 = *(_OWORD *)(v20 + 16);
    *v21 = *(_OWORD *)v20;
    v21[1] = v22;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

void sub_1C48C0210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  void *v32[4];
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 48) != -1)
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(&v33, a1, v17);
    v18 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v33, 1);
    v19 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    ++*(_DWORD *)(a4 + 8);
  }
  v8 = *(_DWORD *)(a2 + 52);
  if (*(_BYTE *)(a2 + 1))
  {
    if (v8 == -1)
      goto LABEL_5;
    goto LABEL_11;
  }
  if (v8 == -1)
    goto LABEL_5;
  if (*(_DWORD *)(a2 + 56) == -1)
  {
LABEL_11:
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(&v33, a1, v13);
    v14 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v33, 1);
    v15 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v16 = v14[1];
    *v15 = *v14;
    v15[1] = v16;
    ++*(_DWORD *)(a4 + 8);
LABEL_5:
    if (*(_DWORD *)(a2 + 56) != -1)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(&v33, a1, v9);
      v10 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v33, 1);
      v11 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
      v12 = v10[1];
      *v11 = *v10;
      v11[1] = v12;
      ++*(_DWORD *)(a4 + 8);
    }
    return;
  }
  v33 = v35;
  v34 = 0x200000000;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v32, a1, v21);
  v22 = (_OWORD *)sub_1C47C0F60((uint64_t)&v33, (unint64_t)v32, 1);
  v23 = (char *)v33 + 32 * v34;
  v24 = v22[1];
  *v23 = *v22;
  v23[1] = v24;
  LODWORD(v34) = v34 + 1;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 56));
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v32, a1, v25);
  v26 = (_OWORD *)sub_1C47C0F60((uint64_t)&v33, (unint64_t)v32, 1);
  v27 = (char *)v33 + 32 * v34;
  v28 = v26[1];
  *v27 = *v26;
  v27[1] = v28;
  LODWORD(v34) = v34 + 1;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(v32, a1, a3, v33);
  v29 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)v32, 1);
  v30 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
  v31 = v29[1];
  *v30 = *v29;
  v30[1] = v31;
  ++*(_DWORD *)(a4 + 8);
  if (v33 != v35)
    free(v33);
}

uint64_t sub_1C48C0510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int GenericVirtualRegister;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *a5;
  if ((*a5 & 1) == 0)
    return 1;
  if (v5 <= 1)
  {
    *a5 = v5 | 2;
    v10 = *(unsigned int *)(a3 + 4) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v11 = *(_QWORD *)(a1 + 64);
    v26 = 129;
    v27 = 0;
    sub_1C5544694(v11, &v26, v10);
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
    v14 = *(unsigned __int8 *)(a3 + 32);
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v13;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (!v14)
      *(_BYTE *)(a3 + 32) = 1;
  }
  if (!*(_BYTE *)(a4 + 32) || *(_BYTE *)a4 || !*(_BYTE *)(a3 + 32) || *(_BYTE *)a3)
    return 0;
  v15 = *(uint64_t **)(a1 + 64);
  v29 = 129;
  v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a3 + 4);
  v28 = 0;
  sub_1C5546D14(v15, &v29, (int *)&v26);
  v17 = v16;
  v18 = *(uint64_t **)(a1 + 64);
  v29 = 129;
  v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a4 + 4);
  v28 = 0;
  sub_1C5546D14(v18, &v29, (int *)&v26);
  v20 = v19;
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), 4194324, "", 0);
  v22 = *(_QWORD *)(a1 + 64);
  LODWORD(v26) = GenericVirtualRegister;
  v27 = 1;
  v23 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 4);
  HIDWORD(v29) = v23;
  sub_1C5547750(v22, (uint64_t)&v26, (int *)&v29, 2);
  v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
  if (!*(_BYTE *)(a3 + 32))
    *(_BYTE *)(a3 + 32) = 1;
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v25;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)a4 = 0;
  result = 1;
  *(_BYTE *)(a4 + 32) = 0;
  return result;
}

_OWORD *sub_1C48C06E4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, unint64_t a11, __int128 *a12, uint64_t a13, int a14, __int128 *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  _OWORD *result;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[4];
  __int128 v77;
  __int128 v78;

  if (a10)
  {
    v29 = 8 * a10;
    do
    {
      LODWORD(v76[0]) = *a9;
      v30 = *(_QWORD *)(a21 + 24);
      if (!v30)
        goto LABEL_36;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v30 + 48))(&v77, v30, v76);
      v31 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
      v32 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v33 = v31[1];
      *v32 = *v31;
      v32[1] = v33;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v29 -= 8;
    }
    while (v29);
  }
  if (a18)
  {
    ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t, uint64_t, uint64_t))(*a1)[12])(v76, a1, a3, a17, a18);
    v62 = *(_QWORD *)(a22 + 24);
    if (!v62)
      goto LABEL_36;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v62 + 48))(&v77, v62, v76);
    v63 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
    v64 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v65 = v63[1];
    *v64 = *v63;
    v64[1] = v65;
    ++*(_DWORD *)(a20 + 8);
  }
  v34 = (_OWORD *)sub_1C47C0F60(a20, a5, 1);
  v35 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
  v36 = v34[1];
  *v35 = *v34;
  v35[1] = v36;
  ++*(_DWORD *)(a20 + 8);
  if (*(_BYTE *)(a6 + 32))
  {
    v37 = (_OWORD *)sub_1C47C0F60(a20, a6, 1);
    v38 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v39 = v37[1];
    *v38 = *v37;
    v38[1] = v39;
    ++*(_DWORD *)(a20 + 8);
  }
  if (*(_DWORD *)(a2 + 92) == -1 && *(_BYTE *)(a7 + 32))
  {
    v40 = (_OWORD *)sub_1C47C0F60(a20, a7, 1);
    v41 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v42 = v40[1];
    *v41 = *v40;
    v41[1] = v42;
    ++*(_DWORD *)(a20 + 8);
  }
  v43 = (_OWORD *)sub_1C47C0F60(a20, a11, 1);
  v44 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
  v45 = v43[1];
  *v44 = *v43;
  v44[1] = v45;
  ++*(_DWORD *)(a20 + 8);
  result = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 184))(a1[1]);
  if ((_DWORD)result)
  {
    LODWORD(v76[0]) = 0;
    v47 = *(_QWORD *)(a21 + 24);
    if (!v47)
      goto LABEL_36;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v47 + 48))(&v77, v47, v76);
    result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
    v48 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v49 = result[1];
    *v48 = *result;
    v48[1] = v49;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    v51 = 32 * a13;
    do
    {
      v52 = *a12;
      v53 = a12[1];
      a12 += 2;
      v77 = v52;
      v78 = v53;
      result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
      v54 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v55 = result[1];
      *v54 = *result;
      v54[1] = v55;
      ++*(_DWORD *)(a20 + 8);
      v51 -= 32;
    }
    while (v51);
    if (a14 != 7)
    {
      result = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 184))(a1[1]);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a2 + 92) == -1
          || (result = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 320))(a1[1]), (_DWORD)result))
        {
          LODWORD(v76[0]) = 0;
          v56 = *(_QWORD *)(a21 + 24);
          if (!v56)
            goto LABEL_36;
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v56 + 48))(&v77, v56, v76);
          result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
          v57 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
          v58 = result[1];
          *v57 = *result;
          v57[1] = v58;
          ++*(_DWORD *)(a20 + 8);
        }
      }
    }
  }
  if (a16)
  {
    v67 = 32 * a16;
    do
    {
      v68 = *a15;
      v69 = a15[1];
      a15 += 2;
      v77 = v68;
      v78 = v69;
      result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
      v70 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v71 = result[1];
      *v70 = *result;
      v70[1] = v71;
      ++*(_DWORD *)(a20 + 8);
      v67 -= 32;
    }
    while (v67);
    if (!a18)
    {
      LODWORD(v76[0]) = 0;
      v72 = *(_QWORD *)(a21 + 24);
      if (!v72)
        goto LABEL_36;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v72 + 48))(&v77, v72, v76);
      result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
      v73 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v74 = result[1];
      *v73 = *result;
      v73[1] = v74;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (*(_DWORD *)(a2 + 92) != -1)
    return result;
  LODWORD(v76[0]) = 0;
  v59 = *(_QWORD *)(a21 + 24);
  if (!v59)
  {
LABEL_36:
    sub_1C485C2F0();
    return (_OWORD *)sub_1C48C0B5C(v75);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v59 + 48))(&v77, v59, v76);
  result = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v77, 1);
  v60 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
  v61 = result[1];
  *v60 = *result;
  v60[1] = v61;
  ++*(_DWORD *)(a20 + 8);
  return result;
}

uint64_t sub_1C48C0B5C(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;

  v2 = (void **)(a1 + 784);
  if (*(_DWORD *)(a1 + 832) >= 0x41u)
  {
    v9 = *(_QWORD *)(a1 + 824);
    if (v9)
    {
      v11 = v2;
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
      v2 = v11;
    }
  }
  if (*(_DWORD *)(a1 + 816) >= 0x41u)
  {
    v10 = *(_QWORD *)(a1 + 808);
    if (v10)
    {
      v12 = v2;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      v2 = v12;
    }
  }
  sub_1C48C0D78(v2);
  v3 = *(void **)(a1 + 744);
  if (v3)
  {
    *(_QWORD *)(a1 + 752) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 688);
  if (v4 != *(void **)(a1 + 680))
    free(v4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 656), 8);
  v5 = *(void **)(a1 + 424);
  if (v5 != (void *)(a1 + 440))
    free(v5);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 400), 4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 4);
  v6 = *(void **)(a1 + 304);
  if (v6 != (void *)(a1 + 320))
    free(v6);
  v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 240))
    free(v7);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 200), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 176), 8);
  sub_1C48C0DF0(a1 + 152);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  return a1;
}

uint64_t sub_1C48C0CF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24) >= 0x41u)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = result;
      MEMORY[0x1CAA32F9C](v1, 0x1000C8000313F17);
      result = v2;
    }
  }
  if (*(_DWORD *)(result + 8) >= 0x41u)
  {
    if (*(_QWORD *)result)
    {
      v3 = result;
      MEMORY[0x1CAA32F9C](*(_QWORD *)result, 0x1000C8000313F17);
      return v3;
    }
  }
  return result;
}

void **sub_1C48C0D78(void **result)
{
  void **v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void **v5;
  void **v6;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = result;
    v3 = (char *)(v1 - 4);
    v4 = 40 * v2;
    do
    {
      sub_1C48C0CF0((uint64_t)&v3[v4]);
      v4 -= 40;
    }
    while (v4);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

uint64_t sub_1C48C0DF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = MEMORY[0x1CAA32FB4](*v3, 8);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C48C0E48(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int IncompleteVirtualRegister;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (**v24)();
  int v25;
  int v26;
  uint64_t *v27;
  llvm::MachineFunction *v28;
  llvm::MachineInstr *v29;
  llvm::MachineInstr *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::MachineInstr *v35;
  llvm::MachineInstr *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  void (**v40)(uint64_t *);
  uint64_t (***v41)();
  void (**v42)(uint64_t (***)());
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t (**v46)();
  const char *v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  llvm::MachineFunction *v53;
  llvm::MachineInstr *v54;
  int v55;
  int64_t v56;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  llvm::MachineFunction *v67;
  llvm::MachineInstr *v68;
  llvm::MachineInstr *v69;
  size_t v71;
  void *v72;
  void *__src;
  unsigned int v74;
  char v75;
  uint64_t v76;
  _QWORD *(*v77)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t *v78;
  uint64_t (**v79)();
  BOOL (*v80)(_BOOL8);
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  v9 = sub_1C554C050(a2, *a1);
  v11 = v10;
  v12 = sub_1C554C050(a3, *a1);
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    IncompleteVirtualRegister = sub_1C48B6FC4(v8, a1[2], 129, v9 | ((unint64_t)v12 << 8), 0);
    return IncompleteVirtualRegister | 0x100000000;
  }
  v15 = *a1;
  if ((a3 & 0x80000000) != 0)
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  else
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * a3);
  v18 = *v16;
  if (v18 && ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0))
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((a2 & 0x80000000) != 0)
      goto LABEL_16;
  }
  else
  {
    v19 = 0;
    if ((a2 & 0x80000000) != 0)
    {
LABEL_16:
      v20 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
      goto LABEL_17;
    }
  }
  v20 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * a2);
LABEL_17:
  v21 = *v20;
  if (v21 && ((*(_BYTE *)(v21 + 3) & 1) != 0 || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0))
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = 0;
  v23 = **(unsigned __int16 **)(v19 + 16);
  if (v23 == 68)
  {
    if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v15 + 432))
      v24 = *(uint64_t (***)())(*(_QWORD *)(v15 + 424) + 8 * (a2 & 0x7FFFFFFF));
    else
      v24 = 0;
    v79 = v24;
    v33 = sub_1C4825F50((unint64_t *)&v79);
    if ((_DWORD)v32 == 1)
    if (v33 == 16)
    {
      v34 = (uint64_t *)a1[3];
      v76 = 4194324;
      LODWORD(v77) = 0;
      LODWORD(v79) = a2;
      LODWORD(v81) = 0;
      sub_1C5546EF4(v34, &v76, (int *)&v79);
      v36 = v35;
      v37 = *(unsigned int *)(a4 + 8);
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v37 + 1, 8);
        LODWORD(v37) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v37) = v36;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_35;
    }
    goto LABEL_82;
  }
  v25 = **(unsigned __int16 **)(v22 + 16);
  if (v25 == 68)
  {
    if (*(_BYTE *)(v8 + 96))
      v26 = 6197;
    else
      v26 = 6251;
    v27 = (uint64_t *)a1[3];
    v76 = (uint64_t)&off_1E7FA5F10;
    LODWORD(v77) = 2;
    v28 = (llvm::MachineFunction *)sub_1C5548620(v27, v26, &v76, 1, 0, 0, 0);
    v30 = v29;
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v79);
    v80 = 0;
    v81 = 0;
    LODWORD(v79) = 0;
    HIDWORD(v79) = a3;
    v82 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 8;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 8;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v79);
    sub_1C554AE8C(v30, *(_QWORD *)(v8 + 72), *(_QWORD **)(v8 + 80));
    v31 = *((_QWORD *)v30 + 4);
    goto LABEL_36;
  }
  if (v23 != 128)
  {
    if (v23 == 260 && v25 == 260)
    {
      IncompleteVirtualRegister = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 36);
      if ((IncompleteVirtualRegister & 0x80000000) != 0
        && (IncompleteVirtualRegister & 0x7FFFFFFF) < *(_DWORD *)(v15 + 432))
      {
        v46 = *(uint64_t (***)())(*(_QWORD *)(v15 + 424) + 8 * (IncompleteVirtualRegister & 0x7FFFFFFF));
      }
      else
      {
        v46 = 0;
      }
      v79 = v46;
      v48 = sub_1C4825F50((unint64_t *)&v79);
      if ((_DWORD)v47 == 1)
      v49 = *(_DWORD **)(v19 + 32);
      if (v49[9] == IncompleteVirtualRegister)
      {
        v50 = *(_QWORD *)(v22 + 32);
        if (*(_DWORD *)(v50 + 112) == 8 && v49[28] == 8)
        {
          v51 = *(_DWORD *)(v50 + 80);
          if ((v51 & 1) == 0 && v51 + 1 == v49[20])
          {
            if (v48 == 16)
              return IncompleteVirtualRegister | 0x100000000;
            if (v48 == 32)
            {
              v52 = (uint64_t *)a1[3];
              v76 = (uint64_t)&off_1E7FA5F10;
              LODWORD(v77) = 2;
              v53 = (llvm::MachineFunction *)sub_1C5548620(v52, 19, &v76, 1, 0, 0, 0);
              v36 = v54;
              v80 = 0;
              v81 = 0;
              v82 = 0;
              LODWORD(v79) = ((v51 << 7) + 256) & 0xFFF00;
              HIDWORD(v79) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v54, v53, (const llvm::MachineOperand *)&v79);
LABEL_35:
              v31 = *((_QWORD *)v36 + 4);
LABEL_36:
              IncompleteVirtualRegister = *(_DWORD *)(v31 + 4);
              return IncompleteVirtualRegister | 0x100000000;
            }
          }
        }
      }
    }
    goto LABEL_82;
  }
  v38 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 68);
  v79 = &off_1E816EFF0;
  v80 = sub_1C554C7E0;
  v82 = (unint64_t *)&v79;
  v76 = (uint64_t)&off_1E816F038;
  v77 = sub_1C554C7F8;
  v78 = &v76;
  sub_1C554C3AC(v38, v15, (uint64_t)&v79, (uint64_t)&v76, 0, 0, &__src);
  v39 = v78;
  if (v78 == &v76)
  {
    v40 = (void (**)(uint64_t *))(v76 + 32);
    v39 = &v76;
LABEL_40:
    (*v40)(v39);
    goto LABEL_41;
  }
  if (v78)
  {
    v40 = (void (**)(uint64_t *))(*v78 + 40);
    goto LABEL_40;
  }
LABEL_41:
  v41 = (uint64_t (***)())v82;
  if (v82 == (unint64_t *)&v79)
  {
    v42 = (void (**)(uint64_t (***)()))(v79 + 4);
    v41 = &v79;
  }
  else
  {
    if (!v82)
      goto LABEL_44;
    v42 = (void (**)(uint64_t (***)()))(*v82 + 40);
  }
  (*v42)(v41);
LABEL_44:
  if (!v75)
  {
LABEL_82:
    v63 = *a1;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
    *(_QWORD *)(*(_QWORD *)(v63 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FA5F10;
    v64 = *(_QWORD *)(v63 + 8);
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
    v65 = (uint64_t *)a1[3];
    if (*(_BYTE *)(v8 + 96))
      v66 = 6215;
    else
      v66 = 6269;
    LODWORD(v76) = IncompleteVirtualRegister;
    LODWORD(v77) = 1;
    v67 = (llvm::MachineFunction *)sub_1C5548620(v65, v66, &v76, 1, 0, 0, 0);
    v69 = v68;
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v79);
    v80 = 0;
    v81 = 0;
    LODWORD(v79) = 0;
    HIDWORD(v79) = a2;
    v82 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    v80 = 0;
    v81 = 0;
    LODWORD(v79) = 0;
    HIDWORD(v79) = a3;
    v82 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 8;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    LODWORD(v79) = 1;
    v80 = 0;
    v81 = 8;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v79);
    sub_1C554AE8C(v69, *(_QWORD *)(v8 + 72), *(_QWORD **)(v8 + 80));
    return IncompleteVirtualRegister | 0x100000000;
  }
  v43 = v74;
  if (v74 > 0x40)
  {
    v71 = (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8;
    v44 = (_QWORD *)operator new[]();
    v72 = __src;
    memcpy(v44, __src, v71);
    if (v72)
      MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  }
  else
  {
    v44 = __src;
  }
  if (*(_DWORD *)(*(_QWORD *)(v19 + 32) + 36) != a2)
    goto LABEL_79;
  if (v43 > 0x40)
  {
    v55 = 0;
    v56 = (unint64_t)(v43 + 63) >> 6;
    do
    {
      if (v56-- < 1)
        break;
      v58 = v44[v56];
      v55 += __clz(v58);
    }
    while (!v58);
    v59 = v43 | 0xFFFFFFC0;
    if ((v43 & 0x3F) == 0)
      v59 = 0;
    if ((v43 - v55 - v59) > 0x40)
      goto LABEL_79;
    v45 = (_QWORD *)*v44;
  }
  else
  {
    v45 = v44;
  }
  if (v45 != (_QWORD *)8)
  {
LABEL_79:
    if (v43 >= 0x41 && v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    goto LABEL_82;
  }
  v60 = *a1;
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
  *(_QWORD *)(*(_QWORD *)(v60 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FA5F10;
  v61 = *(_QWORD *)(v60 + 8);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
  v62 = a1[3];
  LODWORD(v76) = IncompleteVirtualRegister;
  LODWORD(v77) = 1;
  LODWORD(v79) = a2;
  LODWORD(v81) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t (***)(), uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 19, &v76, 1, &v79, 1, 0);
  if (v43 >= 0x41 && v44)
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  return IncompleteVirtualRegister | 0x100000000;
}

uint64_t sub_1C48C16A8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 *a9, char a10, int a11, int a12)
{
  uint64_t v18;
  uint64_t v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  _QWORD *v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  _QWORD *v25;
  void (**v26)(void);
  uint64_t *v27;
  void (**v28)(void);
  uint64_t *v29;
  void (**v30)(void);
  int v31;
  unsigned int v32;
  llvm::MachineInstr *v33;
  llvm::MachineInstr *v34;
  int v35;
  _BYTE *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  __int128 *v47;
  uint64_t v48;
  llvm::MachineFunction *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _OWORD v72[5];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _OWORD v76[5];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unsigned int v80[20];
  int v81;
  int v82;
  unsigned int v83[20];
  int v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD v93[3];
  _QWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(v18 + 32);
  sub_1C48AA43C((uint64_t)v83, a2, a1[10], a1[11], a6, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v80, a2, a1[10], a1[11], a7, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v76, a2, a1[10], a1[11], a8, 1, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v72, a2, a1[10], a1[11], a9, 1, 0, 0, 0);
  v20 = 0;
  if (*a8 && (int)v77 <= 3)
  {
    v20 = sub_1C48C2B18((const llvm::MachineOperand *)a8, a3);
    sub_1C48AA43C((uint64_t)&v95, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 1, 0, 0, 0);
    v76[4] = v99;
    v77 = v100;
    v78 = v101;
    v79 = v102;
    v76[0] = v95;
    v76[1] = v96;
    v76[2] = v97;
    v76[3] = v98;
  }
  v21 = 0;
  if (*a9 && (int)v73 <= 3)
  {
    v21 = sub_1C48C2B18((const llvm::MachineOperand *)a9, a3);
    sub_1C48AA43C((uint64_t)&v95, a2, a1[10], a1[11], *((unsigned __int8 **)v21 + 4), 1, 0, 0, 0);
    v72[4] = v99;
    v73 = v100;
    v74 = v101;
    v75 = v102;
    v72[0] = v95;
    v72[1] = v96;
    v72[2] = v97;
    v72[3] = v98;
  }
  v22 = operator new(0x30uLL);
  *v22 = &off_1E7FA16A0;
  v22[1] = sub_1C48ABC08;
  v22[2] = 0;
  v22[3] = a1;
  v22[4] = a2;
  *((_DWORD *)v22 + 10) = 0;
  *((_BYTE *)v22 + 44) = 1;
  v94 = v22;
  sub_1C48B7DE4(v83, (uint64_t)v22);
  v23 = v94;
  if (v94 == v93)
  {
    v24 = (void (**)(_QWORD *))(v93[0] + 32);
    v23 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_12;
    v24 = (void (**)(_QWORD *))(*v94 + 40);
  }
  (*v24)(v23);
LABEL_12:
  v25 = operator new(0x30uLL);
  *v25 = &off_1E7FA16A0;
  v25[1] = sub_1C48ABC08;
  v25[2] = 0;
  v25[3] = a1;
  v25[4] = a2;
  *((_DWORD *)v25 + 10) = 0;
  *((_BYTE *)v25 + 44) = 1;
  v92 = v25;
  sub_1C48B7DE4(v80, (uint64_t)v25);
  if (v92 == &v91)
  {
    v26 = (void (**)(void))(v91 + 32);
  }
  else
  {
    if (!v92)
      goto LABEL_17;
    v26 = (void (**)(void))(*v92 + 40);
  }
  (*v26)();
LABEL_17:
  v27 = (uint64_t *)operator new(0x28uLL);
  *v27 = (uint64_t)&off_1E7FA16E8;
  v27[1] = (uint64_t)sub_1C48AD47C;
  v27[2] = 0;
  v27[3] = (uint64_t)a1;
  v27[4] = a2;
  v90 = v27;
  sub_1C48B7DE4((unsigned int *)v76, (uint64_t)v27);
  if (v90 == &v89)
  {
    v28 = (void (**)(void))(v89 + 32);
  }
  else
  {
    if (!v90)
      goto LABEL_22;
    v28 = (void (**)(void))(*v90 + 40);
  }
  (*v28)();
LABEL_22:
  v29 = (uint64_t *)operator new(0x28uLL);
  *v29 = (uint64_t)&off_1E7FA16E8;
  v29[1] = (uint64_t)sub_1C48AD47C;
  v29[2] = 0;
  v29[3] = (uint64_t)a1;
  v29[4] = a2;
  v88 = v29;
  sub_1C48B7DE4((unsigned int *)v72, (uint64_t)v29);
  if (v88 == &v87)
  {
    v30 = (void (**)(void))(v87 + 32);
  }
  else
  {
    if (!v88)
      goto LABEL_27;
    v30 = (void (**)(void))(*v88 + 40);
  }
  (*v30)();
LABEL_27:
  v31 = a12;
  if (a4)
  {
    v32 = dword_1C646D5A0[8 * (v84 > 3) + 4 * (v81 > 3) + 2 * ((int)v77 > 3) + ((int)v73 > 3)];
  }
  else
  {
    v33 = v21;
    v34 = v20;
    if (a10)
      v35 = 5;
    else
      v35 = 2;
    *(_QWORD *)&v95 = &v96;
    *((_QWORD *)&v95 + 1) = 0x500000000;
    sub_1C4893E04((char *)&v95, 1uLL, v35);
    v36 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 8) + 16))(*(_QWORD *)(v19 + 8), *(_QWORD *)v19);
    if (v84 >= 4)
    {
      v38 = DWORD2(v95);
      v39 = HIDWORD(v95);
      v37 = 1;
    }
    else
    {
      if (v85 == 32)
        v37 = 5;
      else
        v37 = 2;
      v38 = DWORD2(v95);
      v39 = HIDWORD(v95);
    }
    if (v38 >= v39)
    {
      v67 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)&v96, v38 + 1, 4);
      v36 = v67;
      v38 = DWORD2(v95);
    }
    *(_DWORD *)(v95 + 4 * v38) = v37;
    v40 = ++DWORD2(v95);
    v20 = v34;
    v31 = a12;
    if (v81 >= 4)
    {
      v42 = HIDWORD(v95);
      v41 = 1;
    }
    else
    {
      if (v82 == 32)
        v41 = 5;
      else
        v41 = 2;
      v42 = HIDWORD(v95);
    }
    v21 = v33;
    if (v40 >= v42)
    {
      v68 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)&v96, v40 + 1, 4);
      v36 = v68;
      LODWORD(v40) = DWORD2(v95);
    }
    *(_DWORD *)(v95 + 4 * v40) = v41;
    v43 = ++DWORD2(v95);
    if ((int)v77 > 3)
      v44 = 1;
    else
      v44 = v35;
    if (v43 >= HIDWORD(v95))
    {
      v69 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)&v96, v43 + 1, 4);
      v36 = v69;
      LODWORD(v43) = DWORD2(v95);
    }
    *(_DWORD *)(v95 + 4 * v43) = v44;
    v45 = ++DWORD2(v95);
    if ((int)v73 > 3)
      v46 = 1;
    else
      v46 = v35;
    if (v45 >= HIDWORD(v95))
    {
      v70 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)&v96, v45 + 1, 4);
      v36 = v70;
      LODWORD(v45) = DWORD2(v95);
    }
    *(_DWORD *)(v95 + 4 * v45) = v46;
    ++DWORD2(v95);
    v47 = (__int128 *)v95;
    v32 = sub_1C4884024(30, (_DWORD *)v95, DWORD2(v95), v36);
    if (v47 != &v96)
      free(v47);
  }
  v48 = *(_QWORD *)(a1[9] + 8) + 48 * v32;
  if ((*(_WORD *)(a3 + 44) & 4) != 0)
  {
    v49 = *(llvm::MachineFunction **)(v18 + 32);
    v52 = *(unsigned __int8 **)(a3 + 56);
    v86 = v52;
    if (v52)
      llvm::MetadataTracking::track((uint64_t)&v86, v52, 2);
    v51 = *((_QWORD *)v49 + 28);
    if (v51)
      *((_QWORD *)v49 + 28) = *(_QWORD *)v51;
    else
      v51 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
    *(_QWORD *)&v95 = v86;
    if (v86)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v86, v86, (uint64_t)&v95);
      v86 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v49, v48, (unsigned __int8 **)&v95, 0);
    if ((_QWORD)v95)
      llvm::MetadataTracking::untrack((uint64_t)&v95, (unsigned __int8 *)v95);
    if (v86)
      llvm::MetadataTracking::untrack((uint64_t)&v86, v86);
    if (v18 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0)
      *(_WORD *)(v51 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v18 + 40), (uint64_t *)a3, v51);
  }
  else
  {
    v49 = *(llvm::MachineFunction **)(v18 + 32);
    v50 = *(unsigned __int8 **)(a3 + 56);
    v86 = v50;
    if (v50)
      llvm::MetadataTracking::track((uint64_t)&v86, v50, 2);
    v51 = *((_QWORD *)v49 + 28);
    if (v51)
      *((_QWORD *)v49 + 28) = *(_QWORD *)v51;
    else
      v51 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
    *(_QWORD *)&v95 = v86;
    if (v86)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v86, v86, (uint64_t)&v95);
      v86 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v49, v48, (unsigned __int8 **)&v95, 0);
    if ((_QWORD)v95)
      llvm::MetadataTracking::untrack((uint64_t)&v95, (unsigned __int8 *)v95);
    if (v86)
      llvm::MetadataTracking::untrack((uint64_t)&v86, v86);
    v53 = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v51 + 24) = v53;
    v54 = *(_QWORD *)(v53 + 32);
    v55 = *(unsigned int *)(v51 + 40);
    if ((_DWORD)v55)
    {
      v60 = *(_QWORD *)(v51 + 32);
      v61 = *(_QWORD *)(v54 + 40);
      v62 = 32 * v55;
      do
      {
        if (!*(_BYTE *)v60)
        {
          v63 = *(unsigned int *)(v60 + 4);
          if ((int)v63 >= 0)
            v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
          else
            v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
          v65 = *v64;
          if (*v64)
          {
            v66 = *(_QWORD *)(v65 + 16);
            *(_QWORD *)(v65 + 16) = v60;
            *(_QWORD *)(v60 + 16) = v66;
            if ((*(_BYTE *)(v60 + 3) & 1) != 0)
            {
              *(_QWORD *)(v60 + 24) = v65;
            }
            else
            {
              *(_QWORD *)(v60 + 24) = 0;
              v64 = (uint64_t *)(v66 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v60 + 16) = v60;
            *(_QWORD *)(v60 + 24) = 0;
          }
          *v64 = v60;
        }
        v60 += 32;
        v62 -= 32;
      }
      while (v62);
    }
    v56 = *(_QWORD *)(v54 + 728);
    if (v56)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v56 + 24))(v56, v51);
    v57 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v51 = v57 | *(_QWORD *)v51 & 7;
    *(_QWORD *)(v51 + 8) = a3;
    *(_QWORD *)(v57 + 8) = v51;
    *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v51;
  }
  *((_QWORD *)&v95 + 1) = 0;
  v96 = 0uLL;
  LODWORD(v95) = 0x1000000;
  DWORD1(v95) = v31;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v95);
  v58 = 1;
  LODWORD(v95) = 1;
  *((_QWORD *)&v95 + 1) = 0;
  *(_QWORD *)&v96 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v95);
  LODWORD(v95) = 1;
  *((_QWORD *)&v95 + 1) = 0;
  *(_QWORD *)&v96 = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v95);
  *(_QWORD *)&v95 = v49;
  *((_QWORD *)&v95 + 1) = v51;
  sub_1C48B7F84((llvm::MachineFunction **)&v95, (uint64_t)v83);
  sub_1C48B7F84((llvm::MachineFunction **)&v95, (uint64_t)v80);
  sub_1C48B7F84((llvm::MachineFunction **)&v95, (uint64_t)v76);
  sub_1C48B7F84((llvm::MachineFunction **)&v95, (uint64_t)v72);
  if (v20)
    v58 = (*(uint64_t (**)(_QWORD *, llvm::MachineInstr *))(*a1 + 16))(a1, v20);
  if (v21)
    return v58 & (*(unsigned int (**)(_QWORD *, llvm::MachineInstr *))(*a1 + 16))(a1, v21);
  return v58;
}

uint64_t sub_1C48C2008(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  void *v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int v12;
  void **v13;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x80uLL);
  v5 = v4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v4 = &off_1E7FA1610;
  *(_OWORD *)(v4 + 24) = v6;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 32);
  v4[48] = *(_BYTE *)(a2 + 40);
  v7 = v4 + 72;
  *((_QWORD *)v4 + 7) = v4 + 72;
  *((_QWORD *)v4 + 8) = 0x600000000;
  v8 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v8 && v4 + 56 != (char *)(a2 + 48))
  {
    v9 = *(const void **)(a2 + 48);
    if (v9 != (const void *)(a2 + 64))
    {
      *((_QWORD *)v4 + 7) = v9;
      v12 = *(_DWORD *)(a2 + 60);
      *((_DWORD *)v4 + 16) = v8;
      *((_DWORD *)v4 + 17) = v12;
      *(_QWORD *)(a2 + 48) = a2 + 64;
      *(_DWORD *)(a2 + 60) = 0;
      goto LABEL_8;
    }
    if (v8 >= 7)
    {
      v13 = (void **)(v4 + 56);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 56), (uint64_t)v7, v8, 8);
      v10 = *(unsigned int *)(a2 + 56);
      if (!(_DWORD)v10)
        goto LABEL_7;
      v9 = *(const void **)(a2 + 48);
      v7 = *v13;
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 56);
    }
    memcpy(v7, v9, 8 * v10);
LABEL_7:
    *((_DWORD *)v5 + 16) = v8;
LABEL_8:
    *(_DWORD *)(a2 + 56) = 0;
  }
  *((_DWORD *)v5 + 30) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t sub_1C48C2128(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, char a9, int a10, int a11)
{
  uint64_t v18;
  uint64_t v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  _QWORD *v22;
  _QWORD *v23;
  void (**v24)(_QWORD *);
  _QWORD *v25;
  void (**v26)(void);
  uint64_t *v27;
  void (**v28)(void);
  uint64_t *v29;
  void (**v30)(void);
  int v31;
  _BYTE *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  __int128 *v43;
  unsigned int v44;
  uint64_t v45;
  llvm::MachineFunction *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _OWORD v66[5];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[5];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74[30];
  unsigned int v75[30];
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(v18 + 32);
  sub_1C48AA43C((uint64_t)v75, a2, a1[10], a1[11], a5, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v74, a2, a1[10], a1[11], a6, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v70, a2, a1[10], a1[11], a7, 1, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v66, a2, a1[10], a1[11], a8, 1, 0, 0, 0);
  v20 = 0;
  if (*a7 && (int)v71 <= 3)
  {
    v20 = sub_1C48C2B18((const llvm::MachineOperand *)a7, a3);
    sub_1C48AA43C((uint64_t)&v85, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 1, 0, 0, 0);
    v70[4] = v89;
    v71 = v90;
    v72 = v91;
    v73 = v92;
    v70[0] = v85;
    v70[1] = v86;
    v70[2] = v87;
    v70[3] = v88;
  }
  v21 = 0;
  v65 = a4;
  if (*a8 && (int)v67 <= 3)
  {
    v21 = sub_1C48C2B18((const llvm::MachineOperand *)a8, a3);
    sub_1C48AA43C((uint64_t)&v85, a2, a1[10], a1[11], *((unsigned __int8 **)v21 + 4), 1, 0, 0, 0);
    v66[4] = v89;
    v67 = v90;
    v68 = v91;
    v69 = v92;
    v66[0] = v85;
    v66[1] = v86;
    v66[2] = v87;
    v66[3] = v88;
  }
  v22 = operator new(0x30uLL);
  *v22 = &off_1E7FA16A0;
  v22[1] = sub_1C48ABC08;
  v22[2] = 0;
  v22[3] = a1;
  v22[4] = a2;
  *((_DWORD *)v22 + 10) = 0;
  *((_BYTE *)v22 + 44) = 1;
  v84 = v22;
  sub_1C48B7DE4(v75, (uint64_t)v22);
  v23 = v84;
  if (v84 == v83)
  {
    v24 = (void (**)(_QWORD *))(v83[0] + 32);
    v23 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_12;
    v24 = (void (**)(_QWORD *))(*v84 + 40);
  }
  (*v24)(v23);
LABEL_12:
  v25 = operator new(0x30uLL);
  *v25 = &off_1E7FA16A0;
  v25[1] = sub_1C48ABC08;
  v25[2] = 0;
  v25[3] = a1;
  v25[4] = a2;
  *((_DWORD *)v25 + 10) = 0;
  *((_BYTE *)v25 + 44) = 1;
  v82 = v25;
  sub_1C48B7DE4(v74, (uint64_t)v25);
  if (v82 == &v81)
  {
    v26 = (void (**)(void))(v81 + 32);
  }
  else
  {
    if (!v82)
      goto LABEL_17;
    v26 = (void (**)(void))(*v82 + 40);
  }
  (*v26)();
LABEL_17:
  v27 = (uint64_t *)operator new(0x28uLL);
  *v27 = (uint64_t)&off_1E7FA16E8;
  v27[1] = (uint64_t)sub_1C48AD47C;
  v27[2] = 0;
  v27[3] = (uint64_t)a1;
  v27[4] = a2;
  v80 = v27;
  sub_1C48B7DE4((unsigned int *)v70, (uint64_t)v27);
  if (v80 == &v79)
  {
    v28 = (void (**)(void))(v79 + 32);
  }
  else
  {
    if (!v80)
      goto LABEL_22;
    v28 = (void (**)(void))(*v80 + 40);
  }
  (*v28)();
LABEL_22:
  v29 = (uint64_t *)operator new(0x28uLL);
  *v29 = (uint64_t)&off_1E7FA16E8;
  v29[1] = (uint64_t)sub_1C48AD47C;
  v29[2] = 0;
  v29[3] = (uint64_t)a1;
  v29[4] = a2;
  v78 = v29;
  sub_1C48B7DE4((unsigned int *)v66, (uint64_t)v29);
  if (v78 == &v77)
  {
    v30 = (void (**)(void))(v77 + 32);
  }
  else
  {
    if (!v78)
      goto LABEL_27;
    v30 = (void (**)(void))(*v78 + 40);
  }
  (*v30)();
LABEL_27:
  if (a9)
    v31 = 5;
  else
    v31 = 2;
  *(_QWORD *)&v85 = &v86;
  *((_QWORD *)&v85 + 1) = 0x500000000;
  sub_1C4893E04((char *)&v85, 1uLL, v31);
  v32 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 8) + 16))(*(_QWORD *)(v19 + 8), *(_QWORD *)v19);
  if ((int)v75[20] >= 4)
  {
    v34 = DWORD2(v85);
    v35 = HIDWORD(v85);
    v33 = 1;
  }
  else
  {
    if (v75[22] == 32)
      v33 = 5;
    else
      v33 = 2;
    v34 = DWORD2(v85);
    v35 = HIDWORD(v85);
  }
  if (v34 >= v35)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)&v86, v34 + 1, 4);
    v34 = DWORD2(v85);
  }
  *(_DWORD *)(v85 + 4 * v34) = v33;
  v36 = ++DWORD2(v85);
  if ((int)v74[20] >= 4)
  {
    v38 = HIDWORD(v85);
    v37 = 1;
  }
  else
  {
    if (v74[22] == 32)
      v37 = 5;
    else
      v37 = 2;
    v38 = HIDWORD(v85);
  }
  if (v36 >= v38)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)&v86, v36 + 1, 4);
    LODWORD(v36) = DWORD2(v85);
  }
  *(_DWORD *)(v85 + 4 * v36) = v37;
  v39 = ++DWORD2(v85);
  if ((int)v71 > 3)
    v40 = 1;
  else
    v40 = v31;
  if (v39 >= HIDWORD(v85))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)&v86, v39 + 1, 4);
    LODWORD(v39) = DWORD2(v85);
  }
  *(_DWORD *)(v85 + 4 * v39) = v40;
  v41 = ++DWORD2(v85);
  if ((int)v67 > 3)
    v42 = 1;
  else
    v42 = v31;
  if (v41 >= HIDWORD(v85))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)&v86, v41 + 1, 4);
    LODWORD(v41) = DWORD2(v85);
  }
  *(_DWORD *)(v85 + 4 * v41) = v42;
  ++DWORD2(v85);
  v43 = (__int128 *)v85;
  v44 = sub_1C4884024(34, (_DWORD *)v85, DWORD2(v85), v32);
  if (v43 != &v86)
    free(v43);
  v45 = *(_QWORD *)(a1[9] + 8) + 48 * v44;
  if ((*(_WORD *)(a3 + 44) & 4) != 0)
  {
    v46 = *(llvm::MachineFunction **)(v18 + 32);
    v49 = *(unsigned __int8 **)(a3 + 56);
    v76 = v49;
    if (v49)
      llvm::MetadataTracking::track((uint64_t)&v76, v49, 2);
    v48 = *((_QWORD *)v46 + 28);
    if (v48)
      *((_QWORD *)v46 + 28) = *(_QWORD *)v48;
    else
      v48 = sub_1C484358C((uint64_t)v46 + 128, 72, 3);
    *(_QWORD *)&v85 = v76;
    if (v76)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v85);
      v76 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v48, v46, v45, (unsigned __int8 **)&v85, 0);
    if ((_QWORD)v85)
      llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
    v50 = v65;
    if (v76)
      llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
    if (v18 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0)
      *(_WORD *)(v48 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v18 + 40), (uint64_t *)a3, v48);
  }
  else
  {
    v46 = *(llvm::MachineFunction **)(v18 + 32);
    v47 = *(unsigned __int8 **)(a3 + 56);
    v76 = v47;
    if (v47)
      llvm::MetadataTracking::track((uint64_t)&v76, v47, 2);
    v48 = *((_QWORD *)v46 + 28);
    if (v48)
      *((_QWORD *)v46 + 28) = *(_QWORD *)v48;
    else
      v48 = sub_1C484358C((uint64_t)v46 + 128, 72, 3);
    *(_QWORD *)&v85 = v76;
    if (v76)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v85);
      v76 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v48, v46, v45, (unsigned __int8 **)&v85, 0);
    if ((_QWORD)v85)
      llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
    v50 = v65;
    if (v76)
      llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
    v51 = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v48 + 24) = v51;
    v52 = *(_QWORD *)(v51 + 32);
    v53 = *(unsigned int *)(v48 + 40);
    if ((_DWORD)v53)
    {
      v58 = *(_QWORD *)(v48 + 32);
      v59 = *(_QWORD *)(v52 + 40);
      v60 = 32 * v53;
      do
      {
        if (!*(_BYTE *)v58)
        {
          v61 = *(unsigned int *)(v58 + 4);
          if ((int)v61 >= 0)
            v62 = (uint64_t *)(*(_QWORD *)(v59 + 272) + 8 * v61);
          else
            v62 = (uint64_t *)(*(_QWORD *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
          v63 = *v62;
          if (*v62)
          {
            v64 = *(_QWORD *)(v63 + 16);
            *(_QWORD *)(v63 + 16) = v58;
            *(_QWORD *)(v58 + 16) = v64;
            if ((*(_BYTE *)(v58 + 3) & 1) != 0)
            {
              *(_QWORD *)(v58 + 24) = v63;
            }
            else
            {
              *(_QWORD *)(v58 + 24) = 0;
              v62 = (uint64_t *)(v64 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v58 + 16) = v58;
            *(_QWORD *)(v58 + 24) = 0;
          }
          *v62 = v58;
        }
        v58 += 32;
        v60 -= 32;
      }
      while (v60);
    }
    v54 = *(_QWORD *)(v52 + 728);
    if (v54)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v48);
    v55 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v48 = v55 | *(_QWORD *)v48 & 7;
    *(_QWORD *)(v48 + 8) = a3;
    *(_QWORD *)(v55 + 8) = v48;
    *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v48;
  }
  *((_QWORD *)&v85 + 1) = 0;
  v86 = 0uLL;
  LODWORD(v85) = 0x1000000;
  DWORD1(v85) = a11;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v85);
  v56 = 1;
  LODWORD(v85) = 1;
  *((_QWORD *)&v85 + 1) = 0;
  *(_QWORD *)&v86 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v85);
  LODWORD(v85) = 1;
  *((_QWORD *)&v85 + 1) = 0;
  *(_QWORD *)&v86 = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v85);
  *(_QWORD *)&v85 = v46;
  *((_QWORD *)&v85 + 1) = v48;
  sub_1C48B7F84((llvm::MachineFunction **)&v85, (uint64_t)v75);
  sub_1C48B7F84((llvm::MachineFunction **)&v85, (uint64_t)v74);
  sub_1C48B7F84((llvm::MachineFunction **)&v85, (uint64_t)v70);
  sub_1C48B7F84((llvm::MachineFunction **)&v85, (uint64_t)v66);
  if (v20)
    v56 = (*(uint64_t (**)(_QWORD *, llvm::MachineInstr *))(*a1 + 16))(a1, v20);
  if (v21)
    return v56 & (*(unsigned int (**)(_QWORD *, llvm::MachineInstr *))(*a1 + 16))(a1, v21);
  return v56;
}

uint64_t sub_1C48C2A00(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  void *v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int v12;
  void **v13;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x78uLL);
  v5 = v4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_QWORD *)v4 = &off_1E7FA1658;
  *(_OWORD *)(v4 + 24) = v6;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 32);
  v7 = v4 + 64;
  *((_QWORD *)v4 + 6) = v4 + 64;
  *((_QWORD *)v4 + 7) = 0x600000000;
  v8 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v8 && v4 + 48 != (char *)(a2 + 40))
  {
    v9 = *(const void **)(a2 + 40);
    if (v9 != (const void *)(a2 + 56))
    {
      *((_QWORD *)v4 + 6) = v9;
      v12 = *(_DWORD *)(a2 + 52);
      *((_DWORD *)v4 + 14) = v8;
      *((_DWORD *)v4 + 15) = v12;
      *(_QWORD *)(a2 + 40) = a2 + 56;
      *(_DWORD *)(a2 + 52) = 0;
      goto LABEL_8;
    }
    if (v8 >= 7)
    {
      v13 = (void **)(v4 + 48);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 48), (uint64_t)v7, v8, 8);
      v10 = *(unsigned int *)(a2 + 48);
      if (!(_DWORD)v10)
        goto LABEL_7;
      v9 = *(const void **)(a2 + 40);
      v7 = *v13;
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 48);
    }
    memcpy(v7, v9, 8 * v10);
LABEL_7:
    *((_DWORD *)v5 + 14) = v8;
LABEL_8:
    *(_DWORD *)(a2 + 48) = 0;
  }
  *((_DWORD *)v5 + 28) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

llvm::MachineInstr *sub_1C48C2B18(const llvm::MachineOperand *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  llvm::MachineFunction *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  uint64_t v13[4];
  unsigned __int8 *v14[5];
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1 == 3)
    v4 = 121;
  else
    v4 = 120;
  v5 = *(_QWORD *)(a2 + 24);
  v14[4] = 0;
  v6 = *(_QWORD *)(v5 + 32);
  v13[0] = (uint64_t)&off_1E816EC08;
  v13[1] = v6;
  v13[3] = *(_QWORD *)(v6 + 40);
  v13[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 104))(*(_QWORD *)(v6 + 16));
  v7 = *(unsigned __int8 **)(a2 + 24);
  v14[2] = (unsigned __int8 *)a2;
  v14[3] = 0;
  v14[0] = 0;
  v14[1] = v7;
  if ((unsigned __int8 **)(a2 + 56) != v14)
  {
    v8 = *(unsigned __int8 **)(a2 + 56);
    v14[0] = v8;
    if (v8)
      llvm::MetadataTracking::track((uint64_t)v14, v8, 2);
  }
  v15 = 129;
  v16 = 0;
  v9 = (llvm::MachineFunction *)sub_1C5548620(v13, v4, &v15, 1, 0, 0, 0);
  v11 = v10;
  llvm::MachineInstr::addOperand(v10, v9, a1);
  v13[0] = (uint64_t)&off_1E816EC08;
  if (v14[0])
    llvm::MetadataTracking::untrack((uint64_t)v14, v14[0]);
  return v11;
}

_QWORD *sub_1C48C2C5C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA1610;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  return a1;
}

void sub_1C48C2C9C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA1610;
  v2 = (_QWORD *)a1[7];
  if (v2 != a1 + 9)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48C2CEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x80uLL);
  *v2 = &off_1E7FA1610;
  sub_1C48C2E10((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1C48C2D2C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA1610;
  return sub_1C48C2E10((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1C48C2D48(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2 != (void *)(a1 + 72))
    free(v2);
}

void sub_1C48C2D64(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[7];
  if (v2 != __p + 9)
    free(v2);
  operator delete(__p);
}

uint64_t sub_1C48C2D98(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, unsigned int *a8)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, uint64_t);
  _QWORD *v11;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, uint64_t))(a1 + 8);
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, uint64_t))(*v11 + v10);
  return v10(v11, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *a2, a3, a4, a5, a6, *a7, *a8, a1 + 56);
}

uint64_t sub_1C48C2E10(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = (void *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  v5 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0x600000000;
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6 && a2 != a1)
  {
    if (v6 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, (uint64_t)v4, v6, 8);
      v7 = *(unsigned int *)(a2 + 56);
      if (!(_DWORD)v7)
      {
LABEL_8:
        *(_DWORD *)(a1 + 56) = v6;
        goto LABEL_9;
      }
      v4 = *v5;
    }
    else
    {
      v7 = *(unsigned int *)(a2 + 56);
    }
    memcpy(v4, *(const void **)(a2 + 48), 8 * v7);
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

_QWORD *sub_1C48C2ED8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA1658;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

void sub_1C48C2F18(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA1658;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48C2F68(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x78uLL);
  *v2 = &off_1E7FA1658;
  sub_1C48C3084((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1C48C2FA8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA1658;
  return sub_1C48C3084((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1C48C2FC4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
}

void sub_1C48C2FE0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[6];
  if (v2 != __p + 8)
    free(v2);
  operator delete(__p);
}

uint64_t sub_1C48C3014(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, unsigned int *a8)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, _QWORD *);
  _QWORD *v11;

  v9 = a1[2];
  v10 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, _QWORD *))a1[1];
  v11 = (_QWORD *)(a1[3] + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE, _QWORD, _QWORD *))(*v11 + v10);
  return v10(v11, a1[4], a1[5], *a2, a3, a4, a5, a6, *a7, *a8, a1 + 6);
}

uint64_t sub_1C48C3084(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = (void *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  v5 = (void **)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0x600000000;
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6 && a2 != a1)
  {
    if (v6 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, (uint64_t)v4, v6, 8);
      v7 = *(unsigned int *)(a2 + 48);
      if (!(_DWORD)v7)
      {
LABEL_8:
        *(_DWORD *)(a1 + 48) = v6;
        goto LABEL_9;
      }
      v4 = *v5;
    }
    else
    {
      v7 = *(unsigned int *)(a2 + 48);
    }
    memcpy(v4, *(const void **)(a2 + 40), 8 * v7);
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

void sub_1C48C3148()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48C315C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FA16A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C48C31A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FA16A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48C31D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 8);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *(_QWORD *)(a1 + 32), a2, a3, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

void sub_1C48C320C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48C3220(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA16E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48C3260(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA16E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48C3288(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v5 + v4);
  return v4(v5, a1[4], a2, a3);
}

uint64_t sub_1C48C32B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void (**v18)(_QWORD *);
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v6 = *(_QWORD **)a2;
          v7 = *(_QWORD **)a1;
          v8 = 32 * v5;
          while (1)
          {
            v9 = (_QWORD *)v6[3];
            if (v9)
            {
              if (v6 == v9)
              {
                v37 = v36;
                (*(void (**)(_QWORD *, _QWORD *))(*v6 + 24))(v6, v36);
              }
              else
              {
                v37 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
              }
            }
            else
            {
              v37 = 0;
            }
            sub_1C48C35D8(v36, v7);
            v10 = v37;
            if (v37 == v36)
            {
              v11 = (void (**)(_QWORD *))(v36[0] + 32);
              v10 = v36;
            }
            else
            {
              if (!v37)
                goto LABEL_12;
              v11 = (void (**)(_QWORD *))(*v37 + 40);
            }
            (*v11)(v10);
LABEL_12:
            v6 += 4;
            v7 += 4;
            v8 -= 32;
            if (!v8)
              goto LABEL_51;
          }
        }
        goto LABEL_50;
      }
      if (!(_DWORD)v5)
      {
LABEL_49:
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C613A8F8(a1, v4);
LABEL_50:
        v5 = 0;
LABEL_51:
        v29 = *(unsigned int *)(a2 + 8);
        if (v5 != v29)
        {
          v30 = *(_QWORD **)a2;
          v31 = *(_QWORD *)a1 + 32 * v5;
          v32 = &v30[4 * v5];
          v33 = 32 * v29 - 32 * v5;
          do
          {
            v34 = (_QWORD *)v32[3];
            if (v34)
            {
              if (v32 == v34)
              {
                *(_QWORD *)(v31 + 24) = v31;
                (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v32[3] + 24))(v32[3], v31);
              }
              else
              {
                *(_QWORD *)(v31 + 24) = (*(uint64_t (**)(_QWORD *))(*v34 + 16))(v34);
              }
            }
            else
            {
              *(_QWORD *)(v31 + 24) = 0;
            }
            v32 += 4;
            v31 += 32;
            v33 -= 32;
          }
          while (v33);
        }
LABEL_59:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
      v25 = *(_QWORD **)a1;
      v26 = 4 * v5;
      while (1)
      {
        v27 = (_QWORD *)v25[v26 - 1];
        if (&v25[v26 - 4] == v27)
          break;
        if (v27)
        {
          v28 = 5;
LABEL_47:
          (*(void (**)(void))(*v27 + 8 * v28))();
        }
        v26 -= 4;
        if (!(v26 * 8))
          goto LABEL_49;
      }
      v27 = &v25[v26 - 4];
      v28 = 4;
      goto LABEL_47;
    }
    if ((_DWORD)v4)
    {
      v12 = 0;
      v13 = *(_QWORD **)a2;
      v14 = *(_QWORD **)a1;
      while (1)
      {
        v15 = &v13[v12];
        v16 = (_QWORD *)v13[v12 + 3];
        if (v16)
        {
          if (v15 == v16)
          {
            v37 = v36;
            (*(void (**)(_QWORD *, _QWORD *))(*v15 + 24))(v15, v36);
          }
          else
          {
            v37 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v16 + 16))(v13[v12 + 3]);
          }
        }
        else
        {
          v37 = 0;
        }
        sub_1C48C35D8(v36, &v14[v12]);
        v17 = v37;
        if (v37 == v36)
        {
          v18 = (void (**)(_QWORD *))(v36[0] + 32);
          v17 = v36;
        }
        else
        {
          if (!v37)
            goto LABEL_26;
          v18 = (void (**)(_QWORD *))(*v37 + 40);
        }
        (*v18)(v17);
LABEL_26:
        v12 += 4;
        if (4 * v4 == v12)
        {
          v5 = *(unsigned int *)(a1 + 8);
          v19 = *(_QWORD **)a1;
          v20 = &v14[v12];
          goto LABEL_33;
        }
      }
    }
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)a1;
LABEL_33:
    v21 = &v19[4 * v5];
    if (v21 == v20)
      goto LABEL_59;
    while (1)
    {
      v22 = v21 - 4;
      v23 = (_QWORD *)*(v21 - 1);
      if (v21 - 4 == v23)
        break;
      if (v23)
      {
        v24 = 5;
LABEL_38:
        (*(void (**)(void))(*v23 + 8 * v24))();
      }
      v21 = v22;
      if (v22 == v20)
        goto LABEL_59;
    }
    v23 = v21 - 4;
    v24 = 4;
    goto LABEL_38;
  }
  return a1;
}

_QWORD *sub_1C48C35D8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

_DWORD *sub_1C48C3740(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_1C476C0AC(a1, (uint64_t)a2, a2, v10);
    *(_QWORD *)v6 = *a2;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -2;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1C48C37F8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 iterator forwarding pass";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "agx2-iterator-forwarding";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF728;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C48C3888;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C48C3888()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF728);
  *result = &off_1E7FA1958;
  return result;
}

void sub_1C48C38C8(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C48C395C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C48C39E8()
{
  return "AGX2 iterator forwarding pass";
}

void sub_1C48C39F8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C48C3A1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned __int16 *v8;
  int v9;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unsigned __int16 *v26;
  __int16 v27;
  unsigned __int16 v28;
  int8x8_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int16 v35;
  int v36;
  unsigned int v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  _DWORD *v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  unsigned __int16 *v59;
  int v60;
  int v61;
  unsigned __int16 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  int8x8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  unsigned int v78;
  unint64_t v79;
  __int16 v80;
  uint64_t v81;
  unsigned __int16 v82;
  unsigned __int16 *v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v103;
  int v104;
  _DWORD *v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD v117[2];
  int v118;
  _QWORD v119[2];
  int v120;
  void *v121;
  uint64_t v122;
  _DWORD v123[14];
  int8x8_t *v124;
  uint64_t v125;
  _DWORD v126[14];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v109 = a2 + 320;
  v2 = *(_QWORD **)(a2 + 320);
  if (v2 != (_QWORD *)(a2 + 320))
  {
    v3 = 0;
    while (1)
    {
      v114 = v3;
      v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
      v117[0] = 0;
      v119[0] = 0;
      v119[1] = 0;
      v120 = 0;
      v4 = v2 + 6;
      v117[1] = 0;
      v5 = -1;
      v6 = v2 + 6;
      v118 = 0;
      do
      {
        v6 = (_QWORD *)v6[1];
        ++v5;
      }
      while (v6 != v4);
      v112 = *(_QWORD *)(v2[4] + 16);
      v113 = v2;
      v7 = v2[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v7 != v4)
        break;
      v100 = 0;
      v99 = 0;
      v101 = 0;
LABEL_131:
      MEMORY[0x1CAA32FB4](v99, 8);
      MEMORY[0x1CAA32FB4](v100, 8);
      v3 = v114 | v101;
      v2 = (_QWORD *)*v113;
      if (*v113 == v109)
        return v3 & 1;
    }
    v111 = 0;
    v115 = v2 + 6;
    while (1)
    {
      v8 = *(unsigned __int16 **)(v7 + 16);
      v9 = *v8;
      v11 = (v9 - 9) <= 0x3C && ((1 << (v9 - 9)) & 0x1000000000000605) != 0
         || v9 == 0;
      if (v11 || (v8[4] & 0x10) != 0)
      {
        ++v5;
        goto LABEL_123;
      }
      if ((v8[8] & 0x10) == 0)
        goto LABEL_21;
      v18 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4);
      if (sub_1C485BBD0(v9) <= 3)
        break;
LABEL_123:
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      --v5;
      if ((_QWORD *)v7 == v4)
      {
        v99 = v117[0];
        v100 = v119[0];
        v101 = v111;
        goto LABEL_131;
      }
    }
    v19 = *(_DWORD *)(v116 + 44);
    v124 = (int8x8_t *)v126;
    v125 = 0x600000000;
    sub_1C4765AA4((char *)&v124, (v19 + 63) >> 6, 0);
    v126[12] = v19;
    v20 = *(_DWORD *)(v116 + 44);
    v121 = v123;
    v122 = 0x600000000;
    sub_1C4765AA4((char *)&v121, (v20 + 63) >> 6, 0);
    v21 = 0;
    v123[12] = v20;
    v22 = *(_QWORD *)(v116 + 8);
    v23 = *(unsigned int *)(v22 + 24 * v18 + 16);
    v24 = *(_QWORD *)(v116 + 56);
    v25 = (_WORD *)(v24 + ((v23 >> 3) & 0x1FFFFFFE));
    v27 = *v25;
    v26 = v25 + 1;
    v28 = v27 + (v23 & 0xF) * v18;
    v29 = v124;
    v30 = v119[0];
    v31 = v120;
    v32 = v120 - 1;
    v33 = -1;
    v34 = v26;
    v35 = v28;
    do
    {
      v36 = v35;
      *(_QWORD *)&v29[v35 >> 6] |= 1 << v35;
      if (v31)
      {
        v37 = (37 * v35) & v32;
        v38 = (int *)(v30 + 24 * v37);
        v39 = *v38;
        if (*v38 == v36)
        {
LABEL_30:
          if (v37 != v31 && v38[2] < v33)
          {
            v21 = *((_QWORD *)v38 + 2);
            v33 = v38[2];
          }
        }
        else
        {
          v41 = 1;
          while (v39 != -1)
          {
            v42 = v37 + v41++;
            v37 = v42 & v32;
            v38 = (int *)(v30 + 24 * v37);
            v39 = *v38;
            if (*v38 == v36)
              goto LABEL_30;
          }
        }
      }
      v40 = *v34++;
      v35 = v40 + v36;
    }
    while (v40);
    v43 = v118 - 1;
    v44 = -1;
    do
    {
      if (v118)
      {
        v45 = (37 * v28) & v43;
        v46 = *(_DWORD *)(v117[0] + 24 * v45);
        if (v46 == v28)
        {
LABEL_41:
          if (v45 != v118)
          {
            v47 = *(_DWORD *)(v117[0] + 24 * v45 + 8);
            if (v47 < v44)
              v44 = v47;
          }
        }
        else
        {
          v49 = 1;
          while (v46 != -1)
          {
            v50 = v45 + v49++;
            v45 = v50 & v43;
            v46 = *(_DWORD *)(v117[0] + 24 * v45);
            if (v46 == v28)
              goto LABEL_41;
          }
        }
      }
      v48 = *v26++;
      v28 += v48;
    }
    while (v48);
    v51 = *(_QWORD *)(v7 + 32);
    v52 = *(unsigned int *)(v7 + 40);
    if ((_DWORD)v52)
    {
      v53 = (_DWORD *)(v51 + 32 * v52);
      v54 = v121;
      v55 = *(_DWORD **)(v7 + 32);
      do
      {
        if ((*v55 & 0x30000FF) == 0)
        {
          v56 = v55[1];
          v57 = ((unint64_t)*(unsigned int *)(v22 + 24 * v56 + 16) >> 3) & 0x1FFFFFFE;
          v58 = *(unsigned __int16 *)(v24 + v57) + (*(_DWORD *)(v22 + 24 * v56 + 16) & 0xF) * v56;
          v59 = (unsigned __int16 *)(v24 + 2 + v57);
          do
          {
            v54[(unsigned __int16)v58 >> 6] |= 1 << v58;
            v60 = *v59++;
            v58 += v60;
          }
          while (v60);
        }
        v55 += 8;
      }
      while (v55 != v53);
    }
    v61 = 1;
    if (v33 != -1 && v5 == v33 - 1 && v33 <= v44)
    {
      v62 = *(unsigned __int16 **)(v21 + 16);
      if ((v62[8] & 2) != 0)
      {
        v63 = *v62;
        v107 = sub_1C4B138B4(v63);
        v108 = v63;
        v106 = sub_1C4B138B4(v63);
        v64 = v51 + 32 * sub_1C4B138B4(**(unsigned __int16 **)(v7 + 16));
        v67 = *(_QWORD *)(v64 + 16);
        v66 = (uint64_t *)(v64 + 16);
        v65 = v67;
        if (*(_BYTE *)(v112 + 380) && (v65 & 3) == 3)
          goto LABEL_62;
        v103 = v65;
        v105 = *(_DWORD **)(v21 + 32);
        v104 = sub_1C4B138B4(v108);
        v68 = sub_1C4B138B4(v108);
        if ((v104 & 0x80000000) == 0 || (v68 & 0x80000000) == 0 && !LOBYTE(v105[8 * v68]))
        {
          if (v122 >= v125)
            v69 = v125;
          else
            v69 = v122;
          if ((_DWORD)v69)
          {
            v70 = (uint64_t *)v121;
            v71 = v29;
            do
            {
              v73 = (uint64_t)*v71++;
              v72 = v73;
              v74 = *v70++;
              if ((v74 & v72) != 0)
                goto LABEL_62;
            }
            while (--v69);
          }
          v75 = *(unsigned int *)(v21 + 40);
          if ((_DWORD)v75)
          {
            v76 = &v105[8 * v75];
            v77 = v105;
            while ((*v77 & 0x30000FF) != 0x1000000)
            {
LABEL_83:
              v77 += 8;
              if (v77 == v76)
                goto LABEL_87;
            }
            v78 = v77[1];
            v79 = *(unsigned int *)(v22 + 24 * v78 + 16);
            v80 = v79 & 0xF;
            v81 = (v79 >> 3) & 0x1FFFFFFE;
            v82 = *(_WORD *)(v24 + v81) + v80 * v78;
            v83 = (unsigned __int16 *)(v24 + 2 + v81);
            while (((*((_QWORD *)v121 + (v82 >> 6)) >> v82) & 1) == 0)
            {
              v84 = *v83++;
              v82 += v84;
              if (!v84)
                goto LABEL_83;
            }
            goto LABEL_62;
          }
        }
LABEL_87:
        v85 = v125;
        if (!sub_1C48C4288(v29, v125, v105[8 * v107 + 1], v22, v24)
          && (v106 == -1
           || (*(_QWORD *)&v105[8 * sub_1C4B138B4(v108) + 4] & 0x3C0) != 0x100
           || LOBYTE(v105[8 * v106])
           || !sub_1C48C4288(v29, v85, v105[8 * v106 + 1], v22, v24)))
        {
LABEL_62:
          v61 = 0;
          goto LABEL_63;
        }
        *v66 = v103 | 8;
        v61 = 1;
        v111 = 1;
      }
    }
LABEL_63:
    v4 = v115;
    if (v121 != v123)
      free(v121);
    if (v124 != (int8x8_t *)v126)
      free(v124);
    if (v61)
    {
LABEL_21:
      v12 = v7;
      if ((*(_WORD *)(v7 + 44) & 4) != 0)
      {
        v12 = v7;
        do
          v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v12 + 44) & 4) != 0);
      }
      v13 = *(_QWORD *)(v7 + 24) + 48;
      v14 = *(int **)(v12 + 32);
      v15 = *(unsigned int *)(v12 + 40);
      v16 = &v14[8 * v15];
      if (!(_DWORD)v15)
      {
        v17 = *(_QWORD *)(v12 + 8);
        if (v17 == v13)
        {
          v12 = *(_QWORD *)(v7 + 24) + 48;
          goto LABEL_105;
        }
        v12 = *(_QWORD *)(v7 + 24) + 48;
        if ((*(_WORD *)(v17 + 44) & 4) != 0)
        {
          do
          {
            v86 = v17;
            v87 = *(unsigned int *)(v17 + 40);
            if ((_DWORD)v87)
              goto LABEL_103;
            v17 = *(_QWORD *)(v17 + 8);
          }
          while (v17 != v13 && (*(_WORD *)(v17 + 44) & 4) != 0);
LABEL_102:
          v12 = v13;
LABEL_104:
          v14 = *(int **)(v86 + 32);
          v16 = &v14[8 * v87];
        }
      }
LABEL_105:
      while (v14 != v16)
      {
        v88 = *v14;
        if (!*v14 && (v88 & 0x2000000) == 0)
        {
          v90 = v14[1];
          if (v90)
          {
            v91 = (unsigned __int16 *)(*(_QWORD *)(v116 + 56)
                                     + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v116 + 8) + 24 * v90 + 16) >> 3) & 0x1FFFFFFE));
            v93 = *v91;
            v92 = v91 + 1;
            v94 = v93 + (*(_DWORD *)(*(_QWORD *)(v116 + 8) + 24 * v90 + 16) & 0xF) * v90;
            if ((v88 & 0x1000000) != 0)
            {
              do
              {
                LODWORD(v124) = (unsigned __int16)v94;
                v97 = sub_1C48304AC((uint64_t)v117, (int *)&v124);
                *(_DWORD *)v97 = v5;
                *(_QWORD *)(v97 + 8) = v7;
                v98 = *v92++;
                v94 += v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                LODWORD(v124) = (unsigned __int16)v94;
                v95 = sub_1C48304AC((uint64_t)v119, (int *)&v124);
                *(_DWORD *)v95 = v5;
                *(_QWORD *)(v95 + 8) = v7;
                v96 = *v92++;
                v94 += v96;
              }
              while (v96);
            }
          }
        }
        v14 += 8;
        if (v14 == v16)
        {
          v89 = *(_QWORD *)(v12 + 8);
          if (v89 == v13)
            break;
          v14 = v16;
          v12 = v13;
          if ((*(_WORD *)(v89 + 44) & 4) != 0)
          {
            while (1)
            {
              v86 = v89;
              v87 = *(unsigned int *)(v89 + 40);
              if ((_DWORD)v87)
                break;
              v89 = *(_QWORD *)(v89 + 8);
              if (v89 == v13 || (*(_WORD *)(v89 + 44) & 4) == 0)
                goto LABEL_102;
            }
LABEL_103:
            v12 = v86;
            goto LABEL_104;
          }
        }
      }
      v4 = v115;
      goto LABEL_123;
    }
    goto LABEL_123;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

BOOL sub_1C48C4288(int8x8_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  __int16 *v8;
  _WORD *v9;
  __int16 v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  uint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;

  v5 = 0;
  v6 = *(unsigned int *)(a4 + 24 * a3 + 16);
  v7 = v6 & 0xF;
  v8 = (__int16 *)(a5 + ((v6 >> 3) & 0x1FFFFFFE));
  v10 = *v8;
  v9 = v8 + 1;
  v11 = v10 + v7 * a3;
  do
  {
    if (((*(_QWORD *)&a1[v11 >> 6] >> v11) & 1) == 0)
      return 0;
    v12 = (unsigned __int16)v9[v5];
    v11 += v12;
    ++v5;
  }
  while (v12);
  v13 = 0;
  if (a2)
  {
    v14 = 8 * a2;
    do
    {
      v15 = *a1++;
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v13 += v16.i32[0];
      v14 -= 8;
    }
    while (v14);
  }
  return v13 == (_DWORD)v5;
}

void sub_1C48C4314(llvm::Pass *a1)
{
  sub_1C637217C(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C48C4338()
{
  return "AGX2 Instruction Selection";
}

uint64_t sub_1C48C4348(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  BOOL v49;
  uint64_t **v50;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  BOOL v62;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  llvm *v107;
  void *v108;
  uint64_t v109;
  int v110;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  uint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  llvm *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  char v144;
  char v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  uint64_t v189;
  uint64_t v190;
  char v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  int v196;
  _BOOL4 v198;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  double v207;
  int v208;
  int v209;
  int v210;
  char v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  __int16 v220;
  uint64_t *v221;
  unint64_t v222;
  llvm *v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t *v226;
  uint64_t *v227;
  int v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  int v238;
  uint64_t v240;
  _QWORD *v241;
  char v242;
  _BOOL4 v243;
  int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t k;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  __int128 v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v264;
  uint64_t ExtendedSizeInBits;
  const char *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  llvm *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t *v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  void *v281;
  void *v282;
  BOOL v283;
  uint64_t v284;
  int v285;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  llvm *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v298;
  uint64_t v300;
  uint64_t v301;
  char v302;
  int v303;
  _BOOL4 v305;
  uint64_t v307;
  _QWORD *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int *v315;
  uint64_t *v316;
  int v317;
  uint64_t v318;
  _QWORD *v319;
  int v320;
  BOOL v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  _QWORD *v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v339;
  _QWORD **v340;
  unsigned int v341;
  _QWORD *v342;
  uint64_t v343;
  int v344;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  int v349;
  uint64_t v351;
  unint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v357;
  unsigned int v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  int v363;
  BOOL v364;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v373;
  _QWORD *v374;
  llvm *v375;
  uint64_t v376;
  char v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  int v388;
  uint64_t v390;
  _QWORD *v391;
  _BOOL4 v392;
  _BOOL4 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  llvm *v404;
  uint64_t v405;
  int v406;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  unsigned int v412;
  unsigned int v413;
  uint64_t v415;
  _QWORD *v416;
  int v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  llvm **v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  llvm *v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  _QWORD *v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t *v437;
  llvm *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t *v445;
  int v446;
  unsigned int v447;
  int v449;
  uint64_t v450;
  _QWORD *v451;
  int v452;
  unint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  __int16 v456;
  uint64_t v457;
  uint64_t *v458;
  unsigned int v459;
  int v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  llvm *v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t i;
  void **v473;
  uint64_t v474;
  unsigned int v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  llvm *v479;
  uint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  uint64_t *v486;
  int v487;
  uint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  llvm **v494;
  llvm *v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  llvm *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t **v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  int v514;
  uint64_t v515;
  int v516;
  uint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  unint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  __int16 v529;
  uint64_t v530;
  uint64_t *v531;
  unsigned int v532;
  unsigned int v533;
  uint64_t v534;
  _QWORD *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  uint64_t v540;
  _QWORD *v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *v555;
  int v556;
  int v557;
  uint64_t v558;
  unsigned int v559;
  size_t v560;
  unint64_t v561;
  unint64_t v562;
  size_t v563;
  uint64_t v564;
  _BOOL4 v565;
  unsigned int *v566;
  unsigned int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  unsigned int v571;
  char v572;
  char v573;
  int m;
  int v575;
  _BOOL4 v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t *v580;
  unint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  int v591;
  _QWORD *v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t *v596;
  int v597;
  uint64_t v598;
  _QWORD *v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  __int16 v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  int v611;
  int v612;
  uint64_t v613;
  _QWORD *v614;
  int v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  _QWORD *v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  llvm *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int64_t v642;
  int v643;
  unint64_t v644;
  int v645;
  unint64_t j;
  void **v647;
  void *v648;
  void *v649;
  int v650;
  int8x8_t *v651;
  int8x8_t *v652;
  unint64_t v653;
  uint8x8_t v654;
  llvm::Type *v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  unint64_t *v659;
  unsigned int v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  llvm *v667;
  uint64_t v668;
  _QWORD *v669;
  unint64_t v670;
  uint64_t v671;
  __int16 v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t *v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  uint64_t *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v694;
  _QWORD *v695;
  unint64_t v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t *v700;
  int v701;
  uint64_t v702;
  uint64_t *v703;
  unint64_t v704;
  unint64_t v705;
  _QWORD *v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  __int16 v710;
  _QWORD *v711;
  int v712;
  uint64_t v713;
  llvm::APInt *v714;
  unsigned int v715;
  unint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  int v719;
  uint64_t *v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t *v725;
  unsigned int v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  _QWORD *v732;
  unsigned int v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  _QWORD *v739;
  int v740;
  __int16 v741;
  uint64_t v742;
  uint64_t *v743;
  int v744;
  int v745;
  unsigned int v746;
  _QWORD *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unsigned __int8 *v753;
  int v754;
  uint64_t v755;
  int v756;
  _QWORD *v757;
  uint64_t v758;
  _QWORD *v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  int v765;
  uint64_t v767;
  uint64_t v768;
  __int16 v769;
  uint64_t *v770;
  __int128 v771;
  uint64_t v772;
  int v773;
  uint64_t v775;
  _QWORD *v776;
  uint64_t v777;
  uint64_t v778;
  _QWORD *v779;
  uint64_t v780;
  const char *v781;
  uint64_t v782;
  uint64_t *v783;
  llvm *v784;
  uint64_t v785;
  int v786;
  BOOL v787;
  uint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  _QWORD *v794;
  uint64_t v795;
  BOOL v796;
  uint64_t *v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  int v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  char v810;
  int v811;
  _BOOL4 v813;
  uint64_t v814;
  uint64_t *v815;
  uint64_t *v816;
  uint64_t *v817;
  uint64_t *v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  llvm *v822;
  int v823;
  int8x8_t v824;
  uint64_t v825;
  unsigned int v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint8x8_t v830;
  unsigned int v831;
  unint64_t v832;
  unint64_t v833;
  _BOOL4 v834;
  uint64_t v835;
  int v836;
  int v837;
  uint64_t v838;
  _QWORD *v839;
  unsigned int v840;
  int v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  uint64_t v846;
  uint64_t *v847;
  int v848;
  int v849;
  uint64_t v850;
  _QWORD *v851;
  uint64_t *v852;
  int v853;
  int v854;
  unsigned __int8 *v855;
  unsigned __int8 **v856;
  uint64_t *v857;
  uint64_t v858;
  uint64_t v859;
  unsigned int v860;
  unsigned int v861;
  unsigned int v862;
  uint64_t v863;
  unsigned int v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unsigned int v870;
  int v871;
  uint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int v882;
  uint64_t v883;
  uint64_t v884;
  _QWORD *v885;
  unsigned int v886;
  _QWORD *v887;
  unsigned int v888;
  int v889;
  _QWORD *v890;
  _QWORD *v891;
  unsigned int v892;
  uint64_t v893;
  unint64_t v894;
  uint64_t *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t *v898;
  int v899;
  uint64_t v900;
  int v901;
  unint64_t v902;
  BOOL v903;
  uint64_t v904;
  int v905;
  uint64_t v906;
  int v907;
  unint64_t v908;
  unint64_t v909;
  _QWORD *v910;
  unint64_t v911;
  __int16 v912;
  uint64_t v913;
  uint64_t *v914;
  unint64_t v915;
  unint64_t v916;
  unint64_t v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t *v920;
  __int16 v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  unint64_t v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t *v928;
  unint64_t v929;
  __int16 v930;
  uint64_t v931;
  unsigned int v932;
  uint64_t v933;
  uint64_t *v934;
  __int16 v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t *v939;
  unint64_t v940;
  unint64_t v941;
  __int16 v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t *v945;
  uint64_t v946;
  unint64_t v947;
  __int16 v948;
  uint64_t v949;
  uint64_t *v950;
  unsigned int v951;
  uint64_t v952;
  __int16 v953;
  uint64_t v954;
  unint64_t v955;
  uint64_t *v956;
  __int16 v957;
  uint64_t v958;
  uint64_t *v959;
  int v960;
  _QWORD *v961;
  unint64_t v962;
  _QWORD *v963;
  __int16 v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  unint64_t v968;
  uint64_t v969;
  _QWORD *v970;
  unint64_t v971;
  uint64_t v972;
  __int16 v973;
  uint64_t v974;
  int v975;
  _QWORD *v976;
  int v977;
  uint64_t *v978;
  unint64_t v979;
  _QWORD *v980;
  __int16 v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t *v984;
  int v985;
  uint64_t v987;
  int v988;
  uint64_t v989;
  int v990;
  uint64_t v991;
  int v992;
  uint64_t v993;
  uint64_t v994;
  int v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  int v999;
  uint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  unsigned int v1005;
  llvm *v1006;
  uint64_t v1007;
  uint64_t v1008;
  llvm *v1009;
  llvm *v1010;
  int v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  _QWORD *v1024;
  int v1025;
  _QWORD *v1026;
  uint64_t v1027;
  int v1028;
  int v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  void *v1033;
  uint64_t v1034;
  unsigned int v1035;
  unint64_t v1036;
  __int128 v1037;
  _QWORD *v1038;
  llvm *v1039;
  llvm *v1040;
  void *v1041;
  uint64_t v1042;
  llvm *v1043;
  int v1044;
  llvm *v1045;
  llvm *v1046;
  unsigned int v1047;
  unsigned int v1048;
  unsigned int v1049;
  llvm *v1050;
  _QWORD *v1051;
  _QWORD *v1052;
  uint64_t v1053;
  uint64_t v1054;
  _QWORD *v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t *v1058;
  unint64_t v1059;
  unint64_t v1060;
  unsigned __int8 *v1062;
  int v1063;
  unsigned __int8 *v1064;
  int v1065;
  void *v1066;
  unsigned int v1067;
  void *v1068;
  unsigned int v1069;
  unsigned __int8 *v1070;
  int v1071;
  char v1072;
  unsigned __int8 *v1073;
  int v1074;
  unsigned __int8 *v1075;
  int v1076;
  __int128 v1077;
  uint64_t *v1078;
  int v1079;
  char v1080;
  int v1081;
  char v1082[8];
  uint64_t v1083;
  uint64_t *v1084;
  int v1085;
  char v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  double v1090;
  uint64_t v1091;
  uint64_t *v1092;
  int v1093;
  char v1094;
  __int128 v1095;
  uint64_t *v1096;
  unsigned int v1097;
  char v1098;
  int v1099;
  int v1100;
  _QWORD *v1101;
  __int128 v1102;
  int v1103;
  char v1104;
  void *__src[2];
  uint64_t v1106;
  unsigned int v1107;
  void *v1108;
  unsigned int v1109;
  uint64_t v1110;
  _DWORD v1111[56];
  uint64_t v1112;

  v1112 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)(a1 + 296);
  v2 = *(_QWORD **)(a1 + 296);
  v3 = (_QWORD *)v2[27];
  v1058 = v1;
  v1059 = (unint64_t)(v2 + 26);
  if (v3 != v2 + 26)
  {
    v1060 = (unint64_t)&v1106;
    while (1)
    {
      if (v3)
        v4 = (uint64_t)(v3 - 1);
      else
        v4 = 0;
      v5 = *(unsigned __int8 **)(v4 + 64);
      v1075 = v5;
      if (v5)
        llvm::MetadataTracking::track((uint64_t)&v1075, v5, 2);
      v1076 = *(_DWORD *)(v4 + 60);
      v6 = *(unsigned __int16 *)(v4 + 24);
      if (v6 != 65517)
        break;
      __src[0] = &v1106;
      __src[1] = (void *)0x1000000000;
      LOWORD(v7) = *(_WORD *)(v4 + 56);
      if ((_WORD)v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(_OWORD *)(*(_QWORD *)(v4 + 32) + v8);
          if (v9 >= HIDWORD(__src[1]))
          {
            v1037 = *(_OWORD *)(*(_QWORD *)(v4 + 32) + v8);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1106, v9 + 1, 16);
            v11 = v1037;
            v9 = __src[1];
          }
          *((_OWORD *)__src[0] + v9) = v11;
          v9 = ++LODWORD(__src[1]);
          ++v10;
          v7 = (char *)*(unsigned __int16 *)(v4 + 56);
          v8 += 40;
        }
        while (v10 < (unint64_t)v7);
        if ((_DWORD)v7 == 4)
          goto LABEL_137;
      }
      v52 = 0;
      v53 = 1;
      do
      {
        while (1)
        {
          v54 = *(_QWORD *)(v4 + 32);
          v55 = *(_QWORD *)(*(_QWORD *)(v54 + 40 * (v53 + 1)) + 80);
          v56 = (_QWORD *)(v55 + 24);
          if (*(_DWORD *)(v55 + 32) >= 0x41u)
            v56 = (_QWORD *)*v56;
          v57 = *(_QWORD *)(*(_QWORD *)(v54 + 40 * (v53 + 3)) + 80);
          v58 = (_QWORD *)(v57 + 24);
          if (*(_DWORD *)(v57 + 32) >= 0x41u)
            v58 = (_QWORD *)*v58;
          v59 = *(_DWORD *)v56 - 1;
          v60 = *(_DWORD *)v58 - 1;
          v61 = v59 > 0xF || v60 > 0xF;
          v62 = !v61 && v60 - v59 == 1;
          if (!v62 || (v59 & 1) != 0)
            break;
          v64 = (uint64_t *)(v54 + 40 * v53);
          v65 = *v64;
          v66 = v64[1];
          v67 = v53 + 2;
          v68 = (uint64_t *)(v54 + 40 * v67);
          v69 = *v68;
          v70 = v68[1];
          v1073 = v1075;
          if (v1075)
            llvm::MetadataTracking::track((uint64_t)&v1073, v1075, 2);
          v1074 = v1076;
          v71 = sub_1C48DB368(a1, v65, v66, v69, v70, (const llvm::APInt *)&v1073, (llvm *)0x26, 0);
          if (v1073)
            llvm::MetadataTracking::untrack((uint64_t)&v1073, v1073);
          if (!v71)
          {
            LOWORD(v7) = *(_WORD *)(v4 + 56);
            break;
          }
          v72 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, (llvm *)5, 0, 0, 0);
          v74 = v73;
          v1038 = sub_1C6366AB4(*v1, 1, (const llvm::APInt *)&v1075, (llvm *)5, 0, 0, 0);
          v77 = v76;
          v78 = *(_QWORD *)(*v1 + 832);
          if (v78)
            LOWORD(v78) = *(_WORD *)(v78 + 8);
          v79 = sub_1C5D56C70(*v1, 148, (const llvm::APInt *)&v1075, (llvm *)4, 0, (uint64_t)v71, 0, v75, (uint64_t)v72, v74, v78);
          v81 = (char *)__src[0] + 16 * v53;
          *(_QWORD *)v81 = v79;
          *((_DWORD *)v81 + 2) = v82;
          v83 = *(_QWORD *)(*v1 + 832);
          if (v83)
            LOWORD(v83) = *(_WORD *)(v83 + 8);
          v84 = sub_1C5D56C70(*v1, 148, (const llvm::APInt *)&v1075, (llvm *)4, 0, (uint64_t)v71, 0, v80, (uint64_t)v1038, v77, v83);
          v7 = (char *)__src[0] + 16 * v67;
          *(_QWORD *)v7 = v84;
          *((_DWORD *)v7 + 2) = v85;
          v53 += 4;
          LODWORD(v7) = *(unsigned __int16 *)(v4 + 56);
          v52 = 1;
          if (v53 > (int)v7 - 4)
            goto LABEL_136;
        }
        v53 += 4;
      }
      while (v53 <= (unsigned __int16)v7 - 4);
      if ((v52 & 1) == 0)
        goto LABEL_137;
LABEL_136:
      sub_1C636DEEC(*v1, v4, (uint64_t *)__src[0], LODWORD(__src[1]));
LABEL_137:
      if (__src[0] != &v1106)
        free(__src[0]);
LABEL_139:
      if (v1075)
        llvm::MetadataTracking::untrack((uint64_t)&v1075, v1075);
      v3 = (_QWORD *)v3[1];
      if (v3 == (_QWORD *)v1059)
      {
        v2 = (_QWORD *)*v1;
        goto LABEL_921;
      }
    }
    if (!sub_1C48DB5A0(*(unsigned __int16 *)(v4 + 24)))
      goto LABEL_168;
    v15 = (~*(unsigned __int16 *)(v4 + 72) & 0x7C0) != 0 && (*(_WORD *)(*(_QWORD *)*v1 + 1020) & 1) == 0;
    if (v15 || **(_BYTE **)(v4 + 40) != 9)
      goto LABEL_168;
    BYTE2(v1101) = 0;
    LOWORD(v1101) = 0;
    v16 = *(unsigned __int16 *)(v4 + 56);
    if (*(_WORD *)(v4 + 56))
    {
      v17 = 0;
      while (1)
      {
        v18 = (_DWORD *)(*(_QWORD *)(v4 + 32) + 40 * v17);
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned __int16 *)(*(_QWORD *)v18 + 24);
        if (v20 == 46)
        {
          v21 = *(_QWORD *)(v19 + 32);
          v22 = *(_QWORD *)(*(_QWORD *)v21 + 80);
          v23 = (_QWORD *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u)
            v23 = (_QWORD *)*v23;
          if (*v23 == 2131)
          {
            v24 = *(_QWORD *)(v21 + 40);
            v25 = *(_QWORD *)(v24 + 48);
            if (!v25)
              goto LABEL_168;
            v26 = *(_DWORD *)(v21 + 48);
            v27 = 1;
            do
            {
              if (*(_DWORD *)(v25 + 8) == v26)
              {
                if (!v27)
                  goto LABEL_168;
                --v27;
              }
              v25 = *(_QWORD *)(v25 + 32);
            }
            while (v25);
            if (v27 || (sub_1C48DB5A0(*(unsigned __int16 *)(v24 + 24)) & 1) == 0)
              goto LABEL_168;
            goto LABEL_93;
          }
          v20 = 46;
        }
        else
        {
          v28 = v18[2];
          if (v20 != 222)
            goto LABEL_47;
          v29 = *(_QWORD *)(v19 + 48);
          if (!v29)
            goto LABEL_93;
          v30 = 1;
          do
          {
            if (*(_DWORD *)(v29 + 8) == v28)
            {
              if (!v30)
                goto LABEL_93;
              --v30;
            }
            v29 = *(_QWORD *)(v29 + 32);
          }
          while (v29);
          if (v30)
            goto LABEL_93;
          v18 = *(_DWORD **)(v19 + 32);
          v19 = *(_QWORD *)v18;
          v20 = *(unsigned __int16 *)(*(_QWORD *)v18 + 24);
        }
        v28 = v18[2];
LABEL_47:
        if (v20 == 223)
        {
          v31 = *(_QWORD *)(v19 + 48);
          if (!v31)
            goto LABEL_93;
          v32 = 1;
          do
          {
            if (*(_DWORD *)(v31 + 8) == v28)
            {
              if (!v32)
                goto LABEL_93;
              --v32;
            }
            v31 = *(_QWORD *)(v31 + 32);
          }
          while (v31);
          if (v32)
            goto LABEL_93;
          v33 = *(_QWORD *)(v19 + 32);
          v19 = *(_QWORD *)v33;
          v28 = *(_DWORD *)(v33 + 8);
          v20 = *(unsigned __int16 *)(v19 + 24);
        }
        if (v20 == 212)
        {
          v34 = *(_QWORD **)(v19 + 32);
          v35 = *v34;
          v36 = v34[1];
          v37 = *(unsigned __int16 *)(*v34 + 24);
          if (v37 == 395)
            v38 = ((v6 - 96) < 0x2E) & (0x200000000005uLL >> (v6 - 96));
          else
            v38 = 1;
          if ((v38 & 1) != 0
            || ((v48 = *(_BYTE **)(a1 + 480), v48[319]) ? (v49 = v48[338] == 0) : (v49 = 0), !v49 && !v48[326]))
          {
            v39 = *(_QWORD *)(v19 + 48);
            if (!v39)
              goto LABEL_68;
            v40 = 1;
            do
            {
              if (*(_DWORD *)(v39 + 8) == v28)
              {
                if (!v40)
                  goto LABEL_68;
                --v40;
              }
              v39 = *(_QWORD *)(v39 + 32);
            }
            while (v39);
            if (!v40)
            {
              if (v37 == 395)
                goto LABEL_93;
            }
            else
            {
LABEL_68:
              __src[0] = &v1108;
              __src[1] = &v1108;
              v1106 = 8;
              v1107 = 0;
              v41 = sub_1C48DC348(v19, (llvm::SmallPtrSetImplBase *)__src);
              if (__src[1] != __src[0])
                free(__src[1]);
              if (v37 == 395)
                v42 = 0;
              else
                v42 = v41;
              if ((v42 & 1) == 0)
                goto LABEL_93;
            }
            v43 = *(_QWORD *)(v35 + 48);
            if (!v43)
              goto LABEL_81;
            v44 = 1;
            do
            {
              if (*(_DWORD *)(v43 + 8) == (_DWORD)v36)
              {
                if (!v44)
                  goto LABEL_81;
                --v44;
              }
              v43 = *(_QWORD *)(v43 + 32);
            }
            while (v43);
            if (v44)
LABEL_81:
              *((_BYTE *)&v1101 + v17) = 1;
            v45 = *(unsigned __int16 *)(v35 + 24);
            if (v45 == 46)
            {
              v46 = *(_QWORD *)(**(_QWORD **)(v35 + 32) + 80);
              v47 = (_QWORD *)(v46 + 24);
              if (*(_DWORD *)(v46 + 32) >= 0x41u)
                v47 = (_QWORD *)*v47;
              if (*v47 == 2131)
                goto LABEL_93;
            }
            else
            {
              if ((sub_1C48DB5A0(*(unsigned __int16 *)(v35 + 24)) & 1) != 0)
                goto LABEL_93;
              if ((v45 - 202) <= 0x15 && ((1 << (v45 + 54)) & 0x300003) != 0)
                goto LABEL_93;
            }
          }
          *((_BYTE *)&v1101 + v17) = 1;
        }
LABEL_93:
        ++v17;
        v50 = (uint64_t **)*(unsigned __int16 *)(v4 + 56);
        if (v17 >= (unint64_t)v50)
        {
          v16 = BYTE1(v1101);
          v86 = BYTE2(v1101);
          if (!(_BYTE)v1101)
            goto LABEL_145;
          goto LABEL_147;
        }
      }
    }
    LODWORD(v50) = 0;
    v86 = 0;
LABEL_145:
    if (!v16 && !v86)
    {
LABEL_168:
      if (v6 > 170)
      {
        if (v6 <= 191)
        {
          switch(v6)
          {
            case 171:
              v268 = *(uint64_t **)(v4 + 32);
              v267 = *(_QWORD *)(v4 + 40);
              v270 = *(llvm **)v267;
              v269 = *(_QWORD *)(v267 + 8);
              v271 = *v268;
              v272 = *((unsigned int *)v268 + 2);
              v273 = v268[5];
              if (*(unsigned __int16 *)(*v268 + 24) - 198 > 2)
                goto LABEL_368;
              v274 = *(_QWORD *)(v271 + 48);
              if (!v274)
                goto LABEL_139;
              v275 = 1;
              do
              {
                if (*(_DWORD *)(v274 + 8) == v272)
                {
                  if (!v275)
                    goto LABEL_139;
                  --v275;
                }
                v274 = *(_QWORD *)(v274 + 32);
              }
              while (v274);
              if (v275)
                goto LABEL_139;
              v276 = *(uint64_t **)(v271 + 32);
              v271 = *v276;
              v272 = *((unsigned int *)v276 + 2);
LABEL_368:
              if (*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318))
                goto LABEL_139;
              v277 = *(_QWORD *)(v271 + 48);
              if (!v277)
                goto LABEL_139;
              v278 = 1;
              do
              {
                if (*(_DWORD *)(v277 + 8) == v272)
                {
                  if (!v278)
                    goto LABEL_139;
                  --v278;
                }
                v277 = *(_QWORD *)(v277 + 32);
              }
              while (v277);
              if (v278)
                goto LABEL_139;
              v279 = *(unsigned __int16 *)(v271 + 24);
              if (v279 != 177 && v279 != 175)
                goto LABEL_139;
              v280 = *(_QWORD *)(v271 + 40) + 16 * v272;
              v282 = *(void **)v280;
              v281 = *(void **)(v280 + 8);
              __src[0] = v282;
              __src[1] = v281;
              if (v282 == v270)
              {
                if ((_BYTE)v282)
                  goto LABEL_814;
                v283 = v281 != (void *)v269;
              }
              else
              {
                v283 = 1;
              }
              if (v279 != 175 && v283)
                goto LABEL_139;
LABEL_814:
              v650 = *(unsigned __int16 *)(v273 + 24);
              if (v650 != 35 && v650 != 11)
                goto LABEL_139;
              v651 = *(int8x8_t **)(v273 + 80);
              v652 = v651 + 3;
              if (v651[4].i32[0] >= 0x41u)
                v652 = (int8x8_t *)*v652;
              v653 = (unint64_t)*v652;
              v654 = (uint8x8_t)vcnt_s8(*v652);
              v654.i16[0] = vaddlv_u8(v654);
              if (v654.u32[0] != 1)
                goto LABEL_139;
              v655 = sub_1C6131328((unsigned __int8 *)__src, v12, v13);
              if (!v653)
                goto LABEL_139;
              if (__clz(__rbit64(v653)) >= (unint64_t)v655)
                goto LABEL_139;
              v656 = *(_QWORD *)(*(_QWORD *)(v271 + 32) + 40);
              v657 = *(unsigned __int16 *)(v656 + 24);
              if (v657 != 35 && v657 != 11)
                goto LABEL_139;
              v658 = *(_QWORD *)(v656 + 80);
              v659 = (unint64_t *)(v658 + 24);
              v660 = *(_DWORD *)(v658 + 32);
              if (v279 == 175)
              {
                if (v660 > 0x40)
                  v659 = (unint64_t *)*v659;
                v661 = *v659;
                if (v661 < 5)
                  goto LABEL_139;
                v662 = v653 >> v661;
              }
              else
              {
                if (v660 >= 0x41)
                  v659 = (unint64_t *)*v659;
                v662 = v653 << *v659;
              }
              v732 = sub_1C6366AB4(*v1, v653, (const llvm::APInt *)&v1075, v270, v269, 0, 0);
              v1049 = v733;
              v734 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, v270, v269, 0, 0);
              v736 = v735;
              v739 = sub_1C6366AB4(*v1, v662, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v740 = v737;
              v741 = 0;
              v742 = *(_QWORD *)(*v1 + 832);
              if (v742)
                v741 = *(_WORD *)(v742 + 8);
              v743 = sub_1C5D56C70(*v1, 171, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], **(_QWORD **)(v271 + 32), *(_QWORD *)(*(_QWORD *)(v271 + 32) + 8), v738, (uint64_t)v739, v737, v741);
              v251 = sub_1C47DF81C((_QWORD *)*v1, (const llvm::APInt *)&v1075, (uint64_t)v743, v744, (uint64_t)v739, v740, (uint64_t)v732, v1049, (uint64_t)v734, v736, SHIDWORD(v736), 0x11u);
              LODWORD(v250) = v745;
              v252 = *v1;
              goto LABEL_784;
            case 172:
              for (i = 0; i != 8; i += 4)
              {
                v473 = &__src[i];
                *((_DWORD *)v473 + 2) = 1;
                *v473 = 0;
                *((_DWORD *)v473 + 6) = 1;
                v473[2] = 0;
              }
              sub_1C6368768(*v1, **(_QWORD **)(v4 + 32), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8), 0, (uint64_t)&v1095);
              if (LODWORD(__src[1]) >= 0x41 && __src[0])
                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
              __src[0] = (void *)v1095;
              LODWORD(__src[1]) = DWORD2(v1095);
              DWORD2(v1095) = 0;
              if (v1107 >= 0x41 && v1106)
              {
                MEMORY[0x1CAA32F9C](v1106, 0x1000C8000313F17);
                v1106 = (uint64_t)v1096;
                v1107 = v1097;
                v1097 = 0;
                if (DWORD2(v1095) >= 0x41 && (_QWORD)v1095)
                  MEMORY[0x1CAA32F9C](v1095, 0x1000C8000313F17);
              }
              else
              {
                v1106 = (uint64_t)v1096;
                v1107 = v1097;
              }
              sub_1C6368768(*v1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 48), 0, (uint64_t)&v1095);
              if (v1109 >= 0x41 && v1108)
                MEMORY[0x1CAA32F9C](v1108, 0x1000C8000313F17);
              v1108 = (void *)v1095;
              v1109 = DWORD2(v1095);
              DWORD2(v1095) = 0;
              if (v1111[0] >= 0x41u && v1110)
              {
                MEMORY[0x1CAA32F9C](v1110, 0x1000C8000313F17);
                v1110 = (uint64_t)v1096;
                v1111[0] = v1097;
                v1097 = 0;
                if (DWORD2(v1095) >= 0x41 && (_QWORD)v1095)
                  MEMORY[0x1CAA32F9C](v1095, 0x1000C8000313F17);
              }
              else
              {
                v1110 = (uint64_t)v1096;
                v1111[0] = v1097;
              }
              v475 = __src[1];
              v1069 = __src[1];
              if (LODWORD(__src[1]) > 0x40)
              {
                v560 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                v1068 = (void *)operator new[]();
                memcpy(v1068, __src[0], v560);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1068);
                v475 = v1069;
                v477 = (uint64_t)v1068;
              }
              else
              {
                if (LODWORD(__src[1]))
                  v476 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
                else
                  v476 = 0;
                v477 = v476 & ~(uint64_t)__src[0];
                v1068 = (void *)v477;
              }
              v1069 = 0;
              v1067 = v1109;
              if (v1109 > 0x40)
              {
                v563 = (((unint64_t)v1109 + 63) >> 3) & 0x3FFFFFF8;
                v1066 = (void *)operator new[]();
                memcpy(v1066, v1108, v563);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1066);
                v564 = v1067;
                v562 = (unint64_t)v1066;
                v1067 = 0;
                if (v564 >= 0x41)
                {
                  v641 = 0;
                  v642 = (unint64_t)(v564 + 63) >> 6;
                  do
                  {
                    *(_QWORD *)(v562 + v641) &= *(_QWORD *)(v477 + v641);
                    v641 += 8;
                  }
                  while (8 * v642 != v641);
                  v643 = 0;
                  do
                  {
                    v61 = v642-- < 1;
                    if (v61)
                      break;
                    v644 = *(_QWORD *)(v562 + 8 * v642);
                    v643 += __clz(v644);
                  }
                  while (!v644);
                  v565 = 0;
                  v645 = v564 | 0xFFFFFFC0;
                  if ((v564 & 0x3F) == 0)
                    v645 = 0;
                  if ((v564 - v643 - v645) <= 0x40)
                    v565 = *(_QWORD *)v562 == 0;
                  if (v562)
                    MEMORY[0x1CAA32F9C](v562, 0x1000C8000313F17);
LABEL_798:
                  if (v475 >= 0x41 && v477)
                    MEMORY[0x1CAA32F9C](v477, 0x1000C8000313F17);
                  if (v565)
                  {
                    v686 = *(uint64_t **)(v4 + 32);
                    v688 = *v686;
                    v687 = v686[1];
                    v689 = v686[5];
                    v690 = v686[6];
                    if (*(_WORD *)(v688 + 24) != 175)
                      goto LABEL_853;
                    v691 = *(_QWORD *)(*(_QWORD *)(v688 + 32) + 40);
                    v692 = *(unsigned __int16 *)(v691 + 24);
                    if (v692 != 35 && v692 != 11)
                      goto LABEL_853;
                    v694 = *(_QWORD *)(v691 + 80);
                    v695 = (_QWORD *)(v694 + 24);
                    if (*(_DWORD *)(v694 + 32) >= 0x41u)
                      v695 = (_QWORD *)*v695;
                    if (*v695 <= 4uLL)
                    {
                      v696 = v687 & 0xFFFFFFFF00000000 | v690;
                      v690 = v690 & 0xFFFFFFFF00000000 | v687;
                      v697 = v688;
                      v687 = v696;
                    }
                    else
                    {
LABEL_853:
                      v697 = v689;
                      v689 = v688;
                    }
                    v699 = *(_QWORD *)(*v1 + 832);
                    if (v699)
                      LOWORD(v699) = *(_WORD *)(v699 + 8);
                    v700 = sub_1C5D56C70(*v1, 56, (const llvm::APInt *)&v1075, **(llvm ***)(v4 + 40), *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v689, v687, v474, v697, v690, v699);
                    sub_1C5D6146C(*v1, v4, 0, (uint64_t)v700, v701);
                    sub_1C63725DC((uint64_t)v700);
                  }
                  for (j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
                  {
                    v647 = &__src[j / 2];
                    if (v1111[j] >= 0x41u)
                    {
                      v648 = v647[6];
                      if (v648)
                        MEMORY[0x1CAA32F9C](v648, 0x1000C8000313F17);
                    }
                    if (*((_DWORD *)v647 + 10) >= 0x41u)
                    {
                      v649 = v647[4];
                      if (v649)
                        MEMORY[0x1CAA32F9C](v649, 0x1000C8000313F17);
                    }
                  }
                  goto LABEL_139;
                }
              }
              else
              {
                if (v1109)
                  v561 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1109;
                else
                  v561 = 0;
                v562 = v561 & ~(unint64_t)v1108;
                v1066 = (void *)v562;
                v1067 = 0;
              }
              v565 = (v562 & v477) == 0;
              goto LABEL_798;
            case 173:
              v255 = *(_OWORD *)*(_QWORD *)(v4 + 40);
              *(_OWORD *)__src = v255;
              if (*(_WORD *)(v4 + 24) != 173)
                goto LABEL_139;
              v256 = *(uint64_t **)(v4 + 32);
              v257 = *v256;
              if (*(_WORD *)(*v256 + 24) != 56)
                goto LABEL_139;
              v258 = v256[5];
              v259 = *(_QWORD *)(v257 + 32);
              if (*(_QWORD *)(v259 + 40) != v258)
                goto LABEL_139;
              if (*(_DWORD *)(v259 + 48) != *((_DWORD *)v256 + 12))
                goto LABEL_139;
              if (*(_WORD *)(v258 + 24) != 176)
                goto LABEL_139;
              v260 = *(_QWORD *)(v258 + 32);
              if (*(_QWORD *)v260 != *(_QWORD *)v259 || *(_DWORD *)(v260 + 8) != *(_DWORD *)(v259 + 8))
                goto LABEL_139;
              v261 = *(_QWORD *)(v260 + 40);
              v262 = *(unsigned __int16 *)(v261 + 24);
              if (v262 != 35 && v262 != 11)
                goto LABEL_139;
              v264 = *(_QWORD *)(v261 + 80);
              if ((_BYTE)v255)
                ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
              else
                ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
              v713 = ExtendedSizeInBits;
              if ((_DWORD)v266 == 1)
              v714 = (llvm::APInt *)(v264 + 24);
              v715 = *(_DWORD *)(v264 + 32);
              if (v715 < 0x41)
                goto LABEL_871;
              if (v715 - llvm::APInt::countLeadingZerosSlowCase(v714) > 0x40)
                goto LABEL_139;
              v714 = *(llvm::APInt **)v714;
LABEL_871:
              if (*(_QWORD *)v714 != v713 - 1)
                goto LABEL_139;
              v718 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v719 = v716;
              v720 = *(uint64_t **)(v257 + 32);
              v721 = *v720;
              v722 = v720[1];
              v723 = *v1;
              if (*(_WORD *)(*v720 + 24) == 57)
              {
                v724 = *(_QWORD *)(v723 + 832);
                if (v724)
                  LOWORD(v724) = *(_WORD *)(v724 + 8);
                v725 = sub_1C5D56C70(v723, 57, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], *(_QWORD *)(*(_QWORD *)(v721 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v721 + 32) + 48), v717, **(_QWORD **)(v721 + 32), *(_QWORD *)(*(_QWORD *)(v721 + 32) + 8), v724);
              }
              else
              {
                v730 = *(_QWORD *)(v723 + 832);
                if (v730)
                  LOWORD(v730) = *(_WORD *)(v730 + 8);
                v725 = sub_1C5D56C70(v723, 57, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v718, v716, v717, v721, v722, v730);
              }
              v251 = sub_1C47DF81C((_QWORD *)*v1, (const llvm::APInt *)&v1075, **(_QWORD **)(v257 + 32), *(_QWORD *)(*(_QWORD *)(v257 + 32) + 8), (uint64_t)v718, v719, (uint64_t)v725, v726, **(_QWORD **)(v257 + 32), *(_QWORD *)(*(_QWORD *)(v257 + 32) + 8), HIDWORD(*(_QWORD *)(*(_QWORD *)(v257 + 32) + 8)), 0x14u);
              LODWORD(v250) = v731;
              v252 = *v1;
              goto LABEL_784;
            case 175:
            case 177:
              v106 = *(uint64_t **)(v4 + 32);
              v105 = *(_QWORD *)(v4 + 40);
              v107 = *(llvm **)v105;
              v108 = *(void **)(v105 + 8);
              __src[0] = *(void **)v105;
              __src[1] = v108;
              v109 = v106[5];
              v110 = *(unsigned __int16 *)(v109 + 24);
              if (v110 != 35 && v110 != 11 || v107 == 6)
                goto LABEL_139;
              v113 = *v106;
              v114 = v106[6];
              v115 = *(unsigned __int16 *)(*v106 + 24);
              if (v6 != 177)
                goto LABEL_197;
              if ((v115 - 171) > 2)
                goto LABEL_197;
              v116 = *(_QWORD *)(v113 + 48);
              if (!v116)
                goto LABEL_197;
              v117 = *((_DWORD *)v106 + 2);
              v118 = 1;
              break;
            default:
              goto LABEL_139;
          }
          do
          {
            if (*(_DWORD *)(v116 + 8) == v117)
            {
              if (!v118)
                goto LABEL_197;
              --v118;
            }
            v116 = *(_QWORD *)(v116 + 32);
          }
          while (v116);
          if (v118)
            goto LABEL_197;
          v119 = *(uint64_t **)(v113 + 32);
          v120 = v119[5];
          v121 = *(unsigned __int16 *)(v120 + 24);
          if (v121 != 35 && v121 != 11)
            goto LABEL_197;
          v123 = *(_QWORD *)(v120 + 80);
          v124 = (unint64_t *)(v123 + 24);
          if (*(_DWORD *)(v123 + 32) >= 0x41u)
            v124 = (unint64_t *)*v124;
          v125 = *(_QWORD *)(v109 + 80);
          v126 = (_QWORD *)(v125 + 24);
          if (*(_DWORD *)(v125 + 32) >= 0x41u)
            v126 = (_QWORD *)*v126;
          v127 = *v124;
          v128 = (_QWORD *)*v126;
          v129 = v127 >> (char)v128;
          if (v127 >> (char)v128 << (char)v128 == v127)
          {
            v702 = *(_QWORD *)(*v1 + 832);
            if (v702)
              LOWORD(v702) = *(_WORD *)(v702 + 8);
            v703 = sub_1C5D56C70(*v1, 177, (const llvm::APInt *)&v1075, v107, (uint64_t)v108, *v119, v119[1], v14, v109, v114, v702);
            v705 = v704;
            v706 = sub_1C6366AB4(*v1, v129, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
            v709 = *(_QWORD *)(*v1 + 832);
            if (v709)
              v710 = *(_WORD *)(v709 + 8);
            else
              v710 = 0;
            v251 = sub_1C5D56C70(*v1, *(unsigned __int16 *)(v113 + 24), (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v703, v705, v708, (uint64_t)v706, v707, v710);
            LODWORD(v250) = v727;
            v461 = v1;
          }
          else
          {
LABEL_197:
            if (v115 != 176)
              goto LABEL_139;
            v130 = *(_QWORD *)(*(_QWORD *)(v113 + 32) + 40);
            v131 = *(unsigned __int16 *)(v130 + 24);
            if (v131 != 35 && v131 != 11)
              goto LABEL_139;
            v133 = *(_QWORD *)(v130 + 80);
            v134 = (_QWORD *)(v133 + 24);
            if (*(_DWORD *)(v133 + 32) >= 0x41u)
              v134 = (_QWORD *)*v134;
            v135 = (_QWORD *)*v134;
            if ((_BYTE)v107)
              v136 = sub_1C47A8C74((unsigned __int8 *)__src);
            else
              v136 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            v450 = v136;
            if ((_DWORD)v137 == 1)
            if (v135 != (_QWORD *)(v450 - 1))
              goto LABEL_139;
            v451 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
            v1029 = v452;
            v1042 = (uint64_t)v451;
            v454 = sub_1C6366AB4(*v1, -1, (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
            v456 = 0;
            v457 = *(_QWORD *)(*v1 + 832);
            if (v457)
              v456 = *(_WORD *)(v457 + 8);
            v458 = sub_1C5D56C70(*v1, *(unsigned __int16 *)(v4 + 24), (const llvm::APInt *)&v1075, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v454, v453, v455, v109, v114, v456);
            v460 = v459;
            v461 = v1;
            v462 = *v1;
            v463 = *(uint64_t **)(v113 + 32);
            v464 = v463[1];
            v1020 = *v463;
            v465 = v458[5] + 16 * v459;
            v466 = *(llvm **)v465;
            v467 = *(_QWORD *)(v465 + 8);
            v468 = sub_1C6367818((_QWORD *)*v1, 0x14u);
            v251 = sub_1C63698B8(v462, (const char *)0xC0, (const llvm::APInt *)&v1075, v466, v467, v1020, v464, v470, v1042, v1029, (uint64_t)v458, v460, v1042, v1029, v468, v469);
            LODWORD(v250) = v471;
          }
          v252 = *v461;
          goto LABEL_784;
        }
        if (v6 != 192)
        {
          if (v6 == 201)
          {
            v315 = *(unsigned int **)(v4 + 32);
            v316 = *(uint64_t **)v315;
            v317 = *(unsigned __int16 *)(*(_QWORD *)v315 + 24);
            if (v317 == 46)
            {
              v318 = *(_QWORD *)(*(_QWORD *)v316[4] + 80);
              v319 = (_QWORD *)(v318 + 24);
              if (*(_DWORD *)(v318 + 32) >= 0x41u)
                v319 = (_QWORD *)*v319;
              v320 = *(_DWORD *)v319;
              v321 = (v320 - 2578) > 0x19 || ((1 << (v320 - 18)) & 0x3FC0001) == 0;
              if (!v321 || (v320 - 2501) < 8)
                goto LABEL_139;
              v322 = v320 - 2109;
              v61 = v322 > 0x3B;
              v323 = (1 << v322) & 0x800000001000003;
              if (!v61 && v323 != 0)
                goto LABEL_139;
            }
            else if ((v317 - 435) < 2)
            {
              goto LABEL_139;
            }
            v325 = v315[2];
            v326 = v316[6];
            if (v326)
            {
              v327 = 1;
              while (1)
              {
                if (*(_DWORD *)(v326 + 8) == (_DWORD)v325)
                {
                  if (!v327)
                  {
                    v449 = 0;
                    goto LABEL_644;
                  }
                  --v327;
                }
                v326 = *(_QWORD *)(v326 + 32);
                if (!v326)
                  goto LABEL_616;
              }
            }
            v327 = 1;
LABEL_616:
            v449 = 1;
LABEL_644:
            v508 = **(unsigned __int8 **)(v4 + 40);
            if (v449 && !v327 && v508 == 4)
            {
              if (*(_BYTE *)(v316[5] + 16 * v325) == 5 && (v317 - 171) <= 6 && v317 != 174)
                goto LABEL_139;
            }
            else if (v508 == 5)
            {
              v509 = v316[5];
              if (*(_QWORD *)v509 == 6)
              {
                v684 = *((_QWORD *)v315 + 1);
                if (v317 == 9)
                {
                  v316 = sub_1C612E4E4(*v1, *v1 + 112, 0, (const llvm::APInt *)&v1075, *((_DWORD *)v316 + 19), *(llvm **)v509, *(_QWORD *)(v509 + 8));
                  LODWORD(v684) = v685;
                }
                v711 = sub_1C636E638(*v1, 25, (const llvm::APInt *)&v1075, (llvm *)5, 0, (uint64_t)v316, v684);
                sub_1C5D6146C(*v1, v4, 0, (uint64_t)v711, v712);
                sub_1C63725DC((uint64_t)v711);
                v508 = **(unsigned __int8 **)(v4 + 40);
              }
            }
            if (v508 != 4)
              goto LABEL_139;
            v510 = *(uint64_t ***)(v4 + 32);
            v511 = *v510;
            v512 = (*v510)[5];
            if ((unint64_t)*(_QWORD *)v512 - 5 > 1)
              goto LABEL_139;
            v513 = v510[1];
            if (*((_WORD *)v511 + 12) == 9)
            {
              v511 = sub_1C612E4E4(*v1, *v1 + 112, 0, (const llvm::APInt *)&v1075, *((_DWORD *)v511 + 19), *(llvm **)v512, *(_QWORD *)(v512 + 8));
              LODWORD(v513) = v514;
            }
            v251 = sub_1C636E638(*v1, 1, (const llvm::APInt *)&v1075, (llvm *)4, 0, (uint64_t)v511, (int)v513);
            LODWORD(v250) = v698;
            v252 = *v1;
          }
          else
          {
            if (v6 != 260)
              goto LABEL_139;
            v182 = *(_QWORD *)(v4 + 32);
            LODWORD(v1077) = *(_DWORD *)(*(_QWORD *)(v182 + 40) + 76);
            *(_OWORD *)__src = *(_OWORD *)(v182 + 80);
            v1095 = *(_OWORD *)(v182 + 120);
            if (sub_1C48DB808(a1, (unint64_t *)__src, &v1095, (int *)&v1077))
            {
              v431 = v1;
              v498 = *v1;
              v500 = *(uint64_t **)(v4 + 32);
              v499 = *(_QWORD *)(v4 + 40);
              v501 = *(llvm **)v499;
              v502 = *(_QWORD *)(v499 + 8);
              v503 = *v500;
              v504 = v500[1];
              v505 = sub_1C6367818((_QWORD *)*v1, v1077);
              v445 = sub_1C63698B8(v498, (const char *)0x104, (const llvm::APInt *)&v1075, v501, v502, v503, v504, v507, v505, v506, (uint64_t)__src[0], (int)__src[1], v1095, SDWORD2(v1095), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 168));
            }
            else
            {
              v183 = *(unsigned __int16 *)(v1095 + 24);
              if (v183 != 35 && v183 != 11)
                goto LABEL_139;
              if ((_DWORD)v1077 == 12 || (_DWORD)v1077 == 20)
              {
                v332 = *(_QWORD *)(v1095 + 80);
                v333 = (_QWORD *)(v332 + 24);
                v334 = *(_DWORD *)(v332 + 32);
                if (v334 >= 0x41)
                  v333 = (_QWORD *)*v333;
                if (*v333 != 256)
                  goto LABEL_139;
                if ((_DWORD)v1077 == 12)
                  v626 = 13;
                else
                  v626 = 21;
                v1048 = v626;
                v431 = v1;
                v627 = *(_QWORD *)(v1095 + 40) + 16 * DWORD2(v1095);
                v628 = sub_1C6366AB4(*v1, 255, (const llvm::APInt *)&v1075, *(llvm **)v627, *(_QWORD *)(v627 + 8), 0, 0);
                *(_QWORD *)&v1095 = v628;
                DWORD2(v1095) = v629;
                v630 = *v1;
                v632 = *(uint64_t **)(v4 + 32);
                v631 = *(_QWORD *)(v4 + 40);
                v633 = *(llvm **)v631;
                v634 = *(_QWORD *)(v631 + 8);
                v635 = *v632;
                v636 = v632[1];
                v637 = sub_1C6367818((_QWORD *)*v1, v1048);
                v445 = sub_1C63698B8(v630, (const char *)0x104, (const llvm::APInt *)&v1075, v633, v634, v635, v636, v639, v637, v638, (uint64_t)__src[0], (int)__src[1], (uint64_t)v628, SDWORD2(v1095), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 168));
              }
              else
              {
                if ((_DWORD)v1077 != 18)
                  goto LABEL_139;
                v184 = *(_QWORD *)(v1095 + 80);
                v185 = *(_DWORD *)(v184 + 32);
                v335 = v185 > 0x40
                     ? **(_QWORD **)(v184 + 24)
                     : (uint64_t)(*(_QWORD *)(v184 + 24) << -(char)v185) >> -(char)v185;
                if (v335 != -1)
                  goto LABEL_139;
                LODWORD(v1077) = 19;
                v431 = v1;
                v432 = *(_QWORD *)(v1095 + 40) + 16 * DWORD2(v1095);
                v433 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, *(llvm **)v432, *(_QWORD *)(v432 + 8), 0, 0);
                *(_QWORD *)&v1095 = v433;
                DWORD2(v1095) = v434;
                v435 = *v1;
                v437 = *(uint64_t **)(v4 + 32);
                v436 = *(_QWORD *)(v4 + 40);
                v438 = *(llvm **)v436;
                v439 = *(_QWORD *)(v436 + 8);
                v440 = *v437;
                v441 = v437[1];
                v442 = sub_1C6367818((_QWORD *)*v1, 0x13u);
                v445 = sub_1C63698B8(v435, (const char *)0x104, (const llvm::APInt *)&v1075, v438, v439, v440, v441, v444, v442, v443, (uint64_t)__src[0], (int)__src[1], (uint64_t)v433, SDWORD2(v1095), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 168));
              }
            }
            v251 = v445;
            LODWORD(v250) = v446;
            v252 = *v431;
          }
          goto LABEL_784;
        }
        v284 = *(_QWORD *)(v4 + 32);
        *(_OWORD *)__src = *(_OWORD *)v284;
        v1095 = *(_OWORD *)(v284 + 40);
        LODWORD(v1077) = *(_DWORD *)(*(_QWORD *)(v284 + 160) + 76);
        if (sub_1C48DB808(a1, (unint64_t *)__src, &v1095, (int *)&v1077))
        {
          v488 = *v1;
          v1028 = (int)__src[1];
          v1041 = __src[0];
          v1021 = v1095;
          v1011 = DWORD2(v1095);
          v489 = *(_QWORD **)(v4 + 32);
          v490 = v489[10];
          v491 = v489[11];
          v492 = v489[15];
          v493 = v489[16];
          v494 = (llvm **)(*(_QWORD *)(v490 + 40) + 16 * v491);
          v495 = *v494;
          v496 = (uint64_t)v494[1];
          v993 = sub_1C6367818((_QWORD *)*v1, v1077);
          v995 = v497;
          v991 = v492;
          v992 = v493;
          v989 = v490;
          v990 = v491;
          v987 = v1021;
          v988 = v1011;
          v428 = v488;
          v429 = v495;
          v430 = v496;
        }
        else
        {
          v285 = *(unsigned __int16 *)(v1095 + 24);
          if (v285 != 35 && v285 != 11)
            goto LABEL_139;
          if ((_DWORD)v1077 == 12 || (_DWORD)v1077 == 20)
          {
            v328 = *(_QWORD *)(v1095 + 80);
            v329 = (_QWORD *)(v328 + 24);
            v330 = *(_DWORD *)(v328 + 32);
            if (v330 >= 0x41)
              v329 = (_QWORD *)*v329;
            if (*v329 != 256)
              goto LABEL_139;
            if ((_DWORD)v1077 == 12)
              v612 = 13;
            else
              v612 = 21;
            v1047 = v612;
            v613 = *(_QWORD *)(v1095 + 40) + 16 * DWORD2(v1095);
            v614 = sub_1C6366AB4(*v1, 255, (const llvm::APInt *)&v1075, *(llvm **)v613, *(_QWORD *)(v613 + 8), 0, 0);
            *(_QWORD *)&v1095 = v614;
            DWORD2(v1095) = v615;
            v616 = *v1;
            v1033 = __src[0];
            v1025 = (int)__src[1];
            v617 = *(_QWORD **)(v4 + 32);
            v618 = v617[10];
            v619 = v617[11];
            v620 = v617[15];
            v621 = v617[16];
            v622 = *(_QWORD *)(v618 + 40) + 16 * v619;
            v623 = *(_QWORD *)(v622 + 8);
            v1006 = *(llvm **)v622;
            v1016 = v615;
            v994 = sub_1C6367818((_QWORD *)*v1, v1047);
            v486 = sub_1C63698B8(v616, (const char *)0xC0, (const llvm::APInt *)&v1075, v1006, v623, (uint64_t)v1033, v1025, v625, (uint64_t)v614, v1016, v618, v619, v620, v621, v994, v624);
            goto LABEL_688;
          }
          if ((_DWORD)v1077 != 18)
            goto LABEL_139;
          v287 = *(_QWORD *)(v1095 + 80);
          v288 = *(_DWORD *)(v287 + 32);
          v331 = v288 > 0x40
               ? **(_QWORD **)(v287 + 24)
               : (uint64_t)(*(_QWORD *)(v287 + 24) << -(char)v288) >> -(char)v288;
          if (v331 != -1)
            goto LABEL_139;
          LODWORD(v1077) = 19;
          v415 = *(_QWORD *)(v1095 + 40) + 16 * DWORD2(v1095);
          v416 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, *(llvm **)v415, *(_QWORD *)(v415 + 8), 0, 0);
          *(_QWORD *)&v1095 = v416;
          DWORD2(v1095) = v417;
          v418 = *v1;
          v1028 = (int)__src[1];
          v1041 = __src[0];
          v1019 = v417;
          v419 = *(_QWORD **)(v4 + 32);
          v420 = v419[10];
          v421 = v419[11];
          v423 = v419[15];
          v422 = v419[16];
          v424 = (llvm **)(*(_QWORD *)(v420 + 40) + 16 * v421);
          v425 = (uint64_t)v424[1];
          v1010 = *v424;
          v993 = sub_1C6367818((_QWORD *)*v1, 0x13u);
          v995 = v426;
          v991 = v423;
          v992 = v422;
          v989 = v420;
          v990 = v421;
          v987 = (uint64_t)v416;
          v988 = v1019;
          v428 = v418;
          v429 = v1010;
          v430 = v425;
        }
        v486 = sub_1C63698B8(v428, (const char *)0xC0, (const llvm::APInt *)&v1075, v429, v430, (uint64_t)v1041, v1028, v427, v987, v988, v989, v990, v991, v992, v993, v995);
LABEL_688:
        v251 = v486;
        LODWORD(v250) = v487;
        v252 = *v1;
LABEL_784:
        v253 = v4;
        v254 = 0;
LABEL_785:
        v640 = (uint64_t)v251;
LABEL_786:
        sub_1C5D6146C(v252, v253, v254, v640, v250);
        sub_1C63725DC((uint64_t)v251);
        goto LABEL_139;
      }
      if (v6 <= 95)
      {
        if ((v6 - 56) >= 2)
        {
          if (v6 != 47)
            goto LABEL_139;
          v246 = *(_QWORD *)(v4 + 32);
          v247 = *(_QWORD *)(*(_QWORD *)(v246 + 40) + 80);
          v248 = (_QWORD *)(v247 + 24);
          if (*(_DWORD *)(v247 + 32) >= 0x41u)
            v248 = (_QWORD *)*v248;
          if ((*(_DWORD *)v248 - 1282) > 0x18F)
            goto LABEL_139;
          for (k = *(_QWORD *)(v4 + 48); k; k = *(_QWORD *)(k + 32))
          {
            if (!*(_DWORD *)(k + 8))
              goto LABEL_139;
          }
          v251 = *(uint64_t **)v246;
          v250 = *(_QWORD *)(v246 + 8);
          v252 = *v1;
          v253 = v4;
          v254 = 1;
          goto LABEL_785;
        }
        v138 = 0;
        v139 = *(_QWORD *)(v4 + 40);
        v140 = *(llvm **)v139;
        v141 = *(_QWORD *)(v139 + 8);
        v142 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 480) + 318);
        v143 = *(_QWORD *)v139;
        v144 = 1;
        do
        {
          v145 = v144;
          v146 = (uint64_t *)(*(_QWORD *)(v4 + 32) + 40 * v138);
          v147 = *v146;
          if (*(_WORD *)(*v146 + 24) == 171)
          {
            v148 = *(_QWORD *)(v147 + 48);
            if (v148)
            {
              v149 = v146[1];
              v150 = 1;
              do
              {
                if (*(_DWORD *)(v148 + 8) == (_DWORD)v149)
                {
                  if (!v150)
                    goto LABEL_218;
                  --v150;
                }
                v148 = *(_QWORD *)(v148 + 32);
              }
              while (v148);
              if (!v150)
              {
                v151 = *(uint64_t **)(v147 + 32);
                v152 = v151[5];
                v153 = *(unsigned __int16 *)(v152 + 24);
                if (v153 == 35 || v153 == 11)
                {
                  v155 = *(_QWORD *)(v152 + 80);
                  v156 = (_QWORD *)(v155 + 24);
                  if (*(_DWORD *)(v155 + 32) >= 0x41u)
                    v156 = (_QWORD *)*v156;
                  v157 = *v151;
                  if (*(_WORD *)(*v151 + 24) == 175)
                  {
                    v158 = *(_QWORD *)(v157 + 48);
                    if (v158)
                    {
                      v159 = *(_DWORD *)v156;
                      v160 = *((_DWORD *)v151 + 2);
                      v161 = 1;
                      do
                      {
                        if (*(_DWORD *)(v158 + 8) == v160)
                        {
                          if (!v161)
                            goto LABEL_218;
                          --v161;
                        }
                        v158 = *(_QWORD *)(v158 + 32);
                      }
                      while (v158);
                      if (!v161)
                      {
                        v162 = *(uint64_t **)(v157 + 32);
                        v163 = v162[5];
                        v164 = *(unsigned __int16 *)(v163 + 24);
                        if (v164 == 35 || v164 == 11)
                        {
                          v166 = *(_QWORD *)(v163 + 80);
                          v167 = (unsigned int *)(v166 + 24);
                          if (*(_DWORD *)(v166 + 32) >= 0x41u)
                            v167 = *(unsigned int **)v167;
                          v1017 = *v167;
                          v168 = *v1;
                          v1001 = v162[1];
                          v1007 = *v162;
                          v1027 = v141;
                          v1039 = v140;
                          v169 = sub_1C6366AB4(*v1, v159 >> v1017, (const llvm::APInt *)&v1075, v140, v141, 0, 0);
                          v172 = *(_QWORD *)(v168 + 832);
                          if (v172)
                            LOWORD(v172) = *(_WORD *)(v172 + 8);
                          v173 = sub_1C5D56C70(v168, 171, (const llvm::APInt *)&v1075, v1039, v1027, v1007, v1001, v171, (uint64_t)v169, v170, v172);
                          v1002 = v174;
                          v1008 = (uint64_t)v173;
                          v175 = *v1;
                          v176 = sub_1C6366AB4(*v1, v1017, (const llvm::APInt *)&v1075, v1039, v1027, 0, 0);
                          v179 = *(_QWORD *)(v175 + 832);
                          if (v179)
                            LOWORD(v179) = *(_WORD *)(v179 + 8);
                          v180 = sub_1C5D56C70(v175, 175, (const llvm::APInt *)&v1075, v1039, v1027, v1008, v1002, v178, (uint64_t)v176, v177, v179);
                          sub_1C5D6146C(*v1, v147, v149, (uint64_t)v180, v181);
                          sub_1C63725DC((uint64_t)v180);
                          v141 = v1027;
                          v140 = v1039;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_218:
          v144 = 0;
          v138 = 1;
        }
        while ((v145 & 1) != 0);
        if (v143 == 6)
          v229 = 4;
        else
          v229 = 8;
        if (v142)
          v230 = 4;
        else
          v230 = v229;
        v231 = *(uint64_t **)(v4 + 32);
        v233 = *v231;
        v232 = v231[1];
        v235 = v231[5];
        v234 = v231[6];
        if (*(_WORD *)(*v231 + 24) != 175)
          goto LABEL_332;
        v236 = *(uint64_t **)(v233 + 32);
        if (v143 == 6 && (*(_WORD *)(*v236 + 24) & 0xFFFE) != 0xC6)
        {
          v244 = *(unsigned __int16 *)(v235 + 24);
          if (v244 != 175)
            goto LABEL_478;
          v243 = 0;
          goto LABEL_466;
        }
        v237 = v236[5];
        v238 = *(unsigned __int16 *)(v237 + 24);
        if (v238 == 35 || v238 == 11)
        {
          v240 = *(_QWORD *)(v237 + 80);
          v241 = (_QWORD *)(v240 + 24);
          if (*(_DWORD *)(v240 + 32) > 0x40u)
            v241 = (_QWORD *)*v241;
          if (*v241 > (unint64_t)v230)
          {
            v1023 = v232;
            v1013 = *v236;
            v1000 = *v1;
            v1004 = v236[1];
            v1031 = v141;
            v1045 = v140;
            v592 = sub_1C6366AB4(*v1, (1 << *v241), (const llvm::APInt *)&v1075, v140, v141, 0, 0);
            v595 = *(_QWORD *)(v1000 + 832);
            if (v595)
              LOWORD(v595) = *(_WORD *)(v595 + 8);
            v596 = sub_1C5D56C70(v1000, 58, (const llvm::APInt *)&v1075, v1045, v1031, v1013, v1004, v594, (uint64_t)v592, v593, v595);
            v1005 = v597;
            v1014 = (uint64_t)v596;
            sub_1C5D6146C(*v1, v233, v1023, (uint64_t)v596, v597);
            sub_1C63725DC(v1014);
            v232 = v1023 & 0xFFFFFFFF00000000 | v1005;
            v598 = *(_QWORD *)(v237 + 80);
            v241 = (_QWORD *)(v598 + 24);
            if (*(_DWORD *)(v598 + 32) >= 0x41u)
              v241 = (_QWORD *)*v241;
            v242 = 1;
            v233 = v1014;
            v141 = v1031;
            v140 = v1045;
          }
          else
          {
            v242 = 0;
          }
          v243 = *v241 <= (unint64_t)v230;
        }
        else
        {
LABEL_332:
          v243 = 0;
          v242 = 0;
        }
        v244 = *(unsigned __int16 *)(v235 + 24);
        if ((v242 & 1) != 0 || v244 != 175)
          goto LABEL_478;
        if (v143 != 6)
        {
          v245 = *(uint64_t **)(v235 + 32);
LABEL_467:
          v336 = v245[5];
          v337 = *(unsigned __int16 *)(v336 + 24);
          if (v337 != 35 && v337 != 11)
            goto LABEL_477;
          v339 = *(_QWORD *)(v336 + 80);
          v340 = (_QWORD **)(v339 + 24);
          v341 = *(_DWORD *)(v339 + 32);
          v342 = v340;
          if (v341 >= 0x41)
            v342 = *v340;
          if (*v342 <= (unint64_t)v230 && (!v243 || !*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318)))
            goto LABEL_477;
          v1022 = v232;
          if (v341 >= 0x41)
            v340 = (_QWORD **)*v340;
          v549 = *v1;
          v1030 = *v245;
          v1043 = v140;
          v1012 = v245[1];
          v550 = v141;
          v551 = sub_1C6366AB4(*v1, (1 << *(_DWORD *)v340), (const llvm::APInt *)&v1075, v140, v141, 0, 0);
          v554 = *(_QWORD *)(v549 + 832);
          if (v554)
            LOWORD(v554) = *(_WORD *)(v554 + 8);
          v555 = sub_1C5D56C70(v549, 58, (const llvm::APInt *)&v1075, v1043, v550, v1030, v1012, v553, (uint64_t)v551, v552, v554);
          v557 = v556;
          v558 = v235;
          v559 = v557;
          sub_1C5D6146C(*v1, v558, v234, (uint64_t)v555, v557);
          sub_1C63725DC((uint64_t)v555);
          v141 = v550;
          v140 = v1043;
          v234 = v234 & 0xFFFFFFFF00000000 | v559;
          v244 = *((unsigned __int16 *)v555 + 12);
          v235 = (uint64_t)v555;
          v232 = v1022;
LABEL_478:
          if (v6 == 56)
          {
            if (v244 != 11 && v244 != 35 && *(_WORD *)(v233 + 24) == 175)
            {
              v343 = *(_QWORD *)(*(_QWORD *)(v233 + 32) + 40);
              v344 = *(unsigned __int16 *)(v343 + 24);
              if (v344 == 35 || v344 == 11)
              {
                v346 = *(_QWORD *)(v343 + 80);
                v347 = (_QWORD *)(v346 + 24);
                if (*(_DWORD *)(v346 + 32) >= 0x41u)
                  v347 = (_QWORD *)*v347;
                if (*v347 <= (unint64_t)v230)
                {
                  if (v244 != 175)
                    goto LABEL_828;
                  v348 = *(_QWORD *)(*(_QWORD *)(v235 + 32) + 40);
                  v349 = *(unsigned __int16 *)(v348 + 24);
                  if (v349 != 35 && v349 != 11)
                    goto LABEL_828;
                  v351 = *(_QWORD *)(v348 + 80);
                  v352 = (unint64_t *)(v351 + 24);
                  if (*(_DWORD *)(v351 + 32) >= 0x41u)
                    v352 = (unint64_t *)*v352;
                  if (*v352 > v230)
                  {
LABEL_828:
                    v663 = *(_QWORD *)(*v1 + 832);
                    if (v663)
                      LOWORD(v663) = *(_WORD *)(v663 + 8);
                    v486 = sub_1C5D56C70(*v1, 56, (const llvm::APInt *)&v1075, v140, v141, v235, v234, v14, v233, v232, v663);
                    goto LABEL_688;
                  }
                }
              }
            }
            v353 = *(_QWORD *)(v4 + 32);
            v354 = *(_QWORD *)(v353 + 40);
            v355 = *(unsigned __int16 *)(v354 + 24);
            if (v355 == 35 || v355 == 11)
            {
              v357 = *(_QWORD *)(v354 + 80);
              v358 = *(_DWORD *)(v357 + 32);
              v359 = v358 > 0x40
                   ? **(_QWORD **)(v357 + 24)
                   : (uint64_t)(*(_QWORD *)(v357 + 24) << -(char)v358) >> -(char)v358;
              if (v359 >= 0x8000000000000001)
              {
                v369 = *(_QWORD *)v353;
                if (*(_WORD *)(*(_QWORD *)v353 + 24) != 175)
                  goto LABEL_637;
                v370 = *(_QWORD *)(*(_QWORD *)(v369 + 32) + 40);
                v371 = *(unsigned __int16 *)(v370 + 24);
                if (v371 != 35 && v371 != 11)
                  goto LABEL_637;
                v373 = *(_QWORD *)(v370 + 80);
                v374 = (_QWORD *)(v373 + 24);
                if (*(_DWORD *)(v373 + 32) >= 0x41u)
                  v374 = (_QWORD *)*v374;
                if (*v374 > 4uLL
                  || (v375 = v140, v376 = v141, v377 = sub_1C48DB648(v369), v141 = v376, v140 = v375, (v377 & 1) == 0))
                {
LABEL_637:
                  v478 = -(uint64_t)v359;
                  v479 = v140;
                  v480 = v141;
                  v481 = sub_1C6366AB4(*v1, v478, (const llvm::APInt *)&v1075, v140, v141, 0, 0);
                  v484 = 0;
                  v485 = *(_QWORD *)(*v1 + 832);
                  if (v485)
                    v484 = *(_WORD *)(v485 + 8);
                  v486 = sub_1C5D56C70(*v1, 57, (const llvm::APInt *)&v1075, v479, v480, **(_QWORD **)(v4 + 32), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8), v483, (uint64_t)v481, v482, v484);
                  goto LABEL_688;
                }
              }
            }
          }
          else
          {
            v353 = *(_QWORD *)(v4 + 32);
            if (v6 == 57)
            {
              v360 = *(_QWORD *)(v353 + 40);
              if (*(_WORD *)(v360 + 24) == 58)
              {
                v361 = *(uint64_t **)(v360 + 32);
                v362 = v361[5];
                v363 = *(unsigned __int16 *)(v362 + 24);
                v364 = v363 == 35 || v363 == 11;
                if (v364 && (v140 & 0xFE) == 4)
                {
                  v366 = *(_QWORD *)(v362 + 80);
                  v367 = *(_DWORD *)(v366 + 32);
                  if (v367 > 0x40)
                    v368 = **(_QWORD **)(v366 + 24);
                  else
                    v368 = (uint64_t)(*(_QWORD *)(v366 + 24) << -(char)v367) >> -(char)v367;
                  v664 = *v1;
                  v666 = *v361;
                  v665 = v361[1];
                  v667 = v140;
                  v668 = v141;
                  v669 = sub_1C6366AB4(*v1, -v368, (const llvm::APInt *)&v1075, v140, v141, 0, 0);
                  v672 = 0;
                  v673 = *(_QWORD *)(v664 + 832);
                  if (v673)
                    v672 = *(_WORD *)(v673 + 8);
                  v675 = sub_1C5D56C70(v664, 58, (const llvm::APInt *)&v1075, v667, v668, v666, v665, v671, (uint64_t)v669, v670, v672);
                  v677 = *(uint64_t **)(v4 + 32);
                  v678 = *v677;
                  v679 = v677[1];
                  v680 = *(_QWORD *)(*v1 + 832);
                  if (v680)
                    LOWORD(v680) = *(_WORD *)(v680 + 8);
                  v486 = sub_1C5D56C70(*v1, 56, (const llvm::APInt *)&v1075, v667, v668, (uint64_t)v675, v674, v676, v678, v679, v680);
                  goto LABEL_688;
                }
              }
            }
          }
          v378 = v140;
          if (v140 == 6)
          {
            v379 = *(_QWORD *)(v353 + 40);
            if (*(_WORD *)(v379 + 24) != 175)
              goto LABEL_540;
            v380 = *(_QWORD *)(*(_QWORD *)(v379 + 32) + 40);
            v381 = *(unsigned __int16 *)(v380 + 24);
            if (v381 != 35 && v381 != 11)
              goto LABEL_540;
            v383 = *(_QWORD *)(v380 + 80);
            v384 = (_QWORD *)(v383 + 24);
            if (*(_DWORD *)(v383 + 32) >= 0x41u)
              v384 = (_QWORD *)*v384;
            if (*v384 >= 5uLL)
            {
LABEL_540:
              if (v6 == 56)
              {
                v385 = *(_QWORD *)v353;
                v386 = *(unsigned __int16 *)(*(_QWORD *)v353 + 24);
                if (v386 == 175)
                {
                  v387 = *(_QWORD *)(*(_QWORD *)(v385 + 32) + 40);
                  v388 = *(unsigned __int16 *)(v387 + 24);
                  if (v388 == 35 || v388 == 11)
                  {
                    v390 = *(_QWORD *)(v387 + 80);
                    v391 = (_QWORD *)(v390 + 24);
                    if (*(_DWORD *)(v390 + 32) >= 0x41u)
                      v391 = (_QWORD *)*v391;
                    if (*v391 < 5uLL)
                      goto LABEL_566;
                  }
                  v386 = 175;
                }
              }
              else
              {
                v385 = *(_QWORD *)v353;
                v386 = *(unsigned __int16 *)(*(_QWORD *)v353 + 24);
              }
              v392 = v6 == 56;
              v393 = v386 == 175;
              if (v392 && v393)
                v394 = v385;
              else
                v394 = *(_QWORD *)(v353 + 40);
              if (v392 && v393)
                LODWORD(v395) = *(_DWORD *)(v353 + 8);
              else
                v395 = *(_QWORD *)(v353 + 48);
              if (*(_WORD *)(v394 + 24) == 175)
              {
                v396 = *(_QWORD *)(v394 + 48);
                if (v396)
                {
                  v397 = 1;
                  do
                  {
                    if (*(_DWORD *)(v396 + 8) == (_DWORD)v395)
                    {
                      if (!v397)
                        goto LABEL_566;
                      --v397;
                    }
                    v396 = *(_QWORD *)(v396 + 32);
                  }
                  while (v396);
                  if (!v397)
                  {
                    v515 = *(_QWORD *)(*(_QWORD *)(v394 + 32) + 40);
                    v516 = *(unsigned __int16 *)(v515 + 24);
                    if (v516 == 35 || v516 == 11)
                    {
                      v518 = *(_QWORD *)(v515 + 80);
                      if (*(_DWORD *)(v518 + 32) > 0x40u)
                      {
                        v519 = **(_QWORD **)(v518 + 24);
                        if ((unint64_t)(v519 - 5) > 3)
                          goto LABEL_566;
                      }
                      else
                      {
                        v519 = *(_QWORD *)(v518 + 24);
                        if ((unint64_t)(v519 - 5) >= 4)
                          goto LABEL_566;
                      }
                      v1032 = v141;
                      v1046 = v140;
                      v599 = sub_1C6366AB4(*v1, v519 - 4, (const llvm::APInt *)&v1075, (llvm *)5, 0, 0, 0);
                      v601 = v600;
                      v1024 = sub_1C6366AB4(*v1, 4, (const llvm::APInt *)&v1075, (llvm *)5, 0, 0, 0);
                      v1015 = v603;
                      v604 = 0;
                      v605 = *(_QWORD *)(*v1 + 832);
                      if (v605)
                        v604 = *(_WORD *)(v605 + 8);
                      v607 = sub_1C5D56C70(*v1, 175, (const llvm::APInt *)&v1075, v1046, v1032, **(_QWORD **)(v394 + 32), *(_QWORD *)(*(_QWORD *)(v394 + 32) + 8), v602, (uint64_t)v599, v601, v604);
                      v609 = *(_QWORD *)(*v1 + 832);
                      if (v609)
                        LOWORD(v609) = *(_WORD *)(v609 + 8);
                      v610 = sub_1C5D56C70(*v1, 175, (const llvm::APInt *)&v1075, v1046, v1032, (uint64_t)v607, v606, v608, (uint64_t)v1024, v1015, v609);
                      sub_1C5D6146C(*v1, v394, v395, (uint64_t)v610, v611);
                      sub_1C63725DC((uint64_t)v610);
                      v141 = v1032;
                      v140 = v1046;
                      v353 = *(_QWORD *)(v4 + 32);
                    }
                  }
                }
              }
            }
          }
LABEL_566:
          v398 = *(unsigned __int16 *)(*(_QWORD *)(v353 + 40) + 24);
          if (v398 == 35 || v398 == 11)
            v400 = *(_QWORD *)(v353 + 40);
          else
            v400 = 0;
          if (v6 != 56
            || !*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318)
            || !v400
            || *(_WORD *)(*(_QWORD *)v353 + 24) == 58)
          {
            goto LABEL_139;
          }
          v401 = *(_QWORD *)(v400 + 80);
          v402 = (_QWORD *)(v401 + 24);
          if (*(_DWORD *)(v401 + 32) >= 0x41u)
            v402 = (_QWORD *)*v402;
          if (*v402 > 0xFE01uLL)
            goto LABEL_139;
          v403 = v141;
          v404 = v140;
          sub_1C48DC710((uint64_t)&v1095, *v1, v400, 0, 0, 1, 0);
          v1077 = *(_OWORD *)*(_QWORD *)(v4 + 32);
          if (v1099 >= 4)
          {
            if (!v1100 || *(_WORD *)(v1077 + 24) != 175)
              goto LABEL_139;
            v405 = *(_QWORD *)(*(_QWORD *)(v1077 + 32) + 40);
            v406 = *(unsigned __int16 *)(v405 + 24);
            if (v406 != 35 && v406 != 11)
              goto LABEL_139;
            v408 = *(_QWORD *)(v405 + 80);
            v409 = (_QWORD *)(v408 + 24);
            if (*(_DWORD *)(v408 + 32) >= 0x41u)
              v409 = (_QWORD *)*v409;
            if (*v409 > 4uLL)
              goto LABEL_139;
          }
          v410 = *(_QWORD *)(v400 + 80);
          v411 = (_QWORD *)(v410 + 24);
          if (*(_DWORD *)(v410 + 32) >= 0x41u)
            v411 = (_QWORD *)*v411;
          v412 = *(_DWORD *)v411;
          v413 = v412 >> 8;
          if (v412 >> 8 <= 2)
            v413 = 2;
          if (v413 > 0xFF)
            goto LABEL_139;
          while (1)
          {
            v1087 = v412 / v413;
            if (v412 / v413 <= 0xFF && v412 % v413 == 0)
              break;
            if (++v413 == 256)
              goto LABEL_139;
          }
          LODWORD(v1090) = v413;
          v1101 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1075, (llvm *)5, 0, 1, 0);
          *(_QWORD *)&v1102 = v681;
          if (v378 == 6)
          {
            v682 = a1;
            sub_1C48DC710((uint64_t)__src, *(_QWORD *)(a1 + 296), v1077, SDWORD2(v1077), 0, 1, 0);
            if (sub_1C48DCF20(a1, (uint64_t)__src[0], (int)__src[1], (uint64_t)&v1077, (uint64_t)&v1101, HIDWORD(v1108) << 6))
            {
              v683 = 165;
LABEL_885:
              v728 = sub_1C4885524(40, v683, *(_BYTE **)(v682 + 480));
              v729 = *(_QWORD *)(v682 + 296);
              v1070 = v1075;
              if (v1075)
                llvm::MetadataTracking::track((uint64_t)&v1070, v1075, 2);
              v1071 = v1076;
              v251 = sub_1C613B0B4(v729, v728, (uint64_t)&v1070, v404, v403, 0, (unsigned int *)&v1090, (unsigned int *)&v1087, &v1077, (__int128 *)&v1101);
              if (v1070)
                llvm::MetadataTracking::untrack((uint64_t)&v1070, v1070);
              v252 = *v1;
              v253 = v4;
              v254 = 0;
              v640 = (uint64_t)v251;
              LODWORD(v250) = 0;
              goto LABEL_786;
            }
            sub_1C48DC710((uint64_t)__src, *(_QWORD *)(a1 + 296), v1077, SDWORD2(v1077), 0, 1, 0);
            if (sub_1C48DD690(a1, (uint64_t)__src[0], (uint64_t)__src[1], (uint64_t)&v1077, (uint64_t)&v1101, HIDWORD(v1108) << 6))
            {
              v683 = 164;
              goto LABEL_880;
            }
            v683 = 163;
          }
          else if (v378 == 5)
          {
            sub_1C48DC710((uint64_t)__src, *(_QWORD *)(a1 + 296), v1077, SDWORD2(v1077), 0, 1, 0);
            if (sub_1C48DCF20(a1, (uint64_t)__src[0], (int)__src[1], (uint64_t)&v1077, (uint64_t)&v1101, HIDWORD(v1108) << 6))
            {
              v683 = 218;
LABEL_880:
              v682 = a1;
              goto LABEL_885;
            }
            v683 = 217;
          }
          else
          {
            v683 = 316;
          }
          v682 = a1;
          sub_1C48DC710((uint64_t)__src, *(_QWORD *)(a1 + 296), v1077, SDWORD2(v1077), 0, 1, 0);
          sub_1C48DD0B8(a1, (uint64_t)__src[0], (uint64_t)__src[1], (uint64_t)&v1077, (uint64_t)&v1101, HIDWORD(v1108) << 6);
          goto LABEL_885;
        }
LABEL_466:
        v245 = *(uint64_t **)(v235 + 32);
        if ((*(_WORD *)(*v245 + 24) & 0xFFFE) != 0xC6)
        {
LABEL_477:
          v244 = 175;
          goto LABEL_478;
        }
        goto LABEL_467;
      }
      if (v6 != 96)
      {
        if (v6 == 98)
        {
          v186 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 40);
          v187 = *(unsigned __int16 *)(v186 + 24);
          if (v187 == 36 || v187 == 12)
          {
            v189 = *(_QWORD *)(v4 + 40);
            v190 = *(_QWORD *)(v189 + 8);
            v1040 = *(llvm **)v189;
            sub_1C48DC710((uint64_t)__src, *v1, v186, 0, 0, 0, 0);
            if ((int)v1108 <= 3)
            {
              v191 = 0;
              v192 = 1;
              do
              {
                v193 = *(_QWORD *)(v186 + 80);
                v194 = *(_QWORD *)(v193 + 32);
                if ((_UNKNOWN *)v194 == &unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v1077 + 8), (const llvm::detail::DoubleAPFloat *)(v193 + 32));
                }
                else
                {
                  *((_QWORD *)&v1077 + 1) = *(_QWORD *)(v193 + 32);
                  if ((*(_DWORD *)(v194 + 8) + 64) >= 0x80)
                    v1078 = (uint64_t *)operator new[]();
                  v195 = *(_BYTE *)(v193 + 52);
                  v196 = v195 & 7;
                  v1080 = v1080 & 0xF0 | v195 & 0xF;
                  v1079 = *(_DWORD *)(v193 + 48);
                  v198 = (v195 & 6) != 0 && v196 != 3;
                  if (v196 == 1 || v198)
                  {
                    v200 = *(unsigned int *)(*((_QWORD *)&v1077 + 1) + 8);
                    v201 = (uint64_t *)&v1078;
                    if ((v200 - 64) <= 0xFFFFFF7F)
                      v201 = v1078;
                    v204 = *(uint64_t **)(v193 + 40);
                    v203 = (uint64_t *)(v193 + 40);
                    v202 = v204;
                    if ((*(_DWORD *)(*(v203 - 1) + 8) - 64) >= 0xFFFFFF80)
                      v202 = v203;
                    if (v200 <= 0xFFFFFFBF)
                    {
                      v205 = (unint64_t)(v200 + 64) >> 6;
                      do
                      {
                        v206 = *v202++;
                        *v201++ = v206;
                        --v205;
                      }
                      while (v205);
                    }
                  }
                }
                if ((v191 & 1) != 0)
                  v207 = -1.0;
                else
                  v207 = 1.0;
                LODWORD(v1091) = 64;
                v1090 = v207;
                llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v1095, (const llvm::APInt **)&v1090);
                v1102 = v1095;
                v1103 = (int)v1096;
                v1104 = v1104 & 0xF0 | BYTE4(v1096) & 0xF;
                llvm::APFloat::convert((uint64_t)&v1101, *((void **)&v1077 + 1), 1, &v1090);
                sub_1C48DB604((uint64_t)&v1077, (uint64_t)&v1101, 1);
                v209 = v208;
                v210 = 14;
                if (!sub_1C4773C58((uint64_t)&v1077) && !v209)
                {
                  v212 = sub_1C6366D08(*v1, (llvm::LLVMContext *)&v1077, (const llvm::APFloat *)&v1075, v1040, v190, 0);
                  v214 = v213;
                  sub_1C48DC710((uint64_t)&v1095, *v1, (uint64_t)v212, v213, 0, 0, 0);
                  if (v1099 >= 4)
                  {
                    v216 = *(uint64_t **)(v4 + 32);
                    v217 = *v216;
                    v218 = v216[1];
                    if ((v191 & 1) != 0)
                    {
                      v219 = *(_QWORD *)(*v1 + 832);
                      if (v219)
                        v220 = *(_WORD *)(v219 + 8);
                      else
                        v220 = 0;
                      v223 = v1040;
                      v224 = v218;
                      v221 = sub_1C5D52060(*v1, 222, (const llvm::APInt *)&v1075, v1040, v190, v217, v218, v220);
                      v222 = v224 & 0xFFFFFFFF00000000 | v225;
                      v226 = *(uint64_t **)(v4 + 32);
                      v217 = *v226;
                      v218 = v226[1];
                    }
                    else
                    {
                      v221 = (uint64_t *)*v216;
                      v222 = v216[1];
                      v223 = v1040;
                    }
                    v227 = sub_1C5D58E08(*v1, (const char *)0x8D, (const llvm::APInt *)&v1075, v223, v190, v217, v218, v215, (uint64_t)v212, v214, (uint64_t)v221, v222, SHIDWORD(v222), *(_WORD *)(v4 + 72));
                    sub_1C5D6146C(*v1, v4, 0, (uint64_t)v227, v228);
                    sub_1C63725DC((uint64_t)v227);
                    v210 = 12;
                  }
                  else
                  {
                    v210 = 14;
                  }
                }
                if ((_UNKNOWN *)v1102 == &unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v1102 + 1);
                }
                else if ((*(_DWORD *)(v1102 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1102 + 1))
                {
                  MEMORY[0x1CAA32F9C](*((_QWORD *)&v1102 + 1), 0x1000C8000313F17);
                }
                if (*((_UNKNOWN **)&v1077 + 1) == &unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v1078);
                }
                else if ((*(_DWORD *)(*((_QWORD *)&v1077 + 1) + 8) - 64) <= 0xFFFFFF7F && v1078)
                {
                  MEMORY[0x1CAA32F9C](v1078, 0x1000C8000313F17);
                }
                v211 = v192 & (v210 == 14);
                v191 = 1;
                v192 = 0;
              }
              while ((v211 & 1) != 0);
            }
          }
        }
        goto LABEL_139;
      }
      v290 = *(_QWORD *)(v4 + 32);
      v289 = *(_QWORD *)(v4 + 40);
      v292 = *(llvm **)v289;
      v291 = *(_QWORD *)(v289 + 8);
      v293 = *(_QWORD *)v290;
      v294 = *(_QWORD *)(v290 + 8);
      v295 = *(_QWORD *)(v290 + 40);
      v296 = *v1;
      if (((*(_WORD *)(*(_QWORD *)*v1 + 1020) & 1) != 0 || (~*(unsigned __int16 *)(v4 + 72) & 0x440) == 0)
        && v293 == v295
        && *(_DWORD *)(v290 + 48) == (_DWORD)v294)
      {
        v546 = sub_1C5D404C4(*v1, (const llvm::APInt *)&v1075, (_BOOL8)v292, v291, 0, 2.0);
        v486 = sub_1C5D56C70(v296, 98, (const llvm::APInt *)&v1075, v292, v291, v293, v294, v548, (uint64_t)v546, v547, *(_WORD *)(v4 + 72));
        goto LABEL_688;
      }
      v298 = *(unsigned __int16 *)(v295 + 24);
      if (v298 != 36 && v298 != 12)
        goto LABEL_139;
      sub_1C48DC710((uint64_t)__src, *v1, v295, 0, 0, 0, 0);
      if ((int)v1108 > 3)
        goto LABEL_139;
      v1018 = v291;
      v300 = *(_QWORD *)(v295 + 80);
      v301 = *(_QWORD *)(v300 + 32);
      if ((_UNKNOWN *)v301 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1102, (const llvm::detail::DoubleAPFloat *)(v300 + 32));
      }
      else
      {
        *(_QWORD *)&v1102 = *(_QWORD *)(v300 + 32);
        if ((*(_DWORD *)(v301 + 8) + 64) >= 0x80)
          *((_QWORD *)&v1102 + 1) = operator new[]();
        v302 = *(_BYTE *)(v300 + 52);
        v303 = v302 & 7;
        v1104 = v1104 & 0xF0 | v302 & 0xF;
        v1103 = *(_DWORD *)(v300 + 48);
        v305 = (v302 & 6) != 0 && v303 != 3;
        if (v303 == 1 || v305)
        {
          v307 = *(unsigned int *)(v1102 + 8);
          v308 = (_QWORD *)&v1102 + 1;
          if ((v307 - 64) <= 0xFFFFFF7F)
            v308 = (_QWORD *)*((_QWORD *)&v1102 + 1);
          v311 = *(uint64_t **)(v300 + 40);
          v310 = (uint64_t *)(v300 + 40);
          v309 = v311;
          if ((*(_DWORD *)(*(v310 - 1) + 8) - 64) >= 0xFFFFFF80)
            v309 = v310;
          if (v307 <= 0xFFFFFFBF)
          {
            v312 = (unint64_t)(v307 + 64) >> 6;
            do
            {
              v313 = *v309++;
              *v308++ = v313;
              --v312;
            }
            while (v312);
          }
        }
      }
      v1072 = 0;
      v1009 = v292;
      if (v292 == 10
        && (llvm::APFloat::convert((uint64_t)&v1101, &unk_1C866F15C, 1, &v1072) || v1072)
        || sub_1C4773C58((uint64_t)&v1101))
      {
        goto LABEL_427;
      }
      v314 = v1102;
      v1003 = v292;
      if ((_UNKNOWN *)v1102 == &unk_1C866F1C0)
      {
        v746 = *(_BYTE *)(*((_QWORD *)&v1102 + 1) + 28) & 7;
        if (v746 <= 3 && v746 != 2)
          goto LABEL_427;
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v1102, (unsigned int *)&v1095);
      }
      else
      {
        v447 = v1104 & 7;
        if (v447 <= 3 && v447 != 2)
        {
LABEL_612:
          if ((*(_DWORD *)(v314 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1102 + 1))
            MEMORY[0x1CAA32F9C](*((_QWORD *)&v1102 + 1), 0x1000C8000313F17);
          goto LABEL_139;
        }
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v1102, (unsigned int *)&v1095);
      }
      v566 = (unsigned int *)&v1095;
      if (DWORD2(v1095) >= 0x41)
        v566 = (unsigned int *)v1095;
      v567 = *v566;
      if (DWORD2(v1095) >= 0x41 && (_QWORD)v1095)
        MEMORY[0x1CAA32F9C]();
      v568 = v567 & 0x3FF | 0x400;
      v569 = (v567 >> 10) & 0x1F;
      v999 = v567 & 0x8000;
      v570 = 2;
      do
      {
        v571 = v568 / v570;
        if (v568 % v570 || v570 >> __clz(__rbit32(v570)) > 0x1F)
          goto LABEL_713;
        v572 = __clz(__rbit32(v571));
        if (v570 > v568)
          v572 = 32;
        if (v571 >> v572 > 0x1F)
        {
LABEL_713:
          v573 = 0;
        }
        else
        {
          v573 = 0;
          v570 <<= __clz(v570) - 21;
          v1044 = (v571 << (__clz(v571) - 21)) & 0x3FF;
          for (m = -6; m != 5; ++m)
          {
            if ((v569 - m - 20) >= 0xFFFFFFF5)
            {
              DWORD2(v1095) = 16;
              *(_QWORD *)&v1095 = v570 & 0x3FF | v999 | ((((_BYTE)v569 - (_BYTE)m) & 0x3F) << 10);
              llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v1091, (const llvm::APInt **)&v1095);
              DWORD2(v1095) = 16;
              *(_QWORD *)&v1095 = (v1044 | (m << 10)) + 15360;
              llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v1088, (const llvm::APInt **)&v1095);
              if ((_UNKNOWN *)v1091 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1083, (const llvm::detail::DoubleAPFloat *)&v1091);
              }
              else
              {
                v1083 = v1091;
                if ((*(_DWORD *)(v1091 + 8) + 64) >= 0x80)
                  v1084 = (uint64_t *)operator new[]();
                v575 = v1094 & 7;
                v1086 = v1086 & 0xF0 | v1094 & 0xF;
                v1085 = v1093;
                v577 = (v1094 & 6) != 0 && v575 != 3;
                if (v575 == 1 || v577)
                {
                  v578 = *(unsigned int *)(v1083 + 8);
                  v579 = (uint64_t *)&v1084;
                  if ((v578 - 64) <= 0xFFFFFF7F)
                    v579 = v1084;
                  v580 = (uint64_t *)&v1092;
                  if ((*(_DWORD *)(v1091 + 8) - 64) < 0xFFFFFF80)
                    v580 = v1092;
                  if (v578 <= 0xFFFFFFBF)
                  {
                    v581 = (unint64_t)(v578 + 64) >> 6;
                    do
                    {
                      v582 = *v580++;
                      *v579++ = v582;
                      --v581;
                    }
                    while (v581);
                  }
                }
              }
              if (!sub_1C48DB628((uint64_t)v1082, (uint64_t)&v1087, 1)
                && sub_1C47ECB98((uint64_t)v1082, (uint64_t)&v1101))
              {
                if (v1003 == 10)
                {
                  llvm::APFloat::convert((uint64_t)&v1090, &unk_1C866F184, 1, &v1095);
                  llvm::APFloat::convert((uint64_t)&v1087, &unk_1C866F184, 1, &v1095);
                }
                v584 = sub_1C6366D08(*v1, (llvm::LLVMContext *)&v1090, (const llvm::APFloat *)&v1075, v1009, v1018, 0);
                v998 = v585;
                v586 = (uint64_t)v584;
                v587 = sub_1C6366D08(*v1, (llvm::LLVMContext *)&v1087, (const llvm::APFloat *)&v1075, v1009, v1018, 0);
                v996 = v588;
                v997 = (uint64_t)v587;
                sub_1C48DC710((uint64_t)&v1095, *v1, v586, v998, 0, 0, 0);
                sub_1C48DC710((uint64_t)&v1077, *v1, v997, v996, 0, 0, 0);
                v583 = 20;
                if (v1099 >= 4 && v1081 >= 4)
                {
                  v590 = sub_1C5D58E08(*v1, (const char *)0x8D, (const llvm::APInt *)&v1075, v1009, v1018, v586, v998, v589, v997, v996, **(_QWORD **)(v4 + 32), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8), HIDWORD(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8)), *(_WORD *)(v4 + 72));
                  sub_1C5D6146C(*v1, v4, 0, (uint64_t)v590, v591);
                  sub_1C63725DC((uint64_t)v590);
                  v583 = 18;
                  v573 = 1;
                }
              }
              else
              {
                v583 = 20;
              }
              if ((_UNKNOWN *)v1083 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v1084);
              }
              else if ((*(_DWORD *)(v1083 + 8) - 64) <= 0xFFFFFF7F && v1084)
              {
                MEMORY[0x1CAA32F9C](v1084, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v1088 == &unk_1C866F1C0)
              {
                sub_1C4773C74(&v1089);
              }
              else if ((*(_DWORD *)(v1088 + 8) - 64) <= 0xFFFFFF7F && v1089)
              {
                MEMORY[0x1CAA32F9C](v1089, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v1091 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v1092);
              }
              else if ((*(_DWORD *)(v1091 + 8) - 64) <= 0xFFFFFF7F && v1092)
              {
                MEMORY[0x1CAA32F9C](v1092, 0x1000C8000313F17);
              }
              if (v583 != 20)
                break;
            }
          }
        }
        ++v570;
      }
      while (v570 <= 0x2D && (v573 & 1) == 0);
LABEL_427:
      v314 = v1102;
      if ((_UNKNOWN *)v1102 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1102 + 1);
        goto LABEL_139;
      }
      goto LABEL_612;
    }
LABEL_147:
    v87 = *(unsigned __int8 **)(v4 + 64);
    *(_QWORD *)&v1095 = v87;
    if (v87)
    {
      llvm::MetadataTracking::track((uint64_t)&v1095, v87, 2);
      LODWORD(v50) = *(unsigned __int16 *)(v4 + 56);
    }
    DWORD2(v1095) = *(_DWORD *)(v4 + 60);
    v88 = &v1106;
    __src[0] = &v1106;
    __src[1] = (void *)0x300000000;
    if ((_DWORD)v50)
    {
      v89 = 0;
      v90 = 0;
      do
      {
        v91 = sub_1C48DC410(a1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + v89), *(_QWORD *)(*(_QWORD *)(v4 + 32) + v89 + 8), *((unsigned __int8 *)&v1101 + v90), 1, 0, 0);
        v93 = v92;
        v94 = LODWORD(__src[1]);
        if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v1106, LODWORD(__src[1]) + 1, 16);
          v94 = LODWORD(__src[1]);
        }
        v50 = (uint64_t **)((char *)__src[0] + 16 * v94);
        *v50 = v91;
        v50[1] = v93;
        LODWORD(v50) = ++LODWORD(__src[1]);
        ++v90;
        v89 += 40;
      }
      while (v90 < *(unsigned __int16 *)(v4 + 56));
      v88 = (uint64_t *)__src[0];
    }
    v95 = sub_1C636D0C8(*v1, (const char *)*(unsigned __int16 *)(v4 + 24), (const llvm::APInt *)&v1095, (llvm *)0xA, 0, v88, v50, *(unsigned __int16 *)(v4 + 72));
    v97 = v96;
    v98 = *(_QWORD *)(v4 + 48);
    if (v98)
    {
      v99 = 1;
      v100 = *(_QWORD *)(v4 + 48);
      do
      {
        if (!*(_DWORD *)(v100 + 8))
        {
          if (!v99)
            goto LABEL_665;
          --v99;
        }
        v100 = *(_QWORD *)(v100 + 32);
      }
      while (v100);
      if (!v99)
      {
        v101 = *(_QWORD *)(v98 + 16);
        if (*(_WORD *)(v101 + 24) == 215)
        {
          v102 = *v1;
          v103 = v95;
          v104 = v97;
LABEL_164:
          sub_1C636EE88(v102, v101, 0, (uint64_t)v103, v104);
          if (__src[0] != &v1106)
            free(__src[0]);
          v12 = v1095;
          if ((_QWORD)v1095)
            llvm::MetadataTracking::untrack((uint64_t)&v1095, (unsigned __int8 *)v1095);
          goto LABEL_168;
        }
      }
LABEL_665:
      v520 = 1;
      v521 = *(_QWORD *)(v4 + 48);
      do
      {
        if (!*(_DWORD *)(v521 + 8))
        {
          if (!v520)
            goto LABEL_684;
          --v520;
        }
        v521 = *(_QWORD *)(v521 + 32);
      }
      while (v521);
      if (!v520)
      {
        v522 = *(_QWORD *)(v98 + 16);
        if (*(_WORD *)(v522 + 24) == 46)
        {
          v523 = *(_QWORD *)(**(_QWORD **)(v522 + 32) + 80);
          v524 = (_QWORD *)(v523 + 24);
          if (*(_DWORD *)(v523 + 32) >= 0x41u)
            v524 = (_QWORD *)*v524;
          if (*v524 == 2131)
          {
            *(_QWORD *)&v1077 = v1095;
            if ((_QWORD)v1095)
              llvm::MetadataTracking::track((uint64_t)&v1077, (unsigned __int8 *)v1095, 2);
            DWORD2(v1077) = DWORD2(v1095);
            v525 = *v1;
            v527 = sub_1C6366AB4(*v1, 2131, (const llvm::APInt *)&v1077, (llvm *)5, 0, 1, 0);
            v529 = 0;
            v530 = *(_QWORD *)(v525 + 832);
            if (v530)
              v529 = *(_WORD *)(v530 + 8);
            v531 = sub_1C5D56C70(v525, 46, (const llvm::APInt *)&v1077, (llvm *)0xA, 0, (uint64_t)v527, v526, v528, (uint64_t)v95, v97, v529);
            v533 = v532;
            if ((_QWORD)v1077)
              llvm::MetadataTracking::untrack((uint64_t)&v1077, (unsigned __int8 *)v1077);
            v534 = *v1;
            v535 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1095, (llvm *)5, 0, 0, 0);
            v538 = *(_QWORD *)(v534 + 832);
            if (v538)
              LOWORD(v538) = *(_WORD *)(v538 + 8);
            v103 = sub_1C5D56C70(v534, 212, (const llvm::APInt *)&v1095, (llvm *)9, 0, (uint64_t)v531, v97 & 0xFFFFFFFF00000000 | v533, v537, (uint64_t)v535, v536, v538);
            v104 = v539;
            v102 = *v1;
            v101 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 16);
            goto LABEL_164;
          }
        }
      }
    }
LABEL_684:
    v540 = *v1;
    v541 = sub_1C6366AB4(*v1, 0, (const llvm::APInt *)&v1095, (llvm *)5, 0, 0, 0);
    v544 = *(_QWORD *)(v540 + 832);
    if (v544)
      LOWORD(v544) = *(_WORD *)(v544 + 8);
    v103 = sub_1C5D56C70(v540, 212, (const llvm::APInt *)&v1095, (llvm *)9, 0, (uint64_t)v95, v97, v543, (uint64_t)v541, v542, v544);
    v104 = v545;
    v102 = *v1;
    v101 = v4;
    goto LABEL_164;
  }
LABEL_921:
  sub_1C6365284(v2);
  v748 = (_QWORD *)*v1;
  v749 = *v1 + 208;
  v750 = v748[27];
  if (v750 != v749)
  {
    while (1)
    {
      v751 = *(_QWORD *)(v750 + 8);
      if (v750)
        v752 = v750 - 8;
      else
        v752 = 0;
      v753 = *(unsigned __int8 **)(v752 + 64);
      *(_QWORD *)&v1077 = v753;
      if (v753)
        llvm::MetadataTracking::track((uint64_t)&v1077, v753, 2);
      v754 = *(_DWORD *)(v752 + 60);
      DWORD2(v1077) = v754;
      v755 = *(_QWORD *)(v752 + 48);
      if (!v755)
        goto LABEL_1051;
      v756 = *(unsigned __int16 *)(v752 + 24);
      if ((v756 - 176) < 2)
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318))
        {
          v770 = *(uint64_t **)(v752 + 32);
          v771 = *(_OWORD *)*(_QWORD *)(v752 + 40);
          *(_OWORD *)__src = v771;
          v772 = v770[5];
          v773 = *(unsigned __int16 *)(v772 + 24);
          if (v773 == 35 || v773 == 11)
          {
            v775 = *(_QWORD *)(v772 + 80);
            v776 = (_QWORD *)(v775 + 24);
            if (*(_DWORD *)(v775 + 32) >= 0x41u)
              v776 = (_QWORD *)*v776;
            v777 = *v770;
            v778 = v770[1];
            v779 = (_QWORD *)*v776;
            if ((_BYTE)v771)
              v780 = sub_1C47A8C74((unsigned __int8 *)__src);
            else
              v780 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            v828 = v780;
            if ((_DWORD)v781 == 1)
            if (v779 == (_QWORD *)(v828 - 1))
            {
              v1055 = sub_1C6366AB4(*v1058, 0, (const llvm::APInt *)&v1077, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v837 = v836;
              if (*(_WORD *)(v752 + 24) == 176)
                v838 = -1;
              else
                v838 = 1;
              v839 = sub_1C6366AB4(*v1058, v838, (const llvm::APInt *)&v1077, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v841 = v840;
              v842 = *v1058;
              v843 = v839[5] + 16 * v840;
              v1034 = *(_QWORD *)(v843 + 8);
              v1050 = *(llvm **)v843;
              v844 = sub_1C6367818((_QWORD *)*v1058, 0x14u);
              v847 = sub_1C63698B8(v842, (const char *)0xC0, (const llvm::APInt *)&v1077, v1050, v1034, v777, v778, v846, (uint64_t)v1055, v837, (uint64_t)v839, v841, (uint64_t)v1055, v837, v844, v845);
              v849 = v848;
              v850 = *v1058;
LABEL_1142:
              v883 = v752;
              v884 = (uint64_t)v847;
              goto LABEL_1143;
            }
          }
        }
      }
      else
      {
        if (v756 != 175)
        {
          if (v756 == 46)
          {
            if (**(_BYTE **)(v752 + 40) == 9)
            {
              v757 = *(_QWORD **)(v752 + 32);
              v758 = *(_QWORD *)(*v757 + 80);
              v759 = (_QWORD *)(v758 + 24);
              if (*(_DWORD *)(v758 + 32) >= 0x41u)
                v759 = (_QWORD *)*v759;
              if (*v759 == 2131)
              {
                v760 = v757[5];
                v761 = v757[6];
                if (!sub_1C48DB5A0(*(unsigned __int16 *)(v760 + 24)))
                  goto LABEL_943;
                v762 = *(_QWORD *)(v760 + 48);
                if (!v762)
                  goto LABEL_943;
                v763 = 1;
                do
                {
                  if (*(_DWORD *)(v762 + 8) == (_DWORD)v761)
                  {
                    if (!v763)
                      goto LABEL_943;
                    --v763;
                  }
                  v762 = *(_QWORD *)(v762 + 32);
                }
                while (v762);
                if (v763)
                {
LABEL_943:
                  while (1)
                  {
                    v764 = *(_QWORD *)(v755 + 16);
                    v765 = *(unsigned __int16 *)(v764 + 24);
                    if ((v765 - 96) > 0x2D
                      || ((1 << (v765 - 96)) & 0x200000000005) == 0)
                    {
                      if (v765 != 222)
                        break;
                      v767 = *(_QWORD *)(v764 + 48);
                      if (!v767 || *(_QWORD *)(v767 + 32) || *(_WORD *)(*(_QWORD *)(v767 + 16) + 24) != 96)
                        break;
                    }
                    v755 = *(_QWORD *)(v755 + 32);
                    if (!v755)
                    {
                      v768 = *(_QWORD *)(*v1058 + 832);
                      if (v768)
                        v769 = *(_WORD *)(v768 + 8);
                      else
                        v769 = 0;
                      v847 = sub_1C5D52060(*v1058, 430, (const llvm::APInt *)&v1077, (llvm *)9, 0, v760, v761, v769);
                      v849 = v882;
                      v850 = *v1058;
                      goto LABEL_1142;
                    }
                  }
                }
              }
            }
            goto LABEL_1051;
          }
          v795 = *(_QWORD *)(a1 + 480);
          v796 = (v756 & 0xFFFE) != 0x38 || *(_BYTE *)(v795 + 357) == 0;
          if (!v796 && **(_BYTE **)(v752 + 40) == 6)
          {
            v851 = (_QWORD *)*v1058;
            v1064 = (unsigned __int8 *)v1077;
            if ((_QWORD)v1077)
            {
              llvm::MetadataTracking::track((uint64_t)&v1064, (unsigned __int8 *)v1077, 2);
              v754 = DWORD2(v1077);
            }
            v1065 = v754;
            v852 = sub_1C498FE70(v752, v851, (const llvm::APInt *)&v1064);
            v854 = v853;
            v855 = v1064;
            if (v1064)
            {
              v856 = &v1064;
              goto LABEL_1079;
            }
LABEL_1080:
            v857 = v1058;
            sub_1C5D6146C(*v1058, v752, 0, (uint64_t)v852, v854);
            v858 = (uint64_t)v852;
            goto LABEL_1081;
          }
          if (*(unsigned __int16 *)(v752 + 24) <= 0x22u)
          {
            if (v756 != 11)
            {
              if (v756 != 12)
                goto LABEL_1051;
              goto LABEL_1011;
            }
          }
          else if (v756 != 35)
          {
            if (v756 != 36)
            {
              if (v756 != 56 || *(_BYTE *)(v795 + 318) || **(_BYTE **)(v752 + 40) != 6)
                goto LABEL_1051;
              v797 = *(uint64_t **)(v752 + 32);
              v798 = *v797;
              v799 = v797[1];
              v801 = v797[5];
              v800 = v797[6];
              v802 = *(unsigned __int16 *)(*v797 + 24);
              if (v802 != 175)
              {
                v803 = *(unsigned __int16 *)(v801 + 24);
                if (v803 != 175)
                {
                  if (v802 != 58)
                    goto LABEL_999;
                  v804 = *(_QWORD *)(v798 + 48);
                  if (!v804)
                    goto LABEL_999;
                  v805 = 1;
                  do
                  {
                    if (*(_DWORD *)(v804 + 8) == (_DWORD)v799)
                    {
                      if (!v805)
                        goto LABEL_999;
                      --v805;
                    }
                    v804 = *(_QWORD *)(v804 + 32);
                  }
                  while (v804);
                  if (v805)
                  {
LABEL_999:
                    if (v803 == 58)
                    {
                      v806 = *(_QWORD *)(v801 + 48);
                      if (v806)
                      {
                        v807 = 1;
                        do
                        {
                          if (*(_DWORD *)(v806 + 8) == (_DWORD)v800)
                          {
                            if (!v807)
                              goto LABEL_1165;
                            --v807;
                          }
                          v806 = *(_QWORD *)(v806 + 32);
                        }
                        while (v806);
                        if (v802 != 198 && v807)
                        {
LABEL_1233:
                          v976 = (_QWORD *)*v1058;
                          v1062 = (unsigned __int8 *)v1077;
                          if ((_QWORD)v1077)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v1062, (unsigned __int8 *)v1077, 2);
                            v754 = DWORD2(v1077);
                          }
                          v1063 = v754;
                          v852 = sub_1C498FE70(v752, v976, (const llvm::APInt *)&v1062);
                          v854 = v977;
                          v855 = v1062;
                          if (v1062)
                          {
                            v856 = &v1062;
LABEL_1079:
                            llvm::MetadataTracking::untrack((uint64_t)v856, v855);
                          }
                          goto LABEL_1080;
                        }
                      }
                      else if (v802 != 198)
                      {
                        goto LABEL_1233;
                      }
                    }
                    else
                    {
LABEL_1165:
                      if (v802 != 198 && v803 != 198)
                        goto LABEL_1233;
                    }
                  }
                }
              }
              if (sub_1C48DBDB8(v798) && (v900 = *(_QWORD *)(v798 + 48)) != 0)
              {
                v901 = 1;
                do
                {
                  if (*(_DWORD *)(v900 + 8) == (_DWORD)v799)
                  {
                    if (!v901)
                      goto LABEL_1190;
                    --v901;
                  }
                  v900 = *(_QWORD *)(v900 + 32);
                }
                while (v900);
                v902 = v799 & 0xFFFFFFFF00000000 | v800;
                v903 = v901 == 0;
                if (v901)
                  v904 = v801;
                else
                  v904 = v798;
                if (v903)
                  LODWORD(v800) = v799;
                if (v903)
                  v798 = v801;
                if (v903)
                  v799 = v902;
                v905 = v903;
                v801 = v904;
              }
              else
              {
LABEL_1190:
                v905 = 0;
              }
              if (!sub_1C48DBDB8(v801))
                goto LABEL_1051;
              v906 = *(_QWORD *)(v801 + 48);
              if (!v906)
                goto LABEL_1051;
              v907 = 1;
              do
              {
                if (*(_DWORD *)(v906 + 8) == (_DWORD)v800)
                {
                  if (!v907)
                    goto LABEL_1051;
                  --v907;
                }
                v906 = *(_QWORD *)(v906 + 32);
              }
              while (v906);
              if (v907)
                goto LABEL_1051;
              v1026 = sub_1C6366AB4(*v1058, 0, (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
              v909 = v908;
              v910 = sub_1C6366AB4(*v1058, 1, (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
              v1036 = v911;
              v1053 = (uint64_t)v910;
              v912 = 0;
              v913 = *(_QWORD *)(*v1058 + 832);
              if (v913)
                v912 = *(_WORD *)(v913 + 8);
              v914 = *(uint64_t **)(**(_QWORD **)(v801 + 32) + 32);
              v915 = v914[1];
              v916 = v915 & 0xFFFFFFFF00000000;
              v917 = v914[6];
              v1057 = v914[5];
              v920 = sub_1C5D52060(*v1058, 199, (const llvm::APInt *)&v1077, (llvm *)6, 0, *v914, v915, v912);
              v921 = 0;
              v922 = *v1058;
              if (v905)
                v923 = (uint64_t)v920;
              else
                v923 = v798;
              v924 = v918 | v916;
              if (v905)
                v925 = v918 | v916;
              else
                v925 = v799;
              if (v905)
              {
                v920 = (uint64_t *)v798;
                v924 = v799;
              }
              v926 = *(_QWORD *)(v922 + 832);
              if (v926)
                v921 = *(_WORD *)(v926 + 8);
              v928 = sub_1C5D56C70(v922, 56, (const llvm::APInt *)&v1077, (llvm *)6, 0, v923, v925, v919, (uint64_t)v920, v924, v921);
              v929 = v927;
              v930 = 0;
              v931 = *(_QWORD *)(*v1058 + 832);
              if (v931)
                v930 = *(_WORD *)(v931 + 8);
              v934 = sub_1C5D52060(*v1058, 216, (const llvm::APInt *)&v1077, (llvm *)0x31, 0, (uint64_t)v928, v927, v930);
              v935 = 0;
              v936 = *(_QWORD *)(*v1058 + 832);
              if (v936)
                v935 = *(_WORD *)(v936 + 8);
              v937 = v929 & 0xFFFFFFFF00000000 | v932;
              v939 = sub_1C5D56C70(*v1058, 148, (const llvm::APInt *)&v1077, (llvm *)5, 0, (uint64_t)v934, v937, v933, (uint64_t)v1026, v909, v935);
              v941 = v940;
              v942 = 0;
              v943 = *(_QWORD *)(*v1058 + 832);
              if (v943)
                v942 = *(_WORD *)(v943 + 8);
              v945 = sub_1C5D56C70(*v1058, 148, (const llvm::APInt *)&v1077, (llvm *)5, 0, (uint64_t)v934, v937, v938, v1053, v1036, v942);
              v947 = v944;
              v948 = 0;
              v949 = *(_QWORD *)(*v1058 + 832);
              if (v949)
                v948 = *(_WORD *)(v949 + 8);
              v950 = sub_1C5D56C70(*v1058, 56, (const llvm::APInt *)&v1077, (llvm *)5, 0, (uint64_t)v945, v944, v946, v1057, v917, v948);
              v953 = 0;
              v954 = *(_QWORD *)(*v1058 + 832);
              if (v954)
                v953 = *(_WORD *)(v954 + 8);
              v956 = sub_1C5D56C70(*v1058, 146, (const llvm::APInt *)&v1077, (llvm *)0x31, 0, (uint64_t)v939, v941, v952, (uint64_t)v950, v947 & 0xFFFFFFFF00000000 | v951, v953);
              v957 = 0;
              v958 = *(_QWORD *)(*v1058 + 832);
              if (v958)
                v957 = *(_WORD *)(v958 + 8);
              v959 = sub_1C5D52060(*v1058, 216, (const llvm::APInt *)&v1077, (llvm *)6, 0, (uint64_t)v956, v955, v957);
              v857 = v1058;
              sub_1C5D6146C(*v1058, v752, 0, (uint64_t)v959, v960);
              v858 = (uint64_t)v959;
LABEL_1081:
              sub_1C63725DC(v858);
              v859 = *v857;
              sub_1C5D3DF28(*v857, v752);
              sub_1C63655F0(v859, v752);
              goto LABEL_1051;
            }
LABEL_1011:
            if (**(_BYTE **)(v752 + 40) == 10)
            {
              if (sub_1C48DBE20(v752))
              {
                sub_1C48DC710((uint64_t)__src, *v1058, v752, 0, 0, 0, 0);
                if ((int)v1108 <= 3)
                {
                  v808 = *(_QWORD *)(v752 + 80);
                  v809 = *(_QWORD *)(v808 + 32);
                  if ((_UNKNOWN *)v809 == &unk_1C866F1C0)
                  {
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v1095 + 8), (const llvm::detail::DoubleAPFloat *)(v808 + 32));
                  }
                  else
                  {
                    *((_QWORD *)&v1095 + 1) = *(_QWORD *)(v808 + 32);
                    if ((*(_DWORD *)(v809 + 8) + 64) >= 0x80)
                      v1096 = (uint64_t *)operator new[]();
                    v810 = *(_BYTE *)(v808 + 52);
                    v811 = v810 & 7;
                    v1098 = v1098 & 0xF0 | v810 & 0xF;
                    v1097 = *(_DWORD *)(v808 + 48);
                    v813 = (v810 & 6) != 0 && v811 != 3;
                    if (v811 == 1 || v813)
                    {
                      v814 = *(unsigned int *)(*((_QWORD *)&v1095 + 1) + 8);
                      v815 = (uint64_t *)&v1096;
                      if ((v814 - 64) <= 0xFFFFFF7F)
                        v815 = v1096;
                      v818 = *(uint64_t **)(v808 + 40);
                      v817 = (uint64_t *)(v808 + 40);
                      v816 = v818;
                      if ((*(_DWORD *)(*(v817 - 1) + 8) - 64) >= 0xFFFFFF80)
                        v816 = v817;
                      if (v814 <= 0xFFFFFFBF)
                      {
                        v819 = (unint64_t)(v814 + 64) >> 6;
                        do
                        {
                          v820 = *v816++;
                          *v815++ = v820;
                          --v819;
                        }
                        while (v819);
                      }
                    }
                  }
                  LOBYTE(v1101) = 0;
                  if (!llvm::APFloat::convert((uint64_t)&v1095, &unk_1C866F15C, 1, &v1101)
                    && !(_BYTE)v1101
                    && !sub_1C4773C58((uint64_t)&v1095))
                  {
                    v978 = sub_1C6366D08(*(_QWORD *)(a1 + 296), (llvm::LLVMContext *)&v1095, (const llvm::APFloat *)&v1077, (llvm *)9, 0, 0);
                    v980 = sub_1C48DBEF0(a1, (uint64_t)v978);
                    v981 = 0;
                    v982 = *(_QWORD *)(a1 + 296);
                    v983 = *(_QWORD *)(v982 + 832);
                    if (v983)
                      v981 = *(_WORD *)(v983 + 8);
                    v984 = sub_1C5D52060(v982, 215, (const llvm::APInt *)&v1077, (llvm *)0xA, 0, (uint64_t)v980, v979, v981);
                    sub_1C5D6146C(*v1058, v752, 0, (uint64_t)v984, v985);
                    sub_1C63725DC((uint64_t)v984);
                  }
                  if (*((_UNKNOWN **)&v1095 + 1) == &unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v1096);
                  }
                  else if ((*(_DWORD *)(*((_QWORD *)&v1095 + 1) + 8) - 64) <= 0xFFFFFF7F && v1096)
                  {
                    MEMORY[0x1CAA32F9C](v1096, 0x1000C8000313F17);
                  }
                }
              }
            }
            goto LABEL_1051;
          }
          v821 = *(_QWORD *)(v752 + 40);
          v822 = *(llvm **)v821;
          v823 = *(_QWORD *)v821;
          if ((v823 == 5) != (v823 != 6))
            goto LABEL_1051;
          v1054 = *(_QWORD *)(v821 + 8);
          sub_1C48DC710((uint64_t)__src, *v1058, v752, 0, 0, 1, 0);
          if ((int)v1108 >= 4 && !HIDWORD(v1108))
            goto LABEL_1051;
          if ((int)v1108 >= 4 && HIDWORD(v1108) && (sub_1C48DB648(v752) & 1) != 0)
            goto LABEL_1051;
          v825 = *(_QWORD *)(v752 + 80);
          v826 = *(_DWORD *)(v825 + 32);
          if (v826 > 0x40)
            v827 = **(_QWORD **)(v825 + 24);
          else
            v827 = (uint64_t)(*(_QWORD *)(v825 + 24) << -(char)v826) >> -(char)v826;
          v829 = *(_QWORD *)(v752 + 48);
          if (v829)
          {
            while (*(_WORD *)(*(_QWORD *)(v829 + 16) + 24) == 171)
            {
              v829 = *(_QWORD *)(v829 + 32);
              if (!v829)
                goto LABEL_1059;
            }
          }
          else
          {
LABEL_1059:
            v824.i32[0] = v827 + 1;
            v830 = (uint8x8_t)vcnt_s8(v824);
            v830.i16[0] = vaddlv_u8(v830);
            if (v830.i32[0] == 1)
              goto LABEL_1051;
          }
          if (sub_1C48DB648(v752))
          {
            v831 = __clz(__rbit64(v827));
            if (v831 >= 4)
              v832 = 4;
            else
              v832 = v831;
            if ((_DWORD)v832)
            {
              v833 = 1;
              v834 = 1;
              while (1)
              {
                v835 = sub_1C6366AB4(*v1058, v827 >> v833, (const llvm::APInt *)&v1077, v822, v1054, 0, 0)[6];
                if (v835)
                  break;
LABEL_1069:
                v834 = v833++ < v832;
                if (v833 == (_DWORD)v832 + 1)
                  goto LABEL_1070;
              }
              while (*(_DWORD *)(v835 + 8))
              {
                v835 = *(_QWORD *)(v835 + 32);
                if (!v835)
                  goto LABEL_1069;
              }
              LODWORD(v832) = v833;
            }
            else
            {
LABEL_1070:
              v834 = 0;
            }
            v860 = v832;
            v827 >>= v832;
          }
          else
          {
            v860 = 0;
            v834 = 0;
          }
          if ((unint64_t)(v827 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
          {
            v866 = 4;
          }
          else
          {
            if ((unint64_t)(v827 - 0x100000000) < 0xFFFFFFFE80000000 || v823 == 5 && !v834)
              goto LABEL_1051;
            v866 = 5;
          }
          v867 = *(_QWORD *)(v752 + 48);
          if ((v827 & 0x8000000000000000) == 0)
          {
            if (!v867)
              goto LABEL_1224;
            v868 = *(_QWORD *)(v752 + 48);
            while (1)
            {
              v869 = *(_QWORD *)(v868 + 16);
              v870 = *(unsigned __int16 *)(v869 + 24);
              if (v870 <= 0xAB)
              {
                if (v870 - 57 >= 2)
                {
                  if (v870 == 56)
                  {
                    if (*(_WORD *)(**(_QWORD **)(v869 + 32) + 24) == 15)
                      goto LABEL_1161;
                  }
                  else
                  {
                    if (v870 != 171)
                      goto LABEL_1161;
                    v871 = *(unsigned __int16 *)(v752 + 24);
                    if (v871 == 35 || v871 == 11)
                    {
                      v872 = *(_QWORD *)(v752 + 80);
                      v873 = (_QWORD *)(v872 + 24);
                      if (*(_DWORD *)(v872 + 32) >= 0x41u)
                        v873 = (_QWORD *)*v873;
                      if (*v873 == 0xFFFFLL)
                        goto LABEL_1161;
                    }
                  }
                }
              }
              else if (*(unsigned __int16 *)(v869 + 24) > 0xBFu)
              {
                if (v870 == 192)
                {
                  v874 = *(_QWORD *)(v869 + 32);
                  if (*(_QWORD *)(v874 + 80) == v752 || *(_QWORD *)(v874 + 120) == v752)
                    goto LABEL_1161;
                }
                else
                {
                  if (v870 != 260)
                    goto LABEL_1161;
                  v874 = *(_QWORD *)(v869 + 32);
                }
                v15 = v870 == 260;
                v875 = 160;
                if (v15)
                  v875 = 40;
                if ((*(_DWORD *)(*(_QWORD *)(v874 + v875) + 76) - 22) >= 0xFFFFFFFC)
                  goto LABEL_1161;
              }
              else if (v870 - 172 >= 2)
              {
                if (v870 - 175 < 3 && **(_BYTE **)(v869 + 40) != 6)
                  goto LABEL_1224;
LABEL_1161:
                if (v823 != 6)
                  goto LABEL_1051;
                while (*(_WORD *)(*(_QWORD *)(v867 + 16) + 24) != 58)
                {
                  v867 = *(_QWORD *)(v867 + 32);
                  if (!v867)
                    goto LABEL_1051;
                }
LABEL_1224:
                v881 = 199;
LABEL_1225:
                v961 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v827, (const llvm::APInt *)&v1077, (llvm *)v866, 0, 0, 0);
                v963 = sub_1C48DC2A8(a1, (uint64_t)v961);
                v964 = 0;
                v965 = *(_QWORD *)(a1 + 296);
                v966 = *(_QWORD *)(v965 + 832);
                if (v966)
                  v964 = *(_WORD *)(v966 + 8);
                v847 = sub_1C5D52060(v965, v881, (const llvm::APInt *)&v1077, v822, v1054, (uint64_t)v963, v962, v964);
                v968 = v967;
                if (v860)
                {
                  v969 = *v1058;
                  v970 = sub_1C6366AB4(*v1058, v860, (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
                  v973 = 0;
                  v974 = *(_QWORD *)(v969 + 832);
                  if (v974)
                    v973 = *(_WORD *)(v974 + 8);
                  v847 = sub_1C5D56C70(v969, 175, (const llvm::APInt *)&v1077, v822, v1054, (uint64_t)v847, v968, v972, (uint64_t)v970, v971, v973);
                  LODWORD(v968) = v975;
                }
                v850 = *v1058;
                v883 = v752;
                v884 = (uint64_t)v847;
                v849 = v968;
LABEL_1143:
                sub_1C5D6146C(v850, v883, 0, v884, v849);
                sub_1C63725DC((uint64_t)v847);
                goto LABEL_1051;
              }
              v868 = *(_QWORD *)(v868 + 32);
              if (!v868)
                goto LABEL_1224;
            }
          }
          if (!v867)
          {
LABEL_1135:
            v881 = 198;
            goto LABEL_1225;
          }
          v876 = *(_QWORD *)(v752 + 48);
          while (2)
          {
            v877 = *(_QWORD *)(v876 + 16);
            v878 = *(unsigned __int16 *)(v877 + 24);
            switch(v878)
            {
              case 56:
                if (*(_WORD *)(**(_QWORD **)(v877 + 32) + 24) == 15)
                  goto LABEL_1136;
                break;
              case 192:
                v879 = *(_QWORD *)(v877 + 32);
                if (*(_QWORD *)(v879 + 80) == v752 || *(_QWORD *)(v879 + 120) == v752)
                  goto LABEL_1136;
                goto LABEL_1127;
              case 260:
                v879 = *(_QWORD *)(v877 + 32);
LABEL_1127:
                v15 = v878 == 260;
                v880 = 160;
                if (v15)
                  v880 = 40;
                if ((*(_DWORD *)(*(_QWORD *)(v879 + v880) + 76) - 10) < 4)
                {
LABEL_1136:
                  if (v823 != 6)
                    goto LABEL_1051;
                  while (*(_WORD *)(*(_QWORD *)(v867 + 16) + 24) != 58)
                  {
                    v867 = *(_QWORD *)(v867 + 32);
                    if (!v867)
                      goto LABEL_1051;
                  }
                  goto LABEL_1135;
                }
                break;
              default:
                if ((v878 - 56) > 2)
                  goto LABEL_1136;
                break;
            }
            v876 = *(_QWORD *)(v876 + 32);
            if (!v876)
              goto LABEL_1135;
            continue;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318))
          goto LABEL_1051;
        v783 = *(uint64_t **)(v752 + 32);
        v782 = *(_QWORD *)(v752 + 40);
        v784 = *(llvm **)v782;
        v785 = v783[5];
        v786 = *(unsigned __int16 *)(v785 + 24);
        v787 = v786 == 35 || v786 == 11;
        if (!v787 || *(_QWORD *)v782 == 6)
          goto LABEL_1051;
        v789 = *(_QWORD *)(v785 + 80);
        v790 = (_QWORD *)(v789 + 24);
        if (*(_DWORD *)(v789 + 32) >= 0x41u)
          v790 = (_QWORD *)*v790;
        v791 = *(_QWORD *)(v782 + 8);
        v792 = *v783;
        v793 = v783[1];
        v794 = (_QWORD *)*v790;
        v1059 &= 0xFFFFFFFF00000000;
        v1060 &= 0xFFFFFFFF00000000;
        if (*v790 - 5 <= 3)
        {
          v1051 = sub_1C6366AB4(*v1058, ((_DWORD)v794 - 4), (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
          v862 = v861;
          v1056 = sub_1C6366AB4(*v1058, 4, (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
          v865 = v864;
        }
        else
        {
          if (((_DWORD)v794 - 17) > 3)
            goto LABEL_1051;
          v885 = sub_1C6366AB4(*v1058, ((_DWORD)v794 - 16), (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
          v1035 = v886;
          v1052 = v885;
          v887 = sub_1C6366AB4(*v1058, 16, (const llvm::APInt *)&v1077, (llvm *)5, 0, 0, 0);
          v862 = v888;
          v889 = sub_1C48DB648(v752);
          v890 = v1052;
          if (v889)
            v891 = v1052;
          else
            v891 = v887;
          v1056 = v891;
          if (v889)
            v892 = v1035;
          else
            v892 = v862;
          if (v889)
            v890 = v887;
          v1051 = v890;
          v865 = v892;
          if (!v889)
            v862 = v1035;
        }
        v893 = *(_QWORD *)(*v1058 + 832);
        if (v893)
          LOWORD(v893) = *(_WORD *)(v893 + 8);
        v1060 |= v862;
        v895 = sub_1C5D56C70(*v1058, 175, (const llvm::APInt *)&v1077, v784, v791, v792, v793, v863, (uint64_t)v1051, v1060, v893);
        v897 = *(_QWORD *)(*v1058 + 832);
        if (v897)
          LOWORD(v897) = *(_WORD *)(v897 + 8);
        v1059 |= v865;
        v898 = sub_1C5D56C70(*v1058, 175, (const llvm::APInt *)&v1077, v784, v791, (uint64_t)v895, v894, v896, (uint64_t)v1056, v1059, v897);
        sub_1C5D6146C(*v1058, v752, 0, (uint64_t)v898, v899);
        sub_1C63725DC((uint64_t)v898);
      }
LABEL_1051:
      if ((_QWORD)v1077)
        llvm::MetadataTracking::untrack((uint64_t)&v1077, (unsigned __int8 *)v1077);
      v750 = v751;
      if (v751 == v749)
      {
        v748 = (_QWORD *)*v1058;
        return sub_1C6365284(v748);
      }
    }
  }
  return sub_1C6365284(v748);
}

#error "1C48C8E50: too big function (funcsize=0)"

uint64_t sub_1C48DA6EC(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C48DA708 + 4 * byte_1C65ED844[a2]))();
}

BOOL sub_1C48DA708(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 480) + 318) != 0;
}

uint64_t sub_1C48DA79C(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))((char *)sub_1C48DA7B8 + 4 * byte_1C65ED84F[a3]))();
}

BOOL sub_1C48DA7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 + 80);
  v3 = (_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (_QWORD *)*v3;
  return *v3 < 0x100uLL;
}

uint64_t sub_1C48DA7E0(uint64_t a1, uint64_t a2)
{
  return sub_1C48AAB00(*(_QWORD *)(a2 + 80) + 24);
}

uint64_t sub_1C48DA7EC(uint64_t a1, uint64_t a2)
{
  return sub_1C48AA9FC(*(_QWORD *)(a2 + 80) + 24);
}

BOOL sub_1C48DA7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _BOOL8 result;

  v2 = *(_QWORD *)(a2 + 80);
  v3 = (unint64_t *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (unint64_t *)*v3;
  v4 = *v3;
  result = 1;
  if ((v4 & 0xFFFFFFFFFFFFF807) != 0
    && (v4 & 0xFFFFFFFFFFFFFC03) != 0
    && v4 >= 0x100
    && (v4 & 0xFFFFFFFFFFFFFE01) != 0)
  {
    return (v4 & 0xFFFFFFFFFFFFF00FLL) == 0;
  }
  return result;
}

void sub_1C48DA848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  __asm { BR              X10 }
}

BOOL sub_1C48DA894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C48DD0B8(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1), 0);
}

BOOL sub_1C48DA8E0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[4];
  int v10;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  v5 = *v3;
  v6 = *v3 + 24 * v4;
  v7 = v5 + 24 * (v4 + 1);
  sub_1C48DC710((uint64_t)v9, *(_QWORD *)(v2 + 296), v1, v0, 0, 1, 0);
  return sub_1C48DD0B8(v2, v9[0], v9[1], v6, v7, v10 << 6);
}

uint64_t sub_1C48DAB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C48ECFA8(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

BOOL sub_1C48DAB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  return sub_1C48E0130(v2, v1, v0, *v3 + 24 * v4, *v3 + 24 * (v4 + 1));
}

void sub_1C48DABD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  _BYTE *v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int ExtendedSizeInBits;
  const char *v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;

  sub_1C612E83C((uint64_t)v3, v4 + 2);
  v5 = *(_BYTE **)(v2 + 480);
  if (v5[319])
    v6 = v5[338] == 0;
  else
    v6 = 0;
  v7 = v6 || v5[326] != 0;
  v8 = *v3;
  v9 = *(_QWORD *)(v2 + 296);
  v25 = v1;
  v26 = v0;
  v10 = *(_QWORD *)(v1 + 40);
  v11 = *(unsigned __int8 **)v10;
  v12 = *(_QWORD *)(v10 + 8);
  if ((_BYTE)v11)
  {
    v13 = v11 - 120 < 0x20;
    if (v11 - 15 < 0x3C)
      v13 = 1;
    v14 = v11 - 2 < 6 || v13;
    v27 = v11;
    v28 = v12;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v27);
  }
  else
  {
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      v17 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
    else
      v17 = *(_DWORD *)(v12 + 8);
    v14 = v17 == 13;
    v27 = v11;
    v28 = v12;
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v27);
  }
  v18 = ExtendedSizeInBits;
  if ((_DWORD)v16 == 1)
  if (v18 == 16 && v14)
  {
    v20 = v4 + 1;
    v21 = v8 + 24 * v4;
    v22 = v8 + 24 * v20;
    sub_1C48DD498(v1, v0, (uint64_t)&v25, 0, 1, v7, v9);
    v23 = v25;
    *(_DWORD *)(v21 + 8) = v26;
    *(_QWORD *)v21 = v23;
    v27 = 0;
    v28 = 0;
    *(_QWORD *)v22 = sub_1C6366AB4(v9, 0, (const llvm::APInt *)&v27, (llvm *)5, 0, 1, 0);
    *(_DWORD *)(v22 + 8) = v24;
    if (v27)
      llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  JUMPOUT(0x1C48DAB28);
}

void sub_1C48DADC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_1C48DAE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v9;
  int v10;

  v2 = *(_QWORD *)(v0 + 80);
  v3 = (uint64_t *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (uint64_t *)*v3;
  v4 = *v3;
  v5 = *(_QWORD *)(v1 + 296);
  v6 = *(unsigned __int8 **)(v0 + 64);
  v9 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v9, v6, 2);
  v10 = *(_DWORD *)(v0 + 60);
  v7 = sub_1C6366AB4(v5, v4, (const llvm::APInt *)&v9, (llvm *)6, 0, 1, 0);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  return v7;
}

_QWORD *sub_1C48DB368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6, llvm *a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v24;
  llvm::detail::DoubleAPFloat *v25;
  void *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  llvm::detail::DoubleAPFloat *v32;
  void *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  __int128 v44;

  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 36 || v8 == 12)
    v10 = a2;
  else
    v10 = 0;
  if (v8 == 35 || v8 == 11)
    v12 = a2;
  else
    v12 = 0;
  v13 = *(unsigned __int16 *)(a4 + 24);
  if (v13 == 36 || v13 == 12)
    v15 = a4;
  else
    v15 = 0;
  if (v13 == 35 || v13 == 11)
    v17 = a4;
  else
    v17 = 0;
  if (!(v10 | v12) || !(v15 | v17))
    return 0;
  if (v10)
  {
    v24 = *(_QWORD *)(v10 + 80);
    v26 = *(void **)(v24 + 32);
    v25 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
    if (v26 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v25, (unsigned int *)&v44);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v25, (unsigned int *)&v44);
    if (DWORD2(v44) >= 0x41)
      v27 = (__int128 *)v44;
    else
      v27 = &v44;
    v28 = *(_QWORD *)v27;
    if (DWORD2(v44) >= 0x41 && (_QWORD)v44)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v29 = *(_QWORD *)(v12 + 80);
    v30 = (unsigned __int16 *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u)
      v30 = *(unsigned __int16 **)v30;
    v28 = *v30;
  }
  if (v15)
  {
    v31 = *(_QWORD *)(v15 + 80);
    v33 = *(void **)(v31 + 32);
    v32 = (llvm::detail::DoubleAPFloat *)(v31 + 32);
    if (v33 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (unsigned int *)&v44);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v32, (unsigned int *)&v44);
    if (DWORD2(v44) >= 0x41)
      v34 = (__int128 *)v44;
    else
      v34 = &v44;
    v35 = *(_QWORD *)v34;
    if (DWORD2(v44) >= 0x41 && (_QWORD)v44)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v36 = *(_QWORD *)(v17 + 80);
    v37 = (unsigned __int16 *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u)
      v37 = *(unsigned __int16 **)v37;
    v35 = *v37;
  }
  *(_QWORD *)&v44 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v28 + (v35 << 16), a6, (llvm *)6, 0, 1, 0);
  *((_QWORD *)&v44 + 1) = v38;
  v39 = *(_QWORD *)(a1 + 296);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16) + 318))
    v40 = 4068;
  else
    v40 = 4069;
  v41 = *(unsigned __int8 **)a6;
  v42 = v41;
  if (v41)
    llvm::MetadataTracking::track((uint64_t)&v42, v41, 2);
  v43 = *((_DWORD *)a6 + 2);
  v18 = sub_1C613B1C8(v39, v40, (uint64_t)&v42, a7, a8, 0, &v44);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  return v18;
}

uint64_t sub_1C48DB5A0(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if ((a1 - 417) >= 5
    && ((a1 - 96) > 0x2D || ((1 << (a1 - 96)) & 0x200000000005) == 0))
  {
    v3 = a1 - 231;
    if (v3 > 0xA || ((1 << v3) & 0x409) == 0)
      return 0;
  }
  return result;
}

void sub_1C48DB604(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  void *v4;
  const llvm::detail::IEEEFloat *v5;

  v4 = *(void **)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (v4 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::subtract(v3, (int)v5);
  else
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)v3, v5, a3, 1);
}

uint64_t sub_1C48DB628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  uint64_t *v5;

  v4 = *(void **)(a1 + 8);
  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 8);
  if (v4 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::multiply(v3, v5, a3);
  else
    return llvm::detail::IEEEFloat::multiply(v3, (const llvm::detail::IEEEFloat *)v5, a3);
}

uint64_t sub_1C48DB648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 1;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(unsigned __int16 *)(v2 + 24);
    if ((v3 - 58) < 0xFFFFFFFE)
      break;
    v4 = *(uint64_t **)(v2 + 32);
    v5 = *v4;
    if (*v4 == a1)
      break;
    if (*(_WORD *)(v5 + 24) == 175)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 40);
      v7 = *(unsigned __int16 *)(v6 + 24);
      if (v7 == 35 || v7 == 11)
      {
        v9 = *(_QWORD *)(v6 + 80);
        v10 = (_QWORD *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u)
          v10 = (_QWORD *)*v10;
        if (v3 == 56 && *v10 < 5uLL)
          break;
      }
    }
    v11 = v4[5];
    if (*(_WORD *)(v11 + 24) == 175)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 40);
      v13 = *(unsigned __int16 *)(v12 + 24);
      if (v13 == 35 || v13 == 11)
      {
        v15 = *(_QWORD *)(v12 + 80);
        v16 = (_QWORD *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u)
          v16 = (_QWORD *)*v16;
        if (*v16 < 5uLL)
          break;
      }
    }
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 1;
  }
  return 0;
}

BOOL sub_1C48DB728(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;

  sub_1C48DC710((uint64_t)&v9, *(_QWORD *)(a1 + 296), a2, a3, 0, 1, 0);
  return sub_1C48DCF20(a1, v9, v10, a4, a5, v11 << 6);
}

BOOL sub_1C48DB798(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9[4];
  int v10;

  sub_1C48DC710((uint64_t)v9, *(_QWORD *)(a1 + 296), a2, a3, 0, 1, 0);
  return sub_1C48DD0B8(a1, v9[0], v9[1], a4, a5, v10 << 6);
}

uint64_t sub_1C48DB808(uint64_t a1, unint64_t *a2, _DWORD *a3, int *a4)
{
  int v4;
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t i;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unsigned int v32;
  unsigned __int8 **v33;
  unint64_t j;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  uint64_t v72;
  _DWORD v73[2];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(*(_QWORD *)a3 + 24);
  if (v4 != 35 && v4 != 11)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v9 = (unint64_t *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (unint64_t *)*v9;
  v10 = (_QWORD *)*a2;
  v11 = *(unsigned __int16 *)(*a2 + 24);
  if ((v11 - 173) < 0xFFFFFFFE)
    return 0;
  if (*(_BYTE *)(v10[5] + 16 * *((unsigned int *)a2 + 2)) != 4)
    return 0;
  v12 = *v9;
  if (*a4 != 22 && *a4 != 17)
    return 0;
  if (v12 > 1)
    return 0;
  v14 = v10[6];
  if (v14)
  {
    v15 = 4;
    do
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 16) + 24);
      if (v16 != 260 && v16 != 192)
        return 0;
      if (!--v15)
        return 0;
      v14 = *(_QWORD *)(v14 + 32);
    }
    while (v14);
  }
  result = 0;
  v17 = (_BOOL8 *)v10[4];
  v18 = *v17;
  v19 = *(unsigned __int16 *)(*v17 + 24);
  if (v19 != 50 && v19 != 148 && v19 != 65527)
  {
    v21 = *(_QWORD *)(v18 + 48);
    if (v21)
    {
      while (*(_WORD *)(*(_QWORD *)(v21 + 16) + 24) != 49)
      {
        v21 = *(_QWORD *)(v21 + 32);
        if (!v21)
          goto LABEL_29;
      }
      return 0;
    }
LABEL_29:
    result = 0;
    v22 = v17[5];
    v23 = *(unsigned __int16 *)(v22 + 24);
    if (v23 != 50 && v23 != 148 && v23 != 65527)
    {
      v25 = *(_QWORD *)(v22 + 48);
      if (v25)
      {
        while (*(_WORD *)(*(_QWORD *)(v25 + 16) + 24) != 49)
        {
          v25 = *(_QWORD *)(v25 + 32);
          if (!v25)
            goto LABEL_37;
        }
        return 0;
      }
LABEL_37:
      v61 = v12;
      for (i = 0; i != 8; i += 4)
      {
        v27 = &(&v66)[i];
        *((_DWORD *)v27 + 2) = 1;
        *v27 = 0;
        *((_DWORD *)v27 + 6) = 1;
        v27[2] = 0;
      }
      sub_1C6368768(*(_QWORD *)(a1 + 296), v18, v17[1], 0, (uint64_t)&v62);
      if (v67 >= 0x41 && v66)
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      v28 = v62;
      v66 = v62;
      v29 = v63;
      v67 = v63;
      v63 = 0;
      if (v69 >= 0x41 && v68)
      {
        MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
        v68 = v64;
        v69 = v65;
        v65 = 0;
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
      }
      else
      {
        v68 = v64;
        v69 = v65;
      }
      sub_1C6368768(*(_QWORD *)(a1 + 296), *(_QWORD *)(*(_QWORD *)(*a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(*a2 + 32) + 48), 0, (uint64_t)&v62);
      if (v71 >= 0x41 && v70)
        MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
      v31 = (unsigned __int8 **)v62;
      v70 = v62;
      v32 = v63;
      v71 = v63;
      v63 = 0;
      if (v73[0] >= 0x41u && v72)
      {
        v58 = v62;
        v57 = v32;
        MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
        v32 = v57;
        v31 = (unsigned __int8 **)v58;
        v72 = v64;
        v73[0] = v65;
        v65 = 0;
        if (v63 >= 0x41 && v62)
        {
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
          v32 = v57;
          v31 = (unsigned __int8 **)v58;
        }
      }
      else
      {
        v72 = v64;
        v73[0] = v65;
      }
      v33 = &v66;
      if (v29 >= 0x41)
        v33 = (unsigned __int8 **)v28;
      if (*v33 != (unsigned __int8 *)65534)
        goto LABEL_51;
      if (v32 < 0x41)
        v31 = &v70;
      if (*v31 == (unsigned __int8 *)65534)
      {
        if (v11 == 172 && v61 == 1 || v11 == 171 && !v61)
        {
          v39 = (_QWORD *)(*(_QWORD *)(*a2 + 40) + 16 * *((unsigned int *)a2 + 2));
          *a4 = sub_1C6365158(*a4, *v39, v39[1]);
          v61 ^= 1uLL;
        }
      }
      else
      {
LABEL_51:
        result = 0;
        if (v11 != 172 || v61)
        {
LABEL_53:
          for (j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
          {
            v35 = &(&v66)[j / 2];
            if (v73[j] >= 0x41u && v35[6])
            {
              v36 = result;
              MEMORY[0x1CAA32F9C](v35[6], 0x1000C8000313F17);
              result = v36;
            }
            if (*((_DWORD *)v35 + 10) >= 0x41u)
            {
              v37 = v35[4];
              if (v37)
              {
                v38 = result;
                MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
                result = v38;
              }
            }
          }
          return result;
        }
        v61 = 0;
      }
      v40 = *a2;
      v41 = *(unsigned __int8 **)(*a2 + 64);
      v62 = v41;
      v42 = v40;
      if (v41)
      {
        llvm::MetadataTracking::track((uint64_t)&v62, v41, 2);
        v42 = *a2;
      }
      v63 = *(_DWORD *)(v40 + 60);
      v43 = *(_QWORD *)(a1 + 296);
      v44 = *(uint64_t **)(v42 + 32);
      v45 = *v44;
      v46 = v44[1];
      v47 = v44[5];
      v48 = v44[6];
      v49 = *(_QWORD *)(v43 + 832);
      if (v49)
        LOWORD(v49) = *(_WORD *)(v49 + 8);
      v50 = sub_1C5D56C70(v43, 146, (const llvm::APInt *)&v62, (llvm *)0x26, 0, v45, v46, v30, v47, v48, v49);
      v51 = 0;
      *a2 = (unint64_t)v50;
      *((_DWORD *)a2 + 2) = v52;
      v53 = *(_QWORD *)(a1 + 296);
      v54 = *(_QWORD *)(v53 + 832);
      if (v54)
        v51 = *(_WORD *)(v54 + 8);
      *a2 = (unint64_t)sub_1C5D52060(v53, 216, (const llvm::APInt *)&v62, (llvm *)5, 0, (uint64_t)v50, a2[1], v51);
      *((_DWORD *)a2 + 2) = v55;
      *(_QWORD *)a3 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 65537 * v61, (const llvm::APInt *)&v62, (llvm *)5, 0, 0, 0);
      a3[2] = v56;
      if (v62)
        llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
      result = 1;
      goto LABEL_53;
    }
  }
  return result;
}

BOOL sub_1C48DBDB8(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  _QWORD *v3;

  if (*(_WORD *)(a1 + 24) == 216
    && (v1 = *(unsigned int **)(a1 + 32), v2 = *(_QWORD *)v1, *(_WORD *)(*(_QWORD *)v1 + 24) == 146)
    && *(_BYTE *)(*(_QWORD *)(v2 + 40) + 16 * v1[2]) == 49
    && (v3 = *(_QWORD **)(v2 + 32), *(_WORD *)(*v3 + 24) == 395))
  {
    return *(unsigned __int16 *)(v3[5] + 24) == 395;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C48DBE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = 1;
  if (v1)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v1 + 16);
      v5 = *(unsigned __int16 *)(v4 + 24);
      if (v5 <= 0x103)
      {
        if (v5 == 192)
          goto LABEL_7;
        if (v5 == 46)
          return 0;
      }
      else
      {
        if (v5 == 260)
          goto LABEL_16;
        if (v5 == 428)
        {
LABEL_7:
          v6 = *(_QWORD *)(v4 + 32);
          if (*(_QWORD *)(v6 + 80) == a1 || *(_QWORD *)(v6 + 120) == a1)
            return 0;
          goto LABEL_16;
        }
      }
      if ((sub_1C48DB5A0(*(unsigned __int16 *)(v4 + 24)) & 1) == 0
        && (v5 - 202 > 0x15 || ((1 << (v5 + 54)) & 0x300003) == 0))
      {
        return 0;
      }
LABEL_16:
      v1 = *(_QWORD *)(v1 + 32);
      if (!v1)
        return 1;
    }
  }
  return v2;
}

_QWORD *sub_1C48DBEF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  llvm::detail::DoubleAPFloat *v6;
  uint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  int v13;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::detail::DoubleAPFloat *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 **)(a2 + 64);
  v38 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v38, v4, 2);
  v39 = *(_DWORD *)(a2 + 60);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = (llvm::detail::DoubleAPFloat *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 32);
  if ((_UNKNOWN *)v7 == &unk_1C866F1C0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v5 + 40) + 28) & 8) == 0)
    {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (unsigned int *)&v40);
      goto LABEL_8;
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v41, v6);
  }
  else
  {
    v8 = *(_BYTE *)(v5 + 52);
    if ((v8 & 8) == 0)
    {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (unsigned int *)&v40);
LABEL_8:
      v9 = (unint64_t *)&v40;
      if (v41 >= 0x41)
        v9 = v40;
      v10 = *v9;
      v36 = v38;
      if (v38)
        llvm::MetadataTracking::track((uint64_t)&v36, v38, 2);
      v37 = v39;
      v11 = sub_1C48DD8B0(a1, v10, (uint64_t)&v36, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
      if (v36)
        llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
      goto LABEL_14;
    }
    v41 = *(_QWORD *)(v5 + 32);
    if ((*(_DWORD *)(v7 + 8) + 64) >= 0x80)
    {
      v34 = v5;
      v35 = operator new[]();
      v5 = v34;
      v42 = (uint64_t *)v35;
      v8 = *(_BYTE *)(v34 + 52);
    }
    v13 = v8 & 7;
    v44 = v44 & 0xF0 | v8 & 0xF;
    v43 = *(_DWORD *)(v5 + 48);
    v15 = (v8 & 6) != 0 && v13 != 3;
    if (v13 == 1 || v15)
    {
      v17 = *(unsigned int *)(v41 + 8);
      if ((v17 - 64) <= 0xFFFFFF7F)
        v18 = v42;
      else
        v18 = (uint64_t *)&v42;
      v21 = *(uint64_t **)(v5 + 40);
      v19 = (uint64_t *)(v5 + 40);
      v20 = v21;
      if ((*(_DWORD *)(*(v19 - 1) + 8) - 64) < 0xFFFFFF80)
        v19 = v20;
      if (v17 <= 0xFFFFFFBF)
      {
        v22 = (unint64_t)(v17 + 64) >> 6;
        do
        {
          v23 = *v19++;
          *v18++ = v23;
          --v22;
        }
        while (v22);
      }
    }
  }
  if ((_UNKNOWN *)v41 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v41);
  else
    v44 ^= 8u;
  v24 = sub_1C6366D08(*(_QWORD *)(a1 + 296), (llvm::LLVMContext *)&v40, (const llvm::APFloat *)&v38, (llvm *)9, 0, 0);
  if ((_UNKNOWN *)v41 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v42);
  }
  else if ((*(_DWORD *)(v41 + 8) - 64) <= 0xFFFFFF7F && v42)
  {
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  }
  v25 = v24[10];
  v27 = *(void **)(v25 + 32);
  v26 = (llvm::detail::DoubleAPFloat *)(v25 + 32);
  if (v27 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v26, (unsigned int *)&v40);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v26, (unsigned int *)&v40);
  v28 = (unint64_t *)&v40;
  if (v41 >= 0x41)
    v28 = v40;
  v29 = *v28;
  v36 = v38;
  if (v38)
    llvm::MetadataTracking::track((uint64_t)&v36, v38, 2);
  v37 = v39;
  v30 = sub_1C48DD8B0(a1, v29, (uint64_t)&v36, *(llvm **)v24[5], *(_QWORD *)(v24[5] + 8));
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  v31 = *(_QWORD *)(a1 + 296);
  v32 = *(_QWORD *)(v31 + 832);
  if (v32)
    v33 = *(_WORD *)(v32 + 8);
  else
    v33 = 0;
  v11 = sub_1C5D52060(v31, 222, (const llvm::APInt *)&v38, (llvm *)9, 0, (uint64_t)v30, 0, v33);
LABEL_14:
  if (v41 >= 0x41 && v40)
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  return v11;
}

_QWORD *sub_1C48DC2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unsigned __int8 *v10;
  int v11;

  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = (unint64_t *)*v5;
  v6 = *v5;
  v7 = *(unsigned __int8 **)(a2 + 64);
  v10 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v10, v7, 2);
  v11 = *(_DWORD *)(a2 + 60);
  v8 = sub_1C48DD8B0(a1, v6, (uint64_t)&v10, **(llvm ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8));
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return v8;
}

uint64_t sub_1C48DC348(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = 1;
  if (v2)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 16);
      v6 = *(unsigned __int16 *)(v5 + 24);
      if (v6 == 46)
        break;
      if ((sub_1C48DB5A0(*(unsigned __int16 *)(v5 + 24)) & 1) == 0
        && ((v6 - 202) > 0x15 || ((1 << (v6 + 54)) & 0x300003) == 0))
      {
        break;
      }
      if ((v6 & 0xFFFE) == 0xDE)
      {
        if ((sub_1C48DC348(v5, a2) & 1) == 0)
          return 0;
      }
      else
      {
        sub_1C4774094(a2, v5);
        if ((*((_DWORD *)a2 + 5) - *((_DWORD *)a2 + 6)) > 2)
          return 0;
      }
      v2 = *(_QWORD *)(v2 + 32);
      if (!v2)
        return 1;
    }
    return 0;
  }
  return v3;
}

uint64_t *sub_1C48DC410(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  BOOL v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  _DWORD v45[12];
  unsigned __int8 *v46;
  int v47;

  v12 = (_QWORD *)a2;
  v14 = *(unsigned __int8 **)(a2 + 64);
  v46 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v46, v14, 2);
  v15 = a3 & 0xFFFFFFFF00000000;
  v47 = *((_DWORD *)v12 + 15);
  v16 = *((unsigned __int16 *)v12 + 12);
  if (v16 == 222)
  {
    v17 = *(_QWORD **)v12[4];
    v18 = *((unsigned __int16 *)v17 + 12);
    v19 = a3 & 0xFFFFFFFF00000000;
  }
  else
  {
    v18 = *((unsigned __int16 *)v12 + 12);
    v17 = v12;
    v19 = a3;
  }
  if (v18 == 223)
  {
    v17 = *(_QWORD **)v17[4];
    v19 &= 0xFFFFFFFF00000000;
    v20 = *((unsigned __int16 *)v17 + 12);
  }
  else
  {
    v20 = v18;
  }
  if (v20 == 212 && (a4 & 1) == 0)
  {
    v21 = (_DWORD *)v17[4];
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(*(_QWORD *)v21 + 48);
    if (v23)
    {
      v24 = v21[2];
      v25 = 1;
      while (1)
      {
        if (*(_DWORD *)(v23 + 8) == v24)
        {
          if (!v25)
          {
            LODWORD(v23) = 1;
            goto LABEL_20;
          }
          --v25;
        }
        v23 = *(_QWORD *)(v23 + 32);
        if (!v23)
          goto LABEL_20;
      }
    }
    v25 = 1;
LABEL_20:
    if (v25)
      a4 = 1;
    else
      a4 = v23;
    if (*(_WORD *)(v22 + 24) == 395)
    {
      v26 = *(_BYTE **)(a1 + 480);
      if (v26[319])
        v27 = v26[338] == 0;
      else
        v27 = 0;
      if (v27)
      {
        a4 = 1;
      }
      else if (v26[326])
      {
        a4 = 1;
      }
    }
  }
  if (*((_WORD *)v17 + 12) == 212 && a4 != 0)
  {
    v33 = v17[4];
    v34 = *(uint64_t **)v33;
    v35 = v19 & 0xFFFFFFFF00000000;
    v36 = v19 & 0xFFFFFFFF00000000 | *(unsigned int *)(v33 + 8);
    if (v18 == 223)
    {
      v37 = *(_QWORD *)(a1 + 296);
      v38 = *(_QWORD *)(v37 + 832);
      v39 = v38 ? *(_WORD *)(v38 + 8) : 0;
      v34 = sub_1C5D52060(v37, 223, (const llvm::APInt *)&v46, (llvm *)0xA, 0, *(_QWORD *)v33, v19 & 0xFFFFFFFF00000000 | *(unsigned int *)(v33 + 8), v39);
      v36 = v40 | v35;
      if (a6)
        sub_1C612E190(*(_QWORD *)(a1 + 296), a6, a7, (uint64_t)v34);
    }
    if (v16 != 222)
      goto LABEL_57;
    v41 = *(_QWORD *)(a1 + 296);
    v42 = *(_QWORD *)(v41 + 832);
    v43 = v42 ? *(_WORD *)(v42 + 8) : 0;
    v34 = sub_1C5D52060(v41, 222, (const llvm::APInt *)&v46, (llvm *)0xA, 0, (uint64_t)v34, v36, v43);
    if (!a6)
      goto LABEL_57;
LABEL_60:
    sub_1C612E190(*(_QWORD *)(a1 + 296), a6, a7, (uint64_t)v34);
    goto LABEL_57;
  }
  if (v16 == 36 || v16 == 12)
  {
    if (a5)
    {
      sub_1C48DC710((uint64_t)v45, *(_QWORD *)(a1 + 296), (uint64_t)v12, a3, 0, 0, 0);
      if (v45[8] <= 3)
      {
        v12 = sub_1C48DBEF0(a1, (uint64_t)v12);
        LODWORD(a3) = v29;
      }
    }
  }
  v30 = *(_QWORD *)(a1 + 296);
  v31 = *(_QWORD *)(v30 + 832);
  if (v31)
    v32 = *(_WORD *)(v31 + 8);
  else
    v32 = 0;
  v34 = sub_1C5D52060(v30, 215, (const llvm::APInt *)&v46, (llvm *)0xA, 0, (uint64_t)v12, a3 | v15, v32);
  if (a6)
    goto LABEL_60;
LABEL_57:
  if (v46)
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  return v34;
}

uint64_t sub_1C48DC710(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v11;
  unsigned int ExtendedSizeInBits;
  const char *v15;
  int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char v22;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  unint64_t v40;
  unsigned int v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  int v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int v93;
  __int128 v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  char v99;
  uint64_t v100;

  v11 = a3;
  v100 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  v94 = *(_OWORD *)*(_QWORD *)(a3 + 40);
  if ((_BYTE)v94)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v94);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v94);
  if ((_DWORD)v15 == 1)
  {
    v91 = ExtendedSizeInBits;
    ExtendedSizeInBits = v91;
  }
  *(_DWORD *)(a1 + 40) = ExtendedSizeInBits;
  v16 = v94;
  if ((_BYTE)v94)
  {
    v17 = (v94 - 75) < 0x2Du || (v94 + 104) < 0x13u;
    v18 = v94 - 8 < 7 || v17;
  }
  else
  {
    if ((*(_DWORD *)(*((_QWORD *)&v94 + 1) + 8) & 0xFE) == 0x12)
      v19 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)&v94 + 1) + 16) + 8);
    else
      v19 = *(_DWORD *)(*((_QWORD *)&v94 + 1) + 8);
    v18 = v19 < 7;
  }
  *(_BYTE *)(a1 + 44) = v18;
  v20 = *(unsigned __int16 *)(v11 + 24);
  if (v20 == 36 || v20 == 12)
  {
    *(_DWORD *)(a1 + 32) = 5;
    v21 = *(_QWORD *)(v11 + 80);
    if (*(_UNKNOWN **)(v21 + 32) == &unk_1C866F1C0)
      v22 = *(_BYTE *)(*(_QWORD *)(v21 + 40) + 28);
    else
      v22 = *(_BYTE *)(v21 + 52);
    if (((v22 & 7) != 3 || (v22 & 8) != 0) && a5)
      goto LABEL_42;
  }
  else
  {
    if (v20 == 35 || v20 == 11)
      v24 = 4;
    else
      v24 = 0;
    *(_DWORD *)(a1 + 32) = v24;
    if (v20 != 11 && v20 != 35)
      goto LABEL_42;
  }
  if ((v16 - 4) >= 3)
  {
    if (v16 == 10)
    {
      if ((sub_1C48AAB00(*(_QWORD *)(v11 + 80) + 24) & 1) != 0)
        goto LABEL_98;
    }
    else if (v16 == 9 && (sub_1C48AA9FC(*(_QWORD *)(v11 + 80) + 24) & 1) != 0)
    {
      goto LABEL_98;
    }
LABEL_42:
    if (!a6)
      goto LABEL_79;
    goto LABEL_43;
  }
  v25 = *(_QWORD *)(v11 + 80);
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 > 0x40)
  {
    v27 = *(_QWORD *)(v25 + 24);
    v29 = *(_QWORD *)v27;
    v28 = *(_QWORD *)v27 < 0x100uLL;
    if (*(_QWORD *)v27 >= 0x100uLL && a6 != 0)
      goto LABEL_65;
    goto LABEL_63;
  }
  v27 = *(_QWORD *)(v25 + 24);
  v28 = v27 < 0x100;
  if (v27 < 0x100 || !a6)
  {
LABEL_63:
    if (v28)
      goto LABEL_98;
    goto LABEL_42;
  }
  v29 = v27;
LABEL_65:
  if ((v29 & 0xFFFFFFFFFFFFF00FLL) != 0
    && (v29 & 0xFFFFFFFFFFFFF807) != 0
    && (v29 & 0xFFFFFFFFFFFFFC03) != 0
    && (v29 & 0xFFFFFFFFFFFFFE01) != 0)
  {
    *(_DWORD *)(a1 + 36) = 0;
    if (!a6)
      goto LABEL_79;
LABEL_43:
    v30 = *(unsigned __int16 *)(v11 + 24);
    if (v30 == 58)
    {
      v31 = *(uint64_t **)(v11 + 32);
      v36 = v31[5];
      v37 = *(unsigned __int16 *)(v36 + 24);
      if (v37 != 35 && v37 != 11)
        goto LABEL_79;
      v39 = *(_QWORD *)(v36 + 80);
      if (*(_DWORD *)(v39 + 32) > 0x40u)
      {
        v40 = **(_QWORD **)(v39 + 24);
        if (v40 > 0x10)
          goto LABEL_79;
      }
      else
      {
        v40 = *(_QWORD *)(v39 + 24);
        if (v40 >= 0x11)
          goto LABEL_79;
      }
      v42 = 31 - __clz(v40);
      if (1 << v42 == v40)
      {
        LODWORD(v35) = v42;
LABEL_78:
        *(_DWORD *)(a1 + 36) = v35;
        v11 = *v31;
        a4 = *((_DWORD *)v31 + 2);
      }
    }
    else if (v30 == 175)
    {
      v31 = *(uint64_t **)(v11 + 32);
      v32 = v31[5];
      v33 = *(unsigned __int16 *)(v32 + 24);
      if (v33 == 35 || v33 == 11)
      {
        v34 = *(_QWORD *)(v32 + 80);
        if (*(_DWORD *)(v34 + 32) > 0x40u)
        {
          v35 = **(_QWORD **)(v34 + 24);
          if (v35 > 4)
            goto LABEL_79;
        }
        else
        {
          v35 = *(_QWORD *)(v34 + 24);
          if (v35 >= 5)
            goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
LABEL_79:
    if (a7 && *(_WORD *)(v11 + 24) == 395)
    {
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 8) = a4;
      *(_DWORD *)(a1 + 32) = 2;
    }
    else
    {
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 8) = a4;
      *(_DWORD *)(a1 + 32) = 0;
    }
    return a1;
  }
  if (v26 >= 0x41)
    v27 = *(_QWORD *)v27;
  if (v27 >= 0x100)
  {
    if ((v27 & 0xFFFFFFFFFFFFFE01) != 0)
    {
      if ((v27 & 0xFFFFFFFFFFFFFC03) != 0)
      {
        if ((v27 & 0xFFFFFFFFFFFFF807) != 0)
        {
          if ((v27 & 0xFFFFFFFFFFFFF00FLL) != 0)
            v44 = -1;
          else
            v44 = 4;
        }
        else
        {
          v44 = 3;
        }
      }
      else
      {
        v44 = 2;
      }
    }
    else
    {
      v44 = 1;
    }
  }
  else
  {
    v44 = 0;
  }
  *(_DWORD *)(a1 + 36) = v44;
LABEL_98:
  if (v94 == 10)
  {
    v67 = *(_QWORD *)(v11 + 80);
    v68 = *(_QWORD *)(v67 + 32);
    if ((_UNKNOWN *)v68 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v96, (const llvm::detail::DoubleAPFloat *)(v67 + 32));
    }
    else
    {
      v96 = *(_QWORD *)(v67 + 32);
      if ((*(_DWORD *)(v68 + 8) + 64) >= 0x80)
        v97 = (uint64_t *)operator new[]();
      v69 = *(_BYTE *)(v67 + 52);
      v70 = v69 & 7;
      v99 = v99 & 0xF0 | v69 & 0xF;
      v98 = *(_DWORD *)(v67 + 48);
      v72 = (v69 & 6) != 0 && v70 != 3;
      if (v70 == 1 || v72)
      {
        v73 = *(unsigned int *)(v96 + 8);
        if ((v73 - 64) <= 0xFFFFFF7F)
          v74 = v97;
        else
          v74 = (uint64_t *)&v97;
        v77 = *(uint64_t **)(v67 + 40);
        v76 = (uint64_t *)(v67 + 40);
        v75 = v77;
        if ((*(_DWORD *)(*(v76 - 1) + 8) - 64) >= 0xFFFFFF80)
          v75 = v76;
        if (v73 <= 0xFFFFFFBF)
        {
          v78 = (unint64_t)(v73 + 64) >> 6;
          do
          {
            v79 = *v75++;
            *v74++ = v79;
            --v78;
          }
          while (v78);
        }
      }
    }
    if ((_UNKNOWN *)v96 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v96, (unsigned int *)&v92);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v96, (unsigned int *)&v92);
    v58 = v93;
    v59 = v92;
    v80 = (unsigned int *)&v92;
    if (v93 >= 0x41)
      v80 = v92;
    v81 = *v80;
    v82 = (v81 >> 23);
    v63 = (v81 >> 19) & 0xF;
    v83 = v82 - 124;
    v84 = (v63 | 0x10u) >> (125 - v82);
    if (v82 > 0x7C)
      v84 = (v81 >> 19) & 0xF;
    else
      v83 = 0;
    if (v82 | v63)
    {
      v82 = v83;
      v63 = v84;
    }
    v66 = (16 * v82) | (v81 >> 31 << 7);
  }
  else
  {
    if (v94 != 9)
    {
      v86 = *(_QWORD *)(v11 + 80);
      v87 = (unint64_t *)(v86 + 24);
      if (*(_DWORD *)(v86 + 32) >= 0x41u)
        v87 = (unint64_t *)*v87;
      v85 = *v87;
      goto LABEL_166;
    }
    v45 = *(_QWORD *)(v11 + 80);
    v46 = *(_QWORD *)(v45 + 32);
    if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v96, (const llvm::detail::DoubleAPFloat *)(v45 + 32));
    }
    else
    {
      v96 = *(_QWORD *)(v45 + 32);
      if ((*(_DWORD *)(v46 + 8) + 64) >= 0x80)
        v97 = (uint64_t *)operator new[]();
      v47 = *(_BYTE *)(v45 + 52);
      v48 = v47 & 7;
      v99 = v99 & 0xF0 | v47 & 0xF;
      v98 = *(_DWORD *)(v45 + 48);
      v50 = (v47 & 6) != 0 && v48 != 3;
      if (v48 == 1 || v50)
      {
        v51 = *(unsigned int *)(v96 + 8);
        if ((v51 - 64) <= 0xFFFFFF7F)
          v52 = v97;
        else
          v52 = (uint64_t *)&v97;
        v55 = *(uint64_t **)(v45 + 40);
        v54 = (uint64_t *)(v45 + 40);
        v53 = v55;
        if ((*(_DWORD *)(*(v54 - 1) + 8) - 64) >= 0xFFFFFF80)
          v53 = v54;
        if (v51 <= 0xFFFFFFBF)
        {
          v56 = (unint64_t)(v51 + 64) >> 6;
          do
          {
            v57 = *v53++;
            *v52++ = v57;
            --v56;
          }
          while (v56);
        }
      }
    }
    if ((_UNKNOWN *)v96 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v96, (unsigned int *)&v92);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v96, (unsigned int *)&v92);
    v58 = v93;
    v59 = v92;
    v60 = (unsigned int *)&v92;
    if (v93 >= 0x41)
      v60 = v92;
    v61 = *v60;
    v62 = (v61 >> 10) & 0x1F;
    v63 = (v61 >> 6) & 0xF;
    v64 = v62 - 12;
    v65 = (v63 | 0x10u) >> (13 - ((v61 >> 10) & 0x1F));
    if (v62 > 0xC)
      v65 = (v61 >> 6) & 0xF;
    else
      v64 = 0;
    if (v62 | v63)
    {
      v62 = v64;
      v63 = v65;
    }
    v66 = (v61 >> 8) & 0x80 | (16 * v62);
  }
  v85 = v66 | v63;
  if (v58 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if ((_UNKNOWN *)v96 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v97);
  }
  else if ((*(_DWORD *)(v96 + 8) - 64) <= 0xFFFFFF7F && v97)
  {
    MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
  }
LABEL_166:
  v88 = v85 >> *(_DWORD *)(a1 + 36);
  v89 = *(unsigned __int8 **)(v11 + 64);
  v95 = v89;
  if (v89)
    llvm::MetadataTracking::track((uint64_t)&v95, v89, 2);
  LODWORD(v96) = *(_DWORD *)(v11 + 60);
  *(_QWORD *)a1 = sub_1C6366AB4(a2, v88, (const llvm::APInt *)&v95, (llvm *)4, 0, 1, 0);
  *(_DWORD *)(a1 + 8) = v90;
  if (v95)
    llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
  return a1;
}

BOOL sub_1C48DCF20(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6;
  uint64_t v9;
  int v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;

  v6 = a6;
  LODWORD(v9) = a3;
  v12 = *(unsigned __int16 *)(a2 + 24);
  if ((v12 - 198) <= 2)
  {
    v13 = *(uint64_t **)(a2 + 32);
    if (*(_BYTE *)(*(_QWORD *)(*v13 + 40) + 16 * *((unsigned int *)v13 + 2)) == 4)
    {
      if (v12 == 198)
        a6 |= 8u;
      return sub_1C48DD0B8(a1, *v13, v13[1], a4, a5, a6);
    }
  }
  if (v12 != 171)
    return 0;
  v15 = *(uint64_t **)(a2 + 32);
  v16 = v15[5];
  v17 = *(unsigned __int16 *)(v16 + 24);
  if (v17 != 35 && v17 != 11)
    return 0;
  v19 = *(_QWORD *)(v16 + 80);
  if (*(_DWORD *)(v19 + 32) > 0x40u)
  {
    v20 = **(_QWORD **)(v19 + 24);
    if (v20 >> 16)
      return 0;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 24);
    if (v20 >= 0x10000)
      return 0;
  }
  v21 = a2;
  if (v20 == 0xFFFF)
  {
    v21 = *v15;
    v9 = v15[1];
  }
  v22 = *(_QWORD *)(a1 + 296);
  v23 = *(unsigned __int8 **)(a2 + 64);
  v27 = v23;
  if (v23)
    llvm::MetadataTracking::track((uint64_t)&v27, v23, 2);
  v28 = *(_DWORD *)(a2 + 60);
  v24 = sub_1C636E638(v22, 1, (const llvm::APInt *)&v27, (llvm *)4, 0, v21, v9);
  v26 = v25;
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return sub_1C48DD0B8(a1, (uint64_t)v24, v26, a4, a5, v6);
}

BOOL sub_1C48DD0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v10;
  int v12;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::detail::DoubleAPFloat *v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  BOOL v42;
  _BOOL4 v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46[2];
  _BYTE v47[32];
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;

  v10 = a2;
  v56 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v50 = a3;
  sub_1C48DC710((uint64_t)v47, *(_QWORD *)(a1 + 296), a2, a3, 0, 0, 0);
  v12 = v48;
  if (v48 > 3)
    return v12 < 4;
  v14 = *(unsigned __int16 *)(v10 + 24);
  if (v14 != 36 && v14 != 12)
  {
    v36 = (uint64_t *)v10;
LABEL_38:
    if (v14 == 222)
    {
      v37 = v36[4];
      v38 = *(_DWORD *)(v37 + 8);
      v36 = *(uint64_t **)v37;
      v49 = (uint64_t)v36;
      LODWORD(v50) = v38;
      a6 ^= 2u;
      v14 = *((unsigned __int16 *)v36 + 12);
    }
    if (v14 == 223)
    {
      v39 = v36[4];
      v40 = *(_DWORD *)(v39 + 8);
      v10 = *(_QWORD *)v39;
      v49 = *(_QWORD *)v39;
      LODWORD(v50) = v40;
      a6 |= 4u;
    }
    else
    {
      v10 = (uint64_t)v36;
    }
    goto LABEL_43;
  }
  v16 = *(_QWORD *)(v10 + 80);
  v17 = *(_QWORD *)(v16 + 32);
  if ((_UNKNOWN *)v17 == &unk_1C866F1C0)
    v18 = *(_QWORD *)(v16 + 40);
  else
    v18 = v16 + 24;
  if ((*(_BYTE *)(v18 + 28) & 8) != 0 && sub_1C48DBE20(v10))
  {
    v19 = (llvm::detail::DoubleAPFloat *)&v52;
    if ((_UNKNOWN *)v17 == &unk_1C866F1C0)
    {
      v19 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v52, (const llvm::detail::DoubleAPFloat *)(v16 + 32));
    }
    else
    {
      v52 = v17;
      v20 = (*(_DWORD *)(v17 + 8) + 64);
      if (v20 >= 0x80)
      {
        v20 = operator new[]();
        v19 = (llvm::detail::DoubleAPFloat *)&v52;
        v53 = v20;
        v21 = v55 & 0xF0;
      }
      else
      {
        v21 = 0;
      }
      v22 = *(_BYTE *)(v16 + 52);
      v23 = v22 & 7;
      v55 = v22 & 0xF | v21;
      v54 = *(_DWORD *)(v16 + 48);
      v25 = (v22 & 6) != 0 && v23 != 3;
      if (v23 == 1 || v25)
      {
        v26 = *(unsigned int *)(v52 + 8);
        if ((v26 - 64) > 0xFFFFFF7F)
          v20 = (uint64_t)&v53;
        v29 = *(uint64_t **)(v16 + 40);
        v28 = (uint64_t *)(v16 + 40);
        v27 = v29;
        if ((*(_DWORD *)(*(v28 - 1) + 8) - 64) >= 0xFFFFFF80)
          v27 = v28;
        if (v26 <= 0xFFFFFFBF)
        {
          v30 = (unint64_t)(v26 + 64) >> 6;
          do
          {
            v31 = *v27++;
            *(_QWORD *)v20 = v31;
            v20 += 8;
            --v30;
          }
          while (v30);
        }
      }
    }
    if ((_UNKNOWN *)v52 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::changeSign(v19);
    else
      v55 ^= 8u;
    v32 = *(_QWORD *)(a1 + 296);
    v46[0] = 0;
    v46[1] = 0;
    v33 = *(_QWORD *)(v10 + 40) + 16 * a3;
    v36 = sub_1C6366D08(v32, (llvm::LLVMContext *)&v51, (const llvm::APFloat *)v46, *(llvm **)v33, *(_QWORD *)(v33 + 8), 0);
    v35 = v34;
    if (v46[0])
      llvm::MetadataTracking::untrack((uint64_t)v46, v46[0]);
    sub_1C612E190(*(_QWORD *)(a1 + 296), v10, a3, (uint64_t)v36);
    v49 = (uint64_t)v36;
    LODWORD(v50) = v35;
    a6 ^= 2u;
    if ((_UNKNOWN *)v52 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v53);
    }
    else if ((*(_DWORD *)(v52 + 8) - 64) <= 0xFFFFFF7F && v53)
    {
      MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
    }
    v14 = *((unsigned __int16 *)v36 + 12);
    goto LABEL_38;
  }
LABEL_43:
  v41 = *(_BYTE **)(a1 + 480);
  if (v41[319])
    v42 = v41[338] == 0;
  else
    v42 = 0;
  v43 = v42 || v41[326] != 0;
  sub_1C48DD498(v10, v50, (uint64_t)&v49, 1, 1, v43, *(_QWORD *)(a1 + 296));
  *(_QWORD *)a4 = v49;
  *(_DWORD *)(a4 + 8) = v50;
  v44 = *(_QWORD *)(a1 + 296);
  v51 = 0;
  v52 = 0;
  *(_QWORD *)a5 = sub_1C6366AB4(v44, a6, (const llvm::APInt *)&v51, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v45;
  if (v51)
    llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
  return v12 < 4;
}

uint64_t sub_1C48DD498(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  int v9;
  uint64_t v10;
  int v11;
  llvm **v13;
  llvm *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  llvm **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  __int128 v46;

  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  if (!a6)
    return result;
  v9 = *(unsigned __int16 *)(result + 24);
  if (v9 == 395)
  {
    v10 = **(_QWORD **)(result + 32);
    v11 = *(unsigned __int16 *)(v10 + 24);
    if (v11 != 35 && v11 != 11)
      return result;
    v13 = (llvm **)(*(_QWORD *)(result + 40) + 16 * a2);
    v14 = *v13;
    v15 = (uint64_t)v13[1];
    v16 = *(_QWORD *)(v10 + 80);
    v17 = (_QWORD *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = *v17 >> 1;
    *(_QWORD *)&v46 = v14;
    *((_QWORD *)&v46 + 1) = v15;
    goto LABEL_11;
  }
  if (v9 != 201 || a5 == 0)
  {
    if (v9 == 212 && a4 != 0)
    {
      v30 = *(unsigned int **)(result + 32);
      v31 = *(_QWORD *)v30;
      if (*(_WORD *)(*(_QWORD *)v30 + 24) == 395)
      {
        v32 = **(_QWORD **)(v31 + 32);
        v33 = *(unsigned __int16 *)(v32 + 24);
        if (v33 == 35 || v33 == 11)
        {
          v35 = (llvm **)(*(_QWORD *)(result + 40) + 16 * a2);
          v14 = *v35;
          v15 = (uint64_t)v35[1];
          v36 = *(_QWORD *)(v32 + 80);
          v37 = (_QWORD *)(v36 + 24);
          if (*(_DWORD *)(v36 + 32) >= 0x41u)
            v37 = (_QWORD *)*v37;
          v18 = *v37 >> 1;
          v46 = *(_OWORD *)(*(_QWORD *)(v31 + 40) + 16 * v30[2]);
LABEL_11:
          v19 = sub_1C47C1C70((unsigned __int8 *)&v46);
          if ((_DWORD)v20 == 1)
          {
            v45 = v19;
            v19 = v45;
          }
          HIDWORD(v21) = v19;
          LODWORD(v21) = v19 - 2;
          v22 = dword_1C6606BC0[(int)(v21 >> 1)];
          v23 = a7;
          v24 = v14;
          v25 = v15;
          v26 = v18;
LABEL_14:
          result = sub_1C5D410E8(v23, 64, v24, v25, v26, v22);
          *(_QWORD *)a3 = result;
          *(_DWORD *)(a3 + 8) = v27;
        }
      }
    }
  }
  else
  {
    v38 = *(_QWORD *)(result + 40) + 16 * a2;
    v24 = *(llvm **)v38;
    if (*(_QWORD *)v38 == 4)
    {
      v39 = **(_QWORD **)(result + 32);
      if (*(_WORD *)(v39 + 24) == 395)
      {
        v40 = **(_QWORD **)(v39 + 32);
        v41 = *(unsigned __int16 *)(v40 + 24);
        if (v41 == 35 || v41 == 11)
        {
          v25 = *(_QWORD *)(v38 + 8);
          v43 = *(_QWORD *)(v40 + 80);
          v44 = (_QWORD *)(v43 + 24);
          if (*(_DWORD *)(v43 + 32) >= 0x41u)
            v44 = (_QWORD *)*v44;
          v26 = *v44 >> 1;
          v23 = a7;
          v22 = 1;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C48DD690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  uint64_t *v7;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) > 2)
    return 0;
  v7 = *(uint64_t **)(a2 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) != 5)
    return 0;
  if (v6 == 198)
    a6 |= 8u;
  return sub_1C48DD0B8(a1, *v7, v7[1], a4, a5, a6);
}

uint64_t sub_1C48DD6DC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, __int128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v16 = *a4;
  v30 = 0;
  v31 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v30)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a5;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v28;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v26;
  v27 = *a6;
  if (v26 >= v25)
  {
    v29 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

_QWORD *sub_1C48DD8B0(uint64_t a1, unint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  uint64_t ExtendedSizeInBits;
  const char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  llvm *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[11];

  v59[10] = *MEMORY[0x1E0C80C00];
  v53 = a4;
  v54 = a5;
  if ((_BYTE)a4)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v53);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v53);
  v10 = ExtendedSizeInBits;
  if ((_DWORD)v9 == 1)
  if (v10 == 64)
  {
    v16 = a2;
    v17 = *(unsigned __int8 **)a3;
    v51 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v51, v17, 2);
    v18 = HIDWORD(a2);
    v52 = *(_DWORD *)(a3 + 8);
    v19 = sub_1C48DDCD0(a1, v16, (uint64_t)&v51, (llvm *)5, 0);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    v20 = *(unsigned __int8 **)a3;
    v49 = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v49, v20, 2);
    v50 = *(_DWORD *)(a3 + 8);
    v21 = sub_1C48DDCD0(a1, v18, (uint64_t)&v49, (llvm *)5, 0);
    if (v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
    v22 = *(_QWORD *)(a1 + 296);
    v23 = *(unsigned __int8 **)a3;
    v47 = v23;
    if (v23)
      llvm::MetadataTracking::track((uint64_t)&v47, v23, 2);
    v48 = *(_DWORD *)(a3 + 8);
    v56 = 0;
    v57 = v59;
    v58 = 0x500000000;
    v55 = 0;
    v24 = sub_1C6366AB4(v22, 17, (const llvm::APInt *)&v55, (llvm *)6, 0, 1, 0);
    v26 = v58;
    if (v58 >= HIDWORD(v58))
    {
      v42 = v25;
      v43 = v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 16);
      v25 = v42;
      v24 = v43;
      v26 = v58;
    }
    v27 = (char *)v57 + 16 * v26;
    *v27 = v24;
    v27[1] = v25;
    v28 = v58 + 1;
    LODWORD(v58) = v58 + 1;
    if (v55)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      v28 = v58;
    }
    if (v28 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v28 + 1, 16);
      v28 = v58;
    }
    v29 = (char *)v57 + 16 * v28;
    *v29 = v19;
    v29[1] = 0;
    LODWORD(v58) = v58 + 1;
    v55 = 0;
    v56 = 0;
    v31 = sub_1C6366AB4(v22, 25, (const llvm::APInt *)&v55, (llvm *)6, 0, 1, 0);
    v32 = v58;
    if (v58 >= HIDWORD(v58))
    {
      v44 = v30;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 16);
      v30 = v44;
      v32 = v58;
    }
    v33 = (char *)v57 + 16 * v32;
    *v33 = v31;
    v33[1] = v30;
    v34 = v58 + 1;
    LODWORD(v58) = v58 + 1;
    if (v55)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      v34 = v58;
    }
    if (v34 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v34 + 1, 16);
      v34 = v58;
    }
    v35 = (char *)v57 + 16 * v34;
    *v35 = v21;
    v35[1] = 0;
    LODWORD(v58) = v58 + 1;
    v55 = 0;
    v56 = 0;
    v36 = sub_1C6366AB4(v22, 26, (const llvm::APInt *)&v55, (llvm *)6, 0, 1, 0);
    v38 = v37;
    v39 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 16);
      v39 = v58;
    }
    v40 = (char *)v57 + 16 * v39;
    *v40 = v36;
    v40[1] = v38;
    v41 = v58 + 1;
    LODWORD(v58) = v58 + 1;
    if (v55)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      v41 = v58;
    }
    v12 = sub_1C636E56C(v22, 18, (uint64_t)&v47, (llvm *)6, 0, (uint64_t *)v57, v41);
    if (v57 != v59)
      free(v57);
    v13 = v47;
    if (v47)
    {
      v14 = &v47;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(unsigned __int8 **)a3;
    v45 = v11;
    if (v11)
      llvm::MetadataTracking::track((uint64_t)&v45, v11, 2);
    v46 = *(_DWORD *)(a3 + 8);
    v12 = sub_1C48DDCD0(a1, a2, (uint64_t)&v45, v53, v54);
    v13 = v45;
    if (v45)
    {
      v14 = &v45;
LABEL_11:
      llvm::MetadataTracking::untrack((uint64_t)v14, v13);
    }
  }
  return v12;
}

_QWORD *sub_1C48DDCD0(uint64_t a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;

  v18 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318))
    v9 = 4;
  else
    v9 = 3;
  v10 = sub_1C613A34C(a4, v9);
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(unsigned __int8 **)a3;
  v16 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v16, v12, 2);
  v17 = *(_DWORD *)(a3 + 8);
  v15 = 0;
  v13 = sub_1C613B2C0(v11, v10, (uint64_t)&v16, a4, a5, &v15, &v18);
  if (v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
  return v13;
}

uint64_t sub_1C48DDD94(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v2 = *(_QWORD *)(a1 + 40 * a2);
  v3 = *(unsigned __int16 *)(v2 + 24);
  if (v3 == 215)
    v2 = **(_QWORD **)(v2 + 32);
  if (*(unsigned __int16 *)(v2 + 24) - 437 > 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 40) + 24);
    v6 = v4 == 35 || v4 == 11;
  }
  return v6 | ((v3 == 215) << 8);
}

_QWORD *sub_1C48DDDFC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::detail::DoubleAPFloat *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  __int128 v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  __int128 v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  __int128 v79;
  unsigned int v80;
  unsigned int v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  unsigned int v85;
  uint64_t v86;
  __int128 v87;
  unsigned int v88;
  uint64_t v89;
  llvm::detail::DoubleAPFloat *v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  unsigned int v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  BOOL v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v134;
  int v135;
  _QWORD *v136;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unsigned __int8 *v151;
  int v152;
  __int128 v153;
  unsigned __int8 *v154;
  int v155;
  __int128 v156;
  int v157;
  int v158;
  __int128 v159;
  int v160;
  int v161;
  __int128 v162;
  int v163;
  int v164;
  __int128 v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  int v169;
  __int128 v170;
  int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 **)(a2 + 64);
  v168 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v168, v12, 2);
  v169 = *(_DWORD *)(a2 + 60);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(v13 + 40 * a3);
  v149 = a2;
  v147 = a5;
  if (a6)
    v14 = **(_QWORD **)(v14 + 32);
  v15 = (uint64_t *)(v13 + 40 * a4);
  v16 = *v15;
  v17 = v15[1];
  if (**(_BYTE **)(*v15 + 40) == 10 && *(_WORD *)(v16 + 24) == 215)
  {
    v18 = *(_QWORD *)(v16 + 32);
    v16 = *(_QWORD *)v18;
    LODWORD(v17) = *(_DWORD *)(v18 + 8);
  }
  v20 = *(_QWORD *)(v13 + 80);
  v19 = *(_QWORD *)(v13 + 88);
  if (**(_BYTE **)(v20 + 40) == 10 && *(_WORD *)(v20 + 24) == 215)
  {
    v21 = *(_QWORD *)(v20 + 32);
    v20 = *(_QWORD *)v21;
    LODWORD(v19) = *(_DWORD *)(v21 + 8);
  }
  v22 = *(uint64_t **)(v14 + 32);
  v23 = *(_QWORD *)(v22[5] + 80);
  v24 = (_QWORD *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u)
    v24 = (_QWORD *)*v24;
  v26 = *v22;
  v25 = v22[1];
  v150 = (_QWORD *)*v24;
  v27 = v22[11];
  v28 = *(_QWORD *)(v22[15] + 80);
  v29 = (unsigned int *)(v28 + 24);
  if (*(_DWORD *)(v28 + 32) >= 0x41u)
    v29 = *(unsigned int **)v29;
  v138 = v19;
  v148 = v14;
  v30 = *(unsigned __int16 *)(v14 + 24);
  v31 = v22[10];
  v32 = *v29;
  v146 = v30;
  if (v32 == 5)
  {
    v172 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v173 = v33;
    v174 = v26;
    v175 = v25;
    v176 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v177 = v34;
    v178 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 16, (const llvm::APInt *)&v168, (llvm *)4, 0, 1, 0);
    v179 = v35;
    v180 = v31;
    v181 = v27;
    v182 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v183 = v36;
    v37 = *(_QWORD *)(v26 + 40);
    v38 = *(llvm **)v37;
    v39 = *(_QWORD *)(v37 + 8);
    v40 = *(_QWORD *)v37;
    if (v30 == 437)
      v41 = 5708;
    else
      v41 = 5468;
    if (v30 == 437)
      v42 = 5638;
    else
      v42 = 5398;
    if (v40 == 9)
      v43 = v41;
    else
      v43 = v42;
    v44 = sub_1C636E56C(*(_QWORD *)(a1 + 296), v43, (uint64_t)&v168, v38, v39, (uint64_t *)&v172, 6);
    if ((v150 & 0xFFFFFFF0) != 0)
    {
      LODWORD(v25) = 0;
      LODWORD(v150) = (_DWORD)v150 - 16;
      v26 = (uint64_t)v44;
    }
    else
    {
      LODWORD(v27) = 0;
      v31 = (uint64_t)v44;
    }
    LOBYTE(v32) = 4;
  }
  sub_1C48DC710((uint64_t)&v165, *(_QWORD *)(a1 + 296), v26, v25, 0, 0, 0);
  sub_1C48DC710((uint64_t)&v162, *(_QWORD *)(a1 + 296), v16, v17, 0, 0, 0);
  sub_1C48DC710((uint64_t)&v159, *(_QWORD *)(a1 + 296), v20, v138, 0, 0, 0);
  sub_1C48DC710((uint64_t)&v156, *(_QWORD *)(a1 + 296), v31, v27, 0, 0, 0);
  v172 = &v174;
  v173 = 0x800000000;
  v45 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
  v47 = v46;
  v48 = v173;
  if (v173 >= HIDWORD(v173))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
    v48 = v173;
  }
  v49 = &v172[2 * v48];
  *v49 = (uint64_t)v45;
  v49[1] = v47;
  LODWORD(v173) = v173 + 1;
  v50 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v32 & 7, (const llvm::APInt *)&v168, (llvm *)6, 0, 1, 0);
  v52 = v51;
  v53 = v173;
  if (v173 >= HIDWORD(v173))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
    v53 = v173;
  }
  v54 = &v172[2 * v53];
  *v54 = (uint64_t)v50;
  v54[1] = v52;
  v55 = (v173 + 1);
  LODWORD(v173) = v173 + 1;
  if ((v166 & 0xFFFFFFFD) == 5)
  {
    v56 = *(_QWORD *)(v26 + 80);
    v58 = *(void **)(v56 + 32);
    v57 = (llvm::detail::DoubleAPFloat *)(v56 + 32);
    if (v58 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v57, (unsigned int *)&v170);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v57, (unsigned int *)&v170);
    v59 = (unint64_t *)&v170;
    if (DWORD2(v170) >= 0x41)
      v59 = (unint64_t *)v170;
    v60 = *v59;
    v154 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v154, v168, 2);
    v155 = v169;
    v61 = sub_1C48DD8B0(a1, v60, (uint64_t)&v154, **(llvm ***)(v26 + 40), *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8));
    if (v154)
      llvm::MetadataTracking::untrack((uint64_t)&v154, v154);
    v62 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v62 = v173;
    }
    v63 = &v172[2 * v62];
    *v63 = (uint64_t)v61;
    v63[1] = 0;
    LODWORD(v173) = v173 + 1;
    v64 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v66 = v65;
    v67 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v67 = v173;
    }
    v68 = &v172[2 * v67];
    *v68 = (uint64_t)v64;
    v68[1] = v66;
    LODWORD(v173) = v173 + 1;
    if (DWORD2(v170) >= 0x41 && (_QWORD)v170)
      MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
  }
  else
  {
    v69 = v165;
    if (v55 >= HIDWORD(v173))
    {
      v140 = v165;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v55 + 1, 16);
      v69 = v140;
      LODWORD(v55) = v173;
    }
    *(_OWORD *)&v172[2 * v55] = v69;
    LODWORD(v173) = v173 + 1;
    v70 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v72 = v71;
    v73 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v73 = v173;
    }
    v74 = &v172[2 * v73];
    *v74 = (uint64_t)v70;
    v74[1] = v72;
    LODWORD(v173) = v173 + 1;
  }
  if ((v163 & 0xFFFFFFFD) == 5)
  {
    v75 = v162;
    v76 = v173;
    v77 = HIDWORD(v173);
  }
  else
  {
    *(_QWORD *)&v170 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v170 + 1) = v78;
    v153 = v162;
    if (*(_BYTE *)(*(_QWORD *)(v162 + 40) + 16 * DWORD2(v162)) == 10)
      sub_1C48DD0B8(a1, v162, *((uint64_t *)&v162 + 1), (uint64_t)&v153, (uint64_t)&v170, 0);
    else
      sub_1C48E0130(a1, v162, *((uint64_t *)&v162 + 1), (uint64_t)&v153, (uint64_t)&v170);
    v79 = v153;
    v80 = v173;
    if (v173 >= HIDWORD(v173))
    {
      v141 = v153;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v79 = v141;
      v80 = v173;
    }
    *(_OWORD *)&v172[2 * v80] = v79;
    v77 = HIDWORD(v173);
    v76 = (v173 + 1);
    LODWORD(v173) = v173 + 1;
    v75 = v170;
  }
  if (v76 >= v77)
  {
    v139 = v75;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v76 + 1, 16);
    v75 = v139;
    LODWORD(v76) = v173;
  }
  *(_OWORD *)&v172[2 * v76] = v75;
  v81 = v173 + 1;
  LODWORD(v173) = v173 + 1;
  if ((v160 & 0xFFFFFFFD) == 5)
  {
    v82 = v159;
    if (v81 >= HIDWORD(v173))
    {
      v142 = v159;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v81 + 1, 16);
      v82 = v142;
      v81 = v173;
    }
    *(_OWORD *)&v172[2 * v81] = v82;
  }
  else
  {
    *(_QWORD *)&v170 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v170 + 1) = v83;
    v153 = v159;
    if (*(_BYTE *)(*(_QWORD *)(v159 + 40) + 16 * DWORD2(v159)) == 10)
      sub_1C48DD0B8(a1, v159, *((uint64_t *)&v159 + 1), (uint64_t)&v153, (uint64_t)&v170, 0);
    else
      sub_1C48E0130(a1, v159, *((uint64_t *)&v159 + 1), (uint64_t)&v153, (uint64_t)&v170);
    v84 = v153;
    v85 = v173;
    if (v173 >= HIDWORD(v173))
    {
      v143 = v153;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v84 = v143;
      v85 = v173;
    }
    *(_OWORD *)&v172[2 * v85] = v84;
    v86 = (v173 + 1);
    LODWORD(v173) = v86;
    v87 = v170;
    if (v86 >= HIDWORD(v173))
    {
      v144 = v170;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v86 + 1, 16);
      v87 = v144;
      LODWORD(v86) = v173;
    }
    *(_OWORD *)&v172[2 * v86] = v87;
  }
  v88 = v173 + 1;
  LODWORD(v173) = v173 + 1;
  if ((v157 & 0xFFFFFFFD) == 5)
  {
    v89 = *(_QWORD *)(v31 + 80);
    v91 = *(void **)(v89 + 32);
    v90 = (llvm::detail::DoubleAPFloat *)(v89 + 32);
    if (v91 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v90, (unsigned int *)&v170);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v90, (unsigned int *)&v170);
    v92 = (unint64_t *)&v170;
    if (DWORD2(v170) >= 0x41)
      v92 = (unint64_t *)v170;
    v93 = *v92;
    v151 = v168;
    v94 = v149;
    v95 = v147;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v151, v168, 2);
    v152 = v169;
    v96 = sub_1C48DD8B0(a1, v93, (uint64_t)&v151, **(llvm ***)(v31 + 40), *(_QWORD *)(*(_QWORD *)(v31 + 40) + 8));
    if (v151)
      llvm::MetadataTracking::untrack((uint64_t)&v151, v151);
    v97 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v97 = v173;
    }
    v98 = &v172[2 * v97];
    *v98 = (uint64_t)v96;
    v98[1] = 0;
    LODWORD(v173) = v173 + 1;
    v99 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v101 = v100;
    v102 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v102 = v173;
    }
    v103 = &v172[2 * v102];
    *v103 = (uint64_t)v99;
    v103[1] = v101;
    LODWORD(v173) = v173 + 1;
    if (DWORD2(v170) >= 0x41 && (_QWORD)v170)
      MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
  }
  else
  {
    v104 = v156;
    if (v88 >= HIDWORD(v173))
    {
      v145 = v156;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v88 + 1, 16);
      v104 = v145;
      v88 = v173;
    }
    v94 = v149;
    v95 = v147;
    *(_OWORD *)&v172[2 * v88] = v104;
    LODWORD(v173) = v173 + 1;
    v105 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v168, (llvm *)5, 0, 1, 0);
    v107 = v106;
    v108 = v173;
    if (v173 >= HIDWORD(v173))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
      v108 = v173;
    }
    v109 = &v172[2 * v108];
    *v109 = (uint64_t)v105;
    v109[1] = v107;
    LODWORD(v173) = v173 + 1;
  }
  v110 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v150, (const llvm::APInt *)&v168, (llvm *)4, 0, 1, 0);
  v112 = v111;
  v113 = v173;
  if (v173 >= HIDWORD(v173))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, (uint64_t)&v174, v173 + 1, 16);
    v113 = v173;
  }
  v114 = &v172[2 * v113];
  *v114 = (uint64_t)v110;
  v114[1] = v112;
  v115 = (v173 + 1);
  LODWORD(v173) = v173 + 1;
  v116 = *(unsigned __int8 **)(v94 + 40);
  v117 = *v116;
  if (v117 == 9)
  {
    v118 = v146 == 437;
    if (v95)
    {
      v119 = 9;
      v120 = 11;
    }
    else
    {
      v119 = 8;
      v120 = 10;
    }
  }
  else
  {
    v118 = v146 == 437;
    if (v95)
    {
      v119 = 23;
      v120 = 25;
    }
    else
    {
      v119 = 22;
      v120 = 24;
    }
  }
  if (v118)
    v121 = v120;
  else
    v121 = v119;
  v122 = 5;
  if (v117 == 10)
    v123 = 5;
  else
    v123 = 2;
  LODWORD(v170) = v123;
  if ((v166 & 0xFFFFFFFD) == 5)
  {
    v124 = v148;
    v125 = **(_BYTE **)(v148 + 40) == 9;
  }
  else
  {
    v124 = v148;
    if ((v166 & 0xFFFFFFFC) == 4)
    {
      v126 = 1;
      goto LABEL_123;
    }
    if (v167 == 32)
      v122 = 5;
    else
      v122 = 10;
    v125 = v167 == 16;
  }
  if (v125)
    v126 = 2;
  else
    v126 = v122;
LABEL_123:
  DWORD1(v170) = v126;
  if ((v163 & 0xFFFFFFFC) == 4)
  {
    v127 = 1;
  }
  else
  {
    if (v164 == 32)
      v128 = 5;
    else
      v128 = 10;
    if (v164 == 16)
      v127 = 2;
    else
      v127 = v128;
  }
  DWORD2(v170) = v127;
  if ((v160 & 0xFFFFFFFC) == 4)
  {
    v129 = 1;
  }
  else
  {
    if (v161 == 32)
      v130 = 5;
    else
      v130 = 10;
    if (v161 == 16)
      v129 = 2;
    else
      v129 = v130;
  }
  HIDWORD(v170) = v129;
  if ((v157 & 0xFFFFFFFD) == 5)
  {
    if (**(_BYTE **)(v124 + 40) == 9)
      v131 = 2;
    else
      v131 = 5;
  }
  else if ((v157 & 0xFFFFFFFC) == 4)
  {
    v131 = 1;
  }
  else
  {
    if (v158 == 32)
      v132 = 5;
    else
      v132 = 10;
    if (v158 == 16)
      v131 = 2;
    else
      v131 = v132;
  }
  v171 = v131;
  if (v123 == v129 || v129 == 1)
    v134 = 5;
  else
    v134 = 4;
  v135 = sub_1C4884024(v121, &v170, v134, *(_BYTE **)(a1 + 480));
  v136 = sub_1C5D61678(*(_QWORD *)(a1 + 296), v135, (uint64_t)&v168, (uint64_t)v116, *(unsigned __int16 *)(v94 + 58), v172, v115);
  if (v172 != &v174)
    free(v172);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, v168);
  return v136;
}

_QWORD *sub_1C48DEB30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  __int128 v28;
  uint64_t v29[2];
  unsigned __int8 *v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  v32 = *(_OWORD *)(v6 + 40);
  v9 = *(unsigned __int8 **)(a2 + 64);
  v30 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v30, v9, 2);
  v31 = *(_DWORD *)(a2 + 60);
  v10 = v32;
  if (*(_WORD *)(v32 + 24) == 15)
  {
    *(_QWORD *)&v32 = v7;
    DWORD2(v32) = v8;
    v11 = v7;
  }
  else
  {
    v11 = v32;
    v10 = v7;
  }
  if (*(_WORD *)(v10 + 24) != 15)
    goto LABEL_7;
  v29[0] = sub_1C5D406AC(*(_QWORD *)(a1 + 296), *(_DWORD *)(v10 + 76), (llvm *)5, 0, 1);
  v29[1] = v14;
  *(_QWORD *)&v28 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), 0, (const llvm::APInt *)&v30, (llvm *)5, 0, 1, 0);
  *((_QWORD *)&v28 + 1) = v15;
  sub_1C48DC710((uint64_t)&v33, *(_QWORD *)(a1 + 296), v11, SDWORD2(v32), 0, 1, 0);
  if (sub_1C48DCF20(a1, v33, v34, (uint64_t)&v32, (uint64_t)&v28, v35 << 6))
  {
    v16 = 250;
  }
  else
  {
    sub_1C48DC710((uint64_t)&v33, *(_QWORD *)(a1 + 296), v32, SDWORD2(v32), 0, 1, 0);
    sub_1C48DD0B8(a1, v33, v34, (uint64_t)&v32, (uint64_t)&v28, v35 << 6);
    v16 = 241;
  }
  v17 = sub_1C4885524(35, v16, *(_BYTE **)(a1 + 480));
  if (a3)
  {
    v18 = *(_QWORD *)(v28 + 80);
    v19 = (_QWORD *)(v18 + 24);
    if (*(_DWORD *)(v18 + 32) >= 0x41u)
      v19 = (_QWORD *)*v19;
    v20 = *(_DWORD *)v19;
    v21 = (v20 >> 6) & 7;
    v22 = v21 >= a3;
    v23 = v21 - a3;
    if (!v22)
    {
LABEL_7:
      v12 = 0;
      goto LABEL_8;
    }
    *(_QWORD *)&v28 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v20 & 0xFFFFFE3F | (v23 << 6), (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
    DWORD2(v28) = v24;
  }
  v25 = *(_QWORD *)(a1 + 296);
  v26 = v30;
  if (v30)
    llvm::MetadataTracking::track((uint64_t)&v26, v30, 2);
  v27 = v31;
  LODWORD(v33) = a3 << 6;
  v12 = sub_1C613E834(v25, v17, (uint64_t)&v26, 0, v29, (unsigned int *)&v33, &v32, &v28);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
LABEL_8:
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return v12;
}

uint64_t sub_1C48DED80(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;

  v3 = a3[2];
  if (v3 != 1)
    __asm { BR              X10 }
  return **(_QWORD **)a3;
}

uint64_t sub_1C48DF024(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;

  if ((*(_DWORD *)(result + 32) | 2) != 2)
    return result;
  v2 = (unsigned int *)result;
  v7 = *(_OWORD *)result;
  if (!a2)
  {
    sub_1C485C2F0();
LABEL_17:
    v6 = result;
    result = v6;
LABEL_14:
    v2[10] = result;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, &v7, result, result + 16);
  v2[8] = 1;
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 24);
  if (!*(_QWORD *)v2 || v4 != 45)
  {
    if (v4 == 35)
      v2[8] = 6;
    v7 = *(_OWORD *)(*(_QWORD *)(v3 + 40) + 16 * v2[2]);
    if ((_BYTE)v7)
      result = sub_1C47A8C74((unsigned __int8 *)&v7);
    else
      result = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v7);
    if ((_DWORD)v5 != 1)
      goto LABEL_14;
    goto LABEL_17;
  }
  if (*(_DWORD *)(v3 + 80) == 64)
    v2[8] = 3;
  v2[10] = dword_1C6606C50[*(int *)(v3 + 76) - 1];
  return result;
}

_QWORD *sub_1C48DF138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  __int128 v64;
  uint64_t v65[2];

  v8 = a2;
  v9 = a1;
  v65[0] = a2;
  v65[1] = a3;
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 == 11 || v10 == 35)
  {
    v11 = *(unsigned __int16 *)(a4 + 24);
    if (v11 == 35 || v11 == 11)
    {
      v13 = *(_QWORD *)(a2 + 80);
      v14 = (unsigned __int8 *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = *(unsigned __int8 **)v14;
      v15 = *v14;
      v16 = *(_QWORD *)(a4 + 80);
      v17 = (_QWORD *)(v16 + 24);
      if (*(_DWORD *)(v16 + 32) >= 0x41u)
        v17 = (_QWORD *)*v17;
      v18 = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)v17 << 8);
      v19 = *(unsigned __int8 **)a6;
      v62 = v19;
      if (v19)
        llvm::MetadataTracking::track((uint64_t)&v62, v19, 2);
      v63 = *((_DWORD *)a6 + 2);
      v20 = sub_1C48DD8B0(v9, v18, (uint64_t)&v62, (llvm *)0x1B, 0);
      v21 = v62;
      if (!v62)
        return v20;
      v22 = &v62;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = *(unsigned __int16 *)(a4 + 24);
  }
  if ((v11 & 0xFFFE) != 0x1A6)
  {
    if ((v10 & 0xFFFE) != 0x1A6)
    {
      if (v11 == 51)
      {
        v34 = *(_QWORD *)(a1 + 296);
        v35 = *(_QWORD *)(v34 + 832);
        if (v35)
          v36 = *(_WORD *)(v35 + 8);
        else
          v36 = 0;
        v20 = sub_1C5D52060(v34, 216, a6, (llvm *)0x1B, 0, a2, a3, v36);
        sub_1C612E190(*(_QWORD *)(v9 + 296), v8, a3, (uint64_t)v20);
        return v20;
      }
      v42 = *(_QWORD *)(a1 + 480);
      v43 = *(unsigned __int8 *)(v42 + 318);
      v44 = *(_BYTE *)(v42 + 318) == 0;
      if (v10 == 51)
      {
        v45 = *(_QWORD *)(a1 + 296);
        if (v43)
          v46 = 6197;
        else
          v46 = 6251;
        v47 = *(unsigned __int8 **)a6;
        v60 = v47;
        if (v47)
          llvm::MetadataTracking::track((uint64_t)&v60, v47, 2);
        v61 = *((_DWORD *)a6 + 2);
        v59 = 0;
        v57 = 8;
        v58 = 8;
        v20 = sub_1C613EDCC(v45, v46, (uint64_t)&v60, 0x1Bu, 0, (int *)&v59 + 1, &v64, (unsigned int *)&v59, &v58, &v57);
        v21 = v60;
        if (!v60)
          return v20;
        v22 = &v60;
        goto LABEL_16;
      }
      goto LABEL_65;
    }
    if (v11 != 53)
    {
      if (v11 == 51)
      {
        v24 = 0;
        v25 = 0;
LABEL_35:
        v26 = 0;
        return sub_1C48DFBE8(a1, a2, (llvm *)0x1B, 0, (uint64_t)v24, v25, v26);
      }
      goto LABEL_64;
    }
    v27 = *(uint64_t **)(a4 + 32);
    v28 = *(unsigned __int8 *)(*(_QWORD *)(*v27 + 40) + 16 * *((unsigned int *)v27 + 2));
    if (v28 == 27)
    {
      v29 = v27[5];
      v30 = *(unsigned __int16 *)(v29 + 24);
      if (v30 == 35 || v30 == 11)
      {
        v32 = *(_QWORD *)(v29 + 80);
        v33 = (_QWORD *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u)
          v33 = (_QWORD *)*v33;
        if (*v33 == 1)
        {
          v25 = v27[1];
          v24 = (_QWORD *)*v27;
          goto LABEL_35;
        }
      }
      goto LABEL_64;
    }
    if (v28 != 28
      || ((v37 = v27[5], v38 = *(unsigned __int16 *)(v37 + 24), v38 != 35) ? (v39 = v38 == 11) : (v39 = 1), !v39))
    {
LABEL_64:
      v44 = *(_BYTE *)(*(_QWORD *)(a1 + 480) + 318) == 0;
LABEL_65:
      v52 = *(_QWORD *)(a1 + 296);
      if (v44)
        v53 = 6269;
      else
        v53 = 6215;
      v54 = *(unsigned __int8 **)a6;
      v55 = v54;
      if (v54)
        llvm::MetadataTracking::track((uint64_t)&v55, v54, 2);
      v56 = *((_DWORD *)a6 + 2);
      v59 = 0;
      v57 = 8;
      v58 = 8;
      v20 = sub_1C613BA74(v52, v53, (uint64_t)&v55, 0x1Bu, 0, v65, (unsigned int *)&v59 + 1, &v64, (unsigned int *)&v59, &v58, &v57);
      v21 = v55;
      if (!v55)
        return v20;
      v22 = &v55;
LABEL_16:
      llvm::MetadataTracking::untrack((uint64_t)v22, v21);
      return v20;
    }
    v40 = *(_QWORD *)(v37 + 80);
    if (*(_DWORD *)(v40 + 32) > 0x40u)
      v41 = **(_QWORD **)(v40 + 24);
    else
      v41 = *(_QWORD *)(v40 + 24);
    if (v41 == 1)
    {
      v48 = *(_QWORD *)(a1 + 296);
      v49 = v27[1];
      v50 = 1;
    }
    else
    {
      if (v41 != 3)
        goto LABEL_64;
      v48 = *(_QWORD *)(a1 + 296);
      v49 = v27[1];
      v50 = 2;
    }
    v24 = sub_1C636E638(v48, v50, a6, (llvm *)0x1B, 0, *v27, v49);
    v25 = v51;
    a1 = v9;
    a2 = v8;
    goto LABEL_35;
  }
  a2 = a4;
  v24 = (_QWORD *)v8;
  v25 = a3;
  v26 = 1;
  return sub_1C48DFBE8(a1, a2, (llvm *)0x1B, 0, (uint64_t)v24, v25, v26);
}

uint64_t sub_1C48DF544(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C48DF568 + 4 * byte_1C65ED8A2[a1 - 3]))(4);
}

uint64_t sub_1C48DF568()
{
  return 32;
}

uint64_t sub_1C48DF570()
{
  return 11;
}

uint64_t sub_1C48DF5B0()
{
  return 16;
}

uint64_t sub_1C48DF5B8()
{
  return 5;
}

uint64_t sub_1C48DF5C0()
{
  return 10;
}

uint64_t sub_1C48DF5C8()
{
  return 3;
}

uint64_t sub_1C48DF5F0(uint64_t a1, int a2)
{
  if ((a2 - 6) >= 0xA)
    return 2;
  else
    return 5;
}

_QWORD *sub_1C48DF640(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned __int8 *v25;
  int v26;
  __int128 v27[2];
  int v28;
  __int128 v29[2];
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;

  v8 = *(uint64_t **)(a2 + 32);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[5];
  v12 = v8[6];
  v13 = *(unsigned __int8 **)(a2 + 64);
  v32 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v32, v13, 2);
  v33 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v9 + 24) == 215)
  {
    v14 = *(_QWORD *)(v9 + 32);
    v9 = *(_QWORD *)v14;
    LODWORD(v10) = *(_DWORD *)(v14 + 8);
  }
  sub_1C48DC710((uint64_t)v29, *(_QWORD *)(a1 + 296), v9, v10, 0, 0, 1);
  sub_1C48DC710((uint64_t)v27, *(_QWORD *)(a1 + 296), v11, v12, 0, 0, 1);
  v15 = operator new(0x28uLL);
  *v15 = &off_1E7FA1C00;
  v15[1] = sub_1C48DD0B8;
  v15[2] = 0;
  v15[3] = a1;
  *((_DWORD *)v15 + 8) = 0;
  sub_1C48DF024((uint64_t)v29, (uint64_t)v15);
  (*(void (**)(_QWORD *))(*v15 + 40))(v15);
  v16 = operator new(0x28uLL);
  *v16 = &off_1E7FA1C00;
  v16[1] = sub_1C48DD0B8;
  v16[2] = 0;
  v16[3] = a1;
  *((_DWORD *)v16 + 8) = 0;
  sub_1C48DF024((uint64_t)v27, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v16 + 40))(v16);
  if (v31 == 16)
    v17 = 1;
  else
    v17 = 2;
  if (v30 <= 3)
    v18 = v17;
  else
    v18 = 0;
  if ((a3 & a4) != 0)
    v19 = 29;
  else
    v19 = 28;
  v20 = sub_1C4885524(v19, dword_1C65EDCBC[6 * a3 + 2 * v18 + (v28 < 4)], *(_BYTE **)(a1 + 480));
  v21 = *(_QWORD *)(a1 + 296);
  v25 = v32;
  if (v32)
    llvm::MetadataTracking::track((uint64_t)&v25, v32, 2);
  v26 = v33;
  if (a3)
    v22 = 9;
  else
    v22 = 10;
  v23 = sub_1C613EF5C(v21, v20, (uint64_t)&v25, v22, 0x1000u, v29, v27);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  return v23;
}

uint64_t sub_1C48DF858(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  int v19;

  if (**(_BYTE **)(a1 + 40) != 9)
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 64);
  v18 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v18, v4, 2);
  v19 = *(_DWORD *)(a1 + 60);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 48);
  if (*(_WORD *)(v6 + 24) == 222 && *(_WORD *)(**(_QWORD **)(v6 + 32) + 24) == 430)
  {
    v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
    v8 = *(_QWORD *)v5;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 40);
    v6 = *(_QWORD *)v5;
  }
  if (*(_WORD *)(v6 + 24) == 222 && (v10 = *(uint64_t **)(v6 + 32), v11 = *v10, *(_WORD *)(*v10 + 24) == 430))
  {
    v13 = v10[1];
    v14 = sub_1C5D404C4((uint64_t)a2, (const llvm::APInt *)&v18, 9, 0, 0, -1.0);
    v17 = sub_1C5D58E08((uint64_t)a2, (const char *)0x8D, (const llvm::APInt *)&v18, (llvm *)9, 0, v11, v13, v16, (uint64_t)v14, v15, v8, v7, SHIDWORD(v7), *(_WORD *)(a1 + 72));
    sub_1C612E190((uint64_t)a2, a1, 0, (uint64_t)v17);
    sub_1C636595C((uint64_t)a2, a1, (uint64_t)v17);
    sub_1C6365540(a2, a1);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  return v9;
}

uint64_t sub_1C48DF9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  _BYTE *v11;
  BOOL v12;
  _DWORD v14[12];

  v10 = 1;
  sub_1C48DC710((uint64_t)v14, *(_QWORD *)(a1 + 296), a2, a3, 1, 0, 0);
  v11 = *(_BYTE **)(a1 + 480);
  if (v11[319])
    v12 = v11[338] == 0;
  else
    v12 = 0;
  if (!v12)
    v10 = v11[326] != 0;
  return sub_1C613F064(a2, a3, a4, a5, v14[8] > 3, v10, *(_QWORD *)(a1 + 296));
}

_QWORD *sub_1C48DFA8C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 480) + 318))
  {
    result = operator new(0x28uLL);
    *result = &off_1E7FA1C48;
    result[1] = sub_1C48E6C68;
    result[2] = 0;
    result[3] = a2;
    *((_BYTE *)result + 32) = 1;
  }
  else
  {
    result = operator new(0x20uLL);
    *result = &off_1E7FA1C90;
    result[1] = sub_1C48E7074;
    result[2] = 0;
    result[3] = a2;
  }
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

_QWORD *sub_1C48DFB08(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 480) + 318))
  {
    result = operator new(0x28uLL);
    *result = &off_1E7FA1C48;
    result[1] = sub_1C48E6C68;
    result[2] = 0;
    result[3] = a2;
    *((_BYTE *)result + 32) = 0;
  }
  else
  {
    result = operator new(0x20uLL);
    *result = &off_1E7FA1C90;
    result[1] = sub_1C48E7074;
    result[2] = 0;
    result[3] = a2;
  }
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

_QWORD *sub_1C48DFB80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];

  v25[0] = a3;
  v25[1] = a4;
  v24[0] = a5;
  v24[1] = a6;
  v23[0] = a7;
  v23[1] = a8;
  v22[0] = a9;
  v22[1] = a10;
  v21 = a2;
  v20 = a11;
  if (a1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, char *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v21, v25, v24, v23, v22, &v20, a12);
  sub_1C485C2F0();
  return sub_1C48DFBE8(v13, v14, v15, v16, v17, v18, v19);
}

_QWORD *sub_1C48DFBE8(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned __int8 **v28;
  int v29;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  __int128 v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44[2];

  v44[0] = a5;
  v44[1] = a6;
  v43 = sub_1C48E7D34(a2);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46));
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46) + 8);
  *(_QWORD *)&v42 = v14;
  *((_QWORD *)&v42 + 1) = v13;
  if (*(_WORD *)(v14 + 24) == 215)
  {
    v15 = *(_QWORD *)(v14 + 32);
    *(_QWORD *)&v42 = *(_QWORD *)v15;
    DWORD2(v42) = *(_DWORD *)(v15 + 8);
    v16 = *(_BYTE *)(*(_QWORD *)(a1 + 480) + 318) == 0;
LABEL_4:
    v17 = 2056;
    v18 = 2072;
    goto LABEL_6;
  }
  v16 = *(_BYTE *)(*(_QWORD *)(a1 + 480) + 318) == 0;
  if (*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16 * v13) == 9)
    goto LABEL_4;
  v17 = 2055;
  v18 = 2071;
LABEL_6:
  if (v16)
    v19 = v18;
  else
    v19 = v17;
  v20 = *(_QWORD *)(a1 + 296);
  v21 = *(unsigned __int8 **)(a2 + 64);
  v40 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v40, v21, 2);
  v41 = *(_DWORD *)(a2 + 60);
  LODWORD(v36) = 0;
  v22 = sub_1C613F698(v20, v19, (uint64_t)&v40, 0, &v43, &v42, (unsigned int *)&v36);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  v23 = *(_QWORD *)(a1 + 296);
  v24 = *(unsigned __int8 **)(a2 + 64);
  if (a5)
  {
    if (v16)
      v29 = 6269;
    else
      v29 = 6215;
    v38 = *(unsigned __int8 **)(a2 + 64);
    if (v24)
      llvm::MetadataTracking::track((uint64_t)&v38, v24, 2);
    v39 = *(_DWORD *)(a2 + 60);
    v37 = 0;
    *(_QWORD *)&v36 = v22;
    DWORD2(v36) = 0;
    v34 = 8 * (a7 != 0);
    v35 = 0;
    v33 = 8;
    v26 = sub_1C613F798(v23, v29, (uint64_t)&v38, a3, a4, 0, v44, (unsigned int *)&v37, &v36, &v35, &v34, &v33);
    v27 = v38;
    if (v38)
    {
      v28 = &v38;
      goto LABEL_28;
    }
  }
  else
  {
    if (v16)
      v25 = 6251;
    else
      v25 = 6197;
    v31 = *(unsigned __int8 **)(a2 + 64);
    if (v24)
      llvm::MetadataTracking::track((uint64_t)&v31, v24, 2);
    v32 = *(_DWORD *)(a2 + 60);
    v37 = 0;
    *(_QWORD *)&v36 = v22;
    DWORD2(v36) = 0;
    v34 = 8 * (a7 != 0);
    v35 = 0;
    v33 = 8;
    v26 = sub_1C613F8B0(v23, v25, (uint64_t)&v31, a3, a4, 0, &v37, &v36, &v35, &v34, &v33);
    v27 = v31;
    if (v31)
    {
      v28 = &v31;
LABEL_28:
      llvm::MetadataTracking::untrack((uint64_t)v28, v27);
    }
  }
  return v26;
}

_QWORD *sub_1C48DFE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  __int128 v25;

  *(_QWORD *)&v25 = a2;
  *((_QWORD *)&v25 + 1) = a3;
  v5 = *(unsigned __int8 **)(a2 + 64);
  v23 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v5, 2);
    v5 = v23;
  }
  v6 = *(_DWORD *)(a2 + 60);
  v24 = v6;
  v7 = *(_QWORD *)(a1 + 296);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 480) + 318))
  {
    v21 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track((uint64_t)&v21, v5, 2);
      v6 = v24;
    }
    v22 = v6;
    LODWORD(v13) = 0;
    v19 = 8;
    v20 = 0;
    v18 = 8;
    v11 = sub_1C613EDCC(v7, 8093, (uint64_t)&v21, 4u, 0, (int *)&v13, &v25, (unsigned int *)&v20, &v19, &v18);
    if (v21)
      llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  }
  else
  {
    v16 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track((uint64_t)&v16, v5, 2);
      v6 = v24;
    }
    v17 = v6;
    LODWORD(v13) = 0;
    v20 = 256;
    v8 = sub_1C613CE5C(v7, 2343, (uint64_t)&v16, 0, (int *)&v13, &v25, &v20);
    if (v16)
      llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
    v9 = *(_QWORD *)(a1 + 296);
    v14 = v23;
    if (v23)
      llvm::MetadataTracking::track((uint64_t)&v14, v23, 2);
    v15 = v24;
    *(_QWORD *)&v13 = v8;
    DWORD2(v13) = 0;
    v19 = 256;
    v20 = 0;
    v10 = sub_1C613CE5C(v9, 2342, (uint64_t)&v14, 0, &v20, &v13, &v19);
    if (v14)
      llvm::MetadataTracking::untrack((uint64_t)&v14, v14);
    v11 = sub_1C636E638(*(_QWORD *)(a1 + 296), 2, (const llvm::APInt *)&v23, (llvm *)4, 0, (uint64_t)v10, 0);
  }
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  return v11;
}

uint64_t sub_1C48E007C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  BOOL v11;
  _BOOL4 v12;
  _DWORD v14[12];

  sub_1C48DC710((uint64_t)v14, *(_QWORD *)(a1 + 296), a2, a3, 0, 0, 0);
  v10 = *(_BYTE **)(a1 + 480);
  if (v10[319])
    v11 = v10[338] == 0;
  else
    v11 = 0;
  v12 = v11 || v10[326] != 0;
  return sub_1C613F998(a2, a3, a4, a5, v14[8] > 3, v12, *(_QWORD *)(a1 + 296));
}

BOOL sub_1C48E0130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  char v20;
  char v21;
  int v22;
  _BOOL4 v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46[2];
  char v47[32];
  int v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v49 = (uint64_t *)a2;
  v50 = a3;
  v10 = sub_1C48DC710((uint64_t)v47, *(_QWORD *)(a1 + 296), a2, a3, 0, 0, 0);
  v11 = v48;
  if (v48 > 3)
    return v11 < 4;
  v13 = *(unsigned __int16 *)(a2 + 24);
  if (v13 == 12)
    goto LABEL_6;
  if (v13 != 430)
  {
    if (v13 != 36)
    {
LABEL_11:
      v19 = 0;
      v18 = (uint64_t *)a2;
      goto LABEL_39;
    }
LABEL_6:
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(v14 + 32);
    if ((_UNKNOWN *)v15 == &unk_1C866F1C0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 40) + 28) & 8) != 0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v52, (const llvm::detail::DoubleAPFloat *)(v14 + 32));
LABEL_32:
        if ((_UNKNOWN *)v52 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v52);
        else
          v55 ^= 8u;
        v33 = *(_QWORD *)(a1 + 296);
        v46[0] = 0;
        v46[1] = 0;
        v34 = *(_QWORD *)(a2 + 40) + 16 * a3;
        v18 = sub_1C6366D08(v33, (llvm::LLVMContext *)&v51, (const llvm::APFloat *)v46, *(llvm **)v34, *(_QWORD *)(v34 + 8), 0);
        v36 = v35;
        if (v46[0])
          llvm::MetadataTracking::untrack((uint64_t)v46, v46[0]);
        sub_1C612E190(*(_QWORD *)(a1 + 296), a2, a3, (uint64_t)v18);
        v49 = v18;
        LODWORD(v50) = v36;
        if ((_UNKNOWN *)v52 == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v53);
        }
        else if ((*(_DWORD *)(v52 + 8) - 64) <= 0xFFFFFF7F && v53)
        {
          MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
        }
        v19 = 2;
        goto LABEL_39;
      }
    }
    else
    {
      v20 = *(_BYTE *)(v14 + 52);
      if ((v20 & 8) != 0)
      {
        v52 = *(_QWORD *)(v14 + 32);
        if ((*(_DWORD *)(v15 + 8) + 64) >= 0x80)
        {
          v10 = operator new[]();
          v53 = v10;
          v20 = *(_BYTE *)(v14 + 52);
          v21 = v55 & 0xF0;
        }
        else
        {
          v21 = 0;
        }
        v22 = v20 & 7;
        v55 = v20 & 0xF | v21;
        v54 = *(_DWORD *)(v14 + 48);
        v24 = (v20 & 6) != 0 && v22 != 3;
        if (v22 == 1 || v24)
        {
          v26 = *(unsigned int *)(v52 + 8);
          if ((v26 - 64) <= 0xFFFFFF7F)
            v27 = (uint64_t *)v10;
          else
            v27 = &v53;
          v30 = *(uint64_t **)(v14 + 40);
          v29 = (uint64_t *)(v14 + 40);
          v28 = v30;
          if ((*(_DWORD *)(*(v29 - 1) + 8) - 64) >= 0xFFFFFF80)
            v28 = v29;
          if (v26 <= 0xFFFFFFBF)
          {
            v31 = (unint64_t)(v26 + 64) >> 6;
            do
            {
              v32 = *v28++;
              *v27++ = v32;
              --v31;
            }
            while (v31);
          }
        }
        goto LABEL_32;
      }
    }
    goto LABEL_11;
  }
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_DWORD *)(v16 + 8);
  v18 = *(uint64_t **)v16;
  v49 = *(uint64_t **)v16;
  LODWORD(v50) = v17;
  v19 = 1;
LABEL_39:
  v37 = *((unsigned __int16 *)v18 + 12);
  if (v37 == 222)
  {
    v38 = v18[4];
    v39 = *(_DWORD *)(v38 + 8);
    v18 = *(uint64_t **)v38;
    v49 = v18;
    LODWORD(v50) = v39;
    v19 ^= 2u;
    v37 = *((unsigned __int16 *)v18 + 12);
  }
  if (v37 == 223)
  {
    v40 = v18[4];
    v41 = *(_DWORD *)(v40 + 8);
    v18 = *(uint64_t **)v40;
    v49 = *(uint64_t **)v40;
    LODWORD(v50) = v41;
    v19 |= 4u;
  }
  v42 = *(_BYTE **)(a1 + 480);
  v43 = v42[319] && !v42[338] || v42[326] != 0;
  sub_1C48DD498((uint64_t)v18, v50, (uint64_t)&v49, 1, 0, v43, *(_QWORD *)(a1 + 296));
  *(_QWORD *)a4 = v49;
  *(_DWORD *)(a4 + 8) = v50;
  v44 = *(_QWORD *)(a1 + 296);
  v51 = 0;
  v52 = 0;
  *(_QWORD *)a5 = sub_1C6366AB4(v44, v19, (const llvm::APInt *)&v51, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v45;
  if (v51)
    llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
  return v11 < 4;
}

_QWORD *sub_1C48E04F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL4 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  unsigned int v30;
  int v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  unsigned __int8 **v40;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  char v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  _QWORD *v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  unsigned __int8 *v86;
  int v87;
  __int128 v88;
  __int128 v89;

  v7 = *(_QWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(llvm **)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_OWORD *)(v9 + 40);
  v88 = *(_OWORD *)(v9 + 80);
  v89 = v12;
  v13 = *(unsigned __int16 *)(v12 + 24);
  if (v13 == 35 || v13 == 11)
    v15 = v12;
  else
    v15 = 0;
  v16 = *(unsigned __int16 *)(v88 + 24);
  if (v16 == 35 || v16 == 11)
    v18 = v88;
  else
    v18 = 0;
  if (v15)
  {
    v19 = *(_QWORD *)(v15 + 80);
    v20 = (_QWORD *)(v19 + 24);
    if (*(_DWORD *)(v19 + 32) >= 0x41u)
      v20 = (_QWORD *)*v20;
    v21 = *v20 < 0x100uLL;
  }
  else
  {
    v21 = 0;
  }
  if (v18)
  {
    v22 = *(_QWORD *)(v18 + 80);
    v23 = (unint64_t *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v23 = (unint64_t *)*v23;
    v24 = *v23;
    v25 = *v23 & 0xFFFFFFFFFFFFFC03;
    v26 = *v23 & 0xFFFFFFFFFFFFF807;
    v27 = 1;
    if (v26)
      v28 = v25 == 0;
    else
      v28 = 1;
    if (!v28)
      v27 = v24 < 0x100 || (v24 & 0xFFFFFFFFFFFFFE01) == 0 || (v24 & 0xFFFFFFFFFFFFF00FLL) == 0;
  }
  else
  {
    v27 = 0;
  }
  if (!v21)
  {
    if (a3 != 58 || !v27)
    {
      if (a3 == 56)
      {
        if (a4)
          v43 = 8;
        else
          v43 = 0;
        v85 = v43;
        v31 = 36;
        if (v27)
          goto LABEL_122;
      }
      else
      {
        if (a3 == 57)
          v31 = 46;
        else
          v31 = 41;
        if (a4)
          v59 = 8;
        else
          v59 = 0;
        v85 = v59;
        if (v27)
          goto LABEL_122;
      }
      goto LABEL_68;
    }
LABEL_43:
    if (v15)
    {
      v33 = *(_QWORD *)(v15 + 80);
      v34 = (_QWORD *)(v33 + 24);
      if (*(_DWORD *)(v33 + 32) >= 0x41u)
        v34 = (_QWORD *)*v34;
      if (!*v34)
        goto LABEL_51;
    }
    if (v18)
    {
      v35 = *(_QWORD *)(v18 + 80);
      v36 = (_QWORD *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
        v36 = (_QWORD *)*v36;
      if (!*v36)
      {
LABEL_51:
        v37 = *(unsigned __int8 **)(a2 + 64);
        v86 = v37;
        if (v37)
          llvm::MetadataTracking::track((uint64_t)&v86, v37, 2);
        v87 = *(_DWORD *)(a2 + 60);
        v38 = sub_1C48DD8B0(a1, 0, (uint64_t)&v86, v10, v11);
        v39 = v86;
        if (!v86)
          return v38;
        v40 = &v86;
        goto LABEL_55;
      }
    }
    if (a4)
      v42 = 8;
    else
      v42 = 0;
    v85 = v42;
    v31 = 41;
    if (v21 || v27)
    {
      if (v21)
        goto LABEL_89;
LABEL_122:
      if (a3 == 58)
        v60 = 366;
      else
        v60 = 365;
      if (a3 == 58)
        v61 = 236;
      else
        v61 = 235;
      if (v10 == 4)
        v62 = v60;
      else
        v62 = v61;
      v63 = sub_1C4885524(v31, v62, *(_BYTE **)(a1 + 480));
      v64 = *(unsigned __int8 **)(a2 + 64);
      if (a3 == 58)
      {
        v69 = *(unsigned __int8 **)(a2 + 64);
        if (v64)
          llvm::MetadataTracking::track((uint64_t)&v69, v64, 2);
        v70 = *(_DWORD *)(a2 + 60);
        v65 = *(_QWORD *)(v18 + 80);
        v66 = (_QWORD *)(v65 + 24);
        if (*(_DWORD *)(v65 + 32) >= 0x41u)
          v66 = (_QWORD *)*v66;
        v79 = (_QWORD *)*v66;
        v80 = (char)v10;
        v73 = 0;
        v74 = (char)v10;
        v38 = sub_1C6140244(v7, v63, (uint64_t)&v69, v10, 0, (uint64_t *)&v89, &v85, (uint64_t)&v79, (uint64_t)&v73);
        v39 = v69;
        if (v69)
        {
          v40 = &v69;
          goto LABEL_55;
        }
      }
      else
      {
        v71 = *(unsigned __int8 **)(a2 + 64);
        if (v64)
          llvm::MetadataTracking::track((uint64_t)&v71, v64, 2);
        v72 = *(_DWORD *)(a2 + 60);
        v67 = *(_QWORD *)(v18 + 80);
        v68 = (_QWORD *)(v67 + 24);
        if (*(_DWORD *)(v67 + 32) >= 0x41u)
          v68 = (_QWORD *)*v68;
        v79 = (_QWORD *)*v68;
        v80 = (char)v10;
        v38 = sub_1C6140170(v7, v63, (uint64_t)&v71, v10, 0, &v89, &v85, (uint64_t)&v79);
        v39 = v71;
        if (v71)
        {
          v40 = &v71;
          goto LABEL_55;
        }
      }
      return v38;
    }
LABEL_68:
    if (a3 == 58)
      v44 = 381;
    else
      v44 = 380;
    if (a3 == 58)
      v45 = 242;
    else
      v45 = 241;
    if (v10 == 4)
      v46 = v44;
    else
      v46 = v45;
    v47 = sub_1C4885524(v31, v46, *(_BYTE **)(a1 + 480));
    v48 = *(unsigned __int8 **)(a2 + 64);
    if (a3 != 58)
    {
      v83 = *(unsigned __int8 **)(a2 + 64);
      if (v48)
        llvm::MetadataTracking::track((uint64_t)&v83, v48, 2);
      v84 = *(_DWORD *)(a2 + 60);
      v38 = sub_1C613FD40(v7, v47, (uint64_t)&v83, v10, 0, &v89, &v85, &v88, &v85);
      v39 = v83;
      if (v83)
      {
        v40 = &v83;
        goto LABEL_55;
      }
      return v38;
    }
    v81 = *(unsigned __int8 **)(a2 + 64);
    if (v48)
      llvm::MetadataTracking::track((uint64_t)&v81, v48, 2);
    v82 = *(_DWORD *)(a2 + 60);
    v79 = 0;
    v80 = (char)v10;
    v38 = sub_1C613FE60(v7, v47, (uint64_t)&v81, v10, 0, &v89, &v85, &v88, &v85, (uint64_t)&v79);
    v39 = v81;
    if (!v81)
      return v38;
    v40 = &v81;
LABEL_55:
    llvm::MetadataTracking::untrack((uint64_t)v40, v39);
    return v38;
  }
  if (a3 == 58)
    goto LABEL_43;
  if (a3 == 56)
  {
    if (a4)
      v30 = 8;
    else
      v30 = 0;
    v85 = v30;
    v31 = 36;
  }
  else
  {
    if (a3 == 57)
      v31 = 46;
    else
      v31 = 41;
    if (a4)
      v49 = 8;
    else
      v49 = 0;
    v85 = v49;
  }
LABEL_89:
  if (a3 == 58)
    v50 = 324;
  else
    v50 = 323;
  if (a3 == 58)
    v51 = 221;
  else
    v51 = 220;
  if (v10 == 4)
    v52 = v50;
  else
    v52 = v51;
  v53 = sub_1C4885524(v31, v52, *(_BYTE **)(a1 + 480));
  v54 = *(unsigned __int8 **)(a2 + 64);
  if (a3 == 58)
  {
    v75 = *(unsigned __int8 **)(a2 + 64);
    if (v54)
      llvm::MetadataTracking::track((uint64_t)&v75, v54, 2);
    v76 = *(_DWORD *)(a2 + 60);
    v55 = *(_QWORD *)(v15 + 80);
    v56 = (_QWORD *)(v55 + 24);
    if (*(_DWORD *)(v55 + 32) >= 0x41u)
      v56 = (_QWORD *)*v56;
    v79 = (_QWORD *)*v56;
    v80 = (char)v10;
    v73 = 0;
    v74 = (char)v10;
    v38 = sub_1C6140058(v7, v53, (uint64_t)&v75, v10, 0, (uint64_t)&v79, &v88, &v85, (uint64_t)&v73);
    v39 = v75;
    if (v75)
    {
      v40 = &v75;
      goto LABEL_55;
    }
  }
  else
  {
    v77 = *(unsigned __int8 **)(a2 + 64);
    if (v54)
      llvm::MetadataTracking::track((uint64_t)&v77, v54, 2);
    v78 = *(_DWORD *)(a2 + 60);
    v57 = *(_QWORD *)(v15 + 80);
    v58 = (_QWORD *)(v57 + 24);
    if (*(_DWORD *)(v57 + 32) >= 0x41u)
      v58 = (_QWORD *)*v58;
    v79 = (_QWORD *)*v58;
    v80 = (char)v10;
    v38 = sub_1C613FF84(v7, v53, (uint64_t)&v77, v10, 0, (uint64_t)&v79, &v88, &v85);
    v39 = v77;
    if (v77)
    {
      v40 = &v77;
      goto LABEL_55;
    }
  }
  return v38;
}

void sub_1C48E0AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  _QWORD *v14;
  __int128 v15;
  unsigned __int8 *v16;
  int v17;
  void *v18;
  int64x2_t v19;
  int v20;
  __int16 v21;
  char v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[28];
  uint64_t v26;

  v10 = 0;
  v11 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v23 = v25;
  *(_OWORD *)v25 = xmmword_1C65EFD4C;
  *(_OWORD *)&v25[12] = *(__int128 *)((char *)&xmmword_1C65EFD4C + 12);
  v24 = 0x700000007;
  v20 = 168430090;
  v21 = 1285;
  v22 = 4;
  v18 = &v20;
  v19 = vdupq_n_s64(7uLL);
  do
  {
    v12 = *(unsigned __int8 **)a3;
    v16 = v12;
    if (v12)
      llvm::MetadataTracking::track((uint64_t)&v16, v12, 2);
    v17 = *(_DWORD *)(a3 + 8);
    v13 = *((_BYTE *)v18 + v11);
    *(_QWORD *)&v15 = a5;
    DWORD2(v15) = 0;
    v14 = sub_1C6140E4C(a2, (uint64_t)&v16, v13, &v15, (unsigned int *)((char *)v23 + v10));
    sub_1C5D6146C(*(_QWORD *)(a1 + 296), a4, v11, (uint64_t)v14, 0);
    sub_1C63725DC((uint64_t)v14);
    if (v16)
      llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
    ++v11;
    v10 += 4;
  }
  while (v11 < v24);
  if (v18 != &v20)
    free(v18);
  if (v23 != v25)
    free(v23);
}

_QWORD *sub_1C48E0C68(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned __int16 *a5, __int128 *a6, unsigned __int16 *a7, __int128 *a8, unsigned __int16 *a9, __int128 *a10, unsigned __int16 *a11, __int128 *a12, unsigned __int16 *a13, __int128 *a14, unsigned __int16 *a15, __int128 *a16, unsigned __int16 *a17, __int128 *a18, unsigned __int16 *a19, __int128 *a20,unsigned __int16 *a21,__int128 *a22,unsigned __int16 *a23,__int128 *a24,unsigned __int16 *a25,__int128 *a26,unsigned __int16 *a27)
{
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  unsigned int v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  unsigned int v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  unsigned int v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  __int128 v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  _QWORD *v102;
  unsigned int v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _QWORD *v110;
  unsigned int v111;
  __int128 v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  unsigned int v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  _QWORD *v126;
  unsigned int v127;
  __int128 v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  _QWORD *v134;
  unsigned int v135;
  _QWORD *v136;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unsigned __int8 *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  _QWORD v154[52];

  v154[50] = *MEMORY[0x1E0C80C00];
  v151 = 0;
  v152 = v154;
  v153 = 0x1900000000;
  v150 = 0;
  v34 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v36 = v35;
  v37 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v37 = v153;
  }
  v38 = (char *)v152 + 16 * v37;
  *v38 = v34;
  v38[1] = v36;
  v39 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v39 = v153;
  }
  v40 = *a4;
  if (v39 >= HIDWORD(v153))
  {
    v138 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v39 + 1, 16);
    v40 = v138;
    v39 = v153;
  }
  *((_OWORD *)v152 + v39) = v40;
  LODWORD(v153) = v153 + 1;
  v41 = *a5;
  v150 = 0;
  v151 = 0;
  v42 = sub_1C6366AB4(a1, v41, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v44 = v43;
  v45 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v45 = v153;
  }
  v46 = (char *)v152 + 16 * v45;
  *v46 = v42;
  v46[1] = v44;
  v47 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v47 = v153;
  }
  v48 = *a6;
  if (v47 >= HIDWORD(v153))
  {
    v139 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v47 + 1, 16);
    v48 = v139;
    v47 = v153;
  }
  *((_OWORD *)v152 + v47) = v48;
  LODWORD(v153) = v153 + 1;
  v49 = *a7;
  v150 = 0;
  v151 = 0;
  v50 = sub_1C6366AB4(a1, v49, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v52 = v51;
  v53 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v53 = v153;
  }
  v54 = (char *)v152 + 16 * v53;
  *v54 = v50;
  v54[1] = v52;
  v55 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v55 = v153;
  }
  v56 = *a8;
  if (v55 >= HIDWORD(v153))
  {
    v140 = *a8;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v55 + 1, 16);
    v56 = v140;
    v55 = v153;
  }
  *((_OWORD *)v152 + v55) = v56;
  LODWORD(v153) = v153 + 1;
  v57 = *a9;
  v150 = 0;
  v151 = 0;
  v58 = sub_1C6366AB4(a1, v57, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v60 = v59;
  v61 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v61 = v153;
  }
  v62 = (char *)v152 + 16 * v61;
  *v62 = v58;
  v62[1] = v60;
  v63 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v63 = v153;
  }
  v64 = *a10;
  if (v63 >= HIDWORD(v153))
  {
    v141 = *a10;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v63 + 1, 16);
    v64 = v141;
    v63 = v153;
  }
  *((_OWORD *)v152 + v63) = v64;
  LODWORD(v153) = v153 + 1;
  v65 = *a11;
  v150 = 0;
  v151 = 0;
  v66 = sub_1C6366AB4(a1, v65, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v68 = v67;
  v69 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v69 = v153;
  }
  v70 = (char *)v152 + 16 * v69;
  *v70 = v66;
  v70[1] = v68;
  v71 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v71 = v153;
  }
  v72 = *a12;
  if (v71 >= HIDWORD(v153))
  {
    v142 = *a12;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v71 + 1, 16);
    v72 = v142;
    v71 = v153;
  }
  *((_OWORD *)v152 + v71) = v72;
  LODWORD(v153) = v153 + 1;
  v73 = *a13;
  v150 = 0;
  v151 = 0;
  v74 = sub_1C6366AB4(a1, v73, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v76 = v75;
  v77 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v77 = v153;
  }
  v78 = (char *)v152 + 16 * v77;
  *v78 = v74;
  v78[1] = v76;
  v79 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v79 = v153;
  }
  v80 = *a14;
  if (v79 >= HIDWORD(v153))
  {
    v143 = *a14;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v79 + 1, 16);
    v80 = v143;
    v79 = v153;
  }
  *((_OWORD *)v152 + v79) = v80;
  LODWORD(v153) = v153 + 1;
  v81 = *a15;
  v150 = 0;
  v151 = 0;
  v82 = sub_1C6366AB4(a1, v81, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v84 = v83;
  v85 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v85 = v153;
  }
  v86 = (char *)v152 + 16 * v85;
  *v86 = v82;
  v86[1] = v84;
  v87 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v87 = v153;
  }
  v88 = *a16;
  if (v87 >= HIDWORD(v153))
  {
    v144 = *a16;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v87 + 1, 16);
    v88 = v144;
    v87 = v153;
  }
  *((_OWORD *)v152 + v87) = v88;
  LODWORD(v153) = v153 + 1;
  v89 = *a17;
  v150 = 0;
  v151 = 0;
  v90 = sub_1C6366AB4(a1, v89, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v92 = v91;
  v93 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v93 = v153;
  }
  v94 = (char *)v152 + 16 * v93;
  *v94 = v90;
  v94[1] = v92;
  v95 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v95 = v153;
  }
  v96 = *a18;
  if (v95 >= HIDWORD(v153))
  {
    v145 = *a18;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v95 + 1, 16);
    v96 = v145;
    v95 = v153;
  }
  *((_OWORD *)v152 + v95) = v96;
  LODWORD(v153) = v153 + 1;
  v97 = *a19;
  v150 = 0;
  v151 = 0;
  v98 = sub_1C6366AB4(a1, v97, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v100 = v99;
  v101 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v101 = v153;
  }
  v102 = (char *)v152 + 16 * v101;
  *v102 = v98;
  v102[1] = v100;
  v103 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v103 = v153;
  }
  v104 = *a20;
  if (v103 >= HIDWORD(v153))
  {
    v146 = *a20;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v103 + 1, 16);
    v104 = v146;
    v103 = v153;
  }
  *((_OWORD *)v152 + v103) = v104;
  LODWORD(v153) = v153 + 1;
  v105 = *a21;
  v150 = 0;
  v151 = 0;
  v106 = sub_1C6366AB4(a1, v105, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v108 = v107;
  v109 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v109 = v153;
  }
  v110 = (char *)v152 + 16 * v109;
  *v110 = v106;
  v110[1] = v108;
  v111 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v111 = v153;
  }
  v112 = *a22;
  if (v111 >= HIDWORD(v153))
  {
    v147 = *a22;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v111 + 1, 16);
    v112 = v147;
    v111 = v153;
  }
  *((_OWORD *)v152 + v111) = v112;
  LODWORD(v153) = v153 + 1;
  v113 = *a23;
  v150 = 0;
  v151 = 0;
  v114 = sub_1C6366AB4(a1, v113, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v116 = v115;
  v117 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v117 = v153;
  }
  v118 = (char *)v152 + 16 * v117;
  *v118 = v114;
  v118[1] = v116;
  v119 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v119 = v153;
  }
  v120 = *a24;
  if (v119 >= HIDWORD(v153))
  {
    v148 = *a24;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v119 + 1, 16);
    v120 = v148;
    v119 = v153;
  }
  *((_OWORD *)v152 + v119) = v120;
  LODWORD(v153) = v153 + 1;
  v121 = *a25;
  v150 = 0;
  v151 = 0;
  v122 = sub_1C6366AB4(a1, v121, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v124 = v123;
  v125 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v125 = v153;
  }
  v126 = (char *)v152 + 16 * v125;
  *v126 = v122;
  v126[1] = v124;
  v127 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v127 = v153;
  }
  v128 = *a26;
  if (v127 >= HIDWORD(v153))
  {
    v149 = *a26;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v127 + 1, 16);
    v128 = v149;
    v127 = v153;
  }
  *((_OWORD *)v152 + v127) = v128;
  LODWORD(v153) = v153 + 1;
  v129 = *a27;
  v150 = 0;
  v151 = 0;
  v130 = sub_1C6366AB4(a1, v129, (const llvm::APInt *)&v150, (llvm *)6, 0, 1, 0);
  v132 = v131;
  v133 = v153;
  if (v153 >= HIDWORD(v153))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v153 + 1, 16);
    v133 = v153;
  }
  v134 = (char *)v152 + 16 * v133;
  *v134 = v130;
  v134[1] = v132;
  v135 = v153 + 1;
  LODWORD(v153) = v153 + 1;
  if (v150)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    v135 = v153;
  }
  v136 = sub_1C636E56C(a1, 18, a2, (llvm *)0xAE, 0, (uint64_t *)v152, v135);
  if (v152 != v154)
    free(v152);
  return v136;
}

_QWORD *sub_1C48E1798(uint64_t *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  __int128 v41[2];
  int v42;
  int v43;
  __int128 v44[2];
  int v45;
  int v46;
  __int128 v47[2];
  int v48;
  int v49;
  _DWORD v50[4];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v14 = *a1;
  sub_1C48DC710((uint64_t)v47, *(_QWORD *)(*a1 + 296), a5, a6, 0, 0, 0);
  sub_1C48DC710((uint64_t)v44, *(_QWORD *)(v14 + 296), a7, a8, 0, 0, 0);
  if (!a3)
  {
    a3 = sub_1C6366AB4(*(_QWORD *)(v14 + 296), 0, (const llvm::APInt *)(a1 + 4), (llvm *)5, 0, 1, 0);
    a4 = v15;
  }
  sub_1C48DC710((uint64_t)v41, *(_QWORD *)(v14 + 296), (uint64_t)a3, a4, 0, 0, 0);
  v16 = (unsigned __int8 *)a1[2];
  v38 = a1[1];
  v39 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v39, v16, 2);
  v40 = *((_DWORD *)a1 + 6);
  sub_1C48EC494((uint64_t)v47, &v38);
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  v17 = (unsigned __int8 *)a1[2];
  v35 = a1[1];
  v36 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v36, v17, 2);
  v37 = *((_DWORD *)a1 + 6);
  sub_1C48EC494((uint64_t)v44, &v35);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  v18 = (unsigned __int8 *)a1[2];
  v32 = a1[1];
  v33 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v33, v18, 2);
  v34 = *((_DWORD *)a1 + 6);
  sub_1C48EC494((uint64_t)v41, &v32);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v50[0] = 5;
  if ((v42 & 0xFFFFFFFC) == 4)
  {
    v19 = 1;
  }
  else
  {
    if (v43 == 32)
      v19 = 5;
    else
      v19 = 10;
    if (v43 == 16)
      v19 = 2;
  }
  v50[1] = v19;
  if ((v48 & 0xFFFFFFFC) == 4)
  {
    v20 = 1;
  }
  else
  {
    if (v49 == 32)
      v21 = 5;
    else
      v21 = 10;
    if (v49 == 16)
      v20 = 2;
    else
      v20 = v21;
  }
  v50[2] = v20;
  if ((v45 & 0xFFFFFFFC) == 4)
  {
    v22 = 1;
  }
  else
  {
    if (v46 == 32)
      v23 = 5;
    else
      v23 = 10;
    if (v46 == 16)
      v22 = 2;
    else
      v22 = v23;
  }
  v50[3] = v22;
  v24 = sub_1C4884024(a2, v50, 4, *(_BYTE **)(v14 + 480));
  v25 = *(_QWORD *)(v14 + 296);
  v26 = (unsigned __int8 *)a1[4];
  v30 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v30, v26, 2);
  v31 = *((_DWORD *)a1 + 10);
  v29 = 32;
  v27 = sub_1C6140F34(v25, v24, (uint64_t)&v30, 0, v41, v47, v44, &v29);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return v27;
}

_QWORD *sub_1C48E1ABC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  __int128 v26[2];
  int v27;
  __int128 v28[2];
  int v29;
  _DWORD v30[3];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  sub_1C48DC710((uint64_t)v28, *(_QWORD *)(*a1 + 296), a2, a3, 0, 0, 0);
  sub_1C48DC710((uint64_t)v26, *(_QWORD *)(v8 + 296), a4, a5, 0, 0, 0);
  v9 = (unsigned __int8 *)a1[2];
  v23 = a1[1];
  v24 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v24, v9, 2);
  v25 = *((_DWORD *)a1 + 6);
  sub_1C48EC494((uint64_t)v28, &v23);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  v10 = (unsigned __int8 *)a1[2];
  v20 = a1[1];
  v21 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v21, v10, 2);
  v22 = *((_DWORD *)a1 + 6);
  sub_1C48EC494((uint64_t)v26, &v20);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  if (v29 > 3)
    v11 = 1;
  else
    v11 = 5;
  v30[0] = 5;
  v30[1] = v11;
  if (v27 > 3)
    v12 = 1;
  else
    v12 = 5;
  v30[2] = v12;
  v13 = sub_1C4884024(45, v30, 3, *(_BYTE **)(v8 + 480));
  v14 = *(_QWORD *)(v8 + 296);
  v15 = (unsigned __int8 *)a1[4];
  v18 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v18, v15, 2);
  v19 = *((_DWORD *)a1 + 10);
  v16 = sub_1C613EF5C(v14, v13, (uint64_t)&v18, 5u, 0, v28, v26);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  return v16;
}

_QWORD *sub_1C48E1C84(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned __int8 a12, uint64_t a13)
{
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void (**v26)(_QWORD *);
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  void (**v35)(_QWORD *);
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  unsigned __int8 *v55;
  int v56;
  __int128 v57[3];
  __int128 v58[3];
  __int128 v59[3];
  __int128 v60[3];
  unsigned int v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v61 = a2;
  sub_1C48DC710((uint64_t)v60, *(_QWORD *)(a1 + 296), a3, a4, 0, 0, 0);
  sub_1C48DC710((uint64_t)v59, *(_QWORD *)(a1 + 296), a5, a6, 0, 0, 0);
  sub_1C48DC710((uint64_t)v58, *(_QWORD *)(a1 + 296), a7, a8, 1, 0, 0);
  sub_1C48DC710((uint64_t)v57, *(_QWORD *)(a1 + 296), a9, a10, 1, 0, 0);
  v18 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v60[0] + 40) + 16 * DWORD2(v60[0]));
  v19 = *v18;
  if (*v18)
  {
    v22 = (v19 - 120) >= 0x20 && (v19 - 2) >= 6;
    if (!v22 || (v19 - 15) < 0x3C)
      goto LABEL_13;
LABEL_12:
    v23 = operator new(0x20uLL);
    v24 = (uint64_t)v23;
    *v23 = &off_1E7FA1BB8;
    v23[1] = sub_1C48DF9D8;
    goto LABEL_14;
  }
  v20 = *((_QWORD *)v18 + 1);
  if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12)
    v21 = *(unsigned __int8 *)(**(_QWORD **)(v20 + 16) + 8);
  else
    v21 = *(_DWORD *)(v20 + 8);
  if (v21 != 13)
    goto LABEL_12;
LABEL_13:
  v23 = operator new(0x20uLL);
  v24 = (uint64_t)v23;
  *v23 = &off_1E7FA1BB8;
  v23[1] = sub_1C48E007C;
LABEL_14:
  v23[2] = 0;
  v23[3] = a1;
  v65 = v23;
  sub_1C48DF024((uint64_t)v60, v24);
  v25 = v65;
  if (v65 == v64)
  {
    v26 = (void (**)(_QWORD *))(v64[0] + 32);
    v25 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_19;
    v26 = (void (**)(_QWORD *))(*v65 + 40);
  }
  (*v26)(v25);
LABEL_19:
  v27 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v59[0] + 40) + 16 * DWORD2(v59[0]));
  v28 = *v27;
  if (*v27)
  {
    v31 = (v28 - 120) >= 0x20 && (v28 - 2) >= 6;
    if (!v31 || (v28 - 15) < 0x3C)
      goto LABEL_31;
LABEL_30:
    v32 = operator new(0x20uLL);
    v33 = (uint64_t)v32;
    *v32 = &off_1E7FA1BB8;
    v32[1] = sub_1C48DF9D8;
    goto LABEL_32;
  }
  v29 = *((_QWORD *)v27 + 1);
  if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
    v30 = *(unsigned __int8 *)(**(_QWORD **)(v29 + 16) + 8);
  else
    v30 = *(_DWORD *)(v29 + 8);
  if (v30 != 13)
    goto LABEL_30;
LABEL_31:
  v32 = operator new(0x20uLL);
  v33 = (uint64_t)v32;
  *v32 = &off_1E7FA1BB8;
  v32[1] = sub_1C48E007C;
LABEL_32:
  v32[2] = 0;
  v32[3] = a1;
  v63 = v32;
  sub_1C48DF024((uint64_t)v59, v33);
  v34 = v63;
  if (v63 == v62)
  {
    v35 = (void (**)(_QWORD *))(v62[0] + 32);
    v34 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_37;
    v35 = (void (**)(_QWORD *))(*v63 + 40);
  }
  (*v35)(v34);
LABEL_37:
  v36 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v58[0] + 40) + 16 * DWORD2(v58[0]));
  v37 = *v36;
  if (!*v36)
  {
    v38 = *((_QWORD *)v36 + 1);
    if ((*(_DWORD *)(v38 + 8) & 0xFE) == 0x12)
      v39 = *(unsigned __int8 *)(**(_QWORD **)(v38 + 16) + 8);
    else
      v39 = *(_DWORD *)(v38 + 8);
    if (v39 == 13)
    {
      v40 = sub_1C48E007C;
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v40 = sub_1C48E007C;
  if ((v37 - 120) >= 0x20 && (v37 - 2) >= 6 && (v37 - 15) >= 0x3C)
LABEL_45:
    v40 = sub_1C48DF9D8;
LABEL_46:
  v41 = a8;
  v42 = operator new(0x20uLL);
  *v42 = &off_1E7FA1BB8;
  v42[1] = v40;
  v42[2] = 0;
  v42[3] = a1;
  sub_1C48DF024((uint64_t)v58, (uint64_t)v42);
  (*(void (**)(_QWORD *))(*v42 + 40))(v42);
  v43 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v57[0] + 40) + 16 * DWORD2(v57[0]));
  v44 = *v43;
  if (!*v43)
  {
    v45 = *((_QWORD *)v43 + 1);
    if ((*(_DWORD *)(v45 + 8) & 0xFE) == 0x12)
      v46 = *(unsigned __int8 *)(**(_QWORD **)(v45 + 16) + 8);
    else
      v46 = *(_DWORD *)(v45 + 8);
    if (v46 == 13)
    {
      v47 = sub_1C48E007C;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  v47 = sub_1C48E007C;
  if ((v44 - 120) >= 0x20 && (v44 - 2) >= 6 && (v44 - 15) >= 0x3C)
LABEL_54:
    v47 = sub_1C48DF9D8;
LABEL_55:
  v48 = operator new(0x20uLL);
  *v48 = &off_1E7FA1BB8;
  v48[1] = v47;
  v48[2] = 0;
  v48[3] = a1;
  sub_1C48DF024((uint64_t)v57, (uint64_t)v48);
  (*(void (**)(_QWORD *))(*v48 + 40))(v48);
  v49 = *(_BYTE *)(*(_QWORD *)(a7 + 40) + 16 * v41);
  v50 = sub_1C6141044(a12, (uint64_t)v60, (uint64_t)v59, (uint64_t)v58, (uint64_t)v57, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 40));
  v51 = *(_QWORD *)(a1 + 296);
  v52 = *(unsigned __int8 **)a13;
  v55 = v52;
  if (v52)
    llvm::MetadataTracking::track((uint64_t)&v55, v52, 2);
  v56 = *(_DWORD *)(a13 + 8);
  v53 = sub_1C613F354(v51, v50, (uint64_t)&v55, v49, 0, &v61, v60, v59, v58, v57);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  return v53;
}

uint64_t sub_1C48E2164(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int16 *v12;

  v4 = *(unsigned __int16 *)(a2 + 24);
  switch(v4)
  {
    case 11:
LABEL_4:
      v5 = *(_QWORD *)(a2 + 80);
      v6 = (_QWORD *)(v5 + 24);
      if (*(_DWORD *)(v5 + 32) >= 0x41u)
        v6 = (_QWORD *)*v6;
      v7 = *(_DWORD *)v6;
LABEL_7:
      *a4 = v7;
      return 1;
    case 199:
      v9 = **(_QWORD **)(a2 + 32);
      if (v9)
        v10 = (*(_WORD *)(v9 + 24) & 0xFFFE) == 61462;
      else
        v10 = 0;
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 80);
        v12 = (unsigned __int16 *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
          v12 = *(unsigned __int16 **)v12;
        v7 = *v12;
        goto LABEL_7;
      }
      break;
    case 35:
      goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1C48E21F8()
{
  return 1;
}

uint64_t *sub_1C48E2200(uint64_t a1, uint64_t a2, int a3, int *a4, __n128 a5)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  char *v58;
  int v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  BOOL v78;
  __int128 **v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  __int128 *v83;
  __int128 *v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  char *v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned __int32 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int32x4_t v119;
  uint32x4_t v120;
  int32x4_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int *v124;
  _QWORD *v125;
  unsigned int v126;
  int v127;
  BOOL v128;
  int v129;
  unsigned int v130;
  uint32x4_t v131;
  int8x16_t v132;
  int32x4_t v133;
  uint32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  unsigned int v137;
  unsigned int v138;
  uint32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  uint32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x8_t v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint32x4_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x8_t v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  uint32x4_t v159;
  int8x16_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x8_t v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  uint32x4_t v169;
  int8x16_t v170;
  int32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x8_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unsigned __int8 **v187;
  int v188;
  uint64_t v189;
  uint64_t *v190;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  int *v198;
  int v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  llvm *v214;
  unsigned __int8 *v217;
  int v218;
  unsigned __int8 *v219;
  int v220;
  unsigned __int8 *v221;
  int v222;
  __int128 v223;
  unsigned __int8 *v224;
  int v225;
  _QWORD *v226;
  unint64_t v227;
  unsigned __int8 *v228;
  int v229;
  __int128 v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236[4];

  v7 = *(unsigned __int8 **)(a2 + 64);
  v228 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v228, v7, 2);
  v229 = *(_DWORD *)(a2 + 60);
  v226 = 0;
  LODWORD(v227) = 0;
  v211 = a2;
  v8 = *(_QWORD *)(a2 + 40);
  v213 = *(_QWORD *)(v8 + 8);
  v214 = *(llvm **)v8;
  v212 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2184) + 318);
  *(_DWORD *)(a1 + 1096) = 0;
  LODWORD(v9) = **(_DWORD **)(a1 + 800);
  LODWORD(v10) = **(_DWORD **)(a1 + 944);
  v11 = *(uint64_t **)(a1 + 8);
  if (*((_DWORD *)v11 + 5) == 1)
  {
    v13 = *v11;
    v12 = v11[1];
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = *(_DWORD *)(a1 + 16);
  if (v14 < 2)
  {
    v17 = 0;
    if (v13)
    {
LABEL_33:
      *(_QWORD *)&v230 = v13;
      *((_QWORD *)&v230 + 1) = v12;
      v231 = v9;
      v232 = v10;
      v233 = v17;
      v234 = v14 - 1;
      a5 = sub_1C47E9C18(a1 + 1088, (unint64_t)&v230);
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    v19 = **(unsigned int **)(a1 + 800);
    v20 = **(unsigned int **)(a1 + 944);
    v21 = v13;
    do
    {
      v22 = *(_QWORD *)(a1 + 8) + v15;
      if (*(_DWORD *)(v22 + 44) == 1)
      {
        v13 = *(_QWORD *)(v22 + 24);
        v23 = *(unsigned int *)(v22 + 32);
      }
      else
      {
        v13 = 0;
        v23 = 0;
      }
      v9 = *(unsigned int *)(*(_QWORD *)(a1 + 800) + 4 * v16 + 4);
      v10 = *(unsigned int *)(*(_QWORD *)(a1 + 944) + 4 * v16 + 4);
      if (a3 && !v13)
      {
        v23 = v12;
        if (!*(_DWORD *)(a1 + 1096))
          v17 = 0;
        v13 = v21;
        v9 = v19;
        v10 = v20;
      }
      if ((_DWORD)v9 == (_DWORD)v19 && (_DWORD)v10 == (_DWORD)v20 && v13 == v21 && (_DWORD)v23 == (_DWORD)v12)
      {
        v13 = v21;
        LODWORD(v10) = v20;
        LODWORD(v9) = v19;
      }
      else
      {
        if (v21)
        {
          *(_QWORD *)&v230 = v21;
          *((_QWORD *)&v230 + 1) = v12;
          v231 = v19;
          v232 = v20;
          v233 = v17;
          v234 = v16;
          a5 = sub_1C47E9C18(a1 + 1088, (unint64_t)&v230);
          v14 = *(_DWORD *)(a1 + 16);
          v17 = v18;
        }
        else
        {
          v17 = v16 + 1;
        }
        v12 = v23 | v12 & 0xFFFFFFFF00000000;
        v19 = v9;
        v20 = v10;
        v21 = v13;
      }
      ++v18;
      v27 = v16 + 2;
      ++v16;
      v15 += 24;
    }
    while (v27 < v14);
    if (v13)
      goto LABEL_33;
  }
  if (!*(_DWORD *)(a1 + 1096))
    goto LABEL_263;
  v28 = *(_DWORD *)(a1 + 1624);
  if (v28 || *(_DWORD *)(a1 + 1628))
  {
    v29 = *(_DWORD *)(a1 + 1632);
    v30 = *(_QWORD *)(a1 + 1616);
    v31 = v30 + 56 * v29;
    if (v29 <= 4 * v28 || v29 < 0x41)
    {
      if (v29)
      {
        do
        {
          *(_QWORD *)v30 = 0;
          *(_DWORD *)(v30 + 8) = -1;
          *(_DWORD *)(v30 + 16) = -1;
          v30 += 56;
        }
        while (v30 != v31);
      }
      *(_QWORD *)(a1 + 1624) = 0;
    }
    else if (v28)
    {
      v32 = 1 << (33 - __clz(v28 - 1));
      if (v32 <= 64)
        v33 = 64;
      else
        v33 = v32;
      if (v33 == v29)
      {
        *(_QWORD *)(a1 + 1624) = 0;
        do
        {
          *(_OWORD *)v30 = xmmword_1C6429E90;
          *(_DWORD *)(v30 + 16) = -1;
          v30 += 56;
        }
        while (v30 != v31);
      }
      else
      {
        MEMORY[0x1CAA32FB4](a5);
        v34 = (4 * v33 / 3u + 1) | ((unint64_t)(4 * v33 / 3u + 1) >> 1);
        v35 = v34 | (v34 >> 2) | ((v34 | (v34 >> 2)) >> 4);
        LODWORD(v35) = (((v35 | (v35 >> 8)) >> 16) | v35 | (v35 >> 8)) + 1;
        *(_DWORD *)(a1 + 1632) = v35;
        v36 = (char *)operator new(56 * v35, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1616) = v36;
        *(_QWORD *)(a1 + 1624) = 0;
        v37 = *(_DWORD *)(a1 + 1632);
        if (v37)
        {
          v38 = &v36[56 * v37];
          do
          {
            *(_OWORD *)v36 = xmmword_1C6429E90;
            *((_DWORD *)v36 + 4) = -1;
            v36 += 56;
          }
          while (v36 != v38);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](a5);
      *(_QWORD *)(a1 + 1616) = 0;
      *(_QWORD *)(a1 + 1624) = 0;
      *(_DWORD *)(a1 + 1632) = 0;
    }
  }
  v39 = *(unsigned int *)(a1 + 1096);
  if ((_DWORD)v39)
  {
    v40 = *(uint64_t **)(a1 + 1088);
    v41 = &v40[4 * v39];
    while (1)
    {
      v42 = *((_DWORD *)v40 + 4) + ((*((_DWORD *)v40 + 5) == 0) << 6);
      v230 = *(_OWORD *)v40;
      v231 = v42;
      v235 = 0;
      v43 = sub_1C47E9CB0(*(_QWORD *)(a1 + 1616), *(_DWORD *)(a1 + 1632), (uint64_t)&v230, &v235);
      v44 = v235;
      if (!v43)
        break;
      v45 = *(_DWORD *)(v235 + 48);
      v46 = *(_DWORD *)(v235 + 52);
LABEL_70:
      v51 = *v40;
      *(_DWORD *)(v44 + 32) = *((_DWORD *)v40 + 2);
      *(_QWORD *)(v44 + 24) = v51;
      *(_QWORD *)(v44 + 40) = v40[2];
      *(_DWORD *)(v44 + 48) = v45 + 1;
      v52 = *((_DWORD *)v40 + 6);
      if (v52 >= v46)
        v52 = v46;
      *(_DWORD *)(v44 + 52) = v52;
      v40 += 4;
      if (v40 == v41)
        goto LABEL_103;
    }
    *(_QWORD *)v236 = v235;
    v47 = *(_DWORD *)(a1 + 1624);
    v48 = *(unsigned int *)(a1 + 1632);
    if (4 * v47 + 4 >= (3 * v48))
    {
      v49 = 2 * v48;
    }
    else
    {
      v49 = *(_DWORD *)(a1 + 1632);
      if ((int)v48 + ~v47 - *(_DWORD *)(a1 + 1628) > v48 >> 3)
      {
LABEL_62:
        *(_DWORD *)(a1 + 1624) = v47 + 1;
        if (*(_QWORD *)v44)
          v50 = 0;
        else
          v50 = *(_DWORD *)(v44 + 8) == -1;
        if (!v50 || *(_DWORD *)(v44 + 16) != -1)
          --*(_DWORD *)(a1 + 1628);
        v45 = 0;
        *(_QWORD *)v44 = v230;
        *(_DWORD *)(v44 + 8) = DWORD2(v230);
        *(_DWORD *)(v44 + 16) = v42;
        *(_QWORD *)(v44 + 24) = 0;
        *(_DWORD *)(v44 + 32) = 0;
        *(_OWORD *)(v44 + 40) = xmmword_1C6429EA0;
        v46 = -1;
        goto LABEL_70;
      }
    }
    v53 = *(_QWORD *)(a1 + 1616);
    v54 = (v49 - 1) | ((unint64_t)(v49 - 1) >> 1);
    v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
    v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
    if ((v56 + 1) > 0x40)
      v57 = v56 + 1;
    else
      v57 = 64;
    *(_DWORD *)(a1 + 1632) = v57;
    v58 = (char *)operator new(56 * v57, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 1616) = v58;
    if (v53)
    {
      *(_QWORD *)(a1 + 1624) = 0;
      v59 = *(_DWORD *)(a1 + 1632);
      v60 = (__n128)xmmword_1C6429E90;
      if (v59)
      {
        v61 = &v58[56 * v59];
        do
        {
          *(_OWORD *)v58 = xmmword_1C6429E90;
          *((_DWORD *)v58 + 4) = -1;
          v58 += 56;
        }
        while (v58 != v61);
      }
      if ((_DWORD)v48)
      {
        v62 = 56 * v48;
        v63 = v53;
        while (1)
        {
          v64 = *(_DWORD *)(v63 + 8);
          if (*(_QWORD *)v63 || v64 != -1)
            break;
          if (*(_DWORD *)(v63 + 16) != -1)
            goto LABEL_96;
LABEL_97:
          v63 += 56;
          v62 -= 56;
          if (!v62)
            goto LABEL_98;
        }
        if (*(_QWORD *)v63)
          v66 = 0;
        else
          v66 = v64 == -2;
        if (v66 && *(_DWORD *)(v63 + 16) == -2)
          goto LABEL_97;
LABEL_96:
        *(_QWORD *)&v223 = 0;
        sub_1C47E9CB0(*(_QWORD *)(a1 + 1616), *(_DWORD *)(a1 + 1632), v63, &v223);
        v67 = v223;
        v68 = *(_QWORD *)v63;
        *(_DWORD *)(v223 + 8) = *(_DWORD *)(v63 + 8);
        *(_QWORD *)v67 = v68;
        *(_DWORD *)(v67 + 16) = *(_DWORD *)(v63 + 16);
        v60 = *(__n128 *)(v63 + 40);
        *(_OWORD *)(v67 + 24) = *(_OWORD *)(v63 + 24);
        *(__n128 *)(v67 + 40) = v60;
        ++*(_DWORD *)(a1 + 1624);
        goto LABEL_97;
      }
LABEL_98:
      MEMORY[0x1CAA32FB4](v53, 8, v60);
      v58 = *(char **)(a1 + 1616);
      v69 = *(_DWORD *)(a1 + 1632);
    }
    else
    {
      *(_QWORD *)(a1 + 1624) = 0;
      v69 = *(_DWORD *)(a1 + 1632);
      if (v69)
      {
        v70 = v58;
        do
        {
          *(_OWORD *)v70 = xmmword_1C6429E90;
          *((_DWORD *)v70 + 4) = -1;
          v70 += 56;
        }
        while (v70 != &v58[56 * v69]);
      }
    }
    sub_1C47E9CB0((uint64_t)v58, v69, (uint64_t)&v230, v236);
    v47 = *(_DWORD *)(a1 + 1624);
    v44 = *(_QWORD *)v236;
    goto LABEL_62;
  }
LABEL_103:
  *(_DWORD *)(a1 + 1648) = 0;
  v71 = *(_QWORD *)(a1 + 1616);
  v72 = *(unsigned int *)(a1 + 1632);
  v73 = v71 + 56 * v72;
  if (*(_DWORD *)(a1 + 1624))
  {
    if ((_DWORD)v72)
    {
      v74 = 56 * v72;
      v75 = *(_QWORD *)(a1 + 1616);
      while (1)
      {
        v76 = *(_DWORD *)(v75 + 8);
        if (*(_QWORD *)v75)
          v77 = 0;
        else
          v77 = v76 == -1;
        if (v77)
        {
          if (*(_DWORD *)(v75 + 16) != -1)
            goto LABEL_121;
        }
        else
        {
          if (*(_QWORD *)v75)
            v78 = 0;
          else
            v78 = v76 == -2;
          if (!v78 || *(_DWORD *)(v75 + 16) != -2)
            goto LABEL_121;
        }
        v75 += 56;
        v74 -= 56;
        if (!v74)
          goto LABEL_119;
      }
    }
    v75 = *(_QWORD *)(a1 + 1616);
  }
  else
  {
LABEL_119:
    v75 = v71 + 56 * v72;
  }
LABEL_121:
  v79 = (__int128 **)(a1 + 1640);
  v80 = v71 + 56 * v72;
  if (v75 == v80)
  {
    v95 = *v79;
    v94 = (uint64_t)*v79;
LABEL_151:
    v96 = 0;
    goto LABEL_152;
  }
  LODWORD(v81) = 0;
  do
  {
    v82 = (char *)(v75 + 24);
    v83 = *(__int128 **)(a1 + 1640);
    if (v81 >= *(_DWORD *)(a1 + 1652))
    {
      v90 = v81 + 1;
      v91 = (unint64_t)&v83[2 * v81];
      if (v83 <= (__int128 *)v82 && v91 > (unint64_t)v82)
      {
        v93 = (char *)(v82 - (char *)v83);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1640, a1 + 1656, v90, 32);
        v83 = *v79;
        v82 = &v93[(_QWORD)*v79];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1640, a1 + 1656, v90, 32);
        v83 = *v79;
      }
    }
    v84 = &v83[2 * *(unsigned int *)(a1 + 1648)];
    v85 = *((_OWORD *)v82 + 1);
    *v84 = *(_OWORD *)v82;
    v84[1] = v85;
    v81 = (*(_DWORD *)(a1 + 1648) + 1);
    *(_DWORD *)(a1 + 1648) = v81;
    v86 = v75 + 56;
    v75 = v73;
    if (v86 != v73)
    {
      v75 = v86;
      do
      {
        v87 = *(_DWORD *)(v75 + 8);
        if (*(_QWORD *)v75)
          v88 = 0;
        else
          v88 = v87 == -1;
        if (v88)
        {
          if (*(_DWORD *)(v75 + 16) != -1)
            goto LABEL_140;
        }
        else
        {
          if (*(_QWORD *)v75)
            v89 = 0;
          else
            v89 = v87 == -2;
          if (!v89 || *(_DWORD *)(v75 + 16) != -2)
            goto LABEL_140;
        }
        v75 += 56;
      }
      while (v75 != v73);
      v75 = v73;
    }
LABEL_140:
    ;
  }
  while (v75 != v80);
  v94 = (uint64_t)*v79;
  v95 = &(*v79)[2 * v81];
  if (!(_DWORD)v81)
    goto LABEL_151;
  v96 = 126 - 2 * __clz(v81);
LABEL_152:
  sub_1C48E3304(v94, v95, v96, 1);
  v97 = a4;
  if (a4)
    *a4 = 0;
  if (v214 == 5)
  {
    v224 = v228;
    if (v228)
    {
      llvm::MetadataTracking::track((uint64_t)&v224, v228, 2);
      v97 = a4;
    }
    v98 = v229;
    v225 = v229;
    v99 = *(unsigned int *)(a1 + 1648);
    if ((_DWORD)v99)
    {
      v100 = *(_QWORD *)(a1 + 1640) + 32 * v99;
      v101 = *(unsigned int *)(a1 + 16);
      v102 = 32 * v99;
      v103 = *(_QWORD *)(a1 + 1640);
LABEL_159:
      v104 = v102;
      v105 = *(_QWORD *)(a1 + 1640);
      while (1)
      {
        if ((_DWORD)v101 == *(_DWORD *)(v105 + 16) + *(_DWORD *)(v103 + 16))
        {
          v106 = *(_DWORD *)(v105 + 20);
          if (*(_DWORD *)(v103 + 20) != v106)
            break;
        }
        v105 += 32;
        v104 -= 32;
        if (!v104)
        {
          v103 += 32;
          if (v103 != v100)
            goto LABEL_159;
          goto LABEL_188;
        }
      }
      if (v106)
        v107 = v105;
      else
        v107 = v103;
      if (v106)
        v108 = v103;
      else
        v108 = v105;
      if (!(_DWORD)v101)
      {
LABEL_269:
        if (v97)
        {
          if (v212)
            v192 = *v97 + 1;
          else
            v192 = *v97 + 4;
          *v97 = v192;
        }
        v193 = sub_1C4885524(0, 242, *(_BYTE **)(a1 + 2184));
        v194 = *(_QWORD *)(a1 + 2168);
        *(_QWORD *)&v230 = v224;
        if (v224)
        {
          llvm::MetadataTracking::track((uint64_t)&v230, v224, 2);
          v98 = v225;
        }
        DWORD2(v230) = v98;
        LODWORD(v223) = 0;
        v236[0] = 0;
        LODWORD(v235) = 32;
        v226 = sub_1C613CC70(v194, v193, (uint64_t)&v230, v214, v213, 0, (uint64_t *)v108, (unsigned int *)&v223, (__int128 *)v107, v236, (unsigned int *)(v108 + 16), (int *)&v235);
        LODWORD(v227) = 0;
        if ((_QWORD)v230)
          llvm::MetadataTracking::untrack((uint64_t)&v230, (unsigned __int8 *)v230);
        v113 = 1;
        v97 = a4;
        goto LABEL_189;
      }
      v109 = 0;
      v110 = 0;
LABEL_173:
      v111 = *(_QWORD *)(a1 + 8) + 24 * v109;
      v112 = v109;
      do
      {
        if (*(_DWORD *)(v111 + 20) != 1
          || (*(_QWORD *)v108 != *(_QWORD *)v111
           || *(_DWORD *)(v108 + 8) != *(_DWORD *)(v111 + 8)
           || *(_DWORD *)(*(_QWORD *)(a1 + 944) + 4 * v112) != *(_DWORD *)(v108 + 20)
           || *(_DWORD *)(*(_QWORD *)(a1 + 800) + 4 * v112) != *(_DWORD *)(v108 + 16))
          && (*(_QWORD *)v107 != *(_QWORD *)v111
           || *(_DWORD *)(v107 + 8) != *(_DWORD *)(v111 + 8)
           || *(_DWORD *)(*(_QWORD *)(a1 + 944) + 4 * v112) != *(_DWORD *)(v107 + 20)
           || *(_DWORD *)(*(_QWORD *)(a1 + 800) + 4 * v112) != *(_DWORD *)(v107 + 16)))
        {
          v109 = v112 + 1;
          v110 = 1;
          if (v101 - 1 != v112)
            goto LABEL_173;
          goto LABEL_188;
        }
        v111 += 24;
        ++v112;
      }
      while (v101 != v112);
      if ((v110 & 1) == 0)
        goto LABEL_269;
    }
LABEL_188:
    v113 = 0;
LABEL_189:
    if (v224)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v224, v224);
      v97 = a4;
      if ((v113 & 1) != 0)
        goto LABEL_265;
    }
    else if (v113)
    {
      goto LABEL_265;
    }
  }
  v114 = *(unsigned int *)(a1 + 1096);
  if (!(_DWORD)v114)
    goto LABEL_264;
  v115 = 0;
  v116 = *(_QWORD *)(a1 + 1088);
  v117 = v116 + 32 * v114;
  if (v212)
    v118 = 1;
  else
    v118 = 4;
  v119 = (int32x4_t)xmmword_1C6429EB0;
  v120.i64[0] = 0x100000001;
  v120.i64[1] = 0x100000001;
  v121.i64[0] = 0x400000004;
  v121.i64[1] = 0x400000004;
  do
  {
    v122 = v117;
    v124 = (unsigned int *)(v117 - 16);
    v123 = *(_DWORD *)(v117 - 16);
    v117 -= 32;
    v125 = v226;
    v126 = v124[3];
    v127 = v126 + 1;
    if (v226)
      v128 = 0;
    else
      v128 = v123 == 0;
    if (v128 && *(_DWORD *)(a1 + 16) == v127)
    {
      v226 = *(_QWORD **)v117;
      LODWORD(v227) = *(_DWORD *)(v117 + 8);
      v129 = *(_DWORD *)(v122 - 8);
      if (v129)
      {
        v130 = (v129 + 3) & 0xFFFFFFFC;
        v131 = (uint32x4_t)vdupq_n_s32(v129 - 1);
        v132 = (int8x16_t)v115;
        v133 = v119;
        do
        {
          v134 = (uint32x4_t)v133;
          v135 = v132;
          v132 = vorrq_s8((int8x16_t)vshlq_u32(v120, (uint32x4_t)v133), v132);
          v133 = vaddq_s32(v133, v121);
          v130 -= 4;
        }
        while (v130);
        v136 = vbslq_s8((int8x16_t)vcgtq_u32(v134, v131), v135, v132);
        *(int8x8_t *)v136.i8 = vorr_s8(*(int8x8_t *)v136.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
        v115 = v136.i32[0] | v136.i32[1];
      }
      continue;
    }
    if (*(_DWORD *)(v122 - 12))
    {
      v156 = *(_DWORD *)(v122 - 8);
      v157 = v156 - v123;
      if (v156 > v123)
      {
        v158 = 0;
        v159 = (uint32x4_t)vdupq_n_s32(v157 - 1);
        v160 = (int8x16_t)v115;
        v161 = vaddq_s32(vdupq_n_s32(v123), v119);
        do
        {
          v162 = v160;
          v160 = vorrq_s8((int8x16_t)vshlq_u32(v120, (uint32x4_t)v161), v160);
          v158 += 4;
          v161 = vaddq_s32(v161, v121);
        }
        while (((v157 + 3) & 0xFFFFFFFC) != v158);
        v163 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v158 - 4), (int8x16_t)v119), v159), v162, v160);
        v164 = vorr_s8(*(int8x8_t *)v163.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
        v115 = v164.i32[0] | v164.i32[1];
      }
      v165 = v127 - v123;
      if (v156 <= v126)
      {
        v166 = 0;
        if (v156 + 1 > v127)
          v127 = v156 + 1;
        v167 = v127 - v156;
        v168 = (v127 - v156 + 3) & 0xFFFFFFFC;
        v169 = (uint32x4_t)vdupq_n_s32(v167 - 1);
        v170.i64[1] = -1;
        v170.i64[0] = v115 | 0xFFFFFFFF00000000;
        v171 = vaddq_s32(vdupq_n_s32(v156), v119);
        do
        {
          v172 = v170;
          v170 = vbicq_s8(v170, (int8x16_t)vshlq_u32(v120, (uint32x4_t)v171));
          v166 += 4;
          v171 = vaddq_s32(v171, v121);
        }
        while (v168 != v166);
        v173 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v166 - 4), (int8x16_t)v119), v169), v172, v170);
        v174 = vand_s8(*(int8x8_t *)v173.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL));
        v115 = v174.i32[0] & v174.i32[1];
      }
      v127 = v165;
    }
    else
    {
      v137 = *(_DWORD *)(v122 - 8);
      if (v137)
      {
        v138 = (v137 + 3) & 0xFFFFFFFC;
        v139 = (uint32x4_t)vdupq_n_s32(v137 - 1);
        v140 = (int8x16_t)v115;
        v141 = v119;
        do
        {
          v142 = (uint32x4_t)v141;
          v143 = v140;
          v140 = vorrq_s8((int8x16_t)vshlq_u32(v120, (uint32x4_t)v141), v140);
          v141 = vaddq_s32(v141, v121);
          v138 -= 4;
        }
        while (v138);
        v144 = vbslq_s8((int8x16_t)vcgtq_u32(v142, v139), v143, v140);
        v145 = vorr_s8(*(int8x8_t *)v144.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
        v115 = v145.i32[0] | v145.i32[1];
      }
      if (v137 <= v126)
      {
        v146 = 0;
        if (v137 + 1 > v127)
          v147 = v137 + 1;
        else
          v147 = v127;
        v148 = v147 - v137;
        v149 = (v147 - v137 + 3) & 0xFFFFFFFC;
        v150 = (uint32x4_t)vdupq_n_s32(v148 - 1);
        v151.i64[1] = -1;
        v151.i64[0] = v115 | 0xFFFFFFFF00000000;
        v152 = vaddq_s32(vdupq_n_s32(v137), v119);
        do
        {
          v153 = v151;
          v151 = vbicq_s8(v151, (int8x16_t)vshlq_u32(v120, (uint32x4_t)v152));
          v146 += 4;
          v152 = vaddq_s32(v152, v121);
        }
        while (v149 != v146);
        v154 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v146 - 4), (int8x16_t)v119), v150), v153, v151);
        v155 = vand_s8(*(int8x8_t *)v154.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL));
        v115 = v155.i32[0] & v155.i32[1];
      }
    }
    v175 = v127 & ~(v127 >> 31);
    if (*(_DWORD *)(a1 + 16) < v175)
      v175 = *(_DWORD *)(a1 + 16);
    v236[0] = v175;
    v230 = *(_OWORD *)v117;
    *(_QWORD *)&v223 = sub_1C6366AB4(*(_QWORD *)(a1 + 2168), 0, (const llvm::APInt *)&v228, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v223 + 1) = v176;
    if (*(_DWORD *)(v122 - 12))
      v177 = 67;
    else
      v177 = 71;
    if (v125)
    {
      if (v214 == 5)
      {
        if (*(_WORD *)(v230 + 24) == 199)
        {
          v180 = *(_QWORD *)(v230 + 32);
          v181 = *(_DWORD *)(v180 + 8);
          *(_QWORD *)&v230 = *(_QWORD *)v180;
          DWORD2(v230) = v181;
          v183 = 251;
        }
        else
        {
          v183 = 242;
        }
      }
      else
      {
        v183 = 381;
      }
      v188 = sub_1C4885524(v177, v183, *(_BYTE **)(a1 + 2184));
      sub_1C48E007C(*(_QWORD *)(a1 + 2176), v230, *((uint64_t *)&v230 + 1), (uint64_t)&v230, (uint64_t)&v223);
      v189 = *(_QWORD *)(a1 + 2168);
      v219 = v228;
      if (v228)
        llvm::MetadataTracking::track((uint64_t)&v219, v228, 2);
      v220 = v229;
      LODWORD(v235) = 0;
      v226 = sub_1C613E5D0(v189, v188, (uint64_t)&v219, v214, v213, 0, (uint64_t *)&v226, (unsigned int *)&v235, &v230, &v223, v124, (int *)v236);
      LODWORD(v227) = 0;
      v186 = v219;
      if (!v219)
        goto LABEL_258;
      v187 = &v219;
    }
    else
    {
      if (v214 == 5)
      {
        if (*(_WORD *)(v230 + 24) == 199)
        {
          v178 = *(_QWORD *)(v230 + 32);
          v179 = *(_DWORD *)(v178 + 8);
          *(_QWORD *)&v230 = *(_QWORD *)v178;
          DWORD2(v230) = v179;
          v182 = 226;
        }
        else
        {
          v182 = 221;
        }
      }
      else
      {
        v182 = 324;
      }
      v184 = sub_1C4885524(v177, v182, *(_BYTE **)(a1 + 2184));
      sub_1C48E007C(*(_QWORD *)(a1 + 2176), v230, *((uint64_t *)&v230 + 1), (uint64_t)&v230, (uint64_t)&v223);
      v185 = *(_QWORD *)(a1 + 2168);
      v221 = v228;
      if (v228)
        llvm::MetadataTracking::track((uint64_t)&v221, v228, 2);
      v222 = v229;
      LODWORD(v235) = 0;
      v226 = sub_1C613E4E8(v185, v184, (uint64_t)&v221, v214, v213, 0, (int *)&v235, &v230, (uint64_t *)&v223, v124, (int *)v236);
      LODWORD(v227) = 0;
      v186 = v221;
      if (!v221)
        goto LABEL_258;
      v187 = &v221;
    }
    llvm::MetadataTracking::untrack((uint64_t)v187, v186);
LABEL_258:
    v97 = a4;
    if (a4)
      *a4 += v118;
    v119 = (int32x4_t)xmmword_1C6429EB0;
    v120.i64[0] = 0x100000001;
    v120.i64[1] = 0x100000001;
    v121.i64[0] = 0x400000004;
    v121.i64[1] = 0x400000004;
  }
  while (v117 != v116);
  if ((a3 & 1) == 0 && v115)
  {
LABEL_263:
    v190 = 0;
    goto LABEL_266;
  }
LABEL_264:
  if ((a3 & 1) != 0)
  {
    v195 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v195)
    {
      v197 = 0;
      v196 = 0;
      v198 = (int *)(*(_QWORD *)(a1 + 8) + 20);
      do
      {
        v199 = *v198;
        v198 += 6;
        if (v199 == 1)
          v200 = 1 << v197;
        else
          v200 = 0;
        v196 |= v200;
        ++v197;
      }
      while (v195 != v197);
    }
    else
    {
      v196 = 0;
    }
    if (v97)
      ++*v97;
    v217 = v228;
    if (v228)
      llvm::MetadataTracking::track((uint64_t)&v217, v228, 2);
    v218 = v229;
    v201 = (uint64_t)v226;
    v202 = v227;
    v203 = sub_1C6366AB4(*(_QWORD *)(a1 + 2168), v196, (const llvm::APInt *)&v217, v214, v213, 0, 0);
    v205 = v204;
    if (v214 == 5 && (v196 - 256) >> 8 <= 0xFE)
    {
      v203 = sub_1C48DC2A8(*(_QWORD *)(a1 + 2176), (uint64_t)v203);
      v205 = v205 & 0xFFFFFFFF00000000 | v206;
    }
    sub_1C612E190(*(_QWORD *)(a1 + 2168), v211, 0, (uint64_t)v203);
    v208 = 0;
    v209 = *(_QWORD *)(a1 + 2168);
    v210 = *(_QWORD *)(v209 + 832);
    if (v210)
      v208 = *(_WORD *)(v210 + 8);
    v190 = sub_1C5D56C70(v209, 171, (const llvm::APInt *)&v217, v214, v213, v201, v202, v207, (uint64_t)v203, v205, v208);
    sub_1C612E190(*(_QWORD *)(a1 + 2168), v211, 0, (uint64_t)v190);
    if (v217)
      llvm::MetadataTracking::untrack((uint64_t)&v217, v217);
  }
  else
  {
LABEL_265:
    v190 = v226;
  }
LABEL_266:
  if (v228)
    llvm::MetadataTracking::untrack((uint64_t)&v228, v228);
  return v190;
}

uint64_t sub_1C48E32BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 35 && v4 != 11)
    return 0;
  v6 = *(_QWORD *)(a2 + 80);
  v7 = (_QWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (_QWORD *)*v7;
  *a4 = *v7;
  return 1;
}

void sub_1C48E3304(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  __int128 *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  unsigned int v31;
  __int128 *v32;
  __int128 v33;
  BOOL v34;
  _DWORD *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  __int128 *v44;
  unsigned int *j;
  __int128 v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  __int128 *v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  __int128 *v56;
  __int128 *v57;
  __int128 *v58;
  unsigned int v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  unsigned int v74;
  __int128 v75;
  __int128 *v76;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  unsigned int v89;
  __int128 v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  unsigned int v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  BOOL v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  __int128 v135;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  __int128 v142;
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;

BOOL sub_1C48E3E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      v7 = *(_DWORD *)(a1 + 24);
      if (v6 > v7 || v6 >= v7 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 28))
      {
        v8 = (__int128 *)(a2 - 32);
        v10 = *(_OWORD *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v11;
        *v8 = v10;
        v8[1] = v9;
      }
      return result;
    case 3:
      sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_1C47EACFC(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v25 = (__int128 *)(a1 + 32);
      v26 = (__int128 *)(a1 + 64);
      v27 = (__int128 *)(a1 + 96);
      sub_1C47EACFC(a1, a1 + 32, a1 + 64, a1 + 96);
      v28 = *(_DWORD *)(a2 - 8);
      v29 = *(_DWORD *)(a1 + 120);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 124))
      {
        v30 = (_OWORD *)(a2 - 32);
        v32 = *v27;
        v31 = *(_OWORD *)(a1 + 112);
        v33 = *(_OWORD *)(a2 - 16);
        *v27 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v33;
        *v30 = v32;
        v30[1] = v31;
        v34 = *(_DWORD *)(a1 + 120);
        v35 = *(_DWORD *)(a1 + 88);
        if (v34 > v35 || v34 >= v35 && *(_DWORD *)(a1 + 124) < *(_DWORD *)(a1 + 92))
        {
          v37 = *v26;
          v36 = *(_OWORD *)(a1 + 80);
          v38 = *(_OWORD *)(a1 + 112);
          *v26 = *v27;
          *(_OWORD *)(a1 + 80) = v38;
          *v27 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          v39 = *(_DWORD *)(a1 + 88);
          v40 = *(_DWORD *)(a1 + 56);
          if (v39 > v40 || v39 >= v40 && *(_DWORD *)(a1 + 92) < *(_DWORD *)(a1 + 60))
          {
            v42 = *v25;
            v41 = *(_OWORD *)(a1 + 48);
            v43 = *(_OWORD *)(a1 + 80);
            *v25 = *v26;
            *(_OWORD *)(a1 + 48) = v43;
            *v26 = v42;
            *(_OWORD *)(a1 + 80) = v41;
            v44 = *(_DWORD *)(a1 + 56);
            v45 = *(_DWORD *)(a1 + 24);
            if (v44 > v45 || v44 >= v45 && *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 28))
            {
              v47 = *(_OWORD *)a1;
              v46 = *(_OWORD *)(a1 + 16);
              v48 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 16) = v48;
              *v25 = v47;
              *(_OWORD *)(a1 + 48) = v46;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 64;
      sub_1C47EA8F8((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v13 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_DWORD *)(v13 + 24);
    v17 = *(_DWORD *)(v12 + 24);
    if (v16 > v17)
      break;
    if (v16 >= v17)
    {
      v18 = *(_DWORD *)(v13 + 28);
      if (v18 < *(_DWORD *)(v12 + 28))
        goto LABEL_10;
    }
LABEL_20:
    v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2)
      return 1;
  }
  v18 = *(_DWORD *)(v13 + 28);
LABEL_10:
  v50 = *(_QWORD *)(v13 + 16);
  v49 = *(_OWORD *)v13;
  v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  v20 = a1;
  if (v12 != a1)
  {
    v21 = v14;
    while (1)
    {
      v22 = (_OWORD *)(a1 + v21);
      v23 = *(_DWORD *)(a1 + v21 + 56);
      if (v16 <= v23)
      {
        if (v16 < v23)
        {
          v20 = a1 + v21 + 64;
          goto LABEL_19;
        }
        if (v18 >= *(_DWORD *)(a1 + v21 + 60))
          break;
      }
      v12 -= 32;
      v24 = v22[3];
      v22[4] = v22[2];
      v22[5] = v24;
      v21 -= 32;
      if (v21 == -64)
      {
        v20 = a1;
        goto LABEL_19;
      }
    }
    v20 = v12;
  }
LABEL_19:
  *(_QWORD *)(v20 + 16) = v50;
  *(_OWORD *)v20 = v49;
  *(_DWORD *)(v20 + 24) = v16;
  *(_DWORD *)(v20 + 28) = v18;
  if (++v15 != 8)
    goto LABEL_20;
  return v13 + 32 == a2;
}

void *sub_1C48E4120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int *a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = a3;
  v13[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v14 = *a5;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a6;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

void *sub_1C48E42A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, __int128 *a7, unsigned int *a8, int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *result;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 *v45;
  uint64_t v46;

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v45 = 0;
  v46 = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)&v45, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v45)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v43 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v43;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  v27 = *(_DWORD *)(a2 + 12);
  v28 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v28;
  v29 = *a7;
  if (v28 >= v27)
  {
    v44 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v28 + 1, 16);
    v29 = v44;
    LODWORD(v28) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v28) = v29;
  ++*(_DWORD *)(a2 + 8);
  v30 = *a8;
  v45 = 0;
  v46 = 0;
  v31 = sub_1C6366AB4(a1, v30, (const llvm::APInt *)&v45, (llvm *)6, 0, 1, 0);
  v33 = v32;
  v34 = *(unsigned int *)(a2 + 8);
  if (v34 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v34 + 1, 16);
    LODWORD(v34) = *(_DWORD *)(a2 + 8);
  }
  v35 = (_QWORD *)(*(_QWORD *)a2 + 16 * v34);
  *v35 = v31;
  v35[1] = v33;
  ++*(_DWORD *)(a2 + 8);
  if (v45)
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  v36 = *a9;
  v45 = 0;
  v46 = 0;
  result = sub_1C6366AB4(a1, v36, (const llvm::APInt *)&v45, (llvm *)6, 0, 1, 0);
  v38 = result;
  v40 = v39;
  v41 = *(unsigned int *)(a2 + 8);
  if (v41 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v41 + 1, 16);
    LODWORD(v41) = *(_DWORD *)(a2 + 8);
  }
  v42 = (_QWORD *)(*(_QWORD *)a2 + 16 * v41);
  *v42 = v38;
  v42[1] = v40;
  ++*(_DWORD *)(a2 + 8);
  if (v45)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  return result;
}

unint64_t sub_1C48E4544(uint64_t *a1, uint64_t a2, _BOOL8 a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint8x8_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  char *v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t j;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t *p_src;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  int64_t v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  void *v116;
  unsigned int v117;
  __int128 v118;
  uint64_t v119;
  unsigned int v120;
  void *__src;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  void *v125;
  unsigned int v126;
  uint64_t v127;
  _DWORD v128[182];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    v11 = 1;
    while (1)
    {
      if (*(_DWORD *)(v10 + 8) == a3)
      {
        if (!v11)
        {
          v12 = 0;
          goto LABEL_11;
        }
        --v11;
      }
      v10 = *(_QWORD *)(v10 + 32);
      if (!v10)
        goto LABEL_9;
    }
  }
  v11 = 1;
LABEL_9:
  v12 = 1;
LABEL_11:
  if (v11)
    v13 = 0;
  else
    v13 = v12;
  if (a5 && !v13)
    goto LABEL_133;
  v14 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 0xAB:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v15 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v15, &v118);
      v16 = sub_1C48E4544(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      if (*(_DWORD *)(a4 + 8))
      {
        v17 = 0;
        v18 = 0;
        do
        {
          if (((v112 >> v18) & 1) != 0)
          {
            v19 = *(_QWORD *)a4 + v17;
            v20 = *(_OWORD *)((char *)__src + v17);
            *(_QWORD *)(v19 + 16) = *(_QWORD *)((char *)__src + v17 + 16);
            *(_OWORD *)v19 = v20;
          }
          else
          {
            v21 = *(_QWORD *)a4 + v17;
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 16) = 0xFFFFFFFFLL;
          }
          ++v18;
          v17 += 24;
        }
        while (v18 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v16 + 1;
      v23 = (HIDWORD(v16) + 1);
      v24 = (uint64_t *)__src;
      goto LABEL_71;
    case 0xAC:
      goto LABEL_108;
    case 0xAD:
    case 0xAE:
    case 0xB0:
      goto LABEL_133;
    case 0xAF:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v36 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v36, &v118);
      v37 = sub_1C48E4544(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      v30 = HIDWORD(v37);
      v38 = v112;
      if (*(_DWORD *)(a4 + 8) > v112)
      {
        v39 = 0;
        v40 = 24 * v112;
        v41 = v112;
        do
        {
          v42 = *(_QWORD *)a4 + v40 + v39;
          v43 = *(_OWORD *)((char *)__src + v39);
          *(_QWORD *)(v42 + 16) = *(_QWORD *)((char *)__src + v39 + 16);
          *(_OWORD *)v42 = v43;
          ++v41;
          v39 += 24;
        }
        while (v41 < *(unsigned int *)(a4 + 8));
      }
      if (v38)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = *(_QWORD *)a4 + v44;
          *(_QWORD *)v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          *(_QWORD *)(v46 + 16) = 0xFFFFFFFFLL;
          ++v45;
          v44 += 24;
        }
        while (v45 < v112);
        if (v112 <= 4)
          v47 = 1;
        else
          v47 = 2;
        if (v112 <= 8)
          v48 = v47;
        else
          v48 = 4;
        if ((_DWORD)v112 == 16)
          v35 = 1;
        else
          v35 = v48;
      }
      else
      {
        v35 = 1;
      }
      LODWORD(v22) = v37 + 1;
      goto LABEL_69;
    case 0xB1:
      LODWORD(v112) = 0;
      if (((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112) & 1) == 0)goto LABEL_133;
      v49 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v49, &v118);
      v50 = sub_1C48E4544(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
      v51 = v112;
      LODWORD(v52) = v112;
      if (*(_DWORD *)(a4 + 8) != (_DWORD)v112)
      {
        v53 = 0;
        v54 = 1;
        do
        {
          v55 = (char *)__src + 24 * v51 + 24 * v54 - 24;
          v56 = *(_QWORD *)a4 + 24 * v53;
          v57 = *(_OWORD *)v55;
          *(_QWORD *)(v56 + 16) = *((_QWORD *)v55 + 2);
          *(_OWORD *)v56 = v57;
          v53 = v54;
          v52 = *(unsigned int *)(a4 + 8);
          v58 = v52 - v51 > (unint64_t)v54++;
        }
        while (v58);
      }
      v59 = (v52 - v51);
      if (v52 > v59)
      {
        v60 = 24 * v59;
        do
        {
          v61 = *(_QWORD *)a4 + v60;
          *(_QWORD *)v61 = 0;
          *(_DWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0xFFFFFFFFLL;
          ++v59;
          v60 += 24;
        }
        while (v59 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v50 + 1;
      v23 = (HIDWORD(v50) + 4);
      goto LABEL_70;
    default:
      if (v14 == 58)
      {
        LODWORD(v112) = 0;
        if (!(*(unsigned int (**)(uint64_t *, _QWORD, _QWORD, __int128 *))*a1)(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v112))goto LABEL_133;
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.i32[0] != 1)
          goto LABEL_133;
        v26 = __clz(v112);
        v27 = 31 - v26;
        v28 = *(unsigned int *)(a4 + 8);
        *(_QWORD *)&v118 = 0;
        DWORD2(v118) = 0;
        v119 = 0x1FFFFFFFFLL;
        sub_1C47EBB78(&__src, v28, &v118);
        v29 = sub_1C48E4544(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, (a5 + 1));
        v30 = HIDWORD(v29);
        if (*(_DWORD *)(a4 + 8) > 31 - v26)
        {
          v31 = 0;
          v32 = 31 - v26;
          do
          {
            v33 = *(_QWORD *)a4 + 24 * (31 - v26) + v31;
            v34 = *(_OWORD *)((char *)__src + v31);
            *(_QWORD *)(v33 + 16) = *(_QWORD *)((char *)__src + v31 + 16);
            *(_OWORD *)v33 = v34;
            ++v32;
            v31 += 24;
          }
          while (v32 < *(unsigned int *)(a4 + 8));
        }
        if (v26 == 31)
        {
          LODWORD(v22) = v29 + 1;
        }
        else
        {
          v62 = 0;
          if (v27 <= 1)
            v63 = 1;
          else
            v63 = 31 - v26;
          v64 = 24 * v63;
          do
          {
            v65 = *(_QWORD *)a4 + v62;
            *(_QWORD *)v65 = 0;
            *(_DWORD *)(v65 + 8) = 0;
            *(_QWORD *)(v65 + 16) = 0xFFFFFFFFLL;
            v62 += 24;
          }
          while (v64 != v62);
          LODWORD(v22) = v29 + 1;
          if (v26 == 15)
          {
            v35 = 1;
            goto LABEL_69;
          }
          if (v27 > 8)
          {
            v35 = 4;
            goto LABEL_69;
          }
        }
        if (v27 <= 4)
          v35 = 1;
        else
          v35 = 2;
LABEL_69:
        v23 = (v35 + v30);
LABEL_70:
        v24 = (uint64_t *)__src;
LABEL_71:
        if (v24 != &v123)
          free(v24);
        return v22 | (unint64_t)(v23 << 32);
      }
      if (v14 != 56)
        goto LABEL_133;
      for (i = 0; i != 64; i += 32)
      {
        v67 = (char *)&__src + i;
        *((_DWORD *)v67 + 2) = 1;
        *(_QWORD *)v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        *((_QWORD *)v67 + 2) = 0;
      }
      sub_1C6368768(a1[271], **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, (uint64_t)&v118);
      if (v122 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      __src = (void *)v118;
      v122 = DWORD2(v118);
      DWORD2(v118) = 0;
      if (v124 >= 0x41 && v123)
      {
        MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
        v123 = v119;
        v124 = v120;
        v120 = 0;
        if (DWORD2(v118) >= 0x41 && (_QWORD)v118)
          MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
      }
      else
      {
        v123 = v119;
        v124 = v120;
      }
      sub_1C6368768(a1[271], *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, (uint64_t)&v118);
      if (v126 >= 0x41 && v125)
        MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
      v125 = (void *)v118;
      v126 = DWORD2(v118);
      DWORD2(v118) = 0;
      if (v128[0] >= 0x41u && v127)
      {
        MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
        v127 = v119;
        v128[0] = v120;
        v120 = 0;
        if (DWORD2(v118) >= 0x41 && (_QWORD)v118)
          MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
      }
      else
      {
        v127 = v119;
        v128[0] = v120;
      }
      v68 = v122;
      v117 = v122;
      if (v122 > 0x40)
      {
        v72 = (((unint64_t)v122 + 63) >> 3) & 0x3FFFFFF8;
        v116 = (void *)operator new[]();
        memcpy(v116, __src, v72);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v116);
        v68 = v117;
        v71 = (unint64_t)v116;
      }
      else
      {
        v69 = ~(unint64_t)__src;
        if (v122)
          v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v122;
        else
          v70 = 0;
        v71 = v70 & v69;
        v116 = (void *)(v70 & v69);
      }
      v115 = v126;
      if (v126 <= 0x40)
      {
        if (v126)
          v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v126;
        else
          v73 = 0;
        v74 = v73 & ~(unint64_t)v125;
        goto LABEL_94;
      }
      v75 = (((unint64_t)v126 + 63) >> 3) & 0x3FFFFFF8;
      v114 = (void *)operator new[]();
      memcpy(v114, v125, v75);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v114);
      v76 = v115;
      v74 = (unint64_t)v114;
      if (v115 < 0x41)
      {
LABEL_94:
        v77 = (v74 & v71) != 0;
        goto LABEL_95;
      }
      v107 = 0;
      v108 = ((unint64_t)v115 + 63) >> 6;
      do
      {
        *(_QWORD *)(v74 + v107) &= *(_QWORD *)(v71 + v107);
        v107 += 8;
      }
      while (8 * v108 != v107);
      v109 = 0;
      do
      {
        v58 = v108-- < 1;
        if (v58)
          break;
        v110 = *(_QWORD *)(v74 + 8 * v108);
        v109 += __clz(v110);
      }
      while (!v110);
      v111 = v76 | 0xFFFFFFC0;
      if ((v76 & 0x3F) == 0)
        v111 = 0;
      v77 = v76 - v109 - v111 > 0x40 || *(_QWORD *)v74 != 0;
      if (v74)
        MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
LABEL_95:
      if (v68 >= 0x41 && v71)
        MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
      for (j = 0; j != -16; j -= 8)
      {
        v79 = (char *)&__src + j * 4;
        if (v128[j] >= 0x41u)
        {
          v80 = *((_QWORD *)v79 + 6);
          if (v80)
          {
            MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
            v79 = (char *)&__src + j * 4;
          }
        }
        if (*((_DWORD *)v79 + 10) >= 0x41u)
        {
          v81 = *((_QWORD *)v79 + 4);
          if (v81)
            MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
        }
      }
      if (v77)
        goto LABEL_133;
LABEL_108:
      v82 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v118 = 0;
      DWORD2(v118) = 0;
      v119 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&__src, v82, &v118);
      v83 = *(unsigned int *)(a4 + 8);
      *(_QWORD *)&v112 = 0;
      DWORD2(v112) = 0;
      v113 = 0x1FFFFFFFFLL;
      sub_1C47EBB78(&v118, v83, &v112);
      v23 = (a5 + 1);
      v22 = sub_1C48E4544(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), &__src, v23);
      v84 = sub_1C48E4544(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), &v118, v23);
      if (!*(_DWORD *)(a4 + 8))
      {
LABEL_115:
        v91 = HIDWORD(v22);
        LODWORD(v22) = v84 + v22;
        v23 = (HIDWORD(v84) + v91);
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 8))(a1))
          goto LABEL_127;
        if (*(_WORD *)(a2 + 24) != 56)
          goto LABEL_127;
        v92 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
        if (*(_WORD *)(v92 + 24) != 175)
          goto LABEL_127;
        v93 = *(_QWORD *)(*(_QWORD *)(v92 + 32) + 40);
        v94 = *(unsigned __int16 *)(v93 + 24);
        if (v94 != 35 && v94 != 11)
          goto LABEL_127;
        v96 = *(_QWORD *)(v93 + 80);
        v97 = (_QWORD *)(v96 + 24);
        if (*(_DWORD *)(v96 + 32) >= 0x41u)
          v97 = (_QWORD *)*v97;
        if (*v97 < 5uLL)
        {
          v98 = 0;
        }
        else
        {
LABEL_127:
          v98 = 0;
          LODWORD(v22) = v22 + 1;
          v23 = (v23 + 1);
        }
        goto LABEL_128;
      }
      v85 = 0;
      v86 = 0;
      break;
  }
  while (1)
  {
    v87 = (uint64_t)__src;
    if (!*(_DWORD *)((char *)__src + v85 + 20))
    {
      v87 = v118;
      goto LABEL_114;
    }
    if (*(_DWORD *)(v118 + v85 + 20))
      break;
LABEL_114:
    v88 = (__int128 *)(v87 + v85);
    v89 = *(_QWORD *)a4 + v85;
    v90 = *v88;
    *(_QWORD *)(v89 + 16) = *((_QWORD *)v88 + 2);
    *(_OWORD *)v89 = v90;
    ++v86;
    v85 += 24;
    if (v86 >= *(unsigned int *)(a4 + 8))
      goto LABEL_115;
  }
  v98 = 1;
LABEL_128:
  if ((uint64_t *)v118 != &v119)
    free((void *)v118);
  if (__src != &v123)
    free(__src);
  if (!v98)
    return v22 | (unint64_t)(v23 << 32);
LABEL_133:
  sub_1C6368768(a1[271], a2, a3, 0, (uint64_t)&__src);
  if (*(_DWORD *)(a4 + 8))
  {
    v99 = 0;
    v100 = 0;
    do
    {
      if (v122 >= 0x41)
        p_src = (unint64_t *)__src;
      else
        p_src = (unint64_t *)&__src;
      v102 = *p_src;
      v103 = *(_QWORD *)a4 + v99;
      if (((v102 >> v100) & 1) != 0)
      {
        v104 = 0;
        *(_DWORD *)(v103 + 8) = 0;
        v105 = 0xFFFFFFFFLL;
      }
      else
      {
        *(_QWORD *)(v103 + 8) = a3;
        v105 = v100 | 0x100000000;
        v104 = a2;
      }
      *(_QWORD *)v103 = v104;
      *(_QWORD *)(v103 + 16) = v105;
      ++v100;
      v99 += 24;
    }
    while (v100 < *(unsigned int *)(a4 + 8));
  }
  if (v124 >= 0x41 && v123)
    MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
  if (v122 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  LODWORD(v22) = 0;
  v23 = 0;
  return v22 | (unint64_t)(v23 << 32);
}

void *sub_1C48E519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, unsigned int *a7, int *a8, unsigned int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v28;
  unsigned __int8 *v29[2];

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v29[0] = 0;
  v29[1] = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E531C(a1, a2, *a7, a8, a9);
}

void *sub_1C48E531C(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v14 = *a4;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a5;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

uint64_t sub_1C48E54CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30[2];

  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = a3;
  v15[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v30[0] = 0;
  v30[1] = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v16, (const llvm::APInt *)v30, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v30[0])
  {
    result = llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a6;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v28;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v26;
  v27 = *a7;
  if (v26 >= v25)
  {
    v29 = *a7;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C48E5670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a4;
  v27 = 0;
  v28 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return sub_1C48E54CC(a1, a2, *a5, a5[1], a6, a7, a8);
}

void *sub_1C48E57E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, unsigned int *a7, int *a8, int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v28;
  unsigned __int8 *v29[2];

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v29[0] = 0;
  v29[1] = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E5960(a1, a2, *a7, a8, a9);
}

void *sub_1C48E5960(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v14 = *a4;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a5;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

void *sub_1C48E5B10(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, unsigned int *a6, int *a7, __int128 *a8, unsigned int *a9, int *a10)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v17 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  ++*(_DWORD *)(a2 + 8);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  v22 = *a4;
  v32 = 0;
  v33 = 0;
  v23 = sub_1C6366AB4(a1, v22, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  v28 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v28;
  if (v32)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
    v28 = *(_DWORD *)(a2 + 8);
  }
  v29 = *a5;
  if (v28 >= *(_DWORD *)(a2 + 12))
  {
    v31 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v28 + 1, 16);
    v29 = v31;
    v28 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v28) = v29;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C613EB9C(a1, a2, *a6, a7, a8, a9, a10);
}

uint64_t sub_1C48E5CD4(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, __int128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned __int8 *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v29, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v29)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v27 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v27;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  ++*(_DWORD *)(a2 + 8);
  v18 = *a5;
  v29 = 0;
  v30 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v18, (const llvm::APInt *)&v29, (llvm *)6, 0, 1, 0);
  v20 = result;
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (uint64_t *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

BOOL sub_1C48E5EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C48DCF20(a1, a2, a3, a4, a5, 0)
      || sub_1C48DD690(a1, a2, a3, a4, a5, 0)
      || sub_1C48DD0B8(a1, a2, a3, a4, a5, 0);
}

void sub_1C48E5F50()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48E5F64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA1BB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C48E5FA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA1BB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48E5FCC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v6;

  v4 = a1[2];
  v5 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(*v6 + v5);
  return v5(v6, *a2, a2[1], a3, a4);
}

void *sub_1C48E5FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, int *a7)
{
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *result;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  unsigned __int8 *v33;
  uint64_t v34;

  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = a3;
  v15[1] = a4;
  v16 = *(_DWORD *)(a2 + 12);
  v17 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v17;
  v18 = *a5;
  if (v17 >= v16)
  {
    v32 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    v18 = v32;
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v17) = v18;
  ++*(_DWORD *)(a2 + 8);
  v19 = *(_QWORD *)a6;
  v33 = 0;
  v34 = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)&v33, (llvm *)*(unsigned __int8 *)(a6 + 8), 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  ++*(_DWORD *)(a2 + 8);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v25 = *a7;
  v33 = 0;
  v34 = 0;
  result = sub_1C6366AB4(a1, v25, (const llvm::APInt *)&v33, (llvm *)6, 0, 1, 0);
  v27 = result;
  v29 = v28;
  v30 = *(unsigned int *)(a2 + 8);
  if (v30 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v30 + 1, 16);
    LODWORD(v30) = *(_DWORD *)(a2 + 8);
  }
  v31 = (_QWORD *)(*(_QWORD *)a2 + 16 * v30);
  *v31 = v27;
  v31[1] = v29;
  ++*(_DWORD *)(a2 + 8);
  if (v33)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  return result;
}

void *sub_1C48E61C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t *a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = a3;
  v13[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v14 = *a5;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a6;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

uint64_t sub_1C48E6348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, unsigned int *a6, __int128 *a7)
{
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30[2];

  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = a3;
  v15[1] = a4;
  v16 = *(_DWORD *)(a2 + 12);
  v17 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v17;
  v18 = *a5;
  if (v17 >= v16)
  {
    v28 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    v18 = v28;
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v17) = v18;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a6;
  v30[0] = 0;
  v30[1] = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v19, (const llvm::APInt *)v30, (llvm *)6, 0, 1, 0);
  v21 = result;
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (uint64_t *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  v26 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v26;
  if (v30[0])
  {
    result = llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
    v26 = *(_DWORD *)(a2 + 8);
  }
  v27 = *a7;
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a7;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C48E64EC(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t ConstantPool;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  void *v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x1E0C80C00];
  v10 = sub_1C48840E8(a1[60], a4, 1);
  v32 = 4;
  *(_QWORD *)&v31 = sub_1C5D410E8(a1[37], 64, (llvm *)6, 0, a3, 3);
  *((_QWORD *)&v31 + 1) = v11;
  ConstantPool = llvm::PseudoSourceValueManager::getConstantPool(*(llvm::PseudoSourceValueManager **)(a1[35] + 432));
  v13 = ConstantPool | 4;
  if (ConstantPool)
    v14 = *(_DWORD *)(ConstantPool + 12);
  else
    v14 = 0;
  v15 = a4;
  v16 = __clz(a4);
  v17 = sub_1C484358C(a1[35] + 128, 80, 3);
  *(_QWORD *)v17 = v13;
  *(_QWORD *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 16) = v14;
  *(_BYTE *)(v17 + 20) = 0;
  *(_QWORD *)(v17 + 24) = ((unint64_t)(v15 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v17 + 32) = 1;
  *(_BYTE *)(v17 + 34) = 63 - v16;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 72) = 0;
  *(_WORD *)(v17 + 36) = 1;
  v18 = a1[37];
  v19 = *(unsigned __int8 **)a2;
  v29 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v29, v19, 2);
  v30 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)&v33 = a5;
  DWORD2(v33) = 0;
  v28 = 0;
  v20 = sub_1C613ECBC(v18, 4137, (uint64_t)&v29, 5u, v10, &v32, &v31, &v33, &v28);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  v21 = (void *)a1[37];
  *(_QWORD *)&v33 = v17;
  sub_1C636E10C(v21, (uint64_t)v20, &v33, 1);
  v22 = *(unsigned __int8 **)a2;
  v26 = v22;
  if (v22)
    llvm::MetadataTracking::track((uint64_t)&v26, v22, 2);
  v27 = *(_DWORD *)(a2 + 8);
  v23 = sub_1C48DD8B0((uint64_t)a1, 0, (uint64_t)&v26, (llvm *)5, 0);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  *(_QWORD *)&v33 = v34;
  v34[0] = v20;
  v34[1] = 0;
  v34[2] = v23;
  v34[3] = 0;
  *((_QWORD *)&v33 + 1) = 0x200000002;
  v24 = sub_1C48DED80(a1[37], a2, &v33);
  if ((_QWORD *)v33 != v34)
    free((void *)v33);
  return v24;
}

void *sub_1C48E6740(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, int *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v28;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  v18 = *(_DWORD *)(a2 + 12);
  v19 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v19;
  v20 = *a5;
  if (v19 >= v18)
  {
    v29 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    v20 = v29;
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v19) = v20;
  ++*(_DWORD *)(a2 + 8);
  v21 = *a6;
  v30 = 0;
  v31 = 0;
  result = sub_1C6366AB4(a1, v21, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v23 = result;
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return result;
}

void sub_1C48E691C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48E6930(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA1C00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48E6970(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA1C00;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48E6998(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*v6 + v5);
  return v5(v6, *a2, a2[1], a3, a4, *(unsigned int *)(a1 + 32));
}

void *sub_1C48E69CC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *result;
  __int128 v12;

  v5 = *a3;
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    v12 = *a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 16);
    v5 = v12;
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v6) = v5;
  v7 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v7;
  v9 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 3);
  if (v9 | v8)
  {
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 16);
      LODWORD(v7) = *(_DWORD *)(a2 + 8);
    }
    v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v7);
    *v10 = v9;
    v10[1] = v8;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

void *sub_1C48E6A94(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, int *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v28;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  v18 = *(_DWORD *)(a2 + 12);
  v19 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v19;
  v20 = *a5;
  if (v19 >= v18)
  {
    v29 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    v20 = v29;
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v19) = v20;
  ++*(_DWORD *)(a2 + 8);
  v21 = *a6;
  v30 = 0;
  v31 = 0;
  result = sub_1C6366AB4(a1, v21, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v23 = result;
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return result;
}

_QWORD *sub_1C48E6C68(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, int a13, unsigned __int8 a14, uint64_t a15)
{
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  unsigned __int8 *v45;
  int v46;
  __int128 v47[2];
  int v48;
  __int128 v49[2];
  int v50;
  __int128 v51[2];
  int v52;
  __int128 v53[2];
  int v54;
  unsigned int v55[3];

  v55[0] = a3;
  v16 = (unsigned __int8 *)(*(_QWORD *)(a9 + 40) + 16 * a10);
  v17 = *v16;
  if (!*v16)
  {
    v18 = *((_QWORD *)v16 + 1);
    if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12)
      v19 = *(unsigned __int8 *)(**(_QWORD **)(v18 + 16) + 8);
    else
      v19 = *(_DWORD *)(v18 + 8);
    v20 = a4;
    v21 = a5;
    if (v19 == 13)
    {
      v22 = sub_1C48E007C;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v22 = sub_1C48E007C;
  v20 = a4;
  v21 = a5;
  v23 = (v17 - 120) >= 0x20 && (v17 - 2) >= 6;
  if (v23 && (v17 - 15) >= 0x3C)
LABEL_12:
    v22 = sub_1C48DF9D8;
LABEL_13:
  v24 = operator new(0x20uLL);
  *v24 = &off_1E7FA1BB8;
  v24[1] = v22;
  v24[2] = 0;
  v24[3] = a1;
  v25 = (unsigned __int8 *)(*(_QWORD *)(a11 + 40) + 16 * a12);
  v26 = *v25;
  if (!*v25)
  {
    v27 = *((_QWORD *)v25 + 1);
    if ((*(_DWORD *)(v27 + 8) & 0xFE) == 0x12)
      v28 = *(unsigned __int8 *)(**(_QWORD **)(v27 + 16) + 8);
    else
      v28 = *(_DWORD *)(v27 + 8);
    if (v28 == 13)
    {
      v29 = sub_1C48E007C;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v29 = sub_1C48E007C;
  v30 = (v26 - 120) >= 0x20 && (v26 - 2) >= 6;
  if (v30 && (v26 - 15) >= 0x3C)
LABEL_24:
    v29 = sub_1C48DF9D8;
LABEL_25:
  v31 = operator new(0x20uLL);
  *v31 = &off_1E7FA1BB8;
  v31[1] = v29;
  v31[2] = 0;
  v31[3] = a1;
  sub_1C48DC710((uint64_t)v53, *(_QWORD *)(a1 + 296), v20, v21, 0, 0, 0);
  sub_1C48DC710((uint64_t)v51, *(_QWORD *)(a1 + 296), a6, a7, 0, 0, 0);
  sub_1C48DC710((uint64_t)v49, *(_QWORD *)(a1 + 296), a9, a10, 1, 0, 0);
  sub_1C48DC710((uint64_t)v47, *(_QWORD *)(a1 + 296), a11, a12, 1, 0, 0);
  v32 = operator new(0x28uLL);
  *v32 = &off_1E7FA1C00;
  v32[1] = sub_1C48DD0B8;
  v32[2] = 0;
  v32[3] = a1;
  *((_DWORD *)v32 + 8) = 0;
  sub_1C48DF024((uint64_t)v53, (uint64_t)v32);
  (*(void (**)(_QWORD *))(*v32 + 40))(v32);
  v33 = operator new(0x28uLL);
  *v33 = &off_1E7FA1C00;
  v33[1] = sub_1C48DD0B8;
  v33[2] = 0;
  v33[3] = a1;
  *((_DWORD *)v33 + 8) = 0;
  sub_1C48DF024((uint64_t)v51, (uint64_t)v33);
  (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  v34 = (*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
  sub_1C48DF024((uint64_t)v49, v34);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  v35 = (*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
  sub_1C48DF024((uint64_t)v47, v35);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  v36 = *(_BYTE *)(*(_QWORD *)(a9 + 40) + 16 * a10);
  if (a2)
    v37 = dword_1C65EDCEC[8 * (v54 > 3) + 4 * (v52 > 3) + 2 * (v50 > 3) + (v48 > 3)];
  else
    v37 = sub_1C613F208(a14, (uint64_t)v53, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 40));
  v38 = *(_QWORD *)(a1 + 296);
  v39 = *(unsigned __int8 **)a15;
  v45 = v39;
  if (v39)
    llvm::MetadataTracking::track((uint64_t)&v45, v39, 2);
  v46 = *(_DWORD *)(a15 + 8);
  v40 = sub_1C613F354(v38, v37, (uint64_t)&v45, v36, 0, v55, v53, v51, v49, v47);
  if (v45)
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  (*(void (**)(_QWORD *))(*v31 + 40))(v31);
  (*(void (**)(_QWORD *))(*v24 + 40))(v24);
  return v40;
}

_QWORD *sub_1C48E7074(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, unsigned __int8 a12, uint64_t a13)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  unsigned __int8 *v42;
  int v43;
  __int128 v44[3];
  __int128 v45[3];
  __int128 v46[3];
  __int128 v47[3];
  unsigned int v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v48 = a2;
  sub_1C48DC710((uint64_t)v47, *(_QWORD *)(a1 + 296), a3, a4, 0, 0, 0);
  sub_1C48DC710((uint64_t)v46, *(_QWORD *)(a1 + 296), a5, a6, 0, 0, 0);
  sub_1C48DC710((uint64_t)v45, *(_QWORD *)(a1 + 296), a7, a8, 1, 0, 0);
  sub_1C48DC710((uint64_t)v44, *(_QWORD *)(a1 + 296), a9, a10, 1, 0, 0);
  v18 = operator new(0x28uLL);
  *v18 = &off_1E7FA1C00;
  v18[1] = sub_1C48DD0B8;
  v18[2] = 0;
  v18[3] = a1;
  *((_DWORD *)v18 + 8) = 0;
  sub_1C48DF024((uint64_t)v47, (uint64_t)v18);
  (*(void (**)(_QWORD *))(*v18 + 40))(v18);
  v19 = operator new(0x28uLL);
  *v19 = &off_1E7FA1C00;
  v19[1] = sub_1C48DD0B8;
  v19[2] = 0;
  v19[3] = a1;
  *((_DWORD *)v19 + 8) = 0;
  v50 = v19;
  sub_1C48DF024((uint64_t)v46, (uint64_t)v19);
  v20 = v50;
  if (v50 == v49)
  {
    v21 = (void (**)(_QWORD *))(v49[0] + 32);
    v20 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v21 = (void (**)(_QWORD *))(*v50 + 40);
  }
  (*v21)(v20);
LABEL_6:
  v22 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v45[0] + 40) + 16 * DWORD2(v45[0]));
  v23 = *v22;
  if (!*v22)
  {
    v24 = *((_QWORD *)v22 + 1);
    if ((*(_DWORD *)(v24 + 8) & 0xFE) == 0x12)
      v25 = *(unsigned __int8 *)(**(_QWORD **)(v24 + 16) + 8);
    else
      v25 = *(_DWORD *)(v24 + 8);
    if (v25 == 13)
    {
      v26 = sub_1C48E007C;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v26 = sub_1C48E007C;
  v27 = (v23 - 120) >= 0x20 && (v23 - 2) >= 6;
  if (v27 && (v23 - 15) >= 0x3C)
LABEL_17:
    v26 = sub_1C48DF9D8;
LABEL_18:
  v28 = a8;
  v29 = operator new(0x20uLL);
  *v29 = &off_1E7FA1BB8;
  v29[1] = v26;
  v29[2] = 0;
  v29[3] = a1;
  sub_1C48DF024((uint64_t)v45, (uint64_t)v29);
  (*(void (**)(_QWORD *))(*v29 + 40))(v29);
  v30 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v44[0] + 40) + 16 * DWORD2(v44[0]));
  v31 = *v30;
  if (!*v30)
  {
    v32 = *((_QWORD *)v30 + 1);
    if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
      v33 = *(unsigned __int8 *)(**(_QWORD **)(v32 + 16) + 8);
    else
      v33 = *(_DWORD *)(v32 + 8);
    if (v33 == 13)
    {
      v34 = sub_1C48E007C;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v34 = sub_1C48E007C;
  if ((v31 - 120) >= 0x20 && (v31 - 2) >= 6 && (v31 - 15) >= 0x3C)
LABEL_26:
    v34 = sub_1C48DF9D8;
LABEL_27:
  v35 = operator new(0x20uLL);
  *v35 = &off_1E7FA1BB8;
  v35[1] = v34;
  v35[2] = 0;
  v35[3] = a1;
  sub_1C48DF024((uint64_t)v44, (uint64_t)v35);
  (*(void (**)(_QWORD *))(*v35 + 40))(v35);
  v36 = *(_BYTE *)(*(_QWORD *)(a7 + 40) + 16 * v28);
  v37 = sub_1C613F4CC(a12, (uint64_t)v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v44, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 40));
  v38 = *(_QWORD *)(a1 + 296);
  v39 = *(unsigned __int8 **)a13;
  v42 = v39;
  if (v39)
    llvm::MetadataTracking::track((uint64_t)&v42, v39, 2);
  v43 = *(_DWORD *)(a13 + 8);
  v40 = sub_1C613F354(v38, v37, (uint64_t)&v42, v36, 0, &v48, v47, v46, v45, v44);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  return v40;
}

uint64_t sub_1C48E742C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned __int8 *v49;
  uint64_t v50;

  v49 = 0;
  v50 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v49, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v49)
    llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
  v20 = *a4;
  v49 = 0;
  v50 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v49, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (uint64_t *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  if (v49)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
    v27 = *(_DWORD *)(a2 + 8);
  }
  v28 = *a5;
  if (v27 >= *(_DWORD *)(a2 + 12))
  {
    v45 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 16);
    v28 = v45;
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v27) = v28;
  v29 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v29;
  v31 = *((_QWORD *)a5 + 2);
  v30 = *((_QWORD *)a5 + 3);
  if (v31 | v30)
  {
    if (v29 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
      LODWORD(v29) = *(_DWORD *)(a2 + 8);
    }
    v29 = *(_QWORD *)a2 + 16 * v29;
    *(_QWORD *)v29 = v31;
    *(_QWORD *)(v29 + 8) = v30;
    LODWORD(v29) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v29;
  }
  v32 = *a6;
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    v46 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
    v32 = v46;
    LODWORD(v29) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v29) = v32;
  v33 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v33;
  v35 = *((_QWORD *)a6 + 2);
  v34 = *((_QWORD *)a6 + 3);
  if (v35 | v34)
  {
    if (v33 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v33 + 1, 16);
      LODWORD(v33) = *(_DWORD *)(a2 + 8);
    }
    v33 = *(_QWORD *)a2 + 16 * v33;
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = v34;
    LODWORD(v33) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v33;
  }
  v36 = *a7;
  if (v33 >= *(_DWORD *)(a2 + 12))
  {
    v47 = *a7;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v33 + 1, 16);
    v36 = v47;
    LODWORD(v33) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v33) = v36;
  v37 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v37;
  v39 = *((_QWORD *)a7 + 2);
  v38 = *((_QWORD *)a7 + 3);
  if (v39 | v38)
  {
    if (v37 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v37 + 1, 16);
      LODWORD(v37) = *(_DWORD *)(a2 + 8);
    }
    v37 = *(_QWORD *)a2 + 16 * v37;
    *(_QWORD *)v37 = v39;
    *(_QWORD *)(v37 + 8) = v38;
    LODWORD(v37) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v37;
  }
  v40 = *a8;
  if (v37 >= *(_DWORD *)(a2 + 12))
  {
    v48 = *a8;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v37 + 1, 16);
    v40 = v48;
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v37) = v40;
  v41 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v41;
  v43 = *((_QWORD *)a8 + 2);
  v42 = *((_QWORD *)a8 + 3);
  if (v43 | v42)
  {
    if (v41 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v41 + 1, 16);
      LODWORD(v41) = *(_DWORD *)(a2 + 8);
    }
    v44 = (_QWORD *)(*(_QWORD *)a2 + 16 * v41);
    *v44 = v43;
    v44[1] = v42;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

void sub_1C48E77F4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48E7808(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA1C48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48E7848(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA1C48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48E7870(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v20;
  unsigned __int8 *v21;
  int v22;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(uint64_t (**)(_QWORD *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8);
  v10 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + v9);
  v11 = *(unsigned __int8 *)(a1 + 32);
  v12 = *a2;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = a4[1];
  v17 = *(unsigned __int8 **)a8;
  v21 = v17;
  if (v17)
  {
    v20 = (_QWORD *)a8;
    llvm::MetadataTracking::retrack(a8, v17, (uint64_t)&v21);
    a8 = (uint64_t)v20;
    *v20 = 0;
  }
  v22 = *(_DWORD *)(a8 + 8);
  v18 = v9(v10, v11 != 0, v12, v13, v14, v15, v16);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  return v18;
}

void sub_1C48E7978()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48E798C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA1C90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C48E79CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA1C90;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48E79F4(_QWORD *a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7, unsigned __int8 **a8)
{
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, unsigned __int8 **);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  int v30;

  v8 = a8;
  v9 = a1[2];
  v10 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, unsigned __int8 **))a1[1];
  v11 = (_QWORD *)(a1[3] + (v9 >> 1));
  if ((v9 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, unsigned __int8 **))(*v11 + v10);
  v12 = *a2;
  v13 = *a3;
  v14 = a3[1];
  v16 = *a4;
  v15 = a4[1];
  v17 = *a5;
  v18 = a5[1];
  v20 = *a6;
  v19 = a6[1];
  v21 = *a7;
  v22 = *a8;
  v29 = v22;
  if (v22)
  {
    v27 = v19;
    v28 = v11;
    v23 = v21;
    llvm::MetadataTracking::retrack((uint64_t)a8, v22, (uint64_t)&v29);
    v21 = v23;
    v8 = a8;
    v19 = v27;
    v11 = v28;
    *a8 = 0;
  }
  v30 = *((_DWORD *)v8 + 2);
  v24 = v10(v11, v12, v13, v14, v16, v15, v17, v18, v20, v19, v21 != 0, &v29);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  return v24;
}

uint64_t sub_1C48E7AF4(uint64_t a1, uint64_t a2, unsigned __int8 a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned __int8 *v29[2];

  v29[0] = 0;
  v29[1] = 0;
  result = (uint64_t)sub_1C6366AB4(a1, a3, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v11 = result;
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (uint64_t *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v29[0])
  {
    result = llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v26 = *a4;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v26;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  v18 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v18;
  v20 = *((_QWORD *)a4 + 2);
  v19 = *((_QWORD *)a4 + 3);
  if (v20 | v19)
  {
    if (v18 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
      LODWORD(v18) = *(_DWORD *)(a2 + 8);
    }
    v18 = *(_QWORD *)a2 + 16 * v18;
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v18 + 8) = v19;
    LODWORD(v18) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v18;
  }
  v21 = *a5;
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    v27 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    v21 = v27;
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v18) = v21;
  v22 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v22;
  v24 = *((_QWORD *)a5 + 2);
  v23 = *((_QWORD *)a5 + 3);
  if (v24 | v23)
  {
    if (v22 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
      LODWORD(v22) = *(_DWORD *)(a2 + 8);
    }
    v22 = *(_QWORD *)a2 + 16 * v22;
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v23;
    LODWORD(v22) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v22;
  }
  v25 = *a6;
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    v25 = v28;
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v22) = v25;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C48E7D34(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 422)
    return 0;
  if (v1 == 423)
    return 1;
  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = (_QWORD *)*v4;
  if (v5 == (_QWORD *)2443)
    return 10;
  if (v5 != (_QWORD *)2442)
    llvm::report_fatal_error((llvm *)"Unimplemented pack opcode!", (const char *)1);
  return 11;
}

void *sub_1C48E7DB8(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  void *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  v14 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v14;
  if (v24)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
    v14 = *(_DWORD *)(a2 + 8);
  }
  v15 = *a4;
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v23 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    v15 = v23;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v14) = v15;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v24 = 0;
  v25 = 0;
  result = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  ++*(_DWORD *)(a2 + 8);
  if (v24)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  return result;
}

void *sub_1C48E7F3C(uint64_t a1, uint64_t a2, int a3, __int128 *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  void *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  v14 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v14;
  if (v24)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
    v14 = *(_DWORD *)(a2 + 8);
  }
  v15 = *a4;
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v23 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    v15 = v23;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v14) = v15;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v24 = 0;
  v25 = 0;
  result = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  ++*(_DWORD *)(a2 + 8);
  if (v24)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  return result;
}

void *sub_1C48E80C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, unsigned int *a7, unsigned int *a8, int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v28;
  unsigned __int8 *v29[2];

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v29[0] = 0;
  v29[1] = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E8240(a1, a2, *a7, a8, a9);
}

void *sub_1C48E8240(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v14 = *a4;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a5;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

void *sub_1C48E83F0(uint64_t a1, uint64_t a2, int *a3, __int128 *a4, int *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  void *result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v9 = *a3;
  v25 = 0;
  v26 = 0;
  v10 = sub_1C6366AB4(a1, v9, (const llvm::APInt *)&v25, (llvm *)6, 0, 1, 0);
  v12 = v11;
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 8);
  }
  v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
  *v14 = v10;
  v14[1] = v12;
  v15 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v15;
  if (v25)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
    v15 = *(_DWORD *)(a2 + 8);
  }
  v16 = *a4;
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    v24 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 16);
    v16 = v24;
    v15 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v15) = v16;
  ++*(_DWORD *)(a2 + 8);
  v17 = *a5;
  v25 = 0;
  v26 = 0;
  result = sub_1C6366AB4(a1, v17, (const llvm::APInt *)&v25, (llvm *)6, 0, 1, 0);
  v19 = result;
  v21 = v20;
  v22 = *(unsigned int *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  v23 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
  *v23 = v19;
  v23[1] = v21;
  ++*(_DWORD *)(a2 + 8);
  if (v25)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  return result;
}

void *sub_1C48E8574(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  void *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  v14 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v14;
  if (v24)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
    v14 = *(_DWORD *)(a2 + 8);
  }
  v15 = *a4;
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v23 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    v15 = v23;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v14) = v15;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v24 = 0;
  v25 = 0;
  result = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  ++*(_DWORD *)(a2 + 8);
  if (v24)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  return result;
}

void *sub_1C48E86FC(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  void *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  v14 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v14;
  if (v24)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
    v14 = *(_DWORD *)(a2 + 8);
  }
  v15 = *a4;
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v23 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    v15 = v23;
    v14 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v14) = v15;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v24 = 0;
  v25 = 0;
  result = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v24, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  ++*(_DWORD *)(a2 + 8);
  if (v24)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  return result;
}

uint64_t sub_1C48E8880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  llvm::detail::DoubleAPFloat *v19;
  void *v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 **v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v75;
  const char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  llvm *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  llvm *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  llvm *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unsigned __int8 **v108;
  uint64_t v109;
  _OWORD v110[2];
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a2 + 24) != 146)
  {
LABEL_58:
    *(_QWORD *)a4 = a2;
    *(_DWORD *)(a4 + 8) = a3;
    v54 = *(_QWORD *)(a1 + 296);
    v55 = a6;
    goto LABEL_59;
  }
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)v12;
  v112 = v13;
  LODWORD(v113) = *(_DWORD *)(v12 + 8);
  v114 = *(_QWORD *)(v12 + 40);
  LODWORD(v115) = *(_DWORD *)(v12 + 48);
  v14 = *(unsigned __int16 *)(v13 + 24);
  if (v14 != 12 && v14 != 36)
  {
    v15 = v114;
    goto LABEL_44;
  }
  v15 = v114;
  v16 = *(unsigned __int16 *)(v114 + 24);
  if (v16 != 36 && v16 != 12)
    goto LABEL_47;
  sub_1C48DC710((uint64_t)v110, *(_QWORD *)(a1 + 296), v13, 0, 0, 0, 0);
  if (v13 != v15 || (v111 & 0xFFFFFFFD) != 5)
  {
    v14 = *(unsigned __int16 *)(v13 + 24);
LABEL_44:
    if (v14 == 215 && *(_WORD *)(v15 + 24) == 215)
    {
      v40 = *(_QWORD *)(v13 + 32);
      v13 = *(_QWORD *)v40;
      v112 = *(_QWORD *)v40;
      LODWORD(v113) = *(_DWORD *)(v40 + 8);
      v41 = *(_QWORD *)(v15 + 32);
      v114 = *(_QWORD *)v41;
      LODWORD(v115) = *(_DWORD *)(v41 + 8);
      v15 = v114;
    }
LABEL_47:
    v42 = (unsigned __int8 *)(*(_QWORD *)(v13 + 40) + 16 * v113);
    v43 = *v42;
    v44 = (unsigned __int8 *)(*(_QWORD *)(v15 + 40) + 16 * v115);
    if (v43 != *v44)
      goto LABEL_58;
    v45 = *((_QWORD *)v44 + 1);
    v46 = *((_QWORD *)v42 + 1);
    if (!v43 && v46 != v45)
      goto LABEL_58;
    if ((a6 & 6) == 0)
    {
      v48 = 0;
      v49 = 1;
      while (*(_WORD *)(*(&v112 + 2 * v48) + 24) == 430)
      {
        v50 = v49;
        v49 = 0;
        v48 = 1;
        if ((v50 & 1) == 0)
        {
          v51 = *(_QWORD *)(v13 + 32);
          v13 = *(_QWORD *)v51;
          v112 = *(_QWORD *)v51;
          LODWORD(v113) = *(_DWORD *)(v51 + 8);
          v52 = *(_QWORD *)(v15 + 32);
          v114 = *(_QWORD *)v52;
          LODWORD(v115) = *(_DWORD *)(v52 + 8);
          v53 = 1;
          v15 = v114;
          goto LABEL_64;
        }
      }
    }
    v53 = 0;
LABEL_64:
    v58 = *(unsigned __int16 *)(v13 + 24);
    v104 = a3;
    v103 = a6;
    if (v58 == 222)
    {
      if (*(_WORD *)(v15 + 24) != 222)
        goto LABEL_92;
      v59 = *(_QWORD *)(v13 + 32);
      v112 = *(_QWORD *)v59;
      v13 = v112;
      LODWORD(v113) = *(_DWORD *)(v59 + 8);
      v60 = *(_QWORD *)(v15 + 32);
      v114 = *(_QWORD *)v60;
      LODWORD(v115) = *(_DWORD *)(v60 + 8);
      v53 |= 2u;
      v58 = *(unsigned __int16 *)(v112 + 24);
      v15 = v114;
    }
    if (v58 != 223)
    {
LABEL_70:
      v63 = v113;
      v64 = v15;
      v65 = v13;
      LODWORD(v66) = v113;
      v105 = v53;
      if (v58 == 212)
      {
        if (*(_WORD *)(v15 + 24) != 212)
          goto LABEL_93;
        v67 = *(unsigned int **)(v13 + 32);
        v65 = *(_QWORD *)v67;
        v66 = v67[2];
        v68 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v67 + 40) + 16 * v66);
        v69 = *v68;
        v70 = *(unsigned int **)(v15 + 32);
        v64 = *(_QWORD *)v70;
        v71 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v70 + 40) + 16 * v70[2]);
        if (v69 != *v71)
          goto LABEL_93;
        v72 = *((_QWORD *)v71 + 1);
        v73 = *((_QWORD *)v68 + 1);
        if (!v69 && v73 != v72)
          goto LABEL_93;
        v58 = *(unsigned __int16 *)(v65 + 24);
      }
      if (v58 == 395 && *(_WORD *)(v64 + 24) == 395)
      {
        v106 = v113;
        v110[0] = *(_OWORD *)(*(_QWORD *)(v65 + 40) + 16 * v66);
        v75 = sub_1C47C1C70((unsigned __int8 *)v110);
        if ((_DWORD)v76 == 1)
        {
          v102 = v75;
          v75 = v102;
        }
        v77 = *(_QWORD *)(**(_QWORD **)(v65 + 32) + 80);
        v78 = (_QWORD *)(v77 + 24);
        if (*(_DWORD *)(v77 + 32) >= 0x41u)
          v78 = (_QWORD *)*v78;
        v63 = v106;
        v79 = *v78 + v75;
        v80 = *(_QWORD *)(**(_QWORD **)(v64 + 32) + 80);
        v81 = (_QWORD *)(v80 + 24);
        if (*(_DWORD *)(v80 + 32) >= 0x41u)
          v81 = (_QWORD *)*v81;
        if (v79 == *v81)
        {
          v82 = v75;
          v83 = (uint64_t *)(*(_QWORD *)(v65 + 40) + 16 * v66);
          v85 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a1 + 296) + 56), *v83, v83[1], 2u, 0);
          v86 = *(_QWORD *)(**(_QWORD **)(v65 + 32) + 80);
          v87 = (_QWORD *)(v86 + 24);
          if (*(_DWORD *)(v86 + 32) >= 0x41u)
            v87 = (_QWORD *)*v87;
          v88 = sub_1C5D410E8(*(_QWORD *)(a1 + 296), 64, v85, v84, *v87 >> 1, dword_1C6606BC0[(v82 - 1) & 0x7FFFFFFF]);
          *(_QWORD *)a4 = v88;
          *(_DWORD *)(a4 + 8) = v89;
          if (v88)
            goto LABEL_101;
          v63 = v106;
LABEL_94:
          v107 = v63;
          v90 = (uint64_t *)(*(_QWORD *)(v13 + 40) + 16 * v63);
          v91 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a1 + 296) + 56), *v90, v90[1], 2u, 0);
          v94 = v93;
          v95 = *(_QWORD *)(a1 + 296);
          v96 = *(unsigned __int8 **)(a2 + 64);
          *(_QWORD *)&v110[0] = v96;
          if (v96)
          {
            v97 = v91;
            v98 = v94;
            llvm::MetadataTracking::track((uint64_t)v110, v96, 2);
            v94 = v98;
            v91 = v97;
          }
          DWORD2(v110[0]) = *(_DWORD *)(a2 + 60);
          v99 = *(_QWORD *)(v95 + 832);
          if (v99)
            LOWORD(v99) = *(_WORD *)(v99 + 8);
          v100 = sub_1C5D56C70(v95, 146, (const llvm::APInt *)v110, v91, v94, v13, v107, v92, v15, v115, v99);
          *(_QWORD *)a4 = v100;
          *(_DWORD *)(a4 + 8) = v101;
          a6 = v103;
          if (*(_QWORD *)&v110[0])
          {
            llvm::MetadataTracking::untrack((uint64_t)v110, *(unsigned __int8 **)&v110[0]);
            v100 = *(uint64_t **)a4;
          }
          sub_1C612E190(*(_QWORD *)(a1 + 296), a2, v104, (uint64_t)v100);
LABEL_101:
          v54 = *(_QWORD *)(a1 + 296);
          v55 = v105 | a6;
LABEL_59:
          v110[0] = 0uLL;
          *(_QWORD *)a5 = sub_1C6366AB4(v54, v55, (const llvm::APInt *)v110, (llvm *)5, 0, 1, 0);
          *(_DWORD *)(a5 + 8) = v56;
          v38 = *(unsigned __int8 **)&v110[0];
          if (*(_QWORD *)&v110[0])
          {
            v39 = (unsigned __int8 **)v110;
            goto LABEL_61;
          }
          return 1;
        }
      }
LABEL_93:
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      goto LABEL_94;
    }
    if (*(_WORD *)(v15 + 24) == 223)
    {
      v61 = *(_QWORD *)(v13 + 32);
      v112 = *(_QWORD *)v61;
      v13 = v112;
      LODWORD(v113) = *(_DWORD *)(v61 + 8);
      v62 = *(_QWORD *)(v15 + 32);
      v114 = *(_QWORD *)v62;
      LODWORD(v115) = *(_DWORD *)(v62 + 8);
      v53 |= 4u;
      v15 = v114;
      v58 = *(unsigned __int16 *)(v112 + 24);
      goto LABEL_70;
    }
LABEL_92:
    v105 = v53;
    v63 = v113;
    goto LABEL_93;
  }
  v18 = *(_QWORD *)(v13 + 80);
  v20 = *(void **)(v18 + 32);
  v19 = (llvm::detail::DoubleAPFloat *)(v18 + 32);
  if (v20 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v19, (unsigned int *)&v108);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v19, (unsigned int *)&v108);
  if (v109 >= 0x41)
    v21 = v108;
  else
    v21 = (unsigned __int8 **)&v108;
  v22 = *v21;
  if (v109 >= 0x41 && v108)
    MEMORY[0x1CAA32F9C]();
  v23 = **(unsigned __int8 **)(v13 + 40);
  v24 = (v22 >> 23);
  v25 = (v22 >> 19) & 0xF;
  v26 = v24 - 124;
  v27 = (v25 | 0x10) >> (125 - v24);
  if (v24 > 0x7C)
    v27 = (v22 >> 19) & 0xF;
  else
    v26 = 0;
  if (v24 | v25)
  {
    v24 = v26;
    v25 = v27;
  }
  v28 = (v22 >> 10) & 0x1F;
  v29 = (v22 >> 6) & 0xF;
  v30 = v28 - 12;
  v31 = (v29 | 0x10) >> (13 - ((v22 >> 10) & 0x1F));
  if (v28 > 0xC)
    v31 = (v22 >> 6) & 0xF;
  else
    v30 = 0;
  if (v28 | v29)
  {
    v28 = v30;
    v29 = v31;
  }
  v32 = v23 == 9;
  if (v23 == 9)
    v33 = 8;
  else
    v33 = 24;
  if (v32)
    v24 = v28;
  if (v32)
    v25 = v29;
  v34 = *(_QWORD *)(a1 + 296);
  v108 = 0;
  v109 = 0;
  *(_QWORD *)a4 = sub_1C6366AB4(v34, (v22 >> v33) & 0x80 | (16 * v24) | v25, (const llvm::APInt *)&v108, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a4 + 8) = v35;
  if (v108)
    llvm::MetadataTracking::untrack((uint64_t)&v108, (unsigned __int8 *)v108);
  v36 = *(_QWORD *)(a1 + 296);
  v108 = 0;
  v109 = 0;
  *(_QWORD *)a5 = sub_1C6366AB4(v36, 0, (const llvm::APInt *)&v108, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v37;
  v38 = (unsigned __int8 *)v108;
  if (v108)
  {
    v39 = (unsigned __int8 **)&v108;
LABEL_61:
    llvm::MetadataTracking::untrack((uint64_t)v39, v38);
  }
  return 1;
}

void *sub_1C48E8FA4(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *result;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v32)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
    v16 = *(_DWORD *)(a2 + 8);
  }
  v17 = *a4;
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    v31 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    v17 = v31;
    v16 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v16) = v17;
  ++*(_DWORD *)(a2 + 8);
  v18 = *a5;
  v32 = 0;
  v33 = 0;
  v19 = sub_1C6366AB4(a1, v18, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v21 = v20;
  v22 = *(unsigned int *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  v23 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
  *v23 = v19;
  v23[1] = v21;
  ++*(_DWORD *)(a2 + 8);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  v24 = *(_QWORD *)a6;
  v32 = 0;
  v33 = 0;
  result = sub_1C6366AB4(a1, v24, (const llvm::APInt *)&v32, (llvm *)*(unsigned __int8 *)(a6 + 8), 0, 1, 0);
  v26 = result;
  v28 = v27;
  v29 = *(unsigned int *)(a2 + 8);
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
    LODWORD(v29) = *(_DWORD *)(a2 + 8);
  }
  v30 = (_QWORD *)(*(_QWORD *)a2 + 16 * v29);
  *v30 = v26;
  v30[1] = v28;
  ++*(_DWORD *)(a2 + 8);
  if (v32)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  return result;
}

void *sub_1C48E91B0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, __int128 *a5, unsigned int *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  __int128 v23;
  uint64_t v24;
  void *result;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  unsigned __int8 *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  v16 = *(_QWORD *)a4;
  v32 = 0;
  v33 = 0;
  v17 = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v32, (llvm *)*(unsigned __int8 *)(a4 + 8), 0, 1, 0);
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  v22 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v22;
  if (v32)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
    v22 = *(_DWORD *)(a2 + 8);
  }
  v23 = *a5;
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    v31 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    v23 = v31;
    v22 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v22) = v23;
  ++*(_DWORD *)(a2 + 8);
  v24 = *a6;
  v32 = 0;
  v33 = 0;
  result = sub_1C6366AB4(a1, v24, (const llvm::APInt *)&v32, (llvm *)6, 0, 1, 0);
  v26 = result;
  v28 = v27;
  v29 = *(unsigned int *)(a2 + 8);
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
    LODWORD(v29) = *(_DWORD *)(a2 + 8);
  }
  v30 = (_QWORD *)(*(_QWORD *)a2 + 16 * v29);
  *v30 = v26;
  v30[1] = v28;
  ++*(_DWORD *)(a2 + 8);
  if (v32)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  return result;
}

void *sub_1C48E93BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, __int128 *a5, unsigned int *a6, uint64_t a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *result;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  unsigned __int8 *v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v12 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v33, (llvm *)a4, 0, 1, 0);
  v14 = v13;
  v15 = *(unsigned int *)(a2 + 8);
  if (v15 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 16);
    LODWORD(v15) = *(_DWORD *)(a2 + 8);
  }
  v16 = (_QWORD *)(*(_QWORD *)a2 + 16 * v15);
  *v16 = v12;
  v16[1] = v14;
  v17 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v17;
  if (v33)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
    v17 = *(_DWORD *)(a2 + 8);
  }
  v18 = *a5;
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    v32 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    v18 = v32;
    v17 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v17) = v18;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a6;
  v33 = 0;
  v34 = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)&v33, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  ++*(_DWORD *)(a2 + 8);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v25 = *(_QWORD *)a7;
  v33 = 0;
  v34 = 0;
  result = sub_1C6366AB4(a1, v25, (const llvm::APInt *)&v33, (llvm *)*(unsigned __int8 *)(a7 + 8), 0, 1, 0);
  v27 = result;
  v29 = v28;
  v30 = *(unsigned int *)(a2 + 8);
  if (v30 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v30 + 1, 16);
    LODWORD(v30) = *(_DWORD *)(a2 + 8);
  }
  v31 = (_QWORD *)(*(_QWORD *)a2 + 16 * v30);
  *v31 = v27;
  v31[1] = v29;
  ++*(_DWORD *)(a2 + 8);
  if (v33)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  return result;
}

void *sub_1C48E95CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *result;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  uint64_t v36;

  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = a3;
  v15[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v16 = *a5;
  v35 = 0;
  v36 = 0;
  v17 = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v35, (llvm *)6, 0, 1, 0);
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v22 = *(_QWORD *)a6;
  v35 = 0;
  v36 = 0;
  v23 = sub_1C6366AB4(a1, v22, (const llvm::APInt *)&v35, (llvm *)*(unsigned __int8 *)(a6 + 8), 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v28 = *(_QWORD *)a7;
  v35 = 0;
  v36 = 0;
  result = sub_1C6366AB4(a1, v28, (const llvm::APInt *)&v35, (llvm *)*(unsigned __int8 *)(a7 + 8), 0, 1, 0);
  v30 = result;
  v32 = v31;
  v33 = *(unsigned int *)(a2 + 8);
  if (v33 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v33 + 1, 16);
    LODWORD(v33) = *(_DWORD *)(a2 + 8);
  }
  v34 = (_QWORD *)(*(_QWORD *)a2 + 16 * v33);
  *v34 = v30;
  v34[1] = v32;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  return result;
}

void *sub_1C48E97D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v28;
  unsigned __int8 *v29[2];

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v29[0] = 0;
  v29[1] = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E7DB8(a1, a2, *a7, a8, a9);
}

void *sub_1C48E9954(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v20 = *(_QWORD *)a4;
  v30 = 0;
  v31 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v30, (llvm *)*(unsigned __int8 *)(a4 + 8), 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  v26 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v26;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v26 = *(_DWORD *)(a2 + 8);
  }
  v27 = *a5;
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E7DB8(a1, a2, *a6, a7, a8);
}

void sub_1C48E9B0C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48E9B20()
{
  return 1;
}

uint64_t sub_1C48E9B28()
{
  return 0;
}

uint64_t sub_1C48E9B30()
{
  return 1;
}

uint64_t sub_1C48E9B38()
{
  return 24;
}

uint64_t sub_1C48E9B40()
{
  return 8;
}

uint64_t sub_1C48E9B48(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1C48E9B50()
{
  return 1;
}

uint64_t sub_1C48E9B58()
{
  return 0;
}

uint64_t sub_1C48E9B60(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1C48E9B70()
{
  return 1;
}

uint64_t sub_1C48E9B78()
{
  return 0;
}

uint64_t sub_1C48E9B80()
{
  return 1;
}

uint64_t sub_1C48E9B88(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned int *a14, uint64_t a15, unsigned __int8 a16, __int32 a17)
{
  unsigned int v17;
  uint8x8_t v18;
  char *v19;
  uint64_t v20;

  v17 = a12 ^ 1;
  if (a5 == -1)
  {
    v20 = 80;
    if (a13)
      v20 = 40;
    v19 = (char *)&unk_1C65EFC5C + 120 * v17 + 20 * (a3 != 7) + v20 + ((2 * *a14) & 0x1FFFFFFFCLL);
  }
  else
  {
    a1.i32[0] = a17;
    v18 = (uint8x8_t)vcnt_s8(a1);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = (char *)&unk_1C65EE32C
        + 3200 * a7
        + 1600 * v17
        + 320 * (v18.i32[0] - (a16 ^ 1))
        + 160 * (a13 ^ 1)
        + 16 * *a14
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

uint64_t sub_1C48E9C60()
{
  return 0;
}

uint64_t sub_1C48E9C68()
{
  return 0;
}

uint64_t sub_1C48E9C70(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C48E9C84(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C48E9C98(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C48E9CAC()
{
  return 417;
}

uint64_t sub_1C48E9CB4()
{
  return 0;
}

uint64_t sub_1C48E9CBC()
{
  return 0;
}

uint64_t sub_1C48E9CC4()
{
  return 1;
}

uint64_t sub_1C48E9CCC()
{
  return 0;
}

uint64_t sub_1C48E9CD4()
{
  return 0;
}

uint64_t sub_1C48E9CDC()
{
  return 3;
}

uint64_t sub_1C48E9CE4()
{
  return 0;
}

uint64_t sub_1C48E9CEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a2 + 61))
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 4) == 3;
  if (v2)
    return 6;
  else
    return 4;
}

uint64_t sub_1C48E9D0C()
{
  return 0;
}

uint64_t sub_1C48E9D14()
{
  return 1;
}

uint64_t sub_1C48E9D1C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1)+ 24);
  else
    return dword_1C6606BF0[(int)a2 - 2];
}

__int16 ***sub_1C48E9D5C(uint64_t a1, int a2, int a3)
{
  __int16 ****v3;

  v3 = &off_1E7FA22F8[a2 - 1];
  if (!a3)
    v3 = &(&off_1E7FA1E60)[a2 - 1];
  return *v3;
}

uint64_t sub_1C48E9D8C()
{
  return 0x1900000001;
}

uint64_t sub_1C48E9D98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a3 + 48);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 8) + 216))(*(_QWORD *)(a3 + 8), a3 + 128, a3);
    *(_QWORD *)(a3 + 48) = v7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 112);
  if (v8)
  {
    if (!*(_DWORD *)(v8 + 8))
      goto LABEL_23;
    v8 = *(_QWORD *)(v8 + 40);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 40);
      if (v9)
      {
        v10 = *(_QWORD *)(v8 + 24);
        v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        v12 = &unk_1ED7EA000;
        if ((v11 & 1) == 0)
        {
          v26 = v10;
          v27 = v7;
          v25 = v9;
          v22 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v12 = &unk_1ED7EA000;
          v9 = v25;
          v23 = v22;
          v10 = v26;
          v7 = v27;
          if (v23)
          {
            v24 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v24 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v24;
            __cxa_guard_release(&qword_1ED7EAC88);
            v12 = (_QWORD *)&unk_1ED7EA000;
            v9 = v25;
            v10 = v26;
            v7 = v27;
          }
        }
        v13 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
        v14 = (-348639895 * ((v13 >> 47) ^ v13)) ^ 0x616F6E73;
        v15 = v9 - 1;
        for (i = 1; ; ++i)
        {
          v17 = v14 & v15;
          v18 = v10 + 24 * v17;
          v19 = *(_QWORD **)v18;
          if (*(_QWORD *)v18 == -1)
          {
            if ("samplesnoalias" == (char *)-1)
              goto LABEL_22;
          }
          else if (v19 == (_QWORD *)-2)
          {
            if ("samplesnoalias" == (char *)-2)
              goto LABEL_22;
          }
          else if (*(_QWORD *)(v18 + 8) == 14
                 && *v19 == 0x6E73656C706D6173
                 && *(_QWORD *)((char *)v19 + 6) == 0x7361696C616F6E73)
          {
LABEL_22:
            LOBYTE(v8) = 1;
            return sub_1C48BEFA4(v7, a2, a3, v8 & (a4 ^ 1u));
          }
          if (v19 == (_QWORD *)-1)
            break;
          v14 = i + v17;
        }
      }
LABEL_23:
      LOBYTE(v8) = 0;
    }
  }
  return sub_1C48BEFA4(v7, a2, a3, v8 & (a4 ^ 1u));
}

uint64_t sub_1C48E9FB8(uint64_t a1, int a2)
{
  return dword_1C6606C1C[a2];
}

uint64_t sub_1C48E9FC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6, uint64_t a7, int a8, char a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v45;
  int v46;

  if (*(_BYTE *)(a2 + 1))
    v15 = 17301504;
  else
    v15 = 0x80000;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  v17 = v16;
  v18 = *(_BYTE *)(v16 + 404) == 0;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v22 = *(_BYTE *)(v16 + 297) == 0;
    v23 = *a3;
    v46 = 0;
    v24 = sub_1C4979B6C(v16, v23, "SampleWriteCacheCtl", &v46);
    v21 = v46;
    if (!v24)
      v21 = v22;
  }
  else
  {
    v19 = *a3;
    v46 = 0;
    v20 = sub_1C4979B6C(v16, v19, "SampleReadCacheCtl", &v46);
    v21 = v46;
    if (!v20)
      v21 = 0;
  }
  v45 = v21;
  v25 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v46 = 0;
    if (sub_1C4979B6C(v17, v25, "SampleWriteL2Pers", &v46))
      v26 = v46;
    else
      v26 = v18;
  }
  else
  {
    v46 = 0;
    if (sub_1C4979B6C(v17, v25, "SampleReadL2Pers", &v46))
      v26 = v46;
    else
      v26 = 1;
  }
  v27 = *(_DWORD *)(a2 + 4);
  if (v27 == 1)
  {
    v30 = *(_DWORD *)(a2 + 56) != -1;
    goto LABEL_35;
  }
  if (v27 != 2)
  {
    if (*(_DWORD *)(a2 + 48) == -1 && !*(_BYTE *)(a2 + 60))
    {
      v30 = 5;
      goto LABEL_35;
    }
    goto LABEL_27;
  }
  if (*(_BYTE *)(a2 + 61) || *(_DWORD *)(a2 + 48) != -1)
  {
LABEL_27:
    if (*(_DWORD *)(a2 + 56) == -1)
      v30 = 6;
    else
      v30 = 7;
    goto LABEL_35;
  }
  v28 = *(_DWORD *)(a2 + 52);
  v29 = *(_DWORD *)(a2 + 56);
  if (v28 == -1 || v29 == -1)
  {
    v31 = v29 == -1;
    v32 = 2;
    if (!v31)
      v32 = 3;
    if (v28 == -1)
      v30 = v32;
    else
      v30 = 4;
  }
  else
  {
    v30 = 8;
  }
LABEL_35:
  v33 = *(_DWORD *)(a2 + 64) != -1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v35 = v15 | ((a6 & 0xF) << 11) | (unint64_t)v30 | (16 * v33) | ((unint64_t)(result & 0xF) << 6) | ((unint64_t)(*(_DWORD *)(a2 + 80) != -1) << 10) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 17);
  if (*(_BYTE *)(a2 + 62))
  {
    if (*(_DWORD *)(a2 + 84) == -1 || (a5 - 1) > 2)
      v36 = 0;
    else
      v36 = ((unint64_t)(a5 - 1) << 15) + 0x8000;
    v37 = a8;
    v35 |= v36;
  }
  else
  {
    v37 = a8;
  }
  v38 = v35 | ((unint64_t)(*(_DWORD *)(a2 + 48) != -1) << 18);
  if (v37)
    v38 |= 0x200000uLL;
  if (a9)
    v38 |= 0x400000uLL;
  if (*(_BYTE *)a2)
    v39 = v38 | 0x800000;
  else
    v39 = v38;
  v40 = *(unsigned int *)(a10 + 8);
  if (v40 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v39;
  v41 = *(_DWORD *)(a10 + 12);
  v42 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v42) = v45 | (4 * v26);
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void *sub_1C48EA308(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4073;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F10;
  return result;
}

void *sub_1C48EA3D4(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4077;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F48;
  return result;
}

uint64_t sub_1C48EA4A0()
{
  return 0;
}

uint64_t sub_1C48EA4A8()
{
  return 1;
}

uint64_t sub_1C48EA4B0()
{
  return 1;
}

uint64_t sub_1C48EA4B8()
{
  return 0;
}

uint64_t sub_1C48EA4C0()
{
  return 1;
}

uint64_t sub_1C48EA4C8()
{
  return 0;
}

uint64_t sub_1C48EA4D0()
{
  return 395;
}

BOOL sub_1C48EA4D8(uint64_t a1, int a2)
{
  return a2 == 318;
}

uint64_t sub_1C48EA4E4()
{
  return 0;
}

uint64_t sub_1C48EA4EC()
{
  return 0;
}

uint64_t sub_1C48EA4F4()
{
  return 0;
}

void sub_1C48EA4FC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48EA510()
{
  return 1;
}

void *sub_1C48EA518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int i;
  __int128 v10;
  void *result;
  __int128 v12;

  v4 = *(unsigned __int16 *)(a2 + 56);
  if (v4 != 1)
  {
    v7 = a4 + 16;
    v8 = *(_DWORD *)(a4 + 8);
    for (i = 1; i != v4; i += 2)
    {
      v10 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + 40 * i);
      if (v8 >= *(_DWORD *)(a4 + 12))
      {
        v12 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + 40 * i);
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v7, v8 + 1, 16);
        v10 = v12;
        v8 = *(_DWORD *)(a4 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a4 + 16 * v8) = v10;
      v8 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v8;
    }
  }
  return result;
}

uint64_t sub_1C48EA5D0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  void *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;

  result = 0;
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0x22)
  {
    if (v8 == 36)
      goto LABEL_11;
    if (v8 != 35)
      return result;
LABEL_7:
    v9 = *(_QWORD *)(a2 + 80);
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    *a4 = *v10;
    if (!a5)
      return 1;
    LOBYTE(result) = 0;
LABEL_21:
    *a5 = result;
    return 1;
  }
  if (v8 == 11)
    goto LABEL_7;
  if (v8 != 12)
    return result;
LABEL_11:
  v11 = *(_QWORD *)(a2 + 80);
  v13 = *(void **)(v11 + 32);
  v12 = (llvm::detail::DoubleAPFloat *)(v11 + 32);
  if (v13 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (unsigned int *)&v17);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (unsigned int *)&v17);
  v14 = v17;
  v15 = v18 >= 0x41;
  if (v18 >= 0x41)
    v16 = v17;
  else
    v16 = &v17;
  *a4 = *v16;
  if (v15)
  {
    if (v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  result = 1;
  if (a5)
    goto LABEL_21;
  return result;
}

uint64_t sub_1C48EA6CC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;
  void *v14;
  _QWORD *v15;
  unsigned int v16;

  result = 0;
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0x22)
  {
    if (v8 == 36)
      goto LABEL_9;
    if (v8 != 35)
      return result;
LABEL_7:
    v9 = *(_QWORD *)(a2 + 80);
    v10 = *(_DWORD *)(v9 + 32);
    if (v10 > 0x40)
      v11 = **(_QWORD **)(v9 + 24);
    else
      v11 = (uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v10) >> -(char)v10;
    *a4 = v11;
    if (!a5)
      return 1;
    LOBYTE(result) = 0;
LABEL_18:
    *a5 = result;
    return 1;
  }
  if (v8 == 11)
    goto LABEL_7;
  if (v8 != 12)
    return result;
LABEL_9:
  v12 = *(_QWORD *)(a2 + 80);
  v14 = *(void **)(v12 + 32);
  v13 = (llvm::detail::DoubleAPFloat *)(v12 + 32);
  if (v14 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v13, (unsigned int *)&v15);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v13, (unsigned int *)&v15);
  if (v16 > 0x40)
  {
    *a4 = *v15;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    *a4 = (uint64_t)((_QWORD)v15 << -(uint64_t)v16) >> -(uint64_t)v16;
  }
  result = 1;
  if (a5)
    goto LABEL_18;
  return result;
}

uint64_t *sub_1C48EA7E4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t **v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t **v40;
  int v41;
  int v42;
  int v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  unsigned int v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t **v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;

  v10 = result;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    v11 = 0;
    v13 = 0;
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, a4);
    LODWORD(v13) = v12;
    v69 = -1;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, int *, _QWORD))(*v10 + 152))(v10, v11, v12, &v69, 0);
    if (v69 >= 0)
      v14 = (int)result;
    else
      v14 = 0;
    if (v14 | result ^ 1)
    {
      v13 = v13;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(_BYTE *)(a2 + 61))
      v15 = 0;
    else
      v15 = *(_BYTE *)(a2 + 60) == 0;
    if (v15 && *(_DWORD *)(a2 + 48) == -1)
    {
      v17 = *(_DWORD *)(a2 + 4);
      if (!v17)
        goto LABEL_34;
    }
    else
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10[1] + 224))(v10[1], a2);
      v17 = result >> 1;
      if (!(result >> 1))
        goto LABEL_34;
    }
    v28 = 0;
    do
    {
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*v10 + 16))(v10, a4, (v28 + *(_DWORD *)(a2 + 72)));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 80))(v10, v29, v30, a6, 0xFFFFFFFFLL);
      ++v28;
    }
    while (v17 != v28);
LABEL_34:
    if (v11)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
      v31 = result;
      v33 = v32;
      v34 = *(unsigned int *)(a6 + 8);
      if (v34 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v34 + 1, 16);
        LODWORD(v34) = *(_DWORD *)(a6 + 8);
      }
      v35 = (uint64_t **)(*(_QWORD *)a6 + 16 * v34);
      *v35 = v31;
      v35[1] = v33;
      ++*(_DWORD *)(a6 + 8);
      v36 = 12;
    }
    else
    {
      v36 = 8;
    }
    goto LABEL_39;
  }
  v18 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 68);
  if (v18 != -1 || v19 != -1)
  {
    if (v19 == -1)
      v21 = v18;
    else
      v21 = v19;
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 16))(v10, a4, v21);
    v24 = v22;
    if (*(_DWORD *)(a2 + 92) != -1)
    {
      v69 = -1;
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, int *, _QWORD))(*v10 + 144))(v10, v23, v22, &v69, 0);
      if ((v25 & (v69 < 0xFF)) != 0)
        v26 = 7;
      else
        v26 = 6;
      *a5 = v26;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v23, v24);
      goto LABEL_48;
    }
    if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 240))(v10, v23, v22) & 1) != 0
      || (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 224))(v10, v23, v24))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10[1] + 176))(v10[1]))
        goto LABEL_45;
    }
    else if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 248))(v10, v23, v24) & 1) == 0
           && !(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 232))(v10, v23, v24)
           || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10[1] + 176))(v10[1]) != 2)
    {
LABEL_45:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
    }
    v69 = -1;
    v68 = 0;
    v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, int *, char *))(*v10 + 144))(v10, v23, v24, &v69, &v68);
    result = 0;
    if (v69)
      v42 = 1;
    else
      v42 = v41 ^ 1;
    if (v19 == -1)
      v43 = v42;
    else
      v43 = 1;
    if (((v41 ^ 1) & 1) == 0)
    {
      if (v11)
      {
        if (v43)
        {
          v67 = 0;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, int *, _QWORD))(*v10 + 144))(v10, v11, v13, &v67, 0);
          if ((_DWORD)result)
            v69 |= v67 << 16;
        }
      }
    }
    if ((v43 & ~(_DWORD)result) != 1 || v11 == 0)
    {
      if ((v41 & v43 | result) != 1)
        goto LABEL_89;
      v45 = (_QWORD *)v10[4];
      if (*(_DWORD *)(v45[1] + 544) == 1)
        goto LABEL_89;
      v46 = v45[43];
      v66 = v69;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 224))(v46) & 0xFF00000000) == 0)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 376))(v46, 1);
        if ((_DWORD)result == -1)
          goto LABEL_89;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v46 + 232))(v46, v66, result);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 328))(v46, v66);
      }
      v47 = *(uint64_t (**)(void))(*(_QWORD *)v10[1] + 56);
    }
    else
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 176))(v10, v23, v24);
      if ((_DWORD)result == -1)
        goto LABEL_89;
      v48 = result;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 176))(v10, v11, v13);
      if ((v48 & 3) != 0 || (_DWORD)result == -1 || v48 > 0xFF || (_DWORD)result != v48 + 2)
        goto LABEL_89;
      v47 = *(uint64_t (**)(void))(*(_QWORD *)v10[1] + 56);
    }
    result = (uint64_t *)v47();
    if ((_DWORD)result != -1)
    {
      if (v11)
        v49 = v43;
      else
        v49 = 0;
      v50 = *v10;
      v51 = (_DWORD *)(a6 + 8);
      if (v49 == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *))(v50 + 296))(v10, result);
      else
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *))(v50 + 160))(v10, result);
      v64 = result;
      v60 = v52;
      v65 = *(unsigned int *)(a6 + 8);
      if (v65 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v65 + 1, 16);
        LODWORD(v65) = *(_DWORD *)(a6 + 8);
      }
      v63 = 0;
      v62 = (uint64_t **)(*(_QWORD *)a6 + 16 * v65);
      *v62 = v64;
      goto LABEL_97;
    }
LABEL_89:
    if (v43)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v23, v24);
      v53 = result;
      v55 = v54;
      v56 = *(unsigned int *)(a6 + 8);
      if (v56 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v56 + 1, 16);
        LODWORD(v56) = *(_DWORD *)(a6 + 8);
      }
      v57 = (uint64_t **)(*(_QWORD *)a6 + 16 * v56);
      *v57 = v53;
      v57[1] = v55;
      ++*(_DWORD *)(a6 + 8);
    }
    if (!v11)
    {
      v63 = 1;
LABEL_99:
      if (v19 == -1)
      {
        if (v43)
        {
          if (v63)
          {
            if (v11)
              v36 = 11;
            else
              v36 = 5;
          }
          else if (v11)
          {
            v36 = 10;
          }
          else
          {
            v36 = 1;
          }
        }
        else if (v11)
        {
          v36 = 9;
        }
        else
        {
          v36 = 0;
        }
      }
      else if (v63)
      {
        v36 = 6;
      }
      else
      {
        v36 = 2;
      }
LABEL_39:
      *a5 = v36;
      return result;
    }
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
    v58 = result;
    v60 = v59;
    v61 = *(unsigned int *)(a6 + 8);
    v51 = (_DWORD *)(a6 + 8);
    if (v61 >= *(_DWORD *)(a6 + 12))
    {
      result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v61 + 1, 16);
      LODWORD(v61) = *(_DWORD *)(a6 + 8);
    }
    v62 = (uint64_t **)(*(_QWORD *)a6 + 16 * v61);
    *v62 = v58;
    v63 = 1;
LABEL_97:
    v62[1] = v60;
    ++*v51;
    goto LABEL_99;
  }
  if (*(_DWORD *)(a2 + 92) == -1)
  {
    if (!v11)
    {
      *a5 = 0;
      return result;
    }
    *a5 = 9;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 168))(v10, v11, v13);
  }
  else
  {
    *a5 = 7;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*v10 + 72))(v10, 0);
  }
LABEL_48:
  v37 = result;
  v38 = v27;
  v39 = *(unsigned int *)(a6 + 8);
  if (v39 >= *(_DWORD *)(a6 + 12))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v39 + 1, 16);
    LODWORD(v39) = *(_DWORD *)(a6 + 8);
  }
  v40 = (uint64_t **)(*(_QWORD *)a6 + 16 * v39);
  *v40 = v37;
  v40[1] = v38;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *sub_1C48EAF2C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *result;
  int v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 64);
  result = (void *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1)
    v10 = 1;
  else
    v10 = (int)result;
  v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || (_DWORD)v11 != -1)
  {
    v13 = (uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[2];
    if ((_DWORD)v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if ((_DWORD)v11 == -1)
        v11 = *(unsigned int *)(a2 + 64);
      v15 = v13(a1, a3, v11);
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v15, v16);
    }
    else
    {
      v17 = ((uint64_t (*)(_QWORD **, uint64_t))v13)(a1, a3);
      v19 = v18;
      v20 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      v22 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v20, v21);
      v24 = v23;
      v25 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v17, v19);
      v32 = v22;
      v33 = v24;
      v34 = v25;
      v35 = v26;
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, a3, &v32, 2);
    }
    v28 = result;
    v29 = v27;
    v30 = *(unsigned int *)(a4 + 8);
    if (v30 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v30 + 1, 16);
      LODWORD(v30) = *(_DWORD *)(a4 + 8);
    }
    v31 = (_QWORD *)(*(_QWORD *)a4 + 16 * v30);
    *v31 = v28;
    v31[1] = v29;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

void sub_1C48EB0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[5];

  v47[4] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 48) != -1)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v8, v9);
    v12 = v11;
    v13 = *(unsigned int *)(a4 + 8);
    if (v13 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v13 + 1, 16);
      LODWORD(v13) = *(_DWORD *)(a4 + 8);
    }
    v14 = (uint64_t *)(*(_QWORD *)a4 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    ++*(_DWORD *)(a4 + 8);
  }
  v15 = *(_DWORD *)(a2 + 52);
  if (*(_BYTE *)(a2 + 1))
  {
    if (v15 != -1)
    {
LABEL_7:
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v16, v17);
      v20 = v19;
      v21 = *(unsigned int *)(a4 + 8);
      if (v21 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 16);
        LODWORD(v21) = *(_DWORD *)(a4 + 8);
      }
      v22 = (uint64_t *)(*(_QWORD *)a4 + 16 * v21);
      *v22 = v18;
      v22[1] = v20;
      ++*(_DWORD *)(a4 + 8);
    }
LABEL_18:
    if (*(_DWORD *)(a2 + 56) != -1)
    {
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v38, v39);
      v42 = v41;
      v43 = *(unsigned int *)(a4 + 8);
      if (v43 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v43 + 1, 16);
        LODWORD(v43) = *(_DWORD *)(a4 + 8);
      }
      v44 = (uint64_t *)(*(_QWORD *)a4 + 16 * v43);
      *v44 = v40;
      v44[1] = v42;
      ++*(_DWORD *)(a4 + 8);
    }
    return;
  }
  if (v15 == -1)
    goto LABEL_18;
  if (*(_DWORD *)(a2 + 56) == -1)
    goto LABEL_7;
  v45 = v47;
  v46 = 0x200000000;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  v47[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v23, v24);
  v47[1] = v25;
  LODWORD(v46) = 1;
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 56));
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, v26, v27);
  v30 = v29;
  v31 = v46;
  if (v46 >= HIDWORD(v46))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 16);
    v31 = v46;
  }
  v32 = (uint64_t *)((char *)v45 + 16 * v31);
  *v32 = v28;
  v32[1] = v30;
  LODWORD(v46) = v46 + 1;
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a3, v45);
  v35 = v34;
  v36 = *(unsigned int *)(a4 + 8);
  if (v36 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v36 + 1, 16);
    LODWORD(v36) = *(_DWORD *)(a4 + 8);
  }
  v37 = (uint64_t *)(*(_QWORD *)a4 + 16 * v36);
  *v37 = v33;
  v37[1] = v35;
  ++*(_DWORD *)(a4 + 8);
  if (v45 != v47)
    free(v45);
}

void *sub_1C48EB4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7, uint64_t a8, _QWORD *a9, uint64_t a10, __int128 *a11, __int128 *a12, uint64_t a13, int a14, __int128 *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *result;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v83;
  __int128 v84;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];

  if (a10)
  {
    v27 = 8 * a10;
    while (1)
    {
      LODWORD(v90[0]) = *a9;
      v28 = *(_QWORD *)(a21 + 24);
      if (!v28)
        break;
      v29 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v90);
      v31 = v30;
      v32 = *(unsigned int *)(a20 + 8);
      if (v32 >= *(unsigned int *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v32 + 1, 16);
        v32 = *(unsigned int *)(a20 + 8);
      }
      v33 = (uint64_t *)(*(_QWORD *)a20 + 16 * v32);
      *v33 = v29;
      v33[1] = v31;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v27 -= 8;
      if (!v27)
        goto LABEL_7;
    }
LABEL_60:
    sub_1C485C2F0();
    sub_1C48EBA6C();
  }
LABEL_7:
  if (a18)
  {
    v34 = a1;
    v90[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a17, a18);
    v90[1] = v35;
    v36 = *(_QWORD *)(a22 + 24);
    if (!v36)
      goto LABEL_60;
    v37 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v36 + 48))(v36, v90);
    v39 = v38;
    v40 = *(unsigned int *)(a20 + 8);
    if (v40 >= *(_DWORD *)(a20 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v40 + 1, 16);
      LODWORD(v40) = *(_DWORD *)(a20 + 8);
    }
    v41 = (uint64_t *)(*(_QWORD *)a20 + 16 * v40);
    *v41 = v37;
    v41[1] = v39;
    v42 = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v42;
    v43 = a2;
  }
  else
  {
    v42 = *(_DWORD *)(a20 + 8);
    v43 = a2;
    v34 = a1;
  }
  v44 = *a5;
  if (v42 >= *(_DWORD *)(a20 + 12))
  {
    v83 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v42 + 1, 16);
    v44 = v83;
    v42 = *(_DWORD *)(a20 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a20 + 16 * v42) = v44;
  v45 = (*(_DWORD *)(a20 + 8) + 1);
  *(_DWORD *)(a20 + 8) = v45;
  if (*((_BYTE *)a6 + 16))
  {
    v46 = *a6;
    if (v45 >= *(_DWORD *)(a20 + 12))
    {
      v84 = *a6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v45 + 1, 16);
      v46 = v84;
      LODWORD(v45) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v45) = v46;
    LODWORD(v45) = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v45;
  }
  if (*(_DWORD *)(v43 + 92) == -1 && *((_BYTE *)a7 + 16))
  {
    v47 = *a7;
    if (v45 >= *(_DWORD *)(a20 + 12))
    {
      v89 = *a7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v45 + 1, 16);
      v47 = v89;
      LODWORD(v45) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v45) = v47;
    LODWORD(v45) = *(_DWORD *)(a20 + 8) + 1;
    *(_DWORD *)(a20 + 8) = v45;
  }
  v48 = *a11;
  if (v45 >= *(_DWORD *)(a20 + 12))
  {
    v88 = *a11;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v45 + 1, 16);
    v48 = v88;
    LODWORD(v45) = *(_DWORD *)(a20 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a20 + 16 * v45) = v48;
  ++*(_DWORD *)(a20 + 8);
  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 8) + 184))(*(_QWORD *)(v34 + 8));
  if ((_DWORD)result)
  {
    LODWORD(v90[0]) = 0;
    v50 = *(_QWORD *)(a21 + 24);
    if (!v50)
      goto LABEL_60;
    result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v50 + 48))(v50, v90);
    v51 = result;
    v53 = v52;
    v54 = *(unsigned int *)(a20 + 8);
    if (v54 >= *(_DWORD *)(a20 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v54 + 1, 16);
      LODWORD(v54) = *(_DWORD *)(a20 + 8);
    }
    v55 = (_QWORD *)(*(_QWORD *)a20 + 16 * v54);
    *v55 = v51;
    v55[1] = v53;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    v57 = 16 * a13;
    v58 = *(_DWORD *)(a20 + 8);
    do
    {
      v59 = *a12;
      if (v58 >= *(_DWORD *)(a20 + 12))
      {
        v86 = *a12;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v58 + 1, 16);
        v59 = v86;
        v58 = *(_DWORD *)(a20 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a20 + 16 * v58) = v59;
      v58 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v58;
      ++a12;
      v57 -= 16;
    }
    while (v57);
    if (a14 != 7)
    {
      result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 8) + 184))(*(_QWORD *)(v34 + 8));
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(v43 + 92) == -1
          || (result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 8) + 320))(*(_QWORD *)(v34 + 8)),
              (_DWORD)result))
        {
          LODWORD(v90[0]) = 0;
          v60 = *(_QWORD *)(a21 + 24);
          if (!v60)
            goto LABEL_60;
          result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v60 + 48))(v60, v90);
          v61 = result;
          v63 = v62;
          v64 = *(unsigned int *)(a20 + 8);
          if (v64 >= *(_DWORD *)(a20 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v64 + 1, 16);
            LODWORD(v64) = *(_DWORD *)(a20 + 8);
          }
          v65 = (_QWORD *)(*(_QWORD *)a20 + 16 * v64);
          *v65 = v61;
          v65[1] = v63;
          ++*(_DWORD *)(a20 + 8);
        }
      }
    }
  }
  if (a16)
  {
    v67 = *(_DWORD *)(a20 + 8);
    v68 = 16 * a16;
    do
    {
      v69 = *a15;
      if (v67 >= *(_DWORD *)(a20 + 12))
      {
        v87 = *a15;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v67 + 1, 16);
        v69 = v87;
        v67 = *(_DWORD *)(a20 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a20 + 16 * v67) = v69;
      v67 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v67;
      ++a15;
      v68 -= 16;
    }
    while (v68);
    if (!a18)
    {
      LODWORD(v90[0]) = 0;
      v70 = *(_QWORD *)(a21 + 24);
      if (!v70)
        goto LABEL_60;
      result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v70 + 48))(v70, v90);
      v71 = result;
      v73 = v72;
      v74 = *(unsigned int *)(a20 + 8);
      if (v74 >= *(_DWORD *)(a20 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v74 + 1, 16);
        LODWORD(v74) = *(_DWORD *)(a20 + 8);
      }
      v75 = (_QWORD *)(*(_QWORD *)a20 + 16 * v74);
      *v75 = v71;
      v75[1] = v73;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (*(_DWORD *)(v43 + 92) == -1)
  {
    LODWORD(v90[0]) = 0;
    v76 = *(_QWORD *)(a21 + 24);
    if (!v76)
      goto LABEL_60;
    result = (void *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 48))(v76, v90);
    v77 = result;
    v79 = v78;
    v80 = *(unsigned int *)(a20 + 8);
    if (v80 >= *(_DWORD *)(a20 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v80 + 1, 16);
      LODWORD(v80) = *(_DWORD *)(a20 + 8);
    }
    v81 = (_QWORD *)(*(_QWORD *)a20 + 16 * v80);
    *v81 = v77;
    v81[1] = v79;
    ++*(_DWORD *)(a20 + 8);
  }
  return result;
}

void sub_1C48EBA6C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48EBA80()
{
  return 0;
}

uint64_t sub_1C48EBA88(int8x8_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, _DWORD *a14, uint64_t a15, int a16, __int32 a17)
{
  uint8x8_t v17;
  int v18;
  char *v19;
  uint64_t v20;

  if (a5 == -1)
  {
    v20 = 16;
    if (a13)
      v20 = 8;
    v19 = (char *)&unk_1C65EFC2C + 24 * (a12 ^ 1u) + 4 * (a3 != 7) + v20;
  }
  else
  {
    a1.i32[0] = a17;
    v17 = (uint8x8_t)vcnt_s8(a1);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = *a14 - 1;
    if (!*a14)
      v18 = 0;
    v19 = (char *)&unk_1C65EDD2C
        + 768 * a7
        + 384 * (a12 ^ 1)
        + 96 * (v17.i32[0] - 1)
        + 48 * (a13 ^ 1)
        + 16 * v18
        + 8 * (a3 != 0)
        + 4 * (a10 | a11);
  }
  return *(unsigned int *)v19;
}

void *sub_1C48EBB50(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4072;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F10;
  return result;
}

void *sub_1C48EBC1C(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  void *result;

  *a3 = 4075;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
  *v11 = a2 | 0x100000000;
  v11[1] = -1;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7FA5F48;
  return result;
}

void *sub_1C48EBCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v16 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v18 = v17;
  v19 = *(unsigned int *)(a2 + 8);
  if (v19 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  v20 = (_QWORD *)(*(_QWORD *)a2 + 16 * v19);
  *v20 = v16;
  v20[1] = v18;
  ++*(_DWORD *)(a2 + 8);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  v21 = *a4;
  v31 = 0;
  v32 = 0;
  v22 = sub_1C6366AB4(a1, v21, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  if (v31)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
    v27 = *(_DWORD *)(a2 + 8);
  }
  v28 = *a5;
  if (v27 >= *(_DWORD *)(a2 + 12))
  {
    v30 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 16);
    v28 = v30;
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v27) = v28;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C612E7D0(a1, a2, a6, a7, a8, a9);
}

uint64_t sub_1C48EBEAC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, __int128 *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v9 = *a3;
  v25 = 0;
  v26 = 0;
  v10 = sub_1C6366AB4(a1, v9, (const llvm::APInt *)&v25, (llvm *)6, 0, 1, 0);
  v12 = v11;
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 8);
  }
  v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
  *v14 = v10;
  v14[1] = v12;
  ++*(_DWORD *)(a2 + 8);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  v15 = *a4;
  v25 = 0;
  v26 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v15, (const llvm::APInt *)&v25, (llvm *)6, 0, 1, 0);
  v17 = result;
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (uint64_t *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  v22 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v22;
  if (v25)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
    v22 = *(_DWORD *)(a2 + 8);
  }
  v23 = *a5;
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    v24 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    v23 = v24;
    v22 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v22) = v23;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void *sub_1C48EC030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10, __int128 *a11, __int128 *a12, __int128 *a13)
{
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v20 = a12;
  v21 = a13;
  v22 = *(unsigned int *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    v55 = a1;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    a1 = v55;
    v20 = a12;
    v21 = a13;
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  v23 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
  *v23 = a3;
  v23[1] = a4;
  v24 = *(_DWORD *)(a2 + 12);
  v25 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v25;
  v26 = *a5;
  if (v25 >= v24)
  {
    v40 = a1;
    v41 = v21;
    v42 = v20;
    v56 = v26;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v56;
    a1 = v40;
    v20 = v42;
    v21 = v41;
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  v27 = *(_DWORD *)(a2 + 12);
  v28 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v28;
  v29 = *a6;
  if (v28 >= v27)
  {
    v43 = a1;
    v44 = v21;
    v45 = v20;
    v57 = v29;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v28 + 1, 16);
    v29 = v57;
    a1 = v43;
    v20 = v45;
    v21 = v44;
    LODWORD(v28) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v28) = v29;
  v30 = *(_DWORD *)(a2 + 12);
  v31 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v31;
  v32 = *a7;
  if (v31 >= v30)
  {
    v46 = a1;
    v47 = v21;
    v48 = v20;
    v58 = v32;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
    v32 = v58;
    a1 = v46;
    v20 = v48;
    v21 = v47;
    LODWORD(v31) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v31) = v32;
  v33 = *(_DWORD *)(a2 + 12);
  v34 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v34;
  v35 = *a8;
  if (v34 >= v33)
  {
    v49 = a1;
    v50 = v21;
    v51 = v20;
    v59 = v35;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v34 + 1, 16);
    v35 = v59;
    a1 = v49;
    v20 = v51;
    v21 = v50;
    LODWORD(v34) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v34) = v35;
  v36 = *(_DWORD *)(a2 + 12);
  v37 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v37;
  v38 = *a9;
  if (v37 >= v36)
  {
    v52 = a1;
    v53 = v21;
    v54 = v20;
    v60 = *a9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v37 + 1, 16);
    v38 = v60;
    a1 = v52;
    v20 = v54;
    v21 = v53;
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v37) = v38;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C612E7D0(a1, a2, a10, a11, v20, v21);
}

uint64_t sub_1C48EC2C0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, __int128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v16 = *a4;
  v30 = 0;
  v31 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v30)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a5;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v28;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v26;
  v27 = *a6;
  if (v26 >= v25)
  {
    v29 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1C48EC494(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  __int128 v9;

  if ((*(_DWORD *)(result + 32) | 2) == 2)
  {
    v2 = result;
    v3 = *a2;
    *(_DWORD *)(result + 8) = *(_QWORD *)(result + 8);
    result = (uint64_t)sub_1C6366AB4(*(_QWORD *)(v3 + 296), 0, (const llvm::APInt *)(a2 + 1), (llvm *)5, 0, 1, 0);
    *(_QWORD *)(v2 + 16) = result;
    *(_DWORD *)(v2 + 24) = v4;
    *(_DWORD *)(v2 + 32) = 1;
    v5 = *(_QWORD *)v2;
    v6 = *(unsigned __int16 *)(*(_QWORD *)v2 + 24);
    if (*(_QWORD *)v2 && v6 == 45)
    {
      if (*(_DWORD *)(v5 + 80) == 64)
        *(_DWORD *)(v2 + 32) = 3;
      *(_DWORD *)(v2 + 40) = dword_1C6606C50[*(int *)(v5 + 76) - 1];
    }
    else
    {
      if (v6 == 35)
        *(_DWORD *)(v2 + 32) = 6;
      v9 = *(_OWORD *)(*(_QWORD *)(v5 + 40) + 16 * *(unsigned int *)(v2 + 8));
      if ((_BYTE)v9)
        result = sub_1C47A8C74((unsigned __int8 *)&v9);
      else
        result = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
      if ((_DWORD)v7 == 1)
      {
        v8 = result;
        result = v8;
      }
      *(_DWORD *)(v2 + 40) = result;
    }
  }
  return result;
}

void *sub_1C48EC5B0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, int *a6)
{
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 *v36[2];

  v12 = *a3;
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    v33 = *a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
    v12 = v33;
    LODWORD(v13) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v13) = v12;
  v14 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v14;
  v16 = *((_QWORD *)a3 + 2);
  v15 = *((_QWORD *)a3 + 3);
  if (v16 | v15)
  {
    if (v14 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
      LODWORD(v14) = *(_DWORD *)(a2 + 8);
    }
    v14 = *(_QWORD *)a2 + 16 * v14;
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v15;
    LODWORD(v14) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v14;
  }
  v17 = *a4;
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v34 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    v17 = v34;
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v14) = v17;
  v18 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v18;
  v20 = *((_QWORD *)a4 + 2);
  v19 = *((_QWORD *)a4 + 3);
  if (v20 | v19)
  {
    if (v18 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
      LODWORD(v18) = *(_DWORD *)(a2 + 8);
    }
    v18 = *(_QWORD *)a2 + 16 * v18;
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v18 + 8) = v19;
    LODWORD(v18) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v18;
  }
  v21 = *a5;
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    v35 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    v21 = v35;
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v18) = v21;
  v22 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v22;
  v24 = *((_QWORD *)a5 + 2);
  v23 = *((_QWORD *)a5 + 3);
  if (v24 | v23)
  {
    if (v22 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
      LODWORD(v22) = *(_DWORD *)(a2 + 8);
    }
    v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v22);
    *v25 = v24;
    v25[1] = v23;
    ++*(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  v36[0] = 0;
  v36[1] = 0;
  result = sub_1C6366AB4(a1, v26, (const llvm::APInt *)v36, (llvm *)6, 0, 1, 0);
  v28 = result;
  v30 = v29;
  v31 = *(unsigned int *)(a2 + 8);
  if (v31 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
    LODWORD(v31) = *(_DWORD *)(a2 + 8);
  }
  v32 = (_QWORD *)(*(_QWORD *)a2 + 16 * v31);
  *v32 = v28;
  v32[1] = v30;
  ++*(_DWORD *)(a2 + 8);
  if (v36[0])
    return (void *)llvm::MetadataTracking::untrack((uint64_t)v36, v36[0]);
  return result;
}

void *sub_1C48EC84C(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, __int128 *a6, unsigned int *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  unsigned __int8 *v28[2];

  v28[0] = 0;
  v28[1] = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)v28, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  v20 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v20;
  if (v28[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v28, v28[0]);
    v20 = *(_DWORD *)(a2 + 8);
  }
  v21 = *a4;
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    v26 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    v21 = v26;
    v20 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v20) = v21;
  v22 = *(_DWORD *)(a2 + 12);
  v23 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v23;
  v24 = *a5;
  if (v23 >= v22)
  {
    v27 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v27;
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C613E93C(a1, a2, a6, a7, a8);
}

void *sub_1C48EC9CC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, __int128 *a6, unsigned int *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v20 = *a4;
  v30 = 0;
  v31 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  v26 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v26;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v26 = *(_DWORD *)(a2 + 8);
  }
  v27 = *a5;
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C613E93C(a1, a2, a6, a7, a8);
}

void *sub_1C48ECB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, __int128 *a6, unsigned int *a7, __int128 *a8, int *a9)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  __int128 v26;
  __int128 v28;
  unsigned __int8 *v29[2];

  v17 = *(unsigned int *)(a2 + 8);
  if (v17 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 16);
    LODWORD(v17) = *(_DWORD *)(a2 + 8);
  }
  v18 = (_QWORD *)(*(_QWORD *)a2 + 16 * v17);
  *v18 = a3;
  v18[1] = a4;
  ++*(_DWORD *)(a2 + 8);
  v19 = *a5;
  v29[0] = 0;
  v29[1] = 0;
  v20 = sub_1C6366AB4(a1, v19, (const llvm::APInt *)v29, (llvm *)6, 0, 1, 0);
  v22 = v21;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  v24 = (_QWORD *)(*(_QWORD *)a2 + 16 * v23);
  *v24 = v20;
  v24[1] = v22;
  v25 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v25;
  if (v29[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v29, v29[0]);
    v25 = *(_DWORD *)(a2 + 8);
  }
  v26 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v28 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v28;
    v25 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C48E86FC(a1, a2, *a7, a8, a9);
}

void *sub_1C48ECD04(uint64_t a1, uint64_t a2, int a3, __int128 *a4, unsigned int *a5, __int128 *a6, unsigned int *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  v20 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v20;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v20 = *(_DWORD *)(a2 + 8);
  }
  v21 = *a4;
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    v21 = v29;
    v20 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v20) = v21;
  ++*(_DWORD *)(a2 + 8);
  v22 = *a5;
  v30 = 0;
  v31 = 0;
  v23 = sub_1C6366AB4(a1, v22, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return sub_1C613E93C(a1, a2, a6, a7, a8);
}

BOOL sub_1C48ECEBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int ExtendedSizeInBits;
  const char *v11;
  unsigned int v12;
  uint64_t v15;
  int v16;
  __int128 v17;

  v17 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  if ((_BYTE)v17)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v17);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v17);
  v12 = ExtendedSizeInBits;
  if ((_DWORD)v11 == 1)
  if (v12 == 32 || v12 == 16)
  {
    *(_QWORD *)a4 = a2;
    *(_DWORD *)(a4 + 8) = a3;
    v15 = *(_QWORD *)(a1 + 296);
    v17 = 0uLL;
    *(_QWORD *)a5 = sub_1C6366AB4(v15, 0, (const llvm::APInt *)&v17, (llvm *)5, 0, 1, 0);
    *(_DWORD *)(a5 + 8) = v16;
    if ((_QWORD)v17)
      llvm::MetadataTracking::untrack((uint64_t)&v17, (unsigned __int8 *)v17);
  }
  return v12 == 32 || v12 == 16;
}

uint64_t sub_1C48ECFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int ExtendedSizeInBits;
  const char *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BYTE *v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _BYTE v28[32];
  int v29;
  uint64_t v30;
  uint64_t v31;

  v7 = a3;
  v30 = a2;
  v31 = a3;
  sub_1C48DC710((uint64_t)v28, *(_QWORD *)(a1 + 296), a2, a3, 0, 0, 0);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(unsigned __int8 **)v10;
  v12 = *(_QWORD *)(v10 + 8);
  if ((_BYTE)v11)
  {
    v13 = ((_BYTE)v11 - 75) < 0x2Du || ((_BYTE)v11 + 104) < 0x13u;
    v14 = ((_BYTE)v11 - 8) < 7u || v13;
    v26 = v11;
    v27 = v12;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v26);
  }
  else
  {
    if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
      v17 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
    else
      v17 = *(_DWORD *)(v12 + 8);
    v14 = v17 < 7;
    v26 = v11;
    v27 = v12;
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v26);
  }
  if ((_DWORD)v16 == 1)
  {
    v25 = ExtendedSizeInBits;
    ExtendedSizeInBits = v25;
  }
  v18 = v29 < 4 && v14;
  if (!v18 || ExtendedSizeInBits != 32 && ExtendedSizeInBits != 16)
    return 0;
  v20 = *(_BYTE **)(a1 + 480);
  if (v20[319])
    v21 = v20[338] == 0;
  else
    v21 = 0;
  v22 = v21 || v20[326] != 0;
  sub_1C48DD498(a2, v7, (uint64_t)&v30, 0, 0, v22, *(_QWORD *)(a1 + 296));
  *(_QWORD *)a4 = v30;
  *(_DWORD *)(a4 + 8) = v31;
  v23 = *(_QWORD *)(a1 + 296);
  v26 = 0;
  v27 = 0;
  *(_QWORD *)a5 = sub_1C6366AB4(v23, 0, (const llvm::APInt *)&v26, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v24;
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  return 1;
}

uint64_t sub_1C48ED184(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::TargetLoweringBase *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  const llvm::TargetRegisterInfo *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  __int16 v35;

  v4 = a1 + 184252;
  v5 = (_BYTE *)(a1 + 40958);
  v6 = (_BYTE *)(a1 + 33514);
  v7 = a1 + 23020;
  v8 = a1 + 18730;
  v9 = a1 + 14448;
  v10 = a1 + 4509;
  v11 = sub_1C6374BF4((llvm::TargetLoweringBase *)a1, (const llvm::TargetMachine *)a2);
  *(_QWORD *)v11 = &off_1E7FA2330;
  *(_QWORD *)(v4 + 44) = a2 + 1328;
  *((_QWORD *)v11 + 18) = &off_1E7FA6488;
  *((_QWORD *)v11 + 61) = &off_1E7FA6488;
  v12 = a2[1655];
  if (a2[1655])
    *(_QWORD *)(a1 + 856) = &off_1E7FA6488;
  *(_QWORD *)(a1 + 704) = &off_1E7FA5F48;
  *(_QWORD *)(a1 + 400) = &off_1E7FA5F48;
  *(_QWORD *)(a1 + 128) = &off_1E7FA5F10;
  *(_QWORD *)(a1 + 136) = &off_1E7FA5F48;
  *(_QWORD *)(a1 + 312) = &off_1E7FA5F10;
  *(_QWORD *)(a1 + 320) = &off_1E7FA5F48;
  *(_QWORD *)(a1 + 168) = &off_1E7FA5F10;
  *(_QWORD *)(a1 + 176) = &off_1E7FA5F48;
  *(_BYTE *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 8) = 4096;
  *(_DWORD *)(v4 + 28) = 4096;
  *(_DWORD *)v4 = 4096;
  *(_QWORD *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = 1;
  *(_BYTE *)(v10 + 1875) = 2;
  *(_BYTE *)(v10 + 1485) = 0;
  *(_BYTE *)(v10 + 1095) = 2;
  *(_BYTE *)(v7 + 134) = 2;
  *(_BYTE *)(v8 + 914) = 2;
  *(_BYTE *)(v8 + 134) = 2;
  *(_BYTE *)(v10 + 2960) = 2;
  *(_BYTE *)(v10 + 3350) = 2;
  *(_BYTE *)(v10 + 3104) = 0;
  *(_BYTE *)(v10 + 3494) = 0;
  *(_BYTE *)(v10 + 3098) = 0;
  *(_BYTE *)(v10 + 3488) = 0;
  *(_BYTE *)(v10 + 3100) = 0;
  *(_BYTE *)(v10 + 3490) = 0;
  if (v12)
  {
    *(_BYTE *)(v10 + 3099) = 0;
    *(_BYTE *)(v10 + 3489) = 0;
  }
  *(_WORD *)(v10 + 3109) = 0;
  *(_WORD *)(v10 + 3499) = 0;
  *(_BYTE *)(v10 + 2962) = 4;
  *(_BYTE *)(v10 + 3352) = 4;
  *(_BYTE *)(v10 + 3092) = 4;
  *(_BYTE *)(v10 + 3482) = 4;
  *(_BYTE *)(v10 + 3115) = 2;
  *(_BYTE *)(v10 + 3505) = 2;
  *(_BYTE *)(v10 + 2875) = 0;
  *(_BYTE *)(v10 + 3265) = 0;
  *v6 = 0;
  *(_WORD *)(v10 + 731) = 1028;
  *(_WORD *)(v8 + 160) = 514;
  *(_WORD *)(v7 + 160) = 514;
  *(_WORD *)(v10 + 1901) = 514;
  *(_WORD *)(v9 + 146) = 514;
  *(_BYTE *)(v8 + 155) = 2;
  *(_BYTE *)(v8 + 154) = 2;
  *(_WORD *)(v7 + 154) = 514;
  *(_WORD *)(v10 + 1895) = 1028;
  *(_WORD *)(v10 + 1498) = 1028;
  *(_BYTE *)(v10 + 1500) = 4;
  *(_BYTE *)(v9 + 97) = 4;
  *(_BYTE *)(v9 + 487) = 4;
  *(_BYTE *)(v8 + 105) = 4;
  v6[141] = 4;
  *(_BYTE *)(v7 + 105) = 4;
  v5[107] = 4;
  *(_BYTE *)(v10 + 3055) = 4;
  *(_BYTE *)(v10 + 3445) = 4;
  *(_BYTE *)(v10 + 715) = 4;
  *(_BYTE *)(v10 + 1105) = 4;
  *(_BYTE *)(v10 + 1495) = 4;
  *(_BYTE *)(v10 + 1885) = 4;
  v6[180] = 4;
  *(_BYTE *)(v8 + 144) = 4;
  *(_BYTE *)(v7 + 144) = 4;
  v5[146] = 4;
  *(_BYTE *)(v10 + 3053) = 2;
  *(_BYTE *)(v9 + 134) = 2;
  v6[178] = 2;
  v5[144] = 2;
  *(_BYTE *)(v8 + 142) = 2;
  *(_BYTE *)(v10 + 3443) = 2;
  *(_WORD *)(v10 + 1102) = 514;
  *(_WORD *)(v10 + 1492) = 514;
  *(_BYTE *)(v10 + 1882) = 4;
  *(_BYTE *)(v10 + 707) = 2;
  *(_BYTE *)(v10 + 1097) = 2;
  *(_BYTE *)(v10 + 1487) = 2;
  *(_BYTE *)(v10 + 1877) = 4;
  *(_WORD *)(v10 + 711) = 514;
  *(_BYTE *)(v10 + 1101) = 2;
  *(_BYTE *)(v10 + 1491) = 2;
  *(_BYTE *)(v10 + 706) = 2;
  *(_BYTE *)(v10 + 1096) = 2;
  *(_BYTE *)(v10 + 1486) = 2;
  *(_BYTE *)(v10 + 708) = 2;
  *(_BYTE *)(v10 + 1106) = 2;
  *(_BYTE *)(v10 + 3056) = 2;
  *(_BYTE *)(v9 + 137) = 2;
  *(_BYTE *)(v10 + 1496) = 2;
  *(_BYTE *)(v10 + 3446) = 2;
  v6[181] = 2;
  v5[147] = 2;
  *(_BYTE *)(v8 + 145) = 2;
  *(_BYTE *)(v10 + 1886) = 4;
  *(_BYTE *)(v10 + 1751) = 4;
  v13 = *(_QWORD *)(v4 + 44);
  v14 = *(unsigned __int8 *)(v13 + 357);
  if (*(_BYTE *)(v13 + 357))
    v15 = 4;
  else
    v15 = 2;
  *(_BYTE *)(v10 + 1463) = v15;
  *(_BYTE *)(v10 + 1462) = v15;
  *(_BYTE *)(v10 + 1371) = 2;
  *(_BYTE *)(v10 + 1091) = 2;
  *(_BYTE *)(v10 + 1481) = 2;
  *(_BYTE *)(v10 + 1871) = 2;
  *(_BYTE *)(v10 + 1092) = 1;
  *(_BYTE *)(v10 + 1872) = 2;
  *(_BYTE *)(v9 + 483) = 4;
  *(_BYTE *)(v10 + 1844) = 4;
  *(_BYTE *)(v9 + 95) = 4;
  v6[139] = 4;
  v5[105] = 4;
  *(_BYTE *)(v8 + 103) = 4;
  *(_BYTE *)(v10 + 3097) = 0;
  *(_BYTE *)(v10 + 3487) = 0;
  *(_BYTE *)(v10 + 3087) = 4;
  *(_BYTE *)(v10 + 3477) = 4;
  *(_BYTE *)(v10 + 3094) = 0;
  *(_BYTE *)(v10 + 3484) = 0;
  *(_BYTE *)(v10 + 3096) = 4;
  *(_BYTE *)(v10 + 3486) = 4;
  *(_BYTE *)(v10 + 3093) = 4;
  *(_BYTE *)(v10 + 3483) = 4;
  *(_BYTE *)(v10 + 2) = 2;
  *(_BYTE *)(v10 + 783) = 1;
  *(_BYTE *)(v10 + 1173) = 0;
  *(_BYTE *)(v10 + 1563) = 0;
  *(_BYTE *)(v10 + 3123) = 0;
  *(_BYTE *)(v10 + 3513) = 0;
  *(_BYTE *)(v10 + 1953) = 4;
  *(_BYTE *)(v10 + 1) = 2;
  *(_BYTE *)v10 = 2;
  *(_BYTE *)(v10 + 1316) = 4;
  *(_BYTE *)(v10 + 1706) = 4;
  *(_BYTE *)v8 = 4;
  *(_BYTE *)(v8 + 780) = 4;
  *(_BYTE *)v7 = 4;
  *(_BYTE *)(v7 + 780) = 4;
  v6[36] = 4;
  v6[816] = 4;
  v5[2] = 4;
  v5[782] = 4;
  *(_BYTE *)(v10 + 1740) = 4;
  v6[35] = 4;
  *(_BYTE *)(v8 + 779) = 4;
  v6[815] = 4;
  v5[1] = 4;
  v5[781] = 4;
  *(_BYTE *)(v7 + 779) = 4;
  *(_BYTE *)(v10 + 179) = 4;
  *(_BYTE *)(v10 + 959) = 4;
  v6[34] = 4;
  *(_BYTE *)(v8 + 778) = 4;
  v6[814] = 4;
  *v5 = 4;
  v5[780] = 4;
  *(_BYTE *)(v7 + 778) = 4;
  *(_BYTE *)(v10 + 3006) = 0;
  *(_BYTE *)(v10 + 3396) = 0;
  if (!*(_BYTE *)(v13 + 327))
  {
    *(_BYTE *)(v10 + 3099) = 4;
    *(_BYTE *)(v10 + 3489) = 4;
  }
  v5[100] = 0;
  v5[880] = 4;
  *(_WORD *)v9 = 514;
  *(_WORD *)(v9 + 390) = 514;
  *(_WORD *)(v8 + 8) = 514;
  *(_WORD *)(v7 + 8) = 514;
  if (v14)
    *(_WORD *)(v10 + 1749) = 1028;
  *(_BYTE *)(v10 + 1762) = 2;
  *(_BYTE *)(v10 + 1372) = 2;
  *(_BYTE *)(v10 + 982) = 2;
  *(_BYTE *)(v9 + 2) = 2;
  *(_BYTE *)(v9 + 392) = 2;
  *(_BYTE *)(v8 + 10) = 2;
  *(_BYTE *)(v7 + 10) = 2;
  *(_BYTE *)(v10 + 1480) = 0;
  *(_BYTE *)(v9 + 121) = 2;
  *(_BYTE *)(v9 + 511) = 2;
  *(_BYTE *)(v8 + 129) = 2;
  *(_BYTE *)(v7 + 129) = 2;
  *(_WORD *)(v9 + 119) = 514;
  *(_WORD *)(v9 + 509) = 514;
  *(_WORD *)(v8 + 127) = 514;
  *(_WORD *)(v7 + 127) = 514;
  if (v14)
    *(_BYTE *)(v10 + 1868) = 4;
  *(_BYTE *)(v9 + 137) = 2;
  *(_BYTE *)(v9 + 527) = 2;
  *(_BYTE *)(v8 + 145) = 2;
  *(_BYTE *)(v7 + 145) = 2;
  *(_BYTE *)(v9 + 148) = 2;
  *(_BYTE *)(v9 + 538) = 2;
  *(_BYTE *)(v8 + 156) = 2;
  *(_BYTE *)(v7 + 156) = 2;
  *(_BYTE *)(v10 + 337) = 4;
  *(_BYTE *)(v10 + 727) = 4;
  *(_BYTE *)(v10 + 1117) = 4;
  *(_BYTE *)(v10 + 1507) = 4;
  *(_BYTE *)(v10 + 1897) = 4;
  *(_DWORD *)(v9 + 142) = 33686018;
  *(_DWORD *)(a1 + 14980) = 33686018;
  *(_DWORD *)(v8 + 150) = 33686018;
  *(_DWORD *)(v7 + 150) = 33686018;
  *(_WORD *)(v10 + 1864) = 1028;
  *(_BYTE *)(v10 + 1866) = 4;
  *(_WORD *)(v10 + 1072) = 514;
  v16 = *(_BYTE **)(v4 + 44);
  if (v16[357])
    *(_BYTE *)(v10 + 1891) = 4;
  v17 = 0;
  v18 = 0;
  *(_BYTE *)(v10 + 1356) = 4;
  *(_BYTE *)(v9 + 115) = 4;
  *(_BYTE *)(v9 + 505) = 4;
  *(_BYTE *)(v8 + 123) = 4;
  *(_WORD *)(v9 + 116) = 1028;
  *(_WORD *)(v9 + 506) = 1028;
  *(_BYTE *)(v10 + 1892) = 2;
  *(_BYTE *)(v10 + 1883) = 2;
  *(_BYTE *)(v7 + 123) = 2;
  *(_WORD *)(v8 + 124) = 1028;
  *(_WORD *)(v7 + 124) = 514;
  v5[169] = 2;
  v6[200] = 2;
  v35 = 24396;
  do
  {
    v19 = 0;
    v20 = v17;
    v21 = *((unsigned __int8 *)&v35 + v18);
    do
      *(_BYTE *)(a1 + 390 * v21 + dword_1C66088E4[v19++] + 3862) = 2;
    while (v19 != 32);
    v17 = 1;
    v18 = 1;
  }
  while ((v20 & 1) == 0);
  *(_BYTE *)(v10 + 27) = 0;
  v22 = 177;
  v23 = 74032;
  do
  {
    *(_WORD *)(a1 + v23) = *(_WORD *)(a1 + v23) & 0xF | 0x2220;
    v23 += 360;
    --v22;
  }
  while (v22);
  *(_WORD *)(a1 + 77270) &= 0xFF0Fu;
  *(_WORD *)(a1 + 107834) &= 0xFF0Fu;
  *(_WORD *)(a1 + 108550) &= 0xFF0Fu;
  v24 = 170;
  v25 = 137934;
  *(_QWORD *)&v26 = 0x202020202020202;
  *((_QWORD *)&v26 + 1) = 0x202020202020202;
  do
  {
    v27 = (_OWORD *)(a1 + v25);
    *(_OWORD *)((char *)v27 + 154) = v26;
    v27[8] = v26;
    v27[9] = v26;
    v27[6] = v26;
    v27[7] = v26;
    v27[4] = v26;
    v27[5] = v26;
    v27[2] = v26;
    v27[3] = v26;
    v25 += 179;
    *v27 = v26;
    v27[1] = v26;
    --v24;
  }
  while (v24);
  v28 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 176))(v16);
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v28);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  *(_BYTE *)(a1 + 173982) |= 7u;
  v29 = *(_BYTE *)(a1 + 173993);
  v30 = *(_BYTE *)(a1 + 174011);
  v31 = *(_BYTE *)(a1 + 174012);
  *(_BYTE *)(a1 + 174013) |= 3u;
  *(_BYTE *)(a1 + 174012) = v31 | 0xFB;
  *(_BYTE *)(a1 + 174011) = v30 | 0xFC;
  *(_BYTE *)(a1 + 174006) |= 0x60u;
  *(_BYTE *)(a1 + 173977) |= 8u;
  v32 = *(_BYTE *)(a1 + 173987);
  v33 = *(_BYTE *)(a1 + 173980);
  *(_BYTE *)(a1 + 173981) |= 1u;
  *(_BYTE *)(a1 + 173980) = v33 | 0xC0;
  *(_BYTE *)(a1 + 174004) |= 4u;
  *(_BYTE *)(a1 + 173976) |= 0x80u;
  *(_BYTE *)(a1 + 173992) |= 0x20u;
  *(_BYTE *)(a1 + 173987) = v32 | 0xD;
  *(_BYTE *)(a1 + 174005) |= 0xC0u;
  *(_BYTE *)(a1 + 173993) = v29 | 0x9C;
  *(int8x8_t *)(a1 + 173996) = vorr_s8(*(int8x8_t *)(a1 + 173996), (int8x8_t)0x81C1931E03800BB8);
  *(_BYTE *)(a1 + 173975) |= 0x10u;
  return a1;
}

_QWORD *sub_1C48ED834(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t **v32;
  __int128 *v33;
  _QWORD *v34;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  int v41;
  char v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[10];

  v45[8] = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v42 = a5;
  v10 = a2;
  v11 = *(unsigned __int8 **)(a1 + 64);
  v40 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v40, v11, 2);
  v41 = *(_DWORD *)(a1 + 60);
  v43 = v45;
  v44 = 0x400000000;
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * v10);
  v39 = sub_1C47F37A0(&v38);
  if (a4)
  {
    v12 = 0;
    do
    {
      v13 = (llvm *)v39;
      v14 = sub_1C6366AB4(a3, v12, (const llvm::APInt *)&v40, (llvm *)5, 0, 0, 0);
      v17 = *(_QWORD *)(a3 + 832);
      if (v17)
        LOWORD(v17) = *(_WORD *)(v17 + 8);
      v18 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v40, v13, 0, a1, a2, v16, (uint64_t)v14, v15, v17);
      v20 = v19;
      v22 = sub_1C47A8C74(&v39);
      if ((_DWORD)v21 == 1)
      v24 = sub_1C47A8C74((unsigned __int8 *)&v42);
      if ((_DWORD)v23 == 1)
      if (v22 > v24)
      {
        if ((v39 - 75) >= 0x2Du
          && (v39 - 8) >= 7u
          && (v39 + 104) >= 0x13u)
        {
          v27 = 201;
        }
        else
        {
          v27 = 236;
        }
        v28 = *(_QWORD *)(a3 + 832);
        if (v28)
          v29 = *(_WORD *)(v28 + 8);
        else
          v29 = 0;
        v18 = sub_1C5D52060(a3, v27, (const llvm::APInt *)&v40, (llvm *)v42, 0, (uint64_t)v18, v20, v29);
        v20 = v20 & 0xFFFFFFFF00000000 | v30;
      }
      v31 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 16);
        v31 = v44;
      }
      v32 = (uint64_t **)((char *)v43 + 16 * v31);
      *v32 = v18;
      v32[1] = (uint64_t *)v20;
      LODWORD(v44) = v44 + 1;
      ++v12;
    }
    while (a4 != v12);
    v9 = v42;
  }
  v33 = (__int128 *)v43;
  v36 = v40;
  if (v40)
    llvm::MetadataTracking::track((uint64_t)&v36, v40, 2);
  v37 = v41;
  v34 = sub_1C498FC38(v33, a4, v9, a3, (const llvm::APInt *)&v36);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v43 != v45)
    free(v43);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  return v34;
}

_QWORD *sub_1C48EDB10(uint64_t a1, uint64_t a2, char a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  _BOOL4 v19;
  _QWORD *v20;
  __int128 *v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  __int128 *v27;
  __int128 *v28;
  _QWORD *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  __int128 *v39;
  _QWORD *v40;
  int v41;
  unsigned __int8 *v42;
  __int128 *v43;
  int v44;
  __int128 *v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  unsigned int v52;
  int v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  __int128 *v57;
  __int128 *v58;
  _QWORD *v59;
  int v60;
  unsigned __int8 *v61;
  __int128 *v62;
  __int128 *v63;
  _QWORD *v64;
  int v65;
  unsigned __int8 *v66;
  __int128 *v67;
  int v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  _QWORD *v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  unsigned int v76;

  if (!a5)
    return 0;
  v19 = 1;
  if (a8 != 3 && a10)
    v19 = *(_BYTE *)(a12 + 325) != 0;
  if (a4 < 2)
    return 0;
  v22 = (__int128 *)a11;
  if ((a4 & 0xFFFFFFFB) == 3)
  {
    if ((a3 & 1) == 0)
    {
      v20 = 0;
      goto LABEL_11;
    }
    if ((a5 - 4) < 0xFFFFFFFE || !a7)
    {
      v73 = a5 - 4;
      v76 = 2;
      if (*(_BYTE *)(a12 + 327))
        v53 = 8261;
      else
        v53 = 8260;
      v54 = *(unsigned __int8 **)a2;
      v74 = v54;
      if (v54)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v54, 2);
        v22 = (__int128 *)a11;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v20 = sub_1C61427EC(a1, v53, (uint64_t)&v74, 1u, &v76, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = (__int128 *)a11;
      *(_QWORD *)a11 = v20;
      *(_DWORD *)(a11 + 8) = 0;
      if (v73 < 0xFFFFFFFE)
      {
LABEL_11:
        if ((a3 & 4) != 0)
        {
          if (!a8)
          {
            if (a6)
            {
              v76 = 2;
              if (*(_BYTE *)(a12 + 327))
              {
                v23 = 8263;
              }
              else if (*(_BYTE *)(a12 + 325))
              {
                v23 = 8264;
              }
              else
              {
                v23 = 8262;
              }
              v56 = *(unsigned __int8 **)a2;
              v74 = v56;
              if (v56)
              {
                v57 = v22;
                llvm::MetadataTracking::track((uint64_t)&v74, v56, 2);
                v22 = v57;
              }
              v75 = *(_DWORD *)(a2 + 8);
              v58 = v22;
              v59 = sub_1C61427EC(a1, v23, (uint64_t)&v74, 1u, &v76, v22);
              if (v74)
                llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
              v22 = v58;
              *(_QWORD *)v58 = v59;
              *((_DWORD *)v58 + 2) = 0;
            }
            if (*(_BYTE *)(a12 + 327))
              v60 = 2427;
            else
              v60 = 2426;
            v61 = *(unsigned __int8 **)a2;
            v74 = v61;
            if (v61)
            {
              v62 = v22;
              llvm::MetadataTracking::track((uint64_t)&v74, v61, 2);
              v22 = v62;
            }
            v75 = *(_DWORD *)(a2 + 8);
            v63 = v22;
            v64 = sub_1C613D934(a1, v60, (uint64_t)&v74, 1u, v22);
            if (v74)
              llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
            v22 = v63;
            *(_QWORD *)v63 = v64;
            *((_DWORD *)v63 + 2) = 0;
          }
          v76 = 2;
          if (*(_BYTE *)(a12 + 327))
          {
            v65 = 8263;
          }
          else if (*(_BYTE *)(a12 + 325))
          {
            v65 = 8264;
          }
          else
          {
            v65 = 8262;
          }
          v66 = *(unsigned __int8 **)a2;
          v74 = v66;
          if (v66)
          {
            v67 = v22;
            llvm::MetadataTracking::track((uint64_t)&v74, v66, 2);
            v22 = v67;
          }
          v75 = *(_DWORD *)(a2 + 8);
          v50 = v22;
          v20 = sub_1C61427EC(a1, v65, (uint64_t)&v74, 2u, &v76, v22);
          if (v74)
            llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
          *(_QWORD *)v50 = v20;
          *((_DWORD *)v50 + 2) = 0;
          if (v19)
          {
            v51 = v50;
            v52 = 2;
            goto LABEL_120;
          }
        }
        return v20;
      }
      if (a4 == 7)
        v55 = 501;
      else
        v55 = 505;
      if (*(_BYTE *)(a12 + 327))
        v70 = v55 + 1;
      else
        v70 = v55;
      v71 = *(unsigned __int8 **)a2;
      v74 = v71;
      if (v71)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v71, 2);
        v22 = (__int128 *)a11;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v72 = sub_1C613D934(a1, v70, (uint64_t)&v74, 1u, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = (__int128 *)a11;
      *(_QWORD *)a11 = v72;
      *(_DWORD *)(a11 + 8) = 0;
    }
    v76 = 2;
    if (*(_BYTE *)(a12 + 327))
      v31 = 8261;
    else
      v31 = 8260;
    v32 = *(unsigned __int8 **)a2;
    v74 = v32;
    if (v32)
    {
      v33 = v22;
      llvm::MetadataTracking::track((uint64_t)&v74, v32, 2);
      v22 = v33;
    }
    v75 = *(_DWORD *)(a2 + 8);
    v34 = v22;
    v20 = sub_1C61427EC(a1, v31, (uint64_t)&v74, 2u, &v76, v22);
    if (v74)
      llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
    v22 = v34;
    *(_QWORD *)v34 = v20;
    *((_DWORD *)v34 + 2) = 0;
    if (a5 == 3)
    {
      v76 = 2;
      if (*(_BYTE *)(a12 + 327))
        v35 = 8261;
      else
        v35 = 8260;
      v36 = *(unsigned __int8 **)a2;
      v74 = v36;
      if (v36)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v36, 2);
        v22 = v34;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v20 = sub_1C61427EC(a1, v35, (uint64_t)&v74, 3u, &v76, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = v34;
      *(_QWORD *)v34 = v20;
      *((_DWORD *)v34 + 2) = 0;
    }
    goto LABEL_11;
  }
  v20 = 0;
  v24 = a5 - 4;
  if ((a3 & 1) != 0 && v24 >= 0xFFFFFFFE)
  {
    if (!a7)
    {
      if (*(_BYTE *)(a12 + 327))
        v37 = 510;
      else
        v37 = 509;
      v38 = *(unsigned __int8 **)a2;
      v74 = v38;
      if (v38)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v38, 2);
        v22 = (__int128 *)a11;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v39 = v22;
      v40 = sub_1C613D934(a1, v37, (uint64_t)&v74, 1u, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = v39;
      *(_QWORD *)v39 = v40;
      *((_DWORD *)v39 + 2) = 0;
    }
    v76 = 1;
    if (*(_BYTE *)(a12 + 327))
      v41 = 8261;
    else
      v41 = 8260;
    v42 = *(unsigned __int8 **)a2;
    v74 = v42;
    if (v42)
    {
      v43 = v22;
      llvm::MetadataTracking::track((uint64_t)&v74, v42, 2);
      v22 = v43;
    }
    v75 = *(_DWORD *)(a2 + 8);
    v44 = v41;
    v45 = v22;
    v20 = sub_1C61427EC(a1, v44, (uint64_t)&v74, 2u, &v76, v22);
    if (v74)
      llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
    v22 = v45;
    *(_QWORD *)v45 = v20;
    *((_DWORD *)v45 + 2) = 0;
    if (a5 == 3)
    {
      v76 = 1;
      if (*(_BYTE *)(a12 + 327))
        v46 = 8261;
      else
        v46 = 8260;
      v47 = *(unsigned __int8 **)a2;
      v74 = v47;
      if (v47)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v47, 2);
        v22 = v45;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v20 = sub_1C61427EC(a1, v46, (uint64_t)&v74, 3u, &v76, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = v45;
      *(_QWORD *)v45 = v20;
      *((_DWORD *)v45 + 2) = 0;
    }
  }
  if ((a3 & 4) != 0)
  {
    if (v24 >= 0xFFFFFFFE && !a8)
    {
      if (*(_BYTE *)(a12 + 327))
        v25 = 2429;
      else
        v25 = 2428;
      v26 = *(unsigned __int8 **)a2;
      v74 = v26;
      if (v26)
      {
        v27 = v22;
        llvm::MetadataTracking::track((uint64_t)&v74, v26, 2);
        v22 = v27;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v28 = v22;
      v29 = sub_1C613D934(a1, v25, (uint64_t)&v74, 1u, v22);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      v22 = v28;
      *(_QWORD *)v28 = v29;
      *((_DWORD *)v28 + 2) = 0;
    }
    v76 = 1;
    if (*(_BYTE *)(a12 + 327))
    {
      v30 = 8263;
    }
    else if (*(_BYTE *)(a12 + 325))
    {
      v30 = 8264;
    }
    else
    {
      v30 = 8262;
    }
    v48 = *(unsigned __int8 **)a2;
    v74 = v48;
    if (v48)
    {
      v49 = v22;
      llvm::MetadataTracking::track((uint64_t)&v74, v48, 2);
      v22 = v49;
    }
    v75 = *(_DWORD *)(a2 + 8);
    v50 = v22;
    v20 = sub_1C61427EC(a1, v30, (uint64_t)&v74, 2u, &v76, v22);
    if (v74)
      llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
    *(_QWORD *)v50 = v20;
    *((_DWORD *)v50 + 2) = 0;
    if (v19)
    {
      v51 = v50;
      v52 = 1;
LABEL_120:
      v76 = v52;
      if (*(_BYTE *)(a12 + 327))
      {
        v68 = 8263;
      }
      else if (*(_BYTE *)(a12 + 325))
      {
        v68 = 8264;
      }
      else
      {
        v68 = 8262;
      }
      v69 = *(unsigned __int8 **)a2;
      v74 = v69;
      if (v69)
      {
        llvm::MetadataTracking::track((uint64_t)&v74, v69, 2);
        v51 = v50;
      }
      v75 = *(_DWORD *)(a2 + 8);
      v20 = sub_1C61427EC(a1, v68, (uint64_t)&v74, 3u, &v76, v51);
      if (v74)
        llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
      *(_QWORD *)v50 = v20;
      *((_DWORD *)v50 + 2) = 0;
    }
  }
  return v20;
}

uint64_t sub_1C48EE2C8(uint64_t a1, llvm *a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, char a10, int a11, unsigned __int16 a12, int a13, char a14, unsigned __int8 a15, char a16, int a17)
{
  uint64_t v18;
  uint64_t v19;
  int v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  llvm *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm *v54;
  uint64_t v55;
  uint64_t v56;
  const llvm::APInt *v57;
  __int16 v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  uint64_t *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t *v95;
  unsigned int v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t v106;
  const llvm::APInt *v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  int v126;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  int v151;
  unsigned __int8 *v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  int v156;

  v18 = a7;
  v19 = a5;
  v22 = a15;
  if (a14)
  {
    v23 = *(_QWORD *)(a5 + 48);
    if (!v23)
      return 0;
    v24 = 1;
    do
    {
      if (*(_DWORD *)(v23 + 8) == a6)
      {
        if (!v24)
          return 0;
        --v24;
      }
      v23 = *(_QWORD *)(v23 + 32);
    }
    while (v23);
    if (v24)
      return 0;
    if (*(_WORD *)(a5 + 24) == 222)
    {
      v25 = *(_DWORD **)(a5 + 32);
      v19 = *(_QWORD *)v25;
      v26 = *(_QWORD *)(*(_QWORD *)v25 + 48);
      if (!v26)
        return 0;
      v22 = a15 ^ 1;
      a6 = v25[2];
      v27 = 1;
      do
      {
        if (*(_DWORD *)(v26 + 8) == a6)
        {
          if (!v27)
            return 0;
          --v27;
        }
        v26 = *(_QWORD *)(v26 + 32);
      }
      while (v26);
      if (v27)
        return 0;
    }
  }
  else if (*(_WORD *)(a5 + 24) == 222)
  {
    v28 = *(_QWORD *)(a5 + 32);
    v19 = *(_QWORD *)v28;
    a6 = *(_DWORD *)(v28 + 8);
    v22 = a15 ^ 1;
  }
  if ((a10 & 1) != 0 || (a12 & 0x7C0) == 0x7C0)
  {
    while (1)
    {
      v36 = *(unsigned __int16 *)(v19 + 24);
      if (v36 != 215 && v36 != 212)
        break;
      v33 = *(_QWORD *)(v19 + 32);
      v19 = *(_QWORD *)v33;
      a6 = *(_DWORD *)(v33 + 8);
      if (a14)
      {
        v34 = *(_QWORD *)(v19 + 48);
        if (!v34)
          return 0;
        v35 = 1;
        do
        {
          if (*(_DWORD *)(v34 + 8) == a6)
          {
            if (!v35)
              return 0;
            --v35;
          }
          v34 = *(_QWORD *)(v34 + 32);
        }
        while (v34);
        if (v35)
          return 0;
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v19 + 40) + 16 * a6) != 10
    && *(_BYTE *)(*(_QWORD *)(a7 + 40) + 16 * a8) != 10)
  {
    v31 = a2;
    v29 = a3;
    v30 = a2;
LABEL_38:
    if ((_BYTE)a2)
      v37 = 1;
    else
      v37 = v29 == a3;
    v38 = !v37;
    v32 = 1;
    if (!v38)
      goto LABEL_46;
    goto LABEL_45;
  }
  v29 = 0;
  v30 = 10;
  v31 = (llvm *)((unint64_t)a2 & 0xFFFFFFFFFFFFFF00 | 0xA);
  if (a2 == 10)
    goto LABEL_38;
  v32 = 0;
LABEL_45:
  if (!a14)
    return 0;
LABEL_46:
  v39 = *(unsigned __int16 *)(v19 + 24);
  v144 = v29;
  if (v39 == a17)
  {
    v137 = v32;
    v147 = v30;
    v140 = (uint64_t **)a1;
    if (sub_1C48EEB28(v19))
    {
      v41 = *(_QWORD *)(v19 + 48);
      v42 = a9;
      if (v41)
      {
        v43 = 2;
        v44 = *(_QWORD *)(v19 + 48);
        do
        {
          if (!*(_DWORD *)(v44 + 8))
          {
            if (!v43)
              goto LABEL_56;
            --v43;
          }
          v44 = *(_QWORD *)(v44 + 32);
        }
        while (v44);
        if (!v43)
        {
          do
          {
            sub_1C5C5B004(*a9, *(_QWORD *)(v41 + 16));
            v41 = *(_QWORD *)(v41 + 32);
          }
          while (v41);
        }
      }
LABEL_56:
      v45 = *(_QWORD *)(v19 + 32);
      v46 = *(uint64_t **)v45;
      v47 = *(_DWORD *)(v45 + 8);
      v48 = *(_QWORD *)(v45 + 40);
      v49 = *(unsigned int *)(v45 + 48);
      goto LABEL_57;
    }
    return 0;
  }
  if (v39 == 96)
  {
    if (*(unsigned __int16 *)(a7 + 24) == a17)
      return 0;
    v59 = *(uint64_t ***)(v19 + 32);
    if (*v59 != v59[5])
      return 0;
    if (*((_DWORD *)v59 + 2) != *((_DWORD *)v59 + 12))
      return 0;
    v133 = *v59;
    v137 = v32;
    v147 = v30;
    v140 = (uint64_t **)a1;
    if (!sub_1C48EEB28(v19))
      return 0;
    v60 = *(_QWORD *)(v19 + 48);
    v61 = v133;
    if (v60)
    {
      v62 = 2;
      v63 = *(_QWORD *)(v19 + 48);
      v64 = v144;
      do
      {
        if (!*(_DWORD *)(v63 + 8))
        {
          if (!v62)
            goto LABEL_75;
          --v62;
        }
        v63 = *(_QWORD *)(v63 + 32);
      }
      while (v63);
      if (v62)
        goto LABEL_75;
      do
      {
        sub_1C5C5B004(*a9, *(_QWORD *)(v60 + 16));
        v60 = *(_QWORD *)(v60 + 32);
      }
      while (v60);
      v59 = *(uint64_t ***)(v19 + 32);
      v61 = *v59;
    }
    v64 = v144;
LABEL_75:
    v47 = *((_DWORD *)v59 + 2);
    v42 = a9;
    v65 = v61;
    v66 = sub_1C5D404C4(a9[2], a4, (_BOOL8)v31, v64, 0, 2.0);
    v46 = v65;
    v48 = (uint64_t)v66;
    v49 = v67;
LABEL_57:
    v129 = v49;
    v50 = v47;
    v51 = v48;
    if (v22)
    {
      v52 = v42[2];
      v53 = v46[5] + 16 * v50;
      v54 = *(llvm **)v53;
      v55 = *(_QWORD *)(v53 + 8);
      v56 = *(_QWORD *)(v52 + 832);
      v57 = a4;
      if (v56)
        v58 = *(_WORD *)(v56 + 8);
      else
        v58 = 0;
      v46 = sub_1C5D52060(v52, 222, a4, v54, v55, (uint64_t)v46, v50, v58);
      v50 = v83;
      v82 = v144;
      v48 = v51;
    }
    else
    {
      v57 = a4;
      v82 = v144;
    }
    v84 = (unsigned __int8 *)(v46[5] + 16 * v50);
    if (v147 != *v84 || !v147 && v82 != *((_QWORD *)v84 + 1))
    {
      v85 = v42[2];
      v86 = *(_QWORD *)(v85 + 832);
      if (v86)
        v87 = *(_WORD *)(v86 + 8);
      else
        v87 = 0;
      v88 = sub_1C5D52060(v85, 215, v57, v31, v82, (uint64_t)v46, v50, v87);
      v82 = v144;
      v46 = v88;
      v50 = v89;
      v48 = v51;
    }
    v90 = v129;
    v91 = (unsigned __int8 *)(*(_QWORD *)(v48 + 40) + 16 * v129);
    v134 = v46;
    if (v147 != *v91 || !v147 && v82 != *((_QWORD *)v91 + 1))
    {
      v92 = v42[2];
      v93 = *(_QWORD *)(v92 + 832);
      if (v93)
        v94 = *(_WORD *)(v93 + 8);
      else
        v94 = 0;
      v95 = sub_1C5D52060(v92, 215, v57, v31, v82, v48, v129, v94);
      v82 = v144;
      v48 = (uint64_t)v95;
      v90 = v96;
      v46 = v134;
    }
    v97 = a8 & 0xFFFFFFFF00000000;
    v98 = (unsigned __int8 *)(*(_QWORD *)(v18 + 40) + 16 * a8);
    if (v147 == *v98 && (v147 || v82 == *((_QWORD *)v98 + 1)))
    {
      v106 = a8;
    }
    else
    {
      v130 = v50;
      v99 = v90;
      v100 = v42[2];
      v101 = *(_QWORD *)(v100 + 832);
      v102 = v48;
      if (v101)
        v103 = *(_WORD *)(v101 + 8);
      else
        v103 = 0;
      v104 = sub_1C5D52060(v100, 215, v57, v31, v82, v18, a8, v103);
      v82 = v144;
      v18 = (uint64_t)v104;
      v106 = v105;
      v48 = v102;
      v90 = v99;
      v50 = v130;
      v46 = v134;
      v97 = a8 & 0xFFFFFFFF00000000;
    }
    v107 = v57;
    v108 = v82;
    v109 = sub_1C5D58E08(v42[2], (const char *)0x8D, v107, v31, v82, (uint64_t)v46, v50, v40, v48, v90, v18, v106 | v97, (v106 | v97) >> 32, a12);
    *v140 = v109;
    *((_DWORD *)v140 + 2) = v110;
    if (!v137 || (v68 = 1, !v147) && v108 != a3)
    {
      v111 = a9[2];
      v112 = (unint64_t)v140[1];
      v113 = sub_1C6366AB4(v111, 0, a4, (llvm *)5, 0, 0, 0);
      v116 = *(_QWORD *)(v111 + 832);
      if (v116)
        LOWORD(v116) = *(_WORD *)(v116 + 8);
      *v140 = sub_1C5D56C70(v111, 212, a4, a2, a3, (uint64_t)v109, v112, v115, (uint64_t)v113, v114, v116);
      *((_DWORD *)v140 + 2) = v117;
      return 1;
    }
    return v68;
  }
  v68 = 0;
  if (v39 != 192 || !a16 || !a14)
    return v68;
  v69 = *(uint64_t **)(v19 + 32);
  v70 = *v69;
  v71 = v69[1];
  v72 = v69[5];
  v73 = v69[6];
  v74 = v69[10];
  v76 = v69[15];
  v75 = v69[16];
  v77 = *(_DWORD *)(v69[20] + 76);
  v78 = *(unsigned __int16 *)(v76 + 24);
  v79 = v78 == 36 || v78 == 12;
  if (v79
    && ((v80 = *(_QWORD *)(v76 + 80), *(_UNKNOWN **)(v80 + 32) == &unk_1C866F1C0)
      ? (v81 = *(_QWORD *)(v80 + 40))
      : (v81 = v80 + 24),
        (*(_BYTE *)(v81 + 28) & 7) == 3))
  {
    v131 = *(_DWORD *)(v69[20] + 76);
    v135 = v69[6];
    v138 = v69[5];
    v145 = v69[1];
    v148 = *v69;
    v118 = v69[11];
    v154 = 0;
    v155 = 0;
    v152 = *(unsigned __int8 **)a4;
    if (v152)
      llvm::MetadataTracking::track((uint64_t)&v152, v152, 2);
    v153 = *((_DWORD *)a4 + 2);
    *(_WORD *)((char *)&v128 + 1) = v22;
    LOBYTE(v128) = 1;
    v68 = sub_1C48EE2C8(&v154, a2, a3, &v152, v74, v118, v18, a8, a9, a10, a12, v128);
    if (v152)
      llvm::MetadataTracking::untrack((uint64_t)&v152, v152);
    if ((_DWORD)v68)
    {
      *(_QWORD *)a1 = sub_1C47DF81C((_QWORD *)a9[2], a4, v148, v145, v138, v135, v154, v155, v18, a8, SHIDWORD(a8), v131);
      *(_DWORD *)(a1 + 8) = v119;
    }
  }
  else
  {
    v120 = *(unsigned __int16 *)(v74 + 24);
    if (v120 != 36 && v120 != 12)
      return 0;
    v122 = *(_QWORD *)(v74 + 80);
    v123 = *(_UNKNOWN **)(v122 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v122 + 40) : v122 + 24;
    if ((*(_BYTE *)(v123 + 28) & 7) != 3)
      return 0;
    v132 = v77;
    v136 = v73;
    v139 = v72;
    v146 = v71;
    v149 = v70;
    v154 = 0;
    v155 = 0;
    v124 = *(unsigned __int8 **)a4;
    v150 = v124;
    if (v124)
    {
      v125 = v75;
      llvm::MetadataTracking::track((uint64_t)&v150, v124, 2);
      v75 = v125;
    }
    v151 = *((_DWORD *)a4 + 2);
    *(_WORD *)((char *)&v128 + 1) = v22;
    LOBYTE(v128) = 1;
    v68 = sub_1C48EE2C8(&v154, a2, a3, &v150, v76, v75, v18, a8, a9, a10, a12, v128);
    if (v150)
      llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
    if ((_DWORD)v68)
    {
      *(_QWORD *)a1 = sub_1C47DF81C((_QWORD *)a9[2], a4, v149, v146, v139, v136, v18, a8, v154, v155, v156, v132);
      *(_DWORD *)(a1 + 8) = v126;
    }
  }
  return v68;
}

uint64_t sub_1C48EEB28(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    while (1)
    {
      result = 0;
      v4 = *(_QWORD *)(v1 + 16);
      v5 = *(unsigned __int16 *)(v4 + 24);
      if (v5 > 0xBF)
        break;
      if (v5 == 46)
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 32) + 80);
        v9 = (_QWORD *)(v8 + 24);
        if (*(_DWORD *)(v8 + 32) >= 0x41u)
          v9 = (_QWORD *)*v9;
        if (*v9 != 2131)
          return 0;
      }
      else
      {
        if (v5 != 96)
          return result;
        v7 = *(_QWORD *)(v4 + 32);
        if (*(_QWORD *)v7 == *(_QWORD *)(v7 + 40) && *(_DWORD *)(v7 + 8) == *(_DWORD *)(v7 + 48))
          return 0;
      }
LABEL_10:
      v1 = *(_QWORD *)(v1 + 32);
      if (!v1)
        return 1;
    }
    if (v5 - 192 > 0x1F)
      goto LABEL_6;
    if (((1 << (v5 + 64)) & 0xC0900000) != 0)
    {
LABEL_9:
      if ((sub_1C48EEB28(*(_QWORD *)(v1 + 16)) & 1) == 0)
        return 0;
      goto LABEL_10;
    }
    if (v5 != 192)
    {
LABEL_6:
      if (v5 != 428)
        return result;
    }
    v6 = *(_QWORD **)(v4 + 32);
    if (*v6 == a1 || v6[5] == a1)
      return 0;
    goto LABEL_9;
  }
  return 1;
}

BOOL sub_1C48EEC38(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;

  v6 = *(unsigned __int16 *)(a1 + 24);
  if ((v6 - 11) >= 0x1A || ((0x3000003u >> (v6 - 11)) & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (!v7)
      return 0;
    v8 = 1;
    v9 = *(_QWORD *)(a1 + 48);
    do
    {
      if (*(_DWORD *)(v9 + 8) == a2)
      {
        if (!v8)
          goto LABEL_10;
        --v8;
      }
      v9 = *(_QWORD *)(v9 + 32);
    }
    while (v9);
    if (!v8)
      goto LABEL_18;
LABEL_10:
    if (!a4)
      return 0;
    v10 = 2;
    do
    {
      if (!*(_DWORD *)(v7 + 8))
      {
        if (!v10)
          return 0;
        --v10;
      }
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
    if (v10)
      return 0;
LABEL_18:
    if (v6 == 395)
      v12 = a3;
    else
      v12 = 0;
    result = 1;
    if ((v12 & 1) != 0 || (v6 - 401) < 4)
      return result;
    if ((sub_1C61415C4(v6) & 1) != 0)
      return 1;
    if (v6 > 211)
    {
      if (v6 != 212)
        return v6 == 215 && (a3 & 1) != 0;
      if ((a3 & 1) != 0)
        return 1;
      v19 = *(uint64_t **)(a1 + 32);
      v14 = *v19;
      v15 = v19[1];
      v16 = 0;
    }
    else
    {
      if (v6 == 46)
      {
        v17 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
        v18 = (_QWORD *)(v17 + 24);
        if (*(_DWORD *)(v17 + 32) >= 0x41u)
          v18 = (_QWORD *)*v18;
        return *v18 == 2131;
      }
      if (v6 != 192)
        return 0;
      v13 = *(_QWORD **)(a1 + 32);
      if (!sub_1C48EEC38(v13[10], v13[11], a3, 0))
        return 0;
      v14 = v13[15];
      v15 = v13[16];
      v16 = a3;
    }
    if ((sub_1C48EEC38(v14, v15, v16, 0) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t sub_1C48EEDAC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, unsigned int a11, uint64_t *a12, char a13)
{
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  llvm *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::APInt *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  llvm::APInt *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  _BOOL4 v66;
  uint64_t v68;
  uint64_t **v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t **v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  int v94;
  int v95;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  const char *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v141;
  unsigned int v142;
  unsigned int v143;
  __int16 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  _QWORD *v153;
  uint64_t v154;
  llvm *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  __int16 v164;
  int v165;
  uint64_t *v166;
  _QWORD *v167;
  const char *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int16 v181;
  int v182;
  uint64_t *v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  const char *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  __int16 v201;
  uint64_t *v202;
  int v203;
  uint64_t v204;
  int v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  int v220;
  uint64_t *v221;
  int v222;
  uint64_t **v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  int v227;
  int v228;
  _QWORD *v229;
  const char *v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  llvm *v241;
  uint64_t v242;
  int v243;
  uint64_t v245;
  int v246;
  llvm *v247;
  uint64_t v248;
  char v251;
  unsigned __int8 *v252;
  int v253;
  char v254[8];
  uint64_t v255;
  uint64_t *v256;
  int v257;
  char v258;
  char v259;
  uint64_t v260;
  uint64_t *v261;
  int v262;
  char v263;
  uint64_t v264;

  v18 = (uint64_t *)a9;
  v264 = *MEMORY[0x1E0C80C00];
  v19 = *(unsigned __int8 **)(a2 + 64);
  v252 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v252, v19, 2);
  v253 = *(_DWORD *)(a2 + 60);
  v20 = *(_QWORD *)(a7 + 40) + 16 * a8;
  v22 = *(llvm **)v20;
  v21 = *(_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)v20;
  if (v23 != 4 || *(_BYTE *)(*(_QWORD *)(a3 + 40) + 16 * a4) != 5)
    goto LABEL_41;
  v24 = *(unsigned __int16 *)(a5 + 24);
  if (v24 == 35 || v24 == 11)
    v25 = a5;
  else
    v25 = 0;
  v26 = *(unsigned __int16 *)(a7 + 24);
  if (v26 == 35 || v26 == 11)
    v27 = a7;
  else
    v27 = 0;
  v28 = *(unsigned __int16 *)(a9 + 24);
  if (v28 == 35 || v28 == 11)
    v30 = a9;
  else
    v30 = 0;
  if (v26 == 201)
  {
    v31 = *(_QWORD *)(a7 + 32);
    if (*(_QWORD *)v31 == a3 && *(_DWORD *)(v31 + 8) == a4)
      goto LABEL_38;
    if (*(_QWORD *)v31 == a5 && *(_DWORD *)(v31 + 8) == a6)
      goto LABEL_38;
  }
  if (!v27 || !v25)
    goto LABEL_41;
  v32 = *(_QWORD *)(v27 + 80);
  v33 = (llvm::APInt *)(v32 + 24);
  v34 = *(_DWORD *)(v32 + 32);
  v35 = (uint64_t *)(v32 + 24);
  if (v34 >= 0x41)
    v35 = *(uint64_t **)v33;
  v36 = *v35;
  v37 = *(_QWORD *)(v25 + 80);
  v38 = (_QWORD *)(v37 + 24);
  if (*(_DWORD *)(v37 + 32) >= 0x41u)
    v38 = (_QWORD *)*v38;
  if (v36 != *v38)
    goto LABEL_41;
  if (v34 > 0x40)
  {
    v241 = v22;
    v39 = a3;
    v40 = a5;
    v41 = v21;
    v42 = llvm::APInt::countLeadingZerosSlowCase(v33);
    v21 = v41;
    a5 = v40;
    a3 = v39;
    v22 = v241;
    if (v42 == v34)
      goto LABEL_41;
  }
  else if (!*(_QWORD *)v33)
  {
    goto LABEL_41;
  }
  if (!v30)
  {
LABEL_38:
    v46 = a12[2];
    v47 = *(_QWORD *)(v46 + 832);
    if (v47)
      v48 = *(_WORD *)(v47 + 8);
    else
      v48 = 0;
    v141 = sub_1C5D52060(v46, 200, (const llvm::APInt *)&v252, (llvm *)5, 0, a7, a8, v48);
    v143 = v142;
    v144 = 0;
    v145 = a12[2];
    v146 = *(_QWORD *)(v145 + 832);
    if (v146)
      v144 = *(_WORD *)(v146 + 8);
    v147 = sub_1C5D52060(v145, 200, (const llvm::APInt *)&v252, (llvm *)5, 0, a9, a10, v144);
    if (a13)
      v149 = (uint64_t)v141;
    else
      v149 = (uint64_t)v147;
    if (a13)
      v150 = v143;
    else
      v150 = v148;
    if (a13)
      v151 = (uint64_t)v147;
    else
      v151 = (uint64_t)v141;
    if (a13)
      v152 = v148;
    else
      v152 = v143;
    v153 = (_QWORD *)a12[2];
    v154 = *(_QWORD *)(v151 + 40) + 16 * v152;
    v155 = *(llvm **)v154;
    v156 = *(_QWORD *)(v154 + 8);
    v157 = sub_1C6367818(v153, a11);
    v161 = sub_1C63698B8((uint64_t)v153, (const char *)0xC0, (const llvm::APInt *)&v252, v155, v156, a3, a4, v159, a5, a6, v151, v152, v149, v150, v157, v158);
    v162 = a12[2];
    v163 = *(_QWORD *)(v162 + 832);
    if (v163)
      v164 = *(_WORD *)(v163 + 8);
    else
      v164 = 0;
    *(_QWORD *)a1 = sub_1C5D52060(v162, 201, (const llvm::APInt *)&v252, (llvm *)4, 0, (uint64_t)v161, v160, v164);
    *(_DWORD *)(a1 + 8) = v182;
    goto LABEL_274;
  }
  v43 = *(_QWORD *)(v30 + 80);
  v44 = (llvm::APInt *)(v43 + 24);
  v45 = *(_DWORD *)(v43 + 32);
  if (v45 > 0x40)
  {
    v49 = v21;
    v50 = llvm::APInt::countLeadingZerosSlowCase(v44);
    v21 = v49;
    if (v50 != v45)
      goto LABEL_38;
  }
  else if (*(_QWORD *)v44)
  {
    goto LABEL_38;
  }
LABEL_41:
  v51 = *(unsigned __int16 *)(a9 + 24);
  if (v51 == 35 || v51 == 11)
    v53 = a9;
  else
    v53 = 0;
  v54 = *(unsigned __int16 *)(a7 + 24);
  if ((v54 & 0xFFFE) == 0xC6)
  {
    v55 = *(_QWORD *)(a7 + 48);
    if (v55)
    {
      v56 = 1;
      do
      {
        if (*(_DWORD *)(v55 + 8) == (_DWORD)a8)
        {
          if (!v56)
            goto LABEL_64;
          --v56;
        }
        v55 = *(_QWORD *)(v55 + 32);
      }
      while (v55);
      if (!v56)
      {
        if (v53)
        {
          if (v23 == 5)
          {
            v57 = *(uint64_t **)(a7 + 32);
            v58 = *v57;
            if (*(_BYTE *)(*(_QWORD *)(*v57 + 40) + 16 * *((unsigned int *)v57 + 2)) == 4)
            {
              if (v54 == 198)
              {
                v103 = *(_QWORD *)(v53 + 80);
                v104 = *(_DWORD *)(v103 + 32);
                if (v104 > 0x40)
                  v105 = **(_QWORD **)(v103 + 24);
                else
                  v105 = (uint64_t)(*(_QWORD *)(v103 + 24) << -(char)v104) >> -(char)v104;
                if (v105 < 0x8000 && v105 >= -32768)
                {
LABEL_243:
                  v178 = v57[1];
                  v179 = a12[2];
                  v180 = *(_QWORD *)(v179 + 832);
                  if (v180)
                    v181 = *(_WORD *)(v180 + 8);
                  else
                    v181 = 0;
                  v202 = sub_1C5D52060(v179, 201, (const llvm::APInt *)&v252, (llvm *)4, 0, a9, a10, v181);
                  if (a13)
                    v204 = v58;
                  else
                    v204 = (uint64_t)v202;
                  if (a13)
                    v205 = v178;
                  else
                    v205 = v203;
                  if (a13)
                  {
                    v58 = (uint64_t)v202;
                    LODWORD(v178) = v203;
                  }
                  v206 = (_QWORD *)a12[2];
                  v207 = *(_QWORD *)(v58 + 40) + 16 * v178;
                  v208 = *(_QWORD *)(v207 + 8);
                  v247 = *(llvm **)v207;
                  v209 = sub_1C6367818(v206, a11);
                  v213 = sub_1C63698B8((uint64_t)v206, (const char *)0xC0, (const llvm::APInt *)&v252, v247, v208, a3, a4, v211, a5, a6, v58, v178, v204, v205, v209, v210);
                  v214 = a12[2];
                  v215 = *(_QWORD *)(v214 + 832);
                  if (v215)
                    v216 = *(_WORD *)(v215 + 8);
                  else
                    v216 = 0;
                  *(_QWORD *)a1 = sub_1C5D52060(v214, *(unsigned __int16 *)(a7 + 24), (const llvm::APInt *)&v252, (llvm *)5, 0, (uint64_t)v213, v212, v216);
                  *(_DWORD *)(a1 + 8) = v217;
                  sub_1C5C5B004(*a12, (uint64_t)v213);
LABEL_274:
                  v114 = 1;
                  goto LABEL_213;
                }
              }
              else
              {
                if (v54 != 199)
                  goto LABEL_243;
                v59 = *(_QWORD *)(v53 + 80);
                v60 = (_QWORD *)(v59 + 24);
                if (*(_DWORD *)(v59 + 32) >= 0x41u)
                  v60 = (_QWORD *)*v60;
                if (!(*v60 >> 16))
                  goto LABEL_243;
              }
LABEL_179:
              v114 = 0;
              goto LABEL_213;
            }
          }
        }
      }
    }
  }
LABEL_64:
  if (v51 != 36 && v51 != 12)
    goto LABEL_179;
  v242 = v21;
  v61 = *(_QWORD *)(a9 + 80);
  v62 = *(_QWORD *)(v61 + 32);
  if ((_UNKNOWN *)v62 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v260, (const llvm::detail::DoubleAPFloat *)(v61 + 32));
  }
  else
  {
    v260 = *(_QWORD *)(v61 + 32);
    if ((*(_DWORD *)(v62 + 8) + 64) >= 0x80)
      v261 = (uint64_t *)operator new[]();
    v63 = *(_BYTE *)(v61 + 52);
    v64 = v63 & 7;
    v263 = v263 & 0xF0 | v63 & 0xF;
    v262 = *(_DWORD *)(v61 + 48);
    v66 = (v63 & 6) != 0 && v64 != 3;
    if (v64 == 1 || v66)
    {
      v68 = *(unsigned int *)(v260 + 8);
      if ((v68 - 64) <= 0xFFFFFF7F)
        v69 = (uint64_t **)v261;
      else
        v69 = &v261;
      v72 = *(uint64_t ***)(v61 + 40);
      v71 = (uint64_t **)(v61 + 40);
      v70 = v72;
      if ((*((_DWORD *)*(v71 - 1) + 2) - 64) >= 0xFFFFFF80)
        v70 = v71;
      if (v68 <= 0xFFFFFFBF)
      {
        v73 = (unint64_t)(v68 + 64) >> 6;
        do
        {
          v74 = *v70++;
          *v69++ = v74;
          --v73;
        }
        while (v73);
      }
    }
  }
  v75 = *(_QWORD *)(a7 + 48);
  if (v75)
  {
    v76 = 1;
    v77 = *(_QWORD *)(a7 + 48);
    do
    {
      if (*(_DWORD *)(v77 + 8) == (_DWORD)a8)
      {
        if (!v76)
          goto LABEL_117;
        --v76;
      }
      v77 = *(_QWORD *)(v77 + 32);
    }
    while (v77);
    if (!v76 && *(_WORD *)(a7 + 24) == 215)
    {
      if ((_UNKNOWN *)v260 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v255, (const llvm::detail::DoubleAPFloat *)&v260);
      }
      else
      {
        v255 = v260;
        if ((*(_DWORD *)(v260 + 8) + 64) >= 0x80)
          v256 = (uint64_t *)operator new[]();
        v78 = v263 & 7;
        v258 = v258 & 0xF0 | v263 & 0xF;
        v257 = v262;
        v80 = (v263 & 6) != 0 && v78 != 3;
        if (v78 == 1 || v80)
        {
          v81 = *(unsigned int *)(v255 + 8);
          v82 = (v81 - 64) <= 0xFFFFFF7F ? v256 : (uint64_t *)&v256;
          v83 = (*(_DWORD *)(v260 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v261 : v261;
          if (v81 <= 0xFFFFFFBF)
          {
            v84 = (unint64_t)(v81 + 64) >> 6;
            do
            {
              v85 = *v83++;
              *v82++ = v85;
              --v84;
            }
            while (v84);
          }
        }
      }
      v251 = 0;
      llvm::APFloat::convert((uint64_t)v254, &unk_1C866F15C, 1, &v251);
      if (!v251)
      {
        v183 = sub_1C6366D08(a12[2], (llvm::LLVMContext *)v254, (const llvm::APFloat *)&v252, (llvm *)9, 0, 0);
        v185 = *(uint64_t **)(a7 + 32);
        v187 = *v185;
        v186 = v185[1];
        if (a13)
          v188 = v187;
        else
          v188 = (uint64_t)v183;
        if (a13)
          v189 = v186;
        else
          v189 = v184;
        if (a13)
          v190 = (uint64_t)v183;
        else
          v190 = v187;
        if (a13)
          v191 = v184;
        else
          v191 = v186;
        v192 = (_QWORD *)a12[2];
        v193 = (const char *)*(unsigned __int16 *)(a2 + 24);
        v194 = sub_1C6367818(v192, a11);
        v198 = sub_1C63698B8((uint64_t)v192, v193, (const llvm::APInt *)&v252, (llvm *)9, 0, a3, a4, v196, a5, a6, v190, v191, v188, v189, v194, v195);
        v199 = a12[2];
        v200 = *(_QWORD *)(v199 + 832);
        if (v200)
          v201 = *(_WORD *)(v200 + 8);
        else
          v201 = 0;
        v218 = a1;
        v219 = sub_1C5D52060(v199, 215, (const llvm::APInt *)&v252, (llvm *)0xA, 0, (uint64_t)v198, v197, v201);
LABEL_277:
        *(_QWORD *)v218 = v219;
        *(_DWORD *)(v218 + 8) = v220;
        sub_1C5C5B004(*a12, (uint64_t)v198);
        if ((_UNKNOWN *)v255 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v256);
        }
        else if ((*(_DWORD *)(v255 + 8) - 64) <= 0xFFFFFF7F && v256)
        {
          MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
        }
        v114 = 1;
        goto LABEL_211;
      }
      if ((_UNKNOWN *)v255 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v256);
      }
      else if ((*(_DWORD *)(v255 + 8) - 64) <= 0xFFFFFF7F && v256)
      {
        MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
      }
      v75 = *(_QWORD *)(a7 + 48);
    }
LABEL_117:
    if (v75)
    {
      v86 = 1;
      do
      {
        if (*(_DWORD *)(v75 + 8) == (_DWORD)a8)
        {
          if (!v86)
            goto LABEL_124;
          --v86;
        }
        v75 = *(_QWORD *)(v75 + 32);
      }
      while (v75);
      if (!v86)
      {
        v87 = *(unsigned __int16 *)(a7 + 24);
        if (v87 != 212)
          goto LABEL_125;
        if (!sub_1C48EEC38(**(_QWORD **)(a7 + 32), *(_QWORD *)(*(_QWORD *)(a7 + 32) + 8), 1, 0)
          && sub_1C48EFDEC(a2))
        {
          if ((_UNKNOWN *)v260 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v255, (const llvm::detail::DoubleAPFloat *)&v260);
          }
          else
          {
            v255 = v260;
            if ((*(_DWORD *)(v260 + 8) + 64) >= 0x80)
              v256 = (uint64_t *)operator new[]();
            v95 = v263 & 7;
            v258 = v258 & 0xF0 | v263 & 0xF;
            v257 = v262;
            v97 = (v263 & 6) != 0 && v95 != 3;
            if (v95 == 1 || v97)
            {
              v98 = *(unsigned int *)(v255 + 8);
              v99 = (v98 - 64) <= 0xFFFFFF7F ? v256 : (uint64_t *)&v256;
              v100 = (*(_DWORD *)(v260 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v261 : v261;
              if (v98 <= 0xFFFFFFBF)
              {
                v101 = (unint64_t)(v98 + 64) >> 6;
                do
                {
                  v102 = *v100++;
                  *v99++ = v102;
                  --v101;
                }
                while (v101);
              }
            }
          }
          v251 = 0;
          llvm::APFloat::convert((uint64_t)v254, &unk_1C866F184, 1, &v251);
          if (v251)
          {
            if ((_UNKNOWN *)v255 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v256);
            }
            else if ((*(_DWORD *)(v255 + 8) - 64) <= 0xFFFFFF7F && v256)
            {
              MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
            }
            goto LABEL_124;
          }
          v221 = sub_1C6366D08(a12[2], (llvm::LLVMContext *)v254, (const llvm::APFloat *)&v252, (llvm *)0xA, 0, 0);
          v223 = *(uint64_t ***)(a7 + 32);
          v225 = *v223;
          v224 = v223[1];
          if (a13)
            v226 = (uint64_t)v225;
          else
            v226 = (uint64_t)v221;
          if (a13)
            v227 = (int)v224;
          else
            v227 = v222;
          if (a13)
            v225 = v221;
          v248 = (uint64_t)v225;
          if (a13)
            v228 = v222;
          else
            v228 = (int)v224;
          v229 = (_QWORD *)a12[2];
          v230 = (const char *)*(unsigned __int16 *)(a2 + 24);
          v231 = sub_1C6367818(v229, a11);
          v198 = sub_1C63698B8((uint64_t)v229, v230, (const llvm::APInt *)&v252, (llvm *)0xA, 0, a3, a4, v233, a5, a6, v248, v228, v226, v227, v231, v232);
          v236 = a12[2];
          v237 = *(_QWORD *)(a7 + 32);
          v238 = *(_QWORD *)(v237 + 40);
          v239 = *(_QWORD *)(v237 + 48);
          v240 = *(_QWORD *)(v236 + 832);
          if (v240)
            LOWORD(v240) = *(_WORD *)(v240 + 8);
          v218 = a1;
          v219 = sub_1C5D56C70(v236, 212, (const llvm::APInt *)&v252, (llvm *)9, 0, (uint64_t)v198, v234, v235, v238, v239, v240);
          goto LABEL_277;
        }
      }
    }
  }
LABEL_124:
  v87 = *(unsigned __int16 *)(a7 + 24);
LABEL_125:
  if ((v87 & 0xFFFE) != 0xDE || !sub_1C48EFEC4(a2))
    goto LABEL_182;
  v88 = *(uint64_t **)(a7 + 32);
  v89 = *v88;
  v90 = v88[1];
  v91 = *(_QWORD *)(*v88 + 48);
  if (!v91)
    goto LABEL_134;
  v92 = 1;
  do
  {
    if (*(_DWORD *)(v91 + 8) == (_DWORD)v90)
    {
      if (!v92)
        goto LABEL_134;
      --v92;
    }
    v91 = *(_QWORD *)(v91 + 32);
  }
  while (v91);
  if (v92)
  {
LABEL_134:
    if (v87 != 222)
      goto LABEL_135;
LABEL_174:
    v111 = a12[2];
    v112 = *(_QWORD *)(v111 + 832);
    if (v112)
      v113 = *(_WORD *)(v112 + 8);
    else
      v113 = 0;
    v18 = sub_1C5D52060(v111, 222, (const llvm::APInt *)&v252, v22, v242, a9, a10, v113);
    v94 = v165;
    goto LABEL_235;
  }
  v106 = *(unsigned __int16 *)(v89 + 24);
  if (v87 == 222)
  {
    v107 = v106 - 96;
    v108 = v107 > 0x2D;
    v109 = (1 << v107) & 0x200000000005;
    if (v108 || v109 == 0)
      goto LABEL_174;
LABEL_182:
    v115 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 160) + 72);
    if ((v115 & 1) == 0)
      v115 = *(unsigned __int16 *)(a2 + 72);
    v116 = a12[2];
    if ((~v115 & 0x7C0) == 0 || (*(_WORD *)(*(_QWORD *)v116 + 1020) & 1) != 0)
    {
      v118 = (uint64_t *)&v259;
      if ((_UNKNOWN *)v260 == &unk_1C866F1C0)
        v118 = v261;
      if ((*((_BYTE *)v118 + 28) & 0xF) == 0xB)
      {
        v119 = *(_QWORD *)(a2 + 48);
        if (!v119)
        {
LABEL_198:
          v124 = sub_1C5D404C4(v116, (const llvm::APInt *)&v252, (_BOOL8)v22, v242, 0, 0.0);
          v126 = v125;
          if (!a13)
            v126 = a8;
          v243 = v126;
          v245 = a3;
          v127 = a5;
          if (a13)
            v128 = (uint64_t)v124;
          else
            v128 = a7;
          if (a13)
            v129 = a8;
          else
            v129 = v125;
          if (a13)
            v130 = a7;
          else
            v130 = (uint64_t)v124;
          v131 = (_QWORD *)a12[2];
          v132 = (const char *)*(unsigned __int16 *)(a2 + 24);
          v133 = sub_1C6367818(v131, a11);
          v136 = sub_1C63698B8((uint64_t)v131, v132, (const llvm::APInt *)&v252, v22, v242, v245, a4, v135, v127, a6, v128, v243, v130, v129, v133, v134);
          *(_QWORD *)a1 = v136;
          *(_DWORD *)(a1 + 8) = v137;
          v138 = *a12;
          v139 = (uint64_t)v136;
          goto LABEL_242;
        }
        while (1)
        {
          v120 = *(_QWORD *)(v119 + 16);
          v121 = *(unsigned __int16 *)(v120 + 24);
          if ((sub_1C61415C4(v121) & 1) == 0)
          {
            if (v121 != 46)
              break;
            v122 = *(_QWORD *)(**(_QWORD **)(v120 + 32) + 80);
            v123 = (_QWORD *)(v122 + 24);
            if (*(_DWORD *)(v122 + 32) >= 0x41u)
              v123 = (_QWORD *)*v123;
            if (*v123 != 2131)
              break;
          }
          v119 = *(_QWORD *)(v119 + 32);
          if (!v119)
            goto LABEL_198;
        }
      }
    }
LABEL_210:
    v114 = 0;
    goto LABEL_211;
  }
  if (v87 == 223 && v106 == 98)
    goto LABEL_182;
LABEL_135:
  v93 = (uint64_t *)&v259;
  if ((_UNKNOWN *)v260 == &unk_1C866F1C0)
    v93 = v261;
  if ((*((_BYTE *)v93 + 28) & 8) != 0)
    goto LABEL_210;
  v94 = a10;
LABEL_235:
  if (a13)
  {
    v166 = (uint64_t *)v89;
    v246 = v90;
    LODWORD(v90) = v94;
    v89 = (uint64_t)v18;
    v18 = v166;
  }
  else
  {
    v246 = v94;
  }
  v167 = (_QWORD *)a12[2];
  v168 = (const char *)*(unsigned __int16 *)(a2 + 24);
  v169 = sub_1C6367818(v167, a11);
  v173 = sub_1C63698B8((uint64_t)v167, v168, (const llvm::APInt *)&v252, v22, v242, a3, a4, v171, a5, a6, v89, v90, (uint64_t)v18, v246, v169, v170);
  v174 = a12[2];
  v175 = *(_QWORD *)(v174 + 832);
  if (v175)
    v176 = *(_WORD *)(v175 + 8);
  else
    v176 = 0;
  *(_QWORD *)a1 = sub_1C5D52060(v174, *(unsigned __int16 *)(a7 + 24), (const llvm::APInt *)&v252, v22, v242, (uint64_t)v173, v172, v176);
  *(_DWORD *)(a1 + 8) = v177;
  v138 = *a12;
  v139 = (uint64_t)v173;
LABEL_242:
  sub_1C5C5B004(v138, v139);
  v114 = 1;
LABEL_211:
  if ((_UNKNOWN *)v260 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v261);
  }
  else if ((*(_DWORD *)(v260 + 8) - 64) <= 0xFFFFFF7F && v261)
  {
    MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
  }
LABEL_213:
  if (v252)
    llvm::MetadataTracking::untrack((uint64_t)&v252, v252);
  return v114;
}

uint64_t sub_1C48EFDEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    while (1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      v3 = *(unsigned __int16 *)(v2 + 24);
      if (v3 == 212)
      {
LABEL_5:
        if ((sub_1C48EFDEC(*(_QWORD *)(v1 + 16)) & 1) == 0)
          return 0;
        goto LABEL_11;
      }
      if (v3 != 222)
        break;
      v4 = *(_QWORD *)(v2 + 48);
      if (!v4 || *(_QWORD *)(v4 + 32))
        goto LABEL_13;
      result = sub_1C48EFDEC(*(_QWORD *)(v1 + 16));
      if (!(_DWORD)result)
        return result;
      if ((sub_1C48EFEC4(v2) & 1) == 0)
        return 0;
LABEL_11:
      v1 = *(_QWORD *)(v1 + 32);
      if (!v1)
        return 1;
    }
    if (v3 == 215)
      goto LABEL_5;
LABEL_13:
    if ((sub_1C61415C4(*(unsigned __int16 *)(v2 + 24)) & 1) == 0)
    {
      if (v3 != 46)
        return 0;
      v6 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 80);
      v7 = (_QWORD *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u)
        v7 = (_QWORD *)*v7;
      if (*v7 != 2131)
        return 0;
    }
    goto LABEL_11;
  }
  return 1;
}

uint64_t sub_1C48EFEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 1;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 > 0xD6)
      break;
    if (v4 == 192)
      goto LABEL_11;
    if (v4 != 212)
      goto LABEL_5;
LABEL_9:
    if ((sub_1C48EFEC4() & 1) == 0)
      return 0;
LABEL_13:
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 1;
  }
  if (v4 != 428)
  {
    if (v4 != 215)
    {
LABEL_5:
      result = sub_1C61415C4(*(unsigned __int16 *)(v3 + 24));
      if (!(_DWORD)result)
        return result;
      goto LABEL_13;
    }
    goto LABEL_9;
  }
LABEL_11:
  v6 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v6 + 80) != a1 && *(_QWORD *)(v6 + 120) != a1)
    goto LABEL_13;
  return 0;
}

uint64_t sub_1C48EFF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  uint64_t *v85;
  unint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm *v111;
  uint64_t v112;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(unsigned int *)(v5 + 48);
  v111 = *(llvm **)v6;
  v112 = *(_QWORD *)(v6 + 8);
  v11 = *(unsigned __int8 **)(a2 + 64);
  v114 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v114, v11, 2);
  v115 = *(_DWORD *)(a2 + 60);
  v12 = *(unsigned __int16 *)(v9 + 24);
  v14 = v12 == 12 || v12 == 36;
  v15 = *(unsigned __int16 *)(a2 + 24);
  if (*(_WORD *)(v7 + 24) != 192)
    goto LABEL_17;
  v16 = *(_QWORD *)(v7 + 48);
  if (!v16)
    goto LABEL_17;
  v17 = v8;
  v18 = 1;
  do
  {
    if (*(_DWORD *)(v16 + 8) == (_DWORD)v8)
    {
      if (!v18)
        goto LABEL_17;
      --v18;
    }
    v16 = *(_QWORD *)(v16 + 32);
  }
  while (v16);
  if (!v18)
  {
    v8 = v8 & 0xFFFFFFFF00000000 | v10;
    v19 = v9;
    v9 = v7;
  }
  else
  {
LABEL_17:
    v19 = v7;
    v17 = v10;
    if (v12 != 192)
      goto LABEL_26;
  }
  v20 = *(_QWORD *)(v9 + 48);
  if (!v20)
    goto LABEL_25;
  v21 = 1;
  do
  {
    if (*(_DWORD *)(v20 + 8) == v17)
    {
      if (!v21)
        goto LABEL_25;
      --v21;
    }
    v20 = *(_QWORD *)(v20 + 32);
  }
  while (v20);
  if (v21)
    goto LABEL_25;
  v41 = *(_QWORD *)(v9 + 32);
  v42 = *(unsigned __int16 *)(*(_QWORD *)(v41 + 80) + 24);
  if (v42 == 36 || v42 == 12)
    v44 = *(_QWORD *)(v41 + 80);
  else
    v44 = 0;
  v45 = *(_QWORD *)(v41 + 120);
  v46 = *(unsigned __int16 *)(v45 + 24);
  if (v46 != 36 && v46 != 12)
    v45 = 0;
  v105 = v45;
  v109 = a1;
  if (v44)
  {
    v48 = *(_QWORD *)(v44 + 80);
    LODWORD(v121) = 64;
    v120 = 0x3FF0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v116, (const llvm::APInt **)&v120);
    v121 = v116;
    v122 = v117;
    v123 = v118;
    v124 = v119 & 0xF;
    llvm::APFloat::convert((uint64_t)&v120, *(void **)(v48 + 32), 1, &v116);
    v49 = sub_1C47ECB98(v48 + 24, (uint64_t)&v120);
    if ((_UNKNOWN *)v121 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v122);
    }
    else if ((*(_DWORD *)(v121 + 8) - 64) <= 0xFFFFFF7F && v122)
    {
      MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
    }
    if ((_DWORD)v15 == 98)
      v50 = v49;
    else
      v50 = 0;
    if ((v50 & 1) != 0)
    {
      v51 = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v44 + 80);
      if (*(_UNKNOWN **)(v52 + 32) == &unk_1C866F1C0)
        v53 = *(_QWORD *)(v52 + 40);
      else
        v53 = v52 + 24;
      v51 = (*(_BYTE *)(v53 + 28) & 7) == 3 || v14;
    }
    v45 = v105;
    if (v105)
    {
LABEL_97:
      v101 = v51;
      v56 = *(_QWORD *)(v45 + 80);
      LODWORD(v121) = 64;
      v120 = 0x3FF0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v116, (const llvm::APInt **)&v120);
      v121 = v116;
      v122 = v117;
      v123 = v118;
      v124 = v119 & 0xF;
      llvm::APFloat::convert((uint64_t)&v120, *(void **)(v56 + 32), 1, &v116);
      v58 = sub_1C47ECB98(v56 + 24, (uint64_t)&v120);
      if ((_UNKNOWN *)v121 == &unk_1C866F1C0)
      {
        sub_1C4773C74(&v122);
      }
      else if ((*(_DWORD *)(v121 + 8) - 64) <= 0xFFFFFF7F && v122)
      {
        MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
      }
      if ((_DWORD)v15 == 98)
        v59 = v58;
      else
        v59 = 0;
      a1 = v109;
      if ((v59 & 1) != 0)
      {
        v60 = 1;
      }
      else
      {
        v61 = *(_QWORD *)(v105 + 80);
        if (*(_UNKNOWN **)(v61 + 32) == &unk_1C866F1C0)
          v62 = *(_QWORD *)(v61 + 40);
        else
          v62 = v61 + 24;
        v60 = (*(_BYTE *)(v62 + 28) & 7) == 3 || v14;
      }
      if (v44 && v101 | v60)
      {
        v102 = sub_1C5D56C70(*(_QWORD *)(a3 + 16), v15, (const llvm::APInt *)&v114, v111, v112, v19, v8, v57, v44, 0, *(_WORD *)(a2 + 72));
        v64 = v63;
        v66 = sub_1C5D56C70(*(_QWORD *)(a3 + 16), v15, (const llvm::APInt *)&v114, v111, v112, v19, v8, v65, v105, 0, *(_WORD *)(a2 + 72));
        v67 = *(uint64_t **)(v9 + 32);
        v70 = sub_1C63698B8(*(_QWORD *)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v114, v111, v112, *v67, v67[1], v69, v67[5], v67[6], (uint64_t)v102, v64, (uint64_t)v66, v68, v67[20], v67[21]);
LABEL_144:
        *(_QWORD *)a1 = v70;
        *(_DWORD *)(a1 + 8) = v71;
        v78 = 1;
        goto LABEL_127;
      }
LABEL_25:
      v7 = v19;
      goto LABEL_26;
    }
  }
  else
  {
    v51 = 0;
    if (v45)
      goto LABEL_97;
  }
  v7 = v19;
  a1 = v109;
  if (*(_WORD *)(v7 + 24) != 215)
    goto LABEL_36;
  v22 = *(_QWORD *)(v7 + 48);
  if (!v22)
    goto LABEL_36;
LABEL_26:
  v23 = 1;
  do
  {
    if (*(_DWORD *)(v22 + 8) == (_DWORD)v8)
    {
      if (!v23)
        goto LABEL_36;
      --v23;
    }
    v22 = *(_QWORD *)(v22 + 32);
  }
  while (v22);
  if (!v23 && *(_WORD *)(**(_QWORD **)(v7 + 32) + 24) == 192)
  {
    v24 = v17;
    v17 = v8;
    v8 = v8 & 0xFFFFFFFF00000000 | v24;
    v25 = v7;
  }
  else
  {
LABEL_36:
    v25 = v9;
    v9 = v7;
  }
  if (*(_WORD *)(v25 + 24) != 215)
    goto LABEL_126;
  v26 = *(_QWORD *)(v25 + 48);
  if (!v26)
    goto LABEL_126;
  v27 = 1;
  do
  {
    if (*(_DWORD *)(v26 + 8) == v17)
    {
      if (!v27)
        goto LABEL_126;
      --v27;
    }
    v26 = *(_QWORD *)(v26 + 32);
  }
  while (v26);
  if (v27)
    goto LABEL_126;
  v28 = **(_QWORD **)(v25 + 32);
  if (*(_WORD *)(v28 + 24) != 192)
    goto LABEL_126;
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(unsigned __int16 *)(*(_QWORD *)(v29 + 80) + 24);
  if (v30 == 36 || v30 == 12)
    v32 = *(_QWORD *)(v29 + 80);
  else
    v32 = 0;
  v33 = *(_QWORD *)(v29 + 120);
  v34 = *(unsigned __int16 *)(v33 + 24);
  if (v34 != 36 && v34 != 12)
    v33 = 0;
  v108 = v33;
  if (v32)
  {
    v36 = a1;
    v37 = *(_QWORD *)(v32 + 80);
    LODWORD(v121) = 64;
    v120 = 0x3FF0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v116, (const llvm::APInt **)&v120);
    v121 = v116;
    v122 = v117;
    v123 = v118;
    v124 = v119 & 0xF;
    llvm::APFloat::convert((uint64_t)&v120, *(void **)(v37 + 32), 1, &v116);
    v38 = sub_1C47ECB98(v37 + 24, (uint64_t)&v120);
    if ((_UNKNOWN *)v121 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v122);
    }
    else if ((*(_DWORD *)(v121 + 8) - 64) <= 0xFFFFFF7F && v122)
    {
      MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
    }
    v39 = (_DWORD)v15 == 98 ? v38 : 0;
    a1 = v36;
    if ((v39 & 1) != 0)
    {
      v40 = 1;
    }
    else
    {
      v54 = *(_QWORD *)(v32 + 80);
      v55 = *(_UNKNOWN **)(v54 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v54 + 40) : v54 + 24;
      v40 = (*(_BYTE *)(v55 + 28) & 7) == 3 || v14;
    }
    v33 = v108;
  }
  else
  {
    v40 = 0;
  }
  if (!v33)
  {
LABEL_126:
    v78 = 0;
    goto LABEL_127;
  }
  v103 = v40;
  v72 = a1;
  v73 = *(_QWORD *)(v33 + 80);
  LODWORD(v121) = 64;
  v120 = 0x3FF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v116, (const llvm::APInt **)&v120);
  v121 = v116;
  v122 = v117;
  v123 = v118;
  v124 = v119 & 0xF;
  llvm::APFloat::convert((uint64_t)&v120, *(void **)(v73 + 32), 1, &v116);
  v74 = sub_1C47ECB98(v73 + 24, (uint64_t)&v120);
  if ((_UNKNOWN *)v121 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v122);
    a1 = v72;
  }
  else
  {
    a1 = v72;
    if ((*(_DWORD *)(v121 + 8) - 64) <= 0xFFFFFF7F && v122)
      MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
  }
  if ((_DWORD)v15 == 98)
    v75 = v74;
  else
    v75 = 0;
  if ((v75 & 1) != 0)
  {
    v76 = 1;
    v77 = v32;
  }
  else
  {
    v77 = v32;
    v80 = *(_QWORD *)(v108 + 80);
    if (*(_UNKNOWN **)(v80 + 32) == &unk_1C866F1C0)
      v81 = *(_QWORD *)(v80 + 40);
    else
      v81 = v80 + 24;
    v76 = (*(_BYTE *)(v81 + 28) & 7) == 3 || v14;
  }
  v78 = 0;
  if (v77 && v103 | v76)
  {
    v82 = *(_QWORD *)(a3 + 16);
    v83 = *(_QWORD *)(v82 + 832);
    if (v83)
      v84 = *(_WORD *)(v83 + 8);
    else
      v84 = 0;
    v85 = sub_1C5D52060(v82, 215, (const llvm::APInt *)&v114, v111, v112, v77, 0, v84);
    v104 = v86;
    v106 = (uint64_t)v85;
    v87 = 0;
    v88 = *(_QWORD *)(a3 + 16);
    v89 = *(_QWORD *)(v88 + 832);
    if (v89)
      v87 = *(_WORD *)(v89 + 8);
    v100 = sub_1C5D52060(v88, 215, (const llvm::APInt *)&v114, v111, v112, v108, 0, v87);
    v91 = v90;
    v93 = sub_1C5D56C70(*(_QWORD *)(a3 + 16), v15, (const llvm::APInt *)&v114, v111, v112, v9, v8, v92, v106, v104, *(_WORD *)(a2 + 72));
    v107 = v94;
    v110 = (uint64_t)v93;
    v96 = sub_1C5D56C70(*(_QWORD *)(a3 + 16), v15, (const llvm::APInt *)&v114, v111, v112, v9, v8, v95, (uint64_t)v100, v91, *(_WORD *)(a2 + 72));
    v97 = *(uint64_t **)(v28 + 32);
    v70 = sub_1C63698B8(*(_QWORD *)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v114, v111, v112, *v97, v97[1], v99, v97[5], v97[6], v110, v107, (uint64_t)v96, v98, v97[20], v97[21]);
    goto LABEL_144;
  }
LABEL_127:
  if (v114)
    llvm::MetadataTracking::untrack((uint64_t)&v114, v114);
  return v78;
}

uint64_t sub_1C48F0864(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  unsigned int v43;
  int *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  llvm *v68;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  llvm *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t **v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  int v105;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  void *v124;
  uint64_t ExtendedSizeInBits;
  const char *v126;
  uint64_t v127;
  int v128;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  int v136;
  _BOOL4 v138;
  uint64_t v140;
  void **v141;
  void **v142;
  void **v143;
  void **v144;
  unint64_t v145;
  void *v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t *v151;
  llvm *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  int v160;
  unsigned int v161;
  _QWORD *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  int v170;
  uint64_t v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  unint64_t v177;
  int v178;
  uint64_t *v179;
  void *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  int v195;
  int v196;
  int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v203;
  unsigned int *v204;
  uint64_t v205;
  void **v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  int v210;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t *v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  int v228;
  void *v229;
  BOOL v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  char v234;
  BOOL v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  __int16 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  int v252;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  __int16 v260;
  _QWORD *v261;
  uint64_t v262;
  int v263;
  uint64_t v265;
  int v266;
  uint64_t v268;
  uint64_t v269;
  void **v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  llvm *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  int v287;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  __int16 v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  unint64_t v301;
  llvm *v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  llvm *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  int v314;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  const char *v323;
  uint64_t v324;
  llvm *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  __int16 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  int v350;
  _QWORD *v351;
  uint64_t v352;
  int v353;
  int v355;
  uint64_t v357;
  void *v358;
  uint64_t *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  __int16 v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  llvm *v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  unsigned int *v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  int v381;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  int v387;
  _BOOL4 v389;
  uint64_t v391;
  void **v392;
  void **v393;
  void **v394;
  void **v395;
  unint64_t v396;
  void *v397;
  double v398;
  uint64_t v399;
  _DWORD *v400;
  __int128 *v401;
  uint64_t v402;
  _QWORD *v403;
  int v404;
  int v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  llvm *v425;
  BOOL v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  unint64_t v438;
  uint64_t v439;
  int v440;
  int v441;
  _QWORD *v442;
  uint64_t v443;
  _DWORD *v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  int v448;
  uint64_t v449;
  int v450;
  _DWORD *v451;
  int v452;
  uint64_t *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  int v459;
  BOOL v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  int v472;
  int v473;
  uint64_t v474;
  uint64_t *v475;
  int v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  llvm *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t *v489;
  unint64_t v490;
  void *v491;
  int v492;
  int v493;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  __int16 v500;
  uint64_t *v501;
  uint64_t v502;
  int v503;
  uint64_t v505;
  uint64_t v506;
  char v507;
  int v508;
  _BOOL4 v510;
  uint64_t v512;
  void **v513;
  void **v514;
  void **v515;
  void **v516;
  unint64_t v517;
  void *v518;
  double v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  uint64_t v527;
  int v528;
  uint64_t v530;
  int v531;
  uint64_t v533;
  unint64_t *v534;
  uint64_t v535;
  _QWORD *v536;
  unint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t *v544;
  uint64_t v545;
  int v546;
  uint64_t v548;
  const llvm::detail::DoubleAPFloat *v549;
  uint64_t v550;
  char v551;
  int v552;
  _BOOL4 v554;
  uint64_t v556;
  void **v557;
  void **v558;
  void **v559;
  void **v560;
  unint64_t v561;
  void *v562;
  uint64_t *v563;
  uint64_t v564;
  int v565;
  uint64_t v567;
  uint64_t v568;
  char v569;
  int v570;
  _BOOL4 v572;
  uint64_t v574;
  void **v575;
  void **v576;
  void **v577;
  void **v578;
  unint64_t v579;
  void *v580;
  double v581;
  uint64_t v582;
  int v583;
  uint64_t *v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t *v604;
  void *v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v612;
  int v613;
  uint64_t v615;
  unint64_t v616;
  uint64_t v618;
  int v619;
  uint64_t v621;
  unint64_t v622;
  _QWORD *v623;
  unint64_t v624;
  unint64_t v625;
  __int16 v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  _QWORD *v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  uint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  int v648;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v654;
  int v655;
  uint64_t v656;
  _QWORD *v657;
  _QWORD *v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  unint64_t v662;
  int v663;
  int v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t *v671;
  int v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t *v676;
  uint64_t *v677;
  int v678;
  uint64_t v679;
  int v680;
  char v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t *v688;
  uint64_t v689;
  int v690;
  uint64_t v692;
  _QWORD *v693;
  _QWORD *v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  __int16 v698;
  uint64_t v700;
  int v701;
  unint64_t *v702;
  uint64_t v703;
  int v704;
  unint64_t v706;
  int v707;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  int v713;
  uint64_t v714;
  char v715;
  char v716;
  uint64_t v717;
  int v718;
  int v719;
  uint64_t v721;
  int v722;
  uint64_t v724;
  _QWORD *v725;
  __int128 v726;
  unint64_t v727;
  __int16 v728;
  uint64_t v729;
  uint64_t *v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  __int16 v734;
  uint64_t v735;
  uint64_t *v736;
  unint64_t v737;
  uint64_t v738;
  _QWORD *v739;
  uint64_t v742;
  llvm::EVT **v743;
  void *v744;
  char v745;
  uint64_t v746;
  int v747;
  __int16 v748;
  _QWORD *v749;
  uint64_t *v750;
  uint64_t v751;
  unint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t *v756;
  unint64_t v757;
  uint64_t v758;
  void *v759;
  uint64_t v760;
  __int16 v761;
  uint64_t v762;
  int v763;
  uint64_t v765;
  llvm::APInt *v766;
  unsigned int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  _DWORD *v771;
  _DWORD *v772;
  uint64_t v773;
  unsigned int v774;
  uint64_t v775;
  char v776;
  uint64_t v777;
  unsigned int v778;
  unsigned int v779;
  uint64_t v780;
  unsigned int v781;
  unsigned int v782;
  uint64_t *v783;
  _QWORD *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  llvm *v789;
  unint64_t v790;
  uint64_t *v791;
  unint64_t v792;
  BOOL v793;
  uint64_t v794;
  int v795;
  void *v796;
  uint64_t *v798;
  unint64_t v799;
  unint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  __int16 v806;
  uint64_t *v807;
  unint64_t v808;
  unint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t k;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t *v816;
  uint64_t v817;
  llvm::EVT **v818;
  void *v819;
  unint64_t v820;
  unsigned __int8 v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  llvm *v827;
  uint64_t *v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  __int16 v832;
  uint64_t *v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t *v836;
  uint64_t v837;
  uint64_t v838;
  int v839;
  uint64_t v840;
  uint64_t v841;
  llvm *v842;
  uint64_t v843;
  uint64_t v844;
  __int16 v845;
  unint64_t *v846;
  uint64_t v847;
  uint64_t *v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  __int16 v855;
  unsigned int v856;
  uint64_t v857;
  _QWORD *v858;
  _QWORD *v859;
  uint64_t v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  int v865;
  int v866;
  uint64_t v867;
  _QWORD *v868;
  uint64_t v869;
  uint64_t v870;
  unsigned int v871;
  int v872;
  unint64_t v873;
  char v874;
  uint64_t v875;
  int v876;
  uint64_t v877;
  int v878;
  unsigned int v879;
  unint64_t v880;
  uint64_t v881;
  int v882;
  uint64_t *v883;
  uint64_t v884;
  uint64_t *v885;
  uint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t *v897;
  uint64_t v898;
  void *v899;
  uint64_t v900;
  uint64_t *v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  __int16 v906;
  _QWORD *v907;
  unint64_t v908;
  unint64_t v909;
  __int16 v910;
  uint64_t v911;
  uint64_t *v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  uint64_t *v916;
  unint64_t v917;
  unint64_t v918;
  uint64_t v919;
  _QWORD *v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v935;
  int v936;
  BOOL v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  BOOL v941;
  uint64_t v943;
  _QWORD *v944;
  uint64_t v945;
  _QWORD *v946;
  char v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  llvm *v953;
  uint64_t v954;
  uint64_t v955;
  unsigned __int8 *v956;
  uint64_t v957;
  int v958;
  int v959;
  uint64_t v960;
  unsigned __int8 *v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  int v965;
  uint64_t v966;
  unsigned __int8 *v967;
  uint64_t *v968;
  uint64_t v969;
  unint64_t *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t v975;
  int v976;
  uint64_t v977;
  uint64_t *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  __int16 v988;
  uint64_t v989;
  uint64_t v990;
  __int16 v991;
  uint64_t v992;
  uint64_t v993;
  void **v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  unsigned int v999;
  unsigned int v1000;
  uint64_t v1001;
  uint64_t *v1002;
  uint64_t v1003;
  BOOL v1004;
  uint64_t v1005;
  unsigned int v1006;
  unsigned int v1007;
  int v1008;
  uint64_t *v1009;
  uint64_t v1010;
  int v1011;
  int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t *v1015;
  int v1016;
  unint64_t v1018;
  uint64_t *v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t *v1023;
  __int16 v1024;
  unint64_t v1025;
  int v1026;
  uint64_t v1027;
  uint64_t v1028;
  llvm *v1029;
  int v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  __int16 v1035;
  uint64_t v1036;
  uint64_t v1037;
  llvm *v1038;
  unsigned __int8 *v1039;
  uint64_t *v1040;
  uint64_t v1041;
  unint64_t v1042;
  const char *v1043;
  BOOL v1044;
  uint64_t v1045;
  BOOL v1046;
  uint64_t *v1047;
  uint64_t v1048;
  int v1049;
  uint64_t v1051;
  _QWORD *v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  uint64_t v1056;
  uint64_t *v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  __int16 v1061;
  uint64_t v1062;
  uint64_t v1063;
  llvm *v1064;
  uint64_t v1065;
  uint64_t v1066;
  __int16 v1067;
  int v1068;
  uint64_t v1069;
  int v1070;
  uint64_t v1071;
  _QWORD *v1072;
  unint64_t v1073;
  int v1074;
  uint64_t v1075;
  unsigned __int8 *v1076;
  unsigned int v1077;
  _QWORD *v1078;
  uint64_t v1079;
  uint64_t v1080;
  unsigned int v1081;
  _QWORD *v1082;
  uint64_t v1083;
  _QWORD *v1084;
  uint64_t v1085;
  uint64_t v1086;
  __int128 v1087;
  uint64_t v1088;
  uint64_t v1089;
  _QWORD *v1090;
  unsigned int v1091;
  _QWORD *v1092;
  int v1093;
  BOOL v1094;
  int v1095;
  int v1096;
  uint64_t *v1097;
  unsigned int v1098;
  int v1099;
  uint64_t v1100;
  _QWORD *v1101;
  unsigned int v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  uint64_t *v1107;
  unsigned int v1108;
  uint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  uint64_t v1114;
  uint64_t v1115;
  llvm *v1116;
  uint64_t v1117;
  uint64_t v1118;
  __int16 v1119;
  uint64_t v1120;
  uint64_t v1121;
  unint64_t v1122;
  uint64_t v1123;
  __int16 v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t *v1127;
  uint64_t v1128;
  uint64_t v1129;
  char EVT;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  __int16 v1134;
  uint64_t v1135;
  void *v1136;
  uint64_t v1137;
  llvm *v1138;
  uint64_t v1139;
  unint64_t v1140;
  uint64_t v1141;
  unint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t *v1145;
  int v1146;
  int v1147;
  uint64_t v1148;
  uint64_t v1149;
  void *v1150;
  uint64_t v1151;
  uint64_t v1152;
  llvm *v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t *v1162;
  int v1163;
  int v1164;
  uint64_t v1165;
  void *v1166;
  uint64_t *v1167;
  uint64_t *v1168;
  uint64_t v1169;
  uint64_t v1170;
  unsigned int v1171;
  uint64_t v1172;
  unsigned int v1173;
  uint64_t v1174;
  uint64_t *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  int v1180;
  uint64_t *v1181;
  uint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  const char *v1185;
  unsigned __int8 v1186;
  uint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  __int16 v1191;
  void *v1192;
  uint64_t v1193;
  int v1194;
  uint64_t v1195;
  uint64_t v1196;
  char v1197;
  char v1198;
  int v1199;
  _BOOL4 v1201;
  uint64_t v1203;
  void **v1204;
  void **v1205;
  void **v1206;
  void **v1207;
  unint64_t v1208;
  void *v1209;
  double v1210;
  uint64_t v1211;
  uint64_t *v1212;
  uint64_t v1213;
  uint64_t v1214;
  double v1215;
  void *v1216;
  uint64_t v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  char v1222;
  char v1223;
  int v1224;
  _BOOL4 v1226;
  uint64_t v1227;
  void **v1228;
  void **v1229;
  void **v1230;
  void **v1231;
  unint64_t v1232;
  void *v1233;
  uint64_t *v1234;
  uint64_t v1235;
  int v1236;
  uint64_t v1237;
  unsigned int v1238;
  uint64_t v1239;
  unint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  __int16 v1243;
  uint64_t v1244;
  unint64_t v1245;
  uint64_t v1246;
  unsigned int v1247;
  uint64_t *v1248;
  unint64_t v1249;
  uint64_t v1250;
  uint64_t *v1251;
  unint64_t v1252;
  unsigned int v1253;
  uint64_t *v1254;
  unint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  unsigned int v1258;
  uint64_t v1259;
  __int128 v1260;
  void **v1261;
  uint64_t v1262;
  unsigned __int8 *v1263;
  uint64_t v1264;
  llvm *v1265;
  void *v1266;
  uint64_t *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  unsigned __int8 *v1273;
  void **v1274;
  uint64_t *v1275;
  uint64_t v1276;
  unint64_t v1277;
  uint64_t *v1278;
  uint64_t v1279;
  unint64_t v1280;
  uint64_t *v1281;
  unint64_t v1282;
  uint64_t v1283;
  __int16 v1284;
  _QWORD *v1285;
  uint64_t *v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t *v1289;
  unint64_t v1290;
  unint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  int v1295;
  uint64_t v1296;
  _QWORD *v1297;
  uint64_t *v1298;
  unint64_t v1299;
  void *v1300;
  uint64_t v1301;
  _QWORD *v1302;
  unint64_t v1303;
  unint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  unint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t *v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  const char *v1314;
  unsigned __int8 v1315;
  uint64_t v1316;
  unint64_t v1317;
  unsigned int v1318;
  _QWORD *v1319;
  unsigned int *v1320;
  int v1321;
  uint64_t v1323;
  uint64_t *v1324;
  unsigned int v1325;
  int v1326;
  uint64_t v1327;
  uint64_t *v1328;
  unsigned int v1329;
  unsigned int v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t *v1333;
  uint64_t v1334;
  unint64_t v1335;
  uint64_t *v1336;
  unint64_t v1337;
  uint64_t v1338;
  uint64_t *v1339;
  uint64_t v1340;
  unint64_t v1341;
  uint64_t *v1342;
  uint64_t v1343;
  _QWORD *v1344;
  unint64_t v1345;
  uint64_t v1346;
  __int16 v1347;
  uint64_t v1348;
  uint64_t *v1349;
  unint64_t v1350;
  uint64_t v1351;
  __int16 v1352;
  uint64_t v1353;
  uint64_t *v1354;
  uint64_t v1355;
  _QWORD *v1356;
  unint64_t v1357;
  uint64_t v1358;
  __int16 v1359;
  uint64_t v1360;
  uint64_t *v1361;
  unint64_t v1362;
  unint64_t v1363;
  uint64_t v1364;
  _QWORD *v1365;
  unint64_t v1366;
  uint64_t v1367;
  __int16 v1368;
  uint64_t v1369;
  uint64_t *v1370;
  unint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  _QWORD *v1374;
  unint64_t v1375;
  uint64_t v1376;
  __int16 v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t *v1380;
  unint64_t v1381;
  unint64_t v1382;
  __int16 v1383;
  uint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  uint64_t *v1387;
  uint64_t v1388;
  unint64_t v1389;
  __int16 v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t *v1393;
  unsigned int v1394;
  unsigned int v1395;
  uint64_t v1396;
  _QWORD *v1397;
  unint64_t v1398;
  uint64_t v1399;
  __int16 v1400;
  uint64_t v1401;
  uint64_t *v1402;
  unint64_t v1403;
  unint64_t v1404;
  uint64_t v1405;
  _QWORD *v1406;
  unint64_t v1407;
  uint64_t v1408;
  __int16 v1409;
  uint64_t v1410;
  uint64_t *v1411;
  unint64_t v1412;
  uint64_t v1413;
  __int16 v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t *v1417;
  unsigned int v1418;
  unsigned int v1419;
  _QWORD *v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  _QWORD *v1424;
  uint64_t v1425;
  uint64_t **v1426;
  _QWORD *v1427;
  uint64_t v1428;
  uint64_t v1429;
  unsigned int v1430;
  unint64_t v1431;
  _QWORD *v1432;
  uint64_t v1433;
  uint64_t **v1434;
  _QWORD *v1435;
  uint64_t v1436;
  uint64_t v1437;
  unsigned int v1438;
  unint64_t v1439;
  _QWORD *v1440;
  uint64_t v1441;
  uint64_t **v1442;
  _QWORD *v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  _QWORD *v1447;
  int v1448;
  uint64_t v1449;
  char v1450;
  uint64_t v1451;
  const char *v1452;
  uint64_t v1453;
  _DWORD *v1454;
  int v1455;
  int v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  _BOOL4 v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  int v1465;
  unsigned int v1466;
  uint64_t v1467;
  uint64_t v1468;
  _QWORD *v1469;
  uint64_t v1470;
  uint64_t v1471;
  unsigned int v1472;
  _QWORD *v1473;
  _QWORD *v1474;
  uint64_t v1475;
  uint64_t v1476;
  unsigned int v1477;
  _QWORD *v1478;
  uint64_t v1479;
  _QWORD *v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t *v1483;
  unsigned int v1484;
  _QWORD *v1485;
  char v1486;
  _QWORD *v1487;
  uint64_t v1488;
  uint64_t v1489;
  unsigned int v1490;
  _QWORD *v1491;
  __int128 v1492;
  _QWORD *v1493;
  uint64_t v1494;
  int v1495;
  uint64_t v1496;
  uint64_t v1497;
  unint64_t v1498;
  void *v1499;
  void **v1500;
  int v1501;
  const char *v1502;
  unint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  void **v1507;
  char *v1508;
  unint64_t v1509;
  void **v1510;
  unsigned int v1511;
  uint64_t v1512;
  llvm *v1513;
  uint64_t v1514;
  uint64_t v1515;
  _QWORD *v1516;
  unint64_t v1517;
  uint64_t v1518;
  __int16 v1519;
  uint64_t v1520;
  uint64_t *v1521;
  uint64_t *v1522;
  uint64_t *v1523;
  _QWORD *v1524;
  const char *v1525;
  uint64_t v1526;
  uint64_t **v1527;
  uint64_t v1528;
  _QWORD *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t *v1532;
  uint64_t *v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  int v1540;
  uint64_t v1541;
  _QWORD *v1542;
  uint64_t *v1543;
  int v1544;
  uint64_t v1545;
  uint64_t *v1546;
  int v1547;
  uint64_t v1548;
  uint64_t v1549;
  __int16 v1550;
  int v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  unsigned __int8 **v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  int v1561;
  uint64_t v1562;
  char v1563;
  uint64_t v1564;
  char v1565;
  uint64_t v1566;
  char v1567;
  char v1568;
  _QWORD *v1569;
  unint64_t v1570;
  char v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  unint64_t v1575;
  uint64_t v1576;
  char v1577;
  int v1578;
  int v1579;
  unint64_t v1580;
  char v1581;
  uint64_t v1582;
  char v1583;
  uint64_t v1584;
  int v1585;
  uint64_t *v1586;
  uint64_t v1587;
  int v1588;
  uint64_t v1589;
  int v1590;
  uint64_t v1591;
  unint64_t v1592;
  uint64_t *v1593;
  char v1594;
  unint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  char v1599;
  int v1600;
  int v1601;
  uint64_t v1602;
  _QWORD *v1603;
  unint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  unint64_t v1607;
  unsigned int v1608;
  uint64_t v1609;
  __int16 v1610;
  unsigned int v1611;
  uint64_t v1612;
  __int16 v1613;
  unsigned int v1614;
  uint64_t v1615;
  __int16 v1616;
  unsigned int v1617;
  uint64_t *v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t *v1621;
  unint64_t v1622;
  uint64_t v1623;
  unint64_t v1624;
  uint64_t v1625;
  _QWORD *v1626;
  unint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t *v1630;
  int v1631;
  uint64_t v1632;
  unint64_t v1633;
  const char *v1634;
  int v1635;
  int v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t *v1640;
  int v1641;
  int v1642;
  int v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  unsigned __int8 **v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  unsigned __int8 **v1651;
  uint64_t v1652;
  __int16 v1653;
  int v1654;
  uint64_t v1655;
  uint64_t *v1656;
  int v1657;
  uint64_t v1658;
  uint64_t v1659;
  int v1660;
  __int16 v1661;
  int v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  int v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  unsigned __int8 **v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  _QWORD *v1676;
  unint64_t v1677;
  uint64_t v1678;
  __int16 v1679;
  uint64_t v1680;
  uint64_t v1681;
  int v1682;
  uint64_t v1683;
  llvm *v1684;
  uint64_t v1685;
  _BYTE *v1686;
  char v1687;
  void *v1688;
  uint64_t *v1689;
  uint64_t v1690;
  uint64_t v1691;
  _BYTE *v1692;
  char v1693;
  unint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  __int16 v1697;
  void *v1698;
  uint64_t *v1699;
  unsigned __int8 *v1700;
  __int16 v1701;
  uint64_t v1702;
  uint64_t *v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  int v1707;
  uint64_t v1708;
  uint64_t v1709;
  char v1710;
  int v1711;
  _BOOL4 v1713;
  uint64_t v1714;
  void **v1715;
  void **v1716;
  void **v1717;
  void **v1718;
  unint64_t v1719;
  void *v1720;
  double v1721;
  double v1722;
  void *v1723;
  uint64_t *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  _QWORD *v1728;
  int v1729;
  uint64_t v1730;
  uint64_t *v1731;
  uint64_t v1732;
  int v1733;
  uint64_t v1735;
  _QWORD *v1736;
  uint64_t v1737;
  unint64_t v1738;
  _QWORD *v1739;
  unint64_t v1740;
  unint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  __int16 v1744;
  _QWORD *v1745;
  uint64_t v1746;
  int v1747;
  uint64_t v1748;
  unsigned int *v1749;
  uint64_t *v1750;
  uint64_t *v1751;
  uint64_t *v1752;
  int v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unsigned __int8 *v1758;
  uint64_t v1759;
  llvm::detail::DoubleAPFloat *v1760;
  char v1761;
  unsigned int v1762;
  unsigned int v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  llvm *v1770;
  uint64_t v1771;
  uint64_t v1772;
  _QWORD *v1773;
  unint64_t v1774;
  uint64_t v1775;
  __int16 v1776;
  uint64_t v1777;
  uint64_t *v1778;
  uint64_t *v1779;
  uint64_t *v1780;
  uint64_t v1781;
  _QWORD *v1782;
  unint64_t v1783;
  uint64_t v1784;
  __int16 v1785;
  uint64_t v1786;
  uint64_t *v1787;
  uint64_t *v1788;
  uint64_t *v1789;
  unsigned int v1790;
  uint64_t v1791;
  uint64_t **v1792;
  uint64_t v1793;
  uint64_t **v1794;
  _QWORD *v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  llvm *v1799;
  uint64_t v1800;
  int v1801;
  uint64_t v1802;
  uint64_t *v1803;
  uint64_t *v1804;
  uint64_t *v1805;
  uint64_t v1806;
  uint64_t **v1807;
  uint64_t *v1808;
  uint64_t v1809;
  uint64_t v1810;
  unsigned __int8 *v1811;
  void **v1812;
  uint64_t v1813;
  llvm *v1814;
  uint64_t v1815;
  int v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t *v1819;
  uint64_t v1820;
  unint64_t v1821;
  _QWORD *v1822;
  unint64_t v1823;
  uint64_t v1824;
  __int16 v1825;
  uint64_t v1826;
  uint64_t *v1827;
  uint64_t *v1828;
  uint64_t *v1829;
  uint64_t v1830;
  uint64_t **v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  _QWORD *v1836;
  unint64_t v1837;
  uint64_t v1838;
  __int16 v1839;
  uint64_t v1840;
  uint64_t *v1841;
  uint64_t *v1842;
  uint64_t *v1843;
  uint64_t v1844;
  uint64_t **v1845;
  uint64_t *v1846;
  uint64_t v1847;
  uint64_t v1848;
  int v1849;
  int v1850;
  uint64_t v1851;
  __int128 v1852;
  uint64_t v1853;
  __int128 v1854;
  uint64_t v1855;
  uint64_t v1856;
  _QWORD *v1857;
  _QWORD *v1858;
  uint64_t v1859;
  uint64_t v1860;
  _QWORD *v1861;
  uint64_t v1862;
  _QWORD *v1863;
  void *v1864;
  int v1865;
  unsigned int v1866;
  uint64_t v1867;
  unsigned int v1868;
  uint64_t v1869;
  unsigned int v1870;
  unint64_t v1871;
  uint64_t *v1872;
  uint64_t v1873;
  __int16 v1874;
  uint64_t v1875;
  BOOL v1876;
  BOOL v1877;
  BOOL v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  unint64_t v1883;
  unint64_t v1884;
  uint64_t *v1885;
  uint64_t v1886;
  __int16 v1887;
  uint64_t *v1888;
  uint64_t v1889;
  uint64_t *v1890;
  unint64_t v1891;
  unint64_t v1892;
  uint64_t v1893;
  void *v1894;
  uint64_t v1895;
  _QWORD *v1896;
  unint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  void *v1900;
  uint64_t v1901;
  uint64_t *v1902;
  unint64_t v1903;
  unint64_t v1904;
  uint64_t v1905;
  void *v1906;
  uint64_t v1907;
  _QWORD *v1908;
  unint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  uint64_t v1913;
  void *v1914;
  uint64_t v1915;
  uint64_t v1916;
  unsigned int v1917;
  uint64_t v1918;
  unsigned int v1919;
  uint64_t *v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  unint64_t v1924;
  void *v1925;
  uint64_t v1927;
  int v1928;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t v1931;
  _QWORD *v1932;
  unsigned int v1933;
  unint64_t v1934;
  uint64_t v1935;
  uint64_t *v1936;
  uint64_t v1937;
  unint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t *v1941;
  unint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  uint64_t *v1949;
  unint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  unint64_t v1954;
  uint64_t v1955;
  _QWORD *v1956;
  unint64_t v1957;
  uint64_t v1958;
  unint64_t v1959;
  uint64_t *v1960;
  uint64_t v1961;
  uint64_t v1962;
  __int16 v1963;
  unint64_t v1964;
  uint64_t v1965;
  uint64_t *v1966;
  unint64_t v1967;
  int v1968;
  uint64_t v1969;
  llvm::detail::DoubleAPFloat *v1970;
  void *v1971;
  void **v1972;
  uint64_t v1973;
  llvm *v1974;
  uint64_t v1975;
  int v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  int v1980;
  uint64_t v1981;
  _QWORD *v1982;
  uint64_t v1983;
  unint64_t *v1984;
  unint64_t v1985;
  unsigned __int8 v1986;
  const char *v1987;
  unsigned __int8 v1988;
  uint64_t v1989;
  int v1990;
  unsigned int *v1991;
  uint64_t v1992;
  unsigned int *v1993;
  uint64_t *v1994;
  uint64_t v1995;
  uint64_t v1996;
  unsigned __int8 *v1997;
  int v1998;
  void *v1999;
  BOOL v2000;
  _DWORD *v2001;
  uint64_t v2002;
  int v2003;
  uint64_t v2005;
  int v2006;
  int v2007;
  uint64_t v2008;
  const char *v2009;
  unint64_t v2010;
  _BYTE *v2011;
  BOOL v2012;
  unsigned int *v2013;
  uint64_t v2014;
  _QWORD *v2015;
  _QWORD *v2016;
  uint64_t v2017;
  llvm::EVT **v2018;
  void *v2019;
  uint64_t result;
  uint64_t v2021;
  unint64_t *v2022;
  uint64_t v2023;
  unsigned int *v2024;
  uint64_t v2025;
  _QWORD *v2026;
  int v2027;
  uint64_t v2028;
  _QWORD *v2029;
  unint64_t v2030;
  uint64_t *v2031;
  uint64_t v2032;
  uint64_t v2033;
  __int16 v2034;
  unint64_t v2035;
  _QWORD *v2036;
  int v2037;
  uint64_t v2038;
  uint64_t v2039;
  __int16 v2040;
  uint64_t v2041;
  uint64_t v2042;
  __int16 v2043;
  unsigned __int8 *v2044;
  unsigned int v2045;
  unsigned int v2046;
  uint64_t v2047;
  uint64_t v2048;
  llvm *v2049;
  uint64_t v2050;
  _QWORD *v2051;
  unint64_t v2052;
  uint64_t v2053;
  __int16 v2054;
  uint64_t v2055;
  uint64_t *v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  _QWORD *v2060;
  unint64_t v2061;
  uint64_t v2062;
  __int16 v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t *v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  unint64_t v2073;
  uint64_t *v2074;
  __int16 v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t *v2078;
  uint64_t *v2079;
  uint64_t *v2080;
  uint64_t v2081;
  uint64_t **v2082;
  uint64_t v2083;
  unint64_t v2084;
  uint64_t v2085;
  unint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  unint64_t v2089;
  _QWORD *v2090;
  int v2091;
  uint64_t v2092;
  unsigned __int8 *v2093;
  unsigned int v2094;
  _QWORD *v2095;
  uint64_t v2096;
  uint64_t v2097;
  unsigned int v2098;
  _QWORD *v2099;
  uint64_t v2100;
  _QWORD *v2101;
  _QWORD *v2102;
  uint64_t v2103;
  uint64_t v2104;
  _QWORD *v2105;
  uint64_t v2106;
  uint64_t v2107;
  _QWORD *v2108;
  uint64_t v2109;
  uint64_t v2110;
  unsigned int v2111;
  _QWORD *v2112;
  uint64_t v2113;
  _QWORD *v2114;
  _QWORD *v2115;
  uint64_t v2116;
  uint64_t v2117;
  unsigned int v2118;
  _QWORD *v2119;
  uint64_t v2120;
  _QWORD *v2121;
  _QWORD *v2122;
  uint64_t v2123;
  uint64_t v2124;
  unsigned int v2125;
  _QWORD *v2126;
  uint64_t v2127;
  _QWORD *v2128;
  uint64_t v2129;
  uint64_t v2130;
  unsigned int v2131;
  _QWORD *v2132;
  _QWORD *v2133;
  unsigned int v2134;
  _QWORD *v2135;
  uint64_t v2136;
  __int128 v2137;
  uint64_t v2138;
  int v2139;
  BOOL v2140;
  int v2141;
  int v2142;
  int v2143;
  uint64_t v2144;
  void **v2145;
  char *v2146;
  unint64_t v2147;
  void **v2148;
  uint64_t v2149;
  void **v2150;
  char *v2151;
  unint64_t v2152;
  void **v2153;
  uint64_t v2154;
  uint64_t v2155;
  uint64_t v2156;
  unint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  unint64_t v2161;
  uint64_t v2162;
  uint64_t *v2163;
  unint64_t v2164;
  uint64_t v2165;
  void *v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2170;
  void *v2171;
  unsigned int v2172;
  unsigned int v2173;
  _QWORD *v2174;
  uint64_t v2175;
  unsigned int v2176;
  _QWORD *v2177;
  _QWORD *v2178;
  _QWORD *v2179;
  unint64_t v2180;
  int v2181;
  uint64_t v2182;
  _QWORD *v2183;
  _QWORD *v2184;
  llvm *v2185;
  uint64_t v2186;
  uint64_t v2187;
  int v2188;
  uint64_t v2189;
  const char *v2190;
  void *v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t v2194;
  const char *v2195;
  void *v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t v2199;
  uint64_t *v2200;
  int v2201;
  int v2202;
  int v2203;
  int i;
  _QWORD *v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  _QWORD *v2209;
  uint64_t v2210;
  unsigned __int8 *v2211;
  _QWORD *v2212;
  uint64_t v2213;
  uint64_t v2214;
  unsigned int v2215;
  _QWORD *v2216;
  uint64_t v2217;
  unsigned __int8 *v2218;
  uint64_t v2219;
  llvm *v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  int v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t *v2228;
  unint64_t v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  uint64_t *v2233;
  uint64_t v2234;
  uint64_t v2235;
  llvm *v2236;
  uint64_t v2237;
  uint64_t *v2238;
  uint64_t v2239;
  char v2240;
  void **v2241;
  uint64_t v2242;
  uint64_t v2243;
  unsigned int v2244;
  void *v2245;
  unsigned int v2246;
  int v2247;
  uint64_t v2248;
  unint64_t *v2249;
  unint64_t v2250;
  unsigned int v2251;
  const char *v2252;
  unsigned int v2253;
  uint64_t v2254;
  uint64_t v2255;
  __int16 v2256;
  unsigned int v2257;
  llvm::Type *v2258;
  int v2259;
  llvm::Type *v2260;
  int v2261;
  llvm::Type *v2262;
  int v2263;
  uint64_t *v2264;
  uint64_t v2265;
  int v2266;
  uint64_t v2267;
  uint64_t v2268;
  uint64_t v2269;
  __int16 v2270;
  const char *v2271;
  int v2272;
  uint64_t v2273;
  unsigned __int8 *v2274;
  uint64_t v2275;
  llvm *v2276;
  void *v2277;
  unint64_t v2278;
  _QWORD *v2279;
  uint64_t v2280;
  __int16 v2281;
  uint64_t v2282;
  _QWORD *v2283;
  unint64_t v2284;
  llvm **v2285;
  llvm *v2286;
  uint64_t v2287;
  uint64_t v2288;
  int v2289;
  uint64_t v2290;
  int v2291;
  uint64_t *v2292;
  uint64_t v2293;
  unint64_t v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  __int16 v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  unsigned int v2303;
  uint64_t *v2304;
  unint64_t v2305;
  unint64_t v2306;
  uint64_t v2307;
  int v2308;
  unsigned int v2309;
  uint64_t v2310;
  uint64_t *v2311;
  unint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  __int16 v2315;
  unsigned int v2316;
  unint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t *v2320;
  uint64_t v2321;
  unint64_t v2322;
  uint64_t v2323;
  __int16 v2324;
  _QWORD *v2325;
  uint64_t v2326;
  int v2327;
  uint64_t v2329;
  uint64_t v2330;
  unint64_t v2331;
  uint64_t v2332;
  void *v2333;
  uint64_t v2334;
  uint64_t *v2335;
  uint64_t v2336;
  unint64_t v2337;
  uint64_t v2338;
  __int16 v2339;
  uint64_t v2340;
  void *v2341;
  uint64_t v2342;
  uint64_t *v2343;
  uint64_t v2344;
  unint64_t v2345;
  uint64_t v2346;
  __int16 v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t *v2353;
  int v2354;
  int v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t *v2359;
  uint64_t v2360;
  unint64_t v2361;
  uint64_t v2362;
  __int16 v2363;
  uint64_t v2364;
  int v2365;
  uint64_t v2366;
  unsigned int v2367;
  unint64_t v2368;
  double v2369;
  uint64_t v2370;
  int v2371;
  int v2372;
  unint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  unint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  __int16 v2381;
  void *v2382;
  uint64_t v2383;
  llvm *v2384;
  uint64_t v2385;
  _QWORD *v2386;
  uint64_t v2387;
  uint64_t v2388;
  _QWORD *v2389;
  unint64_t v2390;
  uint64_t v2391;
  _QWORD *v2392;
  unint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  unint64_t v2396;
  uint64_t v2397;
  uint64_t *v2398;
  unint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t *v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  unsigned int v2408;
  uint64_t v2409;
  uint64_t *v2410;
  unint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  unint64_t v2414;
  uint64_t *v2415;
  unsigned int v2416;
  unsigned int v2417;
  uint64_t v2418;
  uint64_t *v2419;
  uint64_t v2420;
  uint64_t v2421;
  unint64_t v2422;
  unsigned int v2423;
  uint64_t v2424;
  uint64_t *v2425;
  unint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  unint64_t v2429;
  uint64_t *v2430;
  unsigned int v2431;
  unsigned int v2432;
  uint64_t v2433;
  uint64_t *v2434;
  uint64_t v2435;
  uint64_t v2436;
  unint64_t v2437;
  int v2438;
  uint64_t v2439;
  uint64_t *v2440;
  int v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t *v2444;
  unsigned int v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  unint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  __int16 v2453;
  unint64_t v2454;
  int v2455;
  unsigned int v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  unint64_t v2460;
  uint64_t v2461;
  llvm *v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  __int16 v2466;
  uint64_t v2467;
  uint64_t v2468;
  int v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t *v2472;
  int v2473;
  _QWORD *v2474;
  const char *v2475;
  uint64_t v2476;
  llvm *v2477;
  uint64_t v2478;
  uint64_t v2479;
  int v2480;
  uint64_t v2481;
  uint64_t v2482;
  unsigned int v2483;
  uint64_t v2484;
  uint64_t *v2485;
  unint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  __int16 v2489;
  unsigned int v2490;
  unint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  __int16 v2495;
  uint64_t *v2496;
  int v2497;
  uint64_t v2498;
  uint64_t v2499;
  unint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  _QWORD *v2503;
  unint64_t v2504;
  unsigned int v2505;
  unsigned int v2506;
  _QWORD *v2507;
  int v2508;
  int v2509;
  int v2510;
  _BOOL4 v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  int v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  int v2519;
  uint64_t v2520;
  _BOOL4 v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t *v2524;
  int v2525;
  uint64_t v2526;
  unsigned __int8 v2527;
  const char *v2528;
  unint64_t v2529;
  uint64_t *v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t *v2534;
  unint64_t v2535;
  unint64_t v2536;
  uint64_t v2537;
  void *v2538;
  uint64_t v2539;
  uint64_t *v2540;
  unint64_t v2541;
  unint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  unint64_t v2546;
  uint64_t v2547;
  __int16 v2548;
  uint64_t *v2549;
  unint64_t v2550;
  unint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t *v2555;
  unint64_t v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  unint64_t v2561;
  uint64_t v2562;
  __int16 v2563;
  uint64_t *v2564;
  uint64_t v2565;
  uint64_t *v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t *v2573;
  int v2574;
  int v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  unsigned int v2579;
  BOOL v2580;
  uint64_t v2582;
  uint64_t v2583;
  uint64_t v2584;
  uint64_t v2585;
  _QWORD *v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  _QWORD *v2590;
  uint64_t v2591;
  uint64_t v2592;
  __int16 v2593;
  uint64_t v2594;
  int v2595;
  uint64_t v2596;
  _QWORD *v2597;
  uint64_t v2598;
  uint64_t v2599;
  __int16 v2600;
  uint64_t v2601;
  uint64_t *v2602;
  int v2603;
  uint64_t v2604;
  _QWORD *v2605;
  uint64_t v2606;
  uint64_t v2607;
  __int16 v2608;
  uint64_t v2609;
  uint64_t *v2610;
  int v2611;
  int v2612;
  _QWORD *v2613;
  unsigned int v2614;
  unsigned int v2615;
  _QWORD *v2616;
  unsigned int v2617;
  unsigned int v2618;
  _QWORD *v2619;
  unsigned int v2620;
  unsigned int v2621;
  _QWORD *v2622;
  int v2623;
  int v2624;
  int v2625;
  int v2626;
  unint64_t v2627;
  uint64_t v2628;
  uint64_t *v2629;
  unint64_t v2630;
  unint64_t v2631;
  uint64_t v2632;
  _QWORD *v2633;
  unint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t *v2637;
  uint64_t v2638;
  unsigned int v2639;
  unint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  unint64_t v2643;
  uint64_t *v2644;
  unint64_t v2645;
  uint64_t v2646;
  uint64_t v2647;
  __int16 v2648;
  uint64_t v2649;
  uint64_t *v2650;
  unint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  __int16 v2655;
  uint64_t v2656;
  unint64_t v2657;
  uint64_t *v2658;
  unint64_t v2659;
  unint64_t v2660;
  uint64_t v2661;
  _QWORD *v2662;
  unint64_t v2663;
  uint64_t v2664;
  __int16 v2665;
  uint64_t v2666;
  uint64_t *v2667;
  unsigned int v2668;
  unsigned int v2669;
  uint64_t v2670;
  _QWORD *v2671;
  unint64_t v2672;
  uint64_t v2673;
  __int16 v2674;
  uint64_t v2675;
  uint64_t *v2676;
  unint64_t v2677;
  unint64_t v2678;
  uint64_t v2679;
  _QWORD *v2680;
  unint64_t v2681;
  uint64_t v2682;
  __int16 v2683;
  uint64_t v2684;
  uint64_t *v2685;
  __int16 v2686;
  unint64_t v2687;
  unsigned int v2688;
  unint64_t v2689;
  uint64_t v2690;
  uint64_t v2691;
  unint64_t v2692;
  unsigned int v2693;
  uint64_t *v2694;
  uint64_t v2695;
  __int16 v2696;
  uint64_t v2697;
  uint64_t v2698;
  unint64_t v2699;
  uint64_t *v2700;
  unint64_t v2701;
  __int16 v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t *v2705;
  uint64_t v2706;
  __int16 v2707;
  unsigned int v2708;
  unint64_t v2709;
  uint64_t v2710;
  uint64_t v2711;
  unint64_t v2712;
  uint64_t *v2713;
  __int16 v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t *v2717;
  int v2718;
  uint64_t v2719;
  uint64_t *v2720;
  int v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  __int16 v2726;
  uint64_t v2727;
  uint64_t v2728;
  uint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  unint64_t v2732;
  uint64_t v2733;
  uint64_t v2734;
  unint64_t v2735;
  uint64_t *v2736;
  __int16 v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t *v2740;
  int v2741;
  uint64_t v2742;
  uint64_t v2743;
  uint64_t v2744;
  unint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  __int16 v2749;
  uint64_t *v2750;
  unint64_t v2751;
  unint64_t v2752;
  uint64_t v2753;
  _QWORD *v2754;
  unint64_t v2755;
  uint64_t v2756;
  uint64_t v2757;
  unsigned int v2758;
  uint64_t v2759;
  uint64_t v2760;
  llvm *v2761;
  unint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2765;
  __int16 v2766;
  unint64_t v2767;
  uint64_t *v2768;
  unint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  __int16 v2772;
  uint64_t *v2773;
  int v2774;
  uint64_t v2775;
  uint64_t v2776;
  uint64_t *v2777;
  unint64_t v2778;
  unint64_t v2779;
  uint64_t *v2780;
  unsigned int v2781;
  uint64_t *v2782;
  unint64_t v2783;
  unint64_t v2784;
  uint64_t *v2785;
  unint64_t v2786;
  unint64_t v2787;
  uint64_t *v2788;
  uint64_t v2789;
  uint64_t *v2790;
  unint64_t v2791;
  uint64_t v2792;
  unint64_t v2793;
  uint64_t *v2794;
  uint64_t v2795;
  __int16 v2796;
  uint64_t v2797;
  uint64_t v2798;
  uint64_t *v2799;
  int v2800;
  int v2801;
  uint64_t v2802;
  uint64_t *v2803;
  uint64_t v2804;
  uint64_t v2805;
  uint64_t *v2806;
  uint64_t v2807;
  uint64_t v2808;
  uint64_t v2809;
  uint64_t *v2810;
  int v2811;
  int v2812;
  uint64_t v2813;
  uint64_t *v2814;
  uint64_t v2815;
  uint64_t v2816;
  uint64_t *v2817;
  uint64_t v2818;
  uint64_t v2819;
  __int16 v2820;
  uint64_t v2821;
  uint64_t v2822;
  uint64_t *v2823;
  unint64_t v2824;
  unint64_t v2825;
  uint64_t v2826;
  _QWORD *v2827;
  unint64_t v2828;
  uint64_t v2829;
  __int16 v2830;
  uint64_t v2831;
  uint64_t *v2832;
  int v2833;
  int v2834;
  _QWORD *v2835;
  int v2836;
  uint64_t *v2837;
  unsigned int v2838;
  unint64_t v2839;
  uint64_t v2840;
  uint64_t v2841;
  uint64_t *v2842;
  unint64_t v2843;
  unint64_t v2844;
  uint64_t *v2845;
  unsigned int v2846;
  int v2847;
  uint64_t v2848;
  uint64_t *v2849;
  uint64_t v2850;
  unint64_t v2851;
  uint64_t *v2852;
  unsigned int v2853;
  unsigned int v2854;
  __int16 v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t *v2858;
  int v2859;
  int v2860;
  uint64_t *v2861;
  unint64_t v2862;
  unint64_t v2863;
  uint64_t *v2864;
  unint64_t v2865;
  unint64_t v2866;
  uint64_t *v2867;
  uint64_t v2868;
  uint64_t v2869;
  __int16 v2870;
  uint64_t v2871;
  uint64_t v2872;
  uint64_t *v2873;
  uint64_t v2874;
  uint64_t v2875;
  uint64_t *v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t *v2879;
  uint64_t v2880;
  uint64_t v2881;
  __int16 v2882;
  uint64_t v2883;
  uint64_t v2884;
  unint64_t v2885;
  uint64_t *v2886;
  __int16 v2887;
  uint64_t v2888;
  uint64_t v2889;
  uint64_t *v2890;
  unint64_t v2891;
  unint64_t v2892;
  uint64_t v2893;
  _QWORD *v2894;
  unint64_t v2895;
  uint64_t v2896;
  __int16 v2897;
  uint64_t v2898;
  uint64_t *v2899;
  int v2900;
  int v2901;
  _QWORD *v2902;
  int v2903;
  uint64_t *v2904;
  unsigned int v2905;
  unint64_t v2906;
  uint64_t v2907;
  uint64_t *v2908;
  unsigned int v2909;
  uint64_t v2910;
  llvm *v2911;
  uint64_t v2912;
  unsigned int v2913;
  unsigned __int8 v2914;
  uint64_t v2915;
  unint64_t v2916;
  uint64_t v2917;
  uint64_t v2918;
  uint64_t v2919;
  __int16 v2920;
  uint64_t *v2921;
  unint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  _QWORD *v2925;
  unint64_t v2926;
  uint64_t v2927;
  __int16 v2928;
  uint64_t v2929;
  uint64_t *v2930;
  unint64_t v2931;
  unint64_t v2932;
  _QWORD *v2933;
  unint64_t v2934;
  uint64_t v2935;
  __int16 v2936;
  uint64_t v2937;
  uint64_t *v2938;
  unint64_t v2939;
  unint64_t v2940;
  _QWORD *v2941;
  unint64_t v2942;
  uint64_t v2943;
  __int16 v2944;
  uint64_t v2945;
  uint64_t *v2946;
  unint64_t v2947;
  unint64_t v2948;
  uint64_t v2949;
  _QWORD *v2950;
  unint64_t v2951;
  uint64_t v2952;
  uint64_t v2953;
  uint64_t *v2954;
  unint64_t v2955;
  uint64_t v2956;
  uint64_t v2957;
  uint64_t v2958;
  unsigned int v2959;
  uint64_t *v2960;
  unsigned int v2961;
  unint64_t v2962;
  uint64_t v2963;
  uint64_t v2964;
  __int16 v2965;
  uint64_t *v2966;
  uint64_t v2967;
  unsigned int v2968;
  unint64_t v2969;
  uint64_t v2970;
  uint64_t v2971;
  uint64_t *v2972;
  unint64_t v2973;
  uint64_t v2974;
  uint64_t v2975;
  uint64_t v2976;
  __int16 v2977;
  unsigned __int8 v2978;
  uint64_t v2979;
  uint64_t v2980;
  unint64_t v2981;
  uint64_t v2982;
  llvm *v2983;
  uint64_t v2984;
  int v2985;
  uint64_t v2986;
  uint64_t v2987;
  unint64_t v2988;
  uint64_t v2989;
  uint64_t v2990;
  __int16 v2991;
  uint64_t v2992;
  uint64_t *v2993;
  int v2994;
  uint64_t v2995;
  unsigned int v2996;
  uint64_t v2997;
  _QWORD *v2998;
  unint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  uint64_t *v3002;
  unsigned int v3003;
  unint64_t v3004;
  uint64_t v3005;
  unint64_t v3006;
  _QWORD *v3007;
  __int16 v3008;
  uint64_t v3009;
  uint64_t *v3010;
  unint64_t v3011;
  unint64_t v3012;
  uint64_t v3013;
  _QWORD *v3014;
  unint64_t v3015;
  uint64_t v3016;
  uint64_t v3017;
  unint64_t v3018;
  uint64_t *v3019;
  uint64_t v3020;
  unsigned int v3021;
  unint64_t v3022;
  uint64_t v3023;
  uint64_t v3024;
  unsigned int v3025;
  unsigned __int8 *v3026;
  uint64_t v3027;
  uint64_t v3028;
  llvm::detail::DoubleAPFloat *v3029;
  void *v3030;
  void **v3031;
  uint64_t v3032;
  llvm *v3033;
  uint64_t v3034;
  int v3035;
  uint64_t v3036;
  uint64_t v3037;
  _QWORD *v3038;
  uint64_t v3039;
  _QWORD *v3040;
  _QWORD *v3041;
  uint64_t **v3042;
  uint64_t v3043;
  _QWORD *v3044;
  uint64_t v3045;
  uint64_t *v3046;
  _QWORD *v3047;
  unint64_t v3048;
  uint64_t v3049;
  uint64_t v3050;
  uint64_t *v3051;
  int v3052;
  int v3054;
  uint64_t v3055;
  uint64_t v3057;
  uint64_t *v3058;
  int v3059;
  unsigned int v3060;
  uint64_t v3061;
  __int16 v3062;
  uint64_t *v3063;
  unint64_t v3064;
  unint64_t v3065;
  uint64_t v3066;
  _QWORD *v3067;
  unint64_t v3068;
  uint64_t v3069;
  uint64_t *v3070;
  unint64_t v3071;
  uint64_t v3072;
  uint64_t *v3073;
  unint64_t v3074;
  uint64_t v3075;
  unint64_t v3076;
  uint64_t v3077;
  _QWORD *v3078;
  unint64_t v3079;
  uint64_t v3080;
  uint64_t v3081;
  int v3082;
  unint64_t v3083;
  size_t v3084;
  void *v3085;
  unint64_t v3086;
  size_t v3087;
  void *v3088;
  uint64_t *v3089;
  uint64_t v3090;
  uint64_t v3091;
  unint64_t v3092;
  uint64_t v3093;
  unint64_t v3094;
  uint64_t v3095;
  uint64_t v3096;
  __int16 v3097;
  _QWORD *v3098;
  unint64_t v3099;
  unint64_t v3100;
  _QWORD *v3101;
  unint64_t v3102;
  unint64_t v3103;
  unint64_t v3104;
  unint64_t v3105;
  _QWORD *v3106;
  uint64_t v3107;
  uint64_t v3108;
  _QWORD *v3109;
  uint64_t v3110;
  uint64_t v3111;
  uint64_t v3112;
  __int16 v3113;
  uint64_t v3114;
  uint64_t *v3115;
  unint64_t v3116;
  uint64_t v3117;
  __int16 v3118;
  uint64_t v3119;
  uint64_t v3120;
  uint64_t *v3121;
  unint64_t v3122;
  uint64_t v3123;
  __int16 v3124;
  uint64_t v3125;
  uint64_t v3126;
  uint64_t *v3127;
  uint64_t v3128;
  __int16 v3129;
  int v3130;
  uint64_t v3131;
  uint64_t v3132;
  uint64_t *v3133;
  __int16 v3134;
  int v3135;
  uint64_t v3136;
  uint64_t v3137;
  int v3138;
  uint64_t v3139;
  unint64_t v3140;
  _QWORD *v3141;
  uint64_t v3142;
  uint64_t v3143;
  _QWORD *v3144;
  unint64_t v3145;
  uint64_t v3146;
  uint64_t v3147;
  unint64_t v3148;
  uint64_t v3149;
  _QWORD *v3150;
  unint64_t v3151;
  uint64_t v3152;
  __int16 v3153;
  uint64_t v3154;
  void *v3155;
  uint64_t v3156;
  _QWORD *v3157;
  uint64_t v3158;
  _QWORD *v3159;
  unint64_t v3160;
  uint64_t v3161;
  __int16 v3162;
  uint64_t v3163;
  uint64_t *v3164;
  unint64_t v3165;
  unint64_t v3166;
  uint64_t v3167;
  _QWORD *v3168;
  unint64_t v3169;
  uint64_t v3170;
  __int16 v3171;
  uint64_t v3172;
  uint64_t *v3173;
  uint64_t v3174;
  __int16 v3175;
  unsigned int v3176;
  unint64_t v3177;
  uint64_t v3178;
  uint64_t v3179;
  unint64_t v3180;
  uint64_t *v3181;
  unint64_t v3182;
  __int16 v3183;
  uint64_t v3184;
  uint64_t v3185;
  uint64_t *v3186;
  __int16 v3187;
  unsigned int v3188;
  unint64_t v3189;
  uint64_t v3190;
  uint64_t v3191;
  unint64_t v3192;
  uint64_t *v3193;
  uint64_t v3194;
  __int16 v3195;
  int v3196;
  uint64_t v3197;
  uint64_t v3198;
  uint64_t *v3199;
  unsigned int v3200;
  unint64_t v3201;
  uint64_t v3202;
  _QWORD *v3203;
  unint64_t v3204;
  uint64_t v3205;
  __int16 v3206;
  uint64_t v3207;
  uint64_t *v3208;
  unsigned int v3209;
  uint64_t v3210;
  uint64_t v3211;
  _QWORD *v3212;
  unint64_t v3213;
  uint64_t v3214;
  uint64_t v3215;
  unint64_t v3216;
  unint64_t v3217;
  uint64_t *v3218;
  uint64_t v3219;
  unint64_t v3220;
  uint64_t v3221;
  uint64_t v3222;
  uint64_t *v3223;
  unint64_t v3224;
  unsigned int v3225;
  unint64_t v3226;
  uint64_t v3227;
  uint64_t v3228;
  __int16 v3229;
  uint64_t v3230;
  int v3231;
  uint64_t *v3232;
  uint64_t v3233;
  uint64_t v3234;
  int v3235;
  _QWORD *v3236;
  unint64_t v3237;
  uint64_t v3238;
  unint64_t v3239;
  uint64_t v3240;
  uint64_t v3241;
  uint64_t v3242;
  uint64_t v3243;
  uint64_t v3244;
  uint64_t *v3245;
  int v3246;
  int v3247;
  uint64_t v3248;
  uint64_t v3249;
  uint64_t *v3250;
  int v3251;
  int v3252;
  uint64_t *v3253;
  uint64_t v3254;
  unsigned int v3255;
  const char *v3256;
  uint64_t *v3257;
  unint64_t v3258;
  unint64_t v3259;
  uint64_t v3260;
  uint64_t v3261;
  uint64_t *v3262;
  _QWORD *v3263;
  unint64_t v3264;
  uint64_t v3265;
  uint64_t v3266;
  uint64_t *v3267;
  unsigned int v3268;
  unint64_t v3269;
  uint64_t v3270;
  void *v3271;
  uint64_t v3272;
  int v3273;
  void *v3274;
  uint64_t v3275;
  uint64_t v3276;
  uint64_t v3277;
  uint64_t v3278;
  _QWORD *v3279;
  unsigned int v3280;
  void *v3281;
  unsigned int v3282;
  char v3283;
  uint64_t v3284;
  unint64_t v3285;
  uint64_t v3286;
  uint64_t v3287;
  __int16 v3288;
  unsigned __int8 v3289;
  const char *v3290;
  unsigned __int8 v3291;
  unsigned __int8 v3292;
  const char *v3293;
  unsigned __int8 v3294;
  unint64_t v3295;
  unint64_t v3296;
  uint64_t v3297;
  uint64_t v3298;
  __int16 v3299;
  int v3300;
  unsigned int v3301;
  uint64_t v3302;
  uint64_t v3303;
  void *v3304;
  uint64_t v3305;
  llvm *v3306;
  uint64_t v3307;
  uint64_t v3308;
  uint64_t v3309;
  uint64_t *v3310;
  unsigned int v3311;
  uint64_t v3312;
  uint64_t v3313;
  uint64_t v3314;
  uint64_t *v3315;
  unint64_t v3316;
  uint64_t v3317;
  uint64_t v3318;
  uint64_t v3319;
  unint64_t v3320;
  uint64_t v3321;
  uint64_t v3322;
  uint64_t *v3323;
  unint64_t v3324;
  unint64_t v3325;
  uint64_t v3326;
  unsigned int v3327;
  uint64_t v3328;
  unsigned int v3329;
  char v3330;
  uint64_t v3331;
  unint64_t v3332;
  unint64_t v3333;
  uint64_t v3334;
  uint64_t v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t *v3338;
  int v3339;
  uint64_t v3340;
  uint64_t v3341;
  uint64_t v3342;
  unint64_t v3343;
  uint64_t v3344;
  int v3345;
  uint64_t v3346;
  _QWORD *v3347;
  _QWORD *v3348;
  uint64_t v3349;
  const char *v3350;
  uint64_t v3351;
  uint64_t v3352;
  int v3353;
  int v3354;
  uint64_t v3355;
  uint64_t v3356;
  int v3357;
  uint64_t v3358;
  uint64_t v3359;
  uint64_t v3360;
  uint64_t *v3361;
  unint64_t v3362;
  uint64_t v3363;
  uint64_t v3364;
  uint64_t *v3365;
  int v3366;
  uint64_t v3367;
  uint64_t v3368;
  uint64_t v3369;
  uint64_t v3370;
  unsigned int v3371;
  const char *v3372;
  unsigned int v3373;
  void *v3374;
  unsigned int v3375;
  char v3376;
  uint64_t v3377;
  unint64_t v3378;
  uint64_t v3379;
  int v3380;
  uint64_t v3381;
  _QWORD *v3382;
  _QWORD *v3383;
  uint64_t v3384;
  const char *v3385;
  uint64_t v3386;
  uint64_t v3387;
  uint64_t v3388;
  __int16 v3389;
  char v3390;
  uint64_t j;
  void **v3392;
  void *v3393;
  void *v3394;
  uint64_t *v3395;
  unsigned int v3396;
  unint64_t v3397;
  uint64_t v3398;
  uint64_t *v3399;
  uint64_t v3400;
  unint64_t v3401;
  uint64_t v3402;
  __int16 v3403;
  uint64_t *v3404;
  unsigned int v3405;
  uint64_t v3406;
  unsigned int v3407;
  uint64_t v3408;
  unsigned __int8 v3409;
  const char *v3410;
  unsigned __int8 v3411;
  uint64_t v3412;
  uint64_t v3413;
  unint64_t v3414;
  uint64_t *v3415;
  uint64_t v3416;
  uint64_t v3417;
  __int16 v3418;
  uint64_t v3419;
  uint64_t v3420;
  unsigned int v3421;
  uint64_t v3422;
  uint64_t v3423;
  __int16 v3424;
  uint64_t v3425;
  unsigned int v3426;
  uint64_t v3427;
  uint64_t v3428;
  __int16 v3429;
  int v3430;
  int v3431;
  char *v3432;
  uint64_t v3433;
  unint64_t v3434;
  int v3435;
  __int16 v3436;
  uint64_t v3437;
  unint64_t v3438;
  uint64_t v3439;
  uint64_t *v3440;
  uint64_t v3441;
  _QWORD *v3442;
  uint64_t v3443;
  char v3444;
  int v3445;
  _QWORD *v3446;
  uint64_t v3447;
  uint64_t v3448;
  unint64_t v3449;
  llvm *v3450;
  __int128 v3451;
  __int128 v3452;
  uint64_t v3453;
  unint64_t v3454;
  uint64_t v3455;
  unsigned int v3456;
  uint64_t v3457;
  unint64_t v3458;
  uint64_t v3459;
  _BOOL4 v3460;
  uint64_t v3461;
  unsigned __int8 v3462;
  uint64_t v3463;
  unint64_t v3464;
  unint64_t v3465;
  uint64_t v3466;
  uint64_t v3467;
  unint64_t v3468;
  uint64_t v3469;
  int v3470;
  uint64_t v3471;
  uint64_t v3472;
  uint64_t v3473;
  uint64_t v3474;
  uint64_t v3475;
  unint64_t v3476;
  uint64_t v3477;
  _QWORD *v3478;
  uint64_t v3479;
  uint64_t v3480;
  unint64_t v3481;
  uint64_t v3482;
  uint64_t v3483;
  llvm *v3484;
  int v3485;
  unint64_t v3486;
  llvm *v3487;
  unint64_t v3488;
  uint64_t v3489;
  llvm *v3490;
  uint64_t v3491;
  int v3492;
  unint64_t v3493;
  int v3494;
  int v3495;
  unint64_t v3496;
  uint64_t v3497;
  uint64_t v3498;
  uint64_t v3499;
  unint64_t v3500;
  unint64_t v3501;
  int v3502;
  unint64_t v3503;
  uint64_t v3504;
  uint64_t v3505;
  uint64_t v3506;
  uint64_t *v3507;
  uint64_t v3508;
  uint64_t v3509;
  uint64_t v3510;
  _QWORD *v3511;
  uint64_t v3512;
  uint64_t v3513;
  unint64_t v3514;
  int v3515;
  uint64_t v3516;
  uint64_t *v3517;
  __int128 v3518;
  unint64_t v3519;
  unint64_t v3520;
  uint64_t v3521;
  uint64_t *v3522;
  int v3523;
  uint64_t v3524;
  unsigned int v3525;
  int v3526;
  __int128 v3527;
  int v3528;
  llvm *v3529;
  uint64_t v3530;
  uint64_t v3531;
  uint64_t v3532;
  uint64_t v3533;
  __int128 v3534;
  __int128 v3535;
  unsigned int v3536;
  int v3537;
  uint64_t v3538;
  uint64_t v3539;
  uint64_t *v3540;
  uint64_t *v3541;
  unint64_t v3542;
  uint64_t *v3543;
  uint64_t *v3544;
  unint64_t v3545;
  uint64_t v3546;
  uint64_t *v3547;
  __int128 v3548;
  _QWORD *v3549;
  __int128 v3550;
  unint64_t v3551;
  uint64_t v3552;
  uint64_t v3553;
  uint64_t v3554;
  uint64_t v3555;
  unint64_t v3556;
  unsigned __int8 *v3557;
  int v3558;
  void *v3559[2];
  char v3560;
  void *v3561;
  __int128 v3562;
  uint64_t v3563;
  uint64_t v3564;
  void *v3565[2];
  char v3566;
  void *v3567;
  __int128 v3568;
  uint64_t v3569;
  uint64_t v3570;
  unsigned __int8 *v3571;
  int v3572;
  unsigned __int8 *v3573;
  int v3574;
  unsigned __int8 *v3575;
  int v3576;
  unsigned __int8 *v3577;
  int v3578;
  void *v3579[2];
  char v3580;
  void *__p;
  __int128 v3582;
  uint64_t v3583;
  uint64_t v3584;
  unsigned int v3585;
  unsigned __int8 *v3586;
  int v3587;
  unsigned int *v3588;
  int v3589;
  __int128 v3590;
  llvm *v3591;
  uint64_t v3592;
  void *v3593[2];
  void **v3594;
  uint64_t v3595;
  uint64_t *v3596;
  unint64_t v3597;
  const char *v3598;
  uint64_t v3599;
  _QWORD *v3600;
  uint64_t v3601;
  void *v3602;
  uint64_t v3603;
  _BYTE v3604[256];
  char v3605;
  int v3606;
  uint64_t v3607;
  void *v3608[2];
  void **v3609;
  int v3610;
  unsigned __int8 v3611;
  int v3612;
  unsigned __int8 v3613;
  unsigned int v3614;
  char v3615;
  unsigned int v3616;
  char v3617;
  int v3618;
  int v3619;
  char v3620;
  unsigned __int8 v3621;
  unsigned __int8 v3622;
  __int128 v3623;
  _BYTE v3624[64];
  unsigned __int8 *v3625;
  uint64_t v3626;
  _QWORD v3627[4];

  v9 = a2;
  v10 = a1;
  v3627[2] = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 **)(a2 + 64);
  v3588 = (unsigned int *)v11;
  if (v11)
    a1 = (_QWORD *)llvm::MetadataTracking::track((uint64_t)&v3588, v11, 2);
  v12 = *(_DWORD *)(v9 + 60);
  v3589 = v12;
  v13 = (const char *)*(unsigned __int16 *)(v9 + 24);
  if (*(unsigned __int16 *)(v9 + 24) > 0xF5u)
  {
    v3552 = a3;
    switch(*(_WORD *)(v9 + 24))
    {
      case 0x18E:
      case 0x191:
      case 0x192:
      case 0x193:
      case 0x194:
      case 0x195:
      case 0x196:
      case 0x197:
      case 0x198:
      case 0x199:
      case 0x19A:
      case 0x19B:
      case 0x19C:
      case 0x19D:
      case 0x19E:
      case 0x19F:
      case 0x1A0:
        v14 = *(_QWORD *)(v9 + 32);
        v15 = *(_QWORD *)(v14 + 40);
        if (*(_WORD *)(v15 + 24) != 177)
          goto LABEL_2116;
        v16 = *(unsigned int *)(v14 + 48);
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 40) + 344);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 336))(v17);
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 16);
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 336))(v17);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 56))(v20, v19);
        if (v21)
        {
          v22 = (v21 - 1) | (((unint64_t)v21 - 1) >> 1);
          v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
          v24 = (v23 | (v23 >> 8) | ((v23 | (v23 >> 8)) >> 16)) + 1;
        }
        else
        {
          v24 = 0;
        }
        v116 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40);
        v117 = *(unsigned __int16 *)(v116 + 24);
        if (v117 != 35 && v117 != 11)
          goto LABEL_2116;
        v119 = *(_QWORD *)(v116 + 80);
        v120 = (uint64_t *)(v119 + 24);
        if (*(_DWORD *)(v119 + 32) >= 0x41u)
          v120 = (uint64_t *)*v120;
        v121 = *v120;
        v122 = *(_QWORD *)(v15 + 40) + 16 * v16;
        v124 = *(void **)v122;
        v123 = *(_DWORD **)(v122 + 8);
        v3593[0] = v124;
        v3593[1] = v123;
        if ((_BYTE)v124)
        {
          if (v124 - 15 < 0x9C)
            goto LABEL_2116;
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v3593);
        }
        else
        {
          if ((v123[2] & 0xFE) == 0x12)
            goto LABEL_2116;
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3593);
        }
        v177 = ExtendedSizeInBits;
        v178 = __clz(v24);
        if ((_DWORD)v126 == 1)
        if (v177 >= (v121 - v178 + 63))
        {
          v179 = sub_1C4914624(**(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), v121, v3552, 0);
          if (v179)
          {
            v181 = *(uint64_t **)v3552;
            v3593[0] = v179;
            v3593[1] = v180;
            sub_1C5C5B0B4(v181, v15, (uint64_t *)v3593, 1, 1);
          }
        }
        goto LABEL_2116;
      case 0x18F:
      case 0x190:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
        goto LABEL_2116;
      case 0x1A1:
        v501 = *(uint64_t **)(v9 + 40);
        v502 = **(_QWORD **)(v9 + 32);
        v339 = *v501;
        v28 = v501[1];
        v503 = *(unsigned __int16 *)(v502 + 24);
        if (v503 != 36 && v503 != 12)
        {
          v36 = *(_WORD *)(v9 + 72);
          v33 = *(_QWORD **)(a3 + 16);
          if (!(v36 & 0x80 | *(_WORD *)(*v33 + 1020) & 1))
            goto LABEL_2116;
          if (v503 == 224)
          {
            v1097 = *(uint64_t **)(v502 + 32);
            v32 = *v1097;
            v34 = v1097[1];
            v896 = 418;
            goto LABEL_1181;
          }
          if (v503 != 417)
            goto LABEL_2116;
          v444 = *(_DWORD **)(v502 + 32);
          goto LABEL_789;
        }
        v505 = *(_QWORD *)(v502 + 80);
        v506 = *(_QWORD *)(v505 + 32);
        if ((_UNKNOWN *)v506 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v505 + 32));
        }
        else
        {
          v3593[1] = *(void **)(v505 + 32);
          if ((*(_DWORD *)(v506 + 8) + 64) >= 0x80)
            v3594 = (void **)operator new[]();
          v507 = *(_BYTE *)(v505 + 52);
          v508 = v507 & 7;
          BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v507 & 0xF;
          LODWORD(v3595) = *(_DWORD *)(v505 + 48);
          v510 = (v507 & 6) != 0 && v508 != 3;
          if (v508 == 1 || v510)
          {
            v512 = *((unsigned int *)v3593[1] + 2);
            if ((v512 - 64) <= 0xFFFFFF7F)
              v513 = v3594;
            else
              v513 = (void **)&v3594;
            v516 = *(void ***)(v505 + 40);
            v515 = (void **)(v505 + 40);
            v514 = v516;
            if ((*((_DWORD *)*(v515 - 1) + 2) - 64) >= 0xFFFFFF80)
              v514 = v515;
            if (v512 <= 0xFFFFFFBF)
            {
              v517 = (unint64_t)(v512 + 64) >> 6;
              do
              {
                v518 = *v514++;
                *v513++ = v518;
                --v517;
              }
              while (v517);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, v3608);
        v519 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
        *(_QWORD *)&v3590 = sub_1C5D404C4(*(_QWORD *)(v3552 + 16), (const llvm::APInt *)&v3588, v339, v28, 0, 1.0 / v519);
        *((_QWORD *)&v3590 + 1) = v520;
        v400 = v3593[1];
        if (v3593[1] != &unk_1C866F1C0)
          goto LABEL_591;
        goto LABEL_3200;
      case 0x1A2:
        v563 = *(uint64_t **)(v9 + 32);
        v564 = *v563;
        v565 = *(unsigned __int16 *)(*v563 + 24);
        if (v565 == 36 || v565 == 12)
        {
          v567 = *(_QWORD *)(v564 + 80);
          v549 = (const llvm::detail::DoubleAPFloat *)(v567 + 32);
          v568 = *(_QWORD *)(v567 + 32);
          if ((_UNKNOWN *)v568 == &unk_1C866F1C0)
            goto LABEL_3199;
          v3593[1] = *(void **)(v567 + 32);
          if ((*(_DWORD *)(v568 + 8) + 64) >= 0x80)
            v3594 = (void **)operator new[]();
          v569 = *(_BYTE *)(v567 + 52);
          v570 = v569 & 7;
          BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v569 & 0xF;
          LODWORD(v3595) = *(_DWORD *)(v567 + 48);
          v572 = (v569 & 6) != 0 && v570 != 3;
          if (v570 == 1 || v572)
          {
            v574 = *((unsigned int *)v3593[1] + 2);
            if ((v574 - 64) <= 0xFFFFFF7F)
              v575 = v3594;
            else
              v575 = (void **)&v3594;
            v578 = *(void ***)(v567 + 40);
            v577 = (void **)(v567 + 40);
            v576 = v578;
            if ((*((_DWORD *)*(v577 - 1) + 2) - 64) >= 0xFFFFFF80)
              v576 = v577;
            if (v574 <= 0xFFFFFFBF)
            {
              v579 = (unint64_t)(v574 + 64) >> 6;
              do
              {
                v580 = *v576++;
                *v575++ = v580;
                --v579;
              }
              while (v579);
            }
          }
          goto LABEL_590;
        }
        if (**(_BYTE **)(v9 + 40) == 9)
        {
          v733 = v563[1];
          v734 = *(_WORD *)(v9 + 72);
          if (v565 == 212)
          {
            v735 = *(_QWORD *)(v564 + 32);
            v736 = *(uint64_t **)v735;
            v737 = v733 & 0xFFFFFFFF00000000 | *(unsigned int *)(v735 + 8);
            v738 = a3;
          }
          else
          {
            v738 = a3;
            v989 = *(_QWORD *)(a3 + 16);
            v990 = *(_QWORD *)(v989 + 832);
            v991 = v990 ? *(_WORD *)(v990 + 8) : 0;
            v736 = sub_1C5D52060(v989, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, v564, v733, v991);
            v737 = v733 & 0xFFFFFFFF00000000 | v1253;
          }
          v1254 = sub_1C5D52060(*(_QWORD *)(v738 + 16), 418, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v736, v737, v734);
          v1256 = v1254[6];
          if (v1256)
          {
            v1251 = v1254;
            v1252 = v1255;
            do
            {
              if (*(_DWORD *)(v1256 + 8) == (_DWORD)v1255)
                goto LABEL_1755;
              v1256 = *(_QWORD *)(v1256 + 32);
            }
            while (v1256);
          }
        }
        goto LABEL_2116;
      case 0x1A3:
        v544 = *(uint64_t **)(v9 + 32);
        v545 = *v544;
        v546 = *(unsigned __int16 *)(*v544 + 24);
        if (v546 != 36 && v546 != 12)
        {
          if (**(_BYTE **)(v9 + 40) != 9)
            goto LABEL_2116;
          v727 = v544[1];
          v728 = *(_WORD *)(v9 + 72);
          if (v546 == 212)
          {
            v729 = *(_QWORD *)(v545 + 32);
            v730 = *(uint64_t **)v729;
            v731 = v727 & 0xFFFFFFFF00000000 | *(unsigned int *)(v729 + 8);
            v732 = a3;
          }
          else
          {
            v732 = a3;
            v986 = *(_QWORD *)(a3 + 16);
            v987 = *(_QWORD *)(v986 + 832);
            v988 = v987 ? *(_WORD *)(v987 + 8) : 0;
            v730 = sub_1C5D52060(v986, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, v545, v727, v988);
            v731 = v727 & 0xFFFFFFFF00000000 | v1247;
          }
          v1248 = sub_1C5D52060(*(_QWORD *)(v732 + 16), 419, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v730, v731, v728);
          v1250 = v1248[6];
          if (!v1250)
            goto LABEL_2116;
          v1251 = v1248;
          v1252 = v1249;
          while (*(_DWORD *)(v1250 + 8) != (_DWORD)v1249)
          {
            v1250 = *(_QWORD *)(v1250 + 32);
            if (!v1250)
              goto LABEL_2116;
          }
LABEL_1755:
          v1673 = *(_QWORD *)(a3 + 16);
          v1674 = v1673;
          v1675 = 1;
          goto LABEL_1756;
        }
        v548 = *(_QWORD *)(v545 + 80);
        v549 = (const llvm::detail::DoubleAPFloat *)(v548 + 32);
        v550 = *(_QWORD *)(v548 + 32);
        if ((_UNKNOWN *)v550 == &unk_1C866F1C0)
        {
LABEL_3199:
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], v549);
        }
        else
        {
          v3593[1] = *(void **)(v548 + 32);
          if ((*(_DWORD *)(v550 + 8) + 64) >= 0x80)
            v3594 = (void **)operator new[]();
          v551 = *(_BYTE *)(v548 + 52);
          v552 = v551 & 7;
          BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v551 & 0xF;
          LODWORD(v3595) = *(_DWORD *)(v548 + 48);
          v554 = (v551 & 6) != 0 && v552 != 3;
          if (v552 == 1 || v554)
          {
            v556 = *((unsigned int *)v3593[1] + 2);
            if ((v556 - 64) <= 0xFFFFFF7F)
              v557 = v3594;
            else
              v557 = (void **)&v3594;
            v560 = *(void ***)(v548 + 40);
            v559 = (void **)(v548 + 40);
            v558 = v560;
            if ((*((_DWORD *)*(v559 - 1) + 2) - 64) >= 0xFFFFFF80)
              v558 = v559;
            if (v556 <= 0xFFFFFFBF)
            {
              v561 = (unint64_t)(v556 + 64) >> 6;
              do
              {
                v562 = *v558++;
                *v557++ = v562;
                --v561;
              }
              while (v561);
            }
          }
        }
LABEL_590:
        llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, v3608);
        v581 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
        *(_QWORD *)&v3590 = sub_1C5D404C4(*(_QWORD *)(a3 + 16), (const llvm::APInt *)&v3588, **(_QWORD **)(v9 + 40), *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8), 0, 1.0 / sqrt(v581));
        *((_QWORD *)&v3590 + 1) = v582;
        v400 = v3593[1];
        if (v3593[1] == &unk_1C866F1C0)
          goto LABEL_3200;
        goto LABEL_591;
      case 0x1AB:
        v521 = *(uint64_t **)(v9 + 32);
        v522 = *v521;
        v523 = v521[5];
        v524 = v521[10];
        v525 = *(unsigned __int16 *)(v522 + 24);
        if (v525 == 35 || v525 == 11)
          v527 = v522;
        else
          v527 = 0;
        v528 = *(unsigned __int16 *)(v523 + 24);
        if (v528 == 35 || v528 == 11)
          v530 = v523;
        else
          v530 = 0;
        v531 = *(unsigned __int16 *)(v524 + 24);
        if (v531 != 35 && v531 != 11)
          v524 = 0;
        if (!v527 || **(_BYTE **)(v9 + 40) != 5 || !v530 || !v524)
          goto LABEL_2116;
        v533 = *(_QWORD *)(v527 + 80);
        v534 = (unint64_t *)(v533 + 24);
        if (*(_DWORD *)(v533 + 32) >= 0x41u)
          v534 = (unint64_t *)*v534;
        v535 = *(_QWORD *)(v530 + 80);
        v536 = (_QWORD *)(v535 + 24);
        if (*(_DWORD *)(v535 + 32) >= 0x41u)
          v536 = (_QWORD *)*v536;
        v537 = *v534;
        v538 = (_QWORD *)*v536;
        v539 = *(_QWORD *)(v524 + 80);
        v540 = (_QWORD *)(v539 + 24);
        if (*(_DWORD *)(v539 + 32) >= 0x41u)
          v540 = (_QWORD *)*v540;
        v541 = *(_QWORD *)(a3 + 16);
        v542 = (v537 | ((_QWORD)v538 << 32)) >> *v540;
        goto LABEL_535;
      case 0x1AC:
        goto LABEL_170;
      default:
        v37 = ((_DWORD)v13 - 253);
        if (v37 > 0x34)
          goto LABEL_135;
        if (((1 << (v13 + 3)) & 0x1FDFE000000000) != 0)
        {
          v38 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v10 + 2256))(v10, v9, a3);
          goto LABEL_20;
        }
        if ((_DWORD)v13 == 253)
        {
          v38 = sub_1C4901290((uint64_t)v10, v9, a3);
          goto LABEL_20;
        }
        if (v37 == 1)
        {
          v38 = sub_1C4901B44((uint64_t)v10, v9, a3);
          goto LABEL_20;
        }
LABEL_135:
        if (((_DWORD)v13 - 246) >= 2 || !*(_DWORD *)(a3 + 8))
          goto LABEL_2116;
        v151 = *(uint64_t **)(v9 + 32);
        v150 = *(_QWORD *)(v9 + 40);
        v152 = *(llvm **)v150;
        v153 = *(_QWORD *)(v150 + 8);
        v155 = v151[5];
        v154 = v151[6];
        v156 = *v151;
        v157 = v151[1];
        v158 = *(_WORD *)(v9 + 72);
        if (sub_1C6141934(v9))
          v159 = 0;
        else
          v159 = 2048;
        v160 = v159 | v158 & 0xF7FE;
        if (*(_WORD *)(v9 + 24) == 247)
          v161 = 2;
        else
          v161 = 4;
        v162 = *(_QWORD **)(a3 + 16);
        v3437 = sub_1C6367818(v162, v161);
        *(_QWORD *)&v3590 = sub_1C63698B8((uint64_t)v162, (const char *)0x1AC, (const llvm::APInt *)&v3588, v152, v153, v156, v157, v164, v155, v154, v156, v157, v155, v154, v3437, v163);
        *((_QWORD *)&v3590 + 1) = v165;
        *(_WORD *)(v3590 + 72) = v160 | 1;
        if (v152 == 10
          && (*(_WORD *)(**(_QWORD **)(a3 + 16) + 1020) & 1) == 0
          && ((~v160 & 0xBF0) != 0 || (v158 & 0x400) == 0))
        {
          if ((v166 = *(unsigned __int16 *)(v156 + 24), v166 != 36) && v166 != 12
            || (v167 = *(_QWORD *)(v156 + 80), sub_1C4773C58(v167 + 24))
            || (*(_UNKNOWN **)(v167 + 32) == &unk_1C866F1C0
              ? (v168 = *(_BYTE *)(*(_QWORD *)(v167 + 40) + 28))
              : (v168 = *(_BYTE *)(v167 + 52)),
                (v169 = v168 & 7, v169 < 2) || v169 == 3))
          {
            if ((v170 = *(unsigned __int16 *)(v155 + 24), v170 != 36) && v170 != 12
              || (v171 = *(_QWORD *)(v155 + 80), sub_1C4773C58(v171 + 24))
              || (*(_UNKNOWN **)(v171 + 32) == &unk_1C866F1C0
                ? (v172 = *(_BYTE *)(*(_QWORD *)(v171 + 40) + 28))
                : (v172 = *(_BYTE *)(v171 + 52)),
                  (v173 = v172 & 7, v173 < 2) || v173 == 3))
            {
              v174 = *(_QWORD *)(a3 + 16);
              v175 = *(_QWORD *)(v174 + 832);
              if (v175)
                v176 = *(_WORD *)(v175 + 8);
              else
                v176 = 0;
              *(_QWORD *)&v3590 = sub_1C5D52060(v174, 429, (const llvm::APInt *)&v3588, v152, v153, v3590, *((unint64_t *)&v3590 + 1), v176);
              DWORD2(v3590) = v2266;
              *(_WORD *)(v3590 + 72) = v160 | 1;
            }
          }
        }
        break;
    }
    goto LABEL_2117;
  }
  if (*(unsigned __int16 *)(v9 + 24) <= 0xAAu)
  {
    if (*(unsigned __int16 *)(v9 + 24) <= 0x5Fu)
    {
      if (*(unsigned __int16 *)(v9 + 24) > 0x2Eu)
      {
        if (*(unsigned __int16 *)(v9 + 24) <= 0x37u)
        {
          if ((_DWORD)v13 != 47)
          {
            v3553 = a3;
            if ((_DWORD)v13 != 48)
              goto LABEL_2116;
            v40 = *(_QWORD **)(v9 + 32);
            v41 = *(_QWORD *)(v40[5] + 80);
            v42 = (int *)(v41 + 24);
            v43 = *(_DWORD *)(v41 + 32);
            v44 = v42;
            if (v43 >= 0x41)
              v44 = *(int **)v42;
            v45 = *v44;
            if ((v45 - 2177) < 0x80)
            {
              if (v43 >= 0x41)
                v42 = *(int **)v42;
              v46 = *v42;
              BYTE4(v3609) = 0;
              LOBYTE(v3610) = 0;
              v3611 = 0;
              LOBYTE(v3612) = 0;
              v3613 = 0;
              LOBYTE(v3614) = 0;
              v3615 = 0;
              LOBYTE(v3616) = 0;
              v3617 = 0;
              v3608[1] = 0;
              v3608[0] = 0;
              LOBYTE(v3609) = 0;
              sub_1C4B14788((_QWORD *)v46, (uint64_t)v3608, 0);
              v47 = *(_QWORD *)(v9 + 32);
              v48 = (uint64_t *)(v47 + 40 * LODWORD(v3608[1]));
              v49 = *v48;
              v50 = v48[1];
              v51 = v47 + 40 * HIDWORD(v3608[1]);
              v52 = *(_QWORD *)v51;
              v53 = *(_DWORD *)(v51 + 8);
              if (*(_WORD *)(*v48 + 24) == 216)
              {
                v54 = *(_QWORD *)(v49 + 32);
                v49 = *(_QWORD *)v54;
                v50 = v50 & 0xFFFFFFFF00000000 | *(unsigned int *)(v54 + 8);
              }
              v3511 = *(_QWORD **)(v47 + 40 * HIDWORD(v3608[0]));
              v55 = *(unsigned __int16 *)(v52 + 24);
              if (v55 != 11)
              {
                switch(v55)
                {
                  case 199:
                    v771 = *(_DWORD **)(v52 + 32);
                    v52 = *(_QWORD *)v771;
                    v53 = v771[2];
                    v55 = *(unsigned __int16 *)(*(_QWORD *)v771 + 24);
                    break;
                  case 35:
                    goto LABEL_36;
                  case 216:
                    v772 = *(_DWORD **)(v52 + 32);
                    v52 = *(_QWORD *)v772;
                    v53 = v772[2];
                    v55 = *(unsigned __int16 *)(*(_QWORD *)v772 + 24);
                    break;
                }
                goto LABEL_862;
              }
LABEL_36:
              v56 = *(_QWORD *)(v52 + 80);
              v57 = *(_DWORD *)(v56 + 32);
              if (v57 > 0x40)
                v58 = **(_QWORD **)(v56 + 24);
              else
                v58 = (uint64_t)(*(_QWORD *)(v56 + 24) << -(char)v57) >> -(char)v57;
              if (v58 < 0)
              {
                v3443 = 0;
                v3446 = v10 + 23037;
                v3460 = *(_BYTE *)(v10[23037] + 326) != 0;
                goto LABEL_873;
              }
LABEL_862:
              v3443 = v50;
              if (v55 == 35 || v55 == 11)
              {
                v773 = *(_QWORD *)(v52 + 80);
                v774 = *(_DWORD *)(v773 + 32);
                v775 = v774 > 0x40
                     ? **(_QWORD **)(v773 + 24)
                     : (uint64_t)(*(_QWORD *)(v773 + 24) << -(char)v774) >> -(char)v774;
                if (v775 < 0x10000)
                  v52 = (uint64_t)sub_1C6366AB4(*(_QWORD *)(a3 + 16), v775, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
              }
              v50 = v50 & 0xFFFFFFFF00000000 | v53;
              v3460 = *(_BYTE *)(v10[23037] + 326) != 0;
              v3446 = v10 + 23037;
              if (v49)
              {
                v776 = 0;
                v777 = v49;
                goto LABEL_876;
              }
              v49 = v52;
LABEL_873:
              v778 = *(unsigned __int16 *)(v49 + 24);
              if (v778 > 0x26 || ((1 << v778) & 0x6000006000) == 0)
              {
                v904 = *(_QWORD *)(a3 + 16);
                v905 = *(_QWORD *)(v904 + 832);
                if (v905)
                  v906 = *(_WORD *)(v905 + 8);
                else
                  v906 = 0;
                v52 = (uint64_t)sub_1C5D52060(v904, 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, v49, v50, v906);
                v49 = 0;
                v777 = 0;
                v50 = v50 & 0xFFFFFFFF00000000 | v1098;
                v3485 = 1;
LABEL_1187:
                if (LODWORD(v3608[0]) == -1)
                {
                  v1099 = 0;
                  v3444 = 0;
                }
                else
                {
                  v1100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40 * LODWORD(v3608[0])) + 80);
                  v1101 = (_QWORD *)(v1100 + 24);
                  if (*(_DWORD *)(v1100 + 32) >= 0x41u)
                    v1101 = (_QWORD *)*v1101;
                  v1102 = *(_DWORD *)v1101;
                  v3444 = v1102;
                  v1099 = (v1102 >> 1) & 0x4000;
                }
                v1103 = v3618;
                if (v3618 <= 2)
                  v1104 = 2;
                else
                  v1104 = v3618;
                v1105 = v1104 - 2;
                if (v3620)
                  v1103 = v1105;
                v1106 = v1103 + v3613;
                if (v3619 == 8)
                  ++v1106;
                v3455 = v49;
                v3449 = v50;
                v3469 = v777;
                v3477 = v52;
                v3445 = v1099;
                if (v1106 + v3611)
                {
                  if (!v3621)
                    __asm { BR              X11 }
                  __asm { BR              X11 }
                }
                if (v3615)
                {
                  v1320 = (unsigned int *)(*(_QWORD *)(v9 + 32) + 40 * v3614);
                  v1319 = *(_QWORD **)v1320;
                  v1321 = *(unsigned __int16 *)(*(_QWORD *)v1320 + 24);
                  if (v1321 == 35 || v1321 == 11)
                  {
                    v1323 = v1319[10];
                    v1324 = (uint64_t *)(v1323 + 24);
                    if (*(_DWORD *)(v1323 + 32) >= 0x41u)
                      v1324 = (uint64_t *)*v1324;
                    v3536 = *v1324 != 0;
                    v1319 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), *v1324, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                    v3441 = v1325;
                  }
                  else
                  {
                    v3441 = v1320[2];
                    v3536 = 2;
                  }
                }
                else
                {
                  v1319 = 0;
                  v3441 = 0;
                  v3536 = 0;
                }
                v1326 = *((unsigned __int16 *)v3511 + 12);
                v3442 = v1319;
                if (v1326 == 35 || v1326 == 11)
                {
                  if (!v3617)
                  {
                    v1327 = v3511[10];
                    v1328 = (uint64_t *)(v1327 + 24);
                    if (*(_DWORD *)(v1327 + 32) >= 0x41u)
                      v1328 = (uint64_t *)*v1328;
                    v3511 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), *v1328, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                    v1329 = 0;
                    v1331 = v1330;
                    goto LABEL_1468;
                  }
                }
                else if (!v3617)
                {
                  v1331 = 0;
                  v1329 = 1;
                  goto LABEL_1468;
                }
                v1332 = *(_QWORD *)(v9 + 32);
                v1333 = (uint64_t *)(v1332 + 40 * v3616);
                v1334 = *v1333;
                v1335 = v1333[1];
                v1336 = (uint64_t *)(v1332 + 40 * (v3616 + 1));
                v1338 = *v1336;
                v1337 = v1336[1];
                v1339 = (uint64_t *)(v1332 + 40 * (v3616 + 2));
                v1340 = *v1339;
                v1341 = v1339[1];
                v1342 = (uint64_t *)(v1332 + 40 * (v3616 + 3));
                v3438 = v1342[1];
                v3439 = *v1342;
                v1343 = *(_QWORD *)(v3553 + 16);
                v1344 = sub_1C6366AB4(v1343, 8, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1347 = 0;
                v1348 = *(_QWORD *)(v1343 + 832);
                if (v1348)
                  v1347 = *(_WORD *)(v1348 + 8);
                v1349 = sub_1C5D56C70(v1343, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1334, v1335, v1346, (uint64_t)v1344, v1345, v1347);
                v1352 = 0;
                v1353 = *(_QWORD *)(v1343 + 832);
                if (v1353)
                  v1352 = *(_WORD *)(v1353 + 8);
                v3517 = sub_1C5D56C70(v1343, 56, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3511, 0, v1351, (uint64_t)v1349, v1350, v1352);
                v3440 = v1354;
                v1355 = *(_QWORD *)(v3553 + 16);
                v1356 = sub_1C6366AB4(v1355, 8, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1359 = 0;
                v1360 = *(_QWORD *)(v1355 + 832);
                if (v1360)
                  v1359 = *(_WORD *)(v1360 + 8);
                v1361 = sub_1C5D56C70(v1355, 177, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1334, v1335, v1358, (uint64_t)v1356, v1357, v1359);
                v1363 = v1362;
                v1364 = *(_QWORD *)(v3553 + 16);
                v1365 = sub_1C6366AB4(v1364, 2, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1368 = 0;
                v1369 = *(_QWORD *)(v1364 + 832);
                if (v1369)
                  v1368 = *(_WORD *)(v1369 + 8);
                v1370 = sub_1C5D56C70(v1364, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1340, v1341, v1367, (uint64_t)v1365, v1366, v1368);
                v1372 = v1371;
                v1373 = *(_QWORD *)(v3553 + 16);
                v1374 = sub_1C6366AB4(v1373, 12, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1377 = 0;
                v1378 = *(_QWORD *)(v1373 + 832);
                if (v1378)
                  v1377 = *(_WORD *)(v1378 + 8);
                v1380 = sub_1C5D56C70(v1373, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1338, v1337, v1376, (uint64_t)v1374, v1375, v1377);
                v1382 = v1381;
                v1383 = 0;
                v1384 = *(_QWORD *)(v3553 + 16);
                v1385 = *(_QWORD *)(v1384 + 832);
                if (v1385)
                  v1383 = *(_WORD *)(v1385 + 8);
                v1387 = sub_1C5D56C70(v1384, 56, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v1361, v1363, v1379, (uint64_t)v1370, v1372, v1383);
                v1389 = v1386;
                v1390 = 0;
                v1391 = *(_QWORD *)(v3553 + 16);
                v1392 = *(_QWORD *)(v1391 + 832);
                if (v1392)
                  v1390 = *(_WORD *)(v1392 + 8);
                v1393 = sub_1C5D56C70(v1391, 56, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v1387, v1386, v1388, (uint64_t)v1380, v1382, v1390);
                v1395 = v1394;
                v1396 = *(_QWORD *)(v3553 + 16);
                v1397 = sub_1C6366AB4(v1396, 4, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1400 = 0;
                v1401 = *(_QWORD *)(v1396 + 832);
                if (v1401)
                  v1400 = *(_WORD *)(v1401 + 8);
                v1402 = sub_1C5D56C70(v1396, 177, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1338, v1337, v1399, (uint64_t)v1397, v1398, v1400);
                v1404 = v1403;
                v1405 = *(_QWORD *)(v3553 + 16);
                v1406 = sub_1C6366AB4(v1405, 6, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v1409 = 0;
                v1410 = *(_QWORD *)(v1405 + 832);
                if (v1410)
                  v1409 = *(_WORD *)(v1410 + 8);
                v1411 = sub_1C5D56C70(v1405, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, v3439, v3438, v1408, (uint64_t)v1406, v1407, v1409);
                v1414 = 0;
                v1415 = *(_QWORD *)(v3553 + 16);
                v1416 = *(_QWORD *)(v1415 + 832);
                if (v1416)
                  v1414 = *(_WORD *)(v1416 + 8);
                v1417 = sub_1C5D56C70(v1415, 56, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v1402, v1404, v1413, (uint64_t)v1411, v1412, v1414);
                v1419 = v1418;
                v3593[0] = &v3594;
                v3593[1] = (void *)0x800000000;
                v1420 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 10, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                v1422 = v1421;
                v1423 = v3593[1];
                if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                  v1423 = v3593[1];
                }
                v1424 = (char *)v3593[0] + 16 * v1423;
                *v1424 = v1420;
                v1424[1] = v1422;
                v1425 = (LODWORD(v3593[1]) + 1);
                LODWORD(v3593[1]) = v1425;
                if (v1425 >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1425 + 1, 16);
                  LODWORD(v1425) = v3593[1];
                }
                v1426 = (uint64_t **)((char *)v3593[0] + 16 * v1425);
                *v1426 = v3517;
                v1426[1] = v3440;
                ++LODWORD(v3593[1]);
                v1427 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                v1429 = v1428;
                v1430 = v3593[1];
                if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                  v1430 = v3593[1];
                }
                v1431 = v1389 & 0xFFFFFFFF00000000 | v1395;
                v1432 = (char *)v3593[0] + 16 * v1430;
                *v1432 = v1427;
                v1432[1] = v1429;
                v1433 = (LODWORD(v3593[1]) + 1);
                LODWORD(v3593[1]) = v1433;
                if (v1433 >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1433 + 1, 16);
                  LODWORD(v1433) = v3593[1];
                }
                v1434 = (uint64_t **)((char *)v3593[0] + 16 * v1433);
                *v1434 = v1393;
                v1434[1] = (uint64_t *)v1431;
                ++LODWORD(v3593[1]);
                v1435 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 2, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                v1437 = v1436;
                v1438 = v3593[1];
                if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                  v1438 = v3593[1];
                }
                v1439 = v1404 & 0xFFFFFFFF00000000 | v1419;
                v1440 = (char *)v3593[0] + 16 * v1438;
                *v1440 = v1435;
                v1440[1] = v1437;
                v1441 = (LODWORD(v3593[1]) + 1);
                LODWORD(v3593[1]) = v1441;
                if (v1441 >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1441 + 1, 16);
                  LODWORD(v1441) = v3593[1];
                }
                v1442 = (uint64_t **)((char *)v3593[0] + 16 * v1441);
                *v1442 = v1417;
                v1442[1] = (uint64_t *)v1439;
                ++LODWORD(v3593[1]);
                v1443 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 3, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                v1445 = v1444;
                v1446 = v3593[1];
                if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                  v1446 = v3593[1];
                }
                v1447 = (char *)v3593[0] + 16 * v1446;
                *v1447 = v1443;
                v1447[1] = v1445;
                ++LODWORD(v3593[1]);
                v3511 = sub_1C636E56C(*(_QWORD *)(v3553 + 16), 18, (uint64_t)&v3588, (llvm *)0xAE, 0, (uint64_t *)v3593[0], LODWORD(v3593[1]));
                v52 = v3477;
                v1099 = v3445;
                if (v3593[0] != &v3594)
                  free(v3593[0]);
                v1331 = 0;
                v1329 = 2;
                v777 = v3469;
LABEL_1468:
                v1448 = v3485;
                if (v777)
                  v1448 = 1;
                if (v1448 == 1)
                {
                  if (v777)
                  {
                    *(_OWORD *)v3593 = *(_OWORD *)*(_QWORD *)(v52 + 40);
                    if (LOBYTE(v3593[0]))
                      v1451 = sub_1C47A8C74((unsigned __int8 *)v3593);
                    else
                      v1451 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3593);
                    v1453 = v1451;
                    v1450 = v3444;
                    if ((_DWORD)v1452 == 1)
                    v1449 = 2;
                    if (v1453 != 16)
                      v1449 = 3;
LABEL_1482:
                    v1454 = &unk_1C691FC34;
                    if (v3460)
                      v1454 = &unk_1C691FC7C;
                    v1455 = v1454[18 * v1449 + 6 * v1329 + v3536];
                    v1456 = ((v1450 & 0xF) << 9) | v1099 | (2 * (v3536 < 2)) | (4 * v1329) | (32 * (v3619 & 0xF)) | (16 * v3621);
                    if (!v3620)
                      ++v1456;
                    v1457 = v1456 | (v3622 << 16);
                    v1458 = *(_QWORD *)(*(_QWORD *)(v3553 + 16) + 40);
                    v1459 = *v3446;
                    v1460 = *(_BYTE *)(*v3446 + 404) == 0;
                    if (*(_BYTE *)(*v3446 + 318))
                      LODWORD(v1461) = 3;
                    else
                      LODWORD(v1461) = 1;
                    v1462 = *(_QWORD *)v1458;
                    LODWORD(v3593[0]) = 0;
                    if (sub_1C4979B6C(v1459, v1462, "ImageWriteBlockCacheCtl", (int *)v3593))
                      v1461 = LODWORD(v3593[0]);
                    else
                      v1461 = v1461;
                    v1463 = *v3446;
                    v1464 = *(_QWORD *)v1458;
                    LODWORD(v3593[0]) = 0;
                    v1465 = sub_1C4979B6C(v1463, v1464, "ImageWriteBlockL2Pers", (int *)v3593);
                    v1466 = v3593[0];
                    if (!v1465)
                      v1466 = v1460;
                    v1467 = 4 * v1466;
                    if ((_DWORD)v1461 == 3)
                      v1467 = 4;
                    v1468 = v1467 | v1461;
                    v3593[0] = &v3594;
                    v3593[1] = (void *)0x800000000;
                    v1469 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), v1457, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
                    v1471 = v1470;
                    v1472 = v3593[1];
                    if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                      v1472 = v3593[1];
                    }
                    v1473 = (char *)v3593[0] + 16 * v1472;
                    *v1473 = v1469;
                    v1473[1] = v1471;
                    ++LODWORD(v3593[1]);
                    v1474 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), v1468, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
                    v1476 = v1475;
                    v1477 = v3593[1];
                    if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                      v1477 = v3593[1];
                    }
                    v1478 = (char *)v3593[0] + 16 * v1477;
                    *v1478 = v1474;
                    v1478[1] = v1476;
                    v1479 = (LODWORD(v3593[1]) + 1);
                    LODWORD(v3593[1]) = v1479;
                    if (v1479 >= HIDWORD(v3593[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1479 + 1, 16);
                      LODWORD(v1479) = v3593[1];
                    }
                    v1480 = (char *)v3593[0] + 16 * v1479;
                    *v1480 = v3511;
                    v1480[1] = v1331;
                    v1481 = ++LODWORD(v3593[1]);
                    if (v3469)
                    {
                      v1482 = v3455;
                      if (v1481 >= HIDWORD(v3593[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1481 + 1, 16);
                        LODWORD(v1481) = v3593[1];
                      }
                      v1481 = (unint64_t)v3593[0] + 16 * v1481;
                      *(_QWORD *)v1481 = v3469;
                      *(_QWORD *)(v1481 + 8) = v3443;
                      LODWORD(v1481) = ++LODWORD(v3593[1]);
                    }
                    else
                    {
                      v1482 = v3455;
                    }
                    if (v1481 >= HIDWORD(v3593[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1481 + 1, 16);
                      LODWORD(v1481) = v3593[1];
                    }
                    v1483 = (uint64_t *)((char *)v3593[0] + 16 * v1481);
                    *v1483 = v3477;
                    v1483[1] = v3449;
                    v1484 = ++LODWORD(v3593[1]);
                    if (v3536)
                    {
                      if (v1484 >= HIDWORD(v3593[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1484 + 1, 16);
                        v1484 = v3593[1];
                      }
                      v1485 = (char *)v3593[0] + 16 * v1484;
                      *v1485 = v3442;
                      v1485[1] = v3441;
                      v1484 = ++LODWORD(v3593[1]);
                      v1486 = !v3460;
                      if (v3536 != 2)
                        v1486 = 1;
                      if ((v1486 & 1) == 0)
                      {
                        v1487 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                        v1489 = v1488;
                        v1490 = v3593[1];
                        if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                          v1490 = v3593[1];
                        }
                        v1491 = (char *)v3593[0] + 16 * v1490;
                        *v1491 = v1487;
                        v1491[1] = v1489;
                        v1484 = ++LODWORD(v3593[1]);
                      }
                    }
                    v1492 = *(_OWORD *)*(_QWORD *)(v9 + 32);
                    if (v1484 >= HIDWORD(v3593[1]))
                    {
                      v3548 = *(_OWORD *)*(_QWORD *)(v9 + 32);
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1484 + 1, 16);
                      v1492 = v3548;
                      v1484 = v3593[1];
                    }
                    *((_OWORD *)v3593[0] + v1484) = v1492;
                    ++LODWORD(v3593[1]);
                    v1493 = sub_1C636E56C(*(_QWORD *)(v3553 + 16), v1455, (uint64_t)&v3588, (llvm *)1, 0, (uint64_t *)v3593[0], LODWORD(v3593[1]));
                    v1494 = *(_QWORD *)(v1458 + 48);
                    if (!v1494)
                    {
                      v1494 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1458 + 8) + 216))(*(_QWORD *)(v1458 + 8), v1458 + 128, v1458);
                      *(_QWORD *)(v1458 + 48) = v1494;
                    }
                    if ((v3485 & 1) != 0)
                    {
                      v1495 = 0;
                      v1496 = 4;
                    }
                    else
                    {
                      v1497 = sub_1C48BEFA4(v1494, *(_QWORD *)(v1482 + 80), v1458, 0);
                      v1496 = v1497 | 4;
                      if (v1497)
                        v1495 = *(_DWORD *)(v1497 + 12);
                      else
                        v1495 = 0;
                    }
                    v1498 = sub_1C484358C(v1458 + 128, 80, 3);
                    *(_QWORD *)v1498 = v1496;
                    *(_QWORD *)(v1498 + 8) = 0;
                    *(_DWORD *)(v1498 + 16) = v1495;
                    *(_BYTE *)(v1498 + 20) = 0;
                    *(_QWORD *)(v1498 + 24) = 0;
                    *(_WORD *)(v1498 + 32) = 2;
                    *(_BYTE *)(v1498 + 34) = 2;
                    *(_OWORD *)(v1498 + 40) = 0u;
                    *(_OWORD *)(v1498 + 56) = 0u;
                    *(_QWORD *)(v1498 + 72) = 0;
                    *(_WORD *)(v1498 + 36) = 1;
                    v1499 = *(void **)(v3553 + 16);
                    *(_QWORD *)&v3623 = v1498;
                    sub_1C636E10C(v1499, (uint64_t)v1493, &v3623, 1);
                    *(_QWORD *)&v3590 = v1493;
                    DWORD2(v3590) = 0;
                    v1500 = (void **)v3593[0];
                    if (v3593[0] == &v3594)
                      goto LABEL_2117;
LABEL_1567:
                    free(v1500);
                    goto LABEL_2117;
                  }
                  v1449 = 1;
                }
                else
                {
                  v1449 = 0;
                }
                v1450 = v3444;
                goto LABEL_1482;
              }
              v777 = 0;
              v776 = 1;
              v52 = v49;
LABEL_876:
              v779 = sub_1C5EAB3E0(*(llvm::GlobalValue **)(v49 + 80), *(_QWORD *)(v49 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 40) + 344), 0);
              v780 = *(_QWORD *)(a3 + 16);
              if ((v776 & 1) != 0)
              {
                v52 = sub_1C5D410E8(v780, 67, (llvm *)5, 0, v779, 5);
                v3485 = 0;
                v50 = v50 & 0xFFFFFFFF00000000 | v781;
              }
              else
              {
                v777 = sub_1C5D410E8(v780, 64, (llvm *)6, 0, v779 >> 1, 3);
                v3485 = 0;
                v3443 = v782;
              }
              goto LABEL_1187;
            }
            if (v45 <= 2451)
            {
              if ((v45 - 2419) < 2)
              {
                *(_OWORD *)v3608 = *((_OWORD *)v40 + 5);
                v1634 = (const char *)v40[15];
                v1635 = *((unsigned __int16 *)v1634 + 12);
                if (v1635 == 35 || v1635 == 11)
                  v1637 = 8184;
                else
                  v1637 = 8185;
                if (v43 >= 0x41)
                  v42 = *(int **)v42;
                if (*(_QWORD *)v42 == 2419)
                  v1638 = 16;
                else
                  v1638 = 272;
                if (v1635 == 35 || v1635 == 11)
                {
                  v1639 = *((_QWORD *)v1634 + 10);
                  v1640 = (uint64_t *)(v1639 + 24);
                  if (*(_DWORD *)(v1639 + 32) >= 0x41u)
                    v1640 = (uint64_t *)*v1640;
                  v1634 = (const char *)sub_1C6366AB4(*(_QWORD *)(v3553 + 16), *v1640, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
                  v1642 = v1641;
                }
                else
                {
                  v1642 = *((_DWORD *)v40 + 32);
                }
                v3593[0] = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), v1638, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
                v3593[1] = v2166;
                v3594 = (void **)sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 4, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
                v3595 = v2167;
                v3596 = (uint64_t *)v3608[0];
                LODWORD(v3597) = v3608[1];
                v3598 = v1634;
                LODWORD(v3599) = v1642;
                v3600 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
                v3601 = v2168;
                v2170 = *(_QWORD *)(v9 + 32);
                v2169 = *(_QWORD *)(v9 + 40);
                v2171 = *(void **)v2170;
                LODWORD(v3603) = *(_DWORD *)(v2170 + 8);
                v3602 = v2171;
                v2029 = sub_1C5D61678(*(_QWORD *)(v3553 + 16), v1637, (uint64_t)&v3588, v2169, *(unsigned __int16 *)(v9 + 58), (uint64_t *)v3593, 6);
              }
              else
              {
                if (v45 != 2424)
                {
                  if (v45 != 2451)
                    goto LABEL_2116;
LABEL_1158:
                  v3534 = *((_OWORD *)v40 + 5);
                  v1072 = (_QWORD *)v40[15];
                  v1073 = v40[16];
                  v1074 = *((unsigned __int16 *)v1072 + 12);
                  if (v1074 == 35 || v1074 == 11)
                  {
                    v1075 = v1072[10];
                    v1076 = (unsigned __int8 *)(v1075 + 24);
                    if (*(_DWORD *)(v1075 + 32) >= 0x41u)
                      v1076 = *(unsigned __int8 **)v1076;
                    v1072 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), *v1076, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
                    v1073 = v1073 & 0xFFFFFFFF00000000 | v1077;
                  }
                  v3593[0] = &v3594;
                  v3593[1] = (void *)0x800000000;
                  v1078 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
                  v1080 = v1079;
                  v1081 = v3593[1];
                  if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                    v1081 = v3593[1];
                  }
                  v1082 = (char *)v3593[0] + 16 * v1081;
                  *v1082 = v1078;
                  v1082[1] = v1080;
                  v1083 = (LODWORD(v3593[1]) + 1);
                  LODWORD(v3593[1]) = v1083;
                  if (v1083 >= HIDWORD(v3593[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1083 + 1, 16);
                    LODWORD(v1083) = v3593[1];
                  }
                  v1084 = (char *)v3593[0] + 16 * v1083;
                  *v1084 = v1072;
                  v1084[1] = v1073;
                  v1085 = (LODWORD(v3593[1]) + 1);
                  LODWORD(v3593[1]) = v1085;
                  if (v1085 >= HIDWORD(v3593[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1085 + 1, 16);
                    LODWORD(v1085) = v3593[1];
                  }
                  *((_OWORD *)v3593[0] + v1085) = v3534;
                  v1086 = (LODWORD(v3593[1]) + 1);
                  LODWORD(v3593[1]) = v1086;
                  v1087 = *(_OWORD *)*(_QWORD *)(v9 + 32);
                  if (v1086 >= HIDWORD(v3593[1]))
                  {
                    v3550 = *(_OWORD *)*(_QWORD *)(v9 + 32);
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1086 + 1, 16);
                    v1087 = v3550;
                    LODWORD(v1086) = v3593[1];
                  }
                  *((_OWORD *)v3593[0] + v1086) = v1087;
                  v1088 = ++LODWORD(v3593[1]);
                  v1089 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 80);
                  v1090 = (_QWORD *)(v1089 + 24);
                  v1091 = *(_DWORD *)(v1089 + 32);
                  if (*(_BYTE *)(v10[23037] + 326))
                  {
                    if (v1091 >= 0x41)
                      v1090 = (_QWORD *)*v1090;
                    v2036 = (_QWORD *)*v1090;
                    if (v2036 == (_QWORD *)2453)
                    {
                      v2372 = *((unsigned __int16 *)v1072 + 12);
                      v1094 = v2372 == 35 || v2372 == 11;
                      v1095 = 756;
                      v1096 = 753;
                      goto LABEL_2510;
                    }
                    if (v2036 == (_QWORD *)2451)
                    {
                      v2037 = *((unsigned __int16 *)v1072 + 12);
                      v1094 = v2037 == 35 || v2037 == 11;
                      v1095 = 754;
                      v1096 = 751;
                      goto LABEL_2510;
                    }
                  }
                  else
                  {
                    if (v1091 >= 0x41)
                      v1090 = (_QWORD *)*v1090;
                    v1092 = (_QWORD *)*v1090;
                    if (v1092 == (_QWORD *)2453)
                    {
                      v2371 = *((unsigned __int16 *)v1072 + 12);
                      v1094 = v2371 == 35 || v2371 == 11;
                      v1095 = 750;
                      v1096 = 747;
                      goto LABEL_2510;
                    }
                    if (v1092 == (_QWORD *)2451)
                    {
                      v1093 = *((unsigned __int16 *)v1072 + 12);
                      v1094 = v1093 == 35 || v1093 == 11;
                      v1095 = 748;
                      v1096 = 745;
LABEL_2510:
                      if (v1094)
                        v2225 = v1096;
                      else
                        v2225 = v1095;
                      goto LABEL_2513;
                    }
                  }
                  v2225 = 0;
LABEL_2513:
                  *(_QWORD *)&v3590 = sub_1C636E56C(*(_QWORD *)(v3553 + 16), v2225, (uint64_t)&v3588, (llvm *)1, 0, (uint64_t *)v3593[0], v1088);
                  DWORD2(v3590) = 0;
LABEL_2514:
                  v1500 = (void **)v3593[0];
                  if (v3593[0] == &v3594)
                    goto LABEL_2117;
                  goto LABEL_1567;
                }
                v2023 = *(_QWORD *)(v40[10] + 80);
                v2024 = (unsigned int *)(v2023 + 24);
                if (*(_DWORD *)(v2023 + 32) >= 0x41u)
                  v2024 = *(unsigned int **)v2024;
                v2025 = *(_QWORD *)(a3 + 16);
                v2026 = sub_1C6366AB4(v2025, *v2024, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
                v2029 = sub_1C636E3E8(v2025, 4593, (uint64_t)&v3588, (llvm *)1, 0, (uint64_t)v2026, v2027, v2028, **(_QWORD **)(v9 + 32), *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8));
              }
              *(_QWORD *)&v3590 = v2029;
              DWORD2(v3590) = 0;
              goto LABEL_2117;
            }
            if ((v45 - 2703) < 2)
            {
              v739 = sub_1C4902578(0, v9, 0, *(_QWORD **)(a3 + 16), (_BYTE *)v10[23037], 0);
              v38 = (uint64_t)sub_1C4902578(1, v9, 0, *(_QWORD **)(a3 + 16), (_BYTE *)v10[23037], (uint64_t)v739);
              goto LABEL_20;
            }
            if (v45 != 2452)
            {
              if (v45 != 2453)
                goto LABEL_2116;
              goto LABEL_1158;
            }
            v2087 = v40[10];
            v2088 = v40[11];
            v3518 = *(_OWORD *)(v40 + 15);
            v2090 = (_QWORD *)v40[20];
            v2089 = v40[21];
            v2091 = *((unsigned __int16 *)v2090 + 12);
            if (v2091 == 35 || v2091 == 11)
            {
              v2092 = v2090[10];
              v2093 = (unsigned __int8 *)(v2092 + 24);
              if (*(_DWORD *)(v2092 + 32) >= 0x41u)
                v2093 = *(unsigned __int8 **)v2093;
              v2090 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), *v2093, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
              v2089 = v2089 & 0xFFFFFFFF00000000 | v2094;
            }
            v3593[0] = &v3594;
            v3593[1] = (void *)0x800000000;
            v2095 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
            v2097 = v2096;
            v2098 = v3593[1];
            if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
              v2098 = v3593[1];
            }
            v2099 = (char *)v3593[0] + 16 * v2098;
            *v2099 = v2095;
            v2099[1] = v2097;
            v2100 = (LODWORD(v3593[1]) + 1);
            LODWORD(v3593[1]) = v2100;
            if (v2100 >= HIDWORD(v3593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v2100 + 1, 16);
              LODWORD(v2100) = v3593[1];
            }
            v2101 = (char *)v3593[0] + 16 * v2100;
            *v2101 = v2090;
            v2101[1] = v2089;
            ++LODWORD(v3593[1]);
            v2102 = sub_1C636E638(*(_QWORD *)(v3553 + 16), 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, v2087, v2088);
            v2104 = v2103;
            v2105 = sub_1C636E638(*(_QWORD *)(v3553 + 16), 2, (const llvm::APInt *)&v3588, (llvm *)4, 0, v2087, v2088);
            v2107 = v2106;
            v3608[0] = &v3609;
            v3608[1] = (void *)0x800000000;
            v2108 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 12, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
            v2110 = v2109;
            v2111 = v3608[1];
            if (LODWORD(v3608[1]) >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v2111 = v3608[1];
            }
            v2112 = (char *)v3608[0] + 16 * v2111;
            *v2112 = v2108;
            v2112[1] = v2110;
            v2113 = (LODWORD(v3608[1]) + 1);
            LODWORD(v3608[1]) = v2113;
            if (v2113 >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, v2113 + 1, 16);
              LODWORD(v2113) = v3608[1];
            }
            v2114 = (char *)v3608[0] + 16 * v2113;
            *v2114 = v2102;
            v2114[1] = v2104;
            ++LODWORD(v3608[1]);
            v2115 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
            v2117 = v2116;
            v2118 = v3608[1];
            if (LODWORD(v3608[1]) >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v2118 = v3608[1];
            }
            v2119 = (char *)v3608[0] + 16 * v2118;
            *v2119 = v2115;
            v2119[1] = v2117;
            v2120 = (LODWORD(v3608[1]) + 1);
            LODWORD(v3608[1]) = v2120;
            if (v2120 >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, v2120 + 1, 16);
              LODWORD(v2120) = v3608[1];
            }
            v2121 = (char *)v3608[0] + 16 * v2120;
            *v2121 = v2105;
            v2121[1] = v2107;
            ++LODWORD(v3608[1]);
            v2122 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 2, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
            v2124 = v2123;
            v2125 = v3608[1];
            if (LODWORD(v3608[1]) >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v2125 = v3608[1];
            }
            v2126 = (char *)v3608[0] + 16 * v2125;
            *v2126 = v2122;
            v2126[1] = v2124;
            v2127 = (LODWORD(v3608[1]) + 1);
            LODWORD(v3608[1]) = v2127;
            if (v2127 >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, v2127 + 1, 16);
              LODWORD(v2127) = v3608[1];
            }
            *((_OWORD *)v3608[0] + v2127) = v3518;
            ++LODWORD(v3608[1]);
            v2128 = sub_1C6366AB4(*(_QWORD *)(v3553 + 16), 3, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
            v2130 = v2129;
            v2131 = v3608[1];
            if (LODWORD(v3608[1]) >= HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v2131 = v3608[1];
            }
            v2132 = (char *)v3608[0] + 16 * v2131;
            *v2132 = v2128;
            v2132[1] = v2130;
            ++LODWORD(v3608[1]);
            v2133 = sub_1C636E56C(*(_QWORD *)(v3553 + 16), 18, (uint64_t)&v3588, (llvm *)0xAE, 0, (uint64_t *)v3608[0], LODWORD(v3608[1]));
            v2134 = v3593[1];
            if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
              v2134 = v3593[1];
            }
            v2135 = (char *)v3593[0] + 16 * v2134;
            *v2135 = v2133;
            v2135[1] = 0;
            v2136 = (LODWORD(v3593[1]) + 1);
            LODWORD(v3593[1]) = v2136;
            v2137 = *(_OWORD *)*(_QWORD *)(v9 + 32);
            if (v2136 >= HIDWORD(v3593[1]))
            {
              v3527 = *(_OWORD *)*(_QWORD *)(v9 + 32);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v2136 + 1, 16);
              v2137 = v3527;
              LODWORD(v2136) = v3593[1];
            }
            *((_OWORD *)v3593[0] + v2136) = v2137;
            v2138 = ++LODWORD(v3593[1]);
            v2139 = *((unsigned __int16 *)v2090 + 12);
            v2140 = v2139 == 11 || v2139 == 35;
            if (v2140)
              v2141 = 752;
            else
              v2141 = 755;
            if (v2140)
              v2142 = 746;
            else
              v2142 = 749;
            if (*(_BYTE *)(v10[23037] + 326))
              v2143 = v2141;
            else
              v2143 = v2142;
            *(_QWORD *)&v3590 = sub_1C636E56C(*(_QWORD *)(v3553 + 16), v2143, (uint64_t)&v3588, (llvm *)1, 0, (uint64_t *)v3593[0], v2138);
            DWORD2(v3590) = 0;
            if (v3608[0] != &v3609)
              free(v3608[0]);
            v1500 = (void **)v3593[0];
LABEL_2327:
            if (v1500 == (void **)&v3594)
              goto LABEL_2117;
            goto LABEL_1567;
          }
          v401 = *(__int128 **)(v9 + 32);
          v402 = *(_QWORD *)(*((_QWORD *)v401 + 5) + 80);
          v403 = (_QWORD *)(v402 + 24);
          if (*(_DWORD *)(v402 + 32) >= 0x41u)
            v403 = (_QWORD *)*v403;
          v404 = *(_DWORD *)v403;
          v3608[0] = &v3609;
          v3608[1] = (void *)0x100000000;
          switch(v404)
          {
            case 1282:
            case 1283:
            case 1284:
            case 1285:
            case 1286:
            case 1287:
            case 1288:
            case 1289:
            case 1290:
            case 1291:
            case 1292:
            case 1293:
            case 1294:
            case 1295:
            case 1296:
            case 1297:
            case 1298:
            case 1299:
            case 1300:
            case 1301:
            case 1302:
            case 1303:
            case 1304:
            case 1305:
            case 1306:
            case 1307:
            case 1308:
            case 1309:
            case 1310:
            case 1311:
            case 1312:
            case 1313:
            case 1314:
            case 1315:
            case 1316:
            case 1317:
            case 1318:
            case 1319:
            case 1320:
            case 1321:
            case 1322:
            case 1323:
            case 1324:
            case 1325:
            case 1326:
            case 1327:
            case 1328:
            case 1329:
            case 1330:
            case 1331:
            case 1332:
            case 1333:
            case 1334:
            case 1335:
            case 1336:
            case 1337:
            case 1338:
            case 1339:
            case 1340:
            case 1341:
            case 1342:
            case 1343:
            case 1344:
            case 1345:
            case 1346:
            case 1347:
            case 1348:
            case 1349:
            case 1350:
            case 1351:
            case 1352:
            case 1353:
            case 1354:
            case 1355:
            case 1356:
            case 1357:
            case 1358:
            case 1359:
            case 1360:
            case 1361:
            case 1362:
            case 1363:
            case 1364:
            case 1365:
            case 1366:
            case 1367:
            case 1368:
            case 1369:
            case 1370:
            case 1371:
            case 1372:
            case 1373:
            case 1374:
            case 1375:
            case 1376:
            case 1377:
            case 1378:
            case 1379:
            case 1380:
            case 1381:
            case 1382:
            case 1383:
            case 1384:
            case 1385:
            case 1386:
            case 1387:
            case 1388:
            case 1389:
            case 1390:
            case 1391:
            case 1392:
            case 1393:
            case 1394:
            case 1395:
            case 1396:
            case 1397:
            case 1398:
            case 1399:
            case 1400:
            case 1401:
            case 1402:
            case 1403:
            case 1404:
            case 1405:
            case 1406:
            case 1407:
            case 1408:
            case 1409:
            case 1410:
            case 1411:
            case 1412:
            case 1413:
            case 1414:
            case 1415:
            case 1416:
            case 1417:
            case 1418:
            case 1419:
            case 1420:
            case 1421:
            case 1422:
            case 1423:
            case 1424:
            case 1425:
            case 1426:
            case 1427:
            case 1428:
            case 1429:
            case 1430:
            case 1431:
            case 1432:
            case 1433:
            case 1434:
            case 1435:
            case 1436:
            case 1437:
            case 1438:
            case 1439:
            case 1440:
            case 1441:
            case 1442:
            case 1443:
            case 1444:
            case 1445:
            case 1446:
            case 1447:
            case 1448:
            case 1449:
            case 1450:
            case 1451:
            case 1452:
            case 1453:
            case 1454:
            case 1455:
            case 1456:
            case 1457:
            case 1458:
            case 1459:
            case 1460:
            case 1461:
            case 1462:
            case 1463:
            case 1464:
            case 1465:
            case 1466:
            case 1467:
            case 1468:
            case 1469:
            case 1470:
            case 1471:
            case 1472:
            case 1473:
            case 1474:
            case 1475:
            case 1476:
            case 1477:
            case 1478:
            case 1479:
            case 1480:
            case 1481:
            case 1482:
            case 1483:
            case 1484:
            case 1485:
            case 1486:
            case 1487:
            case 1488:
            case 1489:
            case 1490:
            case 1491:
            case 1492:
            case 1493:
            case 1494:
            case 1495:
            case 1496:
            case 1497:
            case 1498:
            case 1499:
            case 1500:
            case 1501:
            case 1502:
            case 1503:
            case 1504:
            case 1505:
            case 1506:
            case 1507:
            case 1508:
            case 1509:
            case 1510:
            case 1511:
            case 1512:
            case 1513:
            case 1514:
            case 1515:
            case 1516:
            case 1517:
            case 1518:
            case 1519:
            case 1520:
            case 1521:
            case 1522:
            case 1523:
            case 1524:
            case 1525:
            case 1526:
            case 1527:
            case 1528:
            case 1529:
            case 1530:
            case 1531:
            case 1532:
            case 1533:
            case 1534:
            case 1535:
            case 1536:
            case 1537:
            case 1538:
            case 1539:
            case 1540:
            case 1541:
            case 1542:
            case 1543:
            case 1544:
            case 1545:
            case 1546:
            case 1547:
            case 1548:
            case 1549:
            case 1550:
            case 1551:
            case 1552:
            case 1553:
            case 1554:
            case 1555:
            case 1556:
            case 1557:
            case 1558:
            case 1559:
            case 1560:
            case 1561:
            case 1562:
            case 1563:
            case 1564:
            case 1565:
            case 1566:
            case 1567:
            case 1568:
            case 1569:
            case 1570:
            case 1571:
            case 1572:
            case 1573:
            case 1574:
            case 1575:
            case 1576:
            case 1577:
            case 1578:
            case 1579:
            case 1580:
            case 1581:
            case 1582:
            case 1583:
            case 1584:
            case 1585:
            case 1586:
            case 1587:
            case 1588:
            case 1589:
            case 1590:
            case 1591:
            case 1592:
            case 1593:
            case 1594:
            case 1595:
            case 1596:
            case 1597:
            case 1598:
            case 1599:
            case 1600:
            case 1601:
            case 1602:
            case 1603:
            case 1604:
            case 1605:
            case 1606:
            case 1607:
            case 1608:
            case 1609:
            case 1610:
            case 1611:
            case 1612:
            case 1613:
            case 1614:
            case 1615:
            case 1616:
            case 1617:
            case 1618:
            case 1619:
            case 1620:
            case 1621:
            case 1622:
            case 1623:
            case 1624:
            case 1625:
            case 1626:
            case 1627:
            case 1628:
            case 1629:
            case 1630:
            case 1631:
            case 1632:
            case 1633:
            case 1634:
            case 1635:
            case 1636:
            case 1637:
            case 1638:
            case 1639:
            case 1640:
            case 1641:
            case 1642:
            case 1643:
            case 1644:
            case 1645:
            case 1646:
            case 1647:
            case 1648:
            case 1649:
            case 1650:
            case 1651:
            case 1652:
            case 1653:
            case 1654:
            case 1655:
            case 1656:
            case 1657:
            case 1658:
            case 1659:
            case 1660:
            case 1661:
            case 1662:
            case 1663:
            case 1664:
            case 1665:
            case 1666:
            case 1667:
            case 1668:
            case 1669:
            case 1670:
            case 1671:
            case 1672:
            case 1673:
            case 1674:
            case 1675:
            case 1676:
            case 1677:
            case 1678:
            case 1679:
            case 1680:
            case 1681:
              llvm::GPUSDISel::ExpandIntrinsicSample(v9, *(_QWORD *)(a3 + 16), v404, (unsigned int *)v3608, 4, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C48ED834, 0, 1, 25);
              v405 = (int)v3608[1];
              if (LODWORD(v3608[1]) == 1)
                goto LABEL_838;
              if (!LODWORD(v3608[1]))
                goto LABEL_836;
              if (LODWORD(v3608[1]) != 3)
                goto LABEL_1563;
              v406 = *(_QWORD *)(a3 + 16);
              v407 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v3608[0] + 40) + 16 * *((unsigned int *)v3608[0] + 2));
              v408 = *v407;
              v409 = v407[1];
              v410 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v3608[0] + 2) + 40) + 16 * *((unsigned int *)v3608[0] + 6));
              v411 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v3608[0] + 4) + 40) + 16 * *((unsigned int *)v3608[0] + 10));
              v412 = sub_1C636B134(v406, v408, v409, *v410, v410[1], *v411, v411[1]);
              v415 = (uint64_t)sub_1C636D72C(v406, (const char *)0x37, (const llvm::APInt *)&v3588, v412, v413, *(_QWORD *)v3608[0], *((_QWORD *)v3608[0] + 1), v414, *((_QWORD *)v3608[0] + 2), *(_OWORD *)((char *)v3608[0] + 24), *((_QWORD *)v3608[0] + 4), *((_QWORD *)v3608[0] + 5));
              goto LABEL_1565;
            case 1682:
            case 1683:
            case 1684:
            case 1685:
            case 1686:
            case 1687:
            case 1688:
            case 1689:
            case 1690:
            case 1691:
            case 1692:
            case 1693:
            case 1694:
            case 1695:
            case 1696:
            case 1697:
            case 1698:
            case 1699:
            case 1700:
            case 1701:
            case 1702:
            case 1703:
            case 1704:
            case 1705:
            case 1706:
            case 1707:
            case 1708:
            case 1709:
            case 1710:
            case 1711:
            case 1712:
            case 1713:
            case 1714:
            case 1715:
            case 1716:
            case 1717:
            case 1718:
            case 1719:
            case 1720:
            case 1721:
            case 1722:
            case 1723:
            case 1724:
            case 1725:
            case 1726:
            case 1727:
            case 1728:
            case 1729:
            case 1730:
            case 1731:
            case 1732:
            case 1733:
            case 1734:
            case 1735:
            case 1736:
            case 1737:
            case 1738:
            case 1739:
            case 1740:
            case 1741:
            case 1742:
            case 1743:
            case 1744:
            case 1745:
            case 1746:
            case 1747:
            case 1748:
            case 1749:
            case 1750:
            case 1751:
            case 1752:
            case 1753:
            case 1754:
            case 1755:
            case 1756:
            case 1757:
            case 1758:
            case 1759:
            case 1760:
            case 1761:
            case 1762:
            case 1763:
            case 1764:
            case 1765:
            case 1766:
            case 1767:
            case 1768:
            case 1769:
            case 1770:
            case 1771:
            case 1772:
            case 1773:
            case 1774:
            case 1775:
            case 1776:
            case 1777:
            case 1778:
            case 1779:
            case 1780:
            case 1781:
            case 1782:
            case 1783:
            case 1784:
            case 1785:
            case 1786:
            case 1787:
            case 1788:
            case 1789:
            case 1790:
            case 1791:
            case 1792:
            case 1793:
            case 1794:
            case 1795:
            case 1796:
            case 1797:
            case 1798:
            case 1799:
            case 1800:
            case 1801:
            case 1802:
            case 1803:
            case 1804:
            case 1805:
            case 1806:
            case 1807:
            case 1808:
            case 1809:
            case 1810:
            case 1811:
            case 1812:
            case 1813:
            case 1814:
            case 1815:
            case 1816:
            case 1817:
            case 1818:
            case 1819:
            case 1820:
            case 1821:
              llvm::GPUSDISel::ExpandIntrinsicSample(v9, *(_QWORD *)(a3 + 16), v404, (unsigned int *)v3608, 4, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C48ED834, 0, 1, 25);
              v405 = (int)v3608[1];
              if (LODWORD(v3608[1]) == 1)
              {
LABEL_838:
                v3590 = *(_OWORD *)v3608[0];
                goto LABEL_1566;
              }
              if (!LODWORD(v3608[1]))
              {
LABEL_836:
                *(_QWORD *)&v3590 = v9;
LABEL_837:
                DWORD2(v3590) = 0;
                goto LABEL_1566;
              }
LABEL_1563:
              if (v405 == 2)
              {
                v1531 = *(_QWORD *)(a3 + 16);
                v1533 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v3608[0] + 2) + 40)
                                  + 16 * *((unsigned int *)v3608[0] + 6));
                v1532 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v3608[0] + 40) + 16 * *((unsigned int *)v3608[0] + 2));
                v1534 = sub_1C636A8B4(v1531, *v1532, v1532[1], *v1533, v1533[1]);
                v415 = (uint64_t)sub_1C636D6B4(v1531, (const char *)0x37, (const llvm::APInt *)&v3588, v1534, v1535, *(_QWORD *)v3608[0], *((_QWORD *)v3608[0] + 1), v1536, *((_QWORD *)v3608[0] + 2), *((_QWORD *)v3608[0] + 3));
LABEL_1565:
                *(_QWORD *)&v3590 = v415;
                *((_QWORD *)&v3590 + 1) = v416;
LABEL_1566:
                v1500 = (void **)v3608[0];
                if (v3608[0] == &v3609)
                  goto LABEL_2117;
                goto LABEL_1567;
              }
              v3432 = "Not yet supported!";
              break;
            case 2134:
            case 2135:
            case 2136:
            case 2137:
            case 2138:
              v3623 = *v401;
              v3625 = 0;
              LODWORD(v3626) = 0;
              v2979 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 40);
              if (!*(_QWORD *)(v2979 + 48))
                *(_QWORD *)(v2979 + 48) = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2979 + 8)
                                                                                             + 216))(*(_QWORD *)(v2979 + 8), v2979 + 128, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 40));
              __asm { BR              X10 }
              return result;
            case 2140:
            case 2544:
            case 2706:
            case 2707:
            case 2708:
              v2980 = *(_QWORD *)v401;
              v2981 = *((_QWORD *)v401 + 1);
              v2982 = *(_QWORD *)(v9 + 40);
              v2983 = *(llvm **)v2982;
              v2984 = *(_QWORD *)(v2982 + 8);
              v2985 = sub_1C49112E4(v404);
              v2986 = a3;
              v2987 = *(_QWORD *)(a3 + 16);
              v2989 = sub_1C5D428B0(v2987, dword_1C6608FA0[v2985], (llvm *)5, 0);
              v2991 = 0;
              v2992 = *(_QWORD *)(v2987 + 832);
              if (v2992)
                v2991 = *(_WORD *)(v2992 + 8);
              v2993 = sub_1C5D56C70(v2987, 397, (const llvm::APInt *)&v3588, v2983, v2984, v2989, v2988, v2990, v2980, v2981, v2991);
              v415 = (uint64_t)sub_1C636D6B4(*(_QWORD *)(v2986 + 16), (const char *)0x37, (const llvm::APInt *)&v3588, *(_QWORD *)(v9 + 40), *(unsigned __int16 *)(v9 + 58), (uint64_t)v2993, v2994, v2995, v2980, v2981);
              goto LABEL_1565;
            case 2306:
              v3089 = *(uint64_t **)(v9 + 40);
              v3090 = *v3089;
              v3091 = v3089[1];
              v3093 = sub_1C5D428B0(*(_QWORD *)(a3 + 16), 18, (llvm *)5, 0);
              v3094 = v3092;
              if (v3090 == 5)
              {
                v3095 = *(_QWORD *)(a3 + 16);
                v3096 = *(_QWORD *)(v3095 + 832);
                if (v3096)
                  v3097 = *(_WORD *)(v3096 + 8);
                else
                  v3097 = 0;
                v3093 = (uint64_t)sub_1C5D52060(v3095, 396, (const llvm::APInt *)&v3588, (llvm *)4, 0, v3093, v3092, v3097);
                v3094 = v3333;
                v3288 = 0;
                v3286 = *(_QWORD *)(a3 + 16);
                v3334 = *(_QWORD *)(v3286 + 832);
                if (v3334)
                  v3288 = *(_WORD *)(v3334 + 8);
                v3335 = 199;
                v3336 = 5;
                v3337 = 0;
              }
              else
              {
                v3286 = *(_QWORD *)(a3 + 16);
                v3287 = *(_QWORD *)(v3286 + 832);
                if (v3287)
                  v3288 = *(_WORD *)(v3287 + 8);
                else
                  v3288 = 0;
                v3335 = 396;
                v3336 = v3090;
                v3337 = v3091;
              }
              v3338 = sub_1C5D52060(v3286, v3335, (const llvm::APInt *)&v3588, (llvm *)v3336, v3337, v3093, v3094, v3288);
              v415 = (uint64_t)sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v3588, *(_QWORD *)(v9 + 40), *(unsigned __int16 *)(v9 + 58), (uint64_t)v3338, v3339, v3340, **(_QWORD **)(v9 + 32), *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8));
              goto LABEL_1565;
            case 2376:
            case 2377:
            case 2378:
            case 2379:
            case 2380:
            case 2381:
            case 2382:
            case 2383:
            case 2384:
            case 2385:
            case 2386:
            case 2387:
            case 2388:
            case 2389:
            case 2390:
            case 2391:
            case 2392:
            case 2393:
            case 2394:
            case 2395:
            case 2396:
            case 2397:
            case 2398:
            case 2399:
            case 2400:
            case 2401:
            case 2402:
            case 2403:
            case 2404:
            case 2405:
            case 2406:
            case 2407:
              v415 = sub_1C4901290((uint64_t)v10, v9, a3);
              goto LABEL_1565;
            case 2545:
            case 2546:
            case 2547:
            case 2548:
            case 2549:
            case 2550:
            case 2551:
            case 2552:
            case 2553:
            case 2554:
            case 2555:
            case 2556:
            case 2557:
            case 2558:
            case 2559:
            case 2560:
            case 2561:
            case 2562:
            case 2563:
            case 2564:
            case 2565:
            case 2566:
            case 2567:
            case 2568:
            case 2569:
            case 2570:
            case 2571:
            case 2572:
            case 2573:
            case 2574:
            case 2575:
            case 2576:
              v415 = (uint64_t)sub_1C4902578(0, v9, 0, *(_QWORD **)(a3 + 16), (_BYTE *)v10[23037], 0);
              goto LABEL_1565;
            case 2630:
            case 2631:
            case 2632:
            case 2633:
            case 2634:
            case 2635:
            case 2636:
            case 2637:
            case 2638:
            case 2639:
            case 2640:
            case 2641:
            case 2642:
            case 2643:
            case 2644:
            case 2645:
            case 2646:
            case 2647:
            case 2648:
            case 2649:
            case 2650:
            case 2651:
            case 2652:
            case 2653:
            case 2654:
            case 2655:
            case 2656:
            case 2657:
            case 2658:
            case 2659:
            case 2660:
            case 2661:
              v415 = sub_1C4901B44((uint64_t)v10, v9, a3);
              goto LABEL_1565;
            case 2685:
            case 2686:
              v3050 = a3;
              v3051 = (uint64_t *)*((_QWORD *)v401 + 10);
              v3052 = *((unsigned __int16 *)v3051 + 12);
              if (v3052 == 35 || v3052 == 11)
                v3054 = 4096;
              else
                v3054 = 4097;
              if (v404 == 2685)
                v3055 = 16;
              else
                v3055 = 272;
              if (v3052 == 35 || v3052 == 11)
              {
                v3057 = v3051[10];
                v3058 = (uint64_t *)(v3057 + 24);
                if (*(_DWORD *)(v3057 + 32) >= 0x41u)
                  v3058 = (uint64_t *)*v3058;
                v3051 = sub_1C6366AB4(*(_QWORD *)(v3050 + 16), *v3058, (const llvm::APInt *)&v3588, (llvm *)5, 0, 1, 0);
                v3273 = v3059;
              }
              else
              {
                v3273 = *((_DWORD *)v401 + 22);
              }
              v3593[0] = sub_1C6366AB4(*(_QWORD *)(v3050 + 16), v3055, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
              v3593[1] = v3274;
              v3594 = (void **)sub_1C6366AB4(*(_QWORD *)(v3050 + 16), 4, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
              v3595 = v3275;
              v3596 = v3051;
              LODWORD(v3597) = v3273;
              v3598 = (const char *)sub_1C6366AB4(*(_QWORD *)(v3050 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)6, 0, 1, 0);
              v3599 = v3276;
              v3278 = *(_QWORD *)(v9 + 32);
              v3277 = *(_QWORD *)(v9 + 40);
              v3279 = *(_QWORD **)v3278;
              LODWORD(v3601) = *(_DWORD *)(v3278 + 8);
              v3600 = v3279;
              *(_QWORD *)&v3590 = sub_1C5D61678(*(_QWORD *)(v3050 + 16), v3054, (uint64_t)&v3588, v3277, *(unsigned __int16 *)(v9 + 58), (uint64_t *)v3593, 5);
              goto LABEL_837;
            default:
              goto LABEL_2116;
          }
LABEL_3185:
          llvm::report_fatal_error((llvm *)v3432, (const char *)1);
        }
        if ((_DWORD)v13 != 56)
        {
          if ((_DWORD)v13 == 58 && *(_DWORD *)(a3 + 8) && !*(_BYTE *)(v10[23037] + 318))
          {
            v38 = (uint64_t)sub_1C491C2F0((uint64_t)v10, v9, *(_QWORD *)(a3 + 16));
            goto LABEL_20;
          }
          goto LABEL_2116;
        }
        if (*(_DWORD *)(a3 + 8))
        {
          v417 = a3;
          v418 = *(_QWORD *)(v9 + 32);
          v419 = *(_QWORD *)(v9 + 40);
          v420 = *(_QWORD *)v418;
          v421 = *(_QWORD *)(v418 + 8);
          v422 = *(_QWORD *)(v418 + 40);
          v423 = *(unsigned int *)(v418 + 48);
          v425 = *(llvm **)v419;
          v424 = *(_QWORD *)(v419 + 8);
          v426 = *(unsigned __int16 *)(*(_QWORD *)v418 + 24) == 57;
          if (*(_WORD *)(*(_QWORD *)v418 + 24) == 57)
            v427 = *(_QWORD *)v418;
          else
            v427 = *(_QWORD *)(v418 + 40);
          if (v426)
            v428 = v421;
          else
            v428 = v423;
          if (v426)
            v429 = v422;
          else
            v429 = v420;
          if (v426)
            v430 = v421 & 0xFFFFFFFF00000000 | v423;
          else
            v430 = v421;
          v431 = *(unsigned __int16 *)(v427 + 24);
          if (v431 != 57)
            goto LABEL_414;
          v432 = *(_QWORD *)(v427 + 48);
          if (!v432)
            goto LABEL_414;
          v433 = 1;
          do
          {
            if (*(_DWORD *)(v432 + 8) == (_DWORD)v428)
            {
              if (!v433)
                goto LABEL_414;
              --v433;
            }
            v432 = *(_QWORD *)(v432 + 32);
          }
          while (v432);
          if (v433)
            goto LABEL_414;
          v434 = *(uint64_t **)(v427 + 32);
          v435 = v434[5];
          if (*(_WORD *)(v435 + 24) != 58)
            goto LABEL_414;
          v436 = *(_QWORD *)(v435 + 48);
          if (!v436)
            goto LABEL_414;
          v437 = 1;
          v438 = v434[6];
          do
          {
            if (*(_DWORD *)(v436 + 8) == (_DWORD)v438)
            {
              if (!v437)
                goto LABEL_414;
              --v437;
            }
            v436 = *(_QWORD *)(v436 + 32);
          }
          while (v436);
          if (!v437)
          {
            v2226 = *(_QWORD *)(v417 + 16);
            v2227 = *(_QWORD *)(v2226 + 832);
            if (v2227)
              LOWORD(v2227) = *(_WORD *)(v2227 + 8);
            v2228 = sub_1C5D56C70(v2226, 57, (const llvm::APInt *)&v3588, v425, v424, v435, v438, a8, *v434, v434[1], v2227);
            v2231 = *(_QWORD *)(v417 + 16);
            v2232 = *(_QWORD *)(v2231 + 832);
            if (v2232)
              LOWORD(v2232) = *(_WORD *)(v2232 + 8);
            v604 = sub_1C5D56C70(v2231, 57, (const llvm::APInt *)&v3588, v425, v424, v429, v430, v2230, (uint64_t)v2228, v2229, v2232);
          }
          else
          {
            if (*(_WORD *)(v429 + 24) != 56)
              goto LABEL_606;
            v439 = *(_QWORD *)(v429 + 48);
            if (!v439)
              goto LABEL_606;
LABEL_414:
            v440 = v430;
            v441 = 1;
            do
            {
              if (*(_DWORD *)(v439 + 8) == (_DWORD)v430)
              {
                if (!v441)
                  goto LABEL_606;
                --v441;
              }
              v439 = *(_QWORD *)(v439 + 32);
            }
            while (v439);
            if (!v441
              && (v442 = *(_QWORD **)(v429 + 32), *(_WORD *)(*v442 + 24) == 58)
              && *(_WORD *)(v442[5] + 24) == 58)
            {
              v430 = v430 & 0xFFFFFFFF00000000 | v428;
              v443 = v427;
              LODWORD(v428) = v440;
              v427 = v429;
            }
            else
            {
LABEL_606:
              v443 = v429;
              if (v431 != 56)
                goto LABEL_2116;
            }
            v590 = *(_QWORD *)(v427 + 48);
            if (!v590)
              goto LABEL_2116;
            v591 = 1;
            do
            {
              if (*(_DWORD *)(v590 + 8) == (_DWORD)v428)
              {
                if (!v591)
                  goto LABEL_2116;
                --v591;
              }
              v590 = *(_QWORD *)(v590 + 32);
            }
            while (v590);
            if (v591)
              goto LABEL_2116;
            v592 = *(uint64_t **)(v427 + 32);
            v593 = *v592;
            if (*(_WORD *)(*v592 + 24) != 58)
              goto LABEL_2116;
            v594 = v592[5];
            if (*(_WORD *)(v594 + 24) != 58)
              goto LABEL_2116;
            v595 = v592[1];
            v596 = v592[6];
            v597 = *(_QWORD *)(v417 + 16);
            v598 = *(_QWORD *)(v597 + 832);
            if (v598)
              LOWORD(v598) = *(_WORD *)(v598 + 8);
            v600 = sub_1C5D56C70(v597, 56, (const llvm::APInt *)&v3588, v425, v424, v443, v430, a8, v593, v595, v598);
            v602 = *(_QWORD *)(v417 + 16);
            v603 = *(_QWORD *)(v602 + 832);
            if (v603)
              LOWORD(v603) = *(_WORD *)(v603 + 8);
            v604 = sub_1C5D56C70(v602, 56, (const llvm::APInt *)&v3588, v425, v424, (uint64_t)v600, v599, v601, v594, v596, v603);
          }
          v2233 = *(uint64_t **)v417;
          v3593[0] = v604;
          v3593[1] = v605;
          v38 = sub_1C5C5B0B4(v2233, v9, (uint64_t *)v3593, 1, 0);
          goto LABEL_20;
        }
LABEL_2116:
        v3590 = 0uLL;
        goto LABEL_2117;
      }
      if ((_DWORD)v13 != 4)
      {
        v3555 = a3;
        if ((_DWORD)v13 == 15)
        {
          if (**(_BYTE **)(v9 + 40) != 6)
            goto LABEL_2116;
          v477 = sub_1C5D406AC(*(_QWORD *)(a3 + 16), *(_DWORD *)(v9 + 76), (llvm *)5, 0, 0);
          v479 = v478;
          v480 = *(_QWORD *)(a3 + 16);
          v481 = *(void **)(v9 + 64);
          v3593[0] = v481;
          if (v481)
            llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v481, 2);
          LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
          v482 = *(_QWORD *)(v480 + 832);
          if (v482)
            v247 = *(_WORD *)(v482 + 8);
          else
            v247 = 0;
          v769 = v480;
          v770 = 199;
          v241 = 6;
LABEL_1967:
          v242 = 0;
          v244 = v477;
          v245 = v479;
LABEL_1968:
          v1168 = sub_1C5D52060(v769, v770, (const llvm::APInt *)v3593, (llvm *)v241, v242, v244, v245, v247);
LABEL_1969:
          *(_QWORD *)&v3590 = v1168;
          *((_QWORD *)&v3590 + 1) = v1169;
          v1811 = (unsigned __int8 *)v3593[0];
          if (!v3593[0])
            goto LABEL_2117;
          v1812 = v3593;
          goto LABEL_1971;
        }
        if ((_DWORD)v13 != 46)
          goto LABEL_2116;
        v97 = *(_QWORD **)(v9 + 32);
        v98 = *v97;
        v99 = *(_QWORD *)(*v97 + 80);
        v100 = (unsigned int *)(v99 + 24);
        if (*(_DWORD *)(v99 + 32) >= 0x41u)
          v100 = *(unsigned int **)v100;
        v101 = *v100;
        if ((int)v101 > 2304)
        {
          if ((int)v101 > 2605)
          {
            switch((int)v101)
            {
              case 2665:
              case 2666:
              case 2667:
              case 2669:
              case 2670:
              case 2671:
              case 2672:
              case 2673:
              case 2674:
              case 2675:
              case 2676:
              case 2677:
              case 2678:
              case 2679:
                goto LABEL_784;
              case 2668:
              case 2680:
              case 2683:
              case 2685:
              case 2686:
              case 2687:
              case 2688:
              case 2689:
              case 2690:
              case 2691:
              case 2692:
              case 2693:
              case 2694:
              case 2695:
              case 2696:
              case 2697:
              case 2698:
              case 2699:
              case 2700:
              case 2701:
              case 2702:
              case 2703:
              case 2704:
                goto LABEL_2116;
              case 2681:
                goto LABEL_1379;
              case 2682:
LABEL_1381:
                if (!sub_1C49040D8(v97[5]) && !sub_1C49040D8(v97[10]))
                  goto LABEL_2116;
                v726 = *(_OWORD *)(v97 + 15);
                goto LABEL_1601;
              case 2684:
LABEL_1386:
                v444 = v97 + 5;
                v1294 = v97[5];
                v1295 = *(unsigned __int16 *)(v1294 + 24);
                if (v1295 == 35 || v1295 == 11)
                {
                  v1296 = *(_QWORD *)(v1294 + 80);
                  v1297 = (_QWORD *)(v1296 + 24);
                  if (*(_DWORD *)(v1296 + 32) >= 0x41u)
                    v1297 = (_QWORD *)*v1297;
                  if (*v1297 == 1)
                  {
                    v726 = *((_OWORD *)v97 + 5);
                    goto LABEL_1601;
                  }
                }
                v1539 = v97[10];
                v1540 = *(unsigned __int16 *)(v1539 + 24);
                if (v1540 == 35 || v1540 == 11)
                {
                  v1541 = *(_QWORD *)(v1539 + 80);
                  v1542 = (_QWORD *)(v1541 + 24);
                  if (*(_DWORD *)(v1541 + 32) >= 0x41u)
                    v1542 = (_QWORD *)*v1542;
                  if (*v1542 == 1)
                    goto LABEL_789;
                }
                if (!sub_1C49040D8(v1294) && !sub_1C49040D8(v1539))
                  goto LABEL_2116;
                v541 = *(_QWORD *)(v3555 + 16);
                v1543 = *(uint64_t **)(v9 + 40);
                v216 = *v1543;
                v217 = (void *)v1543[1];
                goto LABEL_899;
              case 2705:
LABEL_1384:
                if (!sub_1C49040D8(v97[10]))
                  goto LABEL_2116;
                v726 = *(_OWORD *)(v97 + 5);
                goto LABEL_1601;
              default:
                v856 = v101 - 2606;
                switch((int)v101)
                {
                  case 2606:
                  case 2607:
                  case 2608:
                  case 2609:
                    v858 = (_QWORD *)v97[5];
                    v857 = v97[6];
                    v859 = (_QWORD *)v97[15];
                    v860 = v97[16];
                    if ((_DWORD)v101 != 2608)
                      goto LABEL_2045;
                    v861 = *((unsigned __int16 *)v858 + 12);
                    if (v861 == 36 || v861 == 12)
                      v862 = v97[5];
                    else
                      v862 = 0;
                    v1968 = *((unsigned __int16 *)v859 + 12);
                    if (v1968 == 12 || v1968 == 36)
                    {
                      if (v862)
                        goto LABEL_2045;
                      v1969 = v859[10];
                      v1971 = *(void **)(v1969 + 32);
                      v1970 = (llvm::detail::DoubleAPFloat *)(v1969 + 32);
                      if (v1971 == &unk_1C866F1C0)
                        llvm::detail::DoubleAPFloat::bitcastToAPInt(v1970, (unsigned int *)v3608);
                      else
                        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v1970, (unsigned int *)v3608);
                      v1972 = v3608;
                      if (LODWORD(v3608[1]) >= 0x41)
                        v1972 = (void **)v3608[0];
                      *(_QWORD *)&v3623 = *v1972;
                      v1973 = v859[5] + 16 * v860;
                      v1974 = *(llvm **)v1973;
                      v1975 = *(_QWORD *)(v1973 + 8);
                      v1976 = sub_1C613A34C(*(_QWORD *)v1973, 3);
                      v1977 = *(_QWORD *)(v3555 + 16);
                      v3593[0] = v3588;
                      if (v3588)
                        llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v3588, 2);
                      LODWORD(v3593[1]) = v3589;
                      LODWORD(v3625) = 0;
                      v859 = sub_1C613B2C0(v1977, v1976, (uint64_t)v3593, v1974, v1975, (unsigned int *)&v3625, (uint64_t *)&v3623);
                      if (v3593[0])
                        llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
                      LODWORD(v860) = 0;
                    }
                    else
                    {
                      if (!v862)
                        goto LABEL_2045;
                      v3028 = *(_QWORD *)(v862 + 80);
                      v3030 = *(void **)(v3028 + 32);
                      v3029 = (llvm::detail::DoubleAPFloat *)(v3028 + 32);
                      if (v3030 == &unk_1C866F1C0)
                        llvm::detail::DoubleAPFloat::bitcastToAPInt(v3029, (unsigned int *)v3608);
                      else
                        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v3029, (unsigned int *)v3608);
                      v3031 = v3608;
                      if (LODWORD(v3608[1]) >= 0x41)
                        v3031 = (void **)v3608[0];
                      *(_QWORD *)&v3623 = *v3031;
                      v3032 = v858[5] + 16 * v857;
                      v3033 = *(llvm **)v3032;
                      v3034 = *(_QWORD *)(v3032 + 8);
                      v3035 = sub_1C613A34C(*(_QWORD *)v3032, 3);
                      v3036 = *(_QWORD *)(v3555 + 16);
                      v3593[0] = v3588;
                      if (v3588)
                        llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v3588, 2);
                      LODWORD(v3593[1]) = v3589;
                      LODWORD(v3625) = 0;
                      v858 = sub_1C613B2C0(v3036, v3035, (uint64_t)v3593, v3033, v3034, (unsigned int *)&v3625, (uint64_t *)&v3623);
                      if (v3593[0])
                        llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
                      LODWORD(v857) = 0;
                    }
                    if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
                      MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
LABEL_2045:
                    v1978 = *(_QWORD *)(v9 + 32);
                    v1979 = *(_QWORD *)(v1978 + 80);
                    v1980 = *(unsigned __int16 *)(v1979 + 24);
                    if (v1980 == 11 || v1980 == 35)
                    {
                      v1981 = *(_QWORD *)(v1979 + 80);
                      v1982 = (_QWORD *)(v1981 + 24);
                      if (*(_DWORD *)(v1981 + 32) >= 0x41u)
                        v1982 = (_QWORD *)*v1982;
                      if (!*v1982)
                      {
                        v726 = *(_OWORD *)(v1978 + 40);
                        goto LABEL_1601;
                      }
                    }
                    else
                    {
                      v2446 = *(_QWORD *)(*(_QWORD *)(v3555 + 16) + 40);
                      v2447 = *(_QWORD *)(v2446 + 48);
                      if (!v2447)
                      {
                        v2447 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2446 + 8) + 216))(*(_QWORD *)(v2446 + 8), v2446 + 128, v2446);
                        *(_QWORD *)(v2446 + 48) = v2447;
                      }
                      *(_BYTE *)(v2447 + 453) = 1;
                    }
                    if (v856 > 3)
                      v2448 = 0xFFFFFFFFLL;
                    else
                      v2448 = dword_1C6609150[v856];
                    v38 = (uint64_t)sub_1C6366A24(*(_QWORD *)(v3555 + 16), (const char *)v2448, (const llvm::APInt *)&v3588, **(llvm ***)(v9 + 40), *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8), (uint64_t)v858, v857, a8, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v9 + 32) + 88), (uint64_t)v859, v860, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v9 + 32) + 168));
                    goto LABEL_20;
                  case 2610:
                  case 2611:
                  case 2612:
                  case 2613:
                  case 2614:
                  case 2615:
                  case 2618:
                  case 2619:
                  case 2620:
                  case 2621:
                  case 2622:
                  case 2624:
                  case 2626:
                    goto LABEL_2116;
                  case 2616:
                  case 2617:
                    v2382 = *(void **)(v9 + 64);
                    v3593[0] = v2382;
                    if (v2382)
                    {
                      llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v2382, 2);
                      v12 = *(_DWORD *)(v9 + 60);
                      v97 = *(_QWORD **)(v9 + 32);
                    }
                    LODWORD(v3593[1]) = v12;
                    v3491 = v97[6];
                    v3505 = v97[5];
                    v3539 = v97[10];
                    v3520 = v97[11];
                    v2383 = *(_QWORD *)(v9 + 40);
                    v2384 = *(llvm **)v2383;
                    v3480 = *(_QWORD *)(v2383 + 8);
                    if (*(_QWORD *)v2383 == 4)
                      v2385 = 2580;
                    else
                      v2385 = 2581;
                    v2386 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), v2385, (const llvm::APInt *)v3593, (llvm *)5, 0, 0, 0);
                    v2388 = v2387;
                    v2389 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 1, (const llvm::APInt *)v3593, (llvm *)4, 0, 0, 0);
                    v3464 = v2390;
                    v3472 = (uint64_t)v2389;
                    v2391 = *(_QWORD *)(v3555 + 16);
                    v2392 = sub_1C6366AB4(v2391, 28, (const llvm::APInt *)v3593, (llvm *)4, 0, 0, 0);
                    v2395 = *(_QWORD *)(v2391 + 832);
                    if (v2395)
                      LOWORD(v2395) = *(_WORD *)(v2395 + 8);
                    v2398 = sub_1C5D56C70(v2391, 171, (const llvm::APInt *)v3593, (llvm *)4, 0, v3539, v3520, v2394, (uint64_t)v2392, v2393, v2395);
                    v2399 = v2396;
                    v2400 = *(_QWORD *)(v3555 + 16);
                    v2401 = *(_QWORD *)(v2400 + 832);
                    if (v2401)
                      LOWORD(v2401) = *(_WORD *)(v2401 + 8);
                    v2403 = sub_1C5D58E08(v2400, (const char *)0x2E, (const llvm::APInt *)v3593, v2384, v3480, (uint64_t)v2386, v2388, v2397, v3505, v3491, (uint64_t)v2398, v2396, SHIDWORD(v2396), v2401);
                    v2405 = v2404;
                    v2406 = *(_QWORD *)(v3555 + 16);
                    v2407 = *(_QWORD *)(v2406 + 832);
                    if (v2407)
                      LOWORD(v2407) = *(_WORD *)(v2407 + 8);
                    v2410 = sub_1C5D56C70(v2406, 56, (const llvm::APInt *)v3593, (llvm *)4, 0, (uint64_t)v2398, v2399, v2402, v3472, v3464, v2407);
                    v2411 = v2399 & 0xFFFFFFFF00000000 | v2408;
                    v2412 = *(_QWORD *)(v3555 + 16);
                    v2413 = *(_QWORD *)(v2412 + 832);
                    if (v2413)
                      LOWORD(v2413) = *(_WORD *)(v2413 + 8);
                    v2414 = v2399 & 0xFFFFFFFF00000000;
                    v2415 = sub_1C5D58E08(v2412, (const char *)0x2E, (const llvm::APInt *)v3593, v2384, v3480, (uint64_t)v2386, v2388, v2409, v3505, v3491, (uint64_t)v2410, v2408, (v2399 & 0xFFFFFFFF00000000) >> 32, v2413);
                    v2419 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3593, (uint64_t)v2410, v2411, v3539, v3520, (uint64_t)v2415, v2416, (uint64_t)v2403, v2405, SHIDWORD(v2405), 0x11u);
                    v2420 = *(_QWORD *)(v3555 + 16);
                    v2421 = *(_QWORD *)(v2420 + 832);
                    if (v2421)
                      LOWORD(v2421) = *(_WORD *)(v2421 + 8);
                    v2422 = v2405 & 0xFFFFFFFF00000000 | v2417;
                    v2425 = sub_1C5D56C70(v2420, 56, (const llvm::APInt *)v3593, (llvm *)4, 0, (uint64_t)v2410, v2411, v2418, v3472, v3464, v2421);
                    v2426 = v2423 | v2414;
                    v2427 = *(_QWORD *)(v3555 + 16);
                    v2428 = *(_QWORD *)(v2427 + 832);
                    if (v2428)
                      LOWORD(v2428) = *(_WORD *)(v2428 + 8);
                    v2429 = v2405 & 0xFFFFFFFF00000000;
                    v2430 = sub_1C5D58E08(v2427, (const char *)0x2E, (const llvm::APInt *)v3593, v2384, v3480, (uint64_t)v2386, v2388, v2424, v3505, v3491, (uint64_t)v2425, v2423 | v2414, SHIDWORD(v2414), v2428);
                    v2434 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3593, (uint64_t)v2425, v2426, v3539, v3520, (uint64_t)v2430, v2431, (uint64_t)v2419, v2422, SHIDWORD(v2422), 0x11u);
                    v2435 = *(_QWORD *)(v3555 + 16);
                    v2436 = *(_QWORD *)(v2435 + 832);
                    if (v2436)
                      LOWORD(v2436) = *(_WORD *)(v2436 + 8);
                    v2437 = v2432 | v2429;
                    v2440 = sub_1C5D56C70(v2435, 56, (const llvm::APInt *)v3593, (llvm *)4, 0, (uint64_t)v2425, v2426, v2433, v3472, v3464, v2436);
                    v2441 = v2438 | v2414;
                    v2442 = *(_QWORD *)(v3555 + 16);
                    v2443 = *(_QWORD *)(v2442 + 832);
                    if (v2443)
                      LOWORD(v2443) = *(_WORD *)(v2443 + 8);
                    v2444 = sub_1C5D58E08(v2442, (const char *)0x2E, (const llvm::APInt *)v3593, v2384, v3480, (uint64_t)v2386, v2388, v2439, v3505, v3491, (uint64_t)v2440, v2438 | v2414, SHIDWORD(v2414), v2443);
                    v1168 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3593, (uint64_t)v2440, v2441, v3539, v3520, (uint64_t)v2444, v2445, (uint64_t)v2434, v2437, SHIDWORD(v2437), 0x11u);
                    goto LABEL_1969;
                  case 2623:
                    v1700 = *(unsigned __int8 **)(v9 + 64);
                    *(_QWORD *)&v3623 = v1700;
                    if (v1700)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v3623, v1700, 2);
                      v12 = *(_DWORD *)(v9 + 60);
                      v97 = *(_QWORD **)(v9 + 32);
                    }
                    DWORD2(v3623) = v12;
                    v1701 = *(_WORD *)(v9 + 72);
                    v1702 = *(_QWORD *)(v3555 + 16);
                    v1703 = *(uint64_t **)(v9 + 40);
                    v1704 = *v1703;
                    v1705 = v1703[1];
                    v1706 = v97[5];
                    v1707 = *(unsigned __int16 *)(v1706 + 24);
                    if (v1707 == 36 || v1707 == 12)
                    {
                      v1708 = *(_QWORD *)(v1706 + 80);
                      v1709 = *(_QWORD *)(v1708 + 32);
                      if ((_UNKNOWN *)v1709 == &unk_1C866F1C0)
                      {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v1708 + 32));
                      }
                      else
                      {
                        v3593[1] = *(void **)(v1708 + 32);
                        if ((*(_DWORD *)(v1709 + 8) + 64) >= 0x80)
                          v3594 = (void **)operator new[]();
                        v1710 = *(_BYTE *)(v1708 + 52);
                        v1711 = v1710 & 7;
                        BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v1710 & 8 | v1710 & 7;
                        LODWORD(v3595) = *(_DWORD *)(v1708 + 48);
                        v1713 = (v1710 & 6) != 0 && v1711 != 3;
                        if (v1711 == 1 || v1713)
                        {
                          v1714 = *((unsigned int *)v3593[1] + 2);
                          if ((v1714 - 64) <= 0xFFFFFF7F)
                            v1715 = v3594;
                          else
                            v1715 = (void **)&v3594;
                          v1718 = *(void ***)(v1708 + 40);
                          v1717 = (void **)(v1708 + 40);
                          v1716 = v1718;
                          if ((*((_DWORD *)*(v1717 - 1) + 2) - 64) >= 0xFFFFFF80)
                            v1716 = v1717;
                          if (v1714 <= 0xFFFFFFBF)
                          {
                            v1719 = (unint64_t)(v1714 + 64) >> 6;
                            do
                            {
                              v1720 = *v1716++;
                              *v1715++ = v1720;
                              --v1719;
                            }
                            while (v1719);
                          }
                        }
                      }
                      llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, &v3625);
                      v1721 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
                      v1722 = sin(v1721 * 1.57079633);
                      v1723 = *(void **)(v9 + 64);
                      v3608[0] = v1723;
                      if (v1723)
                        llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v1723, 2);
                      LODWORD(v3608[1]) = *(_DWORD *)(v9 + 60);
                      v1724 = sub_1C5D404C4(v1702, (const llvm::APInt *)v3608, v1704, v1705, 0, v1722);
                      v1726 = v1725;
                      if (v3608[0])
                        llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
                      if (v3593[1] == &unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v3594);
                      }
                      else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
                      {
                        MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      v1726 = 0;
                      v1724 = 0;
                    }
                    if ((unint64_t)v1724 | v1726)
                    {
                      *(_QWORD *)&v3590 = v1724;
                      *((_QWORD *)&v3590 + 1) = v1726;
                    }
                    else
                    {
                      v2649 = *(_QWORD *)(v9 + 32);
                      v2650 = *(uint64_t **)(v2649 + 40);
                      v2651 = *(_QWORD *)(v2649 + 48);
                      v2652 = **(unsigned __int8 **)(v9 + 40);
                      v2653 = *(_QWORD *)(v3555 + 16);
                      if (v2652 == 9)
                      {
                        v2654 = *(_QWORD *)(v2653 + 832);
                        if (v2654)
                          v2655 = *(_WORD *)(v2654 + 8);
                        else
                          v2655 = 0;
                        v2650 = sub_1C5D52060(v2653, 215, (const llvm::APInt *)&v3623, (llvm *)0xA, 0, (uint64_t)v2650, v2651, v2655);
                        v2651 = v2651 & 0xFFFFFFFF00000000 | v3060;
                        v2653 = *(_QWORD *)(v3555 + 16);
                      }
                      v3061 = *(_QWORD *)(v2653 + 832);
                      if (v3061)
                        v3062 = *(_WORD *)(v3061 + 8);
                      else
                        v3062 = 0;
                      v3063 = sub_1C5D52060(v2653, 420, (const llvm::APInt *)&v3623, (llvm *)0xA, 0, (uint64_t)v2650, v2651, v3062);
                      v3065 = v3064;
                      v3066 = *(_QWORD *)(v3555 + 16);
                      v3067 = sub_1C6366AB4(v3066, 2624, (const llvm::APInt *)&v3623, (llvm *)5, 0, 0, 0);
                      v3070 = sub_1C5D56C70(v3066, 46, (const llvm::APInt *)&v3623, (llvm *)0xA, 0, (uint64_t)v3067, v3068, v3069, (uint64_t)v3063, v3065, v1701);
                      v3073 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)&v3623, (llvm *)0xA, 0, (uint64_t)v3063, v3065, v3072, (uint64_t)v3070, v3071, v1701);
                      *(_QWORD *)&v3590 = v3073;
                      *((_QWORD *)&v3590 + 1) = v3074;
                      if (v2652 == 9)
                      {
                        v3075 = (uint64_t)v3073;
                        v3076 = v3074;
                        v3077 = *(_QWORD *)(v3555 + 16);
                        v3078 = sub_1C6366AB4(v3077, 0, (const llvm::APInt *)&v3623, (llvm *)5, 0, 0, 0);
                        v3081 = *(_QWORD *)(v3077 + 832);
                        if (v3081)
                          LOWORD(v3081) = *(_WORD *)(v3081 + 8);
                        *(_QWORD *)&v3590 = sub_1C5D56C70(v3077, 212, (const llvm::APInt *)&v3623, (llvm *)9, 0, v3075, v3076, v3080, (uint64_t)v3078, v3079, v3081);
                        DWORD2(v3590) = v3082;
                      }
                    }
                    goto LABEL_2485;
                  case 2625:
                    goto LABEL_1381;
                  case 2627:
                    goto LABEL_1386;
                  case 2628:
                    if (!*(_BYTE *)(v10[23037] + 353))
                    {
                      v3432 = "Unsupported sqrt intrinsic.";
                      goto LABEL_3185;
                    }
                    v1698 = *(void **)(v9 + 64);
                    v3593[0] = v1698;
                    if (v1698)
                    {
                      llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1698, 2);
                      v12 = *(_DWORD *)(v9 + 60);
                      v97 = *(_QWORD **)(v9 + 32);
                    }
                    LODWORD(v3593[1]) = v12;
                    v244 = v97[5];
                    v245 = v97[6];
                    v247 = *(_WORD *)(v9 + 72);
                    v769 = *(_QWORD *)(v3555 + 16);
                    v1699 = *(uint64_t **)(v9 + 40);
                    v241 = *v1699;
                    v242 = v1699[1];
                    v770 = 419;
                    break;
                  case 2629:
                    goto LABEL_1384;
                  default:
                    if ((_DWORD)v101 != 2732)
                      goto LABEL_2116;
                    goto LABEL_784;
                }
                break;
            }
            goto LABEL_1968;
          }
          switch((int)v101)
          {
            case 2305:
            case 2307:
            case 2308:
            case 2365:
            case 2408:
            case 2409:
            case 2410:
            case 2423:
            case 2444:
            case 2484:
            case 2485:
            case 2486:
              goto LABEL_784;
            case 2306:
            case 2333:
            case 2334:
            case 2335:
            case 2336:
            case 2361:
            case 2362:
            case 2363:
            case 2364:
            case 2366:
            case 2367:
            case 2368:
            case 2369:
            case 2370:
            case 2371:
            case 2372:
            case 2373:
            case 2376:
            case 2377:
            case 2378:
            case 2379:
            case 2380:
            case 2381:
            case 2382:
            case 2383:
            case 2384:
            case 2385:
            case 2386:
            case 2387:
            case 2388:
            case 2389:
            case 2390:
            case 2391:
            case 2392:
            case 2393:
            case 2394:
            case 2395:
            case 2396:
            case 2397:
            case 2398:
            case 2399:
            case 2400:
            case 2401:
            case 2402:
            case 2403:
            case 2404:
            case 2405:
            case 2406:
            case 2407:
            case 2411:
            case 2412:
            case 2413:
            case 2414:
            case 2415:
            case 2416:
            case 2417:
            case 2418:
            case 2419:
            case 2420:
            case 2421:
            case 2422:
            case 2424:
            case 2425:
            case 2426:
            case 2427:
            case 2428:
            case 2429:
            case 2430:
            case 2431:
            case 2432:
            case 2433:
            case 2434:
            case 2435:
            case 2436:
            case 2437:
            case 2438:
            case 2439:
            case 2440:
            case 2441:
            case 2442:
            case 2443:
            case 2447:
            case 2448:
            case 2449:
            case 2450:
            case 2451:
            case 2452:
            case 2453:
            case 2470:
            case 2471:
            case 2472:
            case 2473:
            case 2474:
            case 2475:
            case 2476:
            case 2477:
            case 2478:
            case 2479:
            case 2480:
            case 2481:
            case 2482:
            case 2483:
            case 2488:
            case 2489:
            case 2490:
            case 2493:
            case 2494:
            case 2495:
            case 2496:
            case 2497:
            case 2498:
            case 2499:
            case 2500:
            case 2501:
            case 2502:
            case 2503:
            case 2504:
            case 2505:
            case 2506:
            case 2507:
            case 2508:
            case 2509:
            case 2510:
            case 2511:
            case 2512:
            case 2513:
            case 2514:
            case 2515:
            case 2516:
            case 2518:
            case 2519:
            case 2520:
            case 2521:
            case 2523:
            case 2524:
            case 2525:
              goto LABEL_2116;
            case 2309:
            case 2310:
            case 2311:
            case 2312:
            case 2313:
            case 2314:
            case 2315:
            case 2316:
            case 2317:
            case 2318:
            case 2319:
            case 2320:
            case 2321:
            case 2322:
            case 2323:
            case 2324:
            case 2325:
            case 2326:
            case 2327:
            case 2328:
            case 2329:
            case 2330:
            case 2331:
            case 2332:
            case 2337:
            case 2338:
            case 2339:
            case 2340:
            case 2341:
            case 2342:
            case 2343:
            case 2344:
            case 2345:
            case 2346:
            case 2347:
            case 2348:
            case 2349:
            case 2350:
            case 2351:
            case 2352:
            case 2353:
            case 2354:
            case 2355:
            case 2356:
            case 2357:
            case 2358:
            case 2359:
            case 2360:
            case 2454:
            case 2455:
            case 2456:
            case 2457:
            case 2458:
            case 2459:
            case 2460:
            case 2461:
            case 2462:
            case 2463:
            case 2464:
            case 2465:
            case 2466:
            case 2467:
            case 2468:
            case 2469:
            case 2528:
            case 2529:
            case 2530:
            case 2531:
            case 2532:
            case 2533:
            case 2534:
            case 2535:
            case 2536:
            case 2537:
            case 2538:
            case 2539:
            case 2540:
            case 2541:
            case 2542:
            case 2543:
              goto LABEL_1072;
            case 2374:
            case 2375:
              v2375 = v97[5];
              v2376 = v97[15];
              v2377 = v97[16];
              v2378 = *(_QWORD *)(v3555 + 16);
              if (**(_BYTE **)(v2375 + 40) == 5)
                v2379 = 38;
              else
                v2379 = 40;
              v2380 = *(_QWORD *)(v2378 + 832);
              if (v2380)
                v2381 = *(_WORD *)(v2380 + 8);
              else
                v2381 = 0;
              v2628 = v97[10];
              v2627 = v97[11];
              v2629 = sub_1C5D52060(v2378, 216, (const llvm::APInt *)&v3588, (llvm *)v2379, 0, v2375, v97[6], v2381);
              v2631 = v2630;
              v2632 = *(_QWORD *)(v3555 + 16);
              v2633 = sub_1C6366AB4(v2632, 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
              v2636 = *(_QWORD *)(v2632 + 832);
              if (v2636)
                LOWORD(v2636) = *(_WORD *)(v2636 + 8);
              v2637 = sub_1C5D56C70(v2632, 148, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2629, v2631, v2635, (uint64_t)v2633, v2634, v2636);
              v2640 = v2631 & 0xFFFFFFFF00000000 | v2639;
              v2641 = *(_QWORD *)(v3555 + 16);
              v2642 = *(_QWORD *)(v2641 + 832);
              if (v2642)
                LOWORD(v2642) = *(_WORD *)(v2642 + 8);
              v2644 = sub_1C5D56C70(v2641, 146, (const llvm::APInt *)&v3588, (llvm *)0x26, 0, (uint64_t)v2637, v2640, v2638, v2376, v2377, v2642);
              v2645 = v2643;
              v2646 = *(_QWORD *)(v3555 + 16);
              v2647 = *(_QWORD *)(v2646 + 832);
              if (v2647)
                v2648 = *(_WORD *)(v2647 + 8);
              else
                v2648 = 0;
              v2960 = sub_1C5D52060(v2646, 216, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v2644, v2643, v2648);
              v2962 = v2645 & 0xFFFFFFFF00000000 | v2961;
              if ((_DWORD)v101 == 2375)
              {
                v3144 = *(_QWORD **)(v9 + 32);
                v3146 = v3144[20];
                v3145 = v3144[21];
                v3147 = v3144[25];
                v3148 = v3144[26];
                v3149 = *(_QWORD *)(v3555 + 16);
                v3150 = sub_1C6366AB4(v3149, 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v3153 = 0;
                v3154 = *(_QWORD *)(v3149 + 832);
                if (v3154)
                  v3153 = *(_WORD *)(v3154 + 8);
                v3593[0] = sub_1C5D56C70(v3149, 57, (const llvm::APInt *)&v3588, (llvm *)4, 0, v3147, v3148, v3152, (uint64_t)v3150, v3151, v3153);
                v3593[1] = v3155;
                v3156 = *(_QWORD *)(v3555 + 16);
                v3557 = (unsigned __int8 *)v3588;
                if (v3588)
                  llvm::MetadataTracking::track((uint64_t)&v3557, (unsigned __int8 *)v3588, 2);
                v3558 = v3589;
                LODWORD(v3608[0]) = 0;
                LODWORD(v3623) = 0;
                v3157 = sub_1C6141CF4(v3156, (uint64_t)&v3557, (int *)v3608, (__int128 *)v3593, (int *)&v3623);
                if (v3557)
                  llvm::MetadataTracking::untrack((uint64_t)&v3557, v3557);
                v3158 = *(_QWORD *)(v3555 + 16);
                v3159 = sub_1C6366AB4(v3158, 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v3162 = 0;
                v3163 = *(_QWORD *)(v3158 + 832);
                if (v3163)
                  v3162 = *(_WORD *)(v3163 + 8);
                v3164 = sub_1C5D56C70(v3158, 56, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3157, 0, v3161, (uint64_t)v3159, v3160, v3162);
                v3166 = v3165;
                v3167 = *(_QWORD *)(v3555 + 16);
                v3168 = sub_1C6366AB4(v3167, 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v3171 = 0;
                v3172 = *(_QWORD *)(v3167 + 832);
                if (v3172)
                  v3171 = *(_WORD *)(v3172 + 8);
                v3173 = sub_1C5D56C70(v3167, 57, (const llvm::APInt *)&v3588, (llvm *)4, 0, v3146, v3145, v3170, (uint64_t)v3168, v3169, v3171);
                v3175 = 0;
                v3177 = v3145 & 0xFFFFFFFF00000000 | v3176;
                v3178 = *(_QWORD *)(v3555 + 16);
                v3179 = *(_QWORD *)(v3178 + 832);
                if (v3179)
                  v3175 = *(_WORD *)(v3179 + 8);
                v3181 = sub_1C5D56C70(v3178, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3173, v3177, v3174, (uint64_t)v3164, v3166, v3175);
                v3182 = v3180;
                v3183 = 0;
                v3184 = *(_QWORD *)(v3555 + 16);
                v3185 = *(_QWORD *)(v3184 + 832);
                if (v3185)
                  v3183 = *(_WORD *)(v3185 + 8);
                v3186 = sub_1C5D52060(v3184, 199, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3181, v3180, v3183);
                v3187 = 0;
                v3189 = v3182 & 0xFFFFFFFF00000000 | v3188;
                v3190 = *(_QWORD *)(v3555 + 16);
                v3191 = *(_QWORD *)(v3190 + 832);
                if (v3191)
                  v3187 = *(_WORD *)(v3191 + 8);
                v3192 = v3182 & 0xFFFFFFFF00000000;
                v3193 = sub_1C5D52060(v3190, 199, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3593[0], (unint64_t)v3593[1], v3187);
                v3195 = 0;
                v3593[0] = v3193;
                LODWORD(v3593[1]) = v3196;
                v3197 = *(_QWORD *)(v3555 + 16);
                v3198 = *(_QWORD *)(v3197 + 832);
                if (v3198)
                  v3195 = *(_WORD *)(v3198 + 8);
                v3199 = sub_1C5D56C70(v3197, 172, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3186, v3189, v3194, (uint64_t)v3193, (unint64_t)v3593[1], v3195);
                v3201 = v3200 | v3192;
                v3202 = *(_QWORD *)(v3555 + 16);
                v3203 = sub_1C6366AB4(v3202, 15, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3206 = 0;
                v3207 = *(_QWORD *)(v3202 + 832);
                if (v3207)
                  v3206 = *(_WORD *)(v3207 + 8);
                v3208 = sub_1C5D56C70(v3202, 175, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3199, v3201, v3205, (uint64_t)v3203, v3204, v3206);
                v3210 = v3209;
                v3211 = *(_QWORD *)(v3555 + 16);
                v3212 = sub_1C6366AB4(v3211, 4, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3215 = *(_QWORD *)(v3211 + 832);
                if (v3215)
                  LOWORD(v3215) = *(_WORD *)(v3215 + 8);
                v3216 = v3210 | v3192;
                v3218 = sub_1C5D56C70(v3211, 175, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3164, v3166, v3214, (uint64_t)v3212, v3213, v3215);
                v3220 = v3217;
                v3221 = *(_QWORD *)(v3555 + 16);
                v3222 = *(_QWORD *)(v3221 + 832);
                if (v3222)
                  LOWORD(v3222) = *(_WORD *)(v3222 + 8);
                v3223 = sub_1C5D56C70(v3221, 172, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3218, v3217, v3219, v2628, v2627, v3222);
                v3224 = v3220 & 0xFFFFFFFF00000000;
                v3226 = v3220 & 0xFFFFFFFF00000000 | v3225;
                v3227 = *(_QWORD *)(v3555 + 16);
                v3228 = *(_QWORD *)(v3227 + 832);
                if (v3228)
                  v3229 = *(_WORD *)(v3228 + 8);
                else
                  v3229 = 0;
                v3310 = sub_1C5D52060(v3227, 199, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3223, v3226, v3229);
                v3313 = *(_QWORD *)(v3555 + 16);
                v3314 = *(_QWORD *)(v3313 + 832);
                if (v3314)
                  LOWORD(v3314) = *(_WORD *)(v3314 + 8);
                v3315 = sub_1C5D56C70(v3313, 172, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3208, v3216, v3312, (uint64_t)v3310, v3311 | v3224, v3314);
                v3318 = *(_QWORD *)(v3555 + 16);
                v3319 = *(_QWORD *)(v3318 + 832);
                if (v3319)
                  LOWORD(v3319) = *(_WORD *)(v3319 + 8);
                v2972 = sub_1C5D56C70(v3318, 146, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, (uint64_t)v2960, v2962, v3317, (uint64_t)v3315, v3316, v3319);
              }
              else
              {
                v2963 = *(_QWORD *)(v3555 + 16);
                v2964 = *(_QWORD *)(v2963 + 832);
                if (v2964)
                  v2965 = *(_WORD *)(v2964 + 8);
                else
                  v2965 = 0;
                v2966 = sub_1C5D52060(v2963, 199, (const llvm::APInt *)&v3588, (llvm *)5, 0, v2628, v2627, v2965);
                v2969 = v2627 & 0xFFFFFFFF00000000 | v2968;
                v2970 = *(_QWORD *)(v3555 + 16);
                v2971 = *(_QWORD *)(v2970 + 832);
                if (v2971)
                  LOWORD(v2971) = *(_WORD *)(v2971 + 8);
                v2972 = sub_1C5D56C70(v2970, 146, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, (uint64_t)v2960, v2962, v2967, (uint64_t)v2966, v2969, v2971);
              }
              v2974 = (uint64_t)v2972;
              *(_QWORD *)&v3590 = v2972;
              *((_QWORD *)&v3590 + 1) = v2973;
              v2975 = *(_QWORD *)(v3555 + 16);
              v2976 = *(_QWORD *)(v2975 + 832);
              if (v2976)
                v2977 = *(_WORD *)(v2976 + 8);
              else
                v2977 = 0;
              v1630 = sub_1C5D52060(v2975, 216, (const llvm::APInt *)&v3588, (llvm *)6, 0, v2974, v2973, v2977);
              goto LABEL_2811;
            case 2445:
              v1679 = *(_WORD *)(v9 + 72);
              v1680 = *(_QWORD *)(v3555 + 16);
              v1681 = v1680;
              v1682 = 47;
              goto LABEL_1771;
            case 2446:
              v1679 = *(_WORD *)(v9 + 72);
              v1680 = *(_QWORD *)(v3555 + 16);
              v1681 = v1680;
              v1682 = 48;
LABEL_1771:
              v1695 = sub_1C5D428B0(v1681, v1682, (llvm *)5, 0);
              v1696 = *(_QWORD *)(v1680 + 832);
              if (v1696)
                v1697 = *(_WORD *)(v1696 + 8);
              else
                v1697 = 0;
              v1960 = sub_1C5D52060(v1680, 396, (const llvm::APInt *)&v3588, (llvm *)5, 0, v1695, v1694, v1697);
              v1961 = *(_QWORD *)(v3555 + 16);
              v1962 = *(_QWORD *)(v1961 + 832);
              if (v1962)
                v1963 = *(_WORD *)(v1962 + 8);
              else
                v1963 = 0;
              v1251 = sub_1C5D52060(v1961, 203, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v1960, v1959, v1963);
              v1252 = v1964;
              v1965 = *(_QWORD *)(v3555 + 16);
              v1966 = sub_1C5D404C4(v1965, (const llvm::APInt *)&v3588, 10, 0, 0, 0.5);
              v3434 = v1967;
              v3436 = v1679;
              v3433 = (uint64_t)v1966;
              v326 = v1965;
              v333 = 96;
              v334 = 10;
              goto LABEL_2024;
            case 2487:
              v1688 = *(void **)(v9 + 64);
              v3593[0] = v1688;
              if (v1688)
              {
                llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1688, 2);
                v12 = *(_DWORD *)(v9 + 60);
                v97 = *(_QWORD **)(v9 + 32);
              }
              LODWORD(v3593[1]) = v12;
              v769 = *(_QWORD *)(v3555 + 16);
              v1689 = *(uint64_t **)(v9 + 40);
              v241 = *v1689;
              v242 = v1689[1];
              v244 = v97[5];
              v245 = v97[6];
              v1690 = *(_QWORD *)(v769 + 832);
              if (v1690)
                v247 = *(_WORD *)(v1690 + 8);
              else
                v247 = 0;
              v770 = 420;
              goto LABEL_1968;
            case 2491:
              v1683 = *(_QWORD *)(v9 + 40);
              v1684 = *(llvm **)v1683;
              v1685 = *(_QWORD *)(v1683 + 8);
              v1686 = (_BYTE *)v10[23037];
              if (v1686[318])
              {
                v1687 = 4;
              }
              else if (v1686[319])
              {
                v1687 = 5;
              }
              else if (v1686[320])
              {
                v1687 = 6;
              }
              else if (v1686[321])
              {
                v1687 = 7;
              }
              else
              {
                v1687 = 9;
              }
              v2746 = sub_1C5D428B0(*(_QWORD *)(v3555 + 16), 33, (llvm *)5, 0);
              v2747 = *(_QWORD *)(v3555 + 16);
              v2748 = *(_QWORD *)(v2747 + 832);
              if (v2748)
                v2749 = *(_WORD *)(v2748 + 8);
              else
                v2749 = 0;
              v2750 = sub_1C5D52060(v2747, 396, (const llvm::APInt *)&v3588, v1684, v1685, v2746, v2745, v2749);
              v2752 = v2751;
              if (((1 << v1687) & 0x2C0) != 0)
              {
                v2753 = *(_QWORD *)(v3555 + 16);
                v2754 = sub_1C6366AB4(v2753, 3, (const llvm::APInt *)&v3588, v1684, v1685, 0, 0);
                v2757 = *(_QWORD *)(v2753 + 832);
                if (v2757)
                  LOWORD(v2757) = *(_WORD *)(v2757 + 8);
                v2750 = sub_1C5D56C70(v2753, 171, (const llvm::APInt *)&v3588, v1684, v1685, (uint64_t)v2750, v2752, v2756, (uint64_t)v2754, v2755, v2757);
                v2752 = v2752 & 0xFFFFFFFF00000000 | v2758;
              }
              if (v1684 != 5)
              {
                *(_QWORD *)&v3590 = v2750;
                *((_QWORD *)&v3590 + 1) = v2752;
                goto LABEL_2117;
              }
              v33 = *(_QWORD **)(v3555 + 16);
              v2759 = v33[104];
              if (v2759)
                v36 = *(_WORD *)(v2759 + 8);
              else
                v36 = 0;
              v896 = 199;
              v898 = 5;
              v899 = 0;
              v32 = (uint64_t)v2750;
              v34 = v2752;
              goto LABEL_2030;
            case 2492:
              v1691 = *(_QWORD *)(v9 + 40);
              v1692 = (_BYTE *)v10[23037];
              if (v1692[318])
              {
                v1693 = 4;
              }
              else if (v1692[319])
              {
                v1693 = 5;
              }
              else if (v1692[320])
              {
                v1693 = 6;
              }
              else if (v1692[321])
              {
                v1693 = 7;
              }
              else
              {
                v1693 = 9;
              }
              v2761 = *(llvm **)v1691;
              v2760 = *(_QWORD *)(v1691 + 8);
              v2763 = sub_1C5D428B0(*(_QWORD *)(v3555 + 16), 34, (llvm *)5, 0);
              v2764 = *(_QWORD *)(v3555 + 16);
              v2765 = *(_QWORD *)(v2764 + 832);
              if (v2765)
                v2766 = *(_WORD *)(v2765 + 8);
              else
                v2766 = 0;
              v2768 = sub_1C5D52060(v2764, 396, (const llvm::APInt *)&v3588, (llvm *)4, 0, v2763, v2762, v2766);
              v2769 = v2767;
              if (((1 << v1693) & 0x2C0) != 0)
              {
                if (v2761 != 4)
                {
                  v2770 = *(_QWORD *)(v3555 + 16);
                  v2771 = *(_QWORD *)(v2770 + 832);
                  if (v2771)
                    v2772 = *(_WORD *)(v2771 + 8);
                  else
                    v2772 = 0;
                  v2768 = sub_1C5D52060(v2770, 199, (const llvm::APInt *)&v3588, v2761, v2760, (uint64_t)v2768, v2767, v2772);
                  v2769 = v2769 & 0xFFFFFFFF00000000 | v2996;
                }
                v2997 = *(_QWORD *)(v3555 + 16);
                v2998 = sub_1C6366AB4(v2997, 8, (const llvm::APInt *)&v3588, v2761, v2760, 0, 0);
                v3001 = *(_QWORD *)(v2997 + 832);
                if (v3001)
                  LOWORD(v3001) = *(_WORD *)(v3001 + 8);
                v3002 = sub_1C5D56C70(v2997, 58, (const llvm::APInt *)&v3588, v2761, v2760, (uint64_t)v2768, v2769, v3000, (uint64_t)v2998, v2999, v3001);
                v3004 = v2769 & 0xFFFFFFFF00000000 | v3003;
                v3005 = *(_QWORD *)(v3555 + 16);
                v3007 = sub_1C6366AB4(v3005, 2586, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3008 = 0;
                v3009 = *(_QWORD *)(v3005 + 832);
                if (v3009)
                  v3008 = *(_WORD *)(v3009 + 8);
                v3010 = sub_1C5D52060(v3005, 46, (const llvm::APInt *)&v3588, v2761, v2760, (uint64_t)v3007, v3006, v3008);
                v3012 = v3011;
                v3013 = *(_QWORD *)(v3555 + 16);
                v3014 = sub_1C6366AB4(v3013, 2, (const llvm::APInt *)&v3588, v2761, v2760, 0, 0);
                v3017 = *(_QWORD *)(v3013 + 832);
                if (v3017)
                  LOWORD(v3017) = *(_WORD *)(v3017 + 8);
                v3018 = v2769 & 0xFFFFFFFF00000000;
                v3019 = sub_1C5D56C70(v3013, 177, (const llvm::APInt *)&v3588, v2761, v2760, (uint64_t)v3010, v3012, v3016, (uint64_t)v3014, v3015, v3017);
                v3022 = v3012 & 0xFFFFFFFF00000000 | v3021;
                v3023 = *(_QWORD *)(v3555 + 16);
                v3024 = *(_QWORD *)(v3023 + 832);
                if (v3024)
                  LOWORD(v3024) = *(_WORD *)(v3024 + 8);
                v2768 = sub_1C5D56C70(v3023, 56, (const llvm::APInt *)&v3588, v2761, v2760, (uint64_t)v3002, v3004, v3020, (uint64_t)v3019, v3022, v3024);
                v2769 = v3025 | v3018;
              }
              v3026 = (unsigned __int8 *)(v2768[5] + 16 * v2769);
              if (*v3026 == v2761 && (*v3026 || *((_QWORD *)v3026 + 1) == v2760))
              {
                *(_QWORD *)&v3590 = v2768;
                goto LABEL_2844;
              }
              v33 = *(_QWORD **)(v3555 + 16);
              v3027 = v33[104];
              if (v3027)
                v36 = *(_WORD *)(v3027 + 8);
              else
                v36 = 0;
              v896 = 199;
              v898 = (uint64_t)v2761;
              v899 = (void *)v2760;
              v32 = (uint64_t)v2768;
              goto LABEL_2842;
            case 2517:
              goto LABEL_1267;
            case 2522:
              v541 = *(_QWORD *)(v3555 + 16);
              v2577 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v541 + 16) + 640) + 16);
              break;
            case 2526:
              goto LABEL_1293;
            case 2527:
LABEL_1379:
              if (sub_1C49040D8(v97[5]))
              {
                v444 = v97 + 10;
                goto LABEL_789;
              }
              if (!sub_1C49040D8(v97[10]))
                goto LABEL_2116;
              v726 = *(_OWORD *)(v97 + 5);
              goto LABEL_1601;
            default:
              if ((v101 - 2586) >= 2)
                goto LABEL_2116;
              goto LABEL_784;
          }
          while (1)
          {
            v2577 = *(_QWORD *)(v2577 + 8);
            if (!v2577)
              break;
            v2578 = *(_QWORD *)(v2577 + 24);
            v2579 = *(unsigned __int8 *)(v2578 + 16);
            if (v2578)
              v2580 = v2579 >= 0x1C;
            else
              v2580 = 0;
            if (v2580 && v2579 - 29 < 0xB)
            {
              v2582 = sub_1C5D428B0(v541, 313, (llvm *)4, 0);
              v2584 = v2583;
              v2585 = *(_QWORD *)(v3555 + 16);
              if (*(_BYTE *)(v10[23037] + 326))
              {
                v3098 = sub_1C6366AB4(v2585, 2579, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3100 = v3099;
                v3101 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 2524, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3103 = v3102;
                v3549 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 2168, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v3105 = v3104;
                v3106 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v3108 = v3107;
                v3109 = *(_QWORD **)(v3555 + 16);
                v3110 = sub_1C6367818(v3109, 0x11u);
                v3113 = 0;
                v3114 = v3109[104];
                if (v3114)
                  v3113 = *(_WORD *)(v3114 + 8);
                v3115 = sub_1C5D58E08((uint64_t)v3109, (const char *)0xC1, (const llvm::APInt *)&v3588, (llvm *)2, 0, v2582, v2584, v3112, (uint64_t)v3106, v3108, v3110, v3111, SHIDWORD(v3111), v3113);
                v3118 = 0;
                v3119 = *(_QWORD *)(v3555 + 16);
                v3120 = *(_QWORD *)(v3119 + 832);
                if (v3120)
                  v3118 = *(_WORD *)(v3120 + 8);
                v3121 = sub_1C5D56C70(v3119, 46, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3098, v3100, v3117, (uint64_t)v3115, v3116, v3118);
                v3124 = 0;
                *(_QWORD *)&v3590 = v3121;
                *((_QWORD *)&v3590 + 1) = v3122;
                v3125 = *(_QWORD *)(v3555 + 16);
                v3126 = *(_QWORD *)(v3125 + 832);
                if (v3126)
                  v3124 = *(_WORD *)(v3126 + 8);
                v3127 = sub_1C5D56C70(v3125, 46, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3101, v3103, v3123, (uint64_t)v3121, v3122, v3124);
                v3129 = 0;
                *(_QWORD *)&v3590 = v3127;
                DWORD2(v3590) = v3130;
                v3131 = *(_QWORD *)(v3555 + 16);
                v3132 = *(_QWORD *)(v3131 + 832);
                if (v3132)
                  v3129 = *(_WORD *)(v3132 + 8);
                v3133 = sub_1C5D56C70(v3131, 46, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v3549, v3105, v3128, (uint64_t)v3127, *((unint64_t *)&v3590 + 1), v3129);
                v3134 = 0;
                *(_QWORD *)&v3590 = v3133;
                DWORD2(v3590) = v3135;
                v3136 = *(_QWORD *)(v3555 + 16);
                v3137 = *(_QWORD *)(v3136 + 832);
                if (v3137)
                  v3134 = *(_WORD *)(v3137 + 8);
                *(_QWORD *)&v3590 = sub_1C5D52060(v3136, 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3133, *((unint64_t *)&v3590 + 1), v3134);
                DWORD2(v3590) = v3138;
                v3139 = *(_QWORD *)(v3555 + 16);
                v3141 = sub_1C6366AB4(v3139, 31, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v3143 = *(_QWORD *)(v3139 + 832);
                if (v3143)
                  LOWORD(v3143) = *(_WORD *)(v3143 + 8);
                v1630 = sub_1C5D56C70(v3139, 57, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3141, v3140, v3142, v3590, *((unint64_t *)&v3590 + 1), v3143);
              }
              else
              {
                v2586 = sub_1C6366AB4(v2585, 2584, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v2588 = v2587;
                v2589 = *(_QWORD *)(v3555 + 16);
                v2590 = sub_1C6366AB4(v2589, 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v2593 = 0;
                v2594 = *(_QWORD *)(v2589 + 832);
                if (v2594)
                  v2593 = *(_WORD *)(v2594 + 8);
                v3544 = sub_1C5D58E08(v2589, (const char *)0x2E, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2586, v2588, v2592, v2582, v2584, (uint64_t)v2590, v2591, SHIDWORD(v2591), v2593);
                v3523 = v2595;
                v2596 = *(_QWORD *)(v3555 + 16);
                v2597 = sub_1C6366AB4(v2596, 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v2600 = 0;
                v2601 = *(_QWORD *)(v2596 + 832);
                if (v2601)
                  v2600 = *(_WORD *)(v2601 + 8);
                v2602 = sub_1C5D58E08(v2596, (const char *)0x2E, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2586, v2588, v2599, v2582, v2584, (uint64_t)v2597, v2598, SHIDWORD(v2598), v2600);
                v3494 = v2603;
                v3508 = (uint64_t)v2602;
                v2604 = *(_QWORD *)(v3555 + 16);
                v2605 = sub_1C6366AB4(v2604, 2, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                v2608 = 0;
                v2609 = *(_QWORD *)(v2604 + 832);
                if (v2609)
                  v2608 = *(_WORD *)(v2609 + 8);
                v2610 = sub_1C5D58E08(v2604, (const char *)0x2E, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2586, v2588, v2607, v2582, v2584, (uint64_t)v2605, v2606, SHIDWORD(v2606), v2608);
                v2612 = v2611;
                v2613 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v2615 = v2614;
                v2616 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 1, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v2618 = v2617;
                v2619 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 2, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v2621 = v2620;
                v2622 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 3, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                *(_QWORD *)&v3590 = 0;
                DWORD2(v3590) = 0;
                *(_QWORD *)&v3590 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)&v3588, (uint64_t)v2610, v2612, (uint64_t)v2613, v2615, (uint64_t)v2619, v2621, (uint64_t)v2622, v2623, v2624, 0x11u);
                DWORD2(v3590) = v2625;
                *(_QWORD *)&v3590 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)&v3588, v3508, v3494, (uint64_t)v2613, v2615, (uint64_t)v2616, v2618, v3590, v2625, SHIDWORD(v3590), 0x11u);
                DWORD2(v3590) = v2626;
                v1630 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)&v3588, (uint64_t)v3544, v3523, (uint64_t)v2613, v2615, (uint64_t)v2613, v2615, v3590, v2626, SHIDWORD(v3590), 0x11u);
              }
              goto LABEL_2811;
            }
          }
          v543 = 0;
          v216 = 4;
LABEL_537:
          v217 = 0;
LABEL_538:
          v38 = (uint64_t)sub_1C6366AB4(v541, v543, (const llvm::APInt *)&v3588, (llvm *)v216, (uint64_t)v217, 0, 0);
          goto LABEL_20;
        }
        if ((int)v101 > 1280)
        {
          switch((int)v101)
          {
            case 2107:
            case 2108:
            case 2139:
            case 2145:
            case 2146:
            case 2147:
            case 2150:
            case 2151:
            case 2152:
            case 2154:
            case 2155:
            case 2156:
            case 2167:
            case 2169:
            case 2170:
            case 2173:
            case 2174:
            case 2175:
            case 2176:
              goto LABEL_784;
            case 2109:
            case 2110:
            case 2111:
            case 2112:
            case 2113:
            case 2114:
            case 2133:
            case 2134:
            case 2135:
            case 2136:
            case 2137:
            case 2138:
            case 2140:
            case 2141:
            case 2142:
            case 2143:
            case 2144:
            case 2148:
            case 2149:
            case 2153:
            case 2157:
            case 2158:
            case 2163:
            case 2164:
            case 2165:
            case 2166:
              goto LABEL_2116;
            case 2115:
            case 2116:
            case 2117:
            case 2118:
            case 2119:
            case 2120:
            case 2121:
            case 2122:
            case 2123:
            case 2124:
            case 2125:
            case 2126:
            case 2127:
            case 2128:
            case 2129:
            case 2130:
LABEL_1072:
              v992 = v97[5];
              v993 = v97[6];
              LODWORD(v3625) = 0;
              LODWORD(v3591) = 0;
              LODWORD(v3586) = 0;
              v3585 = 0;
              sub_1C614308C(v101, (int *)&v3625, (int *)&v3591, (int *)&v3586, (int *)&v3585);
              v994 = (void **)sub_1C6366AB4(*(_QWORD *)(v3555 + 16), (int)v3591, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
              v996 = v995;
              v997 = *(_QWORD *)(v3555 + 16);
              v998 = *(_QWORD *)(*(_QWORD *)(v997 + 40) + 344);
              v999 = *(unsigned __int16 *)(v992 + 24);
              if (v999 <= 0x26 && ((1 << v999) & 0x6000006000) != 0)
              {
                v1000 = sub_1C5EAB3E0(*(llvm::GlobalValue **)(v992 + 80), *(_QWORD *)(v992 + 88), v998, 256);
                v1001 = v3555;
                v1002 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), v1000, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
              }
              else
              {
                v1632 = sub_1C63663BC(v997, v992, v993, (uint64_t)&v3588, 4, 0);
                v1001 = v3555;
                v1002 = sub_1C4904134(v1632, v1633, *(_QWORD *)(v3555 + 16));
              }
              if ((_DWORD)v3586)
              {
                v1005 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 80);
                v1006 = *(unsigned __int16 *)(v1005 + 24);
                if (v1006 > 0x26 || ((1 << v1006) & 0x6000006000) == 0)
                  goto LABEL_2116;
                v1007 = 3;
              }
              else
              {
                v1005 = 0;
                v1007 = 2;
              }
              v3593[0] = &v3594;
              v3594 = v994;
              v3595 = v996;
              v3596 = v1002;
              v3597 = v1003;
              v3593[1] = (void *)0x400000002;
              if ((_DWORD)v3586)
              {
                v2173 = sub_1C5EAB3E0(*(llvm::GlobalValue **)(v1005 + 80), *(_QWORD *)(v1005 + 88), v998, 256);
                v2174 = sub_1C6366AB4(*(_QWORD *)(v1001 + 16), v2173, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
                v2175 = v1003;
                v2176 = v3593[1];
                if (LODWORD(v3593[1]) >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
                  v2176 = v3593[1];
                }
                v2177 = (char *)v3593[0] + 16 * v2176;
                *v2177 = v2174;
                v2177[1] = v2175;
                v2172 = ++LODWORD(v3593[1]);
                v1001 = v3555;
              }
              else
              {
                v2172 = 2;
              }
              if (v1007 >= *(unsigned __int16 *)(v9 + 56)
                || ((v101 - 2325) > 0x23 || ((1 << (v101 - 21)) & 0xFF00000FFLL) == 0)
                && (v101 - 2528) >= 0x10)
              {
                goto LABEL_2287;
              }
              v2178 = (_QWORD *)(*(_QWORD *)(v9 + 32) + 40 * v1007);
              v2179 = (_QWORD *)*v2178;
              v2180 = v2178[1];
              v2181 = *(unsigned __int16 *)(*v2178 + 24);
              if (v2181 != 35 && v2181 != 11)
                goto LABEL_2284;
              v2182 = v2179[10];
              v2183 = (_QWORD *)(v2182 + 24);
              if (*(_DWORD *)(v2182 + 32) >= 0x41u)
                v2183 = (_QWORD *)*v2183;
              if (*v2183 < 4uLL)
              {
                v2179 = sub_1C5D3FAF8(*(_QWORD *)(v3555 + 16), v2182, (const llvm::APInt *)&v3588, (llvm *)4, 0, 1, 0);
                v2180 = v2180 & 0xFFFFFFFF00000000 | v1003;
                v2172 = v3593[1];
LABEL_2284:
                if (v2172 >= HIDWORD(v3593[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v2172 + 1, 16);
                  v2172 = v3593[1];
                }
                v2184 = (char *)v3593[0] + 16 * v2172;
                *v2184 = v2179;
                v2184[1] = v2180;
                ++LODWORD(v3593[1]);
                v1001 = v3555;
LABEL_2287:
                *(_OWORD *)v3608 = *(_OWORD *)*(_QWORD *)(v9 + 40);
                v2185 = (llvm *)sub_1C6131264((unsigned __int8 *)v3608, v1003, v1004);
                v2187 = v2186;
                v2188 = (int)v3625;
                if ((_DWORD)v3625 == 1)
                {
                  v2189 = *(_QWORD *)(v1001 + 16);
                  v2190 = (const char *)v3585;
                  v2191 = *(void **)(v9 + 64);
                  v3608[0] = v2191;
                  if (v2191)
                    llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v2191, 2);
                  LODWORD(v3608[1]) = *(_DWORD *)(v9 + 60);
                  v2192 = *(_QWORD *)(v2189 + 832);
                  if (v2192)
                    v2193 = *(unsigned __int16 *)(v2192 + 8);
                  else
                    v2193 = 0;
                  *(_QWORD *)&v3590 = sub_1C636D0C8(v2189, v2190, (const llvm::APInt *)v3608, v2185, v2187, (uint64_t *)v3593[0], LODWORD(v3593[1]), v2193);
                  *((_QWORD *)&v3590 + 1) = v2199;
                  if (v3608[0])
                    llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
                }
                else
                {
                  v2194 = *(_QWORD *)(v1001 + 16);
                  v2195 = (const char *)v3585;
                  v2196 = *(void **)(v9 + 64);
                  v3608[0] = v2196;
                  if (v2196)
                    llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v2196, 2);
                  LODWORD(v3608[1]) = *(_DWORD *)(v9 + 60);
                  v2197 = *(_QWORD *)(v2194 + 832);
                  if (v2197)
                    v2198 = *(unsigned __int16 *)(v2197 + 8);
                  else
                    v2198 = 0;
                  v2200 = sub_1C636D0C8(v2194, v2195, (const llvm::APInt *)v3608, (llvm *)0xAE, 0, (uint64_t *)v3593[0], LODWORD(v3593[1]), v2198);
                  v2202 = v2201;
                  if (v3608[0])
                    llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
                  v3608[0] = &v3609;
                  v3608[1] = (void *)0x400000000;
                  if (v2185 == 9)
                    v2203 = 1;
                  else
                    v2203 = 25;
                  if (v2188)
                  {
                    for (i = 0; i != v2188; ++i)
                    {
                      v2205 = sub_1C636E638(*(_QWORD *)(v3555 + 16), v2203 + i, (const llvm::APInt *)&v3588, v2185, v2187, (uint64_t)v2200, v2202);
                      v2207 = v2206;
                      v2208 = LODWORD(v3608[1]);
                      if (LODWORD(v3608[1]) >= (unint64_t)HIDWORD(v3608[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
                        v2208 = LODWORD(v3608[1]);
                      }
                      v2209 = (char *)v3608[0] + 16 * v2208;
                      *v2209 = v2205;
                      v2209[1] = v2207;
                      ++LODWORD(v3608[1]);
                    }
                    if (v2188 == 3)
                    {
                      v2210 = *(_QWORD *)(v3555 + 16);
                      v2211 = *(unsigned __int8 **)(v9 + 64);
                      *(_QWORD *)&v3623 = v2211;
                      if (v2211)
                        llvm::MetadataTracking::track((uint64_t)&v3623, v2211, 2);
                      DWORD2(v3623) = *(_DWORD *)(v9 + 60);
                      v2212 = sub_1C5D51E4C(v2210, 51, (uint64_t)&v3623, v2185, v2187);
                      v2214 = v2213;
                      v2215 = v3608[1];
                      if (LODWORD(v3608[1]) >= HIDWORD(v3608[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
                        v2215 = v3608[1];
                      }
                      v2216 = (char *)v3608[0] + 16 * v2215;
                      *v2216 = v2212;
                      v2216[1] = v2214;
                      ++LODWORD(v3608[1]);
                      if ((_QWORD)v3623)
                        llvm::MetadataTracking::untrack((uint64_t)&v3623, (unsigned __int8 *)v3623);
                    }
                  }
                  v2217 = *(_QWORD *)(v3555 + 16);
                  v2218 = *(unsigned __int8 **)(v9 + 64);
                  *(_QWORD *)&v3623 = v2218;
                  if (v2218)
                    llvm::MetadataTracking::track((uint64_t)&v3623, v2218, 2);
                  DWORD2(v3623) = *(_DWORD *)(v9 + 60);
                  v2219 = *(_QWORD *)(v9 + 40);
                  v2220 = *(llvm **)v2219;
                  v2221 = *(_QWORD *)(v2219 + 8);
                  v2222 = *(_QWORD *)(v2217 + 832);
                  if (v2222)
                    v2223 = *(unsigned __int16 *)(v2222 + 8);
                  else
                    v2223 = 0;
                  *(_QWORD *)&v3590 = sub_1C636D0C8(v2217, (const char *)0x92, (const llvm::APInt *)&v3623, v2220, v2221, (uint64_t *)v3608[0], LODWORD(v3608[1]), v2223);
                  *((_QWORD *)&v3590 + 1) = v2224;
                  if ((_QWORD)v3623)
                    llvm::MetadataTracking::untrack((uint64_t)&v3623, (unsigned __int8 *)v3623);
                  if (v3608[0] != &v3609)
                    free(v3608[0]);
                }
                v1500 = (void **)v3593[0];
                goto LABEL_2327;
              }
              v3432 = "Invalid sample offset in sample mode itr/itrproj. Only 0, 1, 2, and 3 are supported sample mode offsets.";
              goto LABEL_3185;
            case 2131:
              v1751 = (uint64_t *)v97[5];
              v1752 = (uint64_t *)v1751[5];
              v1753 = *((unsigned __int16 *)v1751 + 12);
              if (v1753 == 12)
                goto LABEL_1840;
              v1754 = v97[6];
              if (v1753 == 46)
              {
                v2282 = *(_QWORD *)(*(_QWORD *)v1751[4] + 80);
                v2283 = (_QWORD *)(v2282 + 24);
                if (*(_DWORD *)(v2282 + 32) >= 0x41u)
                  v2283 = (_QWORD *)*v2283;
                if (*v2283 == 2131)
                {
                  *(_QWORD *)&v3590 = v97[5];
                  *((_QWORD *)&v3590 + 1) = v1754;
                  goto LABEL_2117;
                }
                goto LABEL_2116;
              }
              if (v1753 != 36)
              {
                v2284 = v97[1];
                v2285 = (llvm **)&v1752[2 * v1754];
                v2286 = *v2285;
                v2287 = (uint64_t)v2285[1];
                if ((v1753 - 401) > 1)
                  goto LABEL_2419;
                v2288 = v1751[6];
                if (!v2288)
                  goto LABEL_2419;
                v2289 = 1;
                do
                {
                  if (*(_DWORD *)(v2288 + 8) == (_DWORD)v1754)
                  {
                    if (!v2289)
                      goto LABEL_2419;
                    --v2289;
                  }
                  v2288 = *(_QWORD *)(v2288 + 32);
                }
                while (v2288);
                if (v2289)
                {
LABEL_2419:
                  if (*(int *)(v3555 + 8) >= 2 && v1753 == 212)
                  {
                    v2290 = v1751[6];
                    if (!v2290)
                      goto LABEL_2116;
                    v2291 = 1;
                    do
                    {
                      if (*(_DWORD *)(v2290 + 8) == (_DWORD)v1754)
                      {
                        if (!v2291)
                          goto LABEL_2116;
                        --v2291;
                      }
                      v2290 = *(_QWORD *)(v2290 + 32);
                    }
                    while (v2290);
                    if (v2291)
                      goto LABEL_2116;
                    v2292 = (uint64_t *)v1751[4];
                    v2293 = *v2292;
                    v2294 = v2292[1];
                    v2295 = *(_QWORD *)(v3555 + 16);
                    v2296 = *(_QWORD *)(*v2292 + 40);
                    v2297 = *(unsigned __int16 *)(*v2292 + 58);
                    v3593[0] = *(void **)v97;
                    LODWORD(v3593[1]) = v2284;
                    v3594 = (void **)v2293;
                    LODWORD(v3595) = v2294;
                    v2298 = *(_QWORD *)(v2295 + 832);
                    if (v2298)
                      v2299 = *(_WORD *)(v2298 + 8);
                    else
                      v2299 = 0;
                    if (sub_1C5D618C0(v2295, 0x2Eu, v2296, v2297, (uint64_t *)v3593, 2, v2299)
                      || sub_1C48EEC38(v2293, v2294, 0, 0))
                    {
                      v3341 = *(_QWORD *)(v3555 + 16);
                      v3342 = *(_QWORD *)(v3341 + 832);
                      if (v3342)
                        LOWORD(v3342) = *(_WORD *)(v3342 + 8);
                      v1251 = sub_1C5D56C70(v3341, 46, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, v98, v2284, a8, v2293, v2294, v3342);
                      v1252 = v3343;
                      sub_1C5C5B004(*(_QWORD *)v3555, (uint64_t)v1251);
                      v1673 = *(_QWORD *)(v3555 + 16);
                      v1674 = v1673;
                      v1675 = 0;
LABEL_1756:
                      v1676 = sub_1C6366AB4(v1674, v1675, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                      v1678 = *(_QWORD *)(v1673 + 832);
                      if (v1678)
                        LOWORD(v1678) = *(_WORD *)(v1678 + 8);
                      v3434 = v1677;
                      v3436 = v1678;
                      v3433 = (uint64_t)v1676;
                      v326 = v1673;
                      v333 = 212;
                      v334 = 9;
LABEL_2024:
                      v811 = 0;
LABEL_2255:
                      v328 = v1251;
                      v329 = v1252;
                      goto LABEL_1650;
                    }
                    v1753 = *((unsigned __int16 *)v1751 + 12);
                  }
                  if (v1753 != 192)
                  {
                    if (v1753 != 215)
                      goto LABEL_2116;
                    v3230 = v1751[6];
                    if (!v3230)
                      goto LABEL_2116;
                    v3231 = 1;
                    do
                    {
                      if (*(_DWORD *)(v3230 + 8) == (_DWORD)v1754)
                      {
                        if (!v3231)
                          goto LABEL_2116;
                        --v3231;
                      }
                      v3230 = *(_QWORD *)(v3230 + 32);
                    }
                    while (v3230);
                    if (v3231)
                      goto LABEL_2116;
                    v3232 = (uint64_t *)v1751[4];
                    if (*(_BYTE *)(v10[23037] + 347))
                    {
                      v3233 = *v3232;
                      if (*(_WORD *)(*v3232 + 24) == 99)
                        goto LABEL_2116;
                    }
                    else
                    {
                      v3233 = *v3232;
                    }
                    v3320 = v3232[1];
                    v3321 = *(_QWORD *)(v3555 + 16);
                    v3322 = *(_QWORD *)(v3321 + 832);
                    if (v3322)
                      LOWORD(v3322) = *(_WORD *)(v3322 + 8);
                    v3323 = sub_1C5D56C70(v3321, 46, (const llvm::APInt *)&v3588, (llvm *)9, 0, v98, v2284, a8, v3233, v3320, v3322);
                    v3325 = v3324;
                    sub_1C5C5B004(*(_QWORD *)v3555, (uint64_t)v3323);
                    v33 = *(_QWORD **)(v3555 + 16);
                    v3326 = v33[104];
                    if (v3326)
                      v36 = *(_WORD *)(v3326 + 8);
                    else
                      v36 = 0;
                    v896 = 215;
                    v898 = 10;
                    v899 = 0;
                    v32 = (uint64_t)v3323;
                    v34 = v3325;
                    goto LABEL_2030;
                  }
                  v3234 = v1751[6];
                  if (!v3234)
                    goto LABEL_2116;
                  v3235 = 1;
                  do
                  {
                    if (*(_DWORD *)(v3234 + 8) == (_DWORD)v1754)
                    {
                      if (!v3235)
                        goto LABEL_2116;
                      --v3235;
                    }
                    v3234 = *(_QWORD *)(v3234 + 32);
                  }
                  while (v3234);
                  if (v3235)
                    goto LABEL_2116;
                  v3236 = (_QWORD *)v1751[4];
                  v3238 = v3236[10];
                  v3237 = v3236[11];
                  v3239 = v3236[16];
                  if (!sub_1C48EEC38(v3238, v3237, 0, 0))
                    goto LABEL_2116;
                  v3240 = v3236[15];
                  if (!sub_1C48EEC38(v3240, v3239, 0, 0))
                    goto LABEL_2116;
                  v3242 = *(_QWORD *)(v3555 + 16);
                  v3243 = *(_QWORD *)(v3242 + 832);
                  if (v3243)
                    LOWORD(v3243) = *(_WORD *)(v3243 + 8);
                  v3245 = sub_1C5D56C70(v3242, 46, (const llvm::APInt *)&v3588, v2286, v2287, v98, v2284, v3241, v3238, v3237, v3243);
                  v3247 = v3246;
                  v3248 = *(_QWORD *)(v3555 + 16);
                  v3249 = *(_QWORD *)(v3248 + 832);
                  if (v3249)
                    LOWORD(v3249) = *(_WORD *)(v3249 + 8);
                  v3250 = sub_1C5D56C70(v3248, 46, (const llvm::APInt *)&v3588, v2286, v2287, v98, v2284, v3244, v3240, v3239, v3249);
                  v3252 = v3251;
                  sub_1C5C5B004(*(_QWORD *)v3555, (uint64_t)v3245);
                  sub_1C5C5B004(*(_QWORD *)v3555, (uint64_t)v3250);
                  v3253 = (uint64_t *)v1751[4];
                  v38 = (uint64_t)sub_1C63698B8(*(_QWORD *)(v3555 + 16), (const char *)0xC0, (const llvm::APInt *)&v3588, v2286, v2287, *v3253, v3253[1], v3254, v3253[5], v3253[6], (uint64_t)v3245, v3247, (uint64_t)v3250, v3252, v3253[20], v3253[21]);
LABEL_20:
                  *(_QWORD *)&v3590 = v38;
                  *((_QWORD *)&v3590 + 1) = v39;
                  goto LABEL_2117;
                }
                v3593[0] = &v3594;
                v3593[1] = (void *)0x400000000;
                sub_1C480BFA4((unsigned int *)v3593, (uint64_t)&v3594, (char *)v1751[4], (char *)(v1751[4] + 40 * *((unsigned __int16 *)v1751 + 28)));
                v3300 = *((unsigned __int16 *)v1751 + 12);
                if (v3300 == 402)
                  v3301 = 404;
                else
                  v3301 = 0;
                if (v3300 == 401)
                  v3302 = 403;
                else
                  v3302 = v3301;
                v3303 = *(_QWORD *)(v3555 + 16);
                v3304 = (void *)v1751[8];
                v3608[0] = v3304;
                if (v3304)
                  llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v3304, 2);
                LODWORD(v3608[1]) = *((_DWORD *)v1751 + 15);
                v3305 = *(_QWORD *)(v9 + 40);
                v3306 = *(llvm **)v3305;
                v3307 = *(_QWORD *)(v3305 + 8);
                v3308 = *(_QWORD *)(v3303 + 832);
                if (v3308)
                  v3309 = *(unsigned __int16 *)(v3308 + 8);
                else
                  v3309 = 0;
                *(_QWORD *)&v3590 = sub_1C636D0C8(v3303, (const char *)v3302, (const llvm::APInt *)v3608, v3306, v3307, (uint64_t *)v3593[0], LODWORD(v3593[1]), v3309);
                *((_QWORD *)&v3590 + 1) = v3368;
                v1273 = (unsigned __int8 *)v3608[0];
                if (v3608[0])
                {
                  v1274 = v3608;
                  goto LABEL_1362;
                }
                goto LABEL_2514;
              }
LABEL_1840:
              v1755 = *(_QWORD *)(v3555 + 16);
              v1757 = *v1752;
              v1756 = v1752[1];
              v1758 = (unsigned __int8 *)v1751[8];
              v3625 = v1758;
              if (v1758)
                llvm::MetadataTracking::track((uint64_t)&v3625, v1758, 2);
              LODWORD(v3626) = *((_DWORD *)v1751 + 15);
              v1759 = v1751[10];
              v1760 = (llvm::detail::DoubleAPFloat *)(v1759 + 32);
              if (*(_UNKNOWN **)(v1759 + 32) == &unk_1C866F1C0)
                v1761 = *(_BYTE *)(*(_QWORD *)(v1759 + 40) + 28);
              else
                v1761 = *(_BYTE *)(v1759 + 52);
              if ((v1761 & 7) == 1 || (v1761 & 8) != 0)
              {
                v2369 = 0.0;
              }
              else
              {
                if ((v1761 & 7) != 0)
                {
                  DWORD2(v3623) = 32;
                  *(_QWORD *)&v3623 = 1065353216;
                  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v3608, (const llvm::APInt **)&v3623);
                  v3593[1] = v3608[0];
                  v3594 = (void **)v3608[1];
                  LODWORD(v3595) = (_DWORD)v3609;
                  BYTE4(v3595) = BYTE4(v3595) & 0xF0 | BYTE4(v3609) & 0xF;
                  if (v1757 == 9)
                    llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F15C, 1, v3608);
                  if (*(_UNKNOWN **)v1760 == &unk_1C866F1C0)
                    v2365 = llvm::detail::DoubleAPFloat::compare(v1760, (const llvm::detail::DoubleAPFloat *)&v3593[1]);
                  else
                    llvm::detail::IEEEFloat::compare(v1760, (const llvm::detail::IEEEFloat *)&v3593[1]);
                  if (v2365 == 2)
                  {
                    v1751 = sub_1C5D404C4(v1755, (const llvm::APInt *)&v3625, v1757, v1756, 0, 1.0);
                    v2367 = v2366;
                    v2368 = v2366 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    v2367 = 0;
                    v2368 = 0;
                  }
                  if (v3593[1] == &unk_1C866F1C0)
                  {
                    sub_1C4773C74((uint64_t *)&v3594);
                  }
                  else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
                  {
                    MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
                  }
                  goto LABEL_2499;
                }
                v2369 = 1.0;
              }
              v1751 = sub_1C5D404C4(v1755, (const llvm::APInt *)&v3625, v1757, v1756, 0, v2369);
              v2367 = v2370;
              v2368 = v2370 & 0xFFFFFFFF00000000;
LABEL_2499:
              if (v3625)
                llvm::MetadataTracking::untrack((uint64_t)&v3625, v3625);
              *(_QWORD *)&v3590 = v1751;
              *((_QWORD *)&v3590 + 1) = v2368 | v2367;
              goto LABEL_2117;
            case 2132:
              v1745 = v10 + 23037;
              v2910 = *(_QWORD *)(v9 + 40);
              v2911 = *(llvm **)v2910;
              v2912 = *(_QWORD *)(v2910 + 8);
              v2913 = sub_1C4903D64(5);
              if (v2913 < 0x11)
                v2914 = 4;
              else
                v2914 = 5;
              if (v2913 < 0x11)
                v2915 = 4;
              else
                v2915 = 5;
              v2917 = sub_1C5D428B0(*(_QWORD *)(v3555 + 16), 5, v2911, v2912);
              v2918 = *(_QWORD *)(v3555 + 16);
              v2919 = *(_QWORD *)(v2918 + 832);
              if (v2919)
                v2920 = *(_WORD *)(v2919 + 8);
              else
                v2920 = 0;
              v2921 = sub_1C5D52060(v2918, 396, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, v2917, v2916, v2920);
              v2769 = v2922;
              if (*(_BYTE *)(*v1745 + 328))
              {
                v2924 = *(_QWORD *)(v3555 + 16);
                v2925 = sub_1C6366AB4(v2924, 4, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, 0, 0);
                v2928 = 0;
                v2929 = *(_QWORD *)(v2924 + 832);
                if (v2929)
                  v2928 = *(_WORD *)(v2929 + 8);
                v2930 = sub_1C5D56C70(v2924, 177, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, (uint64_t)v2921, v2769, v2927, (uint64_t)v2925, v2926, v2928);
                v2932 = v2931;
                v2933 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 7, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, 0, 0);
                v2936 = 0;
                v2937 = *(_QWORD *)(v2924 + 832);
                if (v2937)
                  v2936 = *(_WORD *)(v2937 + 8);
                v2938 = sub_1C5D56C70(v2924, 171, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, (uint64_t)v2930, v2932, v2935, (uint64_t)v2933, v2934, v2936);
                v2940 = v2939;
                v2941 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 10, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, 0, 0);
                v2944 = 0;
                v2945 = *(_QWORD *)(v2924 + 832);
                if (v2945)
                  v2944 = *(_WORD *)(v2945 + 8);
                v2946 = sub_1C5D56C70(v2924, 58, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, (uint64_t)v2938, v2940, v2943, (uint64_t)v2941, v2942, v2944);
                v2948 = v2947;
                v2949 = *(_QWORD *)(v3555 + 16);
                v2950 = sub_1C6366AB4(v2949, 15, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, 0, 0);
                v2953 = *(_QWORD *)(v2949 + 832);
                if (v2953)
                  LOWORD(v2953) = *(_WORD *)(v2953 + 8);
                v2954 = sub_1C5D56C70(v2949, 171, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, (uint64_t)v2921, v2769, v2952, (uint64_t)v2950, v2951, v2953);
                v2957 = *(_QWORD *)(v3555 + 16);
                v2958 = *(_QWORD *)(v2957 + 832);
                if (v2958)
                  LOWORD(v2958) = *(_WORD *)(v2958 + 8);
                v2921 = sub_1C5D56C70(v2957, 56, (const llvm::APInt *)&v3588, (llvm *)v2915, 0, (uint64_t)v2946, v2948, v2956, (uint64_t)v2954, v2955, v2958);
                v2769 = v2769 & 0xFFFFFFFF00000000 | v2959;
              }
              if (v2914 == v2911)
              {
                *(_QWORD *)&v3590 = v2921;
LABEL_2844:
                *((_QWORD *)&v3590 + 1) = v2769;
                goto LABEL_2117;
              }
              v33 = *(_QWORD **)(v3555 + 16);
              v2923 = v33[104];
              if (v2923)
                v36 = *(_WORD *)(v2923 + 8);
              else
                v36 = 0;
              v896 = 199;
              v898 = (uint64_t)v2911;
              v899 = (void *)v2912;
              v32 = (uint64_t)v2921;
LABEL_2842:
              v34 = v2769;
              goto LABEL_2030;
            case 2159:
            case 2160:
            case 2161:
            case 2162:
              v682 = *(_QWORD *)(v3555 + 16);
              if ((v101 - 2159) >= 4)
                v683 = 0xFFFFFFFFLL;
              else
                v683 = (v101 - 1728);
              v684 = *(_QWORD *)(v682 + 832);
              if (v684)
                LOWORD(v684) = *(_WORD *)(v684 + 8);
              v38 = (uint64_t)sub_1C5D58E08(v682, (const char *)v683, (const llvm::APInt *)&v3588, **(llvm ***)(v9 + 40), *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8), v97[5], v97[6], a8, v97[10], v97[11], v97[15], v97[16], HIDWORD(v97[16]), v684);
              goto LABEL_20;
            case 2168:
              v1746 = v97[5];
              v1747 = *(unsigned __int16 *)(v1746 + 24);
              if (v1747 != 35 && v1747 != 11)
                goto LABEL_2116;
              v1748 = *(_QWORD *)(v1746 + 80);
              v1749 = (unsigned int *)(v1748 + 24);
              if (*(_DWORD *)(v1748 + 32) >= 0x41u)
                v1749 = *(unsigned int **)v1749;
              v541 = *(_QWORD *)(v3555 + 16);
              v543 = 31 - __clz(*v1749);
              v1750 = *(uint64_t **)(v9 + 40);
              v216 = *v1750;
              v217 = (void *)v1750[1];
              goto LABEL_538;
            case 2171:
            case 2172:
              v2449 = v97[5];
              v2450 = v97[6];
              v2451 = *(_QWORD *)(v3555 + 16);
              v2452 = *(_QWORD *)(v2451 + 832);
              if (v2452)
                v2453 = *(_WORD *)(v2452 + 8);
              else
                v2453 = 0;
              v2656 = v97[10];
              v2657 = v97[11];
              v3545 = v97[16];
              v3524 = v97[15];
              v2658 = sub_1C5D52060(v2451, 216, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, v2449, v2450, v2453);
              v2660 = v2659;
              v2661 = *(_QWORD *)(v3555 + 16);
              v2662 = sub_1C6366AB4(v2661, 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
              v2665 = 0;
              v2666 = *(_QWORD *)(v2661 + 832);
              if (v2666)
                v2665 = *(_WORD *)(v2666 + 8);
              v2667 = sub_1C5D56C70(v2661, 148, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v2658, v2660, v2664, (uint64_t)v2662, v2663, v2665);
              v2669 = v2668;
              v2670 = *(_QWORD *)(v3555 + 16);
              v2671 = sub_1C6366AB4(v2670, 0xFF00000000, (const llvm::APInt *)&v3588, (llvm *)6, 0, 0, 0);
              v2674 = 0;
              v2675 = *(_QWORD *)(v2670 + 832);
              if (v2675)
                v2674 = *(_WORD *)(v2675 + 8);
              v2676 = sub_1C5D56C70(v2670, 171, (const llvm::APInt *)&v3588, (llvm *)6, 0, v2449, v2450, v2673, (uint64_t)v2671, v2672, v2674);
              v2678 = v2677;
              v2679 = *(_QWORD *)(v3555 + 16);
              v2680 = sub_1C6366AB4(v2679, 32, (const llvm::APInt *)&v3588, (llvm *)6, 0, 0, 0);
              v2683 = 0;
              v2684 = *(_QWORD *)(v2679 + 832);
              if (v2684)
                v2683 = *(_WORD *)(v2684 + 8);
              v2685 = sub_1C5D56C70(v2679, 177, (const llvm::APInt *)&v3588, (llvm *)6, 0, (uint64_t)v2676, v2678, v2682, (uint64_t)v2680, v2681, v2683);
              v2686 = 0;
              v2687 = v2678 & 0xFFFFFFFF00000000;
              v2689 = v2678 & 0xFFFFFFFF00000000 | v2688;
              v2690 = *(_QWORD *)(v3555 + 16);
              v2691 = *(_QWORD *)(v2690 + 832);
              if (v2691)
                v2686 = *(_WORD *)(v2691 + 8);
              v2692 = v2660 & 0xFFFFFFFF00000000 | v2669;
              v2694 = sub_1C5D52060(v2690, 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2685, v2689, v2686);
              v2696 = 0;
              v2697 = *(_QWORD *)(v3555 + 16);
              v2698 = *(_QWORD *)(v2697 + 832);
              if (v2698)
                v2696 = *(_WORD *)(v2698 + 8);
              v2700 = sub_1C5D56C70(v2697, 146, (const llvm::APInt *)&v3588, (llvm *)0x26, 0, (uint64_t)v2694, v2693 | v2687, v2695, v2656, v2657, v2696);
              v2701 = v2699;
              v2702 = 0;
              v2703 = *(_QWORD *)(v3555 + 16);
              v2704 = *(_QWORD *)(v2703 + 832);
              if (v2704)
                v2702 = *(_WORD *)(v2704 + 8);
              v2705 = sub_1C5D52060(v2703, 216, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v2700, v2699, v2702);
              v2707 = 0;
              v2709 = v2701 & 0xFFFFFFFF00000000 | v2708;
              v2710 = *(_QWORD *)(v3555 + 16);
              v2711 = *(_QWORD *)(v2710 + 832);
              if (v2711)
                v2707 = *(_WORD *)(v2711 + 8);
              v2713 = sub_1C5D56C70(v2710, 146, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, (uint64_t)v2667, v2692, v2706, (uint64_t)v2705, v2709, v2707);
              v2714 = 0;
              v2715 = *(_QWORD *)(v3555 + 16);
              v2716 = *(_QWORD *)(v2715 + 832);
              if (v2716)
                v2714 = *(_WORD *)(v2716 + 8);
              v2717 = sub_1C5D52060(v2715, 216, (const llvm::APInt *)&v3588, (llvm *)6, 0, (uint64_t)v2713, v2712, v2714);
              v2720 = v2717;
              v2721 = v2718;
              if ((_DWORD)v101 == 2171)
              {
                v3593[0] = v2717;
                LODWORD(v3593[1]) = v2718;
                v3594 = (void **)v3524;
                LODWORD(v3595) = v3545;
                v2722 = *(_QWORD *)(v3555 + 16);
                v2723 = sub_1C636A8B4(v2722, 6, 0, 5, 0);
                v2725 = v2724;
                v2726 = 0;
                v2727 = *(_QWORD *)(v2722 + 832);
                if (v2727)
                  v2726 = *(_WORD *)(v2727 + 8);
                v2728 = v2722;
                v2729 = 2;
              }
              else
              {
                v2730 = *(_QWORD *)(v9 + 32);
                v2731 = *(_QWORD *)(v2730 + 160);
                v2732 = *(_QWORD *)(v2730 + 168);
                *(_OWORD *)v3608 = *(_OWORD *)(v2730 + 200);
                v2733 = *(_QWORD *)(v3555 + 16);
                v2734 = *(_QWORD *)(v2733 + 832);
                if (v2734)
                  LOWORD(v2734) = *(_WORD *)(v2734 + 8);
                v2736 = sub_1C5D56C70(v2733, 146, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, v3524, v3545, v2719, v2731, v2732, v2734);
                v2737 = 0;
                v2738 = *(_QWORD *)(v3555 + 16);
                v2739 = *(_QWORD *)(v2738 + 832);
                if (v2739)
                  v2737 = *(_WORD *)(v2739 + 8);
                v2740 = sub_1C5D52060(v2738, 216, (const llvm::APInt *)&v3588, (llvm *)6, 0, (uint64_t)v2736, v2735, v2737);
                v3593[0] = v2720;
                LODWORD(v3593[1]) = v2721;
                v3594 = (void **)v2740;
                LODWORD(v3595) = v2741;
                v3596 = (uint64_t *)v3608[0];
                LODWORD(v3597) = v3608[1];
                v2742 = *(_QWORD *)(v3555 + 16);
                v2723 = sub_1C636B134(v2742, 6, 0, 6, 0, 5, 0);
                v2725 = v2743;
                v2726 = 0;
                v2744 = *(_QWORD *)(v2742 + 832);
                if (v2744)
                  v2726 = *(_WORD *)(v2744 + 8);
                v2728 = v2742;
                v2729 = 3;
              }
              v38 = (uint64_t)sub_1C636D410(v2728, (const char *)0x37, (const llvm::APInt *)&v3588, v2723, v2725, (uint64_t *)v3593, v2729, v2726);
              goto LABEL_20;
            default:
              if ((_DWORD)v101 == 1281)
              {
                v1864 = *(void **)(v9 + 64);
                v3593[0] = v1864;
                v1301 = v3555;
                if (v1864)
                {
                  llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1864, 2);
                  v12 = *(_DWORD *)(v9 + 60);
                  v97 = *(_QWORD **)(v9 + 32);
                }
                LODWORD(v3593[1]) = v12;
                v1302 = (_QWORD *)v97[5];
                v1865 = *((unsigned __int16 *)v1302 + 12);
                if (v1865 == 35 || v1865 == 11)
                {
                  v1866 = *((_DWORD *)v97 + 12);
                }
                else
                {
                  v1302 = sub_1C4903E60(v97[5], *(_QWORD *)(v3555 + 16));
                  v97 = *(_QWORD **)(v9 + 32);
                }
                v1304 = v1866;
                v1306 = v97[10];
                v1307 = v97[11];
              }
              else
              {
                if ((_DWORD)v101 != 1822)
                  goto LABEL_2116;
                v1300 = *(void **)(v9 + 64);
                v3593[0] = v1300;
                if (v1300)
                {
                  llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1300, 2);
                  v12 = *(_DWORD *)(v9 + 60);
                  v97 = *(_QWORD **)(v9 + 32);
                }
                LODWORD(v3593[1]) = v12;
                v1301 = v3555;
                v1302 = sub_1C4903E60(v97[5], *(_QWORD *)(v3555 + 16));
                v1304 = v1303;
                v1305 = *(_QWORD *)(v9 + 32);
                v1306 = *(_QWORD *)(v1305 + 80);
                v1307 = *(_QWORD *)(v1305 + 88);
              }
              v2267 = *(_QWORD *)(v1301 + 16);
              v2268 = *(_QWORD *)(v2267 + 832);
              if (v2268)
                LOWORD(v2268) = *(_WORD *)(v2268 + 8);
              v1168 = sub_1C5D56C70(v2267, 56, (const llvm::APInt *)v3593, (llvm *)6, 0, (uint64_t)v1302, v1304, a8, v1306, v1307, v2268);
              goto LABEL_1969;
          }
        }
        switch((_DWORD)v101)
        {
          case 0xFD:
LABEL_1267:
            v1192 = *(void **)(v9 + 64);
            v3608[0] = v1192;
            if (v1192)
            {
              a1 = (_QWORD *)llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v1192, 2);
              v12 = *(_DWORD *)(v9 + 60);
              v97 = *(_QWORD **)(v9 + 32);
            }
            LODWORD(v3608[1]) = v12;
            v1193 = v97[5];
            v1194 = *(unsigned __int16 *)(v1193 + 24);
            if (v1194 == 36 || v1194 == 12)
            {
              v1195 = *(_QWORD *)(v1193 + 80);
              v1196 = *(_QWORD *)(v1195 + 32);
              if ((_UNKNOWN *)v1196 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v1195 + 32));
              }
              else
              {
                v3593[1] = *(void **)(v1195 + 32);
                if ((*(_DWORD *)(v1196 + 8) + 64) >= 0x80)
                {
                  a1 = (_QWORD *)operator new[]();
                  v3594 = (void **)a1;
                  v1197 = BYTE4(v3595) & 0xF0;
                }
                else
                {
                  v1197 = 0;
                }
                v1198 = *(_BYTE *)(v1195 + 52);
                v1199 = v1198 & 7;
                BYTE4(v3595) = v1197 | v1198 & 8 | v1198 & 7;
                LODWORD(v3595) = *(_DWORD *)(v1195 + 48);
                v1201 = (v1198 & 6) != 0 && v1199 != 3;
                if (v1199 == 1 || v1201)
                {
                  v1203 = *((unsigned int *)v3593[1] + 2);
                  if ((v1203 - 64) <= 0xFFFFFF7F)
                    v1204 = (void **)a1;
                  else
                    v1204 = (void **)&v3594;
                  v1207 = *(void ***)(v1195 + 40);
                  v1206 = (void **)(v1195 + 40);
                  v1205 = v1207;
                  if ((*((_DWORD *)*(v1206 - 1) + 2) - 64) >= 0xFFFFFF80)
                    v1205 = v1206;
                  if (v1203 <= 0xFFFFFFBF)
                  {
                    v1208 = (unint64_t)(v1203 + 64) >> 6;
                    do
                    {
                      v1209 = *v1205++;
                      *v1204++ = v1209;
                      --v1208;
                    }
                    while (v1208);
                  }
                }
              }
              llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, &v3623);
              v1210 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
              v1211 = *(_QWORD *)(v3555 + 16);
              v1212 = *(uint64_t **)(v9 + 40);
              v1213 = *v1212;
              v1214 = v1212[1];
              v1215 = 1.0 / v1210;
LABEL_1317:
              *(_QWORD *)&v3590 = sub_1C5D404C4(v1211, (const llvm::APInt *)v3608, v1213, v1214, 0, v1215);
              *((_QWORD *)&v3590 + 1) = v1235;
              if (v3593[1] == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v3594);
              }
              else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
              {
                MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
              }
              goto LABEL_1947;
            }
            v1871 = v97[6];
            v1872 = *(uint64_t **)(v9 + 40);
            v1873 = *v1872;
            v1874 = *(_WORD *)(v9 + 72);
            v1875 = *(_QWORD *)(v3555 + 16);
            if (v1194 == 215
              || ((_DWORD)v101 != 2517 ? (v1876 = (*(_WORD *)(*(_QWORD *)v1875 + 1020) & 1) == 0) : (v1876 = 0),
                  v1876 ? (v1877 = (v1874 & 0x80) == 0) : (v1877 = 0),
                  v1877 ? (v1878 = *v1872 == 9) : (v1878 = 1),
                  v1878))
            {
              v1879 = v1872[1];
              v1880 = *(_QWORD *)(v3555 + 16);
              v1881 = 417;
              v1882 = v1193;
              v1883 = v1871;
              goto LABEL_1944;
            }
            DWORD2(v3623) = 32;
            *(_QWORD *)&v3623 = 1602224128;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3593[1], (const llvm::APInt **)&v3623);
            v3547 = sub_1C6366D08(v1875, (llvm::LLVMContext *)v3593, (const llvm::APFloat *)v3608, (llvm *)0xA, 0, 0);
            v3526 = v2847;
            if (v3593[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v3594);
            }
            else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
            {
              MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
            }
            v2848 = *(_QWORD *)(v3555 + 16);
            DWORD2(v3623) = 32;
            *(_QWORD *)&v3623 = 528482304;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3593[1], (const llvm::APInt **)&v3623);
            v2849 = sub_1C6366D08(v2848, (llvm::LLVMContext *)v3593, (const llvm::APFloat *)v3608, (llvm *)0xA, 0, 0);
            v3496 = v2851;
            v3510 = (uint64_t)v2849;
            if (v3593[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v3594);
            }
            else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
            {
              MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
            }
            v2852 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, v1193, v1871, v2850, v3510, v3496, v1874);
            v2854 = v2853;
            v2855 = 0;
            v2856 = *(_QWORD *)(v3555 + 16);
            v2857 = *(_QWORD *)(v2856 + 832);
            if (v2857)
              v2855 = *(_WORD *)(v2857 + 8);
            v2858 = sub_1C5D52060(v2856, 223, (const llvm::APInt *)v3608, (llvm *)0xA, 0, v1193, v1871, v2855);
            v2860 = v2859;
            v2861 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, (uint64_t)v2858, v2859, (uint64_t)v3547, v3526, (uint64_t)v2852, v2854, v1193, v1871, SHIDWORD(v1871), 2u);
            v2863 = v2862;
            v2864 = sub_1C5D52060(*(_QWORD *)(v3555 + 16), 417, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2861, v2862, v1874);
            v2866 = v2865;
            v2867 = sub_1C5D404C4(*(_QWORD *)(v3555 + 16), (const llvm::APInt *)v3608, 10, 0, 0, 1.0);
            v2869 = v2868;
            v2870 = 0;
            v2871 = *(_QWORD *)(v3555 + 16);
            v2872 = *(_QWORD *)(v2871 + 832);
            if (v2872)
              v2870 = *(_WORD *)(v2872 + 8);
            v2873 = sub_1C5D52060(v2871, 222, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2861, v2863, v2870);
            v2876 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2873, v2874, v2875, (uint64_t)v2864, v2866, (uint64_t)v2867, v2869, SHIDWORD(v2869), v1874);
            v2879 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2876, v2877, v2878, (uint64_t)v2864, v2866, (uint64_t)v2864, v2866, SHIDWORD(v2866), v1874);
            v2881 = v2880;
            v2882 = 0;
            v2883 = *(_QWORD *)(v3555 + 16);
            v2884 = *(_QWORD *)(v2883 + 832);
            if (v2884)
              v2882 = *(_WORD *)(v2884 + 8);
            v2886 = sub_1C5D52060(v2883, 223, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2864, v2866, v2882);
            v2887 = 0;
            v2888 = *(_QWORD *)(v3555 + 16);
            v2889 = *(_QWORD *)(v2888 + 832);
            if (v2889)
              v2887 = *(_WORD *)(v2889 + 8);
            v2890 = sub_1C5D52060(v2888, 216, (const llvm::APInt *)v3608, (llvm *)5, 0, (uint64_t)v2886, v2885, v2887);
            v2892 = v2891;
            v2893 = *(_QWORD *)(v3555 + 16);
            v2894 = sub_1C6366AB4(v2893, 1, (const llvm::APInt *)v3608, (llvm *)5, 0, 0, 0);
            v2897 = 0;
            v2898 = *(_QWORD *)(v2893 + 832);
            if (v2898)
              v2897 = *(_WORD *)(v2898 + 8);
            v2899 = sub_1C5D56C70(v2893, 57, (const llvm::APInt *)v3608, (llvm *)5, 0, (uint64_t)v2890, v2892, v2896, (uint64_t)v2894, v2895, v2897);
            v2901 = v2900;
            v2902 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 2139095039, (const llvm::APInt *)v3608, (llvm *)5, 0, 0, 0);
            v2904 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, (uint64_t)v2899, v2901, (uint64_t)v2902, v2903, (uint64_t)v2864, v2866, (uint64_t)v2879, v2881, SHIDWORD(v2881), 0xBu);
            v2906 = v2881 & 0xFFFFFFFF00000000 | v2905;
            v2908 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2904, v2906, v2907, v3510, v3496, v1874);
            v1888 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, (uint64_t)v2858, v2860, (uint64_t)v3547, v3526, (uint64_t)v2908, v2909, (uint64_t)v2904, v2906, SHIDWORD(v2906), 2u);
            break;
          case 0x105:
LABEL_1293:
            v1216 = *(void **)(v9 + 64);
            v3608[0] = v1216;
            if (v1216)
            {
              a1 = (_QWORD *)llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v1216, 2);
              v12 = *(_DWORD *)(v9 + 60);
              v97 = *(_QWORD **)(v9 + 32);
            }
            LODWORD(v3608[1]) = v12;
            v1217 = v97[5];
            v1218 = *(unsigned __int16 *)(v1217 + 24);
            if (v1218 == 36 || v1218 == 12)
            {
              v1219 = *(_QWORD *)(v1217 + 80);
              v1220 = *(_QWORD *)(v1219 + 32);
              if ((_UNKNOWN *)v1220 == &unk_1C866F1C0)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v1219 + 32));
                v1221 = v3555;
              }
              else
              {
                v3593[1] = *(void **)(v1219 + 32);
                v1221 = v3555;
                if ((*(_DWORD *)(v1220 + 8) + 64) >= 0x80)
                {
                  a1 = (_QWORD *)operator new[]();
                  v3594 = (void **)a1;
                  v1222 = BYTE4(v3595) & 0xF0;
                }
                else
                {
                  v1222 = 0;
                }
                v1223 = *(_BYTE *)(v1219 + 52);
                v1224 = v1223 & 7;
                BYTE4(v3595) = v1222 | v1223 & 8 | v1223 & 7;
                LODWORD(v3595) = *(_DWORD *)(v1219 + 48);
                v1226 = (v1223 & 6) != 0 && v1224 != 3;
                if (v1224 == 1 || v1226)
                {
                  v1227 = *((unsigned int *)v3593[1] + 2);
                  if ((v1227 - 64) <= 0xFFFFFF7F)
                    v1228 = (void **)a1;
                  else
                    v1228 = (void **)&v3594;
                  v1231 = *(void ***)(v1219 + 40);
                  v1230 = (void **)(v1219 + 40);
                  v1229 = v1231;
                  if ((*((_DWORD *)*(v1230 - 1) + 2) - 64) >= 0xFFFFFF80)
                    v1229 = v1230;
                  if (v1227 <= 0xFFFFFFBF)
                  {
                    v1232 = (unint64_t)(v1227 + 64) >> 6;
                    do
                    {
                      v1233 = *v1229++;
                      *v1228++ = v1233;
                      --v1232;
                    }
                    while (v1232);
                  }
                }
              }
              llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, &v3623);
              v1215 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v3593));
              v1211 = *(_QWORD *)(v1221 + 16);
              v1234 = *(uint64_t **)(v9 + 40);
              v1213 = *v1234;
              v1214 = v1234[1];
              goto LABEL_1317;
            }
            v1884 = v97[6];
            v1885 = *(uint64_t **)(v9 + 40);
            v1873 = *v1885;
            v1874 = *(_WORD *)(v9 + 72);
            v1886 = *(_QWORD *)(v3555 + 16);
            if (v1218 == 215
              || (_DWORD)v101 == 2526
              || (*(_WORD *)(*(_QWORD *)v1886 + 1020) & 1) != 0
              || (v1874 & 0x200) != 0
              || *v1885 == 9)
            {
              v1879 = v1885[1];
              v1880 = *(_QWORD *)(v3555 + 16);
              v1881 = 418;
              v1882 = v97[5];
              v1883 = v97[6];
LABEL_1944:
              v1887 = v1874;
LABEL_1945:
              v1888 = sub_1C5D52060(v1880, v1881, (const llvm::APInt *)v3608, (llvm *)v1873, v1879, v1882, v1883, v1887);
              break;
            }
            DWORD2(v3623) = 32;
            *(_QWORD *)&v3623 = 1593835520;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3593[1], (const llvm::APInt **)&v3623);
            v2773 = sub_1C6366D08(v1886, (llvm::LLVMContext *)v3593, (const llvm::APFloat *)v3608, (llvm *)0xA, 0, 0);
            v3495 = v2774;
            v3509 = (uint64_t)v2773;
            if (v3593[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v3594);
            }
            else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
            {
              MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
            }
            v2775 = *(_QWORD *)(v3555 + 16);
            DWORD2(v3623) = 32;
            *(_QWORD *)&v3623 = 528482304;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3593[1], (const llvm::APInt **)&v3623);
            v2777 = sub_1C6366D08(v2775, (llvm::LLVMContext *)v3593, (const llvm::APFloat *)v3608, (llvm *)0xA, 0, 0);
            v2779 = v2778;
            if (v3593[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v3594);
            }
            else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
            {
              MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
            }
            v2780 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, v1217, v1884, v2776, (uint64_t)v2777, v2779, v1874);
            v2782 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, v1217, v1884, v3509, v3495, (uint64_t)v2780, v2781, v1217, v1884, SHIDWORD(v1884), 2u);
            v2784 = v2783;
            v2785 = sub_1C5D52060(*(_QWORD *)(v3555 + 16), 418, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2782, v2783, v1874);
            v2787 = v2786;
            v2788 = sub_1C5D404C4(*(_QWORD *)(v3555 + 16), (const llvm::APInt *)v3608, 10, 0, 0, 0.5);
            v3474 = v2789;
            v3483 = (uint64_t)v2788;
            v2790 = sub_1C5D404C4(*(_QWORD *)(v3555 + 16), (const llvm::APInt *)v3608, 10, 0, 0, -0.5);
            v3458 = v2791;
            v3466 = (uint64_t)v2790;
            v3525 = v2787;
            v3546 = (uint64_t)v2785;
            v2794 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2782, v2784, v2792, (uint64_t)v2785, v2787, v1874);
            v2795 = v2793;
            v2796 = 0;
            v2797 = *(_QWORD *)(v3555 + 16);
            v2798 = *(_QWORD *)(v2797 + 832);
            if (v2798)
              v2796 = *(_WORD *)(v2798 + 8);
            v2799 = sub_1C5D52060(v2797, 222, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2794, v2793, v2796);
            v2803 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2782, v2784, v2802, (uint64_t)v2785, v2787, (uint64_t)v2799, v2800, v2801, v1874);
            v3448 = v2804;
            v3453 = (uint64_t)v2803;
            v2806 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, v3466, v3458, v2805, (uint64_t)v2785, v2787, v1874);
            v2808 = v2807;
            v2810 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2794, v2795, v2809, (uint64_t)v2806, v2807, v3483, v3474, SHIDWORD(v3474), v1874);
            v2814 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2806, v2808, v2813, v3453, v3448, (uint64_t)v2810, v2811, v2812, v1874);
            v2817 = sub_1C5D58E08(*(_QWORD *)(v3555 + 16), (const char *)0x8D, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2814, v2815, v2816, v3546, v2787, v3546, v2787, SHIDWORD(v2787), v1874);
            v2819 = v2818;
            v2820 = 0;
            v2821 = *(_QWORD *)(v3555 + 16);
            v2822 = *(_QWORD *)(v2821 + 832);
            if (v2822)
              v2820 = *(_WORD *)(v2822 + 8);
            v2823 = sub_1C5D52060(v2821, 216, (const llvm::APInt *)v3608, (llvm *)5, 0, v3546, v2787, v2820);
            v2825 = v2824;
            v2826 = *(_QWORD *)(v3555 + 16);
            v2827 = sub_1C6366AB4(v2826, 1, (const llvm::APInt *)v3608, (llvm *)5, 0, 0, 0);
            v2830 = 0;
            v2831 = *(_QWORD *)(v2826 + 832);
            if (v2831)
              v2830 = *(_WORD *)(v2831 + 8);
            v2832 = sub_1C5D56C70(v2826, 57, (const llvm::APInt *)v3608, (llvm *)5, 0, (uint64_t)v2823, v2825, v2829, (uint64_t)v2827, v2828, v2830);
            v2834 = v2833;
            v2835 = sub_1C6366AB4(*(_QWORD *)(v3555 + 16), 2139095039, (const llvm::APInt *)v3608, (llvm *)5, 0, 0, 0);
            v2837 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, (uint64_t)v2832, v2834, (uint64_t)v2835, v2836, v3546, v3525, (uint64_t)v2817, v2819, SHIDWORD(v2819), 0xBu);
            v2839 = v2819 & 0xFFFFFFFF00000000 | v2838;
            v2840 = *(_QWORD *)(v3555 + 16);
            DWORD2(v3623) = 32;
            *(_QWORD *)&v3623 = 796917760;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3593[1], (const llvm::APInt **)&v3623);
            v2842 = sub_1C6366D08(v2840, (llvm::LLVMContext *)v3593, (const llvm::APFloat *)v3608, (llvm *)0xA, 0, 0);
            v2844 = v2843;
            if (v3593[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v3594);
            }
            else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
            {
              MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
            }
            v2845 = sub_1C5D56C70(*(_QWORD *)(v3555 + 16), 98, (const llvm::APInt *)v3608, (llvm *)0xA, 0, (uint64_t)v2837, v2839, v2841, (uint64_t)v2842, v2844, v1874);
            v1888 = sub_1C47DF81C(*(_QWORD **)(v3555 + 16), (const llvm::APInt *)v3608, v1217, v1884, v3509, v3495, (uint64_t)v2845, v2846, (uint64_t)v2837, v2839, SHIDWORD(v2839), 2u);
            break;
          case 0x4F5:
LABEL_784:
            v1236 = dword_1C6608FA0[(int)sub_1C49112E4(v101)];
            v1237 = *(_QWORD *)(v9 + 40);
            v367 = *(llvm **)v1237;
            v368 = *(_QWORD *)(v1237 + 8);
            v1238 = sub_1C4903D64(v1236);
            v1239 = sub_1C5D428B0(*(_QWORD *)(v3555 + 16), v1236, (llvm *)5, 0);
            v32 = v1239;
            v34 = v1240;
            if (v367 == 5 && v1238 <= 0x10)
            {
              v1241 = *(_QWORD *)(v3555 + 16);
              v1242 = *(_QWORD *)(v1241 + 832);
              if (v1242)
                v1243 = *(_WORD *)(v1242 + 8);
              else
                v1243 = 0;
              v32 = (uint64_t)sub_1C5D52060(v1241, 396, (const llvm::APInt *)&v3588, (llvm *)4, 0, v32, v1240, v1243);
              v34 = v1245;
              v33 = *(_QWORD **)(v3555 + 16);
              v1246 = v33[104];
              if (v1246)
                v36 = *(_WORD *)(v1246 + 8);
              else
                v36 = 0;
              v896 = 199;
              v898 = 5;
LABEL_1334:
              v899 = 0;
            }
            else
            {
              v33 = *(_QWORD **)(v3555 + 16);
              v1244 = v33[104];
              if (v1244)
                v36 = *(_WORD *)(v1244 + 8);
              else
                v36 = 0;
LABEL_1328:
              v896 = 396;
              v898 = (uint64_t)v367;
              v899 = (void *)v368;
            }
            goto LABEL_2030;
          default:
            goto LABEL_2116;
        }
        *(_QWORD *)&v3590 = v1888;
        *((_QWORD *)&v3590 + 1) = v1889;
LABEL_1947:
        v1811 = (unsigned __int8 *)v3608[0];
        if (!v3608[0])
          goto LABEL_2117;
        v1812 = v3608;
        goto LABEL_1971;
      }
      v444 = *(_DWORD **)(v9 + 32);
      v445 = *(_QWORD *)v444;
      v446 = *(_QWORD *)(*(_QWORD *)v444 + 48);
      if (!v446)
        goto LABEL_2116;
      v447 = v444[2];
      v448 = 1;
      v449 = *(_QWORD *)(*(_QWORD *)v444 + 48);
      do
      {
        if (*(_DWORD *)(v449 + 8) == v447)
        {
          if (!v448)
            goto LABEL_435;
          --v448;
        }
        v449 = *(_QWORD *)(v449 + 32);
      }
      while (v449);
      if (!v448)
      {
        v450 = *(unsigned __int16 *)(v445 + 24);
        if (v450 == 201 || v450 == 199)
        {
          v451 = *(_DWORD **)(v445 + 32);
          v445 = *(_QWORD *)v451;
          v447 = v451[2];
          v446 = *(_QWORD *)(*(_QWORD *)v451 + 48);
        }
      }
LABEL_435:
      if (!v446)
        goto LABEL_2116;
      v452 = 1;
      do
      {
        if (*(_DWORD *)(v446 + 8) == v447)
        {
          if (!v452)
            goto LABEL_2116;
          --v452;
        }
        v446 = *(_QWORD *)(v446 + 32);
      }
      while (v446);
      if (v452 || (*(_WORD *)(v445 + 24) & 0xFFFE) != 0x18C)
        goto LABEL_2116;
LABEL_789:
      v726 = *(_OWORD *)v444;
LABEL_1601:
      v3590 = v726;
      goto LABEL_2117;
    }
    v3554 = a3;
    if (*(unsigned __int16 *)(v9 + 24) > 0x8Cu)
    {
      switch(*(_WORD *)(v9 + 24))
      {
        case 0x8D:
          v59 = *(uint64_t **)(v9 + 32);
          v60 = *(_QWORD *)(v9 + 40);
          v62 = *v59;
          v61 = v59[1];
          v64 = (uint64_t *)v59[5];
          v63 = v59[6];
          v66 = (uint64_t *)v59[10];
          v65 = v59[11];
          v68 = *(llvm **)v60;
          v67 = *(_QWORD *)(v60 + 8);
          v69 = *(unsigned __int16 *)(v9 + 72);
          if (*(_WORD *)(*v59 + 24) == 222)
          {
            v70 = *((unsigned __int16 *)v64 + 12);
            if (v70 == 36 || v70 == 12)
            {
              v72 = *(_QWORD *)(v3554 + 16);
              v73 = *(uint64_t **)(v62 + 32);
              v74 = *v73;
              v75 = v73[1];
              v76 = *(_QWORD *)(v72 + 832);
              if (v76)
                v77 = *(_WORD *)(v76 + 8);
              else
                v77 = 0;
              v833 = sub_1C5D52060(*(_QWORD *)(v3554 + 16), 222, (const llvm::APInt *)&v3588, *(llvm **)v60, *(_QWORD *)(v60 + 8), (uint64_t)v64, v63, v77);
              v38 = (uint64_t)sub_1C5D58E08(v72, (const char *)0x8D, (const llvm::APInt *)&v3588, v68, v67, v74, v75, v835, (uint64_t)v833, v834, (uint64_t)v66, v65, SHIDWORD(v65), v69);
              goto LABEL_20;
            }
          }
          v3513 = *(_QWORD *)(v60 + 8);
          v583 = *((unsigned __int16 *)v66 + 12);
          if (v583 == 36 || v583 == 12)
            v585 = v66;
          else
            v585 = 0;
          v586 = v3554;
          v587 = *(_QWORD **)(v3554 + 16);
          v3529 = v68;
          if ((*(_WORD *)(*v587 + 1020) & 1) != 0)
            goto LABEL_1087;
          if ((v69 & 0x40) == 0 && v585)
          {
            v588 = v585[10];
            v589 = *(_UNKNOWN **)(v588 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v588 + 40) : v588 + 24;
            if ((*(_BYTE *)(v589 + 28) & 7) == 3)
            {
              v1867 = v587[2];
              v1868 = v3588;
              v3503 = v63;
              if (v3588)
              {
                v1869 = *(_QWORD *)&v3588[-2 * v3588[2]];
                if (*(_BYTE *)v1869 != 15)
                  v1869 = *(_QWORD *)(v1869 - 8 * *(unsigned int *)(v1869 + 8));
                v1870 = v3588[1];
                v1868 = *((unsigned __int16 *)v3588 + 1);
                v586 = v3554;
              }
              else
              {
                v1869 = 0;
                v1870 = 0;
              }
              v2144 = *(_QWORD *)(*(_QWORD *)(v1867 + 640) + 16);
              v2145 = *(void ***)(v2144 + 56);
              LODWORD(v3593[1]) = 11;
              BYTE4(v3593[1]) = 2;
              v3594 = v2145;
              v3595 = v1869;
              v3596 = (uint64_t *)__PAIR64__(v1868, v1870);
              v3597 = (unint64_t)"agx2-lower";
              v3598 = "SlowMathFAddWithZero";
              v3599 = 20;
              LOBYTE(v3600) = 0;
              LOBYTE(v3601) = 0;
              v3602 = v3604;
              v3603 = 0x400000000;
              v3605 = 0;
              v3606 = -1;
              v3607 = v2144;
              v3593[0] = &off_1E814E570;
              v3566 = 6;
              strcpy((char *)v3565, "String");
              v3567 = operator new(0x58uLL);
              v3568 = xmmword_1C642B410;
              strcpy((char *)v3567, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
              v3569 = 0;
              v3570 = 0;
              sub_1C47E3888((uint64_t)v3593, (uint64_t)v3565);
              if (SHIBYTE(v3568) < 0)
                operator delete(v3567);
              if (v3566 < 0)
                operator delete(v3565[0]);
              llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(v586 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3593);
              v3593[0] = &off_1E814E790;
              v2146 = (char *)v3602;
              if ((_DWORD)v3603)
              {
                v2147 = (unint64_t)v3603 << 6;
                do
                {
                  v2148 = (void **)&v2146[v2147];
                  if (v2146[v2147 - 17] < 0)
                    operator delete(*(v2148 - 5));
                  if (*((char *)v2148 - 41) < 0)
                    operator delete(*(v2148 - 8));
                  v2147 -= 64;
                }
                while (v2147);
                v2146 = (char *)v3602;
              }
              LOBYTE(v68) = (_BYTE)v3529;
              v586 = v3554;
              if (v2146 != v3604)
                free(v2146);
              v63 = v3503;
            }
          }
          if ((~v69 & 0x7C0) != 0)
          {
            v1025 = v63;
            v1026 = 0;
          }
          else
          {
LABEL_1087:
            v1011 = *((unsigned __int16 *)v64 + 12);
            if (v1011 == 36 || v1011 == 12)
            {
              v1012 = *(unsigned __int16 *)(v62 + 24);
              if (v1012 == 215 || v1012 == 212)
              {
                v1013 = **(_QWORD **)(v62 + 32);
                if (*(_WORD *)(v1013 + 24) == 98)
                {
                  v1014 = *(_QWORD *)(v1013 + 32);
                  v1015 = *(uint64_t **)(v1014 + 40);
                  v1016 = *((unsigned __int16 *)v1015 + 12);
                  if (v1016 == 36 || v1016 == 12)
                  {
                    v1018 = *(_QWORD *)(v1014 + 48);
                    v1019 = *(uint64_t **)v1014;
                    v1020 = *(_QWORD *)(v1014 + 8);
                    v1021 = *(_QWORD *)(v586 + 16);
                    if (*(_BYTE *)(v64[5] + 16 * v63) != 10)
                    {
                      v3488 = *(_QWORD *)(v1014 + 8);
                      v1022 = *(_QWORD *)(v1021 + 832);
                      v1023 = v1019;
                      if (v1022)
                        v1024 = *(_WORD *)(v1022 + 8);
                      else
                        v1024 = 0;
                      v1607 = v63;
                      v64 = sub_1C5D52060(v1021, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v64, v63, v1024);
                      v63 = v1607 & 0xFFFFFFFF00000000 | v1608;
                      v1021 = *(_QWORD *)(v586 + 16);
                      v1019 = v1023;
                      v1020 = v3488;
                    }
                    v3501 = v63;
                    if (*(_BYTE *)(v1015[5] + 16 * v1018) != 10)
                    {
                      v1609 = *(_QWORD *)(v1021 + 832);
                      if (v1609)
                        v1610 = *(_WORD *)(v1609 + 8);
                      else
                        v1610 = 0;
                      v1015 = sub_1C5D52060(v1021, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v1015, v1018, v1610);
                      v1018 = v1018 & 0xFFFFFFFF00000000 | v1611;
                      v1021 = *(_QWORD *)(v586 + 16);
                      v63 = v3501;
                    }
                    if (*(_BYTE *)(v1019[5] + 16 * v1020) != 10)
                    {
                      v1612 = *(_QWORD *)(v1021 + 832);
                      if (v1612)
                        v1613 = *(_WORD *)(v1612 + 8);
                      else
                        v1613 = 0;
                      v1019 = sub_1C5D52060(v1021, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v1019, v1020, v1613);
                      v1020 = v1020 & 0xFFFFFFFF00000000 | v1614;
                      v1021 = *(_QWORD *)(v586 + 16);
                      v63 = v3501;
                    }
                    if (*(_BYTE *)(v66[5] + 16 * v65) != 10)
                    {
                      v1615 = *(_QWORD *)(v1021 + 832);
                      if (v1615)
                        v1616 = *(_WORD *)(v1615 + 8);
                      else
                        v1616 = 0;
                      v66 = sub_1C5D52060(v1021, 215, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v66, v65, v1616);
                      v65 = v65 & 0xFFFFFFFF00000000 | v1617;
                      v1021 = *(_QWORD *)(v586 + 16);
                      v63 = v3501;
                    }
                    v1618 = sub_1C5D56C70(v1021, 98, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v64, v63, a8, (uint64_t)v1015, v1018, v69);
                    v1621 = sub_1C5D58E08(*(_QWORD *)(v586 + 16), (const char *)0x8D, (const llvm::APInt *)&v3588, (llvm *)0xA, 0, (uint64_t)v1019, v1020, v1620, (uint64_t)v1618, v1619, (uint64_t)v66, v65, SHIDWORD(v65), v69);
                    *(_QWORD *)&v3590 = v1621;
                    *((_QWORD *)&v3590 + 1) = v1622;
                    if (v68 == 9)
                    {
                      v1623 = (uint64_t)v1621;
                      v1624 = v1622;
                      v1625 = *(_QWORD *)(v3554 + 16);
                      v1626 = sub_1C6366AB4(v1625, 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                      v1629 = *(_QWORD *)(v1625 + 832);
                      if (v1629)
                        LOWORD(v1629) = *(_WORD *)(v1629 + 8);
                      v1630 = sub_1C5D56C70(v1625, 212, (const llvm::APInt *)&v3588, v3529, v3513, v1623, v1624, v1628, (uint64_t)v1626, v1627, v1629);
LABEL_2811:
                      *(_QWORD *)&v3590 = v1630;
                      DWORD2(v3590) = v1631;
                    }
                    goto LABEL_2117;
                  }
                }
              }
            }
            v1025 = v63;
            v1026 = 1;
          }
          if (*(int *)(v586 + 8) < 2)
            goto LABEL_2116;
          if (*(_WORD *)(v62 + 24) == 222)
          {
            if ((v1026 & sub_1C48EFEC4(v9)) != 1)
              goto LABEL_2116;
            v1027 = *(_QWORD *)(v62 + 32);
            v62 = *(_QWORD *)v1027;
            LODWORD(v61) = *(_DWORD *)(v1027 + 8);
            v1028 = v3554;
            v1029 = v3529;
            v1030 = v1025;
          }
          else
          {
            v1031 = *((unsigned __int16 *)v64 + 12);
            if (v1031 == 222)
            {
              if ((v1026 & sub_1C48EFEC4(v9)) != 1)
                goto LABEL_2116;
              v1032 = v64[4];
              v64 = *(uint64_t **)v1032;
              v1030 = *(_DWORD *)(v1032 + 8);
              v1028 = v3554;
              v1029 = v3529;
            }
            else
            {
              if (*((_WORD *)v66 + 12) != 222 && v1031 != 36 && v1031 != 12
                || (v1026 & sub_1C48EFEC4(v9) & 1) == 0)
              {
                goto LABEL_2116;
              }
              v1028 = v3554;
              v1033 = *(_QWORD *)(v3554 + 16);
              v1034 = *(_QWORD *)(v1033 + 832);
              if (v1034)
                v1035 = *(_WORD *)(v1034 + 8);
              else
                v1035 = 0;
              v1029 = v3529;
              v64 = sub_1C5D52060(v1033, 222, (const llvm::APInt *)&v3588, v3529, v3513, (uint64_t)v64, v1025, v1035);
              v1030 = v1654;
            }
          }
          if (*((_WORD *)v66 + 12) == 222)
          {
            v1655 = v66[4];
            v1656 = *(uint64_t **)v1655;
            v1657 = *(_DWORD *)(v1655 + 8);
          }
          else
          {
            v3502 = v61;
            v1658 = *(_QWORD *)(v1028 + 16);
            v1659 = *(_QWORD *)(v1658 + 832);
            v1660 = v1030;
            if (v1659)
              v1661 = *(_WORD *)(v1659 + 8);
            else
              v1661 = 0;
            v1656 = sub_1C5D52060(v1658, 222, (const llvm::APInt *)&v3588, v1029, v3513, (uint64_t)v66, v65, v1661);
            v1657 = v1662;
            v1030 = v1660;
            LODWORD(v61) = v3502;
          }
          v1663 = *(_QWORD *)(v1028 + 16);
          v1664 = *(_QWORD *)(v9 + 40);
          v1665 = *(unsigned __int16 *)(v9 + 58);
          v3593[0] = (void *)v62;
          LODWORD(v3593[1]) = v61;
          v3594 = (void **)v64;
          v1666 = v1030;
          LODWORD(v3595) = v1030;
          v3596 = v1656;
          LODWORD(v3597) = v1657;
          v32 = (uint64_t)sub_1C5D618C0(v1663, 0x8Du, v1664, v1665, (uint64_t *)v3593, 3, v69);
          v33 = *(_QWORD **)(v1028 + 16);
          if (!v32 || v32 == v9)
          {
            v1668 = *(_QWORD *)(v9 + 40);
            v1669 = *(unsigned __int16 *)(v9 + 58);
            v3593[0] = v64;
            LODWORD(v3593[1]) = v1666;
            v3594 = (void **)v62;
            LODWORD(v3595) = v61;
            v3596 = v1656;
            LODWORD(v3597) = v1657;
            v1670 = sub_1C5D618C0((uint64_t)v33, 0x8Du, v1668, v1669, (uint64_t *)v3593, 3, v69);
            if (!v1670)
              goto LABEL_2116;
            v32 = (uint64_t)v1670;
            if (v1670 == (unsigned __int8 **)v9)
              goto LABEL_2116;
            v33 = *(_QWORD **)(v3554 + 16);
            v1671 = v33[104];
            v899 = (void *)v3513;
            if (v1671)
              v36 = *(_WORD *)(v1671 + 8);
            else
              v36 = 0;
          }
          else
          {
            v1667 = v33[104];
            if (v1667)
              v36 = *(_WORD *)(v1667 + 8);
            else
              v36 = 0;
            v899 = (void *)v3513;
          }
          v898 = (uint64_t)v3529;
          v896 = 222;
          goto LABEL_1751;
        case 0x92:
          if (!*(_DWORD *)(a3 + 8))
            goto LABEL_2116;
          *(_OWORD *)v3593 = *(_OWORD *)*(_QWORD *)(v9 + 40);
          if (LOBYTE(v3593[0]) == 49)
          {
            v207 = 6;
          }
          else
          {
            if (LOBYTE(v3593[0]) != 38)
              goto LABEL_2116;
            v207 = 5;
          }
          v762 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40);
          v763 = *(unsigned __int16 *)(v762 + 24);
          if (v763 != 35 && v763 != 11)
            goto LABEL_2116;
          v765 = *(_QWORD *)(v762 + 80);
          v766 = (llvm::APInt *)(v765 + 24);
          v767 = *(_DWORD *)(v765 + 32);
          if (v767 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v766) != v767)
              goto LABEL_2116;
          }
          else if (*(_QWORD *)v766)
          {
            goto LABEL_2116;
          }
          v825 = *(_QWORD *)(a3 + 16);
          v827 = (llvm *)sub_1C6131264((unsigned __int8 *)v3593, (uint64_t)v11, a3);
          v828 = *(uint64_t **)(v9 + 32);
          v829 = *v828;
          v830 = v828[1];
          v831 = *(_QWORD *)(v825 + 832);
          if (v831)
            v832 = *(_WORD *)(v831 + 8);
          else
            v832 = 0;
          v2031 = sub_1C5D52060(v825, 201, (const llvm::APInt *)&v3588, v827, v826, v829, v830, v832);
          v2032 = *(_QWORD *)(a3 + 16);
          v2033 = *(_QWORD *)(v2032 + 832);
          if (v2033)
            v2034 = *(_WORD *)(v2033 + 8);
          else
            v2034 = 0;
          v32 = (uint64_t)sub_1C5D52060(v2032, 199, (const llvm::APInt *)&v3588, (llvm *)v207, 0, (uint64_t)v2031, v2030, v2034);
          v34 = v2035;
          v33 = *(_QWORD **)(a3 + 16);
          v898 = (uint64_t)v3593[0];
          v899 = v3593[1];
          goto LABEL_2383;
        case 0x93:
          v198 = *(uint64_t **)(v9 + 32);
          v199 = *v198;
          if (*(_WORD *)(*v198 + 24) != 146)
            goto LABEL_2116;
          v200 = v198[10];
          v201 = *(unsigned __int16 *)(v200 + 24);
          if (v201 != 35 && v201 != 11)
            goto LABEL_2116;
          *(_OWORD *)v3608 = *(_OWORD *)(v198 + 5);
          v203 = *(_QWORD *)(v200 + 80);
          v204 = (unsigned int *)(v203 + 24);
          if (*(_DWORD *)(v203 + 32) >= 0x41u)
            v204 = *(unsigned int **)v204;
          v205 = *v204;
          v3593[0] = &v3594;
          v3593[1] = (void *)0x400000000;
          if (*(_WORD *)(v199 + 56))
          {
            v1257 = 0;
            v1258 = 0;
            v1259 = 40 * *(unsigned __int16 *)(v199 + 56);
            do
            {
              v1260 = *(_OWORD *)(*(_QWORD *)(v199 + 32) + v1257);
              if (v1258 >= HIDWORD(v3593[1]))
              {
                v3535 = *(_OWORD *)(*(_QWORD *)(v199 + 32) + v1257);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, v1258 + 1, 16);
                v1260 = v3535;
                v1258 = v3593[1];
              }
              *((_OWORD *)v3593[0] + v1258) = v1260;
              v1258 = ++LODWORD(v3593[1]);
              v1257 += 40;
            }
            while (v1259 != v1257);
            v206 = (void **)v3593[0];
          }
          else
          {
            v206 = (void **)&v3594;
          }
          v1261 = &v206[2 * v205];
          *v1261 = v3608[0];
          *((_DWORD *)v1261 + 2) = v3608[1];
          v1262 = *(_QWORD *)(v3554 + 16);
          v1263 = *(unsigned __int8 **)(v9 + 64);
          *(_QWORD *)&v3623 = v1263;
          if (v1263)
            llvm::MetadataTracking::track((uint64_t)&v3623, v1263, 2);
          DWORD2(v3623) = *(_DWORD *)(v9 + 60);
          v1264 = *(_QWORD *)(v9 + 40);
          v1265 = *(llvm **)v1264;
          v1266 = *(void **)(v1264 + 8);
          v1267 = (uint64_t *)v3593[0];
          v1268 = LODWORD(v3593[1]);
          v1269 = *(_QWORD *)(v1262 + 832);
          if (v1269)
            v1270 = *(unsigned __int16 *)(v1269 + 8);
          else
            v1270 = 0;
          v1271 = v1262;
LABEL_1360:
          *(_QWORD *)&v3590 = sub_1C636D0C8(v1271, (const char *)0x92, (const llvm::APInt *)&v3623, v1265, (uint64_t)v1266, v1267, v1268, v1270);
          *((_QWORD *)&v3590 + 1) = v1272;
          v1273 = (unsigned __int8 *)v3623;
          if ((_QWORD)v3623)
          {
            v1274 = (void **)&v3623;
LABEL_1362:
            llvm::MetadataTracking::untrack((uint64_t)v1274, v1273);
          }
          goto LABEL_2514;
        case 0x94:
          v208 = *(uint64_t **)(v9 + 32);
          v209 = v208[5];
          v210 = *(unsigned __int16 *)(v209 + 24);
          if (v210 != 35 && v210 != 11)
            goto LABEL_2116;
          v212 = *(_QWORD *)(v209 + 80);
          v213 = (_QWORD *)(v212 + 24);
          if (*(_DWORD *)(v212 + 32) >= 0x41u)
            v213 = (_QWORD *)*v213;
          v214 = (_QWORD *)*v213;
          v215 = *(uint64_t **)(v9 + 40);
          v216 = *v215;
          v217 = (void *)v215[1];
          v3593[0] = (void *)*v215;
          v3593[1] = v217;
          v218 = *v208;
          v219 = *((unsigned int *)v208 + 2);
          if (*(_WORD *)(*v208 + 24) != 216)
            goto LABEL_2063;
          v220 = *(unsigned int **)(v218 + 32);
          v221 = *(_QWORD *)v220;
          v222 = v220[2];
          v223 = *(unsigned __int16 *)(*(_QWORD *)v220 + 24);
          if ((v223 - 198) <= 2
            && (v224 = *(_QWORD **)(v221 + 32),
                v225 = *v224,
                v226 = v224[1],
                v227 = (unsigned __int8 *)(*(_QWORD *)(*v224 + 40) + 16 * v226),
                v228 = *v227,
                v228 == v216)
            && ((v229 = (void *)*((_QWORD *)v227 + 1), !v228) ? (v230 = v229 == v217) : (v230 = 1), v230))
          {
            if (!(_DWORD)v214)
            {
              *(_QWORD *)&v3590 = v225;
              *((_QWORD *)&v3590 + 1) = v226;
              goto LABEL_2117;
            }
            if (v223 != 146)
            {
              if (v223 == 200)
              {
                v2300 = *(_QWORD *)(v3554 + 16);
                v2301 = v216;
                v2302 = (uint64_t)v217;
                goto LABEL_2550;
              }
              if (v223 == 199)
                goto LABEL_898;
              goto LABEL_800;
            }
          }
          else if (v223 != 146)
          {
LABEL_800:
            if (v223 != 4 || (_DWORD)v214 != 1)
            {
              if (v223 == 35 || v223 == 11)
              {
                v742 = *(_QWORD *)(v218 + 40) + 16 * v219;
                v744 = *(void **)v742;
                v743 = *(llvm::EVT ***)(v742 + 8);
                v3608[0] = v744;
                v3608[1] = v743;
                v745 = (_BYTE)v744 ? sub_1C47F37A0((unsigned __int8 *)v3608) : llvm::EVT::getEVT(v743[3], 0, a3);
                if (v745 != 3)
                {
                  v1127 = (uint64_t *)(*(_QWORD *)(v218 + 40) + 16 * v219);
                  v1129 = *v1127;
                  v1128 = v1127[1];
                  *(_QWORD *)&v3623 = v1129;
                  *((_QWORD *)&v3623 + 1) = v1128;
                  if ((_BYTE)v1129)
                  {
                    EVT = sub_1C47F37A0((unsigned __int8 *)&v3623);
                    v1131 = 0;
                  }
                  else
                  {
                    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v1128 + 24), 0, a3);
                  }
                  if (EVT)
                  {
                    if ((EVT - 8) < 7u
                      || (EVT - 75) < 0x2Du
                      || (EVT + 104) < 0x13u)
                    {
                      goto LABEL_2063;
                    }
LABEL_1989:
                    v1920 = (uint64_t *)(*(_QWORD *)(v218 + 40) + 16 * v219);
                    v1922 = *v1920;
                    v1921 = v1920[1];
                    *(_QWORD *)&v3623 = v1922;
                    *((_QWORD *)&v3623 + 1) = v1921;
                    if ((_BYTE)v1922)
                    {
                      LOBYTE(v1923) = sub_1C47F37A0((unsigned __int8 *)&v3623);
                      v1924 = 0;
                      v1925 = 0;
                    }
                    else
                    {
                      v1923 = llvm::EVT::getEVT(*(llvm::EVT **)(v1921 + 24), 0, a3);
                      v1924 = v1923 & 0xFFFFFFFFFFFFFF00;
                    }
                    v3608[0] = (void *)(v1924 | v1923);
                    v3608[1] = v1925;
                    v1983 = *(_QWORD *)(**(_QWORD **)(v218 + 32) + 80);
                    v1984 = (unint64_t *)(v1983 + 24);
                    if (*(_DWORD *)(v1983 + 32) >= 0x41u)
                      v1984 = (unint64_t *)*v1984;
                    v1985 = *v1984;
                    if ((_BYTE)v1923)
                      v1986 = sub_1C47A8C74((unsigned __int8 *)v3608);
                    else
                      v1986 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3608);
                    v1988 = v1986;
                    if ((_DWORD)v1987 == 1)
                    v1989 = ~(-1 << v1988);
                    if ((_DWORD)v214)
                    {
                      if ((_DWORD)v214 != 1)
                        goto LABEL_2063;
                      if (LOBYTE(v3608[0]))
                        v2527 = sub_1C47A8C74((unsigned __int8 *)v3608);
                      else
                        v2527 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3608);
                      v2978 = v2527;
                      if ((_DWORD)v2528 == 1)
                      v543 = (v1985 >> v2978) & v1989;
                    }
                    else
                    {
                      v543 = v1985 & v1989;
                    }
                    v541 = *(_QWORD *)(v3554 + 16);
                    v216 = (uint64_t)v3593[0];
                    v217 = v3593[1];
                    goto LABEL_538;
                  }
                  if ((*(_DWORD *)(v1131 + 8) & 0xFE) == 0x12)
                    v1318 = *(unsigned __int8 *)(**(_QWORD **)(v1131 + 16) + 8);
                  else
                    v1318 = *(_DWORD *)(v1131 + 8);
                  if (v1318 >= 7)
                    goto LABEL_1989;
                }
              }
LABEL_2063:
              if (LOBYTE(v3593[0]) == 5)
              {
                v1990 = *(unsigned __int16 *)(v218 + 24);
                if (*(_BYTE *)(*(_QWORD *)(v218 + 40) + 16 * v219) == 6)
                {
                  if (v1990 != 146)
                  {
                    if (v1990 == 35 || v1990 == 11)
                    {
                      v2021 = *(_QWORD *)(**(_QWORD **)(v9 + 32) + 80);
                      v2022 = (unint64_t *)(v2021 + 24);
                      if (*(_DWORD *)(v2021 + 32) >= 0x41u)
                        v2022 = (unint64_t *)*v2022;
                      v542 = *v2022;
                      if ((_DWORD)v214)
                      {
                        v541 = *(_QWORD *)(v3554 + 16);
                        v543 = HIDWORD(v542);
                      }
                      else
                      {
                        v541 = *(_QWORD *)(v3554 + 16);
LABEL_535:
                        v543 = v542;
                      }
                    }
                    else
                    {
                      if (((v1990 & 0xFFFE) == 0xC6 || v1990 == 200) && !(_DWORD)v214)
                      {
                        v1991 = *(unsigned int **)(v218 + 32);
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1991 + 40) + 16 * v1991[2]) == 5)
                        {
                          v726 = *(_OWORD *)v1991;
                          goto LABEL_1601;
                        }
LABEL_2088:
                        v2001 = *(_DWORD **)(v9 + 32);
                        v2002 = *(_QWORD *)v2001;
                        if (*(_WORD *)(*(_QWORD *)v2001 + 24) != 395)
                          goto LABEL_2116;
                        v2003 = *(unsigned __int16 *)(**(_QWORD **)(v2002 + 32) + 24);
                        if (v2003 != 35 && v2003 != 11)
                          goto LABEL_2116;
                        v2005 = *(_QWORD *)(v2002 + 48);
                        if (!v2005)
                          goto LABEL_2101;
                        v2006 = v2001[2];
                        v2007 = 1;
                        do
                        {
                          if (*(_DWORD *)(v2005 + 8) == v2006)
                          {
                            if (!v2007)
                              goto LABEL_2101;
                            --v2007;
                          }
                          v2005 = *(_QWORD *)(v2005 + 32);
                        }
                        while (v2005);
                        if (v2007)
                        {
LABEL_2101:
                          if (LOBYTE(v3593[0]))
                            v2008 = sub_1C47A8C74((unsigned __int8 *)v3593);
                          else
                            v2008 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3593);
                          v2010 = v2008;
                          if ((_DWORD)v2009 == 1)
                          if (v2010 <= 0x1F)
                          {
                            v2011 = (_BYTE *)v10[23037];
                            v2012 = v2011[319] && v2011[338] == 0;
                            if (!v2012 && !v2011[326])
                              goto LABEL_2116;
                          }
                        }
                        v2013 = *(unsigned int **)(v9 + 32);
                        v2014 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v2013 + 32) + 80);
                        v2015 = (_QWORD *)(v2014 + 24);
                        if (*(_DWORD *)(v2014 + 32) >= 0x41u)
                          v2015 = (_QWORD *)*v2015;
                        v2016 = (_QWORD *)*v2015;
                        v2017 = *(_QWORD *)(*(_QWORD *)v2013 + 40) + 16 * v2013[2];
                        v2019 = *(void **)v2017;
                        v2018 = *(llvm::EVT ***)(v2017 + 8);
                        v3608[0] = v2019;
                        v3608[1] = v2018;
                        if (v2019 - 27 < 2)
                          goto LABEL_2116;
                        if ((_BYTE)v2019)
                        {
                          LOBYTE(v2084) = sub_1C47F37A0((unsigned __int8 *)v3608);
                          v2086 = 0;
                          v2085 = 0;
                        }
                        else
                        {
                          v2084 = llvm::EVT::getEVT(v2018[3], 0, a3);
                          v2086 = v2084 & 0xFFFFFFFFFFFFFF00;
                        }
                        *(_QWORD *)&v3623 = v2086 | v2084;
                        *((_QWORD *)&v3623 + 1) = v2085;
                        v2272 = sub_1C47C1C70((unsigned __int8 *)&v3623) * (_DWORD)v214;
                        if ((_DWORD)v2271 == 1)
                        v2273 = *(_QWORD *)(v3554 + 16);
                        v2274 = *(unsigned __int8 **)(v9 + 64);
                        *(_QWORD *)&v3623 = v2274;
                        v2275 = v2273;
                        if (v2274)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v3623, v2274, 2);
                          v2275 = *(_QWORD *)(v3554 + 16);
                        }
                        DWORD2(v3623) = *(_DWORD *)(v9 + 60);
                        v2276 = (llvm *)v3593[0];
                        v2277 = v3593[1];
                        v2279 = sub_1C6366AB4(v2275, (v2272 + (_DWORD)v2016), (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
                        v2280 = *(_QWORD *)(v2273 + 832);
                        if (v2280)
                          v2281 = *(_WORD *)(v2280 + 8);
                        else
                          v2281 = 0;
                        *(_QWORD *)&v3590 = sub_1C5D52060(v2273, 395, (const llvm::APInt *)&v3623, v2276, (uint64_t)v2277, (uint64_t)v2279, v2278, v2281);
                        *((_QWORD *)&v3590 + 1) = v2364;
LABEL_2485:
                        v1811 = (unsigned __int8 *)v3623;
                        if (!(_QWORD)v3623)
                          goto LABEL_2117;
                        v1812 = (void **)&v3623;
LABEL_1971:
                        llvm::MetadataTracking::untrack((uint64_t)v1812, v1811);
                        goto LABEL_2117;
                      }
                      if (v1990 != 199 || !(_DWORD)v214)
                      {
                        if (v1990 != 200 || !(_DWORD)v214)
                          goto LABEL_2088;
                        v2300 = *(_QWORD *)(v3554 + 16);
                        v2301 = 5;
                        v2302 = 0;
LABEL_2550:
                        v38 = (uint64_t)sub_1C61312D0(v2300, (llvm *)v2301, v2302);
                        goto LABEL_20;
                      }
                      v541 = *(_QWORD *)(v3554 + 16);
                      v543 = 0;
                    }
                    v216 = 5;
                    goto LABEL_537;
                  }
LABEL_2075:
                  v1992 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 80);
                  v1993 = (unsigned int *)(v1992 + 24);
                  if (*(_DWORD *)(v1992 + 32) >= 0x41u)
                    v1993 = *(unsigned int **)v1993;
                  v1994 = (uint64_t *)(*(_QWORD *)(v218 + 32) + 40 * *v1993);
                  v1995 = *v1994;
                  v1996 = v1994[1];
                  v1997 = (unsigned __int8 *)(*(_QWORD *)(*v1994 + 40) + 16 * v1996);
                  v1998 = *v1997;
                  if (v1998 != LOBYTE(v3593[0])
                    || ((v1999 = (void *)*((_QWORD *)v1997 + 1), !v1998) ? (v2000 = v1999 == v3593[1]) : (v2000 = 1),
                        !v2000))
                  {
                    v38 = sub_1C63663BC(*(_QWORD *)(v3554 + 16), v1995, v1996, (uint64_t)&v3588, (uint64_t)v3593[0], (uint64_t)v3593[1]);
                    goto LABEL_20;
                  }
                  *(_QWORD *)&v3590 = v1995;
                  *((_QWORD *)&v3590 + 1) = v1996;
                  goto LABEL_2117;
                }
              }
              else
              {
                v1990 = *(unsigned __int16 *)(v218 + 24);
              }
              if (v1990 != 146)
                goto LABEL_2088;
              goto LABEL_2075;
            }
            v794 = *(_QWORD *)(*(_QWORD *)(v221 + 32) + 40);
            v795 = *(unsigned __int8 *)(v794 + 80);
            v216 = (uint64_t)v3593[0];
            if (v795 != LOBYTE(v3593[0]))
              goto LABEL_2063;
            v217 = v3593[1];
            v796 = *(void **)(v794 + 88);
            if (!v795 && v796 != v3593[1])
              goto LABEL_2063;
LABEL_898:
            v541 = *(_QWORD *)(v3554 + 16);
LABEL_899:
            v543 = 0;
            goto LABEL_538;
          }
          *(_OWORD *)v3608 = *(_OWORD *)(*(_QWORD *)(v221 + 40) + 16 * v222);
          v3623 = *(_OWORD *)(*(_QWORD *)(v218 + 40) + 16 * v219);
          v1501 = sub_1C612FE00((llvm::EVT *)&v3623, (const char *)v11);
          if (v1501 == sub_1C612FE00((llvm::EVT *)v3608, v1502))
          {
            if (LOBYTE(v3608[0]))
            {
              LOBYTE(v1503) = sub_1C47F37A0((unsigned __int8 *)v3608);
              v1504 = 0;
              v1505 = 0;
            }
            else
            {
              v1503 = llvm::EVT::getEVT(*((llvm::EVT **)v3608[1] + 3), 0, a3);
              v1504 = v1503 & 0xFFFFFFFFFFFFFF00;
            }
            v3625 = (unsigned __int8 *)(v1504 | v1503);
            v3626 = v1505;
            v2258 = (_BYTE)v1503
                  ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v3625)
                  : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
            v2260 = v2258;
            v2261 = v2259;
            v2262 = LOBYTE(v3593[0])
                  ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v3593)
                  : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v3593);
            if (v2260 == v2262 && v2261 == v2263)
            {
              v33 = *(_QWORD **)(v3554 + 16);
              v898 = (uint64_t)v3593[0];
              v899 = v3593[1];
              v2264 = (uint64_t *)(*(_QWORD *)(v221 + 32) + 40 * v214);
              v32 = *v2264;
              v34 = v2264[1];
LABEL_2383:
              v2265 = v33[104];
              if (v2265)
                v36 = *(_WORD *)(v2265 + 8);
              else
                v36 = 0;
              v896 = 216;
              goto LABEL_2030;
            }
          }
          v223 = *(unsigned __int16 *)(v221 + 24);
          goto LABEL_800;
        default:
          goto LABEL_2116;
      }
    }
    if ((_DWORD)v13 != 96)
    {
      if ((_DWORD)v13 != 98)
      {
        if ((_DWORD)v13 != 99)
          goto LABEL_2116;
        v102 = *(_QWORD *)(v9 + 40);
        v85 = *(llvm **)v102;
        v84 = *(_QWORD *)(v102 + 8);
        v103 = *(_WORD *)(v9 + 72);
        v104 = **(_QWORD **)(v9 + 32);
        v105 = *(unsigned __int16 *)(v104 + 24);
        if (v105 == 36 || v105 == 12)
        {
          v107 = *(_QWORD *)(v104 + 80);
          LODWORD(v3593[1]) = 64;
          v3593[0] = (void *)0x3FF0000000000000;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v3608, (const llvm::APInt **)v3593);
          v3593[1] = v3608[0];
          v3594 = (void **)v3608[1];
          LODWORD(v3595) = (_DWORD)v3609;
          BYTE4(v3595) = BYTE4(v3609) & 0xF;
          llvm::APFloat::convert((uint64_t)v3593, *(void **)(v107 + 32), 1, v3608);
          v108 = sub_1C47ECB98(v107 + 24, (uint64_t)v3593);
          if (v3593[1] == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v3594);
          }
          else if ((*((_DWORD *)v3593[1] + 2) - 64) <= 0xFFFFFF7F && v3594)
          {
            MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
          }
          if (v108)
          {
            v328 = sub_1C6366AB4(*(_QWORD *)(v3554 + 16), 253, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
            v329 = v1125;
            v326 = *(_QWORD *)(v3554 + 16);
            v1126 = *(_QWORD *)(v9 + 32);
            v3434 = *(_QWORD *)(v1126 + 48);
            v3436 = v103;
            v3433 = *(_QWORD *)(v1126 + 40);
            v333 = 46;
            goto LABEL_1648;
          }
        }
        v109 = *(_QWORD *)(v3554 + 16);
        if (!(v103 & 0x80 | *(_WORD *)(*(_QWORD *)v109 + 1020) & 1))
          goto LABEL_2116;
        v110 = *(_QWORD *)(v9 + 32);
        v111 = *(_QWORD *)(v110 + 40);
        v112 = *(unsigned __int16 *)(v111 + 24);
        if (v112 == 215 || v112 == 212)
        {
          v113 = *(_QWORD **)(v111 + 32);
          v115 = *v113;
          v114 = (unsigned int *)(v113 + 1);
          v111 = v115;
          v112 = *(unsigned __int16 *)(v115 + 24);
        }
        else
        {
          v114 = (unsigned int *)(v110 + 48);
        }
        if (v112 != 224)
          goto LABEL_2116;
        v787 = *(_QWORD *)(v111 + 40) + 16 * *v114;
        v789 = *(llvm **)v787;
        v788 = *(_QWORD *)(v787 + 8);
        v791 = sub_1C5D52060(v109, 418, (const llvm::APInt *)&v3588, *(llvm **)v787, v788, **(_QWORD **)(v111 + 32), *(_QWORD *)(*(_QWORD *)(v111 + 32) + 8), v103);
        v792 = v790;
        if (v789 == v85)
        {
          if ((_BYTE)v789)
            v793 = 1;
          else
            v793 = v788 == v84;
          if (v793)
            goto LABEL_1207;
        }
        else if (v789 == 9)
        {
          v853 = *(_QWORD *)(v3554 + 16);
          v854 = *(_QWORD *)(v853 + 832);
          if (v854)
            v855 = *(_WORD *)(v854 + 8);
          else
            v855 = 0;
          v1107 = sub_1C5D52060(v853, 215, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v791, v790, v855);
LABEL_1206:
          v791 = v1107;
          v792 = v792 & 0xFFFFFFFF00000000 | v1108;
LABEL_1207:
          v326 = *(_QWORD *)(v3554 + 16);
          v1109 = *(_QWORD *)(v9 + 32);
          v328 = *(uint64_t **)v1109;
          v329 = *(_QWORD *)(v1109 + 8);
          v3434 = v792;
          v3436 = v103;
          v3433 = (uint64_t)v791;
          v333 = 98;
LABEL_1648:
          v334 = (uint64_t)v85;
LABEL_1649:
          v811 = v84;
LABEL_1650:
          v38 = (uint64_t)sub_1C5D56C70(v326, v333, (const llvm::APInt *)&v3588, (llvm *)v334, v811, (uint64_t)v328, v329, a8, v3433, v3434, v3436);
          goto LABEL_20;
        }
        v1602 = *(_QWORD *)(v3554 + 16);
        v1603 = sub_1C6366AB4(v1602, 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
        v1606 = *(_QWORD *)(v1602 + 832);
        if (v1606)
          LOWORD(v1606) = *(_WORD *)(v1606 + 8);
        v1107 = sub_1C5D56C70(v1602, 212, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v791, v792, v1605, (uint64_t)v1603, v1604, v1606);
        goto LABEL_1206;
      }
      v484 = *(uint64_t **)(v9 + 32);
      v483 = *(_QWORD *)(v9 + 40);
      v486 = *(llvm **)v483;
      v485 = *(_QWORD *)(v483 + 8);
      v487 = *v484;
      v488 = v484[1];
      v489 = (uint64_t *)v484[5];
      v490 = v484[6];
      v491 = *(void **)(v9 + 64);
      v3608[0] = v491;
      if (v491)
      {
        llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v491, 2);
        v12 = *(_DWORD *)(v9 + 60);
      }
      LODWORD(v3608[1]) = v12;
      v492 = *(unsigned __int16 *)(v9 + 72);
      v493 = *((unsigned __int16 *)v489 + 12);
      if (*(_WORD *)(v487 + 24) == 222)
      {
        if (v493 == 36 || v493 == 12)
        {
          v495 = *(_QWORD *)(v3554 + 16);
          v496 = *(uint64_t **)(v487 + 32);
          v497 = *v496;
          v498 = v496[1];
          v499 = *(_QWORD *)(v495 + 832);
          if (v499)
            v500 = *(_WORD *)(v499 + 8);
          else
            v500 = 0;
          v848 = sub_1C5D52060(*(_QWORD *)(v3554 + 16), 222, (const llvm::APInt *)v3608, v486, v485, (uint64_t)v489, v490, v500);
          v851 = sub_1C5D56C70(v495, 98, (const llvm::APInt *)v3608, v486, v485, v497, v498, v850, (uint64_t)v848, v849, v492);
          goto LABEL_1727;
        }
        v783 = 0;
      }
      else if (v493 == 36 || v493 == 12)
      {
        v783 = v489;
      }
      else
      {
        v783 = 0;
      }
      v784 = *(_QWORD **)(v3554 + 16);
      if ((*(_WORD *)(*v784 + 1020) & 1) == 0 && (~v492 & 0x50) != 0 && v783)
      {
        v785 = v783[10];
        v786 = *(_UNKNOWN **)(v785 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v785 + 40) : v785 + 24;
        if ((*(_BYTE *)(v786 + 28) & 7) == 3)
        {
          v1916 = v784[2];
          v1917 = v3608[0];
          v3537 = v488;
          if (v3608[0])
          {
            v1918 = *((_QWORD *)v3608[0] - *((unsigned int *)v3608[0] + 2));
            if (*(_BYTE *)v1918 != 15)
              v1918 = *(_QWORD *)(v1918 - 8 * *(unsigned int *)(v1918 + 8));
            v1919 = *((_DWORD *)v3608[0] + 1);
            v1917 = *((unsigned __int16 *)v3608[0] + 1);
          }
          else
          {
            v1918 = 0;
            v1919 = 0;
          }
          v2149 = *(_QWORD *)(*(_QWORD *)(v1916 + 640) + 16);
          v2150 = *(void ***)(v2149 + 56);
          LODWORD(v3593[1]) = 11;
          BYTE4(v3593[1]) = 2;
          v3594 = v2150;
          v3595 = v1918;
          v3596 = (uint64_t *)__PAIR64__(v1917, v1919);
          v3597 = (unint64_t)"agx2-lower";
          v3598 = "SlowMathFMulWithZero";
          v3599 = 20;
          LOBYTE(v3600) = 0;
          LOBYTE(v3601) = 0;
          v3602 = v3604;
          v3603 = 0x400000000;
          v3605 = 0;
          v3606 = -1;
          v3607 = v2149;
          v3593[0] = &off_1E814E570;
          v3560 = 6;
          strcpy((char *)v3559, "String");
          v3561 = operator new(0x58uLL);
          v3562 = xmmword_1C642B410;
          strcpy((char *)v3561, "A floating point mul with zero cannot be optimized away because fast-math is disabled.");
          v3563 = 0;
          v3564 = 0;
          sub_1C47E3888((uint64_t)v3593, (uint64_t)v3559);
          if (SHIBYTE(v3562) < 0)
            operator delete(v3561);
          if (v3560 < 0)
            operator delete(v3559[0]);
          llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(v3554 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3593);
          v3593[0] = &off_1E814E790;
          v2151 = (char *)v3602;
          if ((_DWORD)v3603)
          {
            v2152 = (unint64_t)v3603 << 6;
            do
            {
              v2153 = (void **)&v2151[v2152];
              if (v2151[v2152 - 17] < 0)
                operator delete(*(v2153 - 5));
              if (*((char *)v2153 - 41) < 0)
                operator delete(*(v2153 - 8));
              v2152 -= 64;
            }
            while (v2152);
            v2151 = (char *)v3602;
          }
          LODWORD(v488) = v3537;
          if (v2151 != v3604)
            free(v2151);
        }
      }
      if (*(int *)(v3554 + 8) < 2)
      {
        v1068 = 2;
        goto LABEL_1728;
      }
      if (*(_WORD *)(v487 + 24) == 222)
      {
        if (!sub_1C48EFEC4(v9))
          goto LABEL_1722;
        v1069 = *(_QWORD *)(v487 + 32);
        v487 = *(_QWORD *)v1069;
        LODWORD(v488) = *(_DWORD *)(v1069 + 8);
      }
      else
      {
        v1070 = *((unsigned __int16 *)v489 + 12);
        if (v1070 != 12 && v1070 != 222 && v1070 != 36 || (sub_1C48EFEC4(v9) & 1) == 0)
          goto LABEL_1722;
        if (v1070 == 222)
        {
          v1071 = v489[4];
          v489 = *(uint64_t **)v1071;
          LODWORD(v490) = *(_DWORD *)(v1071 + 8);
        }
        else
        {
          v1189 = *(_QWORD *)(v3554 + 16);
          v1190 = *(_QWORD *)(v1189 + 832);
          if (v1190)
            v1191 = *(_WORD *)(v1190 + 8);
          else
            v1191 = 0;
          v489 = sub_1C5D52060(v1189, 222, (const llvm::APInt *)v3608, v486, v485, (uint64_t)v489, v490, v1191);
          LODWORD(v490) = v1643;
        }
      }
      v1644 = *(_QWORD *)(v3554 + 16);
      v1645 = *(_QWORD *)(v9 + 40);
      v1646 = *(unsigned __int16 *)(v9 + 58);
      v3593[0] = (void *)v487;
      LODWORD(v3593[1]) = v488;
      v3594 = (void **)v489;
      LODWORD(v3595) = v490;
      v1647 = sub_1C5D618C0(v1644, 0x62u, v1645, v1646, (uint64_t *)v3593, 2, v492);
      v1648 = *(_QWORD *)(v3554 + 16);
      if (v1647 && v1647 != (unsigned __int8 **)v9)
      {
LABEL_1720:
        v1652 = *(_QWORD *)(v1648 + 832);
        if (v1652)
          v1653 = *(_WORD *)(v1652 + 8);
        else
          v1653 = 0;
        v851 = sub_1C5D52060(v1648, 222, (const llvm::APInt *)v3608, v486, v485, (uint64_t)v1647, 0, v1653);
LABEL_1727:
        *(_QWORD *)&v3590 = v851;
        *((_QWORD *)&v3590 + 1) = v852;
        v1068 = 1;
        goto LABEL_1728;
      }
      v1649 = *(_QWORD *)(v9 + 40);
      v1650 = *(unsigned __int16 *)(v9 + 58);
      v3593[0] = v489;
      LODWORD(v3593[1]) = v490;
      v3594 = (void **)v487;
      LODWORD(v3595) = v488;
      v1651 = sub_1C5D618C0(v1648, 0x62u, v1649, v1650, (uint64_t *)v3593, 2, v492);
      if (v1651)
      {
        v1647 = v1651;
        if (v1651 != (unsigned __int8 **)v9)
        {
          v1648 = *(_QWORD *)(v3554 + 16);
          goto LABEL_1720;
        }
      }
LABEL_1722:
      *(_QWORD *)&v3590 = 0;
      DWORD2(v3590) = 0;
      if (sub_1C48EFF64((uint64_t)&v3590, v9, v3554))
        v1068 = 1;
      else
        v1068 = 2;
LABEL_1728:
      if (v3608[0])
        llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
      if (v1068 == 2)
        goto LABEL_2116;
      goto LABEL_2117;
    }
    v453 = *(uint64_t **)(v9 + 32);
    v454 = *(_QWORD *)(v9 + 40);
    v456 = *v453;
    v455 = v453[1];
    v457 = v453[5];
    v458 = v453[6];
    v3484 = *(llvm **)v454;
    v3497 = *(_QWORD *)(v454 + 8);
    v459 = *(unsigned __int16 *)(v457 + 24);
    v460 = v459 == 36 || v459 == 12;
    v3459 = v457;
    if (v460)
      v461 = v457;
    else
      v461 = 0;
    v462 = a3;
    v463 = *(_QWORD **)(a3 + 16);
    v3528 = *(unsigned __int16 *)(*v463 + 1020);
    v464 = *(unsigned __int16 *)(v9 + 72);
    if (v461)
    {
      v465 = *(_QWORD *)(v461 + 80);
      v466 = v465 + 24;
      v467 = *(void **)(v465 + 32);
      v468 = v465 + 24;
      if (v467 == &unk_1C866F1C0)
        v468 = *(_QWORD *)(v465 + 40);
      if ((*(_BYTE *)(v468 + 28) & 7) == 3)
      {
        if ((v3528 & 1) == 0 || (v464 & 0x40) == 0)
          goto LABEL_1249;
        if (v467 == &unk_1C866F1C0)
          v466 = *(_QWORD *)(v465 + 40);
        if ((*(_BYTE *)(v466 + 28) & 8) == 0)
        {
LABEL_1249:
          v1170 = v463[2];
          v1171 = v3588;
          if (v3588)
          {
            v1172 = *(_QWORD *)&v3588[-2 * v3588[2]];
            if (*(_BYTE *)v1172 != 15)
              v1172 = *(_QWORD *)(v1172 - 8 * *(unsigned int *)(v1172 + 8));
            v1173 = v3588[1];
            v1171 = *((unsigned __int16 *)v3588 + 1);
          }
          else
          {
            v1172 = 0;
            v1173 = 0;
          }
          v1506 = *(_QWORD *)(*(_QWORD *)(v1170 + 640) + 16);
          v1507 = *(void ***)(v1506 + 56);
          LODWORD(v3593[1]) = 11;
          BYTE4(v3593[1]) = 2;
          v3594 = v1507;
          v3595 = v1172;
          v3596 = (uint64_t *)__PAIR64__(v1171, v1173);
          v3597 = (unint64_t)"agx2-lower";
          v3598 = "SlowMathFAddWithZero";
          v3599 = 20;
          LOBYTE(v3600) = 0;
          LOBYTE(v3601) = 0;
          v3602 = v3604;
          v3603 = 0x400000000;
          v3605 = 0;
          v3606 = -1;
          v3607 = v1506;
          v3593[0] = &off_1E814E570;
          v3580 = 6;
          strcpy((char *)v3579, "String");
          __p = operator new(0x58uLL);
          v3582 = xmmword_1C642B410;
          strcpy((char *)__p, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
          v3584 = 0;
          v3583 = 0;
          sub_1C47E3888((uint64_t)v3593, (uint64_t)v3579);
          if (SHIBYTE(v3582) < 0)
            operator delete(__p);
          if (v3580 < 0)
            operator delete(v3579[0]);
          llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3593);
          v3593[0] = &off_1E814E790;
          v1508 = (char *)v3602;
          if ((_DWORD)v3603)
          {
            v1509 = (unint64_t)v3603 << 6;
            do
            {
              v1510 = (void **)&v1508[v1509];
              if (v1508[v1509 - 17] < 0)
                operator delete(*(v1510 - 5));
              if (*((char *)v1510 - 41) < 0)
                operator delete(*(v1510 - 8));
              v1509 -= 64;
            }
            while (v1509);
            v1508 = (char *)v3602;
          }
          if (v1508 != v3604)
            free(v1508);
          v462 = a3;
        }
      }
    }
    v3512 = v464;
    if (!*(_DWORD *)(v462 + 8))
      goto LABEL_2116;
    v469 = v456;
    v470 = *(unsigned __int16 *)(v456 + 24);
    v471 = v3459;
    v472 = *(unsigned __int16 *)(v3459 + 24);
    v473 = v3512;
    if ((v470 == 222) != (v472 == 222) && sub_1C48EFEC4(v9) && v3512 & 0x40 | v3528 & 1)
    {
      if (v470 == 222)
      {
        v474 = *(_QWORD *)(v456 + 32);
        v475 = *(uint64_t **)v474;
        v476 = *(_DWORD *)(v474 + 8);
      }
      else
      {
        v1132 = *(_QWORD *)(v3554 + 16);
        v1133 = *(_QWORD *)(v1132 + 832);
        if (v1133)
          v1134 = *(_WORD *)(v1133 + 8);
        else
          v1134 = 0;
        v475 = sub_1C5D52060(v1132, 222, (const llvm::APInt *)&v3588, v3484, v3497, v456, v455, v1134);
        v476 = v1544;
        v472 = *(unsigned __int16 *)(v3459 + 24);
      }
      if (v472 == 222)
      {
        v1545 = *(_QWORD *)(v3459 + 32);
        v1546 = *(uint64_t **)v1545;
        v1547 = *(_DWORD *)(v1545 + 8);
      }
      else
      {
        v1548 = *(_QWORD *)(v3554 + 16);
        v1549 = *(_QWORD *)(v1548 + 832);
        if (v1549)
          v1550 = *(_WORD *)(v1549 + 8);
        else
          v1550 = 0;
        v1546 = sub_1C5D52060(v1548, 222, (const llvm::APInt *)&v3588, v3484, v3497, v3459, v458, v1550);
        v1547 = v1551;
      }
      v1552 = *(_QWORD *)(v3554 + 16);
      v1553 = *(_QWORD *)(v9 + 40);
      v1554 = *(unsigned __int16 *)(v9 + 58);
      v3593[0] = v475;
      LODWORD(v3593[1]) = v476;
      v3594 = (void **)v1546;
      LODWORD(v3595) = v1547;
      v32 = (uint64_t)sub_1C5D618C0(v1552, 0x60u, v1553, v1554, (uint64_t *)v3593, 2, v3512);
      v33 = *(_QWORD **)(v3554 + 16);
      if (v32 && v32 != v9)
      {
LABEL_1597:
        v1558 = v33[104];
        if (v1558)
          v36 = *(_WORD *)(v1558 + 8);
        else
          v36 = 0;
        v896 = 222;
        v898 = (uint64_t)v3484;
        v899 = (void *)v3497;
LABEL_1751:
        v34 = 0;
        goto LABEL_2030;
      }
      v1555 = *(_QWORD *)(v9 + 40);
      v1556 = *(unsigned __int16 *)(v9 + 58);
      v3593[0] = v1546;
      LODWORD(v3593[1]) = v1547;
      v3594 = (void **)v475;
      LODWORD(v3595) = v476;
      v473 = v3512;
      v1557 = sub_1C5D618C0((uint64_t)v33, 0x60u, v1555, v1556, (uint64_t *)v3593, 2, v3512);
      v469 = v456;
      v471 = v3459;
      if (v1557)
      {
        v32 = (uint64_t)v1557;
        if (v1557 != (unsigned __int8 **)v9)
        {
          v33 = *(_QWORD **)(v3554 + 16);
          goto LABEL_1597;
        }
      }
    }
    v3593[0] = 0;
    LODWORD(v3593[1]) = 0;
    v1559 = v3554;
    if (!sub_1C48EFF64((uint64_t)v3593, v9, v3554))
    {
      if ((*(_DWORD *)(**(_QWORD **)(v3554 + 16) + 1104) == 0) | v3528 & 1 || (v473 & 0x100) != 0)
      {
        v3478 = v10 + 23037;
        v1571 = 1;
        v1572 = v471;
        v1573 = v455;
        v1574 = v469;
        v1575 = v458;
        v3456 = v473 & 0x400;
        v3470 = (*(_DWORD *)(**(_QWORD **)(v3554 + 16) + 1104) == 0) | v3528 | (v3456 >> 10);
        while (1)
        {
          v1576 = v1572;
          v1572 = v1574;
          v1577 = v1571;
          v3577 = (unsigned __int8 *)v3588;
          if (v3588)
            llvm::MetadataTracking::track((uint64_t)&v3577, (unsigned __int8 *)v3588, 2);
          v3578 = v3589;
          v1578 = sub_1C48EE2C8((uint64_t)v3593, v3484, v3497, (const llvm::APInt *)&v3577, v1572, v1573, v1576, v1575, (uint64_t *)v3554, v3528 & 1, v3435, v3512, SHIDWORD(v3512), 1, 0, 1, 98);
          if (v3577)
            llvm::MetadataTracking::untrack((uint64_t)&v3577, v3577);
          if (v1578)
            goto LABEL_1600;
          if (*(_BYTE *)(*v3478 + 347))
          {
            v3575 = (unsigned __int8 *)v3588;
            if (v3588)
              llvm::MetadataTracking::track((uint64_t)&v3575, (unsigned __int8 *)v3588, 2);
            v3576 = v3589;
            v1579 = sub_1C48EE2C8((uint64_t)v3593, v3484, v3497, (const llvm::APInt *)&v3575, v1572, v1573, v1576, v1575, (uint64_t *)v3554, v3528 & 1, v3435, v3512, SHIDWORD(v3512), 1, 0, 1, 421);
            if (v3575)
              llvm::MetadataTracking::untrack((uint64_t)&v3575, v3575);
            if (v1579)
              goto LABEL_1600;
          }
          if ((v3470 & 1) == 0)
            break;
          v1571 = 0;
          v1580 = v1573 & 0xFFFFFFFF00000000 | v1575;
          v1575 = v1575 & 0xFFFFFFFF00000000 | v1573;
          v1573 = v1580;
          v1574 = v1576;
          if ((v1577 & 1) == 0)
            goto LABEL_1652;
        }
        v1572 = v3459;
        v1575 = v458;
        v1576 = v456;
        v1580 = v455;
LABEL_1652:
        v1594 = 1;
        v1595 = v1580;
        v1596 = v1576;
        v458 = v1575;
        v1597 = v1572;
        while (1)
        {
          v1598 = v1597;
          v1597 = v1596;
          v1599 = v1594;
          v3573 = (unsigned __int8 *)v3588;
          if (v3588)
            llvm::MetadataTracking::track((uint64_t)&v3573, (unsigned __int8 *)v3588, 2);
          v3574 = v3589;
          v1600 = sub_1C48EE2C8((uint64_t)v3593, v3484, v3497, (const llvm::APInt *)&v3573, v1597, v1595, v1598, v458, (uint64_t *)v3554, v3528 & 1, v3435, v3512, SHIDWORD(v3512), 0, 0, 1, 98);
          if (v3573)
            llvm::MetadataTracking::untrack((uint64_t)&v3573, v3573);
          if (v1600)
            goto LABEL_1600;
          if (*(_BYTE *)(*v3478 + 347))
          {
            v3571 = (unsigned __int8 *)v3588;
            if (v3588)
              llvm::MetadataTracking::track((uint64_t)&v3571, (unsigned __int8 *)v3588, 2);
            v3572 = v3589;
            v1601 = sub_1C48EE2C8((uint64_t)v3593, v3484, v3497, (const llvm::APInt *)&v3571, v1597, v1595, v1598, v458, (uint64_t *)v3554, v3528 & 1, v3435, v3512, SHIDWORD(v3512), 0, 0, 1, 421);
            if (v3571)
              llvm::MetadataTracking::untrack((uint64_t)&v3571, v3571);
            if (v1601)
              goto LABEL_1600;
          }
          if ((v3470 & 1) == 0)
            break;
          v1594 = 0;
          v455 = v1595 & 0xFFFFFFFF00000000 | v458;
          v458 = v458 & 0xFFFFFFFF00000000 | v1595;
          v1595 = v455;
          v1596 = v1598;
          if ((v1599 & 1) == 0)
          {
            v1559 = v3554;
            v473 = v3512;
            v469 = v1598;
            v471 = v1597;
            v1561 = v3456;
            goto LABEL_1605;
          }
        }
        v1561 = 0;
        v471 = v1572;
        v458 = v1575;
        v455 = v1580;
        v469 = v1576;
        v1559 = v3554;
        v473 = v3512;
      }
      else
      {
        v1561 = v473 & 0x400;
      }
LABEL_1605:
      if (!(v3528 & 1 | v1561))
      {
        v1570 = v455;
        v1564 = v469;
LABEL_1631:
        if ((~v473 & 0x500) == 0)
        {
LABEL_1632:
          v1581 = 1;
          while (1)
          {
            v1582 = v471;
            v471 = v1564;
            v1583 = v1581;
            if (*(_WORD *)(v1582 + 24) == 141)
            {
              v1584 = *(_QWORD *)(v1582 + 48);
              if (v1584)
              {
                v1585 = 1;
                do
                {
                  if (*(_DWORD *)(v1584 + 8) == (_DWORD)v458)
                  {
                    if (!v1585)
                      goto LABEL_1645;
                    --v1585;
                  }
                  v1584 = *(_QWORD *)(v1584 + 32);
                }
                while (v1584);
                if (!v1585)
                {
                  v1586 = *(uint64_t **)(v1582 + 32);
                  v1587 = v1586[10];
                  v1588 = *(unsigned __int16 *)(v1587 + 24);
                  if (v1588 == 215)
                  {
                    v1589 = **(_QWORD **)(v1587 + 32);
                    if (*(_WORD *)(v1589 + 24) == 98)
                    {
                      v2357 = v1564;
                      v2358 = *(_QWORD *)(v3554 + 16);
                      v2359 = *(uint64_t **)(v1589 + 32);
                      v2360 = *v2359;
                      v2361 = v2359[1];
                      v2362 = *(_QWORD *)(v2358 + 832);
                      if (v2362)
                        v2363 = *(_WORD *)(v2362 + 8);
                      else
                        v2363 = 0;
                      v3543 = sub_1C5D52060(v2358, 215, (const llvm::APInt *)&v3588, v3484, v3497, v2360, v2361, v2363);
                      v3482 = v2557;
                      v2558 = *(_QWORD *)(v3554 + 16);
                      v2559 = *(_QWORD *)(v1589 + 32);
                      v2560 = *(_QWORD *)(v2559 + 40);
                      v2561 = *(_QWORD *)(v2559 + 48);
                      v2562 = *(_QWORD *)(v2558 + 832);
                      if (v2562)
                        v2563 = *(_WORD *)(v2562 + 8);
                      else
                        v2563 = 0;
                      v2564 = sub_1C5D52060(v2558, 215, (const llvm::APInt *)&v3588, v3484, v3497, v2560, v2561, v2563);
                      v2565 = *(_QWORD *)(v3554 + 16);
                      v2566 = *(uint64_t **)(v1582 + 32);
                      v2567 = *v2566;
                      v2568 = v2566[1];
                      v2569 = v2566[5];
                      v2570 = v2566[6];
                      v2573 = sub_1C5D58E08(v2565, (const char *)0x8D, (const llvm::APInt *)&v3588, v3484, v3497, (uint64_t)v3543, v3482, v2572, (uint64_t)v2564, v2571, v2357, v1570, SHIDWORD(v1570), v3512);
                      v38 = (uint64_t)sub_1C5D58E08(v2565, (const char *)0x8D, (const llvm::APInt *)&v3588, v3484, v3497, v2567, v2568, v2576, v2569, v2570, (uint64_t)v2573, v2574, v2575, v3512);
                      goto LABEL_20;
                    }
                  }
                  else if (v1588 == 98)
                  {
                    v2348 = *(_QWORD *)(v3554 + 16);
                    v2349 = *v1586;
                    v2350 = v1586[1];
                    v2351 = v1586[5];
                    v2352 = v1586[6];
                    v2353 = sub_1C5D58E08(v2348, (const char *)0x8D, (const llvm::APInt *)&v3588, v3484, v3497, **(_QWORD **)(v1587 + 32), *(_QWORD *)(*(_QWORD *)(v1587 + 32) + 8), v1560, *(_QWORD *)(*(_QWORD *)(v1587 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v1587 + 32) + 48), v1564, v1570, SHIDWORD(v1570), v473);
                    v38 = (uint64_t)sub_1C5D58E08(v2348, (const char *)0x8D, (const llvm::APInt *)&v3588, v3484, v3497, v2349, v2350, v2356, v2351, v2352, (uint64_t)v2353, v2354, v2355, v473);
                    goto LABEL_20;
                  }
                }
              }
            }
LABEL_1645:
            v1581 = 0;
            v1590 = v1570;
            v1570 = v1570 & 0xFFFFFFFF00000000 | v458;
            v1564 = v1582;
            LODWORD(v458) = v1590;
            if ((v1583 & 1) == 0)
              goto LABEL_2116;
          }
        }
        goto LABEL_2116;
      }
      v1562 = v1559;
      v1563 = 1;
      while (1)
      {
        v1564 = v471;
        v471 = v469;
        v1565 = v1563;
        if (*(_WORD *)(v469 + 24) == 96)
          break;
LABEL_1612:
        v1563 = 0;
        v1570 = v455 & 0xFFFFFFFF00000000 | v458;
        v458 = v458 & 0xFFFFFFFF00000000 | v455;
        v455 = v1570;
        v469 = v1564;
        if ((v1565 & 1) == 0)
        {
          if ((v3528 & 1) != 0)
            goto LABEL_1632;
          goto LABEL_1631;
        }
      }
      v1566 = 0;
      v1567 = 1;
      while (1)
      {
        v1568 = v1567;
        v1569 = (_QWORD *)(*(_QWORD *)(v469 + 32) + 40 * v1566);
        if (*v1569 == v1564 && *((_DWORD *)v1569 + 2) == (_DWORD)v458)
          break;
        v1567 = 0;
        v1566 = 1;
        if ((v1568 & 1) == 0)
          goto LABEL_1612;
      }
      v1591 = v1562;
      v85 = v3484;
      v84 = v3497;
      v328 = sub_1C5D56C70(*(_QWORD *)(v1562 + 16), 96, (const llvm::APInt *)&v3588, v3484, v3497, v1564, v1569[1], v1560, v1564, v458, v473);
      v329 = v1592;
      v326 = *(_QWORD *)(v1591 + 16);
      v1593 = (uint64_t *)(*(_QWORD *)(v471 + 32) + 40 * (v1566 ^ 1));
      v3434 = v1593[1];
      v3436 = v473;
      v3433 = *v1593;
      v333 = 96;
      goto LABEL_1648;
    }
LABEL_1600:
    v726 = *(_OWORD *)v3593;
    goto LABEL_1601;
  }
  if (*(unsigned __int16 *)(v9 + 24) > 0xDDu)
  {
    if (*(unsigned __int16 *)(v9 + 24) > 0xE6u)
    {
      if ((_DWORD)v13 == 231)
      {
        v380 = **(_QWORD **)(v9 + 32);
        v381 = *(unsigned __int16 *)(v380 + 24);
        if (v381 != 36 && v381 != 12)
          goto LABEL_2116;
        v383 = *(uint64_t **)(v9 + 40);
        v131 = *v383;
        v132 = v383[1];
        v384 = *(_QWORD *)(v380 + 80);
        v385 = *(_QWORD *)(v384 + 32);
        if ((_UNKNOWN *)v385 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v384 + 32));
        }
        else
        {
          v3593[1] = *(void **)(v384 + 32);
          if ((*(_DWORD *)(v385 + 8) + 64) >= 0x80)
            v3594 = (void **)operator new[]();
          v386 = *(_BYTE *)(v384 + 52);
          v387 = v386 & 7;
          BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v386 & 0xF;
          LODWORD(v3595) = *(_DWORD *)(v384 + 48);
          v389 = (v386 & 6) != 0 && v387 != 3;
          if (v387 == 1 || v389)
          {
            v391 = *((unsigned int *)v3593[1] + 2);
            if ((v391 - 64) <= 0xFFFFFF7F)
              v392 = v3594;
            else
              v392 = (void **)&v3594;
            v395 = *(void ***)(v384 + 40);
            v394 = (void **)(v384 + 40);
            v393 = v395;
            if ((*((_DWORD *)*(v394 - 1) + 2) - 64) >= 0xFFFFFF80)
              v393 = v394;
            if (v391 <= 0xFFFFFFBF)
            {
              v396 = (unint64_t)(v391 + 64) >> 6;
              do
              {
                v397 = *v393++;
                *v392++ = v397;
                --v396;
              }
              while (v396);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, v3608);
        v398 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
        v148 = *(_QWORD *)(a3 + 16);
        v149 = log2(v398);
      }
      else
      {
        if ((_DWORD)v13 != 234)
          goto LABEL_2116;
        v127 = **(_QWORD **)(v9 + 32);
        v128 = *(unsigned __int16 *)(v127 + 24);
        if (v128 != 36 && v128 != 12)
          goto LABEL_2116;
        v130 = *(uint64_t **)(v9 + 40);
        v131 = *v130;
        v132 = v130[1];
        v133 = *(_QWORD *)(v127 + 80);
        v134 = *(_QWORD *)(v133 + 32);
        if ((_UNKNOWN *)v134 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v3593[1], (const llvm::detail::DoubleAPFloat *)(v133 + 32));
        }
        else
        {
          v3593[1] = *(void **)(v133 + 32);
          if ((*(_DWORD *)(v134 + 8) + 64) >= 0x80)
            v3594 = (void **)operator new[]();
          v135 = *(_BYTE *)(v133 + 52);
          v136 = v135 & 7;
          BYTE4(v3595) = BYTE4(v3595) & 0xF0 | v135 & 0xF;
          LODWORD(v3595) = *(_DWORD *)(v133 + 48);
          v138 = (v135 & 6) != 0 && v136 != 3;
          if (v136 == 1 || v138)
          {
            v140 = *((unsigned int *)v3593[1] + 2);
            if ((v140 - 64) <= 0xFFFFFF7F)
              v141 = v3594;
            else
              v141 = (void **)&v3594;
            v144 = *(void ***)(v133 + 40);
            v143 = (void **)(v133 + 40);
            v142 = v144;
            if ((*((_DWORD *)*(v143 - 1) + 2) - 64) >= 0xFFFFFF80)
              v142 = v143;
            if (v140 <= 0xFFFFFFBF)
            {
              v145 = (unint64_t)(v140 + 64) >> 6;
              do
              {
                v146 = *v142++;
                *v141++ = v146;
                --v145;
              }
              while (v145);
            }
          }
        }
        llvm::APFloat::convert((uint64_t)v3593, &unk_1C866F198, 1, v3608);
        v147 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3593);
        v148 = *(_QWORD *)(a3 + 16);
        v149 = exp2(v147);
      }
      *(_QWORD *)&v3590 = sub_1C5D404C4(v148, (const llvm::APInt *)&v3588, v131, v132, 0, v149);
      *((_QWORD *)&v3590 + 1) = v399;
      v400 = v3593[1];
      if (v3593[1] == &unk_1C866F1C0)
      {
LABEL_3200:
        sub_1C4773C74((uint64_t *)&v3594);
        goto LABEL_2117;
      }
LABEL_591:
      if ((v400[2] - 64) > 0xFFFFFF7F)
        goto LABEL_2117;
      v270 = v3594;
      if (!v3594)
        goto LABEL_2117;
LABEL_258:
      MEMORY[0x1CAA32F9C](v270, 0x1000C8000313F17);
      goto LABEL_2117;
    }
    if ((_DWORD)v13 != 222)
    {
      if ((_DWORD)v13 != 223)
        goto LABEL_2116;
      v78 = a3;
      if (*(int *)(a3 + 8) < 2)
        goto LABEL_2116;
      v79 = *(uint64_t **)(v9 + 32);
      v80 = *(_QWORD *)(v9 + 40);
      v81 = *v79;
      v83 = *((_DWORD *)v79 + 2);
      v82 = *((_DWORD *)v79 + 3);
      v85 = *(llvm **)v80;
      v84 = *(_QWORD *)(v80 + 8);
      v86 = *(unsigned __int16 *)(v81 + 24);
      if (v86 != 215)
      {
        if (v86 != 212)
        {
          if (v86 != 98)
            goto LABEL_2116;
          v87 = *(_QWORD *)(v81 + 48);
          if (!v87)
            goto LABEL_2116;
          v88 = 1;
          do
          {
            if (*(_DWORD *)(v87 + 8) == v83)
            {
              if (!v88)
                goto LABEL_2116;
              --v88;
            }
            v87 = *(_QWORD *)(v87 + 32);
          }
          while (v87);
          if (v88)
            goto LABEL_2116;
          v89 = *(uint64_t ***)(v81 + 32);
          v91 = *v89;
          v90 = (unint64_t)v89[1];
          v93 = v89[5];
          v92 = (unint64_t)v89[6];
          if (*((_WORD *)*v89 + 12) != 223)
          {
            v94 = *(_QWORD *)(v78 + 16);
            v95 = *(_QWORD *)(v94 + 832);
            if (v95)
              v96 = *(_WORD *)(v95 + 8);
            else
              v96 = 0;
            v91 = sub_1C5D52060(v94, 223, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v91, v90, v96);
            v90 = v90 & 0xFFFFFFFF00000000 | v2253;
          }
          if (*((_WORD *)v93 + 12) != 223)
          {
            v2254 = *(_QWORD *)(v78 + 16);
            v2255 = *(_QWORD *)(v2254 + 832);
            if (v2255)
              v2256 = *(_WORD *)(v2255 + 8);
            else
              v2256 = 0;
            v93 = sub_1C5D52060(v2254, 223, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v93, v92, v2256);
            v92 = v92 & 0xFFFFFFFF00000000 | v2257;
          }
          v38 = (uint64_t)sub_1C5D56C70(*(_QWORD *)(v78 + 16), 98, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v91, v90, a8, (uint64_t)v93, v92, *(_WORD *)(v81 + 72));
          goto LABEL_20;
        }
        v836 = *(unint64_t **)(v81 + 32);
        v837 = *v836;
        if (*(_WORD *)(*v836 + 24) != 223)
        {
          if ((sub_1C48EFEC4(v9) & 1) != 0)
            goto LABEL_2116;
          v838 = *(_QWORD *)(v81 + 48);
          if (!v838)
            goto LABEL_2116;
          v839 = 1;
          do
          {
            if (*(_DWORD *)(v838 + 8) == v83)
            {
              if (!v839)
                goto LABEL_2116;
              --v839;
            }
            v838 = *(_QWORD *)(v838 + 32);
          }
          while (v838);
          if (v839)
            goto LABEL_2116;
          v840 = *(_QWORD *)(v78 + 16);
          v841 = *(_QWORD *)(v837 + 40) + 16 * *((unsigned int *)v836 + 2);
          v842 = *(llvm **)v841;
          v843 = *(_QWORD *)(v841 + 8);
          v844 = *(_QWORD *)(v840 + 832);
          if (v844)
            v845 = *(_WORD *)(v844 + 8);
          else
            v845 = 0;
          v328 = sub_1C5D52060(v840, 223, (const llvm::APInt *)&v3588, v842, v843, v837, v836[1], v845);
          v329 = v2373;
          v326 = *(_QWORD *)(v78 + 16);
          v2374 = *(_QWORD *)(v81 + 32);
          goto LABEL_2562;
        }
LABEL_945:
        *(_QWORD *)&v3590 = v81;
        *((_QWORD *)&v3590 + 1) = __PAIR64__(v82, v83);
        goto LABEL_2117;
      }
      v846 = *(unint64_t **)(v81 + 32);
      v847 = *v846;
      if (*(_WORD *)(*v846 + 24) == 223)
        goto LABEL_945;
      v1062 = *(_QWORD *)(v78 + 16);
      v1063 = *(_QWORD *)(v847 + 40) + 16 * *((unsigned int *)v846 + 2);
      v1064 = *(llvm **)v1063;
      v1065 = *(_QWORD *)(v1063 + 8);
      v1066 = *(_QWORD *)(v1062 + 832);
      if (v1066)
        v1067 = *(_WORD *)(v1066 + 8);
      else
        v1067 = 0;
      v32 = (uint64_t)sub_1C5D52060(v1062, 223, (const llvm::APInt *)&v3588, v1064, v1065, v847, v846[1], v1067);
      v34 = v1277;
      v33 = *(_QWORD **)(v78 + 16);
LABEL_1571:
      v1538 = v33[104];
      if (v1538)
        v36 = *(_WORD *)(v1538 + 8);
      else
        v36 = 0;
      v896 = 215;
LABEL_1575:
      v898 = (uint64_t)v85;
LABEL_2029:
      v899 = (void *)v84;
      goto LABEL_2030;
    }
    if (*(int *)(a3 + 8) < 2)
      goto LABEL_2116;
    v370 = a3;
    v371 = *(uint64_t **)(v9 + 32);
    v372 = *(_QWORD *)(v9 + 40);
    v373 = *v371;
    v374 = v371[1];
    v85 = *(llvm **)v372;
    v84 = *(_QWORD *)(v372 + 8);
    v375 = *(unsigned __int16 *)(*v371 + 24);
    if ((v375 - 96) > 0x2D || ((1 << (v375 - 96)) & 0x200000000005) == 0)
    {
      if (v375 == 212)
      {
        v970 = *(unint64_t **)(v373 + 32);
        v971 = *v970;
        if (*(_WORD *)(*v970 + 24) == 222)
        {
          v326 = *(_QWORD *)(v370 + 16);
          v972 = *(_QWORD *)(v971 + 32);
          v328 = *(uint64_t **)v972;
          v329 = *(_QWORD *)(v972 + 8);
          v973 = v970[5];
          v974 = v970[6];
LABEL_1055:
          v975 = *(_QWORD *)(v326 + 832);
          if (v975)
            LOWORD(v975) = *(_WORD *)(v975 + 8);
          v3434 = v974;
          v3436 = v975;
          v3433 = v973;
          v333 = 212;
          goto LABEL_1648;
        }
        if ((sub_1C48EFEC4(v9) & 1) != 0)
          goto LABEL_2116;
        v1112 = *(_QWORD *)(v373 + 48);
        if (!v1112)
          goto LABEL_2116;
        v1113 = 1;
        do
        {
          if (*(_DWORD *)(v1112 + 8) == (_DWORD)v374)
          {
            if (!v1113)
              goto LABEL_2116;
            --v1113;
          }
          v1112 = *(_QWORD *)(v1112 + 32);
        }
        while (v1112);
        if (v1113)
          goto LABEL_2116;
        v1114 = *(_QWORD *)(v370 + 16);
        v1115 = *(_QWORD *)(v971 + 40) + 16 * *((unsigned int *)v970 + 2);
        v1116 = *(llvm **)v1115;
        v1117 = *(_QWORD *)(v1115 + 8);
        v1118 = *(_QWORD *)(v1114 + 832);
        if (v1118)
          v1119 = *(_WORD *)(v1118 + 8);
        else
          v1119 = 0;
        v328 = sub_1C5D52060(v1114, 222, (const llvm::APInt *)&v3588, v1116, v1117, v971, v970[1], v1119);
        v329 = v2454;
        v326 = *(_QWORD *)(v370 + 16);
        v2374 = *(_QWORD *)(v373 + 32);
LABEL_2562:
        v973 = *(_QWORD *)(v2374 + 40);
        v974 = *(_QWORD *)(v2374 + 48);
        goto LABEL_1055;
      }
      if (v375 != 215)
        goto LABEL_2116;
      v377 = *(unsigned int **)(v373 + 32);
      v378 = *(_QWORD *)v377;
      if (*(_WORD *)(*(_QWORD *)v377 + 24) == 222)
      {
        v33 = *(_QWORD **)(v370 + 16);
        v379 = *(uint64_t **)(v378 + 32);
        v32 = *v379;
        v34 = v379[1];
      }
      else
      {
        v1120 = *(_QWORD *)(v370 + 16);
        v1121 = *(_QWORD *)(v378 + 40) + 16 * v377[2];
        v1122 = *((_QWORD *)v377 + 1);
        v1123 = *(_QWORD *)(v1120 + 832);
        if (v1123)
          v1124 = *(_WORD *)(v1123 + 8);
        else
          v1124 = 0;
        v32 = (uint64_t)sub_1C5D52060(v1120, 222, (const llvm::APInt *)&v3588, *(llvm **)v1121, *(_QWORD *)(v1121 + 8), v378, v1122, v1124);
        v34 = v1537;
        v33 = *(_QWORD **)(v370 + 16);
      }
      goto LABEL_1571;
    }
    v746 = *(_QWORD *)(v373 + 48);
    if (!v746)
      goto LABEL_820;
    v747 = 1;
    do
    {
      if (*(_DWORD *)(v746 + 8) == (_DWORD)v374)
      {
        if (!v747)
          goto LABEL_820;
        --v747;
      }
      v746 = *(_QWORD *)(v746 + 32);
    }
    while (v746);
    if (v747)
    {
LABEL_820:
      if ((sub_1C48EFEC4(v9) & 1) != 0 || !sub_1C48EFEC4(v373))
        goto LABEL_2116;
    }
    switch(v375)
    {
      case 141:
        v1284 = *(_WORD *)(v373 + 72);
        v1285 = *(_QWORD **)(v370 + 16);
        if (!(v1284 & 0x40 | *(_WORD *)(*v1285 + 1020) & 1))
          goto LABEL_2116;
        v1286 = *(uint64_t **)(v373 + 32);
        v1288 = *v1286;
        v1287 = v1286[1];
        v1289 = (uint64_t *)v1286[5];
        v1290 = v1286[6];
        v1292 = v1286[10];
        v1291 = v1286[11];
        if (*(_WORD *)(*v1286 + 24) == 222)
        {
          v1293 = *(_QWORD *)(v1288 + 32);
          v1288 = *(_QWORD *)v1293;
          v3556 = v1287 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1293 + 8);
        }
        else
        {
          v3556 = v1286[1];
          if (*((_WORD *)v1289 + 12) == 222)
          {
            v2041 = v1289[4];
            v1289 = *(uint64_t **)v2041;
            v1290 = v1290 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2041 + 8);
          }
          else
          {
            v2269 = v1285[104];
            if (v2269)
              v2270 = *(_WORD *)(v2269 + 8);
            else
              v2270 = 0;
            v1289 = sub_1C5D52060((uint64_t)v1285, 222, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v1289, v1290, v2270);
            v1290 = v1290 & 0xFFFFFFFF00000000 | v2483;
          }
        }
        if (*(_WORD *)(v1292 + 24) == 222)
        {
          v2484 = *(_QWORD *)(v1292 + 32);
          v2485 = *(uint64_t **)v2484;
          v2486 = v1291 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2484 + 8);
        }
        else
        {
          v3541 = v1289;
          v2487 = *(_QWORD *)(v370 + 16);
          v2488 = *(_QWORD *)(v2487 + 832);
          if (v2488)
            v2489 = *(_WORD *)(v2488 + 8);
          else
            v2489 = 0;
          v2485 = sub_1C5D52060(v2487, 222, (const llvm::APInt *)&v3588, v85, v84, v1292, v1291, v2489);
          v2486 = v1291 & 0xFFFFFFFF00000000 | v2490;
          v1289 = v3541;
        }
        v2304 = sub_1C5D58E08(*(_QWORD *)(v370 + 16), (const char *)0x8D, (const llvm::APInt *)&v3588, v85, v84, v1288, v3556, a8, (uint64_t)v1289, v1290, (uint64_t)v2485, v2486, SHIDWORD(v2486), v1284);
        v2306 = v2491;
        *(_QWORD *)&v3590 = v2304;
        *((_QWORD *)&v3590 + 1) = v2491;
        v2492 = *(_QWORD *)(v373 + 48);
        if (v2492)
        {
          v2308 = 1;
          do
          {
            if (*(_DWORD *)(v2492 + 8) == (_DWORD)v374)
            {
              if (!v2308)
                goto LABEL_2583;
              --v2308;
            }
            v2492 = *(_QWORD *)(v2492 + 32);
          }
          while (v2492);
LABEL_2582:
          if (!v2308)
            goto LABEL_2117;
        }
        break;
      case 98:
        v1278 = *(uint64_t **)(v373 + 32);
        v1279 = *v1278;
        v1280 = v1278[1];
        v1281 = (uint64_t *)v1278[5];
        v1282 = v1278[6];
        if (*(_WORD *)(*v1278 + 24) == 222)
        {
          v1283 = *(_QWORD *)(v1279 + 32);
          v1279 = *(_QWORD *)v1283;
          v1280 = v1280 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1283 + 8);
        }
        else if (*((_WORD *)v1281 + 12) == 222)
        {
          v1672 = v1281[4];
          v1281 = *(uint64_t **)v1672;
          v1282 = v1282 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1672 + 8);
        }
        else
        {
          v2038 = *(_QWORD *)(v370 + 16);
          v2039 = *(_QWORD *)(v2038 + 832);
          if (v2039)
            v2040 = *(_WORD *)(v2039 + 8);
          else
            v2040 = 0;
          v1281 = sub_1C5D52060(v2038, 222, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v1281, v1282, v2040);
          v1282 = v1282 & 0xFFFFFFFF00000000 | v2303;
        }
        v2304 = sub_1C5D56C70(*(_QWORD *)(v370 + 16), 98, (const llvm::APInt *)&v3588, v85, v84, v1279, v1280, a8, (uint64_t)v1281, v1282, *(_WORD *)(v373 + 72));
        v2306 = v2305;
        *(_QWORD *)&v3590 = v2304;
        *((_QWORD *)&v3590 + 1) = v2305;
        v2307 = *(_QWORD *)(v373 + 48);
        if (!v2307)
          break;
        v2308 = 1;
        do
        {
          if (*(_DWORD *)(v2307 + 8) == (_DWORD)v374)
          {
            if (!v2308)
              goto LABEL_2583;
            --v2308;
          }
          v2307 = *(_QWORD *)(v2307 + 32);
        }
        while (v2307);
        goto LABEL_2582;
      case 96:
        v748 = *(_WORD *)(v373 + 72);
        v749 = *(_QWORD **)(v370 + 16);
        if (!(v748 & 0x40 | *(_WORD *)(*v749 + 1020) & 1))
          goto LABEL_2116;
        v750 = *(uint64_t **)(v373 + 32);
        v751 = *v750;
        v752 = v750[1];
        v754 = v750[5];
        v753 = v750[6];
        if (*(_WORD *)(*v750 + 24) == 222)
        {
          v755 = *(_QWORD *)(v751 + 32);
          v756 = *(uint64_t **)v755;
          v757 = v752 & 0xFFFFFFFF00000000 | *(unsigned int *)(v755 + 8);
        }
        else
        {
          v2042 = v749[104];
          if (v2042)
            v2043 = *(_WORD *)(v2042 + 8);
          else
            v2043 = 0;
          v756 = sub_1C5D52060((uint64_t)v749, 222, (const llvm::APInt *)&v3588, v85, v84, v751, v752, v2043);
          v757 = v752 & 0xFFFFFFFF00000000 | v2309;
        }
        if (*(_WORD *)(v754 + 24) == 222)
        {
          v2310 = *(_QWORD *)(v754 + 32);
          v2311 = *(uint64_t **)v2310;
          v2312 = v753 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2310 + 8);
        }
        else
        {
          v2313 = *(_QWORD *)(v370 + 16);
          v2314 = *(_QWORD *)(v2313 + 832);
          if (v2314)
            v2315 = *(_WORD *)(v2314 + 8);
          else
            v2315 = 0;
          v2311 = sub_1C5D52060(v2313, 222, (const llvm::APInt *)&v3588, v85, v84, v754, v753, v2315);
          v2312 = v753 & 0xFFFFFFFF00000000 | v2316;
        }
        v2304 = sub_1C5D56C70(*(_QWORD *)(v370 + 16), 96, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v756, v757, a8, (uint64_t)v2311, v2312, v748);
        v2306 = v2317;
        *(_QWORD *)&v3590 = v2304;
        *((_QWORD *)&v3590 + 1) = v2317;
        v2318 = *(_QWORD *)(v373 + 48);
        if (v2318)
        {
          v2308 = 1;
          do
          {
            if (*(_DWORD *)(v2318 + 8) == (_DWORD)v374)
            {
              if (!v2308)
                goto LABEL_2583;
              --v2308;
            }
            v2318 = *(_QWORD *)(v2318 + 32);
          }
          while (v2318);
          goto LABEL_2582;
        }
        break;
      default:
        goto LABEL_2116;
    }
LABEL_2583:
    v2493 = *(_QWORD *)(v370 + 16);
    v2494 = *(_QWORD *)(v2493 + 832);
    if (v2494)
      v2495 = *(_WORD *)(v2494 + 8);
    else
      v2495 = 0;
    v2496 = sub_1C5D52060(*(_QWORD *)(v370 + 16), 222, (const llvm::APInt *)&v3588, v85, v84, (uint64_t)v2304, v2306, v2495);
    sub_1C636EE88(v2493, v373, v374, (uint64_t)v2496, v2497);
    goto LABEL_2117;
  }
  v3552 = a3;
  switch(*(_WORD *)(v9 + 24))
  {
    case 0xAB:
      v1045 = *(_QWORD *)(v9 + 40);
      v85 = *(llvm **)v1045;
      v84 = *(_QWORD *)(v1045 + 8);
      v3593[0] = 0;
      LODWORD(v3593[1]) = 0;
      if (sub_1C6141628((uint64_t)v3593, v9, v3552))
        goto LABEL_1600;
      if (v85 != 5)
        goto LABEL_2461;
      v1047 = *(uint64_t **)(v9 + 32);
      v1048 = v1047[5];
      v1049 = *(unsigned __int16 *)(v1048 + 24);
      if (v1049 != 35 && v1049 != 11)
        goto LABEL_2461;
      v1051 = *(_QWORD *)(v1048 + 80);
      v1052 = (_QWORD *)(v1051 + 24);
      if (*(_DWORD *)(v1051 + 32) >= 0x41u)
        v1052 = (_QWORD *)*v1052;
      if (*v1052 != 0xFFFFLL)
        goto LABEL_2461;
      v1053 = *v1047;
      v1054 = v1047[1];
      v1055 = *(unsigned __int16 *)(*v1047 + 24);
      if ((v1055 - 56) >= 3 && v1055 != 175)
        goto LABEL_2457;
      if (sub_1C48081E0(v1053, v1054, v1046))
      {
        v1056 = *(_QWORD *)(v3552 + 16);
        v1057 = *(uint64_t **)(v1053 + 32);
        v1058 = *v1057;
        v1059 = v1057[1];
        v1060 = *(_QWORD *)(v1056 + 832);
        if (v1060)
          v1061 = *(_WORD *)(v1060 + 8);
        else
          v1061 = 0;
        v2540 = sub_1C5D52060(v1056, 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, v1058, v1059, v1061);
        v2542 = v2541;
        v2543 = *(_QWORD *)(v3552 + 16);
        v2544 = *(_QWORD *)(v1053 + 32);
        v2545 = *(_QWORD *)(v2544 + 40);
        v2546 = *(_QWORD *)(v2544 + 48);
        v2547 = *(_QWORD *)(v2543 + 832);
        if (v2547)
          v2548 = *(_WORD *)(v2547 + 8);
        else
          v2548 = 0;
        v2549 = sub_1C5D52060(v2543, 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, v2545, v2546, v2548);
        v2551 = v2550;
        sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2540);
        sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2549);
        v2553 = *(_QWORD *)(v3552 + 16);
        v2554 = *(_QWORD *)(v2553 + 832);
        if (v2554)
          LOWORD(v2554) = *(_WORD *)(v2554 + 8);
        v2555 = sub_1C5D56C70(v2553, *(unsigned __int16 *)(v1053 + 24), (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v2540, v2542, v2552, (uint64_t)v2549, v2551, v2554);
        goto LABEL_2864;
      }
      v1055 = *(unsigned __int16 *)(v1053 + 24);
LABEL_2457:
      if (v1055 == 396 && sub_1C48081E0(v1053, v1054, v1046))
      {
        v2319 = *(_QWORD *)(v3552 + 16);
        v2320 = *(uint64_t **)(v1053 + 32);
        v2321 = *v2320;
        v2322 = v2320[1];
        v2323 = *(_QWORD *)(v2319 + 832);
        if (v2323)
          v2324 = *(_WORD *)(v2323 + 8);
        else
          v2324 = 0;
        v2555 = sub_1C5D52060(v2319, 396, (const llvm::APInt *)&v3588, (llvm *)4, 0, v2321, v2322, v2324);
LABEL_2864:
        v32 = (uint64_t)v2555;
        v34 = v2556;
        v33 = *(_QWORD **)(v3552 + 16);
        v3037 = v33[104];
        if (v3037)
          v36 = *(_WORD *)(v3037 + 8);
        else
          v36 = 0;
        v896 = 199;
        goto LABEL_1575;
      }
LABEL_2461:
      if (**(_BYTE **)(v9 + 40) != 5)
        goto LABEL_2116;
      v2325 = *(_QWORD **)(v9 + 32);
      v2326 = v2325[5];
      v2327 = *(unsigned __int16 *)(v2326 + 24);
      if (v2327 != 35 && v2327 != 11)
        goto LABEL_2116;
      v2329 = *v2325;
      if (*(_WORD *)(*v2325 + 24) != 395)
        goto LABEL_2116;
      v2330 = *(_QWORD *)(v2326 + 80);
      if (*(_DWORD *)(v2330 + 32) > 0x40u)
        v2331 = **(_QWORD **)(v2330 + 24);
      else
        v2331 = *(_QWORD *)(v2330 + 24);
      if (v2331 == 0xFFFF)
      {
        v2332 = *(_QWORD *)(v3552 + 16);
        v2333 = *(void **)(v2329 + 64);
        v3608[0] = v2333;
        v2334 = v2329;
        if (v2333)
        {
          llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v2333, 2);
          v2334 = **(_QWORD **)(v9 + 32);
        }
        LODWORD(v3608[1]) = *(_DWORD *)(v2329 + 60);
        v2335 = *(uint64_t **)(v2334 + 32);
        v2336 = *v2335;
        v2337 = v2335[1];
        v2338 = *(_QWORD *)(v2332 + 832);
        if (v2338)
          v2339 = *(_WORD *)(v2338 + 8);
        else
          v2339 = 0;
        v2534 = sub_1C5D52060(v2332, 395, (const llvm::APInt *)v3608, (llvm *)4, 0, v2336, v2337, v2339);
        v2536 = v2535;
        if (v3608[0])
          llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
        v2537 = *(_QWORD *)(v3552 + 16);
        v2538 = *(void **)(v9 + 64);
        v3608[0] = v2538;
        if (v2538)
          llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v2538, 2);
        LODWORD(v3608[1]) = *(_DWORD *)(v9 + 60);
        v2539 = *(_QWORD *)(v2537 + 832);
        if (v2539)
          v1887 = *(_WORD *)(v2539 + 8);
        else
          v1887 = 0;
        v1880 = v2537;
        v1881 = 199;
        v1873 = 5;
        v1879 = 0;
        v1882 = (uint64_t)v2534;
        v1883 = v2536;
      }
      else
      {
        if (v2331 > 0xFFFE)
          goto LABEL_2116;
        v2340 = *(_QWORD *)(v3552 + 16);
        v2341 = *(void **)(v2329 + 64);
        v3608[0] = v2341;
        v2342 = v2329;
        if (v2341)
        {
          llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v2341, 2);
          v2342 = **(_QWORD **)(v9 + 32);
        }
        LODWORD(v3608[1]) = *(_DWORD *)(v2329 + 60);
        v2343 = *(uint64_t **)(v2342 + 32);
        v2344 = *v2343;
        v2345 = v2343[1];
        v2346 = *(_QWORD *)(v2340 + 832);
        if (v2346)
          v2347 = *(_WORD *)(v2346 + 8);
        else
          v2347 = 0;
        v3257 = sub_1C5D52060(v2340, 395, (const llvm::APInt *)v3608, (llvm *)4, 0, v2344, v2345, v2347);
        v3259 = v3258;
        if (v3608[0])
          llvm::MetadataTracking::untrack((uint64_t)v3608, (unsigned __int8 *)v3608[0]);
        v3260 = *(_QWORD *)(v3552 + 16);
        v3261 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 80);
        v3262 = (uint64_t *)(v3261 + 24);
        if (*(_DWORD *)(v3261 + 32) >= 0x41u)
          v3262 = (uint64_t *)*v3262;
        v3263 = sub_1C6366AB4(*(_QWORD *)(v3552 + 16), *v3262, (const llvm::APInt *)&v3588, (llvm *)4, 0, 0, 0);
        v3266 = *(_QWORD *)(v3260 + 832);
        if (v3266)
          LOWORD(v3266) = *(_WORD *)(v3266 + 8);
        v3267 = sub_1C5D56C70(v3260, 171, (const llvm::APInt *)&v3588, (llvm *)4, 0, (uint64_t)v3257, v3259, v3265, (uint64_t)v3263, v3264, v3266);
        v3269 = v3259 & 0xFFFFFFFF00000000 | v3268;
        v3270 = *(_QWORD *)(v3552 + 16);
        v3271 = *(void **)(v9 + 64);
        v3608[0] = v3271;
        if (v3271)
          llvm::MetadataTracking::track((uint64_t)v3608, (unsigned __int8 *)v3271, 2);
        LODWORD(v3608[1]) = *(_DWORD *)(v9 + 60);
        v3272 = *(_QWORD *)(v3270 + 832);
        if (v3272)
          v1887 = *(_WORD *)(v3272 + 8);
        else
          v1887 = 0;
        v1880 = v3270;
        v1881 = 199;
        v1873 = 5;
        v1879 = 0;
        v1882 = (uint64_t)v3267;
        v1883 = v3269;
      }
      goto LABEL_1945;
    case 0xAC:
      *(_QWORD *)&v3623 = 0;
      DWORD2(v3623) = 0;
      if (sub_1C6141628((uint64_t)&v3623, v9, a3))
      {
        v726 = v3623;
        goto LABEL_1601;
      }
      v2234 = *(_QWORD *)(v9 + 40);
      v2236 = *(llvm **)v2234;
      v2235 = *(_QWORD *)(v2234 + 8);
      if (sub_1C6368DC4(*(_QWORD *)(v3552 + 16), v9)
        && sub_1C6368DC4(*(_QWORD *)(v3552 + 16), **(_QWORD **)(v9 + 32)))
      {
        v3038 = *(_QWORD **)(v9 + 32);
        v3039 = *(_QWORD *)(v3038[5] + 80);
        v3040 = (_QWORD *)(v3039 + 24);
        if (*(_DWORD *)(v3039 + 32) >= 0x41u)
          v3040 = (_QWORD *)*v3040;
        v3041 = (_QWORD *)*v3040;
        v3042 = *(uint64_t ***)(*v3038 + 32);
        v3043 = v3042[5][10];
        v3044 = (_QWORD *)(v3043 + 24);
        if (*(_DWORD *)(v3043 + 32) >= 0x41u)
          v3044 = (_QWORD *)*v3044;
        v3045 = *(_QWORD *)(v3552 + 16);
        v3046 = *v3042;
        v800 = (unint64_t)v3042[1];
        v3047 = sub_1C6366AB4(v3045, (uint64_t)v3041 + *v3044, (const llvm::APInt *)&v3588, v2236, v2235, 0, 0);
        v3049 = *(_QWORD *)(v3045 + 832);
        if (v3049)
          LOWORD(v3049) = *(_WORD *)(v3049 + 8);
        v3434 = v3048;
        v3436 = v3049;
        v3433 = (uint64_t)v3047;
        v326 = v3045;
        v333 = 56;
        v334 = (uint64_t)v2236;
        v811 = v2235;
        v328 = v3046;
        goto LABEL_907;
      }
      if (v2236 - 7 <= 0xFFFFFFFD)
        goto LABEL_2116;
      v2237 = 0;
      v2238 = *(uint64_t **)(v9 + 32);
      v3504 = *v2238;
      v3519 = v2238[1];
      v2239 = v2238[5];
      v3538 = v2238[6];
      if (v2236 == 6)
        v2240 = 5;
      else
        v2240 = 4;
      LOBYTE(v3625) = v2240;
      v3626 = 0;
      do
      {
        v2241 = &v3593[v2237];
        *((_DWORD *)v2241 + 2) = 1;
        *v2241 = 0;
        *((_DWORD *)v2241 + 6) = 1;
        v2241[2] = 0;
        v2237 += 4;
      }
      while (v2237 != 8);
      v2242 = 38;
      if (v2236 == 6)
        v2242 = 49;
      v3490 = (llvm *)v2242;
      sub_1C6368768(*(_QWORD *)(v3552 + 16), v3504, v3519, 0, (uint64_t)v3608);
      if (LODWORD(v3593[1]) >= 0x41 && v3593[0])
        MEMORY[0x1CAA32F9C](v3593[0], 0x1000C8000313F17);
      v2243 = (uint64_t)v3608[0];
      v3593[0] = v3608[0];
      v2244 = v3608[1];
      LODWORD(v3593[1]) = v3608[1];
      LODWORD(v3608[1]) = 0;
      if (v3595 >= 0x41 && v3594)
      {
        MEMORY[0x1CAA32F9C](v3594, 0x1000C8000313F17);
        v3594 = v3609;
        LODWORD(v3595) = v3610;
        v3610 = 0;
        if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
          MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
      }
      else
      {
        v3594 = v3609;
        LODWORD(v3595) = v3610;
      }
      sub_1C6368768(*(_QWORD *)(v3552 + 16), v2239, v3538, 0, (uint64_t)v3608);
      if (v3597 >= 0x41 && v3596)
        MEMORY[0x1CAA32F9C](v3596, 0x1000C8000313F17);
      v2245 = v3608[0];
      v3596 = (uint64_t *)v3608[0];
      v2246 = v3608[1];
      LODWORD(v3597) = v3608[1];
      LODWORD(v3608[1]) = 0;
      if (v3599 >= 0x41 && v3598)
      {
        MEMORY[0x1CAA32F9C](v3598, 0x1000C8000313F17);
        v3598 = (const char *)v3609;
        LODWORD(v3599) = v3610;
        v3610 = 0;
        if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
          MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
      }
      else
      {
        v3598 = (const char *)v3609;
        LODWORD(v3599) = v3610;
      }
      v2247 = *(unsigned __int16 *)(v2239 + 24);
      if (v2247 != 35 && v2247 != 11)
      {
        if ((_BYTE)v3625)
          v3255 = sub_1C47A8C74((unsigned __int8 *)&v3625);
        else
          v3255 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
        v3327 = v3255;
        if ((_DWORD)v3256 == 1)
        LODWORD(v3608[1]) = v2244;
        v3328 = v2243;
        v3329 = v2244;
        if (v2244 >= 0x41
          && (v3328 = operator new[](),
              v3608[0] = (void *)v3328,
              v3329 = v3608[1],
              memcpy((void *)v3328, (const void *)v2243, (((unint64_t)LODWORD(v3608[1]) + 63) >> 3) & 0x3FFFFFF8),
              v3329 > 0x40))
        {
          llvm::APInt::ashrSlowCase((unsigned int *)v3608, v3327);
          v3329 = v3608[1];
          if (!LODWORD(v3608[1]))
            goto LABEL_3069;
        }
        else
        {
          v3330 = v3327;
          if (v3329 == v3327)
            v3330 = 63;
          v3331 = v3328 << -(char)v3329 >> -(char)v3329 >> v3330;
          if (v3329)
            v3332 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3329;
          else
            v3332 = 0;
          v3608[0] = (void *)(v3332 & v3331);
          if (!v3329)
            goto LABEL_3069;
        }
        if (v3329 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v3608) != v3329)
            goto LABEL_3077;
        }
        else if (v3608[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v3329))
        {
          goto LABEL_3103;
        }
LABEL_3069:
        if (*(_WORD *)(v2239 + 24) == 175)
        {
          v3344 = *(_QWORD *)(*(_QWORD *)(v2239 + 32) + 40);
          v3345 = *(unsigned __int16 *)(v3344 + 24);
          if (v3345 == 35 || v3345 == 11)
          {
            v3346 = *(_QWORD *)(v3344 + 80);
            v3347 = (_QWORD *)(v3346 + 24);
            if (*(_DWORD *)(v3346 + 32) >= 0x41u)
              v3347 = (_QWORD *)*v3347;
            v3348 = (_QWORD *)*v3347;
            if ((_BYTE)v3625)
              v3349 = sub_1C47A8C74((unsigned __int8 *)&v3625);
            else
              v3349 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
            v3369 = v3349;
            if ((_DWORD)v3350 == 1)
            if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
              MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
            if (v3348 == (_QWORD *)v3369)
            {
              v3370 = v2239;
              v2239 = v3504;
              goto LABEL_3104;
            }
LABEL_3103:
            v3519 = v3519 & 0xFFFFFFFF00000000 | v3538;
            v3538 &= 0xFFFFFFFF00000000;
            v3593[0] = v2245;
            v3596 = (uint64_t *)v2243;
            LODWORD(v3597) = v2244;
            v2243 = (uint64_t)v2245;
            v2244 = v2246;
            v3370 = v3504;
            LODWORD(v3593[1]) = v2246;
LABEL_3104:
            if ((_BYTE)v3625)
              v3371 = sub_1C47A8C74((unsigned __int8 *)&v3625);
            else
              v3371 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
            v3373 = v3371;
            if ((_DWORD)v3372 == 1)
            LODWORD(v3608[1]) = v2244;
            if (v2244 >= 0x41
              && (v3374 = (void *)operator new[](),
                  v3608[0] = v3374,
                  v3375 = v3608[1],
                  memcpy(v3374, (const void *)v2243, (((unint64_t)LODWORD(v3608[1]) + 63) >> 3) & 0x3FFFFFF8),
                  v2243 = (uint64_t)v3374,
                  v2244 = v3375,
                  v3375 > 0x40))
            {
              llvm::APInt::ashrSlowCase((unsigned int *)v3608, v3373);
              v2244 = v3608[1];
              if (LODWORD(v3608[1]))
                goto LABEL_3116;
            }
            else
            {
              v3376 = v3373;
              if (v2244 == v3373)
                v3376 = 63;
              v3377 = v2243 << -(char)v2244 >> -(char)v2244 >> v3376;
              if (v2244)
                v3378 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2244;
              else
                v3378 = 0;
              v3608[0] = (void *)(v3378 & v3377);
              if (v2244)
              {
LABEL_3116:
                if (v2244 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v3608) != v2244)
                    goto LABEL_3128;
                }
                else if (v3608[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2244))
                {
                  goto LABEL_3139;
                }
              }
            }
            if (*(_WORD *)(v3370 + 24) == 175)
            {
              v3379 = *(_QWORD *)(*(_QWORD *)(v3370 + 32) + 40);
              v3380 = *(unsigned __int16 *)(v3379 + 24);
              if (v3380 == 35 || v3380 == 11)
              {
                v3381 = *(_QWORD *)(v3379 + 80);
                v3382 = (_QWORD *)(v3381 + 24);
                if (*(_DWORD *)(v3381 + 32) >= 0x41u)
                  v3382 = (_QWORD *)*v3382;
                v3383 = (_QWORD *)*v3382;
                if ((_BYTE)v3625)
                  v3384 = sub_1C47A8C74((unsigned __int8 *)&v3625);
                else
                  v3384 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
                v3386 = v3384;
                if ((_DWORD)v3385 == 1)
                if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
                  MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
                if (v3383 != (_QWORD *)v3386)
                  goto LABEL_3139;
                v3387 = *(_QWORD *)(v3552 + 16);
                v3388 = *(_QWORD *)(v3387 + 832);
                if (v3388)
                  v3389 = *(_WORD *)(v3388 + 8);
                else
                  v3389 = 0;
                v3395 = sub_1C5D52060(v3387, 201, (const llvm::APInt *)&v3588, (llvm *)v3625, v3626, v2239, v3519, v3389);
                v3397 = v3519 & 0xFFFFFFFF00000000 | v3396;
                v3398 = *(_QWORD *)(v3552 + 16);
                v3399 = *(uint64_t **)(v3370 + 32);
                v3400 = *v3399;
                v3401 = v3399[1];
                v3402 = *(_QWORD *)(v3398 + 832);
                if (v3402)
                  v3403 = *(_WORD *)(v3402 + 8);
                else
                  v3403 = 0;
                v3404 = sub_1C5D52060(v3398, 201, (const llvm::APInt *)&v3588, (llvm *)v3625, v3626, v3400, v3401, v3403);
                goto LABEL_3163;
              }
            }
            if (v2244 < 0x41)
            {
LABEL_3139:
              v3390 = 1;
              goto LABEL_3140;
            }
            goto LABEL_3128;
          }
        }
        if (v3329 < 0x41)
          goto LABEL_3103;
LABEL_3077:
        if (v3608[0])
          MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
        goto LABEL_3103;
      }
      v2248 = *(_QWORD *)(v2239 + 80);
      v2249 = (unint64_t *)(v2248 + 24);
      if (*(_DWORD *)(v2248 + 32) >= 0x41u)
        v2249 = (unint64_t *)*v2249;
      v2250 = *v2249;
      if ((_BYTE)v3625)
        v2251 = sub_1C47A8C74((unsigned __int8 *)&v3625);
      else
        v2251 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
      v3280 = v2251;
      if ((_DWORD)v2252 == 1)
      LODWORD(v3608[1]) = v2244;
      if (v2244 >= 0x41
        && (v3281 = (void *)operator new[](),
            v3608[0] = v3281,
            v3282 = v3608[1],
            memcpy(v3281, (const void *)v2243, (((unint64_t)LODWORD(v3608[1]) + 63) >> 3) & 0x3FFFFFF8),
            v2243 = (uint64_t)v3281,
            v2244 = v3282,
            v3282 > 0x40))
      {
        llvm::APInt::ashrSlowCase((unsigned int *)v3608, v3280);
        v2244 = v3608[1];
        if (!LODWORD(v3608[1]))
          goto LABEL_3008;
      }
      else
      {
        v3283 = v3280;
        if (v2244 == v3280)
          v3283 = 63;
        v3284 = v2243 << -(char)v2244 >> -(char)v2244 >> v3283;
        if (v2244)
          v3285 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2244;
        else
          v3285 = 0;
        v3608[0] = (void *)(v3285 & v3284);
        if (!v2244)
          goto LABEL_3008;
      }
      if (v2244 <= 0x40)
      {
        if (v3608[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2244))
          goto LABEL_3139;
        goto LABEL_3008;
      }
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v3608) != v2244)
      {
LABEL_3128:
        if (v3608[0])
          MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
        goto LABEL_3139;
      }
LABEL_3008:
      if ((_BYTE)v3625)
        v3289 = sub_1C47A8C74((unsigned __int8 *)&v3625);
      else
        v3289 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
      v3291 = v3289;
      if ((_DWORD)v3290 == 1)
      if ((_BYTE)v3625)
        v3292 = sub_1C47A8C74((unsigned __int8 *)&v3625);
      else
        v3292 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
      v3294 = v3292;
      v3295 = v2250 >> v3291;
      if ((_DWORD)v3293 == 1)
      v3296 = v3295 << v3294;
      if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
        MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
      if (v3296 != v2250)
        goto LABEL_3139;
      v3297 = *(_QWORD *)(v3552 + 16);
      v3298 = *(_QWORD *)(v3297 + 832);
      if (v3298)
        v3299 = *(_WORD *)(v3298 + 8);
      else
        v3299 = 0;
      v3395 = sub_1C5D52060(v3297, 201, (const llvm::APInt *)&v3588, (llvm *)v3625, v3626, v3504, v3519, v3299);
      v3397 = v3519 & 0xFFFFFFFF00000000 | v3407;
      v3408 = *(_QWORD *)(v3552 + 16);
      if ((_BYTE)v3625)
        v3409 = sub_1C47A8C74((unsigned __int8 *)&v3625);
      else
        v3409 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3625);
      v3411 = v3409;
      if ((_DWORD)v3410 == 1)
      v3404 = sub_1C6366AB4(v3408, v2250 >> v3411, (const llvm::APInt *)&v3588, (llvm *)v3625, v3626, 0, 0);
LABEL_3163:
      v3551 = v3538 & 0xFFFFFFFF00000000 | v3405;
      v3412 = *(_QWORD *)(v3552 + 16);
      v3413 = *(_QWORD *)(v3412 + 832);
      if (v3413)
        LOWORD(v3413) = *(_WORD *)(v3413 + 8);
      v3415 = sub_1C5D56C70(v3412, 146, (const llvm::APInt *)&v3588, v3490, 0, (uint64_t)v3395, v3397, v3406, (uint64_t)v3404, v3551, v3413);
      v3416 = *(_QWORD *)(v3552 + 16);
      v3417 = *(_QWORD *)(v3416 + 832);
      if (v3417)
        v3418 = *(_WORD *)(v3417 + 8);
      else
        v3418 = 0;
      v3390 = 0;
      *(_QWORD *)&v3590 = sub_1C5D52060(v3416, 216, (const llvm::APInt *)&v3588, v2236, v2235, (uint64_t)v3415, v3414, v3418);
      *((_QWORD *)&v3590 + 1) = v3419;
LABEL_3140:
      for (j = 0; j != -8; j -= 4)
      {
        v3392 = &v3593[j];
        if (*(_DWORD *)((char *)&v3599 + j * 8) >= 0x41u)
        {
          v3393 = v3392[6];
          if (v3393)
            MEMORY[0x1CAA32F9C](v3393, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v3392 + 10) >= 0x41u)
        {
          v3394 = v3392[4];
          if (v3394)
            MEMORY[0x1CAA32F9C](v3394, 0x1000C8000313F17);
        }
      }
      if ((v3390 & 1) != 0)
        goto LABEL_2116;
LABEL_2117:
      if (v3588)
        llvm::MetadataTracking::untrack((uint64_t)&v3588, (unsigned __int8 *)v3588);
      return v3590;
    case 0xAD:
      *(_QWORD *)&v3590 = 0;
      DWORD2(v3590) = 0;
      v296 = *(uint64_t **)(v9 + 32);
      v297 = *(_QWORD *)(v9 + 40);
      v298 = *v296;
      v299 = *((_DWORD *)v296 + 2);
      v300 = v296[5];
      v301 = v296[6];
      v302 = *(llvm **)v297;
      v303 = *(_QWORD *)(v297 + 8);
      v304 = *(void **)(v9 + 64);
      v3593[0] = v304;
      if (v304)
      {
        llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v304, 2);
        v12 = *(_DWORD *)(v9 + 60);
        v305 = *(unsigned __int16 *)(v9 + 24);
      }
      else
      {
        v305 = 173;
      }
      LODWORD(v3593[1]) = v12;
      v652 = *(unsigned __int16 *)(v300 + 24);
      if (v652 != 35 && v652 != 11)
        goto LABEL_2003;
      if (*(_WORD *)(v298 + 24) != 192)
        goto LABEL_2003;
      v654 = *(_QWORD *)(v298 + 48);
      if (!v654)
        goto LABEL_2003;
      v655 = 1;
      do
      {
        if (*(_DWORD *)(v654 + 8) == v299)
        {
          if (!v655)
            goto LABEL_2003;
          --v655;
        }
        v654 = *(_QWORD *)(v654 + 32);
      }
      while (v654);
      if (v655)
        goto LABEL_2003;
      v656 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 80);
      v657 = (_QWORD *)(v656 + 24);
      if (*(_DWORD *)(v656 + 32) >= 0x41u)
        v657 = (_QWORD *)*v657;
      if (*v657 != 1)
        goto LABEL_2003;
      v658 = *(_QWORD **)(v298 + 32);
      v659 = v658[10];
      v660 = v658[11];
      v661 = v658[15];
      v662 = v658[16];
      v663 = *(unsigned __int16 *)(v659 + 24);
      if (v663 == 35 || v663 == 11)
      {
        v665 = *(unsigned __int16 *)(v661 + 24);
      }
      else
      {
        v665 = *(unsigned __int16 *)(v661 + 24);
        if (v665 != 35 && v665 != 11)
          goto LABEL_2003;
        v1927 = *(_QWORD *)(v659 + 48);
        if (!v1927)
          goto LABEL_2003;
        v1928 = 1;
        do
        {
          if (*(_DWORD *)(v1927 + 8) == (_DWORD)v660)
          {
            if (!v1928)
              goto LABEL_2003;
            --v1928;
          }
          v1927 = *(_QWORD *)(v1927 + 32);
        }
        while (v1927);
        if (v1928)
          goto LABEL_2003;
      }
      if (v665 == 11 || v665 == 35)
        goto LABEL_707;
      v666 = *(_QWORD *)(v661 + 48);
      if (v666)
      {
        v667 = 1;
        do
        {
          if (*(_DWORD *)(v666 + 8) == (_DWORD)v662)
          {
            if (!v667)
              goto LABEL_2003;
            --v667;
          }
          v666 = *(_QWORD *)(v666 + 32);
        }
        while (v666);
        if (!v667)
        {
LABEL_707:
          v668 = *(_QWORD *)(v3552 + 16);
          v669 = *(_QWORD *)(v668 + 832);
          if (v669)
            LOWORD(v669) = *(_WORD *)(v669 + 8);
          v671 = sub_1C5D56C70(v668, v305, (const llvm::APInt *)v3593, v302, v303, v659, v660, a8, v300, v301, v669);
          v673 = v672;
          v674 = *(_QWORD *)(v3552 + 16);
          v675 = *(_QWORD *)(v674 + 832);
          if (v675)
            LOWORD(v675) = *(_WORD *)(v675 + 8);
          v676 = sub_1C5D56C70(v674, v305, (const llvm::APInt *)v3593, v302, v303, v661, v662, v670, v300, v301, v675);
          v677 = *(uint64_t **)(v298 + 32);
          *(_QWORD *)&v3590 = sub_1C63698B8(*(_QWORD *)(v3552 + 16), (const char *)0xC0, (const llvm::APInt *)v3593, v302, v303, *v677, v677[1], v679, v677[5], v677[6], (uint64_t)v671, v673, (uint64_t)v676, v678, v677[20], v677[21]);
          DWORD2(v3590) = v680;
          v681 = 1;
LABEL_2004:
          if (v3593[0])
            llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
          if ((v681 & 1) == 0)
            goto LABEL_2116;
          goto LABEL_2117;
        }
      }
LABEL_2003:
      v681 = 0;
      goto LABEL_2004;
    case 0xAF:
      v307 = *(uint64_t **)(v9 + 32);
      v306 = *(_QWORD *)(v9 + 40);
      v309 = *(llvm **)v306;
      v308 = *(_QWORD *)(v306 + 8);
      v310 = *v307;
      v311 = *((_DWORD *)v307 + 2);
      v312 = v307[5];
      v313 = v307[6];
      v314 = *(unsigned __int16 *)(v312 + 24);
      if (v314 == 35 || v314 == 11)
        v316 = v307[5];
      else
        v316 = 0;
      if (v309 == 4)
      {
        if (!v316)
          goto LABEL_2116;
        goto LABEL_739;
      }
      if (v309 == 6)
      {
        if (v316 && *(_DWORD *)(v3552 + 8))
        {
          v317 = *(_QWORD *)(v316 + 80);
          v318 = (_QWORD *)(v317 + 24);
          if (*(_DWORD *)(v317 + 32) >= 0x41u)
            v318 = (_QWORD *)*v318;
          if (*v318 >= 0x20uLL)
          {
            v38 = (uint64_t)sub_1C4900F00(v9, 0, *(_QWORD **)(v3552 + 16));
            goto LABEL_20;
          }
        }
        goto LABEL_2116;
      }
      if (v309 == 5 && v316 != 0)
      {
LABEL_739:
        v700 = *(_QWORD *)(v310 + 48);
        if (!v700)
          goto LABEL_2116;
        v701 = 1;
        do
        {
          if (*(_DWORD *)(v700 + 8) == v311)
          {
            if (!v701)
              goto LABEL_2116;
            --v701;
          }
          v700 = *(_QWORD *)(v700 + 32);
        }
        while (v700);
        if (v701 || *(_WORD *)(v310 + 24) != 56)
          goto LABEL_2116;
        v702 = *(unint64_t **)(v310 + 32);
        v703 = *v702;
        if (*(_WORD *)(*v702 + 24) == 58)
        {
          v704 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v703 + 32) + 40) + 24);
          if (v704 != 35 && v704 != 11)
            goto LABEL_2116;
        }
        v706 = v702[5];
        if (*(_WORD *)(v706 + 24) == 58)
        {
          v707 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v706 + 32) + 40) + 24);
          if (v707 != 35 && v707 != 11)
            goto LABEL_2116;
        }
        v709 = *(_QWORD *)(v9 + 48);
        if (!v709)
          goto LABEL_2116;
        while (1)
        {
          v710 = *(_QWORD *)(v709 + 16);
          if ((*(_WORD *)(v710 + 24) & 0xFFFE) != 0x38)
            break;
          v711 = 0;
          v712 = 0;
          v713 = 0;
          v714 = *(_QWORD *)(v710 + 32);
          v715 = 1;
          do
          {
            v716 = v715;
            v717 = *(_QWORD *)(v714 + 40 * v711);
            v718 = *(unsigned __int16 *)(v717 + 24);
            if (v718 == 175)
            {
              v721 = *(_QWORD *)(*(_QWORD *)(v717 + 32) + 40);
              v722 = *(unsigned __int16 *)(v721 + 24);
              if (v722 == 35 || v722 == 11)
              {
                v724 = *(_QWORD *)(v721 + 80);
                v725 = (_QWORD *)(v724 + 24);
                if (*(_DWORD *)(v724 + 32) >= 0x41u)
                  v725 = (_QWORD *)*v725;
                if (*(_DWORD *)v725 > 4u)
                  ++v712;
              }
            }
            else if (v718 == 58)
            {
              v719 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v717 + 32) + 40) + 24);
              if (v719 == 35 || v719 == 11)
                ++v712;
              else
                ++v713;
            }
            v715 = 0;
            v711 = 1;
          }
          while ((v716 & 1) != 0);
          if ((v712 + v713) >= 2)
            break;
          v709 = *(_QWORD *)(v709 + 32);
          if (!v709)
            goto LABEL_2116;
        }
        v1929 = *(_QWORD *)(v316 + 80);
        if (*(_DWORD *)(v1929 + 32) > 0x40u)
        {
          v1930 = **(_QWORD **)(v1929 + 24);
          if (v1930 >= 5)
            goto LABEL_2010;
        }
        else
        {
          v1930 = *(_QWORD *)(v1929 + 24);
          if (v1930 > 4)
          {
LABEL_2010:
            v1932 = sub_1C6366AB4(*(_QWORD *)(v3552 + 16), v1930 - 4, (const llvm::APInt *)&v3588, v309, v308, 0, 0);
            v1934 = v313 & 0xFFFFFFFF00000000 | v1933;
            v1935 = *(_QWORD *)(v3552 + 16);
            v1936 = *(uint64_t **)(v310 + 32);
            v1937 = *v1936;
            v1938 = v1936[1];
            v1939 = *(_QWORD *)(v1935 + 832);
            if (v1939)
              LOWORD(v1939) = *(_WORD *)(v1939 + 8);
            v1941 = sub_1C5D56C70(v1935, 175, (const llvm::APInt *)&v3588, v309, v308, v1937, v1938, v1931, (uint64_t)v1932, v1934, v1939);
            v1943 = v1942;
            v1944 = *(_QWORD *)(v3552 + 16);
            v1945 = *(_QWORD *)(v310 + 32);
            v1946 = *(_QWORD *)(v1945 + 40);
            v1947 = *(_QWORD *)(v1945 + 48);
            v1948 = *(_QWORD *)(v1944 + 832);
            if (v1948)
              LOWORD(v1948) = *(_WORD *)(v1948 + 8);
            v1949 = sub_1C5D56C70(v1944, 175, (const llvm::APInt *)&v3588, v309, v308, v1946, v1947, v1940, (uint64_t)v1932, v1934, v1948);
            v1952 = *(_QWORD *)(v3552 + 16);
            v1953 = *(_QWORD *)(v1952 + 832);
            if (v1953)
              LOWORD(v1953) = *(_WORD *)(v1953 + 8);
            v1251 = sub_1C5D56C70(v1952, 56, (const llvm::APInt *)&v3588, v309, v308, (uint64_t)v1941, v1943, v1951, (uint64_t)v1949, v1950, v1953);
            v1252 = v1954;
            v1955 = *(_QWORD *)(v3552 + 16);
            v1956 = sub_1C6366AB4(v1955, 4, (const llvm::APInt *)&v3588, v309, v308, 0, 0);
            v1958 = *(_QWORD *)(v1955 + 832);
            if (v1958)
              LOWORD(v1958) = *(_WORD *)(v1958 + 8);
            v3434 = v1957;
            v3436 = v1958;
            v3433 = (uint64_t)v1956;
            v326 = v1955;
            v333 = 175;
LABEL_2254:
            v334 = (uint64_t)v309;
            v811 = v308;
            goto LABEL_2255;
          }
        }
        v2154 = *(_QWORD *)(v3552 + 16);
        v2155 = *(_QWORD *)(v2154 + 832);
        if (v2155)
          LOWORD(v2155) = *(_WORD *)(v2155 + 8);
        v1251 = sub_1C5D56C70(v2154, 175, (const llvm::APInt *)&v3588, v309, v308, v703, v702[1], a8, v312, v313, v2155);
        v1252 = v2157;
        v2158 = *(_QWORD *)(v3552 + 16);
        v2159 = *(_QWORD *)(v310 + 32);
        v2160 = *(_QWORD *)(v2159 + 40);
        v2161 = *(_QWORD *)(v2159 + 48);
        v2162 = *(_QWORD *)(v2158 + 832);
        if (v2162)
          LOWORD(v2162) = *(_WORD *)(v2162 + 8);
        v2163 = sub_1C5D56C70(v2158, 175, (const llvm::APInt *)&v3588, v309, v308, v2160, v2161, v2156, v312, v313, v2162);
        v2165 = *(_QWORD *)(*(_QWORD *)(v3552 + 16) + 832);
        if (v2165)
          LOWORD(v2165) = *(_WORD *)(v2165 + 8);
        v3434 = v2164;
        v3436 = v2165;
        v3433 = (uint64_t)v2163;
        v326 = *(_QWORD *)(v3552 + 16);
        v333 = 56;
        goto LABEL_2254;
      }
      goto LABEL_2116;
    case 0xB0:
      v249 = **(unsigned __int8 **)(v9 + 40);
      if (v249 != 5)
      {
        if (v249 != 6 || *(_DWORD *)(a3 + 8) == 0)
          goto LABEL_2116;
        v612 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40);
        v613 = *(unsigned __int16 *)(v612 + 24);
        if (v613 != 35 && v613 != 11)
          goto LABEL_2116;
        v615 = *(_QWORD *)(v612 + 80);
        if (*(_DWORD *)(v615 + 32) > 0x40u)
        {
          v616 = **(_QWORD **)(v615 + 24);
          if (v616 < 0x20)
            goto LABEL_2116;
        }
        else
        {
          v616 = *(_QWORD *)(v615 + 24);
          if (v616 <= 0x1F)
            goto LABEL_2116;
        }
        v907 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v616 - 32, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
        v909 = v908;
        v910 = 0;
        v911 = *(_QWORD *)(a3 + 16);
        v912 = *(uint64_t **)(v9 + 32);
        v913 = *v912;
        v914 = v912[1];
        v915 = *(_QWORD *)(v911 + 832);
        if (v915)
          v910 = *(_WORD *)(v915 + 8);
        v916 = sub_1C5D52060(v911, 216, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, v913, v914, v910);
        v918 = v917;
        v919 = *(_QWORD *)(v3552 + 16);
        v920 = sub_1C6366AB4(v919, 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
        v923 = *(_QWORD *)(v919 + 832);
        if (v923)
          LOWORD(v923) = *(_WORD *)(v923 + 8);
        v925 = sub_1C5D56C70(v919, 148, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v916, v918, v922, (uint64_t)v920, v921, v923);
        v927 = *(_QWORD *)(v3552 + 16);
        v928 = *(_QWORD *)(v927 + 832);
        if (v928)
          LOWORD(v928) = *(_WORD *)(v928 + 8);
        v32 = (uint64_t)sub_1C5D56C70(v927, 176, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v925, v924, v926, (uint64_t)v907, v909, v928);
        v34 = v929;
        v33 = *(_QWORD **)(v3552 + 16);
        v930 = v33[104];
        if (v930)
          v36 = *(_WORD *)(v930 + 8);
        else
          v36 = 0;
        v896 = 198;
        goto LABEL_2343;
      }
      v250 = *(uint64_t **)(v9 + 32);
      v251 = v250[5];
      v252 = *(unsigned __int16 *)(v251 + 24);
      if (v252 == 35 || v252 == 11)
      {
        v254 = *(_QWORD *)(v251 + 80);
        v255 = (_QWORD *)(v254 + 24);
        if (*(_DWORD *)(v254 + 32) >= 0x41u)
          v255 = (_QWORD *)*v255;
        if (*v255 == 16 && *(_DWORD *)(a3 + 8) >= 2)
        {
          v257 = *(_QWORD *)(a3 + 16);
          v258 = *(void **)(v9 + 64);
          v3593[0] = v258;
          if (v258)
          {
            llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v258, 2);
            v12 = *(_DWORD *)(v9 + 60);
            v250 = *(uint64_t **)(v9 + 32);
          }
          LODWORD(v3593[1]) = v12;
          v259 = *(_QWORD *)(v257 + 832);
          if (v259)
            v260 = *(_WORD *)(v259 + 8);
          else
            v260 = 0;
          v1890 = sub_1C5D52060(v257, 216, (const llvm::APInt *)v3593, (llvm *)0x26, 0, *v250, v250[1], v260);
          v1892 = v1891;
          if (v3593[0])
            llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
          v1893 = *(_QWORD *)(a3 + 16);
          v1894 = *(void **)(v9 + 64);
          v3593[0] = v1894;
          v1895 = v1893;
          if (v1894)
          {
            llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1894, 2);
            v1895 = *(_QWORD *)(v3552 + 16);
          }
          LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
          v1896 = sub_1C6366AB4(v1895, 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
          v1899 = *(_QWORD *)(v1893 + 832);
          if (v1899)
            LOWORD(v1899) = *(_WORD *)(v1899 + 8);
          v1298 = sub_1C5D56C70(v1893, 148, (const llvm::APInt *)v3593, (llvm *)4, 0, (uint64_t)v1890, v1892, v1898, (uint64_t)v1896, v1897, v1899);
          goto LABEL_1957;
        }
      }
      goto LABEL_2116;
    case 0xB1:
      v284 = **(unsigned __int8 **)(v9 + 40);
      if (v284 == 5)
      {
        v285 = *(uint64_t **)(v9 + 32);
        v286 = v285[5];
        v287 = *(unsigned __int16 *)(v286 + 24);
        if (v287 == 35 || v287 == 11)
        {
          v289 = *(_QWORD *)(v286 + 80);
          v290 = (_QWORD *)(v289 + 24);
          if (*(_DWORD *)(v289 + 32) >= 0x41u)
            v290 = (_QWORD *)*v290;
          if (*v290 == 16 && *(_DWORD *)(a3 + 8) >= 2)
          {
            v292 = *(_QWORD *)(a3 + 16);
            v293 = *(void **)(v9 + 64);
            v3593[0] = v293;
            if (v293)
            {
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v293, 2);
              v12 = *(_DWORD *)(v9 + 60);
              v285 = *(uint64_t **)(v9 + 32);
            }
            LODWORD(v3593[1]) = v12;
            v294 = *(_QWORD *)(v292 + 832);
            if (v294)
              v295 = *(_WORD *)(v294 + 8);
            else
              v295 = 0;
            v1902 = sub_1C5D52060(v292, 216, (const llvm::APInt *)v3593, (llvm *)0x26, 0, *v285, v285[1], v295);
            v1904 = v1903;
            if (v3593[0])
              llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
            v1905 = *(_QWORD *)(a3 + 16);
            v1906 = *(void **)(v9 + 64);
            v3593[0] = v1906;
            v1907 = v1905;
            if (v1906)
            {
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1906, 2);
              v1907 = *(_QWORD *)(v3552 + 16);
            }
            LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
            v1908 = sub_1C6366AB4(v1907, 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
            v1911 = *(_QWORD *)(v1905 + 832);
            if (v1911)
              LOWORD(v1911) = *(_WORD *)(v1911 + 8);
            v477 = (uint64_t)sub_1C5D56C70(v1905, 148, (const llvm::APInt *)v3593, (llvm *)4, 0, (uint64_t)v1902, v1904, v1910, (uint64_t)v1908, v1909, v1911);
            v479 = v1912;
            if (v3593[0])
              llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
            v1913 = *(_QWORD *)(v3552 + 16);
            v1914 = *(void **)(v9 + 64);
            v3593[0] = v1914;
            if (v1914)
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1914, 2);
            LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
            v1915 = *(_QWORD *)(v1913 + 832);
            if (v1915)
              v247 = *(_WORD *)(v1915 + 8);
            else
              v247 = 0;
            v769 = v1913;
            v770 = 199;
            goto LABEL_1966;
          }
        }
LABEL_1011:
        v931 = *v285;
        if (*(_WORD *)(*v285 + 24) != 192)
          goto LABEL_2116;
        v932 = v285[5];
        v933 = *(unsigned __int16 *)(v932 + 24);
        if (v933 != 35 && v933 != 11)
          goto LABEL_2116;
        v935 = *(_QWORD *)(v931 + 32);
        v936 = *(unsigned __int16 *)(*(_QWORD *)(v935 + 80) + 24);
        v937 = v936 == 35 || v936 == 11;
        v938 = v937 ? *(_QWORD *)(v935 + 80) : 0;
        v939 = *(_QWORD *)(v935 + 120);
        v940 = *(unsigned __int16 *)(v939 + 24);
        v941 = v940 == 35 || v940 == 11;
        if (!v941 || v938 == 0)
          goto LABEL_2116;
        v943 = *(_QWORD *)(v932 + 80);
        v944 = (_QWORD *)(v943 + 24);
        if (*(_DWORD *)(v943 + 32) >= 0x41u)
          v944 = (_QWORD *)*v944;
        v945 = a3;
        v946 = (_QWORD *)*v944;
        v947 = *v944;
        v948 = *(_QWORD *)(v938 + 80);
        v949 = *(unsigned int *)(v948 + 32);
        LODWORD(v3593[1]) = v949;
        if (v949 > 0x40)
        {
          v3083 = v949 + 63;
          v3084 = ((unint64_t)(v949 + 63) >> 3) & 0x3FFFFFF8;
          v3085 = (void *)operator new[]();
          v3593[0] = v3085;
          memcpy(v3085, *(const void **)(v948 + 24), v3084);
          v945 = v3552;
          llvm::APInt::tcShiftRight((llvm::APInt *)v3085, (unint64_t *)(v3083 >> 6), v946);
        }
        else if ((_DWORD)v949 == (_DWORD)v946)
        {
          v3593[0] = 0;
        }
        else
        {
          v3593[0] = (void *)(*(_QWORD *)(v948 + 24) >> v947);
        }
        v950 = *(_QWORD *)(v939 + 80);
        v951 = *(unsigned int *)(v950 + 32);
        LODWORD(v3608[1]) = v951;
        if (v951 > 0x40)
        {
          v3086 = v951 + 63;
          v3087 = ((unint64_t)(v951 + 63) >> 3) & 0x3FFFFFF8;
          v3088 = (void *)operator new[]();
          v3608[0] = v3088;
          memcpy(v3088, *(const void **)(v950 + 24), v3087);
          v945 = v3552;
          llvm::APInt::tcShiftRight((llvm::APInt *)v3088, (unint64_t *)(v3086 >> 6), v946);
        }
        else if ((_DWORD)v951 == (_DWORD)v946)
        {
          v3608[0] = 0;
        }
        else
        {
          v3608[0] = (void *)(*(_QWORD *)(v950 + 24) >> v947);
        }
        v952 = *(_QWORD *)(v9 + 40);
        v953 = *(llvm **)v952;
        v954 = *(_QWORD *)(v952 + 8);
        v955 = *(_QWORD *)(v945 + 16);
        v956 = *(unsigned __int8 **)(v938 + 64);
        *(_QWORD *)&v3623 = v956;
        if (v956)
          llvm::MetadataTracking::track((uint64_t)&v3623, v956, 2);
        DWORD2(v3623) = *(_DWORD *)(v938 + 60);
        v957 = sub_1C63666FC(v955, (llvm::LLVMContext *)v3593, (const llvm::APInt *)&v3623, (uint64_t)v953, v954, 0, 0);
        v959 = v958;
        if ((_QWORD)v3623)
          llvm::MetadataTracking::untrack((uint64_t)&v3623, (unsigned __int8 *)v3623);
        v960 = *(_QWORD *)(v3552 + 16);
        v961 = *(unsigned __int8 **)(v939 + 64);
        *(_QWORD *)&v3623 = v961;
        if (v961)
          llvm::MetadataTracking::track((uint64_t)&v3623, v961, 2);
        DWORD2(v3623) = *(_DWORD *)(v939 + 60);
        v963 = sub_1C63666FC(v960, (llvm::LLVMContext *)v3608, (const llvm::APInt *)&v3623, (uint64_t)v953, v954, 0, 0);
        v965 = v964;
        if ((_QWORD)v3623)
          llvm::MetadataTracking::untrack((uint64_t)&v3623, (unsigned __int8 *)v3623);
        v966 = *(_QWORD *)(v3552 + 16);
        v967 = *(unsigned __int8 **)(v931 + 64);
        *(_QWORD *)&v3623 = v967;
        if (v967)
          llvm::MetadataTracking::track((uint64_t)&v3623, v967, 2);
        DWORD2(v3623) = *(_DWORD *)(v931 + 60);
        v968 = *(uint64_t **)(v931 + 32);
        *(_QWORD *)&v3590 = sub_1C63698B8(v966, (const char *)0xC0, (const llvm::APInt *)&v3623, v953, v954, *v968, v968[1], v962, v968[5], v968[6], v957, v959, v963, v965, v968[20], v968[21]);
        *((_QWORD *)&v3590 + 1) = v969;
        if ((_QWORD)v3623)
          llvm::MetadataTracking::untrack((uint64_t)&v3623, (unsigned __int8 *)v3623);
        if (LODWORD(v3608[1]) >= 0x41 && v3608[0])
          MEMORY[0x1CAA32F9C](v3608[0], 0x1000C8000313F17);
LABEL_256:
        if (LODWORD(v3593[1]) < 0x41)
          goto LABEL_2117;
        v270 = (void **)v3593[0];
        if (!v3593[0])
          goto LABEL_2117;
        goto LABEL_258;
      }
      v285 = *(uint64_t **)(v9 + 32);
      if (v284 != 6 || *(_DWORD *)(a3 + 8) == 0)
        goto LABEL_1011;
      v618 = v285[5];
      v619 = *(unsigned __int16 *)(v618 + 24);
      if (v619 != 35 && v619 != 11)
        goto LABEL_1011;
      v621 = *(_QWORD *)(v618 + 80);
      if (*(_DWORD *)(v621 + 32) > 0x40u)
      {
        v622 = **(_QWORD **)(v621 + 24);
        if (v622 >= 0x20)
        {
LABEL_653:
          v623 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v622 - 32, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
          v625 = v624;
          v626 = 0;
          v627 = *(_QWORD *)(a3 + 16);
          v628 = *(uint64_t **)(v9 + 32);
          v629 = *v628;
          v630 = v628[1];
          v631 = *(_QWORD *)(v627 + 832);
          if (v631)
            v626 = *(_WORD *)(v631 + 8);
          v632 = sub_1C5D52060(v627, 216, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, v629, v630, v626);
          v634 = v633;
          v635 = *(_QWORD *)(v3552 + 16);
          v636 = sub_1C6366AB4(v635, 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
          v639 = *(_QWORD *)(v635 + 832);
          if (v639)
            LOWORD(v639) = *(_WORD *)(v639 + 8);
          v641 = sub_1C5D56C70(v635, 148, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v632, v634, v638, (uint64_t)v636, v637, v639);
          v643 = *(_QWORD *)(v3552 + 16);
          v644 = *(_QWORD *)(v643 + 832);
          if (v644)
            LOWORD(v644) = *(_WORD *)(v644 + 8);
          v32 = (uint64_t)sub_1C5D56C70(v643, 177, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v641, v640, v642, (uint64_t)v623, v625, v644);
          v34 = v645;
          v33 = *(_QWORD **)(v3552 + 16);
          v646 = v33[104];
          if (v646)
            v36 = *(_WORD *)(v646 + 8);
          else
            v36 = 0;
          v896 = 199;
LABEL_2343:
          v898 = 6;
          goto LABEL_1334;
        }
      }
      else
      {
        v622 = *(_QWORD *)(v621 + 24);
        if (v622 > 0x1F)
          goto LABEL_653;
      }
      if (*(_WORD *)(*v285 + 24) == 199)
      {
        v38 = (uint64_t)sub_1C4900B2C(v9, 0, *(_QWORD *)(a3 + 16));
        goto LABEL_20;
      }
      goto LABEL_1011;
    case 0xB3:
      if (**(_BYTE **)(v9 + 40) != 5)
        goto LABEL_2116;
      v261 = *(_QWORD **)(v9 + 32);
      v262 = *v261;
      v263 = *(unsigned __int16 *)(*v261 + 24);
      if (v263 != 35 && v263 != 11)
        goto LABEL_2116;
      v265 = v261[5];
      v266 = *(unsigned __int16 *)(v265 + 24);
      if (v266 != 35 && v266 != 11)
        goto LABEL_2116;
      v268 = *(_QWORD *)(a3 + 16);
      llvm::APInt::rotr((llvm::APInt *)(*(_QWORD *)(v262 + 80) + 24), (const void **)(*(_QWORD *)(v265 + 80) + 24), (uint64_t)v3593);
      *(_QWORD *)&v3590 = sub_1C63666FC(v268, (llvm::LLVMContext *)v3593, (const llvm::APInt *)&v3588, 5, 0, 0, 0);
      *((_QWORD *)&v3590 + 1) = v269;
      goto LABEL_256;
    case 0xBF:
      v1036 = *(_QWORD *)(v9 + 40);
      v1038 = *(llvm **)v1036;
      v1037 = *(_QWORD *)(v1036 + 8);
      v1039 = *(unsigned __int8 **)(v9 + 64);
      v3586 = v1039;
      if (v1039)
      {
        llvm::MetadataTracking::track((uint64_t)&v3586, v1039, 2);
        v12 = *(_DWORD *)(v9 + 60);
      }
      v3587 = v12;
      v1040 = *(uint64_t **)(v9 + 32);
      v1041 = *v1040;
      v3500 = v1040[6];
      v3516 = v1040[5];
      v3489 = v1040[10];
      v3468 = v1040[1];
      v3476 = v1040[11];
      v3591 = v1038;
      v3592 = v1037;
      if ((_BYTE)v1038)
      {
        v3454 = 0;
        v3462 = sub_1C47F37A0((unsigned __int8 *)&v3591);
        v3533 = 0;
      }
      else
      {
        v1042 = llvm::EVT::getEVT(*(llvm::EVT **)(v1037 + 24), 0, a3);
        v3533 = (uint64_t)v1043;
        v3454 = v1042 & 0xFFFFFFFFFFFFFF00;
        v3462 = v1042;
      }
      v3593[0] = &v3594;
      v3593[1] = (void *)0x400000000;
      v3608[0] = &v3609;
      v3608[1] = (void *)0x400000000;
      v3625 = (unsigned __int8 *)v3627;
      v3626 = 0x400000000;
      v1180 = *(unsigned __int16 *)(v1041 + 24);
      if (v1180 == 146)
      {
        if (!*(_WORD *)(v1041 + 56))
          goto LABEL_1403;
        v1846 = *(uint64_t **)(v1041 + 32);
        v1847 = 40 * *(unsigned __int16 *)(v1041 + 56);
        while (1)
        {
          v1848 = *v1846;
          v1849 = *(unsigned __int16 *)(*v1846 + 24);
          if (v1849 == 11 || v1849 == 35)
          {
            v1856 = *(_QWORD *)(v1848 + 80);
            v1857 = (_QWORD *)(v1856 + 24);
            if (*(_DWORD *)(v1856 + 32) >= 0x41u)
              v1857 = (_QWORD *)*v1857;
            v1858 = (_QWORD *)*v1857;
            v1859 = v3626;
            if (v1858)
            {
              if (v3626 >= (unint64_t)HIDWORD(v3626))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3625, (uint64_t)v3627, v3626 + 1, 4);
                v1859 = v3626;
              }
              *(_DWORD *)&v3625[4 * v1859] = 15;
            }
            else
            {
              if (v3626 >= (unint64_t)HIDWORD(v3626))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3625, (uint64_t)v3627, v3626 + 1, 4);
                v1859 = v3626;
              }
              *(_DWORD *)&v3625[4 * v1859] = 0;
            }
            LODWORD(v3626) = v3626 + 1;
            v1860 = LODWORD(v3593[1]);
            if (LODWORD(v3593[1]) >= (unint64_t)HIDWORD(v3593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
              v1860 = LODWORD(v3593[1]);
            }
            v1861 = (char *)v3593[0] + 16 * v1860;
            *v1861 = 0;
            v1861[1] = 0;
            ++LODWORD(v3593[1]);
            v1862 = LODWORD(v3608[1]);
            if (LODWORD(v3608[1]) >= (unint64_t)HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v1862 = LODWORD(v3608[1]);
            }
            v1863 = (char *)v3608[0] + 16 * v1862;
            *v1863 = 0;
            v1863[1] = 0;
          }
          else
          {
            if (v1849 != 193)
              goto LABEL_1403;
            v1850 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1848 + 32) + 80) + 76);
            v1851 = v3626;
            if (v3626 >= (unint64_t)HIDWORD(v3626))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3625, (uint64_t)v3627, v3626 + 1, 4);
              v1851 = v3626;
            }
            *(_DWORD *)&v3625[4 * v1851] = v1850;
            LODWORD(v3626) = v3626 + 1;
            v1852 = *(_OWORD *)*(_QWORD *)(*v1846 + 32);
            v1853 = LODWORD(v3593[1]);
            if (LODWORD(v3593[1]) >= (unint64_t)HIDWORD(v3593[1]))
            {
              v3451 = *(_OWORD *)*(_QWORD *)(*v1846 + 32);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
              v1852 = v3451;
              v1853 = LODWORD(v3593[1]);
            }
            *((_OWORD *)v3593[0] + v1853) = v1852;
            ++LODWORD(v3593[1]);
            v1854 = *(_OWORD *)(*(_QWORD *)(*v1846 + 32) + 40);
            v1855 = LODWORD(v3608[1]);
            if (LODWORD(v3608[1]) >= (unint64_t)HIDWORD(v3608[1]))
            {
              v3452 = *(_OWORD *)(*(_QWORD *)(*v1846 + 32) + 40);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v1854 = v3452;
              v1855 = LODWORD(v3608[1]);
            }
            *((_OWORD *)v3608[0] + v1855) = v1854;
          }
          ++LODWORD(v3608[1]);
          v1846 += 5;
          v1847 -= 40;
          if (!v1847)
            goto LABEL_1846;
        }
      }
      if (v1180 == 193)
      {
        v1181 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(v1041 + 32) + 40)
                          + 16 * *(unsigned int *)(*(_QWORD *)(v1041 + 32) + 8));
        v1183 = *v1181;
        v1182 = v1181[1];
        *(_QWORD *)&v3623 = v1183;
        *((_QWORD *)&v3623 + 1) = v1182;
        if ((_BYTE)v1183)
        {
          v1186 = sub_1C47F37A0((unsigned __int8 *)&v3623);
          v1188 = 0;
          v1187 = 0;
        }
        else
        {
          v1184 = llvm::EVT::getEVT(*(llvm::EVT **)(v1182 + 24), 0, v1044);
          v1186 = v1184;
          v1187 = (uint64_t)v1185;
          v1188 = v1184 & 0xFFFFFFFFFFFFFF00;
        }
        v1762 = sub_1C612FE00((llvm::EVT *)&v3591, v1185);
        if (v1762)
        {
          v1813 = 0;
          v1814 = (llvm *)(v1188 | v1186);
          v1815 = v1762;
          do
          {
            v1816 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1041 + 32) + 80) + 76);
            v1817 = v3626;
            if (v3626 >= (unint64_t)HIDWORD(v3626))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3625, (uint64_t)v3627, v3626 + 1, 4);
              v1817 = v3626;
            }
            *(_DWORD *)&v3625[4 * v1817] = v1816;
            LODWORD(v3626) = v3626 + 1;
            v1818 = *(_QWORD *)(v3552 + 16);
            v1819 = *(uint64_t **)(v1041 + 32);
            v1820 = *v1819;
            v1821 = v1819[1];
            v1822 = sub_1C6366AB4(v1818, v1813, (const llvm::APInt *)&v3586, (llvm *)5, 0, 0, 0);
            v1825 = 0;
            v1826 = *(_QWORD *)(v1818 + 832);
            if (v1826)
              v1825 = *(_WORD *)(v1826 + 8);
            v1827 = sub_1C5D56C70(v1818, 148, (const llvm::APInt *)&v3586, v1814, v1187, v1820, v1821, v1824, (uint64_t)v1822, v1823, v1825);
            v1829 = v1828;
            v1830 = LODWORD(v3593[1]);
            if (LODWORD(v3593[1]) >= (unint64_t)HIDWORD(v3593[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
              v1830 = LODWORD(v3593[1]);
            }
            v1831 = (uint64_t **)((char *)v3593[0] + 16 * v1830);
            *v1831 = v1827;
            v1831[1] = v1829;
            ++LODWORD(v3593[1]);
            v1832 = *(_QWORD *)(v3552 + 16);
            v1833 = *(_QWORD *)(v1041 + 32);
            v1834 = *(_QWORD *)(v1833 + 40);
            v1835 = *(_QWORD *)(v1833 + 48);
            v1836 = sub_1C6366AB4(v1832, v1813, (const llvm::APInt *)&v3586, (llvm *)5, 0, 0, 0);
            v1839 = 0;
            v1840 = *(_QWORD *)(v1832 + 832);
            if (v1840)
              v1839 = *(_WORD *)(v1840 + 8);
            v1841 = sub_1C5D56C70(v1832, 148, (const llvm::APInt *)&v3586, v1814, v1187, v1834, v1835, v1838, (uint64_t)v1836, v1837, v1839);
            v1843 = v1842;
            v1844 = LODWORD(v3608[1]);
            if (LODWORD(v3608[1]) >= (unint64_t)HIDWORD(v3608[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
              v1844 = LODWORD(v3608[1]);
            }
            v1845 = (uint64_t **)((char *)v3608[0] + 16 * v1844);
            *v1845 = v1841;
            v1845[1] = v1843;
            ++LODWORD(v3608[1]);
            sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v1827);
            sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v1841);
            ++v1813;
          }
          while (v1815 != v1813);
        }
        goto LABEL_1846;
      }
LABEL_1403:
      v1310 = (uint64_t *)(*(_QWORD *)(v1041 + 40) + 16 * v3468);
      v1312 = *v1310;
      v1311 = v1310[1];
      *(_QWORD *)&v3623 = v1312;
      *((_QWORD *)&v3623 + 1) = v1311;
      if ((_BYTE)v1312)
      {
        v1315 = sub_1C47F37A0((unsigned __int8 *)&v3623);
        v1317 = 0;
        v1316 = 0;
      }
      else
      {
        v1313 = llvm::EVT::getEVT(*(llvm::EVT **)(v1311 + 24), 0, v1044);
        v1315 = v1313;
        v1316 = (uint64_t)v1314;
        v1317 = v1313 & 0xFFFFFFFFFFFFFF00;
      }
      v1511 = sub_1C612FE00((llvm::EVT *)&v3591, v1314);
      if (v1511)
      {
        v1512 = 0;
        v1513 = (llvm *)(v1317 | v1315);
        v1514 = v1511;
        do
        {
          v1515 = *(_QWORD *)(v3552 + 16);
          v1516 = sub_1C6366AB4(v1515, v1512, (const llvm::APInt *)&v3586, (llvm *)5, 0, 0, 0);
          v1519 = 0;
          v1520 = *(_QWORD *)(v1515 + 832);
          if (v1520)
            v1519 = *(_WORD *)(v1520 + 8);
          v1521 = sub_1C5D56C70(v1515, 148, (const llvm::APInt *)&v3586, v1513, v1316, v1041, v3468, v1518, (uint64_t)v1516, v1517, v1519);
          v1523 = v1522;
          v1524 = sub_1C6366AB4(*(_QWORD *)(v3552 + 16), 0, (const llvm::APInt *)&v3586, v1513, v1316, 0, 0);
          v1525 = v1043;
          v1526 = LODWORD(v3593[1]);
          if (LODWORD(v3593[1]) >= (unint64_t)HIDWORD(v3593[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
            v1526 = LODWORD(v3593[1]);
          }
          v1527 = (uint64_t **)((char *)v3593[0] + 16 * v1526);
          *v1527 = v1521;
          v1527[1] = v1523;
          ++LODWORD(v3593[1]);
          v1528 = LODWORD(v3608[1]);
          if (LODWORD(v3608[1]) >= (unint64_t)HIDWORD(v3608[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3608, (uint64_t)&v3609, LODWORD(v3608[1]) + 1, 16);
            v1528 = LODWORD(v3608[1]);
          }
          v1529 = (char *)v3608[0] + 16 * v1528;
          *v1529 = v1524;
          v1529[1] = v1525;
          ++LODWORD(v3608[1]);
          v1530 = v3626;
          if (v3626 >= (unint64_t)HIDWORD(v3626))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3625, (uint64_t)v3627, v3626 + 1, 4);
            v1530 = v3626;
          }
          *(_DWORD *)&v3625[4 * v1530] = 22;
          LODWORD(v3626) = v3626 + 1;
          ++v1512;
        }
        while (v1514 != v1512);
      }
LABEL_1846:
      *(_QWORD *)&v3623 = v3624;
      *((_QWORD *)&v3623 + 1) = 0x400000000;
      v1763 = sub_1C612FE00((llvm::EVT *)&v3591, v1043);
      v1764 = v3552;
      if (v1763)
      {
        v1768 = 0;
        v1769 = 0;
        v1770 = (llvm *)(v3454 | v3462);
        v1771 = 16 * v1763;
        v3447 = v1771;
        v3450 = v1770;
        do
        {
          v1772 = *(_QWORD *)(v1764 + 16);
          v1773 = sub_1C6366AB4(v1772, v1769, (const llvm::APInt *)&v3586, (llvm *)5, 0, 0, 0);
          v1776 = 0;
          v1777 = *(_QWORD *)(v1772 + 832);
          if (v1777)
            v1776 = *(_WORD *)(v1777 + 8);
          v1778 = sub_1C5D56C70(v1772, 148, (const llvm::APInt *)&v3586, v1770, v3533, v3516, v3500, v1775, (uint64_t)v1773, v1774, v1776);
          v1780 = v1779;
          v1781 = *(_QWORD *)(v1764 + 16);
          v1782 = sub_1C6366AB4(v1781, v1769, (const llvm::APInt *)&v3586, (llvm *)5, 0, 0, 0);
          v1785 = 0;
          v1786 = *(_QWORD *)(v1781 + 832);
          if (v1786)
            v1785 = *(_WORD *)(v1786 + 8);
          v1787 = sub_1C5D56C70(v1781, 148, (const llvm::APInt *)&v3586, v1770, v3533, v3489, v3476, v1784, (uint64_t)v1782, v1783, v1785);
          v1789 = v1788;
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v1778);
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v1787);
          v1790 = *(_DWORD *)&v3625[4 * v1769];
          if (v1790)
          {
            if (v1790 == 15)
            {
              v1791 = DWORD2(v3623);
              if (DWORD2(v3623) >= (unint64_t)HIDWORD(v3623))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3623, (uint64_t)v3624, DWORD2(v3623) + 1, 16);
                v1791 = DWORD2(v3623);
              }
              v1764 = v3552;
              v1792 = (uint64_t **)(v3623 + 16 * v1791);
              *v1792 = v1778;
              v1792[1] = v1780;
              ++DWORD2(v3623);
            }
            else
            {
              v1795 = *(_QWORD **)(v3552 + 16);
              v3463 = *(_QWORD *)((char *)v3593[0] + v1768 + 8);
              v3471 = *(_QWORD *)((char *)v3593[0] + v1768);
              v1796 = *(_QWORD *)((char *)v3608[0] + v1768 + 8);
              v3457 = *(_QWORD *)((char *)v3608[0] + v1768);
              v1797 = v1778[5] + 16 * v1780;
              v1799 = *(llvm **)v1797;
              v1798 = *(_QWORD *)(v1797 + 8);
              v1800 = sub_1C6367818(v1795, v1790);
              v1803 = sub_1C63698B8((uint64_t)v1795, (const char *)0xC0, (const llvm::APInt *)&v3586, v1799, v1798, v3471, v3463, v1802, v3457, v1796, (uint64_t)v1778, (int)v1780, (uint64_t)v1787, (int)v1789, v1800, v1801);
              v1805 = v1804;
              v1806 = DWORD2(v3623);
              if (DWORD2(v3623) >= (unint64_t)HIDWORD(v3623))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3623, (uint64_t)v3624, DWORD2(v3623) + 1, 16);
                v1806 = DWORD2(v3623);
              }
              v1771 = v3447;
              v1807 = (uint64_t **)(v3623 + 16 * v1806);
              *v1807 = v1803;
              v1807[1] = v1805;
              ++DWORD2(v3623);
              v1764 = v3552;
              sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v1803);
              v1770 = v3450;
            }
          }
          else
          {
            v1793 = DWORD2(v3623);
            if (DWORD2(v3623) >= (unint64_t)HIDWORD(v3623))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v3623, (uint64_t)v3624, DWORD2(v3623) + 1, 16);
              v1793 = DWORD2(v3623);
            }
            v1794 = (uint64_t **)(v3623 + 16 * v1793);
            *v1794 = v1787;
            v1794[1] = v1789;
            ++DWORD2(v3623);
            v1764 = v3552;
          }
          ++v1769;
          v1768 += 16;
        }
        while (v1771 != v1768);
      }
      v1765 = *(_QWORD *)(v1764 + 16);
      v1766 = *(_QWORD *)(v1765 + 832);
      if (v1766)
        v1767 = *(unsigned __int16 *)(v1766 + 8);
      else
        v1767 = 0;
      v1808 = sub_1C636D0C8(v1765, (const char *)0x92, (const llvm::APInt *)&v3586, v3591, v3592, (uint64_t *)v3623, DWORD2(v3623), v1767);
      v1810 = v1809;
      if ((_BYTE *)v3623 != v3624)
        free((void *)v3623);
      if (v3625 != (unsigned __int8 *)v3627)
        free(v3625);
      if (v3608[0] != &v3609)
        free(v3608[0]);
      if (v3593[0] != &v3594)
        free(v3593[0]);
      *(_QWORD *)&v3590 = v1808;
      *((_QWORD *)&v3590 + 1) = v1810;
      v1811 = v3586;
      if (!v3586)
        goto LABEL_2117;
      v1812 = (void **)&v3586;
      goto LABEL_1971;
    case 0xC0:
LABEL_170:
      v182 = *(uint64_t **)(v9 + 32);
      v183 = v182[20];
      v184 = *(_DWORD *)(v183 + 76);
      v185 = *v182;
      v186 = v182[1];
      v187 = v182[5];
      v188 = v182[10];
      v189 = v182[11];
      v190 = v182[15];
      v191 = *(unsigned __int16 *)(v183 + 72);
      if ((v191 & 1) == 0)
        v191 = *(unsigned __int16 *)(v9 + 72);
      v192 = v182[6];
      v193 = v182[16];
      v194 = *(_QWORD **)(v3552 + 16);
      v195 = *(_WORD *)(*v194 + 1020) & 1 | ((v191 & 0x10) != 0);
      if ((~v191 & 0x3C0) != 0)
        v196 = 0;
      else
        v196 = (v191 >> 10) & 1;
      v197 = *(_WORD *)(*v194 + 1020) & 1 | v196;
      if ((_DWORD)v13 != 192)
        v197 = *(_WORD *)(*v194 + 1020) & 1;
      if ((_DWORD)v13 != 428)
        v195 = v197;
      if (!v195)
        goto LABEL_967;
      if (v184 == 8)
      {
        *(_QWORD *)&v3590 = v190;
        *((_QWORD *)&v3590 + 1) = v193;
        goto LABEL_2117;
      }
      if (v184 == 7)
      {
        *(_QWORD *)&v3590 = v188;
        *((_QWORD *)&v3590 + 1) = v189;
        goto LABEL_2117;
      }
      v648 = *(unsigned __int16 *)(v187 + 24);
      if (v648 != 36 && v648 != 12)
        goto LABEL_967;
      v650 = *(_QWORD *)(v187 + 80);
      v651 = *(_UNKNOWN **)(v650 + 32) == &unk_1C866F1C0 ? *(_QWORD *)(v650 + 40) : v650 + 24;
      if ((*(_BYTE *)(v651 + 28) & 7) != 3)
        goto LABEL_967;
      v863 = *(_QWORD *)(v185 + 48);
      if (!v863)
        goto LABEL_967;
      v864 = 1;
      do
      {
        if (*(_DWORD *)(v863 + 8) == (_DWORD)v186)
        {
          if (!v864)
            goto LABEL_967;
          --v864;
        }
        v863 = *(_QWORD *)(v863 + 32);
      }
      while (v863);
      if (v864)
        goto LABEL_967;
      v865 = *(unsigned __int16 *)(v185 + 24);
      if (v865 == 141)
      {
        v2455 = v193;
        v2456 = v184;
        v2457 = v190;
        v2467 = *(_QWORD *)(v185 + 40) + 16 * v186;
        v2468 = v185;
        v3540 = sub_1C5D56C70((uint64_t)v194, 98, (const llvm::APInt *)&v3588, *(llvm **)v2467, *(_QWORD *)(v2467 + 8), **(_QWORD **)(v185 + 32), *(_QWORD *)(*(_QWORD *)(v185 + 32) + 8), a8, *(_QWORD *)(*(_QWORD *)(v185 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v185 + 32) + 48), *(_WORD *)(v185 + 72));
        LODWORD(v3521) = v2469;
        v2464 = *(_QWORD *)(v3552 + 16);
        v2470 = *(_QWORD *)(v2468 + 32);
        v2459 = *(_QWORD *)(v2470 + 80);
        v2460 = *(_QWORD *)(v2470 + 88);
        v2471 = *(_QWORD *)(v2459 + 40) + 16 * *(unsigned int *)(v2470 + 88);
        v2462 = *(llvm **)v2471;
        v2463 = *(_QWORD *)(v2471 + 8);
        v2465 = *(_QWORD *)(v2464 + 832);
        if (!v2465)
        {
LABEL_2564:
          v2466 = 0;
LABEL_2567:
          v2472 = sub_1C5D52060(v2464, 222, (const llvm::APInt *)&v3588, v2462, v2463, v2459, v2460, v2466);
          v3492 = v2473;
          v3506 = (uint64_t)v2472;
          v2474 = *(_QWORD **)(v3552 + 16);
          v2475 = (const char *)*(unsigned __int16 *)(v9 + 24);
          v2476 = *(_QWORD *)(v188 + 40) + 16 * v189;
          v2477 = *(llvm **)v2476;
          v2478 = *(_QWORD *)(v2476 + 8);
          v2479 = sub_1C6367818(v2474, v2456);
          *(_QWORD *)&v3590 = sub_1C63698B8((uint64_t)v2474, v2475, (const llvm::APInt *)&v3588, v2477, v2478, (uint64_t)v3540, v3521, v2481, v3506, v3492, v188, v189, v2457, v2455, v2479, v2480);
          *((_QWORD *)&v3590 + 1) = v2482;
          *(_WORD *)(v3590 + 72) = *(_WORD *)(v9 + 72);
          goto LABEL_2117;
        }
      }
      else
      {
        if (v865 != 96)
        {
LABEL_967:
          v866 = *(unsigned __int16 *)(v188 + 24);
          if (v866 != *(unsigned __int16 *)(v190 + 24) || (v866 & 0xFFFE) != 0xDE)
            goto LABEL_984;
          v867 = v9;
          v868 = (_QWORD *)v188;
          v869 = v185;
          v870 = v190;
          v3531 = v9;
          v3515 = v186;
          v871 = v184;
          v872 = v192;
          v873 = v193;
          v874 = sub_1C48EFEC4(v867);
          v193 = v873;
          LODWORD(v192) = v872;
          v184 = v871;
          LODWORD(v186) = v3515;
          v9 = v3531;
          v190 = v870;
          v185 = v869;
          v188 = (uint64_t)v868;
          if ((v874 & 1) == 0)
          {
            v875 = v868[6];
            if (v875)
            {
              v876 = 1;
              do
              {
                if (*(_DWORD *)(v875 + 8) == (_DWORD)v189)
                {
                  if (!v876)
                    goto LABEL_987;
                  --v876;
                }
                v875 = *(_QWORD *)(v875 + 32);
              }
              while (v875);
              if (!v876)
              {
                v877 = *(_QWORD *)(v870 + 48);
                if (v877)
                {
                  v878 = 1;
                  do
                  {
                    if (*(_DWORD *)(v877 + 8) == (_DWORD)v193)
                    {
                      if (!v878)
                        goto LABEL_987;
                      --v878;
                    }
                    v877 = *(_QWORD *)(v877 + 32);
                  }
                  while (v877);
                  if (!v878)
                  {
LABEL_984:
                    *(_QWORD *)&v3590 = 0;
                    DWORD2(v3590) = 0;
                    v879 = v184;
                    v880 = v193;
                    v3532 = v190;
                    v881 = v185;
                    v882 = v192;
                    if ((sub_1C48EEDAC((uint64_t)&v3590, v9, v185, v186, v187, v192, v188, v189, v190, v193, v184, (uint64_t *)v3552, 0) & 1) != 0|| (sub_1C48EEDAC((uint64_t)&v3590, v9, v881, v186, v187,
                            v882,
                            v3532,
                            v880,
                            v188,
                            v189,
                            v879,
                            (uint64_t *)v3552,
                            1) & 1) != 0)
                    {
                      goto LABEL_2117;
                    }
                    goto LABEL_2116;
                  }
                }
              }
            }
          }
LABEL_987:
          v3499 = 16 * v189;
          v883 = (uint64_t *)v868[4];
          v884 = v868[5] + v3499;
          v3475 = *(_QWORD *)(v884 + 8);
          v3487 = *(llvm **)v884;
          v3461 = v883[1];
          v3467 = *v883;
          v885 = *(uint64_t **)(v870 + 32);
          v886 = *v885;
          v887 = v885[1];
          v888 = v194;
          v889 = v185;
          v890 = (uint64_t)v194;
          v891 = v192;
          v892 = sub_1C6367818(v888, v184);
          v32 = (uint64_t)sub_1C63698B8(v890, v13, (const llvm::APInt *)&v3588, v3487, v3475, v889, v3515, v894, v187, v891, v3467, v3461, v886, v887, v892, v893);
          v34 = v895;
          *(_WORD *)(v32 + 72) = *(_WORD *)(v3531 + 72);
          v33 = *(_QWORD **)(v3552 + 16);
          v896 = *(unsigned __int16 *)(v188 + 24);
          v897 = (uint64_t *)(*(_QWORD *)(v188 + 40) + v3499);
          v898 = *v897;
          v899 = (void *)v897[1];
          v900 = v33[104];
          if (v900)
            v36 = *(_WORD *)(v900 + 8);
          else
            v36 = 0;
LABEL_2030:
          v38 = (uint64_t)sub_1C5D52060((uint64_t)v33, v896, (const llvm::APInt *)&v3588, (llvm *)v898, (uint64_t)v899, v32, v34, v36);
          goto LABEL_20;
        }
        v2455 = v193;
        v2456 = v184;
        v2457 = v190;
        v2458 = *(_QWORD *)(v185 + 32);
        v3540 = *(uint64_t **)v2458;
        v3521 = *(_QWORD *)(v2458 + 8);
        v2459 = *(_QWORD *)(v2458 + 40);
        v2460 = *(_QWORD *)(v2458 + 48);
        v2461 = *(_QWORD *)(v2459 + 40) + 16 * *(unsigned int *)(v2458 + 48);
        v2462 = *(llvm **)v2461;
        v2463 = *(_QWORD *)(v2461 + 8);
        v2464 = *(_QWORD *)(v3552 + 16);
        v2465 = v194[104];
        if (!v2465)
          goto LABEL_2564;
      }
      v2466 = *(_WORD *)(v2465 + 8);
      goto LABEL_2567;
    case 0xC1:
      if (*(_DWORD *)(a3 + 8))
        goto LABEL_2116;
      v231 = *(_QWORD *)(v9 + 40);
      v233 = *(void **)v231;
      v232 = *(_QWORD *)(v231 + 8);
      v3608[0] = v233;
      v3608[1] = (void *)v232;
      if ((_BYTE)v233)
      {
        if (v233 - 15 >= 0x9C)
          goto LABEL_2116;
        v234 = sub_1C47F37A0((unsigned __int8 *)v3608);
      }
      else
      {
        if ((*(_DWORD *)(v232 + 8) & 0xFE) != 0x12)
          goto LABEL_2116;
        v234 = llvm::EVT::getEVT(*(llvm::EVT **)(v232 + 24), 0, a3);
      }
      if (v234 != 2)
        goto LABEL_2116;
      v816 = *(uint64_t **)(v9 + 32);
      v3486 = v816[6];
      v3498 = v816[5];
      v3530 = *v816;
      v3514 = v816[1];
      v817 = *(_QWORD *)(*v816 + 40) + 16 * v3514;
      v819 = *(void **)v817;
      v818 = *(llvm::EVT ***)(v817 + 8);
      v3593[0] = v819;
      v3593[1] = v818;
      if ((_BYTE)v819)
      {
        v821 = sub_1C47F37A0((unsigned __int8 *)v3593);
        v824 = 0;
        v823 = 0;
      }
      else
      {
        v820 = llvm::EVT::getEVT(v818[3], 0, v235);
        v821 = v820;
        v823 = v822;
        v824 = v820 & 0xFFFFFFFFFFFFFF00;
      }
      v3593[0] = &v3594;
      v3593[1] = (void *)0x400000000;
      v2044 = *(unsigned __int8 **)(v9 + 64);
      *(_QWORD *)&v3623 = v2044;
      if (v2044)
        llvm::MetadataTracking::track((uint64_t)&v3623, v2044, 2);
      DWORD2(v3623) = *(_DWORD *)(v9 + 60);
      v2045 = sub_1C612FE00((llvm::EVT *)v3608, (const char *)v2044);
      if (v2045)
      {
        v2048 = 0;
        v2049 = (llvm *)(v824 | v821);
        v3479 = v2045;
        v2047 = v3552;
        do
        {
          v2050 = *(_QWORD *)(v2047 + 16);
          v2051 = sub_1C6366AB4(v2050, v2048, (const llvm::APInt *)&v3623, (llvm *)5, 0, 0, 0);
          v2054 = 0;
          v2055 = *(_QWORD *)(v2050 + 832);
          if (v2055)
            v2054 = *(_WORD *)(v2055 + 8);
          v2056 = sub_1C5D56C70(v2050, 148, (const llvm::APInt *)&v3623, v2049, v823, v3530, v3514, v2053, (uint64_t)v2051, v2052, v2054);
          v2058 = v2057;
          v2059 = *(_QWORD *)(v2047 + 16);
          v2060 = sub_1C6366AB4(v2059, v2048, (const llvm::APInt *)&v3623, (llvm *)5, 0, 0, 0);
          v2063 = 0;
          v2064 = *(_QWORD *)(v2059 + 832);
          if (v2064)
            v2063 = *(_WORD *)(v2064 + 8);
          v2067 = sub_1C5D56C70(v2059, 148, (const llvm::APInt *)&v3623, v2049, v823, v3498, v3486, v2062, (uint64_t)v2060, v2061, v2063);
          v2068 = *(_QWORD *)(v3552 + 16);
          v2069 = *(_QWORD *)(v9 + 32);
          v2070 = *(_QWORD *)(v2069 + 80);
          v2071 = *(_QWORD *)(v2069 + 88);
          v2072 = *(_QWORD *)(v2068 + 832);
          if (v2072)
            LOWORD(v2072) = *(_WORD *)(v2072 + 8);
          v2074 = sub_1C5D58E08(v2068, (const char *)0xC1, (const llvm::APInt *)&v3623, (llvm *)5, 0, (uint64_t)v2056, v2058, v2066, (uint64_t)v2067, v2065, v2070, v2071, SHIDWORD(v2071), v2072);
          v2075 = 0;
          v2076 = *(_QWORD *)(v3552 + 16);
          v2077 = *(_QWORD *)(v2076 + 832);
          if (v2077)
            v2075 = *(_WORD *)(v2077 + 8);
          v2078 = sub_1C5D52060(v2076, 201, (const llvm::APInt *)&v3623, (llvm *)2, 0, (uint64_t)v2074, v2073, v2075);
          v2080 = v2079;
          v2047 = v3552;
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2056);
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2067);
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2074);
          sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v2078);
          v2081 = LODWORD(v3593[1]);
          if (LODWORD(v3593[1]) >= (unint64_t)HIDWORD(v3593[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3593, (uint64_t)&v3594, LODWORD(v3593[1]) + 1, 16);
            v2081 = LODWORD(v3593[1]);
          }
          v2082 = (uint64_t **)((char *)v3593[0] + 16 * v2081);
          *v2082 = v2078;
          v2082[1] = v2080;
          v2046 = ++LODWORD(v3593[1]);
          ++v2048;
        }
        while (v3479 != v2048);
      }
      else
      {
        v2046 = v3593[1];
        v2047 = v3552;
      }
      v1271 = *(_QWORD *)(v2047 + 16);
      v1265 = (llvm *)v3608[0];
      v1266 = v3608[1];
      v1267 = (uint64_t *)v3593[0];
      v1268 = v2046;
      v2083 = *(_QWORD *)(v1271 + 832);
      if (v2083)
        v1270 = *(unsigned __int16 *)(v2083 + 8);
      else
        v1270 = 0;
      goto LABEL_1360;
    case 0xC9:
      v271 = *(uint64_t **)(v9 + 32);
      v273 = *v271;
      v272 = v271[1];
      v274 = *(unsigned __int16 *)(*v271 + 24);
      if (((v274 - 56) < 3 || v274 == 175) && sub_1C48081E0(v273, v272, a3))
      {
        v275 = *(_QWORD *)(v9 + 40);
        v276 = *(llvm **)v275;
        v277 = *(_QWORD *)(v275 + 8);
        v278 = *(_QWORD *)(a3 + 16);
        v279 = *(uint64_t **)(v273 + 32);
        v280 = *v279;
        v281 = v279[1];
        v282 = *(_QWORD *)(v278 + 832);
        if (v282)
          v283 = *(_WORD *)(v282 + 8);
        else
          v283 = 0;
        v798 = sub_1C5D52060(v278, 201, (const llvm::APInt *)&v3588, v276, v277, v280, v281, v283);
        v800 = v799;
        v801 = *(_QWORD *)(v3552 + 16);
        v802 = *(_QWORD *)(v273 + 32);
        v803 = *(_QWORD *)(v802 + 40);
        v804 = *(_QWORD *)(v802 + 48);
        v805 = *(_QWORD *)(v801 + 832);
        if (v805)
          v806 = *(_WORD *)(v805 + 8);
        else
          v806 = 0;
        v807 = sub_1C5D52060(v801, 201, (const llvm::APInt *)&v3588, v276, v277, v803, v804, v806);
        v809 = v808;
        sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v798);
        sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v807);
        v326 = *(_QWORD *)(v3552 + 16);
        v333 = *(unsigned __int16 *)(v273 + 24);
        v810 = *(_QWORD *)(v326 + 832);
        if (v810)
          LOWORD(v810) = *(_WORD *)(v810 + 8);
        v3434 = v809;
        v3436 = v810;
        v3433 = (uint64_t)v807;
        v334 = (uint64_t)v276;
        v811 = v277;
        v328 = v798;
LABEL_907:
        v329 = v800;
        goto LABEL_1650;
      }
      v606 = **(_QWORD **)(v9 + 40);
      if (**(_QWORD **)(v9 + 40) == 5)
      {
        if (*(_BYTE *)(*(_QWORD *)(v273 + 40) + 16 * v272) == 6 && *(_WORD *)(v273 + 24) == 216)
        {
          v768 = **(_QWORD **)(v273 + 32);
          if (*(_WORD *)(v768 + 24) == 146 && **(_BYTE **)(v768 + 40) == 49)
          {
            v444 = *(_DWORD **)(v768 + 32);
            goto LABEL_789;
          }
        }
      }
      else if ((_DWORD)v606 == 4)
      {
        v607 = *(unsigned __int8 *)(*(_QWORD *)(v273 + 40) + 16 * v272);
        if (v607 == 5)
        {
          v1008 = *(unsigned __int16 *)(v273 + 24);
          if (v1008 == 396)
          {
            if ((sub_1C48081E0(v273, v272, a3) & 1) != 0)
            {
              v33 = *(_QWORD **)(a3 + 16);
              v1308 = *(uint64_t **)(v273 + 32);
              v32 = *v1308;
              v34 = v1308[1];
              v1309 = v33[104];
              if (v1309)
                v36 = *(_WORD *)(v1309 + 8);
              else
                v36 = 0;
              v896 = 396;
              goto LABEL_2397;
            }
            v606 = **(unsigned __int8 **)(v9 + 40);
          }
          else if (v1008 == 395)
          {
            v33 = *(_QWORD **)(a3 + 16);
            v1009 = *(uint64_t **)(v273 + 32);
            v32 = *v1009;
            v34 = v1009[1];
            v1010 = v33[104];
            if (v1010)
              v36 = *(_WORD *)(v1010 + 8);
            else
              v36 = 0;
            v896 = 395;
            goto LABEL_2397;
          }
        }
        else if (v607 == 6 && *(_WORD *)(v273 + 24) == 216)
        {
          v608 = **(_QWORD **)(v273 + 32);
          if (*(_WORD *)(v608 + 24) == 146 && **(_BYTE **)(v608 + 40) == 49)
          {
            v33 = *(_QWORD **)(a3 + 16);
            v609 = *(uint64_t **)(v608 + 32);
            v32 = *v609;
            v34 = v609[1];
            v610 = v33[104];
            if (v610)
              v36 = *(_WORD *)(v610 + 8);
            else
              v36 = 0;
            v896 = 201;
LABEL_2397:
            v898 = 4;
            goto LABEL_1334;
          }
        }
      }
      if (v606 == 4
        && *(_BYTE *)(*(_QWORD *)(v273 + 40) + 16 * v272) == 5
        && *(_WORD *)(v273 + 24) == 46
        && sub_1C48081E0(v273, v272, a3))
      {
        v1727 = *(_QWORD *)(**(_QWORD **)(v273 + 32) + 80);
        v1728 = (_QWORD *)(v1727 + 24);
        if (*(_DWORD *)(v1727 + 32) >= 0x41u)
          v1728 = (_QWORD *)*v1728;
        v1729 = *(_DWORD *)v1728;
        if (*(_DWORD *)v1728 == 2579 || v1729 == 2488)
        {
          *(_QWORD *)&v3590 = sub_1C490006C(1, v1729, v273, v272, *(_QWORD **)(v3552 + 16));
          *((_QWORD *)&v3590 + 1) = v1730;
          if (v1729 == 2488 || v1729 == 2579)
            goto LABEL_2117;
        }
      }
      if (**(_BYTE **)(v9 + 40) != 5
        || *(_BYTE *)(*(_QWORD *)(v273 + 40) + 16 * v272) != 6
        || *(_WORD *)(v273 + 24) != 177)
      {
        goto LABEL_2116;
      }
      v1731 = *(uint64_t **)(v273 + 32);
      v1732 = v1731[5];
      v1733 = *(unsigned __int16 *)(v1732 + 24);
      if (v1733 != 35 && v1733 != 11)
        goto LABEL_2116;
      v1735 = *(_QWORD *)(v1732 + 80);
      v1736 = (_QWORD *)(v1735 + 24);
      if (*(_DWORD *)(v1735 + 32) >= 0x41u)
        v1736 = (_QWORD *)*v1736;
      if (*v1736 != 32)
        goto LABEL_2116;
      v1737 = *v1731;
      v1738 = v1731[1];
      v1739 = sub_1C6366AB4(*(_QWORD *)(v3552 + 16), 1, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
      v1741 = v1740;
      v1742 = *(_QWORD *)(v3552 + 16);
      v1743 = *(_QWORD *)(v1742 + 832);
      if (v1743)
        v1744 = *(_WORD *)(v1743 + 8);
      else
        v1744 = 0;
      v2530 = sub_1C5D52060(v1742, 216, (const llvm::APInt *)&v3588, (llvm *)0x31, 0, v1737, v1738, v1744);
      v2532 = *(_QWORD *)(v3552 + 16);
      v2533 = *(_QWORD *)(v2532 + 832);
      if (v2533)
        LOWORD(v2533) = *(_WORD *)(v2533 + 8);
      v38 = (uint64_t)sub_1C5D56C70(v2532, 148, (const llvm::APInt *)&v3588, (llvm *)5, 0, (uint64_t)v2530, v2529, v2531, (uint64_t)v1739, v1741, v2533);
      goto LABEL_20;
    case 0xCA:
    case 0xCB:
      v25 = *(unsigned int **)(v9 + 32);
      v26 = *(_QWORD *)v25;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v25 + 40) + 16 * v25[2]) != 5)
        goto LABEL_2116;
      v27 = *(uint64_t **)(v9 + 40);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(unsigned __int16 *)(v26 + 24);
      if (v30 == 171)
      {
        v688 = *(uint64_t **)(v26 + 32);
        v689 = v688[5];
        v690 = *(unsigned __int16 *)(v689 + 24);
        if (v690 != 35 && v690 != 11)
          goto LABEL_2116;
        v692 = *(_QWORD *)(v689 + 80);
        v693 = (_QWORD *)(v692 + 24);
        if (*(_DWORD *)(v692 + 32) >= 0x41u)
          v693 = (_QWORD *)*v693;
        if (*v693 != 0xFFFFLL)
          goto LABEL_2116;
        v694 = *(_QWORD **)(a3 + 16);
        v695 = *v688;
        v696 = v688[1];
        v697 = v694[104];
        if (v697)
          v698 = *(_WORD *)(v697 + 8);
        else
          v698 = 0;
        v32 = (uint64_t)sub_1C5D52060(*(_QWORD *)(a3 + 16), 201, (const llvm::APInt *)&v3588, (llvm *)4, 0, v695, v696, v698);
        v34 = v1110;
        v1111 = v694[104];
        if (v1111)
          v36 = *(_WORD *)(v1111 + 8);
        else
          v36 = 0;
        v33 = v694;
      }
      else
      {
        if (v30 != 199)
          goto LABEL_2116;
        v31 = *(unsigned int **)(v26 + 32);
        v32 = *(_QWORD *)v31;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v31 + 40) + 16 * v31[2]) != 4)
          goto LABEL_2116;
        v33 = *(_QWORD **)(a3 + 16);
        v34 = *((_QWORD *)v31 + 1);
        v35 = v33[104];
        if (v35)
          v36 = *(_WORD *)(v35 + 8);
        else
          v36 = 0;
      }
      v896 = 203;
      v898 = v29;
      goto LABEL_1214;
    case 0xCC:
      v347 = *(uint64_t **)(v9 + 32);
      v349 = *v347;
      v348 = v347[1];
      v350 = *(unsigned __int16 *)(*v347 + 24);
      if (v350 == 192)
      {
        v351 = *(_QWORD **)(v349 + 32);
        v352 = v351[10];
        v353 = *(unsigned __int16 *)(v352 + 24);
        if (v353 == 35 || v353 == 11)
        {
          v355 = *(unsigned __int16 *)(v351[15] + 24);
          if (v355 == 35 || v355 == 11)
          {
            v1135 = *(_QWORD *)(a3 + 16);
            v1136 = *(void **)(v9 + 64);
            v3593[0] = v1136;
            if (v1136)
            {
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1136, 2);
              v12 = *(_DWORD *)(v9 + 60);
              v351 = *(_QWORD **)(v349 + 32);
              v352 = v351[10];
              v347 = *(uint64_t **)(v9 + 32);
            }
            LODWORD(v3593[1]) = v12;
            v1137 = *(_QWORD *)(v349 + 40) + 16 * v348;
            v1138 = *(llvm **)v1137;
            v1139 = *(_QWORD *)(v1137 + 8);
            v1140 = v351[11];
            v1141 = v347[5];
            v1142 = v347[6];
            v1143 = *(_QWORD *)(v1135 + 832);
            if (v1143)
              LOWORD(v1143) = *(_WORD *)(v1143 + 8);
            v1145 = sub_1C5D56C70(v1135, 204, (const llvm::APInt *)v3593, v1138, v1139, v352, v1140, a8, v1141, v1142, v1143);
            v1147 = v1146;
            if (v3593[0])
              llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
            v1148 = v348;
            v1149 = *(_QWORD *)(v3552 + 16);
            v1150 = *(void **)(v9 + 64);
            v3593[0] = v1150;
            if (v1150)
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1150, 2);
            LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
            v1151 = *(_QWORD *)(v349 + 32);
            v1152 = *(_QWORD *)(v349 + 40) + 16 * v1148;
            v1153 = *(llvm **)v1152;
            v1154 = *(_QWORD *)(v1152 + 8);
            v1155 = *(_QWORD *)(v1151 + 120);
            v1156 = *(_QWORD *)(v1151 + 128);
            v1157 = *(_QWORD *)(v9 + 32);
            v1158 = *(_QWORD *)(v1157 + 40);
            v1159 = *(_QWORD *)(v1157 + 48);
            v1160 = *(_QWORD *)(v1149 + 832);
            if (v1160)
              LOWORD(v1160) = *(_WORD *)(v1160 + 8);
            v1162 = sub_1C5D56C70(v1149, 204, (const llvm::APInt *)v3593, v1153, v1154, v1155, v1156, v1144, v1158, v1159, v1160);
            v1164 = v1163;
            if (v3593[0])
              llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
            v1165 = *(_QWORD *)(v3552 + 16);
            v1166 = *(void **)(v9 + 64);
            v3593[0] = v1166;
            if (v1166)
              llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1166, 2);
            LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
            v1167 = *(uint64_t **)(v349 + 32);
            v1168 = sub_1C63698B8(v1165, (const char *)0xC0, (const llvm::APInt *)v3593, *(llvm **)(*(_QWORD *)(v349 + 40) + 16 * v1148), *(_QWORD *)(*(_QWORD *)(v349 + 40) + 16 * v1148 + 8), *v1167, v1167[1], v1161, v1167[5], v1167[6], (uint64_t)v1145, v1147, (uint64_t)v1162, v1164, v1167[20], v1167[21]);
            goto LABEL_1969;
          }
        }
      }
      if (*(_BYTE *)(v347[5] + 80) != 4)
        goto LABEL_2116;
      if (v350 == 395)
      {
        v357 = *(_QWORD *)(a3 + 16);
        v358 = *(void **)(v349 + 64);
        v3593[0] = v358;
        if (v358)
          llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v358, 2);
        LODWORD(v3593[1]) = *(_DWORD *)(v349 + 60);
        v359 = *(uint64_t **)(v349 + 32);
        v360 = *v359;
        v361 = v359[1];
        v362 = *(_QWORD *)(v357 + 832);
        if (v362)
          v363 = *(_WORD *)(v362 + 8);
        else
          v363 = 0;
        v477 = (uint64_t)sub_1C5D52060(v357, 395, (const llvm::APInt *)v3593, (llvm *)4, 0, v360, v361, v363);
        v479 = v902;
        if (v3593[0])
          llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
        v903 = *(_QWORD *)(a3 + 16);
      }
      else
      {
        if (*(int *)(a3 + 8) < 3 || **(_BYTE **)(v9 + 40) != 5)
          goto LABEL_2116;
        v758 = *(_QWORD *)(a3 + 16);
        v759 = *(void **)(v9 + 64);
        v3593[0] = v759;
        if (v759)
        {
          llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v759, 2);
          v12 = *(_DWORD *)(v9 + 60);
        }
        LODWORD(v3593[1]) = v12;
        v760 = *(_QWORD *)(v758 + 832);
        if (v760)
          v761 = *(_WORD *)(v760 + 8);
        else
          v761 = 0;
        v1298 = sub_1C5D52060(v758, 201, (const llvm::APInt *)v3593, (llvm *)4, 0, v349, v348, v761);
LABEL_1957:
        v477 = (uint64_t)v1298;
        v479 = v1299;
        if (v3593[0])
          llvm::MetadataTracking::untrack((uint64_t)v3593, (unsigned __int8 *)v3593[0]);
        v903 = *(_QWORD *)(v3552 + 16);
      }
      v1900 = *(void **)(v9 + 64);
      v3593[0] = v1900;
      if (v1900)
        llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v1900, 2);
      LODWORD(v3593[1]) = *(_DWORD *)(v9 + 60);
      v1901 = *(_QWORD *)(v903 + 832);
      if (v1901)
        v247 = *(_WORD *)(v1901 + 8);
      else
        v247 = 0;
      v769 = v903;
      v770 = 198;
LABEL_1966:
      v241 = 5;
      goto LABEL_1967;
    case 0xD0:
      v248 = **(_QWORD **)(v9 + 32);
      if (*(_WORD *)(v248 + 24) != 46)
        goto LABEL_2116;
      goto LABEL_335;
    case 0xD1:
      v248 = **(_QWORD **)(v9 + 32);
      if (*(_WORD *)(v248 + 24) != 46)
        goto LABEL_2116;
LABEL_335:
      v364 = *(_QWORD *)(v9 + 40);
      v365 = *(_QWORD *)(**(_QWORD **)(v248 + 32) + 80);
      v366 = (_QWORD *)(v365 + 24);
      if (*(_DWORD *)(v365 + 32) >= 0x41u)
        v366 = (_QWORD *)*v366;
      v367 = *(llvm **)v364;
      v368 = *(_QWORD *)(v364 + 8);
      if (*(_DWORD *)v366 == 2445)
      {
        v369 = 47;
      }
      else
      {
        if (*(_DWORD *)v366 != 2446)
          goto LABEL_2116;
        v369 = 48;
      }
      v685 = *(_QWORD *)(a3 + 16);
      v32 = sub_1C5D428B0(v685, v369, v367, v368);
      v34 = v686;
      v687 = *(_QWORD *)(v685 + 832);
      if (v687)
        v36 = *(_WORD *)(v687 + 8);
      else
        v36 = 0;
      v33 = (_QWORD *)v685;
      goto LABEL_1328;
    case 0xD4:
      v319 = *(_QWORD *)(v9 + 32);
      v320 = *(_QWORD *)v319;
      v321 = *(_QWORD *)(*(_QWORD *)v319 + 48);
      if (!v321)
        goto LABEL_2116;
      v322 = 1;
      do
      {
        if (*(_DWORD *)(v321 + 8) == *(_DWORD *)(v319 + 8))
        {
          if (!v322)
            goto LABEL_2116;
          --v322;
        }
        v321 = *(_QWORD *)(v321 + 32);
      }
      while (v321);
      if (v322)
        goto LABEL_2116;
      v323 = (const char *)*(unsigned __int16 *)(v320 + 24);
      v324 = *(_QWORD *)(v9 + 40);
      v325 = *(llvm **)v324;
      v84 = *(_QWORD *)(v324 + 8);
      if ((v323 & 0xFFFFFFFD) == 0x191)
      {
        v326 = *(_QWORD *)(v3552 + 16);
        v327 = *(_QWORD *)(v320 + 32);
        v328 = *(uint64_t **)v327;
        v329 = *(_QWORD *)(v327 + 8);
        v330 = *(_QWORD *)(v327 + 40);
        v331 = *(_QWORD *)(v327 + 48);
        v332 = *(_QWORD *)(v326 + 832);
        if (v332)
          LOWORD(v332) = *(_WORD *)(v332 + 8);
        v3434 = v331;
        v3436 = v332;
        v3433 = v330;
        v333 = *(unsigned __int16 *)(v320 + 24);
        v334 = (uint64_t)v325;
        goto LABEL_1649;
      }
      if (((_DWORD)v323 - 402) > 0x12)
        goto LABEL_1251;
      v976 = 1 << ((_BYTE)v323 + 110);
      if ((v976 & 0x58000) != 0)
        goto LABEL_1253;
      if ((v976 & 5) != 0)
      {
        v977 = *(_QWORD *)(v3552 + 16);
        v978 = *(uint64_t **)(v320 + 32);
        v979 = *v978;
        v980 = v978[1];
        v981 = v978[5];
        v982 = v978[6];
        v983 = v978[10];
        v984 = v978[11];
        v985 = *(_QWORD *)(v977 + 832);
        if (v985)
          LOWORD(v985) = *(_WORD *)(v985 + 8);
        v38 = (uint64_t)sub_1C5D58E08(v977, v323, (const llvm::APInt *)&v3588, v325, v84, v979, v980, a8, v981, v982, v983, v984, SHIDWORD(v984), v985);
        goto LABEL_20;
      }
LABEL_1251:
      if (((_DWORD)v323 - 231) > 0xA || ((1 << ((_BYTE)v323 + 25)) & 0x409) == 0)
        goto LABEL_1255;
LABEL_1253:
      v1174 = **(_QWORD **)(v320 + 32);
      if (*(_WORD *)(v1174 + 24) == 215)
      {
        v33 = *(_QWORD **)(v3552 + 16);
        v1175 = *(uint64_t **)(v1174 + 32);
        v32 = *v1175;
        v34 = v1175[1];
        v36 = *(_WORD *)(v320 + 72);
LABEL_2028:
        v896 = (uint64_t)v323;
        v898 = (uint64_t)v325;
        goto LABEL_2029;
      }
LABEL_1255:
      if (((unsigned __int16)v323 & 0xFFFE) == 0xDE && sub_1C48EFEC4(v9))
      {
        v1177 = *(_QWORD *)(v3552 + 16);
        v1178 = *(_QWORD *)(v1177 + 832);
        if (v1178)
          LOWORD(v1178) = *(_WORD *)(v1178 + 8);
        v32 = (uint64_t)sub_1C5D56C70(v1177, 212, (const llvm::APInt *)&v3588, v325, v84, **(_QWORD **)(v320 + 32), *(_QWORD *)(*(_QWORD *)(v320 + 32) + 8), v1176, *(_QWORD *)(v319 + 40), *(_QWORD *)(v319 + 48), v1178);
        v34 = v1179;
        v33 = *(_QWORD **)(v3552 + 16);
LABEL_1368:
        v1276 = v33[104];
        if (v1276)
          v36 = *(_WORD *)(v1276 + 8);
        else
          v36 = 0;
        goto LABEL_2028;
      }
      if ((_DWORD)v323 != 428 && (_DWORD)v323 != 192 || !*(_DWORD *)(v3552 + 8))
      {
        if (((unsigned __int16)v323 & 0xFFFE) != 0xCA)
          goto LABEL_2116;
        v33 = *(_QWORD **)(v3552 + 16);
        v1275 = *(uint64_t **)(v320 + 32);
        v32 = *v1275;
        v34 = v1275[1];
        goto LABEL_1368;
      }
      v2498 = *(_QWORD *)(v320 + 32);
      v3507 = *(uint64_t **)(v2498 + 40);
      v3522 = *(uint64_t **)v2498;
      v3481 = *(_QWORD *)(v2498 + 48);
      v3493 = *(_QWORD *)(v2498 + 8);
      v2499 = *(_QWORD *)(v2498 + 80);
      v2500 = *(_QWORD *)(v2498 + 88);
      v2501 = *(_QWORD *)(v2498 + 120);
      v3542 = *(_QWORD *)(v2498 + 128);
      v2502 = *(_QWORD *)(v2498 + 160);
      v2503 = sub_1C6366AB4(*(_QWORD *)(v3552 + 16), 0, (const llvm::APInt *)&v3588, (llvm *)5, 0, 0, 0);
      v3465 = v2504;
      v3473 = (uint64_t)v2503;
      if (sub_1C48EFDEC(v320))
        v2505 = 2;
      else
        v2505 = 1;
      v2506 = *(unsigned __int16 *)(v2502 + 72);
      v2507 = *(_QWORD **)(v3552 + 16);
      v2508 = *(_WORD *)(*v2507 + 1020) & 1 | ((v2506 & 0x10) != 0);
      if ((~v2506 & 0x3C0) != 0)
        v2509 = 0;
      else
        v2509 = (v2506 >> 10) & 1;
      v2510 = *(_WORD *)(*v2507 + 1020) & 1 | v2509;
      if ((_DWORD)v323 != 192)
        v2510 = *(_WORD *)(*v2507 + 1020) & 1;
      if ((_DWORD)v323 == 428)
        v2510 = v2508;
      if (v2510
        && ((uint64_t *)v2499 == v3522
         && (_DWORD)v2500 == (_DWORD)v3493
         && (uint64_t *)v2501 == v3507
         && (_DWORD)v3542 == (_DWORD)v3481
         || (uint64_t *)v2499 == v3507
         && (_DWORD)v3481 == (_DWORD)v2500
         && (uint64_t *)v2501 == v3522
         && (_DWORD)v3542 == (_DWORD)v3493)
        && (v2511 = sub_1C48EEC38(v2499, v2500, 1, 1), sub_1C48EEC38(v2501, v3542, 1, 1) + v2511 >= v2505))
      {
        v3351 = v2507[104];
        if (v3351)
          LOWORD(v3351) = *(_WORD *)(v3351 + 8);
        v3522 = sub_1C5D56C70((uint64_t)v2507, 212, (const llvm::APInt *)&v3588, v325, v84, (uint64_t)v3522, v3493, v2512, v3473, v3465, v3351);
        v3354 = v3353;
        v3355 = *(_QWORD *)(v3552 + 16);
        v3356 = *(_QWORD *)(v3355 + 832);
        if (v3356)
          LOWORD(v3356) = *(_WORD *)(v3356 + 8);
        v3507 = sub_1C5D56C70(v3355, 212, (const llvm::APInt *)&v3588, v325, v84, (uint64_t)v3507, v3481, v3352, v3473, v3465, v3356);
        v3359 = *(_QWORD *)(v3552 + 16);
        v3360 = *(_QWORD *)(v3359 + 832);
        if (v3360)
          LOWORD(v3360) = *(_WORD *)(v3360 + 8);
        LODWORD(v3493) = v3354;
        LODWORD(v3481) = v3357;
        v2524 = sub_1C5D56C70(v3359, 212, (const llvm::APInt *)&v3588, v325, v84, v2499, v2500, v3358, v3473, v3465, v3360);
      }
      else
      {
        if (*(_WORD *)(v2499 + 24) == 222)
        {
          v2513 = *(_QWORD *)(v2499 + 32);
          if (*(_QWORD *)v2513 == v2501 && *(_DWORD *)(v2513 + 8) == (_DWORD)v3542)
          {
            v2514 = *(_QWORD *)(v2499 + 48);
            if (v2514)
            {
              v2515 = 1;
              do
              {
                if (*(_DWORD *)(v2514 + 8) == (_DWORD)v2500)
                {
                  if (!v2515)
                    goto LABEL_2619;
                  --v2515;
                }
                v2514 = *(_QWORD *)(v2514 + 32);
              }
              while (v2514);
              if (!v2515 && sub_1C48EEC38(v2501, v3542, 1, 1))
              {
                v3420 = v2507[104];
                if (v3420)
                  LOWORD(v3420) = *(_WORD *)(v3420 + 8);
                v3365 = sub_1C5D56C70((uint64_t)v2507, 212, (const llvm::APInt *)&v3588, v325, v84, v2501, v3542, v2516, v3473, v3465, v3420);
                v3542 = v3542 & 0xFFFFFFFF00000000 | v3421;
                v3422 = *(_QWORD *)(v3552 + 16);
                v3423 = *(_QWORD *)(v3422 + 832);
                if (v3423)
                  v3424 = *(_WORD *)(v3423 + 8);
                else
                  v3424 = 0;
                v3361 = sub_1C5D52060(v3422, 222, (const llvm::APInt *)&v3588, v325, v84, (uint64_t)v3365, v3542, v3424);
                LODWORD(v3362) = v3430;
                goto LABEL_3091;
              }
            }
          }
        }
LABEL_2619:
        if (*(_WORD *)(v2501 + 24) == 222)
        {
          v2517 = *(_QWORD *)(v2501 + 32);
          if (*(_QWORD *)v2517 == v2499 && *(_DWORD *)(v2517 + 8) == (_DWORD)v2500)
          {
            v2518 = *(_QWORD *)(v2501 + 48);
            if (v2518)
            {
              v2519 = 1;
              do
              {
                if (*(_DWORD *)(v2518 + 8) == (_DWORD)v3542)
                {
                  if (!v2519)
                    goto LABEL_2630;
                  --v2519;
                }
                v2518 = *(_QWORD *)(v2518 + 32);
              }
              while (v2518);
              if (!v2519 && sub_1C48EEC38(v2499, v2500, 1, 1))
              {
                v3425 = v2507[104];
                if (v3425)
                  LOWORD(v3425) = *(_WORD *)(v3425 + 8);
                v3361 = sub_1C5D56C70((uint64_t)v2507, 212, (const llvm::APInt *)&v3588, v325, v84, v2499, v2500, v2520, v3473, v3465, v3425);
                v3362 = v2500 & 0xFFFFFFFF00000000 | v3426;
                v3427 = *(_QWORD *)(v3552 + 16);
                v3428 = *(_QWORD *)(v3427 + 832);
                if (v3428)
                  v3429 = *(_WORD *)(v3428 + 8);
                else
                  v3429 = 0;
                v3365 = sub_1C5D52060(v3427, 222, (const llvm::APInt *)&v3588, v325, v84, (uint64_t)v3361, v3362, v3429);
                LODWORD(v3542) = v3431;
                goto LABEL_3091;
              }
            }
          }
        }
LABEL_2630:
        v2521 = sub_1C48EEC38(v2499, v2500, 1, 0);
        if (sub_1C48EEC38(v2501, v3542, 1, 0) + v2521 < v2505)
          goto LABEL_2116;
        v2523 = v2507[104];
        if (v2523)
          LOWORD(v2523) = *(_WORD *)(v2523 + 8);
        v2524 = sub_1C5D56C70((uint64_t)v2507, 212, (const llvm::APInt *)&v3588, v325, v84, v2499, v2500, v2522, v3473, v3465, v2523);
      }
      v3361 = v2524;
      LODWORD(v3362) = v2525;
      v3363 = *(_QWORD *)(v3552 + 16);
      v3364 = *(_QWORD *)(v3363 + 832);
      if (v3364)
        LOWORD(v3364) = *(_WORD *)(v3364 + 8);
      v3365 = sub_1C5D56C70(v3363, 212, (const llvm::APInt *)&v3588, v325, v84, v2501, v3542, v2526, v3473, v3465, v3364);
      LODWORD(v3542) = v3366;
LABEL_3091:
      sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v3361);
      sub_1C5C5B004(*(_QWORD *)v3552, (uint64_t)v3365);
      v38 = (uint64_t)sub_1C63698B8(*(_QWORD *)(v3552 + 16), v323, (const llvm::APInt *)&v3588, v325, v84, (uint64_t)v3522, v3493, v3367, (uint64_t)v3507, v3481, (uint64_t)v3361, v3362, (uint64_t)v3365, v3542, *(_QWORD *)(*(_QWORD *)(v320 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v320 + 32) + 168));
      goto LABEL_20;
    case 0xD7:
      v335 = *(uint64_t **)(v9 + 40);
      v336 = **(_QWORD **)(v9 + 32);
      v337 = *(uint64_t **)(v336 + 32);
      v338 = *v337;
      v339 = *v335;
      v28 = v335[1];
      v340 = *(_QWORD **)(a3 + 16);
      v341 = *(_WORD *)(*v340 + 1020);
      v342 = *(unsigned __int16 *)(v336 + 24);
      if ((_DWORD)v342 != 212)
        goto LABEL_912;
      if (*(_WORD *)(v338 + 24) == 395)
        goto LABEL_909;
      v343 = *(_QWORD *)(v9 + 48);
      if (!v343)
        goto LABEL_908;
      do
      {
        v344 = *(_QWORD *)(v343 + 16);
        v345 = *(unsigned __int16 *)(v344 + 24);
        if (v345 == 428 || v345 == 192)
        {
          v346 = *(_QWORD *)(v344 + 32);
          if (*(_QWORD *)(v346 + 80) == v9 || *(_QWORD *)(v346 + 120) == v9)
            goto LABEL_909;
        }
        else if (!sub_1C61415C4(v345))
        {
          goto LABEL_909;
        }
        v343 = *(_QWORD *)(v343 + 32);
      }
      while (v343);
LABEL_908:
      if (sub_1C48EEC38(**(_QWORD **)(v338 + 32), *(_QWORD *)(*(_QWORD *)(v338 + 32) + 8), 1, 0))
        goto LABEL_912;
LABEL_909:
      if ((v341 & 1) != 0 || (~*(unsigned __int16 *)(v338 + 72) & 0x7C0) == 0)
      {
        v726 = *(_OWORD *)v337;
        goto LABEL_1601;
      }
LABEL_912:
      if ((v342 & 0xFFFE) != 0xDE || *(_WORD *)(v338 + 24) != 212)
        goto LABEL_2116;
      for (k = *(_QWORD *)(v9 + 48); k; k = *(_QWORD *)(k + 32))
      {
        v813 = *(_QWORD *)(k + 16);
        v814 = *(unsigned __int16 *)(v813 + 24);
        if (v814 == 428 || v814 == 192)
        {
          v815 = *(_QWORD *)(v813 + 32);
          if (*(_QWORD *)(v815 + 80) == v9 || *(_QWORD *)(v815 + 120) == v9)
            goto LABEL_990;
        }
        else if (!sub_1C61415C4(v814))
        {
          goto LABEL_990;
        }
      }
      if (sub_1C48EEC38(**(_QWORD **)(v338 + 32), *(_QWORD *)(*(_QWORD *)(v338 + 32) + 8), 1, 0))
        goto LABEL_2116;
LABEL_990:
      v36 = *(_WORD *)(v336 + 72);
      if ((v341 & 1) == 0 && (v36 & 0x7C0) != 0x7C0)
        goto LABEL_2116;
      v901 = *(uint64_t **)(v338 + 32);
      v32 = *v901;
      v34 = v901[1];
      v33 = v340;
      v896 = v342;
LABEL_1181:
      v898 = v339;
LABEL_1214:
      v899 = (void *)v28;
      goto LABEL_2030;
    case 0xD8:
      v236 = **(_QWORD **)(v9 + 32);
      if (*(_WORD *)(v236 + 24) != 395)
        goto LABEL_2116;
      v237 = *(_QWORD *)(a3 + 16);
      v238 = *(void **)(v236 + 64);
      v3593[0] = v238;
      v239 = v236;
      if (v238)
      {
        llvm::MetadataTracking::track((uint64_t)v3593, (unsigned __int8 *)v238, 2);
        v239 = **(_QWORD **)(v9 + 32);
      }
      LODWORD(v3593[1]) = *(_DWORD *)(v236 + 60);
      v240 = *(uint64_t **)(v9 + 40);
      v241 = *v240;
      v242 = v240[1];
      v243 = *(uint64_t **)(v239 + 32);
      v244 = *v243;
      v245 = v243[1];
      v246 = *(_QWORD *)(v237 + 832);
      if (v246)
        v247 = *(_WORD *)(v246 + 8);
      else
        v247 = 0;
      v769 = v237;
      v770 = 395;
      goto LABEL_1968;
    default:
      goto LABEL_2116;
  }
}

_QWORD *sub_1C490006C(int a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  BOOL v40;
  int v41;
  int v42;
  unsigned int ExtendedSizeInBits;
  const char *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  const char *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  int v66;
  char *v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 **v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  const char *v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  unsigned __int8 v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  int v103;
  _BOOL4 v104;
  unsigned __int8 *v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  char v120;
  unsigned __int8 *v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  unsigned int v127[8];

  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(_QWORD *)(v9 + 48);
  v12 = *(unsigned __int16 *)(v10 + 24);
  if (v12 > 0xC8)
  {
    if (v12 == 201)
    {
      v13 = **(_QWORD **)(v10 + 32);
      if (*(_WORD *)(v13 + 24) == 193)
        goto LABEL_35;
    }
  }
  else
  {
    v13 = v10;
    if (v12 == 193)
      goto LABEL_35;
    if (v12 == 11 || v12 == 35)
    {
      if (a1)
        v14 = 5011;
      else
        v14 = 5002;
      if (a1)
        v15 = 5351;
      else
        v15 = 5342;
      if (a2 == 2488)
        v16 = v14;
      else
        v16 = v15;
      v17 = *(unsigned __int8 **)(a3 + 64);
      *(_QWORD *)&v116 = v17;
      if (v17)
      {
        llvm::MetadataTracking::track((uint64_t)&v116, v17, 2);
        v10 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 40);
      }
      v18 = *(_DWORD *)(a3 + 60);
      DWORD2(v116) = v18;
      LODWORD(v107) = 24;
      v19 = *(_QWORD *)(v10 + 80);
      v20 = (_QWORD *)(v19 + 24);
      if (*(_DWORD *)(v19 + 32) >= 0x41u)
        v20 = (_QWORD *)*v20;
      v127[0] = *v20;
      *(_QWORD *)&v111 = v116;
      if ((_QWORD)v116)
      {
        llvm::MetadataTracking::track((uint64_t)&v111, (unsigned __int8 *)v116, 2);
        v18 = DWORD2(v116);
      }
      DWORD2(v111) = v18;
      LODWORD(v123) = 0;
      if (a1)
        v21 = 4;
      else
        v21 = 5;
      v22 = sub_1C6142C10((uint64_t)a5, v16, (uint64_t)&v111, v21, 0, (unsigned int *)&v107, v127, (int *)&v123);
      if ((_QWORD)v111)
        llvm::MetadataTracking::untrack((uint64_t)&v111, (unsigned __int8 *)v111);
      if ((_QWORD)v116)
        llvm::MetadataTracking::untrack((uint64_t)&v116, (unsigned __int8 *)v116);
      return v22;
    }
  }
  v13 = v10;
  if (**(_BYTE **)(v10 + 40) != 2)
  {
LABEL_35:
    v26 = *(uint64_t **)(v13 + 32);
    v28 = *v26;
    v27 = v26[1];
    v30 = v26[5];
    v29 = v26[6];
    if (a1)
      v31 = 4;
    else
      v31 = 5;
    v96 = v31;
    v97 = v27;
    v32 = *(unsigned __int8 **)(a3 + 64);
    v123 = v32;
    if (v32)
      llvm::MetadataTracking::track((uint64_t)&v123, v32, 2);
    v33 = *(_DWORD *)(a3 + 60);
    v124 = v33;
    v34 = *(_QWORD **)(v28 + 40);
    v35 = *v34;
    if (*v34)
    {
      v36 = (v35 - 120) >= 0x20 && (v35 - 2) >= 6;
      if (v36 && (v35 - 15) >= 0x3C)
        goto LABEL_60;
    }
    else
    {
      v37 = v34[1];
      if ((*(_DWORD *)(v37 + 8) & 0xFE) == 0x12)
        v38 = *(unsigned __int8 *)(**(_QWORD **)(v37 + 16) + 8);
      else
        v38 = *(_DWORD *)(v37 + 8);
      if (v38 != 13)
        goto LABEL_60;
    }
    if ((*v34 & 0xFELL) != 4)
    {
      v121 = v123;
      if (v123)
      {
        llvm::MetadataTracking::track((uint64_t)&v121, v123, 2);
        v33 = v124;
      }
      v122 = v33;
      v22 = sub_1C4913950(a1, a2, v10, v11, (uint64_t)a5, (const llvm::APInt *)&v121);
      if (v121)
        llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
      goto LABEL_56;
    }
LABEL_60:
    v40 = 1;
    sub_1C48DC710((uint64_t)&v116, (uint64_t)a5, v28, v97, 0, 1, 1);
    sub_1C48DC710((uint64_t)&v111, (uint64_t)a5, v30, v29, 0, 1, 1);
    if (!v120 && !v115 && (v118 & 0xFFFFFFFD) != 5)
      v40 = (v113 & 0xFFFFFFFD) == 5;
    v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 80) + 76);
    if ((v118 | 2) == 2)
    {
      sub_1C4913C18(v116, *((uint64_t *)&v116 + 1), (uint64_t)&v116, (uint64_t)&v117, (unsigned int *)&v116, (uint64_t)a5);
      v118 = 1;
      v42 = *(unsigned __int16 *)(v116 + 24);
      if ((_QWORD)v116 && v42 == 45)
      {
        if (*(_DWORD *)(v116 + 80) == 64)
          v118 = 3;
        v119 = dword_1C6609098[*(int *)(v116 + 76) - 1];
      }
      else
      {
        if (v42 == 35)
          v118 = 6;
        v107 = *(_OWORD *)(*(_QWORD *)(v116 + 40) + 16 * DWORD2(v116));
        if ((_BYTE)v107)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v107);
        else
          ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v107);
        v45 = ExtendedSizeInBits;
        if ((_DWORD)v44 == 1)
        v119 = v45;
      }
    }
    if ((v113 | 2) == 2)
    {
      sub_1C4913C18(v111, *((uint64_t *)&v111 + 1), (uint64_t)&v111, (uint64_t)&v112, (unsigned int *)&v111, (uint64_t)a5);
      v113 = 1;
      v46 = *(unsigned __int16 *)(v111 + 24);
      if ((_QWORD)v111 && v46 == 45)
      {
        if (*(_DWORD *)(v111 + 80) == 64)
          v113 = 3;
        v114 = dword_1C6609098[*(int *)(v111 + 76) - 1];
      }
      else
      {
        if (v46 == 35)
          v113 = 6;
        v107 = *(_OWORD *)(*(_QWORD *)(v111 + 40) + 16 * DWORD2(v111));
        if ((_BYTE)v107)
          v47 = sub_1C47A8C74((unsigned __int8 *)&v107);
        else
          v47 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v107);
        v49 = v47;
        if ((_DWORD)v48 == 1)
        v114 = v49;
      }
    }
    if ((v41 - 7) > 2)
    {
      v66 = sub_1C4913B54(a1, a2, (uint64_t)&v116, (uint64_t)&v111);
      LOBYTE(v127[0]) = 0;
      if (v40)
      {
        v67 = (char *)&loc_1C49006C0 + 4 * word_1C6607BE0[sub_1C4990614(v41, v127) - 1];
        __asm { BR              X10 }
      }
      v71 = v41 - 11;
      if ((v41 - 11) < 0xC && ((0xD0Du >> v71) & 1) != 0)
      {
        v41 = dword_1C6608E50[v71];
        v72 = 1;
      }
      else
      {
        v72 = 0;
      }
      v87 = sub_1C4990600(v41);
      if ((v87 & 0xF) == 4)
      {
        v87 = 0;
        v72 ^= 1u;
      }
      LODWORD(v107) = v87 | (16 * (v72 != 0));
      v98 = v123;
      if (v123)
        llvm::MetadataTracking::track((uint64_t)&v98, v123, 2);
      v99 = v124;
      v22 = sub_1C6142A38((uint64_t)a5, v66, (uint64_t)&v98, v96, 0, (unsigned int *)&v107, &v116, &v111);
      v69 = v98;
      if (!v98)
        goto LABEL_56;
      v70 = &v98;
      goto LABEL_164;
    }
    v50 = *(_WORD *)(*a5 + 1020) & 1;
    v51 = *(unsigned __int16 *)(v13 + 72);
    v52 = *(unsigned __int16 *)(v13 + 24);
    v53 = *(_WORD *)(*a5 + 1020) & 1 | ((v51 & 0x10) != 0);
    if ((~v51 & 0x3C0) != 0)
      v54 = 0;
    else
      v54 = (v51 >> 10) & 1;
    v55 = v54 | v50;
    if (v52 == 192)
      v50 = v55;
    if (v52 == 428)
      v56 = v53;
    else
      v56 = v50;
    v94 = sub_1C6366AB4((uint64_t)a5, 1, (const llvm::APInt *)&v123, (llvm *)4, 0, 0, 0);
    v95 = v57;
    v58 = sub_1C6366AB4((uint64_t)a5, 0, (const llvm::APInt *)&v123, (llvm *)4, 0, 0, 0);
    if (v56)
    {
      LODWORD(v107) = 0;
      if (v41 == 9)
      {
        v68 = sub_1C4913B54(a1, a2, (uint64_t)&v116, (uint64_t)&v111);
        v102 = v123;
        if (v123)
          llvm::MetadataTracking::track((uint64_t)&v102, v123, 2);
        v103 = v124;
        v22 = sub_1C6142A38((uint64_t)a5, v68, (uint64_t)&v102, v96, 0, (unsigned int *)&v107, &v116, &v111);
        v69 = v102;
        if (!v102)
          goto LABEL_56;
        v70 = &v102;
      }
      else
      {
        if (a1)
          v82 = 4993;
        else
          v82 = 4984;
        if (a1)
          v83 = 5333;
        else
          v83 = 5324;
        if (a2 == 2488)
          v84 = v82;
        else
          v84 = v83;
        v127[0] = 1;
        v104 = v41 == 7;
        v100 = v123;
        if (v123)
          llvm::MetadataTracking::track((uint64_t)&v100, v123, 2);
        v101 = v124;
        v22 = sub_1C6142B0C((uint64_t)a5, v84, (uint64_t)&v100, v96, 0, (unsigned int *)&v107, v127, (unsigned int *)&v104);
        v69 = v100;
        if (!v100)
          goto LABEL_56;
        v70 = &v100;
      }
      goto LABEL_164;
    }
    v60 = (uint64_t)v58;
    v61 = v59;
    if (v41 == 7)
    {
      v92 = sub_1C6367818(a5, 7u);
      v64 = sub_1C63698B8((uint64_t)a5, (const char *)0xC0, (const llvm::APInt *)&v123, (llvm *)4, 0, v28, v97, v63, v30, v29, (uint64_t)v94, v95, v60, v61, v92, v62);
    }
    else
    {
      v73 = sub_1C6367818(a5, 8u);
      v76 = sub_1C63698B8((uint64_t)a5, (const char *)0xC0, (const llvm::APInt *)&v123, (llvm *)4, 0, v28, v97, v75, v30, v29, (uint64_t)v94, v95, v60, v61, v73, v74);
      v78 = v77;
      if (v41 != 9)
      {
LABEL_117:
        sub_1C48DC710((uint64_t)&v107, (uint64_t)a5, (uint64_t)v76, v78, 0, 1, 1);
        if ((v109 | 2) == 2)
        {
          sub_1C4913C18(v107, *((uint64_t *)&v107 + 1), (uint64_t)&v107, (uint64_t)&v108, (unsigned int *)&v107, (uint64_t)a5);
          v109 = 1;
          v81 = *(unsigned __int16 *)(v107 + 24);
          if ((_QWORD)v107 && v81 == 45)
          {
            if (*(_DWORD *)(v107 + 80) == 64)
              v109 = 3;
            v110 = dword_1C6609098[*(int *)(v107 + 76) - 1];
          }
          else
          {
            if (v81 == 35)
              v109 = 6;
            *(_OWORD *)v127 = *(_OWORD *)(*(_QWORD *)(v107 + 40) + 16 * DWORD2(v107));
            if (LOBYTE(v127[0]))
              v85 = sub_1C47A8C74((unsigned __int8 *)v127);
            else
              v85 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v127);
            v88 = v85;
            if ((_DWORD)v86 == 1)
            v110 = v88;
          }
        }
        if (a1)
          v89 = 5017;
        else
          v89 = 5008;
        if (a1)
          v90 = 5357;
        else
          v90 = 5348;
        if (a2 == 2488)
          v91 = v89;
        else
          v91 = v90;
        v127[0] = 8;
        v105 = v123;
        if (v123)
          llvm::MetadataTracking::track((uint64_t)&v105, v123, 2);
        v106 = v124;
        v104 = 1;
        v22 = sub_1C6142934((uint64_t)a5, v91, (uint64_t)&v105, v96, 0, v127, &v107, (int *)&v104);
        v69 = v105;
        if (!v105)
          goto LABEL_56;
        v70 = &v105;
LABEL_164:
        llvm::MetadataTracking::untrack((uint64_t)v70, v69);
LABEL_56:
        v24 = v123;
        if (!v123)
          return v22;
        v25 = &v123;
LABEL_58:
        llvm::MetadataTracking::untrack((uint64_t)v25, v24);
        return v22;
      }
      v93 = sub_1C6367818(a5, 0x11u);
      v64 = sub_1C63698B8((uint64_t)a5, (const char *)0xC0, (const llvm::APInt *)&v123, (llvm *)4, 0, v28, v97, v80, v30, v29, (uint64_t)v94, v95, (uint64_t)v76, v78, v93, v79);
    }
    v76 = v64;
    v78 = v65;
    goto LABEL_117;
  }
  v23 = *(unsigned __int8 **)(a3 + 64);
  v125 = v23;
  if (v23)
    llvm::MetadataTracking::track((uint64_t)&v125, v23, 2);
  v126 = *(_DWORD *)(a3 + 60);
  v22 = sub_1C4913950(a1, a2, v10, v11, (uint64_t)a5, (const llvm::APInt *)&v125);
  v24 = v125;
  if (v125)
  {
    v25 = &v125;
    goto LABEL_58;
  }
  return v22;
}

uint64_t *sub_1C4900B2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t ExtendedSizeInBits;
  const char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t *v52;
  uint64_t v53;
  __int16 v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  unsigned __int8 *v72;
  int v73;

  v5 = a2;
  v6 = *(unsigned __int8 **)(a1 + 64);
  v72 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v72, v6, 2);
  v73 = *(_DWORD *)(a1 + 60);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 16 * v5);
  if (v7 == 6)
  {
    v16 = *(uint64_t **)(a1 + 32);
    v17 = v16[5];
    v18 = *(unsigned __int16 *)(v17 + 24);
    if (v18 == 35 || v18 == 11)
    {
      v20 = *(_QWORD *)(v17 + 80);
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      v22 = v16[1];
      if (*v21 == 32)
      {
        v33 = *v16;
        v34 = *(_QWORD *)(a3 + 832);
        if (v34)
          v35 = *(_WORD *)(v34 + 8);
        else
          v35 = 0;
        v36 = sub_1C5D52060(a3, 216, (const llvm::APInt *)&v72, (llvm *)0x31, 0, v33, v22, v35);
        v38 = v37;
        v39 = sub_1C6366AB4(a3, 1, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
        v42 = *(_QWORD *)(a3 + 832);
        if (v42)
          LOWORD(v42) = *(_WORD *)(v42 + 8);
        v43 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v36, v38, v41, (uint64_t)v39, v40, v42);
        v45 = v44;
        if (*(_WORD *)(a1 + 24) == 177)
          v46 = 199;
        else
          v46 = 198;
        v47 = *(_QWORD *)(a3 + 832);
        if (v47)
          v48 = *(_WORD *)(v47 + 8);
        else
          v48 = 0;
        v49 = a3;
      }
      else
      {
        if (*(_WORD *)(a1 + 24) != 177)
          goto LABEL_30;
        v23 = *v16;
        if (*(_WORD *)(*v16 + 24) != 199)
          goto LABEL_30;
        v71 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v23 + 32) + 40)
                        + 16 * *(unsigned int *)(*(_QWORD *)(v23 + 32) + 8));
        if ((_BYTE)v71)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v71);
        else
          ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v71);
        if ((_DWORD)v25 == 1)
        {
          v70 = ExtendedSizeInBits;
          ExtendedSizeInBits = v70;
        }
        if (ExtendedSizeInBits > 0x20)
          goto LABEL_30;
        v50 = *(_QWORD *)(a3 + 832);
        if (v50)
          v51 = *(_WORD *)(v50 + 8);
        else
          v51 = 0;
        v52 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v72, (llvm *)5, 0, v23, v22, v51);
        v54 = 0;
        v56 = v22 & 0xFFFFFFFF00000000 | v55;
        v57 = *(_QWORD *)(a1 + 32);
        v58 = *(_QWORD *)(v57 + 40);
        v59 = *(_QWORD *)(v57 + 48);
        v60 = *(_QWORD *)(a3 + 832);
        if (v60)
          v54 = *(_WORD *)(v60 + 8);
        v61 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v52, v56, v53, v58, v59, v54);
        v63 = v62;
        v64 = sub_1C6366AB4(a3, 0, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
        v67 = *(_QWORD *)(a3 + 832);
        if (v67)
          LOWORD(v67) = *(_WORD *)(v67 + 8);
        v43 = sub_1C5D56C70(a3, 146, (const llvm::APInt *)&v72, (llvm *)0x31, 0, (uint64_t)v61, v63, v66, (uint64_t)v64, v65, v67);
        v45 = v68;
        v69 = *(_QWORD *)(a3 + 832);
        if (v69)
          v48 = *(_WORD *)(v69 + 8);
        else
          v48 = 0;
        v49 = a3;
        v46 = 216;
      }
      v30 = sub_1C5D52060(v49, v46, (const llvm::APInt *)&v72, (llvm *)6, 0, (uint64_t)v43, v45, v48);
LABEL_25:
      v31 = v30;
      goto LABEL_31;
    }
  }
  else if (v7 == 5)
  {
    v8 = *(uint64_t **)(a1 + 32);
    v9 = *v8;
    if (*(_BYTE *)(*(_QWORD *)(*v8 + 40) + 16 * *((unsigned int *)v8 + 2)) == 5)
    {
      v10 = v8[5];
      if (*(_BYTE *)(*(_QWORD *)(v10 + 40) + 16 * *((unsigned int *)v8 + 12)) == 6)
      {
        v11 = *(unsigned __int16 *)(a1 + 24);
        v12 = v8[1];
        v13 = v8[6];
        v14 = *(_QWORD *)(a3 + 832);
        if (v14)
          v15 = *(_WORD *)(v14 + 8);
        else
          v15 = 0;
        v26 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v72, (llvm *)5, 0, v10, v13, v15);
        v29 = *(_QWORD *)(a3 + 832);
        if (v29)
          LOWORD(v29) = *(_WORD *)(v29 + 8);
        v30 = sub_1C5D56C70(a3, v11, (const llvm::APInt *)&v72, (llvm *)5, 0, v9, v12, v28, (uint64_t)v26, v27, v29);
        goto LABEL_25;
      }
    }
  }
LABEL_30:
  v31 = 0;
LABEL_31:
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  return v31;
}

uint64_t *sub_1C4900F00(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t *v24;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  unsigned __int8 *v72;
  int v73;

  v5 = a2;
  v6 = *(unsigned __int8 **)(a1 + 64);
  v72 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v72, v6, 2);
  v73 = *(_DWORD *)(a1 + 60);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    v16 = *(uint64_t **)(a1 + 32);
    v17 = *v16;
    if (*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      v18 = v16[5];
      if (*(_BYTE *)(*(_QWORD *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        v19 = *(unsigned __int16 *)(a1 + 24);
        v20 = v16[1];
        v21 = v16[6];
        v22 = a3[104];
        if (v22)
          v23 = *(_WORD *)(v22 + 8);
        else
          v23 = 0;
        v26 = sub_1C5D52060((uint64_t)a3, 201, (const llvm::APInt *)&v72, (llvm *)5, 0, v18, v21, v23);
        v29 = a3[104];
        if (v29)
          LOWORD(v29) = *(_WORD *)(v29 + 8);
        v30 = sub_1C5D56C70((uint64_t)a3, v19, (const llvm::APInt *)&v72, (llvm *)5, 0, v17, v20, v28, (uint64_t)v26, v27, v29);
        goto LABEL_44;
      }
    }
LABEL_17:
    v24 = 0;
    goto LABEL_18;
  }
  if (v7 != 6)
    goto LABEL_17;
  v8 = *(uint64_t **)(a1 + 32);
  v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11)
    v11 = v8[5];
  else
    v11 = 0;
  v12 = *v8;
  v13 = v8[1];
  v14 = a3[104];
  if (v14)
    v15 = *(_WORD *)(v14 + 8);
  else
    v15 = 0;
  v31 = sub_1C5D52060((uint64_t)a3, 216, (const llvm::APInt *)&v72, (llvm *)0x31, 0, v12, v13, v15);
  v33 = v32;
  v34 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
  v37 = 0;
  v38 = a3[104];
  if (v38)
    v37 = *(_WORD *)(v38 + 8);
  v39 = sub_1C5D56C70((uint64_t)a3, 148, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v31, v33, v36, (uint64_t)v34, v35, v37);
  v41 = v40;
  v42 = sub_1C6366AB4((uint64_t)a3, 1, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
  v45 = 0;
  v46 = a3[104];
  if (v46)
    v45 = *(_WORD *)(v46 + 8);
  v47 = sub_1C5D56C70((uint64_t)a3, 148, (const llvm::APInt *)&v72, (llvm *)5, 0, (uint64_t)v31, v33, v44, (uint64_t)v42, v43, v45);
  v49 = v48;
  if (!v11)
    goto LABEL_37;
  v50 = *(_QWORD *)(v11 + 80);
  v51 = (_QWORD *)(v50 + 24);
  if (*(_DWORD *)(v50 + 32) >= 0x41u)
    v51 = (_QWORD *)*v51;
  if (*v51 == 32)
  {
    v53 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v72, (llvm *)5, 0, 0, 0);
    v55 = a3[104];
    if (v55)
      LOWORD(v55) = *(_WORD *)(v55 + 8);
    v56 = sub_1C5D56C70((uint64_t)a3, 146, (const llvm::APInt *)&v72, (llvm *)0x31, 0, (uint64_t)v53, v52, v54, (uint64_t)v39, v41, v55);
  }
  else
  {
LABEL_37:
    v58 = sub_1C636A8B4((uint64_t)a3, 5, 0, 5, 0);
    v61 = sub_1C636D72C((uint64_t)a3, (const char *)0xC3, (const llvm::APInt *)&v72, v58, v59, (uint64_t)v39, v41, v60, (uint64_t)v47, v49, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v64 = (uint64_t *)sub_1C490BE38((uint64_t)v61, v62, a3)[4];
    v65 = *v64;
    v66 = v64[1];
    v67 = v64[5];
    v68 = v64[6];
    v69 = a3[104];
    if (v69)
      LOWORD(v69) = *(_WORD *)(v69 + 8);
    v56 = sub_1C5D56C70((uint64_t)a3, 146, (const llvm::APInt *)&v72, (llvm *)0x31, 0, v65, v66, v63, v67, v68, v69);
  }
  v70 = a3[104];
  if (v70)
    v71 = *(_WORD *)(v70 + 8);
  else
    v71 = 0;
  v30 = sub_1C5D52060((uint64_t)a3, 216, (const llvm::APInt *)&v72, (llvm *)6, 0, (uint64_t)v56, v57, v71);
LABEL_44:
  v24 = v30;
LABEL_18:
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  return v24;
}

uint64_t sub_1C4901290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v8;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  signed int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::LLVMContext *v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t ExtendedSizeInBits;
  const char *v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t *v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  BOOL v96;
  _QWORD *v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t EVT;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  int v134;
  uint64_t v135;
  llvm *v136;
  int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 v149;
  unsigned __int8 *v150;
  int v151;
  __int128 v152;
  unsigned __int8 *v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD v159[2];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 8))
    return 0;
  v8 = *(unsigned __int8 **)(a2 + 64);
  v150 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v150, v8, 2);
  v151 = *(_DWORD *)(a2 + 60);
  v149 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  if (sub_1C6131328((unsigned __int8 *)&v149, (uint64_t)v8, a3) == (llvm::Type *)8
    || sub_1C6131328((unsigned __int8 *)&v149, (uint64_t)v9, v10) == (llvm::Type *)16)
  {
    if ((_BYTE)v149)
    {
      if (v149 - 15 >= 0x9C)
        goto LABEL_27;
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v149 + 1) + 8) & 0xFE) != 0x12)
    {
      goto LABEL_27;
    }
    if (sub_1C612FE00((llvm::EVT *)&v149, v9) >= 5)
    {
      v13 = *(uint64_t **)(a2 + 32);
      v14 = *v13;
      v15 = v13[1];
      v16 = v13[5];
      v17 = v13[6];
      v19 = 2 * sub_1C6131328((unsigned __int8 *)&v149, v11, v12);
      v20 = 5;
      v21 = 6;
      v22 = 7;
      if (v19 != 128)
        v22 = 0;
      if (v19 != 64)
        v21 = v22;
      if (v19 != 32)
        v20 = v21;
      v23 = 3;
      v24 = 4;
      if (v19 != 16)
        v24 = 0;
      if (v19 != 8)
        v23 = v24;
      if (v19 <= 31)
        v25 = v23;
      else
        v25 = v20;
      v26 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
      v27 = sub_1C612FE00((llvm::EVT *)&v149, v18);
      v28 = sub_1C4816F98(v26, v25, 0, v27 >> 1, 0);
      v30 = sub_1C636B420(*(_QWORD *)(a3 + 16), v28, v29, (uint64_t)&v150, v14, v15, v16, v17, *(_QWORD *)(a2 + 96));
      v31 = *(_QWORD *)(a3 + 16);
      v32 = sub_1C636A8B4(v31, v149, *((uint64_t *)&v149 + 1), 1, 0);
      v34 = v33;
      v35 = sub_1C6367DA8(*(_QWORD *)(a3 + 16), v149, *((uint64_t *)&v149 + 1), (uint64_t)v30, 0);
      v38 = (uint64_t)sub_1C636D6B4(v31, (const char *)0x37, (const llvm::APInt *)&v150, v32, v34, v35, v36, v37, (uint64_t)v30, 1);
      goto LABEL_46;
    }
  }
LABEL_27:
  sub_1C61436A0((uint64_t)&v144, a2);
  if (*((_QWORD *)&v146 + 1))
  {
    v39 = *(unsigned __int16 *)(*((_QWORD *)&v146 + 1) + 24);
    if (v39 == 35 || v39 == 11)
    {
      v41 = *(_QWORD *)(*((_QWORD *)&v146 + 1) + 80);
      v42 = (_QWORD *)(v41 + 24);
      if (*(_DWORD *)(v41 + 32) >= 0x41u)
        v42 = (_QWORD *)*v42;
      if (*v42)
      {
        v3 = 0;
        goto LABEL_54;
      }
    }
  }
  v43 = *((_QWORD *)&v144 + 1);
  v44 = v145;
  v142 = v150;
  if (v150)
    llvm::MetadataTracking::track((uint64_t)&v142, v150, 2);
  v143 = v151;
  sub_1C490EB74((uint64_t)&v155, v43, v44, (const llvm::APInt *)&v142, *(_QWORD *)(a3 + 16));
  v45 = v155;
  v46 = *((_QWORD *)&v156 + 1);
  v47 = v157;
  if (v142)
    llvm::MetadataTracking::untrack((uint64_t)&v142, v142);
  if (!v45 || (*(_DWORD *)(**(_QWORD **)(v45 + 80) + 8) & 0xFFFFFF00) == 0x200)
  {
LABEL_50:
    v3 = (uint64_t)sub_1C490FF60(a1, (uint64_t)&v144, a3);
    v56 = v55;
    v57 = (unsigned __int8 *)(*(_QWORD *)(v3 + 40) + 16 * v55);
    if (*v57 != v149 || !*v57 && *((_QWORD *)v57 + 1) != *((_QWORD *)&v149 + 1))
    {
      v58 = *(_QWORD *)(a3 + 16);
      v59 = sub_1C636A8B4(v58, v149, *((uint64_t *)&v149 + 1), 1, 0);
      v61 = v60;
      v62 = sub_1C6367DA8(*(_QWORD *)(a3 + 16), v149, *((uint64_t *)&v149 + 1), v3, v56);
      v3 = (uint64_t)sub_1C636D6B4(v58, (const char *)0x37, (const llvm::APInt *)&v150, v59, v61, v62, v63, v64, v3, 1);
    }
    goto LABEL_54;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 40) + 344);
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 400))(v48);
  if ((v49 - 15) <= 1)
  {
    v65 = *(unsigned __int8 **)(a2 + 64);
    v153 = v65;
    if (v65)
      llvm::MetadataTracking::track((uint64_t)&v153, v65, 2);
    v154 = *(_DWORD *)(a2 + 60);
    v66 = sub_1C5EAB3E0(*(llvm::GlobalValue **)(v45 + 80), *(_QWORD *)(v45 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 40) + 344), 256);
    v67 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v66, (const llvm::APInt *)&v153, (llvm *)4, 0, 0, 0);
    v69 = v68;
    v70 = sub_1C63663BC(*(_QWORD *)(a3 + 16), v46, v47, (uint64_t)&v153, 4, 0);
    v73 = sub_1C4904134(v70, v71, *(_QWORD *)(a3 + 16));
    v75 = 0;
    v76 = *(_QWORD *)(a3 + 16);
    v77 = *(_QWORD *)(v76 + 832);
    if (v77)
      v75 = *(_WORD *)(v77 + 8);
    v78 = sub_1C5D56C70(v76, 56, (const llvm::APInt *)&v153, (llvm *)4, 0, (uint64_t)v73, v72, v74, (uint64_t)v67, v69, v75);
    v80 = v69 & 0xFFFFFFFF00000000 | v79;
    v152 = *(_OWORD *)*(_QWORD *)(a2 + 40);
    v81 = *(_QWORD *)(a3 + 16);
    if ((_BYTE)v152)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v152);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v152);
    v84 = ExtendedSizeInBits;
    if ((_DWORD)v83 == 1)
    v86 = sub_1C6366AB4(v81, (unint64_t)(v84 + 96) >> 7, (const llvm::APInt *)&v153, (llvm *)3, 0, 1, 0);
    v88 = 0;
    v89 = *(_QWORD *)(a3 + 16);
    v90 = *(_QWORD *)(v89 + 832);
    if (v90)
      v88 = *(_WORD *)(v90 + 8);
    v92 = sub_1C5D56C70(v89, 398, (const llvm::APInt *)&v153, (llvm *)0xAE, 0, (uint64_t)v86, v85, v87, (uint64_t)v78, v80, v88);
    v93 = (int)v91;
    if ((_BYTE)v152)
    {
      if (v152 - 15 >= 0x9C)
      {
        v94 = *((_QWORD *)&v152 + 1);
LABEL_82:
        v97 = sub_1C636E638(*(_QWORD *)(a3 + 16), 25, (const llvm::APInt *)&v153, (llvm *)v152, v94, (uint64_t)v92, (int)v91);
        LODWORD(v99) = v115;
LABEL_92:
        v129 = *(uint64_t **)(a2 + 32);
        v131 = *v129;
        v130 = v129[1];
        v132 = *(uint64_t **)a3;
        *(_QWORD *)&v155 = v97;
        DWORD2(v155) = v99;
        *(_QWORD *)&v156 = v131;
        DWORD2(v156) = v130;
        v3 = sub_1C5C5B0B4(v132, a2, (uint64_t *)&v155, 2, 1);
        if (v153)
          llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
        goto LABEL_54;
      }
    }
    else
    {
      v94 = *((_QWORD *)&v152 + 1);
      if ((*(_DWORD *)(*((_QWORD *)&v152 + 1) + 8) & 0xFE) != 0x12)
        goto LABEL_82;
    }
    v95 = sub_1C612FE00((llvm::EVT *)&v152, v91);
    v97 = sub_1C61312D0(*(_QWORD *)(a3 + 16), (llvm *)v152, *((uint64_t *)&v152 + 1));
    v99 = v98;
    if ((_BYTE)v152)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v152);
      v101 = 0;
      v139 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v152 + 1) + 24), 0, v96);
      v139 = v116;
      v101 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    if (v95)
    {
      v117 = 0;
      v136 = (llvm *)(v101 | EVT);
      v137 = v93;
      v118 = v95;
      v138 = v92;
      do
      {
        if ((~(_DWORD)v117 & 3) != 0)
        {
          v140 = v99;
          v141 = (uint64_t)v97;
          v119 = sub_1C636E638(*(_QWORD *)(a3 + 16), v117 + 25 - (v117 >> 2), (const llvm::APInt *)&v153, v136, v139, (uint64_t)v92, v93);
          v121 = v120;
          v122 = *(_QWORD *)(a3 + 16);
          v123 = v152;
          v124 = sub_1C6366AB4(v122, v117, (const llvm::APInt *)&v153, (llvm *)5, 0, 0, 0);
          v127 = *(_QWORD *)(v122 + 832);
          if (v127)
            LOWORD(v127) = *(_WORD *)(v127 + 8);
          v97 = sub_1C5D58E08(v122, (const char *)0x93, (const llvm::APInt *)&v153, (llvm *)v123, *((uint64_t *)&v123 + 1), v141, v140, v126, (uint64_t)v119, v121, (uint64_t)v124, v125, SHIDWORD(v125), v127);
          v99 = v128;
          v93 = v137;
          v92 = v138;
        }
        ++v117;
      }
      while (v118 != v117);
    }
    goto LABEL_92;
  }
  if ((*(_DWORD *)(**(_QWORD **)(v45 + 80) + 8) & 0xFFFFFF00) != 0x4000)
  {
    v50 = *(unsigned __int16 *)(v46 + 24);
    if (v50 == 35 || v50 == 11)
    {
      v51 = *(_QWORD *)(a3 + 16);
      v52 = sub_1C4903E60(v45, v51);
      if (v52)
      {
        v102 = (uint64_t)v52;
        v103 = v53;
        v104 = *(unsigned __int8 **)(a2 + 64);
        v153 = v104;
        if (v104)
          llvm::MetadataTracking::track((uint64_t)&v153, v104, 2);
        v154 = *(_DWORD *)(a2 + 60);
        v105 = *(_QWORD *)(v45 + 40);
        v106 = *(llvm **)v105;
        v107 = *(_QWORD *)(v105 + 8);
        v108 = *(unsigned __int16 *)(v102 + 24);
        if (v108 == 35 || v108 == 11)
        {
          v109 = *(_QWORD *)(v102 + 80);
          v110 = (_QWORD *)(v109 + 24);
          if (*(_DWORD *)(v109 + 32) >= 0x41u)
            v110 = (_QWORD *)*v110;
          v111 = (_QWORD *)*v110;
          v112 = *(_QWORD *)(v46 + 80);
          v113 = *(_DWORD *)(v112 + 32);
          if (v113 > 0x40)
            v114 = **(_QWORD **)(v112 + 24);
          else
            v114 = (uint64_t)(*(_QWORD *)(v112 + 24) << -(char)v113) >> -(char)v113;
          v133 = sub_1C6366AB4(v51, (uint64_t)v111 + v114, (const llvm::APInt *)&v153, v106, v107, 0, 0);
        }
        else
        {
          v135 = *(_QWORD *)(v51 + 832);
          if (v135)
            LOWORD(v135) = *(_WORD *)(v135 + 8);
          v133 = sub_1C5D56C70(v51, 56, (const llvm::APInt *)&v153, v106, v107, v102, v103, v54, v46, v47, v135);
        }
        sub_1C636EE88(v51, *((uint64_t *)&v144 + 1), v145, (uint64_t)v133, v134);
        sub_1C61436A0((uint64_t)&v155, a2);
        v146 = v157;
        v147 = v158;
        v148[0] = v159[0];
        *(_OWORD *)((char *)v148 + 12) = *(_OWORD *)((char *)v159 + 12);
        v144 = v155;
        v145 = v156;
        if (v153)
          llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
      }
    }
    goto LABEL_50;
  }
  v38 = sub_1C490EDC4(a2, v45, v46, v47, 395, (uint64_t **)a3);
LABEL_46:
  v3 = v38;
LABEL_54:
  if (v150)
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
  return v3;
}

uint64_t sub_1C4901B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int ExtendedSizeInBits;
  const char *v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  llvm *v35;
  llvm::LLVMContext *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  llvm *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  llvm *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  __int128 v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 8))
    return 0;
  v6 = (_QWORD *)a2;
  v8 = *(unsigned __int8 **)(a2 + 64);
  v107 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v107, v8, 2);
  v108 = *((_DWORD *)v6 + 15);
  v9 = (uint64_t *)v6[4];
  v10 = *v9;
  v11 = v9[1];
  v13 = v9[5];
  v12 = v9[6];
  v14 = v9[10];
  v15 = v9[11];
  v106 = *(_OWORD *)(*(_QWORD *)(v13 + 40) + 16 * v12);
  *(_QWORD *)&v111 = sub_1C6131264((unsigned __int8 *)&v106, (uint64_t)v8, a3);
  *((_QWORD *)&v111 + 1) = v16;
  if ((_BYTE)v111)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v111);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v111);
  v20 = ExtendedSizeInBits;
  v98 = v14;
  if ((_DWORD)v18 == 1)
  if (*(_WORD *)(v13 + 24) == 146 && v20 >= 0x10)
  {
    v22 = *(unsigned __int16 *)(v13 + 56);
    v23 = ~(-1 << v22);
    if ((_DWORD)v22 == 64)
      v23 = -1;
    if (*(_WORD *)(v13 + 56))
    {
      v24 = 0;
      v25 = *(uint64_t **)(v13 + 32);
      do
      {
        v26 = *v25;
        v25 += 5;
        if (*(_WORD *)(v26 + 24) == 51)
          v27 = ~(1 << v24);
        else
          v27 = -1;
        v23 &= v27;
        ++v24;
      }
      while (v22 != v24);
    }
    v28 = __clz(v23) ^ 0x3F;
    v29 = v23 ? v28 : -1;
    v30 = v29 + 1;
    if (v29 + 1 < v22)
    {
      if (v30 < 5)
      {
        if (!v29)
        {
          v31 = *(_QWORD *)(v13 + 32);
          v32 = *(uint64_t **)v31;
          v33 = v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(v31 + 8);
          v35 = (llvm *)sub_1C6131264((unsigned __int8 *)&v106, (uint64_t)v18, v19);
          *(_QWORD *)&v106 = v35;
          *((_QWORD *)&v106 + 1) = v34;
          if ((_BYTE)v35)
          {
            if (v35 - 120 >= 0x20
              && v35 - 2 >= 6
              && v35 - 15 >= 0x3C)
            {
LABEL_94:
              v53 = v98;
LABEL_95:
              v70 = (uint64_t)sub_1C5D5D774(*(_QWORD *)(a3 + 16), v10, v11, (uint64_t)&v107, (uint64_t)v32, v33, v53, v15, v6[12]);
              goto LABEL_106;
            }
          }
          else
          {
            if ((*(_DWORD *)(v34 + 8) & 0xFE) == 0x12)
              v89 = *(unsigned __int8 *)(**(_QWORD **)(v34 + 16) + 8);
            else
              v89 = *(_DWORD *)(v34 + 8);
            if (v89 != 13)
              goto LABEL_94;
          }
          v90 = *(_QWORD *)(a3 + 16);
          v91 = *(_QWORD *)(v90 + 832);
          if (v91)
            v92 = *(_WORD *)(v91 + 8);
          else
            v92 = 0;
          v32 = sub_1C5D52060(v90, 201, (const llvm::APInt *)&v107, v35, v34, (uint64_t)v32, v33, v92);
          LODWORD(v33) = v93;
          goto LABEL_94;
        }
LABEL_36:
        v36 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
        v37 = sub_1C6131264((unsigned __int8 *)&v106, (uint64_t)v18, v19);
        v39 = sub_1C4816F98(v36, v37, v38, v30, 0);
        *(_QWORD *)&v106 = v39;
        *((_QWORD *)&v106 + 1) = v40;
        *(_QWORD *)&v111 = &v112;
        *((_QWORD *)&v111 + 1) = 0x400000000;
        if (v30)
        {
          v48 = 0;
          LODWORD(v43) = 0;
          v49 = 40 * v30;
          do
          {
            v50 = *(_OWORD *)(*(_QWORD *)(v13 + 32) + v48);
            if (v43 >= HIDWORD(v111))
            {
              v97 = *(_OWORD *)(*(_QWORD *)(v13 + 32) + v48);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, (uint64_t)&v112, v43 + 1, 16);
              v50 = v97;
              LODWORD(v43) = DWORD2(v111);
            }
            *(_OWORD *)(v111 + 16 * v43) = v50;
            v43 = ++DWORD2(v111);
            v48 += 40;
          }
          while (v49 != v48);
          v42 = *((_QWORD *)&v106 + 1);
          v41 = (llvm *)v106;
          v44 = (uint64_t *)v111;
        }
        else
        {
          v41 = (llvm *)v39;
          v42 = v40;
          v43 = 0;
          v44 = (uint64_t *)&v112;
        }
        v51 = *(_QWORD *)(a3 + 16);
        v52 = *(_QWORD *)(v51 + 832);
        v53 = v98;
        if (v52)
          v54 = *(unsigned __int16 *)(v52 + 8);
        else
          v54 = 0;
        v32 = sub_1C636D0C8(v51, (const char *)0x92, (const llvm::APInt *)&v107, v41, v42, v44, v43, v54);
        LODWORD(v33) = v55;
        if ((__int128 *)v111 != &v112)
          free((void *)v111);
        goto LABEL_95;
      }
      if ((((_BYTE)v30 * (_BYTE)v20) & 0x1F) == 0)
        goto LABEL_36;
    }
  }
  if (v20 <= 0x10)
  {
    if ((_BYTE)v106)
    {
      if (v106 - 15 >= 0x9C)
        goto LABEL_60;
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v106 + 1) + 8) & 0xFE) != 0x12)
    {
      goto LABEL_60;
    }
    if (sub_1C612FE00((llvm::EVT *)&v106, v18) >= 5)
    {
      v45 = *(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56);
      if ((_BYTE)v106)
        v46 = sub_1C47A8C74((unsigned __int8 *)&v106);
      else
        v46 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v106);
      v56 = v46;
      if ((_DWORD)v47 == 1)
      v57 = sub_1C4816F98(v45, 10, 0, v56 >> 5, 0);
      v59 = sub_1C6367DA8(*(_QWORD *)(a3 + 16), v57, v58, v13, v12);
      v6 = sub_1C5D5D774(*(_QWORD *)(a3 + 16), v10, v11, (uint64_t)&v107, v59, v60, v98, v15, v6[12]);
    }
  }
LABEL_60:
  sub_1C61436D8((uint64_t)&v101, (uint64_t)v6);
  if (*((_QWORD *)&v103 + 1))
  {
    v61 = *(unsigned __int16 *)(*((_QWORD *)&v103 + 1) + 24);
    if (v61 == 35 || v61 == 11)
    {
      v63 = *(_QWORD *)(*((_QWORD *)&v103 + 1) + 80);
      v64 = (_QWORD *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u)
        v64 = (_QWORD *)*v64;
      if (*v64)
        goto LABEL_104;
    }
  }
  v65 = *((_QWORD *)&v101 + 1);
  v66 = v102;
  v99 = v107;
  if (v107)
    llvm::MetadataTracking::track((uint64_t)&v99, v107, 2);
  v100 = v108;
  sub_1C490EB74((uint64_t)&v111, v65, v66, (const llvm::APInt *)&v99, *(_QWORD *)(a3 + 16));
  v67 = v111;
  v68 = *((_QWORD *)&v112 + 1);
  v69 = v113;
  if (v99)
    llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
  if (!v67)
    goto LABEL_103;
  if ((*(_DWORD *)(**(_QWORD **)(v67 + 80) + 8) & 0xFFFFFF00) != 0x4000)
  {
    v71 = *(unsigned __int16 *)(v68 + 24);
    if (v71 == 35 || v71 == 11)
    {
      v72 = *(_QWORD *)(a3 + 16);
      v73 = sub_1C4903E60(v67, v72);
      if (!v73)
        goto LABEL_104;
      v76 = (uint64_t)v73;
      v77 = v74;
      v78 = (unsigned __int8 *)v6[8];
      v109 = v78;
      if (v78)
        llvm::MetadataTracking::track((uint64_t)&v109, v78, 2);
      v110 = *((_DWORD *)v6 + 15);
      v79 = *(_QWORD *)(v67 + 40);
      v80 = *(llvm **)v79;
      v81 = *(_QWORD *)(v79 + 8);
      v82 = *(unsigned __int16 *)(v76 + 24);
      if (v82 == 35 || v82 == 11)
      {
        v83 = *(_QWORD *)(v76 + 80);
        v84 = (_QWORD *)(v83 + 24);
        if (*(_DWORD *)(v83 + 32) >= 0x41u)
          v84 = (_QWORD *)*v84;
        v85 = (_QWORD *)*v84;
        v86 = *(_QWORD *)(v68 + 80);
        v87 = *(_DWORD *)(v86 + 32);
        if (v87 > 0x40)
          v88 = **(_QWORD **)(v86 + 24);
        else
          v88 = (uint64_t)(*(_QWORD *)(v86 + 24) << -(char)v87) >> -(char)v87;
        v94 = sub_1C6366AB4(v72, (uint64_t)v85 + v88, (const llvm::APInt *)&v109, v80, v81, 0, 0);
      }
      else
      {
        v96 = *(_QWORD *)(v72 + 832);
        if (v96)
          LOWORD(v96) = *(_WORD *)(v96 + 8);
        v94 = sub_1C5D56C70(v72, 56, (const llvm::APInt *)&v109, v80, v81, v76, v77, v75, v68, v69, v96);
      }
      sub_1C636EE88(v72, *((uint64_t *)&v101 + 1), v102, (uint64_t)v94, v95);
      sub_1C61436D8((uint64_t)&v111, (uint64_t)v6);
      v103 = v113;
      v104 = v114;
      v105[0] = v115[0];
      *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)((char *)v115 + 9);
      v101 = v111;
      v102 = v112;
      if (v109)
        llvm::MetadataTracking::untrack((uint64_t)&v109, v109);
    }
LABEL_103:
    if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)&v101 + 1) + 40) + 16 * v102) != 174)
    {
      v70 = (uint64_t)sub_1C4910804(a1, (uint64_t)&v101, a3);
      goto LABEL_106;
    }
LABEL_104:
    v3 = 0;
    goto LABEL_107;
  }
  v70 = sub_1C490EDC4((uint64_t)v6, v67, v68, v69, 399, (uint64_t **)a3);
LABEL_106:
  v3 = v70;
LABEL_107:
  if (v107)
    llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
  return v3;
}

uint64_t sub_1C490226C(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v8 = 32 * a3;
  if (v8 > 0x39)
  {
    v9 = operator new();
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v9, (v8 + 63) >> 6, 0);
    *(_DWORD *)(v9 + 64) = v8;
  }
  else
  {
    v9 = (v8 << 58) | 1;
  }
  v16 = v9;
  sub_1C4914168(&v16, a2, a3);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 104))(*(_QWORD *)(a4 + 16));
  v11 = operator new();
  *(_DWORD *)(v11 + 8) = 7;
  *(_DWORD *)(v11 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 632))(v10, 7);
  *(_QWORD *)v11 = &unk_1E7FA2C18;
  *(_QWORD *)(v11 + 16) = v16;
  v15 = v11;
  v16 = 1;
  sub_1C49141AC(a1 + 16, (char *)&v15);
  v12 = v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24) - 8);
  sub_1C4914448((void ***)&v16);
  return v13;
}

uint64_t sub_1C49023D4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v7 = a3 + a2;
  if (v7 > 0x39)
  {
    v8 = operator new();
    *(_QWORD *)v8 = v8 + 16;
    *(_QWORD *)(v8 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v8, (v7 + 63) >> 6, 0);
    *(_DWORD *)(v8 + 64) = v7;
  }
  else
  {
    v8 = (v7 << 58) | 1;
  }
  v15 = v8;
  sub_1C49144A0((unint64_t *)&v15, a2, v7);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 104))(*(_QWORD *)(a4 + 16));
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 7;
  *(_DWORD *)(v10 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 632))(v9, 7);
  *(_QWORD *)v10 = &unk_1E7FA2C18;
  *(_QWORD *)(v10 + 16) = v15;
  v14 = v10;
  v15 = 1;
  sub_1C49141AC(a1 + 16, (char *)&v14);
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24) - 8);
  sub_1C4914448((void ***)&v15);
  return v12;
}

uint64_t sub_1C4902538(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *a1;
  if ((v1 & 1) == 0)
    return sub_1C4914594((_QWORD *)v1, 0, *(_DWORD *)(v1 + 64));
  v2 = (v1 >> 1) & ~(-1 << (v1 >> 58));
  if (v2)
    return __clz(v2) ^ 0x3F;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_1C4902578(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, uint64_t a6)
{
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint8x8_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v45;
  const char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int *v73;
  _QWORD *v74;
  llvm *v75;
  uint64_t v76;
  unsigned int *v77;
  const char *v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  unsigned int v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t **v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  uint64_t v122;
  _QWORD *v123;
  unsigned int v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  unsigned int v167;
  char v168;
  char v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned int v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  uint64_t **v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  _QWORD *v202;
  _QWORD *v203;
  int8x8_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint8x8_t v214;
  unsigned int v215;
  int v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  _QWORD *v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  void *v242;
  _QWORD *result;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  int v254;
  _QWORD *v255;
  _QWORD *v256;
  unsigned int v257;
  int v258[2];
  unsigned int v259;
  int v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  int v265;
  _BYTE v266[24];
  __int128 v267;
  __int128 v268;
  unsigned int v269;
  unsigned __int8 *v270;
  int v271;
  void *v272;
  uint64_t v273;
  _BYTE v274[64];
  void *v275;
  uint64_t v276;
  _QWORD v277[22];

  v277[20] = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 **)(a2 + 64);
  v270 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v270, v11, 2);
  v271 = *(_DWORD *)(a2 + 60);
  v12 = *(uint64_t **)(a2 + 32);
  v13 = *v12;
  v14 = v12[1];
  v15 = 4;
  do
  {
    v16 = &v258[v15];
    *(_BYTE *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    v15 += 4;
  }
  while (v16 + 4 != &v265);
  v17 = *(_QWORD *)(v12[5] + 80);
  v18 = (_QWORD *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (_QWORD *)*v18;
  v19 = *(_DWORD *)v18;
  if (a5[318])
  {
    v20 = 4;
  }
  else if (a5[319])
  {
    v20 = 5;
  }
  else if (a5[320])
  {
    v20 = 6;
  }
  else if (a5[321])
  {
    v20 = 7;
  }
  else
  {
    v20 = 9;
  }
  v257 = v20;
  if (v19 <= 2560)
  {
    if ((v19 - 2545) < 0x10)
    {
      *(_QWORD *)&v268 = -1;
      v267 = xmmword_1C66090F0;
      v21 = 0x700000006;
      v22 = 8;
      goto LABEL_22;
    }
    if ((v19 - 2471) >= 4)
    {
      v267 = xmmword_1C66090F0;
      *(_QWORD *)&v268 = -4294967290;
      v21 = 0x800000007;
      v22 = 9;
LABEL_22:
      v24 = 0;
      v25 = 0;
      *((_QWORD *)&v268 + 1) = v21;
      v269 = v22;
      v26 = v21;
      v27 = 25;
      v28 = xmmword_1C6609100;
      v29 = 3;
      v30 = 4;
      v31 = 2;
      v32 = 51;
      v33 = 49;
      v34 = 5;
      switch(v19)
      {
        case 2545:
        case 2549:
        case 2553:
        case 2557:
        case 2561:
        case 2565:
        case 2569:
        case 2573:
          v28 = xmmword_1C6609110;
          v27 = 1;
          v32 = 78;
          v33 = 76;
          v34 = 9;
          goto LABEL_29;
        case 2546:
        case 2550:
        case 2554:
        case 2558:
        case 2562:
        case 2566:
        case 2570:
        case 2574:
          v32 = 97;
          v33 = 95;
          v34 = 10;
          goto LABEL_29;
        case 2547:
        case 2551:
        case 2555:
        case 2559:
          goto LABEL_37;
        case 2548:
        case 2552:
        case 2556:
        case 2560:
          goto LABEL_29;
        case 2563:
        case 2567:
        case 2571:
        case 2575:
          goto LABEL_36;
        case 2564:
        case 2568:
        case 2572:
        case 2576:
          v32 = 51;
          v33 = 49;
          v34 = 5;
LABEL_29:
          v261 = (unint64_t)v34;
          v262 = (unint64_t)v33;
          v263 = (unint64_t)v32;
          v264 = (unint64_t)v32;
          *(_OWORD *)&v266[4] = v28;
          *(_DWORD *)&v266[20] = v27;
          v31 = 2;
          *(_DWORD *)v266 = 2;
          break;
        default:
          __asm { BR              X3 }
          return result;
      }
      goto LABEL_30;
    }
    *((_QWORD *)&v268 + 1) = 0x700000006;
    v267 = xmmword_1C66090F0;
    v269 = 8;
    LODWORD(v268) = 6;
    v21 = 0x900000008;
    v23 = 7;
    v22 = 10;
LABEL_21:
    DWORD1(v268) = v23;
    goto LABEL_22;
  }
  if ((v19 - 2561) < 0x10)
  {
    *((_QWORD *)&v268 + 1) = 0x600000005;
    LODWORD(v268) = -1;
    v269 = 7;
    v267 = xmmword_1C66090F0;
    v21 = 0x800000007;
    v23 = 6;
    v22 = 9;
    goto LABEL_21;
  }
  if (v19 == 2703)
  {
    v267 = xmmword_1C66090C0;
    v268 = xmmword_1C66090D0;
    v269 = 6;
    v24 = 1;
    v31 = -1;
    v30 = 2;
    v26 = -1;
    v29 = -1;
LABEL_36:
    v25 = 1;
  }
  else
  {
    v25 = 0;
    v267 = xmmword_1C66090C0;
    v24 = 1;
    v268 = xmmword_1C66090E0;
    v269 = 5;
    v26 = -1;
    v30 = 2;
    v31 = -1;
    v29 = -1;
  }
LABEL_37:
  v261 = xmmword_1C640F860;
  v262 = xmmword_1C6609120;
  v263 = xmmword_1C6609130;
  v264 = xmmword_1C6609130;
  *(_QWORD *)&v266[16] = 0x10000000FLL;
  *(_OWORD *)v266 = xmmword_1C6609140;
  if ((v19 - 2703) >= 2)
  {
LABEL_30:
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v31) + 80);
    v36 = (_QWORD *)(v35 + 24);
    if (*(_DWORD *)(v35 + 32) >= 0x41u)
      v36 = (_QWORD *)*v36;
    __asm { BR              X15 }
  }
  v260 = 1;
  if ((v24 & 1) != 0)
  {
    v37 = 1;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * v29) + 80);
    v39 = (_QWORD *)(v38 + 24);
    if (*(_DWORD *)(v38 + 32) >= 0x41u)
      v39 = (_QWORD *)*v39;
    v37 = *(_DWORD *)v39;
  }
  v40 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
  v40.i16[0] = vaddlv_u8(v40);
  v259 = v40.i32[0];
  v41 = *(_QWORD *)(a2 + 32);
  if (v26 == -1 || (v42 = *(unsigned __int16 *)(*(_QWORD *)(v41 + 40 * v26) + 24), v42 == 35) || v42 == 11)
  {
    v43 = *(unsigned __int16 *)(*(_QWORD *)(v41 + 40 * v30) + 24);
    v45 = v43 != 11 && v43 != 35;
  }
  else
  {
    v45 = 2;
  }
  v265 = v45;
  v47 = sub_1C47A8C74((unsigned __int8 *)&v261);
  if ((_DWORD)v46 == 1)
  v258[0] = dword_1C6608A84[120 * ((v257 & 0xE) != 4) + 60 * a1 + 20 * v265 + 10 * v25 + 5 * (v47 != 16) + v259];
  v258[1] = v47 != 16;
  if (DWORD1(v267) == -1)
  {
    v48 = 1;
  }
  else
  {
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * DWORD1(v267)) + 80);
    v50 = (_QWORD *)(v49 + 24);
    if (*(_DWORD *)(v49 + 32) >= 0x41u)
      v50 = (_QWORD *)*v50;
    v48 = *(_DWORD *)v50;
  }
  if (v260 == 8)
  {
    v51 = 15;
  }
  else
  {
    v51 = 7;
    if ((v260 & 0xFFFFFFFE) != 0xC)
    {
      if ((v260 & 0xFFFFFFFE) != 0xE || a5[327] == 0)
        v51 = v48;
      else
        v51 = 7;
    }
  }
  v53 = *(_QWORD *)(a2 + 32);
  v54 = (uint64_t *)(v53 + 40 * DWORD2(v267));
  if ((a1 & 1) == 0 && a5[361])
  {
    LOBYTE(v57) = 1;
  }
  else
  {
    v55 = *(_QWORD *)(*(_QWORD *)(v53 + 40 * HIDWORD(v267)) + 80);
    v56 = (_QWORD *)(v55 + 24);
    if (*(_DWORD *)(v55 + 32) >= 0x41u)
      v56 = (_QWORD *)*v56;
    v57 = *(_DWORD *)v56;
  }
  v253 = v57;
  v251 = v14;
  v252 = v13;
  v58 = *v54;
  v244 = v54[1];
  if (a6)
  {
    v59 = a6;
    v60 = *(_QWORD *)(a6 + 32);
    v62 = *(_QWORD **)v60;
    v61 = *(_QWORD *)(v60 + 8);
    if (!a1)
      goto LABEL_80;
LABEL_78:
    if ((_DWORD)v268 != -1)
    {
      v64 = *(_QWORD *)(a2 + 32) + 40 * v268;
      v62 = *(_QWORD **)v64;
      v61 = v61 & 0xFFFFFFFF00000000 | *(unsigned int *)(v64 + 8);
    }
    goto LABEL_80;
  }
  v59 = 0;
  v62 = sub_1C5D51E4C((uint64_t)a4, 51, (uint64_t)&v270, (llvm *)4, 0);
  v61 = v63;
  if (a1)
    goto LABEL_78;
LABEL_80:
  if (DWORD1(v268) == -1)
  {
    v246 = 0;
    v247 = 0;
  }
  else
  {
    v65 = *(_QWORD *)(a2 + 32) + 40 * DWORD1(v268);
    v246 = *(unsigned int *)(v65 + 8);
    v247 = *(_QWORD *)v65;
  }
  v255 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v270, (llvm *)4, 0, 1, 0);
  v68 = *(_QWORD *)(a2 + 32);
  if (DWORD2(v268) != -1)
  {
    v69 = v68 + 40 * DWORD2(v268);
    v255 = *(_QWORD **)v69;
    v66 = v66 & 0xFFFFFFFF00000000 | *(unsigned int *)(v69 + 8);
  }
  v70 = *(_QWORD *)(*(_QWORD *)(v68 + 40 * HIDWORD(v268)) + 80);
  v71 = (unsigned int *)(v70 + 24);
  v245 = v66;
  if (*(_DWORD *)(v70 + 32) >= 0x41u)
    v71 = *(unsigned int **)v71;
  v72 = *(_QWORD *)(*(_QWORD *)(v68 + 40 * v269) + 80);
  v73 = (unsigned int *)(v72 + 24);
  if (*(_DWORD *)(v72 + 32) >= 0x41u)
    v73 = *(unsigned int **)v73;
  v249 = *v71;
  v250 = *v73;
  v74 = &unk_1C6416000;
  v248 = v58;
  v254 = a1;
  if (!a1)
    goto LABEL_117;
  v76 = *((_QWORD *)&v261 + 1);
  v75 = (llvm *)v261;
  if (*((_WORD *)v62 + 12) == 216)
  {
    v77 = (unsigned int *)v62[4];
    LOBYTE(v275) = *(_QWORD *)(v62[5] + 16 * v61);
    LOBYTE(v272) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v77 + 40) + 16 * v77[2]);
    if (v272 - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", (const char *)v66);
    v79 = sub_1C47F381C((unsigned __int8 *)&v272);
    if (v275 - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v78);
    if (v79 == sub_1C47F381C((unsigned __int8 *)&v275))
    {
      v76 = 0;
      v75 = (llvm *)sub_1C47F37A0((unsigned __int8 *)&v272);
      v80 = v62[4];
      v62 = *(_QWORD **)v80;
      v61 = v61 & 0xFFFFFFFF00000000 | *(unsigned int *)(v80 + 8);
    }
    v74 = &unk_1C6416000;
  }
  if (v259 >= 2)
  {
    v275 = v277;
    v276 = 0xA00000000;
    v81 = sub_1C6366AB4((uint64_t)a4, *(unsigned int *)&v266[4 * v259], (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
    v83 = v82;
    v84 = v276;
    if (v276 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
      v84 = v276;
    }
    v85 = 0;
    v86 = 0;
    v87 = (char *)v275 + 16 * v84;
    *v87 = v81;
    v87[1] = v83;
    v88 = v276 + 1;
    LODWORD(v276) = v276 + 1;
    do
    {
      if (((v51 >> v85) & 1) != 0)
      {
        v89 = sub_1C6366AB4((uint64_t)a4, v85, (const llvm::APInt *)&v270, (llvm *)5, 0, 0, 0);
        v92 = 0;
        v93 = a4[104];
        if (v93)
          v92 = *(_WORD *)(v93 + 8);
        v94 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v270, v75, v76, (uint64_t)v62, v61, v91, (uint64_t)v89, v90, v92);
        v96 = v95;
        v97 = v276;
        if (v276 >= (unint64_t)HIDWORD(v276))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
          v97 = v276;
        }
        v98 = (uint64_t **)((char *)v275 + 16 * v97);
        *v98 = v94;
        v98[1] = v96;
        LODWORD(v276) = v276 + 1;
        v99 = sub_1C6366AB4((uint64_t)a4, (*(_DWORD *)&v266[20] + v86), (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
        v101 = v100;
        v102 = v276;
        if (v276 >= (unint64_t)HIDWORD(v276))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
          v102 = v276;
        }
        v103 = (char *)v275 + 16 * v102;
        *v103 = v99;
        v103[1] = v101;
        v88 = v276 + 1;
        LODWORD(v276) = v276 + 1;
        ++v86;
      }
      ++v85;
    }
    while (v85 != 4);
    v111 = sub_1C636E56C((uint64_t)a4, 18, (uint64_t)&v270, (llvm *)0xAE, 0, (uint64_t *)v275, v88);
    v62 = v111;
    v61 &= 0xFFFFFFFF00000000;
    if (v275 != v277)
      free(v275);
    v58 = v248;
    v109 = v253;
    v74 = (_QWORD *)&unk_1C6416000;
    goto LABEL_121;
  }
  if (v59 || v259 != 1)
  {
LABEL_117:
    v109 = v253;
    goto LABEL_121;
  }
  v104 = sub_1C6366AB4((uint64_t)a4, 31 - __clz(v51), (const llvm::APInt *)&v270, (llvm *)5, 0, 0, 0);
  v107 = 0;
  v108 = a4[104];
  v109 = v253;
  if (v108)
    v107 = *(_WORD *)(v108 + 8);
  v62 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v270, v75, v76, (uint64_t)v62, v61, v106, (uint64_t)v104, v105, v107);
  v61 = v61 & 0xFFFFFFFF00000000 | v110;
  v74 = &unk_1C6416000;
LABEL_121:
  if (v265)
  {
    if (v257 > 6)
    {
      if (v265 == 2)
      {
        v132 = sub_1C6366AB4((uint64_t)a4, 8, (const llvm::APInt *)&v270, (llvm *)5, 0, 0, 0);
        v135 = 0;
        v136 = a4[104];
        if (v136)
          v135 = *(_WORD *)(v136 + 8);
        v255 = sub_1C5D56C70((uint64_t)a4, 175, (const llvm::APInt *)&v270, (llvm *)4, 0, (uint64_t)v255, v245, v134, (uint64_t)v132, v133, v135);
        v138 = v245 & 0xFFFFFFFF00000000 | v137;
        v114 = v58;
      }
      else
      {
        v114 = v58;
        v138 = v245;
      }
      v131 = v244;
    }
    else
    {
      v116 = *(unsigned __int16 *)(v58 + 24);
      v117 = v58;
      if (v116 == 201)
      {
        v117 = **(_QWORD **)(v58 + 32);
        v116 = *(unsigned __int16 *)(v117 + 24);
      }
      if (v116 != 177)
        goto LABEL_143;
      v118 = *(uint64_t **)(v117 + 32);
      v119 = v118[5];
      v120 = *(unsigned __int16 *)(v119 + 24);
      if (v120 != 35 && v120 != 11)
        goto LABEL_143;
      v122 = *(_QWORD *)(v119 + 80);
      v123 = (_QWORD *)(v122 + 24);
      if (*(_DWORD *)(v122 + 32) >= 0x41u)
        v123 = (_QWORD *)*v123;
      if (*v123 == 8)
      {
        v114 = sub_1C63663BC((uint64_t)a4, *v118, v118[1], (uint64_t)&v270, 4, 0);
        v115 = v124;
        if (v265 != 2)
          goto LABEL_154;
        v125 = sub_1C6366AB4((uint64_t)a4, 65280, (const llvm::APInt *)&v270, (llvm *)4, 0, 0, 0);
        v128 = 0;
        v129 = a4[104];
        if (v129)
          v128 = *(_WORD *)(v129 + 8);
        v130 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v270, (llvm *)4, 0, v114, v115, v127, (uint64_t)v125, v126, v128);
      }
      else
      {
LABEL_143:
        v139 = sub_1C6366AB4((uint64_t)a4, 8, (const llvm::APInt *)&v270, (llvm *)5, 0, 0, 0);
        v142 = 0;
        v143 = a4[104];
        if (v143)
          v142 = *(_WORD *)(v143 + 8);
        v130 = sub_1C5D56C70((uint64_t)a4, 175, (const llvm::APInt *)&v270, (llvm *)4, 0, v58, v244, v141, (uint64_t)v139, v140, v142);
      }
      v114 = (uint64_t)v130;
      v138 = v245;
    }
    v115 = v131;
    if (v265 == 2)
    {
      v144 = a4[104];
      if (v144)
        LOWORD(v144) = *(_WORD *)(v144 + 8);
      v112 = sub_1C5D56C70((uint64_t)a4, 172, (const llvm::APInt *)&v270, (llvm *)4, 0, v114, v131, v67, (uint64_t)v255, v138, v144);
      v113 = (uint64_t *)v145;
      goto LABEL_155;
    }
LABEL_154:
    v112 = 0;
    v113 = 0;
LABEL_155:
    v74 = &unk_1C6416000;
    goto LABEL_156;
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
LABEL_156:
  v146 = (16 * (v51 & 0xF)) | ((v109 & 1) << 8) | v260 | (((_DWORD)v267 == -1) << 10);
  v275 = v277;
  v276 = v74[327];
  if (v254 && v259)
  {
    v277[0] = v62;
    v277[1] = v61;
    LODWORD(v276) = 1;
  }
  else if ((v254 & 1) != 0)
  {
    goto LABEL_164;
  }
  if (((1 << v257) & 0x2C0) != 0)
  {
    v147 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
    v149 = v148;
    v150 = v276;
    if (v276 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
      v150 = v276;
    }
    v151 = (char *)v275 + 16 * v150;
    *v151 = v147;
    v151[1] = v149;
    LODWORD(v276) = v276 + 1;
  }
LABEL_164:
  v152 = sub_1C6366AB4((uint64_t)a4, v146, (const llvm::APInt *)&v270, (llvm *)6, 0, 1, 0);
  v154 = v153;
  v155 = v276;
  if (v276 >= HIDWORD(v276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
    v155 = v276;
  }
  v156 = (char *)v275 + 16 * v155;
  *v156 = v152;
  v156[1] = v154;
  v157 = (v276 + 1);
  LODWORD(v276) = v276 + 1;
  if (!v265)
  {
    v175 = v255[10];
    v176 = (unsigned __int8 *)(v175 + 24);
    if (*(_DWORD *)(v175 + 32) >= 0x41u)
      v176 = *(unsigned __int8 **)v176;
    v177 = *v176;
    v178 = *(_QWORD *)(v248 + 80);
    v179 = (unsigned __int8 *)(v178 + 24);
    if (*(_DWORD *)(v178 + 32) >= 0x41u)
      v179 = *(unsigned __int8 **)v179;
    v180 = *v179;
    v181 = sub_1C6366AB4((uint64_t)a4, v177, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
    v183 = v182;
    v184 = sub_1C6366AB4((uint64_t)a4, v180, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
    v173 = v185;
    v186 = v276;
    if (v276 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
      v186 = v276;
    }
    v187 = (char *)v275 + 16 * v186;
    *v187 = v181;
    v187[1] = v183;
    v188 = (v276 + 1);
    LODWORD(v276) = v188;
    if (v188 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v188 + 1, 16);
      LODWORD(v188) = v276;
    }
    v189 = (char *)v275 + 16 * v188;
    *(_QWORD *)v189 = v184;
    v169 = v254;
    v168 = v257;
    v170 = v255;
    goto LABEL_193;
  }
  if (v265 == 1)
  {
    v158 = v255[10];
    v159 = (unsigned __int8 *)(v158 + 24);
    if (*(_DWORD *)(v158 + 32) >= 0x41u)
      v159 = *(unsigned __int8 **)v159;
    v160 = sub_1C6366AB4((uint64_t)a4, *v159, (const llvm::APInt *)&v270, (llvm *)4, 0, 1, 0);
    v162 = v161;
    v163 = v276;
    if (v276 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
      v163 = v276;
    }
    v164 = (char *)v275 + 16 * v163;
    *v164 = v160;
    v164[1] = v162;
    v165 = (v276 + 1);
    LODWORD(v276) = v165;
    if (v165 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v165 + 1, 16);
      LODWORD(v165) = v276;
    }
    v166 = (uint64_t *)((char *)v275 + 16 * v165);
    *v166 = v114;
    v166[1] = v115;
    v167 = v276 + 1;
    LODWORD(v276) = v276 + 1;
    v168 = v257;
    v169 = v254;
    v170 = v255;
    if (((1 << v257) & 0x2C0) != 0)
    {
      v171 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
      v173 = v172;
      v174 = v276;
      if (v276 >= HIDWORD(v276))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
        v174 = v276;
      }
LABEL_192:
      v189 = (char *)v275 + 16 * v174;
      *(_QWORD *)v189 = v171;
LABEL_193:
      *((_QWORD *)v189 + 1) = v173;
      v167 = v276 + 1;
      LODWORD(v276) = v276 + 1;
    }
  }
  else
  {
    if (v157 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v157 + 1, 16);
      LODWORD(v157) = v276;
    }
    v170 = 0;
    v190 = (uint64_t **)((char *)v275 + 16 * v157);
    *v190 = v112;
    v190[1] = v113;
    v167 = v276 + 1;
    LODWORD(v276) = v276 + 1;
    v168 = v257;
    v169 = v254;
    if (((1 << v257) & 0x2C0) != 0)
    {
      v171 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
      v173 = v191;
      v174 = v276;
      if (v276 >= HIDWORD(v276))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
        v174 = v276;
      }
      v170 = 0;
      goto LABEL_192;
    }
  }
  if (DWORD1(v268) != -1)
  {
    if (v167 >= HIDWORD(v276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v167 + 1, 16);
      v167 = v276;
    }
    v192 = (char *)v275 + 16 * v167;
    *v192 = v247;
    v192[1] = v246;
    LODWORD(v276) = v276 + 1;
    if (((1 << v168) & 0x2C0) != 0)
    {
      v193 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v270, (llvm *)5, 0, 1, 0);
      v195 = v194;
      v196 = v276;
      if (v276 >= HIDWORD(v276))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
        v196 = v276;
      }
      v197 = (char *)v275 + 16 * v196;
      *v197 = v193;
      v197[1] = v195;
      LODWORD(v276) = v276 + 1;
    }
  }
  v198 = sub_1C6366AB4((uint64_t)a4, v249, (const llvm::APInt *)&v270, (llvm *)4, 0, 1, 0);
  v200 = v199;
  v201 = v276;
  if (v276 >= HIDWORD(v276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
    v201 = v276;
  }
  v202 = (char *)v275 + 16 * v201;
  *v202 = v198;
  v202[1] = v200;
  LODWORD(v276) = v276 + 1;
  v203 = sub_1C6366AB4((uint64_t)a4, v250, (const llvm::APInt *)&v270, (llvm *)4, 0, 1, 0);
  v206 = v205;
  v207 = v276;
  if (v276 >= HIDWORD(v276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v276 + 1, 16);
    v207 = v276;
  }
  v208 = (char *)v275 + 16 * v207;
  *v208 = v203;
  v208[1] = v206;
  v209 = (v276 + 1);
  LODWORD(v276) = v209;
  if (v209 >= HIDWORD(v276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, (uint64_t)v277, v209 + 1, 16);
    LODWORD(v209) = v276;
  }
  v210 = (uint64_t *)((char *)v275 + 16 * v209);
  *v210 = v252;
  v210[1] = v251;
  v211 = (v276 + 1);
  LODWORD(v276) = v276 + 1;
  if ((v169 & 1) != 0)
  {
    v212 = sub_1C636E56C((uint64_t)a4, v258[0], (uint64_t)&v270, (llvm *)1, 0, (uint64_t *)v275, v211);
    v213 = v212;
  }
  else
  {
    v204.i32[0] = v51;
    v214 = (uint8x8_t)vcnt_s8(v204);
    v214.i16[0] = vaddlv_u8(v214);
    v215 = v214.i32[0];
    if (v214.i32[0] < 2u)
    {
      v213 = sub_1C636E56C((uint64_t)a4, v258[0], (uint64_t)&v270, (llvm *)v261, *((uint64_t *)&v261 + 1), (uint64_t *)v275, v211);
      v222 = sub_1C636A8B4((uint64_t)a4, v261, *((uint64_t *)&v261 + 1), 1, 0);
      v212 = sub_1C636D6B4((uint64_t)a4, (const char *)0x37, (const llvm::APInt *)&v270, v222, v223, (uint64_t)v213, 0, v224, v252, v251);
    }
    else
    {
      v256 = v170;
      v213 = sub_1C636E56C((uint64_t)a4, v258[0], (uint64_t)&v270, (llvm *)0xAE, 0, (uint64_t *)v275, v211);
      v216 = 0;
      v272 = v274;
      v273 = 0x400000000;
      do
      {
        v217 = sub_1C636E638((uint64_t)a4, v216 + *(_DWORD *)&v266[20], (const llvm::APInt *)&v270, (llvm *)v261, *((uint64_t *)&v261 + 1), (uint64_t)v213, 0);
        v219 = v218;
        v220 = v273;
        if (v273 >= (unint64_t)HIDWORD(v273))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 16);
          v220 = v273;
        }
        v221 = (char *)v272 + 16 * v220;
        *v221 = v217;
        v221[1] = v219;
        LODWORD(v273) = v273 + 1;
        ++v216;
      }
      while (v215 != v216);
      if (v215 == 3)
      {
        v225 = sub_1C5D51E4C((uint64_t)a4, 51, (uint64_t)&v270, (llvm *)v261, *((uint64_t *)&v261 + 1));
        v227 = v226;
        v228 = v273;
        if (v273 >= HIDWORD(v273))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 16);
          v228 = v273;
        }
        v229 = (char *)v272 + 16 * v228;
        *v229 = v225;
        v229[1] = v227;
        LODWORD(v273) = v273 + 1;
        v215 = 4;
      }
      v230 = &v258[4 * v215 - 4];
      v231 = sub_1C636A8B4((uint64_t)a4, *((_QWORD *)v230 + 2), *((_QWORD *)v230 + 3), 1, 0);
      v233 = v232;
      v234 = 0;
      v235 = a4[104];
      if (v235)
        v234 = *(unsigned __int16 *)(v235 + 8);
      v236 = sub_1C636D0C8((uint64_t)a4, (const char *)0x92, (const llvm::APInt *)&v270, *((llvm **)v230 + 2), *((_QWORD *)v230 + 3), (uint64_t *)v272, v215, v234);
      v212 = sub_1C636D6B4((uint64_t)a4, (const char *)0x37, (const llvm::APInt *)&v270, v231, v233, (uint64_t)v236, v237, v238, v252, v251);
      v170 = v256;
      if (v272 != v274)
        free(v272);
    }
  }
  if (v170)
  {
    v240 = v170[10];
    v241 = (unsigned int *)(v240 + 24);
    if (*(_DWORD *)(v240 + 32) >= 0x41u)
      v241 = *(unsigned int **)v241;
    v239 = *v241 | 0x100000000;
  }
  else
  {
    v239 = 0;
  }
  sub_1C4990688(v239, v51, v260);
  v272 = v242;
  sub_1C636E10C(a4, (uint64_t)v213, &v272, 1);
  if (v275 != v277)
    free(v275);
  if (v270)
    llvm::MetadataTracking::untrack((uint64_t)&v270, v270);
  return v212;
}

uint64_t sub_1C4903D64(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C4903D88 + 4 * byte_1C6607C36[a1 - 3]))(4);
}

uint64_t sub_1C4903D88()
{
  return 32;
}

uint64_t sub_1C4903D90()
{
  return 11;
}

uint64_t sub_1C4903DD0()
{
  return 16;
}

uint64_t sub_1C4903DD8()
{
  return 5;
}

uint64_t sub_1C4903DE0()
{
  return 10;
}

uint64_t sub_1C4903DE8()
{
  return 3;
}

uint64_t sub_1C4903E10(uint64_t a1, int a2)
{
  if ((a2 - 6) >= 0xA)
    return 2;
  else
    return 5;
}

_QWORD *sub_1C4903E60(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  llvm::GlobalValue *v5;
  int v6;
  int v7;
  uint64_t Metadata;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  BOOL v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;

  v4 = *(unsigned __int8 **)(a1 + 64);
  v37 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v37, v4, 2);
  v38 = *(_DWORD *)(a1 + 60);
  v5 = *(llvm::GlobalValue **)(a1 + 80);
  v6 = *(_DWORD *)(*(_QWORD *)v5 + 8) >> 8;
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 544);
  if (*((_BYTE *)v5 + 16) != 3 || (Metadata = llvm::Value::getMetadata(*(_QWORD *)(a1 + 80), "agx.bind", 8uLL)) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  v9 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v11 = *v9;
  v10 = v9[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v10 == 1)
    {
      v12 = *(_QWORD *)(v10 + 128);
      if (*(_BYTE *)(v12 + 16) == 16)
        goto LABEL_10;
    }
    v10 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8));
  }
  v12 = *(_QWORD *)(v10 + 128);
LABEL_10:
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = *(_DWORD *)v13;
  v15 = v14 == 18 || v14 == 114;
  v16 = v15;
LABEL_19:
  v15 = v7 == 1;
  v17 = *(_QWORD *)(a1 + 40);
  v19 = *(llvm **)v17;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v15)
    v16 = 0;
  if (*((_BYTE *)v5 + 16))
    v20 = v6 == 2;
  else
    v20 = 1;
  if (!v20 && v16 == 0)
  {
    if (v6 == 64 || v6 == 3)
    {
      v32 = sub_1C5EAB3E0(v5, *(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 344), 0);
      v28 = sub_1C6366AB4(a2, v32, (const llvm::APInt *)&v37, v19, v18, 0, 0);
    }
    else
    {
      v28 = 0;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 88);
    v24 = sub_1C6366FFC(a2, (uint64_t)v5, (uint64_t)&v37, (llvm *)6, 0, 0, 1, 0);
    v25 = *(_QWORD *)(a2 + 832);
    if (v25)
      v26 = *(_WORD *)(v25 + 8);
    else
      v26 = 0;
    v28 = sub_1C5D52060(a2, 400, (const llvm::APInt *)&v37, (llvm *)6, 0, (uint64_t)v24, v23, v26);
    v30 = v29;
    if (v22)
    {
      v33 = sub_1C6366AB4(a2, v22, (const llvm::APInt *)&v37, v19, v18, 0, 0);
      v36 = *(_QWORD *)(a2 + 832);
      if (v36)
        LOWORD(v36) = *(_WORD *)(v36 + 8);
      v28 = sub_1C5D56C70(a2, 56, (const llvm::APInt *)&v37, v19, v18, (uint64_t)v28, v30, v35, (uint64_t)v33, v34, v36);
    }
  }
  if (v37)
    llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  return v28;
}

BOOL sub_1C49040D8(uint64_t a1)
{
  int v1;
  uint64_t v3;
  llvm::APInt *v4;
  unsigned int v5;

  v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 != 35 && v1 != 11)
    return 0;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = (llvm::APInt *)(v3 + 24);
  v5 = *(_DWORD *)(v3 + 32);
  if (v5 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v4) == v5;
  else
    return *(_QWORD *)v4 == 0;
}

uint64_t *sub_1C4904134(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v18;
  int v19;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 40) + 344) + 336))(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 344));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, 16);
  v8 = *(unsigned __int8 **)(a1 + 64);
  v18 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v18, v8, 2);
  v19 = *(_DWORD *)(a1 + 60);
  v9 = *(_QWORD *)(a1 + 40) + 16 * a2;
  v10 = *(llvm **)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = sub_1C6366AB4(a3, 31 - __clz(v7), (const llvm::APInt *)&v18, *(llvm **)v9, v11, 0, 0);
  v15 = *(_QWORD *)(a3 + 832);
  if (v15)
    LOWORD(v15) = *(_WORD *)(v15 + 8);
  v16 = sub_1C5D56C70(a3, 177, (const llvm::APInt *)&v18, v10, v11, a1, a2, v14, (uint64_t)v12, v13, v15);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  return v16;
}

void sub_1C4904244(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;
  unsigned __int8 *v31;
  int v32;

  v7 = *(unsigned __int8 **)(a2 + 64);
  v31 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v31, v7, 2);
  v32 = *(_DWORD *)(a2 + 60);
  v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 > 0xCF)
  {
    if (v8 == 208)
    {
      if (**(_BYTE **)(a2 + 40) != 3)
        goto LABEL_32;
      v19 = *(uint64_t **)(a2 + 32);
      v13 = *v19;
      v14 = v19[1];
      v20 = *(_QWORD *)(a4 + 832);
      if (v20)
        v16 = *(_WORD *)(v20 + 8);
      else
        v16 = 0;
      v21 = a4;
      v22 = 423;
    }
    else
    {
      if (v8 != 209 || **(_BYTE **)(a2 + 40) != 3)
        goto LABEL_32;
      v12 = *(uint64_t **)(a2 + 32);
      v13 = *v12;
      v14 = v12[1];
      v15 = *(_QWORD *)(a4 + 832);
      if (v15)
        v16 = *(_WORD *)(v15 + 8);
      else
        v16 = 0;
      v21 = a4;
      v22 = 422;
    }
    v24 = sub_1C5D52060(v21, v22, (const llvm::APInt *)&v31, (llvm *)4, 0, v13, v14, v16);
    v25 = *(_QWORD *)(a4 + 832);
    if (v25)
      v26 = *(_WORD *)(v25 + 8);
    else
      v26 = 0;
    v17 = sub_1C5D52060(a4, 201, (const llvm::APInt *)&v31, (llvm *)3, 0, (uint64_t)v24, v23, v26);
  }
  else
  {
    if (v8 != 13)
    {
      if (v8 == 47)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
        v10 = (_QWORD *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u)
          v10 = (_QWORD *)*v10;
        v11 = *(_DWORD *)v10;
        if ((*(_DWORD *)v10 - 1282) < 0x190 || (v11 - 1682) < 0x8C)
          llvm::GPUSDISel::ExpandIntrinsicSample(a2, a4, v11, a3, 4, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C48ED834, 0, 1, 25);
      }
      goto LABEL_32;
    }
    v17 = sub_1C4903E60(a2, a4);
  }
  v27 = v17;
  if (v17)
  {
    v28 = (uint64_t *)v18;
    v29 = a3[2];
    if (v29 >= a3[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v29 + 1, 16);
      LODWORD(v29) = a3[2];
    }
    v30 = (uint64_t **)(*(_QWORD *)a3 + 16 * v29);
    *v30 = v27;
    v30[1] = v28;
    ++a3[2];
  }
LABEL_32:
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
}

void sub_1C4904450(uint64_t a1, int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  __int16 ***v20;
  const char *v21;
  uint64_t v22;
  int FixedObject;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  llvm *v29;
  int v30;
  uint64_t *FixedStack;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  int v49;
  char v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[14];

  v53[12] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a6 + 8))
    return;
  v15 = *(_QWORD *)(a4 + 40);
  v16 = *(_QWORD *)(a4 + 56);
  v51 = v53;
  v52 = 0x800000000;
  sub_1C613980C(v15, v16, a5, a6, (uint64_t)&v51);
  if ((_DWORD)v52)
  {
    v17 = 12 * v52;
    v18 = (unsigned __int8 *)v51 + 10;
    v45 = v15;
    while (1)
    {
      v46 = v17;
      if ((*(v18 - 2) & 1) == 0)
        break;
      LOBYTE(v47[0]) = *(v18 - 1);
      v22 = sub_1C47A8C74((unsigned __int8 *)v47);
      if ((_DWORD)v21 == 1)
      FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(v15 + 56), ((unint64_t)(v22 + 7) >> 3), *(unsigned int *)(v18 - 6), 1, 0);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a7 + 32))(a7, *(_QWORD *)(**(_QWORD **)(a4 + 40) + 40) + 272, 0);
      v25 = sub_1C5D406AC(a4, FixedObject, (llvm *)v24, 0, 0);
      v26 = 0;
      v27 = *(v18 - 1);
      v42 = v25;
      v43 = v28;
      switch(*(v18 - 2) >> 2)
      {
        case 1:
          v26 = 2;
          break;
        case 2:
          v26 = 3;
          break;
        case 3:
          v26 = 1;
          break;
        case 7:
          v26 = 0;
          v27 = *v18;
          break;
        default:
          break;
      }
      v41 = *v18;
      FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v45 + 432), FixedObject);
      if (FixedStack)
        v33 = *((_DWORD *)FixedStack + 3);
      else
        v33 = 0;
      memset(v47, 0, sizeof(v47));
      *(_QWORD *)&v48 = (unint64_t)FixedStack | 4;
      *((_QWORD *)&v48 + 1) = 0;
      v49 = v33;
      v50 = 0;
      v34 = sub_1C636B4C8(a4, v26, (uint64_t)a3, v41, 0, a1, a2, v32, v42, v43, &v48, v27, 0, 0, 0, 0, (uint64_t)v47);
      v36 = v35;
      v37 = *(unsigned int *)(a8 + 8);
      if (v37 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a8, a8 + 16, v37 + 1, 16);
        v37 = *(unsigned int *)(a8 + 8);
      }
      v38 = (_QWORD *)(*(_QWORD *)a8 + 16 * v37);
      *v38 = v34;
      v40 = v36 | v40 & 0xFFFFFFFF00000000;
      v38[1] = v40;
      ++*(_DWORD *)(a8 + 8);
      v18 += 12;
      v17 = v46 - 12;
      v15 = v45;
      if (v46 == 12)
        goto LABEL_29;
    }
    v19 = *v18;
    if (*v18 > 0x4Bu)
    {
      if (*v18 <= 0x5Eu)
      {
        v20 = &off_1E7FA5F48;
        if ((_DWORD)v19 == 76)
        {
LABEL_18:
          v29 = (llvm *)(v44 & 0xFFFFFFFFFFFFFF00 | v19);
          v30 = llvm::MachineFunction::addLiveIn(v15, *(_DWORD *)(v18 - 6), (uint64_t)v20);
          sub_1C612E4E4(a4, a1, a2, a3, v30, v29, 0);
          __asm { BR              X9 }
        }
      }
    }
    else if (((1 << (v19 - 4)) & 0x1000201002000084) == 0)
    {
      if (((1 << (v19 - 4)) & 0x800021) != 0)
        v20 = &off_1E7FA5F10;
      else
        v20 = &off_1E7FA5F48;
      goto LABEL_18;
    }
    v20 = (__int16 ***)&off_1E7FA6488;
    goto LABEL_18;
  }
LABEL_29:
  if ((a9 & 1) == 0)
  {
    v39 = *(_QWORD *)(v15 + 48);
    if (!v39)
    {
      v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 8) + 216))(*(_QWORD *)(v15 + 8), v15 + 128, v15);
      *(_QWORD *)(v15 + 48) = v39;
    }
    *(_DWORD *)(v39 + 440) = 4 * sub_1C485C658((unsigned int *)&v51);
  }
  if (v51 != v53)
    free(v51);
}

uint64_t *sub_1C49049A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, const llvm::APInt *a8, uint64_t *a9)
{
  char v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  __int16 v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  if ((int)a4 <= 99 || (v15 = a4 - 100, (a4 - 100) > 8))
  {
LABEL_19:
    v30 = *(unsigned __int8 **)a8;
    v31 = v30;
    if (v30)
      llvm::MetadataTracking::track((uint64_t)&v31, v30, 2);
    v32 = *((_DWORD *)a8 + 2);
    v17 = sub_1C4904CC4(a2, a3, (const llvm::APInt *)&v31, a9, a4, a6, a7, 1);
    v18 = v31;
    if (!v31)
      return v17;
    v19 = &v31;
    goto LABEL_23;
  }
  if (((1 << v15) & 0x11B) != 0)
  {
    v16 = *(unsigned __int8 **)a8;
    v33 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v33, v16, 2);
    v34 = *((_DWORD *)a8 + 2);
    v17 = sub_1C4904CC4(a2, a3, (const llvm::APInt *)&v33, a9, a4, a6, a7, 0);
    v18 = v33;
    if (!v33)
      return v17;
    v19 = &v33;
LABEL_23:
    llvm::MetadataTracking::untrack((uint64_t)v19, v18);
    return v17;
  }
  if (((1 << v15) & 0xC0) == 0)
  {
    if ((_DWORD)a4 == 102)
    {
      v35 = v37;
      v36 = 0x200000001;
      v37[0] = sub_1C6366AB4((uint64_t)a9, 0, a8, (llvm *)6, 0, 1, 0);
      v37[1] = v24;
      v37[2] = a2;
      v37[3] = a3;
      v25 = *(_QWORD *)(a1 + 184296);
      LODWORD(v36) = 2;
      if (*(_BYTE *)(v25 + 326))
        v26 = 8268;
      else
        v26 = 8267;
      v27 = sub_1C636E56C((uint64_t)a9, v26, (uint64_t)a8, (llvm *)1, 0, (uint64_t *)v35, 2);
      v28 = a9[104];
      if (v28)
        v29 = *(_WORD *)(v28 + 8);
      else
        v29 = 0;
      v17 = sub_1C5D52060((uint64_t)a9, 391, a8, (llvm *)1, 0, (uint64_t)v27, a3 & 0xFFFFFFFF00000000, v29);
      if (v35 != v37)
        free(v35);
      return v17;
    }
    goto LABEL_19;
  }
  v20 = a9[104];
  if (v20)
    v21 = *(_WORD *)(v20 + 8);
  else
    v21 = 0;
  return sub_1C5D52060((uint64_t)a9, 392, a8, (llvm *)1, 0, a2, a3, v21);
}

uint64_t *sub_1C4904CC4(uint64_t a1, unint64_t a2, const llvm::APInt *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  const llvm::APInt *v9;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;
  uint64_t v27;
  __int16 v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  const llvm::APInt *v69;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  _OWORD v78[2];
  _QWORD v79[2];
  int v80;
  char v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[128];
  void *v85;
  uint64_t v86;
  _BYTE v87[96];
  uint64_t *v88;
  uint64_t v89;
  _QWORD v90[18];

  v9 = a3;
  v90[16] = *MEMORY[0x1E0C80C00];
  if (a8)
    v12 = 393;
  else
    v12 = 392;
  if (*(_DWORD *)(a6 + 8))
  {
    v85 = v87;
    v86 = 0x800000000;
    sub_1C6139754(a4[5], a4[7], a5, a6, (uint64_t)&v85);
    v82 = v84;
    v83 = 0x800000000;
    sub_1C4825C80((unsigned int *)&v82, 1uLL, a1, a2);
    v17 = *(unsigned __int8 **)v9;
    v76 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v76, v17, 2);
    v77 = *((_DWORD *)v9 + 2);
    v88 = v90;
    v89 = 0x800000000;
    if ((int)v86 >= 1)
    {
      v74 = 0;
      v75 = a1;
      v68 = v12;
      v69 = v9;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v72 = 0;
      v73 = a2;
      v21 = a7;
      do
      {
        v22 = *v21 + v18;
        v23 = *(uint64_t **)v22;
        v24 = *(_QWORD *)(v22 + 8);
        v25 = *(int *)((char *)v85 + v19 + 4);
        if ((*((_BYTE *)v85 + v19 + 8) & 1) != 0)
        {
          v29 = sub_1C6366AB4((uint64_t)a4, *(int *)((char *)v85 + v19 + 4), (const llvm::APInt *)&v76, (llvm *)5, 0, 0, 0);
          v31 = v30;
          v32 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a4[5] + 8) + 16))(*(_QWORD *)(a4[5] + 8), *(_QWORD *)a4[5]);
          (*(void (**)(_BYTE *))(*(_QWORD *)v32 + 176))(v32);
          if (v32[381])
          {
            v40 = sub_1C6366AB4((uint64_t)a4, v25, (const llvm::APInt *)&v76, (llvm *)5, 0, 1, 0);
            v33 = v73;
          }
          else
          {
            v33 = v73;
            v35 = sub_1C612E4E4((uint64_t)a4, v75, v73, (const llvm::APInt *)&v76, 66, (llvm *)5, 0);
            v37 = 0;
            v38 = a4[104];
            if (v38)
              v37 = *(_WORD *)(v38 + 8);
            v40 = sub_1C5D56C70((uint64_t)a4, 56, (const llvm::APInt *)&v76, (llvm *)5, 0, (uint64_t)v35, v34, v36, (uint64_t)v29, v31, v37);
          }
          v41 = v39 | v71 & 0xFFFFFFFF00000000;
          v42 = *(_QWORD *)(a4[5] + 432);
          v43 = (v42 + 8) | 4;
          LODWORD(v42) = *(_DWORD *)(v42 + 20);
          v79[0] = v43;
          v79[1] = v25;
          v80 = v42;
          v81 = 0;
          memset(v78, 0, sizeof(v78));
          v44 = (uint64_t *)(v23[5] + 16 * v24);
          sub_1C6365BD8((uint64_t)a4, *v44, v44[1]);
          v71 = v41;
          v46 = sub_1C636B75C((uint64_t)a4, v75, v33, (uint64_t)&v76, (uint64_t)v23, v24, (uint64_t)v40, v41, (uint64_t)v79, v45, 0, 0, (uint64_t)v78);
          v48 = v47;
          v49 = v89;
          if (v89 >= (unint64_t)HIDWORD(v89))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, (uint64_t)v90, v89 + 1, 16);
            v49 = v89;
          }
          v21 = a7;
          v50 = &v88[2 * v49];
          *v50 = (uint64_t)v46;
          v51 = &v89;
        }
        else
        {
          v26 = (llvm *)*((unsigned __int8 *)v85 + v19 + 10);
          if ((*((_BYTE *)v85 + v19 + 8) & 0xFC) == 0x1C)
          {
            v27 = a4[104];
            if (v27)
              v28 = *(_WORD *)(v27 + 8);
            else
              v28 = 0;
            v23 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v76, (llvm *)*((unsigned __int8 *)v85 + v19 + 10), 0, *(_QWORD *)v22, *(_QWORD *)(v22 + 8), v28);
            LODWORD(v24) = v52;
          }
          v74 = sub_1C6132BA0((uint64_t)a4, v75, v73, (const llvm::APInt *)&v76, v25, (uint64_t)v23, v24, v16, (uint64_t)v74, v72);
          v54 = v53;
          v55 = sub_1C5D428B0((uint64_t)a4, v25, v26, 0);
          v48 = v56;
          v57 = v83;
          if (v83 >= (unint64_t)HIDWORD(v83))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v83 + 1, 16);
            v57 = v83;
          }
          v50 = (uint64_t *)((char *)v82 + 16 * v57);
          *v50 = v55;
          v51 = &v83;
          v72 = 1;
          v73 = v54;
          v75 = (uint64_t)v74;
        }
        v50[1] = v48;
        ++*(_DWORD *)v51;
        ++v20;
        v19 += 12;
        v18 += 16;
      }
      while (v20 < (int)v86);
      if ((_DWORD)v89)
      {
        v60 = a4[104];
        v9 = v69;
        v12 = v68;
        if (v60)
          v61 = *(unsigned __int16 *)(v60 + 8);
        else
          v61 = 0;
        v62 = sub_1C636D0C8((uint64_t)a4, (const char *)2, (const llvm::APInt *)&v76, (llvm *)1, 0, v88, v89, v61);
        v63 = v82;
        *(_QWORD *)v82 = v62;
        v63[2] = v64;
      }
      else
      {
        v9 = v69;
        v12 = v68;
        if (v74)
        {
          v58 = v83;
          if (v83 >= HIDWORD(v83))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v83 + 1, 16);
            v58 = v83;
          }
          v59 = (uint64_t **)((char *)v82 + 16 * v58);
          *v59 = v74;
          v59[1] = (uint64_t *)v72;
          LODWORD(v83) = v83 + 1;
        }
      }
    }
    if (v88 != v90)
      free(v88);
    if (v76)
      llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
    v65 = a4[104];
    if (v65)
      v66 = *(unsigned __int16 *)(v65 + 8);
    else
      v66 = 0;
    v67 = sub_1C636D0C8((uint64_t)a4, (const char *)v12, v9, (llvm *)1, 0, (uint64_t *)v82, v83, v66);
    if (v82 != v84)
      free(v82);
    if (v85 != v87)
      free(v85);
    return v67;
  }
  else
  {
    v13 = a4[104];
    if (v13)
      v14 = *(_WORD *)(v13 + 8);
    else
      v14 = 0;
    return sub_1C5D52060((uint64_t)a4, v12, a3, (llvm *)1, 0, a1, a2, v14);
  }
}

BOOL sub_1C49052D8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 == 76 || a3 - 9 < 2;
}

unsigned __int16 *sub_1C49052F0(unsigned int *a1, uint64_t a2, unint64_t *a3, unsigned int *a4, const llvm::APInt *a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v11;
  __int16 v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  llvm::APInt *v59;
  uint64_t v60;
  llvm *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 *result;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  llvm *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  llvm *v96;
  uint64_t v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  llvm *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  llvm::APInt *v115;
  unsigned int v116;
  llvm::APInt *v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  llvm *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  llvm *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  llvm *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  llvm *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t *v163;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;

  v9 = (uint64_t *)a2;
  v11 = *(_QWORD *)(a6 + 832);
  if (v11)
    v12 = *(_WORD *)(v11 + 8);
  else
    v12 = 0;
  v13 = sub_1C5D52060(a6, 216, a5, (llvm *)0x31, 0, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), v12);
  v15 = v14;
  v16 = 0;
  v17 = *(_QWORD *)(a6 + 832);
  if (v17)
    v16 = *(_WORD *)(v17 + 8);
  v163 = a3;
  v18 = sub_1C5D52060(a6, 216, a5, (llvm *)0x31, 0, *a3, a3[1], v16);
  v20 = v19;
  v21 = sub_1C6366AB4(a6, 0, a5, (llvm *)5, 0, 0, 0);
  v24 = 0;
  v25 = *(_QWORD *)(a6 + 832);
  if (v25)
    v24 = *(_WORD *)(v25 + 8);
  v160 = a1;
  v26 = sub_1C5D56C70(a6, 148, a5, (llvm *)5, 0, (uint64_t)v13, v15, v23, (uint64_t)v21, v22, v24);
  v28 = v27;
  v29 = sub_1C6366AB4(a6, 1, a5, (llvm *)5, 0, 0, 0);
  v32 = 0;
  v33 = *(_QWORD *)(a6 + 832);
  if (v33)
    v32 = *(_WORD *)(v33 + 8);
  v162 = sub_1C5D56C70(a6, 148, a5, (llvm *)5, 0, (uint64_t)v13, v15, v31, (uint64_t)v29, v30, v32);
  v35 = v34;
  v36 = sub_1C6366AB4(a6, 0, a5, (llvm *)5, 0, 0, 0);
  v39 = 0;
  v40 = *(_QWORD *)(a6 + 832);
  if (v40)
    v39 = *(_WORD *)(v40 + 8);
  v41 = v28;
  v161 = v35;
  v42 = sub_1C5D56C70(a6, 148, a5, (llvm *)5, 0, (uint64_t)v18, v20, v38, (uint64_t)v36, v37, v39);
  v44 = v43;
  v158 = v43;
  v45 = sub_1C6366AB4(a6, 1, a5, (llvm *)5, 0, 0, 0);
  v48 = *(_QWORD *)(a6 + 832);
  if (v48)
    LOWORD(v48) = *(_WORD *)(v48 + 8);
  v49 = sub_1C5D56C70(a6, 148, a5, (llvm *)5, 0, (uint64_t)v18, v20, v47, (uint64_t)v45, v46, v48);
  v52 = v49;
  v53 = v50;
  v54 = *a4;
  if (*a4 != 22 && v54 != 17)
  {
    v66 = *(unsigned __int16 *)(*v163 + 24);
    v157 = v50;
    if (v66 == 35 || v66 == 11)
      __asm { BR              X11 }
    v79 = dword_1C6608F70[v54 - 10];
    v156 = (uint64_t)v49;
    v165 = 0;
    v166 = 1;
    v167 = 1;
    v168 = a6;
    v95 = v160;
    v96 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v160 + 400))(v160, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v26[5] + 16 * v41), *(_QWORD *)(v26[5] + 16 * v41 + 8));
    v98 = sub_1C5D8C994(v160, v96, v97, (uint64_t)v26, v41, (uint64_t)v42, v158, v79, 0, (uint64_t)&v165, a5);
    if (v98)
    {
      v100 = v98;
      v159 = v99;
      v101 = v161;
    }
    else
    {
      v133 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v160 + 400))(v160, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v26[5] + 16 * v41), *(_QWORD *)(v26[5] + 16 * v41 + 8));
      v135 = v134;
      v136 = sub_1C6367818((_QWORD *)a6, v79);
      v139 = *(_QWORD *)(a6 + 832);
      if (v139)
        LOWORD(v139) = *(_WORD *)(v139 + 8);
      v101 = v161;
      v100 = sub_1C5D58E08(a6, (const char *)0xC1, a5, v133, v135, (uint64_t)v26, v41, v138, (uint64_t)v42, v158, v136, v137, SHIDWORD(v137), v139);
      v159 = v140;
      v95 = v160;
    }
    v102 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
    result = (unsigned __int16 *)sub_1C5D8C994(v95, v102, v103, (uint64_t)v162, v101, v156, v157, *a4, 0, (uint64_t)&v165, a5);
    if (!result)
    {
      v141 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
      v143 = v142;
      v144 = sub_1C6367818((_QWORD *)a6, *a4);
      v147 = *(_QWORD *)(a6 + 832);
      if (v147)
        LOWORD(v147) = *(_WORD *)(v147 + 8);
      result = (unsigned __int16 *)sub_1C5D58E08(a6, (const char *)0xC1, a5, v141, v143, (uint64_t)v162, v101, v146, v156, v157, v144, v145, SHIDWORD(v145), v147);
    }
    v105 = (uint64_t)result;
    v106 = *((unsigned __int16 *)v100 + 12);
    if (v106 == 35 || v106 == 11)
      v107 = v100;
    else
      v107 = 0;
    v108 = v104;
    v109 = result[12];
    if (v109 == 35 || v109 == 11)
    {
      v110 = result;
      if (!v107)
        goto LABEL_55;
    }
    else
    {
      v110 = 0;
      if (!v107)
        goto LABEL_55;
    }
    v111 = v107[10];
    result = (unsigned __int16 *)(v111 + 24);
    v112 = *(_DWORD *)(v111 + 32);
    if (v112 > 0x40)
    {
      result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
      v113 = (_DWORD)result == v112;
      v95 = v160;
      if (v113)
        goto LABEL_73;
    }
    else
    {
      v95 = v160;
      if (!*(_QWORD *)result)
        goto LABEL_73;
    }
LABEL_55:
    if (!v110)
      goto LABEL_69;
    v114 = *((_QWORD *)v110 + 10);
    v115 = (llvm::APInt *)(v114 + 24);
    v116 = *(_DWORD *)(v114 + 32);
    if (v116 > 0x40)
    {
      result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v114 + 24));
      if ((_DWORD)result != v116)
        goto LABEL_63;
    }
    else
    {
      v117 = *(llvm::APInt **)v115;
      if (*(_QWORD *)v115)
      {
LABEL_66:
        v95 = v160;
        if (v117 != (llvm::APInt *)1)
          goto LABEL_69;
        HIDWORD(v122) = *a4;
        LODWORD(v122) = *a4 - 10;
        v121 = v122 >> 1;
        if (v121 > 5 || ((1 << v121) & 0x33) == 0)
          goto LABEL_69;
LABEL_73:
        *v9 = v105;
        *((_DWORD *)v9 + 2) = v108;
        *v163 = 0;
        *((_DWORD *)v163 + 2) = 0;
        return result;
      }
    }
    HIDWORD(v119) = *a4 - 11;
    LODWORD(v119) = HIDWORD(v119);
    v118 = v119 >> 1;
    if (v118 <= 5 && ((1 << v118) & 0x33) != 0)
      goto LABEL_73;
    if (v116 < 0x41)
      goto LABEL_65;
LABEL_63:
    result = (unsigned __int16 *)llvm::APInt::countLeadingZerosSlowCase(v115);
    v120 = v116 - (_DWORD)result;
    v95 = v160;
    if (v120 <= 0x40)
    {
      v115 = *(llvm::APInt **)v115;
LABEL_65:
      v117 = *(llvm::APInt **)v115;
      goto LABEL_66;
    }
LABEL_69:
    v123 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
    v125 = sub_1C5D8C994(v95, v123, v124, (uint64_t)v162, v101, v156, v157, 0x11u, 0, (uint64_t)&v165, a5);
    *v9 = (uint64_t)v125;
    *((_DWORD *)v9 + 2) = v127;
    if (!v125)
    {
      v148 = (llvm *)(*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v95 + 400))(v95, *(_QWORD *)(**(_QWORD **)(a6 + 40) + 40) + 272, *(_QWORD *)(a6 + 56), *(_QWORD *)(v162[5] + 16 * v101), *(_QWORD *)(v162[5] + 16 * v101 + 8));
      v150 = v149;
      v151 = sub_1C6367818((_QWORD *)a6, 0x11u);
      v154 = *(_QWORD *)(a6 + 832);
      if (v154)
        LOWORD(v154) = *(_WORD *)(v154 + 8);
      v125 = sub_1C5D58E08(a6, (const char *)0xC1, a5, v148, v150, (uint64_t)v162, v161, v153, v156, v157, v151, v152, SHIDWORD(v152), v154);
      *v9 = (uint64_t)v125;
      *((_DWORD *)v9 + 2) = v155;
    }
    v128 = v100[5] + 16 * v159;
    v129 = *(llvm **)v128;
    v130 = *(_QWORD *)(v128 + 8);
    v131 = *(_QWORD *)(a6 + 832);
    if (v131)
      LOWORD(v131) = *(_WORD *)(v131 + 8);
    result = (unsigned __int16 *)sub_1C5D58E08(a6, (const char *)0xBE, a5, v129, v130, (uint64_t)v125, v9[1], v126, (uint64_t)v100, v159, v105, v108, SHIDWORD(v108), v131);
    v105 = (uint64_t)result;
    LODWORD(v108) = v132;
    goto LABEL_73;
  }
  v55 = v35;
  if (v42 != v49)
    goto LABEL_23;
  if (v44 != v50)
    goto LABEL_23;
  v56 = *((unsigned __int16 *)v42 + 12);
  if (v56 != 35 && v56 != 11)
    goto LABEL_23;
  v57 = v42[10];
  v58 = *(_DWORD *)(v57 + 32);
  if (v58)
  {
    v59 = (llvm::APInt *)(v57 + 24);
    if (v58 > 0x40)
    {
      v67 = v52;
      v68 = v41;
      v69 = v26;
      v70 = v9;
      v71 = v50;
      v72 = llvm::APInt::countTrailingOnesSlowCase(v59);
      v53 = v71;
      v9 = v70;
      v26 = v69;
      v41 = v68;
      v55 = v161;
      v52 = v67;
      if (v72 != v58)
        goto LABEL_23;
    }
    else if (*(_QWORD *)v59 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v58)
    {
LABEL_23:
      v60 = v26[5] + 16 * v41;
      v61 = *(llvm **)v60;
      v62 = *(_QWORD *)(v60 + 8);
      v63 = *(_QWORD *)(a6 + 832);
      v64 = v53;
      v65 = (uint64_t)v52;
      if (v63)
        LOWORD(v63) = *(_WORD *)(v63 + 8);
      *v9 = (uint64_t)sub_1C5D56C70(a6, 173, a5, v61, v62, (uint64_t)v26, v41, v51, (uint64_t)v42, v158, v63);
      *((_DWORD *)v9 + 2) = v81;
      v82 = v26[5] + 16 * v41;
      v83 = *(llvm **)v82;
      v84 = *(_QWORD *)(v82 + 8);
      v85 = *(_QWORD *)(a6 + 832);
      if (v85)
        LOWORD(v85) = *(_WORD *)(v85 + 8);
      v86 = sub_1C5D56C70(a6, 173, a5, v83, v84, (uint64_t)v162, v55, v80, v65, v64, v85);
      *v163 = (unint64_t)v86;
      *((_DWORD *)v163 + 2) = v88;
      v90 = *(_QWORD *)(a6 + 832);
      if (v90)
        LOWORD(v90) = *(_WORD *)(v90 + 8);
      v89 = *(_QWORD *)(*v9 + 40) + 16 * *((unsigned int *)v9 + 2);
      v91 = sub_1C5D56C70(a6, 172, a5, *(llvm **)v89, *(_QWORD *)(v89 + 8), *v9, v9[1], v87, (uint64_t)v86, v163[1], v90);
      *v9 = (uint64_t)v91;
      *((_DWORD *)v9 + 2) = v92;
      v93 = v91[5] + 16 * v92;
      result = (unsigned __int16 *)sub_1C6366AB4(a6, 0, a5, *(llvm **)v93, *(_QWORD *)(v93 + 8), 0, 0);
      *v163 = (unint64_t)result;
      *((_DWORD *)v163 + 2) = v94;
      return result;
    }
  }
  v73 = v26[5] + 16 * v41;
  v74 = *(llvm **)v73;
  v75 = *(_QWORD *)(v73 + 8);
  v76 = *(_QWORD *)(a6 + 832);
  if (v76)
    LOWORD(v76) = *(_WORD *)(v76 + 8);
  result = (unsigned __int16 *)sub_1C5D56C70(a6, 171, a5, v74, v75, (uint64_t)v26, v41, v51, (uint64_t)v162, v55, v76);
  *v9 = (uint64_t)result;
  *((_DWORD *)v9 + 2) = v78;
  *v163 = (unint64_t)v42;
  *((_DWORD *)v163 + 2) = v44;
  return result;
}

uint64_t *sub_1C4905D4C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  llvm *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  __int16 v59;
  unsigned __int8 *v60;
  uint64_t *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  unsigned int v67;
  _QWORD **v68;
  int v69;
  _BOOL8 *v70;
  llvm *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _BOOL8 *v85;
  llvm *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  __int16 v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  int v113;
  uint64_t v115;
  char v116;
  uint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t *v122;
  __int16 v123;
  unsigned int v124;
  unsigned int v125;
  double v126;
  uint64_t *v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v150;
  uint64_t v151;
  __int16 v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  unsigned __int8 *v157;
  uint64_t v158;
  __int16 v159;
  unsigned __int8 *v160;
  uint64_t *v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  llvm **v165;
  int v166;
  __int16 v167;
  _BOOL4 v168;
  int v169;
  uint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t *v177;
  unint64_t v178;
  __int16 v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t v192;
  __int16 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  __int16 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  __int16 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  unsigned int v208;
  unsigned int v209;
  __int16 v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  int v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  int v220;
  __int16 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  __int16 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  unint64_t v231;
  __int16 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  __int16 v236;
  unint64_t v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t *v246;
  __int16 v247;
  unsigned int v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  unsigned int v252;
  __int16 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  unsigned int v257;
  __int16 v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  unint64_t v263;
  __int16 v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  __int16 v270;
  uint64_t v271;
  uint64_t *v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  __int16 v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  __int16 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  __int16 v287;
  unsigned int v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t *v292;
  __int16 v293;
  unsigned int v294;
  unint64_t v295;
  uint64_t v296;
  unsigned int v297;
  __int16 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  __int16 v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  unint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  __int16 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t *v344;
  int v345;
  __int16 v346;
  uint64_t v347;
  uint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  _QWORD *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t *v356;
  unint64_t v357;
  unsigned int v358;
  unint64_t v359;
  uint64_t v360;
  __int16 v361;
  unint64_t v362;
  uint64_t v363;
  __int16 v364;
  uint64_t v365;
  unsigned __int8 *v366;
  uint64_t v367;
  uint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  __int16 v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  _QWORD *v379;
  unint64_t v380;
  uint64_t v381;
  __int16 v382;
  uint64_t v383;
  uint64_t *v384;
  unint64_t v385;
  unint64_t v386;
  _QWORD *v387;
  unint64_t v388;
  uint64_t v389;
  __int16 v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  unint64_t v395;
  uint64_t v396;
  __int16 v397;
  uint64_t v398;
  uint64_t *v399;
  unint64_t v400;
  unint64_t v401;
  _QWORD *v402;
  unint64_t v403;
  uint64_t v404;
  __int16 v405;
  uint64_t v406;
  uint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  unsigned int v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  __int16 v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  int v443;
  unsigned int v444;
  uint64_t *v445;
  int v446;
  uint64_t *v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t *v450;
  int v451;
  uint64_t *v452;
  unsigned int v453;
  unint64_t v454;
  int v455;
  uint64_t v456;
  __int16 v457;
  __int16 v458;
  unsigned int v459;
  uint64_t v460;
  unsigned int v461;
  uint64_t *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  unint64_t v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  int v472;
  int v473;
  uint64_t *v474;
  unsigned int v475;
  int v476;
  uint64_t v477;
  llvm *v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t *v483;
  int v484;
  int v485;
  uint64_t *v486;
  unsigned int v487;
  uint64_t v488;
  llvm *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  unsigned int v494;
  unint64_t v495;
  _QWORD *v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _DWORD *v501;
  uint64_t v502;
  uint64_t v503;
  __int16 v504;
  uint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  __int16 v508;
  uint64_t v509;
  uint64_t *v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  uint64_t *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  _BOOL4 v525;
  _BOOL4 v526;
  uint64_t *v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t *v532;
  unsigned int v533;
  unint64_t v534;
  unsigned int v535;
  __int16 v536;
  uint64_t *v537;
  _BOOL4 v538;
  int v539;
  int v540;
  uint64_t *v541;
  uint64_t v542;
  int v543;
  unsigned int v544;
  unsigned int v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  __int16 v560;
  unsigned int v561;
  unint64_t v562;
  _QWORD *v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int v567;
  uint64_t *v568;
  __int16 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  __int16 v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  __int16 v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t *v604;
  int v605;
  unsigned int v606;
  uint64_t *v607;
  unsigned int v608;
  uint64_t v609;
  __int16 v610;
  uint64_t v611;
  __int16 v612;
  uint64_t *v613;
  int v614;
  unsigned int v615;
  int v616;
  unsigned int v617;
  uint64_t *v618;
  uint64_t *v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  uint64_t v623;
  uint64_t *v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t *v627;
  unsigned int v628;
  unsigned int v629;
  uint64_t *v630;
  unsigned int v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t *v639;
  __int16 v640;
  unsigned int v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t *v644;
  int v645;
  int v646;
  uint64_t *v647;
  int v648;
  int v649;
  int v650;
  uint64_t *v651;
  int v652;
  int v653;
  uint64_t v654;
  uint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t *v658;
  unsigned int v659;
  _QWORD *v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  _QWORD *v664;
  _QWORD *v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  int v674;
  __int16 v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _DWORD *v680;
  _DWORD *v681;
  unint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  unint64_t v685;
  llvm *v686;
  _QWORD *v687;
  unint64_t v688;
  int v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t v697;
  unsigned int v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  _BOOL4 v703;
  uint64_t v704;
  unsigned int v705;
  uint64_t *v706;
  int v707;
  int v708;
  int v709;
  int v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  unint64_t v718;
  unint64_t v719;
  uint64_t *v720;
  unint64_t v721;
  int v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t *v726;
  uint64_t *v727;
  uint64_t v728;
  unint64_t v729;
  unint64_t v730;
  uint64_t *v731;
  uint64_t *v732;
  _BOOL4 v733;
  uint64_t *v734;
  unsigned __int8 *v735;
  int v736;
  unsigned __int8 *v737;
  int v738;
  unsigned __int8 *v739;
  int v740;
  unsigned int v741;
  __int128 v742;
  uint64_t v743;
  uint64_t v744;
  __int128 v745;
  __int128 v746;
  _QWORD *v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;

  v6 = a3;
  v7 = (uint64_t *)a2;
  v755 = *MEMORY[0x1E0C80C00];
  v743 = a2;
  v744 = a3;
  v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 > 0x91)
  {
    if (*(unsigned __int16 *)(a2 + 24) <= 0xDFu)
      __asm { BR              X10 }
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xE5:
        v150 = *(_QWORD *)(a2 + 32);
        v151 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
        v152 = *(_WORD *)(a2 + 72);
        v154 = *(uint64_t **)v150;
        v153 = *(_QWORD *)(v150 + 8);
        v156 = *(uint64_t **)(v150 + 40);
        v155 = *(_QWORD *)(v150 + 48);
        v157 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v746 = v157;
        if (v157)
          llvm::MetadataTracking::track((uint64_t)&v746, v157, 2);
        DWORD2(v746) = *((_DWORD *)v7 + 15);
        v728 = v151;
        if (v151 == 9)
        {
          v158 = a4[104];
          if (v158)
            v159 = *(_WORD *)(v158 + 8);
          else
            v159 = 0;
          v154 = sub_1C5D52060((uint64_t)a4, 215, (const llvm::APInt *)&v746, (llvm *)0xA, 0, (uint64_t)v154, v153, v159);
          v458 = 0;
          v153 = v153 & 0xFFFFFFFF00000000 | v459;
          v460 = a4[104];
          if (v460)
            v458 = *(_WORD *)(v460 + 8);
          v156 = sub_1C5D52060((uint64_t)a4, 215, (const llvm::APInt *)&v746, (llvm *)0xA, 0, (uint64_t)v156, v155, v458);
          v155 = v155 & 0xFFFFFFFF00000000 | v461;
        }
        v708 = v153;
        v714 = (uint64_t)v156;
        v722 = v155;
        v462 = sub_1C5D52060((uint64_t)a4, 231, (const llvm::APInt *)&v746, (llvm *)0xA, 0, (uint64_t)v154, v153, v152);
        v465 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v746, (llvm *)0xA, 0, (uint64_t)v156, v155, v464, (uint64_t)v462, v463, v152);
        v467 = sub_1C5D52060((uint64_t)a4, 234, (const llvm::APInt *)&v746, (llvm *)0xA, 0, (uint64_t)v465, v466, v152);
        v469 = v468;
        v470 = (uint64_t)v154;
        v471 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, 10, 0, 0, 0.0);
        v473 = v472;
        v474 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, 10, 0, 0, 0.0);
        v476 = v475;
        v477 = v474[5] + 16 * v475;
        v478 = *(llvm **)v477;
        v479 = *(_QWORD *)(v477 + 8);
        v480 = sub_1C6367818(a4, 1u);
        sub_1C63698B8((uint64_t)a4, (const char *)0xC0, (const llvm::APInt *)&v746, v478, v479, v470, v708, v482, (uint64_t)v471, v473, (uint64_t)v474, v476, (uint64_t)v467, v469, v480, v481);
        v483 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, 10, 0, 0, 0.0);
        v485 = v484;
        v486 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, 10, 0, 0, 1.0);
        LODWORD(v479) = v487;
        v488 = v486[5] + 16 * v487;
        v489 = *(llvm **)v488;
        v490 = *(_QWORD *)(v488 + 8);
        v491 = sub_1C6367818(a4, 1u);
        v4 = sub_1C63698B8((uint64_t)a4, (const char *)0xC0, (const llvm::APInt *)&v746, v489, v490, v714, v722, v493, (uint64_t)v483, v485, (uint64_t)v486, v479, (uint64_t)v467, v469, v491, v492);
        v495 = v469 & 0xFFFFFFFF00000000 | v494;
        if (v728 == 9)
        {
          v496 = sub_1C6366AB4((uint64_t)a4, 1, (const llvm::APInt *)&v746, (llvm *)5, 0, 0, 0);
          v499 = a4[104];
          if (v499)
            LOWORD(v499) = *(_WORD *)(v499 + 8);
          v4 = sub_1C5D56C70((uint64_t)a4, 212, (const llvm::APInt *)&v746, (llvm *)9, 0, (uint64_t)v4, v495, v498, (uint64_t)v496, v497, v499);
        }
        goto LABEL_95;
      case 0xE6:
        v13 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v746 = v13;
        if (v13)
        {
          llvm::MetadataTracking::track((uint64_t)&v746, v13, 2);
          v14 = (uint64_t *)v743;
          v6 = v744;
        }
        else
        {
          v14 = v7;
        }
        DWORD2(v746) = *((_DWORD *)v7 + 15);
        v70 = (_BOOL8 *)(v14[5] + 16 * v6);
        v71 = (llvm *)*v70;
        v72 = v70[1];
        v73 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, *v70, v72, 0, 0.693147181);
        v75 = v74;
        v76 = *(uint64_t **)(v743 + 32);
        v77 = *v76;
        v78 = v76[1];
        v79 = a4[104];
        if (v79)
          v80 = *(_WORD *)(v79 + 8);
        else
          v80 = 0;
        v81 = sub_1C5D52060((uint64_t)a4, 231, (const llvm::APInt *)&v746, v71, v72, v77, v78, v80);
        v84 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v746, v71, v72, (uint64_t)v81, v82, v83, (uint64_t)v73, v75, *(_WORD *)(v743 + 72));
        goto LABEL_94;
      case 0xE7:
      case 0xE8:
      case 0xEA:
      case 0xEB:
        goto LABEL_376;
      case 0xE9:
        v36 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v746 = v36;
        if (v36)
        {
          llvm::MetadataTracking::track((uint64_t)&v746, v36, 2);
          v37 = (uint64_t *)v743;
          v6 = v744;
        }
        else
        {
          v37 = v7;
        }
        DWORD2(v746) = *((_DWORD *)v7 + 15);
        v85 = (_BOOL8 *)(v37[5] + 16 * v6);
        v86 = (llvm *)*v85;
        v87 = v85[1];
        v88 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v746, *v85, v87, 0, 1.44269504);
        v92 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v746, v86, v87, **(_QWORD **)(v743 + 32), *(_QWORD *)(*(_QWORD *)(v743 + 32) + 8), v90, (uint64_t)v88, v89, *(_WORD *)(v743 + 72));
        v93 = a4[104];
        if (v93)
          v94 = *(_WORD *)(v93 + 8);
        else
          v94 = 0;
        v84 = sub_1C5D52060((uint64_t)a4, 234, (const llvm::APInt *)&v746, v86, v87, (uint64_t)v92, v91, v94);
        goto LABEL_94;
      case 0xEC:
        v51 = *(uint64_t **)(a2 + 32);
        v52 = *v51;
        v53 = v51[1];
        v54 = *(_QWORD *)(*v51 + 40) + 16 * v53;
        v55 = *(llvm **)v54;
        v56 = *(_QWORD *)(v54 + 8);
        v57 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v746 = v57;
        if (v57)
          llvm::MetadataTracking::track((uint64_t)&v746, v57, 2);
        DWORD2(v746) = *((_DWORD *)v7 + 15);
        v58 = a4[104];
        if (v58)
          v59 = *(_WORD *)(v58 + 8);
        else
          v59 = 0;
        v96 = sub_1C5D52060((uint64_t)a4, 223, (const llvm::APInt *)&v746, v55, v56, v52, v53, v59);
        v97 = a4[104];
        if (v97)
          v98 = *(_WORD *)(v97 + 8);
        else
          v98 = 0;
        v100 = sub_1C5D52060((uint64_t)a4, 241, (const llvm::APInt *)&v746, v55, v56, (uint64_t)v96, v95, v98);
        v102 = a4[104];
        if (v102)
          LOWORD(v102) = *(_WORD *)(v102 + 8);
        v84 = sub_1C5D56C70((uint64_t)a4, 143, (const llvm::APInt *)&v746, v55, v56, (uint64_t)v100, v99, v101, v52, v53, v102);
        goto LABEL_94;
      default:
        if (v9 == 260)
        {
          v17 = *(_QWORD *)(a2 + 32);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 80) + 40) + 16 * *(unsigned int *)(v17 + 88)) != 6)
            return 0;
          v18 = *(unsigned __int8 **)(a2 + 64);
          v735 = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)&v735, v18, 2);
            v18 = v735;
            v17 = *(_QWORD *)(v743 + 32);
          }
          v19 = *((_DWORD *)v7 + 15);
          v736 = v19;
          v745 = *(_OWORD *)(v17 + 80);
          v742 = *(_OWORD *)(v17 + 120);
          v20 = *(_DWORD *)(*(_QWORD *)(v17 + 40) + 76);
          v741 = v20;
          v739 = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)&v739, v18, 2);
            v19 = v736;
          }
          v740 = v19;
          sub_1C49052F0((unsigned int *)a1, (uint64_t)&v745, (unint64_t *)&v742, &v741, (const llvm::APInt *)&v739, (uint64_t)a4);
          if (v739)
            llvm::MetadataTracking::untrack((uint64_t)&v739, v739);
          if (!(_QWORD)v742)
          {
            v21 = *(_QWORD *)(v745 + 40) + 16 * DWORD2(v745);
            *(_QWORD *)&v742 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v735, *(llvm **)v21, *(_QWORD *)(v21 + 8), 0, 0);
            DWORD2(v742) = v22;
            v20 = 22;
          }
          v23 = *(_QWORD *)(v743 + 32);
          v24 = *(_DWORD *)(v23 + 8);
          *(_QWORD *)&v746 = *(_QWORD *)v23;
          DWORD2(v746) = v24;
          v747 = (_QWORD *)sub_1C6367818(a4, v20);
          v748 = v25;
          v749 = v745;
          LODWORD(v750) = DWORD2(v745);
          v751 = v742;
          LODWORD(v752) = DWORD2(v742);
          v26 = *(_QWORD *)(v743 + 32);
          LODWORD(v754) = *(_DWORD *)(v26 + 168);
          v753 = *(_QWORD *)(v26 + 160);
          v27 = a4[104];
          if (v27)
            v28 = *(unsigned __int16 *)(v27 + 8);
          else
            v28 = 0;
          v134 = sub_1C636D0C8((uint64_t)a4, (const char *)0x104, (const llvm::APInt *)&v735, (llvm *)1, 0, (uint64_t *)&v746, 5, v28);
          goto LABEL_121;
        }
        v160 = *(unsigned __int8 **)(a2 + 64);
        v735 = v160;
        v161 = v7;
        if (v160)
        {
          llvm::MetadataTracking::track((uint64_t)&v735, v160, 2);
          v161 = (uint64_t *)v743;
          v6 = v744;
        }
        v736 = *((_DWORD *)v7 + 15);
        v162 = (uint64_t *)v161[4];
        v164 = *v162;
        v163 = v162[1];
        v165 = (llvm **)(v161[5] + 16 * v6);
        v166 = *v165;
        v167 = *((_WORD *)v161 + 36);
        v168 = (v167 & 0x200 | *(_WORD *)(*a4 + 1020) & 1) == 0;
        v169 = *(unsigned __int16 *)(v164 + 24);
        v684 = (uint64_t)v165[1];
        v686 = *v165;
        if (v169 == 215)
        {
          v170 = *(_QWORD *)(v164 + 32);
          v163 = v163 & 0xFFFFFFFF00000000 | *(unsigned int *)(v170 + 8);
          v164 = *(_QWORD *)v170;
          v703 = v166 == 9;
          v171 = &unk_1C866F15C;
          if (v166 != 9)
            v171 = &unk_1C866F184;
          v693 = 9;
          v695 = 0;
          goto LABEL_170;
        }
        if (v169 != 212 || (v167 & 0x200 | *(_WORD *)(*a4 + 1020) & 1) == 0)
        {
          if (v166 == 9)
          {
            v703 = 1;
            v693 = (uint64_t)*v165;
            v695 = (uint64_t)v165[1];
            v171 = &unk_1C866F15C;
LABEL_170:
            v172 = a4[104];
            v681 = v171;
            if (v172)
              v173 = *(_WORD *)(v172 + 8);
            else
              v173 = 0;
            v452 = sub_1C5D52060((uint64_t)a4, 215, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v164, v163, v173);
            v454 = v163 & 0xFFFFFFFF00000000 | v453;
            v680 = &unk_1C866F15C;
            v455 = 9;
            goto LABEL_307;
          }
          v703 = 0;
          v455 = *v165;
          v693 = (uint64_t)*v165;
          v695 = (uint64_t)v165[1];
          v680 = &unk_1C866F184;
          v681 = &unk_1C866F184;
        }
        else
        {
          v500 = *(_QWORD *)(v164 + 32);
          v163 = v163 & 0xFFFFFFFF00000000 | *(unsigned int *)(v500 + 8);
          v164 = *(_QWORD *)v500;
          v501 = &unk_1C866F15C;
          v703 = v166 == 9;
          if (v166 != 9)
            v501 = &unk_1C866F184;
          v680 = &unk_1C866F184;
          v681 = v501;
          v455 = 10;
          v693 = 10;
          v695 = 0;
        }
        v452 = (uint64_t *)v164;
        v454 = v163;
LABEL_307:
        v525 = v455 == 10 && v168;
        v526 = v166 == 10 && v525;
        DWORD2(v745) = 32;
        *(_QWORD *)&v745 = 0x20000000;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v746 + 8), (const llvm::APInt **)&v745);
        v527 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)0xA, 0, 0);
        v690 = v528;
        v692 = (uint64_t)v527;
        if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v747);
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
        {
          MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
        }
        v733 = v526;
        if (v526)
        {
          v529 = *(_QWORD *)(a1 + 184296);
          if (!*(_BYTE *)(v529 + 353) || *(_BYTE *)(v529 + 354))
          {
            DWORD2(v745) = 32;
            *(_QWORD *)&v745 = 1333788672;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v746 + 8), (const llvm::APInt **)&v745);
            v624 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)0xA, 0, 0);
            v626 = v625;
            if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v747);
            }
            else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
            {
              MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
            }
            v627 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v452, v454, v623, (uint64_t)v624, v626, v167);
            v452 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v164, v163, v692, v690, (uint64_t)v627, v628, (uint64_t)v452, v454, SHIDWORD(v454), 4u);
            v454 = v454 & 0xFFFFFFFF00000000 | v629;
            *((_WORD *)v452 + 36) = v167;
            v526 = v733;
          }
        }
        v530 = a1 + 184296;
        if (*(_BYTE *)(*(_QWORD *)v530 + 353))
        {
          v532 = sub_1C5D52060((uint64_t)a4, 419, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v452, v454, v167);
          v534 = v533;
        }
        else
        {
          v532 = sub_1C5D52060((uint64_t)a4, 418, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v452, v454, v167);
          v534 = v535;
          if ((sub_1C490C354(v164, v163, 0) & 1) == 0)
          {
            v723 = v452;
            v536 = v167;
            v537 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, v693, v695, 0, 0.0);
            v700 = v530;
            v538 = v526;
            v540 = v539;
            v541 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 0.0);
            v542 = (uint64_t)v537;
            v167 = v536;
            v452 = v723;
            v543 = v540;
            v526 = v538;
            v530 = v700;
            v532 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v164, v163, v542, v543, (uint64_t)v541, v544, (uint64_t)v532, v534, SHIDWORD(v534), 1u);
            v534 = v545;
            *((_WORD *)v532 + 36) = v167;
          }
        }
        v715 = v454;
        v678 = (uint64_t)v532;
        if (v526)
        {
          v701 = v530;
          v709 = v163;
          v676 = v164;
          v546 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 0.5);
          v547 = (uint64_t)v452;
          v548 = (uint64_t)v546;
          v550 = v549;
          v724 = v547;
          v552 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v547, v454, v551, (uint64_t)v532, v534, v167);
          v554 = v553;
          v556 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v548, v550, v555, (uint64_t)v532, v534, v167);
          v558 = v557;
          v559 = a4[104];
          v674 = v534;
          if (v559)
            v560 = *(_WORD *)(v559 + 8);
          else
            v560 = 0;
          v568 = sub_1C5D52060((uint64_t)a4, 222, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v552, v554, v560);
          v569 = v167;
          v572 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v568, v570, v571, (uint64_t)v552, v554, v724, v454, SHIDWORD(v454), v167);
          v574 = v573;
          v575 = a4[104];
          if (v575)
            v576 = *(_WORD *)(v575 + 8);
          else
            v576 = 0;
          v577 = sub_1C5D52060((uint64_t)a4, 222, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v552, v554, v576);
          v580 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v577, v578, v579, (uint64_t)v556, v558, v548, v550, SHIDWORD(v550), v569);
          v582 = v581;
          v583 = v574;
          v167 = v569;
          v585 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v572, v583, v584, (uint64_t)v556, v558, (uint64_t)v552, v554, SHIDWORD(v554), v569);
          v587 = v586;
          v589 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v556, v558, v588, (uint64_t)v580, v582, (uint64_t)v556, v558, SHIDWORD(v558), v569);
          v591 = v590;
          v592 = a4[104];
          if (v592)
            v593 = *(_WORD *)(v592 + 8);
          else
            v593 = 0;
          LODWORD(v163) = v709;
          LODWORD(v534) = v674;
          v164 = v676;
          v452 = (uint64_t *)v724;
          v594 = sub_1C5D52060((uint64_t)a4, 222, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v585, v587, v593);
          v597 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v594, v595, v596, (uint64_t)v585, v587, v724, v715, SHIDWORD(v715), v167);
          v4 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v597, v598, v599, (uint64_t)v589, v591, (uint64_t)v585, v587, SHIDWORD(v587), v167);
          v562 = v600;
          v530 = v701;
        }
        else
        {
          v4 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v532, v534, v531, (uint64_t)v452, v454, v167);
          v562 = v561;
          if (v703)
          {
            v563 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
            v566 = a4[104];
            if (v566)
              LOWORD(v566) = *(_WORD *)(v566 + 8);
            v4 = sub_1C5D56C70((uint64_t)a4, 212, (const llvm::APInt *)&v735, (llvm *)9, 0, (uint64_t)v4, v562, v565, (uint64_t)v563, v564, v566);
            v562 = v567;
          }
        }
        if (!*(_BYTE *)(*(_QWORD *)v530 + 353))
        {
          v613 = v452;
          v614 = v534;
          v702 = v530;
          *((_QWORD *)&v746 + 1) = v680;
          v615 = v680[2] + 64;
          if (v615 > 0x7F)
          {
            v664 = (_QWORD *)operator new[]();
            v747 = v664;
            BYTE4(v748) = 3;
            LODWORD(v748) = v680[1] - 1;
            *v664 = 0;
            bzero(v664 + 1, 8 * ((v615 >> 6) - 2) + 8);
          }
          else
          {
            BYTE4(v748) = 3;
            LODWORD(v748) = v680[1] - 1;
            v747 = 0;
          }
          sub_1C47A8F34((uint64_t)&v746, 0);
          v725 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)v693, v695, 0);
          v710 = v616;
          if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v747);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
          {
            MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
          }
          *((_QWORD *)&v746 + 1) = v681;
          v617 = v681[2] + 64;
          v618 = v613;
          if (v617 > 0x7F)
          {
            v665 = (_QWORD *)operator new[]();
            v747 = v665;
            BYTE4(v748) = 3;
            LODWORD(v748) = v681[1] - 1;
            *v665 = 0;
            bzero(v665 + 1, 8 * ((v617 >> 6) - 2) + 8);
          }
          else
          {
            BYTE4(v748) = 3;
            LODWORD(v748) = v681[1] - 1;
            v747 = 0;
          }
          LODWORD(v534) = v614;
          sub_1C47A8F34((uint64_t)&v746, 0);
          v619 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, v686, v684, 0);
          v621 = v620;
          if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v747);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
          {
            MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
          }
          v4 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v164, v163, (uint64_t)v725, v710, (uint64_t)v619, v621, (uint64_t)v4, v562, SHIDWORD(v562), 1u);
          v562 = v622;
          *((_WORD *)v4 + 36) = v167;
          v452 = v618;
          v530 = v702;
        }
        if (v733)
        {
          DWORD2(v745) = 32;
          *(_QWORD *)&v745 = 931135488;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v746 + 8), (const llvm::APInt **)&v745);
          v734 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)0xA, 0, 0);
          v603 = v602;
          if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v747);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
          {
            MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
          }
          if (!*(_BYTE *)(*(_QWORD *)v530 + 353)
            || (v604 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 1.0),
                v4 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v678, v534, (uint64_t)v604, v605, (uint64_t)v452, v715, (uint64_t)v4, v562, SHIDWORD(v562), 1u), v562 = v606, *((_WORD *)v4 + 36) = v167, *(_BYTE *)(*(_QWORD *)v530 + 354)))
          {
            v607 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v4, v562, v601, (uint64_t)v734, v603, v167);
            v4 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v164, v163, v692, v690, (uint64_t)v607, v608, (uint64_t)v4, v562, SHIDWORD(v562), 4u);
            *((_WORD *)v4 + 36) = v167;
          }
        }
        goto LABEL_122;
    }
  }
  switch(*(_WORD *)(a2 + 24))
  {
    case '.':
      v62 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 80);
      v63 = (int *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u)
        v63 = *(int **)v63;
      return sub_1C490006C(0, *v63, a2, a3, a4);
    case '/':
      v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
      v65 = (_QWORD *)(v64 + 24);
      if (*(_DWORD *)(v64 + 32) >= 0x41u)
        v65 = (_QWORD *)*v65;
      v66 = *(_DWORD *)v65;
      if ((*(_DWORD *)v65 - 1282) > 0x18F)
      {
        *(_QWORD *)&v746 = &v747;
        *((_QWORD *)&v746 + 1) = 0x200000000;
        llvm::GPUSDISel::ExpandIntrinsicSample(a2, (uint64_t)a4, v66, (unsigned int *)&v746, 4, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C48ED834, 0, 1, 25);
        v69 = DWORD2(v746);
        if (DWORD2(v746) == 1)
          v4 = *(uint64_t **)v746;
        if ((_QWORD **)v746 != &v747)
          free((void *)v746);
        if (v69 != 1)
          return 0;
      }
      else
      {
        *(_QWORD *)&v746 = &v747;
        *((_QWORD *)&v746 + 1) = 0x200000000;
        llvm::GPUSDISel::ExpandIntrinsicSample(a2, (uint64_t)a4, v66, (unsigned int *)&v746, 4, (uint64_t (*)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1C48ED834, 0, 1, 25);
        v67 = DWORD2(v746);
        if (DWORD2(v746) == 1)
        {
          v68 = (_QWORD **)v746;
          v4 = *(uint64_t **)v746;
        }
        else
        {
          v365 = v743;
          v366 = *(unsigned __int8 **)(v743 + 64);
          v735 = v366;
          if (v366)
          {
            llvm::MetadataTracking::track((uint64_t)&v735, v366, 2);
            v367 = v743;
            v67 = DWORD2(v746);
          }
          else
          {
            v367 = v743;
          }
          v736 = *(_DWORD *)(v365 + 60);
          v502 = v67;
          v503 = a4[104];
          if (v503)
            v504 = *(_WORD *)(v503 + 8);
          else
            v504 = 0;
          v4 = sub_1C636D410((uint64_t)a4, (const char *)0x37, (const llvm::APInt *)&v735, *(_QWORD *)(v367 + 40), *(unsigned __int16 *)(v367 + 58), (uint64_t *)v746, v502, v504);
          if (v735)
            llvm::MetadataTracking::untrack((uint64_t)&v735, v735);
          v68 = (_QWORD **)v746;
        }
        if (v68 != &v747)
          free(v68);
      }
      return v4;
    case '0':
      return sub_1C4902578(1, a2, a3, a4, *(_BYTE **)(a1 + 184296), 0);
    case '1':
    case '2':
    case '3':
    case '4':
    case '6':
    case '7':
LABEL_376:
      __break(1u);
      JUMPOUT(0x1C490BB9CLL);
    case '5':
      if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) != 5)
        return 0;
      v29 = *(unsigned int **)(a2 + 32);
      v30 = *(_QWORD *)v29;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v29 + 40) + 16 * v29[2]) != 6)
        return 0;
      v31 = *(unsigned __int8 **)(a2 + 64);
      *(_QWORD *)&v746 = v31;
      if (v31)
      {
        llvm::MetadataTracking::track((uint64_t)&v746, v31, 2);
        v29 = *(unsigned int **)(v743 + 32);
        v30 = *(_QWORD *)v29;
      }
      DWORD2(v746) = *((_DWORD *)v7 + 15);
      v32 = *((_QWORD *)v29 + 1);
      v33 = a4[104];
      if (v33)
        v34 = *(_WORD *)(v33 + 8);
      else
        v34 = 0;
      v137 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v746, (llvm *)0x31, 0, v30, v32, v34);
      v139 = *(_QWORD *)(v743 + 32);
      v140 = *(_QWORD *)(v139 + 40);
      v141 = *(_QWORD *)(v139 + 48);
      v142 = a4[104];
      if (v142)
        LOWORD(v142) = *(_WORD *)(v142 + 8);
      v84 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v746, (llvm *)5, 0, (uint64_t)v137, v136, v138, v140, v141, v142);
      goto LABEL_94;
    case '8':
    case '9':
      v10 = *(unsigned __int8 **)(a2 + 64);
      v737 = v10;
      if (v10)
        llvm::MetadataTracking::track((uint64_t)&v737, v10, 2);
      v738 = *((_DWORD *)v7 + 15);
      v4 = sub_1C498FE70((uint64_t)v7, a4, (const llvm::APInt *)&v737);
      v11 = v737;
      if (!v737)
        return v4;
      v12 = &v737;
      goto LABEL_124;
    case ':':
      if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) != 6)
        return 0;
      v38 = *(_QWORD *)(a1 + 184296);
      v39 = *(unsigned __int8 **)(a2 + 64);
      v735 = v39;
      if (v39)
        llvm::MetadataTracking::track((uint64_t)&v735, v39, 2);
      v736 = *((_DWORD *)v7 + 15);
      v40 = (uint64_t *)v7[4];
      if (*(_BYTE *)(v38 + 357))
      {
        v41 = *v40;
        goto LABEL_232;
      }
      v41 = *v40;
      v42 = v40[5];
      v43 = *(unsigned __int16 *)(*v40 + 24);
      v44 = *(unsigned __int16 *)(v42 + 24);
      if (v43 == 35 || v43 == 11)
        v46 = *v40;
      else
        v46 = 0;
      if (v44 != 35 && v44 != 11)
        v42 = 0;
      if (!v46)
        goto LABEL_134;
      v48 = *(_QWORD *)(v46 + 80);
      v49 = *(_DWORD *)(v48 + 32);
      if (v49 > 0x40)
      {
        v46 = **(_QWORD **)(v48 + 24);
        if (HIDWORD(v46))
        {
          if (v46 > 0x7FFFFFFF)
            goto LABEL_55;
LABEL_133:
          LODWORD(v46) = v46 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_134:
          if (!v42)
            goto LABEL_143;
          v143 = *(_QWORD *)(v42 + 80);
          v144 = *(_DWORD *)(v143 + 32);
          if (v144 > 0x40)
          {
            v42 = **(_QWORD **)(v143 + 24);
            if (HIDWORD(v42))
            {
              if (v42 > 0x7FFFFFFF)
                goto LABEL_138;
LABEL_142:
              LODWORD(v42) = v42 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_143:
              if ((v43 & 0xFFFE) == 0xC6)
                v146 = 1;
              else
                v146 = v46;
              v147 = v42 ^ 1;
              if (v44 == 198)
                v147 = 0;
              if (v44 == 199)
                v148 = 0;
              else
                v148 = v147;
              if (v146 == 1 && v148 == 0)
              {
LABEL_156:
                if (v735)
                  llvm::MetadataTracking::untrack((uint64_t)&v735, v735);
                return v7;
              }
LABEL_232:
              v362 = v40[1];
              v363 = a4[104];
              if (v363)
                v364 = *(_WORD *)(v363 + 8);
              else
                v364 = 0;
              v368 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0x31, 0, v41, v362, v364);
              v370 = v369;
              v371 = 0;
              v372 = v7[4];
              v373 = *(_QWORD *)(v372 + 40);
              v374 = *(_QWORD *)(v372 + 48);
              v375 = a4[104];
              if (v375)
                v371 = *(_WORD *)(v375 + 8);
              v376 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0x31, 0, v373, v374, v371);
              v378 = v377;
              v379 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
              v382 = 0;
              v383 = a4[104];
              if (v383)
                v382 = *(_WORD *)(v383 + 8);
              v384 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v368, v370, v381, (uint64_t)v379, v380, v382);
              v386 = v385;
              v387 = sub_1C6366AB4((uint64_t)a4, 1, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
              v390 = 0;
              v391 = a4[104];
              if (v391)
                v390 = *(_WORD *)(v391 + 8);
              v731 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v368, v370, v389, (uint64_t)v387, v388, v390);
              v393 = v392;
              v394 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
              v397 = 0;
              v398 = a4[104];
              if (v398)
                v397 = *(_WORD *)(v398 + 8);
              v399 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v376, v378, v396, (uint64_t)v394, v395, v397);
              v401 = v400;
              v402 = sub_1C6366AB4((uint64_t)a4, 1, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
              v405 = 0;
              v406 = a4[104];
              if (v406)
                v405 = *(_WORD *)(v406 + 8);
              v407 = sub_1C5D56C70((uint64_t)a4, 148, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v376, v378, v404, (uint64_t)v402, v403, v405);
              v409 = v408;
              if (*(_BYTE *)(v38 + 357))
              {
                *(_QWORD *)&v745 = v735;
                if (v735)
                  llvm::MetadataTracking::track((uint64_t)&v745, v735, 2);
                DWORD2(v745) = v736;
                sub_1C614C1C0((uint64_t)v384, v386, (uint64_t)v731, v393, (uint64_t)v399, v401, (uint64_t)v407, v409, (uint64_t **)&v746, (uint64_t)a4, (const llvm::APInt *)&v745);
                if ((_QWORD)v745)
                  llvm::MetadataTracking::untrack((uint64_t)&v745, (unsigned __int8 *)v745);
                v440 = a4[104];
                if (v440)
                  LOWORD(v440) = *(_WORD *)(v440 + 8);
                v436 = sub_1C5D56C70((uint64_t)a4, 146, (const llvm::APInt *)&v735, (llvm *)0x31, 0, v746, *((unint64_t *)&v746 + 1), v439, (uint64_t)v747, v748, v440);
                v441 = a4[104];
                if (v441)
                  v438 = *(_WORD *)(v441 + 8);
                else
                  v438 = 0;
              }
              else
              {
                v410 = sub_1C636A8B4((uint64_t)a4, 5, 0, 5, 0);
                v414 = sub_1C636D6B4((uint64_t)a4, (const char *)0x40, (const llvm::APInt *)&v735, v410, v411, (uint64_t)v384, v386, v412, (uint64_t)v399, v401);
                v415 = a4[104];
                v721 = v416;
                if (v415)
                  LOWORD(v415) = *(_WORD *)(v415 + 8);
                v418 = sub_1C5D56C70((uint64_t)a4, 58, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v384, v386, v413, (uint64_t)v407, v409, v415);
                v420 = v409 & 0xFFFFFFFF00000000 | v419;
                v421 = a4[104];
                if (v421)
                  LOWORD(v421) = *(_WORD *)(v421 + 8);
                v423 = sub_1C5D56C70((uint64_t)a4, 58, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v731, v393, v417, (uint64_t)v399, v401, v421);
                v425 = v393 & 0xFFFFFFFF00000000 | v424;
                v426 = a4[104];
                if (v426)
                  LOWORD(v426) = *(_WORD *)(v426 + 8);
                v428 = sub_1C5D56C70((uint64_t)a4, 56, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v414, 1uLL, v422, (uint64_t)v418, v420, v426);
                v430 = a4[104];
                if (v430)
                  LOWORD(v430) = *(_WORD *)(v430 + 8);
                v431 = sub_1C5D56C70((uint64_t)a4, 56, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v428, v427, v429, (uint64_t)v423, v425, v430);
                v434 = a4[104];
                if (v434)
                  LOWORD(v434) = *(_WORD *)(v434 + 8);
                v436 = sub_1C5D56C70((uint64_t)a4, 146, (const llvm::APInt *)&v735, (llvm *)0x31, 0, (uint64_t)v414, v721, v433, (uint64_t)v431, v432, v434);
                v437 = a4[104];
                if (v437)
                  v438 = *(_WORD *)(v437 + 8);
                else
                  v438 = 0;
              }
              v7 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)6, 0, (uint64_t)v436, v435, v438);
              goto LABEL_156;
            }
          }
          else
          {
            v145 = *(_QWORD *)(v143 + 24);
            if (HIDWORD(v145))
            {
              v42 = (uint64_t)(v145 << -(char)v144) >> -(char)v144;
              if (v42 >= 0x80000000)
              {
LABEL_138:
                LODWORD(v42) = 0;
                goto LABEL_143;
              }
              goto LABEL_142;
            }
          }
          LODWORD(v42) = 1;
          goto LABEL_143;
        }
      }
      else
      {
        v50 = *(_QWORD *)(v48 + 24);
        if (HIDWORD(v50))
        {
          v46 = (uint64_t)(v50 << -(char)v49) >> -(char)v49;
          if (v46 >= 0x80000000)
          {
LABEL_55:
            LODWORD(v46) = 0;
            goto LABEL_134;
          }
          goto LABEL_133;
        }
      }
      LODWORD(v46) = 1;
      goto LABEL_134;
    default:
      if (v9 != 13)
      {
        v60 = *(unsigned __int8 **)(a2 + 64);
        v735 = v60;
        if (v60)
        {
          llvm::MetadataTracking::track((uint64_t)&v735, v60, 2);
          v61 = (uint64_t *)v743;
          v6 = v744;
        }
        else
        {
          v61 = v7;
        }
        v736 = *((_DWORD *)v7 + 15);
        v103 = v61[4];
        v104 = v61[5] + 16 * v6;
        v105 = *(llvm **)v104;
        v106 = *(_QWORD *)(v104 + 8);
        v107 = *(_QWORD *)v103;
        v108 = *(_QWORD *)(v103 + 8);
        v110 = *(_QWORD *)(v103 + 40);
        v109 = *(_QWORD *)(v103 + 48);
        v111 = *((_WORD *)v61 + 36);
        v112 = *(_QWORD *)v104;
        if ((*(_WORD *)(*a4 + 1020) & 1) == 0 && (v111 & 0x80) == 0 && v112 == 10)
        {
          v174 = a4[104];
          v675 = v111;
          if (v174)
            v175 = *(_WORD *)(v174 + 8);
          else
            v175 = 0;
          v677 = *(_QWORD *)(v103 + 8);
          v679 = *(_QWORD *)v103;
          v177 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)5, 0, v107, v108, v175);
          v711 = v178;
          v716 = (uint64_t)v177;
          v179 = 0;
          v180 = a4[104];
          if (v180)
            v179 = *(_WORD *)(v180 + 8);
          v181 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)5, 0, v110, v109, v179);
          v697 = v182;
          v704 = (uint64_t)v181;
          v183 = sub_1C6366AB4((uint64_t)a4, 2139095040, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v185 = v184;
          v186 = sub_1C6366AB4((uint64_t)a4, -2139095041, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v188 = v187;
          v190 = sub_1C6366AB4((uint64_t)a4, 1, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v192 = v191;
          v193 = 0;
          v194 = a4[104];
          if (v194)
            v193 = *(_WORD *)(v194 + 8);
          v196 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v735, (llvm *)5, 0, v716, v711, v189, (uint64_t)v183, v185, v193);
          v198 = v197;
          v199 = 0;
          v200 = a4[104];
          if (v200)
            v199 = *(_WORD *)(v200 + 8);
          v202 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v735, (llvm *)5, 0, v704, v697, v195, (uint64_t)v183, v185, v199);
          v685 = v203;
          v204 = 0;
          v205 = a4[104];
          if (v205)
            v204 = *(_WORD *)(v205 + 8);
          v667 = v198;
          v668 = (uint64_t)v196;
          v207 = sub_1C5D56C70((uint64_t)a4, 57, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v196, v198, v201, (uint64_t)v190, v192, v204);
          v209 = v208;
          v210 = 0;
          v211 = a4[104];
          if (v211)
            v210 = *(_WORD *)(v211 + 8);
          v670 = v192;
          v666 = (uint64_t)v202;
          v212 = sub_1C5D56C70((uint64_t)a4, 57, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v202, v685, v206, (uint64_t)v190, v192, v210);
          v214 = v213;
          v215 = sub_1C6366AB4((uint64_t)a4, 2130706432, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v694 = v216;
          v696 = (uint64_t)v215;
          v687 = sub_1C6366AB4((uint64_t)a4, 1065353216, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v729 = v217;
          v218 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, (uint64_t)v207, v209, (uint64_t)v212, v214, (uint64_t)v207, v209, (uint64_t)v212, v214, SHIDWORD(v214), 0xAu);
          v689 = v220;
          v691 = (uint64_t)v218;
          v221 = 0;
          v222 = a4[104];
          if (v222)
            v221 = *(_WORD *)(v222 + 8);
          v224 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v735, (llvm *)5, 0, v716, v711, v219, (uint64_t)v186, v188, v221);
          v226 = v225;
          v227 = 0;
          v228 = a4[104];
          if (v228)
            v227 = *(_WORD *)(v228 + 8);
          v230 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v735, (llvm *)5, 0, v704, v697, v223, (uint64_t)v186, v188, v227);
          v682 = v231;
          v232 = 0;
          v233 = a4[104];
          if (v233)
            v232 = *(_WORD *)(v233 + 8);
          v671 = (uint64_t)v190;
          v672 = v185;
          v673 = (uint64_t)v183;
          v235 = sub_1C5D56C70((uint64_t)a4, 172, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v224, v226, v229, (uint64_t)v687, v729, v232);
          v236 = 0;
          v237 = v226 & 0xFFFFFFFF00000000;
          v239 = v226 & 0xFFFFFFFF00000000 | v238;
          v240 = a4[104];
          if (v240)
            v236 = *(_WORD *)(v240 + 8);
          v241 = sub_1C5D56C70((uint64_t)a4, 172, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v230, v682, v234, (uint64_t)v687, v729, v236);
          v243 = v682 & 0xFFFFFFFF00000000 | v242;
          v717 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v691, v689, v696, v694, v716, v711, (uint64_t)v235, v239, SHIDWORD(v239), 0xAu);
          v669 = v237;
          v245 = v244 | v237;
          v246 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v691, v689, v696, v694, v704, v697, (uint64_t)v241, v243, SHIDWORD(v243), 0xAu);
          v247 = 0;
          v249 = v682 & 0xFFFFFFFF00000000 | v248;
          v250 = a4[104];
          if (v250)
            v247 = *(_WORD *)(v250 + 8);
          v251 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v717, v245, v247);
          v705 = v252;
          v712 = (uint64_t)v251;
          v253 = 0;
          v254 = a4[104];
          if (v254)
            v253 = *(_WORD *)(v254 + 8);
          v256 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v246, v249, v253);
          v698 = v257;
          v258 = 0;
          v259 = a4[104];
          if (v259)
            v258 = *(_WORD *)(v259 + 8);
          v262 = sub_1C5D56C70((uint64_t)a4, 57, (const llvm::APInt *)&v735, (llvm *)5, 0, v668, v667, v255, v666, v685, v258);
          v263 = v260;
          v264 = 0;
          v265 = a4[104];
          if (v265)
            v264 = *(_WORD *)(v265 + 8);
          v267 = sub_1C5D56C70((uint64_t)a4, 177, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v262, v260, v261, v671, v670, v264);
          v269 = v266;
          v270 = 0;
          v271 = a4[104];
          if (v271)
            v270 = *(_WORD *)(v271 + 8);
          v272 = sub_1C5D56C70((uint64_t)a4, 171, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v267, v266, v268, v673, v672, v270);
          v275 = (uint64_t)v272;
          v276 = 0;
          v277 = v269 & 0xFFFFFFFF00000000 | v273;
          v278 = a4[104];
          if (v278)
            v276 = *(_WORD *)(v278 + 8);
          v718 = v269 & 0xFFFFFFFF00000000;
          v280 = sub_1C5D56C70((uint64_t)a4, 57, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v262, v263, v274, (uint64_t)v272, v269 & 0xFFFFFFFF00000000 | v273, v276);
          v282 = v281;
          v283 = 0;
          v284 = a4[104];
          if (v284)
            v283 = *(_WORD *)(v284 + 8);
          v286 = sub_1C5D56C70((uint64_t)a4, 56, (const llvm::APInt *)&v735, (llvm *)5, 0, v275, v277, v279, (uint64_t)v687, v729, v283);
          v287 = 0;
          v289 = v288 | v718;
          v290 = a4[104];
          if (v290)
            v287 = *(_WORD *)(v290 + 8);
          v291 = v698 | v682 & 0xFFFFFFFF00000000;
          v292 = sub_1C5D56C70((uint64_t)a4, 56, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v280, v282, v285, (uint64_t)v687, v729, v287);
          v293 = 0;
          v295 = v282 & 0xFFFFFFFF00000000 | v294;
          v296 = a4[104];
          if (v296)
            v293 = *(_WORD *)(v296 + 8);
          v699 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v286, v289, v293);
          v298 = 0;
          v299 = a4[104];
          if (v299)
            v298 = *(_WORD *)(v299 + 8);
          v300 = v705;
          v301 = v297;
          v706 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v292, v295, v298);
          v303 = 0;
          v304 = a4[104];
          if (v304)
            v303 = *(_WORD *)(v304 + 8);
          v305 = v300 | v669;
          v688 = v301 | v718;
          v719 = v302 | v282 & 0xFFFFFFFF00000000;
          v306 = (uint64_t)v256;
          v307 = v291;
          v308 = sub_1C5D52060((uint64_t)a4, 417, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v256, v291, v303);
          v730 = v309;
          v310 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 1.0);
          v312 = v311;
          v313 = 0;
          v314 = a4[104];
          if (v314)
            v313 = *(_WORD *)(v314 + 8);
          v683 = sub_1C5D52060((uint64_t)a4, 222, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v306, v307, v313);
          v316 = v315;
          v318 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v308, v730, v317, (uint64_t)v683, v315, (uint64_t)v310, v312, SHIDWORD(v312), v675);
          v321 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v318, v319, v320, (uint64_t)v308, v730, (uint64_t)v308, v730, SHIDWORD(v730), v675);
          v323 = v322;
          v325 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v712, v305, v324, (uint64_t)v321, v322, v675);
          v326 = v305;
          v327 = (uint64_t)v325;
          v329 = v328;
          v331 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v683, v316, v330, (uint64_t)v325, v328, v712, v326, SHIDWORD(v326), v675);
          v334 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v331, v332, v333, (uint64_t)v321, v323, v327, v329, SHIDWORD(v329), v675);
          v336 = v335;
          v338 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v334, v335, v337, (uint64_t)v699, v688, v675);
          v720 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v338, v336 & 0xFFFFFFFF00000000 | v339, v340, (uint64_t)v706, v719, v675);
          v342 = v341;
          v344 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v306, v307, v343, (uint64_t)v308, v730, v675);
          v707 = v345;
          v713 = (uint64_t)v344;
          v346 = 0;
          v347 = a4[104];
          if (v347)
            v346 = *(_WORD *)(v347 + 8);
          v348 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v308, v730, v346);
          v350 = v349;
          v351 = sub_1C6366AB4((uint64_t)a4, 0x800000, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
          v354 = a4[104];
          if (v354)
            LOWORD(v354) = *(_WORD *)(v354 + 8);
          v355 = v336 & 0xFFFFFFFF00000000 | v342;
          v356 = sub_1C5D56C70((uint64_t)a4, 172, (const llvm::APInt *)&v735, (llvm *)5, 0, (uint64_t)v348, v350, v353, (uint64_t)v351, v352, v354);
          v357 = v350 & 0xFFFFFFFF00000000;
          v359 = v350 & 0xFFFFFFFF00000000 | v358;
          v360 = a4[104];
          if (v360)
            v361 = *(_WORD *)(v360 + 8);
          else
            v361 = 0;
          v442 = sub_1C5D52060((uint64_t)a4, 216, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v356, v359, v361);
          v444 = v443 | v357;
          v445 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 0.0);
          v447 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v713, v707, (uint64_t)v445, v446, (uint64_t)v442, v444, (uint64_t)v308, v730, SHIDWORD(v730), 1u);
          v450 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v447, v448 | v357, v449, v679, v677, v675);
          v134 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v691, v689, v696, v694, (uint64_t)v450, v451 | v357, (uint64_t)v720, v355, SHIDWORD(v355), 0xAu);
LABEL_121:
          v4 = v134;
LABEL_122:
          v11 = v735;
          if (v735)
          {
            v12 = &v735;
LABEL_124:
            llvm::MetadataTracking::untrack((uint64_t)v12, v11);
          }
          return v4;
        }
        v113 = *(unsigned __int16 *)(v110 + 24);
        if (v113 == 36 || v113 == 12)
        {
          v115 = *(_QWORD *)(v110 + 80);
          if (*(_UNKNOWN **)(v115 + 32) == &unk_1C866F1C0)
            v116 = *(_BYTE *)(*(_QWORD *)(v115 + 40) + 28);
          else
            v116 = *(_BYTE *)(v115 + 52);
          if ((v116 & 7) == 3)
          {
            v727 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, (_BOOL8)v105, v106, 0, 0.0);
            v121 = v120;
            v122 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, (_BOOL8)v105, v106, 0, NAN);
            v123 = v111;
            v125 = v124;
            v126 = -INFINITY;
            if ((v116 & 8) == 0)
              v126 = INFINITY;
            v127 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, (_BOOL8)v105, v106, 0, v126);
            v128 = v125;
            v111 = v123;
            v117 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, v107, v108, (uint64_t)v727, v121, (uint64_t)v122, v128, (uint64_t)v127, v129, v130, 9u);
          }
          else
          {
            v131 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, (_BOOL8)v105, v106, 0, 1.0);
            v117 = sub_1C5D56C70((uint64_t)a4, 99, (const llvm::APInt *)&v735, v105, v106, (uint64_t)v131, v132, v133, v110, v109, v111);
          }
          goto LABEL_120;
        }
        if (v112 != 9)
        {
          v117 = sub_1C5D52060((uint64_t)a4, 417, (const llvm::APInt *)&v735, v105, v106, *(_QWORD *)(v103 + 40), *(_QWORD *)(v103 + 48), v111);
LABEL_120:
          v134 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, v105, v106, v107, v108, v119, (uint64_t)v117, v118, v111);
          goto LABEL_121;
        }
        v456 = a4[104];
        if (v456)
          v457 = *(_WORD *)(v456 + 8);
        else
          v457 = 0;
        v505 = sub_1C5D52060((uint64_t)a4, 215, (const llvm::APInt *)&v735, (llvm *)0xA, 0, *(_QWORD *)v103, *(_QWORD *)(v103 + 8), v457);
        v507 = v506;
        v508 = 0;
        v509 = a4[104];
        if (v509)
          v508 = *(_WORD *)(v509 + 8);
        v510 = sub_1C5D52060((uint64_t)a4, 215, (const llvm::APInt *)&v735, (llvm *)0xA, 0, v110, v109, v508);
        v512 = v511;
        v516 = sub_1C5D52060((uint64_t)a4, 417, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v510, v511, v111);
        v517 = v513;
        v518 = a1 + 184296;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 347) && (v519 = *(_QWORD *)(v743 + 48)) != 0)
        {
          while (1)
          {
            v520 = *(_QWORD *)(v519 + 16);
            v521 = *(unsigned __int16 *)(v520 + 24);
            v746 = *(_OWORD *)*(_QWORD *)(v520 + 40);
            if (v521 != 215 || (unint64_t)sub_1C6131328((unsigned __int8 *)&v746, v513, v514) < 0x10)
              break;
            v519 = *(_QWORD *)(v519 + 32);
            if (!v519)
              goto LABEL_303;
          }
          v630 = sub_1C5D56C70((uint64_t)a4, 421, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v505, v507, v515, (uint64_t)v516, v517, v111);
        }
        else
        {
LABEL_303:
          v732 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v505, v507, v515, (uint64_t)v516, v517, v111);
          v523 = v522;
          if (v111 & 0x80 | *(_WORD *)(*a4 + 1020) & 1)
          {
            v524 = (uint64_t)v732;
LABEL_373:
            v660 = sub_1C6366AB4((uint64_t)a4, 0, (const llvm::APInt *)&v735, (llvm *)5, 0, 0, 0);
            v663 = a4[104];
            if (v663)
              LOWORD(v663) = *(_WORD *)(v663 + 8);
            v134 = sub_1C5D56C70((uint64_t)a4, 212, (const llvm::APInt *)&v735, (llvm *)9, 0, v524, v523, v662, (uint64_t)v660, v661, v663);
            goto LABEL_121;
          }
          if (*(_BYTE *)(*(_QWORD *)v518 + 323))
          {
            v611 = a4[104];
            if (v611)
              v612 = *(_WORD *)(v611 + 8);
            else
              v612 = 0;
            v726 = sub_1C5D52060((uint64_t)a4, 223, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v732, v522, v612);
            v650 = v649;
            DWORD2(v745) = 32;
            *(_QWORD *)&v745 = 947912704;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v746 + 8), (const llvm::APInt **)&v745);
            v651 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)0xA, 0, 0);
            v653 = v652;
            if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v747);
            }
            else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
            {
              MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
            }
            DWORD2(v745) = 32;
            *(_QWORD *)&v745 = 1065357312;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v746 + 8), (const llvm::APInt **)&v745);
            v655 = sub_1C6366D08((uint64_t)a4, (llvm::LLVMContext *)&v746, (const llvm::APFloat *)&v735, (llvm *)0xA, 0, 0);
            v657 = v656;
            if (*((_UNKNOWN **)&v746 + 1) == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v747);
            }
            else if ((*(_DWORD *)(*((_QWORD *)&v746 + 1) + 8) - 64) <= 0xFFFFFF7F && v747)
            {
              MEMORY[0x1CAA32F9C](v747, 0x1000C8000313F17);
            }
            v658 = sub_1C5D56C70((uint64_t)a4, 98, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v732, v523, v654, (uint64_t)v655, v657, v111);
            v630 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, (uint64_t)v726, v650, (uint64_t)v651, v653, (uint64_t)v658, v659, (uint64_t)v732, v523, SHIDWORD(v523), 4u);
          }
          else
          {
            v609 = a4[104];
            if (v609)
              v610 = *(_WORD *)(v609 + 8);
            else
              v610 = 0;
            v632 = sub_1C5D52060((uint64_t)a4, 222, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v510, v512, v610);
            v635 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v632, v633, v634, (uint64_t)v732, v523, (uint64_t)v505, v507, SHIDWORD(v507), v111);
            v637 = v636;
            v639 = sub_1C5D58E08((uint64_t)a4, (const char *)0x8D, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v635, v636, v638, (uint64_t)v516, v517, (uint64_t)v732, v523, SHIDWORD(v523), v111);
            v640 = 0;
            v642 = v637 & 0xFFFFFFFF00000000 | v641;
            v643 = a4[104];
            if (v643)
              v640 = *(_WORD *)(v643 + 8);
            v644 = sub_1C5D52060((uint64_t)a4, 223, (const llvm::APInt *)&v735, (llvm *)0xA, 0, (uint64_t)v639, v642, v640);
            v646 = v645;
            v647 = sub_1C5D404C4((uint64_t)a4, (const llvm::APInt *)&v735, 10, 0, 0, 0.0);
            v630 = sub_1C47DF81C(a4, (const llvm::APInt *)&v735, (uint64_t)v644, v646, (uint64_t)v647, v648, (uint64_t)v639, v642, (uint64_t)v732, v523, SHIDWORD(v523), 2u);
          }
        }
        v524 = (uint64_t)v630;
        v523 = v631;
        goto LABEL_373;
      }
      v15 = *(unsigned __int8 **)(a2 + 64);
      *(_QWORD *)&v746 = v15;
      if (v15)
      {
        llvm::MetadataTracking::track((uint64_t)&v746, v15, 2);
        v16 = v743;
      }
      else
      {
        v16 = (uint64_t)v7;
      }
      DWORD2(v746) = *((_DWORD *)v7 + 15);
      v84 = sub_1C4903E60(v16, (uint64_t)a4);
LABEL_94:
      v4 = v84;
LABEL_95:
      v11 = (unsigned __int8 *)v746;
      if ((_QWORD)v746)
      {
        v12 = (unsigned __int8 **)&v746;
        goto LABEL_124;
      }
      return v4;
  }
}

uint64_t *sub_1C490BE38(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int ExtendedSizeInBits;
  const char *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  llvm *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int128 v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  __int128 v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  llvm *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  llvm *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t *v91;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  __int128 v103;
  __int128 v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v103 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v103)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v103);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v103);
  v7 = ExtendedSizeInBits;
  if ((_DWORD)v6 == 1)
  v8 = *(unsigned __int8 **)(a1 + 64);
  v101 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v101, v8, 2);
  v102 = *(_DWORD *)(a1 + 60);
  v9 = *(uint64_t **)(a1 + 32);
  v10 = *v9;
  v99 = v9[1];
  v11 = v9[5];
  v12 = v9[6];
  v14 = (uint64_t *)v9[10];
  v13 = v9[11];
  v104 = *(_OWORD *)(v14[5] + 16 * v13);
  if ((_BYTE)v104)
    v15 = sub_1C47A8C74((unsigned __int8 *)&v104);
  else
    v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v104);
  v17 = v15;
  if ((_DWORD)v16 == 1)
  v18 = v7;
  if (v17 < v7)
  {
    v20 = *((_QWORD *)&v103 + 1);
    v19 = (llvm *)v103;
    v21 = a3[104];
    if (v21)
      v22 = *(_WORD *)(v21 + 8);
    else
      v22 = 0;
    v25 = (uint64_t)a3;
    v26 = 199;
LABEL_28:
    v14 = sub_1C5D52060(v25, v26, (const llvm::APInt *)&v101, v19, v20, (uint64_t)v14, v13, v22);
    v13 = v13 & 0xFFFFFFFF00000000 | v29;
    goto LABEL_29;
  }
  v104 = *(_OWORD *)(v14[5] + 16 * v13);
  if ((_BYTE)v104)
    v23 = sub_1C47A8C74((unsigned __int8 *)&v104);
  else
    v23 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v104);
  v27 = v23;
  if ((_DWORD)v24 == 1)
  if (v27 > v18)
  {
    v20 = *((_QWORD *)&v103 + 1);
    v19 = (llvm *)v103;
    v28 = a3[104];
    if (v28)
      v22 = *(_WORD *)(v28 + 8);
    else
      v22 = 0;
    v25 = (uint64_t)a3;
    v26 = 201;
    goto LABEL_28;
  }
LABEL_29:
  v30 = v103;
  v32 = sub_1C6366AB4((uint64_t)a3, v18, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), 0, 0);
  v34 = a3[104];
  if (v34)
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  v35 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v101, (llvm *)v30, *((uint64_t *)&v30 + 1), (uint64_t)v32, v31, v33, (uint64_t)v14, v13, v34);
  v38 = a3[104];
  if (v38)
    LOWORD(v38) = *(_WORD *)(v38 + 8);
  v39 = sub_1C5D56C70((uint64_t)a3, 177, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), v10, v99, v37, (uint64_t)v35, v36, v38);
  v94 = v40;
  v41 = v103;
  v42 = sub_1C6366AB4((uint64_t)a3, v18, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), 0, 0);
  v45 = a3[104];
  if (v45)
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  v47 = sub_1C5D56C70((uint64_t)a3, 57, (const llvm::APInt *)&v101, (llvm *)v41, *((uint64_t *)&v41 + 1), (uint64_t)v14, v13, v44, (uint64_t)v42, v43, v45);
  v98 = v48;
  v49 = a3[104];
  if (v49)
    LOWORD(v49) = *(_WORD *)(v49 + 8);
  v51 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), v11, v12, v46, (uint64_t)v14, v13, v49);
  v53 = v52;
  v54 = a3[104];
  if (v54)
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  v55 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), v10, v99, v50, (uint64_t)v47, v98, v54);
  v96 = v57;
  v97 = (uint64_t)v55;
  v58 = a3[104];
  if (v58)
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  v59 = sub_1C5D56C70((uint64_t)a3, 172, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), (uint64_t)v39, v94, v56, (uint64_t)v51, v53, v58);
  v93 = v61;
  v95 = (uint64_t)v59;
  v62 = a3[104];
  v63 = (uint64_t)v47;
  if (v62)
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  v64 = sub_1C5D56C70((uint64_t)a3, 175, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), v10, v99, v60, (uint64_t)v14, v13, v62);
  v66 = v65;
  v67 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), 0, 0);
  v69 = v68;
  v70 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), 0, 0);
  v72 = v71;
  v73 = v67[5] + 16 * v69;
  v75 = *(llvm **)v73;
  v74 = *(_QWORD *)(v73 + 8);
  v76 = sub_1C6367818(a3, 0x13u);
  v79 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v101, v75, v74, v63, v98, v78, (uint64_t)v70, v72, (uint64_t)v67, v69, (uint64_t)v64, v66, v76, v77);
  v100 = v80;
  v81 = sub_1C6366AB4((uint64_t)a3, 0, (const llvm::APInt *)&v101, (llvm *)v103, *((uint64_t *)&v103 + 1), 0, 0);
  LODWORD(v67) = v82;
  v83 = *(_QWORD *)(v97 + 40) + 16 * v96;
  v84 = *(llvm **)v83;
  v85 = *(_QWORD *)(v83 + 8);
  v86 = sub_1C6367818(a3, 0x13u);
  v89 = sub_1C63698B8((uint64_t)a3, (const char *)0xC0, (const llvm::APInt *)&v101, v84, v85, v63, v98, v88, (uint64_t)v81, (int)v67, v97, v96, v95, v93, v86, v87);
  *(_QWORD *)&v104 = v79;
  DWORD2(v104) = v100;
  v105 = v89;
  v106 = v90;
  v91 = sub_1C5D5C56C((uint64_t)a3, (uint64_t *)&v104, 2uLL, (const llvm::APInt *)&v101);
  if (v101)
    llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
  return v91;
}

uint64_t sub_1C490C354(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  if (a3 <= 3)
  {
    LODWORD(v4) = a3;
    while (1)
    {
      if (!(_DWORD)v4)
      {
        result = sub_1C4914BE0(a1, a2, 0);
        if (!(_DWORD)result)
          return result;
      }
      v6 = *(unsigned __int16 *)(a1 + 24);
      if (v6 == 36 || v6 == 12)
      {
        v8 = *(_QWORD *)(a1 + 80);
        if (*(_UNKNOWN **)(v8 + 32) == &unk_1C866F1C0)
        {
          v9 = *(_BYTE *)(*(_QWORD *)(v8 + 40) + 28);
          if ((v9 & 8) != 0)
            goto LABEL_18;
        }
        else
        {
          v9 = *(_BYTE *)(v8 + 52);
          if ((v9 & 8) != 0)
            goto LABEL_18;
        }
        if ((v9 & 7) != 3)
        {
          if (!sub_1C4773C58(v8 + 24))
            return 1;
          v6 = *(unsigned __int16 *)(a1 + 24);
        }
      }
LABEL_18:
      if (v6 == 141)
      {
        v13 = *(_QWORD *)(a1 + 32);
        v11 = (uint64_t *)(v13 + 80);
        v12 = (uint64_t *)(v13 + 88);
        LODWORD(v4) = v4 + 1;
      }
      else
      {
        if (v6 != 96)
          return 0;
        v4 = (v4 + 1);
        if ((sub_1C490C354(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v4) & 1) != 0)
          return 1;
        v10 = *(_QWORD *)(a1 + 32);
        v11 = (uint64_t *)(v10 + 40);
        v12 = (uint64_t *)(v10 + 48);
      }
      a2 = *v12;
      a1 = *v11;
      if (v4 > 3)
        return 0;
    }
  }
  return 0;
}

_WORD *sub_1C490C460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *result;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;

  result = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1968))(a1, a2, 0);
  if (result)
  {
    v6 = result;
    v7 = (unsigned __int16)result[29];
    if (result[29])
    {
      if ((_DWORD)v7 == 1)
      {
        v8 = v5;
        v9 = *(unsigned int *)(a3 + 8);
        if (v9 >= *(_DWORD *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 16);
          LODWORD(v9) = *(_DWORD *)(a3 + 8);
        }
        v10 = (_QWORD *)(*(_QWORD *)a3 + 16 * v9);
        *v10 = v6;
        v10[1] = v8;
        ++*(_DWORD *)(a3 + 8);
      }
      else
      {
        v11 = 0;
        v12 = *(_DWORD *)(a3 + 8);
        do
        {
          if (v12 >= *(_DWORD *)(a3 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 16);
            v12 = *(_DWORD *)(a3 + 8);
          }
          v13 = (_QWORD *)(*(_QWORD *)a3 + 16 * v12);
          *v13 = v6;
          v13[1] = v11;
          v12 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v12;
          ++v11;
        }
        while (v7 != v11);
      }
    }
  }
  return result;
}

uint64_t *sub_1C490C558(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD **v39;
  BOOL v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  _QWORD **v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  _QWORD **v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t **v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  int FixedObject;
  unsigned __int8 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *FixedStack;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  uint64_t *v156;
  const llvm::APInt *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int v162;
  unsigned __int8 *v163;
  int v164;
  _QWORD **v165;
  _QWORD *v166[2];
  _OWORD v167[2];
  __int128 v168;
  int v169;
  char v170;
  void *v171;
  uint64_t v172;
  _BYTE v173[128];
  _BYTE v174[40];
  int v175;
  void *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[192];
  _BYTE v187[48];
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  int v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD v201[7];

  v4 = a2;
  v201[4] = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(a2 + 80);
  v158 = (const llvm::APInt *)(a2 + 88);
  v139 = *(_QWORD *)(a2 + 8);
  v137 = *(_QWORD *)(a2 + 40);
  v138 = *(_QWORD *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 32);
  v7 = (*(unsigned __int16 *)(a2 + 24) >> 2) & 1;
  v148 = *(_QWORD *)(v5[5] + 56);
  v152 = *(_QWORD *)a2;
  v8 = a1 + 23037;
  v147 = (*(uint64_t (**)(_QWORD *))(*a1[23037] + 112))(a1[23037]);
  v141 = v8;
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 176))(*v8);
  *(_BYTE *)(v4 + 26) = 0;
  v136 = v9;
  v184 = v186;
  v185 = 0x1000000000;
  v160 = v5;
  v155 = v6;
  llvm::CCState::CCState((uint64_t)v174, v6, v7, v5[5], (uint64_t)&v184, v5[7]);
  v10 = *(unsigned int *)(v4 + 120);
  v161 = v4;
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      v13 = *(_QWORD *)(v4 + 112) + v11;
      v14 = *(unsigned __int8 *)(v13 + 12);
      v15 = sub_1C47A7FD0((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v5[5] + 40) + 272, *(_QWORD *)(*(_QWORD *)(v4 + 56) + 48 * *(unsigned int *)(v13 + 36) + 24), (llvm::Type *)1);
      if (!v15)
        v15 = v14;
      if (v15 - 2 >= 3)
        v16 = v14;
      else
        v16 = 4;
      if (v6 <= 101)
      {
        v17 = sub_1C485D174;
      }
      else
      {
        v17 = sub_1C485CFE4;
        if (v6 != 106)
          v17 = sub_1C485D5B8;
        if (v6 == 102)
          v17 = sub_1C485CFF4;
      }
      v4 = v161;
      v18 = *(_QWORD *)(v161 + 112) + v11;
      v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v18 + 8);
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _BYTE *))v17)(i, v16, v16, 0, *(_QWORD *)v18, v3, v174);
      v11 += 48;
    }
  }
  v19 = *(unsigned __int8 *)(v148 + 60);
  v20 = 63 - __clz((1 << *(_BYTE *)(v147 + 12)));
  if (v19 <= v20)
    LOBYTE(v19) = v20;
  v135 = -(int)(1 << v19) & (v175 + (1 << v19) - 1);
  v143 = sub_1C61420D8((uint64_t)v5, v152, v139, v135, 0, v158);
  v144 = v139 & 0xFFFFFFFF00000000 | v21;
  v166[0] = 0;
  v166[1] = 0;
  v165 = v166;
  v171 = v173;
  v172 = 0x800000000;
  v134 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[4])(a1, *(_QWORD *)(*(_QWORD *)v5[5] + 40) + 272, 0);
  v23 = v4;
  if ((_DWORD)v185)
    __asm { BR              X9 }
  v24 = v143;
  v25 = v144;
  v26 = v137;
  if ((_DWORD)v172)
  {
    v27 = v5[104];
    if (v27)
      v28 = *(unsigned __int16 *)(v27 + 8);
    else
      v28 = 0;
    v24 = sub_1C636D0C8((uint64_t)v5, (const char *)2, v158, (llvm *)1, 0, (uint64_t *)v171, v172, v28);
    v25 = v29 | v139 & 0xFFFFFFFF00000000;
  }
  v30 = v165;
  v31 = v138;
  if (v165 == v166)
  {
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = sub_1C6132BA0((uint64_t)v160, (uint64_t)v24, v25, v158, *((_DWORD *)v30 + 8), (uint64_t)v30[5], v30[6], v22, v34, v35);
      v24 = v36;
      v38 = v30[1];
      if (v38)
      {
        do
        {
          v39 = (_QWORD **)v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD **)v30[2];
          v40 = *v39 == v30;
          v30 = v39;
        }
        while (!v40);
      }
      v25 = v25 & 0xFFFFFFFF00000000 | v37;
      v30 = v39;
      v34 = (uint64_t)v36;
      v35 = 1;
    }
    while (v39 != v166);
    v32 = 1;
    v33 = v36;
  }
  v41 = *(unsigned __int16 *)(v137 + 24);
  v149 = v32;
  v153 = v33;
  if (v41 > 0x2A)
    goto LABEL_42;
  if (((1 << v41) & 0x6000006000) == 0)
  {
    if (((1 << v41) & 0x40000040000) == 0)
    {
LABEL_42:
      v42 = v24;
      v43 = sub_1C63663BC((uint64_t)v160, v137, v138, (uint64_t)v158, 5, 0);
      goto LABEL_43;
    }
LABEL_40:
    v42 = v24;
    goto LABEL_44;
  }
  if (*(_BYTE *)(*v141 + 340))
  {
    if (v41 != 18)
      goto LABEL_42;
    goto LABEL_40;
  }
  v42 = v24;
  v43 = (uint64_t)sub_1C6366FFC((uint64_t)v160, *(_QWORD *)(v137 + 80), (uint64_t)v158, (llvm *)v134, 0, 0, 1, 0);
LABEL_43:
  v26 = v43;
  v31 = v138 & 0xFFFFFFFF00000000 | v44;
LABEL_44:
  v45 = operator new(0x10uLL);
  *v45 = v42;
  v45[1] = v25;
  v145 = v25;
  v46 = (char *)operator new(0x20uLL);
  *((_QWORD *)v46 + 2) = v26;
  *((_QWORD *)v46 + 3) = v31;
  *(_QWORD *)v46 = *v45;
  *((_DWORD *)v46 + 2) = *((_DWORD *)v45 + 2);
  v47 = v46 + 32;
  operator delete(v45);
  v48 = v165;
  if (v165 == v166)
  {
    v49 = v46 + 32;
  }
  else
  {
    v49 = v46 + 32;
    do
    {
      v50 = v48[5][5] + 16 * *((unsigned int *)v48 + 12);
      v51 = sub_1C5D428B0((uint64_t)v160, *((_DWORD *)v48 + 8), *(llvm **)v50, *(_QWORD *)(v50 + 8));
      v53 = v51;
      v54 = v52;
      if (v47 >= v49)
      {
        v55 = (v47 - v46) >> 4;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60)
          goto LABEL_165;
        if ((v49 - v46) >> 3 > v56)
          v56 = (v49 - v46) >> 3;
        if ((unint64_t)(v49 - v46) >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57)
        {
          if (v57 >> 60)
            goto LABEL_166;
          v58 = (char *)operator new(16 * v57);
        }
        else
        {
          v58 = 0;
        }
        v59 = (uint64_t *)&v58[16 * v55];
        v49 = &v58[16 * v57];
        *v59 = v53;
        v59[1] = v54;
        v60 = (char *)(v59 + 2);
        if (v47 == v46)
          goto LABEL_62;
        do
        {
          v61 = *((_QWORD *)v47 - 2);
          v47 -= 16;
          v62 = *((_DWORD *)v47 + 2);
          *(v59 - 2) = v61;
          v59 -= 2;
          *((_DWORD *)v59 + 2) = v62;
        }
        while (v47 != v46);
        if (v46)
LABEL_62:
          operator delete(v46);
        v46 = (char *)v59;
        v47 = v60;
        v23 = v161;
      }
      else
      {
        *(_QWORD *)v47 = v51;
        *((_QWORD *)v47 + 1) = v52;
        v47 += 16;
      }
      v63 = v48[1];
      if (v63)
      {
        do
        {
          v64 = (_QWORD **)v63;
          v63 = (_QWORD *)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (_QWORD **)v48[2];
          v40 = *v64 == v48;
          v48 = v64;
        }
        while (!v40);
      }
      v48 = v64;
    }
    while (v64 != v166);
  }
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v136 + 40))(v136, v160[5], v155);
  v66 = sub_1C5D42B98((uint64_t)v160, v65);
  v68 = v66;
  v69 = v67;
  if (v47 < v49)
  {
    *(_QWORD *)v47 = v66;
    *((_QWORD *)v47 + 1) = v67;
    v70 = v47 + 16;
    v71 = v25;
    goto LABEL_89;
  }
  v72 = (v47 - v46) >> 4;
  v73 = v72 + 1;
  v71 = v145;
  if ((unint64_t)(v72 + 1) >> 60)
    goto LABEL_165;
  if ((v49 - v46) >> 3 > v73)
    v73 = (v49 - v46) >> 3;
  if ((unint64_t)(v49 - v46) >= 0x7FFFFFFFFFFFFFF0)
    v74 = 0xFFFFFFFFFFFFFFFLL;
  else
    v74 = v73;
  if (v74)
  {
    if (v74 >> 60)
      goto LABEL_166;
    v75 = (char *)operator new(16 * v74);
  }
  else
  {
    v75 = 0;
  }
  v76 = (unint64_t *)&v75[16 * v72];
  v49 = &v75[16 * v74];
  *v76 = v68;
  v76[1] = v69;
  v70 = (char *)(v76 + 2);
  if (v47 == v46)
  {
    v46 = v47;
    v23 = v161;
  }
  else
  {
    v23 = v161;
    do
    {
      v77 = *((_QWORD *)v47 - 2);
      v47 -= 16;
      v78 = *((_DWORD *)v47 + 2);
      *(v76 - 2) = v77;
      v76 -= 2;
      *((_DWORD *)v76 + 2) = v78;
    }
    while (v47 != v46);
    if (!v46)
      goto LABEL_88;
  }
  operator delete(v46);
LABEL_88:
  v46 = (char *)v76;
LABEL_89:
  if (!v153)
  {
    v79 = v70;
    goto LABEL_107;
  }
  if (v70 < v49)
  {
    *(_QWORD *)v70 = v153;
    *((_QWORD *)v70 + 1) = v149;
    v79 = v70 + 16;
    goto LABEL_107;
  }
  v80 = (v70 - v46) >> 4;
  v81 = v80 + 1;
  if ((unint64_t)(v80 + 1) >> 60)
LABEL_165:
    abort();
  if ((v49 - v46) >> 3 > v81)
    v81 = (v49 - v46) >> 3;
  if ((unint64_t)(v49 - v46) >= 0x7FFFFFFFFFFFFFF0)
    v81 = 0xFFFFFFFFFFFFFFFLL;
  if (!v81)
  {
    v82 = 0;
    goto LABEL_102;
  }
  if (v81 >> 60)
LABEL_166:
    sub_1C4764EE4();
  v82 = (char *)operator new(16 * v81);
LABEL_102:
  v83 = &v82[16 * v80];
  *(_QWORD *)v83 = v153;
  *((_QWORD *)v83 + 1) = v149;
  v79 = v83 + 16;
  if (v70 == v46)
    goto LABEL_105;
  do
  {
    v84 = *((_QWORD *)v70 - 2);
    v70 -= 16;
    v85 = *((_DWORD *)v70 + 2);
    *((_QWORD *)v83 - 2) = v84;
    v83 -= 16;
    *((_DWORD *)v83 + 2) = v85;
  }
  while (v70 != v46);
  if (v46)
LABEL_105:
    operator delete(v46);
  v46 = v83;
  v23 = v161;
LABEL_107:
  v87 = sub_1C636A8B4((uint64_t)v160, 1, 0, 172, 0);
  v88 = 0;
  v89 = v160[104];
  if (v89)
    v88 = *(_WORD *)(v89 + 8);
  v154 = v23 + 2192;
  v90 = sub_1C636D410((uint64_t)v160, (const char *)0x18A, v158, v87, v86, (uint64_t *)v46, (v79 - v46) >> 4, v88);
  v92 = v71 & 0xFFFFFFFF00000000 | v91;
  v93 = sub_1C63662D4((uint64_t)v160, v135, v158, 1);
  v150 = v94;
  v95 = sub_1C63662D4((uint64_t)v160, (v135 + 15) & 0x1FFFFFFF0, v158, 1);
  v98 = sub_1C490D7F0((uint64_t)v160, (uint64_t)v90, v92, (uint64_t)v93, v150, (uint64_t)v95, v96, v97, (uint64_t)v90, 1, v158);
  v99 = v98;
  v101 = v100;
  if (*(_DWORD *)(v23 + 2200))
    v90 = v98;
  v102 = *(unsigned __int8 **)(v23 + 88);
  v163 = v102;
  if (v102)
    llvm::MetadataTracking::track((uint64_t)&v163, v102, 2);
  v164 = *(_DWORD *)(v23 + 96);
  v162 = v101;
  v199 = v201;
  v200 = 0x400000000;
  v196 = &v198;
  v197 = 0x1000000000;
  llvm::CCState::CCState((uint64_t)v187, v155, 0, v160[5], (uint64_t)&v196, v160[7]);
  if (v155 > 100)
  {
    v103 = sub_1C485C6D4;
    if (v155 == 101)
    {
      v104 = a3;
    }
    else
    {
      v104 = a3;
      if (v155 != 108)
        v103 = sub_1C485CC1C;
    }
  }
  else
  {
    v103 = sub_1C485C854;
    v104 = a3;
  }
  llvm::CCState::AnalyzeCallResult((uint64_t)v187, v154, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))v103);
  if ((_DWORD)v197)
  {
    v107 = 0;
    v142 = v104 + 16;
    v108 = 12 * v197;
    v109 = 1;
    v146 = v108;
    do
    {
      v110 = (char *)v196;
      v111 = (char *)v196 + v107;
      if ((*((_BYTE *)v196 + v107 + 8) & 1) != 0)
      {
        v151 = v109;
        v156 = v90;
        v159 = (uint64_t)v99;
        LOBYTE(v167[0]) = v111[9];
        v116 = sub_1C47A8C74((unsigned __int8 *)v167);
        if ((_DWORD)v115 == 1)
        v117 = v160[5];
        FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(v117 + 56), ((unint64_t)(v116 + 7) >> 3), *(unsigned int *)&v110[v107 + 4], 1, 0);
        v119 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[4])(a1, *(_QWORD *)(*(_QWORD *)v160[5] + 40) + 272, 0);
        v120 = sub_1C5D406AC((uint64_t)v160, FixedObject, (llvm *)v119, 0, 0);
        v121 = 0;
        v122 = v111[9];
        v123 = (v111[8] >> 2) - 1;
        v125 = v124;
        switch(v123)
        {
          case 0:
            v121 = 2;
            break;
          case 1:
            v121 = 3;
            break;
          case 2:
            v121 = 1;
            break;
          case 6:
            v121 = 0;
            v122 = v110[v107 + 10];
            break;
          default:
            break;
        }
        v126 = v110[v107 + 10];
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v117 + 432), FixedObject);
        if (FixedStack)
          v129 = *((_DWORD *)FixedStack + 3);
        else
          v129 = 0;
        v99 = (uint64_t *)v159;
        memset(v167, 0, sizeof(v167));
        *(_QWORD *)&v168 = (unint64_t)FixedStack | 4;
        *((_QWORD *)&v168 + 1) = 0;
        v169 = v129;
        v170 = 0;
        v130 = sub_1C636B4C8((uint64_t)v160, v121, (uint64_t)&v163, v126, 0, v159, v162, v128, v120, v125, &v168, v122, 0, 0, 0, 0, (uint64_t)v167);
        v132 = v131;
        v104 = a3;
        v133 = *(unsigned int *)(a3 + 8);
        if (v133 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v142, v133 + 1, 16);
          v133 = *(unsigned int *)(a3 + 8);
        }
        v90 = v156;
        v113 = v132 | v154 & 0xFFFFFFFF00000000;
        v114 = (uint64_t **)(*(_QWORD *)a3 + 16 * v133);
        *v114 = v130;
        v154 = v113;
        v108 = v146;
        v109 = v151;
      }
      else
      {
        v99 = sub_1C6142EE0((uint64_t)v160, (uint64_t)v99, v162, (const llvm::APInt *)&v163, *((_DWORD *)v111 + 1), (llvm *)v111[9], 0, v105, (uint64_t)v90, v109);
        v112 = *(unsigned int *)(v104 + 8);
        if (v112 >= *(unsigned int *)(v104 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v104, v142, v112 + 1, 16);
          v112 = *(unsigned int *)(v104 + 8);
        }
        v113 = 0;
        v114 = (uint64_t **)(*(_QWORD *)v104 + 16 * v112);
        *v114 = v99;
        v162 = 1;
        v90 = v99;
        v109 = 2;
      }
      v114[1] = (uint64_t *)v113;
      ++*(_DWORD *)(v104 + 8);
      v107 += 12;
    }
    while (v108 != v107);
  }
  if (v194 != &v195)
    free(v194);
  if (v192 != &v193)
    free(v192);
  if (v190 != &v191)
    free(v190);
  if (v188 != &v189)
    free(v188);
  if (v196 != &v198)
    free(v196);
  if (v199 != v201)
    free(v199);
  if (v163)
    llvm::MetadataTracking::untrack((uint64_t)&v163, v163);
  if (v46)
    operator delete(v46);
  if (v171 != v173)
    free(v171);
  sub_1C6143384(v166[0]);
  if (v182 != &v183)
    free(v182);
  if (v180 != &v181)
    free(v180);
  if (v178 != &v179)
    free(v178);
  if (v176 != &v177)
    free(v176);
  if (v184 != v186)
    free(v184);
  return v99;
}

uint64_t *sub_1C490D7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::APInt *a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v19 = sub_1C636A8B4(a1, 1, 0, 172, 0);
  v24[0] = a2;
  v24[1] = a3;
  v24[2] = a4;
  v24[3] = a5;
  v24[4] = a6;
  v24[5] = a7;
  if (a9)
  {
    v24[6] = a9;
    v24[7] = a10;
    v20 = 4;
  }
  else
  {
    v20 = 3;
  }
  v21 = *(_QWORD *)(a1 + 832);
  if (v21)
    v22 = *(_WORD *)(v21 + 8);
  else
    v22 = 0;
  return sub_1C636D410(a1, (const char *)0x10E, a11, v19, v18, v24, v20, v22);
}

uint64_t sub_1C490D924(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  const char *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  const char *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  llvm::LLVMContext *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  const char *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int v63;
  __int16 v64;
  _QWORD *v65;
  _QWORD *v66;
  __int16 v67;
  uint64_t *v68;
  _QWORD *v69;
  char v70;
  int v71;
  int v72;
  uint64_t *v73;
  _QWORD *v74;
  char v75;
  int v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  llvm::FixedVectorType *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  _QWORD *v92;
  llvm::FixedVectorType *v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  llvm::EVT **v97;
  llvm::EVT *v98;
  uint64_t v99;
  _QWORD *v100;
  BOOL v101;
  unsigned int v102;
  _DWORD v104[7];
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;

  result = 0;
  switch(a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      v9 = *(_QWORD *)(*(_QWORD *)(a3[5] + 56) + 40) + 272;
      *(_DWORD *)a2 = 47;
      v10 = *a3;
      sub_1C4768AD0(v9, *a3);
      v12 = (unint64_t)(v11 + 7) >> 3;
      v14 = v13 == 1;
      llvm::DataLayout::getAlignment(v9, v10);
      v17 = ((1 << v16) + 0x3FFFFFFFFLL + v12) & -(1 << v16);
      if (v14)
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(*(llvm::LLVMContext **)*a3, 10, 0, v17 >> 2, 0);
      *(_QWORD *)(a2 + 16) = v18;
      llvm::SampleInfo::SampleInfo((uint64_t)v104, a5, 1);
      v19 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v20 = v19[4 * v107];
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v20)
        v22 = v21 > 0x14;
      else
        v22 = 1;
      if (v22)
        goto LABEL_47;
      v23 = (_QWORD *)v19[4 * v107];
      if (v21 == 5)
      {
        v23 = (_QWORD *)v19[4 * v107];
        if (*(_WORD *)(v20 + 18) != 48)
          goto LABEL_26;
        v23 = *(_QWORD **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
        if (!v23)
          goto LABEL_47;
        v21 = *((unsigned __int8 *)v23 + 16);
      }
      if (v21 != 19)
        goto LABEL_26;
      goto LABEL_47;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      v24 = *(_QWORD *)(*(_QWORD *)(a3[5] + 56) + 40) + 272;
      *(_DWORD *)a2 = 47;
      v25 = *a3;
      sub_1C4768AD0(v24, *a3);
      v27 = (unint64_t)(v26 + 7) >> 3;
      v29 = v28 == 1;
      llvm::DataLayout::getAlignment(v24, v25);
      v32 = ((1 << v31) + 0x1FFFFFFFFLL + v27) & -(1 << v31);
      if (v29)
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(*(llvm::LLVMContext **)*a3, 9, 0, v32 >> 1, 0);
      *(_QWORD *)(a2 + 16) = v33;
      llvm::SampleInfo::SampleInfo((uint64_t)v104, a5, 1);
      v19 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v20 = v19[4 * v107];
      v34 = *(unsigned __int8 *)(v20 + 16);
      if (v20)
        v35 = v34 > 0x14;
      else
        v35 = 1;
      if (v35)
        goto LABEL_47;
      v23 = (_QWORD *)v19[4 * v107];
      if (v34 != 5)
        goto LABEL_24;
      if (*(_WORD *)(v20 + 18) != 48)
        goto LABEL_46;
      v23 = *(_QWORD **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
      if (!v23)
        goto LABEL_47;
      v34 = *((unsigned __int8 *)v23 + 16);
LABEL_24:
      if (v34 == 19)
        goto LABEL_47;
      if (v34 != 16)
        goto LABEL_46;
LABEL_26:
      v36 = *((_DWORD *)v23 + 8);
      if (v36 > 0x40)
      {
        if ((*(_QWORD *)v23[3] & 0x8000000000000000) == 0)
          goto LABEL_47;
      }
      else if ((((uint64_t)(v23[3] << -(char)v36) >> -(char)v36) & 0x8000000000000000) == 0)
      {
        goto LABEL_47;
      }
LABEL_46:
      v20 = v19[4 * v106];
LABEL_47:
      *(_QWORD *)(a2 + 24) = v20 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      v64 = sub_1C490E230((uint64_t)a3);
      *(_WORD *)(a2 + 50) = v64 | 1;
      if (v105 == -1)
        return 1;
      v65 = (_QWORD *)a3[4 * v105 + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v66 = v65 + 3;
      if (*((_DWORD *)v65 + 8) >= 0x41u)
        v66 = (_QWORD *)*v66;
      if ((*(_BYTE *)v66 & 0x20) == 0)
        return 1;
      v67 = v64 | 0x41;
      goto LABEL_75;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      v49 = *(_QWORD *)(*(_QWORD *)(a3[5] + 56) + 40) + 272;
      *(_DWORD *)a2 = 47;
      v50 = *(_QWORD *)a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4 + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v49, v50);
      v52 = (unint64_t)(v51 + 7) >> 3;
      v54 = v53 == 1;
      llvm::DataLayout::getAlignment(v49, v50);
      v57 = ((1 << v56) + 0x3FFFFFFFFLL + v52) & -(1 << v56);
      if (v54)
      v46 = v57 >> 2;
      v47 = *(llvm::LLVMContext **)*a3;
      v48 = 10;
      goto LABEL_35;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      v37 = *(_QWORD *)(*(_QWORD *)(a3[5] + 56) + 40) + 272;
      *(_DWORD *)a2 = 47;
      v38 = *(_QWORD *)a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4 + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v37, v38);
      v40 = (unint64_t)(v39 + 7) >> 3;
      v42 = v41 == 1;
      llvm::DataLayout::getAlignment(v37, v38);
      v45 = ((1 << v44) + 0x1FFFFFFFFLL + v40) & -(1 << v44);
      if (v42)
      v46 = v45 >> 1;
      v47 = *(llvm::LLVMContext **)*a3;
      v48 = 9;
LABEL_35:
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(v47, v48, 0, v46, 0);
      *(_QWORD *)(a2 + 16) = v58;
      llvm::SampleInfo::SampleInfo((uint64_t)v104, a5, 1);
      v59 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v60 = v59[4 * v107];
      if (!v60)
        goto LABEL_74;
      v61 = *(unsigned __int8 *)(v60 + 16);
      if (v61 > 0x14)
        goto LABEL_74;
      v62 = (_QWORD *)v59[4 * v107];
      if (v61 != 5)
        goto LABEL_41;
      v62 = (_QWORD *)v59[4 * v107];
      if (*(_WORD *)(v60 + 18) == 48)
      {
        v62 = *(_QWORD **)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF));
        if (!v62)
          goto LABEL_74;
        v61 = *((unsigned __int8 *)v62 + 16);
LABEL_41:
        if (v61 == 19)
          goto LABEL_74;
      }
      v63 = *((_DWORD *)v62 + 8);
      if (v63 > 0x40)
      {
        if ((*(_QWORD *)v62[3] & 0x8000000000000000) == 0)
          goto LABEL_74;
      }
      else if ((((uint64_t)(v62[3] << -(char)v63) >> -(char)v63) & 0x8000000000000000) == 0)
      {
        goto LABEL_74;
      }
      v60 = v59[4 * v106];
LABEL_74:
      *(_QWORD *)(a2 + 24) = v60 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      v67 = sub_1C490E230((uint64_t)a3) | 2;
LABEL_75:
      *(_WORD *)(a2 + 50) = v67;
      return 1;
    case 2142:
    case 2144:
      if (a5 == 2142)
      {
        v95 = 1;
        v96 = 2;
        v97 = (llvm::EVT **)a3;
      }
      else
      {
        v97 = (llvm::EVT **)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        v95 = 2;
        v96 = 3;
      }
      v98 = *v97;
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v98, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v99;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = v95;
      v100 = (_QWORD *)a3[4 * v96 + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (v100)
        v101 = *((unsigned __int8 *)v100 + 16) > 0x14u;
      else
        v101 = 1;
      if (!v101)
      {
        v102 = *((_DWORD *)v100 + 8);
        if (!(v102 > 0x40 ? *(_QWORD *)v100[3] : (uint64_t)(v100[3] << -(char)v102) >> -(char)v102))
          return 1;
      }
      v67 = v95 | 4;
      goto LABEL_75;
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
      v73 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v74 = (_QWORD *)(*v73 + 24);
      if (*(_DWORD *)(*v73 + 32) >= 0x41u)
        v74 = (_QWORD *)*v74;
      v75 = *(_DWORD *)v74 & 0xF;
      v76 = 8;
      v77 = 1 << v75;
      if ((v77 & 0xF531) == 0)
      {
        if ((v77 & 0xCA) != 0)
          v76 = 16;
        else
          v76 = 32;
      }
      v78 = v73[4];
      v79 = (_QWORD *)(v78 + 24);
      if (*(_DWORD *)(v78 + 32) >= 0x41u)
        v79 = (_QWORD *)*v79;
      v80 = *(_DWORD *)v79;
      if ((v80 & 2) != 0)
        v81 = 2;
      else
        v81 = 1;
      if ((v80 & 0xC) != 0)
        v82 = 4;
      else
        v82 = v81;
      v83 = *(_QWORD **)*a3;
      v104[0] = v76;
      if (v76 == 32)
      {
        v84 = (llvm::FixedVectorType *)(*v83 + 1960);
      }
      else if (v76 == 16)
      {
        v84 = (llvm::FixedVectorType *)(*v83 + 1936);
      }
      else
      {
        v84 = (llvm::FixedVectorType *)(*v83 + 1912);
      }
      if (v82 >= 2)
        llvm::FixedVectorType::get(v84, (llvm::Type *)v82);
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 8] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v84, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v85;
      *(_DWORD *)(a2 + 32) = 0;
      v86 = 65794;
      goto LABEL_98;
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
      v68 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v69 = (_QWORD *)(*v68 + 24);
      if (*(_DWORD *)(*v68 + 32) >= 0x41u)
        v69 = (_QWORD *)*v69;
      v70 = *(_DWORD *)v69 & 0xF;
      v71 = 8;
      v72 = 1 << v70;
      if ((v72 & 0xF531) == 0)
      {
        if ((v72 & 0xCA) != 0)
          v71 = 16;
        else
          v71 = 32;
      }
      v87 = v68[4];
      v88 = (_QWORD *)(v87 + 24);
      if (*(_DWORD *)(v87 + 32) >= 0x41u)
        v88 = (_QWORD *)*v88;
      v89 = *(_DWORD *)v88;
      if ((v89 & 2) != 0)
        v90 = 2;
      else
        v90 = 1;
      if ((v89 & 0xC) != 0)
        v91 = 4;
      else
        v91 = v90;
      v92 = *(_QWORD **)*a3;
      v104[0] = v71;
      if (v71 == 32)
      {
        v93 = (llvm::FixedVectorType *)(*v92 + 1960);
      }
      else if (v71 == 16)
      {
        v93 = (llvm::FixedVectorType *)(*v92 + 1936);
      }
      else
      {
        v93 = (llvm::FixedVectorType *)(*v92 + 1912);
      }
      if (v91 >= 2)
        llvm::FixedVectorType::get(v93, (llvm::Type *)v91);
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 12] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v93, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v94;
      *(_DWORD *)(a2 + 32) = 0;
      v86 = 131330;
LABEL_98:
      *(_DWORD *)(a2 + 48) = v86;
      return 1;
    default:
      return result;
  }
}

uint64_t sub_1C490E230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 64);
  if (!v1 || !*(_DWORD *)(v1 + 8) || (v2 = *(_QWORD *)(v1 + 40)) == 0 || (v3 = *(_DWORD *)(v2 + 40)) == 0)
  {
LABEL_24:
    v18 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(a1, "globally-coherent", 0x11uLL);
    return (v18 != 0) << 7;
  }
  v4 = *(_QWORD *)(v2 + 24);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v25 = a1;
    v24 = v4;
    v23 = v3;
    v20 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v3 = v23;
    v4 = v24;
    v21 = v20;
    a1 = v25;
    if (v21)
    {
      v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v22 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v22;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = v23;
      v4 = v24;
      a1 = v25;
    }
  }
  v7 = v6[400];
  v8 = __ROR8__(v7 ^ 0xA998C8AA3BC31F8DLL, 30);
  v9 = 0x9DDFEA08EB382D69
     * ((v7 + 0x35F7FFDAEA461458) ^ ((0x9DDFEA08EB382D69
                                      * ((v8 - 0x7CB6A14CA0FD4217) ^ (v7 + 0x35F7FFDAEA461458))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x7CB6A14CA0FD4217) ^ (v7 + 0x35F7FFDAEA461458))));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v3 - 1;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v11;
    v14 = (uint64_t *)(v4 + 24 * v13);
    v15 = *v14;
    if (*v14 == -1)
    {
      if ("globally-coherent" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v15 != -2)
      break;
    if ("globally-coherent" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v15 == -1)
      goto LABEL_24;
    v10 = i + v13;
  }
  if (v14[1] != 17)
    goto LABEL_9;
  v16 = *(_QWORD *)v15 == 0x796C6C61626F6C67 && *(_QWORD *)(v15 + 8) == 0x6E657265686F632DLL;
  if (!v16 || *(_BYTE *)(v15 + 16) != 116)
    goto LABEL_9;
LABEL_23:
  v18 = v14[2];
  if (!v18)
    goto LABEL_24;
  return (v18 != 0) << 7;
}

uint64_t sub_1C490E440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  __int16 ***v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  _QWORD *v28;
  __int16 ***v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _UNKNOWN ***v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  int v51;
  uint64_t *v52;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v3 = a3;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD **)(v5 + 40);
  v59 = a1 + 184296;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184296) + 176))(*(_QWORD *)(a1 + 184296));
  v7 = *(unsigned __int16 **)(a2 + 16);
  v8 = *((_QWORD *)v7 + 2);
  if ((v8 & 0x8000002) != 0)
  {
    v58 = v3;
    v9 = *(_DWORD *)(a2 + 40);
    v10 = *v7;
    v11 = sub_1C4B138B4(v10);
    v57 = sub_1C4B138B4(v10);
    v12 = sub_1C4B138B4(v10);
    v13 = sub_1C4B138B4(v10);
    v14 = v9 - 1;
    if (v9 - 1 > v12)
    {
      v15 = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v11 + 16);
      v17 = v16 & 0xF;
      v18 = v17 - 3;
      v19 = v12 - v13;
      do
      {
        v20 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * (v12 + v15));
        v21 = *v20;
        if (!*v20)
        {
          v22 = v20[1];
          v23 = v6[3];
          v24 = (__int16 ***)(*(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (!v15)
          {
            if (v17 == 1 && v24 == (__int16 ***)&off_1E7FA6488)
            {
LABEL_25:
              v26 = v21 & 0xFFF000FF | 0x2600;
LABEL_26:
              *v20 = v26;
              goto LABEL_27;
            }
            if (v18 <= 1 && v24 == (__int16 ***)&off_1E7FA5FB8)
              goto LABEL_31;
            if (v17 == 6)
            {
              if (((v7[10] & 0x80) != 0 || (v16 & 0x40000) != 0) && v24 == (__int16 ***)&off_1E7FA5FB8)
              {
LABEL_31:
                v26 = v21 & 0xFFF000FF | 0x2C00;
                goto LABEL_26;
              }
            }
            else if (v17 == 7 && v24 == (__int16 ***)&off_1E7FA6098)
            {
              v26 = v21 & 0xFFF000FF | 0x3600;
              goto LABEL_26;
            }
          }
          if (!(v19 + v15) && (v16 & 0x10) != 0 && (v16 & 0x400) != 0 && v24 == (__int16 ***)&off_1E7FA6488)
            goto LABEL_25;
          if ((v8 & 2) == 0)
            goto LABEL_27;
          v25 = *(_BYTE *)(*(_QWORD *)v59 + 323) || (v16 & 0x1000000) == 0;
          if (!v25)
            goto LABEL_27;
          if (v24 == &off_1E7FA5F10)
          {
            v27 = *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v28 = v6;
            v29 = (__int16 ***)&off_1E7FA4778;
LABEL_43:
            v56 = v17;
            v30 = v18;
            sub_1C51A3F30(v28, v22, v27, (uint64_t)v29, 0);
            v18 = v30;
            v17 = v56;
            goto LABEL_27;
          }
          if (v24 == (__int16 ***)&off_1E7FA5F80)
          {
            v27 = *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v28 = v6;
            v29 = &off_1E7FA5F48;
            goto LABEL_43;
          }
          if (v24 == (__int16 ***)&off_1E7FA5FF0)
          {
            v27 = *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v28 = v6;
            v29 = (__int16 ***)&off_1E7FA4998;
            goto LABEL_43;
          }
          v55 = v18;
          if (v24 == (__int16 ***)&off_1E7FA61E8)
          {
            v31 = *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v32 = v6;
            v33 = &off_1E7FA6488;
          }
          else
          {
            if (v24 != (__int16 ***)&off_1E7FA6028)
            {
              if (v24 == (__int16 ***)&off_1E7FA5ED8)
              {
                sub_1C51A3F30(v6, v22, *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7FA5FB8, 0);
                v18 = v55;
              }
              goto LABEL_27;
            }
            v31 = *(_QWORD *)(v23 + 16 * (v22 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v32 = v6;
            v33 = &off_1E7FA4BD0;
          }
          sub_1C51A3F30(v32, v22, v31, (uint64_t)v33, 0);
          v18 = v55;
        }
LABEL_27:
        v15 += 2;
      }
      while (v12 + v15 < v14);
    }
    v3 = v58;
    if ((v8 & 2) != 0 && sub_1C4888154((_QWORD *)a2))
    {
      v34 = **(unsigned __int16 **)(a2 + 16);
      v35 = sub_1C4B138B4(v34);
      v36 = sub_1C4B138B4(v34);
      v37 = v36 >= 0 ? v36 : v35;
      v38 = *(_QWORD *)(a2 + 32);
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
      if (!sub_1C4914DFC(v38 + 32 * v37, v39))
        goto LABEL_90;
      if ((v35 & 0x80000000) == 0 && !sub_1C4914DFC(v38 + 32 * v35, v39))
      {
        v40 = *(_QWORD *)(a2 + 48);
        if ((v40 & 7) != 0)
        {
          v41 = *(_QWORD **)((v40 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v41 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(a2 + 48) = v41;
        }
        v47 = *(_QWORD *)((*v41 & ((uint64_t)(*v41 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
        v49 = (unsigned __int8 *)(v47 + 16);
        v48 = *(unsigned __int8 *)(v47 + 16);
        if (!v47 || v48 < 0x1C)
          goto LABEL_90;
        while (1)
        {
          if (*(_QWORD *)(v47 + 48) || (*(_BYTE *)(v47 + 23) & 0x20) != 0)
          {
            if (llvm::Instruction::getMetadataImpl((uint64_t ***)v47, "agx.uniform", 0xBuLL))
              return v3;
            v48 = *v49;
          }
          if (v48 - 66 > 0xC)
            break;
          v51 = *(_DWORD *)(v47 + 20);
          if ((v51 & 0x40000000) != 0)
            v52 = *(uint64_t **)(v47 - 8);
          else
            v52 = (uint64_t *)(v47 - 32 * (v51 & 0x7FFFFFF));
          v47 = *v52;
          v25 = *v52 == 0;
          v49 = (unsigned __int8 *)(*v52 + 16);
          v48 = *v49;
          if (v25 || v48 <= 0x1B)
            goto LABEL_90;
        }
        if ((sub_1C4913564(v47) & 1) == 0)
LABEL_90:
          *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v57) |= 0x40000000u;
      }
    }
  }
  else
  {
    v42 = *v7;
    if ((v8 & 0x10000000) != 0)
    {
      v43 = sub_1C4B138B4(v42);
      if (v43 != -1)
      {
        v44 = *(_QWORD *)(a2 + 32);
        if (!*(_BYTE *)(v44 + 32 * v43))
        {
          v45 = *(_DWORD *)(v44 + 32 * v43 + 4);
          if ((__int16 ***)(*(_QWORD *)(v6[3] + 16 * (v45 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7FA5F10)
            sub_1C51A3F30(v6, v45, (uint64_t)&off_1E7FA5F10, (uint64_t)&off_1E7FA4778, 0);
        }
      }
    }
    else
    {
      if ((v42 & 0xFFFE) == 0x166)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v60 = 0x4203000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)a2, *(llvm::MachineFunction **)(*(_QWORD *)(a2 + 24) + 32), (const llvm::MachineOperand *)&v60);
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v60 = 0x4202000000;
      }
      else
      {
        if (*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 8) + 16))(*(_QWORD *)(v5 + 8), *(_QWORD *)v5)+ 381))v46 = 2;
        else
          v46 = 66;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        LODWORD(v60) = 0x2000000;
        HIDWORD(v60) = v46;
      }
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)a2, *(llvm::MachineFunction **)(*(_QWORD *)(a2 + 24) + 32), (const llvm::MachineOperand *)&v60);
    }
  }
  return v3;
}

uint64_t sub_1C490EA50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, _BYTE *a7)
{
  char v9;
  uint64_t v10;
  BOOL v11;
  unint64_t ExtendedSizeInBits;
  const char *v13;
  llvm::Type *v14;
  const char *v15;
  uint64_t result;
  unint64_t v17;
  llvm::Type *v18;
  _QWORD v19[2];

  v19[0] = a2;
  v19[1] = a3;
  v9 = a4 - 10;
  if ((a4 - 10) > 0x3E
    || ((v11 = ((1 << v9) & 0x7880000000000001) == 0, v10 = (1 << v9) & 0x740000000000000, v11)
      ? (v11 = v10 == 0)
      : (v11 = 1),
        v11))
  {
    if ((_BYTE)a2)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v19);
    else
      ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v19);
    if ((_DWORD)v13 == 1)
    {
      v17 = ExtendedSizeInBits;
      ExtendedSizeInBits = v17;
    }
    if (ExtendedSizeInBits <= 0x40 && a5)
      goto LABEL_20;
    v14 = LOBYTE(v19[0])
        ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v19)
        : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v19);
    if ((_DWORD)v15 == 1)
    {
      v18 = v14;
      v14 = v18;
    }
    if ((unint64_t)v14 <= 0x20)
    {
LABEL_20:
      if (a7)
      {
LABEL_21:
        result = 1;
        *a7 = 1;
        return result;
      }
      return 1;
    }
  }
  if ((a5 & 0xFE) != 0)
  {
    if (a7)
      goto LABEL_21;
    return 1;
  }
  return 0;
}

void sub_1C490EB74(uint64_t a1, uint64_t a2, unint64_t a3, const llvm::APInt *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  _DWORD *v23;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[3];

  v7 = a2;
  v38[2] = *MEMORY[0x1E0C80C00];
  v34 = HIDWORD(a3);
  v35 = a3;
  v9 = *(_QWORD *)(a2 + 40) + 16 * a3;
  v10 = *(llvm **)v9;
  v11 = *(_QWORD *)(v9 + 8);
  LODWORD(v9) = *(unsigned __int16 *)(a2 + 24);
  v12 = v9 > 0x26;
  v13 = (1 << v9) & 0x6000006000;
  if (v12 || v13 == 0)
    v15 = 0;
  else
    v15 = a2;
  v17 = sub_1C6366AB4(a5, 0, a4, v10, v11, 0, 0);
  v19 = v18;
  v36 = v38;
  v37 = 0x100000000;
  if (!v15)
  {
    v20 = 0;
    v21 = *(unsigned __int16 *)(v7 + 24);
    v15 = v7;
    do
    {
      if (v21 != 56)
      {
        v17 = sub_1C6366AB4(a5, 0, a4, (llvm *)5, 0, 0, 0);
        v15 = 0;
        v19 = v19 & 0xFFFFFFFF00000000 | v32;
        goto LABEL_22;
      }
      v22 = *(_OWORD *)(*(_QWORD *)(v15 + 32) + 40);
      if (v20 >= HIDWORD(v37))
      {
        v33 = *(_OWORD *)(*(_QWORD *)(v15 + 32) + 40);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v20 + 1, 16);
        v22 = v33;
        v20 = v37;
      }
      *((_OWORD *)v36 + v20) = v22;
      v20 = v37 + 1;
      LODWORD(v37) = v37 + 1;
      v23 = *(_DWORD **)(v15 + 32);
      v15 = *(_QWORD *)v23;
      v21 = *(unsigned __int16 *)(*(_QWORD *)v23 + 24);
    }
    while (v21 > 0x26 || ((1 << v21) & 0x6000006000) == 0);
    v25 = v23[2];
    if (!v20)
    {
      v7 = *(_QWORD *)v23;
      goto LABEL_23;
    }
    v35 = v23[2];
    v26 = (uint64_t *)v36;
    v27 = (uint64_t *)((char *)v36 + 16 * v20);
    do
    {
      v28 = *(_QWORD *)(a5 + 832);
      if (v28)
        LOWORD(v28) = *(_WORD *)(v28 + 8);
      v29 = *v26;
      v30 = v26[1];
      v26 += 2;
      v17 = sub_1C5D56C70(a5, 56, a4, v10, v11, (uint64_t)v17, v19, v16, v29, v30, v28);
      v19 = v19 & 0xFFFFFFFF00000000 | v31;
    }
    while (v26 != v27);
    v7 = v15;
  }
LABEL_22:
  v25 = v35;
LABEL_23:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 20) = v34;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v19;
  if (v36 != v38)
    free(v36);
}

uint64_t sub_1C490EDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm *v34;
  BOOL v35;
  uint64_t v36;
  char EVT;
  const char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  llvm *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  llvm *v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int ExtendedSizeInBits;
  const char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  const char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  const char *v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  llvm *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t **v142;
  int v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  llvm *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t **v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  llvm *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  _QWORD *v173;
  unsigned int v174;
  _QWORD *v175;
  unsigned int v176;
  uint64_t v177;
  _QWORD *v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t v195;
  _QWORD *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  int v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  int v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  int v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  int v225;
  int *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  void *v234;
  uint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t **v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  uint64_t v256;
  __int16 v257;
  uint64_t v258;
  const char *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  int v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unsigned __int8 *v286;
  uint64_t v287;
  __int16 v288;
  int v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  char v295;
  unint64_t v296;
  BOOL v297;
  uint64_t *v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unsigned __int8 *v302;
  int v303;
  llvm *v304;
  uint64_t v305;
  unsigned __int8 *v306;
  int v307;
  unsigned __int8 *v308;
  int v309;
  void *v310;
  uint64_t v311;
  _BYTE v312[64];
  void *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;

  v321 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int16 *)(a1 + 24);
  if (v12 == 254)
    v13 = a1;
  else
    v13 = 0;
  v301 = v13;
  if (v12 == 253)
    v14 = a1;
  else
    v14 = 0;
  v15 = *(unsigned __int8 **)(a1 + 64);
  v306 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v306, v15, 2);
  v307 = *(_DWORD *)(a1 + 60);
  v16 = sub_1C5EAB3E0(*(llvm::GlobalValue **)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a6[2][5] + 344), 0);
  v17 = sub_1C6366AB4((uint64_t)a6[2], v16, (const llvm::APInt *)&v306, (llvm *)4, 0, 0, 0);
  v19 = v18;
  v20 = sub_1C63663BC((uint64_t)a6[2], a3, a4, (uint64_t)&v306, 4, 0);
  v23 = (uint64_t)a6[2];
  v24 = *(_QWORD *)(v23 + 832);
  if (v24)
    LOWORD(v24) = *(_WORD *)(v24 + 8);
  v29 = sub_1C5D56C70(v23, 56, (const llvm::APInt *)&v306, (llvm *)4, 0, (uint64_t)v17, v19, v22, v20, v21, v24);
  v31 = v19 & 0xFFFFFFFF00000000 | v30;
  if (v301)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v301 + 32) + 40) + 40)
        + 16 * *(unsigned int *)(*(_QWORD *)(v301 + 32) + 48);
    v34 = *(llvm **)v32;
    v33 = *(_QWORD *)(v32 + 8);
    v304 = v34;
    v305 = v33;
    if (!v14)
    {
      v35 = 1;
LABEL_26:
      LODWORD(v34) = v304;
      goto LABEL_27;
    }
    v35 = 0;
  }
  else
  {
    v36 = *(_QWORD *)(v14 + 40);
    v34 = *(llvm **)v36;
    v33 = *(_QWORD *)(v36 + 8);
    v304 = v34;
    v305 = v33;
    v35 = v14 == 0;
  }
  LODWORD(v34) = v34;
  if (!(_BYTE)v34)
  {
    v39 = *(_DWORD *)(v33 + 8);
    if ((v39 & 0xFE) != 0x12)
      goto LABEL_31;
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v25);
    goto LABEL_20;
  }
  if (v34 - 15 < 0x9C)
  {
    EVT = sub_1C47F37A0((unsigned __int8 *)&v304);
LABEL_20:
    if (EVT == 3)
    {
      v40 = (1 << *(_BYTE *)(*(_QWORD *)(a1 + 96) + 34)) | *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      if ((v40 & -v40) == 1)
      {
        v317 = &v319;
        v318 = 0x400000000;
        if (sub_1C612FE00((llvm::EVT *)&v304, v38))
        {
          v245 = v31;
          v246 = 0;
          do
          {
            v247 = v245;
            v248 = sub_1C4914EE4((uint64_t)a6, (uint64_t)v29, v245, v14, a5, v41, v42, v43);
            v250 = v249;
            v251 = v318;
            if (v318 >= (unint64_t)HIDWORD(v318))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, (uint64_t)&v319, v318 + 1, 16);
              v251 = v318;
            }
            v252 = (uint64_t **)&v317[2 * v251];
            *v252 = v248;
            v252[1] = v250;
            LODWORD(v318) = v318 + 1;
            v253 = (uint64_t)a6[2];
            v254 = sub_1C6366AB4(v253, 1, (const llvm::APInt *)&v306, (llvm *)4, 0, 0, 0);
            v257 = 0;
            v258 = *(_QWORD *)(v253 + 832);
            if (v258)
              v257 = *(_WORD *)(v258 + 8);
            v29 = sub_1C5D56C70(v253, 56, (const llvm::APInt *)&v306, (llvm *)4, 0, (uint64_t)v29, v247, v256, (uint64_t)v254, v255, v257);
            v245 = v247 & 0xFFFFFFFF00000000 | v259;
            ++v246;
          }
          while (v246 < sub_1C612FE00((llvm::EVT *)&v304, v259));
        }
        v44 = (uint64_t)a6[2];
        v45 = *(_QWORD *)(v44 + 832);
        if (v45)
          v46 = *(unsigned __int16 *)(v45 + 8);
        else
          v46 = 0;
        v260 = sub_1C636D0C8(v44, (const char *)0x92, (const llvm::APInt *)&v306, v304, v305, v317, v318, v46);
        v261 = *(uint64_t **)(v14 + 32);
        v262 = *v261;
        v263 = v261[1];
        v264 = *a6;
        v313 = v260;
        LODWORD(v314) = v265;
        v315 = v262;
        v316 = v263;
        v220 = sub_1C5C5B0B4(v264, v14, (uint64_t *)&v313, 2, 1);
        v221 = v317;
        if (v317 == &v319)
          goto LABEL_196;
LABEL_178:
        free(v221);
        goto LABEL_196;
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  if ((_DWORD)v34)
  {
    if (((_DWORD)v34 - 15) <= 0x9B)
    {
      v47 = sub_1C47F37A0((unsigned __int8 *)&v304);
      goto LABEL_63;
    }
LABEL_32:
    v48 = *(llvm **)(a1 + 80);
    if (v48 - 2 < 2)
    {
      if (v35)
      {
        v49 = *(_QWORD *)(v301 + 32);
        v50 = *(_QWORD *)(v49 + 40);
        v51 = *(unsigned int *)(v49 + 48);
        v52 = (uint64_t)a6[2];
        v53 = *(_QWORD *)(v52 + 832);
        if (v53)
          v54 = *(_WORD *)(v53 + 8);
        else
          v54 = 0;
        v61 = sub_1C5D52060(v52, 199, (const llvm::APInt *)&v306, (llvm *)4, 0, v50, v51, v54);
        v62 = v76;
        v77 = (uint64_t)a6[2];
        v60 = *(_QWORD *)(v301 + 32);
LABEL_169:
        v201 = *(_QWORD *)v60;
        v202 = *(_QWORD *)(v60 + 8);
        v203 = *(_QWORD *)(v77 + 832);
        if (v203)
          LOWORD(v203) = *(_WORD *)(v203 + 8);
        v55 = sub_1C5D58E08(v77, (const char *)a5, (const llvm::APInt *)&v306, (llvm *)1, 0, (uint64_t)v61, v62, v28, (uint64_t)v29, v31, v201, v202, SHIDWORD(v202), v203);
        goto LABEL_172;
      }
      v57 = sub_1C4914EE4((uint64_t)a6, (uint64_t)v29, v31, v14, a5, v26, v27, v28);
      goto LABEL_193;
    }
    if (v48 == 6)
    {
      if (v35)
      {
        v55 = sub_1C49152F8((uint64_t)a6, v301, (uint64_t)v29, v31);
LABEL_172:
        v204 = *a6;
        v317 = v55;
        v318 = v56;
        v205 = v204;
        v206 = v301;
        v207 = 1;
LABEL_195:
        v220 = sub_1C5C5B0B4(v205, v206, (uint64_t *)&v317, v207, 1);
        goto LABEL_196;
      }
      v222 = (uint64_t)v29;
      v223 = *(uint64_t **)(v14 + 64);
      v317 = v223;
      if (v223)
      {
        llvm::MetadataTracking::track((uint64_t)&v317, (unsigned __int8 *)v223, 2);
        v226 = (int *)(v14 + 60);
        v225 = *(_DWORD *)(v14 + 60);
        v234 = *(void **)(v14 + 64);
        LODWORD(v318) = v225;
        v227 = (uint64_t)a6[2];
        v313 = v234;
        v224 = v14;
        if (v234)
        {
          llvm::MetadataTracking::track((uint64_t)&v313, (unsigned __int8 *)v234, 2);
          v225 = *v226;
        }
      }
      else
      {
        v224 = v14;
        v226 = (int *)(v14 + 60);
        v225 = *(_DWORD *)(v14 + 60);
        LODWORD(v318) = v225;
        v227 = (uint64_t)a6[2];
        v313 = 0;
      }
      LODWORD(v314) = v225;
      v235 = sub_1C48258FC(v227, a5, (const llvm::APInt *)&v313, (llvm *)5, 0, v222, v31, v28, 5, 0);
      v237 = v236;
      if (v313)
        llvm::MetadataTracking::untrack((uint64_t)&v313, (unsigned __int8 *)v313);
      v238 = *(unsigned __int16 *)(v222 + 24);
      if (v238 == 35 || v238 == 11)
      {
        v240 = *(_QWORD *)(v222 + 80);
        v241 = (_QWORD *)(v240 + 24);
        if (*(_DWORD *)(v240 + 32) >= 0x41u)
          v241 = (_QWORD *)*v241;
        v242 = sub_1C6366AB4((uint64_t)a6[2], *v241 + 4, (const llvm::APInt *)&v317, (llvm *)4, 0, 0, 0);
      }
      else
      {
        v266 = sub_1C6366AB4((uint64_t)a6[2], 4, (const llvm::APInt *)&v317, (llvm *)4, 0, 0, 0);
        v269 = (uint64_t)a6[2];
        v270 = *(_QWORD *)(v269 + 832);
        if (v270)
          LOWORD(v270) = *(_WORD *)(v270 + 8);
        v242 = sub_1C5D56C70(v269, 56, (const llvm::APInt *)&v317, (llvm *)4, 0, v222, v31, v268, (uint64_t)v266, v267, v270);
      }
      v271 = (uint64_t)v242;
      v272 = v243;
      v273 = (uint64_t)a6[2];
      v274 = *(void **)(v224 + 64);
      v310 = v274;
      if (v274)
        llvm::MetadataTracking::track((uint64_t)&v310, (unsigned __int8 *)v274, 2);
      LODWORD(v311) = *v226;
      v276 = sub_1C48258FC(v273, 395, (const llvm::APInt *)&v310, (llvm *)5, 0, v271, v272, v244, 5, 0);
      v278 = v277;
      if (v310)
        llvm::MetadataTracking::untrack((uint64_t)&v310, (unsigned __int8 *)v310);
      v279 = (uint64_t)a6[2];
      v280 = *(unsigned __int8 **)(v224 + 64);
      v308 = v280;
      if (v280)
        llvm::MetadataTracking::track((uint64_t)&v308, v280, 2);
      v309 = *v226;
      v281 = *(_QWORD *)(v279 + 832);
      if (v281)
        LOWORD(v281) = *(_WORD *)(v281 + 8);
      v282 = sub_1C5D56C70(v279, 146, (const llvm::APInt *)&v308, (llvm *)0x31, 0, (uint64_t)v235, v237, v275, (uint64_t)v276, v278, v281);
      v284 = v283;
      if (v308)
        llvm::MetadataTracking::untrack((uint64_t)&v308, v308);
      v285 = (uint64_t)a6[2];
      v14 = v224;
      v286 = *(unsigned __int8 **)(v224 + 64);
      v308 = v286;
      if (v286)
        llvm::MetadataTracking::track((uint64_t)&v308, v286, 2);
      v309 = *v226;
      v287 = *(_QWORD *)(v285 + 832);
      if (v287)
        v288 = *(_WORD *)(v287 + 8);
      else
        v288 = 0;
      v67 = sub_1C5D52060(v285, 216, (const llvm::APInt *)&v308, (llvm *)6, 0, (uint64_t)v282, v284, v288);
      v290 = v289;
      if (v308)
        llvm::MetadataTracking::untrack((uint64_t)&v308, v308);
      if (v317)
        llvm::MetadataTracking::untrack((uint64_t)&v317, (unsigned __int8 *)v317);
      LODWORD(v69) = v290;
LABEL_194:
      v230 = *(uint64_t **)(v14 + 32);
      v232 = *v230;
      v231 = v230[1];
      v205 = *a6;
      v317 = v67;
      LODWORD(v318) = v69;
      v319 = v232;
      v320 = v231;
      v206 = v14;
      v207 = 2;
      goto LABEL_195;
    }
    v59 = *(_QWORD *)(a1 + 88);
    if (v35)
    {
      v60 = *(_QWORD *)(v301 + 32);
      v61 = *(uint64_t **)(v60 + 40);
      v62 = *(unsigned int *)(v60 + 48);
      if ((*(_WORD *)(v301 + 26) & 0x400) != 0)
      {
        v63 = (uint64_t)a6[2];
        v64 = *(_QWORD *)(v63 + 832);
        if (v64)
          v65 = *(_WORD *)(v64 + 8);
        else
          v65 = 0;
        v61 = sub_1C5D52060(v63, 201, (const llvm::APInt *)&v306, v48, v59, (uint64_t)v61, v62, v65);
        v62 = v200;
        v60 = *(_QWORD *)(v301 + 32);
      }
      v77 = (uint64_t)a6[2];
      goto LABEL_169;
    }
    v66 = (uint64_t)a6[2];
    v302 = v306;
    if (v306)
      llvm::MetadataTracking::track((uint64_t)&v302, v306, 2);
    v303 = v307;
    v67 = sub_1C48258FC(v66, a5, (const llvm::APInt *)&v302, v48, v59, (uint64_t)v29, v31, v28, (uint64_t)v48, v59);
    v69 = v68;
    if (v302)
      llvm::MetadataTracking::untrack((uint64_t)&v302, v302);
    v70 = (*(unsigned __int16 *)(v14 + 26) >> 10) & 3;
    if (v70 != 1)
    {
      if (v70 == 3)
      {
        v71 = (uint64_t)a6[2];
        v72 = v304;
        v73 = v305;
        v78 = *(_QWORD *)(v71 + 832);
        if (v78)
          v75 = *(_WORD *)(v78 + 8);
        else
          v75 = 0;
        v79 = 199;
      }
      else
      {
        if (v70 != 2)
          goto LABEL_194;
        v71 = (uint64_t)a6[2];
        v72 = v304;
        v73 = v305;
        v74 = *(_QWORD *)(v71 + 832);
        if (v74)
          v75 = *(_WORD *)(v74 + 8);
        else
          v75 = 0;
        v79 = 198;
      }
LABEL_192:
      v57 = sub_1C5D52060(v71, v79, (const llvm::APInt *)&v306, v72, v73, (uint64_t)v67, v69, v75);
LABEL_193:
      v67 = v57;
      LODWORD(v69) = v58;
      goto LABEL_194;
    }
    if ((_BYTE)v304)
    {
      if (((_BYTE)v304 + 104) >= 0x13u
        && ((_BYTE)v304 - 8) >= 7u
        && ((_BYTE)v304 - 75) >= 0x2Du)
      {
LABEL_61:
        v79 = 200;
        goto LABEL_187;
      }
    }
    else
    {
      v228 = *(_DWORD *)(v305 + 8);
      if ((v228 & 0xFE) == 0x12)
        v228 = *(_DWORD *)(**(_QWORD **)(v305 + 16) + 8);
      if (v228 > 6u)
        goto LABEL_61;
    }
    v79 = 215;
LABEL_187:
    v71 = (uint64_t)a6[2];
    v72 = v304;
    v73 = v305;
    v229 = *(_QWORD *)(v71 + 832);
    if (v229)
      v75 = *(_WORD *)(v229 + 8);
    else
      v75 = 0;
    goto LABEL_192;
  }
  v33 = v305;
  v39 = *(_DWORD *)(v305 + 8);
LABEL_31:
  if ((v39 & 0xFE) != 0x12)
    goto LABEL_32;
  v47 = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v25);
LABEL_63:
  LOBYTE(v308) = v47;
  v291 = v14;
  v297 = v35;
  if ((_BYTE)v304)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v304);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v304);
  v82 = ExtendedSizeInBits;
  if ((_DWORD)v81 == 1)
  v310 = v312;
  v311 = 0x400000000;
  if (v82)
  {
    v86 = 0;
    v87 = 0;
    v300 = v16 >> 1;
    v294 = a5;
    v293 = v82;
    while (1)
    {
      if (v297)
      {
        if (v308 == 6)
        {
          v88 = sub_1C49152F8((uint64_t)a6, v301, (uint64_t)v29, v31);
          v90 = v89;
        }
        else
        {
          v299 = (uint64_t)v29;
          v108 = v82 - v87;
          if ((v300 & 1) != 0)
            v109 = 16;
          else
            v109 = 32;
          if (v108 >= 0x10)
            v86 = v109;
          else
            v86 = 16;
          if (v108 >= 0x20)
            v110 = 32;
          else
            v110 = v82 - v87;
          v112 = sub_1C47A8C74((unsigned __int8 *)&v308);
          if ((_DWORD)v111 == 1)
          v113 = v86 / v112;
          v317 = &v319;
          v318 = 0x400000000;
          if (v86 / v112 == 1)
          {
            v114 = (uint64_t)a6[2];
            v115 = (llvm *)v308;
            v116 = *(_QWORD *)(v301 + 32);
            v117 = *(_QWORD *)(v116 + 40);
            v118 = *(_QWORD *)(v116 + 48);
            v119 = sub_1C6366AB4(v114, v87 / v112, (const llvm::APInt *)&v306, (llvm *)6, 0, 0, 0);
            v122 = 0;
            v123 = *(_QWORD *)(v114 + 832);
            v29 = (uint64_t *)v299;
            if (v123)
              v122 = *(_WORD *)(v123 + 8);
            v125 = sub_1C5D56C70(v114, 148, (const llvm::APInt *)&v306, v115, 0, v117, v118, v121, (uint64_t)v119, v120, v122);
            v127 = 0;
            v128 = (uint64_t)a6[2];
            v129 = *(uint64_t **)(v301 + 32);
            v130 = *v129;
            v131 = v129[1];
            v132 = *(_QWORD *)(v128 + 832);
            if (v132)
              v127 = *(_WORD *)(v132 + 8);
            v87 += v112;
            a5 = v294;
            v88 = sub_1C5D58E08(v128, (const char *)v294, (const llvm::APInt *)&v306, (llvm *)1, 0, (uint64_t)v125, v124, v126, v299, v31, v130, v131, SHIDWORD(v131), v127);
            v90 = v133;
            v82 = v293;
          }
          else
          {
            v313 = &v315;
            v314 = 0x400000000;
            if (v86 >= v112)
            {
              v292 = v86;
              v296 = v31;
              v161 = 0;
              v162 = v110 / v112;
              do
              {
                v163 = (uint64_t)a6[2];
                v164 = (llvm *)v308;
                if (v161 >= v162)
                {
                  v173 = sub_1C61312D0((uint64_t)a6[2], (llvm *)v308, 0);
                }
                else
                {
                  v165 = *(_QWORD *)(v301 + 32);
                  v167 = *(_QWORD *)(v165 + 40);
                  v166 = *(_QWORD *)(v165 + 48);
                  v168 = sub_1C6366AB4((uint64_t)a6[2], v87 / v112, (const llvm::APInt *)&v306, (llvm *)6, 0, 0, 0);
                  v171 = 0;
                  v172 = *(_QWORD *)(v163 + 832);
                  if (v172)
                    v171 = *(_WORD *)(v172 + 8);
                  v173 = sub_1C5D56C70(v163, 148, (const llvm::APInt *)&v306, v164, 0, v167, v166, v170, (uint64_t)v168, v169, v171);
                }
                v175 = v173;
                v176 = v174;
                v177 = v314;
                if (v314 >= (unint64_t)HIDWORD(v314))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, (uint64_t)&v315, v314 + 1, 16);
                  v177 = v314;
                }
                v87 += v112;
                v178 = (char *)v313 + 16 * v177;
                *v178 = v175;
                v178[1] = v176;
                v143 = v314 + 1;
                LODWORD(v314) = v314 + 1;
                ++v161;
              }
              while (v113 != v161);
              v31 = v296;
              v82 = v293;
              v86 = v292;
            }
            else
            {
              v143 = 0;
              v82 = v293;
            }
            v179 = sub_1C47AC934((char)v308, v143);
            v180 = (uint64_t)a6[2];
            v181 = *(_QWORD *)(v180 + 832);
            a5 = v294;
            v29 = (uint64_t *)v299;
            if (v181)
              v182 = *(unsigned __int16 *)(v181 + 8);
            else
              v182 = 0;
            v184 = sub_1C636D0C8(v180, (const char *)0x92, (const llvm::APInt *)&v306, (llvm *)v179, 0, (uint64_t *)v313, v314, v182);
            v186 = 0;
            v187 = (uint64_t)a6[2];
            v188 = *(uint64_t **)(v301 + 32);
            v189 = *v188;
            v190 = v188[1];
            v191 = *(_QWORD *)(v187 + 832);
            if (v191)
              v186 = *(_WORD *)(v191 + 8);
            v88 = sub_1C5D58E08(v187, (const char *)v294, (const llvm::APInt *)&v306, (llvm *)1, 0, (uint64_t)v184, v183, v185, v299, v31, v189, v190, SHIDWORD(v190), v186);
            v90 = v192;
            if (v313 != &v315)
              free(v313);
          }
          if (v317 != &v319)
            free(v317);
        }
        v193 = v311;
        if (v311 >= (unint64_t)HIDWORD(v311))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v310, (uint64_t)v312, v311 + 1, 16);
          v193 = v311;
        }
        v194 = (uint64_t **)((char *)v310 + 16 * v193);
        *v194 = v88;
        v194[1] = (uint64_t *)v90;
        LODWORD(v311) = v311 + 1;
      }
      else
      {
        v91 = v82 - v87;
        if ((v300 & 1) != 0)
          v92 = 16;
        else
          v92 = 32;
        if ((v300 & 1) != 0)
          v93 = 4;
        else
          v93 = 5;
        if ((v300 & 1) != 0)
          v94 = 1;
        else
          v94 = 2;
        if (v91 >= 0x11)
          v86 = v92;
        else
          v86 = 16;
        if (v91 >= 0x11)
          v95 = v93;
        else
          v95 = 4;
        if (v91 >= 0x11)
          v96 = v94;
        else
          v96 = 1;
        v295 = v96;
        v99 = sub_1C47A8C74((unsigned __int8 *)&v308);
        if ((_DWORD)v97 == 1)
        v100 = (uint64_t)a6[2];
        v317 = (uint64_t *)v306;
        if (v306)
          llvm::MetadataTracking::track((uint64_t)&v317, v306, 2);
        LODWORD(v318) = v307;
        v101 = sub_1C48258FC(v100, a5, (const llvm::APInt *)&v317, (llvm *)v95, 0, (uint64_t)v29, v31, v98, v95, 0);
        v103 = v102;
        if (v317)
          llvm::MetadataTracking::untrack((uint64_t)&v317, (unsigned __int8 *)v317);
        v104 = v86 / v99;
        v298 = v29;
        if ((_DWORD)v104 == 1)
        {
          v105 = (uint64_t)a6[2];
          v106 = *(_QWORD *)(v105 + 832);
          if (v106)
            v107 = *(_WORD *)(v106 + 8);
          else
            v107 = 0;
          v138 = sub_1C5D52060(v105, 216, (const llvm::APInt *)&v306, (llvm *)v308, 0, (uint64_t)v101, v103, v107);
          v140 = v139;
          v141 = v311;
          if (v311 >= (unint64_t)HIDWORD(v311))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v310, (uint64_t)v312, v311 + 1, 16);
            v141 = v311;
          }
          v142 = (uint64_t **)((char *)v310 + 16 * v141);
          *v142 = v138;
          v142[1] = v140;
          LODWORD(v311) = v311 + 1;
        }
        else
        {
          v134 = sub_1C47AC934((char)v308, v86 / v99);
          v135 = (uint64_t)a6[2];
          v136 = *(_QWORD *)(v135 + 832);
          if (v136)
            v137 = *(_WORD *)(v136 + 8);
          else
            v137 = 0;
          v144 = sub_1C5D52060(v135, 216, (const llvm::APInt *)&v306, (llvm *)v134, 0, (uint64_t)v101, v103, v137);
          if (v86 >= v99)
          {
            v146 = (uint64_t)v144;
            v147 = 0;
            v148 = v103 & 0xFFFFFFFF00000000 | v145;
            do
            {
              v149 = (uint64_t)a6[2];
              v150 = (llvm *)v308;
              v151 = sub_1C6366AB4(v149, v147, (const llvm::APInt *)&v306, (llvm *)5, 0, 0, 0);
              v154 = 0;
              v155 = *(_QWORD *)(v149 + 832);
              if (v155)
                v154 = *(_WORD *)(v155 + 8);
              v156 = sub_1C5D56C70(v149, 148, (const llvm::APInt *)&v306, v150, 0, v146, v148, v153, (uint64_t)v151, v152, v154);
              v158 = v157;
              v159 = v311;
              if (v311 >= (unint64_t)HIDWORD(v311))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v310, (uint64_t)v312, v311 + 1, 16);
                v159 = v311;
              }
              v160 = (uint64_t **)((char *)v310 + 16 * v159);
              *v160 = v156;
              v160[1] = v158;
              LODWORD(v311) = v311 + 1;
              ++v147;
            }
            while (v104 != v147);
          }
        }
        a5 = v294;
        LOBYTE(v300) = v295 + v300;
        v87 += v86;
        v29 = v298;
        v82 = v293;
      }
      if (v87 >= v82)
        break;
      v195 = v29[10];
      v196 = (_QWORD *)(v195 + 24);
      if (*(_DWORD *)(v195 + 32) >= 0x41u)
        v196 = (_QWORD *)*v196;
      v29 = sub_1C6366AB4((uint64_t)a6[2], *v196 + (v86 >> 3), (const llvm::APInt *)&v306, (llvm *)4, 0, 0, 0);
      v31 = v31 & 0xFFFFFFFF00000000 | v197;
    }
  }
  v83 = (uint64_t)a6[2];
  if (v297)
  {
    v84 = *(_QWORD *)(v83 + 832);
    if (v84)
      v85 = *(unsigned __int16 *)(v84 + 8);
    else
      v85 = 0;
    v208 = sub_1C636D0C8(v83, (const char *)2, (const llvm::APInt *)&v306, (llvm *)1, 0, (uint64_t *)v310, v311, v85);
    v209 = *a6;
    v317 = v208;
    v318 = v210;
    v211 = v209;
    v212 = v301;
    v213 = 1;
  }
  else
  {
    v198 = *(_QWORD *)(v83 + 832);
    if (v198)
      v199 = *(unsigned __int16 *)(v198 + 8);
    else
      v199 = 0;
    v214 = sub_1C636D0C8(v83, (const char *)0x92, (const llvm::APInt *)&v306, v304, v305, (uint64_t *)v310, v311, v199);
    v215 = *(uint64_t **)(v291 + 32);
    v216 = *v215;
    v217 = v215[1];
    v218 = *a6;
    v317 = v214;
    LODWORD(v318) = v219;
    v319 = v216;
    v320 = v217;
    v211 = v218;
    v212 = v291;
    v213 = 2;
  }
  v220 = sub_1C5C5B0B4(v211, v212, (uint64_t *)&v317, v213, 1);
  v221 = v310;
  if (v310 != v312)
    goto LABEL_178;
LABEL_196:
  if (v306)
    llvm::MetadataTracking::untrack((uint64_t)&v306, v306);
  return v220;
}

uint64_t *sub_1C490FF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm **v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t *v15;
  BOOL v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t i;
  uint64_t v46;
  __int16 v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  llvm *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  unsigned int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v85;
  llvm *v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  void **v100;
  uint64_t v101;
  llvm *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  void *v110[2];
  char v111;
  void *__p;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  _OWORD v118[6];
  __int128 v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  __int128 v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  _QWORD v127[2];
  int v128;
  int v129;
  const char *v130;
  const char *v131;
  uint64_t v132;
  char v133;
  char v134;
  void *v135;
  uint64_t v136;
  _BYTE v137[260];
  int v138;
  uint64_t v139;
  __int128 v140;
  _OWORD v141[8];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v5 = *(llvm ***)(*(_QWORD *)a2 + 40);
  v6 = *v5;
  v7 = (uint64_t)v5[1];
  v8 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v9 = sub_1C6143634((_DWORD *)a2);
  v10 = (1 << *(_BYTE *)(v8 + 34)) | *(_QWORD *)(v8 + 8);
  v11 = __clz(v10 & -v10);
  v12 = *(_QWORD *)a2;
  v13 = *(unsigned __int8 **)(*(_QWORD *)a2 + 64);
  v121 = v13;
  v14 = (_QWORD *)v12;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v121, v13, 2);
    v14 = *(_QWORD **)a2;
  }
  v122 = *(_DWORD *)(v12 + 60);
  v15 = (uint64_t *)v14[4];
  v106 = *v15;
  v107 = v15[1];
  if ((63 - v11) <= 1u && (1 << (63 - v11)) % v9)
  {
    if (v9 <= 8 && v11 != 63 && (_DWORD)v9 != 3)
    {
LABEL_10:
      if (*(_DWORD *)(a2 + 88))
        v17 = *(_DWORD *)(a2 + 68) == 1;
      else
        v17 = 1;
      v18 = v17;
      if (v17)
      {
        v19 = *(_OWORD *)(a2 + 48);
        v141[1] = *(_OWORD *)(a2 + 32);
        v141[2] = v19;
        v20 = *(_OWORD *)(a2 + 80);
        v141[3] = *(_OWORD *)(a2 + 64);
        v141[4] = v20;
        v21 = *(_OWORD *)(a2 + 16);
        v140 = *(_OWORD *)a2;
        v141[0] = v21;
      }
      else
      {
        v74 = sub_1C636B420(*(_QWORD *)(a3 + 16), v14[10], v14[11], (uint64_t)&v121, v106, v107, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v8);
        v75 = v74[4];
        v106 = *(_QWORD *)v75;
        LODWORD(v107) = *(_DWORD *)(v75 + 8);
        sub_1C61436A0((uint64_t)&v140, (uint64_t)v74);
      }
      v76 = sub_1C61435C8(a2);
      switch((int)v76)
      {
        case 0:
          v77 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2192);
          goto LABEL_63;
        case 1:
          LOBYTE(v118[0]) = 0;
          v76 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _OWORD *))(*(_QWORD *)a1 + 2200))(a1, &v140, a3, v118);
          v73 = (uint64_t *)v76;
          v78 = v79;
          if (LOBYTE(v118[0]))
          {
            v80 = (int)v121;
            if (v121)
            {
              v81 = *(_QWORD *)&v121[-8 * *((unsigned int *)v121 + 2)];
              if (*(_BYTE *)v81 != 15)
                v81 = *(_QWORD *)(v81 - 8 * *(unsigned int *)(v81 + 8));
              v82 = *((_DWORD *)v121 + 1);
              v80 = *((unsigned __int16 *)v121 + 1);
            }
            else
            {
              v81 = 0;
              v82 = 0;
            }
            v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) + 640) + 16);
            v97 = *(_QWORD *)(v96 + 56);
            LODWORD(v126) = 11;
            BYTE4(v126) = 2;
            v127[0] = v97;
            v127[1] = v81;
            v128 = v82;
            v129 = v80;
            v130 = "agx2-lower";
            v131 = "DeviceLoadAddrMode";
            v132 = 18;
            v133 = 0;
            v134 = 0;
            v135 = v137;
            v136 = 0x400000000;
            v137[256] = 0;
            v138 = -1;
            v139 = v96;
            v125 = &off_1E814E570;
            v111 = 6;
            strcpy((char *)v110, "String");
            __p = operator new(0x38uLL);
            v113 = xmmword_1C642B420;
            strcpy((char *)__p, "Zero-extended device memory load cannot fold addr mode");
            v114 = 0;
            v115 = 0;
            sub_1C47E3888((uint64_t)&v125, (uint64_t)v110);
            if (SHIBYTE(v113) < 0)
              operator delete(__p);
            if (v111 < 0)
              operator delete(v110[0]);
            v76 = llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v125);
            v125 = &off_1E814E790;
            v98 = (char *)v135;
            if ((_DWORD)v136)
            {
              v99 = (unint64_t)v136 << 6;
              do
              {
                v100 = (void **)&v98[v99];
                if (v98[v99 - 17] < 0)
                  operator delete(*(v100 - 5));
                if (*((char *)v100 - 41) < 0)
                  operator delete(*(v100 - 8));
                v99 -= 64;
              }
              while (v99);
              v98 = (char *)v135;
            }
            if (v98 != v137)
              free(v98);
          }
          break;
        case 2:
          v77 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2208);
          goto LABEL_63;
        case 3:
          v77 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2216);
LABEL_63:
          v76 = v77();
          v73 = (uint64_t *)v76;
          v78 = v83;
          break;
        default:
          v73 = 0;
          v78 = 0;
          break;
      }
      if ((v18 & 1) == 0)
      {
        v85 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        v86 = *(llvm **)v85;
        v87 = *(_QWORD *)(v85 + 8);
        v88 = *(_DWORD *)(a2 + 88);
        v108 = v121;
        if (v121)
          v76 = llvm::MetadataTracking::track((uint64_t)&v108, v121, 2);
        v109 = v122;
        v89 = sub_1C614226C(v76, (uint64_t)v73, v78, v86, v87, v88, (const llvm::APInt *)&v108, a3);
        v91 = v90;
        if (v108)
          llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
        v92 = *(_QWORD *)(a3 + 16);
        v93 = sub_1C636A8B4(v92, (uint64_t)v86, v87, 1, 0);
        v73 = sub_1C636D6B4(v92, (const char *)0x37, (const llvm::APInt *)&v121, v93, v94, (uint64_t)v89, v91, v95, v106, v107);
      }
      goto LABEL_65;
    }
  }
  else if ((_DWORD)v9 != 3)
  {
    goto LABEL_10;
  }
  v101 = v7;
  v102 = v6;
  v103 = v14;
  v104 = a2;
  v22 = *(uint64_t **)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  v125 = v127;
  v126 = 0x800000000;
  *(_QWORD *)&v140 = v141;
  *((_QWORD *)&v140 + 1) = 0x800000000;
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v46 = *(_QWORD *)(a3 + 16);
      sub_1C4824250((uint64_t *)v8, i, (uint64_t)&v119);
      v47 = *(_WORD *)(v8 + 32);
      memset(v118, 0, 32);
      v123 = v119;
      v124 = v120;
      v48 = sub_1C63681B0(v46, 3, 0, (uint64_t)&v121, v106, v107, (uint64_t)v22, v23, &v123, 256, 0, v47, (uint64_t)v118, 0);
      sub_1C61436A0((uint64_t)v118, (uint64_t)v48);
      v49 = sub_1C490FF60(a1, v118, a3);
      if (v49)
        v50 = (_QWORD *)v49;
      else
        v50 = v48;
      v51 = v22[5] + 16 * v23;
      v52 = *(llvm **)v51;
      v53 = *(_QWORD *)(v51 + 8);
      v54 = *(_QWORD *)(a3 + 16);
      v55 = sub_1C6366AB4(v54, 1, (const llvm::APInt *)&v121, *(llvm **)v51, v53, 0, 0);
      v58 = 0;
      v59 = *(_QWORD *)(v54 + 832);
      if (v59)
        v58 = *(_WORD *)(v59 + 8);
      v22 = sub_1C5D56C70(v54, 56, (const llvm::APInt *)&v121, v52, v53, (uint64_t)v22, v23, v57, (uint64_t)v55, v56, v58);
      v61 = v60;
      v62 = v126;
      if (v126 >= (unint64_t)HIDWORD(v126))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 16);
        v62 = v126;
      }
      v63 = (char *)v125 + 16 * v62;
      *v63 = v50;
      v63[1] = 0;
      LODWORD(v126) = v126 + 1;
      v64 = DWORD2(v140);
      if (DWORD2(v140) >= (unint64_t)HIDWORD(v140))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v141, DWORD2(v140) + 1, 16);
        v64 = DWORD2(v140);
      }
      v23 = v23 & 0xFFFFFFFF00000000 | v61;
      v65 = (_QWORD *)(v140 + 16 * v64);
      *v65 = v50;
      v65[1] = 1;
      ++DWORD2(v140);
    }
  }
  v25 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56), 3, 0, v9, 0);
  v26 = 0;
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 + 832);
  if (v28)
    v26 = *(unsigned __int16 *)(v28 + 8);
  v29 = (uint64_t)sub_1C636D0C8(v27, (const char *)0x92, (const llvm::APInt *)&v121, v25, v24, (uint64_t *)v125, v126, v26);
  v30 = v29;
  v32 = v31;
  v33 = *(_DWORD *)(v104 + 88);
  v116 = v121;
  if (v121)
    v29 = llvm::MetadataTracking::track((uint64_t)&v116, v121, 2);
  v117 = v122;
  v34 = sub_1C614226C(v29, v30, v32, v102, v101, v33, (const llvm::APInt *)&v116, a3);
  v36 = v35;
  v37 = v32 & 0xFFFFFFFF00000000 | v35;
  if (v116)
    llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
  v38 = (unsigned __int8 *)(v34[5] + 16 * v36);
  v39 = *v38;
  if (v39 != v102 || ((v40 = *((_QWORD *)v38 + 1), !v39) ? (v41 = v40 == v101) : (v41 = 1), !v41))
  {
    v42 = *(_QWORD *)(a3 + 16);
    v43 = *(_QWORD *)(v42 + 832);
    if (v43)
      v44 = *(_WORD *)(v43 + 8);
    else
      v44 = 0;
    v34 = sub_1C5D52060(v42, 216, (const llvm::APInt *)&v121, v102, v101, (uint64_t)v34, v37, v44);
    LODWORD(v37) = v66;
  }
  v67 = *(_QWORD *)(a3 + 16);
  v68 = *(_QWORD *)(v67 + 832);
  if (v68)
    v69 = *(unsigned __int16 *)(v68 + 8);
  else
    v69 = 0;
  v70 = sub_1C636D0C8(v67, (const char *)2, (const llvm::APInt *)&v121, (llvm *)1, 0, (uint64_t *)v140, DWORD2(v140), v69);
  v73 = sub_1C636D6B4(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v121, v103[5], *((unsigned __int16 *)v103 + 29), (uint64_t)v34, v37, v72, (uint64_t)v70, v71);
  if ((_OWORD *)v140 != v141)
    free((void *)v140);
  if (v125 != v127)
    free(v125);
LABEL_65:
  if (v121)
    llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
  return v73;
}

uint64_t *sub_1C4910804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  llvm *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t i;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  __int16 v53;
  uint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  llvm *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  void *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  void **v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v95[2];
  char v96;
  void *__p;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[6];
  __int128 v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD v110[2];
  int v111;
  int v112;
  const char *v113;
  const char *v114;
  uint64_t v115;
  char v116;
  char v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE v120[260];
  int v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 **)(*(_QWORD *)a2 + 64);
  v104 = v6;
  v7 = (_QWORD *)v5;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v104, v6, 2);
    v7 = *(_QWORD **)a2;
  }
  v105 = *(_DWORD *)(v5 + 60);
  v8 = (uint64_t *)v7[4];
  v92 = v8[1];
  v93 = *v8;
  v10 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a2 + 88))
  {
    v11 = (llvm *)v7[10];
    v12 = v7[11];
    if ((_BYTE)v11)
    {
      v14 = v11 - 120 >= 0x20 && v11 - 2 >= 6;
      if (!v14 || v11 - 15 < 0x3C)
        goto LABEL_18;
    }
    else
    {
      if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
        v13 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
      else
        v13 = *(_DWORD *)(v12 + 8);
      if (v13 == 13)
      {
LABEL_18:
        v23 = *(_QWORD *)(a3 + 16);
        v24 = *(_QWORD *)(v23 + 832);
        if (v24)
          v25 = *(_WORD *)(v24 + 8);
        else
          v25 = 0;
        v21 = sub_1C5D52060(v23, 201, (const llvm::APInt *)&v104, v11, v12, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), v25);
LABEL_22:
        v10 = (uint64_t)v21;
        v9 = v9 & 0xFFFFFFFF00000000 | v22;
        goto LABEL_23;
      }
    }
    v15 = *(_QWORD *)(a3 + 16);
    v16 = sub_1C6366AB4(v15, 0, (const llvm::APInt *)&v104, (llvm *)5, 0, 0, 0);
    v19 = 0;
    v20 = *(_QWORD *)(v15 + 832);
    if (v20)
      v19 = *(_WORD *)(v20 + 8);
    v21 = sub_1C5D56C70(v15, 212, (const llvm::APInt *)&v104, v11, v12, v10, v9, v18, (uint64_t)v16, v17, v19);
    goto LABEL_22;
  }
LABEL_23:
  v26 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v27 = sub_1C6143710(a2);
  v28 = (1 << *(_BYTE *)(v26 + 34)) | *(_QWORD *)(v26 + 8);
  v29 = __clz(v28 & -v28);
  if ((1 << (63 - v29)) % v27)
    v30 = (63 - v29) > 1u;
  else
    v30 = 1;
  if (v30)
  {
    if ((_DWORD)v27 != 3)
    {
LABEL_33:
      switch(sub_1C61435C8(a2))
      {
        case 0u:
          v31 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2224);
          goto LABEL_61;
        case 1u:
          LOBYTE(v101[0]) = 0;
          v78 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 2232))(a1, a2, a3, v101);
          if (!LOBYTE(v101[0]))
            goto LABEL_66;
          v80 = (int)v104;
          if (v104)
          {
            v81 = *(_QWORD *)&v104[-8 * *((unsigned int *)v104 + 2)];
            if (*(_BYTE *)v81 != 15)
              v81 = *(_QWORD *)(v81 - 8 * *(unsigned int *)(v81 + 8));
            v82 = *((_DWORD *)v104 + 1);
            v80 = *((unsigned __int16 *)v104 + 1);
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) + 640) + 16);
          v85 = *(_QWORD *)(v84 + 56);
          LODWORD(v109) = 11;
          BYTE4(v109) = 2;
          v110[0] = v85;
          v110[1] = v81;
          v111 = v82;
          v112 = v80;
          v113 = "agx2-lower";
          v114 = "DeviceStoreAddrMode";
          v115 = 19;
          v116 = 0;
          v117 = 0;
          v118 = v120;
          v119 = 0x400000000;
          v120[256] = 0;
          v121 = -1;
          v122 = v84;
          v108 = &off_1E814E570;
          v96 = 6;
          strcpy((char *)v95, "String");
          __p = operator new(0x38uLL);
          v98 = xmmword_1C642B430;
          strcpy((char *)__p, "Zero-extended device memory store cannot fold addr mode");
          v99 = 0;
          v100 = 0;
          sub_1C47E3888((uint64_t)&v108, (uint64_t)v95);
          if (SHIBYTE(v98) < 0)
            operator delete(__p);
          if (v96 < 0)
            operator delete(v95[0]);
          llvm::OptimizationRemarkEmitter::emit(*(llvm::OptimizationRemarkEmitter **)(*(_QWORD *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v108);
          v108 = &off_1E814E790;
          v86 = v118;
          if ((_DWORD)v119)
          {
            v87 = (unint64_t)v119 << 6;
            do
            {
              v88 = (void **)&v86[v87];
              if ((char)v86[v87 - 17] < 0)
                operator delete(*(v88 - 5));
              if (*((char *)v88 - 41) < 0)
                operator delete(*(v88 - 8));
              v87 -= 64;
            }
            while (v87);
            v86 = v118;
          }
          if (v86 == v120)
            goto LABEL_66;
          v79 = v86;
          goto LABEL_58;
        case 2u:
          v31 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2240);
          goto LABEL_61;
        case 3u:
          v31 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 2248);
LABEL_61:
          v78 = (uint64_t *)v31();
          goto LABEL_66;
        default:
          v78 = 0;
          goto LABEL_66;
      }
    }
  }
  else if (v27 <= 8 && (_DWORD)v27 != 3 && v29 != 63)
  {
    goto LABEL_33;
  }
  v33 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a3 + 16) + 56), 3, 0, v27, 0);
  v34 = 0;
  v35 = *(_QWORD *)(a3 + 16);
  v36 = *(_QWORD *)(v35 + 832);
  if (v36)
    v34 = *(_WORD *)(v36 + 8);
  v37 = sub_1C5D52060(v35, 216, (const llvm::APInt *)&v104, v33, v32, v10, v9, v34);
  v90 = v38;
  v91 = (uint64_t)v37;
  v39 = *(uint64_t **)(a2 + 8);
  v40 = *(_QWORD *)(a2 + 16);
  v108 = v110;
  v109 = 0x800000000;
  if ((_DWORD)v27)
  {
    v89 = v27;
    for (i = 0; i != v89; ++i)
    {
      v44 = *(_QWORD *)(a3 + 16);
      v45 = sub_1C63662D4(v44, i, (const llvm::APInt *)&v104, 0);
      v48 = *(_QWORD *)(v44 + 832);
      if (v48)
        LOWORD(v48) = *(_WORD *)(v48 + 8);
      v49 = sub_1C5D56C70(v44, 148, (const llvm::APInt *)&v104, (llvm *)3, 0, v91, v90, v47, (uint64_t)v45, v46, v48);
      v51 = v50;
      v52 = *(_QWORD *)(a3 + 16);
      sub_1C4824250((uint64_t *)v26, i, (uint64_t)&v102);
      v53 = *(_WORD *)(v26 + 32);
      memset(v101, 0, 32);
      v106 = v102;
      v107 = v103;
      v54 = (uint64_t *)(v49[5] + 16 * v51);
      sub_1C6365BD8(v52, *v54, v54[1]);
      v55 = sub_1C636B75C(v52, v93, v92, (uint64_t)&v104, (uint64_t)v49, v51, (uint64_t)v39, v40, (uint64_t)&v106, 0, 0, v53, (uint64_t)v101);
      v57 = v56;
      sub_1C61436D8((uint64_t)v101, (uint64_t)v55);
      v58 = sub_1C4910804(a1, v101, a3);
      if (v58)
        v60 = (_QWORD *)v58;
      else
        v60 = v55;
      if (v58)
        v61 = v57 & 0xFFFFFFFF00000000 | v59;
      else
        v61 = v57;
      v62 = v39[5] + 16 * v40;
      v63 = *(llvm **)v62;
      v64 = *(_QWORD *)(v62 + 8);
      v65 = *(_QWORD *)(a3 + 16);
      v66 = sub_1C6366AB4(v65, 1, (const llvm::APInt *)&v104, *(llvm **)v62, v64, 0, 0);
      v69 = 0;
      v70 = *(_QWORD *)(v65 + 832);
      if (v70)
        v69 = *(_WORD *)(v70 + 8);
      v39 = sub_1C5D56C70(v65, 56, (const llvm::APInt *)&v104, v63, v64, (uint64_t)v39, v40, v68, (uint64_t)v66, v67, v69);
      v72 = v71;
      v73 = v109;
      if (v109 >= (unint64_t)HIDWORD(v109))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
        v73 = v109;
      }
      v40 = v40 & 0xFFFFFFFF00000000 | v72;
      v74 = (char *)v108 + 16 * v73;
      *v74 = v60;
      v74[1] = v61;
      v41 = (v109 + 1);
      LODWORD(v109) = v109 + 1;
    }
    v42 = (uint64_t *)v108;
  }
  else
  {
    v41 = 0;
    v42 = v110;
  }
  v75 = *(_QWORD *)(a3 + 16);
  v76 = *(_QWORD *)(v75 + 832);
  if (v76)
    v77 = *(unsigned __int16 *)(v76 + 8);
  else
    v77 = 0;
  v78 = sub_1C636D0C8(v75, (const char *)2, (const llvm::APInt *)&v104, (llvm *)1, 0, v42, v41, v77);
  v79 = v108;
  if (v108 != v110)
LABEL_58:
    free(v79);
LABEL_66:
  if (v104)
    llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
  return v78;
}

void sub_1C4910F60(int a1, uint64_t a2, int a3, llvm::APInt *this)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  int v29;
  unint64_t v30;
  unsigned int v31;

  v6 = *((_DWORD *)this + 2);
  v7 = *(unsigned __int16 *)(a2 + 24);
  v31 = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
  else
    v30 = 0;
  if (*((_DWORD *)this + 6) >= 0x41u)
  {
    v8 = *((_QWORD *)this + 2);
    if (v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  v9 = v30;
  *((_QWORD *)this + 2) = v30;
  v10 = v31;
  *((_DWORD *)this + 6) = v31;
  if (*((_DWORD *)this + 2) > 0x40u || v10 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)this, v10);
    v11 = *((unsigned int *)this + 2);
    if (v11 <= 0x40)
    {
      *(_QWORD *)this = *((_QWORD *)this + 2);
      if (!a2)
        goto LABEL_32;
    }
    else
    {
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      if (!a2)
        goto LABEL_32;
    }
  }
  else
  {
    *(_QWORD *)this = v9;
    *((_DWORD *)this + 2) = v10;
    if (!a2)
      goto LABEL_32;
  }
  if ((*(_WORD *)(a2 + 24) & 0xFFFE) == 0xF016)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 80);
    v13 = (unsigned __int16 *)(v12 + 24);
    if (*(_DWORD *)(v12 + 32) >= 0x41u)
      v13 = *(unsigned __int16 **)v13;
    v14 = *v13;
    v31 = v6;
    if (v6 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v30, v14, 0);
    }
    else
    {
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      if (!v6)
        v15 = 0;
      v30 = v15 & v14;
    }
    if (*((_DWORD *)this + 6) >= 0x41u)
    {
      v16 = *((_QWORD *)this + 2);
      if (v16)
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    }
    v17 = v30;
    *((_QWORD *)this + 2) = v30;
    v18 = v31;
    *((_DWORD *)this + 6) = v31;
    v29 = v18;
    if (v18 > 0x40)
    {
      v28 = (void *)operator new[]();
      memcpy(v28, *((const void **)this + 2), ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v28);
      LODWORD(v18) = v29;
      v21 = (unint64_t)v28;
    }
    else
    {
      v19 = ~v17;
      if ((_DWORD)v18)
        v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      else
        v20 = 0;
      v21 = v20 & v19;
    }
    if (*((_DWORD *)this + 2) > 0x40u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v21;
    *((_DWORD *)this + 2) = v18;
    return;
  }
LABEL_32:
  if ((v7 - 396) < 2)
  {
    v22 = *(_DWORD *)(**(_QWORD **)(a2 + 32) + 76);
    goto LABEL_39;
  }
  if (v7 == 46)
  {
    v23 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 80);
    v24 = (int *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u)
      v24 = *(int **)v24;
    v25 = sub_1C49112E4(*v24);
    if ((v25 & 0xFF00000000) != 0)
    {
      v22 = dword_1C6608FA0[(int)v25];
LABEL_39:
      v26 = sub_1C4903D64(v22);
      if (v26 <= 0x1F)
      {
        v27 = v26 - v6;
        v31 = v6;
        if (v6 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
          v6 = v31;
        }
        else
        {
          v30 = 0;
        }
        sub_1C4912E54(&v30, v27 + v6, v6);
        if (*((_DWORD *)this + 2) >= 0x41u)
        {
          if (*(_QWORD *)this)
            MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
        }
        *(_QWORD *)this = v30;
        *((_DWORD *)this + 2) = v31;
      }
    }
  }
}

uint64_t sub_1C49112E4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = 0;
  if (a1 > 2543)
  {
    if (a1 <= 2706)
    {
      if (a1 <= 2664)
      {
        if (a1 == 2544)
        {
          v1 = 0x100000000;
          v2 = 28;
        }
        else if (a1 == 2586)
        {
LABEL_66:
          v1 = 0x100000000;
          v2 = 21;
        }
        else
        {
          v2 = 0;
          if (a1 == 2587)
          {
LABEL_62:
            v1 = 0x100000000;
            v2 = 22;
          }
        }
      }
      else
      {
        v2 = 0;
        switch(a1)
        {
          case 2665:
            v1 = 0x100000000;
            v2 = 35;
            break;
          case 2666:
            v1 = 0x100000000;
            v2 = 36;
            break;
          case 2667:
            v1 = 0x100000000;
            v2 = 37;
            break;
          case 2668:
            return v2 | v1;
          case 2669:
            v1 = 0x100000000;
            v2 = 39;
            break;
          case 2670:
            v2 = 0;
            v1 = 0x100000000;
            break;
          case 2671:
            v1 = 0x100000000;
            v2 = 4;
            break;
          case 2672:
            v1 = 0x100000000;
            v2 = 1;
            break;
          case 2673:
            v1 = 0x100000000;
            v2 = 5;
            break;
          case 2674:
            v1 = 0x100000000;
            v2 = 2;
            break;
          case 2675:
            v1 = 0x100000000;
            v2 = 6;
            break;
          case 2676:
            v1 = 0x100000000;
            v2 = 54;
            break;
          case 2677:
            v1 = 0x100000000;
            v2 = 26;
            break;
          case 2678:
            v1 = 0x100000000;
            v2 = 24;
            break;
          case 2679:
            goto LABEL_65;
          default:
            v1 = 0x100000000;
            v2 = 60;
            if (a1 != 2706)
            {
              v1 = 0;
              v2 = 0;
            }
            break;
        }
      }
      return v2 | v1;
    }
    if (a1 <= 2794)
    {
      v1 = 0x100000000;
      v2 = 40;
      v3 = 0x100000000;
      v4 = 63;
      if (a1 != 2769)
      {
        v3 = 0;
        v4 = 0;
      }
      if (a1 != 2732)
      {
        v1 = v3;
        v2 = v4;
      }
      v5 = 0x100000000;
      v6 = 59;
      v7 = 0x100000000;
      v8 = 61;
      if (a1 != 2708)
      {
        v7 = 0;
        v8 = 0;
      }
      if (a1 != 2707)
      {
        v5 = v7;
        v6 = v8;
      }
      v9 = a1 <= 2731;
    }
    else
    {
      if (a1 <= 2819)
      {
        v2 = 0;
        switch(a1)
        {
          case 2795:
            v1 = 0x100000000;
            v2 = 78;
            break;
          case 2796:
            v1 = 0x100000000;
            v2 = 77;
            break;
          case 2797:
          case 2798:
          case 2799:
          case 2800:
          case 2801:
          case 2802:
          case 2803:
          case 2804:
          case 2805:
          case 2806:
          case 2811:
          case 2812:
          case 2813:
            return v2 | v1;
          case 2807:
            v1 = 0x100000000;
            v2 = 65;
            break;
          case 2808:
            v1 = 0x100000000;
            v2 = 68;
            break;
          case 2809:
            v1 = 0x100000000;
            v2 = 66;
            break;
          case 2810:
            v1 = 0x100000000;
            v2 = 67;
            break;
          case 2814:
            v1 = 0x100000000;
            v2 = 76;
            break;
          case 2815:
          case 2816:
            v1 = 0x100000000;
            v2 = 69;
            break;
          default:
LABEL_112:
            v2 = 0;
            break;
        }
        return v2 | v1;
      }
      v1 = 0x100000000;
      v2 = 64;
      v10 = 0x100000000;
      v11 = 62;
      if (a1 != 2848)
      {
        v10 = 0;
        v11 = 0;
      }
      if (a1 != 2841)
      {
        v1 = v10;
        v2 = v11;
      }
      v5 = 0x100000000;
      v6 = 70;
      v12 = 0x100000000;
      v13 = 79;
      if (a1 != 2822)
      {
        v12 = 0;
        v13 = 0;
      }
      if (a1 != 2820)
      {
        v5 = v12;
        v6 = v13;
      }
      v9 = a1 <= 2840;
    }
LABEL_47:
    if (v9)
      v1 = v5;
    if (v9)
      v2 = v6;
    return v2 | v1;
  }
  if (a1 <= 2304)
  {
    if (a1 <= 2131)
    {
      if (a1 == 1269)
      {
LABEL_67:
        v1 = 0x100000000;
        v2 = 16;
      }
      else
      {
        v1 = 0x100000000;
        v2 = 29;
        v19 = 0x100000000;
        v20 = 52;
        if (a1 != 2108)
        {
          v19 = 0;
          v20 = 0;
        }
        if (a1 != 2107)
        {
          v1 = v19;
          v2 = v20;
        }
      }
    }
    else
    {
      v2 = 0;
      switch(a1)
      {
        case 2132:
          v1 = 0x100000000;
          v2 = 42;
          break;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          return v2 | v1;
        case 2139:
          v1 = 0x100000000;
          v2 = 43;
          break;
        case 2140:
          v1 = 0x100000000;
          v2 = 27;
          break;
        case 2145:
          v1 = 0x100000000;
          v2 = 7;
          break;
        case 2146:
          v1 = 0x100000000;
          v2 = 8;
          break;
        case 2147:
          v1 = 0x100000000;
          v2 = 9;
          break;
        case 2150:
          v1 = 0x100000000;
          v2 = 34;
          break;
        case 2151:
          v1 = 0x100000000;
          v2 = 33;
          break;
        case 2152:
          v1 = 0x100000000;
          v2 = 57;
          break;
        case 2154:
          v1 = 0x100000000;
          v2 = 55;
          break;
        case 2155:
          v1 = 0x100000000;
          v2 = 56;
          break;
        case 2156:
          v1 = 0x100000000;
          v2 = 41;
          break;
        case 2169:
          v1 = 0x100000000;
          v2 = 3;
          break;
        case 2170:
          goto LABEL_67;
        case 2173:
          v1 = 0x100000000;
          v2 = 13;
          break;
        case 2174:
          v1 = 0x100000000;
          v2 = 12;
          break;
        case 2175:
          v1 = 0x100000000;
          v2 = 10;
          break;
        case 2176:
          v1 = 0x100000000;
          v2 = 11;
          break;
        default:
          goto LABEL_112;
      }
    }
    return v2 | v1;
  }
  if (a1 <= 2422)
  {
    if (a1 <= 2364)
    {
      v2 = 0;
      switch(a1)
      {
        case 2305:
          v1 = 0x100000000;
          v2 = 38;
          break;
        case 2306:
          v1 = 0x100000000;
          v2 = 30;
          break;
        case 2307:
          v1 = 0x100000000;
          v2 = 32;
          break;
        case 2308:
          v1 = 0x100000000;
          v2 = 31;
          break;
        default:
          return v2 | v1;
      }
      return v2 | v1;
    }
    v1 = 0x100000000;
    v2 = 18;
    v14 = 0x100000000;
    v15 = 19;
    if (a1 != 2410)
    {
      v14 = 0;
      v15 = 0;
    }
    if (a1 != 2409)
    {
      v1 = v14;
      v2 = v15;
    }
    v5 = 0x100000000;
    v6 = 20;
    v16 = 0x100000000;
    v17 = 17;
    if (a1 != 2408)
    {
      v16 = 0;
      v17 = 0;
    }
    if (a1 != 2365)
    {
      v5 = v16;
      v6 = v17;
    }
    v9 = a1 <= 2408;
    goto LABEL_47;
  }
  v2 = 0;
  switch(a1)
  {
    case 2484:
      v1 = 0x100000000;
      v2 = 25;
      return v2 | v1;
    case 2485:
      v1 = 0x100000000;
      v2 = 23;
      return v2 | v1;
    case 2486:
      v1 = 0x100000000;
      v2 = 44;
      return v2 | v1;
    case 2487:
    case 2488:
    case 2489:
    case 2490:
      return v2 | v1;
    case 2491:
      goto LABEL_66;
    case 2492:
      goto LABEL_62;
    default:
      if (a1 == 2423)
      {
        v1 = 0x100000000;
        v2 = 53;
        return v2 | v1;
      }
      v2 = 0;
      if (a1 != 2444)
        return v2 | v1;
      break;
  }
LABEL_65:
  v1 = 0x100000000;
  v2 = 14;
  return v2 | v1;
}

void sub_1C49117F4(int a1, int a2, int a3, llvm::APInt *this, llvm::APInt *a5, uint64_t a6, int a7)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  const void **v16;
  void (**v17)();
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint8x8_t v31;
  __int32 v32;
  unsigned int v33;
  uint8x8_t v34;
  __int32 v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  char v48;
  char v49;
  unint64_t v50;
  unsigned int v51;
  const char *v52;
  unint64_t v53;
  unsigned int v54;
  void *v55;
  unsigned int v56;
  void *v57;
  const void *v58;
  const char *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  const char *v100;
  unsigned int v101;
  unsigned int v102;
  void *v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  unsigned int v118;
  uint64_t v119;
  const void *v120;
  unint64_t v121;
  int8x8_t *v122;
  int8x8_t v123;
  uint8x8_t v124;
  unint64_t v125;
  int8x8_t *v126;
  int8x8_t v127;
  uint8x8_t v128;
  uint8x8_t v129;
  __int32 v130;
  uint8x8_t v131;
  __int32 v132;
  uint8x8_t v133;
  __int32 v134;
  uint8x8_t v135;
  __int32 v136;
  _QWORD *v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int8x8_t *v147;
  int8x8_t v148;
  uint8x8_t v149;
  unint64_t v150;
  int8x8_t *v151;
  int8x8_t v152;
  uint8x8_t v153;
  unsigned int v154;
  unint64_t v155;
  int8x8_t *v156;
  int8x8_t v157;
  uint8x8_t v158;
  unint64_t v159;
  int8x8_t *v160;
  int8x8_t v161;
  uint8x8_t v162;
  size_t v163;
  void *v164;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  void *v168;
  unsigned int v169;
  void *v170;
  unsigned int v171;
  void *v172;
  unsigned int v173;
  void *__src;
  unsigned int v175;
  void *v176;
  unsigned int v177;
  unint64_t v178;
  void *v179;
  unsigned int v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  void *v184;
  unsigned int v185;
  void *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  void (**v190)();
  unsigned int v191[2];
  _QWORD *v192;
  uint64_t v193;
  int v194;
  _QWORD v195[8];
  int v196;
  uint64_t v197;
  _QWORD *v198;
  unsigned int v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)(*(_QWORD *)(a6 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a6 + 272) + 8 * a3);
  v12 = *v11;
  if (v12 && ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0))
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v14 = *((_DWORD *)this + 2);
  v15 = **(unsigned __int16 **)(v13 + 16);
  v191[0] = v14;
  if (v14 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v190, 0, 0);
  else
    v190 = 0;
  v16 = (const void **)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v16)
    MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
  v17 = v190;
  *((_QWORD *)this + 2) = v190;
  v18 = v191[0];
  *((_DWORD *)this + 6) = v191[0];
  if (*((_DWORD *)this + 2) > 0x40u || v18 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)this, v18);
    v19 = *((unsigned int *)this + 2);
    if (v19 <= 0x40)
      *(_QWORD *)this = *((_QWORD *)this + 2);
    else
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)this = v17;
    *((_DWORD *)this + 2) = v18;
  }
  v20 = *(_QWORD **)(*(_QWORD *)(v13 + 24) + 32);
  v192 = v195;
  v193 = 4;
  v194 = 0;
  v190 = (void (**)())off_1E816DB00;
  *(_QWORD *)v191 = v195;
  v195[4] = v20;
  v195[5] = v20[5];
  v195[6] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20[2] + 120))(v20[2]);
  v195[7] = *(_QWORD *)(*v20 + 40) + 272;
  v196 = 6;
  v197 = 1;
  for (i = 30; i != 190; i += 10)
    v191[i - 2] = -1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v20[1] + 16))(v20[1], *v20);
  if (v15 > 256)
  {
    if (v15 <= 312)
    {
      if (v15 == 257)
      {
        v37 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 80) - v14;
LABEL_177:
        v185 = v14;
        if (v14 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v184, 0, 0);
          v14 = v185;
        }
        else
        {
          v184 = 0;
        }
        sub_1C4912E54(&v184, v37 + v14, v14);
        if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
          MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
        *(_QWORD *)this = v184;
        *((_DWORD *)this + 2) = v185;
        goto LABEL_231;
      }
      if (v15 == 269)
        sub_1C4912E54(this, 0, *(unsigned __int8 *)(*(_QWORD *)(v20[7] + 8)+ 40* (*(_DWORD *)(v20[7] + 32) + *(_DWORD *)(*(_QWORD *)(v13 + 32) + 48))+ 16));
      goto LABEL_231;
    }
    if (v15 != 313)
    {
      if (v15 != 320)
        goto LABEL_231;
      v27 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 48);
      goto LABEL_35;
    }
    v38 = *(_QWORD *)(v13 + 32);
    v39 = *(_DWORD *)(v38 + 4);
    if (v39 < 0 && (v40 = v39 & 0x7FFFFFFF, v40 < *(_DWORD *)(a6 + 432)))
      v41 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v40);
    else
      v41 = 0;
    v44 = *(_DWORD *)(v38 + 36);
    v45 = *(_DWORD *)(v38 + 100);
    if ((v44 & 0x80000000) != 0 && (v44 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    {
      v46 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v44 & 0x7FFFFFFF));
      if ((v46 & 1) != 0)
      {
        v47 = v46 >> 3;
        goto LABEL_60;
      }
      if ((v46 & 4) != 0)
      {
        if ((v46 & 2) != 0)
          v47 = (unsigned __int16)(v46 >> 19);
        else
          v47 = v46 >> 19;
LABEL_60:
        v48 = *(_BYTE *)(v38 + 80);
        v49 = *(_BYTE *)(v38 + 144);
        v185 = v47;
        if (v47 > 0x40)
        {
          v165 = v44;
          llvm::APInt::initSlowCase((llvm::APInt *)&v184, 0, 0);
          v187 = v47;
          llvm::APInt::initSlowCase((llvm::APInt *)&v186, 0, 0);
          v44 = v165;
          if ((v45 & 0x80000000) == 0)
            goto LABEL_199;
        }
        else
        {
          v187 = v47;
          v184 = 0;
          v186 = 0;
          if ((v45 & 0x80000000) == 0)
            goto LABEL_199;
        }
        if ((v45 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
        {
          v50 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v45 & 0x7FFFFFFF));
          if ((v50 & 1) != 0)
          {
            v51 = v50 >> 3;
            goto LABEL_201;
          }
          if ((v50 & 4) != 0)
          {
            if ((v50 & 2) != 0)
              v51 = (unsigned __int16)(v50 >> 19);
            else
              v51 = v50 >> 19;
            goto LABEL_201;
          }
LABEL_200:
          v51 = (unsigned __int16)(v50 >> 3);
LABEL_201:
          v175 = v51;
          if (v51 > 0x40)
          {
            v154 = v44;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v177 = v51;
            llvm::APInt::initSlowCase((llvm::APInt *)&v176, 0, 0);
            v44 = v154;
          }
          else
          {
            v177 = v51;
            __src = 0;
            v176 = 0;
          }
          sub_1C54EB764((uint64_t)&v190, v44, (llvm::MDNode *)&v184, a5, (a7 + 1));
          if (v185 > 0x40)
          {
            v130 = 0;
            v146 = ((unint64_t)v185 + 63) >> 6;
            v147 = (int8x8_t *)v184;
            do
            {
              v148 = *v147++;
              v149 = (uint8x8_t)vcnt_s8(v148);
              v149.i16[0] = vaddlv_u8(v149);
              v130 += v149.i32[0];
              --v146;
            }
            while (v146);
          }
          else
          {
            v129 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
            v129.i16[0] = vaddlv_u8(v129);
            v130 = v129.i32[0];
          }
          if (v187 > 0x40)
          {
            v132 = 0;
            v150 = ((unint64_t)v187 + 63) >> 6;
            v151 = (int8x8_t *)v186;
            do
            {
              v152 = *v151++;
              v153 = (uint8x8_t)vcnt_s8(v152);
              v153.i16[0] = vaddlv_u8(v153);
              v132 += v153.i32[0];
              --v150;
            }
            while (v150);
          }
          else
          {
            v131 = (uint8x8_t)vcnt_s8((int8x8_t)v186);
            v131.i16[0] = vaddlv_u8(v131);
            v132 = v131.i32[0];
          }
          if (v132 + v130 == v185)
          {
            sub_1C54EB764((uint64_t)&v190, v45, (llvm::MDNode *)&__src, a5, (a7 + 1));
            if (v175 > 0x40)
            {
              v134 = 0;
              v155 = ((unint64_t)v175 + 63) >> 6;
              v156 = (int8x8_t *)__src;
              do
              {
                v157 = *v156++;
                v158 = (uint8x8_t)vcnt_s8(v157);
                v158.i16[0] = vaddlv_u8(v158);
                v134 += v158.i32[0];
                --v155;
              }
              while (v155);
            }
            else
            {
              v133 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
              v133.i16[0] = vaddlv_u8(v133);
              v134 = v133.i32[0];
            }
            if (v177 > 0x40)
            {
              v136 = 0;
              v159 = ((unint64_t)v177 + 63) >> 6;
              v160 = (int8x8_t *)v176;
              do
              {
                v161 = *v160++;
                v162 = (uint8x8_t)vcnt_s8(v161);
                v162.i16[0] = vaddlv_u8(v162);
                v136 += v162.i32[0];
                --v159;
              }
              while (v159);
            }
            else
            {
              v135 = (uint8x8_t)vcnt_s8((int8x8_t)v176);
              v135.i16[0] = vaddlv_u8(v135);
              v136 = v135.i32[0];
            }
            if (v136 + v134 == v175)
            {
              v171 = v185;
              if (v185 > 0x40)
              {
                v170 = (void *)operator new[]();
                memcpy(v170, v184, (((unint64_t)v171 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v170 = v184;
              }
              v173 = v187;
              if (v187 > 0x40)
              {
                v172 = (void *)operator new[]();
                memcpy(v172, v186, (((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v172 = v186;
              }
              v137 = sub_1C4912EB0((llvm::APInt *)&v170, v48, v41);
              v167 = v175;
              if (v175 > 0x40)
              {
                v166 = (void *)operator new[]();
                memcpy(v166, __src, (((unint64_t)v167 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v166 = __src;
              }
              v169 = v177;
              if (v177 > 0x40)
              {
                v168 = (void *)operator new[]();
                memcpy(v168, v176, (((unint64_t)v169 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v168 = v176;
              }
              v138 = (_QWORD)sub_1C4912EB0((llvm::APInt *)&v166, v49, v41) * (_QWORD)v137;
              if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
                MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
              *(_QWORD *)this = ~v138;
              *((_DWORD *)this + 2) = 64;
              if (*((_DWORD *)this + 6) >= 0x41u && *v16)
                MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
              *((_QWORD *)this + 2) = v138;
              *((_DWORD *)this + 6) = 64;
              if (v169 >= 0x41 && v168)
                MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
              if (v167 >= 0x41 && v166)
                MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
              if (v173 >= 0x41 && v172)
                MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
              if (v171 >= 0x41 && v170)
                MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
            }
          }
          if (v177 >= 0x41 && v176)
            MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
          if (v175 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v187 >= 0x41 && v186)
            MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
          if (v185 < 0x41)
            goto LABEL_231;
          goto LABEL_263;
        }
LABEL_199:
        v50 = 0;
        goto LABEL_200;
      }
    }
    else
    {
      v46 = 0;
    }
    v47 = (unsigned __int16)(v46 >> 3);
    goto LABEL_60;
  }
  if ((v15 - 52) < 2)
  {
    v28 = *(_QWORD *)(v13 + 32);
    v29 = *(_DWORD *)(v28 + 36);
    v185 = 1;
    v184 = 0;
    v187 = 1;
    v186 = 0;
    v30 = (a7 + 1);
    sub_1C54EB764((uint64_t)&v190, *(_DWORD *)(v28 + 68), (llvm::MDNode *)&v184, a5, v30);
    if (v185 > 0x40)
    {
      v32 = 0;
      v121 = ((unint64_t)v185 + 63) >> 6;
      v122 = (int8x8_t *)v184;
      do
      {
        v123 = *v122++;
        v124 = (uint8x8_t)vcnt_s8(v123);
        v124.i16[0] = vaddlv_u8(v124);
        v32 += v124.i32[0];
        --v121;
      }
      while (v121);
    }
    else
    {
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
    }
    v33 = v187;
    if (v187 > 0x40)
    {
      v35 = 0;
      v125 = ((unint64_t)v187 + 63) >> 6;
      v126 = (int8x8_t *)v186;
      do
      {
        v127 = *v126++;
        v128 = (uint8x8_t)vcnt_s8(v127);
        v128.i16[0] = vaddlv_u8(v128);
        v35 += v128.i32[0];
        --v125;
      }
      while (v125);
    }
    else
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)v186);
      v34.i16[0] = vaddlv_u8(v34);
      v35 = v34.i32[0];
    }
    if (v35 + v32 != v185)
      goto LABEL_155;
    if ((v29 & 0x80000000) != 0 && (v29 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
      v36 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v29 & 0x7FFFFFFF));
    else
      v36 = 0;
    v183 = v36;
    sub_1C54EB764((uint64_t)&v190, v29, this, a5, v30);
    v53 = sub_1C4825F50(&v183);
    if ((_DWORD)v52 == 1)
    if (v53 <= 0x3F)
    {
      v54 = *((_DWORD *)this + 2);
      v55 = *(void **)this;
      v175 = 64;
      __src = v55;
      sub_1C4912E54(&__src, v54, 0x40u);
      v56 = v175;
      if (v175 > 0x40)
      {
        v163 = (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8;
        v57 = (void *)operator new[]();
        v164 = __src;
        memcpy(v57, __src, v163);
        v58 = *v16;
        if (v175 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
      }
      else
      {
        v57 = __src;
        v58 = *v16;
      }
      if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
        MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
      *(_QWORD *)this = v57;
      *((_DWORD *)this + 2) = v56;
      if (*((_DWORD *)this + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      *((_QWORD *)this + 2) = v58;
      *((_DWORD *)this + 6) = 64;
      v60 = sub_1C4825F50(&v183);
      if ((_DWORD)v59 == 1)
      sub_1C4912E54(this, v60, *((_DWORD *)this + 2));
    }
    if (v187 >= 0x41)
      v61 = (uint64_t *)v186;
    else
      v61 = (uint64_t *)&v186;
    v62 = *v61;
    if (v15 != 52)
    {
      v175 = *((_DWORD *)this + 2);
      if (v175 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, *(const void **)this, (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = *(void **)this;
      }
      sub_1C4888094((uint64_t)&__src, v62);
      if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
        MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
      *(_QWORD *)this = __src;
      *((_DWORD *)this + 2) = v175;
      v175 = *((_DWORD *)this + 6);
      if (v175 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, *v16, (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = (void *)*v16;
      }
      sub_1C4888094((uint64_t)&__src, v62);
      if (*((_DWORD *)this + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      *((_QWORD *)this + 2) = __src;
      *((_DWORD *)this + 6) = v175;
      v175 = *((_DWORD *)this + 2);
      if (v175 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      sub_1C4912E54(&__src, 0, v62);
      sub_1C4912E54(&__src, *(_DWORD *)(*(_QWORD *)(v13 + 32) + 112) + v62, v175);
      v83 = *((unsigned int *)this + 2);
      if (v83 > 0x40)
      {
        v84 = *(_QWORD **)this;
        v85 = (uint64_t *)__src;
        v86 = (unint64_t)(v83 + 63) >> 6;
        do
        {
          v87 = *v85++;
          *v84++ |= v87;
          --v86;
        }
        while (v86);
      }
      else
      {
        *(_QWORD *)this |= (unint64_t)__src;
      }
      v74 = v175;
      v180 = v175;
      if (v175 > 0x40)
      {
        v89 = (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8;
        v179 = (void *)operator new[]();
        memcpy(v179, __src, v89);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v179);
        v74 = v180;
        v76 = (unint64_t)v179;
      }
      else
      {
        v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v175;
        if (!v175)
          v88 = 0;
        v76 = v88 & ~(unint64_t)__src;
      }
      v90 = *((unsigned int *)this + 6);
      if (v90 > 0x40)
      {
        v91 = *v16;
        v92 = (unint64_t)(v90 + 63) >> 6;
        v93 = (uint64_t *)v76;
        do
        {
          v94 = *v93++;
          *v91++ &= v94;
          --v92;
        }
        while (v92);
        goto LABEL_136;
      }
      goto LABEL_133;
    }
    v63 = *((unsigned int *)this + 2);
    if (v63 > 0x40)
    {
      v64 = operator new[]();
      v119 = *(_QWORD *)this;
      memcpy((void *)v64, *(const void **)this, ((unint64_t)(v63 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v64, (unint64_t *)((unint64_t)(v63 + 63) >> 6), v62);
      if (*((_DWORD *)this + 2) >= 0x41u && v119)
        MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
    }
    else if ((_DWORD)v63 == (_DWORD)v62)
    {
      v64 = 0;
    }
    else
    {
      v64 = *(_QWORD *)this >> v62;
    }
    *(_QWORD *)this = v64;
    *((_DWORD *)this + 2) = v63;
    v65 = *((unsigned int *)this + 6);
    if (v65 > 0x40)
    {
      v66 = operator new[]();
      v120 = (const void *)*((_QWORD *)this + 2);
      memcpy((void *)v66, v120, ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v66, (unint64_t *)((unint64_t)(v65 + 63) >> 6), v62);
      if (*((_DWORD *)this + 6) >= 0x41u && v120)
        MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
    }
    else
    {
      if ((_DWORD)v65 == (_DWORD)v62)
      {
        v66 = 0;
LABEL_90:
        *((_QWORD *)this + 2) = v66;
        *((_DWORD *)this + 6) = v65;
        v175 = v63;
        if (v63 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v67 = *((_DWORD *)this + 2);
          LODWORD(v63) = v175;
        }
        else
        {
          __src = 0;
          v67 = v63;
        }
        sub_1C4912E54(&__src, v67 - v62, v63);
        sub_1C4912E54(&__src, *(_DWORD *)(*(_QWORD *)(v13 + 32) + 112), v175);
        v68 = *((unsigned int *)this + 2);
        if (v68 > 0x40)
        {
          v70 = *(_QWORD **)this;
          v71 = (uint64_t *)__src;
          v72 = (unint64_t)(v68 + 63) >> 6;
          do
          {
            v73 = *v71++;
            *v70++ |= v73;
            --v72;
          }
          while (v72);
        }
        else
        {
          *(_QWORD *)this |= (unint64_t)__src;
        }
        v74 = v175;
        v182 = v175;
        if (v175 > 0x40)
        {
          v77 = (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8;
          v181 = (void *)operator new[]();
          memcpy(v181, __src, v77);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v181);
          v74 = v182;
          v76 = (unint64_t)v181;
        }
        else
        {
          v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v175;
          if (!v175)
            v75 = 0;
          v76 = v75 & ~(unint64_t)__src;
        }
        v78 = *((unsigned int *)this + 6);
        if (v78 > 0x40)
        {
          v79 = *v16;
          v80 = (unint64_t)(v78 + 63) >> 6;
          v81 = (uint64_t *)v76;
          do
          {
            v82 = *v81++;
            *v79++ &= v82;
            --v80;
          }
          while (v80);
          goto LABEL_136;
        }
LABEL_133:
        *v16 = (const void *)((unint64_t)*v16 & v76);
LABEL_136:
        if (v74 >= 0x41 && v76)
          MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        if (v175 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v95 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
        if (v95 < 0 && (v96 = v95 & 0x7FFFFFFF, v96 < *(_DWORD *)(a6 + 432)))
          v97 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v96);
        else
          v97 = 0;
        v178 = v97;
        v99 = sub_1C4825F50(&v178);
        if ((_DWORD)v98 == 1)
        if (v99 <= 0x3F)
        {
          v101 = sub_1C4825F50(&v178);
          if ((_DWORD)v100 == 1)
          llvm::APInt::trunc(this, v101, (llvm::APInt *)&__src);
          llvm::APInt::trunc((llvm::APInt *)((char *)this + 16), v101, (llvm::APInt *)&v188);
          v102 = v175;
          v103 = __src;
          v104 = v189;
          v105 = v188;
          if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
            MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
          *(_QWORD *)this = v103;
          *((_DWORD *)this + 2) = v102;
          if (*((_DWORD *)this + 6) >= 0x41u && *v16)
            MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
          *((_QWORD *)this + 2) = v105;
          *((_DWORD *)this + 6) = v104;
        }
        v33 = v187;
LABEL_155:
        if (v33 >= 0x41 && v186)
          MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
        if (v185 < 0x41)
          goto LABEL_231;
LABEL_263:
        v117 = v184;
        if (!v184)
          goto LABEL_231;
        goto LABEL_171;
      }
      v66 = (unint64_t)*v16 >> v62;
    }
    LODWORD(v63) = *((_DWORD *)this + 2);
    goto LABEL_90;
  }
  if (v15 == 51)
  {
    v42 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 164);
    v175 = 1;
    __src = (void *)1;
    sub_1C54EB764((uint64_t)&v190, v42, this, (llvm::APInt *)&__src, (a7 + 1));
    v43 = *((_DWORD *)this + 6);
    if (v43 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)this + 16)) != v43)
        goto LABEL_159;
    }
    else if (*v16)
    {
      goto LABEL_159;
    }
    v69 = *((_DWORD *)this + 2);
    if (v69 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) == v69)
        goto LABEL_169;
    }
    else if (!*(_QWORD *)this)
    {
      goto LABEL_169;
    }
LABEL_159:
    v106 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 132);
    v185 = 1;
    v184 = 0;
    v187 = 1;
    v186 = 0;
    sub_1C54EB764((uint64_t)&v190, v106, (llvm::MDNode *)&v184, (llvm::APInt *)&__src, (a7 + 1));
    v107 = *((unsigned int *)this + 6);
    if (v107 > 0x40)
    {
      v108 = *v16;
      v109 = (uint64_t *)v186;
      v110 = (unint64_t)(v107 + 63) >> 6;
      do
      {
        v111 = *v109++;
        *v108++ &= v111;
        --v110;
      }
      while (v110);
    }
    else
    {
      *v16 = (const void *)((unint64_t)*v16 & (unint64_t)v186);
    }
    v112 = *((unsigned int *)this + 2);
    if (v112 > 0x40)
    {
      v113 = *(_QWORD **)this;
      v114 = (uint64_t *)v184;
      v115 = (unint64_t)(v112 + 63) >> 6;
      do
      {
        v116 = *v114++;
        *v113++ &= v116;
        --v115;
      }
      while (v115);
    }
    else
    {
      *(_QWORD *)this &= (unint64_t)v184;
    }
    if (v187 >= 0x41 && v186)
      MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
    if (v185 >= 0x41 && v184)
      MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
LABEL_169:
    if (v175 < 0x41)
      goto LABEL_231;
    v117 = __src;
    if (!__src)
      goto LABEL_231;
LABEL_171:
    MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
    goto LABEL_231;
  }
  if (v15 == 116)
  {
    v22 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = *(unsigned __int8 **)(v13 + 32);
      while (1)
      {
        v25 = *v24;
        v24 += 32;
        if (v25 == 17)
          break;
        if (v22 == ++v23)
          goto LABEL_25;
      }
    }
    else
    {
LABEL_25:
      LODWORD(v23) = -1;
    }
    v26 = sub_1C49112E4(*(_DWORD *)(*(_QWORD *)(v13 + 32) + 32 * v23 + 16));
    if ((v26 & 0xFF00000000) != 0)
    {
      v27 = dword_1C6608FA0[(int)v26];
LABEL_35:
      v118 = sub_1C4903D64(v27);
      if (v118 > 0x1F)
        goto LABEL_231;
      v37 = v118 - v14;
      goto LABEL_177;
    }
  }
LABEL_231:
  v190 = (void (**)())off_1E816DB00;
  v139 = v197;
  if ((v197 & 1) != 0)
  {
    v140 = 16;
    v141 = &v198;
  }
  else
  {
    v140 = v199;
    if (!v199)
      goto LABEL_243;
    v141 = v198;
  }
  v142 = 40 * v140;
  v143 = v141 + 2;
  do
  {
    if (*((_DWORD *)v143 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v143 + 4) >= 0x41u)
      {
        v145 = v143[1];
        if (v145)
          MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
      }
      if (*(_DWORD *)v143 >= 0x41u)
      {
        v144 = *(v143 - 1);
        if (v144)
          MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
      }
    }
    v143 += 5;
    v142 -= 40;
  }
  while (v142);
  v139 = v197;
LABEL_243:
  if ((v139 & 1) == 0)
    MEMORY[0x1CAA32FB4](v198, 8);
  v190 = off_1E7FA1810;
  if (v192 != *(_QWORD **)v191)
    free(v192);
}

_QWORD *sub_1C4912E54(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 != a3)
  {
    if (a2 > 0x3F || a3 > 0x40)
    {
      return llvm::APInt::setBitsSlowCase(this, a2, a3);
    }
    else
    {
      v3 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - a3) << a2;
      if (*((_DWORD *)this + 2) > 0x40u)
        *(_QWORD *)*this |= v3;
      else
        *this |= v3;
    }
  }
  return this;
}

_QWORD *sub_1C4912EB0(llvm::APInt *this, int a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  void *__src;
  unsigned int v42;

  if (a2 == 2)
  {
    v12 = (unsigned __int16)(a3 >> 3);
    v13 = (unsigned __int16)(a3 >> 19);
    if ((a3 & 2) == 0)
      v13 = a3 >> 19;
    if ((a3 & 4) != 0)
      v12 = v13;
    if ((a3 & 1) != 0)
      v14 = a3 >> 3;
    else
      v14 = v12;
    llvm::APInt::sext(this, v14, (llvm::APInt *)&__src);
    llvm::APInt::sext((llvm::APInt *)((char *)this + 16), v14, (llvm::APInt *)&v39);
    v15 = v42;
    v16 = __src;
    v17 = v39;
    if (v40 >= 0x41)
    {
      v18 = (_QWORD *)*v39;
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      v17 = v18;
    }
    if (v15 >= 0x41 && v16)
    {
      v19 = (unint64_t)v16;
LABEL_52:
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
  }
  else if (a2 == 1)
  {
    v5 = a3 >> 3;
    v6 = 0xFFFFLL;
    if ((a3 & 2) == 0)
      v6 = 0xFFFFFFFFLL;
    v7 = v6 & (a3 >> 19);
    if ((a3 & 2) != 0)
      v8 = (unsigned __int16)(a3 >> 19);
    else
      v8 = a3 >> 19;
    if ((a3 & 4) == 0)
    {
      LODWORD(v7) = (unsigned __int16)(a3 >> 3);
      v8 = v7;
    }
    if ((a3 & 1) != 0)
      v9 = a3 >> 3;
    else
      LODWORD(v9) = v7;
    if ((a3 & 1) != 0)
      v10 = a3 >> 3;
    else
      v10 = v8;
    v11 = *((_DWORD *)this + 2) - v10;
    v38 = v9;
    if (v9 > 0x40)
    {
      v36 = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)&v37, 0, 0);
      v11 = v36;
      LODWORD(v9) = v38;
    }
    else
    {
      v37 = 0;
    }
    sub_1C4912E54(&v37, v11 + v9, v9);
    if ((a3 & 1) == 0)
    {
      if ((a3 & 4) != 0)
      {
        if ((a3 & 2) != 0)
          v5 = (unsigned __int16)(a3 >> 19);
        else
          v5 = a3 >> 19;
      }
      else
      {
        v5 = (unsigned __int16)(a3 >> 3);
      }
    }
    v21 = *((_DWORD *)this + 2);
    llvm::APInt::zext(this, v5, (uint64_t)&__src);
    sub_1C4912E54(&__src, v21, v42);
    v22 = v42;
    if (v42 > 0x40)
    {
      v32 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
      v23 = (void *)operator new[]();
      memcpy(v23, __src, v32);
    }
    else
    {
      v23 = __src;
    }
    v24 = (_QWORD *)((char *)this + 16);
    llvm::APInt::zext((llvm::APInt *)((char *)this + 16), v5, (uint64_t)&v39);
    v25 = v40;
    v26 = v39;
    v40 = 0;
    if (v42 >= 0x41 && __src)
    {
      v33 = v39;
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v26 = v33;
    }
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    {
      v34 = v26;
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
      v26 = v34;
    }
    *(_QWORD *)this = v23;
    *((_DWORD *)this + 2) = v22;
    if (*((_DWORD *)this + 6) >= 0x41u && *v24)
    {
      v35 = v26;
      MEMORY[0x1CAA32F9C](*v24, 0x1000C8000313F17);
      v26 = v35;
      v22 = *((_DWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v26;
    *((_DWORD *)this + 6) = v25;
    if (v22 > 0x40)
    {
      v27 = *(_QWORD **)this;
      v28 = (uint64_t *)v37;
      v29 = ((unint64_t)v22 + 63) >> 6;
      do
      {
        v30 = *v28++;
        *v27++ |= v30;
        --v29;
      }
      while (v29);
    }
    else
    {
      *(_QWORD *)this |= v37;
    }
    if (v25 >= 0x41)
      v24 = (_QWORD *)*v24;
    v17 = (_QWORD *)*v24;
    if (v38 >= 0x41)
    {
      v19 = v37;
      if (v37)
        goto LABEL_52;
    }
  }
  else
  {
    v20 = (char *)this + 16;
    if (*((_DWORD *)this + 6) >= 0x41u)
      v20 = *(char **)v20;
    return *(_QWORD **)v20;
  }
  return v17;
}

BOOL sub_1C4913214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int ExtendedSizeInBits;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  if ((_BYTE)a2)
  {
    if (a2 - 15 < 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  v5 = a4;
  if ((_BYTE)a4)
  {
    if (a4 - 15 < 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  if ((_BYTE)a2)
  {
    if (a2 - 2 >= 6)
      return 0;
  }
  else
  {
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
      v13 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
    else
      v13 = *(_DWORD *)(a3 + 8);
    if (v13 != 13)
      return 0;
  }
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v14 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v14 = *(_DWORD *)(a5 + 8);
    if (v14 == 13)
      goto LABEL_9;
    return 0;
  }
  if (a4 - 2 >= 6)
    return 0;
LABEL_9:
  if ((_BYTE)a2)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v17);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  v8 = ExtendedSizeInBits;
  if ((_DWORD)v7 == 1)
  if (v5)
    v9 = sub_1C47A8C74((unsigned __int8 *)v16);
  else
    v9 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  if ((_DWORD)v10 == 1)
  {
    v15 = v9;
    v9 = v15;
  }
  return v9 > 0xF && v8 > v9;
}

BOOL sub_1C4913384(int a1, llvm::Type *this, llvm::Type *a3)
{
  const char *v4;
  unsigned int PrimitiveSizeInBits;
  const char *v6;
  unsigned int v7;

  if (*((_BYTE *)this + 8) != 13 || *((_BYTE *)a3 + 8) != 13)
    return 0;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if ((_DWORD)v4 == 1)
  v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  if ((_DWORD)v6 == 1)
  return v7 > 0xF && PrimitiveSizeInBits > v7;
}

BOOL sub_1C4913414(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  BOOL v7;

  v3 = *a3;
  if (!*a3)
    goto LABEL_7;
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v3 + 16) + 8);
  v5 = v4 >> 8;
  result = 1;
  if (v5 != 3 && v5 != 64)
  {
LABEL_7:
    if (v3)
      v7 = *((_BYTE *)a3 + 16) == 0;
    else
      v7 = 1;
    return v7 || a3[3] == 0;
  }
  return result;
}

uint64_t sub_1C4913474(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v9 = &v10;
  v10 = 0;
  if (sub_1C4E7B6EC(&v9, a2) && v10)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 62)
  {
    v7 = **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v8 = *(_DWORD *)(v7 + 8);
    if ((v8 & 0xFE) == 0x12)
      v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
    if ((v8 & 0xFFFFFF00) == 0x4000)
      return 0;
    return sub_1C4913564(a2) ^ 1;
  }
  if (v4 != 84)
    return sub_1C4913564(a2) ^ 1;
  v5 = *(_QWORD *)(a2 - 32);
  if (!v5)
    return sub_1C4913564(a2) ^ 1;
  if (*(_BYTE *)(v5 + 16))
    return sub_1C4913564(a2) ^ 1;
  if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(a2 + 72))
    return sub_1C4913564(a2) ^ 1;
  if ((*(_BYTE *)(v5 + 33) & 0x20) == 0)
    return sub_1C4913564(a2) ^ 1;
  result = 0;
  v6 = *(_DWORD *)(v5 + 36);
  if (v6 != 139 && v6 != 2484 && v6 != 2677)
    return sub_1C4913564(a2) ^ 1;
  return result;
}

uint64_t sub_1C4913564(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;

  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 16);
    do
    {
      v2 = v1 - 54;
      if (v2 > 0x23)
        break;
      if (((1 << v2) & 0x800987000) == 0)
      {
        if (v2)
        {
          if (v2 == 6)
          {
            v11 = **(_QWORD **)(a1 - 32);
            v12 = *(_DWORD *)(v11 + 8);
            if ((v12 & 0xFE) == 0x12)
              v12 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
            if ((v12 & 0xFFFFFF00) == 0x4000)
              return 1;
          }
          return 0;
        }
        v6 = *(_DWORD *)(a1 + 20);
        if ((v6 & 0x40000000) != 0)
          v7 = *(_QWORD *)(a1 - 8);
        else
          v7 = a1 - 32 * (v6 & 0x7FFFFFF);
        v8 = *(_QWORD *)(v7 + 32);
        if (v8)
          v9 = *(_BYTE *)(v8 + 16) == 16;
        else
          v9 = 0;
        if (!v9)
          return 0;
        v10 = (_QWORD *)(v8 + 24);
        if (*(_DWORD *)(v8 + 32) >= 0x41u)
          v10 = (_QWORD *)*v10;
        if (*v10 != 16)
          return 0;
      }
      v3 = *(_DWORD *)(a1 + 20);
      if ((v3 & 0x40000000) != 0)
        v4 = *(uint64_t **)(a1 - 8);
      else
        v4 = (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF));
      a1 = *v4;
      v1 = *(unsigned __int8 *)(*v4 + 16);
      if (a1)
        v5 = v1 >= 0x1C;
      else
        v5 = 0;
    }
    while (v5);
  }
  return 0;
}

BOOL sub_1C4913660(int a1, llvm::Type ***this, uint64_t a3)
{
  llvm::Type *v4;
  int PrimitiveSizeInBits;
  int v7;

  v4 = (llvm::Type *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v4 = *this[2];
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  if (PrimitiveSizeInBits != 32 && PrimitiveSizeInBits != 16)
    return 0;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  v7 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
  return v7 == 32 || v7 == 64;
}

BOOL sub_1C49136EC(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  return (a2 & 0xFE) == 4 && a4 - 5 < 2;
}

uint64_t sub_1C4913708(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NamedMetadata;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;

  v3 = **(unsigned __int16 **)(a2 + 16);
  v4 = (v3 - 81) > 0x2D || ((1 << (v3 - 81)) & 0x218000000001) == 0;
  if (v4 && v3 != 269)
    return 0;
  result = 1;
  if (v3 != 81 && v3 != 269)
  {
    v6 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 32);
    v7 = v6[5];
    if (v3 == 126)
    {
      v8 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
      v9 = (uint64_t *)((v8 & 0x80000000) != 0
                     ? *(_QWORD *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v7 + 272) + 8 * v8);
      v10 = *v9;
      if (v10)
      {
        while ((*(_BYTE *)(v10 + 3) & 1) != 0)
        {
          v10 = *(_QWORD *)(v10 + 24);
          if (!v10)
            goto LABEL_16;
        }
        v17 = *(_QWORD *)(v10 + 8);
        if (**(_WORD **)(v17 + 16) == 81)
          return 1;
        result = 1;
        while (1)
        {
          v10 = *(_QWORD *)(v10 + 24);
          if (!v10)
            break;
          if ((*(_BYTE *)(v10 + 3) & 1) == 0)
          {
            v18 = *(_QWORD *)(v10 + 8);
            if (v18 != v17)
            {
              v17 = *(_QWORD *)(v10 + 8);
              if (**(_WORD **)(v18 + 16) == 81)
                return result;
            }
          }
        }
      }
    }
LABEL_16:
    v11 = *(_QWORD *)(*v6 + 40);
    v23 = "agx.reduce.reg.pressure";
    v24 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v11, (uint64_t)&v23);
    if (!NamedMetadata)
      goto LABEL_43;
    v13 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                    + 128);
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    if (!*v14)
    {
LABEL_43:
      if ((v3 & 0xFFFE) != 0x78)
        return 0;
      v15 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
      v16 = (uint64_t *)((v15 & 0x80000000) != 0
                      ? *(_QWORD *)(v7 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v7 + 272) + 8 * v15);
      v19 = *v16;
      if (v19)
      {
        while ((*(_BYTE *)(v19 + 3) & 1) != 0)
        {
          v19 = *(_QWORD *)(v19 + 24);
          if (!v19)
            return 1;
        }
        v20 = 0;
        v21 = *(_QWORD *)(v19 + 8);
LABEL_36:
        v22 = **(unsigned __int16 **)(v21 + 16);
        if (v22 != 69 && v22 != 81)
        {
          v20 |= *(_QWORD *)(v21 + 24) == *(_QWORD *)(a2 + 24);
          while (1)
          {
            v19 = *(_QWORD *)(v19 + 24);
            if (!v19)
              break;
            if ((*(_BYTE *)(v19 + 3) & 1) == 0 && *(_QWORD *)(v19 + 8) != v21)
            {
              v21 = *(_QWORD *)(v19 + 8);
              goto LABEL_36;
            }
          }
          if ((v20 & 1) != 0)
            return 0;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1C4913938()
{
  return 5;
}

uint64_t sub_1C4913940()
{
  return 1;
}

uint64_t sub_1C4913948()
{
  return 1;
}

_QWORD *sub_1C4913950(int a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t *v14;
  int v15;
  int v16;
  unsigned int ExtendedSizeInBits;
  const char *v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  unsigned int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  __int128 v31;

  if (a1)
    v9 = 5017;
  else
    v9 = 5008;
  if (a1)
    v10 = 5357;
  else
    v10 = 5348;
  if (a2 == 2488)
    v11 = v9;
  else
    v11 = v10;
  v12 = *(_QWORD *)(a5 + 832);
  if (v12)
    v13 = *(_WORD *)(v12 + 8);
  else
    v13 = 0;
  v14 = sub_1C5D52060(a5, 199, a6, (llvm *)4, 0, a3, a4, v13);
  sub_1C48DC710((uint64_t)&v27, a5, (uint64_t)v14, v15, 0, 1, 1);
  if ((v29 | 2) == 2)
  {
    sub_1C4913C18(v27, *((uint64_t *)&v27 + 1), (uint64_t)&v27, (uint64_t)&v28, (unsigned int *)&v27, a5);
    v29 = 1;
    v16 = *(unsigned __int16 *)(v27 + 24);
    if ((_QWORD)v27 && v16 == 45)
    {
      if (*(_DWORD *)(v27 + 80) == 64)
        v29 = 3;
      v30 = dword_1C6609098[*(int *)(v27 + 76) - 1];
    }
    else
    {
      if (v16 == 35)
        v29 = 6;
      v31 = *(_OWORD *)(*(_QWORD *)(v27 + 40) + 16 * DWORD2(v27));
      if ((_BYTE)v31)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v31);
      else
        ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v31);
      if ((_DWORD)v18 == 1)
      {
        v23 = ExtendedSizeInBits;
        ExtendedSizeInBits = v23;
      }
      v30 = ExtendedSizeInBits;
    }
  }
  v19 = *(unsigned __int8 **)a6;
  v25 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v25, v19, 2);
  v26 = *((_DWORD *)a6 + 2);
  LODWORD(v31) = 0;
  v24 = 1;
  if (a1)
    v20 = 4;
  else
    v20 = 5;
  v21 = sub_1C6142934(a5, v11, (uint64_t)&v25, v20, 0, (unsigned int *)&v31, &v27, &v24);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  return v21;
}

uint64_t sub_1C4913B54(int a1, int a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  int v9;

  if (*(unsigned __int8 *)(a3 + 44) | *(unsigned __int8 *)(a4 + 44))
  {
    v6 = 0;
    v7 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    v7 = *(_DWORD *)(a3 + 32);
    v6 = (v7 & 0xFFFFFFFD) != 5 && (*(_DWORD *)(a4 + 32) & 0xFFFFFFFD) != 5;
  }
  v8 = a2 == 2488;
  v9 = sub_1C4913CB0(*(_QWORD *)a3, v7);
  return dword_1C6608964[36 * a1
                       + 18 * v8
                       + 9 * v6
                       + 3 * v9
                       + sub_1C4913CB0(*(_QWORD *)a4, *(_DWORD *)(a4 + 32))];
}

uint64_t sub_1C4913C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v6 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a5 + 40) + 16 * a5[2]);
  v7 = *v6;
  if (*v6)
  {
    v10 = (v7 - 120) >= 0x20 && (v7 - 2) >= 6;
    if (!v10 || (v7 - 15) < 0x3C)
      return sub_1C613F998(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
    return sub_1C613F064(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
  }
  v8 = *((_QWORD *)v6 + 1);
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  else
    v9 = *(_DWORD *)(v8 + 8);
  if (v9 != 13)
    return sub_1C613F064(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
  return sub_1C613F998(a1, a2, a3, a4, (int)a5[8] > 3, 1, a6);
}

uint64_t sub_1C4913CB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int ExtendedSizeInBits;
  const char *v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  result = 0;
  if (a2 <= 3 && (a2 & 0xFFFFFFFD) != 5)
  {
    v10 = v2;
    v11 = v3;
    v9 = *(_OWORD *)*(_QWORD *)(a1 + 40);
    if ((_BYTE)v9)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v9);
    else
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
    if ((_DWORD)v7 == 1)
    {
      v8 = ExtendedSizeInBits;
      ExtendedSizeInBits = v8;
    }
    if (ExtendedSizeInBits == 16)
      return 2;
    else
      return 1;
  }
  return result;
}

uint64_t sub_1C4913D3C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, __int128 *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 *v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v11 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v35, (llvm *)6, 0, 1, 0);
  v13 = v12;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 16);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
  *v15 = v11;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v16 = *a4;
  v35 = 0;
  v36 = 0;
  result = (uint64_t)sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v35, (llvm *)6, 0, 1, 0);
  v18 = result;
  v20 = v19;
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  v22 = (uint64_t *)(*(_QWORD *)a2 + 16 * v21);
  *v22 = v18;
  v22[1] = v20;
  v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v35)
  {
    result = llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
    v23 = *(_DWORD *)(a2 + 8);
  }
  v24 = *a5;
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    v33 = *a5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 16);
    v24 = v33;
    v23 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v23) = v24;
  v25 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v25;
  v27 = *((_QWORD *)a5 + 2);
  v26 = *((_QWORD *)a5 + 3);
  if (v27 | v26)
  {
    if (v25 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
      LODWORD(v25) = *(_DWORD *)(a2 + 8);
    }
    v25 = *(_QWORD *)a2 + 16 * v25;
    *(_QWORD *)v25 = v27;
    *(_QWORD *)(v25 + 8) = v26;
    LODWORD(v25) = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v25;
  }
  v28 = *a6;
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    v34 = *a6;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v28 = v34;
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v28;
  v29 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v29;
  v31 = *((_QWORD *)a6 + 2);
  v30 = *((_QWORD *)a6 + 3);
  if (v31 | v30)
  {
    if (v29 >= *(_DWORD *)(a2 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 16);
      LODWORD(v29) = *(_DWORD *)(a2 + 8);
    }
    v32 = (_QWORD *)(*(_QWORD *)a2 + 16 * v29);
    *v32 = v31;
    v32[1] = v30;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

void *sub_1C4913FB8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v9 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v11 = v10;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  *v13 = v9;
  v13[1] = v11;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v14 = *a4;
  v27 = 0;
  v28 = 0;
  v15 = sub_1C6366AB4(a1, v14, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v20 = *a5;
  v27 = 0;
  v28 = 0;
  result = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v27, (llvm *)6, 0, 1, 0);
  v22 = result;
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  ++*(_DWORD *)(a2 + 8);
  if (v27)
    return (void *)llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  return result;
}

uint64_t *sub_1C4914168(uint64_t *result, unsigned int *a2, unsigned int a3)
{
  if ((*result & 1) == 0)
    return (uint64_t *)sub_1C4914230(*result, a2, a3);
  *result = *result & 0xFC00000000000000 | (2
                                            * ((*(_QWORD *)a2 | ((unint64_t)*result >> 1) & ~(-1 << ((unint64_t)*result >> 58))) & ~(-1 << ((unint64_t)*result >> 58)))) | 1;
  return result;
}

void sub_1C49141AC(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C49142CC(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C49142CC(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_1C4914230(uint64_t result, unsigned int *a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(result + 64);
  v4 = (v3 + 31) >> 5;
  if (v4 >= a3)
    v4 = a3;
  if (v4 < 2)
  {
    v6 = 0;
    if (!v4)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD **)result;
    v6 = ((v4 - 2) >> 1) + 1;
    v7 = v6;
    do
    {
      v8 = *a2;
      v9 = a2[1];
      a2 += 2;
      *v5++ |= v8 | (v9 << 32);
      --v7;
    }
    while (v7);
    if ((v4 & 1) == 0)
      goto LABEL_10;
  }
  *(_QWORD *)(*(_QWORD *)result + 8 * v6) |= *a2;
LABEL_10:
  v10 = v3 & 0x3F;
  if (v10)
  {
    v11 = *(_QWORD *)result + 8 * *(unsigned int *)(result + 8);
    *(_QWORD *)(v11 - 8) &= ~(-1 << v10);
  }
  return result;
}

void sub_1C49142CC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v14 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v14);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v6;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
      {
        v13 = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        v6 = v13;
      }
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v12 = v14;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

void sub_1C4914390(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E7FA2C18;
  sub_1C4914448((void ***)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C49143D4()
{
  return 0;
}

uint64_t sub_1C49143DC()
{
  return 1;
}

uint64_t sub_1C49143E4()
{
  return 1;
}

uint64_t sub_1C49143EC()
{
  return 0;
}

uint64_t sub_1C49143F4(unint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v4;

  v2 = *a1;
  if ((v2 & 1) == 0)
    return sub_1C476BA0C((_QWORD *)v2, a2 + 1, *(_DWORD *)(v2 + 64), 1u);
  v4 = (-1 << (a2 + 1)) & (v2 >> 1) & ~(-1 << (v2 >> 58));
  if (v2 >> 58 <= (a2 + 1) || v4 == 0)
    return 0xFFFFFFFFLL;
  else
    return __clz(__rbit64(v4));
}

void ***sub_1C4914448(void ***a1)
{
  void **v2;

  v2 = *a1;
  if ((*a1 & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x1CAA32FC0](v2, 0x1080C40EF38A13ELL);
  }
  return a1;
}

unint64_t *sub_1C49144A0(unint64_t *result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 != a3)
  {
    v3 = *result;
    if ((*result & 1) != 0)
    {
      *result = v3 & 0xFC00000000000000 | (2
                                           * (((v3 >> 1) & ~(-1 << (v3 >> 58)) | ((1 << a3) + (-1 << a2))) & ~(-1 << (v3 >> 58)))) | 1;
      return result;
    }
    v4 = a2 >> 6;
    if (a2 >> 6 == a3 >> 6)
    {
      v5 = (1 << a3) + (-1 << a2);
      v6 = *(_QWORD *)v3;
LABEL_6:
      *(_QWORD *)(v6 + 8 * v4) |= v5;
      return result;
    }
    v6 = *(_QWORD *)v3;
    *(_QWORD *)(v6 + 8 * v4) |= -1 << a2;
    v7 = (a2 + 63) & 0xFFFFFFC0;
    if (v7 + 64 <= a3)
    {
      do
      {
        *(_QWORD *)(v6 + 8 * (v7 >> 6)) = -1;
        v8 = v7 + 64;
        v9 = v7 + 128;
        v7 += 64;
      }
      while (v9 <= a3);
    }
    else
    {
      v8 = (a2 + 63) & 0xFFFFFFC0;
    }
    if (v8 < a3)
    {
      v5 = ~(-1 << a3);
      v4 = v8 >> 6;
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_1C4914594(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a2 != a3)
  {
    v4 = 0;
    v5 = a2 >> 6;
    v6 = -1;
    if ((a2 & 0x3F) != 0)
      v6 = ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
    for (i = (a3 - 1) >> 6; i + 1 > v5; --i)
    {
      v8 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
        v9 = -1;
      else
        v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a3;
      if (v5 == i)
        v10 = v6;
      else
        v10 = -1;
      v4 += 64;
      v11 = v10 & v9 & v8;
      if (v11)
        return ((a3 - 1) >> 6 << 6) - __clz(v11) - v4 + 127;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t *sub_1C4914624(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  llvm *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int *p_src;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  void *__src;
  unsigned int v64;

  if (a5 > 5)
    return 0;
  v8 = *(_QWORD *)(a1 + 40) + 16 * a2;
  v9 = *(llvm **)v8;
  v10 = *(uint64_t **)(v8 + 8);
  v11 = *(unsigned __int16 *)(a1 + 24);
  if (v11 != 175)
  {
    if (v11 != 56)
      return 0;
    v13 = *(uint64_t **)(a1 + 32);
    v14 = *v13;
    v15 = v13[1];
    v17 = v13[5];
    v16 = v13[6];
    v64 = 1;
    __src = 0;
    if ((sub_1C4914A4C(v17, v16, (const void **)&__src) & 1) != 0)
    {
      v18 = v14;
      v14 = v17;
    }
    else
    {
      if (!sub_1C4914A4C(v14, v15, (const void **)&__src))
        goto LABEL_25;
      v15 = v15 & 0xFFFFFFFF00000000 | v16;
      v18 = v17;
    }
    if (v64 > 0x40)
    {
      v31 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__src);
    }
    else
    {
      v30 = __clz(__rbit64((unint64_t)__src));
      if (v64 >= v30)
        v31 = v30;
      else
        v31 = v64;
    }
    if (v31 >= a3)
    {
      v32 = sub_1C4914624(v18, v15, a3, a4, a5 + 1);
      if (v32)
      {
        v47 = v32;
        v48 = v33;
        v62 = v64;
        if (v64 > 0x40)
        {
          v58 = v64 + 63;
          v61 = operator new[]();
          memcpy((void *)v61, __src, (v58 >> 3) & 0x3FFFFFF8);
          llvm::APInt::tcShiftRight((llvm::APInt *)v61, (unint64_t *)(v58 >> 6), a3);
        }
        else if (v64 == (_DWORD)a3)
        {
          v61 = 0;
        }
        else
        {
          v61 = (unint64_t)__src >> a3;
        }
        v49 = *(_QWORD *)(a4 + 16);
        v50 = *(unsigned __int8 **)(v14 + 64);
        v59 = v50;
        if (v50)
          llvm::MetadataTracking::track((uint64_t)&v59, v50, 2);
        v60 = *(_DWORD *)(v14 + 60);
        v52 = sub_1C63666FC(v49, (llvm::LLVMContext *)&v61, (const llvm::APInt *)&v59, (uint64_t)v9, (uint64_t)v10, 0, 0);
        v54 = v53;
        if (v59)
          llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
        v55 = *(_QWORD *)(a4 + 16);
        v56 = *(unsigned __int8 **)(a1 + 64);
        v59 = v56;
        if (v56)
          llvm::MetadataTracking::track((uint64_t)&v59, v56, 2);
        v60 = *(_DWORD *)(a1 + 60);
        v57 = *(_QWORD *)(v55 + 832);
        if (v57)
          LOWORD(v57) = *(_WORD *)(v57 + 8);
        v10 = sub_1C5D56C70(v55, 56, (const llvm::APInt *)&v59, v9, (uint64_t)v10, v47, v48, v51, v52, v54, v57);
        if (v59)
          llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
        if (v62 >= 0x41 && v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        v34 = 0;
LABEL_26:
        if (v64 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if ((v34 & 1) == 0)
          return v10;
        return 0;
      }
    }
LABEL_25:
    v34 = 1;
    goto LABEL_26;
  }
  v19 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(v19 + 40);
  v20 = *(_QWORD *)(v19 + 48);
  v22 = 1;
  v64 = 1;
  __src = 0;
  v23 = sub_1C4914A4C(v21, v20, (const void **)&__src);
  v24 = v64;
  if (v23)
  {
    p_src = (unsigned int *)__src;
    if (v64 < 0x41)
      p_src = (unsigned int *)&__src;
    v26 = *p_src;
    v27 = v26 >= a3;
    v28 = v26 - a3;
    if (v27)
    {
      v35 = *(_QWORD *)(a4 + 16);
      v36 = *(unsigned __int8 **)(v21 + 64);
      v61 = (unint64_t)v36;
      if (v36)
        llvm::MetadataTracking::track((uint64_t)&v61, v36, 2);
      v62 = *(_DWORD *)(v21 + 60);
      v38 = sub_1C6366AB4(v35, v28, (const llvm::APInt *)&v61, v9, (uint64_t)v10, 0, 0);
      v40 = v39;
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
      v41 = *(_QWORD *)(a4 + 16);
      v42 = *(unsigned __int8 **)(a1 + 64);
      v61 = (unint64_t)v42;
      if (v42)
        llvm::MetadataTracking::track((uint64_t)&v61, v42, 2);
      v62 = *(_DWORD *)(a1 + 60);
      v43 = *(uint64_t **)(a1 + 32);
      v44 = *v43;
      v45 = v43[1];
      v46 = *(_QWORD *)(v41 + 832);
      if (v46)
        LOWORD(v46) = *(_WORD *)(v46 + 8);
      v10 = sub_1C5D56C70(v41, 175, (const llvm::APInt *)&v61, v9, (uint64_t)v10, v44, v45, v37, (uint64_t)v38, v40, v46);
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
      v22 = 0;
      v24 = v64;
    }
  }
  if (v24 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v22)
    return 0;
  return v10;
}

uint64_t sub_1C4914A4C(uint64_t a1, uint64_t a2, const void **a3)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  int v8;
  char v9;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v18[2];

  v18[0] = a1;
  v18[1] = a2;
  v4 = *(unsigned __int16 *)(a1 + 24);
  switch(v4)
  {
    case 11:
LABEL_4:
      v5 = *(_QWORD *)(a1 + 80);
      if (*((_DWORD *)a3 + 2) > 0x40u || *(_DWORD *)(v5 + 32) > 0x40u)
      {
        v6 = (const void **)(v5 + 24);
        if ((const void **)(v5 + 24) != a3)
        {
          llvm::APInt::reallocate((uint64_t)a3, *(_DWORD *)(v5 + 32));
          v7 = *((unsigned int *)a3 + 2);
          if (v7 <= 0x40)
            *a3 = *v6;
          else
            memcpy((void *)*a3, *v6, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        *a3 = *(const void **)(v5 + 24);
        *((_DWORD *)a3 + 2) = *(_DWORD *)(v5 + 32);
      }
      return 1;
    case 201:
      v17 = 1;
      v16 = 0;
      v8 = sub_1C4914A4C(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v16);
      v9 = v8;
      if (v8)
      {
        v12 = sub_1C6131A64((unsigned int *)v18);
        if ((_DWORD)v11 == 1)
        {
          v13 = v12;
          v12 = v13;
        }
        llvm::APInt::trunc((llvm::APInt *)&v16, v12, (llvm::APInt *)&v14);
        if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
          MEMORY[0x1CAA32F9C](*a3, 0x1000C8000313F17);
        *a3 = v14;
        *((_DWORD *)a3 + 2) = v15;
      }
      if (v17 >= 0x41 && v16)
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      if ((v9 & 1) != 0)
        return 1;
      break;
    case 35:
      goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1C4914BE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (a3 > 3)
    return 0;
  LODWORD(v4) = a3;
  while (1)
  {
    v5 = *(unsigned __int16 *)(a1 + 24);
    if (v5 <= 0xD3)
      break;
    if (*(unsigned __int16 *)(a1 + 24) > 0xF5u)
    {
      if (v5 - 246 >= 2)
      {
        if (v5 != 428)
          return 0;
LABEL_20:
        v8 = *(_QWORD **)(a1 + 32);
        v4 = (v4 + 1);
        result = sub_1C4914BE0(v8[10], v8[11], v4);
        if (!(_DWORD)result)
          return result;
        v7 = v8 + 15;
        goto LABEL_32;
      }
      goto LABEL_12;
    }
    if (v5 != 212 && v5 != 215)
      return v5 == 223;
    v7 = *(uint64_t **)(a1 + 32);
    LODWORD(v4) = v4 + 1;
LABEL_32:
    a1 = *v7;
    if (v4 > 3)
      return 0;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x61u)
  {
    if (v5 != 98)
    {
      if (v5 == 141)
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(v10 + 40);
        if (*(_QWORD *)v10 == v11 && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v10 + 48))
        {
          LODWORD(v4) = v4 + 1;
        }
        else
        {
          v4 = (v4 + 1);
          result = ((uint64_t (*)(void))sub_1C4914BE0)();
          if (!(_DWORD)result)
            return result;
          result = sub_1C4914BE0(v11, *(_QWORD *)(v10 + 48), v4);
          if (!(_DWORD)result)
            return result;
        }
        v7 = (uint64_t *)(v10 + 80);
        goto LABEL_32;
      }
      if (v5 != 192)
        return 0;
      goto LABEL_20;
    }
    v9 = *(_QWORD *)(a1 + 32);
    v7 = (uint64_t *)(v9 + 40);
    if (*(_QWORD *)v9 == *(_QWORD *)(v9 + 40) && *(_DWORD *)(v9 + 8) == *(_DWORD *)(v9 + 48))
      return 1;
    LODWORD(v4) = v4 + 1;
    if ((((uint64_t (*)(void))sub_1C4914BE0)() & 1) == 0)
      return 0;
    goto LABEL_32;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x5Fu)
  {
    if (v5 != 96)
      return 0;
LABEL_12:
    v6 = *(_QWORD **)(a1 + 32);
    v4 = (v4 + 1);
    result = sub_1C4914BE0(*v6, v6[1], v4);
    if (!(_DWORD)result)
      return result;
    v7 = v6 + 5;
    goto LABEL_32;
  }
  if (v5 == 12 || v5 == 36)
  {
    v15 = *(_QWORD *)(a1 + 80);
    if (*(_UNKNOWN **)(v15 + 32) == &unk_1C866F1C0)
      v16 = *(_QWORD *)(v15 + 40);
    else
      v16 = v15 + 24;
    return (*(_BYTE *)(v16 + 28) & 8) == 0;
  }
  else
  {
    if (v5 != 46)
      return 0;
    v12 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 80);
    v13 = (_QWORD *)(v12 + 24);
    if (*(_DWORD *)(v12 + 32) >= 0x41u)
      v13 = (_QWORD *)*v13;
    return *v13 == 2131;
  }
}

BOOL sub_1C4914DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)a1)
    return 1;
  v4 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 4);
    if ((v5 & 0x80000000) == 0)
      break;
    v6 = *(_QWORD *)(v4 + 16 * (v5 & 0x7FFFFFFF) + 8);
    if ((*(_BYTE *)(v6 + 3) & 1) == 0)
      v6 = *(_QWORD *)(v6 + 24);
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned __int16 **)(v7 + 16);
    if ((*((_BYTE *)v8 + 9) & 0x20) != 0)
      return 1;
    v9 = *v8;
    if (v9 <= 4579)
    {
      if (v9 != 738 && v9 != 742)
        return 0;
      v11 = *(_QWORD *)(v7 + 32);
      v12 = 2;
    }
    else
    {
      if (v9 != 6215 && v9 != 6269)
        return v9 == 4580;
      v11 = *(_QWORD *)(v7 + 32);
      if ((sub_1C4914DFC(v11 + 64, a2) & 1) == 0)
        return 0;
      v12 = 4;
    }
    a1 = v11 + 32 * v12;
    if (*(_BYTE *)a1)
      return 1;
  }
  return 0;
}

uint64_t *sub_1C4914EE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int16 v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  llvm *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;

  v13 = *(unsigned __int8 **)(a4 + 64);
  v71 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v71, v13, 2);
    v14 = *(_DWORD *)(a4 + 60);
    v72 = v14;
    v17 = *(_QWORD *)(a1 + 16);
    v15 = (uint64_t *)(a1 + 16);
    v16 = v17;
    v69 = v71;
    if (v71)
    {
      llvm::MetadataTracking::track((uint64_t)&v69, v71, 2);
      v14 = v72;
    }
  }
  else
  {
    v14 = *(_DWORD *)(a4 + 60);
    v72 = v14;
    v15 = (uint64_t *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 16);
    v69 = 0;
  }
  v70 = v14;
  v18 = sub_1C48258FC(v16, a5, (const llvm::APInt *)&v69, (llvm *)4, 0, a2, a3, a8, 3, 0);
  v20 = v19;
  if (v69)
    llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
  v21 = (*(unsigned __int16 *)(a4 + 26) >> 10) & 3;
  v22 = *(_QWORD *)(a4 + 40);
  v23 = *(llvm **)v22;
  v24 = *(_QWORD *)(v22 + 8);
  if ((_DWORD)a5 == 395)
  {
    v41 = *(_QWORD *)(*v15 + 832);
    if (v41)
      v42 = *(_WORD *)(v41 + 8);
    else
      v42 = 0;
    v48 = sub_1C5D52060(*v15, 216, (const llvm::APInt *)&v71, (llvm *)0x1B, 0, (uint64_t)v18, v20, v42);
    v50 = v49;
    v51 = *(_QWORD *)(a2 + 40) + 16 * a3;
    v53 = *(llvm **)v51;
    v52 = *(_QWORD *)(v51 + 8);
    v54 = *(unsigned __int16 *)(a2 + 24);
    if (v54 == 35 || v54 == 11)
    {
      v55 = *(_QWORD *)(a2 + 80);
      v56 = (_QWORD *)(v55 + 24);
      v57 = v48;
      if (*(_DWORD *)(v55 + 32) >= 0x41u)
        v56 = (_QWORD *)*v56;
      v58 = sub_1C6366AB4(*v15, *v56 & 1, (const llvm::APInt *)&v71, v53, v52, 0, 0);
      v61 = (uint64_t)v57;
    }
    else
    {
      v68 = v48;
      v62 = sub_1C6366AB4(*v15, 1, (const llvm::APInt *)&v71, v53, v52, 0, 0);
      v65 = *(_QWORD *)(*v15 + 832);
      if (v65)
        LOWORD(v65) = *(_WORD *)(v65 + 8);
      v58 = sub_1C5D56C70(*v15, 171, (const llvm::APInt *)&v71, v53, v52, a2, a3, v64, (uint64_t)v62, v63, v65);
      v61 = (uint64_t)v68;
    }
    v66 = *(_QWORD *)(*v15 + 832);
    if (v66)
      LOWORD(v66) = *(_WORD *)(v66 + 8);
    v18 = sub_1C5D56C70(*v15, 148, (const llvm::APInt *)&v71, (llvm *)4, 0, v61, v50 | v20 & 0xFFFFFFFF00000000, v60, (uint64_t)v58, v59, v66);
    v25 = v67;
  }
  else
  {
    v25 = v20;
  }
  if ((v21 - 1) <= 2 && v23 != 4)
  {
    v26 = *(_QWORD *)(*v15 + 832);
    if (v26)
      v27 = *(_WORD *)(v26 + 8);
    else
      v27 = 0;
    v18 = sub_1C5D52060(*v15, 200, (const llvm::APInt *)&v71, v23, v24, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v25, v27);
    v25 = v28;
  }
  if (v21)
  {
    if (v21 == 2)
    {
      v43 = *v15;
      v44 = sub_1C6367494(*v15, 3, 0);
      v47 = *(_QWORD *)(v43 + 832);
      if (v47)
        LOWORD(v47) = *(_WORD *)(v47 + 8);
      v34 = sub_1C5D56C70(v43, 204, (const llvm::APInt *)&v71, v23, v24, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v25, v46, v44, v45, v47);
    }
    else
    {
      if (v21 != 3)
        goto LABEL_26;
      v29 = *v15;
      v30 = sub_1C6366AB4(*v15, 255, (const llvm::APInt *)&v71, v23, v24, 0, 0);
      v33 = *(_QWORD *)(v29 + 832);
      if (v33)
        LOWORD(v33) = *(_WORD *)(v33 + 8);
      v34 = sub_1C5D56C70(v29, 171, (const llvm::APInt *)&v71, v23, v24, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v25, v32, (uint64_t)v30, v31, v33);
    }
  }
  else
  {
    v36 = *(_QWORD *)(*v15 + 832);
    if (v36)
      v37 = *(_WORD *)(v36 + 8);
    else
      v37 = 0;
    v34 = sub_1C5D52060(*v15, 201, (const llvm::APInt *)&v71, (llvm *)3, 0, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v25, v37);
  }
  v18 = v34;
  v25 = v35;
LABEL_26:
  if (v23 == 2)
  {
    v38 = *(_QWORD *)(*v15 + 832);
    if (v38)
      v39 = *(_WORD *)(v38 + 8);
    else
      v39 = 0;
    v18 = sub_1C5D52060(*v15, 201, (const llvm::APInt *)&v71, v23, v24, (uint64_t)v18, v20 & 0xFFFFFFFF00000000 | v25, v39);
  }
  if (v71)
    llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
  return v18;
}

uint64_t *sub_1C49152F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v58;
  unsigned __int8 *v59;
  int v60;

  v8 = *(uint64_t **)(a2 + 32);
  v9 = *v8;
  v10 = v8[1];
  v11 = *(unsigned __int8 **)(a2 + 64);
  v59 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v59, v11, 2);
  v60 = *(_DWORD *)(a2 + 60);
  v12 = *(_QWORD *)(a3 + 80);
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v58 = (_QWORD *)*v13;
  v14 = *(_QWORD *)(a2 + 32);
  v16 = *(uint64_t **)(v14 + 40);
  v15 = *(_QWORD *)(v14 + 48);
  if (*(_BYTE *)v16[5] != 49)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(v17 + 832);
    if (v18)
      v19 = *(_WORD *)(v18 + 8);
    else
      v19 = 0;
    v16 = sub_1C5D52060(v17, 216, (const llvm::APInt *)&v59, (llvm *)0x31, 0, (uint64_t)v16, v15, v19);
    v15 = v15 & 0xFFFFFFFF00000000 | v20;
  }
  v21 = *(_QWORD *)(a1 + 16);
  v22 = sub_1C6366AB4(v21, 0, (const llvm::APInt *)&v59, (llvm *)5, 0, 0, 0);
  v25 = 0;
  v26 = *(_QWORD *)(v21 + 832);
  if (v26)
    v25 = *(_WORD *)(v26 + 8);
  v27 = sub_1C5D56C70(v21, 148, (const llvm::APInt *)&v59, (llvm *)5, 0, (uint64_t)v16, v15, v24, (uint64_t)v22, v23, v25);
  v29 = v28;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = sub_1C6366AB4(v30, 1, (const llvm::APInt *)&v59, (llvm *)5, 0, 0, 0);
  v34 = 0;
  v35 = *(_QWORD *)(v30 + 832);
  if (v35)
    v34 = *(_WORD *)(v35 + 8);
  v37 = sub_1C5D56C70(v30, 148, (const llvm::APInt *)&v59, (llvm *)5, 0, (uint64_t)v16, v15, v33, (uint64_t)v31, v32, v34);
  v39 = v38;
  v40 = 0;
  v41 = *(_QWORD *)(a1 + 16);
  v42 = *(_QWORD *)(v41 + 832);
  if (v42)
    v40 = *(_WORD *)(v42 + 8);
  v43 = sub_1C5D58E08(v41, (const char *)0x18F, (const llvm::APInt *)&v59, (llvm *)1, 0, (uint64_t)v27, v29, v36, a3, a4, v9, v10, SHIDWORD(v10), v40);
  v45 = v44;
  v46 = sub_1C6366AB4(*(_QWORD *)(a1 + 16), (uint64_t)v58 + 4, (const llvm::APInt *)&v59, (llvm *)6, 0, 0, 0);
  v49 = *(_QWORD *)(a1 + 16);
  v50 = *(_QWORD *)(v49 + 832);
  if (v50)
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  v51 = sub_1C5D58E08(v49, (const char *)0x18F, (const llvm::APInt *)&v59, (llvm *)1, 0, (uint64_t)v37, v39, v48, (uint64_t)v46, v47, v9, v10, SHIDWORD(v10), v50);
  v54 = *(_QWORD *)(a1 + 16);
  v55 = *(_QWORD *)(v54 + 832);
  if (v55)
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  v56 = sub_1C5D56C70(v54, 2, (const llvm::APInt *)&v59, (llvm *)1, 0, (uint64_t)v43, v45, v53, (uint64_t)v51, v52, v55);
  if (v59)
    llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
  return v56;
}

void *sub_1C49155A8(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, unsigned int *a5, __int128 *a6, int *a7, unsigned int *a8, unsigned int *a9, __int128 *a10)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v43;
  unsigned __int8 *v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v17 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v44, (llvm *)6, 0, 1, 0);
  v19 = v18;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v20 + 1, 16);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  v21 = (_QWORD *)(*(_QWORD *)a2 + 16 * v20);
  *v21 = v17;
  v21[1] = v19;
  ++*(_DWORD *)(a2 + 8);
  if (v44)
    llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
  v22 = *a4;
  v44 = 0;
  v45 = 0;
  v23 = sub_1C6366AB4(a1, v22, (const llvm::APInt *)&v44, (llvm *)6, 0, 1, 0);
  v25 = v24;
  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 8);
  }
  v27 = (_QWORD *)(*(_QWORD *)a2 + 16 * v26);
  *v27 = v23;
  v27[1] = v25;
  ++*(_DWORD *)(a2 + 8);
  if (v44)
    llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
  v28 = *a5;
  v44 = 0;
  v45 = 0;
  v29 = sub_1C6366AB4(a1, v28, (const llvm::APInt *)&v44, (llvm *)6, 0, 1, 0);
  v31 = v30;
  v32 = *(unsigned int *)(a2 + 8);
  if (v32 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v32 + 1, 16);
    LODWORD(v32) = *(_DWORD *)(a2 + 8);
  }
  v33 = (_QWORD *)(*(_QWORD *)a2 + 16 * v32);
  *v33 = v29;
  v33[1] = v31;
  v34 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v34;
  if (v44)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
    v34 = *(_DWORD *)(a2 + 8);
  }
  v35 = *a6;
  if (v34 >= *(_DWORD *)(a2 + 12))
  {
    v43 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v34 + 1, 16);
    v35 = v43;
    v34 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v34) = v35;
  ++*(_DWORD *)(a2 + 8);
  v36 = *a7;
  v44 = 0;
  v45 = 0;
  v37 = sub_1C6366AB4(a1, v36, (const llvm::APInt *)&v44, (llvm *)6, 0, 1, 0);
  v39 = v38;
  v40 = *(unsigned int *)(a2 + 8);
  if (v40 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v40 + 1, 16);
    LODWORD(v40) = *(_DWORD *)(a2 + 8);
  }
  v41 = (_QWORD *)(*(_QWORD *)a2 + 16 * v40);
  *v41 = v37;
  v41[1] = v39;
  ++*(_DWORD *)(a2 + 8);
  if (v44)
    llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
  return sub_1C61428B0(a1, a2, *a8, a9, a10);
}

void *sub_1C491585C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, unsigned int *a6, unsigned int *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v15 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v17 = v16;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  v19 = (_QWORD *)(*(_QWORD *)a2 + 16 * v18);
  *v19 = v15;
  v19[1] = v17;
  ++*(_DWORD *)(a2 + 8);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v20 = *a4;
  v30 = 0;
  v31 = 0;
  v21 = sub_1C6366AB4(a1, v20, (const llvm::APInt *)&v30, (llvm *)6, 0, 1, 0);
  v23 = v22;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v24 + 1, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  v25 = (_QWORD *)(*(_QWORD *)a2 + 16 * v24);
  *v25 = v21;
  v25[1] = v23;
  v26 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v26;
  if (v30)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
    v26 = *(_DWORD *)(a2 + 8);
  }
  v27 = *a5;
  if (v26 >= *(_DWORD *)(a2 + 12))
  {
    v29 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 16);
    v27 = v29;
    v26 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v26) = v27;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C61428B0(a1, a2, *a6, a7, a8);
}

unint64_t sub_1C4915A14(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  const char *v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  char EVT;
  llvm::EVT *v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t ExtendedSizeInBits;
  const char *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  const char *v57;
  int v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  unint64_t result;
  _BOOL4 v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  const char *v90;
  unint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  int v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  int v111;
  int v113;
  __int128 v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  v7 = a3[3];
  v8 = *(_OWORD *)(*(_QWORD *)(v7 + 40) + 16 * *((unsigned int *)a3 + 8));
  v117 = v8;
  v9 = *a3;
  v10 = *(_QWORD *)(*a3 + 96);
  v11 = *(unsigned __int16 *)(*a3 + 24);
  if (((v11 - 47) > 1 || (*(_BYTE *)(v9 + 26) & 2) == 0) && v11 != 287 && (__int16)v11 < 890)
  {
    v12 = 63
        - __clz(((1 << *(_BYTE *)(v10 + 34)) | *(_QWORD *)(v10 + 8)) & -((1 << *(_BYTE *)(v10 + 34)) | *(_QWORD *)(v10 + 8)));
    if ((v11 - 290) < 0x12)
    {
      v116 = 0;
      v13 = 1;
      goto LABEL_45;
    }
    if (v11 != 254)
    {
      v116 = 0;
      v13 = 0;
      if (v11 == 253)
        v49 = *a3;
      else
        v49 = 0;
      v117 = *(_OWORD *)(v49 + 80);
      goto LABEL_45;
    }
    v116 = 0;
    v37 = *((_DWORD *)a3 + 16);
    v13 = 1;
    if (v37 == 2 || v37 == 5)
      goto LABEL_45;
    v39 = *(_QWORD *)(v9 + 80);
    v38 = *(_QWORD *)(v9 + 88);
    *(_QWORD *)&v119 = v39;
    *((_QWORD *)&v119 + 1) = v38;
    v40 = v39;
    if (*((_BYTE *)a3 + 88))
    {
      v118 = v8;
      v41 = v8;
      if ((_BYTE)v8)
      {
        if (v8 - 15 >= 0x9C)
          goto LABEL_163;
        EVT = sub_1C47F37A0((unsigned __int8 *)&v118);
        v40 = v119;
      }
      else
      {
        if ((*(_DWORD *)(*((_QWORD *)&v8 + 1) + 8) & 0xFE) != 0x12)
          goto LABEL_163;
        EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v8 + 1) + 24), 0, (BOOL)a3);
      }
      v41 = EVT;
LABEL_163:
      if (v40)
      {
        if ((v40 - 15) < 0x9C)
        {
          v92 = sub_1C47F37A0((unsigned __int8 *)&v119);
LABEL_168:
          v93 = v92;
LABEL_170:
          v116 = 0;
          v94 = a3[3];
          v8 = *(_OWORD *)(*(_QWORD *)(v94 + 40) + 16 * *((unsigned int *)a3 + 8));
          if (v41 != 5 || v93 != 4)
            goto LABEL_45;
LABEL_202:
          v8 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v94 + 32) + 40)
                         + 16 * *(unsigned int *)(*(_QWORD *)(v94 + 32) + 8));
          v116 = 1;
          goto LABEL_45;
        }
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v119 + 1) + 8) & 0xFE) == 0x12)
      {
        v92 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v119 + 1) + 24), 0, (BOOL)a3);
        goto LABEL_168;
      }
      v93 = v119;
      goto LABEL_170;
    }
    if ((_BYTE)v39)
    {
      if (v39 - 15 >= 0x9C)
        goto LABEL_176;
      v87 = sub_1C47F37A0((unsigned __int8 *)&v119);
    }
    else
    {
      if ((*(_DWORD *)(v38 + 8) & 0xFE) != 0x12)
        goto LABEL_176;
      v87 = llvm::EVT::getEVT(*(llvm::EVT **)(v38 + 24), 0, (BOOL)a3);
    }
    LOBYTE(v39) = v87;
LABEL_176:
    if (*(_WORD *)(v7 + 24) != 201)
      goto LABEL_199;
    v95 = *(unsigned int **)(v7 + 32);
    v96 = *(_QWORD *)v95;
    if (*(_WORD *)(*(_QWORD *)v95 + 24) == 46)
    {
      v97 = *(_QWORD *)(**(_QWORD **)(v96 + 32) + 80);
      v98 = (_QWORD *)(v97 + 24);
      if (*(_DWORD *)(v97 + 32) >= 0x41u)
        v98 = (_QWORD *)*v98;
      v99 = 0;
      v100 = *(_DWORD *)v98;
      v101 = 1;
      v102 = (v100 - 2493) > 0xF || ((1 << (v100 + 67)) & 0xFF0F) == 0;
      if (!v102
        || ((v103 = v100 - 2588, v104 = v103 > 0xF, v105 = (1 << v103) & 0xFF0F, !v104)
          ? (v106 = v105 == 0)
          : (v106 = 1),
            !v106))
      {
LABEL_200:
        v116 = 0;
        v94 = a3[3];
        v8 = *(_OWORD *)(*(_QWORD *)(v94 + 40) + 16 * *((unsigned int *)a3 + 8));
        if (v99 && v101)
          goto LABEL_202;
LABEL_45:
        v50 = 1 << v12;
        v115 = v8;
        if ((_BYTE)v117)
        {
          if (v117 - 15 >= 0x9C)
          {
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v117);
LABEL_50:
            v53 = ExtendedSizeInBits;
            if ((_DWORD)v52 == 1)
            if ((v53 >> 3) <= 1)
              LODWORD(v47) = 1;
            else
              LODWORD(v47) = v53 >> 3;
            v46 = 1;
LABEL_56:
            v45 = 0;
            v48 = 0;
            if (v50 >= v47)
            {
              v26 = -1;
            }
            else
            {
              v54 = v46 * v47;
              v26 = -1;
              LODWORD(v47) = v50;
              v46 = v54 / v50;
            }
            goto LABEL_59;
          }
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v117 + 1) + 8) & 0xFE) != 0x12)
        {
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v117);
          goto LABEL_50;
        }
        v46 = sub_1C612FE00((llvm::EVT *)&v117, a2);
        if ((_BYTE)v117)
        {
          LOBYTE(v84) = sub_1C47F37A0((unsigned __int8 *)&v117);
          v85 = 0;
          v86 = 0;
        }
        else
        {
          v84 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v117 + 1) + 24), 0, v83);
          v85 = v84 & 0xFFFFFFFFFFFFFF00;
        }
        *(_QWORD *)&v117 = v85 | v84;
        *((_QWORD *)&v117 + 1) = v86;
        if ((_BYTE)v84)
          v89 = sub_1C47A8C74((unsigned __int8 *)&v117);
        else
          v89 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v117);
        v91 = v89;
        if ((_DWORD)v90 == 1)
        v47 = v91 >> 3;
        goto LABEL_56;
      }
    }
    v107 = (uint64_t *)(*(_QWORD *)(v96 + 40) + 16 * v95[2]);
    v108 = *v107;
    v109 = v107[1];
    *(_QWORD *)&v118 = v108;
    *((_QWORD *)&v118 + 1) = v109;
    if ((_BYTE)v108)
    {
      if (v108 - 15 < 0x9C)
      {
        v110 = sub_1C47F37A0((unsigned __int8 *)&v118);
LABEL_195:
        LOBYTE(v108) = v110;
      }
    }
    else if ((*(_DWORD *)(v109 + 8) & 0xFE) == 0x12)
    {
      v110 = llvm::EVT::getEVT(*(llvm::EVT **)(v109 + 24), 0, (BOOL)a3);
      goto LABEL_195;
    }
    if (v39 == 4 && v108 == 5)
    {
      v99 = 1;
      v101 = 1;
      goto LABEL_200;
    }
LABEL_199:
    v99 = 0;
    v101 = 0;
    goto LABEL_200;
  }
  v14 = *(_WORD *)(v10 + 32) & 2;
  v15 = *(_QWORD *)(v9 + 32);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 120) + 80);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  v18 = *(_DWORD *)v17 & 0xF;
  v19 = *(_QWORD *)(*(_QWORD *)(v15 + 80) + 80);
  v20 = (unint64_t *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u)
    v20 = (unint64_t *)*v20;
  v21 = *v20;
  v22 = *(unsigned __int16 *)(v9 + 56);
  if (v14)
  {
    if (v22 == 7)
    {
      v23 = 6;
      goto LABEL_16;
    }
LABEL_19:
    v26 = -1;
    goto LABEL_20;
  }
  if (v22 != 6)
    goto LABEL_19;
  v23 = 5;
LABEL_16:
  v24 = *(_QWORD *)(*(_QWORD *)(v15 + 40 * v23) + 80);
  v25 = (uint64_t *)(v24 + 24);
  if (*(_DWORD *)(v24 + 32) >= 0x41u)
    v25 = (uint64_t *)*v25;
  v26 = *v25;
LABEL_20:
  v27 = v21 >> 4;
  v28 = (16 * v18) | v21 & 0xF;
  a5.i32[0] = v18;
  v29 = (uint8x8_t)vcnt_s8(a5);
  v29.i16[0] = vaddlv_u8(v29);
  v113 = v29.i32[0];
  v115 = v8;
  if (!(_BYTE)v8)
  {
    if ((*(_DWORD *)(*((_QWORD *)&v8 + 1) + 8) & 0xFE) != 0x12)
    {
      v43 = (llvm::EVT *)&v117;
      goto LABEL_37;
    }
    v31 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v8 + 1) + 24), 0, (BOOL)a3);
    v32 = v31 & 0xFFFFFFFFFFFFFF00;
LABEL_25:
    *(_QWORD *)&v119 = v32 | v31;
    *((_QWORD *)&v119 + 1) = v33;
    if ((_BYTE)v31)
    {
      v30 = (unsigned __int8 *)&v119;
      goto LABEL_27;
    }
    v43 = (llvm::EVT *)&v119;
LABEL_37:
    v34 = llvm::EVT::getExtendedSizeInBits(v43);
    goto LABEL_38;
  }
  v30 = (unsigned __int8 *)&v117;
  if ((v8 - 15) < 0x9Cu)
  {
    LOBYTE(v31) = sub_1C47F37A0((unsigned __int8 *)&v117);
    v32 = 0;
    v33 = 0;
    goto LABEL_25;
  }
LABEL_27:
  v34 = sub_1C47A8C74(v30);
LABEL_38:
  v44 = v34;
  v45 = v28 & 0xC03FFFFFFFFFFFFFLL | ((unint64_t)v27 << 54);
  v13 = v14 >> 1;
  if ((_DWORD)v35 == 1)
  v116 = 0;
  v46 = v113;
  LODWORD(v47) = v44 >> 3;
  v48 = 1;
LABEL_59:
  v55 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)&v118 = *(_QWORD *)(v9 + 80);
  *((_QWORD *)&v118 + 1) = v55;
  if ((_BYTE)v118)
  {
    if (v118 - 15 >= 0x9C)
    {
      v56 = sub_1C47A8C74((unsigned __int8 *)&v118);
LABEL_64:
      v58 = v56;
      v59 = v115;
      if ((_DWORD)v57 == 1)
      {
        v59 = v115;
      }
      v60 = 0;
      if (v58 > 31)
      {
        switch(v58)
        {
          case 32:
            v60 = 5;
            break;
          case 64:
            v60 = 6;
            break;
          case 128:
            v60 = 7;
            break;
        }
      }
      else
      {
        switch(v58)
        {
          case 1:
            v60 = 2;
            break;
          case 8:
            v60 = 3;
            break;
          case 16:
            v60 = 4;
            break;
        }
      }
      v61 = 0;
      LOBYTE(v118) = v60;
      DWORD1(v118) = *(_DWORD *)((char *)&v119 + 3);
      *(_DWORD *)((char *)&v118 + 1) = v119;
      *((_QWORD *)&v118 + 1) = 0;
      result = v118;
      goto LABEL_80;
    }
    LOBYTE(v77) = sub_1C47F37A0((unsigned __int8 *)&v118);
    v78 = 0;
    v79 = 0;
  }
  else
  {
    if ((*(_DWORD *)(v55 + 8) & 0xFE) != 0x12)
    {
      v56 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v118);
      goto LABEL_64;
    }
    v77 = llvm::EVT::getEVT(*(llvm::EVT **)(v55 + 24), 0, v36);
    v78 = v77 & 0xFFFFFFFFFFFFFF00;
  }
  *(_QWORD *)&v119 = v78 | v77;
  *((_QWORD *)&v119 + 1) = v79;
  if ((_BYTE)v77)
    v80 = sub_1C47A8C74((unsigned __int8 *)&v119);
  else
    v80 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v119);
  if ((_DWORD)v81 == 1)
  {
    v111 = v80;
    v80 = v111;
  }
  v82 = 0;
  if (v80 > 31)
  {
    switch(v80)
    {
      case 32:
        v82 = 5;
        break;
      case 64:
        v82 = 6;
        break;
      case 128:
        v82 = 7;
        break;
    }
  }
  else
  {
    switch(v80)
    {
      case 1:
        v82 = 2;
        break;
      case 8:
        v82 = 3;
        break;
      case 16:
        v82 = 4;
        break;
    }
  }
  v88 = sub_1C612FE00((llvm::EVT *)&v118, v81);
  result = sub_1C4816F98((llvm::LLVMContext *)a2, v82, 0, v88, 0);
  *(_QWORD *)&v118 = result;
  *((_QWORD *)&v118 + 1) = v61;
  v59 = v115;
LABEL_80:
  v63 = v46 == 1 && v47 == 1;
  v64 = *(_DWORD *)(*(_QWORD *)(*a3 + 96) + 16);
  *(_QWORD *)&v119 = result;
  *((_QWORD *)&v119 + 1) = v61;
  *(_QWORD *)(a1 + 24) = v26;
  *(_DWORD *)(a1 + 32) = v64;
  *(_BYTE *)(a1 + 36) = v48;
  *(_BYTE *)(a1 + 37) = 0;
  *(_BYTE *)(a1 + 38) = v116;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = v59;
  *(_OWORD *)(a1 + 88) = v119;
  *(_WORD *)(a1 + 8) = v47;
  *(_WORD *)(a1 + 10) = v46;
  *(_DWORD *)(a1 + 12) = v13;
  *(_QWORD *)a1 = a4;
  if ((_DWORD)v47 == 1)
  {
    v65 = 2;
    *(_WORD *)(a1 + 8) = 2;
    v46 = (v46 + 1) >> 1;
  }
  else
  {
    if ((_DWORD)v47 != 8)
    {
      v65 = (unsigned __int16)v47;
      if ((v48 & 1) != 0)
        goto LABEL_88;
      goto LABEL_94;
    }
    v65 = 4;
    *(_WORD *)(a1 + 8) = 4;
    LOWORD(v46) = 2 * v46;
  }
  *(_WORD *)(a1 + 10) = v46;
  if ((v48 & 1) != 0)
  {
LABEL_88:
    if ((v45 & 0xF) == 2 && (_DWORD)v47 == 2)
      llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const char *)1);
    if ((_BYTE)result)
    {
      if (result - 15 >= 0x9C)
        goto LABEL_111;
    }
    else if ((*(_DWORD *)(v61 + 8) & 0xFE) != 0x12)
    {
      goto LABEL_111;
    }
    result = sub_1C612FE00((llvm::EVT *)&v119, (const char *)v61);
    if ((result - 3) < 2)
    {
      v71 = 1024;
      goto LABEL_112;
    }
    if ((_DWORD)result != 1)
    {
      v71 = 512;
      goto LABEL_112;
    }
LABEL_111:
    v71 = 0;
    goto LABEL_112;
  }
LABEL_94:
  if (v65 == 2)
    v66 = 1;
  else
    v66 = 2;
  if (v63)
    v67 = 0;
  else
    v67 = v66;
  v68 = v116 ^ 1;
  if (!v13)
    v68 = 1;
  if ((v68 & 1) == 0)
  {
    v65 = 4;
    *(_WORD *)(a1 + 8) = 4;
    v67 = 1;
  }
  v69 = 1024;
  if ((unsigned __int16)v46 == 2)
    v69 = 512;
  if ((unsigned __int16)v46 == 1)
    v70 = 0;
  else
    v70 = v69;
  v71 = v70 | v67 | (16 * (~(-1 << v46) & 0xFu));
LABEL_112:
  v72 = (char *)(a1 + 56);
  *(_QWORD *)(a1 + 16) = v71 | v45;
  v73 = (unsigned __int16)v46 * v65;
  if (v65 < 3)
    v74 = 4;
  else
    v74 = 5;
  *(_BYTE *)(a1 + 56) = v74;
  *(_QWORD *)(a1 + 64) = 0;
  if (v73 == 4)
  {
    v75 = 5;
    goto LABEL_119;
  }
  if (v73 == 2)
  {
    v75 = 4;
LABEL_119:
    *v72 = v75;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v72;
    return result;
  }
  if ((unsigned __int16)v46 >= 2u)
  {
    result = sub_1C4816F98((llvm::LLVMContext *)a2, *(_QWORD *)(a1 + 56), 0, (unsigned __int16)v46, 0);
    *(_QWORD *)(a1 + 56) = result;
    *(_QWORD *)(a1 + 64) = v76;
    *(_BYTE *)(a1 + 40) = -82;
    *(_QWORD *)(a1 + 48) = 0;
  }
  return result;
}

void sub_1C491641C(unint64_t *a1, llvm::raw_ostream *this)
{
  _BYTE *v4;
  _WORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  llvm::Value *v14;
  _DWORD *v15;
  _WORD *v16;
  const llvm::Function *v17;
  llvm::LLVMContextImpl *v18;
  void *v19[2];
  void (**v20)(llvm::ModuleSlotTracker *__hidden);
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "(", 1uLL);
  }
  else
  {
    *v4 = 40;
    ++*((_QWORD *)this + 4);
  }
  sub_1C63718D8(a1[1], this, 0);
  v5 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 10528;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ")", 2uLL);
  }
  v6 = a1[5];
  if (v6 && *(_WORD *)(v6 + 24) != 51)
  {
    v15 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v15 > 3uLL)
    {
      *v15 = 673196832;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " + (", 4uLL);
    }
    sub_1C63718D8(a1[5], this, 0);
    v16 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 10528;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ")", 2uLL);
    }
  }
  v7 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 2)
  {
    *(_BYTE *)(v7 + 2) = 32;
    *(_WORD *)v7 = 8251;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ";  ", 3uLL);
  }
  v8 = 0;
  v9 = **(_QWORD **)(*a1 + 96);
  if ((v9 & 4) != 0)
    goto LABEL_20;
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v10)
    goto LABEL_20;
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 == 5)
  {
    do
    {
      v10 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10)
        v12 = v11 == 5;
      else
        v12 = 0;
    }
    while (v12);
  }
  if (v11 <= 3)
  {
    v8 = *(uint64_t ***)(v10 + 40);
    goto LABEL_20;
  }
  if (v11 <= 0x1B)
  {
    v8 = 0;
LABEL_20:
    v20 = &off_1E814DC18;
    v21 = 0;
    v22 = v8 != 0;
    v23 = 1;
    v28 = 0;
    v27 = 0;
    v25 = 0;
    v26 = 0;
    v24 = v8;
    goto LABEL_21;
  }
  v17 = *(const llvm::Function **)(*(_QWORD *)(v10 + 40) + 56);
  v8 = (uint64_t **)*((_QWORD *)v17 + 5);
  v20 = &off_1E814DC18;
  v21 = 0;
  v22 = v8 != 0;
  v23 = 1;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v24 = v8;
  llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)&v20, v17);
LABEL_21:
  v19[0] = &v20;
  v19[1] = 0;
  v13 = (uint64_t *)&v18;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v18);
  if (v8)
    v13 = *v8;
  llvm::MachineMemOperand::print(*(uint64_t **)(*a1 + 96), this, (llvm::ModuleSlotTracker *)&v20, (uint64_t)v19, v13, 0, 0);
  llvm::LLVMContext::~LLVMContext(&v18, v14);
  if (v19[0] != &v20)
    free(v19[0]);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)&v20);
}

uint64_t *sub_1C4916734(uint64_t a1, int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  llvm *v13;
  uint64_t ExtendedSizeInBits;
  const char *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  unint64_t v38;
  uint64_t *v39;
  llvm *v40;
  llvm::Type *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t *v58;
  int v59;
  int v60;
  uint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t *v71;
  __int16 v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  llvm *v76;
  uint64_t v77;
  uint64_t v78;
  const llvm::APInt *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  unsigned int v83;
  unsigned __int8 *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  void *v102[2];
  _QWORD v103[34];

  v103[32] = *MEMORY[0x1E0C80C00];
  v13 = *(llvm **)(a5 + 72);
  v12 = *(_QWORD *)(a5 + 80);
  *(_OWORD *)v102 = *(_OWORD *)(a5 + 56);
  if (LOBYTE(v102[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v102);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v102);
  v16 = ExtendedSizeInBits;
  if ((_DWORD)v15 == 1)
  if (*(unsigned __int8 *)(a5 + 40) == 174)
  {
    v17 = *(unsigned __int8 **)a3;
    v100 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v100, v17, 2);
    v101 = *((_DWORD *)a3 + 2);
    v97 = a4;
    v18 = sub_1C614226C(a1, a4, 0, v13, v12, a2, (const llvm::APInt *)&v100, a6);
    v20 = v19;
    if (v100)
      llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
    v102[0] = v103;
    v102[1] = (void *)0x1000000000;
    v21 = *(unsigned __int16 *)(a5 + 10);
    if (*(_WORD *)(a5 + 10))
    {
      v94 = v16;
      v95 = v12;
      v22 = 0;
      if (*(_WORD *)(a5 + 8) == 2)
        v23 = 4;
      else
        v23 = 5;
      do
      {
        if (*(unsigned __int16 *)(a5 + 8) <= 2u)
          v24 = v22 + 1;
        else
          v24 = v22 + 25;
        v25 = sub_1C636E638(*(_QWORD *)(a6 + 16), v24, a3, (llvm *)v23, 0, (uint64_t)v18, v20);
        v27 = v26;
        v28 = LODWORD(v102[1]);
        if (LODWORD(v102[1]) >= (unint64_t)HIDWORD(v102[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v102, (uint64_t)v103, LODWORD(v102[1]) + 1, 16);
          v28 = LODWORD(v102[1]);
        }
        v29 = (char *)v102[0] + 16 * v28;
        *v29 = v25;
        v29[1] = v27;
        v21 = ++LODWORD(v102[1]);
        ++v22;
      }
      while (v22 < *(unsigned __int16 *)(a5 + 10));
      v12 = v95;
      v16 = v94;
    }
    v31 = *(_QWORD *)(a5 + 56);
    v32 = *(_QWORD *)(a5 + 64);
    a4 = v97;
    if (!*(_BYTE *)(a5 + 36))
      goto LABEL_38;
    if ((v16 >> 3) == 12)
    {
      v46 = sub_1C61312D0(*(_QWORD *)(a6 + 16), (llvm *)5, 0);
      v35 = v47;
      v48 = v102[1];
      if (LODWORD(v102[1]) >= HIDWORD(v102[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v102, (uint64_t)v103, LODWORD(v102[1]) + 1, 16);
        v48 = v102[1];
      }
      v37 = (char *)v102[0] + 16 * v48;
      *(_QWORD *)v37 = v46;
      v31 = 51;
    }
    else
    {
      if ((v16 >> 3) != 6)
      {
LABEL_38:
        v49 = *(_QWORD *)(a6 + 16);
        v50 = v21;
        v51 = *(_QWORD *)(v49 + 832);
        if (v51)
          v52 = *(unsigned __int16 *)(v51 + 8);
        else
          v52 = 0;
        v54 = sub_1C636D0C8(v49, (const char *)0x92, a3, (llvm *)v31, v32, (uint64_t *)v102[0], v50, v52);
        v55 = *(_QWORD *)(a6 + 16);
        v56 = *(_QWORD *)(v55 + 832);
        if (v56)
          v57 = *(_WORD *)(v56 + 8);
        else
          v57 = 0;
        v58 = sub_1C5D52060(v55, 216, a3, v13, v12, (uint64_t)v54, v53, v57);
        v60 = v59;
        if (v102[0] != v103)
          free(v102[0]);
        goto LABEL_81;
      }
      v33 = sub_1C61312D0(*(_QWORD *)(a6 + 16), (llvm *)4, 0);
      v35 = v34;
      v36 = v102[1];
      if (LODWORD(v102[1]) >= HIDWORD(v102[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v102, (uint64_t)v103, LODWORD(v102[1]) + 1, 16);
        v36 = v102[1];
      }
      v37 = (char *)v102[0] + 16 * v36;
      *(_QWORD *)v37 = v33;
      v31 = 40;
    }
    v32 = 0;
    *((_QWORD *)v37 + 1) = v35;
    v21 = ++LODWORD(v102[1]);
    goto LABEL_38;
  }
  if (!*(_BYTE *)(a5 + 36))
  {
    if (a2)
    {
      v96 = v12;
      v40 = v13;
      v41 = sub_1C4916CF4(a4, 0);
      v43 = v42;
      *(_OWORD *)v102 = *(_OWORD *)(a5 + 88);
      if (LOBYTE(v102[0]))
        v44 = sub_1C47A8C74((unsigned __int8 *)v102);
      else
        v44 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v102);
      v30 = v41 != (llvm::Type *)v44 || v43 != v45;
      v13 = v40;
      v12 = v96;
    }
    else
    {
      v30 = 0;
    }
    *(_OWORD *)v102 = *(_OWORD *)(a5 + 88);
    if (LOBYTE(v102[0]))
      v62 = sub_1C47A8C74((unsigned __int8 *)v102);
    else
      v62 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v102);
    v64 = v62;
    if ((_DWORD)v63 == 1)
    if (v64 <= 8 && **(_BYTE **)(a4 + 40) == 4)
    {
      v65 = *(_QWORD *)(a6 + 16);
      v66 = sub_1C6367494(v65, 3, 0);
      v69 = 0;
      v70 = *(_QWORD *)(v65 + 832);
      if (v70)
        v69 = *(_WORD *)(v70 + 8);
      v71 = sub_1C5D56C70(v65, 4, a3, (llvm *)4, 0, a4, 0, v68, v66, v67, v69);
      v72 = 0;
      v74 = v73;
      v75 = *(_QWORD *)(a6 + 16);
      v76 = *(llvm **)(a5 + 88);
      v77 = *(_QWORD *)(a5 + 96);
      v78 = *(_QWORD *)(v75 + 832);
      if (v78)
        v72 = *(_WORD *)(v78 + 8);
      v79 = a3;
    }
    else
    {
      if (!v30)
      {
        v81 = 0;
        v82 = (uint64_t *)a4;
LABEL_73:
        v84 = *(unsigned __int8 **)a3;
        v98 = v84;
        if (v84)
          llvm::MetadataTracking::track((uint64_t)&v98, v84, 2);
        v99 = *((_DWORD *)a3 + 2);
        v39 = sub_1C614226C(a1, (uint64_t)v82, v81, v13, v12, a2, (const llvm::APInt *)&v98, a6);
        v38 = v85;
        if (v98)
          llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
        goto LABEL_77;
      }
      v75 = *(_QWORD *)(a6 + 16);
      v76 = *(llvm **)(a5 + 88);
      v77 = *(_QWORD *)(a5 + 96);
      v80 = *(_QWORD *)(v75 + 832);
      if (v80)
        v72 = *(_WORD *)(v80 + 8);
      else
        v72 = 0;
      v79 = a3;
      v71 = (uint64_t *)a4;
      v74 = 0;
    }
    v82 = sub_1C5D52060(v75, 201, v79, v76, v77, (uint64_t)v71, v74, v72);
    v81 = v83;
    goto LABEL_73;
  }
  v38 = 0;
  v39 = (uint64_t *)a4;
LABEL_77:
  v86 = *(_QWORD *)(a6 + 16);
  v87 = *(_QWORD *)(v86 + 832);
  if (v87)
    v88 = *(_WORD *)(v87 + 8);
  else
    v88 = 0;
  v58 = sub_1C5D52060(v86, 216, a3, v13, v12, (uint64_t)v39, v38, v88);
  v60 = v89;
LABEL_81:
  v90 = sub_1C636A8B4(*(_QWORD *)(a6 + 16), (uint64_t)v13, v12, 1, 0);
  return sub_1C636D6B4(*(_QWORD *)(a6 + 16), (const char *)0x37, a3, v90, v91, (uint64_t)v58, v60, v92, a4, 1);
}

llvm::Type *sub_1C4916CF4(uint64_t a1, unsigned int a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v3)
    return (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v3);
  else
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3);
}

uint64_t *sub_1C4916D34(const llvm::APInt *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ExtendedSizeInBits;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  const llvm::APInt *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  char v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  __int128 v82;
  int v83;
  __int128 v84;
  void *v85[2];
  _QWORD v86[68];

  v86[66] = *MEMORY[0x1E0C80C00];
  v82 = *(_OWORD *)(a4 + 72);
  v84 = v82;
  *(_OWORD *)v85 = *(_OWORD *)(a4 + 56);
  if (LOBYTE(v85[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v85);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v85);
  v12 = ExtendedSizeInBits;
  if ((_DWORD)v11 == 1)
  v13 = a3 & 0xFFFFFFFF00000000;
  if (*(unsigned __int8 *)(a4 + 40) != 174)
  {
    if ((_BYTE)v82)
      v14 = sub_1C47A8C74((unsigned __int8 *)&v84);
    else
      v14 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v84);
    v16 = v14;
    if ((_DWORD)v15 == 1)
    if (v16 <= 8)
    {
      v17 = *(_QWORD *)(a5 + 16);
      v18 = *(_QWORD *)(v17 + 832);
      if (v18)
        v19 = *(_WORD *)(v18 + 8);
      else
        v19 = 0;
      return sub_1C5D52060(v17, 200, a1, (llvm *)4, 0, (uint64_t)a2, a3, v19);
    }
    return a2;
  }
  v21 = v12 >> 3;
  v22 = sub_1C613A4A4(*(_QWORD *)(a4 + 56), *(_QWORD *)(a4 + 64));
  v83 = v21;
  if (*(_BYTE *)(a4 + 36))
  {
    if ((_DWORD)v21 == 12)
    {
      v23 = *(_QWORD *)(a5 + 16);
      v30 = *(_QWORD *)(v23 + 832);
      if (v30)
        v27 = *(_WORD *)(v30 + 8);
      else
        v27 = 0;
      v29 = a1;
      v24 = 51;
    }
    else
    {
      if ((_DWORD)v21 != 6)
        goto LABEL_35;
      v23 = *(_QWORD *)(a5 + 16);
      v28 = *(_QWORD *)(v23 + 832);
      if (v28)
        v27 = *(_WORD *)(v28 + 8);
      else
        v27 = 0;
      v29 = a1;
      v24 = 40;
    }
    v25 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(a5 + 16);
    v24 = *(_QWORD *)(a4 + 56);
    v25 = *(_QWORD *)(a4 + 64);
    v26 = *(_QWORD *)(v23 + 832);
    if (v26)
      v27 = *(_WORD *)(v26 + 8);
    else
      v27 = 0;
    v29 = a1;
  }
  a2 = sub_1C5D52060(v23, 216, v29, (llvm *)v24, v25, (uint64_t)a2, a3, v27);
  LODWORD(a3) = v31;
LABEL_35:
  v85[0] = v86;
  v85[1] = (void *)0x2100000000;
  v32 = sub_1C6366AB4(*(_QWORD *)(a5 + 16), v22, a1, (llvm *)5, 0, 1, 0);
  v34 = v33;
  v35 = v85[1];
  if (LODWORD(v85[1]) >= HIDWORD(v85[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
    v35 = v85[1];
  }
  v36 = (char *)v85[0] + 16 * v35;
  *v36 = v32;
  v36[1] = v34;
  v37 = ++LODWORD(v85[1]);
  v38 = a2[5] + 16 * a3;
  v39 = *(_BYTE *)v38;
  if (!*(_BYTE *)v38)
  {
    v40 = *(_QWORD *)(v38 + 8);
    v41 = v21;
    if ((*(_DWORD *)(v40 + 8) & 0xFE) == 0x12)
      v42 = *(unsigned __int8 *)(**(_QWORD **)(v40 + 16) + 8);
    else
      v42 = *(_DWORD *)(v40 + 8);
    if (v42 <= 6)
      goto LABEL_46;
LABEL_43:
    v43 = *(unsigned __int16 *)(a4 + 8) == 2;
    v44 = 4;
    goto LABEL_47;
  }
  v41 = v21;
  if ((v39 + 104) >= 0x13u && (v39 - 8) >= 7u && (v39 - 75) >= 0x2Du)
    goto LABEL_43;
LABEL_46:
  v43 = *(unsigned __int16 *)(a4 + 8) == 2;
  v44 = 9;
LABEL_47:
  if (v43)
    v45 = v44;
  else
    v45 = v44 + 1;
  if (*(_WORD *)(a4 + 10))
  {
    v46 = 0;
    v47 = a3 | v13;
    do
    {
      v48 = *(_QWORD *)(a5 + 16);
      v49 = sub_1C6366AB4(v48, v46, a1, (llvm *)5, 0, 0, 0);
      v52 = 0;
      v53 = *(_QWORD *)(v48 + 832);
      if (v53)
        v52 = *(_WORD *)(v53 + 8);
      v54 = sub_1C5D56C70(v48, 148, a1, (llvm *)v45, 0, (uint64_t)a2, v47, v51, (uint64_t)v49, v50, v52);
      v56 = v55;
      v57 = LODWORD(v85[1]);
      if (LODWORD(v85[1]) >= (unint64_t)HIDWORD(v85[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
        v57 = LODWORD(v85[1]);
      }
      v58 = (uint64_t **)((char *)v85[0] + 16 * v57);
      *v58 = v54;
      v58[1] = v56;
      ++LODWORD(v85[1]);
      if (*(unsigned __int16 *)(a4 + 8) <= 2u)
        v59 = v46 + 1;
      else
        v59 = v46 + 25;
      v60 = sub_1C6366AB4(*(_QWORD *)(a5 + 16), v59, a1, (llvm *)5, 0, 1, 0);
      v62 = v61;
      v63 = LODWORD(v85[1]);
      if (LODWORD(v85[1]) >= (unint64_t)HIDWORD(v85[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
        v63 = LODWORD(v85[1]);
      }
      v64 = (char *)v85[0] + 16 * v63;
      *v64 = v60;
      v64[1] = v62;
      v37 = ++LODWORD(v85[1]);
      ++v46;
    }
    while (v46 < *(unsigned __int16 *)(a4 + 10));
    v41 = v83;
  }
  if (v41 == 6)
  {
    v72 = sub_1C61312D0(*(_QWORD *)(a5 + 16), (llvm *)v45, 0);
    v74 = v73;
    v75 = v85[1];
    if (LODWORD(v85[1]) >= HIDWORD(v85[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
      v75 = v85[1];
    }
    v76 = (char *)v85[0] + 16 * v75;
    *v76 = v72;
    v76[1] = v74;
    ++LODWORD(v85[1]);
    v70 = *(_QWORD *)(a5 + 16);
    v71 = 4;
    goto LABEL_71;
  }
  if (v41 == 12)
  {
    v65 = sub_1C61312D0(*(_QWORD *)(a5 + 16), (llvm *)v45, 0);
    v67 = v66;
    v68 = v85[1];
    if (LODWORD(v85[1]) >= HIDWORD(v85[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
      v68 = v85[1];
    }
    v69 = (char *)v85[0] + 16 * v68;
    *v69 = v65;
    v69[1] = v67;
    ++LODWORD(v85[1]);
    v70 = *(_QWORD *)(a5 + 16);
    v71 = 28;
LABEL_71:
    v77 = sub_1C6366AB4(v70, v71, a1, (llvm *)5, 0, 1, 0);
    v79 = v78;
    v80 = v85[1];
    if (LODWORD(v85[1]) >= HIDWORD(v85[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v85, (uint64_t)v86, LODWORD(v85[1]) + 1, 16);
      v80 = v85[1];
    }
    v81 = (char *)v85[0] + 16 * v80;
    *v81 = v77;
    v81[1] = v79;
    v37 = ++LODWORD(v85[1]);
  }
  a2 = sub_1C636E56C(*(_QWORD *)(a5 + 16), 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v85[0], v37);
  if (v85[0] != v86)
    free(v85[0]);
  return a2;
}

uint64_t *sub_1C491732C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned __int8 **v45;
  int v46;
  uint64_t *v47;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  _QWORD v62[2];
  unint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD v72[18];

  v72[16] = *MEMORY[0x1E0C80C00];
  v6 = a2[1];
  v7 = a2[2];
  v8 = *a2;
  v51 = *(_OWORD *)*(_QWORD *)(*a2 + 32);
  v9 = *(unsigned __int8 **)(*a2 + 64);
  v68 = v9;
  v10 = (_QWORD *)v8;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v68, v9, 2);
    v10 = (_QWORD *)*a2;
  }
  v69 = *(_DWORD *)(v8 + 60);
  v55 = v10[10];
  v53 = v10[12];
  v54 = v10[11];
  v70 = v72;
  v71 = 0x800000000;
  sub_1C4915A14((uint64_t)v62, *(char **)(*(_QWORD *)(a3 + 16) + 56), a2, *(_QWORD *)(a1 + 184296), (int8x8_t)0x800000000);
  v52 = v64;
  if (v64 == 3 && *(_BYTE *)(v62[0] + 326))
    v11 = v63 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
  else
    v11 = v63 & 0xFFFFFFFFFFFFF9FFLL;
  v63 = v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(unsigned __int8 **)(v6 + 64);
  v60 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v60, v13, 2);
  v61 = *(_DWORD *)(v6 + 60);
  v14 = *(_QWORD *)(v12 + 832);
  if (v14)
    v15 = *(_WORD *)(v14 + 8);
  else
    v15 = 0;
  v16 = sub_1C5D52060(v12, 201, (const llvm::APInt *)&v60, (llvm *)5, 0, v6, v7, v15);
  v18 = v7 & 0xFFFFFFFF00000000 | v17;
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 381))
  {
    v49 = a1;
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (unsigned __int8 *)v16[8];
    v60 = v20;
    v50 = v11;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v60, v20, 2);
      v22 = *(_QWORD *)(a3 + 16);
      v21 = (unsigned __int8 *)v16[8];
    }
    else
    {
      v21 = 0;
      v22 = v19;
    }
    v23 = *((_DWORD *)v16 + 15);
    v61 = v23;
    v24 = sub_1C4884088(v50);
    v58 = v21;
    if (v21)
    {
      llvm::MetadataTracking::track((uint64_t)&v58, v21, 2);
      v23 = *((_DWORD *)v16 + 15);
    }
    v59 = v23;
    v25 = sub_1C6366AB4(v22, v24, (const llvm::APInt *)&v58, (llvm *)5, 0, 0, 0);
    v28 = 0;
    v29 = *(_QWORD *)(v19 + 832);
    if (v29)
      v28 = *(_WORD *)(v29 + 8);
    v16 = sub_1C5D56C70(v19, 177, (const llvm::APInt *)&v60, (llvm *)5, 0, (uint64_t)v16, v18, v27, (uint64_t)v25, v26, v28);
    v31 = v30;
    a1 = v49;
    v11 = v50;
    if (v58)
      llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
    v18 = v31 | v7 & 0xFFFFFFFF00000000;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  }
  v32 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v11, (const llvm::APInt *)&v68, (llvm *)6, 0, 1, 0);
  v34 = v33;
  v35 = v71;
  if (v71 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v71 + 1, 16);
    v35 = v71;
  }
  *(_OWORD *)&v70[2 * v35] = v51;
  v36 = (v71 + 1);
  LODWORD(v71) = v36;
  if (v36 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v36 + 1, 16);
    LODWORD(v36) = v71;
  }
  v37 = (uint64_t **)&v70[2 * v36];
  *v37 = v16;
  v37[1] = (uint64_t *)v18;
  v38 = (v71 + 1);
  LODWORD(v71) = v38;
  if (v38 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v38 + 1, 16);
    LODWORD(v38) = v71;
  }
  v39 = &v70[2 * v38];
  *v39 = (uint64_t)v32;
  v39[1] = v34;
  LODWORD(v71) = v71 + 1;
  v40 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v66, v67, 1, 0);
  v42 = v41;
  v43 = sub_1C4883EEC((uint64_t)v62, v52, 1, 0);
  v45 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v43, (uint64_t)&v68, v40, v42, v70, v71, v44, v55, v54, v53);
  if (v65)
    v46 = 0;
  else
    v46 = *((_DWORD *)a2 + 22);
  v56 = v68;
  if (v68)
    llvm::MetadataTracking::track((uint64_t)&v56, v68, 2);
  v57 = v69;
  v47 = sub_1C4916734(a1, v46, (const llvm::APInt *)&v56, (uint64_t)v45, (uint64_t)v62, a3);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  if (v70 != v72)
    free(v70);
  if (v68)
    llvm::MetadataTracking::untrack((uint64_t)&v68, v68);
  return v47;
}

uint64_t *sub_1C49177AC(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  int v91;
  uint64_t *v92;
  unsigned int v94;
  _QWORD *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  int v109;
  unsigned __int8 *v110;
  int v111;
  _BYTE v112[8];
  unsigned __int8 *v113;
  int v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  char v124;
  char v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  _QWORD v139[18];

  v139[16] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *(_OWORD *)*(_QWORD *)(*a2 + 32);
  v105 = v8;
  v98 = *(_QWORD *)(*a2 + 96);
  v107 = *(_DWORD *)(v98 + 16);
  v9 = *(unsigned __int8 **)(*a2 + 64);
  v134 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v134, v9, 2);
  v135 = *(_DWORD *)(v7 + 60);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(uint64_t **)(v10 + 40);
  v12 = *v11;
  v13 = (uint64_t *)(a1 + 184296);
  sub_1C4915A14((uint64_t)&v127, *(char **)(v10 + 56), a2, *(_QWORD *)(a1 + 184296), *(int8x8_t *)&v8);
  v14 = *(_BYTE **)(a1 + 184296);
  if (v14[318])
  {
    v15 = 4;
  }
  else if (v14[319])
  {
    v15 = 5;
  }
  else if (v14[320])
  {
    v15 = 6;
  }
  else if (v14[321])
  {
    v15 = 7;
  }
  else
  {
    v15 = 9;
  }
  LODWORD(v137) = 0;
  v16 = sub_1C4979B6C((int)v14, v12, "MemoryReadL2Pers", (int *)&v137);
  v101 = v11[43];
  v17 = v129;
  if (v129 == -1)
  {
    v18 = v16;
    v19 = (int)v137;
    v20 = *v13;
    if (*(_BYTE *)(*v13 + 364))
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 648))(v101);
    else
      v21 = 1;
    v22 = 4 * v19;
    if (*(_BYTE *)(v20 + 371))
    {
      v25 = 0;
      v26 = 4;
      if (v18)
        v26 = v22;
    }
    else
    {
      if (v107 == 1)
      {
        if (v15 == 5)
          v23 = v21;
        else
          v23 = 0;
        if (*(_BYTE *)(*v13 + 372))
          v24 = 3;
        else
          v24 = v23;
      }
      else
      {
        v24 = 0;
      }
      LODWORD(v137) = 0;
      if (sub_1C4979B6C(v20, v12, "MemoryReadCacheCtl", (int *)&v137))
        v25 = (int)v137;
      else
        v25 = v24;
      v26 = 4;
      if (v18)
        v27 = v22;
      else
        v27 = 4;
      if (v25 != 3)
        v26 = v27;
    }
    v17 = v26 | v25;
  }
  v28 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v17, (const llvm::APInt *)&v134, (llvm *)5, 0, 1, 0);
  v99 = v29;
  v100 = v28;
  v30 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v134, (llvm *)5, 0, 1, 0);
  v103 = v31;
  v104 = v30;
  v32 = 9;
  v33 = v127;
  v109 = v130;
  v106 = a1;
  if (v130 == 3)
  {
    if (*(_BYTE *)(v127 + 326))
      v32 = 12;
    else
      v32 = 9;
    if (*(_BYTE *)(v127 + 326))
      v34 = 127;
    else
      v34 = 3;
    v96 = v34;
  }
  else
  {
    v96 = 3;
  }
  v35 = 0;
  v36 = v128;
  v94 = v128 >> v32;
  v37 = *(_BYTE *)(*v13 + 326);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v121 = 0;
  v122 = 0;
  v118 = 0;
  v119 = 0;
  LODWORD(v120) = 0;
  v123 = a3;
  v124 = v37;
  v125 = 0;
  v126 = 0;
  do
  {
    v38 = 2;
    v39 = 1024;
    do
    {
      if (v109 == 3 && *(_BYTE *)(v33 + 326))
      {
        v40 = v36 & 0xFFFFFFFFFFF80FFFLL;
        v41 = (4096 << v38);
      }
      else
      {
        v40 = v36 & 0xFFFFFFFFFFFFF9FFLL;
        v41 = v39 & 0xFFFFFE00;
      }
      v36 = v40 | v41;
      v43 = (uint64_t *)a2[1];
      v42 = a2[2];
      v44 = sub_1C4884088(v40 | v41);
      v137 = v43;
      v138 = v42;
      v46 = sub_1C4928314((uint64_t)v112, (uint64_t *)&v137, v44, v45, 6, 0, 5, 0, 6, 0, v35, a4);
      if (!v39)
        break;
      v39 -= 512;
      --v38;
    }
    while ((v46 & 1) == 0);
    if (v35++ > 1)
      v48 = 1;
    else
      v48 = v46;
  }
  while ((v48 & 1) == 0);
  if ((v46 & 1) != 0)
  {
    *a4 = 0;
  }
  else
  {
    v49 = v94 & v96;
    if (v109 == 3 && *(_BYTE *)(v33 + 326))
    {
      v50 = v36 & 0xFFFFFFFFFFF80FFFLL;
      v51 = 4096 << v49;
    }
    else
    {
      v50 = v36 & 0xFFFFFFFFFFFFF9FFLL;
      v51 = v49 << 9;
    }
    v36 = v50 | v51;
    v52 = (uint64_t *)a2[1];
    v53 = a2[2];
    v54 = sub_1C4884088(v50 | v51);
    v137 = v52;
    v138 = v53;
    sub_1C4928314((uint64_t)v112, (uint64_t *)&v137, v54, v55, 6, 0, 5, 0, 6, 0, 0, 0);
  }
  v128 = v36 | ((unint64_t)v112[2] << 11);
  v56 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v128, (const llvm::APInt *)&v134, (llvm *)6, 0, 1, 0);
  v58 = v57;
  v59 = v119;
  v60 = v120;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 288))(v101) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v101)(v101, 37, 0, 1, 2))
  {
    v61 = *(_QWORD *)(a3 + 16);
    v102 = sub_1C6366AB4(v61, 0, (const llvm::APInt *)&v134, (llvm *)5, 0, 1, 0);
    v97 = v62;
    v95 = sub_1C636E638(*(_QWORD *)(a3 + 16), 26, (const llvm::APInt *)&v134, (llvm *)5, 0, (uint64_t)v59, v60);
    v64 = v63;
    v65 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v134, (llvm *)5, 0, 1, 0);
    v68 = sub_1C636E4A0(v61, 495, (uint64_t)&v134, (llvm *)5, 0, (uint64_t)v102, v97, v67, (uint64_t)v95, v64, (uint64_t)v65, v66);
    v59 = sub_1C636E714(*(_QWORD *)(a3 + 16), 26, (const llvm::APInt *)&v134, (llvm *)6, 0, (uint64_t)v59, v60, v69, (uint64_t)v68, 0);
    v60 = v60 & 0xFFFFFFFF00000000 | v70;
  }
  v137 = v139;
  v139[0] = v56;
  v139[1] = v58;
  v139[2] = v100;
  v139[3] = v99;
  v139[4] = v59;
  v139[5] = v60;
  v138 = 0x800000003;
  v71 = sub_1C4917F9C((uint64_t)v112);
  v73 = v72;
  v74 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v138 + 1, 16);
    v74 = v138;
  }
  v75 = &v137[2 * v74];
  *v75 = (uint64_t)v71;
  v75[1] = v73;
  v76 = (v138 + 1);
  LODWORD(v138) = v76;
  if (v76 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v76 + 1, 16);
    LODWORD(v76) = v138;
  }
  v77 = &v137[2 * v76];
  *v77 = (uint64_t)v104;
  v77[1] = v103;
  v78 = (v138 + 1);
  LODWORD(v138) = v78;
  if (v78 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, (uint64_t)v139, v78 + 1, 16);
    LODWORD(v78) = v138;
  }
  *(_OWORD *)&v137[2 * v78] = v105;
  LODWORD(v138) = v138 + 1;
  v79 = v138;
  v80 = sub_1C4883EEC((uint64_t)&v127, v109, 1, v112[1]);
  v81 = *(_QWORD *)(a3 + 16);
  v82 = v137;
  v83 = sub_1C636A8B4(v81, v132, v133, 1, 0);
  v85 = sub_1C5D61678(v81, v80, (uint64_t)&v134, v83, v84, v82, v79);
  if (v107 == 65)
  {
    v87 = (v36 >> 54);
    if ((v36 & 0x2000000000000000) != 0)
      v87 = 0;
    sub_1C4990688((v87 | ((v36 & 0x2000000000000000) >> 29)) ^ 0x100000000, v36 >> 4, v36 & 0xF);
    v86 = v88;
    goto LABEL_79;
  }
  if (v107 == 2)
  {
    v86 = v98;
    *(_WORD *)(v98 + 32) |= 0x20u;
LABEL_79:
    v89 = v106;
    goto LABEL_81;
  }
  v89 = v106;
  v86 = v98;
LABEL_81:
  v90 = *(void **)(a3 + 16);
  v136 = v86;
  sub_1C636E10C(v90, (uint64_t)v85, &v136, 1);
  if (v131)
    v91 = 0;
  else
    v91 = *((_DWORD *)a2 + 22);
  v110 = v134;
  if (v134)
    llvm::MetadataTracking::track((uint64_t)&v110, v134, 2);
  v111 = v135;
  v92 = sub_1C4916734(v89, v91, (const llvm::APInt *)&v110, (uint64_t)v85, (uint64_t)&v127, a3);
  if (v110)
    llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
  if (v137 != v139)
    free(v137);
  if (v113)
    llvm::MetadataTracking::untrack((uint64_t)&v113, v113);
  if (v134)
    llvm::MetadataTracking::untrack((uint64_t)&v134, v134);
  return v92;
}

_QWORD *sub_1C4917F9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;

  if (!*(_BYTE *)(a1 + 1))
    return *(_QWORD **)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  v6 = *(_QWORD *)(v4 + 80);
  v7 = (uint64_t *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (uint64_t *)*v7;
  v8 = *v7;
  v9 = *(unsigned __int8 **)(v4 + 64);
  v10 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v10, v9, 2);
  v11 = *(_DWORD *)(v4 + 60);
  v2 = sub_1C6366AB4(v5, v8, (const llvm::APInt *)&v10, *(llvm **)(a1 + 48), *(_QWORD *)(a1 + 56), 1, 0);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return v2;
}

uint64_t *sub_1C491805C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t *v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  int v58;
  uint64_t *v59;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  _BYTE v71[8];
  unsigned __int8 *v72;
  int v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char v83;
  char v84;
  int v85;
  _QWORD v86[2];
  unint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD v99[18];

  v99[16] = *MEMORY[0x1E0C80C00];
  v11 = *(uint64_t **)(*a2 + 32);
  v64 = *v11;
  v65 = *(_QWORD *)(*a2 + 96);
  v63 = v11[1];
  v12 = sub_1C49184EC(a2[1], a2[2], *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  v15 = v14;
  v16 = *a2;
  v17 = *(unsigned __int8 **)(*a2 + 64);
  v94 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v94, v17, 2);
  v95 = *(_DWORD *)(v16 + 60);
  v18 = (unsigned __int8 *)v12[8];
  v92 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v92, v18, 2);
  v93 = *((_DWORD *)v12 + 15);
  v19 = a1 + 184296;
  v20 = *(_QWORD *)(a1 + 184296);
  if (*(_BYTE *)(v20 + 405))
    v21 = 5;
  else
    v21 = 4;
  sub_1C4915A14((uint64_t)v86, *(char **)(*(_QWORD *)(a3 + 16) + 56), a2, v20, v13);
  v22 = v88;
  v23 = 9;
  v24 = v86[0];
  v66 = a2;
  v67 = a1;
  if (v88 == 3)
  {
    if (*(_BYTE *)(v86[0] + 326))
      v23 = 12;
    else
      v23 = 9;
    if (*(_BYTE *)(v86[0] + 326))
      v25 = 127;
    else
      v25 = 3;
    v62 = v25;
  }
  else
  {
    v62 = 3;
  }
  v26 = 0;
  v27 = v87;
  v61 = v87 >> v23;
  v28 = *(_QWORD *)v19;
  if (*(_BYTE *)(*(_QWORD *)v19 + 407))
    v29 = 2 * *(unsigned __int8 *)(*(_QWORD *)v19 + 406);
  else
    v29 = (2 * *(unsigned __int8 *)(*(_QWORD *)v19 + 406)) | 0x10000;
  v30 = *(_BYTE *)(v28 + 326);
  v31 = *(_BYTE *)(v28 + 405);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v80 = 0;
  v81 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v68 = a3;
  v82 = a3;
  v83 = v30;
  v84 = v31;
  v85 = v29;
  do
  {
    v32 = 2;
    v33 = 1024;
    do
    {
      if (v22 == 3 && *(_BYTE *)(v24 + 326))
      {
        v34 = v27 & 0xFFFFFFFFFFF80FFFLL;
        v35 = (4096 << v32);
      }
      else
      {
        v34 = v27 & 0xFFFFFFFFFFFFF9FFLL;
        v35 = v33 & 0xFFFFFE00;
      }
      v27 = v34 | v35;
      v36 = sub_1C4884088(v34 | v35);
      v97 = v12;
      v98 = v15;
      v38 = sub_1C4928314((uint64_t)v71, (uint64_t *)&v97, v36, v37, v21, 0, 4, 0, 4, 0, v26, 0);
      if (!v33)
        break;
      v33 -= 512;
      --v32;
    }
    while ((v38 & 1) == 0);
    if (v26++ > 1)
      v40 = 1;
    else
      v40 = v38;
  }
  while ((v40 & 1) == 0);
  if ((v38 & 1) != 0)
  {
    v41 = v68;
  }
  else
  {
    v42 = v61 & v62;
    if (v22 == 3 && *(_BYTE *)(v24 + 326))
    {
      v43 = v27 & 0xFFFFFFFFFFF80FFFLL;
      v44 = 4096 << v42;
    }
    else
    {
      v43 = v27 & 0xFFFFFFFFFFFFF9FFLL;
      v44 = v42 << 9;
    }
    v41 = v68;
    v27 = v43 | v44;
    v45 = sub_1C4884088(v43 | v44);
    v97 = v12;
    v98 = v15;
    sub_1C4928314((uint64_t)v71, (uint64_t *)&v97, v45, v46, v21, 0, 4, 0, 4, 0, 0, 0);
  }
  v87 = v27 | ((unint64_t)v71[2] << 11);
  v47 = sub_1C6366AB4(*(_QWORD *)(v41 + 16), v87, (const llvm::APInt *)&v94, (llvm *)6, 0, 1, 0);
  v97 = v99;
  v98 = 0x800000000;
  sub_1C491905C(*(_QWORD *)(v41 + 16), (const llvm::APInt *)&v94, *(unsigned __int8 *)(*(_QWORD *)(a1 + 184296) + 326), (uint64_t)v71, (uint64_t)v47, v48, v21, v49, v64, v63, (uint64_t)&v97);
  v50 = sub_1C4883EEC((uint64_t)v86, v22, v71[0] == 0, v71[1]);
  v51 = *(_QWORD *)(v41 + 16);
  v52 = v97;
  v53 = v98;
  v54 = sub_1C636A8B4(v51, v90, v91, 1, 0);
  v56 = sub_1C5D61678(v51, v50, (uint64_t)&v94, v54, v55, v52, v53);
  v57 = *(void **)(v41 + 16);
  v96 = v65;
  sub_1C636E10C(v57, (uint64_t)v56, &v96, 1);
  if (v89)
    v58 = 0;
  else
    v58 = *((_DWORD *)v66 + 22);
  v69 = v94;
  if (v94)
    llvm::MetadataTracking::track((uint64_t)&v69, v94, 2);
  v70 = v95;
  v59 = sub_1C4916734(v67, v58, (const llvm::APInt *)&v69, (uint64_t)v56, (uint64_t)v86, v41);
  if (v69)
    llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
  if (v97 != v99)
    free(v97);
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  if (v92)
    llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
  if (v94)
    llvm::MetadataTracking::untrack((uint64_t)&v94, v94);
  return v59;
}

uint64_t *sub_1C49184EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t ExtendedSizeInBits;
  const char *v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int16 *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v61;
  _QWORD *v62;
  uint64_t i;
  char *v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  size_t v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t j;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  const char *v97;
  unsigned int v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  __int16 v102;
  unsigned int v103;
  uint64_t v104;
  llvm *v105;
  uint64_t v106;
  __int16 v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  llvm *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  llvm *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t *v125;
  unsigned int v126;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  unsigned __int8 *v139;
  int v140;
  void *v141;
  unsigned int v142;
  void *v143;
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  __int128 v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  _DWORD v155[4];
  uint64_t v156;

  v10 = (uint64_t *)a1;
  v156 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 **)(a1 + 64);
  v139 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v139, v11, 2);
  v133 = 0;
  v136 = 0;
  v137 = 0;
  v140 = *((_DWORD *)v10 + 15);
  v12 = *(_QWORD *)(a3 + 40);
  if (*(_BYTE *)(*(_QWORD *)(v12 + 16) + 405))
    v13 = 32;
  else
    v13 = 16;
  if (*(_BYTE *)(*(_QWORD *)(v12 + 16) + 405))
    v14 = 5;
  else
    v14 = 4;
  v131 = *(_QWORD *)(v12 + 344);
  v132 = v10;
  v138 = v14;
  v15 = a2;
LABEL_10:
  v134 = v135 & 0xFFFFFFFF00000000;
  v16 = 1;
  while (1)
  {
    while (1)
    {
      v17 = *((unsigned __int16 *)v10 + 12);
      if ((v17 - 198) <= 2)
      {
        while (1)
        {
          v149 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v10[4] + 40) + 16 * *(unsigned int *)(v10[4] + 8));
          if ((_BYTE)v149)
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v149);
          else
            ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v149);
          v20 = ExtendedSizeInBits;
          if ((_DWORD)v19 == 1)
          if (v20 < v13)
            break;
          v21 = (unsigned int *)v10[4];
          v10 = *(uint64_t **)v21;
          v15 = v15 & 0xFFFFFFFF00000000 | v21[2];
          v17 = *(unsigned __int16 *)(*(_QWORD *)v21 + 24);
          if ((v17 - 198) >= 3)
            goto LABEL_21;
        }
        v17 = *((unsigned __int16 *)v10 + 12);
      }
LABEL_21:
      if (v17 != 56)
        break;
      v22 = v10[4];
      v23 = *(unsigned __int16 *)(*(_QWORD *)v22 + 24);
      v24 = v23 > 0x26;
      v25 = (1 << v23) & 0x6000006000;
      if (v24 || v25 == 0)
      {
        v27 = (unsigned __int16 *)(v10 + 3);
LABEL_28:
        v28 = 0;
        v29 = 1;
        while (1)
        {
          v30 = v29;
          v31 = *(_QWORD *)(v22 + 40 * v28);
          v32 = *(unsigned __int16 *)(v31 + 24);
          if (v32 == 35 || v32 == 11)
            break;
          v29 = 0;
          v28 = 1;
          if ((v30 & 1) == 0)
            goto LABEL_36;
        }
        v45 = *(_QWORD *)(v31 + 80);
        v46 = *(_DWORD *)(v45 + 32);
        if (v46 > 0x40)
          v47 = **(_QWORD **)(v45 + 24);
        else
          v47 = (uint64_t)(*(_QWORD *)(v45 + 24) << -(char)v46) >> -(char)v46;
        v50 = v22 + 40 * (v28 ^ 1);
        v10 = *(uint64_t **)v50;
        v51 = *(unsigned int *)(v50 + 8);
        v52 = v15 & 0xFFFFFFFF00000000;
LABEL_55:
        v15 = v52 | v51;
        v137 += v47 * v16;
      }
      else
      {
        v137 += v16
              * (unsigned __int16)sub_1C5EAB3E0(*(llvm::GlobalValue **)(*(_QWORD *)v22 + 80), *(_QWORD *)(*(_QWORD *)v22 + 88), v131, 0);
        v56 = v10[4];
        v10 = *(uint64_t **)(v56 + 40);
        v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v56 + 48);
        v135 = v134;
      }
    }
    v27 = (unsigned __int16 *)(v10 + 3);
    if (v17 != 172)
      goto LABEL_36;
    for (i = 0; i != 64; i += 32)
    {
      v64 = (char *)&v149 + i;
      *((_DWORD *)v64 + 2) = 1;
      *(_QWORD *)v64 = 0;
      *((_DWORD *)v64 + 6) = 1;
      *((_QWORD *)v64 + 2) = 0;
    }
    sub_1C6368768(a3, *(_QWORD *)v10[4], *(_QWORD *)(v10[4] + 8), 0, (uint64_t)&v145);
    if (DWORD2(v149) >= 0x41 && (_QWORD)v149)
      MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
    *(_QWORD *)&v149 = v145;
    DWORD2(v149) = v146;
    v146 = 0;
    if (v151 >= 0x41 && v150)
    {
      MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
      v150 = v147;
      v151 = v148;
      v148 = 0;
      if (v146 >= 0x41 && v145)
        MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
    }
    else
    {
      v150 = v147;
      v151 = v148;
    }
    sub_1C6368768(a3, *(_QWORD *)(v10[4] + 40), *(_QWORD *)(v10[4] + 48), 0, (uint64_t)&v145);
    if (v153 >= 0x41 && v152)
      MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
    v152 = v145;
    v153 = v146;
    v146 = 0;
    if (v155[0] >= 0x41u && v154)
    {
      MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
      v154 = v147;
      v155[0] = v148;
      v148 = 0;
      if (v146 >= 0x41 && v145)
        MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
    }
    else
    {
      v154 = v147;
      v155[0] = v148;
    }
    v65 = DWORD2(v149);
    v144 = DWORD2(v149);
    if (DWORD2(v149) > 0x40)
    {
      v74 = (((unint64_t)DWORD2(v149) + 63) >> 3) & 0x3FFFFFF8;
      v143 = (void *)operator new[]();
      memcpy(v143, (const void *)v149, v74);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v143);
      v65 = v144;
      v67 = (unint64_t)v143;
    }
    else
    {
      v66 = DWORD2(v149) ? 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v149) : 0;
      v67 = v66 & ~(_QWORD)v149;
      v143 = (void *)v67;
    }
    v144 = 0;
    v142 = v153;
    if (v153 > 0x40)
    {
      v128 = (char *)v67;
      v129 = v65;
      v77 = (((unint64_t)v153 + 63) >> 3) & 0x3FFFFFF8;
      v141 = (void *)operator new[]();
      memcpy(v141, (const void *)v152, v77);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v141);
      v78 = v142;
      v76 = (unint64_t)v141;
      v142 = 0;
      if (v78 >= 0x41)
      {
        v80 = 0;
        v81 = (unint64_t)(v78 + 63) >> 6;
        v67 = (unint64_t)v128;
        do
        {
          *(_QWORD *)(v76 + v80) &= *(_QWORD *)&v128[v80];
          v80 += 8;
        }
        while (8 * v81 != v80);
        v82 = 0;
        do
        {
          v24 = v81-- < 1;
          if (v24)
            break;
          v83 = *(_QWORD *)(v76 + 8 * v81);
          v82 += __clz(v83);
        }
        while (!v83);
        v79 = 0;
        v84 = v78 | 0xFFFFFFC0;
        if ((v78 & 0x3F) == 0)
          v84 = 0;
        if ((v78 - v82 - v84) <= 0x40)
          v79 = *(_QWORD *)v76 == 0;
        if (v76)
        {
          v126 = v79;
          MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
          v79 = v126;
        }
        v65 = v129;
        goto LABEL_108;
      }
      v67 = (unint64_t)v128;
      v65 = v129;
    }
    else
    {
      v75 = v153 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v153 : 0;
      v76 = v75 & ~v152;
      v141 = (void *)v76;
      v142 = 0;
    }
    v79 = (v76 & v67) == 0;
LABEL_108:
    v130 = a3;
    if (v65 >= 0x41 && v67)
    {
      v85 = v79;
      MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
      v79 = v85;
    }
    for (j = 0; j != -16; j -= 8)
    {
      v87 = (char *)&v149 + j * 4;
      if (v155[j] >= 0x41u)
      {
        v88 = *((_QWORD *)v87 + 6);
        if (v88)
        {
          v127 = v79;
          MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
          v79 = v127;
        }
      }
      if (*((_DWORD *)v87 + 10) >= 0x41u)
      {
        v89 = *((_QWORD *)v87 + 4);
        if (v89)
        {
          v90 = v79;
          MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
          v79 = v90;
        }
      }
    }
    if ((_DWORD)v79)
    {
      v22 = v10[4];
      a3 = v130;
      goto LABEL_28;
    }
    a3 = v130;
LABEL_36:
    v34 = *v27;
    if (v34 == 56)
    {
      v35 = 0;
      v36 = v10[4];
      v37 = 1;
      do
      {
        v38 = v37;
        v39 = (unsigned int *)(v36 + 40 * v35);
        v40 = *(_QWORD *)v39;
        if (*(_WORD *)(*(_QWORD *)v39 + 24) == 56)
        {
          v41 = *(uint64_t **)(v40 + 32);
          v42 = v41[5];
          v43 = *(unsigned __int16 *)(v42 + 24);
          if (v43 == 35 || v43 == 11)
          {
            v48 = *(_QWORD *)(v42 + 80);
            v49 = *(_DWORD *)(v48 + 32);
            if (v49 > 0x40)
              v47 = **(_QWORD **)(v48 + 24);
            else
              v47 = (uint64_t)(*(_QWORD *)(v48 + 24) << -(char)v49) >> -(char)v49;
            v53 = *(_QWORD *)(a3 + 832);
            if (v53)
              LOWORD(v53) = *(_WORD *)(v53 + 8);
            v54 = *(_QWORD *)(v40 + 40) + 16 * v39[2];
            v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v139, *(llvm **)v54, *(_QWORD *)(v54 + 8), *v41, v41[1], a8, *(_QWORD *)(v36 + 40 * (v35 ^ 1)), *(_QWORD *)(v36 + 40 * (v35 ^ 1) + 8), v53);
            v52 = v55;
            v51 = v15 & 0xFFFFFFFF00000000;
            goto LABEL_55;
          }
        }
        v37 = 0;
        v35 = 1;
      }
      while ((v38 & 1) != 0);
      if (v136 || v16 != 1)
        goto LABEL_151;
      v91 = v10[6];
      if (!v91)
        goto LABEL_150;
      v92 = 1;
      do
      {
        if (*(_DWORD *)(v91 + 8) == (_DWORD)v15)
        {
          if (!v92)
            goto LABEL_150;
          --v92;
        }
        v91 = *(_QWORD *)(v91 + 32);
      }
      while (v91);
      if (v92)
      {
LABEL_150:
        v136 = 0;
        v16 = 1;
        goto LABEL_151;
      }
      v93 = (_QWORD *)v10[4];
      v10 = (uint64_t *)*v93;
      if (*(_WORD *)(*v93 + 24) == 175)
      {
        v136 = v93[5];
        v94 = (unsigned int *)(v93 + 6);
        v95 = (unsigned int *)(v93 + 1);
      }
      else
      {
        v94 = (unsigned int *)(v93 + 1);
        v136 = *v93;
        v10 = (uint64_t *)v93[5];
        v95 = (unsigned int *)(v93 + 6);
      }
      v15 = v15 & 0xFFFFFFFF00000000 | *v95;
      v133 = *v94;
      goto LABEL_10;
    }
    if (v34 == 58)
      break;
    if (v34 != 175)
      goto LABEL_151;
    v57 = v10[4];
    v58 = *(_QWORD *)(v57 + 40);
    v59 = *(unsigned __int16 *)(v58 + 24);
    if (v59 != 35 && v59 != 11)
      goto LABEL_151;
    v61 = *(_QWORD *)(v58 + 80);
    v62 = (_QWORD *)(v61 + 24);
    if (*(_DWORD *)(v61 + 32) >= 0x41u)
      v62 = (_QWORD *)*v62;
    v16 <<= *v62;
LABEL_95:
    v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v57 + 8);
    v10 = *(uint64_t **)v57;
  }
  v57 = v10[4];
  v68 = *(_QWORD *)(v57 + 40);
  v69 = *(unsigned __int16 *)(v68 + 24);
  if (v69 == 35 || v69 == 11)
  {
    v71 = *(_QWORD *)(v68 + 80);
    v72 = *(_DWORD *)(v71 + 32);
    if (v72 > 0x40)
      v73 = **(_QWORD **)(v71 + 24);
    else
      v73 = (uint64_t)(*(_QWORD *)(v71 + 24) << -(char)v72) >> -(char)v72;
    v16 *= v73;
    goto LABEL_95;
  }
LABEL_151:
  v96 = v137;
  if (v137 < 0x8000 && (v16 & 0x8000000000000000) == 0)
  {
    v98 = sub_1C47A8C74(&v138);
    if ((_DWORD)v97 == 1)
    DWORD2(v149) = v98;
    if (v98 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v149, -1, 1);
      if (DWORD2(v149) >= 0x41)
        v125 = (unint64_t *)v149;
      else
        v125 = (unint64_t *)&v149;
      v99 = *v125;
      if (DWORD2(v149) >= 0x41 && (_QWORD)v149)
        MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      v96 = v137;
    }
    else if (v98)
    {
      v99 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v98;
    }
    else
    {
      v99 = 0;
    }
    v100 = (unsigned __int8 *)(v10[5] + 16 * v15);
    if (v138 != *v100 || !v138 && *((_QWORD *)v100 + 1))
    {
      v101 = *(_QWORD *)(a3 + 832);
      if (v101)
        v102 = *(_WORD *)(v101 + 8);
      else
        v102 = 0;
      v10 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v139, (llvm *)v138, 0, (uint64_t)v10, v15, v102);
      v15 = v15 & 0xFFFFFFFF00000000 | v103;
    }
    v104 = v99 & v96;
    if ((v99 & v16) >= 2)
    {
      v113 = (llvm *)v138;
      v114 = sub_1C6366AB4(a3, v99 & v16, (const llvm::APInt *)&v139, (llvm *)v138, 0, 0, 0);
      v117 = *(_QWORD *)(a3 + 832);
      if (v117)
        LOWORD(v117) = *(_WORD *)(v117 + 8);
      v10 = sub_1C5D56C70(a3, 58, (const llvm::APInt *)&v139, v113, 0, (uint64_t)v10, v15, v116, (uint64_t)v114, v115, v117);
      v15 = v15 & 0xFFFFFFFF00000000 | v118;
    }
    if (v104 >= 1)
    {
      v119 = (llvm *)v138;
      v120 = sub_1C6366AB4(a3, v104, (const llvm::APInt *)&v139, (llvm *)v138, 0, 0, 0);
      v123 = *(_QWORD *)(a3 + 832);
      if (v123)
        LOWORD(v123) = *(_WORD *)(v123 + 8);
      v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v139, v119, 0, (uint64_t)v10, v15, v122, (uint64_t)v120, v121, v123);
      v15 = v15 & 0xFFFFFFFF00000000 | v124;
    }
    if (v136)
    {
      v105 = (llvm *)v138;
      v106 = *(_QWORD *)(a3 + 832);
      if (v106)
        v107 = *(_WORD *)(v106 + 8);
      else
        v107 = 0;
      v109 = sub_1C5D52060(a3, 201, (const llvm::APInt *)&v139, (llvm *)v138, 0, v136, v133, v107);
      v111 = *(_QWORD *)(a3 + 832);
      if (v111)
        LOWORD(v111) = *(_WORD *)(v111 + 8);
      v10 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v139, v105, 0, (uint64_t)v109, v108, v110, (uint64_t)v10, v15, v111);
    }
    v132 = v10;
  }
  if (v139)
    llvm::MetadataTracking::untrack((uint64_t)&v139, v139);
  return v132;
}

void *sub_1C491905C(uint64_t a1, const llvm::APInt *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  __int16 v24;
  unsigned int v25;
  uint64_t **v26;
  void *result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  __int16 v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  uint64_t **v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;

  v16 = a7;
  if (a3)
  {
    v36 = sub_1C6366AB4(a1, 0, a2, (llvm *)5, 0, 1, 0);
    v38 = *(unsigned int *)(a11 + 8);
    v18 = (unsigned int *)(a11 + 8);
    if (v38 >= *(_DWORD *)(a11 + 12))
    {
      v66 = v37;
      v67 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v38 + 1, 16);
      v37 = v66;
      v36 = v67;
      LODWORD(v38) = *(_DWORD *)(a11 + 8);
    }
    v39 = (_QWORD *)(*(_QWORD *)a11 + 16 * v38);
    *v39 = v36;
    v39[1] = v37;
    v40 = *(_DWORD *)(a11 + 12);
    v41 = (*(_DWORD *)(a11 + 8) + 1);
    *(_DWORD *)(a11 + 8) = v41;
    if (v41 >= v40)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v41 + 1, 16);
      LODWORD(v41) = *(_DWORD *)(a11 + 8);
    }
    v42 = (_QWORD *)(*(_QWORD *)a11 + 16 * v41);
    *v42 = a5;
    v42[1] = a6;
    v43 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v43;
    if (!*(_BYTE *)a4)
    {
      v51 = *(uint64_t **)(a4 + 64);
      v50 = *(_QWORD *)(a4 + 72);
      if (v16 == 5)
      {
        v52 = *(_QWORD *)(a1 + 832);
        if (v52)
          v53 = *(_WORD *)(v52 + 8);
        else
          v53 = 0;
        v51 = sub_1C5D52060(a1, 201, a2, (llvm *)4, 0, *(_QWORD *)(a4 + 64), *(_QWORD *)(a4 + 72), v53);
        v50 = v50 & 0xFFFFFFFF00000000 | v59;
        v43 = *v18;
      }
      if (v43 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v43 + 1, 16);
        v43 = *(_DWORD *)(a11 + 8);
      }
      v60 = (uint64_t **)(*(_QWORD *)a11 + 16 * v43);
      *v60 = v51;
      v60[1] = (uint64_t *)v50;
      ++*(_DWORD *)(a11 + 8);
      v61 = sub_1C6366AB4(a1, 0, a2, (llvm *)5, 0, 1, 0);
      v63 = v62;
      v64 = *(unsigned int *)(a11 + 8);
      if (v64 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v64 + 1, 16);
        LODWORD(v64) = *(_DWORD *)(a11 + 8);
      }
      v65 = (_QWORD *)(*(_QWORD *)a11 + 16 * v64);
      *v65 = v61;
      v65[1] = v63;
      ++*(_DWORD *)(a11 + 8);
    }
    result = sub_1C4917F9C(a4);
    v44 = result;
    v46 = v45;
    v47 = *(unsigned int *)(a11 + 8);
    if (v47 >= *(_DWORD *)(a11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v47 + 1, 16);
      LODWORD(v47) = *(_DWORD *)(a11 + 8);
    }
    v48 = (_QWORD *)(*(_QWORD *)a11 + 16 * v47);
    *v48 = v44;
    v48[1] = v46;
    v49 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v49;
    if (!*(_BYTE *)(a4 + 1))
    {
      result = sub_1C6366AB4(a1, 0, a2, (llvm *)5, 0, 1, 0);
      v54 = result;
      v56 = v55;
      v57 = *(unsigned int *)(a11 + 8);
      if (v57 >= *(_DWORD *)(a11 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v57 + 1, 16);
        LODWORD(v57) = *(_DWORD *)(a11 + 8);
      }
      v58 = (_QWORD *)(*(_QWORD *)a11 + 16 * v57);
      *v58 = v54;
      v58[1] = v56;
      v49 = *(_DWORD *)(a11 + 8) + 1;
      *(_DWORD *)(a11 + 8) = v49;
    }
    if (v49 >= *(_DWORD *)(a11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v49 + 1, 16);
      v49 = *(_DWORD *)(a11 + 8);
    }
    v35 = (_QWORD *)(*(_QWORD *)a11 + 16 * v49);
  }
  else
  {
    v17 = *(unsigned int *)(a11 + 8);
    v18 = (unsigned int *)(a11 + 8);
    if (v17 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v17 + 1, 16);
      LODWORD(v17) = *(_DWORD *)(a11 + 8);
    }
    v19 = (_QWORD *)(*(_QWORD *)a11 + 16 * v17);
    *v19 = a5;
    v19[1] = a6;
    v20 = *(_DWORD *)(a11 + 8) + 1;
    *(_DWORD *)(a11 + 8) = v20;
    if (!*(_BYTE *)a4)
    {
      v22 = *(uint64_t **)(a4 + 64);
      v21 = *(_QWORD *)(a4 + 72);
      if (v16 == 5)
      {
        v23 = *(_QWORD *)(a1 + 832);
        if (v23)
          v24 = *(_WORD *)(v23 + 8);
        else
          v24 = 0;
        v22 = sub_1C5D52060(a1, 201, a2, (llvm *)4, 0, *(_QWORD *)(a4 + 64), *(_QWORD *)(a4 + 72), v24);
        v21 = v21 & 0xFFFFFFFF00000000 | v25;
        v20 = *v18;
      }
      if (v20 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v20 + 1, 16);
        v20 = *(_DWORD *)(a11 + 8);
      }
      v26 = (uint64_t **)(*(_QWORD *)a11 + 16 * v20);
      *v26 = v22;
      v26[1] = (uint64_t *)v21;
      ++*(_DWORD *)(a11 + 8);
    }
    result = sub_1C4917F9C(a4);
    v28 = result;
    v30 = v29;
    v31 = *(unsigned int *)(a11 + 8);
    if (v31 >= *(_DWORD *)(a11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v31 + 1, 16);
      LODWORD(v31) = *(_DWORD *)(a11 + 8);
    }
    v32 = (_QWORD *)(*(_QWORD *)a11 + 16 * v31);
    *v32 = v28;
    v32[1] = v30;
    v33 = *(_DWORD *)(a11 + 12);
    v34 = (*(_DWORD *)(a11 + 8) + 1);
    *(_DWORD *)(a11 + 8) = v34;
    if (v34 >= v33)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a11, a11 + 16, v34 + 1, 16);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
    v35 = (_QWORD *)(*(_QWORD *)a11 + 16 * v34);
  }
  *v35 = a9;
  v35[1] = a10;
  ++*v18;
  return result;
}

unsigned __int8 **sub_1C49194D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned __int8 **v66;
  uint64_t v68;
  llvm *v69;
  int v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  int v80;
  _QWORD v81[2];
  unint64_t v82;
  int v83;
  char v84;
  unsigned __int8 *v85;
  int v86;
  char *v87;
  uint64_t v88;
  _QWORD v89[18];

  v89[16] = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *(unsigned __int8 **)(*a2 + 64);
  v85 = v7;
  v8 = (_QWORD *)v6;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v85, v7, 2);
    v8 = (_QWORD *)*a2;
  }
  v86 = *(_DWORD *)(v6 + 60);
  v9 = v8[11];
  v74 = v8[12];
  v10 = (llvm *)v8[10];
  v71 = *(_OWORD *)v8[4];
  v12 = a2[3];
  v11 = a2[4];
  v14 = a2[1];
  v13 = a2[2];
  v87 = (char *)v89;
  v88 = 0x800000000;
  v15 = (uint64_t *)(a1 + 184296);
  sub_1C4915A14((uint64_t)v81, *(char **)(*(_QWORD *)(a3 + 16) + 56), a2, *v15, (int8x8_t)0x800000000);
  if (*((_BYTE *)a2 + 88) && !v84)
  {
    if ((_BYTE)v10)
    {
      if (v10 - 120 < 0x20
        || v10 - 2 < 6
        || v10 - 15 < 0x3C)
      {
LABEL_18:
        v26 = *(_QWORD *)(a3 + 16);
        v27 = *(_QWORD *)(v26 + 832);
        if (v27)
          v28 = *(_WORD *)(v27 + 8);
        else
          v28 = 0;
        v24 = sub_1C5D52060(v26, 201, (const llvm::APInt *)&v85, v10, v9, v12, v11, v28);
LABEL_22:
        v12 = (uint64_t)v24;
        v11 = v11 & 0xFFFFFFFF00000000 | v25;
        goto LABEL_23;
      }
    }
    else
    {
      if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
        v16 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
      else
        v16 = *(_DWORD *)(v9 + 8);
      if (v16 == 13)
        goto LABEL_18;
    }
    v18 = *(_QWORD *)(a3 + 16);
    v19 = sub_1C6366AB4(v18, 0, (const llvm::APInt *)&v85, (llvm *)5, 0, 0, 0);
    v22 = 0;
    v23 = *(_QWORD *)(v18 + 832);
    if (v23)
      v22 = *(_WORD *)(v23 + 8);
    v24 = sub_1C5D56C70(v18, 212, (const llvm::APInt *)&v85, v10, v9, v12, v11, v21, (uint64_t)v19, v20, v22);
    goto LABEL_22;
  }
  if (v84)
  {
    v17 = *(_QWORD *)(v12 + 32);
    v12 = *(_QWORD *)v17;
    v11 = v11 & 0xFFFFFFFF00000000 | *(unsigned int *)(v17 + 8);
  }
LABEL_23:
  v73 = v11;
  v70 = v83;
  if (v83 == 3 && *(_BYTE *)(v81[0] + 326))
    v29 = v82 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
  else
    v29 = v82 & 0xFFFFFFFFFFFFF9FFLL;
  v82 = v29;
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(unsigned __int8 **)(v14 + 64);
  v79 = v31;
  if (v31)
    llvm::MetadataTracking::track((uint64_t)&v79, v31, 2);
  v80 = *(_DWORD *)(v14 + 60);
  v32 = *(_QWORD *)(v30 + 832);
  v72 = v12;
  if (v32)
    v33 = *(_WORD *)(v32 + 8);
  else
    v33 = 0;
  v34 = sub_1C5D52060(v30, 201, (const llvm::APInt *)&v79, (llvm *)5, 0, v14, v13, v33);
  v36 = v13 & 0xFFFFFFFF00000000 | v35;
  if (v79)
    llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
  if (!*(_BYTE *)(*v15 + 381))
  {
    v69 = v10;
    v37 = *(_QWORD *)(a3 + 16);
    v38 = (unsigned __int8 *)v34[8];
    v79 = v38;
    v68 = v9;
    if (v38)
    {
      llvm::MetadataTracking::track((uint64_t)&v79, v38, 2);
      v40 = *(_QWORD *)(a3 + 16);
      v39 = (unsigned __int8 *)v34[8];
    }
    else
    {
      v39 = 0;
      v40 = v37;
    }
    v41 = *((_DWORD *)v34 + 15);
    v80 = v41;
    v42 = sub_1C4884088(v29);
    v77 = v39;
    if (v39)
    {
      llvm::MetadataTracking::track((uint64_t)&v77, v39, 2);
      v41 = *((_DWORD *)v34 + 15);
    }
    v78 = v41;
    v43 = sub_1C6366AB4(v40, v42, (const llvm::APInt *)&v77, (llvm *)5, 0, 0, 0);
    v46 = 0;
    v47 = *(_QWORD *)(v37 + 832);
    if (v47)
      v46 = *(_WORD *)(v47 + 8);
    v34 = sub_1C5D56C70(v37, 177, (const llvm::APInt *)&v79, (llvm *)5, 0, (uint64_t)v34, v36, v45, (uint64_t)v43, v44, v46);
    v49 = v48;
    v10 = v69;
    v9 = v68;
    if (v77)
      llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
    v36 = v49 | v13 & 0xFFFFFFFF00000000;
    if (v79)
      llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
  }
  v50 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v29, (const llvm::APInt *)&v85, (llvm *)6, 0, 1, 0);
  v52 = v51;
  v53 = v88;
  if (v88 >= HIDWORD(v88))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v88 + 1, 16);
    v53 = v88;
  }
  *(_OWORD *)&v87[16 * v53] = v71;
  v54 = (v88 + 1);
  LODWORD(v88) = v54;
  if (v54 >= HIDWORD(v88))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v54 + 1, 16);
    LODWORD(v54) = v88;
  }
  v55 = &v87[16 * v54];
  *(_QWORD *)v55 = v72;
  *((_QWORD *)v55 + 1) = v73;
  v56 = (v88 + 1);
  LODWORD(v88) = v56;
  if (v56 >= HIDWORD(v88))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v56 + 1, 16);
    LODWORD(v56) = v88;
  }
  v57 = (uint64_t **)&v87[16 * v56];
  *v57 = v34;
  v57[1] = (uint64_t *)v36;
  v58 = (v88 + 1);
  LODWORD(v88) = v58;
  if (v58 >= HIDWORD(v88))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v58 + 1, 16);
    LODWORD(v58) = v88;
  }
  v59 = &v87[16 * v58];
  *(_QWORD *)v59 = v50;
  *((_QWORD *)v59 + 1) = v52;
  LODWORD(v88) = v88 + 1;
  v60 = sub_1C636D7B0((llvm *)1, 0);
  v75 = v85;
  if (v85)
    llvm::MetadataTracking::track((uint64_t)&v75, v85, 2);
  v76 = v86;
  v61 = sub_1C4916D34((const llvm::APInt *)&v75, *((uint64_t **)v87 + 2), *((_QWORD *)v87 + 3), (uint64_t)v81, a3);
  v62 = (uint64_t *)v87;
  *((_QWORD *)v87 + 2) = v61;
  *((_DWORD *)v62 + 6) = v63;
  if (v75)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
    v62 = (uint64_t *)v87;
  }
  v64 = sub_1C4883EEC((uint64_t)v81, v70, 1, 0);
  v66 = sub_1C5D5C710(*(_QWORD *)(a3 + 16), v64, (uint64_t)&v85, v60, 1, v62, v88, v65, (uint64_t)v10, v9, v74);
  if (v87 != (char *)v89)
    free(v87);
  if (v85)
    llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
  return v66;
}

_QWORD *sub_1C4919AA8(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  int v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  unsigned int v100;
  _QWORD *v101;
  int v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  _BYTE v120[8];
  unsigned __int8 *v121;
  int v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  char v132;
  char v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  char v139;
  unsigned __int8 *v140;
  int v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  _QWORD v145[18];

  v145[16] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *(unsigned __int8 **)(*a2 + 64);
  v140 = v8;
  v9 = v7;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v140, v8, 2);
    v9 = *a2;
  }
  v141 = *(_DWORD *)(v7 + 60);
  v10 = *(_QWORD *)(v9 + 88);
  v11 = *(_DWORD *)(*(_QWORD *)(v9 + 96) + 16);
  v113 = *(_OWORD *)*(_QWORD *)(v9 + 32);
  v13 = a2[3];
  v12 = a2[4];
  v14 = *(llvm **)(v9 + 80);
  v15 = a1 + 184296;
  sub_1C4915A14((uint64_t)&v135, *(char **)(*(_QWORD *)(a3 + 16) + 56), a2, *(_QWORD *)(a1 + 184296), **(int8x8_t **)(v9 + 32));
  v16 = *(uint64_t **)(*(_QWORD *)(a3 + 16) + 40);
  v106 = v16[43];
  v17 = *(_BYTE **)(a1 + 184296);
  if (v17[318])
  {
    v18 = 4;
  }
  else if (v17[319])
  {
    v18 = 5;
  }
  else if (v17[320])
  {
    v18 = 6;
  }
  else if (v17[321])
  {
    v18 = 7;
  }
  else
  {
    v18 = 9;
  }
  v19 = *v16;
  if (v17[364])
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 648))(v106);
    v17 = *(_BYTE **)v15;
  }
  else
  {
    v20 = 1;
  }
  if (v11 == 1)
  {
    if (v18 != 5)
      v20 = 0;
    if (v17[372])
      LODWORD(v21) = 3;
    else
      LODWORD(v21) = v20;
  }
  else
  {
    LODWORD(v21) = 0;
  }
  v22 = v137;
  if (v137 == -1)
  {
    if (v17[371])
    {
      v21 = 0;
    }
    else
    {
      LODWORD(v143) = 0;
      if (sub_1C4979B6C((int)v17, v19, "MemoryWriteCacheCtl", (int *)&v143))
        v21 = v143;
      else
        v21 = v21;
      v17 = *(_BYTE **)v15;
    }
    LODWORD(v143) = 0;
    v23 = sub_1C4979B6C((int)v17, v19, "MemoryWriteL2Pers", (int *)&v143);
    v24 = 4 * (_DWORD)v143;
    if (!v23)
      v24 = 4;
    if (v21 == 3)
      v24 = 4;
    v22 = v24 | v21;
  }
  v25 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v22, (const llvm::APInt *)&v140, (llvm *)5, 0, 1, 0);
  v104 = v26;
  v105 = v25;
  v27 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v140, (llvm *)5, 0, 1, 0);
  v29 = v28;
  v109 = v27;
  v110 = sub_1C636D7B0((llvm *)1, 0);
  v108 = v29;
  if (*((_BYTE *)a2 + 88) && !v139)
  {
    if ((_BYTE)v14)
    {
      if (v14 - 120 < 0x20
        || v14 - 2 < 6
        || v14 - 15 < 0x3C)
      {
LABEL_48:
        v40 = *(_QWORD *)(a3 + 16);
        v41 = *(_QWORD *)(v40 + 832);
        if (v41)
          v42 = *(_WORD *)(v41 + 8);
        else
          v42 = 0;
        v38 = sub_1C5D52060(v40, 201, (const llvm::APInt *)&v140, v14, v10, v13, v12, v42);
LABEL_52:
        v13 = (uint64_t)v38;
        v12 = v12 & 0xFFFFFFFF00000000 | v39;
        goto LABEL_53;
      }
    }
    else
    {
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v30 = *(unsigned __int8 *)(**(_QWORD **)(v10 + 16) + 8);
      else
        v30 = *(_DWORD *)(v10 + 8);
      if (v30 == 13)
        goto LABEL_48;
    }
    v32 = *(_QWORD *)(a3 + 16);
    v33 = sub_1C6366AB4(v32, 0, (const llvm::APInt *)&v140, (llvm *)5, 0, 0, 0);
    v36 = 0;
    v37 = *(_QWORD *)(v32 + 832);
    if (v37)
      v36 = *(_WORD *)(v37 + 8);
    v38 = sub_1C5D56C70(v32, 212, (const llvm::APInt *)&v140, v14, v10, v13, v12, v35, (uint64_t)v33, v34, v36);
    goto LABEL_52;
  }
  if (v139)
  {
    v31 = *(_QWORD *)(v13 + 32);
    v13 = *(_QWORD *)v31;
    v12 = v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(v31 + 8);
  }
LABEL_53:
  v43 = v138;
  v44 = 9;
  v45 = v135;
  v114 = v11;
  v111 = v13;
  v112 = v12;
  if (v138 == 3)
  {
    if (*(_BYTE *)(v135 + 326))
      v44 = 12;
    else
      v44 = 9;
    if (*(_BYTE *)(v135 + 326))
      v46 = 127;
    else
      v46 = 3;
    v102 = v46;
  }
  else
  {
    v102 = 3;
  }
  v47 = 0;
  v48 = v136;
  v100 = v136 >> v44;
  v49 = *(_BYTE *)(*(_QWORD *)v15 + 326);
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v129 = 0;
  v130 = 0;
  v126 = 0;
  v127 = 0;
  LODWORD(v128) = 0;
  v115 = a3;
  v131 = a3;
  v132 = v49;
  v133 = 0;
  v134 = 0;
  do
  {
    v50 = 2;
    v51 = 1024;
    do
    {
      if (v43 == 3 && *(_BYTE *)(v45 + 326))
      {
        v52 = v48 & 0xFFFFFFFFFFF80FFFLL;
        v53 = (4096 << v50);
      }
      else
      {
        v52 = v48 & 0xFFFFFFFFFFFFF9FFLL;
        v53 = v51 & 0xFFFFFE00;
      }
      v48 = v52 | v53;
      v54 = (char *)a2[1];
      v55 = a2[2];
      v56 = sub_1C4884088(v52 | v53);
      v143 = v54;
      v144 = v55;
      v58 = sub_1C4928314((uint64_t)v120, (uint64_t *)&v143, v56, v57, 6, 0, 5, 0, 6, 0, v47, a4);
      if (!v51)
        break;
      v51 -= 512;
      --v50;
    }
    while ((v58 & 1) == 0);
    if (v47++ > 1)
      v60 = 1;
    else
      v60 = v58;
  }
  while ((v60 & 1) == 0);
  if ((v58 & 1) != 0)
  {
    v61 = v115;
    *a4 = 0;
  }
  else
  {
    v62 = v100 & v102;
    if (v43 == 3 && *(_BYTE *)(v45 + 326))
    {
      v63 = v48 & 0xFFFFFFFFFFF80FFFLL;
      v64 = 4096 << v62;
    }
    else
    {
      v63 = v48 & 0xFFFFFFFFFFFFF9FFLL;
      v64 = v62 << 9;
    }
    v61 = v115;
    v48 = v63 | v64;
    v65 = (char *)a2[1];
    v66 = a2[2];
    v67 = sub_1C4884088(v63 | v64);
    v143 = v65;
    v144 = v66;
    sub_1C4928314((uint64_t)v120, (uint64_t *)&v143, v67, v68, 6, 0, 5, 0, 6, 0, 0, 0);
  }
  v136 = v48 | ((unint64_t)v120[2] << 11);
  v69 = sub_1C6366AB4(*(_QWORD *)(v61 + 16), v136, (const llvm::APInt *)&v140, (llvm *)6, 0, 1, 0);
  v71 = v70;
  v72 = v127;
  v73 = v128;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 288))(v106) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v106)(v106, 37, 0, 1, 2))
  {
    v117 = *(_QWORD *)(v115 + 16);
    v107 = sub_1C6366AB4(v117, 0, (const llvm::APInt *)&v140, (llvm *)5, 0, 1, 0);
    v103 = v74;
    v101 = sub_1C636E638(*(_QWORD *)(v115 + 16), 26, (const llvm::APInt *)&v140, (llvm *)5, 0, (uint64_t)v72, v73);
    v76 = v75;
    v77 = sub_1C6366AB4(*(_QWORD *)(v115 + 16), 0, (const llvm::APInt *)&v140, (llvm *)5, 0, 1, 0);
    v80 = sub_1C636E4A0(v117, 495, (uint64_t)&v140, (llvm *)5, 0, (uint64_t)v107, v103, v79, (uint64_t)v101, v76, (uint64_t)v77, v78);
    v72 = sub_1C636E714(*(_QWORD *)(v115 + 16), 26, (const llvm::APInt *)&v140, (llvm *)6, 0, (uint64_t)v72, v73, v81, (uint64_t)v80, 0);
    v73 = v73 & 0xFFFFFFFF00000000 | v82;
  }
  v143 = (char *)v145;
  v145[0] = v69;
  v145[1] = v71;
  v145[2] = v105;
  v145[3] = v104;
  v145[4] = v111;
  v145[5] = v112;
  v145[6] = v72;
  v145[7] = v73;
  v144 = 0x800000004;
  v83 = sub_1C4917F9C((uint64_t)v120);
  v85 = v84;
  v86 = v144;
  if (v144 >= HIDWORD(v144))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v144 + 1, 16);
    v86 = v144;
  }
  v87 = &v143[16 * v86];
  *(_QWORD *)v87 = v83;
  *((_QWORD *)v87 + 1) = v85;
  v88 = (v144 + 1);
  LODWORD(v144) = v88;
  if (v88 >= HIDWORD(v144))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v88 + 1, 16);
    LODWORD(v88) = v144;
  }
  v89 = &v143[16 * v88];
  *(_QWORD *)v89 = v109;
  *((_QWORD *)v89 + 1) = v108;
  v90 = (v144 + 1);
  LODWORD(v144) = v90;
  if (v90 >= HIDWORD(v144))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v90 + 1, 16);
    LODWORD(v90) = v144;
  }
  *(_OWORD *)&v143[16 * v90] = v113;
  LODWORD(v144) = v144 + 1;
  v118 = v140;
  if (v140)
    llvm::MetadataTracking::track((uint64_t)&v118, v140, 2);
  v119 = v141;
  v91 = sub_1C4916D34((const llvm::APInt *)&v118, *((uint64_t **)v143 + 4), *((_QWORD *)v143 + 5), (uint64_t)&v135, v115);
  v92 = (uint64_t *)v143;
  *((_QWORD *)v143 + 4) = v91;
  *((_DWORD *)v92 + 10) = v93;
  if (v118)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v118, v118);
    v92 = (uint64_t *)v143;
  }
  v94 = sub_1C4883EEC((uint64_t)&v135, v43, 1, v120[1]);
  v95 = sub_1C5D61678(*(_QWORD *)(v115 + 16), v94, (uint64_t)&v140, v110, 1, v92, v144);
  if (v114 == 65)
  {
    v96 = (v48 >> 54);
    if ((v48 & 0x2000000000000000) != 0)
      v96 = 0;
    sub_1C4990688((v96 | ((v48 & 0x2000000000000000) >> 29)) ^ 0x100000000, v48 >> 4, v48 & 0xF);
  }
  else
  {
    v97 = *(_QWORD *)(*a2 + 96);
  }
  v98 = *(void **)(v115 + 16);
  v142 = v97;
  sub_1C636E10C(v98, (uint64_t)v95, &v142, 1);
  if (v143 != (char *)v145)
    free(v143);
  if (v121)
    llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
  if (v140)
    llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
  return v95;
}

_QWORD *sub_1C491A380(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t **v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  unsigned int v90;
  uint64_t **v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  unsigned int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  int v112;
  unsigned __int8 *v113;
  unsigned __int8 **v114;
  unsigned int v115;
  uint64_t **v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  int v126;
  int v127;
  _QWORD *v128;
  void *v129;
  unsigned int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  unsigned __int8 *v143;
  int v144;
  unsigned __int8 *v145;
  int v146;
  char v147;
  unsigned __int8 v148;
  unsigned __int8 v149;
  unsigned __int8 *v150;
  int v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  char v161;
  char v162;
  int v163;
  _QWORD v164[2];
  unint64_t v165;
  int v166;
  char v167;
  unsigned __int8 *v168;
  int v169;
  unsigned __int8 *v170;
  int v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD v175[18];

  v175[16] = *MEMORY[0x1E0C80C00];
  v11 = *a2;
  v12 = *(unsigned __int8 **)(*a2 + 64);
  v170 = v12;
  v13 = v11;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v170, v12, 2);
    v13 = *a2;
  }
  v171 = *(_DWORD *)(v11 + 60);
  v14 = *(uint64_t **)(v13 + 32);
  v134 = *v14;
  v135 = v14[1];
  v15 = a2[4];
  v141 = a2[3];
  v16 = sub_1C49184EC(a2[1], a2[2], *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
  v18 = v17;
  v20 = *(llvm **)(*a2 + 80);
  v19 = *(_QWORD *)(*a2 + 88);
  v21 = (unsigned __int8 *)v16[8];
  v168 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v168, v21, 2);
  v169 = *((_DWORD *)v16 + 15);
  v22 = (uint64_t *)(a1 + 184296);
  v133 = *(unsigned __int8 *)(*v22 + 405);
  if (*(_BYTE *)(*v22 + 405))
    v23 = 5;
  else
    v23 = 4;
  v24 = sub_1C636D7B0((llvm *)1, 0);
  v140 = v22;
  sub_1C4915A14((uint64_t)v164, *(char **)(*(_QWORD *)(a3 + 16) + 56), a2, *v22, v25);
  v137 = v24;
  if (*((_BYTE *)a2 + 88) && !v167)
  {
    if ((_BYTE)v20)
    {
      if (v20 - 120 < 0x20
        || v20 - 2 < 6
        || v20 - 15 < 0x3C)
      {
LABEL_23:
        v36 = *(_QWORD *)(a3 + 16);
        v37 = *(_QWORD *)(v36 + 832);
        if (v37)
          v38 = *(_WORD *)(v37 + 8);
        else
          v38 = 0;
        v34 = sub_1C5D52060(v36, 201, (const llvm::APInt *)&v170, v20, v19, v141, v15, v38);
LABEL_27:
        v141 = (uint64_t)v34;
        v15 = v15 & 0xFFFFFFFF00000000 | v35;
        goto LABEL_28;
      }
    }
    else
    {
      if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
        v26 = *(unsigned __int8 *)(**(_QWORD **)(v19 + 16) + 8);
      else
        v26 = *(_DWORD *)(v19 + 8);
      if (v26 == 13)
        goto LABEL_23;
    }
    v28 = *(_QWORD *)(a3 + 16);
    v29 = sub_1C6366AB4(v28, 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    v32 = 0;
    v33 = *(_QWORD *)(v28 + 832);
    if (v33)
      v32 = *(_WORD *)(v33 + 8);
    v34 = sub_1C5D56C70(v28, 212, (const llvm::APInt *)&v170, v20, v19, v141, v15, v31, (uint64_t)v29, v30, v32);
    goto LABEL_27;
  }
  if (v167)
  {
    v27 = *(_QWORD *)(v141 + 32);
    v141 = *(_QWORD *)v27;
    v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 8);
  }
LABEL_28:
  v39 = 9;
  v40 = v164[0];
  v142 = v166;
  v139 = a2;
  v136 = v15;
  if (v166 == 3)
  {
    if (*(_BYTE *)(v164[0] + 326))
      v39 = 12;
    else
      v39 = 9;
    if (*(_BYTE *)(v164[0] + 326))
      v41 = 127;
    else
      v41 = 3;
    v132 = v41;
  }
  else
  {
    v132 = 3;
  }
  v42 = 0;
  v43 = v165;
  v131 = v165 >> v39;
  v44 = *v140;
  if (*(_BYTE *)(*v140 + 407))
    v45 = 2 * *(unsigned __int8 *)(*v140 + 406);
  else
    v45 = (2 * *(unsigned __int8 *)(*v140 + 406)) | 0x10000;
  v46 = *(_BYTE *)(v44 + 326);
  v47 = *(_BYTE *)(v44 + 405);
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v158 = 0;
  v159 = 0;
  v155 = 0;
  v156 = 0;
  LODWORD(v157) = 0;
  v138 = a3;
  v160 = a3;
  v161 = v46;
  v162 = v47;
  v163 = v45;
  do
  {
    v48 = 2;
    v49 = 1024;
    do
    {
      if (v142 == 3 && *(_BYTE *)(v40 + 326))
      {
        v50 = v43 & 0xFFFFFFFFFFF80FFFLL;
        v51 = (4096 << v48);
      }
      else
      {
        v50 = v43 & 0xFFFFFFFFFFFFF9FFLL;
        v51 = v49 & 0xFFFFFE00;
      }
      v43 = v50 | v51;
      v52 = sub_1C4884088(v50 | v51);
      v173 = v16;
      v174 = v18;
      v54 = sub_1C4928314((uint64_t)&v147, (uint64_t *)&v173, v52, v53, v23, 0, 4, 0, 4, 0, v42, 0);
      if (!v49)
        break;
      v49 -= 512;
      --v48;
    }
    while ((v54 & 1) == 0);
    if (v42++ > 1)
      v56 = 1;
    else
      v56 = v54;
  }
  while ((v56 & 1) == 0);
  if ((v54 & 1) != 0)
  {
    v58 = v138;
    v57 = v139;
    v59 = (uint64_t *)v141;
  }
  else
  {
    v60 = v131 & v132;
    v57 = v139;
    v59 = (uint64_t *)v141;
    if (v142 == 3 && *(_BYTE *)(v40 + 326))
    {
      v61 = v43 & 0xFFFFFFFFFFF80FFFLL;
      v62 = 4096 << v60;
    }
    else
    {
      v61 = v43 & 0xFFFFFFFFFFFFF9FFLL;
      v62 = v60 << 9;
    }
    v58 = v138;
    v43 = v61 | v62;
    v63 = sub_1C4884088(v61 | v62);
    v173 = v16;
    v174 = v18;
    sub_1C4928314((uint64_t)&v147, (uint64_t *)&v173, v63, v64, v23, 0, 4, 0, 4, 0, 0, 0);
  }
  v165 = v43 | ((unint64_t)v149 << 11);
  v65 = sub_1C6366AB4(*(_QWORD *)(v58 + 16), v165, (const llvm::APInt *)&v170, (llvm *)6, 0, 1, 0);
  v67 = v65;
  v68 = v66;
  v173 = v175;
  v174 = 0x800000000;
  if (*(_BYTE *)(*v140 + 326))
  {
    v72 = sub_1C6366AB4(*(_QWORD *)(v58 + 16), 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 1, 0);
    v74 = v73;
    v75 = v174;
    if (v174 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
      v75 = v174;
    }
    v76 = &v173[2 * v75];
    *v76 = (uint64_t)v72;
    v76[1] = v74;
    v77 = (v174 + 1);
    LODWORD(v174) = v77;
    if (v77 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v77 + 1, 16);
      LODWORD(v77) = v174;
    }
    v78 = &v173[2 * v77];
    *v78 = (uint64_t)v67;
    v78[1] = v68;
    v79 = (v174 + 1);
    LODWORD(v174) = v79;
    if (v79 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v79 + 1, 16);
      LODWORD(v79) = v174;
    }
    v80 = (uint64_t **)&v173[2 * v79];
    *v80 = v59;
    v80[1] = (uint64_t *)v136;
    v81 = v174 + 1;
    LODWORD(v174) = v174 + 1;
    if (!v147)
    {
      v83 = v156;
      v82 = v157;
      if (v133)
      {
        v84 = *(_QWORD *)(v58 + 16);
        v85 = *(_QWORD *)(v84 + 832);
        if (v85)
          v86 = *(_WORD *)(v85 + 8);
        else
          v86 = 0;
        v83 = sub_1C5D52060(v84, 201, (const llvm::APInt *)&v170, (llvm *)4, 0, (uint64_t)v156, v157, v86);
        v82 = v82 & 0xFFFFFFFF00000000 | v90;
        v81 = v174;
      }
      if (v81 >= HIDWORD(v174))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v81 + 1, 16);
        v81 = v174;
      }
      v91 = (uint64_t **)&v173[2 * v81];
      *v91 = v83;
      v91[1] = (uint64_t *)v82;
      LODWORD(v174) = v174 + 1;
      v92 = sub_1C6366AB4(*(_QWORD *)(v58 + 16), 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 1, 0);
      v94 = v93;
      v95 = v174;
      if (v174 >= HIDWORD(v174))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
        v95 = v174;
      }
      v96 = &v173[2 * v95];
      *v96 = (uint64_t)v92;
      v96[1] = v94;
      LODWORD(v174) = v174 + 1;
    }
    v97 = sub_1C4917F9C((uint64_t)&v147);
    v99 = v98;
    v100 = v174;
    if (v174 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
      v100 = v174;
    }
    v101 = &v173[2 * v100];
    *v101 = (uint64_t)v97;
    v101[1] = v99;
    v102 = v174 + 1;
    LODWORD(v174) = v174 + 1;
    if (!v148)
    {
      v103 = sub_1C6366AB4(*(_QWORD *)(v58 + 16), 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 1, 0);
      v105 = v104;
      v106 = v174;
      if (v174 >= HIDWORD(v174))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
        v106 = v174;
      }
      v107 = &v173[2 * v106];
      *v107 = (uint64_t)v103;
      v107[1] = v105;
      v102 = v174 + 1;
      LODWORD(v174) = v174 + 1;
    }
    if (v102 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v102 + 1, 16);
      v102 = v174;
    }
    v108 = v137;
    v109 = &v173[2 * v102];
    *v109 = v134;
    v109[1] = v135;
    LODWORD(v174) = v174 + 1;
    v145 = v170;
    if (v170)
      llvm::MetadataTracking::track((uint64_t)&v145, v170, 2);
    v146 = v171;
    v110 = sub_1C4916D34((const llvm::APInt *)&v145, v59, v136, (uint64_t)v164, v58);
    v111 = v173;
    v173[4] = (uint64_t)v110;
    *((_DWORD *)v111 + 10) = v112;
    v113 = v145;
    if (v145)
    {
      v114 = &v145;
LABEL_106:
      llvm::MetadataTracking::untrack((uint64_t)v114, v113);
    }
  }
  else
  {
    v175[0] = v65;
    v175[1] = v66;
    v175[2] = v59;
    v175[3] = v136;
    LODWORD(v174) = 2;
    if (!v147)
    {
      v70 = v156;
      v69 = v157;
      if (v133)
      {
        v87 = *(_QWORD *)(v58 + 16);
        v88 = *(_QWORD *)(v87 + 832);
        if (v88)
          v89 = *(_WORD *)(v88 + 8);
        else
          v89 = 0;
        v70 = sub_1C5D52060(v87, 201, (const llvm::APInt *)&v170, (llvm *)4, 0, (uint64_t)v156, v157, v89);
        v69 = v69 & 0xFFFFFFFF00000000 | v115;
        v71 = v174;
        if (v174 >= HIDWORD(v174))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
          v71 = v174;
        }
      }
      else
      {
        v71 = 2;
      }
      v116 = (uint64_t **)&v173[2 * v71];
      *v116 = v70;
      v116[1] = (uint64_t *)v69;
      LODWORD(v174) = v174 + 1;
    }
    v117 = sub_1C4917F9C((uint64_t)&v147);
    v119 = v118;
    v120 = v174;
    if (v174 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 16);
      v120 = v174;
    }
    v121 = &v173[2 * v120];
    *v121 = (uint64_t)v117;
    v121[1] = v119;
    v122 = (v174 + 1);
    LODWORD(v174) = v122;
    if (v122 >= HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v122 + 1, 16);
      LODWORD(v122) = v174;
    }
    v123 = &v173[2 * v122];
    *v123 = v134;
    v123[1] = v135;
    LODWORD(v174) = v174 + 1;
    v143 = v170;
    v108 = v137;
    if (v170)
      llvm::MetadataTracking::track((uint64_t)&v143, v170, 2);
    v144 = v171;
    v124 = sub_1C4916D34((const llvm::APInt *)&v143, v59, v136, (uint64_t)v164, v58);
    v125 = v173;
    v173[2] = (uint64_t)v124;
    *((_DWORD *)v125 + 6) = v126;
    v113 = v143;
    if (v143)
    {
      v114 = &v143;
      goto LABEL_106;
    }
  }
  v127 = sub_1C4883EEC((uint64_t)v164, v142, v147 == 0, v148);
  v128 = sub_1C5D61678(*(_QWORD *)(v58 + 16), v127, (uint64_t)&v170, v108, 1, v173, v174);
  v129 = *(void **)(v58 + 16);
  v172 = *(_QWORD *)(*v57 + 96);
  sub_1C636E10C(v129, (uint64_t)v128, &v172, 1);
  if (v173 != v175)
    free(v173);
  if (v150)
    llvm::MetadataTracking::untrack((uint64_t)&v150, v150);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, v168);
  if (v170)
    llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
  return v128;
}

uint64_t sub_1C491ADB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unsigned int v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  _QWORD *v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned __int8 **v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  _QWORD *v95;
  int v96;
  int v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned __int8 *v109;
  unsigned __int8 **v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 **v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  int v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  int v161;
  uint64_t *v162;
  int v163;
  unsigned int v164;
  unsigned __int8 *v165;
  int v166;
  unsigned __int8 *v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  unsigned __int8 *v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  unsigned __int8 *v178;
  int v179;
  unsigned __int8 *v180;
  int v181;
  unsigned __int8 *v182;
  int v183;
  uint64_t v184;
  unsigned __int8 *v185;
  int v186;
  unsigned __int8 *v187;
  int v188;
  unsigned __int8 *v189;
  int v190;
  unsigned __int8 *v191;
  int v192;
  __int128 v193;
  unsigned __int8 *v194;
  int v195;
  int v196;
  unsigned __int8 *v197;
  int v198;
  _BYTE v199[2];
  unsigned __int8 v200;
  unsigned __int8 *v201;
  int v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  char v211;
  char v212;
  int v213;
  unsigned int v214;
  __int128 v215;
  void *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  unsigned __int8 *v221;
  int v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _QWORD v226[20];

  v226[17] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if ((_DWORD)v6 == 291)
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 80) + 40) + 16 * *(unsigned int *)(v7 + 88));
  else
    v8 = *(uint64_t **)(a2 + 40);
  v9 = *v8;
  v223 = *(_OWORD *)v7;
  v11 = *(uint64_t **)(v7 + 40);
  v10 = *(_QWORD *)(v7 + 48);
  v12 = *(unsigned __int8 **)(a2 + 64);
  v221 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v221, v12, 2);
  v222 = *(_DWORD *)(a2 + 60);
  if ((_DWORD)v6 == 291)
    v13 = 0;
  else
    v13 = a2;
  if (v9 != 6)
  {
    if (v9 == 5)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 184296);
      v16 = v6;
      goto LABEL_14;
    }
LABEL_249:
    llvm::report_fatal_error((llvm *)"Atomic operations only support i32", (const char *)1);
  }
  v15 = *(_QWORD *)(a1 + 184296);
  if (!*(_BYTE *)(v15 + 382))
    goto LABEL_249;
  v16 = 293;
  v14 = 1;
LABEL_14:
  v161 = *(unsigned __int8 *)(v15 + 326);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_DWORD *)(v17 + 16);
  v216 = &unk_1E7FA0788;
  v217 = 0x2FFFFFFFFLL;
  v219 = 0;
  v220 = 0;
  v19 = *(unsigned __int16 *)(v17 + 36);
  v20 = (v19 >> 8) & 0xF;
  v21 = v19 >> 12;
  if ((_DWORD)v21 == 5 && (_DWORD)v20 == 4 || (_DWORD)v21 == 4 && (_DWORD)v20 == 5)
  {
    v22 = 6;
  }
  else if (byte_1C65ED518[8 * v20 + v21])
  {
    v22 = v20;
  }
  else
  {
    v22 = v21;
  }
  sub_1C4883C90((uint64_t)&v216, v16, v18, v22, v15);
  if ((_BYTE)v219)
    v215 = 0uLL;
  else
    v215 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + 80);
  v162 = (uint64_t *)(a1 + 184296);
  if (HIDWORD(v217) == 3)
    v23 = a2;
  else
    v23 = 0;
  if (v23)
    v24 = v14;
  else
    v24 = 1;
  if ((v24 & 1) == 0)
  {
    v25 = *(_QWORD *)(v23 + 48);
    if (v25)
    {
      while (*(_DWORD *)(v25 + 8) != (HIDWORD(v217) == 3))
      {
        v25 = *(_QWORD *)(v25 + 32);
        if (!v25)
          goto LABEL_35;
      }
      v160 = 1;
      if ((v14 & 1) != 0)
        goto LABEL_44;
      goto LABEL_46;
    }
  }
LABEL_35:
  if ((v14 & 1) != 0)
  {
    v160 = 0;
    goto LABEL_44;
  }
  if (v13)
  {
    v26 = *(_QWORD *)(v13 + 48);
    if (v26)
    {
      while (*(_DWORD *)(v26 + 8))
      {
        v26 = *(_QWORD *)(v26 + 32);
        if (!v26)
          goto LABEL_41;
      }
      v160 = 0;
      goto LABEL_46;
    }
  }
LABEL_41:
  v160 = 0;
  if (!(_BYTE)v219)
  {
LABEL_44:
    v159 = 1;
    v158 = sub_1C636D7B0((llvm *)1, 0);
    v164 = 0;
    goto LABEL_47;
  }
LABEL_46:
  v164 = 1;
  v158 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), 5, 0, 1, 0);
  v159 = v32;
LABEL_47:
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(uint64_t **)(v33 + 40);
  v35 = *v34;
  v155 = v34[43];
  v36 = BYTE3(v219);
  if (BYTE3(v219))
  {
    v11 = sub_1C49184EC((uint64_t)v11, v10, v33, v27, v28, v29, v30, v31);
    v10 = v10 & 0xFFFFFFFF00000000 | v38;
    v36 = *(_BYTE *)(*v162 + 405) != 0;
    if (*(_BYTE *)(*v162 + 407))
      v37 = 2 * *(unsigned __int8 *)(*v162 + 406);
    else
      v37 = (2 * *(unsigned __int8 *)(*v162 + 406)) | 0x10000;
    v214 = 0;
    if (BYTE3(v219))
    {
      v39 = 4;
      goto LABEL_55;
    }
  }
  else
  {
    v37 = 0;
    v214 = 0;
  }
  v39 = 6;
LABEL_55:
  v40 = 0;
  v212 = v36;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v208 = 0;
  v209 = 0;
  v206 = 0;
  *(_QWORD *)&v207 = 0;
  DWORD2(v207) = 0;
  v210 = a3;
  v213 = v37;
  v211 = v161;
  do
  {
    if (BYTE3(v219))
      v41 = 4;
    else
      v41 = 5;
    *(_QWORD *)&v225 = v11;
    *((_QWORD *)&v225 + 1) = v10;
    if ((sub_1C4928314((uint64_t)v199, (uint64_t *)&v225, 2, v27, v39, 0, v41, 0, v39, 0, v40, 0) & 1) != 0)
      break;
  }
  while (v40++ != 2);
  v43 = BYTE3(v219);
  if (BYTE3(v219))
    v43 = v199[0];
  else
    v199[0] = 0;
  v44 = v162;
  v157 = sub_1C4883E0C((uint64_t)&v216, v164, v43 == 0, v199[1]);
  if (BYTE2(v219))
    v45 = v14;
  else
    v45 = 1;
  v163 = v14;
  if ((v45 & 1) != 0)
  {
    v153 = 0;
    v154 = 0;
  }
  else
  {
    v153 = DWORD2(v215);
    v154 = v215;
    v46 = *(_QWORD *)(a3 + 16);
    v197 = v221;
    if (v221)
      llvm::MetadataTracking::track((uint64_t)&v197, v221, 2);
    v198 = v222;
    v47 = sub_1C613A4A4(49, 0);
    v48 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&v225 = v226;
    *((_QWORD *)&v225 + 1) = 0x500000000;
    v224 = 0uLL;
    v49 = sub_1C6366AB4(v46, v47, (const llvm::APInt *)&v224, (llvm *)6, 0, 1, 0);
    v51 = v50;
    v52 = DWORD2(v225);
    if (DWORD2(v225) >= HIDWORD(v225))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v226, DWORD2(v225) + 1, 16);
      v52 = DWORD2(v225);
    }
    v53 = (_QWORD *)(v225 + 16 * v52);
    *v53 = v49;
    v53[1] = v51;
    v54 = ++DWORD2(v225);
    if ((_QWORD)v224)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v224, (unsigned __int8 *)v224);
      v54 = DWORD2(v225);
    }
    v55 = *(_OWORD *)(v48 + 120);
    if (v54 >= HIDWORD(v225))
    {
      v152 = *(_OWORD *)(v48 + 120);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v226, v54 + 1, 16);
      v55 = v152;
      v54 = DWORD2(v225);
    }
    *(_OWORD *)(v225 + 16 * v54) = v55;
    ++DWORD2(v225);
    v224 = 0uLL;
    v56 = sub_1C6366AB4(v46, 25, (const llvm::APInt *)&v224, (llvm *)6, 0, 1, 0);
    v58 = v57;
    v59 = DWORD2(v225);
    if (DWORD2(v225) >= HIDWORD(v225))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v226, DWORD2(v225) + 1, 16);
      v59 = DWORD2(v225);
    }
    v60 = (_QWORD *)(v225 + 16 * v59);
    *v60 = v56;
    v60[1] = v58;
    v61 = ++DWORD2(v225);
    if ((_QWORD)v224)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v224, (unsigned __int8 *)v224);
      v61 = DWORD2(v225);
    }
    if (v61 >= HIDWORD(v225))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v226, v61 + 1, 16);
      v61 = DWORD2(v225);
    }
    v62 = (uint64_t *)(v225 + 16 * v61);
    *v62 = v154;
    v62[1] = v153;
    ++DWORD2(v225);
    v224 = 0uLL;
    v63 = sub_1C6366AB4(v46, 26, (const llvm::APInt *)&v224, (llvm *)6, 0, 1, 0);
    v65 = v64;
    v66 = DWORD2(v225);
    if (DWORD2(v225) >= HIDWORD(v225))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v226, DWORD2(v225) + 1, 16);
      v66 = DWORD2(v225);
    }
    v67 = (_QWORD *)(v225 + 16 * v66);
    *v67 = v63;
    v67[1] = v65;
    v68 = ++DWORD2(v225);
    if ((_QWORD)v224)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v224, (unsigned __int8 *)v224);
      v68 = DWORD2(v225);
    }
    v69 = sub_1C636E56C(v46, 18, (uint64_t)&v197, (llvm *)0x31, 0, (uint64_t *)v225, v68);
    v44 = v162;
    if ((_QWORD *)v225 != v226)
      free((void *)v225);
    *(_QWORD *)&v215 = v69;
    DWORD2(v215) = 0;
    if (v197)
      llvm::MetadataTracking::untrack((uint64_t)&v197, v197);
  }
  v70 = (_BYTE *)*v44;
  if (*(_BYTE *)(*v44 + 318))
  {
    v71 = 4;
  }
  else if (v70[319])
  {
    v71 = 5;
  }
  else if (v70[320])
  {
    v71 = 6;
  }
  else if (v70[321])
  {
    v71 = 7;
  }
  else
  {
    v71 = 9;
  }
  if (v70[362])
    v72 = 3;
  else
    v72 = 1;
  LODWORD(v225) = 0;
  if (sub_1C4979B6C((int)v70, v35, "AtomicCacheCtl", (int *)&v225))
    v72 = v225;
  v73 = (_BYTE *)*v44;
  if (*(_BYTE *)(*v44 + 364))
  {
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 648))(v155);
    v73 = (_BYTE *)*v44;
  }
  else
  {
    v74 = 1;
  }
  if (v71 != 5)
    v74 = 0;
  if (v73[372])
    v74 = 3;
  if (v72 >= v74)
    v75 = v74;
  else
    v75 = v72;
  if (v73[371])
  {
    v76 = 0;
LABEL_124:
    v78 = 0;
    goto LABEL_125;
  }
  LODWORD(v225) = 0;
  if (sub_1C4979B6C((int)v73, v35, "MemoryReadCacheCtl", (int *)&v225))
    v76 = v225;
  else
    v76 = v75;
  v73 = (_BYTE *)*v44;
  if (*(_BYTE *)(*v44 + 371))
    goto LABEL_124;
  LODWORD(v225) = 0;
  v77 = sub_1C4979B6C((int)v73, v35, "MemoryWriteCacheCtl", (int *)&v225);
  v78 = v225;
  if (!v77)
    v78 = v75;
  v73 = (_BYTE *)*v44;
LABEL_125:
  if (v78 >= v76)
    v79 = v76;
  else
    v79 = v78;
  if ((v163 & 1) != 0)
  {
    if (v73[383])
      v80 = 1;
    else
      v80 = 3;
    v81 = v80 | (4 * ((_DWORD)v6 != 304));
    v196 = v81;
LABEL_138:
    v84 = v79;
    goto LABEL_139;
  }
  LODWORD(v225) = 0;
  v82 = sub_1C4979B6C((int)v73, v35, "AtomicL2Pers", (int *)&v225);
  v83 = 4 * v225;
  if (!v82)
    v83 = 4;
  if (v72 == 3)
    v83 = 4;
  v81 = v83 | v72;
  v196 = v83 | v72;
  if (!*(_BYTE *)(*v44 + 384))
    goto LABEL_138;
  v84 = v79;
  if ((_DWORD)v217 == 1 && v72 == 3)
  {
    v115 = *(_QWORD *)(a3 + 16);
    v194 = v221;
    v116 = v115;
    if (v221)
    {
      llvm::MetadataTracking::track((uint64_t)&v194, v221, 2);
      v116 = *(_QWORD *)(a3 + 16);
    }
    v195 = v222;
    *(_QWORD *)&v225 = sub_1C6366AB4(v116, 0, (const llvm::APInt *)&v221, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v225 + 1) = v117;
    *(_QWORD *)&v224 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v221, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v224 + 1) = v118;
    *(_QWORD *)&v193 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v221, (llvm *)5, 0, 1, 0);
    *((_QWORD *)&v193 + 1) = v119;
    *(_QWORD *)&v215 = sub_1C612E388(v115, 3796, (uint64_t)&v194, 5u, &v225, &v224, &v215, &v193);
    DWORD2(v215) = 0;
    if (v194)
      llvm::MetadataTracking::untrack((uint64_t)&v194, v194);
    LODWORD(v217) = 0;
  }
LABEL_139:
  if (v218 <= 0xC)
  {
    if (((1 << v218) & 0x404) != 0)
    {
      v91 = *(_QWORD *)(a3 + 16);
      v191 = v221;
      if (v221)
        llvm::MetadataTracking::track((uint64_t)&v191, v221, 2);
      v192 = v222;
      sub_1C48EDB10(v91, (uint64_t)&v191, 1, 3u, 1, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
      v86 = v191;
      if (v191)
      {
        v87 = &v191;
        goto LABEL_162;
      }
    }
    else if (((1 << v218) & 0x808) != 0)
    {
      v88 = *(_QWORD *)(a3 + 16);
      v189 = v221;
      if (v221)
        llvm::MetadataTracking::track((uint64_t)&v189, v221, 2);
      v190 = v222;
      sub_1C48EDB10(v88, (uint64_t)&v189, 1, 3u, 2, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
      if (v189)
        llvm::MetadataTracking::untrack((uint64_t)&v189, v189);
      if ((v163 & 1) != 0 || *(_BYTE *)(*v44 + 383))
      {
        v89 = *(_QWORD *)(a3 + 16);
        v187 = v221;
        if (v221)
          llvm::MetadataTracking::track((uint64_t)&v187, v221, 2);
        v188 = v222;
        LODWORD(v225) = 3;
        LODWORD(v224) = 2;
        v90 = sub_1C613D864(v89, 8261, (uint64_t)&v187, 1u, (unsigned int *)&v225, (unsigned int *)&v224, &v223);
        if (v187)
          llvm::MetadataTracking::untrack((uint64_t)&v187, v187);
        *(_QWORD *)&v223 = v90;
        DWORD2(v223) = 0;
      }
    }
    else if (((1 << v218) & 0x1010) != 0)
    {
      v85 = *(_QWORD *)(a3 + 16);
      v185 = v221;
      if (v221)
        llvm::MetadataTracking::track((uint64_t)&v185, v221, 2);
      v186 = v222;
      sub_1C48EDB10(v85, (uint64_t)&v185, 1, 3u, 3, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
      v86 = v185;
      if (v185)
      {
        v87 = &v185;
LABEL_162:
        llvm::MetadataTracking::untrack((uint64_t)v87, v86);
      }
    }
  }
  v224 = v207;
  if (!BYTE3(v219)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 288))(v155) & 1) == 0
    && (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v155)(v155, 37, 0, 1, 2))
  {
    v92 = *(_QWORD *)(a3 + 16);
    v93 = sub_1C6366AB4(v92, 0, (const llvm::APInt *)&v221, (llvm *)5, 0, 1, 0);
    v156 = v94;
    v95 = sub_1C636E638(*(_QWORD *)(a3 + 16), 26, (const llvm::APInt *)&v221, (llvm *)5, 0, v224, SDWORD2(v224));
    v97 = v96;
    v98 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), 0, (const llvm::APInt *)&v221, (llvm *)5, 0, 1, 0);
    v150 = (uint64_t)v95;
    v151 = v97;
    v84 = v79;
    v44 = v162;
    v101 = sub_1C636E4A0(v92, 495, (uint64_t)&v221, (llvm *)5, 0, (uint64_t)v93, v156, v100, v150, v151, (uint64_t)v98, v99);
    *(_QWORD *)&v224 = sub_1C636E714(*(_QWORD *)(a3 + 16), 26, (const llvm::APInt *)&v221, (llvm *)6, 0, v224, SDWORD2(v224), v102, (uint64_t)v101, 0);
    DWORD2(v224) = v103;
  }
  if ((_BYTE)v219)
  {
    v111 = 2066;
    if (!v200)
      v111 = 18;
    v112 = v111 | ((unint64_t)*(unsigned __int8 *)(*v44 + 326) << 12);
    v113 = *(_QWORD *)(a3 + 16);
    if (BYTE3(v219))
    {
      v122 = sub_1C6366AB4(*(_QWORD *)(a3 + 16), v111 | ((unint64_t)*(unsigned __int8 *)(*v44 + 326) << 12), (const llvm::APInt *)&v221, (llvm *)6, 0, 1, 0);
      *(_QWORD *)&v225 = v226;
      *((_QWORD *)&v225 + 1) = 0x800000000;
      sub_1C491905C(*(_QWORD *)(a3 + 16), (const llvm::APInt *)&v221, v161 != 0, (uint64_t)v199, (uint64_t)v122, v123, v39, v124, v223, *((uint64_t *)&v223 + 1), (uint64_t)&v225);
      v108 = sub_1C5D61678(*(_QWORD *)(a3 + 16), v157, (uint64_t)&v221, v158, v159, (uint64_t *)v225, DWORD2(v225));
      if ((_QWORD *)v225 != v226)
        free((void *)v225);
      v105 = v163;
    }
    else
    {
      v171 = v221;
      if (v221)
        llvm::MetadataTracking::track((uint64_t)&v171, v221, 2);
      v172 = v222;
      *(_QWORD *)&v225 = sub_1C4917F9C((uint64_t)v199);
      *((_QWORD *)&v225 + 1) = v114;
      v108 = sub_1C6143D74(v113, v157, (uint64_t)&v171, v158, v159, v112, (unsigned int *)&v196, &v224, &v225, &v214, &v223);
      v109 = v171;
      v105 = v163;
      if (v171)
      {
        v110 = &v171;
        goto LABEL_211;
      }
    }
  }
  else
  {
    v104 = v217 | (v81 << 6);
    v184 = v104;
    if (*(_BYTE *)(*v44 + 326))
    {
      v104 |= ((unint64_t)v200 << 9) | 0x1000;
      v184 = v104;
    }
    v105 = v163;
    if (v199[0])
    {
      v120 = *(_QWORD *)(a3 + 16);
      if (v161)
      {
        v182 = v221;
        if (v221)
          llvm::MetadataTracking::track((uint64_t)&v182, v221, 2);
        v183 = v222;
        *(_QWORD *)&v225 = sub_1C4917F9C((uint64_t)v199);
        *((_QWORD *)&v225 + 1) = v121;
        LODWORD(v193) = 0;
        v108 = sub_1C6143894(v120, v157, (uint64_t)&v182, v158, v159, 0, &v184, &v225, &v215, (int *)&v193, &v223);
        v109 = v182;
        if (v182)
        {
          v110 = &v182;
          goto LABEL_211;
        }
      }
      else
      {
        v180 = v221;
        if (v221)
          llvm::MetadataTracking::track((uint64_t)&v180, v221, 2);
        v181 = v222;
        *(_QWORD *)&v225 = sub_1C4917F9C((uint64_t)v199);
        *((_QWORD *)&v225 + 1) = v127;
        v108 = sub_1C614397C(v120, v157, (uint64_t)&v180, v158, v159, &v184, &v225, &v215, &v223);
        v109 = v180;
        if (v180)
        {
          v110 = &v180;
          goto LABEL_211;
        }
      }
    }
    else if (BYTE3(v219))
    {
      v225 = v207;
      v125 = *(_QWORD *)(a3 + 16);
      if (v161)
      {
        v178 = v221;
        if (v221)
          llvm::MetadataTracking::track((uint64_t)&v178, v221, 2);
        v179 = v222;
        *(_QWORD *)&v193 = sub_1C4917F9C((uint64_t)v199);
        *((_QWORD *)&v193 + 1) = v126;
        v177 = 0;
        v108 = sub_1C6143A58(v125, v157, (uint64_t)&v178, v158, v159, 0, &v184, &v225, &v193, &v215, &v177, &v223);
        v109 = v178;
        if (v178)
        {
          v110 = &v178;
          goto LABEL_211;
        }
      }
      else
      {
        v175 = v221;
        if (v221)
          llvm::MetadataTracking::track((uint64_t)&v175, v221, 2);
        v176 = v222;
        *(_QWORD *)&v193 = sub_1C4917F9C((uint64_t)v199);
        *((_QWORD *)&v193 + 1) = v128;
        v108 = sub_1C6143B40(v125, v157, (uint64_t)&v175, v158, v159, v104, &v225, &v193, &v215, &v223);
        v109 = v175;
        if (v175)
        {
          v110 = &v175;
          goto LABEL_211;
        }
      }
    }
    else
    {
      v106 = *(_QWORD *)(a3 + 16);
      v173 = v221;
      if (v221)
        llvm::MetadataTracking::track((uint64_t)&v173, v221, 2);
      v174 = v222;
      *(_QWORD *)&v225 = sub_1C4917F9C((uint64_t)v199);
      *((_QWORD *)&v225 + 1) = v107;
      v108 = sub_1C6143C50(v106, v157, (uint64_t)&v173, v158, v159, v104, &v224, &v225, &v215, &v214, &v223);
      v109 = v173;
      if (v173)
      {
        v110 = &v173;
LABEL_211:
        llvm::MetadataTracking::untrack((uint64_t)v110, v109);
      }
    }
  }
  v129 = *(void **)(a3 + 16);
  *(_QWORD *)&v225 = *(_QWORD *)(a2 + 96);
  sub_1C636E10C(v129, (uint64_t)v108, &v225, 1);
  *(_QWORD *)&v223 = v108;
  DWORD2(v223) = v164;
  if (v218 > 0xC)
    goto LABEL_229;
  if (((1 << v218) & 0x440) != 0)
  {
    v134 = *(_QWORD *)(a3 + 16);
    v169 = v221;
    if (v221)
      llvm::MetadataTracking::track((uint64_t)&v169, v221, 2);
    v170 = v222;
    sub_1C48EDB10(v134, (uint64_t)&v169, 1, 2u, 1, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
    v131 = v169;
    if (v169)
    {
      v132 = &v169;
      goto LABEL_228;
    }
  }
  else if (((1 << v218) & 0x880) != 0)
  {
    v133 = *(_QWORD *)(a3 + 16);
    v167 = v221;
    if (v221)
      llvm::MetadataTracking::track((uint64_t)&v167, v221, 2);
    v168 = v222;
    sub_1C48EDB10(v133, (uint64_t)&v167, 1, 2u, 2, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
    v131 = v167;
    if (v167)
    {
      v132 = &v167;
      goto LABEL_228;
    }
  }
  else if (((1 << v218) & 0x1100) != 0)
  {
    v130 = *(_QWORD *)(a3 + 16);
    v165 = v221;
    if (v221)
      llvm::MetadataTracking::track((uint64_t)&v165, v221, 2);
    v166 = v222;
    sub_1C48EDB10(v130, (uint64_t)&v165, 1, 2u, 3, 2, v84, 1, 1, 1, (uint64_t)&v223, *v44);
    v131 = v165;
    if (v165)
    {
      v132 = &v165;
LABEL_228:
      llvm::MetadataTracking::untrack((uint64_t)v132, v131);
    }
  }
LABEL_229:
  if (BYTE1(v219))
    v135 = 0;
  else
    v135 = v164;
  if (v135 == 1)
    sub_1C5D6146C(*(_QWORD *)(a3 + 16), a2, 0, (uint64_t)v108, 0);
  if ((v160 & 1) != 0)
  {
    v138 = *(_QWORD **)(a3 + 16);
    v139 = sub_1C6367818(v138, 0x11u);
    v142 = v138[104];
    if (v142)
      LOWORD(v142) = *(_WORD *)(v142 + 8);
    v144 = sub_1C5D58E08((uint64_t)v138, (const char *)0xC1, (const llvm::APInt *)&v221, (llvm *)5, 0, (uint64_t)v108, 0, v141, v154, v153, v139, v140, SHIDWORD(v140), v142);
    v145 = *(_QWORD *)(a3 + 16);
    v146 = *(_QWORD *)(v145 + 832);
    if (v146)
      v147 = *(_WORD *)(v146 + 8);
    else
      v147 = 0;
    v148 = sub_1C5D52060(v145, 201, (const llvm::APInt *)&v221, (llvm *)2, 0, (uint64_t)v144, v143, v147);
    sub_1C5D6146C(*(_QWORD *)(a3 + 16), a2, 1, (uint64_t)v148, v149);
  }
  if (v105)
    v136 = 1;
  else
    v136 = HIDWORD(v217) - 1;
  sub_1C5D6146C(*(_QWORD *)(a3 + 16), a2, v136, v223, SDWORD2(v223));
  if (v201)
    llvm::MetadataTracking::untrack((uint64_t)&v201, v201);
  if (v221)
    llvm::MetadataTracking::untrack((uint64_t)&v221, v221);
  return 0;
}

void *sub_1C491C130(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7, int *a8, __int128 *a9)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v16 = sub_1C6366AB4(a1, a3, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v18 = v17;
  v19 = *(unsigned int *)(a2 + 8);
  if (v19 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  v20 = (_QWORD *)(*(_QWORD *)a2 + 16 * v19);
  *v20 = v16;
  v20[1] = v18;
  ++*(_DWORD *)(a2 + 8);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  v21 = *a4;
  v31 = 0;
  v32 = 0;
  v22 = sub_1C6366AB4(a1, v21, (const llvm::APInt *)&v31, (llvm *)6, 0, 1, 0);
  v24 = v23;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)a2 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  if (v31)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
    v27 = *(_DWORD *)(a2 + 8);
  }
  v28 = *a5;
  if (v27 >= *(_DWORD *)(a2 + 12))
  {
    v30 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 16);
    v28 = v30;
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v27) = v28;
  ++*(_DWORD *)(a2 + 8);
  return sub_1C6143F28(a1, a2, a6, a7, a8, a9);
}

uint64_t *sub_1C491C2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  unint64_t v18;
  uint8x8_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint8x8_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t ExtendedSizeInBits;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  llvm *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v77;
  uint64_t *v78;
  BOOL v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unsigned __int8 *v128;
  int v129;
  unsigned __int8 *v130;
  int v131;
  __int128 v132;
  _QWORD v133[3];

  v133[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(llvm **)v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(unsigned __int8 **)(a2 + 64);
  v128 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v128, v8, 2);
  v9 = *(_DWORD *)(a2 + 60);
  v129 = v9;
  if (v6 == 6
    || ((v10 = *(_QWORD *)(a2 + 32), v11 = *(_QWORD *)(v10 + 40), v12 = *(unsigned __int16 *)(v11 + 24), v12 != 35)
      ? (v13 = v12 == 11)
      : (v13 = 1),
        !v13))
  {
    v25 = 0;
    goto LABEL_19;
  }
  v14 = *(uint64_t **)v10;
  v15 = *(_QWORD *)(v10 + 8);
  v16 = *(int8x8_t **)(v11 + 80);
  v17 = v16 + 3;
  if (v16[4].i32[0] >= 0x41u)
    v17 = (int8x8_t *)*v17;
  v18 = (unint64_t)*v17;
  v19 = (uint8x8_t)vcnt_s8(*v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] == 1)
  {
    v81 = sub_1C6366AB4(a3, 63 - __clz(v18), (const llvm::APInt *)&v128, (llvm *)5, 0, 0, 0);
    v84 = *(_QWORD *)(a3 + 832);
    if (v84)
      LOWORD(v84) = *(_WORD *)(v84 + 8);
    v25 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v128, v6, v7, (uint64_t)v14, v15, v83, (uint64_t)v81, v82, v84);
  }
  else
  {
    v132 = *(_OWORD *)*(_QWORD *)(a2 + 40);
    v20 = *(unsigned __int8 **)(a2 + 64);
    v130 = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v130, v20, 2);
      v9 = *(_DWORD *)(a2 + 60);
    }
    v21 = 0;
    v131 = v9;
    while (1)
    {
      v22 = byte_1C6609178[v21];
      v23 = (int8x8_t)(v18 / v22);
      if (!(v18 % v22))
        break;
      if (++v21 == 4)
      {
LABEL_17:
        LODWORD(v24) = 0;
        v25 = 0;
        goto LABEL_55;
      }
    }
    LODWORD(v24) = 0;
    v133[0] = byte_1C6609178[v21];
    v133[1] = v18 / v22;
    if (v22 > 0x11)
    {
      v25 = 0;
      goto LABEL_55;
    }
    v25 = 0;
    if ((unint64_t)(*(_QWORD *)&v23 - 18) >= 0xFFFFFFFFFFFFFFEFLL)
    {
      v27 = (uint8x8_t)vcnt_s8(v23);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] != 1)
      {
        v80 = 0;
        while (*(_QWORD *)&v23 != byte_1C6609178[v80])
        {
          if (++v80 == 4)
            goto LABEL_17;
        }
      }
      v28 = 0;
      v29 = 0;
      v24 = v15;
      v25 = v14;
      while (1)
      {
        v30 = v28;
        v31 = v133[v29];
        if (!v31)
          goto LABEL_31;
        if (v31 != 1)
          break;
LABEL_51:
        v28 = 1;
        v29 = 1;
        if ((v30 & 1) != 0)
          goto LABEL_55;
      }
      if ((v31 & (v31 - 1)) != 0)
      {
LABEL_31:
        v34 = v31 - 1;
        v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] != 1)
          llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
        if ((_BYTE)v132)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v132);
        else
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v132);
        v38 = ExtendedSizeInBits;
        if ((_DWORD)v37 == 1)
        v39 = 63 - __clz(v34);
        if (v38 <= v39)
        {
LABEL_53:
          LODWORD(v24) = 0;
          v25 = 0;
          goto LABEL_55;
        }
        v40 = v132;
        v41 = sub_1C6366AB4(a3, v39, (const llvm::APInt *)&v130, (llvm *)5, 0, 0, 0);
        v44 = *(_QWORD *)(a3 + 832);
        if (v44)
          LOWORD(v44) = *(_WORD *)(v44 + 8);
        v45 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v130, (llvm *)v40, *((uint64_t *)&v40 + 1), (uint64_t)v25, v24, v43, (uint64_t)v41, v42, v44);
        v48 = *(_QWORD *)(a3 + 832);
        if (v48)
          LOWORD(v48) = *(_WORD *)(v48 + 8);
        v49 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v130, (llvm *)v132, *((uint64_t *)&v132 + 1), (uint64_t)v25, v24, v47, (uint64_t)v45, v46, v48);
      }
      else
      {
        if ((_BYTE)v132)
          v32 = sub_1C47A8C74((unsigned __int8 *)&v132);
        else
          v32 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v132);
        v51 = v32;
        if ((_DWORD)v33 == 1)
        v52 = 63 - __clz(v31);
        if (v51 <= v52)
          goto LABEL_53;
        v53 = v132;
        v54 = sub_1C6366AB4(a3, v52, (const llvm::APInt *)&v130, (llvm *)5, 0, 0, 0);
        v57 = *(_QWORD *)(a3 + 832);
        if (v57)
          LOWORD(v57) = *(_WORD *)(v57 + 8);
        v49 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v130, (llvm *)v53, *((uint64_t *)&v53 + 1), (uint64_t)v25, v24, v56, (uint64_t)v54, v55, v57);
      }
      v25 = v49;
      v24 = v24 & 0xFFFFFFFF00000000 | v50;
      goto LABEL_51;
    }
LABEL_55:
    if (v130)
      llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
    if (!v25 && !(_DWORD)v24)
    {
      v58 = *(_QWORD *)(a2 + 40);
      v59 = *(llvm **)v58;
      v60 = *(_QWORD *)(v58 + 8);
      v61 = *(unsigned __int8 **)(a2 + 64);
      *(_QWORD *)&v132 = v61;
      if (v61)
        llvm::MetadataTracking::track((uint64_t)&v132, v61, 2);
      v62 = 0;
      DWORD2(v132) = *(_DWORD *)(a2 + 60);
      while (1)
      {
        v63 = byte_1C6609180[v62];
        v64 = v18 - v63;
        if (v18 != v63 && (v64 & (v64 - 1)) == 0)
          break;
        if (++v62 == 10)
          goto LABEL_68;
      }
      if (!byte_1C6609180[v62] || (v65 = 63 - __clz(v64), v65 > 4))
      {
LABEL_68:
        v66 = 0;
        v25 = 0;
        goto LABEL_69;
      }
      v102 = sub_1C6366AB4(a3, v65, (const llvm::APInt *)&v132, (llvm *)5, 0, 0, 0);
      v105 = *(_QWORD *)(a3 + 832);
      if (v105)
        LOWORD(v105) = *(_WORD *)(v105 + 8);
      v108 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v132, v59, v60, (uint64_t)v14, v15, v104, (uint64_t)v102, v103, v105);
      v109 = v106;
      if ((int)v63 >= 0)
        LOBYTE(v110) = v63;
      else
        v110 = -(int)v63;
      v111 = v110;
      v112 = v14;
      v113 = v15;
      if (v111 >= 2)
      {
        v127 = v106;
        v122 = sub_1C6366AB4(a3, __clz(v111) ^ 0x1F, (const llvm::APInt *)&v132, (llvm *)5, 0, 0, 0);
        v125 = *(_QWORD *)(a3 + 832);
        if (v125)
          LOWORD(v125) = *(_WORD *)(v125 + 8);
        v112 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v132, v59, v60, (uint64_t)v14, v15, v124, (uint64_t)v122, v123, v125);
        v109 = v127;
        v113 = v15 & 0xFFFFFFFF00000000 | v126;
      }
      if ((int)v63 > 0)
        v114 = 56;
      else
        v114 = 57;
      v115 = *(_QWORD *)(a3 + 832);
      if (v115)
        LOWORD(v115) = *(_WORD *)(v115 + 8);
      v25 = sub_1C5D56C70(a3, v114, (const llvm::APInt *)&v132, v59, v60, (uint64_t)v108, v109, v107, (uint64_t)v112, v113, v115);
      v66 = v116;
LABEL_69:
      if ((_QWORD)v132)
        llvm::MetadataTracking::untrack((uint64_t)&v132, (unsigned __int8 *)v132);
      if (!v25 && !v66)
      {
        v67 = *(_QWORD *)(a2 + 40);
        v68 = *(llvm **)v67;
        v69 = *(_QWORD *)(v67 + 8);
        v70 = *(unsigned __int8 **)(a2 + 64);
        *(_QWORD *)&v132 = v70;
        if (v70)
          llvm::MetadataTracking::track((uint64_t)&v132, v70, 2);
        DWORD2(v132) = *(_DWORD *)(a2 + 60);
        if (v18 > 0x21)
          goto LABEL_88;
        v71 = 0;
        v72 = 0;
        do
        {
          v73 = 0;
          while (1)
          {
            v74 = byte_1C660917C[v73];
            v75 = (v74 + byte_1C6609180[v71]);
            if ((int)v75 >= 1 && v18 == v75)
              break;
            if (++v73 == 4)
            {
              v74 = 0;
              goto LABEL_85;
            }
          }
          v72 = byte_1C6609180[v71];
LABEL_85:
          if (v71 > 8)
            break;
          ++v71;
        }
        while (!v74);
        if (v74)
        {
          v85 = sub_1C6366AB4(a3, 63 - __clz(v74 - 1), (const llvm::APInt *)&v132, (llvm *)5, 0, 0, 0);
          v88 = *(_QWORD *)(a3 + 832);
          if (v88)
            LOWORD(v88) = *(_WORD *)(v88 + 8);
          v89 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v132, v68, v69, (uint64_t)v14, v15, v87, (uint64_t)v85, v86, v88);
          v92 = *(_QWORD *)(a3 + 832);
          if (v92)
            LOWORD(v92) = *(_WORD *)(v92 + 8);
          v93 = v15;
          v95 = sub_1C5D56C70(a3, 56, (const llvm::APInt *)&v132, v68, v69, (uint64_t)v14, v15, v91, (uint64_t)v89, v90, v92);
          v97 = v96;
          if (v72 >= 0)
            v98 = v72;
          else
            v98 = -v72;
          if (v98 >= 2)
          {
            v117 = sub_1C6366AB4(a3, __clz(v98) ^ 0x1F, (const llvm::APInt *)&v132, (llvm *)5, 0, 0, 0);
            v120 = *(_QWORD *)(a3 + 832);
            if (v120)
              LOWORD(v120) = *(_WORD *)(v120 + 8);
            v14 = sub_1C5D56C70(a3, 175, (const llvm::APInt *)&v132, v68, v69, (uint64_t)v14, v93, v119, (uint64_t)v117, v118, v120);
            v93 = v93 & 0xFFFFFFFF00000000 | v121;
          }
          if (v72 > 0)
            v99 = 56;
          else
            v99 = 57;
          v100 = *(_QWORD *)(a3 + 832);
          if (v100)
            LOWORD(v100) = *(_WORD *)(v100 + 8);
          v78 = sub_1C5D56C70(a3, v99, (const llvm::APInt *)&v132, v68, v69, (uint64_t)v95, v97, v94, (uint64_t)v14, v93, v100);
          v77 = v101;
        }
        else
        {
LABEL_88:
          v77 = 0;
          v78 = 0;
        }
        if ((_QWORD)v132)
          llvm::MetadataTracking::untrack((uint64_t)&v132, (unsigned __int8 *)v132);
        if (v78)
          v79 = 0;
        else
          v79 = v77 == 0;
        if (v79)
          v25 = 0;
        else
          v25 = v78;
      }
    }
  }
LABEL_19:
  if (v128)
    llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
  return v25;
}

uint64_t sub_1C491CB18(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Preprocess instructions before the instruction selector";
  *(_QWORD *)(v2 + 8) = 55;
  *(_QWORD *)(v2 + 16) = "agx2iselprep";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB308;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C61447F4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C491CBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 16) = v2 + 40;
    *(_QWORD *)(v2 + 24) = 4;
    *(_DWORD *)(v2 + 32) = 0;
    *(_QWORD *)v2 = off_1E816DB00;
    *(_QWORD *)(v2 + 8) = v2 + 40;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v2 + 72) = a2;
    *(_QWORD *)(v2 + 80) = v5;
    *(_QWORD *)(v2 + 88) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 120))(*(_QWORD *)(a2 + 16));
    *(_QWORD *)(v2 + 96) = *(_QWORD *)(*(_QWORD *)a2 + 40) + 272;
    *(_DWORD *)(v2 + 104) = 6;
    *(_QWORD *)(v2 + 112) = 1;
    for (i = 120; i != 760; i += 40)
      *(_DWORD *)(v2 + i) = -1;
    v7 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v2;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      return *(_QWORD *)(a1 + 248);
    }
  }
  return v2;
}

uint64_t sub_1C491CCBC(_QWORD *a1, _DWORD *a2, int *a3, uint64_t a4, int *a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  int GenericVirtualRegister;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD v56[4];
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD v69[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v10 = sub_1C554C050(*a3, a1[34]);
  if (!v11)
    return 0;
  v12 = v10;
  v13 = a1[34];
  v14 = *a2;
  if ((v14 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v14);
  v16 = *v15;
  if ((*(_BYTE *)(v16 + 3) & 1) == 0)
    v16 = *(_QWORD *)(v16 + 24);
  if ((v14 & 0x80000000) == 0)
    return 0;
  v17 = v14 & 0x7FFFFFFF;
  if (v17 >= *(_DWORD *)(v13 + 432))
    return 0;
  v18 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 424) + 8 * v17) == 129)
  {
    v19 = *(_QWORD *)(v16 + 8);
    if (**(unsigned __int16 **)(v19 + 16) - 67 >= 0xFFFFFFFE)
    {
      v18 = 0;
      if ((*a5 & 0xFFFFFFFE) == 0x20 && v10 <= 1)
      {
        v20 = *(_QWORD *)(v13 + 24);
        v21 = *(_QWORD *)(v20 + 16 * v17 + 8);
        if (v21)
        {
          while ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            v21 = *(_QWORD *)(v21 + 24);
            if (!v21)
              goto LABEL_16;
          }
          v25 = *(_QWORD *)(v21 + 8);
          if ((**(_WORD **)(v25 + 16) & 0xFFFE) != 0x32)
            return 0;
          v26 = 1;
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 24);
            if (!v21)
              break;
            if ((*(_BYTE *)(v21 + 3) & 1) == 0)
            {
              v27 = *(_QWORD *)(v21 + 8);
              if (v27 != v25)
              {
                v18 = 0;
                v28 = v26 + 1;
                if ((**(_WORD **)(v27 + 16) & 0xFFFE) == 0x32)
                {
                  ++v26;
                  v29 = v28 >= 4;
                }
                else
                {
                  v29 = 1;
                }
                v25 = *(_QWORD *)(v21 + 8);
                if (v29)
                  return v18;
              }
            }
          }
        }
LABEL_16:
        v22 = *(_QWORD *)(v19 + 32);
        v23 = (const char *)*(unsigned int *)(v22 + 36);
        if ((v23 & 0x80000000) != 0)
          v24 = (uint64_t *)(v20 + 16 * (v23 & 0x7FFFFFFF) + 8);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * (_QWORD)v23);
        v54 = **(unsigned __int16 **)(v19 + 16);
        v55 = v19;
        v30 = *v24;
        if (v30
          && ((*(_BYTE *)(v30 + 3) & 1) != 0 || (v30 = *(_QWORD *)(v30 + 24)) != 0 && (*(_BYTE *)(v30 + 3) & 1) != 0))
        {
          v31 = *(_QWORD *)(v30 + 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = *(_QWORD *)(v13 + 272);
        if ((sub_1C491D2A0(v31, v20, v32) & 1) != 0)
          return 0;
        v33 = *(unsigned int *)(v22 + 68);
        v34 = (uint64_t *)((int)v33 >= 0 ? v32 + 8 * v33 : v20 + 16 * (v33 & 0x7FFFFFFF) + 8);
        v35 = *v34;
        if (v35
          && ((*(_BYTE *)(v35 + 3) & 1) != 0 || (v35 = *(_QWORD *)(v35 + 24)) != 0 && (*(_BYTE *)(v35 + 3) & 1) != 0))
        {
          v36 = *(_QWORD *)(v35 + 8);
        }
        else
        {
          v36 = 0;
        }
        if ((sub_1C491D2A0(v36, v20, v32) & 1) != 0)
          return 0;
        for (i = 0; i != 64; i += 32)
        {
          v39 = (char *)&v62 + i;
          *((_DWORD *)v39 + 2) = 1;
          *(_QWORD *)v39 = 0;
          *((_DWORD *)v39 + 6) = 1;
          *((_QWORD *)v39 + 2) = 0;
        }
        sub_1C54EB4A0(a1[33], v23, (uint64_t)&v57);
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
        v40 = v57;
        v62 = v57;
        v41 = v58;
        v63 = v58;
        v58 = 0;
        if (v65 >= 0x41 && v64)
        {
          MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
          v64 = v59;
          v65 = v60;
          v60 = 0;
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        }
        else
        {
          v64 = v59;
          v65 = v60;
        }
        sub_1C54EB4A0(a1[33], (const char *)*(unsigned int *)(*(_QWORD *)(v55 + 32) + 68), (uint64_t)&v57);
        if (v67 >= 0x41 && v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
        v42 = v57;
        v66 = v57;
        v43 = v58;
        v67 = v58;
        v58 = 0;
        if (v69[0] >= 0x41u && v68)
        {
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          v68 = v59;
          v69[0] = v60;
          v60 = 0;
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        }
        else
        {
          v68 = v59;
          v69[0] = v60;
        }
        v44 = &v62;
        if (v41 >= 0x41)
          v44 = (unint64_t *)v40;
        if (*v44 != 65534)
          goto LABEL_60;
        v45 = &v66;
        if (v43 >= 0x41)
          v45 = (unint64_t *)v42;
        if (*v45 == 65534)
        {
          if (v54 == 66 && v12 == 1 || v54 == 65 && !v12)
          {
            *a5 = dword_1C660919C[*a5];
            v12 ^= 1uLL;
          }
        }
        else
        {
LABEL_60:
          v18 = 0;
          if (v54 != 66 || v12)
          {
LABEL_63:
            for (j = 0; j != -16; j -= 8)
            {
              v51 = (char *)&v62 + j * 4;
              if (v69[j] >= 0x41u)
              {
                v52 = *((_QWORD *)v51 + 6);
                if (v52)
                  MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
              }
              if (*((_DWORD *)v51 + 10) >= 0x41u)
              {
                v53 = *((_QWORD *)v51 + 4);
                if (v53)
                  MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
              }
            }
            return v18;
          }
        }
        v46 = (_QWORD *)a1[31];
        v46[5] = *(_QWORD *)(a4 + 24);
        v46[6] = a4;
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[34], 257, "", 0);
        *a2 = GenericVirtualRegister;
        v18 = 1;
        v56[0] = GenericVirtualRegister;
        v56[2] = 1;
        v48 = *(_QWORD *)(v55 + 32);
        LODWORD(v57) = *(_DWORD *)(v48 + 36);
        LODWORD(v59) = 0;
        v60 = *(_DWORD *)(v48 + 68);
        v61 = 0;
        (*(void (**)(_QWORD *, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v46 + 32))(v46, 76, v56, 1, &v57, 2, 0);
        v57 = 257;
        v58 = 0;
        sub_1C5544694((uint64_t)v46, &v57, 65537 * v12);
        *a3 = *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4);
        goto LABEL_63;
      }
    }
  }
  return v18;
}

uint64_t sub_1C491D2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int **)(a1 + 32);
  if (**(_WORD **)(a1 + 16) != 19 || (v3[8] & 0xFFF00) == 0 && (v3[9] & 0x80000000) != 0)
  {
    v4 = v3[1];
    if ((int)v4 >= 0)
      v5 = (uint64_t *)(a3 + 8 * v4);
    else
      v5 = (uint64_t *)(a2 + 16 * (v4 & 0x7FFFFFFF) + 8);
    v6 = *v5;
    if (v6)
    {
      while ((*(_BYTE *)(v6 + 3) & 1) != 0)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          return 0;
      }
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)(v9 + 24) != v8)
        return 1;
      result = 1;
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          break;
        if ((*(_BYTE *)(v6 + 3) & 1) == 0)
        {
          v10 = *(_QWORD *)(v6 + 8);
          if (v10 != v9)
          {
            v9 = *(_QWORD *)(v6 + 8);
            if (*(_QWORD *)(v10 + 24) != v8)
              return result;
          }
        }
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1C491D360(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  int v116;
  int v117;
  int v118;
  _DWORD *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _DWORD *v126;
  uint64_t v127;
  llvm::MachineFunction *v128;
  unint64_t *v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  const llvm::MachineOperand *v137;
  llvm::MachineInstr *v138;
  llvm::MachineFunction *v139;
  uint64_t v140;
  const char *v141;
  const char *v142;
  uint64_t v143;
  int v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL4 v153;
  uint64_t *v154;
  uint64_t v155;
  char v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  BOOL v164;
  int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  size_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  int v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unint64_t v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  llvm::detail::DoubleAPFloat *v203;
  void *v204;
  unint64_t *v205;
  llvm::detail::DoubleAPFloat *v206;
  void *v207;
  unint64_t *v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  unsigned int i;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  char v243;
  uint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int *v256;
  unsigned int v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v266;
  unint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  int GenericVirtualRegister;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  _QWORD *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  llvm::MachineInstr *v310;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  _QWORD *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  _QWORD *v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  char v346;
  unsigned __int8 *v347;
  uint64_t v348;
  unsigned __int8 *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unsigned __int8 *v355;
  uint64_t v356;
  char v357;
  int v358;
  llvm::MachineFunction *v359;
  llvm::MachineFunction *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t *v365;
  uint64_t v366;
  unint64_t v367;
  char v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  void **v372;
  uint64_t v373;
  unsigned int v374;
  int v375;
  int v376;
  int v377;
  uint64_t v378;
  int v379;
  void *v380;
  uint64_t v381;
  _BYTE v382[32];
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;

  v4 = 0;
  v396 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 248);
  v5[5] = *(_QWORD *)(a2 + 24);
  v5[6] = a2;
  v6 = **(unsigned __int16 **)(a2 + 16);
  if (v6 <= 0x41)
  {
    switch(**(_WORD **)(a2 + 16))
    {
      case '-':
        v7 = *(_DWORD **)(a2 + 32);
        v8 = v7[1];
        if (v8 < 0 && (v9 = *(_QWORD *)(a1 + 272), v10 = v8 & 0x7FFFFFFF, v10 < *(_DWORD *)(v9 + 432)))
        {
          v378 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * v10);
          v370 = 513;
          if (v378 == 513)
            v11 = 4;
          else
            v11 = 8;
        }
        else
        {
          v378 = 0;
          v370 = 513;
          v11 = 8;
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 318))
          v11 = 4;
        v369 = v11;
        v149 = (uint64_t)(v7 + 8);
        v150 = (uint64_t)(v7 + 16);
        v151 = v7[9];
        v152 = v7[17];
        v383 = a1;
        v384 = (uint64_t)&v369;
        v385 = a2;
        v386 = &v378;
        v387 = (uint64_t)&v370;
        v388 = v5;
        v368 = 0;
        v4 = sub_1C491FB00((uint64_t *)&v383, (uint64_t)(v7 + 8), &v368, 0);
        if ((_DWORD)v4)
          v151 = v7[9];
        if (v368)
          v153 = *(_BYTE *)(*(_QWORD *)(a1 + 256) + 318) != 0;
        else
          v153 = 0;
        if (sub_1C491FB00((uint64_t *)&v383, (uint64_t)(v7 + 16), &v368, v153))
        {
          v152 = v7[17];
          v4 = 1;
        }
        sub_1C554C050(v152, *(_QWORD *)(a1 + 272));
        if (!v212)
        {
          v213 = *(_QWORD *)(a1 + 272);
          v214 = v369;
          v380 = 0;
          v372 = &v380;
          if (sub_1C4925E50((uint64_t)&v371, v213, v151))
          {
            if ((uint64_t)v380 <= v214)
            {
              v215 = *(_QWORD *)(a1 + 272);
              v216 = v369;
              v380 = 0;
              v372 = &v380;
              if (!sub_1C4925E50((uint64_t)&v371, v215, v152) || (uint64_t)v380 > v216)
              {
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 32))(*(_QWORD *)(a1 + 288), a2);
                llvm::MachineOperand::setReg(v149, v152);
                llvm::MachineOperand::setReg(v150, v151);
                goto LABEL_436;
              }
            }
          }
        }
        return v4;
      case '.':
        if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 318))
          return 0;
        v119 = *(_DWORD **)(a2 + 32);
        v120 = v119[1];
        if ((v120 & 0x80000000) == 0)
          return 0;
        v121 = *(_QWORD *)(a1 + 272);
        if ((v120 & 0x7FFFFFFFu) >= *(_DWORD *)(v121 + 432))
          return 0;
        v122 = *(unsigned __int16 *)(a2 + 44);
        v123 = *(_QWORD *)(*(_QWORD *)(v121 + 424) + 8 * (v120 & 0x7FFFFFFF));
        if (v123 != 257 && v123 != 129)
          return 0;
        v124 = v119[9];
        if ((v124 & 0x80000000) != 0)
          v125 = (uint64_t *)(*(_QWORD *)(v121 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
        else
          v125 = (uint64_t *)(*(_QWORD *)(v121 + 272) + 8 * v124);
        v319 = *v125;
        if ((*(_BYTE *)(v319 + 3) & 1) == 0)
          v319 = *(_QWORD *)(v319 + 24);
        v320 = *(_QWORD *)(v319 + 8);
        if (**(_WORD **)(v320 + 16) != 47)
          return 0;
        v321 = (uint64_t *)((v124 & 0x80000000) != 0
                         ? *(_QWORD *)(v121 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v121 + 272) + 8 * v124);
        v322 = *v321;
        if (!v322)
          return 0;
        while ((*(_BYTE *)(v322 + 3) & 1) != 0)
        {
          v322 = *(_QWORD *)(v322 + 24);
          if (!v322)
            return 0;
        }
        v4 = 0;
        break;
      case '2':
        v126 = *(_DWORD **)(a2 + 32);
        LODWORD(v371) = v126[4];
        LODWORD(v380) = v126[9];
        LODWORD(v378) = v126[17];
        if (sub_1C491CCBC((_QWORD *)a1, &v380, (int *)&v378, a2, (int *)&v371))
        {
          v5[5] = *(_QWORD *)(a2 + 24);
          v5[6] = a2;
          v128 = sub_1C55437B8(v5, 0x32u);
          v129 = (unint64_t *)v127;
          v130 = (unint64_t *)v5[6];
          v131 = *(_QWORD *)(v5[5] + 40);
          *(_QWORD *)(v127 + 24) = v131;
          v132 = *(_QWORD *)(v131 + 32);
          v133 = *(unsigned int *)(v127 + 40);
          if ((_DWORD)v133)
          {
            v312 = *(_QWORD *)(v127 + 32);
            v313 = *(_QWORD *)(v132 + 40);
            v314 = 32 * v133;
            do
            {
              if (!*(_BYTE *)v312)
              {
                v315 = *(unsigned int *)(v312 + 4);
                if ((int)v315 >= 0)
                  v316 = (uint64_t *)(*(_QWORD *)(v313 + 272) + 8 * v315);
                else
                  v316 = (uint64_t *)(*(_QWORD *)(v313 + 24) + 16 * (v315 & 0x7FFFFFFF) + 8);
                v317 = *v316;
                if (*v316)
                {
                  v318 = *(_QWORD *)(v317 + 16);
                  *(_QWORD *)(v317 + 16) = v312;
                  *(_QWORD *)(v312 + 16) = v318;
                  if ((*(_BYTE *)(v312 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v312 + 24) = v317;
                  }
                  else
                  {
                    *(_QWORD *)(v312 + 24) = 0;
                    v316 = (uint64_t *)(v318 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v312 + 16) = v312;
                  *(_QWORD *)(v312 + 24) = 0;
                }
                *v316 = v312;
              }
              v312 += 32;
              v314 -= 32;
            }
            while (v314);
          }
          v134 = *(_QWORD *)(v132 + 728);
          if (v134)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 24))(v134, v127);
          v135 = *v130 & 0xFFFFFFFFFFFFFFF8;
          *v129 = v135 | *v129 & 7;
          v129[1] = (unint64_t)v130;
          *(_QWORD *)(v135 + 8) = v129;
          *v130 = *v130 & 7 | (unint64_t)v129;
          v136 = v5[7];
          if (v136)
            (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v136 + 24))(v136, v129);
          LODWORD(v383) = 18;
          v384 = 0;
          LODWORD(v385) = v371;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v129, v128, (const llvm::MachineOperand *)&v383);
          v384 = 0;
          v385 = 0;
          LODWORD(v383) = 0;
          HIDWORD(v383) = (_DWORD)v380;
          v386 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v129, v128, (const llvm::MachineOperand *)&v383);
          v384 = 0;
          v385 = 0;
          LODWORD(v383) = 0;
          HIDWORD(v383) = v378;
          v386 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v129, v128, (const llvm::MachineOperand *)&v383);
          v137 = (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 96);
          v138 = (llvm::MachineInstr *)v129;
          v139 = v128;
        }
        else
        {
          v162 = sub_1C554C050(v378, *(_QWORD *)(a1 + 272));
          if (!v163)
            return 0;
          v164 = (_DWORD)v371 == 40 || (_DWORD)v371 == 36;
          if (v164 && v162 == 256)
          {
            if ((_DWORD)v371 == 36)
              v165 = 37;
            else
              v165 = 41;
            v166 = (int)v380;
            if ((v380 & 0x80000000) != 0
              && (v167 = *(_QWORD *)(a1 + 272), (v380 & 0x7FFFFFFF) < *(_DWORD *)(v167 + 432)))
            {
              v168 = *(_QWORD *)(*(_QWORD *)(v167 + 424) + 8 * (v380 & 0x7FFFFFFF));
            }
            else
            {
              v168 = 0;
            }
            v383 = v168;
            LODWORD(v384) = 0;
            v228 = sub_1C5544694((uint64_t)v5, &v383, 255);
            LODWORD(v383) = v165;
          }
          else
          {
            v4 = 0;
            if ((_DWORD)v371 != 38 || v162 != -1)
              return v4;
            v166 = (int)v380;
            if ((v380 & 0x80000000) != 0
              && (v224 = *(_QWORD *)(a1 + 272), (v380 & 0x7FFFFFFF) < *(_DWORD *)(v224 + 432)))
            {
              v225 = *(_QWORD *)(*(_QWORD *)(v224 + 424) + 8 * (v380 & 0x7FFFFFFF));
            }
            else
            {
              v225 = 0;
            }
            v383 = v225;
            LODWORD(v384) = 0;
            v228 = sub_1C5544694((uint64_t)v5, &v383, 0);
            LODWORD(v383) = 39;
          }
          LODWORD(v385) = 2;
          LODWORD(v386) = v166;
          LODWORD(v388) = 0;
          v389 = v228;
          v390 = v229;
          LODWORD(v391) = 1;
          v309 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 50, 0, 0, &v383, 3, 0);
          v138 = v310;
          v137 = (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 96);
          v139 = (llvm::MachineFunction *)v309;
        }
        llvm::MachineInstr::addOperand(v138, v139, v137);
        v307 = *(_QWORD *)(a2 + 24);
        v308 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v308 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v308 = a2;
            do
              v308 = *(_QWORD *)(v308 + 8);
            while ((*(_WORD *)(v308 + 44) & 8) != 0);
          }
        }
        goto LABEL_605;
      case '3':
        v5[5] = *(_QWORD *)(a2 + 24);
        v5[6] = a2;
        v115 = *(_DWORD **)(a2 + 32);
        LODWORD(v380) = v115[12];
        v116 = v115[1];
        LODWORD(v378) = v115[17];
        LODWORD(v370) = v115[25];
        v117 = v115[33];
        v118 = v115[41];
        if (sub_1C491CCBC((_QWORD *)a1, &v378, (int *)&v370, a2, (int *)&v380))
        {
          LODWORD(v371) = v116;
          LODWORD(v372) = 1;
          LODWORD(v383) = (_DWORD)v380;
          LODWORD(v385) = 2;
          LODWORD(v386) = v378;
          LODWORD(v388) = 0;
          LODWORD(v389) = v370;
          LODWORD(v391) = 0;
        }
        else
        {
          v155 = sub_1C554C050(v370, *(_QWORD *)(a1 + 272));
          if (!v156)
            return 0;
          v157 = (_DWORD)v380 == 40 || (_DWORD)v380 == 36;
          if (v157 && v155 == 256)
          {
            if ((_DWORD)v380 == 36)
              v158 = 37;
            else
              v158 = 41;
            v159 = v378;
            if ((v378 & 0x80000000) != 0
              && (v160 = *(_QWORD *)(a1 + 272), (v378 & 0x7FFFFFFF) < *(_DWORD *)(v160 + 432)))
            {
              v161 = *(_QWORD *)(*(_QWORD *)(v160 + 424) + 8 * (v378 & 0x7FFFFFFF));
            }
            else
            {
              v161 = 0;
            }
            v383 = v161;
            LODWORD(v384) = 0;
            v226 = sub_1C5544694((uint64_t)v5, &v383, 255);
            LODWORD(v371) = v116;
            LODWORD(v372) = 1;
            LODWORD(v383) = v158;
          }
          else
          {
            v4 = 0;
            if ((_DWORD)v380 != 38 || v155 != -1)
              return v4;
            v159 = v378;
            if ((v378 & 0x80000000) != 0
              && (v222 = *(_QWORD *)(a1 + 272), (v378 & 0x7FFFFFFF) < *(_DWORD *)(v222 + 432)))
            {
              v223 = *(_QWORD *)(*(_QWORD *)(v222 + 424) + 8 * (v378 & 0x7FFFFFFF));
            }
            else
            {
              v223 = 0;
            }
            v383 = v223;
            LODWORD(v384) = 0;
            v226 = sub_1C5544694((uint64_t)v5, &v383, 0);
            LODWORD(v371) = v116;
            LODWORD(v372) = 1;
            LODWORD(v383) = 39;
          }
          LODWORD(v385) = 2;
          LODWORD(v386) = v159;
          LODWORD(v388) = 0;
          v389 = v226;
          v390 = v227;
          LODWORD(v391) = 1;
        }
        v392 = v117;
        v393 = 0;
        v394 = v118;
        v395 = 0;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 51, &v371, 1, &v383, 5, 0);
        v307 = *(_QWORD *)(a2 + 24);
        v308 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v308 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v308 = a2;
            do
              v308 = *(_QWORD *)(v308 + 8);
            while ((*(_WORD *)(v308 + 44) & 8) != 0);
          }
        }
        goto LABEL_605;
      default:
        return v4;
    }
    while (1)
    {
      v322 = *(_QWORD *)(v322 + 24);
      if (!v322)
        break;
      if ((*(_BYTE *)(v322 + 3) & 1) == 0)
        return v4;
    }
    v323 = *(_QWORD *)(a1 + 280);
    v324 = *(_DWORD *)(v323 + 264);
    if (!v324)
    {
LABEL_658:
      LODWORD(v371) = v119[1];
      LODWORD(v372) = 1;
      v341 = *(_QWORD *)(v320 + 32);
      LODWORD(v383) = *(_DWORD *)(v341 + 36);
      LODWORD(v385) = 0;
      LODWORD(v386) = *(_DWORD *)(v341 + 68);
      LODWORD(v388) = 0;
      LODWORD(v389) = v119[17];
      LODWORD(v391) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 57, &v371, 1, &v383, 3, v122 | 0x100000000);
      v307 = *(_QWORD *)(a2 + 24);
      v308 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v308 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v308 = a2;
          do
            v308 = *(_QWORD *)(v308 + 8);
          while ((*(_WORD *)(v308 + 44) & 8) != 0);
        }
      }
      goto LABEL_605;
    }
    v325 = *(_QWORD *)(v320 + 24);
    v326 = *(_QWORD *)(v323 + 248);
    v327 = v324 - 1;
    v328 = ((v325 >> 4) ^ (v325 >> 9)) & v327;
    v329 = *(_QWORD *)(v326 + 16 * v328);
    if (v325 == v329)
    {
LABEL_643:
      v332 = *(_QWORD **)(v326 + 16 * v328 + 8);
      if (v332)
      {
        v333 = 0;
        do
        {
          v332 = (_QWORD *)*v332;
          ++v333;
        }
        while (v332);
LABEL_648:
        v334 = *(_QWORD *)(a2 + 24);
        v335 = ((v334 >> 4) ^ (v334 >> 9)) & v327;
        v336 = *(_QWORD *)(v326 + 16 * v335);
        if (v334 == v336)
        {
LABEL_652:
          v339 = *(_QWORD **)(v326 + 16 * v335 + 8);
          if (v339)
          {
            v340 = 0;
            do
            {
              v339 = (_QWORD *)*v339;
              ++v340;
            }
            while (v339);
LABEL_657:
            if (v333 != v340)
              return 0;
            goto LABEL_658;
          }
        }
        else
        {
          v337 = 1;
          while (v336 != -4096)
          {
            v338 = v335 + v337++;
            v335 = v338 & v327;
            v336 = *(_QWORD *)(v326 + 16 * v335);
            if (v334 == v336)
              goto LABEL_652;
          }
        }
        v340 = 0;
        goto LABEL_657;
      }
    }
    else
    {
      v330 = 1;
      while (v329 != -4096)
      {
        v331 = v328 + v330++;
        v328 = v331 & v327;
        v329 = *(_QWORD *)(v326 + 16 * v328);
        if (v325 == v329)
          goto LABEL_643;
      }
    }
    v333 = 0;
    goto LABEL_648;
  }
  if (**(unsigned __int16 **)(a2 + 16) > 0x7Eu)
  {
    if (v6 == 127)
    {
      v146 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
      v147 = *(_QWORD *)(a1 + 272);
      if ((v146 & 0x80000000) != 0 && (v146 & 0x7FFFFFFF) < *(_DWORD *)(v147 + 432))
        v148 = *(void **)(*(_QWORD *)(v147 + 424) + 8 * (v146 & 0x7FFFFFFF));
      else
        v148 = 0;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 318) || v148 != (void *)257 && v148 != (void *)129)
        return 0;
      v154 = (uint64_t *)((v146 & 0x80000000) != 0
                       ? *(_QWORD *)(v147 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v147 + 272) + 8 * v146);
      v237 = *v154;
      if (!v237)
        return 0;
      if ((*(_BYTE *)(v237 + 3) & 1) == 0)
      {
        v237 = *(_QWORD *)(v237 + 24);
        if (!v237 || (*(_BYTE *)(v237 + 3) & 1) == 0)
          return 0;
      }
      v342 = *(_QWORD *)(v237 + 8);
      if (!v342)
        return 0;
      if (**(_WORD **)(v342 + 16) != 127)
        return 0;
      if (*(_DWORD *)(v342 + 40) != 3)
        return 0;
      v343 = *(_QWORD *)(v342 + 32);
      v344 = *(_DWORD *)(v343 + 36);
      v345 = sub_1C554C050(*(_DWORD *)(v343 + 68), v147);
      if (!v346)
        return 0;
      if ((unint64_t)(v345 - 5) > 3)
      {
        v4 = 0;
        if (v345 != 16 || v148 != (void *)257)
          return v4;
        v383 = 129;
        LODWORD(v384) = 0;
        v351 = sub_1C5544694((uint64_t)v5, &v383, 0);
        v353 = v352;
        v371 = 129;
        LODWORD(v372) = 0;
        LODWORD(v383) = v344;
        LODWORD(v385) = 0;
        v354 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 119, &v371, 1, &v383, 1, 0);
        LODWORD(v371) = v146;
        LODWORD(v372) = 1;
        v383 = v351;
        v384 = v353;
        LODWORD(v385) = 1;
        v386 = (uint64_t *)v354;
        v387 = (uint64_t)v355;
        LODWORD(v388) = 1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 76, &v371, 1, &v383, 2, 0);
        v307 = *(_QWORD *)(a2 + 24);
        v308 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v308 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v308 = a2;
            do
              v308 = *(_QWORD *)(v308 + 8);
            while ((*(_WORD *)(v308 + 44) & 8) != 0);
          }
        }
      }
      else
      {
        v371 = (uint64_t)v148;
        LODWORD(v372) = 0;
        LODWORD(v383) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
        LODWORD(v385) = 0;
        v380 = v148;
        LODWORD(v381) = 0;
        v386 = (uint64_t *)sub_1C5544694((uint64_t)v5, (unint64_t *)&v380, v345 - 4);
        v387 = (uint64_t)v347;
        LODWORD(v388) = 1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 127, &v371, 1, &v383, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
        LODWORD(v371) = v146;
        LODWORD(v372) = 1;
        LODWORD(v383) = *(_DWORD *)(*(_QWORD *)(v348 + 32) + 4);
        LODWORD(v385) = 0;
        v380 = v148;
        LODWORD(v381) = 0;
        v386 = (uint64_t *)sub_1C5544694((uint64_t)v5, (unint64_t *)&v380, 4);
        v387 = (uint64_t)v349;
        LODWORD(v388) = 1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 127, &v371, 1, &v383, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
        v307 = *(_QWORD *)(a2 + 24);
        v308 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v308 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v308 = a2;
            do
              v308 = *(_QWORD *)(v308 + 8);
            while ((*(_WORD *)(v308 + 44) & 8) != 0);
          }
        }
      }
LABEL_605:
      sub_1C487FE80(v307 + 40, a2, *(_QWORD *)(v308 + 8));
      return 1;
    }
    if (v6 != 166)
      return v4;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 256) + 322) || (~*(unsigned __int16 *)(a2 + 44) & 0x570) != 0)
      return 0;
    v17 = 0;
    v18 = 0;
    v19 = *(unsigned __int16 *)(a2 + 44);
    v20 = *(_DWORD **)(a2 + 32);
    v21 = v20[1];
    v22 = v20[9];
    v23 = v20[17];
    v24 = v20[25];
    v380 = v382;
    v381 = 0x800000000;
    while (1)
    {
      v25 = *(_QWORD *)(a1 + 272);
      if ((v22 & 0x80000000) != 0)
        v26 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
      else
        v26 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v22);
      v27 = *v26;
      if (!*v26
        || (v28 = v22, (*(_BYTE *)(v27 + 3) & 1) == 0)
        && ((v27 = *(_QWORD *)(v27 + 24)) == 0 || (*(_BYTE *)(v27 + 3) & 1) == 0)
        || (v29 = *(_QWORD *)(v27 + 8)) == 0
        || **(_WORD **)(v29 + 16) != 163
        || *(_DWORD *)(v29 + 40) != 3)
      {
        if ((v18 & 1) == 0)
          goto LABEL_682;
        goto LABEL_429;
      }
      if ((v22 & 0x80000000) != 0)
        v30 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
      else
        v30 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v22);
      v31 = *v30;
      if (!v31
        || (v32 = *(_QWORD *)(v29 + 32),
            v363 = *(unsigned int *)(v32 + 68),
            v366 = *(unsigned int *)(v32 + 36),
            (*(_BYTE *)(v31 + 3) & 1) == 0)
        && ((v31 = *(_QWORD *)(v31 + 24)) == 0 || (*(_BYTE *)(v31 + 3) & 1) == 0)
        || (v33 = *(_QWORD *)(v31 + 8)) == 0)
      {
        if ((v18 & 1) == 0)
        {
LABEL_682:
          v4 = 0;
          goto LABEL_683;
        }
LABEL_429:
        if (v17 >= HIDWORD(v381))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v17 + 1, 4);
          v17 = v381;
        }
        *((_DWORD *)v380 + v17) = v22;
        LODWORD(v381) = v381 + 1;
        goto LABEL_432;
      }
      if ((~*(unsigned __int16 *)(v33 + 44) & 0x570) != 0)
        goto LABEL_682;
      v34 = (uint64_t *)((v22 & 0x80000000) != 0
                      ? *(_QWORD *)(v25 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v25 + 272) + 8 * v22);
      v35 = *v34;
      if (!v35)
        goto LABEL_682;
      while ((*(_BYTE *)(v35 + 3) & 1) != 0)
      {
        v35 = *(_QWORD *)(v35 + 24);
        if (!v35)
          goto LABEL_682;
      }
      while (1)
      {
        v35 = *(_QWORD *)(v35 + 24);
        if (!v35)
          break;
        v4 = 0;
        if ((*(_BYTE *)(v35 + 3) & 1) == 0)
          goto LABEL_683;
      }
      if ((v366 & 0x80000000) != 0)
        v36 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
      else
        v36 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v366);
      v37 = *v36;
      if (v37
        && ((*(_BYTE *)(v37 + 3) & 1) != 0 || (v37 = *(_QWORD *)(v37 + 24)) != 0 && (*(_BYTE *)(v37 + 3) & 1) != 0)
        && (v38 = *(_QWORD *)(v37 + 8)) != 0
        && (**(_WORD **)(v38 + 16) & 0xFFFE) == 0x152)
      {
        LOBYTE(v39) = 1;
      }
      else
      {
        if ((v366 & 0x80000000) != 0)
          v40 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
        else
          v40 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v366);
        v39 = *v40;
        if (!v39)
          goto LABEL_78;
        if ((*(_BYTE *)(v39 + 3) & 1) == 0)
        {
          v39 = *(_QWORD *)(v39 + 24);
          if (!v39)
            goto LABEL_78;
          if ((*(_BYTE *)(v39 + 3) & 1) == 0)
            goto LABEL_75;
        }
        v39 = *(_QWORD *)(v39 + 8);
        if (v39)
        {
          if (**(_WORD **)(v39 + 16) != 178)
            goto LABEL_75;
          v39 = *(unsigned int *)(*(_QWORD *)(v39 + 32) + 36);
          if ((_DWORD)v39)
          {
            v41 = (uint64_t *)((v39 & 0x80000000) != 0
                            ? *(_QWORD *)(v25 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8
                            : *(_QWORD *)(v25 + 272) + 8 * v39);
            v39 = *v41;
            if (v39)
            {
              if ((*(_BYTE *)(v39 + 3) & 1) != 0)
                goto LABEL_76;
              v39 = *(_QWORD *)(v39 + 24);
              if (v39)
              {
                if ((*(_BYTE *)(v39 + 3) & 1) != 0)
                {
LABEL_76:
                  v39 = *(_QWORD *)(v39 + 8);
                  if (v39)
                    LOBYTE(v39) = (**(_WORD **)(v39 + 16) & 0xFFFE) == 338;
                  goto LABEL_78;
                }
LABEL_75:
                LOBYTE(v39) = 0;
              }
            }
          }
        }
      }
LABEL_78:
      if ((v363 & 0x80000000) != 0)
        v42 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v363 & 0x7FFFFFFF) + 8);
      else
        v42 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v363);
      v43 = *v42;
      if (v43)
      {
        if ((*(_BYTE *)(v43 + 3) & 1) != 0 || (v43 = *(_QWORD *)(v43 + 24)) != 0 && (*(_BYTE *)(v43 + 3) & 1) != 0)
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v44)
          {
            if ((**(_WORD **)(v44 + 16) & 0xFFFE) == 0x152)
            {
              LOBYTE(v45) = 1;
              goto LABEL_108;
            }
          }
        }
      }
      if ((v363 & 0x80000000) != 0)
        v46 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v363 & 0x7FFFFFFF) + 8);
      else
        v46 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v363);
      v45 = *v46;
      if (v45)
      {
        if ((*(_BYTE *)(v45 + 3) & 1) == 0)
        {
          v45 = *(_QWORD *)(v45 + 24);
          if (!v45)
            goto LABEL_108;
          if ((*(_BYTE *)(v45 + 3) & 1) == 0)
            goto LABEL_105;
        }
        v45 = *(_QWORD *)(v45 + 8);
        if (!v45)
          goto LABEL_108;
        if (**(_WORD **)(v45 + 16) != 178)
          goto LABEL_105;
        v45 = *(unsigned int *)(*(_QWORD *)(v45 + 32) + 36);
        if ((_DWORD)v45)
        {
          v47 = (uint64_t *)((v45 & 0x80000000) != 0
                          ? *(_QWORD *)(v25 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v25 + 272) + 8 * v45);
          v45 = *v47;
          if (v45)
          {
            if ((*(_BYTE *)(v45 + 3) & 1) != 0)
              goto LABEL_106;
            v45 = *(_QWORD *)(v45 + 24);
            if (v45)
            {
              if ((*(_BYTE *)(v45 + 3) & 1) != 0)
              {
LABEL_106:
                v45 = *(_QWORD *)(v45 + 8);
                if (v45)
                  LOBYTE(v45) = (**(_WORD **)(v45 + 16) & 0xFFFE) == 338;
                goto LABEL_108;
              }
LABEL_105:
              LOBYTE(v45) = 0;
            }
          }
        }
      }
LABEL_108:
      if ((v39 & 1) != 0)
        goto LABEL_176;
      v48 = (uint64_t *)((v366 & 0x80000000) != 0
                      ? *(_QWORD *)(v25 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v25 + 272) + 8 * v366);
      v49 = *v48;
      if (v49)
      {
        if ((*(_BYTE *)(v49 + 3) & 1) != 0 || (v49 = *(_QWORD *)(v49 + 24)) != 0 && (*(_BYTE *)(v49 + 3) & 1) != 0)
        {
          v50 = *(_QWORD *)(v49 + 8);
          if (v50)
          {
            if (**(_WORD **)(v50 + 16) == 177 && *(_DWORD *)(v50 + 40) == 2)
            {
              v51 = *(unsigned int *)(*(_QWORD *)(v50 + 32) + 36);
              v52 = (uint64_t *)((v51 & 0x80000000) != 0
                              ? *(_QWORD *)(v25 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v25 + 272) + 8 * v51);
              v53 = *v52;
              if (v53)
              {
                if ((*(_BYTE *)(v53 + 3) & 1) != 0
                  || (v53 = *(_QWORD *)(v53 + 24)) != 0 && (*(_BYTE *)(v53 + 3) & 1) != 0)
                {
                  v54 = *(_QWORD *)(v53 + 8);
                  if (v54)
                  {
                    if ((**(_WORD **)(v54 + 16) & 0xFFFE) == 0x152)
                      goto LABEL_176;
                  }
                }
              }
              v55 = (uint64_t *)((v51 & 0x80000000) != 0
                              ? *(_QWORD *)(v25 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v25 + 272) + 8 * v51);
              v56 = *v55;
              if (v56)
              {
                if ((*(_BYTE *)(v56 + 3) & 1) != 0
                  || (v56 = *(_QWORD *)(v56 + 24)) != 0 && (*(_BYTE *)(v56 + 3) & 1) != 0)
                {
                  v57 = *(_QWORD *)(v56 + 8);
                  if (v57)
                  {
                    if (**(_WORD **)(v57 + 16) == 178)
                    {
                      v58 = *(unsigned int *)(*(_QWORD *)(v57 + 32) + 36);
                      if ((_DWORD)v58)
                      {
                        v59 = (uint64_t *)((v58 & 0x80000000) != 0
                                        ? *(_QWORD *)(v25 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8
                                        : *(_QWORD *)(v25 + 272) + 8 * v58);
                        v60 = *v59;
                        if (v60)
                        {
                          if ((*(_BYTE *)(v60 + 3) & 1) != 0
                            || (v60 = *(_QWORD *)(v60 + 24)) != 0 && (*(_BYTE *)(v60 + 3) & 1) != 0)
                          {
                            v61 = *(_QWORD *)(v60 + 8);
                            if (v61)
                            {
                              if ((**(_WORD **)(v61 + 16) & 0xFFFE) == 0x152)
                                goto LABEL_176;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v366 & 0x80000000) != 0)
        v62 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
      else
        v62 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v366);
      v63 = *v62;
      if (!v63
        || (*(_BYTE *)(v63 + 3) & 1) == 0 && ((v63 = *(_QWORD *)(v63 + 24)) == 0 || (*(_BYTE *)(v63 + 3) & 1) == 0)
        || (v64 = *(_QWORD *)(v63 + 8)) == 0
        || **(_WORD **)(v64 + 16) != 178
        || (v65 = *(unsigned int *)(*(_QWORD *)(v64 + 32) + 36), !(_DWORD)v65)
        || ((v65 & 0x80000000) != 0
          ? (v66 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8))
          : (v66 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v65)),
            (v67 = *v66) == 0
         || (*(_BYTE *)(v67 + 3) & 1) == 0 && ((v67 = *(_QWORD *)(v67 + 24)) == 0 || (*(_BYTE *)(v67 + 3) & 1) == 0)
         || (v68 = *(_QWORD *)(v67 + 8)) == 0
         || **(_WORD **)(v68 + 16) != 177
         || *(_DWORD *)(v68 + 40) != 2))
      {
LABEL_196:
        v73 = 0;
        goto LABEL_197;
      }
      v69 = *(unsigned int *)(*(_QWORD *)(v68 + 32) + 36);
      v70 = (uint64_t *)((v69 & 0x80000000) != 0
                      ? *(_QWORD *)(v25 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v25 + 272) + 8 * v69);
      if ((v71 = *v70) != 0
        && ((*(_BYTE *)(v71 + 3) & 1) != 0 || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0)
        && (v72 = *(_QWORD *)(v71 + 8)) != 0
        && (**(_WORD **)(v72 + 16) & 0xFFFE) == 0x152)
      {
LABEL_176:
        v73 = 1;
      }
      else
      {
        if ((v69 & 0x80000000) != 0)
          v74 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
        else
          v74 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v69);
        v75 = *v74;
        if (!v75)
          goto LABEL_196;
        if ((*(_BYTE *)(v75 + 3) & 1) == 0)
        {
          v75 = *(_QWORD *)(v75 + 24);
          if (!v75 || (*(_BYTE *)(v75 + 3) & 1) == 0)
            goto LABEL_196;
        }
        v76 = *(_QWORD *)(v75 + 8);
        if (!v76)
          goto LABEL_196;
        if (**(_WORD **)(v76 + 16) != 178)
          goto LABEL_196;
        v77 = *(unsigned int *)(*(_QWORD *)(v76 + 32) + 36);
        if (!(_DWORD)v77)
          goto LABEL_196;
        v78 = (uint64_t *)((v77 & 0x80000000) != 0
                        ? *(_QWORD *)(v25 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v25 + 272) + 8 * v77);
        v79 = *v78;
        if (!v79)
          goto LABEL_196;
        if ((*(_BYTE *)(v79 + 3) & 1) == 0)
        {
          v79 = *(_QWORD *)(v79 + 24);
          if (!v79 || (*(_BYTE *)(v79 + 3) & 1) == 0)
            goto LABEL_196;
        }
        v80 = *(_QWORD *)(v79 + 8);
        if (!v80)
          goto LABEL_196;
        v73 = (**(_WORD **)(v80 + 16) & 0xFFFE) == 338;
      }
LABEL_197:
      if ((v45 & 1) != 0)
        goto LABEL_265;
      v81 = (uint64_t *)((v363 & 0x80000000) != 0
                      ? *(_QWORD *)(v25 + 24) + 16 * (v363 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v25 + 272) + 8 * v363);
      v82 = *v81;
      if (v82)
      {
        if ((*(_BYTE *)(v82 + 3) & 1) != 0 || (v82 = *(_QWORD *)(v82 + 24)) != 0 && (*(_BYTE *)(v82 + 3) & 1) != 0)
        {
          v83 = *(_QWORD *)(v82 + 8);
          if (v83)
          {
            if (**(_WORD **)(v83 + 16) == 177 && *(_DWORD *)(v83 + 40) == 2)
            {
              v84 = *(unsigned int *)(*(_QWORD *)(v83 + 32) + 36);
              v85 = (uint64_t *)((v84 & 0x80000000) != 0
                              ? *(_QWORD *)(v25 + 24) + 16 * (v84 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v25 + 272) + 8 * v84);
              v86 = *v85;
              if (v86)
              {
                if ((*(_BYTE *)(v86 + 3) & 1) != 0
                  || (v86 = *(_QWORD *)(v86 + 24)) != 0 && (*(_BYTE *)(v86 + 3) & 1) != 0)
                {
                  v87 = *(_QWORD *)(v86 + 8);
                  if (v87)
                  {
                    if ((**(_WORD **)(v87 + 16) & 0xFFFE) == 0x152)
                      goto LABEL_265;
                  }
                }
              }
              v88 = (uint64_t *)((v84 & 0x80000000) != 0
                              ? *(_QWORD *)(v25 + 24) + 16 * (v84 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v25 + 272) + 8 * v84);
              v89 = *v88;
              if (v89)
              {
                if ((*(_BYTE *)(v89 + 3) & 1) != 0
                  || (v89 = *(_QWORD *)(v89 + 24)) != 0 && (*(_BYTE *)(v89 + 3) & 1) != 0)
                {
                  v90 = *(_QWORD *)(v89 + 8);
                  if (v90)
                  {
                    if (**(_WORD **)(v90 + 16) == 178)
                    {
                      v91 = *(unsigned int *)(*(_QWORD *)(v90 + 32) + 36);
                      if ((_DWORD)v91)
                      {
                        v92 = (uint64_t *)((v91 & 0x80000000) != 0
                                        ? *(_QWORD *)(v25 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8
                                        : *(_QWORD *)(v25 + 272) + 8 * v91);
                        v93 = *v92;
                        if (v93)
                        {
                          if ((*(_BYTE *)(v93 + 3) & 1) != 0
                            || (v93 = *(_QWORD *)(v93 + 24)) != 0 && (*(_BYTE *)(v93 + 3) & 1) != 0)
                          {
                            v94 = *(_QWORD *)(v93 + 8);
                            if (v94)
                            {
                              if ((**(_WORD **)(v94 + 16) & 0xFFFE) == 0x152)
                              {
LABEL_265:
                                v106 = 1;
                                goto LABEL_286;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v363 & 0x80000000) != 0)
        v95 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v363 & 0x7FFFFFFF) + 8);
      else
        v95 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v363);
      v96 = *v95;
      if (!v96)
        goto LABEL_285;
      if ((*(_BYTE *)(v96 + 3) & 1) == 0)
      {
        v96 = *(_QWORD *)(v96 + 24);
        if (!v96 || (*(_BYTE *)(v96 + 3) & 1) == 0)
          goto LABEL_285;
      }
      v97 = *(_QWORD *)(v96 + 8);
      if (!v97)
        goto LABEL_285;
      if (**(_WORD **)(v97 + 16) != 178)
        goto LABEL_285;
      v98 = *(unsigned int *)(*(_QWORD *)(v97 + 32) + 36);
      if (!(_DWORD)v98)
        goto LABEL_285;
      v99 = (uint64_t *)((v98 & 0x80000000) != 0
                      ? *(_QWORD *)(v25 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v25 + 272) + 8 * v98);
      v100 = *v99;
      if (!v100)
        goto LABEL_285;
      if ((*(_BYTE *)(v100 + 3) & 1) == 0)
      {
        v100 = *(_QWORD *)(v100 + 24);
        if (!v100 || (*(_BYTE *)(v100 + 3) & 1) == 0)
          goto LABEL_285;
      }
      v101 = *(_QWORD *)(v100 + 8);
      if (!v101 || **(_WORD **)(v101 + 16) != 177 || *(_DWORD *)(v101 + 40) != 2)
        goto LABEL_285;
      v102 = *(unsigned int *)(*(_QWORD *)(v101 + 32) + 36);
      if ((v102 & 0x80000000) != 0)
        v103 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
      else
        v103 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v102);
      v104 = *v103;
      if (v104)
      {
        if ((*(_BYTE *)(v104 + 3) & 1) != 0 || (v104 = *(_QWORD *)(v104 + 24)) != 0 && (*(_BYTE *)(v104 + 3) & 1) != 0)
        {
          v105 = *(_QWORD *)(v104 + 8);
          if (v105)
          {
            if ((**(_WORD **)(v105 + 16) & 0xFFFE) == 0x152)
              goto LABEL_265;
          }
        }
      }
      v107 = (uint64_t *)((v102 & 0x80000000) != 0
                       ? *(_QWORD *)(v25 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v25 + 272) + 8 * v102);
      v108 = *v107;
      if (!v108)
        goto LABEL_285;
      if ((*(_BYTE *)(v108 + 3) & 1) == 0)
      {
        v108 = *(_QWORD *)(v108 + 24);
        if (!v108 || (*(_BYTE *)(v108 + 3) & 1) == 0)
          goto LABEL_285;
      }
      if ((v109 = *(_QWORD *)(v108 + 8)) != 0
        && **(_WORD **)(v109 + 16) == 178
        && (v110 = *(unsigned int *)(*(_QWORD *)(v109 + 32) + 36), (_DWORD)v110)
        && ((v110 & 0x80000000) != 0
          ? (v111 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v110 & 0x7FFFFFFF) + 8))
          : (v111 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v110)),
            (v112 = *v111) != 0
         && ((*(_BYTE *)(v112 + 3) & 1) != 0 || (v112 = *(_QWORD *)(v112 + 24)) != 0 && (*(_BYTE *)(v112 + 3) & 1) != 0)
         && (v113 = *(_QWORD *)(v112 + 8)) != 0))
      {
        v106 = (**(_WORD **)(v113 + 16) & 0xFFFE) == 338;
      }
      else
      {
LABEL_285:
        v106 = 0;
      }
LABEL_286:
      v18 |= v45 | v39;
      if (v73)
      {
        v114 = v381;
        if (v381 >= (unint64_t)HIDWORD(v381))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v381 + 1, 4);
          v114 = v381;
        }
        *((_DWORD *)v380 + v114) = v366;
        v17 = v381 + 1;
        LODWORD(v381) = v381 + 1;
        if (!v106)
          goto LABEL_296;
      }
      else
      {
        if (!v106)
        {
          if ((v18 & 1) == 0)
            goto LABEL_682;
          v17 = v381;
          v22 = v28;
          goto LABEL_429;
        }
        v17 = v381;
      }
      if (v17 >= HIDWORD(v381))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v17 + 1, 4);
        v17 = v381;
      }
      *((_DWORD *)v380 + v17) = v363;
      v17 = v381 + 1;
      LODWORD(v381) = v381 + 1;
      if (v73)
      {
        if ((v18 & 1) == 0)
          goto LABEL_682;
LABEL_432:
        if (v21 < 0 && (v217 = *(_QWORD *)(a1 + 272), (v21 & 0x7FFFFFFFu) < *(_DWORD *)(v217 + 432)))
          v218 = *(_QWORD *)(*(_QWORD *)(v217 + 424) + 8 * (v21 & 0x7FFFFFFF));
        else
          v218 = 0;
        v230 = *(_QWORD *)(a2 + 24);
        v391 = 0;
        v231 = *(_QWORD *)(v230 + 32);
        v383 = (unint64_t)&off_1E816EC08;
        v384 = v231;
        v386 = *(uint64_t **)(v231 + 40);
        v385 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v231 + 16) + 104))(*(_QWORD *)(v231 + 16));
        v232 = *(_QWORD **)(a2 + 24);
        v387 = 0;
        v388 = v232;
        v389 = a2;
        v390 = 0;
        if ((uint64_t *)(a2 + 56) != &v387)
        {
          v387 = *(_QWORD *)(a2 + 56);
          if (v387)
            llvm::MetadataTracking::track((uint64_t)&v387, (unsigned __int8 *)v387, 2);
        }
        for (i = v381; (_DWORD)v381; i = v381)
        {
          v234 = *((_DWORD *)v380 + i - 1);
          LODWORD(v381) = i - 1;
          v378 = v218;
          v379 = 0;
          LODWORD(v371) = v234;
          LODWORD(v373) = 0;
          v374 = v23;
          v375 = 0;
          v376 = v24;
          v377 = 0;
          sub_1C5548620((uint64_t *)&v383, 166, &v378, 1, (int *)&v371, 3, v19 | 0x100000000);
          v24 = *(_DWORD *)(*(_QWORD *)(v235 + 32) + 4);
        }
        LODWORD(v378) = v21;
        v379 = 1;
        LODWORD(v371) = v24;
        LODWORD(v373) = 0;
        (*(void (**)(unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(v383 + 32))(&v383, 19, &v378, 1, &v371, 1, 0);
        v236 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v236 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v236 = a2;
            do
              v236 = *(_QWORD *)(v236 + 8);
            while ((*(_WORD *)(v236 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v236 + 8));
        v383 = (unint64_t)&off_1E816EC08;
        if (v387)
          llvm::MetadataTracking::untrack((uint64_t)&v387, (unsigned __int8 *)v387);
        v4 = 1;
LABEL_683:
        if (v380 != v382)
          free(v380);
        return v4;
      }
LABEL_296:
      if (v73)
        v22 = v363;
      else
        v22 = v366;
    }
  }
  if (v6 == 66)
  {
    v140 = *(_QWORD *)(a2 + 32);
    v141 = (const char *)*(unsigned int *)(v140 + 36);
    v142 = (const char *)*(unsigned int *)(v140 + 68);
    v143 = *(_QWORD *)(a1 + 264);
    sub_1C54EB4A0(v143, v141, (uint64_t)&v383);
    sub_1C54EB4A0(v143, v142, (uint64_t)&v371);
    v144 = v384;
    if (v384 >= 0x41)
    {
      v169 = (((unint64_t)v384 + 63) >> 3) & 0x3FFFFFF8;
      v170 = (char *)operator new[]();
      memcpy(v170, (const void *)v383, v169);
      v171 = 0;
      v172 = v371;
      do
      {
        *(_QWORD *)&v170[v171] |= *(_QWORD *)(v172 + v171);
        v171 += 8;
      }
      while (v169 != v171);
      LODWORD(v381) = v144;
      v380 = v170;
      v145 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v380) == v144;
      MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
    }
    else if ((_DWORD)v384)
    {
      v145 = (v371 | v383) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v384;
    }
    else
    {
      v145 = 1;
    }
    if (v374 >= 0x41 && v373)
      MEMORY[0x1CAA32F9C](v373, 0x1000C8000313F17);
    if (v372 >= 0x41 && v371)
      MEMORY[0x1CAA32F9C](v371, 0x1000C8000313F17);
    if (v386 >= 0x41 && v385)
      MEMORY[0x1CAA32F9C](v385, 0x1000C8000313F17);
    if (v384 >= 0x41 && v383)
      MEMORY[0x1CAA32F9C](v383, 0x1000C8000313F17);
    if (!v145)
      return 0;
    sub_1C554C050((int)v142, *(_QWORD *)(a1 + 272));
    if (!v219)
    {
      v220 = *(_QWORD *)(a1 + 272);
      v221 = (uint64_t *)((v141 & 0x80000000) != 0
                       ? *(_QWORD *)(v220 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v220 + 272) + 8 * (_QWORD)v141);
      v306 = *v221;
      if (v306)
      {
        if ((*(_BYTE *)(v306 + 3) & 1) != 0 || (v306 = *(_QWORD *)(v306 + 24)) != 0 && (*(_BYTE *)(v306 + 3) & 1) != 0)
        {
          v350 = *(_QWORD *)(v306 + 8);
          if (v350)
          {
            if (**(_WORD **)(v350 + 16) == 127 && *(_DWORD *)(v350 + 40) == 3)
            {
              v356 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v350 + 32) + 68), v220);
              if (v357)
              {
                if (v356 >= 5)
                  v358 = (int)v142;
                else
                  v358 = (int)v141;
                if (v356 < 5)
                  LODWORD(v141) = (_DWORD)v142;
                LODWORD(v142) = v358;
              }
            }
          }
        }
      }
    }
    LODWORD(v371) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    LODWORD(v372) = 1;
    LODWORD(v383) = (_DWORD)v141;
    LODWORD(v385) = 0;
    LODWORD(v386) = (_DWORD)v142;
    LODWORD(v388) = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 45, &v371, 1, &v383, 2, 0);
    v307 = *(_QWORD *)(a2 + 24);
    v308 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v308 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v308 = a2;
        do
          v308 = *(_QWORD *)(v308 + 8);
        while ((*(_WORD *)(v308 + 44) & 8) != 0);
      }
    }
    goto LABEL_605;
  }
  if (v6 != 77)
    return v4;
  v12 = *(_DWORD *)(a2 + 40);
  if ((v12 - 6) < 0xFFFFFFFD)
    return 0;
  v13 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  if (v13 < 0 && (v14 = *(_QWORD *)(a1 + 272), v15 = v13 & 0x7FFFFFFF, v15 < *(_DWORD *)(v14 + 432)))
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 424) + 8 * v15);
  else
    v16 = 0;
  v383 = v16;
  v174 = sub_1C4825F50(&v383);
  if ((_DWORD)v173 == 1)
  if (v174 != 16)
    return 0;
  v175 = 0;
  v367 = (v12 - 1);
  v176 = 1;
LABEL_368:
  v364 = v175;
  v177 = *(_QWORD *)(a1 + 272);
  v178 = 32 * v176;
  do
  {
    v179 = *(_QWORD *)(a2 + 32);
    LOWORD(v180) = sub_1C554C050(*(_DWORD *)(v179 + v178 + 4), v177);
    v182 = v181;
    LOWORD(v183) = sub_1C554C050(*(_DWORD *)(v179 + v178 + 36), *(_QWORD *)(a1 + 272));
    v185 = v184;
    v186 = *(unsigned int *)(v179 + v178 + 4);
    v177 = *(_QWORD *)(a1 + 272);
    v187 = *(_QWORD *)(v177 + 24);
    v188 = *(_QWORD *)(v177 + 272);
    if ((int)v186 >= 0)
      v189 = (uint64_t *)(v188 + 8 * v186);
    else
      v189 = (uint64_t *)(v187 + 16 * (v186 & 0x7FFFFFFF) + 8);
    v190 = *v189;
    if ((*(_BYTE *)(v190 + 3) & 1) == 0)
      v190 = *(_QWORD *)(v190 + 24);
    v191 = *(_QWORD *)(v190 + 8);
    if (**(_WORD **)(v191 + 16) == 121)
      v192 = *(_QWORD *)(*(_QWORD *)(v191 + 32) + 48);
    else
      v192 = 0;
    v193 = *(unsigned int *)(v179 + v178 + 36);
    v194 = (uint64_t *)(v187 + 16 * (v193 & 0x7FFFFFFF) + 8);
    v195 = (uint64_t *)(v188 + 8 * v193);
    if ((int)v193 >= 0)
      v194 = v195;
    v196 = *v194;
    if ((*(_BYTE *)(v196 + 3) & 1) == 0)
      v196 = *(_QWORD *)(v196 + 24);
    v197 = *(_QWORD *)(v196 + 8);
    if (**(_WORD **)(v197 + 16) == 121)
      v198 = *(_QWORD *)(*(_QWORD *)(v197 + 32) + 48);
    else
      v198 = 0;
    v199 = v182;
    if (v182)
      v200 = 0;
    else
      v200 = v192 == 0;
    if (!v200)
    {
      v201 = v185;
      if (v185 || v198 != 0)
      {
        if (v199)
        {
          LODWORD(v180) = (unsigned __int16)v180;
        }
        else
        {
          v204 = *(void **)(v192 + 32);
          v203 = (llvm::detail::DoubleAPFloat *)(v192 + 32);
          if (v204 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v203, (unsigned int *)&v383);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v203, (unsigned int *)&v383);
          v205 = &v383;
          if (v384 >= 0x41)
            v205 = (unint64_t *)v383;
          v180 = *v205;
          if (v384 >= 0x41 && v383)
            MEMORY[0x1CAA32F9C]();
        }
        if (v201)
        {
          LODWORD(v183) = (unsigned __int16)v183;
        }
        else
        {
          v207 = *(void **)(v198 + 32);
          v206 = (llvm::detail::DoubleAPFloat *)(v198 + 32);
          if (v207 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v206, (unsigned int *)&v383);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v206, (unsigned int *)&v383);
          v208 = &v383;
          if (v384 >= 0x41)
            v208 = (unint64_t *)v383;
          v183 = *v208;
          if (v384 >= 0x41 && v383)
            MEMORY[0x1CAA32F9C]();
        }
        v383 = 257;
        LODWORD(v384) = 0;
        v371 = sub_1C5544694((uint64_t)v5, &v383, v180 | ((_DWORD)v183 << 16));
        v372 = v209;
        LODWORD(v373) = 1;
        v383 = (unint64_t)&v385;
        v385 = 129;
        LODWORD(v386) = 0;
        v387 = 129;
        LODWORD(v388) = 0;
        v384 = 0x800000002;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 74, &v385, 2, &v371, 1, 0);
        v211 = v210;
        if ((uint64_t *)v383 != &v385)
          free((void *)v383);
        llvm::MachineOperand::setReg(v179 + v178, *(_DWORD *)(*(_QWORD *)(v211 + 32) + 4));
        llvm::MachineOperand::setReg(v179 + v178 + 32, *(_DWORD *)(*(_QWORD *)(v211 + 32) + 36));
        v176 += 2;
        v175 = 1;
        if (v176 >= v367)
          goto LABEL_436;
        goto LABEL_368;
      }
    }
    v176 += 2;
    v178 += 64;
  }
  while (v176 < v367);
  if ((v364 & 1) != 0)
    goto LABEL_436;
  v238 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  if (v238 < 0 && (v239 = v238 & 0x7FFFFFFF, v239 < *(_DWORD *)(v177 + 432)))
    v240 = *(void **)(*(_QWORD *)(v177 + 424) + 8 * v239);
  else
    v240 = 0;
  v380 = v240;
  v242 = sub_1C4825F50((unint64_t *)&v380);
  if ((_DWORD)v241 == 1)
  if (v242 != 16)
    return 0;
  v243 = 0;
  v244 = &v385;
  v245 = 1;
  while (2)
  {
    v246 = *(_QWORD *)(a2 + 32);
    v247 = *(_QWORD *)(a1 + 272);
    while (1)
    {
      v248 = v246 + 32 * v245;
      v251 = *(_DWORD *)(v248 + 4);
      v250 = (unsigned int *)(v248 + 4);
      v249 = v251;
      if ((v251 & 0x80000000) != 0)
        v252 = (uint64_t *)(*(_QWORD *)(v247 + 24) + 16 * (v249 & 0x7FFFFFFF) + 8);
      else
        v252 = (uint64_t *)(*(_QWORD *)(v247 + 272) + 8 * v249);
      v253 = *v252;
      if (v253)
      {
        if ((*(_BYTE *)(v253 + 3) & 1) != 0)
          goto LABEL_527;
        v253 = *(_QWORD *)(v253 + 24);
        if (!v253)
          goto LABEL_487;
        if ((*(_BYTE *)(v253 + 3) & 1) != 0)
LABEL_527:
          v253 = *(_QWORD *)(v253 + 8);
        else
          v253 = 0;
      }
LABEL_487:
      v254 = v246 + 32 * (v245 + 1);
      v257 = *(_DWORD *)(v254 + 4);
      v256 = (unsigned int *)(v254 + 4);
      v255 = v257;
      if ((v257 & 0x80000000) != 0)
        v258 = (uint64_t *)(*(_QWORD *)(v247 + 24) + 16 * (v255 & 0x7FFFFFFF) + 8);
      else
        v258 = (uint64_t *)(*(_QWORD *)(v247 + 272) + 8 * v255);
      v259 = *v258;
      if (!v259)
        goto LABEL_491;
      if ((*(_BYTE *)(v259 + 3) & 1) != 0)
      {
LABEL_528:
        v259 = *(_QWORD *)(v259 + 8);
        goto LABEL_491;
      }
      v259 = *(_QWORD *)(v259 + 24);
      if (v259)
      {
        if ((*(_BYTE *)(v259 + 3) & 1) != 0)
          goto LABEL_528;
        v259 = 0;
      }
LABEL_491:
      if (**(_WORD **)(v253 + 16) == 318 && **(_WORD **)(v259 + 16) == 318)
      {
        v260 = (uint64_t *)((v249 & 0x80000000) != 0
                         ? *(_QWORD *)(v247 + 24) + 16 * (v249 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v247 + 272) + 8 * v249);
        v261 = *v260;
        if (v261)
        {
          while ((*(_BYTE *)(v261 + 3) & 1) != 0)
          {
            v261 = *(_QWORD *)(v261 + 24);
            if (!v261)
              goto LABEL_517;
          }
          while (1)
          {
            v261 = *(_QWORD *)(v261 + 24);
            if (!v261)
              break;
            if ((*(_BYTE *)(v261 + 3) & 1) == 0)
              goto LABEL_517;
          }
          v262 = (uint64_t *)((v255 & 0x80000000) != 0
                           ? *(_QWORD *)(v247 + 24) + 16 * (v255 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v247 + 272) + 8 * v255);
          v263 = *v262;
          if (v263)
          {
            while ((*(_BYTE *)(v263 + 3) & 1) != 0)
            {
              v263 = *(_QWORD *)(v263 + 24);
              if (!v263)
                goto LABEL_517;
            }
            while (1)
            {
              v263 = *(_QWORD *)(v263 + 24);
              if (!v263)
                break;
              if ((*(_BYTE *)(v263 + 3) & 1) == 0)
                goto LABEL_517;
            }
            v264 = *(_QWORD *)(*(_QWORD *)(v253 + 32) + 48);
            if (*(_DWORD *)(*(_QWORD *)(v259 + 32) + 48) - *(_QWORD *)(*(_QWORD *)(v253 + 32) + 48) == 2
              && ((v264 + 3) & 0x1FFFFFFFCLL) == v264)
            {
              break;
            }
          }
        }
      }
LABEL_517:
      v245 += 2;
      if (v245 >= v367)
      {
        if ((v243 & 1) != 0)
          goto LABEL_436;
        return 0;
      }
    }
    v361 = v253;
    v362 = v259;
    v365 = v244;
    v359 = sub_1C55437B8(v5, 0x13Eu);
    v267 = (unint64_t *)v5[6];
    v268 = *(_QWORD *)(v5[5] + 40);
    *(_QWORD *)(v266 + 24) = v268;
    v269 = *(_QWORD *)(v268 + 32);
    v270 = (unint64_t *)v266;
    v271 = *(unsigned int *)(v266 + 40);
    if ((_DWORD)v271)
    {
      v299 = *(_QWORD *)(v266 + 32);
      v300 = *(_QWORD *)(v269 + 40);
      v301 = 32 * v271;
      do
      {
        if (!*(_BYTE *)v299)
        {
          v302 = *(unsigned int *)(v299 + 4);
          if ((int)v302 >= 0)
            v303 = (uint64_t *)(*(_QWORD *)(v300 + 272) + 8 * v302);
          else
            v303 = (uint64_t *)(*(_QWORD *)(v300 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8);
          v304 = *v303;
          if (*v303)
          {
            v305 = *(_QWORD *)(v304 + 16);
            *(_QWORD *)(v304 + 16) = v299;
            *(_QWORD *)(v299 + 16) = v305;
            if ((*(_BYTE *)(v299 + 3) & 1) != 0)
            {
              *(_QWORD *)(v299 + 24) = v304;
            }
            else
            {
              *(_QWORD *)(v299 + 24) = 0;
              v303 = (uint64_t *)(v305 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v299 + 16) = v299;
            *(_QWORD *)(v299 + 24) = 0;
          }
          *v303 = v299;
        }
        v299 += 32;
        v301 -= 32;
      }
      while (v301);
    }
    v272 = *(_QWORD *)(v269 + 728);
    if (v272)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v272 + 24))(v272, v266);
    v273 = *v267 & 0xFFFFFFFFFFFFFFF8;
    *v270 = v273 | *v270 & 7;
    v270[1] = (unint64_t)v267;
    *(_QWORD *)(v273 + 8) = v270;
    *v267 = *v267 & 7 | (unint64_t)v270;
    v274 = v5[7];
    if (v274)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v274 + 24))(v274, v270);
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 272), 257, "", 0);
    v384 = 0;
    *v365 = 0;
    v365[1] = 0;
    LODWORD(v383) = 0x1000000;
    HIDWORD(v383) = GenericVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v270, v359, (const llvm::MachineOperand *)&v383);
    LODWORD(v383) = 1;
    v384 = 0;
    v385 = v264;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v270, v359, (const llvm::MachineOperand *)&v383);
    v371 = (uint64_t)v359;
    v372 = (void **)v270;
    LODWORD(v373) = 1;
    v383 = (unint64_t)v365;
    v385 = 129;
    LODWORD(v386) = 0;
    v387 = 129;
    LODWORD(v388) = 0;
    v384 = 0x800000002;
    (*(void (**)(_QWORD *, uint64_t))(*v5 + 32))(v5, 74);
    v277 = v276;
    if ((uint64_t *)v383 != v365)
      free((void *)v383);
    v278 = *v250;
    v279 = *(_DWORD *)(*(_QWORD *)(v277 + 32) + 4);
    v280 = *(_QWORD **)(a1 + 272);
    v360 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v280 + 16) + 176))(*(_QWORD *)(*v280 + 16));
    if ((v278 & 0x80000000) != 0)
      v281 = (uint64_t *)(v280[3] + 16 * (v278 & 0x7FFFFFFF) + 8);
    else
      v281 = (uint64_t *)(v280[34] + 8 * v278);
    v282 = *v281;
    if (*v281)
    {
      do
      {
        v283 = *(_QWORD *)(v282 + 24);
        if (v279 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v282, v279, (uint64_t)v360);
        else
          llvm::MachineOperand::setReg(v282, v279);
        v282 = v283;
      }
      while (v283);
    }
    v284 = *(_QWORD **)(a1 + 272);
    v285 = v284[3];
    v286 = *(_QWORD *)(v285 + 16 * (v278 & 0x7FFFFFFF));
    if ((v286 & 4) == 0)
    {
      v287 = v286 & 0xFFFFFFFFFFFFFFF8;
      if (v287)
        *(_QWORD *)(v285 + 16 * (v279 & 0x7FFFFFFF)) = v287;
    }
    v288 = *v256;
    v289 = *(_DWORD *)(*(_QWORD *)(v277 + 32) + 36);
    v290 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v284 + 16) + 176))(*(_QWORD *)(*v284 + 16));
    if ((v288 & 0x80000000) != 0)
      v291 = (uint64_t *)(v284[3] + 16 * (v288 & 0x7FFFFFFF) + 8);
    else
      v291 = (uint64_t *)(v284[34] + 8 * v288);
    v292 = *v291;
    if (*v291)
    {
      do
      {
        v293 = *(_QWORD *)(v292 + 24);
        if (v289 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v292, v289, v290);
        else
          llvm::MachineOperand::setReg(v292, v289);
        v292 = v293;
      }
      while (v293);
    }
    v294 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 24);
    v295 = *(_QWORD *)(v294 + 16 * (v288 & 0x7FFFFFFF));
    if ((v295 & 4) == 0)
    {
      v296 = v295 & 0xFFFFFFFFFFFFFFF8;
      if (v296)
        *(_QWORD *)(v294 + 16 * (v289 & 0x7FFFFFFF)) = v296;
    }
    v297 = v361;
    if ((*(_BYTE *)v361 & 4) == 0)
    {
      v297 = v361;
      if ((*(_WORD *)(v361 + 44) & 8) != 0)
      {
        v297 = v361;
        do
          v297 = *(_QWORD *)(v297 + 8);
        while ((*(_WORD *)(v297 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v361 + 24) + 40, v361, *(_QWORD *)(v297 + 8));
    v298 = v362;
    if ((*(_BYTE *)v362 & 4) == 0)
    {
      v298 = v362;
      if ((*(_WORD *)(v362 + 44) & 8) != 0)
      {
        v298 = v362;
        do
          v298 = *(_QWORD *)(v298 + 8);
        while ((*(_WORD *)(v298 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v362 + 24) + 40, v362, *(_QWORD *)(v298 + 8));
    v245 += 2;
    v243 = 1;
    v244 = v365;
    if (v245 < v367)
      continue;
    break;
  }
LABEL_436:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 40))(*(_QWORD *)(a1 + 288), a2);
  return 1;
}

uint64_t sub_1C491FB00(uint64_t *a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 272);
  v7 = *(unsigned int *)(a2 + 4);
  if ((v7 & 0x80000000) != 0)
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v7);
  v9 = *v8;
  if (!v9)
    return 0;
  while ((*(_BYTE *)(v9 + 3) & 1) != 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9)
      return 0;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9)
      break;
    if ((*(_BYTE *)(v9 + 3) & 1) == 0)
      return 0;
  }
  v10 = (uint64_t *)((v7 & 0x80000000) != 0
                  ? *(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v6 + 272) + 8 * v7);
  v11 = *v10;
  if (!v11)
    return 0;
  v33 = a2;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11 || (*(_BYTE *)(v11 + 3) & 1) == 0)
      return 0;
  }
  v16 = *(_QWORD *)(v11 + 8);
  if (!v16)
    return 0;
  if (**(_WORD **)(v16 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v16 + 40) != 3)
    return 0;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_DWORD *)(v17 + 36);
  v19 = sub_1C554C050(*(_DWORD *)(v17 + 68), v6);
  if (!v20)
    return 0;
  *a3 = 1;
  if (v19 <= *(unsigned int *)a1[1] && a4 == 0)
    return 0;
  v22 = 1 << v19;
  v23 = *(unsigned __int16 *)(a1[2] + 44);
  v24 = *(_QWORD *)a1[3];
  if (v24 != *(_QWORD *)a1[4])
  {
    v30 = a1[5];
    v46 = *(_QWORD *)a1[3];
    v47 = 0;
    v36[0] = v18;
    v37 = 0;
    v34 = v24;
    v35 = 0;
    v38 = sub_1C5544694(v30, &v34, v22);
    v39 = v31;
    v40 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, 47, &v46, 1, v36, 2, v23 | 0x100000000);
    goto LABEL_32;
  }
  if (v22 != 0x100000000 << v19 >> 32)
    return 0;
  v25 = *(_QWORD *)(v5 + 272);
  LOWORD(v46) = 0;
  v36[0] = v18;
  v26 = sub_1C4925D94((uint64_t)&v46, v25, v36);
  result = 0;
  if (v26)
  {
    v27 = a1[5];
    v46 = *(_QWORD *)a1[3];
    v47 = 0;
    v36[0] = v18;
    v37 = 0;
    v38 = 0;
    v40 = 3;
    v34 = v46;
    v35 = 0;
    v41 = sub_1C5544694(v27, &v34, v22);
    v42 = v28;
    v43 = 1;
    v44 = 0;
    v45 = 3;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v27 + 32))(v27, 313, &v46, 1, v36, 4, v23 | 0x100000000);
LABEL_32:
    v32 = v29;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 288) + 32))(*(_QWORD *)(v5 + 288), a1[2]);
    llvm::MachineOperand::setReg(v33, *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 288) + 40))(*(_QWORD *)(v5 + 288), a1[2]);
    return 1;
  }
  return result;
}

uint64_t sub_1C491FDE4(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  int v33;
  _BOOL4 v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  const llvm::APFloat *v45;
  llvm::APFloatBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  int8x8_t v82;
  uint64_t v83;
  unsigned int v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  _DWORD *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint8x8_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t i;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  BOOL v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  llvm::MachineFunction *v261;
  llvm::MachineInstr *v262;
  llvm::MachineInstr *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  BOOL v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  unsigned int v291;
  BOOL v292;
  BOOL v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  llvm::MachineInstr *v299;
  llvm::MachineInstr *v300;
  int v301;
  llvm::MachineFunction *v302;
  llvm::MachineInstr *v303;
  char v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  _DWORD *v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  int v331;
  int *v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t *v336;
  _BOOL4 v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  char v342;
  int v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int GenericVirtualRegister;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char v370;
  int v371;
  uint64_t v372;
  char v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char v382;
  uint64_t v383;
  char v384;
  unint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  char v389;
  uint64_t v390;
  char v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  int v415;
  char v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  unint64_t v430;
  int v431;
  char v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  void *v439;
  uint64_t v440;
  _BYTE v441[32];
  unint64_t v442;
  int v443;
  int v444;
  void *v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  void **v453;
  uint64_t v454;
  unint64_t v455;
  int v456;
  uint64_t v457;
  unint64_t v458;
  int v459;
  uint64_t v460;
  unint64_t v461;
  int v462;
  uint64_t v463;

  v463 = *MEMORY[0x1E0C80C00];
  a4[5] = *(_QWORD *)(a2 + 24);
  a4[6] = a2;
  v439 = v441;
  v440 = 0x400000000;
  v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 <= 0x7F)
  {
    if (**(unsigned __int16 **)(a2 + 16) <= 0x77u)
    {
      if (v8 != 45)
      {
        if (v8 != 116)
          goto LABEL_378;
        v9 = *(unsigned int *)(a2 + 40);
        v10 = *(_QWORD *)(a2 + 32);
        if ((_DWORD)v9)
        {
          v11 = 0;
          v12 = *(unsigned __int8 **)(a2 + 32);
          while (1)
          {
            v13 = *v12;
            v12 += 32;
            if (v13 == 17)
              break;
            if (v9 == ++v11)
              goto LABEL_9;
          }
        }
        else
        {
LABEL_9:
          LODWORD(v11) = -1;
        }
        v14 = *(_DWORD *)(v10 + 32 * v11 + 16);
        if (v14 != 2131)
        {
          if (v14 == 2579 || v14 == 2488)
          {
            v15 = *(unsigned int *)(v10 + 68);
            v16 = a1[5];
            if ((v15 & 0x80000000) != 0)
              v17 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
            else
              v17 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v15);
            v119 = *v17;
            if ((*(_BYTE *)(v119 + 3) & 1) == 0)
              v119 = *(_QWORD *)(v119 + 24);
            v120 = *(_QWORD *)(v119 + 8);
            if (**(_WORD **)(v120 + 16) == 51
              && !(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v120 + 44) & 0x7C0) == 0)))
            {
              v121 = *(_DWORD *)(*(_QWORD *)(v120 + 32) + 48);
              if ((v121 - 32) >= 0xA && (v121 - 10) >= 0xFFFFFFFD)
              {
                v448 = 129;
                LODWORD(v449) = 0;
                v122 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 0);
                v124 = v123;
                v448 = 129;
                LODWORD(v449) = 0;
                v125 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 1);
                v127 = *(_QWORD *)(v120 + 32);
                v128 = *(_DWORD *)(v127 + 68);
                v129 = *(_DWORD *)(v127 + 100);
                if (v121 == 7)
                  v130 = v125;
                else
                  v130 = v122;
                if (v121 == 7)
                  v131 = v126;
                else
                  v131 = v124;
                v414 = v126;
                v423 = v125;
                if (v121 != 7)
                {
                  v122 = v125;
                  v124 = v126;
                }
                v433 = (void *)129;
                LODWORD(v434) = 0;
                LODWORD(v448) = 1;
                LODWORD(v450) = 2;
                LODWORD(v451) = v128;
                LODWORD(v453) = 0;
                v406 = v128;
                LODWORD(v454) = v128;
                v456 = 0;
                v457 = v130;
                v458 = v131;
                v459 = 1;
                v460 = v122;
                v461 = v124;
                v462 = 1;
                v132 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v433, 1, &v448, 5, 0);
                v433 = (void *)129;
                LODWORD(v434) = 0;
                LODWORD(v448) = 1;
                LODWORD(v450) = 2;
                LODWORD(v451) = v129;
                LODWORD(v453) = 0;
                LODWORD(v454) = v129;
                v456 = 0;
                v457 = v132;
                v458 = v133;
                v459 = 1;
                v460 = v122;
                v461 = v124;
                v462 = 1;
                v134 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v433, 1, &v448, 5, 0);
                if (v121 == 9)
                {
                  v433 = (void *)129;
                  LODWORD(v434) = 0;
                  LODWORD(v448) = 1;
                  LODWORD(v450) = 2;
                  LODWORD(v451) = v406;
                  LODWORD(v453) = 0;
                  LODWORD(v454) = v129;
                  v456 = 0;
                  v457 = v423;
                  v458 = v414;
                  v459 = 1;
                  v460 = v134;
                  v461 = v135;
                  v462 = 1;
                  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v433, 1, &v448, 5, 0);
                }
                llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 64, *(_DWORD *)(*(_QWORD *)(v135 + 32) + 4));
                (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
                goto LABEL_738;
              }
            }
          }
          goto LABEL_378;
        }
        v114 = *(_DWORD *)(v10 + 4);
        if ((v114 & 0x80000000) == 0)
          goto LABEL_378;
        v115 = a1[5];
        v116 = v114 & 0x7FFFFFFF;
        if ((v114 & 0x7FFFFFFFu) >= *(_DWORD *)(v115 + 432) || *(_QWORD *)(*(_QWORD *)(v115 + 424) + 8 * v116) != 129)
          goto LABEL_378;
        v117 = *(unsigned int *)(v10 + 68);
        if ((v117 & 0x80000000) != 0)
          v118 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
        else
          v118 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
        v195 = *v118;
        if (v195)
        {
          if ((*(_BYTE *)(v195 + 3) & 1) != 0
            || (v195 = *(_QWORD *)(v195 + 24)) != 0 && (*(_BYTE *)(v195 + 3) & 1) != 0)
          {
            v196 = *(_QWORD *)(v195 + 8);
          }
          else
          {
            v196 = 0;
          }
        }
        else
        {
          v196 = 0;
        }
        v197 = **(unsigned __int16 **)(v196 + 16);
        if (v197 > 0x104)
        {
          if ((v197 - 314 > 0x2A || ((1 << (v197 - 58)) & 0x40000200003) == 0) && v197 != 261)
            goto LABEL_301;
        }
        else if ((v197 - 163 > 0x38 || ((1 << (v197 + 93)) & 0x18800000000140DLL) == 0)
               && v197 != 85)
        {
LABEL_301:
          v200 = *(_QWORD *)(v115 + 24);
          v201 = *(_QWORD *)(v200 + 16 * v116 + 8);
          if (v201)
          {
            while ((*(_BYTE *)(v201 + 3) & 1) != 0)
            {
              v201 = *(_QWORD *)(v201 + 24);
              if (!v201)
                goto LABEL_304;
            }
            v205 = *(_QWORD *)(v201 + 8);
LABEL_312:
            v206 = **(unsigned __int16 **)(v205 + 16);
            if ((v206 - 165) < 2 || v206 == 163)
              goto LABEL_331;
            if (v206 != 177)
              goto LABEL_417;
            v207 = *(unsigned int *)(*(_QWORD *)(v205 + 32) + 4);
            v208 = (uint64_t *)((v207 & 0x80000000) != 0
                             ? v200 + 16 * (v207 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v115 + 272) + 8 * v207);
            v209 = *v208;
            if (!v209)
              goto LABEL_417;
            while ((*(_BYTE *)(v209 + 3) & 1) != 0)
            {
              v209 = *(_QWORD *)(v209 + 24);
              if (!v209)
                goto LABEL_417;
            }
            while (1)
            {
              v209 = *(_QWORD *)(v209 + 24);
              if (!v209)
                break;
              if ((*(_BYTE *)(v209 + 3) & 1) == 0)
                goto LABEL_417;
            }
            v210 = (uint64_t *)((v207 & 0x80000000) != 0
                             ? v200 + 16 * (v207 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v115 + 272) + 8 * v207);
            for (i = *v210; (*(_BYTE *)(i + 3) & 1) != 0; i = *(_QWORD *)(i + 24))
              ;
            if (**(_WORD **)(*(_QWORD *)(i + 8) + 16) != 163)
            {
LABEL_417:
              if ((v117 & 0x80000000) != 0)
                v244 = (uint64_t *)(v200 + 16 * (v117 & 0x7FFFFFFF) + 8);
              else
                v244 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
              v259 = *v244;
              if (!v259)
                goto LABEL_378;
              if ((*(_BYTE *)(v259 + 3) & 1) == 0)
              {
                v259 = *(_QWORD *)(v259 + 24);
                if (!v259 || (*(_BYTE *)(v259 + 3) & 1) == 0)
                  goto LABEL_378;
              }
              v260 = *(_QWORD *)(v259 + 8);
              if (!v260 || **(_WORD **)(v260 + 16) != 179 || *(_DWORD *)(v260 + 40) != 2)
                goto LABEL_378;
              v428 = *(_DWORD *)(*(_QWORD *)(v260 + 32) + 36);
              LODWORD(v448) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v115, 257, "", 0);
              v261 = sub_1C5547D24(a4, 2131, (int *)&v448, 1, 0);
              v263 = v262;
              v449 = 0;
              v450 = 0;
              LODWORD(v448) = 0;
              HIDWORD(v448) = v428;
              v451 = 0;
              llvm::MachineInstr::addOperand(v262, v261, (const llvm::MachineOperand *)&v448);
              LODWORD(v433) = v114;
              LODWORD(v434) = 1;
              v448 = (uint64_t)v261;
              v449 = (uint64_t)v263;
              LODWORD(v450) = 1;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 179, &v433, 1, &v448, 1, 0);
              v264 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v264 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v264 = a2;
                  do
                    v264 = *(_QWORD *)(v264 + 8);
                  while ((*(_WORD *)(v264 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v264 + 8));
              if (!sub_1C4778650(a1[5], v117))
                goto LABEL_738;
              v265 = v196;
              if ((*(_BYTE *)v196 & 4) == 0)
              {
                v265 = v196;
                if ((*(_WORD *)(v196 + 44) & 8) != 0)
                {
                  v265 = v196;
                  do
                    v265 = *(_QWORD *)(v265 + 8);
                  while ((*(_WORD *)(v265 + 44) & 8) != 0);
                }
              }
              v202 = *(_QWORD *)(v265 + 8);
              v203 = *(_QWORD *)(v196 + 24) + 40;
              v204 = v196;
              goto LABEL_307;
            }
LABEL_331:
            while (1)
            {
              v201 = *(_QWORD *)(v201 + 24);
              if (!v201)
                break;
              if ((*(_BYTE *)(v201 + 3) & 1) == 0 && *(_QWORD *)(v201 + 8) != v205)
              {
                v205 = *(_QWORD *)(v201 + 8);
                goto LABEL_312;
              }
            }
          }
LABEL_304:
          LODWORD(v433) = v114;
          LODWORD(v434) = 1;
          LODWORD(v448) = v117;
          LODWORD(v450) = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 258, &v433, 1, &v448, 1, 0);
          v67 = *(_QWORD *)(a2 + 24);
          v68 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v68 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v68 = a2;
              do
                v68 = *(_QWORD *)(v68 + 8);
              while ((*(_WORD *)(v68 + 44) & 8) != 0);
            }
          }
LABEL_306:
          v202 = *(_QWORD *)(v68 + 8);
          v203 = v67 + 40;
          v204 = a2;
LABEL_307:
          sub_1C487FE80(v203, v204, v202);
LABEL_738:
          v95 = 1;
          goto LABEL_379;
        }
        if ((v117 & 0x80000000) != 0)
          v198 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
        else
          v198 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
        v199 = *v198;
        if (v199)
        {
          while ((*(_BYTE *)(v199 + 3) & 1) != 0)
          {
            v199 = *(_QWORD *)(v199 + 24);
            if (!v199)
              goto LABEL_301;
          }
          while (1)
          {
            v199 = *(_QWORD *)(v199 + 24);
            if (!v199)
              goto LABEL_378;
            if ((*(_BYTE *)(v199 + 3) & 1) == 0)
              goto LABEL_301;
          }
        }
        goto LABEL_301;
      }
      if (*(_BYTE *)(a1[4] + 318))
        goto LABEL_378;
      v69 = *(_DWORD **)(a2 + 32);
      v70 = v69[1];
      if ((v70 & 0x80000000) == 0)
        goto LABEL_378;
      v71 = a1[5];
      v72 = v70 & 0x7FFFFFFF;
      v73 = *(_DWORD *)(v71 + 432);
      if ((v70 & 0x7FFFFFFFu) >= v73 || *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * v72) != 513)
      {
        v138 = a1[6];
        LOWORD(v445) = *(_WORD *)(a2 + 44);
        LODWORD(v433) = v70;
LABEL_157:
        if (v72 >= v73)
          goto LABEL_378;
        v139 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * v72);
        if (v139 != 257 && v139 != 129)
          goto LABEL_378;
        v448 = a2;
        v449 = v71;
        v450 = v138;
        v451 = a4;
        v452 = (uint64_t)&v433;
        v453 = &v445;
        v95 = 1;
        if ((sub_1C4925FFC(&v448, 1u) & 1) == 0)
          v95 = sub_1C4925FFC(&v448, 2u);
        goto LABEL_379;
      }
      v405 = *(unsigned __int16 *)(a2 + 44);
      v74 = v69[9];
      v75 = v69[17];
      if ((v74 & 0x80000000) != 0)
        v76 = (uint64_t *)(*(_QWORD *)(v71 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
      else
        v76 = (uint64_t *)(*(_QWORD *)(v71 + 272) + 8 * v74);
      v192 = *v76;
      v419 = v74;
      v427 = v75;
      if (v192)
      {
        if ((*(_BYTE *)(v192 + 3) & 1) != 0 || (v192 = *(_QWORD *)(v192 + 24)) != 0 && (*(_BYTE *)(v192 + 3) & 1) != 0)
          v193 = *(_QWORD *)(v192 + 8);
        else
          v193 = 0;
        if ((v75 & 0x80000000) == 0)
          goto LABEL_283;
      }
      else
      {
        v193 = 0;
        if ((v75 & 0x80000000) == 0)
        {
LABEL_283:
          v194 = (uint64_t *)(*(_QWORD *)(v71 + 272) + 8 * v75);
LABEL_614:
          v317 = *v194;
          if ((*(_BYTE *)(v317 + 3) & 1) == 0)
            v317 = *(_QWORD *)(v317 + 24);
          v318 = *(_QWORD *)(v317 + 8);
          v319 = **(unsigned __int16 **)(v193 + 16);
          if (v319 == 127)
            goto LABEL_644;
          v320 = **(unsigned __int16 **)(v318 + 16);
          if (v320 == 127)
            goto LABEL_644;
          if (v319 == 313 || v319 == 47)
          {
            v321 = (uint64_t *)((v74 & 0x80000000) != 0
                             ? *(_QWORD *)(v71 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v71 + 272) + 8 * v74);
            v322 = *v321;
            if (v322)
            {
              while ((*(_BYTE *)(v322 + 3) & 1) != 0)
              {
                v322 = *(_QWORD *)(v322 + 24);
                if (!v322)
                  goto LABEL_626;
              }
              do
              {
                v322 = *(_QWORD *)(v322 + 24);
                if (!v322)
                  goto LABEL_644;
              }
              while ((*(_BYTE *)(v322 + 3) & 1) != 0);
            }
          }
LABEL_626:
          if (v320 == 313 || v320 == 47)
          {
            v323 = (uint64_t *)((v427 & 0x80000000) != 0
                             ? *(_QWORD *)(v71 + 24) + 16 * (v427 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v71 + 272) + 8 * v427);
            v324 = *v323;
            if (v324)
            {
              while ((*(_BYTE *)(v324 + 3) & 1) != 0)
              {
                v324 = *(_QWORD *)(v324 + 24);
                if (!v324)
                  goto LABEL_637;
              }
              do
              {
                v324 = *(_QWORD *)(v324 + 24);
                if (!v324)
                  goto LABEL_644;
              }
              while ((*(_BYTE *)(v324 + 3) & 1) != 0);
            }
          }
LABEL_637:
          if (v319 == 124 || v320 == 124)
          {
LABEL_644:
            v335 = v318;
            v433 = &v435;
            v434 = 0x200000000;
            sub_1C4893E04((char *)&v433, 2uLL, 0);
            if (sub_1C4925F00(v193, *(_QWORD *)(v71 + 24), *(_QWORD *)(v71 + 272), v433))
            {
              if ((v419 & 0x80000000) != 0)
                v336 = (uint64_t *)(*(_QWORD *)(v71 + 24) + 16 * (v419 & 0x7FFFFFFF) + 8);
              else
                v336 = (uint64_t *)(*(_QWORD *)(v71 + 272) + 8 * v419);
              v339 = *v336;
              if (v339)
              {
                while ((*(_BYTE *)(v339 + 3) & 1) != 0)
                {
                  v339 = *(_QWORD *)(v339 + 24);
                  if (!v339)
                    goto LABEL_652;
                }
                while (1)
                {
                  v339 = *(_QWORD *)(v339 + 24);
                  v337 = v339 == 0;
                  if (!v339)
                    break;
                  if ((*(_BYTE *)(v339 + 3) & 1) == 0)
                    goto LABEL_653;
                }
                v335 = v193;
                v338 = v419;
                LODWORD(v419) = v427;
              }
              else
              {
LABEL_652:
                v337 = 0;
LABEL_653:
                v338 = v427;
              }
            }
            else
            {
              v337 = 0;
              v338 = v427;
            }
            if (sub_1C4925F00(v335, *(_QWORD *)(v71 + 24), *(_QWORD *)(v71 + 272), v433)
              && ((v338 & 0x80000000) != 0
                ? (v340 = (uint64_t *)(*(_QWORD *)(v71 + 24) + 16 * (v338 & 0x7FFFFFFF) + 8))
                : (v340 = (uint64_t *)(*(_QWORD *)(v71 + 272) + 8 * v338)),
                  (v341 = *v340) != 0))
            {
              while ((*(_BYTE *)(v341 + 3) & 1) != 0)
              {
                v341 = *(_QWORD *)(v341 + 24);
                if (!v341)
                  goto LABEL_664;
              }
              while (1)
              {
                v341 = *(_QWORD *)(v341 + 24);
                if (!v341)
                  break;
                if ((*(_BYTE *)(v341 + 3) & 1) == 0)
                  goto LABEL_664;
              }
              v344 = *(_DWORD *)v433;
              v431 = *((_DWORD *)v433 + 1);
              v445 = (void *)513;
              LODWORD(v446) = 0;
              LODWORD(v448) = v344;
              LODWORD(v450) = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v445, 1, &v448, 1, 0);
              v445 = (void *)513;
              LODWORD(v446) = 0;
              if (v337)
              {
                v346 = *(_DWORD *)(*(_QWORD *)(v345 + 32) + 4);
                LODWORD(v450) = 0;
                v347 = v419;
              }
              else
              {
                LODWORD(v450) = 0;
                v346 = v419;
                v347 = *(_DWORD *)(*(_QWORD *)(v345 + 32) + 4);
              }
              LODWORD(v448) = v346;
              LODWORD(v451) = v347;
              LODWORD(v453) = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t))(*a4 + 32))(a4, 45, &v445, 1, &v448, 2);
              v351 = v350;
              GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v71, 257, "", 0);
              v353 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v71, 257, "", 0);
              v445 = (void *)__PAIR64__(v353, GenericVirtualRegister);
              LODWORD(v448) = *(_DWORD *)(*(_QWORD *)(v351 + 32) + 4);
              LODWORD(v450) = 0;
              sub_1C5547540((uint64_t)a4, (char *)&v445, 2, (uint64_t)&v448);
              v445 = (void *)257;
              LODWORD(v446) = 0;
              LODWORD(v448) = v353;
              LODWORD(v450) = 0;
              LODWORD(v451) = v431;
              LODWORD(v453) = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v445, 1, &v448, 2, v405 | 0x100000000);
              LODWORD(v445) = v70;
              LODWORD(v446) = 1;
              LODWORD(v448) = GenericVirtualRegister;
              LODWORD(v450) = 0;
              LODWORD(v451) = *(_DWORD *)(*(_QWORD *)(v354 + 32) + 4);
              LODWORD(v453) = 0;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 76, &v445, 1, &v448, 2, 0);
              v355 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v355 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v355 = a2;
                  do
                    v355 = *(_QWORD *)(v355 + 8);
                  while ((*(_WORD *)(v355 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v355 + 8));
              v342 = 1;
            }
            else
            {
LABEL_664:
              v342 = 0;
            }
            if (v433 != &v435)
              free(v433);
            if ((v342 & 1) != 0)
              goto LABEL_738;
            v343 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
            v71 = a1[5];
            v138 = a1[6];
            LOWORD(v445) = *(_WORD *)(a2 + 44);
            LODWORD(v433) = v343;
            if ((v343 & 0x80000000) == 0)
              goto LABEL_378;
            v73 = *(_DWORD *)(v71 + 432);
            LODWORD(v72) = v343 & 0x7FFFFFFF;
            goto LABEL_157;
          }
          v448 = 257;
          LODWORD(v449) = 0;
          v413 = v318;
          sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 0);
          v399 = v325;
          v448 = 129;
          LODWORD(v449) = 0;
          v326 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 0);
          v402 = v327;
          v403 = v326;
          v448 = 129;
          LODWORD(v449) = 0;
          v328 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 1);
          v400 = v329;
          v401 = v328;
          v433 = &v435;
          v434 = 0x200000000;
          sub_1C4893E04((char *)&v433, 2uLL, 0);
          v445 = &v447;
          v446 = 0x200000000;
          sub_1C4893E04((char *)&v445, 2uLL, 0);
          v330 = sub_1C4925F00(v193, *(_QWORD *)(v71 + 24), *(_QWORD *)(v71 + 272), v433);
          v331 = sub_1C4925F00(v413, *(_QWORD *)(v71 + 24), *(_QWORD *)(v71 + 272), v445);
          if (v330)
          {
            v332 = (int *)((char *)v433 + 4);
            v333 = *(_DWORD *)v433;
LABEL_641:
            v334 = v427;
            goto LABEL_691;
          }
          if (v319 == 76)
          {
            if (*(_DWORD *)(v193 + 40) == 3)
            {
              v356 = *(_QWORD *)(v193 + 32);
              v333 = *(_DWORD *)(v356 + 36);
              v332 = (int *)(v356 + 68);
              goto LABEL_641;
            }
          }
          else if (v319 == 126)
          {
            v348 = v331;
            v333 = *(_DWORD *)(*(_QWORD *)(v193 + 32) + 36);
            if ((v333 & 0x80000000) == 0
              || (v333 & 0x7FFFFFFFu) >= *(_DWORD *)(v71 + 432)
              || *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v333 & 0x7FFFFFFF)) != 257)
            {
              v442 = 257;
              v443 = 0;
              LODWORD(v448) = v333;
              LODWORD(v450) = 0;
              (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v442, 1, &v448, 1, 0);
              v333 = *(_DWORD *)(*(_QWORD *)(v349 + 32) + 4);
            }
            v332 = (int *)(*(_QWORD *)(v399 + 32) + 4);
LABEL_690:
            v334 = v427;
            v331 = v348;
LABEL_691:
            v422 = *v332;
            if (v331)
            {
              v361 = *(_DWORD *)v445;
              v360 = *((_DWORD *)v445 + 1);
            }
            else
            {
              if (v320 == 126)
              {
                v361 = *(_DWORD *)(*(_QWORD *)(v413 + 32) + 36);
                if ((v361 & 0x80000000) == 0
                  || (v361 & 0x7FFFFFFFu) >= *(_DWORD *)(v71 + 432)
                  || *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v361 & 0x7FFFFFFF)) != 257)
                {
                  v442 = 257;
                  v443 = 0;
                  LODWORD(v448) = v361;
                  LODWORD(v450) = 0;
                  (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v442, 1, &v448, 1, 0);
                  v361 = *(_DWORD *)(*(_QWORD *)(v362 + 32) + 4);
                }
                v363 = *(_QWORD *)(v399 + 32);
              }
              else
              {
                v364 = sub_1C554C050(v334, v71);
                if (!v365)
                {
                  if (v320 == 76 && *(_DWORD *)(v413 + 40) == 3)
                  {
                    v395 = *(_QWORD *)(v413 + 32);
                    v361 = *(_DWORD *)(v395 + 36);
                    v360 = *(_DWORD *)(v395 + 68);
                  }
                  else
                  {
                    LODWORD(v442) = v427;
                    v444 = 0;
                    v448 = (uint64_t)&v450;
                    v450 = 257;
                    LODWORD(v451) = 0;
                    v452 = 257;
                    LODWORD(v453) = 0;
                    v449 = 0x800000002;
                    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 74, &v450, 2, &v442, 1, 0);
                    v397 = v396;
                    if ((uint64_t *)v448 != &v450)
                      free((void *)v448);
                    v398 = *(_QWORD *)(v397 + 32);
                    v361 = *(_DWORD *)(v398 + 4);
                    v360 = *(_DWORD *)(v398 + 36);
                  }
                  goto LABEL_702;
                }
                v366 = v364;
                v448 = 257;
                LODWORD(v449) = 0;
                sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, v364);
                v361 = *(_DWORD *)(*(_QWORD *)(v367 + 32) + 4);
                v448 = 257;
                LODWORD(v449) = 0;
                sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, HIDWORD(v366));
                v363 = *(_QWORD *)(v368 + 32);
              }
              v360 = *(_DWORD *)(v363 + 4);
            }
LABEL_702:
            v369 = sub_1C554C050(v333, v71);
            if (!v370 || v369)
            {
              v372 = sub_1C554C050(v361, v71);
              if (!v373 || (v371 = v333, v372))
              {
                if (v333 < 0 && (v333 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v71 + 432))
                  v374 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v333 & 0x7FFFFFFF));
                else
                  v374 = 0;
                v442 = v374;
                v443 = 0;
                LODWORD(v448) = v333;
                LODWORD(v450) = 0;
                LODWORD(v451) = v361;
                LODWORD(v453) = 0;
                (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v442, 1, &v448, 2, v405 | 0x100000000);
                v371 = *(_DWORD *)(*(_QWORD *)(v375 + 32) + 4);
              }
            }
            else
            {
              v371 = v361;
            }
            v442 = 129;
            v443 = 0;
            LODWORD(v448) = 36;
            LODWORD(v450) = 2;
            v376 = v371;
            LODWORD(v451) = v371;
            LODWORD(v453) = 0;
            LODWORD(v454) = v333;
            v456 = 0;
            v457 = v401;
            v458 = v400;
            v459 = 1;
            v460 = v403;
            v461 = v402;
            v462 = 1;
            v377 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v442, 1, &v448, 5, 0);
            v442 = 257;
            v443 = 0;
            v448 = v377;
            v449 = v378;
            LODWORD(v450) = 1;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v442, 1, &v448, 1, 0);
            v380 = v379;
            v381 = sub_1C554C050(v422, v71);
            if (!v382 || v381)
            {
              v383 = sub_1C554C050(v360, v71);
              if (!v384 || v383)
              {
                if (v422 < 0 && (v422 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v71 + 432))
                  v385 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v422 & 0x7FFFFFFF));
                else
                  v385 = 0;
                v442 = v385;
                v443 = 0;
                LODWORD(v448) = v422;
                LODWORD(v450) = 0;
                LODWORD(v451) = v360;
                LODWORD(v453) = 0;
                (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v442, 1, &v448, 2, v405 | 0x100000000);
                v360 = *(_DWORD *)(*(_QWORD *)(v386 + 32) + 4);
              }
              else
              {
                v360 = v422;
              }
            }
            v387 = *(_DWORD *)(*(_QWORD *)(v380 + 32) + 4);
            v388 = sub_1C554C050(v387, v71);
            if (!v389 || v388)
            {
              v390 = sub_1C554C050(v360, v71);
              if (!v391 || v390)
              {
                if (v387 < 0 && (v387 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v71 + 432))
                  v392 = *(_QWORD *)(*(_QWORD *)(v71 + 424) + 8 * (v387 & 0x7FFFFFFF));
                else
                  v392 = 0;
                v442 = v392;
                v443 = 0;
                LODWORD(v448) = v387;
                LODWORD(v450) = 0;
                LODWORD(v451) = v360;
                LODWORD(v453) = 0;
                (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v442, 1, &v448, 2, v405 | 0x100000000);
                v360 = *(_DWORD *)(*(_QWORD *)(v393 + 32) + 4);
              }
              else
              {
                v360 = v387;
              }
            }
            LODWORD(v442) = v70;
            v443 = 1;
            LODWORD(v448) = v376;
            LODWORD(v450) = 0;
            LODWORD(v451) = v360;
            LODWORD(v453) = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 76, &v442, 1, &v448, 2, 0);
            v394 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v394 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v394 = a2;
                do
                  v394 = *(_QWORD *)(v394 + 8);
                while ((*(_WORD *)(v394 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v394 + 8));
            if (v445 != &v447)
              free(v445);
            if (v433 != &v435)
              free(v433);
            goto LABEL_738;
          }
          v348 = v331;
          LODWORD(v442) = v419;
          v444 = 0;
          v448 = (uint64_t)&v450;
          v450 = 257;
          LODWORD(v451) = 0;
          v452 = 257;
          LODWORD(v453) = 0;
          v449 = 0x800000002;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 74, &v450, 2, &v442, 1, 0);
          v358 = v357;
          if ((uint64_t *)v448 != &v450)
            free((void *)v448);
          v359 = *(_QWORD *)(v358 + 32);
          v333 = *(_DWORD *)(v359 + 4);
          v332 = (int *)(v359 + 36);
          goto LABEL_690;
        }
      }
      v194 = (uint64_t *)(*(_QWORD *)(v71 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
      goto LABEL_614;
    }
    if (v8 != 120)
    {
      if (v8 != 121)
        goto LABEL_378;
      v23 = *(_QWORD *)(a2 + 32);
      v24 = *(_DWORD *)(v23 + 4);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_378;
      v25 = a1[5];
      v26 = v24 & 0x7FFFFFFF;
      if ((v24 & 0x7FFFFFFFu) >= *(_DWORD *)(v25 + 432) || *(_QWORD *)(*(_QWORD *)(v25 + 424) + 8 * v26) != 257)
        goto LABEL_378;
      v27 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 16 * v26 + 8);
      if (!v27)
        goto LABEL_29;
      while ((*(_BYTE *)(v27 + 3) & 1) != 0)
      {
        v27 = *(_QWORD *)(v27 + 24);
        if (!v27)
          goto LABEL_29;
      }
      v152 = *(_QWORD *)(v27 + 8);
LABEL_185:
      v153 = **(unsigned __int16 **)(v152 + 16);
      if (v153 > 0x104)
      {
        v155 = v153 - 314;
        if (v155 > 0x2A)
          goto LABEL_200;
        if (((1 << (v153 - 58)) & 0x40000200003) != 0)
          goto LABEL_201;
        if (v155 != 22)
        {
LABEL_200:
          if (v153 == 261)
            goto LABEL_201;
          goto LABEL_378;
        }
      }
      else
      {
        if (v153 - 163 <= 0x38 && ((1 << (v153 + 93)) & 0x18800000038540DLL) != 0)
        {
LABEL_201:
          while (1)
          {
            v27 = *(_QWORD *)(v27 + 24);
            if (!v27)
              break;
            if ((*(_BYTE *)(v27 + 3) & 1) == 0 && *(_QWORD *)(v27 + 8) != v152)
            {
              v152 = *(_QWORD *)(v27 + 8);
              goto LABEL_185;
            }
          }
LABEL_29:
          v28 = sub_1C48AA43C((uint64_t)&v448, v25, a1[7], a1[8], (unsigned __int8 *)v23, 0, 0, 0, 0);
          if ((int)v458 < 4)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
            v30 = *(_QWORD *)(v29 + 32);
            if ((_UNKNOWN *)v30 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v434, (const llvm::detail::DoubleAPFloat *)(v29 + 32));
            }
            else
            {
              v434 = *(_QWORD *)(v29 + 32);
              if ((*(_DWORD *)(v30 + 8) + 64) >= 0x80)
              {
                v28 = operator new[]();
                v435 = v28;
                v31 = BYTE4(v436) & 0xF0;
              }
              else
              {
                v31 = 0;
              }
              v32 = *(_BYTE *)(v29 + 52);
              v33 = v32 & 7;
              BYTE4(v436) = v32 & 0xF | v31;
              LODWORD(v436) = *(_DWORD *)(v29 + 48);
              v35 = (v32 & 6) != 0 && v33 != 3;
              if (v33 == 1 || v35)
              {
                v37 = *(unsigned int *)(v434 + 8);
                if ((v37 - 64) <= 0xFFFFFF7F)
                  v38 = (uint64_t *)v28;
                else
                  v38 = &v435;
                v41 = *(uint64_t **)(v29 + 40);
                v40 = (uint64_t *)(v29 + 40);
                v39 = v41;
                if ((*(_DWORD *)(*(v40 - 1) + 8) - 64) >= 0xFFFFFF80)
                  v39 = v40;
                if (v37 <= 0xFFFFFFBF)
                {
                  v42 = (unint64_t)(v37 + 64) >> 6;
                  do
                  {
                    v43 = *v39++;
                    *v38++ = v43;
                    --v42;
                  }
                  while (v42);
                }
              }
            }
            v432 = 0;
            v44 = 1;
            if (!llvm::APFloat::convert((uint64_t)&v433, &unk_1C866F15C, 1, &v432) && !v432)
            {
              v44 = 1;
              if (!sub_1C4773C58((uint64_t)&v433))
              {
                v46 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(*(_QWORD *)(a2 + 24) + 32), (llvm::LLVMContext *)&v433, v45);
                v445 = (void *)129;
                LODWORD(v446) = 0;
                v47 = (void *)(*(uint64_t (**)(uint64_t *, void **, llvm::APFloatBase *))(*a4 + 24))(a4, &v445, v46);
                LODWORD(v442) = v24;
                v443 = 1;
                v445 = v47;
                v446 = v48;
                v447 = 1;
                (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 178, &v442, 1, &v445, 1, 0);
                v49 = a2;
                if ((*(_BYTE *)a2 & 4) == 0)
                {
                  v49 = a2;
                  if ((*(_WORD *)(a2 + 44) & 8) != 0)
                  {
                    v49 = a2;
                    do
                      v49 = *(_QWORD *)(v49 + 8);
                    while ((*(_WORD *)(v49 + 44) & 8) != 0);
                  }
                }
                sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v49 + 8));
                v44 = 0;
              }
            }
            if ((_UNKNOWN *)v434 == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v435);
            }
            else if ((*(_DWORD *)(v434 + 8) - 64) <= 0xFFFFFF7F && v435)
            {
              MEMORY[0x1CAA32F9C](v435, 0x1000C8000313F17);
            }
            if ((v44 & 1) == 0)
              goto LABEL_738;
          }
          goto LABEL_378;
        }
        if (v153 != 51)
        {
          if (v153 == 85)
            goto LABEL_201;
          goto LABEL_378;
        }
      }
      v156 = *(_QWORD *)(v152 + 32);
      if (*(_DWORD *)(v156 + 132) != v24 && *(_DWORD *)(v156 + 164) != v24)
        goto LABEL_201;
      goto LABEL_378;
    }
    v77 = *(_QWORD *)(a2 + 32);
    v78 = *(_DWORD *)(v77 + 4);
    if ((v78 & 0x80000000) == 0)
      goto LABEL_378;
    v79 = a1[5];
    v80 = v78 & 0x7FFFFFFF;
    if (v80 >= *(unsigned int *)(v79 + 432))
      goto LABEL_378;
    v81 = *(void **)(*(_QWORD *)(v79 + 424) + 8 * v80);
    if (v81 != (void *)513 && v81 != (void *)257)
      goto LABEL_378;
    sub_1C48AA43C((uint64_t)&v448, v79, a1[7], a1[8], (unsigned __int8 *)v77, 0, 1, 0, 0);
    if ((int)v458 >= 4 && (!HIDWORD(v458) || (sub_1C4922ED4(v78, a1[5]) & 1) != 0))
      goto LABEL_231;
    v83 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    v84 = *(_DWORD *)(v83 + 32);
    if (v84 > 0x40)
      v85 = **(_QWORD **)(v83 + 24);
    else
      v85 = (uint64_t)(*(_QWORD *)(v83 + 24) << -(char)v84) >> -(char)v84;
    v170 = a1[5];
    v171 = *(_QWORD *)(*(_QWORD *)(v170 + 24) + 16 * v80 + 8);
    if (v171)
    {
      while ((*(_BYTE *)(v171 + 3) & 1) != 0)
      {
        v171 = *(_QWORD *)(v171 + 24);
        if (!v171)
          goto LABEL_230;
      }
      v175 = *(_QWORD *)(v171 + 8);
      if (**(_WORD **)(v175 + 16) != 65)
        goto LABEL_244;
      while (1)
      {
        v171 = *(_QWORD *)(v171 + 24);
        if (!v171)
          break;
        if ((*(_BYTE *)(v171 + 3) & 1) == 0)
        {
          v176 = *(_QWORD *)(v171 + 8);
          if (v176 != v175)
          {
            v175 = *(_QWORD *)(v171 + 8);
            if (**(_WORD **)(v176 + 16) != 65)
              goto LABEL_244;
          }
        }
      }
    }
LABEL_230:
    v82.i32[0] = v85 + 1;
    v172 = (uint8x8_t)vcnt_s8(v82);
    v172.i16[0] = vaddlv_u8(v172);
    if (v172.i32[0] == 1)
    {
LABEL_231:
      v173 = 1;
      goto LABEL_366;
    }
LABEL_244:
    v426 = v81;
    if (sub_1C4922ED4(v78, v170))
    {
      v177 = v85;
      v178 = __clz(__rbit64(v85));
      if (v178 >= 4)
        v179 = 4;
      else
        v179 = v178;
      if ((_DWORD)v179)
      {
        v409 = v179;
        v417 = v178;
        v433 = v81;
        LODWORD(v434) = 0;
        sub_1C5544694((uint64_t)a4, (unint64_t *)&v433, v85 >> 1);
        v181 = v180;
        if (sub_1C4778650(a1[5], *(_DWORD *)(*(_QWORD *)(v180 + 32) + 4)))
        {
          v182 = 4;
          if (v417 < 4)
            v182 = v417;
          v418 = v182;
          v183 = 1;
          while (1)
          {
            v184 = v440;
            if (v440 >= (unint64_t)HIDWORD(v440))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v439, (uint64_t)v441, v440 + 1, 8);
              v184 = v440;
            }
            v177 = v85;
            *((_QWORD *)v439 + v184) = v181;
            LODWORD(v440) = v440 + 1;
            if (v418 == v183)
              break;
            ++v183;
            v433 = v426;
            LODWORD(v434) = 0;
            sub_1C5544694((uint64_t)a4, (unint64_t *)&v433, v85 >> v183);
            v181 = v185;
            if (!sub_1C4778650(a1[5], *(_DWORD *)(*(_QWORD *)(v185 + 32) + 4)))
            {
              LODWORD(v179) = v183 - 1 < v409;
              v215 = v183;
              goto LABEL_347;
            }
          }
          LODWORD(v179) = 0;
          v215 = v409;
        }
        else
        {
          LODWORD(v179) = 1;
          v215 = 1;
LABEL_347:
          v177 = v85;
        }
      }
      else
      {
        v215 = 0;
      }
      v186 = v177 >> v215;
      v81 = v426;
    }
    else
    {
      v215 = 0;
      LODWORD(v179) = 0;
      v186 = v85;
    }
    if ((unint64_t)(v186 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
    {
      v216 = 129;
    }
    else
    {
      if (v81 != (void *)257)
        LODWORD(v179) = 1;
      v173 = 1;
      if ((unint64_t)(v186 + 0x80000000) >> 31 > 2 || !(_DWORD)v179)
      {
LABEL_366:
        if ((_DWORD)v440)
        {
          v229 = (uint64_t *)v439;
          v230 = (uint64_t *)((char *)v439 + 8 * v440);
          do
          {
            v231 = *v229;
            if (sub_1C4778650(a1[5], *(_DWORD *)(*(_QWORD *)(*v229 + 32) + 4)))
            {
              v232 = v231;
              if ((*(_BYTE *)v231 & 4) == 0)
              {
                v232 = v231;
                if ((*(_WORD *)(v231 + 44) & 8) != 0)
                {
                  v232 = v231;
                  do
                    v232 = *(_QWORD *)(v232 + 8);
                  while ((*(_WORD *)(v232 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v231 + 24) + 40, v231, *(_QWORD *)(v232 + 8));
            }
            ++v229;
          }
          while (v229 != v230);
        }
        if ((v173 & 1) == 0)
          goto LABEL_738;
        goto LABEL_378;
      }
      v216 = 257;
    }
    v217 = a1[5];
    v420 = v215;
    if (v186 < 0)
    {
      v410 = v216;
      v220 = v186;
      v221 = *(_QWORD *)(v217 + 24);
      v222 = *(_QWORD *)(v217 + 272);
      v223 = v221;
      if ((sub_1C4923084(v78, v221, v222) & 1) == 0
        && (v426 != (void *)513 || !sub_1C4923004(v78, v223, v222)))
      {
        goto LABEL_231;
      }
      v219 = 124;
      v186 = v220;
      v216 = v410;
      goto LABEL_363;
    }
    v218 = *(_QWORD *)(*(_QWORD *)(v217 + 24) + 16 * v80 + 8);
    if (!v218)
      goto LABEL_360;
    while ((*(_BYTE *)(v218 + 3) & 1) != 0)
    {
      v218 = *(_QWORD *)(v218 + 24);
      if (!v218)
        goto LABEL_360;
    }
    v234 = *(_QWORD *)(v218 + 8);
LABEL_383:
    v235 = **(unsigned __int16 **)(v234 + 16);
    if ((v235 & 0xFFFE) == 0x32)
    {
      v236 = *(_QWORD *)(v234 + 32);
      if ((v235 != 51 || *(_DWORD *)(v236 + 132) != v78 && *(_DWORD *)(v236 + 164) != v78)
        && (*(_DWORD *)(v236 + 32 * (v235 != 50) + 16) - 38) >= 4)
      {
        goto LABEL_408;
      }
      goto LABEL_476;
    }
    if (v235 == 65)
    {
      v411 = v186;
      v239 = v216;
      v240 = sub_1C554C050(v78, v217);
      v216 = v239;
      v186 = v411;
      if (!v241 || v240 != 0xFFFF)
      {
        v234 = *(_QWORD *)(v218 + 8);
        goto LABEL_408;
      }
    }
    else if (v235 == 45)
    {
      v237 = *(unsigned int *)(*(_QWORD *)(v234 + 32) + 36);
      if ((v237 & 0x80000000) != 0)
        v238 = (uint64_t *)(*(_QWORD *)(v217 + 24) + 16 * (v237 & 0x7FFFFFFF) + 8);
      else
        v238 = (uint64_t *)(*(_QWORD *)(v217 + 272) + 8 * v237);
      v243 = *v238;
      if ((*(_BYTE *)(v243 + 3) & 1) == 0)
        v243 = *(_QWORD *)(v243 + 24);
      if (**(_WORD **)(*(_QWORD *)(v243 + 8) + 16) != 269)
      {
LABEL_408:
        while (1)
        {
          v218 = *(_QWORD *)(v218 + 24);
          if (!v218)
            goto LABEL_360;
          if ((*(_BYTE *)(v218 + 3) & 1) == 0 && *(_QWORD *)(v218 + 8) != v234)
          {
            v234 = *(_QWORD *)(v218 + 8);
            goto LABEL_383;
          }
        }
      }
    }
    else
    {
      if ((v235 - 127) > 2)
      {
        v242 = (v235 - 46) > 0x15 || ((1 << (v235 - 46)) & 0x300003) == 0;
        if (!v242 || v235 == 313)
          goto LABEL_408;
        goto LABEL_476;
      }
      v270 = *(_DWORD *)(*(_QWORD *)(v234 + 32) + 4);
      if ((v270 & 0x80000000) == 0 || (v271 = v270 & 0x7FFFFFFF, v271 >= *(_DWORD *)(v217 + 432)))
      {
        v219 = 126;
        goto LABEL_363;
      }
      if (*(_QWORD *)(*(_QWORD *)(v217 + 424) + 8 * v271) != 513)
      {
LABEL_360:
        v219 = 126;
LABEL_363:
        v433 = (void *)v216;
        LODWORD(v434) = 0;
        v224 = (void *)sub_1C5544694((uint64_t)a4, (unint64_t *)&v433, v186);
        v445 = v426;
        LODWORD(v446) = 0;
        v433 = v224;
        v434 = v225;
        LODWORD(v435) = 1;
        v226 = (void *)sub_1C5546B4C(a4, v219, (unint64_t *)&v445, (int *)&v433);
        if (v420)
        {
          v445 = v426;
          LODWORD(v446) = 0;
          v433 = v226;
          v434 = v227;
          LODWORD(v435) = 1;
          v442 = (unint64_t)v426;
          v443 = 0;
          v436 = sub_1C5544694((uint64_t)a4, &v442, v420);
          v437 = v228;
          v438 = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 127, &v445, 1, &v433, 2, 0);
        }
        sub_1C4923194((_QWORD *)a1[5], a2, *(_DWORD *)(*(_QWORD *)(v227 + 32) + 4), a3);
        v173 = 0;
        goto LABEL_366;
      }
    }
LABEL_476:
    if (v426 != (void *)513)
      goto LABEL_231;
    v272 = v216;
    v273 = v186;
    if ((sub_1C4923004(v78, *(_QWORD *)(a1[5] + 24), *(_QWORD *)(a1[5] + 272)) & 1) == 0)
      goto LABEL_231;
    v219 = 126;
    v186 = v273;
    v216 = v272;
    goto LABEL_363;
  }
  if (v8 - 128 >= 2)
  {
    if (v8 != 178)
    {
      if (v8 == 313)
      {
        a4[5] = *(_QWORD *)(a2 + 24);
        a4[6] = a2;
        v18 = *(_QWORD *)(a2 + 32);
        v19 = *(_DWORD *)(v18 + 4);
        if (v19 < 0 && (v20 = a4[3], v21 = v19 & 0x7FFFFFFF, v21 < *(_DWORD *)(v20 + 432)))
          v22 = *(void **)(*(_QWORD *)(v20 + 424) + 8 * v21);
        else
          v22 = 0;
        v92 = *(unsigned __int8 *)(v18 + 80);
        if (*(_BYTE *)(v18 + 80))
        {
          v93 = *(_DWORD *)(v18 + 36);
          if (v92 == 2)
            v94 = 124;
          else
            v94 = 126;
          v433 = v22;
          LODWORD(v434) = 0;
          LODWORD(v448) = v93;
          LODWORD(v450) = 0;
          v95 = 1;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, v94, &v433, 1, &v448, 1, 0);
          v97 = v96;
          (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
          llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, *(_DWORD *)(*(_QWORD *)(v97 + 32) + 4));
          *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80) = 0;
          (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
          v18 = *(_QWORD *)(a2 + 32);
          v98 = *(unsigned __int8 *)(v18 + 144);
          if (!*(_BYTE *)(v18 + 144))
            goto LABEL_379;
        }
        else
        {
          v98 = *(unsigned __int8 *)(v18 + 144);
          if (!*(_BYTE *)(v18 + 144))
            goto LABEL_378;
        }
        v108 = *(_DWORD *)(v18 + 100);
        if (v98 == 2)
          v109 = 124;
        else
          v109 = 126;
        v433 = v22;
        LODWORD(v434) = 0;
        LODWORD(v448) = v108;
        LODWORD(v450) = 0;
        v95 = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, v109, &v433, 1, &v448, 1, 0);
        v111 = v110;
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
        llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 96, *(_DWORD *)(*(_QWORD *)(v111 + 32) + 4));
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 144) = 0;
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
        goto LABEL_379;
      }
LABEL_378:
      v95 = 0;
      goto LABEL_379;
    }
    v86 = *(_QWORD *)(a2 + 24);
    v87 = *(_QWORD *)(a2 + 32);
    v88 = *(unsigned int *)(v87 + 4);
    v89 = a1[5];
    v90 = *(unsigned int *)(v87 + 36);
    if ((v90 & 0x80000000) != 0)
      v91 = (uint64_t *)(*(_QWORD *)(v89 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
    else
      v91 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v90);
    v99 = v87 + 32;
    v100 = *v91;
    if (v100
      && ((*(_BYTE *)(v100 + 3) & 1) != 0 || (v100 = *(_QWORD *)(v100 + 24)) != 0 && (*(_BYTE *)(v100 + 3) & 1) != 0))
    {
      v101 = *(_QWORD *)(v100 + 8);
    }
    else
    {
      v101 = 0;
    }
    if ((**(_WORD **)(v101 + 16) & 0xFFFE) == 0x74 && (v102 = *(unsigned int *)(v101 + 40), (_DWORD)v102))
    {
      v103 = *(_QWORD *)(v101 + 32);
      v104 = (_DWORD *)(v103 + 16);
      while (*((_BYTE *)v104 - 16) != 17)
      {
        v104 += 8;
        if (!--v102)
          goto LABEL_154;
      }
      if (*v104 == 2131)
      {
        v136 = *(unsigned int *)(v103 + 68);
        if ((v136 & 0x80000000) != 0)
          v137 = (uint64_t *)(*(_QWORD *)(v89 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
        else
          v137 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v136);
        v174 = *v137;
        if (!*v137)
          goto LABEL_378;
        if ((*(_BYTE *)(v174 + 3) & 1) == 0)
        {
          v174 = *(_QWORD *)(v174 + 24);
          if (!v174 || (*(_BYTE *)(v174 + 3) & 1) == 0)
            goto LABEL_378;
        }
        v99 = v103 + 64;
        v101 = *(_QWORD *)(v174 + 8);
        v105 = 1;
        if (!v101)
          goto LABEL_378;
      }
      else
      {
LABEL_154:
        v105 = 0;
        if (!v101)
          goto LABEL_378;
      }
    }
    else
    {
      v105 = 0;
    }
    v106 = *(unsigned int *)(v99 + 4);
    if ((v106 & 0x80000000) != 0)
      v107 = (uint64_t *)(*(_QWORD *)(v89 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
    else
      v107 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v106);
    v112 = *v107;
    if (!v112)
      goto LABEL_378;
    while ((*(_BYTE *)(v112 + 3) & 1) != 0)
    {
      v112 = *(_QWORD *)(v112 + 24);
      if (!v112)
        goto LABEL_378;
    }
    while (1)
    {
      v112 = *(_QWORD *)(v112 + 24);
      if (!v112)
        break;
      v95 = 0;
      if ((*(_BYTE *)(v112 + 3) & 1) == 0)
        goto LABEL_379;
    }
    v113 = (uint64_t *)((v88 & 0x80000000) != 0
                     ? *(_QWORD *)(v89 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v89 + 272) + 8 * v88);
    v140 = *v113;
    if (!v140)
      goto LABEL_378;
    while ((*(_BYTE *)(v140 + 3) & 1) != 0)
    {
      v140 = *(_QWORD *)(v140 + 24);
      if (!v140)
        goto LABEL_378;
    }
    while (1)
    {
      v140 = *(_QWORD *)(v140 + 24);
      if (!v140)
        break;
      v95 = 0;
      if ((*(_BYTE *)(v140 + 3) & 1) == 0)
        goto LABEL_379;
    }
    v141 = *(_QWORD *)(v89 + 24);
    v142 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v88);
    if ((int)v88 < 0)
      v142 = (uint64_t *)(v141 + 16 * (v88 & 0x7FFFFFFF) + 8);
    v143 = *v142;
    if (!v143)
      goto LABEL_378;
    while ((*(_BYTE *)(v143 + 3) & 1) != 0)
    {
      v143 = *(_QWORD *)(v143 + 24);
      if (!v143)
        goto LABEL_378;
    }
    v187 = *(_QWORD *)(v143 + 8);
LABEL_260:
    v188 = **(unsigned __int16 **)(v187 + 16);
    if (v188 > 0x104)
    {
      v190 = v188 - 314;
      if (v190 > 0x2A)
        goto LABEL_275;
      if (((1 << (v188 - 58)) & 0x40000200003) != 0)
        goto LABEL_276;
      if (v190 != 22)
      {
LABEL_275:
        if (v188 == 261)
          goto LABEL_276;
        goto LABEL_462;
      }
    }
    else
    {
      if (v188 - 163 <= 0x38 && ((1 << (v188 + 93)) & 0x18800000038540DLL) != 0)
      {
LABEL_276:
        while (1)
        {
          v143 = *(_QWORD *)(v143 + 24);
          if (!v143)
            goto LABEL_378;
          if ((*(_BYTE *)(v143 + 3) & 1) == 0 && *(_QWORD *)(v143 + 8) != v187)
          {
            v187 = *(_QWORD *)(v143 + 8);
            goto LABEL_260;
          }
        }
      }
      if (v188 != 51)
      {
        if (v188 == 85)
          goto LABEL_276;
        goto LABEL_462;
      }
    }
    v191 = *(_QWORD *)(v187 + 32);
    if (*(_DWORD *)(v191 + 132) != (_DWORD)v88 && *(_DWORD *)(v191 + 164) != (_DWORD)v88)
      goto LABEL_276;
LABEL_462:
    v266 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v86 + 32) + 8) + 1020);
    v267 = *(unsigned __int16 *)(v101 + 44);
    if (**(_WORD **)(v101 + 16) == 336)
    {
      if (((v266 | (v267 >> 4)) & 1) == 0)
        goto LABEL_378;
    }
    else if ((v266 & 1) == 0 && (v267 & 0x7C0) != 0x7C0)
    {
      goto LABEL_378;
    }
    a4[5] = v86;
    a4[6] = a2;
    v268 = **(unsigned __int16 **)(v101 + 16);
    if (v268 > 0x104)
    {
      v274 = (v268 - 314) > 0x2A || ((1 << (v268 - 58)) & 0x40000200003) == 0;
      if (v274 && (_DWORD)v268 != 261)
      {
LABEL_553:
        if ((_DWORD)v268 == 182)
          v304 = v105;
        else
          v304 = 1;
        if ((v304 & 1) != 0)
        {
          if ((_DWORD)v268 == 336)
          {
            if ((v105 & 1) != 0)
              goto LABEL_378;
          }
          else
          {
            if ((_DWORD)v268 == 51)
              v306 = v105;
            else
              v306 = 1;
            if ((v306 & 1) != 0)
              goto LABEL_378;
          }
          v307 = a1[5];
          v308 = *(_DWORD **)(v101 + 32);
          v309 = v308[12];
          v429 = v308[17];
          v421 = v308[25];
          v310 = v308[33];
          v311 = v308[41];
          if (sub_1C49262F0(v307, v310, 0) && sub_1C49262F0(v307, v311, 0))
          {
            v312 = sub_1C4923758(v310, 1, a4, v307, 0);
            v313 = sub_1C4923758(v311, 1, a4, v307, 0);
            v95 = 0;
            if (!HIDWORD(v312) || !HIDWORD(v313))
              goto LABEL_379;
            v314 = **(unsigned __int16 **)(v101 + 16);
            v433 = (void *)257;
            LODWORD(v434) = 0;
            LODWORD(v448) = v309;
            LODWORD(v450) = 2;
            LODWORD(v451) = v429;
            LODWORD(v453) = 0;
            v315 = v421;
          }
          else
          {
            if (v310 != v429 && v310 != v421
              || v311 != v429 && v311 != v421
              || !sub_1C49262F0(v307, v310, 1)
              || !sub_1C49262F0(v307, v311, 1))
            {
              goto LABEL_378;
            }
            v412 = sub_1C4923758(v429, 1, a4, v307, 1);
            v430 = sub_1C4923758(v421, 1, a4, v307, 1);
            v312 = sub_1C4923758(v310, 1, a4, v307, 0);
            v313 = sub_1C4923758(v311, 1, a4, v307, 0);
            v95 = 0;
            if (!HIDWORD(v412) || !HIDWORD(v430) || !HIDWORD(v312) || !HIDWORD(v313))
              goto LABEL_379;
            v314 = **(unsigned __int16 **)(v101 + 16);
            v433 = (void *)257;
            LODWORD(v434) = 0;
            LODWORD(v448) = v309;
            LODWORD(v450) = 2;
            LODWORD(v451) = v412;
            LODWORD(v453) = 0;
            v315 = v430;
          }
          LODWORD(v454) = v315;
          v456 = 0;
          LODWORD(v457) = v312;
          v459 = 0;
          LODWORD(v460) = v313;
          v462 = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, v314, &v433, 1, &v448, 5, *(unsigned __int16 *)(v101 + 44) | 0x100000000);
          sub_1C4923194((_QWORD *)a1[5], a2, *(_DWORD *)(*(_QWORD *)(v316 + 32) + 4), a3);
          goto LABEL_738;
        }
LABEL_560:
        v433 = (void *)257;
        LODWORD(v434) = 0;
        LODWORD(v448) = *(_DWORD *)(*(_QWORD *)(v101 + 32) + 36);
        LODWORD(v450) = 0;
        v95 = 1;
        (*(void (**)(uint64_t *))(*a4 + 32))(a4);
        sub_1C4923194((_QWORD *)a1[5], a2, *(_DWORD *)(*(_QWORD *)(v305 + 32) + 4), a3);
        goto LABEL_379;
      }
      goto LABEL_484;
    }
    v269 = (v268 - 163);
    if (v269 <= 0x38)
    {
      if (((1 << (v268 + 93)) & 0x18800000000140DLL) != 0)
      {
LABEL_484:
        v275 = *(unsigned int *)(v101 + 40);
        if (v275 <= 1)
        {
          v448 = (uint64_t)&v450;
          v449 = 0x400000000;
LABEL_544:
          v433 = (void *)257;
          LODWORD(v434) = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t))(*a4 + 32))(a4, v268, &v433, 1);
          v300 = v299;
          if (v105)
          {
            v301 = *(_DWORD *)(*((_QWORD *)v299 + 4) + 4);
            LODWORD(v445) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[5], 257, "", 0);
            v302 = sub_1C5547D24(a4, 2131, (int *)&v445, 1, 0);
            v300 = v303;
            v434 = 0;
            v435 = 0;
            LODWORD(v433) = 0;
            HIDWORD(v433) = v301;
            v436 = 0;
            llvm::MachineInstr::addOperand(v303, v302, (const llvm::MachineOperand *)&v433);
          }
          *((_WORD *)v300 + 22) = *((_WORD *)v300 + 22) & 0xC | *(_WORD *)(v101 + 44) & 0xFFF3;
          sub_1C4923194((_QWORD *)a1[5], a2, *(_DWORD *)(*((_QWORD *)v300 + 4) + 4), a3);
          v95 = 1;
LABEL_548:
          if ((uint64_t *)v448 != &v450)
            free((void *)v448);
          goto LABEL_379;
        }
        v276 = *(_QWORD *)(v101 + 32);
        v277 = 1;
        while (1)
        {
          if (*(_BYTE *)(v276 + 32 * v277))
            goto LABEL_491;
          v278 = a1[5];
          v279 = *(unsigned int *)(v276 + 32 * v277 + 4);
          v280 = (uint64_t *)((v279 & 0x80000000) != 0
                           ? *(_QWORD *)(v278 + 24) + 16 * (v279 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v278 + 272) + 8 * v279);
          v281 = *v280;
          if (!v281)
            goto LABEL_491;
          if ((*(_BYTE *)(v281 + 3) & 1) == 0)
          {
            v281 = *(_QWORD *)(v281 + 24);
            if (!v281 || (*(_BYTE *)(v281 + 3) & 1) == 0)
              goto LABEL_491;
          }
          v282 = *(_QWORD *)(v281 + 8);
          if (!v282)
            goto LABEL_491;
          if ((**(_WORD **)(v282 + 16) & 0xFFFE) != 0x74)
            goto LABEL_491;
          v283 = *(unsigned int *)(v282 + 40);
          if (!(_DWORD)v283)
            goto LABEL_491;
          v284 = *(_QWORD *)(v282 + 32);
          v285 = (_DWORD *)(v284 + 16);
          while (*((_BYTE *)v285 - 16) != 17)
          {
            v285 += 8;
            if (!--v283)
              goto LABEL_491;
          }
          if (*v285 != 2131)
            goto LABEL_491;
          v286 = *(unsigned int *)(v284 + 68);
          if ((v286 & 0x80000000) != 0)
            v287 = (uint64_t *)(*(_QWORD *)(v278 + 24) + 16 * (v286 & 0x7FFFFFFF) + 8);
          else
            v287 = (uint64_t *)(*(_QWORD *)(v278 + 272) + 8 * v286);
          v288 = *v287;
          if (v288)
          {
            if ((*(_BYTE *)(v288 + 3) & 1) != 0)
              goto LABEL_536;
            v288 = *(_QWORD *)(v288 + 24);
            if (v288)
            {
              if ((*(_BYTE *)(v288 + 3) & 1) != 0)
              {
LABEL_536:
                v288 = *(_QWORD *)(v288 + 8);
                goto LABEL_508;
              }
              v288 = 0;
            }
          }
LABEL_508:
          if ((v286 & 0x80000000) != 0)
            v289 = (uint64_t *)(*(_QWORD *)(v278 + 24) + 16 * (v286 & 0x7FFFFFFF) + 8);
          else
            v289 = (uint64_t *)(*(_QWORD *)(v278 + 272) + 8 * v286);
          v290 = *v289;
          if (!v290)
            goto LABEL_378;
          while ((*(_BYTE *)(v290 + 3) & 1) != 0)
          {
            v290 = *(_QWORD *)(v290 + 24);
            if (!v290)
              goto LABEL_378;
          }
          while (1)
          {
            v290 = *(_QWORD *)(v290 + 24);
            if (!v290)
              break;
            v95 = 0;
            if ((*(_BYTE *)(v290 + 3) & 1) == 0)
              goto LABEL_379;
          }
          v95 = 0;
          v291 = **(unsigned __int16 **)(v288 + 16);
          if (v291 > 0x104)
          {
            v293 = v291 - 314 > 0x2A || ((1 << (v291 - 58)) & 0x40000200003) == 0;
            if (v293 && v291 != 261)
              goto LABEL_379;
          }
          else
          {
            v292 = v291 - 163 > 0x38 || ((1 << (v291 + 93)) & 0x18800000000140DLL) == 0;
            if (v292 && v291 != 85)
              goto LABEL_379;
          }
LABEL_491:
          if (++v277 == v275)
          {
            v294 = 0;
            v448 = (uint64_t)&v450;
            v449 = 0x400000000;
            v295 = 1;
            while (1)
            {
              v296 = *(_QWORD *)(v101 + 32) + v294;
              v298 = *(unsigned __int8 *)(v296 + 32);
              v297 = v296 + 32;
              if (v298)
              {
                sub_1C61442C8((uint64_t)&v448, v297);
              }
              else
              {
                v433 = (void *)sub_1C4923758(*(_DWORD *)(*(_QWORD *)(v101 + 32) + v294 + 36), 0, a4, a1[5], 1);
                if (!((unint64_t)v433 >> 32))
                {
                  v95 = 0;
                  goto LABEL_548;
                }
                sub_1C4923DB4((uint64_t)&v448, &v433);
              }
              ++v295;
              v294 += 32;
              if (v295 >= *(unsigned int *)(v101 + 40))
              {
                v268 = **(unsigned __int16 **)(v101 + 16);
                goto LABEL_544;
              }
            }
          }
        }
      }
      if (v269 == 20)
      {
        if ((v105 & 1) != 0)
          goto LABEL_378;
        goto LABEL_560;
      }
    }
    if ((_DWORD)v268 != 85)
      goto LABEL_553;
    goto LABEL_484;
  }
  if (!*(_BYTE *)(a1[4] + 318))
  {
    v50 = *(_DWORD **)(a2 + 32);
    v51 = v50[1];
    if (v51 < 0)
    {
      v52 = a1[5];
      if ((v51 & 0x7FFFFFFFu) < *(_DWORD *)(v52 + 432))
      {
        v53 = v50[9];
        v54 = v50[17];
        v55 = *(void **)(*(_QWORD *)(v52 + 424) + 8 * (v51 & 0x7FFFFFFF));
        v445 = v55;
        if (v55 == (void *)257 || v55 == (void *)129)
        {
          v56 = sub_1C554C050(v54, v52);
          if (v57)
          {
            v58 = v56;
            v60 = sub_1C4825F50((unint64_t *)&v445);
            if ((_DWORD)v59 == 1)
            if (v58 == v60 - 1)
            {
              v448 = (uint64_t)v445;
              LODWORD(v449) = 0;
              v61 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, 0);
              v63 = v62;
              if (**(_WORD **)(a2 + 16) == 129)
                v64 = -1;
              else
                v64 = 1;
              v448 = (uint64_t)v445;
              LODWORD(v449) = 0;
              v65 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, v64);
              LODWORD(v433) = v51;
              LODWORD(v434) = 1;
              LODWORD(v448) = 40;
              LODWORD(v450) = 2;
              LODWORD(v451) = v53;
              LODWORD(v453) = 0;
              v454 = v61;
              v455 = v63;
              v456 = 1;
              v457 = v65;
              v458 = v66;
              v459 = 1;
              v460 = v61;
              v461 = v63;
              v462 = 1;
              (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v433, 1, &v448, 5, 0);
              v67 = *(_QWORD *)(a2 + 24);
              v68 = a2;
              if ((*(_BYTE *)a2 & 4) == 0)
              {
                v68 = a2;
                if ((*(_WORD *)(a2 + 44) & 8) != 0)
                {
                  v68 = a2;
                  do
                    v68 = *(_QWORD *)(v68 + 8);
                  while ((*(_WORD *)(v68 + 44) & 8) != 0);
                }
              }
              goto LABEL_306;
            }
          }
          v8 = **(unsigned __int16 **)(a2 + 16);
        }
      }
    }
  }
  if (v8 != 129)
    goto LABEL_378;
  v144 = *(_DWORD **)(a2 + 32);
  v145 = v144[1];
  if ((v145 & 0x80000000) == 0)
    goto LABEL_378;
  v146 = a1[5];
  v147 = v145 & 0x7FFFFFFF;
  v148 = *(_DWORD *)(v146 + 432);
  if (v147 >= v148)
    goto LABEL_378;
  v149 = *(_QWORD *)(v146 + 424);
  if (*(_QWORD *)(v149 + 8 * v147) != 129)
    goto LABEL_378;
  v150 = *(_QWORD *)(v146 + 24);
  v151 = *(_QWORD *)(v150 + 16 * v147 + 8);
  if (!v151)
    goto LABEL_378;
  while ((*(_BYTE *)(v151 + 3) & 1) != 0)
  {
    v151 = *(_QWORD *)(v151 + 24);
    if (!v151)
      goto LABEL_378;
  }
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = *(_QWORD *)(v151 + 8);
LABEL_206:
  if (**(_WORD **)(v160 + 16) == 124
    && (v161 = *(_DWORD *)(*(_QWORD *)(v160 + 32) + 4), v161 < 0)
    && (v161 & 0x7FFFFFFFu) < v148
    && *(_QWORD *)(v149 + 8 * (v161 & 0x7FFFFFFF)) == 257)
  {
    if (!v157)
      v157 = v160;
    v424 = v157;
    v408 = v150;
    v415 = v158;
    v407 = v159;
    v162 = sub_1C4923084(v161, v150, *(_QWORD *)(v146 + 272));
    v150 = v408;
    v158 = v415;
    v157 = v424;
    v159 = v162 ^ 1 | v407;
  }
  else
  {
    v158 = 1;
  }
  if (!v157 || (v159 & 1) == 0 || (v158 & 1) == 0)
  {
    while (1)
    {
      v151 = *(_QWORD *)(v151 + 24);
      if (!v151)
        break;
      if ((*(_BYTE *)(v151 + 3) & 1) == 0 && *(_QWORD *)(v151 + 8) != v160)
      {
        v160 = *(_QWORD *)(v151 + 8);
        goto LABEL_206;
      }
    }
  }
  if (!v157 || ((v159 | v158) & 1) == 0)
    goto LABEL_378;
  v416 = v158;
  v425 = v157;
  a4[5] = *(_QWORD *)(a2 + 24);
  a4[6] = a2;
  v433 = (void *)257;
  LODWORD(v434) = 0;
  LODWORD(v448) = v144[9];
  LODWORD(v450) = 0;
  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 124, &v433, 1, &v448, 1, 0);
  v404 = v163;
  v164 = v144[17];
  v165 = sub_1C554C050(v144[17], v146);
  if (v166)
  {
    v448 = 257;
    LODWORD(v449) = 0;
    sub_1C5544694((uint64_t)a4, (unint64_t *)&v448, v165);
    v168 = v167;
    if ((v164 & 0x80000000) != 0)
      v169 = (uint64_t *)(*(_QWORD *)(v146 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
    else
      v169 = (uint64_t *)(*(_QWORD *)(v146 + 272) + 8 * v164);
    v213 = *v169;
    if (v213)
    {
      while ((*(_BYTE *)(v213 + 3) & 1) != 0)
      {
        v213 = *(_QWORD *)(v213 + 24);
        if (!v213)
          goto LABEL_425;
      }
      while (1)
      {
        v213 = *(_QWORD *)(v213 + 24);
        if (!v213)
          break;
        if ((*(_BYTE *)(v213 + 3) & 1) == 0)
          goto LABEL_425;
      }
      if ((v164 & 0x80000000) != 0)
        v214 = (uint64_t *)(*(_QWORD *)(v146 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
      else
        v214 = (uint64_t *)(*(_QWORD *)(v146 + 272) + 8 * v164);
      v245 = *v214;
      if (v245)
      {
        if ((*(_BYTE *)(v245 + 3) & 1) != 0 || (v245 = *(_QWORD *)(v245 + 24)) != 0 && (*(_BYTE *)(v245 + 3) & 1) != 0)
          v246 = *(_QWORD *)(v245 + 8);
        else
          v246 = 0;
      }
      else
      {
        v246 = 0;
      }
      v247 = v246;
      if ((*(_BYTE *)v246 & 4) == 0)
      {
        v247 = v246;
        if ((*(_WORD *)(v246 + 44) & 8) != 0)
        {
          v247 = v246;
          do
            v247 = *(_QWORD *)(v247 + 8);
          while ((*(_WORD *)(v247 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v246 + 24) + 40, v246, *(_QWORD *)(v247 + 8));
    }
  }
  else
  {
    v433 = (void *)257;
    LODWORD(v434) = 0;
    LODWORD(v448) = v144[17];
    LODWORD(v450) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v433, 1, &v448, 1, 0);
    v168 = v212;
  }
LABEL_425:
  v248 = v144[1];
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
  llvm::MachineOperand::setReg((uint64_t)v144, *(_DWORD *)(*(_QWORD *)(v425 + 32) + 4));
  llvm::MachineOperand::setReg((uint64_t)(v144 + 8), *(_DWORD *)(*(_QWORD *)(v404 + 32) + 4));
  llvm::MachineOperand::setReg((uint64_t)(v144 + 16), *(_DWORD *)(*(_QWORD *)(v168 + 32) + 4));
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
  v249 = v425;
  if ((*(_BYTE *)v425 & 4) == 0)
  {
    v249 = v425;
    if ((*(_WORD *)(v425 + 44) & 8) != 0)
    {
      v249 = v425;
      do
        v249 = *(_QWORD *)(v249 + 8);
      while ((*(_WORD *)(v249 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v425 + 24) + 40, v425, *(_QWORD *)(v249 + 8));
  if ((v416 & 1) != 0)
  {
    v250 = *(_QWORD *)(a2 + 8);
    a4[5] = *(_QWORD *)(v250 + 24);
    a4[6] = v250;
    v433 = (void *)129;
    LODWORD(v434) = 0;
    LODWORD(v448) = v144[1];
    LODWORD(v450) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 119, &v433, 1, &v448, 1, 0);
    v252 = v251;
  }
  else
  {
    v252 = 0;
  }
  if ((v248 & 0x80000000) != 0)
    v253 = (uint64_t *)(*(_QWORD *)(v146 + 24) + 16 * (v248 & 0x7FFFFFFF) + 8);
  else
    v253 = (uint64_t *)(*(_QWORD *)(v146 + 272) + 8 * v248);
  v254 = *v253;
  if (!*v253)
    goto LABEL_738;
  while ((*(_BYTE *)(v254 + 3) & 1) != 0)
  {
    v254 = *(_QWORD *)(v254 + 24);
    if (!v254)
      goto LABEL_738;
  }
  do
  {
    v255 = v254;
    do
      v254 = *(_QWORD *)(v254 + 24);
    while (v254 && (*(_BYTE *)(v254 + 3) & 1) != 0);
    v256 = *(_QWORD *)(v255 + 8);
    if (**(_WORD **)(v256 + 16) == 124
      && (v257 = *(_DWORD *)(*(_QWORD *)(v256 + 32) + 4), v257 < 0)
      && (v258 = v257 & 0x7FFFFFFF, v258 < *(_DWORD *)(v146 + 432))
      && *(_QWORD *)(*(_QWORD *)(v146 + 424) + 8 * v258) == 257)
    {
      sub_1C4923194((_QWORD *)v146, *(_QWORD *)(v255 + 8), v144[1], a3);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD))(*a3 + 32))(a3, *(_QWORD *)(v255 + 8));
      llvm::MachineOperand::setReg(v255, *(_DWORD *)(*(_QWORD *)(v252 + 32) + 4));
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, v256);
    }
    v95 = 1;
  }
  while (v254);
LABEL_379:
  if (v439 != v441)
    free(v439);
  return v95;
}

uint64_t sub_1C4922ED4(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  _BYTE v14[8];
  uint64_t *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (!v2)
    return 1;
  while ((*(_BYTE *)(v2 + 3) & 1) != 0)
  {
    v2 = *(_QWORD *)(v2 + 24);
    if (!v2)
      return 1;
  }
  v6 = (_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 8);
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 47) < 0xFFFFFFFE)
    return 0;
LABEL_7:
  v9 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 36);
  if (v9 != a1)
  {
    v15 = &v16;
    v16 = 0;
    v10 = sub_1C4925E50((uint64_t)v14, a2, v9);
    if (v8 != 45 || (v10 ? (v11 = v16 < 5) : (v11 = 0), !v11))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68);
      v15 = &v16;
      v16 = 0;
      if (!sub_1C4925E50((uint64_t)v14, a2, v12) || v16 >= 5)
      {
        while (1)
        {
          v2 = *(_QWORD *)(v2 + 24);
          if (!v2)
            return 1;
          if ((*(_BYTE *)(v2 + 3) & 1) == 0)
          {
            v7 = *(_QWORD *)(v2 + 8);
            if (v7 != *v6)
            {
              result = 0;
              v6 = (_QWORD *)(v2 + 8);
              v8 = **(unsigned __int16 **)(v7 + 16);
              if ((v8 - 47) > 0xFFFFFFFD)
                goto LABEL_7;
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4923004(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(a3 + 8 * a1);
  v4 = *v3;
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
LABEL_8:
  v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 != 47 && v7 != 313)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 0;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v6)
      {
        v6 = *(_QWORD *)(v4 + 8);
        goto LABEL_8;
      }
    }
  }
  return 1;
}

uint64_t sub_1C4923084(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (!v3)
    return 1;
  while ((*(_BYTE *)(v3 + 3) & 1) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v5 = *(_QWORD *)(v3 + 8);
LABEL_6:
  v6 = **(unsigned __int16 **)(v5 + 16);
  if ((v6 & 0xFFFE) == 0x32)
  {
    v7 = *(_QWORD *)(v5 + 32);
    if ((v6 != 51 || *(_DWORD *)(v7 + 132) != a1 && *(_DWORD *)(v7 + 164) != a1)
      && (*(_DWORD *)(v7 + 32 * (v6 != 50) + 16) - 34) >= 4)
    {
      goto LABEL_21;
    }
    return 0;
  }
  if ((v6 - 46) < 2 || v6 == 313)
    goto LABEL_21;
  if (v6 == 45)
  {
    v8 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 36);
    if ((int)v8 >= 0)
      v9 = (uint64_t *)(a3 + 8 * v8);
    else
      v9 = (uint64_t *)(a2 + 16 * (v8 & 0x7FFFFFFF) + 8);
    v10 = *v9;
    if ((*(_BYTE *)(v10 + 3) & 1) == 0)
      v10 = *(_QWORD *)(v10 + 24);
    if (**(_WORD **)(*(_QWORD *)(v10 + 8) + 16) != 269)
    {
LABEL_21:
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 24);
        if (!v3)
          return 1;
        if ((*(_BYTE *)(v3 + 3) & 1) == 0 && *(_QWORD *)(v3 + 8) != v5)
        {
          v5 = *(_QWORD *)(v3 + 8);
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

unint64_t *sub_1C4923194(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t *result;
  uint64_t v32;
  unint64_t **v33;
  unsigned int v34;
  unint64_t *v35;
  _DWORD v36[6];
  _DWORD v37[4];
  _QWORD v38[4];
  unsigned __int8 *v39[5];

  v6 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  v7 = v6 & 0x7FFFFFFF;
  v8 = a1[3];
  v9 = *(_QWORD *)(v8 + 16 * v7);
  if ((v9 & 4) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v8 + 16 * (a3 & 0x7FFFFFFF));
  if ((v11 & 4) != 0)
    v12 = 0;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == v12 && v12 != 0 && v10 != 0 || v10 == 0)
  {
    v19 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v19 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v19 = a2;
        do
          v19 = *(_QWORD *)(v19 + 8);
        while ((*(_WORD *)(v19 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v19 + 8));
    if (a4)
    {
      sub_1C54F8CF8(a4, (uint64_t)a1, v6);
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
      if ((v6 & 0x80000000) != 0)
        v21 = (uint64_t *)(a1[3] + 16 * v7 + 8);
      else
        v21 = (uint64_t *)(a1[34] + 8 * v6);
      v22 = *v21;
      if (*v21)
      {
        v23 = a3 - 1;
        do
        {
          v24 = *(_QWORD *)(v22 + 24);
          if (v23 <= 0x3FFFFFFE)
            llvm::MachineOperand::substPhysReg((unsigned int *)v22, a3, v20);
          else
            llvm::MachineOperand::setReg(v22, a3);
          v22 = v24;
        }
        while (v24);
      }
      return sub_1C54F8DA0((uint64_t)a4);
    }
    else
    {
      v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
      if ((v6 & 0x80000000) != 0)
        v33 = (unint64_t **)(a1[3] + 16 * v7 + 8);
      else
        v33 = (unint64_t **)(a1[34] + 8 * v6);
      result = *v33;
      if (*v33)
      {
        v34 = a3 - 1;
        do
        {
          v35 = (unint64_t *)result[3];
          if (v34 <= 0x3FFFFFFE)
            llvm::MachineOperand::substPhysReg((unsigned int *)result, a3, v32);
          else
            llvm::MachineOperand::setReg((uint64_t)result, a3);
          result = v35;
        }
        while (v35);
      }
    }
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 24);
    v26 = &off_1E816EC08;
    v39[4] = 0;
    v27 = *(_QWORD *)(v25 + 32);
    v38[0] = &off_1E816EC08;
    v38[1] = v27;
    v38[3] = *(_QWORD *)(v27 + 40);
    v38[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 16) + 104))(*(_QWORD *)(v27 + 16));
    v28 = *(unsigned __int8 **)(a2 + 24);
    v39[2] = (unsigned __int8 *)a2;
    v39[3] = 0;
    v39[0] = 0;
    v39[1] = v28;
    if ((unsigned __int8 **)(a2 + 56) != v39)
    {
      v29 = *(unsigned __int8 **)(a2 + 56);
      v39[0] = v29;
      if (v29)
      {
        llvm::MetadataTracking::track((uint64_t)v39, v29, 2);
        v26 = (uint64_t (**)())v38[0];
      }
    }
    v37[0] = v6;
    v37[2] = 1;
    v36[0] = a3;
    v36[4] = 0;
    ((void (*)(_QWORD *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))v26[4])(v38, 19, v37, 1, v36, 1, 0);
    v30 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v30 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v30 = a2;
        do
          v30 = *(_QWORD *)(v30 + 8);
        while ((*(_WORD *)(v30 + 44) & 8) != 0);
      }
    }
    result = (unint64_t *)sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v30 + 8));
    v38[0] = &off_1E816EC08;
    if (v39[0])
      return (unint64_t *)llvm::MetadataTracking::untrack((uint64_t)v39, v39[0]);
  }
  return result;
}

uint64_t sub_1C492348C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  llvm::ConstantFP *v17;
  const llvm::APFloat *v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 272);
  v5 = *(_QWORD *)(a2 + 32) + 32 * a3;
  v8 = *(_DWORD *)(v5 + 4);
  v7 = (_DWORD *)(v5 + 4);
  v6 = v8;
  if ((v8 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v6);
  v10 = *v9;
  if (!v10)
    return 0;
  v29 = *(_QWORD *)(a2 + 32) + 32 * a3;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v10 + 8);
  if (!v13 || **(_WORD **)(v13 + 16) != 120)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 48);
  if ((v6 & 0x80000000) != 0
    && (v15 = v6 & 0x7FFFFFFF, v15 < *(_DWORD *)(v4 + 432))
    && (*(_QWORD *)(*(_QWORD *)(v4 + 424) + 8 * v15) & 0x8000000000000000) != 0)
  {
    v17 = **(llvm::ConstantFP ***)v14;
    llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 32);
    if (v16 == 32)
    {
      v17 = **(llvm::ConstantFP ***)v14;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
    }
    else
    {
      v17 = **(llvm::ConstantFP ***)v14;
      if (v16 == 16)
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
      else
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
    }
  }
  v19 = llvm::ConstantFP::get(v17, (llvm::LLVMContext *)&v30, v18);
  if ((_UNKNOWN *)v31 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v32);
  }
  else if ((*(_DWORD *)(v31 + 8) - 64) <= 0xFFFFFF7F && v32[0])
  {
    MEMORY[0x1CAA32F9C](v32[0], 0x1000C8000313F17);
  }
  v20 = a1[1];
  *(_QWORD *)(v20 + 40) = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v20 + 48) = v13;
  v21 = a1[1];
  if ((*v7 & 0x80000000) != 0
    && (v22 = *(_QWORD *)(v3 + 272), v23 = *v7 & 0x7FFFFFFF, v23 < *(_DWORD *)(v22 + 432)))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * v23);
  }
  else
  {
    v24 = 0;
  }
  v30 = v24;
  LODWORD(v31) = 0;
  (*(void (**)(uint64_t, uint64_t *, llvm::APFloatBase *))(*(_QWORD *)v21 + 24))(v21, &v30, v19);
  v26 = v25;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 288) + 32))(*(_QWORD *)(v3 + 288), a2);
  llvm::MachineOperand::setReg(v29, *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 288) + 40))(*(_QWORD *)(v3 + 288), a2);
  if (sub_1C554B164(v13, *(_QWORD *)(v3 + 272)))
  {
    v27 = v13;
    if ((*(_BYTE *)v13 & 4) == 0)
    {
      v27 = v13;
      if ((*(_WORD *)(v13 + 44) & 8) != 0)
      {
        v27 = v13;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v13 + 24) + 40, v13, *(_QWORD *)(v27 + 8));
  }
  return 1;
}

uint64_t sub_1C4923758(unsigned int a1, char a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _BOOL4 v50;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  llvm::ConstantFP *v59;
  const llvm::APFloat *v60;
  llvm::APFloatBase *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a1);
  v6 = *v5;
  if (!v6)
    goto LABEL_5;
  v10 = a1;
  if ((*(_BYTE *)(v6 + 3) & 1) != 0)
    goto LABEL_10;
  v6 = *(_QWORD *)(v6 + 24);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 3) & 1) == 0)
    {
LABEL_17:
      v6 = 0;
      goto LABEL_5;
    }
LABEL_10:
    v15 = *(_QWORD *)(v6 + 8);
    if (v15)
    {
      v16 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3[1] + 8) + 16))(*(_QWORD *)(a3[1] + 8), *(_QWORD *)a3[1]);
      v17 = *(unsigned __int16 **)(v15 + 16);
      v18 = *((unsigned __int8 *)v17 + 4);
      if ((v17[4] & 2) == 0 || (v28 = *(_DWORD *)(v15 + 40), v28 == v18))
      {
        v19 = *((unsigned __int8 *)v17 + 4);
      }
      else
      {
        v29 = v28 - 1;
        v19 = *((unsigned __int8 *)v17 + 4);
        do
        {
          v30 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 32 * v18);
          if ((v30 & 0x10000FF) != 0x1000000)
            break;
          v19 += (v30 & 0x2000000) == 0;
          if (v29 == v18)
            break;
          ++v18;
        }
        while ((v30 & 0x2000000) == 0);
      }
      v20 = *((_QWORD *)v17 + 4);
      if (v20)
      {
        v21 = -1;
        do
          ++v21;
        while (*(_WORD *)(v20 + 2 * v21));
      }
      else
      {
        v21 = 0;
      }
      if (v21 + v19 != 1)
      {
LABEL_52:
        v68 = 257;
        v69 = 0;
        v73 = v10;
        LODWORD(v75) = 0;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*a3 + 32))(a3, 178, &v68, 1, &v73, 1, 0);
        goto LABEL_53;
      }
      v22 = *(_QWORD *)(v15 + 32);
      v23 = *v17;
      v24 = v23;
      v25 = v15;
      if (v23 == 177)
      {
        v26 = *(unsigned int *)(v22 + 36);
        if ((v26 & 0x80000000) != 0)
          v27 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        else
          v27 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v26);
        v31 = *v27;
        if (!v31)
          goto LABEL_46;
        if ((*(_BYTE *)(v31 + 3) & 1) == 0)
        {
          v31 = *(_QWORD *)(v31 + 24);
          if (!v31 || (*(_BYTE *)(v31 + 3) & 1) == 0)
            goto LABEL_46;
        }
        v25 = *(_QWORD *)(v31 + 8);
        if (!v25)
          goto LABEL_46;
        v24 = **(unsigned __int16 **)(v25 + 16);
      }
      if (v24 != 184)
      {
        v34 = v24;
LABEL_40:
        if (v34 == 179)
        {
          v35 = *(_QWORD *)(v25 + 32);
          if ((a2 & 1) != 0)
            goto LABEL_85;
          v36 = *(unsigned int *)(v35 + 36);
          v37 = (uint64_t *)((v36 & 0x80000000) != 0
                          ? *(_QWORD *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(a4 + 272) + 8 * v36);
          v63 = *v37;
          if (!v63)
            goto LABEL_85;
          while ((*(_BYTE *)(v63 + 3) & 1) != 0)
          {
            v63 = *(_QWORD *)(v63 + 24);
            if (!v63)
              goto LABEL_85;
          }
          while (1)
          {
            v63 = *(_QWORD *)(v63 + 24);
            if (!v63)
              break;
            if ((*(_BYTE *)(v63 + 3) & 1) == 0)
              goto LABEL_85;
          }
          v65 = (uint64_t *)((v36 & 0x80000000) != 0
                          ? *(_QWORD *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(a4 + 272) + 8 * v36);
          v66 = *v65;
          if (v66)
          {
            if ((*(_BYTE *)(v66 + 3) & 1) != 0 || (v66 = *(_QWORD *)(v66 + 24)) != 0 && (*(_BYTE *)(v66 + 3) & 1) != 0)
            {
              v67 = *(_QWORD *)(v66 + 8);
              if (v67
                && **(_WORD **)(v67 + 16) == 318
                && (*((_BYTE *)v16 + 319) && !*((_BYTE *)v16 + 338) || *((_BYTE *)v16 + 326)))
              {
LABEL_85:
                if (v24 == 184)
                {
                  v68 = 257;
                  v69 = 0;
                  v73 = *(_DWORD *)(v35 + 36);
                  LODWORD(v75) = 0;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*a3 + 32))(a3, 184, &v68, 1, &v73, 1, 0);
                  v44 = *(_QWORD *)(v64 + 32);
                }
                else
                {
                  v44 = v35 + 32;
                }
                if (v23 != 177)
                  goto LABEL_54;
                v68 = 257;
                v69 = 0;
                v73 = *(_DWORD *)(v44 + 4);
                LODWORD(v75) = 0;
                (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, uint64_t))(*a3 + 32))(a3, 177, &v68, 1, &v73, 1, *(unsigned __int16 *)(v15 + 44) | 0x100000000);
LABEL_53:
                v44 = *(_QWORD *)(v43 + 32);
LABEL_54:
                v7 = *(_DWORD *)(v44 + 4);
                v8 = v7 & 0xFFFFFF00;
LABEL_55:
                v6 = 0x100000000;
                return v6 | v8 | v7;
              }
            }
          }
        }
        goto LABEL_46;
      }
      v32 = *(unsigned int *)(*(_QWORD *)(v25 + 32) + 36);
      if ((v32 & 0x80000000) != 0)
        v33 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
      else
        v33 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v32);
      v38 = *v33;
      if (v38)
      {
        if ((*(_BYTE *)(v38 + 3) & 1) != 0 || (v38 = *(_QWORD *)(v38 + 24)) != 0 && (*(_BYTE *)(v38 + 3) & 1) != 0)
        {
          v25 = *(_QWORD *)(v38 + 8);
          if (v25)
          {
            v34 = **(unsigned __int16 **)(v25 + 16);
            goto LABEL_40;
          }
        }
      }
LABEL_46:
      v39 = *(unsigned int *)(v22 + 4);
      v10 = *(_DWORD *)(v22 + 4);
      if ((int)v39 >= 0)
        v40 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v39);
      else
        v40 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
      v41 = *v40;
      if ((*(_BYTE *)(v41 + 3) & 1) == 0)
        v41 = *(_QWORD *)(v41 + 24);
      v42 = *(_QWORD *)(v41 + 8);
      if (**(_WORD **)(v42 + 16) == 121)
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 48);
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 32);
          if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v74, (const llvm::detail::DoubleAPFloat *)(v45 + 32));
            if (!a5)
              goto LABEL_80;
          }
          else
          {
            v74 = *(_QWORD *)(v45 + 32);
            if ((*(_DWORD *)(v46 + 8) + 64) >= 0x80)
            {
              v16 = (uint64_t *)operator new[]();
              v75 = v16;
            }
            v47 = *(_BYTE *)(v45 + 52);
            v48 = v47 & 7;
            v77 = v47 & 0xF;
            v76 = *(_DWORD *)(v45 + 48);
            v50 = (v47 & 6) != 0 && v48 != 3;
            if (v48 == 1 || v50)
            {
              v52 = *(unsigned int *)(v46 + 8);
              if ((v52 - 64) <= 0xFFFFFF7F)
                v53 = v16;
              else
                v53 = (uint64_t *)&v75;
              v56 = *(uint64_t **)(v45 + 40);
              v55 = (uint64_t *)(v45 + 40);
              v54 = v56;
              if ((*(_DWORD *)(*(v55 - 1) + 8) - 64) >= 0xFFFFFF80)
                v54 = v55;
              if (v52 <= 0xFFFFFFBF)
              {
                v57 = (unint64_t)(v52 + 64) >> 6;
                do
                {
                  v58 = *v54++;
                  *v53++ = v58;
                  --v57;
                }
                while (v57);
              }
            }
            if (!a5)
              goto LABEL_80;
          }
          if ((sub_1C48AA9FC((uint64_t)&v73) & 1) == 0)
          {
            v71 = 257;
            v72 = 0;
            LODWORD(v68) = *(_DWORD *)(v22 + 4);
            v70 = 0;
            (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 178, &v71, 1, &v68, 1, 0);
LABEL_95:
            v7 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
            v8 = v7 & 0xFFFFFF00;
            if ((_UNKNOWN *)v74 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v75);
            }
            else if ((*(_DWORD *)(v74 + 8) - 64) <= 0xFFFFFF7F && v75)
            {
              MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
            }
            goto LABEL_55;
          }
LABEL_80:
          v59 = ***(llvm::ConstantFP ****)a3[1];
          llvm::APFloat::convert((uint64_t)&v73, &unk_1C866F184, 1, &v71);
          v61 = llvm::ConstantFP::get(v59, (llvm::LLVMContext *)&v73, v60);
          v68 = 257;
          v69 = 0;
          (*(void (**)(_QWORD *, uint64_t *, llvm::APFloatBase *))(*a3 + 24))(a3, &v68, v61);
          goto LABEL_95;
        }
      }
      goto LABEL_52;
    }
    goto LABEL_17;
  }
LABEL_5:
  LOBYTE(v7) = 0;
  v8 = 0;
  return v6 | v8 | v7;
}

uint64_t sub_1C4923DB4(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _DWORD v12[6];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v12[0] = *a2;
    v12[4] = 0;
    v11 = a1;
    v8 = sub_1C4926708(a1, (unint64_t)v12, 1);
    a1 = v11;
    v9 = *(_QWORD *)v11 + 24 * *(unsigned int *)(v11 + 8);
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v9 = v10;
    v5 = *(_DWORD *)(v11 + 8);
    v3 = *(_QWORD *)v11;
  }
  else
  {
    v3 = *(_QWORD *)a1;
    v4 = (_DWORD *)(*(_QWORD *)a1 + 24 * v2);
    *v4 = *a2;
    v4[4] = 0;
    v5 = *(_DWORD *)(a1 + 8);
  }
  v6 = v5 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v3 + 24 * v6 - 24;
}

uint64_t sub_1C4923E58(uint64_t a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  char v11;
  BOOL v12;
  uint64_t v13;

  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!*v4)
    return 1;
  while ((*(_BYTE *)(v5 + 3) & 1) != 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return 1;
  }
  v9 = *(_QWORD *)(v5 + 8);
LABEL_9:
  result = 0;
  v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 <= 0x104)
  {
    v11 = v10 + 93;
    if (v10 - 163 <= 0x38)
    {
      if (((1 << v11) & 0x18800000018140DLL) != 0)
        goto LABEL_19;
      if (((1 << v11) & 0x204000) != 0)
      {
        if ((sub_1C4923E58(v9, a2, a3) & 1) == 0)
          return 0;
LABEL_20:
        v13 = *(_QWORD *)(v5 + 8);
        while (1)
        {
          v5 = *(_QWORD *)(v5 + 24);
          if (!v5)
            return 1;
          if ((*(_BYTE *)(v5 + 3) & 1) == 0)
          {
            v9 = *(_QWORD *)(v5 + 8);
            if (v9 != v13)
              goto LABEL_9;
          }
        }
      }
    }
    if (v10 != 85)
      return result;
LABEL_19:
    sub_1C4774094(a2, v9);
    if ((*((_DWORD *)a2 + 5) - *((_DWORD *)a2 + 6)) > 2)
      return 0;
    goto LABEL_20;
  }
  v12 = v10 - 314 > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0;
  if (!v12 || v10 == 261)
    goto LABEL_19;
  return result;
}

uint64_t sub_1C4923FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  BOOL v54[8];

  v53 = a2;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 == a3)
    return 1;
  v13 = *(_QWORD *)(a1 + 312);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v13);
  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v13 + 1320), v6, a3))
    return 1;
  *(_QWORD *)v54 = 0;
  v15 = sub_1C6144BDC(*(_QWORD *)a6, *(_DWORD *)(a6 + 16), a2, v54);
  v16 = *(unsigned int *)(a6 + 16);
  v17 = *(_QWORD *)a6 + 16 * v16;
  if (v15)
    v18 = *(_QWORD *)v54;
  else
    v18 = *(_QWORD *)a6 + 16 * v16;
  if (v18 == v17)
  {
    v19 = sub_1C6144C70(a4, &v53);
  }
  else
  {
    ++*(_DWORD *)(a1 + 332);
    v19 = (_QWORD *)v18;
  }
  v21 = *((_DWORD *)v19 + 2);
  v20 = v19 + 1;
  result = v21;
  if (!v21)
  {
    result = 2;
    *v20 = 2;
    v22 = *(_QWORD *)(a2 + 32);
    if ((*(_BYTE *)(v22 + 3) & 1) != 0)
    {
      v54[0] = 1;
      v23 = *(unsigned __int16 **)(a2 + 16);
      v24 = *v23 - 1;
      if (v24 > 1 || (*(_BYTE *)(v22 + 48) & 8) == 0)
      {
        v25 = *(unsigned __int16 *)(a2 + 44);
        v48 = (v25 & 0xC) == 0;
        v26 = (v25 >> 2) & 1;
        if (v48)
          LOBYTE(v26) = 1;
        v27 = *((_QWORD *)v23 + 1);
        if ((v26 & 1) != 0)
        {
          if ((v27 & 0x80000) != 0)
            return result;
        }
        else
        {
          if ((v27 & 0x80000) != 0)
            return result;
          v50 = a2;
          while ((*(_WORD *)(v50 + 44) & 8) != 0)
          {
            v50 = *(_QWORD *)(v50 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v50 + 16) + 10) & 8) != 0)
              return result;
          }
        }
        if (v24 <= 1 && (*(_BYTE *)(v22 + 48) & 0x20) != 0)
          return 2;
        if ((v26 & 1) != 0)
        {
          if ((v27 & 0x1000000000) == 0)
          {
LABEL_21:
            if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)a2, 0, v54))
              return 2;
            v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * (*(_DWORD *)(v22 + 4) & 0x7FFFFFFF));
            if ((v28 & 4) == 0)
            {
              v29 = v28 & 0xFFFFFFFFFFFFFFF8;
              if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 104))(*(_QWORD *)(a1 + 256));
                if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 840))(v30, v29))
                  return 2;
              }
            }
            v31 = *(_DWORD *)(a1 + 332);
            v32 = *(_DWORD *)(a1 + 336);
            if (v31 >= v32)
              v33 = *(_DWORD *)(a1 + 336);
            else
              v33 = *(_DWORD *)(a1 + 332);
            v34 = v31 > v32;
            v35 = v33 - __clz(v31) + 31;
            if (!v34)
              v35 = v33;
            v36 = v18 == v17 ? a5 + 1 : 1;
            if (v36 > v35 * *(_DWORD *)(a1 + 328))
              return 2;
            v37 = *(_DWORD *)(a2 + 40);
            if (v37 == 1)
            {
LABEL_37:
              if (v18 == v17)
                v20 = sub_1C6144C70(a4, &v53) + 1;
              result = 1;
              *v20 = 1;
              return result;
            }
            v38 = 1;
            while (1)
            {
              v39 = *(_QWORD *)(a2 + 32);
              v40 = *(_DWORD *)(v39 + 32 * v38);
              if (!(_BYTE)v40)
              {
                v41 = *(unsigned int *)(v39 + 32 * v38 + 4);
                if ((v40 & 0x1F00000) != 0 || (v41 - 1) < 0x3FFFFFFF)
                  return 2;
                v43 = *(_QWORD *)(a1 + 272);
                v44 = (uint64_t *)((v41 & 0x80000000) != 0
                                ? *(_QWORD *)(v43 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8
                                : *(_QWORD *)(v43 + 272) + 8 * v41);
                v45 = *v44;
                if (v45)
                {
                  if ((*(_BYTE *)(v45 + 3) & 1) != 0
                    || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
                  {
                    v46 = *(_QWORD *)(v45 + 8);
                    if (v46)
                      break;
                  }
                }
              }
LABEL_51:
              if (v37 == (_DWORD)++v38)
                goto LABEL_37;
            }
            v47 = *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8);
            v48 = (*(_WORD *)(v46 + 44) & 0xC) != 0 && (*(_WORD *)(v46 + 44) & 4) == 0;
            if (v48)
            {
              v49 = *(_QWORD *)(v45 + 8);
              if ((v47 & 0x200) == 0)
              {
                while ((*(_WORD *)(v49 + 44) & 8) != 0)
                {
                  v49 = *(_QWORD *)(v49 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v49 + 16) + 9) & 2) != 0)
                    goto LABEL_62;
                }
                goto LABEL_63;
              }
            }
            else if ((v47 & 0x200) == 0)
            {
              goto LABEL_63;
            }
LABEL_62:
            if (*(_QWORD *)(v46 + 24) == a3)
              return 2;
LABEL_63:
            v52 = v36;
            result = sub_1C4923FC0(a1);
            v36 = v52;
            if ((_DWORD)result == 2)
              return result;
            goto LABEL_51;
          }
        }
        else if ((v27 & 0x1000000000) == 0)
        {
          v51 = a2;
          result = 2;
          while ((*(_WORD *)(v51 + 44) & 8) != 0)
          {
            v51 = *(_QWORD *)(v51 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v51 + 16) + 12) & 0x10) != 0)
              return result;
          }
          goto LABEL_21;
        }
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_1C4924378(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  return sub_1C491FDE4(a1, a3, a2, a4);
}

uint64_t sub_1C4924388(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  BOOL v35;
  _BOOL4 v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _BOOL8 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  BOOL v90;
  BOOL v91;
  int v92;
  int v93;
  int v94;
  BOOL v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  __int128 v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t j;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  llvm::MachineFunction *v118;
  llvm::MachineInstr *v119;
  llvm::MachineInstr *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t i;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t k;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t m;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v190;
  int v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  uint64_t v196;
  uint64_t v197;
  __int128 *v198;
  uint64_t v200;
  uint64_t v201;
  char v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  void *__p;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (**v212)(llvm::MachineFunction::Delegate *__hidden);
  void (**v213)();
  _BYTE *v214;
  _BYTE *v215;
  uint64_t v216;
  int v217;
  _BYTE v218[32];
  void *v219;
  uint64_t v220;
  _QWORD v221[4];
  uint64_t v222;
  llvm::MachineInstr *v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD v230[6];
  _QWORD v231[2];
  void *v232;
  uint64_t v233;
  _QWORD v234[3];
  __int128 v235;
  __int128 v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
  {
    v132 = 0;
    return v132 & 1;
  }
  v2 = a2;
  v3 = a1;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 40);
  if (byte_1ED7EB398)
  {
    v4 = **(void ****)(a1 + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != &unk_1EF8F7108);
    v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &unk_1EF8F7108) + 248;
    v7 = (_QWORD *)operator new();
    v7[8] = 0;
    v7[1] = v2;
    v7[5] = 0;
    v7[3] = *(_QWORD *)(v2 + 40);
    v7[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
    v7[4] = 0;
    v8 = *(_QWORD *)(v3 + 248);
    v7[6] = 0;
    v7[7] = 0;
    *v7 = &unk_1E816DC08;
    *(_QWORD *)(v3 + 248) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = **(void ****)(v3 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != &llvm::TargetPassConfig::ID);
    v11 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::TargetPassConfig::ID);
    *(_QWORD *)(v3 + 320) = v11;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 288))(&v232);
    sub_1C54EB0C0(v6, (uint64_t *)&v232, 0);
    v12 = v232;
    v232 = 0;
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
    *(_QWORD *)(*(_QWORD *)(v3 + 248) + 64) = v6;
  }
  else
  {
    v196 = operator new();
    *(_OWORD *)(v196 + 16) = 0u;
    *(_QWORD *)(v196 + 64) = 0;
    *(_OWORD *)(v196 + 48) = 0u;
    *(_OWORD *)(v196 + 32) = 0u;
    *(_QWORD *)v196 = &off_1E816EC08;
    *(_QWORD *)(v196 + 8) = v2;
    *(_QWORD *)(v196 + 24) = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v196 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
    if (*(_QWORD *)(v196 + 32))
      llvm::MetadataTracking::untrack(v196 + 32, *(unsigned __int8 **)(v196 + 32));
    *(_QWORD *)(v196 + 32) = 0;
    *(_QWORD *)(v196 + 48) = 0;
    *(_QWORD *)(v196 + 56) = 0;
    v3 = a1;
    v197 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v196;
    v2 = a2;
    if (v197)
      (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  }
  v13 = **(void ****)(v3 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &unk_1EF8F7110);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &unk_1EF8F7110);
  *(_QWORD *)(v3 + 264) = sub_1C491CBCC(v15, v2);
  v16 = **(void ****)(v3 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v3 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::MachineLoopInfo::ID);
  v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), *(_QWORD *)v2);
  *(_QWORD *)(v3 + 256) = v18;
  v198 = (__int128 *)(v3 + 296);
  *(_QWORD *)(v3 + 296) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18);
  *(_QWORD *)(v3 + 304) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 256) + 184))(*(_QWORD *)(v3 + 256));
  v19 = **(void ****)(v3 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v3 + 312) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineDominatorTree::ID);
  v214 = v218;
  v215 = v218;
  v216 = 4;
  v217 = 0;
  v212 = &off_1E7FA1778;
  v213 = (void (**)())&unk_1E7FA17D0;
  v219 = v221;
  v220 = 0x400000000;
  if (byte_1ED7EB398)
  {
    v221[0] = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 64);
    LODWORD(v220) = 1;
  }
  *(_QWORD *)(v2 + 728) = &v212;
  *(_QWORD *)(v3 + 288) = &v213;
  v232 = v234;
  v233 = 0x1000000000;
  v21 = *(_QWORD *)(v2 + 328);
  v201 = v2 + 320;
  if (v21 != v2 + 320)
  {
    v22 = 0;
    while (1)
    {
      v23 = v21 + 48;
      v24 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v24 || (*(_BYTE *)v24 & 4) == 0)
      {
        while ((*(_WORD *)(v24 + 44) & 4) != 0)
          v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      }
      v200 = v21;
      if (v24 != v23)
        break;
LABEL_268:
      v21 = *(_QWORD *)(v200 + 8);
      v2 = a2;
      if (v21 == v201)
      {
        v124 = *(_QWORD *)(a2 + 328);
        if (v124 != v201)
        {
          do
          {
            v125 = *(_QWORD *)(v124 + 56);
            if (v125 != v124 + 48)
            {
              do
              {
                v126 = *(_QWORD *)(v125 + 8);
                LODWORD(v22) = v22 | sub_1C491D360(v3, v125);
                v125 = v126;
              }
              while (v126 != v124 + 48);
            }
            v124 = *(_QWORD *)(v124 + 8);
          }
          while (v124 != v201);
          for (i = *(_QWORD *)(a2 + 328); i != v201; i = *(_QWORD *)(i + 8))
          {
            v128 = i + 48;
            v129 = *(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v129 || (*(_BYTE *)v129 & 4) == 0)
            {
              while ((*(_WORD *)(v129 + 44) & 4) != 0)
                v129 = *(_QWORD *)v129 & 0xFFFFFFFFFFFFFFF8;
            }
            if (v129 != v128)
            {
              do
              {
                v130 = *(_QWORD *)v129 & 0xFFFFFFFFFFFFFFF8;
                if (!v130 || (*(_BYTE *)v130 & 4) == 0)
                {
                  while ((*(_WORD *)(v130 + 44) & 4) != 0)
                    v130 = *(_QWORD *)v130 & 0xFFFFFFFFFFFFFFF8;
                }
                if (sub_1C554B164(v129, *(_QWORD *)(v3 + 272)))
                {
                  v131 = v129;
                  if ((*(_BYTE *)v129 & 4) == 0)
                  {
                    v131 = v129;
                    if ((*(_WORD *)(v129 + 44) & 8) != 0)
                    {
                      v131 = v129;
                      do
                        v131 = *(_QWORD *)(v131 + 8);
                      while ((*(_WORD *)(v131 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v129 + 24) + 40, v129, *(_QWORD *)(v131 + 8));
                  LOBYTE(v22) = 1;
                }
                v129 = v130;
              }
              while (v130 != v128);
            }
          }
        }
        goto LABEL_298;
      }
    }
    v25 = 0;
    while (1)
    {
      v26 = **(unsigned __int16 **)(v24 + 16);
      if (v26 > 0x104)
      {
        v28 = v26 - 314 > 0x2A || ((1 << (v26 - 58)) & 0x40000200003) == 0;
        if (!v28 || v26 == 261)
        {
LABEL_43:
          if (*(_WORD *)(*(_QWORD *)(v2 + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v24 + 44) & 0x7C0) == 0))
          {
            v29 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
            if (v29 < 0)
            {
              v30 = *(_QWORD *)(v3 + 272);
              v31 = v29 & 0x7FFFFFFF;
              if (v31 < *(_DWORD *)(v30 + 432) && *(_QWORD *)(*(_QWORD *)(v30 + 424) + 8 * v31) == 129)
              {
                if (v25 >= HIDWORD(v233))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)v234, v25 + 1, 8);
                  v25 = v233;
                }
                *((_QWORD *)v232 + v25) = v24;
                v25 = v233 + 1;
                LODWORD(v233) = v233 + 1;
              }
            }
          }
        }
      }
      else
      {
        v27 = v26 - 163 > 0x38 || ((1 << (v26 + 93)) & 0x18800000000140DLL) == 0;
        if (!v27 || v26 == 85)
          goto LABEL_43;
      }
      v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v24 || (*(_BYTE *)v24 & 4) == 0)
      {
        while ((*(_WORD *)(v24 + 44) & 4) != 0)
          v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v24 == v23)
      {
        while (1)
        {
          if (!v25)
            goto LABEL_268;
          v32 = *((_QWORD *)v232 + v25 - 1);
          LODWORD(v233) = v25 - 1;
          v33 = *(_QWORD **)(v3 + 248);
          v34 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v33[1] + 8) + 16))(*(_QWORD *)(v33[1] + 8), *(_QWORD *)v33[1]);
          v33[5] = *(_QWORD *)(v32 + 24);
          v33[6] = v32;
          BYTE2(v211) = 0;
          LOWORD(v211) = 0;
          if (v34[319])
            v35 = v34[338] == 0;
          else
            v35 = 0;
          v36 = v35 || v34[326] != 0;
          v37 = **(unsigned __int16 **)(v32 + 16);
          LODWORD(v38) = *(_DWORD *)(v32 + 40);
          if (v38 >= 2)
          {
            v39 = ((v37 - 163) < 4) & (0xDu >> ((v37 + 93) & 0xF));
            v40 = !v36;
            v41 = 1;
            while (1)
            {
              v42 = *(_QWORD *)(v32 + 32) + 32 * v41;
              v43 = *(_QWORD *)(v3 + 272);
              v44 = *(unsigned int *)(v42 + 4);
              if ((v44 & 0x80000000) != 0)
                v45 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
              else
                v45 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v44);
              v46 = *v45;
              if ((*(_BYTE *)(v46 + 3) & 1) == 0)
                v46 = *(_QWORD *)(v46 + 24);
              v47 = *(_QWORD *)(v46 + 8);
              v48 = **(unsigned __int16 **)(v47 + 16);
              if ((v48 & 0xFFFE) == 0x74)
              {
                v49 = *(unsigned int *)(v47 + 40);
                if (!(_DWORD)v49)
                  goto LABEL_169;
                v50 = *(_QWORD *)(v47 + 32);
                v51 = (_DWORD *)(v50 + 16);
                while (*((_BYTE *)v51 - 16) != 17)
                {
                  v51 += 8;
                  if (!--v49)
                    goto LABEL_79;
                }
                if (*v51 == 2131)
                {
                  v52 = *(unsigned int *)(v50 + 68);
                  if ((v52 & 0x80000000) != 0)
                    v53 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
                  else
                    v53 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v52);
                  v66 = *v53;
                  if (!v66)
                  {
                    if ((v52 & 0x80000000) == 0)
                      goto LABEL_112;
LABEL_183:
                    v67 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
                    goto LABEL_184;
                  }
                  if ((*(_BYTE *)(v66 + 3) & 1) == 0)
                  {
                    v66 = *(_QWORD *)(v66 + 24);
                    if (!v66)
                    {
LABEL_182:
                      v3 = a1;
                      if ((v52 & 0x80000000) != 0)
                        goto LABEL_183;
LABEL_112:
                      v67 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v52);
LABEL_184:
                      v87 = *v67;
                      if (!v87)
                        goto LABEL_216;
                      while ((*(_BYTE *)(v87 + 3) & 1) != 0)
                      {
                        v87 = *(_QWORD *)(v87 + 24);
                        if (!v87)
                          goto LABEL_216;
                      }
                      while (1)
                      {
                        v87 = *(_QWORD *)(v87 + 24);
                        if (!v87)
                          break;
                        if ((*(_BYTE *)(v87 + 3) & 1) == 0)
                          goto LABEL_216;
                      }
                      v88 = 0;
                      v89 = **(unsigned __int16 **)(v66 + 16);
                      if (v89 > 0x104)
                      {
                        v91 = v89 - 314 > 0x2A || ((1 << (v89 - 58)) & 0x40000200003) == 0;
                        if (v91 && v89 != 261)
                          goto LABEL_263;
                      }
                      else
                      {
                        v90 = v89 - 163 > 0x38 || ((1 << (v89 + 93)) & 0x18800000000140DLL) == 0;
                        if (v90 && v89 != 85)
                          goto LABEL_263;
                      }
                      goto LABEL_169;
                    }
                    if ((*(_BYTE *)(v66 + 3) & 1) == 0)
                    {
                      v66 = 0;
                      goto LABEL_182;
                    }
                  }
                  v66 = *(_QWORD *)(v66 + 8);
                  goto LABEL_182;
                }
              }
LABEL_79:
              if (v48 == 177)
              {
                if ((v44 & 0x80000000) != 0)
                  v54 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
                else
                  v54 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v44);
                v55 = *v54;
                if (!v55)
                  goto LABEL_169;
                while ((*(_BYTE *)(v55 + 3) & 1) != 0)
                {
                  v55 = *(_QWORD *)(v55 + 24);
                  if (!v55)
                    goto LABEL_169;
                }
                while (1)
                {
                  v55 = *(_QWORD *)(v55 + 24);
                  if (!v55)
                    break;
                  if ((*(_BYTE *)(v55 + 3) & 1) == 0)
                    goto LABEL_169;
                }
                v56 = *(_QWORD *)(v47 + 32);
                v57 = *(unsigned int *)(v56 + 36);
                if ((v57 & 0x80000000) != 0)
                  v58 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
                else
                  v58 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v57);
                v59 = *v58;
                if ((*(_BYTE *)(v59 + 3) & 1) == 0)
                  v59 = *(_QWORD *)(v59 + 24);
                v42 = v56 + 32;
                v47 = *(_QWORD *)(v59 + 8);
                v48 = **(unsigned __int16 **)(v47 + 16);
              }
              if (v48 == 184)
              {
                v60 = *(unsigned int *)(v42 + 4);
                if ((v60 & 0x80000000) != 0)
                  v61 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
                else
                  v61 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v60);
                v62 = *v61;
                if (!v62)
                  goto LABEL_169;
                while ((*(_BYTE *)(v62 + 3) & 1) != 0)
                {
                  v62 = *(_QWORD *)(v62 + 24);
                  if (!v62)
                    goto LABEL_169;
                }
                while (1)
                {
                  v62 = *(_QWORD *)(v62 + 24);
                  if (!v62)
                    break;
                  if ((*(_BYTE *)(v62 + 3) & 1) == 0)
                    goto LABEL_169;
                }
                v63 = *(_QWORD *)(v47 + 32);
                v64 = *(unsigned int *)(v63 + 36);
                if ((v64 & 0x80000000) != 0)
                  v65 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
                else
                  v65 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v64);
                v68 = *v65;
                if ((*(_BYTE *)(v68 + 3) & 1) == 0)
                  v68 = *(_QWORD *)(v68 + 24);
                v42 = v63 + 32;
                v47 = *(_QWORD *)(v68 + 8);
                v48 = **(unsigned __int16 **)(v47 + 16);
              }
              if (v48 == 179)
              {
                v69 = *(unsigned int *)(*(_QWORD *)(v47 + 32) + 36);
                if ((v69 & 0x80000000) != 0)
                  v70 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                else
                  v70 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v69);
                v71 = *v70;
                if (v71)
                {
                  if ((*(_BYTE *)(v71 + 3) & 1) != 0
                    || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0)
                  {
                    v72 = *(_QWORD *)(v71 + 8);
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v3 = a1;
                }
                else
                {
                  v72 = 0;
                }
                v73 = **(unsigned __int16 **)(v72 + 16);
                if (v73 == 318)
                  v74 = v39;
                else
                  v74 = 1;
                if (!(v74 | v40))
                  goto LABEL_168;
                v75 = v22;
                v76 = v37;
                v77 = *(unsigned int *)(v42 + 4);
                v78 = v40;
                v79 = (uint64_t *)((v77 & 0x80000000) != 0
                                ? *(_QWORD *)(v43 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8
                                : *(_QWORD *)(v43 + 272) + 8 * v77);
                v80 = *v79;
                if (v80)
                {
                  while ((*(_BYTE *)(v80 + 3) & 1) != 0)
                  {
                    v80 = *(_QWORD *)(v80 + 24);
                    if (!v80)
                      goto LABEL_136;
                  }
                  while (1)
                  {
                    v80 = *(_QWORD *)(v80 + 24);
                    if (!v80)
                      break;
                    if ((*(_BYTE *)(v80 + 3) & 1) == 0)
                      goto LABEL_136;
                  }
                  v37 = v76;
                  v22 = v75;
                  v3 = a1;
                }
                else
                {
LABEL_136:
                  v226 = v230;
                  v227 = (uint64_t)v230;
                  v228 = 8;
                  LODWORD(v229) = 0;
                  v81 = sub_1C4923E58(v47, (llvm::SmallPtrSetImplBase *)&v226, v43);
                  if ((void *)v227 != v226)
                    free((void *)v227);
                  v40 = v78;
                  v37 = v76;
                  v22 = v75;
                  v3 = a1;
                  if (!v81)
                    goto LABEL_169;
                  v73 = **(unsigned __int16 **)(v72 + 16);
                }
                if (v73 != 318)
                {
                  v82 = *(_QWORD *)(v3 + 272);
                  if ((v69 & 0x80000000) != 0)
                    v83 = (uint64_t *)(*(_QWORD *)(v82 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                  else
                    v83 = (uint64_t *)(*(_QWORD *)(v82 + 272) + 8 * v69);
                  v84 = *v83;
                  if (v84)
                  {
                    while ((*(_BYTE *)(v84 + 3) & 1) != 0)
                    {
                      v84 = *(_QWORD *)(v84 + 24);
                      if (!v84)
                        goto LABEL_151;
                    }
                    while (1)
                    {
                      v84 = *(_QWORD *)(v84 + 24);
                      if (!v84)
                        break;
                      if ((*(_BYTE *)(v84 + 3) & 1) == 0)
                        goto LABEL_151;
                    }
                  }
                  else
                  {
LABEL_151:
                    *((_BYTE *)&v211 + v41 - 1) = 1;
                  }
                  if (v73 > 260)
                  {
                    if ((v73 - 314) <= 0x2A
                      && ((1 << (v73 - 58)) & 0x40000200003) != 0
                      || v73 == 261)
                    {
                      goto LABEL_169;
                    }
                    goto LABEL_161;
                  }
                  if ((v73 - 163) <= 0x38
                    && ((1 << (v73 + 93)) & 0x18800000038540DLL) != 0
                    || v73 == 85)
                  {
                    goto LABEL_169;
                  }
                  if (v73 == 116)
                  {
LABEL_162:
                    v85 = *(unsigned int *)(v72 + 40);
                    if ((_DWORD)v85)
                    {
                      v86 = (_DWORD *)(*(_QWORD *)(v72 + 32) + 16);
                      while (*((_BYTE *)v86 - 16) != 17)
                      {
                        v86 += 8;
                        if (!--v85)
                          goto LABEL_168;
                      }
                      if (*v86 == 2131)
                        goto LABEL_169;
                    }
                  }
                  else
                  {
LABEL_161:
                    if ((v73 & 0xFFFE) == 0x74)
                      goto LABEL_162;
                  }
LABEL_168:
                  *((_BYTE *)&v211 + v41 - 1) = 1;
                }
              }
LABEL_169:
              ++v41;
              v38 = *(unsigned int *)(v32 + 40);
              if (v41 >= v38)
              {
                v92 = v211;
                v93 = BYTE1(v211);
                v94 = BYTE2(v211);
                goto LABEL_207;
              }
            }
          }
          v94 = 0;
          v93 = 0;
          v92 = 0;
LABEL_207:
          if (v92)
            v95 = 0;
          else
            v95 = v93 == 0;
          if (v95 && v94 == 0)
          {
LABEL_216:
            v88 = 0;
            goto LABEL_263;
          }
          v226 = &v228;
          v227 = 0x300000000;
          if (v38 >= 2)
          {
            v97 = 0;
            v98 = 36;
            while (1)
            {
              v99 = sub_1C4923758(*(_DWORD *)(*(_QWORD *)(v32 + 32) + v98), *((_BYTE *)&v211 + v97), v33, *(_QWORD *)(v3 + 272), 1);
              if (!HIDWORD(v99))
                break;
              LODWORD(v222) = v99;
              LODWORD(v224) = 0;
              v100 = sub_1C4926708((uint64_t)&v226, (unint64_t)&v222, 1);
              v101 = (char *)v226 + 24 * v227;
              v102 = *(_OWORD *)v100;
              *((_QWORD *)v101 + 2) = *(_QWORD *)(v100 + 16);
              *(_OWORD *)v101 = v102;
              LODWORD(v227) = v227 + 1;
              v103 = v97 + 2;
              ++v97;
              v98 += 32;
              if (v103 >= *(unsigned int *)(v32 + 40))
                goto LABEL_220;
            }
            v88 = 0;
            goto LABEL_261;
          }
LABEL_220:
          v222 = 257;
          LODWORD(v223) = 0;
          v104 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t))(*v33 + 32))(v33, v37, &v222, 1);
          v106 = v105;
          *(_WORD *)(v105 + 44) = *(_WORD *)(v105 + 44) & 0xC | *(_WORD *)(v32 + 44) & 0xFFF3;
          v107 = *(unsigned int *)(*(_QWORD *)(v32 + 32) + 4);
          v108 = *(_QWORD *)(v3 + 272);
          if ((v107 & 0x80000000) != 0)
            v109 = (uint64_t *)(*(_QWORD *)(v108 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
          else
            v109 = (uint64_t *)(*(_QWORD *)(v108 + 272) + 8 * v107);
          for (j = *v109; (*(_BYTE *)(j + 3) & 1) != 0; j = *(_QWORD *)(j + 24))
            ;
          v111 = *(_QWORD *)(j + 8);
          if ((v107 & 0x80000000) != 0)
            v112 = (uint64_t *)(*(_QWORD *)(v108 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
          else
            v112 = (uint64_t *)(*(_QWORD *)(v108 + 272) + 8 * v107);
          v113 = *v112;
          if (!v113)
            goto LABEL_239;
          while ((*(_BYTE *)(v113 + 3) & 1) != 0)
          {
            v113 = *(_QWORD *)(v113 + 24);
            if (!v113)
              goto LABEL_239;
          }
          while (1)
          {
            v113 = *(_QWORD *)(v113 + 24);
            if (!v113)
              break;
            if ((*(_BYTE *)(v113 + 3) & 1) == 0)
              goto LABEL_239;
          }
          if (**(_WORD **)(v111 + 16) == 178)
          {
            sub_1C4923194(*(_QWORD **)(v3 + 272), v111, *(_DWORD *)(*(_QWORD *)(v105 + 32) + 4), *(_QWORD **)(v3 + 288));
          }
          else
          {
LABEL_239:
            if ((v107 & 0x80000000) != 0)
              v114 = (uint64_t *)(*(_QWORD *)(v108 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
            else
              v114 = (uint64_t *)(*(_QWORD *)(v108 + 272) + 8 * v107);
            v115 = *v114;
            if (v115)
            {
              while ((*(_BYTE *)(v115 + 3) & 1) != 0)
              {
                v115 = *(_QWORD *)(v115 + 24);
                if (!v115)
                  goto LABEL_257;
              }
              while (1)
              {
                v115 = *(_QWORD *)(v115 + 24);
                if (!v115)
                  break;
                if ((*(_BYTE *)(v115 + 3) & 1) == 0)
                  goto LABEL_257;
              }
              if ((**(_WORD **)(v111 + 16) & 0xFFFE) == 0x74)
              {
                v116 = *(unsigned int *)(v111 + 40);
                if ((_DWORD)v116)
                {
                  v117 = (_DWORD *)(*(_QWORD *)(v111 + 32) + 16);
                  while (*((_BYTE *)v117 - 16) != 17)
                  {
                    v117 += 8;
                    if (!--v116)
                      goto LABEL_257;
                  }
                  if (*v117 == 2131)
                  {
                    LODWORD(v204) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(v3 + 272), 257, "", 0);
                    v118 = sub_1C5547D24(v33, 2131, (int *)&v204, 1, 0);
                    v120 = v119;
                    v121 = *(_DWORD *)(*(_QWORD *)(v106 + 32) + 4);
                    v223 = 0;
                    HIDWORD(v222) = v121;
                    LODWORD(v222) = 0;
                    v224 = 0;
                    v225 = 0;
                    llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v222);
                    __p = (void *)129;
                    LODWORD(v208) = 0;
                    v222 = (uint64_t)v118;
                    v223 = v120;
                    v88 = 1;
                    LODWORD(v224) = 1;
                    (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*v33 + 32))(v33, 179, &__p, 1, &v222, 1, 0);
                    sub_1C4923194(*(_QWORD **)(v3 + 272), v111, *(_DWORD *)(*(_QWORD *)(v122 + 32) + 4), *(_QWORD **)(v3 + 288));
                    goto LABEL_261;
                  }
                }
              }
            }
LABEL_257:
            LODWORD(__p) = *(_DWORD *)(*(_QWORD *)(v32 + 32) + 4);
            LODWORD(v208) = 1;
            v222 = v104;
            v223 = (llvm::MachineInstr *)v105;
            LODWORD(v224) = 1;
            (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(*v33 + 32))(v33, 179, &__p, 1, &v222, 1, 0);
            v123 = v32;
            if ((*(_BYTE *)v32 & 4) == 0)
            {
              v123 = v32;
              if ((*(_WORD *)(v32 + 44) & 8) != 0)
              {
                v123 = v32;
                do
                  v123 = *(_QWORD *)(v123 + 8);
                while ((*(_WORD *)(v123 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v32 + 24) + 40, v32, *(_QWORD *)(v123 + 8));
          }
          v88 = 1;
LABEL_261:
          if (v226 != &v228)
            free(v226);
LABEL_263:
          v22 = v22 | v88;
          v25 = v233;
        }
      }
    }
  }
  LOBYTE(v22) = 0;
LABEL_298:
  if (v232 != v234)
    free(v232);
  *(_QWORD *)(a2 + 728) = 0;
  LOWORD(v233) = 1;
  v232 = &off_1E7FA3608;
  v133 = *(_QWORD *)(v3 + 256);
  memset(v234, 0, 11);
  v234[2] = v133;
  v235 = *(_OWORD *)(v3 + 272);
  v236 = *v198;
  v134 = *(_QWORD *)(v3 + 320);
  v226 = &v232;
  v227 = 0;
  v228 = v134;
  v229 = 0;
  v203 = sub_1C54F59B4();
  v135 = v229;
  v229 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  *(_QWORD *)(a2 + 728) = &v212;
  *(_QWORD *)(v3 + 288) = &v213;
  v209 = 0;
  v210 = a2;
  v222 = 0;
  v223 = 0;
  LODWORD(v224) = 0;
  v232 = v234;
  v233 = 0x1000000000;
  __p = 0;
  v208 = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)&v210);
  v137 = (char *)__p;
  v136 = v208;
LABEL_303:
  if (v136 != v137)
  {
    v139 = *((_QWORD *)v136 - 1);
    v136 -= 8;
    v138 = v139;
    v140 = v139 + 48;
    for (k = *(_QWORD *)(v139 + 56); ; k = *(_QWORD *)(k + 8))
    {
      if (k == v140)
        goto LABEL_303;
      v142 = **(unsigned __int16 **)(k + 16);
      if ((v142 & 0xFFFE) == 0x152)
        break;
      if (v142 != 166 && v142 != 163 || !(_DWORD)v224)
      {
LABEL_326:
        if ((*(_BYTE *)k & 4) != 0)
          continue;
        goto LABEL_329;
      }
      LODWORD(v146) = (v224 - 1) & ((k >> 4) ^ (k >> 9));
      v147 = (uint64_t *)(v222 + 16 * v146);
      v148 = *v147;
      if (k == *v147)
      {
LABEL_317:
        if (v147 != (uint64_t *)(v222 + 16 * v224))
        {
          v151 = v233;
          if (v233 >= HIDWORD(v233))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)v234, v233 + 1, 8);
            *((_QWORD *)v232 + v233) = k;
            v151 = v233;
          }
          else
          {
            *((_QWORD *)v232 + v233) = k;
          }
          LODWORD(v233) = v151 + 1;
        }
      }
      else
      {
        v149 = 1;
        while (v148 != -4096)
        {
          v150 = v146 + v149++;
          v146 = v150 & (v224 - 1);
          v148 = *(_QWORD *)(v222 + 16 * v146);
          if (k == v148)
          {
            v147 = (uint64_t *)(v222 + 16 * v146);
            goto LABEL_317;
          }
        }
      }
LABEL_325:
      if (k)
        goto LABEL_326;
LABEL_329:
      while ((*(_WORD *)(k + 44) & 8) != 0)
        k = *(_QWORD *)(k + 8);
    }
    v143 = *(_QWORD *)(v3 + 272);
    v144 = *(unsigned int *)(*(_QWORD *)(k + 32) + 4);
    if ((v144 & 0x80000000) != 0)
      v145 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v144 & 0x7FFFFFFF) + 8);
    else
      v145 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v144);
    v152 = *v145;
    if (!*v145)
      goto LABEL_326;
    while ((*(_BYTE *)(v152 + 3) & 1) != 0)
    {
      v152 = *(_QWORD *)(v152 + 24);
      if (!v152)
        goto LABEL_325;
    }
    v153 = *(_QWORD *)(v152 + 8);
LABEL_332:
    v154 = **(unsigned __int16 **)(v153 + 16);
    if (v154 == 166 || v154 == 163)
    {
      if (*(_QWORD *)(v153 + 24) == v138)
      {
LABEL_345:
        v159 = *(_QWORD *)(v152 + 8);
        while (1)
        {
          v152 = *(_QWORD *)(v152 + 24);
          if (!v152)
            goto LABEL_325;
          if ((*(_BYTE *)(v152 + 3) & 1) == 0)
          {
            v153 = *(_QWORD *)(v152 + 8);
            if (v153 != v159)
              goto LABEL_332;
          }
        }
      }
      v204 = v138;
      v211 = v153;
      sub_1C614481C(&v222, &v211, &v204, (uint64_t)&v226);
      if (!(_BYTE)v228)
        *((_QWORD *)v226 + 1) = v204;
      v154 = **(unsigned __int16 **)(v153 + 16);
    }
    if (v154 == 178)
    {
      v155 = *(_QWORD *)(v3 + 272);
      v156 = *(unsigned int *)(*(_QWORD *)(v153 + 32) + 4);
      v157 = (uint64_t *)((v156 & 0x80000000) != 0
                       ? *(_QWORD *)(v155 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v155 + 272) + 8 * v156);
      v158 = *v157;
      if (*v157)
      {
        while ((*(_BYTE *)(v158 + 3) & 1) != 0)
        {
          v158 = *(_QWORD *)(v158 + 24);
          if (!v158)
            goto LABEL_345;
        }
        v160 = *(_QWORD *)(v158 + 8);
LABEL_351:
        v161 = **(unsigned __int16 **)(v160 + 16);
        if ((v161 == 166 || v161 == 163) && *(_QWORD *)(v160 + 24) != v138)
        {
          v204 = v138;
          v211 = v160;
          sub_1C614481C(&v222, &v211, &v204, (uint64_t)&v226);
          if (!(_BYTE)v228)
            *((_QWORD *)v226 + 1) = v204;
          v160 = *(_QWORD *)(v158 + 8);
        }
        while (1)
        {
          v158 = *(_QWORD *)(v158 + 24);
          if (!v158)
            break;
          if ((*(_BYTE *)(v158 + 3) & 1) == 0 && *(_QWORD *)(v158 + 8) != v160)
          {
            v160 = *(_QWORD *)(v158 + 8);
            goto LABEL_351;
          }
        }
      }
    }
    goto LABEL_345;
  }
  v226 = 0;
  v227 = 0;
  v228 = (uint64_t)v230;
  v229 = 0x400000000;
  v230[4] = v231;
  v230[5] = 0;
  v231[0] = 0;
  v231[1] = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v162 = v233;
  if ((_DWORD)v233)
  {
    v163 = (char *)v232;
    v164 = (char *)v232 + 8 * v233;
    do
    {
      v166 = *((_QWORD *)v164 - 1);
      v164 -= 8;
      v165 = v166;
      if ((_DWORD)v224)
      {
        LODWORD(v168) = ((v165 >> 4) ^ (v165 >> 9)) & (v224 - 1);
        v167 = (uint64_t *)(v222 + 16 * v168);
        v169 = *v167;
        if (v165 != *v167)
        {
          v173 = 1;
          while (v169 != -4096)
          {
            v174 = v168 + v173++;
            v168 = v174 & (v224 - 1);
            v169 = *(_QWORD *)(v222 + 16 * v168);
            if (v165 == v169)
            {
              v167 = (uint64_t *)(v222 + 16 * v168);
              goto LABEL_367;
            }
          }
          v167 = (uint64_t *)(v222 + 16 * v224);
        }
      }
      else
      {
        v167 = (uint64_t *)v222;
      }
LABEL_367:
      v211 = v167[1];
      v170 = *v167;
      v171 = sub_1C6144E40(&v204, &v211)[1];
      if (!v171)
      {
        v171 = sub_1C484358C((uint64_t)&v226, 144, 3);
        *(_QWORD *)v171 = v171 + 16;
        *(_QWORD *)(v171 + 8) = 0x1000000000;
        sub_1C6144E40(&v204, &v211)[1] = v171;
      }
      v172 = *(unsigned int *)(v171 + 8);
      if (v172 >= *(_DWORD *)(v171 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v171, v171 + 16, v172 + 1, 8);
        *(_QWORD *)(*(_QWORD *)v171 + 8 * *(unsigned int *)(v171 + 8)) = v170;
        LODWORD(v172) = *(_DWORD *)(v171 + 8);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v171 + 8 * v172) = v170;
      }
      *(_DWORD *)(v171 + 8) = v172 + 1;
    }
    while (v164 != v163);
    v175 = v204;
    v162 = v206;
    if ((_DWORD)v205)
    {
      v176 = v204 + 16 * v206;
      v177 = v203;
      if (v206)
      {
        v178 = 0;
        while ((*(_QWORD *)(v204 + v178) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v178 += 16;
          if (16 * v206 == v178)
          {
            v179 = v204 + 16 * v206;
            goto LABEL_387;
          }
        }
        v179 = v204 + v178;
      }
      else
      {
        v179 = v204;
      }
      goto LABEL_387;
    }
  }
  else
  {
    v175 = 0;
  }
  v177 = v203;
  v179 = v175 + 16 * v162;
  v176 = v179;
LABEL_387:
  v180 = v175 + 16 * v162;
  if (v179 == v180)
  {
    v181 = 0;
  }
  else
  {
    v181 = 0;
    do
    {
      v182 = sub_1C61444C4(v3, *(_QWORD *)(v179 + 8), *(llvm::MachineBasicBlock **)v179);
      v183 = v179 + 16;
      v179 = v176;
      if (v183 != v176)
      {
        v179 = v183;
        while ((*(_QWORD *)v179 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v179 += 16;
          if (v179 == v176)
          {
            v179 = v176;
            break;
          }
        }
      }
      v181 |= v182;
    }
    while (v179 != v180);
    v175 = v204;
  }
  MEMORY[0x1CAA32FB4](v175, 8);
  sub_1C4926934((uint64_t)&v226);
  sub_1C4926AE8((uint64_t)&v226);
  if (__p)
  {
    v208 = (char *)__p;
    operator delete(__p);
  }
  if (v232 != v234)
    free(v232);
  MEMORY[0x1CAA32FB4](v222, 8);
  v132 = v22 | v177 | v181;
  v184 = *(_QWORD *)(a2 + 328);
  if (v184 != v201)
  {
LABEL_402:
    for (m = *(_QWORD *)(v184 + 56); ; m = *(_QWORD *)(m + 8))
    {
      if (m == v184 + 48)
      {
        v184 = *(_QWORD *)(v184 + 8);
        if (v184 == v201)
          break;
        goto LABEL_402;
      }
      v186 = *(_QWORD *)(v3 + 248);
      *(_QWORD *)(v186 + 40) = *(_QWORD *)(m + 24);
      *(_QWORD *)(v186 + 48) = m;
      v232 = (void *)v3;
      v233 = v186;
      v187 = **(unsigned __int16 **)(m + 16);
      v188 = (v187 - 163);
      if (v188 > 0x36)
        goto LABEL_408;
      if (((1 << (v187 + 93)) & 0x67) != 0)
      {
        v191 = sub_1C492348C(&v232, m, 1u);
        v192 = m;
        v193 = 2;
        goto LABEL_422;
      }
      if (v188 == 3)
      {
        v194 = sub_1C492348C(&v232, m, 1u);
        v191 = v194 | sub_1C492348C(&v232, m, 2u);
        goto LABEL_421;
      }
      if (((1 << (v187 + 93)) & 0x7800000027FE80) == 0)
      {
LABEL_408:
        if ((v187 - 314) > 0x2A || ((1 << (v187 - 58)) & 0x40000200003) == 0)
        {
          if (v187 != 135)
          {
            LOBYTE(v190) = 0;
            goto LABEL_415;
          }
          v191 = sub_1C492348C(&v232, m, 2u);
LABEL_421:
          v192 = m;
          v193 = 3;
LABEL_422:
          v190 = v191 | sub_1C492348C(&v232, v192, v193);
          goto LABEL_415;
        }
      }
      LOBYTE(v190) = sub_1C492348C(&v232, m, 1u);
LABEL_415:
      if ((*(_BYTE *)m & 4) == 0)
      {
        while ((*(_WORD *)(m + 44) & 8) != 0)
          m = *(_QWORD *)(m + 8);
      }
      v132 |= v190;
    }
  }
  *(_QWORD *)(a2 + 728) = 0;
  v212 = &off_1E7FA1778;
  v213 = (void (**)())&unk_1E7FA17D0;
  if (v219 != v221)
    free(v219);
  v213 = off_1E7FA1810;
  if (v215 != v214)
    free(v215);
  return v132 & 1;
}

const char *sub_1C4925C50()
{
  return "AGX2ISelPrepare";
}

void sub_1C4925C60(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x21uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

BOOL sub_1C4925D94(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  v7 = v5;
  if ((*(_BYTE *)(v5 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v5 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (**(_WORD **)(v8 + 16) == 126 && *(_DWORD *)(v8 + 40) == 2)
        return 1;
    }
  }
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v9 = *(_QWORD *)(v5 + 8);
  if (!v9 || **(_WORD **)(v9 + 16) != 124)
    return 0;
  return *(_DWORD *)(v9 + 40) == 2;
}

uint64_t sub_1C4925E50(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
    return 0;
  if (**(_WORD **)(v6 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v6 + 40) != 3)
    return 0;
  v7 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v6 + 32) + 68), a2);
  if (!v8)
    return 0;
  **(_QWORD **)(a1 + 8) = v7;
  return 1;
}

uint64_t sub_1C4925F00(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (**(_WORD **)(a1 + 16) != 76 || *(_DWORD *)(a1 + 40) != 3)
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(v5 + 36);
  if ((int)v6 >= 0)
    v7 = (uint64_t *)(a3 + 8 * v6);
  else
    v7 = (uint64_t *)(a2 + 16 * (v6 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
      goto LABEL_26;
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8)
      goto LABEL_10;
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
LABEL_26:
      v8 = *(_QWORD *)(v8 + 8);
    else
      v8 = 0;
  }
LABEL_10:
  v9 = *(unsigned int *)(v5 + 68);
  if ((int)v9 >= 0)
    v10 = (uint64_t *)(a3 + 8 * v9);
  else
    v10 = (uint64_t *)(a2 + 16 * (v9 & 0x7FFFFFFF) + 8);
  v11 = *v10;
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    {
      v11 = *(_QWORD *)(v11 + 24);
      if (!v11)
        goto LABEL_14;
      if ((*(_BYTE *)(v11 + 3) & 1) == 0)
      {
        v11 = 0;
        goto LABEL_14;
      }
    }
    v11 = *(_QWORD *)(v11 + 8);
  }
LABEL_14:
  if (**(_WORD **)(v8 + 16) == 318 && **(_WORD **)(v11 + 16) == 318)
  {
    *a4 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
    a4[1] = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4);
    return 1;
  }
  return 0;
}

uint64_t sub_1C4925FFC(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD v38[18];
  _DWORD v39[4];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = 32;
  if (a2 == 1)
    v3 = 64;
  v4 = a1[1];
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(unsigned int *)(v5 + v3 + 4);
  if ((v6 & 0x80000000) != 0)
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  else
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v6);
  v8 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  if (**(_WORD **)(*(_QWORD *)(v8 + 8) + 16) == 269)
    return 0;
  v9 = *(unsigned int *)(v5 + 32 * a2 + 4);
  if ((v9 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v9);
  v11 = *v10;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    v11 = *(_QWORD *)(v11 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 47)
    return 0;
  v13 = (uint64_t *)((v9 & 0x80000000) != 0
                  ? *(_QWORD *)(v4 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v4 + 272) + 8 * v9);
  v14 = *v13;
  if (!v14)
    return 0;
  while ((*(_BYTE *)(v14 + 3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      return 0;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14)
      break;
    if ((*(_BYTE *)(v14 + 3) & 1) == 0)
      return 0;
  }
  v15 = a1[2];
  v16 = *(_DWORD *)(v15 + 264);
  if (!v16)
    goto LABEL_44;
  v17 = *(_QWORD *)(v12 + 24);
  v18 = *(_QWORD *)(v15 + 248);
  v19 = v16 - 1;
  v20 = ((v17 >> 4) ^ (v17 >> 9)) & v19;
  v21 = *(_QWORD *)(v18 + 16 * v20);
  if (v17 != v21)
  {
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v20 + v22++;
      v20 = v23 & v19;
      v21 = *(_QWORD *)(v18 + 16 * v20);
      if (v17 == v21)
        goto LABEL_29;
    }
    goto LABEL_33;
  }
LABEL_29:
  v24 = *(_QWORD **)(v18 + 16 * v20 + 8);
  if (!v24)
  {
LABEL_33:
    v25 = 0;
    goto LABEL_34;
  }
  v25 = 0;
  do
  {
    v24 = (_QWORD *)*v24;
    ++v25;
  }
  while (v24);
LABEL_34:
  v26 = *(_QWORD *)(*a1 + 24);
  v27 = ((v26 >> 4) ^ (v26 >> 9)) & v19;
  v28 = *(_QWORD *)(v18 + 16 * v27);
  if (v26 != v28)
  {
    v29 = 1;
    while (v28 != -4096)
    {
      v30 = v27 + v29++;
      v27 = v30 & v19;
      v28 = *(_QWORD *)(v18 + 16 * v27);
      if (v26 == v28)
        goto LABEL_38;
    }
    goto LABEL_42;
  }
LABEL_38:
  v31 = *(_QWORD **)(v18 + 16 * v27 + 8);
  if (!v31)
  {
LABEL_42:
    v32 = 0;
    goto LABEL_43;
  }
  v32 = 0;
  do
  {
    v31 = (_QWORD *)*v31;
    ++v32;
  }
  while (v31);
LABEL_43:
  if (v25 != v32)
    return 0;
LABEL_44:
  v33 = a1[3];
  v39[0] = *(_DWORD *)a1[4];
  v39[2] = 1;
  v34 = *(_QWORD *)(v12 + 32);
  v38[0] = *(_DWORD *)(v34 + 36);
  v38[4] = 0;
  v38[6] = *(_DWORD *)(v34 + 68);
  v38[10] = 0;
  v38[12] = v6;
  v38[16] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, 56, v39, 1, v38, 3, *(unsigned __int16 *)a1[5] | 0x100000000);
  v35 = *a1;
  v36 = *a1;
  if ((*(_BYTE *)*a1 & 4) == 0)
  {
    v36 = *a1;
    if ((*(_WORD *)(v35 + 44) & 8) != 0)
    {
      v36 = *a1;
      do
        v36 = *(_QWORD *)(v36 + 8);
      while ((*(_WORD *)(v36 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(*a1 + 24) + 40, v35, *(_QWORD *)(v36 + 8));
  return 1;
}

uint64_t sub_1C49262F0(uint64_t a1, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  if (a2 < 0)
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v4 = *v3;
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(a1 + 272) + 8 * a2;
  if (a2 < 0)
    v7 = *(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8;
  v8 = *(_QWORD *)v7;
  if ((*(_BYTE *)(*(_QWORD *)v7 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = **(_WORD **)(v9 + 16) == 121 && *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48) != 0;
  result = 1;
  if (!v10)
  {
    v11 = **(unsigned __int16 **)(v6 + 16);
    if (v11 != 179)
    {
      v12 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
      {
        while ((*(_BYTE *)(v12 + 3) & 1) != 0)
        {
          v12 = *(_QWORD *)(v12 + 24);
          if (!v12)
            goto LABEL_21;
        }
        while (1)
        {
          v12 = *(_QWORD *)(v12 + 24);
          if (!v12)
            break;
          if ((*(_BYTE *)(v12 + 3) & 1) == 0)
            goto LABEL_21;
        }
        if (!a3)
        {
LABEL_37:
          v16 = 1;
          if (v11 > 260)
          {
            if (((v11 - 314) > 0x2A || ((1 << (v11 - 58)) & 0x40000200003) == 0)
              && v11 != 261)
            {
              goto LABEL_45;
            }
          }
          else if (((v11 - 163) > 0x38
                  || ((1 << (v11 + 93)) & 0x18800000000140DLL) == 0)
                 && v11 != 85)
          {
LABEL_45:
            v16 = 0;
          }
          if (v11 == 182)
            v16 = 1;
          if (v11 == 183)
            return 1;
          else
            return v16;
        }
      }
      else
      {
LABEL_21:
        if ((a3 & 1) == 0)
          return 0;
      }
      v13 = *(_QWORD *)v7;
      if (!v13)
        goto LABEL_37;
      while ((*(_BYTE *)(v13 + 3) & 1) != 0)
      {
        v13 = *(_QWORD *)(v13 + 24);
        if (!v13)
          goto LABEL_37;
      }
      v14 = 0;
      v15 = *(_QWORD *)(v13 + 8);
LABEL_31:
      ++v14;
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 24);
        if (!v13)
          break;
        if ((*(_BYTE *)(v13 + 3) & 1) == 0 && *(_QWORD *)(v13 + 8) != v15)
        {
          v15 = *(_QWORD *)(v13 + 8);
          goto LABEL_31;
        }
      }
      if ((v14 & 0xFFFFFFFE) == 0)
        goto LABEL_37;
      return 0;
    }
  }
  return result;
}

unsigned __int8 **sub_1C49264C4(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a2 != a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack((uint64_t)a1, *a1);
    *a1 = *a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)a1);
      *a2 = 0;
    }
  }
  return a1;
}

uint64_t sub_1C4926528(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C49265BC(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C614495C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4926674(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

unint64_t sub_1C4926708(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
    }
  }
  return v3;
}

_QWORD *sub_1C4926780(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6144D8C(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1C4926838(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -4096;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_1C4926934(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; i <= v8; i += 144)
      {
        v10 = *(void **)(i - 144);
        if ((void *)(i - 128) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; j <= v14; j += 144)
      {
        v16 = *(void **)(j - 144);
        if ((void *)(j - 128) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C4926A50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 72);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 64);
    v4 = 16 * v2;
    do
    {
      v5 = *v3;
      v3 += 2;
      result = MEMORY[0x1CAA32FB4](v5, 8);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  v6 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v6)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v7 = *(_QWORD **)(v1 + 16);
    v8 = *v7 + 4096;
    *(_QWORD *)v1 = *v7;
    *(_QWORD *)(v1 + 8) = v8;
    if ((_DWORD)v6 != 1)
    {
      v9 = v7 + 1;
      v10 = 8 * v6 - 8;
      do
      {
        v11 = *v9++;
        result = MEMORY[0x1CAA32FB4](v11, 8);
        v10 -= 8;
      }
      while (v10);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t sub_1C4926AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      MEMORY[0x1CAA32FB4](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  v6 = *(uint64_t **)(a1 + 64);
  v7 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v7)
  {
    v8 = 16 * v7;
    do
    {
      v9 = *v6;
      v6 += 2;
      MEMORY[0x1CAA32FB4](v9, 8);
      v8 -= 16;
    }
    while (v8);
    v6 = *(uint64_t **)(a1 + 64);
  }
  if (v6 != (uint64_t *)(a1 + 80))
    free(v6);
  v10 = *(void **)(a1 + 16);
  if (v10 != (void *)(a1 + 32))
    free(v10);
  return a1;
}

_QWORD *sub_1C4926B84(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6144FEC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4926C3C()
{
  int v1;
  int *v2;
  int v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Should enable CSE in AGX2 ISel Prepare";
  *((_QWORD *)&v4 + 1) = 38;
  v3 = 0;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7EB318, "enable-cse-in-agx2-iselprepare", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB318, &dword_1C475E000);
  *(_QWORD *)&v4 = "Should hoist instructions to allow forming fma.shff up to this hoist depth.";
  *((_QWORD *)&v4 + 1) = 75;
  v3 = 0;
  v1 = 4;
  v2 = &v1;
  sub_1C6144AF4((uint64_t)&unk_1ED7EB3D8, "fma-shff-hoist-depth-agx2", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7EB3D8, &dword_1C475E000);
}

uint64_t sub_1C4926D1C(uint64_t a1, uint64_t a2, _BOOL8 a3, unsigned int a4)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL8 *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  __int16 v18;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 428 || v6 == 192)
  {
    v11 = *(_QWORD *)(a2 + 32);
    v8 = (uint64_t *)(v11 + 120);
    v9 = (_BOOL8 *)(v11 + 128);
    v10 = (uint64_t *)(v11 + 160);
  }
  else
  {
    if (v6 != 190)
    {
      v18 = sub_1C4926E44(a2, a3, a4, *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      *(_BYTE *)(a1 + 2) |= (v18 & 0x300) == 512;
      return v18 & 1;
    }
    v7 = *(_QWORD *)(a2 + 32);
    v8 = (uint64_t *)(v7 + 40);
    v9 = (_BOOL8 *)(v7 + 48);
    v10 = (uint64_t *)(v7 + 80);
  }
  v12 = *v10;
  v13 = v10[1];
  v14 = sub_1C4926E44(*v8, *v9, a4, *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
  if ((v14 & 1) == 0)
    return 0;
  v15 = v14;
  v16 = sub_1C4926E44(v12, v13, a4, *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
  if ((v16 & 1) == 0 || (unsigned __int16)(v16 & v15) < 0x100u)
    return 0;
  *(_BYTE *)(a1 + 2) |= (v16 & v15 & 0x300) == 512;
  return 1;
}

uint64_t sub_1C4926E44(uint64_t a1, _BOOL8 a2, unsigned int a3, int a4, uint64_t a5)
{
  int v10;
  unint64_t ExtendedSizeInBits;
  const char *v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  const char *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  unsigned int v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;

  v10 = *(unsigned __int16 *)(a1 + 24);
  if ((v10 - 198) <= 2)
  {
    v30 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 40) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
    if ((_BYTE)v30)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v30);
    else
      ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
    if ((_DWORD)v12 == 1)
    {
      v27 = ExtendedSizeInBits;
      ExtendedSizeInBits = v27;
    }
    if (ExtendedSizeInBits <= a3)
    {
      if (v10 == 198)
        goto LABEL_20;
      if (v10 == 200)
      {
        v22 = 3;
        goto LABEL_27;
      }
      if (v10 == 199 && !sub_1C6368648(a5, **(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0) && a4)
      {
LABEL_26:
        v22 = 2;
LABEL_27:
        LOBYTE(v21) = 1;
        return v21 | (v22 << 8);
      }
    }
  }
  v13 = *(unsigned __int16 *)(a1 + 24);
  if ((v13 - 3) <= 1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    v15 = v13 != 3;
    v30 = *(_OWORD *)(v14 + 80);
    if ((_BYTE)v30)
      v16 = sub_1C47A8C74((unsigned __int8 *)&v30);
    else
      v16 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
    v18 = a3 - v15;
    if ((_DWORD)v17 == 1)
    {
      v29 = v16;
      v16 = v29;
    }
    if (v16 > v18)
    {
      v30 = *(_OWORD *)(v14 + 80);
      if ((_BYTE)v30)
        v19 = sub_1C47A8C74((unsigned __int8 *)&v30);
      else
        v19 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v30);
      if ((_DWORD)v20 == 1)
      {
        v28 = v19;
        v19 = v28;
      }
      if (v19 == a3 && (a4 & 1) != 0)
        goto LABEL_26;
      goto LABEL_30;
    }
LABEL_20:
    LOBYTE(v21) = 1;
    v22 = 1;
    return v21 | (v22 << 8);
  }
LABEL_30:
  sub_1C6368768(a5, a1, a2, 0, (uint64_t)&v30);
  v24 = DWORD2(v30);
  v25 = (__int128 *)v30;
  if (DWORD2(v30) < 0x41)
    v25 = &v30;
  v26 = ~*(_QWORD *)v25;
  if (v26 >> (a3 - 1))
  {
    v21 = (v26 >> a3 == 0) & a4;
    if (v21)
      v22 = 2;
    else
      v22 = 0;
  }
  else
  {
    v22 = 3;
    LOBYTE(v21) = 1;
  }
  if (v32 >= 0x41 && v31)
  {
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    v24 = DWORD2(v30);
  }
  if (v24 >= 0x41 && (_QWORD)v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  return v21 | (v22 << 8);
}

uint64_t sub_1C49270E0(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int ExtendedSizeInBits;
  const char *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  _BOOL4 v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v107;
  _QWORD **v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  uint64_t result;
  uint64_t v115;
  _QWORD *v116;
  int v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  const void **v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  llvm *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  llvm *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v167;
  uint64_t v168;
  int v169;
  BOOL v170;
  uint64_t v171;
  const void **v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  llvm *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  llvm *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  const void **v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  llvm *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  int v213;
  uint64_t v214;
  const void **v215;
  unsigned int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  llvm *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  __int16 v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  llvm *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  uint64_t *v247;
  int v248;
  uint64_t v250;
  unsigned int v251;
  uint64_t v253;
  const llvm::APInt *v255;
  void *v256;
  unsigned int v257;
  void *__src[2];
  uint64_t **v259;
  unsigned int v260;

  v8 = a1;
  v10 = *(unsigned __int8 *)(a1 + 32);
  v9 = (unsigned __int8 *)(a1 + 32);
  if (v10)
    ExtendedSizeInBits = sub_1C47A8C74(v9);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  v13 = ExtendedSizeInBits;
  if ((_DWORD)v12 == 1)
  v14 = (unsigned __int8 *)(v8 + 48);
  if (*(_BYTE *)(v8 + 48))
    v15 = sub_1C47A8C74(v14);
  else
    v15 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v14);
  v251 = v15;
  if ((_DWORD)v16 == 1)
  v250 = *(_QWORD *)(v8 + 24);
  if (a6)
    v17 = -1;
  else
    v17 = 1;
  v18 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
  v255 = (const llvm::APInt *)(v8 + 8);
  v19 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 16), v17, (const llvm::APInt *)(v8 + 8), *(llvm **)v18, *(_QWORD *)(v18 + 8), 0, 0);
  v22 = *a4;
  v23 = *(unsigned __int16 *)(*a4 + 24);
  v24 = v23 == 35 || v23 == 11;
  v253 = v8;
  if (v24)
  {
    v25 = (uint64_t)v19;
    v26 = v20;
    v27 = *(uint64_t **)a3;
    do
    {
LABEL_20:
      v28 = *((unsigned __int16 *)v27 + 12);
      if (v28 == 56)
      {
        v29 = v27[4];
        v30 = *(_QWORD *)(v29 + 40);
        v31 = *(unsigned __int16 *)(v30 + 24);
        if (v31 == 35 || v31 == 11)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
          v34 = *(_QWORD *)(v33 + 832);
          if (v34)
            LOWORD(v34) = *(_WORD *)(v34 + 8);
          v35 = v27[5] + 16 * a3[2];
          v36 = *(llvm **)v35;
          v37 = *(_QWORD *)(v35 + 8);
          v39 = *a4;
          v38 = a4[1];
          v40 = sub_1C5D56C70(v33, 58, v255, *(llvm **)v35, v37, v30, *(_QWORD *)(v29 + 48), v21, v25, v26, v34);
          v43 = *(_QWORD *)(v33 + 832);
          if (v43)
            LOWORD(v43) = *(_WORD *)(v43 + 8);
          v44 = sub_1C5D56C70(v33, 56, v255, v36, v37, v39, v38, v42, (uint64_t)v40, v41, v43);
          v8 = v253;
          *a4 = (uint64_t)v44;
          *((_DWORD *)a4 + 2) = v45;
          v46 = *(uint64_t **)(*(_QWORD *)a3 + 32);
          v47 = *((_DWORD *)v46 + 2);
          v48 = *v46;
          *(_QWORD *)a3 = v48;
          a3[2] = v47;
          v27 = (uint64_t *)v48;
          v28 = *(unsigned __int16 *)(v48 + 24);
          v49 = 1;
        }
        else
        {
          v49 = 0;
          v28 = 56;
        }
      }
      else
      {
        v49 = 0;
      }
      v50 = 0;
      v51 = 1;
      do
      {
        v52 = v51;
        if (v28 == 56)
        {
          v53 = *(_QWORD *)(v27[4] + 40 * v50);
          if (*(_WORD *)(v53 + 24) == 56)
          {
            v54 = *(_QWORD *)(v53 + 32);
            v55 = *(_QWORD *)(v54 + 40);
            v56 = *(unsigned __int16 *)(v55 + 24);
            if (v56 == 35 || v56 == 11)
            {
              v58 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
              v59 = *(_QWORD *)(v58 + 832);
              if (v59)
                LOWORD(v59) = *(_WORD *)(v59 + 8);
              v60 = v27[5] + 16 * a3[2];
              v61 = *(llvm **)v60;
              v62 = *(_QWORD *)(v60 + 8);
              v63 = *a4;
              v64 = a4[1];
              v65 = sub_1C5D56C70(v58, 58, v255, *(llvm **)v60, v62, v55, *(_QWORD *)(v54 + 48), v21, v25, v26, v59);
              v68 = *(_QWORD *)(v58 + 832);
              if (v68)
                LOWORD(v68) = *(_WORD *)(v68 + 8);
              v69 = sub_1C5D56C70(v58, 56, v255, v61, v62, v63, v64, v67, (uint64_t)v65, v66, v68);
              v8 = v253;
              *a4 = (uint64_t)v69;
              *((_DWORD *)a4 + 2) = v71;
              v72 = *(_QWORD *)(*(_QWORD *)(v253 + 96) + 16);
              v73 = *(_QWORD *)(*(_QWORD *)a3 + 32);
              v74 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
              v75 = *(llvm **)v74;
              v76 = *(_QWORD *)(v74 + 8);
              v77 = (uint64_t *)(v73 + 40 * (v50 ^ 1));
              v78 = *v77;
              v79 = v77[1];
              v80 = *(uint64_t **)(*(_QWORD *)(v73 + 40 * v50) + 32);
              v81 = *v80;
              v82 = v80[1];
              v83 = *(_QWORD *)(v72 + 832);
              if (v83)
                LOWORD(v83) = *(_WORD *)(v83 + 8);
              v27 = sub_1C5D56C70(v72, 56, v255, v75, v76, v78, v79, v70, v81, v82, v83);
              *(_QWORD *)a3 = v27;
              a3[2] = v84;
              goto LABEL_20;
            }
          }
        }
        v51 = 0;
        v50 = 1;
      }
      while ((v52 & 1) != 0);
    }
    while ((v49 & 1) != 0);
    v22 = *a4;
  }
  v86 = v250;
  v85 = v251;
  v87 = a5;
  if (a5)
  {
    v118 = a4[1];
    v119 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 16), 0, v255, (llvm *)5, 0, 0, 0);
    v121 = v120;
    v260 = 32;
    v259 = 0;
    if (*(_WORD *)(*a4 + 24) == 175)
    {
      v122 = *(_QWORD *)(*a4 + 32);
      v22 = *(_QWORD *)v122;
      v118 = v118 & 0xFFFFFFFF00000000 | *(unsigned int *)(v122 + 8);
      v123 = *(_QWORD **)(v122 + 40);
      v124 = v123[10];
      v125 = (const void **)(v124 + 24);
      v126 = *(_DWORD *)(v124 + 32);
      v127 = a5;
      if (v126 > 0x40)
      {
        if (&v259 != (uint64_t ***)v125)
        {
          llvm::APInt::reallocate((uint64_t)&v259, v126);
          if (v260 <= 0x40)
            v259 = (uint64_t **)*v125;
          else
            memcpy(v259, *v125, (((unint64_t)v260 + 63) >> 3) & 0x3FFFFFF8);
          v127 = a5;
        }
        v122 = *(_QWORD *)(*a4 + 32);
        v123 = *(_QWORD **)(v122 + 40);
      }
      else
      {
        v259 = (uint64_t **)*v125;
        v260 = v126;
      }
      v121 = v121 & 0xFFFFFFFF00000000 | *(unsigned int *)(v122 + 48);
    }
    else
    {
      v123 = v119;
      v127 = a5;
    }
    if (v127 == 2)
    {
      if (v13 <= v251)
        goto LABEL_204;
      v131 = (uint64_t)v123;
      if (!sub_1C483073C(v8, v22, v118, 0, 0))
        goto LABEL_204;
      if (sub_1C4926D1C(v8, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), v251))
      {
        v133 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
        v134 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
        v135 = *(llvm **)v134;
        v136 = *(_QWORD *)(v134 + 8);
        v137 = *(uint64_t **)(v22 + 32);
        v138 = *v137;
        v139 = v137[1];
        v140 = *(_QWORD *)(v133 + 832);
        if (v140)
          LOWORD(v140) = *(_WORD *)(v140 + 8);
        v142 = sub_1C5D56C70(v133, 175, v255, v135, v136, v138, v139, v132, v131, v121, v140);
        v144 = v143;
        v145 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
        v146 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
        v147 = *(llvm **)v146;
        v148 = *(_QWORD *)(v146 + 8);
        v149 = *(_QWORD *)(v22 + 32);
        v150 = *(_QWORD *)(v149 + 40);
        v151 = *(_QWORD *)(v149 + 48);
      }
      else
      {
        if (!sub_1C4926D1C(v8, *(_QWORD *)(*(_QWORD *)(v22 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 48), v251))goto LABEL_204;
        v175 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
        v176 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
        v177 = *(llvm **)v176;
        v178 = *(_QWORD *)(v176 + 8);
        v179 = *(_QWORD *)(v22 + 32);
        v180 = *(_QWORD *)(v179 + 40);
        v181 = *(_QWORD *)(v179 + 48);
        v182 = *(_QWORD *)(v175 + 832);
        if (v182)
          LOWORD(v182) = *(_WORD *)(v182 + 8);
        v142 = sub_1C5D56C70(v175, 175, v255, v177, v178, v180, v181, v174, v131, v121, v182);
        v144 = v183;
        v145 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
        v184 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
        v147 = *(llvm **)v184;
        v148 = *(_QWORD *)(v184 + 8);
        v185 = *(uint64_t **)(v22 + 32);
        v150 = *v185;
        v151 = v185[1];
      }
      v186 = *(_QWORD *)(v145 + 832);
      if (v186)
        LOWORD(v186) = *(_WORD *)(v186 + 8);
      v187 = sub_1C5D56C70(v145, 175, v255, v147, v148, v150, v151, v141, v131, v121, v186);
      v190 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
      v191 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
      v192 = *(llvm **)v191;
      v193 = *(_QWORD *)(v191 + 8);
      v194 = *(_QWORD *)(v190 + 832);
      if (v194)
        LOWORD(v194) = *(_WORD *)(v194 + 8);
      *(_QWORD *)a3 = sub_1C5D56C70(v190, 56, v255, v192, v193, *(_QWORD *)a3, *((_QWORD *)a3 + 1), v189, (uint64_t)v187, v188, v194);
      a3[2] = v195;
      *a4 = (uint64_t)v142;
      *((_DWORD *)a4 + 2) = v144;
LABEL_203:
      v86 = v250;
      v85 = v251;
LABEL_204:
      if (v260 >= 0x41 && v259)
        MEMORY[0x1CAA32F9C](v259, 0x1000C8000313F17);
      v22 = *a4;
      v87 = a5;
      goto LABEL_50;
    }
    if (v127 != 1)
      goto LABEL_204;
    v128 = (uint64_t)v123;
    *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
    if (LOBYTE(__src[0]))
      v129 = sub_1C47A8C74((unsigned __int8 *)__src);
    else
      v129 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
    v156 = v129;
    if ((_DWORD)v130 == 1)
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    if (sub_1C483073C(v8, v22, v118, 0, 0))
    {
      v158 = *(_QWORD *)(v22 + 32);
      v159 = *(_QWORD *)(v158 + 40);
      v160 = *(unsigned __int16 *)(v159 + 24);
      if (v160 == 35 || v160 == 11)
      {
        v196 = *(_QWORD *)(v159 + 80);
        v197 = (const void **)(v196 + 24);
        v198 = v128;
        if (LODWORD(__src[1]) > 0x40 || (v199 = *(_DWORD *)(v196 + 32), v199 > 0x40))
        {
          if (__src != (void **)v197)
          {
            llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v196 + 32));
            if (LODWORD(__src[1]) <= 0x40)
              __src[0] = (void *)*v197;
            else
              memcpy(__src[0], *v197, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
            v8 = v253;
            v198 = v128;
          }
          v158 = *(_QWORD *)(v22 + 32);
        }
        else
        {
          __src[0] = (void *)*v197;
          LODWORD(__src[1]) = v199;
        }
        v200 = *(uint64_t **)v158;
        v201 = v118 & 0xFFFFFFFF00000000 | *(unsigned int *)(v158 + 8);
        goto LABEL_190;
      }
    }
    if (v13 <= v251)
      goto LABEL_200;
    v162 = *(unsigned __int16 *)(v22 + 24);
    if (v162 == 199)
    {
      if (sub_1C483073C(v8, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), 1, 0))
      {
        v163 = **(_QWORD **)(v22 + 32);
        v164 = *(_QWORD *)(*(_QWORD *)(v163 + 32) + 40);
        v165 = *(unsigned __int16 *)(v164 + 24);
        if (v165 == 35 || v165 == 11)
        {
          v214 = *(_QWORD *)(v164 + 80);
          v215 = (const void **)(v214 + 24);
          if (LODWORD(__src[1]) > 0x40 || (v216 = *(_DWORD *)(v214 + 32), v216 > 0x40))
          {
            if (__src != (void **)v215)
            {
              llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v214 + 32));
              if (LODWORD(__src[1]) <= 0x40)
                __src[0] = (void *)*v215;
              else
                memcpy(__src[0], *v215, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
              v8 = v253;
            }
          }
          else
          {
            __src[0] = (void *)*v215;
            LODWORD(__src[1]) = v216;
          }
          llvm::APInt::zext((llvm::APInt *)__src, v156, (uint64_t)&v256);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          v217 = v118 & 0xFFFFFFFF00000000;
          __src[0] = v256;
          LODWORD(__src[1]) = v257;
          v218 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
          v219 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
          v220 = *(llvm **)v219;
          v221 = *(_QWORD *)(v219 + 8);
          v222 = *(uint64_t **)(v163 + 32);
          v223 = *v222;
          v224 = v222[1];
          v225 = *(_QWORD *)(v218 + 832);
          if (v225)
            v226 = *(_WORD *)(v225 + 8);
          else
            v226 = 0;
          v230 = 199;
LABEL_189:
          v200 = sub_1C5D52060(v218, v230, v255, v220, v221, v223, v224, v226);
          v201 = v231 | v217;
          v198 = v128;
LABEL_190:
          v232 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
          v233 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
          v234 = *(llvm **)v233;
          v235 = *(_QWORD *)(v233 + 8);
          v236 = *(_QWORD *)(v232 + 832);
          if (v236)
            LOWORD(v236) = *(_WORD *)(v236 + 8);
          v238 = sub_1C5D56C70(v232, 175, v255, v234, v235, (uint64_t)v200, v201, v157, v198, v121, v236);
          v240 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
          v242 = *(_QWORD *)(v240 + 832);
          if (v242)
            LOWORD(v242) = *(_WORD *)(v242 + 8);
          v241 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
          *(_QWORD *)a3 = sub_1C5D56C70(v240, 56, v255, *(llvm **)v241, *(_QWORD *)(v241 + 8), (uint64_t)v238, v237, v239, *(_QWORD *)a3, *((_QWORD *)a3 + 1), v242);
          a3[2] = v243;
          v244 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
          v245 = LODWORD(__src[1]);
          v257 = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v256 = (void *)operator new[]();
            v245 = v257;
            memcpy(v256, __src[0], (((unint64_t)v257 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v256 = __src[0];
          }
          v246 = sub_1C47EE5B8(&v259, v245);
          sub_1C4888094((uint64_t)&v256, v246);
          v247 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
          *a4 = sub_1C63666FC(v244, (llvm::LLVMContext *)&v256, v255, *v247, v247[1], 0, 0);
          *((_DWORD *)a4 + 2) = v248;
          if (v257 >= 0x41 && v256)
            MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
          goto LABEL_200;
        }
      }
      v162 = *(unsigned __int16 *)(v22 + 24);
    }
    if (v162 != 198
      || !sub_1C483073C(v8, **(_QWORD **)(v22 + 32), *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8), 0, 1)
      || ((v167 = **(_QWORD **)(v22 + 32),
           v168 = *(_QWORD *)(*(_QWORD *)(v167 + 32) + 40),
           v169 = *(unsigned __int16 *)(v168 + 24),
           v169 != 35)
        ? (v170 = v169 == 11)
        : (v170 = 1),
          !v170))
    {
LABEL_200:
      if (LODWORD(__src[1]) >= 0x41 && __src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
      goto LABEL_203;
    }
    v171 = *(_QWORD *)(v168 + 80);
    v172 = (const void **)(v171 + 24);
    if (LODWORD(__src[1]) > 0x40 || (v173 = *(_DWORD *)(v171 + 32), v173 > 0x40))
    {
      if (__src != (void **)v172)
      {
        llvm::APInt::reallocate((uint64_t)__src, *(_DWORD *)(v171 + 32));
        if (LODWORD(__src[1]) <= 0x40)
          __src[0] = (void *)*v172;
        else
          memcpy(__src[0], *v172, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8);
        v8 = v253;
      }
    }
    else
    {
      __src[0] = (void *)*v172;
      LODWORD(__src[1]) = v173;
    }
    llvm::APInt::sext((llvm::APInt *)__src, v156, (llvm::APInt *)&v256);
    if (LODWORD(__src[1]) >= 0x41 && __src[0])
      MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    v217 = v118 & 0xFFFFFFFF00000000;
    __src[0] = v256;
    LODWORD(__src[1]) = v257;
    v218 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
    v227 = *(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2];
    v220 = *(llvm **)v227;
    v221 = *(_QWORD *)(v227 + 8);
    v228 = *(uint64_t **)(v167 + 32);
    v223 = *v228;
    v224 = v228[1];
    v229 = *(_QWORD *)(v218 + 832);
    if (v229)
      v226 = *(_WORD *)(v229 + 8);
    else
      v226 = 0;
    v230 = 198;
    goto LABEL_189;
  }
LABEL_50:
  v88 = (1 << v86);
  v89 = *(unsigned __int16 *)(v22 + 24);
  if (v89 <= 0x39)
  {
    if (v89 == 11 || v89 == 35)
    {
      v90 = *(_QWORD *)(v22 + 80);
      v91 = *(_DWORD *)(v90 + 32);
      if (v91 > 0x40)
        v92 = **(_QWORD **)(v90 + 24);
      else
        v92 = (uint64_t)(*(_QWORD *)(v90 + 24) << -(char)v91) >> -(char)v91;
      if ((v92 & (v88 - 1)) != 0
        || ((v100 = v92 / (1 << *(_QWORD *)(v8 + 24))) != 0
          ? (v101 = (unint64_t)(v100 + 0x80000000) >> 32 == 0)
          : (v101 = 0),
            !v101))
      {
        v102 = 0;
        goto LABEL_88;
      }
      *a4 = (uint64_t)sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 16), v100, v255, (llvm *)5, 0, 0, 0);
      *((_DWORD *)a4 + 2) = v155;
LABEL_82:
      v102 = 1;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v89 != 58)
  {
    if (v89 == 175)
    {
      v93 = *(_QWORD *)(v22 + 32);
      v94 = *(_QWORD *)(v93 + 40);
      v95 = *(unsigned __int16 *)(v94 + 24);
      if (v95 == 35 || v95 == 11)
      {
        v97 = *(_QWORD *)(v94 + 80);
        v98 = (_QWORD *)(v97 + 24);
        if (*(_DWORD *)(v97 + 32) >= 0x41u)
          v98 = (_QWORD *)*v98;
        if (*(_QWORD *)(v8 + 24) == *v98)
        {
          v99 = *(_QWORD *)v93;
          *((_DWORD *)a4 + 2) = *(_DWORD *)(v93 + 8);
          *a4 = v99;
          goto LABEL_82;
        }
      }
    }
LABEL_87:
    v102 = v86 == 0;
    goto LABEL_88;
  }
  v103 = *(uint64_t **)(v22 + 32);
  v104 = v103[5];
  v105 = *(unsigned __int16 *)(v104 + 24);
  if (v105 != 35 && v105 != 11)
    goto LABEL_87;
  v107 = *(_QWORD *)(v104 + 80);
  v108 = (_QWORD **)(v107 + 24);
  v109 = *(_DWORD *)(v107 + 32);
  v110 = v108;
  if (v109 >= 0x41)
    v110 = *v108;
  if (*v110 == v88)
  {
    v111 = *v103;
    *((_DWORD *)a4 + 2) = *((_DWORD *)v103 + 2);
    *a4 = v111;
    goto LABEL_82;
  }
  if (v87 != 2)
    goto LABEL_87;
  v112 = v108;
  if (v109 >= 0x41)
    v112 = *v108;
  if ((*v112 & (v88 - 1)) != 0)
    goto LABEL_87;
  v152 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if (!v152)
    goto LABEL_87;
  v153 = v86;
  v154 = 1;
  do
  {
    if (*(_DWORD *)(v152 + 8) == a2[2])
    {
      if (!v154)
        goto LABEL_87;
      --v154;
    }
    v152 = *(_QWORD *)(v152 + 32);
  }
  while (v152);
  if (v154)
    goto LABEL_87;
  if (v109 >= 0x41)
    v108 = (_QWORD **)*v108;
  v202 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 16);
  v203 = *(_QWORD *)(v22 + 40) + 16 * *((unsigned int *)a4 + 2);
  v204 = *(llvm **)v203;
  v205 = *(_QWORD *)(v203 + 8);
  v206 = *v103;
  v207 = v103[1];
  v208 = sub_1C6366AB4(v202, (unint64_t)*v108 >> v153, v255, *(llvm **)v203, v205, 0, 0);
  v211 = *(_QWORD *)(v202 + 832);
  if (v211)
    LOWORD(v211) = *(_WORD *)(v211 + 8);
  v212 = sub_1C5D56C70(v202, 58, v255, v204, v205, v206, v207, v210, (uint64_t)v208, v209, v211);
  v8 = v253;
  *a4 = (uint64_t)v212;
  *((_DWORD *)a4 + 2) = v213;
  v102 = 1;
  v85 = v251;
LABEL_88:
  if (v13 <= v85 || (v113 = *(unsigned __int16 *)(*a4 + 24), v113 == 11) || v113 == 35)
  {
    if (v102)
      return 1;
  }
  else if ((sub_1C4926D1C(v8, *a4, a4[1], v85) & v102 & 1) != 0)
  {
    return 1;
  }
  v115 = *(_QWORD *)a2;
  a3[2] = a2[2];
  *(_QWORD *)a3 = v115;
  v116 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 16), 0, v255, (llvm *)5, 0, 0, 0);
  result = 0;
  *a4 = (uint64_t)v116;
  *((_DWORD *)a4 + 2) = v117;
  return result;
}

uint64_t sub_1C4928010(uint64_t a1, _DWORD *a2, __int128 *a3, __int128 *a4, int a5, int a6)
{
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v10 = *a3;
  v17 = *a4;
  v18 = v10;
  v11 = *a4;
  v15 = *a3;
  v16 = v11;
  v12 = &v18;
  v13 = &v17;
  if ((sub_1C49270E0(a1, a2, (unsigned int *)&v18, (uint64_t *)&v17, a6, a5 ^ 1u) & 1) != 0
    || !*(_BYTE *)(a1 + 105)
    && a5
    && (v12 = &v16, v13 = &v15, (sub_1C49270E0(a1, a2, (unsigned int *)&v16, (uint64_t *)&v15, a6, 0) & 1) != 0))
  {
    result = 1;
  }
  else
  {
    result = 0;
    v13 = &v17;
    v12 = &v18;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)v12 + 2);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v13;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)v13 + 2);
  return result;
}

uint64_t sub_1C49280F0(uint64_t a1, uint64_t *a2, int a3)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v6 = sub_1C483073C(a1, *a2, a2[1], 0, 0);
  v7 = *a2;
  if (v6)
  {
    v8 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)&v33 = *(_QWORD *)v8;
    DWORD2(v33) = *(_DWORD *)(v8 + 8);
    *(_QWORD *)&v32 = *(_QWORD *)(v8 + 40);
    DWORD2(v32) = *(_DWORD *)(v8 + 48);
    v9 = a1;
    v10 = a2;
    v11 = a3;
    return sub_1C4928010(v9, v10, &v33, &v32, 1, v11);
  }
  if (*(_WORD *)(v7 + 24) != 57)
  {
    *(_QWORD *)&v33 = *a2;
    DWORD2(v33) = *((_DWORD *)a2 + 2);
    *(_QWORD *)&v32 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), *(llvm **)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 0);
    DWORD2(v32) = v21;
    v9 = a1;
    v10 = a2;
    v11 = 0;
    return sub_1C4928010(v9, v10, &v33, &v32, 1, v11);
  }
  v13 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)&v33 = *(_QWORD *)v13;
  DWORD2(v33) = *(_DWORD *)(v13 + 8);
  *(_QWORD *)&v32 = *(_QWORD *)(v13 + 40);
  DWORD2(v32) = *(_DWORD *)(v13 + 48);
  v12 = sub_1C4928010(a1, a2, &v33, &v32, 0, 0);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(unsigned __int16 *)(v14 + 24);
  if (v15 != 35 && v15 != 11)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v25 = *(_QWORD *)(v14 + 40) + 16 * *(unsigned int *)(a1 + 88);
    v26 = *(llvm **)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = sub_1C6366AB4(v24, 0, (const llvm::APInt *)(a1 + 8), *(llvm **)v25, v27, 0, 0);
    v31 = *(_QWORD *)(v24 + 832);
    if (v31)
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    v22 = sub_1C5D56C70(v24, 57, (const llvm::APInt *)(a1 + 8), v26, v27, (uint64_t)v28, v29, v30, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v31);
    goto LABEL_19;
  }
  v17 = *(_QWORD *)(v14 + 80);
  v18 = (_QWORD *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (_QWORD *)*v18;
  v19 = (_QWORD *)*v18;
  if ((_DWORD)v19)
  {
    v22 = sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), -(int)v19, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
LABEL_19:
    *(_QWORD *)(a1 + 80) = v22;
    *(_DWORD *)(a1 + 88) = v23;
  }
  return v12;
}

uint64_t sub_1C4928314(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, _BYTE *a12)
{
  unsigned __int8 v13;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int ExtendedSizeInBits;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  char v58;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char *v67;
  unsigned int v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  char *v72;
  BOOL v73;
  int v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  BOOL v82;
  _BOOL4 v83;
  int v84;
  char *v86;
  size_t v87;
  unsigned int v88;
  unint64_t v89;
  void *v90;
  size_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  _BOOL4 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BOOL4 v108;
  int v109;
  int v111;
  uint64_t v112;
  llvm *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  llvm *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  int v145;
  char *v146;
  char *v147;
  int v148;
  char *v149;
  char *__s1;
  unint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  void *v158;
  unsigned int v159;
  void *__s2;
  unsigned int v161;
  void *v162;
  unsigned int v163;
  void *__src;
  unsigned int v165;
  unint64_t v166;
  unsigned int v167;
  char *v168;
  unsigned int v169;
  char *v170;
  unsigned int v171;
  unint64_t v172;
  unsigned int v173;
  char *v174;
  unsigned int v175;
  __int128 v176;
  unsigned __int8 *v177;
  int v178;
  _QWORD v179[3];

  v13 = a5;
  v179[0] = a9;
  v179[1] = a10;
  *(_QWORD *)(a1 + 48) = a7;
  v17 = (unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 56) = a8;
  v18 = *a2;
  v19 = *(unsigned __int8 **)(*a2 + 64);
  v172 = (unint64_t)v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v172, v19, 2);
  v20 = *(_DWORD *)(v18 + 60);
  v173 = v20;
  v21 = (unsigned __int8 **)(a1 + 8);
  if (&v172 == (unint64_t *)(a1 + 8))
  {
    v143 = (unsigned __int8 *)v172;
    *(_DWORD *)(a1 + 16) = v20;
    if (v143)
      llvm::MetadataTracking::untrack((uint64_t)&v172, v143);
  }
  else
  {
    if (*v21)
      llvm::MetadataTracking::untrack(a1 + 8, *v21);
    v22 = (unsigned __int8 *)v172;
    *v21 = (unsigned __int8 *)v172;
    if (v22)
      llvm::MetadataTracking::retrack((uint64_t)&v172, v22, a1 + 8);
    *(_DWORD *)(a1 + 16) = v173;
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  v23 = *a2;
  v24 = *(unsigned __int8 **)(*a2 + 64);
  v177 = v24;
  if (v24)
    llvm::MetadataTracking::track((uint64_t)&v177, v24, 2);
  v178 = *(_DWORD *)(v23 + 60);
  if ((*(_DWORD *)(a1 + 108) & 0xFFFEFFFF) != 2)
  {
    v25 = *a2;
    if (*(_WORD *)(*a2 + 24) == 201)
    {
      v26 = *(unsigned __int8 **)(v25 + 40);
      if (*v26 == v13 && (*v26 || *((_QWORD *)v26 + 1) == a6))
      {
        v27 = *(_QWORD *)(v25 + 32);
        v28 = *(_QWORD *)v27;
        *((_DWORD *)a2 + 2) = *(_DWORD *)(v27 + 8);
        *a2 = v28;
      }
    }
    v29 = sub_1C49280F0(a1, a2, a11);
    goto LABEL_18;
  }
  v176 = *(_OWORD *)a2;
  v60 = v176;
  if (*(_WORD *)(v176 + 24) == 201)
  {
    v61 = *(unsigned __int8 **)(v176 + 40);
    if (*v61 == v13 && (v13 || *((_QWORD *)v61 + 1) == a6))
    {
      v62 = *(_QWORD *)(v176 + 32);
      v60 = *(_QWORD *)v62;
      *(_QWORD *)&v176 = *(_QWORD *)v62;
      DWORD2(v176) = *(_DWORD *)(v62 + 8);
    }
  }
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  v151 = *((_QWORD *)&v176 + 1);
  v152 = v60;
  v64 = sub_1C6366544(v63, v60, *((uint64_t *)&v176 + 1), (uint64_t)&v177, 4, 0);
  sub_1C6368768(v63, v64, v65, 0, (uint64_t)&v172);
  v66 = v175;
  if (v175 > 0x40)
  {
    v67 = (char *)operator new[]();
    memcpy(v67, v174, ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v67 = v174;
  }
  v68 = v173;
  v169 = v173;
  if (v173 > 0x40)
  {
    v71 = (((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8;
    v168 = (char *)operator new[]();
    memcpy(v168, (const void *)v172, v71);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v168);
    v68 = v169;
    v70 = v168;
  }
  else
  {
    if (v173)
      v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
    else
      v69 = 0;
    v70 = (char *)(v69 & ~v172);
    v168 = v70;
  }
  v171 = v68;
  v170 = v70;
  v169 = 0;
  llvm::APInt::operator+=((uint64_t)&v170, 1uLL);
  v155 = v171;
  v72 = v170;
  v171 = 0;
  if (v66 > 0x40)
    v73 = memcmp(v67, v170, ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v73 = v67 == v170;
  v74 = v73;
  v154 = v74;
  v163 = v173;
  if (v173 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v162, 0, 0);
  else
    v162 = 0;
  if (v66 > 0x40)
  {
    v75 = v162;
    v76 = ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8;
    while (v76)
    {
      v77 = *(_QWORD *)&v67[v76 - 8];
      v78 = *(_QWORD *)((char *)v162 + v76 - 8);
      v76 -= 8;
      if (v77 != v78)
      {
        if (v77 > v78)
          break;
        v153 = 0;
        goto LABEL_105;
      }
    }
  }
  else
  {
    v75 = v162;
    if (v67 < v162)
    {
      v153 = 0;
      goto LABEL_105;
    }
  }
  v167 = v173;
  v149 = v67;
  if (v173 > 0x40)
  {
    v81 = v72;
    llvm::APInt::initSlowCase((llvm::APInt *)&v166, 65520, 0);
    if (v155 > 0x40)
    {
      v133 = v166;
      v137 = ((unint64_t)(v155 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v137)
        {
          v84 = 0;
          goto LABEL_198;
        }
        v138 = *(_QWORD *)&v72[v137 - 8];
        v139 = *(_QWORD *)(v166 + v137 - 8);
        v137 -= 8;
      }
      while (v138 == v139);
      if (v138 > v139)
        v84 = 1;
      else
        v84 = -1;
    }
    else
    {
      v133 = v166;
      if ((unint64_t)v72 < v166)
        v84 = -1;
      else
        v84 = (unint64_t)v72 > v166;
    }
LABEL_198:
    if (v167 >= 0x41 && v133)
      MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
  }
  else
  {
    if (v173)
      v79 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v173;
    else
      LOWORD(v79) = 0;
    v80 = (unsigned __int16)v79 & 0xFFF0;
    if (v155 > 0x40)
    {
      v98 = v80 - 8;
      v99 = ((unint64_t)(v155 + 63) >> 3) & 0x3FFFFFF8;
      v81 = v72;
      do
      {
        if (!v99)
        {
          v84 = 0;
          goto LABEL_104;
        }
        v100 = *(_QWORD *)&v72[v99 - 8];
        v101 = *(_QWORD *)(v98 + v99);
        v99 -= 8;
      }
      while (v100 == v101);
      if (v100 > v101)
        v84 = 1;
      else
        v84 = -1;
    }
    else
    {
      v81 = v72;
      v82 = (unint64_t)v72 >= v80;
      v83 = (unint64_t)v72 > v80;
      if (v82)
        v84 = v83;
      else
        v84 = -1;
    }
  }
LABEL_104:
  v153 = v84 < 1;
  v72 = v81;
  v67 = v149;
LABEL_105:
  if (v163 >= 0x41 && v75 != 0)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  if ((*(_BYTE *)(a1 + 110) & 1) == 0 || !sub_1C49280F0(a1, (uint64_t *)&v176, a11))
    goto LABEL_171;
  if ((v154 | !v153) == 1)
  {
    v148 = 0;
    *(_WORD *)a1 = 0;
    *(_BYTE *)(a1 + 2) = 0;
  }
  else
  {
    v148 = 1;
  }
  sub_1C6368768(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0, (uint64_t)&v162);
  v86 = (char *)v165;
  if (v165 > 0x40)
  {
    v87 = (((unint64_t)v165 + 63) >> 3) & 0x3FFFFFF8;
    __s1 = (char *)operator new[]();
    memcpy(__s1, __src, v87);
  }
  else
  {
    __s1 = (char *)__src;
  }
  v88 = v163;
  v159 = v163;
  if (v163 > 0x40)
  {
    v91 = (((unint64_t)v163 + 63) >> 3) & 0x3FFFFFF8;
    v158 = (void *)operator new[]();
    memcpy(v158, v162, v91);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v158);
    v88 = v159;
    v90 = v158;
  }
  else
  {
    v89 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
    if (!v163)
      v89 = 0;
    v90 = (void *)(v89 & ~(unint64_t)v162);
    v158 = v90;
  }
  v147 = v72;
  v161 = v88;
  __s2 = v90;
  v159 = 0;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v92 = v161;
  v93 = (char *)__s2;
  v161 = 0;
  if (v86 > 0x40)
  {
    v94 = v92;
    v95 = memcmp(__s1, __s2, ((unint64_t)(v86 + 63) >> 3) & 0x3FFFFFF8);
    v92 = v94;
    if (!v95)
    {
LABEL_160:
      v148 = 0;
      *(_WORD *)a1 = 0;
      *(_BYTE *)(a1 + 2) = 0;
      goto LABEL_161;
    }
  }
  else if (__s1 == __s2)
  {
    goto LABEL_160;
  }
  v167 = v163;
  if (v163 > 0x40)
  {
    v134 = v92;
    llvm::APInt::initSlowCase((llvm::APInt *)&v166, 0, 0);
    v92 = v134;
  }
  else
  {
    v166 = 0;
  }
  if (v86 > 0x40)
  {
    v102 = v92;
    v96 = v166;
    v103 = ((unint64_t)(v86 + 63) >> 3) & 0x3FFFFFF8;
    while (v103)
    {
      v104 = *(_QWORD *)&__s1[v103 - 8];
      v105 = *(_QWORD *)(v166 + v103 - 8);
      v103 -= 8;
      if (v104 != v105)
      {
        if (v104 <= v105)
        {
          v97 = 1;
          LODWORD(v92) = v102;
          goto LABEL_154;
        }
        break;
      }
    }
    v92 = v102;
  }
  else
  {
    v96 = v166;
    if ((unint64_t)__s1 < v166)
    {
      v97 = 1;
      goto LABEL_154;
    }
  }
  v157 = v163;
  if (v163 > 0x40)
  {
    v144 = v96;
    v146 = v93;
    v135 = v92;
    llvm::APInt::initSlowCase((llvm::APInt *)&v156, 65520, 0);
    if (v135 > 0x40)
    {
      v136 = v156;
      v140 = ((unint64_t)(v135 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v140)
        {
          v109 = 0;
          goto LABEL_209;
        }
        v141 = *(_QWORD *)&v146[v140 - 8];
        v142 = *(_QWORD *)(v156 + v140 - 8);
        v140 -= 8;
      }
      while (v141 == v142);
      if (v141 > v142)
        v109 = 1;
      else
        v109 = -1;
    }
    else
    {
      v136 = v156;
      if ((unint64_t)v146 < v156)
        v109 = -1;
      else
        v109 = (unint64_t)v146 > v156;
    }
LABEL_209:
    if (v157 >= 0x41 && v136)
      MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
    LODWORD(v92) = v135;
    v93 = v146;
    v96 = v144;
  }
  else
  {
    if (v163)
      v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
    else
      LOWORD(v106) = 0;
    v107 = (unsigned __int16)v106 & 0xFFF0;
    if (v92 > 0x40)
    {
      v128 = v92;
      v129 = v107 - 8;
      v130 = ((unint64_t)(v92 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v130)
        {
          v109 = 0;
          goto LABEL_193;
        }
        v131 = *(_QWORD *)&v93[v130 - 8];
        v132 = *(_QWORD *)(v129 + v130);
        v130 -= 8;
      }
      while (v131 == v132);
      if (v131 > v132)
        v109 = 1;
      else
        v109 = -1;
LABEL_193:
      LODWORD(v92) = v128;
    }
    else
    {
      v82 = (unint64_t)v93 >= v107;
      v108 = (unint64_t)v93 > v107;
      if (v82)
        v109 = v108;
      else
        v109 = -1;
    }
  }
  v97 = v109 > 0;
LABEL_154:
  if (v167 >= 0x41 && v96 != 0)
  {
    v145 = (int)v86;
    v86 = v93;
    v111 = v92;
    MEMORY[0x1CAA32F9C]();
    LODWORD(v92) = v111;
    v93 = v86;
    LODWORD(v86) = v145;
  }
  if (v97)
    goto LABEL_160;
LABEL_161:
  if (v92 >= 0x41 && v93)
    MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
  v72 = v147;
  if (v86 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v165 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v163 >= 0x41 && v162)
    MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
  if (!v148)
  {
LABEL_171:
    if ((v154 | !v153) == 1)
    {
      v112 = *(_QWORD *)(v152 + 40);
      v113 = *(llvm **)v112;
      v114 = *(_QWORD *)(v112 + 8);
      v115 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v116 = sub_1C6366AB4(v115, 16, (const llvm::APInt *)&v177, *(llvm **)v112, v114, 0, 0);
      v119 = *(_QWORD *)(v115 + 832);
      if (v119)
        LOWORD(v119) = *(_WORD *)(v119 + 8);
      *(_QWORD *)(a1 + 64) = sub_1C5D56C70(v115, 56, (const llvm::APInt *)&v177, v113, v114, v152, v151, v118, (uint64_t)v116, v117, v119);
      *(_DWORD *)(a1 + 72) = v120;
      v121 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v122 = -16 >> a3;
      v123 = *(llvm **)(a1 + 48);
      v124 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v125 = *a2;
      *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 2);
      *(_QWORD *)(a1 + 64) = v125;
      v121 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
      v126 = *(_QWORD *)(*a2 + 40);
      v123 = *(llvm **)v126;
      v124 = *(_QWORD *)(v126 + 8);
      v122 = 0;
    }
    v29 = 0;
    *(_QWORD *)(a1 + 80) = sub_1C6366AB4(v121, v122, (const llvm::APInt *)&v177, v123, v124, 0, 0);
    *(_DWORD *)(a1 + 88) = v127;
    goto LABEL_177;
  }
  v29 = 1;
LABEL_177:
  if (v155 >= 0x41 && v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  if (v66 >= 0x41 && v67)
    MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
  if (v175 >= 0x41 && v174)
    MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
  if (v173 >= 0x41 && v172)
    MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
LABEL_18:
  v30 = *(_QWORD *)(a1 + 80);
  v31 = *(unsigned __int16 *)(v30 + 24);
  if (v31 == 35 || v31 == 11)
  {
    v32 = *(_QWORD *)(v30 + 80);
    v33 = *(_DWORD *)(v32 + 32);
    v34 = v33 > 0x40 ? **(_QWORD **)(v32 + 24) : (uint64_t)(*(_QWORD *)(v32 + 24) << -(char)v33) >> -(char)v33;
    if (v34 == (__int16)v34)
      *(_BYTE *)(a1 + 1) = 1;
  }
  v35 = *(_QWORD *)(a1 + 64);
  v36 = *(unsigned __int16 *)(v35 + 24);
  if (v36 == 35 || v36 == 11)
  {
    v37 = *(_QWORD *)(v35 + 80);
    v38 = (_QWORD *)(v37 + 24);
    if (*(_DWORD *)(v37 + 32) >= 0x41u)
      v38 = (_QWORD *)*v38;
    if (!*v38)
      *(_BYTE *)a1 = 1;
  }
  if ((_BYTE)a9)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v179);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v179);
  v41 = ExtendedSizeInBits;
  if ((_DWORD)v40 == 1)
  if (*v17)
    v42 = sub_1C47A8C74(v17);
  else
    v42 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  v44 = v42;
  if ((_DWORD)v43 == 1)
  if (v41 == 16)
  {
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = *(_QWORD *)(a1 + 72);
    v50 = *(_QWORD *)(v45 + 832);
    if (v50)
      v49 = *(_WORD *)(v50 + 8);
    else
      v49 = 0;
    v51 = 4;
  }
  else
  {
    if (v41 == 64)
      goto LABEL_52;
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = *(_QWORD *)(a1 + 72);
    v48 = *(_QWORD *)(v45 + 832);
    if (v48)
      v49 = *(_WORD *)(v48 + 8);
    else
      v49 = 0;
    v51 = 5;
  }
  *(_QWORD *)(a1 + 64) = sub_1C5D52060(v45, 201, (const llvm::APInt *)&v177, (llvm *)v51, 0, v46, v47, v49);
  *(_DWORD *)(a1 + 72) = v52;
LABEL_52:
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  if (v44 == 32)
    v54 = 5;
  else
    v54 = 4;
  v55 = *(_QWORD *)(v53 + 832);
  if (v55)
    v56 = *(_WORD *)(v55 + 8);
  else
    v56 = 0;
  *(_QWORD *)(a1 + 80) = sub_1C5D52060(v53, 201, (const llvm::APInt *)&v177, (llvm *)v54, 0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v56);
  *(_DWORD *)(a1 + 88) = v57;
  if (a12)
    v58 = v29;
  else
    v58 = 1;
  if ((v58 & 1) == 0 && *(_BYTE *)(a1 + 2))
    *a12 = 1;
  if (v177)
    llvm::MetadataTracking::untrack((uint64_t)&v177, v177);
  return v29;
}

uint64_t sub_1C4929048(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t i;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  char v21;
  const char *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  const char *v41;
  int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  void (**v65)();
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  _QWORD v70[8];
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 326);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v67 = v70;
  v68 = 4;
  v69 = 0;
  v65 = (void (**)())off_1E816DB00;
  v66 = v70;
  v70[4] = v8;
  v70[5] = *(_QWORD *)(v8 + 40);
  v70[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 120))(*(_QWORD *)(v8 + 16));
  v70[7] = *(_QWORD *)(*(_QWORD *)v8 + 40) + 272;
  v71 = 6;
  v72 = 1;
  v9 = &v73;
  for (i = 15; i != 95; i += 5)
    LODWORD((&v65)[i]) = -1;
  v11 = **(unsigned __int16 **)(a2 + 16);
  if (v11 > 0x75)
  {
    if (v11 == 118 || v11 == 126 || v11 == 124)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
      if (v12 < 0 && (v13 = v12 & 0x7FFFFFFF, v13 < *(_DWORD *)(v7 + 432)))
        v14 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v13);
      else
        v14 = 0;
      v61 = v14;
      v17 = sub_1C4825F50(&v61);
      if ((_DWORD)v16 == 1)
      if (v17 <= a3)
      {
        if (v11 == 118)
        {
          v21 = 3;
LABEL_58:
          v32 = 1;
          goto LABEL_91;
        }
        if (v11 != 126)
        {
LABEL_70:
          v32 = 1;
          v21 = 1;
          goto LABEL_91;
        }
        v19 = (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
        if ((v19 & 0x80000000) != 0
          && (v19 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v7 + 432))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v19 & 0x7FFFFFFF));
        }
        else
        {
          v20 = 0;
        }
        v61 = v20;
        v23 = sub_1C4825F50(&v61);
        if ((_DWORD)v22 == 1)
        v60 = v23;
        if (v23 > 0x40)
        {
          v25 = &v59;
          llvm::APInt::initSlowCase((llvm::APInt *)&v59, 0, 0);
          v24 = v23 - 1;
          if (v60 >= 0x41)
            v25 = (uint64_t *)(v59 + 8 * (v24 >> 6));
          v23 = v60;
        }
        else
        {
          v59 = 0;
          LOBYTE(v24) = v23 - 1;
          v25 = &v59;
        }
        *v25 |= 1 << v24;
        sub_1C54EB4A0((uint64_t)&v65, v19, (uint64_t)&v61);
        if (v23 > 0x40)
        {
          v28 = 0;
          v26 = v59;
          do
          {
            v29 = *(_QWORD *)(v59 + v28) & ~*(_QWORD *)(v61 + v28);
            v27 = v29 == 0;
            if (v29)
              v30 = 1;
            else
              v30 = ((((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8) - 8 == v28;
            v28 += 8;
          }
          while (!v30);
        }
        else
        {
          v26 = v59;
          v27 = (v59 & ~v61) == 0;
        }
        if (v64 >= 0x41 && v63)
          MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
        if (v62 >= 0x41 && v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        if (v23 >= 0x41 && v26)
          MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        if (v6)
          v31 = v27;
        else
          v31 = 1;
        if ((v31 & 1) == 0)
        {
          v21 = 2;
          goto LABEL_58;
        }
      }
    }
    goto LABEL_82;
  }
  if (v11 == 91)
  {
    v18 = *(_QWORD *)(a2 + 48);
    if (v18 >= 8)
    {
      if ((v18 & 7) != 0)
      {
        if ((*(_QWORD *)(a2 + 48) & 7) != 3
          || (v18 & 0xFFFFFFFFFFFFFFF8) == 0
          || *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) != 1)
        {
          goto LABEL_82;
        }
      }
      else
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v18;
      }
      if ((v18 & 7) != 0)
      {
        v33 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v33 = v18 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v18 & 0xFFFFFFFFFFFFFFF8;
      }
      v36 = *(_QWORD *)(v33 + 24);
      v35 = (unint64_t *)(v33 + 24);
      if ((v36 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v38 = (sub_1C4825F50(v35) + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((_DWORD)v37 == 1)
        if (v38 <= a3)
          goto LABEL_70;
      }
    }
LABEL_82:
    sub_1C54EB4A0((uint64_t)&v65, (const char *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 4), (uint64_t)&v61);
    v47 = v61;
    v48 = v62;
    v49 = v61;
    if (v62 >= 0x41)
      v49 = *(_QWORD *)v61;
    if (((-1 << (a3 - 1)) & ~v49) != 0)
    {
      v50 = v6 != 0;
      v51 = ~v49 >> a3 == 0;
      v32 = v50 && v51;
      if (v50 && v51)
        v21 = 2;
      else
        v21 = 0;
    }
    else
    {
      v21 = 3;
      v32 = 1;
    }
    if (v64 >= 0x41 && v63)
      MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
    if (v48 >= 0x41 && v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
    goto LABEL_91;
  }
  if (v11 != 92)
    goto LABEL_82;
  v15 = *(_QWORD *)(a2 + 48);
  if (v15 < 8)
    goto LABEL_82;
  if ((v15 & 7) != 0)
  {
    if ((*(_QWORD *)(a2 + 48) & 7) != 3
      || (v15 & 0xFFFFFFFFFFFFFFF8) == 0
      || *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) != 1)
    {
      goto LABEL_82;
    }
  }
  else
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v15;
  }
  if ((v15 & 7) != 0)
  {
    v34 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v34 = v15 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v15 & 0xFFFFFFFFFFFFFFF8;
  }
  v40 = *(_QWORD *)(v34 + 24);
  v39 = (unint64_t *)(v34 + 24);
  if ((v40 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v42 = sub_1C4825F50(v39);
    if ((_DWORD)v41 == 1)
    v43 = (v42 + 7) & 0xFFFFFFF8;
  }
  else
  {
    v43 = -8;
  }
  v44 = v6 != 0;
  v45 = v43 >= a3;
  v30 = v43 == a3;
  v46 = v43 >= a3;
  if (!v30)
    v44 = 0;
  v32 = 1;
  if (v45)
    v21 = 2;
  else
    v21 = 1;
  if (v46 != v44)
    goto LABEL_82;
LABEL_91:
  v65 = (void (**)())off_1E816DB00;
  v52 = v72;
  if ((v72 & 1) != 0)
  {
    v53 = 16;
  }
  else
  {
    v53 = v74;
    if (!v74)
      goto LABEL_103;
    v9 = v73;
  }
  v54 = 40 * v53;
  v55 = v9 + 2;
  do
  {
    if (*((_DWORD *)v55 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v55 + 4) >= 0x41u)
      {
        v57 = v55[1];
        if (v57)
          MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
      }
      if (*(_DWORD *)v55 >= 0x41u)
      {
        v56 = *(v55 - 1);
        if (v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      }
    }
    v55 += 5;
    v54 -= 40;
  }
  while (v54);
  v52 = v72;
LABEL_103:
  if ((v52 & 1) == 0)
    MEMORY[0x1CAA32FB4](v73, 8);
  v65 = off_1E7FA1810;
  if (v67 != v66)
    free(v67);
  *(_BYTE *)(a1 + 80) |= (v21 & 3) == 2;
  return v32 & 1;
}

uint64_t sub_1C49296E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  unsigned int v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  const char *v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int64_t v93;
  BOOL v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  const char *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  unsigned int v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  size_t v132;
  void *v133;
  uint64_t v134;
  void (*v135)(void);
  size_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int64_t v154;
  uint64_t *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  int v165;
  int64_t v166;
  uint64_t *v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  const char *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int64_t v177;
  uint64_t *v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  int v191;
  int64_t v192;
  uint64_t *v193;
  unsigned int v194;
  uint64_t v195;
  int v196;
  const char *v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t *v259;
  const char *v260;
  uint64_t *v261;
  void (**v262)(uint64_t *);
  unint64_t *v263;
  void (**v264)(unint64_t *);
  void *v265;
  int v266;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  size_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  void *__dst;
  unsigned int v303;
  uint64_t **v304;
  unsigned int v305;
  uint64_t v306;
  void *v307;
  unsigned int v308;
  char v309;
  unint64_t p_dst;
  void *__src;
  unsigned int v312[2];
  unint64_t *p_p_dst;
  uint64_t v314;
  int v315;
  uint64_t v316;
  void *v317;
  unsigned int v318;
  void **v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  v297 = *(_DWORD *)(a1 + 56);
  v295 = sub_1C4825F50((unint64_t *)(a1 + 32));
  v12 = v11;
  v296 = sub_1C4825F50((unint64_t *)(a1 + 40));
  v14 = v13;
  v15 = v12;
  if (v12 == 1)
  v294 = v14;
  if (v14 == 1)
  v298 = a5;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4);
  if (v17 < 0 && (v18 = v17 & 0x7FFFFFFF, v18 < *(_DWORD *)(v16 + 432)))
  {
    v306 = *(_QWORD *)(*(_QWORD *)(v16 + 424) + 8 * v18);
    if ((v306 & 0xFFFFFFFFFFFFFFF9) != 0 && (v306 & 6) == 2)
    {
      v21 = sub_1C4825F50((unint64_t *)&v306);
      if ((_DWORD)v20 == 1)
      v306 = (8 * v21) | 1;
      v16 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    v306 = 0;
  }
  if (a6)
    v22 = -1;
  else
    v22 = 1;
  v300 = a4;
  v23 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(*a4 + 32) + 4), v16);
  if (v24)
  {
    v25 = v23;
    while (1)
    {
      v307 = 0;
      v26 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4);
      v27 = *(_QWORD *)(a1 + 8);
      if ((v26 & 0x80000000) != 0)
        v28 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
      else
        v28 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v26);
      v29 = *v28;
      if (!v29
        || (*(_BYTE *)(v29 + 3) & 1) == 0 && ((v29 = *(_QWORD *)(v29 + 24)) == 0 || (*(_BYTE *)(v29 + 3) & 1) == 0))
      {
LABEL_25:
        LOBYTE(v30) = 0;
        goto LABEL_26;
      }
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
        break;
LABEL_26:
      LODWORD(__dst) = 0;
      LODWORD(v301) = 0;
      v31 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4);
      v32 = *(_QWORD *)(a1 + 8);
      p_dst = (unint64_t)&__dst;
      __src = &v307;
      *(_QWORD *)v312 = &v301;
      if ((v31 & 0x80000000) != 0)
        v33 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
      else
        v33 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v31);
      v34 = *v33;
      if (!v34)
        goto LABEL_30;
      if ((*(_BYTE *)(v34 + 3) & 1) == 0)
      {
        v34 = *(_QWORD *)(v34 + 24);
        if (!v34 || (*(_BYTE *)(v34 + 3) & 1) == 0)
          goto LABEL_30;
      }
      v38 = *(_QWORD *)(v34 + 8);
      if (!v38 || **(_WORD **)(v38 + 16) != 45 || *(_DWORD *)(v38 + 40) != 3)
        goto LABEL_30;
      v290 = v38;
      LODWORD(v316) = *(_DWORD *)(*(_QWORD *)(v38 + 32) + 36);
      v39 = sub_1C492DAE4((uint64_t)&p_dst, v32, (unsigned int *)&v316);
      v40 = *(_QWORD *)(v290 + 32);
      if (v39)
      {
        **(_DWORD **)v312 = *(_DWORD *)(v40 + 68);
LABEL_48:
        v25 += (_QWORD)v307 * v22;
        v41 = *(_QWORD *)(a1 + 16);
        p_dst = v306;
        LODWORD(__src) = 0;
        sub_1C5544694(v41, &p_dst, v25);
        *v300 = v42;
        v43 = *(_QWORD *)(a1 + 16);
        v316 = v306;
        LODWORD(v317) = 0;
        LODWORD(p_dst) = (_DWORD)__dst;
        v312[0] = 0;
        LODWORD(p_p_dst) = v301;
        v315 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 45, &v316, 1, &p_dst, 2, 0);
        *(_QWORD *)a3 = v44;
      }
      else
      {
        **(_DWORD **)v312 = *(_DWORD *)(v40 + 36);
        LODWORD(v304) = *(_DWORD *)(v40 + 68);
        if (sub_1C492DAE4((uint64_t)&p_dst, v32, (unsigned int *)&v304))
          goto LABEL_48;
LABEL_30:
        if ((v30 & 1) == 0)
          goto LABEL_70;
      }
    }
    if (**(_WORD **)(v30 + 16) != 45 || *(_DWORD *)(v30 + 40) != 3)
      goto LABEL_25;
    v35 = *(_QWORD *)(v30 + 32);
    v36 = *(unsigned int *)(v35 + 36);
    if ((v36 & 0x80000000) != 0)
      v37 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
    else
      v37 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v36);
    v45 = *v37;
    if (v45)
    {
      if ((*(_BYTE *)(v45 + 3) & 1) != 0 || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
      {
        v291 = *(_QWORD *)(v45 + 8);
        if (v291)
        {
          v46 = sub_1C554C050(*(_DWORD *)(v35 + 68), v27);
          if (v50)
          {
            v307 = (void *)v46;
LABEL_69:
            v52 = *(_QWORD *)(a1 + 16);
            v25 += v46 * v22;
            p_dst = v306;
            LODWORD(__src) = 0;
            sub_1C5544694(v52, &p_dst, v25);
            *v300 = v53;
            *(_QWORD *)a3 = v291;
            LOBYTE(v30) = 1;
            goto LABEL_26;
          }
          LODWORD(v36) = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 36);
        }
      }
    }
    v46 = sub_1C554C050(v36, v27);
    if (!v47)
      goto LABEL_25;
    v307 = (void *)v46;
    v48 = *(unsigned int *)(*(_QWORD *)(v30 + 32) + 68);
    v49 = (uint64_t *)((v48 & 0x80000000) != 0
                    ? *(_QWORD *)(v27 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v27 + 272) + 8 * v48);
    v51 = *v49;
    if (!v51)
      goto LABEL_25;
    if ((*(_BYTE *)(v51 + 3) & 1) == 0)
    {
      v51 = *(_QWORD *)(v51 + 24);
      if (!v51 || (*(_BYTE *)(v51 + 3) & 1) == 0)
        goto LABEL_25;
    }
    v291 = *(_QWORD *)(v51 + 8);
    if (!v291)
      goto LABEL_25;
    goto LABEL_69;
  }
LABEL_70:
  v54 = v300;
  v55 = *v300;
  v56 = a5;
  if (a5)
  {
    v305 = 32;
    v304 = 0;
    v57 = *(unsigned int *)(*(_QWORD *)(v55 + 32) + 4);
    v58 = *(_QWORD *)(a1 + 8);
    if ((v57 & 0x80000000) != 0)
      v59 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
    else
      v59 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v57);
    v60 = *v59;
    if (!v60)
    {
LABEL_75:
      if (v56 == 1)
      {
        v303 = 1;
        __dst = 0;
        sub_1C492B5CC((uint64_t)&v316, a1, v55, 0);
        if ((_BYTE)v319)
        {
          v61 = v316;
          v62 = *(_DWORD *)(*(_QWORD *)(v316 + 32) + 4);
          if (v62 < 0 && (v63 = *(_QWORD *)(a1 + 8), (v62 & 0x7FFFFFFFu) < *(_DWORD *)(v63 + 432)))
            v64 = *(_QWORD *)(*(_QWORD *)(v63 + 424) + 8 * (v62 & 0x7FFFFFFF));
          else
            v64 = 0;
          v301 = v64;
          v72 = sub_1C4825F50(&v301);
          v74 = v73;
          if (v72 != sub_1C4825F50((unint64_t *)&v306) || v74 != v75)
          {
            v77 = sub_1C4825F50(&v301);
            if ((_DWORD)v76 == 1)
            v79 = sub_1C4825F50((unint64_t *)&v306);
            if ((_DWORD)v78 == 1)
            if (v77 <= v79)
            {
              v86 = 0;
LABEL_110:
              if (v318 >= 0x41 && v317)
              {
                MEMORY[0x1CAA32F9C](v317, 0x1000C8000313F17);
                if ((v86 & 1) == 0)
                  goto LABEL_176;
LABEL_115:
                v87 = *(unsigned int *)(*(_QWORD *)(v55 + 32) + 4);
                v88 = v306;
                if (v305 > 0x40)
                {
                  v92 = 0;
                  v93 = ((unint64_t)v305 + 63) >> 6;
                  v89 = (uint64_t *)v304;
                  do
                  {
                    v94 = v93-- < 1;
                    if (v94)
                      break;
                    v95 = v304[v93];
                    v92 += __clz((unint64_t)v95);
                  }
                  while (!v95);
                  v96 = v305 | 0xFFFFFFC0;
                  if ((v305 & 0x3F) == 0)
                    v96 = 0;
                  if (v92 + v96 != v305)
                    goto LABEL_117;
                }
                else
                {
                  v89 = (uint64_t *)v304;
                  if (v304)
                  {
LABEL_117:
                    v90 = *(_QWORD *)(a1 + 16);
                    v316 = v306;
                    LODWORD(v317) = 0;
                    LODWORD(p_dst) = v87;
                    v312[0] = 0;
                    v307 = (void *)v306;
                    v308 = 0;
                    if (v305 > 0x40)
                      v91 = *v89;
                    else
                      v91 = (uint64_t)((_QWORD)v89 << -(uint64_t)v305) >> -(uint64_t)v305;
                    p_p_dst = (unint64_t *)sub_1C5544694(v90, (unint64_t *)&v307, v91);
                    v314 = v99;
                    v315 = 1;
                    v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 127, &v316, 1, &p_dst, 2, 0);
                    v102 = v101;
                    v88 = v306;
                    v97 = *(_QWORD *)(a1 + 8);
                    v103 = *(_QWORD **)(a1 + 16);
LABEL_137:
                    v108 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4);
                    if (v108 < 0 && (v108 & 0x7FFFFFFFu) < *(_DWORD *)(v97 + 432))
                    {
                      v307 = *(void **)(*(_QWORD *)(v97 + 424) + 8 * (v108 & 0x7FFFFFFF));
                      if (((unint64_t)v307 & 0xFFFFFFFFFFFFFFF9) != 0 && (v307 & 6) == 2)
                      {
                        v111 = sub_1C4825F50((unint64_t *)&v307);
                        if ((_DWORD)v110 == 1)
                        v316 = (8 * v111) | 1;
                        LODWORD(v317) = 0;
                        LODWORD(p_dst) = v108;
                        v312[0] = 0;
                        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v103 + 32))(v103, 80, &v316, 1, &p_dst, 1, 0);
                        v108 = *(_DWORD *)(*(_QWORD *)(v112 + 32) + 4);
                      }
                    }
                    v316 = v88;
                    LODWORD(v317) = 0;
                    p_dst = v100;
                    __src = v102;
                    v312[0] = 1;
                    LODWORD(p_p_dst) = v108;
                    v315 = 0;
                    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v103 + 32))(v103, 45, &v316, 1, &p_dst, 2, 0);
                    *(_QWORD *)a3 = v113;
                    v114 = *(_QWORD *)(a1 + 16);
                    p_dst = v306;
                    LODWORD(__src) = 0;
                    v115 = v303;
                    LODWORD(v317) = v303;
                    if (v303 > 0x40)
                    {
                      v316 = operator new[]();
                      v115 = v317;
                      memcpy((void *)v316, __dst, (((unint64_t)v317 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v316 = (uint64_t)__dst;
                    }
                    v116 = sub_1C47EE5B8(&v304, v115);
                    sub_1C4888094((uint64_t)&v316, v116);
                    if (v317 > 0x40)
                      v117 = *(_QWORD *)v316;
                    else
                      v117 = v316 << -(uint64_t)v317 >> -(uint64_t)v317;
                    sub_1C5544694(v114, &p_dst, v117);
                    *v54 = v118;
                    if (v317 >= 0x41 && v316)
                      MEMORY[0x1CAA32F9C](v316, 0x1000C8000313F17);
                    goto LABEL_176;
                  }
                }
                v97 = *(_QWORD *)(a1 + 8);
                if ((v87 & 0x80000000) != 0)
                  v98 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
                else
                  v98 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v87);
                v107 = *v98;
                if (v107)
                {
                  if ((*(_BYTE *)(v107 + 3) & 1) != 0
                    || (v107 = *(_QWORD *)(v107 + 24)) != 0 && (*(_BYTE *)(v107 + 3) & 1) != 0)
                  {
                    v102 = *(void **)(v107 + 8);
                  }
                  else
                  {
                    v102 = 0;
                  }
                  v54 = v300;
                }
                else
                {
                  v102 = 0;
                }
                v103 = *(_QWORD **)(a1 + 16);
                v100 = v103[1];
                goto LABEL_137;
              }
              if (v86)
                goto LABEL_115;
LABEL_176:
              if (v303 >= 0x41 && __dst)
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              goto LABEL_327;
            }
            v80 = *(_QWORD *)(a1 + 16);
            v307 = (void *)v306;
            v308 = 0;
            LODWORD(p_dst) = v62;
            v312[0] = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 119, &v307, 1, &p_dst, 1, 0);
            v61 = v81;
          }
          if (v303 > 0x40 || v318 > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)&__dst, v318);
            if (v303 <= 0x40)
              __dst = v317;
            else
              memcpy(__dst, v317, (((unint64_t)v303 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __dst = v317;
            v303 = v318;
          }
          v86 = 1;
          v55 = v61;
          goto LABEL_110;
        }
        if (v295 <= v296)
          goto LABEL_176;
        v82 = **(unsigned __int16 **)(v55 + 16);
        if (v82 == 126)
        {
          v83 = *(unsigned int *)(*(_QWORD *)(v55 + 32) + 36);
          v84 = *(_QWORD *)(a1 + 8);
          if ((v83 & 0x80000000) != 0)
            v85 = (uint64_t *)(*(_QWORD *)(v84 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          else
            v85 = (uint64_t *)(*(_QWORD *)(v84 + 272) + 8 * v83);
          v121 = *v85;
          if (v121)
          {
            if ((*(_BYTE *)(v121 + 3) & 1) != 0
              || (v121 = *(_QWORD *)(v121 + 24)) != 0 && (*(_BYTE *)(v121 + 3) & 1) != 0)
            {
              v122 = *(_QWORD *)(v121 + 8);
            }
            else
            {
              v122 = 0;
            }
            v54 = v300;
          }
          else
          {
            v122 = 0;
          }
          sub_1C492B5CC((uint64_t)&p_dst, a1, v122, 0x100000800);
          if ((_BYTE)p_p_dst)
          {
            v124 = v312[0];
            if (v312[0] >= 0x41)
            {
              v132 = (((unint64_t)v312[0] + 63) >> 3) & 0x3FFFFFF8;
              v125 = (void *)operator new[]();
              v133 = __src;
              memcpy(v125, __src, v132);
              if (v133)
                MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
            }
            else
            {
              v125 = __src;
              if (v303 < 0x41)
              {
                __dst = __src;
                v303 = v312[0];
LABEL_183:
                if (v15 == 1)
                llvm::APInt::zext((llvm::APInt *)&__dst, v295, (uint64_t)&p_dst);
                if (v303 >= 0x41 && __dst)
                  MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                __dst = (void *)p_dst;
                v303 = __src;
                v134 = *(_QWORD *)(a1 + 16);
                v307 = (void *)v306;
                v308 = 0;
                LODWORD(p_dst) = *(_DWORD *)(*(_QWORD *)(v122 + 32) + 36);
                v312[0] = 0;
                v135 = *(void (**)(void))(*(_QWORD *)v134 + 32);
LABEL_199:
                v135();
                v55 = v139;
                if (v124 >= 0x41 && v125)
                  MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
                goto LABEL_115;
              }
            }
            llvm::APInt::reallocate((uint64_t)&__dst, v124);
            if (v303 <= 0x40)
              __dst = v125;
            else
              memcpy(__dst, v125, (((unint64_t)v303 + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_183;
          }
          v82 = **(unsigned __int16 **)(v55 + 16);
        }
        if (v82 != 124)
          goto LABEL_176;
        v126 = *(unsigned int *)(*(_QWORD *)(v55 + 32) + 36);
        v127 = *(_QWORD *)(a1 + 8);
        v128 = (uint64_t *)((v126 & 0x80000000) != 0
                         ? *(_QWORD *)(v127 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v127 + 272) + 8 * v126);
        v129 = *v128;
        if (v129)
        {
          if ((*(_BYTE *)(v129 + 3) & 1) != 0
            || (v129 = *(_QWORD *)(v129 + 24)) != 0 && (*(_BYTE *)(v129 + 3) & 1) != 0)
          {
            v130 = *(_QWORD *)(v129 + 8);
          }
          else
          {
            v130 = 0;
          }
          v54 = v300;
        }
        else
        {
          v130 = 0;
        }
        sub_1C492B5CC((uint64_t)&p_dst, a1, v130, 0x100001000);
        if (!(_BYTE)p_p_dst)
          goto LABEL_176;
        v124 = v312[0];
        if (v312[0] >= 0x41)
        {
          v136 = (((unint64_t)v312[0] + 63) >> 3) & 0x3FFFFFF8;
          v125 = (void *)operator new[]();
          v137 = __src;
          memcpy(v125, __src, v136);
          if (v137)
            MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
        }
        else
        {
          v125 = __src;
          if (v303 < 0x41)
          {
            __dst = __src;
            v303 = v312[0];
LABEL_193:
            if (v15 == 1)
            llvm::APInt::sext((llvm::APInt *)&__dst, v295, (llvm::APInt *)&p_dst);
            if (v303 >= 0x41 && __dst)
              MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
            __dst = (void *)p_dst;
            v303 = __src;
            v138 = *(_QWORD *)(a1 + 16);
            v307 = (void *)v306;
            v308 = 0;
            LODWORD(p_dst) = *(_DWORD *)(*(_QWORD *)(v130 + 32) + 36);
            v312[0] = 0;
            v135 = *(void (**)(void))(*(_QWORD *)v138 + 32);
            goto LABEL_199;
          }
        }
        llvm::APInt::reallocate((uint64_t)&__dst, v124);
        if (v303 <= 0x40)
          __dst = v125;
        else
          memcpy(__dst, v125, (((unint64_t)v303 + 63) >> 3) & 0x3FFFFFF8);
        goto LABEL_193;
      }
      if (v56 != 2 || v295 <= v296 || !sub_1C492B738(v55, 0))
        goto LABEL_327;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 318))
        goto LABEL_87;
      v66 = sub_1C4825F50((unint64_t *)&v306);
      if ((_DWORD)v65 == 1)
      if (v66 < 0x40)
      {
LABEL_87:
        v67 = *(unsigned int **)(v55 + 32);
        v68 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v68 = *(_QWORD *)(a1 + 8);
        v67 = *(unsigned int **)(v55 + 32);
        v119 = v67[1];
        if ((v119 & 0x80000000) != 0)
          v120 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
        else
          v120 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v119);
        v140 = *v120;
        if (!v140)
          goto LABEL_327;
        while ((*(_BYTE *)(v140 + 3) & 1) != 0)
        {
          v140 = *(_QWORD *)(v140 + 24);
          if (!v140)
            goto LABEL_327;
        }
        while (1)
        {
          v140 = *(_QWORD *)(v140 + 24);
          if (!v140)
            break;
          if ((*(_BYTE *)(v140 + 3) & 1) == 0)
            goto LABEL_327;
        }
        v141 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
        v142 = (uint64_t *)((v141 & 0x80000000) != 0
                         ? *(_QWORD *)(v68 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v68 + 272) + 8 * v141);
        v143 = *v142;
        if (!v143)
          goto LABEL_327;
        while ((*(_BYTE *)(v143 + 3) & 1) != 0)
        {
          v143 = *(_QWORD *)(v143 + 24);
          if (!v143)
            goto LABEL_327;
        }
        while (1)
        {
          v143 = *(_QWORD *)(v143 + 24);
          if (!v143)
            break;
          if ((*(_BYTE *)(v143 + 3) & 1) == 0)
            goto LABEL_327;
        }
      }
      v69 = v67[9];
      v70 = v67[17];
      if ((v69 & 0x80000000) != 0)
        v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
      else
        v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v69);
      v104 = *v71;
      if (v104)
      {
        if ((*(_BYTE *)(v104 + 3) & 1) != 0 || (v104 = *(_QWORD *)(v104 + 24)) != 0 && (*(_BYTE *)(v104 + 3) & 1) != 0)
          v105 = *(_QWORD *)(v104 + 8);
        else
          v105 = 0;
        v54 = v300;
        if ((v70 & 0x80000000) == 0)
          goto LABEL_132;
      }
      else
      {
        v105 = 0;
        if ((v70 & 0x80000000) == 0)
        {
LABEL_132:
          v106 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v70);
          goto LABEL_239;
        }
      }
      v106 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
LABEL_239:
      v145 = *v106;
      if (v145)
      {
        if ((*(_BYTE *)(v145 + 3) & 1) != 0 || (v145 = *(_QWORD *)(v145 + 24)) != 0 && (*(_BYTE *)(v145 + 3) & 1) != 0)
          v146 = *(_QWORD *)(v145 + 8);
        else
          v146 = 0;
        v54 = v300;
      }
      else
      {
        v146 = 0;
      }
      if (v294 == 1)
      {
        v147 = v296;
        if ((sub_1C4929048(a1, v105, v296) & 1) != 0)
        {
LABEL_243:
          v148 = (void *)v306;
          v149 = v305;
          if (v305 > 0x40)
          {
            v153 = 0;
            v154 = ((unint64_t)v305 + 63) >> 6;
            v150 = (uint64_t *)v304;
            do
            {
              v94 = v154-- < 1;
              if (v94)
                break;
              v155 = v304[v154];
              v153 += __clz((unint64_t)v155);
            }
            while (!v155);
            v156 = v305 | 0xFFFFFFC0;
            if ((v305 & 0x3F) == 0)
              v156 = 0;
            if (v153 + v156 != v305)
              goto LABEL_245;
          }
          else
          {
            v150 = (uint64_t *)v304;
            if (v304)
            {
LABEL_245:
              v151 = *(_QWORD *)(a1 + 16);
              v316 = v306;
              LODWORD(v317) = 0;
              LODWORD(p_dst) = v69;
              v312[0] = 0;
              v307 = (void *)v306;
              v308 = 0;
              if (v305 > 0x40)
                v152 = *v150;
              else
                v152 = (uint64_t)((_QWORD)v150 << -(uint64_t)v305) >> -(uint64_t)v305;
              p_p_dst = (unint64_t *)sub_1C5544694(v151, (unint64_t *)&v307, v152);
              v314 = v159;
              v315 = 1;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v151 + 32))(v151, 127, &v316, 1, &p_dst, 2, 0);
              v161 = v160;
              v148 = (void *)v306;
              v149 = v305;
LABEL_260:
              if (v149 > 0x40)
              {
                v165 = 0;
                v166 = ((unint64_t)v149 + 63) >> 6;
                v163 = (uint64_t *)v304;
                do
                {
                  v94 = v166-- < 1;
                  if (v94)
                    break;
                  v167 = v304[v166];
                  v165 += __clz((unint64_t)v167);
                }
                while (!v167);
                v168 = v149 | 0xFFFFFFC0;
                if ((v149 & 0x3F) == 0)
                  v168 = 0;
                if (v165 + v168 != v149)
                  goto LABEL_262;
              }
              else
              {
                v163 = (uint64_t *)v304;
                if (v304)
                {
LABEL_262:
                  v164 = *(_QWORD *)(a1 + 16);
                  v316 = (uint64_t)v148;
                  LODWORD(v317) = 0;
                  LODWORD(p_dst) = v70;
LABEL_299:
                  v312[0] = 0;
                  v307 = v148;
                  v308 = 0;
                  if (v149 > 0x40)
                    v185 = *v163;
                  else
                    v185 = (uint64_t)((_QWORD)v163 << -(char)v149) >> -(char)v149;
                  p_p_dst = (unint64_t *)sub_1C5544694(v164, (unint64_t *)&v307, v185);
                  v314 = v186;
                  v315 = 1;
                  v187 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 127, &v316, 1, &p_dst, 2, 0);
                  v189 = v188;
                  v148 = (void *)v306;
                  v169 = *(_QWORD *)(a1 + 8);
                  v190 = *(_QWORD **)(a1 + 16);
LABEL_316:
                  v196 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 32) + 4);
                  if (v196 < 0 && (v196 & 0x7FFFFFFFu) < *(_DWORD *)(v169 + 432))
                  {
                    v307 = *(void **)(*(_QWORD *)(v169 + 424) + 8 * (v196 & 0x7FFFFFFF));
                    if (((unint64_t)v307 & 0xFFFFFFFFFFFFFFF9) != 0 && (v307 & 6) == 2)
                    {
                      v199 = sub_1C4825F50((unint64_t *)&v307);
                      if ((_DWORD)v198 == 1)
                      v316 = (8 * v199) | 1;
                      LODWORD(v317) = 0;
                      LODWORD(p_dst) = v196;
                      v312[0] = 0;
                      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v190 + 32))(v190, 80, &v316, 1, &p_dst, 1, 0);
                      v196 = *(_DWORD *)(*(_QWORD *)(v200 + 32) + 4);
                    }
                  }
                  v316 = (uint64_t)v148;
                  LODWORD(v317) = 0;
                  LODWORD(p_dst) = v196;
                  v312[0] = 0;
                  p_p_dst = (unint64_t *)v187;
                  v314 = v189;
                  v315 = 1;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v190 + 32))(v190, 45, &v316, 1, &p_dst, 2, 0);
                  *(_QWORD *)a3 = v201;
                  *v54 = v161;
                  goto LABEL_327;
                }
              }
              v169 = *(_QWORD *)(a1 + 8);
              if ((v70 & 0x80000000) == 0)
              {
                v170 = (uint64_t *)(*(_QWORD *)(v169 + 272) + 8 * v70);
LABEL_313:
                v195 = *v170;
                if (v195)
                {
                  if ((*(_BYTE *)(v195 + 3) & 1) != 0
                    || (v195 = *(_QWORD *)(v195 + 24)) != 0 && (*(_BYTE *)(v195 + 3) & 1) != 0)
                  {
                    v189 = *(_QWORD *)(v195 + 8);
                  }
                  else
                  {
                    v189 = 0;
                  }
                  v54 = v300;
                }
                else
                {
                  v189 = 0;
                }
                v190 = *(_QWORD **)(a1 + 16);
                v187 = v190[1];
                goto LABEL_316;
              }
              v171 = v70 & 0x7FFFFFFF;
              goto LABEL_312;
            }
          }
          v157 = *(_QWORD *)(a1 + 8);
          if ((v69 & 0x80000000) != 0)
            v158 = (uint64_t *)(*(_QWORD *)(v157 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
          else
            v158 = (uint64_t *)(*(_QWORD *)(v157 + 272) + 8 * v69);
          v162 = *v158;
          if (v162)
          {
            if ((*(_BYTE *)(v162 + 3) & 1) != 0
              || (v162 = *(_QWORD *)(v162 + 24)) != 0 && (*(_BYTE *)(v162 + 3) & 1) != 0)
            {
              v161 = *(_QWORD *)(v162 + 8);
            }
            else
            {
              v161 = 0;
            }
            v54 = v300;
          }
          else
          {
            v161 = 0;
          }
          goto LABEL_260;
        }
      }
      else
      {
        v147 = v296;
        if (sub_1C4929048(a1, v105, v296))
          goto LABEL_243;
      }
      v296 = v147;
      if (sub_1C4929048(a1, v146, v147))
      {
        v148 = (void *)v306;
        v149 = v305;
        if (v305 > 0x40)
        {
          v176 = 0;
          v177 = ((unint64_t)v305 + 63) >> 6;
          v173 = (uint64_t *)v304;
          do
          {
            v94 = v177-- < 1;
            if (v94)
              break;
            v178 = v304[v177];
            v176 += __clz((unint64_t)v178);
          }
          while (!v178);
          v179 = v305 | 0xFFFFFFC0;
          if ((v305 & 0x3F) == 0)
            v179 = 0;
          if (v176 + v179 != v305)
            goto LABEL_281;
        }
        else
        {
          v173 = (uint64_t *)v304;
          if (v304)
          {
LABEL_281:
            v174 = *(_QWORD *)(a1 + 16);
            v316 = v306;
            LODWORD(v317) = 0;
            LODWORD(p_dst) = v70;
            v312[0] = 0;
            v307 = (void *)v306;
            v308 = 0;
            if (v305 > 0x40)
              v175 = *v173;
            else
              v175 = (uint64_t)((_QWORD)v173 << -(uint64_t)v305) >> -(uint64_t)v305;
            p_p_dst = (unint64_t *)sub_1C5544694(v174, (unint64_t *)&v307, v175);
            v314 = v182;
            v315 = 1;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v174 + 32))(v174, 127, &v316, 1, &p_dst, 2, 0);
            v161 = v183;
            v148 = (void *)v306;
            v149 = v305;
            goto LABEL_296;
          }
        }
        v180 = *(_QWORD *)(a1 + 8);
        if ((v70 & 0x80000000) != 0)
          v181 = (uint64_t *)(*(_QWORD *)(v180 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
        else
          v181 = (uint64_t *)(*(_QWORD *)(v180 + 272) + 8 * v70);
        v184 = *v181;
        if (v184)
        {
          if ((*(_BYTE *)(v184 + 3) & 1) != 0
            || (v184 = *(_QWORD *)(v184 + 24)) != 0 && (*(_BYTE *)(v184 + 3) & 1) != 0)
          {
            v161 = *(_QWORD *)(v184 + 8);
          }
          else
          {
            v161 = 0;
          }
          v54 = v300;
        }
        else
        {
          v161 = 0;
        }
LABEL_296:
        if (v149 > 0x40)
        {
          v191 = 0;
          v192 = ((unint64_t)v149 + 63) >> 6;
          v163 = (uint64_t *)v304;
          do
          {
            v94 = v192-- < 1;
            if (v94)
              break;
            v193 = v304[v192];
            v191 += __clz((unint64_t)v193);
          }
          while (!v193);
          v194 = v149 | 0xFFFFFFC0;
          if ((v149 & 0x3F) == 0)
            v194 = 0;
          if (v191 + v194 != v149)
            goto LABEL_298;
        }
        else
        {
          v163 = (uint64_t *)v304;
          if (v304)
          {
LABEL_298:
            v164 = *(_QWORD *)(a1 + 16);
            v316 = (uint64_t)v148;
            LODWORD(v317) = 0;
            LODWORD(p_dst) = v69;
            goto LABEL_299;
          }
        }
        v169 = *(_QWORD *)(a1 + 8);
        if ((v69 & 0x80000000) == 0)
        {
          v170 = (uint64_t *)(*(_QWORD *)(v169 + 272) + 8 * v69);
          goto LABEL_313;
        }
        v171 = v69 & 0x7FFFFFFF;
LABEL_312:
        v170 = (uint64_t *)(*(_QWORD *)(v169 + 24) + 16 * v171 + 8);
        goto LABEL_313;
      }
LABEL_327:
      if (v305 >= 0x41 && v304)
        MEMORY[0x1CAA32F9C](v304, 0x1000C8000313F17);
      v55 = *v54;
      goto LABEL_331;
    }
    if ((*(_BYTE *)(v60 + 3) & 1) != 0 || (v60 = *(_QWORD *)(v60 + 24)) != 0 && (*(_BYTE *)(v60 + 3) & 1) != 0)
    {
      v144 = *(_QWORD *)(v60 + 8);
      if (v144)
      {
        if (**(_WORD **)(v144 + 16) == 127)
        {
          v54 = v300;
          v56 = a5;
          if (*(_DWORD *)(v144 + 40) != 3)
            goto LABEL_75;
          v282 = *(_QWORD *)(v144 + 32);
          v283 = *(unsigned int *)(v282 + 36);
          if ((v283 & 0x80000000) != 0)
            v284 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v283 & 0x7FFFFFFF) + 8);
          else
            v284 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v283);
          v285 = *v284;
          if (v285
            && ((*(_BYTE *)(v285 + 3) & 1) != 0
             || (v285 = *(_QWORD *)(v285 + 24)) != 0 && (*(_BYTE *)(v285 + 3) & 1) != 0))
          {
            v55 = *(_QWORD *)(v285 + 8);
            if (v55)
            {
              v286 = sub_1C554C050(*(_DWORD *)(v282 + 68), v58);
              if (v287)
              {
                v288 = v305;
                if (v305 > 0x40)
                {
                  *v304 = (uint64_t *)v286;
                  bzero(v304 + 1, (((unint64_t)(v288 + 63) >> 3) - 8) & 0xFFFFFFF8);
                }
                else
                {
                  if (v305)
                    v289 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v305;
                  else
                    v289 = 0;
                  v304 = (uint64_t **)(v289 & v286);
                }
              }
            }
          }
          else
          {
            v55 = 0;
          }
        }
      }
    }
    v54 = v300;
    v56 = a5;
    goto LABEL_75;
  }
LABEL_331:
  if (**(_WORD **)(v55 + 16) == 127)
  {
    v202 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v55 + 32) + 68), *(_QWORD *)(a1 + 8));
    if (v203)
    {
      if (v202 == *(_QWORD *)(a1 + 56))
      {
        v204 = *(_QWORD *)(a1 + 8);
        v205 = *(unsigned int *)(*(_QWORD *)(v55 + 32) + 36);
        if ((v205 & 0x80000000) != 0)
          v206 = (uint64_t *)(*(_QWORD *)(v204 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
        else
          v206 = (uint64_t *)(*(_QWORD *)(v204 + 272) + 8 * v205);
        v229 = *v206;
        if (!v229)
          goto LABEL_362;
        if ((*(_BYTE *)(v229 + 3) & 1) == 0)
        {
          v229 = *(_QWORD *)(v229 + 24);
          if (!v229)
          {
LABEL_475:
            v54 = v300;
LABEL_362:
            *v54 = v229;
            goto LABEL_417;
          }
          if ((*(_BYTE *)(v229 + 3) & 1) == 0)
          {
            v229 = 0;
            goto LABEL_475;
          }
        }
        v229 = *(_QWORD *)(v229 + 8);
        goto LABEL_475;
      }
    }
  }
  v207 = (1 << v297);
  v208 = *v54;
  if (**(unsigned __int16 **)(*v54 + 16) - 47 <= 1)
  {
    v209 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v208 + 32) + 68), *(_QWORD *)(a1 + 8));
    if (v210)
    {
      v211 = v209;
      v212 = **(unsigned __int16 **)(v208 + 16);
      if (v209 == v207)
      {
        v213 = *(_QWORD *)(a1 + 8);
        v214 = *(_QWORD *)(v208 + 32);
        if (v212 == 48)
        {
          v215 = *(_DWORD *)(v214 + 4);
          if (v215 < 0)
          {
            v233 = v215 & 0x7FFFFFFF;
            v54 = v300;
            if (v233 >= *(_DWORD *)(v213 + 432))
              v216 = 0;
            else
              v216 = *(_QWORD *)(*(_QWORD *)(v213 + 424) + 8 * v233);
          }
          else
          {
            v216 = 0;
            v54 = v300;
          }
          v256 = *(_QWORD *)(a1 + 16);
          v316 = v216;
          LODWORD(v317) = 0;
          LODWORD(p_dst) = *(_DWORD *)(v214 + 36);
          v312[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v256 + 32))(v256, 124, &v316, 1, &p_dst, 1, 0);
          goto LABEL_416;
        }
        v230 = *(unsigned int *)(v214 + 36);
        if ((v230 & 0x80000000) != 0)
          v231 = (uint64_t *)(*(_QWORD *)(v213 + 24) + 16 * (v230 & 0x7FFFFFFF) + 8);
        else
          v231 = (uint64_t *)(*(_QWORD *)(v213 + 272) + 8 * v230);
        v54 = v300;
        v232 = *v231;
        if (!v232)
        {
          v228 = 0;
          goto LABEL_416;
        }
        if ((*(_BYTE *)(v232 + 3) & 1) != 0 || (v232 = *(_QWORD *)(v232 + 24)) != 0 && (*(_BYTE *)(v232 + 3) & 1) != 0)
          v228 = *(_QWORD *)(v232 + 8);
        else
          v228 = 0;
LABEL_454:
        v54 = v300;
        goto LABEL_416;
      }
      if (v298 == 2 && (v209 & (v207 - 1)) == 0)
      {
        v234 = *(_QWORD *)(a1 + 8);
        v235 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4);
        if ((unint64_t)(v235 - 1) <= 0x3FFFFFFE)
          goto LABEL_404;
        v236 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 4);
        do
        {
          v237 = v236;
          if ((v236 & 0x80000000) != 0)
            v238 = (uint64_t *)(*(_QWORD *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
          else
            v238 = (uint64_t *)(*(_QWORD *)(v234 + 272) + 8 * v236);
          v239 = *v238;
          if (!v239)
            break;
          if ((*(_BYTE *)(v239 + 3) & 1) == 0)
          {
            v239 = *(_QWORD *)(v239 + 24);
            if (!v239 || (*(_BYTE *)(v239 + 3) & 1) == 0)
              break;
          }
          v240 = *(_QWORD *)(v239 + 8);
          if (!v240)
            break;
          if ((v236 & 0x80000000) != 0)
            v241 = (uint64_t *)(*(_QWORD *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
          else
            v241 = (uint64_t *)(*(_QWORD *)(v234 + 272) + 8 * v236);
          v242 = *v241;
          if (!v242)
            goto LABEL_344;
          while ((*(_BYTE *)(v242 + 3) & 1) != 0)
          {
            v242 = *(_QWORD *)(v242 + 24);
            if (!v242)
              goto LABEL_344;
          }
          while (1)
          {
            v242 = *(_QWORD *)(v242 + 24);
            if (!v242)
              break;
            if ((*(_BYTE *)(v242 + 3) & 1) == 0)
              goto LABEL_344;
          }
          v243 = **(unsigned __int16 **)(v240 + 16);
          if (v243 == 81)
          {
            if ((v236 & 0x80000000) != 0
              && (v236 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v234 + 432))
            {
              v244 = *(_QWORD *)(*(_QWORD *)(v234 + 424) + 8 * (v236 & 0x7FFFFFFF));
            }
            else
            {
              v244 = 0;
            }
            v236 = *(unsigned int *)(*(_QWORD *)(v240 + 32) + 36);
            p_dst = v244;
            if ((v236 & 0x80000000) != 0
              && (v236 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v234 + 432))
            {
              v245 = *(_QWORD *)(*(_QWORD *)(v234 + 424) + 8 * (v236 & 0x7FFFFFFF));
            }
            else
            {
              v245 = 0;
            }
            v316 = v245;
            v299 = sub_1C4825F50(&p_dst);
            v293 = v246;
            if (v299 != sub_1C4825F50((unint64_t *)&v316) || v293 != v247)
              goto LABEL_411;
          }
          else
          {
            if (v243 != 19)
              goto LABEL_411;
            v236 = *(unsigned int *)(*(_QWORD *)(v240 + 32) + 36);
          }
          v235 = v237;
        }
        while ((unint64_t)(v236 - 1) > 0x3FFFFFFE);
        if ((v235 & 0x80000000) != 0)
          v248 = (uint64_t *)(*(_QWORD *)(v234 + 24) + 16 * (v235 & 0x7FFFFFFF) + 8);
        else
LABEL_404:
          v248 = (uint64_t *)(*(_QWORD *)(v234 + 272) + 8 * v235);
        v249 = *v248;
        if (v249)
        {
          while ((*(_BYTE *)(v249 + 3) & 1) != 0)
          {
            v249 = *(_QWORD *)(v249 + 24);
            if (!v249)
              goto LABEL_344;
          }
          while (1)
          {
            v249 = *(_QWORD *)(v249 + 24);
            if (!v249)
              break;
            if ((*(_BYTE *)(v249 + 3) & 1) == 0)
              goto LABEL_344;
          }
LABEL_411:
          v250 = *(_QWORD *)(v208 + 32);
          v251 = *(_DWORD *)(v250 + 4);
          v252 = v211 / v207;
          if (v251 < 0
            && (v253 = *(_QWORD *)(a1 + 8), v254 = v251 & 0x7FFFFFFF, v254 < *(_DWORD *)(v253 + 432)))
          {
            v255 = *(void **)(*(_QWORD *)(v253 + 424) + 8 * v254);
          }
          else
          {
            v255 = 0;
          }
          v273 = *(_QWORD *)(a1 + 16);
          if (v212 == 48)
          {
            v316 = (uint64_t)v255;
            LODWORD(v317) = 0;
            LODWORD(p_dst) = *(_DWORD *)(v250 + 36);
            v312[0] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v273 + 32))(v273, 124, &v316, 1, &p_dst, 1, 0);
            v273 = *(_QWORD *)(a1 + 16);
            v275 = *(_DWORD *)(*(_QWORD *)(v274 + 32) + 4);
            v307 = v255;
            v308 = 0;
            v276 = sub_1C5544694(v273, (unint64_t *)&v307, v252);
            v316 = (uint64_t)v255;
            LODWORD(v317) = 0;
            LODWORD(p_dst) = v275;
          }
          else
          {
            v278 = *(_DWORD *)(v250 + 36);
            v307 = v255;
            v308 = 0;
            v276 = sub_1C5544694(v273, (unint64_t *)&v307, v252);
            v316 = (uint64_t)v255;
            LODWORD(v317) = 0;
            LODWORD(p_dst) = v278;
          }
          v312[0] = 0;
          p_p_dst = (unint64_t *)v276;
          v314 = v277;
          v315 = 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v273 + 32))(v273, 47, &v316, 1, &p_dst, 2, 0);
          goto LABEL_454;
        }
      }
    }
  }
LABEL_344:
  v54 = v300;
  v217 = *(unsigned int *)(*(_QWORD *)(*v300 + 32) + 4);
  v218 = *(_QWORD *)(a1 + 8);
  if ((v217 & 0x80000000) != 0)
    v219 = (uint64_t *)(*(_QWORD *)(v218 + 24) + 16 * (v217 & 0x7FFFFFFF) + 8);
  else
    v219 = (uint64_t *)(*(_QWORD *)(v218 + 272) + 8 * v217);
  v220 = *v219;
  if (v220)
  {
    if (((*(_BYTE *)(v220 + 3) & 1) != 0 || (v220 = *(_QWORD *)(v220 + 24)) != 0 && (*(_BYTE *)(v220 + 3) & 1) != 0)
      && (v281 = *(_QWORD *)(v220 + 8)) != 0
      && **(_WORD **)(v281 + 16) == 81)
    {
      v54 = v300;
      if (*(_DWORD *)(v281 + 40) == 2)
        LODWORD(v217) = *(_DWORD *)(*(_QWORD *)(v281 + 32) + 36);
    }
    else
    {
      v54 = v300;
    }
  }
  v221 = sub_1C554C050(v217, v218);
  if (!v222)
  {
    v224 = v297 == 0;
    goto LABEL_418;
  }
  if ((v221 & (v207 - 1)) != 0)
    v223 = 0;
  else
    v223 = v221 / (1 << *(_QWORD *)(a1 + 56));
  if (v223 != 0 && v223 == (int)v223)
    v225 = v223;
  else
    v225 = 0;
  if (v223 == 0 || v223 != (int)v223)
  {
    v224 = 0;
    goto LABEL_418;
  }
  v226 = v225 | v223 & 0xFFFFFFFFFFFFFF00;
  if (v226 != v221)
  {
    v227 = *(_QWORD *)(a1 + 16);
    p_dst = 257;
    LODWORD(__src) = 0;
    sub_1C5544694(v227, &p_dst, v226);
LABEL_416:
    *v54 = v228;
  }
LABEL_417:
  v224 = 1;
LABEL_418:
  v257 = *(_DWORD *)(*(_QWORD *)(*v54 + 32) + 4);
  v258 = *(_QWORD *)(a1 + 8);
  p_dst = (unint64_t)&off_1E816EFF0;
  __src = sub_1C554C7E0;
  p_p_dst = &p_dst;
  v316 = (uint64_t)&off_1E816F038;
  v317 = sub_1C554C7F8;
  v259 = &v316;
  v319 = (void **)&v316;
  sub_1C554C3AC(v257, v258, (uint64_t)&p_dst, (uint64_t)&v316, 0, 0, &v307);
  v261 = (uint64_t *)v319;
  if (v319 == (void **)&v316)
  {
    v262 = (void (**)(uint64_t *))(v316 + 32);
    v261 = &v316;
LABEL_420:
    (*v262)(v261);
    goto LABEL_421;
  }
  if (v319)
  {
    v262 = (void (**)(uint64_t *))((char *)*v319 + 40);
    goto LABEL_420;
  }
LABEL_421:
  v263 = p_p_dst;
  if (p_p_dst == &p_dst)
  {
    v264 = (void (**)(unint64_t *))(p_dst + 32);
    v263 = &p_dst;
LABEL_423:
    (*v264)(v263);
    goto LABEL_424;
  }
  if (p_p_dst)
  {
    v264 = (void (**)(unint64_t *))(*p_p_dst + 40);
    goto LABEL_423;
  }
LABEL_424:
  if (v309)
  {
    LODWORD(v259) = v308;
    if (v308 > 0x40)
    {
      v279 = (((unint64_t)v308 + 63) >> 3) & 0x3FFFFFF8;
      v265 = (void *)operator new[]();
      v280 = v307;
      memcpy(v265, v307, v279);
      if (v280)
        MEMORY[0x1CAA32F9C](v280, 0x1000C8000313F17);
      v54 = v300;
    }
    else
    {
      v265 = v307;
    }
    v266 = 1;
    if (!v224)
      goto LABEL_440;
LABEL_438:
    v269 = 1;
    goto LABEL_443;
  }
  if (v295 > v296 && v224)
  {
    v268 = *v54;
    if (v294 == 1)
    if ((sub_1C4929048(a1, v268, v296) & 1) != 0)
      return 1;
    v265 = 0;
    v266 = 0;
    goto LABEL_440;
  }
  v265 = 0;
  v266 = 0;
  if (v224)
    goto LABEL_438;
LABEL_440:
  if (*(_BYTE *)(a1 + 81))
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    v270 = *(_QWORD *)(a1 + 16);
    p_dst = *(_QWORD *)(a1 + 40);
    LODWORD(__src) = 0;
    sub_1C5544694(v270, &p_dst, 0);
    v269 = 0;
    *v54 = v271;
  }
  else
  {
    v269 = 0;
  }
LABEL_443:
  if (v259 >= 0x41 && v266 && v265)
    MEMORY[0x1CAA32F9C](v265, 0x1000C8000313F17);
  return v269;
}

void sub_1C492B5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;

  v7 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
  if (v7 < 0 && (v8 = *(_QWORD *)(a2 + 8), v9 = v7 & 0x7FFFFFFF, v9 < *(_DWORD *)(v8 + 432)))
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * v9);
  else
    v10 = 0;
  v25 = v10;
  if (sub_1C492B738(a3, a4)
    && (v11 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 68), *(_QWORD *)(a2 + 8)), v12))
  {
    v13 = v11;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 36);
    if ((v15 & 0x80000000) != 0)
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    else
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v15);
    v17 = *v16;
    if (v17 && ((*(_BYTE *)(v17 + 3) & 1) != 0 || (v17 = *(_QWORD *)(v17 + 24)) != 0 && (*(_BYTE *)(v17 + 3) & 1) != 0))
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = 0;
    v20 = sub_1C4825F50(&v25);
    if ((_DWORD)v19 == 1)
    v24 = v20;
    if (v20 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v23, v13, 0);
      v20 = v24;
      v22 = v23;
    }
    else
    {
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      if (!v20)
        v21 = 0;
      v22 = v21 & v13;
    }
    *(_DWORD *)(a1 + 16) = v20;
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v22;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

BOOL sub_1C492B738(uint64_t a1, uint64_t a2)
{
  int v3;
  _BOOL8 v4;
  uint64_t i;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t j;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int v32;
  unint64_t v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  void *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  void (**v44)();
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[8];
  int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD v61[2];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = **(unsigned __int16 **)(a1 + 16);
  if (v3 != 66)
    return v3 == 45 && ((a2 & 0xFF00000000) == 0 || (*(_WORD *)(a1 + 44) & (unsigned __int16)a2) != 0);
  for (i = 0; i != 64; i += 32)
  {
    v7 = (char *)&v54 + i;
    *((_DWORD *)v7 + 2) = 1;
    *(_QWORD *)v7 = 0;
    *((_DWORD *)v7 + 6) = 1;
    *((_QWORD *)v7 + 2) = 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v46 = v49;
  v47 = 4;
  v48 = 0;
  v44 = (void (**)())off_1E816DB00;
  v45 = v49;
  v49[4] = v8;
  v49[5] = *(_QWORD *)(v8 + 40);
  v49[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 120))(*(_QWORD *)(v8 + 16));
  v49[7] = *(_QWORD *)(*(_QWORD *)v8 + 40) + 272;
  v50 = 6;
  v51 = 1;
  v9 = &v52;
  for (j = 15; j != 95; j += 5)
    LODWORD((&v44)[j]) = -1;
  sub_1C54EB4A0((uint64_t)&v44, (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 36), (uint64_t)&v40);
  if (v55 >= 0x41 && v54)
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  v11 = v40;
  v54 = v40;
  v12 = v41;
  v55 = v41;
  v41 = 0;
  if (v57 >= 0x41 && v56)
  {
    MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
    v56 = v42;
    v57 = v43;
    v43 = 0;
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  }
  else
  {
    v56 = v42;
    v57 = v43;
  }
  sub_1C54EB4A0((uint64_t)&v44, (const char *)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 68), (uint64_t)&v40);
  if (v59 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  v13 = v40;
  v58 = v40;
  v14 = v41;
  v59 = v41;
  v41 = 0;
  if (v61[0] >= 0x41u && v60)
  {
    MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    v60 = v42;
    v61[0] = v43;
    v43 = 0;
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  }
  else
  {
    v60 = v42;
    v61[0] = v43;
  }
  v39 = v12;
  if (v12 > 0x40)
  {
    v38 = (void *)operator new[]();
    memcpy(v38, (const void *)v11, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v38);
    LODWORD(v12) = v39;
    v16 = (unint64_t)v38;
  }
  else
  {
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    if (!(_DWORD)v12)
      v15 = 0;
    v16 = v15 & ~v11;
  }
  v37 = v14;
  if (v14 <= 0x40)
  {
    if ((_DWORD)v14)
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    else
      v17 = 0;
    v18 = v17 & ~v13;
    goto LABEL_28;
  }
  v36 = (void *)operator new[]();
  memcpy(v36, (const void *)v13, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v36);
  v19 = v37;
  v18 = (unint64_t)v36;
  if (v37 < 0x41)
  {
LABEL_28:
    v4 = (v18 & v16) == 0;
    goto LABEL_29;
  }
  v30 = 0;
  v31 = ((unint64_t)v37 + 63) >> 6;
  do
  {
    *(_QWORD *)(v18 + v30) &= *(_QWORD *)(v16 + v30);
    v30 += 8;
  }
  while (8 * v31 != v30);
  v32 = 0;
  do
  {
    if (v31-- < 1)
      break;
    v34 = *(_QWORD *)(v18 + 8 * v31);
    v32 += __clz(v34);
  }
  while (!v34);
  v4 = 0;
  v35 = v19 | 0xFFFFFFC0;
  if ((v19 & 0x3F) == 0)
    v35 = 0;
  if (v19 - v32 - v35 <= 0x40)
    v4 = *(_QWORD *)v18 == 0;
  if (v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
LABEL_29:
  if (v12 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  v44 = (void (**)())off_1E816DB00;
  v20 = v51;
  if ((v51 & 1) != 0)
  {
    v21 = 16;
    goto LABEL_34;
  }
  v21 = v53;
  if (v53)
  {
    v9 = v52;
LABEL_34:
    v22 = 40 * v21;
    v23 = v9 + 2;
    do
    {
      if (*((_DWORD *)v23 - 4) <= 0xFFFFFFFD)
      {
        if (*((_DWORD *)v23 + 4) >= 0x41u)
        {
          v25 = v23[1];
          if (v25)
            MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v23 >= 0x41u)
        {
          v24 = *(v23 - 1);
          if (v24)
            MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
        }
      }
      v23 += 5;
      v22 -= 40;
    }
    while (v22);
    v20 = v51;
  }
  if ((v20 & 1) == 0)
    MEMORY[0x1CAA32FB4](v52, 8);
  v44 = off_1E7FA1810;
  if (v46 != v45)
    free(v46);
  for (k = 0; k != -16; k -= 8)
  {
    v27 = (char *)&v54 + k * 4;
    if (v61[k] >= 0x41u)
    {
      v28 = *((_QWORD *)v27 + 6);
      if (v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
    if (*((_DWORD *)v27 + 10) >= 0x41u)
    {
      v29 = *((_QWORD *)v27 + 4);
      if (v29)
        MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
  }
  return v4;
}

uint64_t sub_1C492BD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a4;
  v18 = a3;
  v15 = a3;
  v16 = a4;
  v10 = &v18;
  v11 = &v17;
  if ((sub_1C49296E0(a1, a2, (uint64_t)&v18, &v17, a6, a5 ^ 1u) & 1) != 0
    || (!*(_BYTE *)(a1 + 82) ? (v12 = a5 == 0) : (v12 = 1),
        !v12 && (v10 = &v16, v11 = &v15, (sub_1C49296E0(a1, a2, (uint64_t)&v16, &v15, a6, 0) & 1) != 0)))
  {
    result = 1;
  }
  else
  {
    result = 0;
    v11 = &v17;
    v10 = &v18;
  }
  v14 = *v11;
  *(_QWORD *)(a1 + 64) = *v10;
  *(_QWORD *)(a1 + 72) = v14;
  return result;
}

uint64_t sub_1C492BDEC(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v6 = **(unsigned __int16 **)(a2 + 16);
    if (v6 > 0x7D)
      break;
    if (v6 - 80 >= 2)
    {
      if (v6 != 19)
      {
        if (v6 - 45 < 2)
          goto LABEL_18;
LABEL_21:
        v7 = *(_QWORD *)(a2 + 32);
LABEL_22:
        v17 = sub_1C554C050(*(_DWORD *)(v7 + 4), *(_QWORD *)(a1 + 8));
        if (v18)
        {
          v19 = v17;
          v20 = *(_QWORD *)(a1 + 16);
          v51 = *(_QWORD *)(a1 + 32);
          LODWORD(v52) = 0;
          sub_1C5544694(v20, &v51, 0);
          *(_QWORD *)(a1 + 64) = v21;
          v22 = *(_QWORD *)(a1 + 16);
          v51 = *(_QWORD *)(a1 + 32);
          LODWORD(v52) = 0;
          v23 = v19;
        }
        else
        {
          *(_QWORD *)(a1 + 64) = a2;
          v22 = *(_QWORD *)(a1 + 16);
          v51 = *(_QWORD *)(a1 + 32);
          LODWORD(v52) = 0;
          v23 = 0;
        }
        sub_1C5544694(v22, &v51, v23);
        *(_QWORD *)(a1 + 72) = v41;
        v33 = 1;
        if ((sub_1C492BD2C(a1, a2, *(_QWORD *)(a1 + 64), v41, 1, a3) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 81) || *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40))
            return 0;
          v45 = *(_QWORD *)(a1 + 16);
          v51 = *(_QWORD *)(a1 + 40);
          LODWORD(v52) = 0;
          sub_1C5544694(v45, &v51, 0);
          v33 = 0;
          goto LABEL_55;
        }
        return v33;
      }
      v7 = *(_QWORD *)(a2 + 32);
      if ((*(_DWORD *)(v7 + 36) & 0x80000000) == 0)
        goto LABEL_22;
    }
LABEL_9:
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 36);
    if ((v9 & 0x80000000) != 0)
      v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    else
      v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
    a2 = 0;
    v11 = *v10;
    if (v11)
    {
      if ((*(_BYTE *)(v11 + 3) & 1) != 0
        || (a2 = 0, (v11 = *(_QWORD *)(v11 + 24)) != 0) && (a2 = 0, (*(_BYTE *)(v11 + 3) & 1) != 0))
      {
        a2 = *(_QWORD *)(v11 + 8);
      }
    }
  }
  if (v6 == 126 || v6 == 221)
    goto LABEL_9;
  if (v6 != 193)
    goto LABEL_21;
LABEL_18:
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(unsigned int *)(v12 + 36);
  v14 = *(unsigned int *)(v12 + 68);
  v15 = *(_QWORD *)(a1 + 8);
  if ((v13 & 0x80000000) != 0)
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  else
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v13);
  v24 = *v16;
  if (v24)
  {
    if ((*(_BYTE *)(v24 + 3) & 1) != 0 || (v24 = *(_QWORD *)(v24 + 24)) != 0 && (*(_BYTE *)(v24 + 3) & 1) != 0)
    {
      v47 = *(_QWORD *)(v24 + 8);
      if (v47)
      {
        if (**(_WORD **)(v47 + 16) == 80 && *(_DWORD *)(v47 + 40) == 2)
          LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(v47 + 32) + 36);
      }
    }
  }
  if ((v14 & 0x80000000) != 0)
    v25 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v25 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v14);
  v26 = *v25;
  if (v26)
  {
    if ((*(_BYTE *)(v26 + 3) & 1) != 0 || (v26 = *(_QWORD *)(v26 + 24)) != 0 && (*(_BYTE *)(v26 + 3) & 1) != 0)
    {
      v48 = *(_QWORD *)(v26 + 8);
      if (v48)
      {
        if (**(_WORD **)(v48 + 16) == 80 && *(_DWORD *)(v48 + 40) == 2)
          v14 = *(unsigned int *)(*(_QWORD *)(v48 + 32) + 36);
      }
    }
  }
  if ((v13 & 0x80000000) != 0)
    v27 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  else
    v27 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v13);
  v28 = *v27;
  if (v28 && ((*(_BYTE *)(v28 + 3) & 1) != 0 || (v28 = *(_QWORD *)(v28 + 24)) != 0 && (*(_BYTE *)(v28 + 3) & 1) != 0))
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  if (v14 >> 31)
    v30 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v30 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * v14);
  v31 = *v30;
  if (v31 && ((*(_BYTE *)(v31 + 3) & 1) != 0 || (v31 = *(_QWORD *)(v31 + 24)) != 0 && (*(_BYTE *)(v31 + 3) & 1) != 0))
    v32 = *(_QWORD *)(v31 + 8);
  else
    v32 = 0;
  v33 = sub_1C492BD2C(a1, a2, v29, v32, v6 != 46, a3);
  if (v6 == 46)
  {
    v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) + 4);
    v35 = *(_QWORD *)(a1 + 8);
    if (v34 < 0 && (v34 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v35 + 432))
      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 424) + 8 * (v34 & 0x7FFFFFFF));
    else
      v36 = 0;
    v37 = sub_1C554C050(v34, v35);
    if (v38)
    {
      if (!v37)
        return v33;
      v39 = *(_QWORD *)(a1 + 16);
      v51 = v36;
      LODWORD(v52) = 0;
      sub_1C5544694(v39, &v51, -v37);
    }
    else
    {
      v42 = *(_QWORD *)(a1 + 16);
      v49 = v36;
      v50 = 0;
      v43 = sub_1C5544694(v42, &v49, 0);
      v56 = v36;
      v57 = 0;
      v51 = v43;
      v52 = v44;
      v53 = 1;
      v54 = v34;
      v55 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 46, &v56, 1, &v51, 2, 0);
    }
LABEL_55:
    *(_QWORD *)(a1 + 72) = v40;
  }
  return v33;
}

_QWORD *sub_1C492C26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;

  v6 = (char **)(a1 + 96);
  v5 = *(_QWORD **)(a1 + 96);
  v7 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v7)
  {
    v8 = 40 * v7;
    while (*v5 != a3)
    {
      v5 += 5;
      v8 -= 40;
      if (!v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_1C54EB4A0(a2, (const char *)*(unsigned int *)(*(_QWORD *)(a3 + 32) + 4), (uint64_t)&v26);
    v9 = *(_DWORD *)(a1 + 104);
    if (v9 >= *(_DWORD *)(a1 + 108))
    {
      v30 = 0;
      v12 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v6, 0, 40, &v30);
      v13 = &v12[40 * *(unsigned int *)(a1 + 104)];
      *(_QWORD *)v13 = a3;
      *((_DWORD *)v13 + 4) = v27;
      *((_QWORD *)v13 + 1) = v26;
      v27 = 0;
      *((_DWORD *)v13 + 8) = v29;
      *((_QWORD *)v13 + 3) = v28;
      v29 = 0;
      v14 = *(char **)(a1 + 96);
      v15 = *(_DWORD *)(a1 + 104);
      if (v15)
      {
        v16 = &v14[40 * v15];
        v17 = v12;
        do
        {
          *(_QWORD *)v17 = *(_QWORD *)v14;
          *((_DWORD *)v17 + 4) = *((_DWORD *)v14 + 4);
          *((_QWORD *)v17 + 1) = *((_QWORD *)v14 + 1);
          *((_DWORD *)v14 + 4) = 0;
          *((_DWORD *)v17 + 8) = *((_DWORD *)v14 + 8);
          *((_QWORD *)v17 + 3) = *((_QWORD *)v14 + 3);
          *((_DWORD *)v14 + 8) = 0;
          v14 += 40;
          v17 += 40;
        }
        while (v14 != v16);
        v14 = *(char **)(a1 + 96);
        v18 = *(unsigned int *)(a1 + 104);
        if ((_DWORD)v18)
        {
          v19 = 40 * v18;
          do
          {
            v20 = &v14[v19];
            if (*(_DWORD *)&v14[v19 - 8] >= 0x41u)
            {
              v22 = *((_QWORD *)v20 - 2);
              if (v22)
              {
                v25 = v14;
                MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
                v14 = v25;
              }
            }
            if (*((_DWORD *)v20 - 6) >= 0x41u)
            {
              v23 = *((_QWORD *)v20 - 4);
              if (v23)
              {
                v24 = v14;
                MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
                v14 = v24;
              }
            }
            v19 -= 40;
          }
          while (v19);
          v14 = *v6;
        }
      }
      v21 = v30;
      if (v14 != (char *)(a1 + 112))
        free(v14);
      *(_QWORD *)(a1 + 96) = v12;
      ++*(_DWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 108) = v21;
      if (v29 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 96) + 40 * v9;
      *(_QWORD *)v10 = a3;
      *(_DWORD *)(v10 + 16) = v27;
      *(_QWORD *)(v10 + 8) = v26;
      v27 = 0;
      *(_DWORD *)(v10 + 32) = v29;
      *(_QWORD *)(v10 + 24) = v28;
      v29 = 0;
      ++*(_DWORD *)(a1 + 104);
    }
    if (v27 >= 0x41 && v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 40 * *(unsigned int *)(a1 + 104) - 40);
  }
  return v5 + 1;
}

void sub_1C492C50C(uint64_t a1, char *a2, BOOL *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  int v32;
  void *__s2;
  unsigned int v34;

  v6 = *(unsigned int *)(a1 + 24);
  if (v6 > 0x40)
  {
    v7 = (char *)operator new[]();
    memcpy(v7, *(const void **)(a1 + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v7 = *(char **)(a1 + 16);
  }
  v8 = *(unsigned int *)(a1 + 8);
  v32 = v8;
  if (v8 > 0x40)
  {
    v11 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v31 = (void *)operator new[]();
    memcpy(v31, *(const void **)a1, v11);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v31);
    LODWORD(v8) = v32;
    v10 = v31;
  }
  else
  {
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v9 = 0;
    v10 = (void *)(v9 & ~*(_QWORD *)a1);
    v31 = v10;
  }
  v34 = v8;
  __s2 = v10;
  v32 = 0;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v12 = v34;
  v13 = (char *)__s2;
  v34 = 0;
  if (v6 > 0x40)
    v14 = memcmp(v7, __s2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v14 = v7 == __s2;
  v15 = v14;
  *a2 = v15;
  v30 = *(_DWORD *)(a1 + 8);
  if (v30 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, 0, 0);
  else
    v29 = 0;
  if (v6 > 0x40)
  {
    v16 = v29;
    v17 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    while (v17)
    {
      v18 = *(_QWORD *)&v7[v17 - 8];
      v19 = *(_QWORD *)(v29 + v17 - 8);
      v17 -= 8;
      if (v18 != v19)
      {
        if (v18 <= v19)
          goto LABEL_19;
        break;
      }
    }
  }
  else
  {
    v16 = v29;
    if ((unint64_t)v7 < v29)
    {
LABEL_19:
      *a3 = 0;
      goto LABEL_34;
    }
  }
  v20 = *(_DWORD *)(a1 + 8);
  v28 = v20;
  if (v20 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v27, 65520, 0);
    v20 = v28;
  }
  else
  {
    v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    if (!v20)
      LOWORD(v21) = 0;
    v27 = (unsigned __int16)v21 & 0xFFF0;
  }
  if (v12 > 0x40)
  {
    v22 = v27;
    v23 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    while (v23)
    {
      v25 = *(_QWORD *)&v13[v23 - 8];
      v26 = *(_QWORD *)(v27 + v23 - 8);
      v23 -= 8;
      if (v25 != v26)
      {
        if (v25 > v26)
          LODWORD(v23) = 1;
        else
          LODWORD(v23) = -1;
        break;
      }
    }
  }
  else
  {
    v22 = v27;
    LODWORD(v23) = (unint64_t)v13 > v27;
    if ((unint64_t)v13 < v27)
      LODWORD(v23) = -1;
  }
  *a3 = (int)v23 < 1;
  if (v20 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
LABEL_34:
  if (v30 >= 0x41 && v16 != 0)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  if (v12 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  if (v6 >= 0x41)
  {
    if (v7)
      MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  }
}

uint64_t sub_1C492C818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6, unsigned int a7)
{
  unint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  unint64_t v35;
  void *v36;
  unsigned int v37;
  const void **v38;
  const void **v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  const void **v44;
  const void **v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  unsigned int v50;
  char *v51;
  void **v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  _BOOL4 v59;
  unsigned int v60;
  _QWORD *v61;
  char **v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  void **v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  _BOOL4 v79;
  int v80;
  int v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  unsigned int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  BOOL v112;
  uint64_t v113;
  char v114;
  int v115;
  uint64_t v116;
  void *v117;
  int v118;
  const char *v119;
  unint64_t v120;
  const char *v121;
  unint64_t v122;
  uint64_t *v123;
  const char *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (**v130)();
  const char *v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  size_t v157;
  void *v158;
  const void *v159;
  void *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char v165;
  int v166;
  unint64_t v167;
  char *__src;
  char *__s1;
  void *__s1a;
  void *__s1b;
  int __s1c;
  int __s1d;
  char *v174;
  void *v175;
  void *v176;
  unsigned int v177;
  void *__s2;
  unsigned int v179;
  __int16 v180;
  void *__dst;
  unsigned int v182;
  void *v183;
  unsigned int v184;
  void *v185;
  unsigned int v186;
  void *v187;
  unsigned int v188;
  void (**v189)();
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  int v193;
  _QWORD v194[8];
  int v195;
  uint64_t v196;
  _QWORD *v197;
  unsigned int v198;
  char *v199;
  unsigned int v200;
  char *v201;
  unsigned int v202;
  int v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v174 = a5;
  *(_QWORD *)(a1 + 40) = a4;
  v10 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 81) = a7;
  if ((*(_DWORD *)(a1 + 84) & 0xFFFEFFFF) != 2)
  {
    v28 = sub_1C492BDEC(a1, *(_QWORD *)a1, a6);
    goto LABEL_164;
  }
  v11 = a2;
  v12 = *(_QWORD *)a1;
  v182 = 1;
  __dst = 0;
  v184 = 1;
  v183 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 32);
  v191 = v194;
  v192 = 4;
  v193 = 0;
  v189 = (void (**)())off_1E816DB00;
  v190 = v194;
  v194[4] = v13;
  v194[5] = *(_QWORD *)(v13 + 40);
  v194[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 16) + 120))(*(_QWORD *)(v13 + 16));
  v194[7] = *(_QWORD *)(*(_QWORD *)v13 + 40) + 272;
  v195 = 16;
  v196 = 1;
  v14 = &v197;
  for (i = 15; i != 95; i += 5)
    LODWORD((&v189)[i]) = -1;
  v16 = sub_1C492C26C(a1, (uint64_t)&v189, *(_QWORD *)(a1 + 88));
  v17 = v16;
  v18 = *((_DWORD *)v16 + 2);
  if (v18 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&__dst, v18);
    if (v182 <= 0x40)
      __dst = (void *)*v17;
    else
      memcpy(__dst, (const void *)*v17, (((unint64_t)v182 + 63) >> 3) & 0x3FFFFFF8);
    v19 = v17 + 2;
    if (v184 > 0x40)
      goto LABEL_94;
  }
  else
  {
    v19 = v16 + 2;
    __dst = (void *)*v16;
    v182 = v18;
  }
  v20 = *((_DWORD *)v17 + 6);
  if (v20 <= 0x40)
  {
    v183 = (void *)*v19;
    v184 = v20;
    goto LABEL_8;
  }
LABEL_94:
  llvm::APInt::reallocate((uint64_t)&v183, *((_DWORD *)v19 + 2));
  if (v184 <= 0x40)
    v183 = (void *)*v19;
  else
    memcpy(v183, (const void *)*v19, (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8);
LABEL_8:
  v180 = 0;
  sub_1C492C50C((uint64_t)&__dst, (char *)&v180 + 1, (BOOL *)&v180);
  if (HIBYTE(v180) && *(_QWORD *)(a1 + 88) != v12)
  {
    v21 = sub_1C492C26C(a1, (uint64_t)&v189, v12);
    v22 = v21;
    v23 = *((_DWORD *)v21 + 2);
    if (v182 > 0x40 || v23 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v23);
      if (v182 <= 0x40)
        __dst = (void *)*v22;
      else
        memcpy(__dst, (const void *)*v22, (((unint64_t)v182 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __dst = (void *)*v21;
      v182 = v23;
    }
    v24 = *((_DWORD *)v22 + 6);
    if (v184 > 0x40 || v24 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v183, v24);
      if (v184 <= 0x40)
        v183 = (void *)v22[2];
      else
        memcpy(v183, (const void *)v22[2], (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v183 = (void *)v22[2];
      v184 = v24;
    }
    sub_1C492C50C((uint64_t)&__dst, (char *)&v180 + 1, (BOOL *)&v180);
  }
  if ((*(_BYTE *)(a1 + 86) & 1) == 0)
    goto LABEL_127;
  v25 = *(_QWORD *)(a1 + 88);
  if (v25 == v12)
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    sub_1C492BDEC(a1, v25, a6);
    v27 = *(_QWORD *)(a1 + 64);
    v26 = *(_QWORD *)(a1 + 72);
    *(_BYTE *)(a1 + 272) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 80) = 0;
  }
  v29 = sub_1C492BDEC(a1, v12, a6);
  v30 = v29;
  if (*(_QWORD *)(a1 + 88) == v12)
  {
    v27 = *(_QWORD *)(a1 + 64);
    v26 = *(_QWORD *)(a1 + 72);
  }
  if ((v29 | a7) != 1)
    goto LABEL_127;
  if (HIBYTE(v180))
  {
    v31 = 0;
    *(_BYTE *)(a1 + 272) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    goto LABEL_128;
  }
  if (!(_BYTE)v180)
  {
    v38 = (const void **)sub_1C492C26C(a1, (uint64_t)&v189, v27);
    v39 = v38;
    v40 = *((unsigned int *)v38 + 2);
    v200 = v40;
    if (v40 > 0x40)
    {
      __s1a = (void *)(((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8);
      v41 = (char *)operator new[]();
      memcpy(v41, *v39, (size_t)__s1a);
    }
    else
    {
      v41 = (char *)*v38;
    }
    v199 = v41;
    v42 = *((unsigned int *)v39 + 6);
    v202 = v42;
    if (v42 > 0x40)
    {
      __s1b = (void *)(((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
      v43 = (void *)operator new[]();
      memcpy(v43, v39[2], (size_t)__s1b);
    }
    else
    {
      v43 = (void *)v39[2];
    }
    v201 = (char *)v43;
    v44 = (const void **)sub_1C492C26C(a1, (uint64_t)&v189, v26);
    v45 = v44;
    v46 = *((unsigned int *)v44 + 2);
    v186 = v46;
    if (v46 > 0x40)
    {
      v157 = ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8;
      __s1c = v46;
      v47 = (char *)operator new[]();
      memcpy(v47, *v45, v157);
      LODWORD(v46) = __s1c;
    }
    else
    {
      v47 = (char *)*v44;
    }
    v185 = v47;
    v48 = *((unsigned int *)v45 + 6);
    v188 = v48;
    if (v48 > 0x40)
    {
      __s1d = v46;
      v158 = (void *)operator new[]();
      v159 = v45[2];
      v160 = v158;
      memcpy(v158, v159, ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8);
      v49 = v160;
      LODWORD(v46) = __s1d;
    }
    else
    {
      v49 = (void *)v45[2];
    }
    v187 = v49;
    v50 = v200;
    v51 = &v199[8 * ((v200 - 1) >> 6)];
    if (v200 < 0x41)
      v51 = (char *)&v199;
    if (((*(_QWORD *)v51 >> (v200 - 1)) & 1) == 0)
      goto LABEL_77;
    v52 = (void **)&v47[8 * ((v46 - 1) >> 6)];
    if (v46 < 0x41)
      v52 = &v185;
    if ((((unint64_t)*v52 >> (v46 - 1)) & 1) != 0)
    {
      v31 = 1;
    }
    else
    {
      if (*(_QWORD *)(a1 + 88) == v12)
        goto LABEL_79;
LABEL_77:
      v60 = v46;
      v61 = sub_1C492C26C(a1, (uint64_t)&v189, *(_QWORD *)(a1 + 64));
      v62 = (char **)v61;
      v63 = *((_DWORD *)v61 + 2);
      if (v50 > 0x40 || v63 > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&v199, v63);
        if (v200 <= 0x40)
          v199 = *v62;
        else
          memcpy(v199, *v62, (((unint64_t)v200 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v199 = (char *)*v61;
        v200 = v63;
      }
      v64 = *((_DWORD *)v62 + 6);
      if (v202 > 0x40 || v64 > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&v201, v64);
        if (v202 <= 0x40)
          v201 = v62[2];
        else
          memcpy(v201, v62[2], (((unint64_t)v202 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v201 = v62[2];
        v202 = v64;
      }
      v65 = sub_1C492C26C(a1, (uint64_t)&v189, *(_QWORD *)(a1 + 72));
      v66 = v65;
      v67 = *((_DWORD *)v65 + 2);
      if (v60 > 0x40 || v67 > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&v185, v67);
        if (v186 <= 0x40)
          v185 = (void *)*v66;
        else
          memcpy(v185, (const void *)*v66, (((unint64_t)v186 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v185 = (void *)*v65;
        v186 = v67;
      }
      LODWORD(v48) = *((_DWORD *)v66 + 6);
      if (v188 > 0x40 || v48 > 0x40)
      {
        llvm::APInt::reallocate((uint64_t)&v187, *((_DWORD *)v66 + 6));
        LODWORD(v48) = v188;
        if (v188 <= 0x40)
        {
          v49 = (void *)v66[2];
          v187 = v49;
        }
        else
        {
          v156 = v187;
          memcpy(v187, (const void *)v66[2], (((unint64_t)v188 + 63) >> 3) & 0x3FFFFFF8);
          v49 = v156;
        }
      }
      else
      {
        v49 = (void *)v66[2];
        v187 = v49;
        v188 = v48;
      }
      v68 = (char *)&v199;
      if (v200 >= 0x41)
        v68 = &v199[8 * ((v200 - 1) >> 6)];
      if (((*(_QWORD *)v68 >> (v200 - 1)) & 1) == 0)
        goto LABEL_79;
      v69 = v186 - 1;
      v70 = &v185;
      if (v186 >= 0x41)
        v70 = (void **)((char *)v185 + 8 * (v69 >> 6));
      if ((((unint64_t)*v70 >> v69) & 1) != 0)
      {
        v31 = 1;
      }
      else
      {
LABEL_79:
        v31 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 272) = 0;
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 80) = 0;
      }
    }
    if (v48 >= 0x41 && v49)
      MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
    if (v186 >= 0x41 && v185)
      MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
    if (v202 >= 0x41 && v201)
      MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
    if (v200 >= 0x41 && v199)
      MEMORY[0x1CAA32F9C](v199, 0x1000C8000313F17);
    if ((v30 & 1) == 0)
      goto LABEL_128;
LABEL_126:
    v28 = 1;
    goto LABEL_146;
  }
  sub_1C54EB4A0((uint64_t)&v189, (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 4), (uint64_t)&v199);
  v32 = v200;
  v33 = (char *)v202;
  v167 = (unint64_t)v199;
  __src = v201;
  __s1 = v201;
  if (v202 >= 0x41)
  {
    v34 = (((unint64_t)v202 + 63) >> 3) & 0x3FFFFFF8;
    __s1 = (char *)operator new[]();
    memcpy(__s1, __src, v34);
  }
  v177 = v32;
  if (v32 > 0x40)
  {
    v176 = (void *)operator new[]();
    memcpy(v176, (const void *)v167, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v176);
    v37 = v177;
    v36 = v176;
  }
  else
  {
    if ((_DWORD)v32)
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
    else
      v35 = 0;
    v36 = (void *)(v35 & ~v167);
    v176 = v36;
    v37 = v32;
  }
  v179 = v37;
  __s2 = v36;
  v177 = 0;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v53 = v179;
  v54 = (char *)__s2;
  v179 = 0;
  if (v33 > 0x40)
  {
    v55 = (char *)__s2;
    v56 = v53;
    v57 = memcmp(__s1, __s2, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8);
    v53 = v56;
    v14 = &v197;
    v54 = v55;
    if (!v57)
    {
LABEL_115:
      v30 = 0;
      *(_BYTE *)(a1 + 272) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 80) = 0;
      goto LABEL_116;
    }
  }
  else if (__s1 == __s2)
  {
    goto LABEL_115;
  }
  v200 = v32;
  if (v32 > 0x40)
  {
    v151 = v54;
    v152 = v53;
    llvm::APInt::initSlowCase((llvm::APInt *)&v199, 0, 0);
    v53 = v152;
    v14 = &v197;
    v54 = v151;
  }
  else
  {
    v199 = 0;
  }
  if (v33 > 0x40)
  {
    v71 = v53;
    v72 = v54;
    v58 = v199;
    v73 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
    while (v73)
    {
      v74 = *(_QWORD *)&__s1[v73 - 8];
      v75 = *(_QWORD *)&v199[v73 - 8];
      v73 -= 8;
      if (v74 != v75)
      {
        if (v74 <= v75)
        {
          v59 = 1;
          v54 = v72;
          LODWORD(v53) = v71;
          goto LABEL_109;
        }
        break;
      }
    }
    v54 = v72;
    v53 = v71;
  }
  else
  {
    v58 = v199;
    if (__s1 < v199)
    {
      v59 = 1;
      goto LABEL_109;
    }
  }
  v186 = v32;
  if (v32 > 0x40)
  {
    v164 = v58;
    v165 = v30;
    v153 = (unint64_t)v54;
    v154 = v53;
    llvm::APInt::initSlowCase((llvm::APInt *)&v185, 65520, 0);
    if (v154 > 0x40)
    {
      v155 = v185;
      v161 = ((unint64_t)(v154 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v161)
        {
          v80 = 0;
          goto LABEL_226;
        }
        v162 = *(_QWORD *)(v153 - 8 + v161);
        v163 = *(_QWORD *)((char *)v185 + v161 - 8);
        v161 -= 8;
      }
      while (v162 == v163);
      if (v162 > v163)
        v80 = 1;
      else
        v80 = -1;
    }
    else
    {
      v155 = v185;
      if (v153 < (unint64_t)v185)
        v80 = -1;
      else
        v80 = v153 > (unint64_t)v185;
    }
LABEL_226:
    if (v186 >= 0x41 && v155)
      MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
    v54 = (char *)v153;
    v30 = v165;
    LODWORD(v53) = v154;
    v58 = v164;
    v14 = &v197;
  }
  else
  {
    v76 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
    if (!(_DWORD)v32)
      LOWORD(v76) = 0;
    v77 = (unsigned __int16)v76 & 0xFFF0;
    if (v53 > 0x40)
    {
      v144 = v53;
      v145 = v77 - 8;
      v146 = ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8;
      v147 = v54;
      v148 = v54 - 8;
      do
      {
        if (!v146)
        {
          v80 = 0;
          goto LABEL_220;
        }
        v149 = *(_QWORD *)&v148[v146];
        v150 = *(_QWORD *)(v145 + v146);
        v146 -= 8;
      }
      while (v149 == v150);
      if (v149 > v150)
        v80 = 1;
      else
        v80 = -1;
LABEL_220:
      v54 = v147;
      LODWORD(v53) = v144;
    }
    else
    {
      v78 = (unint64_t)v54 >= v77;
      v79 = (unint64_t)v54 > v77;
      if (v78)
        v80 = v79;
      else
        v80 = -1;
    }
  }
  v59 = v80 > 0;
LABEL_109:
  if (v200 >= 0x41 && v58 != 0)
  {
    v166 = v32;
    v82 = (int)v33;
    v33 = v54;
    v83 = v53;
    MEMORY[0x1CAA32F9C]();
    LODWORD(v53) = v83;
    v14 = &v197;
    v54 = v33;
    LODWORD(v33) = v82;
    LODWORD(v32) = v166;
  }
  if (v59)
    goto LABEL_115;
LABEL_116:
  if (v53 >= 0x41 && v54)
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  if (v33 >= 0x41)
  {
    if (__s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v32 >= 0x41 && v167)
    MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
  if ((v30 & 1) != 0)
    goto LABEL_126;
LABEL_127:
  v31 = 0;
LABEL_128:
  if (HIBYTE(v180) || ((_BYTE)v180 ? (v84 = 1) : (v84 = v31), (v84 & 1) == 0))
  {
    v87 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
    if (v87 < 0 && (v88 = *(_QWORD *)(a1 + 8), (v87 & 0x7FFFFFFFu) < *(_DWORD *)(v88 + 432)))
      v89 = *(void **)(*(_QWORD *)(v88 + 424) + 8 * (v87 & 0x7FFFFFFF));
    else
      v89 = 0;
    v175 = v89;
    v91 = sub_1C4825F50((unint64_t *)&v175);
    if ((_DWORD)v90 == 1)
    v92 = *(_QWORD *)(a1 + 16);
    v93 = (char *)((8 * v91) | 1);
    v199 = v93;
    v200 = 0;
    sub_1C5544694(v92, (unint64_t *)&v199, 16);
    v95 = *(_DWORD *)(*(_QWORD *)(v94 + 32) + 4);
    if ((v175 & 1) == 0)
    {
      v96 = *(uint64_t **)(a1 + 16);
      v185 = v93;
      v186 = 0;
      LODWORD(v199) = v87;
      LODWORD(v201) = 0;
      sub_1C5546EF4(v96, (uint64_t *)&v185, (int *)&v199);
      v87 = *(_DWORD *)(*(_QWORD *)(v97 + 32) + 4);
    }
    v98 = *(_QWORD *)(a1 + 16);
    v185 = v93;
    v186 = 0;
    LODWORD(v199) = v87;
    LODWORD(v201) = 0;
    v202 = v95;
    v203 = 0;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, char **, uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 45, &v185, 1, &v199, 2, 0);
    *(_QWORD *)(a1 + 64) = v99;
    if ((v175 & 1) == 0)
    {
      v100 = *(uint64_t **)(a1 + 16);
      v185 = v175;
      v186 = 0;
      LODWORD(v199) = *(_DWORD *)(*(_QWORD *)(v99 + 32) + 4);
      LODWORD(v201) = 0;
      sub_1C5546EF4(v100, (uint64_t *)&v185, (int *)&v199);
      *(_QWORD *)(a1 + 64) = v101;
    }
    v85 = *(_QWORD *)(a1 + 16);
    v199 = *(char **)(a1 + 40);
    v200 = 0;
    v86 = -16 >> v11;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v12;
    v85 = *(_QWORD *)(a1 + 16);
    v199 = *(char **)(a1 + 40);
    v200 = 0;
    v86 = 0;
  }
  sub_1C5544694(v85, (unint64_t *)&v199, v86);
  v28 = 0;
  *(_QWORD *)(a1 + 72) = v102;
LABEL_146:
  v189 = (void (**)())off_1E816DB00;
  v103 = v196;
  if ((v196 & 1) != 0)
  {
    v104 = 16;
    goto LABEL_148;
  }
  v104 = v198;
  if (v198)
  {
    v14 = v197;
LABEL_148:
    v105 = v14 + 2;
    v106 = 40 * v104;
    do
    {
      if (*((_DWORD *)v105 - 4) <= 0xFFFFFFFD)
      {
        if (*((_DWORD *)v105 + 4) >= 0x41u)
        {
          v108 = v105[1];
          if (v108)
            MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v105 >= 0x41u)
        {
          v107 = *(v105 - 1);
          if (v107)
            MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
        }
      }
      v105 += 5;
      v106 -= 40;
    }
    while (v106);
    v103 = v196;
  }
  if ((v103 & 1) == 0)
    MEMORY[0x1CAA32FB4](v197, 8);
  v189 = off_1E7FA1810;
  if (v191 != v190)
    free(v191);
  if (v184 >= 0x41 && v183)
    MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
  if (v182 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
LABEL_164:
  v109 = v28 | a7;
  if ((_DWORD)v109 == 1)
  {
    v110 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 4), *(_QWORD *)(a1 + 8));
    if (v111)
      v112 = v110 == 0;
    else
      v112 = 0;
    if (v112)
      *(_BYTE *)(a1 + 272) = 1;
    v113 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) + 4), *(_QWORD *)(a1 + 8));
    if (v114)
      *(_BYTE *)(a1 + 48) = v113 == (__int16)v113;
    v115 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 32) + 4);
    if (v115 < 0 && (v116 = *(_QWORD *)(a1 + 8), (v115 & 0x7FFFFFFFu) < *(_DWORD *)(v116 + 432)))
      v117 = *(void **)(*(_QWORD *)(v116 + 424) + 8 * (v115 & 0x7FFFFFFF));
    else
      v117 = 0;
    v118 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) + 4);
    __dst = v117;
    v120 = sub_1C4825F50((unint64_t *)&__dst);
    if ((_DWORD)v119 == 1)
    v122 = sub_1C4825F50((unint64_t *)&v174);
    if ((_DWORD)v121 == 1)
    if (v120 > v122)
    {
      if (((unint64_t)__dst & 0xFFFFFFFFFFFFFFF9) != 0 && (__dst & 6) == 2)
      {
        v123 = *(uint64_t **)(a1 + 16);
        v125 = sub_1C4825F50((unint64_t *)&__dst);
        if ((_DWORD)v124 == 1)
        v199 = (char *)((8 * v125) | 1);
        v200 = 0;
        LODWORD(v189) = v115;
        LODWORD(v191) = 0;
        sub_1C5546EF4(v123, (uint64_t *)&v199, (int *)&v189);
        v115 = *(_DWORD *)(*(_QWORD *)(v126 + 32) + 4);
      }
      v127 = *(_QWORD *)(a1 + 16);
      v199 = v174;
      v200 = 0;
      LODWORD(v189) = v115;
      LODWORD(v191) = 0;
      (*(void (**)(uint64_t, uint64_t, char **, uint64_t, void (***)(), uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 119, &v199, 1, &v189, 1, 0);
      *(_QWORD *)(a1 + 64) = v128;
    }
    if (!*(_BYTE *)(a1 + 48))
    {
      if (v118 < 0
        && (v129 = *(_QWORD *)(a1 + 8), (v118 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v129 + 432)))
      {
        v130 = *(void (***)())(*(_QWORD *)(v129 + 424) + 8 * (v118 & 0x7FFFFFFF));
      }
      else
      {
        v130 = 0;
      }
      v189 = v130;
      v132 = sub_1C4825F50((unint64_t *)&v189);
      if ((_DWORD)v131 == 1)
      v134 = sub_1C4825F50(v10);
      if ((_DWORD)v133 == 1)
      if (v132 > v134)
      {
        if (v118 < 0
          && (v135 = *(_QWORD *)(a1 + 8), (v118 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v135 + 432))
          && ((v136 = *(_QWORD *)(*(_QWORD *)(v135 + 424) + 8 * (v118 & 0x7FFFFFFF)),
               v137 = v136 & 0xFFFFFFFFFFFFFFF9,
               v138 = v136 & 6,
               v137)
            ? (v139 = v138 == 2)
            : (v139 = 0),
              v139))
        {
          v143 = *(uint64_t **)(a1 + 16);
          v199 = *(char **)(a1 + 40);
          v200 = 0;
          LODWORD(v189) = v118;
          LODWORD(v191) = 0;
          sub_1C5546EF4(v143, (uint64_t *)&v199, (int *)&v189);
        }
        else
        {
          v140 = *(_QWORD *)(a1 + 16);
          v199 = *(char **)(a1 + 40);
          v200 = 0;
          LODWORD(v189) = v118;
          LODWORD(v191) = 0;
          (*(void (**)(uint64_t, uint64_t, char **, uint64_t, void (***)(), uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 119, &v199, 1, &v189, 1, 0);
        }
        *(_QWORD *)(a1 + 72) = v141;
      }
    }
  }
  return v109;
}

uint64_t sub_1C492DAE4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 45 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  v9 = sub_1C554C050(*(_DWORD *)(v8 + 68), a2);
  if (v10)
  {
    **(_QWORD **)(a1 + 8) = v9;
    return 1;
  }
  v11 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v7 + 32) + 36), a2);
  if (!v12)
    return 0;
  v13 = *(_DWORD **)a1;
  **(_QWORD **)(a1 + 8) = v11;
  *v13 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 68);
  return 1;
}

uint64_t sub_1C492DBE0()
{
  return 0;
}

uint64_t sub_1C492DBE8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 56); i != a2 + 48; i = *(_QWORD *)(i + 8))
  {
    if (!i || (*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return 0;
}

uint64_t sub_1C492DC24()
{
  return 1;
}

void sub_1C492DC2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v7;

  v7 = dword_1C66095A8[a4];
  *a5 = dword_1C6609594[a4];
  *a6 = 0;
  *a7 = v7;
}

uint64_t sub_1C492DC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;

  v3 = *(unsigned __int16 **)(a2 + 16);
  if ((v3[8] & 0x10) == 0)
    return 0;
  v6 = *v3;
  if (sub_1C485BBD0(v6) != 1)
    return 0;
  v7 = v6 - 3922;
  v8 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00;
  if ((v6 - 3922) >= 0xFFFFFFA0)
  {
    *(_DWORD *)(a3 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v8 |= 1u;
    *(_DWORD *)(a3 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a3 + 32) = *(unsigned int *)(v9 + 100) | ((unint64_t)*(unsigned int *)(v9 + 120) << 32);
  }
  *(_QWORD *)a3 = a2;
  if (*(_BYTE *)(v9 + 64) != 7)
    return 0;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v9 + 68);
  *(_DWORD *)(a3 + 28) = 0;
  v10 = **(unsigned __int16 **)(a2 + 16);
  v11 = 0x2000;
  v12 = v10 + 14;
  if ((v10 - 3826) > 0x3B)
    goto LABEL_10;
  if (((1 << v12) & 0x3F00000000003FLL) != 0)
  {
LABEL_11:
    v11 = 4096;
    goto LABEL_12;
  }
  if (((1 << v12) & 0xFC0000000000FC0) == 0)
  {
LABEL_10:
    if (((1 << (v10 - 82)) & 0x3F00000000003FLL) != 0)
      goto LABEL_11;
  }
LABEL_12:
  v13 = v11 | v8 & 0xFFFF00FF;
  *(_DWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 8 * (v7 < 0xFFFFFFA0) + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                                                             + 32
                                                             * sub_1C4B138B4(**(unsigned __int16 **)(a2 + 16))
                                                             + 16);
  if (v7 >= 0xFFFFFFA0)
    v14 = 0x10000;
  else
    v14 = 0x20000;
  *(_DWORD *)(a3 + 24) = v13 & 0xFF0030FF | v14;
  v15 = sub_1C4B138B4(v6);
  if (v15 != -1)
  {
    v16 = *(_QWORD *)(a2 + 32) + 32 * v15;
    if (*(_BYTE *)v16 == 1)
    {
      v17 = 0;
      *(_DWORD *)(a3 + 8) = *(_QWORD *)(v16 + 16);
    }
    else
    {
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v16 + 4);
      *(_DWORD *)(a3 + 12) = (*(_DWORD *)v16 >> 8) & 0xFFF;
      v17 = 1;
    }
    *(_BYTE *)(a3 + 16) = v17;
  }
  return 1;
}

__int16 ***sub_1C492DE24(uint64_t a1, int a2, int a3)
{
  __int16 ****v3;

  v3 = (__int16 ****)off_1E7FA36A8;
  if (a3 == 16)
    v3 = &off_1E7FA3690;
  return v3[a2 - 2];
}

void *sub_1C492DE48(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 25) << 8 == 4096)
    return &unk_1C66092D4;
  else
    return &unk_1C6609314;
}

uint64_t sub_1C492DE6C(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  v7 = *(_QWORD *)a2;
  switch(**(_WORD **)(*(_QWORD *)a2 + 16))
  {
    case 0xF52:
      goto LABEL_16;
    case 0xF53:
      v8 = (unsigned int *)&unk_1C6609444;
      break;
    case 0xF54:
      v8 = (unsigned int *)&unk_1C6609504;
      break;
    case 0xF55:
      v8 = (unsigned int *)&unk_1C6609390;
      break;
    case 0xF56:
      v8 = (unsigned int *)&unk_1C6609450;
      break;
    case 0xF57:
      v8 = (unsigned int *)&unk_1C6609510;
      break;
    case 0xF58:
      v8 = (unsigned int *)&unk_1C660939C;
      break;
    case 0xF59:
      v8 = (unsigned int *)&unk_1C660945C;
      break;
    case 0xF5A:
      v8 = (unsigned int *)&unk_1C660951C;
      break;
    case 0xF5B:
      v8 = (unsigned int *)&unk_1C66093A8;
      break;
    case 0xF5C:
      v8 = (unsigned int *)&unk_1C6609468;
      break;
    case 0xF5D:
      v8 = (unsigned int *)&unk_1C6609528;
      break;
    case 0xF5E:
    case 0xF5F:
    case 0xF60:
    case 0xF61:
    case 0xF62:
    case 0xF63:
    case 0xF64:
    case 0xF65:
    case 0xF66:
    case 0xF67:
    case 0xF68:
    case 0xF69:
    case 0xF6A:
    case 0xF6B:
    case 0xF6C:
    case 0xF6D:
    case 0xF6E:
    case 0xF6F:
    case 0xF70:
    case 0xF71:
    case 0xF72:
    case 0xF73:
    case 0xF74:
    case 0xF75:
    case 0xF76:
    case 0xF77:
    case 0xF78:
    case 0xF79:
    case 0xF7A:
    case 0xF7B:
    case 0xF7C:
    case 0xF7D:
    case 0xF7E:
    case 0xF7F:
    case 0xF80:
    case 0xF81:
      __break(1u);
LABEL_16:
      v8 = (unsigned int *)&unk_1C6609384;
      break;
    case 0xF82:
      v8 = (unsigned int *)&unk_1C66093E4;
      break;
    case 0xF83:
      v8 = (unsigned int *)&unk_1C66094A4;
      break;
    case 0xF84:
      v8 = (unsigned int *)&unk_1C6609564;
      break;
    case 0xF85:
      v8 = (unsigned int *)&unk_1C66093F0;
      break;
    case 0xF86:
      v8 = (unsigned int *)&unk_1C66094B0;
      break;
    case 0xF87:
      v8 = (unsigned int *)&unk_1C6609570;
      break;
    case 0xF88:
      v8 = (unsigned int *)&unk_1C66093FC;
      break;
    case 0xF89:
      v8 = (unsigned int *)&unk_1C66094BC;
      break;
    case 0xF8A:
      v8 = (unsigned int *)&unk_1C660957C;
      break;
    case 0xF8B:
      v8 = (unsigned int *)&unk_1C6609408;
      break;
    case 0xF8C:
      v8 = (unsigned int *)&unk_1C66094C8;
      break;
    case 0xF8D:
      v8 = (unsigned int *)&unk_1C6609588;
      break;
    default:
      __asm { BR              X11 }
      return result;
  }
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a6 + 8) + 48 * v8[a3 - 2];
  v9 = a2[6] & 0xFE;
  result = llvm::MachineOperand::setReg(*(_QWORD *)(v7 + 32), a4);
  **(_DWORD **)(v7 + 32) &= 0xFFF000FF;
  v11 = *(_QWORD *)(v7 + 32);
  if (v9)
  {
    *(_QWORD *)(v11 + 48) = a5;
  }
  else
  {
    *(_DWORD *)(v11 + 68) = a5;
    *(_DWORD *)(v11 + 88) = 0;
  }
  return result;
}

void sub_1C492E0BC()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E0C8()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E0D4()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E0E0()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E0EC()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E0F8()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E104()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E110()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E11C()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E128()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E134()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E140()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E14C()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E158()
{
  JUMPOUT(0x1C492DEB8);
}

void sub_1C492E164()
{
  JUMPOUT(0x1C492DEB8);
}

uint64_t sub_1C492E170()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUIterateCombiner::~GPUIterateCombiner, &off_1EF8EB088, &dword_1C475E000);
}

uint64_t sub_1C492E18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unint64_t v33;
  const char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int GenericVirtualRegister;
  uint64_t v42;
  char v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  *(_OWORD *)(a1 + 12) = 0u;
  v5 = (int *)(a1 + 12);
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  v6 = *(_QWORD *)(a2 + 48);
  if ((v6 & 7) != 0)
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v6 & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 48) = v7;
  v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 == 90)
  {
    v9 = 1;
    *(_DWORD *)(a1 + 8) = 1;
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_19;
    v10 = *(int **)(a2 + 32);
LABEL_18:
    v16 = v10[1];
    *v5 = v16;
    v17 = v10 + 17;
    goto LABEL_22;
  }
  if (v8 == 96)
  {
    v9 = 3;
    *(_DWORD *)(a1 + 8) = 3;
    if (*(_BYTE *)(a1 + 56))
    {
      v10 = *(int **)(a2 + 32);
LABEL_21:
      v16 = v10[17];
      *v5 = v16;
      v17 = v10 + 9;
      v9 = 3;
      goto LABEL_22;
    }
LABEL_19:
    v18 = *(_QWORD *)(a2 + 32);
    v16 = *(_DWORD *)(v18 + 4);
    *v5 = v16;
    v17 = (int *)(v18 + 36);
    goto LABEL_22;
  }
  v11 = *(unsigned int *)(a2 + 40);
  v10 = *(int **)(a2 + 32);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      v14 = *v13;
      v13 += 32;
      if (v14 == 17)
        break;
      if (v11 == ++v12)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    LODWORD(v12) = -1;
  }
  v15 = v10[8 * v12 + 4];
  if (v15 == 2144)
  {
    *(_DWORD *)(a1 + 8) = 3;
    *(_BYTE *)(a1 + 56) = 1;
    goto LABEL_21;
  }
  if (v15 == 2142)
  {
    v9 = 1;
    *(_DWORD *)(a1 + 8) = 1;
    *(_BYTE *)(a1 + 56) = 1;
    goto LABEL_18;
  }
  v35 = *(_WORD *)(v7 + 32);
  if ((v35 & 1) != 0)
    v36 = 2;
  else
    v36 = 5;
  *(_DWORD *)(a1 + 8) = v36;
  v17 = v10 + 33;
  if ((v35 & 1) != 0)
  {
    v16 = v10[1];
    *v5 = v16;
    v9 = 2;
  }
  else
  {
    v16 = v10[25];
    *v5 = v16;
    v9 = 5;
  }
LABEL_22:
  v19 = (unint64_t *)(a1 + 24);
  v20 = *v17;
  *(_DWORD *)(a1 + 20) = v20;
  if (v16 < 0 && (v16 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 432))
    v21 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v16 & 0x7FFFFFFF));
  else
    v21 = 0;
  *v19 = v21;
  if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 432))
    v22 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v20 & 0x7FFFFFFF));
  else
    v22 = 0;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v22;
  switch(v9)
  {
    case 1:
    case 3:
      if ((v21 & 0xFFFFFFFFFFFFFFF9) == 0 || (v21 & 6) != 4)
        goto LABEL_111;
      v23 = 3;
      if ((v21 & 1) == 0)
        v23 = 19;
      if ((v21 & 0x8000000000000000 | (8 * (v21 >> v23))) != 0x40)
        goto LABEL_111;
      if ((v21 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
        v21 = *v19;
      }
      if ((unsigned __int16)(v21 >> 3) > 4u
        || (v46 = (1 << *(_BYTE *)(*(_QWORD *)(a1 + 48) + 34)) | *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8),
            (v46 & -v46) != 1))
      {
LABEL_111:
        v24 = v21;
        v21 = 4194332;
        if (v24 != 4194332)
          goto LABEL_41;
      }
      v25 = *(_QWORD *)(a1 + 40);
      v26 = 35;
      if ((v25 & 4) == 0)
        v26 = 19;
      if (((v25 >> v26) & 0xFFFFFF) != 0x40)
      {
        v37 = 0x800000000000000;
        if ((v21 & 2) == 0)
          v37 = 0x8000000000000;
        if ((v37 & v21) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          v21 = *v19;
        }
        v38 = v21 & 0x7FFF8;
        goto LABEL_83;
      }
      v24 = v21;
LABEL_41:
      if (v24 > 4194323)
      {
        if (v24 > 4194355)
        {
          if (v24 == 4194356)
          {
LABEL_78:
            v39 = 0x800000000000000;
            if ((v24 & 2) == 0)
              v39 = 0x8000000000000;
            if ((v39 & v24) != 0)
            {
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
              v24 = *v19;
            }
            v38 = ((unint64_t)v24 >> 1) & 0x3FFF8;
LABEL_83:
            v21 = v38 | 0x800004;
            goto LABEL_84;
          }
          v27 = 68;
          goto LABEL_77;
        }
        if (v24 != 4194324)
        {
          v27 = 36;
LABEL_77:
          if (v24 == (v27 | 0x400000))
            goto LABEL_78;
          goto LABEL_90;
        }
LABEL_64:
        v21 = 129;
        goto LABEL_84;
      }
      if (v24 == 9 || v24 == 65)
        goto LABEL_64;
      if (v24 == 513)
        goto LABEL_61;
LABEL_90:
      v42 = v24 & 6;
      if ((v24 & 0xFFFFFFFFFFFFFFF9) != 0 && v42 == 4)
      {
        v43 = 3;
        if ((v24 & 1) == 0)
          v43 = 19;
        if ((v24 & 0x8000000000000000 | (8 * ((unint64_t)v24 >> v43))) != 0x200)
          goto LABEL_103;
LABEL_61:
        v33 = sub_1C4825F50((unint64_t *)(a1 + 24));
        if ((_DWORD)v34 == 1)
        {
          v47 = v33;
          v33 = v47;
        }
        v21 = ((v33 >> 2) & 0x7FFF8 | 0x800004) + 0x800000;
        goto LABEL_84;
      }
      if ((v24 & 0xFFFFFFFFFFFFFFF9) != 0 && v42 == 2)
      {
        v44 = sub_1C4825F50((unint64_t *)(a1 + 24));
        if ((_DWORD)v45 == 1)
        {
          v48 = v44;
          v44 = v48;
        }
        v21 = 16777236;
        if (v44 == 32)
          v21 = 257;
        goto LABEL_84;
      }
LABEL_103:
      v21 = *(_QWORD *)(a1 + 32);
LABEL_85:
      if (*v19 == v21)
        GenericVirtualRegister = *v5;
      else
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, v21, "", 0);
      *(_DWORD *)(a1 + 16) = GenericVirtualRegister;
      return a1;
    case 2:
    case 5:
      v28 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v28)
        goto LABEL_49;
      v29 = 0;
      v30 = *(unsigned __int8 **)(a2 + 32);
      while (1)
      {
        v31 = *v30;
        v30 += 32;
        if (v31 == 17)
          break;
        if (v28 == ++v29)
        {
LABEL_49:
          LODWORD(v29) = -1;
          break;
        }
      }
      v32 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v29 + 16);
      if (v32 > 2645)
      {
        if ((v32 - 2646) >= 4)
        {
          if ((v32 - 2650) > 3)
            goto LABEL_85;
          goto LABEL_56;
        }
      }
      else if ((v32 - 2392) >= 4)
      {
        if ((v32 - 2396) >= 4)
          goto LABEL_85;
LABEL_56:
        v21 = 16777244;
        goto LABEL_84;
      }
      v21 = 8388636;
LABEL_84:
      *(_QWORD *)(a1 + 32) = v21;
      goto LABEL_85;
    default:
      goto LABEL_85;
  }
}

uint64_t sub_1C492E6FC(unint64_t *a1)
{
  unint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *a1;
  v2 = 3;
  if ((*a1 & 1) == 0)
    v2 = 19;
  v3 = v1 & 0x8000000000000000 | (8 * (v1 >> v2)) | 1;
  v4 = 35;
  v5 = 19;
  if ((v1 & 4) == 0)
    v4 = 19;
  v6 = v1 >> v4;
  if ((v1 & 4) == 0)
    v5 = 3;
  if ((v1 & 1) != 0)
    v5 = 3;
  v7 = (8 * (unsigned __int16)(v1 >> v5)) & 0xFFFFF8000007FFFFLL | ((v6 & 0xFFFFFF) << 19);
  if ((v1 & 2) != 0)
    return v7 | 2;
  else
    return v3;
}

unint64_t sub_1C492E760(_DWORD *a1, const char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  char v17;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t result;
  const char *v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  const char *v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  const char *v64;
  int v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  char *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v98 = v5;
  v6 = *(_QWORD *)(v3 + 40);
  v7 = 35;
  if ((v6 & 4) == 0)
    v7 = 19;
  v8 = (v6 >> v7) & 0xFFFFFF;
  a1[12] = v8;
  v9 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v9 + 24);
  v10 = (unint64_t *)(v9 + 24);
  if ((v11 & 0xFFFFFFFFFFFFFFF9) == 0)
    goto LABEL_8;
  v12 = sub_1C4825F50(v10) + 7;
  if ((_DWORD)a2 == 1)
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 8)
  {
LABEL_8:
    v14 = (v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (v4 & 4) == 0;
    if (v14)
      goto LABEL_33;
    v15 = (v5 & 0xFFFFFFFFFFFFFFF9) == 0 || (v5 & 4) == 0;
    if (v15 || (v4 & 2) != 0)
      goto LABEL_33;
    v17 = 3;
    if ((v4 & 1) == 0)
      v17 = 19;
    if ((v4 & 0x8000000000000000 | (8 * (v4 >> v17))) != 0x40 || (v5 & 2) != 0)
      goto LABEL_33;
    v19 = 3;
    if ((v5 & 1) == 0)
      v19 = 19;
    if ((v5 & 0x8000000000000000 | (8 * (v5 >> v19))) != 0x80)
    {
LABEL_33:
      v13 = 0;
      goto LABEL_34;
    }
    if ((v4 & 0x8000000000000) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
      if ((v5 & 0x8000000000000) == 0)
        goto LABEL_32;
    }
    else if ((v5 & 0x8000000000000) == 0)
    {
LABEL_32:
      v13 = (unsigned __int16)(v4 >> 3) == (unsigned __int16)(v5 >> 3);
      goto LABEL_34;
    }
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    goto LABEL_32;
  }
  v13 = 1;
LABEL_34:
  v20 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)a1 + 24) + 32);
  v21 = *v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20[1] + 16))(v20[1], *v20);
  v24 = (_BYTE *)result;
  *((_QWORD *)a1 + 2) = result;
  v25 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v25 == 5 || v25 == 2)
  {
    a1[7] = v25 != 2;
    if ((v5 & 0xFFFFFFFFFFFFFFF9) != 0)
      v26 = (v5 >> 2) & 1;
    else
      v26 = 0;
    if (v26 == 1)
    {
      v27 = 0x800000000000000;
      if ((v5 & 2) == 0)
        v27 = 0x8000000000000;
      if ((v27 & v5) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
      v28 = qword_1C660B050[(uint64_t)((v5 << 45) - 0x1000000000000) >> 48];
    }
    else
    {
      v28 = 0;
    }
    *((_QWORD *)a1 + 4) = v28;
    v29 = *((_QWORD *)a1 + 1);
    v30 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    v31 = 96;
    if (v30 != 2)
      v31 = 64;
    v32 = *(_QWORD *)(**(_QWORD **)a1 + 32);
    v33 = *(unsigned int *)(v32 + v31 + 4);
    if ((v33 & 0x80000000) != 0)
      v34 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
    else
      v34 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v33);
    v42 = *v34;
    if ((*(_BYTE *)(v42 + 3) & 1) == 0)
      v42 = *(_QWORD *)(v42 + 24);
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 32) + 48);
    v44 = (_QWORD *)(v43 + 24);
    if (*(_DWORD *)(v43 + 32) >= 0x41u)
      v44 = (_QWORD *)*v44;
    v14 = v30 == 2;
    v45 = 32;
    if (v14)
      v45 = 64;
    v46 = *(unsigned int *)(v32 + v45 + 4);
    if ((v46 & 0x80000000) != 0)
      v47 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
    else
      v47 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v46);
    v48 = *v47;
    if ((*(_BYTE *)(v48 + 3) & 1) == 0)
      v48 = *(_QWORD *)(v48 + 24);
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 32) + 48);
    v50 = (_QWORD *)(v49 + 24);
    if (*(_DWORD *)(v49 + 32) >= 0x41u)
      v50 = (_QWORD *)*v50;
    v51 = *(_DWORD *)v44;
    v52 = (_QWORD *)*v50;
    if (v26)
    {
      v53 = 3;
      if ((v5 & 1) == 0)
        v53 = 19;
      v54 = v5 >> v53;
      if ((v5 & 2) != 0)
        v55 = (v5 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v54) | 2;
      else
        v55 = v5 & 0x8000000000000000 | (8 * v54) | 1;
      v97 = v55;
      v56 = &v97;
    }
    else
    {
      v56 = &v98;
    }
    v57 = v52 & 0xF;
    result = sub_1C4825F50(v56);
    if ((_DWORD)v58 == 1)
    {
      v95 = result;
      result = v95;
    }
    if (v57 == 2 && *((_WORD *)a1 + 12) == 2)
      llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const char *)1);
    v59.i32[0] = v51 & 0xF;
    v59.i16[0] = vaddlv_u8((uint8x8_t)vcnt_s8(v59));
    LODWORD(v41) = result >> 3;
    v60 = **(_QWORD **)a1;
    if (*(_DWORD *)(v60 + 40) == 6)
    {
      v61 = *((_QWORD *)a1 + 1);
      v62 = *(unsigned int *)(*(_QWORD *)(v60 + 32) + 164);
      if ((v62 & 0x80000000) != 0)
        v63 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
      else
        v63 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v62);
      v70 = *v63;
      if ((*(_BYTE *)(v70 + 3) & 1) == 0)
        v70 = *(_QWORD *)(v70 + 24);
      v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 32) + 48);
      v72 = (_QWORD *)(v71 + 24);
      if (*(_DWORD *)(v71 + 32) >= 0x41u)
        v72 = (_QWORD *)*v72;
      v73 = *((unsigned __int8 *)a1 + 64);
      *((_QWORD *)a1 + 7) = *v72;
      if (!v73)
        *((_BYTE *)a1 + 64) = 1;
    }
    v65 = 0;
    LOWORD(v40) = v59.i16[0];
    *((_QWORD *)a1 + 4) |= ((_QWORD)v52 << 50) & 0x3FC0000000000000 | (16 * (v51 & 0xFu)) | v57;
  }
  else
  {
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 48);
    v36 = (1 << *(_BYTE *)(v35 + 34)) | *(_QWORD *)(v35 + 8);
    v37 = 1 << (63 - __clz(v36 & -v36));
    v38 = *(unsigned __int16 *)(v35 + 32);
    a1[7] = v25 != 1;
    if ((v5 & 0xFFFFFFFFFFFFFFF9) != 0 && (v5 & 4) != 0)
    {
      v39 = 0x800000000000000;
      if ((v5 & 2) == 0)
        v39 = 0x8000000000000;
      if ((v39 & v5) != 0)
        result = (unint64_t)llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
      v40 = (unsigned __int16)(v5 >> 3);
      v41 = (v5 >> 22) & 0x1FFF;
      if ((v5 & 2) == 0)
        v41 = (v5 >> 22) & 0x1FFFFFFF;
      if ((v5 & 1) != 0)
        v41 = (v5 >> 6) & 0x1FFFFFFF;
    }
    else
    {
      result = sub_1C4825F50(&v98);
      if ((_DWORD)v64 == 1)
      {
        v96 = result;
        result = v96;
      }
      v41 = result >> 3;
      v40 = 1;
    }
    v65 = (v38 >> 3) & 1;
    v66 = v37 >= v41 || v13;
    if ((v66 & 1) == 0)
    {
      v67 = v40 * v41;
      LODWORD(v41) = v37;
      v40 = v67 / v37;
    }
    v68 = 1;
    if ((_DWORD)v41 != 2)
      v68 = 2;
    if (v13)
      v68 = 0;
    v69 = 1024;
    if (v40 == 2)
      v69 = 512;
    if (v40 == 1)
      v69 = 0;
    *((_QWORD *)a1 + 4) = v69 | v68 | (16 * (~(-1 << v40) & 0xFu));
  }
  *((_WORD *)a1 + 13) = v40;
  *((_WORD *)a1 + 12) = v41;
  if ((unsigned __int16)v41 == 1)
  {
    *((_WORD *)a1 + 12) = 2;
    *((_WORD *)a1 + 13) = ((unsigned __int16)v40 + 1) >> 1;
  }
  if (*((_BYTE *)a1 + 64))
  {
    v74 = *((_QWORD *)a1 + 7);
LABEL_169:
    *((_QWORD *)a1 + 5) = v74;
    return result;
  }
  v75 = a1[12];
  if (v75 - 10 <= 0x3D && ((1 << (v75 - 10)) & 0x30C0000000000001) != 0 || v75 < 3)
  {
    if (v24[318])
    {
      v76 = 4;
    }
    else if (v24[319])
    {
      v76 = 5;
    }
    else if (v24[320])
    {
      v76 = 6;
    }
    else if (v24[321])
    {
      v76 = 7;
    }
    else
    {
      v76 = 9;
    }
    if (v24[364])
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20[43] + 648))(v20[43]);
    else
      v77 = 1;
    if ((_DWORD)v8 == 1)
    {
      if (v76 == 5)
        v78 = v77;
      else
        v78 = 0;
      if (v24[372])
        v79 = 3;
      else
        v79 = v78;
    }
    else
    {
      v79 = 0;
    }
    v80 = *(_DWORD *)(*(_QWORD *)a1 + 8) - 1;
    if (v80 > 1)
    {
      if (!v24[371])
      {
        LODWORD(v97) = 0;
        v81 = "MemoryWriteCacheCtl";
LABEL_146:
        v83 = sub_1C4979B6C((int)v24, v21, v81, (int *)&v97);
        v82 = v97;
        if (!v83)
          v82 = v79;
        goto LABEL_148;
      }
    }
    else if (!v24[371])
    {
      LODWORD(v97) = 0;
      v81 = "MemoryReadCacheCtl";
      goto LABEL_146;
    }
    v82 = 0;
LABEL_148:
    if (v65)
      v84 = 3;
    else
      v84 = v82;
    if (*(_BYTE *)(*(_QWORD *)a1 + 56))
    {
      v85 = *((_QWORD *)a1 + 1);
      v86 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)a1 + 32) + 100);
      if ((v86 & 0x80000000) != 0)
        v87 = (uint64_t *)(*(_QWORD *)(v85 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
      else
        v87 = (uint64_t *)(*(_QWORD *)(v85 + 272) + 8 * v86);
      v88 = *v87;
      if ((*(_BYTE *)(v88 + 3) & 1) == 0)
        v88 = *(_QWORD *)(v88 + 24);
      v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 8) + 32) + 48);
      v90 = (unint64_t *)(v89 + 24);
      if (*(_DWORD *)(v89 + 32) >= 0x41u)
        v90 = (unint64_t *)*v90;
      v91 = *v90;
      if (v91 <= 2)
        v84 = dword_1C660B070[v91];
    }
    LODWORD(v97) = 0;
    if (v80 > 1)
      v92 = "MemoryWriteL2Pers";
    else
      v92 = "MemoryReadL2Pers";
    result = sub_1C4979B6C((int)v24, v21, v92, (int *)&v97);
    v93 = v97;
    if (!(_DWORD)result)
      v93 = 1;
    v94 = 4 * v93;
    if (v84 == 3)
      v94 = 4;
    v74 = v94 | v84;
    goto LABEL_169;
  }
  return result;
}

uint64_t sub_1C492EF44(uint64_t a1, _BYTE *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int v9;
  const char *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (**v31)(_QWORD *);
  _QWORD *v32;
  void (**v33)(_QWORD *);
  _QWORD *v34;
  void (**v35)(_QWORD *);
  _QWORD *v36;
  void (**v37)(_QWORD *);
  _QWORD *v38;
  void (**v39)(_QWORD *);
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (**v54)(_QWORD *);
  unsigned int v55;
  _BYTE *v56;
  _DWORD *v57;
  _QWORD *v58;
  void (**v59)(_QWORD *);
  _QWORD *v60;
  void (**v61)(_QWORD *);
  _QWORD *v62;
  void (**v63)(_QWORD *);
  _QWORD *v64;
  void (**v65)(_QWORD *);
  unsigned int v66;
  _QWORD *v67;
  void (**v68)(_QWORD *);
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void (**v82)(_QWORD *);
  _QWORD *v83;
  void (**v84)(_QWORD *);
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  void (**v102)(_QWORD *);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  void (**v115)(_QWORD *);
  int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  void (**v123)(_QWORD *);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  void (**v139)(_QWORD *);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (***v144)();
  void (**v145)(uint64_t (***)());
  uint64_t v146;
  uint64_t (***v147)();
  void (**v148)(uint64_t (***)());
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  void (**v166)(_QWORD *);
  _DWORD *v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  void (**v174)(_QWORD *);
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  void (**v178)(_QWORD *);
  uint64_t v179;
  uint64_t (***v180)();
  void (**v181)(uint64_t (***)());
  unsigned int v182;
  uint64_t (***v183)();
  void (**v184)(uint64_t (***)());
  unsigned int v185;
  uint64_t v186;
  _QWORD *v187;
  void (**v188)(_QWORD *);
  unsigned int v189;
  uint64_t v190;
  _QWORD *v191;
  void (**v192)(_QWORD *);
  int v193;
  unsigned int v194;
  uint64_t v195;
  _QWORD *v196;
  void (**v197)(_QWORD *);
  unsigned int v198;
  uint64_t v199;
  _QWORD *v200;
  void (**v201)(_QWORD *);
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (***v216)();
  void (**v217)(uint64_t (***)());
  int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  void (**v229)(_QWORD *);
  _QWORD *v230;
  void (**v231)(_QWORD *);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  void (**v239)(_QWORD *);
  _QWORD *v240;
  void (**v241)(_QWORD *);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  void (**v256)(_QWORD *);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  _QWORD *v263;
  void (**v264)(_QWORD *);
  int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  void (**v270)(_QWORD *);
  int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  void (**v276)(_QWORD *);
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  void (**v297)(_QWORD *);
  uint64_t v298;
  uint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  void (**v305)(_QWORD *);
  int v306;
  unsigned int v307;
  _QWORD *v308;
  void (**v309)(_QWORD *);
  int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  void (**v335)(_QWORD *);
  _DWORD *v336;
  _QWORD *v337;
  void (**v338)(_QWORD *);
  _QWORD *v339;
  void (**v340)(_QWORD *);
  _QWORD *v341;
  void (**v342)(_QWORD *);
  _QWORD *v343;
  void (**v344)(_QWORD *);
  _QWORD *v345;
  void (**v346)(_QWORD *);
  _QWORD *v347;
  void (**v348)(_QWORD *);
  _QWORD *v349;
  void (**v350)(_QWORD *);
  _QWORD *v351;
  void (**v352)(_QWORD *);
  _QWORD *v353;
  void (**v354)(_QWORD *);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  void (**v364)(_QWORD *);
  int v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  void (**v372)(_QWORD *);
  unsigned int v373;
  uint64_t v374;
  char *v375;
  _QWORD *v376;
  void (**v377)(_QWORD *);
  int v378;
  unsigned int v379;
  uint64_t v380;
  char *v381;
  _QWORD *v382;
  void (**v383)(_QWORD *);
  unsigned int v384;
  uint64_t v385;
  char *v386;
  _QWORD *v387;
  void (**v388)(_QWORD *);
  int v389;
  unsigned int v390;
  uint64_t v391;
  char *v392;
  _QWORD *v393;
  void (**v394)(_QWORD *);
  int v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  void (**v407)(_QWORD *);
  _QWORD *v408;
  void (**v409)(_QWORD *);
  _QWORD *v410;
  void (**v411)(_QWORD *);
  _QWORD *v412;
  void (**v413)(_QWORD *);
  _QWORD *v414;
  void (**v415)(_QWORD *);
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  unsigned int v423;
  _QWORD *v424;
  void (**v425)(_QWORD *);
  uint64_t v426;
  int v427;
  unsigned int v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  void (**v434)(_QWORD *);
  int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  void (**v446)(_QWORD *);
  uint64_t v447;
  int v448;
  unsigned int v449;
  uint64_t v450;
  int v451;
  unsigned int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  unsigned int v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  void (**v473)(_QWORD *);
  _QWORD *v474;
  void (**v475)(_QWORD *);
  _QWORD *v476;
  void (**v477)(_QWORD *);
  uint64_t v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  int v484;
  unsigned int v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  void (**v492)(_QWORD *);
  uint64_t (***v493)();
  void (**v494)(uint64_t (***)());
  int v495;
  unsigned int v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  _QWORD *v504;
  void (**v505)(_QWORD *);
  _QWORD *v506;
  void (**v507)(_QWORD *);
  uint64_t v508;
  _DWORD *v510;
  _DWORD *v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  _DWORD *v515;
  _DWORD *v516;
  _DWORD *v517;
  unsigned int v518;
  _DWORD *v519;
  _DWORD *v520;
  unint64_t v521;
  unint64_t v522;
  _QWORD v523[3];
  _QWORD *v524;
  _QWORD v525[3];
  _QWORD *v526;
  _QWORD v527[3];
  _QWORD *v528;
  uint64_t (**v529)();
  __int128 v530;
  uint64_t (***v531)();
  __int128 v532;
  uint64_t v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  _QWORD v539[3];
  _QWORD *v540;
  _QWORD v541[3];
  _QWORD *v542;
  _QWORD v543[3];
  _QWORD *v544;
  _QWORD v545[3];
  _QWORD *v546;
  _QWORD v547[3];
  _QWORD *v548;
  _QWORD v549[3];
  _QWORD *v550;
  _QWORD v551[3];
  _QWORD *v552;
  _QWORD v553[3];
  _QWORD *v554;
  _QWORD v555[3];
  _QWORD *v556;
  _QWORD v557[3];
  _QWORD *v558;
  _QWORD v559[3];
  _QWORD *v560;
  _QWORD v561[3];
  _QWORD *v562;
  _QWORD v563[3];
  _QWORD *v564;
  _QWORD v565[3];
  _QWORD *v566;
  _QWORD v567[3];
  _QWORD *v568;
  _QWORD v569[3];
  _QWORD *v570;
  _QWORD v571[3];
  _QWORD *v572;
  _QWORD v573[3];
  _QWORD *v574;
  _QWORD v575[3];
  _QWORD *v576;
  _QWORD v577[3];
  _QWORD *v578;
  _QWORD v579[3];
  _QWORD *v580;
  _QWORD v581[3];
  _QWORD *v582;
  _QWORD v583[3];
  _QWORD *v584;
  _QWORD v585[3];
  _QWORD *v586;
  _QWORD v587[3];
  _QWORD *v588;
  int64x2_t v589;
  int64x2_t v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  int64x2_t v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  uint64_t v602;
  _QWORD v603[3];
  _QWORD *v604;
  _QWORD v605[3];
  _QWORD *v606;
  _QWORD v607[3];
  _QWORD *v608;
  _QWORD v609[3];
  _QWORD *v610;
  _QWORD v611[3];
  _QWORD *v612;
  uint64_t v613;
  _QWORD v614[3];
  _QWORD *v615;
  _QWORD v616[3];
  _QWORD *v617;
  _QWORD v618[3];
  _QWORD *v619;
  _QWORD v620[3];
  _QWORD *v621;
  _QWORD v622[3];
  _QWORD *v623;
  _QWORD v624[3];
  _QWORD *v625;
  _QWORD v626[3];
  _QWORD *v627;
  _QWORD v628[3];
  _QWORD *v629;
  uint64_t (**v630)();
  __int128 v631;
  uint64_t (***v632)();
  _QWORD v633[3];
  _QWORD *v634;
  _QWORD v635[3];
  _QWORD *v636;
  _QWORD v637[3];
  _QWORD *v638;
  _QWORD v639[3];
  _QWORD *v640;
  uint64_t (**v641)();
  __int128 v642;
  uint64_t (***v643)();
  uint64_t (**v644)();
  __int128 v645;
  uint64_t (***v646)();
  _QWORD v647[3];
  _QWORD *v648;
  _QWORD v649[3];
  _QWORD *v650;
  _QWORD v651[3];
  _QWORD *v652;
  uint64_t (**v653)();
  __int128 v654;
  uint64_t (***v655)();
  uint64_t (**v656)();
  __int128 v657;
  uint64_t (***v658)();
  _QWORD v659[3];
  _QWORD *v660;
  _QWORD v661[3];
  _QWORD *v662;
  _QWORD v663[3];
  _QWORD *v664;
  _QWORD v665[3];
  _QWORD *v666;
  _QWORD v667[3];
  _QWORD *v668;
  _QWORD v669[3];
  _QWORD *v670;
  _QWORD v671[3];
  _QWORD *v672;
  _QWORD v673[3];
  _QWORD *v674;
  _QWORD v675[3];
  _QWORD *v676;
  _QWORD v677[3];
  _QWORD *v678;
  _QWORD v679[3];
  _QWORD *v680;
  _QWORD v681[3];
  _QWORD *v682;
  _QWORD v683[3];
  _QWORD *v684;
  _QWORD v685[3];
  _QWORD *v686;
  _QWORD v687[3];
  _QWORD *v688;
  _QWORD v689[3];
  _QWORD *v690;
  _QWORD v691[3];
  _QWORD *v692;
  _QWORD v693[3];
  _QWORD *v694;
  uint64_t v695;

  v695 = *MEMORY[0x1E0C80C00];
  v520 = (_DWORD *)(a1 + 29576);
  v513 = (_DWORD *)(a1 + 29072);
  v515 = (_DWORD *)(a1 + 28232);
  v519 = (_DWORD *)(a1 + 27896);
  v517 = (_DWORD *)(a1 + 27056);
  v510 = (_DWORD *)(a1 + 25880);
  v514 = (_DWORD *)(a1 + 23528);
  v4 = (_DWORD *)(a1 + 22352);
  v511 = (_DWORD *)(a1 + 20672);
  v512 = (_DWORD *)(a1 + 20000);
  *(_QWORD *)a1 = &off_1E816E938;
  v5 = a1 + 35456;
  v6 = 8;
  do
  {
    v7 = a1 + v6;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 8) = a1 + v6 + 24;
    *(_QWORD *)(v7 + 16) = 0x200000000;
    v6 += 168;
  }
  while (v7 + 168 != v5);
  v516 = (_DWORD *)(a1 + 26720);
  sub_1C553CCC0(a1 + 35456);
  *(_QWORD *)a1 = &off_1E7FA36D0;
  v522 = 897;
  v9 = sub_1C4825F50(&v522);
  if ((_DWORD)v8 == 1)
  v521 = 3073;
  v11 = sub_1C4825F50(&v521);
  if ((_DWORD)v10 == 1)
  v12 = *(_DWORD *)(a1 + 3872);
  if (v12)
    v13 = v12 - 45;
  else
    v13 = 23;
  v589 = (int64x2_t)xmmword_1C660B2D0;
  v590 = (int64x2_t)xmmword_1C660B2E0;
  v591 = xmmword_1C660B2F0;
  *(_QWORD *)&v592 = 4194372;
  v14 = sub_1C4952F0C(a1 + 168 * v13 + 8, 0, &v589, 7);
  v15 = v9;
  v518 = v11;
  v16 = v9 | ((unint64_t)v11 << 32);
  v693[0] = &off_1E7FA3900;
  v693[1] = v16;
  v694 = v693;
  v17 = sub_1C614534C(v14, v693);
  v18 = sub_1C49329B4(v17, 0, 0x81uLL);
  v19 = sub_1C4932D5C(v18, 0, 0x101uLL);
  v20 = sub_1C49325E4(v19, 0, 16);
  v21 = sub_1C4953808(v20, 0, 9, 4);
  v22 = sub_1C495392C(v21, 0, 9, 4);
  v23 = sub_1C4953808(v22, 0, 65, 2);
  v24 = sub_1C495392C(v23, 0, 65, 8);
  v25 = sub_1C4953808(v24, 0, 129, 2);
  v26 = sub_1C495392C(v25, 0, 129, 8);
  v27 = sub_1C4953808(v26, 0, 257, 2);
  v28 = sub_1C495392C(v27, 0, 257, 4);
  *(_QWORD *)&v534 = 129;
  sub_1C6271148(0, &v534, 1, (uint64_t)v689);
  v687[0] = &off_1E816E4E0;
  v687[1] = 0x200000000;
  v688 = v687;
  sub_1C49326DC(v689, v687, (uint64_t)v691);
  v685[0] = &off_1E816E690;
  v685[1] = 0;
  v686 = v685;
  v29 = sub_1C6145434(v28, v691, v685);
  sub_1C61455A0(v29, 0);
  v30 = v686;
  if (v686 == v685)
  {
    v31 = (void (**)(_QWORD *))(v685[0] + 32);
    v30 = v685;
  }
  else
  {
    if (!v686)
      goto LABEL_15;
    v31 = (void (**)(_QWORD *))(*v686 + 40);
  }
  (*v31)(v30);
LABEL_15:
  v32 = v692;
  if (v692 == v691)
  {
    v33 = (void (**)(_QWORD *))(v691[0] + 32);
    v32 = v691;
  }
  else
  {
    if (!v692)
      goto LABEL_20;
    v33 = (void (**)(_QWORD *))(*v692 + 40);
  }
  (*v33)(v32);
LABEL_20:
  v34 = v688;
  if (v688 == v687)
  {
    v35 = (void (**)(_QWORD *))(v687[0] + 32);
    v34 = v687;
  }
  else
  {
    if (!v688)
      goto LABEL_25;
    v35 = (void (**)(_QWORD *))(*v688 + 40);
  }
  (*v35)(v34);
LABEL_25:
  v36 = v690;
  if (v690 == v689)
  {
    v37 = (void (**)(_QWORD *))(v689[0] + 32);
    v36 = v689;
  }
  else
  {
    if (!v690)
      goto LABEL_30;
    v37 = (void (**)(_QWORD *))(*v690 + 40);
  }
  (*v37)(v36);
LABEL_30:
  v38 = v694;
  if (v694 == v693)
  {
    v39 = (void (**)(_QWORD *))(v693[0] + 32);
    v38 = v693;
  }
  else
  {
    if (!v694)
      goto LABEL_35;
    v39 = (void (**)(_QWORD *))(*v694 + 40);
  }
  (*v39)(v38);
LABEL_35:
  v40 = *(_DWORD *)(a1 + 6392);
  if (v40)
    v41 = v40 - 45;
  else
    v41 = 38;
  v683[0] = &off_1E7FA3900;
  v683[1] = v16;
  v684 = v683;
  v42 = sub_1C614534C(a1 + 168 * v41 + 8, v683);
  v43 = sub_1C49329B4(v42, 0, 0x81uLL);
  v44 = sub_1C4932D5C(v43, 0, 0x101uLL);
  v45 = sub_1C49325E4(v44, 0, 16);
  v46 = sub_1C4953808(v45, 0, 65, 2);
  v47 = sub_1C495392C(v46, 0, 65, 8);
  v48 = sub_1C4953808(v47, 0, 129, 2);
  v49 = sub_1C495392C(v48, 0, 129, 8);
  v50 = sub_1C4953808(v49, 0, 257, 2);
  v51 = sub_1C495392C(v50, 0, 257, 4);
  v589.i64[0] = 129;
  sub_1C6271148(0, &v589, 1, (uint64_t)v679);
  v677[0] = &off_1E816E4E0;
  v677[1] = 0x200000000;
  v678 = v677;
  sub_1C49326DC(v679, v677, (uint64_t)v681);
  v675[0] = &off_1E816E690;
  v675[1] = 0;
  v676 = v675;
  v52 = sub_1C6145434(v51, v681, v675);
  sub_1C61455A0(v52, 0);
  v53 = v676;
  if (v676 == v675)
  {
    v54 = (void (**)(_QWORD *))(v675[0] + 32);
    v53 = v675;
    v55 = v15;
    v56 = a2;
    v57 = v4;
  }
  else
  {
    v55 = v15;
    v56 = a2;
    v57 = v4;
    if (!v676)
      goto LABEL_43;
    v54 = (void (**)(_QWORD *))(*v676 + 40);
  }
  (*v54)(v53);
LABEL_43:
  v58 = v682;
  if (v682 == v681)
  {
    v59 = (void (**)(_QWORD *))(v681[0] + 32);
    v58 = v681;
  }
  else
  {
    if (!v682)
      goto LABEL_48;
    v59 = (void (**)(_QWORD *))(*v682 + 40);
  }
  (*v59)(v58);
LABEL_48:
  v60 = v678;
  if (v678 == v677)
  {
    v61 = (void (**)(_QWORD *))(v677[0] + 32);
    v60 = v677;
  }
  else
  {
    if (!v678)
      goto LABEL_53;
    v61 = (void (**)(_QWORD *))(*v678 + 40);
  }
  (*v61)(v60);
LABEL_53:
  v62 = v680;
  if (v680 == v679)
  {
    v63 = (void (**)(_QWORD *))(v679[0] + 32);
    v62 = v679;
  }
  else
  {
    if (!v680)
      goto LABEL_58;
    v63 = (void (**)(_QWORD *))(*v680 + 40);
  }
  (*v63)(v62);
LABEL_58:
  v64 = v684;
  if (v684 == v683)
  {
    v65 = (void (**)(_QWORD *))(v683[0] + 32);
    v64 = v683;
  }
  else
  {
    if (!v684)
      goto LABEL_63;
    v65 = (void (**)(_QWORD *))(*v684 + 40);
  }
  (*v65)(v64);
LABEL_63:
  if (*v520)
    v66 = *v520 - 45;
  else
    v66 = 176;
  v673[0] = &off_1E7FA3948;
  v674 = v673;
  sub_1C614534C(a1 + 168 * v66 + 8, v673);
  v67 = v674;
  if (v674 == v673)
  {
    v68 = (void (**)(_QWORD *))(v673[0] + 32);
    v67 = v673;
  }
  else
  {
    if (!v674)
      goto LABEL_71;
    v68 = (void (**)(_QWORD *))(*v674 + 40);
  }
  (*v68)(v67);
LABEL_71:
  v69 = *(_DWORD *)(a1 + 4040);
  if (v69)
    v70 = v69 - 45;
  else
    v70 = 24;
  v589 = (int64x2_t)xmmword_1C660B300;
  v590 = (int64x2_t)xmmword_1C660B310;
  v591 = xmmword_1C660B320;
  v592 = xmmword_1C660B330;
  v593 = xmmword_1C660B340;
  v594 = xmmword_1C660B350;
  v595 = xmmword_1C660B360;
  v596 = xmmword_1C660B370;
  v597 = xmmword_1C660B380;
  v598 = (int64x2_t)xmmword_1C660B390;
  v599 = xmmword_1C660B3A0;
  v600 = xmmword_1C660B3B0;
  *(_QWORD *)&v601 = 2097666;
  v71 = sub_1C4952F0C(a1 + 168 * v70 + 8, 0, &v589, 25);
  v72 = sub_1C49325E4(v71, 0, 0);
  v73 = sub_1C49329B4(v72, 0, 0x81uLL);
  v74 = sub_1C4932D5C(v73, 0, 0x201uLL);
  v75 = sub_1C4953808(v74, 0, 129, 2);
  v76 = sub_1C495392C(v75, 0, 129, 4);
  v77 = sub_1C4953808(v76, 0, 257, 2);
  v78 = sub_1C495392C(v77, 0, 257, 4);
  v671[0] = &off_1E7FA3990;
  v672 = v671;
  v669[0] = &off_1E816E648;
  v669[1] = 0x1000000000;
  v670 = v669;
  v79 = sub_1C61456A0(v78, v671, v669);
  v80 = sub_1C4953808(v79, 0, 513, 2);
  sub_1C495392C(v80, 0, 513, 2);
  v81 = v670;
  if (v670 == v669)
  {
    v82 = (void (**)(_QWORD *))(v669[0] + 32);
    v81 = v669;
  }
  else
  {
    if (!v670)
      goto LABEL_79;
    v82 = (void (**)(_QWORD *))(*v670 + 40);
  }
  (*v82)(v81);
LABEL_79:
  v83 = v672;
  if (v672 == v671)
  {
    v84 = (void (**)(_QWORD *))(v671[0] + 32);
    v83 = v671;
  }
  else
  {
    if (!v672)
      goto LABEL_84;
    v84 = (void (**)(_QWORD *))(*v672 + 40);
  }
  (*v84)(v83);
LABEL_84:
  v85 = a1 + 8;
  v86 = *(_DWORD *)(a1 + 12608);
  if (v86)
    v87 = v86 - 45;
  else
    v87 = 75;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v88 = sub_1C4952F0C(v85 + 168 * v87, 0, &v589, 3);
  v89 = sub_1C49329B4(v88, 0, 0x81uLL);
  v90 = sub_1C4932D5C(v89, 0, 0x201uLL);
  sub_1C49325E4(v90, 0, 0);
  v91 = *(_DWORD *)(a1 + 12776);
  if (v91)
    v92 = v91 - 45;
  else
    v92 = 76;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v93 = sub_1C4952F0C(v85 + 168 * v92, 0, &v589, 2);
  v94 = sub_1C49329B4(v93, 0, 0x81uLL);
  v95 = sub_1C4932D5C(v94, 0, 0x101uLL);
  sub_1C49325E4(v95, 0, 0);
  if (v56[357])
  {
    *(_QWORD *)&v534 = 0x2E0000002DLL;
    v103 = sub_1C553C5E0(a1, (int *)&v534, 2);
    v589 = (int64x2_t)xmmword_1C660B3C0;
    v104 = sub_1C4952F0C(v103, 0, &v589, 2);
    *(_QWORD *)&v532 = 513;
    v105 = sub_1C4952F0C(v104, 8, &v532, 1);
    v106 = sub_1C49329B4(v105, 0, 0x81uLL);
    v107 = sub_1C4932D5C(v106, 0, 0x101uLL);
    v108 = sub_1C49325E4(v107, 0, 0);
    v665[0] = &off_1E7FA39D8;
    v666 = v665;
    sub_1C49328CC(v108, v665);
    v101 = v666;
    if (v666 == v665)
    {
      v102 = (void (**)(_QWORD *))(v665[0] + 32);
      v101 = v665;
      goto LABEL_97;
    }
  }
  else
  {
    *(_QWORD *)&v534 = 0x2E0000002DLL;
    v96 = sub_1C553C5E0(a1, (int *)&v534, 2);
    v589 = (int64x2_t)xmmword_1C660B3C0;
    v590.i64[0] = 513;
    v97 = sub_1C4952F0C(v96, 0, &v589, 3);
    v98 = sub_1C49329B4(v97, 0, 0x81uLL);
    v99 = sub_1C4932D5C(v98, 0, 0x201uLL);
    v100 = sub_1C49325E4(v99, 0, 0);
    v667[0] = &off_1E7FA39D8;
    v668 = v667;
    sub_1C49328CC(v100, v667);
    v101 = v668;
    if (v668 == v667)
    {
      v102 = (void (**)(_QWORD *))(v667[0] + 32);
      v101 = v667;
      goto LABEL_97;
    }
  }
  if (!v101)
    goto LABEL_98;
  v102 = (void (**)(_QWORD *))(*v101 + 40);
LABEL_97:
  (*v102)(v101);
LABEL_98:
  *(_QWORD *)&v534 = 0x4200000041;
  DWORD2(v534) = 67;
  v109 = sub_1C553C5E0(a1, (int *)&v534, 3);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v110 = sub_1C4952F0C(v109, 0, &v589, 2);
  v663[0] = &off_1E7FA3A20;
  v663[1] = 513;
  v664 = v663;
  v111 = sub_1C49328CC(v110, v663);
  v112 = sub_1C49329B4(v111, 0, 0x81uLL);
  v113 = sub_1C4932D5C(v112, 0, 0x101uLL);
  sub_1C49325E4(v113, 0, 0);
  v114 = v664;
  if (v664 == v663)
  {
    v115 = (void (**)(_QWORD *))(v663[0] + 32);
    v114 = v663;
  }
  else
  {
    if (!v664)
      goto LABEL_103;
    v115 = (void (**)(_QWORD *))(*v664 + 40);
  }
  (*v115)(v114);
LABEL_103:
  v116 = *(_DWORD *)(a1 + 344);
  if (v116)
    v117 = v116 - 45;
  else
    v117 = 2;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v118 = sub_1C4952F0C(a1 + 168 * v117 + 8, 0, &v589, 2);
  v661[0] = &off_1E7FA3A68;
  v661[1] = 513;
  v662 = v661;
  v119 = sub_1C49328CC(v118, v661);
  v120 = sub_1C49329B4(v119, 0, 0x81uLL);
  v121 = sub_1C4932D5C(v120, 0, 0x201uLL);
  sub_1C49325E4(v121, 0, 0);
  v122 = v662;
  if (v662 == v661)
  {
    v123 = (void (**)(_QWORD *))(v661[0] + 32);
    v122 = v661;
  }
  else
  {
    if (!v662)
      goto LABEL_111;
    v123 = (void (**)(_QWORD *))(*v662 + 40);
  }
  (*v123)(v122);
LABEL_111:
  v589 = (int64x2_t)xmmword_1C660B3D0;
  v124 = sub_1C553C5E0(a1, v589.i32, 4);
  v534 = xmmword_1C660B3C0;
  v125 = sub_1C4952F0C(v124, 0, &v534, 2);
  v126 = sub_1C614580C(v125, 0);
  v127 = sub_1C49329B4(v126, 0, 0x101uLL);
  v128 = sub_1C49325E4(v127, 0, 0);
  sub_1C6145904(v128);
  v589.i64[0] = 0x8300000082;
  v129 = sub_1C553C5E0(a1, v589.i32, 2);
  sub_1C61459B4(v129);
  *(_QWORD *)&v532 = 0x810000007FLL;
  DWORD2(v532) = 128;
  v130 = sub_1C553C5E0(a1, (int *)&v532, 3);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v534 = xmmword_1C660B3C0;
  *(_QWORD *)&v535 = 513;
  v131 = sub_1C6146774(v130, 0, &v589, 3, &v534, 3);
  v132 = sub_1C49325E4(v131, 0, 0);
  v133 = sub_1C49325E4(v132, 1u, 0);
  v134 = sub_1C49329B4(v133, 0, 0x81uLL);
  v135 = sub_1C4932D5C(v134, 0, 0x201uLL);
  v136 = sub_1C49329B4(v135, 1u, 0x81uLL);
  v137 = sub_1C4932D5C(v136, 1u, 0x201uLL);
  v659[0] = &off_1E7FA39D8;
  v660 = v659;
  sub_1C49328CC(v137, v659);
  v138 = v660;
  if (v660 == v659)
  {
    v139 = (void (**)(_QWORD *))(v659[0] + 32);
    v138 = v659;
  }
  else
  {
    if (!v660)
      goto LABEL_116;
    v139 = (void (**)(_QWORD *))(*v660 + 40);
  }
  (*v139)(v138);
LABEL_116:
  v589.i64[0] = 0x3C0000003BLL;
  v140 = sub_1C553C5E0(a1, v589.i32, 2);
  v657 = xmmword_1C660B3C0;
  v656 = &off_1E7FA3AB0;
  v658 = &v656;
  v141 = sub_1C49328CC(v140, &v656);
  v142 = sub_1C49329B4(v141, 0, 0x81uLL);
  v143 = sub_1C4932D5C(v142, 0, 0x101uLL);
  sub_1C49325E4(v143, 0, 0);
  v144 = v658;
  if (v658 == &v656)
  {
    v145 = (void (**)(uint64_t (***)()))(v656 + 4);
    v144 = &v656;
  }
  else
  {
    if (!v658)
      goto LABEL_121;
    v145 = (void (**)(uint64_t (***)()))(*v658 + 5);
  }
  (*v145)(v144);
LABEL_121:
  v589.i64[0] = 0x9300000094;
  v146 = sub_1C553C5E0(a1, v589.i32, 2);
  v654 = xmmword_1C660B3C0;
  v653 = &off_1E7FA3AF8;
  v655 = &v653;
  sub_1C49328CC(v146, &v653);
  v147 = v655;
  if (v655 == &v653)
  {
    v148 = (void (**)(uint64_t (***)()))(v653 + 4);
    v147 = &v653;
  }
  else
  {
    if (!v655)
      goto LABEL_126;
    v148 = (void (**)(uint64_t (***)()))(*v655 + 5);
  }
  (*v148)(v147);
LABEL_126:
  *(_QWORD *)&v534 = 0x3E0000003DLL;
  v149 = sub_1C553C5E0(a1, (int *)&v534, 2);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v150 = sub_1C4952F0C(v149, 6, &v589, 2);
  v151 = sub_1C49329B4(v150, 0, 0x81uLL);
  v152 = sub_1C4932D5C(v151, 0, 0x101uLL);
  sub_1C49325E4(v152, 0, 0);
  *(_QWORD *)&v534 = 0x3100000030;
  v153 = sub_1C553C5E0(a1, (int *)&v534, 2);
  v589 = (int64x2_t)xmmword_1C660B3E0;
  sub_1C61468C4(v153, 0, &v589, 1);
  v154 = *(_DWORD *)(a1 + 15968);
  if (v154)
    v155 = v154 - 45;
  else
    v155 = 95;
  sub_1C6145904(a1 + 168 * v155 + 8);
  v589 = (int64x2_t)xmmword_1C660AC08;
  v590.i64[0] = 0x8E0000008FLL;
  v156 = sub_1C553C5E0(a1, v589.i32, 6);
  v534 = xmmword_1C660B3C0;
  *(_QWORD *)&v535 = 513;
  *(_QWORD *)&v532 = 9;
  v157 = sub_1C6146774(v156, 8, &v534, 3, &v532, 1);
  v158 = sub_1C49329B4(v157, 0, 0x81uLL);
  v159 = sub_1C4932D5C(v158, 0, 0x201uLL);
  sub_1C49325E4(v159, 0, 0);
  v534 = xmmword_1C660B3F0;
  v160 = sub_1C553C5E0(a1, (int *)&v534, 4);
  v651[0] = &off_1E7FA39D8;
  v652 = v651;
  v161 = sub_1C49328CC(v160, v651);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v162 = sub_1C4952F0C(v161, 6, &v589, 3);
  v163 = sub_1C49329B4(v162, 0, 0x81uLL);
  v164 = sub_1C4932D5C(v163, 0, 0x101uLL);
  sub_1C49325E4(v164, 0, 0);
  v165 = v652;
  if (v652 == v651)
  {
    v166 = (void (**)(_QWORD *))(v651[0] + 32);
    v165 = v651;
    v167 = v519;
  }
  else
  {
    v167 = v519;
    if (!v652)
      goto LABEL_134;
    v166 = (void (**)(_QWORD *))(*v652 + 40);
  }
  (*v166)(v165);
LABEL_134:
  if (*v510)
    v168 = *v510 - 45;
  else
    v168 = 154;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v169 = sub_1C4952F0C(a1 + 168 * v168 + 8, 8, &v589, 3);
  v170 = sub_1C49329B4(v169, 0, 0x81uLL);
  v171 = sub_1C4932D5C(v170, 0, 0x201uLL);
  v172 = sub_1C49325E4(v171, 0, 0);
  v649[0] = &off_1E7FA39D8;
  v650 = v649;
  sub_1C49328CC(v172, v649);
  v173 = v650;
  if (v650 == v649)
  {
    v174 = (void (**)(_QWORD *))(v649[0] + 32);
    v173 = v649;
  }
  else
  {
    if (!v650)
      goto LABEL_142;
    v174 = (void (**)(_QWORD *))(*v650 + 40);
  }
  (*v174)(v173);
LABEL_142:
  v589 = (int64x2_t)xmmword_1C660AC20;
  v590 = (int64x2_t)unk_1C660AC30;
  LODWORD(v591) = 219;
  v175 = sub_1C553C5E0(a1, v589.i32, 9);
  v534 = xmmword_1C660B3C0;
  v176 = sub_1C4952F0C(v175, 0, &v534, 2);
  v647[0] = &off_1E7FA39D8;
  v648 = v647;
  sub_1C49328CC(v176, v647);
  v177 = v648;
  if (v648 == v647)
  {
    v178 = (void (**)(_QWORD *))(v647[0] + 32);
    v177 = v647;
  }
  else
  {
    if (!v648)
      goto LABEL_147;
    v178 = (void (**)(_QWORD *))(*v648 + 40);
  }
  (*v178)(v177);
LABEL_147:
  v589.i64[0] = 0xBC000000BBLL;
  v179 = sub_1C553C5E0(a1, v589.i32, 2);
  v645 = xmmword_1C660B3C0;
  v644 = &off_1E7FA3B40;
  v646 = &v644;
  sub_1C49328CC(v179, &v644);
  v180 = v646;
  if (v646 == &v644)
  {
    v181 = (void (**)(uint64_t (***)()))(v644 + 4);
    v180 = &v644;
  }
  else
  {
    if (!v646)
      goto LABEL_152;
    v181 = (void (**)(uint64_t (***)()))(*v646 + 5);
  }
  (*v181)(v180);
LABEL_152:
  if (*v511)
    v182 = *v511 - 45;
  else
    v182 = 123;
  v642 = xmmword_1C660B3C0;
  v641 = &off_1E7FA3B88;
  v643 = &v641;
  sub_1C49328CC(a1 + 168 * v182 + 8, &v641);
  v183 = v643;
  if (v643 == &v641)
  {
    v184 = (void (**)(uint64_t (***)()))(v641 + 4);
    v183 = &v641;
  }
  else
  {
    if (!v643)
      goto LABEL_160;
    v184 = (void (**)(uint64_t (***)()))(*v643 + 5);
  }
  (*v184)(v183);
LABEL_160:
  if (*v512)
    v185 = *v512 - 45;
  else
    v185 = 119;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v186 = sub_1C4952F0C(a1 + 168 * v185 + 8, 6, &v589, 2);
  v639[0] = &off_1E7FA39D8;
  v640 = v639;
  sub_1C49328CC(v186, v639);
  v187 = v640;
  if (v640 == v639)
  {
    v188 = (void (**)(_QWORD *))(v639[0] + 32);
    v187 = v639;
  }
  else
  {
    if (!v640)
      goto LABEL_168;
    v188 = (void (**)(_QWORD *))(*v640 + 40);
  }
  (*v188)(v187);
LABEL_168:
  if (*v57)
    v189 = *v57 - 45;
  else
    v189 = 133;
  v589 = (int64x2_t)xmmword_1C660B400;
  v190 = sub_1C61468C4(a1 + 168 * v189 + 8, 0, &v589, 1);
  v637[0] = &off_1E7FA39D8;
  v638 = v637;
  sub_1C49328CC(v190, v637);
  v191 = v638;
  if (v638 == v637)
  {
    v192 = (void (**)(_QWORD *))(v637[0] + 32);
    v191 = v637;
  }
  else
  {
    if (!v638)
      goto LABEL_176;
    v192 = (void (**)(_QWORD *))(*v638 + 40);
  }
  (*v192)(v191);
LABEL_176:
  v193 = v57[42];
  if (v193)
    v194 = v193 - 45;
  else
    v194 = 134;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v195 = sub_1C61468C4(a1 + 168 * v194 + 8, 0, &v589, 1);
  v635[0] = &off_1E7FA39D8;
  v636 = v635;
  sub_1C49328CC(v195, v635);
  v196 = v636;
  if (v636 == v635)
  {
    v197 = (void (**)(_QWORD *))(v635[0] + 32);
    v196 = v635;
  }
  else
  {
    if (!v636)
      goto LABEL_184;
    v197 = (void (**)(_QWORD *))(*v636 + 40);
  }
  (*v197)(v196);
LABEL_184:
  if (*v513)
    v198 = *v513 - 45;
  else
    v198 = 173;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v199 = sub_1C4952F0C(a1 + 168 * v198 + 8, 0, &v589, 2);
  v633[0] = &off_1E7FA39D8;
  v634 = v633;
  sub_1C49328CC(v199, v633);
  v200 = v634;
  if (v634 == v633)
  {
    v201 = (void (**)(_QWORD *))(v633[0] + 32);
    v200 = v633;
  }
  else
  {
    if (!v634)
      goto LABEL_192;
    v201 = (void (**)(_QWORD *))(*v634 + 40);
  }
  (*v201)(v200);
LABEL_192:
  if (*v514)
    v202 = *v514 - 45;
  else
    v202 = 140;
  v203 = a1 + 8;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B3C0;
  v204 = sub_1C6146774(a1 + 8 + 168 * v202, 0, &v589, 2, &v534, 2);
  sub_1C614580C(v204, 0);
  v205 = v167[42];
  if (v205)
    v206 = v205 - 45;
  else
    v206 = 167;
  v589.i64[0] = 257;
  v207 = sub_1C4952F0C(v203 + 168 * v206, 0, &v589, 1);
  v208 = sub_1C49329B4(v207, 0, 0x101uLL);
  v209 = sub_1C4932D5C(v208, 0, 0x101uLL);
  sub_1C614580C(v209, 0);
  if (*v515)
    v210 = *v515 - 45;
  else
    v210 = 168;
  v589 = (int64x2_t)xmmword_1C660B410;
  v590 = (int64x2_t)xmmword_1C660B320;
  v211 = sub_1C4952F0C(v203 + 168 * v210, 8, &v589, 4);
  v212 = sub_1C49325E4(v211, 0, 0);
  v213 = sub_1C49329B4(v212, 0, 0x81uLL);
  v214 = sub_1C4932D5C(v213, 0, 0x201uLL);
  sub_1C614580C(v214, 0);
  v589.i64[0] = 0xAE000000ACLL;
  v589.i32[2] = 217;
  v215 = sub_1C553C5E0(a1, v589.i32, 3);
  v631 = xmmword_1C660B3C0;
  v630 = &off_1E7FA3BD0;
  v632 = &v630;
  sub_1C49328CC(v215, &v630);
  v216 = v632;
  if (v632 == &v630)
  {
    v217 = (void (**)(uint64_t (***)()))(v630 + 4);
    v216 = &v630;
  }
  else
  {
    if (!v632)
      goto LABEL_206;
    v217 = (void (**)(uint64_t (***)()))(*v632 + 5);
  }
  (*v217)(v216);
LABEL_206:
  v218 = *(_DWORD *)(a1 + 6728);
  if (v218)
    v219 = v218 - 45;
  else
    v219 = 40;
  if (v56[327])
  {
    v589 = (int64x2_t)xmmword_1C660B3C0;
    v220 = 0;
    v221 = 2;
  }
  else
  {
    v589.i64[0] = 257;
    v220 = 8;
    v221 = 1;
  }
  sub_1C4952F0C(a1 + 168 * v219 + 8, v220, &v589, v221);
  if (*v167)
    v222 = *v167 - 45;
  else
    v222 = 166;
  v589 = vdupq_n_s64(0x81uLL);
  v590 = vdupq_n_s64(0x101uLL);
  v223 = sub_1C61468C4(a1 + 168 * v222 + 8, 0, &v589, 2);
  v224 = sub_1C49329B4(v223, 1u, 0x81uLL);
  v225 = sub_1C4932D5C(v224, 1u, 0x101uLL);
  v226 = sub_1C49325E4(v225, 1u, 0);
  v227 = sub_1C6145A60(v226, 0, 1);
  v628[0] = &off_1E7FA3C18;
  v629 = v628;
  v626[0] = &off_1E7FA3C60;
  v627 = v626;
  sub_1C6145B5C(v227, v628, v626);
  v228 = v627;
  if (v627 == v626)
  {
    v229 = (void (**)(_QWORD *))(v626[0] + 32);
    v228 = v626;
  }
  else
  {
    if (!v627)
      goto LABEL_220;
    v229 = (void (**)(_QWORD *))(*v627 + 40);
  }
  (*v229)(v228);
LABEL_220:
  v230 = v629;
  if (v629 == v628)
  {
    v231 = (void (**)(_QWORD *))(v628[0] + 32);
    v230 = v628;
  }
  else
  {
    if (!v629)
      goto LABEL_225;
    v231 = (void (**)(_QWORD *))(*v629 + 40);
  }
  (*v231)(v230);
LABEL_225:
  *(_QWORD *)&v534 = 0xD0000000CFLL;
  v232 = sub_1C553C5E0(a1, (int *)&v534, 2);
  v589 = vdupq_n_s64(0x81uLL);
  v590 = vdupq_n_s64(0x101uLL);
  v233 = sub_1C61468C4(v232, 6, &v589, 2);
  v234 = sub_1C49329B4(v233, 1u, 0x81uLL);
  v235 = sub_1C4932D5C(v234, 1u, 0x101uLL);
  v236 = sub_1C49325E4(v235, 1u, 0);
  v237 = sub_1C6145A60(v236, 0, 1);
  v624[0] = &off_1E7FA3CA8;
  v625 = v624;
  v622[0] = &off_1E7FA3CF0;
  v623 = v622;
  sub_1C6145B5C(v237, v624, v622);
  v238 = v623;
  if (v623 == v622)
  {
    v239 = (void (**)(_QWORD *))(v622[0] + 32);
    v238 = v622;
  }
  else
  {
    if (!v623)
      goto LABEL_230;
    v239 = (void (**)(_QWORD *))(*v623 + 40);
  }
  (*v239)(v238);
LABEL_230:
  v240 = v625;
  if (v625 == v624)
  {
    v241 = (void (**)(_QWORD *))(v624[0] + 32);
    v240 = v624;
  }
  else
  {
    if (!v625)
      goto LABEL_235;
    v241 = (void (**)(_QWORD *))(*v625 + 40);
  }
  (*v241)(v240);
LABEL_235:
  *(_QWORD *)&v534 = 0xD2000000D1;
  v242 = sub_1C553C5E0(a1, (int *)&v534, 2);
  *(_QWORD *)&v532 = 513;
  v243 = sub_1C4952F0C(v242, 8, &v532, 1);
  v589 = vdupq_n_s64(0x81uLL);
  v590 = vdupq_n_s64(0x101uLL);
  v244 = sub_1C61468C4(v243, 6, &v589, 2);
  v245 = sub_1C49329B4(v244, 0, 0x81uLL);
  v246 = sub_1C4932D5C(v245, 0, 0x101uLL);
  sub_1C49325E4(v246, 0, 0);
  *(_QWORD *)&v538 = 0xB5000000B4;
  v247 = sub_1C553C5E0(a1, (int *)&v538, 2);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B3C0;
  v248 = sub_1C6146774(v247, 0, &v589, 2, &v534, 2);
  v532 = xmmword_1C660B3E0;
  v249 = sub_1C4952F0C(v248, 8, &v532, 2);
  v250 = sub_1C49329B4(v249, 1u, 0x81uLL);
  v251 = sub_1C4932D5C(v250, 1u, 0x101uLL);
  v252 = sub_1C49329B4(v251, 0, 0x41uLL);
  v253 = sub_1C4932D5C(v252, 0, 0x101uLL);
  v620[0] = &off_1E7FA3D38;
  v620[1] = 65;
  v621 = v620;
  v254 = sub_1C49328CC(v253, v620);
  sub_1C49325E4(v254, 0, 0);
  v255 = v621;
  if (v621 == v620)
  {
    v256 = (void (**)(_QWORD *))(v620[0] + 32);
    v255 = v620;
  }
  else
  {
    if (!v621)
      goto LABEL_240;
    v256 = (void (**)(_QWORD *))(*v621 + 40);
  }
  (*v256)(v255);
LABEL_240:
  *(_QWORD *)&v532 = 0xB7000000B6;
  v257 = sub_1C553C5E0(a1, (int *)&v532, 2);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B3C0;
  v258 = sub_1C6146774(v257, 0, &v589, 2, &v534, 2);
  v259 = sub_1C49329B4(v258, 1u, 0x81uLL);
  v260 = sub_1C4932D5C(v259, 1u, 0x201uLL);
  v261 = sub_1C49325E4(v260, 1u, 0);
  v262 = (char *)operator new(0x20uLL);
  *(_QWORD *)v262 = &off_1E7FA3D80;
  *(_OWORD *)(v262 + 8) = xmmword_1C660B3C0;
  *((_QWORD *)v262 + 3) = 513;
  v619 = v262;
  sub_1C49328CC(v261, v618);
  v263 = v619;
  if (v619 == v618)
  {
    v264 = (void (**)(_QWORD *))(v618[0] + 32);
    v263 = v618;
  }
  else
  {
    if (!v619)
      goto LABEL_245;
    v264 = (void (**)(_QWORD *))(*v619 + 40);
  }
  (*v264)(v263);
LABEL_245:
  v265 = *(_DWORD *)(a1 + 6056);
  if (v265)
    v266 = v265 - 45;
  else
    v266 = 36;
  v589 = (int64x2_t)xmmword_1C660B420;
  v590 = (int64x2_t)xmmword_1C660B430;
  v591 = xmmword_1C660B390;
  v592 = xmmword_1C660B3A0;
  *(_QWORD *)&v593 = 2097666;
  *(_QWORD *)&v534 = 513;
  v267 = sub_1C6146774(a1 + 168 * v266 + 8, 0, &v589, 9, &v534, 1);
  *(_QWORD *)&v532 = 1573122;
  *(_QWORD *)&v538 = 257;
  v268 = sub_1C6146774(v267, 0, &v532, 1, &v538, 1);
  v616[0] = &off_1E7FA3DC8;
  v617 = v616;
  sub_1C49328CC(v268, v616);
  v269 = v617;
  if (v617 == v616)
  {
    v270 = (void (**)(_QWORD *))(v616[0] + 32);
    v269 = v616;
  }
  else
  {
    if (!v617)
      goto LABEL_253;
    v270 = (void (**)(_QWORD *))(*v617 + 40);
  }
  (*v270)(v269);
LABEL_253:
  v271 = *(_DWORD *)(a1 + 5888);
  if (v271)
    v272 = v271 - 45;
  else
    v272 = 35;
  *(_QWORD *)&v534 = 513;
  v589 = (int64x2_t)xmmword_1C660B420;
  v590 = (int64x2_t)xmmword_1C660B430;
  v591 = xmmword_1C660B390;
  v592 = xmmword_1C660B3A0;
  *(_QWORD *)&v593 = 2097666;
  v273 = sub_1C6146774(a1 + 168 * v272 + 8, 0, &v534, 1, &v589, 9);
  *(_QWORD *)&v532 = 257;
  *(_QWORD *)&v538 = 1573122;
  v274 = sub_1C6146774(v273, 0, &v532, 1, &v538, 1);
  v614[0] = &off_1E7FA3E10;
  v615 = v614;
  sub_1C49328CC(v274, v614);
  v275 = v615;
  if (v615 == v614)
  {
    v276 = (void (**)(_QWORD *))(v614[0] + 32);
    v275 = v614;
LABEL_260:
    (*v276)(v275);
    goto LABEL_261;
  }
  if (v615)
  {
    v276 = (void (**)(_QWORD *))(*v615 + 40);
    goto LABEL_260;
  }
LABEL_261:
  v277 = 0;
  v278 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v56 + 120))(v56) + 8) + 544);
  v589 = (int64x2_t)xmmword_1C660B440;
  v590 = (int64x2_t)xmmword_1C660B380;
  v591 = xmmword_1C660B420;
  v592 = xmmword_1C660B450;
  v593 = xmmword_1C660B460;
  do
  {
    v279 = v589.i64[v277];
    *(_QWORD *)&v534 = 193;
    *((_QWORD *)&v534 + 1) = v279;
    sub_1C4932AEC(v5, (uint64_t)&v534, 8);
    ++v277;
  }
  while (v277 != 10);
  v589.i64[0] = 70;
  v589.i64[1] = 514;
  sub_1C4932AEC(v5, (uint64_t)&v589, 8);
  v589.i64[0] = 71;
  v589.i64[1] = 33554946;
  sub_1C4932AEC(v5, (uint64_t)&v589, 8);
  v589.i64[0] = 71;
  v589.i64[1] = 1573122;
  sub_1C4932AEC(v5, (uint64_t)&v589, 8);
  v589.i64[0] = 71;
  v589.i64[1] = 1573378;
  sub_1C4932AEC(v5, (uint64_t)&v589, 8);
  v589.i64[0] = 71;
  v589.i64[1] = 1049090;
  sub_1C4932AEC(v5, (uint64_t)&v589, 8 * (v278 != 1));
  v589.i64[0] = 71;
  v589.i64[1] = 514;
  sub_1C4932AEC(v5, (uint64_t)&v589, 0);
  *(_QWORD *)&v538 = 0x600000005ALL;
  v280 = sub_1C553C5E0(a1, (int *)&v538, 2);
  v589 = (int64x2_t)xmmword_1C660B2D0;
  v590 = (int64x2_t)xmmword_1C660B3C0;
  v591 = xmmword_1C660B470;
  v592 = xmmword_1C660B480;
  v593 = xmmword_1C660B490;
  v594 = xmmword_1C660B4A0;
  v595 = xmmword_1C660B4B0;
  v596 = xmmword_1C660B4C0;
  v597 = xmmword_1C660B4D0;
  v598 = vdupq_n_s64(0x1000024uLL);
  *(_QWORD *)&v599 = 33554452;
  v534 = xmmword_1C660B420;
  v535 = xmmword_1C660B4E0;
  v536 = xmmword_1C660B4F0;
  *(_QWORD *)&v537 = 514;
  v281 = sub_1C6146774(v280, 8, &v589, 21, &v534, 7);
  v613 = 257;
  v532 = xmmword_1C660B3A0;
  v282 = sub_1C6146774(v281, 8, &v613, 1, &v532, 2);
  v283 = (char *)operator new(0x40uLL);
  *(_QWORD *)v283 = &off_1E7FA3E58;
  *(_OWORD *)(v283 + 8) = xmmword_1C660B420;
  *(_OWORD *)(v283 + 24) = xmmword_1C660B4E0;
  *(_OWORD *)(v283 + 40) = xmmword_1C660B4F0;
  *((_QWORD *)v283 + 7) = 514;
  v612 = v283;
  v284 = sub_1C49328CC(v282, v611);
  v285 = sub_1C49329B4(v284, 0, 0x41uLL);
  v286 = sub_1C4932D5C(v285, 0, 0x201uLL);
  v287 = sub_1C49325E4(v286, 0, 0);
  v288 = sub_1C4953808(v287, 0, 65, 2);
  v289 = sub_1C495392C(v288, 0, 65, 16);
  v290 = sub_1C4953808(v289, 0, 129, 2);
  v291 = sub_1C495392C(v290, 0, 129, 8);
  v292 = sub_1C4953808(v291, 0, 257, 2);
  v293 = sub_1C495392C(v292, 0, 257, 4);
  v294 = sub_1C4953808(v293, 0, 513, 2);
  v295 = sub_1C495392C(v294, 0, 513, 2);
  sub_1C4932B64(v295);
  v296 = v612;
  if (v612 == v611)
  {
    v297 = (void (**)(_QWORD *))(v611[0] + 32);
    v296 = v611;
  }
  else
  {
    if (!v612)
      goto LABEL_268;
    v297 = (void (**)(_QWORD *))(*v612 + 40);
  }
  (*v297)(v296);
LABEL_268:
  v589.i64[0] = 0x5C0000005BLL;
  v298 = sub_1C553C5E0(a1, v589.i32, 2);
  v299 = sub_1C6145CC8(v298);
  sub_1C6145D70(v299);
  v300 = *(_DWORD *)(a1 + 13448);
  if (v300)
    v301 = v300 - 45;
  else
    v301 = 80;
  sub_1C6145904(a1 + 168 * v301 + 8);
  v589 = (int64x2_t)xmmword_1C660AC44;
  v590 = (int64x2_t)unk_1C660AC54;
  v591 = xmmword_1C660AC64;
  v302 = sub_1C553C5E0(a1, v589.i32, 12);
  *(_QWORD *)&v532 = 257;
  v534 = xmmword_1C660B3A0;
  v535 = xmmword_1C660B3B0;
  *(_QWORD *)&v536 = 524802;
  v303 = sub_1C6146774(v302, 8, &v532, 1, &v534, 5);
  v609[0] = &unk_1E7FA3EA0;
  v609[1] = 513;
  v610 = v609;
  sub_1C49328CC(v303, v609);
  v304 = v610;
  if (v610 == v609)
  {
    v305 = (void (**)(_QWORD *))(v609[0] + 32);
    v304 = v609;
  }
  else
  {
    if (!v610)
      goto LABEL_276;
    v305 = (void (**)(_QWORD *))(*v610 + 40);
  }
  (*v305)(v304);
LABEL_276:
  v306 = *(_DWORD *)(a1 + 8912);
  if (v306)
    v307 = v306 - 45;
  else
    v307 = 53;
  v607[0] = &off_1E7FA3EE8;
  v607[1] = 257;
  v608 = v607;
  sub_1C49328CC(a1 + 168 * v307 + 8, v607);
  v308 = v608;
  if (v608 == v607)
  {
    v309 = (void (**)(_QWORD *))(v607[0] + 32);
    v308 = v607;
  }
  else
  {
    if (!v608)
      goto LABEL_284;
    v309 = (void (**)(_QWORD *))(*v608 + 40);
  }
  (*v309)(v308);
LABEL_284:
  v310 = *(_DWORD *)(a1 + 6224);
  if (v310)
    v311 = v310 - 45;
  else
    v311 = 37;
  v312 = a1 + 168 * v311 + 8;
  v603[0] = &off_1E816E408;
  v603[1] = 0x100000000;
  v604 = v603;
  sub_1C4932C0C(v603, (uint64_t)v605);
  v313 = sub_1C6145E60(v312, v605);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590 = (int64x2_t)xmmword_1C660B500;
  v591 = xmmword_1C660B510;
  v592 = xmmword_1C660B520;
  v593 = xmmword_1C660B530;
  v594 = xmmword_1C660B300;
  v595 = xmmword_1C660B490;
  v596 = xmmword_1C660B540;
  v597 = xmmword_1C660B330;
  v598 = (int64x2_t)xmmword_1C660B550;
  v599 = xmmword_1C660B560;
  v600 = xmmword_1C660B350;
  v601 = xmmword_1C660B570;
  v602 = 33554460;
  v314 = sub_1C6146CB0(v313, 0, &v589, 27);
  v315 = sub_1C49329B4(v314, 0, 0x81uLL);
  v316 = sub_1C4932D5C(v315, 0, 0x401uLL);
  v317 = sub_1C49329B4(v316, 1u, 0x81uLL);
  v318 = sub_1C4932D5C(v317, 1u, 0x401uLL);
  v319 = sub_1C6145F48(v318, 0, 0);
  v320 = sub_1C6145F48(v319, 1, 0);
  v321 = sub_1C6146E00(v320, 0, 0x41uLL);
  v322 = sub_1C6146F28(v321, 0, 0x401uLL);
  v323 = sub_1C6146E00(v322, 1, 0x41uLL);
  v324 = sub_1C6146F28(v323, 1, 0x401uLL);
  v587[0] = &off_1E816E258;
  v587[1] = 0x1000000000;
  v588 = v587;
  v585[0] = &off_1E816E6D8;
  v585[1] = 0x1000000000;
  v586 = v585;
  v325 = sub_1C6145434(v324, v587, v585);
  v583[0] = &off_1E816E258;
  v583[1] = 0x1000000001;
  v584 = v583;
  v581[0] = &off_1E816E6D8;
  v581[1] = 0x1000000001;
  v582 = v581;
  v326 = sub_1C6145434(v325, v583, v581);
  v579[0] = &off_1E816E2A0;
  v579[1] = 0x8000000000;
  v580 = v579;
  v577[0] = &off_1E816E720;
  v577[1] = 0x8000000000;
  v578 = v577;
  v327 = sub_1C6146050(v326, v579, v577);
  v575[0] = &off_1E816E2A0;
  v575[1] = 0x8000000001;
  v576 = v575;
  v573[0] = &off_1E816E720;
  v573[1] = 0x8000000001;
  v574 = v573;
  v328 = sub_1C6146050(v327, v575, v573);
  v329 = sub_1C61455A0(v328, 0);
  v330 = sub_1C61455A0(v329, 1);
  v331 = sub_1C4953808(v330, 0, 513, 2);
  v332 = sub_1C495392C(v331, 0, 513, 4);
  v333 = sub_1C4953808(v332, 1u, 513, 2);
  sub_1C495392C(v333, 1u, 513, 4);
  v334 = v574;
  if (v574 == v573)
  {
    v335 = (void (**)(_QWORD *))(v573[0] + 32);
    v334 = v573;
    v336 = v516;
  }
  else
  {
    v336 = v516;
    if (!v574)
      goto LABEL_292;
    v335 = (void (**)(_QWORD *))(*v574 + 40);
  }
  (*v335)(v334);
LABEL_292:
  v337 = v576;
  if (v576 == v575)
  {
    v338 = (void (**)(_QWORD *))(v575[0] + 32);
    v337 = v575;
  }
  else
  {
    if (!v576)
      goto LABEL_297;
    v338 = (void (**)(_QWORD *))(*v576 + 40);
  }
  (*v338)(v337);
LABEL_297:
  v339 = v578;
  if (v578 == v577)
  {
    v340 = (void (**)(_QWORD *))(v577[0] + 32);
    v339 = v577;
  }
  else
  {
    if (!v578)
      goto LABEL_302;
    v340 = (void (**)(_QWORD *))(*v578 + 40);
  }
  (*v340)(v339);
LABEL_302:
  v341 = v580;
  if (v580 == v579)
  {
    v342 = (void (**)(_QWORD *))(v579[0] + 32);
    v341 = v579;
  }
  else
  {
    if (!v580)
      goto LABEL_307;
    v342 = (void (**)(_QWORD *))(*v580 + 40);
  }
  (*v342)(v341);
LABEL_307:
  v343 = v582;
  if (v582 == v581)
  {
    v344 = (void (**)(_QWORD *))(v581[0] + 32);
    v343 = v581;
  }
  else
  {
    if (!v582)
      goto LABEL_312;
    v344 = (void (**)(_QWORD *))(*v582 + 40);
  }
  (*v344)(v343);
LABEL_312:
  v345 = v584;
  if (v584 == v583)
  {
    v346 = (void (**)(_QWORD *))(v583[0] + 32);
    v345 = v583;
  }
  else
  {
    if (!v584)
      goto LABEL_317;
    v346 = (void (**)(_QWORD *))(*v584 + 40);
  }
  (*v346)(v345);
LABEL_317:
  v347 = v586;
  if (v586 == v585)
  {
    v348 = (void (**)(_QWORD *))(v585[0] + 32);
    v347 = v585;
  }
  else
  {
    if (!v586)
      goto LABEL_322;
    v348 = (void (**)(_QWORD *))(*v586 + 40);
  }
  (*v348)(v347);
LABEL_322:
  v349 = v588;
  if (v588 == v587)
  {
    v350 = (void (**)(_QWORD *))(v587[0] + 32);
    v349 = v587;
  }
  else
  {
    if (!v588)
      goto LABEL_327;
    v350 = (void (**)(_QWORD *))(*v588 + 40);
  }
  (*v350)(v349);
LABEL_327:
  v351 = v606;
  if (v606 == v605)
  {
    v352 = (void (**)(_QWORD *))(v605[0] + 32);
    v351 = v605;
  }
  else
  {
    if (!v606)
      goto LABEL_332;
    v352 = (void (**)(_QWORD *))(*v606 + 40);
  }
  (*v352)(v351);
LABEL_332:
  v353 = v604;
  if (v604 == v603)
  {
    v354 = (void (**)(_QWORD *))(v603[0] + 32);
    v353 = v603;
  }
  else
  {
    if (!v604)
      goto LABEL_337;
    v354 = (void (**)(_QWORD *))(*v604 + 40);
  }
  (*v354)(v353);
LABEL_337:
  *(_QWORD *)&v532 = 0x7C00000076;
  DWORD2(v532) = 126;
  v355 = sub_1C553C5E0(a1, (int *)&v532, 3);
  v589 = (int64x2_t)xmmword_1C660B320;
  v534 = xmmword_1C660B3C0;
  v356 = sub_1C6146774(v355, 0, &v589, 2, &v534, 2);
  v357 = sub_1C49329B4(v356, 0, 0x101uLL);
  v358 = sub_1C4932D5C(v357, 0, 0x201uLL);
  v359 = sub_1C49325E4(v358, 0, 0);
  v360 = sub_1C49329B4(v359, 1u, 0x81uLL);
  v361 = sub_1C4932D5C(v360, 1u, 0x101uLL);
  v362 = sub_1C49325E4(v361, 1u, 0);
  v571[0] = &off_1E7FA39D8;
  v572 = v571;
  sub_1C49328CC(v362, v571);
  v363 = v572;
  if (v572 == v571)
  {
    v364 = (void (**)(_QWORD *))(v571[0] + 32);
    v363 = v571;
  }
  else
  {
    if (!v572)
      goto LABEL_342;
    v364 = (void (**)(_QWORD *))(*v572 + 40);
  }
  (*v364)(v363);
LABEL_342:
  v365 = *(_DWORD *)(a1 + 12440);
  if (v365)
    v366 = v365 - 45;
  else
    v366 = 74;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B320;
  v367 = sub_1C6146774(a1 + 168 * v366 + 8, 0, &v589, 2, &v534, 2);
  v368 = sub_1C4932D5C(v367, 0, 0x101uLL);
  v369 = sub_1C4932D5C(v368, 1u, 0x201uLL);
  v569[0] = &off_1E7FA39D8;
  v570 = v569;
  v370 = sub_1C49328CC(v369, v569);
  sub_1C61461BC(v370);
  v371 = v570;
  if (v570 == v569)
  {
    v372 = (void (**)(_QWORD *))(v569[0] + 32);
    v371 = v569;
  }
  else
  {
    if (!v570)
      goto LABEL_350;
    v372 = (void (**)(_QWORD *))(*v570 + 40);
  }
  (*v372)(v371);
LABEL_350:
  if (*v336)
    v373 = *v336 - 45;
  else
    v373 = 159;
  v374 = a1 + 168 * v373 + 8;
  v375 = (char *)operator new(0x30uLL);
  *(_QWORD *)v375 = &unk_1E7FA3F78;
  *(_OWORD *)(v375 + 8) = xmmword_1C660B2D0;
  *(_OWORD *)(v375 + 24) = xmmword_1C660B3C0;
  *((_QWORD *)v375 + 5) = 513;
  v568 = v375;
  sub_1C49328CC(v374, v567);
  v376 = v568;
  if (v568 == v567)
  {
    v377 = (void (**)(_QWORD *))(v567[0] + 32);
    v376 = v567;
  }
  else
  {
    if (!v568)
      goto LABEL_358;
    v377 = (void (**)(_QWORD *))(*v568 + 40);
  }
  (*v377)(v376);
LABEL_358:
  v378 = v336[42];
  if (v378)
    v379 = v378 - 45;
  else
    v379 = 160;
  v534 = xmmword_1C660B3C0;
  v589 = (int64x2_t)xmmword_1C660B330;
  v590 = (int64x2_t)xmmword_1C660B550;
  v591 = xmmword_1C660B560;
  v592 = xmmword_1C660B350;
  *(_QWORD *)&v532 = 257;
  v380 = sub_1C6147050(a1 + 168 * v379 + 8, 0, &v534, 2, &v589, 8, &v532, 1);
  v381 = (char *)operator new(0x40uLL);
  *(_QWORD *)v381 = &off_1E7FA3FC0;
  *(_OWORD *)(v381 + 8) = xmmword_1C660B580;
  *(_OWORD *)(v381 + 24) = xmmword_1C660B590;
  *(_OWORD *)(v381 + 40) = xmmword_1C660B3C0;
  *((_QWORD *)v381 + 7) = 513;
  v566 = v381;
  sub_1C49328CC(v380, v565);
  v382 = v566;
  if (v566 == v565)
  {
    v383 = (void (**)(_QWORD *))(v565[0] + 32);
    v382 = v565;
  }
  else
  {
    if (!v566)
      goto LABEL_366;
    v383 = (void (**)(_QWORD *))(*v566 + 40);
  }
  (*v383)(v382);
LABEL_366:
  if (*v517)
    v384 = *v517 - 45;
  else
    v384 = 161;
  v385 = a1 + 168 * v384 + 8;
  v386 = (char *)operator new(0x30uLL);
  *(_QWORD *)v386 = &off_1E7FA4008;
  *(_OWORD *)(v386 + 8) = xmmword_1C660B2D0;
  *(_OWORD *)(v386 + 24) = xmmword_1C660B3C0;
  *((_QWORD *)v386 + 5) = 513;
  v564 = v386;
  sub_1C614626C(v385, v563);
  v387 = v564;
  if (v564 == v563)
  {
    v388 = (void (**)(_QWORD *))(v563[0] + 32);
    v387 = v563;
  }
  else
  {
    if (!v564)
      goto LABEL_374;
    v388 = (void (**)(_QWORD *))(*v564 + 40);
  }
  (*v388)(v387);
LABEL_374:
  v389 = *(_DWORD *)(a1 + 5720);
  if (v389)
    v390 = v389 - 45;
  else
    v390 = 34;
  v391 = a1 + 168 * v390 + 8;
  v392 = (char *)operator new(0x88uLL);
  *(_QWORD *)v392 = &off_1E7FA4050;
  *(_OWORD *)(v392 + 8) = xmmword_1C660B2E0;
  *(_OWORD *)(v392 + 24) = xmmword_1C660B480;
  *(_OWORD *)(v392 + 40) = xmmword_1C660B5A0;
  *(_OWORD *)(v392 + 56) = xmmword_1C660B330;
  *(_OWORD *)(v392 + 72) = xmmword_1C660B550;
  *(_OWORD *)(v392 + 88) = xmmword_1C660B560;
  *(_OWORD *)(v392 + 104) = xmmword_1C660B350;
  *(_OWORD *)(v392 + 120) = xmmword_1C660B5B0;
  v562 = v392;
  sub_1C49328CC(v391, v561);
  v393 = v562;
  if (v562 == v561)
  {
    v394 = (void (**)(_QWORD *))(v561[0] + 32);
    v393 = v561;
  }
  else
  {
    if (!v562)
      goto LABEL_382;
    v394 = (void (**)(_QWORD *))(*v562 + 40);
  }
  (*v394)(v393);
LABEL_382:
  v395 = *(_DWORD *)(a1 + 4712);
  if (v395)
    v396 = v395 - 45;
  else
    v396 = 28;
  v559[0] = &off_1E7FA4098;
  v560 = v559;
  v397 = sub_1C6145E60(a1 + 168 * v396 + 8, v559);
  v557[0] = &off_1E7FA40E0;
  v557[1] = 65;
  v558 = v557;
  v398 = sub_1C49328CC(v397, v557);
  v399 = (char *)operator new(0x20uLL);
  *(_QWORD *)v399 = &off_1E7FA4128;
  *(_OWORD *)(v399 + 8) = xmmword_1C660B300;
  *((_QWORD *)v399 + 3) = 4194372;
  v556 = v399;
  v400 = sub_1C49328CC(v398, v555);
  v401 = (char *)operator new(0x58uLL);
  *(_QWORD *)v401 = &off_1E7FA4170;
  *(_OWORD *)(v401 + 8) = xmmword_1C660B3C0;
  *(_OWORD *)(v401 + 24) = xmmword_1C660B5C0;
  *(_OWORD *)(v401 + 40) = xmmword_1C660B330;
  *(_OWORD *)(v401 + 56) = xmmword_1C660B340;
  *(_OWORD *)(v401 + 72) = xmmword_1C660B350;
  v554 = v401;
  v402 = sub_1C614534C(v400, v553);
  v551[0] = &off_1E7FA39D8;
  v552 = v551;
  v403 = sub_1C49328CC(v402, v551);
  v404 = sub_1C49329B4(v403, 1u, 0x81uLL);
  v405 = sub_1C4932D5C(v404, 1u, 0x101uLL);
  sub_1C49325E4(v405, 1u, 0);
  v406 = v552;
  if (v552 == v551)
  {
    v407 = (void (**)(_QWORD *))(v551[0] + 32);
    v406 = v551;
  }
  else
  {
    if (!v552)
      goto LABEL_390;
    v407 = (void (**)(_QWORD *))(*v552 + 40);
  }
  (*v407)(v406);
LABEL_390:
  v408 = v554;
  if (v554 == v553)
  {
    v409 = (void (**)(_QWORD *))(v553[0] + 32);
    v408 = v553;
  }
  else
  {
    if (!v554)
      goto LABEL_395;
    v409 = (void (**)(_QWORD *))(*v554 + 40);
  }
  (*v409)(v408);
LABEL_395:
  v410 = v556;
  if (v556 == v555)
  {
    v411 = (void (**)(_QWORD *))(v555[0] + 32);
    v410 = v555;
  }
  else
  {
    if (!v556)
      goto LABEL_400;
    v411 = (void (**)(_QWORD *))(*v556 + 40);
  }
  (*v411)(v410);
LABEL_400:
  v412 = v558;
  if (v558 == v557)
  {
    v413 = (void (**)(_QWORD *))(v557[0] + 32);
    v412 = v557;
  }
  else
  {
    if (!v558)
      goto LABEL_405;
    v413 = (void (**)(_QWORD *))(*v558 + 40);
  }
  (*v413)(v412);
LABEL_405:
  v414 = v560;
  if (v560 == v559)
  {
    v415 = (void (**)(_QWORD *))(v559[0] + 32);
    v414 = v559;
LABEL_409:
    (*v415)(v414);
    goto LABEL_410;
  }
  if (v560)
  {
    v415 = (void (**)(_QWORD *))(*v560 + 40);
    goto LABEL_409;
  }
LABEL_410:
  v416 = 0;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590 = (int64x2_t)xmmword_1C660B330;
  v591 = xmmword_1C660B340;
  v592 = xmmword_1C660B350;
  do
  {
    v417 = v589.i64[v416];
    *(_QWORD *)&v534 = 75;
    *((_QWORD *)&v534 + 1) = v417;
    sub_1C4932AEC(v5, (uint64_t)&v534, 0);
    ++v416;
  }
  while (v416 != 8);
  v418 = 0;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590 = (int64x2_t)xmmword_1C660B5C0;
  *(_QWORD *)&v591 = 2049;
  do
  {
    v419 = v589.i64[v418];
    *(_QWORD *)&v534 = 0x10000004BLL;
    *((_QWORD *)&v534 + 1) = v419;
    sub_1C4932AEC(v5, (uint64_t)&v534, 0);
    ++v418;
  }
  while (v418 != 5);
  v420 = 0;
  v589 = (int64x2_t)xmmword_1C660B5D0;
  v590 = (int64x2_t)xmmword_1C660B5E0;
  do
  {
    v421 = v589.i64[v420];
    *(_QWORD *)&v534 = 0x10000004BLL;
    *((_QWORD *)&v534 + 1) = v421;
    sub_1C4932AEC(v5, (uint64_t)&v534, 8);
    ++v420;
  }
  while (v420 != 4);
  v422 = *(_DWORD *)(a1 + 11600);
  if (v422)
    v423 = v422 - 45;
  else
    v423 = 69;
  v549[0] = &off_1E7FA41B8;
  v549[1] = 9;
  v550 = v549;
  sub_1C49328CC(a1 + 168 * v423 + 8, v549);
  v424 = v550;
  if (v550 == v549)
  {
    v425 = (void (**)(_QWORD *))(v549[0] + 32);
    v424 = v549;
  }
  else
  {
    if (!v550)
      goto LABEL_424;
    v425 = (void (**)(_QWORD *))(*v550 + 40);
  }
  (*v425)(v424);
LABEL_424:
  v589.i64[0] = 0x8700000086;
  v426 = sub_1C553C5E0(a1, v589.i32, 2);
  sub_1C61459B4(v426);
  v427 = *(_DWORD *)(a1 + 848);
  if (v427)
    v428 = v427 - 45;
  else
    v428 = 5;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v429 = sub_1C4952F0C(a1 + 168 * v428 + 8, 0, &v589, 2);
  v430 = (char *)operator new(0x20uLL);
  *(_QWORD *)v430 = &off_1E7FA4200;
  *(_OWORD *)(v430 + 8) = xmmword_1C660B5C0;
  *((_QWORD *)v430 + 3) = 2049;
  v548 = v430;
  v431 = sub_1C49328CC(v429, v547);
  v432 = sub_1C49329B4(v431, 0, 0x81uLL);
  sub_1C49325E4(v432, 0, 0);
  v433 = v548;
  if (v548 == v547)
  {
    v434 = (void (**)(_QWORD *))(v547[0] + 32);
    v433 = v547;
  }
  else
  {
    if (!v548)
      goto LABEL_432;
    v434 = (void (**)(_QWORD *))(*v548 + 40);
  }
  (*v434)(v433);
LABEL_432:
  v435 = *(_DWORD *)(a1 + 1016);
  if (v435)
    v436 = v435 - 45;
  else
    v436 = 6;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B3C0;
  v437 = sub_1C6146774(a1 + 168 * v436 + 8, 0, &v589, 2, &v534, 2);
  *(_QWORD *)&v538 = 513;
  v532 = xmmword_1C660B3C0;
  v438 = sub_1C6146774(v437, 8, &v538, 1, &v532, 2);
  v439 = (char *)operator new(0x20uLL);
  *(_QWORD *)v439 = &off_1E7FA4248;
  *(_OWORD *)(v439 + 8) = xmmword_1C660B5C0;
  *((_QWORD *)v439 + 3) = 2049;
  v546 = v439;
  v440 = sub_1C49328CC(v438, v545);
  v441 = sub_1C49329B4(v440, 0, 0x81uLL);
  v442 = sub_1C4932D5C(v441, 0, 0x101uLL);
  v443 = sub_1C49329B4(v442, 1u, 0x81uLL);
  v444 = sub_1C49325E4(v443, 0, 0);
  sub_1C49325E4(v444, 1u, 0);
  v445 = v546;
  if (v546 == v545)
  {
    v446 = (void (**)(_QWORD *))(v545[0] + 32);
    v445 = v545;
  }
  else
  {
    if (!v546)
      goto LABEL_440;
    v446 = (void (**)(_QWORD *))(*v546 + 40);
  }
  (*v446)(v445);
LABEL_440:
  v447 = a1 + 8;
  v448 = *(_DWORD *)(a1 + 1856);
  if (v448)
    v449 = v448 - 45;
  else
    v449 = 11;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v450 = sub_1C4952F0C(v447 + 168 * v449, 0, &v589, 3);
  sub_1C61461BC(v450);
  v451 = *(_DWORD *)(a1 + 2024);
  if (v451)
    v452 = v451 - 45;
  else
    v452 = 12;
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v590.i64[0] = 513;
  v453 = sub_1C4952F0C(v447 + 168 * v452, 0, &v589, 3);
  sub_1C61461BC(v453);
  *(_QWORD *)&v538 = 0x3500000034;
  v454 = sub_1C553C5E0(a1, (int *)&v538, 2);
  v589 = (int64x2_t)xmmword_1C660B3C0;
  v534 = xmmword_1C660B3C0;
  v532 = xmmword_1C660B3C0;
  v455 = sub_1C6147050(v454, 0, &v589, 2, &v534, 2, &v532, 2);
  sub_1C61461BC(v455);
  v456 = *(_DWORD *)(a1 + 15296);
  if (v456)
    v457 = v456 - 45;
  else
    v457 = 91;
  v458 = v447 + 168 * v457;
  v459 = (char *)operator new(0x68uLL);
  *(_QWORD *)v459 = &off_1E7FA4290;
  *(_OWORD *)(v459 + 8) = xmmword_1C660B3C0;
  *(_OWORD *)(v459 + 24) = xmmword_1C660B470;
  *(_OWORD *)(v459 + 40) = xmmword_1C660B5F0;
  *(_OWORD *)(v459 + 56) = xmmword_1C660B4B0;
  *(_OWORD *)(v459 + 72) = xmmword_1C660B4D0;
  *(_OWORD *)(v459 + 88) = xmmword_1C660B600;
  v544 = v459;
  v460 = sub_1C49328CC(v458, v543);
  v461 = sub_1C49329B4(v460, 0, 0x81uLL);
  v462 = sub_1C4932D5C(v461, 0, 0x201uLL);
  v463 = sub_1C49325E4(v462, 0, 0);
  v464 = sub_1C4953808(v463, 0, 65, 2);
  v465 = sub_1C495392C(v464, 0, 65, 4);
  v541[0] = &unk_1E7FA42D8;
  v541[1] = 4194332;
  v542 = v541;
  v539[0] = &off_1E816E690;
  v539[1] = 0;
  v540 = v539;
  v466 = sub_1C6145434(v465, v541, v539);
  v467 = sub_1C4953808(v466, 0, 129, 2);
  v468 = sub_1C495392C(v467, 0, 129, 4);
  v469 = sub_1C4953808(v468, 0, 257, 2);
  v470 = sub_1C495392C(v469, 0, 257, 4);
  v471 = sub_1C4953808(v470, 0, 513, 2);
  sub_1C495392C(v471, 0, 513, 2);
  v472 = v540;
  if (v540 == v539)
  {
    v473 = (void (**)(_QWORD *))(v539[0] + 32);
    v472 = v539;
  }
  else
  {
    if (!v540)
      goto LABEL_454;
    v473 = (void (**)(_QWORD *))(*v540 + 40);
  }
  (*v473)(v472);
LABEL_454:
  v474 = v542;
  if (v542 == v541)
  {
    v475 = (void (**)(_QWORD *))(v541[0] + 32);
    v474 = v541;
  }
  else
  {
    if (!v542)
      goto LABEL_459;
    v475 = (void (**)(_QWORD *))(*v542 + 40);
  }
  (*v475)(v474);
LABEL_459:
  v476 = v544;
  if (v544 == v543)
  {
    v477 = (void (**)(_QWORD *))(v543[0] + 32);
    v476 = v543;
  }
  else
  {
    if (!v544)
      goto LABEL_464;
    v477 = (void (**)(_QWORD *))(*v544 + 40);
  }
  (*v477)(v476);
LABEL_464:
  v478 = a1 + 8;
  v479 = *(_DWORD *)(a1 + 5384);
  if (v479)
    v480 = v479 - 45;
  else
    v480 = 32;
  v589 = (int64x2_t)xmmword_1C660B330;
  v590 = (int64x2_t)xmmword_1C660B610;
  v591 = xmmword_1C660B620;
  v592 = xmmword_1C660B560;
  v593 = xmmword_1C660B350;
  v538 = xmmword_1C660B3C0;
  v481 = sub_1C6146774(v478 + 168 * v480, 0, &v589, 10, &v538, 2);
  v534 = xmmword_1C660B2E0;
  v535 = xmmword_1C660B2F0;
  v536 = xmmword_1C660B630;
  v537 = xmmword_1C660B640;
  v532 = xmmword_1C660B2D0;
  v533 = 513;
  sub_1C6146774(v481, 8, &v534, 8, &v532, 3);
  v482 = *(_DWORD *)(a1 + 5552);
  if (v482)
    v483 = v482 - 45;
  else
    v483 = 33;
  v589 = (int64x2_t)xmmword_1C660B2E0;
  v590 = (int64x2_t)xmmword_1C660B2F0;
  v591 = xmmword_1C660B630;
  *(_QWORD *)&v592 = 4194436;
  *(_QWORD *)&v534 = 129;
  sub_1C6146774(v478 + 168 * v483, 0, &v589, 7, &v534, 1);
  v484 = *(_DWORD *)(a1 + 5216);
  if (v484)
    v485 = v484 - 45;
  else
    v485 = 31;
  v529 = &off_1E7FA4320;
  v530 = xmmword_1C660B650;
  v531 = &v529;
  v486 = sub_1C49328CC(v478 + 168 * v485, &v529);
  v487 = operator new(0x28uLL);
  *v487 = &off_1E7FA4368;
  v487[1] = 129;
  *((_DWORD *)v487 + 4) = v55;
  v487[3] = 257;
  *((_DWORD *)v487 + 8) = v518;
  v528 = v487;
  v488 = sub_1C614534C(v486, v527);
  v489 = v521;
  v490 = sub_1C49329B4(v488, 0, 0x101uLL);
  sub_1C4932D5C(v490, 0, v489);
  v491 = v528;
  if (v528 == v527)
  {
    v492 = (void (**)(_QWORD *))(v527[0] + 32);
    v491 = v527;
  }
  else
  {
    if (!v528)
      goto LABEL_478;
    v492 = (void (**)(_QWORD *))(*v528 + 40);
  }
  (*v492)(v491);
LABEL_478:
  v493 = v531;
  if (v531 == &v529)
  {
    v494 = (void (**)(uint64_t (***)()))(v529 + 4);
    v493 = &v529;
  }
  else
  {
    if (!v531)
      goto LABEL_483;
    v494 = (void (**)(uint64_t (***)()))(*v531 + 5);
  }
  (*v494)(v493);
LABEL_483:
  v495 = *(_DWORD *)(a1 + 4880);
  if (v495)
    v496 = v495 - 45;
  else
    v496 = 29;
  v497 = a1 + 168 * v496 + 8;
  v498 = (char *)operator new(0x28uLL);
  *(_QWORD *)v498 = &off_1E7FA43B0;
  *(_OWORD *)(v498 + 8) = xmmword_1C660B650;
  *(_OWORD *)(v498 + 24) = xmmword_1C660B660;
  v526 = v498;
  v499 = sub_1C49328CC(v497, v525);
  v500 = (char *)operator new(0x28uLL);
  *(_QWORD *)v500 = &off_1E7FA43F8;
  *(_OWORD *)(v500 + 8) = xmmword_1C660B3C0;
  *((_QWORD *)v500 + 3) = 8388628;
  *((_DWORD *)v500 + 8) = v518;
  v524 = v500;
  v501 = sub_1C614534C(v499, v523);
  v502 = v521;
  v503 = sub_1C49329B4(v501, 1u, 0x81uLL);
  sub_1C4932D5C(v503, 1u, v502);
  v504 = v524;
  if (v524 == v523)
  {
    v505 = (void (**)(_QWORD *))(v523[0] + 32);
    v504 = v523;
  }
  else
  {
    if (!v524)
      goto LABEL_491;
    v505 = (void (**)(_QWORD *))(*v524 + 40);
  }
  (*v505)(v504);
LABEL_491:
  v506 = v526;
  if (v526 == v525)
  {
    v507 = (void (**)(_QWORD *))(v525[0] + 32);
    v506 = v525;
LABEL_495:
    (*v507)(v506);
    goto LABEL_496;
  }
  if (v526)
  {
    v507 = (void (**)(_QWORD *))(*v526 + 40);
    goto LABEL_495;
  }
LABEL_496:
  v589 = (int64x2_t)xmmword_1C660B670;
  v508 = sub_1C553C5E0(a1, v589.i32, 4);
  sub_1C6145904(v508);
  sub_1C553D3C4(v5);
  (*(void (**)(_BYTE *))(*(_QWORD *)v56 + 104))(v56);
  return a1;
}

uint64_t sub_1C49325E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  uint64_t (***v6)();
  void (**v7)(uint64_t (***)());
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t (**v11)();
  unsigned int v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = &v11;
  v9[0] = &off_1E816E648;
  v9[1] = a2 | (unint64_t)(a3 << 32);
  v10 = v9;
  v11 = &off_1E816E3C0;
  v3 = sub_1C4953548(a1, 2, &v11, v9);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = (void (**)(_QWORD *))(v9[0] + 32);
    v4 = v9;
LABEL_3:
    (*v5)(v4);
    goto LABEL_4;
  }
  if (v10)
  {
    v5 = (void (**)(_QWORD *))(*v10 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v6 = v13;
  if (v13 == &v11)
  {
    v7 = (void (**)(uint64_t (***)()))(v11 + 4);
    v6 = &v11;
  }
  else
  {
    if (!v13)
      return v3;
    v7 = (void (**)(uint64_t (***)()))(*v13 + 5);
  }
  (*v7)(v6);
  return v3;
}

_QWORD *sub_1C49326DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v5 + 16))(a1[3]);
    }
  }
  else
  {
    v15 = 0;
  }
  v6 = v16;
  v7 = (_QWORD *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v16);
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v17 = 0;
  }
  v8 = operator new(0x48uLL);
  v9 = v8;
  *v8 = &unk_1E7FA38B8;
  if (v15)
  {
    if (v15 == v14)
    {
      v8[4] = v8 + 1;
      (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      v8[4] = v15;
      v15 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  if (!v17)
  {
    v9[8] = 0;
    goto LABEL_13;
  }
  if (v17 != v16)
  {
    v9[8] = v17;
    v17 = 0;
LABEL_13:
    *(_QWORD *)(a3 + 24) = v9;
    goto LABEL_14;
  }
  v9[8] = v9 + 5;
  (*(void (**)(_QWORD *))(v16[0] + 24))(v16);
  v12 = v17;
  *(_QWORD *)(a3 + 24) = v9;
  if (v12 == v16)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_14;
    v13 = 5;
    v6 = v12;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v13))(v6);
LABEL_14:
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

uint64_t sub_1C49328CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = sub_1C4952FC8(a1, 8, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = (void (**)(_QWORD *))(v8[0] + 32);
    v5 = v8;
  }
  else
  {
    if (!v9)
      return v4;
    v6 = (void (**)(_QWORD *))(*v9 + 40);
  }
  (*v6)(v5);
  return v4;
}

uint64_t sub_1C49329B4(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v5 = sub_1C4825F50(&v14);
  if ((_DWORD)v6 == 1)
  {
    v13 = v5;
    v5 = v13;
  }
  v17[0] = &off_1E816E1C8;
  v17[1] = a2 | (unint64_t)(v5 << 32);
  v18 = v17;
  v15[0] = &off_1E816E528;
  v15[1] = a2;
  v15[2] = v14;
  v16 = v15;
  v7 = sub_1C4953548(a1, 2, v17, v15);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = (void (**)(_QWORD *))(v15[0] + 32);
    v8 = v15;
LABEL_5:
    (*v9)(v8);
    goto LABEL_6;
  }
  if (v16)
  {
    v9 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_5;
  }
LABEL_6:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = (void (**)(_QWORD *))(v17[0] + 32);
    v10 = v17;
  }
  else
  {
    if (!v18)
      return v7;
    v11 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v11)(v10);
  return v7;
}

_QWORD *sub_1C4932AEC(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *result;

  *(_BYTE *)(a1 + 28696) = 0;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = a1 + 40 * (*(_DWORD *)a2 - 45);
  if (*(_DWORD *)(v6 + 8) <= v5)
  {
    sub_1C61469E8(v6, v5 + 1);
    v5 = *(_DWORD *)(a2 + 4);
  }
  result = sub_1C4953C64((_DWORD *)(*(_QWORD *)v6 + 24 * v5), (_QWORD *)(a2 + 8));
  *((_BYTE *)result + 8) = a3;
  return result;
}

uint64_t sub_1C4932B64(uint64_t a1)
{
  uint64_t v1;
  void (**v2)(void);
  uint64_t (**v4)();
  int v5;
  uint64_t (***v6)();
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = &off_1E816E450;
  v5 = 0;
  v6 = &v4;
  v1 = sub_1C4952FC8(a1, 6, &v4);
  if (v6 == &v4)
  {
    v2 = (void (**)(void))(v4 + 4);
    goto LABEL_5;
  }
  if (v6)
  {
    v2 = (void (**)(void))(*v6 + 5);
LABEL_5:
    (*v2)();
  }
  return v1;
}

